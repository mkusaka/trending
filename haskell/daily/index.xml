<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Haskell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-10-03T01:37:22Z</updated>
  <subtitle>Daily Trending of Haskell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>graninas/software-design-in-haskell</title>
    <updated>2022-10-03T01:37:22Z</updated>
    <id>tag:github.com,2022-10-03:/graninas/software-design-in-haskell</id>
    <link href="https://github.com/graninas/software-design-in-haskell" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Software Design in Haskell. A structured set of materials. How to build real-world applications in Haskell.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Software Design and Architecture in Haskell&lt;/h1&gt; &#xA;&lt;p&gt;A structured set of materials on how to build real-world applications in Haskell.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Table of Contents&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/graninas/software-design-in-haskell/master/#Books-on-Software-Design-and-Architecture-in-Haskell&#34;&gt;Books on Software Design and Architecture in Haskell&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/graninas/software-design-in-haskell/master/#Application-Architectures&#34;&gt;Application Architectures&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/graninas/software-design-in-haskell/master/#Design-Approaches-and-Design-Patterns&#34;&gt;Design Approaches and Design Patterns&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/graninas/software-design-in-haskell/master/#Free-Monads&#34;&gt;Free Monads&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/graninas/software-design-in-haskell/master/#Final-Tagless--mtl&#34;&gt;Final Tagless / mtl&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/graninas/software-design-in-haskell/master/#Effect-Systems&#34;&gt;Effect Systems&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/graninas/software-design-in-haskell/master/#ReaderT-Pattern&#34;&gt;ReaderT Pattern&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/graninas/software-design-in-haskell/master/#Service-Handle-Pattern&#34;&gt;Service Handle Pattern&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/graninas/software-design-in-haskell/master/#Other-Patterns&#34;&gt;Other Patterns&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/graninas/software-design-in-haskell/master/#OOP-Design-Patterns-vs-FP-Design-Patterns&#34;&gt;OOP Design Patterns vs FP Design Patterns&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/graninas/software-design-in-haskell/master/#Comparison-of-Approaches&#34;&gt;Comparison of Approaches&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/graninas/software-design-in-haskell/master/#Comparison-Table&#34;&gt;Comparison Table&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/graninas/software-design-in-haskell/master/#Design-Principles&#34;&gt;Design Principles&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/graninas/software-design-in-haskell/master/#Philosophy&#34;&gt;Philosophy&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/graninas/software-design-in-haskell/master/#Best-Practices--Guidelines&#34;&gt;Best Practices &amp;amp; Guidelines&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/graninas/software-design-in-haskell/master/#Exceptions&#34;&gt;Exceptions&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/graninas/software-design-in-haskell/master/#Style-Guides&#34;&gt;Style Guides&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/graninas/software-design-in-haskell/master/#Showcase-Projects--Code-Orgranization-Samples&#34;&gt;Showcase Projects &amp;amp; Code Organization Samples&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/graninas/software-design-in-haskell/master/#Haskell-in-Production--Success-Stories--Experience-Reports&#34;&gt;Haskell in Production. Success Stories, Experience Reports&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/graninas/software-design-in-haskell/master/#Talks&#34;&gt;Talks&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/graninas/software-design-in-haskell/master/#Haskell-Ecosystem-and-Accessibility&#34;&gt;Haskell Ecosystem and Accessibility&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/graninas/software-design-in-haskell/master/#Haskell-Ecosystem-and-Community&#34;&gt;Haskell Ecosystem and Community&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/graninas/software-design-in-haskell/master/#Haskeller-Competency-Matrix&#34;&gt;Haskeller Competency Matrix&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/graninas/software-design-in-haskell/master/#Haskell-Learn-Books&#34;&gt;Haskell Learn: Books&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/graninas/software-design-in-haskell/master/#Misc&#34;&gt;Misc&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h1&gt;Books on Software Design and Architecture in Haskell&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.manning.com/books/functional-design-and-architecture&#34;&gt;Functional Design and Architecture (Second Edition)&lt;/a&gt; | &lt;strong&gt;Alexander Granin&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://leanpub.com/production-haskell&#34;&gt;Production Haskell&lt;/a&gt; | &lt;strong&gt;Matt Parsons&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://leanpub.com/algebra-driven-design&#34;&gt;Algebra-Driven-Design&lt;/a&gt; | &lt;strong&gt;Sandy Maguire&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.apress.com/gp/book/9781484244791&#34;&gt;Practical Haskell. A Real World Guide to Programming&lt;/a&gt; | &lt;strong&gt;Serrano, Alejandro&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://book.realworldhaskell.org/&#34;&gt;Real World Haskell&lt;/a&gt; | &lt;strong&gt;Bryan O&#39;Sullivan, Don Stewart, John Goerzen&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tssm/up-to-date-real-world-haskell&#34;&gt;Up-to-date Real World Haskell&lt;/a&gt; | &lt;strong&gt;Bryan O&#39;Sullivan, Don Stewart, John Goerzen, Tae Sandoval&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.oreilly.com/library/view/haskell-design-patterns/9781783988723/&#34;&gt;Haskell Design Patterns&lt;/a&gt; | &lt;strong&gt;Ryan Lemmer&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://leanpub.com/simple-haskell-book&#34;&gt;The Simple Haskell Handbook&lt;/a&gt; | &lt;strong&gt;Marco Sampellegrini&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.yesodweb.com/book&#34;&gt;Haskell And Yesod&lt;/a&gt; | &lt;strong&gt;Michael Snoyman&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Application Architectures&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.parsonsmatt.org/2018/03/22/three_layer_haskell_cake.html&#34;&gt;Three Layer Haskell Cake&lt;/a&gt; | &lt;strong&gt;Matt Parsons&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://degoes.net/articles/modern-fp&#34;&gt;A Modern Architecture for FP&lt;/a&gt; | &lt;strong&gt;John A De Goes&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://degoes.net/articles/modern-fp-part-2&#34;&gt;Modern Functional Programming: Part 2&lt;/a&gt; | &lt;strong&gt;John A De Goes&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://abailly.github.io/posts/cm-arch-design.html&#34;&gt;Anatomy of a Haskell-based Application&lt;/a&gt; | &lt;strong&gt;abailly&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.onikudaki.net/blog/archives/6&#34;&gt;Architecture of a Real World Haskell Application&lt;/a&gt; | &lt;strong&gt;Michael Oswald&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://m.youtube.com/watch?v=US8QG9I1XW0&#34;&gt;Functional architecture - The pits of success&lt;/a&gt; | &lt;strong&gt;Mark Seemann&lt;/strong&gt; | NDC Sidney 2016&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/graninas/hierarchical-free-monads-the-most-developed-approach-in-haskell/raw/master/README.md&#34;&gt;Hierarchical Free Monads: The Most Developed Approach In Haskell (And The Death Of Final Tagless)&lt;/a&gt; | &lt;strong&gt;Alexander Granin&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/3GKQ4ni2pS0&#34;&gt;Hierarchical Free Monads and Software Design in Functional Programming (Talk)&lt;/a&gt; | &lt;a href=&#34;https://docs.google.com/presentation/d/1SYMIZ-LOI8Ylykz0PTxwiPuHN_02gIWh9AjJDO6xbvM/edit?usp=sharing&#34;&gt;Slides&lt;/a&gt; | &lt;strong&gt;Alexander Granin&lt;/strong&gt; | FunctionalConf 2019, Bangalore, India&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.pinterest.ru/pin/791929915696726474/#amp&#34;&gt;Hexagonal Architecture and Free Monad: Two related design patterns?&lt;/a&gt; | &lt;strong&gt;Quentin Duval&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/questions/3077866/large-scale-design-in-haskell&#34;&gt;Large-scale design in Haskell? (SO question)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Design Approaches and Design Patterns&lt;/h1&gt; &#xA;&lt;h3&gt;Free Monads&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.haskellforall.com/2012/06/you-could-have-invented-free-monads.html&#34;&gt;Why free monads matter&lt;/a&gt; | &lt;strong&gt;Gabriel Gonzalez&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://joa.sh/posts/2015-09-13-free-monad-steps.html&#34;&gt;Free monads in 7 easy steps&lt;/a&gt; | &lt;strong&gt;joa&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://degoes.net/articles/modern-fp&#34;&gt;A Modern Architecture for FP&lt;/a&gt; | &lt;strong&gt;John A De Goes&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gist.github.com/graninas/9beb8df5d88dda5fa21c47ce9bcb0e16&#34;&gt;Building network actors with Node Framework&lt;/a&gt; | &lt;strong&gt;Alexander Granin&lt;/strong&gt; | &lt;em&gt;Note: a Free monadic architecture is described there.&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/graninas/automatic-whitebox-testing-showcase&#34;&gt;Automatic White-Box Testing with Free Monads&lt;/a&gt; | &lt;strong&gt;Alexander Granin&lt;/strong&gt; | &lt;a href=&#34;https://github.com/graninas/automatic-whitebox-testing-showcase&#34;&gt;Showcase&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/graninas/hierarchical-free-monads-the-most-developed-approach-in-haskell/raw/master/README.md&#34;&gt;Hierarchical Free Monads: The Most Developed Approach In Haskell (And The Death Of Final Tagless)&lt;/a&gt; | &lt;strong&gt;Alexander Granin&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/3GKQ4ni2pS0&#34;&gt;Hierarchical Free Monads and Software Design in Functional Programming (Talk)&lt;/a&gt; | &lt;a href=&#34;https://docs.google.com/presentation/d/1SYMIZ-LOI8Ylykz0PTxwiPuHN_02gIWh9AjJDO6xbvM/edit?usp=sharing&#34;&gt;Slides&lt;/a&gt; | &lt;strong&gt;Alexander Granin&lt;/strong&gt; | FunctionalConf 2019, Bangalore, India&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.endpoint.com/blog/2016/03/11/strict-typing-fun-example-free-monads&#34;&gt;Strict typing fun example — Free Monads in Haskell&lt;/a&gt; | &lt;strong&gt;Kamil Ciemniewski&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://deque.blog/2017/11/13/free-monads-from-basics-up-to-implementing-composable-and-effectful-stream-processing/&#34;&gt;Free Monads: from the basics to the implementation of composable and effectful stream processing&lt;/a&gt; | &lt;strong&gt;Quentin Duval&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.parsonsmatt.org/2017/09/22/what_does_free_buy_us.html&#34;&gt;What does Free buy us?&lt;/a&gt; | &lt;strong&gt;Matt Parsons&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.ploeh.dk/2017/07/24/combining-free-monads-in-haskell/&#34;&gt;Combining free monads in Haskell&lt;/a&gt; | &lt;strong&gt;Mark Seemann&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://markkarpov.com/post/free-monad-considered-harmful.html&#34;&gt;Free monad considered harmful&lt;/a&gt; | &lt;strong&gt;Mark Karpov&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://softwareengineering.stackexchange.com/questions/242795/what-is-the-free-monad-interpreter-pattern#&#34;&gt;What is the “Free Monad + Interpreter” pattern? (SO question)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://captjakk.com/posts/2019-05-12-practical-intro-eff.html&#34;&gt;A Practical Introduction to Freer Monads (Eff)&lt;/a&gt; | &lt;strong&gt;Keagan McClelland&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Final Tagless / mtl&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://jproyo.github.io/posts/2019-03-17-tagless-final-haskell.html&#34;&gt;Tagless Final Encoding in Haskell&lt;/a&gt; | &lt;strong&gt;Juan Pablo Royo&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://serokell.io/blog/tagless-final&#34;&gt;Introduction to Tagless Final&lt;/a&gt; | &lt;strong&gt;Vasiliy Kevroletin&lt;/strong&gt; | Serokell&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ro-che.info/articles/2016-02-03-finally-tagless-boilerplate&#34;&gt;Reducing boilerplate in finally tagless style&lt;/a&gt; | &lt;strong&gt;Roman Cheplyaka&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://wickstrom.tech/programming/2017/06/05/tagless-final-encoding-of-a-test-language.html&#34;&gt;Tagless Final Encoding of a Test Language&lt;/a&gt; | &lt;strong&gt;Oskar Wickström&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Effect Systems&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mmhaskell.com/blog/2017/11/20/eff-to-the-rescue&#34;&gt;Eff to the Rescue!&lt;/a&gt; | &lt;strong&gt;Monday Morning Haskell&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://medium.com/barely-functional/freer-doesnt-come-for-free-c9fade793501&#34;&gt;Freer doesn’t come for free&lt;/a&gt; | &lt;strong&gt;Eric Torreborre&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.sumtypeofway.com/posts/serving-http-content-with-fused-effects.html&#34;&gt;Serving HTTP Content with Fused-Effects&lt;/a&gt; | &lt;strong&gt;Patrick Thomson&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://captjakk.com/posts/2019-05-12-practical-intro-eff.html&#34;&gt;A Practical Introduction to Freer Monads (Eff)&lt;/a&gt; | &lt;strong&gt;Keagan McClelland&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;ReaderT Pattern&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.fpcomplete.com/blog/2017/06/readert-design-pattern&#34;&gt;The ReaderT Design Pattern&lt;/a&gt; | &lt;strong&gt;Michael Snoyman&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://magnus.therning.org/posts/2019-02-02-000-the-readert-design-pattern-or-tagless-final-.html&#34;&gt;The ReaderT design pattern or tagless final?&lt;/a&gt; | &lt;strong&gt;Magnus Therning&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.tweag.io/posts/2018-10-04-capability.html&#34;&gt;Capability: The ReaderT Pattern Without The Boilerplate&lt;/a&gt; | &lt;strong&gt;Andreas Herrmann, Arnaud Spiwack&lt;/strong&gt; | Tweag.IO&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Service Handle Pattern&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.schoolofhaskell.com/user/meiersi/the-service-pattern&#34;&gt;The Service Pattern&lt;/a&gt; | &lt;strong&gt;Simon Meier&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://jaspervdj.be/posts/2018-03-08-handle-pattern.html&#34;&gt;Haskell Design Patterns: The Handle Pattern&lt;/a&gt; | &lt;strong&gt;Jasper Van der Jeugt&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Other Patterns&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://kowainik.github.io/posts/haskell-mini-patterns&#34;&gt;Haskell mini-patterns handbook&lt;/a&gt; | &lt;strong&gt;Kowainik&lt;/strong&gt; (&lt;strong&gt;Dmitrii Kovanikov&lt;/strong&gt;, &lt;strong&gt;Veronika Romashkina&lt;/strong&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.oreilly.com/library/view/haskell-design-patterns/9781783988723/&#34;&gt;Haskell Design Patterns (Book)&lt;/a&gt; | &lt;strong&gt;Ryan Lemmer&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://michaelxavier.net/posts/2016-04-03-Enterprise-Haskell-Pattern-Lensed-Reader.html&#34;&gt;Enterprise Haskell Pattern: Lensed Reader&lt;/a&gt; | &lt;strong&gt;Michael Xavier&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://hackernoon.com/the-has-type-class-pattern-ca12adab70ae&#34;&gt;The Has Type Class Pattern&lt;/a&gt; | &lt;strong&gt;Jonathan Fischoff&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://hackernoon.com/type-class-patterns-and-anti-patterns-efd045c5af66&#34;&gt;Type Class Patterns and Anti-patterns&lt;/a&gt; | &lt;strong&gt;Jonathan Fischoff&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;OOP Design Patterns vs FP Design Patterns&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/thma/LtuPatternFactory&#34;&gt;Lambda the Ultimate Pattern Factory&lt;/a&gt; | &lt;strong&gt;thma&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Comparison of Approaches&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://williamyaoh.com/posts/2019-12-14-typesafe-db-libraries.html&#34;&gt;Which Type-Safe Database Library Should You Use?&lt;/a&gt; | &lt;strong&gt;William Yao&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://felixmulder.com/writing/2020/08/08/Revisiting-application-structure&#34;&gt;Revising application structure&lt;/a&gt; | &lt;strong&gt;Felix Mulder&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/u1GGqDQyGfc&#34;&gt;Final Tagless vs Free Monad (Talk, Rus)&lt;/a&gt; | &lt;a href=&#34;https://drive.google.com/open?id=1VhS8ySgk2w5RoN_l_Ar_axcE4Dzf97zLw1uuzUJQbCo&#34;&gt;Slides (Eng)&lt;/a&gt; | &lt;strong&gt;Alexander Granin&lt;/strong&gt; | FPure 2019, Kazan&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ocharles.org.uk/posts/2016-01-26-transformers-free-monads-mtl-laws.html&#34;&gt;Monad transformers, free monads, mtl, laws and a new approach&lt;/a&gt; | &lt;strong&gt;Oliver Charles&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://qfpl.io/posts/backpack-for-initial-and-final-encodings/&#34;&gt;Backpack for initial and final encodings&lt;/a&gt; | &lt;strong&gt;qfpl&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.tweag.io/posts/2018-10-04-capability.html&#34;&gt;Capability: The ReaderT Pattern Without The Boilerplate&lt;/a&gt; | &lt;strong&gt;Andreas Herrmann, Arnaud Spiwack&lt;/strong&gt; | Tweag.io&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Comparison Table&lt;/h3&gt; &#xA;&lt;p&gt;Separate page:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gist.github.com/graninas/1b7961ccaedf7b5cb92417a1599fdc99&#34;&gt;Haskell Approaches Comparison Table&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Philosophy&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.snoyman.com/blog/2019/11/boring-haskell-manifesto&#34;&gt;Boring Haskell Manifesto&lt;/a&gt; | &lt;strong&gt;Michael Snoyman&lt;/strong&gt; | &lt;a href=&#34;https://www.reddit.com/r/haskell/comments/dzx15d/boring_haskell_manifesto_by_michael_snoyman/&#34;&gt;Reddit discussion&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://patrickmn.com/software/the-haskell-pyramid/&#34;&gt;The Haskell Pyramid&lt;/a&gt; | &lt;strong&gt;Patrick&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://alpacaaa.net/thoughts-on-haskell-2020/&#34;&gt;My thoughts on Haskell in 2020&lt;/a&gt; | &lt;strong&gt;Marco Sampellegrini&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.parsonsmatt.org/2019/12/26/write_junior_code.html&#34;&gt;Write Junior Code&lt;/a&gt; | &lt;strong&gt;Matt Parsons&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dfithian.github.io/2019/12/30/fancy-haskell.html&#34;&gt;Fancy Haskell&lt;/a&gt; | &lt;strong&gt;Dan Fithian&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://medium.com/@fommil/simple-haskell-is-best-haskell-6a1ea59c73b&#34;&gt;Simple Haskell Is Best Haskell&lt;/a&gt; | &lt;strong&gt;Sam Halliday&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.stephendiehl.com/posts/marketing.html&#34;&gt;On Marketing Haskell&lt;/a&gt; | &lt;strong&gt;Stephen Diehl&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=fNpsgTIpODA&#34;&gt;How to market Haskell to mainstream programmers&lt;/a&gt; | Talk | &lt;strong&gt;Gabriel Gonzalez&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Design Principles&lt;/h1&gt; &#xA;&lt;p&gt;&lt;em&gt;Note. It&#39;s a big void here in these topics. We don&#39;t have any good materials about Design Principles applicable to Haskell.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Inversion of Control&lt;/li&gt; &#xA; &lt;li&gt;Dependency Injection&lt;/li&gt; &#xA; &lt;li&gt;Low Coupling / High Cohesion&lt;/li&gt; &#xA; &lt;li&gt;Rule of Least Power / Law of Demeter&lt;/li&gt; &#xA; &lt;li&gt;SOLID&lt;/li&gt; &#xA; &lt;li&gt;KISS&lt;/li&gt; &#xA; &lt;li&gt;YAGNI&lt;/li&gt; &#xA; &lt;li&gt;DRY&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Best Practices &amp;amp; Guidelines&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://williamyaoh.com/posts/2019-09-27-figuring-out-beam-migrations.html&#34;&gt;Figuring Out How To Use Beam For DB Migrations&lt;/a&gt; | &lt;strong&gt;Willam Yao&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/morteako/bitcoin&#34;&gt;Making a small Haskell application&lt;/a&gt; | &lt;strong&gt;Morten Kolstad&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/freckle/guides/raw/master/haskell-best-practices.md&#34;&gt;Haskell practices&lt;/a&gt; | &lt;strong&gt;freckle&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://lexi-lambda.github.io/blog/2018/02/10/an-opinionated-guide-to-haskell-in-2018/&#34;&gt;An opinionated guide to Haskell in 2018&lt;/a&gt; | &lt;strong&gt;Lexi Lambda&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=-X1vrxQUETM&#34;&gt;Getting things done in Haskell (Talk)&lt;/a&gt; | &lt;strong&gt;Jasper Van der Jeugt&lt;/strong&gt; | HaskellerZ, Feb 2018&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gist.github.com/mtesseract/1b69087b0aeeb6ddd7023ff05f7b7e68&#34;&gt;Working around Haskell&#39;s namespace problem for records&lt;/a&gt; | &lt;strong&gt;Moritz Clasmeier&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Exceptions&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.fpcomplete.com/blog/2016/11/exceptions-best-practices-haskell&#34;&gt;Exceptions Best Practices in Haskell&lt;/a&gt; | &lt;strong&gt;Michael Snoyman&lt;/strong&gt; | FP Complete&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.fpcomplete.com/blog/2018/04/async-exception-handling-haskell/&#34;&gt;Asynchronous exception handling in Haskell&lt;/a&gt; | &lt;strong&gt;Michael Snoyman&lt;/strong&gt; | FP Complete&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://markkarpov.com/tutorial/exceptions.html&#34;&gt;Exceptions tutorial&lt;/a&gt; | &lt;strong&gt;Mark Karpov&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.tweag.io/blog/2020-04-16-exceptions-in-haskell/&#34;&gt;The three kinds of Haskell exceptions and how to use them&lt;/a&gt; | &lt;strong&gt;Tweag&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Style Guides&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://wiki.haskell.org/Programming_guidelines&#34;&gt;Programming guidelines&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://kowainik.github.io/posts/2019-02-06-style-guide&#34;&gt;Kowainik&#39;s Haskell Style Guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tweag/guides/raw/master/style/Haskell.md&#34;&gt;Tweag.IO&#39;s Haskell Style Guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tibbe/haskell-style-guide/raw/master/haskell-style.md&#34;&gt;Tibbe&#39;s Haskell Style Guide&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Showcase Projects &amp;amp; Code Orgranization Samples&lt;/h1&gt; &#xA;&lt;p&gt;Separate page:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gist.github.com/graninas/49be74a21fbd58236bad28e1ce1eed94&#34;&gt;Software Design Showcase Projects in Haskell&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Haskell in Production. Success Stories, Experience Reports&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.foxhound.systems/blog/why-haskell-for-production/&#34;&gt;Why Haskell is our first choice for building production software systems&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.stephendiehl.com/posts/production.html&#34;&gt;The Joy and Agony of Haskell in Production&lt;/a&gt; | &lt;strong&gt;Stephen Diehl&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://m.youtube.com/watch?v=mlTO510zO78&#34;&gt;Haskell is Not For Production and Other Tales (Talk)&lt;/a&gt; | &lt;strong&gt;Katie Miller&lt;/strong&gt; | Linux.conf.au 2016 | Geelong, Australia&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://m.youtube.com/watch?v=AZQLkkDXy68&#34;&gt;Production Haskell (Talk)&lt;/a&gt; | &lt;strong&gt;Reid Draper&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Haskell in Production | &lt;strong&gt;Felix Mulder&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;http://felixmulder.com/writing/2019/10/05/Haskell-in-Production.html&#34;&gt;Haskell in Production&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;http://felixmulder.com/writing/2019/10/05/Designing-testable-components.html&#34;&gt;Designing Testable Components&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.hasura.io/from-zero-to-hipster-haskell-in-production-97ea99d90c3b/&#34;&gt;Haskell in Production&lt;/a&gt; | Hasura.IO&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/hZgW4mT1PkE&#34;&gt;5 Years of Haskell in Production (Talk)&lt;/a&gt; | &lt;strong&gt;Alexander Thiemann&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.infoq.com/news/2016/08/haskell-production-retrospective/&#34;&gt;Retrospective: Haskell in Production&lt;/a&gt; | &lt;strong&gt;Sergio De Simone&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://medium.com/@djoyner/my-haskell-in-production-story-e48897ed54c&#34;&gt;My “Haskell In Production” Story&lt;/a&gt; | &lt;strong&gt;David Joyner&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://marcosh.github.io/post/2021/06/04/introducing-haskell-in-soisy.html&#34;&gt;Introducing Haskell in Soisy&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Talks&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=-X1vrxQUETM&#34;&gt;Getting things done in Haskell (Talk)&lt;/a&gt; | &lt;strong&gt;Jasper Van der Jeugt&lt;/strong&gt; | HaskellerZ, Feb 2018&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=LEdEOlLlMfM&#34;&gt;Your Second Haskell Web App—A Yesod Workshop with Michael Snoyman&lt;/a&gt; | &lt;strong&gt;Michael Snoyman&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://m.youtube.com/watch?v=US8QG9I1XW0&#34;&gt;Functional architecture - The pits of success&lt;/a&gt; | &lt;strong&gt;Mark Seemann&lt;/strong&gt; | NDC Sidney 2016&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/3GKQ4ni2pS0&#34;&gt;Hierarchical Free Monads and Software Design in Functional Programming (Talk)&lt;/a&gt; | &lt;a href=&#34;https://docs.google.com/presentation/d/1SYMIZ-LOI8Ylykz0PTxwiPuHN_02gIWh9AjJDO6xbvM/edit?usp=sharing&#34;&gt;Slides&lt;/a&gt; | &lt;strong&gt;Alexander Granin&lt;/strong&gt; | FunctionalConf 2019, Bangalore, India&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/u1GGqDQyGfc&#34;&gt;Final Tagless vs Free Monad (Talk, Rus)&lt;/a&gt; | &lt;a href=&#34;https://drive.google.com/open?id=1VhS8ySgk2w5RoN_l_Ar_axcE4Dzf97zLw1uuzUJQbCo&#34;&gt;Slides (Eng)&lt;/a&gt; | &lt;strong&gt;Alexander Granin&lt;/strong&gt; | FPure 2019, Kazan&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://m.youtube.com/watch?v=mlTO510zO78&#34;&gt;Haskell is Not For Production and Other Tales (Talk)&lt;/a&gt; | &lt;strong&gt;Katie Miller&lt;/strong&gt; | Linux.conf.au 2016 | Geelong, Australia&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://m.youtube.com/watch?v=AZQLkkDXy68&#34;&gt;Production Haskell (Talk)&lt;/a&gt; | &lt;strong&gt;Reid Draper&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/hZgW4mT1PkE&#34;&gt;5 Years of Haskell in Production (Talk)&lt;/a&gt; | &lt;strong&gt;Alexander Thiemann&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Haskell Ecosystem and Accessibility&lt;/h1&gt; &#xA;&lt;p&gt;This section is aimed to show that learning and using Haskell is not as horrible as some folks are trying to claim.&lt;/p&gt; &#xA;&lt;h3&gt;Haskell Ecosystem and Community&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Gabriel439/post-rfc/raw/master/sotu.md&#34;&gt;State of the Haskell ecosystem&lt;/a&gt; | &lt;strong&gt;Gabriel Gonzalez&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://taylor.fausak.me/2017/11/15/2017-state-of-haskell-survey-results/&#34;&gt;2017 State of Haskell Survey results&lt;/a&gt; | &lt;strong&gt;Taylor Fausak&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://taylor.fausak.me/2018/11/18/2018-state-of-haskell-survey-results/&#34;&gt;2018 State of Haskell Survey results&lt;/a&gt; | &lt;strong&gt;Taylor Fausak&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://taylor.fausak.me/2019/11/16/haskell-survey-results/&#34;&gt;2019 State of Haskell Survey results&lt;/a&gt; | &lt;strong&gt;Taylor Fausak&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://taylor.fausak.me/2020/11/22/haskell-survey-results/&#34;&gt;2020 State of Haskell Survey results&lt;/a&gt; | &lt;strong&gt;Taylor Fausak&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://patrickmn.com/software/the-haskell-pyramid/&#34;&gt;The Haskell Pyramid&lt;/a&gt; | &lt;strong&gt;Patrick&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.fpcomplete.com/blog/2018-haskell-survey-results&#34;&gt;Haskell Survey Results 2018 (FP Complete)&lt;/a&gt; | FP Complete&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Haskeller Competency Matrix&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gist.github.com/graninas/833a9ff306338aefec7e543100c16ea1&#34;&gt;Haskeller Competency Matrix (separate page)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Haskell Learn: Books&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.manning.com/books/get-programming-with-haskell&#34;&gt;Get Programming with Haskell&lt;/a&gt; | &lt;strong&gt;Will Kurt&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.manning.com/books/haskell-in-depth&#34;&gt;Haskell in Depth&lt;/a&gt; | &lt;strong&gt;Vitaly Bragilevsky&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://dev.stephendiehl.com/hask/&#34;&gt;What I Wish I Knew When Learning Haskell&lt;/a&gt; | &lt;strong&gt;Stephen Diehl&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.haskellfromtheverybeginning.com/&#34;&gt;Haskell from the Very Beginning&lt;/a&gt; | &lt;strong&gt;John Whitington&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://learnyouahaskell.com/&#34;&gt;Learn You a Haskell for Great Good!&lt;/a&gt; | &lt;strong&gt;Miran Lipovača&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.cs.nott.ac.uk/~pszgmh/pih.html&#34;&gt;Programming in Haskell&lt;/a&gt; | &lt;strong&gt;Graham Hutton&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.yesodweb.com/book&#34;&gt;Haskell And Yesod&lt;/a&gt; | &lt;strong&gt;Michael Snoyman&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://leanpub.com/simple-haskell-book&#34;&gt;The Simple Haskell Handbook&lt;/a&gt; | &lt;strong&gt;Marco Sampellegrini&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://leanpub.com/production-haskell&#34;&gt;Production Haskell&lt;/a&gt; | &lt;strong&gt;Matt Parsons&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.apress.com/gp/book/9781430262510&#34;&gt;Beginning Haskell: A Project-Based Approach&lt;/a&gt; | &lt;strong&gt;Serrano, Alejandro&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.apress.com/gp/book/9781484244791&#34;&gt;Practical Haskell. A Real World Guide to Programming&lt;/a&gt; | &lt;strong&gt;Serrano, Alejandro&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://shop.oreilly.com/product/0636920026365.do&#34;&gt;Parallel and Concurrent Programming in Haskell: Techniques for Multicore and Multithreaded Programming&lt;/a&gt; | &lt;strong&gt;Simon Marlow&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://book.realworldhaskell.org/&#34;&gt;Real World Haskell&lt;/a&gt; | &lt;strong&gt;Bryan O&#39;Sullivan, Don Stewart, John Goerzen&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.oreilly.com/library/view/haskell-design-patterns/9781783988723/&#34;&gt;Haskell Design Patterns&lt;/a&gt; | &lt;strong&gt;Ryan Lemmer&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.manning.com/books/functional-design-and-architecture&#34;&gt;Functional Design and Architecture (Second Edition)&lt;/a&gt; | &lt;strong&gt;Alexander Granin&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://thinkingwithtypes.com/&#34;&gt;Thinking with Types. Type-Level Programming in Haskell&lt;/a&gt; | &lt;strong&gt;Sandy Maguire&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://leanpub.com/algebra-driven-design&#34;&gt;Algebra-Driven-Design&lt;/a&gt; | &lt;strong&gt;Sandy Maguire&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://haskellbook.com/&#34;&gt;Haskell Programming from First Principles (aka Haskell Book)&lt;/a&gt; | &lt;strong&gt;Chistopher Allen, Julie Moronuki&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://leanpub.com/optics-by-example&#34;&gt;Optics by example&lt;/a&gt; | &lt;strong&gt;Chris Penner&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://atypeofprogramming.com/&#34;&gt;A type of programming&lt;/a&gt; | &lt;strong&gt;Renzo Carbonara&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.amazon.com/Haskell-School-Music-Signals-Symphonies/dp/1108416756&#34;&gt;The Haskell School of Music: From Signals to Symphonies&lt;/a&gt; | &lt;strong&gt;Paul Hudak, Donya Quick&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.amazon.com/Algorithm-Design-Haskell-Richard-Bird/dp/1108491618&#34;&gt;Algorithm Design with Haskell&lt;/a&gt; | &lt;strong&gt;Richard Bird, Jeremy Gibbons&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.amazon.com/Thinking-Functionally-Haskell-Richard-Bird/dp&#34;&gt;Thinking Functionally with Haskell&lt;/a&gt; | &lt;strong&gt;Richard Bird&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.amazon.com/Haskell-Functional-Programming-International-Computer/dp/0201882957&#34;&gt;Haskell: The Craft of Functional Programming&lt;/a&gt; | &lt;strong&gt;Simon Thompson&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.amazon.com/Practical-Web-Development-Haskell-Applications-ebook/dp/B07FP523HS&#34;&gt;Practical Web Development with Haskell&lt;/a&gt; | &lt;strong&gt;Ecky Putrady&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.packtpub.com/product/haskell-data-analysis-cookbook/9781783286331&#34;&gt;Haskell Data Analysis Cookbook&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Misc&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://kowainik.github.io/posts/haddock-tips#top-level&#34;&gt;HASKELL DOCUMENTATION WITH HADDOCK: WISHES&#39;N&#39;TIPS&lt;/a&gt; | &lt;strong&gt;Veronika Romashkina&lt;/strong&gt;, &lt;strong&gt;Dmitrii Kovanikov&lt;/strong&gt; (Kowainik)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gist.github.com/graninas/ef5dd5a2b57903af81039fb21ff3b0bf&#34;&gt;Appendix to Software Design in Haskell&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://gist.github.com/graninas/ef5dd5a2b57903af81039fb21ff3b0bf#Testing&#34;&gt;Testing&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://gist.github.com/graninas/ef5dd5a2b57903af81039fb21ff3b0bf#Final-tagless&#34;&gt;Final Tagless&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://gist.github.com/graninas/ef5dd5a2b57903af81039fb21ff3b0bf#Records&#34;&gt;Records&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://gist.github.com/graninas/ef5dd5a2b57903af81039fb21ff3b0bf#Exceptions-and-Error-Handling&#34;&gt;Exceptions and Error Handling&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://gist.github.com/graninas/ef5dd5a2b57903af81039fb21ff3b0bf#Build-Tools&#34;&gt;Build Tools&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>upenn-cis5520/05-quickcheck</title>
    <updated>2022-10-03T01:37:22Z</updated>
    <id>tag:github.com,2022-10-03:/upenn-cis5520/05-quickcheck</id>
    <link href="https://github.com/upenn-cis5520/05-quickcheck" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>tweag/capability</title>
    <updated>2022-10-03T01:37:22Z</updated>
    <id>tag:github.com,2022-10-03:/tweag/capability</id>
    <link href="https://github.com/tweag/capability" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Extensional capabilities and deriving combinators&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;capability: effects, extensionally&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://buildkite.com/tweag-1/capability&#34;&gt;&lt;img src=&#34;https://badge.buildkite.com/a44574059e13fc443caa437226af5ae5e67b6a5ae012534712.svg?branch=master&#34; alt=&#34;Build status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A capability is a type class that says explicitly which effects a function is allowed to use. The &lt;a href=&#34;http://hackage.haskell.org/package/mtl&#34;&gt;&lt;code&gt;mtl&lt;/code&gt;&lt;/a&gt; works like this too. But unlike the &lt;code&gt;mtl&lt;/code&gt;, this library decouples effects from their implementation. What this means in practice:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You can implement large sets of capabilities using the efficient &lt;a href=&#34;https://www.fpcomplete.com/blog/2017/06/readert-design-pattern&#34;&gt;&lt;code&gt;ReaderT&lt;/code&gt; pattern&lt;/a&gt;, rather than a slow monad transformer stack.&lt;/li&gt; &#xA; &lt;li&gt;Capabilities compose well: e.g. it&#39;s easy to have multiple reader effects.&lt;/li&gt; &#xA; &lt;li&gt;You can use a writer effect without implementing it as a writer monad (which is known to &lt;a href=&#34;https://blog.infinitenegativeutility.com/2016/7/writer-monads-and-space-leaks&#34;&gt;leak space&lt;/a&gt;).&lt;/li&gt; &#xA; &lt;li&gt;You can reason about effects. For instance, if a monad provides a reader effect at type &lt;code&gt;IORef A&lt;/code&gt;, it also provides a state effect at type &lt;code&gt;A&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For more on these, you may want to read the announcement &lt;a href=&#34;https://www.tweag.io/posts/2018-10-04-capability.html&#34;&gt;blog post&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This library is an alternative to the &lt;a href=&#34;http://hackage.haskell.org/package/mtl&#34;&gt;&lt;code&gt;mtl&lt;/code&gt;&lt;/a&gt;. It defines a set of standard, reusable capability type classes, such as the &lt;code&gt;HasReader&lt;/code&gt; and &lt;code&gt;HasState&lt;/code&gt; type classes, which provide the standard reader and state effects, respectively.&lt;/p&gt; &#xA;&lt;p&gt;Where &lt;code&gt;mtl&lt;/code&gt; instances only need to be defined once and for all, capability-style programming has traditionally suffered from verbose boilerplate: rote instance definitions for every new implementation of the capability. Fortunately GHC 8.6 introduced the &lt;a href=&#34;https://downloads.haskell.org/~ghc/8.6.1/docs/html/users_guide/glasgow_exts.html#deriving-via&#34;&gt;&lt;code&gt;DerivingVia&lt;/code&gt;&lt;/a&gt; language extension. We use it to remove the boilerplate, turning capability-style programming into an appealing alternative to &lt;code&gt;mtl&lt;/code&gt;-style programming. The &lt;a href=&#34;https://hackage.haskell.org/package/generic-lens&#34;&gt;&lt;code&gt;generic-lens&lt;/code&gt;&lt;/a&gt; library is used to access fields of structure in the style of the &lt;a href=&#34;https://www.fpcomplete.com/blog/2017/06/readert-design-pattern&#34;&gt;&lt;code&gt;ReaderT&lt;/code&gt; pattern&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;An additional benefit of separating capabilities from their implementation is that they avoid a pitfall of the &lt;code&gt;mtl&lt;/code&gt;. In the &lt;code&gt;mtl&lt;/code&gt;, two different &lt;code&gt;MonadState&lt;/code&gt; are disambiguated by their types, which means that it is difficult to have two &lt;code&gt;MonadState Int&lt;/code&gt; in the same monad stack. Capability type classes are parameterized by a name (also known as a &lt;em&gt;tag&lt;/em&gt;). This makes it possible to combine multiple versions of the same capability. For example,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;twoStates :: (HasState &#34;a&#34; Int m, HasState &#34;b&#34; Int m) =&amp;gt; m ()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here, the tags &lt;code&gt;&#34;a&#34;&lt;/code&gt; and &lt;code&gt;&#34;b&#34;&lt;/code&gt; refer to different state spaces.&lt;/p&gt; &#xA;&lt;p&gt;In summary, compared to the &lt;code&gt;mtl&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;capabilities represent what effects a function can use, rather than how the monad is constructed;&lt;/li&gt; &#xA; &lt;li&gt;capabilities are named, rather than disambiguated by type;&lt;/li&gt; &#xA; &lt;li&gt;capabilites are discharged with deriving-via combinators and &lt;a href=&#34;https://hackage.haskell.org/package/generic-lens&#34;&gt;&lt;code&gt;generic-lens&lt;/code&gt;&lt;/a&gt;, rather than with instance resolution.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;An example usage looks like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;testParity :: (HasReader &#34;foo&#34; Int m, HasState &#34;bar&#34; Bool m) =&amp;gt; m ()&#xA;testParity = do&#xA;  num &amp;lt;- ask @&#34;foo&#34;&#xA;  put @&#34;bar&#34; (even num)&#xA;&#xA;data Ctx = Ctx { foo :: Int, bar :: IORef Bool }&#xA;  deriving Generic&#xA;&#xA;newtype M a = M { runM :: Ctx -&amp;gt; IO a }&#xA;  deriving (Functor, Applicative, Monad) via ReaderT Ctx IO&#xA;  -- Use DerivingVia to derive a HasReader instance.&#xA;  deriving (HasReader &#34;foo&#34; Int, HasSource &#34;foo&#34; Int) via&#xA;    -- Pick the field foo from the Ctx record in the ReaderT environment.&#xA;    Field &#34;foo&#34; &#34;ctx&#34; (MonadReader (ReaderT Ctx IO))&#xA;  -- Use DerivingVia to derive a HasState instance.&#xA;  deriving (HasState &#34;bar&#34; Bool, HasSource &#34;bar&#34; Bool, HasSink &#34;bar&#34; Bool) via&#xA;    -- Convert a reader of IORef to a state capability.&#xA;    ReaderIORef (Field &#34;bar&#34; &#34;ctx&#34; (MonadReader (ReaderT Ctx IO)))&#xA;&#xA;example :: IO ()&#xA;example = do&#xA;    rEven &amp;lt;- newIORef False&#xA;    runM testParity (Ctx 2 rEven)&#xA;    readIORef rEven &amp;gt;&amp;gt;= print&#xA;    runM testParity (Ctx 3 rEven)&#xA;    readIORef rEven &amp;gt;&amp;gt;= print&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more complex examples, see the &lt;a href=&#34;https://raw.githubusercontent.com/tweag/capability/master/#examples&#34;&gt;Examples section&lt;/a&gt; and the &lt;a href=&#34;https://raw.githubusercontent.com/tweag/capability/master/examples&#34;&gt;&lt;code&gt;examples&lt;/code&gt; subtree&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;API documentation can be found on &lt;a href=&#34;http://hackage.haskell.org/package/capability&#34;&gt;Hackage&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;p&gt;An example is provided in &lt;a href=&#34;https://raw.githubusercontent.com/tweag/capability/master/examples/WordCount.hs&#34;&gt;&lt;code&gt;WordCount&lt;/code&gt;&lt;/a&gt;. Execute the following commands to try it out:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ nix-shell --pure --run &#34;cabal configure --enable-tests&#34;&#xA;$ nix-shell --pure --run &#34;cabal repl examples&#34;&#xA;&#xA;ghci&amp;gt; :set -XOverloadedStrings&#xA;ghci&amp;gt; wordAndLetterCount &#34;ab ba&#34;&#xA;Letters&#xA;&#39;a&#39;: 2&#xA;&#39;b&#39;: 2&#xA;Words&#xA;&#34;ab&#34;: 1&#xA;&#34;ba&#34;: 1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To execute all examples and see if they produce the expected results run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ nix-shell --pure --run &#34;cabal test examples --show-details=streaming --test-option=--color&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Build instructions&lt;/h2&gt; &#xA;&lt;h3&gt;Nix Shell&lt;/h3&gt; &#xA;&lt;p&gt;A development environment with all dependencies in scope is defined in &lt;a href=&#34;https://raw.githubusercontent.com/tweag/capability/master/shell.nix&#34;&gt;&lt;code&gt;shell.nix&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Build&lt;/h3&gt; &#xA;&lt;p&gt;The build instructions assume that you have &lt;a href=&#34;https://nixos.org/nix/&#34;&gt;Nix&lt;/a&gt; installed. Execute the following command to build the library.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ nix-shell --pure --run &#34;cabal configure&#34;&#xA;$ nix-shell --pure --run &#34;cabal build&#34;&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>