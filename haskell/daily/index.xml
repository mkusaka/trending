<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Haskell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-12T01:42:10Z</updated>
  <subtitle>Daily Trending of Haskell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>chshersh/iris</title>
    <updated>2022-08-12T01:42:10Z</updated>
    <id>tag:github.com,2022-08-12:/chshersh/iris</id>
    <link href="https://github.com/chshersh/iris" rel="alternate"></link>
    <summary type="html">&lt;p&gt;üåà Haskell CLI Framework supporting Command Line Interface Guidelines&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;iris&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/chshersh/iris/actions&#34;&gt;&lt;img src=&#34;https://github.com/chshersh/iris/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;GitHub CI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hackage.haskell.org/package/iris&#34;&gt;&lt;img src=&#34;https://img.shields.io/hackage/v/iris.svg?logo=haskell&#34; alt=&#34;Hackage&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/chshersh/iris/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-MPL--2.0-blue.svg?sanitize=true&#34; alt=&#34;MPL-2.0 license&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Iris&lt;/strong&gt; is a Haskell framework for building CLI applications that follow &lt;a href=&#34;https://clig.dev/&#34;&gt;Command Line Interface Guidelines&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;üåà Iris (/Ààa…™r…™s/) is a Greek goddess associated with communication, messages, the rainbow, and new endeavors.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;picture&gt; &#xA; &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;https://raw.githubusercontent.com/chshersh/iris/main/images/iris-dark.png&#34;&gt; &#xA; &lt;source media=&#34;(prefers-color-scheme: light)&#34; srcset=&#34;https://raw.githubusercontent.com/chshersh/iris/main/images/iris-light.png&#34;&gt; &#xA; &lt;img alt=&#34;Iris changing her workflow and hair colour depending on the time of day.&#34; src=&#34;https://raw.githubusercontent.com/chshersh/iris/main/images/iris-dark-always.png&#34;&gt; &#xA;&lt;/picture&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;‚ÑπÔ∏è &lt;strong&gt;DISCLAIMER #1:&lt;/strong&gt; Currently, Iris is in experimental phase and mostly for early adopters. It may lack documentation or have significant breaking changes. We appreciate anyone&#39;s help in improving the documentation! At the same time, the maintainers will strive to provide helpful migration guides.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;‚ÑπÔ∏è &lt;strong&gt;DISCLAIMER #2:&lt;/strong&gt; Iris is developed and maintained in free time by volunteers. The development may continue for decades or may stop tomorrow. You can use &lt;a href=&#34;https://github.com/sponsors/chshersh&#34;&gt;GitHub Sponsorship&lt;/a&gt; to support the development of this project.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Goals&lt;/h2&gt; &#xA;&lt;p&gt;Iris development is guided by the following principles:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Support &lt;a href=&#34;https://clig.dev/&#34;&gt;Command Line Interface Guidelines&lt;/a&gt;.&lt;/strong&gt; Features or changes that violate these guidelines are not accepted in the project.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Beginner-friendliess.&lt;/strong&gt; Haskell beginners should be able to build CLI applications with Iris. Hence, the implementation of Iris API that uses less fancy Haskell features are preferred. When the complexity is justified, the cost of introducing this extra complexity should be mitigated by having better documentation.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Reasonable batteries-included.&lt;/strong&gt; Iris is not trying to be minimalistic as possible, it strives to provide out-of-the-box solutions for most common problems. But at the same time, we don&#39;t want to impose unnecessary heavy dependencies.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Excellent documentation.&lt;/strong&gt; Iris documentation should be as helpful as possible in using the framework.&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; Currently, Iris may lack documentation but there&#39;s an ongoing effort to improve the situation.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;üß± Iris focuses solely on CLI applications. If you&#39;re interested in building TUI app with Haskell, check out &lt;a href=&#34;https://hackage.haskell.org/package/brick&#34;&gt;brick&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;p&gt;CLI apps built with Iris offer the following features for end users:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Automatic detection of colouring support in the terminal&lt;/li&gt; &#xA; &lt;li&gt;Ability to check required external tools if you need e.g. &lt;code&gt;curl&lt;/code&gt; or &lt;code&gt;git&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Support for standard CLI options out-of-the-box: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;--help&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;--version&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;--numeric-version&lt;/code&gt;: helpful for detecting required tools versions&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;--no-input&lt;/code&gt;: for disabling all interactive features&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Utilities to open files in a browser&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How to use?&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;iris&lt;/code&gt; is compatible with the following GHC versions - &lt;a href=&#34;https://matrix.hackage.haskell.org/#/package/iris&#34;&gt;supported versions&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;In order to start using &lt;code&gt;iris&lt;/code&gt; in your project, you will need to set it up with these steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Add the dependency on &lt;code&gt;iris&lt;/code&gt; in your project&#39;s &lt;code&gt;.cabal&lt;/code&gt; file. For this, you should modify the &lt;code&gt;build-depends&lt;/code&gt; section according to the below section:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;build-depends:&#xA;  , base ^&amp;gt;= LATEST_SUPPORTED_BASE&#xA;  , iris ^&amp;gt;= LATEST_VERSION&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To use this package, refer to the below example.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;{-# LANGUAGE GeneralizedNewtypeDeriving #-}&#xA;&#xA;module Main (main) where&#xA;&#xA;import Control.Monad.IO.Class (MonadIO (..))&#xA;&#xA;import qualified Iris&#xA;&#xA;&#xA;newtype App a = App&#xA;    { unApp :: Iris.CliApp () () a&#xA;    } deriving newtype&#xA;        ( Functor&#xA;        , Applicative&#xA;        , Monad&#xA;        , MonadIO&#xA;        )&#xA;&#xA;appSettings :: Iris.CliEnvSettings () ()&#xA;appSettings = Iris.defaultCliEnvSettings&#xA;    { Iris.cliEnvSettingsHeaderDesc = &#34;Iris usage example&#34;&#xA;    , Iris.cliEnvSettingsProgDesc = &#34;A simple &#39;Hello, world!&#39; utility&#34;&#xA;    }&#xA;&#xA;app :: App ()&#xA;app = liftIO $ putStrLn &#34;Hello, world!&#34;&#xA;&#xA;main :: IO ()&#xA;main = Iris.runCliApp appSettings $ unApp app&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;For contributors&lt;/h2&gt; &#xA;&lt;p&gt;Check &lt;a href=&#34;https://github.com/chshersh/iris/raw/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; for contributing guidelines.&lt;/p&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;p&gt;To build the project and run the tests locally, you can use either &lt;code&gt;cabal&lt;/code&gt; or &lt;code&gt;stack&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/chshersh/iris/main/#first-time&#34;&gt;First time&lt;/a&gt; section if you don&#39;t have Haskell development environment locally.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Cabal&lt;/h3&gt; &#xA;&lt;p&gt;Build the project:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cabal build all&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run all unit tests:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cabal test --enable-tests --test-show-details=direct&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Stack&lt;/h3&gt; &#xA;&lt;p&gt;Build the project:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;stack build --test --no-run-tests&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run all unit tests:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;stack test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;First time&lt;/h3&gt; &#xA;&lt;p&gt;If this is your first time dealing with Haskell tooling, we recommend using &lt;a href=&#34;https://www.haskell.org/ghcup/&#34;&gt;GHCup&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;During the installation, GHCup will suggest you installing all the necessary tools. If you have GHCup installed but miss some of the tooling for some reason, type the following commands in the terminal:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;ghcup install ghc 8.10.7&#xA;ghcup set     ghc 8.10.7&#xA;ghcup install cabal 3.6.2.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;If you are using Linux or macOS, you may find &lt;code&gt;ghcup tui&lt;/code&gt; command a more attractive option.&lt;/p&gt; &#xA;&lt;/blockquote&gt;</summary>
  </entry>
  <entry>
    <title>ilya-biryukov/L-int</title>
    <updated>2022-08-12T01:42:10Z</updated>
    <id>tag:github.com,2022-08-12:/ilya-biryukov/L-int</id>
    <link href="https://github.com/ilya-biryukov/L-int" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Simple language interpreter and mix&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
</feed>