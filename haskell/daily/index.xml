<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Haskell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-07-04T01:31:15Z</updated>
  <subtitle>Daily Trending of Haskell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>conal/lambda-ccc</title>
    <updated>2024-07-04T01:31:15Z</updated>
    <id>tag:github.com,2024-07-04:/conal/lambda-ccc</id>
    <link href="https://github.com/conal/lambda-ccc" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Convert lambda expressions to CCC combinators&lt;/p&gt;&lt;hr&gt;&lt;p&gt;Convert lambda expressions to CCC combinators and then to circuits.&lt;/p&gt; &#xA;&lt;p&gt;Additional info:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/conal/lambda-ccc/master/doc/notes.md&#34;&gt;Project notes&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;The talk &lt;a href=&#34;https://github.com/conal/talk-2015-haskell-to-hardware&#34;&gt;From Haskell to Hardware via CCCs&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Instructions in test/Tests.hs.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Dependencies:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;GHC 7.8.2 or better&lt;/li&gt; &#xA; &lt;li&gt;KURE, &lt;a href=&#34;https://github.com/ku-fpg/kure/commit/7ce26aa&#34;&gt;commit 7ce26aa&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;HERMIT, &lt;a href=&#34;https://github.com/ku-fpg/hermit/commit/5557609&#34;&gt;commit 5557609&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://github.com/conal/hermit-extras&#34;&gt;hermit-extras&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/conal/circat&#34;&gt;circat&lt;/a&gt;, for circuit specification, display, and conversion to netlists.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To use these versions of KURE and HERMIT, clone the repos (or pull if already cloned), and use &#34;git checkout [commit-id]&#34;.&lt;/p&gt; &#xA;&lt;p&gt;To try out:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;cabal install&lt;/code&gt; circat and lambda-ccc (in that order)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;In a shell, &lt;code&gt;cd&lt;/code&gt; to lambda-ccc/test, and type &lt;code&gt;make&lt;/code&gt;. If all works, you&#39;ll see something like the following output:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;bash-3.2$ ./test&#xA;[starting HERMIT v0.5.0.1 on TreeTest.hs]&#xA;% ghc TreeTest.hs -fforce-recomp -O2 -dcore-lint -fsimple-list-literals -fexpose-all-unfoldings -fplugin=LambdaCCC.Monomorphize -fplugin-opt=LambdaCCC.Monomorphize:-v0 -fplugin-opt=LambdaCCC.Monomorphize:DoTree.hss -fplugin-opt=LambdaCCC.Monomorphize:resume -fplugin-opt=LambdaCCC.Monomorphize:*: -v0&#xA;&#xA;real&#x9;0m6.098s&#xA;user&#x9;0m5.968s&#xA;sys&#x9;0m0.245s&#xA;let f = \ ds -&amp;gt; abst (repr ds) in let f0 = \ ds -&amp;gt; let (a1,a&#39;1) = repr (repr ds) in abst (repr (f a1) + repr (f a&#39;1)) in let f1 = \ ds -&amp;gt; let (a1,a&#39;1) = repr (repr ds) in abst (repr (f0 a1) + repr (f0 a&#39;1)) in let f2 = \ eta -&amp;gt; let a = repr eta in abst (a * a) in let f3 = \ eta -&amp;gt; abst (let (a1,a&#39;1) = repr (repr eta) in abst (f2 a1,f2 a&#39;1)) in let f4 = \ eta -&amp;gt; abst (let (a1,a&#39;1) = repr (repr eta) in abst (f3 a1,f3 a&#39;1)) in \ x -&amp;gt; let (a1,a&#39;1) = repr (let (a1,a&#39;1) = repr (repr x) in abst (f4 a1,f4 a&#39;1)) in repr (f1 a1) + repr (f1 a&#39;1)&#xA;Wrote out/sumSquare-t3.pdf&#xA;Wrote out/sumSquare-t3.v.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The &lt;code&gt;.v.txt&lt;/code&gt; file is Verilog code. Additionally the PDF will be displayed if the display code figures out how to on your system.&lt;/p&gt; &#xA;&lt;p&gt;There are many other examples in &lt;code&gt;test/TreeTest.hs&lt;/code&gt;. At any time, all examples but one are commented out.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>IntersectMBO/cardano-transactions</title>
    <updated>2024-07-04T01:31:15Z</updated>
    <id>tag:github.com,2024-07-04:/IntersectMBO/cardano-transactions</id>
    <link href="https://github.com/IntersectMBO/cardano-transactions" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Library utilities for constructing and signing Cardano transactions.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;big&gt;&lt;strong&gt;Cardano Transactions&lt;/strong&gt;&lt;/big&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://hackage.haskell.org/package/cardano-transactions&#34;&gt;&lt;img src=&#34;https://img.shields.io/hackage/v/cardano-transactions?style=for-the-badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/input-output-hk/cardano-transactions/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/input-output-hk/cardano-transactions?color=%239b59b6&amp;amp;label=RELEASE&amp;amp;sort=semver&amp;amp;style=for-the-badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/input-output-hk/cardano-transactions/actions?query=workflow%3ATest&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/workflow/status/input-output-hk/cardano-transactions/Test?style=for-the-badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://input-output-hk.github.io/cardano-transactions/coverage/hpc_index.html&#34;&gt;&lt;img src=&#34;https://input-output-hk.github.io/cardano-transactions/coverage/badge.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;This library provides a simple interface for building transactions on Cardano. It also provides a small command-line interface for playing around in a terminal.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Building from source&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;download &lt;a href=&#34;https://docs.haskellstack.org/en/stable/install_and_upgrade/&#34;&gt;haskell stack&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;clone this repo: &lt;code&gt;git clone https://github.com/input-output-hk/cardano-transactions.git&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;cd into the project: &lt;code&gt;cd cardano-transactions&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;install: &lt;code&gt;stack install&lt;/code&gt; (the binary will be in &lt;code&gt;~/.local/bin/cardano-tx&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Download binaries&lt;/h3&gt; &#xA;&lt;p&gt;Check the &lt;a href=&#34;https://github.com/input-output-hk/cardano-transactions/releases&#34;&gt;release page&lt;/a&gt; for binaries.&lt;/p&gt; &#xA;&lt;h3&gt;Docker container&lt;/h3&gt; &#xA;&lt;p&gt;Run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# build (run inside the project dir)&#xA;docker build -t inputoutput/cardano-transactions .&#xA;&#xA;# simple run&#xA;docker run --rm inputoutput/cardano-transactions --help&#xA;&#xA;# interactive shell (to pipe commands)&#xA;docker run --rm -ti --entrypoint sh inputoutput/cardano-transactions&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The docker image is &lt;code&gt;alpine&lt;/code&gt;, so tools can be installed as follows in an interactive shell:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;apk add --no-cache nano git curl&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Payment&lt;/h2&gt; &#xA;&lt;p&gt;We call &lt;em&gt;Payment&lt;/em&gt; a simple UTxO transactions with no metadata, moving funds from a set of inputs to a set of outputs.&lt;/p&gt; &#xA;&lt;p&gt;Payments are constructed from a small set of primitives, following the given state-machine:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://mermaid.ink/img/eyJjb2RlIjoic3RhdGVEaWFncmFtXG5cdFsqXSAtLT4gQ29pblNlbGVjdGlvbjogZW1wdHlcbiAgICBDb2luU2VsZWN0aW9uIC0tPiBDb2luU2VsZWN0aW9uOiBhZGRJbnB1dFxuICAgIENvaW5TZWxlY3Rpb24gLS0-IENvaW5TZWxlY3Rpb246IGFkZE91dHB1dFxuICAgIENvaW5TZWxlY3Rpb24gLS0-IFRyYW5zYWN0aW9uOiBsb2NrXG4gICAgVHJhbnNhY3Rpb24gLS0-IFRyYW5zYWN0aW9uOiBzaWduV2l0aFxuICAgIFRyYW5zYWN0aW9uIC0tPiBbKl06IHNlcmlhbGl6ZSIsIm1lcm1haWQiOnsidGhlbWUiOiJkZWZhdWx0In0sInVwZGF0ZUVkaXRvciI6ZmFsc2V9&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Example (Haskell)&lt;/h3&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Imports&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-hs&#34;&gt;{-# LANGUAGE NumericUnderscores #-}&#xA;{-# LANGUAGE OverloadedStrings #-}&#xA;&#xA;import Data.Function&#xA;    ( (&amp;amp;) )&#xA;import Data.Maybe&#xA;    ( fromMaybe )&#xA;import Data.UTxO.Transaction.Cardano.Byron&#xA;    ( fromBase16&#xA;    , fromBase58&#xA;    , mkInput&#xA;    , mkOutput&#xA;    , mkSignKey&#xA;    , testnetMagic&#xA;    )&#xA;&#xA;import qualified Data.ByteString as BS&#xA;import qualified Data.UTxO.Transaction as Tx&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Constructing Inputs / Outputs&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-hs&#34;&gt;-- Say we want to construct a transaction from a known input to two&#xA;-- different addresses. Let&#39;s start by constructing the primitive types&#xA;-- for /Byron/ by using the smart-constructors from:&#xA;--&#xA;--   &#39;Data.UTxO.Transaction.Cardano.Byron&#39;&#xA;&#xA;let (Just input0) = mkInput 0 =&amp;lt;&amp;lt; fromBase16&#xA;      &#34;3b40265111d8bb3c3c608d95b3a0bf83461ace32d79336579a1939b3aad1c0b7&#34;&#xA;&#xA;let Just key0 = mkSignKey =&amp;lt;&amp;lt; fromBase16&#xA;      &#34;e0860dab46f13e74ab834142e8877b80bf22044cae8ebab7a21ed1b8dc00c155\&#xA;      \f6b78eee2a5bbd453ce7e7711b2964abb6a36837e475271f18ff36ae5fc8af73\&#xA;      \e25db39fb78e74d4b53fb51776d0f5eb360e62d09b853f3a87ac25bf834ee1fb&#34;&#xA;&#xA;let oneAda = 1_000_000&#xA;&#xA;let (Just output0) = mkOutput oneAda =&amp;lt;&amp;lt; fromBase58&#xA;      &#34;2cWKMJemoBajc46Wu4Z7e6bG48myZWfB7Z6pD77L6PrJQWt9HZ3Yv7o8CYZTBMqHTPTkv&#34;&#xA;&#xA;let (Just output1) = mkOutput oneAda =&amp;lt;&amp;lt; fromBase58&#xA;      &#34;2cWKMJemoBaiLiNB8QpHKjkQhnPdQSyxaLb8JJFUQYpiVzgEJE59fN7V7StqnyDuDjHYJ&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Constructing The Transaction&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-hs&#34;&gt;-- Next, we can construct the transaction using the DSL provided by:&#xA;--&#xA;--   &#39;Data.UTxO.Transaction#MkPayment&#39;&#xA;&#xA;let eitherTx = Tx.empty testnetMagic&#xA;      &amp;amp; Tx.addInput input0&#xA;      &amp;amp; Tx.addOutput output0&#xA;      &amp;amp; Tx.addOutput output1&#xA;      &amp;amp; Tx.lock&#xA;      &amp;amp; Tx.signWith key0&#xA;      &amp;amp; Tx.serialize&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Writing Binary Transaction to a File&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-hs&#34;&gt;-- Finally, let&#39;s export the binary transaction to a file, if we didn&#39;t screw&#xA;-- up the in the above example ^^&#34;&#xA;&#xA;case eitherTx of&#xA;  Left e -&amp;gt;&#xA;    fail $ show e&#xA;  Right bytes -&amp;gt;&#xA;    BS.writeFile &#34;transaction.bin&#34; bytes&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Example (CLI)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cardano-tx empty 764824073 \&#xA;  | cardano-tx add-input 0 3b40265111d8bb3c3c608d95b3a0bf83461ace32d79336579a1939b3aad1c0b7 \&#xA;  | cardano-tx add-output 42 Ae2tdPwUPEZETXfbQxKMkMJQY1MoHCBS7bkw6TmhLjRvi9LZh1uDnXy319f \&#xA;  | cardano-tx lock \&#xA;  | cardano-tx sign-with e0860dab46f13e74ab834142e8877b80bf22044cae8ebab7a21ed1b8dc00c155f6b78eee2a5bbd453ce7e7711b2964abb6a36837e475271f18ff36ae5fc8af73e25db39fb78e74d4b53fb51776d0f5eb360e62d09b853f3a87ac25bf834ee1fb \&#xA;  | cardano-tx serialize&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;About Library Dependencies&lt;/h2&gt; &#xA;&lt;p&gt;This library requires quite a few exotic dependencies from the cardano realm which aren&#39;t necessarily on hackage nor stackage. The dependencies are listed in &lt;a href=&#34;https://github.com/input-output-hk/cardano-transactions/raw/master/stack.yaml#L7-L33&#34;&gt;stack.yaml&lt;/a&gt;, make sure to also include those for importing &lt;code&gt;cardano-transactions&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;API documentation is available &lt;a href=&#34;https://input-output-hk.github.io/cardano-transactions/haddock&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/input-output-hk/cardano-transactions/wiki/How-to-submit-transaction-via-cardano-tx-CLI&#34;&gt;End-to-end example&lt;/a&gt; of constructing transaction via &lt;code&gt;cardano-tx&lt;/code&gt; and then submitting it.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Pull requests are welcome.&lt;/p&gt; &#xA;&lt;p&gt;When creating a pull request, please make sure that your code adheres to our &lt;a href=&#34;https://github.com/input-output-hk/adrestia/wiki/Coding-Standards&#34;&gt;coding standards&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/input-output-hk/cardano-transactions/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/input-output-hk/cardano-transactions.svg?style=for-the-badge&#34;&gt;&lt;/a&gt; &lt;/p&gt;</summary>
  </entry>
</feed>