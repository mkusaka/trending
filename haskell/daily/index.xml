<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Haskell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-10-25T01:31:33Z</updated>
  <subtitle>Daily Trending of Haskell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>NixOS/nixfmt</title>
    <updated>2024-10-25T01:31:33Z</updated>
    <id>tag:github.com,2024-10-25:/NixOS/nixfmt</id>
    <link href="https://github.com/NixOS/nixfmt" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The official (but not yet stable) formatter for Nix code&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;code&gt;nixfmt&lt;/code&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;nixfmt&lt;/code&gt; is a formatter for Nix code, intended to easily apply a uniform style.&lt;/p&gt; &#xA;&lt;p&gt;You are encouraged to test this out on your code and submit any undesirable formatting you find as an issue&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/NixOS/nixfmt/actions/workflows/main.yml/badge.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;State&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;nixfmt&lt;/code&gt; will form the basis for the initial official standard Nix formatter, as established by &lt;a href=&#34;https://github.com/NixOS/rfcs/pull/166&#34;&gt;RFC 166&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The established standard Nix formatting differs considerably from the original one. Be aware of this if you track the main branch. Until the first new release the main branch should be considered &lt;strong&gt;very unstable&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For more details, see the &lt;a href=&#34;https://github.com/NixOS/nixfmt/issues/153&#34;&gt;RFC implementation tracking issue&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation And Usage Instructions&lt;/h2&gt; &#xA;&lt;h3&gt;nixpkgs/NixOS&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;nixfmt&lt;/code&gt; was used as the basis for the official Nix formatter with a standardized formatting. The new formatting differs considerably from the original one. A recent nixfmt version is available as &lt;code&gt;pkgs.nixfmt-rfc-style&lt;/code&gt; in Nixpkgs. The formatting of this version differs considerably from the original nixfmt that was used as the basis for the standardised official formatter, which is also still available as &lt;code&gt;pkgs.nixfmt-classic&lt;/code&gt; for now, though unmaintained.&lt;/p&gt; &#xA;&lt;p&gt;So installing this &lt;code&gt;nixfmt&lt;/code&gt; is as simple as adding to the system packages:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nix&#34;&gt;{ pkgs, ... }:&#xA;&#xA;{&#xA;  environment.systemPackages = [ pkgs.nixfmt-rfc-style ];&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;From the repository&lt;/h3&gt; &#xA;&lt;p&gt;It&#39;s also possible to install &lt;code&gt;nixfmt&lt;/code&gt; directly from the repository using &lt;code&gt;nix-env&lt;/code&gt;. Also, updates are not done automatically (as it would with the system packages).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ nix-env -f https://github.com/NixOS/nixfmt/archive/master.tar.gz -i&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;nix fmt&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://nix.dev/manual/nix/latest/command-ref/new-cli/nix3-fmt&#34;&gt;nix fmt&lt;/a&gt; (which is a flakes-only feature) can be configured by adding the following to &lt;code&gt;flake.nix&lt;/code&gt; (assuming a &lt;code&gt;nixpkgs&lt;/code&gt; input exists):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nix&#34;&gt;{&#xA;  outputs =&#xA;    { nixpkgs, self }:&#xA;    {&#xA;      formatter.x86_64-linux = nixpkgs.legacyPackages.x86_64-linux.nixfmt-rfc-style;&#xA;    };&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;treefmt&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/numtide/treefmt&#34;&gt;treefmt&lt;/a&gt; can be used to format repositories consisting of different languages with one command. A possible configuration for &lt;code&gt;nixfmt&lt;/code&gt; in &lt;code&gt;treefmt.toml&lt;/code&gt; looks like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[formatter.nixfmt-rfc-style]&#xA;command = &#34;nixfmt&#34;&#xA;includes = [&#34;*.nix&#34;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This only works when &lt;code&gt;nixfmt-rfc-style&lt;/code&gt; is installed (see above for installation instructions).&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;treefmt&lt;/code&gt; can be integrated into text editors and CI to ensure consistent formatting for all filetypes.&lt;/p&gt; &#xA;&lt;h3&gt;treefmt-nix&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/numtide/treefmt-nix&#34;&gt;treefmt-nix&lt;/a&gt; automatically configures the correct packages and formatters using a Nix configuration and has native support for &lt;code&gt;nixfmt&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nix&#34;&gt;# ...&#xA;treefmt-nix.mkWrapper nixpkgs {&#xA;  # ... other options ...&#xA;  programs.nixfmt-rfc-style.enable = true;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;More information about configuration can be found in &lt;a href=&#34;https://github.com/numtide/treefmt-nix?tab=readme-ov-file#integration-into-nix&#34;&gt;the README&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;git-hooks.nix&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/cachix/git-hooks.nix&#34;&gt;git-hooks.nix&lt;/a&gt; can automatically configure git hooks like &lt;code&gt;pre-commit&lt;/code&gt; using nix configuration and has native support for &lt;code&gt;nixfmt&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nix&#34;&gt;{&#xA;  pre-commit-check = nix-pre-commit-hooks.run {&#xA;    # ... other options ...&#xA;    hooks = {&#xA;      # ... other hooks ...&#xA;      nixfmt-rfc-style.enable = true;&#xA;    };&#xA;  };&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;pre-commit&lt;/code&gt; tool&lt;/h3&gt; &#xA;&lt;p&gt;If you have Nix files in a Git repo and you want to make sure that they’re formatted with &lt;code&gt;nixfmt&lt;/code&gt;, then you can use the &lt;code&gt;pre-commit&lt;/code&gt; tool from &lt;a href=&#34;https://pre-commit.com&#34;&gt;pre-commit.com&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Make sure that you have the &lt;code&gt;pre-commit&lt;/code&gt; command:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ pre-commit --version&#xA;pre-commit 3.7.1&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Make sure that you’re in your Git repo:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ cd &amp;lt;path-to-git-repo&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Make sure that the &lt;code&gt;pre-commit&lt;/code&gt; tool is installed as a Git pre-commit hook:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ pre-commit install&#xA;pre-commit installed at .git/hooks/pre-commit&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you don’t already have one, then create a &lt;code&gt;.pre-commit-config.yaml&lt;/code&gt; file.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Add an entry for the &lt;code&gt;nixfmt&lt;/code&gt; hook to your &lt;code&gt;.pre-commit-config.yaml&lt;/code&gt; file:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;repos:&#xA;    - repo: https://github.com/NixOS/nixfmt&#xA;      rev: &amp;lt;version&amp;gt;&#xA;      hooks:&#xA;            - id: nixfmt&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;If you want to use a stable version of &lt;code&gt;nixfmt&lt;/code&gt;, then replace &lt;code&gt;&amp;lt;version&amp;gt;&lt;/code&gt; with a tag from this repo. If you want to use an unstable version of &lt;code&gt;nixfmt&lt;/code&gt;, then replace &lt;code&gt;&amp;lt;version&amp;gt;&lt;/code&gt; with a commit hash from this repo.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Try to commit a badly formatted Nix file in order to make sure that everything works.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!WARNING] &lt;code&gt;nixfmt&lt;/code&gt;’s integration with the &lt;code&gt;pre-commit&lt;/code&gt; tool is relatively new. At the moment, none of the stable releases of &lt;code&gt;nixfmt&lt;/code&gt; can be used with the &lt;code&gt;pre-commit&lt;/code&gt; tool. You’ll have to use an unstable version for the time being.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;neovim + nixd&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local nvim_lsp = require(&#34;lspconfig&#34;)&#xA;nvim_lsp.nixd.setup({&#xA;   settings = {&#xA;      nixd = {&#xA;         formatting = {&#xA;            command = { &#34;nixfmt&#34; },&#xA;         },&#xA;      },&#xA;   },&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This only works when &lt;code&gt;nixfmt-rfc-style&lt;/code&gt; is installed (see above for installation instructions).&lt;/p&gt; &#xA;&lt;h3&gt;neovim + nil&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local nvim_lsp = require(&#34;lspconfig&#34;)&#xA;nvim_lsp.nil_ls.setup({&#xA;   settings = {&#xA;      [&#39;nil&#39;] = {&#xA;         formatting = {&#xA;            command = { &#34;nixfmt&#34; },&#xA;         },&#xA;      },&#xA;   },&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This only works when &lt;code&gt;nixfmt-rfc-style&lt;/code&gt; is installed (see above for installation instructions).&lt;/p&gt; &#xA;&lt;h3&gt;neovim + none-ls&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local null_ls = require(&#34;null-ls&#34;)&#xA;null_ls.setup({&#xA;    sources = {&#xA;        null_ls.builtins.formatting.nixfmt,&#xA;    },&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This only works when &lt;code&gt;nixfmt-rfc-style&lt;/code&gt; is installed (see above for installation instructions).&lt;/p&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;h3&gt;With Nix&lt;/h3&gt; &#xA;&lt;p&gt;Haskell dependencies will be built by Nix.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Enter &lt;code&gt;nix-shell&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Build with &lt;code&gt;cabal new-build&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Without Nix&lt;/h3&gt; &#xA;&lt;p&gt;Haskell dependencies will be built by Cabal.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Build with &lt;code&gt;cabal new-build&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;nixfmt &amp;lt; input.nix&lt;/code&gt; – reads Nix code from &lt;code&gt;stdin&lt;/code&gt;, formats it, and outputs to &lt;code&gt;stdout&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;nixfmt file.nix&lt;/code&gt; – format the file in place&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;About Serokell&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;nixfmt&lt;/code&gt; is maintained and funded with &lt;span&gt;❤️&lt;/span&gt; by &lt;a href=&#34;https://serokell.io/&#34;&gt;Serokell&lt;/a&gt;. The names and logo for Serokell are trademark of Serokell OÜ.&lt;/p&gt; &#xA;&lt;p&gt;We love open source software! See &lt;a href=&#34;https://serokell.io/community?utm_source=github&#34;&gt;our other projects&lt;/a&gt; or &lt;a href=&#34;https://serokell.io/hire-us?utm_source=github&#34;&gt;hire us&lt;/a&gt; to design, develop and grow your idea!&lt;/p&gt;</summary>
  </entry>
</feed>