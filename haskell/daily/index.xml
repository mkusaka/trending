<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Haskell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-02T01:43:31Z</updated>
  <subtitle>Daily Trending of Haskell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>NeuralNine/config-files</title>
    <updated>2022-06-02T01:43:31Z</updated>
    <id>tag:github.com,2022-06-02:/NeuralNine/config-files</id>
    <link href="https://github.com/NeuralNine/config-files" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A collection of my config files.&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>gren-lang/compiler</title>
    <updated>2022-06-02T01:43:31Z</updated>
    <id>tag:github.com,2022-06-02:/gren-lang/compiler</id>
    <link href="https://github.com/gren-lang/compiler" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Gren&lt;/h1&gt; &#xA;&lt;p&gt;Compiler for the Gren programming language.&lt;/p&gt; &#xA;&lt;h2&gt;Installing&lt;/h2&gt; &#xA;&lt;p&gt;Binaries are available for every commit to master &lt;a href=&#34;https://github.com/gren-lang/compiler/actions/workflows/releases.yml&#34;&gt;here&lt;/a&gt;. Once downloaded, you&#39;ll need to unzip the binary and place it somewhere in your &lt;code&gt;PATH&lt;/code&gt;, and give it execute permissions.&lt;/p&gt; &#xA;&lt;p&gt;Example (OS X):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Download to ~/Downloads/gren-macOS.zip&#xA;cd ~/Downloads&#xA;unzip gren-macOS.zip&#xA;chmod +x gren&#xA;mv gren /usr/local/bin/&#xA;&#xA;gren # Success&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>obsidiansystems/obelisk</title>
    <updated>2022-06-02T01:43:31Z</updated>
    <id>tag:github.com,2022-06-02:/obsidiansystems/obelisk</id>
    <link href="https://github.com/obsidiansystems/obelisk" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Functional reactive web and mobile applications, with batteries included.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Obelisk&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://www.haskell.org&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/language-Haskell-blue.svg?sanitize=true&#34; alt=&#34;Haskell Programming Language&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/obsidiansystems/obelisk/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;http://img.shields.io/badge/license-BSD3-brightgreen.svg?sanitize=true&#34; alt=&#34;BSD3 License&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/obsidiansystems/obelisk/master/docs/obelisk-logo-640.png&#34; width=&#34;50%&#34; alt=&#34;Obelisk Logo&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Functional reactive web and mobile applications, with batteries included. Obelisk&#39;s goal is to represent a cohesive, highly-curated set of choices that &lt;a href=&#34;https://obsidian.systems/&#34;&gt;Obsidian Systems&lt;/a&gt; has made for building these types of applications in a way that is extremely fast but does not compromise on production readiness.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/obsidiansystems/obelisk/master/#overview&#34;&gt;Overview&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/obsidiansystems/obelisk/master/#who-should-consider-using-it&#34;&gt;Who should consider using it?&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/obsidiansystems/obelisk/master/#installing-obelisk&#34;&gt;Installing Obelisk&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/obsidiansystems/obelisk/master/#developing-an-obelisk-project&#34;&gt;Developing an Obelisk project&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/obsidiansystems/obelisk/master/#local-hoogle&#34;&gt;Local Hoogle&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/obsidiansystems/obelisk/master/#adding-packages&#34;&gt;Adding Packages&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/obsidiansystems/obelisk/master/#adding-package-overrides&#34;&gt;Adding Package Overrides&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/obsidiansystems/obelisk/master/#running-tests&#34;&gt;Running tests&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/obsidiansystems/obelisk/master/#running-over-https&#34;&gt;Running over HTTPS&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/obsidiansystems/obelisk/master/#ide-support&#34;&gt;IDE Support&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/obsidiansystems/obelisk/master/#deploying&#34;&gt;Deploying&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/obsidiansystems/obelisk/master/#default-ec2-deployment&#34;&gt;Default EC2 Deployment&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/obsidiansystems/obelisk/master/#custom-non-ec2-deployment&#34;&gt;Custom Non-EC2 Deployment&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/obsidiansystems/obelisk/master/#virtualbox-deployment&#34;&gt;VirtualBox Deployment&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/obsidiansystems/obelisk/master/#locally&#34;&gt;Locally&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/obsidiansystems/obelisk/master/#from-macos&#34;&gt;From macOS&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/obsidiansystems/obelisk/master/#deploying-an-updated-version&#34;&gt;Deploying an updated version&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/obsidiansystems/obelisk/master/#mobile&#34;&gt;Mobile&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/obsidiansystems/obelisk/master/#ios&#34;&gt;iOS&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/obsidiansystems/obelisk/master/#android&#34;&gt;Android&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/obsidiansystems/obelisk/master/#frequently-asked-questions-faq&#34;&gt;Frequently Asked Questions (FAQ)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/obsidiansystems/obelisk/master/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;Obelisk allows you to build high-quality web and mobile applications very quickly using &lt;a href=&#34;https://reflex-frp.org/&#34;&gt;Reflex&lt;/a&gt;. In minutes you can go from an empty directory to an interactive application that works on web, iOS, and Android, all sharing the same Haskell codebase! Obelisk&#39;s development environment also enables extremely rapid development and feedback. You can take advantage of Haskell&#39;s type system across the frontend and backend boundary. This means changes to your backend that would break your frontend are immediately detected during development and vice versa. Obelisk uses Haskell&#39;s compiler to give you a complete &#34;TODO list&#34; of what needs to be updated.&lt;/p&gt; &#xA;&lt;p&gt;Obelisk is targeted primarily at Haskell developers who want to build high-quality web and/or mobile applications in Haskell, without the distractions of manually choosing and integrating technology for every piece of the system.&lt;/p&gt; &#xA;&lt;h3&gt;Who should consider using it?&lt;/h3&gt; &#xA;&lt;p&gt;Obelisk assumes basic knowledge of &lt;a href=&#34;https://www.haskell.org/&#34;&gt;Haskell&lt;/a&gt; and &lt;a href=&#34;https://reflex-frp.org/&#34;&gt;Reflex/Reflex-DOM&lt;/a&gt;, web technologies like &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/HTML&#34;&gt;HTML&lt;/a&gt; and &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/CSS&#34;&gt;CSS&lt;/a&gt;, and a terminal shell like &lt;a href=&#34;https://en.wikipedia.org/wiki/Bash_(Unix_shell)&#34;&gt;Bash&lt;/a&gt;. Knowledge of &lt;a href=&#34;https://nixos.org/&#34;&gt;Nix&lt;/a&gt; helps but is not strictly necessary.&lt;/p&gt; &#xA;&lt;h2&gt;Installing Obelisk&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nixos.org/nix/&#34;&gt;Install Nix&lt;/a&gt;. If you already have Nix installed, make sure you have version 2.0 or higher. To check your current version, run &lt;code&gt;nix-env --version&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Set up nix caches &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;If you are running NixOS, add this to &lt;code&gt;/etc/nixos/configuration.nix&lt;/code&gt;: &lt;pre&gt;&lt;code class=&#34;language-nix&#34;&gt;nix.binaryCaches = [ &#34;https://nixcache.reflex-frp.org&#34; ];&#xA;nix.binaryCachePublicKeys = [ &#34;ryantrinkle.com-1:JJiAKaRv9mWgpVAz8dwewnZe0AzzEAzPkagE9SP5NWI=&#34; ];&#xA;&lt;/code&gt;&lt;/pre&gt; and rebuild your NixOS configuration (e.g. &lt;code&gt;sudo nixos-rebuild switch&lt;/code&gt;).&lt;/li&gt; &#xA;   &lt;li&gt;If you are using another operating system or Linux distribution, ensure that these lines are present in your Nix configuration file (&lt;code&gt;/etc/nix/nix.conf&lt;/code&gt; on most systems; &lt;a href=&#34;https://nixos.org/nix/manual/#sec-conf-file&#34;&gt;see full list&lt;/a&gt;): &lt;pre&gt;&lt;code class=&#34;language-nix&#34;&gt;binary-caches = https://cache.nixos.org https://nixcache.reflex-frp.org&#xA;binary-cache-public-keys = cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY= ryantrinkle.com-1:JJiAKaRv9mWgpVAz8dwewnZe0AzzEAzPkagE9SP5NWI=&#xA;binary-caches-parallel-connections = 40&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;If you&#39;re on a Linux distribution other than NixOS, enable sandboxing (see these &lt;a href=&#34;https://github.com/obsidiansystems/obelisk/issues/172#issuecomment-411507818&#34;&gt;issue 172&lt;/a&gt; or &lt;a href=&#34;https://github.com/obsidiansystems/obelisk/issues/6&#34;&gt;issue 6&lt;/a&gt; if you run into build problems) by adding the following: &lt;pre&gt;&lt;code class=&#34;language-nix&#34;&gt;sandbox = true&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;     &lt;li&gt;If you&#39;re on MacOS, disable sandboxing (there are still some impure dependencies for now) by adding the following: &lt;pre&gt;&lt;code class=&#34;language-nix&#34;&gt;sandbox = false&#xA;&lt;/code&gt;&lt;/pre&gt; then restart the nix daemon &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo launchctl stop org.nixos.nix-daemon&#xA;sudo launchctl start org.nixos.nix-daemon&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;Install obelisk: &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;nix-env -f https://github.com/obsidiansystems/obelisk/archive/master.tar.gz -iA command&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Accessing private repositories&lt;/h3&gt; &#xA;&lt;p&gt;To allow the Nix builder to access private git repositories, you must be set up to access them via SSH. Follow these steps depending on the platform you need access to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://help.github.com/articles/connecting-to-github-with-ssh/&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.gitlab.com/ee/gitlab-basics/create-your-ssh-keys.html&#34;&gt;GitLab&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Developing an Obelisk project&lt;/h2&gt; &#xA;&lt;p&gt;To create a new Obelisk project, go to an empty directory and run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ob init&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Obelisk leverages ghcid to provide a live-reloading server that handles both frontend and backend. To run your Obelisk app and monitor the source for changes:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ob run&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now, with an appropriate browser, go to &lt;a href=&#34;http://localhost:8000&#34;&gt;http://localhost:8000&lt;/a&gt; (or the address/port specified in &lt;code&gt;config/common/route&lt;/code&gt;) to access your app. Firefox will not be able to properly run the development website due to &lt;a href=&#34;https://github.com/obsidiansystems/obelisk/issues/460&#34;&gt;issue 460&lt;/a&gt;. Fortunately, this problem does not occur on a fully built website.&lt;/p&gt; &#xA;&lt;p&gt;Every time you change the Haskell source files in frontend, common or backend, &lt;code&gt;ob run&lt;/code&gt; will automatically recompile the modified files and reload the server. Furthermore, it will display on screen compilation errors and warnings if any.&lt;/p&gt; &#xA;&lt;h3&gt;Local Hoogle&lt;/h3&gt; &#xA;&lt;p&gt;Obelisk can also provide a local &lt;a href=&#34;https://hoogle.haskell.org&#34;&gt;Hoogle&lt;/a&gt; server that lets you browse and search the types and documentation for all of the dependencies in your entire Obelisk application. To start the Hoogle server, in a spare terminal run the following command from the root of your Obelisk application:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ ob hoogle&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can then access your local Hoogle from your web browser at &lt;code&gt;http://localhost:8080&lt;/code&gt;, or by instructing an editor plugin to use that address.&lt;/p&gt; &#xA;&lt;h3&gt;Adding packages&lt;/h3&gt; &#xA;&lt;p&gt;In order to add package dependencies, declare them under the build-depends field in the appropriate cabal files (backend, common, and frontend each have their own). The corresponding Nix packages will automatically be selected when building.&lt;/p&gt; &#xA;&lt;h3&gt;Adding package overrides&lt;/h3&gt; &#xA;&lt;p&gt;To add a version override to any Haskell package, or to add a Haskell package that doesn&#39;t exist in the nixpkgs used by Obelisk, use the &lt;code&gt;overrides&lt;/code&gt; attribute in your project&#39;s &lt;code&gt;default.nix&lt;/code&gt;. For example, to use a specific version of the &lt;code&gt;aeson&lt;/code&gt; package fetched from GitHub and a specific version of the &lt;code&gt;waargonaut&lt;/code&gt; package fetched from Hackage, your &lt;code&gt;default.nix&lt;/code&gt; will look like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nix&#34;&gt;# ...&#xA;project ./. ({ pkgs, ... }: {&#xA;# ...&#xA;  overrides = self: super: let&#xA;    aesonSrc = pkgs.fetchFromGitHub {&#xA;      owner = &#34;obsidiansystems&#34;;&#xA;      repo = &#34;aeson-gadt-th&#34;;&#xA;      rev = &#34;ed573c2cccf54d72aa6279026752a3fecf9c1383&#34;;&#xA;      sha256 = &#34;08q6rnz7w9pn76jkrafig6f50yd0f77z48rk2z5iyyl2jbhcbhx3&#34;;&#xA;    };&#xA;  in&#xA;  {&#xA;    aeson = self.callCabal2nix &#34;aeson&#34; aesonSrc {};&#xA;    waargonaut = self.callHackageDirect {&#xA;      pkg = &#34;waargonaut&#34;;&#xA;      ver = &#34;0.8.0.1&#34;;&#xA;      sha256 = &#34;1zv28np3k3hg378vqm89v802xr0g8cwk7gy3mr77xrzy5jbgpa39&#34;;&#xA;    } {};&#xA;  };&#xA;# ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For further information see &lt;a href=&#34;https://nixos.org/nixpkgs/manual/#users-guide-to-the-haskell-infrastructure&#34;&gt;the Haskell section&lt;/a&gt; of nixpkgs Contributors Guide.&lt;/p&gt; &#xA;&lt;h3&gt;Adding extra local packages&lt;/h3&gt; &#xA;&lt;p&gt;If the standard packages (&lt;code&gt;frontend&lt;/code&gt;, &lt;code&gt;backend&lt;/code&gt;, and &lt;code&gt;common&lt;/code&gt;) are not enough, to add more local Haskell packages, define them with the &lt;code&gt;packages&lt;/code&gt; parameter. The sources of these packages will be automatically reloaded by &lt;code&gt;ob run&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nix&#34;&gt;# ...&#xA;project ./. ({ pkgs, ... }: {&#xA;# ...&#xA;  packages = {&#xA;    another = ./another;&#xA;  };&#xA;# ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Running over HTTPS&lt;/h3&gt; &#xA;&lt;p&gt;To run your app locally over HTTPS, update the protocol in &lt;code&gt;config/common/route&lt;/code&gt; to &lt;code&gt;https&lt;/code&gt;, and then use &lt;code&gt;ob run&lt;/code&gt; as normal.&lt;/p&gt; &#xA;&lt;p&gt;Since Obelisk generates a self-signed certificate for running HTTPS, the browser will issue a warning about using an invalid certificate. On Chrome, you can go to &lt;code&gt;chrome://flags/#allow-insecure-localhost&lt;/code&gt; to enable invalid certificates for localhost.&lt;/p&gt; &#xA;&lt;h3&gt;IDE Support&lt;/h3&gt; &#xA;&lt;p&gt;Obelisk officially supports terminal-based feedback (akin to &lt;a href=&#34;https://github.com/ndmitchell/ghcid&#34;&gt;&lt;code&gt;ghcid&lt;/code&gt;&lt;/a&gt;) in &lt;code&gt;ob run&lt;/code&gt; and &lt;code&gt;ob watch&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Deploying&lt;/h2&gt; &#xA;&lt;h3&gt;Default EC2 Deployment&lt;/h3&gt; &#xA;&lt;p&gt;In this section we will demonstrate how to deploy your Obelisk app to an Amazon EC2 instance. Obelisk deployments are configured for EC2 by default (see &lt;a href=&#34;https://raw.githubusercontent.com/obsidiansystems/obelisk/master/#custom-non-ec2-deployment&#34;&gt;Custom Non-EC2 Deployment&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;First create a new EC2 instance:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Launch a NixOS 19.09 EC2 instance (we recommend &lt;a href=&#34;https://console.aws.amazon.com/ec2/v2/home?region=us-east-1#LaunchInstanceWizard:ami=ami-00a8eeaf232a74f84&#34;&gt;this AMI&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;In the instance configuration wizard ensure that your instance has at least 1GB RAM and 10GB disk space.&lt;/li&gt; &#xA; &lt;li&gt;When prompted save your AWS private key (&lt;code&gt;~/myaws.pem&lt;/code&gt;) somewhere safe. We&#39;ll need it later during deployment.&lt;/li&gt; &#xA; &lt;li&gt;Go to &#34;Security Groups&#34;, select your instance&#39;s security group and under &#34;Inbound&#34; tab add a new rule for HTTP port 80 and HTTPS port 443.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;At this stage your instance should be booting and become accessible shortly. Note down the hostname of your EC2 instance.&lt;/p&gt; &#xA;&lt;p&gt;Now go to your Obelisk project directory (&lt;code&gt;~/code/myapp&lt;/code&gt;), and initialize a deployment config (&lt;code&gt;~/code/myapp-deploy&lt;/code&gt;): Your project directory must be &#34;thunkable&#34;, i.e. something on which &lt;code&gt;ob thunk pack&lt;/code&gt; can be called. Usually it will be a git repository whose current revision has been pushed upstream.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd ~/code/myapp&#xA;SERVER=ec2-35-183-22-197.ca-central-1.compute.amazonaws.com&#xA;ROUTE=https://myapp.com   # Publicly accessible route to your app&#xA;EMAIL=myname@myapp.com&#xA;ob deploy init \&#xA;  --ssh-key ~/myaws.pem \&#xA;  --hostname $SERVER \&#xA;  --route $ROUTE \&#xA;  --admin-email $EMAIL \&#xA;  ~/code/myapp-deploy&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;HTTPS is enabled by default; to disable HTTPS pass &lt;code&gt;--disable-https&lt;/code&gt; to the &lt;code&gt;ob deploy init&lt;/code&gt; command above.&lt;/p&gt; &#xA;&lt;p&gt;This step will also require that you manually verify the authenticity of the host &lt;code&gt;$SERVER&lt;/code&gt;. Obelisk will save the fingerprint in a deployment-specific configuration. &lt;strong&gt;Obelisk deployments do &lt;em&gt;not&lt;/em&gt; rely on the &lt;code&gt;known_hosts&lt;/code&gt; of your local machine.&lt;/strong&gt; This is because, in the event that you need to switch from one deploy machine / bastion host to another, you want to be absolutely sure that you&#39;re still connecting to the machines you think you are, even if that deploy machine / bastion host has never connected to them before. Obelisk explicitly avoids a workflow that encourages people to accept host keys without checking them, since that could result in leaking production secrets to anyone who manages to MITM you, e.g. via DNS spoofing or cache poisoning. (Note that an active attack is a circumstance where you may need to quickly switch bastion hosts, e.g. because the attacker has taken one down or you have taken it down in case it was compromised. In this circumstance you might need to deploy to production to fix an exploit or rotate keys, etc.) When you run &lt;code&gt;ob deploy&lt;/code&gt; later it will rely on the saved verification in this step.&lt;/p&gt; &#xA;&lt;p&gt;Next, go to the deployment directory that you just initialized and deploy!&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd ~/code/myapp-deploy&#xA;ob deploy push&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;ob deploy push&lt;/code&gt; will locally build your app and then transfer it, along with all the Nix package dependencies, via ssh to the EC2 instance. The backend will live in &lt;code&gt;/var/lib/backend&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;At this point you are done. Your app will be accessible at &lt;code&gt;${ROUTE}&lt;/code&gt;. The currently deployed version - the git commit hash of the source repo - can be found at &lt;code&gt;${ROUTE}/version&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Custom Non-EC2 Deployment&lt;/h3&gt; &#xA;&lt;p&gt;By default Obelisk deployments are configured for NixOS machines running on AWS EC2. To provide your own configuration, you need to write a custom &lt;code&gt;module.nix&lt;/code&gt; in the deployment repository. This still requires that your server is running NixOS.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;module.nix&lt;/code&gt; must contain a Nix &lt;em&gt;function&lt;/em&gt; that produces a &lt;a href=&#34;https://nixos.org/nixos/manual/index.html#sec-writing-modules&#34;&gt;NixOS module function&lt;/a&gt;. The top-level function takes deployment configuration as arguments: &lt;code&gt;hostName&lt;/code&gt;, &lt;code&gt;adminEmail&lt;/code&gt;, &lt;code&gt;routeHost&lt;/code&gt;, &lt;code&gt;enableHttps&lt;/code&gt;, &lt;code&gt;version&lt;/code&gt;, &lt;code&gt;exe&lt;/code&gt;, &lt;code&gt;nixosPkgs&lt;/code&gt;. Most of these are the values you specified during &lt;code&gt;ob deploy init&lt;/code&gt; and are stored in the deployment repository. &lt;code&gt;version&lt;/code&gt; is a &lt;code&gt;git&lt;/code&gt; hash for the app that you&#39;re deploying. &lt;code&gt;exe&lt;/code&gt; is the Linux build of the app (as seen in &lt;a href=&#34;https://raw.githubusercontent.com/obsidiansystems/obelisk/master/#locally&#34;&gt;Deploying Locally&lt;/a&gt;). &lt;code&gt;nixosPkgs&lt;/code&gt; is the package set used to construct the NixOS VM.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/obsidiansystems/obelisk/master/#virtualbox-deployment&#34;&gt;VirtualBox Deployment&lt;/a&gt; section provides an example.&lt;/p&gt; &#xA;&lt;h4&gt;VirtualBox Deployment&lt;/h4&gt; &#xA;&lt;p&gt;Here&#39;s a &lt;code&gt;module.nix&lt;/code&gt; that is configured for deployment to a VirtualBox VM (running NixOS):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nix&#34;&gt;{ nixosPkgs, ... }: {...}: {&#xA;  imports = [ (nixosPkgs.path + /nixos/modules/virtualisation/virtualbox-image.nix) ];&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;{...}:&lt;/code&gt; and following is the &lt;a href=&#34;https://nixos.org/nixos/manual/index.html#sec-writing-modules&#34;&gt;NixOS module&lt;/a&gt; definition.&lt;/p&gt; &#xA;&lt;h3&gt;Locally&lt;/h3&gt; &#xA;&lt;p&gt;If you want deploy your application locally or test a production-oriented build you can build and deploy the app as described below.&lt;/p&gt; &#xA;&lt;p&gt;Build the application:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;nix-build -A exe --no-out-link&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Copy the result to a new directory, add configuration, and run!&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mkdir test-app&#xA;ln -s $(nix-build -A exe --no-out-link)/* test-app/&#xA;cp -r config test-app&#xA;(cd test-app &amp;amp;&amp;amp; ./backend)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;From macOS&lt;/h3&gt; &#xA;&lt;p&gt;Deploying from macOS requires some extra setup:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/LnL7/nix-darwin&#34;&gt;Install nix-darwin&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.docker.com/&#34;&gt;Install docker&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Running &lt;code&gt;ob deploy push&lt;/code&gt; will give you additional setup instructions.&lt;/p&gt; &#xA;&lt;h3&gt;Deploying an updated version&lt;/h3&gt; &#xA;&lt;p&gt;If you&#39;d like to deploy an updated version (with new commits) of your Obelisk app: simply go to the configuration directory, update the source thunk and push:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd ~/code/myapp-deploy&#xA;ob deploy update&#xA;ob deploy push&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Mobile&lt;/h2&gt; &#xA;&lt;p&gt;Until Obelisk offers a &lt;code&gt;ob deploy&lt;/code&gt; equivalent for mobile apps, you are recommended to do it manually as follows.&lt;/p&gt; &#xA;&lt;h3&gt;iOS&lt;/h3&gt; &#xA;&lt;h4&gt;First time setup&lt;/h4&gt; &#xA;&lt;p&gt;Development on iOS requires a computer running macOS and an iOS developer account. Your account must also belong to an Apple Developer Team, if you want to access developer portal links (otherwise they&#39;ll redirect to your account page).&lt;/p&gt; &#xA;&lt;h5&gt;iPhone&lt;/h5&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Connect the iPhone on which you&#39;d like to run builds - this will open up iTunes.&lt;/li&gt; &#xA; &lt;li&gt;Click accept to authorize on both the computer and the iPhone.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h5&gt;Xcode&lt;/h5&gt; &#xA;&lt;p&gt;Install Xcode 11.2 (contains iOS SDK 13.2) and open it so that it runs its post install tool setup.&lt;/p&gt; &#xA;&lt;p&gt;These versions will work out of the box but iOS SDKs prior to 11.3 should also work. You can choose another installed version in &lt;code&gt;default.nix&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;More recent Xcodes should also work, as long as one of the SDKs mentioned above has been used. To add another SDK to your current Xcode, &lt;a href=&#34;https://developer.apple.com/download/more/&#34;&gt;download&lt;/a&gt; the corresponding Xcode, extract it and copy its SDK folder next to the installed one, e.g.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;open -W Xcode_9.2.xip&#xA;sudo cp -R Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS.sdk /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS11.2.sdk&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can verify that you have correct versions by running&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;xcodebuild -showsdks&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Certificates&lt;/h5&gt; &#xA;&lt;p&gt;To deploy and/or package apps, you&#39;ll need to inform Apple of your development devices and permissions by adding credentials to the correct provisioning profile via the Apple Developer portal.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Open up XCode and go to Preferences - Accounts. Select the organization Member role, click Manage Certificates, and add an iOS Development certificate.&lt;/li&gt; &#xA; &lt;li&gt;Go to &lt;a href=&#34;https://developer.apple.com/account/ios/device/&#34;&gt;developer portal - devices&lt;/a&gt; and add your device. To find your device&#39;s UDID, select it in iTunes and click the serial number.&lt;/li&gt; &#xA; &lt;li&gt;Go to &lt;a href=&#34;https://developer.apple.com/account/ios/profile/limited&#34;&gt;developer portal - development profiles&lt;/a&gt;. Create a development profile and add your certificate and device. Click &#34;Generate&#34; and then download and open the profile.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Building&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;In your project&#39;s &lt;code&gt;default.nix&lt;/code&gt; set values for &lt;code&gt;ios.bundleIdentifier&lt;/code&gt; and &lt;code&gt;ios.bundleName&lt;/code&gt;. Ensure that &lt;code&gt;bundleIdentifier&lt;/code&gt; matches the App ID of the development profile, or that you are using a wildcard profile.&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;nix-build -A ios.frontend -o result-ios&lt;/code&gt; to build the app. Find it at &lt;code&gt;result-ios/frontend.app&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Deploying&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Connect the registered iPhone.&lt;/li&gt; &#xA; &lt;li&gt;Find your Apple Team ID in the &lt;a href=&#34;https://developer.apple.com/account/#/membership&#34;&gt;developer portal&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Run the deploy command with your Team ID:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;result-ios/bin/deploy [TEAM_ID]&#xA;# or in debug mode via lldb:&#xA;result-ios/bin/deploy [TEAM_ID] -d&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Packaging&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Go to &lt;a href=&#34;https://developer.apple.com/account/ios/profile/production&#34;&gt;developer portal - distribution profiles&lt;/a&gt;. Create and download a distribution profile.&lt;/li&gt; &#xA; &lt;li&gt;Run the package script with your TEAM ID and your distribution profile to create a &lt;code&gt;.ipa&lt;/code&gt;:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;result-ios/bin/package [TEAM_ID] /path/to/output/.ipa /path/to/profile/file&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Debugging&lt;/h4&gt; &#xA;&lt;p&gt;It&#39;s also possible to inspect iOS WkWebView apps once they are installed in the iPhone:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;On the desktop, go to Safari &amp;gt; Preferences &amp;gt; Advanced and enable Develop menu.&lt;/li&gt; &#xA; &lt;li&gt;On the iPhone go to Settings &amp;gt; Safari &amp;gt; Advanced and enable Web Inspector.&lt;/li&gt; &#xA; &lt;li&gt;Open the app on the iPhone while it is connected to the desktop.&lt;/li&gt; &#xA; &lt;li&gt;In the desktop&#39;s Safari Develop menu, you should see your iPhone. Select the screen under the name of the app.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Android&lt;/h3&gt; &#xA;&lt;p&gt;NOTE: Currently Android builds are only supported on Linux.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;In your project&#39;s &lt;code&gt;default.nix&lt;/code&gt; set a suitable value for &lt;code&gt;android.applicationId&lt;/code&gt; and &lt;code&gt;android.displayName&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;In your project&#39;s &lt;code&gt;default.nix&lt;/code&gt; pass &lt;code&gt;config.android_sdk.accept_license = true;&lt;/code&gt; in the arguments to the import of of &lt;code&gt;.obelisk/impl&lt;/code&gt; to indicate your acceptance of the &lt;a href=&#34;https://developer.android.com/studio/terms&#34;&gt;Android Software Development Kit License Agreement&lt;/a&gt;, which is required to build Android apps.&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;nix-build -A android.frontend -o result-android&lt;/code&gt; to build the Android app.&lt;/li&gt; &#xA; &lt;li&gt;A debug version of the app should be generated at &lt;code&gt;result-android/android-app-debug.apk&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Now deploy the built apk file to your Android device:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Enable &lt;em&gt;USB debugging&lt;/em&gt; in your Android device (&lt;a href=&#34;https://developer.android.com/studio/debug/dev-options&#34;&gt;instructions here&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Connect the device using USB (be sure to confirm any security prompts on the device)&lt;/li&gt; &#xA; &lt;li&gt;Run the deploy script: &lt;code&gt;result-android/bin/deploy&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Alternatively, you can deploy from an obelisk deployment directory (a directory generated post &lt;code&gt;ob deploy init ...&lt;/code&gt; command) using the &lt;code&gt;ob deploy test android&lt;/code&gt; command. This command will accomplish the following:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Create a key store and apk signing key (&lt;code&gt;android_keystore.jks&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Build a Signed Android apk for your application&lt;/li&gt; &#xA; &lt;li&gt;Deploy the Signed apk to your connected Android device&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;In the event that you change your key or keystore password, you will have to update your credentials within the JSON object found in &lt;code&gt;android_keytool_config.json&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Additional documentation on Java key stores can be found &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/technotes/tools/unix/keytool.html&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This should copy over and install the application on your device (if you see a &#34;&lt;em&gt;signatures do not match&lt;/em&gt;&#34; error, simply uninstall the previous app from the device before retrying the deploy). The name of the installed application will be what you have specified for &lt;code&gt;android.displayName&lt;/code&gt; in the &lt;code&gt;default.nix&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Releasing to Play Store&lt;/h4&gt; &#xA;&lt;h5&gt;Build a release version&lt;/h5&gt; &#xA;&lt;p&gt;After having configured signing for your app, you may proceed to build a release version of the app. This is no different to how you build the non-release version, so consult the section &lt;a href=&#34;https://raw.githubusercontent.com/obsidiansystems/obelisk/master/#android&#34;&gt;Android&lt;/a&gt; further above for exact instructions on building and deploying to your device.&lt;/p&gt; &#xA;&lt;h2&gt;Frequently Asked Questions (FAQ)&lt;/h2&gt; &#xA;&lt;p&gt;Refer to &lt;a href=&#34;https://raw.githubusercontent.com/obsidiansystems/obelisk/master/FAQ.md&#34;&gt;FAQ&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Contributions and issue reports are encouraged and appreciated! Refer to the &lt;a href=&#34;https://raw.githubusercontent.com/obsidiansystems/obelisk/master/CONTRIBUTING.md&#34;&gt;Contributing&lt;/a&gt; guide for information about getting started.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>simonmichael/hledger</title>
    <updated>2022-06-02T01:43:31Z</updated>
    <id>tag:github.com,2022-06-02:/simonmichael/hledger</id>
    <link href="https://github.com/simonmichael/hledger" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A reliable, user-friendly Plain Text Accounting tool with command line, terminal and web interfaces.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;hledger&lt;/h1&gt; &#xA;&lt;h2&gt;Robust, intuitive plain text accounting&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.gnu.org/licenses/gpl.html&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-GPLv3+-brightgreen.svg?sanitize=true&#34; alt=&#34;license&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hackage.haskell.org/package/hledger&#34;&gt;&lt;img src=&#34;https://img.shields.io/hackage/v/hledger.svg?label=hackage&amp;amp;colorB=green&#34; alt=&#34;on hackage&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://repology.org/metapackage/hledger&#34;&gt;&lt;img src=&#34;https://repology.org/badge/version-for-repo/stackage_nighly/hledger.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://repology.org/metapackage/hledger&#34;&gt;&lt;img src=&#34;https://repology.org/badge/version-for-repo/stackage_lts/hledger.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://bugs.hledger.org&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/issues/simonmichael/hledger.svg?sanitize=true&#34; alt=&#34;github issues&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Welcome! This a brief intro to hledger. For a more detailed version, see the home page: &lt;strong&gt;&lt;a href=&#34;https://hledger.org&#34;&gt;https://hledger.org&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;hledger is lightweight, cross platform, multi-currency, double-entry accounting software. It lets you track money, investments, cryptocurrencies, invoices, time, inventory and more, in a safe, future-proof plain text data format with full version control and privacy.&lt;/p&gt; &#xA;&lt;p&gt;hledger aims to help both computer experts and regular folks gain clarity in their finances and time management. Though the UIs are basic, hledger can model any accounting situation and provide precise, clear reports. It is reliable, quick, and backed by the highly supportive &lt;a href=&#34;https://plaintextaccounting.org&#34;&gt;Plain Text Accounting&lt;/a&gt; ecosystem. Using it is an excellent way to learn double entry accounting.&lt;/p&gt; &#xA;&lt;p&gt;Compared to &lt;a href=&#34;https://plaintextaccounting.org/#software&#34;&gt;other PTA apps&lt;/a&gt;, hledger is actively maintained, with regular releases, and a strong focus on being easy to use and practical for everyday accounting.&lt;/p&gt; &#xA;&lt;p&gt;More features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Installs easily on unix, mac or windows&lt;/li&gt; &#xA; &lt;li&gt;Complete, built-in documentation in multiple formats, beginner videos, tutorials etc.&lt;/li&gt; &#xA; &lt;li&gt;Multiple UIs: command-line, terminal, web, mobile, editors/IDEs&lt;/li&gt; &#xA; &lt;li&gt;Good at importing and exporting CSV; also outputs text/HTML/JSON/SQL&lt;/li&gt; &#xA; &lt;li&gt;A robust, general, well-specified multi-currency accounting engine&lt;/li&gt; &#xA; &lt;li&gt;Fast, analysing 25k transactions per second on a macbook air m1&lt;/li&gt; &#xA; &lt;li&gt;Accurate to 255 decimal places&lt;/li&gt; &#xA; &lt;li&gt;Supports your preferred account names, currencies, number formats&lt;/li&gt; &#xA; &lt;li&gt;Inspired by and partly compatible with Ledger CLI; interconvertible with Beancount&lt;/li&gt; &#xA; &lt;li&gt;Scriptable by CLI, HTTP or API, with plenty of examples&lt;/li&gt; &#xA; &lt;li&gt;Clean Haskell codebase, continually improved since 2007, with $100 regression bounties&lt;/li&gt; &#xA; &lt;li&gt;Free software licensed under GPLv3+.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;p&gt;I use hledger to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;track income and spending, sometimes with budgets&lt;/li&gt; &#xA; &lt;li&gt;see time reports by day/week/month/project&lt;/li&gt; &#xA; &lt;li&gt;track reimbursables, invoices and payments&lt;/li&gt; &#xA; &lt;li&gt;predict cashflow and account balances&lt;/li&gt; &#xA; &lt;li&gt;get accurate numbers for tax filing&lt;/li&gt; &#xA; &lt;li&gt;research past events&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Here&#39;s an example of the journal file format:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-journal&#34;&gt;2022-01-01 opening balances as of this date&#xA;    assets&lt;span&gt;🏦&lt;/span&gt;checking                $1000&#xA;    assets&lt;span&gt;🏦&lt;/span&gt;savings                 $2000&#xA;    assets:cash                          $100&#xA;    liabilities:creditcard               $-50&#xA;    equity:opening/closing balances&#xA;&#xA;2022-01-15 market&#xA;    expenses:food             $50&#xA;    assets:cash              $-50&#xA;&#xA;2022-02-01 GOODWORKS CORP&#xA;    assets&lt;span&gt;🏦&lt;/span&gt;checking           $1000&#xA;    income:salary                 $-1000&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and some simple reports:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cli&#34;&gt;$ hledger bs&#xA;Balance Sheet 2022-02-15&#xA;&#xA;                        || 2022-02-15 &#xA;========================++============&#xA; Assets                 ||            &#xA;------------------------++------------&#xA; assets&lt;span&gt;🏦&lt;/span&gt;checking   ||      $2000 &#xA; assets&lt;span&gt;🏦&lt;/span&gt;savings    ||      $2000 &#xA; assets:cash            ||        $50 &#xA;------------------------++------------&#xA;                        ||      $4050 &#xA;========================++============&#xA; Liabilities            ||            &#xA;------------------------++------------&#xA; liabilities:creditcard ||        $50 &#xA;------------------------++------------&#xA;                        ||        $50 &#xA;========================++============&#xA; Net:                   ||      $4000 &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cli&#34;&gt;$ hledger is --monthly                                            &#xA;Income Statement 2022-01-01..2022-02-28                                               &#xA;                                                                                      &#xA;               ||  Jan    Feb                                                         &#xA;===============++=============                                                        &#xA; Revenues      ||                                                                     &#xA;---------------++-------------                                                        &#xA; income:salary ||    0  $1000                                                         &#xA;---------------++-------------                                                        &#xA;               ||    0  $1000                                                         &#xA;===============++=============                                                        &#xA; Expenses      ||                                                                     &#xA;---------------++-------------                                                        &#xA; expenses:food ||  $50      0                                                         &#xA;---------------++-------------                                                        &#xA;               ||  $50      0                                                         &#xA;===============++=============                                                        &#xA; Net:          || $-50  $1000                                                         &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;More examples and screenshots: &lt;a href=&#34;https://hledger.org/#how-to-get-started&#34;&gt;https://hledger.org/#how-to-get-started&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Funding&lt;/h2&gt; &#xA;&lt;p&gt;hledger is brought to you by &lt;a href=&#34;http://joyful.com&#34;&gt;Simon Michael&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/simonmichael/hledger/master/CREDITS.html&#34;&gt;140+ contributors&lt;/a&gt;, and the generous financial sponsors below.&lt;/p&gt; &#xA;&lt;p&gt;After enjoying some personal or organisational success with hledger, you might want to become one of them, to help support this work. It&#39;s easy! Please see &lt;a href=&#34;https://hledger.org/sponsor.html&#34;&gt;https://hledger.org/sponsor.html&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;!-- keep synced with sponsor.md: --&gt; &#xA;&lt;h3&gt;Organisational sponsors&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opencollective.com/hledger/organization/0/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/organization/0/avatar.svg?avatarHeight=200&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/organization/1/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/organization/1/avatar.svg?avatarHeight=200&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/organization/2/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/organization/2/avatar.svg?avatarHeight=200&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/organization/3/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/organization/3/avatar.svg?avatarHeight=200&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/organization/4/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/organization/4/avatar.svg?avatarHeight=200&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/organization/5/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/organization/5/avatar.svg?avatarHeight=200&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/organization/6/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/organization/6/avatar.svg?avatarHeight=200&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/organization/7/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/organization/7/avatar.svg?avatarHeight=200&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/organization/8/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/organization/8/avatar.svg?avatarHeight=200&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/organization/9/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/organization/9/avatar.svg?avatarHeight=200&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/organization/10/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/organization/10/avatar.svg?avatarHeight=200&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/organization/11/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/organization/11/avatar.svg?avatarHeight=200&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/organization/12/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/organization/12/avatar.svg?avatarHeight=200&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/organization/13/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/organization/13/avatar.svg?avatarHeight=200&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/organization/14/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/organization/14/avatar.svg?avatarHeight=200&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/organization/15/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/organization/15/avatar.svg?avatarHeight=200&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/organization/16/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/organization/16/avatar.svg?avatarHeight=200&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/organization/17/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/organization/17/avatar.svg?avatarHeight=200&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/organization/18/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/organization/18/avatar.svg?avatarHeight=200&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/organization/19/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/organization/19/avatar.svg?avatarHeight=200&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Individual sponsors&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opencollective.com/hledger/individual/0/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/individual/0/avatar.svg?avatarHeight=100&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/individual/1/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/individual/1/avatar.svg?avatarHeight=100&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/individual/2/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/individual/2/avatar.svg?avatarHeight=100&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/individual/3/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/individual/3/avatar.svg?avatarHeight=100&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/individual/4/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/individual/4/avatar.svg?avatarHeight=100&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/individual/5/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/individual/5/avatar.svg?avatarHeight=100&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/individual/6/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/individual/6/avatar.svg?avatarHeight=100&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/individual/7/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/individual/7/avatar.svg?avatarHeight=100&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/individual/8/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/individual/8/avatar.svg?avatarHeight=100&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/individual/9/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/individual/9/avatar.svg?avatarHeight=100&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/individual/10/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/individual/10/avatar.svg?avatarHeight=100&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/individual/11/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/individual/11/avatar.svg?avatarHeight=100&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/individual/12/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/individual/12/avatar.svg?avatarHeight=100&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/individual/13/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/individual/13/avatar.svg?avatarHeight=100&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/individual/14/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/individual/14/avatar.svg?avatarHeight=100&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/individual/15/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/individual/15/avatar.svg?avatarHeight=100&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/individual/16/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/individual/16/avatar.svg?avatarHeight=100&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/individual/17/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/individual/17/avatar.svg?avatarHeight=100&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/individual/18/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/individual/18/avatar.svg?avatarHeight=100&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/individual/19/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/individual/19/avatar.svg?avatarHeight=100&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/individual/20/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/individual/20/avatar.svg?avatarHeight=100&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/individual/21/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/individual/21/avatar.svg?avatarHeight=100&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/individual/22/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/individual/22/avatar.svg?avatarHeight=100&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/individual/23/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/individual/23/avatar.svg?avatarHeight=100&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/individual/24/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/individual/24/avatar.svg?avatarHeight=100&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/individual/25/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/individual/25/avatar.svg?avatarHeight=100&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/individual/26/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/individual/26/avatar.svg?avatarHeight=100&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/individual/27/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/individual/27/avatar.svg?avatarHeight=100&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/individual/28/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/individual/28/avatar.svg?avatarHeight=100&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/individual/29/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/individual/29/avatar.svg?avatarHeight=100&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/individual/30/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/individual/30/avatar.svg?avatarHeight=100&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/individual/31/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/individual/31/avatar.svg?avatarHeight=100&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/individual/32/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/individual/32/avatar.svg?avatarHeight=100&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/individual/33/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/individual/33/avatar.svg?avatarHeight=100&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/individual/34/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/individual/34/avatar.svg?avatarHeight=100&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/individual/35/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/individual/35/avatar.svg?avatarHeight=100&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/individual/36/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/individual/36/avatar.svg?avatarHeight=100&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/individual/37/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/individual/37/avatar.svg?avatarHeight=100&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/individual/38/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/individual/38/avatar.svg?avatarHeight=100&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/individual/39/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/individual/39/avatar.svg?avatarHeight=100&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;If your logo/avatar needs to be added, &lt;a href=&#34;mailto:webmaster@hledger.org&#34;&gt;let me know&lt;/a&gt;!&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>fossas/fossa-cli</title>
    <updated>2022-06-02T01:43:31Z</updated>
    <id>tag:github.com,2022-06-02:/fossas/fossa-cli</id>
    <link href="https://github.com/fossas/fossa-cli" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Fast, portable and reliable dependency analysis for any codebase. Supports license &amp; vulnerability scanning for large monoliths. Language-agnostic; integrates with 20+ build systems.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/fossas/fossa-cli/master/docs/assets/header.png&#34; alt=&#34;FOSSA&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;FOSSA CLI&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/fossas/fossa-cli/actions/workflows/build.yml&#34;&gt;&lt;img src=&#34;https://github.com/fossas/fossa-cli/actions/workflows/build-all.yml/badge.svg?sanitize=true&#34; alt=&#34;Build&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/fossas/fossa-cli/actions/workflows/dependency-scan.yml&#34;&gt;&lt;img src=&#34;https://github.com/fossas/fossa-cli/actions/workflows/dependency-scan.yml/badge.svg?sanitize=true&#34; alt=&#34;Dependency scan&#34;&gt;&lt;/a&gt; &#xA; &lt;!-- markdown-link-check-disable-next-line --&gt; &lt;a href=&#34;https://app.fossa.com/projects/custom%2B1%2Fgit%40github.com%3Afossas%2Ffossa-cli?ref=badge_shield&#34;&gt;&lt;img src=&#34;https://app.fossa.com/api/projects/custom%2B1%2Fgit%40github.com%3Afossas%2Ffossa-cli.svg?type=shield&#34; alt=&#34;FOSSA Status&#34;&gt;&lt;/a&gt; &#xA; &lt;!-- markdown-link-check-disable-next-line --&gt; &lt;a href=&#34;https://github.com/fossas/fossa-cli/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/downloads/fossas/fossa-cli/total.svg?sanitize=true&#34; alt=&#34;FOSSA Downloads&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Fossa CLI is a zero-configuration polyglot dependency analysis tool. You can point fossa CLI at any codebase or build, and it will automatically detect dependencies being used by your project.&lt;/p&gt; &#xA;&lt;p&gt;Fossa CLI currently supports automatic dependency analysis for &lt;a href=&#34;https://raw.githubusercontent.com/fossas/fossa-cli/master/docs/references/strategies/README.md#supported-languages&#34;&gt;many different build tools and languages&lt;/a&gt;. It also has limited support for vendored dependency detection, container scanning, and system dependency detection. These features are still a work in progress. Our goal is to make the FOSSA CLI a universal tool for dependency analysis.&lt;/p&gt; &#xA;&lt;p&gt;Fossa CLI integrates with &lt;a href=&#34;https://fossa.com&#34;&gt;FOSSA&lt;/a&gt; for dependency analysis, license scanning, vulnerability scanning, attribution report generation, and more.&lt;/p&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fossas/fossa-cli/master/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fossas/fossa-cli/master/#getting-started&#34;&gt;Getting Started&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fossas/fossa-cli/master/#user-manual&#34;&gt;User Manual&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fossas/fossa-cli/master/#reporting-issues&#34;&gt;Reporting Issues&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fossas/fossa-cli/master/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Using the install script&lt;/h3&gt; &#xA;&lt;p&gt;FOSSA CLI provides an install script that downloads the latest release from GitHub Releases for your computer&#39;s architecture. You can see the source code and flags at &lt;a href=&#34;https://raw.githubusercontent.com/fossas/fossa-cli/master/install-latest.sh&#34;&gt;&lt;code&gt;install-latest.sh&lt;/code&gt;&lt;/a&gt; for Mac and Linux or &lt;a href=&#34;https://raw.githubusercontent.com/fossas/fossa-cli/master/install-latest.ps1&#34;&gt;&lt;code&gt;install-latest.ps1&lt;/code&gt;&lt;/a&gt; for Windows.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; You may need to add the downloaded executable to your &lt;code&gt;$PATH&lt;/code&gt;. The installer script will output the installed path of the executable. You can also use &lt;code&gt;-b&lt;/code&gt; to pick the installation directory when using &lt;code&gt;install-latest.sh&lt;/code&gt; (see &lt;a href=&#34;https://raw.githubusercontent.com/fossas/fossa-cli/master/install-latest.sh&#34;&gt;the &lt;code&gt;install-latest.sh&lt;/code&gt; source code&lt;/a&gt; for details).&lt;/p&gt; &#xA;&lt;h4&gt;macOS or 64-bit Linux&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -H &#39;Cache-Control: no-cache&#39; https://raw.githubusercontent.com/fossas/fossa-cli/master/install-latest.sh | bash&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Windows with Powershell&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;Set-ExecutionPolicy Bypass -Scope Process -Force; iex  ((New-Object System.Net.WebClient).DownloadString(&#39;https://raw.githubusercontent.com/fossas/fossa-cli/master/install-latest.ps1&#39;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;!-- markdown-link-check-disable-next-line --&gt; &#xA;&lt;p&gt;Alternatively, install using &lt;a href=&#34;https://scoop.sh/&#34;&gt;Scoop&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;scoop install fossa&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Installing manually&lt;/h3&gt; &#xA;&lt;p&gt;You can install the FOSSA CLI releases manually by downloading the latest release from &lt;a href=&#34;https://github.com/fossas/fossa-cli/releases&#34;&gt;GitHub Releases&lt;/a&gt; and extracting the binary to your &lt;code&gt;$PATH&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To install FOSSA CLI 1.x with install script please refer to: &lt;a href=&#34;https://raw.githubusercontent.com/fossas/fossa-cli/master/docs/install-v1.md&#34;&gt;installing 1.x guide&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;h3&gt;Integrating your project with FOSSA&lt;/h3&gt; &#xA;&lt;h4&gt;TL;DR, Linux, Mac, *nix-like&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Download FOSSA.&#xA;curl -H &#39;Cache-Control: no-cache&#39; https://raw.githubusercontent.com/fossas/fossa-cli/master/install-latest.sh | bash&#xA;&#xA;# Set your API key. Get this from the FOSSA web application.&#xA;export FOSSA_API_KEY=XXXX&#xA;&#xA;# Run an analysis in your project&#39;s directory.&#xA;cd $MY_PROJECT_DIR&#xA;fossa analyze&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;TL;DR, Windows&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;# Download FOSSA.&#xA;Set-ExecutionPolicy Bypass -Scope Process -Force; iex  ((New-Object System.Net.WebClient).DownloadString(&#39;https://raw.githubusercontent.com/fossas/fossa-cli/master/install-latest.ps1&#39;))&#xA;&#xA;# Set your API key. Get this from the FOSSA web application.&#xA;$env:FOSSA_API_KEY=XXXX&#xA;&#xA;# Run an analysis in your project&#39;s directory.&#xA;cd $MY_PROJECT_DIR&#xA;fossa analyze&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Installing FOSSA CLI&lt;/h4&gt; &#xA;&lt;p&gt;Follow &lt;a href=&#34;https://raw.githubusercontent.com/fossas/fossa-cli/master/#installation&#34;&gt;the installation instructions&lt;/a&gt; above to install the FOSSA CLI. Once installed, you should have a new binary named &lt;code&gt;fossa&lt;/code&gt; available on your &lt;code&gt;$PATH&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Generating an API key&lt;/h4&gt; &#xA;&lt;p&gt;To get started with integrating your project into FOSSA, you&#39;ll need to &lt;a href=&#34;https://docs.fossa.com/docs/api-reference&#34;&gt;generate an API key&lt;/a&gt;. You&#39;ll get this API key from the FOSSA web application (&lt;a href=&#34;https://app.fossa.com&#34;&gt;app.fossa.com&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;Once you have your API key:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;export FOSSA_API_KEY=XXXX # Use your API key here.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Running an analysis&lt;/h4&gt; &#xA;&lt;p&gt;Now we can run an analysis. To run an analysis, all you need to do is navigate to your project&#39;s directory and run &lt;code&gt;fossa analyze&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; While &lt;code&gt;fossa&lt;/code&gt; will try its best to report available results for any kind of project, you&#39;ll get the best results by running in a directory with a working project build. A working build lets us integrate directly with your build tool to identify dependencies, instead of trying to infer dependencies from your source code.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ cd $MY_PROJECT_DIR # Use your actual project location here.&#xA;&#xA;$ fossa analyze&#xA;[ INFO] Using project name: `https://github.com/fossas/fossa-cli`&#xA;[ INFO] Using revision: `09ca72e398bb32747b27c0f43731678fa42c3c26`&#xA;[ INFO] Using branch: `No branch (detached HEAD)`&#xA;[ INFO] ============================================================&#xA;&#xA;      View FOSSA Report:&#xA;      https://app.fossa.com/projects/custom+1%2fgithub.com%2ffossas%2ffossa-cli/refs/branch/master/09ca72e398bb32747b27c0f43731678fa42c3c26&#xA;&#xA;  ============================================================&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Viewing your results&lt;/h4&gt; &#xA;&lt;p&gt;Once an analysis has been uploaded, you can view your results in the FOSSA web application. You can see your analysis by using the link provided as output by &lt;code&gt;fossa analyze&lt;/code&gt;, or by navigating to your project and revision in the FOSSA web application.&lt;/p&gt; &#xA;&lt;h4&gt;What next?&lt;/h4&gt; &#xA;&lt;p&gt;Now that your analysis is complete, there are a couple things you might want to do after an initial integration:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Double-check your results.&lt;/strong&gt; Some analysis methods may produce partial or unexpected results depending on what information was available when you ran the analysis. If something seems wrong, &lt;a href=&#34;https://raw.githubusercontent.com/fossas/fossa-cli/master/docs/walkthroughs/debugging-your-integration.md&#34;&gt;our debugging guide&lt;/a&gt; can help you diagnose and debug your integration.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Scan for issues and generate a compliance report.&lt;/strong&gt; Once your analysis is ready, we&#39;ll automatically queue an issue scan and report the results in the web application. Once an issue scan is complete, you can also &lt;a href=&#34;https://docs.fossa.com/docs/running-a-scan&#34;&gt;generate a report&lt;/a&gt; from the web application.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Set up FOSSA in your CI.&lt;/strong&gt; You can also use your issue scan results as inputs to CI scripts. For GitHub repositories, you can use FOSSA&#39;s &lt;a href=&#34;https://docs.fossa.com/docs/automatic-updates#pull-request--commit-statuses-github-only&#34;&gt;native GitHub integration&lt;/a&gt; to report a status check on your PRs. For other CI integrations, you can also &lt;a href=&#34;https://raw.githubusercontent.com/fossas/fossa-cli/master/docs/references/subcommands/test.md&#34;&gt;use &lt;code&gt;fossa test&lt;/code&gt;&lt;/a&gt; to get programmatic issue status in CI.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;User Manual&lt;/h2&gt; &#xA;&lt;p&gt;For most users, the FOSSA CLI will work out-of-the-box without any configuration. Just get an API key, run &lt;code&gt;fossa analyze&lt;/code&gt;, and view your results in the FOSSA web application.&lt;/p&gt; &#xA;&lt;p&gt;Users who need advanced customization or features should see the &lt;a href=&#34;https://raw.githubusercontent.com/fossas/fossa-cli/master/docs/README.md&#34;&gt;User Manual&lt;/a&gt;. Some common topics of interest include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fossas/fossa-cli/master/docs/walkthroughs/debugging-your-integration.md&#34;&gt;Debugging your integration&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fossas/fossa-cli/master/docs/features/vendored-dependencies.md&#34;&gt;Specifying vendored dependencies&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fossas/fossa-cli/master/docs/features/manual-dependencies.md&#34;&gt;Adding manual dependencies&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Reporting Issues&lt;/h2&gt; &#xA;&lt;p&gt;If you&#39;ve found a bug or need support, the best way to get support is to email &lt;a href=&#34;mailto:support@fossa.com&#34;&gt;support@fossa.com&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Make sure to include reproduction steps and any relevant project files (e.g. &lt;code&gt;pom.xml&lt;/code&gt;s, &lt;code&gt;package.json&lt;/code&gt;s, etc.). Including the output from &lt;code&gt;fossa analyze --debug&lt;/code&gt; in the email as well as any relevant fossa files (&lt;code&gt;fossa-deps.json&lt;/code&gt;, &lt;code&gt;.fossa.yml&lt;/code&gt;) will help expedite a solution.&lt;/p&gt; &#xA;&lt;p&gt;We&#39;ll try to respond to issues opened in this repository on a best-effort basis, but we mostly provide support via our &lt;a href=&#34;mailto:support@fossa.com&#34;&gt;&lt;code&gt;support@&lt;/code&gt;&lt;/a&gt; email.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;If you&#39;re interested in contributing, check out our &lt;a href=&#34;https://raw.githubusercontent.com/fossas/fossa-cli/master/docs/contributing/README.md&#34;&gt;contributor documentation&lt;/a&gt;. PRs are welcome!&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>wasp-lang/wasp</title>
    <updated>2022-06-02T01:43:31Z</updated>
    <id>tag:github.com,2022-06-02:/wasp-lang/wasp</id>
    <link href="https://github.com/wasp-lang/wasp" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A programming language that understands what a web app is.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img height=&#34;80px&#34; src=&#34;https://user-images.githubusercontent.com/1536647/77317442-78625700-6d0b-11ea-9822-0fb21e557e87.png&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; A programming language that understands what a web app is. &lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/wasp-lang/wasp/raw/main/LICENSE&#34;&gt;&lt;img alt=&#34;license&#34; src=&#34;https://img.shields.io/github/license/wasp-lang/wasp&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/wasp-lang/wasp/search?l=haskell&#34;&gt;&lt;img alt=&#34;language&#34; src=&#34;https://img.shields.io/badge/language-Haskell-purple.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/wasp-lang/wasp/actions&#34;&gt;&lt;img alt=&#34;build status&#34; src=&#34;https://img.shields.io/github/workflow/status/wasp-lang/wasp/CI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/rzdnErX&#34;&gt;&lt;img alt=&#34;discord&#34; src=&#34;https://img.shields.io/discord/686873244791210014?label=chat%20@%20discord&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p align=&#34;center&#34;&gt; {= &lt;a href=&#34;https://wasp-lang.notion.site/Wasp-Careers-59fd1682c80d446f92be5fa65cc17672&#34;&gt;We are hiring!&lt;/a&gt; =} &lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://wasp-lang.dev&#34;&gt;&lt;strong&gt;Project page&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://wasp-lang.dev/docs&#34;&gt;&lt;strong&gt;Docs&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;Wasp (&lt;strong&gt;W&lt;/strong&gt;eb &lt;strong&gt;A&lt;/strong&gt;pplication &lt;strong&gt;Sp&lt;/strong&gt;ecification Language) is a declarative DSL (domain-specific language) for developing, building and deploying modern full-stack web apps with less code.&lt;/p&gt; &#xA;&lt;p&gt;Concepts such as &lt;em&gt;app&lt;/em&gt;, &lt;em&gt;page&lt;/em&gt;, &lt;em&gt;user&lt;/em&gt;, &lt;em&gt;login&lt;/em&gt;, &lt;em&gt;frontend&lt;/em&gt;, &lt;em&gt;production&lt;/em&gt;, etc. are baked into the language, bringing a new level of expressiveness and allowing you to get more work done with fewer lines of code.&lt;/p&gt; &#xA;&lt;p&gt;While describing high-level features with Wasp, you still write the rest of your logic in your favorite technologies (currently React, NodeJS, Prisma).&lt;/p&gt; &#xA;&lt;p&gt;NOTE: Wasp is in alpha and is therefore likely to change a lot, have bugs and miss important features.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// file: main.wasp&#xA;&#xA;app TodoApp {&#xA;  title: &#34;Todo App&#34;&#xA;}&#xA;&#xA;route RootRoute { path: &#34;/&#34;, to: MainPage }&#xA;page MainPage {&#xA;  component: import Main from &#34;@ext/pages/Main.js&#34; // Importing React component.&#xA;}&#xA;&#xA;query getTasks {&#xA;  fn: import { getTasks } from &#34;@ext/queries.js&#34;, // Importing NodeJS code.&#xA;  entities: [Task]&#xA;}&#xA;&#xA;entity Task {=psl&#xA;    id          Int     @id @default(autoincrement())&#xA;    description String&#xA;    isDone      Boolean @default(false)&#xA;psl=}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Source files (&lt;code&gt;.wasp&lt;/code&gt;, &lt;code&gt;.js(x)&lt;/code&gt;, &lt;code&gt;.css&lt;/code&gt;, ...) are compiled by &lt;code&gt;waspc&lt;/code&gt; (Wasp compiler) into the web technology stack of your choice (currently React + NodeJS/ExpressJS + Prisma).&lt;/p&gt; &#xA;&lt;p&gt;&lt;span&gt;▶&lt;/span&gt; Check out &lt;a href=&#34;https://raw.githubusercontent.com/wasp-lang/wasp/main/examples/tutorials/TodoApp&#34;&gt;TodoApp example&lt;/a&gt; for the complete code example. &lt;span&gt;◀&lt;/span&gt;&lt;/p&gt; &#xA;&lt;p&gt;Why is Wasp awesome:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Quick start&lt;/strong&gt;: Due to its expressiveness, you can create and deploy a production-ready web app from scratch with very few lines of concise, consistent, declarative code.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Flexible&lt;/strong&gt;: When you need more control than Wasp offers, you can write code in existing technologies such as js/html/css/... and combine it with Wasp code!&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;No lock-in&lt;/strong&gt;: If Wasp becomes too limiting for you, simply eject and continue with the generated source code, which is human-readable.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For more information about Wasp, check &lt;a href=&#34;https://wasp-lang.dev/docs&#34;&gt;&lt;strong&gt;docs&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Get started&lt;/h1&gt; &#xA;&lt;p&gt;Run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;curl -sSL https://get.wasp-lang.dev/installer.sh | sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;to install Wasp on OSX/Linux. From there, just follow the instructions to run your first app in less then a minute!&lt;/p&gt; &#xA;&lt;p&gt;For more details (including installing on Windows) check out &lt;a href=&#34;https://wasp-lang.dev/docs&#34;&gt;the docs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;This repository&lt;/h1&gt; &#xA;&lt;p&gt;This is the main repo of the Wasp universe, containing core code (mostly &lt;code&gt;waspc&lt;/code&gt; - Wasp compiler) and the supporting materials.&lt;/p&gt; &#xA;&lt;h1&gt;Project status&lt;/h1&gt; &#xA;&lt;p&gt;Currently, Wasp is in alpha and has enough features so that you can develop a basic web app in it! You might find that it misses flexibility in some places or that some bigger features are missing, but the basics are there and we are now adding on top of them. In the case you get stuck, you can take the generated code and continue with it. As Wasp grows further, it should allow the development of web apps of increasing complexity, without the need to eject!&lt;/p&gt; &#xA;&lt;p&gt;While the idea is to support multiple web tech stacks in the future, right now we are focusing on the specific stack: React + react-query, NodeJS + ExpressJS, Prisma. We might yet change that as time goes, taking trends into account, but for now, this is serving us well for the purpose of developing compiler and language.&lt;/p&gt; &#xA;&lt;h1&gt;Contributing&lt;/h1&gt; &#xA;&lt;p&gt;Any way you want to contribute is a good way :)!&lt;/p&gt; &#xA;&lt;p&gt;The best place to start is to check out &lt;a href=&#34;https://raw.githubusercontent.com/wasp-lang/wasp/main/waspc/&#34;&gt;waspc/&lt;/a&gt;, where you can find detailed steps for the first time contributors + technical details about the Wasp compiler.&lt;/p&gt; &#xA;&lt;p&gt;Even if you don&#39;t plan to submit any code, just joining the discussion on discord &lt;a href=&#34;https://discord.gg/rzdnErX&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/686873244791210014?label=chat%20on%20discord&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt; and giving your feedback is already great and helps a lot (motivates us and helps us figure out how to shape Wasp)!&lt;/p&gt; &#xA;&lt;p&gt;You can also:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;span&gt;⭐&lt;/span&gt; Star this repo to show your interest/support.&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;📫&lt;/span&gt; Stay updated by subscribing to our &lt;a href=&#34;https://wasp-lang.dev#signup&#34;&gt;email list&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Careers&lt;/h1&gt; &#xA;&lt;p&gt;Check our &lt;a href=&#34;https://wasp-lang.notion.site/Wasp-Careers-59fd1682c80d446f92be5fa65cc17672&#34;&gt;careers&lt;/a&gt; page for a list of currently opened positions!&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>commercialhaskell/stack</title>
    <updated>2022-06-02T01:43:31Z</updated>
    <id>tag:github.com,2022-06-02:/commercialhaskell/stack</id>
    <link href="https://github.com/commercialhaskell/stack" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The Haskell Tool Stack&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;The Haskell Tool Stack&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/commercialhaskell/stack/workflows/Unit%20tests/badge.svg?sanitize=true&#34; alt=&#34;Unit tests&#34;&gt; &lt;img src=&#34;https://github.com/commercialhaskell/stack/workflows/Integration%20tests/badge.svg?sanitize=true&#34; alt=&#34;Integration tests&#34;&gt; &lt;a href=&#34;https://github.com/commercialhaskell/stack/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/commercialhaskell/stack.svg?sanitize=true&#34; alt=&#34;Release&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Stack is a cross-platform program for developing Haskell projects. It is intended for Haskellers both new and experienced.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;http://haskellstack.org&#34;&gt;haskellstack.org&lt;/a&gt; or the &lt;a href=&#34;https://raw.githubusercontent.com/commercialhaskell/stack/master/doc&#34;&gt;doc&lt;/a&gt; directory for more information.&lt;/p&gt; &#xA;&lt;h3&gt;Community&lt;/h3&gt; &#xA;&lt;p&gt;You can participate with the Stack community in the following areas:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://join.slack.com/t/haskell-foundation/shared_invite/zt-mjh76fw0-CEjg2NbyVE8rVQDvR~0F4A&#34;&gt;Haskell Foundation Slack&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;#stack-users&lt;/code&gt; for general Stack discussion&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;#stack-collaborators&lt;/code&gt; for working on the Stack code base&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://groups.google.com/g/haskell-stack&#34;&gt;Stack Google Group mailing list&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://discourse.haskell.org/&#34;&gt;Haskell Community Discourse&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>digitallyinduced/ihp</title>
    <updated>2022-06-02T01:43:31Z</updated>
    <id>tag:github.com,2022-06-02:/digitallyinduced/ihp</id>
    <link href="https://github.com/digitallyinduced/ihp" rel="alternate"></link>
    <summary type="html">&lt;p&gt;🔥 The fastest way to build type safe web apps. IHP is a new batteries-included web framework optimized for longterm productivity and programmer happiness&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://ihp.digitallyinduced.com/&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/digitallyinduced/ihp/master/Guide/images/ihp-logo-readme.svg?sanitize=true&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img alt=&#34;MIT License&#34; src=&#34;https://img.shields.io/github/license/digitallyinduced/ihp&#34;&gt; &lt;a href=&#34;https://twitter.com/digitallyinduce&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://img.shields.io/twitter/follow/digitallyinduce&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://ihp.digitallyinduced.com/&#34; target=&#34;_blank&#34;&gt; IHP Website &lt;/a&gt; &lt;/p&gt; &#xA;&lt;h1&gt;About IHP&lt;/h1&gt; &#xA;&lt;p&gt;IHP is a modern batteries-included haskell web framework, built on top of Haskell and Nix.&lt;/p&gt; &#xA;&lt;p&gt;We believe that functional programing is the future of software development and want to make functional programing with haskell and nix available to anyone. We try to offer a solution which can be used by developers who have not worked with haskell yet. IHP comes with everything you need to build great web applications with haskell and nix. We have made a lot of pragmatic decision to get you started faster. This way you can just pick up haskell along the way :-)&lt;/p&gt; &#xA;&lt;p&gt;IHP stands for Integrated Haskell Platform.&lt;/p&gt; &#xA;&lt;h2&gt;What makes it different?&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Type-safe and reliable:&lt;/strong&gt; With Haskell and Nix we use the most reliable technologies available, to make sure your application will never crash because of Null Pointer Exceptions.&lt;/p&gt; &#xA;&lt;p&gt;If you like TypeScript, you will love IHP.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Live Reload:&lt;/strong&gt; While haskell is a compiled language, the built-in dev server automatically reloads your code changes using the fastest way possible. Changes are reflected instantly. Just like good old PHP.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/digitallyinduced/ihp/raw/master/Guide/images/IHP%20Live%20Reloading%20Demo.gif?raw=true&#34; alt=&#34;Live Reload&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://youtu.be/nTjjDo57B8g&#34;&gt;Watch it in action!&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Accessible:&lt;/strong&gt; Setup of the fully-managed dev environment takes just 5 minutes. All dependencies (even database and compiler) are managed using the nix package manager. This means dependency problems just cannot occur anymore. Also everything is guaranteed to be same for all developers in your team.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;No Haskell Experience required:&lt;/strong&gt; Code Generators will help you to quickly build things even when you have no professional haskell experience yet. Pick up haskell by building real world applications.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Integrated Dev Tooling:&lt;/strong&gt; To speed up your development process, IHP comes with a full set of web based dev tools. Including: a database schema designer, a web-based code generator, a web-based repl, ...&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Major Operating Systems Supported:&lt;/strong&gt; Windows (via Linux Subsystem), macOS, NixOS, Debian, Ubuntu&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;HSX:&lt;/strong&gt; Like React&#39;s JSX. Write html code in your haskell files. This will be transformed to actual type-checked haskell code at compile time.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Auto Refresh:&lt;/strong&gt; Re-render views in the background when the underlying data changes. This is useful when you want your views to always reflect the live database state. Auto Refresh can be an easy replacement for manually polling for changes using AJAX.&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s a view using Auto Refresh, there&#39;s no app specific JS code here. All view updates are triggered by the server:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/digitallyinduced/ihp/raw/master/Guide/images/IHP%20Cloud%20Auto%20Refresh.gif?raw=true&#34; alt=&#34;Auto Refresh&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Auto Refresh can be enabled for IHP views with a single line of code.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://twitter.com/digitallyinduce/status/1312017800223956992&#34;&gt;Watch it in action!&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Longterm Roadmap&lt;/strong&gt; Lots of frameworks are already gone a year after launch. Especially in the fast moving JS world. But don&#39;t worry about IHP. We have been using it at digitally induced since 2017. It&#39;s actively used by us and our friends and partners. Even without external contributors we will build new features and do periodic maintenance releases in the future. We have big plans for IHP and as a profitable and independent software company we have the ability to actually execute them over the longterm.&lt;/p&gt; &#xA;&lt;h2&gt;Reviews&lt;/h2&gt; &#xA;&lt;p&gt;Here&#39;s what other people are saying about IHP:&lt;/p&gt; &#xA;&lt;blockquote&gt;&#xA;  IHP is the best web framework experience I have had. I think a lot of aspiring haskeller&#39;s will have worked their way through a text like Learn You a Haskell For Great Good or similar and then be looking to fool around with an actual project. IHP uses nix to cut out all the work of setting up ghc/stack/cabal which can be quite tricky for a beginner, it has just added haskell language server integration, it starts your postgres servers, it spares you from having to remember your SQL syntax, and means you can start writing haskell code instantly while getting immediate feedback on your hacking from GHCi and visually through the live reloading of the web app in your browser. &#xA; &lt;p&gt;I&#39;ve found the [hsx||] quasiquotes quite fun to work with and type safety has sped up development by preventing bugs that can easily crop up when you&#39;re linking forms to databases.&lt;/p&gt; &#xA; &lt;p&gt;I like the design choices in IHP, and for me, at the moment, I like the focus on server side web app development, which encourages you to be more sparing/judicious in the use of javascript.&lt;/p&gt; &#xA; &lt;p&gt;With IHP being opinionated about the models or views and routing it means I can focus on integrating some of the other really cool haskell libraries that exist into web apps. (I&#39;m also trying to keep a log of my experiences here on an &lt;a href=&#34;https://ihpcafe.ihpapp.com&#34;&gt;https://ihpcafe.ihpapp.com&lt;/a&gt; if you want to read along with someone figuring out function type signatures ;) )&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://news.ycombinator.com/item?id=24817368&#34;&gt;montmorency88 on HN&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt;&#xA;  I have been learning Haskell through IHP. It&#39;s the best and actually simplest web framework I have ever tried. The developer experience is the best I ever had for a MVC-style framework. And I got to learn Haskell without banging my head too much against the wall. Really enjoyed it :) &#xA; &lt;p&gt;I really needed something like IHP to get started with Haskell. It&#39;s fun and easy and the documentation is very easy to follow.&lt;/p&gt; &#xA; &lt;p&gt;I see some argue that they wish to make more custom choices regarding the setup. That is precisely what I don&#39;t want and that&#39;s why IHP is a great fit for me.&lt;/p&gt; &#xA; &lt;p&gt;In terms of simplicity I think the choice of supporting only Nix and Postgres actually are strengths at this point. That lets them streamline the development of the framework without supporting the minor preferences of every individual. And these choices should work really well for most web developers.&lt;/p&gt; &#xA; &lt;p&gt;Some may disagree on this, and maybe IHP is not for them, but I don&#39;t think it shouldn&#39;t discourage those who considers trying it out and form their own opinion.&lt;/p&gt; &#xA; &lt;p&gt;I was prepared for great hardships learning Haskell as most of the resources are very academic and I&#39;m mainly just a simple application builder. IHP was just what I needed to fill that gap, and it made it really fun :)&lt;/p&gt; &#xA; &lt;p&gt;I am tweeting about the whole thing, coding Haskell for 100 days: &lt;a href=&#34;https://twitter.com/larsparsfromage&#34;&gt;https://twitter.com/larsparsfromage&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://news.ycombinator.com/item?id=24829215&#34;&gt;kodefant on HN&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt;&#xA;  IHP is supposed to become the Django/Rails/Phoenix of Haskell. &#xA; &lt;p&gt;I’ve been using Django professionally for since 2013, but have started using IHP a couple of weeks ago. It’s still quite early but with surprisingly few rough edges, i.e. the developer ergonomics are much better than I expected. It has great documentation that is improving rapidly (as opposed to many other Haskell libraries, which provide little more than API docs or even just the typed function definitions) and offers a refreshing take on database management and migrations.&lt;/p&gt; &#xA; &lt;p&gt;Some of its killer features:&lt;/p&gt; &#xA; &lt;p&gt;HSX, a JSX-like template language that looks like HTML while providing type safety&lt;/p&gt; &#xA; &lt;p&gt;Auto live reloading without the need to setup anything&lt;/p&gt; &#xA; &lt;p&gt;Documentation with examples: it lets you query the database without learning about monads&lt;/p&gt; &#xA; &lt;p&gt;it defines |&amp;gt; for you ;-)&lt;/p&gt; &#xA; &lt;p&gt;type-safe, composable SQL queries&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://lobste.rs/s/8pieht/ihp_modern_batteries_included_web#c_6lroyn&#34;&gt;hendi on Lobsters&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;There&#39;s more on the IHP website.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://youtu.be/UbDtS_mUMpI&#34;&gt;First: Watch the introduction video to see how it generally works&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;After that:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=PLl9Sjq6Nzc&amp;amp;list=PLenFm8BWuKlS0IaE31DmKB_PbkMLmwWmG&amp;amp;index=1&#34;&gt;If you like videos, check out IHP Casts!&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://ihp.digitallyinduced.com/Guide/&#34;&gt;You can also follow the written Guide to build your first project!&lt;/a&gt; 🚀&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://eepurl.com/g51zq1&#34;&gt;📧 To stay in the loop, subscribe to the IHP release emails.&lt;/a&gt; Or follow &lt;a href=&#34;https://twitter.com/digitallyinduce&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/follow/digitallyinduce&#34; alt=&#34;Follow digitally induced on Twitter&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://ihp.digitallyinduced.com/Guide/installation.html&#34;&gt;See the documentation for installation instructions&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Community&lt;/h2&gt; &#xA;&lt;p&gt;Questions, or need help with haskell type errors? &lt;a href=&#34;https://ihp.digitallyinduced.com/Slack&#34;&gt;Join our Slack Community&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://forum.ihpapp.com/&#34;&gt;Also check out the IHP Forum!&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;We are happy to merge your pull requests!😄&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/digitallyinduced/ihp/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; for more info.&lt;/p&gt; &#xA;&lt;h2&gt;Releases&lt;/h2&gt; &#xA;&lt;p&gt;During beta, there is a new release every two weeks on Friday. You can find steps to update to the latest version &lt;a href=&#34;https://github.com/digitallyinduced/ihp/releases&#34;&gt;in the release notes&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://ihp.digitallyinduced.com/&#34;&gt;📧 Subscribe to the IHP release emails to stay in the loop.&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>khibino/haskell-invertible-syntax-parsec</title>
    <updated>2022-06-02T01:43:31Z</updated>
    <id>tag:github.com,2022-06-02:/khibino/haskell-invertible-syntax-parsec</id>
    <link href="https://github.com/khibino/haskell-invertible-syntax-parsec" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Turn Parsec type into instance of invertible-syntax-poly.&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>runtimeverification/haskell-backend</title>
    <updated>2022-06-02T01:43:31Z</updated>
    <id>tag:github.com,2022-06-02:/runtimeverification/haskell-backend</id>
    <link href="https://github.com/runtimeverification/haskell-backend" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The symbolic execution engine powering the K Framework&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;The Kore Language&lt;/h1&gt; &#xA;&lt;p&gt;Kore is the &#34;core&#34; part of the K framework.&lt;/p&gt; &#xA;&lt;h2&gt;What is Kore all about?&lt;/h2&gt; &#xA;&lt;p&gt;In short, we need a formal semantics of K. In K, users can define formal syntax and semantics of programming languages as K definitions, and automatically obtain parsers, interpreters, compilers, and various verification tools for their languages. Therefore K is a language-independent framework.&lt;/p&gt; &#xA;&lt;p&gt;Thanks to years of research in matching logic and reachability logic, we know that all K does can be nicely formalized as logic reasoning in matching logic. To give K a formal semantics, we only need to formally specify the underlying matching logic theories with which K does reasoning. In practice, these underlying theories are complex and often infinite, and it is tricky to specify infinite theories without a carefully designed formal specification language. And Kore is such a language.&lt;/p&gt; &#xA;&lt;h2&gt;Structure of this project&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://github.com/runtimeverification/haskell-backend/tree/master/docs&#34;&gt;docs&lt;/a&gt; directory contains a collection of documents that describe the mathematical foundation of Kore and a BNF grammar that defines the syntax of Kore language. See &lt;a href=&#34;https://github.com/runtimeverification/haskell-backend/raw/master/docs/introduction.md&#34;&gt;/docs/introduction.md&lt;/a&gt; for an overview of the components of Kore.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;kore&lt;/code&gt; project is an implementation in Haskell of a Kore parser and symbolic execution engine, for use with the &lt;a href=&#34;https://github.com/runtimeverification/k&#34;&gt;K Framework&lt;/a&gt; as a backend.&lt;/p&gt; &#xA;&lt;h2&gt;Building&lt;/h2&gt; &#xA;&lt;p&gt;Besides &lt;a href=&#34;https://git-scm.com/&#34;&gt;git&lt;/a&gt;, you will need &lt;a href=&#34;https://www.haskellstack.org/&#34;&gt;stack&lt;/a&gt; or &lt;a href=&#34;https://haskell.org/cabal&#34;&gt;cabal&lt;/a&gt; to build &lt;code&gt;kore&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;stack build kore&#xA;# or&#xA;cabal build kore&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If using &lt;code&gt;cabal&lt;/code&gt;, version 3.0 or later is recommended.&lt;/p&gt; &#xA;&lt;p&gt;Using &lt;a href=&#34;https://www.gnu.org/software/make/&#34;&gt;make&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;make all # builds all binaries&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;macOS&lt;/h3&gt; &#xA;&lt;p&gt;Currently, LLVM 13 from Homebrew installs an incompatible version of &lt;code&gt;install_name_tool&lt;/code&gt;, which breaks the Haskell backend build on macOS. To resolve this, uninstall &lt;code&gt;llvm&lt;/code&gt; and install &lt;code&gt;llvm@12&lt;/code&gt; from Homebrew, then build from scratch.&lt;/p&gt; &#xA;&lt;h4&gt;Apple Silicon&lt;/h4&gt; &#xA;&lt;p&gt;If you are building the project on an Apple Silicon machine, a temporary workaround is necessary to install a new enough version of GHC with support for ARM64 Darwin. To do so, follow the instructions in &lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/5562#issuecomment-913015550&#34;&gt;this comment&lt;/a&gt;. The command-line flags for &lt;code&gt;stack&lt;/code&gt; should then be specified &lt;em&gt;everywhere&lt;/em&gt; an execution of &lt;code&gt;stack&lt;/code&gt; is required. For &lt;code&gt;make&lt;/code&gt; invocations in this project, set the environment variable &lt;code&gt;STACK_BUILD_OPTS=--compiler ghc-8.10.7 --system-ghc&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;When &lt;code&gt;stack&lt;/code&gt; and &lt;code&gt;ghc&lt;/code&gt; merge their full support for ARM64 Darwin in future releases, it should be possible to remove this workaround.&lt;/p&gt; &#xA;&lt;h2&gt;Developing&lt;/h2&gt; &#xA;&lt;p&gt;Developers will require all the dependencies listed above, in addition to the requirements and recommendations below.&lt;/p&gt; &#xA;&lt;h3&gt;Required dependencies&lt;/h3&gt; &#xA;&lt;p&gt;For integration testing, we require:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;GNU &lt;a href=&#34;https://www.gnu.org/software/make/&#34;&gt;make&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;The &lt;a href=&#34;https://github.com/runtimeverification/k&#34;&gt;K Framework&lt;/a&gt; frontend.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Instead of installing the frontend, you can use our &lt;code&gt;Dockerfile&lt;/code&gt; to run the integration tests inside a container. Use &lt;code&gt;docker.sh&lt;/code&gt; to run commands inside the container:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./docker/build.sh  # run once when dependencies change&#xA;./docker/run.sh make all  # build the backend&#xA;./docker/run.sh make test  # run all tests&#xA;./docker/run.sh make -C test/imp test  # run all tests in test/imp&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Recommended dependencies&lt;/h3&gt; &#xA;&lt;p&gt;For setting up a development environment, we recommend:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/direnv/direnv&#34;&gt;direnv&lt;/a&gt; to make the project&#39;s tools available in shells and editors.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/haskell/haskell-language-server&#34;&gt;haskell-language-server&lt;/a&gt;, a &lt;a href=&#34;https://langserver.org/&#34;&gt;language server&lt;/a&gt; for Haskell that is compatible with most editors. See instructions &lt;a href=&#34;https://raw.githubusercontent.com/runtimeverification/haskell-backend/master/#running-a-language-server&#34;&gt;below&lt;/a&gt; to run a language server.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ndmitchell/hlint&#34;&gt;hlint&lt;/a&gt; for compliance with project guidelines.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/eradman/entr&#34;&gt;entr&lt;/a&gt; and &lt;a href=&#34;https://github.com/sharkdp/fd&#34;&gt;fd&lt;/a&gt; for running &lt;code&gt;./entr.sh&lt;/code&gt; to keep important files up-to-date.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;We recommend to keep &lt;code&gt;./entr.sh&lt;/code&gt; running in the background to keep important files (such as package descriptions) up-to-date, especially if the developer is using Cabal.&lt;/p&gt; &#xA;&lt;h3&gt;Running a language server&lt;/h3&gt; &#xA;&lt;p&gt;To run a language server, developers will need to activate the appropriate &lt;code&gt;hie.yaml&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;ln -s hie-stack.yaml hie.yaml  # for Stack&#xA;# or&#xA;ln -s hie-cabal.yaml hie.yaml  # for Cabal&#xA;# or&#xA;ln -s hie-bios.yaml hie.yaml  # if all else fails&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The project&#39;s dependencies must be installed before starting the language server:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;stack build --test --bench --only-dependencies&#xA;# or&#xA;cabal build --enable-tests --enable-benchmarks --only-dependencies kore&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Developing with Nix&lt;/h3&gt; &#xA;&lt;p&gt;We provide a &lt;code&gt;shell.nix&lt;/code&gt; expression with a suitable development environment and a binary cache at &lt;a href=&#34;https://runtimeverification.cachix.org/&#34;&gt;runtimeverification.cachix.org&lt;/a&gt;. The development environment is intended to be used with &lt;code&gt;nix-shell&lt;/code&gt; and &lt;code&gt;cabal&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;When the &lt;code&gt;.cabal&lt;/code&gt; package description file changes, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-.sh&#34;&gt;# Requires Nix to be installed.&#xA;./nix/rematerialize.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This script is also run by an automatic workflow.&lt;/p&gt; &#xA;&lt;p&gt;We provide a &lt;code&gt;test.nix&lt;/code&gt; for running integration tests:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;nix-build test.nix  # run all integration tests&#xA;nix-build test.nix --argstr test imp  # run the integration tests in test/imp&#xA;nix-shell test.nix  # enter a shell where we can run tests manually&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>