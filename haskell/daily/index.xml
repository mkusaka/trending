<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Haskell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-07-22T01:31:32Z</updated>
  <subtitle>Daily Trending of Haskell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ndmitchell/ghcid</title>
    <updated>2024-07-22T01:31:32Z</updated>
    <id>tag:github.com,2024-07-22:/ndmitchell/ghcid</id>
    <link href="https://github.com/ndmitchell/ghcid" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Very low feature GHCi based IDE&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ghcid &lt;a href=&#34;https://hackage.haskell.org/package/ghcid&#34;&gt;&lt;img src=&#34;https://img.shields.io/hackage/v/ghcid.svg?label=Hackage&#34; alt=&#34;Hackage version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.stackage.org/package/ghcid&#34;&gt;&lt;img src=&#34;https://www.stackage.org/package/ghcid/badge/nightly?label=Stackage&#34; alt=&#34;Stackage version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/ndmitchell/ghcid/actions&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/ndmitchell/ghcid/ci.yml?branch=master&#34; alt=&#34;Build status&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;Either &#34;GHCi as a daemon&#34; or &#34;GHC + a bit of an IDE&#34;. To a first approximation, it opens &lt;code&gt;ghci&lt;/code&gt; and runs &lt;code&gt;:reload&lt;/code&gt; whenever your source code changes, formatting the output to fit a fixed height console. Unlike other Haskell development tools, &lt;code&gt;ghcid&lt;/code&gt; is intended to be &lt;em&gt;incredibly simple&lt;/em&gt;. In particular, it doesn&#39;t integrate with any editors, doesn&#39;t provide access to the &lt;code&gt;ghci&lt;/code&gt; it starts, doesn&#39;t depend on GHC the library and doesn&#39;t start web servers.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Acknowledgements:&lt;/em&gt; This project incorporates significant work from &lt;a href=&#34;https://github.com/JPMoresmau&#34;&gt;JPMoresmau&lt;/a&gt;, who is listed as a co-author.&lt;/p&gt; &#xA;&lt;h3&gt;Using it&lt;/h3&gt; &#xA;&lt;p&gt;Run &lt;code&gt;stack install ghcid&lt;/code&gt; or &lt;code&gt;cabal update &amp;amp;&amp;amp; cabal install ghcid&lt;/code&gt; to install it as normal. Then run &lt;code&gt;ghcid &#34;--command=ghci Main.hs&#34;&lt;/code&gt;. The &lt;code&gt;command&lt;/code&gt; is how you start your project in &lt;code&gt;ghci&lt;/code&gt;. If you omit &lt;code&gt;--command&lt;/code&gt; then it will default to &lt;code&gt;stack ghci&lt;/code&gt; if you have the &lt;code&gt;stack.yaml&lt;/code&gt; file and &lt;code&gt;.stack-work&lt;/code&gt; directory, default to &lt;code&gt;ghci&lt;/code&gt; if you have a &lt;code&gt;.ghci&lt;/code&gt; file in the current directory, and otherwise default to &lt;code&gt;cabal repl&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Personally, I always create a &lt;code&gt;.ghci&lt;/code&gt; file at the root of all my projects, which usually &lt;a href=&#34;https://github.com/ndmitchell/ghcid/raw/master/.ghci&#34;&gt;reads something like&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;:set -fwarn-unused-binds -fwarn-unused-imports&#xA;:set -isrc&#xA;:load Main&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After that, resize your console and make it so you can see it while working in your editor. On Windows you may wish to pass &lt;code&gt;--topmost&lt;/code&gt; so the console will sit on top of all other windows. On Linux, you probably want to use your window manager to make it topmost or use a &lt;a href=&#34;http://xmonad.org/&#34;&gt;tiling window manager&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;What you get&lt;/h3&gt; &#xA;&lt;p&gt;On every save you&#39;ll see a list of the errors and warnings in your project. It uses &lt;code&gt;ghci&lt;/code&gt; under the hood, so even relatively large projects should update their status pretty quickly. As an example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Main.hs:23:10:&#xA;    Not in scope: `verbosit&#39;&#xA;    Perhaps you meant `verbosity&#39; (imported from System.Console.CmdArgs)&#xA;Util.hs:18:1: Warning: Defined but not used: `foo&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or, if everything is good, you see:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;All good&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Please &lt;a href=&#34;https://github.com/ndmitchell/ghcid/issues&#34;&gt;report any bugs&lt;/a&gt; you find.&lt;/p&gt; &#xA;&lt;h3&gt;Editor integration&lt;/h3&gt; &#xA;&lt;p&gt;There are a few plugins that integrate Ghcid into editors, notably:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ndmitchell/ghcid/master/plugins/vscode/&#34;&gt;VS Code&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ndmitchell/ghcid/master/plugins/nvim/&#34;&gt;nvim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/aiya000/vim-ghcid-quickfix&#34;&gt;vim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ndmitchell/ghcid/master/plugins/emacs/&#34;&gt;Emacs&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Usage tips&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If you have a &lt;code&gt;.ghcid&lt;/code&gt; file in the current folder, or a parent folder, the contents of that file will be used as command line arguments. For example, if you always want to pass &lt;code&gt;--command=custom-ghci&lt;/code&gt; then putting that in a &lt;code&gt;.ghcid&lt;/code&gt; file will free you from writing it each time.&lt;/li&gt; &#xA; &lt;li&gt;There is an article on &lt;a href=&#34;https://binarin.ru/post/auto-reload-threepenny-gui/&#34;&gt;auto-reloading threepenny-gui apps during development&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;There are a list of &lt;a href=&#34;http://www.parsonsmatt.org/2018/05/19/ghcid_for_the_win.html&#34;&gt;general tips for using Ghcid&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In general, to use &lt;code&gt;ghcid&lt;/code&gt;, you first need to get &lt;code&gt;ghci&lt;/code&gt; working well for you. In particular, craft a command line or &lt;code&gt;.ghci&lt;/code&gt; file such that when you start &lt;code&gt;ghci&lt;/code&gt; it has loaded all the files you care about (check &lt;code&gt;:show modules&lt;/code&gt;). If you want to use &lt;code&gt;--test&lt;/code&gt; check that whatever expression you want to use works in that &lt;code&gt;ghci&lt;/code&gt; session. Getting &lt;code&gt;ghci&lt;/code&gt; started properly is one of the hardest things of using &lt;code&gt;ghcid&lt;/code&gt;, and while &lt;code&gt;ghcid&lt;/code&gt; has a lot of defaults for common cases, it doesn&#39;t always work out of the box.&lt;/p&gt; &#xA;&lt;h3&gt;Evaluation&lt;/h3&gt; &#xA;&lt;p&gt;Using the &lt;code&gt;ghci&lt;/code&gt; session that &lt;code&gt;ghcid&lt;/code&gt; manages you can also evaluate expressions:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;You can pass any &lt;code&gt;ghci&lt;/code&gt; expression with the &lt;code&gt;--test&lt;/code&gt; flag, e.g. &lt;code&gt;--test=:main&lt;/code&gt;, which will be run whenever the code is warning free (or pass &lt;code&gt;--warnings&lt;/code&gt; for when the code is merely error free).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you pass the &lt;code&gt;--allow-eval&lt;/code&gt; flag then comments in the source files such as &lt;code&gt;-- $&amp;gt; expr&lt;/code&gt; will run &lt;code&gt;expr&lt;/code&gt; after loading - see &lt;a href=&#34;https://jkeuhlen.com/2019/10/19/Compile-Your-Comments-In-Ghcid.html&#34;&gt;this blog post&lt;/a&gt; for more details. Multiline comments are also supported with the following syntax:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;{- $&amp;gt;&#xA;expr1&#xA;expr2&#xA;...&#xA;exprN&#xA;&amp;lt;$ -}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Expressions that read from standard input are likely to hang, given that Ghcid already uses the standard input to interact with Ghci.&lt;/p&gt; &#xA;&lt;h3&gt;FAQ&lt;/h3&gt; &#xA;&lt;h4&gt;This isn&#39;t as good as full IDE&lt;/h4&gt; &#xA;&lt;p&gt;I&#39;ve gone for simplicity over features. It&#39;s a point in the design space, but not necessarily the best point in the design space for you. Other points in the design space include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/digital-asset/ghcide&#34;&gt;ghcide&lt;/a&gt; - a real IDE in your editor.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/reflex-frp/reflex-ghci&#34;&gt;reflex-ghci&lt;/a&gt; - like Ghcid but with more terminal UI features.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mpickering/reflex-ghcide&#34;&gt;reflex-ghcide&lt;/a&gt; - a full IDE in the terminal.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;If I delete a file and put it back it gets stuck.&lt;/h4&gt; &#xA;&lt;p&gt;Yes, that&#39;s a &lt;a href=&#34;https://ghc.haskell.org/trac/ghc/ticket/9648&#34;&gt;bug in GHCi&lt;/a&gt;. If you see GHCi getting confused just kill &lt;code&gt;ghcid&lt;/code&gt; and start it again.&lt;/p&gt; &#xA;&lt;h4&gt;I want to run arbitrary commands when arbitrary files change.&lt;/h4&gt; &#xA;&lt;p&gt;This project reloads &lt;code&gt;ghci&lt;/code&gt; when files loaded by &lt;code&gt;ghci&lt;/code&gt; change. If you want a more general mechanism, consider:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/schell/steeloverseer&#34;&gt;Steel Overseer&lt;/a&gt; (&lt;a href=&#34;https://hackage.haskell.org/package/steeloverseer&#34;&gt;Hackage&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://facebook.github.io/watchman/&#34;&gt;Watchman&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/NorfairKing/feedback&#34;&gt;&lt;code&gt;feedback&lt;/code&gt;&lt;/a&gt; (&lt;a href=&#34;https://hackage.haskell.org/package/feedback&#34;&gt;Hackage&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/watchexec/watchexec&#34;&gt;Watchexec&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/eradman/entr&#34;&gt;&lt;code&gt;entr&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;I want syntax highlighting in the error messages.&lt;/h4&gt; &#xA;&lt;p&gt;One option is to use Neovim or Emacs and run the terminal in a buffer whose file type is set to Haskell. Another option is to pipe &lt;code&gt;ghcid&lt;/code&gt; through &lt;a href=&#34;https://www.gnu.org/software/src-highlite/&#34;&gt;source-highlight&lt;/a&gt; (&lt;code&gt;ghcid | source-highlight -s haskell -f esc&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;h4&gt;I&#39;m not seeing pattern matching warnings.&lt;/h4&gt; &#xA;&lt;p&gt;Ghcid automatically appends &lt;code&gt;-fno-code&lt;/code&gt; to the command line, which makes the reload cycle about twice as fast. Unfortunately GHC 8.0 and 8.2 suffer from &lt;a href=&#34;https://ghc.haskell.org/trac/ghc/ticket/10600&#34;&gt;bug 10600&lt;/a&gt; which means &lt;code&gt;-fno-code&lt;/code&gt; also disables pattern matching warnings. On these versions, either accept no pattern match warnings or use &lt;code&gt;-c&lt;/code&gt; to specify a command line to start &lt;code&gt;ghci&lt;/code&gt; that doesn&#39;t include &lt;code&gt;-fno-code&lt;/code&gt;. From GHC 8.4 this problem no longer exists.&lt;/p&gt; &#xA;&lt;h4&gt;I get &#34;During interactive linking, GHCi couldn&#39;t find the following symbol&#34;&lt;/h4&gt; &#xA;&lt;p&gt;This problem is a manifestation of &lt;a href=&#34;https://ghc.haskell.org/trac/ghc/ticket/8025&#34;&gt;GHC bug 8025&lt;/a&gt;, which is fixed in GHC 8.4 and above. Ghcid automatically appends &lt;code&gt;-fno-code&lt;/code&gt; to the command line, but for older GHC&#39;s you can supress that with &lt;code&gt;--test &#34;return ()&#34;&lt;/code&gt; (to add a fake test) or &lt;code&gt;-c &#34;ghci ...&#34;&lt;/code&gt; to manually specify the command to run.&lt;/p&gt; &#xA;&lt;h4&gt;I only see source-spans or colors on errors/warnings after the first load.&lt;/h4&gt; &#xA;&lt;p&gt;Due to limitations in &lt;code&gt;ghci&lt;/code&gt;, these flags are only set &lt;em&gt;after&lt;/em&gt; the first load. If you want them to apply from the start, pass them on the command line to &lt;code&gt;ghci&lt;/code&gt; with something like &lt;code&gt;-c &#34;ghci -ferror-spans -fdiagnostics-color=always&#34;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;I want to match on the file/line/column to get jump-to-error functionality in my editor.&lt;/h4&gt; &#xA;&lt;p&gt;You will variously see &lt;code&gt;file:line:col:message&lt;/code&gt;, &lt;code&gt;file:line:col1-col2:msg&lt;/code&gt; and &lt;code&gt;file:(line1,col1)-(line2,col2):message&lt;/code&gt;, as these are the formats GHC uses. To match all of them you can use a regular expression such as &lt;code&gt;^(\\S*?):(?|(\\d+):(\\d+)(?:-\\d+)?|\\((\\d+),(\\d+)\\)-\\(\\d+,\\d+\\)):([^\n]*)&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;What if the error message is too big for my console?&lt;/h4&gt; &#xA;&lt;p&gt;You can let &lt;code&gt;ghcid&lt;/code&gt; print more with &lt;code&gt;--no-height-limit&lt;/code&gt;. The first error message might end up outside of the console view, so you can use &lt;code&gt;--reverse-errors&lt;/code&gt; to flip the order of the errors and warnings. Further error messages are just a scroll away. Finally if you&#39;re going to be scrolling, you can achieve a cleaner experience with the &lt;code&gt;--clear&lt;/code&gt; flag, which clears the console on reload.&lt;/p&gt; &#xA;&lt;h4&gt;I use Alex (&lt;code&gt;.x&lt;/code&gt;) and Happy (&lt;code&gt;.y&lt;/code&gt;) files, how can I check them?&lt;/h4&gt; &#xA;&lt;p&gt;Ghcid only notices when the &lt;code&gt;.hs&lt;/code&gt; files change. To make it respond to other files you can pass the &lt;code&gt;.x&lt;/code&gt; and &lt;code&gt;.y&lt;/code&gt; files to &lt;code&gt;--restart&lt;/code&gt;, e.g. &lt;code&gt;--restart=myparser.y&lt;/code&gt;. As long as you set the initial command to something that runs Happy/Alex (e.g. &lt;code&gt;cabal repl&lt;/code&gt;) then when those files change everything will restart, causing the initial command to be rerun.&lt;/p&gt; &#xA;&lt;h4&gt;How do I run pass command arguments with --test?&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;ghcid ... --test Main.main --setup &#34;:set args myargs&#34;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Why do I get &#34;addWatch: resource exhausted (No space left on device)&#34; or &#34;openFile: resource exhausted (Too many open files)&#34; on my Mac?&lt;/h4&gt; &#xA;&lt;p&gt;The Mac has a fairly low limit on the number of file handles available. You can increase it with: &lt;code&gt;sudo sysctl -w fs.inotify.max_user_watches=262144; sudo sysctl -p&lt;/code&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>dmjio/miso</title>
    <updated>2024-07-22T01:31:32Z</updated>
    <id>tag:github.com,2024-07-22:/dmjio/miso</id>
    <link href="https://github.com/dmjio/miso" rel="alternate"></link>
    <summary type="html">&lt;p&gt;🍜 A tasty Haskell front-end framework&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt;miso&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://haskell-miso.org&#34;&gt; &lt;img width=&#34;10%&#34; src=&#34;https://em-content.zobj.net/thumbs/240/apple/325/steaming-bowl_1f35c.png&#34;&gt; &lt;/a&gt; &lt;/p&gt;&#xA;&lt;p align=&#34;center&#34;&gt;A &lt;i&gt;tasty&lt;/i&gt; &lt;a href=&#34;https://www.haskell.org/&#34;&gt;&lt;strong&gt;Haskell&lt;/strong&gt;&lt;/a&gt; front-end framework&lt;/p&gt; &#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://join.slack.com/t/haskell-miso/shared_invite/zt-1w80x404h-AF2Be_BDQixNMadzadnUNg&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/slack-miso-E01563.svg?style=flat-square&#34; alt=&#34;Miso Slack&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://haskell.org&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/language-Haskell-orange.svg?style=flat-square&#34; alt=&#34;Haskell&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://miso-haskell.cachix.org&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/build-cachix-yellow.svg?style=flat-square&#34; alt=&#34;Cachix&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/dmjio/miso/actions&#34;&gt; &lt;img src=&#34;https://github.com/dmjio/miso/workflows/test%20matrix/badge.svg?sanitize=true&#34; alt=&#34;GitHub Actions&#34;&gt; &lt;/a&gt; &lt;a href=&#34;http://hackage.haskell.org/package/miso&#34;&gt; &lt;img src=&#34;https://img.shields.io/hackage/v/miso.svg?style=flat-square&#34; alt=&#34;Hackage&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://www.irccloud.com/invite?channel=%23haskell-miso&amp;amp;hostname=irc.libera.chat&amp;amp;port=6697&amp;amp;ssl=1&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/irc-%23haskell--miso-1e72ff.svg?style=flat-square&#34; alt=&#34;IRC #haskell-miso&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/dmjio/miso/raw/master/LICENSE&#34;&gt; &lt;img src=&#34;http://img.shields.io/badge/license-BSD3-blueviolet.svg?style=flat-square&#34; alt=&#34;LICENSE&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Miso&lt;/strong&gt; is a small, production-ready, &#34;&lt;a href=&#34;http://nerds.airbnb.com/isomorphic-javascript-future-web-apps/&#34;&gt;isomorphic&lt;/a&gt;&#34; &lt;a href=&#34;https://www.haskell.org/&#34;&gt;Haskell&lt;/a&gt; front-end framework for quickly building highly interactive single-page web applications. It features a virtual-dom, recursive diffing / patching algorithm, attribute and property normalization, event delegation, event batching, SVG, Server-sent events, Websockets, type-safe &lt;a href=&#34;https://haskell-servant.github.io/&#34;&gt;servant&lt;/a&gt;-style routing and an extensible Subscription-based subsystem. Inspired by &lt;a href=&#34;http://elm-lang.org/&#34;&gt;Elm&lt;/a&gt;, &lt;a href=&#34;http://redux.js.org/&#34;&gt;Redux&lt;/a&gt; and &lt;a href=&#34;http://github.com/bobris/bobril&#34;&gt;Bobril&lt;/a&gt;. &lt;strong&gt;Miso&lt;/strong&gt; is pure by default, but side effects (like &lt;code&gt;XHR&lt;/code&gt;) can be introduced into the system via the &lt;code&gt;Effect&lt;/code&gt; data type. &lt;strong&gt;Miso&lt;/strong&gt; makes heavy use of the &lt;a href=&#34;https://github.com/ghcjs/ghcjs&#34;&gt;GHCJS&lt;/a&gt; FFI and therefore has minimal dependencies. &lt;strong&gt;Miso&lt;/strong&gt; can be considered a shallow &lt;a href=&#34;https://wiki.haskell.org/Embedded_domain_specific_language&#34;&gt;embedded domain-specific language&lt;/a&gt; for modern web programming.&lt;/p&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dmjio/miso/master/#quick-start&#34;&gt;Quick Start&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dmjio/miso/master/#begin&#34;&gt;Begin&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dmjio/miso/master/#nix&#34;&gt;Nix&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dmjio/miso/master/#architecture&#34;&gt;Architecture&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dmjio/miso/master/#examples&#34;&gt;Examples&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dmjio/miso/master/#todomvc&#34;&gt;TodoMVC&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dmjio/miso/master/#flatris&#34;&gt;Flatris&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dmjio/miso/master/#2048&#34;&gt;2048&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dmjio/miso/master/#snake&#34;&gt;Snake&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dmjio/miso/master/#mario&#34;&gt;Mario&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dmjio/miso/master/#miso-plane-flappy-birds&#34;&gt;Miso Plane (Flappy Birds)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dmjio/miso/master/#websocket&#34;&gt;Websocket&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dmjio/miso/master/#sse&#34;&gt;SSE&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dmjio/miso/master/#xhr&#34;&gt;XHR&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dmjio/miso/master/#router&#34;&gt;Router&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dmjio/miso/master/#svg&#34;&gt;SVG&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dmjio/miso/master/#canvas-2d&#34;&gt;Canvas 2D&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dmjio/miso/master/#threejs&#34;&gt;ThreeJS&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dmjio/miso/master/#simple&#34;&gt;Simple&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dmjio/miso/master/#file-reader&#34;&gt;File Reader&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dmjio/miso/master/#webvr&#34;&gt;WebVR&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dmjio/miso/master/#pixel-card-wars&#34;&gt;Pixel Card Wars&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dmjio/miso/master/#currency-converter&#34;&gt;Currency Converter&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dmjio/miso/master/#haddocks&#34;&gt;Haddocks&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dmjio/miso/master/#ghc&#34;&gt;GHC&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dmjio/miso/master/#ghcjs&#34;&gt;GHCJS&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dmjio/miso/master/#sample-application&#34;&gt;Sample Application&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dmjio/miso/master/#transition-application&#34;&gt;Transition Application&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dmjio/miso/master/#live-reload-with-jsaddle&#34;&gt;Live reload with JSaddle&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dmjio/miso/master/#docker&#34;&gt;Docker&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dmjio/miso/master/#building-examples&#34;&gt;Building examples&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dmjio/miso/master/#coverage&#34;&gt;Coverage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dmjio/miso/master/#isomorphic&#34;&gt;Isomorphic&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dmjio/miso/master/#pinning-nixpkgs&#34;&gt;Pinning nixpkgs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dmjio/miso/master/#binary-cache&#34;&gt;Binary cache&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dmjio/miso/master/#benchmarks&#34;&gt;Benchmarks&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dmjio/miso/master/#maintainers&#34;&gt;Maintainers&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dmjio/miso/master/#commercial-users&#34;&gt;Commercial Users&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dmjio/miso/master/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dmjio/miso/master/#contributors&#34;&gt;Contributors&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dmjio/miso/master/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Quick start&lt;/h2&gt; &#xA;&lt;p&gt;To get started quickly building applications, we recommend using the &lt;a href=&#34;https://nixos.org/nix&#34;&gt;&lt;code&gt;nix&lt;/code&gt;&lt;/a&gt; package manager with miso&#39;s binary cache provided by &lt;a href=&#34;https://miso-haskell.cachix.org/&#34;&gt;&lt;code&gt;cachix&lt;/code&gt;&lt;/a&gt;. It is possible to use &lt;a href=&#34;https://docs.haskellstack.org/en/stable/README/&#34;&gt;&lt;code&gt;stack&lt;/code&gt;&lt;/a&gt; to build GHCJS projects, but support for procuring &lt;code&gt;GHCJS&lt;/code&gt; has been removed &lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/4086&#34;&gt;as of stack 2.0&lt;/a&gt;. &lt;code&gt;nix&lt;/code&gt; is used to procure a working version of &lt;code&gt;GHCJS&lt;/code&gt;. If you&#39;re using &lt;code&gt;cabal&lt;/code&gt; we assume you have &lt;a href=&#34;https://github.com/ghcjs/ghcjs#installation&#34;&gt;obtained &lt;code&gt;GHCJS&lt;/code&gt;&lt;/a&gt; by other means. All source code depicted below for the quick start app is available &lt;a href=&#34;https://github.com/dmjio/miso/tree/master/sample-app&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Begin&lt;/h3&gt; &#xA;&lt;p&gt;To build the sample-app with &lt;code&gt;nix&lt;/code&gt;, execute the commands below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# optional use of cache&#xA;nix-env -iA cachix -f https://cachix.org/api/v1/install&#xA;# optional use of cache&#xA;cachix use miso-haskell&#xA;git clone https://github.com/dmjio/miso&#xA;cd miso/sample-app&#xA;nix-build&#xA;open ./result/bin/app.jsexe/index.html&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The above commands will add miso&#39;s binary cache to your nix installation (support for both Linux and OSX). &lt;code&gt;nix-build&lt;/code&gt; will fetch the dependencies from miso&#39;s cache and build the sample application.&lt;/p&gt; &#xA;&lt;h3&gt;Nix&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;Nix&lt;/code&gt; is a more powerful option for building web applications with &lt;code&gt;miso&lt;/code&gt; since it encompasses development workflow, configuration management, and deployment. The source code for &lt;a href=&#34;https://github.com/dmjio/miso/tree/master/examples/haskell-miso.org&#34;&gt;&lt;code&gt;haskell-miso.org&lt;/code&gt;&lt;/a&gt; is an example of this.&lt;/p&gt; &#xA;&lt;p&gt;If unfamiliar with &lt;code&gt;nix&lt;/code&gt;, we recommend &lt;a href=&#34;https://github.com/Gabriella439&#34;&gt;@Gabriella439&lt;/a&gt;&#39;s &lt;a href=&#34;https://github.com/Gabriella439/haskell-nix&#34;&gt;&#34;Nix and Haskell in production&#34;&lt;/a&gt; guide.&lt;/p&gt; &#xA;&lt;p&gt;To begin, make the following directory layout:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;➜  mkdir app &amp;amp;&amp;amp; touch app/{Main.hs,app.cabal,default.nix} &amp;amp;&amp;amp; tree app&#xA;app&#xA;|-- Main.hs&#xA;|-- app.cabal&#xA;`-- default.nix&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Add a &lt;code&gt;cabal&lt;/code&gt; file&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;➜  cat app/*.cabal&#xA;name:                app&#xA;version:             0.1.0.0&#xA;synopsis:            First miso app&#xA;category:            Web&#xA;build-type:          Simple&#xA;cabal-version:       &amp;gt;=1.10&#xA;&#xA;executable app&#xA;  main-is:             Main.hs&#xA;  ghcjs-options:&#xA;    -dedupe&#xA;  build-depends:       base, miso&#xA;  default-language:    Haskell2010&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Write a &lt;code&gt;default.nix&lt;/code&gt; (this will fetch a recent version of &lt;code&gt;miso&lt;/code&gt;). &lt;code&gt;miso&lt;/code&gt; will provide you with a working &lt;code&gt;nixpkgs&lt;/code&gt; named &lt;code&gt;pkgs&lt;/code&gt;. &lt;code&gt;callCabal2nix&lt;/code&gt; will automatically produce a nix expression that builds your cabal file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nix&#34;&gt;with (import (builtins.fetchGit {&#xA;  url = &#34;https://github.com/dmjio/miso&#34;;&#xA;  ref = &#34;refs/tags/1.8&#34;;&#xA;}) {});&#xA;pkgs.haskell.packages.ghcjs.callCabal2nix &#34;app&#34; ./. {}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Add the source from &lt;a href=&#34;https://raw.githubusercontent.com/dmjio/miso/master/#sample-application&#34;&gt;Sample Application&lt;/a&gt; to &lt;code&gt;app/Main.hs&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Build the project&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;nix-build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Open the result&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;open ./result/bin/app.jsexe/index.html&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For development with &lt;code&gt;nix&lt;/code&gt;, it can be nice to have &lt;code&gt;cabal&lt;/code&gt; present for building. This command will make it available in your &lt;code&gt;PATH&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;nix-env -iA cabal-install -f &#39;&amp;lt;nixpkgs&amp;gt;&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To be put into a shell w/ &lt;code&gt;GHCJS&lt;/code&gt; and all the dependencies for this project present, use &lt;code&gt;nix-shell&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;nix-shell -A env&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To view the dependencies for your project, call &lt;code&gt;ghcjs-pkg list&lt;/code&gt; when inside the shell.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;nix-shell -A env --run &#39;ghcjs-pkg list&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To build the project with &lt;code&gt;cabal&lt;/code&gt; after entering the &lt;code&gt;nix-shell&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;nix-shell -A env --run &#39;cabal configure --ghcjs &amp;amp;&amp;amp; cabal build&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For incremental development inside of the &lt;code&gt;nix-shell&lt;/code&gt; we recommend using a tool like &lt;a href=&#34;http://eradman.com/entrproject/&#34;&gt;&lt;code&gt;entr&lt;/code&gt;&lt;/a&gt; to automatically rebuild on file changes, or roll your own solution with &lt;code&gt;inotify&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;ag -l | entr sh -c &#39;cabal build&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Architecture&lt;/h3&gt; &#xA;&lt;p&gt;For constructing client and server applications, we recommend using one &lt;code&gt;cabal&lt;/code&gt; file with two executable sections, where the &lt;code&gt;buildable&lt;/code&gt; attribute set is contingent on the compiler. An example of this layout is &lt;a href=&#34;https://github.com/dmjio/miso/raw/master/examples/haskell-miso.org/haskell-miso.cabal#L16-L60&#34;&gt;here&lt;/a&gt;. For more info on how to use &lt;code&gt;stack&lt;/code&gt; with a &lt;code&gt;client&lt;/code&gt;/&lt;code&gt;server&lt;/code&gt; setup, see this &lt;a href=&#34;https://docs.haskellstack.org/en/stable/ghcjs/#project-with-both-client-and-server&#34;&gt;link&lt;/a&gt;. For more information on how to use &lt;code&gt;nix&lt;/code&gt; with a &lt;code&gt;client&lt;/code&gt;/&lt;code&gt;server&lt;/code&gt; setup, see the &lt;a href=&#34;https://github.com/dmjio/miso/raw/master/examples/haskell-miso.org/default.nix&#34;&gt;nix scripts&lt;/a&gt; for &lt;a href=&#34;https://haskell-miso.org&#34;&gt;https://haskell-miso.org&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;h3&gt;TodoMVC&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://todo-mvc.haskell-miso.org/&#34;&gt;Link&lt;/a&gt; / &lt;a href=&#34;https://github.com/dmjio/miso/raw/master/examples/todo-mvc/Main.hs&#34;&gt;Source&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Flatris&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://flatris.haskell-miso.org/&#34;&gt;Link&lt;/a&gt; / &lt;a href=&#34;https://github.com/ptigwe/hs-flatris/&#34;&gt;Source&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;2048&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://2048.haskell-miso.org/&#34;&gt;Link&lt;/a&gt; / &lt;a href=&#34;https://github.com/ptigwe/hs2048/&#34;&gt;Source&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Snake&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://snake.haskell-miso.org/&#34;&gt;Link&lt;/a&gt; / &lt;a href=&#34;https://github.com/lbonn/miso-snake&#34;&gt;Source&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Mario&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mario.haskell-miso.org/&#34;&gt;Link&lt;/a&gt; / &lt;a href=&#34;https://github.com/dmjio/miso/raw/master/examples/mario/Main.hs&#34;&gt;Source&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Miso Plane (Flappy Birds)&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://miso-plane.haskell-miso.org&#34;&gt;Link&lt;/a&gt; / &lt;a href=&#34;https://github.com/Lermex/miso-plane&#34;&gt;Source&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Websocket&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://websocket.haskell-miso.org/&#34;&gt;Link&lt;/a&gt; / &lt;a href=&#34;https://github.com/dmjio/miso/raw/master/examples/websocket/Main.hs&#34;&gt;Source&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;SSE&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://sse.haskell-miso.org/&#34;&gt;Link&lt;/a&gt; / &lt;a href=&#34;https://github.com/dmjio/miso/raw/master/examples/sse/client/Main.hs&#34;&gt;Client&lt;/a&gt; / &lt;a href=&#34;https://github.com/dmjio/miso/raw/master/examples/sse/server/Main.hs&#34;&gt;Server&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;XHR&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xhr.haskell-miso.org/&#34;&gt;Link&lt;/a&gt; / &lt;a href=&#34;https://github.com/dmjio/miso/raw/master/examples/xhr/Main.hs&#34;&gt;Source&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Router&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://router.haskell-miso.org/&#34;&gt;Link&lt;/a&gt; / &lt;a href=&#34;https://github.com/dmjio/miso/raw/master/examples/router/Main.hs&#34;&gt;Source&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;SVG&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://svg.haskell-miso.org/&#34;&gt;Link&lt;/a&gt; / &lt;a href=&#34;https://github.com/dmjio/miso/raw/master/examples/svg/Main.hs&#34;&gt;Source&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Canvas 2D&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://canvas.haskell-miso.org/&#34;&gt;Link&lt;/a&gt; / &lt;a href=&#34;https://github.com/dmjio/miso/raw/master/examples/canvas2d/Main.hs&#34;&gt;Source&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;ThreeJS&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://threejs.haskell-miso.org/&#34;&gt;Link&lt;/a&gt; / &lt;a href=&#34;https://github.com/dmjio/miso/raw/master/examples/three/Main.hs&#34;&gt;Source&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Simple&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://simple.haskell-miso.org/&#34;&gt;Link&lt;/a&gt; / &lt;a href=&#34;https://github.com/dmjio/miso/raw/master/examples/simple/Main.hs&#34;&gt;Source&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;File Reader&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://file-reader.haskell-miso.org/&#34;&gt;Link&lt;/a&gt; / &lt;a href=&#34;https://github.com/dmjio/miso/raw/master/examples/file-reader/Main.hs&#34;&gt;Source&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;WebVR&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://fizruk.github.io/fpconf-2017-talk/miso-aframe-demo/dist/demo.jsexe/index.html&#34;&gt;Link&lt;/a&gt; / &lt;a href=&#34;https://github.com/fizruk/miso-aframe&#34;&gt;Source&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Pixel Card Wars&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.schplaf.org/hgames/darkcraw/&#34;&gt;Link&lt;/a&gt; / &lt;a href=&#34;https://github.com/smelc/miso-darkcraw&#34;&gt;Source&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Currency Converter&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://functora.github.io/apps/currency-converter&#34;&gt;Link&lt;/a&gt; / &lt;a href=&#34;https://github.com/functora/functora.github.io/tree/master/ghcjs/currency-converter&#34;&gt;Source&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Haddocks&lt;/h2&gt; &#xA;&lt;h3&gt;GHCJS&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://haddocks.haskell-miso.org/&#34;&gt;Link&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;GHC&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://hackage.haskell.org/package/miso&#34;&gt;Link&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Sample application&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;-- | Haskell language pragma&#xA;{-# LANGUAGE OverloadedStrings #-}&#xA;{-# LANGUAGE RecordWildCards #-}&#xA;&#xA;-- | Haskell module declaration&#xA;module Main where&#xA;&#xA;-- | Miso framework import&#xA;import Miso&#xA;import Miso.String&#xA;&#xA;-- | Type synonym for an application model&#xA;type Model = Int&#xA;&#xA;-- | Sum type for application events&#xA;data Action&#xA;  = AddOne&#xA;  | SubtractOne&#xA;  | NoOp&#xA;  | SayHelloWorld&#xA;  deriving (Show, Eq)&#xA;&#xA;-- | Entry point for a miso application&#xA;main :: IO ()&#xA;main = startApp App {..}&#xA;  where&#xA;    initialAction = SayHelloWorld -- initial action to be executed on application load&#xA;    model  = 0                    -- initial model&#xA;    update = updateModel          -- update function&#xA;    view   = viewModel            -- view function&#xA;    events = defaultEvents        -- default delegated events&#xA;    subs   = []                   -- empty subscription list&#xA;    mountPoint = Nothing          -- mount point for application (Nothing defaults to &#39;body&#39;)&#xA;    logLevel = Off                -- used during prerendering to see if the VDOM and DOM are in sync (only applies to `miso` function)&#xA;&#xA;-- | Updates model, optionally introduces side effects&#xA;updateModel :: Action -&amp;gt; Model -&amp;gt; Effect Action Model&#xA;updateModel action m =&#xA;  case action of&#xA;    AddOne&#xA;      -&amp;gt; noEff (m + 1)&#xA;    SubtractOne&#xA;      -&amp;gt; noEff (m - 1)&#xA;    NoOp&#xA;      -&amp;gt; noEff m&#xA;    SayHelloWorld&#xA;      -&amp;gt; m &amp;lt;# do consoleLog &#34;Hello World&#34; &amp;gt;&amp;gt; pure NoOp&#xA;&#xA;-- | Constructs a virtual DOM from a model&#xA;viewModel :: Model -&amp;gt; View Action&#xA;viewModel x = div_ [] [&#xA;   button_ [ onClick AddOne ] [ text &#34;+&#34; ]&#xA; , text (ms x)&#xA; , button_ [ onClick SubtractOne ] [ text &#34;-&#34; ]&#xA; ]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Transition application&lt;/h2&gt; &#xA;&lt;p&gt;An alternative, more powerful interface for constructing &lt;code&gt;miso&lt;/code&gt; applications is using the &lt;code&gt;Transition&lt;/code&gt; interface. &lt;code&gt;Transition&lt;/code&gt; is based on the &lt;code&gt;StateT&lt;/code&gt; monad transformer, and can be used to construct components. It also works very nicely with lenses based on &lt;code&gt;MonadState&lt;/code&gt; (i.e. &lt;code&gt;(.=)&lt;/code&gt;, &lt;code&gt;(%=)&lt;/code&gt;,&lt;code&gt;(+=)&lt;/code&gt;,&lt;code&gt;(-=)&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;-- | Haskell language pragma&#xA;{-# LANGUAGE OverloadedStrings #-}&#xA;{-# LANGUAGE RecordWildCards   #-}&#xA;&#xA;-- | Haskell module declaration&#xA;module Main where&#xA;&#xA;-- | Miso framework import&#xA;import Miso&#xA;import Miso.String&#xA;&#xA;-- | Lens import&#xA;import Control.Lens&#xA;&#xA;-- | Type synonym for an application model&#xA;data Model&#xA;  = Model&#xA;  { _counter :: Int&#xA;  } deriving (Show, Eq)&#xA;&#xA;counter :: Lens&#39; Model Int&#xA;counter = lens _counter $ \record field -&amp;gt; record { _counter = field }&#xA;&#xA;-- | Sum type for application events&#xA;data Action&#xA;  = AddOne&#xA;  | SubtractOne&#xA;  | NoOp&#xA;  | SayHelloWorld&#xA;  deriving (Show, Eq)&#xA;&#xA;-- | Entry point for a miso application&#xA;main :: IO ()&#xA;main = startApp App {..}&#xA;  where&#xA;    initialAction = SayHelloWorld -- initial action to be executed on application load&#xA;    model  = Model 0              -- initial model&#xA;    update = fromTransition . updateModel -- update function&#xA;    view   = viewModel            -- view function&#xA;    events = defaultEvents        -- default delegated events&#xA;    subs   = []                   -- empty subscription list&#xA;    mountPoint = Nothing          -- mount point for application (Nothing defaults to &#39;body&#39;)&#xA;    logLevel = Off                -- used during prerendering to see if the VDOM and DOM are in sync (only applies to `miso` function)&#xA;&#xA;-- | Updates model, optionally introduces side effects&#xA;updateModel :: Action -&amp;gt; Transition Action Model ()&#xA;updateModel action =&#xA;  case action of&#xA;    AddOne&#xA;      -&amp;gt; counter += 1&#xA;    SubtractOne&#xA;      -&amp;gt; counter -= 1&#xA;    NoOp&#xA;      -&amp;gt; pure ()&#xA;    SayHelloWorld&#xA;      -&amp;gt; scheduleIO_ (consoleLog &#34;Hello World&#34;)&#xA;&#xA;-- | Constructs a virtual DOM from a model&#xA;viewModel :: Model -&amp;gt; View Action&#xA;viewModel x = div_ [] [&#xA;   button_ [ onClick AddOne ] [ text &#34;+&#34; ]&#xA; , text . ms $ x^.counter&#xA; , button_ [ onClick SubtractOne ] [ text &#34;-&#34; ]&#xA; ]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Live reload with JSaddle&lt;/h2&gt; &#xA;&lt;p&gt;It is possible to build &lt;code&gt;miso&lt;/code&gt; applications with &lt;code&gt;ghcid&lt;/code&gt;, &lt;code&gt;jsaddle&lt;/code&gt; that allow live reloading of your application in reponse to changes in application code. See the &lt;a href=&#34;https://github.com/dmjio/miso/raw/master/sample-app-jsaddle/README.md&#34;&gt;README&lt;/a&gt; in the &lt;code&gt;sample-app-jsaddle&lt;/code&gt; folder for more information.&lt;/p&gt; &#xA;&lt;h2&gt;Docker&lt;/h2&gt; &#xA;&lt;p&gt;Developing miso applications inside a Docker container is supported (allows applications to be built on Windows). See the &lt;a href=&#34;https://github.com/dmjio/miso/raw/master/docker/README.md&#34;&gt;README&lt;/a&gt; in the &lt;code&gt;docker&lt;/code&gt; folder for more information.&lt;/p&gt; &#xA;&lt;h2&gt;Building examples&lt;/h2&gt; &#xA;&lt;p&gt;The easiest way to build the examples is with the &lt;a href=&#34;https://nixos.org/nix/&#34;&gt;&lt;code&gt;nix&lt;/code&gt;&lt;/a&gt; package manager&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/dmjio/miso &amp;amp;&amp;amp; cd miso &amp;amp;&amp;amp; nix-build --arg examples true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will build all examples and documentation into a folder named &lt;code&gt;result&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;➜  miso git:(master) ✗ tree -d ./result/bin&#xA;./result/bin&#xA;|-- canvas2d.jsexe&#xA;|-- compose-update.jsexe&#xA;|-- file-reader.jsexe&#xA;|-- mario.jsexe&#xA;|   `-- imgs&#xA;|-- mathml.jsexe&#xA;|-- router.jsexe&#xA;|-- simple.jsexe&#xA;|-- svg.jsexe&#xA;|-- tests.jsexe&#xA;|-- threejs.jsexe&#xA;|-- todo-mvc.jsexe&#xA;|-- websocket.jsexe&#xA;`-- xhr.jsexe&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To see examples, we recommend hosting them with a webserver&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd result/bin/todo-mvc.jsexe &amp;amp;&amp;amp; nix-shell -p python --run &#39;python -m SimpleHTTPServer&#39;&#xA;Serving HTTP on 0.0.0.0 port 8000 ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Coverage&lt;/h2&gt; &#xA;&lt;p&gt;The core algorithmic component of miso is &lt;a href=&#34;https://github.com/dmjio/miso/raw/master/jsbits/diff.js&#34;&gt;diff.js&lt;/a&gt;. It is responsible for all DOM manipulation that occurs in a miso application and has &lt;a href=&#34;http://coverage.haskell-miso.org&#34;&gt;100% code coverage&lt;/a&gt;. Tests and coverage made possible using &lt;a href=&#34;https://github.com/jsdom/jsdom&#34;&gt;jsdom&lt;/a&gt; and &lt;a href=&#34;https://github.com/facebook/jest&#34;&gt;jest&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To run the tests and build the coverage report:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd miso/tests&#xA;npm i&#xA;npm run test&#xA;## Or by using `yarn` instead of `npm`:&#xA;# yarn&#xA;# yarn test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Isomorphic&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Isomorphic_JavaScript&#34;&gt;Isomorphic javascript&lt;/a&gt; is a technique for increased SEO, code-sharing and perceived page load times. It works in two parts. First, the server sends a pre-rendered HTML body to the client&#39;s browser. Second, after the client javascript application loads, the pointers of the pre-rendered DOM are copied into the virtual DOM, and the application proceeds as normal. All subsequent page navigation is handled locally by the client, avoiding full-page postbacks as necessary.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;miso&lt;/code&gt; function is used to perform the pointer-copying behavior client-side.&lt;/p&gt; &#xA;&lt;p&gt;For more information on how &lt;code&gt;miso&lt;/code&gt; handles isomorphic javascript, we recommend &lt;a href=&#34;https://github.com/FPtje/miso-isomorphic-example&#34;&gt;this tutorial&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Pinning nixpkgs&lt;/h2&gt; &#xA;&lt;p&gt;By default &lt;code&gt;miso&lt;/code&gt; uses a known-to-work, pinned version of &lt;a href=&#34;https://github.com/dmjio/miso/raw/master/nixpkgs.json&#34;&gt;&lt;code&gt;nixpkgs&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Binary cache&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;nix&lt;/code&gt; users on a Linux or OSX distro can take advantage of a &lt;a href=&#34;https://miso-haskell.cachix.org&#34;&gt;binary cache&lt;/a&gt; for faster builds. To use the binary cache follow the instructions on &lt;a href=&#34;https://miso-haskell.cachix.org/&#34;&gt;cachix&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cachix use miso-haskell&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Benchmarks&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://krausest.github.io/js-framework-benchmark/current.html&#34;&gt;According to benchmarks&lt;/a&gt;, &lt;code&gt;miso&lt;/code&gt; is among the fastest functional programming web frameworks, second only to &lt;a href=&#34;http://elm-lang.org&#34;&gt;Elm&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a target=&#34;_blank&#34; href=&#34;https://krausest.github.io/js-framework-benchmark/current.html&#34;&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/1600/1*6EjJTf1mhlTxd4QWsygCwA.png&#34; width=&#34;500&#34; height=&#34;600&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Maintainers&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/dmjio&#34;&gt;@dmjio&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Commercial Users&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.polimorphic.com&#34;&gt;Polimorphic&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://lumi.guide/en/&#34;&gt;LumiGuide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://clovyr.io&#34;&gt;Clovyr&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Feel free to dive in! &lt;a href=&#34;https://github.com/dmjio/miso/issues/new&#34;&gt;Open an issue&lt;/a&gt; or submit &lt;a href=&#34;https://github.com/dmjio/miso/pulls&#34;&gt;PRs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/dmjio/miso/raw/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING&lt;/a&gt; for more info.&lt;/p&gt; &#xA;&lt;h2&gt;Contributors&lt;/h2&gt; &#xA;&lt;h3&gt;Code Contributors&lt;/h3&gt; &#xA;&lt;p&gt;This project exists thanks to all the people who contribute. [&lt;a href=&#34;https://raw.githubusercontent.com/dmjio/miso/master/CONTRIBUTING.md&#34;&gt;Contribute&lt;/a&gt;]. &lt;a href=&#34;https://github.com/dmjio/miso/graphs/contributors&#34;&gt;&lt;img src=&#34;https://opencollective.com/miso/contributors.svg?width=890&amp;amp;button=false&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Financial Contributors&lt;/h3&gt; &#xA;&lt;p&gt;Become a financial contributor and help us sustain our community. [&lt;a href=&#34;https://opencollective.com/miso/contribute&#34;&gt;Contribute&lt;/a&gt;]&lt;/p&gt; &#xA;&lt;h4&gt;Individuals&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opencollective.com/miso&#34;&gt;&lt;img src=&#34;https://opencollective.com/miso/individuals.svg?width=890&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Organizations&lt;/h4&gt; &#xA;&lt;p&gt;Support this project with your organization. Your logo will show up here with a link to your website. [&lt;a href=&#34;https://opencollective.com/miso/contribute&#34;&gt;Contribute&lt;/a&gt;]&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opencollective.com/miso/organization/0/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/miso/organization/0/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/miso/organization/1/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/miso/organization/1/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/miso/organization/2/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/miso/organization/2/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/miso/organization/3/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/miso/organization/3/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/miso/organization/4/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/miso/organization/4/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/miso/organization/5/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/miso/organization/5/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/miso/organization/6/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/miso/organization/6/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/miso/organization/7/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/miso/organization/7/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/miso/organization/8/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/miso/organization/8/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/miso/organization/9/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/miso/organization/9/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dmjio/miso/master/LICENSE&#34;&gt;BSD3&lt;/a&gt; © David Johnson&lt;/p&gt;</summary>
  </entry>
</feed>