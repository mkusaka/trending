<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Haskell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-07-26T01:30:04Z</updated>
  <subtitle>Daily Trending of Haskell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>nh2/hemokit</title>
    <updated>2024-07-26T01:30:04Z</updated>
    <id>tag:github.com,2024-07-26:/nh2/hemokit</id>
    <link href="https://github.com/nh2/hemokit" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Haskell library for the Emotiv EEG, inspired by the Emokit code&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;hemokit&lt;/h1&gt; &#xA;&lt;p&gt;Haskell library and tool suite for the &lt;a href=&#34;http://emotiv.com&#34;&gt;Emotiv&lt;/a&gt; Epoc EEG, inspired by the &lt;a href=&#34;https://github.com/openyou/emokit&#34;&gt;Emokit&lt;/a&gt; code.&lt;/p&gt; &#xA;&lt;p&gt;It currently only works on Linux and Windows - patches for other platforms are welcome, they should be trivial.&lt;/p&gt; &#xA;&lt;h2&gt;Download&lt;/h2&gt; &#xA;&lt;p&gt;You can download &lt;a href=&#34;https://github.com/nh2/hemokit/releases&#34;&gt;pre-built binaries here&lt;/a&gt;, or build it yourself via &lt;a href=&#34;http://hackage.haskell.org/package/hemokit&#34;&gt;&lt;code&gt;cabal install hemokit&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Library Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;device discovery via &lt;a href=&#34;https://github.com/vahokif/haskell-hidapi&#34;&gt;hidapi&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;decryption of the raw data (one-to-one port from from Emokit)&lt;/li&gt; &#xA; &lt;li&gt;convenient access to sensor values, gyro, qualities, battery, and raw data&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Programs&lt;/h2&gt; &#xA;&lt;p&gt;Hemokit comes with example programs to&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;hemokit-dump&lt;/code&gt; print out the current EEG data&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;hemokit-mouse&lt;/code&gt; move the cursor using the gyro&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Note that we have to use &lt;code&gt;sudo&lt;/code&gt; in most of the cases because the HIDAP-hidraw implementation reads directly from a device file.&lt;/p&gt; &#xA;&lt;h2&gt;hemokit-dump - Examples&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;hemokit-dump&lt;/em&gt; can print EEG data, format it as JSON, serve it via TCP or Websockets, and read from real devices and dump files.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Output EEG &lt;em&gt;cumulative state&lt;/em&gt; for an automatically found device:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo hemokit-dump&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Select one of many connected EEGs by serial number:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo hemokit-dump --serial SN...GM&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Output only the data the device sends (no cumulative state), and format the output as JSON:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo hemokit-dump --mode packets --format json&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The &lt;code&gt;--format&lt;/code&gt; flag allows you to change the way the output is printed. The output of &lt;code&gt;--mode state --format spaced&lt;/code&gt; is especially easy to work with.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Instead of from a real device, read data recorded to a file, and serve it via JSON over a TCP server on port &lt;code&gt;1234&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo cat /dev/hidraw1 &amp;gt; encrypted.dump  # Dump data to a file&#xA;sudo hemokit-dump --from-file encrypted.dump --serial SN...GM --serve 0.0.0.0:1234 --format json&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Here you &lt;strong&gt;have&lt;/strong&gt; to specify the serial since HIDAPI is not used to obtain it automatically.&lt;/p&gt; &lt;p&gt;If you prefer a Websockets server over a raw TCP server, use &lt;code&gt;ws://0.0.0.0:1234&lt;/code&gt; instead.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Output decrypted raw data to stdout:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo hemokit-dump --mode raw&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Both print the data from the EEG &lt;strong&gt;and&lt;/strong&gt; store the original data for later use:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo cat /dev/hidraw1 | tee &amp;gt;(hemokit-dump --from-file - --serial SN...GM --format json) &amp;gt; encrypted.dump&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;We use &lt;code&gt;tee&lt;/code&gt; and shell process substitution to duplicate the data stream, and tell &lt;em&gt;hemokit-dump&lt;/em&gt; to read from &lt;code&gt;-&lt;/code&gt; (stdin).&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Connecting with other Programs&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;To use Hemokit as a data source from &lt;a href=&#34;http://openvibe.inria.fr/&#34;&gt;OpenVibe&lt;/a&gt;, check out the corresponding entry in the &lt;a href=&#34;https://github.com/nh2/hemokit/wiki&#34;&gt;Wiki&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;To read Hemokit data from Matlab, I recommend publishing the data on a local socket in text format using &lt;code&gt;hemokit-dump --format spaced --serve 127.0.0.1:1234&lt;/code&gt;. Then you can read it with code like:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-matlab&#34;&gt;t = tcpip(&#39;127.0.0.1&#39;, 1234);&#xA;fopen(t)&#xA;data = fscanf(t, &#39;%d&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>