<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Haskell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-12-21T01:30:56Z</updated>
  <subtitle>Daily Trending of Haskell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>IntersectMBO/cardano-prelude</title>
    <updated>2023-12-21T01:30:56Z</updated>
    <id>tag:github.com,2023-12-21:/IntersectMBO/cardano-prelude</id>
    <link href="https://github.com/IntersectMBO/cardano-prelude" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A protolude-based custom prelude for the Cardano project&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;code&gt;cardano-prelude&lt;/code&gt;&lt;/h1&gt; &#xA;&lt;p&gt;An alternative prelude based on &lt;a href=&#34;https://hackage.haskell.org/package/protolude&#34;&gt;&lt;code&gt;protolude&lt;/code&gt;&lt;/a&gt; used by projects in the &lt;code&gt;cardano&lt;/code&gt; ecosystem. Some projects use it as their default prelude (using &lt;code&gt;NoImplicitPrelude&lt;/code&gt;), othes just import specific functions from it.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;d like to contribute see &lt;a href=&#34;https://github.com/input-output-hk/cardano-prelude/raw/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt;. We also have a &lt;a href=&#34;https://github.com/input-output-hk/cardano-prelude/raw/master/CODE-OF-CONDUCT.md&#34;&gt;code of conduct&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>IntersectMBO/cardano-base</title>
    <updated>2023-12-21T01:30:56Z</updated>
    <id>tag:github.com,2023-12-21:/IntersectMBO/cardano-base</id>
    <link href="https://github.com/IntersectMBO/cardano-base" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Code used throughout the Cardano eco-system&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;cardano-base&lt;/h1&gt; &#xA;&lt;p&gt;A collection of miscellaneous packages used by Cardano that cover:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;cryptography&lt;/li&gt; &#xA; &lt;li&gt;serialization&lt;/li&gt; &#xA; &lt;li&gt;slotting&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Each sub-project has its own README.&lt;/p&gt; &#xA;&lt;p&gt;Haddock for all packages from master branch can be found here: &lt;a href=&#34;https://cardano-base.cardano.intersectmbo.org/&#34;&gt;https://cardano-base.cardano.intersectmbo.org&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;All releases for packages found in this repository are recorded in &lt;a href=&#34;https://github.com/intersectmbo/cardano-haskell-packages&#34;&gt;Cardano Haskell package repository&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Building&lt;/h2&gt; &#xA;&lt;h3&gt;With &lt;code&gt;nix&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;With nix it is as easy as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ nix develop&#xA;...&#xA;$ cabal build all&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Without &lt;code&gt;nix&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Crypotgraphic depencencies needed for building Haskell packages:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jedisct1/libsodium&#34;&gt;&lt;code&gt;libsodium&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bitcoin-core/secp256k1&#34;&gt;&lt;code&gt;libsecp256k1&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/supranational/blst&#34;&gt;&lt;code&gt;libblst&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;We provide packaged versions for common Operating Systems for all of the above dependencies: &lt;a href=&#34;https://github.com/input-output-hk/iohk-nix/releases/latest&#34;&gt;Download&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;GHC&lt;/h2&gt; &#xA;&lt;p&gt;Default version of GHC used in &lt;code&gt;nix&lt;/code&gt; is &lt;code&gt;9.2.7&lt;/code&gt;, but we do support other GHC versions &lt;code&gt;8.10.7&lt;/code&gt; and &lt;code&gt;9.6.1&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Testing&lt;/h3&gt; &#xA;&lt;p&gt;This is a command to run test suites for all packages:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cabal build all&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The test suites use &lt;a href=&#34;https://github.com/feuerbach/tasty&#34;&gt;Tasty&lt;/a&gt;, which allows for running specific tests. This is done by passing the &lt;code&gt;-p&lt;/code&gt; flag to the test program, followed by an &lt;code&gt;awk&lt;/code&gt; pattern. You can alternatively use the &lt;code&gt;TASTY_PATTERN&lt;/code&gt; environment variable with a pattern. For example, the &lt;code&gt;cardano-crypto-tests&lt;/code&gt; can be run with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ cabal test cardano-crypto-tests --test-options &#39;-p blake2b_256&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ TASTY_PATTERN=&#34;blake2b_256&#34; cabal test cardano-crypto-tests&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>IntersectMBO/bech32</title>
    <updated>2023-12-21T01:30:56Z</updated>
    <id>tag:github.com,2023-12-21:/IntersectMBO/bech32</id>
    <link href="https://github.com/IntersectMBO/bech32" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Haskell implementation of the Bech32 address format (BIP 0173).&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://hackage.haskell.org/package/bech32&#34;&gt;&lt;img src=&#34;https://img.shields.io/hackage/v/bech32?style=for-the-badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/input-output-hk/bech32/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/input-output-hk/bech32.svg?style=for-the-badge&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;&lt;code&gt;bech32&lt;/code&gt; command-line&lt;/h2&gt; &#xA;&lt;p&gt;A small executable is available for rapid conversion in the console. You can obtain a pre-compiled &lt;code&gt;bech32&lt;/code&gt; binary for Linux, macOS, and Windows as part of the &lt;a href=&#34;https://github.com/input-output-hk/cardano-wallet/releases&#34;&gt;&lt;code&gt;cardano-wallet&lt;/code&gt; Releases&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;Usage: bech32 [PREFIX]&#xA;  Convert to and from bech32 strings. Data are read from standard input.&#xA;&#xA;Available options:&#xA;  -h,--help                Show this help text&#xA;  PREFIX                   An optional human-readable prefix (e.g. &#39;addr&#39;).&#xA;                             - When provided, the input text is decoded from&#xA;                               various encoding formats and re-encoded to&#xA;                               bech32 using the given prefix.&#xA;                             - When omitted, the input text is decoded from&#xA;                               bech32 to base16.&#xA;  -v,--version             output version information and exit&#xA;&#xA;Supported encoding formats: Base16, Bech32 &amp;amp; Base58.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Examples&lt;/h3&gt; &#xA;&lt;h4&gt;To Bech32:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ bech32 base16_ &amp;lt;&amp;lt;&amp;lt; 706174617465&#xA;base16_1wpshgct5v5r5mxh0&#xA;&#xA;$ bech32 base58_ &amp;lt;&amp;lt;&amp;lt; Ae2tdPwUPEYy&#xA;base58_1p58rejhd9592uusa8pzj2&#xA;&#xA;$ bech32 new_prefix &amp;lt;&amp;lt;&amp;lt; old_prefix1wpshgcg2s33x3&#xA;new_prefix1wpshgcgeak9mv&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;From Bech32&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ bech32 &amp;lt;&amp;lt;&amp;lt; base16_1wpshgct5v5r5mxh0&#xA;706174617465&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Bech32 Haskell Libraries&lt;/h2&gt; &#xA;&lt;p&gt;The repository provides &lt;a href=&#34;https://www.haskell.org/&#34;&gt;Haskell&lt;/a&gt; libraries for working with the &lt;strong&gt;Bech32&lt;/strong&gt; address format, as specified by &lt;a href=&#34;https://github.com/bitcoin/bips/raw/master/bip-0173.mediawiki&#34;&gt;BIP-0173&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;There are &lt;strong&gt;two&lt;/strong&gt; libraries provided:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;http://hackage.haskell.org/package/bech32&#34;&gt;&lt;code&gt;bech32&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;Core primitives for encoding and decoding Bech32 strings.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;http://hackage.haskell.org/package/bech32-th&#34;&gt;&lt;code&gt;bech32-th&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;Template-Haskell specific extensions, including quasiquoters for compile-time parsing of string literals.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/IntersectMBO/bech32/master/#documentation&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/IntersectMBO/bech32/master/#usage&#34;&gt;Usage&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/IntersectMBO/bech32/master/#encoding-data&#34;&gt;Encoding Data&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/IntersectMBO/bech32/master/#decoding-data&#34;&gt;Decoding Data&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/IntersectMBO/bech32/master/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;For comprehensive instructions on how to use these libraries, see the Haddock documentation:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://hackage.haskell.org/package/bech32/docs/Codec-Binary-Bech32.html&#34;&gt;Documentation for &lt;code&gt;bech32&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://hackage.haskell.org/package/bech32-th/docs/Codec-Binary-Bech32-TH.html&#34;&gt;Documentation for &lt;code&gt;bech32-th&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Encoding Data&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-hs&#34;&gt;&amp;gt;&amp;gt;&amp;gt; import Prelude&#xA;&amp;gt;&amp;gt;&amp;gt; import Codec.Binary.Bech32&#xA;&amp;gt;&amp;gt;&amp;gt; import Data.Text.Encoding&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;First, prepare a human-readable prefix:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-hs&#34;&gt;&amp;gt;&amp;gt;&amp;gt; Right prefix = humanReadablePartFromText &#34;example&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Next, prepare a data payload:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-hs&#34;&gt;&amp;gt;&amp;gt;&amp;gt; messageToEncode = &#34;Lorem ipsum dolor sit amet!&#34;&#xA;&amp;gt;&amp;gt;&amp;gt; dataPart = dataPartFromBytes $ encodeUtf8 messageToEncode&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Finally, produce a Bech32 string:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-hs&#34;&gt;&amp;gt;&amp;gt;&amp;gt; encode prefix dataPart&#xA;Right &#34;example1f3hhyetdyp5hqum4d5sxgmmvdaezqumfwssxzmt9wsss9un3cx&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Decoding Data&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-hs&#34;&gt;&amp;gt;&amp;gt;&amp;gt; import Prelude&#xA;&amp;gt;&amp;gt;&amp;gt; import Codec.Binary.Bech32&#xA;&amp;gt;&amp;gt;&amp;gt; import Data.Text.Encoding&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;First, decode the input:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-hs&#34;&gt;&amp;gt;&amp;gt;&amp;gt; input = &#34;example1f3hhyetdyp5hqum4d5sxgmmvdaezqumfwssxzmt9wsss9un3cx&#34;&#xA;&amp;gt;&amp;gt;&amp;gt; Right (prefix, dataPart) = decode input&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Next, examine the decoded human-readable prefix:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-hs&#34;&gt;&amp;gt;&amp;gt;&amp;gt; humanReadablePartToText prefix&#xA;&#34;example&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Finally, examine the decoded data payload:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-hs&#34;&gt;&amp;gt;&amp;gt;&amp;gt; decodeUtf8 &amp;lt;$&amp;gt; dataPartToBytes dataPart&#xA;Just &#34;Lorem ipsum dolor sit amet!&#34;&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>