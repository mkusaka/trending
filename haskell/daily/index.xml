<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Haskell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-15T01:42:14Z</updated>
  <subtitle>Daily Trending of Haskell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>lettier/gifcurry</title>
    <updated>2022-08-15T01:42:14Z</updated>
    <id>tag:github.com,2022-08-15:/lettier/gifcurry</id>
    <link href="https://github.com/lettier/gifcurry" rel="alternate"></link>
    <summary type="html">&lt;p&gt;üòé The open-source, Haskell-built video editor for GIF makers.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/KFZyEqq.png&#34; alt=&#34;Gifcurry&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Tell me about Gifcurry. &lt;span&gt;üòÉ&lt;/span&gt;&lt;/h1&gt; &#xA;&lt;p&gt;Gifcurry is the open-source, Haskell-built video editor for GIF makers. Load a video, make some edits, and save it as a GIF‚ÄîGifcurry makes your life easy! &lt;span&gt;üòé&lt;/span&gt; Most video formats should work, so go wild. And since it&#39;s made with Haskell, you know it&#39;s good. &lt;span&gt;üíØ&lt;/span&gt;&lt;/p&gt; &#xA;&lt;p&gt;For the command line averse, there is a GUI. &lt;span&gt;üñ±&lt;/span&gt; Die-hard terminal aficionado? Gifcurry has you covered with its CLI. &lt;span&gt;üñ•&lt;/span&gt; And for the Haskell programmers out there, there is also a library &lt;span&gt;üìö&lt;/span&gt; API.&lt;/p&gt; &#xA;&lt;p&gt;Gifcurry can save your creation as a GIF or as a video. &lt;span&gt;üìº&lt;/span&gt; So if you hate &lt;span&gt;üò†&lt;/span&gt; GIFs with a passion‚Äîno problem! Just select &#34;Save as a Video&#34; and do your part to rid &lt;span&gt;üóë&lt;/span&gt; the world of GIFs.&lt;/p&gt; &#xA;&lt;p&gt;Enjoy memes? &lt;img alt=&#34;trollface&#34; src=&#34;https://github.githubassets.com/images/icons/emoji/trollface.png?v8&#34;&gt;) Great! Gifcurry can add text all over your GIF. You can change the font, size, color, position, outline, rotation, and the timing. Create the next viral meme with Gifcurry.&lt;/p&gt; &#xA;&lt;p&gt;Did you know Gifcurry slices...and dices? &lt;span&gt;üç¥&lt;/span&gt; You can crop &lt;span&gt;‚úÇ&lt;/span&gt; from the left, the right, the top, and/or the bottom. With Gifcurry, you can slice up some tasty GIFs.&lt;/p&gt; &#xA;&lt;p&gt;Is Gifcurry another Electron app? No way! Gifcurry is 100% #ElectronFree. No need to download more RAM &lt;span&gt;üêè&lt;/span&gt;, Gifcurry is light as a feather. Run &lt;span&gt;üèÉ&lt;/span&gt; it all day, run it all year‚Äîyou&#39;ll never notice.&lt;/p&gt; &#xA;&lt;p&gt;&#34;So...Gifcurry is just FFmpeg and ImageMagick?&#34;‚Äînope. Gifcurry hides all the goofy details so you can concentrate on what matters‚Äîthe almighty &lt;span&gt;üôå&lt;/span&gt; GIF.&lt;/p&gt; &#xA;&lt;p&gt;Become a GIF master &lt;span&gt;üí™&lt;/span&gt; with Gifcurry!&lt;/p&gt; &#xA;&lt;h2&gt;What do I need Gifcurry for? &lt;span&gt;ü§î&lt;/span&gt;&lt;/h2&gt; &#xA;&lt;p&gt;&lt;span&gt;‚òë&lt;/span&gt; Want to show off that new UI feature in a pull request? Gifcurry.&lt;br&gt; &lt;span&gt;‚òë&lt;/span&gt; Your template doesn&#39;t allow video in the hero image? Gifcurry.&lt;br&gt; &lt;span&gt;‚òë&lt;/span&gt; No GIF of your favorite movie scene? Gifcurry.&lt;br&gt; &lt;span&gt;‚òë&lt;/span&gt; Need a custom animated emoji for Slack? Gifcurry.&lt;br&gt; &lt;span&gt;‚òë&lt;/span&gt; Can&#39;t find the perfect GIF for that reply-all email? Gifcurry.&lt;br&gt; &lt;span&gt;‚òë&lt;/span&gt; Your README needs a GIF? Gifcurry.&lt;br&gt; &lt;span&gt;‚òë&lt;/span&gt; That presentation slide could use some animation? Gifcurry.&lt;br&gt; &lt;span&gt;‚òë&lt;/span&gt; Video doesn&#39;t auto play on iOS? Gifcurry.&lt;br&gt; &lt;span&gt;‚òë&lt;/span&gt; Time to promote your indie game? Gifcurry.&lt;br&gt; &lt;span&gt;‚òë&lt;/span&gt; Need to add subtitles to a video? Gifcurry.&lt;/p&gt; &#xA;&lt;p&gt;Gifcurry comes in handy &lt;span&gt;üîß&lt;/span&gt; for all sorts of scenarios.&lt;/p&gt; &#xA;&lt;h2&gt;What does the GUI look &lt;span&gt;üëÄ&lt;/span&gt; like?&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/SJ8zovM.gif&#34; alt=&#34;Gifcurry GUI&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;How do I use the command line interface (CLI)? &lt;span&gt;üñ•&lt;/span&gt;&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;gifcurry_cli [OPTIONS]&#xA;&#xA;FILE IO:&#xA;  -i --input-file=FILE   The input video file path.&#xA;  -o --output-file=FILE  The output GIF file path.&#xA;  -m --save-as-video     If present, saves the GIF as a video.&#xA;TIME:&#xA;  -s --start-time=NUM    The start time (in seconds) for the first frame.&#xA;  -e --end-time=NUM      The end time (in seconds) for the last frame.&#xA;OUTPUT FILE SIZE:&#xA;  -w --width=INT         How wide the output needs to be. Height will scale&#xA;                         to match.&#xA;  -f --fps=INT           How many frames per second the output should have.&#xA;  -c --color-count=INT   How many colors are used in the output.&#xA;  -d --dither            If present, uses dither.&#xA;CROP:&#xA;  -L --left-crop=NUM     The amount you wish to crop from the left.&#xA;  -R --right-crop=NUM    The amount you wish to crop from the right.&#xA;  -T --top-crop=NUM      The amount you wish to crop from the top.&#xA;  -B --bottom-crop=NUM   The amount you wish to crop from the bottom.&#xA;TEXT:&#xA;  -t --text-file=FILE    Either a text overlays YAML or SRT subtitles file&#xA;                         path.&#xA;  -? --help              Display help message&#xA;  -V --version           Print version information&#xA;&#xA;Visit https://github.com/lettier/gifcurry for more information.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Got a CLI example?&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;gifcurry_cli \&#xA;  -i ~/Videos/video.webm \&#xA;  -o ~/tmp/test \&#xA;  -s 150 \&#xA;  -e 151 \&#xA;  -t ~/tmp/text-overlays.yaml \&#xA;  -w 800 \&#xA;  -f 15 \&#xA;  -c 100 \&#xA;  -d&#xA;  -L 0.1 \&#xA;  -R 0.1 \&#xA;  -T 0.1 \&#xA;  -B 0.1 \&#xA;  -m&#xA;&#xA;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&#xA; &amp;nbsp;&amp;nbsp;&amp;nbsp; ‚ñÑ‚ñÑ‚ñà‚ñà‚ñà‚ñà&amp;nbsp;&amp;nbsp;  ‚ñÄ‚ñÄ‚ñà‚ñà‚ñà‚ñÑ&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&#xA;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ‚ñà‚ñà‚ñà‚ñà‚ñÄ&amp;nbsp;&amp;nbsp;&amp;nbsp;‚ñÑ &amp;nbsp;&amp;nbsp; ‚ñÄ‚ñà‚ñà‚ñà&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ‚ñÑ  &amp;nbsp;&amp;nbsp;&amp;nbsp;‚ñê‚ñà‚ñà‚ñå&amp;nbsp;&amp;nbsp; ‚ñÑ‚ñà‚ñà‚ñà‚ñÑ&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&#xA;&amp;nbsp;&amp;nbsp;‚ñÑ&amp;nbsp;&amp;nbsp;&amp;nbsp;‚ñê‚ñà‚ñà‚ñà&amp;nbsp;&amp;nbsp;&amp;nbsp;‚ñà‚ñà‚ñà‚ñà&amp;nbsp;&amp;nbsp;&amp;nbsp;‚ñÄ‚ñà‚ñà‚ñà &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;‚ñÑ‚ñà‚ñà‚ñà‚ñÄ‚ñÄ‚ñà‚ñà &amp;nbsp;&amp;nbsp;  &amp;nbsp;&amp;nbsp;&amp;nbsp;‚ñà‚ñà‚ñà&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&#xA;&amp;nbsp;‚ñê‚ñà‚ñå&amp;nbsp;&amp;nbsp;&amp;nbsp;‚ñà‚ñà &amp;nbsp;&amp;nbsp;‚ñê‚ñà‚ñà‚ñà&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;‚ñà‚ñà‚ñà‚ñà&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;‚ñà‚ñà‚ñà &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;‚ñê‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñå&amp;nbsp;‚ñÑ‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñê‚ñà‚ñà‚ñå&amp;nbsp;&amp;nbsp;‚ñà‚ñà‚ñå&amp;nbsp; ‚ñà‚ñà‚ñÑ‚ñà‚ñà‚ñå ‚ñà‚ñà‚ñÑ‚ñà‚ñà‚ñå&amp;nbsp;‚ñà‚ñà‚ñå&amp;nbsp;&amp;nbsp; ‚ñà‚ñà‚ñà&amp;nbsp;&#xA;&amp;nbsp;‚ñà‚ñà‚ñà &amp;nbsp;&amp;nbsp;‚ñê‚ñå&amp;nbsp;&amp;nbsp; ‚ñà‚ñà‚ñà&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;‚ñê‚ñà‚ñà‚ñà‚ñå&amp;nbsp;&amp;nbsp; ‚ñà‚ñà‚ñà&amp;nbsp;&amp;nbsp;‚ñà‚ñà‚ñà‚ñà‚ñå&amp;nbsp;‚ñê‚ñà‚ñà &amp;nbsp;&amp;nbsp;‚ñà‚ñà‚ñå&amp;nbsp;&amp;nbsp;‚ñà‚ñà‚ñà &amp;nbsp;&amp;nbsp; &amp;nbsp;‚ñê‚ñà‚ñà‚ñå&amp;nbsp;&amp;nbsp;‚ñà‚ñà‚ñå&amp;nbsp; ‚ñà‚ñà‚ñà‚ñÄ &amp;nbsp; ‚ñà‚ñà‚ñà‚ñÄ &amp;nbsp;&amp;nbsp;‚ñê‚ñà‚ñà &amp;nbsp;‚ñà‚ñà‚ñà&amp;nbsp;&amp;nbsp;&#xA;&amp;nbsp;‚ñà‚ñà‚ñà‚ñà&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;‚ñà‚ñà‚ñà‚ñÄ&amp;nbsp;&amp;nbsp;‚ñê‚ñà&amp;nbsp;&amp;nbsp;&amp;nbsp;‚ñà‚ñà‚ñà‚ñå&amp;nbsp;&amp;nbsp;&amp;nbsp;‚ñà‚ñà‚ñà&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;‚ñà‚ñà‚ñå&amp;nbsp;‚ñê‚ñà‚ñà &amp;nbsp;&amp;nbsp;‚ñà‚ñà‚ñå&amp;nbsp;&amp;nbsp;‚ñà‚ñà‚ñà&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;‚ñê‚ñà‚ñà‚ñå&amp;nbsp;&amp;nbsp;‚ñà‚ñà‚ñå&amp;nbsp; ‚ñà‚ñà‚ñå&amp;nbsp;&amp;nbsp;&amp;nbsp; ‚ñà‚ñà‚ñå&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;‚ñà‚ñà‚ñå‚ñê‚ñà‚ñà &amp;nbsp;&amp;nbsp;&#xA;&amp;nbsp;‚ñê‚ñà‚ñà‚ñà‚ñÑ&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;‚ñê‚ñà‚ñà‚ñå&amp;nbsp;&amp;nbsp;&amp;nbsp;‚ñà‚ñà &amp;nbsp;&amp;nbsp; ‚ñà‚ñà&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ‚ñà‚ñà‚ñà‚ñÑ‚ñÑ‚ñÑ‚ñà‚ñà‚ñå&amp;nbsp;‚ñê‚ñà‚ñà &amp;nbsp;&amp;nbsp;‚ñà‚ñà‚ñå&amp;nbsp;&amp;nbsp; ‚ñà‚ñà‚ñà‚ñÑ‚ñÑ‚ñà  ‚ñà‚ñà‚ñà‚ñÑ‚ñà‚ñà‚ñà‚ñå&amp;nbsp; ‚ñà‚ñà‚ñå&amp;nbsp;&amp;nbsp;&amp;nbsp; ‚ñà‚ñà‚ñå&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;‚ñà‚ñà‚ñà‚ñà‚ñå&amp;nbsp;&amp;nbsp;&amp;nbsp;&#xA;&amp;nbsp;&amp;nbsp;‚ñÄ‚ñà‚ñà‚ñà&amp;nbsp;&amp;nbsp;&amp;nbsp;‚ñÄ‚ñà‚ñà‚ñà&amp;nbsp;&amp;nbsp;&amp;nbsp;‚ñê‚ñà‚ñà‚ñà&amp;nbsp;&amp;nbsp;&amp;nbsp;‚ñÄ &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ &amp;nbsp;&amp;nbsp;&amp;nbsp;‚ñÄ‚ñÄ &amp;nbsp;&amp;nbsp;‚ñÄ‚ñÄ &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ‚ñÄ‚ñÄ‚ñÄ &amp;nbsp;&amp;nbsp;  ‚ñÄ‚ñÄ‚ñÄ   &amp;nbsp;&amp;nbsp;‚ñÄ‚ñÄ &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;‚ñÄ‚ñÄ &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ‚ñà‚ñà‚ñà&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&#xA;&amp;nbsp;&amp;nbsp;&amp;nbsp; ‚ñà‚ñà‚ñà‚ñÑ&amp;nbsp;&amp;nbsp;&amp;nbsp;‚ñÄ &amp;nbsp;&amp;nbsp; ‚ñà‚ñà‚ñà‚ñà‚ñå&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ‚ñà‚ñà‚ñà‚ñÄ&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&#xA;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ‚ñÄ‚ñà‚ñà‚ñà‚ñÑ‚ñÑ &amp;nbsp;&amp;nbsp;‚ñà‚ñà‚ñà‚ñà‚ñà‚ñÄ&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&#xA;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&#xA;&#xA;&#xA;Gifcurry 6.0.1.0&#xA;(C) 2016 David Lettier&#xA;lettier.com&#xA;&#xA;[INFO] Here are your settings.&#xA;&#xA;  - FILE IO:&#xA;    - Input File:    /home/Videos/video.webm&#xA;    - Output File:   /home/tmp/test.webm&#xA;    - Save As Video: Yes&#xA;  - TIME:&#xA;    - Start Second: 150.000&#xA;    - End   Second: 151.000&#xA;  - OUTPUT FILE SIZE:&#xA;    - Width:       800px&#xA;    - FPS:         15&#xA;    - Color Count: 100&#xA;    - Dither:      True&#xA;  - TEXT:&#xA;    - Text: This is a test.&#xA;      - Font:&#xA;        - Family:  Sans&#xA;        - Size:    30&#xA;        - Style:   Normal&#xA;        - Stretch: Normal&#xA;        - Weight:  800&#xA;      - Time:&#xA;        - Start Second: 150.000&#xA;        - End   Second: 151.000&#xA;      - Translation:&#xA;        - Origin: NorthWest&#xA;        - X:      0.0&#xA;        - Y:      0.0&#xA;      - Rotation:&#xA;        - Degrees: 0&#xA;      - Outline:&#xA;        - Size: 10&#xA;        - Color: rgb(1,100,10)&#xA;      - Fill:&#xA;        - Color: rgb(255,255,0)&#xA;  - CROP:&#xA;    - Left:   0.100&#xA;    - Right:  0.100&#xA;    - Top:    0.100&#xA;    - Bottom: 0.100&#xA;&#xA;[INFO] Writing the temporary frames to: /home/.cache/gifcurry/gifcurry-frames30450&#xA;[INFO] Adding text.&#xA;[INFO] Converting the frames to the specified color count.&#xA;[INFO] Saving your video to: /home/tmp/test.webm&#xA;[INFO] All done.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;What is the format for the text overlays YAML file? &lt;span&gt;üî¢&lt;/span&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Here&#39;s an example file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;- text: This is an example.&#xA;  fontFamily:   Sans&#xA;  fontStyle:    Oblique&#xA;  fontStretch:  Normal&#xA;  fontWeight:   30&#xA;  fontSize:     800&#xA;  origin:       NorthWest&#xA;  xTranslation: 0.0&#xA;  yTranslation: 0.0&#xA;  rotation:     20&#xA;  startTime:    5.000&#xA;  endTime:      8.000&#xA;  outlineSize:  7&#xA;  outlineColor: rgba(1,100,10,1.0)&#xA;  fillColor:    rgba(255,255,0,0.0)&#xA;- text: This is another example.&#xA;  fontFamily:   Serif&#xA;  fontStyle:    Italic&#xA;  fontStretch:  Condensed&#xA;  fontWeight:   30&#xA;  fontSize:     800&#xA;  origin:       Center&#xA;  xTranslation: 10.0&#xA;  yTranslation: 11.0&#xA;  rotation:     20&#xA;  startTime:    5.000&#xA;  endTime:      8.000&#xA;  outlineSize:  7&#xA;  outlineColor: rgb(1,11,100)&#xA;  fillColor:    rgba(255,0,0,0.0)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;fontStyle&lt;/code&gt; can be:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Any&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Italic&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Normal&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Oblique&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;code&gt;fontStretch&lt;/code&gt; can be:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Any&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Condensed&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Expanded&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ExtraCondensed&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ExtraExpanded&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Normal&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;SemiCondensed&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;SemiExpanded&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;UltraCondensed&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;UltraExpanded&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;code&gt;origin&lt;/code&gt; can be:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;North&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;NorthEast&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;East&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;SouthEast&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;South&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;SouthWest&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;West&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;NorthWest&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;code&gt;outlineSize&lt;/code&gt; ranges from &lt;code&gt;0&lt;/code&gt; to &lt;code&gt;10&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;outlineColor&lt;/code&gt; and &lt;code&gt;fillColor&lt;/code&gt; can either be &lt;code&gt;rgba(red,green,blue,alpha)&lt;/code&gt; or &lt;code&gt;rgb(red,green,blue)&lt;/code&gt; where &lt;code&gt;red&lt;/code&gt;, &lt;code&gt;green&lt;/code&gt;, and &lt;code&gt;blue&lt;/code&gt; range from &lt;code&gt;0&lt;/code&gt; to &lt;code&gt;255&lt;/code&gt; and &lt;code&gt;alpha&lt;/code&gt; ranges from &lt;code&gt;0.0&lt;/code&gt; to &lt;code&gt;1.0&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;How do I get a copy of Gifcurry? &lt;span&gt;üíæ&lt;/span&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Gifcurry works on Linux, Mac, and most likely Windows. Make sure you have FFmpeg, GStreamer, ImageMagick, and GTK+ installed on your machine. To find the latest version of Gifcurry, head over to the &lt;a href=&#34;https://github.com/lettier/gifcurry/releases&#34;&gt;releases page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;I use Linux. &lt;span&gt;üêß&lt;/span&gt;&lt;/h3&gt; &#xA;&lt;p&gt;If you use Linux then the easiest way to grab a copy of Gifcurry is by downloading the &lt;a href=&#34;https://github.com/lettier/gifcurry/releases/download/6.0.1.0/gifcurry-6.0.1.0-x86_64.AppImage&#34;&gt;AppImage&lt;/a&gt;. After you download the &lt;a href=&#34;https://github.com/lettier/gifcurry/releases/download/6.0.1.0/gifcurry-6.0.1.0-x86_64.AppImage&#34;&gt;AppImage&lt;/a&gt;, right click on it, select permissions, and check the box near execute. With that out of the way‚Äîyou&#39;re all set‚Äîjust double click on the AppImage and the GUI will fire right up.&lt;/p&gt; &#xA;&lt;p&gt;You can also download and install the &lt;a href=&#34;https://github.com/lettier/gifcurry/releases/download/6.0.1.0/gifcurry-6.0.1.0-x86_64.AppImage&#34;&gt;AppImage&lt;/a&gt; using the handy &lt;a href=&#34;https://raw.githubusercontent.com/lettier/gifcurry/master/packaging/linux/app-image/gifcurry-app-image-install.sh&#34;&gt;AppImage install script&lt;/a&gt; (right click and save link as). Download the script, right click on it, select permissions, check the box near execute, and double click on it. You should now see Gifcurry listed alongside your other installed programs.&lt;/p&gt; &#xA;&lt;p&gt;If you want the CLI then download the &lt;a href=&#34;https://github.com/lettier/gifcurry/releases/download/6.0.1.0/gifcurry-linux-6.0.1.0.tar.gz&#34;&gt;prebuilt version&lt;/a&gt; for Linux, extract it, open up your terminal, &lt;code&gt;cd&lt;/code&gt; to the bin folder, and then run &lt;code&gt;gifcurry_cli -?&lt;/code&gt;. As an added bonus, inside the bin directory is the GUI version too so now you have both.&lt;/p&gt; &#xA;&lt;h4&gt;I use Arch/Manjaro/Antergos/pacman. &lt;span&gt;üëª&lt;/span&gt;&lt;/h4&gt; &#xA;&lt;p&gt;If you&#39;d rather install Gifcurry via pacman then copy the following into your terminal.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd&#xA;sudo pacman -S git ffmpeg imagemagick gstreamer gst-plugins-base-libs gst-plugins-base gst-plugins-good gst-plugins-bad gst-libav&#xA;cd &#34;$HOME/Downloads&#34;&#xA;git clone https://aur.archlinux.org/gifcurry.git&#xA;cd gifcurry&#xA;makepkg -sic&#xA;cd &#34;$HOME/Downloads&#34;&#xA;rm -rf gifcurry&#xA;cd&#xA;gifcurry_cli -?&#xA;gifcurry_gui&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;I use Ubuntu/Mint/Debian/Deepin/snap. &lt;span&gt;üåÄ&lt;/span&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Gifcurry is available as a snap from &lt;a href=&#34;https://snapcraft.io/&#34;&gt;Snapcraft&lt;/a&gt;. If you don&#39;t already have &lt;code&gt;snap&lt;/code&gt;, go ahead and install it using the command &lt;code&gt;sudo apt install snapd&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can install the &lt;a href=&#34;https://snapcraft.io/gifcurry&#34;&gt;Gifcurry snap&lt;/a&gt; right from your browser or via the command line. For the command line route, paste the following into your terminal.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;snap install gifcurry&#xA;sudo snap connect gifcurry:removable-media&#xA;gifcurry&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://snapcraft.io/gifcurry&#34;&gt;Gifcurry snap&lt;/a&gt; only comes with the GUI. If you want the CLI, download the &lt;a href=&#34;https://github.com/lettier/gifcurry/releases/download/6.0.1.0/gifcurry-linux-6.0.1.0.tar.gz&#34;&gt;prebuilt version&lt;/a&gt; for Linux.&lt;/p&gt; &#xA;&lt;h3&gt;I use Mac. &lt;span&gt;üçé&lt;/span&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Mac users can download the &lt;a href=&#34;https://raw.githubusercontent.com/lettier/gifcurry/master/packaging/mac/gifcurry-mac-install-script.command&#34;&gt;Mac install script&lt;/a&gt; by holding down control, clicking the link, selecting &#34;Save Link As...&#34;, selecting where Downloads, and clicking save. To run the script, hold down the command key and press the space bar. Now type terminal and hit enter. After the terminal comes up, copy and paste the following.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd ~/Downloads&#xA;chmod +x gifcurry-mac-install-script.command&#xA;./gifcurry-mac-install-script.command&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After running the install script, a shortcut to both the Gifcurry GUI and CLI will be on your desktop.&lt;/p&gt; &#xA;&lt;h3&gt;I&#39;m a Haskell developer. &lt;span&gt;üî®&lt;/span&gt;&lt;/h3&gt; &#xA;&lt;p&gt;If you develop Haskell programs then the easiest way to build Gifcurry is with &lt;a href=&#34;https://docs.haskellstack.org/en/stable/README/&#34;&gt;Haskell Stack&lt;/a&gt;. Copy the following into your terminal.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/lettier/gifcurry.git&#xA;cd gifcurry&#xA;stack setup&#xA;stack install alex happy&#xA;stack install gtk2hs-buildtools&#xA;stack install hsc2hs&#xA;stack install&#xA;$HOME/.local/bin/gifcurry_cli -?&#xA;$HOME/.local/bin/gifcurry_gui&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;What dependencies does Gifcurry use? &lt;span&gt;ü§î&lt;/span&gt;&lt;/h2&gt; &#xA;&lt;h3&gt;To run Gifcurry. &lt;span&gt;üèÉ&lt;/span&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.gtk.org/download/index.php&#34;&gt;GTK+ &amp;gt;= 3.10&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.ffmpeg.org/download.html&#34;&gt;FFmpeg &amp;gt;= 2.8.15&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gstreamer.freedesktop.org/download/&#34;&gt;GStreamer &amp;gt;= 1.0&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://gstreamer.freedesktop.org/modules/&#34;&gt;GStreamer Plugins&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.imagemagick.org/script/download.php&#34;&gt;ImageMagick &amp;gt;= 6&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;To build Gifcurry. &lt;span&gt;üë∑&lt;/span&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://wiki.gnome.org/action/show/Projects/GObjectIntrospection&#34;&gt;GObject Introspection&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.haskellstack.org/en/stable/README/&#34;&gt;Haskell Stack&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;What is the license? &lt;span&gt;üìú&lt;/span&gt;&lt;/h2&gt; &#xA;&lt;p&gt;For license information, see &lt;a href=&#34;https://raw.githubusercontent.com/lettier/gifcurry/master/LICENSE&#34;&gt;LICENSE&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Who wrote Gifcurry? &lt;span&gt;¬©&lt;/span&gt;&lt;/h2&gt; &#xA;&lt;p&gt;(C) 2016 David Lettier&lt;br&gt; &lt;a href=&#34;http://www.lettier.com/&#34;&gt;lettier.com&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>CardanoSolutions/kupo</title>
    <updated>2022-08-15T01:42:14Z</updated>
    <id>tag:github.com,2022-08-15:/CardanoSolutions/kupo</id>
    <link href="https://github.com/CardanoSolutions/kupo" rel="alternate"></link>
    <summary type="html">&lt;p&gt;üêπ Fast, lightweight &amp; configurable chain-index for Cardano.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/CardanoSolutions/kupo/master/docs/kupo.png&#34; height=&#34;210&#34; width=&#34;320&#34;&gt; &lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;strong&gt;Kupo&lt;/strong&gt; is fast, lightweight and configurable &lt;strong&gt;chain-index&lt;/strong&gt; for the Cardano blockchain. It synchronizes data from the blockchain according to &lt;strong&gt;patterns&lt;/strong&gt; matching addresses present in transaction outputs and builds a &lt;strong&gt;lookup table&lt;/strong&gt; from matches to their associated &lt;strong&gt;output references&lt;/strong&gt;, &lt;strong&gt;values&lt;/strong&gt;, &lt;strong&gt;datums&lt;/strong&gt; and &lt;strong&gt;scripts&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/CardanoSolutions/kupo/master/docs/architecture-diagram.png&#34;&gt; &lt;/p&gt; &#xA;&lt;h1&gt;Getting Started&lt;/h1&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://cardanosolutions.github.io/kupo&#34;&gt;user-manual üìñ&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Roadmap&lt;/h1&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/CardanoSolutions/kupo/projects?type=classic&#34;&gt;projects üéØ&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;System Requirements&lt;/h1&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Category&lt;/th&gt; &#xA;   &lt;th&gt;Value&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Operating System&lt;/td&gt; &#xA;   &lt;td&gt;Linux 64-bit&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;RAM&lt;/td&gt; &#xA;   &lt;td&gt;1280MB&lt;sup&gt;1&lt;/sup&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;CPU&lt;/td&gt; &#xA;   &lt;td&gt;2 cores&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Disk Storage&lt;/td&gt; &#xA;   &lt;td&gt;Variable (few MB, up to 40GB)&lt;sup&gt;2&lt;/sup&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;sup&gt;&lt;strong&gt;1&lt;/strong&gt;&lt;/sup&gt; The maximum memory usage depends on runtime flags and internal settings. This can be made lower if necessary (possibly as small as a hundred megabytes) by tweaking those settings. The obvious counter-part being slower synchronization times when syncing over large chunks of data. When synchronized, however, this has close to no impact.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;sup&gt;&lt;strong&gt;2&lt;/strong&gt;&lt;/sup&gt; The size of the database depends on the patterns the indexer is configured with. Storing every single entry of Mainnet currently come close to ~40GB. However, if pruned (i.e. only keep unspent entries), Mainnet is around 4GB.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h1&gt;Continuous Integration&lt;/h1&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Status&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/CardanoSolutions/kupo/actions/workflows/docker.yaml&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/workflow/status/cardanosolutions/kupo/Docker?style=for-the-badge&amp;amp;label=&amp;amp;logo=Docker&amp;amp;logoColor=000000&amp;amp;color=f9dd24&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Docker build, shipping images to &lt;a href=&#34;https://hub.docker.com/r/cardanosolutions/kupo&#34;&gt;Dockerhub&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/CardanoSolutions/kupo/actions/workflows/nix.yaml&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/workflow/status/cardanosolutions/kupo/Nix?style=for-the-badge&amp;amp;label=&amp;amp;logo=NixOS&amp;amp;logoColor=000000&amp;amp;color=f9dd24&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Nix build, providing static binary executables as artifacts.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/CardanoSolutions/kupo/actions/workflows/pages/pages-build-deployment&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/deployments/cardanosolutions/kupo/github-pages?style=for-the-badge&amp;amp;label=&amp;amp;logo=readthedocs&amp;amp;logoColor=000000&amp;amp;color=f9dd24&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://cardanosolutions.github.io/kupo&#34;&gt;User manual&lt;/a&gt; and API reference deployment.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://img.shields.io/static/v1?style=for-the-badge&amp;amp;label=&amp;amp;message=90%&amp;amp;logo=codecov&amp;amp;logoColor=000000&amp;amp;color=f9dd24&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Test code coverage. Learn more about the &lt;a href=&#34;https://github.com/CardanoSolutions/kupo/tree/master/test#testing-strategy&#34;&gt;testing strategy&lt;/a&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h1&gt;Alternatives&lt;/h1&gt; &#xA;&lt;p&gt;Kupo is well-suited for small applications which need either:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;a global chain index for resolving output references;&lt;/li&gt; &#xA; &lt;li&gt;a on-the-fly monitoring of an address over a short period of time.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;It runs in constant memory and is blazing fast. Yet, its use-cases are limited. Here below we provide some possible alternatives with different trade-offs:&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;oura&lt;/summary&gt; &#xA; &lt;p&gt;Key difference(s): Oura in itself does not provide any chain-indexing, but it supports pluggable sinks where filtered data from the Cardano blockchain can be dumped into (e.g. Elastic Search or Kafka). It also supports a wider variety of events. All-in-all, a good fit for more elaborate solutions.&lt;/p&gt; &#xA; &lt;p align=&#34;right&#34;&gt; &lt;a href=&#34;https://github.com/txpipe/oura/#readme&#34;&gt;Learn more&lt;/a&gt; &lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;scrolls&lt;/summary&gt; &#xA; &lt;p&gt;Key differences(s): Scrolls provides (at this stage) only an in-memory storage via Redis. This means that it&#39;s not possible to index the entire chain without resorting to large memory requirements. It also synchronizes blocks from the chain using the node-to-node protocol which means that it can do so on any remote node relay, but it is also slower (because a more defensive protocol) than the node-to-client protocol upon which Kupo relies.&lt;/p&gt; &#xA; &lt;p align=&#34;right&#34;&gt; &lt;a href=&#34;https://github.com/txpipe/scrolls&#34;&gt;Learn more&lt;/a&gt; &lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;cardano-db-sync&lt;/summary&gt; &#xA; &lt;p&gt;Key difference(s): cardano-db-sync synchronizes ALL data from the Cardano blockchain, whereas Kupo focuses only on transaction outputs. This comes with obvious trade-offs in both on-disk storage but also runtime requirements.&lt;/p&gt; &#xA; &lt;p align=&#34;right&#34;&gt; &lt;a href=&#34;https://github.com/input-output-hk/cardano-db-sync#cardano-db-sync&#34;&gt;Learn more&lt;/a&gt; &lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;plutus-chain-index&lt;/summary&gt; &#xA; &lt;p&gt;Key differences(s): the plutus-chain-index is the native component behind the PAB (Plutus Application Backend). It is however intended to be user-facing and as such, does not provide a friendly user experience for uses outside of the PAB&#39;s internals.&lt;/p&gt; &#xA; &lt;p align=&#34;right&#34;&gt; &lt;a href=&#34;https://github.com/input-output-hk/plutus-apps/tree/main/plutus-chain-index-core#plutus-chain-index&#34;&gt;Learn more&lt;/a&gt; &lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Sponsors üíñ&lt;/h2&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://rraayy.com/&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/65092852?s=45&amp;amp;v=4&#34; width=&#34;45&#34; height=&#34;45&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://sundaeswap.finance/&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/83610786?s=45&amp;amp;v=4&#34; width=&#34;45&#34; height=&#34;45&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/savaki&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/108710?s=45&amp;amp;v=4&#34; width=&#34;45&#34; height=&#34;45&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://blockfrost.io/&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/70073210?s=45&amp;amp;v=4&#34; width=&#34;45&#34; height=&#34;45&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://jpeg.store/&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/98781883?s=200&amp;amp;v=4&#34; width=&#34;45&#34; height=&#34;45&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/jacoblambda&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/9424043?s=45&amp;amp;v=4&#34; width=&#34;45&#34; height=&#34;45&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/minswap&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/80548193?s=45&amp;amp;v=4&#34; width=&#34;45&#34; height=&#34;45&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Quantumplation&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/49870?v=4&#34; width=&#34;45&#34; height=&#34;45&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/codybutz&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/3670430?s=45&amp;amp;v=4&#34; width=&#34;45&#34; height=&#34;45&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/scarmuega&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/653886?s=45&amp;amp;v=4&#34; width=&#34;45&#34; height=&#34;45&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/mrbrinker&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/41247403?s=45&amp;amp;v=4&#34; width=&#34;45&#34; height=&#34;45&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/sacrelege&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/7289595?v=4&#34; width=&#34;45&#34; height=&#34;45&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://ccvault.io/&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/86010408?s=45&amp;amp;v=4&#34; width=&#34;45&#34; height=&#34;45&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/artemwright&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/83517471?s=45&amp;amp;v=4&#34; width=&#34;45&#34; height=&#34;45&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/kayandra&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/5002506?s=45&amp;amp;v=4&#34; width=&#34;45&#34; height=&#34;45&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/tapiocapool&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/80033713?s=45&amp;amp;v=4&#34; width=&#34;45&#34; height=&#34;45&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://cardanosolutions.github.io/kupo&#34;&gt;üìñ User Manual&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/CardanoSolutions/kupo/master/CONTRIBUTING.md&#34;&gt; üìê Contributing&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/CardanoSolutions/kupo/master/CHANGELOG.md&#34;&gt; üíæ Changelog&lt;/a&gt; | &lt;a href=&#34;https://twitter.com/_KtorZ_&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/CardanoSolutions/kupo/master/.github/twitter.svg?sanitize=true&#34; alt=&#34;Twitter&#34;&gt; Twitter (@_KtorZ_)&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/cardanosolutions/kupo/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/CardanoSolutions/kupo/master/.github/license.svg?sanitize=true&#34; alt=&#34;license=MPL-2.0&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>