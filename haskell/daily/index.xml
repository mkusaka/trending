<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Haskell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-05-15T01:34:42Z</updated>
  <subtitle>Daily Trending of Haskell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>jgm/texmath</title>
    <updated>2023-05-15T01:34:42Z</updated>
    <id>tag:github.com,2023-05-15:/jgm/texmath</id>
    <link href="https://github.com/jgm/texmath" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Haskell library for converting LaTeX math to MathML.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;texmath&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/jgm/texmath/actions&#34;&gt;&lt;img src=&#34;https://github.com/jgm/texmath/workflows/CI%20tests/badge.svg?sanitize=true&#34; alt=&#34;CI tests&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;texmath is a Haskell library for converting between formats used to represent mathematics. Currently it provides functions to read and write TeX math, presentation MathML, and OMML (Office Math Markup Language, used in Microsoft Office), and to write Gnu eqn, typst, and &lt;a href=&#34;http://github.com/jgm/pandoc&#34;&gt;pandoc&lt;/a&gt;&#39;s native format (allowing conversion, using pandoc, to a variety of different markup formats). The TeX reader and writer supports basic LaTeX and AMS extensions, and it can parse and apply LaTeX macros. The package also includes several utility modules which may be useful for anyone looking to manipulate either TeX math or MathML. For example, a copy of the MathML operator dictionary is included.&lt;/p&gt; &#xA;&lt;p&gt;You can &lt;a href=&#34;http://johnmacfarlane.net/texmath.html&#34;&gt;try it out online here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;By default, only the Haskell library is installed. To install a test program, &lt;code&gt;texmath&lt;/code&gt;, use the &lt;code&gt;executable&lt;/code&gt; Cabal flag:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cabal install -fexecutable&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default, the executable will be installed in &lt;code&gt;~/.cabal/bin&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Alternatively, texmath can be installed using &lt;a href=&#34;https://github.com/commercialhaskell/stack&#34;&gt;stack&lt;/a&gt;. Install the stack binary somewhere in your path. Then, in the texmath repository,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;stack setup&#xA;stack install --flag texmath:executable&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;texmath&lt;/code&gt; binary will be put in &lt;code&gt;~/.local/bin&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Macro definitions may be included before a LaTeX formula.&lt;/p&gt; &#xA;&lt;h1&gt;Running texmath as a server&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;texmath&lt;/code&gt; will behave as a CGI script when called under the name &lt;code&gt;texmath-cgi&lt;/code&gt; (e.g. through a symbolic link). The file &lt;code&gt;cgi/texmath.html&lt;/code&gt; contains an example of how it can be used.&lt;/p&gt; &#xA;&lt;p&gt;But it is also possible to compile a full webserver with a JSON API. To do this, set the &lt;code&gt;server&lt;/code&gt; cabal flag, e.g.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;stack install --flag texmath:server&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To run the server on port 3000:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;texmath-server -p 3000&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Sample of use, with &lt;code&gt;httpie&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;% http --verbose localhost:3000/convert text=&#39;2^2&#39; from=tex to=mathml display:=false Accept:&#39;text/plain&#39;&#xA;POST /convert HTTP/1.1&#xA;Accept: text/plain&#xA;Accept-Encoding: gzip, deflate&#xA;Connection: keep-alive&#xA;Content-Length: 64&#xA;Content-Type: application/json&#xA;Host: localhost:3000&#xA;User-Agent: HTTPie/3.1.0&#xA;&#xA;{&#xA;    &#34;display&#34;: false,&#xA;    &#34;from&#34;: &#34;tex&#34;,&#xA;    &#34;text&#34;: &#34;2^2&#34;,&#xA;    &#34;to&#34;: &#34;mathml&#34;&#xA;}&#xA;&#xA;&#xA;HTTP/1.1 200 OK&#xA;Content-Type: text/plain;charset=utf-8&#xA;Date: Mon, 21 Mar 2022 18:29:26 GMT&#xA;Server: Warp/3.3.17&#xA;Transfer-Encoding: chunked&#xA;&#xA;&amp;lt;math display=&#34;inline&#34; xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&amp;gt;&#xA;  &amp;lt;msup&amp;gt;&#xA;    &amp;lt;mn&amp;gt;2&amp;lt;/mn&amp;gt;&#xA;    &amp;lt;mn&amp;gt;2&amp;lt;/mn&amp;gt;&#xA;  &amp;lt;/msup&amp;gt;&#xA;&amp;lt;/math&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Possible values for &lt;code&gt;from&lt;/code&gt; are &lt;code&gt;tex&lt;/code&gt;, &lt;code&gt;mathml&lt;/code&gt;, and &lt;code&gt;omml&lt;/code&gt;. Possible values for &lt;code&gt;to&lt;/code&gt; are &lt;code&gt;tex&lt;/code&gt;, &lt;code&gt;mathml&lt;/code&gt;, &lt;code&gt;omml&lt;/code&gt;, &lt;code&gt;eqn&lt;/code&gt;, and &lt;code&gt;pandoc&lt;/code&gt; (JSON-encoded Pandoc).&lt;/p&gt; &#xA;&lt;p&gt;Alternatively, you can use the &lt;code&gt;convert-batch&lt;/code&gt; endpoint to pass in a JSON-encoded list of conversions and get back a JSON-encoded list of results.&lt;/p&gt; &#xA;&lt;h1&gt;Generating lookup tables&lt;/h1&gt; &#xA;&lt;p&gt;There are three main lookup tables which are built form externally compiled lists. This section contains information about how to modify and regenerate these tables.&lt;/p&gt; &#xA;&lt;p&gt;In the &lt;code&gt;lib&lt;/code&gt; direction there are two sub-directories which contain the necessary files.&lt;/p&gt; &#xA;&lt;h2&gt;MMLDict.hs&lt;/h2&gt; &#xA;&lt;p&gt;The utility program &lt;code&gt;xsltproc&lt;/code&gt; is required. You can find these files in &lt;code&gt;lib/mmldict/&lt;/code&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;If desired replace &lt;code&gt;unicode.xml&lt;/code&gt; with and updated version (you can download a copy from &lt;a href=&#34;http://www.w3.org/TR/xml-entity-names/#source&#34;&gt;here&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;xsltproc -o dictionary.xml operatorDictionary.xsl unicode.xml&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;runghc generateMMLDict.hs&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Replace the operator table at the bottom of &lt;code&gt;src/Text/TeXMath/Readers/MathML/MMLDict.hs&lt;/code&gt; with the contents of &lt;code&gt;mmldict.hs&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;ToTeXMath.hs&lt;/h2&gt; &#xA;&lt;p&gt;You can find these files in &lt;code&gt;lib/totexmath/&lt;/code&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;If desired, replace &lt;code&gt;unimathsymbols.txt&lt;/code&gt; with an updated version from &lt;a href=&#34;http://milde.users.sourceforge.net/LUCR/Math/&#34;&gt;here&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;runghc unicodetotex.hs&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Replace the record table at the bottom of &lt;code&gt;src/Text/TeXMath/Unicode/ToTeXMath.hs&lt;/code&gt; with the contents of &lt;code&gt;UnicodeToLaTeX.hs&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;ToUnicode.hs&lt;/h2&gt; &#xA;&lt;p&gt;You can find these files in &lt;code&gt;lib/tounicode/&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;If desired, replace &lt;code&gt;UnicodeData.txt&lt;/code&gt; with an updated verson from &lt;a href=&#34;ftp://ftp.unicode.org/Public/UNIDATA/UnicodeData.txt&#34;&gt;here&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;runghc mkUnicodeTable.hs&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Replace the table at the bottom of &lt;code&gt;src/Text/TeXMath/Unicode/ToUnicode.hs&lt;/code&gt; with the output.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Editing the tables&lt;/h2&gt; &#xA;&lt;p&gt;It is not necessary to edit the source files to add records to the tables. To add to or modify a table it is easier to add modify either &lt;code&gt;unicodetotex.hs&lt;/code&gt; or &lt;code&gt;generateMMLDict.hs&lt;/code&gt;. This is easily achieved by adding an item to the corresponding &lt;code&gt;updates&lt;/code&gt; lists. After making the changes, follow the above steps to regenerate the table.&lt;/p&gt; &#xA;&lt;h1&gt;The test suite&lt;/h1&gt; &#xA;&lt;p&gt;To run the test suite, do &lt;code&gt;cabal test&lt;/code&gt; or &lt;code&gt;stack test&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;In its standard mode, the test suite will run golden tests of the individual readers and writers. Reader tests can be found in &lt;code&gt;test/reader/{mml,omml,tex}&lt;/code&gt;, and writer tests in &lt;code&gt;test/writer/{eqn,mml,omml,tex}&lt;/code&gt;. Regression tests linked to specific issues are in &lt;code&gt;test/regression&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Each test file consists of an input and an expected output. The input begins after a line &lt;code&gt;&amp;lt;&amp;lt;&amp;lt; FORMAT&lt;/code&gt; and the output begins after a line &lt;code&gt;&amp;gt;&amp;gt;&amp;gt; FORMAT&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If many tests fail as a result of changes, but the test failures are all because of improvements in the output, you can pass &lt;code&gt;--accept&lt;/code&gt; to the test suite (e.g., with &lt;code&gt;--test-arguments=--accept&lt;/code&gt; on &lt;code&gt;stack test&lt;/code&gt;), and the existing golden files will be overwritten. If you do this, inspect the outputs very carefully to make sure they are correct.&lt;/p&gt; &#xA;&lt;p&gt;If you pass the &lt;code&gt;--roundtrip&lt;/code&gt; option into the test suite (e.g., using &lt;code&gt;--test-arguments=--roundtrip&lt;/code&gt; with &lt;code&gt;stack test&lt;/code&gt;), round-trip tests will be run instead. Many of these will fail. In these tests, the native inputs in &lt;code&gt;test/roundtrip/*.native&lt;/code&gt; will be converted to (respectively) &lt;code&gt;mml&lt;/code&gt;, &lt;code&gt;omml&lt;/code&gt;, or &lt;code&gt;tex&lt;/code&gt;, then converted back, and the result will be compared with the starting point. Although we don&#39;t guarantee that this kind of round-trip transformation will be the identity, looking at cases where it fails can be a guide to improvements.&lt;/p&gt; &#xA;&lt;h1&gt;Authors&lt;/h1&gt; &#xA;&lt;p&gt;John MacFarlane wrote the original TeX reader, MathML writer, Eq writer, and OMML writer. Matthew Pickering contributed the MathML reader, the TeX writer, and many of the auxiliary modules. Jesse Rosenthal contributed the OMML reader. Thanks also to John Lenz for many contributions.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>tomjaguarpaw/haskell-opaleye</title>
    <updated>2023-05-15T01:34:42Z</updated>
    <id>tag:github.com,2023-05-15:/tomjaguarpaw/haskell-opaleye</id>
    <link href="https://github.com/tomjaguarpaw/haskell-opaleye" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Brief introduction to Opaleye &lt;a href=&#34;https://hackage.haskell.org/package/opaleye&#34;&gt;&lt;img src=&#34;https://img.shields.io/hackage/v/opaleye.svg?label=Hackage&#34; alt=&#34;Hackage version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/tomjaguarpaw/haskell-opaleye/actions&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/workflow/status/tomjaguarpaw/haskell-opaleye/ci/master.svg?sanitize=true&#34; alt=&#34;Build status&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;Opaleye is a Haskell library that provides an SQL-generating embedded domain specific language for targeting Postgres. You need Opaleye if you want to use Haskell to write typesafe and composable code to query a Postgres database.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&#34;Opaleye really is great. You&#39;ve managed to bring what is so wonderful about relational databases and give it type safety and composition (i.e. what is wonderful about Haskell)&#34; – Daniel Patterson, &lt;a href=&#34;http://positiondev.com/&#34;&gt;Position Development&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&#34;We use it for most of our DB code. It&#39;s very flexible and almost always as performant as manually written queries&#34; – &lt;a href=&#34;https://github.com/bergmark&#34;&gt;Adam Bergmark&lt;/a&gt;, &lt;a href=&#34;http://www.silk.co/&#34;&gt;Silk.co&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&#34;Opaleye is absolutely fantastic. It has been solid in production for years!&#34; – &lt;a href=&#34;https://github.com/wraithm&#34;&gt;Matt Wraith&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&#34;Opaleye just works, and it’s my personal recommendation ... I like it a lot&#34; – &lt;a href=&#34;https://www.williamyaoh.com/posts/2019-12-14-typesafe-db-libraries.html&#34;&gt;William Yao&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Opaleye allows you to define your database tables and write queries against them in Haskell code, and aims to be typesafe in the sense that if your code compiles then the generated SQL query will not fail at runtime. A wide range of SQL functionality is supported including inner and outer joins, restriction, aggregation, distinct, sorting and limiting, unions and differences. Facilities to insert to, update and delete from tables are also provided. Code written using Opaleye is composable at a very fine level of granularity, promoting code reuse and high levels of abstraction.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Opaleye&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Github: &lt;a href=&#34;https://github.com/tomjaguarpaw/haskell-opaleye&#34;&gt;https://github.com/tomjaguarpaw/haskell-opaleye&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Hackage: &lt;a href=&#34;https://hackage.haskell.org/package/opaleye&#34;&gt;https://hackage.haskell.org/package/opaleye&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Tutorials&lt;/h2&gt; &#xA;&lt;p&gt;Please get started with Opaleye by referring to these two tutorials&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tomjaguarpaw/haskell-opaleye/raw/master/Doc/Tutorial/TutorialBasic.lhs&#34;&gt;Basic tutorial&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tomjaguarpaw/haskell-opaleye/raw/master/Doc/Tutorial/TutorialManipulation.lhs&#34;&gt;Manipulation tutorial&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Advanced&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.williamyaoh.com/posts/2019-12-28-abstracting-out-common-columns-opaleye.html&#34;&gt;Abstracting out common columns in Opaleye&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Contact&lt;/h1&gt; &#xA;&lt;h2&gt;Contact the author&lt;/h2&gt; &#xA;&lt;p&gt;The main author of Opaleye is Tom Ellis. He can be &lt;a href=&#34;http://web.jaguarpaw.co.uk/~tom/contact/&#34;&gt;contacted via email&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;File bugs&lt;/h2&gt; &#xA;&lt;p&gt;Please file bugs on the &lt;a href=&#34;https://github.com/tomjaguarpaw/haskell-opaleye/issues/&#34;&gt;Opaleye GitHub issue tracking page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Discuss and ask questions about Opaleye&lt;/h2&gt; &#xA;&lt;p&gt;You are welcome to use the &lt;a href=&#34;https://github.com/tomjaguarpaw/haskell-opaleye/issues/&#34;&gt;Opaleye GitHub issue tracking page&lt;/a&gt; for discussion of or questions about Opaleye even if they don&#39;t relate to a bug or issue.&lt;/p&gt; &#xA;&lt;h2&gt;PRs&lt;/h2&gt; &#xA;&lt;p&gt;You are welcome to make PRs to Opaleye. If you would like to discuss the design of your PR before you start work on it feel free to do so by &lt;a href=&#34;https://github.com/tomjaguarpaw/haskell-opaleye/issues/new&#34;&gt;filing a new issue&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;&lt;code&gt;Internal&lt;/code&gt; modules&lt;/h1&gt; &#xA;&lt;p&gt;Opaleye exports a number of modules named &lt;code&gt;Opaleye.Internal....&lt;/code&gt;. They are provided in case of urgent need for access to the internals, but they are not intended to be used by API consumers and if you find yourself repeatedly accessing them this is a sign that either you or Opaleye are doing something wrong. In such a case please file a bug.&lt;/p&gt; &#xA;&lt;p&gt;The interface of &lt;code&gt;Internal&lt;/code&gt; modules does not follow the PVP and may break between minor releases, so be careful.&lt;/p&gt; &#xA;&lt;h1&gt;Running tests&lt;/h1&gt; &#xA;&lt;p&gt;You must have running PostgreSQL server to run tests. Specify the database by setting the &lt;code&gt;POSTGRES_CONNSTRING&lt;/code&gt; environment variable:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;POSTGRES_CONNSTRING=&#34;user=tom dbname=opaleye_test&#34; stack test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Commercial support&lt;/h1&gt; &#xA;&lt;p&gt;Commercial support for Opaleye is provided by &lt;a href=&#34;http://www.purelyagile.com/&#34;&gt;Purely Agile&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Backup maintainers&lt;/h1&gt; &#xA;&lt;p&gt;The only person authorised to merge to &lt;code&gt;master&lt;/code&gt; or upload this package to Hackage is Tom Ellis.&lt;/p&gt; &#xA;&lt;p&gt;However, to ensure continuity of service to Opaleye users there are backup maintainers.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;If Tom Ellis is unavailable or unresponsive to maintenance requests for three months then full ownership of the project, including the GitHub repository, Hackage upload rights, and the right to amend this backup maintainers policy, passes to Oliver Charles (&lt;a href=&#34;mailto:ollie@ocharles.org.uk&#34;&gt;ollie@ocharles.org.uk&lt;/a&gt;).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If Tom Ellis is unavailable or unresponsive to maintenance requests for four months, and this policy has not been changed to the contrary, then full ownership of the project, including the GitHub repository, Hackage upload rights, and the right to amend this backup maintainers policy passes to Shane O&#39;Brien (@duairc).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If Tom Ellis is unavailable or unresponsive to maintenance requests for six months, and this policy has not been changed to the contrary, then full ownership of the project, including the GitHub repository, Hackage upload rights, and the right to amend this backup maintainers policy passes to Joe Hermaszewski (@expipiplus1).&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Contributors&lt;/h1&gt; &#xA;&lt;p&gt;The Opaleye Project was founded by Tom Ellis, inspired by theoretical work on databases by David Spivak. Much of the implementation was based on ideas and code from the HaskellDB project by Daan Leijen, Conny Andersson, Martin Andersson, Mary Bergman, Victor Blomqvist, Bjorn Bringert, Anders Hockersten, Torbjorn Martin, Jeremy Shaw and Justin Bailey.&lt;/p&gt; &#xA;&lt;p&gt;The following individuals and organisations made helpful contributions which were important in helping to get the project off the ground.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Silk (Erik Hesselink, Adam Bergmark)&lt;/li&gt; &#xA; &lt;li&gt;Karamaan (Christopher Lewis)&lt;/li&gt; &#xA; &lt;li&gt;Fynder (Renzo Carbonara, Oliver Charles)&lt;/li&gt; &#xA; &lt;li&gt;Daniel Patterson&lt;/li&gt; &#xA; &lt;li&gt;Jakub Ryška&lt;/li&gt; &#xA; &lt;li&gt;Travis Staton&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Joseph Abrahamson, Alfredo Di Napoli and Mietek Bak performed useful reviews of early versions which helped improve the codebase. Since then there have been helpful contributions from many others. Thanks to them all for their help.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>kadena-io/pact-time</title>
    <updated>2023-05-15T01:34:42Z</updated>
    <id>tag:github.com,2023-05-15:/kadena-io/pact-time</id>
    <link href="https://github.com/kadena-io/pact-time" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Minimal Time Library For Pact&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Pact-Time Library&lt;/h1&gt; &#xA;&lt;p&gt;A minimal time library for usage with the &lt;a href=&#34;https://github.com/kadena-io/pact/&#34;&gt;Pact Smart Contract Language&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The focus of this library is on minimality, performance, and binary level stability. Time is represented as a 64-bit integral value that counts nominal micro-seconds since the modified Julian date epoch (MJD). The implementation ignores leap seconds.&lt;/p&gt; &#xA;&lt;p&gt;While the library can parse date-time values with time zones, internally all date-times are represented as UTC and formatting only supports UTC. Only the default English language locale is supported.&lt;/p&gt; &#xA;&lt;p&gt;Details about supported formats can be found in the &lt;a href=&#34;https://pact-language.readthedocs.io/en/stable/pact-reference.html#time-formats&#34;&gt;Pact Language Reference&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>