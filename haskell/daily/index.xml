<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Haskell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-11-11T02:31:19Z</updated>
  <subtitle>Daily Trending of Haskell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>nix-community/nix-vscode-extensions</title>
    <updated>2023-11-11T02:31:19Z</updated>
    <id>tag:github.com,2023-11-11:/nix-community/nix-vscode-extensions</id>
    <link href="https://github.com/nix-community/nix-vscode-extensions" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Nix expressions for VSCode and OpenVSX extensions [maintainers: @deemp, @AmeerTaweel]&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Nix expressions for VS Code Extensions&lt;/h1&gt; &#xA;&lt;p&gt;At the time of writing this, &lt;code&gt;nixpkgs&lt;/code&gt; contains &lt;strong&gt;271&lt;/strong&gt; &lt;code&gt;VS Code&lt;/code&gt; extensions. This is a small fraction of the more than &lt;strong&gt;40,000&lt;/strong&gt; extensions in the &lt;code&gt;VS Code Marketplace&lt;/code&gt;! In addition, many of the extensions in &lt;code&gt;nixpkgs&lt;/code&gt; are significantly out-of-date.&lt;/p&gt; &#xA;&lt;p&gt;This flake provides Nix expressions for the majority of available extensions from &lt;a href=&#34;https://open-vsx.org/&#34;&gt;Open VSX&lt;/a&gt; and &lt;a href=&#34;https://marketplace.visualstudio.com/vscode&#34;&gt;VS Code Marketplace&lt;/a&gt;. A &lt;code&gt;GitHub Action&lt;/code&gt; updates the extensions daily.&lt;/p&gt; &#xA;&lt;p&gt;That said, you can now use a different set of extensions for &lt;code&gt;VS Code&lt;/code&gt;/&lt;code&gt;VSCodium&lt;/code&gt; in each of your projects. Moreover, you can share your flakes and cache them so that other people don&#39;t need to install these extensions manually!&lt;/p&gt; &#xA;&lt;h2&gt;Note&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Check &lt;a href=&#34;https://github.com/nix-community/nix4vscode&#34;&gt;nix4vscode&lt;/a&gt; (and contribute!) if you need a more individual approach to extensions.&lt;/li&gt; &#xA; &lt;li&gt;NixOS wiki has a &lt;a href=&#34;https://nixos.wiki/wiki/Visual_Studio_Code&#34;&gt;page&lt;/a&gt; about VS Code.&lt;/li&gt; &#xA; &lt;li&gt;Extension publishers and names are lowercased.&lt;/li&gt; &#xA; &lt;li&gt;Access an extension in the format &lt;code&gt;&amp;lt;attrset&amp;gt;.&amp;lt;publisher&amp;gt;.&amp;lt;name&amp;gt;&lt;/code&gt;, where &lt;code&gt;&amp;lt;attrset&amp;gt;&lt;/code&gt; is &lt;code&gt;vscode-marketplace&lt;/code&gt;, &lt;code&gt;open-vsx&lt;/code&gt;, etc. (see &lt;a href=&#34;https://raw.githubusercontent.com/nix-community/nix-vscode-extensions/master/#explore&#34;&gt;Explore&lt;/a&gt;).&lt;/li&gt; &#xA; &lt;li&gt;If an extension publisher or name aren&#39;t valid Nix identifiers, quote them like &lt;code&gt;&amp;lt;attrset&amp;gt;.&#34;4&#34;.&#34;2&#34;&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;We have a permission from MS to use a crawler on their API in this case (see the &lt;a href=&#34;https://github.com/NixOS/nixpkgs/issues/208456&#34;&gt;discussion&lt;/a&gt;). Please, don&#39;t abuse this flake!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Template&lt;/h2&gt; &#xA;&lt;p&gt;This repository has a flake &lt;a href=&#34;https://raw.githubusercontent.com/nix-community/nix-vscode-extensions/master/template/flake.nix&#34;&gt;template&lt;/a&gt;. This template provides a &lt;a href=&#34;https://github.com/VSCodium/vscodium&#34;&gt;VSCodium&lt;/a&gt; with a couple of extensions.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Create a flake from the template (see &lt;a href=&#34;https://nixos.org/manual/nix/stable/command-ref/new-cli/nix3-flake-new.html&#34;&gt;nix flake new&lt;/a&gt;).&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;nix flake new vscodium-project -t github:nix-community/nix-vscode-extensions&#xA;cd vscodium-project&#xA;git init &amp;amp;&amp;amp; git add .&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run &lt;code&gt;VSCodium&lt;/code&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;nix run .# .&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Alternatively, start a devShell and run &lt;code&gt;VSCodium&lt;/code&gt;. A &lt;code&gt;shellHook&lt;/code&gt; will print extensions available in the &lt;code&gt;VSCodium&lt;/code&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;nix develop&#xA;codium .&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;In case of problems see &lt;a href=&#34;https://raw.githubusercontent.com/nix-community/nix-vscode-extensions/master/#troubleshooting&#34;&gt;Troubleshooting&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Example&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nix-community/nix-vscode-extensions/master/flake.nix&#34;&gt;flake.nix&lt;/a&gt; provides a default package. This package is &lt;code&gt;VSCodium&lt;/code&gt; with a couple of extensions.&lt;/p&gt; &#xA;&lt;p&gt;Run &lt;code&gt;VSCodium&lt;/code&gt; and list installed extensions.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;nix run github:nix-community/nix-vscode-extensions# -- --list-extensions&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Extensions&lt;/h3&gt; &#xA;&lt;p&gt;We provide extensions attrsets that contain both universal and platform-specific extensions. We use a reasonable mapping between the sites target platforms and Nix-supported platforms (see the &lt;a href=&#34;https://github.com/nix-community/nix-vscode-extensions/issues/20&#34;&gt;issue&lt;/a&gt; and &lt;code&gt;systemPlatform&lt;/code&gt; in &lt;a href=&#34;https://raw.githubusercontent.com/nix-community/nix-vscode-extensions/master/flake.nix&#34;&gt;flake.nix&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;There are several attrsets:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;vscode-marketplace&lt;/code&gt; and &lt;code&gt;open-vsx&lt;/code&gt; contain the latest versions of extensions, including pre-release ones. Such pre-release versions expire in some time. That&#39;s why, there are &lt;code&gt;-release&lt;/code&gt; attrsets.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;vscode-marketplace-release&lt;/code&gt; and &lt;code&gt;open-vsx-release&lt;/code&gt; contain the release versions of extensions (see &lt;a href=&#34;https://raw.githubusercontent.com/nix-community/nix-vscode-extensions/master/#release-extensions&#34;&gt;Release extensions&lt;/a&gt;).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;forVSCodeVersion &#34;4.228.1&#34;&lt;/code&gt; allows to leave only the extensions &lt;a href=&#34;https://code.visualstudio.com/api/working-with-extensions/publishing-extension#visual-studio-code-compatibility&#34;&gt;compatible&lt;/a&gt; with the &lt;code&gt;&#34;4.228.1&#34;&lt;/code&gt; version of &lt;code&gt;VS Code&lt;/code&gt;. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;You may supply the actual version of your &lt;code&gt;VS Code&lt;/code&gt; instead of &lt;code&gt;&#34;4.228.1&#34;&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;With flakes&lt;/h3&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/nix-community/nix-vscode-extensions/master/#template&#34;&gt;Template&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Add the following to your &lt;code&gt;flake.nix&lt;/code&gt; (see &lt;a href=&#34;https://nixos.wiki/wiki/Flakes&#34;&gt;Flakes&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nix&#34;&gt;inputs.nix-vscode-extensions.url = &#34;github:nix-community/nix-vscode-extensions&#34;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Without flakes&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nix&#34;&gt;let &#xA;  system = builtins.currentSystem;&#xA;  extensions =&#xA;    (import (builtins.fetchGit {&#xA;      url = &#34;https://github.com/nix-community/nix-vscode-extensions&#34;;&#xA;      ref = &#34;refs/heads/master&#34;;&#xA;      rev = &#34;c43d9089df96cf8aca157762ed0e2ddca9fcd71e&#34;;&#xA;    })).extensions.${system};&#xA;  extensionsList = with extensions.vscode-marketplace; [&#xA;      rust-lang.rust-analyzer&#xA;  ];&#xA;in ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;History&lt;/h2&gt; &#xA;&lt;p&gt;You can search for an extension in the repo history:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;get commits containing the extension: &lt;code&gt;git log -S &#39;&#34;copilot&#34;&#39; --oneline data/cache/vscode-marketplace-latest.json&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;select a commit: &lt;code&gt;0910d1e&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;search in that commit: &lt;code&gt;git grep &#39;&#34;copilot&#34;&#39; 0910d1e -- data/cache/vscode-marketplace-latest.json&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Explore&lt;/h2&gt; &#xA;&lt;p&gt;Explore extensions via &lt;code&gt;nix repl&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Use your system instead of &lt;code&gt;x86_64-linux&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Press the &lt;code&gt;Tab&lt;/code&gt; button (denoted as &lt;code&gt;&amp;lt;TAB&amp;gt;&lt;/code&gt; here) to see attrset attributes.&lt;/p&gt; &#xA;&lt;h3&gt;Get the &lt;code&gt;extensions&lt;/code&gt; attrset&lt;/h3&gt; &#xA;&lt;h4&gt;Get &lt;code&gt;extensions&lt;/code&gt; with flakes&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ nix repl&#xA;&#xA;nix-repl&amp;gt; :lf github:nix-community/nix-vscode-extensions/c43d9089df96cf8aca157762ed0e2ddca9fcd71e&#xA;Added 10 variables.&#xA;&#xA;nix-repl&amp;gt; t = extensions.&amp;lt;TAB&amp;gt;&#xA;extensions.aarch64-darwin  extensions.aarch64-linux   extensions.x86_64-darwin   extensions.x86_64-linux&#xA;&#xA;nix-repl&amp;gt; t = extensions.x86_64-linux&#xA;&#xA;nix-repl&amp;gt; t.&amp;lt;TAB&amp;gt;&#xA;t.forVSCodeVersion            t.open-vsx-release            t.vscode-marketplace-release&#xA;t.open-vsx                    t.vscode-marketplace&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Get &lt;code&gt;extensions&lt;/code&gt; without flakes&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ nix repl&#xA;&#xA;nix-repl&amp;gt; t1 = (import (builtins.fetchGit {&#xA;                url = &#34;https://github.com/nix-community/nix-vscode-extensions&#34;;&#xA;                ref = &#34;refs/heads/master&#34;;&#xA;                rev = &#34;c43d9089df96cf8aca157762ed0e2ddca9fcd71e&#34;;&#xA;              }))&#xA;&#xA;nix-repl&amp;gt; t = t1.extensions.&amp;lt;TAB&amp;gt;&#xA;t1.extensions.aarch64-darwin  t1.extensions.aarch64-linux   t1.extensions.x86_64-darwin   t1.extensions.x86_64-linux&#xA;&#xA;nix-repl&amp;gt; t = t1.extensions.x86_64-linux&#xA;&#xA;nix-repl&amp;gt; t.&amp;lt;TAB&amp;gt;&#xA;t.forVSCodeVersion            t.open-vsx-release            t.vscode-marketplace-release&#xA;t.open-vsx                    t.vscode-marketplace&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Pre-release versions&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;nix-repl&amp;gt; t.vscode-marketplace.rust-lang.rust-analyzer&#xA;«derivation /nix/store/jyzab0pdcgj4q9l73zsnyvc1k7qpb381-vscode-extension-rust-lang-rust-analyzer-0.4.1582.drv»&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Release versions&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;nix-repl&amp;gt; t.vscode-marketplace-release.rust-lang.rust-analyzer&#xA;«derivation /nix/store/qjlr7iqgqrf2hd2z21xz96nmblxy680m-vscode-extension-rust-lang-rust-analyzer-0.3.1583.drv»&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Pre-release versions compatible with a given version of VS Code&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;nix-repl&amp;gt; (t.forVSCodeVersion &#34;1.78.2&#34;).vscode-marketplace.rust-lang.rust-analyzer&#xA;«derivation /nix/store/jyzab0pdcgj4q9l73zsnyvc1k7qpb381-vscode-extension-rust-lang-rust-analyzer-0.4.1582.drv»&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Overlay&lt;/h3&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://nixos.wiki/wiki/Overlays#Using_overlays&#34;&gt;Overlays&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Get an overlay with flakes&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;nix-repl&amp;gt; :lf github:nix-community/nix-vscode-extensions/c43d9089df96cf8aca157762ed0e2ddca9fcd71e&#xA;Added 14 variables.&#xA;&#xA;nix-repl&amp;gt; :lf github:nix-community/nix-vscode-extensions/c43d9089df96cf8aca157762ed0e2ddca9fcd71e&#xA;Added 14 variables.&#xA;&#xA;nix-repl&amp;gt; pkgs = (legacyPackages.x86_64-linux.extend overlays.default)&#xA;&#xA;nix-repl&amp;gt; pkgs.vscode-marketplace-release.rust-lang.rust-analyzer&#xA;«derivation /nix/store/midv6wrnpxfm3in3miilyx914zzck4d7-vscode-extension-rust-lang-rust-analyzer-0.3.1575.drv»&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Get an overlay without flakes&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;nix-repl&amp;gt; t1 = (import (builtins.fetchGit {&#xA;                url = &#34;https://github.com/nix-community/nix-vscode-extensions&#34;;&#xA;                ref = &#34;refs/heads/master&#34;;&#xA;                rev = &#34;c43d9089df96cf8aca157762ed0e2ddca9fcd71e&#34;;&#xA;              }))&#xA;&#xA;nix-repl&amp;gt; pkgs = import &amp;lt;nixpkgs&amp;gt; { overlays = [ t1.overlays.default ]; system = builtins.currentSystem; }&#xA;&#xA;nix-repl&amp;gt; pkgs.vscode-marketplace-release.rust-lang.rust-analyzer&#xA;«derivation /nix/store/a701wlb8ckidpikr57bff16mmvsf3jir-vscode-extension-rust-lang-rust-analyzer-0.3.1575.drv»&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contribute&lt;/h2&gt; &#xA;&lt;h3&gt;Issues&lt;/h3&gt; &#xA;&lt;p&gt;Resolve &lt;a href=&#34;https://github.com/nix-community/nix-vscode-extensions/issues&#34;&gt;issues&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;README&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fix links.&lt;/li&gt; &#xA; &lt;li&gt;Write new sections.&lt;/li&gt; &#xA; &lt;li&gt;Update commit SHA used in examples if they&#39;re too old.&lt;/li&gt; &#xA; &lt;li&gt;Enhance text.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Release extensions&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/nix-community/nix-vscode-extensions/master/.github/config.yaml&#34;&gt;config&lt;/a&gt; contains several extensions. We cache the information about the latest &lt;strong&gt;release&lt;/strong&gt; versions of these extensions (see &lt;a href=&#34;https://raw.githubusercontent.com/nix-community/nix-vscode-extensions/master/#extensions&#34;&gt;Extensions&lt;/a&gt;). If you&#39;d like to use release versions of an extension, please, add that extension to the config and make a Pull Request.&lt;/p&gt; &#xA;&lt;h3&gt;Extra extensions&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/nix-community/nix-vscode-extensions/master/extra-extensions.toml&#34;&gt;extra-extensions.toml&lt;/a&gt; file contains a list of extensions to be fetched from sites other than &lt;code&gt;VS Code Marketplace&lt;/code&gt; and &lt;code&gt;Open VSX&lt;/code&gt;. These extensions replace ones fetched from &lt;code&gt;VS Code Marketplace&lt;/code&gt; and &lt;code&gt;Open VSX&lt;/code&gt;. Add necessary extensions there, preferrably, for all supported platforms (see &lt;a href=&#34;https://raw.githubusercontent.com/nix-community/nix-vscode-extensions/master/#extensions&#34;&gt;Extensions&lt;/a&gt;). &lt;a href=&#34;https://github.com/berberman/nvfetcher&#34;&gt;nvfetcher&lt;/a&gt; will fetch the latest release versions of these extensions and write configs to &lt;a href=&#34;https://raw.githubusercontent.com/nix-community/nix-vscode-extensions/master/data/extra-extensions/generated.nix&#34;&gt;generated.nix&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Special extensions&lt;/h3&gt; &#xA;&lt;p&gt;Certain extensions require special treatment. Provide functions to modify such extensions derivations in &lt;a href=&#34;https://raw.githubusercontent.com/nix-community/nix-vscode-extensions/master/overrides.nix&#34;&gt;overrides.nix&lt;/a&gt;. Optionally, create and link there issues explaining chosen override functions. The overrides apply to a whole attrset of extensions, including &lt;a href=&#34;https://raw.githubusercontent.com/nix-community/nix-vscode-extensions/master/#extra-extensions&#34;&gt;Extra extensions&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Build problems&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Extension with multiple extensions in a zipfile (&lt;a href=&#34;https://github.com/nix-community/nix-vscode-extensions/issues/31&#34;&gt;issue&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Platform-specific extensions (&lt;a href=&#34;https://github.com/nix-community/nix-vscode-extensions/issues/20#issuecomment-1543679655&#34;&gt;comment&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Main flake&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;(Optionally) Install &lt;a href=&#34;https://direnv.net/&#34;&gt;direnv&lt;/a&gt;, e.g., via &lt;code&gt;nix profile install nixpkgs#direnv&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run a devshell. When prompted about &lt;code&gt;extra-trusted-substituters&lt;/code&gt; answer &lt;code&gt;y&lt;/code&gt;. This is to use binary caches.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;nix develop nix-dev/&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;(Optionally) Start &lt;code&gt;VSCodium&lt;/code&gt; with necessary extensions and tools.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;nix run nix-dev/#writeSettings&#xA;nix run nix-dev/#codium .&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Haskell script&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/nix-community/nix-vscode-extensions/master/haskell/README.md&#34;&gt;README&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Set the environment.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;set -a&#xA;source .env&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run the script.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;nix run haskell/#updateExtensions&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Pull requests&lt;/h3&gt; &#xA;&lt;p&gt;Pull requests are welcome!&lt;/p&gt; &#xA;&lt;h2&gt;Troubleshooting&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If &lt;code&gt;Nix&lt;/code&gt;-provided &lt;code&gt;VSCodium&lt;/code&gt; doesn&#39;t pick up the extensions: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Close other instance of &lt;code&gt;Nix&lt;/code&gt;-provided &lt;code&gt;VSCodium&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Try to reboot your computer and start &lt;code&gt;VSCodium&lt;/code&gt; again.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;See &lt;a href=&#34;https://github.com/deemp/flakes/raw/main/README/Troubleshooting.md&#34;&gt;troubleshooting&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>selectel/hen</title>
    <updated>2023-11-11T02:31:19Z</updated>
    <id>tag:github.com,2023-11-11:/selectel/hen</id>
    <link href="https://github.com/selectel/hen" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Haskell bindings to Xen hypervisor interface&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;hen &lt;a href=&#34;http://travis-ci.org/selectel/hen&#34;&gt;&lt;img src=&#34;https://secure.travis-ci.org/selectel/hen.png&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;hen&lt;/code&gt; is a Haskell bindings to Xen hypervisor interface. Key feature of &lt;code&gt;hen&lt;/code&gt; is that you can use a single library to interact with both Xen3 and Xen4 hypervisor versions.&lt;/p&gt; &#xA;&lt;p&gt;The API is split into three levels:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;|-----------------+-------------------------------------------------------------|&#xA;| Level           | Description                                                 |&#xA;|-----------------+-------------------------------------------------------------|&#xA;| System.Xen.Low  | Provides bindings to raw xenctrl calls.                     |&#xA;| System.Xen.Mid  | Defines useful helper functions for acessing System.Xen.Low |&#xA;|                 | and allows you to use your favourite impure Monad.          |&#xA;| System.Xen.High | Implements the Xen monad, which guarantees safety during    |&#xA;|                 | lowlevel operations.                                        |&#xA;|-----------------+-------------------------------------------------------------|&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Example&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;module Main (main) where&#xA;&#xA;import System.Xen (runXenT, domainGetInfo)&#xA;&#xA;main :: IO ()&#xA;main = print =&amp;lt;&amp;lt; runXenT domainGetInfo&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;hen&lt;/code&gt; requires &lt;code&gt;xenctrl&lt;/code&gt; headers, Google and unpack any of the two packages bellow:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;+-----------+-----------------------------------------+&#xA;|XCP version|                   Package               |&#xA;|-----------+-----------------------------------------+&#xA;|1.1        |xen-devel-3.4.2-1.1.0.704.20055.i686.rpm |&#xA;|1.5        |xen-devel-4.1.3-1.6.10.498.23551.i686.rpm|&#xA;+-----------+-----------------------------------------+&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After you&#39;ve unpacked the headers, point &lt;code&gt;cabal-dev&lt;/code&gt; to them and you&#39;re done:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;λ cabal-dev configure --extra-include-dirs=/path/to/headers&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>