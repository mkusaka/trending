<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Haskell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-17T01:43:02Z</updated>
  <subtitle>Daily Trending of Haskell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>brightly-salty/qbcanon</title>
    <updated>2022-07-17T01:43:02Z</updated>
    <id>tag:github.com,2022-07-17:/brightly-salty/qbcanon</id>
    <link href="https://github.com/brightly-salty/qbcanon" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>ailrk/blgol60</title>
    <updated>2022-07-17T01:43:02Z</updated>
    <id>tag:github.com,2022-07-17:/ailrk/blgol60</id>
    <link href="https://github.com/ailrk/blgol60" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Algol 60 60 years later&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;blgo60&lt;/h1&gt; &#xA;&lt;p&gt;Bingo, bangle, bungle, I&#39;m so happy in the jungle, I refuse to go&lt;/p&gt; &#xA;&lt;h1&gt;doge-algol60&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ailrk/blgol60/master/doc/doge-algol60.png&#34; alt=&#34;doge-algol&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Algol 60 compiler.&lt;/p&gt; &#xA;&lt;h2&gt;Reference&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.masswerk.at/algol60/algol60-syntaxversions.htm&#34;&gt;https://www.masswerk.at/algol60/algol60-syntaxversions.htm&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.masswerk.at/algol60/modified_report.htm&#34;&gt;https://www.masswerk.at/algol60/modified_report.htm&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.masswerk.at/algol60/algol60-sample.htm&#34;&gt;https://www.masswerk.at/algol60/algol60-sample.htm&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.algol60.org/reports/algol60_rr.pdf&#34;&gt;http://www.algol60.org/reports/algol60_rr.pdf&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.algol60.org/docs/Rutishauser_Description_of_ALGOL_60_1967.pdf&#34;&gt;http://www.algol60.org/docs/Rutishauser_Description_of_ALGOL_60_1967.pdf&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://algol60.org/6legoPieces.htm&#34;&gt;http://algol60.org/6legoPieces.htm&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://csci.csusb.edu/dick/samples/algol60.syntax.html&#34;&gt;http://csci.csusb.edu/dick/samples/algol60.syntax.html&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.memorymanagement.org/mmref/lang.html&#34;&gt;https://www.memorymanagement.org/mmref/lang.html&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://wiki.tcl-lang.org/page/Algol&#34;&gt;https://wiki.tcl-lang.org/page/Algol&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>Quid2/flat</title>
    <updated>2022-07-17T01:43:02Z</updated>
    <id>tag:github.com,2022-07-17:/Quid2/flat</id>
    <link href="https://github.com/Quid2/flat" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Principled and efficient binary serialization&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/Quid2/flat&#34;&gt;&lt;img src=&#34;https://travis-ci.org/Quid2/flat.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://hackage.haskell.org/package/flat&#34;&gt;&lt;img src=&#34;https://img.shields.io/hackage/v/flat.svg?sanitize=true&#34; alt=&#34;Hackage version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://stackage.org/nightly/package/model&#34;&gt;&lt;img src=&#34;http://stackage.org/package/flat/badge/nightly&#34; alt=&#34;Stackage Nightly&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://stackage.org/lts/package/model&#34;&gt;&lt;img src=&#34;http://stackage.org/package/flat/badge/lts&#34; alt=&#34;Stackage LTS&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Haskell implementation of &lt;a href=&#34;http://quid2.org/docs/Flat.pdf&#34;&gt;Flat&lt;/a&gt;, a principled, language-independent and efficient binary data format.&lt;/p&gt; &#xA;&lt;h3&gt;Performance&lt;/h3&gt; &#xA;&lt;p&gt;For some hard data, see this &lt;a href=&#34;https://github.com/haskell-perf/serialization&#34;&gt;comparison of the major haskell serialisation libraries&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Briefly:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Transfer time (serialisation time + transport time on the network + deserialisation at the receiving end): &lt;code&gt;flat&lt;/code&gt; is usually faster for all but the highest network speeds&lt;/li&gt; &#xA; &lt;li&gt;Size: &lt;code&gt;flat&lt;/code&gt; produces significantly smaller binaries than all other libraries (3/4 times usually)&lt;/li&gt; &#xA; &lt;li&gt;Serialization: &lt;code&gt;store&lt;/code&gt;, &lt;code&gt;persist&lt;/code&gt; and &lt;code&gt;flat&lt;/code&gt; are faster&lt;/li&gt; &#xA; &lt;li&gt;Deserialization: &lt;code&gt;store&lt;/code&gt;, &lt;code&gt;flat&lt;/code&gt;, &lt;code&gt;persist&lt;/code&gt; and &lt;code&gt;cereal&lt;/code&gt; are faster&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Documentation&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;http://hackage.haskell.org/package/flat/docs/Flat-Tutorial.html&#34;&gt;Tutorial&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;http://hackage.haskell.org/package/flat&#34;&gt;Hackage Package and Docs&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;http://quid2.org/docs/Flat.pdf&#34;&gt;Flat Format Specification&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;p&gt;Get the latest stable version from &lt;a href=&#34;https://hackage.haskell.org/package/flat&#34;&gt;hackage&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Other Stuff You Might Like&lt;/h3&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://github.com/Quid2/zm&#34;&gt;ZM - Language independent, reproducible, absolute types&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;p&gt;To decode &lt;code&gt;flat&lt;/code&gt; encoded data you need to know the type of the serialised data.&lt;/p&gt; &#xA;&lt;p&gt;This is ok for applications that do not require long-term storage and that do not operate in open distributed systems.&lt;/p&gt; &#xA;&lt;p&gt;For those who do, you might want to supplement &lt;code&gt;flat&lt;/code&gt; with something like &lt;a href=&#34;https://github.com/Quid2/zm&#34;&gt;ZM&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Ports for other languages&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Quid2/ts&#34;&gt;TypeScript-JavaScript&lt;/a&gt; and &lt;a href=&#34;https://www.purescript.org/&#34;&gt;Purescript&lt;/a&gt; ports are under development.&lt;/p&gt; &#xA;&lt;p&gt;Get in touch if you would like to help porting &lt;code&gt;flat&lt;/code&gt; to other languages.&lt;/p&gt;</summary>
  </entry>
</feed>