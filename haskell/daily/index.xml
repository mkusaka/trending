<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Haskell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-09T01:42:29Z</updated>
  <subtitle>Daily Trending of Haskell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>maralorn/nix-output-monitor</title>
    <updated>2022-08-09T01:42:29Z</updated>
    <id>tag:github.com,2022-08-09:/maralorn/nix-output-monitor</id>
    <link href="https://github.com/maralorn/nix-output-monitor" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Pipe your nix-build output through the nix-output-monitor a.k.a nom to get additional information while building.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;nix-output-monitor&lt;/h1&gt; &#xA;&lt;p&gt;Pipe your nix-build output through the nix-output-monitor (aka nom) to get additional information while building.&lt;/p&gt; &#xA;&lt;p&gt;While your build runs nom will draw something like this at the bottom of your build log:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/maralorn/nix-output-monitor/main/example-screenshot.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://repology.org/project/nix-output-monitor/versions&#34;&gt;&lt;img src=&#34;https://repology.org/badge/vertical-allrepos/nix-output-monitor.svg?sanitize=true&#34; alt=&#34;Packaging status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Status&lt;/h2&gt; &#xA;&lt;p&gt;This was an experimental fun project, which proofed to be useful to quite a lot of people. The purpose of it is to write something fun and useful in Haskell. You are free and very welcome to contribute feedback, issues or PRs, but I do not commit to maintain this project over a long time period. This program relies on the output of the v1 nix commands (i.e. &lt;code&gt;nix-build&lt;/code&gt; and not &lt;code&gt;nix build&lt;/code&gt;) support for v2 output may come in the future.&lt;/p&gt; &#xA;&lt;h2&gt;Installing&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;nixpkgs: nom is in nixpkgs. Just install &lt;code&gt;pkgs.nix-output-monitor&lt;/code&gt; in the usual way. You might want to install it from nixos-unstable to get the newest version.&lt;/li&gt; &#xA; &lt;li&gt;cabal: Install &lt;code&gt;cabal-install&lt;/code&gt; and run &lt;code&gt;cabal install&lt;/code&gt; in the checked out repo.&lt;/li&gt; &#xA; &lt;li&gt;nix: or run &lt;code&gt;nix-build&lt;/code&gt; or &lt;code&gt;nix-env&lt;/code&gt; or include the &lt;code&gt;default.nix&lt;/code&gt; of this repo in your nixos config.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Running&lt;/h2&gt; &#xA;&lt;h3&gt;The Easy Way&lt;/h3&gt; &#xA;&lt;p&gt;When installed from nixpkgs you can replace every call to &lt;code&gt;nix-build&lt;/code&gt; with the bundled wrapper script &lt;code&gt;nom-build&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;The Flexible Way&lt;/h3&gt; &#xA;&lt;p&gt;Once you have installed &lt;code&gt;nix-output-monitor&lt;/code&gt; to your path, run any nix command (&lt;code&gt;nixos-rebuild&lt;/code&gt;,&lt;code&gt;nix-build&lt;/code&gt;,&lt;code&gt;home-manager switch&lt;/code&gt;, &lt;strong&gt;not&lt;/strong&gt; &lt;code&gt;nix build&lt;/code&gt;.) and pipe stderr and stdout into &lt;code&gt;nom&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;nix-build |&amp;amp; nom&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Don‘t forget to redirect stderr, too.&lt;/strong&gt; That&#39;s what the &lt;code&gt;&amp;amp;&lt;/code&gt;, does.&lt;/p&gt; &#xA;&lt;h3&gt;Preserving Colored Text&lt;/h3&gt; &#xA;&lt;p&gt;To preserve the color of the redirected text you can use the &lt;code&gt;unbuffer&lt;/code&gt; command from the &lt;code&gt;expect&lt;/code&gt; package. (The &lt;code&gt;nom-build&lt;/code&gt; wrapper does this for you.)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;unbuffer nix-build |&amp;amp; nom&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Explanation&lt;/h2&gt; &#xA;&lt;h3&gt;Legend&lt;/h3&gt; &#xA;&lt;p&gt;Nom tries to convey informations via symbols and colors&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;▶, yellow: running builds&lt;/li&gt; &#xA; &lt;li&gt;✔, green: completed builds&lt;/li&gt; &#xA; &lt;li&gt;⏳︎︎︎, blue: planned builds&lt;/li&gt; &#xA; &lt;li&gt;⬇, cyan: downloads often in the form &lt;code&gt;completed/total&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;⬆, magenta: uploads&lt;/li&gt; &#xA; &lt;li&gt;⚠, red: failed builds&lt;/li&gt; &#xA; &lt;li&gt;∅: a moving average over past builds of this derivation&lt;/li&gt; &#xA; &lt;li&gt;⏱︎: running time&lt;/li&gt; &#xA; &lt;li&gt;∑: a summary over all packages and hosts&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you can‘t see all icons you maybe need another terminal font. I recommend any font from &lt;code&gt;pkgs.nerdfonts&lt;/code&gt; e.g. &lt;code&gt;&#34;JetBrainsMono Nerd Font&#34;&lt;/code&gt;. Also different terminals might work differently well. I recommend: &lt;code&gt;pkgs.foot&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;How to Read the Dependency Graph&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;nom will sort all builds into a tree.&lt;/li&gt; &#xA; &lt;li&gt;Children of a node are direct dependencies.&lt;/li&gt; &#xA; &lt;li&gt;nom will try to show you the most relevant part of the dependency tree, roughly aiming to fill a third of your terminal&lt;/li&gt; &#xA; &lt;li&gt;No build will be printed twice in the tree, it will only be shown for the lower most dependency.&lt;/li&gt; &#xA; &lt;li&gt;Everytime nom decides to not show all direct dependencies of a build (and for root nodes), it will print a &lt;code&gt;&amp;amp;&lt;/code&gt; and a summary over the build state of all dependencies.&lt;/li&gt; &#xA; &lt;li&gt;Use the colors from above to read the summary&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Example Runs&lt;/h2&gt; &#xA;&lt;p&gt;An example remote build: &lt;a href=&#34;https://asciinema.org/a/TASdstyOJm3reqFcKZrekgH65&#34;&gt;&lt;img src=&#34;https://asciinema.org/a/TASdstyOJm3reqFcKZrekgH65.svg?sanitize=true&#34; alt=&#34;asciicast&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;An example failing remote build: &lt;a href=&#34;https://asciinema.org/a/TASdstyOJm3reqFcKZrekgH65&#34;&gt;&lt;img src=&#34;https://asciinema.org/a/TASdstyOJm3reqFcKZrekgH65.svg?sanitize=true&#34; alt=&#34;asciicast&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;An example really large build (&lt;code&gt;haskell-language-server&lt;/code&gt;): &lt;a href=&#34;https://asciinema.org/a/DDdRLAaiL65PsYUS4dvEaFWBm&#34;&gt;&lt;img src=&#34;https://asciinema.org/a/DDdRLAaiL65PsYUS4dvEaFWBm.svg?sanitize=true&#34; alt=&#34;asciicast&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;An example running &lt;code&gt;sudo nixos-rebuild switch&lt;/code&gt;: &lt;a href=&#34;https://asciinema.org/a/fQTfaxCjNQoNz9eJYGGrLZTcw&#34;&gt;&lt;img src=&#34;https://asciinema.org/a/fQTfaxCjNQoNz9eJYGGrLZTcw.svg?sanitize=true&#34; alt=&#34;asciicast&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Implementation&lt;/h2&gt; &#xA;&lt;p&gt;Right now nom uses four sources of information:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;The parsed nix-build output&lt;/li&gt; &#xA; &lt;li&gt;it checks if build results exist in the nix-store&lt;/li&gt; &#xA; &lt;li&gt;it querys &lt;code&gt;.drv&lt;/code&gt; files for information about the &lt;code&gt;out&lt;/code&gt; output path.&lt;/li&gt; &#xA; &lt;li&gt;It caches build times in &lt;code&gt;$XDG_CACHE_HOME/nix-output-monitor/build-reports.csv&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Limitations&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;This will fail in unexpected and expected ways.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;nix-output-monitor receives most it&#39;s information from parsing nix-build output. The parser might be to strict or to loose for use cases I didn‘t think of. Then &lt;strong&gt;the numbers displayed will be off&lt;/strong&gt;!&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;nix-build does not show info when a download or upload is finished, so we currently cannot differentiate between started and completed downloads.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;remote builds will sometimes be shown as running even when they are actually still waiting for uploads or downloads.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Terminal clearing and reprinting is brittle. It might fail with your terminal or terminal width. But at this point I‘ve invested some effort to make it usable.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;This program also makes assumptions like your nix-store is at &#34;/nix/store&#34; or that every derivation has an output at &#34;out&#34;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Luckily I don‘t think this program screws up anything more than your terminal.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>londonhaskell/londonhaskell-2012-10-24-why-do-monads-matter</title>
    <updated>2022-08-09T01:42:29Z</updated>
    <id>tag:github.com,2022-08-09:/londonhaskell/londonhaskell-2012-10-24-why-do-monads-matter</id>
    <link href="https://github.com/londonhaskell/londonhaskell-2012-10-24-why-do-monads-matter" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Code from London Haskell user group 24-Oct-2012&lt;/p&gt;&lt;hr&gt;&lt;p&gt;The code from the &#34;Why Do Monads Matter?&#34; talk, given by Derek Wright the London Haskell user group on 24th October 2012.&lt;/p&gt; &#xA;&lt;p&gt;Based on the original blog post by Chris Smith: &lt;a href=&#34;http://cdsmith.wordpress.com/2012/04/18/why-do-monads-matter/&#34;&gt;http://cdsmith.wordpress.com/2012/04/18/why-do-monads-matter/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Video: &lt;a href=&#34;http://www.youtube.com/watch?v=3q8xYFDYLeI&#34;&gt;http://www.youtube.com/watch?v=3q8xYFDYLeI&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;London Haskell video channel: &lt;a href=&#34;http://www.youtube.com/user/LondonHaskell&#34;&gt;http://www.youtube.com/user/LondonHaskell&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;PDF with animations (for on-screen viewing): &lt;a href=&#34;http://files.londonhaskell.org/2012/10/24/WhyDoMonadsMatter-WithAnimations.pdf&#34;&gt;http://files.londonhaskell.org/2012/10/24/WhyDoMonadsMatter-WithAnimations.pdf&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;PDF (with most of the animations removed for printing): &lt;a href=&#34;http://files.londonhaskell.org/2012/10/24/WhyDoMonadsMatter.pdf&#34;&gt;http://files.londonhaskell.org/2012/10/24/WhyDoMonadsMatter.pdf&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;PowerPoint Presentation (with all the animations!): &lt;a href=&#34;http://files.londonhaskell.org/2012/10/24/WhyDoMonadsMatter.pptx&#34;&gt;http://files.londonhaskell.org/2012/10/24/WhyDoMonadsMatter.pptx&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Code on GitHub: &lt;a href=&#34;https://github.com/londonhaskell/londonhaskell-2012-10-24-why-do-monads-matter&#34;&gt;https://github.com/londonhaskell/londonhaskell-2012-10-24-why-do-monads-matter&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>