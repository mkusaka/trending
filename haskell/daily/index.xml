<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Haskell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-10-10T01:35:39Z</updated>
  <subtitle>Daily Trending of Haskell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>hasktorch/hasktorch</title>
    <updated>2022-10-10T01:35:39Z</updated>
    <id>tag:github.com,2022-10-10:/hasktorch/hasktorch</id>
    <link href="https://github.com/hasktorch/hasktorch" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Tensors and neural networks in Haskell&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Hasktorch&lt;/h1&gt; &#xA;&lt;p&gt;Hasktorch is a library for tensors and neural networks in Haskell. It is an independent open source community project which leverages the core C++ libraries shared by PyTorch.&lt;/p&gt; &#xA;&lt;p&gt;This project is in active development, so expect changes to the library API as it evolves. We would like to invite new users to &lt;a href=&#34;https://raw.githubusercontent.com/hasktorch/hasktorch/master/#contributing&#34;&gt;join our Hasktorch slack space&lt;/a&gt; for questions and discussions. &lt;a href=&#34;https://raw.githubusercontent.com/hasktorch/hasktorch/master/#contributing&#34;&gt;Contributions/PR are encouraged&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Currently we are developing the second major release of Hasktorch (0.2). Note the 1st release, Hasktorch 0.1, on hackage is outdated and &lt;em&gt;should not&lt;/em&gt; be used.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;The documentation is divided into several sections:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasktorch/hasktorch/master/#introductory-videos&#34;&gt;Introductory Videos&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasktorch/hasktorch/master/#getting-started&#34;&gt;Getting Started&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasktorch/hasktorch/master/#known-issues&#34;&gt;Known Issues&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasktorch/hasktorch/master/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasktorch/hasktorch/master/#notes-for-library-developers&#34;&gt;Notes for Library Developers&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Introductory Videos&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=Qu6RIO02m1U&#34;&gt;High-level MuniHac talk&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/austinvhuang&#34;&gt;@austinvhuang&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=ZnYa99QoznE&amp;amp;t=1689&#34;&gt;Hands-on live-coding demo&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/tscholak&#34;&gt;@tscholak&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=qWpD8t_Aodk&amp;amp;feature=youtu.be&#34;&gt;Low-level FFI talk&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/junjihashimoto3&#34;&gt;@junjihashimoto&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;The following steps will get you started. They assume the hasktorch repository has just been cloned. After setup is done, read the &lt;a href=&#34;https://hasktorch.github.io/tutorial/&#34;&gt;online tutorials&lt;/a&gt; and &lt;a href=&#34;https://hasktorch.github.io/&#34;&gt;API documents&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasktorch/hasktorch/master/#linuxcabalcpu&#34;&gt;linux+cabal+cpu&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasktorch/hasktorch/master/#linuxcabalcuda11&#34;&gt;linux+cabal+cuda11&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasktorch/hasktorch/master/#macoscabalcpu&#34;&gt;macos+cabal+cpu&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasktorch/hasktorch/master/#linuxstackcpu&#34;&gt;linux+stack+cpu&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasktorch/hasktorch/master/#macosstackcpu&#34;&gt;macos+stack+cpu&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasktorch/hasktorch/master/#nixoscabalcpu&#34;&gt;nixos+cabal+cpu&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasktorch/hasktorch/master/#nixoscabalcuda11&#34;&gt;nixos+cabal+cuda11&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasktorch/hasktorch/master/#dockerjupyterlabcuda11&#34;&gt;docker+jupyterlab+cuda11&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;linux+cabal+cpu&lt;/h3&gt; &#xA;&lt;p&gt;Starting from the top-level directory of the project, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ pushd deps       # Change to the deps directory and save the current directory.&#xA;$ ./get-deps.sh    # Run the shell script to retrieve the libtorch dependencies.&#xA;$ popd             # Go back to the root directory of the project.&#xA;$ source setenv    # Set the shell environment to reference the shared library locations.&#xA;$ ./setup-cabal.sh # Create a cabal project file&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To build and test the Hasktorch library, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ cabal build hasktorch  # Build the Hasktorch library.&#xA;$ cabal test hasktorch   # Build and run the Hasktorch library test suite.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To build and test the example executables shipped with hasktorch, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ cabal build examples  # Build the Hasktorch examples.&#xA;$ cabal test examples   # Build and run the Hasktorch example test suites.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To run the MNIST CNN example, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ cd examples                   # Change to the examples directory.&#xA;$ ./datasets/download-mnist.sh  # Download the MNIST dataset.&#xA;$ mv mnist data                 # Move the MNIST dataset to the data directory.&#xA;$ export DEVICE=cpu             # Set device to CPU for the MNIST CNN example.&#xA;$ cabal run static-mnist-cnn    # Run the MNIST CNN example.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;linux+cabal+cuda11&lt;/h3&gt; &#xA;&lt;p&gt;Starting from the top-level directory of the project, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ pushd deps              # Change to the deps directory and save the current directory.&#xA;$ ./get-deps.sh -a cu113  # Run the shell script to retrieve the libtorch dependencies.&#xA;$ popd                    # Go back to the root directory of the project.&#xA;$ source setenv           # Set the shell environment to reference the shared library locations.&#xA;$ ./setup-cabal.sh        # Create a cabal project file&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To build and test the Hasktorch library, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ cabal build hasktorch  # Build the Hasktorch library.&#xA;$ cabal test hasktorch   # Build and run the Hasktorch library test suite.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To build and test the example executables shipped with hasktorch, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ cabal build examples  # Build the Hasktorch examples.&#xA;$ cabal test examples   # Build and run the Hasktorch example test suites.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To run the MNIST CNN example, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ cd examples                   # Change to the examples directory.&#xA;$ ./datasets/download-mnist.sh  # Download the MNIST dataset.&#xA;$ mv mnist data                 # Move the MNIST dataset to the data directory.&#xA;$ export DEVICE=&#34;cuda:0&#34;        # Set device to CUDA for the MNIST CNN example.&#xA;$ cabal run static-mnist-cnn    # Run the MNIST CNN example.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;macos+cabal+cpu&lt;/h3&gt; &#xA;&lt;p&gt;Starting from the top-level directory of the project, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ pushd deps       # Change to the deps directory and save the current directory.&#xA;$ ./get-deps.sh    # Run the shell script to retrieve the libtorch dependencies.&#xA;$ popd             # Go back to the root directory of the project.&#xA;$ source setenv    # Set the shell environment to reference the shared library locations.&#xA;$ ./setup-cabal.sh # Create a cabal project file&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To build and test the Hasktorch library, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ cabal build hasktorch  # Build the Hasktorch library.&#xA;$ cabal test hasktorch   # Build and run the Hasktorch library test suite.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To build and test the example executables shipped with hasktorch, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ cabal build examples  # Build the Hasktorch examples.&#xA;$ cabal test examples   # Build and run the Hasktorch example test suites.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To run the MNIST CNN example, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ cd examples                   # Change to the examples directory.&#xA;$ ./datasets/download-mnist.sh  # Download the MNIST dataset.&#xA;$ mv mnist data                 # Move the MNIST dataset to the data directory.&#xA;$ export DEVICE=cpu             # Set device to CPU for the MNIST CNN example.&#xA;$ cabal run static-mnist-cnn    # Run the MNIST CNN example.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;linux+stack+cpu&lt;/h3&gt; &#xA;&lt;p&gt;Install the Haskell Tool Stack if you haven&#39;t already, following &lt;a href=&#34;https://docs.haskellstack.org/en/stable/README/&#34;&gt;instructions here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Starting from the top-level directory of the project, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ pushd deps     # Change to the deps directory and save the current directory.&#xA;$ ./get-deps.sh  # Run the shell script to retrieve the libtorch dependencies.&#xA;$ popd           # Go back to the root directory of the project.&#xA;$ source setenv  # Set the shell environment to reference the shared library locations.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To build and test the Hasktorch library, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ stack build hasktorch  # Build the Hasktorch library.&#xA;$ stack test hasktorch   # Build and run the Hasktorch library test suite.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To build and test the example executables shipped with hasktorch, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ stack build examples  # Build the Hasktorch examples.&#xA;$ stack test examples   # Build and run the Hasktorch example test suites.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To run the MNIST CNN example, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ cd examples                   # Change to the examples directory.&#xA;$ ./datasets/download-mnist.sh  # Download the MNIST dataset.&#xA;$ mv mnist data                 # Move the MNIST dataset to the data directory.&#xA;$ export DEVICE=cpu             # Set device to CPU for the MNIST CNN example.&#xA;$ stack run static-mnist-cnn     # Run the MNIST CNN example.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;macos+stack+cpu&lt;/h3&gt; &#xA;&lt;p&gt;Install the Haskell Tool Stack if you haven&#39;t already, following &lt;a href=&#34;https://docs.haskellstack.org/en/stable/README/&#34;&gt;instructions here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Starting from the top-level directory of the project, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ pushd deps     # Change to the deps directory and save the current directory.&#xA;$ ./get-deps.sh  # Run the shell script to retrieve the libtorch dependencies.&#xA;$ popd           # Go back to the root directory of the project.&#xA;$ source setenv  # Set the shell environment to reference the shared library locations.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To build and test the Hasktorch library, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ stack build hasktorch  # Build the Hasktorch library.&#xA;$ stack test hasktorch   # Build and run the Hasktorch library test suite.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To build and test the example executables shipped with hasktorch, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ stack build examples  # Build the Hasktorch examples.&#xA;$ stack test examples   # Build and run the Hasktorch example test suites.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To run the MNIST CNN example, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ cd examples                   # Change to the examples directory.&#xA;$ ./datasets/download-mnist.sh  # Download the MNIST dataset.&#xA;$ mv mnist data                 # Move the MNIST dataset to the data directory.&#xA;$ export DEVICE=cpu             # Set device to CPU for the MNIST CNN example.&#xA;$ stack run static-mnist-cnn     # Run the MNIST CNN example.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;nixos+cabal+cpu&lt;/h3&gt; &#xA;&lt;p&gt;(Optional) Install and set up Cachix:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ nix-env -iA cachix -f https://cachix.org/api/v1/install  # (Optional) Install Cachix.&#xA;# (Optional) Use IOHK&#39;s cache. See https://input-output-hk.github.io/haskell.nix/tutorials/getting-started/#setting-up-the-binary-cache&#xA;$ cachix use hasktorch                                     # (Optional) Use hasktorch&#39;s cache.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Starting from the top-level directory of the project, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ nix develop  # Enter the nix shell environment for Hasktorch.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To build and test the Hasktorch library, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ cabal build hasktorch  # Build the Hasktorch library.&#xA;$ cabal test hasktorch   # Build and run the Hasktorch library test suite.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To build and test the example executables shipped with hasktorch, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ cabal build examples  # Build the Hasktorch examples.&#xA;$ cabal test examples   # Build and run the Hasktorch example test suites.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To run the MNIST CNN example, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ cd examples                   # Change to the examples directory.&#xA;$ ./datasets/download-mnist.sh  # Download the MNIST dataset.&#xA;$ mv mnist data                 # Move the MNIST dataset to the data directory.&#xA;$ export DEVICE=cpu             # Set device to CPU for the MNIST CNN example.&#xA;$ cabal run static-mnist-cnn    # Run the MNIST CNN example.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;nixos+cabal+cuda11&lt;/h3&gt; &#xA;&lt;p&gt;(Optional) Install and set up Cachix:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ nix-env -iA cachix -f https://cachix.org/api/v1/install  # (Optional) Install Cachix.&#xA;# (Optional) Use IOHK&#39;s cache. See https://input-output-hk.github.io/haskell.nix/tutorials/getting-started/#setting-up-the-binary-cache&#xA;$ cachix use hasktorch                                     # (Optional) Use hasktorch&#39;s cache.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Starting from the top-level directory of the project, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ cat &amp;gt; nix/dev-config.nix&#xA;{&#xA;  profiling = true;&#xA;  cudaSupport = true;&#xA;  cudaMajorVersion = &#34;11&#34;;&#xA;}&#xA;$ nix develop  # Enter the nix shell environment for Hasktorch.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To build and test the Hasktorch library, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ cabal build hasktorch  # Build the Hasktorch library.&#xA;$ cabal test hasktorch   # Build and run the Hasktorch library test suite.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To build and test the example executables shipped with hasktorch, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ cabal build examples  # Build the Hasktorch examples.&#xA;$ cabal test examples   # Build and run the Hasktorch example test suites.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To run the MNIST CNN example, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ cd examples                   # Change to the examples directory.&#xA;$ ./datasets/download-mnist.sh  # Download the MNIST dataset.&#xA;$ mv mnist data                 # Move the MNIST dataset to the data directory.&#xA;$ export DEVICE=&#34;cuda:0&#34;        # Set device to CUDA for the MNIST CNN example.&#xA;$ cabal run static-mnist-cnn    # Run the MNIST CNN example.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;docker+jupyterlab+cuda11&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://hub.docker.com/repository/docker/htorch/hasktorch-jupyter&#34;&gt;This dockerhub repository&lt;/a&gt; provides the docker-image of jupyterlab. It supports cuda11, cuda10 and cpu only. When you use jupyterlab with hasktorch, type following command, then click a url in a console.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ docker run --gpus all -it --rm -p 8888:8888 htorch/hasktorch-jupyter&#xA;or&#xA;$ docker run --gpus all -it --rm -p 8888:8888 htorch/hasktorch-jupyter:latest-cu11&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Known Issues&lt;/h2&gt; &#xA;&lt;h3&gt;Tensors Cannot Be Moved to CUDA&lt;/h3&gt; &#xA;&lt;p&gt;In rare cases, you may see errors like&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cannot move tensor to &#34;CUDA:0&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;although you have CUDA capable hardware in your machine and have followed the getting-started instructions for CUDA support.&lt;/p&gt; &#xA;&lt;p&gt;If that happens, check if &lt;code&gt;/run/opengl-driver/lib&lt;/code&gt; exists. If not, make sure your CUDA drivers are installed correctly.&lt;/p&gt; &#xA;&lt;h3&gt;Weird Behaviour When Switching from CPU-Only to CUDA-Enabled Nix Shell&lt;/h3&gt; &#xA;&lt;p&gt;If you have run &lt;code&gt;cabal&lt;/code&gt; in a CPU-only Hasktorch Nix shell before, you may need to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Clean the &lt;code&gt;dist-newstyle&lt;/code&gt; folder using &lt;code&gt;cabal clean&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Delete the &lt;code&gt;.ghc.environment*&lt;/code&gt; file in the Hasktorch root folder.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Otherwise, at best, you will not be able to move tensors to CUDA, and, at worst, you will see weird linker errors like&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;gcc: error: hasktorch/dist-newstyle/build/x86_64-linux/ghc-8.8.3/libtorch-ffi-1.5.0.0/build/Torch/Internal/Unmanaged/Autograd.dyn_o: No such file or directory&#xA;`cc&#39; failed in phase `Linker&#39;. (Exit code: 1)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;We welcome new contributors.&lt;/p&gt; &#xA;&lt;p&gt;Contact us for access to the &lt;a href=&#34;https://hasktorch.slack.com&#34;&gt;hasktorch slack channel&lt;/a&gt;. You can send an email to &lt;a href=&#34;mailto:hasktorch@gmail.com&#34;&gt;hasktorch@gmail.com&lt;/a&gt; or on twitter as &lt;a href=&#34;https://twitter.com/austinvhuang&#34;&gt;@austinvhuang&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/samstites&#34;&gt;@SamStites&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/tscholak&#34;&gt;@tscholak&lt;/a&gt;, or &lt;a href=&#34;https://twitter.com/junjihashimoto3&#34;&gt;@junjihashimoto3&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Notes for library developers&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/hasktorch/hasktorch/wiki&#34;&gt;the wiki&lt;/a&gt; for developer notes.&lt;/p&gt; &#xA;&lt;h3&gt;Project Folder Structure&lt;/h3&gt; &#xA;&lt;p&gt;Basic functionality:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;deps/&lt;/code&gt; - submodules and downloads for build dependencies (libtorch, mklml, pytorch) -- you can ignore this if you are on Nix&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;examples/&lt;/code&gt; - high level example models (xor mlp, typed cnn, etc.)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;experimental/&lt;/code&gt; - experimental projects or tips&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;hasktorch/&lt;/code&gt; - higher level user-facing library, calls into &lt;code&gt;ffi/&lt;/code&gt;, used by &lt;code&gt;examples/&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Internals (for contributing developers):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;codegen/&lt;/code&gt; - code generation, parses &lt;code&gt;Declarations.yaml&lt;/code&gt; spec from pytorch and produces &lt;code&gt;ffi/&lt;/code&gt; contents&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;inline-c/&lt;/code&gt; - submodule to inline-cpp fork used for C++ FFI&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;libtorch-ffi/&lt;/code&gt;- low level FFI bindings to libtorch&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;spec/&lt;/code&gt; - specification files used for &lt;code&gt;codegen/&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>upenn-cis5520/06-persistent</title>
    <updated>2022-10-10T01:35:39Z</updated>
    <id>tag:github.com,2022-10-10:/upenn-cis5520/06-persistent</id>
    <link href="https://github.com/upenn-cis5520/06-persistent" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
</feed>