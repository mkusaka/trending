<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Haskell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-12-03T01:34:32Z</updated>
  <subtitle>Daily Trending of Haskell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>joe-warren/opencascade-hs</title>
    <updated>2023-12-03T01:34:32Z</updated>
    <id>tag:github.com,2023-12-03:/joe-warren/opencascade-hs</id>
    <link href="https://github.com/joe-warren/opencascade-hs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Haskell Bindings for the OpenCASCADE CAD Kernel + A Declarative CAD/Solid Modeling Library&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;OpenCASCADE-hs&lt;/h1&gt; &#xA;&lt;p&gt;This is my attempt to write a third party Haskell wrapper to &lt;a href=&#34;https://dev.opencascade.org&#34;&gt;Open CASCADE&lt;/a&gt; (&lt;a href=&#34;https://en.wikipedia.org/wiki/Open_Cascade_Technology&#34;&gt;wiki&lt;/a&gt;), which is the underlying framework behind &lt;a href=&#34;https://www.freecad.org/&#34;&gt;FreeCAD&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s &lt;em&gt;very early days&lt;/em&gt;, so the API is subject to change dramatically.&lt;/p&gt; &#xA;&lt;p&gt;My plan is to focus on wrapping the modeling functionality (BRep/Boolean Ops/Curves/etc) before even contemplating any work on the visualization components. This is because my personal usecase for this library is as a framework for declarative CAD.&lt;/p&gt; &#xA;&lt;h1&gt;Waterfall CAD&lt;/h1&gt; &#xA;&lt;p&gt;In parallel, I&#39;m developing a Declarative CAD/Solid Modeling library, called Waterfall-CAD. This uses opencascade-hs as the kernel, but provides a &#34;more functional&#34; API over it.&lt;/p&gt; &#xA;&lt;p&gt;Like &lt;code&gt;opencascade-hs&lt;/code&gt; the API is subject to change dramatically.&lt;/p&gt; &#xA;&lt;h1&gt;Building&lt;/h1&gt; &#xA;&lt;p&gt;I&#39;ve only been testing this on Debian, it probably won&#39;t build on MacOS or Windows.&lt;/p&gt; &#xA;&lt;p&gt;The underlying OpenCASCADE library is portable though, so I&#39;d like to fix that eventually.&lt;/p&gt; &#xA;&lt;p&gt;I&#39;ve been building this project with &lt;a href=&#34;https://docs.haskellstack.org/en/stable/&#34;&gt;&lt;code&gt;stack&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;As this library depends on OpenCASCADE. I&#39;ve been developing this on Debian with the following packages installed:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;libocct-data-exchange-7.6&lt;/code&gt; &lt;code&gt;libocct-data-exchange-dev&lt;/code&gt; &lt;code&gt;libocct-draw-7.6&lt;/code&gt; &lt;code&gt;libocct-draw-dev&lt;/code&gt;, &lt;code&gt;libocct-foundation-7.6&lt;/code&gt;, &lt;code&gt;libocct-foundation-dev&lt;/code&gt;, &lt;code&gt;libocct-modeling-algorithms-7.6&lt;/code&gt;, &lt;code&gt;libocct-modeling-algorithms-dev&lt;/code&gt;, &lt;code&gt;libocct-modeling-data-7.6&lt;/code&gt;, &lt;code&gt;libocct-modeling-data-dev&lt;/code&gt;, &lt;code&gt;libocct-ocaf-7.6&lt;/code&gt;, &lt;code&gt;libocct-ocaf-dev&lt;/code&gt;, &lt;code&gt;libocct-visualization-7.6&lt;/code&gt;, &lt;code&gt;libocct-visualization-dev&lt;/code&gt;, &lt;code&gt;occt-misc&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;I think there should be &lt;em&gt;some&lt;/em&gt; flexibility as to the exact version of libocct required, and which occt packages are necessary, but I&#39;m not at a stage where I want to nail that down yet.&lt;/p&gt; &#xA;&lt;h1&gt;Licensing&lt;/h1&gt; &#xA;&lt;p&gt;Because OpenCASCADE is licensed under the LGPL version 2.1, I&#39;m also using that library for this project.&lt;/p&gt; &#xA;&lt;h1&gt;Examples&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/joe-warren/opencascade-hs/main/waterfall-cad-examples/src/CsgExample.hs&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/joe-warren/opencascade-hs/main/images/csg.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/joe-warren/opencascade-hs/main/waterfall-cad-examples/src/GearExample.hs&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/joe-warren/opencascade-hs/main/images/gear.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/joe-warren/opencascade-hs/main/waterfall-cad-examples/src/RevolutionExample.hs&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/joe-warren/opencascade-hs/main/images/revolution.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/joe-warren/opencascade-hs/main/waterfall-cad-examples/src/SweepExample.hs&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/joe-warren/opencascade-hs/main/images/sweep.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Martinsos/aoc-2023-haskell-template</title>
    <updated>2023-12-03T01:34:32Z</updated>
    <id>tag:github.com,2023-12-03:/Martinsos/aoc-2023-haskell-template</id>
    <link href="https://github.com/Martinsos/aoc-2023-haskell-template" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Template for solving Advent of Code 2023 in Haskell&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;AOC 2023&lt;/h1&gt; &#xA;&lt;p&gt;This is a template project for solving Advent Of Code (2023) in Haskell: fork it and you can start solving!&lt;/p&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;p&gt;You are expected to have &lt;code&gt;ghcup&lt;/code&gt; installed on your machine.&lt;/p&gt; &#xA;&lt;p&gt;Run &lt;code&gt;./ghcup-set.sh&lt;/code&gt; to set the intended version of GHC, cabal and HLS via GHCup.&lt;/p&gt; &#xA;&lt;p&gt;If any of the versions needed are not yet installed on your machine, you can use &lt;code&gt;ghcup tui&lt;/code&gt; to install them.&lt;/p&gt; &#xA;&lt;p&gt;It might work with other combination of versions also, but this combo works for sure.&lt;/p&gt; &#xA;&lt;p&gt;If all is good, &lt;code&gt;cabal build&lt;/code&gt; should complete successfully for you.&lt;/p&gt; &#xA;&lt;h2&gt;Organization of the codebase&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;src/&lt;/code&gt; contains all the Haskell code. &lt;code&gt;src/Day01.hs&lt;/code&gt;, &lt;code&gt;src/Day02.hs&lt;/code&gt;, ... each contain the solution for that specific day, and they are all imported into the &lt;code&gt;src/Main.hs&lt;/code&gt;, which is the executable that we use to easily run the solution for the specific day.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;data/&lt;/code&gt; dir is where puzzle input files go for each day. Your code in &lt;code&gt;src/DayXX.hs&lt;/code&gt; can then read those files as needed. These data files are gitignored, since AoC authors ask not to publicly post your puzzle input files.&lt;/p&gt; &#xA;&lt;h2&gt;Running&lt;/h2&gt; &#xA;&lt;p&gt;Easiest way is calling &lt;code&gt;./day &amp;lt;num&amp;gt;&lt;/code&gt; to run specific day, e.g. &lt;code&gt;./day 1&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;day&lt;/code&gt; is really just a helper script for calling &lt;code&gt;cabal run&lt;/code&gt;, so you can use &lt;code&gt;cabal run&lt;/code&gt; directly if you want more control. &lt;code&gt;cabal run&lt;/code&gt; will build all your code (same as &lt;code&gt;cabal build&lt;/code&gt;) and then run the executable which has &lt;code&gt;src/Main.hs&lt;/code&gt; as its entry point.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;cabal repl&lt;/code&gt; is also interesting option: it will take you to ghci where all the modules are already loaded for you and you can easily run any function, this is great for debugging and testing, or even normal running. You can just type &lt;code&gt;day01&lt;/code&gt; and run it that way. Type &lt;code&gt;:r&lt;/code&gt; to reload upon changes in the code.&lt;/p&gt; &#xA;&lt;h2&gt;Adding new Day&lt;/h2&gt; &#xA;&lt;p&gt;When solving a new Day, lets say Day 17, there are a couple of things you need to set up:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Create a new file: &lt;code&gt;src/Day17.hs&lt;/code&gt;. Inside it, make sure to update its module name to &lt;code&gt;Day17&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Add this module to &lt;code&gt;aoc2023.cabal&lt;/code&gt; file, under &lt;code&gt;other-modules&lt;/code&gt;, as &lt;code&gt;Day17&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Add corresponding input text file to &lt;code&gt;data/&lt;/code&gt; if needed, e.g. &lt;code&gt;data/day17-input.txt&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;In &lt;code&gt;src/Main.hs&lt;/code&gt;, import &lt;code&gt;Day17&lt;/code&gt; and add it to the code.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Project config&lt;/h2&gt; &#xA;&lt;p&gt;This is a cabal-based project.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;aoc2023.cabal&lt;/code&gt; file already contains the default configuration that should work fine for you.&lt;/p&gt; &#xA;&lt;p&gt;You will notice it also contains some commented-out extensions and dependencies(packages). These are some common extensions and dependencies that we think you are likely to need so we put them there for your convenience, you just need to uncomment them in order to get going with them.&lt;/p&gt; &#xA;&lt;h2&gt;Other templates&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Nice, a bit heavier/richer AoC template (Stack based) that I took some nice ideas from: &lt;a href=&#34;https://github.com/samcoy3/advent-of-code-template&#34;&gt;https://github.com/samcoy3/advent-of-code-template&lt;/a&gt; .&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
  <entry>
    <title>AoC-ESPOL/AoC-2023-Solutions</title>
    <updated>2023-12-03T01:34:32Z</updated>
    <id>tag:github.com,2023-12-03:/AoC-ESPOL/AoC-2023-Solutions</id>
    <link href="https://github.com/AoC-ESPOL/AoC-2023-Solutions" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Community solutions for Advent of Code 2023&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/AoC-ESPOL/AoC-2023-Solutions/master/assets/turtle.png&#34; alt=&#34;turtle&#34; width=&#34;150&#34;&gt; &lt;/p&gt; &#xA;&lt;h1&gt;Soluciones Advent of Code 2023&lt;/h1&gt; &#xA;&lt;p&gt;Bienvenid@! En este repositorio podrás subir tus soluciones para el Advent of Code 2023 realizado en conjunto con la comunidad politécnica.&lt;/p&gt; &#xA;&lt;p&gt;Únete a nuestro leaderboard con el código &lt;strong&gt;1468863-c36b5be4&lt;/strong&gt; y a nuestro canal de discord donde discutiremos todo sobre el Advent of Code: &lt;a href=&#34;https://discord.gg/yuGedCTV&#34;&gt;https://discord.gg/yuGedCTV&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Cómo participo?&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Haz fork a este repositorio&lt;/li&gt; &#xA; &lt;li&gt;Crea un directorio con el nombre NombreApellido&lt;/li&gt; &#xA; &lt;li&gt;Añade tu solución por cada día en el directorio que creaste&lt;/li&gt; &#xA; &lt;li&gt;Crea tu PR&lt;/li&gt; &#xA; &lt;li&gt;Profit!&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;MIT&lt;/p&gt;</summary>
  </entry>
</feed>