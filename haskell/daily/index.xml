<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Haskell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-01-02T01:34:50Z</updated>
  <subtitle>Daily Trending of Haskell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>jaspervdj/patat</title>
    <updated>2023-01-02T01:34:50Z</updated>
    <id>tag:github.com,2023-01-02:/jaspervdj/patat</id>
    <link href="https://github.com/jaspervdj/patat" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Terminal-based presentations using Pandoc&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;patat&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/jaspervdj/patat/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt; &lt;a href=&#34;https://hackage.haskell.org/package/patat&#34;&gt;&lt;img src=&#34;https://img.shields.io/hackage/v/patat.svg?sanitize=true&#34; alt=&#34;Hackage&#34;&gt;&lt;/a&gt; &lt;a href=&#34;&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/tag/jaspervdj/patat.svg?sanitize=true&#34; alt=&#34;GitHub tag&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;patat&lt;/code&gt; (&lt;strong&gt;P&lt;/strong&gt;resentations &lt;strong&gt;A&lt;/strong&gt;top &lt;strong&gt;T&lt;/strong&gt;he &lt;strong&gt;A&lt;/strong&gt;NSI &lt;strong&gt;T&lt;/strong&gt;erminal) is a small tool that allows you to show presentations using only an ANSI terminal. It does not require &lt;code&gt;ncurses&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Leverages the great &lt;a href=&#34;http://pandoc.org/&#34;&gt;Pandoc&lt;/a&gt; library to support many input formats including &lt;a href=&#34;https://wiki.haskell.org/Literate_programming&#34;&gt;Literate Haskell&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Supports &lt;a href=&#34;https://raw.githubusercontent.com/jaspervdj/patat/master/#input-format&#34;&gt;smart slide splitting&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Slides can be split up into &lt;a href=&#34;https://raw.githubusercontent.com/jaspervdj/patat/master/#fragmented-slides&#34;&gt;multiple fragments&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;There is a &lt;a href=&#34;https://raw.githubusercontent.com/jaspervdj/patat/master/#running&#34;&gt;live reload&lt;/a&gt; mode.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jaspervdj/patat/master/#theming&#34;&gt;Theming&lt;/a&gt; support including 24-bit RGB.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jaspervdj/patat/master/#auto-advancing&#34;&gt;Auto advancing&lt;/a&gt; with configurable delay.&lt;/li&gt; &#xA; &lt;li&gt;Optionally &lt;a href=&#34;https://raw.githubusercontent.com/jaspervdj/patat/master/#line-wrapping&#34;&gt;re-wrapping&lt;/a&gt; text to terminal width with proper indentation.&lt;/li&gt; &#xA; &lt;li&gt;Syntax highlighting for nearly one hundred languages generated from &lt;a href=&#34;https://kate-editor.org/&#34;&gt;Kate&lt;/a&gt; syntax files.&lt;/li&gt; &#xA; &lt;li&gt;Experimental &lt;a href=&#34;https://raw.githubusercontent.com/jaspervdj/patat/master/#images&#34;&gt;images&lt;/a&gt; support.&lt;/li&gt; &#xA; &lt;li&gt;Supports &lt;a href=&#34;https://raw.githubusercontent.com/jaspervdj/patat/master/#evaluating-code&#34;&gt;evaluating code snippets and showing the result&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Written in &lt;a href=&#34;http://haskell.org/&#34;&gt;Haskell&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jaspervdj/patat/master/extra/screenshot.png?raw=true&#34; alt=&#34;screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jaspervdj/patat/master/#table-of-contents&#34;&gt;Table of Contents&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jaspervdj/patat/master/#installation&#34;&gt;Installation&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jaspervdj/patat/master/#pre-built-packages&#34;&gt;Pre-built-packages&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jaspervdj/patat/master/#homebrew&#34;&gt;Homebrew&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jaspervdj/patat/master/#from-source&#34;&gt;From source&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jaspervdj/patat/master/#running&#34;&gt;Running&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jaspervdj/patat/master/#options&#34;&gt;Options&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jaspervdj/patat/master/#controls&#34;&gt;Controls&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jaspervdj/patat/master/#input-format&#34;&gt;Input format&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jaspervdj/patat/master/#configuration&#34;&gt;Configuration&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jaspervdj/patat/master/#line-wrapping&#34;&gt;Line wrapping&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jaspervdj/patat/master/#auto-advancing&#34;&gt;Auto advancing&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jaspervdj/patat/master/#advanced-slide-splitting&#34;&gt;Advanced slide splitting&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jaspervdj/patat/master/#fragmented-slides&#34;&gt;Fragmented slides&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jaspervdj/patat/master/#theming&#34;&gt;Theming&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jaspervdj/patat/master/#syntax-highlighting&#34;&gt;Syntax Highlighting&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jaspervdj/patat/master/#pandoc-extensions&#34;&gt;Pandoc Extensions&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jaspervdj/patat/master/#images&#34;&gt;Images&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jaspervdj/patat/master/#breadcrumbs&#34;&gt;Breadcrumbs&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jaspervdj/patat/master/#evaluating-code&#34;&gt;Evaluating code&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jaspervdj/patat/master/#trivia&#34;&gt;Trivia&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Pre-built-packages&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Archlinux: &lt;a href=&#34;https://aur.archlinux.org/packages/patat-bin&#34;&gt;https://aur.archlinux.org/packages/patat-bin&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Debian: &lt;a href=&#34;https://packages.debian.org/unstable/patat&#34;&gt;https://packages.debian.org/unstable/patat&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Ubuntu: &lt;a href=&#34;https://packages.ubuntu.com/bionic/patat&#34;&gt;https://packages.ubuntu.com/bionic/patat&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;openSUSE: &lt;a href=&#34;https://build.opensuse.org/package/show/openSUSE:Factory:ARM/patat&#34;&gt;https://build.opensuse.org/package/show/openSUSE:Factory:ARM/patat&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Fedora: &lt;a href=&#34;https://src.fedoraproject.org/rpms/patat&#34;&gt;https://src.fedoraproject.org/rpms/patat&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can also find generic Linux and Mac OS binaries here: &lt;a href=&#34;https://github.com/jaspervdj/patat/releases&#34;&gt;https://github.com/jaspervdj/patat/releases&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Homebrew&lt;/h3&gt; &#xA;&lt;p&gt;Homebrew packages are offered by a third-party repository:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install &lt;a href=&#34;https://brew.sh/&#34;&gt;Homebrew&lt;/a&gt; for your platform.&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;brew tap nicholasdille/tap&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;brew install patat-bin&lt;/code&gt; to receive the official binaries or &lt;code&gt;brew install patat&lt;/code&gt; for pre-built (&#34;bottled&#34;) binaries.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;For issues and feedback please refer to &lt;a href=&#34;https://github.com/nicholasdille/homebrew-tap&#34;&gt;nicholasdille/homebrew-tap&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;From source&lt;/h3&gt; &#xA;&lt;p&gt;Installation from source is very easy. You can build from source using &lt;code&gt;stack install&lt;/code&gt; or &lt;code&gt;cabal install&lt;/code&gt;. &lt;code&gt;patat&lt;/code&gt; is also available from &lt;a href=&#34;https://hackage.haskell.org/package/patat&#34;&gt;Hackage&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For people unfamiliar with the Haskell ecosystem, this means you can do either of the following:&lt;/p&gt; &#xA;&lt;h4&gt;Using stack&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install &lt;a href=&#34;https://docs.haskellstack.org/en/stable/README/&#34;&gt;stack&lt;/a&gt; for your platform.&lt;/li&gt; &#xA; &lt;li&gt;Clone this repository.&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;stack setup&lt;/code&gt; (if you&#39;re running stack for the first time) and &lt;code&gt;stack install&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Make sure &lt;code&gt;$HOME/.local/bin&lt;/code&gt; is in your &lt;code&gt;$PATH&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Using cabal&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install &lt;a href=&#34;https://www.haskell.org/cabal/&#34;&gt;cabal&lt;/a&gt; for your platform.&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;cabal install patat&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Make sure &lt;code&gt;$HOME/.cabal/bin&lt;/code&gt; is in your &lt;code&gt;$PATH&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Running&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;patat [*options*] file&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Options&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;-w&lt;/code&gt;, &lt;code&gt;--watch&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;: If you provide the &lt;code&gt;--watch&lt;/code&gt; flag, &lt;code&gt;patat&lt;/code&gt; will watch the presentation file for changes and reload automatically. This is very useful when you are writing the presentation.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;-f&lt;/code&gt;, &lt;code&gt;--force&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;: Run the presentation even if the terminal claims it does not support ANSI features.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;-d&lt;/code&gt;, &lt;code&gt;--dump&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;: Just dump all the slides to stdout. This is useful for debugging.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;--version&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;: Display version information.&lt;/p&gt; &#xA;&lt;h2&gt;Controls&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Next slide&lt;/strong&gt;: &lt;code&gt;space&lt;/code&gt;, &lt;code&gt;enter&lt;/code&gt;, &lt;code&gt;l&lt;/code&gt;, &lt;code&gt;→&lt;/code&gt;, &lt;code&gt;PageDown&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Previous slide&lt;/strong&gt;: &lt;code&gt;backspace&lt;/code&gt;, &lt;code&gt;h&lt;/code&gt;, &lt;code&gt;←&lt;/code&gt;, &lt;code&gt;PageUp&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Go forward 10 slides&lt;/strong&gt;: &lt;code&gt;j&lt;/code&gt;, &lt;code&gt;↓&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Go backward 10 slides&lt;/strong&gt;: &lt;code&gt;k&lt;/code&gt;, &lt;code&gt;↑&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;First slide&lt;/strong&gt;: &lt;code&gt;0&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Last slide&lt;/strong&gt;: &lt;code&gt;G&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Jump to slide N&lt;/strong&gt;: &lt;code&gt;N&lt;/code&gt; followed by &lt;code&gt;enter&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Reload file&lt;/strong&gt;: &lt;code&gt;r&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Quit&lt;/strong&gt;: &lt;code&gt;q&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The &lt;code&gt;r&lt;/code&gt; key is very useful since it allows you to preview your slides while you are writing them. You can also use this to fix artifacts when the terminal is resized.&lt;/p&gt; &#xA;&lt;h2&gt;Input format&lt;/h2&gt; &#xA;&lt;p&gt;The input format can be anything that Pandoc supports. Plain markdown is usually the most simple solution:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;---&#xA;title: This is my presentation&#xA;author: Jane Doe&#xA;...&#xA;&#xA;# This is a slide&#xA;&#xA;Slide contents.  Yay.&#xA;&#xA;---&#xA;&#xA;# Important title&#xA;&#xA;Things I like:&#xA;&#xA;- Markdown&#xA;- Haskell&#xA;- Pandoc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Horizontal rulers (&lt;code&gt;---&lt;/code&gt;) are used to split slides.&lt;/p&gt; &#xA;&lt;p&gt;However, if you prefer not use these since they are a bit intrusive in the markdown, you can also start every slide with a header. In that case, the file should not contain a single horizontal ruler.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;patat&lt;/code&gt; will pick the most deeply nested header (e.g. &lt;code&gt;h2&lt;/code&gt;) as the marker for a new slide. Headers &lt;em&gt;above&lt;/em&gt; the most deeply nested header (e.g. &lt;code&gt;h1&lt;/code&gt;) will turn into title slides, which are displayed as as a slide containing only the centered title.&lt;/p&gt; &#xA;&lt;p&gt;This means the following document is equivalent to the one we saw before:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;---&#xA;title: This is my presentation&#xA;author: Jane Doe&#xA;...&#xA;&#xA;# This is a slide&#xA;&#xA;Slide contents.  Yay.&#xA;&#xA;# Important title&#xA;&#xA;Things I like:&#xA;&#xA;- Markdown&#xA;- Haskell&#xA;- Pandoc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And that following document contains three slides: a title slide, followed by two content slides.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;---&#xA;title: This is my presentation&#xA;author: Jane Doe&#xA;...&#xA;&#xA;# Chapter 1&#xA;&#xA;## This is a slide&#xA;&#xA;Slide contents.  Yay.&#xA;&#xA;## Another slide&#xA;&#xA;Things I like:&#xA;&#xA;- Markdown&#xA;- Haskell&#xA;- Pandoc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more information, see &lt;a href=&#34;https://raw.githubusercontent.com/jaspervdj/patat/master/#advanced-slide-splitting&#34;&gt;Advanced slide splitting&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Patat supports comments which can be used as speaker notes.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;---&#xA;title: This is my presentation&#xA;author: Jane Doe&#xA;...&#xA;&#xA;# Chapter 1&#xA;&#xA;&amp;lt;!--&#xA;Note: I should not bore the audience with my thoughts on powerpoint but&#xA;just get straight to the point.&#xA;--&amp;gt;&#xA;&#xA;Slide contents.  Yay.&#xA;&#xA;&amp;lt;!-- TODO: Finish the rest of the presentation. --&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;patat&lt;/code&gt; is fairly configurable. The configuration is done using &lt;a href=&#34;http://yaml.org/&#34;&gt;YAML&lt;/a&gt;. There are two places where you can put your configuration:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;In the presentation file itself, using the &lt;a href=&#34;http://pandoc.org/MANUAL.html#extension-yaml_metadata_block&#34;&gt;Pandoc metadata header&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;In &lt;code&gt;$HOME/.patat.yaml&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;For example, we set an option &lt;code&gt;key&lt;/code&gt; to &lt;code&gt;val&lt;/code&gt; by using the following file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;---&#xA;title: Presentation with options&#xA;author: John Doe&#xA;patat:&#xA;    key: val&#xA;...&#xA;&#xA;Hello world.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or we can use a normal presentation and have the following &lt;code&gt;$HOME/.patat.yaml&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;key: val&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Line wrapping&lt;/h3&gt; &#xA;&lt;p&gt;Line wrapping can be enabled by setting &lt;code&gt;wrap: true&lt;/code&gt; in the configuration. This will re-wrap all lines to fit the terminal width better.&lt;/p&gt; &#xA;&lt;h3&gt;Margins&lt;/h3&gt; &#xA;&lt;p&gt;Margins can be enabled by setting a &lt;code&gt;margins&lt;/code&gt; entry in the configuration:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;---&#xA;title: Presentation with margins&#xA;author: John Doe&#xA;patat:&#xA;    wrap: true&#xA;    margins:&#xA;        left: 10&#xA;        right: 10&#xA;...&#xA;&#xA;Lorem ipsum dolor sit amet, ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This example configuration will generate slides with a margin of 10 characters on the left, and break lines 10 characters before they reach the end of the terminal&#39;s width.&lt;/p&gt; &#xA;&lt;p&gt;It is recommended to enable &lt;a href=&#34;https://raw.githubusercontent.com/jaspervdj/patat/master/#line-wrapping&#34;&gt;line wrapping&lt;/a&gt; along with this feature.&lt;/p&gt; &#xA;&lt;h3&gt;Auto advancing&lt;/h3&gt; &#xA;&lt;p&gt;By setting &lt;code&gt;autoAdvanceDelay&lt;/code&gt; to a number of seconds, &lt;code&gt;patat&lt;/code&gt; will automatically advance to the next slide.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;---&#xA;title: Auto-advance, yes please&#xA;author: John Doe&#xA;patat:&#xA;    autoAdvanceDelay: 2&#xA;...&#xA;&#xA;Hello World!&#xA;&#xA;---&#xA;&#xA;This slide will be shown two seconds after the presentation starts.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that changes to &lt;code&gt;autoAdvanceDelay&lt;/code&gt; are not picked up automatically if you are running &lt;code&gt;patat --watch&lt;/code&gt;. This requires restarting &lt;code&gt;patat&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Advanced slide splitting&lt;/h3&gt; &#xA;&lt;p&gt;You can control the way slide splitting works by setting the &lt;code&gt;slideLevel&lt;/code&gt; variable. This variable defaults to the least header that occurs before a non-header, but it can also be explicitly defined. For example, in the following document, the &lt;code&gt;slideLevel&lt;/code&gt; defaults to &lt;strong&gt;2&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;# This is a slide&#xA;&#xA;## This is a nested header&#xA;&#xA;This is some content&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With &lt;code&gt;slideLevel&lt;/code&gt; 2, the &lt;code&gt;h1&lt;/code&gt; will turn into a &#34;title slide&#34;, and the &lt;code&gt;h2&lt;/code&gt; will be displayed at the top of the second slide. We can customize this by setting &lt;code&gt;slideLevel&lt;/code&gt; manually:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;---&#xA;patat:&#xA;  slideLevel: 1&#xA;...&#xA;&#xA;# This is a slide&#xA;&#xA;## This is a nested header&#xA;&#xA;This is some content&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now, we will only see one slide, which contains a nested header.&lt;/p&gt; &#xA;&lt;h3&gt;Fragmented slides&lt;/h3&gt; &#xA;&lt;p&gt;By default, slides are always displayed &#34;all at once&#34;. If you want to display them fragment by fragment, there are two ways to do that. The most common case is that lists should be displayed incrementally.&lt;/p&gt; &#xA;&lt;p&gt;This can be configured by settings &lt;code&gt;incrementalLists&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; in the metadata block:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;---&#xA;title: Presentation with incremental lists&#xA;author: John Doe&#xA;patat:&#xA;    incrementalLists: true&#xA;...&#xA;&#xA;- This list&#xA;- is displayed&#xA;- item by item&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Setting &lt;code&gt;incrementalLists&lt;/code&gt; works on &lt;em&gt;all&lt;/em&gt; lists in the presentation. To flip the setting for a specific list, wrap it in a block quote. This will make the list incremental if &lt;code&gt;incrementalLists&lt;/code&gt; is not set, and it will display the list all at once if &lt;code&gt;incrementalLists&lt;/code&gt; is set to &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This example contains a sublist which is also displayed incrementally, and then a sublist which is displayed all at once (by merit of the block quote).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;---&#xA;title: Presentation with incremental lists&#xA;author: John Doe&#xA;patat:&#xA;    incrementalLists: true&#xA;...&#xA;&#xA;- This list&#xA;- is displayed&#xA;&#xA;    * item&#xA;    * by item&#xA;&#xA;- Or sometimes&#xA;&#xA;    &amp;gt; * all at&#xA;    &amp;gt; * once&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Another way to break up slides is to use a pagraph only containing three dots separated by spaces. For example, this slide has two pauses:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;Legen&#xA;&#xA;. . .&#xA;&#xA;wait for it&#xA;&#xA;. . .&#xA;&#xA;Dary!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Theming&lt;/h3&gt; &#xA;&lt;p&gt;Colors and other properties can also be changed using this configuration. For example, we can have:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;---&#xA;author: &#39;Jasper Van der Jeugt&#39;&#xA;title: &#39;This is a test&#39;&#xA;patat:&#xA;    wrap: true&#xA;    theme:&#xA;        emph: [vividBlue, onVividBlack, italic]&#xA;        strong: [bold]&#xA;        imageTarget: [onDullWhite, vividRed]&#xA;...&#xA;&#xA;# This is a presentation&#xA;&#xA;This is _emph_ text.&#xA;&#xA;![Hello](foo.png)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The properties that can be given a list of styles are:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;blockQuote&lt;/code&gt;, &lt;code&gt;borders&lt;/code&gt;, &lt;code&gt;bulletList&lt;/code&gt;, &lt;code&gt;codeBlock&lt;/code&gt;, &lt;code&gt;code&lt;/code&gt;, &lt;code&gt;definitionList&lt;/code&gt;, &lt;code&gt;definitionTerm&lt;/code&gt;, &lt;code&gt;emph&lt;/code&gt;, &lt;code&gt;header&lt;/code&gt;, &lt;code&gt;imageTarget&lt;/code&gt;, &lt;code&gt;imageText&lt;/code&gt;, &lt;code&gt;linkTarget&lt;/code&gt;, &lt;code&gt;linkText&lt;/code&gt;, &lt;code&gt;math&lt;/code&gt;, &lt;code&gt;orderedList&lt;/code&gt;, &lt;code&gt;quoted&lt;/code&gt;, &lt;code&gt;strikeout&lt;/code&gt;, &lt;code&gt;strong&lt;/code&gt;, &lt;code&gt;tableHeader&lt;/code&gt;, &lt;code&gt;tableSeparator&lt;/code&gt;, &lt;code&gt;underline&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;The accepted styles are:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;bold&lt;/code&gt;, &lt;code&gt;italic&lt;/code&gt;, &lt;code&gt;dullBlack&lt;/code&gt;, &lt;code&gt;dullBlue&lt;/code&gt;, &lt;code&gt;dullCyan&lt;/code&gt;, &lt;code&gt;dullGreen&lt;/code&gt;, &lt;code&gt;dullMagenta&lt;/code&gt;, &lt;code&gt;dullRed&lt;/code&gt;, &lt;code&gt;dullWhite&lt;/code&gt;, &lt;code&gt;dullYellow&lt;/code&gt;, &lt;code&gt;onDullBlack&lt;/code&gt;, &lt;code&gt;onDullBlue&lt;/code&gt;, &lt;code&gt;onDullCyan&lt;/code&gt;, &lt;code&gt;onDullGreen&lt;/code&gt;, &lt;code&gt;onDullMagenta&lt;/code&gt;, &lt;code&gt;onDullRed&lt;/code&gt;, &lt;code&gt;onDullWhite&lt;/code&gt;, &lt;code&gt;onDullYellow&lt;/code&gt;, &lt;code&gt;onVividBlack&lt;/code&gt;, &lt;code&gt;onVividBlue&lt;/code&gt;, &lt;code&gt;onVividCyan&lt;/code&gt;, &lt;code&gt;onVividGreen&lt;/code&gt;, &lt;code&gt;onVividMagenta&lt;/code&gt;, &lt;code&gt;onVividRed&lt;/code&gt;, &lt;code&gt;onVividWhite&lt;/code&gt;, &lt;code&gt;onVividYellow&lt;/code&gt;, &lt;code&gt;underline&lt;/code&gt;, &lt;code&gt;vividBlack&lt;/code&gt;, &lt;code&gt;vividBlue&lt;/code&gt;, &lt;code&gt;vividCyan&lt;/code&gt;, &lt;code&gt;vividGreen&lt;/code&gt;, &lt;code&gt;vividMagenta&lt;/code&gt;, &lt;code&gt;vividRed&lt;/code&gt;, &lt;code&gt;vividWhite&lt;/code&gt;, &lt;code&gt;vividYellow&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Also accepted are styles of the form &lt;code&gt;rgb#RrGgBb&lt;/code&gt; and &lt;code&gt;onRgb#RrGgBb&lt;/code&gt;, where &lt;code&gt;Rr&lt;/code&gt; &lt;code&gt;Gg&lt;/code&gt; and &lt;code&gt;Bb&lt;/code&gt; are hexadecimal bytes (e.g. &lt;code&gt;rgb#f08000&lt;/code&gt; for an orange foreground, and &lt;code&gt;onRgb#101060&lt;/code&gt; for a deep purple background). Naturally, your terminal needs to support 24-bit RGB for this to work. When creating portable presentations, it might be better to stick with the named colours listed above.&lt;/p&gt; &#xA;&lt;h3&gt;Syntax Highlighting&lt;/h3&gt; &#xA;&lt;p&gt;As part of theming, syntax highlighting is also configurable. This can be configured like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;---&#xA;patat:&#xA;  theme:&#xA;    syntaxHighlighting:&#xA;      decVal: [bold, onDullRed]&#xA;...&#xA;&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;decVal&lt;/code&gt; refers to &#34;decimal values&#34;. This is known as a &#34;token type&#34;. For a full list of token types, see &lt;a href=&#34;https://hackage.haskell.org/package/highlighting-kate-0.6.3/docs/Text-Highlighting-Kate-Types.html#t:TokenType&#34;&gt;this list&lt;/a&gt; -- the names are derived from there in an obvious way.&lt;/p&gt; &#xA;&lt;p&gt;Note that in order to get syntax highlighting to work, you should annotate code blocks with the language, e.g. using a fenced code block:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;```ruby&#xA;puts &#34;Hello, world!&#34;&#xA;```&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Pandoc Extensions&lt;/h3&gt; &#xA;&lt;p&gt;Pandoc comes with a fair number of extensions on top of markdown, listed &lt;a href=&#34;https://hackage.haskell.org/package/pandoc-2.0.5/docs/Text-Pandoc-Extensions.html&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;patat&lt;/code&gt; enables a number of them by default, but this is also customizable.&lt;/p&gt; &#xA;&lt;p&gt;In order to enable an additional extensions, e.g. &lt;code&gt;autolink_bare_uris&lt;/code&gt;, add it to the &lt;code&gt;pandocExtensions&lt;/code&gt; field in the YAML metadata:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;---&#xA;patat:&#xA;  pandocExtensions:&#xA;    - patat_extensions&#xA;    - autolink_bare_uris&#xA;...&#xA;&#xA;Document content...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;patat_extensions&lt;/code&gt; in the above snippet refers to the default set of extensions enabled by &lt;code&gt;patat&lt;/code&gt;. If you want to disable those and only use a select few extensions, simply leave it out and choose your own:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;---&#xA;patat:&#xA;  pandocExtensions:&#xA;    - autolink_bare_uris&#xA;    - emoji&#xA;...&#xA;&#xA;...&#xA;&#xA;Document content...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you don&#39;t want to enable any extensions, simply set &lt;code&gt;pandocExtensions&lt;/code&gt; to the empty list &lt;code&gt;[]&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Images&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;patat-0.8.0.0&lt;/code&gt; and newer include images support for some terminal emulators.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;---&#xA;patat:&#xA;  images:&#xA;    backend: auto&#xA;...&#xA;&#xA;# A slide with only an image.&#xA;&#xA;![](matterhorn.jpg)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;patat&lt;/code&gt; can display full-size images on slides. For this to work &lt;code&gt;images&lt;/code&gt; must be enabled in the configuration and the slide needs to contain only a single image and no other content. The image will be centered and resized to fit the terminal window.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;images&lt;/code&gt; is off by default in the configuration.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;patat&lt;/code&gt; supports the following image drawing backends:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;backend: iterm2&lt;/code&gt;: uses &lt;a href=&#34;https://iterm2.com/&#34;&gt;iTerm2&lt;/a&gt;&#39;s special escape sequence to render the image. This even works with animated GIFs!&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;backend: kitty&lt;/code&gt;: uses &lt;a href=&#34;https://sw.kovidgoyal.net/kitty/kittens/icat.html&#34;&gt;Kitty&#39;s icat command&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;backend: w3m&lt;/code&gt;: uses the &lt;code&gt;w3mimgdisplay&lt;/code&gt; executable to draw directly onto the window. This has been tested in &lt;code&gt;urxvt&lt;/code&gt; and &lt;code&gt;xterm&lt;/code&gt;, but is known to produce weird results in &lt;code&gt;tmux&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;If &lt;code&gt;w3mimgdisplay&lt;/code&gt; is in a non-standard location, you can specify that using &lt;code&gt;path&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;backend: &#39;w3m&#39;&#xA;path: &#39;/home/jasper/.local/bin/w3mimgdisplay&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Breadcrumbs&lt;/h3&gt; &#xA;&lt;p&gt;By default, &lt;code&gt;patat&lt;/code&gt; will print a breadcrumbs-style header, e.g.:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;example.md &amp;gt; This is a title &amp;gt; This is a subtitle&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This feature can be turned off by using:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;patat:&#xA;  breadcrumbs: false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Slide numbers&lt;/h3&gt; &#xA;&lt;p&gt;By default, &lt;code&gt;patat&lt;/code&gt; will display slide number in bottom-right corner&lt;/p&gt; &#xA;&lt;p&gt;This feature can be turned off by using:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;patat:&#xA;  slideNumber: false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Evaluating code&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;patat&lt;/code&gt; can evaluate code blocks and show the result. You can register an &lt;em&gt;evaluator&lt;/em&gt; by specifying this in the YAML metadata:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;---&#xA;patat:&#xA;  eval:&#xA;    ruby:&#xA;      command: irb --noecho --noverbose&#xA;      fragment: true  # Optional&#xA;      replace: false  # Optional&#xA;...&#xA;&#xA;Here is an example of a code block that is evaluated:&#xA;&#xA;```ruby&#xA;puts &#34;Hi&#34;&#xA;```&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;An arbitrary amount of evaluators can be specified, and whenever a a class attribute on a code block matches the evaluator, it will be used.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note that executing arbitrary code is always dangerous&lt;/strong&gt;, so double check the code of presentations downloaded from the internet before running them if they contain &lt;code&gt;eval&lt;/code&gt; settings.&lt;/p&gt; &#xA;&lt;p&gt;Aside from the command, there are two more options:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;fragment&lt;/code&gt;: Introduce a pause (see &lt;a href=&#34;https://raw.githubusercontent.com/jaspervdj/patat/master/#fragmented-slides&#34;&gt;fragments&lt;/a&gt;) in between showing the original code block and the output. Defaults to &lt;code&gt;true&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;replace&lt;/code&gt;: Remove the original code block and replace it with the output rather than appending the output in a new code block. Defaults to &lt;code&gt;false&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Setting &lt;code&gt;fragment: false&lt;/code&gt; and &lt;code&gt;replace: true&lt;/code&gt; offers a way to &#34;filter&#34; code blocks, which can be used to render ASCII graphics.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;---&#xA;patat:&#xA;  eval:&#xA;    figlet:&#xA;      command: figlet&#xA;      fragment: false&#xA;      replace: true&#xA;...&#xA;&#xA;```figlet&#xA;Fancy Font&#xA;```&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This feature works by simply by:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Spawn a process with the provided command&lt;/li&gt; &#xA; &lt;li&gt;Write the contents of the code block to the &lt;code&gt;stdin&lt;/code&gt; of the process&lt;/li&gt; &#xA; &lt;li&gt;Wait for the process to exit&lt;/li&gt; &#xA; &lt;li&gt;Render the &lt;code&gt;stdout&lt;/code&gt; of the process&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Trivia&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;&#34;Patat&#34;&lt;/em&gt; is the Flemish word for a simple potato. Dutch people also use it to refer to French Fries but I don&#39;t really do that -- in Belgium we just call fries &lt;em&gt;&#34;Frieten&#34;&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The idea of &lt;code&gt;patat&lt;/code&gt; is largely based upon &lt;a href=&#34;https://github.com/visit1985/mdp&#34;&gt;MDP&lt;/a&gt; which is in turn based upon &lt;a href=&#34;https://github.com/jclulow/vtmc&#34;&gt;VTMC&lt;/a&gt;. I wanted to write a clone using Pandoc because I ran into a markdown parsing bug in MDP which I could not work around. A second reason to do a Pandoc-based tool was that I would be able to use &lt;a href=&#34;https://wiki.haskell.org/Literate_programming&#34;&gt;Literate Haskell&lt;/a&gt; as well. Lastly, I also prefer not to install Node.js on my machine if I can avoid it.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>chessai/theseus</title>
    <updated>2023-01-02T01:34:50Z</updated>
    <id>tag:github.com,2023-01-02:/chessai/theseus</id>
    <link href="https://github.com/chessai/theseus" rel="alternate"></link>
    <summary type="html">&lt;p&gt;theseus, functional programming language with fully reversible computation&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Credit:&lt;/h2&gt; &#xA;&lt;p&gt;Credit for design and original implementation of Theseus goes to Roshan P. James and Amr Sabry of Indiana University. This is my fork of their implementation, which I intend to keep as a pet project.&lt;/p&gt; &#xA;&lt;p&gt;The original project can be found &lt;a href=&#34;https://bitbucket.org/roshanjames/theseus&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Theseus, the programming language.&lt;/h1&gt; &#xA;&lt;p&gt;Why create another programming language in this time and age? And why make such an obscure finicky one wherein it&#39;s not obvious how one can write a web server or an iphone app? Theseus exists due to a certain philosophical point of view on computation. What follows is a casual overview.&lt;/p&gt; &#xA;&lt;p&gt;The paradox of the Ship of Theseus was originally proposed by Plutarch in the setting of the ship that the Greek hero Theseus used for his adventures. Since the Athenians admired Theseus they took on the task of preserving the ship in his memory. Over time, as parts of the ship got spoiled, they replaced them with equivalent new parts. Thus the ship was always in good shape.&lt;/p&gt; &#xA;&lt;p&gt;However one day, many years later, someone makes the observation that the ship no longer had any original parts. The entirety of the ship had been replaced piece by piece. This raises the question: is this ship really still the ship of Theseus?&lt;/p&gt; &#xA;&lt;p&gt;And, if not, when does the change take place? When the first part is replaced? When the last one is replaced? When about half the parts are replaced?&lt;/p&gt; &#xA;&lt;p&gt;Further, to compound the question, Thomas Hobbes added the following corollary: Imagine a junk yard outside Athens where all the discarded parts of the ship had been collected. If the proprietor of the junk assembled the parts into a ship, which ship is now the real ship of Theseus?&lt;/p&gt; &#xA;&lt;p&gt;This is a philosophical paradox about the nature of equality and identity. The question also applies to people. Since we are constantly changing, cells and thought patterns continuously being replaced, is any person the same person they were some time ago? Can anyone ever not change? Is a lactose free, sugar free, gluten free cupcake still a cupcake?&lt;/p&gt; &#xA;&lt;p&gt;Our programming language is named Theseus because, like in the paradox, the main computation step involves replacing a value by an isomorphic value. Since isomorphic things really are the same, have we changed the value? And if not, what have we computed? Have we computed at all? As we keep doing these replacement in our program we will have transformed the value that was the input to the value that is the output.&lt;/p&gt; &#xA;&lt;p&gt;There are many answers to the paradox of the ship of Theseus. The obvious answers of saying either &#39;yes, it is the same ship&#39; or &#39;no it&#39;s not&#39; have their justifications. Other answers exist too. One is to say that the question is wrong and that it meaningless to ask this sort of question about identity. Like a river whose very nature is to flow and change from moment to moment, so is nature of the ship. Over time the ship changes, just like the river, and it is meaningless to ask if is the same ship. It is our flawed notion of time and identity that makes us assume that the ship is not like the river and to expect one to have static identity and the other one to not.&lt;/p&gt; &#xA;&lt;p&gt;Theseus owes its design to a certain philosophical point of view about computation. Turing machines and the lambda-calculus are abstract models of computation. They were invented by people as mental models of how computation may be expressed. These are meant to serve as conceptual entities and we may think of them as being free of physical constraints, i.e. it does not matter if you have the latest laptop, a whole data center or no computer at all, the ideas underlying the abstract models apply equally well. However there is something wrong with this view.&lt;/p&gt; &#xA;&lt;p&gt;Abstract models of computation are meant to apply to our physical reality. We might be constrained by the resources we have at hand to do some computations. For instance, we might not have enough memory to run some programs. However, we do expect that models are compatible with our physics. For example, if we imagined that each step of a Turing machine took only half the amount of time the previous step took to execute, after 2 units of time time all Turing machines would have observable results. Such a machine is impossible to build (except maybe in the movie Inception where you could fall asleep causing time to speed up in each recursive dream step). Its not just the difficulty of building it thats at issue here. This violates the our notion of space and time in a deep way. Futher it gives rise to issues in our mathemaics and formal logics since it resolves the halting problem. We think of such models of computations that violate physics merely as curiosities and not as modeling computation in the physical world.&lt;/p&gt; &#xA;&lt;p&gt;The line of work that Theseus comes from stems from the idea that abstract models of computation, must in their essence be compatible with our physics. Mordern physics at the level of quantum mechanics describes a universe where every fundamental action is reversible and fundamental quantities such as energy, matter and information are conserved. The notion of conservation of information stems from a line of thought originating from Maxwell&#39;s paradox of the &#34;demon&#34; that seemed to violate the Second law of Thermodynamics and its current accepted resolution set forth by Ralph Landauer. Landauer argued that the demon must do thermodynamic work to forget the information that its learns about the speed of each particle. This act of forgetting information implied that information should be treated as a physical quantity subject to conservation laws. In more recent years, Pasquele Malacaria and others wrote about the entropy of computation and Eric Lutz and others experimentally verified Landauer&#39;s principle. (&#34;Maxwell&#39;s Demon 2&#34; by Leff and Rex is a pretty good read on the general topic; the first part of the book is pretty accessible and the later part is largely a collection of historically relevant papers.)&lt;/p&gt; &#xA;&lt;p&gt;So the physics that Theseus is concerned with is this strange new physics where information is not longer a concept of the human mind, like love and peace, but a physical entity. This has happened to computation before; before Turing worked out that computation itself had a formal notion that can be cpatured by abstract computational models, computation itself was considered an activity of the human mind not subject to the rigors of mathematics and logic.&lt;/p&gt; &#xA;&lt;p&gt;The model of computation that was originally devised in this regard came out under the longish name of &#39;dagger symmetric traced bimonoidal categories&#39;. The name was too long, was somewhat imprecise and didn&#39;t really say much at all. The underlying idea was that we could look for computation in the rules of equality.&lt;/p&gt; &#xA;&lt;p&gt;If every allowed operation is a transformation of one quantity for another equivalent quantity, then computation should preserve information. However, can we even compute like this? After all, our conventional models of computation allows us to do &#34;logical or&#34; and &#34;logical and&#34; reducing two bools into one bool. Changing the value of a variable means loosing the information in that variable forever. Conditional statements and loops seem to inherently be lossy operations because it is unclear how to execute them in reverse without knowing which banches were originally taken. And more importantly, in the words of Barry Mazur, when is one thing equal to some other thing?&lt;/p&gt; &#xA;&lt;p&gt;We settled on simplest notions of equality, those familiar from arithmetic. Rules like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;0 + x       = x&#xA;x + y       = y + x&#xA;(x + y) + z = x + (y + z)&#xA;&#xA;1 * x       = x&#xA;x * y       = y * x&#xA;(x * y) * z = x * (y * z)&#xA;&#xA;x * 0       = 0&#xA;x * (y + z) = x * y + x * y&#xA;&#xA;if x = y and y = z, then x = z&#xA;if x = y and w = z, then x + w = y + z&#xA;if x = y and w = z, then x * w = y * z&#xA;if x + y = x + z, then y = z&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We then took the numbers represented by &lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt; etc to be a measure of the &#34;amount&#34; of information and we only allowed operation that corresponded to these equalities. Thus each operation preserved the amount of information.&lt;/p&gt; &#xA;&lt;p&gt;For a while it was unclear that what we had was even a model of computation, i.e. it took us a while to learn to express programs in it. Figuring out how to do the equivalent of a conditional took a long time in that setting. The resulting model of computation was one where every primitive operation was a sort of type isomorphism. When we add recursive types to the mix, the model becomes Turing complete. Programs in this early model were easier to represent as diagrams. Each program was essntially a complex wiring diagram where each wire had a type and process of &#34;running&#34; the program was the process of tracing the flow of particles through these wires. In the references below you can find lots of details about all this.&lt;/p&gt; &#xA;&lt;h2&gt;A Gentle Introduction to Theseus&lt;/h2&gt; &#xA;&lt;p&gt;While all of this worked out in theory, it was tedious constructing programs. For attempts of programming directly in the above model see &lt;a href=&#34;http://www.cs.indiana.edu/~sabry/papers/cat-rev.pdf&#34;&gt;PDF&lt;/a&gt;, &lt;a href=&#34;http://dl.acm.org/citation.cfm?id=2103667&amp;amp;dl=ACM&amp;amp;coll=DL&amp;amp;CFID=370820997&amp;amp;CFTOKEN=65718506&#34;&gt;PDF&lt;/a&gt; and &lt;a href=&#34;http://link.springer.com/chapter/10.1007%2F978-3-642-36315-3_5&#34;&gt;PDF&lt;/a&gt;. This was when Theseus happened and we realized that we could express the computations of the above information preserving model in a format that looked somewhat like a regular functional programming language. Much like the situation of replacing ship parts with other equivalent ship parts, Theseus computes by replacing values with equivalent values.&lt;/p&gt; &#xA;&lt;p&gt;All the programs in Theseus are reversible and the type system will prevent you from writing anything that isnt. You can program in Theseus without knowing anything about the body of theory that motivated it.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;-- booleans&#xA;data Bool = True | False&#xA;&#xA;-- boolean not &#xA;iso not :: Bool &amp;lt;-&amp;gt; Bool&#xA;| True  &amp;lt;-&amp;gt; False&#xA;| False &amp;lt;-&amp;gt; True&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Theseus has algebraic data types. It has no GADTs or polymorphism yet, but those are boring and can be added later. For the purpose of this presentation I will pretend that we do have polymorphism though. The equivalent of functions in Theseus are the things called &lt;code&gt;iso&lt;/code&gt;. The &lt;code&gt;iso&lt;/code&gt; called &lt;code&gt;not&lt;/code&gt; maps &lt;code&gt;Bool&lt;/code&gt; to &lt;code&gt;Bool&lt;/code&gt;. In a coventional functional language the part on the left hand side of the &lt;code&gt;&amp;lt;-&amp;gt;&lt;/code&gt; is called the pattern and the part on the right is called the expression. In Theseus, both the LHS and the RHS of the &lt;code&gt;&amp;lt;-&amp;gt;&lt;/code&gt; are called patterns. In Theseus patterns and expressions are the same thing.&lt;/p&gt; &#xA;&lt;p&gt;Now here is the interesting bit: The patterns on the right hand side and the patterns on the left hand side should entirely cover the type. On the RHS we have&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;:: Bool &amp;lt;-&amp;gt;&#xA;| True  &amp;lt;-&amp;gt;&#xA;| False &amp;lt;-&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;which do indeed cover all the cases of the type &lt;code&gt;Bool&lt;/code&gt;. On the LHS we have&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;:: &amp;lt;-&amp;gt; Bool&#xA;|  &amp;lt;-&amp;gt; False&#xA;|  &amp;lt;-&amp;gt; True&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;which also covers the type bool. Patterns cover a type, when every value of the type is matched by one and only one pattern. So the following single pattern does not cover the type &lt;code&gt;Bool&lt;/code&gt; since there the value &lt;code&gt;True&lt;/code&gt; is unmatched.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;:: Bool&#xA;| False&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The following also does not cover the type &lt;code&gt;Bool&lt;/code&gt; since the value &lt;code&gt;False&lt;/code&gt; can be matched by both patterns. Here the variable &lt;code&gt;x&lt;/code&gt; is a pattern that matches any value.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;:: Bool&#xA;| False&#xA;| x&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The following does cover the type &lt;code&gt;Bool&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;:: Bool&#xA;| x&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here is another type definition and another &lt;code&gt;iso&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;data Num = Z | S Num &#xA;&#xA;iso parity :: Num * Bool &amp;lt;-&amp;gt; Num * Bool&#xA;| n, x                   &amp;lt;-&amp;gt; lab $ n, Z, x&#xA;| lab $ S n, m, x        &amp;lt;-&amp;gt; lab $ n, S m, not x&#xA;| lab $ Z, m, x          &amp;lt;-&amp;gt; m, x&#xA;where lab :: Num * Num * Bool&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here the &lt;code&gt;lab&lt;/code&gt; is called a label and labels are followed by a &lt;code&gt;$&lt;/code&gt; sign. All the patterns that have no label should cover the type of the corresponding side of the function.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;:: Num * Bool &amp;lt;-&amp;gt; Num * Bool&#xA;| n, x        &amp;lt;-&amp;gt; &#xA;|             &amp;lt;-&amp;gt; &#xA;|             &amp;lt;-&amp;gt; m, x&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here &lt;code&gt;n, x&lt;/code&gt; on the LHS do cover the type &lt;code&gt;Num * Bool&lt;/code&gt;. The variable &lt;code&gt;n&lt;/code&gt; matches any &lt;code&gt;Num&lt;/code&gt; and the variable &lt;code&gt;x&lt;/code&gt; matches any &lt;code&gt;Bool&lt;/code&gt;. The RHS is covered similalry by &lt;code&gt;m, x&lt;/code&gt;. The label &lt;code&gt;lab&lt;/code&gt; has the type &lt;code&gt;Num * Num * Bool&lt;/code&gt; and the intention is that the patterns of the label on the LHS and the RHS must each should cover the type of label.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;:: Num * Num * Bool &amp;lt;-&amp;gt;&#xA;|                   &amp;lt;-&amp;gt; &#xA;| lab $ S n, m, x   &amp;lt;-&amp;gt; &#xA;| lab $ Z, m, x     &amp;lt;-&amp;gt; &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On the LHS we see that every value of the type &lt;code&gt;Num * Num * Bool&lt;/code&gt; is matched by one of the two patterns. The same applies to the RHS patterns of the &lt;code&gt;lab&lt;/code&gt; label.&lt;/p&gt; &#xA;&lt;p&gt;Labels are a way of doing loops. When a pattern on the LHS results in a label application on the RHS, control jumps to the LHS again and we try to match the resulting value against a pattern of teh label on the RHS. This continues till we end up in a non-labelled pattern on the right. So lets trace the execution of &lt;code&gt;parity&lt;/code&gt; when we given it the input &lt;code&gt;S S S Z, True&lt;/code&gt; of the type &lt;code&gt;Num * Bool&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;S S S Z, True           -&amp;gt; lab $ S S S Z, Z, True &#xA;lab $ S S S Z, Z, True&#x9;-&amp;gt; lab $ S S Z, S Z, False&#xA;lab $ S S Z, S Z, False -&amp;gt; lab $ S Z, S S Z, True&#xA;lab $ S Z, S S Z, True&#x9;-&amp;gt; lab $ Z, S S S Z, False&#xA;lab $ Z, S S S Z, False -&amp;gt; S S S Z, False &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;So parity of &lt;code&gt;S S S Z, True&lt;/code&gt; applied &lt;code&gt;not&lt;/code&gt; to &lt;code&gt;True&lt;/code&gt; three times, resulting in &lt;code&gt;S S S Z, False&lt;/code&gt;. Here is one more &lt;code&gt;iso&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;iso add1 :: Num &amp;lt;-&amp;gt; Num &#xA;| x            &amp;lt;-&amp;gt; ret $ inR x&#xA;| lab $ Z      &amp;lt;-&amp;gt; ret $ inL () &#xA;| lab $ S n    &amp;lt;-&amp;gt; lab $ n&#xA;| ret $ inL () &amp;lt;-&amp;gt; Z&#xA;| ret $ inR n  &amp;lt;-&amp;gt; S n&#xA;where ret :: 1 + Num&#xA;      lab :: Num&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This &lt;code&gt;iso&lt;/code&gt; has two labels &lt;code&gt;lab&lt;/code&gt; and &lt;code&gt;ret&lt;/code&gt; and one can verify that the same coverage contraints hold. Here the type &lt;code&gt;1 + Num&lt;/code&gt; would be written as &lt;code&gt;Either () Num&lt;/code&gt; in Haskell, i.e. &lt;code&gt;1&lt;/code&gt; is the unit type that has only one value. The value is denoted by &lt;code&gt;()&lt;/code&gt; and is read as &#34;unit&#34;. One can run &lt;code&gt;add1&lt;/code&gt; on any &lt;code&gt;n&lt;/code&gt; of type &lt;code&gt;Num&lt;/code&gt; and verify that we get &lt;code&gt;S n&lt;/code&gt; back as the result.&lt;/p&gt; &#xA;&lt;p&gt;Now here is the next interesting bit: For any Theseus iso, we can get its inverse iso by simply swapping the LHS and RHS of the clauses. This also get at the essence of the idea of information preservation: if we have a program and an input to it, we can run the input through the program and get the program and the output. Using the program and the output, we can recover the input.&lt;/p&gt; &#xA;&lt;p&gt;Some programs may not terminate on some inputs and in such cases it is meaningless to ask about reverse execution. Given that Theseus is a Turing complete language it is not surprising that some executions are non-terminating. What however may be surprising that information preservation holds in the presence of non-termination.&lt;/p&gt; &#xA;&lt;p&gt;Here the reverse execution of &lt;code&gt;add1&lt;/code&gt;, lets call it &lt;code&gt;sub1&lt;/code&gt; does indeed diverge on the input &lt;code&gt;Z&lt;/code&gt;. For every other value of the form &lt;code&gt;S n&lt;/code&gt; it returns &lt;code&gt;n&lt;/code&gt;. Its worth tracing this execution and thinking about why this comes about in Theseus.&lt;/p&gt; &#xA;&lt;p&gt;Theseus also supports the notion of parametrizing an iso with another one. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;iso if :: then:(a &amp;lt;-&amp;gt; b) -&amp;gt; else:(a &amp;lt;-&amp;gt; b) -&amp;gt; (Bool * a &amp;lt;-&amp;gt; Bool * b)&#xA;| True, x  &amp;lt;-&amp;gt; True, then x&#xA;| False, x &amp;lt;-&amp;gt; False, else x&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here the iso called &lt;code&gt;if&lt;/code&gt; takes two arguments, &lt;code&gt;then&lt;/code&gt; and &lt;code&gt;else&lt;/code&gt;, and decides which one to call depending on the value of the boolean argument. Theseus doesn&#39;t really have higher-order or first-class functions. The parameter isos are expected to be fully inlined before transofrmation of the value starts. Theseus will only run a value &lt;code&gt;v:t1&lt;/code&gt; on an iso of type &lt;code&gt;t1 &amp;lt;-&amp;gt; t2&lt;/code&gt;, and the &lt;code&gt;-&amp;gt;&lt;/code&gt; types in the above should be fully instantiated away.&lt;/p&gt; &#xA;&lt;p&gt;Running &lt;code&gt;if ~then:add1 ~else:sub1&lt;/code&gt; on the input &lt;code&gt;True, S Z&lt;/code&gt; gives us the output &lt;code&gt;True, S S Z&lt;/code&gt; and running the same function with input &lt;code&gt;False, S Z&lt;/code&gt; gives us &lt;code&gt;False, Z&lt;/code&gt;. The syntax of labelled arguments is similar to that used by OCaml.&lt;/p&gt; &#xA;&lt;p&gt;Reverse evaluation works by flipping LHS and RHS in the same way as before. However, you wonder, what happens when there is a function call in a left hand side pattern? Here is a simple example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;iso adjoint :: f:(a &amp;lt;-&amp;gt; b) -&amp;gt; (b &amp;lt;-&amp;gt; a)&#xA;| f x &amp;lt;-&amp;gt; x&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here is the interesting bit again: An iso call on the left side pattern is the dual of an iso call on the right hand side. When &lt;code&gt;f x&lt;/code&gt; appears on the right we know that we have an &lt;code&gt;x&lt;/code&gt; in hand and the result we want is the result of the application &lt;code&gt;f x&lt;/code&gt;. When &lt;code&gt;f x&lt;/code&gt; appears on the left it means that we have the result of the application &lt;code&gt;f x&lt;/code&gt; and we want to determine &lt;code&gt;x&lt;/code&gt;. We can infer the value of &lt;code&gt;x&lt;/code&gt; by tracing the flow of the given value backwards through &lt;code&gt;f&lt;/code&gt; and the result of the this backward execution of &lt;code&gt;f&lt;/code&gt; is &lt;code&gt;x&lt;/code&gt;. We can do this because isos represent information preserving transformations.&lt;/p&gt; &#xA;&lt;p&gt;So if we had &lt;code&gt;add1&lt;/code&gt; and its inverse &lt;code&gt;sub1&lt;/code&gt;, then &lt;code&gt;adjoint ~f:add1&lt;/code&gt; is equivalent to &lt;code&gt;sub1&lt;/code&gt; and &lt;code&gt;adjoint ~f:(adjoint ~f:add1)&lt;/code&gt; is equivalent to &lt;code&gt;add1&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Some references for additional reading.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Roshan P. James and Amr Sabry. Theseus: A High Level Language for Reversible Computing. Work-in-progress report in the Conference on Reversible Computation, 2014. &lt;a href=&#34;http://www.cs.indiana.edu/~sabry/papers/theseus.pdf&#34;&gt;PDF&lt;/a&gt;&lt;/p&gt; &lt;p&gt;This is the paper that introduces Theseus. The syntax of Theseus as presented here differs somewhat from what is in the paper, but most of the these syntactic differences are superficial and largely an artifact of the difficulty of having Parsec understand location sensitive syntax. Please see below for some notes on how the implementation of Theseus differs from that in the paper. For more of the academically relevant citations, you can chase the references at the end of the paper.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Harvey Leff and Andrew F. Rex. Maxwell&#39;s Demon 2 Entropy, Classical and Quantum Information, Computing. CRC Press, 2002. &lt;a href=&#34;http://www.amazon.com/Maxwells-Entropy-Classical-Information-Computing/dp/0750307595&#34;&gt;Amazon&lt;/a&gt;&lt;/p&gt; &lt;p&gt;This book is a survey of about a century and a half of thought about Maxwell&#39;s demon with significant focus on Landauer&#39;s principle and the work surrounding it.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Running Theseus Programs&lt;/h1&gt; &#xA;&lt;p&gt;For now Theseus does not have a well developed REPL and is still work in progress. We use the Haskell REPL to run it. Roughly:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ cd examples/&#xA;$ ghci ../src/Theseus.hs &#xA;[...]&#xA;Ok, modules loaded: Theseus.&#xA;*Theseus&amp;gt; run &#34;peano.ths&#34;&#xA;[...]&#xA;-- {Loading bool.ths}&#xA;Typechecking...&#xA;Evaluating...&#xA;eval toffoli True, (True, True) = True, (True, False)&#xA;eval toffoli True, (True, False) = True, (True, True)&#xA;[...]&#xA;*Theseus&amp;gt; &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Like the &lt;code&gt;run&lt;/code&gt; function above, we also have &lt;code&gt;echo&lt;/code&gt; which parses the given file and echoes it on screen and &lt;code&gt;echoT&lt;/code&gt; which prints out all the definitions after parsing the given file and inlining all the imports. &lt;code&gt;echoT&lt;/code&gt; also checks for violations of non-overlapping and exhaustive pattern coverage and reports these. For instance:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;*Theseus&amp;gt; echoT &#34;test.ths&#34;&#xA;[...]&#xA;iso f :: Bool &amp;lt;-&amp;gt; Bool&#xA;| True &amp;lt;-&amp;gt; False&#xA;| x &amp;lt;-&amp;gt; True&#xA; &#xA;Error: LHS of f: Multiple patterns match values of the form : True&#xA;*Theseus&amp;gt; &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Differences between the implementation and the RC 2014 paper&lt;/h1&gt; &#xA;&lt;p&gt;The current implementation of Theseus is of experimental status. There are many niceties and tools required for a proper programming language that are not available as yet. When editing Theseus programs turn on Haskell mode in Emacs and that tends to work out ok.&lt;/p&gt; &#xA;&lt;p&gt;Here are some notable differences from that of the paper.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;The type checker is not yet implmented. However, Theseus will check strict coverage and complain if there are clauses that are overlapping or non-exhaustve. It does not check types of the variables or that they are used exaclty once. The strict coverage of function call contexts is also not checked.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;We need to specify a keyword called &lt;code&gt;iso&lt;/code&gt; when defining maps.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The import and file load semantics currently creates one flat list of definitions. This can violate the expected static scope of top level definitions.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The paper allows for dual definitions as shown below. The current implementation does not handle simulataneous definition of the inverse function &lt;code&gt;:: sub1&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;  add1 :: Num &amp;lt;-&amp;gt; Num :: sub1&#xA;  | ... &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;All constructors take only one type or value arugment, similar to OCaml constructor definitions. Hence one has to write&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;data List = E | Cons (Num * List)&#xA;&#xA;f :: ...&#xA;| ... Cons (n, ls) ...  &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;instead of&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;data List = E | Cons Num List&#xA;&#xA;f :: ...&#xA;| ... (Cons n ls) ...  &#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>shawwn/wiki</title>
    <updated>2023-01-02T01:34:50Z</updated>
    <id>tag:github.com,2023-01-02:/shawwn/wiki</id>
    <link href="https://github.com/shawwn/wiki" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Research wiki&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Running on macOS&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;brew install s3cmd&#xA;brew install tidy-html5&#xA;brew install imagemagick&#xA;brew install exiftool&#xA;npm i -g mathjax-node-page&#xA;&#xA;#&#xA;# Setting up Haskell&#xA;#&#xA;&#xA;# https://github.com/haskell/ghcup&#xA;&#xA;# complete bootstrap&#xA;curl https://gitlab.haskell.org/haskell/ghcup/raw/master/bootstrap-haskell -sSf | sh&#xA;&#xA;# prepare your environment&#xA;. &#34;$HOME/.ghcup/env&#34;&#xA;echo &#39;. $HOME/.ghcup/env&#39; &amp;gt;&amp;gt; &#34;$HOME/.bash_profile&#34;&#xA;&#xA;#&#xA;# Setting up the website&#xA;#&#xA;&#xA;git clone https://github.com/shawwn/wiki ~/wiki&#xA;cd ~/wiki&#xA;&#xA;# edit env.sh and fill in your own name, website URL, and S3 bucket&#xA;&#xA;# build the project&#xA;cabal v2-build&#xA;&#xA;# you can generate the site with this, or by running ./build.sh (see Deployment section below)&#xA;cabal v2-run wiki -- build&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Notes on setting up a fork of gwern.net&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;#&#xA;# Setting up the VM&#xA;#&#xA;&#xA;# create a Digital Ocean Ubuntu droplet (the $5/mo plan is fine) and ssh into it&#xA;&#xA;# install tmux&#xA;apt-get install tmux&#xA;tmux new -s wiki&#xA;&#xA;# add 10GB of swap space&#xA;sudo fallocate -l 10G /swapfile&#xA;sudo dd if=/dev/zero of=/swapfile bs=10240 count=1048576&#xA;sudo chmod 600 /swapfile&#xA;sudo mkswap /swapfile&#xA;sudo swapon /swapfile&#xA;sudo echo &#39;/swapfile swap swap defaults 0 0&#39; &amp;gt;&amp;gt; /etc/fstab&#xA;sudo free -h&#xA;echo 10 | sudo tee /proc/sys/vm/swappiness&#xA;echo vm.swappiness = 10 | sudo tee -a /etc/sysctl.conf&#xA;&#xA;#&#xA;# Setting up Haskell&#xA;#&#xA;&#xA;# install haskell prereqs&#xA;sudo apt-get update&#xA;sudo apt-get install build-essential curl libgmp-dev libffi-dev libncurses-dev -y&#xA;&#xA;# https://github.com/haskell/ghcup&#xA;&#xA;# complete bootstrap&#xA;curl https://gitlab.haskell.org/haskell/ghcup/raw/master/bootstrap-haskell -sSf | sh&#xA;&#xA;# prepare your environment&#xA;. &#34;$HOME/.ghcup/env&#34;&#xA;echo &#39;. $HOME/.ghcup/env&#39; &amp;gt;&amp;gt; &#34;$HOME/.bashrc&#34; # or similar&#xA;&#xA;&#xA;#&#xA;# Setting up the website&#xA;#&#xA;&#xA;git clone https://github.com/shawwn/wiki ~/wiki&#xA;cd ~/wiki&#xA;&#xA;# edit env.sh and fill in your own name, website URL, and S3 bucket&#xA;&#xA;# zlib headers are required&#xA;sudo apt-get install zlib1g-dev&#xA;&#xA;# build the project&#xA;cabal v2-build&#xA;&#xA;# you can generate the site with this, or by running ./build.sh (see Deployment section below)&#xA;cabal v2-run wiki -- build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Notes on what I did to create wiki.cabal (skip this section)&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;cabal init -n --is-executable&#xA;cabal v2-run&#xA;&#xA;echo dist-newstyle &amp;gt;&amp;gt; .gitignore&#xA;git add .gitignore&#xA;git commit -m &#34;cabal init -n --is-executable &amp;amp;&amp;amp; cabal v2-run&#34;&#xA;&#xA;# required packages:&#xA;# pandoc missingh happy pretty-show tagsoup arxiv aeson hakyll&#xA;&#xA;# Add the following to wiki.cabal:&#xA;# base &amp;gt;=4.12 &amp;amp;&amp;amp; &amp;lt;4.13, bytestring &amp;gt;=0.10 &amp;amp;&amp;amp; &amp;lt;0.11, containers &amp;gt;=0.6 &amp;amp;&amp;amp; &amp;lt;0.7, text &amp;gt;=1.2 &amp;amp;&amp;amp; &amp;lt;1.3, directory &amp;gt;=1.3 &amp;amp;&amp;amp; &amp;lt;1.4, pandoc &amp;gt;=2.7.2 &amp;amp;&amp;amp; &amp;lt;= 2.7.3, MissingH ==1.4.1.0, pretty-show ==1.9.5, aeson ==1.4.2.0, tagsoup == 0.14.7, arxiv == 0.0.1, hakyll == 4.12.5.2, filestore ==0.6.3.4&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Notes on deployment&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;# install ripgrep (optional)&#xA;snap install ripgrep --classic&#xA;&#xA;# install required prerequisites&#xA;sudo apt-get install parallel&#xA;sudo apt-get install npm&#xA;npm i -g mathjax-node-page&#xA;sudo apt-get install tidy&#xA;sudo apt-get install imagemagick&#xA;&#xA;# - create s3 bucket. I used US East (Ohio)&#xA;# - uncheck &#34;Block all public access&#34;&#xA;&#xA;# - go to top right -&amp;gt; &#34;My Security Credentials&#34; -&amp;gt; Access Keys (access key ID and secret access key)&#xA;# - create a new access key&#xA;&#xA;# install s3cmd&#xA;sudo apt-get install s3cmd&#xA;&#xA;# https://kunallillaney.github.io/s3cmd-tutorial/&#xA;s3cmd --configure&#xA;&#xA;# paste your access key and secret key&#xA;&#xA;# add public buket policy&#xA;&#xA;{&#34;Version&#34;: &#34;2008-10-17&#34;,&#xA;&#34;Statement&#34;: [{&#34;Sid&#34;: &#34;AllowPublicRead&#34;,&#xA;&#34;Effect&#34;: &#34;Allow&#34;,&#xA;&#34;Principal&#34;: {&#xA;&#34;AWS&#34;: &#34;*&#34;&#xA;},&#xA;&#34;Action&#34;: &#34;s3:GetObject&#34;,&#xA;&#34;Resource&#34;: &#34;arn:aws:s3:::www.shawwn.com/*&#34;&#xA;}]}&#xA;&#xA;# Turn on S3 static site hosting on your bucket&#xA;# https://docs.aws.amazon.com/AmazonS3/latest/user-guide/static-website-hosting.html&#xA;&#xA;# Add a cloudflare CNAME entry to your bucket&#xA;# CNAME www www.shawwn.com.s3-website.us-east-2.amazonaws.com &#xA;&#xA;# Update all pages with your own name and url&#xA;rg &#39;Shawn&#39; -i&#xA;&#xA;# Create a google analytics account&#xA;&#xA;# Change google analytics codes. Search for &#34;UA-&#34; and replace with your own code&#xA;rg UA-&#xA;&#xA;# Sign up at https://tinyletter.com/&#xA;&#xA;# Create a subreddit&#xA;&#xA;# Create a patreon&#xA;&#xA;# Create a disqus account&#xA;&#xA;# Run ./sync.sh to build and deploy your site&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>