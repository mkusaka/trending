<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Haskell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-01-26T01:38:05Z</updated>
  <subtitle>Daily Trending of Haskell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>keithfancher/tvmv</title>
    <updated>2023-01-26T01:38:05Z</updated>
    <id>tag:github.com,2023-01-26:/keithfancher/tvmv</id>
    <link href="https://github.com/keithfancher/tvmv" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Bulk-rename TV episode files with minimal fuss&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;tvmv&lt;/h1&gt; &#xA;&lt;p&gt;A command-line tool to bulk-rename TV episode files with minimal fuss.&lt;/p&gt; &#xA;&lt;p&gt;Integrates with &lt;a href=&#34;https://www.themoviedb.org/&#34;&gt;TMDB&lt;/a&gt;. Uses API metadata to automatically rename your files to something media-server-friendly. (For Plex, Kodi, &amp;amp;c.)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ tvmv mv -n buffy -s 7&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;That&#39;s all there is to it!&lt;/p&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/keithfancher/tvmv/master/#quickstart--demo&#34;&gt;Quickstart / Demo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/keithfancher/tvmv/master/#overview&#34;&gt;Overview&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/keithfancher/tvmv/master/#prerequisite-an-api-key&#34;&gt;Prerequisite: an API key&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/keithfancher/tvmv/master/#installation&#34;&gt;Installation&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/keithfancher/tvmv/master/#building-from-source&#34;&gt;Building from source&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/keithfancher/tvmv/master/#binary-installation&#34;&gt;Binary installation&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/keithfancher/tvmv/master/#using-tvmv&#34;&gt;Using tvmv&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/keithfancher/tvmv/master/#api-key-location&#34;&gt;API key location&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/keithfancher/tvmv/master/#tvmv-commands&#34;&gt;tvmv commands&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/keithfancher/tvmv/master/#a-note-on-the-mv-command-and-show-matching&#34;&gt;A note on the mv command and show-matching&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/keithfancher/tvmv/master/#matching-the-number-of-episodes-and-files&#34;&gt;Matching the number of episodes and files&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/keithfancher/tvmv/master/#log-files&#34;&gt;Log files&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/keithfancher/tvmv/master/#other-options--getting-help&#34;&gt;Other options / Getting help&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/keithfancher/tvmv/master/#configuration--customization&#34;&gt;Configuration / Customization?&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/keithfancher/tvmv/master/#running-tests&#34;&gt;Running tests&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Quickstart / Demo&lt;/h2&gt; &#xA;&lt;p&gt;First download the latest release for your platform from &lt;a href=&#34;https://github.com/keithfancher/tvmv/releases&#34;&gt;the releases page&lt;/a&gt;. With that out of the way...&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# You&#39;ll need a (free!) TheMovieDB API key. Pass it in via the CLI, an env&#xA;# var, or a file. We&#39;ll use an env var for this example:&#xA;$ export TMDB_API_KEY=&#34;ABCD1234&#34;&#xA;&#xA;# Now, let&#39;s check out a season of a show we ripped:&#xA;$ cd ~/rips/poirot/season12&#xA;&#xA;# Who named these files? Super-annoying :(&#xA;$ ls -1&#xA;&#39;Ep1.mp4&#39;&#xA;&#39;Ep2.mp4&#39;&#xA;&#39;Ep3.mp4&#39;&#xA;&#39;Ep4.mp4&#39;&#xA;&#xA;# One command later...&#xA;$ tvmv mv -n poirot -s 12&#xA;&#xA;# ...ahh, much better!&#xA;$ ls -1&#xA;&#34;Agatha Christie&#39;s Poirot - 12x01 - Three Act Tragedy.mp4&#34;&#xA;&#34;Agatha Christie&#39;s Poirot - 12x02 - Hallowe&#39;en Party.mp4&#34;&#xA;&#34;Agatha Christie&#39;s Poirot - 12x03 - Murder on the Orient Express.mp4&#34;&#xA;&#34;Agatha Christie&#39;s Poirot - 12x04 - The Clocks.mp4&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;tvmv is a minimal, (almost-)zero-config command-line tool to bulk-rename your ripped or (legally!) downloaded TV episode files. It has sane defaults, talks to a sane API, and produces useful filenames that are compatible with Plex, Kodi, and most other media servers.&lt;/p&gt; &#xA;&lt;h2&gt;Prerequisite: an API key&lt;/h2&gt; &#xA;&lt;p&gt;You will need &lt;a href=&#34;https://www.themoviedb.org/documentation/api&#34;&gt;an API key from TMDB&lt;/a&gt;. Sorry for the hassle! It only takes a minute to sign up and &lt;strong&gt;it&#39;s free&lt;/strong&gt;. Feel free to put &lt;code&gt;tvmv&lt;/code&gt; as the app-in-question in the sign-up form if it asks. (This is why I say &#34;minimal fuss&#34; and not &#34;no fuss&#34;.)&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;You&#39;ve got two options:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Build from source. Not recommended unless you need a particular cutting-edge feature that isn&#39;t included in the latest binary release. (But don&#39;t worry: building isn&#39;t &lt;em&gt;complicated&lt;/em&gt;. It&#39;s just &lt;em&gt;slow&lt;/em&gt;.)&lt;/li&gt; &#xA; &lt;li&gt;Installing a binary &lt;a href=&#34;https://github.com/keithfancher/tvmv/releases&#34;&gt;release&lt;/a&gt;. The quick-and-easy route.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;More details below.&lt;/p&gt; &#xA;&lt;h3&gt;Building from source&lt;/h3&gt; &#xA;&lt;p&gt;We use &lt;code&gt;stack&lt;/code&gt; as our build tool. You can &lt;a href=&#34;https://docs.haskellstack.org/en/stable/install_and_upgrade/#install-stack&#34;&gt;install it directly&lt;/a&gt; or via &lt;a href=&#34;https://www.haskell.org/ghcup/&#34;&gt;GHCup&lt;/a&gt;, whatever floats your boat.&lt;/p&gt; &#xA;&lt;p&gt;Once you&#39;ve got &lt;code&gt;stack&lt;/code&gt; installed, navigate to the root of the &lt;code&gt;tvmv&lt;/code&gt; project directory (where the &lt;code&gt;package.yaml&lt;/code&gt; file is located), and &lt;code&gt;stack build&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cd tvmv&#xA;$ stack build&#xA;$ stack install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default, this installs the &lt;code&gt;tvmv&lt;/code&gt; binary into &lt;code&gt;~/.local/bin&lt;/code&gt;. You may need to add this directory to your &lt;code&gt;PATH&lt;/code&gt;. (Or just put the binary wherever you like. There are no ancillary files to worry about.)&lt;/p&gt; &#xA;&lt;h3&gt;Binary installation&lt;/h3&gt; &#xA;&lt;p&gt;If you&#39;ve downloaded &lt;a href=&#34;https://github.com/keithfancher/tvmv/releases&#34;&gt;a binary release&lt;/a&gt;, you can simply extract the &lt;code&gt;tvmv&lt;/code&gt; executable somewhere in your &lt;code&gt;PATH&lt;/code&gt;. No installation process is required. (Other than configuring your API key, as covered in the following section.)&lt;/p&gt; &#xA;&lt;p&gt;To uninstall, simply remove the binary.&lt;/p&gt; &#xA;&lt;h2&gt;Using tvmv&lt;/h2&gt; &#xA;&lt;p&gt;The &#34;Quickstart&#34; section above should get you pretty far. But there are a few other features to mention.&lt;/p&gt; &#xA;&lt;h3&gt;API key location&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.themoviedb.org/documentation/api&#34;&gt;An API key&lt;/a&gt; is required! There are three ways to pass &lt;code&gt;tvmv&lt;/code&gt; your API key:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Via the command line (the &lt;code&gt;-k&lt;/code&gt; or &lt;code&gt;--api-key&lt;/code&gt; options).&lt;/li&gt; &#xA; &lt;li&gt;Via the &lt;code&gt;TMDB_API_KEY&lt;/code&gt; environment variable.&lt;/li&gt; &#xA; &lt;li&gt;Via a file: &lt;code&gt;$XDG_CONFIG_HOME/tvmv/tmdb-api-key&lt;/code&gt;. (On most unix-like systems, that would resolve to: &lt;code&gt;~/.config/tvmv/tmdb-api-key&lt;/code&gt;. On a Windows system, it would be something like &lt;code&gt;C:/Users/&amp;lt;user&amp;gt;/AppData/Roaming/tvmv/tmdb-api-key&lt;/code&gt;.)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Important note: &lt;code&gt;tvmv&lt;/code&gt; will look for your API key in those locations &lt;strong&gt;in that order&lt;/strong&gt;. If you need to swap out API keys for a given run or a given terminal session, it should be easy to override on the command line or with the environment variable, respectively.&lt;/p&gt; &#xA;&lt;p&gt;(I personally just stick my key in &lt;code&gt;~/.config/tvmv/tmdb-api-key&lt;/code&gt; and forget about it. Whatever works for you!)&lt;/p&gt; &#xA;&lt;h3&gt;tvmv commands&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;tvmv&lt;/code&gt; has three commands: &lt;code&gt;mv&lt;/code&gt;, &lt;code&gt;search&lt;/code&gt;, and &lt;code&gt;undo&lt;/code&gt;. Let&#39;s look at some examples:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;### THE mv COMMAND:&#xA;&#xA;# Rename all files in current directory, using data for &#34;Buffy&#34;, season 4:&#xA;$ tvmv mv -n buffy -s 4&#xA;&#xA;# The exact same operation, but using Buffy&#39;s unique ID rather than a name&#xA;# query. This ID can be easily fetched with the `tvmv search` command.&#xA;$ tvmv mv -i 95 -s 4&#xA;&#xA;# This time, let&#39;s do season 1. And we&#39;re specifying a directory instead of&#xA;# using the current working directory:&#xA;$ tvmv mv -n buffy -s 1 ~/tv/buffy/s1&#xA;&#xA;# This time, globbing for specific files -- subtitles! Note that tvmv doesn&#39;t&#xA;# care whether it&#39;s renaming episodes, subtitles, or whatever else.&#xA;$ tvmv mv -n buffy -s 1 ~/tv/buffy/s1/*srt&#xA;&#xA;&#xA;### THE undo COMMAND:&#xA;&#xA;# This will undo the `mv` operations that you just ran, resetting your files.&#xA;# It depends on a tvmv log file sitting in your current directory.&#xA;$ tvmv undo&#xA;&#xA;# Same idea here, but let&#39;s specify a specific tvmv log file rather than using&#xA;# the most recent one:&#xA;$ tvmv undo tvmv-log-123456.txt&#xA;&#xA;&#xA;### THE search COMMAND&#xA;&#xA;# Searches TMDB for shows that match the query &#34;buffy&#34;. Fetches name, unique&#xA;# ID, and a little bit of metadata for each result:&#xA;$ tvmv search buffy&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;A note on the &lt;code&gt;mv&lt;/code&gt; command and show-matching&lt;/h3&gt; &#xA;&lt;p&gt;As you can see in the examples above, you can match a show on &lt;em&gt;either&lt;/em&gt; its name &lt;em&gt;or&lt;/em&gt; its unique ID. If you match a show by name (using the &lt;code&gt;-n&lt;/code&gt; flag of the &lt;code&gt;mv&lt;/code&gt; command), &lt;code&gt;tvmv&lt;/code&gt; will use the &lt;strong&gt;first&lt;/strong&gt; match returned by the API for your query. (You will have a chance to confirm the rename before it happens, of course.)&lt;/p&gt; &#xA;&lt;p&gt;Luckily, TMDB&#39;s search is generally very sane. If you search for &lt;code&gt;buffy&lt;/code&gt;, you get back the right &#34;Buffy&#34;. Fragments are fine, too -- if you search &lt;code&gt;thrones&lt;/code&gt;, you get back &#34;Game of Thrones&#34;. If you search &lt;code&gt;simps&lt;/code&gt;, you get back &#34;The Simpsons&#34;, etc.&lt;/p&gt; &#xA;&lt;p&gt;If you don&#39;t trust this behavior, or if you prefer something guaranteed to be repeatable (or scriptable?), you can match a show by its unique ID using the &lt;code&gt;-i&lt;/code&gt; flag. As mentioned above, you can get a show&#39;s id via &lt;code&gt;tvmv search&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Matching the number of episodes and files&lt;/h4&gt; &#xA;&lt;p&gt;By default, &lt;code&gt;tvmv&lt;/code&gt; will throw an error if the number of files passed in does not match the number of episodes in a given season. This is a safety feature, designed to keep you from shooting yourself in the foot, but might be undesirable in certain cases.&lt;/p&gt; &#xA;&lt;p&gt;For example, if you only have the first &lt;code&gt;n&lt;/code&gt; episodes of a season, but still want to easily rename them. Or if the TMDB data includes &#34;extra&#34; stuff at the end of a season. In these cases, you can pass the &lt;code&gt;--allow-partial&lt;/code&gt; flag to the &lt;code&gt;mv&lt;/code&gt; command (aka &lt;code&gt;-p&lt;/code&gt;) and the error-checking will become less strict.&lt;/p&gt; &#xA;&lt;p&gt;(Note that, even with this flag, &lt;code&gt;tvmv&lt;/code&gt; will still throw an error if you have more &lt;em&gt;files&lt;/em&gt; than episodes. In this case, you can simply glob for the files you want to rename or put them in a directory. It doesn&#39;t quite make sense to pass more files than there are episodes to &lt;code&gt;tvmv&lt;/code&gt;.)&lt;/p&gt; &#xA;&lt;h3&gt;Log files&lt;/h3&gt; &#xA;&lt;p&gt;When you do an &lt;code&gt;mv&lt;/code&gt; operation, &lt;code&gt;tvmv&lt;/code&gt; will (by default) write a log of any renamed files. (This is written to the &lt;em&gt;current&lt;/em&gt; directory -- not necessarily the directory where the files live.)&lt;/p&gt; &#xA;&lt;p&gt;The sole purpose of this log file is to facilitate the &lt;code&gt;undo&lt;/code&gt; command. It just allows you to be a little more free-and-easy about renaming files. If you&#39;re happy with the state of your files, simply delete the log.&lt;/p&gt; &#xA;&lt;p&gt;Note that the file paths in the log files are absolute, so &lt;code&gt;undo&lt;/code&gt; will work even if you move the log file. It will &lt;strong&gt;not&lt;/strong&gt; work, however, if you move the TV episode files themselves.&lt;/p&gt; &#xA;&lt;p&gt;If you don&#39;t want to write a log when using the &lt;code&gt;mv&lt;/code&gt; command, simply pass the &lt;code&gt;--no-log&lt;/code&gt; flag (aka &lt;code&gt;-x&lt;/code&gt;). You will &lt;em&gt;not&lt;/em&gt; be able to use the &lt;code&gt;undo&lt;/code&gt; command without a log, however.&lt;/p&gt; &#xA;&lt;h3&gt;Other options / Getting help&lt;/h3&gt; &#xA;&lt;p&gt;By default, &lt;code&gt;tvmv&lt;/code&gt; will ask for user confirmation before making any file changes. (This goes for both the &lt;code&gt;mv&lt;/code&gt; and &lt;code&gt;undo&lt;/code&gt; commands.) If you want to skip this confirmation step, simply use the &lt;code&gt;-f&lt;/code&gt; (or &lt;code&gt;--force&lt;/code&gt;) command-line option. (For example, &lt;code&gt;tvmv undo -f&lt;/code&gt;.)&lt;/p&gt; &#xA;&lt;p&gt;For help with a given &lt;code&gt;tvmv&lt;/code&gt; command, you can use &lt;code&gt;tvmv [COMMAND] -h&lt;/code&gt;. For example, to learn more about &lt;code&gt;mv&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ tvmv mv -h&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Configuration / Customization?&lt;/h3&gt; &#xA;&lt;p&gt;There isn&#39;t any! I&#39;m banking on sane defaults here. If there&#39;s a demand, say, for episode name templates or something, I&#39;ll think about adding them in. But for now, it just does its thing.&lt;/p&gt; &#xA;&lt;p&gt;That said: let me know if it doesn&#39;t work for your use-case! I built this mostly with my own needs in mind.&lt;/p&gt; &#xA;&lt;h2&gt;Running tests&lt;/h2&gt; &#xA;&lt;p&gt;There are two test suites: &lt;code&gt;unit&lt;/code&gt; and &lt;code&gt;integration&lt;/code&gt;. The following will run them both, which is the default:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ stack test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or you can run either one individually:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ stack test :unit&#xA;$ stack test :integration&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The unit tests are pure and isolated, as you&#39;d expect. The integration tests will create and rename actual files on your actual file system (and then clean up when they&#39;re done, of course).&lt;/p&gt; &#xA;&lt;p&gt;Note that, despite being called &#34;integration tests&#34;, they do &lt;em&gt;not&lt;/em&gt; connect to any real external API (and of course no API key is required). The &#34;integration&#34; in this case is with the filesystem.&lt;/p&gt; &#xA;&lt;p&gt;There are currently no (automated) full end-to-end tests, but I provided a bit of test data to play with, e.g.:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ stack build&#xA;$ stack exec tvmv -- mv -n poirot -s 12 test/data/&#xA;$ stack exec tvmv -- undo&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Of course since these are real calls to the application, you &lt;em&gt;will&lt;/em&gt; need an API key for this.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>leventov/Scheme</title>
    <updated>2023-01-26T01:38:05Z</updated>
    <id>tag:github.com,2023-01-26:/leventov/Scheme</id>
    <link href="https://github.com/leventov/Scheme" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Scheme interpreter and try-server&lt;/p&gt;&lt;hr&gt;&lt;p&gt;Scheme interpreter and &lt;a href=&#34;http://server.dvdalex.ru/Scheme&#34;&gt;try-server&lt;/a&gt;. Lab in Functional Programming course, see &lt;a href=&#34;https://raw.githubusercontent.com/github.com/leventov/fp-labs&#34;&gt;fp-labs&lt;/a&gt; repo.&lt;/p&gt;</summary>
  </entry>
</feed>