<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Haskell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-01-26T01:30:10Z</updated>
  <subtitle>Daily Trending of Haskell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>obsidiansystems/daml-cucumber</title>
    <updated>2024-01-26T01:30:10Z</updated>
    <id>tag:github.com,2024-01-26:/obsidiansystems/daml-cucumber</id>
    <link href="https://github.com/obsidiansystems/daml-cucumber" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Cucumber testing for daml scripts&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;daml-cucumber ðŸ¥’&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://cucumber.io/docs/bdd/&#34;&gt;Behavior-driven-development&lt;/a&gt; for Daml script using Cucumber&#39;s &lt;a href=&#34;https://cucumber.io/docs/gherkin/reference/&#34;&gt;Gherkin&lt;/a&gt; specification language.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;This repository includes both a Daml library and an executable that reads gherkin .feature files and invokes your Daml test script with the feature as input.&lt;/p&gt; &#xA;&lt;h3&gt;Daml library&lt;/h3&gt; &#xA;&lt;p&gt;Your Daml test suite should import &lt;a href=&#34;https://raw.githubusercontent.com/obsidiansystems/daml-cucumber/main/daml/Cucumber.daml&#34;&gt;&lt;code&gt;Cucumber.daml&lt;/code&gt;&lt;/a&gt;. Your test suite should include a function with the type signature &lt;code&gt;Feature -&amp;gt; Script [[Message]]&lt;/code&gt;. This can be implemented in terms of the provided &lt;code&gt;runTests&lt;/code&gt; function. See &lt;a href=&#34;https://raw.githubusercontent.com/obsidiansystems/daml-cucumber/main/test/daml/Test.daml&#34;&gt;&lt;code&gt;Test:main&lt;/code&gt;&lt;/a&gt; for an example.&lt;/p&gt; &#xA;&lt;h3&gt;daml-cucumber executable&lt;/h3&gt; &#xA;&lt;p&gt;Launch daml-cucumber to run tests against a running ledger like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;daml-cucumber \&#xA;  --dar &#34;path/to/your-test-0.1.0.dar&#34; \&#xA;  --host &#34;localhost&#34; \&#xA;  --port 6865 \&#xA;  --feat &#34;path/to/gherkin.feature&#34; \&#xA;  --script &#34;Test:main&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;daml-cucumber will run all of the scenarios in the specified feature file and produce a report in your terminal that looks like the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Feature: Example&#xA;  Scenario: a contract can be created&#xA;    Given a party =&amp;gt; Passed&#xA;    When the party creates contract X =&amp;gt; Passed&#xA;    Then Contract X is created =&amp;gt; Failed: Not implemented&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Building daml-cucumber&lt;/h2&gt; &#xA;&lt;p&gt;To build the daml-cucumber executable, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd hs&#xA;nix-build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Working on daml-cucumber&lt;/h2&gt; &#xA;&lt;p&gt;From the project root, run &lt;code&gt;nix-shell&lt;/code&gt; to get a shell with the &lt;code&gt;daml&lt;/code&gt; command, &lt;code&gt;daml sdk&lt;/code&gt;, &lt;code&gt;ghci&lt;/code&gt;, &lt;code&gt;cabal&lt;/code&gt;, and necessary haskell packages installed.&lt;/p&gt; &#xA;&lt;p&gt;Run the canton sandbox:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;nix-shell&#xA;cd test&#xA;daml build&#xA;daml sandbox&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run the cucumber tests:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;nix-shell&#xA;cd hs&#xA;cabal repl exe:daml-cucumber&#xA;:main --dar &#34;../test/.daml/dist/daml-cucumber-0.1.0.0.dar&#34; --host &#34;localhost&#34; --port 6865 --script &#34;Test:main&#34; --feat &#34;../test/features.feature&#34;&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>TomTervoort/CC-LabC</title>
    <updated>2024-01-26T01:30:10Z</updated>
    <id>tag:github.com,2024-01-26:/TomTervoort/CC-LabC</id>
    <link href="https://github.com/TomTervoort/CC-LabC" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
</feed>