<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Haskell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-04-30T01:35:50Z</updated>
  <subtitle>Daily Trending of Haskell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>input-output-hk/ouroboros-consensus</title>
    <updated>2023-04-30T01:35:50Z</updated>
    <id>tag:github.com,2023-04-30:/input-output-hk/ouroboros-consensus</id>
    <link href="https://github.com/input-output-hk/ouroboros-consensus" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Implementation of a Consensus Layer for the Ouroboros family of protocols&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;a href=&#34;https://input-output-hk.github.io/ouroboros-consensus/&#34;&gt;Ouroboros Consensus&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://input-output-hk.github.io/cardano-haskell-packages/package/ouroboros-consensus-0.6.0.0/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/ouroboros--consensus-0.6.0.0-blue&#34; alt=&#34;consensus&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://input-output-hk.github.io/cardano-haskell-packages/package/ouroboros-consensus-diffusion-0.5.1.0/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/ouroboros--consensus--diffusion-0.5.1.0-blue&#34; alt=&#34;diffusion&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://input-output-hk.github.io/cardano-haskell-packages/package/ouroboros-consensus-protocol-0.5.0.1/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/ouroboros--consensus--protocol-0.5.0.1-blue&#34; alt=&#34;protocol&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://input-output-hk.github.io/cardano-haskell-packages/package/ouroboros-consensus-cardano-0.5.0.1/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/ouroboros--consensus--cardano-0.5.0.1-blue&#34; alt=&#34;cardano&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://input-output-hk.github.io/ouroboros-consensus/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Documentation-yellow&#34; alt=&#34;docs&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Implementation of the &lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/ouroboros-consensus/main/docs/website/docs/References.md&#34;&gt;Ouroboros-family&lt;/a&gt; of consensus algorithms.&lt;/p&gt; &#xA;&lt;h2&gt;Libraries and executables&lt;/h2&gt; &#xA;&lt;p&gt;This repository provides four packages, with the following dependencies among them:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;flowchart TD&#xA;    D[ouroboros-consensus-diffusion] --&amp;gt; C&#xA;    A[ouroboros-consensus-cardano] --&amp;gt; B[ouroboros-consensus-protocol]&#xA;    A --&amp;gt; C&#xA;    B --&amp;gt; C[ouroboros-consensus]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The packages contain many test-suites that complicate the dependency graph as they create new depencency arcs.&lt;/p&gt; &#xA;&lt;p&gt;This repository also provides two executables:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;ouroboros-consensus-cardano/app/db-analyser.hs&lt;/code&gt;: for analyzing ChainDBs as the ones created by the node. This helps identifying performance hotspots and testing that the validating logic remains correct.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;ouroboros-consensus-cardano/app/db-synthesizer.hs&lt;/code&gt;: for quickly generating chains to be used in benchmarking.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To list all the available Cabal components, one can use the following script because unfortunately, &lt;code&gt;cabal&lt;/code&gt; doesn&#39;t have a command to list the &lt;a href=&#34;https://github.com/haskell/cabal/issues/4070&#34;&gt;available targets&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;for f in $(find ouroboros-consensus* -type f -name &#34;*.cabal&#34;); do&#xA;    printf &#34;Components of package %s:\n&#34; $f;&#xA;    cat $f | grep -E &#34;^(library|test-suite|executable|benchmark)&#34; \&#xA;      | sed &#39;s/library /ü§´üì¶ /g&#39; \&#xA;      | sed &#39;s/test-suite /üß™   /g&#39; \&#xA;      | sed &#39;s/benchmark /üèÅ   /g&#39; \&#xA;      | sed &#39;s/executable /‚öôÔ∏è    /g&#39; \&#xA;      | sed &#34;s/library/üì¶   $(echo $f | cut -d\/ -f2 | cut -d\. -f1)/g&#34;&#xA;    printf &#34;\n\n&#34;&#xA;done&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Building the project&lt;/h2&gt; &#xA;&lt;p&gt;We use &lt;code&gt;cabal&lt;/code&gt; to build our project, potentially inside a Nix shell (&lt;code&gt;nix develop&lt;/code&gt; or &lt;code&gt;nix-shell&lt;/code&gt;). It should suffice with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; cabal build all&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Specific executables can be executed through cabal once built:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; cabal run db-analyser&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Testing the project&lt;/h2&gt; &#xA;&lt;p&gt;The project is tested with numerous Haskell test suites. To run every test suite, one can use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; cabal test all&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For running specific test-suites (such as &lt;code&gt;consensus-test&lt;/code&gt;), we recommend one of the following commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; cabal run ouroboros-consensus:test:consensus-test -- &amp;lt;args&amp;gt;&#xA;&amp;gt; cabal test ouroboros-consensus:test:consensus-test --test-show-details=direct&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note the second one cannot be used when we want to provide CLI arguments to the test-suite.&lt;/p&gt; &#xA;&lt;h2&gt;Using Consensus as a dependency&lt;/h2&gt; &#xA;&lt;p&gt;We make releases to the &lt;a href=&#34;https://input-output-hk.github.io/cardano-haskell-packages/all-packages/&#34;&gt;Cardano Haskell Package&lt;/a&gt; repository from where you should pull new releases.&lt;/p&gt; &#xA;&lt;p&gt;To use CHaP, follow their Readme, but in short:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Add this at the top of your &lt;code&gt;cabal.project&lt;/code&gt; file:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;repository cardano-haskell-packages&#xA;  url: https://input-output-hk.github.io/cardano-haskell-packages&#xA;  secure: True&#xA;  root-keys:&#xA;    3e0cce471cf09815f930210f7827266fd09045445d65923e6d0238a6cd15126f&#xA;    443abb7fb497a134c343faf52f0b659bd7999bc06b7f63fa76dc99d631f9bea1&#xA;    a86a1f6ce86c449c46666bda44268677abf29b5b2d2eb5ec7af903ec2f117a82&#xA;    bcec67e8e99cabfa7764d75ad9b158d72bfacf70ca1d0ec8bc6b4406d1bf8413&#xA;    c00aae8461a256275598500ea0e187588c35a5d5d7454fb57eac18d9edb86a56&#xA;    d4a35cd3121aa00d18544bb0ac01c3e1691d618f462c46129271bccf39f7e8ee&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;Run &lt;code&gt;cabal update&lt;/code&gt; to pull in the latest index.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Specify which version of the index you want for both Hackage and CHaP. Note that it has to be higher or equal to the highest timestamp of the release versions of the packages that you want to use as dependencies:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;index-state:&#xA; , hackage.haskell.org      2023-04-12T00:00:00Z&#xA; , cardano-haskell-packages 2023-04-23T00:00:00Z&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;At this point, you should be able to declare our libraries as dependencies in your &lt;code&gt;build-depends&lt;/code&gt; list on your cabal files.&lt;/p&gt; &#xA;&lt;p&gt;If you use Nix, see the &lt;a href=&#34;https://input-output-hk.github.io/cardano-haskell-packages/&#34;&gt;CHaP website&lt;/a&gt; on how to configure CHaP for haskell.nix.&lt;/p&gt; &#xA;&lt;h2&gt;How to contribute to the project&lt;/h2&gt; &#xA;&lt;p&gt;Your help is greatly appreciated. Please see &lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/ouroboros-consensus/main/CONTRIBUTING.md&#34;&gt;our CONTRIBUTING document&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;How to submit an issue&lt;/h2&gt; &#xA;&lt;p&gt;Issues can be filled in our &lt;a href=&#34;https://github.com/input-output-hk/ouroboros-consensus/issues&#34;&gt;GitHub issue tracker&lt;/a&gt;. Please use the provided issue templates.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;We have several sources of documentation:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://input-output-hk.github.io/ouroboros-consensus/haddocks/&#34;&gt;Haddocks&lt;/a&gt;: our code is full of haddock annotations and comments that try to clarify expected behaviors and subtleties. Reading through the code should provide most of the information on how is Consensus implemented.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://input-output-hk.github.io/ouroboros-consensus/&#34;&gt;Website&lt;/a&gt;: this website provides access to the markdown documentation to which step by step we want to move the bulk of the &#34;higher level documentation&#34; as well as achitectural documentation.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/ouroboros-consensus/main/docs/report/&#34;&gt;Report&lt;/a&gt;: this in-depth technical report describes many of the deep choices made in the implementation of the Consensus layer, as well as non-trivial lemmas or properties of the Consensus algorithms that have perspired to the implementation. Although incomplete in some sections, it is a mandatory reading for anyone looking to understand why Consensus does what it does.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>DACH-NY/FundamentalsSampleApp</title>
    <updated>2023-04-30T01:35:50Z</updated>
    <id>tag:github.com,2023-04-30:/DACH-NY/FundamentalsSampleApp</id>
    <link href="https://github.com/DACH-NY/FundamentalsSampleApp" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Daml Fundamentals Certificate Sample App&lt;/h1&gt; &#xA;&lt;p&gt;‚ú® Welcome to the Daml Fundamentals Certification Sample App! ‚ú®&lt;/p&gt; &#xA;&lt;p&gt;As part of the certification process, you will be required to complete a backend-only capstone project that demonstrates your understanding of the material covered throughout the Daml Fundamentals Certification Path. You have the freedom to choose the topic of your project as long as it fulfills the criteria specified below.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;The project must include the following components that are fully operational:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A signatory with the authority to create and archive contracts&lt;/li&gt; &#xA; &lt;li&gt;A controller with the authority to exercise choices on contracts&lt;/li&gt; &#xA; &lt;li&gt;An observer with the authority to view contracts&lt;/li&gt; &#xA; &lt;li&gt;Test scripts that verify the functionalities of the above mentioned parties&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bonus points will be awarded if you implement the following features:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Use the propose / accept design pattern&lt;/li&gt; &#xA; &lt;li&gt;Use the try / catch block for error handling&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;We will score all required and bonus features (6 in total) by the following:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The feature is free of bugs&lt;/li&gt; &#xA; &lt;li&gt;Only authorized users have access to the feature&lt;/li&gt; &#xA; &lt;li&gt;The feature can be tested appropriately&lt;/li&gt; &#xA; &lt;li&gt;TX is not unexpectedly aborted&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;üö® &lt;strong&gt;IMPORTATN NOTE&lt;/strong&gt; üö®&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;The evaluation of your project requires a README that adheres to the format provided in the README of the sample project below.&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Your README should document the purpose and functionalities of the project, as well as any important details about how it works. The README file should also include instructions on how to run the project, how to run the tests, and any dependencies required to do so. This documentation will help others understand your project and how to use it, and will also demonstrate your ability to clearly communicate about your work.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To help you prepare for your capstone project, we provide this sample app as a guide for the kind of app you should aim to build. The sample app has been designed to showcase the key concepts and skills that you will need to apply in your own project.&lt;/p&gt; &#xA;&lt;p&gt;We recommend that you examine this app closely, paying attention to the code structure, functionality, and the test script. We believe that this sample app will be an invaluable resource for you as you work towards your certification. Happy coding!&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h1&gt;Project Proposal App&lt;/h1&gt; &#xA;&lt;p&gt;Daml templates designed for a platform for proposing project ideas to get rejected/approved.&lt;/p&gt; &#xA;&lt;h3&gt;I. Overview&lt;/h3&gt; &#xA;&lt;p&gt;This project was created by using the &lt;code&gt;empty-skeleton&lt;/code&gt; template. The project adopts and exemplifies the &lt;code&gt;proposal-accept&lt;/code&gt; design pattern. A signatory can create a ProjectIdea contract. Then they can exercise the Propose choice as a controller to get the project proposal either approved or rejected by their manager. If the manager, a controller, exercises Reject choice on the proposed contract, the employee can exercise Revise choice on it to re-propose the project with updated details. Upon manager exercising the Accept choice, a Project contract is created.&lt;/p&gt; &#xA;&lt;h3&gt;II. Workflow&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;An employee creates a ProjectIdea contract. Both colleague and manager are invited as obeservers, but manager, as a controller, is authorized to exercise either Reject or Accept choices.&lt;/li&gt; &#xA; &lt;li&gt;Upon the controller exercising Reject, a new contract is created.&lt;/li&gt; &#xA; &lt;li&gt;Revise choice can be exercised on the newly generated contract from above.&lt;/li&gt; &#xA; &lt;li&gt;Accept choice is exercised to finalize the project idea and generate a new Project contract.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://share.vidyard.com/watch/xbDuZMbNUbgfHmPnqzt72N?&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/DACH-NY/FundamentalsSampleApp/main/Demo.png&#34; alt=&#34;Demo&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;III. Challenge(s)&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;controller ... can&lt;/code&gt; syntax causes warning in Daml 2.0+. The code itself does not cause any issues/errors in 2.5.0 but according to the warning, the syntax will be deprecated in the future versions of Daml. More information &lt;a href=&#34;https://docs.daml.com/daml/reference/choices.html#daml-ref-controller-can-deprecation&#34;&gt;here&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;The new controller syntax requires a controller to be an observer first before they can exercise a choice, otherwise it&#39;ll throw an error: &#34;Attempt to fetch or exercise a contract not visible to the committer.&#34; For more information, check out &lt;a href=&#34;https://discuss.daml.com/t/error-attempt-to-fetch-or-exercise-a-contract-not-visible-to-the-committer/1304/1&#34;&gt;this post&lt;/a&gt; on the Daml Forum.&lt;/li&gt; &#xA; &lt;li&gt;The project was created by using &lt;code&gt;empty-skeleton&lt;/code&gt; and the following was removed from &lt;code&gt;daml.yaml&lt;/code&gt;:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;sandbox-options:&#xA;   - --wall-clock-time&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and replaced with the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;exposed-modules:&#xA;  - Main&#xA;navigator-options:&#xA; - --feature-user-management=false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more info, check out &lt;a href=&#34;https://discuss.daml.com/t/sandbox-options-wall-clock-time/5692/16?u=cathy_jung&#34;&gt;this post&lt;/a&gt; on Daml Forum and &lt;a href=&#34;https://docs.daml.com/tools/navigator/index.html?&amp;amp;_ga=2.48248804.337210607.1673989679-241632404.1672853064&amp;amp;_gac=1.17025355.1673455980.CjwKCAiA2fmdBhBpEiwA4CcHzfI2w1_D95zAr3_d6QTypOMXGTpUxtS06c55inucNwZvUZn4AebsJxoCZEgQAvD_BwE&amp;amp;_gl=1*elem6v*_ga*MjQxNjMyNDA0LjE2NzI4NTMwNjQ.*_ga_GVK9ZHZSMR*MTY3Mzk5NDQzOS4zMS4xLjE2NzM5OTQ3MDcuMC4wLjA.#logging-in-as-a-party&#34;&gt;Daml Doc&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;IV. Building&lt;/h3&gt; &#xA;&lt;p&gt;To compile the project&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ daml build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;V. Testing&lt;/h3&gt; &#xA;&lt;p&gt;To test all scripts: Either run the pre-written script in the &lt;code&gt;Test.daml&lt;/code&gt; under /daml OR run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ daml start&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;VI. Running&lt;/h3&gt; &#xA;&lt;p&gt;To load the project into the sandbox and start navigator:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ daml start&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>