<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Haskell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-03-09T01:35:19Z</updated>
  <subtitle>Daily Trending of Haskell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>AAsteria/Lumi</title>
    <updated>2023-03-09T01:35:19Z</updated>
    <id>tag:github.com,2023-03-09:/AAsteria/Lumi</id>
    <link href="https://github.com/AAsteria/Lumi" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The Lumi Programming Language&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Lumi&lt;/h1&gt; &#xA;&lt;p&gt;The Lumi Programming Language &lt;br&gt;&lt;/p&gt; &#xA;&lt;p&gt;A functional programming language based on λ-calculus for scientific research. &lt;br&gt; We hope this language to become an efficient and friendly tool to light the way for researchers.&lt;/p&gt; &#xA;&lt;h2&gt;Feature (Updating...)&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Minimal core with packages and macro supplement&lt;/li&gt; &#xA; &lt;li&gt;Global variables or static variables within functions&lt;/li&gt; &#xA; &lt;li&gt;Y combinator implementation of recursion&lt;/li&gt; &#xA; &lt;li&gt;Type tagging (local variables in functions not required, optional)&lt;/li&gt; &#xA; &lt;li&gt;Memory management system or register allocation algorithm&lt;/li&gt; &#xA; &lt;li&gt;Eager evaluation, considering providing lazy evaluation type&lt;/li&gt; &#xA; &lt;li&gt;Pointer (necessary or not?)&lt;/li&gt; &#xA; &lt;li&gt;Call-CC and use of Call-CC for loop control and exception handling (wise or not? better alternative?)&lt;/li&gt; &#xA; &lt;li&gt;REPL &amp;amp; unit testing&lt;/li&gt; &#xA; &lt;li&gt;Friendly indentation system &lt;br&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Welcome to use Issues as a forum to discuss and request features!&lt;/p&gt; &#xA;&lt;h2&gt;Lumi Kits&lt;/h2&gt; &#xA;&lt;p&gt;Lumi interpreter, compiler, and REPL (Read–Eval–Print Loop).&lt;/p&gt; &#xA;&lt;h4&gt;Running Lumi Program&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;lumi &amp;lt;source_file.lumi&amp;gt; [command line arguments]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Compiling Lumi Program&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;lumi -c &amp;lt;source_file.lumi&amp;gt; &amp;lt;output_file.lumo&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Interactive REPL&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;lumi&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>ryachza/HDBC-Oracle</title>
    <updated>2023-03-09T01:35:19Z</updated>
    <id>tag:github.com,2023-03-09:/ryachza/HDBC-Oracle</id>
    <link href="https://github.com/ryachza/HDBC-Oracle" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;HDBC-Oracle&lt;/h1&gt;</summary>
  </entry>
</feed>