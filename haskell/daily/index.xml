<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Haskell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-01-19T01:36:42Z</updated>
  <subtitle>Daily Trending of Haskell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>henrikssn/parser</title>
    <updated>2023-01-19T01:36:42Z</updated>
    <id>tag:github.com,2023-01-19:/henrikssn/parser</id>
    <link href="https://github.com/henrikssn/parser" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>GaloisInc/cryptol</title>
    <updated>2023-01-19T01:36:42Z</updated>
    <id>tag:github.com,2023-01-19:/GaloisInc/cryptol</id>
    <link href="https://github.com/GaloisInc/cryptol" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Cryptol: The Language of Cryptography&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/GaloisInc/cryptol/actions?query=workflow%3ACryptol&#34;&gt;&lt;img src=&#34;https://github.com/GaloisInc/cryptol/workflows/Cryptol/badge.svg?sanitize=true&#34; alt=&#34;Cryptol&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitpod.io/#https://github.com/GaloisInc/cryptol&#34;&gt;&lt;img src=&#34;https://gitpod.io/button/open-in-gitpod.svg?sanitize=true&#34; alt=&#34;Open in Gitpod&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Cryptol, version 2&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code&gt;This version of Cryptol is (C) 2013-2020 Galois, Inc., and&#xA;distributed under a standard, three-clause BSD license. Please see&#xA;the file LICENSE, distributed with this software, for specific&#xA;terms and conditions.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;What is Cryptol?&lt;/h1&gt; &#xA;&lt;p&gt;The Cryptol specification language was designed by Galois for the NSA Laboratory for Advanced Cybersecurity Research as a public standard for specifying cryptographic algorithms. A Cryptol reference specification can serve as the formal documentation for a cryptographic module. Unlike current specification mechanisms, Cryptol is fully executable, allowing designers to experiment with their programs incrementally as their designs evolve.&lt;/p&gt; &#xA;&lt;p&gt;This release is an interpreter for version 2 of the Cryptol language. The interpreter includes a &lt;code&gt;:check&lt;/code&gt; command, which tests predicates written in Cryptol against randomly-generated test vectors (in the style of &lt;a href=&#34;http://hackage.haskell.org/package/QuickCheck&#34;&gt;QuickCheck&lt;/a&gt;). There is also a &lt;code&gt;:prove&lt;/code&gt; command, which calls out to SMT solvers, such as Yices, Z3, or CVC4, to prove predicates for all possible inputs.&lt;/p&gt; &#xA;&lt;h1&gt;Getting Cryptol Binaries&lt;/h1&gt; &#xA;&lt;p&gt;Cryptol binaries for Mac OS X, Linux, and Windows are available from the GitHub &lt;a href=&#34;https://github.com/GaloisInc/cryptol/releases&#34;&gt;releases page&lt;/a&gt;. Mac OS X and Linux binaries are distributed as a tarball which you can extract to a location of your choice. Windows binaries are distributed both as tarballs and as &lt;code&gt;.msi&lt;/code&gt; installer packages which place a shortcut to the Cryptol interpreter in the Start menu.&lt;/p&gt; &#xA;&lt;p&gt;On Mac OS X, Cryptol is also available via &lt;a href=&#34;http://brew.sh/&#34;&gt;Homebrew&lt;/a&gt;. Simply run &lt;code&gt;brew update &amp;amp;&amp;amp; brew install cryptol&lt;/code&gt; to get the latest stable version.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Z3&lt;/h2&gt; &#xA;&lt;p&gt;Cryptol currently uses Microsoft Research&#39;s &lt;a href=&#34;https://github.com/Z3Prover/z3&#34;&gt;Z3 SMT solver&lt;/a&gt; by default to solve constraints during type checking, and as the default solver for the &lt;code&gt;:sat&lt;/code&gt; and &lt;code&gt;:prove&lt;/code&gt; commands. Cryptol generally requires the most recent version of Z3, but you can see the specific version tested in CI by looking &lt;a href=&#34;https://github.com/GaloisInc/what4-solvers/releases/tag/snapshot-20220812&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can download Z3 binaries for a variety of platforms from their &lt;a href=&#34;https://github.com/Z3Prover/z3/releases&#34;&gt;releases page&lt;/a&gt;. If you install Cryptol using Homebrew, the appropriate version of Z3 will be installed automatically. If you&#39;re using Linux, the package manager for your distribution may include Z3, as well, though sometimes the available versions are somewhat old.&lt;/p&gt; &#xA;&lt;p&gt;After installation, make sure that &lt;code&gt;z3&lt;/code&gt; (or &lt;code&gt;z3.exe&lt;/code&gt; on Windows) is on your PATH.&lt;/p&gt; &#xA;&lt;h3&gt;Note for 64-bit Linux Users&lt;/h3&gt; &#xA;&lt;p&gt;On some 64-bit Linux configurations, 32-bit binaries do not work. This can lead to unhelpful error messages like &lt;code&gt;z3: no such file or directory&lt;/code&gt;, even when &lt;code&gt;z3&lt;/code&gt; is clearly present. To fix this, either install 32-bit compatibility packages for your distribution, or download the &lt;code&gt;x64&lt;/code&gt; version of Z3.&lt;/p&gt; &#xA;&lt;h1&gt;Building Cryptol From Source&lt;/h1&gt; &#xA;&lt;p&gt;In addition to the binaries, the Cryptol source is available publicly on &lt;a href=&#34;https://github.com/GaloisInc/cryptol&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Cryptol builds and runs on various flavors of Linux, Mac OS X, and Windows. We regularly build and test it in the following environments:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;macOS 12, 64-bit&lt;/li&gt; &#xA; &lt;li&gt;Ubuntu 20.04, 64-bit&lt;/li&gt; &#xA; &lt;li&gt;Ubuntu 22.04, 64-bit&lt;/li&gt; &#xA; &lt;li&gt;Windows Server 2019, 64-bit&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Prerequisites&lt;/h2&gt; &#xA;&lt;p&gt;Cryptol is regularly built and tested with the three most recent versions of GHC, which at the time of this writing are 8.10.7, 9.0.2, and 9.2.4. The easiest way to install an approporiate version of GHC is with &lt;a href=&#34;https://www.haskell.org/ghcup/&#34;&gt;ghcup&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Some supporting non-Haskell libraries are required to build Cryptol. Most should already be present for your operating system, but you may need to install the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gmplib.org/&#34;&gt;The GNU Multiple Precision Arithmetic Library (GMP)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.gnu.org/software/ncurses/&#34;&gt;ncurses&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You&#39;ll also need &lt;a href=&#34;https://raw.githubusercontent.com/GaloisInc/cryptol/master/#getting-z3&#34;&gt;Z3&lt;/a&gt; installed when running Cryptol.&lt;/p&gt; &#xA;&lt;h2&gt;Building Cryptol&lt;/h2&gt; &#xA;&lt;p&gt;After a fresh checkout of cryptol, be sure to initialize its git submodules:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git submodule update --init&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, from the Cryptol source directory, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./cry build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will build Cryptol in place. From there, there are additional targets:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;./cry run&lt;/code&gt;: run Cryptol in the current directory&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;./cry test&lt;/code&gt;: run the regression test suite&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installing Cryptol&lt;/h2&gt; &#xA;&lt;p&gt;If you run &lt;code&gt;cabal v2-install --installdir=DIR&lt;/code&gt; in your source directory after running one of the above &lt;code&gt;./cry&lt;/code&gt; command, you will end up with a binary in &lt;code&gt;DIR&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Configuring Cryptol&lt;/h2&gt; &#xA;&lt;p&gt;Cryptol can use several external files to control its operation. Normally, the build process embeds these files into the executable. However, these embedded files can be overwritten with local copies in two ways:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Copy the contents of the &lt;code&gt;lib&lt;/code&gt; directory into &lt;code&gt;$HOME/.cryptol&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Set the &lt;code&gt;CRYPTOLPATH&lt;/code&gt; environment variable to name some other directory that contains the files from the &lt;code&gt;lib&lt;/code&gt; directory.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Contributing&lt;/h1&gt; &#xA;&lt;p&gt;We believe that anyone who uses Cryptol is making an important contribution toward making Cryptol a better tool. There are many ways to get involved.&lt;/p&gt; &#xA;&lt;h2&gt;Users&lt;/h2&gt; &#xA;&lt;p&gt;If you write Cryptol programs that you think would benefit the community, fork the GitHub repository, and add them to the &lt;code&gt;examples/contrib&lt;/code&gt; directory and submit a pull request.&lt;/p&gt; &#xA;&lt;p&gt;We host a Cryptol mailing list, which you can &lt;a href=&#34;https://groups.google.com/a/galois.com/forum/#!forum/cryptol-users&#34;&gt;join here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you run into a bug in Cryptol, if something doesn&#39;t make sense in the documentation, if you think something could be better, or if you just have a cool use of Cryptol that you&#39;d like to share with us, use the issues page on &lt;a href=&#34;https://github.com/GaloisInc/cryptol&#34;&gt;GitHub&lt;/a&gt;, or send email to &lt;a href=&#34;mailto:cryptol@galois.com&#34;&gt;cryptol@galois.com&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Developers&lt;/h2&gt; &#xA;&lt;p&gt;If you&#39;d like to get involved with Cryptol development, see the list of &lt;a href=&#34;https://github.com/GaloisInc/cryptol/labels/low-hanging%20fruit&#34;&gt;low-hanging fruit&lt;/a&gt;. These are tasks which should be straightforward to implement. Make a fork of this GitHub repository, send along pull requests and we&#39;ll be happy to incorporate your changes.&lt;/p&gt; &#xA;&lt;h3&gt;Repository Structure&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;/cryptol&lt;/code&gt;: Haskell sources for the front-end &lt;code&gt;cryptol&lt;/code&gt; executable and read-eval-print loop&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;/docs&lt;/code&gt;: LaTeX and Markdown sources for the Cryptol documentation&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;/examples&lt;/code&gt;: Cryptol sources implementing several interesting algorithms&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;/lib&lt;/code&gt;: Cryptol standard library sources&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;/src&lt;/code&gt;: Haskell sources for the &lt;code&gt;cryptol&lt;/code&gt; library (the bulk of the implementation)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;/tests&lt;/code&gt;: Haskell sources for the Cryptol regression test suite, as well as the Cryptol sources and expected outputs that comprise that suite&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Where to Look Next&lt;/h1&gt; &#xA;&lt;p&gt;The &lt;code&gt;docs&lt;/code&gt; directory of the installation package contains an introductory book, the &lt;code&gt;examples&lt;/code&gt; directory contains a number of algorithms specified in Cryptol.&lt;/p&gt; &#xA;&lt;p&gt;If you are familiar with version 1 of Cryptol, you should read the &lt;code&gt;Version2Changes&lt;/code&gt; document in the &lt;code&gt;docs&lt;/code&gt; directory.&lt;/p&gt; &#xA;&lt;p&gt;For a large collection of Cryptol examples, see the &lt;a href=&#34;https://github.com/galoisinc/cryptol-specs&#34;&gt;cryptol-specs repository&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Cryptol is still under active development at Galois. We are also building tools that consume both Cryptol specifications and implementations in (for example) C or Java, and can (with some amount of work) allow you to verify that an implementation meets its specification. See more information on the &lt;a href=&#34;https://saw.galois.com&#34;&gt;SAW website&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Thanks!&lt;/h1&gt; &#xA;&lt;p&gt;We hope that Cryptol is useful as a tool for educators and students, commercial and open source authors of cryptographic implementations, and by cryptographers to&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;specify cryptographic algorithms&lt;/li&gt; &#xA; &lt;li&gt;check or prove properties of algorithms&lt;/li&gt; &#xA; &lt;li&gt;generate test vectors for testing implementations&lt;/li&gt; &#xA; &lt;li&gt;experiment with new algorithms&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Acknowledgements&lt;/h2&gt; &#xA;&lt;p&gt;Cryptol has been under development for over a decade with many people contributing to its design and implementation. Those people include (but are not limited to) Aaron Tomb, Adam Foltzer, Adam Wick, Alexander Bakst, Andrew Kent, Andrei Stefanescu, Andrey Chudnov, Andy Gill, Benjamin Barenblat, Ben Jones, Ben Selfridge, Brett Boston, Brian Huffman, Brian Ledger, Chris Phifer, Daniel Wagner, David Thrane Christiansen, David Lazar, Dylan McNamee, Eddy Westbrook, Edward Yang, Eric Mertens, Eric Mullen, Fergus Henderson, Iavor Diatchki, Jared Weakly, Jeff Lewis, Jim Teisher, Joe Hendrix, Joe Hurd, Joe Kiniry, Joel Stanley, Joey Dodds, John Launchbury, John Matthews, Jonathan Daugherty, Kenneth Foner, Kevin Quick, Kyle Carter, Ledah Casburn, Lee Pike, Levent Erkök, Lisanna Dettwyler, Magnus Carlsson, Mark Shields, Mark Tullsen, Matt Sottile, Nathan Collins, Philip Weaver, Robert Dockins, Ryan Scott, Sally Browning, Sam Anklesaria, Sigbjørn Finne, Stephen Magill, Thomas Nordin, Trevor Elliott, and Tristan Ravitch.&lt;/p&gt; &#xA;&lt;p&gt;Much of the work on Cryptol has been funded by, and lots of design input was provided by, the team at the &lt;a href=&#34;https://www.nsa.gov/Research/NSA-Mission-Oriented-Research/LAC/&#34;&gt;NSA&#39;s Laboratory for Advanced Cybersecurity Research&lt;/a&gt;, including Brad Martin, Frank Taylor, and Sean Weaver.&lt;/p&gt; &#xA;&lt;p&gt;Portions of Cryptol are also based upon work supported by the Office of Naval Research under Contract No. N68335-17-C-0452. Any opinions, findings and conclusions or recommendations expressed in this material are those of the author(s) and do not necessarily reflect the views of the Office of Naval Research.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>haskell/text</title>
    <updated>2023-01-19T01:36:42Z</updated>
    <id>tag:github.com,2023-01-19:/haskell/text</id>
    <link href="https://github.com/haskell/text" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Haskell library for space- and time-efficient operations over Unicode text.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;text &lt;a href=&#34;https://hackage.haskell.org/package/text&#34;&gt;&lt;img src=&#34;http://img.shields.io/hackage/v/text.svg?sanitize=true&#34; alt=&#34;Hackage&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://stackage.org/lts/package/text&#34;&gt;&lt;img src=&#34;http://stackage.org/package/text/badge/lts&#34; alt=&#34;Stackage LTS&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://stackage.org/nightly/package/text&#34;&gt;&lt;img src=&#34;http://stackage.org/package/text/badge/nightly&#34; alt=&#34;Stackage Nightly&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;Haskell library for space- and time-efficient operations over Unicode text.&lt;/p&gt; &#xA;&lt;h1&gt;Get involved!&lt;/h1&gt; &#xA;&lt;p&gt;Please report bugs via the &lt;a href=&#34;https://github.com/haskell/text/issues&#34;&gt;github issue tracker&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The main repo:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/haskell/text&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To run benchmarks please clone and unpack test files:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd text&#xA;git clone https://github.com/haskell/text-test-data benchmarks/text-test-data&#xA;make -Cbenchmarks/text-test-data&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Authors&lt;/h1&gt; &#xA;&lt;p&gt;The base code for this library was originally written by Tom Harper, based on the stream fusion framework developed by Roman Leshchinskiy, Duncan Coutts, and Don Stewart.&lt;/p&gt; &#xA;&lt;p&gt;The core library was fleshed out, debugged, and tested by Bryan O&#39;Sullivan. Transition from UTF-16 to UTF-8 is by Andrew Lelechenko.&lt;/p&gt;</summary>
  </entry>
</feed>