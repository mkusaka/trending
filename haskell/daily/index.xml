<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Haskell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-10-17T01:30:51Z</updated>
  <subtitle>Daily Trending of Haskell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ghcjs/ghcjs</title>
    <updated>2023-10-17T01:30:51Z</updated>
    <id>tag:github.com,2023-10-17:/ghcjs/ghcjs</id>
    <link href="https://github.com/ghcjs/ghcjs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Haskell to JavaScript compiler, based on GHC&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Introduction&lt;/h1&gt; &#xA;&lt;p&gt;GHCJS is a Haskell to JavaScript compiler that uses the GHC API.&lt;/p&gt; &#xA;&lt;h1&gt;Quick Start - Developing GHCJS&lt;/h1&gt; &#xA;&lt;p&gt;GHCJS contains a library, &lt;code&gt;ghcjs&lt;/code&gt;, which contains the JavaScript code generator and a slightly customized variant of the &lt;code&gt;ghc&lt;/code&gt; library, and several executable programs.&lt;/p&gt; &#xA;&lt;p&gt;The repository has several submodules and some files must be generated before the package can be installed.&lt;/p&gt; &#xA;&lt;h3&gt;prerequisites&lt;/h3&gt; &#xA;&lt;h4&gt;GHC&lt;/h4&gt; &#xA;&lt;p&gt;You need the same major version of GHC as the version of the GHCJS branch you&#39;re building.&lt;/p&gt; &#xA;&lt;h4&gt;cabal-install&lt;/h4&gt; &#xA;&lt;p&gt;cabal-install 3.0 is supported&lt;/p&gt; &#xA;&lt;h4&gt;emscripten emsdk&lt;/h4&gt; &#xA;&lt;p&gt;GHCJS uses a C toolchain, mostly for build system related tasks like the C preprocessor, Autoconf scripts and tools like &lt;code&gt;hsc2hs&lt;/code&gt;. Direct support for using compiled foreign libraries from Haskell code may follow at a later date.&lt;/p&gt; &#xA;&lt;p&gt;Please follow the installation instructions at &lt;a href=&#34;https://emscripten.org/docs/getting_started/index.html&#34;&gt;https://emscripten.org/docs/getting_started/index.html&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;GHCJS requires the &#34;upstream&#34; emscripten backend, which is the default now. The earlier &#34;fastcomp&#34; backend will not work.&lt;/p&gt; &#xA;&lt;h3&gt;getting and preparing the source tree&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ git clone https://github.com/ghcjs/ghcjs.git&#xA;$ cd ghcjs&#xA;$ git submodule update --init --recursive&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;building the compiler&lt;/h3&gt; &#xA;&lt;p&gt;GHCJS depends on a few &#34;local&#34; packages in the source tree. You can use &lt;code&gt;cabal-install&lt;/code&gt; and &lt;code&gt;stack&lt;/code&gt; to set up a build environment that contains these packages.&lt;/p&gt; &#xA;&lt;h4&gt;Cabal new-install&lt;/h4&gt; &#xA;&lt;p&gt;After the source tree has been prepared, the package can be installed. You may want ensure that binaries of earlier versions are overwritten:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-{.shell}&#34;&gt;cabal v2-install --overwrite-policy=always --install-method=copy --installdir=inplace/bin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;At the time of writing, &lt;code&gt;cabal-install&lt;/code&gt; does not support creating symbolic links on Windows, even though this is the default installation method. A workaround is telling it to copy the executables instead:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-{.shell}&#34;&gt;cabal v1-install --prefix=inplace&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;v1 style Cabal sandbox&lt;/h4&gt; &#xA;&lt;p&gt;v1 style cabal sandboxes are also supported&lt;/p&gt; &#xA;&lt;p&gt;if you want to build with a Cabal sandbox, use the &lt;code&gt;makeSandbox.sh&lt;/code&gt; script to add the local packages.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cabal v1-sandbox init&#xA;$ cabal v1-install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;stack&lt;/h4&gt; &#xA;&lt;p&gt;or you can use stack:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ stack --system-ghc --skip-ghc-check install --local-bin-dir=inplace/bin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Booting GHCJS&lt;/h4&gt; &#xA;&lt;p&gt;The &lt;code&gt;ghcjs-boot&lt;/code&gt; program builds the &#34;boot&#34; libraries, like &lt;code&gt;ghc-prim&lt;/code&gt;, &lt;code&gt;base&lt;/code&gt; and &lt;code&gt;template-haskell&lt;/code&gt; with GHCJS. After booting, GHCJS can compile regular Haskell programs and packages.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;ghcjs-boot&lt;/code&gt; needs to be able to find the emscripten toolchain, a nodejs executable. The easiest way to do this is by running the &lt;code&gt;emsdk_env.sh&lt;/code&gt; script. After that, you can run &lt;code&gt;ghcjs-boot&lt;/code&gt; by pointing it to the boot libraries (the directory containing the &lt;code&gt;boot.yaml&lt;/code&gt; file)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ source ~/emsdk/emsdk_env.sh&#xA;$ ./inplace/bin/ghcjs-boot -s ./lib/boot&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;GHCJS executables and library paths&lt;/h3&gt; &#xA;&lt;p&gt;After booting, you can add the directory containing the GHCJS binaries to your executable PATH. The &lt;code&gt;ghcjs-boot&lt;/code&gt; program prints the location after finishing building the libraries.&lt;/p&gt; &#xA;&lt;p&gt;You can also create a symbolic link for the &lt;code&gt;ghcjs&lt;/code&gt; and &lt;code&gt;ghcjs-pkg&lt;/code&gt; programs, or use the &lt;code&gt;--with-compiler&lt;/code&gt; and &lt;code&gt;--with-hc-pkg&lt;/code&gt; flags when using &lt;code&gt;cabal-install&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Generating a source distribution&lt;/h4&gt; &#xA;&lt;p&gt;if you work on boot packages that need some for an upstream library, make sure to update the patches in &lt;code&gt;/lib/patches&lt;/code&gt; first&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ./utils/updatePatches.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;then regenerate the packages&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ./utils/makePackages.sh&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>