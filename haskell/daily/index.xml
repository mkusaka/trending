<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Haskell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-07-18T01:38:47Z</updated>
  <subtitle>Daily Trending of Haskell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>two-twelve/fernery</title>
    <updated>2023-07-18T01:38:47Z</updated>
    <id>tag:github.com,2023-07-18:/two-twelve/fernery</id>
    <link href="https://github.com/two-twelve/fernery" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A CLI tool for generating images of ferns üåø and other Iterated Function Systems&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Fernery üåø&lt;/h1&gt; &#xA;&lt;p&gt;A CLI tool for generating images of ferns and other &lt;a href=&#34;https://en.wikipedia.org/wiki/Iterated_function_system&#34;&gt;Iterated Function Systems&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;Install &lt;a href=&#34;https://docs.haskellstack.org/en/stable/install_and_upgrade/&#34;&gt;stack&lt;/a&gt;, then:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone git@github.com:TheTeaCat/fernery.git&#xA;cd fernery&#xA;stack build&#xA;stack exec fernery-exe&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This should generate an image of a Barnsley fern at &lt;a href=&#34;https://raw.githubusercontent.com/two-twelve/fernery/main/fern.png&#34;&gt;./fern.png&lt;/a&gt; by default, with colours reminiscent of an &lt;a href=&#34;https://www.moma.org/artists/231&#34;&gt;Anna Atkins cyanotype&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Various options are available to customise the appearance of the ferns. To see the supported options, do:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;stack exec -- fernery-exe --help&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Installing with Homebrew (macOS)&lt;/h3&gt; &#xA;&lt;p&gt;Fernery is also available to install from our Homebrew Tap.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew tap two-twelve/tap&#xA;brew install fernery&#xA;fernery --help&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://fractaltees.shop/&#34;&gt;FractalTees.Shop&lt;/a&gt; üõç&lt;/h2&gt; &#xA;&lt;p&gt;A selection of images generated using Fernery are available printed on T-shirts and tote bags at &lt;a href=&#34;https://fractaltees.shop/&#34;&gt;fractaltees.shop&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://fractaltees.shop/product/barnsley-fern/&#34;&gt; &lt;img width=&#34;30%&#34; src=&#34;https://images.teemill.com/hthlgpp2ekwkdsanevfm7euvrohiiywzkwrblrcfabuqtw8h.png.webp?w=640&amp;amp;h=657&amp;amp;v=2&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://fractaltees.shop/product/leptosporangiate/&#34;&gt; &lt;img width=&#34;30%&#34; src=&#34;https://images.teemill.com/uwck3iw0pruwtoahmyeowm40ujjuvwpd8c6mlohdcop70gyv.png.webp?w=640&amp;amp;h=657&amp;amp;v=2&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://fractaltees.shop/product/thelypteridaceae-shirt/&#34;&gt; &lt;img width=&#34;30%&#34; src=&#34;https://images.teemill.com/i1rj0flwe6eq8crh5iqwgu75y0iyuzfo5sqcydmffmv5jb5v.png.webp?w=640&amp;amp;h=657&amp;amp;v=2&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Example Images&lt;/h2&gt; &#xA;&lt;p&gt;This list of examples is currently exhaustive of the IFSs provided in Fernery, but I&#39;d love to see more added to this little CLI tool. PRs are welcome! üßë‚Äçüé®&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/two-twelve/fernery/main/#Barnsley-Fern&#34;&gt;Barnsley Fern&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/two-twelve/fernery/main/#Leptosporangiate-Fern&#34;&gt;Leptosporangiate Fern&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/two-twelve/fernery/main/#Thelypteridaceae-Fern&#34;&gt;Thelypteridaceae Fern&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/two-twelve/fernery/main/#The-Sierpinski-Gasket&#34;&gt;The Sierpinski Gasket&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/two-twelve/fernery/main/#The-Sierpinski-Carpet&#34;&gt;The Sierpinski Carpet&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/two-twelve/fernery/main/#The-Sierpinski-Pentagon&#34;&gt;The Sierpinski Pentagon&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/two-twelve/fernery/main/#The-Levy-Dragon&#34;&gt;The Levy Dragon&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/two-twelve/fernery/main/#The-Heighway-Dragon&#34;&gt;The Heighway Dragon&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/two-twelve/fernery/main/#McWorters-Pentigree&#34;&gt;McWorter&#39;s Pentigree&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/two-twelve/fernery/main/#The-Koch-Curve&#34;&gt;The Koch Curve&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/two-twelve/fernery/main/#The-Koch-Snowflake&#34;&gt;The Koch Snowflake&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/two-twelve/fernery/main/#DavidLDewey-Fractal&#34;&gt;DavidLDewey Fractal&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/two-twelve/fernery/main/#Tree-Fractal&#34;&gt;Tree Fractal&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Barnsley Fern&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;stack exec -- fernery-exe -f barnsley&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;60%&#34; src=&#34;https://raw.githubusercontent.com/two-twelve/fernery/main/examples/barnsley.png&#34;&gt; &lt;/p&gt; &#xA;&lt;h3&gt;Leptosporangiate Fern&lt;/h3&gt; &#xA;&lt;p&gt;The transforms used in this fern were found &lt;a href=&#34;https://en.wikipedia.org/wiki/File:Barnsley_fern_mutated_-Leptosporangiate_fern.PNG&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;stack exec -- fernery-exe -f leptosporangiate -s &#39;(210, -160)&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;60%&#34; src=&#34;https://raw.githubusercontent.com/two-twelve/fernery/main/examples/leptosporangiate.png&#34;&gt; &lt;/p&gt; &#xA;&lt;h3&gt;Thelypteridaceae Fern&lt;/h3&gt; &#xA;&lt;p&gt;The transforms used in this fern were found &lt;a href=&#34;https://en.wikipedia.org/wiki/File:Barnsley_fern_with_different_coefficients_plotted_with_VisSim.PNG&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;stack exec -- fernery-exe -f thelypteridaceae -s &#39;(-210, 125)&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;60%&#34; src=&#34;https://raw.githubusercontent.com/two-twelve/fernery/main/examples/thelypteridaceae.png&#34;&gt; &lt;/p&gt; &#xA;&lt;h3&gt;The Sierpinski Gasket&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;stack exec -- fernery-exe -f sierpinskiGasket -o &#39;(500,1000)&#39; -s &#39;(500,500)&#39; -c &#39;PixelRGBA8 0 0 0 255&#39; -b &#39;PixelRGBA8 255 255 255 255&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;60%&#34; src=&#34;https://raw.githubusercontent.com/two-twelve/fernery/main/examples/sierpinskiGasket.png&#34;&gt; &lt;/p&gt; &#xA;&lt;h3&gt;The Sierpinski Carpet&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;stack exec -- fernery-exe -f sierpinskiCarpet -o &#39;(50,50)&#39; -s &#39;(900,900)&#39; -i 10000000 -c &#39;PixelRGBA8 255 255 255 255&#39; -b &#39;PixelRGBA8 114 47 55 255&#39; &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;60%&#34; src=&#34;https://raw.githubusercontent.com/two-twelve/fernery/main/examples/sierpinskiCarpet.png&#34;&gt; &lt;/p&gt; &#xA;&lt;h3&gt;The Sierpinski Pentagon&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;stack exec -- fernery-exe -f sierpinskiPentagon -o &#39;(250,875)&#39; -s &#39;(500,500)&#39; -b &#39;PixelRGBA8 135 206 235 255&#39; -c &#39;PixelRGBA8 0 0 0 255&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;60%&#34; src=&#34;https://raw.githubusercontent.com/two-twelve/fernery/main/examples/sierpinskiPentagon.png&#34;&gt; &lt;/p&gt; &#xA;&lt;h3&gt;The Levy Dragon&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;stack exec -- fernery-exe -f levyDragon -o &#39;(275,250)&#39; -s &#39;(450,450)&#39; -d &#39;(1000,800)&#39; -b &#39;PixelRGBA8 251 206 177 255&#39; -c &#39;PixelRGBA8 0 0 0 255&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;80%&#34; src=&#34;https://raw.githubusercontent.com/two-twelve/fernery/main/examples/levyDragon.png&#34;&gt; &lt;/p&gt; &#xA;&lt;h3&gt;The Heighway Dragon&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;stack exec -- fernery-exe -f heighwayDragon -o &#39;(250,500)&#39; -d &#39;(1000, 800)&#39; -s &#39;(600,600)&#39; -c &#39;PixelRGBA8 0 0 0 255&#39; -b &#39;PixelRGBA8 255 255 255 255&#39; -i 2000000&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;80%&#34; src=&#34;https://raw.githubusercontent.com/two-twelve/fernery/main/examples/heighwayDragon.png&#34;&gt; &lt;/p&gt; &#xA;&lt;h3&gt;McWorter&#39;s Pentigree&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;stack exec -- fernery-exe -f mcWortersPentigree -o &#39;(130,330)&#39; -s &#39;(800,800)&#39; -b &#39;PixelRGBA88 202 231 193 255&#39; -c PixelRGBA88 0 0 0 255&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;60%&#34; src=&#34;https://raw.githubusercontent.com/two-twelve/fernery/main/examples/mcWortersPentigree.png&#34;&gt; &lt;/p&gt; &#xA;&lt;h3&gt;The Koch Curve&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;stack exec -- fernery-exe -f kochCurve -s &#39;(900,-900)&#39; -o &#39;(50,450)&#39; -d &#39;(1000,600)&#39; -b &#39;PixelRGBA8 120 81 169 255&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;80%&#34; src=&#34;https://raw.githubusercontent.com/two-twelve/fernery/main/examples/kochCurve.png&#34;&gt; &lt;/p&gt; &#xA;&lt;h3&gt;The Koch Snowflake&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;stack exec -- fernery-exe -f kochSnowflake -o &#39;(500,500)&#39; -s &#39;(450,450)&#39; -b &#39;PixelRGBA8 220 243 255 255&#39; -c &#39;PixelRGBA8 57 109 124 255&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;60%&#34; src=&#34;https://raw.githubusercontent.com/two-twelve/fernery/main/examples/kochSnowflake.png&#34;&gt; &lt;/p&gt; &#xA;&lt;h3&gt;DavidLDewey Fractal&lt;/h3&gt; &#xA;&lt;p&gt;The transforms used to generate this fractal are from an old worksheet authored by David L. Dewey which can be found &lt;a href=&#34;https://courses.cs.washington.edu/courses/cse142/01sp/misc/fractal_lab.htm&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;stack exec -- fernery-exe -f davidLDewey -s &#39;(3,3)&#39; -o &#39;(850,500)&#39; -d &#39;(1700,1000)&#39; -b &#39;PixelRGBA8 255 255 255 255&#39; -c &#39;PixelRGBA8 0 0 0 255&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;80%&#34; src=&#34;https://raw.githubusercontent.com/two-twelve/fernery/main/examples/davidLDewey.png&#34;&gt; &lt;/p&gt; &#xA;&lt;h3&gt;Tree Fractal&lt;/h3&gt; &#xA;&lt;p&gt;This fractal can also be found on Peter E. Francis&#39; &lt;a href=&#34;http://ifs-fractals.herokuapp.com/playground/tree&#34;&gt;IFS Fractals&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;stack exec -- fernery-exe -f treeFractal -o &#39;(50,950)&#39; -s &#39;(900,-900)&#39; -c &#39;PixelRGBA8 0 0 0 255&#39; -b &#39;PixelRGBA8 255 255 255 255&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;60%&#34; src=&#34;https://raw.githubusercontent.com/two-twelve/fernery/main/examples/treeFractal.png&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Acknowledgements&lt;/h2&gt; &#xA;&lt;p&gt;The following have been useful sources of Iterative Function Systems to add to Fernery:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://larryriddle.agnesscott.org/ifs/ifs.htm&#34;&gt;Larry Riddle&#39;s Classic Iterated Function Systems&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://courses.cs.washington.edu/courses/cse142/01sp/misc/fractal_lab.htm&#34;&gt;David L. Dewey&#39;s Generating Fractals with Affine Transformations&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://ifs-fractals.herokuapp.com/&#34;&gt;Peter E. Francis&#39; IFS Fractals&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>The-Haskell-Debug-Engineering-Community/haskell-estgi-debugger</title>
    <updated>2023-07-18T01:38:47Z</updated>
    <id>tag:github.com,2023-07-18:/The-Haskell-Debug-Engineering-Community/haskell-estgi-debugger</id>
    <link href="https://github.com/The-Haskell-Debug-Engineering-Community/haskell-estgi-debugger" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A modern Haskell debugger&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Haskell ESTGi Debugger&lt;/h1&gt; &#xA;&lt;p&gt;This repository contains the components for Haskell debugging based on the Debug Adapter Protocol (&lt;a href=&#34;https://microsoft.github.io/debug-adapter-protocol&#34;&gt;DAP&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/The-Haskell-Debug-Engineering-Community/haskell-estgi-debugger/master/dap/&#34;&gt;&lt;code&gt;dap/&lt;/code&gt;&lt;/a&gt;: Language and backend independent simple DAP library&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/The-Haskell-Debug-Engineering-Community/haskell-estgi-debugger/master/dap-estgi-server/&#34;&gt;&lt;code&gt;dap-estgi-server/&lt;/code&gt;&lt;/a&gt;: DAP server for External STG Interpreter (DAP-ESTGi)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/The-Haskell-Debug-Engineering-Community/haskell-estgi-debugger/master/dap-estgi-vscode-extension/&#34;&gt;&lt;code&gt;dap-estgi-vscode-extension/&lt;/code&gt;&lt;/a&gt;: VSCode extension to support Haskell debugging using DAP-ESTGi server&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;dap-estgi-vscode-extension&lt;/code&gt; turns VSCode into a Haskell debugger. VSCode offers a nice debugger UI while the debugger features are provided by the External STG Interpreter DAP Server.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;flowchart LR&#xA;    subgraph User Interface&#xA;    A(VSCode) -.- |Plugin API| B(DAP ESTGi Extension)&#xA;    end&#xA;    B &amp;lt;--&amp;gt;|DAP via network| C(DAP ESTGi Server)&#xA;    subgraph Debugger&#xA;    C -.- |HS library API| D(External STG Interpreter)&#xA;    end&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;dap-estgi-server&lt;/code&gt; and &lt;code&gt;dap-estgi-vscode-extension&lt;/code&gt; are application specific components, while the &lt;code&gt;dap&lt;/code&gt; library is designed to be application independent to support any project that needs a simple DAP framework.&lt;/p&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;VSCode setup&lt;br&gt; Enable &lt;code&gt;allow breakpoints everywhere&lt;/code&gt; option in VSCode settings.&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;dap-estgi-extension&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Run: &lt;code&gt;(cd dap-estgi-vscode-extension ; npm install)&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Open &lt;code&gt;dap-estgi-vscode-extension&lt;/code&gt; folder by using the &lt;code&gt;Files/Open Folder&lt;/code&gt; menu.&lt;/li&gt; &#xA;   &lt;li&gt;Open the &lt;code&gt;src/extension.ts&lt;/code&gt; file.&lt;/li&gt; &#xA;   &lt;li&gt;Press F5 to run the extension in a new VSCode [Extension Development Host] window.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Start &lt;code&gt;dap-estgi-server&lt;/code&gt;&lt;br&gt; &lt;code&gt;(cd dap-estgi-server ; stack run)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Compile debuggee program with GHC-WPC using stack &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Add the following lines to debuggee&#39;s &lt;code&gt;stack.yaml&lt;/code&gt;: &lt;pre&gt;&lt;code&gt;# use custom ext-stg whole program compiler GHC&#xA;compiler:       ghc-9.2.7&#xA;compiler-check: match-exact&#xA;ghc-variant:    wpc&#xA;setup-info:&#xA;  ghc:&#xA;    linux64-custom-wpc-tinfo6:&#xA;      9.2.7:&#xA;        url: &#34;https://github.com/grin-compiler/foundation-pak/releases/download/ghc-9.2.7/ghc-9.2.7-x86_64-unknown-linux.tar.xz&#34;&#xA;    macosx-custom-wpc:&#xA;      9.2.7:&#xA;        url: &#34;https://github.com/grin-compiler/foundation-pak/releases/download/ghc-9.2.7/ghc-9.2.7-x86_64-apple-darwin.tar.xz&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Run: &lt;code&gt;stack build&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Open debuggee program in VSCode [Extension Development Host] &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Open debugge project folder by using the &lt;code&gt;Files/Open Folder&lt;/code&gt; menu.&lt;/li&gt; &#xA;   &lt;li&gt;Select the debug view on the side bar&lt;/li&gt; &#xA;   &lt;li&gt;Click to &lt;code&gt;create a launch.json file&lt;/code&gt;, then select &lt;code&gt;Haskell DAP ESTGi&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Press F5 or the &lt;code&gt;Play&lt;/code&gt; button to start debugging&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Setup in video&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;VSCode setup&lt;br&gt; &lt;img src=&#34;https://raw.githubusercontent.com/The-Haskell-Debug-Engineering-Community/haskell-estgi-debugger/master/docs-images/dap-01-vscode-setup-5fps.avif&#34; alt=&#34;&#34;&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;dap-estgi-extension&lt;/code&gt; &lt;img src=&#34;https://raw.githubusercontent.com/The-Haskell-Debug-Engineering-Community/haskell-estgi-debugger/master/docs-images/dap-02-run-dap-estgi-extension-5fps.avif&#34; alt=&#34;&#34;&gt;&lt;/li&gt; &#xA; &lt;li&gt;Start &lt;code&gt;dap-estgi-server&lt;/code&gt;&lt;br&gt; &lt;img src=&#34;https://raw.githubusercontent.com/The-Haskell-Debug-Engineering-Community/haskell-estgi-debugger/master/docs-images/dap-03-start-dap-estgi-server-5fps.avif&#34; alt=&#34;&#34;&gt;&lt;/li&gt; &#xA; &lt;li&gt;Compile debuggee program with GHC-WPC using stack&lt;br&gt; &lt;img src=&#34;https://raw.githubusercontent.com/The-Haskell-Debug-Engineering-Community/haskell-estgi-debugger/master/docs-images/dap-04-compile-debuggee-5fps.avif&#34; alt=&#34;&#34;&gt;&lt;/li&gt; &#xA; &lt;li&gt;Open debuggee program in VSCode [Extension Development Host]&lt;br&gt; &lt;img src=&#34;https://raw.githubusercontent.com/The-Haskell-Debug-Engineering-Community/haskell-estgi-debugger/master/docs-images/dap-05-open-debuggee-in-vscode-5fps.avif&#34; alt=&#34;&#34;&gt;&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
</feed>