<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Haskell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-09-27T01:38:46Z</updated>
  <subtitle>Daily Trending of Haskell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>digital-asset/ghc-lib</title>
    <updated>2022-09-27T01:38:46Z</updated>
    <id>tag:github.com,2022-09-27:/digital-asset/ghc-lib</id>
    <link href="https://github.com/digital-asset/ghc-lib" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The GHC API, decoupled from GHC versions&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ghc-lib &lt;a href=&#34;https://hackage.haskell.org/package/ghc-lib&#34;&gt;&lt;img src=&#34;https://img.shields.io/hackage/v/ghc-lib.svg?label=Hackage&#34; alt=&#34;Hackage version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.stackage.org/package/ghc-lib&#34;&gt;&lt;img src=&#34;https://www.stackage.org/package/ghc-lib/badge/nightly?label=Stackage&#34; alt=&#34;Stackage version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://dev.azure.com/digitalasset/ghc-lib/_build/latest?definitionId=11&amp;amp;branchName=master&#34;&gt;&lt;img src=&#34;https://dev.azure.com/digitalasset/ghc-lib/_apis/build/status/digital-asset.ghc-lib?branchName=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;Copyright Â© 2019-2022, Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved. SPDX-License-Identifier: (Apache-2.0 OR BSD-3-Clause)&lt;/p&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://hackage.haskell.org/package/ghc&#34;&gt;GHC API&lt;/a&gt; allows you to use the &lt;a href=&#34;https://www.haskell.org/ghc/&#34;&gt;GHC compiler&lt;/a&gt; as a library, so you can parse, analyze and compile Haskell code. The GHC API comes preinstalled with GHC, and is tied to that GHC version - if you are using GHC 8.6.3, you get version 8.6.3 of the API, and can&#39;t change it. The &lt;code&gt;ghc-lib&lt;/code&gt; project solves that problem, letting you mix and match versions of the GHC compiler and GHC API. Why might you want that?&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Imagine you are writing a tool to work with several versions of the GHC compiler. The GHC API changes significantly between each version, so doing this would require writing a lot of C preprocessor code to support it. An alternative is to use one version of &lt;code&gt;ghc-lib&lt;/code&gt; which works across multiple versions of GHC.&lt;/li&gt; &#xA; &lt;li&gt;Imagine you are modifying the GHC API or want features from GHC HEAD. With &lt;code&gt;ghc-lib&lt;/code&gt; you can depend on the revised GHC API, without upgrading the compiler used to build everything, speeding up iteration.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The &lt;code&gt;ghc-lib&lt;/code&gt; project provides two packages : &lt;code&gt;ghc-lib-parser&lt;/code&gt; and &lt;code&gt;ghc-lib&lt;/code&gt;. The &lt;code&gt;ghc-lib-parser&lt;/code&gt; package is that subset of the GHC API that is just enough to parse Haskell code. The &lt;code&gt;ghc-lib&lt;/code&gt; package extends (and re-exports) &lt;code&gt;ghc-lib-parser&lt;/code&gt; with the rest. While &lt;code&gt;ghc-lib&lt;/code&gt; provides the full GHC API, it doesn&#39;t contain a runtime system, nor does it create a package database. That means you can&#39;t run code produced by &lt;code&gt;ghc-lib&lt;/code&gt; (no runtime), and compiling off-the-shelf code is very hard (no package database containing the &lt;code&gt;base&lt;/code&gt; library). What you can do:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Parse Haskell code, making &lt;code&gt;ghc-lib-parser&lt;/code&gt; a potential replacement for &lt;a href=&#34;https://hackage.haskell.org/package/haskell-src-exts&#34;&gt;&lt;code&gt;haskell-src-exts&lt;/code&gt;&lt;/a&gt;. See the demo &lt;a href=&#34;https://github.com/digital-asset/ghc-lib/raw/master/examples/ghc-lib-test-mini-hlint/src/Main.hs&#34;&gt;&lt;code&gt;ghc-lib-test-mini-hlint&lt;/code&gt;&lt;/a&gt; in this repo;&lt;/li&gt; &#xA; &lt;li&gt;Compile Haskell code as far as GHC&#39;s &lt;a href=&#34;https://ghc.haskell.org/trac/ghc/wiki/Commentary/Compiler/CoreSynType&#34;&gt;Core language&lt;/a&gt;, which includes renaming and type checking. See the demo &lt;a href=&#34;https://github.com/digital-asset/ghc-lib/raw/master/examples/ghc-lib-test-mini-compile/src/Main.hs&#34;&gt;&lt;code&gt;ghc-lib-test-mini-compile&lt;/code&gt;&lt;/a&gt; in this repo, and the carefully tailored &lt;a href=&#34;https://github.com/digital-asset/ghc-lib/raw/master/examples/ghcl-lib-test-mini-compile/test/MiniCompileTest.hs&#34;&gt;file it compiles&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;There are some downsides to &lt;code&gt;ghc-lib&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The lack of runtime means you can&#39;t run code, which includes running code at compile time, e.g. &lt;code&gt;TemplateHaskell&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;While &lt;code&gt;ghc-lib&lt;/code&gt; isn&#39;t tied to any specific GHC versions, it can only read package databases and &lt;code&gt;.hi&lt;/code&gt; files for one particular version of GHC. That means your existing package database probably can&#39;t be consumed by &lt;code&gt;ghc-lib&lt;/code&gt; (unless you happen to perfectly match the GHC version, in which case you could just have used the GHC API), and it doesn&#39;t ship with a package database so you&#39;d have to painfully build your own.&lt;/li&gt; &#xA; &lt;li&gt;Compilation times for the &lt;code&gt;ghc-lib&lt;/code&gt; packages are not small, taking approximately 5 minutes for each on our CI machines.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Using &lt;code&gt;ghc-lib&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;The packages &lt;code&gt;ghc-lib-parser&lt;/code&gt; and &lt;code&gt;ghc-lib&lt;/code&gt; are available on &lt;a href=&#34;https://hackage.haskell.org/&#34;&gt;Hackage&lt;/a&gt;, and can be used like any normal packages, e.g. &lt;code&gt;cabal install ghc-lib&lt;/code&gt;. Since &lt;code&gt;ghc-lib-parser&lt;/code&gt; and &lt;code&gt;ghc-lib&lt;/code&gt; conflict perfectly with the GHC API and &lt;a href=&#34;https://hackage.haskell.org/package/template-haskell&#34;&gt;&lt;code&gt;template-haskell&lt;/code&gt;&lt;/a&gt;, ~the packages are not exposed by default so if you use GHC directly, you need to pass &lt;code&gt;-package ghc-lib&lt;/code&gt;, the &lt;a href=&#34;https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/packages.html#using-packages&#34;&gt;GHC user guide&lt;/a&gt; has more information : use the language extension &lt;code&gt;PackageImports&lt;/code&gt; to do &lt;code&gt;import &#34;ghc-lib&#34; ...&lt;/code&gt; or &lt;code&gt;import &#34;ghc-lib-parser&#34; ...&lt;/code&gt; as approriate. There are two release streams within the &lt;code&gt;ghc-lib&lt;/code&gt; name:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Version 8.8.1 will be the version of &lt;code&gt;ghc-lib&lt;/code&gt; produced against the released GHC 8.8.1, once it comes out;&lt;/li&gt; &#xA; &lt;li&gt;Version &lt;a href=&#34;http://hackage.haskell.org/package/ghc-lib-0.20190204&#34;&gt;0.20190204&lt;/a&gt; is the version of &lt;code&gt;ghc-lib&lt;/code&gt; using GHC HEAD on the date 2019-02-04.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The Hackage packages are licensed under the &lt;a href=&#34;https://www.haskell.org/ghc/license.html&#34;&gt;BSD-3-Clause license&lt;/a&gt;, just like GHC itself. This repo, including the &lt;a href=&#34;https://github.com/digital-asset/ghc-lib/tree/master/examples&#34;&gt;examples&lt;/a&gt; and the &lt;a href=&#34;https://github.com/digital-asset/ghc-lib/tree/master/ghc-lib-gen&#34;&gt;script that generates &lt;code&gt;ghc-lib&lt;/code&gt;&lt;/a&gt;, are licensed under the &lt;a href=&#34;https://github.com/digital-asset/ghc-lib/raw/master/LICENSE&#34;&gt;BSD-3-Clause OR Apache-2.0 license&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Creating &lt;code&gt;ghc-lib&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;We create the packages by taking a checkout of GHC, and combining the &lt;code&gt;ghc&lt;/code&gt; package with the various dependencies it is tightly tied to (e.g. &lt;code&gt;template-haskell&lt;/code&gt;) in two new cabal files &lt;code&gt;ghc-lib-parser.cabal&lt;/code&gt; and &lt;code&gt;ghc-lib.cabal&lt;/code&gt;. These new packages depend on a few generated outputs (which we build using the GHC build system) and some &lt;a href=&#34;https://ghc.haskell.org/trac/ghc/wiki/Commentary/Rts/Cmm&#34;&gt;Cmm files&lt;/a&gt;. The &lt;a href=&#34;https://github.com/digital-asset/ghc-lib/tree/master/ghc-lib-gen&#34;&gt;&lt;code&gt;ghc-lib-gen&lt;/code&gt; directory&lt;/a&gt; contains a script that puts all the pieces together. Because GHC itself is capable of being bootstrapped with older GHC versions (&amp;gt; 8.4.4) (its &lt;a href=&#34;https://ghc.haskell.org/trac/ghc/wiki/Building/Architecture/Idiom/Stages&#34;&gt;Stage0 build&lt;/a&gt;), the generated &lt;code&gt;ghc-lib&lt;/code&gt; also compiles with multiple GHC versions.&lt;/p&gt; &#xA;&lt;p&gt;To build &lt;code&gt;ghc-lib-parser&lt;/code&gt; and &lt;code&gt;ghc-lib&lt;/code&gt; you need clones of this repository and the &lt;a href=&#34;https://git.haskell.org&#34;&gt;GHC repository&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Warning : &lt;code&gt;ghc-lib-parser&lt;/code&gt; and &lt;code&gt;ghc-lib&lt;/code&gt; are known to work on all of MacOS, Linux and Windows. Distributions produced with &lt;code&gt;cabal sdist&lt;/code&gt; on Linux/MacOS build on Windows, but a &lt;code&gt;cabal sdist&lt;/code&gt; produced on Windows does not build on MacOS/Linux.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Building &lt;code&gt;ghc-lib&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;By far the easist way to produce &lt;code&gt;ghc-lib-parser&lt;/code&gt; and &lt;code&gt;ghc-lib&lt;/code&gt; packages is to execute the CI script which incidentally builds and executes the examples (this procedure makes versioned packages based on the current date and expresses the version constraint between &lt;code&gt;ghc-lib&lt;/code&gt; and &lt;code&gt;ghc-lib-parser&lt;/code&gt; accordingly).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Setup&#xA;git clone git@github.com:digital-asset/ghc-lib.git&#xA;cd ghc-lib&#xA;stack runhaskell --package extra --package optparse-applicative CI.hs -- --ghc-flavor=ghc-8.8.1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Releasing &lt;code&gt;ghc-lib&lt;/code&gt; (notes for maintainers)&lt;/h2&gt; &#xA;&lt;p&gt;Build &lt;code&gt;ghc-lib&lt;/code&gt; using the &lt;a href=&#34;https://raw.githubusercontent.com/digital-asset/ghc-lib/master/#building-ghc-lib&#34;&gt;above instructions&lt;/a&gt; and upload the resulting &lt;code&gt;.tar.gz&lt;/code&gt; files to &lt;a href=&#34;https://hackage.haskell.org/upload&#34;&gt;Hackage&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;h3&gt;Why doesn&#39;t &lt;code&gt;ghc-lib&lt;/code&gt; version &lt;code&gt;X&lt;/code&gt; build with GHC compiler version &lt;code&gt;Y&lt;/code&gt;?&lt;/h3&gt; &#xA;&lt;p&gt;Building &lt;code&gt;ghc-lib&lt;/code&gt; is subject to the same minimum version requirements that apply to bootstrapping GHC itself. Those requirements are given in the following table.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Ghc flavor&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&amp;gt;= version&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&amp;lt; version&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ghc-8.8.*&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;8.4.4&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;8.10.1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ghc-8.10.*&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;8.6.5&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;9.0.1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ghc-9.0.*&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;8.8.1&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;9.2.1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ghc-9.2.*&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;8.10.1&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;9.4.1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ghc-9.4.*&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;9.0.2&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ghc-master&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;9.2.1&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;How do I use the &lt;code&gt;ghc-lib&lt;/code&gt;/&lt;code&gt;ghc-lib-parser&lt;/code&gt; version macros?&lt;/h3&gt; &#xA;&lt;p&gt;Read the &lt;a href=&#34;https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/phases.html#standard-cpp-macros&#34;&gt;Standard CPP macros&lt;/a&gt; section of the GHC users guide for the semantics of the &lt;code&gt;MIN_VERSION_pkgname(x, y, z)&lt;/code&gt; macros and keep in mind that builds of &lt;code&gt;ghc-lib-parser&lt;/code&gt;/&lt;code&gt;ghc-lib&lt;/code&gt; from GHC head are ascribed version numbers of the form &lt;em&gt;0.Î±&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Building &lt;code&gt;ghc-lib&lt;/code&gt; for DAML&lt;/h1&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/digital-asset/ghc-lib/master/CI.hs&#34;&gt;&lt;code&gt;CI.hs&lt;/code&gt;&lt;/a&gt; script has special support for building custom versions of ghc-lib specifically tailored to the DAML compiler, which requires a handful of patches to be applied on top of GHC. The syntax is slightly different from the general case: the &lt;code&gt;--ghc-flavor&lt;/code&gt; flag is replaced with an &#34;enabling&#34; flag &lt;code&gt;--da&lt;/code&gt; and three more specific flags. A full call example would be:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;stack runhaskell --package extra \&#xA;                 --package optparse-applicative \&#xA;                 CI.hs -- --da \&#xA;                          --merge-base-sha=ghc-8.8.1-release \&#xA;                          --patch=upstream/da-master-8.8.1 \&#xA;                          --patch=upstream/da-unit-ids-8.8.1 \&#xA;                          --gen-flavor=da-ghc-8.8.1 \&#xA;                          --upstream=https://github.com/digital-asset/ghc.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The DAML-specific process only differs from the normal one in that it patches GHC with the given patches. More specifically, it will:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Clone GHC. (This is also done by the normal workflow.)&lt;/li&gt; &#xA; &lt;li&gt;Add the &lt;a href=&#34;https://github.com/digital-asset/ghc/&#34;&gt;DA fork&lt;/a&gt; of GHC as a remote named &lt;code&gt;upstream&lt;/code&gt;; this can be overridden with the &lt;code&gt;--upstream&lt;/code&gt; flag. For example, in local development, &lt;code&gt;--upstream=$PWD/../ghc-fork/&lt;/code&gt;. Note that if you want to specify a local path (as in this example), it should be an absolute one, as the command will be run from the folder into which GHC has been cloned.&lt;/li&gt; &#xA; &lt;li&gt;Checkout the commit provided as &lt;code&gt;merge-base-sha&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Create a new commit by merging in all of the commits specified through the &lt;code&gt;--patch&lt;/code&gt; flags.&lt;/li&gt; &#xA; &lt;li&gt;Proceed as normal for the rest of the workflow.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;At some later stage, the workflow calls out to the &lt;code&gt;ghc-lib-gen&lt;/code&gt; program, and at that point it needs to pass in a &#34;flavor&#34; argument; it will use the value of the &lt;code&gt;--gen-flavor&lt;/code&gt; option for that.&lt;/p&gt; &#xA;&lt;p&gt;Note that deployment for the DAML version is handled from within the DAML CI.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>markhibberd/boltjs-refactor</title>
    <updated>2022-09-27T01:38:46Z</updated>
    <id>tag:github.com,2022-09-27:/markhibberd/boltjs-refactor</id>
    <link href="https://github.com/markhibberd/boltjs-refactor" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;p&gt;javascript refactoring&lt;/p&gt;</summary>
  </entry>
</feed>