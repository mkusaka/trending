<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Haskell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-11-06T01:34:01Z</updated>
  <subtitle>Daily Trending of Haskell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>xmonad/X11</title>
    <updated>2023-11-06T01:34:01Z</updated>
    <id>tag:github.com,2023-11-06:/xmonad/X11</id>
    <link href="https://github.com/xmonad/X11" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Haskell binding to the X11 graphics library.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Haskell binding to the X11 graphics library &lt;a href=&#34;https://hackage.haskell.org/package/X11&#34;&gt;&lt;img src=&#34;https://img.shields.io/hackage/v/X11.svg?style=flat&#34; alt=&#34;Hackage&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://travis-ci.org/xmonad/X11&#34;&gt;&lt;img src=&#34;https://img.shields.io/travis/xmonad/X11.svg?style=flat&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;To build this package using Cabal directly from Git, you must run &lt;code&gt;autoreconf&lt;/code&gt; before the usual Cabal build steps (configure/build/install). &lt;code&gt;autoreconf&lt;/code&gt; is included in the GNU autoconf tools. There is no need to run the &lt;code&gt;configure&lt;/code&gt; script: the &lt;code&gt;cabal configure&lt;/code&gt; step will do this for you.&lt;/p&gt; &#xA;&lt;p&gt;If you are building from a source tarball, you can just use the standard Cabal installation stanza:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cabal configure&#xA;cabal build&#xA;cabal install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Xinerama support is enabled by default if Xinerama headers are detected. To disable Xinerama support, add the &lt;code&gt;--without-xinerama&lt;/code&gt; flag to &lt;code&gt;configure-option&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cabal configure --configure-option=&#34;--without-xinerama&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;However, if you are building from Git, X11 uses &lt;code&gt;autoconf&lt;/code&gt;, so you need to have &lt;code&gt;autoconf&lt;/code&gt; installed and run &lt;code&gt;autoconf&lt;/code&gt;/&lt;code&gt;autoheader&lt;/code&gt; before building:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;autoconf&#xA;autoheader&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;autoreconf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You will need development versions of at least the X11, xrandr, and XScreenSaver libraries installed for the build to succeed; having the development version of the Xinerama library will enable some optional bindings.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>google/mlir-hs</title>
    <updated>2023-11-06T01:34:01Z</updated>
    <id>tag:github.com,2023-11-06:/google/mlir-hs</id>
    <link href="https://github.com/google/mlir-hs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Haskell bindings for MLIR&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;mlir-hs - Haskell bindings for MLIR&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;ðŸš¨ This is an early-stage project. All details are subject to arbitrary changes. ðŸš¨&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Note that the &lt;code&gt;main&lt;/code&gt; branch tracks the current HEAD of &lt;a href=&#34;https://github.com/llvm/llvm-project&#34;&gt;LLVM&lt;/a&gt; and so it is likely to be incompatible with any past releases. We are planning to provide release-specifi branches in the future, but only once the API stabilizes. For now your best bet is to develop against MLIR built from source. See the &lt;a href=&#34;https://raw.githubusercontent.com/google/mlir-hs/main/#building-mlir-from-source&#34;&gt;Building MLIR from source&lt;/a&gt; section for guidance.&lt;/p&gt; &#xA;&lt;h2&gt;Building&lt;/h2&gt; &#xA;&lt;p&gt;The only prerequisite for building mlir-hs is that you have MLIR installed somewhere, and the &lt;code&gt;llvm-config&lt;/code&gt; binary from that installation is available in your &lt;code&gt;PATH&lt;/code&gt; (a good way to verify this is to run &lt;code&gt;which llvm-config&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;If that&#39;s looking reasonable, we recommend using &lt;a href=&#34;https://haskellstack.org&#34;&gt;Stack&lt;/a&gt; for development. To build the project simply run &lt;code&gt;stack build&lt;/code&gt;, while the test suite can be executed using &lt;code&gt;stack test&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Building MLIR from source&lt;/h3&gt; &#xA;&lt;p&gt;The instructions below assume that you have &lt;code&gt;cmake&lt;/code&gt; and &lt;code&gt;ninja&lt;/code&gt; installed. You should be able to get them from your favorite package manager.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Clone the latest LLVM code (or use &lt;code&gt;git pull&lt;/code&gt; if you cloned it before) into the root of this repository&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/llvm/llvm-project&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Create a temporary build directory&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mkdir llvm-project/build&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Configure the build using CMake. Remember to replace &lt;code&gt;$PREFIX&lt;/code&gt; with the directory where you want MLIR to be installed. See &lt;a href=&#34;https://llvm.org/docs/CMake.html&#34;&gt;LLVM documentation&lt;/a&gt; for extended explanation and other potentially interesting build flags.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cmake -B llvm-project/build           \&#xA;  -G Ninja                            \ # Use the Ninja build system&#xA;  -DLLVM_ENABLE_PROJECTS=mlir         \ # Enable build MLIR&#xA;  -DCMAKE_INSTALL_PREFIX=$PREFIX      \ # Install prefix&#xA;  -DMLIR_BUILD_MLIR_C_DYLIB=ON        \ # Build shared libraries&#xA;  -DLLVM_BUILD_LLVM_DYLIB=ON          \&#xA;  llvm-project/llvm&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;For development purposes we additionally recommend using &lt;code&gt;-DCMAKE_BUILD_TYPE=RelWithDebInfo -DLLVM_ENABLE_ASSERTIONS=ON&lt;/code&gt; to retain debug information and enable internal LLVM assertions. If one changes the install directory (CMAKE_INSTALL_PREFIX) then one needs to add this directory to PATH and LD_LIBRARY_PATH for the subsequent builds (e.g., &lt;code&gt;stack&lt;/code&gt;) to find it.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[Build and install MLIR]. Note that it uses the installation prefix specified in the previous step.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cmake --build llvm-project/build -t install&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Contributions of all kinds are welcome! If you&#39;re planning to implement a larger feature, consider posting an issue so that we can discuss it before you put in the work.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;See the LICENSE file.&lt;/p&gt; &#xA;&lt;p&gt;mlir-hs is an early-stage project, not an official Google product.&lt;/p&gt;</summary>
  </entry>
</feed>