<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Haskell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-04T01:42:39Z</updated>
  <subtitle>Daily Trending of Haskell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>chshersh/dr-cabal</title>
    <updated>2022-08-04T01:42:39Z</updated>
    <id>tag:github.com,2022-08-04:/chshersh/dr-cabal</id>
    <link href="https://github.com/chshersh/dr-cabal" rel="alternate"></link>
    <summary type="html">&lt;p&gt;üìä Haskell dependencies build times profiler&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;dr-cabal&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/chshersh/dr-cabal/actions&#34;&gt;&lt;img src=&#34;https://github.com/chshersh/dr-cabal/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;GitHub CI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hackage.haskell.org/package/dr-cabal&#34;&gt;&lt;img src=&#34;https://img.shields.io/hackage/v/dr-cabal.svg?logo=haskell&#34; alt=&#34;Hackage&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/chshersh/dr-cabal/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-MPL--2.0-blue.svg?sanitize=true&#34; alt=&#34;MPL-2.0 license&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;dr-cabal&lt;/code&gt; is a CLI tool for profiling Haskell dependencies build times.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/chshersh/dr-cabal/main/images/dr-cabal-example.png&#34; alt=&#34;dr-cabal example&#34;&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;‚ÑπÔ∏è &lt;strong&gt;DISCLAIMER:&lt;/strong&gt; This project is developed and maintained in free time by volunteers. The development may continue for decades or may stop tomorrow. You can use &lt;a href=&#34;https://github.com/sponsors/chshersh&#34;&gt;GitHub Sponsorship&lt;/a&gt; to support the development of this project.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;dr-cabal&lt;/code&gt; is a Haskell CLI tool and can be installed either from Hackage or from this repository.&lt;/p&gt; &#xA;&lt;h3&gt;Prerequisites&lt;/h3&gt; &#xA;&lt;p&gt;To start using &lt;code&gt;dr-cabal&lt;/code&gt;, make sure you have the required version of &lt;code&gt;cabal-install&lt;/code&gt; (a Haskell build tool) and GHC (a Haskell compiler) installed:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.haskell.org/cabal/&#34;&gt;Cabal ‚©æ 3.6.2.0&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.haskell.org/downloads/&#34;&gt;GHC ‚©æ 9.0.2&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Hackage&lt;/h3&gt; &#xA;&lt;p&gt;To install the latest version of &lt;code&gt;dr-cabal&lt;/code&gt; from &lt;a href=&#34;https://hackage.haskell.org/package/dr-cabal&#34;&gt;Hackage&lt;/a&gt;, follow these steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Update Hackage index:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cabal update&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Build &lt;code&gt;dr-cabal&lt;/code&gt; from Hackage and copy the resulting executable into the desired location:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cabal install dr-cabal \&#xA;    --install-method=copy \&#xA;    --overwrite-policy=always \&#xA;    --with-compiler=ghc-9.0.2 \&#xA;    --installdir=$HOME/.local/bin&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;‚ÑπÔ∏è &lt;strong&gt;NOTE:&lt;/strong&gt; Make sure the &lt;code&gt;$HOME/.local/bin&lt;/code&gt; directory or the directory of your choice is listed in &lt;code&gt;$PATH&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Sources&lt;/h3&gt; &#xA;&lt;p&gt;To build the latest version of &lt;code&gt;dr-cabal&lt;/code&gt; from sources, follow these steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Clone this repository:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git clone https://github.com/chshersh/dr-cabal.git&#xA;cd dr-cabal&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Build the package:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cabal build&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Copy executable to the desired location:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cp $(cabal list-bin exe:dr-cabal) ~/.local/bin/dr-cabal&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;‚ÑπÔ∏è &lt;strong&gt;NOTE:&lt;/strong&gt; Make sure the &lt;code&gt;~/.local/bin&lt;/code&gt; directory or the directory of your choice is listed in &lt;code&gt;$PATH&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;How to use?&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;dr-cabal&lt;/code&gt; usages comprises two steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;üëÄ Watching &lt;code&gt;cabal build&lt;/code&gt; output and recording data into a JSON file.&lt;/li&gt; &#xA; &lt;li&gt;üåà Producing pretty profiling results.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Watch&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;‚ö†Ô∏è &lt;strong&gt;WARNING:&lt;/strong&gt; To get meaningful results, the &lt;code&gt;dr-cabal watch&lt;/code&gt; command needs to be run when none of the dependencies are build. If you&#39;ve already build you project, including dependencies, you can purge global Cabal cache using the following command:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;rm -rf ~/.cabal&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;You may prefer a less invasive approach if you have custom global Cabal configurations:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;rm -rf ~/.cabal/store&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;However, with the latter solution you won&#39;t see the &lt;code&gt;Downloading&lt;/code&gt; phase in the profiling output.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Run the following command inside the project directory, for which you want to build the profile chart:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cabal build all | dr-cabal watch --output=dr-cabal-debug.json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This command watches the &lt;code&gt;cabal build&lt;/code&gt; output and records all the relevant steps in the &lt;code&gt;dr-cabal-debug.json&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;p&gt;If everything is good, you should see output similar to the below one:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/chshersh/dr-cabal/main/images/dr-cabal-watch.gif&#34; alt=&#34;dr-cabal watch example&#34;&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;It&#39;s also possible to see the time spent on Haddock. You can run with:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cabal build all --enable-documentation --haddock-all | dr-cabal watch --output=dr-cabal-debug.json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Profile&lt;/h3&gt; &#xA;&lt;p&gt;Once you successfully produced a JSON file with all the recorded steps, run the following command to pretty-print the profiling output:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;‚ö†Ô∏è &lt;strong&gt;WARNING:&lt;/strong&gt; For better results, make your terminal full-screen.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;dr-cabal profile --input=dr-cabal-debug.json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You&#39;ll see the output like on the image below:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/chshersh/dr-cabal/main/images/dr-cabal-itself.png&#34; alt=&#34;dr-cabal bigger example&#34;&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>obsidiansystems/nix-thunk</title>
    <updated>2022-08-04T01:42:39Z</updated>
    <id>tag:github.com,2022-08-04:/obsidiansystems/nix-thunk</id>
    <link href="https://github.com/obsidiansystems/nix-thunk" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;nix-thunk&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://haskell.org&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/language-Haskell-orange.svg?sanitize=true&#34; alt=&#34;Haskell&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hackage.haskell.org/package/nix-thunk&#34;&gt;&lt;img src=&#34;https://img.shields.io/hackage/v/nix-thunk.svg?sanitize=true&#34; alt=&#34;Hackage&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://matrix.hackage.haskell.org/#/package/nix-thunk&#34;&gt;&lt;img src=&#34;https://matrix.hackage.haskell.org/api/v2/packages/nix-thunk/badge&#34; alt=&#34;Hackage CI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/obsidiansystems/nix-thunk/actions&#34;&gt;&lt;img src=&#34;https://github.com/obsidiansystems/nix-thunk/workflows/github-action/badge.svg?sanitize=true&#34; alt=&#34;Github CI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/obsidiansystems/nix-thunk/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-BSD3-blue.svg?sanitize=true&#34; alt=&#34;BSD3 License&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;nix-thunk is a lightweight Nix dependency manager, focused on making it easy to contribute improvements back to libraries you depend on.&lt;/p&gt; &#xA;&lt;p&gt;nix-thunk does this by creating and managing &#34;thunks&#34; - directories that stand in for full git repositories. Like git submodules, they pin a specific commit of the target repository, but unlike git submodules, you don&#39;t have to clone them to use them. nix-thunk makes them &#34;transparent&#34; to Nix scripts, so any script that calls &lt;code&gt;import path/to/some/thunk&lt;/code&gt; will work the same on the thunk as it does on the original repository.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/obsidiansystems/nix-thunk/master/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/obsidiansystems/nix-thunk/master/#command-usage&#34;&gt;Command Usage&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/obsidiansystems/nix-thunk/master/#create-a-dependency&#34;&gt;Create a dependency&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/obsidiansystems/nix-thunk/master/#work-on-a-dependency&#34;&gt;Work on a dependency&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/obsidiansystems/nix-thunk/master/#update-a-dependency&#34;&gt;Update a dependency&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/obsidiansystems/nix-thunk/master/#nix-usage&#34;&gt;Nix Usage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/obsidiansystems/nix-thunk/master/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/obsidiansystems/nix-thunk/master/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;nix-env -f https://github.com/obsidiansystems/nix-thunk/archive/master.tar.gz -iA command&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Command Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Create a dependency&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;nix-thunk create https://example.com/some-dep&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you have already cloned the dependency as a git repository, you can just &lt;code&gt;pack&lt;/code&gt; it instead:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;nix-thunk pack some-dep&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Work on a dependency&lt;/h3&gt; &#xA;&lt;p&gt;If you discover a bug fix or improvement that your dependency needs, you can use &lt;code&gt;nix-thunk unpack path/to/your/dependency&lt;/code&gt; to turn the thunk back into a full checkout of the repository. Your Nix scripts should continue working, and you can modify the dependency&#39;s source code, push it to a branch or a fork, send a pull request, and then use &lt;code&gt;nix-thunk pack path/to/your/dependency&lt;/code&gt; to pack it back up into a thunk. When the dependency accepts your pull request, you can easily update the thunk.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;nix-thunk unpack some-dep&#xA;# Improve some-dep and push your work to a branch&#xA;nix-thunk pack some-dep&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Update a dependency&lt;/h3&gt; &#xA;&lt;p&gt;For routine updates, you can run &lt;code&gt;nix-thunk update path/to/your/dependency&lt;/code&gt; to point the thunk at the latest version of the dependency without needing to do a &lt;code&gt;nix-thunk unpack&lt;/code&gt; or a &lt;code&gt;git clone&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;nix-thunk update some-dep&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Nix Usage&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/obsidiansystems/nix-thunk/master/default.nix&#34;&gt;&lt;code&gt;default.nix&lt;/code&gt;&lt;/a&gt; file in this repository also defines the nix function, &lt;code&gt;thunkSource&lt;/code&gt;. This can be used in your nix files to access the contents of thunks. In the following example, a thunk is used in place of the source location argument to &lt;code&gt;callCabal2nix&lt;/code&gt;. &lt;code&gt;thunkSource&lt;/code&gt; works whether the thunk is packed or unpacked, making it convenient to run nix commands with modified thunks.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nix&#34;&gt;  haskellPackages = pkgs.haskell.packages.ghc865.override {&#xA;    overrides = self: super: {&#xA;      which = self.callCabal2nix &#34;which&#34; (thunkSource ./dep/which) {};&#xA;    };&#xA;  };&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also represent in nix all the thunks of a given directory&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nix&#34;&gt;let sources = nix-thunk.mapSubdirectories nix-thunk.thunkSource ./dep;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nix&#34;&gt;{ which = self.callCabal2nix &#34;which&#34; sources.which {}; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Pull requests are welcome. For major changes, please open an issue first to discuss what you would like to change. See the &lt;a href=&#34;https://raw.githubusercontent.com/obsidiansystems/nix-thunk/master/CONTRIBUTING.md&#34;&gt;contribution guide&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/obsidiansystems/nix-thunk/master/LICENSE&#34;&gt;BSD3&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://obsidian.systems/static/images/ObsidianSystemsLogo.svg?sanitize=true&#34; alt=&#34;Obsidian Systems&#34;&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>f-vdb/haskell_course</title>
    <updated>2022-08-04T01:42:39Z</updated>
    <id>tag:github.com,2022-08-04:/f-vdb/haskell_course</id>
    <link href="https://github.com/f-vdb/haskell_course" rel="alternate"></link>
    <summary type="html">&lt;p&gt;My haskell course inspired by astro c3d2&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;haskell_course&lt;/h1&gt; &#xA;&lt;p&gt;My haskell course inspired by astro c3d2&lt;/p&gt;</summary>
  </entry>
</feed>