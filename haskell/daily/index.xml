<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Haskell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-03-08T01:37:19Z</updated>
  <subtitle>Daily Trending of Haskell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>garious/diffdump</title>
    <updated>2023-03-08T01:37:19Z</updated>
    <id>tag:github.com,2023-03-08:/garious/diffdump</id>
    <link href="https://github.com/garious/diffdump" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A more general interface to diff and patch&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Unit-testing with diffdump and patchdump&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://travis-ci.org/garious/DiffDump&#34;&gt;&lt;img src=&#34;https://secure.travis-ci.org/garious/DiffDump.png&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;diffdump and patchdump are generalized versions of standard command-line utilities diff and patch. The biggest difference is that both utilities accept input on stdin, making it possible to pipe data from one utility to the other without introducing intermediary files.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;diffdump [OPTIONS] [OLD_DIR] [NEW_DIR]&#xA;&#xA;Common flags:&#xA;  -o --outfile=FILE     Output path.&#xA;     --outdir=DIR       Directory for tempory files.&#xA;     --cmd=FILE         Command to run on both arguments.&#xA;     --arg=ARG          Argument to pass to both commands.&#xA;     --cmd1=FILE        Command to run on first argument.  Overrides --cmd&#xA;     --arg1=ARG         Argument appended to first command.&#xA;     --cmd2=FILE        Command to run on second argument.  Overrides --cmd&#xA;     --arg2=ARG         Argument appended to second command.&#xA;     --filetype=ITEM    Filter by files that include this string in the&#xA;                        output of the &#39;file&#39; command.&#xA;     --fileext=ITEM     Filter by files that have this file extension.&#xA;     --diff=FILE        Path to diff.&#xA;     --diff-arg=ITEM    Pass &amp;lt;arg&amp;gt; on to diff.&#xA;  -f --force            Run despite the output directories already existing.&#xA;  -i --ignore=DIR       Ignore contents of the given directory.&#xA;  -r --recursive        Recursively compare any subdirectories found.&#xA;  -u --unified          Output 3 lines of unified context.&#xA;     --color            Force colorized diff in terminal output.&#xA;     --no-color         Do not colorize diff in terminal output.&#xA;  -v --verbose          Verbose output.&#xA;  -k --keep-files       Keep intermediary files.&#xA;  -s --succeed-on-diff  Unlike diff, return zero exit code when there are&#xA;                        differences.&#xA;  -? --help             Display help message&#xA;  -V --version          Print version information&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Building the sources&lt;/h2&gt; &#xA;&lt;p&gt;DiffDump is written in Haskell. To build it, get Haskell Platform from &lt;a href=&#34;http://www.haskell.org/ghc/&#34;&gt;http://www.haskell.org/ghc/&lt;/a&gt;. Then:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ git clone &amp;lt;url&amp;gt;&#xA;$ cd DiffDump&#xA;$ cabal install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Case Study, Unit-testing&lt;/h2&gt; &#xA;&lt;p&gt;In the example below, we will start with a simplest way to unit-test text-to-text transformations and show how that can be fragile. Then we will show how storing a file diff can be a nice incremental improvement. Lastly, we will demonstrate how &#39;diffdump&#39; and &#39;patchdump&#39; help make this new testing strategy easy to implement.&lt;/p&gt; &#xA;&lt;p&gt;Goal:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Write a unit-test to ensure LLVM&#39;s Constant Propagation eliminates&#xA;runtime constant evaluation.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;First a simple solution, given a test input file, run the constprop optimization on it and save the output as a &#34;gold&#34; file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ opt -S -constprop basictest.ll &amp;gt; basictest.ll.gold&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;As you make changes to the compiler, verify the output has not changed:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ opt -S -constprop basictest.ll &amp;gt; tmp.ll&#xA;$ diff basictest.ll.gold tmp.ll&#xA;$ rm tmp.ll&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The tool &#39;diff&#39; conveniently returns non-zero if there are any differences. But this strategy is still not without its limitations. Using &#34;gold&#34; copies as test cases is very fragile! If a code fragment unrelated to constant propagation changes, your unit tests fail.&lt;/p&gt; &#xA;&lt;p&gt;A good unit test should not fail when output unrelated to what it is your trying to test changes. Implementing this is where diffdump and LLVM&#39;s unit-test suite diverge. LLVM&#39;s solution is the FileCheck utility. You provide it with instructions on how to scan the compiler output to see if the output contains or does not contain what you expect. The author finds this tedious, typically incomplete, error-prone, and unnecessarily complicated to debug. Here is an example from basictest.ll. It says &#34;iterate down to @test1&#34; and &#34;verify the line contains zero and not %Val&#34;. Note this test is incomplete and does not verify the line that set %Val has been removed as well.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;; CHECK: @test1&#xA;; CHECK: %Ret = phi i32 [ 0, %BB1 ], [ 1, %BB2 ]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Instead, we recommend creating unit-tests based on diff&#39;ing and patch&#39;ing compiler output. First, when you are satisfied the compiler is working well, create a gold diff. We will first demonstrate how to do this with existing tools, and then show the one-liner with diffdump.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ opt -S basictest.ll &amp;gt; normalized.ll&#xA;$ opt -S -constprop basictest.ll &amp;gt; tmp.ll&#xA;$ diff -u normalized.ll tmp.ll &amp;gt; basictest.ll.patch&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And now with diffdump:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ diffdump -u --cmd=opt --arg=-S --arg2=-constprop basictest.ll &amp;gt; basictest.ll.patch &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here&#39;s the output. It shows that %Val was removed in two places.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;diff -u a/dump.txt b/dump.txt&#xA;--- a/dump.txt  2012-10-31 11:28:31.000000000 -0700&#xA;+++ b/dump.txt  2012-10-31 11:28:31.000000000 -0700&#xA;@@ -6,34 +6,28 @@&#xA;   br i1 %B, label %BB1, label %BB2&#xA; &#xA; BB1:                                              ; preds = %0&#xA;-  %Val = add i32 0, 0&#xA;   br label %BB3&#xA; &#xA; BB2:                                              ; preds = %0&#xA;   br label %BB3&#xA; &#xA; BB3:                                              ; preds = %BB2, %BB1&#xA;-  %Ret = phi i32 [ %Val, %BB1 ], [ 1, %BB2 ]&#xA;+  %Ret = phi i32 [ 0, %BB1 ], [ 1, %BB2 ]&#xA;   ret i32 %Ret&#xA; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And now, to verify a new compiler has not broken our test, we use patch to generate a &#34;gold&#34; copy, and diff it against the compiler output. Note this gold copy can be quite different than the original gold copy. If unrelated output has changed, &#39;patch&#39; comfortably manages the file changes and applies the patch in the correct location. If, however, the unrelated changes have changed too much, patch will bail out, letting you know you will need to create a new gold patch.&lt;/p&gt; &#xA;&lt;p&gt;Like before, we&#39;ll first do this the long way with &#39;diff&#39; and &#39;patch&#39; and then show how to do it with &#39;diffdump&#39; and &#39;patchdump&#39;. Both examples, assume we have already created and saved the &#34;gold&#34; patch mentioned earlier.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ opt -S basictest.ll &amp;gt; normalized.ll&#xA;$ patch -p1 -i basictest.ll.patch normalized.ll &amp;gt; basictest.ll.gold&#xA;$ opt -S -constprop basictest.ll &amp;gt; tmp.ll&#xA;$ diff -u basictest.ll.gold tmp.ll&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And with diffdump and patchdump:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ diffdump -u --cmd1=./MakeGold.sh --cmd2=opt --arg2=-S --arg2=-constprop basictest.ll&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Where MakeGold.sh contains:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;opt -S $1 | patchdump -p1 -i $1.patch&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;diffdump wraps diff, but allows you to execute different commands on each input file before computing the diff. In this case, we want the first parameter to diff to be the expected output and the second parameter to be the actual output. The &#39;--cmd1&#39; parameter is executed with the first argument to diffdump and the &#39;--cmd2&#39; parameter is executed with the second argument. If no second argument is provided, as is here, then &#39;--cmd2&#39; also acts on the first argument. We can unwrap each script to see exactly how this works. Starting with our one-liner:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ diffdump -u --cmd1=./MakeGold.sh --cmd2=opt --arg2=-S --arg2=-constprop basictest.ll&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Without diffdump is:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ./MakeGold.sh basictest.ll &amp;gt; basictest.ll.gold&#xA;$ opt -S -constprop basictest.ll &amp;gt; tmp.ll&#xA;$ diff -u basictest.ll.gold tmp.ll&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Without MakeGold.sh is:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ opt -S basictest.ll | patchdump -p1 -i basictest.ll.patch &amp;gt; basictest.ll.gold&#xA;$ opt -S -constprop basictest.ll &amp;gt; tmp.ll&#xA;$ diff -u basictest.ll.gold tmp.ll&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Without patchdump is:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ opt -S basictest.ll &amp;gt; normalized.ll&#xA;$ patch -p1 -i basictest.ll.patch normalized.ll &amp;gt; basictest.ll.gold&#xA;$ opt -S -constprop basictest.ll &amp;gt; tmp.ll&#xA;$ diff -u basictest.ll.gold tmp.ll&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;patchdump is used to output a patched file to stdout, and diffdump is used to diff the stdout from two commands. Together, all temporary files are tucked away. While temporary files are still created behind the scenes, diffdump ensures they are cleaned up properly and that they are given unique names so that multiple diffdump instances can run concurrently.&lt;/p&gt; &#xA;&lt;h2&gt;More diffdump examples&lt;/h2&gt; &#xA;&lt;p&gt;Compare the disassembly of two object files:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ diffdump old.o new.o -- objdump -d&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that when diffdump is given two filenames, you can also pass it a third command argument, the command to execute on each. Use &#39;--&#39; to tell diffdump that the all following options, such as &#39;-d&#39;, are intended for the given command and not for diffdump. Using the command argument is synonymous with &#39;--cmd&#39; and &#39;--arg&#39;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ diffdump --cmd=objdump --arg=-d old.o new.o&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Like diff, use the &#39;-u&#39; option to report a diff in &#34;unified&#34; format.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ diffdump -u old.o new.o -- objdump -d&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To keep the dump files around afterwards, use --keep-files and an explicit output directory.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ diffdump --keep-files --outdir=mydir old.o new.o -- objdump -d&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To compare the disassembly of two directories with matching files trees:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ diffdump -r old_dir new_dir -- objdump -d&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To use &#39;readelf -s&#39; instead of objdump:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ diffdump -u old.o new.o -- readelf -s&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>phuhl/linux_notification_center</title>
    <updated>2023-03-08T01:37:19Z</updated>
    <id>tag:github.com,2023-03-08:/phuhl/linux_notification_center</id>
    <link href="https://github.com/phuhl/linux_notification_center" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A notification daemon/center for linux&lt;/p&gt;&lt;hr&gt;&lt;p&gt;[[https://github.com/phuhl/linux_notification_center/workflows/CI/badge.svg?branch=master]]&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Linux Notification Center&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;A haskell-written notification center for users that like a desktop with style...&lt;/p&gt; &#xA;&lt;p&gt;Take part in the discussion on our [[https://github.com/phuhl/linux_notification_center/discussions][discussion board]]!&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_EXAMPLE&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;      ▙              █  █ ████████████  ███▙                  █   ▄██████▄&#xA;      ███▄           █  █ ████        █  ███▙                █    ████    ██&#xA;      ▜█████▄        █  █ ████         █  ███▙              █   █  ████    ▜█&#xA;        ▜██████▄     █  █ ████          █  ███▙      ▙     █     █  ████&#xA;      █▄   ▜██████▄  █  █ ████████████   █  ███▙    ██▙   █       █  ████&#xA;      █ ▜█▄   ▜█████▄█  █ ████            █  ███▙   ███▙ █         █  ████&#xA;      █    ▜█▄   ▜████  █ ████             █  ███▙█  ████           █  ████&#xA;      █       ▜█▄   ▜█  █ ████              █  ███ █  ██       █▙    █  ████&#xA;      █          ▜█▄    █ ████               █  █   █           █▙    █  ████&#xA;      █             ▜▄  █ ████████████        █      █           ▜████▛  ██▛&#xA;&#xA;&#xA;▄▇▇▀▀▀▀█▌        ▄▄▄▄▄▀▀██▇█▄▄▀▀▀▀▀    ▄▄▄▄▄▄      ▄▄█▇██▀▀▄▄▄▄▄        ▐█▀▀▀▀▇▇▄&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;▐██▌ ▀▀ ▄▄▄████████▄▄█▀ ▄█████▀▀▀███▄ ▀█▄▄████████▄▄▄ ▀▀ ▐██▌ ████▄ ▄▄▄██████████▀▀ ▀▀▀█▄ ▇████▀ ▀▀██▌ ▄█▀▀▀ ▀▀██████████▄▄▄ ▄████ ▀███████████████▀▀ ▐█▌ ██████ ▄ ▐███ ▐█▌ ▀▀███████████████▀ ▀▀▀▀██████▀ ▀▀ ▐██▐▇▇ ▀▀▀▀ ▀▀ ▀██████▀▀▀▀ ▄▄██████▀ ██ ██▌ ▄ ▀██████▄▄ ▄███████▀ █▀██ ▀█▄▄ ▄▄ ▀███████▄ ▄███████ ▀██▄▄█████████▀ ███████▄ ██████ ▀▀█████▀▀▀ ███████ ▐████▌ ▐████▌ ███▄▄▄▄▄▌ ▐▄▄▄▄▄███ ▀▀▀▀▀▀ ▀▀▀▀▀▀&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;                                    ╒══════╕&#xA;                                NEW │ 2023 │ Update:&#xA;                                    ╘══════╛&#xA;&#xA;&#xA;                      For all users of the non-git packages:&#xA;                              ¨¨¨¨¨        ¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨&#xA;&#xA;   Customize all CSS might [probably will] brake your current styling settings.&#xA;         (more information on this in the file updateyourconfig2021.org)&#xA;&#xA;&#xA;                                 New config style&#xA;                                 ┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈&#xA;&#xA;              █▀▄ █▀▄ █▀█ █ █ ▀█▀ █▀█ █▀▀   █▀▀ █ █ █▀█ █▀█ █▀▀ █▀▀&#xA;              █▀▄ █▀▄ █▀█ █▀▄  █  █ █ █ █   █   █▀█ █▀█ █ █ █ █ █▀▀&#xA;              ▀▀  ▀ ▀ ▀ ▀ ▀ ▀ ▀▀▀ ▀ ▀ ▀▀▀   ▀▀▀ ▀ ▀ ▀ ▀ ▀ ▀ ▀▀▀ ▀▀▀&#xA;&#xA;        The configuration file is now in YAML format. It&#39;s also massively&#xA;                   cleaned up thanks to the input of MyriaCore!&#xA;&#xA;                        The new configuration allows for:&#xA;&#xA;                              Extended Scriptability&#xA;                              ┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈&#xA;&#xA;         Now any notification can be modified by an external script. This&#xA;        allows for all the logic you could possibly do on a notification.&#xA;&#xA;                 Define special styles for special notifications!&#xA;&#xA;&#xA;                                 Many more fixes&#xA;                                 ┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈&#xA;&#xA;                           Additional Features from 2021&#xA;                           ┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈&#xA;&#xA;                         New deadd.css configuration file&#xA;                           Style all elements yourself&#xA;&#xA;                          Reload CSS styling on the fly&#xA;&#xA;                Use CSS transitions when loading a new colortheme&#xA;                           and smoothly change the mood&#xA;&#xA;&#xA;&#xA;                   As always, many thanks to our contributors:&#xA;&#xA;&#xA;    (¯`·.¸¸.·´                                                     `·.¸¸.·´¯)&#xA;   ( \                                                                     / )&#xA;   ( \ )          MyriaCore S-NA ahmubashshir mgil2 resolritter          ( / )&#xA;  ( ) (           woutervb avdv TaylanTatli rbowden91 kianmeng            ) ( )&#xA;   ( / )          opalmay balsoft trk9001 CobaltSpace lierdakil          ( \ )&#xA;   ( /                                                                     \ )&#xA;    (_.·´¯`·.¸                                                    ¸.·´¯`·.¸_)&#xA;&#xA;&#xA;                               Thank you very much!&#xA;&#xA;&#xA;        Finally, thank you to everyone who created issues, commented, and&#xA;                         helped to further this project.&#xA;&#xA;                                                                                     ▝&#xA;                                                                                     ▝&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;▖ ▐ ▖ ▐ ▌ Further news in releasenotes.org ▐ ▙▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▟&lt;/p&gt; &#xA;&lt;p&gt;#+END_EXAMPLE&lt;/p&gt; &#xA;&lt;p&gt;** Features&lt;/p&gt; &#xA;&lt;p&gt;The notification center receives notifications via DBUS (like any notification daemon) and shows them in the upper right corner of the screen. The notification (if not specified in the notification otherwise) will also be shown in the notification center even after the notification disappeared by itself. The notifications can be clicked to make them disappear.&lt;/p&gt; &#xA;&lt;p&gt;Notifications can be replaced by the use of the =replaces-id= feature of the notification specification.&lt;/p&gt; &#xA;&lt;p&gt;The notification center can (optionally) show user-specified buttons in the bottom that can be in two states (highlighted/not highlighted) and that can run customizable shell commands.&lt;/p&gt; &#xA;&lt;p&gt;** Screenshots&lt;/p&gt; &#xA;&lt;p&gt;Some applications, notification: [[file:README.org.img/org_20200223_193450_1en7sh.jpg]]&lt;/p&gt; &#xA;&lt;p&gt;Notification Center opened: [[file:README.org.img/org_20200223_193345_VhlbOf.jpg]]&lt;/p&gt; &#xA;&lt;p&gt;Link, Markup, Progressbar, and Action support: [[file:README.org.img/org_20201220_000601_9V037T.jpg]]&lt;/p&gt; &#xA;&lt;p&gt;** Usage&lt;/p&gt; &#xA;&lt;p&gt;To start it: #+BEGIN_SRC sh&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;deadd-notification-center #+END_SRC&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Toggle between hidden and shown state of the notification center: #+BEGIN_SRC sh kill -s USR1 $(pidof deadd-notification-center) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;Set the state of a user defined button (in this example the first button, which has =id= 0): #+BEGIN_SRC sh&lt;/p&gt; &#xA;&lt;h1&gt;turn highlighting on&lt;/h1&gt; &#xA;&lt;p&gt;notify-send.py a --hint boolean:deadd-notification-center:true &lt;br&gt; int&lt;span&gt;🆔&lt;/span&gt;0 boolean:state:true type:string:buttons&lt;/p&gt; &#xA;&lt;h1&gt;turn highlighting off&lt;/h1&gt; &#xA;&lt;p&gt;notify-send.py a --hint boolean:deadd-notification-center:true &lt;br&gt; int&lt;span&gt;🆔&lt;/span&gt;0 boolean:state:false type:string:buttons #+END_SRC This snippet uses [[https://github.com/phuhl/notify-send.py][notify-send.py]], an improved version of libnotify (notify-send).&lt;/p&gt; &#xA;&lt;p&gt;Clear all notifications #+BEGIN_SRC sh&lt;/p&gt; &#xA;&lt;h1&gt;within the notification center&lt;/h1&gt; &#xA;&lt;p&gt;notify-send.py a --hint boolean:deadd-notification-center:true &lt;br&gt; string:type:clearInCenter&lt;/p&gt; &#xA;&lt;h1&gt;popups&lt;/h1&gt; &#xA;&lt;p&gt;notify-send.py a --hint boolean:deadd-notification-center:true &lt;br&gt; string:type:clearPopups #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;Pause/Unpause popup notifications #+BEGIN_SRC sh&lt;/p&gt; &#xA;&lt;h1&gt;pause popup notifications&lt;/h1&gt; &#xA;&lt;p&gt;notify-send.py a --hint boolean:deadd-notification-center:true &lt;br&gt; string:type:pausePopups&lt;/p&gt; &#xA;&lt;h1&gt;unpause popup notifications&lt;/h1&gt; &#xA;&lt;p&gt;notify-send.py a --hint boolean:deadd-notification-center:true &lt;br&gt; string:type:unpausePopups #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;Reload CSS Styling file #+BEGIN_SRC sh notify-send.py a --hint boolean:deadd-notification-center:true &lt;br&gt; string:type:reloadStyle #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;Send notifications that only show up in the notification center but do not produce a popup: #+BEGIN_SRC sh notify-send.py &#34;Does not pop up&#34; -t 1 #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;*** Supported hints and features&lt;/p&gt; &#xA;&lt;p&gt;Action buttons with gtk icons #+BEGIN_SRC sh notify-send.py &#34;And buttons&#34; &#34;Do you like buttons?&#34; &lt;br&gt; --hint boolean:action-icons:true &lt;br&gt; --action yes:face-cool no:face-sick&lt;br&gt; #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;Notification images by gtk icon #+BEGIN_SRC sh notify-send.py &#34;Icons are&#34; &#34;COOL&#34; &lt;br&gt; --hint string:image-path:face-cool #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;Notification images by file #+BEGIN_SRC sh notify-send.py &#34;Images are&#34; &#34;COOL&#34; &lt;br&gt; --hint string:image-path:file://path/to/image/from/root.png #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;Notification with progress bar #+BEGIN_SRC sh notify-send.py &#34;This notification has a progressbar&#34; &#34;33%&#34; &lt;br&gt; --hint int:has-percentage:33) #or notify-send.py &#34;This notification has a progressbar&#34; &#34;33%&#34; &lt;br&gt; --hint int:value:33) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;Notification with slider #+BEGIN_SRC sh notify-send.py &#34;This notification has a slider&#34; &#34;33%&#34; &lt;br&gt; --hint int:has-percentage:33 --action changeValue:abc) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;*** Example: Brightness indicator&lt;/p&gt; &#xA;&lt;p&gt;This snippet can be used to produce a brightness-indicator. It requires the [[https://github.com/phuhl/notify-send.py][notify-send.py]] script.&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC sh #!/bin/bash&lt;/p&gt; &#xA;&lt;p&gt;if [ &#34;$1&#34; == &#34;inc&#34; ]; then xbacklight -inc 5 fi&lt;/p&gt; &#xA;&lt;p&gt;if [ &#34;$1&#34; == &#34;dec&#34; ]; then xbacklight -lower 5 fi&lt;/p&gt; &#xA;&lt;p&gt;BRIGHTNESS=$(xbacklight -get) NOTI_ID=$(notify-send.py &#34;Bildschirmhelligkeit&#34; &#34;$BRIGHTNESS/100&#34; &lt;br&gt; --hint string:image-path:video-display boolean:transient:true &lt;br&gt; int:has-percentage:$BRIGHTNESS &lt;br&gt; --replaces-process &#34;brightness-popup&#34;) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;*** Example: Volume indicator&lt;/p&gt; &#xA;&lt;p&gt;This snippet can be used to produce a volume-indicator. It requires the [[https://github.com/phuhl/notify-send.py][notify-send.py]] script.&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC sh #!/bin/bash&lt;/p&gt; &#xA;&lt;p&gt;if [ &#34;$1&#34; == &#34;inc&#34; ]; then amixer -q sset Master 5%+ fi&lt;/p&gt; &#xA;&lt;p&gt;if [ &#34;$1&#34; == &#34;dec&#34; ]; then amixer -q sset Master 5%- fi&lt;/p&gt; &#xA;&lt;p&gt;if [ &#34;$1&#34; == &#34;mute&#34; ]; then amixer -q sset Master toggle fi&lt;/p&gt; &#xA;&lt;p&gt;AMIXER=$(amixer sget Master) VOLUME=$(echo $AMIXER | grep &#39;Right:&#39; | awk -F&#39;[][]&#39; &#39;{ print $2 }&#39; | tr -d &#34;%&#34;) MUTE=$(echo $AMIXER | grep -o &#39;[off]&#39; | tail -n 1) if [ &#34;$VOLUME&#34; -le 20 ]; then ICON=audio-volume-low else if [ &#34;$VOLUME&#34; -le 60 ]; then ICON=audio-volume-medium else ICON=audio-volume-high fi fi if [ &#34;$MUTE&#34; == &#34;[off]&#34; ]; then ICON=audio-volume-muted fi&lt;/p&gt; &#xA;&lt;p&gt;NOTI_ID=$(notify-send.py &#34;Lautstärke&#34; &#34;$VOLUME/100&#34; &lt;br&gt; --hint string:image-path:$ICON boolean:transient:true &lt;br&gt; int:has-percentage:$VOLUME &lt;br&gt; --replaces-process &#34;volume-popup&#34;) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;** Install&lt;/p&gt; &#xA;&lt;p&gt;Install from the AUR for Arch: [[https://aur.archlinux.org/packages/deadd-notification-center/][deadd-notification-center]].&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;OR&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you want to spare yourself the hassle of the build time there is a binary package available: [[https://aur.archlinux.org/packages/deadd-notification-center-bin/][deadd-notification-center-bin]].&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;OR&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you don&#39;t want to wait for me to publish the next stable release: Use the new AUR git-package.&lt;/p&gt; &#xA;&lt;p&gt;[[https://aur.archlinux.org/packages/deadd-notification-center-git/][deadd-notification-center-git]].&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;OR&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;On Ubuntu, Debian, everything... Replace 1.7.2 with the current-most release from the [[https://github.com/phuhl/linux_notification_center/releases][release section]].&lt;/p&gt; &#xA;&lt;p&gt;Manually install the dependencies (exact names might differ in your distribution):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;gtk3&lt;/li&gt; &#xA; &lt;li&gt;gobject-introspection-runtime&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;#+BEGIN_SRC sh tar -xvzf linux_notification_center-1.7.2.tar.gz cd linux_notification_center-1.7.2 wget &lt;a href=&#34;https://github.com/phuhl/linux_notification_center/releases/download/1.7.2/deadd-notification-center&#34;&gt;https://github.com/phuhl/linux_notification_center/releases/download/1.7.2/deadd-notification-center&lt;/a&gt; mkdir -p .out mv deadd-notification-center .out sudo make install #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;OR&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Dependencies:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[[https://www.archlinux.org/packages/community/x86_64/stack/][stack]]&lt;/li&gt; &#xA; &lt;li&gt;cairo&lt;/li&gt; &#xA; &lt;li&gt;pango&lt;/li&gt; &#xA; &lt;li&gt;gobject-introspection&lt;/li&gt; &#xA; &lt;li&gt;gtk3&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;#+BEGIN_SRC shell-script make sudo make install #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;** Configuration&lt;/p&gt; &#xA;&lt;p&gt;NOTE: Some styling config has moved. More infos in this file: [[https://github.com/phuhl/linux_notification_center/blob/master/updateyourconfig2021.org][updateyourconfig2021.org]]&lt;/p&gt; &#xA;&lt;p&gt;No configuration is necessary, the notification center comes with sensible defaults™.&lt;/p&gt; &#xA;&lt;p&gt;All colors and sizes are customizable, as well as the default timeout for notifications and the optional buttons in the notification center. Below are possible configurable options shown. The configuration file must be located at =~/.config/deadd/deadd.yml= (or, if configured differently on your system: =${XDG_CONFIG_HOME}/deadd/deadd.yml=).&lt;/p&gt; &#xA;&lt;p&gt;Additionally, a =deadd.css= will be loaded from the same folder. It contains the styling of the notification center. You can load changes from the =deadd.css= file by using the command described in the section &#34;Usage&#34;.&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC yaml&lt;/p&gt; &#xA;&lt;h3&gt;Margins for notification-center/notifications&lt;/h3&gt; &#xA;&lt;p&gt;margin-top: 0 margin-right: 0&lt;/p&gt; &#xA;&lt;h3&gt;Margins for notification-center&lt;/h3&gt; &#xA;&lt;p&gt;margin-bottom: 0&lt;/p&gt; &#xA;&lt;h3&gt;Width of the notification center/notifications in pixels.&lt;/h3&gt; &#xA;&lt;p&gt;width: 500&lt;/p&gt; &#xA;&lt;h3&gt;Command to run at startup. This can be used to setup&lt;/h3&gt; &#xA;&lt;h3&gt;button states.&lt;/h3&gt; &#xA;&lt;h1&gt;startup-command: deadd-notification-center-startup&lt;/h1&gt; &#xA;&lt;h3&gt;Monitor on which the notification center/notifications will be&lt;/h3&gt; &#xA;&lt;h3&gt;printed. If &#34;follow-mouse&#34; is set true, this does nothing.&lt;/h3&gt; &#xA;&lt;p&gt;monitor: 0&lt;/p&gt; &#xA;&lt;h3&gt;If true, the notification center/notifications will open on the&lt;/h3&gt; &#xA;&lt;h3&gt;screen, on which the mouse is. Overrides the &#34;monitor&#34; setting.&lt;/h3&gt; &#xA;&lt;p&gt;follow-mouse: false&lt;/p&gt; &#xA;&lt;p&gt;notification-center:&lt;/p&gt; &#xA;&lt;h3&gt;Margin at the top/right/bottom of the notification center in&lt;/h3&gt; &#xA;&lt;h3&gt;pixels. This can be used to avoid overlap between the notification&lt;/h3&gt; &#xA;&lt;h3&gt;center and bars such as polybar or i3blocks.&lt;/h3&gt; &#xA;&lt;h1&gt;margin-top: 0&lt;/h1&gt; &#xA;&lt;h1&gt;margin-right: 0&lt;/h1&gt; &#xA;&lt;h1&gt;margin-bottom: 0&lt;/h1&gt; &#xA;&lt;h3&gt;Width of the notification center in pixels.&lt;/h3&gt; &#xA;&lt;h1&gt;width: 500&lt;/h1&gt; &#xA;&lt;h3&gt;Monitor on which the notification center will be printed. If&lt;/h3&gt; &#xA;&lt;h3&gt;&#34;follow-mouse&#34; is set true, this does nothing.&lt;/h3&gt; &#xA;&lt;h1&gt;monitor: 0&lt;/h1&gt; &#xA;&lt;h3&gt;If true, the notification center will open on the screen, on which&lt;/h3&gt; &#xA;&lt;h3&gt;the mouse is. Overrides the &#34;monitor&#34; setting.&lt;/h3&gt; &#xA;&lt;h1&gt;follow-mouse: false&lt;/h1&gt; &#xA;&lt;h3&gt;Notification center closes when the mouse leaves it&lt;/h3&gt; &#xA;&lt;p&gt;hide-on-mouse-leave: true&lt;/p&gt; &#xA;&lt;h3&gt;If newFirst is set to true, newest notifications appear on the top&lt;/h3&gt; &#xA;&lt;h3&gt;of the notification center. Else, notifications stack, from top to&lt;/h3&gt; &#xA;&lt;h3&gt;bottom.&lt;/h3&gt; &#xA;&lt;p&gt;new-first: true&lt;/p&gt; &#xA;&lt;h3&gt;If true, the transient field in notifications will be ignored,&lt;/h3&gt; &#xA;&lt;h3&gt;thus the notification will be persisted in the notification&lt;/h3&gt; &#xA;&lt;h3&gt;center anyways&lt;/h3&gt; &#xA;&lt;p&gt;ignore-transient: false&lt;/p&gt; &#xA;&lt;h3&gt;Custom buttons in notification center&lt;/h3&gt; &#xA;&lt;p&gt;buttons: ### Numbers of buttons that can be drawn on a row of the notification ### center. # buttons-per-row: 5&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;### Height of buttons in the notification center (in pixels).    &#xA;# button-height: 60&#xA;&#xA;### Horizontal and vertical margin between each button in the &#xA;### notification center (in pixels).&#xA;# button-margin: 2&#xA;&#xA;### Button actions and labels. For each button you must specify a&#xA;### label and a command.&#xA;actions:&#xA;  # - label: VPN&#xA;  #   command: &#34;sudo vpnToggle&#34;&#xA;  # - label: Bluetooth&#xA;  #   command: bluetoothToggle&#xA;  # - label: Wifi&#xA;  #   command: wifiToggle&#xA;  # - label: Screensaver&#xA;  #   command: screensaverToggle&#xA;  # - label: Keyboard&#xA;  #   command: keyboardToggle&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;notification:&lt;/p&gt; &#xA;&lt;h3&gt;If true, markup (&lt;u&gt;, &lt;i&gt;, &lt;b&gt;, &lt;a&gt;) will be displayed properly&lt;/a&gt;&lt;/b&gt;&lt;/i&gt;&lt;/u&gt;&lt;/h3&gt;&#xA;&lt;u&gt;&lt;i&gt;&lt;b&gt;&lt;a&gt; &lt;p&gt;use-markup: true&lt;/p&gt; &lt;h3&gt;If true, html entities (&amp;amp; for &amp;amp;, % for %, etc) will be&lt;/h3&gt; &lt;h3&gt;parsed properly. This is useful for chromium-based apps, which&lt;/h3&gt; &lt;h3&gt;tend to send these in notifications.&lt;/h3&gt; &lt;p&gt;parse-html-entities: true&lt;/p&gt; &lt;p&gt;dbus:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;### If noti-closed messages are enabled, the sending application&#xA;### will know that a notification was closed/timed out. This can&#xA;### be an issue for certain applications, that overwrite&#xA;### notifications on status updates (e.g. Spotify on each&#xA;### song). When one of these applications thinks, the notification&#xA;### has been closed/timed out, they will not overwrite existing&#xA;### notifications but send new ones. This can lead to redundant&#xA;### notifications in the notification center, as the close-message&#xA;### is send regardless of the notification being persisted.&#xA;send-noti-closed: false&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;app-icon:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;### If set to true: If no icon is passed by the app_icon parameter&#xA;### and no application &#34;desktop-entry&#34;-hint is present, deadd will&#xA;### try to guess the icon from the application name (if present).&#xA;guess-icon-from-name: true&#xA;&#xA;### The display size of the application icons in the notification &#xA;### pop-ups and in the notification center&#xA;icon-size: 20&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;image:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;### The maximal display size of images that are part of&#xA;### notifications for notification pop-ups and in the notification&#xA;### center&#xA;size: 100&#xA;&#xA;### The margin around the top, bottom, left, and right of&#xA;### notification images.&#xA;margin-top: 15&#xA;margin-bottom: 15&#xA;margin-left: 15&#xA;margin-right: 0&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;h3&gt;Apply modifications to certain notifications:&lt;/h3&gt; &lt;h3&gt;Each modification rule needs a &#34;match&#34; and either a &#34;modify&#34; or&lt;/h3&gt; &lt;h3&gt;a &#34;script&#34; entry.&lt;/h3&gt; &lt;p&gt;modifications:&lt;/p&gt; &lt;h3&gt;Match:&lt;/h3&gt; &lt;h3&gt;Matches the notifications against these rules. If all of the&lt;/h3&gt; &lt;h3&gt;values (of one modification rule) match, the &#34;modify&#34;/&#34;script&#34;&lt;/h3&gt; &lt;h3&gt;part is applied.&lt;/h3&gt; &lt;h1&gt;- match:&lt;/h1&gt; &lt;pre&gt;&lt;code&gt;  ### Possible match criteria:&#xA;  # title: &#34;Notification title&#34;&#xA;  # body: &#34;Notification body&#34;&#xA;  # time: &#34;12:44&#34;&#xA;  # app-name: &#34;App name&#34;&#xA;&#xA;# modify:&#xA;  ### Possible modifications&#xA;  # title: &#34;abc&#34;&#xA;  # body: &#34;abc&#34;&#xA;  # app-name: &#34;abc&#34;&#xA;  # app-icon: &#34;file:///abc.png&#34;&#xA;  ### The timeout has three special values:&#xA;  ### timeout: 0 -&amp;gt; don&#39;t time out at all&#xA;  ### timeout: -1 -&amp;gt; use default timeout&#xA;  ### timeout: 1 -&amp;gt; don&#39;t show as pop-up&#xA;  ### timeout: &amp;gt;1 -&amp;gt; milliseconds until timeout&#xA;  # timeout: 1&#xA;  # margin-right: 10&#xA;  # margin-top: 10&#xA;  # image: &#34;file:///abc.png&#34;&#xA;  # image-size: 10&#xA;  # transient: true&#xA;  # send-noti-closed: false&#xA;  ### Remove action buttons from notifications&#xA;  # remove-actions: true&#xA;  ### Add a class-name to the notification container, that can be&#xA;  ### used for specific styling of notifications using the&#xA;  ### deadd.css file&#xA;  # class-name: &#34;abc&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;h1&gt;- match:&lt;/h1&gt; &lt;pre&gt;&lt;code&gt;  # app-name: &#34;Chromium&#34;&#xA;&#xA;### Instead of modifying a notification directly, a script can be&#xA;### run, which will receive the notification as JSON on STDIN. It&#xA;### is expected to return JSON/YAML configuration that defines the&#xA;### modifications that should be applied. Minimum complete return&#xA;### value must be &#39;{&#34;modify&#34;: {}, &#34;match&#34;: {}}&#39;. Always leave the &#34;match&#34;&#xA;### object empty (technical reasons, i.e. I am lazy).&#xA;# script: &#34;linux-notification-center-parse-chromium&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;match: app-name: &#34;Spotify&#34; modify: image-size: 80 timeout: 1 send-noti-closed: true class-name: &#34;Spotify&#34;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;h1&gt;- match:&lt;/h1&gt; &lt;h1&gt;title: Bildschirmhelligkeit&lt;/h1&gt; &lt;h1&gt;modify:&lt;/h1&gt; &lt;h1&gt;image-size: 60&lt;/h1&gt; &lt;p&gt;popup:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;### Default timeout used for notifications in milli-seconds.  This can&#xA;### be overwritten with the &#34;-t&#34; option (or &#34;--expire-time&#34;) of the&#xA;### notify-send command.&#xA;default-timeout: 10000&#xA;&#xA;### Margin above/right/between notifications (in pixels). This can&#xA;### be used to avoid overlap between notifications and a bar such as&#xA;### polybar or i3blocks.&#xA;margin-top: 50&#xA;margin-right: 50&#xA;margin-between: 20&#xA;&#xA;### Defines after how many lines of text the body will be truncated. &#xA;### Use 0 if you want to disable truncation.&#xA;max-lines-in-body: 3&#xA;&#xA;### Monitor on which the notifications will be&#xA;### printed. If &#34;follow-mouse&#34; is set true, this does nothing.&#xA;# monitor: 0&#xA;&#xA;### If true, the notifications will open on the&#xA;### screen, on which the mouse is. Overrides the &#34;monitor&#34; setting.&#xA;# follow-mouse: false&#xA;&#xA;click-behavior:&#xA;  &#xA;  ### The mouse button for dismissing a popup. Must be either &#34;mouse1&#34;, &#xA;  ### &#34;mouse2&#34;, &#34;mouse3&#34;, &#34;mouse4&#34;, or &#34;mouse5&#34;&#xA;  dismiss: mouse1&#xA;&#xA;  ### The mouse button for opening a popup with the default action.&#xA;  ### Must be either &#34;mouse1&#34;, &#34;mouse2&#34;, &#34;mouse3&#34;, &#34;mouse4&#34;, or &#34;mouse5&#34;&#xA;  default-action: mouse3&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;#+END_SRC&lt;/p&gt; &lt;p&gt;*** CSS styling&lt;/p&gt; &lt;p&gt;The default CSS style can be found in =/etc/xdg/deadd/deadd.css=. It is advised to copy this file to =${XDG_CONFIG_HOME}/deadd/deadd.css= (usually =.config/deadd/deadd.css=) if you want to make changes.&lt;/p&gt; &lt;p&gt;In the file you can change CSS styles (GTK3-flavor). Should the installation not have created a =dead.css=, you can use the content of [[https://github.com/phuhl/linux_notification_center/blob/master/style.css][style.css]] as a foundation.&lt;/p&gt; &lt;p&gt;The following class-names for labels are defined:&lt;/p&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Notifications: &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;=label.deadd-noti-center.notification.appname= :: Appname&lt;/li&gt; &#xA;       &lt;li&gt;=label.deadd-noti-center.notification.body= :: Textbody&lt;/li&gt; &#xA;       &lt;li&gt;=label.deadd-noti-center.notification.title= :: Notification title&lt;/li&gt; &#xA;       &lt;li&gt;=image.deadd-noti-center.notification.image= :: Image of a notification&lt;/li&gt; &#xA;       &lt;li&gt;=image.deadd-noti-center.notification.icon= :: Appicon&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;Notifications in the notification center: &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;=label.deadd-noti-center.in-center.appname= :: Appname&lt;/li&gt; &#xA;       &lt;li&gt;=label.deadd-noti-center.in-center.body= :: Textbody&lt;/li&gt; &#xA;       &lt;li&gt;=label.deadd-noti-center.in-center.title= :: Notification title&lt;/li&gt; &#xA;       &lt;li&gt;=label.deadd-noti-center.in-center.time= :: Notification time&lt;/li&gt; &#xA;       &lt;li&gt;=image.deadd-noti-center.in-center.image= :: Image of a notification&lt;/li&gt; &#xA;       &lt;li&gt;=image.deadd-noti-center.in-center.icon= :: Appicon&lt;/li&gt; &#xA;       &lt;li&gt;=button.deadd-noti-center.in-center.button-close= :: Close button on notification&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;Notification-center: &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;=label.deadd-noti-center.noti-center.time= :: The big time at the top&lt;/li&gt; &#xA;       &lt;li&gt;=label.deadd-noti-center.noti-center.date= :: The date text&lt;/li&gt; &#xA;       &lt;li&gt;=label.deadd-noti-center.noti-center.delete-all= :: &#34;Delete all&#34; Button&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;p&gt;Additionally, you can specify custom class-names in the modifications-section of your =deadd.yml=. These class names will be defined on the notification container (all notification elements lie within) of pop-ups and in-center.&lt;/p&gt; &lt;p&gt;**** Examples:&lt;/p&gt; &lt;p&gt;&lt;em&gt;Remove appname and icon from notifications&lt;/em&gt;&lt;/p&gt; &lt;p&gt;#+BEGIN_SRC css image.deadd-noti-center.notification.icon, label.deadd-noti-center.notification.appname, image.deadd-noti-center.in-center.icon, label.deadd-noti-center.in-center.appname { opacity: 0 } #+END_SRC&lt;/p&gt; &lt;p&gt;&lt;em&gt;Change font&lt;/em&gt;&lt;/p&gt; &lt;p&gt;#+BEGIN_SRC css .deadd-noti-center { font-family: monospace; } #+END_SRC&lt;/p&gt; &lt;p&gt;&lt;em&gt;Specify special background for one app&lt;/em&gt;&lt;/p&gt; &lt;p&gt;[[file:README.org.img/org_20210119_120536_adyKnd.jpg]]&lt;/p&gt; &lt;p&gt;#+BEGIN_SRC css .notificationInCenter.Spotify { background: linear-gradient(130deg, rgba(0, 0, 0, 0.1), rgba(0, 255, 0, 0.3)); border-radius: 5px; } #+END_SRC&lt;/p&gt; &lt;p&gt;This change requires a modification in your deadd.yml:&lt;/p&gt; &lt;p&gt;#+BEGIN_SRC yaml notification: modifications:&lt;/p&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;match: app-name: &#34;Spotify&#34; modify: class-name: &#34;Spotify&#34; #+END_SRC&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;p&gt;*** Notification-based scripting&lt;/p&gt; &lt;p&gt;You can modify notifications if they match certain criteria.&lt;/p&gt; &lt;p&gt;&lt;em&gt;Matching:&lt;/em&gt;&lt;/p&gt; &lt;p&gt;The criteria you can specify are equality for the following parameters:&lt;/p&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;title&lt;/li&gt; &#xA;     &lt;li&gt;body&lt;/li&gt; &#xA;     &lt;li&gt;app-name&lt;/li&gt; &#xA;     &lt;li&gt;time&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;p&gt;The matching parameters can be specified in the section =notification.modifications.match= of your =deadd.yml=.&lt;/p&gt; &lt;p&gt;&lt;em&gt;Modifying:&lt;/em&gt;&lt;/p&gt; &lt;p&gt;You can set the following parameters:&lt;/p&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;=title=&lt;/li&gt; &#xA;     &lt;li&gt;=body=&lt;/li&gt; &#xA;     &lt;li&gt;=app-name=&lt;/li&gt; &#xA;     &lt;li&gt;=timeout= (specified in milliseconds)&lt;/li&gt; &#xA;     &lt;li&gt;=margin-right= (overrides &lt;del&gt;distanceRight&lt;/del&gt; from the configuration)&lt;/li&gt; &#xA;     &lt;li&gt;=margin-top= (overrides &lt;del&gt;distanceTop&lt;/del&gt; from the configuration)&lt;/li&gt; &#xA;     &lt;li&gt;=icon= (overrides the app-icon, value must be either empty, a path to an image or a gtk-icon-name)&lt;/li&gt; &#xA;     &lt;li&gt;=image= (overrides the image of the notification, value must be either empty, a path to an image or a gtk-icon-name)&lt;/li&gt; &#xA;     &lt;li&gt;=image-size=&lt;/li&gt; &#xA;     &lt;li&gt;=transient= (value has to be =true= or =false=)&lt;/li&gt; &#xA;     &lt;li&gt;=send-noti-closed= (value has to be =true= or =false=, if set to true it will prevent that a DBUS =NotificationClosed= message will be send for this notification. Only applies if the configuration parameter =configSendNotiClosedDbusMessage= is set to =true=)&lt;/li&gt; &#xA;     &lt;li&gt;=remove-actions= (value can be anything, if used, no action buttons will be displayed on the notifications)&lt;/li&gt; &#xA;     &lt;li&gt;=class-name= (adds a CSS-class name to the container of the notification for styling)&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;p&gt;The modification parameters can be specified in the section =notification.modifications.modify= of your =deadd.yml=.&lt;/p&gt; &lt;p&gt;&lt;em&gt;Running Scripts:&lt;/em&gt;&lt;/p&gt; &lt;p&gt;Instead of modifying a notification directly, a script can be run, which will receive the notification as JSON on STDIN. The script is expected to return JSON/YAML configuration that defines the modifications that should be applied. Minimum complete return value must be ={&#34;modify&#34;: {}, &#34;match&#34;: {}}=. Always leave the &#34;match&#34; object empty (technical reasons, i.e. I am lazy).&lt;/p&gt; &lt;p&gt;&lt;em&gt;Example script&lt;/em&gt; to turn a notification from WhatsApp in Chromium into something sensible:&lt;/p&gt; &lt;p&gt;Before:&lt;/p&gt; &lt;p&gt;[[file:README.org.img/org_20210119_122628_AUuEu3.jpg]]&lt;/p&gt; &lt;p&gt;After:&lt;/p&gt; &lt;p&gt;[[file:README.org.img/org_20210119_122031_BNYKTp.jpg]]&lt;/p&gt; &lt;p&gt;Configuration:&lt;/p&gt; &lt;p&gt;#+BEGIN_SRC yaml notification: modifications:&lt;/p&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;match: app-name: &#34;Chromium&#34; script: &#34;linux-notification-center-parse-chromium&#34;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;p&gt;#+END_SRC&lt;/p&gt; &lt;p&gt;Script executed on Chromium notifications:&lt;/p&gt; &lt;p&gt;#+BEGIN_SRC sh #!/bin/bash&lt;/p&gt; &lt;h1&gt;Read notification from STDIN&lt;/h1&gt; &lt;p&gt;noti=&#34;&#34; while read line do noti=${noti}${line} done &amp;lt; &#34;${1:-/dev/stdin}&#34;&lt;/p&gt; &lt;h1&gt;Use jq to parse JSON and get the body field of the notification&lt;/h1&gt; &lt;/a&gt;&lt;p&gt;&lt;a&gt;body=$(echo $noti | jq &#39;.body&#39;) if [[ &#34;$body&#34; == &#34;&#34;&amp;lt;a href=\&#34;https://web.whatsapp.com/\&#34;&amp;gt;web.whatsapp.com&lt;/a&gt;&#34;* ]]; then # It&#39;s Whatsapp web, lets modify the notification isWhatsapp=1 body=$(echo $body | cut -c 64-) img=$(echo $noti | jq &#39;.image&#39;) if [[ &#34;$img&#34; == &#34;&#34;NamedIcon \&#34;&#34;* ]]; then filepath=$(echo $img | cut -c 14- | head -c -4) cp $filepath /tmp/whatsappimg.png fi fi&lt;/p&gt; &lt;p&gt;if [[ &#34;$isWhatsapp&#34; == &#34;1&#34; ]]; then # Returning the modifications to dnc as JSON echo &#34;{&#34;modify&#34;: {&#34;app-icon&#34;: &#34;whatsapp-desktop&#34;, &#34;app-name&#34;: &#34;WhatsApp&#34;, &#34;image-size&#34;: 50, &#34;image&#34;: &#34;file:///tmp/whatsappimg.png&#34;, &#34;remove-actions&#34;: true, &#34;class-name&#34;: &#34;WhatsApp&#34;, &#34;body&#34;:&#34;${body}}, &#34;match&#34;: {}}&#34; else echo &#39;{&#34;modify&#34;: {}, &#34;match&#34;: {}}&#39; fi #+END_SRC&lt;/p&gt; &lt;p&gt;** Contribute&lt;/p&gt; &lt;p&gt;First of all: Contribution is obviously 100% optional.&lt;/p&gt; &lt;p&gt;If you do want to contribute, feel free to send me an email (for the address, see on my profile).&lt;/p&gt; &lt;p&gt;If you do not want to contribute with your time, you can buy me a beer. Someone mentioned, they would be willing to donate, so here is my PayPal link: [[https://paypal.me/phuhl]]. Should you consider to donate, please be aware that this does not buy you the right to demand anything. This is a hobby and will be. But if you just want to give me some motivation by showing me that someone appreciates my work, feel free to do so :)&lt;/p&gt; &lt;p&gt;** See also&lt;/p&gt; &lt;p&gt;Also take a look at my [[https://github.com/phuhl/notify-send.py][notify-send.py]] which imitates notify-send (libnotify) but also is able to replace notifications.&lt;/p&gt; &lt;/b&gt;&lt;/i&gt;&lt;/u&gt;</summary>
  </entry>
  <entry>
    <title>Harmos274/Wolfram</title>
    <updated>2023-03-08T01:37:19Z</updated>
    <id>tag:github.com,2023-03-08:/Harmos274/Wolfram</id>
    <link href="https://github.com/Harmos274/Wolfram" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Epitech project : Functional Programming&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Wolfram&lt;/h1&gt; &#xA;&lt;p&gt;Wolfram&#39;s elementary cellular automaton in the terminal. &lt;br&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Build&lt;/h2&gt; &#xA;&lt;h3&gt;Makefile&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$&amp;gt; git clone https://github.com/Harmos274/Wolfram&#xA;$&amp;gt; cd Wolfram&#xA;$&amp;gt; make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;How to use it ?&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$&amp;gt; ./wolfram --rule [30 | 90 | 110] [ARGUMENTS]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Argument&lt;/th&gt; &#xA;   &lt;th&gt;Default Value&lt;/th&gt; &#xA;   &lt;th&gt;Explanation&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;--start&lt;/td&gt; &#xA;   &lt;td&gt;0&lt;/td&gt; &#xA;   &lt;td&gt;Select the first line to be displayed&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;--lines&lt;/td&gt; &#xA;   &lt;td&gt;1000000&lt;/td&gt; &#xA;   &lt;td&gt;The number of lines to be displayed.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;--window&lt;/td&gt; &#xA;   &lt;td&gt;80&lt;/td&gt; &#xA;   &lt;td&gt;The width of every lines.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt;</summary>
  </entry>
</feed>