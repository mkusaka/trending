<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Haskell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-09-21T01:29:17Z</updated>
  <subtitle>Daily Trending of Haskell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>jfischoff/lagrangian</title>
    <updated>2023-09-21T01:29:17Z</updated>
    <id>tag:github.com,2023-09-21:/jfischoff/lagrangian</id>
    <link href="https://github.com/jfischoff/lagrangian" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Solve lagrangian multiplier problems&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>rzk-lang/rzk</title>
    <updated>2023-09-21T01:29:17Z</updated>
    <id>tag:github.com,2023-09-21:/rzk-lang/rzk</id>
    <link href="https://github.com/rzk-lang/rzk" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An experimental proof assistant based on a type theory for synthetic ∞-categories.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;rzk&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://rzk-lang.github.io/rzk/&#34;&gt;&lt;img src=&#34;https://shields.io/badge/MkDocs-documentation-informational&#34; alt=&#34;MkDocs&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://rzk-lang.github.io/rzk/haddock/index.html&#34;&gt;&lt;img src=&#34;https://shields.io/badge/Haddock-documentation-informational&#34; alt=&#34;Haddock&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/rzk-lang/rzk/actions/workflows/ghcjs.yml&#34;&gt;&lt;img src=&#34;https://github.com/rzk-lang/rzk/actions/workflows/ghcjs.yml/badge.svg?branch=main&#34; alt=&#34;GHCJS build&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;An experimental proof assistant for synthetic ∞-categories.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://rzk-lang.github.io/rzk/&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/rzk-lang/rzk/develop/images/split-demo-render.png&#34; alt=&#34;Early prototype demo.&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;About this project&lt;/h2&gt; &#xA;&lt;p&gt;This project has started with the idea of bringing Riehl and Shulman&#39;s 2017 paper [1] to &#34;life&#34; by implementing a proof assistant based on their type theory with shapes. Currently an early prototype with an &lt;a href=&#34;https://rzk-lang.github.io/rzk/&#34;&gt;online playground&lt;/a&gt; is available. The current implementation is capable of checking various formalisations. Perhaps, the largest formalisations are available in two related projects: &lt;a href=&#34;https://github.com/fizruk/sHoTT&#34;&gt;https://github.com/fizruk/sHoTT&lt;/a&gt; and &lt;a href=&#34;https://github.com/emilyriehl/yoneda&#34;&gt;https://github.com/emilyriehl/yoneda&lt;/a&gt;. &lt;code&gt;sHoTT&lt;/code&gt; project (originally a fork of the yoneda project) aims to cover more formalisations in simplicial HoTT and ∞-categories, while &lt;code&gt;yoneda&lt;/code&gt; project aims to compare different formalisations of the Yoneda lemma.&lt;/p&gt; &#xA;&lt;p&gt;Internally, &lt;code&gt;rzk&lt;/code&gt; uses a version of second-order abstract syntax allowing relatively straightforward handling of binders (such as lambda abstraction). In the future, &lt;code&gt;rzk&lt;/code&gt; aims to support dependent type inference relying on E-unification for second-order abstract syntax [2]. Using such representation is motivated by automatic handling of binders and easily automated boilerplate code. The idea is that this should keep the implementation of &lt;code&gt;rzk&lt;/code&gt; relatively small and less error-prone than some of the existing approaches to implementation of dependent type checkers.&lt;/p&gt; &#xA;&lt;p&gt;An important part of &lt;code&gt;rzk&lt;/code&gt; is a tope layer solver, which is essentially a theorem prover for a part of the type theory. A related project, dedicated just to that part is available at &lt;a href=&#34;https://github.com/fizruk/simple-topes&#34;&gt;https://github.com/fizruk/simple-topes&lt;/a&gt;. &lt;code&gt;simple-topes&lt;/code&gt; supports used-defined cubes, topes, and tope layer axioms. Once stable, &lt;code&gt;simple-topes&lt;/code&gt; will be merged into &lt;code&gt;rzk&lt;/code&gt;, expanding the proof assistant to the type theory with shapes, allowing formalisations for (variants of) cubical, globular, and other geometric versions of HoTT.&lt;/p&gt; &#xA;&lt;h2&gt;How to use &lt;code&gt;rzk&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;For relatively small single-file formalisations, you can use the online playground at &lt;a href=&#34;https://rzk-lang.github.io/rzk/playground.html&#34;&gt;https://rzk-lang.github.io/rzk/playground.html&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;However, for larger and multi-file formalisations you should install a version of &lt;code&gt;rzk&lt;/code&gt; locally:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;You can install the latest &#34;stable&#34; version of &lt;code&gt;rzk&lt;/code&gt; from Hackage:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cabal install rzk&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;You can install the latest &#34;development&#34; version of &lt;code&gt;rzk&lt;/code&gt; from the &lt;a href=&#34;https://github.com/rzk-lang/rzk/tree/develop&#34;&gt;&lt;code&gt;develop&lt;/code&gt; branch&lt;/a&gt; of this repository:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone https://github.com/rzk-lang/rzk.git&#xA;cd rzk&#xA;git checkout develop&#xA;stack build &amp;amp;&amp;amp; stack install&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;VS Code&lt;/h3&gt; &#xA;&lt;p&gt;There exists a &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=NikolaiKudasovfizruk.rzk-1-experimental-highlighting&#34;&gt;VS Code extension for &lt;code&gt;rzk&lt;/code&gt;&lt;/a&gt; available on the Marketplace. The extension supports basic syntax highlighting, but more features may come in the future.&lt;/p&gt; &#xA;&lt;h3&gt;Checking&lt;/h3&gt; &#xA;&lt;p&gt;To check a multi-file project, you need to call &lt;code&gt;rzk typecheck&lt;/code&gt; specifying the files &lt;em&gt;in correct order&lt;/em&gt;, e.g.:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;rzk typecheck first.rzk second.rzk third.rzk&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A proper support for inter-file dependencies will be implemented in the future. Until then, it is recommented to start names of files with a number, ensuring correct order when using a wildcard (&lt;code&gt;*&lt;/code&gt;). For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;.&#xA;├── 0-common.md&#xA;├── 1-paths.md&#xA;├── 2-contractible.md&#xA;├── 3-homotopies.md&#xA;├── 4-equivalences.md&#xA;├── 5-sigma.md&#xA;└── 6-trivial-fibrations.md&#xA;&#xA;1 directory, 7 files&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Inside of such directory, you can run &lt;code&gt;rzk typecheck&lt;/code&gt; on all files using wildcards:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;rzk typecheck *-*.md&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;How to contribute to &lt;code&gt;rzk&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;h3&gt;Building the Documentation Locally&lt;/h3&gt; &#xA;&lt;p&gt;First, you need to install &lt;a href=&#34;https://www.mkdocs.org/getting-started/&#34;&gt;MkDocs&lt;/a&gt; and &lt;code&gt;mdx_math&lt;/code&gt; Markdown extension (to enable LaTeX):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;pip install python-markdown-math&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now, you can build and serve the documentation locally by running&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;mkdocs serve --config-file docs/mkdocs.yml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The (locally built) documentation should be available at &lt;a href=&#34;http://127.0.0.1:8000&#34;&gt;http://127.0.0.1:8000&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The pages of the documentation are the &lt;code&gt;*.md&lt;/code&gt; files in &lt;a href=&#34;https://raw.githubusercontent.com/rzk-lang/rzk/develop/docs/docs&#34;&gt;docs/docs&lt;/a&gt; directory and its subdirectories. To add a new page, you can create a new &lt;code&gt;*.md&lt;/code&gt; file and add it to the navigation by modifying &lt;a href=&#34;https://raw.githubusercontent.com/rzk-lang/rzk/develop/docs/mkdocs.yml&#34;&gt;docs/mkdocs.yml&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Development&lt;/h3&gt; &#xA;&lt;p&gt;The project is developed with both Stack and Nix (for GHCJS version).&lt;/p&gt; &#xA;&lt;h4&gt;Building with GHC&lt;/h4&gt; &#xA;&lt;p&gt;For quick local development and testing it is recommended to work with a GHC version, using &lt;a href=&#34;https://docs.haskellstack.org/en/stable/README/&#34;&gt;Stack tool&lt;/a&gt;. Clone this project and simply run &lt;code&gt;stack build&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone git@github.com:rzk-lang/rzk.git&#xA;cd rzk&#xA;stack build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The build provides an executable &lt;code&gt;rzk&lt;/code&gt; which can be used to typecheck files:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;stack exec -- rzk typecheck FILE&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Building with GHCJS&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;try-rzk&lt;/code&gt; package is designed to be compiled using GHCJS for an in-browser version of the proof assistant. To build this package you need to use Nix. It is recommended that you use Cachix to avoid recompiling lots of dependencies:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Install Nix&#xA;curl https://nixos.org/nix/install | sh&#xA;# (optionally) Install Cachix&#xA;nix-env -iA cachix -f https://cachix.org/api/v1/install&#xA;# (optionally) Use cached miso from Cachix&#xA;cachix use miso-haskell&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Clone the repository, enter &lt;code&gt;try-rzk&lt;/code&gt; directory and use &lt;code&gt;nix-build&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone git@github.com:rzk-lang/rzk.git&#xA;cd rzk/try-rzk&#xA;nix-build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now open &lt;code&gt;playground.html&lt;/code&gt; to see the result. Note that if local GHCJS build is unavailable, &lt;code&gt;playground.html&lt;/code&gt; will use the &lt;a href=&#34;https://rzk-lang.github.io/rzk/v0.1.0/result/bin/try-rzk.jsexe/all.js&#34;&gt;JS file from GitHub Pages&lt;/a&gt; as a fallback.&lt;/p&gt; &#xA;&lt;h5&gt;Flake&lt;/h5&gt; &#xA;&lt;p&gt;The flake in this repository allows to build &lt;code&gt;try-rzk&lt;/code&gt; incrementally and reproducibly.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Install &lt;code&gt;Nix&lt;/code&gt; via single-user &lt;a href=&#34;https://nixos.org/download.html#download-nix&#34;&gt;installation&lt;/a&gt;:&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;Run script&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sh &amp;lt;(curl -L https://nixos.org/nix/install) --no-daemon&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;Permanently &lt;a href=&#34;https://nixos.wiki/wiki/Flakes#Permanent&#34;&gt;enable&lt;/a&gt; flakes&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Enter the &lt;code&gt;devShell&lt;/code&gt; with &lt;code&gt;GHC&lt;/code&gt; (not &lt;code&gt;GHCJS&lt;/code&gt;). Answer &lt;code&gt;y&lt;/code&gt; to &lt;code&gt;Nix&lt;/code&gt; prompts to use binary caches.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;nix develop&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The shell provides &lt;code&gt;ghc&lt;/code&gt;, &lt;code&gt;haskell-language-server&lt;/code&gt;, &lt;code&gt;cabal-install&lt;/code&gt;, &lt;code&gt;hpack&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;(Optionally) Install &lt;a href=&#34;https://direnv.net/&#34;&gt;direnv&lt;/a&gt; to start the &lt;code&gt;devShell&lt;/code&gt; when you enter the repository directory.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Build &lt;code&gt;rzk&lt;/code&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cabal build&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Enter the &lt;code&gt;devShell&lt;/code&gt; with &lt;code&gt;GHCJS&lt;/code&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;nix develop .#ghcjs&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Build &lt;code&gt;try-rzk&lt;/code&gt;. This may require ~10 GB of RAM.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cabal build --ghcjs&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;(Optionally) Build &lt;code&gt;rzk&lt;/code&gt; via &lt;code&gt;Nix&lt;/code&gt;. The resulting executable will be in &lt;code&gt;result/bin/rzk&lt;/code&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;nix build .#rzk&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;(Optionally) Run &lt;code&gt;rzk&lt;/code&gt; via &lt;code&gt;Nix&lt;/code&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;nix run .#rzk&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;(Optionally) Build &lt;code&gt;try-rzk&lt;/code&gt; via &lt;code&gt;Nix&lt;/code&gt;. This may require ~10 GB of RAM. The resulting executable will be in &lt;code&gt;try-rzk/result/bin/try-rzk.jsexe&lt;/code&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;nix build .#try-rzk --out-link try-rzk/result&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Open the app in a browser.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;firefox try-rzk/playground.html&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;References&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Emily Riehl &amp;amp; Michael Shulman. A type theory for synthetic ∞-categories. Higher Structures 1(1), 147-224. 2017. &lt;a href=&#34;https://arxiv.org/abs/1705.07442&#34;&gt;https://arxiv.org/abs/1705.07442&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Nikolai Kudasov. E-unification for Second-Order Abstract Syntax. 2023. &lt;a href=&#34;https://arxiv.org/abs/2302.05815&#34;&gt;https://arxiv.org/abs/2302.05815&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
  <entry>
    <title>redelmann/e-zimod-server</title>
    <updated>2023-09-21T01:29:17Z</updated>
    <id>tag:github.com,2023-09-21:/redelmann/e-zimod-server</id>
    <link href="https://github.com/redelmann/e-zimod-server" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Modeling and Simulation of Collaborative Energy Networks&lt;/h1&gt;</summary>
  </entry>
</feed>