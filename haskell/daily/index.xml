<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Haskell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-30T01:43:04Z</updated>
  <subtitle>Daily Trending of Haskell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>input-output-hk/plutus-pioneer-program</title>
    <updated>2022-06-30T01:43:04Z</updated>
    <id>tag:github.com,2022-06-30:/input-output-hk/plutus-pioneer-program</id>
    <link href="https://github.com/input-output-hk/plutus-pioneer-program" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Plutus Pioneer Program&lt;/h1&gt; &#xA;&lt;h2&gt;Lectures&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://www.youtube.com/playlist?list=PLNEK_Ejlx3x2nLM4fAck2JS6KhFQlXq2N&#34;&gt;Lecture #1&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/X80uNXenWF4&#34;&gt;Part 1 - Welcome and Introduction&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/bfofA4MM0QE&#34;&gt;Part 2 - The EUTxO-Model&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/zPaDp4R9X7o&#34;&gt;Part 3 - Building the Example Code&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/Bj6bqRGT1L0&#34;&gt;Part 4 - Auction Contract in the EUTxO-Model&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/K61Si6iQ-Js&#34;&gt;Part 5 - Auction Contract on the Playground&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/tfanOE2ARho&#34;&gt;Part 6 - Homework&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://www.youtube.com/playlist?list=PLNEK_Ejlx3x0mhPmOjPSHZPtTFpfJo3Nd&#34;&gt;Lecture #2&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/BEr7lcCPjnA&#34;&gt;Part 1 - Triggering Change&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/xgnmMl-eIIM&#34;&gt;Part 2 - Low Level, Untyped Validation Scripts&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/HoB_PqeZPNc&#34;&gt;Part 3 - High Level, Typed Validation Scripts&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/V5P2gKHos48&#34;&gt;Part 4 - Summary&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/_r-EpXzQGKo&#34;&gt;Part 5 - Homework&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://www.youtube.com/playlist?list=PLNEK_Ejlx3x2zxcfoVGARFExzOHwXFCCL&#34;&gt;Lecture #3&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/sLMhsqiWeGU&#34;&gt;Part 1 - Configuring Playground Time Out&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/B66xLrGXwmw&#34;&gt;Part 2 - Script Contexts&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/mf06ll-4j2w&#34;&gt;Part 3 - Handling Time&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/ae7U_yKIQ0Y&#34;&gt;Part 4 - A Vesting Example&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/XqFILXV_ACM&#34;&gt;Part 5 - Parameterized Contracts&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/ABtffZPoUqU&#34;&gt;Part 6 - Deploying to the Cardano Testnet&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/GGUT2O_0urQ&#34;&gt;Part 7 - Homework&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/uyaPtayBRb8&#34;&gt;Part 8 - Summary&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://www.youtube.com/playlist?list=PLNEK_Ejlx3x230-g-U02issX5BiWAgmSi&#34;&gt;Lecture #4&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/gxMW9uXTEj4&#34;&gt;Part 1 - Introduction&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/f2w-MB3X4a0&#34;&gt;Part 2 - Monads&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/qoUfgaHs1CI&#34;&gt;Part 3 - The EmulatorTrace Monad&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/yKX5Ce8Y0VQ&#34;&gt;Part 4 - The Contract Monad&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/sxRLzR0jdiY&#34;&gt;Part 5 - Homework &amp;amp; Summary&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://www.youtube.com/playlist?list=PLNEK_Ejlx3x0G8V8CDBnRDZ86POVsrfzw&#34;&gt;Lecture #5&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/mGPqi9m0EPw&#34;&gt;Part 1 - Start&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/4iNTgjovMRg&#34;&gt;Part 2 - Values&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/DBUdFsZpW7A&#34;&gt;Part 3 - A Simple Minting Policy&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/4SROikF8JwE&#34;&gt;Part 4 - A More Realistic Minting Policy&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/2lKN0ZL_EQU&#34;&gt;Part 5 - NFT&#39;s&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/j7yT2OqGY6U&#34;&gt;Part 6 - Homework&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://www.youtube.com/playlist?list=PLNEK_Ejlx3x2sBWXHdFBRgkzPF6N-1LVi&#34;&gt;Lecture #6&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/TfWKxdli4eI&#34;&gt;Part 1 - Introduction&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/w7_27sQIqkY&#34;&gt;Part 2 - The Minting Policy&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/kfvzrC9J02k&#34;&gt;Part 3 - Minting with the CLI&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/tW7uoY16gC0&#34;&gt;Part 4 - Deployment Scenarios&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/JgNhY_uuuGA&#34;&gt;Part 5 - The Contracts&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/X6AyZIZ0vaE&#34;&gt;Part 6 - Minting with the PAB&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/KmNOFltlRiA&#34;&gt;Part 7 - Summary&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://www.youtube.com/playlist?list=PLNEK_Ejlx3x3Y5xvAsVqq46S9xkHopSGU&#34;&gt;Lecture #7&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/CLOHdIGgy90&#34;&gt;Part 1 - Introduction&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/JXKf1JwVAOE&#34;&gt;Part 2 - Commit Schemes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/yczHkTzDnpk&#34;&gt;Part 3 - Implementation without State Machines&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/7jiaQRA-wKI&#34;&gt;Part 4 - State Machines&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/J0rD_hmsMVo&#34;&gt;Part 5 - Homework&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://www.youtube.com/playlist?list=PLNEK_Ejlx3x0UIixvEQG2Y2mmFL6__pEJ&#34;&gt;Lecture #8&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/mqHifIPefus&#34;&gt;Part 1 - Introduction&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/y5O58-NpnJ4&#34;&gt;Part 2 - Another State Machine Example: Token Sale&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/LG9O8YbBXyM&#34;&gt;Part 3 - Automatic Testing using Emulator Traces&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/wJQnQtLxi2E&#34;&gt;Part 4 - Test Coverage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/naLA0OMIF1Q&#34;&gt;Part 5 - Interlude: Optics&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/9mrYT9UXLO8&#34;&gt;Part 6 - Property-Based Testing with QuickCheck&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/49oAwySp6Ys&#34;&gt;Part 7 - Property-Based Testing of Plutus Contracts&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/u2Plwc3Gkrs&#34;&gt;Part 8 - Homework&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://www.youtube.com/playlist?list=PLNEK_Ejlx3x2zSFnzWA4Gbr_AVTz-4rzf&#34;&gt;Lecture #9&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/433VbouC-30&#34;&gt;Part 1 - Introduction&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/ce_Yv8BlW7c&#34;&gt;Part 2 - Simon Thompson: Marlowe Overview&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/hd-E5DCN8uc&#34;&gt;Part 3 - Alexander Nemish: Marlowe in Plutus&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/Vx_ygegrY78&#34;&gt;Part 4 - Brian Bush: The Marlowe CLI&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/l0LXjh8J-go&#34;&gt;Part 5 - Marlowe Playground Demo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/iYdyUaq_enA&#34;&gt;Part 6 - Homework&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://www.youtube.com/playlist?list=PLNEK_Ejlx3x3EV7FKhlogJgS27dWgwI9B&#34;&gt;Lecture #10&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/AnID8hn68DA&#34;&gt;Part 1 - Introduction&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/xhEMEH0C2XU&#34;&gt;Part 2 - The Private Testnet&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/kFi-7HyBN-s&#34;&gt;Part 3 - Plutus &amp;amp; Staking&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/5cBu4J5RRZ4&#34;&gt;Part 4 - Trying it on the Testnet&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/9oWmDXoxtmI&#34;&gt;Part 5 - Conclusion&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Code Examples&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Lecture #1: &lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus-pioneer-program/main/code/week01&#34;&gt;English Auction&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Lecture #2: &lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus-pioneer-program/main/code/week02&#34;&gt;Simple Validation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Lecture #3: &lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus-pioneer-program/main/code/week03&#34;&gt;Script Contexts &amp;amp; Parameterized Contracts&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Lecture #4: &lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus-pioneer-program/main/code/week04&#34;&gt;Monads, Traces &amp;amp; Contracts&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Lecture #5: &lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus-pioneer-program/main/code/week05&#34;&gt;Native Tokens&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Lecture #6: &lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus-pioneer-program/main/code/week06&#34;&gt;Deployment&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Lecture #7: &lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus-pioneer-program/main/code/week07&#34;&gt;State Machines&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Lecture #8: &lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus-pioneer-program/main/code/week08&#34;&gt;Testing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Lecture #9: &lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus-pioneer-program/main/code/week09&#34;&gt;Marlowe&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Lecture #10: &lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus-pioneer-program/main/code/week10&#34;&gt;Staking&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Exercises&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Week #1&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Clone the &lt;a href=&#34;https://github.com/input-output-hk/plutus-apps&#34;&gt;The Plutus-Apps repository&lt;/a&gt;, check out the correct commit as specified in &lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus-pioneer-program/main/code/week01/cabal.project&#34;&gt;cabal.project&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Install NixOS cross-referencing the following resources. &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://nixos.org/download.html&#34;&gt;https://nixos.org/download.html&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://docs.plutus-community.com&#34;&gt;https://docs.plutus-community.com&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;A few resources to understand the what and why regarding NixOS &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://nixos.org/manual/nix/stable&#34;&gt;https://nixos.org/manual/nix/stable&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://serokell.io/blog/what-is-nix&#34;&gt;https://serokell.io/blog/what-is-nix&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Set-up IOHK binary caches &lt;a href=&#34;https://github.com/input-output-hk/plutus#iohk-binary-cache&#34;&gt;How to set up the IOHK binary caches&lt;/a&gt;. &#34;If you do not do this, you will end up building GHC, which takes several hours. If you find yourself building GHC, &lt;em&gt;stop&lt;/em&gt; and fix the cache.&#34;&lt;/li&gt; &#xA;   &lt;li&gt;Enter a &lt;code&gt;nix-shell&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Build the &lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus-pioneer-program/main/code/week01&#34;&gt;English Auction&lt;/a&gt; contract with &lt;code&gt;cabal build&lt;/code&gt; (you may need to run &lt;code&gt;cabal update&lt;/code&gt; first).&lt;/li&gt; &#xA;   &lt;li&gt;Go to the &lt;code&gt;plutus-playground-client&lt;/code&gt; folder in the &lt;code&gt;plutus-apps&lt;/code&gt; repository.&lt;/li&gt; &#xA;   &lt;li&gt;Start the Playground server with &lt;code&gt;plutus-playground-server&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Start the Playground client (in another &lt;code&gt;nix-shell&lt;/code&gt;) with &lt;code&gt;npm start&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Copy-paste the auction contract into the Playground editor, do not forget to remove the module header.&lt;/li&gt; &#xA;   &lt;li&gt;Compile.&lt;/li&gt; &#xA;   &lt;li&gt;Simulate various auction scenarios.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Week #2&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Fix and complete the code in the &lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus-pioneer-program/main/code/week02/src/Week02/Homework1.hs&#34;&gt;Homework1&lt;/a&gt; module.&lt;/li&gt; &#xA;   &lt;li&gt;Fix and complete the code in the &lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus-pioneer-program/main/code/week02/src/Week02/Homework2.hs&#34;&gt;Homework2&lt;/a&gt; module.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Week #3&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Fix and complete the code in the &lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus-pioneer-program/main/code/week03/src/Week03/Homework1.hs&#34;&gt;Homework1&lt;/a&gt; module.&lt;/li&gt; &#xA;   &lt;li&gt;Fix and complete the code in the &lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus-pioneer-program/main/code/week03/src/Week03/Homework2.hs&#34;&gt;Homework2&lt;/a&gt; module.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Week #4&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Implement function &lt;code&gt;payTrace&lt;/code&gt; in the &lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus-pioneer-program/main/code/week04/src/Week04/Homework.hs&#34;&gt;Homework&lt;/a&gt; module.&lt;/li&gt; &#xA;   &lt;li&gt;Handle exceptions thrown by &lt;code&gt;submitTx&lt;/code&gt; in function &lt;code&gt;payContract&lt;/code&gt; in the same module.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Week #5&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Implement a Mary-era-style minting policy in the &lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus-pioneer-program/main/code/week05/src/Week05/Homework1.hs&#34;&gt;Homework1&lt;/a&gt; module.&lt;/li&gt; &#xA;   &lt;li&gt;Fix the token name to the empty ByteString in the NFT contract in the &lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus-pioneer-program/main/code/week05/src/Week05/Homework2.hs&#34;&gt;Homework2&lt;/a&gt; module.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Week #6&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Try to replicate what is done in the lecture - minting tokens with the &lt;code&gt;cardano-cli&lt;/code&gt; and the PAB.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Week #7&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Implement the game of &#34;Rock, Paper, Scissors&#34; using state machines.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Week #8&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Add a new operation close to the TokenSale-contract that allows the seller to close the contract and retrieve all remaining funds.&lt;/li&gt; &#xA;   &lt;li&gt;Modify the tests accordingly.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Week #9m&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Modify the example Marlowe contract, so that Charlie must put down twice the deposit in the very beginning, which gets split between Alice and Bob if Charlie refuses to make his choice.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Some Plutus Modules&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Ledger.Scripts&lt;/code&gt;, contains functions related to untyped Plutus scripts.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Ledger.Typed.Scripts&lt;/code&gt;, contains functions related to typed Plutus scripts.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Plutus.Contract&lt;/code&gt;, contains definitions and functions for writing offchain code.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Plutus.Contract.StateMachine&lt;/code&gt;, contains definitions and functions for working with &lt;em&gt;state machines&lt;/em&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Plutus.Contract.Test&lt;/code&gt;, contains support for automatic tests.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Plutus.Contract.Test.ContractModel&lt;/code&gt;, contains support for automatic property-based tests using &lt;code&gt;QuickCheck&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Plutus.V1.Ledger.Ada&lt;/code&gt;, contains definitions and functions related to &lt;em&gt;ADA&lt;/em&gt;-values.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Plutus.V1.Ledger.Interval&lt;/code&gt;, contains the definition of intervals and functions for working with them.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Plutus.V1.Ledger.Value&lt;/code&gt;, contains definitions and functions related to &lt;em&gt;values&lt;/em&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Plutus.V1.Ledger.Time&lt;/code&gt;, contains time-related types and functions.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;PlutusTx&lt;/code&gt;, contains important types like &lt;code&gt;Data&lt;/code&gt; and &lt;code&gt;BuiltinData&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;PlutusTx.IsData.Class&lt;/code&gt;, contains the &lt;code&gt;ToData&lt;/code&gt; and &lt;code&gt;FromData&lt;/code&gt; classes and related functions.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Wallet.Emulator&lt;/code&gt;, contains types and functions for dealing with wallets.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Additional Resources&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/input-output-hk/plutus&#34;&gt;The Plutus repository&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/input-output-hk/plutus-apps&#34;&gt;The Plutus-Apps repository&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Learn You a Haskell for Great Good: &lt;a href=&#34;http://learnyouahaskell.com/&#34;&gt;original&lt;/a&gt;, &lt;a href=&#34;https://hansruec.github.io/learn-you-a-haskell-remastered/01-first-things-first.html&#34;&gt;remastered&lt;/a&gt; and &lt;a href=&#34;https://hub.gke2.mybinder.org/user/jamesdbrock-lea-askell-notebook-24dgdx7w/lab/tree/learn_you_a_haskell/00-preface.ipynb&#34;&gt;interactive notebook&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/playlist?list=PLJ3w5xyG4JWmBVIigNBytJhvSSfZZzfTm&#34;&gt;Haskell &amp;amp; Cryptocurrencies course Mongolia&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/woofpool/cardano-private-testnet-setup&#34;&gt;Private Testnet Setup&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>nabilhassein/scheme-interpreter</title>
    <updated>2022-06-30T01:43:04Z</updated>
    <id>tag:github.com,2022-06-30:/nabilhassein/scheme-interpreter</id>
    <link href="https://github.com/nabilhassein/scheme-interpreter" rel="alternate"></link>
    <summary type="html">&lt;p&gt;It&#39;s going to take me rather longer than 48 hours, but...&lt;/p&gt;&lt;hr&gt;&lt;p&gt;Eventually, a mostly R5RS compliant Scheme, written in Haskell. Mostly following &lt;a href=&#34;http://en.wikibooks.org/wiki/Write_Yourself_a_Scheme_in_48_Hours&#34;&gt;http://en.wikibooks.org/wiki/Write_Yourself_a_Scheme_in_48_Hours&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>swarm-game/swarm</title>
    <updated>2022-06-30T01:43:04Z</updated>
    <id>tag:github.com,2022-06-30:/swarm-game/swarm</id>
    <link href="https://github.com/swarm-game/swarm" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Resource gathering + programming game&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Swarm&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/swarm-game/swarm/actions&#34;&gt;&lt;img src=&#34;https://github.com/swarm-game/swarm/actions/workflows/haskell-ci.yml/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/swarm-game/swarm/main/CODE_OF_CONDUCT.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Contributor%20Covenant-v2.0%20adopted-ff69b4.svg?sanitize=true&#34; alt=&#34;Contributor Covenant&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://contrib.rocks/image?repo=swarm-game/swarm&#34; alt=&#34;GitHub Contributors&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Swarm is a 2D programming and resource gathering game. Program your robots to explore the world and collect resources, which in turn allows you to build upgraded robots that can run more interesting and complex programs.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/swarm-game/swarm/main/images/tutorial/log.png&#34; alt=&#34;World 0 after scanning a tree and making a log.&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The implementation is still in an early stage, but these are some of the (planned) features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Practically infinite 2D procedurally generated worlds&lt;/li&gt; &#xA; &lt;li&gt;Simple yet powerful programming language based on the polymorphic lambda calculus + recursion, with a command monad for describing first-class imperative actions&lt;/li&gt; &#xA; &lt;li&gt;Editor support with LSP and highlighting&lt;/li&gt; &#xA; &lt;li&gt;In-game tutorial&lt;/li&gt; &#xA; &lt;li&gt;Multiple game modes: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;In Classic mode, you start with the ability to produce only very basic, limited robots; collecting resources allows you to bootstrap your way into programming more sophisticated robots that can explore more of the world, collect more resources, etc.&lt;/li&gt; &#xA;   &lt;li&gt;Creative mode places no restrictions: program robots to your heart&#39;s content using whatever language features you want, without worrying about collecting resources.&lt;/li&gt; &#xA;   &lt;li&gt;There are also challenge scenarios where you attempt to program robots in order to solve pre-designed puzzles or challenges.&lt;/li&gt; &#xA;   &lt;li&gt;Future versions might also have multiplayer modes, with co-op or PvP play over a network...?&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Installing and Playing&lt;/h1&gt; &#xA;&lt;p&gt;Warning: Swarm is still in an early stage; it&#39;s missing many of the planned features, there is no winning condition, and the gameplay is not very deep yet. But you can program cute little robots, and hey, that&#39;s all that really matters, right?&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: Swarm requires a POSIX-style environment that supports &lt;code&gt;terminfo&lt;/code&gt;. On Linux and OSX, the below instructions should work natively. On Windows, see &lt;a href=&#34;https://github.com/swarm-game/swarm/issues/53&#34;&gt;the comments on this GitHub issue&lt;/a&gt; for instructions getting it to work under the Windows Subsystem for Linux.&lt;/p&gt; &#xA;&lt;p&gt;The recommended way to install Swarm at the moment is as follows:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Clone the Swarm repository, e.g.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;git clone https://github.com/swarm-game/swarm.git&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you don&#39;t already have the &lt;code&gt;stack&lt;/code&gt; tool:&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt; &lt;p&gt;Get the &lt;a href=&#34;https://www.haskell.org/ghcup/&#34;&gt;&lt;code&gt;ghcup&lt;/code&gt; tool&lt;/a&gt;, a handy one-stop utility for managing all the different pieces of a Haskell toolchain.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Use &lt;code&gt;ghcup&lt;/code&gt; to install &lt;code&gt;stack&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;ghcup install stack&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;It is recommended that you use a relatively large terminal window (&lt;em&gt;e.g.&lt;/em&gt; 132 columns x 43 rows or larger).&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;To find out the size of your terminal, you can type &lt;code&gt;stty size&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Now use &lt;code&gt;stack&lt;/code&gt; to build and run Swarm:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;cd /path/to/the/swarm/repo&#xA;stack run&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Go get a snack while &lt;code&gt;stack&lt;/code&gt; downloads a Haskell compiler and all of Swarm&#39;s dependencies.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Have fun! At the moment, you probably want to &lt;a href=&#34;https://raw.githubusercontent.com/swarm-game/swarm/main/TUTORIAL.md&#34;&gt;take a look at the tutorial&lt;/a&gt; to help get you started. Eventually there will be an in-game tutorial.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;Programming swarm&lt;/h1&gt; &#xA;&lt;p&gt;Your base has a dictionary to store definitions, like this one:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;def moveUntil : cmd bool -&amp;gt; cmd () = \predicate.&#xA;  res &amp;lt;- predicate;&#xA;  if res {&#xA;    noop&#xA;  } {&#xA;    moveUntil predicate&#xA;  }&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;sup&gt;The indentation is not required but &lt;code&gt;;&lt;/code&gt; is, as it is similar to Haskell &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; - that is the command monad, which imperative programmers can ignore. &lt;span&gt;😉&lt;/span&gt; &lt;/sup&gt;&lt;/p&gt; &#xA;&lt;p&gt;This allows you to program robots to perform complicated tasks.&lt;/p&gt; &#xA;&lt;p&gt;While you can write commands and definitions like the one above in the REPL, swarm also has a editor support with highlighting and LSP integration:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/swarm-game/swarm/main/images/editor.png&#34; alt=&#34;Editor with problem popup&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;See the &lt;code&gt;editors&lt;/code&gt; folder for details on how to configure your editor.&lt;/p&gt; &#xA;&lt;h1&gt;Community&lt;/h1&gt; &#xA;&lt;p&gt;Check out the &lt;a href=&#34;https://raw.githubusercontent.com/swarm-game/swarm/main/COMMUNITY.md&#34;&gt;COMMUNITY&lt;/a&gt; page for ways to connect with others in the community.&lt;/p&gt; &#xA;&lt;p&gt;If you want to contribute, you&#39;re most welcome! There are &lt;em&gt;lots&lt;/em&gt; of ways to contribute, regardless of your Haskell background. For example, even someone with no Haskell experience whatsoever could still help with &lt;em&gt;e.g.&lt;/em&gt; game design, playtesting, and level design for challenge mode. Check out the &lt;a href=&#34;https://raw.githubusercontent.com/swarm-game/swarm/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTING&lt;/a&gt; file for more specific information about how to contribute.&lt;/p&gt;</summary>
  </entry>
</feed>