<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Haskell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-10-30T01:36:10Z</updated>
  <subtitle>Daily Trending of Haskell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>def-/time.gif</title>
    <updated>2022-10-30T01:36:10Z</updated>
    <id>tag:github.com,2022-10-30:/def-/time.gif</id>
    <link href="https://github.com/def-/time.gif" rel="alternate"></link>
    <summary type="html">&lt;p&gt;GIF that always shows the current time in UTC&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;time.gif&lt;/h1&gt; &#xA;&lt;p&gt;GIF that always shows the current time in UTC&lt;/p&gt; &#xA;&lt;p&gt;Demo and blog post: &lt;a href=&#34;https://hookrace.net/blog/time.gif&#34;&gt;https://hookrace.net/blog/time.gif&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Compile with -threaded, otherwise GHC networking has problems with more than 1024 open connections.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Liqwid-Labs/plutarch-unit</title>
    <updated>2022-10-30T01:36:10Z</updated>
    <id>tag:github.com,2022-10-30:/Liqwid-Labs/plutarch-unit</id>
    <link href="https://github.com/Liqwid-Labs/plutarch-unit" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Unit tests for Plutarch&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;plutarch-unit&lt;/h1&gt; &#xA;&lt;p&gt;Unit tests for Plutarch&lt;/p&gt; &#xA;&lt;p&gt;Public discussion and assistance can be found on &lt;a href=&#34;https://discord.gg/yGkjxrYueB&#34;&gt;discord&lt;/a&gt; @ #liqwid-libs&lt;/p&gt; &#xA;&lt;p&gt;Tickets and project management information can be found on &lt;a href=&#34;https://www.notion.so/liqwid&#34;&gt;Notion&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;What is this?&lt;/h2&gt; &#xA;&lt;p&gt;A helper library to write Plutarch-oriented unit tests using &lt;code&gt;tasty&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;What &lt;em&gt;exactly&lt;/em&gt; does this do for me?&lt;/h2&gt; &#xA;&lt;p&gt;You can use this library to write &lt;code&gt;tasty&lt;/code&gt; test trees without a dependency on &lt;code&gt;hspec&lt;/code&gt;, &lt;code&gt;hunit&lt;/code&gt;, or similar. We believe that &lt;code&gt;tasty&lt;/code&gt; is more extensible and better maintained than the alternatives.&lt;/p&gt; &#xA;&lt;p&gt;This library currently provides interfaces to write positive and negative annotated test cases for scripts (in general), minting policies, and validators.&lt;/p&gt; &#xA;&lt;h2&gt;How do I use this?&lt;/h2&gt; &#xA;&lt;p&gt;This library contains a single module with self-explanatory functions, provided that users know how to write &lt;code&gt;tasty&lt;/code&gt; code (which we assume). A basic example follows below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-hs&#34;&gt;tests:: TestTree&#xA;tests =&#xA;  testGroup&#xA;    &#34;My first tests&#34;&#xA;    [ test1&#xA;    , test2&#xA;    , test3&#xA;    ]&#xA;  where&#xA;    test1 :: TestTree&#xA;    test1 =&#xA;      mintingPolicySucceedsWith&#xA;        &#34;The minting policy succeeded when it should&#xA;        myMintingPolicy&#xA;        myRedeemr&#xA;        myScriptContext&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To integrate this with your project, use Nix. We work against the &lt;code&gt;master&lt;/code&gt; branch of &lt;a href=&#34;https://github.com/Plutonomicon/plutarch-plutus&#34;&gt;Plutarch&lt;/a&gt;, so you will have to use it also. See the &lt;a href=&#34;https://raw.githubusercontent.com/Liqwid-Labs/plutarch-unit/main/flake.nix&#34;&gt;&lt;code&gt;flake.nix&lt;/code&gt;&lt;/a&gt; file for more details.&lt;/p&gt; &#xA;&lt;h1&gt;Standards&lt;/h1&gt; &#xA;&lt;p&gt;The &lt;code&gt;plutarch-unit&lt;/code&gt; code base follows strict standards to increase consistency, to minimize the impact of legacy, to properly use automated tools, and more. The standards document can be found &lt;a href=&#34;https://liqwid.notion.site/Coding-Standards-cd3c430e6e444fa292ecc3c57b7d95eb&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;What can I do with this?&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;plutarch-unit&lt;/code&gt; is licensed under the Apache 2.0 license (SPDX code &lt;code&gt;Apache-2.0&lt;/code&gt;); please see the &lt;code&gt;LICENSE&lt;/code&gt; file for more details.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>travisbrown/smoothlife</title>
    <updated>2022-10-30T01:36:10Z</updated>
    <id>tag:github.com,2022-10-30:/travisbrown/smoothlife</id>
    <link href="https://github.com/travisbrown/smoothlife" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A simple version of SmoothLife in Haskell&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;SmoothLife in Haskell&lt;/h1&gt; &#xA;&lt;p&gt;This is a Haskell port of &lt;a href=&#34;http://0fps.wordpress.com/&#34;&gt;Mikola Lysenko&lt;/a&gt;&#39;s &lt;a href=&#34;http://0fps.wordpress.com/2012/11/19/conways-game-of-life-for-curved-surfaces-part-1/&#34;&gt;simplified JavaScript implementation&lt;/a&gt; of Stephan Rafler&#39;s &lt;a href=&#34;http://arxiv.org/abs/1111.1567&#34;&gt;generalization of Conway&#39;s Game of Life&lt;/a&gt; to a continuous domain.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.github.com/travisbrown/smoothlife/master/samples/output.png&#34; alt=&#34;Example output&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;It exists because it&#39;s Saturday morning on a holiday weekend and I wanted to write some Haskell. And also because I think these patterns are beautiful, like a weird cross between a slice of a brain and the ornamentation in a William Morris woodcut.&lt;/p&gt; &#xA;&lt;h2&gt;Warnings!&lt;/h2&gt; &#xA;&lt;p&gt;The code is essentially undocumented, there&#39;s no error handling to speak of, and this is the first time I&#39;ve used &lt;a href=&#34;http://www.haskell.org/haskellwiki/Numeric_Haskell:_A_Repa_Tutorial&#34;&gt;Repa&lt;/a&gt;, so I&#39;m sure what I&#39;m doing with it is horribly inefficient.&lt;/p&gt; &#xA;&lt;p&gt;A few more concrete things:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The input can be any image format supported by &lt;a href=&#34;http://hackage.haskell.org/package/repa-devil-0.3.2&#34;&gt;DevIL&lt;/a&gt;, but it must be grayscale, and a square whose sides are a power of two.&lt;/li&gt; &#xA; &lt;li&gt;The program won&#39;t overwrite output files, so you&#39;ll have to clear the output directory manually between runs (or specify a new one).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.github.com/travisbrown/smoothlife/master/samples/output.gif&#34; alt=&#34;Example output&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;The following should work:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;stack run -- -c=samples/config.txt -i=samples/squiggles.png -o=output&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will save an image to the &lt;code&gt;output&lt;/code&gt; directory after every time step.&lt;/p&gt; &#xA;&lt;p&gt;You can easily change the rules of the game by editing the config file, or providing your own. The current defaults look like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;alphas = 0.127 0.030&#xA;radii  = 6     6.6&#xA;birth  = 0.258 0.310&#xA;death  = 0.010 0.740&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;These values come from &lt;a href=&#34;http://0fps.wordpress.com/2012/11/19/conways-game-of-life-for-curved-surfaces-part-1/#comment-699&#34;&gt;a comment&lt;/a&gt; on Lysenko&#39;s blog post.&lt;/p&gt;</summary>
  </entry>
</feed>