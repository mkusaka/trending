<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Haskell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-04T01:47:26Z</updated>
  <subtitle>Daily Trending of Haskell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Liqwid-Labs/agora</title>
    <updated>2022-07-04T01:47:26Z</updated>
    <id>tag:github.com,2022-07-04:/Liqwid-Labs/agora</id>
    <link href="https://github.com/Liqwid-Labs/agora" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Governance modules for Cardano protocols&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Agora &lt;span&gt;üèõ&lt;/span&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/Liqwid-Labs/agora/actions/workflows/integrate.yaml/badge.svg?branch=master&#34; alt=&#34;integrate.yaml badge&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Agora is a set of Plutus scripts that compose together to form a governance system.&lt;/p&gt; &#xA;&lt;h3&gt;What is Agora&lt;/h3&gt; &#xA;&lt;p&gt;Goals:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Agora aims to reduce duplication in Liqwid and LiqwidX and to serve as a one-size-fits-all governance library for projects on the Cardano blockchain.&lt;/li&gt; &#xA; &lt;li&gt;Agora aims to be modular and flexible for specific needs but presents an opinionated architecture.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Non-goals:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Agora is not a DAO. It doesn&#39;t have tokenomics or even a token. It is simply a library for governance.&lt;/li&gt; &#xA; &lt;li&gt;Agora doesn&#39;t aim to provide any primitive tools for Plutus that are not governance-specific. For this, see &lt;a href=&#34;https://github.com/Liqwid-Labs/plutus-extra/&#34;&gt;plutus-extra&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Project setup&lt;/h2&gt; &#xA;&lt;p&gt;An up to date version of the &lt;a href=&#34;https://raw.githubusercontent.com/Liqwid-Labs/agora/staging/nixos.org&#34;&gt;Nix package manager&lt;/a&gt; (&amp;gt;=2.3) is required to build this project. For information on how to install, see the &lt;a href=&#34;https://nixos.org/download.html&#34;&gt;NixOS website&lt;/a&gt;. Important: see also &lt;a href=&#34;https://github.com/input-output-hk/plutus#nix-advice&#34;&gt;this section&lt;/a&gt; on binary caches.&lt;/p&gt; &#xA;&lt;p&gt;Open a development shell with &lt;code&gt;nix develop&lt;/code&gt; and build the project with &lt;code&gt;cabal build&lt;/code&gt;. Those pained by the need to remember to enter a Nix shell may consider using &lt;a href=&#34;https://github.com/nix-community/nix-direnv&#34;&gt;nix-direnv&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;code&gt;agora-scripts&lt;/code&gt; HTTP export server&lt;/h2&gt; &#xA;&lt;p&gt;To use scripts in a frontend, you can use the &lt;code&gt;agora-scripts&lt;/code&gt; executable which allows you to query them on-demand.&lt;/p&gt; &#xA;&lt;p&gt;The CTL repo &lt;a href=&#34;https://github.com/mlabs-haskell/agora-offchain&#34;&gt;&lt;code&gt;agora-offchain&lt;/code&gt;&lt;/a&gt; already has the setup prepared for this feature.&lt;/p&gt; &#xA;&lt;p&gt;In order to run the server, simply run the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cabal run agora-scripts -- --enable-cors-middleware&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Documentation for Agora is hosted on Notion. You can find the specs &lt;a href=&#34;https://liqwid.notion.site/e85c09d2c9a542b19aac8dd3d6caa98b?v=d863219cd6a14082a661c4959cabd6e7&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Haddock is deployed on GitHub Pages &lt;a href=&#34;https://liqwid-labs.github.io/agora/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Using Agora for your protocol&lt;/h3&gt; &#xA;&lt;p&gt;If you are a protocol wanting to use Agora, read &lt;a href=&#34;https://liqwid.notion.site/Using-Agora-74ceb4a70d024992abd9ff07087013e6&#34;&gt;Using Agora&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Please read &lt;a href=&#34;https://raw.githubusercontent.com/Liqwid-Labs/agora/staging/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt;. Additionally, please follow the &lt;a href=&#34;https://liqwid.notion.site/Git-Policy-9a7979b2fd5d4604b6d042b084e7e14f&#34;&gt;Git policy&lt;/a&gt; when contributing to this project.&lt;/p&gt; &#xA;&lt;h2&gt;Overview of components&lt;/h2&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/Liqwid-Labs/agora/staging/docs/diagrams/gov-overview.svg?sanitize=true&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Road-map&lt;/h2&gt; &#xA;&lt;h3&gt;v1&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Governor&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Treasury&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Stakes&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Proposals&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Effects&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;v2&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Rewards distribution&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Escrow staking pool solution&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Available support channels info&lt;/h3&gt; &#xA;&lt;p&gt;You can find help, more information and ongoing discusion about the project here:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The &lt;a href=&#34;https://discord.gg/yGkjxrYueB&#34;&gt;Agora &amp;amp; Liqwid Libs Discord&lt;/a&gt; - Most Agora discussion happens here.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>fugue/fregot</title>
    <updated>2022-07-04T01:47:26Z</updated>
    <id>tag:github.com,2022-07-04:/fugue/fregot</id>
    <link href="https://github.com/fugue/fregot" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Fugue Rego Toolkit&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;fregot&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;fregot&lt;/code&gt; (&lt;strong&gt;F&lt;/strong&gt;ugue &lt;strong&gt;Rego&lt;/strong&gt; &lt;strong&gt;T&lt;/strong&gt;oolkit) is a set of tools for working with the &lt;a href=&#34;https://www.openpolicyagent.org/docs/latest/policy-language/&#34;&gt;Rego&lt;/a&gt; policy language, which is part of the Open Policy Agent (OPA) policy engine. &lt;code&gt;fregot&lt;/code&gt; allows you to easily evaluate expressions, debug code, test policies, and more.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://asciinema.org/a/AfmqS0xB2g5ZuORW4siesYFRY?size=medium&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/fugue/fregot/main/examples/break_example/break_example.gif&#34; alt=&#34;Demo: debugging with fregot&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://asciinema.org/a/AfmqS0xB2g5ZuORW4siesYFRY?size=medium&#34;&gt;(Check out the text-based demo on asciinema so you can copy/paste commands.)&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;fregot&lt;/code&gt; can be seen an alternative REPL to &lt;a href=&#34;https://www.openpolicyagent.org/&#34;&gt;OPA&lt;/a&gt;&#39;s built-in interpreter. The goals are a little different -- whereas the OPA agent provides general-purpose components and functionality that are particularly useful with Kubernetes, &lt;code&gt;fregot&lt;/code&gt; was developed internally at &lt;a href=&#34;https://www.fugue.co/&#34;&gt;Fugue&lt;/a&gt; as a lightweight set of tools to enhance the Rego development experience. It aims to provide:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Just the Rego language implementation rather than the full OPA agent&lt;/li&gt; &#xA; &lt;li&gt;Useful tools to debug Rego queries and modules&lt;/li&gt; &#xA; &lt;li&gt;Enhanced error messages&lt;/li&gt; &#xA; &lt;li&gt;Ease of extending and experimenting with different language features&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can use &lt;code&gt;fregot&lt;/code&gt; to validate just about any kind of JSON or YAML against Rego policy. For an example of using &lt;code&gt;fregot&lt;/code&gt; to test a Terraform plan prior to deployment, see the &lt;a href=&#34;https://raw.githubusercontent.com/fugue/fregot/main/#example-use-case&#34;&gt;Example Use Case&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;We are also actively working on improving the static analyzer to prevent many kinds of bugs.&lt;/p&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fugue/fregot/main/#installation&#34;&gt;Installation&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fugue/fregot/main/#binary---macos&#34;&gt;Binary - macOS&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fugue/fregot/main/#binary---linux&#34;&gt;Binary - Linux&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fugue/fregot/main/#from-source---any-platform&#34;&gt;From source - any platform&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fugue/fregot/main/#using-stack&#34;&gt;Using stack&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fugue/fregot/main/#using-cabal&#34;&gt;Using Cabal&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fugue/fregot/main/#usage&#34;&gt;Usage&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fugue/fregot/main/#fregot-repl&#34;&gt;fregot repl&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fugue/fregot/main/#fregot-test&#34;&gt;fregot test&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fugue/fregot/main/#fregot-bundle&#34;&gt;fregot bundle&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fugue/fregot/main/#fregot-eval&#34;&gt;fregot eval&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fugue/fregot/main/#fregot-capabilities&#34;&gt;fregot capabilities&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fugue/fregot/main/#global-options&#34;&gt;Global options&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fugue/fregot/main/#repl&#34;&gt;REPL&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fugue/fregot/main/#the-open-package&#34;&gt;The open package&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fugue/fregot/main/#debugging&#34;&gt;Debugging&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fugue/fregot/main/#step-1-set-breakpoint&#34;&gt;Step 1: Set breakpoint&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fugue/fregot/main/#step-2-activate-breakpoint&#34;&gt;Step 2: Activate breakpoint&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fugue/fregot/main/#step-3-execute-other-debugging-commands&#34;&gt;Step 3: Execute other debugging commands&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fugue/fregot/main/#repl-usage&#34;&gt;REPL Usage&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fugue/fregot/main/#break&#34;&gt;:break&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fugue/fregot/main/#help&#34;&gt;:help&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fugue/fregot/main/#input&#34;&gt;:input&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fugue/fregot/main/#open&#34;&gt;:open&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fugue/fregot/main/#quit&#34;&gt;:quit&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fugue/fregot/main/#load&#34;&gt;:load&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fugue/fregot/main/#reload&#34;&gt;:reload&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fugue/fregot/main/#continue&#34;&gt;:continue&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fugue/fregot/main/#step&#34;&gt;:step&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fugue/fregot/main/#next&#34;&gt;:next&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fugue/fregot/main/#rewind&#34;&gt;:rewind&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fugue/fregot/main/#test&#34;&gt;:test&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fugue/fregot/main/#type&#34;&gt;:type&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fugue/fregot/main/#where&#34;&gt;:where&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fugue/fregot/main/#watch&#34;&gt;:watch&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fugue/fregot/main/#example-use-case&#34;&gt;Example Use Case&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fugue/fregot/main/#macos-installation-error-message&#34;&gt;macOS Installation Error Message&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fugue/fregot/main/#additional-reading&#34;&gt;Additional Reading&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;fregot works on all major platforms. Pre-built binaries are available for &lt;a href=&#34;https://raw.githubusercontent.com/fugue/fregot/main/#binary---macos&#34;&gt;macOS&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/fugue/fregot/main/#binary---linux&#34;&gt;Linux&lt;/a&gt;. All platforms, including Windows, support installing from &lt;a href=&#34;https://raw.githubusercontent.com/fugue/fregot/main/#from-source---any-platform&#34;&gt;source&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Binary - macOS&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Navigate to &lt;a href=&#34;https://github.com/fugue/fregot/releases&#34;&gt;Releases&lt;/a&gt; and download the &lt;strong&gt;fregot-{version}-darwin-i386.zip&lt;/strong&gt; binary for the latest release.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Chrome users: If you see a message that the file &#34;is not commonly downloaded and may be dangerous,&#34; select the arrow icon to the right and select &#34;Keep.&#34; &lt;code&gt;fregot&lt;/code&gt; is not dangerous.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/fugue/fregot/main/extra/readme-install-chrome.png&#34; alt=&#34;Chrome warning message&#34;&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;Unzip the downloaded file.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;cd&lt;/code&gt; into the &lt;code&gt;fregot-{version}-darwin-i386&lt;/code&gt; directory you just unzipped.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Move the &lt;code&gt;fregot&lt;/code&gt; binary to a location in your &lt;code&gt;$PATH&lt;/code&gt;, such as &lt;code&gt;/usr/local/bin&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;mv fregot /usr/local/bin&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run &lt;code&gt;fregot&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;fregot&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;If you get an error message that the application cannot be opened, see &lt;a href=&#34;https://raw.githubusercontent.com/fugue/fregot/main/#macos-installation-error-message&#34;&gt;these instructions&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Binary - Linux&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Navigate to &lt;a href=&#34;https://github.com/fugue/fregot/releases&#34;&gt;Releases&lt;/a&gt; and download the &lt;strong&gt;fregot-{version}-linux-x86_64.tar.gz&lt;/strong&gt; binary for the latest release.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Unzip the downloaded file.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;cd&lt;/code&gt; into the &lt;code&gt;fregot-{version}-linux-x86_64&lt;/code&gt; directory you just unzipped.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Move the &lt;code&gt;fregot&lt;/code&gt; binary to a location in your &lt;code&gt;$PATH&lt;/code&gt;, such as &lt;code&gt;/usr/local/bin&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code&gt; sudo mv fregot /usr/local/bin&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run &lt;code&gt;fregot&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code&gt; fregot&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;From source - any platform&lt;/h3&gt; &#xA;&lt;p&gt;Installation through source is done using standard Haskell tooling -- &lt;a href=&#34;https://www.haskell.org/cabal/&#34;&gt;Cabal&lt;/a&gt; and &lt;a href=&#34;https://docs.haskellstack.org/en/stable/README/&#34;&gt;stack&lt;/a&gt; both work well.&lt;/p&gt; &#xA;&lt;h4&gt;Using stack&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install &lt;a href=&#34;https://docs.haskellstack.org/en/stable/README/&#34;&gt;stack&lt;/a&gt; for your platform.&lt;/li&gt; &#xA; &lt;li&gt;Clone this repository and &lt;code&gt;cd&lt;/code&gt; into it.&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;stack install&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Make sure &lt;code&gt;$HOME/.local/bin&lt;/code&gt; is in your &lt;code&gt;$PATH&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Using Cabal&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install &lt;a href=&#34;https://www.haskell.org/cabal/&#34;&gt;Cabal&lt;/a&gt; for your platform.&lt;/li&gt; &#xA; &lt;li&gt;Clone this repository and &lt;code&gt;cd&lt;/code&gt; into it.&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;cabal install&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Make sure &lt;code&gt;$HOME/.cabal/bin&lt;/code&gt; is in your &lt;code&gt;$PATH&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;fregot v0.13.0&#xA;&#xA;Usage: fregot COMMAND&#xA;&#xA;Available options:&#xA;  -h,--help                Show this help text&#xA;  --dump TAG               Dump debug information&#xA;  --format FORMAT          Format for error messages and diagnostics&#xA;&#xA;Available commands:&#xA;  repl                     Run fregot repl&#xA;  test                     Run tests in .rego files&#xA;  bundle                   Bundle .rego files&#xA;  eval                     Evaluate a rego expression&#xA;  capabilities             Print the capabilities document&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;fregot&lt;/code&gt; understands a number of subcommands and &lt;a href=&#34;https://raw.githubusercontent.com/fugue/fregot/main/#global-options&#34;&gt;global options&lt;/a&gt;. See details and examples below.&lt;/p&gt; &#xA;&lt;h3&gt;fregot repl&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;fregot repl [PATHS] [--input PATH] [--watch]&lt;/code&gt;: Start a REPL. Optionally, use the &lt;code&gt;--input [PATH]&lt;/code&gt; flag to specify &lt;a href=&#34;https://raw.githubusercontent.com/fugue/fregot/main/#input&#34;&gt;input&lt;/a&gt; and the &lt;code&gt;--watch&lt;/code&gt; flag to enable &lt;a href=&#34;https://raw.githubusercontent.com/fugue/fregot/main/#watch&#34;&gt;watching files&lt;/a&gt;. See &lt;a href=&#34;https://raw.githubusercontent.com/fugue/fregot/main/#repl&#34;&gt;working with the REPL&lt;/a&gt; for details and examples.&lt;/p&gt; &#xA;&lt;h3&gt;fregot test&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;fregot test [PATHS]&lt;/code&gt;: Run tests. &lt;code&gt;fregot&lt;/code&gt; will recursively look for Rego files in the given paths and run any rule starting with &lt;code&gt;test_&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Usage: fregot test PATHS&#xA;  Run tests in .rego files&#xA;&#xA;Available options:&#xA;  PATHS                    Rego files or directories to test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;Tip: You can run this command yourself from the root of this repo!&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;This command runs all rules starting with &lt;code&gt;test_&lt;/code&gt; in &lt;code&gt;ami_id.rego&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;fregot test examples/ami_id/ami_id.rego&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You&#39;ll see a count of passed, failed, and errored tests:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;passed: 2, failed: 0, errored: 0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Take a look at &lt;code&gt;examples/ami_id/ami_id.rego&lt;/code&gt; to see test examples.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Tip: You can also test Rego files from within the &lt;a href=&#34;https://raw.githubusercontent.com/fugue/fregot/main/#repl&#34;&gt;REPL&lt;/a&gt; using the &lt;code&gt;:test&lt;/code&gt; command. See &lt;a href=&#34;https://raw.githubusercontent.com/fugue/fregot/main/#test&#34;&gt;&lt;code&gt;:test&lt;/code&gt;&lt;/a&gt; for details.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h3&gt;fregot bundle&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;fregot bundle [PATHS]&lt;/code&gt;: Compile a number of Rego files into a single bundle that can be loaded faster than individual files. Experimental. Note that we currently use a different bundle format from &lt;a href=&#34;https://www.openpolicyagent.org/&#34;&gt;OPA&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Usage: fregot bundle (-o|--output BUNDLE) PATHS&#xA;  Bundle .rego files&#xA;&#xA;Available options:&#xA;  -o,--output BUNDLE       Path of output file&#xA;  PATHS                    Rego files or directories to bundle&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;fregot eval&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;fregot eval [--input PATH] EXPRESSION [PATHS]&lt;/code&gt;: Evaluate a Rego expression in a policy file using a JSON file as input.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Usage: fregot eval [-i|--input PATH] EXPRESSION [PATHS]&#xA;  Evaluate a rego expression&#xA;&#xA;Available options:&#xA;  -i,--input PATH          Input filepath&#xA;  EXPRESSION               Rego expression to evaluate&#xA;  PATHS                    Rego files or directories to load&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;Tip: You can run this command yourself from the root of this repo!&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;This command evaluates the &lt;code&gt;data.fregot.examples.ami_id.allow&lt;/code&gt; expression from &lt;code&gt;ami_id.rego&lt;/code&gt; using the input file &lt;code&gt;repl_input.json&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;fregot eval \&#xA;    --input examples/ami_id/repl_input.json \&#xA;    &#39;data.fregot.examples.ami_id.allow&#39; \&#xA;    examples/ami_id/ami_id.rego&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You&#39;ll see the value of the expression in the output:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;[true]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that the expression argument should be formatted as &lt;code&gt;data.package.rule&lt;/code&gt; according to the package and rule name in the Rego file.&lt;/p&gt; &#xA;&lt;h3&gt;fregot capabilities&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;fregot capabilities&lt;/code&gt;: Print the capabilities document. This document lists all supported built-in functions with their arguments and types:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;{&#xA;  &#34;builtins&#34;: [&#xA;    {&#xA;      &#34;decl&#34;: {&#xA;        &#34;args&#34;: [&#xA;          {&#xA;            &#34;type&#34;: &#34;number&#34;&#xA;          }&#xA;        ],&#xA;        &#34;result&#34;: {&#xA;          &#34;type&#34;: &#34;number&#34;&#xA;        },&#xA;        &#34;type&#34;: &#34;function&#34;&#xA;      },&#xA;      &#34;name&#34;: &#34;abs&#34;&#xA;    },&#xA;    (etc.)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Global options&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;fregot&lt;/code&gt; supports the following global options:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;-h,--help&lt;/code&gt; shows &lt;code&gt;fregot&lt;/code&gt; help text&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--dump TAG&lt;/code&gt; is used to dump debug information&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--format FORMAT&lt;/code&gt; sets the format for error messages and diagnostics; values: &lt;code&gt;text&lt;/code&gt; or &lt;code&gt;json&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-v,--verbosity VALUE&lt;/code&gt; determines how verbose &lt;code&gt;fregot&lt;/code&gt; output is; values: &lt;code&gt;0&lt;/code&gt; (quiet) or &lt;code&gt;1&lt;/code&gt; (default)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;REPL&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;F u g u e   R E G O   T o o l k i t&#xA;fregot v0.13.0 repl - use :help for usage info&#xA;repl% :help&#xA;Enter an expression to evaluate it.&#xA;Enter a rule to add it to the current package.&#xA;&#xA;Other commands:&#xA;  :break     Set or remove a breakpoint&#xA;  :help      show this info&#xA;  :input     set the input document&#xA;  :open      open a different package, e.g. `:open foo`&#xA;  :quit      exit the repl&#xA;  :load      load a rego file, e.g. `:load foo.rego`&#xA;  :reload    reload modified rego files&#xA;  :continue  continue running the debugged program&#xA;  :step      step (into) the next rule in the debugged program&#xA;  :next      step (over) the next rule in the debugged program&#xA;  :rewind    go back to the previous debug suspension&#xA;  :test      run tests in the current package&#xA;  :type      print the type of a term&#xA;  :where     print your location&#xA;  :watch     evaluate input after file changes&#xA;&#xA;Shortcuts are supported for commands, e.g., `:l` for `:load`.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The REPL is currently the most important part of &lt;code&gt;fregot&lt;/code&gt;. After loading the files passed on the command line, you end up on an interactive prompt.&lt;/p&gt; &#xA;&lt;p&gt;There are three ways to interact with the REPL:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Entering a rule adds the rule to the currently open package, e.g.:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;repl% numbers = {4, 8, 15, 16, 23, 42}&#xA;Rule numbers added&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Entering a query evaluates that query, e.g.:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;repl% numbers[n]; n % 2 == 0; n&#xA;= 4&#xA;| n = 4&#xA;= 16&#xA;| n = 16&#xA;= 8&#xA;| n = 8&#xA;= 42&#xA;| n = 42&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;There are number of special commands that start with &lt;code&gt;:&lt;/code&gt;. Entering &lt;a href=&#34;https://raw.githubusercontent.com/fugue/fregot/main/#help&#34;&gt;&lt;code&gt;:help&lt;/code&gt;&lt;/a&gt; shows you the full list of commands.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;repl% :quit&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/fugue/fregot/main/#repl-usage&#34;&gt;REPL Usage&lt;/a&gt; for details and examples for each command.&lt;/p&gt; &#xA;&lt;h3&gt;The open package&lt;/h3&gt; &#xA;&lt;p&gt;The REPL has the concept of an open package, indicated by the prompt. Initially this is &lt;code&gt;repl&lt;/code&gt;, but you can change this using &lt;a href=&#34;https://raw.githubusercontent.com/fugue/fregot/main/#open&#34;&gt;&lt;code&gt;:open&lt;/code&gt;&lt;/a&gt;. For example, we can add a rule to the package &lt;code&gt;foo&lt;/code&gt; and change back to &lt;code&gt;repl&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;repl% :open foo&#xA;Warning: package foo contains no rules&#xA;foo% a = 1&#xA;Rule a added&#xA;foo% :open repl&#xA;repl% data.foo.a&#xA;= 1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A typical workflow is to have an editor open as well as a &lt;code&gt;fregot repl&lt;/code&gt;. You can then load the file using &lt;a href=&#34;https://raw.githubusercontent.com/fugue/fregot/main/#load&#34;&gt;&lt;code&gt;:load&lt;/code&gt;&lt;/a&gt;, which automatically opens the package:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;repl% :load policy.rego&#xA;Loading policy.rego...&#xA;Loaded package policy&#xA;policy%&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once you make changes to the file, just reload it using &lt;a href=&#34;https://raw.githubusercontent.com/fugue/fregot/main/#reload&#34;&gt;&lt;code&gt;:reload&lt;/code&gt;&lt;/a&gt;, which reloads all modified Rego files. If the file includes any rules starting with &lt;code&gt;test_&lt;/code&gt;, you can assess your changes using &lt;a href=&#34;https://raw.githubusercontent.com/fugue/fregot/main/#test&#34;&gt;&lt;code&gt;:test&lt;/code&gt;&lt;/a&gt;, like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;policy% :reload&#xA;Reloaded policy.rego&#xA;policy% :test&#xA;passed: 1, failed: 0, errored: 0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Debugging&lt;/h3&gt; &#xA;&lt;p&gt;Debugging generally follows these steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Set one or more breakpoints with &lt;a href=&#34;https://raw.githubusercontent.com/fugue/fregot/main/#break&#34;&gt;&lt;code&gt;:break&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Evaluate an expression that activates the breakpoint&lt;/li&gt; &#xA; &lt;li&gt;Use other debugging commands to &lt;a href=&#34;https://raw.githubusercontent.com/fugue/fregot/main/#step&#34;&gt;step into&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/fugue/fregot/main/#next&#34;&gt;step over&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/fugue/fregot/main/#rewind&#34;&gt;rewind&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/fugue/fregot/main/#where&#34;&gt;print location&lt;/a&gt;, or &lt;a href=&#34;https://raw.githubusercontent.com/fugue/fregot/main/#continue&#34;&gt;continue to the next breakpoint&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Step 1: Set breakpoint&lt;/h4&gt; &#xA;&lt;p&gt;You can start debugging by setting a breakpoint with &lt;a href=&#34;https://raw.githubusercontent.com/fugue/fregot/main/#break&#34;&gt;&lt;code&gt;:break&lt;/code&gt;&lt;/a&gt; and then evaluating something.&lt;/p&gt; &#xA;&lt;p&gt;To set a breakpoint, use the &lt;code&gt;:break&lt;/code&gt; command. The command below sets a breakpoint on the rule &lt;code&gt;deny&lt;/code&gt; in the currently loaded package, &lt;code&gt;fregot.examples.demo&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;fregot.examples.demo% :break deny&#xA;Set breakpoint at fregot.examples.demo.deny&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can use the &lt;code&gt;:break&lt;/code&gt; command with either names, or a position in a file (line number). For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;:break foo            # `foo` in the current package&#xA;:break repl.foo       # `foo` in the package repl&#xA;:break data.repl.foo  # Same as above&#xA;:break foo.rego:9     # Line 9 of `foo.rego`&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once at least one breakpoint is set, you can use &lt;code&gt;:break&lt;/code&gt; without arguments to display the list. You&#39;ll see output like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;fregot.examples.demo.test_allow&#xA;examples/demo/demo.rego:9&#xA;fregot.examples.demo.deny&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also use &lt;code&gt;:break&lt;/code&gt; on an existing breakpoint to remove it again:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;fregot.examples.demo% :break deny&#xA;Removed breakpoint at fregot.examples.demo.deny&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Step 2: Activate breakpoint&lt;/h4&gt; &#xA;&lt;p&gt;Next, evaluate an expression that activates the breakpoint. If the &lt;code&gt;repl&lt;/code&gt; package is already loaded and the breakpoint is set on &lt;code&gt;foo&lt;/code&gt;, we can just evaluate &lt;code&gt;foo&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;%repl foo&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Step 3: Execute other debugging commands&lt;/h4&gt; &#xA;&lt;p&gt;Once the breakpoint is activated, you end up in a &lt;em&gt;debugging context&lt;/em&gt;. From here, you can do a number of things:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Enter a query to evaluate in the &lt;em&gt;current context&lt;/em&gt;: meaning that you can print and evaluate local variables that are in scope.&lt;/li&gt; &#xA; &lt;li&gt;Use &lt;a href=&#34;https://raw.githubusercontent.com/fugue/fregot/main/#continue&#34;&gt;&lt;code&gt;:continue&lt;/code&gt;&lt;/a&gt; to continue to the next breakpoint.&lt;/li&gt; &#xA; &lt;li&gt;Use &lt;a href=&#34;https://raw.githubusercontent.com/fugue/fregot/main/#step&#34;&gt;&lt;code&gt;:step&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/fugue/fregot/main/#next&#34;&gt;&lt;code&gt;:next&lt;/code&gt;&lt;/a&gt; to step into and over the next query, respectively.&lt;/li&gt; &#xA; &lt;li&gt;Use &lt;a href=&#34;https://raw.githubusercontent.com/fugue/fregot/main/#rewind&#34;&gt;&lt;code&gt;:rewind&lt;/code&gt;&lt;/a&gt; to go &lt;em&gt;back&lt;/em&gt; to the last step.&lt;/li&gt; &#xA; &lt;li&gt;Use &lt;a href=&#34;https://raw.githubusercontent.com/fugue/fregot/main/#where&#34;&gt;&lt;code&gt;:where&lt;/code&gt;&lt;/a&gt; to see your current location.&lt;/li&gt; &#xA; &lt;li&gt;Use &lt;a href=&#34;https://raw.githubusercontent.com/fugue/fregot/main/#quit&#34;&gt;&lt;code&gt;:quit&lt;/code&gt;&lt;/a&gt; to exit debugging mode. Use &lt;code&gt;:quit&lt;/code&gt; again to exit the REPL.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Debugging notes&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;By default, &lt;code&gt;fregot&lt;/code&gt; turns off optimizations when debugging. This allows you to more naturally follow what the code is doing. However, this may get in your way when trying to debug complex queries that take too long to execute without optimizations.&lt;/p&gt; &lt;p&gt;To explicitly turn on optimizations (even while debugging), use &lt;code&gt;fregot repl -O&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;REPL Usage&lt;/h2&gt; &#xA;&lt;h3&gt;:break&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;:break [location]&lt;/code&gt; sets a breakpoint. For example, the command below sets a breakpoint at the &lt;code&gt;allow&lt;/code&gt; rule in the package &lt;code&gt;fregot.examples.ami_id&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;repl% :break fregot.examples.ami_id.allow&#xA;Set breakpoint at fregot.examples.ami_id.allow&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To enter debugging mode, make sure you&#39;ve loaded the package with &lt;a href=&#34;https://raw.githubusercontent.com/fugue/fregot/main/#load&#34;&gt;&lt;code&gt;:load&lt;/code&gt;&lt;/a&gt;, and activate the breakpoint by entering the rule name:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;fregot.examples.ami_id% allow&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The REPL displays the code at the breakpoint, along with the line number:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;fregot.examples.ami_id% allow&#xA;23|     count(unapproved_amis) == 0&#xA;        ^^^^^^^^^^^^^^^^^^^^^^^^^^^&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The REPL prompt then includes the word &lt;code&gt;debug&lt;/code&gt;, allowing you to enter &lt;a href=&#34;https://raw.githubusercontent.com/fugue/fregot/main/#step-3-execute-other-debugging-commands&#34;&gt;other debugging commands&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;fregot.examples.ami_id(debug)%&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Entering &lt;code&gt;:break&lt;/code&gt; by itself displays a list of breakpoints:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;repl% :break&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You&#39;ll see output like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;fregot.examples.ami_id.allow&#xA;examples/ami_id/ami_id.rego:9&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/fugue/fregot/main/#step-1-set-breakpoint&#34;&gt;Step 1: Set breakpoint&lt;/a&gt; for more info.&lt;/p&gt; &#xA;&lt;h4&gt;Evaluating local variables&lt;/h4&gt; &#xA;&lt;p&gt;Once you&#39;ve loaded a file, activated a breakpoint, and entered debugging mode, you can evaluate queries in the current context -- including printing and evaluating local variables.&lt;/p&gt; &#xA;&lt;p&gt;For example, if you look at &lt;a href=&#34;https://raw.githubusercontent.com/fugue/fregot/main/examples/break_example/break_example.rego&#34;&gt;break_example.rego&lt;/a&gt;, you&#39;ll see that &lt;code&gt;function_a&lt;/code&gt; has the local variable &lt;code&gt;a&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;function_a {&#xA;  a = &#34;Welcome to function a!&#34;&#xA;  true&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you load the Rego file and try to evaluate &lt;code&gt;a&lt;/code&gt; without setting a breakpoint first, you&#39;ll get an error message that the variable is not in scope:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;fregot.examples.break_example% a&#xA;&#xA;fregot (compile error):&#xA;  &#34;a&#34; (line 1, column 1):&#xA;  unknown variable:&#xA;&#xA;    1| a&#xA;       ^&#xA;&#xA;  Undefined variable: a&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;However, if you set a breakpoint at &lt;code&gt;function_a&lt;/code&gt;, activate it, and &lt;a href=&#34;https://raw.githubusercontent.com/fugue/fregot/main/#step&#34;&gt;&lt;code&gt;:step&lt;/code&gt;&lt;/a&gt; into it, you can see the value of &lt;code&gt;a&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;fregot.examples.break_example% :break function_a&#xA;Set breakpoint at fregot.examples.break_example.function_a&#xA;&#xA;fregot.examples.break_example% function_a&#xA;&#xA;4|   a = &#34;Welcome to function a!&#34;&#xA;     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^&#xA;&#xA;fregot.examples.break_example(debug)% :step&#xA;&#xA;5|   true&#xA;     ^^^^&#xA;&#xA;fregot.examples.break_example(debug)% a&#xA;= &#34;Welcome to function a!&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;:help&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Shortcut&lt;/strong&gt; &lt;code&gt;:h&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;:help&lt;/code&gt; displays help text for the REPL. See &lt;a href=&#34;https://raw.githubusercontent.com/fugue/fregot/main/#repl&#34;&gt;REPL&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h3&gt;:input&lt;/h3&gt; &#xA;&lt;p&gt;While in the REPL, you can directly change the input document by using the &lt;code&gt;:input&lt;/code&gt; command to specify the path of your input document. Input can be JSON or YAML.&lt;/p&gt; &#xA;&lt;p&gt;For example, if you want to load the input in &lt;code&gt;example.json&lt;/code&gt;, you would do this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;repl% :input example.json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The command returns no output unless there is an error.&lt;/p&gt; &#xA;&lt;p&gt;After you&#39;ve set the input, you can enter &lt;code&gt;input&lt;/code&gt; without colon or argument to print the input document to the screen:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;repl% input&#xA;= {&#34;user&#34;: &#34;alice&#34;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Two things to note:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;The home directory shortcut &lt;code&gt;~&lt;/code&gt; is not currently supported, so use the absolute path instead; e.g., &lt;code&gt;/Users/alice/input.json&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you change the input document, make sure to update it by issuing the &lt;a href=&#34;https://raw.githubusercontent.com/fugue/fregot/main/#reload&#34;&gt;&lt;code&gt;:reload&lt;/code&gt;&lt;/a&gt; command. (Or, if you&#39;ve enabled &lt;a href=&#34;https://raw.githubusercontent.com/fugue/fregot/main/#watch&#34;&gt;&lt;code&gt;--watch&lt;/code&gt;&lt;/a&gt; mode, the REPL will reload the changes automatically!)&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can also set the input when you start the REPL with the &lt;code&gt;--input PATH&lt;/code&gt; flag:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;fregot repl examples/ami_id/ami_id.rego --input input.json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;:open&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Shortcut&lt;/strong&gt; &lt;code&gt;:o&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;By default, you start in the &lt;code&gt;repl&lt;/code&gt; package when you run &lt;code&gt;fregot repl&lt;/code&gt;. &lt;code&gt;:open&lt;/code&gt; allows you to switch between packages in files you&#39;ve &lt;a href=&#34;https://raw.githubusercontent.com/fugue/fregot/main/#load&#34;&gt;loaded&lt;/a&gt;. For example, you can switch to &lt;code&gt;fregot.examples.ami_id&lt;/code&gt; like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;repl% :open fregot.examples.ami_id&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The REPL prompt changes to the name of the package you just loaded:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;fregot.examples.ami_id%&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To change to another package (or return to the &lt;code&gt;repl&lt;/code&gt; package), you can run &lt;code&gt;:open [PACKAGE]&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For more information, see &lt;a href=&#34;https://raw.githubusercontent.com/fugue/fregot/main/#the-open-package&#34;&gt;The open package&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;:quit&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Shortcut&lt;/strong&gt; &lt;code&gt;:q&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;:quit&lt;/code&gt; exits debugging mode if you&#39;re in debugging mode, and exits the REPL if you&#39;re not:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;repl(debug)% :quit&#xA;&#xA;repl% :quit&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;:load&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Shortcut&lt;/strong&gt; &lt;code&gt;:l&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;:load [PATH]&lt;/code&gt; loads a Rego file and automatically opens the package. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;repl% :load examples/ami_id/ami_id.rego&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You&#39;ll see output like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Loaded package fregot.examples.ami_id&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once the file is loaded, you can debug it with &lt;a href=&#34;https://raw.githubusercontent.com/fugue/fregot/main/#repl-usage&#34;&gt;other commands&lt;/a&gt;. You can also enter rules or expressions to evaluate them. For example, this command returns the value of the rule &lt;code&gt;allow&lt;/code&gt; in the loaded Rego file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;fregot.examples.ami_id% allow&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You&#39;ll see output like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;= true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Tip: You can skip the &lt;code&gt;:load&lt;/code&gt; step by specifying the Rego file paths when you start the REPL:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;fregot repl my_policy_1.rego my_policy_2.rego&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Directories are searched recursively. This command opens all the Rego files in the &lt;code&gt;examples&lt;/code&gt; folder:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;fregot repl examples&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;Note: If you change the Rego file after you&#39;ve loaded it, you&#39;ll need to &lt;a href=&#34;https://raw.githubusercontent.com/fugue/fregot/main/#reload&#34;&gt;&lt;code&gt;:reload&lt;/code&gt;&lt;/a&gt; it. However, if you&#39;ve enabled &lt;a href=&#34;https://raw.githubusercontent.com/fugue/fregot/main/#watch&#34;&gt;&lt;code&gt;--watch&lt;/code&gt;&lt;/a&gt; mode, the REPL automatically reloads your changes.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h3&gt;:reload&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Shortcut&lt;/strong&gt; &lt;code&gt;:r&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;:reload&lt;/code&gt; checks for modified Rego files and reloads them. If you make changes to a loaded file, you can &lt;code&gt;:reload&lt;/code&gt; it to update it in the REPL.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;fregot.examples.ami_id% :reload&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You&#39;ll see output like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Reloaded input.json&#xA;Reloaded examples/ami_id/ami_id.rego&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For automatic reloading, see &lt;a href=&#34;https://raw.githubusercontent.com/fugue/fregot/main/#watch&#34;&gt;&lt;code&gt;--watch&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Note that reloading when debugging is not possible as it would modify the code currently running.&lt;/p&gt; &#xA;&lt;h3&gt;:continue&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;:continue&lt;/code&gt; continues to the next breakpoint:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;fregot.examples.ami_id(debug)% :continue&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The REPL displays the code at the next breakpoint, along with the line number.&lt;/p&gt; &#xA;&lt;p&gt;In the following example, we set a breakpoint at &lt;code&gt;test_step&lt;/code&gt; and at &lt;code&gt;function_a&lt;/code&gt; (see &lt;a href=&#34;https://raw.githubusercontent.com/fugue/fregot/main/examples/break_example/break_example.rego&#34;&gt;break_example.rego&lt;/a&gt;), activate the &lt;code&gt;test_step&lt;/code&gt; breakpoint, then use the &lt;code&gt;:continue&lt;/code&gt; command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;fregot.examples.break_example% :break test_step&#xA;Set breakpoint at fregot.examples.break_example.test_step&#xA;fregot.examples.break_example% :break function_a&#xA;Set breakpoint at fregot.examples.break_example.function_a&#xA;fregot.examples.break_example% test_step&#xA;14|   function_a&#xA;      ^^^^^^^^^^&#xA;fregot.examples.break_example(debug)% :continue&#xA;4|   a = &#34;Welcome to function a!&#34;&#xA;     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If there are no more breakpoints, the program finishes running and you&#39;ll see the validation results and &lt;code&gt;(debug) finished&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(debug) = true&#xA;(debug) finished&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;:step&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Shortcut&lt;/strong&gt; &lt;code&gt;:s&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;:step&lt;/code&gt; steps &lt;em&gt;into&lt;/em&gt; the next rule in the debugged program:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;fregot.examples.break_example(debug)% :step&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The REPL displays the next query, along with the line number.&lt;/p&gt; &#xA;&lt;p&gt;In the following example, we activate the breakpoint &lt;code&gt;test_step&lt;/code&gt;, then use the &lt;code&gt;:step&lt;/code&gt; command once to step into &lt;code&gt;function_a&lt;/code&gt;, and a second time to step into the next query in &lt;code&gt;function_a&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;fregot.examples.break_example% test_step&#xA;14|   function_a&#xA;      ^^^^^^^^^^&#xA;fregot.examples.break_example(debug)% :step&#xA;4|   a = &#34;Welcome to function a!&#34;&#xA;     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^&#xA;fregot.examples.break_example(debug)% :step&#xA;5|   true&#xA;     ^^^^&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If there are no more queries, you&#39;ll see the results of the validation and the output &lt;code&gt;(debug) finished&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(debug) = true&#xA;(debug) finished&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;:next&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Shortcut&lt;/strong&gt; &lt;code&gt;:n&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;:next&lt;/code&gt; steps &lt;em&gt;over&lt;/em&gt; the next rule in the debugged program:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;fregot.examples.break_example% :next&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The REPL skips to the next complete rule and displays the line number.&lt;/p&gt; &#xA;&lt;p&gt;In the following example, we activate the breakpoint &lt;code&gt;test_step&lt;/code&gt;, then use the &lt;code&gt;:next&lt;/code&gt; command to jump to the next rule, &lt;code&gt;function_b&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;fregot.examples.break_example% test_step&#xA;14|   function_a&#xA;      ^^^^^^^^^^&#xA;fregot.examples.break_example(debug)% :next&#xA;15|   function_b&#xA;      ^^^^^^^^^^&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;:rewind&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;:rewind&lt;/code&gt; goes back to the previous debug suspension -- it &#34;rewinds&#34; back to the most recent &lt;a href=&#34;https://raw.githubusercontent.com/fugue/fregot/main/#step&#34;&gt;&lt;code&gt;:step&lt;/code&gt;&lt;/a&gt; or &lt;a href=&#34;https://raw.githubusercontent.com/fugue/fregot/main/#next&#34;&gt;&lt;code&gt;:next&lt;/code&gt;&lt;/a&gt; command.&lt;/p&gt; &#xA;&lt;p&gt;In the following example, we &lt;code&gt;:step&lt;/code&gt; into &lt;code&gt;function_a&lt;/code&gt;, &lt;code&gt;:step&lt;/code&gt; into the next query, and then &lt;code&gt;:rewind&lt;/code&gt; back to &lt;code&gt;function_a&lt;/code&gt; (the previous query):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;fregot.examples.break_example(debug)% :step&#xA;4|   a = &#34;Welcome to function a!&#34;&#xA;     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^&#xA;fregot.examples.break_example(debug)% :step&#xA;5|   true&#xA;     ^^^^&#xA;fregot.examples.break_example(debug)% :rewind&#xA;4|   a = &#34;Welcome to function a!&#34;&#xA;     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The history that you can rewind is currently limited to 10 steps.&lt;/p&gt; &#xA;&lt;h3&gt;:test&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Shortcut&lt;/strong&gt; &lt;code&gt;:t&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;:test&lt;/code&gt; runs tests in the current package. This is similar to the &lt;a href=&#34;https://raw.githubusercontent.com/fugue/fregot/main/#fregot-test&#34;&gt;&lt;code&gt;fregot test&lt;/code&gt;&lt;/a&gt; command, but is scoped to a package rather than recursive directories.&lt;/p&gt; &#xA;&lt;p&gt;For a more detailed example, check out &lt;a href=&#34;https://raw.githubusercontent.com/fugue/fregot/main/examples/ami_id/ami_id.rego&#34;&gt;ami_id.rego&lt;/a&gt; and compare it to &lt;a href=&#34;https://raw.githubusercontent.com/fugue/fregot/main/examples/ami_id/test_ami_id.rego&#34;&gt;test_ami_id.rego&lt;/a&gt;. &lt;code&gt;:test&lt;/code&gt; only runs the two tests in &lt;code&gt;ami_id.rego&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;fregot.examples.ami_id% :test&#xA;passed: 2, failed: 0, errored: 0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On the other hand, &lt;code&gt;fregot test&lt;/code&gt; searches recursively through the given directory and includes the 2 tests in &lt;code&gt;ami_id.rego&lt;/code&gt; &lt;em&gt;and&lt;/em&gt; the 8 tests from &lt;code&gt;test_ami_id.rego&lt;/code&gt; for a total of 10 tests:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;fregot test examples/ami_id/&#xA;passed: 10, failed: 0, errored: 0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;:type&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;:type&lt;/code&gt; prints the type of a term in the loaded package:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;fregot.examples.ami_id% :type allow&#xA;allow : boolean&#xA;&#xA;fregot.examples.ami_id% :type approved_amis&#xA;approved_amis : set{string}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;:where&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;:where&lt;/code&gt; prints your location in debugging mode using a stack trace:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;fregot.examples.ami_id(debug)% :where&#xA;23|     count(unapproved_amis) == 0&#xA;        ^^^^^^^^^^^^^^^^^^^^^^^^^^^&#xA;&#xA;Stack trace:&#xA;  rule fregot.examples.ami_id.allow at allow:1:1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This comes in handy when you are stepping into and over rules and want to double-check your location in the code.&lt;/p&gt; &#xA;&lt;h3&gt;:watch&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;To enable &lt;code&gt;--watch&lt;/code&gt; mode, you must launch the REPL with &lt;code&gt;fregot repl --watch&lt;/code&gt;. This also allows you to use the &lt;code&gt;:watch [expression]&lt;/code&gt; command.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;When you launch the REPL with &lt;code&gt;fregot repl --watch&lt;/code&gt;, the REPL monitors loaded package and input files for changes and live-reloads them. You can also use the &lt;code&gt;:watch data.package.rule&lt;/code&gt; command to monitor an expression, and &lt;code&gt;fregot&lt;/code&gt; will automatically print an updated evaluation when loaded files are changed.&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s an example. Start the REPL with the &lt;code&gt;--watch&lt;/code&gt; flag:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;fregot repl --watch&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Load the Rego and input files:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;repl% :load examples/ami_id/ami_id.rego&#xA;Loading examples/ami_id/ami_id.rego...&#xA;Loaded package fregot.examples.ami_id&#xA;fregot.examples.ami_id% :input examples/ami_id/repl_input.json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now you can make changes to the Rego and/or input files and &lt;code&gt;fregot&lt;/code&gt; automatically reloads them:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;fregot.examples.ami_id%&#xA;Reloaded examples/ami_id/ami_id.rego&#xA;fregot.examples.ami_id%&#xA;Reloaded examples/ami_id/repl_input.json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This allows you to evaluate expressions as you like, and they&#39;ll automatically be up-to-date.&lt;/p&gt; &#xA;&lt;p&gt;Use &lt;code&gt;:watch data.package.rule&lt;/code&gt; to monitor a particular expression:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;fregot.examples.ami_id% :watch data.fregot.examples.ami_id.allow&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can then make changes to the Rego and/or input file, and &lt;code&gt;fregot&lt;/code&gt; re-evaluates the expression and prints the evaluation:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;fregot.examples.ami_id%&#xA;Reloaded ami_id.rego&#xA;= false&#xA;&#xA;fregot.examples.ami_id%&#xA;Reloaded repl_input.json&#xA;= true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Example Use Case&lt;/h2&gt; &#xA;&lt;p&gt;You can use fregot to determine whether a Terraform plan complies with a Rego policy. Incorporate &lt;code&gt;fregot&lt;/code&gt; into your CI/CD pipeline to prevent noncompliant infrastructure from being deployed.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/fugue/fregot/main/examples/ami_id/ami_id.rego&#34;&gt;examples/ami_id/ami_id.rego&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;h2&gt;macOS Installation Error Message&lt;/h2&gt; &#xA;&lt;p&gt;On some versions of macOS, you might see an error message that &#34;fregot cannot be opened because the developer cannot be verified.&#34; You can safely run &lt;code&gt;fregot&lt;/code&gt; by taking the following steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Select &#34;Cancel&#34; to dismiss the error message.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;In macOS, access System Preferences &amp;gt; Security &amp;amp; Privacy.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Select the General tab and click the &#34;Allow Anyway&#34; button.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run &lt;code&gt;fregot&lt;/code&gt; again:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;fregot&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;macOS will ask you to confirm that you want to open it. Select &#34;Open.&#34;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;You can now execute &lt;code&gt;fregot&lt;/code&gt; commands.&lt;/p&gt; &#xA;&lt;h2&gt;Additional Reading&lt;/h2&gt; &#xA;&lt;p&gt;Want to learn more? Check out these resources:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.openpolicyagent.org/docs/latest/policy-language/&#34;&gt;Rego&lt;/a&gt;: OPA&#39;s query language for writing policies&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.openpolicyagent.org/&#34;&gt;OPA&lt;/a&gt;: the Open Policy Agent&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.openpolicyagent.org/docs/latest/policy-reference/&#34;&gt;Policy Reference&lt;/a&gt;: a detailed reference for everything you ever wanted to know about Rego&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.openpolicyagent.org/docs/latest/policy-cheatsheet/&#34;&gt;Policy Cheatsheet&lt;/a&gt;: a quick reference for Rego types, functions, and more&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.openpolicyagent.org/docs/latest/terraform/&#34;&gt;Rego and Terraform example&lt;/a&gt;: a policy that checks Terraform plans for compliance prior to deployment&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.openpolicyagent.org/docs/latest/kubernetes-introduction/&#34;&gt;Rego and Kubernetes example&lt;/a&gt;: a tutorial on admission control for Kubernetes using Rego policy&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/De_Morgan%27s_laws&#34;&gt;De Morgan&#39;s laws&lt;/a&gt;: a deep dive into transformation rules useful for writing Rego logic.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>pdep-mn-utn/parcial-carreras</title>
    <updated>2022-07-04T01:47:26Z</updated>
    <id>tag:github.com,2022-07-04:/pdep-mn-utn/parcial-carreras</id>
    <link href="https://github.com/pdep-mn-utn/parcial-carreras" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Parcial resuelto&lt;/h1&gt; &#xA;&lt;p&gt;Enunciado: &lt;a href=&#34;https://docs.google.com/document/d/1g2Gc81R62_xAIiGF0H663ypAz1vxJybr5LDo1sj9tAU/edit?ts=60bd6f9e#heading=h.ielqgky5ojzp&#34;&gt;Carreras&lt;/a&gt; (09/06/2021)&lt;/p&gt;</summary>
  </entry>
</feed>