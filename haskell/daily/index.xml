<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Haskell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-01-06T01:32:23Z</updated>
  <subtitle>Daily Trending of Haskell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>haskell-servant/servant</title>
    <updated>2023-01-06T01:32:23Z</updated>
    <id>tag:github.com,2023-01-06:/haskell-servant/servant</id>
    <link href="https://github.com/haskell-servant/servant" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Main repository for the servant libraries — DSL for describing, serving, querying, mocking, documenting web applications and more!&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;servant - A Type-Level Web DSL&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/haskell-servant/servant/master/servant.png&#34; alt=&#34;servant&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;We have a &lt;a href=&#34;http://docs.servant.dev/en/stable/tutorial/index.html&#34;&gt;tutorial&lt;/a&gt; that introduces the core features of servant. After this article, you should be able to write your first servant webservices, learning the rest from the haddocks&#39; examples.&lt;/p&gt; &#xA;&lt;p&gt;The core documentation can be found &lt;a href=&#34;http://docs.servant.dev/&#34;&gt;here&lt;/a&gt;. Other blog posts, videos and slides can be found on the &lt;a href=&#34;http://www.servant.dev/&#34;&gt;website&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you need help, drop by the IRC channel (#haskell-servant on libera.chat) or &lt;a href=&#34;https://groups.google.com/forum/#!forum/haskell-servant&#34;&gt;mailing list&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;code&gt;CONTRIBUTING.md&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Release process outline (by phadej)&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Update changelog and bump versions in &lt;code&gt;master&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;git log --oneline v0.12.. | grep &#39;Merge pull request&#39;&lt;/code&gt; is a good starting point (use correct previous release tag)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Create a release branch, e.g. &lt;code&gt;release-0.13&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Release branch is useful for backporting fixes from &lt;code&gt;master&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Smoke test in &lt;a href=&#34;https://github.com/phadej/servant-universe&#34;&gt;&lt;code&gt;servant-universe&lt;/code&gt;&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;git submodule foreach git checkout master&lt;/code&gt; and &lt;code&gt;git submodule foreach git pull&lt;/code&gt; to get newest of everything.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;cabal new-build --enable-tests all&lt;/code&gt; to verify that everything builds, and &lt;code&gt;cabal new-test all&lt;/code&gt; to run tests &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;It&#39;s a good idea to separate these steps, as tests often pass, if they compile :)&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;See &lt;code&gt;cabal.project&lt;/code&gt; to selectively &lt;code&gt;allow-newer&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;If some packages are broken, on your discretisation there are two options: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Fix them and make PRs: it&#39;s a good idea to test against older &lt;code&gt;servant&lt;/code&gt; version too.&lt;/li&gt; &#xA;     &lt;li&gt;Temporarily comment out broken package&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;If you make a commit for &lt;code&gt;servant-universe&lt;/code&gt;, you can use it as submodule in private projects to test even more&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;When ripples are cleared out: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;git tag -s&lt;/code&gt; the release&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;git push --tags&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;cabal sdist&lt;/code&gt; and &lt;code&gt;cabal upload&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;TechEmpower framework benchmarks&lt;/h2&gt; &#xA;&lt;p&gt;We develop and maintain the servant TFB entry in &lt;a href=&#34;https://github.com/haskell-servant/FrameworkBenchmarks/&#34;&gt;https://github.com/haskell-servant/FrameworkBenchmarks/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;To verify (i.e. compile and test that it works)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./tfb --mode verify --test servant servant-beam servant-psql-simple --type json plaintext db fortune&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To compare with &lt;code&gt;warp&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./tfb --mode benchmark --test warp servant servant-beam servant-psql-simple --type json plaintext db fortune&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To compare with &lt;code&gt;reitit&lt;/code&gt; (Clojure framework)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./tfb --mode benchmark --test reitit reitit-async reitit-jdbc servant servant-beam servant-psql-simple --type json plaintext db fortune&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can see the visualised results at &lt;a href=&#34;https://www.techempower.com/benchmarks/#section=test&#34;&gt;https://www.techempower.com/benchmarks/#section=test&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Nix&lt;/h2&gt; &#xA;&lt;p&gt;A developer shell.nix file is provided in the &lt;code&gt;nix&lt;/code&gt; directory&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/haskell-servant/servant/master/nix/README.md&#34;&gt;nix/README.md&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Gabriella439/nix-diff</title>
    <updated>2023-01-06T01:32:23Z</updated>
    <id>tag:github.com,2023-01-06:/Gabriella439/nix-diff</id>
    <link href="https://github.com/Gabriella439/nix-diff" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Explain why two Nix derivations differ&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;code&gt;nix-diff&lt;/code&gt;&lt;/h1&gt; &#xA;&lt;p&gt;This package provides a &lt;code&gt;nix-diff&lt;/code&gt; executable which explains why two Nix derivations differ. The most common use cases for this are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Understanding why you have a cache miss&lt;/li&gt; &#xA; &lt;li&gt;Verifying a Nix change had the intended effect at the derivation level&lt;/li&gt; &#xA; &lt;li&gt;Improving your understanding of how Nix works&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For example, consider the following Nix derivation to build a bare-bones NixOS system:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nix&#34;&gt;let&#xA;  nixos = import &amp;lt;nixpkgs/nixos&amp;gt; {&#xA;    system = &#34;x86_64-linux&#34;;&#xA;&#xA;    configuration = {&#xA;      boot.loader.grub.devices = [ &#34;/dev/sda&#34; ];&#xA;&#xA;      fileSystems.&#34;/&#34; = {&#xA;        device = &#34;/dev/sda&#34;;&#xA;      };&#xA;    };&#xA;  };&#xA;&#xA;in&#xA;  nixos.system&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We can use &lt;code&gt;nix-instantiate&lt;/code&gt; to compute the derivation for the above file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ nix-instantiate example.nix  # Your exact hash might differ&#xA;warning: you did not specify ‘--add-root’; the result might be removed by the garbage collector&#xA;/nix/store/6z9nr5pzs4j1v9mld517dmlcz61zy78z-nixos-system-nixos-18.03pre119245.5cfd049a03.drv&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now, let&#39;s add a service to our system definition:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nix&#34;&gt;let&#xA;  nixos = import &amp;lt;nixpkgs/nixos&amp;gt; {&#xA;    system = &#34;x86_64-linux&#34;;&#xA;&#xA;    configuration = {&#xA;      boot.loader.grub.devices = [ &#34;/dev/sda&#34; ];&#xA;&#xA;      fileSystems.&#34;/&#34; = {&#xA;        device = &#34;/dev/sda&#34;;&#xA;      };&#xA;&#xA;      services.apache-kafka.enable = true;&#xA;    };&#xA;  };&#xA;&#xA;in&#xA;  nixos.system&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;... and compute the derivation for the updated system:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ nix-instantiate example.nix&#xA;warning: you did not specify ‘--add-root’; the result might be removed by the garbage collector&#xA;/nix/store/k05ibijg0kknvwrgfyb7dxwjrs8qrlbj-nixos-system-nixos-18.03pre119245.5cfd049a03.drv&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We can use &lt;code&gt;nix-diff&lt;/code&gt; to compare the two computed derivations to determine what changed about our system:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ nix-diff /nix/store/6z9nr5pzs4j1v9mld517dmlcz61zy78z-nixos-system-nixos-18.03pre119245.5cfd049a03.drv /nix/store/k05ibijg0kknvwrgfyb7dxwjrs8qrlbj-nixos-system-nixos-18.03pre119245.5cfd049a03.drv&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;... which produces the following output:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/KUB4rXx.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s also possible to pass store paths or links to store paths, for example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ShellSession&#34;&gt;$ nix-build example.nix&#xA;$ nix-diff /run/current-system ./result&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Testing&lt;/h2&gt; &#xA;&lt;p&gt;Run tests, using &lt;code&gt;cabal test&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;p&gt;You need to have nix installed in your PC.&lt;/p&gt; &#xA;&lt;h2&gt;Development status&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/Gabriella439/nix-diff&#34;&gt;&lt;img src=&#34;https://travis-ci.org/Gabriella439/nix-diff.png&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;I don&#39;t currently plan to add any new features, but I do welcome feature requests. Just open an issue on the issue tracker if you would like to request an improvement.&lt;/p&gt; &#xA;&lt;h2&gt;License (BSD 3-clause)&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;Copyright (c) 2017 Gabriella Gonzalez&#xA;All rights reserved.&#xA;&#xA;Redistribution and use in source and binary forms, with or without modification,&#xA;are permitted provided that the following conditions are met:&#xA;    * Redistributions of source code must retain the above copyright notice,&#xA;      this list of conditions and the following disclaimer.&#xA;    * Redistributions in binary form must reproduce the above copyright notice,&#xA;      this list of conditions and the following disclaimer in the documentation&#xA;      and/or other materials provided with the distribution.&#xA;    * Neither the name of Gabriella Gonzalez nor the names of other contributors&#xA;      may be used to endorse or promote products derived from this software&#xA;      without specific prior written permission.&#xA;&#xA;THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS &#34;AS IS&#34; AND&#xA;ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED&#xA;WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE&#xA;DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR&#xA;ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#xA;(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;&#xA;LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON&#xA;ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT&#xA;(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS&#xA;SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>