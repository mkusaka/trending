<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Haskell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-01-14T01:36:11Z</updated>
  <subtitle>Daily Trending of Haskell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>sonyxperiadev/dataflow</title>
    <updated>2023-01-14T01:36:11Z</updated>
    <id>tag:github.com,2023-01-14:/sonyxperiadev/dataflow</id>
    <link href="https://github.com/sonyxperiadev/dataflow" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Render graphs using a declarative markup.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;DataFlow&lt;/h1&gt; &#xA;&lt;p&gt;Render graphs using a declarative markup. Currently supports DFD (&lt;a href=&#34;http://en.wikipedia.org/wiki/Data_flow_diagram&#34;&gt;http://en.wikipedia.org/wiki/Data_flow_diagram&lt;/a&gt;) and sequence diagrams (&lt;a href=&#34;http://plantuml.sourceforge.net/sequence.html&#34;&gt;http://plantuml.sourceforge.net/sequence.html&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/sonyxperiadev/dataflow/master/examples/webapp.dfd.png&#34; alt=&#34;DFD Output&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;To install using cabal run:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cabal install dataflow&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;There are some binaries available in &lt;a href=&#34;https://github.com/sonyxperiadev/dataflow/releases&#34;&gt;Releases&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you want to use Docker there are images available &lt;a href=&#34;https://hub.docker.com/r/owickstrom/dataflow/&#34;&gt;on Docker Hub&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;For build instructions see &lt;a href=&#34;https://raw.githubusercontent.com/sonyxperiadev/dataflow/master/BUILD.md&#34;&gt;BUILD.md&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;The following forms are supported by DataFlow.&lt;/p&gt; &#xA;&lt;h4&gt;IDs&lt;/h4&gt; &#xA;&lt;p&gt;An ID can contain letters, numbers and underscores. It must start with a letter.&lt;/p&gt; &#xA;&lt;!-- Not dot code, but use dot code highlighter for .flow code --&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dot&#34;&gt;my_id_contain_4_words&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Strings&lt;/h4&gt; &#xA;&lt;p&gt;String literals are written using double quotes.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dot&#34;&gt;&#34;this is a string and it can contain everything but double quotes and newlines&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE!&lt;/strong&gt; Escaping characters inside strings is not supported at the moment.&lt;/p&gt; &#xA;&lt;h4&gt;Text Blocks&lt;/h4&gt; &#xA;&lt;p&gt;Text blocks are special strings, enclosed in backticks, that are can span multiple lines in the source document. The space characters before the first non-space characters on each line are trimmed, regardless of the indentation.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dot&#34;&gt;`this is&#xA;      a&#xA;  textblock`&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;... is converted to:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;this is&#xA;a&#xA;textblock&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Arrays&lt;/h4&gt; &#xA;&lt;p&gt;Arrays can contain other values (arrays, strings, text blocks).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dot&#34;&gt;[&#34;hello&#34;, &#34;world&#34;, [&#34;I&#34;, &#34;am&#34;, `nested&#xA;                                here`]]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Attributes&lt;/h4&gt; &#xA;&lt;p&gt;Attributes are key-value pairs for diagrams and nodes that are used by output renderers. Attributes are enclosed by curly brackets. For nodes that can contain other nodes, attributes must appear before nodes.&lt;/p&gt; &#xA;&lt;p&gt;Keys have the same rules as IDs. Values can be strings or text blocks.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dot&#34;&gt;{&#xA;  key1 = &#34;attr value&#34;&#xA;  key2 = `attr&#xA;          value`&#xA;  key3 = [&#34;value1&#34;, &#34;value2&#34;]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;diagram&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;diagram&lt;/code&gt; is the top-level form and must appear exactly once in a DataFlow document. It can contain attributes and nodes.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dot&#34;&gt;diagram {&#xA;  title = &#34;My diagram&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;boundary&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;The &lt;code&gt;boundary&lt;/code&gt; form declares a TrustBoundary node that can contain attributes and other nodes. Boundaries are only allowed in the top-level diagram and they must have unique IDs.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dot&#34;&gt;diagram {&#xA;  boundary my_boundary {&#xA;    title = &#34;My System&#34;&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;nodes: &lt;code&gt;io&lt;/code&gt;, &lt;code&gt;function&lt;/code&gt;, &lt;code&gt;database&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;The &lt;code&gt;io&lt;/code&gt;, &lt;code&gt;function&lt;/code&gt; and &lt;code&gt;database&lt;/code&gt; forms declare &lt;code&gt;InputOutput&lt;/code&gt;, &lt;code&gt;Function&lt;/code&gt; and &lt;code&gt;Database&lt;/code&gt; nodes, respectively. The nodes have IDs and they can contain attributes. Empty attribute brackets can be omitted.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dot&#34;&gt;diagram {&#xA;  io thing1&#xA;&#xA;  io thing2 {&#xA;    title = &#34;Thing 2&#34;&#xA;  }&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;-&amp;gt;&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;The &lt;code&gt;-&amp;gt;&lt;/code&gt; form declares a &lt;code&gt;Flow&lt;/code&gt; between the nodes referenced by their IDs. It can contain attributes. Empty attribute brackets can be omitted. Flows must be declared after all nodes.&lt;/p&gt; &#xA;&lt;p&gt;Note that the arrow can be reversed as well (&lt;code&gt;&amp;lt;-&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dot&#34;&gt;diagram {&#xA;  thing1 -&amp;gt; thing2&#xA;&#xA;  thing1 &amp;lt;- thing2 {&#xA;    operation = &#34;Greet&#34;&#xA;    data = &#34;A nice greeting&#34;&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Comment&lt;/h4&gt; &#xA;&lt;p&gt;Comments are written using &lt;code&gt;/*&lt;/code&gt; and &lt;code&gt;*/&lt;/code&gt; and are ignored by the Reader. They&#39;re only used for human consumption.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dot&#34;&gt;diagram {&#xA;  /* I can write&#xA;   * whatever I&#xA;   * want in here! */&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Example&lt;/h2&gt; &#xA;&lt;p&gt;The image from the top of this README is rendered from the following DataFlow document.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dot&#34;&gt;diagram {&#xA;  title = &#34;Webapp&#34;&#xA;&#xA;  /* Some comment about this... */&#xA;  threats = `&#xA;    No particular threats at this point.&#xA;&#xA;    It&#39;s **extremely** safe.`&#xA;&#xA;  boundary browser {&#xA;    title = &#34;Browser&#34;&#xA;&#xA;    function client {&#xA;      title = &#34;Client&#34;&#xA;    }&#xA;  }&#xA;&#xA;  boundary aws {&#xA;    title = &#34;Amazon AWS&#34;&#xA;&#xA;    function server {&#xA;      title = &#34;Web Server&#34;&#xA;    }&#xA;    database logs {&#xA;      title = &#34;Logs&#34;&#xA;    }&#xA;  }&#xA;  io analytics {&#xA;    title = &#34;Google Analytics&#34;&#xA;  }&#xA;&#xA;  client -&amp;gt; server {&#xA;    operation = &#34;Request /&#34;&#xA;    description = `User navigates with a browser to see some content.`&#xA;  }&#xA;  server -&amp;gt; logs {&#xA;    operation = &#34;Log&#34;&#xA;    data = `The user&#xA;            IP address.`&#xA;    description = `Logged to a ELK stack.`&#xA;  }&#xA;  server -&amp;gt; client {&#xA;    operation = &#34;Response&#34;&#xA;    data = &#34;User Profile&#34;&#xA;    description = `The server responds with some HTML.`&#xA;  }&#xA;  analytics &amp;lt;- client {&#xA;    operation = &#34;Log&#34;&#xA;    data = &#34;Page Navigation&#34;&#xA;    description = `The Google Analytics plugin sends navigation&#xA;                   data to Google.`&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Run DataFlow&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;dataflow&lt;/code&gt; executable takes an output format and a DataFlow source document and writes the output to &lt;code&gt;stdout&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;dataflow (dfd|seq) FILE&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;DFD&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/sonyxperiadev/dataflow/master/examples/legend.dfd.png&#34; alt=&#34;DFD Legend&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;To use the &lt;em&gt;DFD&lt;/em&gt; output you need &lt;a href=&#34;http://www.graphviz.org/&#34;&gt;Graphviz&lt;/a&gt; installed.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;dataflow dfd webapp.flow | dot -Tpng &amp;gt; webapp.png&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Output&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/sonyxperiadev/dataflow/master/examples/webapp.dfd.png&#34; alt=&#34;DFD Output&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Sequence Diagram&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/sonyxperiadev/dataflow/master/examples/legend.seq.png&#34; alt=&#34;Sequence Diagram Legend&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can use &lt;a href=&#34;http://plantuml.sourceforge.net/&#34;&gt;PlantUML&lt;/a&gt; to generate a sequence diagram.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;dataflow seq webapp.flow | java -Djava.awt.headless=true -jar plantuml.jar -tpng -pipe &amp;gt; webapp.png&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Output&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/sonyxperiadev/dataflow/master/examples/webapp.seq.png&#34; alt=&#34;Sequence Diagram Output&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Templating&lt;/h2&gt; &#xA;&lt;p&gt;You can use &lt;a href=&#34;https://mustache.github.io/&#34;&gt;Mustache&lt;/a&gt; to output arbitrary text.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;dataflow template template.ha webapp.flow &amp;gt; webapp.html&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Built-in Functions and Values&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;markdown&lt;/code&gt; - Convert the attribute at the given key from Markdown to HTML.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-mustache&#34;&gt;{{#markdown}}my_markdown_attr{{/markdown}}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;html_linebreaks&lt;/code&gt; - Replace &lt;code&gt;\n&lt;/code&gt; with &lt;code&gt;&amp;lt;br/&amp;gt;&lt;/code&gt; elements in the attribute at the given key, to retain linebreaks in HTML output.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-mustache&#34;&gt;{{#html_linebreaks}}my_formatted_attr{{/html_linebreaks}}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;filename_without_extension&lt;/code&gt; - The input &lt;code&gt;.flow&lt;/code&gt; file name with no path and no extension. Useful when generating graphics and text/HTML with matching filenames (e.g. &lt;code&gt;my-flow.html&lt;/code&gt; includes &lt;code&gt;my-flow.png&lt;/code&gt;).&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-mustache&#34;&gt;&amp;lt;img src=&#34;{{filename_without_extension}}.png&#34; /&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;flows&lt;/code&gt; - a list of all the Flow nodes in the diagram. Attributes of the flow is accessible inside the iteration scope, including a &lt;code&gt;number&lt;/code&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-mustache&#34;&gt;&amp;lt;ol&amp;gt;&#xA;{{#flows}}&#xA;  &amp;lt;li&amp;gt;{{number}} - {{description}}&amp;lt;/li&amp;gt;&#xA;{{/flows}}&#xA;&amp;lt;/ol&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For an example see &lt;a href=&#34;https://raw.githubusercontent.com/sonyxperiadev/dataflow/master/examples/template.ha&#34;&gt;template.ha&lt;/a&gt; and the output HTML in &lt;a href=&#34;https://raw.githubusercontent.com/sonyxperiadev/dataflow/master/examples/webapp.html&#34;&gt;webapp.html&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Output&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/sonyxperiadev/dataflow/master/examples/webapp.seq.png&#34; alt=&#34;Sequence Diagram Output&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Makefile Example&lt;/h2&gt; &#xA;&lt;p&gt;The following Makefile finds &lt;code&gt;.flow&lt;/code&gt; sources in &lt;code&gt;src&lt;/code&gt; and generates DFDs, in SVG format, in &lt;code&gt;dist&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-make&#34;&gt;SOURCES=$(shell find src/*.flow)&#xA;TARGETS=$(SOURCES:src/%.flow=dist/%.dfd.svg)&#xA;&#xA;K := $(if $(shell which dataflow),,$(error &#34;No dataflow executable in PATH. See https://github.com/SonyMobile/dataflow for install instructions)))&#34;))&#xA;&#xA;dist/%.dfd.svg: src/%.flow&#xA;&#x9;@dataflow dfd $&amp;lt; | dot -Tsvg &amp;gt; $@&#xA;&#xA;dfd: $(TARGETS)&#xA;&#xA;clean:&#xA;  rm -f $(TARGETS)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;BSD-3, see &lt;a href=&#34;https://raw.githubusercontent.com/sonyxperiadev/dataflow/master/LICENSE&#34;&gt;LICENSE&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>