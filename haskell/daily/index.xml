<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Haskell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-10-07T01:34:53Z</updated>
  <subtitle>Daily Trending of Haskell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>kowainik/colourista</title>
    <updated>2022-10-07T01:34:53Z</updated>
    <id>tag:github.com,2022-10-07:/kowainik/colourista</id>
    <link href="https://github.com/kowainik/colourista" rel="alternate"></link>
    <summary type="html">&lt;p&gt;‚ÄéÔ∏è‚Äçüåà Convenient interface for printing colourful messages&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;colourista&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/4276606/74611761-e7d69c80-50f6-11ea-8065-c9da0371b9bf.png&#34; alt=&#34;logo&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/kowainik/colourista/actions&#34;&gt;&lt;img src=&#34;https://github.com/kowainik/colourista/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;GitHub CI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hackage.haskell.org/package/colourista&#34;&gt;&lt;img src=&#34;https://img.shields.io/hackage/v/colourista.svg?logo=haskell&#34; alt=&#34;Hackage&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://stackage.org/lts/package/colourista&#34;&gt;&lt;img src=&#34;http://stackage.org/package/colourista/badge/lts&#34; alt=&#34;Stackage Lts&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://stackage.org/nightly/package/colourista&#34;&gt;&lt;img src=&#34;http://stackage.org/package/colourista/badge/nightly&#34; alt=&#34;Stackage Nightly&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/kowainik/colourista/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-MPL--2.0-blue.svg?sanitize=true&#34; alt=&#34;MPL-2.0 license&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;¬´The best colour in the whole world is the one that looks good on you.¬ª&lt;/p&gt; &#xA; &lt;p&gt;‚Äî Coco Chanel&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;code&gt;colourista&lt;/code&gt; is the library that provides a convenient interface for printing colourful messages to the terminal. It is based on &lt;a href=&#34;https://hackage.haskell.org/package/ansi-terminal&#34;&gt;&lt;code&gt;ansi-terminal&lt;/code&gt;&lt;/a&gt;, however, in contradistinction to this Haskell library, &lt;code&gt;colourista&lt;/code&gt; is a high-level wrapper focused on easily achieved output modification without low-level setup.&lt;/p&gt; &#xA;&lt;h2&gt;Interface&lt;/h2&gt; &#xA;&lt;p&gt;The two main functions that &lt;code&gt;colourista&lt;/code&gt; provides are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;formatWith&lt;/code&gt; ‚Äî the function that formats pure output by applying provided formatting codes. It works with polymorphic strings.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;formattedMessage&lt;/code&gt; ‚Äî the function that outputs the formatted output directly into the terminal (working in &lt;code&gt;IO&lt;/code&gt; with &lt;code&gt;Text&lt;/code&gt;).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The library also provides a set of different pure and impure helpers for the colouring and emphasis.&lt;/p&gt; &#xA;&lt;h2&gt;Example&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/8126674/74609327-0a5dbb00-50e1-11ea-8c4b-2db4ab5b42a2.png&#34; alt=&#34;output&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;How to use&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;colourista&lt;/code&gt; is compatible with the latest GHC compiler versions starting from &lt;code&gt;8.2.2&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;In order to start using &lt;code&gt;colourista&lt;/code&gt; in your project, you will need to set it up with the three easy steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Add the dependency on &lt;code&gt;colourista&lt;/code&gt; in your project&#39;s &lt;code&gt;.cabal&lt;/code&gt; file. For this, you should modify the &lt;code&gt;build-depends&lt;/code&gt; section by adding the name of this library. After the adjustment, this section could look like this:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;build-depends: colourista ^&amp;gt;= LATEST_VERSION&#xA;             , ...&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;In the module where you wish to use the colourful output with &lt;code&gt;colourista&lt;/code&gt;, you should add the import:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;import Colourista (...)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Now you can use the functions from the library. For example:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;import qualified Data.Text as Text&#xA;&#xA;main :: IO ()&#xA;main = successMessage $ Text.pack &#34;All set up!&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Usage with Stack&lt;/h3&gt; &#xA;&lt;p&gt;If &lt;code&gt;colourista&lt;/code&gt; is not available on your current Stackage resolver yet, fear not! You can still use it from Hackage by adding the following to the &lt;code&gt;extra-deps&lt;/code&gt; section of your &lt;code&gt;stack.yaml&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;extra-deps:&#xA;  - colourista-0.1.0.0&#xA;  - ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then you can add it as a dependency in your &lt;code&gt;package.yaml&lt;/code&gt; file as usual:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;library:&#xA;  dependencies:&#xA;    - colourista&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Great!&lt;/p&gt; &#xA;&lt;h2&gt;Acknowledgement&lt;/h2&gt; &#xA;&lt;p&gt;Icons made by &lt;a href=&#34;http://www.freepik.com&#34;&gt;Freepik&lt;/a&gt; from &lt;a href=&#34;https://www.flaticon.com/&#34;&gt;www.flaticon.com&lt;/a&gt; is licensed by &lt;a href=&#34;http://creativecommons.org/licenses/by/3.0/&#34;&gt;CC 3.0 BY&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>EarnestResearch/honeycomb-haskell</title>
    <updated>2022-10-07T01:34:53Z</updated>
    <id>tag:github.com,2022-10-07:/EarnestResearch/honeycomb-haskell</id>
    <link href="https://github.com/EarnestResearch/honeycomb-haskell" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Honeycomb client library for Haskell&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://github.com/EarnestResearch/honeycomb-haskell/workflows/Test/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;honeycomb&lt;/h1&gt; &#xA;&lt;p&gt;Honeycomb client library for Haskell&lt;/p&gt; &#xA;&lt;h1&gt;honeycomb-wai&lt;/h1&gt; &#xA;&lt;p&gt;WAI support for Honeycomb/Haskell&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>reanimate/reanimate</title>
    <updated>2022-10-07T01:34:53Z</updated>
    <id>tag:github.com,2022-10-07:/reanimate/reanimate</id>
    <link href="https://github.com/reanimate/reanimate" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Haskell library for building declarative animations based on SVG graphics&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://hackage.haskell.org/package/reanimate&#34;&gt;&lt;img src=&#34;https://img.shields.io/hackage/v/reanimate.svg?color=success&#34; alt=&#34;Hackage&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://stackage.org/lts/package/reanimate&#34;&gt;&lt;img src=&#34;https://stackage.org/package/reanimate/badge/lts&#34; alt=&#34;packagename on Stackage LTS&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://stackage.org/nightly/package/reanimate&#34;&gt;&lt;img src=&#34;https://stackage.org/package/reanimate/badge/nightly&#34; alt=&#34;packagename on Stackage Nightly&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://dev.azure.com/lemmih0612/reanimate/_build/latest?definitionId=2&amp;amp;branchName=master&#34;&gt;&lt;img src=&#34;https://dev.azure.com/lemmih0612/reanimate/_apis/build/status/reanimate.reanimate?branchName=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://reanimate.readthedocs.io/en/latest/?badge=latest&#34;&gt;&lt;img src=&#34;https://readthedocs.org/projects/reanimate/badge/?version=latest&#34; alt=&#34;Documentation Status&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/badge/platform-linux%20%7C%20osx%20%7C%20windows-informational&#34; alt=&#34;Platforms&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/repo-size/reanimate/reanimate&#34; alt=&#34;GitHub repo size&#34;&gt; &lt;a href=&#34;https://reanimate.github.io/reanimate/haddock.txt&#34;&gt;&lt;img src=&#34;https://img.shields.io/endpoint?url=https%3A%2F%2Freanimate.github.io%2Freanimate%2Fhaddock_badge.json&#34; alt=&#34;API docs coverage&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/repository/docker/reanimate/discord-bot&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/cloud/build/reanimate/discord-bot?label=discord-bot&#34; alt=&#34;Docker Cloud Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/Qs28Dv6&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/731822102935502908&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Reanimate&lt;/h1&gt; &#xA;&lt;p&gt;Reanimate is a library for programmatically generating animations with a twist towards mathematics / 2D vector drawings. A lot of inspiration was drawn from 3b1b&#39;s manim library.&lt;/p&gt; &#xA;&lt;p&gt;Reanimate aims at being a batteries-included way of gluing together different technologies: SVG as a universal image format, LaTeX for typesetting, ffmpeg for video encoding, inkscape/imagemagick for rasterization, potrace for vectorization, blender/povray for 3D graphics, and Haskell for scripting.&lt;/p&gt; &#xA;&lt;p&gt;In more practical terms, reanimate is a library for turning code like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;main = reanimate $ docEnv $ playThenReverseA drawCircle&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;... into animations like this:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/reanimate/reanimate/master/examples/doc_playThenReverseA.hs&#34;&gt;&lt;img src=&#34;https://i.imgur.com/C02hPw8.gif&#34; alt=&#34;Draw Circle&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you like what you see, boost reanimate&#39;s visibility with a star ‚≠ê or consider becoming a &lt;a href=&#34;https://github.com/sponsors/Lemmih&#34;&gt;sponsor ‚ù§&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;What is reanimate good at?&lt;/h1&gt; &#xA;&lt;h2&gt;Vector graphics and math&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/reanimate/reanimate/master/examples/demo_tangent.hs&#34;&gt;&lt;img src=&#34;https://i.imgur.com/w6gEkbl.gif&#34; alt=&#34;Tangent/Normal&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/reanimate/reanimate/master/examples/tut_glue_fourier.hs&#34;&gt;&lt;img src=&#34;https://i.imgur.com/pX4YRa4.gif&#34; alt=&#34;Fourier&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Mapping and tracing&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/reanimate/reanimate/master/videos/map-projection/gif.hs&#34;&gt;&lt;img src=&#34;https://i.imgur.com/OrKiOqF.gif&#34; alt=&#34;Geo JSON&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/reanimate/reanimate/master/examples/tut_glue_potrace.hs&#34;&gt;&lt;img src=&#34;https://i.imgur.com/Y6NsPWF.gif&#34; alt=&#34;Object tracing&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Mathematical typesetting and effects&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/reanimate/reanimate/master/examples/tut_glue_latex.hs&#34;&gt;&lt;img src=&#34;https://i.imgur.com/e6oO4wz.gif&#34; alt=&#34;LaTeX&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/reanimate/reanimate/master/examples/demo_stars.hs&#34;&gt;&lt;img src=&#34;https://i.imgur.com/yek3v4b.gif&#34; alt=&#34;Stars&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;2D physics and 3D graphics&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/reanimate/reanimate/master/examples/tut_glue_physics.hs&#34;&gt;&lt;img src=&#34;https://i.imgur.com/ZHUfWdp.gif&#34; alt=&#34;2D Physics&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/reanimate/reanimate/master/examples/tut_glue_povray.hs&#34;&gt;&lt;img src=&#34;https://i.imgur.com/4wdtuJw.gif&#34; alt=&#34;3D graphics&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Prerequisites&lt;/h1&gt; &#xA;&lt;p&gt;Reanimate is built using the Haskell Tool Stack. For installation instructions, see: &lt;a href=&#34;https://docs.haskellstack.org/en/stable/README/&#34;&gt;https://docs.haskellstack.org/en/stable/README/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Optionally, you can install one or more of these programs to enable additional features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.ffmpeg.org/&#34;&gt;ffmpeg&lt;/a&gt;, enables rendering animations to video files.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.latex-project.org/&#34;&gt;latex&lt;/a&gt;, enables mathematical typesetting.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://inkscape.org/&#34;&gt;inkscape&lt;/a&gt;/&lt;a href=&#34;https://imagemagick.org/index.php&#34;&gt;imagemagick&lt;/a&gt;, enables SVG-&amp;gt;PNG convertions.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://potrace.sourceforge.net/&#34;&gt;potrace&lt;/a&gt;, enables PNG-&amp;gt;SVG tracing.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.povray.org/&#34;&gt;povray&lt;/a&gt;, enables raytracing.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.blender.org/&#34;&gt;blender&lt;/a&gt;, enables 3D graphics.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;I highly recommend that you install at least &#39;ffmpeg&#39; and &#39;latex&#39;.&lt;/p&gt; &#xA;&lt;h1&gt;Getting started / Running an example&lt;/h1&gt; &#xA;&lt;p&gt;Reanimate offers stack templates for getting started with a minimal example and automatic code reloading. Running the commands below will put a one-line animation in the &#39;animate&#39; folder and then display the animation in a browser window. You can then edit the animation source code and watch the animation update in real time:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ stack new animate github:reanimate/plain&#xA;$ cd animate/&#xA;$ # both &#39;cabal repl&#39; and &#39;stack repl&#39; can be used here:&#xA;$ cabal repl&#xA;:cmd reanimateLive&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Running examples from the repository&lt;/h2&gt; &#xA;&lt;p&gt;Reanimate has a large collection of small examples which are both used for regression testing and for GIFs in the API reference documentation. You can run these examples by first cloning the repository and then running the examples as if they were executables:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ git clone https://github.com/reanimate/reanimate.git&#xA;$ cd reanimate/&#xA;$ stack build&#xA;$ stack ./examples/doc_drawCircle.hs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This should render the &lt;code&gt;doc_drawCircle&lt;/code&gt; example in a new browser window. Automatic code reloading will not be enabled unless you run &lt;code&gt;:cmd reanimateLive&lt;/code&gt; from a GHCi session.&lt;/p&gt; &#xA;&lt;h2&gt;Running examples from the repository using Cabal&lt;/h2&gt; &#xA;&lt;p&gt;It&#39;s also possible to use cabal instead of stack:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ git clone https://github.com/reanimate/reanimate.git&#xA;$ cd reanimate/&#xA;$ cabal v2-build&#xA;$ # Workaround for a cabal bug: https://github.com/haskell/cabal/issues/6235&#xA;$ export reanimate_datadir=`pwd`&#xA;$ cabal v2-exec -- runhaskell examples/doc_drawCircle.hs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Using Nix&lt;/h2&gt; &#xA;&lt;p&gt;If you&#39;d rather use nix to build an environment with all of the system dependencies mentioned previously do:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ git clone https://github.com/reanimate/reanimate.git&#xA;$ cd reanimate/&#xA;$ nix-shell&#xA;[nix-shell:./reanimate]$ cabal v2-build --write-ghc-environment-files=always&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you have cachix available run &lt;code&gt;cachix use cdodev&lt;/code&gt; before you drop into the nix shell. This will significantly speed things up!&lt;/p&gt; &#xA;&lt;p&gt;This will write a file in the working directory like &lt;code&gt;.ghc.environment.x86_64-linux-8.8.3&lt;/code&gt; which will enable commands like &lt;code&gt;runhaskell&lt;/code&gt; to pick up reanimate.&lt;/p&gt; &#xA;&lt;p&gt;Now, still within the &lt;code&gt;nix-shell&lt;/code&gt; you can run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;[nix-shell:./reanimate]$ reanimate_datadir=. runhaskell examples/doc_drawCircle.hs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Documentation&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;API reference: &lt;a href=&#34;https://hackage.haskell.org/package/reanimate/docs/Reanimate.html&#34;&gt;https://hackage.haskell.org/package/reanimate/docs/Reanimate.html&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Core concepts: &lt;a href=&#34;https://reanimate.readthedocs.io/en/latest/introduction.html&#34;&gt;https://reanimate.readthedocs.io/en/latest/introduction.html&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Design overview: &lt;a href=&#34;https://reanimate.readthedocs.io/en/latest/glue_tut.html&#34;&gt;https://reanimate.readthedocs.io/en/latest/glue_tut.html&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;N-Queens tutorial (somewhat dated, uses reanimate from October 2019): &lt;a href=&#34;https://williamyaoh.com/posts/2020-05-31-reanimate-nqueens-tutorial.html&#34;&gt;https://williamyaoh.com/posts/2020-05-31-reanimate-nqueens-tutorial.html&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;You can also ask questions in the discord channel: &lt;a href=&#34;https://discord.gg/Qs28Dv6&#34;&gt;https://discord.gg/Qs28Dv6&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Features&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Cross-platform. Official support for Linux, MacOS, and Windows.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Well-documented. API &lt;a href=&#34;https://hackage.haskell.org/package/reanimate/docs/Reanimate.html&#34;&gt;reference documentation&lt;/a&gt; include GIFs to illustrate behavior, and in-depth tutorial/explanation articles are hosted on &lt;a href=&#34;https://reanimate.readthedocs.io/en/latest/&#34;&gt;readthedocs.io&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Advanced type-setting via LaTeX.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Voice control: Align animation timings with a transcript.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 3D graphics: Built-in support for integrating povray and blender.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Mapping: Built-in support for GeoJSON and map projections.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Online playground for toying with reanimate scripts.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Roadmap&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Easy-to-use font selection when using latex/xelatex/luatex.&lt;/li&gt; &#xA; &lt;li&gt;Polygon morphing framework with support for several algorithms, including: linear interpolation, as-rigid-as-possible interpolation, and intersection-free interpolation.&lt;/li&gt; &#xA; &lt;li&gt;Built-in tools for creating presentations.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Authors&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;David Himmelstrup.&lt;/li&gt; &#xA; &lt;li&gt;Jan Hrcek.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;This is free and unencumbered software released into the public domain.&lt;/p&gt; &#xA;&lt;p&gt;Anyone is free to copy, modify, publish, use, compile, sell, or distribute this software, either in source code form or as a compiled binary, for any purpose, commercial or non-commercial, and by any means.&lt;/p&gt; &#xA;&lt;h1&gt;Acknowledgments&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Huge thanks to 3b1b&#39;s &lt;a href=&#34;https://github.com/3b1b/manim&#34;&gt;manim&lt;/a&gt; which inspired this library.&lt;/li&gt; &#xA; &lt;li&gt;Thanks to &lt;a href=&#34;https://github.com/Twinside/svg-tree&#34;&gt;svg-tree&lt;/a&gt; for their SVG library.&lt;/li&gt; &#xA; &lt;li&gt;Thanks to &lt;a href=&#34;https://github.com/CthulhuDen/chiphunk&#34;&gt;CthulhuDen/chiphunk&lt;/a&gt; for making a 2D physics library easily available.&lt;/li&gt; &#xA; &lt;li&gt;Thanks to &lt;a href=&#34;https://github.com/missinglink&#34;&gt;Peter Johnson&lt;/a&gt; for reserving the &#39;reanimate&#39; organization on GitHub.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;YouTube&lt;/h1&gt; &#xA;&lt;p&gt;Completed animations are uploaded to the &lt;a href=&#34;https://www.youtube.com/channel/UCbZujyI7i6JbI-I0shPvDgg&#34;&gt;Reanimated Science&lt;/a&gt; channel.&lt;/p&gt; &#xA;&lt;p&gt;Animation snippets are uploaded to the &lt;a href=&#34;https://www.youtube.com/channel/UCL7MwXLtQbhJeb6Ts3_HooA&#34;&gt;Reanimated Science Shorts&lt;/a&gt; channel.&lt;/p&gt;</summary>
  </entry>
</feed>