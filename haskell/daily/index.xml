<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Haskell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-05-29T01:43:13Z</updated>
  <subtitle>Daily Trending of Haskell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>input-output-hk/cardano-node</title>
    <updated>2022-05-29T01:43:13Z</updated>
    <id>tag:github.com,2022-05-29:/input-output-hk/cardano-node</id>
    <link href="https://github.com/input-output-hk/cardano-node" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The core component that is used to participate in a Cardano decentralised blockchain.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;.. raw:: html&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/input-output-hk/cardano-node/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release-pre/input-output-hk/cardano-node.svg?style=for-the-badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://buildkite.com/input-output-hk/cardano-node&#34;&gt;&lt;img src=&#34;https://img.shields.io/buildkite/a978cbb4def7018be3d0a004127da356f4db32f1c318c1a48a/master?label=BUILD&amp;amp;style=for-the-badge&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;table align=&#34;center&#34;&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt;&#xA;   &lt;td colspan=&#34;2&#34; align=&#34;center&#34;&gt;GitHub Actions&lt;/td&gt;&#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;a href=&#34;https://github.com/input-output-hk/cardano-node/actions/workflows/haskell.yml&#34;&gt;&lt;img alt=&#34;GitHub Workflow Status (master)&#34; src=&#34;https://img.shields.io/github/workflow/status/input-output-hk/cardano-node/Haskell%20CI/master&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/input-output-hk/cardano-node/actions/workflows/haskell.yml&#34;&gt;&lt;img alt=&#34;GitHub Workflow Status (branch)&#34; src=&#34;https://img.shields.io/github/workflow/status/input-output-hk/cardano-node/Haskell%20CI/nightly?label=nightly&#34;&gt;&lt;/a&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;code&gt;cardano-node&lt;/code&gt; Overview&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Integration of the &lt;code&gt;ledger &amp;lt;https://github.com/input-output-hk/cardano-ledger-specs&amp;gt;&lt;/code&gt;&lt;em&gt;, &lt;code&gt;consensus &amp;lt;https://github.com/input-output-hk/ouroboros-network/tree/master/ouroboros-consensus&amp;gt;&lt;/code&gt;&lt;/em&gt;, &lt;code&gt;networking &amp;lt;https://github.com/input-output-hk/ouroboros-network/tree/master/ouroboros-network&amp;gt;&lt;/code&gt;_ and &lt;code&gt;node shell &amp;lt;https://github.com/input-output-hk/cardano-shell&amp;gt;&lt;/code&gt;_ repositories.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Logging &amp;lt;https://github.com/input-output-hk/iohk-monitoring-framework&amp;gt;&lt;/code&gt;_ is provided as a &lt;code&gt;feature &amp;lt;https://github.com/input-output-hk/cardano-shell/blob/master/app/Cardano/Shell/Features/Logging.hs&amp;gt;&lt;/code&gt;_ by the node shell to the other packages.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;The cardano-node is the top level for the node and aggregates the other components from other packages: consensus, ledger and networking, with configuration, CLI, logging and monitoring.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The node no longer incorporates wallet or explorer functionality. The wallet backend and explorer backend are separate components that run in separate external processes that communicate with the node via local IPC.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Network Configuration, Genesis and Topology Files&lt;/h1&gt; &#xA;&lt;p&gt;The latest supported networks can be found at &lt;code&gt;&amp;lt;https://hydra.iohk.io/job/Cardano/cardano-node/cardano-deployment/latest-finished/download/1/index.html&amp;gt;&lt;/code&gt;_&lt;/p&gt; &#xA;&lt;h1&gt;How to build&lt;/h1&gt; &#xA;&lt;p&gt;Documentation for building the node can be found &lt;code&gt;here &amp;lt;https://docs.cardano.org/getting-started/installing-the-cardano-node&amp;gt;&lt;/code&gt;_.&lt;/p&gt; &#xA;&lt;h1&gt;Executables&lt;/h1&gt; &#xA;&lt;p&gt;You can download the latest version of &lt;code&gt;cardano-node&lt;/code&gt; and &lt;code&gt;cardano-cli&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;linux &amp;lt;https://hydra.iohk.io/job/Cardano/cardano-node/linux.musl.cardano-node-linux/latest-finished&amp;gt;&lt;/code&gt;_&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;win64 &amp;lt;https://hydra.iohk.io/job/Cardano/cardano-node/linux.windows.cardano-node-win64/latest-finished&amp;gt;&lt;/code&gt;_&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;macos &amp;lt;https://hydra.iohk.io/job/Cardano/cardano-node/macos.cardano-node-macos/latest-finished&amp;gt;&lt;/code&gt;_&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Windows Executable&lt;/h1&gt; &#xA;&lt;h2&gt;Download&lt;/h2&gt; &#xA;&lt;p&gt;You can download &lt;code&gt;here &amp;lt;https://hydra.iohk.io/job/Cardano/cardano-node/linux.windows.cardano-node-win64/latest-finished&amp;gt;&lt;/code&gt;_.&lt;/p&gt; &#xA;&lt;h2&gt;Instructions&lt;/h2&gt; &#xA;&lt;p&gt;The download includes cardano-node.exe and a .dll. To run the node with cardano-node run you need to reference a few files and directories as arguments. These can be copied from the cardano-node repo into the executables directory. The command to run the node on mainnet looks like this:&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: console&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cardano-node.exe run --topology ./configuration/cardano/mainnet-topology.json --database-path ./state --port 3001 --config ./configuration/cardano/mainnet-config.yaml  --socket-path \\.\pipe\cardano-node&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Docker image&lt;/h1&gt; &#xA;&lt;p&gt;You can pull the docker image with the latest version of cardano-node from &lt;code&gt;here &amp;lt;https://hub.docker.com/r/inputoutput/cardano-node&amp;gt;&lt;/code&gt;_.&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: console&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker pull inputoutput/cardano-node&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;&lt;code&gt;cardano-node&lt;/code&gt;&lt;/h1&gt; &#xA;&lt;p&gt;This refers to the client that is used for running a node.&lt;/p&gt; &#xA;&lt;p&gt;The general synopsis is as follows:&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: console&lt;/p&gt; &#xA;&lt;p&gt;Usage: cardano-node run [--topology FILEPATH] [--database-path FILEPATH] [--socket-path FILEPATH] [--byron-delegation-certificate FILEPATH] [--byron-signing-key FILEPATH] [--shelley-kes-key FILEPATH] [--shelley-vrf-key FILEPATH] [--shelley-operational-certificate FILEPATH] [--host-addr IPV4-ADDRESS] [--host-ipv6-addr IPV6-ADDRESS] [--port PORT] [--config NODE-CONFIGURATION] [--validate-db] Run the node.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--topology&lt;/code&gt; - Filepath to a topology file describing which peers the node should connect to.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--database-path&lt;/code&gt; - Path to the blockchain database.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--byron-delegation-certificate&lt;/code&gt; - Optional path to the Byron delegation certificate. The delegation certificate allows the delegator (the issuer of said certificate) to give his/her own block signing rights to somebody else (the delegatee). The delegatee can then sign blocks on behalf of the delegator.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--byron-signing-key&lt;/code&gt; - Optional path to the Byron signing key.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--shelley-signing-key&lt;/code&gt; - Optional path to the Shelley signing key.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--shelley-kes-key&lt;/code&gt; - Optional path to the Shelley KES signing key.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--shelley-vrf-key&lt;/code&gt; - Optional path to the Shelley VRF signing key.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--shelley-operational-certificate&lt;/code&gt; - Optional path to the Shelley operational certificate.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--socket-path&lt;/code&gt; - Path to the socket file.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--host-addr&lt;/code&gt; - Optionally specify your node&#39;s IPv4 address.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--host-ipv6-addr&lt;/code&gt; - Optionally specify your node&#39;s IPv6 address.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--port&lt;/code&gt; - Specify which port to assign to the node.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--config&lt;/code&gt; - Specify the filepath to the config &lt;code&gt;.yaml&lt;/code&gt; file. This file is responsible for all the other node&#39;s required settings. See examples in &lt;code&gt;configuration&lt;/code&gt; (e.g. &lt;code&gt;config-0.yaml &amp;lt;configuration/defaults/simpleview/config-0.yaml&amp;gt;&lt;/code&gt;_).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--validate-db&lt;/code&gt; - Flag to revalidate all on-disk database files&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Configuration &lt;code&gt;.yaml&lt;/code&gt; files&lt;/h1&gt; &#xA;&lt;p&gt;The &lt;code&gt;--config&lt;/code&gt; flag points to a &lt;code&gt;.yaml&lt;/code&gt; file that is responsible to configuring the logging &amp;amp; other important settings for the node. E.g. see the Byron mainnet configuration in this &lt;code&gt;configuration.yaml &amp;lt;https://github.com/input-output-hk/cardano-node/blob/master/configuration/defaults/byron-mainnet/configuration.yaml&amp;gt;&lt;/code&gt;_. Some of the more important settings are as follows:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;Protocol: RealPBFT&lt;/code&gt; -- Protocol the node will execute&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;RequiresNetworkMagic&lt;/code&gt;: RequiresNoMagic -- Used to distinguish between mainnet (&lt;code&gt;RequiresNoMagic&lt;/code&gt;) and testnets (&lt;code&gt;RequiresMagic&lt;/code&gt;)&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Logging&lt;/h1&gt; &#xA;&lt;p&gt;Logs are output to the &lt;code&gt;logs/&lt;/code&gt; dir.&lt;/p&gt; &#xA;&lt;h1&gt;Profiling &amp;amp; statistics&lt;/h1&gt; &#xA;&lt;p&gt;Profiling data and RTS run stats are stored in the &lt;code&gt;profile/&lt;/code&gt; dir.&lt;/p&gt; &#xA;&lt;p&gt;Please see &lt;code&gt;scripts/README.md&lt;/code&gt; for how to obtain profiling information using the scripts.&lt;/p&gt; &#xA;&lt;h1&gt;Scripts&lt;/h1&gt; &#xA;&lt;p&gt;Please see &lt;code&gt;scripts/README.md&lt;/code&gt; for information on the various scripts.&lt;/p&gt; &#xA;&lt;h1&gt;&lt;code&gt;cardano-cli&lt;/code&gt;&lt;/h1&gt; &#xA;&lt;p&gt;A CLI utility to support a variety of key material operations (genesis, migration, pretty-printing..) for different system generations. Usage documentation can be found at &lt;code&gt;cardano-cli/README.md&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The general synopsis is as follows:&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: console&lt;/p&gt; &#xA;&lt;p&gt;Usage: cardano-cli (Era based commands | Byron specific commands | Miscellaneous commands)&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;NOTE: the exact invocation command depends on the environment. If you have only built &lt;code&gt;cardano-cli&lt;/code&gt;, without installing it, then you have to prepend &lt;code&gt;cabal run -- &lt;/code&gt; before &lt;code&gt;cardano-cli&lt;/code&gt;. We henceforth assume that the necessary environment-specific adjustment has been made, so we only mention &lt;code&gt;cardano-cli&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;The subcommands are subdivided in groups, and their full list can be seen in the output of &lt;code&gt;cardano-cli --help&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;All subcommands have help available. For example:&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: console&lt;/p&gt; &#xA;&lt;p&gt;cabal run -- cardano-cli -- byron key migrate-delegate-key-from --help&lt;/p&gt; &#xA;&lt;p&gt;cardano-cli -- byron key migrate-delegate-key-from Usage: cardano-cli byron key migrate-delegate-key-from --from FILEPATH --to FILEPATH Migrate a delegate key from an older version.&lt;/p&gt; &#xA;&lt;p&gt;Available options: --byron-legacy-formats Byron/cardano-sl formats and compatibility --byron-formats Byron era formats and compatibility --from FILEPATH Signing key file to migrate. --to FILEPATH Non-existent file to write the signing key to. -h,--help Show this help text&lt;/p&gt; &#xA;&lt;h1&gt;Genesis operations&lt;/h1&gt; &#xA;&lt;h2&gt;Generation&lt;/h2&gt; &#xA;&lt;p&gt;The Byron genesis generation operations will create a directory that contains:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;genesis.json&lt;/code&gt;: The genesis JSON file itself.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;avvm-seed.*.seed&lt;/code&gt;: Ada Voucher Vending Machine seeds (secret). Affected by &lt;code&gt;--avvm-entry-count&lt;/code&gt; and &lt;code&gt;--avvm-entry-balance&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;delegate-keys.*.key&lt;/code&gt;: Delegate private keys. Affected by: &lt;code&gt;--n-delegate-addresses&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;delegation-cert.*.json&lt;/code&gt;: Delegation certificates. Affected by: &lt;code&gt;--n-delegate-addresses&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;genesis-keys.*.key&lt;/code&gt;: Genesis stake private keys. Affected by: &lt;code&gt;--n-delegate-addresses&lt;/code&gt;, &lt;code&gt;--total-balance&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;poor-keys.*.key&lt;/code&gt;: Non-delegate private keys with genesis UTxO. Affected by: &lt;code&gt;--n-poor-addresses&lt;/code&gt;, &lt;code&gt;--total-balance&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;More details on the Byron Genesis &lt;code&gt;JSON&lt;/code&gt; file can be found in &lt;code&gt;docs/reference/byron-genesis.md&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Byron genesis delegation and related concepts are described in detail in:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;&amp;lt;https://hydra.iohk.io/job/Cardano/cardano-ledger-specs/byronLedgerSpec/latest/download-by-type/doc-pdf/ledger-spec&amp;gt;&lt;/code&gt;_&lt;/p&gt; &#xA;&lt;p&gt;The canned &lt;code&gt;scripts/benchmarking/genesis.sh&lt;/code&gt; example provides a nice set of defaults and illustrates available options.&lt;/p&gt; &#xA;&lt;h1&gt;Key operations&lt;/h1&gt; &#xA;&lt;p&gt;Note that key operations do not support password-protected keys.&lt;/p&gt; &#xA;&lt;h2&gt;Signing key generation &amp;amp; verification key extraction&lt;/h2&gt; &#xA;&lt;p&gt;Signing keys can be generated using the &lt;code&gt;keygen&lt;/code&gt; subcommand.&lt;/p&gt; &#xA;&lt;p&gt;Extracting a verification key out of the signing key is performed by the &lt;code&gt;to-verification&lt;/code&gt; subcommand.&lt;/p&gt; &#xA;&lt;h2&gt;Delegate key migration&lt;/h2&gt; &#xA;&lt;p&gt;In order to continue using a delegate key from the Byron Legacy era in the new implementation, it needs to be migrated over, which is done by the &lt;code&gt;migrate-delegate-key-from&lt;/code&gt; subcommand:&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: console&lt;/p&gt; &#xA;&lt;p&gt;$ cabal v2-run -- cardano-cli byron key migrate-delegate-key-from --from key0.sk --to key0Converted.sk&lt;/p&gt; &#xA;&lt;h2&gt;Signing key queries&lt;/h2&gt; &#xA;&lt;p&gt;One can gather information about a signing key&#39;s properties through the &lt;code&gt;signing-key-public&lt;/code&gt; and &lt;code&gt;signing-key-address&lt;/code&gt; subcommands (the latter requires the network magic):&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: console&lt;/p&gt; &#xA;&lt;p&gt;$ cabal v2-run -- cardano-cli byron key signing-key-public --byron-formats --secret key0.sk&lt;/p&gt; &#xA;&lt;p&gt;public key hash: a2b1af0df8ca764876a45608fae36cf04400ed9f413de2e37d92ce04 public key: sc4pa1pAriXO7IzMpByKo4cG90HCFD465Iad284uDYz06dHCqBwMHRukReQ90+TA/vQpj4L1YNaLHI7DS0Z2Vg==&lt;/p&gt; &#xA;&lt;p&gt;$ cabal v2-run -- cardano-cli signing-key-address --byron-formats --secret key0.pbft --testnet-magic 42&lt;/p&gt; &#xA;&lt;p&gt;2cWKMJemoBakxhXgZSsMteLP9TUvz7owHyEYbUDwKRLsw2UGDrG93gPqmpv1D9ohWNddx VerKey address with root e5a3807d99a1807c3f161a1558bcbc45de8392e049682df01809c488, attributes: AddrAttributes { derivation path: {} }&lt;/p&gt; &#xA;&lt;h1&gt;Transactions&lt;/h1&gt; &#xA;&lt;h2&gt;Creation&lt;/h2&gt; &#xA;&lt;p&gt;Transactions can be created via the &lt;code&gt;issue-genesis-utxo-expenditure&lt;/code&gt; &amp;amp; &lt;code&gt;issue-utxo-expenditure&lt;/code&gt; commands.&lt;/p&gt; &#xA;&lt;p&gt;The easiest way to create a transaction is via the &lt;code&gt;scripts/benchmarking/issue-genesis-utxo-expenditure.sh&lt;/code&gt; script as follows:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;./scripts/benchmarking/issue-genesis-utxo-expenditure.sh transaction_file&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;NB: This by default creates a transaction based on &lt;code&gt;configuration/defaults/liveview/config-0.yaml&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you do not have a &lt;code&gt;genesis_file&lt;/code&gt; you can run &lt;code&gt;scripts/benchmarking/genesis.sh&lt;/code&gt; which will create an example &lt;code&gt;genesis_file&lt;/code&gt; for you. The script &lt;code&gt;scripts/benchmarking/issue-genesis-utxo-expenditure.sh&lt;/code&gt; has defaults for all the requirements of the &lt;code&gt;issue-genesis-utxo-expenditure&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;h2&gt;Submission&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;submit-tx&lt;/code&gt; subcommand provides the option of submitting a pre-signed transaction, in its raw wire format (see GenTx for Byron transactions).&lt;/p&gt; &#xA;&lt;p&gt;The canned &lt;code&gt;scripts/benchmarking/submit-tx.sh&lt;/code&gt; script will submit the supplied transaction to a testnet launched by &lt;code&gt;scripts/benchmarking/shelley-testnet-liveview.sh&lt;/code&gt; script.&lt;/p&gt; &#xA;&lt;h2&gt;Issuing UTxO expenditure (genesis and regular)&lt;/h2&gt; &#xA;&lt;p&gt;To make a transaction spending UTxO, you can either use the:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;issue-genesis-utxo-expenditure&lt;/code&gt;, for genesis UTxO&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;issue-utxo-expenditure&lt;/code&gt;, for normal UTxO&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;subcommands directly, or, again use canned scripts that will make transactions tailored for the aforementioned testnet cluster:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;scripts/benchmarking/issue-genesis-utxo-expenditure.sh&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;scripts/benchmarking/issue-utxo-expenditure.sh&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The script requires the target file name to write the transaction to, input TxId (for normal UTxO), and optionally allows specifying the source txin output index, source and target signing keys and lovelace value to send.&lt;/p&gt; &#xA;&lt;p&gt;The target address defaults to the 1-st richman key (&lt;code&gt;configuration/delegate-keys.001.key&lt;/code&gt;) of the testnet, and lovelace amount is almost the entirety of its funds.&lt;/p&gt; &#xA;&lt;h1&gt;Local node queries&lt;/h1&gt; &#xA;&lt;p&gt;You can query the tip of your local node via the &lt;code&gt;get-tip&lt;/code&gt; command as follows&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Open &lt;code&gt;tmux&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;cabal build cardano-node&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;./scripts/lite/shelley-testnet.sh example&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run ``export CARDANO_NODE_SOCKET_PATH=/cardano-node/example/socket/node-1-socket&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cabal exec cardano-cli -- get-tip --testnet-magic 42&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;You will see output from stdout in this format:&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: console&lt;/p&gt; &#xA;&lt;p&gt;Current tip: Block hash: 4ab21a10e1b25e39 Slot: 6 Block number: 5&lt;/p&gt; &#xA;&lt;h1&gt;Update proposals&lt;/h1&gt; &#xA;&lt;h2&gt;Update proposal creation&lt;/h2&gt; &#xA;&lt;p&gt;A Byron update proposal can be created as follows:&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: console&lt;/p&gt; &#xA;&lt;p&gt;cardano-cli -- byron governance create-update-proposal (--mainnet | --testnet-magic NATURAL) --signing-key FILEPATH --protocol-version-major WORD16 --protocol-version-minor WORD16 --protocol-version-alt WORD8 --application-name STRING --software-version-num WORD32 --system-tag STRING --installer-hash HASH --filepath FILEPATH ..&lt;/p&gt; &#xA;&lt;p&gt;The mandatory arguments are &lt;code&gt;--mainnet | --testnet-magic&lt;/code&gt;, &lt;code&gt;signing-key&lt;/code&gt;, &lt;code&gt;protocol-version-major&lt;/code&gt;, &lt;code&gt;protocol-version-minor&lt;/code&gt;, &lt;code&gt;protocol-version-alt&lt;/code&gt;, &lt;code&gt;application-name&lt;/code&gt;, &lt;code&gt;software-version-num&lt;/code&gt;, &lt;code&gt;system-tag&lt;/code&gt;, &lt;code&gt;installer-hash&lt;/code&gt; and &lt;code&gt;filepath&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The remaining arguments are optional parameters you want to update in your update proposal.&lt;/p&gt; &#xA;&lt;p&gt;You can also check your proposal&#39;s validity using the &lt;code&gt;validate-cbor&lt;/code&gt; command. See: &lt;code&gt;Validate CBOR files&lt;/code&gt;_.&lt;/p&gt; &#xA;&lt;p&gt;See the &lt;code&gt;Byron specification &amp;lt;https://hydra.iohk.io/job/Cardano/cardano-ledger-specs/byronLedgerSpec/latest/download-by-type/doc-pdf/ledger-spec&amp;gt;&lt;/code&gt;_ for more details on update proposals.&lt;/p&gt; &#xA;&lt;h2&gt;Update proposal submission&lt;/h2&gt; &#xA;&lt;p&gt;You can submit your proposal using the &lt;code&gt;submit-update-proposal&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: console&lt;/p&gt; &#xA;&lt;p&gt;cardano-cli -- byron governance submit-update-proposal --config configuration/defaults/mainnet/configuration.yaml (--mainnet | --testnet-magic NATURAL) --filepath my-update-proposal&lt;/p&gt; &#xA;&lt;p&gt;See the &lt;code&gt;Byron specification &amp;lt;https://hydra.iohk.io/job/Cardano/cardano-ledger-specs/byronLedgerSpec/latest/download-by-type/doc-pdf/ledger-spec&amp;gt;&lt;/code&gt;_ for more details on update proposals.&lt;/p&gt; &#xA;&lt;h1&gt;Update proposal voting&lt;/h1&gt; &#xA;&lt;p&gt;You can create and submit byron update proposal votes with the &lt;code&gt;create-proposal-vote&lt;/code&gt; &amp;amp; &lt;code&gt;submit-proposal-vote&lt;/code&gt; commands. The following are two example commands:&lt;/p&gt; &#xA;&lt;p&gt;Byron vote creation:&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: console&lt;/p&gt; &#xA;&lt;p&gt;cabal exec cardano-cli -- byron governance create-proposal-vote (--mainnet | --testnet-magic NATURAL) --signing-key configuration/defaults/liveview/genesis/delegate-keys.000.key --proposal-filepath ProtocolUpdateProposalFile --vote-yes --output-filepath UpdateProposalVoteFile&lt;/p&gt; &#xA;&lt;p&gt;Byron vote submission:&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: console&lt;/p&gt; &#xA;&lt;p&gt;cabal exec cardano-cli -- byron governance submit-proposal-vote (--mainnet | --testnet-magic NATURAL) --filepath UpdateProposalVoteFile&lt;/p&gt; &#xA;&lt;h1&gt;Development&lt;/h1&gt; &#xA;&lt;h2&gt;GHCID&lt;/h2&gt; &#xA;&lt;p&gt;run &lt;em&gt;ghcid&lt;/em&gt; with: &lt;code&gt;ghcid -c &#34;cabal repl exe:cardano-node --reorder-goals&#34;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Haskell Language Server&lt;/h2&gt; &#xA;&lt;p&gt;When using Haskell Language Server with Visual Studio Code, you may find that &lt;code&gt;HLINT annotations are ignored&amp;lt;https://github.com/haskell/haskell-language-server/issues/638&amp;gt;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To work around this, you may run the script &lt;code&gt;./scripts/reconfigure-hlint.sh&lt;/code&gt; to generate a &lt;code&gt;.hlint.yaml&lt;/code&gt; file with HLINT ignore rules derived from the source code.&lt;/p&gt; &#xA;&lt;h1&gt;Testing&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;cardano-node&lt;/code&gt; is essentially a container which implements several components such networking, consensus, and storage. These components have individual test coverage. The node goes through integration and release testing by Devops/QA while automated CLI tests are ongoing alongside development.&lt;/p&gt; &#xA;&lt;p&gt;Developers on &lt;code&gt;cardano-node&lt;/code&gt; can &lt;code&gt;launch their own testnets &amp;lt;doc/getting-started/launching-a-testnet.md&amp;gt;&lt;/code&gt;_ or &lt;code&gt;run the chairman tests &amp;lt;doc/getting-started/running-chairman-tests.md&amp;gt;&lt;/code&gt;_ locally.&lt;/p&gt; &#xA;&lt;h2&gt;Chairman tests&lt;/h2&gt; &#xA;&lt;h1&gt;Debugging&lt;/h1&gt; &#xA;&lt;h2&gt;Pretty printing CBOR encoded files&lt;/h2&gt; &#xA;&lt;p&gt;It may be useful to print the on chain representations of blocks, delegation certificates, txs and update proposals. There are two commands that do this (for any cbor encoded file):&lt;/p&gt; &#xA;&lt;p&gt;To pretty print as CBOR: &lt;code&gt;cabal exec cardano-cli -- pretty-print-cbor --filepath CBOREncodedFile&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Validate CBOR files&lt;/h2&gt; &#xA;&lt;p&gt;You can validate Byron era blocks, delegation certificates, txs and update proposals with the &lt;code&gt;validate-cbor&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;cabal exec cardano-cli -- validate-cbor --byron-block 21600 --filepath CBOREncodedByronBlockFile&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Native Tokens&lt;/h1&gt; &#xA;&lt;p&gt;Native tokens is a new feature that enables the transacting of multi-assets on Cardano. Native tokens are now supported on mainnet and users can transact with ada, and an unlimited number of user-defined (custom) tokens natively.&lt;/p&gt; &#xA;&lt;p&gt;To help you get started we have compiled a handy list of resources:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Cardano Forum discussion &amp;lt;https://forum.cardano.org/c/developers/cardano-tokens/150&amp;gt;&lt;/code&gt;_&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Documentation for native tokens &amp;lt;https://docs.cardano.org/native-tokens/learn&amp;gt;&lt;/code&gt;_&lt;/p&gt; &#xA;&lt;p&gt;You can also read more about &lt;code&gt;native tokens and how they compare to ada and ERC20 &amp;lt;https://github.com/input-output-hk/cardano-ledger-specs/blob/master/doc/explanations/features.rst&amp;gt;&lt;/code&gt;_. Browse native tokens created on the Cardano blockchain and see their transactions in an interactive dashboard that allows filtering and searching: nativetokens.da.iogservices.io.&lt;/p&gt; &#xA;&lt;h1&gt;API Documentation&lt;/h1&gt; &#xA;&lt;p&gt;The API documentation is published &lt;code&gt;here &amp;lt;https://input-output-hk.github.io/cardano-node/&amp;gt;&lt;/code&gt;_.&lt;/p&gt; &#xA;&lt;p&gt;The documentation is built with each push, but is only published from &lt;code&gt;master&lt;/code&gt; branch. In order to test if the documentation is working, build the documentation locally with &lt;code&gt;./scripts/haddocs.sh&lt;/code&gt; and open &lt;code&gt;haddocks/index.html&lt;/code&gt; in the browser.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>brendanhay/gogol</title>
    <updated>2022-05-29T01:43:13Z</updated>
    <id>tag:github.com,2022-05-29:/brendanhay/gogol</id>
    <link href="https://github.com/brendanhay/gogol" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A comprehensive Google Services SDK for Haskell.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Gogol&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://hackage.haskell.org/package/gogol&#34;&gt;&lt;img src=&#34;https://img.shields.io/hackage/v/gogol.svg?sanitize=true&#34; alt=&#34;Hackage Version&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/gogol/main/#description&#34;&gt;Description&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/gogol/main/#documentation&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/gogol/main/#organisation&#34;&gt;Organisation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/gogol/main/#change-log&#34;&gt;Change Log&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/gogol/main/#contribute&#34;&gt;Contribute&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/gogol/main/#code-generation&#34;&gt;Code Generation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/gogol/main/#licence&#34;&gt;Licence&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Description&lt;/h2&gt; &#xA;&lt;p&gt;A comprehensive Google Services SDK for Haskell supporting all of the publicly available services.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;You can find the latest stable release documentation for each respective library on Hackage under the &lt;a href=&#34;http://hackage.haskell.org/packages/#cat:Google&#34;&gt;Google section&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Organisation&lt;/h2&gt; &#xA;&lt;p&gt;This repository is organised into the following directory structure:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/gogol/main/lib/gogol&#34;&gt;&lt;code&gt;lib/gogol&lt;/code&gt;&lt;/a&gt;: Actual operational logic, you&#39;ll need to import this to send requests etc.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/gogol/main/lib/gogol-core&#34;&gt;&lt;code&gt;lib/gogol-core&lt;/code&gt;&lt;/a&gt;: The &lt;code&gt;gogol-core&lt;/code&gt; library upon which each of the services depends.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/gogol/main/lib/services&#34;&gt;&lt;code&gt;lib/services/gogol-*&lt;/code&gt;&lt;/a&gt;: Data types for each of the individual Google Compute Engine Service libraries.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/gogol/main/examples&#34;&gt;&lt;code&gt;examples&lt;/code&gt;&lt;/a&gt;: A currently sparse collection of examples for the various services.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/gogol/main/configs&#34;&gt;&lt;code&gt;configs&lt;/code&gt;&lt;/a&gt;, Configuration, templates, and assets for the code generator.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/gogol/main/gen&#34;&gt;&lt;code&gt;gen&lt;/code&gt;&lt;/a&gt;: The code generation binary.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/gogol/main/scripts&#34;&gt;&lt;code&gt;scripts&lt;/code&gt;&lt;/a&gt;: Scripts to manage the release lifecycle of the service libraries.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Change Log&lt;/h2&gt; &#xA;&lt;p&gt;A change log for the entire project can be found under &lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/gogol/main/gogol/CHANGELOG.md&#34;&gt;&lt;code&gt;gogol/CHANGELOG.md&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contribute&lt;/h2&gt; &#xA;&lt;p&gt;For any problems, comments, or feedback please create an issue &lt;a href=&#34;https://github.com/brendanhay/gogol/issues&#34;&gt;here on GitHub&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Code Generation&lt;/h2&gt; &#xA;&lt;p&gt;For pull requests which affect generated output, please &lt;em&gt;do not include&lt;/em&gt; the actual regenerated service code, only commit the updates to the generator and related configuration.&lt;/p&gt; &#xA;&lt;p&gt;This ensures the Continuous Integration process is the single source of truth for generated code changes, and keeps pull requests readable and focused on actual generator code/logic changes.&lt;/p&gt; &#xA;&lt;h3&gt;Adding New Services&lt;/h3&gt; &#xA;&lt;p&gt;The configuration for the generation step of each individual service endpoint lives under &lt;code&gt;./configs/services&lt;/code&gt;. The naming matches the Google Discovery Service naming of endpoints, which are vendored under &lt;code&gt;./configs/models&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Rather than actually crawling the Discovery Service, the &lt;a href=&#34;https://www.github.com/google/google-api-go-client&#34;&gt;Google API Go Client&lt;/a&gt; is vendored under &lt;code&gt;./vendor&lt;/code&gt;, and the JSON service definitions are copied to &lt;code&gt;./configs/models&lt;/code&gt; to ensure reproducibility of the generation steps and the abilitry to diff across versions.&lt;/p&gt; &#xA;&lt;h3&gt;Example: Cloud Dataproc&lt;/h3&gt; &#xA;&lt;p&gt;To add a new endpoint, first create the related JSON configuration in the &lt;code&gt;./configs/services&lt;/code&gt; directory.&lt;/p&gt; &#xA;&lt;p&gt;Since the Cloud Dataproc API is called &lt;code&gt;dataproc-api.json&lt;/code&gt; in the Google Discovery API, you would create the configuration &lt;code&gt;./configs/services/dataproc.json&lt;/code&gt; with the following contents:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;{&#xA; &#34;library&#34;: &#34;dataproc&#34;,&#xA; &#34;canonicalName&#34;: &#34;Dataproc&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, the &lt;code&gt;Makefile&lt;/code&gt; is used:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make clean&#xA;make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will build the &lt;code&gt;./bin/gogol-gen&lt;/code&gt; binary, and will generate a Haskell library for each API that has matching &lt;code&gt;./configs/services/*.json&lt;/code&gt; configuration.&lt;/p&gt; &#xA;&lt;p&gt;For the above example, the result would be a &lt;code&gt;./lib/services/gogol-dataproc&lt;/code&gt; directory at the top-level of the project containing the generated API client.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;code&gt;make full-clean&lt;/code&gt; can be used to cause a complete re-download of all (including new) service models.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Individual clients/SDKs can be generated by passing a specific &lt;code&gt;MODELS&lt;/code&gt; environment variable to the &lt;code&gt;make&lt;/code&gt; command, for example: &lt;code&gt;MODELS=configs/models/admin/directory/v1/admin-api.json make&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Licence&lt;/h2&gt; &#xA;&lt;p&gt;Gogol is released under the &lt;a href=&#34;http://www.mozilla.org/MPL/&#34;&gt;Mozilla Public License Version 2.0&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Parts of the code are derived from Google Compute Engine service descriptions, licensed under Apache 2.0. Source files subject to this contain an additional licensing clause in their header.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>dapphub/dapptools</title>
    <updated>2022-05-29T01:43:13Z</updated>
    <id>tag:github.com,2022-05-29:/dapphub/dapptools</id>
    <link href="https://github.com/dapphub/dapptools" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Dapp, Seth, Hevm, and more&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Dapp tools by DappHub &lt;a href=&#34;https://dapphub.chat&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/community-chat-blue.svg?style=flat-square&#34; alt=&#34;Chat&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;Hello!&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;dapptools&lt;/code&gt; is a suite of Ethereum focused CLI tools following the Unix design philosophy, favoring composability, configurability and extensibility.&lt;/p&gt; &#xA;&lt;p&gt;This repository contains the source code for several programs hand-crafted and maintained by DappHub, along with dependency management, courtesy of Nix.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dapphub/dapptools/master/src/dapp&#34;&gt;dapp&lt;/a&gt; - All you need Ethereum development tool. Build, test, fuzz, formally verify, debug &amp;amp; deploy solidity contracts.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dapphub/dapptools/master/src/seth&#34;&gt;seth&lt;/a&gt; - Ethereum CLI. Query contracts, send transactions, follow logs, slice &amp;amp; dice data.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dapphub/dapptools/master/src/hevm&#34;&gt;hevm&lt;/a&gt; - Testing oriented EVM implementation. Debug, fuzz, or symbolically execute code against local or mainnet state.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dapphub/dapptools/master/src/ethsign&#34;&gt;ethsign&lt;/a&gt; - Sign Ethereum transactions from a local keystore or hardware wallet.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Development Status&lt;/h2&gt; &#xA;&lt;p&gt;dapptools is currently in a stage of clandestine development where support for the casual user may be deprived. The software can now be considered free as in free puppy. Users seeking guidance can explore using foundry as an alternative&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Install Nix if you haven&#39;t already (&lt;a href=&#34;https://nixos.org/download.html&#34;&gt;instructions&lt;/a&gt;). Then install dapptools:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;curl https://dapp.tools/install | sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This configures the dapphub binary cache and installs the &lt;code&gt;dapp&lt;/code&gt;, &lt;code&gt;solc&lt;/code&gt;, &lt;code&gt;seth&lt;/code&gt; and &lt;code&gt;hevm&lt;/code&gt; executables.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; Arm support in the GHC haskell compiiler is still fairly bleeding edge, until this situation stabilises, users of M1 macs must run dapptools (and the installer!) under rosetta 2 (i.e. as an emulated x86 program). Make sure &lt;code&gt;/etc/nix/nix.conf&lt;/code&gt; contains &lt;code&gt;system = x86_64-darwin&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can also install an individual tool with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;nix-env -iA &amp;lt;tool&amp;gt; -f $(curl -sS https://api.github.com/repos/dapphub/dapptools/releases/latest | jq -r .tarball_url)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you instead want to build from &lt;code&gt;master&lt;/code&gt;, change the url to &lt;code&gt;https://github.com/dapphub/dapptools/archive/master.tar.gz&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Prebuilt hevm binary&lt;/h3&gt; &#xA;&lt;p&gt;Static binaries for linux and macos of hevm are available for each release at &lt;a href=&#34;https://github.com/dapphub/dapptools/releases&#34;&gt;https://github.com/dapphub/dapptools/releases&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Most functionality is available out of the box, but for symbolic execution you will need &lt;a href=&#34;https://github.com/ethereum/solidity&#34;&gt;&lt;code&gt;solc&lt;/code&gt;&lt;/a&gt; and (&lt;a href=&#34;https://github.com/Z3Prover/z3/&#34;&gt;&lt;code&gt;z3&lt;/code&gt;&lt;/a&gt; or &lt;a href=&#34;https://github.com/CVC4/CVC4&#34;&gt;&lt;code&gt;cvc4&lt;/code&gt;&lt;/a&gt; (or both)).&lt;/p&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;p&gt;For more information about the tools, consult the individual README pages:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dapphub/dapptools/master/src/seth/README.md&#34;&gt;seth&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dapphub/dapptools/master/src/dapp/README.md&#34;&gt;dapp&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dapphub/dapptools/master/src/hevm/README.md&#34;&gt;hevm&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dapphub/dapptools/master/src/ethsign/README.md&#34;&gt;ethsign&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;or use the &lt;code&gt;--help&lt;/code&gt; flag for any tool.&lt;/p&gt; &#xA;&lt;p&gt;We&#39;re also happy to answer any questions at &lt;a href=&#34;https://dapphub.chat/&#34;&gt;https://dapphub.chat/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;p&gt;Deploy a &#39;Hello World&#39; contract and call it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;export ETH_RPC_URL=https://mainnet.infura.io/v3/$YOUR_API_KEY&#xA;export ETH_FROM=$YOUR_ADDRESS&#xA;echo &#39;contract Hello { function hi() public pure returns(string memory) {return &#34;Hello, World!&#34;;}}&#39; | solc --bin -o . --overwrite -&#xA;HELLO=$(seth send --create $(&amp;lt;Hello.bin))&#xA;seth call $HELLO &#34;hi()(string)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Debug the first transaction of the latest block in the interactive debugger:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;export ETH_RPC_URL=https://mainnet.infura.io/v3/$YOUR_API_KEY&#xA;seth run-tx $(seth block latest transactions | jq .&#39;[0]&#39; -r) --debug&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If Vitalik&#39;s next transaction were a contract deployment, calculate the address it would be deployed at:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;export ETH_RPC_URL=https://mainnet.infura.io/v3/$YOUR_API_KEY&#xA;dapp address 0xab5801a7d398351b8be11c439e05c5b3259aec9b $(seth nonce 0xab5801a7d398351b8be11c439e05c5b3259aec9b)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Symbolically explore the possible execution paths of a call to &lt;code&gt;dai.transfer(address,uint)&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;seth bundle-source 0x6b175474e89094c44da98b954eedeac495271d0f &amp;gt; daisrc.json &amp;amp;&amp;amp; \&#xA;hevm symbolic --address 0x6b175474e89094c44da98b954eedeac495271d0f --rpc $ETH_RPC_URL  --debug --sig &#34;transfer(address,uint256)&#34; --json-file daisrc.json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Contributions are always welcome! You may be interested in the &lt;a href=&#34;https://raw.githubusercontent.com/dapphub/dapptools/master/ARCHITECTURE.md&#34;&gt;architecture&lt;/a&gt; of this repository.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://builtwithnix.org&#34;&gt;&lt;img src=&#34;https://builtwithnix.org/badge.svg?sanitize=true&#34; alt=&#34;built with nix&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>flipstone/kioku</title>
    <updated>2022-05-29T01:43:13Z</updated>
    <id>tag:github.com,2022-05-29:/flipstone/kioku</id>
    <link href="https://github.com/flipstone/kioku" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A simple db for ingesting and indexing static datasets on disk&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Default Branch Build Status&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://circleci.com/gh/flipstone/kioku&#34;&gt;&lt;img src=&#34;https://circleci.com/gh/flipstone/kioku.svg?style=svg&#34; alt=&#34;CirclCI&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>brendanhay/amazonka</title>
    <updated>2022-05-29T01:43:13Z</updated>
    <id>tag:github.com,2022-05-29:/brendanhay/amazonka</id>
    <link href="https://github.com/brendanhay/amazonka" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A comprehensive Amazon Web Services SDK for Haskell.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;a href=&#34;https://www.brendanhay.nz/amazonka&#34;&gt;Amazonka&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opensource.org/licenses/MPL-2.0&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-MPL%202.0-blue.svg?sanitize=true&#34; alt=&#34;MPL2&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://hackage.haskell.org/package/amazonka&#34;&gt;&lt;img src=&#34;https://img.shields.io/hackage/v/amazonka.svg?sanitize=true&#34; alt=&#34;Hackage&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/brendanhay/amazonka/actions&#34;&gt;&lt;img src=&#34;https://github.com/brendanhay/amazonka/workflows/build/badge.svg?sanitize=true&#34; alt=&#34;Build&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/brendanhay/amazonka/actions&#34;&gt;&lt;img src=&#34;https://github.com/brendanhay/amazonka/workflows/gen/badge.svg?sanitize=true&#34; alt=&#34;Gen&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/brendanhay/amazonka/actions&#34;&gt;&lt;img src=&#34;https://github.com/brendanhay/amazonka/workflows/docs/badge.svg?sanitize=true&#34; alt=&#34;Docs&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;An Amazon Web Services SDK for Haskell with support for most public services. Parts of the code contained in this repository are auto-generated and automatically kept up to date with Amazon&#39;s latest service APIs.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You can find the latest Haddock documentation for each respective library on the &lt;a href=&#34;https://www.brendanhay.nz/amazonka&#34;&gt;Amazonka&lt;/a&gt; website.&lt;/li&gt; &#xA; &lt;li&gt;A release changelog can be found in &lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/amazonka/main/lib/amazonka/CHANGELOG.md&#34;&gt;lib/amazonka/CHANGELOG.md&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;For problems, comments, or feedback please create an issue &lt;a href=&#34;https://github.com/brendanhay/amazonka/issues&#34;&gt;here on GitHub&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/amazonka/main/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/amazonka/main/#directory-layout&#34;&gt;Directory Layout&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/amazonka/main/#supported-platforms-and-ghc-versions&#34;&gt;Supported Platforms and GHC Versions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/amazonka/main/#getting-started&#34;&gt;Getting Started&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/amazonka/main/#building-the-project&#34;&gt;Building the Project&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/amazonka/main/#building-the-documentation&#34;&gt;Building the Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/amazonka/main/#running-the-code-generator&#34;&gt;Running the Code Generator&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/amazonka/main/#code-formatting&#34;&gt;Code Formatting&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/amazonka/main/#third-party-packages&#34;&gt;Third Party Packages&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Amazonka is licensed under the &lt;a href=&#34;http://www.mozilla.org/MPL/&#34;&gt;Mozilla Public License Version 2.0&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The AWS service descriptions are licensed under Apache 2.0. Source files derived from the service descriptions contain an additional licensing clause in their header.&lt;/p&gt; &#xA;&lt;h2&gt;Directory Layout&lt;/h2&gt; &#xA;&lt;p&gt;This repository is organised into the following directory structure:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/amazonka/main/lib/amazonka&#34;&gt;&lt;code&gt;lib/amazonka&lt;/code&gt;&lt;/a&gt;: The main library containing setup, authentication, and send logic. This will be your primary dependency.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lib/service/amazonka-*&lt;/code&gt;: A library per supported Amazon Web Service, you&#39;ll need to add a dependency on each selected service library.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/amazonka/main/lib/amazonka-core&#34;&gt;&lt;code&gt;lib/amazonka-core&lt;/code&gt;&lt;/a&gt;: The &lt;code&gt;amazonka-core&lt;/code&gt; library upon which each of the services depends.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/amazonka/main/lib/amazonka-test&#34;&gt;&lt;code&gt;lib/amazonka-test&lt;/code&gt;&lt;/a&gt;: Common test functionality.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/amazonka/main/examples&#34;&gt;&lt;code&gt;examples&lt;/code&gt;&lt;/a&gt;: Basic examples for using the service libraries.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/amazonka/main/configs&#34;&gt;&lt;code&gt;configs&lt;/code&gt;&lt;/a&gt;: Service configuration, templates, and assets used by the code generator.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/amazonka/main/docs&#34;&gt;&lt;code&gt;docs&lt;/code&gt;&lt;/a&gt;: The website documentation and related build code.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/amazonka/main/gen&#34;&gt;&lt;code&gt;gen&lt;/code&gt;&lt;/a&gt;: The code and configuration generators.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/amazonka/main/nix&#34;&gt;&lt;code&gt;nix&lt;/code&gt;&lt;/a&gt;: Nix configuration code for toolchain packages.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/amazonka/main/scripts&#34;&gt;&lt;code&gt;scripts&lt;/code&gt;&lt;/a&gt;: Scripts to manage the project, such as the release lifecycle.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/amazonka/main/tools&#34;&gt;&lt;code&gt;tools&lt;/code&gt;&lt;/a&gt;: Custom bazel rules.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/amazonka/main/third_party&#34;&gt;&lt;code&gt;third_party&lt;/code&gt;&lt;/a&gt;: Third party packages and patches.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Supported Platforms and GHC Versions&lt;/h2&gt; &#xA;&lt;p&gt;GHC versions &lt;code&gt;8.8.4&lt;/code&gt; and &lt;code&gt;8.10.7&lt;/code&gt; are officially supported and tested on NixOS, Ubuntu, and macOS. GHC &lt;code&gt;8.6.5&lt;/code&gt; may also work, but is not tested by our continuous integration pipeline.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;This repository is built using a combination of &lt;a href=&#34;https://nixos.org/nix/&#34;&gt;Nix&lt;/a&gt; and your choice of &lt;a href=&#34;https://bazel.build&#34;&gt;Bazel&lt;/a&gt; or Cabal. If you&#39;re just using Amazonka as a git dependency in your Cabal or Stack project, you can skip these steps. But if you plan on contributing to the codebase - welcome, read on!&lt;/p&gt; &#xA;&lt;h3&gt;1. Clone this repository&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone git@github.com:brendanhay/amazonka.git&#xA;cd amazonka&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;2. Setup Nix&lt;/h3&gt; &#xA;&lt;p&gt;Building the code in this repository requires various development dependencies (e.g. &lt;a href=&#34;https://nixos.org/nix/&#34;&gt;Nix&lt;/a&gt;, &lt;a href=&#34;https://bazel.build&#34;&gt;Bazel&lt;/a&gt;, &lt;a href=&#34;https://www.haskell.org/ghc/&#34;&gt;GHC&lt;/a&gt;.)&lt;/p&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://nixos.org/nix/&#34;&gt;Nix&lt;/a&gt; package manager is used to obtain and build the other dependencies in a &lt;a href=&#34;https://sre.google/sre-book/release-engineering/#hermetic-builds-nqslhnid&#34;&gt;hermetic&lt;/a&gt; environment. You can install Nix by following the &lt;a href=&#34;https://nixos.org/guides/install-nix.html&#34;&gt;official installation instructions&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sh &amp;lt;(curl -L https://nixos.org/nix/install) --daemon&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once Nix is setup, you can enable the &lt;a href=&#34;https://amazonka.cachix.org&#34;&gt;cache&lt;/a&gt; to avoid building dependencies:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;nix-env -iA cachix -f https://cachix.org/api/v1/install&#xA;cachix use amazonka&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;3. Enter a Nix Shell&lt;/h3&gt; &#xA;&lt;p&gt;The build tools are installed and activated upon entering a &lt;a href=&#34;https://nixos.org/nix/&#34;&gt;Nix&lt;/a&gt; shell, which is achieved by running the following command in the root of the repository:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;nix-shell&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also enter a shell and explicitly specify the GHC version:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;nix-shell --argstr ghcVersion 884&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Optionally, if you have &lt;a href=&#34;https://direnv.net&#34;&gt;Direnv&lt;/a&gt; and &lt;a href=&#34;https://github.com/nix-community/lorri&#34;&gt;lorri&lt;/a&gt; installed you can use the provided &lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/amazonka/main/.envrc&#34;&gt;.envrc&lt;/a&gt; instead, which will also add the &lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/amazonka/main/scripts&#34;&gt;scripts&lt;/a&gt; directory to your &lt;code&gt;PATH&lt;/code&gt;. You can extend this by adding your own uncommitted &lt;code&gt;.envrc.local&lt;/code&gt; file. See the &lt;a href=&#34;https://github.com/direnv/direnv/wiki&#34;&gt;Direnv Wiki&lt;/a&gt; for various recipes.&lt;/p&gt; &#xA;&lt;h2&gt;Building the Project&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;The following commands assume you&#39;re already in a nix-shell outlined in the previous step.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Cabal&lt;/h3&gt; &#xA;&lt;p&gt;If you&#39;re familiar with Cabal, you can build &lt;code&gt;amazonka-*&lt;/code&gt; packages via:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cabal build amazonka amazonka-s3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or the entire project (which will take a very long time!):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cabal build all&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Bazel&lt;/h3&gt; &#xA;&lt;p&gt;Alternatively, if you plan on contributing to the project or want to perform code generation, you will need to familiarise yourself with &lt;a href=&#34;https://bazel.build&#34;&gt;Bazel&lt;/a&gt;. You can build packages by specifying one or more targets using &lt;a href=&#34;https://docs.bazel.build/versions/4.1.0/build-ref.html#labels&#34;&gt;Bazel&#39;s label&lt;/a&gt; syntax:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bazel build //lib/amazonka //lib/services/amazonka-s3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or build all Haskell libraries in the project using the &lt;code&gt;...&lt;/code&gt; wildcard:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bazel build //lib/...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To view what targets are available in the workspace:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bazel query //...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;By default, the &lt;code&gt;bazel&lt;/code&gt; command will use the same GHC version as the Nix shell&#39;s &lt;code&gt;ghcVersion&lt;/code&gt; argument. You can choose a different GHC version using &lt;code&gt;nix-shell --argstr ghcVersion 884&lt;/code&gt; - which is just a synonym for &lt;code&gt;bazel build --//tools/ghc:version=884&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Building the Documentation&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/amazonka/main/docs&#34;&gt;docs&lt;/a&gt; Bazel package contains the Haddock target and Hugo static site definition and markdown content. To build the site locally, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bazel build //docs:bundle&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, you can serve the documentation site locally on &lt;code&gt;http://localhost:1313&lt;/code&gt; by running:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bazel run //docs:serve&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Running the Code Generator&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/amazonka/main/gen&#34;&gt;gen&lt;/a&gt; Bazel package contains code generators for synthesising Haskell data types, packages, and configuration from the botocore service definitions.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/amazonka/main/scripts/generate&#34;&gt;scripts/generate&lt;/a&gt; will run the code generator for all services configured in &lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/amazonka/main/config/services&#34;&gt;config/services&lt;/a&gt;, for example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./scripts/generate&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or, you can selectively run the generator on one or more services:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./scripts/generate ec2 s3 iam&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To update the &lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/amazonka/main/botocore&#34;&gt;botocore&lt;/a&gt; service definitions used by the generator, you can run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./scripts/update-botocore&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/amazonka/main/scripts/generate-configs&#34;&gt;scripts/generate-configs&lt;/a&gt; will run the config generator to produce placeholder &lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/amazonka/main/config/services&#34;&gt;config/serivces&lt;/a&gt; configurations for the version of botocore pinned in the &lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/amazonka/main/WORKSPACE&#34;&gt;WORKSPACE&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To generate any missing service configurations:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./scripts/generate-configs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Service configurations generated in this way are intended as examples only and the resulting &lt;code&gt;configs/services/&amp;lt;name&amp;gt;.json:libraryName&lt;/code&gt; (Haskell package name) and &lt;code&gt;configs/annexes/&amp;lt;name&amp;gt;.json:serviceAbbreviation&lt;/code&gt; (Haskell package namespace) should be manually verified and curated as necessary.&lt;/p&gt; &#xA;&lt;p&gt;For pull requests which affect generated output please &lt;em&gt;do not include&lt;/em&gt; the regenerated &lt;code&gt;amazonka-*&lt;/code&gt; packages, only commit updates to the build rules, documentation, generator, and related configuration. This ensures the Continuous Integration process is the single source of truth for the generated code and reduces noise in pull requests, keeping them reviewable and focused on actual generator code/logic changes.&lt;/p&gt; &#xA;&lt;h2&gt;Code Formatting&lt;/h2&gt; &#xA;&lt;p&gt;Please use &lt;code&gt;./scripts/format&lt;/code&gt; frequently - it&#39;s OK, I hate 2 spaces too, we&#39;re in this together.&lt;/p&gt; &#xA;&lt;h2&gt;Third Party Packages&lt;/h2&gt; &#xA;&lt;p&gt;When naming an additional library which provides supplemental functionality to &lt;code&gt;amazonka&lt;/code&gt;, if you want to use the &lt;code&gt;amazonka-*&lt;/code&gt; namespace, then please consider prefixing your package names with &lt;code&gt;amazonka-contrib-*&lt;/code&gt;. For example, &lt;a href=&#34;https://hackage.haskell.org/package/amazonka-contrib-rds-utils&#34;&gt;amazonka-contrib-rds-utils&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This minimises potential future collisions with auto-generated package names and new AWS service and product releases.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>koalaman/shellcheck</title>
    <updated>2022-05-29T01:43:13Z</updated>
    <id>tag:github.com,2022-05-29:/koalaman/shellcheck</id>
    <link href="https://github.com/koalaman/shellcheck" rel="alternate"></link>
    <summary type="html">&lt;p&gt;ShellCheck, a static analysis tool for shell scripts&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/actions/workflows/build.yml&#34;&gt;&lt;img src=&#34;https://github.com/koalaman/shellcheck/actions/workflows/build.yml/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;ShellCheck - A shell script static analysis tool&lt;/h1&gt; &#xA;&lt;p&gt;ShellCheck is a GPLv3 tool that gives warnings and suggestions for bash/sh shell scripts:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/doc/terminal.png&#34; alt=&#34;Screenshot of a terminal showing problematic shell script lines highlighted&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The goals of ShellCheck are&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;To point out and clarify typical beginner&#39;s syntax issues that cause a shell to give cryptic error messages.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To point out and clarify typical intermediate level semantic problems that cause a shell to behave strangely and counter-intuitively.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To point out subtle caveats, corner cases and pitfalls that may cause an advanced user&#39;s otherwise working script to fail under future circumstances.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/README.md#user-content-gallery-of-bad-code&#34;&gt;the gallery of bad code&lt;/a&gt; for examples of what ShellCheck can help you identify!&lt;/p&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#how-to-use&#34;&gt;How to use&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#on-the-web&#34;&gt;On the web&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#from-your-terminal&#34;&gt;From your terminal&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#in-your-editor&#34;&gt;In your editor&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#in-your-build-or-test-suites&#34;&gt;In your build or test suites&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#installing&#34;&gt;Installing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#compiling-from-source&#34;&gt;Compiling from source&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#installing-cabal&#34;&gt;Installing Cabal&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#compiling-shellcheck&#34;&gt;Compiling ShellCheck&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#running-tests&#34;&gt;Running tests&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#gallery-of-bad-code&#34;&gt;Gallery of bad code&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#quoting&#34;&gt;Quoting&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#conditionals&#34;&gt;Conditionals&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#frequently-misused-commands&#34;&gt;Frequently misused commands&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#common-beginners-mistakes&#34;&gt;Common beginner&#39;s mistakes&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#style&#34;&gt;Style&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#data-and-typing-errors&#34;&gt;Data and typing errors&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#robustness&#34;&gt;Robustness&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#portability&#34;&gt;Portability&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#miscellaneous&#34;&gt;Miscellaneous&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#testimonials&#34;&gt;Testimonials&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#ignoring-issues&#34;&gt;Ignoring issues&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#reporting-bugs&#34;&gt;Reporting bugs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#copyright&#34;&gt;Copyright&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#other-resources&#34;&gt;Other Resources&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How to use&lt;/h2&gt; &#xA;&lt;p&gt;There are a number of ways to use ShellCheck!&lt;/p&gt; &#xA;&lt;h3&gt;On the web&lt;/h3&gt; &#xA;&lt;p&gt;Paste a shell script on &lt;a href=&#34;https://www.shellcheck.net&#34;&gt;https://www.shellcheck.net&lt;/a&gt; for instant feedback.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.shellcheck.net&#34;&gt;ShellCheck.net&lt;/a&gt; is always synchronized to the latest git commit, and is the easiest way to give ShellCheck a go. Tell your friends!&lt;/p&gt; &#xA;&lt;h3&gt;From your terminal&lt;/h3&gt; &#xA;&lt;p&gt;Run &lt;code&gt;shellcheck yourscript&lt;/code&gt; in your terminal for instant output, as seen above.&lt;/p&gt; &#xA;&lt;h3&gt;In your editor&lt;/h3&gt; &#xA;&lt;p&gt;You can see ShellCheck suggestions directly in a variety of editors.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Vim, through &lt;a href=&#34;https://github.com/w0rp/ale&#34;&gt;ALE&lt;/a&gt;, &lt;a href=&#34;https://github.com/neomake/neomake&#34;&gt;Neomake&lt;/a&gt;, or &lt;a href=&#34;https://github.com/scrooloose/syntastic&#34;&gt;Syntastic&lt;/a&gt;:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/doc/vim-syntastic.png&#34; alt=&#34;Screenshot of Vim showing inlined shellcheck feedback&#34;&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Emacs, through &lt;a href=&#34;https://github.com/flycheck/flycheck&#34;&gt;Flycheck&lt;/a&gt; or &lt;a href=&#34;https://github.com/federicotdn/flymake-shellcheck&#34;&gt;Flymake&lt;/a&gt;:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/doc/emacs-flycheck.png&#34; alt=&#34;Screenshot of emacs showing inlined shellcheck feedback&#34;&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Sublime, through &lt;a href=&#34;https://github.com/SublimeLinter/SublimeLinter-shellcheck&#34;&gt;SublimeLinter&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Atom, through &lt;a href=&#34;https://github.com/AtomLinter/linter-shellcheck&#34;&gt;Linter&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;VSCode, through &lt;a href=&#34;https://github.com/timonwong/vscode-shellcheck&#34;&gt;vscode-shellcheck&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Most other editors, through &lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/shellcheck.1.md#user-content-formats&#34;&gt;GCC error compatibility&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;In your build or test suites&lt;/h3&gt; &#xA;&lt;p&gt;While ShellCheck is mostly intended for interactive use, it can easily be added to builds or test suites. It makes canonical use of exit codes, so you can just add a &lt;code&gt;shellcheck&lt;/code&gt; command as part of the process.&lt;/p&gt; &#xA;&lt;p&gt;For example, in a Makefile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Makefile&#34;&gt;check-scripts:&#xA;    # Fail if any of these files have warnings&#xA;    shellcheck myscripts/*.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or in a Travis CI &lt;code&gt;.travis.yml&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;script:&#xA;  # Fail if any of these files have warnings&#xA;  - shellcheck myscripts/*.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Services and platforms that have ShellCheck pre-installed and ready to use:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://travis-ci.org/&#34;&gt;Travis CI&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.codacy.com/&#34;&gt;Codacy&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://codeclimate.com/&#34;&gt;Code Climate&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.codefactor.io/&#34;&gt;Code Factor&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://circleci.com&#34;&gt;CircleCI&lt;/a&gt; via the &lt;a href=&#34;https://circleci.com/orbs/registry/orb/circleci/shellcheck&#34;&gt;ShellCheck Orb&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/features/actions&#34;&gt;Github&lt;/a&gt; (only Linux)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Most other services, including &lt;a href=&#34;https://about.gitlab.com/&#34;&gt;GitLab&lt;/a&gt;, let you install ShellCheck yourself, either through the system&#39;s package manager (see &lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#installing&#34;&gt;Installing&lt;/a&gt;), or by downloading and unpacking a &lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#installing-a-pre-compiled-binary&#34;&gt;binary release&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s a good idea to manually install a specific ShellCheck version regardless. This avoids any surprise build breaks when a new version with new warnings is published.&lt;/p&gt; &#xA;&lt;p&gt;For customized filtering or reporting, ShellCheck can output simple JSON, CheckStyle compatible XML, GCC compatible warnings as well as human readable text (with or without ANSI colors). See the &lt;a href=&#34;https://github.com/koalaman/shellcheck/wiki/Integration&#34;&gt;Integration&lt;/a&gt; wiki page for more documentation.&lt;/p&gt; &#xA;&lt;h2&gt;Installing&lt;/h2&gt; &#xA;&lt;p&gt;The easiest way to install ShellCheck locally is through your package manager.&lt;/p&gt; &#xA;&lt;p&gt;On systems with Cabal (installs to &lt;code&gt;~/.cabal/bin&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cabal update&#xA;cabal install ShellCheck&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On systems with Stack (installs to &lt;code&gt;~/.local/bin&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;stack update&#xA;stack install ShellCheck&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On Debian based distros:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo apt install shellcheck&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On Arch Linux based distros:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pacman -S shellcheck&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or get the dependency free &lt;a href=&#34;https://aur.archlinux.org/packages/shellcheck-bin/&#34;&gt;shellcheck-bin&lt;/a&gt; from the AUR.&lt;/p&gt; &#xA;&lt;p&gt;On Gentoo based distros:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;emerge --ask shellcheck&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On EPEL based distros:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo yum -y install epel-release&#xA;sudo yum install ShellCheck&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On Fedora based distros:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;dnf install ShellCheck&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On FreeBSD:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pkg install hs-ShellCheck&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On macOS (OS X) with Homebrew:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;brew install shellcheck&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or with MacPorts:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo port install shellcheck&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On OpenBSD:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pkg_add shellcheck&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On openSUSE&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;zypper in ShellCheck&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or use OneClickInstall - &lt;a href=&#34;https://software.opensuse.org/package/ShellCheck&#34;&gt;https://software.opensuse.org/package/ShellCheck&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;On Solus:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;eopkg install shellcheck&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On Windows (via &lt;a href=&#34;https://chocolatey.org/packages/shellcheck&#34;&gt;chocolatey&lt;/a&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cmd&#34;&gt;C:\&amp;gt; choco install shellcheck&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or Windows (via &lt;a href=&#34;http://scoop.sh&#34;&gt;scoop&lt;/a&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cmd&#34;&gt;C:\&amp;gt; scoop install shellcheck&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;From &lt;a href=&#34;https://anaconda.org/conda-forge/shellcheck&#34;&gt;conda-forge&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;conda install -c conda-forge shellcheck&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;From Snap Store:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;snap install --channel=edge shellcheck&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;From Docker Hub:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker run --rm -v &#34;$PWD:/mnt&#34; koalaman/shellcheck:stable myscript&#xA;# Or :v0.4.7 for that version, or :latest for daily builds&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or use &lt;code&gt;koalaman/shellcheck-alpine&lt;/code&gt; if you want a larger Alpine Linux based image to extend. It works exactly like a regular Alpine image, but has shellcheck preinstalled.&lt;/p&gt; &#xA;&lt;p&gt;Using the &lt;a href=&#34;https://nixos.org/nix&#34;&gt;nix package manager&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;nix-env -iA nixpkgs.shellcheck&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, you can download pre-compiled binaries for the latest release here:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/releases/download/stable/shellcheck-stable.linux.x86_64.tar.xz&#34;&gt;Linux, x86_64&lt;/a&gt; (statically linked)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/releases/download/stable/shellcheck-stable.linux.armv6hf.tar.xz&#34;&gt;Linux, armv6hf&lt;/a&gt;, i.e. Raspberry Pi (statically linked)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/releases/download/stable/shellcheck-stable.linux.aarch64.tar.xz&#34;&gt;Linux, aarch64&lt;/a&gt; aka ARM64 (statically linked)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/releases/download/stable/shellcheck-stable.darwin.x86_64.tar.xz&#34;&gt;macOS, x86_64&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/releases/download/stable/shellcheck-stable.zip&#34;&gt;Windows, x86&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;or see the &lt;a href=&#34;https://github.com/koalaman/shellcheck/releases&#34;&gt;GitHub Releases&lt;/a&gt; for other releases (including the &lt;a href=&#34;https://github.com/koalaman/shellcheck/releases/tag/latest&#34;&gt;latest&lt;/a&gt; meta-release for daily git builds).&lt;/p&gt; &#xA;&lt;p&gt;Distro packages already come with a &lt;code&gt;man&lt;/code&gt; page. If you are building from source, it can be installed with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;pandoc -s -f markdown-smart -t man shellcheck.1.md -o shellcheck.1&#xA;sudo mv shellcheck.1 /usr/share/man/man1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;pre-commit&lt;/h3&gt; &#xA;&lt;p&gt;To run ShellCheck via &lt;a href=&#34;https://pre-commit.com/&#34;&gt;pre-commit&lt;/a&gt;, add the hook to your &lt;code&gt;.pre-commit-config.yaml&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;repos:&#xA;-   repo: https://github.com/koalaman/shellcheck-precommit&#xA;    rev: v0.7.2&#xA;    hooks:&#xA;    -   id: shellcheck&#xA;#       args: [&#34;--severity=warning&#34;]  # Optionally only show errors and warnings&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Travis CI&lt;/h3&gt; &#xA;&lt;p&gt;Travis CI has now integrated ShellCheck by default, so you don&#39;t need to manually install it.&lt;/p&gt; &#xA;&lt;p&gt;If you still want to do so in order to upgrade at your leisure or ensure you&#39;re using the latest release, follow the steps below to install a binary version.&lt;/p&gt; &#xA;&lt;h3&gt;Installing a pre-compiled binary&lt;/h3&gt; &#xA;&lt;p&gt;The pre-compiled binaries come in &lt;code&gt;tar.xz&lt;/code&gt; files. To decompress them, make sure &lt;code&gt;xz&lt;/code&gt; is installed. On Debian/Ubuntu/Mint, you can &lt;code&gt;apt install xz-utils&lt;/code&gt;. On Redhat/Fedora/CentOS, &lt;code&gt;yum -y install xz&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;A simple installer may do something like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;scversion=&#34;stable&#34; # or &#34;v0.4.7&#34;, or &#34;latest&#34;&#xA;wget -qO- &#34;https://github.com/koalaman/shellcheck/releases/download/${scversion?}/shellcheck-${scversion?}.linux.x86_64.tar.xz&#34; | tar -xJv&#xA;cp &#34;shellcheck-${scversion}/shellcheck&#34; /usr/bin/&#xA;shellcheck --version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Compiling from source&lt;/h2&gt; &#xA;&lt;p&gt;This section describes how to build ShellCheck from a source directory. ShellCheck is written in Haskell and requires 2GB of RAM to compile.&lt;/p&gt; &#xA;&lt;h3&gt;Installing Cabal&lt;/h3&gt; &#xA;&lt;p&gt;ShellCheck is built and packaged using Cabal. Install the package &lt;code&gt;cabal-install&lt;/code&gt; from your system&#39;s package manager (with e.g. &lt;code&gt;apt-get&lt;/code&gt;, &lt;code&gt;brew&lt;/code&gt;, &lt;code&gt;emerge&lt;/code&gt;, &lt;code&gt;yum&lt;/code&gt;, or &lt;code&gt;zypper&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;On macOS (OS X), you can do a fast install of Cabal using brew, which takes a couple of minutes instead of more than 30 minutes if you try to compile it from source.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ brew install cabal-install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On MacPorts, the package is instead called &lt;code&gt;hs-cabal-install&lt;/code&gt;, while native Windows users should install the latest version of the Haskell platform from &lt;a href=&#34;https://www.haskell.org/platform/&#34;&gt;https://www.haskell.org/platform/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Verify that &lt;code&gt;cabal&lt;/code&gt; is installed and update its dependency list with&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cabal update&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Compiling ShellCheck&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;git clone&lt;/code&gt; this repository, and &lt;code&gt;cd&lt;/code&gt; to the ShellCheck source directory to build/install:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cabal install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or if you intend to run the tests:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cabal install --enable-tests&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will compile ShellCheck and install it to your &lt;code&gt;~/.cabal/bin&lt;/code&gt; directory.&lt;/p&gt; &#xA;&lt;p&gt;Add this directory to your &lt;code&gt;PATH&lt;/code&gt; (for bash, add this to your &lt;code&gt;~/.bashrc&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;export PATH=&#34;$HOME/.cabal/bin:$PATH&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Log out and in again, and verify that your PATH is set up correctly:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ which shellcheck&#xA;~/.cabal/bin/shellcheck&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On native Windows, the &lt;code&gt;PATH&lt;/code&gt; should already be set up, but the system may use a legacy codepage. In &lt;code&gt;cmd.exe&lt;/code&gt;, &lt;code&gt;powershell.exe&lt;/code&gt; and Powershell ISE, make sure to use a TrueType font, not a Raster font, and set the active codepage to UTF-8 (65001) with &lt;code&gt;chcp&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cmd&#34;&gt;chcp 65001&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In Powershell ISE, you may need to additionally update the output encoding:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;[Console]::OutputEncoding = [System.Text.Encoding]::UTF8&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Running tests&lt;/h3&gt; &#xA;&lt;p&gt;To run the unit test suite:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cabal test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Gallery of bad code&lt;/h2&gt; &#xA;&lt;p&gt;So what kind of things does ShellCheck look for? Here is an incomplete list of detected issues.&lt;/p&gt; &#xA;&lt;h3&gt;Quoting&lt;/h3&gt; &#xA;&lt;p&gt;ShellCheck can recognize several types of incorrect quoting:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;echo $1                           # Unquoted variables&#xA;find . -name *.ogg                # Unquoted find/grep patterns&#xA;rm &#34;~/my file.txt&#34;                # Quoted tilde expansion&#xA;v=&#39;--verbose=&#34;true&#34;&#39;; cmd $v      # Literal quotes in variables&#xA;for f in &#34;*.ogg&#34;                  # Incorrectly quoted &#39;for&#39; loops&#xA;touch $@                          # Unquoted $@&#xA;echo &#39;Don&#39;t forget to restart!&#39;   # Singlequote closed by apostrophe&#xA;echo &#39;Don\&#39;t try this at home&#39;    # Attempting to escape &#39; in &#39;&#39;&#xA;echo &#39;Path is $PATH&#39;              # Variables in single quotes&#xA;trap &#34;echo Took ${SECONDS}s&#34; 0    # Prematurely expanded trap&#xA;unset var[i]                      # Array index treated as glob&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Conditionals&lt;/h3&gt; &#xA;&lt;p&gt;ShellCheck can recognize many types of incorrect test statements.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;[[ n != 0 ]]                      # Constant test expressions&#xA;[[ -e *.mpg ]]                    # Existence checks of globs&#xA;[[ $foo==0 ]]                     # Always true due to missing spaces&#xA;[[ -n &#34;$foo &#34; ]]                  # Always true due to literals&#xA;[[ $foo =~ &#34;fo+&#34; ]]               # Quoted regex in =~&#xA;[ foo =~ re ]                     # Unsupported [ ] operators&#xA;[ $1 -eq &#34;shellcheck&#34; ]           # Numerical comparison of strings&#xA;[ $n &amp;amp;&amp;amp; $m ]                      # &amp;amp;&amp;amp; in [ .. ]&#xA;[ grep -q foo file ]              # Command without $(..)&#xA;[[ &#34;$$file&#34; == *.jpg ]]           # Comparisons that can&#39;t succeed&#xA;(( 1 -lt 2 ))                     # Using test operators in ((..))&#xA;[ x ] &amp;amp; [ y ] | [ z ]             # Accidental backgrounding and piping&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Frequently misused commands&lt;/h3&gt; &#xA;&lt;p&gt;ShellCheck can recognize instances where commands are used incorrectly:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;grep &#39;*foo*&#39; file                 # Globs in regex contexts&#xA;find . -exec foo {} &amp;amp;&amp;amp; bar {} \;  # Prematurely terminated find -exec&#xA;sudo echo &#39;Var=42&#39; &amp;gt; /etc/profile # Redirecting sudo&#xA;time --format=%s sleep 10         # Passing time(1) flags to time builtin&#xA;while read h; do ssh &#34;$h&#34; uptime  # Commands eating while loop input&#xA;alias archive=&#39;mv $1 /backup&#39;     # Defining aliases with arguments&#xA;tr -cd &#39;[a-zA-Z0-9]&#39;              # [] around ranges in tr&#xA;exec foo; echo &#34;Done!&#34;            # Misused &#39;exec&#39;&#xA;find -name \*.bak -o -name \*~ -delete  # Implicit precedence in find&#xA;# find . -exec foo &amp;gt; bar \;       # Redirections in find&#xA;f() { whoami; }; sudo f           # External use of internal functions&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Common beginner&#39;s mistakes&lt;/h3&gt; &#xA;&lt;p&gt;ShellCheck recognizes many common beginner&#39;s syntax errors:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;var = 42                          # Spaces around = in assignments&#xA;$foo=42                           # $ in assignments&#xA;for $var in *; do ...             # $ in for loop variables&#xA;var$n=&#34;Hello&#34;                     # Wrong indirect assignment&#xA;echo ${var$n}                     # Wrong indirect reference&#xA;var=(1, 2, 3)                     # Comma separated arrays&#xA;array=( [index] = value )         # Incorrect index initialization&#xA;echo $var[14]                     # Missing {} in array references&#xA;echo &#34;Argument 10 is $10&#34;         # Positional parameter misreference&#xA;if $(myfunction); then ..; fi     # Wrapping commands in $()&#xA;else if othercondition; then ..   # Using &#39;else if&#39;&#xA;f; f() { echo &#34;hello world; }     # Using function before definition&#xA;[ false ]                         # &#39;false&#39; being true&#xA;if ( -f file )                    # Using (..) instead of test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Style&lt;/h3&gt; &#xA;&lt;p&gt;ShellCheck can make suggestions to improve style:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;[[ -z $(find /tmp | grep mpg) ]]  # Use grep -q instead&#xA;a &amp;gt;&amp;gt; log; b &amp;gt;&amp;gt; log; c &amp;gt;&amp;gt; log      # Use a redirection block instead&#xA;echo &#34;The time is `date`&#34;         # Use $() instead&#xA;cd dir; process *; cd ..;         # Use subshells instead&#xA;echo $[1+2]                       # Use standard $((..)) instead of old $[]&#xA;echo $(($RANDOM % 6))             # Don&#39;t use $ on variables in $((..))&#xA;echo &#34;$(date)&#34;                    # Useless use of echo&#xA;cat file | grep foo               # Useless use of cat&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Data and typing errors&lt;/h3&gt; &#xA;&lt;p&gt;ShellCheck can recognize issues related to data and typing:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;args=&#34;$@&#34;                         # Assigning arrays to strings&#xA;files=(foo bar); echo &#34;$files&#34;    # Referencing arrays as strings&#xA;declare -A arr=(foo bar)          # Associative arrays without index&#xA;printf &#34;%s\n&#34; &#34;Arguments: $@.&#34;    # Concatenating strings and arrays&#xA;[[ $# &amp;gt; 2 ]]                      # Comparing numbers as strings&#xA;var=World; echo &#34;Hello &#34; var      # Unused lowercase variables&#xA;echo &#34;Hello $name&#34;                # Unassigned lowercase variables&#xA;cmd | read bar; echo $bar         # Assignments in subshells&#xA;cat foo | cp bar                  # Piping to commands that don&#39;t read&#xA;printf &#39;%s: %s\n&#39; foo             # Mismatches in printf argument count&#xA;eval &#34;${array[@]}&#34;                # Lost word boundaries in array eval&#xA;for i in &#34;${x[@]}&#34;; do ${x[$i]}   # Using array value as key&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Robustness&lt;/h3&gt; &#xA;&lt;p&gt;ShellCheck can make suggestions for improving the robustness of a script:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;rm -rf &#34;$STEAMROOT/&#34;*            # Catastrophic rm&#xA;touch ./-l; ls *                 # Globs that could become options&#xA;find . -exec sh -c &#39;a &amp;amp;&amp;amp; b {}&#39; \; # Find -exec shell injection&#xA;printf &#34;Hello $name&#34;             # Variables in printf format&#xA;for f in $(ls *.txt); do         # Iterating over ls output&#xA;export MYVAR=$(cmd)              # Masked exit codes&#xA;case $version in 2.*) :;; 2.6.*) # Shadowed case branches&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Portability&lt;/h3&gt; &#xA;&lt;p&gt;ShellCheck will warn when using features not supported by the shebang. For example, if you set the shebang to &lt;code&gt;#!/bin/sh&lt;/code&gt;, ShellCheck will warn about portability issues similar to &lt;code&gt;checkbashisms&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;echo {1..$n}                     # Works in ksh, but not bash/dash/sh&#xA;echo {1..10}                     # Works in ksh and bash, but not dash/sh&#xA;echo -n 42                       # Works in ksh, bash and dash, undefined in sh&#xA;expr match str regex             # Unportable alias for `expr str : regex`&#xA;trap &#39;exit 42&#39; sigint            # Unportable signal spec&#xA;cmd &amp;amp;&amp;gt; file                      # Unportable redirection operator&#xA;read foo &amp;lt; /dev/tcp/host/22      # Unportable intercepted files&#xA;foo-bar() { ..; }                # Undefined/unsupported function name&#xA;[ $UID = 0 ]                     # Variable undefined in dash/sh&#xA;local var=value                  # local is undefined in sh&#xA;time sleep 1 | sleep 5           # Undefined uses of &#39;time&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Miscellaneous&lt;/h3&gt; &#xA;&lt;p&gt;ShellCheck recognizes a menagerie of other issues:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;PS1=&#39;\e[0;32m\$\e[0m &#39;            # PS1 colors not in \[..\]&#xA;PATH=&#34;$PATH:~/bin&#34;                # Literal tilde in $PATH&#xA;rm “file”                         # Unicode quotes&#xA;echo &#34;Hello world&#34;                # Carriage return / DOS line endings&#xA;echo hello \                      # Trailing spaces after \&#xA;var=42 echo $var                  # Expansion of inlined environment&#xA;!# bin/bash -x -e                 # Common shebang errors&#xA;echo $((n/180*100))               # Unnecessary loss of precision&#xA;ls *[:digit:].txt                 # Bad character class globs&#xA;sed &#39;s/foo/bar/&#39; file &amp;gt; file      # Redirecting to input&#xA;var2=$var2                        # Variable assigned to itself&#xA;[ x$var = xval ]                  # Antiquated x-comparisons&#xA;ls() { ls -l &#34;$@&#34;; }              # Infinitely recursive wrapper&#xA;alias ls=&#39;ls -l&#39;; ls foo          # Alias used before it takes effect&#xA;for x; do for x; do               # Nested loop uses same variable&#xA;while getopts &#34;a&#34; f; do case $f in &#34;b&#34;) # Unhandled getopts flags&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Testimonials&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;At first you&#39;re like &#34;shellcheck is awesome&#34; but then you&#39;re like &#34;wtf are we still using bash&#34;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Alexander Tarasikov, &lt;a href=&#34;https://twitter.com/astarasikov/status/568825996532707330&#34;&gt;via Twitter&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Ignoring issues&lt;/h2&gt; &#xA;&lt;p&gt;Issues can be ignored via environmental variable, command line, individually or globally within a file:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/wiki/Ignore&#34;&gt;https://github.com/koalaman/shellcheck/wiki/Ignore&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Reporting bugs&lt;/h2&gt; &#xA;&lt;p&gt;Please use the GitHub issue tracker for any bugs or feature suggestions:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/issues&#34;&gt;https://github.com/koalaman/shellcheck/issues&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Please submit patches to code or documentation as GitHub pull requests! Check out the &lt;a href=&#34;https://github.com/koalaman/shellcheck/wiki/DevGuide&#34;&gt;DevGuide&lt;/a&gt; on the ShellCheck Wiki.&lt;/p&gt; &#xA;&lt;p&gt;Contributions must be licensed under the GNU GPLv3. The contributor retains the copyright.&lt;/p&gt; &#xA;&lt;h2&gt;Copyright&lt;/h2&gt; &#xA;&lt;p&gt;ShellCheck is licensed under the GNU General Public License, v3. A copy of this license is included in the file &lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/LICENSE&#34;&gt;LICENSE&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Copyright 2012-2019, &lt;a href=&#34;https://github.com/koalaman/&#34;&gt;Vidar &#39;koala_man&#39; Holen&lt;/a&gt; and contributors.&lt;/p&gt; &#xA;&lt;p&gt;Happy ShellChecking!&lt;/p&gt; &#xA;&lt;h2&gt;Other Resources&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The wiki has &lt;a href=&#34;https://github.com/koalaman/shellcheck/wiki/Checks&#34;&gt;long form descriptions&lt;/a&gt; for each warning, e.g. &lt;a href=&#34;https://github.com/koalaman/shellcheck/wiki/SC2221&#34;&gt;SC2221&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;ShellCheck does not attempt to enforce any kind of formatting or indenting style, so also check out &lt;a href=&#34;https://github.com/mvdan/sh&#34;&gt;shfmt&lt;/a&gt;!&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>input-output-hk/cardano-wallet</title>
    <updated>2022-05-29T01:43:13Z</updated>
    <id>tag:github.com,2022-05-29:/input-output-hk/cardano-wallet</id>
    <link href="https://github.com/input-output-hk/cardano-wallet" rel="alternate"></link>
    <summary type="html">&lt;p&gt;HTTP server &amp; command-line for managing UTxOs and HD wallets in Cardano.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;big&gt;&lt;strong&gt;Cardano Wallet&lt;/strong&gt;&lt;/big&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;200&#34; src=&#34;https://raw.githubusercontent.com/input-output-hk/cardano-wallet/master/.github/images/cardano-logo.png&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/input-output-hk/cardano-wallet/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release-pre/input-output-hk/cardano-wallet.svg?style=for-the-badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://buildkite.com/input-output-hk/cardano-wallet&#34;&gt;&lt;img src=&#34;https://img.shields.io/buildkite/7ea3dac7a16f066d8dfc8f426a9a9f7a2131e899cd96c444cf/master?label=BUILD&amp;amp;style=for-the-badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://buildkite.com/input-output-hk/cardano-wallet-nightly&#34;&gt;&lt;img src=&#34;https://img.shields.io/buildkite/59ea9363b8526e867005ca8839db47715bc5f661f36e490143/master?label=BENCHMARK&amp;amp;style=for-the-badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/input-output-hk/cardano-wallet/actions?query=workflow%3Awindows&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/workflow/status/input-output-hk/cardano-wallet/windows?label=Windows&amp;amp;style=for-the-badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hydra.iohk.io/jobset/Cardano/cardano-wallet#tabs-jobs&#34;&gt;&lt;img src=&#34;https://img.shields.io/endpoint?style=for-the-badge&amp;amp;url=https%3A%2F%2Fhydra.iohk.io%2Fjob%2FCardano%2Fcardano-wallet%2Frequired%2Fshield&#34;&gt;&lt;/a&gt; &#xA; &lt;!--&#xA;  &lt;a href=&#34;https://coveralls.io/github/input-output-hk/cardano-wallet?branch=HEAD&#34;&gt;&lt;img src=&#34;https://img.shields.io/coveralls/github/input-output-hk/cardano-wallet/HEAD?style=for-the-badge&#34; /&gt;&lt;/a&gt;&#xA;  --&gt; &lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;Cardano Wallet helps you manage your Ada. You can use it to send and receive payments on the &lt;a href=&#34;https://www.cardano.org&#34;&gt;Cardano&lt;/a&gt; blockchain.&lt;/p&gt; &#xA;&lt;p&gt;This project provides an HTTP Application Programming Interface (API) and command-line interface (CLI) for working with your wallet.&lt;/p&gt; &#xA;&lt;p&gt;It can be used as a component of a frontend such as &lt;a href=&#34;https://daedaluswallet.io&#34;&gt;Daedalus&lt;/a&gt;, which provides a friendly user interface for wallets. Most users who would like to use Cardano should start with Daedalus.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span&gt;ℹ&lt;/span&gt; This source code repository contains the next major version of Cardano Wallet, which has been completely rewritten for the &lt;a href=&#34;https://roadmap.cardano.org/&#34;&gt;Shelley&lt;/a&gt; phase.&lt;/p&gt; &#xA; &lt;p&gt;&lt;span&gt;💡&lt;/span&gt; The Byron version of Cardano Wallet is in the &lt;a href=&#34;https://github.com/input-output-hk/cardano-sl&#34;&gt;cardano-sl&lt;/a&gt; repository.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;wget https://raw.githubusercontent.com/input-output-hk/cardano-wallet/master/docker-compose.yml&#xA;NETWORK=testnet docker-compose up&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Fantastic! The server is up-and-running, waiting for HTTP requests on &lt;code&gt;localhost:8090/v2&lt;/code&gt; e.g.:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;curl http://localhost:8090/v2/network/information&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or to be accessed via CLI, e.g.:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run --network host --rm inputoutput/cardano-wallet network information&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See also &lt;a href=&#34;https://input-output-hk.github.io/cardano-wallet/user-guide/Docker&#34;&gt;Docker&lt;/a&gt; for more information about using docker.&lt;/p&gt; &#xA;&lt;p&gt;NixOS users can also use the &lt;a href=&#34;https://input-output-hk.github.io/cardano-wallet/user-guide/NixOS&#34;&gt;NixOS service&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;How to install (Linux / Windows / Mac OS)&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;strong&gt;Installation Instructions&lt;/strong&gt; for each available &lt;a href=&#34;https://github.com/input-output-hk/cardano-wallet/releases&#34;&gt;release&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;h3&gt;Latest releases&lt;/h3&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th&gt;cardano-wallet&lt;/th&gt; &#xA;    &lt;th&gt;cardano-node (compatible versions)&lt;/th&gt; &#xA;    &lt;th&gt;SMASH (compatible versions)&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;master&lt;/code&gt; branch&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/input-output-hk/cardano-node/releases/tag/1.34.1&#34;&gt;1.34.1&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/input-output-hk/smash/releases/tag/1.6.1&#34;&gt;1.6.1&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/input-output-hk/cardano-wallet/releases/tag/v2022-05-27&#34;&gt;v2022-05-27&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/input-output-hk/cardano-node/releases/tag/1.34.1&#34;&gt;1.34.1&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/input-output-hk/smash/releases/tag/1.6.1&#34;&gt;1.6.1&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/input-output-hk/cardano-wallet/releases/tag/v2022-04-27&#34;&gt;v2022-04-27&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/input-output-hk/cardano-node/releases/tag/1.34.1&#34;&gt;1.34.1&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/input-output-hk/smash/releases/tag/1.6.1&#34;&gt;1.6.1&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/input-output-hk/cardano-wallet/releases/tag/v2022-01-18&#34;&gt;v2022-01-18&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/input-output-hk/cardano-node/releases/tag/1.33.0&#34;&gt;1.33.0&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/input-output-hk/smash/releases/tag/1.6.1&#34;&gt;1.6.1&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;How to build from sources&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://input-output-hk.github.io/cardano-wallet/developers/Building&#34;&gt;Building&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;How to test&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://input-output-hk.github.io/cardano-wallet/contributing/Testing&#34;&gt;Testing&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Link&lt;/th&gt; &#xA;   &lt;th&gt;Audience&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://input-output-hk.github.io/cardano-wallet/user-guide&#34;&gt;User Guide&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Users of Cardano Wallet&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://input-output-hk.github.io/cardano-wallet/user-guide/cli&#34;&gt;CLI Manual&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Users of the Cardano Wallet API&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://input-output-hk.github.io/cardano-wallet/api/edge&#34;&gt;API Documentation&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Users of the Cardano Wallet API&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://input-output-hk.github.io/cardano-wallet/&#34;&gt;Cardano Wallet Documentation&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Anyone interested in the project and our development process&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://input-output-hk.github.io/adrestia/&#34;&gt;Adrestia Documentation&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Anyone interested in the project and our development process&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;hr&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/input-output-hk/cardano-wallet/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/input-output-hk/cardano-wallet.svg?style=for-the-badge&#34;&gt;&lt;/a&gt; &lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>jtdaugherty/brick</title>
    <updated>2022-05-29T01:43:13Z</updated>
    <id>tag:github.com,2022-05-29:/jtdaugherty/brick</id>
    <link href="https://github.com/jtdaugherty/brick" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A declarative Unix terminal UI programming library written in Haskell&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jtdaugherty/brick/master/logo/brick-final-clearbg-with-text.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;brick&lt;/code&gt; is a Haskell terminal user interface (TUI) programming toolkit. To use it, you write a pure function that describes how your user interface should be drawn based on your current application state and you provide a state transformation function to handle events.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;brick&lt;/code&gt; exposes a declarative API. Unlike most GUI toolkits which require you to write a long and tedious sequence of &#34;create a widget, now bind an event handler&#34;, &lt;code&gt;brick&lt;/code&gt; just requires you to describe your interface using a set of declarative layout combinators.&lt;/p&gt; &#xA;&lt;p&gt;Under the hood, this library builds upon &lt;a href=&#34;http://hackage.haskell.org/package/vty&#34;&gt;vty&lt;/a&gt;, so some knowledge of Vty will be helpful in using this library.&lt;/p&gt; &#xA;&lt;h2&gt;Example&lt;/h2&gt; &#xA;&lt;p&gt;Here&#39;s an example interface (see &lt;code&gt;programs/ReadmeDemo.hs&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;withBorderStyle unicode $&#xA;borderWithLabel (str &#34;Hello!&#34;) $&#xA;(center (str &#34;Left&#34;) &amp;lt;+&amp;gt; vBorder &amp;lt;+&amp;gt; center (str &#34;Right&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Result:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;┌─────────Hello!─────────┐&#xA;│           │            │&#xA;│           │            │&#xA;│   Left    │   Right    │&#xA;│           │            │&#xA;│           │            │&#xA;└────────────────────────┘&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Featured Projects&lt;/h2&gt; &#xA;&lt;p&gt;To get an idea of what some people have done with &lt;code&gt;brick&lt;/code&gt;, check out these projects. If you have made something and would like me to include it, get in touch!&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Project&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/SamTay/tetris&#34;&gt;&lt;code&gt;tetris&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;An implementation of the Tetris game&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/callum-oakley/gotta-go-fast&#34;&gt;&lt;code&gt;gotta-go-fast&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A typing tutor&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/potomak/haskell-player&#34;&gt;&lt;code&gt;haskell-player&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;An &lt;code&gt;afplay&lt;/code&gt; frontend&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/elaye/mushu&#34;&gt;&lt;code&gt;mushu&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;An &lt;code&gt;MPD&lt;/code&gt; client&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/matterhorn-chat/matterhorn&#34;&gt;&lt;code&gt;matterhorn&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A client for &lt;a href=&#34;https://about.mattermost.com/&#34;&gt;Mattermost&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/maoe/viewprof&#34;&gt;&lt;code&gt;viewprof&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A GHC profile viewer&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/jtdaugherty/tart&#34;&gt;&lt;code&gt;tart&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A mouse-driven ASCII art drawing program&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/rootmos/silly-joy&#34;&gt;&lt;code&gt;silly-joy&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;An interpreter for Joy&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/jackkiefer/herms&#34;&gt;&lt;code&gt;herms&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A command-line tool for managing kitchen recipes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/purebred-mua/purebred&#34;&gt;&lt;code&gt;purebred&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A mail user agent&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/8Gitbrix/2048Haskell&#34;&gt;&lt;code&gt;2048Haskell&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;An implementation of the 2048 game&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/andrevdm/bhoogle&#34;&gt;&lt;code&gt;bhoogle&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A &lt;a href=&#34;https://www.haskell.org/hoogle/&#34;&gt;Hoogle&lt;/a&gt; client&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/pasqu4le/clifm&#34;&gt;&lt;code&gt;clifm&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A file manager&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/shajenM/projects/tree/master/towerHanoi&#34;&gt;&lt;code&gt;towerHanoi&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Animated solutions to The Tower of Hanoi&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/ChrisPenner/void-space&#34;&gt;&lt;code&gt;VOIDSPACE&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A space-themed typing-tutor game&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/ambuc/solitaire&#34;&gt;&lt;code&gt;solitaire&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The card game&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/evanrelf/sudoku-tui&#34;&gt;&lt;code&gt;sudoku-tui&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A Sudoku implementation&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/kowainik/summoner/tree/master/summoner-tui&#34;&gt;&lt;code&gt;summoner-tui&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;An interactive frontend to the Summoner tool&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/ta0kira/wrapping-editor&#34;&gt;&lt;code&gt;wrapping-editor&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;An embeddable editor with support for Brick&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/andys8/git-brunch&#34;&gt;&lt;code&gt;git-brunch&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A git branch checkout utility&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Yvee1/hascard&#34;&gt;&lt;code&gt;hascard&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A program for reviewing &#34;flash card&#34; notes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/evuez/ttyme&#34;&gt;&lt;code&gt;ttyme&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A TUI for &lt;a href=&#34;https://www.getharvest.com/&#34;&gt;Harvest&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.haskell.org/ghcup/&#34;&gt;&lt;code&gt;ghcup&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A TUI for &lt;code&gt;ghcup&lt;/code&gt;, the Haskell toolchain manager&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/mlang/chessIO&#34;&gt;&lt;code&gt;cbookview&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A TUI for exploring polyglot chess opening book files&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/rmehri01/thock&#34;&gt;&lt;code&gt;thock&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A modern TUI typing game featuring online racing against friends&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/benjaminselfridge/fifteen&#34;&gt;&lt;code&gt;fifteen&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;An implementation of the &lt;a href=&#34;https://en.wikipedia.org/wiki/15_puzzle&#34;&gt;15 puzzle&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/benjaminselfridge/maze&#34;&gt;&lt;code&gt;maze&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A Brick-based maze game&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/2mol/pboy&#34;&gt;&lt;code&gt;pboy&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A tiny PDF organizer&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/DamienCassou/hyahtzee2#readme&#34;&gt;&lt;code&gt;hyahtzee2&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Famous Yahtzee dice game&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/gerdreiss/brewsage#readme&#34;&gt;&lt;code&gt;brewsage&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A TUI for Homebrew&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://codedownio.github.io/sandwich/&#34;&gt;&lt;code&gt;sandwich&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A test framework with a TUI interface&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/florentc/youbrick&#34;&gt;&lt;code&gt;youbrick&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A feed aggregator and launcher for Youtube channels&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/byorgey/swarm/&#34;&gt;&lt;code&gt;swarm&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A 2D programming and resource gathering game&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/simonmichael/hledger&#34;&gt;&lt;code&gt;hledger-ui&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A terminal UI for the hledger accounting system.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://github.com/rootzlevel/hledger-iadd&#34;&gt;&lt;code&gt;hledger-iadd&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;An interactive terminal UI for adding hledger journal entries&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/ivanjermakov/wordle&#34;&gt;&lt;code&gt;wordle&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;An implementation of the Wordle game&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/akazukin5151/kpxhs&#34;&gt;&lt;code&gt;kpxhs&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;An interactive &lt;a href=&#34;https://github.com/keepassxreboot/keepassxc/&#34;&gt;Keepass&lt;/a&gt; database viewer&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Simon-Hostettler/htyper&#34;&gt;&lt;code&gt;htyper&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A typing speed test program&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/ajithnn/ullekha&#34;&gt;&lt;code&gt;ullekha&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;An interactive terminal notes/todo app with file/redis persistence&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;These third-party packages also extend &lt;code&gt;brick&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Project&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/ChrisPenner/brick-filetree&#34;&gt;&lt;code&gt;brick-filetree&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;http://hackage.haskell.org/package/brick-filetree&#34;&gt;[Hackage]&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A widget for exploring a directory tree and selecting or flagging files and directories&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Release Announcements / News&lt;/h2&gt; &#xA;&lt;p&gt;Find out about &lt;code&gt;brick&lt;/code&gt; releases and other news on Twitter:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://twitter.com/brick_haskell/&#34;&gt;https://twitter.com/brick_haskell/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;Check out the many demo programs to get a feel for different aspects of the library:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cabal new-build -f demos&#xA;$ find dist-newstyle -type f -name \*-demo&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To get started, see the &lt;a href=&#34;https://github.com/jtdaugherty/brick/raw/master/docs/guide.rst&#34;&gt;user guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Documentation for &lt;code&gt;brick&lt;/code&gt; comes in a variety of forms:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jtdaugherty/brick/raw/master/docs/guide.rst&#34;&gt;The official brick user guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jtdaugherty/brick/raw/master/docs/samtay-tutorial.md&#34;&gt;Samuel Tay&#39;s brick tutorial&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Haddock (all modules)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jtdaugherty/brick/raw/master/programs&#34;&gt;Demo programs&lt;/a&gt; (&lt;a href=&#34;https://github.com/jtdaugherty/brick/raw/master/docs/programs-screenshots.md&#34;&gt;Screenshots&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jtdaugherty/brick/raw/master/FAQ.md&#34;&gt;FAQ&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Feature Overview&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;brick&lt;/code&gt; comes with a bunch of batteries included:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Vertical and horizontal box layout widgets&lt;/li&gt; &#xA; &lt;li&gt;Basic single- and multi-line text editor widgets&lt;/li&gt; &#xA; &lt;li&gt;List and table widgets&lt;/li&gt; &#xA; &lt;li&gt;Progress bar widget&lt;/li&gt; &#xA; &lt;li&gt;Simple dialog box widget&lt;/li&gt; &#xA; &lt;li&gt;Border-drawing widgets (put borders around or in between things)&lt;/li&gt; &#xA; &lt;li&gt;Generic scrollable viewports and viewport scroll bars&lt;/li&gt; &#xA; &lt;li&gt;General-purpose layout control combinators&lt;/li&gt; &#xA; &lt;li&gt;Extensible widget-building API&lt;/li&gt; &#xA; &lt;li&gt;User-customizable attribute themes&lt;/li&gt; &#xA; &lt;li&gt;Type-safe, validated input form API (see the &lt;code&gt;Brick.Forms&lt;/code&gt; module)&lt;/li&gt; &#xA; &lt;li&gt;A filesystem browser for file and directory selection&lt;/li&gt; &#xA; &lt;li&gt;Borders can be configured to automatically connect!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Brick-Users Discussion&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;brick-users&lt;/code&gt; Google Group / e-mail list is a place to discuss library changes, give feedback, and ask questions. You can subscribe at:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://groups.google.com/group/brick-users&#34;&gt;https://groups.google.com/group/brick-users&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Status&lt;/h2&gt; &#xA;&lt;p&gt;There are some places were I have deliberately chosen to worry about performance later for the sake of spending more time on the design (and to wait on performance issues to arise first). &lt;code&gt;brick&lt;/code&gt; is also something of an experimental project of mine and some aspects of the design involve trade-offs that might not be right for your application. Brick is not intended to be all things to all people; rather, I want it to provide a good foundation for building complex terminal interfaces in a declarative style to take away specific headaches of building, modifying, and working with such interfaces, all while seeing how far we can get with a pure function to specify the interface.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;brick&lt;/code&gt; exports an extension API that makes it possible to make your own packages and widgets. If you use that, you&#39;ll also be helping to test whether the exported interface is usable and complete!&lt;/p&gt; &#xA;&lt;h2&gt;Reporting bugs&lt;/h2&gt; &#xA;&lt;p&gt;Please file bug reports as GitHub issues. For best results:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Include the versions of relevant software packages: your terminal emulator, &lt;code&gt;brick&lt;/code&gt;, &lt;code&gt;ghc&lt;/code&gt;, and &lt;code&gt;vty&lt;/code&gt; will be the most important ones.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Clearly describe the behavior you expected ...&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;... and include a minimal demonstration program that exhibits the behavior you actually observed.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;If you decide to contribute, that&#39;s great! Here are some guidelines you should consider to make submitting patches easier for all concerned:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If you want to take on big things, talk to me first; let&#39;s have a design/vision discussion before you start coding. Create a GitHub issue and we can use that as the place to hash things out.&lt;/li&gt; &#xA; &lt;li&gt;Please make changes consistent with the conventions I&#39;ve used in the codebase.&lt;/li&gt; &#xA; &lt;li&gt;Please adjust or provide Haddock and/or user guide documentation relevant to any changes you make.&lt;/li&gt; &#xA; &lt;li&gt;New commits should be &lt;code&gt;-Wall&lt;/code&gt; clean.&lt;/li&gt; &#xA; &lt;li&gt;Please do NOT include package version changes in your patches. Package version changes are only done at release time when the full scope of a release&#39;s changes can be evaluated to determine the appropriate version change.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>hasura/graphql-engine</title>
    <updated>2022-05-29T01:43:13Z</updated>
    <id>tag:github.com,2022-05-29:/hasura/graphql-engine</id>
    <link href="https://github.com/hasura/graphql-engine" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Blazing fast, instant realtime GraphQL APIs on your DB with fine grained access control, also trigger webhooks on database events.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Hasura GraphQL Engine&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/hasura/graphql-engine/releases/latest&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/hasura/graphql-engine&#34; alt=&#34;Latest release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hasura.io/docs&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/docs-v2.x-brightgreen.svg?style=flat&#34; alt=&#34;Docs&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://discord.gg/vBPpJkS&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/chat-discord-brightgreen.svg?logo=discord&amp;amp;style=flat&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/intent/follow?screen_name=HasuraHQ&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Follow-HasuraHQ-blue.svg?style=flat&amp;amp;logo=twitter&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hasura.io/newsletter/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/newsletter-subscribe-yellow.svg?style=flat&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Hasura is an open source product that accelerates API development by 10x by giving you &lt;a href=&#34;https://hasura.io/graphql/&#34;&gt;GraphQL&lt;/a&gt; or REST APIs with built in authorization on your data, instantly.&lt;/p&gt; &#xA;&lt;p&gt;Read more at &lt;a href=&#34;https://hasura.io&#34;&gt;hasura.io&lt;/a&gt; and the &lt;a href=&#34;https://hasura.io/docs/&#34;&gt;docs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/assets/demo.gif&#34; alt=&#34;Hasura GraphQL Engine Demo&#34;&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/assets/realtime.gif&#34; alt=&#34;Hasura GraphQL Engine Realtime Demo&#34;&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Make powerful queries&lt;/strong&gt;: Built-in filtering, pagination, pattern search, bulk insert, update, delete mutations&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Works with existing, live databases&lt;/strong&gt;: Point it to an existing database to instantly get a ready-to-use GraphQL API&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Realtime&lt;/strong&gt;: Convert any GraphQL query to a live query by using subscriptions&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Merge remote schemas&lt;/strong&gt;: Access custom GraphQL schemas for business logic via a single GraphQL Engine endpoint. &lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/remote-schemas.md&#34;&gt;&lt;strong&gt;Read more&lt;/strong&gt;&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Extend with Actions&lt;/strong&gt;: Write REST APIs to extend Hasura’s schema with custom business logic.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Trigger webhooks or serverless functions&lt;/strong&gt;: On Postgres insert/update/delete events (&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/event-triggers.md&#34;&gt;read more&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Scheduled Triggers&lt;/strong&gt;: Execute custom business logic at specific points in time using a cron config or a one-off event.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Fine-grained access control&lt;/strong&gt;: Dynamic access control that integrates with your auth system (eg: auth0, firebase-auth)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Admin UI &amp;amp; Migrations&lt;/strong&gt;: Admin UI &amp;amp; Rails-inspired schema migrations&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Supported Databases&lt;/strong&gt;: Supports PostgreSQL (and its flavours), MS SQL Server and Big Query. Support for more &lt;a href=&#34;https://hasura.io/graphql/database/&#34;&gt;databases&lt;/a&gt; coming soon.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Read more at &lt;a href=&#34;https://hasura.io&#34;&gt;hasura.io&lt;/a&gt; and the &lt;a href=&#34;https://hasura.io/docs/&#34;&gt;docs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Table of contents&lt;/h2&gt; &#xA;&lt;!-- markdown-toc start - Don&#39;t edit this section. Run M-x markdown-toc-refresh-toc --&gt; &#xA;&lt;p&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/#quickstart&#34;&gt;Quickstart:&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/#one-click-deployment-on-hasura-cloud&#34;&gt;One-click deployment on Hasura Cloud&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/#other-one-click-deployment-options&#34;&gt;Other one-click deployment options&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/#other-deployment-methods&#34;&gt;Other deployment methods&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/#architecture&#34;&gt;Architecture&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/#client-side-tooling&#34;&gt;Client-side tooling&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/#add-business-logic&#34;&gt;Add business logic&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/#remote-schemas&#34;&gt;Remote schemas&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/#trigger-webhooks-on-database-events&#34;&gt;Trigger webhooks on database events&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/#demos&#34;&gt;Demos&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/#realtime-applications&#34;&gt;Realtime applications&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/#videos&#34;&gt;Videos&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/#support--troubleshooting&#34;&gt;Support &amp;amp; Troubleshooting&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/#stay-up-to-date&#34;&gt;Stay up to date&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/#brand-assets&#34;&gt;Brand assets&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/#translations&#34;&gt;Translations&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- markdown-toc end --&gt; &#xA;&lt;h2&gt;Quickstart:&lt;/h2&gt; &#xA;&lt;h3&gt;One-click deployment on Hasura Cloud&lt;/h3&gt; &#xA;&lt;p&gt;The fastest and easiest way to try Hasura out is via &lt;a href=&#34;https://hasura.io/docs/latest/graphql/cloud/getting-started/index.html&#34;&gt;Hasura Cloud&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Click on the following button to deploy GraphQL engine on Hasura Cloud including Postgres add-on or using an existing Postgres database:&lt;/p&gt; &lt;p&gt;&lt;a href=&#34;https://cloud.hasura.io/signup&#34;&gt;&lt;img src=&#34;https://graphql-engine-cdn.hasura.io/img/deploy_to_hasura.png&#34; alt=&#34;Deploy to Hasura Cloud&#34;&gt;&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Open the Hasura console&lt;/p&gt; &lt;p&gt;Click on the button &#34;Launch console&#34; to open the Hasura console.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Make your first GraphQL query&lt;/p&gt; &lt;p&gt;Create a table and instantly run your first query. Follow this &lt;a href=&#34;https://hasura.io/docs/latest/graphql/core/getting-started/first-graphql-query.html&#34;&gt;simple guide&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Other one-click deployment options&lt;/h3&gt; &#xA;&lt;p&gt;Check out the instructions for the following one-click deployment options:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;strong&gt;Infra provider&lt;/strong&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;strong&gt;One-click link&lt;/strong&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;strong&gt;Additional information&lt;/strong&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Heroku&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://heroku.com/deploy?template=https://github.com/hasura/graphql-engine-heroku&#34;&gt;&lt;img src=&#34;https://www.herokucdn.com/deploy/button.svg?sanitize=true&#34; alt=&#34;Deploy to Heroku&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://hasura.io/docs/latest/graphql/core/guides/deployment/heroku-one-click.html&#34;&gt;docs&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;DigitalOcean&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://marketplace.digitalocean.com/apps/hasura?action=deploy&amp;amp;refcode=c4d9092d2c48&amp;amp;utm_source=hasura&amp;amp;utm_campaign=readme&#34;&gt;&lt;img src=&#34;https://graphql-engine-cdn.hasura.io/img/create_hasura_droplet_200px.png&#34; alt=&#34;Deploy to DigitalOcean&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://hasura.io/docs/latest/graphql/core/guides/deployment/digital-ocean-one-click.html#hasura-graphql-engine-digitalocean-one-click-app&#34;&gt;docs&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Azure&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://portal.azure.com/#create/Microsoft.Template/uri/https%3a%2f%2fraw.githubusercontent.com%2fhasura%2fgraphql-engine%2fmaster%2finstall-manifests%2fazure-container-with-pg%2fazuredeploy.json&#34;&gt;&lt;img src=&#34;http://azuredeploy.net/deploybutton.png&#34; alt=&#34;Deploy to Azure&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://hasura.io/docs/latest/graphql/core/guides/deployment/azure-container-instances-postgres.html&#34;&gt;docs&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Render&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://render.com/deploy?repo=https://github.com/render-examples/hasura-graphql&#34;&gt;&lt;img src=&#34;https://render.com/images/deploy-to-render-button.svg?sanitize=true&#34; alt=&#34;Deploy to Render&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://hasura.io/docs/latest/graphql/core/guides/deployment/render-one-click.html&#34;&gt;docs&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Other deployment methods&lt;/h3&gt; &#xA;&lt;p&gt;For Docker-based deployment and advanced configuration options, see &lt;a href=&#34;https://hasura.io/docs/latest/graphql/core/getting-started/index.html&#34;&gt;deployment guides&lt;/a&gt; or &lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/install-manifests&#34;&gt;install manifests&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Architecture&lt;/h2&gt; &#xA;&lt;p&gt;The Hasura GraphQL Engine fronts a Postgres database instance and can accept GraphQL requests from your client apps. It can be configured to work with your existing auth system and can handle access control using field-level rules with dynamic variables from your auth system.&lt;/p&gt; &#xA;&lt;p&gt;You can also merge remote GraphQL schemas and provide a unified GraphQL API.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/assets/hasura-arch.svg?sanitize=true&#34; alt=&#34;Hasura GraphQL Engine architecture&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Client-side tooling&lt;/h2&gt; &#xA;&lt;p&gt;Hasura works with any GraphQL client. See &lt;a href=&#34;https://github.com/chentsulin/awesome-graphql&#34;&gt;awesome-graphql&lt;/a&gt; for a list of clients. Our &lt;a href=&#34;https://hasura.io/learn/#frontend-tutorial&#34;&gt;frontend tutorial series&lt;/a&gt; also have integrations with GraphQL clients for different frameworks.&lt;/p&gt; &#xA;&lt;h2&gt;Add business logic&lt;/h2&gt; &#xA;&lt;p&gt;GraphQL Engine provides easy-to-reason, scalable and performant methods for adding custom business logic to your backend:&lt;/p&gt; &#xA;&lt;h3&gt;Remote schemas&lt;/h3&gt; &#xA;&lt;p&gt;Add custom resolvers in a remote schema in addition to Hasura&#39;s database-based GraphQL schema. Ideal for use-cases like implementing a payment API, or querying data that is not in your database - &lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/remote-schemas.md&#34;&gt;read more&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Actions&lt;/h3&gt; &#xA;&lt;p&gt;Actions are a way to extend Hasura’s schema with custom business logic using custom queries and mutations. Actions can be added to Hasura to handle various use cases such as data validation, data enrichment from external sources and any other complex business logic - &lt;a href=&#34;https://hasura.io/docs/latest/graphql/core/actions/index.html&#34;&gt;read more&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Trigger webhooks on database events&lt;/h3&gt; &#xA;&lt;p&gt;Add asynchronous business logic that is triggered based on database events. Ideal for notifications, data-pipelines from Postgres or asynchronous processing - &lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/event-triggers.md&#34;&gt;read more&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Derived data or data transformations&lt;/h3&gt; &#xA;&lt;p&gt;Transform data in Postgres or run business logic on it to derive another dataset that can be queried using GraphQL Engine - &lt;a href=&#34;https://hasura.io/docs/latest/graphql/core/queries/derived-data.html&#34;&gt;read more&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Demos&lt;/h2&gt; &#xA;&lt;p&gt;Check out all the example applications in the &lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/community/sample-apps&#34;&gt;community/sample-apps&lt;/a&gt; directory.&lt;/p&gt; &#xA;&lt;h3&gt;Realtime applications&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Group Chat application built with React, includes a typing indicator, online users &amp;amp; new message notifications.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://realtime-chat.demo.hasura.io/&#34;&gt;Try it out&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/community/sample-apps/realtime-chat&#34;&gt;Tutorial&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Live location tracking app that shows a running vehicle changing current GPS coordinates moving on a map.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://realtime-location-tracking.demo.hasura.io/&#34;&gt;Try it out&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/community/sample-apps/realtime-location-tracking&#34;&gt;Tutorial&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;A realtime dashboard for data aggregations on continuously changing data.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://realtime-poll.demo.hasura.io/&#34;&gt;Try it out&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/community/sample-apps/realtime-poll&#34;&gt;Tutorial&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Videos&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=a2AhxKqd82Q&#34;&gt;Add GraphQL to a self-hosted GitLab instance&lt;/a&gt; (&lt;em&gt;3:44 mins&lt;/em&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=15ITBYnccgc&#34;&gt;Todo app with Auth0 and GraphQL backend&lt;/a&gt; (&lt;em&gt;4:00 mins&lt;/em&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=m1ChRhRLq7o&#34;&gt;GraphQL on GitLab integrated with GitLab auth&lt;/a&gt; (&lt;em&gt;4:05 mins&lt;/em&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=tsY573yyGWA&#34;&gt;Dashboard for 10million rides with geo-location (PostGIS, Timescale)&lt;/a&gt; (&lt;em&gt;3:06 mins&lt;/em&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Support &amp;amp; Troubleshooting&lt;/h2&gt; &#xA;&lt;p&gt;The documentation and community will help you troubleshoot most issues. If you have encountered a bug or need to get in touch with us, you can contact us using one of the following channels:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Support &amp;amp; feedback: &lt;a href=&#34;https://discord.gg/hasura&#34;&gt;Discord&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Issue &amp;amp; bug tracking: &lt;a href=&#34;https://github.com/hasura/graphql-engine/issues&#34;&gt;GitHub issues&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Follow product updates: &lt;a href=&#34;https://twitter.com/hasurahq&#34;&gt;@HasuraHQ&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Talk to us on our &lt;a href=&#34;https://hasura.io&#34;&gt;website chat&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;We are committed to fostering an open and welcoming environment in the community. Please see the &lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/code-of-conduct.md&#34;&gt;Code of Conduct&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you want to report a security issue, please &lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/SECURITY.md&#34;&gt;read this&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Stay up to date&lt;/h2&gt; &#xA;&lt;p&gt;We release new features every month. Sign up for our newsletter by using the link below. We send newsletters only once a month. &lt;a href=&#34;https://hasura.io/newsletter/&#34;&gt;https://hasura.io/newsletter/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Check out our &lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/CONTRIBUTING.md&#34;&gt;contributing guide&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;h2&gt;Brand assets&lt;/h2&gt; &#xA;&lt;p&gt;Hasura brand assets (logos, the Hasura mascot, powered by badges etc.) can be found in the &lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/assets/brand&#34;&gt;assets/brand&lt;/a&gt; folder. Feel free to use them in your application/website etc. We&#39;d be thrilled if you add the &#34;Powered by Hasura&#34; badge to your applications built using Hasura. ❤️&lt;/p&gt; &#xA;&lt;div style=&#34;display: flex;&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/assets/brand/powered_by_hasura_primary_darkbg.svg?sanitize=true&#34; width=&#34;150px&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/assets/brand/powered_by_hasura_primary_lightbg.svg?sanitize=true&#34; width=&#34;150px&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!-- For light backgrounds --&amp;gt;&#xA;&amp;lt;a href=&#34;https://hasura.io&#34;&amp;gt;&#xA;  &amp;lt;img width=&#34;150px&#34; src=&#34;https://graphql-engine-cdn.hasura.io/img/powered_by_hasura_primary_darkbg.svg&#34; /&amp;gt;&#xA;&amp;lt;/a&amp;gt;&#xA;&#xA;&amp;lt;!-- For dark backgrounds --&amp;gt;&#xA;&amp;lt;a href=&#34;https://hasura.io&#34;&amp;gt;&#xA;  &amp;lt;img width=&#34;150px&#34; src=&#34;https://graphql-engine-cdn.hasura.io/img/powered_by_hasura_primary_lightbg.svg&#34; /&amp;gt;&#xA;&amp;lt;/a&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The core GraphQL Engine is available under the &lt;a href=&#34;https://www.apache.org/licenses/LICENSE-2.0&#34;&gt;Apache License 2.0&lt;/a&gt; (Apache-2.0).&lt;/p&gt; &#xA;&lt;p&gt;All &lt;strong&gt;other contents&lt;/strong&gt; (except those in &lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/server&#34;&gt;&lt;code&gt;server&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/cli&#34;&gt;&lt;code&gt;cli&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/console&#34;&gt;&lt;code&gt;console&lt;/code&gt;&lt;/a&gt; directories) are available under the &lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/LICENSE-community&#34;&gt;MIT License&lt;/a&gt;. This includes everything in the &lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/docs&#34;&gt;&lt;code&gt;docs&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/community&#34;&gt;&lt;code&gt;community&lt;/code&gt;&lt;/a&gt; directories.&lt;/p&gt; &#xA;&lt;h2&gt;Translations&lt;/h2&gt; &#xA;&lt;p&gt;This readme is available in the following translations:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/translations/README.japanese.md&#34;&gt;Japanese &lt;span&gt;🇯🇵&lt;/span&gt;&lt;/a&gt; (&lt;span&gt;🙏&lt;/span&gt; &lt;a href=&#34;https://github.com/moksahero&#34;&gt;@moksahero&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/translations/README.french.md&#34;&gt;French &lt;span&gt;🇫🇷&lt;/span&gt;&lt;/a&gt; (&lt;span&gt;🙏&lt;/span&gt; &lt;a href=&#34;https://github.com/l0ck3&#34;&gt;@l0ck3&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/translations/README.bosnian.md&#34;&gt;Bosnian &lt;span&gt;🇧🇦&lt;/span&gt;&lt;/a&gt; (&lt;span&gt;🙏&lt;/span&gt; &lt;a href=&#34;https://github.com/hajro92&#34;&gt;@hajro92&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/translations/README.russian.md&#34;&gt;Russian &lt;span&gt;🇷🇺&lt;/span&gt;&lt;/a&gt; (&lt;span&gt;🙏&lt;/span&gt; &lt;a href=&#34;https://github.com/highflyer910&#34;&gt;@highflyer910&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/translations/README.greek.md&#34;&gt;Greek 🇬🇷&lt;/a&gt; (&lt;span&gt;🙏&lt;/span&gt; &lt;a href=&#34;https://github.com/MIP2000&#34;&gt;@MIP2000&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/translations/README.mx_spanish.md&#34;&gt;Spanish 🇲🇽&lt;/a&gt;(&lt;span&gt;🙏&lt;/span&gt; &lt;a href=&#34;https://github.com/ferdox2&#34;&gt;@ferdox2&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/translations/README.indonesian.md&#34;&gt;Indonesian &lt;span&gt;🇮🇩&lt;/span&gt;&lt;/a&gt; (&lt;span&gt;🙏&lt;/span&gt; &lt;a href=&#34;https://github.com/anwari666&#34;&gt;@anwari666&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/translations/README.portuguese_br.md&#34;&gt;Brazilian Portuguese &lt;span&gt;🇧🇷&lt;/span&gt;&lt;/a&gt; (&lt;span&gt;🙏&lt;/span&gt; &lt;a href=&#34;https://github.com/rubensmp&#34;&gt;@rubensmp&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/translations/README.german.md&#34;&gt;German 🇩🇪&lt;/a&gt; (&lt;span&gt;🙏&lt;/span&gt; &lt;a href=&#34;https://github.com/FynnGrandke&#34;&gt;@FynnGrandke&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/translations/README.chinese.md&#34;&gt;Chinese &lt;span&gt;🇨🇳&lt;/span&gt;&lt;/a&gt; (&lt;span&gt;🙏&lt;/span&gt; &lt;a href=&#34;https://github.com/jagreetdg&#34;&gt;@jagreetdg&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://github.com/johnbanq&#34;&gt;@johnbanq&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/translations/README.turkish.md&#34;&gt;Turkish &lt;span&gt;🇹🇷&lt;/span&gt;&lt;/a&gt; (&lt;span&gt;🙏&lt;/span&gt; &lt;a href=&#34;https://github.com/berat&#34;&gt;@berat&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/translations/README.korean.md&#34;&gt;Korean &lt;span&gt;🇰🇷&lt;/span&gt;&lt;/a&gt; (&lt;span&gt;🙏&lt;/span&gt; &lt;a href=&#34;https://github.com/laskdjlaskdj12&#34;&gt;@라스크&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Translations for other files can be found &lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/translations&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>lucasvreis/org-parser</title>
    <updated>2022-05-29T01:43:13Z</updated>
    <id>tag:github.com,2022-05-29:/lucasvreis/org-parser</id>
    <link href="https://github.com/lucasvreis/org-parser" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An Org Mode parser written in Haskell with customizable HTML exporter.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#+title: org-parser&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Table of contents :TOC:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[[#demo][Demo]]&lt;/li&gt; &#xA; &lt;li&gt;[[#how-to-test-and-play-with-it][How to test and play with it]] &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;[[#testing-the-parser-in-ghci][Testing the parser in =ghci=]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#unit-tests][Unit tests]]&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;[[#progress][Progress]] &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;[[#going-beyond-what-is-listed-in-the-spec][Going beyond what is listed in the spec]]&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;[[#exporters][Exporters]] &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;[[#heist-html-exporter][Heist HTML exporter]]&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;[[#comparasion-to-pandoc][Comparasion to Pandoc]]&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Demo [[demo/demo.png]]&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The page on the right was rendered using this parser and its HTML exporter (plus CSS styling). You can see the org document source in [[demo/content.org][demo/content.org]] and the resulting AST in [[demo/AST output.txt][demo/AST output.txt]].&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;How to test and play with it Unfortunately there is no CLI yet, and &lt;del&gt;org-parser&lt;/del&gt; will remain unpublished as an library for now. I am in the middle of a semester and I don&#39;t have time to write the CLI or figure out how to push this to Hackage (two things I have never done before). But still, you can use the parser either as a library in Haskell (like I&#39;ve been doing in [[https://github.com/lucasvreis/abacateiro][abacateiro]]) or test it from =ghci=.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Testing the parser in =ghci=&lt;/p&gt; &#xA;&lt;p&gt;This assumes you have =cabal= installed.&lt;/p&gt; &#xA;&lt;p&gt;Clone the parser repository and run =cabal repl test= inside it. Cabal will be busy downloading dependencies and building for a while. You can then call the convenience function &lt;del&gt;prettyParse&lt;/del&gt; like so:&lt;/p&gt; &#xA;&lt;p&gt;: prettyParse orgDocument [text| : This is a test. : |]&lt;/p&gt; &#xA;&lt;p&gt;You can write the contents to be parsed between =[text|= and =|]=. More generally, you can call&lt;/p&gt; &#xA;&lt;p&gt;: prettyParse [parser to parse] [string to parse]&lt;/p&gt; &#xA;&lt;p&gt;Where =[parser to parse]= can be basically any of the functions from =Org.Parse.Document=, =Org.Parser.Elements= or =Org.Parser.Objects= whose types are wrapped by the =OrgParser= monad. You don&#39;t need to import those modules yourself as they are already imported in the &lt;del&gt;test&lt;/del&gt; namespace.&lt;/p&gt; &#xA;&lt;p&gt;** Unit tests I plan to cover a broad range of the spec in the unit tests under [[test][test]]. Those should follow the same energy as [[https://mirror.las.iastate.edu/tex-archive/info/knuth-pdf/tex/tripman.pdf][A torture test for TeX]], and should touch as much corner cases as possible against org-element. Take for example the parsing of : [c​ite:/foo/;/bar/@bef=bof=;/baz/] under [[test/Tests/Objects.hs][tests/Tests/Objects.hs]]. This alone tests many things about allowed pre/post chars in markup and the inner parsing of citations (in fact, =foo=, =bar=, =bof= and =baz= are all parsed with markup in this example!).&lt;/p&gt; &#xA;&lt;p&gt;For now, I have mostly been testing as many corner cases as possible manually.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Progress In the spec terms (see below the table for other features), the following components are implemented: | Component | Type | Parse | HTML (using Heist) | |---------------------+------------------+-------+--------------------| | Heading | X | X | X | | Section | X | X | X | |---------------------+------------------+-------+--------------------| | Affiliated Keywords | X | X | X | |---------------------+------------------+-------+--------------------| | GreaterBlock | X | X | X | | Drawer | X | X | X | | DynamicBlock | X | | X | | FootnoteDefinition | X | | X | | InlineTask | X | | | | Item | X | X | X | | List | X | X | X | | PropertyDrawer | X | X | n.a. | | Table | | | | |---------------------+------------------+-------+--------------------| | BabelCall | X | | n.a. | | Comment Block | X | X | X | | Example Block | X | X | X | | Export Block | X | X | X | | Src Block | X | X | X | | Verse Block | X | | | | Clock | X | | | | DiarySexp | X | | n.a. | | Planning | X | X | | | Comment | X | X | n.a. | | FixedWidth | X (ExampleBlock) | | X | | HorizontalRule | X | X | X | | Keyword | X | X | X | | LaTeXEnvironment | X | X | X | | NodeProperty | X | X | n.a. | | Paragraph | X | X | X | | TableRow | | | | | TableHRule | | | | |---------------------+------------------+-------+--------------------| | OrgEntity | X | X | X | | LaTeXFragment | X | X | X | | ExportSnippet | X | X | X | | FootnoteReference | X | | X | | InlineBabelCall | X | | n.a. | | InlineSrcBlock | X | X | X | | RadioLink | X (Link) | | X | | PlainLink | X (Link) | | X | | AngleLink | X (Link) | X | X | | RegularLink | X (Link) | X | X | | Image | X | X | X | | LineBreak | X | X | X | | Macro | X | | n.a. | | Citation | X | X | (WIP via citeproc) | | RadioTarget | | | | | Target | X | X | X | | StatisticsCookie | | | | | Subscript | X | X | X | | Superscript | X | X | X | | TableCell | | | | | Timestamp | X | X | X | | Plain | X | X | X | | Markup | X | X | X | (Thanks @tecosaur for the table)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Going beyond what is listed in the spec&lt;/p&gt; &#xA;&lt;p&gt;&lt;del&gt;org-element-parse-buffer&lt;/del&gt; does not parse /everything/ that will eventually be parsed or processed when exporting a document written in Org-mode. Examples of Org features that are not handled by the parser alone (so aren&#39;t described in the spec) include content from keywords like =#+title:=, that are parsed &#34;later&#34; by the exporter itself, references in lines of =src= or =example= blocks and link resolving, that are done in a post-processing step, and the use of =#+include:= keywords, =TODO= keywords and radio links, that are done in a pre-processing step.&lt;/p&gt; &#xA;&lt;p&gt;But my motto for writing this parser is: information useful for all exporters should be trivial to get from the AST, and minimal text processing should be done an exporter. Since the aspects listed above are genuine /org-mode features/, and not optional extensions, they should be resolved in the AST outputted by this parser. Below is a table with more Org features that are not listed in the spec but are planned to be supported:&lt;/p&gt; &#xA;&lt;p&gt;| Feature | Implemented? | |--------------------------------------------+------------------------------------------------------| | ​=#+include:= keywords | no | | Src/example blocks switches and references | yes | | Resolving all inner links | some | | Parsing image links into =Image=​s | yes | | Pre-processing radio links | no; conformant implementation requires parsing twice | | Per-file TODO keywords | no |&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Exporters For now there is a highly customizable HTML exporter. I plan to add a Pandoc exporter in the future, so that it&#39;s possible to convert Org documents to other types of markup with this more specialized parser.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Heist HTML exporter Heist is a Haskell templating library that uses raw XML/HTML for templating. You can have a look at the templates used for HTML export in the [[templates][templates]] directory. Those can be customized by the user without having to write Haskell or recompile the library.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Comparasion to Pandoc The main difference between =org-parser= and the Pandoc Org Reader is that this one parses into an AST is more similar to the org-element&#39;s AST, while Pandoc&#39;s parses into the =Pandoc= AST, which cannot express all Org elements directly. This has the effect that some Org features are either unsupported by the reader or &#34;projected&#34; onto =Pandoc= in ways that bundle less information about the Org source. In contrast, this parser aims to represent Org documents more faithfully before &#34;projecting&#34; them into formats like HTML or the Pandoc AST itself. So you can expect more org-specific features to be parsed, and a hopefully more accurate parsing in general.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;My initial plan was to fork the Org Reader and make it a standalone package, but this quickly proved infeasible as the reader is very tangled with the rest of Pandoc. Also, some accuracy improvements to the reader were hard to make without deeper changes to the parser. For example, consider the following Org snippet: #+begin_src org This is a single paragraph. Because this single paragraph ,#+should not be ended by this funny line, because this funny line is not a keyword. Not even this incomplete \begin{LaTeX} environment should break this paragraph apart. #+end_src This single paragraph is broken into three by Pandoc, because it looks for a new &#34;block start&#34; (the start of a new org element) in each line. If there is a block start, then it aborts the current element (block) and starts the new one. Only later the parser decides if the started block actually parses correctly until its end, which is not the case for the =\begin{LaTeX}= in this example.&lt;/p&gt; &#xA;&lt;p&gt;Another noteworthy difference is that =haskell-org-parser= uses a different parsing library, &lt;del&gt;megaparsec&lt;/del&gt;. Pandoc uses the older &lt;del&gt;parsec&lt;/del&gt;, but also bundles many features on its own library.&lt;/p&gt; &#xA;&lt;p&gt;Concisely, while the parser is inspired by Pandoc, some important overall differences are present and most functions were written from scratch.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>input-output-hk/cardano-ledger</title>
    <updated>2022-05-29T01:43:13Z</updated>
    <id>tag:github.com,2022-05-29:/input-output-hk/cardano-ledger</id>
    <link href="https://github.com/input-output-hk/cardano-ledger" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The ledger implementation and specifications of the Cardano blockchain.&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt;Cardano Ledger&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/input-output-hk/cardano-ledger/actions/workflows/haskell.yml&#34;&gt; &lt;img alt=&#34;GitHub Workflow Status (master)&#34; src=&#34;https://img.shields.io/github/workflow/status/input-output-hk/cardano-ledger/Haskell%20CI/master.svg?style=for-the-badge&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;This repository contains the formal specifications, executable models, and implementations of the Cardano Ledger.&lt;/p&gt; &#xA;&lt;p&gt;The documents are built in our CI and can be readily accessed using the following links:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Era&lt;/th&gt; &#xA;   &lt;th&gt;Design Documents&lt;/th&gt; &#xA;   &lt;th&gt;Formal Specification&lt;/th&gt; &#xA;   &lt;th&gt;CDDL&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Byron&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://hydra.iohk.io/job/Cardano/cardano-ledger/byronChainSpec/latest/download-by-type/doc-pdf/blockchain-spec&#34; title=&#34;Specification of the Blockchain Layer&#34;&gt;Chain Spec&lt;/a&gt;, &lt;a href=&#34;https://hydra.iohk.io/job/Cardano/cardano-ledger/byronLedgerSpec/latest/download-by-type/doc-pdf/ledger-spec&#34; title=&#34;A Formal Specification of the Cardano Ledger&#34;&gt;Ledger Spec&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://hydra.iohk.io/job/Cardano/cardano-ledger/blocksCDDLSpec/latest/download-by-type/doc-pdf/binary&#34;&gt;CDDL&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Shelley&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://hydra.iohk.io/job/Cardano/cardano-ledger/delegationDesignSpec/latest/download-by-type/doc-pdf/delegation_design_spec&#34; title=&#34;Design Specification for Delegation and Incentives in Cardano&#34;&gt;Design&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://hydra.iohk.io/job/Cardano/cardano-ledger/shelleyLedgerSpec/latest/download-by-type/doc-pdf/ledger-spec&#34; title=&#34;A Formal Specification of the Cardano Ledger&#34;&gt;Spec&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/input-output-hk/cardano-ledger/tree/master/eras/shelley/test-suite/cddl-files&#34;&gt;CDDL&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Allegra &amp;amp; Mary&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://eprint.iacr.org/2020/895&#34; title=&#34;Multi-Currency Ledgers&#34;&gt;Multi-Currency&lt;/a&gt;, &lt;a href=&#34;https://iohk.io/en/research/library/papers/utxoma-utxo-with-multi-asset-support/&#34; title=&#34;UTXOma:UTXO with Multi-Asset Support&#34;&gt;UTXOma&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://hydra.iohk.io/job/Cardano/cardano-ledger/specs.shelley-ma/latest/download-by-type/doc-pdf/shelley-ma&#34; title=&#34;A Formal Specification of the Cardano Ledger with a Native Multi-Asset Implementation&#34;&gt;Spec&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/input-output-hk/cardano-ledger/tree/master/eras/shelley-ma/test-suite/cddl-files&#34;&gt;CDDL&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Alonzo&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://iohk.io/en/research/library/papers/the-extended-utxo-model/&#34; title=&#34;The Extended UTXO Model&#34;&gt;eUTXO&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://hydra.iohk.io/job/Cardano/cardano-ledger/specs.alonzo-ledger/latest/download-by-type/doc-pdf/alonzo-changes&#34; title=&#34;A Formal Specification of the Cardano Ledger integrating Plutus Core&#34;&gt;Spec&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/input-output-hk/cardano-ledger/tree/master/eras/alonzo/test-suite/cddl-files&#34;&gt;CDDL&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Babbage&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://iohk.io/en/research/library/papers/on-uc-secure-range-extension-and-batch-verification-for-ecvrf/&#34; title=&#34;On UC-Secure Range Extension and Batch Verification for ECVRF&#34;&gt;batch-verification&lt;/a&gt;, &lt;a href=&#34;https://github.com/cardano-foundation/CIPs/pull/159&#34; title=&#34;Reference inputs&#34;&gt;CIP-31&lt;/a&gt;, &lt;a href=&#34;https://github.com/cardano-foundation/CIPs/pull/160&#34; title=&#34;Inline datums&#34;&gt;CIP-32&lt;/a&gt;, &lt;a href=&#34;https://github.com/cardano-foundation/CIPs/pull/161&#34; title=&#34;Reference scripts&#34;&gt;CIP-33&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://hydra.iohk.io/job/Cardano/cardano-ledger/specs.babbage-ledger/latest/download-by-type/doc-pdf/babbage-changes&#34; title=&#34;Formal Specification of the Cardano Ledger for the Babbage era&#34;&gt;Spec&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/input-output-hk/cardano-ledger/tree/master/eras/babbage/test-suite/cddl-files&#34;&gt;CDDL&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Other Documents:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://hydra.iohk.io/job/Cardano/cardano-ledger/nonIntegerCalculations/latest/download-by-type/doc-pdf/non-integer-calculations&#34;&gt;Non-integer calculations specification&lt;/a&gt;: details on the parts of the Shelley specification that use real numbers.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://hydra.iohk.io/job/Cardano/cardano-ledger/specs.pool-ranking/latest/download-by-type/doc-pdf/pool-ranking&#34;&gt;Stake pool ranking specification&lt;/a&gt;: details for a robust stake pool ranking mechanism.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://hydra.iohk.io/job/Cardano/cardano-ledger/semanticsSpec/latest/download-by-type/doc-pdf/small-step-semantics&#34;&gt;Explanation of the small-step-semantics framework&lt;/a&gt;: a guide to the notation and style used by our ledger rules.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In addition, there is a formalization of the Ledger Specification in Isabelle/HOL which can be found &lt;a href=&#34;https://github.com/input-output-hk/fm-ledger-formalization&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Repository structure&lt;/h1&gt; &#xA;&lt;p&gt;The directory structure of this repository is as follows:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/cardano-ledger/master/eras/byron&#34;&gt;byron&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/cardano-ledger/master/eras/byron/ledger&#34;&gt;ledger&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/cardano-ledger/master/eras/byron/ledger/formal-spec&#34;&gt;formal-spec&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/cardano-ledger/master/eras/byron/ledger/executable-spec&#34;&gt;executable-spec&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/cardano-ledger/master/eras/byron/ledger/impl&#34;&gt;implementation&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/cardano-ledger/master/eras/byron/chain&#34;&gt;chain&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/cardano-ledger/master/eras/byron/chain/formal-spec&#34;&gt;formal-spec&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/cardano-ledger/master/eras/byron/chain/executable-spec&#34;&gt;executable-spec&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/cardano-ledger/master/eras/byron/cddl-spec&#34;&gt;cddl&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/cardano-ledger/master/eras/shelley&#34;&gt;shelley&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/cardano-ledger/master/eras/shelley/design-spec&#34;&gt;design-spec&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/cardano-ledger/master/eras/shelley/formal-spec&#34;&gt;formal-spec&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/cardano-ledger/master/eras/shelley/impl&#34;&gt;implementation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/cardano-ledger/master/eras/shelley/test-suite&#34;&gt;tests&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/cardano-ledger/master/eras/shelley/test-suite/cddl-files&#34;&gt;cddl&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/cardano-ledger/master/eras/shelley-ma&#34;&gt;Timelocks and Multi-Assets&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/cardano-ledger/master/eras/shelley-ma/formal-spec&#34;&gt;formal-spec&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/cardano-ledger/master/eras/shelley-ma/impl&#34;&gt;implementation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/cardano-ledger/master/eras/shelley-ma/test-suite&#34;&gt;tests&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/cardano-ledger/master/eras/alonzo&#34;&gt;Smart Contracts&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/cardano-ledger/master/eras/alonzo/formal-spec&#34;&gt;formal-spec&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/cardano-ledger/master/eras/alonzo/impl&#34;&gt;implementation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/cardano-ledger/master/eras/alonzo/test-suite&#34;&gt;tests&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/cardano-ledger/master/libs&#34;&gt;Libraries&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Building&lt;/h1&gt; &#xA;&lt;p&gt;It is recommended to use &lt;a href=&#34;https://nixos.org/nix/download.html&#34;&gt;&lt;code&gt;nix&lt;/code&gt;&lt;/a&gt; for building everything in this repository. Haskell files can be built with &lt;a href=&#34;https://www.haskell.org/cabal/&#34;&gt;&lt;code&gt;cabal&lt;/code&gt;&lt;/a&gt; inside of a nix shell.&lt;/p&gt; &#xA;&lt;h2&gt;Nix Cache&lt;/h2&gt; &#xA;&lt;p&gt;When using &lt;code&gt;nix&lt;/code&gt; it is recommended that you setup the cache, so that it can reuse built artifacts, reducing the compilation times dramatically:&lt;/p&gt; &#xA;&lt;p&gt;If you are using &lt;a href=&#34;https://nixos.org/&#34;&gt;NixOS&lt;/a&gt; add the snippet below to your &lt;code&gt;/etc/nixos/configuration.nix&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;nix.binaryCaches = [&#xA;  &#34;https://cache.nixos.org&#34;&#xA;  &#34;https://hydra.iohk.io&#34;&#xA;];&#xA;&#xA;nix.binaryCachePublicKeys = [&#xA;  &#34;hydra.iohk.io:f/Ea+s+dFdN+3Y/G+FDgSq+a5NEWhJGzdjvKNGv0/EQ=&#34;&#xA;];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you are using the &lt;code&gt;nix&lt;/code&gt; package manager next to another operating system put the following in &lt;code&gt;/etc/nix/nix.conf&lt;/code&gt; if you have a system-wide &lt;code&gt;nix&lt;/code&gt; installation , or in &lt;code&gt;~/.config/nix/nix.conf&lt;/code&gt; if you have a local installation:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;substituters        = https://hydra.iohk.io https://cache.nixos.org/&#xA;trusted-public-keys = hydra.iohk.io:f/Ea+s+dFdN+3Y/G+FDgSq+a5NEWhJGzdjvKNGv0/EQ= cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY=&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Building the LaTeX documents and executable specifications&lt;/h2&gt; &#xA;&lt;p&gt;When using &lt;code&gt;nix&lt;/code&gt; the documents and Haskell code can be readily built by running:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;nix build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The LaTeX documents will be places inside directories named &lt;code&gt;result*&lt;/code&gt;, e.g.:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;result-2/ledger-spec.pdf&#xA;result-3/delegation_design_spec.pdf&#xA;result-4/non-integer-calculations.pdf&#xA;result-5/small-step-semantics.pdf&#xA;result-6/ledger-spec.pdf&#xA;result/blockchain-spec.pdf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Building individual LaTeX documents&lt;/h2&gt; &#xA;&lt;p&gt;Change to the latex directory where the latex document is (e.g. &lt;code&gt;eras/shelley/formal-spec&lt;/code&gt; for the ledger specification corresponding to the Shelley release, or &lt;code&gt;eras/byron/ledger/formal-spec&lt;/code&gt; for the ledger specification corresponding to the Byron release). Then, build the latex document by running:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;nix-shell --pure --run make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For a continuous compilation of the &lt;code&gt;LaTeX&lt;/code&gt; file run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;nix-shell --pure --run &#34;make watch&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Submitting an issue&lt;/h1&gt; &#xA;&lt;p&gt;Issues can be filed in the &lt;a href=&#34;https://github.com/input-output-hk/cardano-ledger/issues&#34;&gt;GitHub Issue tracker&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;However, note that this is pre-release software, so we will not usually be providing support.&lt;/p&gt; &#xA;&lt;h1&gt;Contributing&lt;/h1&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/input-output-hk/cardano-ledger/raw/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>purescript/purescript</title>
    <updated>2022-05-29T01:43:13Z</updated>
    <id>tag:github.com,2022-05-29:/purescript/purescript</id>
    <link href="https://github.com/purescript/purescript" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A strongly-typed language that compiles to JavaScript&lt;/p&gt;&lt;hr&gt;&lt;img src=&#34;https://raw.githubusercontent.com/purescript/purescript/master/logo.png&#34; alt=&#34;PureScript&#34; width=&#34;392&#34;&gt; &#xA;&lt;p&gt;A small strongly typed programming language with expressive types that compiles to JavaScript, written in and inspired by Haskell.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://hackage.haskell.org/package/purescript&#34;&gt;&lt;img src=&#34;https://img.shields.io/hackage/v/purescript.svg?sanitize=true&#34; alt=&#34;Hackage&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/purescript/purescript/actions/workflows/ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/purescript/purescript/actions/workflows/ci.yml/badge.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Language info&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://purescript.org&#34;&gt;PureScript home&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/purescript/purescript/releases&#34;&gt;Releases &amp;amp; changelog&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/purescript/purescript/raw/master/CONTRIBUTING.md&#34;&gt;Contributing to PureScript&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Resources&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://book.purescript.org/&#34;&gt;PureScript book&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/purescript/documentation&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://try.purescript.org&#34;&gt;Try PureScript&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://pursuit.purescript.org/&#34;&gt;Pursuit Package Index&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Help!&lt;/h2&gt; &#xA;&lt;h3&gt;Community Spaces&lt;/h3&gt; &#xA;&lt;p&gt;The following spaces are governed by the &lt;a href=&#34;https://github.com/purescript/governance/raw/master/CODE_OF_CONDUCT.md&#34;&gt;PureScript Community Code of Conduct&lt;/a&gt;. The majority of PureScript users use these spaces to discuss and collaborate on PureScript-related topics:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://purescript.org/chat&#34;&gt;PureScript Discord&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://discourse.purescript.org/&#34;&gt;PureScript Discourse&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Unaffiliated Spaces&lt;/h3&gt; &#xA;&lt;p&gt;Some PureScript users also collaborate in the below spaces. These do not fall under the code of conduct linked above. They may have no code of conduct or one very different than the one linked above.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://matrix.to/#/#purescript:matrix.org&#34;&gt;PureScript Matrix&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://stackoverflow.com/questions/tagged/purescript&#34;&gt;PureScript on StackOverflow&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://libera.chat/&#34;&gt;The &lt;code&gt;#purescript&lt;/code&gt; channel on Libera.Chat&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>PostgREST/postgrest</title>
    <updated>2022-05-29T01:43:13Z</updated>
    <id>tag:github.com,2022-05-29:/PostgREST/postgrest</id>
    <link href="https://github.com/PostgREST/postgrest" rel="alternate"></link>
    <summary type="html">&lt;p&gt;REST API for any Postgres database&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/PostgREST/postgrest/main/static/bigger-logo.png&#34; alt=&#34;Logo&#34; title=&#34;Logo&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.patreon.com/postgrest&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Donate-Patreon-orange.svg?colorB=F96854&#34; alt=&#34;Donate&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.paypal.me/postgrest&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Donate-PayPal-green.svg?sanitize=true&#34; alt=&#34;Donate&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitter.im/begriffs/postgrest&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/gitter-join%20chat%20%E2%86%92-brightgreen.svg?sanitize=true&#34; alt=&#34;Join the chat at https://gitter.im/begriffs/postgrest&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://postgrest.org&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/docs-latest-brightgreen.svg?style=flat&#34; alt=&#34;Docs&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/postgrest/postgrest/&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/pulls/postgrest/postgrest.svg?sanitize=true&#34; alt=&#34;Docker Stars&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/PostgREST/postgrest/actions?query=branch%3Amain&#34;&gt;&lt;img src=&#34;https://github.com/postgrest/postgrest/actions/workflows/ci.yaml/badge.svg?branch=main&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://app.codecov.io/gh/PostgREST/postgrest&#34;&gt;&lt;img src=&#34;https://img.shields.io/codecov/c/github/postgrest/postgrest/main&#34; alt=&#34;Coverage Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://hackage.haskell.org/package/postgrest&#34;&gt;&lt;img src=&#34;https://img.shields.io/hackage/v/postgrest.svg?label=hackage&#34; alt=&#34;Hackage docs&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;PostgREST serves a fully RESTful API from any existing PostgreSQL database. It provides a cleaner, more standards-compliant, faster API than you are likely to write from scratch.&lt;/p&gt; &#xA;&lt;h2&gt;Sponsors&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34; valign=&#34;middle&#34;&gt; &lt;a href=&#34;https://www.cybertec-postgresql.com/en/?utm_source=postgrest.org&amp;amp;utm_medium=referral&amp;amp;utm_campaign=postgrest&#34; target=&#34;_blank&#34;&gt; &lt;img width=&#34;222px&#34; src=&#34;https://raw.githubusercontent.com/PostgREST/postgrest/main/static/cybertec-new.png&#34;&gt; &lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34; valign=&#34;middle&#34;&gt; &lt;a href=&#34;https://www.2ndquadrant.com/en/?utm_campaign=External%20Websites&amp;amp;utm_source=PostgREST&amp;amp;utm_medium=Logo&#34; target=&#34;_blank&#34;&gt; &lt;img width=&#34;296px&#34; src=&#34;https://raw.githubusercontent.com/PostgREST/postgrest/main/static/2ndquadrant.png&#34;&gt; &lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34; valign=&#34;middle&#34;&gt; &lt;a href=&#34;https://tryretool.com/?utm_source=sponsor&amp;amp;utm_campaign=postgrest&#34; target=&#34;_blank&#34;&gt; &lt;img width=&#34;296px&#34; src=&#34;https://raw.githubusercontent.com/PostgREST/postgrest/main/static/retool.png&#34;&gt; &lt;/a&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt;&lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34; valign=&#34;middle&#34;&gt; &lt;a href=&#34;https://gnuhost.eu/?utm_source=sponsor&amp;amp;utm_campaign=postgrest&#34; target=&#34;_blank&#34;&gt; &lt;img width=&#34;296px&#34; src=&#34;https://raw.githubusercontent.com/PostgREST/postgrest/main/static/gnuhost.png&#34;&gt; &lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34; valign=&#34;middle&#34;&gt; &lt;a href=&#34;https://supabase.io?utm_source=postgrest%20backers&amp;amp;utm_medium=open%20source%20partner&amp;amp;utm_campaign=postgrest%20backers%20github&amp;amp;utm_term=homepage&#34; target=&#34;_blank&#34;&gt; &lt;img width=&#34;296px&#34; src=&#34;https://raw.githubusercontent.com/PostgREST/postgrest/main/static/supabase.png&#34;&gt; &lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34; valign=&#34;middle&#34;&gt; &lt;a href=&#34;https://oblivious.ai/?utm_source=sponsor&amp;amp;utm_campaign=postgrest&#34; target=&#34;_blank&#34;&gt; &lt;img width=&#34;296px&#34; src=&#34;https://raw.githubusercontent.com/PostgREST/postgrest/main/static/oblivious.jpg&#34;&gt; &lt;/a&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Big thanks to our sponsors! You can join them by supporting PostgREST on &lt;a href=&#34;https://www.patreon.com/postgrest&#34;&gt;Patreon&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Download the binary (&lt;a href=&#34;https://github.com/PostgREST/postgrest/releases/latest&#34;&gt;latest release&lt;/a&gt;) for your platform.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Invoke for help:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;postgrest --help&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;http://postgrest.org&#34;&gt;Documentation&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Latest documentation is at &lt;a href=&#34;http://postgrest.org&#34;&gt;postgrest.org&lt;/a&gt;. You can contribute to the docs in &lt;a href=&#34;https://github.com/PostgREST/postgrest-docs&#34;&gt;PostgREST/postgrest-docs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Performance&lt;/h2&gt; &#xA;&lt;p&gt;TLDR; subsecond response times for up to 2000 requests/sec on Heroku free tier. If you&#39;re used to servers written in interpreted languages, prepare to be pleasantly surprised by PostgREST performance.&lt;/p&gt; &#xA;&lt;p&gt;Three factors contribute to the speed. First the server is written in &lt;a href=&#34;https://www.haskell.org/&#34;&gt;Haskell&lt;/a&gt; using the &lt;a href=&#34;http://www.yesodweb.com/blog/2011/03/preliminary-warp-cross-language-benchmarks&#34;&gt;Warp&lt;/a&gt; HTTP server (aka a compiled language with lightweight threads). Next it delegates as much calculation as possible to the database including&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Serializing JSON responses directly in SQL&lt;/li&gt; &#xA; &lt;li&gt;Data validation&lt;/li&gt; &#xA; &lt;li&gt;Authorization&lt;/li&gt; &#xA; &lt;li&gt;Combined row counting and retrieval&lt;/li&gt; &#xA; &lt;li&gt;Data post in single command (&lt;code&gt;returning *&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Finally it uses the database efficiently with the &lt;a href=&#34;https://nikita-volkov.github.io/hasql-benchmarks/&#34;&gt;Hasql&lt;/a&gt; library by&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Keeping a pool of db connections&lt;/li&gt; &#xA; &lt;li&gt;Using the PostgreSQL binary protocol&lt;/li&gt; &#xA; &lt;li&gt;Being stateless to allow horizontal scaling&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Security&lt;/h2&gt; &#xA;&lt;p&gt;PostgREST &lt;a href=&#34;http://postgrest.org/en/stable/auth.html&#34;&gt;handles authentication&lt;/a&gt; (via JSON Web Tokens) and delegates authorization to the role information defined in the database. This ensures there is a single declarative source of truth for security. When dealing with the database the server assumes the identity of the currently authenticated user, and for the duration of the connection cannot do anything the user themselves couldn&#39;t. Other forms of authentication can be built on top of the JWT primitive. See the docs for more information.&lt;/p&gt; &#xA;&lt;h2&gt;Versioning&lt;/h2&gt; &#xA;&lt;p&gt;A robust long-lived API needs the freedom to exist in multiple versions. PostgREST does versioning through database schemas. This allows you to expose tables and views without making the app brittle. Underlying tables can be superseded and hidden behind public facing views.&lt;/p&gt; &#xA;&lt;h2&gt;Self-documentation&lt;/h2&gt; &#xA;&lt;p&gt;PostgREST uses the &lt;a href=&#34;https://openapis.org/&#34;&gt;OpenAPI&lt;/a&gt; standard to generate up-to-date documentation for APIs. You can use a tool like &lt;a href=&#34;https://github.com/swagger-api/swagger-ui&#34;&gt;Swagger-UI&lt;/a&gt; to render interactive documentation for demo requests against the live API server.&lt;/p&gt; &#xA;&lt;p&gt;This project uses HTTP to communicate other metadata as well. For instance the number of rows returned by an endpoint is reported by - and limited with - range headers. More about &lt;a href=&#34;http://begriffs.com/posts/2014-03-06-beyond-http-header-links.html&#34;&gt;that&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Data Integrity&lt;/h2&gt; &#xA;&lt;p&gt;Rather than relying on an Object Relational Mapper and custom imperative coding, this system requires you put declarative constraints directly into your database. Hence no application can corrupt your data (including your API server).&lt;/p&gt; &#xA;&lt;p&gt;The PostgREST exposes HTTP interface with safeguards to prevent surprises, such as enforcing idempotent PUT requests.&lt;/p&gt; &#xA;&lt;p&gt;See examples of &lt;a href=&#34;http://www.tutorialspoint.com/postgresql/postgresql_constraints.htm&#34;&gt;PostgreSQL constraints&lt;/a&gt; and the &lt;a href=&#34;http://postgrest.org/en/stable/api.html&#34;&gt;API guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Supporting development&lt;/h2&gt; &#xA;&lt;p&gt;You can help PostgREST ongoing maintenance and development by:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Making a regular donation through Patreon &lt;a href=&#34;https://www.patreon.com/postgrest&#34;&gt;https://www.patreon.com/postgrest&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Alternatively, you can make a one-time donation via Paypal &lt;a href=&#34;https://www.paypal.me/postgrest&#34;&gt;https://www.paypal.me/postgrest&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Every donation will be spent on making PostgREST better for the whole community.&lt;/p&gt; &#xA;&lt;h2&gt;Thanks&lt;/h2&gt; &#xA;&lt;p&gt;The PostgREST organization is grateful to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The project &lt;a href=&#34;https://github.com/PostgREST/postgrest/raw/main/BACKERS.md&#34;&gt;sponsors and backers&lt;/a&gt; who support PostgREST&#39;s development.&lt;/li&gt; &#xA; &lt;li&gt;The project &lt;a href=&#34;https://github.com/PostgREST/postgrest/graphs/contributors&#34;&gt;contributors&lt;/a&gt; who have improved PostgREST immensely with their code and good judgement. See more details in the &lt;a href=&#34;https://github.com/PostgREST/postgrest/raw/main/CHANGELOG.md&#34;&gt;changelog&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The cool logo came from &lt;a href=&#34;https://github.com/casalaina&#34;&gt;Mikey Casalaina&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>facebook/duckling</title>
    <updated>2022-05-29T01:43:13Z</updated>
    <id>tag:github.com,2022-05-29:/facebook/duckling</id>
    <link href="https://github.com/facebook/duckling" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Language, engine, and tooling for expressing, testing, and evaluating composable language rules on input strings.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://github.com/facebook/duckling/raw/main/logo.png&#34; alt=&#34;Duckling Logo&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Duckling &lt;a href=&#34;https://opensource.fb.com/support-ukraine&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Support-Ukraine-FFD500?style=flat&amp;amp;labelColor=005BBB&#34; alt=&#34;Support Ukraine&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://travis-ci.org/facebook/duckling&#34;&gt;&lt;img src=&#34;https://travis-ci.org/facebook/duckling.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;Duckling is a Haskell library that parses text into structured data.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&#34;the first Tuesday of October&#34;&#xA;=&amp;gt; {&#34;value&#34;:&#34;2017-10-03T00:00:00.000-07:00&#34;,&#34;grain&#34;:&#34;day&#34;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;A Haskell environment is required. We recommend using &lt;a href=&#34;https://haskell-lang.org/get-started&#34;&gt;stack&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;On Linux and MacOS you&#39;ll need to install PCRE development headers. On Linux, use your package manager to install them. On MacOS, the easiest way to install them is with &lt;a href=&#34;https://brew.sh/&#34;&gt;Homebrew&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew install pcre&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If that doesn&#39;t help, try running &lt;code&gt;brew doctor&lt;/code&gt; and fix the issues it finds.&lt;/p&gt; &#xA;&lt;h2&gt;Quickstart&lt;/h2&gt; &#xA;&lt;p&gt;To compile and run the binary:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;stack build&#xA;stack exec duckling-example-exe&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The first time you run it, it will download all required packages.&lt;/p&gt; &#xA;&lt;p&gt;This runs a basic HTTP server. Example request:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -XPOST http://0.0.0.0:8000/parse --data &#39;locale=en_GB&amp;amp;text=tomorrow at eight&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In the example application, all dimensions are enabled by default. Provide the parameter &lt;code&gt;dims&lt;/code&gt; to specify which ones you want. Examples:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Identify credit card numbers only:&#xA;$ curl -XPOST http://0.0.0.0:8000/parse --data &#39;locale=en_US&amp;amp;text=&#34;4111-1111-1111-1111&#34;&amp;amp;dims=&#34;[&#34;credit-card-number&#34;]&#34;&#39;&#xA;If you want multiple dimensions, comma-separate them in the array:&#xA;$ curl -XPOST http://0.0.0.0:8000/parse --data &#39;locale=en_US&amp;amp;text=&#34;3 cups of sugar&#34;&amp;amp;dims=&#34;[&#34;quantity&#34;,&#34;numeral&#34;]&#34;&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;code&gt;exe/ExampleMain.hs&lt;/code&gt; for an example on how to integrate Duckling in your project. If your backend doesn&#39;t run Haskell or if you don&#39;t want to spin your own Duckling server, you can directly use &lt;a href=&#34;https://wit.ai&#34;&gt;wit.ai&lt;/a&gt;&#39;s built-in entities.&lt;/p&gt; &#xA;&lt;h2&gt;Supported dimensions&lt;/h2&gt; &#xA;&lt;p&gt;Duckling supports many languages, but most don&#39;t support all dimensions yet (&lt;strong&gt;we need your help!&lt;/strong&gt;). Please look into &lt;a href=&#34;https://github.com/facebook/duckling/raw/master/Duckling/Dimensions&#34;&gt;this directory&lt;/a&gt; for language-specific support.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Dimension&lt;/th&gt; &#xA;   &lt;th&gt;Example input&lt;/th&gt; &#xA;   &lt;th&gt;Example value output&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;AmountOfMoney&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&#34;42€&#34;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;{&#34;value&#34;:42,&#34;type&#34;:&#34;value&#34;,&#34;unit&#34;:&#34;EUR&#34;}&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;CreditCardNumber&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&#34;4111-1111-1111-1111&#34;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;{&#34;value&#34;:&#34;4111111111111111&#34;,&#34;issuer&#34;:&#34;visa&#34;}&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Distance&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&#34;6 miles&#34;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;{&#34;value&#34;:6,&#34;type&#34;:&#34;value&#34;,&#34;unit&#34;:&#34;mile&#34;}&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Duration&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&#34;3 mins&#34;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;{&#34;value&#34;:3,&#34;minute&#34;:3,&#34;unit&#34;:&#34;minute&#34;,&#34;normalized&#34;:{&#34;value&#34;:180,&#34;unit&#34;:&#34;second&#34;}}&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Email&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&#34;&lt;a href=&#34;mailto:duckling-team@fb.com&#34;&gt;duckling-team@fb.com&lt;/a&gt;&#34;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;{&#34;value&#34;:&#34;duckling-team@fb.com&#34;}&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Numeral&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&#34;eighty eight&#34;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;{&#34;value&#34;:88,&#34;type&#34;:&#34;value&#34;}&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Ordinal&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&#34;33rd&#34;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;{&#34;value&#34;:33,&#34;type&#34;:&#34;value&#34;}&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;PhoneNumber&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&#34;+1 (650) 123-4567&#34;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;{&#34;value&#34;:&#34;(+1) 6501234567&#34;}&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Quantity&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&#34;3 cups of sugar&#34;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;{&#34;value&#34;:3,&#34;type&#34;:&#34;value&#34;,&#34;product&#34;:&#34;sugar&#34;,&#34;unit&#34;:&#34;cup&#34;}&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Temperature&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&#34;80F&#34;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;{&#34;value&#34;:80,&#34;type&#34;:&#34;value&#34;,&#34;unit&#34;:&#34;fahrenheit&#34;}&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Time&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&#34;today at 9am&#34;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;{&#34;values&#34;:[{&#34;value&#34;:&#34;2016-12-14T09:00:00.000-08:00&#34;,&#34;grain&#34;:&#34;hour&#34;,&#34;type&#34;:&#34;value&#34;}],&#34;value&#34;:&#34;2016-12-14T09:00:00.000-08:00&#34;,&#34;grain&#34;:&#34;hour&#34;,&#34;type&#34;:&#34;value&#34;}&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Url&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&#34;&lt;a href=&#34;https://api.wit.ai/message?q=hi&#34;&gt;https://api.wit.ai/message?q=hi&lt;/a&gt;&#34;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;{&#34;value&#34;:&#34;https://api.wit.ai/message?q=hi&#34;,&#34;domain&#34;:&#34;api.wit.ai&#34;}&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Volume&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&#34;4 gallons&#34;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;{&#34;value&#34;:4,&#34;type&#34;:&#34;value&#34;,&#34;unit&#34;:&#34;gallon&#34;}&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/facebook/duckling/raw/master/exe/CustomDimensionExample.hs&#34;&gt;Custom dimensions&lt;/a&gt; are also supported.&lt;/p&gt; &#xA;&lt;h2&gt;Extending Duckling&lt;/h2&gt; &#xA;&lt;p&gt;To regenerate the classifiers and run the test suite:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;stack build :duckling-regen-exe &amp;amp;&amp;amp; stack exec duckling-regen-exe &amp;amp;&amp;amp; stack test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It&#39;s important to regenerate the classifiers after updating the code and before running the test suite.&lt;/p&gt; &#xA;&lt;p&gt;To extend Duckling&#39;s support for a dimension in a given language, typically 4 files need to be updated:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;Duckling/&amp;lt;Dimension&amp;gt;/&amp;lt;Lang&amp;gt;/Rules.hs&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;Duckling/&amp;lt;Dimension&amp;gt;/&amp;lt;Lang&amp;gt;/Corpus.hs&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;Duckling/Dimensions/&amp;lt;Lang&amp;gt;.hs&lt;/code&gt; (if not already present in &lt;code&gt;Duckling/Dimensions/Common.hs&lt;/code&gt;)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;Duckling/Rules/&amp;lt;Lang&amp;gt;.hs&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To add a new language:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Make sure that the language code used follows the &lt;a href=&#34;https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes&#34;&gt;ISO-639-1 standard&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;The first dimension to implement is &lt;code&gt;Numeral&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Follow &lt;a href=&#34;https://github.com/facebook/duckling/commit/24d3f199768be970149412c95b1c1bf5d76f8240&#34;&gt;this example&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To add a new locale:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;There should be a need for diverging rules between the locale and the language.&lt;/li&gt; &#xA; &lt;li&gt;Make sure that the locale code is a valid &lt;a href=&#34;https://www.iso.org/obp/ui/#search/code/&#34;&gt;ISO3166 alpha2 country code&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Follow &lt;a href=&#34;https://github.com/facebook/duckling/commit/1ab5f447d2635fe6d48887a501d333a52adff5b9&#34;&gt;this example&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Rules have a name, a pattern and a production. Patterns are used to perform character-level matching (regexes on input) and concept-level matching (predicates on tokens). Productions are arbitrary functions that take a list of tokens and return a new token.&lt;/p&gt; &#xA;&lt;p&gt;The corpus (resp. negative corpus) is a list of examples that should (resp. shouldn&#39;t) parse. The reference time for the corpus is Tuesday Feb 12, 2013 at 4:30am.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Duckling.Debug&lt;/code&gt; provides a few debugging tools:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ stack repl --no-load&#xA;&amp;gt; :l Duckling.Debug&#xA;&amp;gt; debug (makeLocale EN $ Just US) &#34;in two minutes&#34; [Seal Time]&#xA;in|within|after &amp;lt;duration&amp;gt; (in two minutes)&#xA;-- regex (in)&#xA;-- &amp;lt;integer&amp;gt; &amp;lt;unit-of-duration&amp;gt; (two minutes)&#xA;-- -- integer (0..19) (two)&#xA;-- -- -- regex (two)&#xA;-- -- minute (grain) (minutes)&#xA;-- -- -- regex (minutes)&#xA;[Entity {dim = &#34;time&#34;, body = &#34;in two minutes&#34;, value = RVal Time (TimeValue (SimpleValue (InstantValue {vValue = 2013-02-12 04:32:00 -0200, vGrain = Second})) [SimpleValue (InstantValue {vValue = 2013-02-12 04:32:00 -0200, vGrain = Second})] Nothing), start = 0, end = 14}]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Duckling is &lt;a href=&#34;https://raw.githubusercontent.com/facebook/duckling/main/LICENSE&#34;&gt;BSD-licensed&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>input-output-hk/plutus</title>
    <updated>2022-05-29T01:43:13Z</updated>
    <id>tag:github.com,2022-05-29:/input-output-hk/plutus</id>
    <link href="https://github.com/input-output-hk/plutus" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The Plutus language implementation and tools&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;a href=&#34;https://github.com/input-output-hk/plutus&#34;&gt;Plutus Core&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;div id=&#34;toc&#34; class=&#34;toc&#34;&gt; &#xA; &lt;div id=&#34;toctitle&#34;&gt;&#xA;  Table of Contents&#xA; &lt;/div&gt; &#xA; &lt;ul class=&#34;sectlevel1&#34;&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus/master/#_documentation&#34;&gt;Documentation&lt;/a&gt; &#xA;   &lt;ul class=&#34;sectlevel2&#34;&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus/master/#_user_documentation&#34;&gt;User documentation&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus/master/#_talks&#34;&gt;Talks&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus/master/#_specifications_and_design&#34;&gt;Specifications and design&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus/master/#_academic_papers&#34;&gt;Academic papers&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus/master/#_versioning_and_releases&#34;&gt;Versioning and releases&lt;/a&gt; &#xA;   &lt;ul class=&#34;sectlevel2&#34;&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus/master/#_versioning&#34;&gt;Versioning&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus/master/#_branching_and_tagging&#34;&gt;Branching and tagging&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus/master/#_version_ranges&#34;&gt;Version ranges&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus/master/#_releases&#34;&gt;Releases&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus/master/#_working_with_the_project&#34;&gt;Working with the project&lt;/a&gt; &#xA;   &lt;ul class=&#34;sectlevel2&#34;&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus/master/#_how_to_submit_an_issue&#34;&gt;How to submit an issue&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus/master/#how-to-develop&#34;&gt;How to develop and contribute to the project&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus/master/#_how_to_depend_on_the_project_from_another_haskell_project&#34;&gt;How to depend on the project from another Haskell project&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus/master/#_how_to_build_the_projects_artifacts&#34;&gt;How to build the project’s artifacts&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus/master/#nix-advice&#34;&gt;Nix&lt;/a&gt; &#xA;   &lt;ul class=&#34;sectlevel2&#34;&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus/master/#iohk-binary-cache&#34;&gt;How to set up the IOHK binary caches&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus/master/#nix-build-attributes&#34;&gt;Which attributes to use to build different artifacts&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus/master/#_licensing&#34;&gt;Licensing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/div&gt; &#xA;&lt;div id=&#34;preamble&#34;&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;Plutus Core is the scripting language embedded in the Cardano ledger and forms the basis of the Plutus Platform, an application development platform for developing distributed applications using the Cardano blockchain. For more information about the projects, see the &lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus/master/#user-documentation&#34;&gt;[user-documentation]&lt;/a&gt;.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;This repository contains:&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;ulist&#34;&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt; &lt;p&gt;The implementation, specification, and mechanized metatheory of Plutus Core&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;Plutus Tx, the compiler from Haskell to Plutus Core.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;/ul&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;The rest of this README is focussed on people who want to develop or contribute to the project.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;For people who want to &lt;strong&gt;use&lt;/strong&gt; the project, please consult the &lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus/master/#user-documentation&#34;&gt;[user-documentation]&lt;/a&gt;.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;admonitionblock important&#34;&gt; &#xA;   &lt;table&gt; &#xA;    &lt;tbody&gt;&#xA;     &lt;tr&gt; &#xA;      &lt;td class=&#34;icon&#34;&gt; &#xA;       &lt;div class=&#34;title&#34;&gt;&#xA;        Important&#xA;       &lt;/div&gt; &lt;/td&gt; &#xA;      &lt;td class=&#34;content&#34;&gt; &#xA;       &lt;div class=&#34;paragraph&#34;&gt; &#xA;        &lt;p&gt;This repository used to contain the code for the Plutus Application Framework and Marlowe. These have now &lt;strong&gt;moved&lt;/strong&gt;:&lt;/p&gt; &#xA;       &lt;/div&gt; &#xA;       &lt;div class=&#34;ulist&#34;&gt; &#xA;        &lt;ul&gt; &#xA;         &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/input-output-hk/plutus-apps&#34;&gt;Plutus Application Framework&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;         &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/input-output-hk/marlowe-cardano&#34;&gt;Marlowe&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;        &lt;/ul&gt; &#xA;       &lt;/div&gt; &#xA;       &lt;div class=&#34;paragraph&#34;&gt; &#xA;        &lt;p&gt;Please ensure that you make PRs and issues in the appropriate repository!&lt;/p&gt; &#xA;       &lt;/div&gt; &lt;/td&gt; &#xA;     &lt;/tr&gt; &#xA;    &lt;/tbody&gt;&#xA;   &lt;/table&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div id=&#34;cache-warning&#34; class=&#34;admonitionblock important&#34;&gt; &#xA;   &lt;table&gt; &#xA;    &lt;tbody&gt;&#xA;     &lt;tr&gt; &#xA;      &lt;td class=&#34;icon&#34;&gt; &#xA;       &lt;div class=&#34;title&#34;&gt;&#xA;        Important&#xA;       &lt;/div&gt; &lt;/td&gt; &#xA;      &lt;td class=&#34;content&#34;&gt; &#xA;       &lt;div class=&#34;paragraph&#34;&gt; &#xA;        &lt;p&gt;DO NOT IGNORE THIS&lt;/p&gt; &#xA;       &lt;/div&gt; &#xA;       &lt;div class=&#34;paragraph&#34;&gt; &#xA;        &lt;p&gt;If you want to use Nix with this project, make sure to set up the &lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus/master/#iohk-binary-cache&#34;&gt;IOHK binary cache&lt;/a&gt;. If you do not do this, you will end up building GHC, which takes several hours. If you find yourself building GHC, STOP and fix the cache.&lt;/p&gt; &#xA;       &lt;/div&gt; &lt;/td&gt; &#xA;     &lt;/tr&gt; &#xA;    &lt;/tbody&gt;&#xA;   &lt;/table&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;_documentation&#34;&gt;Documentation&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;_user_documentation&#34;&gt;User documentation&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;The main documentation is located &lt;a href=&#34;https://plutus.readthedocs.io/en/latest/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;_talks&#34;&gt;Talks&lt;/h3&gt; &#xA;   &lt;div class=&#34;ulist&#34;&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=MpWeg6Fg0t8&#34;&gt;Functional Smart Contracts on Cardano (2020)&lt;/a&gt;: an overview of the ideas behind the Plutus Platform.&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=usMPt8KpBeI&#34;&gt;The Plutus Platform (2020)&lt;/a&gt;: an overview of the Platform as a whole (including the Application Framework) at the time.&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;_specifications_and_design&#34;&gt;Specifications and design&lt;/h3&gt; &#xA;   &lt;div class=&#34;ulist&#34;&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://hydra.iohk.io/job/Cardano/plutus/linux.docs.plutus-report/latest/download-by-type/doc-pdf/plutus&#34;&gt;Plutus Technical Report (draft)&lt;/a&gt;: a technical report and design document for the project.&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://hydra.iohk.io/job/Cardano/plutus/linux.docs.plutus-core-spec/latest/download-by-type/doc-pdf/plutus-core-specification&#34;&gt;Plutus Core Specification&lt;/a&gt;: the formal specification of the core language.&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://hydra.iohk.io/job/Cardano/plutus/linux.docs.extended-utxo-spec/latest/download-by-type/doc-pdf/extended-utxo-specification&#34;&gt;Extended UTXO Model&lt;/a&gt;: a design document for the core changes to the Cardano ledger.&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;_academic_papers&#34;&gt;Academic papers&lt;/h3&gt; &#xA;   &lt;div class=&#34;ulist&#34;&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://hydra.iohk.io/job/Cardano/plutus/linux.docs.papers.unraveling-recursion/latest/download-by-type/doc-pdf/unraveling-recursion&#34;&gt;Unraveling Recursion&lt;/a&gt;: a description of some of the compilation strategies used in Plutus IR (&lt;a href=&#34;https://doi.org/10.1007/978-3-030-33636-3_15&#34;&gt;published version&lt;/a&gt;).&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://hydra.iohk.io/job/Cardano/plutus/linux.docs.papers.system-f-in-agda/latest/download-by-type/doc-pdf/paper&#34;&gt;System F in Agda&lt;/a&gt;: a formal model of System F in Agda (&lt;a href=&#34;https://doi.org/10.1007/978-3-030-33636-3_10&#34;&gt;published version&lt;/a&gt;).&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://hydra.iohk.io/job/Cardano/plutus/linux.docs.papers.eutxo/latest/download-by-type/doc-pdf/eutxo&#34;&gt;The Extended UTXO Model&lt;/a&gt;: a full presentation of the EUTXO ledger extension (&lt;a href=&#34;https://doi.org/10.1007/978-3-030-54455-3_37&#34;&gt;published version&lt;/a&gt;).&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://hydra.iohk.io/job/Cardano/plutus/linux.docs.papers.utxoma/latest/download-by-type/doc-pdf/utxoma&#34;&gt;UTXOma: UTXO with Multi-Asset Support&lt;/a&gt;: a full presentation of the multi-asset ledger extension (&lt;a href=&#34;https://doi.org/10.1007/978-3-030-61467-6_8&#34;&gt;published version&lt;/a&gt;).&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://hydra.iohk.io/job/Cardano/plutus/linux.docs.papers.eutxoma/latest/download-by-type/doc-pdf/eutxoma&#34;&gt;Native Custom Tokens in the Extended UTXO Model&lt;/a&gt;: a discussion of the interaction of the multi-asset support with EUTXO (&lt;a href=&#34;https://doi.org/10.1007/978-3-030-61467-6_7&#34;&gt;published version&lt;/a&gt;).&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://arxiv.org/abs/2201.04919&#34;&gt;Translation Certification for Smart Contracts&lt;/a&gt;: a certifier of Plutus IR compiler passes written in Coq.&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;_versioning_and_releases&#34;&gt;Versioning and releases&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;_versioning&#34;&gt;Versioning&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;The core &lt;code&gt;plutus&lt;/code&gt; packages are versioned as follows:&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;ulist&#34;&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt; &lt;p&gt;Package versioning follows the &lt;a href=&#34;https://pvp.haskell.org/&#34;&gt;PVP&lt;/a&gt; on a best-effort basis (i.e. we will generally try to but we won’t guarantee it).&lt;/p&gt; &#xA;      &lt;div class=&#34;ulist&#34;&gt; &#xA;       &lt;ul&gt; &#xA;        &lt;li&gt; &lt;p&gt;The first-major-version component indicates the &#34;era&#34; which for our purposes means which major version of the &lt;strong&gt;Cardano node&lt;/strong&gt; is being targeted.&lt;/p&gt; &lt;/li&gt; &#xA;        &lt;li&gt; &lt;p&gt;The second-major-version component is used for releases which are major versions according to the PVP, but which are still compatible with the current &#34;era&#34;.&lt;/p&gt; &lt;/li&gt; &#xA;        &lt;li&gt; &lt;p&gt;The minor-version and below are used as normal.&lt;/p&gt; &lt;/li&gt; &#xA;       &lt;/ul&gt; &#xA;      &lt;/div&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Packages which are used downstream should all have the same version.&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Other packages which are not used downstream (e.g. &lt;code&gt;plutus-benchmark&lt;/code&gt;) can remain unversioned.&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;In principle we could just have a single major version, but using two makes it easier to avoid mistakes.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;_branching_and_tagging&#34;&gt;Branching and tagging&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;The following branching and tagging rules are followed:&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;ulist&#34;&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt; &lt;p&gt;Version &lt;code&gt;X&lt;/code&gt; is tagged as &lt;code&gt;vX&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;code&gt;master&lt;/code&gt; is always targeting the next first-major-version.&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;First-major-version releases also have a release branch, &lt;code&gt;release/X&lt;/code&gt;.&lt;/p&gt; &#xA;      &lt;div class=&#34;ulist&#34;&gt; &#xA;       &lt;ul&gt; &#xA;        &lt;li&gt; &lt;p&gt;Changes will be backported from master to the release branch&lt;/p&gt; &lt;/li&gt; &#xA;        &lt;li&gt; &lt;p&gt;Subsequent lesser releases will be made from that branch but do not create new branches.&lt;/p&gt; &lt;/li&gt; &#xA;       &lt;/ul&gt; &#xA;      &lt;/div&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;_version_ranges&#34;&gt;Version ranges&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;Packages which depend on &lt;code&gt;plutus&lt;/code&gt; packages should use version ranges to control which version of those packages they build against.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;ulist&#34;&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt; &lt;p&gt;Packages in &lt;code&gt;plutus&lt;/code&gt; which are used downstream should pin the major-version of each other (e.g. &lt;code&gt;plutus-tx-1.0.1&lt;/code&gt; should depend on &lt;code&gt;plutus-core ^&amp;gt;= 1.0&lt;/code&gt;).&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Downstream packages should pin at least the first-major-version of &lt;code&gt;plutus&lt;/code&gt; packages.&lt;/p&gt; &#xA;      &lt;div class=&#34;ulist&#34;&gt; &#xA;       &lt;ul&gt; &#xA;        &lt;li&gt; &lt;p&gt;Upgrading to a new second-major-version should always be safe, with at most code breakage (following the PVP). Users may of course want to pin this version as well to avoid such breakage.&lt;/p&gt; &lt;/li&gt; &#xA;       &lt;/ul&gt; &#xA;      &lt;/div&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Downstream packages pulling in &lt;code&gt;plutus&lt;/code&gt; packages via &lt;code&gt;source-repository-package&lt;/code&gt; stanzas should always take tagged commits, or potentially commits from a release branch.&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;_releases&#34;&gt;Releases&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;Currently there is no release process beyond bumping the package versions and making a tag/branch as appropriate.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;_working_with_the_project&#34;&gt;Working with the project&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;_how_to_submit_an_issue&#34;&gt;How to submit an issue&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;Issues can be filed in the &lt;a href=&#34;https://github.com/input-output-hk/plutus/issues&#34;&gt;GitHub Issue tracker&lt;/a&gt;.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;However, note that this is pre-release software, so we will not usually be providing support.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;how-to-develop&#34;&gt;How to develop and contribute to the project&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus/master/CONTRIBUTING.html&#34;&gt;CONTRIBUTING&lt;/a&gt;, which describes our processes in more detail including development environments.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;_how_to_depend_on_the_project_from_another_haskell_project&#34;&gt;How to depend on the project from another Haskell project&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;None of our libraries are on Hackage, unfortunately (many of our dependencies aren’t either). So for the time being, you need to:&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;olist arabic&#34;&gt; &#xA;    &lt;ol class=&#34;arabic&#34;&gt; &#xA;     &lt;li&gt; &lt;p&gt;Add &lt;code&gt;plutus&lt;/code&gt; as a &lt;code&gt;source-repository-package&lt;/code&gt; to your &lt;code&gt;cabal.project&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Copy the &lt;code&gt;source-repository-package&lt;/code&gt; stanzas from our &lt;code&gt;cabal.project&lt;/code&gt; to yours.&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Copy additional stanzas from our &lt;code&gt;cabal.project&lt;/code&gt; as you need, e.g. you may need some of the &lt;code&gt;allow-newer&lt;/code&gt; stanzas.&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;/ol&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;The &lt;a href=&#34;https://github.com/input-output-hk/plutus-starter&#34;&gt;plutus-starter&lt;/a&gt; project provides an example.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;_how_to_build_the_projects_artifacts&#34;&gt;How to build the project’s artifacts&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;This section contains information about how to build the project’s artifacts for independent usage. For development work see &lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus/master/#how-to-develop&#34;&gt;How to develop and contribute to the project&lt;/a&gt; for more information.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;sect3&#34;&gt; &#xA;    &lt;h4 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h4&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;The Haskell libraries in Plutus Core are built with &lt;code&gt;cabal&lt;/code&gt; and Nix. The other artifacts (docs etc.) are also most easily built with Nix.&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;sect4&#34;&gt; &#xA;     &lt;h5 id=&#34;_nix&#34;&gt;Nix&lt;/h5&gt; &#xA;     &lt;div class=&#34;paragraph&#34;&gt; &#xA;      &lt;p&gt;Install &lt;a href=&#34;https://nixos.org/nix/&#34;&gt;Nix&lt;/a&gt; (recommended). following the instructions on the &lt;a href=&#34;https://nixos.org/nix/&#34;&gt;Nix website&lt;/a&gt;.&lt;/p&gt; &#xA;     &lt;/div&gt; &#xA;     &lt;div class=&#34;paragraph&#34;&gt; &#xA;      &lt;p&gt;Make sure you have read and understood the &lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus/master/#cache-warning&#34;&gt;cache warning&lt;/a&gt;. DO NOT IGNORE THIS.&lt;/p&gt; &#xA;     &lt;/div&gt; &#xA;     &lt;div class=&#34;paragraph&#34;&gt; &#xA;      &lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus/master/#nix-advice&#34;&gt;Nix&lt;/a&gt; for further advice on using Nix.&lt;/p&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;sect4&#34;&gt; &#xA;     &lt;h5 id=&#34;_non_nix&#34;&gt;Non-Nix&lt;/h5&gt; &#xA;     &lt;div class=&#34;paragraph&#34;&gt; &#xA;      &lt;p&gt;You can build some of the Haskell packages without Nix, but this is not recommended and we don’t guarantee that these prerequisites are sufficient. If you use Nix, these tools are provided for you via &lt;code&gt;shell.nix&lt;/code&gt;, and you do &lt;strong&gt;not&lt;/strong&gt; need to install them yourself.&lt;/p&gt; &#xA;     &lt;/div&gt; &#xA;     &lt;div class=&#34;ulist&#34;&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt; &lt;p&gt;If you want to build our Haskell packages with &lt;a href=&#34;https://www.haskell.org/cabal/&#34;&gt;&lt;code&gt;cabal&lt;/code&gt;&lt;/a&gt;, then install it.&lt;/p&gt; &lt;/li&gt; &#xA;       &lt;li&gt; &lt;p&gt;If you want to build our Agda code, then install &lt;a href=&#34;https://github.com/agda/agda&#34;&gt;Agda&lt;/a&gt; and the &lt;a href=&#34;https://github.com/agda/agda-stdlib&#34;&gt;standard library&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;/ul&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;sect3&#34;&gt; &#xA;    &lt;h4 id=&#34;building-with-nix&#34;&gt;How to build the Haskell packages and other artifacts with Nix&lt;/h4&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;Run &lt;code&gt;nix build -f default.nix plutus.haskell.packages.plutus-core.components.library&lt;/code&gt; from the root to build the Plutus Core library.&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus/master/#nix-build-attributes&#34;&gt;Which attributes to use to build different artifacts&lt;/a&gt; to find out what other attributes you can build.&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;sect3&#34;&gt; &#xA;    &lt;h4 id=&#34;_how_to_build_the_haskell_packages_with_cabal&#34;&gt;How to build the Haskell packages with &lt;code&gt;cabal&lt;/code&gt;&lt;/h4&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;The Haskell packages can be built directly with &lt;code&gt;cabal&lt;/code&gt;. We do this during development (see &lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus/master/#how-to-develop&#34;&gt;How to develop and contribute to the project&lt;/a&gt;). The best way is to do this is inside a &lt;code&gt;nix-shell&lt;/code&gt;.&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;admonitionblock note&#34;&gt; &#xA;     &lt;table&gt; &#xA;      &lt;tbody&gt;&#xA;       &lt;tr&gt; &#xA;        &lt;td class=&#34;icon&#34;&gt; &#xA;         &lt;div class=&#34;title&#34;&gt;&#xA;          Note&#xA;         &lt;/div&gt; &lt;/td&gt; &#xA;        &lt;td class=&#34;content&#34;&gt; &#xA;         &lt;div class=&#34;paragraph&#34;&gt; &#xA;          &lt;p&gt;For fresh development setups, you also need to run &lt;code&gt;cabal update&lt;/code&gt;.&lt;/p&gt; &#xA;         &lt;/div&gt; &lt;/td&gt; &#xA;       &lt;/tr&gt; &#xA;      &lt;/tbody&gt;&#xA;     &lt;/table&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;Run &lt;code&gt;cabal build plutus-core&lt;/code&gt; from the root to build the Plutus Core library.&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus/master/cabal.project&#34;&gt;cabal project file&lt;/a&gt; to see the other packages that you can build with &lt;code&gt;cabal&lt;/code&gt;.&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;nix-advice&#34;&gt;Nix&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;iohk-binary-cache&#34;&gt;How to set up the IOHK binary caches&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;Adding the IOHK binary cache to your Nix configuration will speed up builds a lot, since many things will have been built already by our CI.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;If you find you are building packages that are not defined in this repository, or if the build seems to take a very long time then you may not have this set up properly.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;To set up the cache:&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;olist arabic&#34;&gt; &#xA;    &lt;ol class=&#34;arabic&#34;&gt; &#xA;     &lt;li&gt; &lt;p&gt;On non-NixOS, edit &lt;code&gt;/etc/nix/nix.conf&lt;/code&gt; and add the following lines:&lt;/p&gt; &#xA;      &lt;div class=&#34;listingblock&#34;&gt; &#xA;       &lt;div class=&#34;content&#34;&gt; &#xA;        &lt;pre&gt;substituters        = https://hydra.iohk.io https://iohk.cachix.org https://cache.nixos.org/&#xA;trusted-public-keys = hydra.iohk.io:f/Ea+s+dFdN+3Y/G+FDgSq+a5NEWhJGzdjvKNGv0/EQ= iohk.cachix.org-1:DpRUyj7h7V830dp/i6Nti+NEO2/nhblbov/8MW7Rqoo= cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY=&lt;/pre&gt; &#xA;       &lt;/div&gt; &#xA;      &lt;/div&gt; &#xA;      &lt;div class=&#34;admonitionblock note&#34;&gt; &#xA;       &lt;table&gt; &#xA;        &lt;tbody&gt;&#xA;         &lt;tr&gt; &#xA;          &lt;td class=&#34;icon&#34;&gt; &#xA;           &lt;div class=&#34;title&#34;&gt;&#xA;            Note&#xA;           &lt;/div&gt; &lt;/td&gt; &#xA;          &lt;td class=&#34;content&#34;&gt; &#xA;           &lt;div class=&#34;paragraph&#34;&gt; &#xA;            &lt;p&gt;If you don’t have an &lt;code&gt;/etc/nix/nix.conf&lt;/code&gt; or don’t want to edit it, you may add the &lt;code&gt;nix.conf&lt;/code&gt; lines to &lt;code&gt;~/.config/nix/nix.conf&lt;/code&gt; instead. You must be a &lt;a href=&#34;https://nixos.org/nix/manual/#ssec-multi-user&#34;&gt;trusted user&lt;/a&gt; to do this. If this file doesn’t exist, go ahead and create it.&lt;/p&gt; &#xA;           &lt;/div&gt; &lt;/td&gt; &#xA;         &lt;/tr&gt; &#xA;        &lt;/tbody&gt;&#xA;       &lt;/table&gt; &#xA;      &lt;/div&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;On NixOS, set the following NixOS options:&lt;/p&gt; &#xA;      &lt;div class=&#34;listingblock&#34;&gt; &#xA;       &lt;div class=&#34;content&#34;&gt; &#xA;        &lt;pre&gt;nix = {&#xA;  binaryCaches          = [ &#34;https://hydra.iohk.io&#34; &#34;https://iohk.cachix.org&#34; ];&#xA;  binaryCachePublicKeys = [ &#34;hydra.iohk.io:f/Ea+s+dFdN+3Y/G+FDgSq+a5NEWhJGzdjvKNGv0/EQ=&#34; &#34;iohk.cachix.org-1:DpRUyj7h7V830dp/i6Nti+NEO2/nhblbov/8MW7Rqoo=&#34; ];&#xA;};&lt;/pre&gt; &#xA;       &lt;/div&gt; &#xA;      &lt;/div&gt; &lt;/li&gt; &#xA;    &lt;/ol&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;Note: after changing /etc/nix/nix.conf you must restart the nix-daemon on non-NixOS for the changes to take effect!&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;nix-build-attributes&#34;&gt;Which attributes to use to build different artifacts&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus/master/default.nix&#34;&gt;&lt;code&gt;default.nix&lt;/code&gt;&lt;/a&gt; defines a package set with attributes for all the artifacts you can build from this repository. These can be built using &lt;code&gt;nix build&lt;/code&gt;. For example:&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;listingblock&#34;&gt; &#xA;    &lt;div class=&#34;content&#34;&gt; &#xA;     &lt;pre&gt;nix build -f default.nix docs.papers.eutxo&lt;/pre&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;ulist&#34;&gt; &#xA;    &lt;div class=&#34;title&#34;&gt;&#xA;     Example attributes&#xA;    &lt;/div&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt; &lt;p&gt;Project packages: defined inside &lt;code&gt;plutus.haskell.packages&lt;/code&gt;&lt;/p&gt; &#xA;      &lt;div class=&#34;ulist&#34;&gt; &#xA;       &lt;ul&gt; &#xA;        &lt;li&gt; &lt;p&gt;e.g.&amp;nbsp;&lt;code&gt;plutus.haskell.packages.plutus-core.components.library&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;       &lt;/ul&gt; &#xA;      &lt;/div&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Documents: defined inside &lt;code&gt;docs&lt;/code&gt;&lt;/p&gt; &#xA;      &lt;div class=&#34;ulist&#34;&gt; &#xA;       &lt;ul&gt; &#xA;        &lt;li&gt; &lt;p&gt;e.g.&amp;nbsp;&lt;code&gt;docs.plutus-core-spec&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;       &lt;/ul&gt; &#xA;      &lt;/div&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;There are other attributes defined in &lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus/master/default.nix&#34;&gt;&lt;code&gt;default.nix&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;_licensing&#34;&gt;Licensing&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;You are free to copy, modify, and distribute this software under the terms of the Apache 2.0 license. See the &lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus/master/LICENSE&#34;&gt;LICENSE&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus/master/NOTICE&#34;&gt;NOTICE&lt;/a&gt; files for details.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt;</summary>
  </entry>
  <entry>
    <title>haskell/haskell-language-server</title>
    <updated>2022-05-29T01:43:13Z</updated>
    <id>tag:github.com,2022-05-29:/haskell/haskell-language-server</id>
    <link href="https://github.com/haskell/haskell-language-server" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Official haskell ide support via language server (LSP). Successor of ghcide &amp; haskell-ide-engine.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;haskell-language-server&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/haskell/haskell-language-server/master/docs/logos/logo-256.png&#34; alt=&#34;haskell-language-server&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/haskell/haskell-language-server/releases/latest&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/haskell/haskell-language-server.svg?sanitize=true&#34; alt=&#34;Release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hackage.haskell.org/package/haskell-language-server&#34;&gt;&lt;img src=&#34;https://img.shields.io/hackage/v/haskell-language-server.svg?logo=haskell&#34; alt=&#34;Hackage&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/haskell/haskell-language-server/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-Apache2-green.svg?dummy&#34; alt=&#34;License Apache 2.0&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://circleci.com/gh/haskell/haskell-language-server/&#34;&gt;&lt;img src=&#34;https://img.shields.io/circleci/project/github/haskell/haskell-language-server/master.svg?sanitize=true&#34; alt=&#34;CircleCI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/haskell/haskell-language-server/actions/workflows/test.yml&#34;&gt;&lt;img src=&#34;https://github.com/haskell/haskell-language-server/actions/workflows/test.yml/badge.svg?sanitize=true&#34; alt=&#34;GitHub Testing Workflow&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/haskell/haskell-language-server/actions/workflows/nix.yml&#34;&gt;&lt;img src=&#34;https://github.com/haskell/haskell-language-server/actions/workflows/nix.yml/badge.svg?sanitize=true&#34; alt=&#34;GitHub Nix Workflow&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://web.libera.chat/?channels=#haskell-language-server&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/chat-on%20libera-brightgreen.svg?sanitize=true&#34; alt=&#34;ircchat&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.codetriage.com/haskell/haskell-language-server&#34;&gt;&lt;img src=&#34;https://www.codetriage.com/haskell/haskell-language-server/badges/users.svg?sanitize=true&#34; alt=&#34;codetriage&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The official Haskell language server (LSP) implementation. Consult the &lt;a href=&#34;https://haskell-language-server.readthedocs.io/en/latest/&#34;&gt;project documentation&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://haskell-language-server.readthedocs.io/en/latest/features.html&#34;&gt;Features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://haskell-language-server.readthedocs.io/en/latest/installation.html&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://haskell-language-server.readthedocs.io/en/latest/supported-versions.html&#34;&gt;Supported GHC Versions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://haskell-language-server.readthedocs.io/en/latest/configuration.html&#34;&gt;Configuration&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://haskell-language-server.readthedocs.io/en/latest/troubleshooting.html&#34;&gt;Troubleshooting&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://haskell-language-server.readthedocs.io/en/latest/contributing/index.html&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>koka-lang/koka</title>
    <updated>2022-05-29T01:43:13Z</updated>
    <id>tag:github.com,2022-05-29:/koka-lang/koka</id>
    <link href="https://github.com/koka-lang/koka" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Koka language compiler and interpreter&lt;/p&gt;&lt;hr&gt;&lt;img align=&#34;left&#34; width=&#34;100&#34; height=&#34;100&#34; src=&#34;https://raw.githubusercontent.com/koka-lang/koka/master/doc/logo/koka-logo-filled.png&#34;&gt; &#xA;&lt;!--&#xA;[&lt;img align=&#34;right&#34; src=&#34;https://travis-ci.org/koka-lang/koka.svg?branch=master&#34;/&gt;](https://travis-ci.org/koka-lang/koka)&#xA;--&gt; &#xA;&lt;a href=&#34;https://matrix.to/#/#koka-lang_koka:gitter.im&#34;&gt; &lt;img align=&#34;right&#34; style=&#34;margin: 5px&#34; src=&#34;https://img.shields.io/matrix/koka-lang:matrix.org?label=chat%20on%20matrix&#34;&gt; &lt;/a&gt; &#xA;&lt;a href=&#34;https://gitter.im/koka-lang/koka?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge&#34;&gt; &lt;img align=&#34;right&#34; style=&#34;margin: 5px&#34; src=&#34;https://badges.gitter.im/koka-lang/koka.svg?sanitize=true&#34;&gt; &lt;/a&gt; &#xA;&lt;p&gt;&amp;nbsp;&lt;/p&gt; &#xA;&lt;h1&gt;Koka: a Functional Language with Effects&lt;/h1&gt; &#xA;&lt;p&gt;&lt;em&gt;Koka v2 is a research language that currently under heavy development with the new C backend&lt;/em&gt; &lt;em&gt;Latest release&lt;/em&gt;: v2.4.0, 2022-02-07 (&lt;a href=&#34;https://koka-lang.github.io/koka/doc/book.html&#34;&gt;Install&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://koka-lang.github.io/koka/doc/book.html#why-handlers&#34;&gt;&lt;img align=&#34;right&#34; width=&#34;300&#34; src=&#34;https://raw.githubusercontent.com/koka-lang/koka/master/doc/snippet-yield.png&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Koka is a strongly typed functional-style language with effect types and handlers.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The core of Koka consists of a small set of well-studied language features, like first-class functions, a polymorphic type- and effect system, algebraic data types, and effect handlers. Each of these is composable and avoid the addition of “special” extensions by being as general as possible.&lt;/li&gt; &#xA; &lt;li&gt;Koka tracks the (side) &lt;em&gt;effects&lt;/em&gt; of every function in its type, where pure and effectful computations are distinguished. The precise effect typing gives Koka &lt;em&gt;rock-solid semantics&lt;/em&gt; backed by well-studied category theory, which makes Koka particularly easy to reason about for both humans and compilers.&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Effect handlers&lt;/em&gt; let you define advanced control abstractions, like exceptions, async/await, or probabilistic programs, as a user library in a typed and composable way.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://koka-lang.github.io/koka/doc/book.html#why-perceus&#34;&gt;Perceus&lt;/a&gt; is an advanced compilation method for reference counting. Together with &lt;a href=&#34;https://www.microsoft.com/en-us/research/publication/generalized-evidence-passing-for-effect-handlers/&#34;&gt;evidence passing&lt;/a&gt;, this lets Koka compile directly to C code &lt;em&gt;without needing a garbage collector or runtime system&lt;/em&gt;. Perceus also performs &lt;a href=&#34;https://koka-lang.github.io/koka/doc/book.html#why-fbip&#34;&gt;reuse analysis&lt;/a&gt; and optimizes functional-style programs to use in-place updates when possible.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To learn more:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://koka-lang.github.io/koka/doc/book.html&#34;&gt;Install&lt;/a&gt; Koka and compile your first programs.&lt;/li&gt; &#xA; &lt;li&gt;Read the &lt;a href=&#34;https://koka-lang.github.io/koka/doc/book.html&#34;&gt;Koka book&lt;/a&gt; for a tour of the Koka language and its specification.&lt;/li&gt; &#xA; &lt;li&gt;Browse the &lt;a href=&#34;https://koka-lang.github.io/koka/doc/toc.html&#34;&gt;library documentation&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Help with &lt;a href=&#34;https://raw.githubusercontent.com/koka-lang/koka/master/#tasks&#34;&gt;development&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Enjoy, Daan Leijen&lt;/p&gt; &#xA;&lt;p&gt;Special thanks to: &lt;a href=&#34;https://antonlorenzen.de/&#34;&gt;Anton Lorenzen&lt;/a&gt; for his work on frame-limited reuse in Perceus &lt;a href=&#34;https://raw.githubusercontent.com/koka-lang/koka/master/#references&#34;&gt;[10]&lt;/a&gt;, &lt;a href=&#34;https://xnning.github.io/&#34;&gt;Ningning Xie&lt;/a&gt; for her work on the theory and practice of evidence passing &lt;a href=&#34;https://raw.githubusercontent.com/koka-lang/koka/master/#references&#34;&gt;[9,6]&lt;/a&gt; and the formalization of Perceus reference counting &lt;a href=&#34;https://raw.githubusercontent.com/koka-lang/koka/master/#references&#34;&gt;[8]&lt;/a&gt;, &lt;a href=&#34;https://alexreinking.com/&#34;&gt;Alex Reinking&lt;/a&gt; for the implementation of the Perceus reference counting analysis &lt;a href=&#34;https://raw.githubusercontent.com/koka-lang/koka/master/#references&#34;&gt;[8]&lt;/a&gt;, and all previous interns working on earlier versions of Koka: Daniel Hillerström, Jonathan Brachthäuser, Niki Vazou, Ross Tate, Edsko de Vries, and Dana Xu.&lt;/p&gt; &#xA;&lt;h2&gt;Recent Releases&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;v2.4.0&lt;/code&gt;, 2022-02-07: automatic generation of installation packages for various Linux distributions (by &lt;a href=&#34;https://github.com/rubikscraft&#34;&gt;Rubikscraft&lt;/a&gt;), improved specialization and integer add/sub, add &lt;code&gt;rbtree-fbip&lt;/code&gt; sample, improve grammar (&lt;code&gt;pub&lt;/code&gt; (instead of &lt;code&gt;public&lt;/code&gt;, remove private (as it is always default)), &lt;code&gt;final ctl&lt;/code&gt; (instead of &lt;code&gt;brk&lt;/code&gt;), underscores in number literals, etc), rename &lt;code&gt;double&lt;/code&gt; to &lt;code&gt;float64&lt;/code&gt;, various bug fixes.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;v2.3.8&lt;/code&gt;, 2021-12-27: improved &lt;code&gt;int&lt;/code&gt; performance, various bug fixes, update wasm backend, initial conan support, fix js backend.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;v2.3.6&lt;/code&gt;, 2021-11-26: fix specialization bug, add &lt;code&gt;std/os/readline&lt;/code&gt; module.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;v2.3.4&lt;/code&gt;, 2021-11-26: &lt;code&gt;maybe&lt;/code&gt;-like types are already value types, but now also no longer need heap allocation if not nested (and &lt;code&gt;[Just(1)]&lt;/code&gt; uses the same heap space as &lt;code&gt;[1]&lt;/code&gt;), improved atomic refcounting (by Anton Lorenzen), improved specialization (by Steven Fontanella), various small fixes, fix build on freeBSD.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;v2.3.2&lt;/code&gt;, 2021-10-15: initial wasm support (use &lt;code&gt;--target=wasm&lt;/code&gt;, and install &lt;a href=&#34;https://emscripten.org/docs/getting_started/downloads.html&#34;&gt;emscripten&lt;/a&gt; and &lt;a href=&#34;https://wasmtime.dev/&#34;&gt;wasmtime&lt;/a&gt;), improved reuse specialization (by Anton Lorenzen), fix default color scheme for non-dark shells (#190), stack-less free and marking, add &lt;code&gt;--stack&lt;/code&gt; option, &lt;a href=&#34;https://musl.libc.org/&#34;&gt;musl&lt;/a&gt; support (use &lt;code&gt;--cc=musl-gcc&lt;/code&gt;), fix &lt;code&gt;vcpkg&lt;/code&gt; support on macOS with homebrew installed vcpkg, various bug fixes.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;v2.3.1&lt;/code&gt;, 2021-09-29: improved TRMC optimizations, and improved reuse (the &lt;a href=&#34;https://raw.githubusercontent.com/koka-lang/koka/master/test/bench/koka/rbtree.kk&#34;&gt;rbtree&lt;/a&gt; benchmark is faster as C++ now). Improved effect operation speed. Allow elision of &lt;code&gt;-&amp;gt;&lt;/code&gt; in anonymous function expressions (e.g. &lt;code&gt;xs.map( fn(x) x + 1 )&lt;/code&gt;) and operation clauses. Allow &lt;code&gt;ctl&lt;/code&gt; for &lt;code&gt;control&lt;/code&gt;. New default output directory as &lt;code&gt;.koka&lt;/code&gt; and improved command line options to be more in line with other compilers (with &lt;code&gt;-o&lt;/code&gt; specifying the final output, and &lt;code&gt;-e&lt;/code&gt; to execute the program).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;v2.3.0&lt;/code&gt;, 2021-09-20: many changes: new layout rule to &lt;a href=&#34;https://koka-lang.github.io/koka/doc/book.html#sec-layout&#34;&gt;elide braces&lt;/a&gt; and no more need to parenthesize &lt;code&gt;if&lt;/code&gt; and &lt;code&gt;match&lt;/code&gt; conditions (see the &lt;a href=&#34;https://raw.githubusercontent.com/koka-lang/koka/master/samples/basic/rbtree.kk&#34;&gt;&lt;code&gt;samples/basic/rbtree&lt;/code&gt;&lt;/a&gt; for an example of this), updated the JavaScript backend (&lt;code&gt;--target=js&lt;/code&gt;) to use standard ES6 modules and using the new &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt&#34;&gt;&lt;code&gt;BigInt&lt;/code&gt;&lt;/a&gt; for arbitrary precision integers, improved runtime layout with support for 128-bit arm CHERI, add the &lt;code&gt;std/num/int64&lt;/code&gt; module and &lt;code&gt;int64&lt;/code&gt; primitive type, add the &lt;a href=&#34;https://raw.githubusercontent.com/koka-lang/koka/master/test/bench/koka/binarytrees.kk&#34;&gt;binarytrees&lt;/a&gt; benchmark, initial support for parallel tasks (in &lt;code&gt;std/os/task&lt;/code&gt;), improved simplification and inlining giving much improved effect operations, updated isocline for the interactive environment.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;v2.2.1&lt;/code&gt;, 2021-09-05: improved optimization, initial parallel tasks, binary-trees benchmark, still slightly slower effect handling, upgrade isocline, fix minor bugs.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;v2.2.0&lt;/code&gt;, 2021-08-26: improved case-of-known simpification (by Rakshika B), improve cross-module specialization (by Steven Fontanella), initial borrowing annotations and improved reuse analysis (by Anton Lorenzen), improved line editing in the interactive environment, improved inlining. Note: due to the new inline phases, effect handling may currently be a tad slower in this release but will be improved for the next release.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koka-lang/koka/master/#older-release-notes&#34;&gt;Older release notes&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!--&#xA;&lt;img align=&#34;right&#34; width=&#34;200&#34; src=&#34;doc/system-logos.png&#34;&gt;&#xA;--&gt; &#xA;&lt;h1&gt;Install&lt;/h1&gt; &#xA;&lt;p&gt;Koka has &lt;a href=&#34;https://koka-lang.github.io/koka/doc/book.html&#34;&gt;binary installers&lt;/a&gt; for Windows (x64), macOS (x64, M1), Linux (x64, arm64), and FreeBSD (x64). For other platforms, you need to build the compiler from source.&lt;/p&gt; &#xA;&lt;h1&gt;Build from Source&lt;/h1&gt; &#xA;&lt;p&gt;Koka has few dependencies and should build from source without problems on most common platforms, e.g. Windows (including WSL), macOS, and Unix. The following programs are required to build Koka:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.haskellstack.org/&#34;&gt;Stack&lt;/a&gt; to run the Haskell compiler. Use &lt;code&gt;curl -sSL https://get.haskellstack.org/ | sh&lt;/code&gt; on Unix and macOS x64, or the binary &lt;a href=&#34;https://get.haskellstack.org/stable/windows-x86_64-installer.exe&#34;&gt;installer&lt;/a&gt; on Windows. On macOS M1, use &lt;code&gt;brew install haskell-stack --head&lt;/code&gt; (and see the &lt;a href=&#34;https://raw.githubusercontent.com/koka-lang/koka/master/#build-notes&#34;&gt;build notes&lt;/a&gt; below).&lt;/li&gt; &#xA; &lt;li&gt;Optional: &lt;a href=&#34;https://vcpkg.io/en/getting-started.html&#34;&gt;vcpkg&lt;/a&gt; to be able to link easily with C libraries. Use &lt;code&gt;brew install vcpkg&lt;/code&gt; on macOS. On other systems use the vcpkg &lt;a href=&#34;https://vcpkg.io/en/getting-started.html&#34;&gt;install&lt;/a&gt; instructions (Koka can find vcpkg automatically if installed to &lt;code&gt;~/vcpkg&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Optional: &lt;a href=&#34;http://nodejs.org&#34;&gt;nodejs&lt;/a&gt; if using the Javascript backend.&lt;/li&gt; &#xA; &lt;li&gt;Optional: &lt;a href=&#34;https://emscripten.org/docs/getting_started/downloads.html&#34;&gt;emscripten&lt;/a&gt; and &lt;a href=&#34;https://wasmtime.dev/&#34;&gt;wasmtime&lt;/a&gt; if using the Wasm backend.&lt;/li&gt; &#xA; &lt;li&gt;Optional: On Windows it is recommended to install the &lt;a href=&#34;https://llvm.org/builds&#34;&gt;clang&lt;/a&gt; C compiler, or the &lt;a href=&#34;https://visualstudio.microsoft.com/downloads/&#34;&gt;Visual Studio&lt;/a&gt; C compiler.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Now clone the repository and build the compiler as (note the &lt;code&gt;--recursive&lt;/code&gt; flag):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ git clone --recursive https://github.com/koka-lang/koka&#xA;$ cd koka&#xA;$ stack update&#xA;$ stack build&#xA;$ stack exec koka&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also use &lt;code&gt;stack build --fast&lt;/code&gt; to build a debug version of the compiler. Use &lt;code&gt;stack test --fast&lt;/code&gt; to run the test-suite.&lt;/p&gt; &#xA;&lt;p&gt;(See the &lt;a href=&#34;https://raw.githubusercontent.com/koka-lang/koka/master/#build-notes&#34;&gt;build notes&lt;/a&gt; below for building macOS M1, or if you have issues when running- or installing &lt;code&gt;stack&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;h2&gt;Create an Install Bundle&lt;/h2&gt; &#xA;&lt;p&gt;Koka can generate a binary install bundle that can be installed on the local machine:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ stack exec koka -- -e util/bundle&#xA;...&#xA;distribution bundle created.&#xA;  bundle : bundle/v2.3.9/koka-v2.3.9-linux-x64.tar.gz&#xA;  cc     : gcc&#xA;  version: v2.3.9&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This takes a while as it pre-compiles the standard libraries in three build variants (&lt;code&gt;debug&lt;/code&gt;, &lt;code&gt;drelease&lt;/code&gt; (release with debug info), and &lt;code&gt;release&lt;/code&gt;). After generating the bundle, you can install it locally as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ util/install.sh  bundle/v2.3.9/koka-v2.3.9-linux-x64.tar.gz&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(use &lt;code&gt;util/install.bat&lt;/code&gt; on Windows). After installation, you can now directly invoke &lt;code&gt;koka&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ koka --version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Koka is by default installed for the current user in &lt;code&gt;&amp;lt;prefix&amp;gt;/bin/koka&lt;/code&gt;, (with architecture specific files under &lt;code&gt;&amp;lt;prefix&amp;gt;/lib/koka/v2.x.x&lt;/code&gt; and libraries and samples under &lt;code&gt;&amp;lt;prefix&amp;gt;/share/koka/v2.x.x&lt;/code&gt;). On Unix and macOS the default prefix is &lt;code&gt;/usr/local&lt;/code&gt; while on Windows the default prefix is &lt;code&gt;%LOCALAPPDATA%\koka&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;It is also possible to generate installation packages for various Linux platforms (RHEL, Debian, Alpine, etc.). See the [readme][util/packaging] for further information.&lt;/p&gt; &#xA;&lt;h1&gt;Benchmarks&lt;/h1&gt; &#xA;&lt;p&gt;These are initial benchmarks of Koka v2 with &lt;a href=&#34;https://www.microsoft.com/en-us/research/publication/perceus-garbage-free-reference-counting-with-reuse/&#34;&gt;Perceus&lt;/a&gt; reference counting versus state-of-the-art memory reclamation implementations in various other languages. Since we compare across languages we need to interpret these results with care -- the results depend not only on memory reclamation but also on the different optimizations performed by each compiler and how well we can translate each benchmark to that particular language. We view these results therefore mostly as &lt;em&gt;evidence that the current Koka implementation of reference counting is viable and can be competitive&lt;/em&gt; and &lt;em&gt;not&lt;/em&gt; as a direct comparison of absolute performance between languages and systems.&lt;/p&gt; &#xA;&lt;p&gt;As such, we select here only benchmarks that stress memory allocation, and we tried to select mature comparison systems that use a range of memory reclamation techniques and are considered best-in-class. The systems we compare are, Koka 2.0.3 (compiling the generated C code with gcc 9.3.0), &lt;a href=&#34;https://ocaml.org&#34;&gt;OCaml&lt;/a&gt; 4.08.1, &lt;a href=&#34;https://www.haskell.org&#34;&gt;Haskell&lt;/a&gt; GHC 8.6.5, &lt;a href=&#34;https://swift.org/&#34;&gt;Swift&lt;/a&gt; 5.3, &lt;a href=&#34;https://www.java.com&#34;&gt;Java&lt;/a&gt; SE 15.0.1 with the Hotspot G1 collector, and &lt;a href=&#34;http://www.cplusplus.org&#34;&gt;C++&lt;/a&gt; gcc 9.3.0.&lt;/p&gt; &#xA;&lt;img align=&#34;right&#34; width=&#34;400&#34; src=&#34;https://raw.githubusercontent.com/koka-lang/koka/master/doc/bench-amd3600-nov-2020.png&#34; style=&#34;border:1px solid black&#34;&gt; &#xA;&lt;p&gt;The benchmarks are all available in &lt;a href=&#34;https://raw.githubusercontent.com/koka-lang/koka/master/test/bench&#34;&gt;&lt;code&gt;test/bench&lt;/code&gt;&lt;/a&gt; (see the readme there for build instructions), and all stress memory allocation with little computation: &lt;code&gt;rbtree&lt;/code&gt; (inserts 42 million items into a red-black tree), &lt;code&gt;rbtree-ck&lt;/code&gt; (a variant of &lt;code&gt;rbtree&lt;/code&gt; that keeps a list of every 5th subtree and thus shares many subtrees), &lt;code&gt;deriv&lt;/code&gt; (the symbolic derivative of a large expression), &lt;code&gt;nqueens&lt;/code&gt; (calculates all solutions for the n-queens problem of size 13 into a list, and returns the length of that list where the solution lists share many sub-solutions), and &lt;code&gt;cfold&lt;/code&gt; (constant-folding over a large symbolic expression).&lt;/p&gt; &#xA;&lt;p&gt;Note: in C++, without automatic memory management, many benchmarks are difficult to express directly as they use persistent and partially shared data structures. To implement these faithfully would essentially require manual reference counting. Instead, we use C++ as our performance baseline: we either use in-place updates without supporting persistence (as in &lt;code&gt;rbtree&lt;/code&gt; which uses &lt;code&gt;std::map&lt;/code&gt;) or we do not reclaim memory at all (as in &lt;code&gt;deriv&lt;/code&gt;, &lt;code&gt;nqueens&lt;/code&gt;, and &lt;code&gt;cfold&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;The execution times and peak working set averaged over 10 runs and normalized to Koka are in the figure on the right (on a 3.8Ghz AMD3600XT on Ubuntu 20.04, Nov 2020).&lt;/p&gt; &#xA;&lt;p&gt;We can see that even though Koka has currently few optimizations besides the reference counting ones, it performs very well compared to these mature systems, often outperforming by a significant margin -- both in execution time and peak working set. Clearly, these benchmarks are allocation heavy but it is encouraging to see this initial performance from Koka.&lt;/p&gt; &#xA;&lt;p&gt;A full discussion of these benchmarks and systems can be found in the &lt;a href=&#34;https://www.microsoft.com/en-us/research/publication/perceus-garbage-free-reference-counting-with-reuse/&#34;&gt;Perceus&lt;/a&gt; report.&lt;/p&gt; &#xA;&lt;h1&gt;Tasks&lt;/h1&gt; &#xA;&lt;p&gt;Please help develop Koka: there are many opportunities to improve Koka or do research with Koka. We need:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Emacs (partially done) and Vim syntax highlighting.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Add more samples, improve documentation, landing page etc. Make it easier for people to contribute.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Many library modules are incomplete (like &lt;code&gt;std/os/file&lt;/code&gt;) or missing (like &lt;code&gt;std/data/map&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Update file and os primitives for the JavaScript backend.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Run the full test suite.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Run the Bayesian probalistic machine learning program with large parameters.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Functions with a pattern match in the argument (by Steven Fontanella).&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Support &lt;code&gt;int64&lt;/code&gt; operations&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;More advanced projects:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Update the JavaScript backend to 1) use modern modules instead of amdefine, 2) use the new bigints instead of bigint.js, and 3) add support for int64. (landed in the &lt;code&gt;dev&lt;/code&gt; branch)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Port &lt;code&gt;std/text/regex&lt;/code&gt; from v1 (using PCRE)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; A language server for Visual Studio Code and Atom. Koka can already generate a typed &lt;a href=&#34;https://raw.githubusercontent.com/koka-lang/koka/master/src/Syntax/RangeMap.hs&#34;&gt;range map&lt;/a&gt; so this should be managable. Partially done: see PR #100 (by @fwcd) -- it just needs work on packaging it to make it easy to build and install as part of the Koka installer.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Package management of Koka modules.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Compile to WASM (using emscripten on the current C backend)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Extend TRMC to include (1) return results with pairs (like &lt;code&gt;unzip&lt;/code&gt; or &lt;code&gt;partition&lt;/code&gt;), (2) associative functions (like &lt;code&gt;+&lt;/code&gt; in &lt;code&gt;length&lt;/code&gt;), and (3) mutually recursive functions.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Improve compilation of local state to use local variables directly (in C) without allocation. Tricky though due to multiple resumptions.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Improve performance of array/mutable reference programming. Koka is has great performance for algebraic datatypes but lags when using more imperative array algorithms. This requires better integration with the reference counting (faster in-place update for vectors) and integration local mutable references.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; To support optimal Btree&#39;s we need &lt;em&gt;mutable fields&lt;/em&gt; in constructors, and perhaps intrusive vector fields.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; The current parallel task support is very basic; we need a great work-stealing thread pool, LVar&#39;s etc.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Expose the &#34;bytes&#34; primitive data together with views..&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Improve C code generation by identifying output that could be better; also in effectful code we generate many join-points (see [9]), can we increase the sharing/reduce the extra code.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; The compiler always analyses module dependencies and builds any needed dependencies. The current code (in &lt;code&gt;src/Compiler/Compile.hs&lt;/code&gt;) is not great and it would be nice to factorize the &#34;make&#34; functionality out and also allow for parallel builds.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Master/PhD level:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Better language level FBIP support with guaranteed datatype matching, automatic derivative and visitor generation.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Can we use C++ exceptions to implement &#34;zero-cost&#34; &lt;code&gt;if yielding() ...&lt;/code&gt; branches and remove the need join points (see [9]).&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Float up &lt;code&gt;open&lt;/code&gt; calls to improve effect handling (worked on by Naoya Furudono)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Formalize opening and closing effect row types (worked on by Kazuki Ikemori)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Currently being worked on:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Various standard optimizations like case-of-case, join points, case-of-known constructor, etc.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Implement inline specialization where functions like &lt;code&gt;map&lt;/code&gt;, &lt;code&gt;fold&lt;/code&gt; etc get specialized for the function with which they are called. This is an important optimization for functional style languages to reduce the allocation of lambda&#39;s. (contact: Steven Fontanella)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Borrowing analysis for Perceus and improved reuse analysis. (contact: Anton Lorenzen)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Improve case-of-known simplification with shape information&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The following is the immediate todo list to be completed in the coming months:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Port &lt;code&gt;std/async&lt;/code&gt; (using &lt;code&gt;libuv&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Proper overloading with (a form of) type classes. (in design phase).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Contact me if you are interested in tackling some of these :-)&lt;/p&gt; &#xA;&lt;h1&gt;Build Notes&lt;/h1&gt; &#xA;&lt;h2&gt;Branches&lt;/h2&gt; &#xA;&lt;p&gt;The main development branches are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;master&lt;/code&gt;: latest stable version.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;dev&lt;/code&gt;: current development branch -- submit PR&#39;s to this branch.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;v1-master&lt;/code&gt;: last stable version of Koka v1: this is Koka with the Javascript (and C#) backend which does not use evidence translation. This version supports &lt;code&gt;std/async&lt;/code&gt; and should compile examples from published papers.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Building on macOS M1&lt;/h2&gt; &#xA;&lt;p&gt;Currently (Dec 2021) you need to use &lt;code&gt;brew install haskell-stack --head&lt;/code&gt; to get the latest &lt;code&gt;2.7.4&lt;/code&gt; version of stack. (Have patience as the cabal install step takes about 20 min). Moreover, you need to add the &lt;code&gt;brew&lt;/code&gt; installed LLVM to your path afterwards, or otherwise stack cannot find the LLVM tools. Add the following to your &lt;code&gt;~/.zshrc&lt;/code&gt; script and open an fresh prompt:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;export PATH=/opt/homebrew/opt/llvm/bin:$PATH&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;!--&#xA;Moreover, sometimes `stack` segfaults but running it inside `bash` seems to resolve the issue.&#xA;Also, we need to tell stack to use the system installed ghc and skip the version check as&#xA;it can currently not install GHC for arm64 yet:&#xA;```&#xA;bash:~$ git clone --recursive https://github.com/koka-lang/koka&#xA;bash:~$ cd koka&#xA;bash:~/koka$ stack --system-ghc --skip-ghc-check build&#xA;bash:~/koka$ stack --system-ghc --skip-ghc-check exec koka&#xA;```&#xA;&#xA;and pass the `--system-ghc` flag to create an installation bundle as well:&#xA;```&#xA;bash:~/koka$ stack --system-ghc --skip-ghc-check exec koka -- -e util/bundle -- --system-ghc&#xA;```&#xA;--&gt; &#xA;&lt;h2&gt;Building with Cabal&lt;/h2&gt; &#xA;&lt;p&gt;Some platforms (like Linux arm64 and FreeBSD) do not always support &lt;code&gt;stack&lt;/code&gt; well. In these cases we can also use &lt;code&gt;ghc&lt;/code&gt; and &lt;code&gt;cabal&lt;/code&gt; directly. Install these packages as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ sudo apt update&#xA;$ sudo apt install ghc cabal-install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On macOS (x64 and arm64) we use &lt;code&gt;brew&lt;/code&gt; instead:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ brew install pkg-config ghc cabal-install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On FreeBSD, use &lt;code&gt;pkg&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ sudo pkg update&#xA;$ sudo pkg install ghc hs-cabal-install   # or: hs-haskell-platform&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Optionally, install &lt;code&gt;vcpkg&lt;/code&gt; as well. If you install this in the &lt;code&gt;~/vcpkg&lt;/code&gt; directory Koka will find it automatically when needed:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;~$ git clone https://github.com/microsoft/vcpkg&#xA;~$ ./vcpkg/bootstrap-vcpkg.sh&#xA;~$ vcpkg/vcpkg install pcre&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We can now build the compiler using &lt;code&gt;cabal&lt;/code&gt; as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;~$ git clone --recursive https://github.com/koka-lang/koka&#xA;~$ cd koka&#xA;~/koka$ cabal new-update&#xA;~/koka$ cabal new-build&#xA;~/koka$ cabal new-run koka&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We can also run tests as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;~/koka$ cabal new-run koka-test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or create an installer:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;~/koka$ cabal new-run koka -- -e util/bundle&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Building with minbuild&lt;/h2&gt; &#xA;&lt;p&gt;If neither &lt;code&gt;stack&lt;/code&gt; nor &lt;code&gt;cabal&lt;/code&gt; are functional, you may try to run the minimal build script to build Koka:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;~/koka$ ./util/minbuild.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;which directly invokes &lt;code&gt;ghc&lt;/code&gt; to build the compiler. You can create an install bundle from a minbuild as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;~/koka$ .koka/minbuild/koka -e util/bundle.kk -- --koka=.koka/minbuild/koka&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Windows C Compilers&lt;/h2&gt; &#xA;&lt;p&gt;The Koka compiler on Windows requires a C compiler. By default when using &lt;code&gt;stack exec koka&lt;/code&gt; the C compiler supplied with &lt;code&gt;ghc&lt;/code&gt; is used (&lt;code&gt;mingw&lt;/code&gt;) but that is only visible within a stack environmet.&lt;/p&gt; &#xA;&lt;p&gt;It is therefore recommended to install the &lt;a href=&#34;https://llvm.org/builds&#34;&gt;clang&lt;/a&gt; compiler for Windows (which is automatically installed when running &lt;code&gt;util/install.bat&lt;/code&gt;). However, Koka can also use the Microsoft Visual C++ compiler (&lt;code&gt;cl&lt;/code&gt;) if you run &lt;code&gt;koka&lt;/code&gt; from a &lt;a href=&#34;https://raw.githubusercontent.com/koka-lang/koka/master/vsprompt&#34;&gt;Visual Studio x64 toolset&lt;/a&gt; command prompt (in order to link correctly with the Windows system libraries).&lt;/p&gt; &#xA;&lt;p&gt;Generally, for Koka code, &lt;code&gt;mingw&lt;/code&gt; (&lt;code&gt;gcc&lt;/code&gt;) optimizes best, closely followed &lt;code&gt;clang-cl&lt;/code&gt;. On a 3.8Gz AMD 3600XT, with &lt;code&gt;mingw&lt;/code&gt; 7.2.0, &lt;code&gt;clang-cl&lt;/code&gt; 11.0.0, and &lt;code&gt;cl&lt;/code&gt; 19.28 we get:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ stack exec out\v2.0.5\mingw-release\test_bench_koka_rbtree -- --kktime&#xA;420000&#xA;info: elapsed: 0.624s, user: 0.625s, sys: 0.000s, rss: 163mb&#xA;&#xA;$ out\v2.0.5\clang-cl-release\test_bench_koka_rbtree --kktime&#xA;420000&#xA;info: elapsed: 0.727s, user: 0.734s, sys: 0.000s, rss: 164mb&#xA;&#xA;$ out\v2.0.5\cl-release\test_bench_koka_rbtree --kktime&#xA;420000&#xA;info: elapsed: 1.483s, user: 1.484s, sys: 0.000s, rss: 164mb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Older Release Notes&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;v2.1.9&lt;/code&gt;, 2021-06-23: initial support for cross-module specialization (by Steven Fontanella).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;v2.1.8&lt;/code&gt;, 2021-06-17: initial support for macOS M1 and Linux arm64, improved readline, minor fixes.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;v2.1.6&lt;/code&gt;, 2021-06-10: initial support for shallow resumptions, fix space leak with vectors, allow &lt;code&gt;gcc&lt;/code&gt; with &lt;code&gt;--fasan&lt;/code&gt;, improved &lt;code&gt;vcpkg&lt;/code&gt; support, add &lt;code&gt;--fstdalloc&lt;/code&gt; flag, improved VS code syntax highlighting, improved &lt;code&gt;valgrind&lt;/code&gt; support, added &lt;code&gt;--no-optimize&lt;/code&gt; flag for extended debug information.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;v2.1.4&lt;/code&gt;, 2021-05-31: remove dependency on cmake, support library linking, support vckpg, updated &lt;code&gt;std/text/regex&lt;/code&gt;, improved Windows installer with &lt;code&gt;clang&lt;/code&gt; install included, remove dependency on Visual Studio on Windows, improved &lt;code&gt;--fasan&lt;/code&gt; support, fixed space leak on boxed value types, use signed &lt;code&gt;size_t&lt;/code&gt; internally, various small bug fixes.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;v2.1.2&lt;/code&gt;, 2021-05-01: various bug fixes, allow pattern bindings in parameters of anonymous functions (by Steven Fontanella), initial Emacs syntax highlighting (by Kamoii).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;v2.1.1&lt;/code&gt;, 2021-03-08: bug fixes, use right-associative (++) for string- and list append (instead of (+)), improved internal string handling.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;v2.0.16&lt;/code&gt;, 2021-02-14: bug fixes, fix short-circuit evaluation of logical operations, improved utf-8 handling.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;v2.0.14&lt;/code&gt;, 2020-12-11: bug fixes, improved var escape checking.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;v2.0.12&lt;/code&gt;, 2020-12-02: syntax highlighting support for VS Code and Atom, improved uninstall, more samples.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;v2.0.9&lt;/code&gt;, 2020-11-27: now with binary &lt;a href=&#34;https://github.com/koka-lang/koka/releases&#34;&gt;releases&lt;/a&gt; for Windows, macOS, and Linux.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;v2.0.7&lt;/code&gt;, 2020-11-23: more small fixes, improved scoped handlers, improved higher-rank type propagation, more samples.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;v2.0.5&lt;/code&gt;, 2020-11-15: many bug fixes and improvements. Improved codegen, named handlers, added samples, docker support, direct C compilation, local install support.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;v2.0.0&lt;/code&gt;, 2020-08-21: initial v2 release.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;References&lt;/h1&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Daniel Hillerström, and Sam Lindley. “Liberating Effects with Rows and Handlers.” In &lt;em&gt;Proceedings of the 1st International Workshop on Type-Driven Development&lt;/em&gt;, 15--27. TyDe 2016. Nara, Japan. 2016. doi:&lt;a href=&#34;https://dx.doi.org/10.1145/2976022.2976033&#34;&gt;10.1145/2976022.2976033&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Daan Leijen. “Koka: Programming with Row Polymorphic Effect Types.” In &lt;em&gt;Mathematically Structured Functional Programming 2014&lt;/em&gt;. EPTCS. Mar. 2014. arXiv:&lt;a href=&#34;http://arxiv.org/abs/1406.2061&#34;&gt;1406.2061&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Daan Leijen. &lt;em&gt;Algebraic Effects for Functional Programming&lt;/em&gt;. MSR-TR-2016-29. Microsoft Research. Aug. 2016. &lt;a href=&#34;https://www.microsoft.com/en-us/research/publication/algebraic-effects-for-functional-programming&#34;&gt;https://www.microsoft.com/en-us/research/publication/algebraic-effects-for-functional-programming&lt;/a&gt;. Extended version of [4].&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Daan Leijen. “Type Directed Compilation of Row-Typed Algebraic Effects.” In &lt;em&gt;Proceedings of Principles of Programming Languages (POPL’17)&lt;/em&gt;. Paris, France. Jan. 2017.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Nicolas Wu, Tom Schrijvers, and Ralf Hinze. “Effect Handlers in Scope.” In &lt;em&gt;Proceedings of the 2014 ACM SIGPLAN Symposium on Haskell&lt;/em&gt;, 1--12. Haskell ’14. ACM, New York, NY, USA. 2014. doi:&lt;a href=&#34;https://dx.doi.org/10.1145/2633357.2633358&#34;&gt;10.1145/2633357.2633358&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Ningning Xie, Jonathan Brachthäuser, Daniel Hillerström, Philipp Schuster, Daan Leijen. “Effect Handlers, Evidently” The 25th ACM SIGPLAN International Conference on Functional Programming (ICFP), August 2020. doi:&lt;a href=&#34;https://doi.org/10.1145/3408981&#34;&gt;10.1145/3408981&lt;/a&gt;, &lt;a href=&#34;https://www.microsoft.com/en-us/research/uploads/prod/2020/07/evidently-with-proofs-5f0b7d860b387.pdf&#34;&gt;pdf&lt;/a&gt;. See also [9] which improves upon this work.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Ningning Xie and Daan Leijen. “Effect Handlers in Haskell, Evidently” The 13th ACM SIGPLAN International Haskell Symposium, August 2020. &lt;a href=&#34;https://www.microsoft.com/en-us/research/uploads/prod/2020/07/effev.pdf&#34;&gt;pdf&lt;/a&gt; See also the &lt;a href=&#34;https://github.com/xnning/EvEff&#34;&gt;Ev.Eff&lt;/a&gt; and &lt;a href=&#34;https://github.com/xnning/MpEff&#34;&gt;Mp.Eff&lt;/a&gt; repositories.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Alex Reinking, Ningning Xie, Leonardo de Moura, and Daan Leijen: “ Perceus: Garbage Free Reference Counting with Reuse” MSR-TR-2020-42, Nov 22, 2020. Distinguished paper at PLDI&#39;21. &lt;a href=&#34;https://www.microsoft.com/en-us/research/publication/perceus-garbage-free-reference-counting-with-reuse/&#34;&gt;pdf&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Ningning Xie and Daan Leijen. “ Generalized Evidence Passing for Effect Handlers” In The 26th ACM SIGPLAN International Conference on Functional Programming (ICFP), August 2021. Also as MSR-TR-2021-5, Mar, 2021. &lt;a href=&#34;https://www.microsoft.com/en-us/research/publication/generalized-evidence-passing-for-effect-handlers/&#34;&gt;pdf&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Anton Lorenzen and Daan Leijen. “ Reference Counting with Frame-Limited Reuse” Microsoft Research technical report MSR-TR-2021-30, Nov 2021. &lt;a href=&#34;https://www.microsoft.com/en-us/research/publication/reference-counting-with-frame-limited-reuse-extended-version/&#34;&gt;pdf&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
  <entry>
    <title>input-output-hk/ouroboros-network</title>
    <updated>2022-05-29T01:43:13Z</updated>
    <id>tag:github.com,2022-05-29:/input-output-hk/ouroboros-network</id>
    <link href="https://github.com/input-output-hk/ouroboros-network" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An implementation of the Ouroboros family of consensus algorithms, with its networking support&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Ouroboros-Network&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;io-sim&lt;/code&gt; - &lt;code&gt;IOSim&lt;/code&gt; simulator monad which supports asynchronous exceptions, &lt;code&gt;STM&lt;/code&gt; transactions and &lt;code&gt;async&lt;/code&gt; interface, timers.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;io-classes&lt;/code&gt; - type classes, all of them have instance for both &lt;code&gt;IOSim&lt;/code&gt; and &lt;code&gt;IO&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;typed-protocols&lt;/code&gt; - session type framework with support of &lt;a href=&#34;https://en.wikipedia.org/wiki/Protocol_pipelining&#34;&gt;protocol pipelining&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;See 45min Haskell eXchange 2019 &lt;a href=&#34;https://skillsmatter.com/skillscasts/14633-45-minute-talk-by-duncan-coutts&#34;&gt;talk&lt;/a&gt; by @dcoutts.&lt;/li&gt; &#xA;   &lt;li&gt;See three 50min Monadic Party 2019 workshop talks by @coot: &lt;a href=&#34;https://www.youtube.com/watch?v=j8gza2L61nM&#34;&gt;Part 1&lt;/a&gt;, &lt;a href=&#34;https://www.youtube.com/watch?v=oV6KSl1srL8&#34;&gt;Part 2&lt;/a&gt;, &lt;a href=&#34;https://www.youtube.com/watch?v=nOIQCRPwmPA&#34;&gt;Part 3&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ouroboros-network&lt;/code&gt;- ouroboros network package which implements protocols which to run ouroboros family of protocols, multiplexing layer.&lt;/li&gt; &#xA; &lt;li&gt;The &lt;a href=&#34;https://github.com/input-output-hk/cardano-byron-proxy&#34;&gt;&lt;code&gt;byron-proxy&lt;/code&gt;&lt;/a&gt; is a network protocol proxy between Byron and Shelley. It now lives in a separate repository.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Ouroboros-Network Documentation&lt;/h2&gt; &#xA;&lt;p&gt;We have two documents which describe various levels of the networking layer of the Cardano Shelley implementation:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://hydra.iohk.io/job/Cardano/ouroboros-network/native.network-docs.x86_64-linux/latest/download/1&#34;&gt;Introduction to the design of Data Diffusion and Networking of Cardano Shelley&lt;/a&gt;&lt;/p&gt; &lt;p&gt;This document explains the technical requirements and key constraints for the networking layer of the &lt;em&gt;Cardano Shelley&lt;/em&gt; implementation of &lt;em&gt;Ouroboros Praos&lt;/em&gt;. This is a design document.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://hydra.iohk.io/job/Cardano/ouroboros-network/native.network-docs.x86_64-linux/latest/download/2&#34;&gt;The Shelley Networking Protocol&lt;/a&gt;&lt;/p&gt; &lt;p&gt;This document is a technical specification of the networking protocol. It includes serialisation formats, necessary details of multiplexer and technical specifications of mini-protocols used by either &lt;em&gt;node-to-node&lt;/em&gt; and &lt;em&gt;node-to-client&lt;/em&gt; flavours of the protocol.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://input-output-hk.github.io/ouroboros-network/&#34;&gt;Haddock documentation&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://docs.cardano.org/en/latest/&#34;&gt;Official Cardano Documentation&lt;/a&gt;&lt;/p&gt; &lt;p&gt;Specifically the section &#34;Explore Cardano&#34; is helpful, since it talks about the &lt;a href=&#34;https://docs.cardano.org/explore-cardano/cardano-architecture/overview&#34;&gt;Cardano Architecture&lt;/a&gt;, &lt;a href=&#34;https://docs.cardano.org/explore-cardano/cardano-design-rationale&#34;&gt;Cardano Design Rationale&lt;/a&gt;, the &lt;a href=&#34;https://docs.cardano.org/explore-cardano/cardano-network/about-the-cardano-network&#34;&gt;Cardano Network&lt;/a&gt;, etc. Although the Cardano documentation is less detailed, it is a good place to start and refresh some more basic concepts about Cardano.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Ouroboros-Network API&lt;/h2&gt; &#xA;&lt;p&gt;The API consists of three layers:&lt;/p&gt; &#xA;&lt;p&gt;• mini-protocol api&#39;s, which are GADTs for each mini-protocol under &lt;code&gt;Ouroboros.Network.Protocol&lt;/code&gt;; this hides heavy type machinery of session types. One only needs the typed &lt;code&gt;Peer&lt;/code&gt; type when one is using &lt;code&gt;runPeer&lt;/code&gt; or &lt;code&gt;runPeerPipelined&lt;/code&gt; function and each protocol exposes a function to create it (e.g. &lt;code&gt;Ouroboros.Network.Protocol.ChainSync.Client.chainSyncClientPeer&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;p&gt;• callback &lt;code&gt;ptcl -&amp;gt; channel -&amp;gt; m ()&lt;/code&gt; where &lt;code&gt;ptcl&lt;/code&gt; is enumeration for each mini-protocol, this is either &lt;code&gt;NodeToNodeProtocols&lt;/code&gt; or &lt;code&gt;NodeToClientProtocols&lt;/code&gt;. The callback is wrapped in &lt;code&gt;OuroborosApplication&lt;/code&gt; GADT which allows to differentiate the initiator / responder (or client / server) callbacks.&lt;/p&gt; &#xA;&lt;p&gt;• versioning which is a map from version numbers to the above callbacks and version data (the tricky part here is that version data type can be different between different versions; there is a simple way of building this map using a semigroup). You can use &lt;code&gt;simpleSingletonVersion&lt;/code&gt; if your application does not depend on negotiated version data. However, &lt;code&gt;Ouroboros.Network.NodeToNode&lt;/code&gt; and &lt;code&gt;Ouroboros.Network.NodeToClient&lt;/code&gt; expose &lt;code&gt;V1&lt;/code&gt; api which hides versioning from the caller.&lt;/p&gt; &#xA;&lt;h2&gt;Demo applications&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/input-output-hk/ouroboros-network/wiki/Ouroboros-Network-Demo&#34;&gt;demo-chain-sync&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/input-output-hk/ouroboros-network/wiki/cardano-ping&#34;&gt;cardano-ping&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/input-output-hk/ouroboros-network/raw/master/network-mux/demo/mux-demo.hs&#34;&gt;mux-demo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/input-output-hk/ouroboros-network/raw/master/ouroboros-network-framework/demo/ping-pong.hs&#34;&gt;demo-ping-pong&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/input-output-hk/ouroboros-network/raw/master/Win32-network/demo/named-pipe-demo.hs&#34;&gt;named-pipe-demo&lt;/a&gt; (Windows only)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/input-output-hk/ouroboros-network/raw/master/ntp-client/demo/Main.hs&#34;&gt;demo-ntp-client&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Instructions&lt;/summary&gt; To run a demo type: &#xA; &lt;pre&gt;&lt;code&gt;cabal run &amp;lt;DEMO_NAME&amp;gt; --&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;After &lt;code&gt;--&lt;/code&gt; you will need to pass arguments, when a demo is run without arguments it will specify what arguments it needs.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h1&gt;Ouroboros-Consensus&lt;/h1&gt; &#xA;&lt;p&gt;Consensus layer of the family Ouroboros blockchain protocols.&lt;/p&gt; &#xA;&lt;h2&gt;Ouroboros-Consensus Documentation&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;ouroboros-consensus/docs&lt;/code&gt; folder contains documentation about the consensus layer. Start with the &lt;a href=&#34;https://github.com/input-output-hk/ouroboros-network/ouroboros-consensus/docs/Contributing.md&#34;&gt;README.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://hydra.iohk.io/job/Cardano/ouroboros-network/native.consensus-docs.x86_64-linux/latest/download/1&#34;&gt;The Cardano Consensus and Storage Layer&lt;/a&gt;&lt;/p&gt; &lt;p&gt;This technical report explains the design of the consensus and storage layer.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Formatting&lt;/h2&gt; &#xA;&lt;p&gt;The consensus team uses &lt;code&gt;stylish-haskell&lt;/code&gt; &amp;gt;= 0.11.0.0 to format its code. This is enforced by CI.&lt;/p&gt; &#xA;&lt;p&gt;Either enable editor integration or call the script used by CI itself:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./scripts/ci/check-stylish.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When using Nix, you can use the following command, which will build and use the right version of &lt;code&gt;stylish-haskell&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;nix-shell --run ./scripts/ci/check-stylish.sh&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>ucsd-progsys/liquid-fixpoint</title>
    <updated>2022-05-29T01:43:13Z</updated>
    <id>tag:github.com,2022-05-29:/ucsd-progsys/liquid-fixpoint</id>
    <link href="https://github.com/ucsd-progsys/liquid-fixpoint" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Horn Clause Constraint Solving for Liquid Types&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Liquid Fixpoint &lt;a href=&#34;https://hackage.haskell.org/package/liquid-fixpoint&#34;&gt;&lt;img src=&#34;https://img.shields.io/hackage/v/liquid-fixpoint.svg?sanitize=true&#34; alt=&#34;Hackage&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://packdeps.haskellers.com/feed?needle=liquid-fixpoint&#34;&gt;&lt;img src=&#34;https://img.shields.io/hackage-deps/v/liquid-fixpoint.svg?sanitize=true&#34; alt=&#34;Hackage-Deps&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://circleci.com/gh/ucsd-progsys/liquid-fixpoint&#34;&gt;&lt;img src=&#34;https://circleci.com/gh/ucsd-progsys/liquid-fixpoint.svg?style=svg&#34; alt=&#34;CircleCI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/ucsd-progsys/liquid-fixpoint/actions/workflows/hlint-ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/ucsd-progsys/liquid-fixpoint/actions/workflows/hlint-ci.yml/badge.svg?sanitize=true&#34; alt=&#34;hlint&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;This package implements a Horn-Clause/Logical Implication constraint solver used for various Liquid Types. The solver uses SMTLIB2 to implement an algorithm similar to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://users.soe.ucsc.edu/~cormac/papers/fme01.pdf&#34;&gt;Houdini&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://swt.informatik.uni-freiburg.de/berit/papers/boolean-and-cartesian-....pdf&#34;&gt;Cartesian predicate abstraction&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;In addition to the .cabal dependencies you require an SMTLIB2 compatible solver binary:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Z3Prover/z3&#34;&gt;Z3&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cvc4.github.io/&#34;&gt;CVC4&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://mathsat.fbk.eu/download.html&#34;&gt;MathSat&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If on Windows, please make sure to place the binary and any associated DLLs somewhere in your path.&lt;/p&gt; &#xA;&lt;h2&gt;How To Build and Install&lt;/h2&gt; &#xA;&lt;p&gt;Simply do:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ git clone https://github.com/ucsd-progsys/liquid-fixpoint.git&#xA;$ cd liquid-fixpoint&#xA;$ stack install # alternatively, use `cabal install`.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A reproducible Nix environment is provided as well:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Build with:&#xA;$ nix-shell --pure --run &#34;stack build&#34;&#xA;&#xA;# Test with:&#xA;$ nix-shell --pure --run &#34;stack test&#34;&#xA;&#xA;# Run with:&#xA;$ nix-shell --pure --run &#34;stack exec fixpoint -- tests/pos/adt.fq&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Using SMTLIB-based SMT Solvers&lt;/h2&gt; &#xA;&lt;p&gt;You can use one of several SMTLIB2 compliant solvers, by:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;fixpoint --solver=z3 path/to/file.hs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Currently, we support&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;* Z3&#xA;* CVC4&#xA;* MathSat&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;&#34;Horn&#34; Format&lt;/h2&gt; &#xA;&lt;p&gt;See the examples in &lt;code&gt;tests/horn/{pos, neg}&lt;/code&gt; eg&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ucsd-progsys/liquid-fixpoint/develop/tests/horn/pos/ple_sum.smt2&#34;&gt;sum&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ucsd-progsys/liquid-fixpoint/develop/tests/horn/pos/ple_list00.smt2&#34;&gt;list00&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ucsd-progsys/liquid-fixpoint/develop/tests/horn/neg/ple_list03.smt2&#34;&gt;list03&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For how to write VCs &#34;by hand&#34;.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://arxiv.org/abs/2010.07763&#34;&gt;this tutorial&lt;/a&gt; with &lt;a href=&#34;https://github.com/ranjitjhala/sprite-lang&#34;&gt;accompanying code&lt;/a&gt; for an example of how to generate Horn queries.&lt;/p&gt; &#xA;&lt;p&gt;The main datatypes are described in &lt;a href=&#34;https://raw.githubusercontent.com/ucsd-progsys/liquid-fixpoint/develop/src/Language/Fixpoint/Horn/Types.hs&#34;&gt;src/Language/Fixpoint/Horn/Types.hs&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Configuration Management&lt;/h2&gt; &#xA;&lt;p&gt;It is very important that the version of Liquid Fixpoint be maintained properly.&lt;/p&gt; &#xA;&lt;p&gt;Suppose that the current version of Liquid Haskell is &lt;code&gt;A.B.C.D&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;After a release to hackage is made, if any of the components &lt;code&gt;B&lt;/code&gt;, &lt;code&gt;C&lt;/code&gt;, or &lt;code&gt;D&lt;/code&gt; are missing, they shall be added and set to &lt;code&gt;0&lt;/code&gt;. Then the &lt;code&gt;D&lt;/code&gt; component of Liquid Fixpoint shall be incremented by &lt;code&gt;1&lt;/code&gt;. The version of Liquid Fixpoint is now &lt;code&gt;A.B.C.(D + 1)&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The first time a new function or type is exported from Liquid Fixpoint, if any of the components &lt;code&gt;B&lt;/code&gt;, or &lt;code&gt;C&lt;/code&gt; are missing, they shall be added and set to &lt;code&gt;0&lt;/code&gt;. Then the &lt;code&gt;C&lt;/code&gt; component shall be incremented by &lt;code&gt;1&lt;/code&gt;, and the &lt;code&gt;D&lt;/code&gt; component shall stripped. The version of Liquid Fixpoint is now &lt;code&gt;A.B.(C + 1)&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The first time the signature of an exported function or type is changed, or an exported function or type is removed (this includes functions or types that Liquid Fixpoint re-exports from its own dependencies), if the &lt;code&gt;B&lt;/code&gt; component is missing, it shall be added and set to &lt;code&gt;0&lt;/code&gt;. Then the &lt;code&gt;B&lt;/code&gt; component shall be incremented by &lt;code&gt;1&lt;/code&gt;, and the &lt;code&gt;C&lt;/code&gt; and &lt;code&gt;D&lt;/code&gt; components shall be stripped. The version of Liquid Fixpoint is now &lt;code&gt;A.(B + 1)&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The &lt;code&gt;A&lt;/code&gt; component shall be updated at the sole discretion of the project owners.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;It is recommended to use the &lt;a href=&#34;https://hackage.haskell.org/package/bumper&#34;&gt;Bumper&lt;/a&gt; utility to manage the versioning of Liquid Fixpoint. Bumper will automatically do the correct update to the cabal file. Additionally, it will update any packages that you have the source for that depend on Liquid Fixpoint.&lt;/p&gt; &#xA;&lt;p&gt;To update Liquid Fixpoint and Liquid Haskell, first clone Liquid Haskell and Liquid Fixpoint to a common location:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/ucsd-progsys/liquidhaskell.git&#xA;git clone https://github.com/ucsd-progsys/liquid-fixpoint.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To increment the &lt;code&gt;D&lt;/code&gt; component of Liquid Fixpoint:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./path/to/bumper -3 liquid-fixpoint&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will update the &lt;code&gt;D&lt;/code&gt; component of Liquid Fixpoint. If necessary, this will update the &lt;code&gt;Build-Depends&lt;/code&gt; of Liquid Haskell. If the &lt;code&gt;Build-Depends&lt;/code&gt; was updated, Liquid Haskell&#39;s &lt;code&gt;D&lt;/code&gt; component will be incremented.&lt;/p&gt; &#xA;&lt;p&gt;To increment the &lt;code&gt;C&lt;/code&gt; component of Liquid Fixpoint, and strip the &lt;code&gt;D&lt;/code&gt; component:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./path/to/bumper --minor liquid-fixpoint&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;As before, this will update Liquid Fixpoint and, if necessary, Liquid Haskell.&lt;/p&gt; &#xA;&lt;p&gt;To increment the &lt;code&gt;B&lt;/code&gt; component of Liquid Fixpoint, and strip the &lt;code&gt;D&lt;/code&gt; and &lt;code&gt;C&lt;/code&gt; components:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./path/to/bumper --major liquid-fixpoint&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;As before, this will update Liquid Fixpoint and, if necessary, Liquid Haskell&lt;/p&gt; &#xA;&lt;h2&gt;SMTLIB2 Interface&lt;/h2&gt; &#xA;&lt;p&gt;There is a new SMTLIB2 interface directly from Haskell:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Language.Fixpoint.SmtLib2&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See &lt;code&gt;tests/smt2/{Smt.hs, foo.smt2}&lt;/code&gt; for an example of how to use it.&lt;/p&gt; &#xA;&lt;h3&gt;Command Line for SMT2 interface&lt;/h3&gt; &#xA;&lt;p&gt;You can use the &lt;code&gt;.smt2&lt;/code&gt; interface from the command-line as follows:&lt;/p&gt; &#xA;&lt;p&gt;Use &lt;code&gt;--stdin&lt;/code&gt; to read files from &lt;code&gt;stdin&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ more tests/horn/pos/test01.smt2 | fixpoint --stdin&#xA;&#xA;Liquid-Fixpoint Copyright 2013-21 Regents of the University of California.&#xA;All Rights Reserved.&#xA;&#xA;Working 166% [===============================================================]&#xA;Safe ( 2  constraints checked)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use &lt;code&gt;-q&lt;/code&gt; to disable all output (banner, progress bar etc.)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ more tests/horn/pos/test01.smt2 | fixpoint -q --stdin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use &lt;code&gt;--json&lt;/code&gt; to get the output as a JSON object (rendered to &lt;code&gt;stdout&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ more tests/horn/pos/abs02-re.smt2 | stack exec -- fixpoint -q --json --stdin&#xA;{&#34;contents&#34;:{&#34;numIter&#34;:3,&#34;numCstr&#34;:3,&#34;numChck&#34;:3,&#34;numBrkt&#34;:3,&#34;numVald&#34;:3},&#34;tag&#34;:&#34;Safe&#34;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Options&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;--higherorder&lt;/code&gt; allows higher order binders into the environment&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;--extsolver&lt;/code&gt; runs the &lt;strong&gt;deprecated&lt;/strong&gt; external solver.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;--parts&lt;/code&gt; Partitions an &lt;code&gt;FInfo&lt;/code&gt; into a &lt;code&gt;[FInfo]&lt;/code&gt; and emits a bunch of files. So:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ fixpoint -n -p path/to/foo.fq&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;will now emit files:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;path/to/.liquid/foo.1.fq&#xA;path/to/.liquid/foo.2.fq&#xA;. . .&#xA;path/to/.liquid/foo.k.fq&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and also a dot file with the constraint dependency graph:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;path/to/.liquid/foo.fq.dot&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;FInfo Invariants&lt;/h2&gt; &#xA;&lt;h3&gt;Binders&lt;/h3&gt; &#xA;&lt;p&gt;This is the field&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;     , bs       :: !BindEnv         -- ^ Bind  |-&amp;gt; (Symbol, SortedReft)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or in the .fq files as&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;bind 1 x : ...&#xA;bind 2 y : ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Each &lt;code&gt;BindId&lt;/code&gt; must be a distinct &lt;code&gt;Int&lt;/code&gt;,&lt;/li&gt; &#xA; &lt;li&gt;Each &lt;code&gt;BindId&lt;/code&gt; that appears in a constraint environment i.e. inside &lt;em&gt;any&lt;/em&gt; &lt;code&gt;IBindEnv&lt;/code&gt; must appear inside the &lt;code&gt;bs&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Environments&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Each constraint&#39;s environment is a set of &lt;code&gt;BindId&lt;/code&gt; which must be defined in the &lt;code&gt;bindInfo&lt;/code&gt;. Furthermore&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Each constraint should not have &lt;em&gt;duplicate&lt;/em&gt; names in its environment, that is if you have two binders&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;  bind 1 x : ...&#xA;  bind 12 x : ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then a single &lt;code&gt;IBindEnv&lt;/code&gt; should only mention &lt;em&gt;at most&lt;/em&gt; one of &lt;code&gt;1&lt;/code&gt; or &lt;code&gt;12&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;There is also a &#34;tree-shape&#34; property that its a bit hard to describe ... TODO&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;LHS&lt;/h3&gt; &#xA;&lt;p&gt;Each &lt;code&gt;slhs&lt;/code&gt; of a constraint is a &lt;code&gt;SortedReft&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Each &lt;code&gt;SortredReft&lt;/code&gt; is basically a &lt;code&gt;Reft&lt;/code&gt; -- a logical predicate. The important bit is that a &lt;code&gt;KVar&lt;/code&gt; i.e. terms of the formalized&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;     $k1[x1:=y1][x2:=y2]...[xn:=yn]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;That is represented in the &lt;code&gt;Expr&lt;/code&gt; type as&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;  | PKVar  !KVar !Subst&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;must appear &lt;em&gt;only&lt;/em&gt; at the &lt;strong&gt;top-level&lt;/strong&gt; that is not under &lt;em&gt;any&lt;/em&gt; other operators, i.e. not as a sub-&lt;code&gt;Expr&lt;/code&gt; of other expressions.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;This is basically a predicate that needs to be &#34;well sorted&#34; with respect to the &lt;code&gt;BindId&lt;/code&gt;, intuitively&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;    x:int, y:int |- x + y : int&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;is well sorted. but&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    x:int  |- x + y : int&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;is not, and&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    x:int, y: list |- x + y : int&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;is not. The exact definition is formalized in &lt;code&gt;Language.Fixpoint.SortCheck&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;RHS&lt;/h3&gt; &#xA;&lt;p&gt;Similarly each &lt;code&gt;rhs&lt;/code&gt; of a &lt;code&gt;SubC&lt;/code&gt; must either be a single &lt;code&gt;$k[...]&lt;/code&gt; or an plain &lt;code&gt;$k&lt;/code&gt;-free &lt;code&gt;Expr&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Global vs. Distinct Literals&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;     , gLits    :: !(SEnv Sort)               -- ^ Global Constant symbols&#xA;     , dLits    :: !(SEnv Sort)       &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;em&gt;global&lt;/em&gt; literals &lt;code&gt;gLits&lt;/code&gt; are symbols that are in scope &lt;em&gt;everywhere&lt;/em&gt; i.e. need not be separately defined in individual environments. These include things like&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;uninterpreted &lt;em&gt;measure&lt;/em&gt; functions &lt;code&gt;len&lt;/code&gt;, &lt;code&gt;height&lt;/code&gt;,&lt;/li&gt; &#xA; &lt;li&gt;uninterpreted &lt;em&gt;data constructor&lt;/em&gt; literals &lt;code&gt;True&lt;/code&gt;, &lt;code&gt;False&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Suppose you have an enumerated type like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;data Day = Sun | Mon | Tue | Wed | ... | Sat&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can model the above values in fixpoint as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;constant lit#Sun : Day&#xA;constant lit#Mon : Day&#xA;constant lit#Tue : Day&#xA;constant lit#Wed : Day&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;em&gt;distinct&lt;/em&gt; literals are a subset of the above where we want to tell the SMT solver that the values are &lt;em&gt;distinct&lt;/em&gt; i.e. &lt;strong&gt;not equal&lt;/strong&gt; to each other, for example, you can &lt;strong&gt;additionally&lt;/strong&gt; specify this as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;distinct lit#Sun : Day&#xA;distinct lit#Mon : Day&#xA;distinct lit#Tue : Day&#xA;distinct lit#Wed : Day&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The above two are represented programmatically by generating suitable &lt;code&gt;Symbol&lt;/code&gt; values (for the literals see &lt;code&gt;litSymbol&lt;/code&gt;) and &lt;code&gt;Sort&lt;/code&gt; values as &lt;code&gt;FTC FTycon&lt;/code&gt; and then making an &lt;code&gt;SEnv&lt;/code&gt; from the &lt;code&gt;[(Symbol, Sort)]&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Sorts&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;What&#39;s the difference between an FTC and an FObj?&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;In early versions of fixpoint, there was support for three sorts for expressions (&lt;code&gt;Expr&lt;/code&gt;) that were sent to the SMT solver:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;int&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;bool&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&#34;other&#34;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;The &lt;code&gt;FObj&lt;/code&gt; sort was introduced to represent essentially &lt;em&gt;all&lt;/em&gt; non-int and non-bool values (e.g. tuples, lists, trees, pointers...)&lt;/p&gt; &#xA;&lt;p&gt;However, we later realized that it is valuable to keep &lt;em&gt;more&lt;/em&gt; precise information for &lt;code&gt;Expr&lt;/code&gt;s and so we introduced the &lt;code&gt;FTC&lt;/code&gt; (fixpoint type constructor), which lets us represent the above respectively as:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;FTC &#34;String&#34; []&lt;/code&gt; -- in Haskell &lt;code&gt;String&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;FTC &#34;Tuple&#34; [FInt, Bool]&lt;/code&gt; -- in Haskell &lt;code&gt;(Int, Bool)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;FTC &#34;List&#34; [FTC &#34;List&#34; [FInt]]&lt;/code&gt; -- in Haskell &lt;code&gt;[[Int]]&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;There is a comment that says FObj&#39;s are uninterpretted types; so probably a type the SMT solver doesn&#39;t know about? Does that then make FTC types that the SMT solver does know about (bools, ints, lists, sets, etc.)?&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;The SMT solver knows about &lt;code&gt;bool&lt;/code&gt;, &lt;code&gt;int&lt;/code&gt; and &lt;code&gt;set&lt;/code&gt; (also &lt;code&gt;bitvector&lt;/code&gt; and &lt;code&gt;map&lt;/code&gt;) but &lt;em&gt;all&lt;/em&gt; other types are &lt;em&gt;currently&lt;/em&gt; represented as plain &lt;code&gt;Int&lt;/code&gt; inside the SMT solver. However, we &lt;em&gt;will be&lt;/em&gt; changing this to make use of SMT support for ADTs ...&lt;/p&gt; &#xA;&lt;p&gt;To sum up: the &lt;code&gt;FObj&lt;/code&gt; is there for historical reasons; it has been subsumed by &lt;code&gt;FTC&lt;/code&gt; which is what I recomend you use. However &lt;code&gt;FObj&lt;/code&gt; is there if you want a simple &#34;unitype&#34; / &#34;any&#34; type for terms that are not &#34;interpreted&#34;.&lt;/p&gt; &#xA;&lt;h2&gt;Qualifier Patterns&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;λ&amp;gt; doParse&#39; (qualParamP sortP) &#34;&#34; &#34;z as (mon . $1) : int&#34;&#xA;QP {qpSym = &#34;z&#34;, qpPat = PatPrefix &#34;mon&#34; 1, qpSort = FInt}&#xA;λ&amp;gt; doParse&#39; (qualParamP sortP) &#34;&#34; &#34;z as ($1 . mon) : int&#34;&#xA;QP {qpSym = &#34;z&#34;, qpPat = PatSuffix 1 &#34;mon&#34;, qpSort = FInt}&#xA;λ&amp;gt; doParse&#39; (qualParamP sortP) &#34;&#34; &#34;z as mon : int&#34;&#xA;QP {qpSym = &#34;z&#34;, qpPat = PatExact &#34;mon&#34;, qpSort = FInt}&#xA;λ&amp;gt; doParse&#39; (qualParamP sortP) &#34;&#34; &#34;z : int&#34;&#xA;QP {qpSym = &#34;z&#34;, qpPat = PatNone, qpSort = FInt}&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>liamoc/holbert</title>
    <updated>2022-05-29T01:43:13Z</updated>
    <id>tag:github.com,2022-05-29:/liamoc/holbert</id>
    <link href="https://github.com/liamoc/holbert" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A graphical interactive proof assistant designed for education&lt;/p&gt;&lt;hr&gt;&lt;ul&gt; &#xA; &lt;li&gt;Holbert&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Holbert is an interactive theorem prover, or proof assistant, based on higher order logic and natural deduction. Furthermore, Holbert is graphical. It presents proofs and rules using conventional inference rule notation and proof trees. It is designed to be used by students, without any expertise on using a theorem prover. It does not feature proof scripts (in the traditional sense), tactics, or other such complications.&lt;/p&gt; &#xA;&lt;p&gt;You can try Holbert out by trying the live demo [[http://liamoc.net/holbert][here]] (this version may not be the latest one available from GitHub). This Holbert instance explains more about the rationale behind its design and my intended goals with it.&lt;/p&gt; &#xA;&lt;p&gt;Like Isabelle, Holbert is just a pure meta-logic. It does not define any connectives (like conjunction or disjunction) itself, although all can be defined within the system. For binding structures and quantifiers, higher order abstract syntax can be used.&lt;/p&gt; &#xA;&lt;p&gt;Unlike conventional theorem provers, Holbert&#39;s term language is just the untyped lambda calculus. While this technically makes the logic unsound, it is much simpler to use as a pedagogical tool.&lt;/p&gt; &#xA;&lt;p&gt;Holbert is intended as a tool for education, and not as an industrial-strength proof assistant where theorems must be trusted. So, just avoid writing fixed point combinators and you should be fine.&lt;/p&gt; &#xA;&lt;p&gt;** Building, Installing&lt;/p&gt; &#xA;&lt;p&gt;Holbert is written in GHC Haskell, intended to be compiled with &lt;del&gt;ghcjs&lt;/del&gt;. It uses the Miso framework and the &lt;del&gt;optics-core&lt;/del&gt; library. Acquiring GHCJS can be difficult, but I was able to follow the instructions on the [[https://github.com/dmjio/miso/blob/master/README.md][Miso readme]] to install it using &lt;del&gt;nix&lt;/del&gt;, and then I just used &lt;del&gt;cabal&lt;/del&gt; from then on once I had the &lt;del&gt;ghcjs&lt;/del&gt; binaries.&lt;/p&gt; &#xA;&lt;p&gt;Once it is set up, make sure that the &lt;del&gt;OUTPUT&lt;/del&gt; variable in the &lt;del&gt;Makefile&lt;/del&gt; points to wherever &lt;del&gt;cabal&lt;/del&gt; builds the &lt;del&gt;jsexe&lt;/del&gt; directory for the compiled app. To find out what this is, you can type: #+BEGIN_EXAMPLE cabal configure --ghcjs cabal build #+END_EXAMPLE The correct directory to set &lt;del&gt;OUTPUT&lt;/del&gt; to will be listed as the last line in the build log (&lt;del&gt;Linking ...&lt;/del&gt;), but you can also find it by typing: #+BEGIN_EXAMPLE find . | grep jsexe | head -1 #+END_EXAMPLE&lt;/p&gt; &#xA;&lt;p&gt;Once the &lt;del&gt;OUTPUT&lt;/del&gt; directory is set, you can build Holbert properly (including all resources) by typing: #+BEGIN_EXAMPLE make #+END_EXAMPLE And if you have &lt;del&gt;python3&lt;/del&gt; there is a shortcut to start a server with the app with #+BEGIN_EXAMPLE make server #+END_EXAMPLE&lt;/p&gt; &#xA;&lt;p&gt;** Licenses&lt;/p&gt; &#xA;&lt;p&gt;Holbert is released under the BSD3 license. It includes the following free projects:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Computer Modern font families, released under the SIL Open Font License.&lt;/li&gt; &#xA; &lt;li&gt;The Neo Euler font, also released under the SIL Open Font License.&lt;/li&gt; &#xA; &lt;li&gt;The Typicons icon font, also released under the SIL Open Font License.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Some code for the unification engine were taken from Tobias Nipkow&#39;s paper on the topic, as well as from Daniel Gratzer&#39;s higher order unification implementation in Haskell.&lt;/p&gt; &#xA;&lt;p&gt;The following MIT licensed JS libraries are used:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[[https://github.com/nathancahill/split][Split.js]] by Nathan Cahill&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/eligrey/FileSaver.js][FileSaver.js]] by Eli Grey&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Future work&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Support for deferred proof steps to lemmas.&lt;/li&gt; &#xA; &lt;li&gt;&#34;Books&#34;, multiple interlinked documents.&lt;/li&gt; &#xA; &lt;li&gt;(Built-in) support for equality&lt;/li&gt; &#xA; &lt;li&gt;(Built-in) support for induction&lt;/li&gt; &#xA; &lt;li&gt;And much much more!&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>input-output-hk/cardano-base</title>
    <updated>2022-05-29T01:43:13Z</updated>
    <id>tag:github.com,2022-05-29:/input-output-hk/cardano-base</id>
    <link href="https://github.com/input-output-hk/cardano-base" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Code used throughout the Cardano eco-system&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;cardano-base&lt;/h1&gt; &#xA;&lt;p&gt;A collection of miscellaneous packages used by Cardano that cover:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;cryptography&lt;/li&gt; &#xA; &lt;li&gt;serialization&lt;/li&gt; &#xA; &lt;li&gt;slotting&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Each sub-project has its own README.&lt;/p&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://github.com/input-output-hk/cardano-base/wiki&#34;&gt;wiki&lt;/a&gt; for more documentation.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>input-output-hk/iohk-monitoring-framework</title>
    <updated>2022-05-29T01:43:13Z</updated>
    <id>tag:github.com,2022-05-29:/input-output-hk/iohk-monitoring-framework</id>
    <link href="https://github.com/input-output-hk/iohk-monitoring-framework" rel="alternate"></link>
    <summary type="html">&lt;p&gt;This framework provides logging, benchmarking and monitoring.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;iohk-monitoring-framework&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/input-output-hk/iohk-monitoring-framework/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release-pre/input-output-hk/iohk-monitoring-framework.svg?sanitize=true&#34; alt=&#34;Release version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://buildkite.com/input-output-hk/iohk-monitoring-framework&#34;&gt;&lt;img src=&#34;https://badge.buildkite.com/1cc7939a1fed4972c15b8f87d510e0404b0eb65d73cfd1e30b.svg?branch=master&#34; alt=&#34;Build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://coveralls.io/github/input-output-hk/iohk-monitoring-framework?branch=master&#34;&gt;&lt;img src=&#34;https://coveralls.io/repos/github/input-output-hk/iohk-monitoring-framework/badge.svg?branch=master&#34; alt=&#34;Coverage Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This framework provides logging, benchmarking and monitoring.&lt;/p&gt; &#xA;&lt;h2&gt;documentation&lt;/h2&gt; &#xA;&lt;p&gt;Documentation of the &lt;a href=&#34;https://github.com/input-output-hk/iohk-monitoring-framework/wiki/IOHK-Monitoring.pdf&#34;&gt;source code and tests&lt;/a&gt; in PDF format. Please, download the PDF file and open it in an external viewer. It contains links for easier navigation in the source code. Those links are not active in the online viewer.&lt;/p&gt; &#xA;&lt;p&gt;Slides of our presentations are available in &lt;a href=&#34;https://input-output-hk.github.io/iohk-monitoring-framework/&#34;&gt;html&lt;/a&gt; format.&lt;/p&gt; &#xA;&lt;p&gt;And, introductory one-pagers on logging and benchmarking are available in &lt;a href=&#34;https://input-output-hk.github.io/iohk-monitoring-framework/&#34;&gt;pdf&lt;/a&gt; format.&lt;/p&gt; &#xA;&lt;h2&gt;module dependencies&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/input-output-hk/iohk-monitoring-framework/master/docs/OverviewModules.png&#34; alt=&#34;Overview of modules&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;building and testing&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;cabal new-build all&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;cabal new-test all&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;examples&lt;/h2&gt; &#xA;&lt;p&gt;Some examples are available in the directory &lt;a href=&#34;https://github.com/input-output-hk/iohk-monitoring-framework/tree/master/iohk-monitoring/examples&#34;&gt;examples&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;simple&lt;/code&gt; - run with &lt;code&gt;cabal new-run example-simple&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;complex&lt;/code&gt; - run with &lt;code&gt;cabal new-run example-complex&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;These showcase the usage of this framework in an application. The &lt;em&gt;complex&lt;/em&gt; example includes &lt;code&gt;EKGView&lt;/code&gt; (&lt;a href=&#34;http://localhost:12789&#34;&gt;http://localhost:12789&lt;/a&gt;) and the configuration editor (&lt;a href=&#34;http://localhost:13789&#34;&gt;http://localhost:13789&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/input-output-hk/iohk-monitoring-framework/master/docs/ConfigEditor.png&#34; alt=&#34;Edit runtime configuration&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;development&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;cabal new-build all&lt;/code&gt; and &lt;code&gt;cabal new-test all&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ghcid -c &#34;cabal new-repl&#34;&lt;/code&gt; watches for file changes and recompiles them immediately&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>fossas/fossa-cli</title>
    <updated>2022-05-29T01:43:13Z</updated>
    <id>tag:github.com,2022-05-29:/fossas/fossa-cli</id>
    <link href="https://github.com/fossas/fossa-cli" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Fast, portable and reliable dependency analysis for any codebase. Supports license &amp; vulnerability scanning for large monoliths. Language-agnostic; integrates with 20+ build systems.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/fossas/fossa-cli/master/docs/assets/header.png&#34; alt=&#34;FOSSA&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;FOSSA CLI&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/fossas/fossa-cli/actions/workflows/build.yml&#34;&gt;&lt;img src=&#34;https://github.com/fossas/fossa-cli/actions/workflows/build-all.yml/badge.svg?sanitize=true&#34; alt=&#34;Build&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/fossas/fossa-cli/actions/workflows/dependency-scan.yml&#34;&gt;&lt;img src=&#34;https://github.com/fossas/fossa-cli/actions/workflows/dependency-scan.yml/badge.svg?sanitize=true&#34; alt=&#34;Dependency scan&#34;&gt;&lt;/a&gt; &#xA; &lt;!-- markdown-link-check-disable-next-line --&gt; &lt;a href=&#34;https://app.fossa.com/projects/custom%2B1%2Fgit%40github.com%3Afossas%2Ffossa-cli?ref=badge_shield&#34;&gt;&lt;img src=&#34;https://app.fossa.com/api/projects/custom%2B1%2Fgit%40github.com%3Afossas%2Ffossa-cli.svg?type=shield&#34; alt=&#34;FOSSA Status&#34;&gt;&lt;/a&gt; &#xA; &lt;!-- markdown-link-check-disable-next-line --&gt; &lt;a href=&#34;https://github.com/fossas/fossa-cli/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/downloads/fossas/fossa-cli/total.svg?sanitize=true&#34; alt=&#34;FOSSA Downloads&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Fossa CLI is a zero-configuration polyglot dependency analysis tool. You can point fossa CLI at any codebase or build, and it will automatically detect dependencies being used by your project.&lt;/p&gt; &#xA;&lt;p&gt;Fossa CLI currently supports automatic dependency analysis for &lt;a href=&#34;https://raw.githubusercontent.com/fossas/fossa-cli/master/docs/references/strategies/README.md#supported-languages&#34;&gt;many different build tools and languages&lt;/a&gt;. It also has limited support for vendored dependency detection, container scanning, and system dependency detection. These features are still a work in progress. Our goal is to make the FOSSA CLI a universal tool for dependency analysis.&lt;/p&gt; &#xA;&lt;p&gt;Fossa CLI integrates with &lt;a href=&#34;https://fossa.com&#34;&gt;FOSSA&lt;/a&gt; for dependency analysis, license scanning, vulnerability scanning, attribution report generation, and more.&lt;/p&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fossas/fossa-cli/master/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fossas/fossa-cli/master/#getting-started&#34;&gt;Getting Started&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fossas/fossa-cli/master/#user-manual&#34;&gt;User Manual&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fossas/fossa-cli/master/#reporting-issues&#34;&gt;Reporting Issues&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fossas/fossa-cli/master/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Using the install script&lt;/h3&gt; &#xA;&lt;p&gt;FOSSA CLI provides an install script that downloads the latest release from GitHub Releases for your computer&#39;s architecture. You can see the source code and flags at &lt;a href=&#34;https://raw.githubusercontent.com/fossas/fossa-cli/master/install-latest.sh&#34;&gt;&lt;code&gt;install-latest.sh&lt;/code&gt;&lt;/a&gt; for Mac and Linux or &lt;a href=&#34;https://raw.githubusercontent.com/fossas/fossa-cli/master/install-latest.ps1&#34;&gt;&lt;code&gt;install-latest.ps1&lt;/code&gt;&lt;/a&gt; for Windows.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; You may need to add the downloaded executable to your &lt;code&gt;$PATH&lt;/code&gt;. The installer script will output the installed path of the executable. You can also use &lt;code&gt;-b&lt;/code&gt; to pick the installation directory when using &lt;code&gt;install-latest.sh&lt;/code&gt; (see &lt;a href=&#34;https://raw.githubusercontent.com/fossas/fossa-cli/master/install-latest.sh&#34;&gt;the &lt;code&gt;install-latest.sh&lt;/code&gt; source code&lt;/a&gt; for details).&lt;/p&gt; &#xA;&lt;h4&gt;macOS or 64-bit Linux&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -H &#39;Cache-Control: no-cache&#39; https://raw.githubusercontent.com/fossas/fossa-cli/master/install-latest.sh | bash&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Windows with Powershell&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;Set-ExecutionPolicy Bypass -Scope Process -Force; iex  ((New-Object System.Net.WebClient).DownloadString(&#39;https://raw.githubusercontent.com/fossas/fossa-cli/master/install-latest.ps1&#39;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;!-- markdown-link-check-disable-next-line --&gt; &#xA;&lt;p&gt;Alternatively, install using &lt;a href=&#34;https://scoop.sh/&#34;&gt;Scoop&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;scoop install fossa&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Installing manually&lt;/h3&gt; &#xA;&lt;p&gt;You can install the FOSSA CLI releases manually by downloading the latest release from &lt;a href=&#34;https://github.com/fossas/fossa-cli/releases&#34;&gt;GitHub Releases&lt;/a&gt; and extracting the binary to your &lt;code&gt;$PATH&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To install FOSSA CLI 1.x with install script please refer to: &lt;a href=&#34;https://raw.githubusercontent.com/fossas/fossa-cli/master/docs/install-v1.md&#34;&gt;installing 1.x guide&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;h3&gt;Integrating your project with FOSSA&lt;/h3&gt; &#xA;&lt;h4&gt;TL;DR, Linux, Mac, *nix-like&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Download FOSSA.&#xA;curl -H &#39;Cache-Control: no-cache&#39; https://raw.githubusercontent.com/fossas/fossa-cli/master/install-latest.sh | bash&#xA;&#xA;# Set your API key. Get this from the FOSSA web application.&#xA;export FOSSA_API_KEY=XXXX&#xA;&#xA;# Run an analysis in your project&#39;s directory.&#xA;cd $MY_PROJECT_DIR&#xA;fossa analyze&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;TL;DR, Windows&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;# Download FOSSA.&#xA;Set-ExecutionPolicy Bypass -Scope Process -Force; iex  ((New-Object System.Net.WebClient).DownloadString(&#39;https://raw.githubusercontent.com/fossas/fossa-cli/master/install-latest.ps1&#39;))&#xA;&#xA;# Set your API key. Get this from the FOSSA web application.&#xA;$env:FOSSA_API_KEY=XXXX&#xA;&#xA;# Run an analysis in your project&#39;s directory.&#xA;cd $MY_PROJECT_DIR&#xA;fossa analyze&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Installing FOSSA CLI&lt;/h4&gt; &#xA;&lt;p&gt;Follow &lt;a href=&#34;https://raw.githubusercontent.com/fossas/fossa-cli/master/#installation&#34;&gt;the installation instructions&lt;/a&gt; above to install the FOSSA CLI. Once installed, you should have a new binary named &lt;code&gt;fossa&lt;/code&gt; available on your &lt;code&gt;$PATH&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Generating an API key&lt;/h4&gt; &#xA;&lt;p&gt;To get started with integrating your project into FOSSA, you&#39;ll need to &lt;a href=&#34;https://docs.fossa.com/docs/api-reference&#34;&gt;generate an API key&lt;/a&gt;. You&#39;ll get this API key from the FOSSA web application (&lt;a href=&#34;https://app.fossa.com&#34;&gt;app.fossa.com&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;Once you have your API key:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;export FOSSA_API_KEY=XXXX # Use your API key here.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Running an analysis&lt;/h4&gt; &#xA;&lt;p&gt;Now we can run an analysis. To run an analysis, all you need to do is navigate to your project&#39;s directory and run &lt;code&gt;fossa analyze&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; While &lt;code&gt;fossa&lt;/code&gt; will try its best to report available results for any kind of project, you&#39;ll get the best results by running in a directory with a working project build. A working build lets us integrate directly with your build tool to identify dependencies, instead of trying to infer dependencies from your source code.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ cd $MY_PROJECT_DIR # Use your actual project location here.&#xA;&#xA;$ fossa analyze&#xA;[ INFO] Using project name: `https://github.com/fossas/fossa-cli`&#xA;[ INFO] Using revision: `09ca72e398bb32747b27c0f43731678fa42c3c26`&#xA;[ INFO] Using branch: `No branch (detached HEAD)`&#xA;[ INFO] ============================================================&#xA;&#xA;      View FOSSA Report:&#xA;      https://app.fossa.com/projects/custom+1%2fgithub.com%2ffossas%2ffossa-cli/refs/branch/master/09ca72e398bb32747b27c0f43731678fa42c3c26&#xA;&#xA;  ============================================================&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Viewing your results&lt;/h4&gt; &#xA;&lt;p&gt;Once an analysis has been uploaded, you can view your results in the FOSSA web application. You can see your analysis by using the link provided as output by &lt;code&gt;fossa analyze&lt;/code&gt;, or by navigating to your project and revision in the FOSSA web application.&lt;/p&gt; &#xA;&lt;h4&gt;What next?&lt;/h4&gt; &#xA;&lt;p&gt;Now that your analysis is complete, there are a couple things you might want to do after an initial integration:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Double-check your results.&lt;/strong&gt; Some analysis methods may produce partial or unexpected results depending on what information was available when you ran the analysis. If something seems wrong, &lt;a href=&#34;https://raw.githubusercontent.com/fossas/fossa-cli/master/docs/walkthroughs/debugging-your-integration.md&#34;&gt;our debugging guide&lt;/a&gt; can help you diagnose and debug your integration.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Scan for issues and generate a compliance report.&lt;/strong&gt; Once your analysis is ready, we&#39;ll automatically queue an issue scan and report the results in the web application. Once an issue scan is complete, you can also &lt;a href=&#34;https://docs.fossa.com/docs/running-a-scan&#34;&gt;generate a report&lt;/a&gt; from the web application.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Set up FOSSA in your CI.&lt;/strong&gt; You can also use your issue scan results as inputs to CI scripts. For GitHub repositories, you can use FOSSA&#39;s &lt;a href=&#34;https://docs.fossa.com/docs/automatic-updates#pull-request--commit-statuses-github-only&#34;&gt;native GitHub integration&lt;/a&gt; to report a status check on your PRs. For other CI integrations, you can also &lt;a href=&#34;https://raw.githubusercontent.com/fossas/fossa-cli/master/docs/references/subcommands/test.md&#34;&gt;use &lt;code&gt;fossa test&lt;/code&gt;&lt;/a&gt; to get programmatic issue status in CI.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;User Manual&lt;/h2&gt; &#xA;&lt;p&gt;For most users, the FOSSA CLI will work out-of-the-box without any configuration. Just get an API key, run &lt;code&gt;fossa analyze&lt;/code&gt;, and view your results in the FOSSA web application.&lt;/p&gt; &#xA;&lt;p&gt;Users who need advanced customization or features should see the &lt;a href=&#34;https://raw.githubusercontent.com/fossas/fossa-cli/master/docs/README.md&#34;&gt;User Manual&lt;/a&gt;. Some common topics of interest include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fossas/fossa-cli/master/docs/walkthroughs/debugging-your-integration.md&#34;&gt;Debugging your integration&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fossas/fossa-cli/master/docs/features/vendored-dependencies.md&#34;&gt;Specifying vendored dependencies&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fossas/fossa-cli/master/docs/features/manual-dependencies.md&#34;&gt;Adding manual dependencies&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Reporting Issues&lt;/h2&gt; &#xA;&lt;p&gt;If you&#39;ve found a bug or need support, the best way to get support is to email &lt;a href=&#34;mailto:support@fossa.com&#34;&gt;support@fossa.com&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Make sure to include reproduction steps and any relevant project files (e.g. &lt;code&gt;pom.xml&lt;/code&gt;s, &lt;code&gt;package.json&lt;/code&gt;s, etc.). Including the output from &lt;code&gt;fossa analyze --debug&lt;/code&gt; in the email as well as any relevant fossa files (&lt;code&gt;fossa-deps.json&lt;/code&gt;, &lt;code&gt;.fossa.yml&lt;/code&gt;) will help expedite a solution.&lt;/p&gt; &#xA;&lt;p&gt;We&#39;ll try to respond to issues opened in this repository on a best-effort basis, but we mostly provide support via our &lt;a href=&#34;mailto:support@fossa.com&#34;&gt;&lt;code&gt;support@&lt;/code&gt;&lt;/a&gt; email.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;If you&#39;re interested in contributing, check out our &lt;a href=&#34;https://raw.githubusercontent.com/fossas/fossa-cli/master/docs/contributing/README.md&#34;&gt;contributor documentation&lt;/a&gt;. PRs are welcome!&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Roguelazer/sedc</title>
    <updated>2022-05-29T01:43:13Z</updated>
    <id>tag:github.com,2022-05-29:/Roguelazer/sedc</id>
    <link href="https://github.com/Roguelazer/sedc" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A compiler for sed&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;sedc - an optimizing sed compiler&lt;/h1&gt; &#xA;&lt;p&gt;I don&#39;t know if you realize this, but &lt;strong&gt;sed&lt;/strong&gt; is capable of much more than just pipelines containing only &lt;code&gt;s///&lt;/code&gt; operations. I suspect that it might be possible to make it Turing-complete (even though it&#39;s just single-pass).&lt;/p&gt; &#xA;&lt;p&gt;I&#39;ve been enjoying using some of its more esoteric features, and one day I realized that the X86 instruction &lt;code&gt;XLAT&lt;/code&gt; is a reasonable simulacrum of the &lt;code&gt;y///&lt;/code&gt; operator. Thus this project was born. I&#39;ve never written a compiler in Haskell before, so I decided to do this project in Haskell rather than my more comfortable SML or Ocaml.&lt;/p&gt; &#xA;&lt;p&gt;Much of the structure of this project is based on my &lt;a href=&#34;https://www.cs.hmc.edu/twiki/bin/view/CS132Spring2009&#34;&gt;Compilers class&lt;/a&gt; with the always-awesome &lt;a href=&#34;http://www.cs.hmc.edu/~stone/&#34;&gt;Professor Stone&lt;/a&gt;. I obviously won&#39;t be taking any code whole-hog from there, especially since it&#39;s in a different language and was sourcing a much more complicated language. But the ideas come from that class.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This work is available under the ISC (OpenBSD) license. The full contents of this license are checked in as &lt;code&gt;license.txt&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Project status&lt;/h2&gt; &#xA;&lt;p&gt;I just started this project, so it hasn&#39;t come very far. The parser is going to be tricky, since regular expressions are pretty complicated in and of itself. After that, there&#39;ll be writing an efficient regexp engine (it&#39;d be cheating to use somebody else&#39;s).&lt;/p&gt; &#xA;&lt;p&gt;Oh, and all of the other steps of the compilation process.&lt;/p&gt; &#xA;&lt;p&gt;Cheers,&lt;/p&gt; &#xA;&lt;p&gt;James Brown &lt;a href=&#34;mailto:roguelazer@roguelazer.com&#34;&gt;roguelazer@roguelazer.com&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>xmonad/xmonad</title>
    <updated>2022-05-29T01:43:13Z</updated>
    <id>tag:github.com,2022-05-29:/xmonad/xmonad</id>
    <link href="https://github.com/xmonad/xmonad" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The core of xmonad, a small but functional ICCCM-compliant tiling window manager&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://xmonad.org/&#34;&gt;&lt;img alt=&#34;XMonad logo&#34; src=&#34;https://xmonad.org/images/logo-wrapped.svg?sanitize=true&#34; height=&#34;150&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://hackage.haskell.org/package/xmonad&#34;&gt;&lt;img alt=&#34;Hackage&#34; src=&#34;https://img.shields.io/hackage/v/xmonad?logo=haskell&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/xmonad/xmonad/raw/readme/LICENSE&#34;&gt;&lt;img alt=&#34;License&#34; src=&#34;https://img.shields.io/github/license/xmonad/xmonad&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://haskell.org/&#34;&gt;&lt;img alt=&#34;Made in Haskell&#34; src=&#34;https://img.shields.io/badge/Made%20in-Haskell-%235e5086?logo=haskell&#34;&gt;&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://github.com/xmonad/xmonad/actions/workflows/stack.yml&#34;&gt;&lt;img alt=&#34;Stack&#34; src=&#34;https://img.shields.io/github/workflow/status/xmonad/xmonad/Stack?label=Stack&amp;amp;logo=githubactions&amp;amp;logoColor=white&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/xmonad/xmonad/actions/workflows/haskell-ci.yml&#34;&gt;&lt;img alt=&#34;Cabal&#34; src=&#34;https://img.shields.io/github/workflow/status/xmonad/xmonad/Haskell-CI?label=Cabal&amp;amp;logo=githubactions&amp;amp;logoColor=white&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/xmonad/xmonad/actions/workflows/nix.yml&#34;&gt;&lt;img alt=&#34;Nix&#34; src=&#34;https://img.shields.io/github/workflow/status/xmonad/xmonad/Nix?label=Nix&amp;amp;logo=githubactions&amp;amp;logoColor=white&#34;&gt;&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://github.com/sponsors/xmonad&#34;&gt;&lt;img alt=&#34;GitHub Sponsors&#34; src=&#34;https://img.shields.io/github/sponsors/xmonad?label=GitHub%20Sponsors&amp;amp;logo=githubsponsors&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/xmonad&#34;&gt;&lt;img alt=&#34;Open Collective&#34; src=&#34;https://img.shields.io/opencollective/all/xmonad?label=Open%20Collective&amp;amp;logo=opencollective&#34;&gt;&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://web.libera.chat/#xmonad&#34;&gt;&lt;img alt=&#34;Chat on #xmonad@irc.libera.chat&#34; src=&#34;https://img.shields.io/badge/%23%20chat-on%20libera-brightgreen&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://matrix.to/#/#xmonad:matrix.org&#34;&gt;&lt;img alt=&#34;Chat on #xmonad:matrix.org&#34; src=&#34;https://img.shields.io/matrix/xmonad:matrix.org?logo=matrix&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;h1&gt;xmonad&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;A tiling window manager for X11.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://xmonad.org/&#34;&gt;XMonad&lt;/a&gt; is a tiling window manager for X11. Windows are arranged automatically to tile the screen without gaps or overlap, maximising screen use. Window manager features are accessible from the keyboard: a mouse is optional. xmonad is written, configured and extensible in Haskell. Custom layout algorithms, key bindings and other extensions may be written by the user in config files. Layouts are applied dynamically, and different layouts may be used on each workspace. Xinerama is fully supported, allowing windows to be tiled on several physical screens.&lt;/p&gt; &#xA;&lt;p&gt;This repository contains the &lt;a href=&#34;https://hackage.haskell.org/package/xmonad&#34;&gt;xmonad&lt;/a&gt; package, a minimal, stable, yet extensible core. It is accompanied by &lt;a href=&#34;https://github.com/xmonad/xmonad-contrib&#34;&gt;xmonad-contrib&lt;/a&gt;, a library of hundreds of additional community-maintained tiling algorithms and extension modules. The two combined make for a powerful X11 window-manager with endless customization possibilities. They are, quite literally, libraries for creating your own window manager.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;For installation and configuration instructions, please see:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xmonad.org/download.html&#34;&gt;downloading and installing xmonad&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xmonad.org/INSTALL.html&#34;&gt;installing latest xmonad snapshot from git&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xmonad.org/TUTORIAL.html&#34;&gt;configuring xmonad&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you run into any trouble, consult our &lt;a href=&#34;https://xmonad.org/documentation.html&#34;&gt;documentation&lt;/a&gt; or ask the &lt;a href=&#34;https://xmonad.org/community.html&#34;&gt;community&lt;/a&gt; for help.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;We welcome all forms of contributions:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/xmonad/xmonad/issues&#34;&gt;bug reports and feature ideas&lt;/a&gt; (also to &lt;a href=&#34;https://github.com/xmonad/xmonad-contrib/issues&#34;&gt;xmonad-contrib&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/xmonad/xmonad/pulls&#34;&gt;bug fixes, new features, new extensions&lt;/a&gt; (usually to &lt;a href=&#34;https://github.com/xmonad/xmonad-contrib/pulls&#34;&gt;xmonad-contrib&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;documentation fixes and improvements: &lt;a href=&#34;https://github.com/xmonad/xmonad&#34;&gt;xmonad&lt;/a&gt;, &lt;a href=&#34;https://github.com/xmonad/xmonad-contrib&#34;&gt;xmonad-contrib&lt;/a&gt;, &lt;a href=&#34;https://github.com/xmonad/xmonad-web&#34;&gt;xmonad-web&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;helping others in the &lt;a href=&#34;https://xmonad.org/community.html&#34;&gt;community&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;financial support: &lt;a href=&#34;https://github.com/sponsors/xmonad&#34;&gt;GitHub Sponsors&lt;/a&gt;, &lt;a href=&#34;https://opencollective.com/xmonad&#34;&gt;Open Collective&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Please do read the &lt;a href=&#34;https://github.com/xmonad/xmonad/raw/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING&lt;/a&gt; document for more information about bug reporting and code contributions. For a brief overview of the architecture and code conventions, see the &lt;a href=&#34;https://xmonad.github.io/xmonad-docs/xmonad-contrib/XMonad-Doc-Developing.html&#34;&gt;documentation for the &lt;code&gt;XMonad.Doc.Developing&lt;/code&gt; module&lt;/a&gt;. If in doubt, &lt;a href=&#34;https://xmonad.org/community.html&#34;&gt;talk to us&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Authors&lt;/h2&gt; &#xA;&lt;p&gt;Started in 2007 by &lt;a href=&#34;https://github.com/spencerjanssen&#34;&gt;Spencer Janssen&lt;/a&gt;, &lt;a href=&#34;https://github.com/donsbot&#34;&gt;Don Stewart&lt;/a&gt; and &lt;a href=&#34;https://github.com/JasonCreighton&#34;&gt;Jason Creighton&lt;/a&gt;, the &lt;a href=&#34;https://xmonad.org/&#34;&gt;XMonad&lt;/a&gt; project lives on thanks to &lt;a href=&#34;https://github.com/xmonad/xmonad/raw/master/MAINTAINERS.md&#34;&gt;new generations of maintainers&lt;/a&gt; and &lt;a href=&#34;https://github.com/xmonad/xmonad/graphs/contributors&#34;&gt;dozens of contributors&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>