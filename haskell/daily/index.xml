<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Haskell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-30T01:35:06Z</updated>
  <subtitle>Daily Trending of Haskell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Gabriella439/spire</title>
    <updated>2022-08-30T01:35:06Z</updated>
    <id>tag:github.com,2022-08-30:/Gabriella439/spire</id>
    <link href="https://github.com/Gabriella439/spire" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Algorithmically solve Slay the Spire&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>Copilot-Language/copilot</title>
    <updated>2022-08-30T01:35:06Z</updated>
    <id>tag:github.com,2022-08-30:/Copilot-Language/copilot</id>
    <link href="https://github.com/Copilot-Language/copilot" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A stream-based runtime-verification framework for generating hard real-time C code.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Copilot: Stream DSL for hard real-time runtime verification&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://app.travis-ci.com/github/Copilot-Language/copilot&#34;&gt;&lt;img src=&#34;https://travis-ci.com/Copilot-Language/copilot.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hackage.haskell.org/package/copilot&#34;&gt;&lt;img src=&#34;https://img.shields.io/hackage/v/copilot.svg?sanitize=true&#34; alt=&#34;Version on Hackage&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Copilot is a runtime verification framework written in Haskell. It allows the user to write programs in a simple but powerful way using a stream-based approach.&lt;/p&gt; &#xA;&lt;p&gt;Programs can be interpreted for testing, or translated into C99 code to be incorporated in a project or as a standalone application. The C99 backend output is constant in memory and time, making it suitable for systems with hard realtime requirements.&lt;/p&gt; &#xA;&lt;h2&gt;Using Copilot&lt;/h2&gt; &#xA;&lt;p&gt;Assuming you have GHC and cabal already installed (see &lt;a href=&#34;http://hackage.haskell.org/platform/&#34;&gt;Haskell Platform&lt;/a&gt; or &lt;a href=&#34;https://www.haskell.org/ghcup/&#34;&gt;ghcup&lt;/a&gt;), there are several ways to use Copilot:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Adding Copilot to your project&lt;/p&gt; &lt;p&gt;Copilot is available from &lt;a href=&#34;https://hackage.haskell.org/package/copilot&#34;&gt;Hackage&lt;/a&gt;. Adding &lt;code&gt;copilot&lt;/code&gt; to your project&#39;s cabal file should be enough to get going.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Adding Copilot to the default GHC environment&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cabal v2-install --lib copilot&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;After which Copilot will be available from ghci.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Launching a repl with Copilot&lt;/p&gt; &lt;p&gt;Another quick solution is to cabal to launch a repl with Copilot available.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cabal v2-repl --build-depends copilot&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Cabal will download and build Copilot only to make it available in the launched repl. The global GHC environment will not be affected.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Building from source (typically done for development):&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/Copilot-Language/copilot.git&#xA;cd copilot&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Compiling can either be done in a Nix-style build, or a traditional one:&lt;/p&gt; &lt;p&gt;&lt;em&gt;Nix-Style build (Cabal &amp;gt;= 2.x)&lt;/em&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cabal build copilot-*/    # For Cabal 3.x&#xA;cabal v2-build copilot-*/ # For Cabal 2.x&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;em&gt;Traditional build (Cabal 1.x)&lt;/em&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd copilot&#xA;cabal install --dependencies-only . ../copilot-*/&#xA;cabal install ../copilot-*/&#xA;cabal build&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Note there is a TravisCI build (linked to at the top of this README) if you have trouble building/installing.&lt;/p&gt; &#xA;&lt;h2&gt;Example&lt;/h2&gt; &#xA;&lt;p&gt;Here follows a simple example of a heating system. Other examples can be found in the &lt;a href=&#34;https://github.com/Copilot-Language/copilot/tree/master/copilot/examples&#34;&gt;examples directory&lt;/a&gt; of the main repository.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;-- This is a simple example with basic usage. It implements a simple home&#xA;-- heating system: It heats when temp gets too low, and stops when it is high&#xA;-- enough. It read temperature as a byte (range -50C to 100C) and translates&#xA;-- this to Celsius.&#xA;&#xA;module Heater where&#xA;&#xA;import Language.Copilot&#xA;import Copilot.Compile.C99&#xA;&#xA;import Prelude hiding ((&amp;gt;), (&amp;lt;), div)&#xA;&#xA;-- External temperature as a byte, range of -50C to 100C&#xA;temp :: Stream Word8&#xA;temp = extern &#34;temperature&#34; Nothing&#xA;&#xA;-- Calculate temperature in Celsius.&#xA;-- We need to cast the Word8 to a Float. Note that it is an unsafeCast, as there&#xA;-- is no direct relation between Word8 and Float.&#xA;ctemp :: Stream Float&#xA;ctemp = (unsafeCast temp) * (150.0 / 255.0) - 50.0&#xA;&#xA;spec = do&#xA;  -- Triggers that fire when the ctemp is too low or too high,&#xA;  -- pass the current ctemp as an argument.&#xA;  trigger &#34;heaton&#34;  (ctemp &amp;lt; 18.0) [arg ctemp]&#xA;  trigger &#34;heatoff&#34; (ctemp &amp;gt; 21.0) [arg ctemp]&#xA;&#xA;-- Compile the spec&#xA;main = reify spec &amp;gt;&amp;gt;= compile &#34;heater&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The examples located in the &lt;code&gt;examples/&lt;/code&gt; directory can be run from the root of the project. Each example has a name. As a rule of thumb, the examples are named after the filename (without extension) in lowercase letters, and directory seperators replaced with a &#39;-&#39;. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cabal run addmult -f examples&#xA;cabal run counter -f examples&#xA;cabal run what4-arithmetic -f examples&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributions&lt;/h2&gt; &#xA;&lt;p&gt;Feel free to open new issues and send pull requests.&lt;/p&gt; &#xA;&lt;p&gt;In order to contribute to Copilot, please use the following steps which will make the process of evaluating and including your changes much easier:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Create an issue for every individual change or problem with Copilot. Document the issue well.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Always comment on the issues you are addressing in every commit. Be descriptive, and use the syntax &lt;code&gt;#&amp;lt;issue_number&amp;gt;&lt;/code&gt; so that we can track changes and issues easily.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Every commit should mention one issue and, ideally, only one.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Do not send a PR or commit that addresses multiple problems, unless they are related and cannot be separated.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Do not commit to master directly, except for branch merges. Make sure you always merge onto master using &lt;code&gt;--no-ff&lt;/code&gt; so that we can tell that features were addressed separately, completed, tested, and then merged. If you are a Copilot developer, create a branch for every issue you are addressing, complete it, and then merge onto master. Document every commit in every branch, including the last merge commit, stating the issues it addresses or closes.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This process is similar to &lt;a href=&#34;http://nvie.com/posts/a-successful-git-branching-model/&#34;&gt;Git Flow&lt;/a&gt;. The equivalent of Git Flow&#39;s master branch is our latest tag, and the equivalent of Git Flow&#39;s develop branch is our master.&lt;/p&gt; &#xA;&lt;h2&gt;Further information&lt;/h2&gt; &#xA;&lt;p&gt;For further information, including documentation and a tutorial, please visit the Copilot website: &lt;a href=&#34;https://copilot-language.github.io&#34;&gt;https://copilot-language.github.io&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Acknowledgements&lt;/h2&gt; &#xA;&lt;p&gt;We are grateful for NASA Contract NNL08AD13T to Galois, Inc. and the National Institute of Aerospace, which partially supported this work.&lt;/p&gt; &#xA;&lt;p&gt;Additionally NASA Langley contracts 80LARC17C0004 and NNL09AA00A supported further development of Copilot.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Copilot is distributed under the BSD-3-Clause license, which can be found &lt;a href=&#34;https://raw.githubusercontent.com/Copilot-Language/copilot/master/copilot/LICENSE&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;The Copilot Team&lt;/h2&gt; &#xA;&lt;p&gt;The development of Copilot spans across several years. During these years the following people have helped develop Copilot (in no particular order):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Lee Pike&lt;/li&gt; &#xA; &lt;li&gt;Alwyn Goodloe (maintainer)&lt;/li&gt; &#xA; &lt;li&gt;Robin Morisset&lt;/li&gt; &#xA; &lt;li&gt;Sebastian Niller&lt;/li&gt; &#xA; &lt;li&gt;Nis Wegmann&lt;/li&gt; &#xA; &lt;li&gt;Chris Hathhorn&lt;/li&gt; &#xA; &lt;li&gt;Eli Mendelson&lt;/li&gt; &#xA; &lt;li&gt;Jonathan Laurent&lt;/li&gt; &#xA; &lt;li&gt;Laura Titolo&lt;/li&gt; &#xA; &lt;li&gt;Georges-Axel Jolayan&lt;/li&gt; &#xA; &lt;li&gt;Macallan Cruff&lt;/li&gt; &#xA; &lt;li&gt;Ryan Spring&lt;/li&gt; &#xA; &lt;li&gt;Lauren Pick&lt;/li&gt; &#xA; &lt;li&gt;Frank Dedden (maintainer: contact at &lt;a href=&#34;mailto:dev@dedden.net&#34;&gt;dev@dedden.net&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Ivan Perez (maintainer)&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>TU-CSCI2322-FL22/workspace-11-30</title>
    <updated>2022-08-30T01:35:06Z</updated>
    <id>tag:github.com,2022-08-30:/TU-CSCI2322-FL22/workspace-11-30</id>
    <link href="https://github.com/TU-CSCI2322-FL22/workspace-11-30" rel="alternate"></link>
    <summary type="html">&lt;p&gt;workspace-11-30 created by GitHub Classroom&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
</feed>