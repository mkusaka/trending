<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Haskell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-02-14T01:39:23Z</updated>
  <subtitle>Daily Trending of Haskell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>tomsmeding/play-haskell</title>
    <updated>2023-02-14T01:39:23Z</updated>
    <id>tag:github.com,2023-02-14:/tomsmeding/play-haskell</id>
    <link href="https://github.com/tomsmeding/play-haskell" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Haskell Playground&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Haskell Playground&lt;/h1&gt; &#xA;&lt;p&gt;There&#39;s lots still to do, see &lt;a href=&#34;https://github.com/tomsmeding/play-haskell/raw/master/TODO.txt&#34;&gt;TODO.txt&lt;/a&gt;. If you want to contribute, perhaps connect with me (either via an issue or on &lt;a href=&#34;https://wiki.haskell.org/IRC_channel&#34;&gt;IRC&lt;/a&gt;) before writing lots of code.&lt;/p&gt; &#xA;&lt;h2&gt;GHCup target platform&lt;/h2&gt; &#xA;&lt;p&gt;Because the GHCup installation from the host machine will be used as-is in the containers of the workers, and because said containers run Ubuntu, the desired GHC versions must be installed as follows with &lt;code&gt;ghcup&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;ghcup install ghc -p x86_64-deb10-linux 8.10.7&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This ensures that the GHCs will work in the Ubuntu container. Note that currently (2022-08), Ubuntu GHCs seem to work fine on Arch Linux, for example.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;System setup: Ubuntu&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Note: earlyoom is only advised if you&#39;re deploying; not necessary on your local machine&#xA;sudo apt update &amp;amp;&amp;amp; sudo apt install earlyoom bubblewrap make npm jq&#xA;# Change &#34;-r 60&#34; to &#34;-r 3600&#34; in /etc/default/earlyoom (less spammy logs)&#xA;sudo systemctl restart earlyoom&#xA;&#xA;sudo apt install build-essential curl libffi-dev libffi7 libgmp-dev libgmp10 libncurses-dev libncurses5 libtinfo5 pkg-config&#xA;# Install ghcup: https://www.haskell.org/ghcup/ (skip HLS and stack)&#xA;# Open a new terminal to get ghcup in PATH&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;System setup: Arch Linux&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Note: earlyoom is only advised if you&#39;re deploying; not necessary on your local machine&#xA;sudo pacman -Syu earlyoom bubblewrap make npm jq&#xA;sudo systemctl enable --now earlyoom&#xA;&#xA;sudo pacman -S base-devel&#xA;# Install ghcup: https://www.haskell.org/ghcup/ (skip HLS and stack)&#xA;# Open a new terminal to get ghcup in PATH&#xA;# MAKE SURE TO INSTALL GHC FOR TARGET x86_64-deb10-linux&#xA;# See above in the &#39;GHCup target platform&#39; section&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Building the applications&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/tomsmeding/play-haskell --recurse-submodules&#xA;cd play-haskell&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To build the server (that hosts the website but doesn&#39;t run any user code):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd play-haskell-server&#xA;make&#xA;cabal build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To build the worker (that the server will connect to, and that runs user code (in a sandbox)):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd play-haskell-worker&#xA;make  # Or equivalently:&#xA;      #   make chroot ; make bwrap-files/systemd-run-shim ; make builders&#xA;      # &#39;make chroot&#39; is interactive, select en_US.UTF-8.&#xA;      # &#39;make builders&#39; takes a long time because it builds all packages that should&#xA;      #   be available on the playground with all GHCs you have installed with GHCup.&#xA;      #   If you want just a few of those GHCs to work in the playground, manually run:&#xA;      #     bwrap-files/mkbuildscript.sh 9.2.5&#xA;      #     bwrap-files/mkbuildscript.sh 8.10.7&#xA;      #   etc., once for each version you want to be available. Change available&#xA;      # packages in bwrap-files/mkbuildscript.sh .&#xA;cabal build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Optionally, if the machine you&#39;re building on does not have enough RAM, do this and use &lt;code&gt;cabal build -j1&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo fallocate -l 4G /swapfile&#xA;sudo chmod go-rw /swapfile&#xA;sudo mkswap /swapfile&#xA;sudo swapon /swapfile&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;During development:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;make frontend-dependencies&lt;/code&gt; in &lt;code&gt;play-haskell-server/&lt;/code&gt; whenever &lt;a href=&#34;https://github.com/tomsmeding/play-haskell/raw/master/play-haskell-server/static/package.json&#34;&gt;play-haskell-server/static/package.json&lt;/a&gt; changes&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;make frontend&lt;/code&gt; in &lt;code&gt;play-haskell-server/&lt;/code&gt; whenever some &lt;code&gt;*.ts&lt;/code&gt; file for the frontend changes&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;make reload-pages&lt;/code&gt; in &lt;code&gt;play-haskell-server/&lt;/code&gt; (or re-run &lt;code&gt;cabal run play-haskell-server&lt;/code&gt;) to reload mustache pages (or send &lt;code&gt;SIGUSR1&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Running the applications&lt;/h3&gt; &#xA;&lt;p&gt;To run the server: (all in &lt;code&gt;play-haskell-server/&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Put a good password in &lt;code&gt;adminpass.txt&lt;/code&gt; (filename does not matter, but adjust below)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cabal run gen-secret-key -- secretkey.txt&lt;/code&gt; (filename does not matter, but adjust below) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Remember the public key that it prints, say &lt;code&gt;$SERVER_PUBKEY&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Optional: put one or more lines of the form &lt;code&gt;{http://}hostname{:port} $WORKER1_PUBKEY&lt;/code&gt; in &lt;code&gt;preload-workers.txt&lt;/code&gt;, where the &lt;code&gt;{}&lt;/code&gt; parts are optional (if not given, uses https on port 443); that &lt;code&gt;$WORKER1_PUBKEY&lt;/code&gt; is produced by the steps to run a worker, see below&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cabal run play-haskell-server -- --adminpassfile adminpass.txt --secretkey secretkey.txt --preloadworkers preload-workers.txt&lt;/code&gt; (omit the &lt;code&gt;--preloadworkers&lt;/code&gt; if you didn&#39;t do that step)&lt;/li&gt; &#xA; &lt;li&gt;See &lt;code&gt;cabal run play-haskell-server -- --help&lt;/code&gt; for more info on options; the server listens with http on port 8123 by default&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;To run a worker: (all in &lt;code&gt;play-haskell-worker/&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;cabal run gen-secret-key -- secretkey.txt&lt;/code&gt; (filename does not matter, but adjust below) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Remember the public key that it prints, say &lt;code&gt;$WORKER1_PUBKEY&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Put one or more &lt;code&gt;$SERVER_PUBKEY&lt;/code&gt; in &lt;code&gt;trustedkeys.txt&lt;/code&gt; (filename does not matter, but adjust below)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cabal run play-haskell-worker -- --secretkey secretkey.txt --trustedkeys trustedkeys.txt +RTS -N&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;See &lt;code&gt;cabal run play-haskell-worker -- --help&lt;/code&gt; for more info on options; the worker listens with http on port 8124 by default, use a reverse proxy ssl terminator to get https&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Server admin interface&lt;/h3&gt; &#xA;&lt;p&gt;On &lt;code&gt;example.com/admin&lt;/code&gt; the server exposes a simple admin interface through which you can add and remove workers. If you don&#39;t want to add workers this way, use the &lt;code&gt;--preloadworkers&lt;/code&gt; flag described above.&lt;/p&gt; &#xA;&lt;h2&gt;Storage&lt;/h2&gt; &#xA;&lt;p&gt;Pasted snippets are stored in an SQLite database in the file &lt;code&gt;pastes.db&lt;/code&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>