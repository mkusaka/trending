<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Haskell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-11-24T01:35:15Z</updated>
  <subtitle>Daily Trending of Haskell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>objectionary/try-phi</title>
    <updated>2022-11-24T01:35:15Z</updated>
    <id>tag:github.com,2022-11-24:/objectionary/try-phi</id>
    <link href="https://github.com/objectionary/try-phi" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Online interactive parser and translator of EO and ùúë-calculus&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Try-phi&lt;/h1&gt; &#xA;&lt;img alt=&#34;logo&#34; src=&#34;https://www.objectionary.com/cactus.svg?sanitize=true&#34; height=&#34;100px&#34;&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://hitsofcode.com/view/github/objectionary/try-phi?branch=main&#34;&gt;&lt;img src=&#34;https://hitsofcode.com/github/objectionary/try-phi?branch=main&#34; alt=&#34;Hits-of-Code&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/tokei/lines/github/objectionary/try-phi?style=flat-square&#34; alt=&#34;Lines of code&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;This is an experimental interpreter for a variant of ùúë-calculus. Right now we implement it as a term rewriting system.&lt;/p&gt; &#xA;&lt;p&gt;It is combined with &lt;a href=&#34;https://github.com/objectionary/eo&#34;&gt;EO&lt;/a&gt; editor. EO is based on ùúë-calculus.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The online playground is available &lt;a href=&#34;https://www.objectionary.com/try-phi/?editor=phi&amp;amp;snippet=%5B%0A%20%20a%20-%3E%203%2C%0A%20%20b%20-%3E%20%5E0.a%0A%5D.b&#34;&gt;here&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Components&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/objectionary/try-phi/main/back/&#34;&gt;Back end&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/objectionary/try-phi/main/front/&#34;&gt;Front end&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/deemp/eo-editor&#34;&gt;EO editor&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/deemp/phi-editor&#34;&gt;Phi editor&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Prerequisites&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Install &lt;a href=&#34;https://nixos.org/download.html&#34;&gt;Nix&lt;/a&gt; (Single-user installation)&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sh &amp;lt;(curl -L https://nixos.org/nix/install) --no-daemon&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Enable &lt;a href=&#34;https://nixos.wiki/wiki/Flakes#Permanent&#34;&gt;flakes&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Enter the repo&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone https://github.com/objectionary/try-phi&#xA;cd try-phi&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Quick start&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Run back and front in separate terminals&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;nix run .#back&#xA;nix run .#front&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Install &lt;a href=&#34;https://nix.dev/tutorials/declarative-and-reproducible-developer-environments#direnv-automatically-activating-the-environment-on-directory-change&#34;&gt;direnv&lt;/a&gt; - steps 1, 2&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://nixos.wiki/wiki/Flakes#Enable_flakes&#34;&gt;Enable flakes&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Allow direnv in flake folders&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;direnv allow&#xA;(cd front &amp;amp;&amp;amp; direnv allow)&#xA;(cd back &amp;amp;&amp;amp; direnv allow &amp;amp;&amp;amp; stack build)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Open Codium&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;nix develop&#xA;codium .&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Hotkey for &lt;code&gt;Command palette&lt;/code&gt; - &lt;code&gt;Ctrl&lt;/code&gt; (&lt;code&gt;Cmd&lt;/code&gt;) + &lt;code&gt;Shift&lt;/code&gt; + &lt;code&gt;P&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Start app - a browser window should open&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Command palette -&amp;gt; &lt;code&gt;Tasks: Run Task&lt;/code&gt; -&amp;gt; &lt;code&gt;Run app&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Terminate app&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Command palette -&amp;gt; &lt;code&gt;Tasks: Terminate Task&lt;/code&gt; -&amp;gt; &lt;code&gt;All Running Tasks&lt;/code&gt;&amp;gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;In case of problems reload the window (&lt;code&gt;Ctrl&lt;/code&gt; + &lt;code&gt;Shift&lt;/code&gt; + &lt;code&gt;P&lt;/code&gt; -&amp;gt; &lt;code&gt;Developer: Reload window&lt;/code&gt;) and repeat previous commands to start the server and the client&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>haskell-hvr/HsYAML-aeson</title>
    <updated>2022-11-24T01:35:15Z</updated>
    <id>tag:github.com,2022-11-24:/haskell-hvr/HsYAML-aeson</id>
    <link href="https://github.com/haskell-hvr/HsYAML-aeson" rel="alternate"></link>
    <summary type="html">&lt;p&gt;JSON to YAML Adapter&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;HsYAML-aeson: JSON to YAML Adapter&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://hackage.haskell.org/package/HsYAML-aeson&#34;&gt;&lt;img src=&#34;https://img.shields.io/hackage/v/HsYAML-aeson.svg?sanitize=true&#34; alt=&#34;Hackage&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;About&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;YAML 1.2&lt;/code&gt; format provides a much richer data-model and feature-set than the JavaScript Object Notation (JSON) format.&lt;br&gt; However, sometimes it&#39;s desirable to ignore the extra capabilities and treat YAML as if it was merely a more convenient markup format for humans to write JSON data.&lt;/p&gt; &#xA;&lt;p&gt;So, &lt;code&gt;HsYAML-aeson&lt;/code&gt; module provides a compatibility layer atop &lt;code&gt;HsYAML&lt;/code&gt; which allows decoding YAML documents in the more limited JSON data-model while also providing convenience by reusing aeson&#39;s &lt;code&gt;FromJSON&lt;/code&gt; instances for decoding the YAML data into native Haskell data types.&lt;/p&gt; &#xA;&lt;p&gt;See what&#39;s changed in recent (and upcoming) releases &lt;a href=&#34;https://raw.githubusercontent.com/haskell-hvr/HsYAML-aeson/master/CHANGELOG.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;The primary API documentation for &lt;code&gt;HsYAML-aeson&lt;/code&gt; is its Haddock documentation which can be found &lt;a href=&#34;http://hackage.haskell.org/package/HsYAML-aeson&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Install the &lt;code&gt;HsYAML-aeson&lt;/code&gt; package.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cabal install HsYAML-aeson&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;http://hackage.haskell.org/package/HsYAML-aeson&#34;&gt;dependencies&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Developers and Maintainers&lt;/h2&gt; &#xA;&lt;p&gt;The library is developed and maintained by &lt;a href=&#34;https://github.com/hvr&#34;&gt;Herbert Valerio Riedel&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;This project is licensed under X-SPDX-License-Identifier: &lt;a href=&#34;https://spdx.org/licenses/GPL-2.0-or-later.html&#34;&gt;GPL-2.0-or-later&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>batterseapower/test-framework</title>
    <updated>2022-11-24T01:35:15Z</updated>
    <id>tag:github.com,2022-11-24:/batterseapower/test-framework</id>
    <link href="https://github.com/batterseapower/test-framework" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Framework for running and organising QuickCheck test properties and HUnit test cases&lt;/p&gt;&lt;hr&gt;&lt;p&gt;You may want to look at the branch of this project at &lt;a href=&#34;https://github.com/haskell/test-framework&#34;&gt;https://github.com/haskell/test-framework&lt;/a&gt; instead, it may be more actively maintained.&lt;/p&gt;</summary>
  </entry>
</feed>