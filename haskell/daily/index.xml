<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Haskell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-12-01T01:40:13Z</updated>
  <subtitle>Daily Trending of Haskell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>input-output-hk/cardano-sl-x509</title>
    <updated>2022-12-01T01:40:13Z</updated>
    <id>tag:github.com,2022-12-01:/input-output-hk/cardano-sl-x509</id>
    <link href="https://github.com/input-output-hk/cardano-sl-x509" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Tool-suite for generating x509 certificates specialized for RSA with SHA-256&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Cardano-SL-x509&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Pure Haskell &#39;replacement&#39; for OpenSSL to generate certificates for a TLS Private Key Infrastructure&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;How to Use&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-hs&#34;&gt;import           Crypto.PubKey.RSA (PrivateKey, PublicKey)&#xA;&#xA;import           Cardano.X509.Configuration (DirConfiguration(..), CertDescription(..),&#xA;                     decodeConfigFile, fromConfiguration, genCertificate)&#xA;import           Data.X509.Extra (genRSA256KeyPair)&#xA;&#xA;&#xA;main :: IO ()&#xA;main = do&#xA;    confFile &amp;lt;-&#xA;        decodeConfigFile &#34;dev&#34; &#34;lib/configuration.yaml&#34;&#xA;&#xA;    let dirConf =&#xA;          DirConfiguration &#34;server&#34; &#34;client&#34; Nothing&#xA;&#xA;    (caDesc, certDescs) &amp;lt;-&#xA;        fromConfiguration confFile dirConf genRSA256KeyPair &amp;lt;$&amp;gt; genRSA256KeyPair&#xA;&#xA;    (caKey, caCert) &amp;lt;- &#xA;        genCertificate caDesc&#xA;&#xA;    (clientKey, clientCert) &amp;lt;-&#xA;        genCertificate (findCert &#34;client&#34; certDescs)&#xA;&#xA;    (serverKey, serverCert) &amp;lt;-&#xA;        genCertificate (findCert &#34;server&#34; certDescs)&#xA;&#xA;    -- Do something with the Private Key Infrastructure&#xA;  where&#xA;    findCert &#xA;      :: String &#xA;      -&amp;gt; [CertDescription IO PublicKey PrivateKey String]&#xA;      -&amp;gt; CertDescription IO PublicKey PrivateKey String&#xA;    findCert outDir =&#xA;        head . find ((== outDir) . certOutDir)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, have a look at &lt;a href=&#34;https://github.com/input-output-hk/cardano-sl/tools/src/gencerts/Main.hs&#34;&gt;gencerts/Main.hs&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Configuration Key&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;*.*.organization&lt;/td&gt; &#xA;   &lt;td&gt;Organization name identified by the certificate&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;*.*.commonName&lt;/td&gt; &#xA;   &lt;td&gt;Name of the service identified by the certificate&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;*.*.expiryDays&lt;/td&gt; &#xA;   &lt;td&gt;Number of days after which the certificate expires&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;tls.server.altDNS&lt;/td&gt; &#xA;   &lt;td&gt;Alternative Subject Names for the server&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Note that the &lt;code&gt;clients&lt;/code&gt; section requires (and accepts) a list of clients. You may define more than one client certificates at once.&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;configuration.yaml&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;dev: &#xA;  tls: &#xA;    ca:&#xA;      organization: Input Output HK&#xA;      commonName: Cardano SL Self-Signed Root CA&#xA;      expiryDays: 3650&#xA;&#xA;    server:&#xA;      organization: Input Output HK&#xA;      commonName: Cardano SL Server Node&#xA;      expiryDays: 365&#xA;      altDNS:&#xA;        - &#34;localhost&#34;&#xA;        - &#34;localhost.localdomain&#34;&#xA;        - &#34;127.0.0.1&#34;&#xA;        - &#34;::1&#34;&#xA;&#xA;    clients:&#xA;      - organization: Input Output HK&#xA;        commonName: Daedalus Wallet&#xA;        expiryDays: 365&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt;</summary>
  </entry>
  <entry>
    <title>input-output-hk/nix-archive</title>
    <updated>2022-12-01T01:40:13Z</updated>
    <id>tag:github.com,2022-12-01:/input-output-hk/nix-archive</id>
    <link href="https://github.com/input-output-hk/nix-archive" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A library and executable for manipulating Nix Archive files&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Nix Archive&lt;/h1&gt; &#xA;&lt;p&gt;This is a library for generating Nix Archive (NAR) files. This package is currently incomplete and only satisfies one particular need, being able to generate Nix Sha256 hashes for a git checkout at a specified git hash (without actually having Nix installed).&lt;/p&gt; &#xA;&lt;p&gt;It is written as a reusable library and command line wrapper around the library.&lt;/p&gt; &#xA;&lt;h2&gt;What works&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Generating a NAR file from a git repo either at HEAD of the repo or at a specified git hash.&lt;/li&gt; &#xA; &lt;li&gt;Generate the Nix SHA256 hash from a git repo either at HEAD of the repo or at a specified git hash (without actually generating the NAR file).&lt;/li&gt; &#xA; &lt;li&gt;Generate a Nix SHA256 hash for a given file.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Required to make this complete&lt;/h2&gt; &#xA;&lt;p&gt;This is what is needed for this to become complete enough to upload to Hackage:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Generate a NAR file from a specified directory.&lt;/li&gt; &#xA; &lt;li&gt;Generate a Nix SHA256 hash from a specified directory.&lt;/li&gt; &#xA; &lt;li&gt;Unpack a NAR file.&lt;/li&gt; &#xA; &lt;li&gt;Tests.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>input-output-hk/nothunks</title>
    <updated>2022-12-01T01:40:13Z</updated>
    <id>tag:github.com,2022-12-01:/input-output-hk/nothunks</id>
    <link href="https://github.com/input-output-hk/nothunks" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;nothunks&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/input-output-hk/nothunks/actions&#34;&gt;&lt;img src=&#34;https://github.com/input-output-hk/nothunks/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;GitHub CI&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Long lived application data typically should not contain any thunks. This library can be used to examine values for unexpected thunks, which can then be used in assertions. This can be invaluable in avoiding memory leaks, or tracking down existing ones.&lt;/p&gt; &#xA;&lt;p&gt;See my presentation &lt;a href=&#34;https://www.youtube.com/watch?v=7t6wt7ByBWg&#34;&gt;MuniHac 2020: Being lazy without being bloated&lt;/a&gt; for an overview, motivating the library and explaining how it is intended to be used and how it works internally.&lt;/p&gt;</summary>
  </entry>
</feed>