<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Haskell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-09-24T01:32:02Z</updated>
  <subtitle>Daily Trending of Haskell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>kevwil/gityup-haskell</title>
    <updated>2023-09-24T01:32:02Z</updated>
    <id>tag:github.com,2023-09-24:/kevwil/gityup-haskell</id>
    <link href="https://github.com/kevwil/gityup-haskell" rel="alternate"></link>
    <summary type="html">&lt;p&gt;just like svnup-haskell but for git ;-)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;gityup-haskell&lt;/h1&gt; &#xA;&lt;p&gt;just like svnup-haskell but for git ;-)&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>maxscheiber/LC4-haskell</title>
    <updated>2023-09-24T01:32:02Z</updated>
    <id>tag:github.com,2023-09-24:/maxscheiber/LC4-haskell</id>
    <link href="https://github.com/maxscheiber/LC4-haskell" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Purely functional interpreter for the educational LC-4 ISA.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;LC4-haskell&lt;/h1&gt; &#xA;&lt;p&gt;Purely functional interpreter for the educational LC-4 ISA, written by Max Scheiber (scheiber), and Ashutosh Goel (asgoel). The LC-4 ISA is a custom instruction set architecture created at the University of Pennslyvania, based off of the popular LC-3 ISA. The LC-4 ISA is commonly used for educational purposes, in classes such as CIS 240 (Intro. to Computer Architecture) at the University of Pennsylvania.&lt;/p&gt; &#xA;&lt;h1&gt;Main&lt;/h1&gt; &#xA;&lt;p&gt;To compile, run ghc --make Main.hs. This will compile Main.hs and all of its dependencies automatically. To run, type ./Main. This will open up a repl in which you can input the assembly filename, and the program will assemble and process the code, and print out the final Machine state when done. Note that this repl is very basic and reads each file one at a time. One idea for future work is to allow for multiple file execution (i.e. if one file needs another file as well).&lt;/p&gt; &#xA;&lt;h1&gt;Parser&lt;/h1&gt; &#xA;&lt;p&gt;The Parser library is a generic monadic Parser, built off of Dr. Stephanie Weirich&#39;s version for CIS 552 at the University of Pennslyvania.&lt;/p&gt; &#xA;&lt;h1&gt;LC4&lt;/h1&gt; &#xA;&lt;p&gt;The LC4 library is a collection of files which defines the typesystem used in the LC4 simulator, as well as a custom Parser for assembly files built off of the Parser library mentioned above. The LC4 contains all the code neccessary for interpreting instructions, including preprocessing and executing an assembly file. The key component, the machine state, is built off of the State monad and is kept and updated throughout execution. The LC4 library also contains basic error checking, based off of common errors seen in LC4 assembly code.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>UnBParadigmas2023-2/2023.2_G3_Funcional</title>
    <updated>2023-09-24T01:32:02Z</updated>
    <id>tag:github.com,2023-09-24:/UnBParadigmas2023-2/2023.2_G3_Funcional</id>
    <link href="https://github.com/UnBParadigmas2023-2/2023.2_G3_Funcional" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;RPG de Texto&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;Disciplina&lt;/strong&gt;: FGA0210 - PARADIGMAS DE PROGRAMAÇÃO - T01 &lt;br&gt; &lt;strong&gt;Nro do Grupo&lt;/strong&gt;: 03&lt;br&gt; &lt;strong&gt;Paradigma&lt;/strong&gt;: Funcional&lt;br&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Alunos&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Matrícula&lt;/th&gt; &#xA;   &lt;th&gt;Aluno&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;19/0010606&lt;/td&gt; &#xA;   &lt;td&gt;Artur de Sousa Vieira&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;19/0024950&lt;/td&gt; &#xA;   &lt;td&gt;Arthur de Melo Garcia&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;19/0011424&lt;/td&gt; &#xA;   &lt;td&gt;Carlos Eduardo Miranda Roriz&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;17/0032591&lt;/td&gt; &#xA;   &lt;td&gt;Edvan Barreira Gomes Júnior&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;19/0109963&lt;/td&gt; &#xA;   &lt;td&gt;João Victor Teixeira Batista&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;19/0112123&lt;/td&gt; &#xA;   &lt;td&gt;Lucas Gabriel Sousa Camargo Paiva&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;20/0023411&lt;/td&gt; &#xA;   &lt;td&gt;Luíza Esteves dos Santos&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;16/0141842&lt;/td&gt; &#xA;   &lt;td&gt;Philipe Rosa Serafim&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Sobre&lt;/h2&gt; &#xA;&lt;p&gt;O projeto consiste em um jogo de RPG dinâmico em Haskell que traz uma história cômica ao usuário de matrícula no sistema da UnB, onde quem está jogando pode escolher o caminho a ser tomado, e cada um leva a fins diferentes.&lt;/p&gt; &#xA;&lt;p&gt;O projeto usa de estrutura de grafos e parser para leitura de um arquivo txt para criação dos nós, os quais são navegados de acordo com a opção escolhida pelo usuário.&lt;/p&gt; &#xA;&lt;p&gt;Abaixo consta a estrutura da história usada para criação do arquivo txt.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/UnBParadigmas2023-2/2023.2_G3_Funcional/assets/66687841/603fc808-ea65-4f90-a2d9-4508197ee125&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Screenshots&lt;/h2&gt; &#xA;&lt;p&gt;Adicione 2 ou mais screenshots do projeto em termos de interface e/ou funcionamento.&lt;/p&gt; &#xA;&lt;h2&gt;Instalação&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Linguagens&lt;/strong&gt;: &lt;a href=&#34;https://www.haskell.org/downloads/&#34;&gt;Haskell&lt;/a&gt;&lt;br&gt; &lt;strong&gt;Tecnologias&lt;/strong&gt;: &lt;a href=&#34;https://docs.haskellstack.org/en/stable/&#34;&gt;Stack&lt;/a&gt; e &lt;a href=&#34;https://www.haskell.org/cabal/&#34;&gt;Cabal&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Como executar o projeto&lt;/h2&gt; &#xA;&lt;p&gt;Após instalar todas as dependências e clonar o projeto, é necessário acessar a pasta &lt;code&gt;RPG-TEXTO&lt;/code&gt; e executar o comando &lt;code&gt;stack build&lt;/code&gt; para compilar o projeto. Para iniciar o programa, basta executar &lt;code&gt;stack run&lt;/code&gt; ou &lt;code&gt;stack exec RPG-texto-exe&lt;/code&gt;. Caso queira excluir os binários compilados, basta executar &lt;code&gt;stack clean&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Vídeo&lt;/h2&gt; &#xA;&lt;p&gt;Adicione 1 ou mais vídeos com a execução do projeto. Procure: (i) Introduzir o projeto; (ii) Mostrar passo a passo o código, explicando-o, e deixando claro o que é de terceiros, e o que é contribuição real da equipe; (iii) Apresentar particularidades do Paradigma, da Linguagem, e das Tecnologias, e (iV) Apresentar lições aprendidas, contribuições, pendências, e ideias para trabalhos futuros. OBS: TODOS DEVEM PARTICIPAR, CONFERINDO PONTOS DE VISTA. TEMPO: +/- 15min&lt;/p&gt; &#xA;&lt;h2&gt;Participações&lt;/h2&gt; &#xA;&lt;p&gt;Apresente, brevemente, como cada membro do grupo contribuiu para o projeto.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Nome do Membro&lt;/th&gt; &#xA;   &lt;th&gt;Contribuição&lt;/th&gt; &#xA;   &lt;th&gt;Significância da Contribuição para o Projeto (Excelente/Boa/Regular/Ruim/Nula)&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Artur de Sousa Vieira&lt;/td&gt; &#xA;   &lt;td&gt;Contribuição com a ideia inicial, criação da história, Concepção do parser e documentação&lt;/td&gt; &#xA;   &lt;td&gt;Boa&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Arthur de Melo Garcia&lt;/td&gt; &#xA;   &lt;td&gt;Contribuiu com a Documentação do projeto&lt;/td&gt; &#xA;   &lt;td&gt;Boa&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Carlos Eduardo Miranda Roriz&lt;/td&gt; &#xA;   &lt;td&gt;Contribuiu com a implementação toy da estrutura&lt;/td&gt; &#xA;   &lt;td&gt;Excelente&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Edvan Barreira Gomes Júnior&lt;/td&gt; &#xA;   &lt;td&gt;Contribuiu com a integração do parser ao projeto e documentação do projeto&lt;/td&gt; &#xA;   &lt;td&gt;Boa&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;João Victor Teixeira Batista&lt;/td&gt; &#xA;   &lt;td&gt;Contribuiu com a implementação do parser/filereader e estudo do defeito encontrado&lt;/td&gt; &#xA;   &lt;td&gt;Excelente&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Lucas Gabriel Sousa Camargo Paiva&lt;/td&gt; &#xA;   &lt;td&gt;Contribuiu com a criação da história, auxiliou na implementação do grafo, correção do defeito encontrado e documentação do projeto&lt;/td&gt; &#xA;   &lt;td&gt;Boa&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Luíza Esteves dos Santos&lt;/td&gt; &#xA;   &lt;td&gt;Contribuiu com a criação da história, implementação do grafo, estudo do defeito encontrado e documentação do projeto&lt;/td&gt; &#xA;   &lt;td&gt;Excelente&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Philipe Rosa Serafim&lt;/td&gt; &#xA;   &lt;td&gt;Contribuiu com a estrutura do projeto, modularização, correção do defeito encontrado e documentação do projeto&lt;/td&gt; &#xA;   &lt;td&gt;Excelente&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Menção honrosa ao &lt;strong&gt;Pedro Helias Carlos&lt;/strong&gt; que criou o repositório e teve participação no estudo da estrutura do projeto.&lt;/p&gt; &#xA;&lt;h2&gt;Outros&lt;/h2&gt; &#xA;&lt;h3&gt;Lições Aprendidas&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Implementação da estrutura de grafo&lt;/li&gt; &#xA; &lt;li&gt;Paradigma funcional&lt;/li&gt; &#xA; &lt;li&gt;Modularização&lt;/li&gt; &#xA; &lt;li&gt;Própria linguagem Haskell&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Percepções&lt;/h3&gt; &#xA;&lt;h3&gt;Contribuições e Fragilidades&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A estrutura do texto precisa estar exatamente igual ao padrão estipulado&lt;/li&gt; &#xA; &lt;li&gt;GHCI apresentou problemas sem solução na comunidade para algumas máquinas dos membros&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Trabalhos Futuros&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Implementar um criador de cenários que produza arquivos &lt;code&gt;.txt&lt;/code&gt; no formato suportado pelo parser&lt;/li&gt; &#xA; &lt;li&gt;Melhorar interface&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Fontes&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.haskell.org/cabal/&#34;&gt;Cabal&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://hackage.haskell.org/package/split-0.2.3.5/docs/Data-List-Split.html&#34;&gt;Data.split&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://hackage.haskell.org/package/graphite&#34;&gt;Graphite&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.haskell.org/downloads/&#34;&gt;Haskell&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://hackage.haskell.org/package/fgl&#34;&gt;Martin Erwig&#39;s Functional Graph Library&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Materiais disponibilizados em aula&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>