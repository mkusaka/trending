<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Haskell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-01-04T01:32:24Z</updated>
  <subtitle>Daily Trending of Haskell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>fosskers/aura</title>
    <updated>2023-01-04T01:32:24Z</updated>
    <id>tag:github.com,2023-01-04:/fosskers/aura</id>
    <link href="https://github.com/fosskers/aura" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A secure, multilingual package manager for Arch Linux and the AUR.&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/fosskers/aura/master/logo/medium-150x150.png&#34;&gt; &#xA; &lt;h1&gt;The Aura Package Manager&lt;/h1&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://github.com/fosskers/aura/workflows/Tests/badge.svg?sanitize=true&#34; alt=&#34;img&#34;&gt; &lt;a href=&#34;http://hackage.haskell.org/package/aura&#34;&gt;&lt;img src=&#34;https://img.shields.io/hackage/v/aura.svg?sanitize=true&#34; alt=&#34;img&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/downloads/fosskers/aura/total.svg?sanitize=true&#34; alt=&#34;img&#34;&gt;&lt;/p&gt; &#xA; &lt;div&gt; &#xA;  &lt;span&gt;🇬🇧&lt;/span&gt; &#xA;  &lt;span&gt;🇯🇵&lt;/span&gt; &#xA;  &lt;span&gt;🇭🇷&lt;/span&gt; &#xA;  &lt;span&gt;🇸🇪&lt;/span&gt; &#xA;  &lt;span&gt;🇩🇪&lt;/span&gt; &#xA;  &lt;span&gt;🇪🇸&lt;/span&gt; &#xA;  &lt;span&gt;🇵🇹&lt;/span&gt; &#xA;  &lt;span&gt;🇫🇷&lt;/span&gt; &#xA;  &lt;span&gt;🇷🇺&lt;/span&gt; &#xA;  &lt;span&gt;🇮🇹&lt;/span&gt; &#xA;  &lt;span&gt;🇷🇸&lt;/span&gt; &#xA;  &lt;span&gt;🇳🇴&lt;/span&gt; &#xA;  &lt;span&gt;🇮🇩&lt;/span&gt; &#xA;  &lt;span&gt;🇨🇳&lt;/span&gt; &#xA;  &lt;span&gt;🇳🇱&lt;/span&gt; &#xA;  &lt;span&gt;🇹🇷&lt;/span&gt; &#xA;  &lt;span&gt;🇸🇦&lt;/span&gt; &#xA;  &lt;span&gt;🇺🇦&lt;/span&gt; &#xA;  &lt;span&gt;🇷🇴&lt;/span&gt; &#xA;  &lt;span&gt;🇻🇳&lt;/span&gt; &#xA;  &lt;span&gt;🇨🇿&lt;/span&gt; &#xA;  &lt;span&gt;🇰🇷&lt;/span&gt; &#xA; &lt;/div&gt; &#xA; &lt;br&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;Welcome to the main repository for Aura, a secure, multilingual package manager for Arch Linux.&lt;/p&gt; &#xA;&lt;p&gt;Check out &lt;a href=&#34;https://fosskers.github.io/aura/&#34;&gt;The Aura Book&lt;/a&gt; for all knowledge and usage instructions!&lt;/p&gt; &#xA;&lt;p&gt;If Aura has made your life easier, please consider &lt;a href=&#34;https://www.buymeacoffee.com/fosskers&#34;&gt;buying me a coffee&lt;/a&gt; &lt;span&gt;☕&lt;/span&gt; or supporting Aura through &lt;a href=&#34;https://github.com/sponsors/fosskers&#34;&gt;Github Sponsors&lt;/a&gt; &lt;img alt=&#34;octocat&#34; src=&#34;https://github.githubassets.com/images/icons/emoji/octocat.png?v8&#34;&gt;). Your help goes a long way!&lt;/p&gt; &#xA;&lt;!-- markdown-toc start - Don&#39;t edit this section. Run M-x markdown-toc-refresh-toc --&gt; &#xA;&lt;p&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fosskers/aura/master/#aura&#34;&gt;Aura&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fosskers/aura/master/#what-is-aura&#34;&gt;What is Aura?&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fosskers/aura/master/#the-aura-philosophy&#34;&gt;The Aura Philosophy&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fosskers/aura/master/#aura-is-pacman&#34;&gt;Aura is Pacman&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fosskers/aura/master/#arch-is-arch---aur-is-aur&#34;&gt;Arch is Arch - AUR is AUR&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fosskers/aura/master/#secure-package-building&#34;&gt;Secure Package Building&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fosskers/aura/master/#downgradibility&#34;&gt;Downgradibility&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fosskers/aura/master/#arch-linux-for-everyone&#34;&gt;Arch Linux for Everyone&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fosskers/aura/master/#haskell&#34;&gt;Haskell&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fosskers/aura/master/#installation&#34;&gt;Installation&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fosskers/aura/master/#prebuilt-binaries&#34;&gt;Prebuilt Binaries&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fosskers/aura/master/#building-from-source&#34;&gt;Building from Source&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fosskers/aura/master/#sample-usage&#34;&gt;Sample Usage&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fosskers/aura/master/#installing-packages&#34;&gt;Installing Packages&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fosskers/aura/master/#package-set-snapshots&#34;&gt;Package Set Snapshots&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fosskers/aura/master/#downgrading-via-the-package-cache&#34;&gt;Downgrading via the Package Cache&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fosskers/aura/master/#searching-the-pacman-log&#34;&gt;Searching the Pacman Log&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fosskers/aura/master/#managing-orphan-packages&#34;&gt;Managing Orphan Packages&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fosskers/aura/master/#pkgbuild-security-analysis&#34;&gt;PKGBUILD Security Analysis&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fosskers/aura/master/#configuration&#34;&gt;Configuration&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fosskers/aura/master/#localisation&#34;&gt;Localisation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fosskers/aura/master/#credits&#34;&gt;Credits&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fosskers/aura/master/#the-aur-haskell-library&#34;&gt;The &lt;code&gt;aur&lt;/code&gt; Haskell Library&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fosskers/aura/master/#the-aursec-tool&#34;&gt;The &lt;code&gt;aursec&lt;/code&gt; Tool&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- markdown-toc end --&gt; &#xA;&lt;h1&gt;Aura&lt;/h1&gt; &#xA;&lt;h2&gt;What is Aura?&lt;/h2&gt; &#xA;&lt;p&gt;Aura is a package manager for Arch Linux. Its original purpose is as an &lt;em&gt;AUR helper&lt;/em&gt;, in that it automates the process of installing packages from the Arch User Repositories. It is, however, capable of much more.&lt;/p&gt; &#xA;&lt;h2&gt;The Aura Philosophy&lt;/h2&gt; &#xA;&lt;h3&gt;Aura is Pacman&lt;/h3&gt; &#xA;&lt;p&gt;Aura doesn&#39;t just mimic &lt;code&gt;pacman&lt;/code&gt;; it &lt;em&gt;is&lt;/em&gt; &lt;code&gt;pacman&lt;/code&gt;. All &lt;code&gt;pacman&lt;/code&gt; operations and their sub-options are allowed. Some even hold special meaning in Aura as well.&lt;/p&gt; &#xA;&lt;h3&gt;Arch is Arch - AUR is AUR&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;-S&lt;/code&gt; yields pacman packages and &lt;em&gt;only&lt;/em&gt; pacman packages. This agrees with the above. In Aura, the &lt;code&gt;-A&lt;/code&gt; operation is introduced for obtaining AUR packages. &lt;code&gt;-A&lt;/code&gt; comes with sub-options you&#39;re used to (&lt;code&gt;-u&lt;/code&gt;, &lt;code&gt;-s&lt;/code&gt;, &lt;code&gt;-i&lt;/code&gt;, etc.).&lt;/p&gt; &#xA;&lt;h3&gt;Secure Package Building&lt;/h3&gt; &#xA;&lt;p&gt;PKGBUILDs from the AUR can contain anything. It&#39;s a user&#39;s responsibility to verify the contents of a PKGBUILD before building, but people can make mistakes and overlook details. Aura scans PKGBUILDs before building to detect bash misuse and other exploits. The &lt;code&gt;-P&lt;/code&gt; command is also provided for scanning your own PKGBUILDs.&lt;/p&gt; &#xA;&lt;p&gt;Also, while pre-build PKGBUILD editing is not default behaviour, this can be achieved with &lt;code&gt;--hotedit&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Downgradibility&lt;/h3&gt; &#xA;&lt;p&gt;Aura allows you to downgrade individual packages to previous versions with &lt;code&gt;-C&lt;/code&gt;. It also handles snapshots of your entire system, so that you can roll back whole sets of packages when problems arise. The option &lt;code&gt;-B&lt;/code&gt; will save a package state, and &lt;code&gt;-Br&lt;/code&gt; will restore a state you select. &lt;code&gt;-Su&lt;/code&gt; and &lt;code&gt;-Au&lt;/code&gt; also invoke a save automatically.&lt;/p&gt; &#xA;&lt;h3&gt;Arch Linux for Everyone&lt;/h3&gt; &#xA;&lt;p&gt;English is the dominant language of computing and the internet. That said, it&#39;s natural that some people are going to be more comfortable working in their native language. From the beginning, Aura has been built with multiple-language support in mind, making it very easy to add new ones.&lt;/p&gt; &#xA;&lt;h3&gt;Haskell&lt;/h3&gt; &#xA;&lt;p&gt;Aura is written in Haskell, which means easy development and beautiful code. Please feel free to use it as a Haskell reference. Aura code demonstrates:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Parser combinators (&lt;code&gt;megaparsec&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;CLI flag handling (&lt;code&gt;optparse-applicative&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Concurrency (&lt;code&gt;scheduler&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Shell interaction (&lt;code&gt;typed-process&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Pretty printing (&lt;code&gt;prettyprinter&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Logging (&lt;code&gt;rio&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Modern Haskell project architecture (config, CI, distribution)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Prebuilt Binaries&lt;/h3&gt; &#xA;&lt;p&gt;It is recommended to install the prebuilt binary of Aura:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://aur.archlinux.org/aura-bin.git&#xA;cd aura-bin&#xA;makepkg&#xA;sudo pacman -U &amp;lt;the-package-file-that-makepkg-produces&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Building from Source&lt;/h3&gt; &#xA;&lt;p&gt;You will need the &lt;a href=&#34;https://docs.haskellstack.org/en/stable/README/&#34;&gt;Stack Tool&lt;/a&gt; for Haskell to compile Aura yourself. Then:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/fosskers/aura.git&#xA;cd aura&#xA;stack install -- aura&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This may take a while to initially build all of Aura&#39;s dependencies. Once complete, your &lt;code&gt;aura&lt;/code&gt; binary will be available in &lt;code&gt;/home/YOU/.local/bin/&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Sample Usage&lt;/h2&gt; &#xA;&lt;p&gt;Full usage information can be found in Aura&#39;s man page.&lt;/p&gt; &#xA;&lt;h3&gt;Installing Packages&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Command&lt;/th&gt; &#xA;   &lt;th&gt;Function&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;aura -A &amp;lt;package&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Install an AUR package.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;aura -Au&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Upgrade all installed AUR packages.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;aura -Akuax&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Author&#39;s favourite (upgrades, removes makedeps, shows PKGBUILD diffs, shows progress)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;aura -Ai &amp;lt;package&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Look up information on an AUR package.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;aura -As &amp;lt;regex&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Search the AUR via a regex.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;aura -Ap &amp;lt;package&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Display a package&#39;s PKGBUILD.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;aura -Ad &amp;lt;package&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;List a package&#39;s dependencies.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Package Set Snapshots&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Command&lt;/th&gt; &#xA;   &lt;th&gt;Function&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;aura -B&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Store a JSON record of all installed packages.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;aura -Br&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Restore a saved record. Rolls back and uninstalls as necessary.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;aura -Bc &amp;lt;n&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Delete all but the most recent &lt;code&gt;n&lt;/code&gt; saved states.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;aura -Bl&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Show all saved package state filenames.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Downgrading via the Package Cache&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Command&lt;/th&gt; &#xA;   &lt;th&gt;Function&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;aura -C &amp;lt;package&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Downgrade a package.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;aura -Cs &amp;lt;regex&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Search the package cache for files that match a regex.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;aura -Cc &amp;lt;n&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Delete all but the most recent &lt;code&gt;n&lt;/code&gt; versions of each cached package.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;aura -Cv&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Delete all of the &lt;code&gt;/var/cache/aura/vcs&lt;/code&gt; cache&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Searching the Pacman Log&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Command&lt;/th&gt; &#xA;   &lt;th&gt;Function&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;aura -L&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;View the Pacman log.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;aura -Li &amp;lt;package&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;View the install / upgrade history of a package.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;aura -Ls &amp;lt;regex&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Search the Pacman log via a regex.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Managing Orphan Packages&lt;/h3&gt; &#xA;&lt;p&gt;Orphan packages are those whose install reason is marked as &#34;As Dependency&#34;, but are not actually depended upon by any installed package.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Command&lt;/th&gt; &#xA;   &lt;th&gt;Function&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;aura -O&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Display orphan packages.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;aura -Oa &amp;lt;package&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Change a package&#39;s install reason to &lt;code&gt;Explicitly installed&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;aura -Oj&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Uninstall all orphan packages.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;PKGBUILD Security Analysis&lt;/h3&gt; &#xA;&lt;p&gt;As mentioned above, the &lt;code&gt;-P&lt;/code&gt; commands can help us detect bash usage that conflicts with the AUR guidelines, as well as outright exploits.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Command&lt;/th&gt; &#xA;   &lt;th&gt;Function&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;aura -P &amp;lt;stdin&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Analyse a PKGBUILD piped from &lt;code&gt;-Ap&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;aura -Pf &amp;lt;file&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Analyse a PKGBUILD file.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;aura -Pd &amp;lt;dir&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Analyse the PKGBUILD file found in a directory.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;aura -Pa&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Analyse all locally installed AUR packages.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;Aura looks for a configuration file at &lt;code&gt;/etc/aura.conf&lt;/code&gt;, but won&#39;t break if one isn&#39;t present. A template config file &lt;a href=&#34;https://raw.githubusercontent.com/fosskers/aura/master/aura/doc/aura.conf&#34;&gt;can be found here&lt;/a&gt; and contains all instructions. If you install Aura via its AUR package, this file is added for you.&lt;/p&gt; &#xA;&lt;h2&gt;Localisation&lt;/h2&gt; &#xA;&lt;p&gt;As mentioned in the Philosophy above, adding new languages to Aura is quite easy. If you speak a language other than those available and would like it added to Aura, please see the &lt;a href=&#34;https://fosskers.github.io/aura/localisation.html&#34;&gt;Localisation&lt;/a&gt; section of The Aura Book.&lt;/p&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;p&gt;Aura is sponsored by these wonderful people:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/ace-deuce&#34;&gt;&lt;img class=&#34;avatar avatar-user&#34; src=&#34;https://avatars.githubusercontent.com/u/81970309?s=70&amp;amp;v=4&#34; alt=&#34;@ace-deuce&#34; width=&#34;35&#34; height=&#34;35&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/tianip220&#34;&gt;&lt;img class=&#34;avatar avatar-user&#34; src=&#34;https://avatars.githubusercontent.com/u/81332165?s=70&amp;amp;v=4&#34; alt=&#34;@tianip220&#34; width=&#34;35&#34; height=&#34;35&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/sidagrawal&#34;&gt;&lt;img class=&#34;avatar avatar-user&#34; src=&#34;https://avatars.githubusercontent.com/u/5953670?s=70&amp;amp;v=4&#34; alt=&#34;@sidagrawal&#34; width=&#34;35&#34; height=&#34;35&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/da-moon&#34;&gt;&lt;img class=&#34;avatar avatar-user&#34; src=&#34;https://avatars.githubusercontent.com/u/17126777?s=70&amp;amp;v=4&#34; alt=&#34;@da-moon&#34; width=&#34;35&#34; height=&#34;35&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Aura has been translated by these generous people:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Language&lt;/th&gt; &#xA;   &lt;th&gt;Translators&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Arabic&lt;/td&gt; &#xA;   &lt;td&gt;&#34;Array in a Matrix&#34;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Chinese&lt;/td&gt; &#xA;   &lt;td&gt;Kai Zhang&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Croatian&lt;/td&gt; &#xA;   &lt;td&gt;Denis Kasak and &#34;stranac&#34;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Czech&lt;/td&gt; &#xA;   &lt;td&gt;Daniel Rosel&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Dutch&lt;/td&gt; &#xA;   &lt;td&gt;Joris Blanken / Heimen Stoffels&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Esperanto&lt;/td&gt; &#xA;   &lt;td&gt;Zachary &#34;Ghosy&#34; Matthews&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;French&lt;/td&gt; &#xA;   &lt;td&gt;Ma Jiehong and Fabien Dubosson&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;German&lt;/td&gt; &#xA;   &lt;td&gt;Lukas Niederbremer and Jonas Platte&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Indonesian&lt;/td&gt; &#xA;   &lt;td&gt;&#34;pak tua Greg&#34;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Italian&lt;/td&gt; &#xA;   &lt;td&gt;Bob Valantin and Cristian Tentella&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Japanese&lt;/td&gt; &#xA;   &lt;td&gt;Colin Woodbury and Onoue Takuro&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Korean&lt;/td&gt; &#xA;   &lt;td&gt;&#34;Nioden&#34;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Norwegian&lt;/td&gt; &#xA;   &lt;td&gt;&#34;chinatsun&#34;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Polish&lt;/td&gt; &#xA;   &lt;td&gt;Chris Warrick, Michał Kurek&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Portuguese&lt;/td&gt; &#xA;   &lt;td&gt;Henry Kupty, Thiago Perrotta, and Wagner Amaral&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Romanian&lt;/td&gt; &#xA;   &lt;td&gt;&#34;90&#34;, &#34;benone&#34;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Russian&lt;/td&gt; &#xA;   &lt;td&gt;Kyrylo Silin, Alexey Kotlyarov&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Serbian&lt;/td&gt; &#xA;   &lt;td&gt;Filip Brcic&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Spanish&lt;/td&gt; &#xA;   &lt;td&gt;Alejandro Gómez, Sergio Conde and Max Ferrer&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Swedish&lt;/td&gt; &#xA;   &lt;td&gt;Fredrik Haikarainen and Daniel Beecham&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Turkish&lt;/td&gt; &#xA;   &lt;td&gt;Cihan Alkan&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Ukrainian&lt;/td&gt; &#xA;   &lt;td&gt;Andriy Cherniy&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Vietnamese&lt;/td&gt; &#xA;   &lt;td&gt;&#34;Kritiqual&#34;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Aura&#39;s logo is thanks to the designer &lt;a href=&#34;https://github.com/cristianovitorino&#34;&gt;Cristiano Vitorino&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;The &lt;code&gt;aur&lt;/code&gt; Haskell Library&lt;/h1&gt; &#xA;&lt;p&gt;A library for accessing the AUR.&lt;/p&gt; &#xA;&lt;h1&gt;The &lt;code&gt;aursec&lt;/code&gt; Tool&lt;/h1&gt; &#xA;&lt;p&gt;Performs a sweep of all PKGBUILDs on the &lt;a href=&#34;https://aur.archlinux.org/&#34;&gt;AUR&lt;/a&gt;, looking for Bash misuse.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>entropia/tip-toi-reveng</title>
    <updated>2023-01-04T01:32:24Z</updated>
    <id>tag:github.com,2023-01-04:/entropia/tip-toi-reveng</id>
    <link href="https://github.com/entropia/tip-toi-reveng" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Trying to understand the file format of Tip Toi&lt;/p&gt;&lt;hr&gt;&lt;p&gt;Das tttool hat jetzt eine deutsche Webseite für Anwender: &lt;a href=&#34;http://tttool.entropia.de/&#34;&gt;http://tttool.entropia.de/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;tip-toi-reveng&lt;/h1&gt; &#xA;&lt;p&gt;The goal of this project is to understand the file and paper format for the Ravensburger TipToi pen. The ultimate goal is that everyone can create their own books, with their own sounds.&lt;/p&gt; &#xA;&lt;p&gt;The current status is that we understood most of the file format (see the &lt;a href=&#34;https://raw.githubusercontent.com/entropia/tip-toi-reveng/master/GME-Format.md&#34;&gt;GME file format specification&lt;/a&gt;). We provide a tool that allows you to dissect these files. The tool can also be used to generate completely new files from scratch; see below for details.&lt;/p&gt; &#xA;&lt;p&gt;If you want to learn more please have a look into our wiki (&lt;a href=&#34;https://github.com/entropia/tip-toi-reveng/wiki&#34;&gt;https://github.com/entropia/tip-toi-reveng/wiki&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;h2&gt;The tttool tool&lt;/h2&gt; &#xA;&lt;p&gt;Use the tool &lt;code&gt;tttool&lt;/code&gt; to investigate the gme files and build new ones. It supports various subcommands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;GME creation commands:&#xA;  assemble                 creates a gme file from the given source&#xA;&#xA;OID code creation commands:&#xA;  oid-table                creates a PDF or SVG file with all codes in the yaml file&#xA;  oid-codes                creates files for every OID in the yaml file (default: PNG).&#xA;  oid-code                 creates PNG files for each given code(s)&#xA;&#xA;GME modification commands:&#xA;  set-language             sets the language field of an GME file&#xA;  set-product-id           changes the product id an GME file&#xA;&#xA;GME analysis commands:&#xA;  info                     Print general information about a GME file&#xA;  export                   dumps the file in the human-readable yaml format&#xA;  scripts                  prints the decoded scripts for each OID&#xA;  script                   prints the decoded scripts for a specific OID&#xA;  games                    prints the decoded games&#xA;  lint                     checks for errors in the file or in this program&#xA;  segments                 lists all known parts of the file, with description.&#xA;  segment                  prints the segment that contains a specific offset&#xA;  explain                  print a hexdump of a GME file with descriptions&#xA;  holes                    lists all unknown parts of the file.&#xA;  rewrite                  parses the file and writes it again (for debugging)&#xA;&#xA;GME extraction commands:&#xA;  media                    dumps all audio samples&#xA;  binaries                 dumps all binaries&#xA;&#xA;Simulation commands:&#xA;  play                     interactively play a GME file&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./tttool --help&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;to learn about global options (e.g. DPI settings), and&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./tttool command --help&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;for the options of the individual command.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;We release &lt;code&gt;tttool&lt;/code&gt; for Windows and Linux users as a zipfile. You can find them in the &lt;a href=&#34;https://github.com/entropia/tip-toi-reveng/releases&#34;&gt;releases section&lt;/a&gt; of the GitHub project.&lt;/p&gt; &#xA;&lt;p&gt;Linux users likely want to install additional packages. On Debian or Ubuntu, run &lt;code&gt;sudo apt install libttspico-utils vorbis-tools&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;See &lt;code&gt;Building.md&lt;/code&gt; for instructions on how to build &lt;code&gt;tttool&lt;/code&gt; from source.&lt;/p&gt; &#xA;&lt;h2&gt;Building your own gme files&lt;/h2&gt; &#xA;&lt;p&gt;Once you have installed &lt;code&gt;tttool&lt;/code&gt;, you can create your own &lt;code&gt;.gme&lt;/code&gt; files. The process is as follows&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Record the audio samples you want to include, as Ogg Vorbis files, mono, 22050Hz. I use&lt;/p&gt; &lt;pre&gt;&lt;code&gt;arecord -r 22050 foo.wav&#xA;oggenc foo.wav&#xA;rm foo.wav&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Write a &lt;code&gt;my-book.yaml&lt;/code&gt; file containing some general information, and especially the scripts (i.e. what to do) for each OIDs (i.e. the various fields of a book). You can use the &lt;a href=&#34;https://raw.githubusercontent.com/entropia/tip-toi-reveng/master/example.yaml&#34;&gt;example.yaml&lt;/a&gt; file as a starting point; it contains more information in its comments.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run &lt;code&gt;./tttool assemble my-book.yaml&lt;/code&gt;, and make sure it reports no error, i.e. finishes silently.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Copy the now generated &lt;code&gt;my-book.gme&lt;/code&gt; to your TipToi pen and enjoy!&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;If you need to find out what OID code corresponds to what part of the book, you can generate a debug gme using the &lt;code&gt;debug.yaml&lt;/code&gt; file, adjusting its &lt;code&gt;Product-Id&lt;/code&gt; to your product’s id, building it with &lt;code&gt;./tttool assemble debug.yaml&lt;/code&gt; and loading the resulting &lt;code&gt;debug.gme&lt;/code&gt; on your pen. It will then read out the codes, as a sequence of english digits.&lt;/p&gt; &#xA;&lt;p&gt;If you want to convert existing audio files of almost any format, and you have &lt;code&gt;ffmpeg&lt;/code&gt; installed, you can use&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;ffmpeg -i input-audio-in-some.fmt -ar 22050 -ac 1 foo.ogg&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Text to speech&lt;/h2&gt; &#xA;&lt;p&gt;If you have &lt;code&gt;libttspico-utils&lt;/code&gt; and &lt;code&gt;vorbis-tools installed&lt;/code&gt;, you can have tttool generate audio files from text for you, which makes developing your yaml file much easier. See &lt;a href=&#34;https://raw.githubusercontent.com/entropia/tip-toi-reveng/master/text2speech.yaml&#34;&gt;text2speech.yaml&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h2&gt;Printing your own books&lt;/h2&gt; &#xA;&lt;p&gt;With the code in this repository, you can create GME files. This is even more fun if you can also create your own books! „Pronwan“ found out how that works, as you can see in &lt;a href=&#34;http://youtu.be/KC97F4PfNhk&#34;&gt;this video demonstration&lt;/a&gt;. He also published 30 minute &lt;a href=&#34;http://youtu.be/4AjvjFM8GzM&#34;&gt;video tutorial&lt;/a&gt; (in German).&lt;/p&gt; &#xA;&lt;h2&gt;Press Review&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blogs.fsfe.org/guido/2014/05/tiptoi-hacking-und-systemanforderungen/&#34;&gt;tiptoi hacking&lt;/a&gt; by Guido Arnold&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.nerd.junetz.de/blogbox/index.php?/archives/1377-TipToi-Hacking.html&#34;&gt;TipToi Hacking&lt;/a&gt; and &lt;a href=&#34;http://www.nerd.junetz.de/blogbox/index.php?/archives/1378-TipToi-Hacking-II.html&#34;&gt;TipToi Hacking II&lt;/a&gt; by Mr. Blog&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.joachim-breitner.de/blog/tag/Tiptoi&#34;&gt;Various posts&lt;/a&gt; by Joachim “nomeata” Breitner (the main author of &lt;code&gt;tttool&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=Yic57Y9VORA&amp;amp;app=desktop&#34;&gt;Self-made animal figures&lt;/a&gt; demonstration video&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;TODO&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;What are all the header fields? (See &lt;a href=&#34;https://raw.githubusercontent.com/entropia/tip-toi-reveng/master/wip/Header.md&#34;&gt;wip/Header.md&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Finish decoding the games. (See &lt;a href=&#34;https://raw.githubusercontent.com/entropia/tip-toi-reveng/master/wip/games.txt&#34;&gt;wip/games.txt&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;What is the purpose of the additional script table?&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Other resources in this repository&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;http://htmlpreview.github.io/?https://github.com/entropia/tip-toi-reveng/raw/master/oid-decoder.html&#34;&gt;&lt;code&gt;oid-decoder.html&lt;/code&gt;&lt;/a&gt; allows you to manually decode an OID image.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;scripts/update.sh&lt;/code&gt; downloads all gme files from the Ravensburger server (requires perl and the &lt;a href=&#34;http://search.cpan.org/~grantm/XML-Simple/&#34;&gt;XML::Simple&lt;/a&gt; module).&lt;/p&gt; &lt;p&gt;Instead of downloading all of them, you can conveniently browse them at &lt;a href=&#34;http://tiptoi.vakat.de/&#34;&gt;http://tiptoi.vakat.de/&lt;/a&gt;, a service provided by Falko Oldenburg &lt;a href=&#34;mailto:tiptoi@vakat.de&#34;&gt;tiptoi@vakat.de&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;gameanalyse.c&lt;/code&gt; and &lt;code&gt;libtiptoi.c&lt;/code&gt; is an alternative tool to investigate gme files. It can also &lt;a href=&#34;https://raw.githubusercontent.com/entropia/tip-toi-reveng/master/Audio/README.md&#34;&gt;replace audio files in gme files&lt;/a&gt;; compile and run it for diagnostic output.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;Audio/&lt;/code&gt; contains some audio files, such as digits read out.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;docs/&lt;/code&gt; collects information about TipToi found elsewhere.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;wip/&lt;/code&gt; (work in progess) contains notes about the parts of the gme files that are not fully understood yet.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;perl-tools&lt;/code&gt; contains a perl based script, to generate a PDF with all OID codes from a yaml-file as well some functions to generate PNG-files, inject pHYs-chunks with resolution hints into GD generated PNG files as result from some testing&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>haskellfoundation/tech-proposals</title>
    <updated>2023-01-04T01:32:24Z</updated>
    <id>tag:github.com,2023-01-04:/haskellfoundation/tech-proposals</id>
    <link href="https://github.com/haskellfoundation/tech-proposals" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The Haskell Foundation Tech Proposal Process&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://haskellfoundation.github.io/static/images/logos/hf-logo-alpha.png&#34; width=&#34;350&#34; height=&#34;282&#34; alt=&#34;Haskell Foundation&#34; title=&#34;Haskell Foundation&#34;&gt; &lt;/p&gt; &#xA;&lt;h1&gt;Haskell Foundation Tech Proposals&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://haskell.foundation&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1?label=Haskell%20Foundation&amp;amp;message=official&amp;amp;color=purple&amp;amp;style=for-the-badge&#34; alt=&#34;Hackage&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This repository is for the &lt;a href=&#34;https://haskell.foundation&#34;&gt;Haskell Foundation&lt;/a&gt; tech proposals.&lt;/p&gt; &#xA;&lt;p&gt;Haskell Foundation tech proposals are a means of adding items to the HF technical agenda, pending final review by the HF leadership. Additionally, tech proposals are a means of soliciting broad feedback for technical and social initiatives that matter to the Haskell community. This repository is maintained by the Haskell Foundation and its volunteers. The tech proposal process is described at &lt;a href=&#34;https://github.com/haskellfoundation/tech-proposals/raw/main/proposals/PROPOSALS.md&#34;&gt;https://github.com/haskellfoundation/tech-proposals/blob/main/proposals/PROPOSALS.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This site is open source, and covered under the Apache 2.0 license.&lt;/p&gt;</summary>
  </entry>
</feed>