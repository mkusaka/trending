<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Haskell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-08-05T01:33:49Z</updated>
  <subtitle>Daily Trending of Haskell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>samtay/tetris</title>
    <updated>2023-08-05T01:33:49Z</updated>
    <id>tag:github.com,2023-08-05:/samtay/tetris</id>
    <link href="https://github.com/samtay/tetris" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A terminal interface for Tetris&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;tetris &lt;a href=&#34;https://github.com/samtay/tetris/actions/workflows/ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/samtay/tetris/actions/workflows/ci.yml/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;A terminal interface for Tetris&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/samtay/tetris/master/docs/img/play.gif&#34; alt=&#34;terminal-gif&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;installation&lt;/h2&gt; &#xA;&lt;p&gt;Installation on MacOS and Linux is outlined below. Windows support is questionable, but you can try to install from &lt;a href=&#34;https://raw.githubusercontent.com/samtay/tetris/master/#install-from-source&#34;&gt;source&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;MacOS&lt;/h4&gt; &#xA;&lt;p&gt;Installation on a Mac is simple with Homebrew:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew install samtay/tui/tetris&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Arch Linux&lt;/h4&gt; &#xA;&lt;p&gt;Arch Linux users can install from the &lt;a href=&#34;https://aur.archlinux.org/packages/tetris-terminal-git/&#34;&gt;AUR&lt;/a&gt;, e.g.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;yay -S tetris-terminal-git # or yaourt, etc.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Snapcraft&lt;/h4&gt; &#xA;&lt;p&gt;Thanks to &lt;strong&gt;@thefenriswolf&lt;/strong&gt; this is available on most Linux distributions via &lt;a href=&#34;https://snapcraft.io/tetris-thefenriswolf&#34;&gt;snapcraft&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo snap install tetris-thefenriswolf&#xA;alias tetris=/snap/bin/tetris-thefenriswolf.tetris # add to .bashrc or .zshrc etc.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;install from source&lt;/h4&gt; &#xA;&lt;p&gt;First &lt;a href=&#34;https://docs.haskellstack.org/en/stable/README/#how-to-install&#34;&gt;get stack&lt;/a&gt;. Then&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/samtay/tetris.git&#xA;cd tetris&#xA;stack install tetris&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;usage&lt;/h2&gt; &#xA;&lt;p&gt;The default game is run by simply executing the &lt;code&gt;tetris&lt;/code&gt; command. If the unicode characters look a bit wonky in your terminal, you can also run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;tetris --ascii-only         # uses [] as preview cell&#xA;# or&#xA;tetris --preview-chars &#39;XX&#39; # uses custom characters as preview cell&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to skip the level prompt, you can start the game immediately via&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;tetris --level n&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Lastly, to see the current high score, you can run &lt;code&gt;tetris --high-score&lt;/code&gt;. And of course, see &lt;code&gt;tetris --help&lt;/code&gt; for help.&lt;/p&gt; &#xA;&lt;h2&gt;tips&lt;/h2&gt; &#xA;&lt;h4&gt;troubleshooting&lt;/h4&gt; &#xA;&lt;p&gt;People seem to have varying levels of success with the linux binary. Please note that it is compiled dynamically and hence should not be expected to work on most distros. If you have other problems, feel free to open an issue.&lt;/p&gt; &#xA;&lt;h4&gt;roll your own&lt;/h4&gt; &#xA;&lt;p&gt;If you like games in your terminal and have an interest in functional programming, write your own! This code is built on top of &lt;a href=&#34;https://github.com/jtdaugherty/brick&#34;&gt;brick&lt;/a&gt; which makes building terminal user interfaces very accessible. I also have a &lt;a href=&#34;https://samtay.github.io/posts/introduction-to-brick&#34;&gt;tutorial&lt;/a&gt; that can help you get started.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>zsol/code-together</title>
    <updated>2023-08-05T01:33:49Z</updated>
    <id>tag:github.com,2023-08-05:/zsol/code-together</id>
    <link href="https://github.com/zsol/code-together" rel="alternate"></link>
    <summary type="html">&lt;p&gt;code-together sessions&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;2013.02.21 Possible topics&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;controlling laziness&lt;/li&gt; &#xA; &lt;li&gt;parallelism / profiling&lt;/li&gt; &#xA; &lt;li&gt;monads / monad transformers / applicative functors&lt;/li&gt; &#xA; &lt;li&gt;simulating a traffic junction&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>Bodigrim/fast-digits</title>
    <updated>2023-08-05T01:33:49Z</updated>
    <id>tag:github.com,2023-08-05:/Bodigrim/fast-digits</id>
    <link href="https://github.com/Bodigrim/fast-digits" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Split integers into digits, blazingly fast&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;fast-digits &lt;a href=&#34;https://hackage.haskell.org/package/fast-digits&#34;&gt;&lt;img src=&#34;http://img.shields.io/hackage/v/fast-digits.svg?sanitize=true&#34; alt=&#34;Hackage&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://stackage.org/lts/package/fast-digits&#34;&gt;&lt;img src=&#34;http://stackage.org/package/fast-digits/badge/lts&#34; alt=&#34;Stackage LTS&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://stackage.org/nightly/package/fast-digits&#34;&gt;&lt;img src=&#34;http://stackage.org/package/fast-digits/badge/nightly&#34; alt=&#34;Stackage Nightly&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;The fastest Haskell library to split integers into digits. It is both asymptotically (O(n&lt;sup&gt;1.4&lt;/sup&gt;) vs. O(n&lt;sup&gt;2&lt;/sup&gt;)) and practically (2x-40x for typical inputs) faster than &lt;a href=&#34;https://hackage.haskell.org/package/digits&#34;&gt;Data.Digits&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Here are benchmarks for GHC 8.10:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;gt; cabal bench -w ghc-8.10.4&#xA;All&#xA;  short&#xA;    2&#xA;      FastDigits:  OK (3.11s)&#xA;        12.3 ms ± 701 μs&#xA;      Data.Digits: OK (1.41s)&#xA;        22.2 ms ± 1.8 ms, 1.81x&#xA;    10&#xA;      FastDigits:  OK (2.11s)&#xA;        4.16 ms ± 369 μs&#xA;      Data.Digits: OK (3.74s)&#xA;        7.40 ms ± 235 μs, 1.78x&#xA;    100000&#xA;      FastDigits:  OK (4.89s)&#xA;        1.20 ms ±  69 μs&#xA;      Data.Digits: OK (3.96s)&#xA;        1.95 ms ±  78 μs, 1.63x&#xA;    1000000000&#xA;      FastDigits:  OK (4.02s)&#xA;        985  μs ±  62 μs&#xA;      Data.Digits: OK (3.15s)&#xA;        1.54 ms ±  70 μs, 1.56x&#xA;  medium&#xA;    2&#xA;      FastDigits:  OK (3.02s)&#xA;        1.49 ms ±  66 μs&#xA;      Data.Digits: OK (1.42s)&#xA;        5.62 ms ± 542 μs, 3.77x&#xA;    10&#xA;      FastDigits:  OK (2.35s)&#xA;        571  μs ±  42 μs&#xA;      Data.Digits: OK (1.77s)&#xA;        1.76 ms ± 152 μs, 3.07x&#xA;    100000&#xA;      FastDigits:  OK (3.87s)&#xA;        238  μs ±  19 μs&#xA;      Data.Digits: OK (3.44s)&#xA;        419  μs ±  23 μs, 1.76x&#xA;    1000000000&#xA;      FastDigits:  OK (3.05s)&#xA;        186  μs ±  13 μs&#xA;      Data.Digits: OK (4.42s)&#xA;        268  μs ±  11 μs, 1.44x&#xA;  long&#xA;    2&#xA;      FastDigits:  OK (3.75s)&#xA;        3.60 ms ± 215 μs&#xA;      Data.Digits: OK (1.89s)&#xA;        125  ms ± 9.6 ms, 34.88x&#xA;    10&#xA;      FastDigits:  OK (2.30s)&#xA;        2.24 ms ± 125 μs&#xA;      Data.Digits: OK (2.47s)&#xA;        39.0 ms ± 2.0 ms, 17.40x&#xA;    100000&#xA;      FastDigits:  OK (1.93s)&#xA;        1.88 ms ± 139 μs&#xA;      Data.Digits: OK (4.52s)&#xA;        8.82 ms ± 533 μs, 4.70x&#xA;    1000000000&#xA;      FastDigits:  OK (1.77s)&#xA;        1.71 ms ± 149 μs&#xA;      Data.Digits: OK (1.35s)&#xA;        5.30 ms ± 482 μs, 3.10x&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>