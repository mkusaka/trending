<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Haskell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-10-21T01:28:46Z</updated>
  <subtitle>Daily Trending of Haskell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>garnix-io/garn</title>
    <updated>2023-10-21T01:28:46Z</updated>
    <id>tag:github.com,2023-10-21:/garnix-io/garn</id>
    <link href="https://github.com/garnix-io/garn" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;garn&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;Please note: &lt;code&gt;garn&lt;/code&gt; is still in active development and experimental. Use at your own risk!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;garn is a build tool and development environment manager. You configure your project with a &lt;code&gt;garn.ts&lt;/code&gt; file that declaratively describes your project and its dependencies.&lt;/p&gt; &#xA;&lt;p&gt;For example, with this &lt;code&gt;garn.ts&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;import * as garn from &#34;https://garn.io/ts/v0.0.10/mod.ts&#34;;&#xA;&#xA;export const frontend = garn.javascript.mkNpmProject({&#xA;  description: &#34;My project frontend&#34;,&#xA;  src: &#34;frontend&#34;,&#xA;  nodeVersion: &#34;18&#34;,&#xA;});&#xA;&#xA;export const backend = garn.go.mkGoProject({&#xA;  description: &#34;My project backend&#34;,&#xA;  src: &#34;backend&#34;,&#xA;  goVersion: &#34;1.20&#34;,&#xA;});&#xA;&#xA;export const startAll = garn.processCompose({&#xA;  frontend: frontend.devShell.shell`cd frontend &amp;amp;&amp;amp; npm install &amp;amp;&amp;amp; npm start`,&#xA;  backend: backend.defaultExecutable!,&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Anyone can run your frontend with &lt;code&gt;garn run frontend&lt;/code&gt;, backend with &lt;code&gt;garn run backend&lt;/code&gt;, or both with &lt;code&gt;garn run startAll&lt;/code&gt;. All without needing to worry about having the correct version of &lt;code&gt;go&lt;/code&gt;, &lt;code&gt;nodejs&lt;/code&gt;, or anything else installed.&lt;/p&gt; &#xA;&lt;p&gt;garn is powered by &lt;a href=&#34;https://nixos.org/&#34;&gt;Nix&lt;/a&gt;, so you get portable and reproducible builds and development environments -- all this while running natively on your developer machines without the hassle and performance penalty of using e.g. docker.&lt;/p&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;h3&gt;Install garn&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl --proto &#39;=https&#39; --tlsv1.2 -sSf https://garn.io/install.sh | sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;garn&lt;/code&gt; needs &lt;a href=&#34;https://nixos.org/&#34;&gt;&lt;code&gt;nix&lt;/code&gt;&lt;/a&gt; to be installed, so -- if you don&#39;t have nix already -- the above installer will install nix first, after asking for confirmation.&lt;/p&gt; &#xA;&lt;h3&gt;Create your first &lt;code&gt;garn.ts&lt;/code&gt; file&lt;/h3&gt; &#xA;&lt;p&gt;You can use &lt;code&gt;garn init&lt;/code&gt; to template out an initial configuration.&lt;/p&gt; &#xA;&lt;p&gt;Check out the &lt;a href=&#34;https://garn.io/docs/getting_started&#34;&gt;getting started guide&lt;/a&gt; for more information on how to write and modify your &lt;code&gt;garn.ts&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;h2&gt;Commands&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;code&gt;garn init&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Running &lt;code&gt;garn init&lt;/code&gt; in a directory without a &lt;code&gt;garn.ts&lt;/code&gt; file will try to automatically detect what kind of project you have and generate a &lt;code&gt;garn.ts&lt;/code&gt; file for you.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;garn enter&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;garn enter [project]&lt;/code&gt; will put you in a development shell with all needed dependencies available in your &lt;code&gt;$PATH&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;garn build&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;garn build [project]&lt;/code&gt; will build the specified project and create a symlink named &lt;code&gt;result&lt;/code&gt; which links to the resulting build artifacts.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;garn run&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;garn run [project]&lt;/code&gt; will run the default executable for the specified project.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;garn check&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;garn check [check]&lt;/code&gt; will run all checks for the specified project. These checks run in a sandbox. The downside of sandboxing is that these checks won&#39;t have access to the internet. The upside is that they&#39;ll be (almost) perfectly reproducible.&lt;/p&gt; &#xA;&lt;h2&gt;Typescript API&lt;/h2&gt; &#xA;&lt;p&gt;Documentation for the &lt;code&gt;garn&lt;/code&gt; Deno library is documented &lt;a href=&#34;https://doc.deno.land/https://garn.io/ts/v0.0.10/mod.ts&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>