<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Haskell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-08-28T01:30:33Z</updated>
  <subtitle>Daily Trending of Haskell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>reflex-frp/reflex-dom-contrib</title>
    <updated>2024-08-28T01:30:33Z</updated>
    <id>tag:github.com,2024-08-28:/reflex-frp/reflex-dom-contrib</id>
    <link href="https://github.com/reflex-frp/reflex-dom-contrib" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Reflex Contributors&#39; Playground&lt;/h2&gt; &#xA;&lt;p&gt;This library is intended to be a public playground for developing infrastructure, higher level APIs, and widget libraries for reflex FRP applications. &lt;strong&gt;This library is experimental and does not have a strong commitment to preserving backwards compatibility.&lt;/strong&gt; It will not have a high bar for the quality of contributions. That being said, we prefer commits that add new things rather than changing existing ones. If you are wondering if there is some convenience code or abstractions and you don&#39;t find them in reflex or reflex-dom, look here and see if anyone has already done it. If you have general-purpose reflex code that you find useful that is not already here, add it to this repository and send us a pull request.&lt;/p&gt; &#xA;&lt;p&gt;Over time the goal is that this repository will help us discover good abstractions for reflex development that can eventually be merged upstream to a more stable home with stronger backwards compatibility guarantees. But we think the reflex community needs a place to play and explore different ideas. This is that place. Have fun!&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;The easiest way to build reflex-dom-contrib is with Nix. To build the package, use nix-build like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;nix-build -A ghc.reflex-dom-contrib&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To enter a shell with all the dependencies, just run &lt;code&gt;nix-shell&lt;/code&gt;. Then you can build with cabal as with any other Haskell package.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>reflex-frp/reflex-examples</title>
    <updated>2024-08-28T01:30:33Z</updated>
    <id>tag:github.com,2024-08-28:/reflex-frp/reflex-examples</id>
    <link href="https://github.com/reflex-frp/reflex-examples" rel="alternate"></link>
    <summary type="html">&lt;p&gt;See Reflex FRP in action with tinker-friendly code samples you can run yourself.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Reflex Examples&lt;/h1&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://reflex-frp.org/&#34;&gt;Reflex FRP&lt;/a&gt; in action with tinker-friendly code samples you can run yourself.&lt;/p&gt; &#xA;&lt;p&gt;These examples are running at &lt;a href=&#34;https://examples.reflex-frp.org&#34;&gt;https://examples.reflex-frp.org&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To run the examples locally, install &lt;a href=&#34;https://github.com/obsidiansystems/obelisk&#34;&gt;Obelisk&lt;/a&gt;, go into the project directory, and run &lt;code&gt;ob run&lt;/code&gt;. This will compile the examples using &lt;code&gt;ghc&lt;/code&gt; and run them locally on &lt;a href=&#34;http://localhost:8000/&#34;&gt;http://localhost:8000/&lt;/a&gt;. You can also do modifications to the examples while the &lt;code&gt;ob run&lt;/code&gt; command is running, it will recompile them automatically when the file is saved, and reload the page where it&#39;s running.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>reflex-frp/reflex-vty</title>
    <updated>2024-08-28T01:30:33Z</updated>
    <id>tag:github.com,2024-08-28:/reflex-frp/reflex-vty</id>
    <link href="https://github.com/reflex-frp/reflex-vty" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Build terminal applications using functional reactive programming (FRP) with Reflex FRP.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;reflex-vty&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://haskell.org&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/language-Haskell-orange.svg?sanitize=true&#34; alt=&#34;Haskell&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hackage.haskell.org/package/reflex-vty&#34;&gt;&lt;img src=&#34;https://img.shields.io/hackage/v/reflex-vty.svg?sanitize=true&#34; alt=&#34;Hackage&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/reflex-frp/reflex-vty/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-BSD3-blue.svg?sanitize=true&#34; alt=&#34;BSD3 License&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Build terminal applications using functional reactive programming (FRP) with &lt;a href=&#34;https://reflex-frp.org&#34;&gt;Reflex FRP&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/FULQNtu.gif&#34; alt=&#34;Example Animation&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Feature requests, pull requests, and other feedback are welcome and appreciated (see the &lt;a href=&#34;https://raw.githubusercontent.com/reflex-frp/reflex-vty/develop/CONTRIBUTING.md&#34;&gt;contribution guide&lt;/a&gt;). This library is still experimental, so big changes are possible!&lt;/p&gt; &#xA;&lt;h3&gt;How to Build&lt;/h3&gt; &#xA;&lt;h4&gt;With reflex-platform&lt;/h4&gt; &#xA;&lt;p&gt;Enter a nix-shell for the project:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/reflex-frp/reflex-vty.git&#xA;cd reflex-vty&#xA;nix-shell&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;From within the nix-shell you can:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Run the example: &lt;code&gt;cabal repl example&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Load the library in the repl: &lt;code&gt;cabal repl reflex-vty&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Build the example executable: &lt;code&gt;cabal build example&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Build the docs: &lt;code&gt;cabal haddock&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run ghcid for immediate compiler feedback when you save a .hs file: &lt;code&gt;ghcid -c &#34;cabal repl reflex-vty --ghc-options=-Wall&#34;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;etc.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h5&gt;Selecting a compiler&lt;/h5&gt; &#xA;&lt;p&gt;When entering the nix-shell, you can select from the following compilers: ghc-8.10.7 and ghc-9.4.3. By default, ghc-8.10.7 is selected. To enter a shell with ghc-9.4.3, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;nix-shell --argstr compiler ghc943&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You may need to run &lt;code&gt;cabal clean&lt;/code&gt; and &lt;code&gt;cabal configure -w ghc-9.4.3&lt;/code&gt; if you were previously working on the project with a different compiler.&lt;/p&gt; &#xA;&lt;h4&gt;With cabal&lt;/h4&gt; &#xA;&lt;p&gt;Please see the &lt;code&gt;tested-with&lt;/code&gt; field of the cabal file for known-compatible versions of GHC.&lt;/p&gt; &#xA;&lt;p&gt;From the reflex-vty project directory:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# nix-shell -p cabal-install binutils icu # for nix users&#xA;cabal new-configure&#xA;cabal new-build # to build the library and example&#xA;cabal new-repl # to enter a repl for the library&#xA;cabal new-repl example # to enter a repl for the example executable&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>