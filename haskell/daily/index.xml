<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Haskell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-02-02T01:36:38Z</updated>
  <subtitle>Daily Trending of Haskell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>quchen/articles</title>
    <updated>2023-02-02T01:36:38Z</updated>
    <id>tag:github.com,2023-02-02:/quchen/articles</id>
    <link href="https://github.com/quchen/articles" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Miscellaneous articles. The readme is the table of contents.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;a href=&#34;https://github.com/quchen/articles&#34;&gt;Quchen&lt;/a&gt;&#39;s articles&lt;/h1&gt; &#xA;&lt;p&gt;This repository is filled with articles I have written and needed online for various reasons. Below is a short summary of the articles available publically. The repository may contain files not mentioned below, in which case they&#39;re probably unfinished or otherwise not worth reading at this point.&lt;/p&gt; &#xA;&lt;h2&gt;Haskell related&lt;/h2&gt; &#xA;&lt;h3&gt;General, tutorials&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/quchen/articles/master/algebraic-blindness.md&#34;&gt;Algebraic blindness&lt;/a&gt; is about how algebraic data types sometimes make Boolean Blindness even more complex.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/quchen/articles/master/build.md&#34;&gt;The &lt;code&gt;build&lt;/code&gt; function explained&lt;/a&gt;, which is an important piece in a popular optimization technique&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/quchen/articles/master/cont_monad.md&#34;&gt;The &lt;code&gt;Cont&lt;/code&gt; monad explained&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/quchen/articles/master/crazy_io.md&#34;&gt;Some lazy IO pitfalls&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/quchen/articles/master/fix.md&#34;&gt;The &lt;code&gt;fix&lt;/code&gt; function&lt;/a&gt;, one possible fundamental building block of recursion&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/quchen/articles/master/fbut.md&#34;&gt;&lt;strong&gt;F&lt;/strong&gt;requently &lt;strong&gt;B&lt;/strong&gt;rought &lt;strong&gt;U&lt;/strong&gt;p &lt;strong&gt;T&lt;/strong&gt;opics in Freenode&#39;s #haskell channel&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/quchen/articles/master/functions_comprehensible.md&#34;&gt;Basic Haskell functions written in easily comprehensible notation.&lt;/a&gt; Nice for explaining e.g. &lt;code&gt;sequence&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/quchen/articles/master/great_things_about_haskell.md&#34;&gt;What I thought was cool about Haskell some time ago.&lt;/a&gt; I should update this one day.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/quchen/articles/master/haskell-equality-table.html&#34;&gt;Equality table of Haskell values.&lt;/a&gt; &lt;a href=&#34;http://htmlpreview.github.io/?https://github.com/quchen/articles/raw/master/haskell-equality-table.html&#34;&gt;(live version)&lt;/a&gt; Created in a time where it seemed to be en vogue to create tables for the &lt;code&gt;==&lt;/code&gt; operator in various languages. Spoiler, it&#39;s terribly boring, because it should be.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/quchen/articles/master/fixing-warnings.md&#34;&gt;How to fix, or avoid fixing, certain warnings&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/quchen/articles/master/haskell_style.md&#34;&gt;My Haskell code style&lt;/a&gt; and the rationale behind it&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/quchen/articles/master/instances.md&#34;&gt;Informal description of class instances&lt;/a&gt; gives non-technical descriptions of various common class instances.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/quchen/articles/master/hindley-milner/README.md&#34;&gt;An extensive tutorial on the Hindley-Damas-Milner type inference algorithm&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/quchen/articles/master/lens-infix-operators.md&#34;&gt;Lens infix operators cheat sheet&lt;/a&gt; provides an overview of what the individual symbols in infix operators of the &lt;a href=&#34;http://hackage.haskell.org/package/lens&#34;&gt;lens&lt;/a&gt; library stand for.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/quchen/articles/master/loeb-moeb.md&#34;&gt;Löb/Möb&lt;/a&gt; is about an interesting, simple, complicated and quirky recursive function.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/quchen/articles/master/reader_instance_derived.md&#34;&gt;Reader instance derived&lt;/a&gt; shows how to write the usual &lt;code&gt;Reader&lt;/code&gt; monad instance starting from something readable and comprehensible.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/quchen/articles/master/second_functor_law.md&#34;&gt;The second &lt;code&gt;Functor&lt;/code&gt; law is redundant&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/quchen/articles/master/tag-dont-type.md&#34;&gt;Tag, don&#39;t &lt;code&gt;type&lt;/code&gt;&lt;/a&gt; is about avoiding &lt;code&gt;type&lt;/code&gt; synonyms, and using &lt;code&gt;Data.Tagged&lt;/code&gt; instead.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/quchen/articles/master/unmaintainable_haskell.md&#34;&gt;How to write unmaintainable Haskell&lt;/a&gt;, inspired by &lt;a href=&#34;https://www.thc.org/root/phun/unmaintain.html&#34;&gt;How to write unmaintainable code&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/quchen/articles/master/useful_techniques.md&#34;&gt;Useful techniques&lt;/a&gt; I&#39;ve found over the years and haven&#39;t seen described elsewhere&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/quchen/articles/master/write_yourself_a_brainfuck.md&#34;&gt;Write yourself a Brainfuck in an hour&lt;/a&gt; implements a very simple &lt;a href=&#34;https://en.wikipedia.org/wiki/Brainfuck&#34;&gt;Brainfuck&lt;/a&gt; interpreter in Haskell, with plenty of room to go on afterwards.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/quchen/articles/master/haskell-cpp-compatibility.md&#34;&gt;Make macros mean something – readable backwards compatibility with CPP&lt;/a&gt; talks about how to define readable macro synonyms for writing backwards compatible libraries.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/quchen/articles/master/2018-11-22_zipWith_const.md&#34;&gt;&lt;code&gt;zipWith const&lt;/code&gt;&lt;/a&gt; is my favorite Haskell function&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Proposals&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/quchen/articles/master/applicative_monad.md&#34;&gt;Applicative-Monad proposal (AMP)&lt;/a&gt; is the original text of the 2013 Applicative-Monad proposal, which was the starting point for Applicative becoming a superclass of Monad in GHC 7.10.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/quchen/articles/master/law-rules.md&#34;&gt;Rules for typeclass laws&lt;/a&gt; wasn&#39;t proosed yet&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The MonadFail proposal is a proposal similar to the AMP, with the goal of removing &lt;code&gt;fail&lt;/code&gt; from the &lt;code&gt;Monad&lt;/code&gt; typeclass.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/quchen/articles/master/monad_fail.md&#34;&gt;Original text&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/quchen/articles/master/monad_fail_update1.md&#34;&gt;Update after one week of discussion.&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>sfeitosa/lc</title>
    <updated>2023-02-02T01:36:38Z</updated>
    <id>tag:github.com,2023-02-02:/sfeitosa/lc</id>
    <link href="https://github.com/sfeitosa/lc" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Base para implementação do Lambda Cálculo em Haskell&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Base para implementação do Lambda Cálculo em Haskell&lt;/h1&gt; &#xA;&lt;h1&gt;Exemplo de execução&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ runghc Main.hs &amp;lt; example1.hs &#xA;$ runghc Main.hs &amp;lt; example2.hs&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>ThomasDarrieumerlou/CI-CD-GlaDOS</title>
    <updated>2023-02-02T01:36:38Z</updated>
    <id>tag:github.com,2023-02-02:/ThomasDarrieumerlou/CI-CD-GlaDOS</id>
    <link href="https://github.com/ThomasDarrieumerlou/CI-CD-GlaDOS" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;GLaDOS&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;The goal of this project is to create our own language, with its own compiler and interpreter.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Build and run&lt;/h2&gt; &#xA;&lt;p&gt;Build using stack :&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run the binary :&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;./glados&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run the binary using a source code file :&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;./glados &amp;lt; myfile.scm&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run the test suite :&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;make test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Clean temporary files :&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;make clean&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Clean temporary files and binary :&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;make fclean&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>