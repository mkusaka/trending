<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Haskell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-12-16T01:30:31Z</updated>
  <subtitle>Daily Trending of Haskell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>arj/conj-gradient-accelerate</title>
    <updated>2023-12-16T01:30:31Z</updated>
    <id>tag:github.com,2023-12-16:/arj/conj-gradient-accelerate</id>
    <link href="https://github.com/arj/conj-gradient-accelerate" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>haskell-hvr/uhttpc</title>
    <updated>2023-12-16T01:30:31Z</updated>
    <id>tag:github.com,2023-12-16:/haskell-hvr/uhttpc</id>
    <link href="https://github.com/haskell-hvr/uhttpc" rel="alternate"></link>
    <summary type="html">&lt;p&gt;`uhttpc` - µHTTP client library&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;code&gt;uhttpc&lt;/code&gt; - µHTTP client library&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;uhttpc&lt;/code&gt; is a simple low-level and lightweight Haskell HTTP 1.1 library providing the bare minimum required for HTTP benchmarking purposes.&lt;/p&gt; &#xA;&lt;p&gt;This is &lt;strong&gt;not&lt;/strong&gt; a RFC compliant HTTP client library and &lt;strong&gt;shall not&lt;/strong&gt; be used as a general purpose HTTP implementation!&lt;/p&gt; &#xA;&lt;h1&gt;&lt;code&gt;uhttpc-bench&lt;/code&gt;&lt;/h1&gt; &#xA;&lt;p&gt;This Cabal package comes with an executable &lt;code&gt;uhttpc-bench&lt;/code&gt; which represents an &lt;code&gt;ab&lt;/code&gt;/&lt;code&gt;weighttpd&lt;/code&gt;-style HTTP benchmarking tool:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;uhttpc-bench - a Haskell-based ab/weighttp-style webserver benchmarking tool&#xA;&#xA;Simple HTTP benchmark tool similiar to ab and weighttp&#xA;&#xA;uttpc-bench [OPTIONS] &amp;lt;url&amp;gt;&#xA;&#xA;Common flags:&#xA;  -n=num                     number of requests    (default: 1)&#xA;  -t=num                     threadcount           (default: 1)&#xA;  -c=num                     concurrent clients    (default: 1)&#xA;  -k                         enable keep alive&#xA;          --csv=FILE         dump request timings as CSV (RFC4180) file&#xA;          --user-agent=ITEM  specify User-Agent    (default: &#34;httpc-bench&#34;)&#xA;  -H=str                     add header to request&#xA;  -v      --verbose          enable more verbose statistics and output&#xA;          --no-stats         disable statistics&#xA;  -p=FILE                    perform POST request with file-content as body&#xA;  -l=FILE                    perform a POST request per line, no quoting,&#xA;                             round-robin, each client independently&#xA;  -?      --help             Display help message&#xA;  -V      --version          Print version information&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;How to use it&lt;/h1&gt; &#xA;&lt;p&gt;First, install the &lt;code&gt;uhttpc&lt;/code&gt; package (This requires GHC 7.6.x or later)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cabal install uhttpc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A simple example invocation:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ uhttpc-bench -n 100000 -t1 -c3 -k http://localhost/&#xA;&#xA;uhttpc-bench - a Haskell-based ab/weighttp-style webserver benchmarking tool&#xA;&#xA;starting benchmark...&#xA;finished in 2.314289 seconds, 100000 reqs (3 conns), 43209.8 req/s received&#xA;status codes: 100000 HTTP-200&#xA;data received: 36205.098 KiB/s, 85800000 bytes total (24600000 bytes http + 61200000 bytes content)&#xA;rtt min/avg/max = 0.034/0.068/4.252 ms&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For comparison, &lt;a href=&#34;https://github.com/lighttpd/weighttp&#34;&gt;&lt;code&gt;weighttp&lt;/code&gt;&lt;/a&gt; can be invoked with the very same arguments (in this case at least):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ weighttp  -n 100000 -t1 -c3 -k http://localhost/&#xA;&#xA;weighttp - a lightweight and simple webserver benchmarking tool&#xA;&#xA;starting benchmark...&#xA;spawning thread #1: 3 concurrent requests, 100000 total requests&#xA;&#xA;finished in 2 sec, 333 millisec and 421 microsec, 42855 req/s, 35908 kbyte/s&#xA;requests: 100000 total, 100000 started, 100000 done, 100000 succeeded, 0 failed, 0 errored&#xA;status codes: 100000 2xx, 0 3xx, 0 4xx, 0 5xx&#xA;traffic: 85800000 bytes total, 24600000 bytes http, 61200000 bytes data&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Another example invocation of &lt;code&gt;uhttpc-bench&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ uhttpc-bench http://www.google.com/ -v -c8 -n1000&#xA;&#xA;uhttpc-bench - a Haskell-based ab/weighttp-style webserver benchmarking tool&#xA;&#xA;using 88-byte request header (+ 0-byte body):&#xA; &#34;GET / HTTP/1.1\r\nHost: www.google.com:80\r\nUser-Agent: uhttpc-bench\r\nConnection: close\r\n\r\n&#34;&#xA;&#xA;starting benchmark...&#xA;&#xA;per-client stats:&#xA;&#xA; client spawned +0.000008 s, 125 reqs (125 conns), 8.1 req/s, finished in 15.369619 s&#xA; rtt min/avg/med/max = 99.586/122.902/122.109/167.193 ms&#xA;&#xA; client spawned +0.000258 s, 125 reqs (125 conns), 8.1 req/s, finished in 15.383278 s&#xA; rtt min/avg/med/max = 100.494/123.012/121.648/184.555 ms&#xA;&#xA; client spawned +0.000292 s, 125 reqs (125 conns), 8.1 req/s, finished in 15.365843 s&#xA; rtt min/avg/med/max = 98.721/122.872/121.668/163.810 ms&#xA;&#xA; client spawned +0.000327 s, 124 reqs (124 conns), 8.1 req/s, finished in 15.346788 s&#xA; rtt min/avg/med/max = 103.008/123.709/122.834/174.003 ms&#xA;&#xA; client spawned +0.000366 s, 126 reqs (126 conns), 8.2 req/s, finished in 15.367205 s&#xA; rtt min/avg/med/max = 95.255/121.907/120.736/152.943 ms&#xA;&#xA; client spawned +0.000403 s, 124 reqs (124 conns), 8.1 req/s, finished in 15.357957 s&#xA; rtt min/avg/med/max = 97.730/123.800/123.569/162.326 ms&#xA;&#xA; client spawned +0.000434 s, 125 reqs (125 conns), 8.1 req/s, finished in 15.388717 s&#xA; rtt min/avg/med/max = 103.056/123.055/121.961/162.419 ms&#xA;&#xA; client spawned +0.000461 s, 126 reqs (126 conns), 8.2 req/s, finished in 15.394365 s&#xA; rtt min/avg/med/max = 102.114/122.123/121.289/151.520 ms&#xA;&#xA;finished in 15.394867 seconds, 1000 reqs (1000 conns), 65.0 req/s received&#xA;status codes: 1000 HTTP-302&#xA;data received: 63.498 KiB/s, 1001000 bytes total (783000 bytes http + 218000 bytes content)&#xA;rtt 2/9|25/50/75|91/98-th quantile = 103.737/108.696 | 115.124/121.688/129.944 | 137.715/148.159 ms&#xA;rtt min/avg/max = 95.255/122.919/184.555 ms&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;--csv&lt;/code&gt; option allows to export the raw measurement data in format suitable for offline analysis with statistical tools such as &lt;a href=&#34;http://www.r-project.org&#34;&gt;&lt;code&gt;R&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>