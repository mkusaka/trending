<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Haskell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-09-28T01:36:22Z</updated>
  <subtitle>Daily Trending of Haskell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>swtwsk/vinci-lang</title>
    <updated>2022-09-28T01:36:22Z</updated>
    <id>tag:github.com,2022-09-28:/swtwsk/vinci-lang</id>
    <link href="https://github.com/swtwsk/vinci-lang" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A proof-of-concept compiler targeting SPIR-V for a toy ML functional shading language&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Vinci : a toy ML shading language&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;Vinci&lt;/strong&gt; is a toy ML functional shading language. This repository contains its dedicated compiler targeting &lt;a href=&#34;https://www.khronos.org/registry/SPIR-V/specs/unified1/SPIRV.html&#34;&gt;SPIR-V&lt;/a&gt;, an intermediate representation of &lt;a href=&#34;https://www.vulkan.org/&#34;&gt;Vulkan&lt;/a&gt; shaders.&lt;/p&gt; &#xA;&lt;p&gt;The language and the compiler were developed as a part of a master&#39;s thesis at the &lt;a href=&#34;https://www.mimuw.edu.pl/&#34;&gt;Faculty of Mathematics, Informatics and Mechanics&lt;/a&gt; of the University of Warsaw (MIM UW). The &lt;a href=&#34;https://raw.githubusercontent.com/swtwsk/vinci-lang/main/docs/icfp_abstract.pdf&#34;&gt;extended abstract&lt;/a&gt; of the thesis, prepared for ICFP 2021 SRC, can be found inside the &lt;code&gt;docs&lt;/code&gt; directory.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;The project uses &lt;a href=&#34;https://www.haskellstack.org&#34;&gt;Stack build tool&lt;/a&gt; to compile and manage dependencies.&lt;/p&gt; &#xA;&lt;p&gt;Installing the compiler:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;stack build&#xA;stack install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Stack will install the compiler in &lt;code&gt;~/.local/bin/vinci-lang-exe&lt;/code&gt;, it can be then run by calling &lt;code&gt;vinci-lang-exe&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Assuming the compiler is installed in &lt;code&gt;~/.local/bin/&lt;/code&gt;, running&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;vinci-lang-exe examples/test_frag.vc &amp;gt; examples/test_frag.spvasm&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;will produce a SPIR-V module in a human-readable representation. It should be further compiled using &lt;code&gt;spirv-as&lt;/code&gt;, part of the &lt;a href=&#34;https://github.com/KhronosGroup/SPIRV-Tools&#34;&gt;SPIR-V Tools&lt;/a&gt; that gets installed along &lt;a href=&#34;https://vulkan.lunarg.com/sdk/home&#34;&gt;Vulkan SDK&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;spirv-as --target-env vulkan1.1 examples/test_frag.spvasm -o examples/test_frag.spv&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;spirv-as&lt;/code&gt; creates a SPIR-V binary module from the human-readable representation, that can be executed by a program using Vulkan API, like &lt;a href=&#34;https://github.com/swtwsk/vulkan-playground&#34;&gt;this one&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/swtwsk/vinci-lang/main/docs/example.gif&#34; alt=&#34;Example of Vinci compiler usage&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Code examples&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Vinci&lt;/strong&gt; is similar to other languages from ML family. In contrast to those languages, Vinci does not support algebraic data types or pattern matching due to performance concerns and limitations of GPU programming. On the other hand, apart from expressions typical for toy ML languages — e.g., arithmetic expressions, &lt;code&gt;let&lt;/code&gt; bindings, or tuples — it also introduces C-like structures (similar to records from functional programming) and tuple destructuring syntax.&lt;/p&gt; &#xA;&lt;p&gt;Code examples of fragment and vertex shaders are to be found in the &lt;code&gt;examples&lt;/code&gt; directory. The fragment shader example displays a moving checkerboard (shown in the GIF above), the vertex shader presented below flips the 2D object every moment:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ocaml&#34;&gt;# structure definitions omitted&#xA;&#xA;let pi = 3.1415926538;;&#xA;&#xA;let vert (u : Uniforms) (ins : VertIns) =&#xA;  let (r, g, b) = ins.inColor in&#xA;  let (x, y) = ins.inPosition in&#xA;  let t = 1.0 + sin (u.ubo.u_time - pi / 2.0) in&#xA;  let f1 x = x - t and f2 x = x + t in&#xA;  let y2 = if y &amp;gt; 0.0 then f1 y else f2 y in&#xA;  VertOuts {&#xA;    gl_Position = (x, y2, 0.0, 1.0),&#xA;    fragColor = (r, g, b, 1.0),&#xA;    fragTexCoord = ins.inTexCoord&#xA;  }&#xA;;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Vinci does have a (limited) support for recursion in a form of tail recursion. For example, the code below uses recursive function to compute ceiled division in a very convoluted way:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ocaml&#34;&gt;let ceil_div x =&#xA;  let rec x i =&#xA;    if x &amp;lt; 0.2&#xA;    then (if 1.0 &amp;lt; i then 1.0 else i)&#xA;    else rec (x - 0.2) (i + 0.1)&#xA;  in rec x 0.0&#xA;;;&#xA;&#xA;let frag (_ : Uniforms) (ins : FragIns) =&#xA;  let gray = ceil_div ins.fragColor.x in&#xA;  FragOuts {&#xA;    outColor = (gray, gray, gray, 1.0)&#xA;  }&#xA;;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/swtwsk/vinci-lang/main/docs/rec_shader.png&#34; alt=&#34;Recursive shader example&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Pull requests are welcome. For major changes, please open an issue first to discuss what you would like to change.&lt;/p&gt; &#xA;&lt;p&gt;Please make sure to update tests as appropriate.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://choosealicense.com/licenses/mit/&#34;&gt;MIT&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>tweag/linear-base</title>
    <updated>2022-09-28T01:36:22Z</updated>
    <id>tag:github.com,2022-09-28:/tweag/linear-base</id>
    <link href="https://github.com/tweag/linear-base" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Standard library for linear types in Haskell.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Linear base&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/tweag/linear-base/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-MIT-brightgreen.svg?sanitize=true&#34; alt=&#34;License MIT&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://buildkite.com/tweag-1/linear-base&#34;&gt;&lt;img src=&#34;https://badge.buildkite.com/5b60ab93dadba234a95e04e6568985918552dcc9e7685ede0d.svg?branch=master&#34; alt=&#34;Build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hackage.haskell.org/package/linear-base&#34;&gt;&lt;img src=&#34;https://img.shields.io/hackage/v/linear-base.svg?style=flat&amp;amp;color=brightgreen&#34; alt=&#34;Hackage&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.stackage.org/nightly/package/linear-base&#34;&gt;&lt;img src=&#34;https://stackage.org/package/linear-base/badge/nightly&#34; alt=&#34;Stackage&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Linear base is a standard library for developing applications with linear types. It is named &lt;code&gt;linear-base&lt;/code&gt; to be an analog to the original &lt;a href=&#34;https://hackage.haskell.org/package/base&#34;&gt;&lt;code&gt;base&lt;/code&gt;&lt;/a&gt; package that ships with GHC.&lt;/p&gt; &#xA;&lt;p&gt;The purpose of &lt;code&gt;linear-base&lt;/code&gt; is to provide the minimal facilities you need to write &lt;em&gt;practical&lt;/em&gt; Linear Haskell code, i.e., Haskell code that uses the &lt;code&gt;-XLinearTypes&lt;/code&gt; language extension.&lt;/p&gt; &#xA;&lt;h2&gt;Motivation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;Why do you need &lt;code&gt;linear-base&lt;/code&gt; to write linear projects?&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Data types, functions and classes in &lt;code&gt;base&lt;/code&gt; are not linear types aware. For instance, if &lt;code&gt;n&lt;/code&gt; is a linearly-bound &lt;code&gt;Int&lt;/code&gt;, the RHS of a definition cannot write &lt;code&gt;n + 1&lt;/code&gt; — this will not type check. We need linear variants of &lt;code&gt;Num&lt;/code&gt;, &lt;code&gt;Functor&lt;/code&gt;s, &lt;code&gt;Monad&lt;/code&gt;s, &lt;code&gt;($)&lt;/code&gt;, etc.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;This library exports new abstractions that leverage linear types for resource safety or performance. For example, there are new APIs for file and socket I/O as well as for safe in-place mutation of arrays.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;-XLinearTypes&lt;/code&gt; is released with GHC 9, and &lt;code&gt;linear-base&lt;/code&gt; is released on &lt;a href=&#34;https://hackage.haskell.org/package/linear-base&#34;&gt;Hackage&lt;/a&gt; and &lt;a href=&#34;https://www.stackage.org/nightly/package/linear-base&#34;&gt;Stackage&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;All source files with linear types need a language extension pragma at the top:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;{-# LANGUAGE LinearTypes #-}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;User Guide&lt;/h2&gt; &#xA;&lt;p&gt;If you already know what &lt;code&gt;-XLinearTypes&lt;/code&gt; does and what the linear arrow &lt;code&gt;a %1-&amp;gt; b&lt;/code&gt; means, then read the &lt;a href=&#34;https://github.com/tweag/linear-base/raw/master/docs/USER_GUIDE.md&#34;&gt;User Guide&lt;/a&gt; and explore the &lt;a href=&#34;https://github.com/tweag/linear-base/raw/master/examples&#34;&gt;&lt;code&gt;examples/&lt;/code&gt;&lt;/a&gt; folder to know how to use &lt;code&gt;linear-base&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can also find a table comparing &lt;code&gt;base&lt;/code&gt; and &lt;code&gt;linear-base&lt;/code&gt; typeclasses &lt;a href=&#34;https://github.com/tweag/linear-base/raw/master/docs/CLASS_TABLE.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Learning about &lt;code&gt;-XLinearTypes&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;If you&#39;re a Haskeller who hasn&#39;t written any Linear Haskell code, don&#39;t fear! There are plenty of excellent resources and examples to help you.&lt;/p&gt; &#xA;&lt;h3&gt;Tutorials and examples&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;See the &lt;a href=&#34;https://github.com/tweag/linear-base/raw/master/examples&#34;&gt;&lt;code&gt;examples/&lt;/code&gt;&lt;/a&gt; folder.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/gelisam/linear-examples&#34;&gt;Linear examples on watertight 3D models&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Reading material&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;There is a &lt;a href=&#34;https://gitlab.haskell.org/ghc/ghc/-/wikis/linear-types&#34;&gt;wiki page&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Key Blog posts &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.tweag.io/posts/2017-03-13-linear-types.html&#34;&gt;Predictable performance&lt;/a&gt; (the first blog post from Tweag on this)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.tweag.io/posts/2017-08-03-linear-typestates.html&#34;&gt;IO State Transitions&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.tweag.io/posts/2018-06-21-linear-streams.html&#34;&gt;Streaming&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;See &lt;a href=&#34;https://www.tweag.io/blog/tags/linear-types/&#34;&gt;here&lt;/a&gt; for all of Tweag&#39;s blog posts on linear types.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://arxiv.org/pdf/1710.09756.pdf&#34;&gt;Here is the paper&lt;/a&gt; behind &lt;code&gt;-XLinearTypes&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Talks&lt;/h3&gt; &#xA;&lt;p&gt;–&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://skillsmatter.com/skillscasts/10637-distributed-programming-with-linear-types&#34;&gt;Distributed Programming with Linear Types&amp;nbsp;–&amp;nbsp;Haskell Exchange 2017&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=o0z-qlb5xbI&#34;&gt;Practical Linearity in a higher-order polymorphic language&amp;nbsp;–&amp;nbsp;POPL 2018&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=t0mhvd3-60Y&#34;&gt;Practical Linearity in a higher-order polymorphic language&amp;nbsp;–&amp;nbsp;Curry on 2018&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://skillsmatter.com/skillscasts/11067-keynote-linear-haskell-practical-linearity-in-a-higher-order-polymorphic-language&#34;&gt;Practical Linearity in a higher-order polymorphic language&amp;nbsp;–&amp;nbsp;Haskell Exchange 2018&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=uxv62QQajx8&#34;&gt;Implementing Linear Haskell&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=I7-JuVNvz78&#34;&gt;In-place array update with linear types&amp;nbsp;–&amp;nbsp;ZuriHac 2020&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://skillsmatter.com/skillscasts/14896-typecheck-your-memory-management-with-linear-types&#34;&gt;Typecheck Your Memory Management with Linear Types&amp;nbsp;–&amp;nbsp;Haskell Exchange 2017&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Linear base is maintained by &lt;a href=&#34;https://www.tweag.io/&#34;&gt;Tweag&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To contribute please see the &lt;a href=&#34;https://github.com/tweag/linear-base/raw/master/docs/DESIGN.md&#34;&gt;Design Document&lt;/a&gt; for instructions and advice on making pull requests.&lt;/p&gt; &#xA;&lt;h2&gt;Licence&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://github.com/tweag/linear-base/raw/master/LICENSE&#34;&gt;Licence file&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Copyright © Tweag Holding and its affiliates.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>dataartisan/cat-n-count-haskell</title>
    <updated>2022-09-28T01:36:22Z</updated>
    <id>tag:github.com,2022-09-28:/dataartisan/cat-n-count-haskell</id>
    <link href="https://github.com/dataartisan/cat-n-count-haskell" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
</feed>