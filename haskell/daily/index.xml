<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Haskell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-10-01T01:35:25Z</updated>
  <subtitle>Daily Trending of Haskell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>iburzynski/haskell-dojo</title>
    <updated>2023-10-01T01:35:25Z</updated>
    <id>tag:github.com,2023-10-01:/iburzynski/haskell-dojo</id>
    <link href="https://github.com/iburzynski/haskell-dojo" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Guided projects for EMURGO Academy&#39;s Cardano-Haskell Developer Open Course&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;üèØ &lt;strong&gt;Haskell Dojo&lt;/strong&gt; ü•∑&lt;/h1&gt; &#xA;&lt;h2&gt;&lt;strong&gt;Setup&lt;/strong&gt;&lt;/h2&gt; &#xA;&lt;p&gt;The Haskell Dojo can be set up in several ways, depending on your learning goals:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/iburzynski/haskell-dojo/main/#with-jambhala-cardano-development-suite&#34;&gt;With Jambhala Cardano Development Suite&lt;/a&gt; -- &lt;em&gt;recommended for Cardano developers&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/iburzynski/haskell-dojo/main/#with-gitpod&#34;&gt;With Gitpod&lt;/a&gt; (cloud-based browser editing) -- &lt;em&gt;recommended for sampling Haskell&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/iburzynski/haskell-dojo/main/#with-a-local-haskell-installation&#34;&gt;With a local Haskell installation&lt;/a&gt; (GHCup) -- &lt;em&gt;recommended for non-Cardano developers learning Haskell long-term&lt;/em&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;&lt;strong&gt;With Jambhala Cardano Development Suite&lt;/strong&gt;&lt;/h3&gt; &#xA;&lt;p&gt;This repository can be used as an add-on to the &lt;a href=&#34;https://github.com/iburzynski/jambhala&#34;&gt;Jambhala Cardano Development Suite&lt;/a&gt;. This allows aspiring Cardano developers to complete this Haskell course within the same fully pre-configured environment they&#39;ll use to learn &lt;code&gt;cardano-cli&lt;/code&gt; and Plutus afterward.&lt;/p&gt; &#xA;&lt;p&gt;If you intend to use Jambhala for learning Cardano development, follow these steps to get started with Haskell Dojo in Jambhala:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Fork this repository. &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; keep the name &lt;code&gt;haskell-dojo&lt;/code&gt; as the name/URL slug for your fork: using this name is required for integration with Jambhala.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/iburzynski/jambhala&#34;&gt;Install Jambhala&lt;/a&gt; by following the instructions in the official README.&lt;/li&gt; &#xA; &lt;li&gt;After completing the installation, navigate to the &lt;code&gt;jambhala&lt;/code&gt; directory in your terminal and run &lt;code&gt;jcode&lt;/code&gt; to open Jambhala&#39;s integrated VS Codium editor:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cd jambhala&#xA;jcode&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;Open the &lt;code&gt;.env&lt;/code&gt; file in the Jambhala root directory and add your Github username to the &lt;code&gt;GITHUB_ID&lt;/code&gt; variable. I.e.:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# jambhala/.env&#xA;&#xA;GITHUB_ID=&#34;iburzynski&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;5&#34;&gt; &#xA; &lt;li&gt;Enter &lt;code&gt;refresh&lt;/code&gt; in your terminal session. Your forked &lt;code&gt;haskell-dojo&lt;/code&gt; should now automatically clone itself into the &lt;code&gt;jambhala&lt;/code&gt; directory (and will be ignored by &lt;code&gt;git&lt;/code&gt;). Exit the editor and reopen it in the &lt;code&gt;haskell-dojo&lt;/code&gt; directory by running &lt;code&gt;jcode haskell-dojo&lt;/code&gt; (use this same command from the &lt;code&gt;jambhala&lt;/code&gt; directory in your terminal each time to ensure proper functioning).&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;&lt;strong&gt;With Gitpod&lt;/strong&gt;&lt;/h3&gt; &#xA;&lt;p&gt;This repository contains a preconfigured Gitpod Haskell development environment, allowing you to start coding in Haskell with zero installation using &lt;a href=&#34;https://www.gitpod.io/&#34;&gt;Gitpod&lt;/a&gt; and a browser-based version of VS Code.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re looking to dive into Haskell quickly and aren&#39;t ready to commit to a local installation, follow these steps to get started with Gitpod:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Fork this repository&lt;/li&gt; &#xA; &lt;li&gt;Copy the link to your new repository and prefix it with &#34;&lt;a href=&#34;https://gitpod.io/#&#34;&gt;https://gitpod.io/#&lt;/a&gt;&#34; in your browser&lt;/li&gt; &#xA; &lt;li&gt;Click &lt;code&gt;Continue with GitHub&lt;/code&gt; and &lt;code&gt;Authorize gitpod-io&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Wait for the environment to build. This can take a while the first time.&lt;/li&gt; &#xA; &lt;li&gt;Select &#34;VS Code Browser&#34; as your editor.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;&lt;strong&gt;With a Local Haskell Installation&lt;/strong&gt;&lt;/h3&gt; &#xA;&lt;p&gt;This repository can also be used with a local Haskell toolchain installation through &lt;a href=&#34;https://www.haskell.org/ghcup/&#34;&gt;GHCup&lt;/a&gt; and either VS Codium or VS Code. This method may not be ideal for new Haskellers, as correct configuration to get Haskell to work properly in VS Code can be tricky and delay the process of actually learning Haskell. Having a system-wide Haskell installation can also occasionally cause conflicts with Haskell Nix development environments, such as used by Jambhala. For these reasons it is recommended to use the Jambhala suite (if you&#39;re learning Haskell for Cardano development) or Gitpod instead.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;If you do choose to install Haskell globally on your machine, be sure to do so using &lt;a href=&#34;https://www.haskell.org/ghcup/&#34;&gt;GHCup&lt;/a&gt;, which is the canonical installation method for Haskell at the time of writing, and has good synergy with VS Codium/Code. Follow the official installation process at the link above.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;If you have Haskell installed locally and don&#39;t intend to use Jambhala later, the Haskell Dojo code should compile and run with &lt;code&gt;cabal&lt;/code&gt; for most versions of GHC. After forking and cloning Haskell Dojo on your system, navigate to the directory in your terminal and run &lt;code&gt;cabal run&lt;/code&gt; to compile and run the program.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;For IDE support in VS Codium/Code:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You must have Haskell Language Server installed. If you didn&#39;t choose to install this when you installed GHCup, you can do so in the &lt;code&gt;ghcup tui&lt;/code&gt; interface.&lt;/li&gt; &#xA; &lt;li&gt;You must have the Haskell VS Code extension installed. &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; this should be installed after GHCUp to prevent duplicate Haskell binaries being created on your system, which can break functionality in VS Codium/Code.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;strong&gt;Completing the Course&lt;/strong&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Complete the 8 assignments in the &lt;code&gt;assignments&lt;/code&gt; directory sequentially, filling in the required Haskell code in the designated &lt;code&gt;.hs&lt;/code&gt; file mentioned at the top of each markdown file.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Try opening the markdown files on Github for better viewing. Alternatively you can right-click the markdown files and click &lt;code&gt;Open preview&lt;/code&gt; to view them in your VS Codium/Code editor (then open a split window).&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; be sure to stage, commit, and push the changes you make to your fork (using the &lt;code&gt;Source Control&lt;/code&gt; tab in VS Codium/Code, or a source control method of your choice). &lt;strong&gt;If you are using Gitpod&lt;/strong&gt; this is especially important, as any changes you make will be lost when you close your browser session unless they are pushed to your fork!&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;&lt;strong&gt;Using the Sandbox&lt;/strong&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Haskell Dojo provides a special empty file called &lt;code&gt;Sandbox.hs&lt;/code&gt; in the &lt;code&gt;src/&lt;/code&gt; directory.&lt;/p&gt; &#xA;&lt;p&gt;You can use this file as a scratchpad to:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;practice/experiment with writing arbitrary Haskell code&lt;/li&gt; &#xA; &lt;li&gt;test this practice code in GHCi&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;The provided &lt;code&gt;sbox&lt;/code&gt; script launches GHCi with the &lt;code&gt;Sandbox&lt;/code&gt; module open:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;./sbox&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can use this GHCi session to experiment and test simple code directly in the interpreter, or run any code you&#39;ve saved in &lt;code&gt;src/Sandbox.hs&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Use the &lt;code&gt;:r&lt;/code&gt; (&lt;code&gt;:reload&lt;/code&gt;) command in GHCi to reload the &lt;code&gt;Sandbox&lt;/code&gt; contents after making changes.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; &lt;code&gt;Sandbox.hs&lt;/code&gt; is a module of our larger Cabal project, which means we can use it to test functions from libraries our project is using besides the Haskell standard library (&lt;code&gt;base&lt;/code&gt;), such as &lt;code&gt;random&lt;/code&gt; and &lt;code&gt;directory&lt;/code&gt;. This isn&#39;t possible in an ordinary GHCi session. However, this also means &lt;code&gt;Sandbox.hs&lt;/code&gt; must always compile with no errors before we can run any other code inside the project. Correct or comment out any erroneous code in this file as needed to ensure successful compilation.&lt;/p&gt; &#xA;&lt;/blockquote&gt;</summary>
  </entry>
  <entry>
    <title>purview-framework/purview</title>
    <updated>2023-10-01T01:35:25Z</updated>
    <id>tag:github.com,2023-10-01:/purview-framework/purview</id>
    <link href="https://github.com/purview-framework/purview" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Build server rendered, interactive websites with Haskell&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Purview&lt;/h1&gt; &#xA;&lt;p&gt;A simple, fun way to build websites with Haskell. It&#39;s inspired by Phoenix LiveView, React, and Redux + Sagas.&lt;/p&gt; &#xA;&lt;p&gt;The main points:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;It&#39;s server side rendered and uses websockets to communicate HTML updates and to receive events.&lt;/li&gt; &#xA; &lt;li&gt;State can be broken up into small components.&lt;/li&gt; &#xA; &lt;li&gt;Attributes flow down to concrete HTML, events bubble up to state handlers.&lt;/li&gt; &#xA; &lt;li&gt;Handlers can send further events to a parent handler or themselves&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;It&#39;s still in early development so expect things to break or be missing!&lt;/p&gt; &#xA;&lt;h2&gt;What it looks like&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;module Main where&#xA;&#xA;import Prelude hiding (div)&#xA;&#xA;import Purview &#xA;import Purview.Server&#xA;&#xA;&#xA;data CountEvent = Increment | Decrement&#xA;  deriving (Show, Eq)&#xA;&#xA;view :: Int -&amp;gt; Purview CountEvent m&#xA;view count = div&#xA;  [ h1 [ text (show count) ]&#xA;  , div [ onClick Increment $ button [ text &#34;increment&#34; ]&#xA;        , onClick Decrement $ button [ text &#34;decrement&#34; ]&#xA;        ]&#xA;  ]&#xA;&#xA;-- passes state down to the child and maintains type safety of actions&#xA;countHandler :: (Int -&amp;gt; Purview CountEvent m) -&amp;gt; Purview () m&#xA;-- arguments are initial actions, initial state, and then the reducer&#xA;countHandler = handler&#39; [] (0 :: Int) reducer&#xA;  where&#xA;    reducer Increment state = (state + 1, [])  -- new events can be added in the []&#xA;    reducer Decrement state = (state - 1, [])&#xA;&#xA;-- url is passed in to the top level component by `serve`&#xA;component url = countHandler view&#xA;&#xA;main = serve defaultConfiguration component&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;More detailed docs on the use and particulars of Purview are mainly on &lt;a href=&#34;https://hackage.haskell.org/package/purview&#34;&gt;Hackage&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Overview of how it works&lt;/h3&gt; &#xA;&lt;p&gt;Using an imagined example of getting the time, here&#39;s how events flow when the user clicks &#34;check time&#34;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;The event is sent from the browser in a form like&lt;/p&gt; &lt;p&gt;&lt;code&gt;{ event: click, value: undefined, location: [0], childLocation: [0,0] }&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The event is put onto the channel for the event loop to process&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;It goes down the tree to find the event in Haskell by childLocation&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;It takes that event and applies it to the handler found by location&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The handler does its work in a green thread, creating a new event that looks like&lt;/p&gt; &lt;p&gt;&lt;code&gt;{ event: stateChange, fn: state -&amp;gt; state, location: [0] }&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The state change event is put onto the channel for the event loop to process&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;By going down the tree it applies the state change fn to the latest state in the tree, returning a new tree&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Any HTML changes are sent to the browser, completing the loop&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Contributing&lt;/h3&gt; &#xA;&lt;p&gt;Anything is welcome, including examples or patterns you found nice. There&#39;s still a lot to discover.&lt;/p&gt; &#xA;&lt;p&gt;The roadmap is, loosely, determined by adding things required to build real websites. The first two site-based goals:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;The Purview website itself, which will have more in depth tutorials (so requiring at least navigation)&lt;/li&gt; &#xA; &lt;li&gt;A stripe-based checkout (requiring communication with javascript)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install &lt;a href=&#34;https://docs.haskellstack.org/en/stable/README/&#34;&gt;stack&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;stack build&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Running Tests&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;The same as above with stack and build&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;stack test&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
  <entry>
    <title>tlevine/linkedin-profile</title>
    <updated>2023-10-01T01:35:25Z</updated>
    <id>tag:github.com,2023-10-01:/tlevine/linkedin-profile</id>
    <link href="https://github.com/tlevine/linkedin-profile" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;p&gt;First, I wanted to see what would happen if I created a meaning-void LinkedIn profile of buzzwords.&lt;/p&gt; &#xA;&lt;p&gt;Compile and run &lt;code&gt;big-data-scientist.hs&lt;/code&gt;. It will give a list of meat words and fascia words. These lists will be in a random order. Use these lists to compose a meaningless bulleted description of your past experience.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Start the first bullet with a fascia word. You will follow it by a meat word, and you should adjust the parts of speech to make them fit.&lt;/li&gt; &#xA; &lt;li&gt;Continue stringing meat words together, adjusting their parts of speech and adding stop words and other small words as you think makes sense.&lt;/li&gt; &#xA; &lt;li&gt;If adjusting the parts of speech doesn&#39;t help, add a fascia word in between two meat words.&lt;/li&gt; &#xA; &lt;li&gt;If adding the fascia word doesn&#39;t help connect adjacent meat words, end the current bullet at the first of the two meat words, and use the fascia word and the second of the meat words to start the next bullet.&lt;/li&gt; &#xA; &lt;li&gt;Repeat steps 2 to 4 until you have four bullets.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Then, I realized that it might be sort of interesting to amass a large set of recruiter spam and to figure out what sort of things recruiters search for on LinkedIn, so now I&#39;m just trying to get lots of recruiter spam.&lt;/p&gt; &#xA;&lt;p&gt;I can specify 50 &#34;skills&#34;. What should they be&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/languages&#34;&gt;Top 10 languages from GitHub&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;GitHub hot searches&lt;/li&gt; &#xA; &lt;li&gt;Stack Overflow &lt;a href=&#34;http://careers.stackoverflow.com/employer/search&#34;&gt;top technologies&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Social media things might be most hilarious because they are such nonsense.&lt;/p&gt;</summary>
  </entry>
</feed>