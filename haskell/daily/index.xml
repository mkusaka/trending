<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Haskell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-11-29T01:32:27Z</updated>
  <subtitle>Daily Trending of Haskell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>mortberg/cubicaltt</title>
    <updated>2022-11-29T01:32:27Z</updated>
    <id>tag:github.com,2022-11-29:/mortberg/cubicaltt</id>
    <link href="https://github.com/mortberg/cubicaltt" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Experimental implementation of Cubical Type Theory&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Cubical Type Theory&lt;/h1&gt; &#xA;&lt;p&gt;Experimental implementation of &lt;a href=&#34;http://www.cse.chalmers.se/~coquand/cubicaltt.pdf&#34;&gt;Cubical Type Theory&lt;/a&gt; in which the user can directly manipulate n-dimensional cubes. The language extends type theory with:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Path abstraction and application&lt;/li&gt; &#xA; &lt;li&gt;Composition and transport&lt;/li&gt; &#xA; &lt;li&gt;Equivalences can be transformed into equalities (and univalence can be proved, see &#34;examples/univalence.ctt&#34;)&lt;/li&gt; &#xA; &lt;li&gt;Identity types (see &#34;examples/idtypes.ctt&#34;)&lt;/li&gt; &#xA; &lt;li&gt;Some higher inductive types (see &#34;examples/circle.ctt&#34; and &#34;examples/integer.ctt&#34;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Because of this it is not necessary to have a special file of primitives (like in &lt;a href=&#34;https://github.com/simhu/cubical&#34;&gt;cubical&lt;/a&gt;), for instance function extensionality is directly provable in the system:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;funExt (A : U) (B : A -&amp;gt; U) (f g : (x : A) -&amp;gt; B x)&#xA;       (p : (x : A) -&amp;gt; Id (B x) (f x) (g x)) :&#xA;       Id ((y : A) -&amp;gt; B y) f g = &amp;lt;i&amp;gt; \(a : A) -&amp;gt; (p a) @ i&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For examples, including a demo (&#34;examples/demo.ctt&#34;), see the &lt;a href=&#34;https://github.com/mortberg/cubicaltt/tree/master/examples#cubical-type-theory-examples&#34;&gt;examples&lt;/a&gt; folder. For a summary of where to find the main results of the cubical type theory paper in the examples folder see &#34;examples/summary.ctt&#34;.&lt;/p&gt; &#xA;&lt;p&gt;The following keywords are reserved:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;module, where, let, in, split, with, mutual, import, data, hdata,&#xA;undefined, PathP, comp, transport, fill, Glue, glue, unglue, U,&#xA;opaque, transparent, transparent_all, Id, idC, idJ&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;p&gt;You can compile the project using either &lt;code&gt;cabal&lt;/code&gt;, &lt;code&gt;make&lt;/code&gt;, or &lt;code&gt;stack&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Cabal&lt;/h2&gt; &#xA;&lt;p&gt;To compile the project using &lt;a href=&#34;https://www.haskell.org/cabal/&#34;&gt;cabal&lt;/a&gt;, first install the build-time dependencies (either globally or in a cabal sandbox):&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;cabal install alex happy bnfc&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Then the project can be built (and installed):&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;cabal install&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Make&lt;/h2&gt; &#xA;&lt;p&gt;Alternatively, a &lt;code&gt;Makefile&lt;/code&gt; is provided:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;    make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This assumes that the following Haskell packages are installed using cabal:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;  mtl, haskeline, directory, BNFC, alex, happy, QuickCheck&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To build the TAGS file, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;    make TAGS&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This assumes that &lt;code&gt;hasktags&lt;/code&gt; has been installed.&lt;/p&gt; &#xA;&lt;p&gt;To clean up, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;    make clean&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Stack&lt;/h2&gt; &#xA;&lt;p&gt;To compile and install the project using &lt;a href=&#34;https://haskellstack.org/&#34;&gt;stack&lt;/a&gt;, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;    stack setup&#xA;    stack install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;To run the system type&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;cubical &amp;lt;filename&amp;gt;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;To see a list of options add the --help flag. In the interaction loop type :h to get a list of available commands. Note that the current directory will be taken as the search path for the imports.&lt;/p&gt; &#xA;&lt;p&gt;When using cabal sandboxes, &lt;code&gt;cubical&lt;/code&gt; can be invoked using&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;cabal exec cubical &amp;lt;filename&amp;gt;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;To enable emacs to edit &lt;code&gt;*.ctt&lt;/code&gt; files in &lt;code&gt;cubicaltt-mode&lt;/code&gt;, add the following line to your &lt;code&gt;.emacs&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(autoload &#39;cubicaltt-mode &#34;cubicaltt&#34; &#34;cubical editing mode&#34; t)&#xA;(setq auto-mode-alist (append auto-mode-alist &#39;((&#34;\\.ctt$&#34; . cubicaltt-mode))))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and ensure that the file &lt;code&gt;cubicaltt.el&lt;/code&gt; is visible in one of the diretories on emacs&#39; &lt;code&gt;load-path&lt;/code&gt;, or else load it in advance, either manually with &lt;code&gt;M-x load-file&lt;/code&gt;, or with something like the following line in &lt;code&gt;.emacs&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(load-file &#34;cubicaltt.el&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When using &lt;code&gt;cubicaltt-mode&lt;/code&gt; in Emacs, the command &lt;code&gt;cubicaltt-load&lt;/code&gt; will launch the interactive toplevel in an Emacs buffer and load the current file. It is bound to &lt;code&gt;C-c C-l&lt;/code&gt; by default. If &lt;code&gt;cubical&lt;/code&gt; is not on Emacs&#39;s &lt;code&gt;exec-path&lt;/code&gt;, then set the variable &lt;code&gt;cubicaltt-command&lt;/code&gt; to the command that runs it.&lt;/p&gt; &#xA;&lt;h2&gt;References and notes&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;http://www.cse.chalmers.se/~coquand/cubicaltt.pdf&#34;&gt;Cubical Type Theory: a constructive interpretation of the univalence axiom&lt;/a&gt;, Cyril Cohen, Thierry Coquand, Simon Huber, and Anders Mörtberg. This paper describes the type theory and its model.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://arxiv.org/abs/1607.04156&#34;&gt;Canonicity for Cubical Type Theory&lt;/a&gt;, Simon Huber. Proof of canonicity for the type theory.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Voevodsky&#39;s lectures and texts on &lt;a href=&#34;http://www.math.ias.edu/vladimir/home&#34;&gt;univalent foundations&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;HoTT book and webpage: &lt;a href=&#34;http://homotopytypetheory.org/&#34;&gt;http://homotopytypetheory.org/&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;http://www.cse.chalmers.se/~coquand/face.pdf&#34;&gt;Cubical Type Theory&lt;/a&gt; - Old version of the typing rules of the system. See &lt;a href=&#34;http://www.cse.chalmers.se/~coquand/face.pdf&#34;&gt;this&lt;/a&gt; for a variation using isomorphisms instead of equivalences.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;http://www.cse.chalmers.se/~coquand/shape.pdf&#34;&gt;Internal version of the uniform Kan filling condition&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;http://www.cse.chalmers.se/~coquand/vv.pdf&#34;&gt;A category of cubical sets&lt;/a&gt; - main definitions towards a formalization&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/valis/hoq/&#34;&gt;hoq&lt;/a&gt; - A language based on homotopy type theory with an interval (documentation available &lt;a href=&#34;https://docs.google.com/viewer?a=v&amp;amp;pid=forums&amp;amp;srcid=MTgzMDE5NzAyNTk5NDUxMjg3MDABMDQ5MTM3MjY5Nzc5MzY3ODYzNjABT3A0QWRIempiZTBKATAuMQEBdjI&#34;&gt;here&lt;/a&gt;).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;http://dlicata.web.wesleyan.edu/pubs/lb15cubicalsynth/lb15cubicalsynth.pdf&#34;&gt;A Cubical Approach to Synthetic Homotopy Theory&lt;/a&gt;, Dan Licata, Guillaume Brunerie.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;http://www.cse.chalmers.se/~bernardy/CCCC.pdf&#34;&gt;Type Theory in Color&lt;/a&gt;, Jean-Philippe Bernardy, Guilhem Moulin.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;http://www.cse.chalmers.se/~bengt/papers/GKminiTT.pdf&#34;&gt;A simple type-theoretic language: Mini-TT&lt;/a&gt;, Thierry Coquand, Yoshiki Kinoshita, Bengt Nordström and Makoto Takeyama - This presents the type theory that the system is based on.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;http://www.cse.chalmers.se/~coquand/model1.pdf&#34;&gt;A cubical set model of type theory&lt;/a&gt;, Marc Bezem, Thierry Coquand and Simon Huber.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;http://arxiv.org/abs/1401.7807&#34;&gt;An equivalent presentation of the Bezem-Coquand-Huber category of cubical sets&lt;/a&gt;, Andrew Pitts - This gives a presentation of the cubical set model in nominal sets.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;http://www.cse.chalmers.se/~coquand/singl.pdf&#34;&gt;Remark on singleton types&lt;/a&gt;, Thierry Coquand.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;http://www.cse.chalmers.se/~coquand/countermodel.pdf&#34;&gt;Note on Kripke model&lt;/a&gt;, Marc Bezem and Thierry Coquand.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Authors&lt;/h2&gt; &#xA;&lt;p&gt;Cyril Cohen, Thierry Coquand, Simon Huber, Anders Mörtberg&lt;/p&gt;</summary>
  </entry>
</feed>