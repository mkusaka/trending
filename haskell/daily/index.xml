<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Haskell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-13T01:56:07Z</updated>
  <subtitle>Daily Trending of Haskell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Liqwid-Labs/liqwid-plutarch-extra</title>
    <updated>2022-06-13T01:56:07Z</updated>
    <id>tag:github.com,2022-06-13:/Liqwid-Labs/liqwid-plutarch-extra</id>
    <link href="https://github.com/Liqwid-Labs/liqwid-plutarch-extra" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;em&gt;Note, 2022-06-11&lt;/em&gt;: This repo is alpha level software. Stability or correctness should not be assumed.&lt;/p&gt; &#xA;&lt;h1&gt;&lt;code&gt;liqwid-plutarch-extra&lt;/code&gt;&lt;/h1&gt; &#xA;&lt;h2&gt;What is this?&lt;/h2&gt; &#xA;&lt;h2&gt;What &lt;em&gt;exactly&lt;/em&gt; does this do for me?&lt;/h2&gt; &#xA;&lt;h1&gt;How do I use this?&lt;/h1&gt; &#xA;&lt;h1&gt;What can I do with this?&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;liqwid-plutarch-extra&lt;/code&gt; is licensed under the Apache 2.0 license (SPDX code &lt;code&gt;Apache-2.0&lt;/code&gt;); please see the &lt;code&gt;LICENSE&lt;/code&gt; file for more details.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>sdiehl/wiwinwlh</title>
    <updated>2022-06-13T01:56:07Z</updated>
    <id>tag:github.com,2022-06-13:/sdiehl/wiwinwlh</id>
    <link href="https://github.com/sdiehl/wiwinwlh" rel="alternate"></link>
    <summary type="html">&lt;p&gt;What I Wish I Knew When Learning Haskell&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;http://dev.stephendiehl.com/hask/&#34;&gt; &lt;img src=&#34;http://dev.stephendiehl.com/hask/img/title.png&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/sdiehl/wiwinwlh/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;http://img.shields.io/badge/license-mit-blue.svg?sanitize=true&#34; alt=&#34;MIT License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://travis-ci.org/sdiehl/wiwinwlh&#34;&gt;&lt;img src=&#34;https://travis-ci.org/sdiehl/wiwinwlh.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Read Online:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://dev.stephendiehl.com/hask/&#34;&gt;&lt;strong&gt;HTML&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://dev.stephendiehl.com/hask/tutorial.pdf&#34;&gt;&lt;strong&gt;Screen PDF&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://dev.stephendiehl.com/hask/tutorial_print.pdf&#34;&gt;&lt;strong&gt;Printable PDF&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://dev.stephendiehl.com/hask/tutorial.epub&#34;&gt;&lt;strong&gt;EPUB&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://dev.stephendiehl.com/hask/tutorial.mobi&#34;&gt;&lt;strong&gt;Kindle MOBI&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sdiehl/wiwinwlh/tree/master/src&#34;&gt;&lt;strong&gt;Example Code&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you&#39;d like a physical copy of the text you can either print it out for yourself (see Printable PDF) or purchase one from a publisher. The price is at-cost since the text is open source and free.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.blurb.co.uk/b/9958091-what-i-wish-i-knew-when-learning-haskell&#34;&gt;&lt;strong&gt;Blurb Publisher&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The current published version is:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Date: February 16, 2020&#xA;Git: d429c2e21b9636cffa27a8d4f063644b8bcecf1a&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;If you want to submit a fix for a typo or fix edit the following Markdown file which generates all other targets.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sdiehl/wiwinwlh/master/tutorial.md&#34;&gt;tutorial.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Then submit a Pull Request on Github describing your change.&lt;/p&gt; &#xA;&lt;p&gt;Source code is directly included from the &lt;code&gt;src&lt;/code&gt; directory into the resulting document by the preprocessor. To include a new sample edit the example source code directly. When adding a new Haskell file, add it to the &lt;code&gt;ci&lt;/code&gt; script inside of the folder so it is run in the continuous integration script.&lt;/p&gt; &#xA;&lt;h2&gt;Source Code&lt;/h2&gt; &#xA;&lt;p&gt;Chapter Code Examples:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sdiehl/wiwinwlh/tree/master/src/01-basics/&#34;&gt;01-basics/ &lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sdiehl/wiwinwlh/tree/master/src/02-monads/&#34;&gt;02-monads/ &lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sdiehl/wiwinwlh/tree/master/src/03-monad-transformers/&#34;&gt;03-monad-transformers/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sdiehl/wiwinwlh/tree/master/src/04-extensions/&#34;&gt;04-extensions/ &lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sdiehl/wiwinwlh/tree/master/src/05-laziness/&#34;&gt;05-laziness/ &lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sdiehl/wiwinwlh/tree/master/src/06-prelude/&#34;&gt;06-prelude/ &lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sdiehl/wiwinwlh/tree/master/src/07-text-bytestring/&#34;&gt;07-text-bytestring/ &lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sdiehl/wiwinwlh/tree/master/src/08-applicatives/&#34;&gt;08-applicatives/ &lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sdiehl/wiwinwlh/tree/master/src/09-errors/&#34;&gt;09-errors/ &lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sdiehl/wiwinwlh/tree/master/src/10-advanced-monads/&#34;&gt;10-advanced-monads/ &lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sdiehl/wiwinwlh/tree/master/src/11-quantification/&#34;&gt;11-quantification/ &lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sdiehl/wiwinwlh/tree/master/src/12-gadts/&#34;&gt;12-gadts/ &lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sdiehl/wiwinwlh/tree/master/src/13-lambda-calculus/&#34;&gt;13-lambda-calculus/ &lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sdiehl/wiwinwlh/tree/master/src/14-interpreters/&#34;&gt;14-interpreters/ &lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sdiehl/wiwinwlh/tree/master/src/15-testing/&#34;&gt;15-testing/ &lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sdiehl/wiwinwlh/tree/master/src/16-type-families/&#34;&gt;16-type-families/ &lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sdiehl/wiwinwlh/tree/master/src/17-promotion/&#34;&gt;17-promotion/ &lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sdiehl/wiwinwlh/tree/master/src/18-generics/&#34;&gt;18-generics/ &lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sdiehl/wiwinwlh/tree/master/src/19-numbers/&#34;&gt;19-numbers/ &lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sdiehl/wiwinwlh/tree/master/src/20-data-structures/&#34;&gt;20-data-structures/ &lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sdiehl/wiwinwlh/tree/master/src/21-ffi/&#34;&gt;21-ffi/ &lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sdiehl/wiwinwlh/tree/master/src/22-concurrency/&#34;&gt;22-concurrency/ &lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sdiehl/wiwinwlh/tree/master/src/23-graphics/&#34;&gt;23-graphics/ &lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sdiehl/wiwinwlh/tree/master/src/24-parsing/&#34;&gt;24-parsing/ &lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sdiehl/wiwinwlh/tree/master/src/25-streaming/&#34;&gt;25-streaming/ &lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sdiehl/wiwinwlh/tree/master/src/26-data-formats/&#34;&gt;26-data-formats/ &lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sdiehl/wiwinwlh/tree/master/src/27-web/&#34;&gt;27-web/ &lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sdiehl/wiwinwlh/tree/master/src/28-databases/&#34;&gt;28-databases/ &lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sdiehl/wiwinwlh/tree/master/src/29-ghc/&#34;&gt;29-ghc/ &lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sdiehl/wiwinwlh/tree/master/src/30-languages/&#34;&gt;30-languages/ &lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sdiehl/wiwinwlh/tree/master/src/31-template-haskell/&#34;&gt;31-template-haskell/ &lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sdiehl/wiwinwlh/tree/master/src/32-cryptography/&#34;&gt;32-cryptography &lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sdiehl/wiwinwlh/tree/master/src/33-categories/&#34;&gt;33-categories/ &lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sdiehl/wiwinwlh/tree/master/src/34-time/&#34;&gt;34-time/ &lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Compiling&lt;/h2&gt; &#xA;&lt;p&gt;If you&#39;d like to build the documents locally you&#39;ll need to compile the preprocessor run either use Nix, Stack or Cabal to compile the preprocessor executable in the cabal file.&lt;/p&gt; &#xA;&lt;p&gt;Stack:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ stack install&#xA;$ stack exec make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Cabal:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cabal install&#xA;$ cabal exec make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For Nix:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ make run-shell&#xA;$ ghc --make includes.hs&#xA;$ make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After this is built you can build anyone of the available target outputs.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;LaTeX&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;You will need the whole XeTeX suite to compile.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ apt-get install texlive texlive-xetex texlive-extra texlive-extra-utils&#xA;$ make pdf&#xA;$ make print&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;HTML&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ make html&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Microsoft Word&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ make docx&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Ebook&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ make epub&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Continuous Integration&lt;/h2&gt; &#xA;&lt;p&gt;The book and example code is kept stable under continuous integration. The script &lt;code&gt;src/ci&lt;/code&gt; will run through all example code and compile it against the &lt;code&gt;example.cabal&lt;/code&gt; file of the given chapter. All bounds for dependencies are specified in the cabal file and ensure that the given code examples are up to date.&lt;/p&gt; &#xA;&lt;p&gt;The CI is run in Github under TravisCI on every pull request.&lt;/p&gt; &#xA;&lt;p&gt;To run the integration suite manually run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cd src &amp;amp;&amp;amp; ./ci&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Copyright © 2009-2020 Stephen Diehl&lt;/p&gt; &#xA;&lt;p&gt;This code included in the text is dedicated to the public domain. You can copy, modify, distribute and perform the code, even for commercial purposes, all without asking permission.&lt;/p&gt; &#xA;&lt;p&gt;You may distribute this text in its full form freely, but may not reauthor or sublicense this work. Any reproductions of major portions of the text must include attribution.&lt;/p&gt; &#xA;&lt;p&gt;The software is provided &#34;as is&#34;, without warranty of any kind, express or implied, including But not limited to the warranties of merchantability, fitness for a particular purpose and noninfringement. In no event shall the authors or copyright holders be liable for any claim, damages or other liability, whether in an action of contract, tort or otherwise, Arising from, out of or in connection with the software or the use or other dealings in the software.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>airalab/hs-web3</title>
    <updated>2022-06-13T01:56:07Z</updated>
    <id>tag:github.com,2022-06-13:/airalab/hs-web3</id>
    <link href="https://github.com/airalab/hs-web3" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Web3 API for Haskell.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Web3 API for Haskell&lt;/h1&gt; &#xA;&lt;p&gt;This library implements Haskell API client for popular Web3 platforms.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://hs-web3.readthedocs.io/en/latest/?badge=latest&#34;&gt;&lt;img src=&#34;https://readthedocs.org/projects/hs-web3/badge/?version=latest&#34; alt=&#34;Documentation Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/airalab/hs-web3/actions&#34;&gt;&lt;img src=&#34;https://github.com/airalab/hs-web3/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://matrix.hackage.haskell.org/package/web3&#34;&gt;&lt;img src=&#34;https://matrix.hackage.haskell.org/api/v2/packages/web3/badge&#34; alt=&#34;Hackage Matrix&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://hackage.haskell.org/package/web3&#34;&gt;&lt;img src=&#34;https://img.shields.io/hackage/v/web3.svg?sanitize=true&#34; alt=&#34;Hackage&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://stackage.org/lts-14/package/web3&#34;&gt;&lt;img src=&#34;http://stackage.org/package/web3/badge/lts-14&#34; alt=&#34;LTS-14&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://stackage.org/nightly/package/web3&#34;&gt;&lt;img src=&#34;http://stackage.org/package/web3/badge/nightly&#34; alt=&#34;nightly&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.codetriage.com/airalab/hs-web3&#34;&gt;&lt;img src=&#34;https://www.codetriage.com/airalab/hs-web3/badges/users.svg?sanitize=true&#34; alt=&#34;Code Triagers&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;stack install web3&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;{-# LANGUAGE OverloadedStrings #-}&#xA;&#xA;module Main where&#xA;&#xA;-- Basic imports&#xA;import           Network.Ethereum&#xA;import           Network.Web3&#xA;&#xA;-- Eth API support&#xA;import qualified Network.Ethereum.Api.Eth   as Eth&#xA;import           Network.Ethereum.Api.Types&#xA;&#xA;-- ENS support&#xA;import qualified Network.Ethereum.Ens       as Ens&#xA;&#xA;-- Lens to simple param setting&#xA;import           Lens.Micro                 ((.~))&#xA;&#xA;main :: IO ()&#xA;main = do&#xA;    -- Use default provider on http://localhost:8545&#xA;    ret &amp;lt;- runWeb3 $ do&#xA;&#xA;        -- Get address of default account&#xA;        me &amp;lt;- head &amp;lt;$&amp;gt; Eth.accounts&#xA;&#xA;        -- Get balance of default account on latest block&#xA;        myBalance &amp;lt;- Eth.getBalance me Latest&#xA;&#xA;        -- Get half of balance&#xA;        let halfBalance = fromWei (myBalance / 2)&#xA;&#xA;        -- Use default account&#xA;        withAccount () $ do&#xA;            -- Get Ethereum address via ENS&#xA;            alice &amp;lt;- Ens.resolve &#34;alice.address.on.eth&#34;&#xA;            bob   &amp;lt;- Ens.resolve &#34;bob.address.on.eth&#34;&#xA;&#xA;            -- Send transaction with value&#xA;            withParam (value .~ halfBalance) $ do&#xA;&#xA;                -- Send transaction to alice account&#xA;                withParam (to .~ alice) $ send ()&#xA;&#xA;                -- Send transaction to bob account&#xA;                withParam (to .~ bob) $ send ()&#xA;&#xA;        -- Return sended value&#xA;        return halfBalance&#xA;&#xA;    -- Web3 error handling&#xA;    case ret of&#xA;        Left e  -&amp;gt; error $ show e&#xA;        Right v -&amp;gt; print (v :: Ether)  -- Print returned value in ethers&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Read more in the &lt;a href=&#34;https://hs-web3.readthedocs.io&#34;&gt;documentation on ReadTheDocs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Network.Polkadot&lt;/code&gt; and &lt;code&gt;Codec.Scale&lt;/code&gt; is licensed under &lt;a href=&#34;https://github.com/airalab/hs-web3/raw/master/LICENSE-APACHE2&#34;&gt;Apache 2.0&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;All other source is licensed under &lt;a href=&#34;https://github.com/airalab/hs-web3/raw/master/LICENSE-BSD3&#34;&gt;BSD-3-Clause&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>