<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Haskell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-06-08T01:30:32Z</updated>
  <subtitle>Daily Trending of Haskell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>tweag/cooked-validators</title>
    <updated>2024-06-08T01:30:32Z</updated>
    <id>tag:github.com,2024-06-08:/tweag/cooked-validators</id>
    <link href="https://github.com/tweag/cooked-validators" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;a href=&#34;https://github.com/tweag/cooked-validators/&#34;&gt;Cooked Validators&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;Copyright Tweag I/O 2024&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;cooked-validators&lt;/code&gt; is a Haskell library to conveniently and efficiently write off-chain code for Cardano smart contracts. This offchain code will be specifically geared to testing and auditing the smart contract in question with further builtin capabilities of the library.&lt;/p&gt; &#xA;&lt;p&gt;In particular, &lt;code&gt;cooked-validators&lt;/code&gt; allows the user to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;interact with smart contracts written in Plutus or any other language that compiles to &lt;a href=&#34;https://plutonomicon.github.io/plutonomicon/uplc&#34;&gt;UPLC&lt;/a&gt;, like for example &lt;a href=&#34;https://github.com/Plutonomicon/plutarch-plutus&#34;&gt;Plutarch&lt;/a&gt; or &lt;a href=&#34;https://aiken-lang.org/&#34;&gt;Aiken&lt;/a&gt;, by loading contracts from byte strings&lt;/li&gt; &#xA; &lt;li&gt;define transactions in a high level, type-retaining data structure&lt;/li&gt; &#xA; &lt;li&gt;submit transactions for validation, while automatically taking care of missing inputs and outputs, balancing, minimum-Ada constraints, collaterals and fees&lt;/li&gt; &#xA; &lt;li&gt;construct sequences of transactions in an easy-to-understand abstraction of &#34;the blockchain&#34;, which can be instantiated to different actual implementations&lt;/li&gt; &#xA; &lt;li&gt;run sequences of transactions in a simulated blockchain&lt;/li&gt; &#xA; &lt;li&gt;apply &#34;tweaks&#34; to transactions right before submitting them, where &#34;tweaks&#34; are modifications that are aware of the current state of the simulated blockchain&lt;/li&gt; &#xA; &lt;li&gt;compose and deploy tweaks with flexible idioms inspired by linear temporal logic, in order to turn one sequence of transactions into many sequences that might be useful test cases, generalized in &lt;a href=&#34;https://github.com/tweag/graft&#34;&gt;Graft&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;deploy automated attacks over existing sequences of transactions, such as datum hijacking or double satisfaction attacks, in an attempt to uncover vulnerabilities&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You are free to copy, modify, and distribute &lt;code&gt;cooked-validators&lt;/code&gt; under the terms of the MIT license. We provide &lt;code&gt;cooked-validators&lt;/code&gt; as a research prototype under active development, and it comes &lt;em&gt;as is&lt;/em&gt; with no guarantees whatsoever. Check the &lt;a href=&#34;https://raw.githubusercontent.com/tweag/cooked-validators/main/LICENSE&#34;&gt;license&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;h2&gt;How to integrate &lt;code&gt;cooked-validators&lt;/code&gt; in a project&lt;/h2&gt; &#xA;&lt;p&gt;To use &lt;code&gt;cooked-validators&lt;/code&gt;, you need&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.haskell.org/ghc/download_ghc_9_6_5.html&#34;&gt;GHC&lt;/a&gt; version 9.6.5&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.haskell.org/cabal&#34;&gt;Cabal&lt;/a&gt; version 3.10 or later&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;cooked-validators&lt;/code&gt; depends on &lt;a href=&#34;https://github.com/input-output-hk/cardano-haskell-packages&#34;&gt;cardano-haskell-packages&lt;/a&gt; to get cardano-related packages and on &lt;a href=&#34;https://github.com/IntersectMBO/cardano-node-emulator&#34;&gt;cardano-node-emulator&lt;/a&gt; directly. If you have no constraint on the version of this package, copy the file &lt;a href=&#34;https://raw.githubusercontent.com/tweag/cooked-validators/main/cabal.project&#34;&gt;&lt;code&gt;cabal.project&lt;/code&gt;&lt;/a&gt; to your project and &lt;a href=&#34;https://cabal.readthedocs.io/en/stable/cabal-project.html#specifying-the-local-packages&#34;&gt;adapt&lt;/a&gt; the &lt;code&gt;packages&lt;/code&gt; stanza.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Add the following stanza to the file &lt;code&gt;cabal.project&lt;/code&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-cabal.project&#34;&gt;source-repository-package&#xA;  type: git&#xA;  location: https://github.com/tweag/cooked-validators&#xA;  tag: myTag&#xA;  subdir:&#xA;    .&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;where &lt;code&gt;myTag&lt;/code&gt; is either a commit hash in the repo, or a tag, such as v4.0.0 (see &lt;a href=&#34;https://github.com/tweag/cooked-validators/releases&#34;&gt;available releases&lt;/a&gt;).&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Example&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Make your project &lt;a href=&#34;https://cabal.readthedocs.io/en/stable/getting-started.html#adding-dependencies&#34;&gt;depend&lt;/a&gt; on &lt;code&gt;cooked-validators&lt;/code&gt; and &lt;code&gt;plutus-script-utils&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Enter a Cabal read-eval-print-loop (with &lt;code&gt;cabal repl&lt;/code&gt;) and create and validate a transaction which transfers 10 Ada from wallet 1 to wallet 2:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;&amp;gt; import Cooked&#xA;&amp;gt; import qualified Plutus.Script.Utils.Ada as Script&#xA;&amp;gt; printCooked . runMockChain . validateTxSkel $&#xA;      txSkelTemplate&#xA;        { txSkelOuts = [paysPK (wallet 2) (Script.adaValueOf 10)],&#xA;          txSkelSigners = [wallet 1]&#xA;        }&#xA;[...]&#xA;- UTxO state:&#xA;  • pubkey wallet 1&#xA;    - Lovelace: 89_828_471&#xA;    - (×4) Lovelace: 100_000_000&#xA;  • pubkey wallet 2&#xA;    - Lovelace: 10_000_000&#xA;    - (×5) Lovelace: 100_000_000&#xA;  • pubkey wallet 3&#xA;    - (×5) Lovelace: 100_000_000&#xA;  • pubkey wallet 4&#xA;    - (×5) Lovelace: 100_000_000&#xA;[...]&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;The rendered Haddock for the current &lt;code&gt;main&lt;/code&gt; branch can be found &lt;a href=&#34;https://tweag.github.io/cooked-validators/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/tweag/cooked-validators/main/doc/CHEATSHEET.md&#34;&gt;CHEATSHEET&lt;/a&gt; contains many code snippets to quickly get an intuition of how to do things. Use it to discover or search for how to use features of &lt;code&gt;cooked-validators&lt;/code&gt;. Note that this is not a tutorial nor a ready-to-use recipes book.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/tweag/cooked-validators/main/doc/IMPORTS.md&#34;&gt;IMPORTS&lt;/a&gt; file describes and helps to understand our dependencies and naming conventions for imports.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;We also have a &lt;a href=&#34;https://github.com/tweag/cooked-smart-contracts&#34;&gt;repository&lt;/a&gt; of example contracts with offchain code and tests written using &lt;code&gt;cooked-validators&lt;/code&gt;. Note that some examples are not maintained and thus written using older versions of cooked-validators.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Feel free to visit our &lt;a href=&#34;https://github.com/tweag/cooked-validators/issues&#34;&gt;issue tracker&lt;/a&gt; to seek help about known problems, or report new issues!&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>