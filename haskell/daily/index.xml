<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Haskell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-02T01:41:51Z</updated>
  <subtitle>Daily Trending of Haskell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>reflex-frp/reflex-dom</title>
    <updated>2022-07-02T01:41:51Z</updated>
    <id>tag:github.com,2022-07-02:/reflex-frp/reflex-dom</id>
    <link href="https://github.com/reflex-frp/reflex-dom" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Web applications without callbacks or side-effects. Reflex-DOM brings the power of functional reactive programming (FRP) to the web. Build HTML and other Document Object Model (DOM) data with a pure functional interface.&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;&lt;a href=&#34;https://reflex-frp.org&#34;&gt;Reflex-DOM&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://haskell.org&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/language-Haskell-orange.svg?sanitize=true&#34; alt=&#34;Haskell&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hackage.haskell.org/package/reflex-dom&#34;&gt;&lt;img src=&#34;https://img.shields.io/hackage/v/reflex-dom.svg?sanitize=true&#34; alt=&#34;Hackage&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://matrix.hackage.haskell.org/#/package/reflex-dom&#34;&gt;&lt;img src=&#34;https://matrix.hackage.haskell.org/api/v2/packages/reflex-dom/badge&#34; alt=&#34;Hackage CI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/reflex-frp/reflex-dom/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-BSD3-blue.svg?sanitize=true&#34; alt=&#34;BSD3 License&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Web applications without callbacks or side-effects. Reflex-DOM brings the power of &lt;a href=&#34;https://wiki.haskell.org/Functional_Reactive_Programming&#34;&gt;Functional Reactive Programming (FRP)&lt;/a&gt; to the web. Build &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/HTML&#34;&gt;HTML&lt;/a&gt; and other &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model&#34;&gt;Document Object Model (DOM)&lt;/a&gt; data with a pure functional interface.&lt;/p&gt; &#xA;&lt;p&gt;Reflex-DOM is a framework for building web applications in &lt;a href=&#34;https://www.haskell.org/&#34;&gt;Haskell&lt;/a&gt;, based on the &lt;a href=&#34;https://wiki.haskell.org/Functional_Reactive_Programming&#34;&gt;Functional Reactive Programming&lt;/a&gt; library &lt;a href=&#34;https://github.com/reflex-frp/reflex&#34;&gt;Reflex&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Visit &lt;a href=&#34;https://reflex-frp.org/&#34;&gt;https://reflex-frp.org/&lt;/a&gt; for more information, tutorials, documentation and &lt;a href=&#34;https://examples.reflex-frp.org/&#34;&gt;examples&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Additional resources&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://reflex-frp.org/&#34;&gt;Official Website&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/reflex-frp/reflex-dom/develop/Quickref.md&#34;&gt;Quick Reference&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/obsidiansystems/obelisk#obelisk&#34;&gt;Obelisk&lt;/a&gt;: A framework built on Reflex and Reflex-DOM for functional reactive web and mobile applications, with batteries included.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/reflex-frp/reflex-platform&#34;&gt;Get started with Reflex&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.reddit.com/r/reflexfrp&#34;&gt;/r/reflexfrp&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://webchat.freenode.net?channels=%23reflex-frp&amp;amp;uio=d4&#34;&gt;irc.freenode.net #reflex-frp&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Hacking&lt;/h3&gt; &#xA;&lt;p&gt;Use the &lt;code&gt;./scripts/hack-on haskell-overlays/reflex-packages/dep/reflex-dom&lt;/code&gt; script in &lt;a href=&#34;https://github.com/reflex-frp/reflex-platform&#34;&gt;Reflex Platform&lt;/a&gt; to checkout the source code of &lt;code&gt;reflex-dom&lt;/code&gt; locally in &lt;code&gt;./dep/reflex-dom&lt;/code&gt; directory. Then do modifications to the source in place, and use the &lt;code&gt;./try-reflex&lt;/code&gt; or &lt;code&gt;./scripts/work-on&lt;/code&gt; scripts to create the shell to test your changes.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>xurxodiz/euler</title>
    <updated>2022-07-02T01:41:51Z</updated>
    <id>tag:github.com,2022-07-02:/xurxodiz/euler</id>
    <link href="https://github.com/xurxodiz/euler" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A repository for my solved Project Euler problems.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;My &lt;a href=&#34;http://projecteuler.net&#34;&gt;project Euler&lt;/a&gt; solved problems. Updated seldomly.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>channable/vaultenv</title>
    <updated>2022-07-02T01:41:51Z</updated>
    <id>tag:github.com,2022-07-02:/channable/vaultenv</id>
    <link href="https://github.com/channable/vaultenv" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Launch processes with Vault secrets in the environment&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;vaultenv&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://channable.semaphoreci.com/projects/vaultenv&#34;&gt;&lt;img src=&#34;https://channable.semaphoreci.com/badges/vaultenv/branches/master.svg?style=shields&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Run processes with secrets from &lt;a href=&#34;https://www.vaultproject.io/&#34;&gt;HashiCorp Vault&lt;/a&gt;. It:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Reads a list of required secrets&lt;/li&gt; &#xA; &lt;li&gt;Fetches them from Vault&lt;/li&gt; &#xA; &lt;li&gt;Calls &lt;code&gt;exec&lt;/code&gt; with the secrets in the process environment&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;There is nothing else going on.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;vaultenv&lt;/code&gt; supports the Vault KV API. It supports both version 1 and version 2. This support is automatic; but you do need a token which has read access on the &lt;code&gt;/sys/mounts&lt;/code&gt; endpoint.&lt;/p&gt; &#xA;&lt;h2&gt;Comparison to alternatives&lt;/h2&gt; &#xA;&lt;p&gt;The only alternative to this tool that we are aware of is &lt;a href=&#34;https://github.com/hashicorp/envconsul&#34;&gt;envconsul&lt;/a&gt;, also by HashiCorp. Unlike envconsul, &lt;code&gt;vaultenv&lt;/code&gt; does not:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;daemonize&lt;/li&gt; &#xA; &lt;li&gt;spawn any child processes&lt;/li&gt; &#xA; &lt;li&gt;manage the lifecycle of the process it provides the secrets for&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;All of the above should not be done by a secret fetching tool. This should be left to a service manager, like systemd.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;vaultenv&lt;/code&gt; calls a syscall from the &lt;code&gt;exec&lt;/code&gt; family after fetching secrets for you. This means that &lt;code&gt;vaultenv&lt;/code&gt; replaces its own process with whatever you want. After your service has started, &lt;code&gt;vaultenv&lt;/code&gt; is not running anymore.&lt;/p&gt; &#xA;&lt;p&gt;This approach does mean that we cannot automatically restart services if secrets in Vault have changed.&lt;/p&gt; &#xA;&lt;h2&gt;Terminology&lt;/h2&gt; &#xA;&lt;p&gt;A brief summary of Vault terminology:&lt;/p&gt; &#xA;&lt;p&gt;A Vault &lt;strong&gt;secret&lt;/strong&gt; consists of multiple &lt;strong&gt;key/value pairs&lt;/strong&gt;, which are stored under a &lt;strong&gt;path&lt;/strong&gt; in a &lt;strong&gt;backend&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Let&#39;s use the Vault CLI to write a secret to see all the concepts in action:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ vault write secret/production/third-party api-key=fecb0f6e97c5b37b3a814107682cf68416f072a8&#xA;              ^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^ ^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^&#xA;             backend          path            key                   value&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: this will fail without a running Vault instance. Use &lt;code&gt;vault server -dev&lt;/code&gt; to get one up and running locally.&lt;/p&gt; &#xA;&lt;h2&gt;Tutorial&lt;/h2&gt; &#xA;&lt;p&gt;Before we can start, &lt;a href=&#34;https://raw.githubusercontent.com/channable/vaultenv/master/#building&#34;&gt;build vaultenv locally&lt;/a&gt; or &lt;a href=&#34;https://github.com/channable/vaultenv/releases&#34;&gt;download a binary&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The following program depends on the secret that we stored in Vault in the previous section:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/bash&#xA;&#xA;# Fail when referencing an unbound variable&#xA;set -u&#xA;&#xA;# Mentally substitute the call to echo with something like:&#xA;# curl -H &#34;Content-Type: application/json&#34; -H &#34;X-API-Key: ${PRODUCTION_THIRD_PARTY_API_KEY}&#34; -X POST -d &#39;{&#34;my&#34;: &#34;payload&#34;}&#39; https://example.com/&#xA;echo &#34;${PRODUCTION_THIRD_PARTY_API_KEY}&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This program will fail without &lt;code&gt;PRODUCTION_THIRD_PARTY_API_KEY&lt;/code&gt; in its environment:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ./tutorial.sh&#xA;./tutorial.sh: line 8: PRODUCTION_THIRD_PARTY_API_KEY: unbound variable&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We can use &lt;code&gt;vaultenv&lt;/code&gt; to fetch the required secret before running &lt;code&gt;tutorial.sh&lt;/code&gt;. Create a file &lt;code&gt;tutorial.secrets&lt;/code&gt; with the following content:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;production/third-party#api-key&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And run &lt;code&gt;vaultenv&lt;/code&gt; like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ vaultenv --token &amp;lt;YOUR_VAULT_TOKEN_HERE&amp;gt; --no-connect-tls --secrets-file ./tutorial.secrets ./tutorial.sh&#xA;fecb0f6e97c5b37b3a814107682cf68416f072a8&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This instructs &lt;code&gt;vaultenv&lt;/code&gt; to fetch &lt;code&gt;secret/production/third-party&lt;/code&gt; and load the contents of &lt;code&gt;api-key&lt;/code&gt; under &lt;code&gt;PRODUCTION_THIRD_PARTY_API_KEY&lt;/code&gt; in the environment of &lt;code&gt;tutorial.sh&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;vaultenv 0.15.1 - run programs with secrets from HashiCorp Vault&#xA;&#xA;Usage: vaultenv [--version] [--host HOST] [--port PORT] [--addr ADDR]&#xA;                [--token TOKEN | --github-token TOKEN | --kubernetes-role ROLE]&#xA;                [--secrets-file FILENAME] [CMD] [ARGS...]&#xA;                [--no-connect-tls | --connect-tls]&#xA;                [--no-validate-certs | --validate-certs]&#xA;                [--no-inherit-env | --inherit-env]&#xA;                [--inherit-env-blacklist COMMA_SEPARATED_NAMES]&#xA;                [--retry-base-delay-milliseconds MILLISECONDS]&#xA;                [--retry-attempts NUM] [--log-level error | info] [--use-path]&#xA;                [--max-concurrent-requests NUM]&#xA;&#xA;Available options:&#xA;  -h,--help                Show this help text&#xA;  --version                Show version&#xA;  --host HOST              Vault host, either an IP address or DNS name.&#xA;                           Defaults to localhost. Also configurable via&#xA;                           VAULT_HOST.&#xA;  --port PORT              Vault port. Defaults to 8200. Also configurable via&#xA;                           VAULT_PORT.&#xA;  --addr ADDR              Vault address, the scheme, either http:// or&#xA;                           https://, the ip-address or DNS name, followed by the&#xA;                           port, separated with a &#39;:&#39;. Cannot be combined with&#xA;                           either VAULT_PORT or VAULT_HOST&#xA;  --token TOKEN            Token to authenticate to Vault with. Also&#xA;                           configurable via VAULT_TOKEN.&#xA;  --github-token TOKEN     Authenticate using a GitHub personal access&#xA;                           token. Also configurable via VAULTENV_GITHUB_TOKEN.&#xA;  --kubernetes-role ROLE   Authenticate using Kubernetes service account in&#xA;                           /var/run/secrets/kubernetes.io, with the given role.&#xA;                           Also configurable via VAULTENV_KUBERNETES_ROLE.&#xA;  --secrets-file FILENAME  Config file specifying which secrets to request. Also&#xA;                           configurable via VAULTENV_SECRETS_FILE.&#xA;  CMD                      command to run after fetching secrets&#xA;  ARGS...                  Arguments to pass to CMD, defaults to nothing&#xA;  --no-connect-tls         Don&#39;t use TLS when connecting to Vault. Default: use&#xA;                           TLS. Also configurable via VAULTENV_CONNECT_TLS.&#xA;  --connect-tls            Always connect to Vault via TLS. Default: use TLS.&#xA;                           Can be used to override VAULTENV_CONNECT_TLS.&#xA;  --no-validate-certs      Don&#39;t validate TLS certificates when connecting to&#xA;                           Vault. Default: validate certs. Also configurable via&#xA;                           VAULTENV_VALIDATE_CERTS.&#xA;  --validate-certs         Always validate TLS certificates when connecting to&#xA;                           Vault. Default: validate certs. Can be used to&#xA;                           override VAULTENV_CONNECT_TLS.&#xA;  --no-inherit-env         Don&#39;t merge the parent environment with the secrets&#xA;                           file. Default: merge environments. Also configurable&#xA;                           via VAULTENV_INHERIT_ENV.&#xA;  --inherit-env            Always merge the parent environment with the secrets&#xA;                           file. Default: merge environments. Can be used to&#xA;                           override VAULTENV_INHERIT_ENV.&#xA;  --inherit-env-blacklist COMMA_SEPARATED_NAMES&#xA;                           Comma-separated list of environment variable names to&#xA;                           remove from the environment before executing CMD.&#xA;                           Also configurable via VAULTENV_INHERIT_ENV_BLACKLIST.&#xA;                           Has no effect if no-inherit-env is set!&#xA;  --retry-base-delay-milliseconds MILLISECONDS&#xA;                           Base delay for vault connection retrying. Defaults to&#xA;                           40ms. Also configurable via&#xA;                           VAULTENV_RETRY_BASE_DELAY_MS.&#xA;  --retry-attempts NUM     Maximum number of vault connection retries. Defaults&#xA;                           to 9. Also configurable through&#xA;                           VAULTENV_RETRY_ATTEMPTS.&#xA;  --log-level error | info Log-level to run vaultenv under. Options: &#39;error&#39; or&#xA;                           &#39;info&#39;. Defaults to &#39;error&#39;. Also configurable via&#xA;                           VAULTENV_LOG_LEVEL&#xA;  --use-path               Use PATH for finding the executable that vaultenv&#xA;                           should call. Default: don&#39;t search PATH. Also&#xA;                           configurable via VAULTENV_USE_PATH.&#xA;  --max-concurrent-requests NUM&#xA;                           Maximum number of concurrent requests to vault.&#xA;                           Defaults to 8. Pass 0 to disable the limit. Also&#xA;                           configurable through&#xA;                           VAULTENV_MAX_CONCURRENT_REQUESTS.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;Vaultenv reads configuration from two types of files:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A specification of secrets to fetch.&lt;/li&gt; &#xA; &lt;li&gt;Configuration options for &lt;code&gt;vaultenv&lt;/code&gt; itself, mostly connection related.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Decoupling these is useful, because this allows for e.g. changing which secrets are fetched on a per project basis, while the connection options stay the same. Let&#39;s first discuss secrets files.&lt;/p&gt; &#xA;&lt;h3&gt;Secret specification&lt;/h3&gt; &#xA;&lt;p&gt;There are two versions of the secret specification format. The first version shipped with the initial version of Vaultenv, but doesn&#39;t allow users to specify custom mountpoints for backends. Vaultenv would always fetch from the generic secret backend mounted at &lt;code&gt;secret/&lt;/code&gt;. Version 2 of the format supports custom mount points.&lt;/p&gt; &#xA;&lt;p&gt;Example (version 1, implicit &lt;code&gt;secret/&lt;/code&gt; path prepended):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;production/third-party#api-key&#xA;production/another-third-party#refresh-token&#xA;FOOBAR=production/third-party#foobar&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Vaultenv will make the following environment variables available:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;PRODUCTION_THIRD_PARTY_API_KEY&lt;/code&gt;: Contents of the &lt;code&gt;api-key&lt;/code&gt; field of the secret at &lt;code&gt;secret/production/third-party&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;PRODUCTION_ANOTHER_THIRD_PARTY_REFRESH_TOKEN&lt;/code&gt;: Contents of the &lt;code&gt;refresh-token&lt;/code&gt; field of the secret at &lt;code&gt;secret/production/another-third-party#refresh-token&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;FOOBAR&lt;/code&gt;: Contents of the &lt;code&gt;foobar&lt;/code&gt; field in the secret at &lt;code&gt;secret/production/third-party&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The &lt;code&gt;FOOBAR=&lt;/code&gt; syntax means: make this secret available under the FOOBAR environment variable.&lt;/p&gt; &#xA;&lt;p&gt;Example (version 2, explicit mount paths):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;VERSION 2&#xA;&#xA;MOUNT secret&#xA;third-party#api-key&#xA;&#xA;MOUNT production&#xA;third-party#refresh-token&#xA;FOOBAR=third-party#foobar&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Vaultenv will make the following environment variables available:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;SECRET_THIRD_PARTY_API_KEY&lt;/code&gt; with the contents of the &lt;code&gt;api-key&lt;/code&gt; field of the secret at &lt;code&gt;secret/third-party&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;PRODUCTION_THIRD_PARTY_REFRESH_TOKEN&lt;/code&gt; with the contents of the &lt;code&gt;refresh-token&lt;/code&gt; field from the secret at &lt;code&gt;production/third-party&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;FOOBAR&lt;/code&gt; with the contents of the &lt;code&gt;foobar&lt;/code&gt; field of the secret at &lt;code&gt;production/third-party&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Authentication&lt;/h2&gt; &#xA;&lt;p&gt;Vaultenv fetches these secrets from Hashicorp Vault. Vaultenv supports multiple ways to authenticate to Vault:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Token-based authentication&lt;/li&gt; &#xA; &lt;li&gt;Kubernetes authentication&lt;/li&gt; &#xA; &lt;li&gt;GitHub authentication&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The token-based authentication relies on the root token, and passing this to vaultenv in either the &lt;code&gt;--token&lt;/code&gt; flag or the &lt;code&gt;VAULTENV_TOKEN&lt;/code&gt; environment variable.&lt;/p&gt; &#xA;&lt;p&gt;The Kubernetes authentication is useful when running Vaultenv in a Kubernetes cluster. In order to use this method, it should be enabled in Vault: &lt;a href=&#34;https://www.vaultproject.io/docs/auth/kubernetes&#34;&gt;https://www.vaultproject.io/docs/auth/kubernetes&lt;/a&gt; The role should be specified with either the &lt;code&gt;kubernetes-role&lt;/code&gt; flag or the &lt;code&gt;VAULTENV_KUBERNETES_ROLE&lt;/code&gt; environment variable. The Kubernetes authentication token is read from &lt;code&gt;/var/run/secrets/kubernetes.io/serviceaccount/token&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;The GitHub authentication is recommended when running Vaultenv on a development machine. In order to use this method, it should be enabled in Vault: &lt;a href=&#34;https://www.vaultproject.io/docs/auth/github&#34;&gt;https://www.vaultproject.io/docs/auth/github&lt;/a&gt; The user should create a GitHub personal access token with the &lt;code&gt;read:org&lt;/code&gt; scope on the configured organization. This token can then be supplied to either the &lt;code&gt;github-token&lt;/code&gt; flag or the &lt;code&gt;VAULTENV_GITHUB_TOKEN&lt;/code&gt; environment variable.&lt;/p&gt; &#xA;&lt;h3&gt;Behavior configuration&lt;/h3&gt; &#xA;&lt;p&gt;Vaultenv supports loading behavior configuration from files (in addition to the CLI flags and environment variable lookups). Vaultenv currently looks for these files in the following places:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;/etc/vaultenv.conf&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$HOME/.config/vaultenv/vaultenv.conf&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$CWD/.env&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;These config files support the exact same syntax as the environment variables that you can use to configure Vaultenv. See the &lt;code&gt;--help&lt;/code&gt; output for a list of what&#39;s available.&lt;/p&gt; &#xA;&lt;p&gt;These files follow the &lt;code&gt;.env&lt;/code&gt; format (as popularized by &lt;a href=&#34;https://github.com/bkeepers/dotenv&#34;&gt;this Ruby gem&lt;/a&gt;). An example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# /etc/vaultenv.conf&#xA;# Also: comments are allowed if they start with `#`.&#xA;VAULT_TOKEN=&#34;your-vault-token&#34;&#xA;VAULT_PORT=&#34;8200&#34;&#xA;VAULTENV_INHERIT_ENV=&#34;yes&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;All while running Vaultenv without any CLI args.&lt;/p&gt; &#xA;&lt;h4&gt;Different levels of configuration&lt;/h4&gt; &#xA;&lt;p&gt;It can happen that conflicting configuration values are send to Vaultenv. An example would be a global secret file, which is overwritten by a project specific configuration file. The order of precedence (from least precedence to most precedence) is as follows:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;/etc/vaultenv.conf&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$HOME/.config/vaultenv/vaultenv.conf&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$CWD/.env&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;environment variables&lt;/li&gt; &#xA; &lt;li&gt;command line options&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This is useful on development machines. It allows you to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Set global connection options on a per-machine basis. Useful if you run a Vault instance in your VPN.&lt;/li&gt; &#xA; &lt;li&gt;Set per-user tokens.&lt;/li&gt; &#xA; &lt;li&gt;Set per-project secrets files.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This means that any command line option that is present would overwrite any other configuration. If an option is not specified, the default is used. The defaults are as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;VAULT_HOST:                     localhost&#xA;VAULT_PORT:                     8200&#xA;VAULT_ADDR:                     https://localhost:8200&#xA;VAULT_TOKEN:                    Unspecified&#xA;VAULTENV_GITHUB_TOKEN:          Unspecified&#xA;VAULTENV_KUBERNETES_ROLE:       Unspecified&#xA;VAULTENV_SECRETS_FILE:          Unspecified&#xA;CMD:                            Unspecified&#xA;ARGS:                           []&#xA;VAULTENV_CONNECT_TLS:           True&#xA;VAULTENV_VALIDATE_CERTS:        True&#xA;VAULTENV_INHERIT_ENV:           True&#xA;VAULTENV_INHERIT_ENV_BLACKLIST: []&#xA;VAULTENV_RETRY_BASE_DELAY:      40&#xA;VAULTENV_RETRY_ATTEMPTS:        9&#xA;VAULTENV_LOG_LEVEL:             Error&#xA;VAULTENV_USE_PATH:              True&#xA;VAULTENV_MAX_CONCURRENT_REQUESTS: 8&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In cases where no default nor any value is specified, which is possible for &lt;code&gt;Token&lt;/code&gt;, &lt;code&gt;Secret file&lt;/code&gt; and &lt;code&gt;Command&lt;/code&gt;, Vaultenv will give an error that it requires these values to operate.&lt;/p&gt; &#xA;&lt;h4&gt;Connection options&lt;/h4&gt; &#xA;&lt;p&gt;Vaultenv also supports the &lt;code&gt;VAULT_ADDR&lt;/code&gt; configuration. In such a case, without specifying separate parameters for host, port and whether to use TLS or not, one can specify these values in a single value. The address always starts with either &lt;code&gt;http://&lt;/code&gt; or &lt;code&gt;https://&lt;/code&gt;, followed by a either a DNS name or an ip-address. The port is specified at the end of the address, using a &lt;code&gt;:&lt;/code&gt; to separate the host and the port. For example: &lt;code&gt;https://example.com:42&lt;/code&gt; would create a TLS enabled connection to the host &lt;code&gt;example.com&lt;/code&gt; on port &lt;code&gt;42&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Other errors can happen with the address configuration. There are two ways of specifying what the connection options are, either via the address of via a combination of the port, the host and whether to use TLS. As there are two ways of specifying this, it is also possible for these values to conflict. Consider the situation where &lt;code&gt;VAULT_ADDR&lt;/code&gt; is &lt;code&gt;http://example.com:8200&lt;/code&gt; and &lt;code&gt;VAULT_PORT&lt;/code&gt; is set to &lt;code&gt;42&lt;/code&gt;. There are two ways Vaultenv can resolve this. In the case of the address and the port being specified in the same configuration, like the same file or both as command line options, Vaultenv will not choose either way and will report an error.&lt;/p&gt; &#xA;&lt;p&gt;In the case they are specified in different configuration levels, like the address in a file and the port in the command line options, the higher precedence (as defined &lt;a href=&#34;https://raw.githubusercontent.com/channable/vaultenv/master/#Different-levels-of-configuration&#34;&gt;above&lt;/a&gt;) is used for that specific value. In this case, this would result in a host of &lt;code&gt;example.com&lt;/code&gt;, no usage of TLS, due to the &lt;code&gt;http://&lt;/code&gt; scheme, and a port of &lt;code&gt;42&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Other errors than the mismatch address error that can happen during parsing are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A non-numeric port in the address, like &lt;code&gt;http://localhost:my_port&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;A non-supported scheme in the address, like &lt;code&gt;ftp://example.com:42&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;By default, &lt;code&gt;vaultenv&lt;/code&gt; will open at most 8 concurrent HTTP connections to the vault server. This limit can be changed using the &lt;code&gt;VAULTENV_MAX_CONCURRENT_REQUESTS&lt;/code&gt; setting, and it can be disabled by choosing the limit &lt;code&gt;0&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Allowed characters in environment variables&lt;/h2&gt; &#xA;&lt;p&gt;We disallow the following in any path to keep the parser and format simple and unambiguous:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Whitespace&lt;/li&gt; &#xA; &lt;li&gt;The &lt;code&gt;#&lt;/code&gt; and &lt;code&gt;=&lt;/code&gt; characters&lt;/li&gt; &#xA; &lt;li&gt;Control characters&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Everything else is allowed.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;N.B.:&lt;/strong&gt; Be careful with special characters in path components. While vault supports them, and vaultenv parses them from the secrets file just fine, you MUST specify an environment variable to put them in, otherwise you may run into unexpected behavior.&lt;/p&gt; &#xA;&lt;h2&gt;Environment variable names&lt;/h2&gt; &#xA;&lt;p&gt;The secret &lt;code&gt;path&lt;/code&gt; and &lt;code&gt;key&lt;/code&gt; determine the name of the environment variable that the secret contents will be available under. &lt;code&gt;path&lt;/code&gt; and &lt;code&gt;key&lt;/code&gt; are uppercased and concatenated by a &lt;code&gt;_&lt;/code&gt;. All &lt;code&gt;/&lt;/code&gt; and &lt;code&gt;-&lt;/code&gt; characters are also replaced by underscores.&lt;/p&gt; &#xA;&lt;p&gt;Example: the contents of &lt;code&gt;production/third-party#api-key&lt;/code&gt; will be available as &lt;code&gt;PRODUCTION_THIRD_PARTY_API_KEY&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Building&lt;/h2&gt; &#xA;&lt;p&gt;Vaultenv is written in Haskell and builds with &lt;a href=&#34;https://haskellstack.org&#34;&gt;Stack&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;stack setup&#xA;stack build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The binary can then be found at &lt;code&gt;$(stack path --local-install-root)/bin/vaultenv&lt;/code&gt;. You can also run it directly with &lt;code&gt;stack exec&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;stack exec vaultenv -- --token SECRET --secrets-file foo.env /usr/bin/env&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It is possible to &lt;code&gt;stack build&lt;/code&gt; with &lt;code&gt;--split-objs&lt;/code&gt; to produce a smaller binary. To take full advantage of this, the Stackage snapshot has to be rebuilt.&lt;/p&gt; &#xA;&lt;p&gt;If you want a fully static executable without a runtime dependency on &lt;code&gt;libc&lt;/code&gt; and run GNU/Linux, you can install &lt;a href=&#34;https://nixos.org/nix/&#34;&gt;Nix&lt;/a&gt; and run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;nix-build --no-out-link nix/release.nix -A vaultenvStatic&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This has not been tested on any other platform.&lt;/p&gt; &#xA;&lt;p&gt;That will build vaultenv (and a bunch of dependencies). The final line of the output should be a path in &lt;code&gt;/nix/store&lt;/code&gt; which contains the final vaultenv binary.&lt;/p&gt; &#xA;&lt;p&gt;It is possible to speed up the compilation process by copying some dependencies from a Nix cache, to not have to recompile all of Haskell and its dependencies. To set up the cache, execute these commands once before building:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ nix run -c cachix use static-haskell-nix&#xA;$ nix run -c cachix use channable-public&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that the build process via Nix is not (yet) reproducible, which means that different builds of the same source code may result in different Nix derivation hashes.&lt;/p&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;p&gt;If you want a convenient way to gather the development dependencies of &lt;code&gt;vaultenv&lt;/code&gt;, you can use &lt;code&gt;nix&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The repository contains a &lt;code&gt;default.nix&lt;/code&gt; which will get you &lt;code&gt;stack&lt;/code&gt; and &lt;code&gt;vault&lt;/code&gt;. You can then use this to get a shell with the tools in scope to work on and test &lt;code&gt;vaultenv&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Get this shell with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ nix run&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Future work&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Support DNS &lt;code&gt;SRV&lt;/code&gt; record lookups, so users only need to specify the host Vault runs on. This integrates &lt;code&gt;vaultenv&lt;/code&gt; nicely with Vaults HA setup.&lt;/li&gt; &#xA; &lt;li&gt;Certificate pinning/validation&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;3-clause BSD. See &lt;code&gt;LICENSE&lt;/code&gt; for details.&lt;/p&gt;</summary>
  </entry>
</feed>