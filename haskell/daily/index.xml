<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Haskell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-07-19T01:31:59Z</updated>
  <subtitle>Daily Trending of Haskell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>hedgehogqa/haskell-hedgehog</title>
    <updated>2025-07-19T01:31:59Z</updated>
    <id>tag:github.com,2025-07-19:/hedgehogqa/haskell-hedgehog</id>
    <link href="https://github.com/hedgehogqa/haskell-hedgehog" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Release with confidence, state-of-the-art property testing for Haskell.&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img width=&#34;400&#34; src=&#34;https://github.com/hedgehogqa/haskell-hedgehog/raw/master/img/hedgehog-text-logo.png&#34;&gt; &#xA; &lt;h1&gt;Release with confidence.&lt;/h1&gt; &#xA; &lt;p&gt;&lt;a href=&#34;http://hackage.haskell.org/package/hedgehog&#34;&gt;&lt;img src=&#34;https://img.shields.io/hackage/v/hedgehog.svg?style=flat&#34; alt=&#34;Hackage&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/hedgehogqa/haskell-hedgehog/actions/workflows/haskell-ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/hedgehogqa/haskell-hedgehog/actions/workflows/ci.yaml/badge.svg?sanitize=true&#34; alt=&#34;GitHub CI&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;div align=&#34;left&#34;&gt; &#xA;  &lt;p&gt;&lt;a href=&#34;http://hedgehog.qa/&#34;&gt;Hedgehog&lt;/a&gt; automatically generates a comprehensive array of test cases, exercising your software in ways human testers would never imagine.&lt;/p&gt; &#xA;  &lt;p&gt;Generate hundreds of test cases automatically, exposing even the most insidious of corner cases. Failures are automatically simplified, giving developers coherent, intelligible error messages.&lt;/p&gt; &#xA;  &lt;h2&gt;Features&lt;/h2&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Integrated shrinking, shrinks obey invariants by construction.&lt;/li&gt; &#xA;   &lt;li&gt;Abstract state machine testing.&lt;/li&gt; &#xA;   &lt;li&gt;Generators allow monadic effects.&lt;/li&gt; &#xA;   &lt;li&gt;Range combinators for full control over the scope of generated numbers and collections.&lt;/li&gt; &#xA;   &lt;li&gt;Equality and roundtrip assertions show a diff instead of the two inequal values.&lt;/li&gt; &#xA;   &lt;li&gt;Template Haskell test runner which executes properties concurrently.&lt;/li&gt; &#xA;  &lt;/ul&gt; &#xA;  &lt;h2&gt;Example&lt;/h2&gt; &#xA;  &lt;p&gt;The main module, &lt;a href=&#34;http://hackage.haskell.org/package/hedgehog/docs/Hedgehog.html&#34;&gt;Hedgehog&lt;/a&gt;, includes almost everything you need to get started writing property tests with Hedgehog.&lt;/p&gt; &#xA;  &lt;p&gt;It is designed to be used alongside &lt;a href=&#34;http://hackage.haskell.org/package/hedgehog/docs/Hedgehog-Gen.html&#34;&gt;Hedgehog.Gen&lt;/a&gt; and &lt;a href=&#34;http://hackage.haskell.org/package/hedgehog/docs/Hedgehog-Range.html&#34;&gt;Hedgehog.Range&lt;/a&gt; which should be imported qualified. You also need to enable Template Haskell so the Hedgehog test runner can find your properties.&lt;/p&gt; &#xA;  &lt;pre&gt;&lt;code class=&#34;language-hs&#34;&gt;{-# LANGUAGE TemplateHaskell #-}&#xA;&#xA;import           Hedgehog&#xA;import qualified Hedgehog.Gen as Gen&#xA;import qualified Hedgehog.Range as Range&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;p&gt;Once you have your imports set up, you can write a simple property:&lt;/p&gt; &#xA;  &lt;pre&gt;&lt;code class=&#34;language-hs&#34;&gt;prop_reverse :: Property&#xA;prop_reverse =&#xA;  property $ do&#xA;    xs &amp;lt;- forAll $ Gen.list (Range.linear 0 100) Gen.alpha&#xA;    reverse (reverse xs) === xs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;p&gt;And add the Template Haskell splice which will discover your properties:&lt;/p&gt; &#xA;  &lt;pre&gt;&lt;code class=&#34;language-hs&#34;&gt;tests :: IO Bool&#xA;tests =&#xA;  checkParallel $$(discover)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;p&gt;If you prefer to avoid macros, you can specify the group of properties to run manually instead:&lt;/p&gt; &#xA;  &lt;pre&gt;&lt;code class=&#34;language-hs&#34;&gt;{-# LANGUAGE OverloadedStrings #-}&#xA;&#xA;tests :: IO Bool&#xA;tests =&#xA;  checkParallel $ Group &#34;Test.Example&#34; [&#xA;      (&#34;prop_reverse&#34;, prop_reverse)&#xA;    ]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;p&gt;You can then load the module in GHCi, and run it:&lt;/p&gt; &#xA;  &lt;pre&gt;&lt;code&gt;λ tests&#xA;━━━ Test.Example ━━━&#xA;  ✓ prop_reverse passed 100 tests.&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;h2&gt;In Memory of Jacob Stanley&lt;/h2&gt; &#xA;  &lt;p&gt;As we come to the end of our guide to haskell-hedgehog, we&#39;d like to take a moment to remember and honor one of its key contributors, our dear friend, author and co-founder, Jacob Stanley.&lt;/p&gt; &#xA;  &lt;p&gt;Jacob&#39;s passion for Haskell and his commitment to creating high-quality, reliable software was truly inspiring. His work has shaped haskell-hedgehog in countless ways, and without him, it wouldn&#39;t be the project it is today.&lt;/p&gt; &#xA;  &lt;p&gt;Jacob passed away unexpectedly on April 9th. His absence is deeply felt, but his impact on this project, and on all of us who had the privilege to work with him, remains. We continue to maintain and develop haskell-hedgehog in his memory and in honor of his dedication to excellence in programming.&lt;/p&gt; &#xA;  &lt;p&gt;As you explore haskell-hedgehog, and possibly contribute to its ongoing development, we invite you to join us in remembering Jacob Stanley — a tremendous developer, collaborator, and friend.&lt;/p&gt; &#xA;  &lt;div align=&#34;center&#34;&gt; &#xA;   &lt;br&gt; &#xA;   &lt;img width=&#34;307&#34; src=&#34;https://github.com/hedgehogqa/haskell-hedgehog/raw/master/img/hedgehog-logo-grey.png&#34;&gt; &#xA;   &lt;h2&gt;Contributors&lt;/h2&gt; &#xA;   &lt;a href=&#34;https://github.com/hedgehogqa/haskell-hedgehog/graphs/contributors&#34;&gt; &lt;img src=&#34;https://contrib.rocks/image?repo=hedgehogqa/haskell-hedgehog&#34;&gt; &lt;/a&gt; &#xA;  &lt;/div&gt;&#xA; &lt;/div&gt;&#xA;&lt;/div&gt;</summary>
  </entry>
</feed>