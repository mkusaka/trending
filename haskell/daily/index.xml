<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Haskell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-10-20T01:34:35Z</updated>
  <subtitle>Daily Trending of Haskell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>serialhex/Language---Up-Goer-5</title>
    <updated>2023-10-20T01:34:35Z</updated>
    <id>tag:github.com,2023-10-20:/serialhex/Language---Up-Goer-5</id>
    <link href="https://github.com/serialhex/Language---Up-Goer-5" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The Up Goer 5 Sublime Text Word Set Add-On!!!&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;The Up Goer 5 Sublime Text Word Set Add-On!!!&lt;/h1&gt; &#xA;&lt;p&gt;...or really any word set&lt;/p&gt; &#xA;&lt;p&gt;this idea was taken from &lt;a href=&#34;http://splasho.com/upgoer5/&#34;&gt;The Up Goer 5 Text Editor&lt;/a&gt; (which should really be called &#34;The Up Goer 5 Word Writer&#34; or some such...) All this is, is a small word set that will show you if what you are writing is not one of the ten hundred most often used words. The only problem is that you can yourself add words to the word set by pressing the right side push thing and pick &#34;Ignore&#34;. There is no way I can stop this from happening, so be watching what you do!&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>larjo/MixView</title>
    <updated>2023-10-20T01:34:35Z</updated>
    <id>tag:github.com,2023-10-20:/larjo/MixView</id>
    <link href="https://github.com/larjo/MixView" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Mixmeister Playlist Viewer&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Mixmeister Playlist Viewer&lt;/h1&gt; &#xA;&lt;p&gt;This is a simple program that parses Mixmeister playlists, which is a type of RIFF-file, into a stream of tokens.&lt;/p&gt; &#xA;&lt;p&gt;There are two structures that the RIFF-file can be parsed into: A flat structure, equvalent to RiffChunks = List(Data|List)*&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;data Chunk = DataChunk Data&#xA;           | ListChunk List&#xA;&#xA;data RiffChunks = RiffChunks List [Chunk]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and a tree structure:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;data Tree = Leaf Data&#xA;          | Node Riff&#xA;&#xA;data Riff = Riff Format [Tree]&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>