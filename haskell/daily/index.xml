<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Haskell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-12-07T01:32:17Z</updated>
  <subtitle>Daily Trending of Haskell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>signalvine/test-equal</title>
    <updated>2022-12-07T01:32:17Z</updated>
    <id>tag:github.com,2022-12-07:/signalvine/test-equal</id>
    <link href="https://github.com/signalvine/test-equal" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Pretty-print differences between two values for testing&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>samcoy3/advent-of-code-template</title>
    <updated>2022-12-07T01:32:17Z</updated>
    <id>tag:github.com,2022-12-07:/samcoy3/advent-of-code-template</id>
    <link href="https://github.com/samcoy3/advent-of-code-template" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Haskell project template for Advent of Code solutions.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;aoc-template&lt;/h1&gt; &#xA;&lt;p&gt;This is an (opinionated) Advent of Code template for solutions in Haskell.&lt;/p&gt; &#xA;&lt;p&gt;To use:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Clone this repository&lt;/li&gt; &#xA; &lt;li&gt;Set up a new branch for the year&#39;s solutions&lt;/li&gt; &#xA; &lt;li&gt;Change the package name, update the GitHub link, etc. You&#39;ll also want to remove the .cabal file and let stack generate a new one.&lt;/li&gt; &#xA; &lt;li&gt;Fill in the solutions and have fun!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;When running from the command line you can pass the option &lt;code&gt;-d/--day DAY&lt;/code&gt; to run a specific day&#39;s solutions. If you do this, then you can also pass &lt;code&gt;-i/--input FILE&lt;/code&gt; to specify an input file; by default, the program will look for it in &lt;code&gt;input/DayXX.txt&lt;/code&gt;. You can also pass the argument &lt;code&gt;--all-days&lt;/code&gt; and all days will be run in order, assuming the input files are in their default places.&lt;/p&gt; &#xA;&lt;p&gt;Additionally, you can specify the level of detail to print out. By default, the program will print only the answers. If you&#39;d like it to print timing information, use the &lt;code&gt;-t/--timings&lt;/code&gt; option. Alternatively, if you&#39;d like it to print the output of the parser and error messages in full, use the &lt;code&gt;-v/--verbose&lt;/code&gt; option.&lt;/p&gt; &#xA;&lt;p&gt;Example usage:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;stack run -- -d 9&lt;/code&gt;: Runs Day 9&#39;s solutions.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;stack run -- --day 14 --input &#34;wibble.txt&#34;&lt;/code&gt;: Runs Day 14&#39;s solutions, using the input file &#34;wibble.txt&#34;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;stack run -- -d 1 -i &#34;alex.txt&#34; --timings&lt;/code&gt;: Runs Day 1&#39;s solutions, using the input file &#34;alex.txt&#34;. Also prints timing information for each solution.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;stack run -- --all-days&lt;/code&gt;: Runs the solutions from all days.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This template can be used with &lt;code&gt;ghcid&lt;/code&gt; to compile and run your code every time you save your files. Consider putting the following in your &lt;code&gt;.bashrc&lt;/code&gt; (or equivalent):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;function day { ghcid --run=&#34;Main.performDay (Options (OneDay $1 Nothing) Timings)&#34; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If sourced in a terminal, running the command &lt;code&gt;day 9&lt;/code&gt;, for example, will, open a &lt;code&gt;ghcid&lt;/code&gt; session and run your code every time you save, displaying the answers as if you ran the first example command above.&lt;/p&gt; &#xA;&lt;p&gt;If you think the structure of the &lt;code&gt;Day&lt;/code&gt; files needs changing to better suit your needs (before starting the project), then make the appropriate changes in &lt;code&gt;src/Days/Day01.hs&lt;/code&gt; and run the &lt;code&gt;apply_changes.zsh&lt;/code&gt; file. This will copy Day01 to all the other days, changing Day01 for DayXX as appropriate.&lt;/p&gt; &#xA;&lt;h2&gt;Default Language Extensions&lt;/h2&gt; &#xA;&lt;p&gt;I&#39;ve turned several language extensions on by default, including the set of stable and reasonable extensions implied by the &lt;code&gt;GHC2021&lt;/code&gt; extension pack. The other extensions enabled by default are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;GADTs&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;LambdaCase&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;MultiWayIf&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;OverloadedRecordDot&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;OverloadedStrings&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;RecordWildCards&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The reason for these should be pretty clear in most cases. If you want to change the default extensions, the list is in &lt;code&gt;package.yaml&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Default Dependencies&lt;/h2&gt; &#xA;&lt;p&gt;The default package dependencies for this project are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;directory&lt;/code&gt;: This is just for checking if the provided input file exists.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;time&lt;/code&gt;: For timing the solutions.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ansi-term&lt;/code&gt;: For colourful pretty printing.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;attoparsec&lt;/code&gt;: For the input parser for each day.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;containers&lt;/code&gt;: For Map, Set, and so on.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;text&lt;/code&gt;: Because &lt;code&gt;String&lt;/code&gt;s are bad.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;optparse-applicative&lt;/code&gt;: For command line parsing.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;mtl&lt;/code&gt;: Mainly in anticipation that &lt;code&gt;State&lt;/code&gt; might be useful. &lt;code&gt;ExceptT&lt;/code&gt; is also used to catch exceptions in &lt;code&gt;runDay&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;vector&lt;/code&gt;: In anticipation that fixed-length arrays will come in handy.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>joel-wright/ZipperHS</title>
    <updated>2022-12-07T01:32:17Z</updated>
    <id>tag:github.com,2022-12-07:/joel-wright/ZipperHS</id>
    <link href="https://github.com/joel-wright/ZipperHS" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Code for a little talk about &#34;The Zipper&#34;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ZipperHS&lt;/h1&gt; &#xA;&lt;p&gt;Code for a little talk about &#34;The Zipper&#34;&lt;/p&gt; &#xA;&lt;p&gt;Lots of background information can be found in published papers and online. Here are a few:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&#34;&lt;a href=&#34;http://www.st.cs.uni-sb.de/edu/seminare/2005/advanced-fp/docs/huet-zipper.pdf&#34;&gt;The Zipper&lt;/a&gt;&#34;, The original Functional Pearl by GÃ©rard Huet&lt;/li&gt; &#xA; &lt;li&gt;&#34;Haskellwiki/Zipper&#34;, &lt;a href=&#34;http://www.haskell.org/haskellwiki/Zipper&#34;&gt;http://www.haskell.org/haskellwiki/Zipper&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&#34;Haskell/Zippers&#34; on Wikibooks, &lt;a href=&#34;http://en.wikibooks.org/wiki/Haskell/Zippers&#34;&gt;http://en.wikibooks.org/wiki/Haskell/Zippers&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The original slides can be found on Google Docs &lt;a href=&#34;https://docs.google.com/presentation/d/1nX30SSDxhWzBDUNq-xLmJk9_ZzPy3Qa6z2Fo79YR-ng/edit&#34;&gt;here&lt;/a&gt;, but I&#39;ve also exported them as pdf and pptx and stored them in the repository for easy access.&lt;/p&gt;</summary>
  </entry>
</feed>