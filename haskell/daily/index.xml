<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Haskell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-05-22T01:35:43Z</updated>
  <subtitle>Daily Trending of Haskell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>wilberquito/JohnTheArtist</title>
    <updated>2023-05-22T01:35:43Z</updated>
    <id>tag:github.com,2023-05-22:/wilberquito/JohnTheArtist</id>
    <link href="https://github.com/wilberquito/JohnTheArtist" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Template John the artist&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;John the artist 🎨&lt;/h1&gt; &#xA;&lt;p&gt;Please make sure to clone or download the zip file of the current repository.&lt;/p&gt; &#xA;&lt;p&gt;Once downloaded, you need &lt;code&gt;ghc&lt;/code&gt; compiler (Glorious Haskell Compiler) and &lt;code&gt;Cabal&lt;/code&gt; (Common Architecture for Building Applications and Libraries) as &lt;code&gt;Maven&lt;/code&gt; for &lt;code&gt;Java&lt;/code&gt;. The quickest way to get &lt;code&gt;ghc&lt;/code&gt; and &lt;code&gt;Cabal&lt;/code&gt; is to use &lt;a href=&#34;https://www.haskell.org/ghcup/&#34;&gt;ghcup&lt;/a&gt; which is the main installer for general Haskell porpuse. &lt;a href=&#34;https://www.haskell.org/ghcup/install/&#34;&gt;Here&lt;/a&gt; are the instructions to download it in any operating system.&lt;/p&gt; &#xA;&lt;h2&gt;How to interact with you program&lt;/h2&gt; &#xA;&lt;p&gt;This project has been tested with &lt;code&gt;ghc&lt;/code&gt; version &lt;code&gt;8.10.7&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;So please, please, check your &lt;code&gt;ghc&lt;/code&gt; version.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ ghc --version&#xA;The Glorious Glasgow Haskell Compilation System, version 8.10.7&#xA;(base)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you don&#39;t have the correct version, use &lt;code&gt;ghcup&lt;/code&gt; to change the default default &lt;code&gt;ghc&lt;/code&gt; compiler to &lt;code&gt;8.10.7&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The following command opens a user interface to install and change the default Haskell compiler.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ ghcup tui&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The first time you open this project you need to compile the targets within the project.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cabal build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This command will create a folder &lt;code&gt;dist-newstyle&lt;/code&gt; with the resulting compilation, ignore it, but this is where the required dependencies are installed. It also compiles the project&#39;s source code and generates the executable or library output.&lt;/p&gt; &#xA;&lt;p&gt;To run the &lt;code&gt;Main.hs&lt;/code&gt; file run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ cabal run&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To lunch &lt;code&gt;ghci&lt;/code&gt; (Haskell interpreter) in the context of your Cabal project, you should use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ cabal repl&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Inside the interpreter you can load any module to interact with as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;GHCi&amp;gt; :load &amp;lt;modul-name&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;GHCi&amp;gt; :m + &amp;lt;modul-name-1&amp;gt; &amp;lt;modul-name-2&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;GHCi&amp;gt; import &amp;lt;modul-name&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Change &lt;code&gt;ghc&lt;/code&gt; version&lt;/h2&gt; &#xA;&lt;p&gt;This explanation assumes that you will use &lt;code&gt;ghcup&lt;/code&gt; as your main Haskell installer.&lt;/p&gt; &#xA;&lt;p&gt;If you have access to &lt;code&gt;ghcup tui&lt;/code&gt; (which means you&#39;re not using Windows - lucky you!), it will provide a user interface to help you install and set the version of &lt;code&gt;ghc&lt;/code&gt; and other programs related to Haskell.&lt;/p&gt; &#xA;&lt;p&gt;If you don&#39;t have the &lt;code&gt;tui&lt;/code&gt; program, you can still install and set as default any available &lt;code&gt;ghc&lt;/code&gt; version by following these steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install the desired &lt;code&gt;ghc&lt;/code&gt; version&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ ghcup install ghc 8.10.7&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Now you need to set the main &lt;code&gt;ghc&lt;/code&gt; compiler.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ ghcup set ghc 8.10.7&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Recomendations&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;There should be non whitespace in any folder of the project path&lt;/li&gt; &#xA; &lt;li&gt;You may have problem building the project because of the &lt;code&gt;MAX_PATH&lt;/code&gt; configuration on your system. In windows the &lt;code&gt;MAX_PATH&lt;/code&gt; is defined with 260 characters. So as the build project generates long path for the build artifacts, put your project in a folder with a short path.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;C libraries&lt;/h2&gt; &#xA;&lt;p&gt;The graphics of this projects run on OpenGL (Open Graphics Library) and in GLUT (OpenGL Utility Toolkit).&lt;/p&gt; &#xA;&lt;p&gt;OpenGL (Open Graphics Library) is a cross-platform API (Application Programming Interface) for rendering 2D and 3D computer graphics.&lt;/p&gt; &#xA;&lt;p&gt;GLUT (OpenGL Utility Toolkit) is a library that provides a set of functions for creating graphical user interfaces (GUIs) and handling input events in OpenGL applications.&lt;/p&gt; &#xA;&lt;p&gt;This modules may need some C libraries you may not have on your system. Depending on your operating system, you can usually install this C libraries using your package manager. For example, on Ubuntu or Debian, you can install the library using the following command:&lt;/p&gt; &#xA;&lt;h3&gt;OpenGL&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ sudo apt-get install libgl1-mesa-dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;GLUT&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ sudo apt-get install -y \&#xA;    libglu1-mesa-dev \&#xA;    freeglut3-dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;GNU Multiple Precision Arithmetic Library (gmp)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ sudo apt-get install libgmp-dev&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>wobcom/powerdns-gerd</title>
    <updated>2023-05-22T01:35:43Z</updated>
    <id>tag:github.com,2023-05-22:/wobcom/powerdns-gerd</id>
    <link href="https://github.com/wobcom/powerdns-gerd" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;PowerDNS-Gerd - From Gerðr (/ˈɡerðz̠/; Old Norse for &#34;fenced-in&#34;) - A PowerDNS Authorization Proxy&lt;/h1&gt; &#xA;&lt;p&gt;[[&lt;em&gt;TOC&lt;/em&gt;]]&lt;/p&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;PowerDNS-Gerd is an authorization proxy for PowerDNS API.&lt;/p&gt; &#xA;&lt;p&gt;With PowerDNS-Gerd you can provide a multi-user authorization model with granular permissions based on record names and record types.&lt;/p&gt; &#xA;&lt;h2&gt;API coverage&lt;/h2&gt; &#xA;&lt;p&gt;PowerDNS-Gerd uses &lt;a href=&#34;https://hackage.haskell.org/package/powerdns&#34;&gt;powerdns&lt;/a&gt; for both talking to the upstream server, as well as providing endpoints. The binding is designed to match every documented API endpoint. PowerDNS-Gerd should therefore re-expose every known endpoint. All endpoints however require correct authentication as minimum, even the api version endpoint.&lt;/p&gt; &#xA;&lt;h2&gt;Config Format&lt;/h2&gt; &#xA;&lt;p&gt;The config format comes from &lt;a href=&#34;https://hackage.haskell.org/package/config-value&#34;&gt;config-value&lt;/a&gt;. The format is similar to that of YAML, with a few notable differences:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Comments use OCaml style &lt;code&gt;-- line comment&lt;/code&gt; and &lt;code&gt;{- multi-line block comment -}&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Certain macros can be used&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;An example config file can be found at &lt;a href=&#34;https://gitlab.com/wobcom/haskell/powerdns-gerd/-/blob/master/powerdns-gerd.conf.example&#34;&gt;example-config&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;PowerDNS-Gerd is self-documenting and will tell you the config schema in a human readable form by invoking&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ powerdns-gerd config-help&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Permissions&lt;/h2&gt; &#xA;&lt;h3&gt;Zone-wide permissions&lt;/h3&gt; &#xA;&lt;p&gt;You can set&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;view&lt;/li&gt; &#xA; &lt;li&gt;domains&lt;/li&gt; &#xA; &lt;li&gt;delete&lt;/li&gt; &#xA; &lt;li&gt;update&lt;/li&gt; &#xA; &lt;li&gt;triggerAxfr&lt;/li&gt; &#xA; &lt;li&gt;notifySlaves&lt;/li&gt; &#xA; &lt;li&gt;getAxfr&lt;/li&gt; &#xA; &lt;li&gt;rectifyZone&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For documentation how to set each permission, refer to &lt;code&gt;powerdns-guard config-help&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Note: The key &lt;code&gt;domains&lt;/code&gt; implicitly grants updateRecords permissions for the specified zone. If &lt;code&gt;domains&lt;/code&gt; is set on user-level, this will permit updateRecords on matching records on every zone.&lt;/p&gt; &#xA;&lt;h3&gt;Domain permissions&lt;/h3&gt; &#xA;&lt;p&gt;A domain permission consists of a domain label pattern and a record type pattern.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;{ name: &amp;lt;DOMAIN-LABEL-PATTERN&amp;gt;, types: &amp;lt;RECORD-TYPE-PATTERN&amp;gt; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Domain label pattern&lt;/h4&gt; &#xA;&lt;p&gt;The domain label pattern language is described in &lt;a href=&#34;https://hackage.haskell.org/package/dns-patterns-0.2.1/docs/Network-DNS-Pattern.html&#34;&gt;dns-patterns&lt;/a&gt;. In simple terms, any usual domain name representation is a valid Pattern.&lt;/p&gt; &#xA;&lt;p&gt;In addition we support the following glob and globstar label patterns A single asterisk acts as a glob pattern, and matches any single label in place of it. For example &lt;code&gt;sub.*.example.com&lt;/code&gt; would match &lt;code&gt;sub.a.example.com&lt;/code&gt; and &lt;code&gt;sub.b.example.com&lt;/code&gt;. A double asterisk acts as a globstar pattern and matches any number of labels. &lt;code&gt;**.example.com&lt;/code&gt; would match &lt;code&gt;foo.example.com&lt;/code&gt; and &lt;code&gt;bar.foo.example.com&lt;/code&gt;. This pattern is currently only allowed on the leftmost label.&lt;/p&gt; &#xA;&lt;p&gt;Furthermore, we allow a backslash to act as an escape character for the following three characters:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;\\&lt;/code&gt; to match a backslash inside a label (byte 0x5)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;\.&lt;/code&gt; to match a dot inside a label (byte 0x2e)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;\*&lt;/code&gt; to match an asterisk inside a label (byte 0x2a)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;\0123&lt;/code&gt; to match an arbitrary byte with that octal representation&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Record label pattern&lt;/h4&gt; &#xA;&lt;p&gt;A record label pattern is either the atom &lt;code&gt;any&lt;/code&gt;, which matches any record type, or a list of atoms specifing permissable record types, like &lt;code&gt;[A, AAAA, TXT, SRV]&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Security&lt;/h2&gt; &#xA;&lt;p&gt;PowerDNS-Gerd password verification uses argon2id and is handled by &lt;a href=&#34;https://libsodium.gitbook.io/doc/&#34;&gt;libsodium&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The permission model is kept simple in &lt;a href=&#34;https://gitlab.com/wobcom/haskell/powerdns-gerd/-/blob/master/lib/PowerDNS/Gerd/Permission.hs&#34;&gt;Permission.hs&lt;/a&gt;. A set of thorough &lt;a href=&#34;https://gitlab.com/wobcom/haskell/powerdns-gerd/-/blob/master/test/Spec.hs&#34;&gt;tests&lt;/a&gt; tries to assert that users can only access records they have been granted permission to.&lt;/p&gt; &#xA;&lt;h2&gt;How is PowerDNS-Gerd different from powerdns-auth-proxy?&lt;/h2&gt; &#xA;&lt;p&gt;powerdns-auth-proxy permissions are linked to account ownership, where a user has complete control over a given zone, and that zone can only be controlled by that same user.&lt;/p&gt; &#xA;&lt;p&gt;With PowerDNS-Gerd you can assign permissions of particular domains or zones, filterable by record type, to a user. For example, for ACME DNS-01 challenge you usually operate a client like &lt;a href=&#34;https://go-acme.github.io/lego/&#34;&gt;lego&lt;/a&gt; which would manage &lt;code&gt;TXT _acme-challenge.example.com&lt;/code&gt;. That client however does not need access to other records.&lt;/p&gt; &#xA;&lt;p&gt;With PowerDNS-Gerd you can simply specify a permission like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;* { name: &#34;_acme-challenge.example.com.&#34;, types: [TXT] }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;which would grant a user access to that record only.&lt;/p&gt; &#xA;&lt;p&gt;You can also provide glob and globstar patterns like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;* { name: &#34;*.zone1.example.com.&#34;, types: any }&#xA;* { name: &#34;**.example.com.&#34;, types: [A, AAAA] }&#xA;* { name: &#34;_acme-challenge.*.zone2.example.com.&#34;, types: [TXT] }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Build&lt;/h2&gt; &#xA;&lt;p&gt;PowerDNS-Gerd is built with Haskell. To build it yourself, you need &lt;a href=&#34;https://www.haskell.org/cabal/&#34;&gt;cabal&lt;/a&gt; and &lt;a href=&#34;https://www.haskell.org/ghc/&#34;&gt;ghc&lt;/a&gt;. Both can be easily installed using &lt;a href=&#34;https://www.haskell.org/ghcup/&#34;&gt;ghcup&lt;/a&gt;. Alternative you can install &lt;a href=&#34;https://nixos.org/guides/install-nix.html&#34;&gt;nix&lt;/a&gt; and use &lt;code&gt;nix-shell&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The build required the following native libraries:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;zlib&lt;/li&gt; &#xA; &lt;li&gt;libsodium&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you use &lt;code&gt;nix-shell&lt;/code&gt; these will automatically be provided to you.&lt;/p&gt; &#xA;&lt;p&gt;To build the software yourself, use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cabal build powerdns-gerd&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The binary artifact can be located using:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cabal -v0 list-bin powerdns-gerd&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>serokell/nixfmt</title>
    <updated>2023-05-22T01:35:43Z</updated>
    <id>tag:github.com,2023-05-22:/serokell/nixfmt</id>
    <link href="https://github.com/serokell/nixfmt" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A formatter for Nix code&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;code&gt;nixfmt&lt;/code&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;nixfmt&lt;/code&gt; is a formatter for Nix code, intended to easily apply a uniform style.&lt;/p&gt; &#xA;&lt;p&gt;You are encouraged to test this out on your code and submit any undesirable formatting you find as an issue&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://buildkite.com/serokell/nixfmt&#34;&gt;&lt;img src=&#34;https://badge.buildkite.com/b37f73adea391439e63288e8fd3b47f4b98fb9640bb864ccfa.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://nixfmt.cachix.org&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/cachix-nixfmt-blue.svg?sanitize=true&#34; alt=&#34;Cachix&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;nixfmt&lt;/code&gt; is in nixpkgs master as of 2019-09-04:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;nix-env -iA nixpkgs.nixfmt&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To get the most recent version, install from master:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;# Optional: use cachix to get cached builds even for master&#xA;cachix use nixfmt&#xA;nix-env -f https://github.com/serokell/nixfmt/archive/master.tar.gz -i&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Nix with flakes&lt;/p&gt; &lt;pre&gt;&lt;code&gt;nix profile install github:serokell/nixfmt&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;h3&gt;With Nix&lt;/h3&gt; &#xA;&lt;p&gt;Haskell dependencies will be built by Nix.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Enter &lt;code&gt;nix-shell&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Build with &lt;code&gt;cabal new-build&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Without Nix&lt;/h3&gt; &#xA;&lt;p&gt;Haskell dependencies will be built by Cabal.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Build with &lt;code&gt;cabal new-build&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;nixfmt &amp;lt; input.nix&lt;/code&gt; – reads Nix code from &lt;code&gt;stdin&lt;/code&gt;, formats it, and outputs to &lt;code&gt;stdout&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;nixfmt file.nix&lt;/code&gt; – format the file in place&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;For Contributors&lt;/h2&gt; &#xA;&lt;p&gt;We welcome issues and pull requests on GitHub.&lt;/p&gt; &#xA;&lt;h2&gt;About Serokell&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;nixfmt&lt;/code&gt; is maintained and funded with &lt;span&gt;❤️&lt;/span&gt; by &lt;a href=&#34;https://serokell.io/&#34;&gt;Serokell&lt;/a&gt;. The names and logo for Serokell are trademark of Serokell OÜ.&lt;/p&gt; &#xA;&lt;p&gt;We love open source software! See &lt;a href=&#34;https://serokell.io/community?utm_source=github&#34;&gt;our other projects&lt;/a&gt; or &lt;a href=&#34;https://serokell.io/hire-us?utm_source=github&#34;&gt;hire us&lt;/a&gt; to design, develop and grow your idea!&lt;/p&gt;</summary>
  </entry>
</feed>