<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Haskell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-10T01:42:18Z</updated>
  <subtitle>Daily Trending of Haskell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Carnap/Carnap</title>
    <updated>2022-06-10T01:42:18Z</updated>
    <id>tag:github.com,2022-06-10:/Carnap/Carnap</id>
    <link href="https://github.com/Carnap/Carnap" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A formal logic framework that runs in the browser&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Carnap&lt;/h1&gt; &#xA;&lt;p&gt;Carnap is a free and open-source Haskell framework for creating and exploring formal languages, logics, and semantics. It lets you quickly and straightforwardly define languages, construct logics for those languages, and stipulate their semantics. Carnap then uses your specifications to figure out how to check proofs in a variety of formal systems using your logic, how to find the meanings of compound expressions, and a whole lot more.&lt;/p&gt; &#xA;&lt;p&gt;Carnap&#39;s primary application at the moment is powering &lt;a href=&#34;https://carnap.io&#34;&gt;Carnap.io&lt;/a&gt;, a website supporting online logic instruction and learning. If you&#39;d like to see some demos and more general information, head over to &lt;a href=&#34;https://carnap.io/about&#34;&gt;Carnap.io/about&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;d like to learn more about using the server as an instructor, head over to the &lt;a href=&#34;https://carnap.io/srv/doc&#34;&gt;documentation collection.&lt;/a&gt;. You can also find documentation about administration-focused topics such as deployment and server configuration there. Documentation is updated nightly from the &lt;a href=&#34;https://github.com/Carnap/Carnap-Documentation&#34;&gt;Carnap-Documentation&lt;/a&gt; repository, in case you&#39;d like to contribute or suggest an edit.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;d like to discuss development and administration of Carnap instances in real time, we have a chat room on &lt;a href=&#34;https://matrix.to/#/!AqFOGENiPssQgsjxfE:matrix.org?via=matrix.org&#34;&gt;Matrix&lt;/a&gt;, bridged to &lt;a href=&#34;ircs://irc.libera.chat:6697/carnap&#34;&gt;libera.chat in #carnap&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;There is also a mailing list, primarily focused on instructor support, on &lt;a href=&#34;https://groups.google.com/g/carnap-users&#34;&gt;Google Groups&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re interested in contributing to software development or modifying the software, read on. This README will help you set up a development environment for building the server-side and client-side components used on carnap.io.&lt;/p&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;h3&gt;General information&lt;/h3&gt; &#xA;&lt;p&gt;The current development environment is based on &lt;a href=&#34;https://nixOS.org&#34;&gt;Nix&lt;/a&gt;. For general background on Nix, take a look at &lt;a href=&#34;https://nixos.org/learn.html&#34;&gt;nixos.org/learn.html&lt;/a&gt; or &lt;a href=&#34;https://nix.dev&#34;&gt;nix.dev&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The Nix package manager runs on any Linux distribution or macOS and can be installed without disrupting the rest of your system.&lt;/p&gt; &#xA;&lt;p&gt;Building on Windows natively is not supported, however, Carnap works well in the &lt;a href=&#34;https://aka.ms/wsl&#34;&gt;Windows Subsystem for Linux&lt;/a&gt;, and has been tested and confirmed working in &lt;a href=&#34;https://aka.ms/wsl2&#34;&gt;WSL 2&lt;/a&gt;. The steps for Linux work as-written in WSL 2.&lt;/p&gt; &#xA;&lt;p&gt;Nix is used to speed up builds and avoid having to compile dependencies, instead using cached built versions from the NixOS build farm. It also makes it easy to &lt;a href=&#34;https://nixos.org/nixpkgs/manual/#sec-pkgs-dockerTools&#34;&gt;build lean Docker images&lt;/a&gt; and implement CI.&lt;/p&gt; &#xA;&lt;p&gt;Carnap has a GHCJS (client side) and a GHC (server side) part.&lt;/p&gt; &#xA;&lt;p&gt;Nix does not support incremental package builds, so the suggested development workflow is to use the standard Haskell build system &lt;code&gt;cabal&lt;/code&gt; in a &lt;code&gt;nix-shell&lt;/code&gt;. A &lt;code&gt;Makefile&lt;/code&gt; has been provided to make this easier by shortening the commands needed to be typed. It will output the commands it runs, and you can also read the &lt;code&gt;Makefile&lt;/code&gt; itself for more details.&lt;/p&gt; &#xA;&lt;p&gt;In this documentation, lines starting with &lt;code&gt;$&lt;/code&gt; mean that the part after the &lt;code&gt;$&lt;/code&gt; is run in a shell natively on your system. Lines starting with &lt;code&gt;[nix-shell]$&lt;/code&gt; are intended to be run in a &lt;code&gt;nix-shell&lt;/code&gt; shell, which will have that prompt.&lt;/p&gt; &#xA;&lt;h3&gt;Nix setup&lt;/h3&gt; &#xA;&lt;p&gt;Install Nix with your &lt;em&gt;non-root&lt;/em&gt; user account:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ bash &amp;lt;(curl -L https://nixos.org/nix/install)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;macOS 10.15 (Catalina) users may need to follow additional steps, documented at &lt;a href=&#34;https://nixos.org/nix/manual/#sect-macos-installation&#34;&gt;nixos.org/nix/manual/#sect-macos-installation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can significantly speed up builds by using binaries for Carnap dependencies from Carnap&#39;s &lt;a href=&#34;https://cachix.org/&#34;&gt;Cachix&lt;/a&gt; instance, which has support for both Linux and macOS. To use it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ # Install Cachix:&#xA;$ nix-env -iA cachix -f https://cachix.org/api/v1/install&#xA;$ # Use the Carnap Cachix&#xA;$ cachix use carnap&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then build as normal.&lt;/p&gt; &#xA;&lt;p&gt;A quick aside (for those who are curious about what these commands are doing): Nix, by default, reads &lt;code&gt;shell.nix&lt;/code&gt; if you call it through &lt;code&gt;nix-shell&lt;/code&gt;, and &lt;code&gt;default.nix&lt;/code&gt; if you call it with nix-build or others. That&#39;s why there are attribute names being used with &lt;code&gt;-A&lt;/code&gt; for the &lt;code&gt;nix-build&lt;/code&gt; commands, but not for &lt;code&gt;nix-shell&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;I&#39;d like to work on Carnap-Server&lt;/h3&gt; &#xA;&lt;p&gt;This creates a shell in an environment providing the required dependencies for Carnap-Server, along with development tools such as &lt;code&gt;cabal&lt;/code&gt;, &lt;code&gt;ghc&lt;/code&gt; and others appropriate for server side development. Nix shells use versions of Haskell components and tools isolated from those available on the host system, sort of like Python&#39;s &lt;code&gt;virtualenv&lt;/code&gt;, but for Haskell packages, and in fact, the entire machine.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ nix-shell&#xA;[nix-shell:Carnap]$ # Run a development server&#xA;[nix-shell:Carnap]$ make run&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You should then be able to access your development server at &lt;code&gt;http://localhost:3000&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Next steps&lt;/h4&gt; &#xA;&lt;p&gt;To become an instructor, log in with the dummy login using an email you&#39;ll remember. Set your first name and last name. Then, go to &lt;a href=&#34;http://localhost:3000/admin_promote&#34;&gt;http://localhost:3000/admin_promote&lt;/a&gt; and press the button. Your account will be promoted to administrator of the local instance.&lt;/p&gt; &#xA;&lt;p&gt;From there, you can go to &lt;a href=&#34;http://localhost:3000/master_admin&#34;&gt;http://localhost:3000/master_admin&lt;/a&gt; and promote your account to instructor. You can log out and log back in with another email if you want to simulate a student, for example.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;d like to dig into the code, &lt;a href=&#34;https://raw.githubusercontent.com/Carnap/Carnap/master/#Haskell-Language-Server&#34;&gt;Haskell Language Server&lt;/a&gt; is highly recommended.&lt;/p&gt; &#xA;&lt;h3&gt;I&#39;d like to work on the GHCJS client side components of Carnap&lt;/h3&gt; &#xA;&lt;p&gt;This process will replace the symlink to the Nix-built client automatically built while working on the server with one to a &lt;code&gt;cabal&lt;/code&gt;-built client, more suitable for development. You can delete &lt;code&gt;client-out&lt;/code&gt; and &lt;code&gt;make run&lt;/code&gt; will give you a Nix-built client again.&lt;/p&gt; &#xA;&lt;p&gt;You can get a shell with a &lt;code&gt;ghcjs&lt;/code&gt; compiler like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ make shell-ghcjs&#xA;$ # This will invoke cabal to build the GHCJS components&#xA;[nix-shell:Carnap]$ make build-ghcjs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;I&#39;d like to work on truth-tree/Rudolf&lt;/h3&gt; &#xA;&lt;p&gt;The truth tree components are built by Nix as well, in a nearly identical way to the client. If you&#39;d like to replace them with a locally built one, replace the symlink with one pointing to a local checkout that&#39;s been built:&lt;/p&gt; &#xA;&lt;p&gt;Say, you have a checkout of &lt;a href=&#34;https://github.com/ubc-carnap-team/Rudolf/&#34;&gt;the repo&lt;/a&gt; at &lt;code&gt;~/dev/Rudolf&lt;/code&gt; that you&#39;ve already run &lt;code&gt;yarn install&lt;/code&gt; and &lt;code&gt;yarn build-lib&lt;/code&gt; in, you&#39;d want to run, in your Carnap directory:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Carnap$ ln -sfn ~/dev/Rudolf ./truth-tree-out&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you&#39;d like to go back to the Nix-built truth tree, just delete the &lt;code&gt;truth-tree-out&lt;/code&gt; symlink.&lt;/p&gt; &#xA;&lt;h3&gt;Special build outputs&lt;/h3&gt; &#xA;&lt;h4&gt;Release builds&lt;/h4&gt; &#xA;&lt;p&gt;If you&#39;d like to build a release build of the Nix package, suitable for production, use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ nix-build -A server -o server-out&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This builds the derivation at the attribute &lt;code&gt;server&lt;/code&gt; of the attribute set returned by the function at the top level of &lt;code&gt;default.nix&lt;/code&gt;. You can also invoke this function yourself if you want to use Carnap in a NixOps deployment, for example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nix&#34;&gt;let carnap-server = (import ./carnap/default.nix {}).server;&#xA;in {&#xA;  # use it&#xA;  # ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here&#39;s a sample of &lt;a href=&#34;https://github.com/ubc-carnap-team/carnap-nixops/raw/49f1bf814d6e3466ca3ca1c1fc5e56fccbb5e76c/carnap.nix#L41-L73&#34;&gt;NixOps files using this for a deployment of Carnap at UBC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Building Docker images&lt;/h4&gt; &#xA;&lt;p&gt;If you&#39;d like to build an image locally for development/testing, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ nix-build release.nix -A docker -o docker-out&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;then load it into the docker daemon with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ docker image load -i docker-out&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It will be available under the image name &lt;code&gt;carnap:latest&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The docker building setup does not require KVM support in the host kernel, and if you wish to build your images on a machine without it, run nix-build with the added argument &lt;code&gt;--arg hasKvm false&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Haskell Language Server&lt;/h4&gt; &#xA;&lt;p&gt;The Nix infrastructure for Carnap provides the Haskell Language Server by default for development on Carnap-Server, allowing for completion, type information and more. It is not yet working on the exclusively-GHCJS-built components.&lt;/p&gt; &#xA;&lt;p&gt;To use it:&lt;/p&gt; &#xA;&lt;p&gt;Make the following shell script somewhere in &lt;code&gt;$PATH&lt;/code&gt;, called &lt;code&gt;hls-nix&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;#!/bin/sh&#xA;&#xA;nix-shell --run &#34;haskell-language-server-wrapper $@&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, configure per the &lt;a href=&#34;https://github.com/haskell/haskell-language-server&#34;&gt;information in the README&lt;/a&gt;. For example, for neovim with &lt;code&gt;Coc&lt;/code&gt;, the following configuration should be put in the file brought up by &lt;code&gt;:CocConfig&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;&#34;languageserver&#34;: {&#xA;  &#34;haskell&#34;: {&#xA;    &#34;command&#34;: &#34;hls-nix&#34;,&#xA;    &#34;args&#34;: [&#34;--lsp&#34;],&#xA;    &#34;rootPatterns&#34;: [&#34;*.cabal&#34;, &#34;stack.yaml&#34;, &#34;cabal.project&#34;, &#34;package.yaml&#34;, &#34;hie.yaml&#34;],&#xA;    &#34;filetypes&#34;: [&#34;haskell&#34;, &#34;lhaskell&#34;]&#xA;  }&#xA;}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;NOTE: we are using the &lt;code&gt;hls-nix&lt;/code&gt; wrapper script as the command here, so HLS picks up the dependencies for Carnap-Server from Nix since it is run in a &lt;code&gt;nix-shell&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;NOTE: &lt;code&gt;Carnap-Server/config/settings.yml&lt;/code&gt; needs to be present for Carnap-Server to work in HLS (just copy it from the example settings file).&lt;/p&gt; &#xA;&lt;h4&gt;Working on documentation locally&lt;/h4&gt; &#xA;&lt;p&gt;The documentation is available using the &lt;code&gt;/srv/&lt;/code&gt; route, which can also be used locally. If you want to do this, you can make a symbolic link like the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;carnap$ ln -s /path/to/your/clone/of/Carnap-Documentation ./dataroot/srv&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can then browse to &lt;code&gt;http://localhost:3000/srv&lt;/code&gt; to have an immediate preview of the documentation as you work on it.&lt;/p&gt; &#xA;&lt;h2&gt;Maintainer information&lt;/h2&gt; &#xA;&lt;h3&gt;CI requirements&lt;/h3&gt; &#xA;&lt;p&gt;CI requires that a Cachix signing key for the Cachix cache be supplied in the &lt;code&gt;CACHIX_SIGNING_KEY&lt;/code&gt; Secret in the GitHub repository settings for artifacts to be pushed to Cachix.&lt;/p&gt; &#xA;&lt;h3&gt;Updating nixpkgs&lt;/h3&gt; &#xA;&lt;p&gt;The version of nixpkgs used is pinned to a fixed git commit to ensure that no unexpected issues happen with our builds. Occasionally it should be updated, then Carnap build reattempted. Currently we use a system of two versions of nixpkgs, &lt;code&gt;nixpkgs&lt;/code&gt; and &lt;code&gt;nixpkgs-stable&lt;/code&gt;, with &lt;code&gt;nixpkgs&lt;/code&gt; used for Carnap-Server, having the latest packages including haskell-language-server, and &lt;code&gt;nixpkgs-stable&lt;/code&gt; providing a working ghcjs (since it is supposedly broken in the latest nixpkgs). &lt;code&gt;nixpkgs-stable&lt;/code&gt; as of the time of this writing is pinned to &lt;code&gt;nixos-20.03&lt;/code&gt; whereas &lt;code&gt;nixpkgs&lt;/code&gt; is on &lt;code&gt;nixpkgs-unstable&lt;/code&gt;, a tested-but-rolling-release build.&lt;/p&gt; &#xA;&lt;p&gt;We now use &lt;a href=&#34;https://github.com/nmattia/niv&#34;&gt;niv&lt;/a&gt; to manage our nixpkgs versions. It is available from either development shell.&lt;/p&gt; &#xA;&lt;p&gt;Run &lt;code&gt;niv update nixpkgs&lt;/code&gt; or &lt;code&gt;niv update nixpkgs-stable&lt;/code&gt; to update the respective pinned nixpkgs versions to the latest in their branch.&lt;/p&gt; &#xA;&lt;h3&gt;Issues&lt;/h3&gt; &#xA;&lt;p&gt;Every instance of &lt;code&gt;doJailbreak&lt;/code&gt; is disabling version checking in Cabal. Most of the time this works fine, but it indicates bugs in the packages&#39; Cabal version restrictions.&lt;/p&gt; &#xA;&lt;p&gt;Carnap currently uses an older ghcjs-dom from 2016, which is largely fine on web but requires webkitgtk24x-gtk3, which was been removed from Nix in late 2019. It is thus currently not possible to build the Carnap front end natively (i.e. for embedding in non-browser applications) pending this update.&lt;/p&gt; &#xA;&lt;p&gt;A bunch of packages have broken unit tests on ghcjs. All tests on ghcjs are accordingly disabled (also, for performance reasons).&lt;/p&gt; &#xA;&lt;h3&gt;Suggested Nix Resources&lt;/h3&gt; &#xA;&lt;p&gt;Blog post on Carnap&#39;s nix implementation: &lt;a href=&#34;https://lfcode.ca/blog/nix-and-haskell&#34;&gt;https://lfcode.ca/blog/nix-and-haskell&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Tutorial some of the Nix here is loosely based on: &lt;a href=&#34;https://github.com/Gabriel439/haskell-nix&#34;&gt;https://github.com/Gabriel439/haskell-nix&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;User&#39;s guide to the Haskell infrastructure: &lt;a href=&#34;https://nixos.org/nixpkgs/manual/#users-guide-to-the-haskell-infrastructure&#34;&gt;https://nixos.org/nixpkgs/manual/#users-guide-to-the-haskell-infrastructure&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Source code to the Haskell infrastructure (has good doc comments): &lt;a href=&#34;https://github.com/NixOS/nixpkgs/tree/nixos-20.03/pkgs/development/haskell-modules&#34;&gt;https://github.com/NixOS/nixpkgs/tree/nixos-20.03/pkgs/development/haskell-modules&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Basic information about the builder and e.g. how to build manually: &lt;a href=&#34;https://nixos.wiki/wiki/Nixpkgs/Create_and_debug_packages&#34;&gt;https://nixos.wiki/wiki/Nixpkgs/Create_and_debug_packages&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>EgorDm/fp-pacman</title>
    <updated>2022-06-10T01:42:18Z</updated>
    <id>tag:github.com,2022-06-10:/EgorDm/fp-pacman</id>
    <link href="https://github.com/EgorDm/fp-pacman" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Retro Pacman game in Haskell&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;fp-pacman&lt;/h1&gt; &#xA;&lt;p&gt;Retro pacman game made haskell by Egor Dmitriev and Cody Bloemhard.&lt;/p&gt; &#xA;&lt;h2&gt;Video&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=DlifcJ4cexw&#34;&gt;&lt;img src=&#34;https://img.youtube.com/vi/DlifcJ4cexw/0.jpg&#34; alt=&#34;click this image&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/DlifcJ4cexw&#34;&gt;or click this link&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How to play&lt;/h2&gt; &#xA;&lt;p&gt;Try to eat all the the dots. Avoid the ghosts. If you eat a cherry(big dot) you can eat ghosts for a while.&lt;/p&gt; &#xA;&lt;h2&gt;Controls&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;W/S to select menu items.&lt;/li&gt; &#xA; &lt;li&gt;Enter to activate a menu item.&lt;/li&gt; &#xA; &lt;li&gt;W/A/S/D to move pacman.&lt;/li&gt; &#xA; &lt;li&gt;P to pause the game.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Known errors&lt;/h2&gt; &#xA;&lt;h3&gt;GLUT&lt;/h3&gt; &#xA;&lt;p&gt;Make shure you have glut installed. &lt;code&gt;pacman -S glut&lt;/code&gt; on arch or equivalent. &lt;code&gt;fp-pacman-exe.EXE: user error (unknown GLUT entry glutInit)&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;To fix it, move freeglut.dll &lt;a href=&#34;http://files.transmissionzero.co.uk/software/development/GLUT/freeglut-MinGW.zip&#34;&gt;from bin folder&lt;/a&gt; to your system32. Or if on linux, install glut library.&lt;/p&gt; &#xA;&lt;h3&gt;SDL2&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;-- While building package sdl2-mixer-1.1.0 using: [lots of paths] Configuring sdl2-mixer-1.1.0... Cabal-simple_mPHDZzAJ_2.2.0.1_ghc-8.4.3: The pkg-config package &#39;SDL2_mixer&#39; version &amp;gt;=2.0.0 is required but it could not be found.&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;To fix, install sdl2: &lt;code&gt;pacman -S sdl2 sdl2_mixer&lt;/code&gt;, or whatever your package manager is. It should also install mpg123, opusfile.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>mike-burns/timing-convenience</title>
    <updated>2022-06-10T01:42:18Z</updated>
    <id>tag:github.com,2022-06-10:/mike-burns/timing-convenience</id>
    <link href="https://github.com/mike-burns/timing-convenience" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Functions to make getting time offsets more convenient and pretty.&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;timing-convenience&lt;/h2&gt; &#xA;&lt;p&gt;Functions to make it a little more convenient to work with time offsets. Inspired by Ruby&#39;s ActiveSupport time methods on Fixnum.&lt;/p&gt; &#xA;&lt;h1&gt;Usage&lt;/h1&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;http://github.com/mike-burns/timing-convenience/blob/master/Sample.hs&#34;&gt;Sample.hs&lt;/a&gt; for a more full sample.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;main = do&#xA;  t &amp;lt;- timeFor 3 Days Ago&#xA;  putStrLn $ show t&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;p&gt;In your project&#39;s cabal file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;-- Packages needed in order to build this package.&#xA;Build-depends:       timing-convenience&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or from the command line:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cabal install timing-convenience&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Documentation&lt;/h1&gt; &#xA;&lt;p&gt;For details see &lt;a href=&#34;http://hackage.haskell.org/packages/archive/timing-convenience/lastest/doc/html/Data-Time-Convenience.html&#34;&gt;the reference documentation on Hackage&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Copyright&lt;/h1&gt; &#xA;&lt;p&gt;Copyright 2011 Mike Burns.&lt;/p&gt; &#xA;&lt;p&gt;Available under the BSD 3-clause license.&lt;/p&gt;</summary>
  </entry>
</feed>