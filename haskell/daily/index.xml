<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Haskell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-23T01:41:49Z</updated>
  <subtitle>Daily Trending of Haskell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>input-output-hk/cardano-base</title>
    <updated>2022-06-23T01:41:49Z</updated>
    <id>tag:github.com,2022-06-23:/input-output-hk/cardano-base</id>
    <link href="https://github.com/input-output-hk/cardano-base" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Code used throughout the Cardano eco-system&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;cardano-base&lt;/h1&gt; &#xA;&lt;p&gt;A collection of miscellaneous packages used by Cardano that cover:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;cryptography&lt;/li&gt; &#xA; &lt;li&gt;serialization&lt;/li&gt; &#xA; &lt;li&gt;slotting&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Each sub-project has its own README.&lt;/p&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://github.com/input-output-hk/cardano-base/wiki&#34;&gt;wiki&lt;/a&gt; for more documentation.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>google-research/dex-lang</title>
    <updated>2022-06-23T01:41:49Z</updated>
    <id>tag:github.com,2022-06-23:/google-research/dex-lang</id>
    <link href="https://github.com/google-research/dex-lang" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Research language for array processing in the Haskell/ML family&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Dex &lt;a href=&#34;https://github.com/google-research/dex-lang/actions?query=workflow%3ATests&#34;&gt;&lt;img src=&#34;https://github.com/google-research/dex-lang/workflows/Tests/badge.svg?sanitize=true&#34; alt=&#34;Test status&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;Dex (named for &#34;index&#34;) is a research language for typed, functional array processing. The goal of the project is to explore:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Type systems for array programming&lt;/li&gt; &#xA; &lt;li&gt;Mathematical program transformations like differentiation and integration&lt;/li&gt; &#xA; &lt;li&gt;User-directed compilation to parallel hardware&lt;/li&gt; &#xA; &lt;li&gt;Interactive and incremental numerical programming and visualization&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To learn more, check out our &lt;a href=&#34;https://arxiv.org/abs/2104.05372&#34;&gt;paper&lt;/a&gt;, our &lt;a href=&#34;https://google-research.github.io/dex-lang/examples/tutorial.html&#34;&gt;tutorial&lt;/a&gt; or these example programs:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://google-research.github.io/dex-lang/prelude.html&#34;&gt;Dex prelude&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://google-research.github.io/dex-lang/examples/mandelbrot.html&#34;&gt;Mandelbrot set&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://google-research.github.io/dex-lang/examples/raytrace.html&#34;&gt;Ray tracer&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://google-research.github.io/dex-lang/examples/pi.html&#34;&gt;Estimating pi&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://google-research.github.io/dex-lang/examples/mcmc.html&#34;&gt;Hamiltonian Monte Carlo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://google-research.github.io/dex-lang/examples/ode-integrator.html&#34;&gt;ODE integrator&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://google-research.github.io/dex-lang/examples/sierpinski.html&#34;&gt;Sierpinski triangle&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://google-research.github.io/dex-lang/examples/regression.html&#34;&gt;Basis function regression&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://google-research.github.io/dex-lang/examples/brownian_motion.html&#34;&gt;Brownian bridge&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://google-research.github.io/dex-lang/examples/levenshtein-distance.html&#34;&gt;Dynamic programming (Levenshtein distance)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;üö® &lt;strong&gt;Dex is an experimental research project at an early stage of development. Expect monstrous bugs and razor-sharp edges!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;ü§ù &lt;strong&gt;Contributions welcome!&lt;/strong&gt; See our issue tracker for &lt;a href=&#34;https://github.com/google-research/dex-lang/labels/good%20first%20issue&#34;&gt;good first issues&lt;/a&gt;, or browse by &lt;a href=&#34;https://github.com/google-research/dex-lang/labels&#34;&gt;thematic labels&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Dependencies&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install &lt;a href=&#34;https://www.haskellstack.org&#34;&gt;stack&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Install LLVM 12 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Ubuntu/Debian: &lt;code&gt;apt-get install llvm-12-dev&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;macOS: &lt;code&gt;brew install llvm@12&lt;/code&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Make sure &lt;code&gt;llvm@12&lt;/code&gt; is on your &lt;code&gt;PATH&lt;/code&gt; before building. Example: &lt;code&gt;export PATH=&#34;$(brew --prefix llvm@12)/bin:$PATH&#34;&lt;/code&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Install clang 12 (may be installed together with llvm) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Ubuntu/Debian: &lt;code&gt;apt-get install clang-12&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;macOS: installs with llvm&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Install libpng (often included by default in *nix platforms) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Ubuntu/Debian: &lt;code&gt;apt-get install libpng-dev&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;macOS: &lt;code&gt;brew install libpng&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Building&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Build Dex in development mode: &lt;code&gt;make&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run tests in development mode: &lt;code&gt;make tests&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Install a release version of Dex: &lt;code&gt;make install&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The default installation directory is &lt;code&gt;$HOME/.local/bin&lt;/code&gt;, so make sure to add that directory to &lt;code&gt;$PATH&lt;/code&gt; after installing Dex. To install Dex somewhere else, set the &lt;code&gt;PREFIX&lt;/code&gt; environment variable before running &lt;code&gt;make install&lt;/code&gt;. For example, &lt;code&gt;PREFIX=$HOME make install&lt;/code&gt; installs &lt;code&gt;dex&lt;/code&gt; in &lt;code&gt;$HOME/bin&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;It is convenient to set up a &lt;code&gt;dex&lt;/code&gt; alias (e.g. in &lt;code&gt;.bashrc&lt;/code&gt;) for running Dex in development mode:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;# Linux:&#xA;alias dex=&#34;stack exec dex -- --lib-path lib&#34;&#xA;&#xA;# macOS:&#xA;alias dex=&#34;stack exec --stack-yaml=stack-macos.yaml dex -- --lib-path lib&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Haskell Language Server&lt;/h3&gt; &#xA;&lt;p&gt;In order to use &lt;a href=&#34;https://github.com/haskell/haskell-language-server&#34;&gt;HLS&lt;/a&gt; with the Haskell code in this project:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install &lt;a href=&#34;https://www.haskell.org/ghcup/&#34;&gt;ghcup&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;ghcup install hls&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Create a file in the root &lt;code&gt;dex&lt;/code&gt; directory called &lt;code&gt;hie.yaml&lt;/code&gt; with the following contents:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;cradle:&#xA;  stack:&#xA;    stackYaml: &#34;./stack-macos.yaml&#34;  # Or stack.yaml if not on MacOS&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Unfortunately one cannot dynamically select the &lt;code&gt;stack.yaml&lt;/code&gt; file to use based on the environment, and so one has to create an appropriate &lt;code&gt;hie.yaml&lt;/code&gt; file manually. This will be ignored by git.&lt;/p&gt; &#xA;&lt;p&gt;This should work out of the box with Emacs&#39; &lt;code&gt;lsp-haskell&lt;/code&gt; package.&lt;/p&gt; &#xA;&lt;h3&gt;Building with Nix&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://nixos.org/&#34;&gt;Nix&lt;/a&gt; is a functional package manager and build system.&lt;/p&gt; &#xA;&lt;p&gt;To build with vanilla Nix:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ nix-build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To build with flakes-enabled Nix:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ nix build .#dex&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The resulting &lt;code&gt;dex&lt;/code&gt; binary should be in &lt;code&gt;result/bin/dex&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For development purposes, you can use a Nix environment with&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ nix-shell&#xA;$ nix develop  # With flakes&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and use &lt;code&gt;make&lt;/code&gt; to use Stack to build Dex.&lt;/p&gt; &#xA;&lt;h2&gt;Running&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Traditional REPL: &lt;code&gt;dex repl&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Execute script: &lt;code&gt;dex script examples/pi.dx&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Live-updated notebook display &lt;code&gt;dex web examples/pi.dx&lt;/code&gt; (html) or &lt;code&gt;dex watch examples/pi.dx&lt;/code&gt; (terminal).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;BSD-3&lt;/p&gt; &#xA;&lt;p&gt;This is an early-stage research project, not an official Google product.&lt;/p&gt;</summary>
  </entry>
</feed>