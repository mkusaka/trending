<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Haskell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-01-27T01:30:58Z</updated>
  <subtitle>Daily Trending of Haskell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Perspicuous-Computing/lab</title>
    <updated>2024-01-27T01:30:58Z</updated>
    <id>tag:github.com,2024-01-27:/Perspicuous-Computing/lab</id>
    <link href="https://github.com/Perspicuous-Computing/lab" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://discord.gg/Zp2e8hYsuX&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/914172963157323776?label=Discord&amp;amp;logo=discord&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/plt-amy/1lab/actions/workflows/build.yml&#34;&gt;&lt;img src=&#34;https://github.com/plt-amy/1lab/actions/workflows/build.yml/badge.svg?sanitize=true&#34; alt=&#34;Build 1Lab&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;&lt;a href=&#34;https://1lab.dev&#34;&gt;1Lab&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;A formalised, cross-linked reference resource for mathematics done in Homotopy Type Theory. Unlike the HoTT book, the 1lab is not a “linear” resource: Concepts are presented as a directed graph, with links indicating dependencies.&lt;/p&gt; &#xA;&lt;h1&gt;Building&lt;/h1&gt; &#xA;&lt;p&gt;Building the 1Lab is a rather complicated task, which has led to a lot of homebrew infrastructure being developed for it. We build against a specific build of Agda (see the &lt;code&gt;rev&lt;/code&gt; field in &lt;code&gt;support/nix/dep/Agda/github.json&lt;/code&gt;), and there are also quite a few external dependencies (e.g. pdftocairo, katex). The recommended way of building the 1Lab is using Nix.&lt;/p&gt; &#xA;&lt;p&gt;As a quick point of reference, &lt;code&gt;nix-build&lt;/code&gt; will type-check and compile the entire thing, and copy the necessary assets (TeX Gyre Pagella and KaTeX&#39;s CSS and fonts) to the right locations. The result will be linked as &lt;code&gt;./result&lt;/code&gt;, which can then be used to serve a website:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ nix-build&#xA;$ python -m http.server --directory result&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that using Nix to build the website takes around ~20-30 minutes, since it will type-check the entire codebase from scratch every time. For interactive development, &lt;code&gt;nix-shell&lt;/code&gt; will give you a shell with everything you need to hack on the 1Lab, including Agda and the pre-built Shakefile as &lt;code&gt;1lab-shake&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ 1lab-shake all -j&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Since &lt;code&gt;nix-shell&lt;/code&gt; will load the derivation steps as environment variables, you can use something like this to copy the static assets into place:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ eval &#34;${installPhase}&#34;&#xA;$ python -m http.server --directory _build/site&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To hack on a file continuously, you can use &#34;watch mode&#34;, which will attempt to only check and build the changed file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ 1lab-shake all -w&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Additionally, since the validity of the Agda code is generally upheld by &lt;code&gt;agda-mode&lt;/code&gt;, you can use &lt;code&gt;--skip-agda&lt;/code&gt; to only build the prose. Note that this will disable checking the integrity of link targets, the translation of &lt;code&gt;`ref`{.Agda}&lt;/code&gt; spans, and the code blocks will be right ugly.&lt;/p&gt; &#xA;&lt;p&gt;Our build tools are routinely built for x86_64-linux and uploaded to Cachix. If you have the Cachix CLI installed, simply run &lt;code&gt;cachix use 1lab&lt;/code&gt;. Otherwise, add the following to your Nix configuration:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;substituters = https://1lab.cachix.org&#xA;trusted-public-keys = 1lab.cachix.org-1:eYjd9F9RfibulS4OSFBYeaTMxWojPYLyMqgJHDvG1fs=&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Directly&lt;/h2&gt; &#xA;&lt;p&gt;If you&#39;re feeling brave, you can try to replicate one of the build environments above. You will need:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;The &lt;code&gt;cabal-install&lt;/code&gt; package manager. Using &lt;code&gt;stack&lt;/code&gt; is no longer supported.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;A working LaTeX installation (TeXLive, etc) with the packages &lt;code&gt;tikz-cd&lt;/code&gt; (depends on &lt;code&gt;pgf&lt;/code&gt;), &lt;code&gt;mathpazo&lt;/code&gt;, &lt;code&gt;xcolor&lt;/code&gt;, &lt;code&gt;preview&lt;/code&gt;, and &lt;code&gt;standalone&lt;/code&gt; (depends on &lt;code&gt;varwidth&lt;/code&gt; and &lt;code&gt;xkeyval&lt;/code&gt;);&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://poppler.freedesktop.org/&#34;&gt;Poppler&lt;/a&gt; (for &lt;code&gt;pdftocairo&lt;/code&gt;);&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/sass/sassc&#34;&gt;&lt;code&gt;libsass&lt;/code&gt;&lt;/a&gt; (for &lt;code&gt;sassc&lt;/code&gt;);&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://nodejs.org/en/&#34;&gt;Node&lt;/a&gt; + required Node modules. Run &lt;code&gt;npm ci&lt;/code&gt; to install those.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can then use cabal-install to build and run our specific version of Agda and our Shakefile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cabal install Agda&#xA;# This will take quite a while!&#xA;&#xA;$ cabal v2-run shake -- -j --skip-agda&#xA;# the double dash separates cabal-install&#39;s arguments from our&#xA;# shakefile&#39;s.&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>mbg/icfp</title>
    <updated>2024-01-27T01:30:58Z</updated>
    <id>tag:github.com,2024-01-27:/mbg/icfp</id>
    <link href="https://github.com/mbg/icfp" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;icfp&lt;/h1&gt; &#xA;&lt;h1&gt;Non-standard packages&lt;/h1&gt; &#xA;&lt;p&gt;haskell-platform&lt;/p&gt; &#xA;&lt;h1&gt;Cabal packages&lt;/h1&gt; &#xA;&lt;p&gt;pqueue&lt;/p&gt;</summary>
  </entry>
</feed>