<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Haskell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-04-13T01:35:23Z</updated>
  <subtitle>Daily Trending of Haskell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>mortenfroelich/gaminghs</title>
    <updated>2023-04-13T01:35:23Z</updated>
    <id>tag:github.com,2023-04-13:/mortenfroelich/gaminghs</id>
    <link href="https://github.com/mortenfroelich/gaminghs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Small first? haskell project to create a measuring tool to ease the gamification of further haskell projects.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;gaminghs&lt;/h1&gt; &#xA;&lt;p&gt;Small first? haskell project to create a measuring tool to ease the gamification of further haskell projects.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>RiugaBachi/necrophagy</title>
    <updated>2023-04-13T01:35:23Z</updated>
    <id>tag:github.com,2023-04-13:/RiugaBachi/necrophagy</id>
    <link href="https://github.com/RiugaBachi/necrophagy" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A type-level, statically-verified Haskell embedded domain specific language (EDSL) for writing guitar tablature.&lt;/p&gt;&lt;hr&gt;&lt;h3&gt;necrophagy&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;(n) The eating of dead or decaying animal flesh&lt;/li&gt; &#xA; &lt;li&gt;(n) Feeding on corpses or carrion&lt;/li&gt; &#xA; &lt;li&gt;(n) The art of tabbing out statically- type-checked technical death metal&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/9GbqXzx.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;necrophagy&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/riugabachi/necrophagy/actions&#34;&gt;&lt;img src=&#34;https://github.com/riugabachi/necrophagy/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;GitHub CI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hackage.haskell.org/package/necrophagy&#34;&gt;&lt;img src=&#34;https://img.shields.io/hackage/v/necrophagy.svg?logo=haskell&#34; alt=&#34;Hackage&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/RiugaBachi/necrophagy/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-BSD--3--Clause-blue.svg?sanitize=true&#34; alt=&#34;BSD-3-Clause license&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A type-level, statically-verified Haskell embedded domain specific language (EDSL) for writing guitar tablature.&lt;/p&gt; &#xA;&lt;p&gt;Named in honor of Necrophagist, the pioneers of modern technical death metal. The music is already technical, what&#39;s a little bit of hardcore type-level programming to phase us?&lt;/p&gt; &#xA;&lt;p&gt;Currently, this library provides:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Structure: all the facilities needed to describe guitar tablature spanning multiple tracks at the type level.&lt;/li&gt; &#xA; &lt;li&gt;Playback: via midi to device 2; some dynamics have not been implemented yet sound-wise.&lt;/li&gt; &#xA; &lt;li&gt;Exporting: to midi, which can in turn be baked with a soundfont into a wav, ogg, etc. using your favorite software.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Future goals include GP5 import/export to make these tabs mesh better with the existing tablature ecosystem.&lt;/p&gt; &#xA;&lt;p&gt;Transcription workflow is heavily designed around GHCi / &lt;code&gt;cabal repl&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Try it out&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt;&amp;gt; cabal update&#xA;&amp;gt;&amp;gt; cabal install --lib necrophagy&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Check out the included example tabs to see if they typecheck; maybe even play around with the kinds and types of the various tracks:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt;&amp;gt; cabal repl necrophagy-examples&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you like what you see, you may want to try writing your own tabs based off of one of the example source files. It is as simple as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt;&amp;gt; touch MyTab.hs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-hs&#34;&gt;{-# LANGUAGE &#xA;  NoMonoLocalBinds, RebindableSyntax, DataKinds,&#xA;  OverloadedStrings, TypeOperators, TypeApplications,&#xA;  PartialTypeSignatures, NoStarIsType&#xA;#-}&#xA;&#xA;module Tab where&#xA;&#xA;import Necrophagy&#xA;&#xA;myTab :: Tablature&#xA;myTab = Tablature tabMeta tracks&#xA;  where&#xA;    tabMeta = TabMeta&#xA;      { tabAuthor = &#34;&#34;&#xA;      , tabArtist = &#34;&#34;&#xA;      , tabName   = &#34;&#34;&#xA;      , tabDifficulty = &#34;&#34;&#xA;      , tabComments   = mempty&#xA;      }&#xA;    &#xA;    -- Change this to @Strict if you want equivalence between&#xA;    -- the composition durations of all tabs enforced. &#xA;    -- Useful when dealing with polyrhythms.&#xA;    tracks = TrackList @Flexible&#xA;      [ Track &#xA;          { trackName    = &#34;Player - Instrument&#34;&#xA;          , trackProgram = DistortionGuitar `Tuned` EStandard @6&#xA;          , trackBody    = myTrack&#xA;          }&#xA;      ]&#xA;&#xA;myTrack :: _&#xA;myTrack = do&#xA;  Tempo @240&#xA;  Sig @(4/4)&#xA;  -- ...And tab away!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-hs&#34;&gt;&amp;gt;&amp;gt; ghci MyTab.hs&#xA;Tab&amp;gt; :t myTrack&#xA;Tab&amp;gt; myTab &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For audio playback via midi, the following functions are provided:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-hs&#34;&gt;Tab&amp;gt; play track -- Plays the specified track from the beginning; Ctrl+C to halt&#xA;Tab&amp;gt; at &#34;Marker name&#34; track -- Plays the track starting at specified marker; errors if marker does not exist&#xA;Tab&amp;gt; fret @(fretNumber `On` stringNumber) @(tuning) &#xA;Tab&amp;gt; -- ^ Plays the specified note on the specified string; useful while tabbing a song out&#xA;Tab&amp;gt; -- Example: fret @(17 `On` 6) @(DStandard 6)&#xA;Tab&amp;gt; -- Note: You may need to :set -XTypeApplications -XTypeOperators -xDataKinds for this&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also conveniently export via the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-hs&#34;&gt;Tab&amp;gt; exportMidi &#34;file.mid&#34; track&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Every track body is a &lt;code&gt;Composition m m&#39; s s&#39; t t&#39; u c&lt;/code&gt;. Let us break the type parameters down:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;m&lt;/code&gt; is initial (last specified) section marker.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;m&#39;&lt;/code&gt; is the final (new) section marker.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;s&lt;/code&gt; is the initial (last specified) time signature.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;s&#39;&lt;/code&gt; is the final (new) time signature.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;t&lt;/code&gt; is the initial (last specified) tempo.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;t&#39;&lt;/code&gt; is the final (new) tempo.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;u&lt;/code&gt; is the tuning, represented by a poly-kinded list of notes e.g. &lt;code&gt;(E &amp;gt; A &amp;gt; D &amp;gt; G &amp;gt; B &amp;gt; E)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;c&lt;/code&gt; is the duration of the composition, also called &#39;cumulative time&#39;. This is used for static equivalence enforcement should the &lt;code&gt;TrackList&lt;/code&gt; be parameterized over &lt;code&gt;@Strict&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;A &lt;code&gt;Composition&lt;/code&gt; has four commands:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Marker @m&lt;/code&gt;, where &lt;code&gt;m&lt;/code&gt; is a &lt;code&gt;Symbol&lt;/code&gt; (type-level string) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;(s ~ s&#39;, t ~ t&#39;)&lt;/code&gt;, since neither signature nor tempo are changed.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Tempo @n&lt;/code&gt;, specified in quarter beats per minute. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;(m ~ m&#39;, s ~ s&#39;)&lt;/code&gt;, since neither signature nor marker are changed.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Sig @(n/d)&lt;/code&gt;, where &lt;code&gt;d&lt;/code&gt; is enforced as a power of 2. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;(m ~ m&#39;, t ~ t&#39;)&lt;/code&gt;, since neither tempo nor marker are changed.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Bar $ measure&lt;/code&gt;, where measure is a &lt;code&gt;Measure&lt;/code&gt;. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;(m ~ m&#39;, t ~ t&#39;, s ~ s&#39;)&lt;/code&gt;, since neither tempo nor signature nor marker are changed.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Each measure is a &lt;code&gt;Measure o g l&lt;/code&gt;. The type parameters are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;o&lt;/code&gt; - the parsed sequence of note values (outline of durations)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;g&lt;/code&gt; - the parsed graph of notes&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;l&lt;/code&gt; - the parsed sequence of lyrics, if any&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;A &lt;code&gt;Measure&lt;/code&gt; has three commands:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;O @o&lt;/code&gt; - &lt;strong&gt;O&lt;/strong&gt;utline of note values &lt;code&gt;o&lt;/code&gt;, a poly-kinded list of enforced power-of-2 naturals &lt;code&gt;n&lt;/code&gt; each representing a beat worth &lt;code&gt;1/n&lt;/code&gt;. These can be wrapped in the &lt;code&gt;P n&lt;/code&gt; and &lt;code&gt;P&#39; n&lt;/code&gt; type constructors for dotted and double-dotted (think &lt;strong&gt;P&lt;/strong&gt; as in &lt;strong&gt;pointed&lt;/strong&gt;) notes respectively. There are also &#34;group modifiers&#34; such as &lt;code&gt;Q n&lt;/code&gt; for quadruplets, &lt;code&gt;T n&lt;/code&gt; for triplets, which will expand to the appropriate amount of note values, each with the correct duration.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;R @s @g&lt;/code&gt; - &lt;strong&gt;R&lt;/strong&gt;un of notes starting at string &lt;code&gt;s&lt;/code&gt; and specified by note graph &lt;code&gt;g&lt;/code&gt;. Strings can be skipped up and down via the &lt;code&gt;//&lt;/code&gt; &lt;code&gt;///&lt;/code&gt; &lt;code&gt;////&lt;/code&gt; &lt;code&gt;\\&lt;/code&gt; &lt;code&gt;\\\&lt;/code&gt; &lt;code&gt;\\\\&lt;/code&gt; combinators respectively, each denoting a skip of &lt;code&gt;(number of slashes - 1)&lt;/code&gt; strings. Larger skips will require the &lt;code&gt;Sk Up n g&lt;/code&gt; or &lt;code&gt;Sk Dw n g&lt;/code&gt; modifiers, which slash notation is defined in terms of internally.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;L @l&lt;/code&gt; - &lt;strong&gt;L&lt;/strong&gt;yric sequence denoted by &lt;code&gt;l&lt;/code&gt;, a polykinded sequence of &lt;code&gt;Symbol&lt;/code&gt;s. Must be less than or equal to the number of declared note values in the outline.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Measures commands are composed via the splicing&lt;/strong&gt;&lt;/em&gt; &lt;code&gt;(#)&lt;/code&gt; &lt;em&gt;&lt;strong&gt;operator.&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Notes&lt;/h3&gt; &#xA;&lt;p&gt;A parsed note is represented as &lt;code&gt;m (f `On` s)&lt;/code&gt;, with &lt;code&gt;f&lt;/code&gt; denoting the fret number and &lt;code&gt;s&lt;/code&gt; the string number. &lt;code&gt;m&lt;/code&gt; represents the modifier stack, which is the stack of dynamics that are applied to the particular note. For example, &lt;code&gt;Vr (AH (5 `On` 3))&lt;/code&gt; represents a pinch (artificial) harmonic with vibrato on fret 5 of string 3. In this case, the modifier stack &lt;code&gt;m&lt;/code&gt; refers to &lt;code&gt;Vr (AH _)&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Notes are composed via the combinators &lt;code&gt;(-)&lt;/code&gt;, &lt;code&gt;(+)&lt;/code&gt;, and &lt;code&gt;(*)&lt;/code&gt;. There are four basic notes:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;n :: Nat&lt;/code&gt;, any type-level natural representing a single fret.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;H&lt;/code&gt;, a hold/sustain on the previous declared note on the same string.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;M&lt;/code&gt;, a mute/silent/empty note; the lack of a note, in other words.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;X&lt;/code&gt;, a dead note.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;A sequence of notes is composed via &lt;code&gt;(-)&lt;/code&gt;, and additionally when inside an arbitrary pair of parentheses, marks a &lt;strong&gt;note group&lt;/strong&gt; &lt;code&gt;g&lt;/code&gt;. Note groups can be conveniently replicated via the &lt;code&gt;Rep n g&lt;/code&gt; type family. Additionally, a variety of dynamics (effects) can be applied to each note group &lt;code&gt;g&lt;/code&gt;. Dynamics can be stacked, internally referred to as a &#34;modifier stack&#34;.&lt;/p&gt; &#xA;&lt;p&gt;Chords are composed via &lt;code&gt;(+)&lt;/code&gt; or &lt;code&gt;(*)&lt;/code&gt;. &lt;code&gt;(*)&lt;/code&gt; is what you will normally use, and it reduces down in terms of &lt;code&gt;(+)&lt;/code&gt; internally. &lt;code&gt;(+)&lt;/code&gt; can only represent modifier stacks that contain an &lt;code&gt;f `On` s&lt;/code&gt; type at its root. In other words, &lt;code&gt;(+)&lt;/code&gt; requires explicitly-annotated strings on both sides. This is useful for representing small, discontinuous chords. &lt;code&gt;(*)&lt;/code&gt;, on the other hand, implicitly ascends one string at a time, which is useful for representing continuous chords.&lt;/p&gt; &#xA;&lt;h3&gt;Synonyms&lt;/h3&gt; &#xA;&lt;p&gt;Synonyms expand to note groups, potentially with chords in them. These are useful for concisely describing common measure structures. Two stock synonyms are provided:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Arp g&lt;/code&gt;, arpeggiates the group &lt;code&gt;g&lt;/code&gt;. This means each note or chord in the sequence is converted into a new chord with the correct &lt;code&gt;H `On` s&lt;/code&gt; notes to sustain prior notes in the sequence.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Rep n g&lt;/code&gt;, repeats the group &lt;code&gt;g&lt;/code&gt; &lt;code&gt;n&lt;/code&gt; times.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Dynamics&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;n ^ n&#39;&lt;/code&gt;, applies legato (hammer-on/pull-off) from fret &lt;code&gt;n&lt;/code&gt; to fret &lt;code&gt;n&#39;&lt;/code&gt;. Isomorphic to &lt;code&gt;n - Lg n&#39;&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;PM g&lt;/code&gt;, applies palm mutes to all notes in &lt;code&gt;g&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;LR g&lt;/code&gt;, applies let-ring to all notes in &lt;code&gt;g&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Vb g&lt;/code&gt;, applies vibrato to all notes in &lt;code&gt;g&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Gh g&lt;/code&gt;, applies a ghost note effect to all notes in &lt;code&gt;g&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Gr d t n g&lt;/code&gt;, applies a grace note effect with grace dynamic &lt;code&gt;d&lt;/code&gt; (&lt;code&gt;&#39;On&lt;/code&gt; or &lt;code&gt;&#39;Pre&lt;/code&gt;), duration &lt;code&gt;t&lt;/code&gt; (note value/power of two), and initial fret &lt;code&gt;n&lt;/code&gt; to all notes in &lt;code&gt;g&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Sl g&lt;/code&gt;, applies sliding to all notes in &lt;code&gt;g&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Bd c s&lt;/code&gt;, applies a bend with curve &lt;code&gt;c&lt;/code&gt; to all notes in &lt;code&gt;g&lt;/code&gt;. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;More on this below.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;NHarm g&lt;/code&gt;, &lt;code&gt;AHarm g&lt;/code&gt;, &lt;code&gt;SHarm g&lt;/code&gt;, &lt;code&gt;THarm g&lt;/code&gt; applies natural/artificial/semi-/tap harmonics to all notes in &lt;code&gt;g&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Bend Curves&lt;/h4&gt; &#xA;&lt;p&gt;Bend curves are denoted by a type-level list of bend curve vertices &lt;code&gt;(-@-)&lt;/code&gt;. Each bend curve vertex has the form &lt;code&gt;s -@- t&lt;/code&gt;, where &lt;code&gt;s&lt;/code&gt; is a fraction representing how many steps (tones) the string is bent at some particular point in time &lt;code&gt;t&lt;/code&gt;, which is in turn also a fraction, but with a maximum value of &lt;code&gt;(1/1)&lt;/code&gt;, relative to the total duration of the note. As an example, the bend curve &lt;code&gt;BenRelC f&lt;/code&gt; is defined as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-hs&#34;&gt;type BenRelC f =&#xA;  &#39;[ (0/4) -@- (0 / 12)&#xA;   , f     -@- (3 / 12)&#xA;   , f     -@- (6 / 12)&#xA;   , (0/4) -@- (9 / 12)&#xA;   ]  &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Four stock bend curves are provided for common use cases:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;BenC f&lt;/code&gt; - a regular bend&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;BenRelC f&lt;/code&gt; - bend then release&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;BenRelBenC f&lt;/code&gt; - bend, release, and bend again&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;PreRelC f&lt;/code&gt; - prebend and release&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The parameter &lt;code&gt;f&lt;/code&gt; denotes a fraction standing in for the maximum &lt;code&gt;s&lt;/code&gt; value of the vertices in the curve.&lt;/p&gt; &#xA;&lt;h3&gt;Programs &amp;amp; Tunings&lt;/h3&gt; &#xA;&lt;p&gt;A &#39;program&#39; in the context of Necrophagy refers to a tuned instrument, as per MIDI terminology. Programs are constructed via the &lt;code&gt;Tuned :: Instrument -&amp;gt; p -&amp;gt; Program p&lt;/code&gt; constructor, where &lt;code&gt;Instrument&lt;/code&gt; is any valid MIDI instrument (re-exported from the &lt;code&gt;midi&lt;/code&gt; package).&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;p&lt;/code&gt; refers to a specialized tuning name. All tuning names have the kind &lt;code&gt;Nat -&amp;gt; Type&lt;/code&gt;; in other words, they are parameterized over a string count. Each &lt;em&gt;specialized&lt;/em&gt; tuning name against a string count may have a &lt;code&gt;Tuning&lt;/code&gt; instance, which is a poly-kinded list of notes, each specialized to a particular octave number. Notes are defined by the following lifted data declaration:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-hs&#34;&gt;data Note (n :: Nat)&#xA;  = Ab | A | Bb | B | C | Db | D | Eb | E | F | Gb | G  &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;As an example, the following is the definition of the provided &lt;code&gt;EStandard&lt;/code&gt; tuning name and &lt;code&gt;EStandard 6&lt;/code&gt; tuning instance:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-hs&#34;&gt;data EStandard (n :: Nat) = EStandard&#xA;&#xA;type instance Tuning (EStandard 6)&#xA;  = &#39;E @2&#xA;  &amp;gt; &#39;A @3&#xA;  &amp;gt; &#39;D @3&#xA;  &amp;gt; &#39;G @3&#xA;  &amp;gt; &#39;B @4&#xA;  &amp;gt; &#39;E @4&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;necrophagy&lt;/code&gt; exports and re-exports all the types you need to create your own tunings, or extend existing tuning names to other string counts, in a similar fashion.&lt;/p&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;p&gt;The core of this library was largely written over the course of a single day with some minor follow-up additions in terms of dynamics modifiers, better type errors, et cetera. In closing I would like to pay homage to Necrophagist, &#39;92 - &#39;09, for supplying me with some nostalgic tunes to work against while getting this giant type tetris puzzle just right. I suppose nothing would be more appropriate to conclude this readme with than &lt;a href=&#34;https://www.youtube.com/watch?v=Gkh33uVlST0&#34;&gt;a recent fan re-recording of an unreleased Necrophagist song&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>