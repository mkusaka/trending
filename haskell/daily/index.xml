<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Haskell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-17T01:45:51Z</updated>
  <subtitle>Daily Trending of Haskell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Simspace/postgresql-tx</title>
    <updated>2022-08-17T01:45:51Z</updated>
    <id>tag:github.com,2022-08-17:/Simspace/postgresql-tx</id>
    <link href="https://github.com/Simspace/postgresql-tx" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;postgresql-tx&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://travis-ci.org/Simspace/postgresql-tx&#34;&gt;&lt;img src=&#34;https://img.shields.io/travis/Simspace/postgresql-tx.svg?logo=travis&#34; alt=&#34;Build&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Simspace/island</title>
    <updated>2022-08-17T01:45:51Z</updated>
    <id>tag:github.com,2022-08-17:/Simspace/island</id>
    <link href="https://github.com/Simspace/island" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;strong&gt;(this is a work in progress, none of what is described below is necessarily implemented yet)&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Island&lt;/h1&gt; &#xA;&lt;p&gt;(starting from scratch)&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>fimad/Igor</title>
    <updated>2022-08-17T01:45:51Z</updated>
    <id>tag:github.com,2022-08-17:/fimad/Igor</id>
    <link href="https://github.com/fimad/Igor" rel="alternate"></link>
    <summary type="html">&lt;p&gt;All files relating to my senior project.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Igor&lt;/h1&gt; &#xA;&lt;p&gt;The implementation of a gadget-based metamorphic engine inspired by return-oriented programming techniques and the Frankenstein metamorphic system [1]. To quote from the abstract of my paper:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;This paper presents the design and implementation of a metamorphic engine intended to be capable of evading current commercial classification methods, as well as several promising techniques from current anti-malware research. The resulting system is able to achieve high levels of variation among the instances generated while at the same time creating programs that share key statistical properties with benign programs. The engine achieves this by reframing malware obfuscation as a combined compiler and search problem and is heavily influenced by developments in the field of return-oriented programming. Given a semantic blue print of a program the engine pieces together blocks of random bytes to create the final executable. By controlling the distribution of the random bytes used to generate the executable, the engine is able to influence statistical properties of the resulting executables. To achieve the high degree of variation necessary to evade commercial detection techniques, the process of piecing together and choosing random bytes is performed nondeterministically.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;The engine is written in Haskell and contains fairly decent Haddock documentation throughout.&lt;/p&gt; &#xA;&lt;p&gt;[1] &lt;a href=&#34;https://www.usenix.org/conference/woot12/frankenstein-stitching-malware-benign-binaries&#34;&gt;https://www.usenix.org/conference/woot12/frankenstein-stitching-malware-benign-binaries&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>