<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Haskell Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-03-03T01:44:47Z</updated>
  <subtitle>Weekly Trending of Haskell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>IntersectMBO/cardano-api</title>
    <updated>2024-03-03T01:44:47Z</updated>
    <id>tag:github.com,2024-03-03:/IntersectMBO/cardano-api</id>
    <link href="https://github.com/IntersectMBO/cardano-api" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Cardano API&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Overview of the &lt;code&gt;cardano-api&lt;/code&gt; repository&lt;/h2&gt; &#xA;&lt;p&gt;Integration of the &lt;a href=&#34;https://github.com/IntersectMBO/cardano-ledger&#34;&gt;&lt;code&gt;ledger&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://github.com/IntersectMBO/ouroboros-consensus&#34;&gt;&lt;code&gt;consensus&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://github.com/IntersectMBO/ouroboros-network/tree/master/ouroboros-network&#34;&gt;networking&lt;/a&gt; repositories.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/IntersectMBO/cardano-api/main/CONTRIBUTING.md&#34;&gt;Contributing guide&lt;/a&gt; for how to contribute to this project.&lt;/p&gt; &#xA;&lt;h2&gt;Core maintainers&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Jimbo4350&#34;&gt;Jordan Millar&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/newhoggy&#34;&gt;John Ky&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/carbolymer&#34;&gt;Mateusz Gałażyn&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Development documentation can be found in &lt;a href=&#34;https://github.com/input-output-hk/cardano-node-wiki/wiki&#34;&gt;Cardano Node Wiki&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Haddock documentation is available at: &lt;a href=&#34;https://cardano-api.cardano.intersectmbo.org/&#34;&gt;https://cardano-api.cardano.intersectmbo.org/&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>JLimperg/backup-rotate</title>
    <updated>2024-03-03T01:44:47Z</updated>
    <id>tag:github.com,2024-03-03:/JLimperg/backup-rotate</id>
    <link href="https://github.com/JLimperg/backup-rotate" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Simple script to rotate your hourly/daily/weekly or custom backups&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;backup-rotate&lt;/h1&gt; &#xA;&lt;p&gt;NOTE: Please test this software carefully in your specific environment before trusting it with your backups.&lt;/p&gt; &#xA;&lt;h2&gt;Synopsis&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;backup-rotate&lt;/code&gt; program is a simple script that can be used to keep backups in specified intervals, such as hourly, daily and weekly. It is intended to be used together with a utility like &lt;a href=&#34;http://www.rsnapshot.org/&#34;&gt;rsnapshot&lt;/a&gt; that regularly creates (incremental) backups. Its advantage over the builtin rsnapshot rotation mechanism is that it handles &#39;missed&#39; backups (where the computer was not turned on when the backup would have been made) gracefully.&lt;/p&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;backup-rotate&lt;/code&gt; must be configured by editing some constants in the main source file, &lt;code&gt;src/BackupRotate.hs&lt;/code&gt;. In particular:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;backupRoot&lt;/code&gt; is the directory in which all your backups are stored.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;dateFormat&lt;/code&gt; is the format used for parsing backup dates. See below for where this format is used.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;intervals&lt;/code&gt; is a definition of the time intervals for which backups should be kept. Per default this is &lt;code&gt;hourly&lt;/code&gt;, &lt;code&gt;daily&lt;/code&gt; and &lt;code&gt;weekly&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The following instructions assume that you know some basic Haskell.&lt;/p&gt; &#xA;&lt;h3&gt;Intervals&lt;/h3&gt; &#xA;&lt;p&gt;For each interval you define, backups from a customisable number of instances of the interval are kept. For example, if you define a weekly interval with a &lt;code&gt;keep&lt;/code&gt; property of &lt;code&gt;5&lt;/code&gt;, then &lt;code&gt;backup-rotate&lt;/code&gt; will try to keep the first backups of the past 5 weeks.&lt;/p&gt; &#xA;&lt;p&gt;Each interval has the following properties:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;iName&lt;/code&gt;: The interval&#39;s name. This will be used as a prefix when creating backup directories. For instance, backups from the &lt;code&gt;weekly&lt;/code&gt; interval will be named &lt;code&gt;weekly.0&lt;/code&gt;, &lt;code&gt;weekly.1&lt;/code&gt; and so forth.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;iKeep&lt;/code&gt;: This property determines how many backups are kept for the interval.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;iPredicate&lt;/code&gt;: A function that takes two backups and returns &lt;code&gt;True&lt;/code&gt; if they are both within one instance of the interval, &lt;code&gt;False&lt;/code&gt; otherwise. For example, the &lt;code&gt;iPredicate&lt;/code&gt; for the &lt;code&gt;weekly&lt;/code&gt; interval should return &lt;code&gt;True&lt;/code&gt; if two backups were created in the same week of the same year. The default configuration uses a helper function that should be more or less self-explanatory.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Intervals are ordered hierarchically, with the first having the lowest precedence. If two intervals claim the same backup for themselves, the one with higher precedence (i.e. defined after the other) will get it. For instance, in the default configuration a directory will only be renamed to &lt;code&gt;hourly.#&lt;/code&gt; if both the &lt;code&gt;weekly&lt;/code&gt; and &lt;code&gt;daily&lt;/code&gt; intervals already have enough backups to fulfill their &lt;code&gt;keep&lt;/code&gt; limit.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;backup-rotate&lt;/code&gt; assumes the following directory structure:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;backupRoot&#xA;|-- daily.0&#xA;|   |-- date&#xA;|   |-- dir1&#xA;|   `-- dir2&#xA;|-- hourly.0&#xA;|   |-- date&#xA;|   |-- dir1&#xA;|   `-- dir2&#xA;|-- hourly.1&#xA;|   |-- date&#xA;|   |-- dir1&#xA;|   `-- dir2&#xA;|-- weekly.0&#xA;|   |-- date&#xA;|   |-- dir1&#xA;`   `-- dir2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Every backup directory (i.e. every directory that matches an interval name with a positive integer appended) must contain a plain text file named &lt;code&gt;date&lt;/code&gt; whose sole content is the date and time on which the backup was created. The date must be given in the format determined by &lt;code&gt;dateFormat&lt;/code&gt;, per default this is &lt;code&gt;%Y-%m-%d %H:%M&lt;/code&gt; (i.e. &lt;code&gt;2013-02-01 22:00&lt;/code&gt;). Note that your backup program probably does not create such a file automatically.&lt;/p&gt; &#xA;&lt;p&gt;Given this directory structure, &lt;code&gt;backup-rotate&lt;/code&gt; will gather all the backup directories and rename them according to the intervals you&#39;ve defined (see &#39;Configuration&#39; above).&lt;/p&gt; &#xA;&lt;p&gt;When the program is finished renaming, all backups that have not been renamed (i.e. should not be kept) are permanently deleted.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;The following steps assume that you&#39;ve got the Haskell Platform installed. The script has been created with version 2012.4.0.0 but should run on older versions as well. No GHC-specific extensions have been used.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Clone the Github repo:&lt;/p&gt; &lt;pre&gt;&lt;code&gt; $ git clone git://github.com/JLimperg/backup-rotate.git&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Customise the constants in &lt;code&gt;src/BackupRotate.hs&lt;/code&gt; to fit your system.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Compile and install the program. The following command will install the &lt;code&gt;backup-rotate&lt;/code&gt; binary under &lt;code&gt;$HOME/bin/&lt;/code&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code&gt; $ cd backup-rotate&#xA; $ cabal install --prefix=$HOME --user&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run &lt;code&gt;backup-rotate&lt;/code&gt; every time you&#39;ve finished an hourly backup.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Known Issues and Shortcomings&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;The script does no error handling whatsoever, which means that it will fail immediately if anything I/O-related goes wrong. (On the upside, if your backups are messed up, it probably won&#39;t mess them up any further.) The one exception to this rule is that if a &lt;code&gt;date&lt;/code&gt; file cannot be read, the script will completely ignore the corresponding backup, assuming that it is defect in some way. This means that the backup may get overridden while renaming other backup directories.&lt;/li&gt; &#xA; &lt;li&gt;The script is currently not unit tested.&lt;/li&gt; &#xA; &lt;li&gt;The script can only be customised by editing constants in the source code and recompiling. A proper CLI would be more practical.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This program is made available under the MIT License, a copy of which can be found in the LICENSE file.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>MercuryTechnologies/opentelemetry-plugin</title>
    <updated>2024-03-03T01:44:47Z</updated>
    <id>tag:github.com,2024-03-03:/MercuryTechnologies/opentelemetry-plugin</id>
    <link href="https://github.com/MercuryTechnologies/opentelemetry-plugin" rel="alternate"></link>
    <summary type="html">&lt;p&gt;GHC plugin for open telemetry&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;code&gt;opentelemetry-plugin&lt;/code&gt; - a GHC plugin for open telemetry&lt;/h1&gt; &#xA;&lt;p&gt;This GHC plugin lets you export granular open telemetry metrics for your Haskell builds. Specifically, this creates a trace with:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;One span for each module build&lt;/li&gt; &#xA; &lt;li&gt;One sub-span for each phase of each module build&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/1313787/272098736-1d1e4e7b-4122-45be-8f7b-e74f2ccddab0.png&#34; alt=&#34;Example trace generated by this GHC plugin&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Note that due to limitations of GHC&#39;s &lt;code&gt;Plugin&lt;/code&gt; interface the root span generated by this plugin will have a duration of 0 (by default) and will not be the correct duration (for the entire build). However, the &lt;code&gt;Plugin&lt;/code&gt; will reuse any surrounding span inherited via &lt;a href=&#34;https://www.w3.org/TR/trace-context/&#34;&gt;the standard &lt;code&gt;TRACEPARENT&lt;/code&gt; and &lt;code&gt;TRACESTATE&lt;/code&gt; environment variables&lt;/a&gt;, so if you wrap your build in something like the &lt;code&gt;hotel&lt;/code&gt; executable (from &lt;a href=&#34;https://github.com/parsonsmatt/hotel-california&#34;&gt;the &lt;code&gt;hotel-california&lt;/code&gt; package&lt;/a&gt;) then you will get the correct duration for the outermost span.&lt;/p&gt; &#xA;&lt;p&gt;This plugin also supports &lt;a href=&#34;https://www.w3.org/TR/baggage/&#34;&gt;the standard &lt;code&gt;BAGGAGE&lt;/code&gt; environment variable&lt;/a&gt;, too.&lt;/p&gt; &#xA;&lt;p&gt;To use this plugin:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;add the &lt;code&gt;opentelemetry-plugin&lt;/code&gt; package as a build dependency of your package&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;add &lt;code&gt;ghc-options: -plugin-package opentelemetry-plugin -fplugin OpenTelemetry.Plugin&lt;/code&gt; to your package&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;configure the appropriate open telemetry environment variables&lt;/p&gt; &lt;p&gt;In other words, you&#39;ll probably want to set at least &lt;code&gt;OTEL_EXPORTER_OTLP_ENDPOINT&lt;/code&gt; and maybe other environment variables depending on your open telemetry backend. For example, if you&#39;re using &lt;a href=&#34;https://docs.honeycomb.io/getting-data-in/opentelemetry-overview/#using-the-honeycomb-opentelemetry-endpoint&#34;&gt;Honeycomb&lt;/a&gt; then you&#39;d also want to set &lt;code&gt;OTEL_EXPORTER_OTLP_HEADERS&lt;/code&gt; and &lt;code&gt;OTEL_SERVICE_NAME&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Then any time you build your project the build will export open telemetry metrics. The overhead of metrics export is negligible.&lt;/p&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;p&gt;This repository uses Nix for development. You can build this package entirely using Nix for a specific version of &lt;code&gt;ghc&lt;/code&gt; by running:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ShellSession&#34;&gt;$ nix develop .#ghc${MAJOR}${MINOR}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;… replacing &lt;code&gt;${MAJOR}&lt;/code&gt; and &lt;code&gt;${MINOR}&lt;/code&gt; with the major and minor version of the &lt;code&gt;ghc&lt;/code&gt; that you&#39;re using. For example, if you&#39;re using GHC 9.4, then you&#39;d run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ShellSession&#34;&gt;$ nix build .#ghc94&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to develop interactively using Cabal inside of a Nix shell, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ShellSession&#34;&gt;$ nix develop .#ghc${MAJOR}${MINOR}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once you are inside that Nix shell, then you can use &lt;code&gt;cabal&lt;/code&gt; commands, like &lt;code&gt;cabal build&lt;/code&gt; or &lt;code&gt;cabal repl&lt;/code&gt;. You can also use &lt;code&gt;ghcid&lt;/code&gt; or launch your favorite IDE from inside this shell.&lt;/p&gt;</summary>
  </entry>
</feed>