<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Haskell Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-03-24T01:46:42Z</updated>
  <subtitle>Weekly Trending of Haskell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>smallhadroncollider/taskell</title>
    <updated>2024-03-24T01:46:42Z</updated>
    <id>tag:github.com,2024-03-24:/smallhadroncollider/taskell</id>
    <link href="https://github.com/smallhadroncollider/taskell" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Command-line Kanban board/task manager with support for Trello boards and GitHub projects&lt;/p&gt;&lt;hr&gt;&lt;blockquote&gt; &#xA; &lt;p&gt;I&#39;m going to be taking a break from development of Taskell for a while. Trying to do it alongside my day job was proving a bit much. Feel free to continue to submit issues, but I won&#39;t be able to work on any of them immediately. Pull requests also welcome. Thanks for understanding 🙂&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h1&gt;Taskell&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/smallhadroncollider/taskell&#34;&gt;&lt;img src=&#34;https://travis-ci.org/smallhadroncollider/taskell.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A CLI kanban board/task manager for Mac and Linux&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Per project task lists&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;vim&lt;/code&gt; style key-bindings&lt;/li&gt; &#xA; &lt;li&gt;Stored using Markdown&lt;/li&gt; &#xA; &lt;li&gt;Clean diffs for easy version control&lt;/li&gt; &#xA; &lt;li&gt;Support for sub-tasks and due dates&lt;/li&gt; &#xA; &lt;li&gt;Trello board imports&lt;/li&gt; &#xA; &lt;li&gt;GitHub project imports&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.buymeacoffee.com/shc&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://www.buymeacoffee.com/assets/img/custom_images/orange_img.png&#34; alt=&#34;Buy Me A Coffee&#34; style=&#34;height: 41px !important;width: 174px !important;box-shadow: 0px 3px 2px 0px rgba(190, 190, 190, 0.5) !important;-webkit-box-shadow: 0px 3px 2px 0px rgba(190, 190, 190, 0.5) !important;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Follow &lt;a href=&#34;https://twitter.com/taskellcli&#34;&gt;@taskellcli&lt;/a&gt; on Twitter for updates&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://taskell.app/img/demo.gif&#34; alt=&#34;Demo&#34;&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/smallhadroncollider/taskell/master/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/smallhadroncollider/taskell/master/#using-taskell&#34;&gt;Using Taskell&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/smallhadroncollider/taskell/master/#options&#34;&gt;Options&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/smallhadroncollider/taskell/master/#storage&#34;&gt;Storage&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/smallhadroncollider/taskell/master/#importing-trello-boards&#34;&gt;Importing Trello Boards&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/smallhadroncollider/taskell/master/#importing-github-projects&#34;&gt;Importing GitHub Projects&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/smallhadroncollider/taskell/master/#configuration&#34;&gt;Configuration&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/smallhadroncollider/taskell/master/#controls&#34;&gt;Controls&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/smallhadroncollider/taskell/master/#due-dates&#34;&gt;Due Dates&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/smallhadroncollider/taskell/master/#theming&#34;&gt;Theming&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/smallhadroncollider/taskell/master/#roadmap&#34;&gt;Roadmap&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/smallhadroncollider/taskell/master/#contributing&#34;&gt;Contributing&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/smallhadroncollider/taskell/master/#core-contributors&#34;&gt;Core Contributors&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/smallhadroncollider/taskell/master/#acknowledgements&#34;&gt;Acknowledgements&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Homebrew (Mac)&lt;/h3&gt; &#xA;&lt;p&gt;You can install Taskell on your Mac using &lt;a href=&#34;https://brew.sh&#34;&gt;Homebrew&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew install taskell&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Debian/Ubuntu&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/smallhadroncollider/taskell/releases&#34;&gt;A &lt;code&gt;.deb&lt;/code&gt; package is available for Debian/Ubuntu&lt;/a&gt;. Download it and install with &lt;code&gt;dpkg -i &amp;lt;package-name&amp;gt;&lt;/code&gt;. You may also need to install the &lt;code&gt;libtinfo5&lt;/code&gt; package (&lt;code&gt;sudo apt install libtinfo5&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;h3&gt;Fedora&lt;/h3&gt; &#xA;&lt;p&gt;Not officially supported, but try running &lt;code&gt;sudo dnf install ncurses-compat-libs&lt;/code&gt; then download and run the binary as described below. If that doesn&#39;t work you may need to build from scratch (&lt;a href=&#34;https://raw.githubusercontent.com/smallhadroncollider/taskell/master/#cabal&#34;&gt;Cabal&lt;/a&gt;/&lt;a href=&#34;https://raw.githubusercontent.com/smallhadroncollider/taskell/master/#stack&#34;&gt;Stack&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;h3&gt;Binaries&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/smallhadroncollider/taskell/releases&#34;&gt;A binary is available for Mac and Debian/Ubuntu&lt;/a&gt;. Download it and copy it to a directory in your &lt;code&gt;$PATH&lt;/code&gt; (e.g. &lt;code&gt;/usr/local/bin&lt;/code&gt; or &lt;code&gt;/usr/bin&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;h3&gt;Cabal&lt;/h3&gt; &#xA;&lt;p&gt;You can install Taskell with &lt;code&gt;cabal&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cabal install taskell&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Make sure you run &lt;code&gt;cabal update&lt;/code&gt; if you haven&#39;t run it recently.&lt;/p&gt; &#xA;&lt;h3&gt;Stack&lt;/h3&gt; &#xA;&lt;p&gt;If none of the above options work you can build taskell using &lt;a href=&#34;https://docs.haskellstack.org/en/stable/README/&#34;&gt;Stack&lt;/a&gt;. First &lt;a href=&#34;https://docs.haskellstack.org/en/stable/README/#how-to-install&#34;&gt;install Stack on your machine&lt;/a&gt;. Then clone the repo and run &lt;code&gt;stack build &amp;amp;&amp;amp; stack install&lt;/code&gt;: this will build taskell and then install it in &lt;code&gt;~/.local/bin&lt;/code&gt; (so make sure that directory is in your &lt;code&gt;$PATH&lt;/code&gt;). Building from scratch can take a long time and occasionally doesn&#39;t work the first time (if this happens try running it again).&lt;/p&gt; &#xA;&lt;h2&gt;Using Taskell&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;taskell&lt;/code&gt;: will use &lt;code&gt;taskell.md&lt;/code&gt; in the pwd - offers to create if not found&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;taskell filename.md&lt;/code&gt;: will use &lt;code&gt;filename.md&lt;/code&gt; in the pwd - offers to create if not found&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Options&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;-h&lt;/code&gt;: show help&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-v&lt;/code&gt;: show version number&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-t &amp;lt;trello-board-id&amp;gt;&lt;/code&gt;: import a Trello board (&lt;a href=&#34;https://raw.githubusercontent.com/smallhadroncollider/taskell/master/#importing-trello-boards&#34;&gt;see below&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-g &amp;lt;github-project-id&amp;gt;&lt;/code&gt;: import a GitHub project (&lt;a href=&#34;https://raw.githubusercontent.com/smallhadroncollider/taskell/master/#importing-github-projects&#34;&gt;see below&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Tips&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If you&#39;re using a simple two-column &#34;To Do&#34; and &#34;Done&#34; then use the space bar to mark an item as complete while staying in the &#34;To Do&#34; list. If you&#39;re using a more complicated column setup then you will want to use &lt;code&gt;H&lt;/code&gt;/&lt;code&gt;L&lt;/code&gt; to move tasks between columns.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Storage&lt;/h3&gt; &#xA;&lt;p&gt;By default stores in a &lt;code&gt;taskell.md&lt;/code&gt; file in the working directory:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-md&#34;&gt;## To Do&#xA;&#xA;- Do this&#xA;&#xA;## Done&#xA;&#xA;- Do That&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Importing Trello Boards&lt;/h3&gt; &#xA;&lt;p&gt;Taskell includes the ability to fetch a Trello board and store it as local taskell file.&lt;/p&gt; &#xA;&lt;h4&gt;Authentication&lt;/h4&gt; &#xA;&lt;p&gt;Before fetching a Trello board, you&#39;ll need to create an access token and store it in &lt;code&gt;~/.taskell/config.ini&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;First, &lt;a href=&#34;https://trello.com/1/authorize?expiration=never&amp;amp;name=taskell&amp;amp;scope=read&amp;amp;response_type=token&amp;amp;key=80dbcf6f88f62cc5639774e13342c20b&#34;&gt;get a Trello token&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Then add it to &lt;code&gt;~/.taskell/config.ini&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;[trello]&#xA;token = &amp;lt;your-trello-access-token&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can revoke access tokens &lt;a href=&#34;https://trello.com/my/account&#34;&gt;on Trello&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Fetching&lt;/h4&gt; &#xA;&lt;p&gt;Running the following would pull down the Trello board with the ID &#34;TRe1l0iD&#34; into a file named &lt;code&gt;trello.md&lt;/code&gt; and then open taskell with that file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;taskell -t TRe1l0iD trello.md&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Make sure you have permission to view the Trello board, otherwise you&#39;ll get an error.&lt;/p&gt; &#xA;&lt;h4&gt;Limitations&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;This is a one-off procedure: it effectively imports a Trello board to taskell&lt;/li&gt; &#xA; &lt;li&gt;Currently imports: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Lists&lt;/li&gt; &#xA;   &lt;li&gt;Cards&lt;/li&gt; &#xA;   &lt;li&gt;Card descriptions&lt;/li&gt; &#xA;   &lt;li&gt;Card due dates&lt;/li&gt; &#xA;   &lt;li&gt;Card checklists (merged into one list per card)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Importing GitHub Projects&lt;/h3&gt; &#xA;&lt;p&gt;Taskell includes the ability to fetch a GitHub project and store it as local taskell file.&lt;/p&gt; &#xA;&lt;h4&gt;Authentication&lt;/h4&gt; &#xA;&lt;p&gt;Before fetching a GitHub board, you&#39;ll need to create a person access token and store it in &lt;code&gt;~/.taskell/config.ini&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;First, &lt;a href=&#34;https://github.com/settings/tokens/new&#34;&gt;get a GitHub personal access token&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Make sure to tick the &lt;code&gt;repo&lt;/code&gt; scope&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Then add it to &lt;code&gt;~/.taskell/config.ini&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;[github]&#xA;token = &amp;lt;your-github-personal-access-token&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can delete personal access tokens &lt;a href=&#34;https://github.com/settings/tokens/&#34;&gt;on GitHub&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Fetching&lt;/h4&gt; &#xA;&lt;p&gt;Projects can belong to &lt;a href=&#34;https://raw.githubusercontent.com/smallhadroncollider/taskell/master/#organisations&#34;&gt;organisations&lt;/a&gt; or to &lt;a href=&#34;https://raw.githubusercontent.com/smallhadroncollider/taskell/master/#repositories&#34;&gt;individual repositories&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Make sure you have permission to view the GitHub project, otherwise you&#39;ll get an error.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://taskell.app/img/github.gif&#34; alt=&#34;GitHub Demo&#34;&gt;&lt;/p&gt; &#xA;&lt;h5&gt;Organisations&lt;/h5&gt; &#xA;&lt;p&gt;To import a project for an organisation called &#34;test-org&#34; you would use the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;taskell -g orgs/test-org github.md&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This would then show you a list of possible projects to import. Enter the number of the project you wish to import.&lt;/p&gt; &#xA;&lt;h5&gt;Repositories&lt;/h5&gt; &#xA;&lt;p&gt;To import a project for the repository &#34;test-repo&#34; for the user &#34;test-user&#34;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;taskell -g repos/test-user/test-repo github.md&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This would then show you a list of possible projects to import. Enter the number of the project you with to import.&lt;/p&gt; &#xA;&lt;h4&gt;Limitations&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;This is a one-off procedure: it effectively imports a GitHub project to taskell&lt;/li&gt; &#xA; &lt;li&gt;Currently imports: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Columns&lt;/li&gt; &#xA;   &lt;li&gt;Cards&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;Taskell uses the &lt;a href=&#34;https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html&#34;&gt;XDG Base Directory Specification&lt;/a&gt;, so it will look for an &lt;code&gt;$XDG_CONFIG_HOME&lt;/code&gt; environmental variable and create a directory named &lt;code&gt;taskell&lt;/code&gt; inside it. If this variable is not found it will create the &lt;code&gt;taskell&lt;/code&gt; directory in &lt;code&gt;~/.config/&lt;/code&gt;. (If you&#39;ve been using Taskell since &amp;lt;= 1.3.5 then it will be in a &lt;code&gt;~/.taskell&lt;/code&gt; directory, feel free to move this to the XDG directory.)&lt;/p&gt; &#xA;&lt;p&gt;Taskell has a &lt;code&gt;config.ini&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;[general]&#xA;; the default filename to create/look for&#xA;filename = taskell.md&#xA;&#xA;[layout]&#xA;; top/bottom padding for the taskell window&#xA;padding = 1&#xA;&#xA;; the width of a column&#xA;column_width = 30&#xA;&#xA;; the padding of a column&#xA;; for both sides, so 3 would give a gap of 6 between two columns&#xA;column_padding = 3&#xA;&#xA;; the icon to use when a task has a description&#xA;; the default icon may not display on all systems&#xA;description_indicator = &#34;≡&#34;&#xA;&#xA;; whether to show the statusbar&#xA;statusbar = true&#xA;&#xA;[markdown]&#xA;; the markdown to start a title line with&#xA;title = &#34;##&#34;&#xA;&#xA;; the markdown to start a task line with&#xA;task = &#34;-&#34;&#xA;&#xA;; the markdown to start a sub-task line with&#xA;subtask = &#34;    *&#34;&#xA;&#xA;; by default times are stored in UTC to avoid diffs if you&#xA;; change locations. Set this to true if it will always be&#xA;; edited in the same timezone&#xA;localTimes = false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Make sure that the values in the &lt;code&gt;[markdown]&lt;/code&gt; section are surrounded by &lt;strong&gt;double&lt;/strong&gt;-quotes.&lt;/p&gt; &#xA;&lt;p&gt;If you always use sub-tasks, an alternative setup for &lt;code&gt;[markdown]&lt;/code&gt; might be:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;[markdown]&#xA;title = &#34;##&#34;&#xA;&#xA;; each task is a header&#xA;task = &#34;###&#34;&#xA;&#xA;; subtasks are list items under the header&#xA;subtask = &#34;-&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt;: currently if you change your &lt;code&gt;[markdown]&lt;/code&gt; settings any older files stored with different settings will not be readable.&lt;/p&gt; &#xA;&lt;h3&gt;Template&lt;/h3&gt; &#xA;&lt;p&gt;You can edit the &lt;code&gt;template.md&lt;/code&gt; config file to change what a new taskell file looks like.&lt;/p&gt; &#xA;&lt;h3&gt;Controls&lt;/h3&gt; &#xA;&lt;p&gt;You can edit keyboard bindings in the &lt;code&gt;bindings.ini&lt;/code&gt; config file.&lt;/p&gt; &#xA;&lt;p&gt;The default bindings can be found in &lt;a href=&#34;https://github.com/smallhadroncollider/taskell/raw/master/templates/bindings.ini&#34;&gt;&lt;code&gt;bindings.ini&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Available special keys: &lt;code&gt;&amp;lt;Space&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;Enter&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;Backspace&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;Left&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;Right&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;Up&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;Down&amp;gt;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;On a Mac you can use the &lt;code&gt;alt&lt;/code&gt; characters: e.g. &lt;code&gt;quit = œ&lt;/code&gt; is equivalent to &lt;code&gt;alt+q&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You shouldn&#39;t try to assign the &lt;code&gt;1&lt;/code&gt;-&lt;code&gt;9&lt;/code&gt; keys, as it will not overwrite the default behaviour.&lt;/p&gt; &#xA;&lt;h4&gt;Due Dates&lt;/h4&gt; &#xA;&lt;p&gt;Due dates must be input with the format &lt;code&gt;YYYY-MM-DD&lt;/code&gt; or &lt;code&gt;YYYY-MM-DD HH:MM&lt;/code&gt;. The date will not be accepted otherwise.&lt;/p&gt; &#xA;&lt;p&gt;You can also pass in relative times such as &lt;code&gt;1w 2d&lt;/code&gt; (for 1 week and 2 days). Valid units are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;s&lt;/code&gt; (seconds)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;m&lt;/code&gt; (minutes)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;h&lt;/code&gt; (hours)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;d&lt;/code&gt; (days)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;w&lt;/code&gt; (weeks)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;These can be used in any combination. If the time is made up only of days and/or weeks, the due date will not include a time.&lt;/p&gt; &#xA;&lt;p&gt;By default times are stored in the Markdown file as UTC. If you would like local times (and are unlikely to open the file in lots of different timezones) then you can set &lt;code&gt;localTimes&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; in the &lt;code&gt;markdown&lt;/code&gt; section of the &lt;a href=&#34;https://raw.githubusercontent.com/smallhadroncollider/taskell/master/#configuration&#34;&gt;config file&lt;/a&gt;. If you have this setting on and you change timezone, you&#39;ll get a diff on all your times the next time you make changes to the file.&lt;/p&gt; &#xA;&lt;h3&gt;Theming&lt;/h3&gt; &#xA;&lt;p&gt;You can edit Taskell&#39;s colour-scheme by editing &lt;code&gt;theme.ini&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;[other]&#xA;&#xA;; list title&#xA;title.fg = green&#xA;&#xA;; status bar&#xA;statusBar.bg = blue&#xA;statusBar.fg = black&#xA;&#xA;; current list title&#xA;titleCurrent.fg = blue&#xA;&#xA;; current task&#xA;taskCurrent.fg = magenta&#xA;&#xA;; subtasks&#xA;; selected&#xA;subtaskCurrent.fg = magenta&#xA;; incomplete&#xA;subtaskIncomplete.fg = blue&#xA;; complete&#xA;subtaskComplete.fg = yellow&#xA;&#xA;; disabled&#xA;disabled.fg = yellow&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also change the background and default text colour:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;[default]&#xA;&#xA;; the app background colour&#xA;default.bg = brightBlack&#xA;&#xA;; the app text colour&#xA;default.fg = white&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The available colours are: &lt;code&gt;black&lt;/code&gt;, &lt;code&gt;red&lt;/code&gt;, &lt;code&gt;green&lt;/code&gt;, &lt;code&gt;yellow&lt;/code&gt;, &lt;code&gt;blue&lt;/code&gt;, &lt;code&gt;magenta&lt;/code&gt;, &lt;code&gt;cyan&lt;/code&gt;, &lt;code&gt;white&lt;/code&gt;, &lt;code&gt;brightBlack&lt;/code&gt;, &lt;code&gt;brightRed&lt;/code&gt;, &lt;code&gt;brightGreen&lt;/code&gt;, &lt;code&gt;brightYellow&lt;/code&gt;, &lt;code&gt;brightBlue&lt;/code&gt;, &lt;code&gt;brightMagenta&lt;/code&gt;, &lt;code&gt;brightCyan&lt;/code&gt;, &lt;code&gt;brightWhite&lt;/code&gt;, or &lt;code&gt;default&lt;/code&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Roadmap&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/smallhadroncollider/taskell/raw/develop/roadmap.md&#34;&gt;roadmap.md&lt;/a&gt; for planned features&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Please check the &lt;a href=&#34;https://github.com/smallhadroncollider/taskell/raw/develop/roadmap.md&#34;&gt;roadmap.md&lt;/a&gt; before adding any bugs/feature requests to Issues.&lt;/p&gt; &#xA;&lt;p&gt;Anyone is welcome to contribute to the project, but please read through &lt;a href=&#34;https://github.com/smallhadroncollider/taskell/raw/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; and make sure that you agree with the &lt;a href=&#34;https://github.com/smallhadroncollider/taskell/raw/master/CODE_OF_CONDUCT.md&#34;&gt;Code of Conduct&lt;/a&gt; before getting involved.&lt;/p&gt; &#xA;&lt;h3&gt;Core Contributors&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Mark Wales (&lt;a href=&#34;https://github.com/smallhadroncollider&#34;&gt;@smallhadroncollider&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Ali Ahmed (&lt;a href=&#34;https://github.com/AliNisarAhmed&#34;&gt;@AliNisarAhmed&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Acknowledgements&lt;/h2&gt; &#xA;&lt;p&gt;Built using &lt;a href=&#34;https://github.com/jtdaugherty/brick&#34;&gt;Brick&lt;/a&gt;. Thanks to &lt;a href=&#34;https://github.com/jtdaugherty&#34;&gt;Jonathan Daugherty&lt;/a&gt; for answering all my questions and pointing me in the right direction. Also thanks to &lt;a href=&#34;https://github.com/leighman&#34;&gt;Jack Leigh&lt;/a&gt; and &lt;a href=&#34;https://github.com/ThomWright&#34;&gt;Thom Wright&lt;/a&gt; for helping me get started. Also thanks to &lt;a href=&#34;https://github.com/katjad&#34;&gt;Katja Durrani&lt;/a&gt; for submitting Taskell to &lt;a href=&#34;https://github.com/Homebrew/homebrew-core&#34;&gt;&lt;code&gt;homebrew-core&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>freuk/iter</title>
    <updated>2024-03-24T01:46:42Z</updated>
    <id>tag:github.com,2024-03-24:/freuk/iter</id>
    <link href="https://github.com/freuk/iter" rel="alternate"></link>
    <summary type="html">&lt;p&gt;🔁 Code iteration tool running on Groq&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;iter 🔁&lt;/h1&gt; &#xA;&lt;p&gt;A code iteration tool running on the &lt;a href=&#34;https://console.groq.com&#34;&gt;Groq API&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This is an UX experiment and demo for code iteration with &lt;a href=&#34;https://en.wikipedia.org/wiki/Reinforcement_learning_from_human_feedback&#34;&gt;RHLF-based&lt;/a&gt; LLMs. It takes the form of a &lt;a href=&#34;https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop&#34;&gt;REPL&lt;/a&gt; with free-form text that lets the user quickly iterate on diffs and pipe feedback (e.g. compilers and test suites) into the LLM before triggering &lt;a href=&#34;https://github.com/rxlqn/awesome-llm-self-reflection&#34;&gt;self-reflection&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=eR855VNPjhk&#34;&gt;&lt;img src=&#34;https://img.youtube.com/vi/eR855VNPjhk/0.jpg&#34; alt=&#34;Video demo&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;usage&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://console.groq.com&#34;&gt;Create an account and generate your API key&lt;/a&gt; from Groq!&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Install &lt;a href=&#34;https://nixos.org/&#34;&gt;Nix&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Install &lt;code&gt;iter&lt;/code&gt; via:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;nix profile install github:freuk/iter#iter&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Or directly run the &lt;code&gt;iter&lt;/code&gt; binary via &lt;code&gt;nix run github:freuk/iter#iter&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;By default, &lt;code&gt;iter&lt;/code&gt; uses &lt;code&gt;mixtral-8x7b-32768&lt;/code&gt;, a 32k sequence length MoE of 7b parameter language models from &lt;a href=&#34;https://mistral.ai/&#34;&gt;Mistral AI&lt;/a&gt;. Use &lt;code&gt;--config&lt;/code&gt; (see &lt;code&gt;demos/&lt;/code&gt; for examples) to change this choice to one of the other available models.&lt;/p&gt; &#xA;&lt;h2&gt;development&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;nix-shell&lt;/code&gt; will give you a development environment for &lt;code&gt;iter&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;ghcid&lt;/code&gt;: live GHC feedback&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;just&lt;/code&gt;: useful commands for interactive development&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>nguyentito/miniml</title>
    <updated>2024-03-24T01:46:42Z</updated>
    <id>tag:github.com,2024-03-24:/nguyentito/miniml</id>
    <link href="https://github.com/nguyentito/miniml" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Implémentation d&#39;un petit langage fonctionnel en Haskell.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;MiniML&lt;/h1&gt; &#xA;&lt;p&gt;Ceci est un projet d&#39;interprète du langage miniML utilisé dans les exemples du &lt;a href=&#34;http://www.lri.fr/%7Efilliatr/ens/compil/&#34;&gt;cours de compilation de Jean-Christophe Filliâtre à l&#39;ENS&lt;/a&gt;, lui-même inspiré du cours &#34;Programmation, sémantique, typage&#34; de Xavier Leroy. A terme, il devrait comporter un parseur, un typeur Hindley-Milner et un interprète, voire un compilateur...&lt;/p&gt; &#xA;&lt;p&gt;Note : le projet d&#39;implémenter la sémantique à petits pas avec un zipper a été abandonné car ça ne sert à rien.&lt;/p&gt;</summary>
  </entry>
</feed>