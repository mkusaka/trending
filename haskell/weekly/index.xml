<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Haskell Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-02-25T01:47:00Z</updated>
  <subtitle>Weekly Trending of Haskell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>IntersectMBO/ouroboros-network</title>
    <updated>2024-02-25T01:47:00Z</updated>
    <id>tag:github.com,2024-02-25:/IntersectMBO/ouroboros-network</id>
    <link href="https://github.com/IntersectMBO/ouroboros-network" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Specifications of network protocols and implementations of components running these protocols which support a family of Ouroboros Consesus protocols; the diffusion layer of the Cardano Node.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;a href=&#34;https://ouroboros-network.cardano.intersectmbo.org&#34;&gt;Ouroboros-Network&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/intersectmbo/ouroboros-network/actions/workflows/build.yml&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/intersectmbo/ouroboros-network/build.yml?branch=master&amp;amp;label=Build&amp;amp;style=for-the-badge&#34; alt=&#34;Haskell CI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/intersectmbo/ouroboros-network/actions/workflows/nightly.yml&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/intersectmbo/ouroboros-network/nightly.yml?branch=master&amp;amp;label=Nightly&amp;amp;style=for-the-badge&#34; alt=&#34;Nightly CI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/intersectmbo/ouroboros-network/actions/workflows/github-page.yml&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/intersectmbo/ouroboros-network/github-page.yml?branch=master&amp;amp;label=Haddocks&amp;amp;style=for-the-badge&#34; alt=&#34;Haddocks&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://input-output-hk.github.io/cardano-engineering-handbook&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/policy-Cardano%20Engineering%20Handbook-informational?style=for-the-badge&#34; alt=&#34;handbook&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This repository contains the core components of the network code for the Cardano node. It is a dependency when building the node from the cardano-node repository.&lt;/p&gt; &#xA;&lt;p&gt;The following graph shows the dependency tree. The top-level package is &lt;code&gt;ouroboros-consensus-diffusion&lt;/code&gt; which is part of &lt;a href=&#34;https://github.com/intersectmbo/ouroboros-consensus&#34;&gt;ouroboros-consensus&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;  flowchart TD&#xA;    A[network-mux]                   --&amp;gt; B[network / Win32-network]&#xA;    M[cardano-ping]                  --&amp;gt; A&#xA;    D[ouroboros-network-framework]   --&amp;gt; A&#xA;    D                                --&amp;gt; E[ouroboros-network-api]&#xA;    E                                --&amp;gt; H[typed-protocols]&#xA;    G                                --&amp;gt; H[typed-protocols]&#xA;    G                                --&amp;gt; E&#xA;    F[ouroboros-network]             --&amp;gt; D&#xA;    F                                --&amp;gt; G[ouroboros-network-protocols]&#xA;    I[ouroboros-consensus-diffusion] --&amp;gt; F&#xA;    J[cardano-client]                --&amp;gt; F&#xA;    K[ntp-client]                    --&amp;gt; B&#xA;&#xA;   click A &#34;https://ouroboros-network.cardano.intersectmbo.org/network-mux/&#34; _blank&#xA;   click M &#34;https://ouroboros-network.cardano.intersectmbo.org/cardano-ping/&#34; _blank&#xA;   click D &#34;https://ouroboros-network.cardano.intersectmbo.org/ouroboros-network-framework/&#34; _blank&#xA;   click E &#34;https://ouroboros-network.cardano.intersectmbo.org/ouroboros-network-api/&#34; _blank&#xA;   click F &#34;https://ouroboros-network.cardano.intersectmbo.org/ouroboros-network/&#34; _blank&#xA;   click G &#34;https://ouroboros-network.cardano.intersectmbo.org/ouroboros-network-protocols/&#34; _blank&#xA;   click I &#34;https://github.com/intersectmbo/ouroboros-consensus/&#34; _blank&#xA;   click J &#34;https://ouroboros-network.cardano.intersectmbo.org/cardano-client/&#34; _blank&#xA;   click K &#34;https://ouroboros-network.cardano.intersectmbo.org/ntp-client/&#34; _blank&#xA;   click H &#34;https://github.com/input-output-hk/typed-protocols/&#34; _blank&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;network-mux&lt;/code&gt; - implementation of a general network multiplexer.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ouroboros-network-api&lt;/code&gt; - shared API between &lt;code&gt;network&lt;/code&gt; and &lt;code&gt;consensus&lt;/code&gt; components.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ouroboros-network-framework&lt;/code&gt; - low-level network components, e.g. snockets, connection manager, inbound governor, handshake mini-protocol, network simulator.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ouroboros-network-protocols&lt;/code&gt; - implementation of all /node-to-node/ &amp;amp; /node-to-client/ protocols. Also contains a testing library which is implementing various applications for testing purposes.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ouroboros-network&lt;/code&gt;- top-level integration of all network components also defines &lt;code&gt;node-to-node&lt;/code&gt; and &lt;code&gt;node-to-client&lt;/code&gt; API. It contains the implementation of the outbound governor.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ouroboros-network-mock&lt;/code&gt; &amp;amp; &lt;code&gt;ouroboros-network-testing&lt;/code&gt; - shared testing code.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ntp-client&lt;/code&gt; - an &lt;code&gt;ntp&lt;/code&gt; client (used by &lt;code&gt;cardano-wallet&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cardano-ping&lt;/code&gt; - a library which implements the core functionality of &lt;code&gt;cardano-cli ping&lt;/code&gt; command.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cardano-client&lt;/code&gt; - a subscription for &lt;code&gt;node-to-client&lt;/code&gt; which wants to connect to a &lt;code&gt;cardano-node&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Libraries:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;monoidal-synchronisation&lt;/code&gt; - a small standalone package which contains synchronisation primitives.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Ouroboros-Network Documentation&lt;/h2&gt; &#xA;&lt;p&gt;We have two documents which describe various levels of the networking layer of the Cardano Shelley implementation:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://ouroboros-network.cardano.intersectmbo.org/pdfs/network-design&#34;&gt;Introduction to the design of Data Diffusion and Networking of Cardano Shelley&lt;/a&gt;&lt;/p&gt; &lt;p&gt;This document explains the technical requirements and key constraints for the networking layer of the &lt;em&gt;Cardano Shelley&lt;/em&gt; implementation of &lt;em&gt;Ouroboros Praos&lt;/em&gt;. This is a design document.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://ouroboros-network.cardano.intersectmbo.org/pdfs/network-spec&#34;&gt;The Shelley Networking Protocol&lt;/a&gt;&lt;/p&gt; &lt;p&gt;This document is a technical specification of the networking protocol. It includes serialisation formats, necessary details of the multiplexer and technical specifications of mini-protocols used by either &lt;em&gt;node-to-node&lt;/em&gt; and &lt;em&gt;node-to-client&lt;/em&gt; flavours of the protocol.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://ouroboros-network.cardano.intersectmbo.org&#34;&gt;Haddock documentation&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://docs.cardano.org/en/latest/&#34;&gt;Official Cardano Documentation&lt;/a&gt;&lt;/p&gt; &lt;p&gt;Specifically the section &#34;Explore Cardano&#34; is helpful, since it talks about the &lt;a href=&#34;https://docs.cardano.org/explore-cardano/cardano-architecture&#34;&gt;Cardano Architecture&lt;/a&gt;, &lt;a href=&#34;https://docs.cardano.org/explore-cardano/cardano-design-rationale&#34;&gt;Cardano Design Rationale&lt;/a&gt;, the &lt;a href=&#34;https://docs.cardano.org/explore-cardano/cardano-network/about-the-cardano-network&#34;&gt;Cardano Network&lt;/a&gt;, etc. Although the Cardano documentation is less detailed, it is a good place to start and refresh some more basic concepts about Cardano.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Work progress&lt;/h3&gt; &#xA;&lt;p&gt;On a biweekly basis, we publish updates on &lt;a href=&#34;https://intersectmbo.github.io/cardano-updates&#34;&gt;cardano-updates&lt;/a&gt;. We are also tracking our current work in the &lt;a href=&#34;https://github.com/orgs/input-output-hk/projects/19/views/23&#34;&gt;Ouroboros Network Project&lt;/a&gt;. Our quarterly goals are published in the [Cardano Node Product Backlog][cardano-node-backlog].&lt;/p&gt; &#xA;&lt;h3&gt;For Contributors&lt;/h3&gt; &#xA;&lt;p&gt;The contributing guide is available &lt;a href=&#34;https://raw.githubusercontent.com/IntersectMBO/ouroboros-network/master/CONTRIBUTING.md&#34;&gt;here&lt;/a&gt;. The style guide is available &lt;a href=&#34;https://raw.githubusercontent.com/IntersectMBO/ouroboros-network/master/docs/StyleGuide.md&#34;&gt;here&lt;/a&gt;. The code of conduct is available &lt;a href=&#34;https://raw.githubusercontent.com/IntersectMBO/ouroboros-network/master/CODE_OF_CONDUCT.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Ouroboros-Network API&lt;/h2&gt; &#xA;&lt;p&gt;The API consists of three layers:&lt;/p&gt; &#xA;&lt;p&gt;â€¢ mini-protocol APIs, which are GADTs for each mini-protocol under &lt;code&gt;Ouroboros.Network.Protocol&lt;/code&gt; (defined in &lt;code&gt;ouroboros-network-protocols&lt;/code&gt; package); this hides heavy type machinery of session types. One only needs the &lt;a href=&#34;https://input-output-hk.github.io/typed-protocols/typed-protocols/Network-TypedProtocol-Core.html#t:Peer&#34;&gt;&lt;code&gt;Peer&lt;/code&gt;&lt;/a&gt; or [&lt;code&gt;PeerPipelined&lt;/code&gt;] type when one is using &lt;a href=&#34;https://ouroboros-network.cardano.intersectmbo.org/ouroboros-network-framework/Ouroboros-Network-Driver.html#v:runPeer&#34;&gt;&lt;code&gt;runPeer&lt;/code&gt;&lt;/a&gt; or [&lt;code&gt;runPeerPipelined&lt;/code&gt;] function and each protocol exposes a function to create it (e.g. &lt;a href=&#34;https://ouroboros-network.cardano.intersectmbo.org/ouroboros-network-protocols/Ouroboros-Network-Protocol-ChainSync-Client.html#v:chainSyncClientPeer&#34;&gt;&lt;code&gt;chainSyncClientPeer&lt;/code&gt;&lt;/a&gt;. There is also API which allows to run a &lt;a href=&#34;https://input-output-hk.github.io/typed-protocols/typed-protocols/Network-TypedProtocol-Core.html#t:Peer&#34;&gt;&lt;code&gt;Peer&lt;/code&gt;&lt;/a&gt; or [&lt;code&gt;PipelinedPeer&lt;/code&gt;] with limits (i.e. per state timeouts &amp;amp; per message size limits).&lt;/p&gt; &#xA;&lt;p&gt;â€¢ callback &lt;a href=&#34;https://ouroboros-network.cardano.intersectmbo.org/ouroboros-network-framework/Ouroboros-Network-Mux.html#t:MiniProtocolCb&#34;&gt;&lt;code&gt;MiniProtocolCb&lt;/code&gt;&lt;/a&gt;. The callback is wrapped in &lt;code&gt;OuroborosApplication&lt;/code&gt; GADT which allows to differentiate the initiator/responder (or client/server) callbacks.&lt;/p&gt; &#xA;&lt;p&gt;â€¢ versioning which is a map from version numbers to the above callbacks and version data (the tricky part here is that version data type can be different between different versions; there is a simple way of building this map using a semigroup). You can use &lt;a href=&#34;https://ouroboros-network.cardano.intersectmbo.org/ouroboros-network-framework/Ouroboros-Network-Protocol-Handshake-Version.html#v:simpleSingletonVersions&#34;&gt;&lt;code&gt;simpleSingletonVersion&lt;/code&gt;&lt;/a&gt; if your application does not depend on negotiated version data. However, &lt;a href=&#34;https://ouroboros-network.cardano.intersectmbo.org/ouroboros-network/Ouroboros-Network-NodeToNode.html&#34;&gt;&lt;code&gt;Ouroboros.Network.NodeToNode&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://ouroboros-network.cardano.intersectmbo.org/ouroboros-network/Ouroboros-Network-NodeToClient.html&#34;&gt;&lt;code&gt;Ouroboros.Network.NodeToClient&lt;/code&gt;&lt;/a&gt; expose API which hides versioning from the caller.&lt;/p&gt; &#xA;&lt;h2&gt;Demo applications&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/intersectmbo/ouroboros-network/wiki/Ouroboros-Network-Demo&#34;&gt;demo-chain-sync&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/intersectmbo/ouroboros-network/wiki/cardano-ping&#34;&gt;cardano-ping&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/intersectmbo/ouroboros-network/raw/master/network-mux/demo/mux-demo.hs&#34;&gt;mux-demo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/intersectmbo/ouroboros-network/raw/master/ouroboros-network-framework/demo/ping-pong.hs&#34;&gt;demo-ping-pong&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/intersectmbo/ouroboros-network/raw/master/ntp-client/demo/Main.hs&#34;&gt;demo-ntp-client&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Instructions&lt;/summary&gt; To run a demo type: &#xA; &lt;pre&gt;&lt;code&gt;cabal run &amp;lt;DEMO_NAME&amp;gt; --&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;After &lt;code&gt;--&lt;/code&gt; you will need to pass arguments, when a demo is run without arguments it will specify what arguments it needs.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;!-- TODO: https://updates.cardano.intersectmbo.org --&gt;</summary>
  </entry>
  <entry>
    <title>Nekory23/Wolfram</title>
    <updated>2024-02-25T01:47:00Z</updated>
    <id>tag:github.com,2024-02-25:/Nekory23/Wolfram</id>
    <link href="https://github.com/Nekory23/Wolfram" rel="alternate"></link>
    <summary type="html">&lt;p&gt;{EPITECH} | Second year | Functionnal Programming&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Wolfram&lt;/h1&gt; &#xA;&lt;p&gt;{EPITECH} | Second year | Functionnal Programming&lt;/p&gt; &#xA;&lt;p&gt;The goal of this project is to implement Wolframâ€™s elementary cellular automaton in the terminal.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Elementary_cellular_automaton&#34;&gt;https://en.wikipedia.org/wiki/Elementary_cellular_automaton&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;You only have to implement rule 30, rule 90 and rule 110. The other rules are considered a bonus.&lt;/p&gt; &#xA;&lt;p&gt;The space your cellular automaton are living in is infinite (to the left, right, and bottom). This means the parts not shown on screen can still have an effect on future generations. You have to handle the handling of the arguments yourself. Getopt is forbidden.&lt;/p&gt; &#xA;&lt;p&gt;See the subject for further details !&lt;/p&gt; &#xA;&lt;p&gt;========================&lt;/p&gt; &#xA;&lt;p&gt;Grade : A | Mark : 16.5&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Category&lt;/th&gt; &#xA;   &lt;th&gt;Percentage&lt;/th&gt; &#xA;   &lt;th&gt;Tests&lt;/th&gt; &#xA;   &lt;th&gt;Crash ?&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Basics&lt;/td&gt; &#xA;   &lt;td&gt;100%&lt;/td&gt; &#xA;   &lt;td&gt;1/1&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Rule 30&lt;/td&gt; &#xA;   &lt;td&gt;100%&lt;/td&gt; &#xA;   &lt;td&gt;3/3&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Rule 90&lt;/td&gt; &#xA;   &lt;td&gt;100%&lt;/td&gt; &#xA;   &lt;td&gt;3/3&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Rule 110&lt;/td&gt; &#xA;   &lt;td&gt;100%&lt;/td&gt; &#xA;   &lt;td&gt;3/3&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Infinite&lt;/td&gt; &#xA;   &lt;td&gt;100%&lt;/td&gt; &#xA;   &lt;td&gt;1/1&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Window and move&lt;/td&gt; &#xA;   &lt;td&gt;50%&lt;/td&gt; &#xA;   &lt;td&gt;1/2&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Performance&lt;/td&gt; &#xA;   &lt;td&gt;33%&lt;/td&gt; &#xA;   &lt;td&gt;1/3&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Error handling&lt;/td&gt; &#xA;   &lt;td&gt;100%&lt;/td&gt; &#xA;   &lt;td&gt;5/5&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Coding Style&lt;/td&gt; &#xA;   &lt;td&gt;100%&lt;/td&gt; &#xA;   &lt;td&gt;4/4&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;End score&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;88%&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;22/25&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;No&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Made with Quentin TREHEUX (&lt;a href=&#34;https://github.com/LuciferBahamut&#34;&gt;LuciferBahamut&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;p&gt;Beware of -42 Epitech students !!!&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>akiradeveloper/haskell-is-fun</title>
    <updated>2024-02-25T01:47:00Z</updated>
    <id>tag:github.com,2024-02-25:/akiradeveloper/haskell-is-fun</id>
    <link href="https://github.com/akiradeveloper/haskell-is-fun" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
</feed>