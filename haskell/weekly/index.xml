<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Haskell Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-10T02:11:30Z</updated>
  <subtitle>Weekly Trending of Haskell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>input-output-hk/plutus-apps</title>
    <updated>2022-07-10T02:11:30Z</updated>
    <id>tag:github.com,2022-07-10:/input-output-hk/plutus-apps</id>
    <link href="https://github.com/input-output-hk/plutus-apps" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The Plutus application platform&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;a href=&#34;https://github.com/input-output-hk/plutus-apps&#34;&gt;The Plutus Application Framework&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;div id=&#34;toc&#34; class=&#34;toc&#34;&gt; &#xA; &lt;div id=&#34;toctitle&#34;&gt;&#xA;  Table of Contents&#xA; &lt;/div&gt; &#xA; &lt;ul class=&#34;sectlevel1&#34;&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus-apps/main/#_documentation&#34;&gt;Documentation&lt;/a&gt; &#xA;   &lt;ul class=&#34;sectlevel2&#34;&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus-apps/main/#_user_documentation&#34;&gt;User documentation&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus-apps/main/#_talks&#34;&gt;Talks&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus-apps/main/#_specifications_and_design&#34;&gt;Specifications and design&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus-apps/main/#_versioning_and_releases&#34;&gt;Versioning and releases&lt;/a&gt; &#xA;   &lt;ul class=&#34;sectlevel2&#34;&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus-apps/main/#_versioning&#34;&gt;Versioning&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus-apps/main/#_branching&#34;&gt;Branching&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus-apps/main/#_dependency_update&#34;&gt;Dependency update&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus-apps/main/#_version_ranges&#34;&gt;Version ranges&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus-apps/main/#_releases&#34;&gt;Releases&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus-apps/main/#_working_with_the_project&#34;&gt;Working with the project&lt;/a&gt; &#xA;   &lt;ul class=&#34;sectlevel2&#34;&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus-apps/main/#_how_to_submit_an_issue&#34;&gt;How to submit an issue&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus-apps/main/#how-to-develop&#34;&gt;How to develop and contribute to the project&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus-apps/main/#_how_to_depend_on_the_project_from_another_haskell_project&#34;&gt;How to depend on the project from another Haskell project&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus-apps/main/#_how_to_build_the_projects_artifacts&#34;&gt;How to build the project’s artifacts&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus-apps/main/#_deployment&#34;&gt;Deployment&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus-apps/main/#nix-advice&#34;&gt;Nix&lt;/a&gt; &#xA;   &lt;ul class=&#34;sectlevel2&#34;&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus-apps/main/#iohk-binary-cache&#34;&gt;How to set up the IOHK binary caches&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus-apps/main/#nix-build-attributes&#34;&gt;Which attributes to use to build different artifacts&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus-apps/main/#_licensing&#34;&gt;Licensing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/div&gt; &#xA;&lt;div id=&#34;preamble&#34;&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;The Plutus Application Framework, part of the Plutus Platform, is a framework for developing distributed applications using the Cardano blockchain. For more information about the projects, see the &lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus-apps/main/#user-documentation&#34;&gt;[user-documentation]&lt;/a&gt;.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;This repository contains:&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;ulist&#34;&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt; &lt;p&gt;Plutus Platform&lt;/p&gt; &#xA;     &lt;div class=&#34;ulist&#34;&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt; &lt;p&gt;Libraries which implement the Plutus Application Framework, a framework for writing applications that work with Cardano.&lt;/p&gt; &lt;/li&gt; &#xA;       &lt;li&gt; &lt;p&gt;A selection of end-to-end usecases written with the Plutus Application Framework&lt;/p&gt; &lt;/li&gt; &#xA;       &lt;li&gt; &lt;p&gt;The Plutus Playground, a web-based playground for learning and writing basic Plutus Applications.&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;/ul&gt; &#xA;     &lt;/div&gt; &lt;/li&gt; &#xA;   &lt;/ul&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;admonitionblock important&#34;&gt; &#xA;   &lt;table&gt; &#xA;    &lt;tbody&gt;&#xA;     &lt;tr&gt; &#xA;      &lt;td class=&#34;icon&#34;&gt; &#xA;       &lt;div class=&#34;title&#34;&gt;&#xA;        Important&#xA;       &lt;/div&gt; &lt;/td&gt; &#xA;      &lt;td class=&#34;content&#34;&gt; &#xA;       &lt;div class=&#34;paragraph&#34;&gt; &#xA;        &lt;p&gt;The rest of this README is focussed on people who want to develop or contribute to the Framework.&lt;/p&gt; &#xA;       &lt;/div&gt; &#xA;       &lt;div class=&#34;paragraph&#34;&gt; &#xA;        &lt;p&gt;For people who want to &lt;strong&gt;use&lt;/strong&gt; the Framework, please consult the &lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus-apps/main/#user-documentation&#34;&gt;[user-documentation]&lt;/a&gt;.&lt;/p&gt; &#xA;       &lt;/div&gt; &lt;/td&gt; &#xA;     &lt;/tr&gt; &#xA;    &lt;/tbody&gt;&#xA;   &lt;/table&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div id=&#34;cache-warning&#34; class=&#34;admonitionblock important&#34;&gt; &#xA;   &lt;table&gt; &#xA;    &lt;tbody&gt;&#xA;     &lt;tr&gt; &#xA;      &lt;td class=&#34;icon&#34;&gt; &#xA;       &lt;div class=&#34;title&#34;&gt;&#xA;        Important&#xA;       &lt;/div&gt; &lt;/td&gt; &#xA;      &lt;td class=&#34;content&#34;&gt; &#xA;       &lt;div class=&#34;paragraph&#34;&gt; &#xA;        &lt;p&gt;DO NOT IGNORE THIS&lt;/p&gt; &#xA;       &lt;/div&gt; &#xA;       &lt;div class=&#34;paragraph&#34;&gt; &#xA;        &lt;p&gt;If you want to use Nix with this project, make sure to set up the &lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus-apps/main/#iohk-binary-cache&#34;&gt;IOHK binary cache&lt;/a&gt;. If you do not do this, you will end up building GHC, which takes several hours. If you find yourself building GHC, STOP and fix the cache.&lt;/p&gt; &#xA;       &lt;/div&gt; &lt;/td&gt; &#xA;     &lt;/tr&gt; &#xA;    &lt;/tbody&gt;&#xA;   &lt;/table&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;_documentation&#34;&gt;Documentation&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;_user_documentation&#34;&gt;User documentation&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;The main documentation is located &lt;a href=&#34;https://plutus-apps.readthedocs.io/en/latest/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;The generated Haskell API documentation (haddocks) are here: &lt;a href=&#34;https://playground.plutus.iohkdev.io/doc/haddock&#34; class=&#34;bare&#34;&gt;https://playground.plutus.iohkdev.io/doc/haddock&lt;/a&gt;.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;_talks&#34;&gt;Talks&lt;/h3&gt; &#xA;   &lt;div class=&#34;ulist&#34;&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=MpWeg6Fg0t8&#34;&gt;Functional Smart Contracts on Cardano&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=usMPt8KpBeI&#34;&gt;The Plutus Platform&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;_specifications_and_design&#34;&gt;Specifications and design&lt;/h3&gt; &#xA;   &lt;div class=&#34;ulist&#34;&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://hydra.iohk.io/job/Cardano/plutus/linux.docs.plutus-report/latest/download-by-type/doc-pdf/plutus&#34;&gt;Plutus Technical Report&lt;/a&gt; (draft)&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;_versioning_and_releases&#34;&gt;Versioning and releases&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;&lt;a href=&#34;https://pvp.haskell.org/&#34;&gt;PVP&lt;/a&gt; reminder:&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;ulist&#34;&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt; &lt;p&gt;&lt;em&gt;Two&lt;/em&gt; major-version components, A.B&lt;/p&gt; &#xA;     &lt;div class=&#34;ulist&#34;&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt; &lt;p&gt;In this doc: “first-major-version”, “second-major-version”&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;/ul&gt; &#xA;     &lt;/div&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;&lt;em&gt;One&lt;/em&gt; minor-version component C&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;Any number of (meaningless but higher) patch-version components&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;/ul&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;_versioning&#34;&gt;Versioning&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;The core &lt;code&gt;plutus-apps&lt;/code&gt; packages are versioned as follows:&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;ulist&#34;&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt; &lt;p&gt;Package versioning follows the &lt;a href=&#34;https://pvp.haskell.org/&#34;&gt;PVP&lt;/a&gt; on a best-effort basis (i.e. we will generally try to but we won’t guarantee it).&lt;/p&gt; &#xA;      &lt;div class=&#34;ulist&#34;&gt; &#xA;       &lt;ul&gt; &#xA;        &lt;li&gt; &lt;p&gt;The first-major-version component indicates the &#34;era&#34; which for our purposes means which major version of the &lt;strong&gt;Cardano node&lt;/strong&gt; the tools are compatible with.&lt;/p&gt; &lt;/li&gt; &#xA;        &lt;li&gt; &lt;p&gt;The second-major-version component is used for releases which are major versions according to the PVP, but which are still compatible with the current &#34;era&#34;.&lt;/p&gt; &lt;/li&gt; &#xA;        &lt;li&gt; &lt;p&gt;The minor-version and below are used as normal.&lt;/p&gt; &lt;/li&gt; &#xA;       &lt;/ul&gt; &#xA;      &lt;/div&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Packages which are used downstream should all have the same version.&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Other packages which are not used downstream (e.g. &lt;code&gt;plutus-playground-server&lt;/code&gt;, &lt;code&gt;plutus-playground-client&lt;/code&gt;, &lt;code&gt;quickcheck-dynamic&lt;/code&gt;, etc.) can remain unversioned.&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;In principle we could just have a single major version, but using two makes it easier to avoid mistakes and clearly expresses the state of the repository.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;_branching&#34;&gt;Branching&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;There are two protected branches in &lt;code&gt;plutus-apps&lt;/code&gt;:&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;ulist&#34;&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;code&gt;main&lt;/code&gt; branch&lt;/p&gt; &#xA;      &lt;div class=&#34;ulist&#34;&gt; &#xA;       &lt;ul&gt; &#xA;        &lt;li&gt; &lt;p&gt;Most development should be done in this branch&lt;/p&gt; &lt;/li&gt; &#xA;        &lt;li&gt; &lt;p&gt;Should always target a stable version of &lt;code&gt;cardano-node&lt;/code&gt; which is compatible with the current Cardano mainnet.&lt;/p&gt; &lt;/li&gt; &#xA;        &lt;li&gt; &lt;p&gt;The version of transitive dependencies (&lt;code&gt;plutus&lt;/code&gt;, &lt;code&gt;cardano-ledger&lt;/code&gt;, &lt;code&gt;ouroboros-network&lt;/code&gt;, etc.) should be pinned to the ones from &lt;code&gt;cardano-node&lt;/code&gt; (or better, &lt;code&gt;cardano-wallet&lt;/code&gt;)&lt;/p&gt; &lt;/li&gt; &#xA;        &lt;li&gt; &lt;p&gt;Changes will be backported form &lt;code&gt;main&lt;/code&gt; to &lt;code&gt;next-node&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;       &lt;/ul&gt; &#xA;      &lt;/div&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;code&gt;next-node&lt;/code&gt; branch: should always target the next node release.&lt;/p&gt; &#xA;      &lt;div class=&#34;ulist&#34;&gt; &#xA;       &lt;ul&gt; &#xA;        &lt;li&gt; &lt;p&gt;This branch will eventually be merged in &lt;code&gt;main&lt;/code&gt; after the Cardano mainnet HF.&lt;/p&gt; &lt;/li&gt; &#xA;       &lt;/ul&gt; &#xA;      &lt;/div&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;_dependency_update&#34;&gt;Dependency update&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;The dependency update policy is dependent on the protected branch.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;For &lt;code&gt;cardano-node&lt;/code&gt;, we define major-version-bound the range of versions which are compatible with a specific era. For example, for the Alonzo era, that would be &lt;code&gt;&amp;gt;= 1.29 &amp;amp;&amp;amp; &amp;lt; 1.35&lt;/code&gt;. For the Vasil era, that would be &lt;code&gt;&amp;gt;= 1.35 &amp;amp;&amp;amp; &amp;lt; 1.36&lt;/code&gt;.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;Independently of the protected branch:&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;ulist&#34;&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt; &lt;p&gt;It should always use the same first-major-version of &lt;code&gt;plutus&lt;/code&gt; as the one used by the &lt;code&gt;plutus&lt;/code&gt; dependency of &lt;code&gt;cardano-node&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;It should always be safe to upgrade to a new second-major-version of &lt;code&gt;plutus&lt;/code&gt;: at worst this will lead to some code breakage.&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;It should, unless specified otherwise, use the same version for transitive dependencies (&lt;code&gt;cardano-ledger&lt;/code&gt;, &lt;code&gt;ouroboros-network&lt;/code&gt;, etc.) with &lt;code&gt;cardano-node&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;It should pin the major version of &lt;code&gt;cardano-node&lt;/code&gt; for all packages&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;It should pin the first and second-major version of &lt;code&gt;plutus&lt;/code&gt; for all packages&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;&lt;code&gt;main&lt;/code&gt; branch:&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;ulist&#34;&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt; &lt;p&gt;It should not update &lt;code&gt;cardano-node&lt;/code&gt; to a new major-version. In other words, it should use a &lt;code&gt;cardano-node&lt;/code&gt; version which is compatible with the current Cardano mainnet&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;It should use a &lt;code&gt;cardano-wallet&lt;/code&gt; version which is compatible with the current &lt;code&gt;cardano-node&lt;/code&gt; version&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;&lt;code&gt;next-node&lt;/code&gt; branch:&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;ulist&#34;&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt; &lt;p&gt;It may update the &lt;code&gt;cardano-node&lt;/code&gt; to a new major-version. In other words, it may use a &lt;code&gt;cardano-node&lt;/code&gt; version which is incompatible with the current Cardano mainnet&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;It may use a &lt;code&gt;cardano-wallet&lt;/code&gt; version which is incompatible with the current &lt;code&gt;cardano-node&lt;/code&gt; version&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;_version_ranges&#34;&gt;Version ranges&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;Packages which depend on &lt;code&gt;plutus-apps&lt;/code&gt; packages should use version ranges to control which version of those packages they build against.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;ulist&#34;&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt; &lt;p&gt;Packages in &lt;code&gt;plutus-apps&lt;/code&gt; which are used downstream should pin the major-version of each other (e.g. &lt;code&gt;plutus-pab-1.0.1&lt;/code&gt; should depend on &lt;code&gt;plutus-contract ^&amp;gt;= 1.0&lt;/code&gt;).&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Downstream packages should pin at least the first-major-version of &lt;code&gt;plutus-apps&lt;/code&gt; packages.&lt;/p&gt; &#xA;      &lt;div class=&#34;ulist&#34;&gt; &#xA;       &lt;ul&gt; &#xA;        &lt;li&gt; &lt;p&gt;Upgrading to a new second-major-version should always be safe for working on the current mainnet, with at most code breakage (following the PVP). Users may of course want to pin this version as well to avoid such breakage.&lt;/p&gt; &lt;/li&gt; &#xA;       &lt;/ul&gt; &#xA;      &lt;/div&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Downstream packages pulling in &lt;code&gt;plutus-apps&lt;/code&gt; packages via &lt;code&gt;source-repository-package&lt;/code&gt; stanzas should always take tagged commits.&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;_releases&#34;&gt;Releases&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;Currently there is no release process beyond bumping the package versions and making a tag/branch as appropriate.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;_working_with_the_project&#34;&gt;Working with the project&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;_how_to_submit_an_issue&#34;&gt;How to submit an issue&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;Issues can be filed in the &lt;a href=&#34;https://github.com/input-output-hk/plutus-apps/issues&#34;&gt;GitHub Issue tracker&lt;/a&gt;.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;However, note that this is pre-release software, so we will not usually be providing support.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;how-to-develop&#34;&gt;How to develop and contribute to the project&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus-apps/main/CONTRIBUTING.html&#34;&gt;CONTRIBUTING&lt;/a&gt;, which describes our processes in more detail including development environments; and &lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus-apps/main/ARCHITECTURE.html&#34;&gt;ARCHITECTURE&lt;/a&gt;, which describes the structure of the repository.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;_how_to_depend_on_the_project_from_another_haskell_project&#34;&gt;How to depend on the project from another Haskell project&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;None of our libraries are on Hackage, unfortunately (many of our dependencies aren’t either). So for the time being, you need to:&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;olist arabic&#34;&gt; &#xA;    &lt;ol class=&#34;arabic&#34;&gt; &#xA;     &lt;li&gt; &lt;p&gt;Add &lt;code&gt;plutus-apps&lt;/code&gt; as a &lt;code&gt;source-repository-package&lt;/code&gt; to your &lt;code&gt;cabal.project&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Copy the &lt;code&gt;source-repository-package&lt;/code&gt; stanzas from our &lt;code&gt;cabal.project&lt;/code&gt; to yours.&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Copy additional stanzas from our &lt;code&gt;cabal.project&lt;/code&gt; as you need, e.g. you may need some of the &lt;code&gt;allow-newer&lt;/code&gt; stanzas.&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;/ol&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;The &lt;a href=&#34;https://github.com/input-output-hk/plutus-starter&#34;&gt;plutus-starter&lt;/a&gt; project provides an example.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;_how_to_build_the_projects_artifacts&#34;&gt;How to build the project’s artifacts&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;This section contains information about how to build the project’s artifacts for independent usage. For development work see &lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus-apps/main/#how-to-develop&#34;&gt;How to develop and contribute to the project&lt;/a&gt; for more information.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;sect3&#34;&gt; &#xA;    &lt;h4 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h4&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;The Haskell libraries in the Plutus Platform are built with &lt;code&gt;cabal&lt;/code&gt; and Nix. The other artifacts (docs etc.) are also most easily built with Nix.&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;sect4&#34;&gt; &#xA;     &lt;h5 id=&#34;_nix&#34;&gt;Nix&lt;/h5&gt; &#xA;     &lt;div class=&#34;paragraph&#34;&gt; &#xA;      &lt;p&gt;Install &lt;a href=&#34;https://nixos.org/nix/&#34;&gt;Nix&lt;/a&gt; (recommended). following the instructions on the &lt;a href=&#34;https://nixos.org/nix/&#34;&gt;Nix website&lt;/a&gt;.&lt;/p&gt; &#xA;     &lt;/div&gt; &#xA;     &lt;div class=&#34;paragraph&#34;&gt; &#xA;      &lt;p&gt;Make sure you have read and understood the &lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus-apps/main/#cache-warning&#34;&gt;cache warning&lt;/a&gt;. DO NOT IGNORE THIS.&lt;/p&gt; &#xA;     &lt;/div&gt; &#xA;     &lt;div class=&#34;paragraph&#34;&gt; &#xA;      &lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus-apps/main/#nix-advice&#34;&gt;Nix&lt;/a&gt; for further advice on using Nix.&lt;/p&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;sect4&#34;&gt; &#xA;     &lt;h5 id=&#34;_non_nix&#34;&gt;Non-Nix&lt;/h5&gt; &#xA;     &lt;div class=&#34;paragraph&#34;&gt; &#xA;      &lt;p&gt;You can build some of the Haskell packages without Nix, but this is not recommended and we don’t guarantee that these prerequisites are sufficient. For instance, you would have to build and install this fork of &lt;a href=&#34;https://github.com/input-output-hk/libsodium/commit/66f017f16633f2060db25e17c170c2afa0f2a8a1&#34;&gt;&lt;code&gt;libsodium&lt;/code&gt;&lt;/a&gt; from source. If you use Nix, these tools are provided for you via &lt;code&gt;shell.nix&lt;/code&gt;, and you do &lt;strong&gt;not&lt;/strong&gt; need to install them yourself.&lt;/p&gt; &#xA;     &lt;/div&gt; &#xA;     &lt;div class=&#34;ulist&#34;&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt; &lt;p&gt;If you want to build our Haskell packages with &lt;a href=&#34;https://www.haskell.org/cabal/&#34;&gt;&lt;code&gt;cabal&lt;/code&gt;&lt;/a&gt;, then install it.&lt;/p&gt; &lt;/li&gt; &#xA;       &lt;li&gt; &lt;p&gt;If you want to build our Haskell packages with &lt;a href=&#34;https://haskellstack.org/&#34;&gt;&lt;code&gt;stack&lt;/code&gt;&lt;/a&gt;, then install it.&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;/ul&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;sect3&#34;&gt; &#xA;    &lt;h4 id=&#34;building-with-nix&#34;&gt;How to build the Haskell packages and other artifacts with Nix&lt;/h4&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;Run &lt;code&gt;nix build -f default.nix plutus-apps.haskell.packages.plutus-pab.components.library&lt;/code&gt; from the root to build the Plutus PAB library.&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus-apps/main/#nix-build-attributes&#34;&gt;Which attributes to use to build different artifacts&lt;/a&gt; to find out what other attributes you can build.&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;sect3&#34;&gt; &#xA;    &lt;h4 id=&#34;_how_to_build_the_haskell_packages_with_cabal&#34;&gt;How to build the Haskell packages with &lt;code&gt;cabal&lt;/code&gt;&lt;/h4&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;The Haskell packages can be built directly with &lt;code&gt;cabal&lt;/code&gt;. We do this during development (see &lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus-apps/main/#how-to-develop&#34;&gt;How to develop and contribute to the project&lt;/a&gt;). The best way is to do this is inside a &lt;code&gt;nix-shell&lt;/code&gt;.&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;admonitionblock note&#34;&gt; &#xA;     &lt;table&gt; &#xA;      &lt;tbody&gt;&#xA;       &lt;tr&gt; &#xA;        &lt;td class=&#34;icon&#34;&gt; &#xA;         &lt;div class=&#34;title&#34;&gt;&#xA;          Note&#xA;         &lt;/div&gt; &lt;/td&gt; &#xA;        &lt;td class=&#34;content&#34;&gt; &#xA;         &lt;div class=&#34;paragraph&#34;&gt; &#xA;          &lt;p&gt;For fresh development setups, you also need to run &lt;code&gt;cabal update&lt;/code&gt;.&lt;/p&gt; &#xA;         &lt;/div&gt; &lt;/td&gt; &#xA;       &lt;/tr&gt; &#xA;      &lt;/tbody&gt;&#xA;     &lt;/table&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;Run &lt;code&gt;cabal build plutus-pab&lt;/code&gt; from the root to build the Plutus PAB library.&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus-apps/main/cabal.project&#34;&gt;cabal project file&lt;/a&gt; to see the other packages that you can build with &lt;code&gt;cabal&lt;/code&gt;.&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;_deployment&#34;&gt;Deployment&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;The Plutus Playground is automatically deployed upon certain pushes to GitHub&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;ulist&#34;&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://plutus-playground-plutus-apps-staging.plutus.aws.iohkdev.io/&#34;&gt;Staging&lt;/a&gt; is deployed from every commit pushed to &lt;code&gt;main&lt;/code&gt; (this URL subject to change)&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://playground.plutus.iohkdev.io/&#34;&gt;Production&lt;/a&gt; is deployed from every release tag (matching &lt;code&gt;vYYYY-MM-DD&lt;/code&gt;)&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;For more details, including instructions for setting up ad hoc testing deployments, see &lt;a href=&#34;https://github.com/input-output-hk/plutus-ops&#34;&gt;the plutus-ops repo&lt;/a&gt;.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;nix-advice&#34;&gt;Nix&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;iohk-binary-cache&#34;&gt;How to set up the IOHK binary caches&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;Adding the IOHK binary cache to your Nix configuration will speed up builds a lot, since many things will have been built already by our CI.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;If you find you are building packages that are not defined in this repository, or if the build seems to take a very long time then you may not have this set up properly.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;To set up the cache:&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;olist arabic&#34;&gt; &#xA;    &lt;ol class=&#34;arabic&#34;&gt; &#xA;     &lt;li&gt; &lt;p&gt;On non-NixOS, edit &lt;code&gt;/etc/nix/nix.conf&lt;/code&gt; and add the following lines:&lt;/p&gt; &#xA;      &lt;div class=&#34;listingblock&#34;&gt; &#xA;       &lt;div class=&#34;content&#34;&gt; &#xA;        &lt;pre&gt;substituters        = https://hydra.iohk.io https://iohk.cachix.org https://cache.nixos.org/&#xA;trusted-public-keys = hydra.iohk.io:f/Ea+s+dFdN+3Y/G+FDgSq+a5NEWhJGzdjvKNGv0/EQ= iohk.cachix.org-1:DpRUyj7h7V830dp/i6Nti+NEO2/nhblbov/8MW7Rqoo= cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY=&lt;/pre&gt; &#xA;       &lt;/div&gt; &#xA;      &lt;/div&gt; &#xA;      &lt;div class=&#34;admonitionblock note&#34;&gt; &#xA;       &lt;table&gt; &#xA;        &lt;tbody&gt;&#xA;         &lt;tr&gt; &#xA;          &lt;td class=&#34;icon&#34;&gt; &#xA;           &lt;div class=&#34;title&#34;&gt;&#xA;            Note&#xA;           &lt;/div&gt; &lt;/td&gt; &#xA;          &lt;td class=&#34;content&#34;&gt; &#xA;           &lt;div class=&#34;paragraph&#34;&gt; &#xA;            &lt;p&gt;If you don’t have an &lt;code&gt;/etc/nix/nix.conf&lt;/code&gt; or don’t want to edit it, you may add the &lt;code&gt;nix.conf&lt;/code&gt; lines to &lt;code&gt;~/.config/nix/nix.conf&lt;/code&gt; instead. You must be a &lt;a href=&#34;https://nixos.org/nix/manual/#ssec-multi-user&#34;&gt;trusted user&lt;/a&gt; to do this.&lt;/p&gt; &#xA;           &lt;/div&gt; &lt;/td&gt; &#xA;         &lt;/tr&gt; &#xA;        &lt;/tbody&gt;&#xA;       &lt;/table&gt; &#xA;      &lt;/div&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;On NixOS, set the following NixOS options:&lt;/p&gt; &#xA;      &lt;div class=&#34;listingblock&#34;&gt; &#xA;       &lt;div class=&#34;content&#34;&gt; &#xA;        &lt;pre&gt;nix = {&#xA;  binaryCaches          = [ &#34;https://hydra.iohk.io&#34; &#34;https://iohk.cachix.org&#34; ];&#xA;  binaryCachePublicKeys = [ &#34;hydra.iohk.io:f/Ea+s+dFdN+3Y/G+FDgSq+a5NEWhJGzdjvKNGv0/EQ=&#34; &#34;iohk.cachix.org-1:DpRUyj7h7V830dp/i6Nti+NEO2/nhblbov/8MW7Rqoo=&#34; ];&#xA;};&lt;/pre&gt; &#xA;       &lt;/div&gt; &#xA;      &lt;/div&gt; &lt;/li&gt; &#xA;    &lt;/ol&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;nix-build-attributes&#34;&gt;Which attributes to use to build different artifacts&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus-apps/main/default.nix&#34;&gt;&lt;code&gt;default.nix&lt;/code&gt;&lt;/a&gt; defines a package set with attributes for all the artifacts you can build from this repository. These can be built using &lt;code&gt;nix build&lt;/code&gt;. For example:&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;listingblock&#34;&gt; &#xA;    &lt;div class=&#34;content&#34;&gt; &#xA;     &lt;pre&gt;nix build -f default.nix docs.site&lt;/pre&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;ulist&#34;&gt; &#xA;    &lt;div class=&#34;title&#34;&gt;&#xA;     Example attributes&#xA;    &lt;/div&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt; &lt;p&gt;Project packages: defined inside &lt;code&gt;plutus-apps.haskell.packages&lt;/code&gt;&lt;/p&gt; &#xA;      &lt;div class=&#34;ulist&#34;&gt; &#xA;       &lt;ul&gt; &#xA;        &lt;li&gt; &lt;p&gt;e.g.&amp;nbsp;&lt;code&gt;plutus-apps.haskell.packages.plutus-pab.components.library&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;       &lt;/ul&gt; &#xA;      &lt;/div&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;There are other attributes defined in &lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus-apps/main/default.nix&#34;&gt;&lt;code&gt;default.nix&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;_licensing&#34;&gt;Licensing&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;You are free to copy, modify, and distribute the Plutus Platform with under the terms of the Apache 2.0 license. See the &lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus-apps/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus-apps/main/NOTICE&#34;&gt;NOTICE&lt;/a&gt; files for details.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt;</summary>
  </entry>
  <entry>
    <title>input-output-hk/cardano-base</title>
    <updated>2022-07-10T02:11:30Z</updated>
    <id>tag:github.com,2022-07-10:/input-output-hk/cardano-base</id>
    <link href="https://github.com/input-output-hk/cardano-base" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Code used throughout the Cardano eco-system&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;cardano-base&lt;/h1&gt; &#xA;&lt;p&gt;A collection of miscellaneous packages used by Cardano that cover:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;cryptography&lt;/li&gt; &#xA; &lt;li&gt;serialization&lt;/li&gt; &#xA; &lt;li&gt;slotting&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Each sub-project has its own README.&lt;/p&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://github.com/input-output-hk/cardano-base/wiki&#34;&gt;wiki&lt;/a&gt; for more documentation.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>input-output-hk/cardano-addresses</title>
    <updated>2022-07-10T02:11:30Z</updated>
    <id>tag:github.com,2022-07-10:/input-output-hk/cardano-addresses</id>
    <link href="https://github.com/input-output-hk/cardano-addresses" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Addresses and mnemonic manipulation &amp; derivations&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;big&gt;&lt;strong&gt;Cardano Addresses&lt;/strong&gt;&lt;/big&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/input-output-hk/cardano-addresses/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/input-output-hk/cardano-addresses?color=%239b59b6&amp;amp;label=RELEASE&amp;amp;sort=semver&amp;amp;style=for-the-badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.npmjs.com/package/cardano-addresses&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/v/cardano-addresses?color=%239b59b6&amp;amp;style=for-the-badge&#34;&gt;&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://github.com/input-output-hk/cardano-addresses/actions?query=workflow%3A&amp;quot;Continuous Integration (Linux)&amp;quot;&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/workflow/status/input-output-hk/cardano-addresses/Continuous%20Integration%20(Linux)?style=for-the-badge&amp;amp;label=BUILD%20(Linux)&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/input-output-hk/cardano-addresses/actions?query=workflow%3A&amp;quot;Continuous Integration (Windows)&amp;quot;&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/workflow/status/input-output-hk/cardano-addresses/Continuous%20Integration%20(Windows)?style=for-the-badge&amp;amp;label=BUILD%20(Windows)&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/input-output-hk/cardano-addresses/actions?query=workflow%3A&amp;quot;TypeScript NPM Package&amp;quot;&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/workflow/status/input-output-hk/cardano-addresses/TypeScript%20NPM%20Package?style=for-the-badge&amp;amp;label=BUILD%20(TypeScript)&#34;&gt;&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://input-output-hk.github.io/cardano-addresses/coverage/hpc_index.html&#34;&gt;&lt;img src=&#34;https://input-output-hk.github.io/cardano-addresses/coverage/badge.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;This module provides mnemonic (backup phrase) creation, and conversion of a mnemonic to seed for wallet restoration, and address derivation functionalities.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/input-output-hk/cardano-addresses/master/.github/example.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;API documentation is available &lt;a href=&#34;https://input-output-hk.github.io/cardano-addresses/haddock&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Command-Line&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;cardano-address&lt;/code&gt; comes with a command-line interface for Linux. See the &lt;a href=&#34;https://github.com/input-output-hk/cardano-addresses/releases&#34;&gt;release artifacts&lt;/a&gt; or &lt;a href=&#34;https://github.com/input-output-hk/cardano-addresses/actions?query=workflow%3A%22Continuous+Integration%22&#34;&gt;continuous integration artifacts&lt;/a&gt; to get a pre-compiled binary, or &lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/cardano-addresses/master/#docker-image&#34;&gt;build a Docker image&lt;/a&gt;. The command-line is self explanatory by using &lt;code&gt;--help&lt;/code&gt; on various commands and sub-commands.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span&gt;💡&lt;/span&gt; Most commands read argument from the standard input. This prevent sensitive information from appearing into your shell history and, makes it easy to pipe commands!&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;How to generate a recovery phrase (&lt;strong&gt;phrase.prv&lt;/strong&gt;)&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ cardano-address recovery-phrase generate --size 15 &amp;gt; phrase.prv&#xA;exercise club noble adult miracle awkward problem olympic puppy private goddess piano fatal fashion vacuum&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;How to generate a root private key (&lt;strong&gt;root.xsk&lt;/strong&gt;)&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ cardano-address key from-recovery-phrase Shelley &amp;lt; phrase.prv &amp;gt; root.xsk&#xA;root_xsk1hqzfzrgskgnpwskxxrv5khs7ess82ecy8za9l5ef7e0afd2849p3zryje8chk39nxtva0sww5me3pzkej4rvd5cae3q3v8eu7556n6pdrp4fdu8nsglynpmcppxxvfdyzdz5gfq3fefjepxhvqspmuyvmvqg8983&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;blockquote&gt; &#xA;  &lt;p&gt;&lt;span&gt;ℹ&lt;/span&gt; Notice the &lt;code&gt;root_xsk&lt;/code&gt; prefix to identify a root extended signing (private) key.&lt;/p&gt; &#xA; &lt;/blockquote&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;How to generate a wallet id based on extended root or account keys (&lt;strong&gt;phrase.prv&lt;/strong&gt;)&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ cat root.xsk&#xA;root_xsk1hqzfzrgskgnpwskxxrv5khs7ess82ecy8za9l5ef7e0afd2849p3zryje8chk39nxtva0sww5me3pzkej4rvd5cae3q3v8eu7556n6pdrp4fdu8nsglynpmcppxxvfdyzdz5gfq3fefjepxhvqspmuyvmvqg8983&#xA;$ cardano-address key walletid &amp;lt; root.xsk&#xA;163ea20ad0611e4815a61c44bb32c82a81538999&#xA;&#xA;$ cardano-address key public --with-chain-code &amp;lt; root.xsk | cardano-address key walletid&#xA;163ea20ad0611e4815a61c44bb32c82a81538999&#xA;&#xA;$ cardano-address key child 1852H/1815H/0H &amp;lt; root.xsk &amp;gt; acct.xsk&#xA;$ cat acct.xsk&#xA;acct_xsk15ztha8ws7qjze5vmdkwqh0ddzvtlgstkg79swazhc5lxns2849plr3msjx082mcmd9hc24ujczk2cjnjwrcz4tjaucw9jqf8h5yc7d84rac0zdckkuhazpam0kleg4sq52ph3e0wn98a64hr8g5cpmh9zqpwtrhy&#xA;$ cardano-address key walletid &amp;lt; acct.xsk&#xA;15fd6c2130b0758ec7995bf9771d2a6602417c39&#xA;$ cardano-address key public --with-chain-code &amp;lt; acct.xsk | cardano-address key walletid&#xA;15fd6c2130b0758ec7995bf9771d2a6602417c39&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;How to generate a wallet id based on account keys of shared wallet (&lt;strong&gt;phrase.prv&lt;/strong&gt;)&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ cardano-address key from-recovery-phrase Shared &amp;lt; phrase.prv &amp;gt; root.shared_xsk&#xA;root_shared_xsk1hqzfzrgskgnpwskxxrv5khs7ess82ecy8za9l5ef7e0afd2849p3zryje8chk39nxtva0sww5me3pzkej4rvd5cae3q3v8eu7556n6pdrp4fdu8nsglynpmcppxxvfdyzdz5gfq3fefjepxhvqspmuyvmvzteqlc&#xA;&#xA;$ cardano-address key child 1854H/1815H/0H &amp;lt; root.shared_xsk &amp;gt; acct.shared_xsk&#xA;acct_shared_xsk14zh0kh0geaz9qpxv6q0n5upq8ux4n97u2gyl69mnhan74w6849pa3hj2p40xg0nugw8tzqu5eynzjunay6tffru9wdjank0phsfuc7vngjsmtktel05g6mx555tw8nxr8rpn2gac6km5plu9mwqsz54rfyhwd7pd&#xA;&#xA;$ cardano-address key walletid &amp;lt; acct.shared_xsk&#xA;user error (shared wallet needs to have at least spending script specified)&#xA;&#xA;$ cardano-address key walletid --spending &#34;cosigner#0&#34; &amp;lt; acct.shared_xsk&#xA;185d3582fc4892c4528614210b13e9a775dd7d02&#xA;&#xA;$ cardano-address key public --with-chain-code &amp;lt; acct.shared_xsk | cardano-address key walletid --spending &#34;cosigner#0&#34;&#xA;185d3582fc4892c4528614210b13e9a775dd7d02&#xA;&#xA;$ cardano-address key walletid --spending &#34;all [cosigner#0, active_until 1000]&#34; &amp;lt; acct.shared_xsk&#xA;42ecb214586dcbcb593688fb081784fa0aebb2c0&#xA;&#xA;$ cardano-address key walletid --spending &#34;all [cosigner#0, active_until 1000]&#34; --staking &#34;cosigner#1&#34; &amp;lt; acct.shared_xsk&#xA;12dc98557a4c5aa00575c5d1f0dbfa3837261e32&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;How to generate a private policy key (&lt;strong&gt;policy.xsk&lt;/strong&gt;), a public policy key (&lt;strong&gt;policy.vk&lt;/strong&gt;) and its hash (&lt;strong&gt;policy.vkh&lt;/strong&gt;)&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ cardano-address key child 1855H/1815H/0H &amp;lt; root.xsk &amp;gt; policy.xsk&#xA;policy_xsk1hr47zvxgzeeutgq50r965ygwxys86cwp8wdjqftlhan8mw6849pus6vc50dznjs5vkyjcz9usl6964u6nha88slrh8hyex74xnlfehcrkp80cp8wgzkqh22dzy7c48ekhhvvf2zz8hqakjwgfzgrjq5lx538et75&#xA;&#xA;$ cardano-address key child 1855H/1815H/0H &amp;lt; root.xsk | cardano-address key public --with-chain-code &amp;gt; policy.xvk&#xA;policy_xvk1e9ngmlhcwhszwyuxwc7anwk6tvzwndldz7j262rvfpd049tq74mq8vzwlszwus9vpw556yfa320nd0wccj5yy0wpmdyusjys8ypf7dgaauf0m&#xA;&#xA;$ cardano-address key child 1855H/1815H/0H &amp;lt; root.xsk | cardano-address key public --without-chain-code &amp;gt; policy.vk&#xA;policy_vk1e9ngmlhcwhszwyuxwc7anwk6tvzwndldz7j262rvfpd049tq74mq0ylkrs&#xA;&#xA;$ cardano-address key hash &amp;lt; policy.xvk&#xA;policy_vkh1qpc9xly4lc7yt98gcf59kdcqcss6dda4u9g72e775yxpxeypamc&#xA;$ cardano-address key hash &amp;lt; policy.vk&#xA;policy_vkh1qpc9xly4lc7yt98gcf59kdcqcss6dda4u9g72e775yxpxeypamc&#xA;$ cardano-address key hash --hex &amp;lt; policy.vk&#xA;0070537c95fe3c4594e8c2685b3700c421a6b7b5e151e567dea10c13&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;blockquote&gt; &#xA;  &lt;p&gt;&lt;span&gt;ℹ&lt;/span&gt; The last segment in the path is the key index and can be incremented up to &lt;code&gt;2^31-1&lt;/code&gt; to derive more keys.&lt;/p&gt; &#xA; &lt;/blockquote&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;How to generate a payment verification key (&lt;strong&gt;addr.xvk&lt;/strong&gt;)&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ cardano-address key child 1852H/1815H/0H/0/0 &amp;lt; root.xsk | cardano-address key public --with-chain-code &amp;gt; addr.xvk&#xA;addr_xvk1grvg8qzmkmw2n0dm4pd0h3j4dv6yglyammyp733eyj629dc3z28v6wk22nfmru6xz0vl2s3y5xndyd57fu70hrt84c6zkvlwx6fdl7ct9j7yc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;blockquote&gt; &#xA;  &lt;p&gt;&lt;span&gt;ℹ&lt;/span&gt; The last segment in the path is the key index and can be incremented up to &lt;code&gt;2^31-1&lt;/code&gt; to derive more keys.&lt;/p&gt; &#xA; &lt;/blockquote&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;How to generate a stake verification key (&lt;strong&gt;stake.xvk&lt;/strong&gt;)&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ cardano-address key child 1852H/1815H/0H/2/0 &amp;lt; root.xsk | cardano-address key public --with-chain-code &amp;gt; stake.xvk&#xA;stake_xvk1658atzttunamzn80204khrg0qfdk5nvmrutlmmpg7xlsyaggwa7h9z4smmeqsvs67qhyqmc2lqa0vy36rf2la74ym8a5p93zp4qtpuq6ky3ve&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;blockquote&gt; &#xA;  &lt;p&gt;&lt;span&gt;ℹ&lt;/span&gt; The last segment in the path is the key index and can be incremented up to &lt;code&gt;2^31-1&lt;/code&gt; to derive more keys.&lt;/p&gt; &#xA; &lt;/blockquote&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;How to generate a hash for payment verification key (&lt;strong&gt;addr.xvk&lt;/strong&gt;)&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ cardano-address key child 1852H/1815H/0H/0/0 &amp;lt; root.xsk | cardano-address key public --with-chain-code &amp;gt; addr.xvk&#xA;addr_xvk1grvg8qzmkmw2n0dm4pd0h3j4dv6yglyammyp733eyj629dc3z28v6wk22nfmru6xz0vl2s3y5xndyd57fu70hrt84c6zkvlwx6fdl7ct9j7yc&#xA;$ cardano-address key hash &amp;lt; addr.xvk&#xA;addr_vkh12j28hnmtwcp3n08vy58vyf0arnnrhtavu3lrfdztw0j0jng3d6v&#xA;$ cardano-address key hash --hex &amp;lt; addr.xvk&#xA;54947bcf6b760319bcec250ec225fd1ce63baface47e34b44b73e4f9&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;blockquote&gt; &#xA;  &lt;p&gt;&lt;span&gt;ℹ&lt;/span&gt; The hashing is available for both stake and payment verification keys. Additional flag &#39;--hex&#39; can be used.&lt;/p&gt; &#xA; &lt;/blockquote&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;How to generate a payment address from a payment key (&lt;strong&gt;payment.addr&lt;/strong&gt;)&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ cardano-address address payment --network-tag testnet &amp;lt; addr.xvk &amp;gt; payment.addr&#xA;addr_test1vp2fg770ddmqxxduasjsas39l5wwvwa04nj8ud95fde7f7guscp6v&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;How to generate a delegated payment address from a stake key (&lt;strong&gt;payment-delegated.addr&lt;/strong&gt;)&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ cardano-address address delegation $(cat stake.xvk) &amp;lt; payment.addr &amp;gt; payment-delegated.addr&#xA;addr_test1qp2fg770ddmqxxduasjsas39l5wwvwa04nj8ud95fde7f70k6tew7wrnx0s4465nx05ajz890g44z0kx6a3gsnms4c4qq8ve0n&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;How to generate a stake address from a stake key (&lt;strong&gt;stake.addr&lt;/strong&gt;)&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ cardano-address address stake --network-tag testnet &amp;lt; stake.xvk &amp;gt; stake.addr&#xA;stake_test1urmd9uh08pen8c26a2fn86weprjh52638mrdwc5gfac2u2s25zpat%&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;How to inspect address&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ echo addr_test1vp2fg770ddmqxxduasjsas39l5wwvwa04nj8ud95fde7f7guscp6v | cardano-address address inspect&#xA;{&#xA;    &#34;stake_reference&#34;: &#34;none&#34;,&#xA;    &#34;spending_key_hash_bech32&#34;: &#34;addr_vkh12j28hnmtwcp3n08vy58vyf0arnnrhtavu3lrfdztw0j0jng3d6v&#34;,&#xA;    &#34;address_style&#34;: &#34;Shelley&#34;,&#xA;    &#34;spending_key_hash&#34;: &#34;54947bcf6b760319bcec250ec225fd1ce63baface47e34b44b73e4f9&#34;,&#xA;    &#34;network_tag&#34;: 0,&#xA;    &#34;address_type&#34;: 6&#xA;}&#xA;&#xA;$ echo addr_test1qp2fg770ddmqxxduasjsas39l5wwvwa04nj8ud95fde7f70k6tew7wrnx0s4465nx05ajz890g44z0kx6a3gsnms4c4qq8ve0n | cardano-address address inspect&#xA;{&#xA;    &#34;stake_reference&#34;: &#34;by value&#34;,&#xA;    &#34;stake_key_hash_bech32&#34;: &#34;stake_vkh17mf09mecwve7zkh2jve7nkggu4azk5f7cmtk9zz0wzhz5efq2w6&#34;,&#xA;    &#34;stake_key_hash&#34;: &#34;f6d2f2ef387333e15aea9333e9d908e57a2b513ec6d762884f70ae2a&#34;,&#xA;    &#34;spending_key_hash_bech32&#34;: &#34;addr_vkh12j28hnmtwcp3n08vy58vyf0arnnrhtavu3lrfdztw0j0jng3d6v&#34;,&#xA;    &#34;address_style&#34;: &#34;Shelley&#34;,&#xA;    &#34;spending_key_hash&#34;: &#34;54947bcf6b760319bcec250ec225fd1ce63baface47e34b44b73e4f9&#34;,&#xA;    &#34;network_tag&#34;: 0,&#xA;    &#34;address_type&#34;: 0&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Details about possible address types are following (refer also to &lt;a href=&#34;https://github.com/input-output-hk/cardano-ledger/raw/master/eras/alonzo/test-suite/cddl-files/alonzo.cddl&#34;&gt;cddl&lt;/a&gt; )&lt;/p&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th&gt;address_type&lt;/th&gt; &#xA;    &lt;th align=&#34;center&#34;&gt;binary prefix&lt;/th&gt; &#xA;    &lt;th align=&#34;center&#34;&gt;Meaning&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;0&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;0000&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;base address: keyhash28,keyhash28&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;1&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;0001&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;base address: scripthash28,keyhash28&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;2&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;0010&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;base address: keyhash28,scripthash28&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;3&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;0011&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;base address: scripthash28,scripthash28&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;4&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;0100&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;pointer address: keyhash28, 3 variable length uint&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;5&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;0101&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;pointer address: scripthash28, 3 variable length uint&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;6&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;0110&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;enterprise address: keyhash28&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;7&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;0111&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;enterprise address: scripthash28&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;8&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;1000&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;byron/icarus&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;14&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;1110&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;reward account: keyhash28&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;15&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;1111&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;reward account: scripthash28&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;How to generate a payment verification key for shared wallet (&lt;strong&gt;addr_shared.vk&lt;/strong&gt;, &lt;strong&gt;stake_shared.vk&lt;/strong&gt;)&lt;/summary&gt; &#xA; &lt;p&gt;Let&#39;s generate extended root private key for shared style:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ cardano-address key from-recovery-phrase Shared &amp;lt; phrase.prv &amp;gt; root_shared.xsk&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Now generate payment verification key (&lt;code&gt;role=0&lt;/code&gt; is used). Please note that purpose &lt;code&gt;1854H&lt;/code&gt; is used for multisig.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ cardano-address key child 1854H/1815H/0H/0/0 &amp;lt; root_shared.xsk | cardano-address key public --without-chain-code &amp;gt; addr_shared.vk&#xA;addr_shared_vk1a9h46rvjnqquxz02zyesh0ct29szh7vv9x7r2h87ttmnkgrfgguqhz0mtc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Generating delegation verification key is the similar (the only difference is role=2)&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ cardano-address key child 1854H/1815H/0H/2/0 &amp;lt; root_shared.xsk | cardano-address key public --without-chain-code &amp;gt; stake_shared.vk&#xA;stake_shared_vk18a8z5dcrlwene88n84j6dm9yvj5rt296fjtresqnunmacetdcymquyq43z&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;blockquote&gt; &#xA;  &lt;p&gt;&lt;span&gt;ℹ&lt;/span&gt; The last segment in the path is the key index, which can be incremented to derive more keys. Up &lt;code&gt;2^31-1&lt;/code&gt; keys are possible.&lt;/p&gt; &#xA; &lt;/blockquote&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;How to construct a multisig script hash (&lt;strong&gt;script.hash&lt;/strong&gt;)&lt;/summary&gt; &#xA; &lt;p&gt;We consider &lt;code&gt;addr_shared.1.vk&lt;/code&gt; and &lt;code&gt;addr_shared.2.vk&lt;/code&gt; obtained like &lt;code&gt;addr_shared.vk&lt;/code&gt; but by replacing the final index by &lt;code&gt;1&lt;/code&gt; and &lt;code&gt;2&lt;/code&gt; respectively.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ cardano-address script hash &#34;all [$(cat addr_shared.1.vk), $(cat addr_shared.2.vk)]&#34; &amp;gt; script.hash&#xA;script1gr69m385thgvkrtspk73zmkwk537wxyxuevs2u9cukglvtlkz4k&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;This script requires the signature from both signing keys corresponding to &lt;code&gt;shared_addr.1.vk&lt;/code&gt; and &lt;code&gt;shared_addr.2.vk&lt;/code&gt; (ie., shared_addr.1.sk and shared_addr.2.sk) in order to be valid. Similarly, we could require only one of the two signatures:&lt;/p&gt; &#xA; &lt;p&gt;We can also use extended verification, eiher payment or delegation, keys. They can be obtained as the non-extended ones by using &lt;code&gt;--with-chain-code&lt;/code&gt; option rather than &lt;code&gt;--without-chain-option&lt;/code&gt; as above. They will give rise to the same script hash as for verification keys chain code is stripped upon calculation.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ cardano-address script hash &#34;any [$(cat addr_shared.1.xvk), $(cat addr_shared.2.xvk)]&#34;&#xA;script1gr69m385thgvkrtspk73zmkwk537wxyxuevs2u9cukglvtlkz4k&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;which is equivalent (functionally, but not in terms of hash value) to :&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ cardano-address script hash &#34;at_least 1 [$(cat addr_shared.1.xvk), $(cat addr_shared.2.xvk)]&#34;&#xA;script13uf3fz3ts5srpjc5zcfe977uvnyvp36wcvxuudryegz0zpjlx6a&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;How to construct a multisig script hash with timelocks&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$  cardano-address script hash &#34;all [$(cat addr_shared.1.xvk), $(cat addr_shared.2.xvk), active_from 100, active_until 120]&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;How to validate a script&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$  cardano-address script validate &#34;at_least 1 [$(cat addr_shared.1.xvk), $(cat addr_shared.2.xvk), $(cat addr_shared.2.xvk)]&#34;&#xA;Validated.&#xA;&#xA;$  cardano-address script validate --recommended  &#34;at_least 1 [$(cat addr_shared.1.xvk), $(cat addr_shared.2.xvk), $(cat addr_shared.2.xvk)]&#34;&#xA;Not validated: The list inside a script has duplicate keys (which is not recommended)..&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;How to get preimage for a script&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ cardano-address script preimage &#34;all [addr_shared_vkh1zxt0uvrza94h3hv4jpv0ttddgnwkvdgeyq8jf9w30mcs6y8w3nq, addr_shared_vkh1y3zl4nqgm96ankt96dsdhc86vd5geny0wr7hu8cpzdfcqskq2cp]&#34;&#xA;008201828200581c1196fe3062e96b78dd959058f5adad44dd663519200f2495d17ef10d8200581c2445facc08d975d9d965d360dbe0fa63688ccc8f70fd7e1f01135380&#xA;&#xA;$  cardano-address script preimage &#34;all [addr_shared_vkh1zxt0uvrza94h3hv4jpv0ttddgnwkvdgeyq8jf9w30mcs6y8w3nq, active_from 100, active_until 150]&#34;&#xA;008201838200581c1196fe3062e96b78dd959058f5adad44dd663519200f2495d17ef10d8204186482051896&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;How to generate a payment script address from a script hash (&lt;strong&gt;script.addr&lt;/strong&gt;)&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ cardano-address address payment --network-tag testnet &amp;lt; script.hash &amp;gt; script.addr&#xA;addr_test1wqqggtajwkxjgf58v452jz6jl87lt32w3mhez5hd7xz6hugp80tta&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Correspondence between keys in cardano-addresses and cardano-cli (&lt;strong&gt;key.xsk key.xvk key.vk key.hash&lt;/strong&gt;)&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;Let&#39;s assume we have mnemonic&#xA;$ cat recovery-phrase.prv&#xA;nothing heart matrix fly sleep slogan tomato pulse what roof rail since plastic false enlist&#xA;&#xA;Construct root extended private key&#xA;$ cardano-address key from-recovery-phrase Shelley &amp;lt; recovery-phrase.prv &amp;gt; root.xprv&#xA;root_xsk1apjwjs3ksgm5mnnk0cc5v5emgv0hmafmmy8tffay5s2ffk69830whwznr46672ruucdzwwtv9upv72e4ylrypyz5m6cyh0p00t7n3u3agt20lv32j4kxcqlkzu78nzjx0ysxxlc2ghfz9prxfmrds802xsuhh404~&#xA;&#xA;Construct extended private key for account ix=0H, role=0 and address ix=0&#xA;$ cardano-address key child 1852H/1815H/0H/0/0 &amp;lt; root.xprv &amp;gt; key.xsk&#xA;addr_xsk1kzl5vgev0u843tfnxqcwg0lmaf7zhdhczddaqhas6dp6m6z98302e3avp8mhu94kxkpj2gss064f74km3rrptafh4fsztekz8k5c469shcvx35wrdmus3xemp984lcwhs0jdtl4pfcsrfspe00h9pej6rg8drvcv&#xA;&#xA;Create extended signing key using cardano-cli&#xA;$ cardano-cli key convert-cardano-address-key --shelley-payment-key --signing-key-file key.xsk --out-file key.skey&#xA;{&#xA;    &#34;type&#34;: &#34;PaymentExtendedSigningKeyShelley_ed25519_bip32&#34;,&#xA;    &#34;description&#34;: &#34;&#34;,&#xA;    &#34;cborHex&#34;: &#34;5880b0bf46232c7f0f58ad333030e43ffbea7c2bb6f8135bd05fb0d343ade8453c5eacc7ac09f77e16b635832522107eaa9f56db88c615f537aa6025e6c23da98ae8fbbbf6410e24532f35e9279febb085d2cc05b3b2ada1df77ea1951eb694f3834b0be1868d1c36ef9089b3b094f5fe1d783e4d5fea14e2034c0397bee50e65a1a&#34;&#xA;}&#xA;&#xA;The cborhex here contains of 4 parts:&#xA;1. prefix 5880 - bytestring of 128 bytes&#xA;2. signing key (64 bytes) - b0bf46232c7f0f58ad333030e43ffbea7c2bb6f8135bd05fb0d343ade8453c5eacc7ac09f77e16b635832522107eaa9f56db88c615f537aa6025e6c23da98ae8&#xA;3. verification key (32 bytes) - fbbbf6410e24532f35e9279febb085d2cc05b3b2ada1df77ea1951eb694f3834&#xA;4. chain code (32 bytes) - b0be1868d1c36ef9089b3b094f5fe1d783e4d5fea14e2034c0397bee50e65a1a&#xA;&#xA;Create corresponding verification key using cardano-cli&#xA;$ cardano-cli key verification-key --signing-key-file key.skey --verification-key-file key.vkey&#xA;{&#xA;    &#34;type&#34;: &#34;PaymentExtendedVerificationKeyShelley_ed25519_bip32&#34;,&#xA;    &#34;description&#34;: &#34;&#34;,&#xA;    &#34;cborHex&#34;: &#34;5840fbbbf6410e24532f35e9279febb085d2cc05b3b2ada1df77ea1951eb694f3834b0be1868d1c36ef9089b3b094f5fe1d783e4d5fea14e2034c0397bee50e65a1a&#34;&#xA;}&#xA;The cborhex here contains of 3 parts:&#xA;1. prefix 5840 - bytestring of 64 bytes&#xA;2. verification key (32 bytes) - fbbbf6410e24532f35e9279febb085d2cc05b3b2ada1df77ea1951eb694f3834&#xA;3. chain code (32 bytes) - b0be1868d1c36ef9089b3b094f5fe1d783e4d5fea14e2034c0397bee50e65a1a&#xA;&#xA;Rule for prefixes:&#xA;  - CBOR-encoded bytestring (which is what the 58 identifies)&#xA;  - size (80 means 128 bytes, whereas 40 means 64 bytes, 20 means 32 bytes)&#xA;&#xA;Create verification key hash using cardano-cli&#xA;$ cardano-cli address key-hash --payment-verification-key-file key.vkey &amp;gt; key.hash&#xA;0185545935760c5e370d01e6f4fedbb89b7fd79e115f2837cfab9ea8&#xA;&#xA;Alternatively, we can create non-extended key&#xA;$ cardano-address key public --without-chain-code &amp;lt; key.xsk &amp;gt; key.vk&#xA;addr_vk1lwalvsgwy3fj7d0fy707hvy96txqtvaj4ksa7al2r9g7k6208q6qmrv9k3&#xA;&#xA;Also, take notice that signing key can be translated to cborhex:&#xA;$ cat key.xsk | bech32&#xA;b0bf46232c7f0f58ad333030e43ffbea7c2bb6f8135bd05fb0d343ade8453c5eacc7ac09f77e16b635832522107eaa9f56db88c615f537aa6025e6c23da98ae8b0be1868d1c36ef9089b3b094f5fe1d783e4d5fea14e2034c0397bee50e65a1a&#xA;(signing key and chain code appended)&#xA;&#xA;Moreover, basing on key.vk one can get hash&#xA;$ cardano-cli address key-hash --payment-verification-key $(cat key.vk) &amp;gt; key1.hash&#xA;0185545935760c5e370d01e6f4fedbb89b7fd79e115f2837cfab9ea8&#xA;&#xA;Within cardano-addresses one can get cborhex of verification key (with chain code)&#xA;$ cardano-address key public --with-chain-code &amp;lt; key.xsk | bech32&#xA;fbbbf6410e24532f35e9279febb085d2cc05b3b2ada1df77ea1951eb694f3834b0be1868d1c36ef9089b3b094f5fe1d783e4d5fea14e2034c0397bee50e65a1a&#xA;(verification key and chain code appended)&#xA;&#xA;Within cardano-addresses one can get cborhex of verification key (without chain code)&#xA;$ cardano-address key public --without-chain-code &amp;lt; key.xsk | bech32&#xA;fbbbf6410e24532f35e9279febb085d2cc05b3b2ada1df77ea1951eb694f3834&#xA;(verification key without chain code)&#xA;&#xA;Then, we can get compute hash (but here we need to use without chain code):&#xA;$ cardano-address key public --without-chain-code &amp;lt; key.xsk | cardano-address key hash | bech32&#xA;0185545935760c5e370d01e6f4fedbb89b7fd79e115f2837cfab9ea8&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Docker Image&lt;/h2&gt; &#xA;&lt;h3&gt;Build&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ docker build -t cardano-address .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Run&lt;/h3&gt; &#xA;&lt;p&gt;Use the auto-remove flag &lt;code&gt;--rm&lt;/code&gt; when running commands.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ docker run --rm cardano-address recovery-phrase generate --size 15&#xA;dismiss grit bacon glare napkin satisfy tribe proud carpet bench fantasy rich history face north&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use the interactive flag &lt;code&gt;-i&lt;/code&gt; when piping stdin&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ echo &#34;addr1gqtnpvdhqrtpd4g424fcaq7k0ufuzyadt7djygf8qdyzevuph3wczvf2dwyx5u&#34; | docker run --rm -i cardano-addresses address inspect&#xA;{&#xA;    &#34;address_style&#34;: &#34;Shelley&#34;,&#xA;    &#34;stake_reference&#34;: &#34;by pointer&#34;,&#xA;    &#34;spending_key_hash&#34;: &#34;1730b1b700d616d51555538e83d67f13c113ad5f9b22212703482cb3&#34;,&#xA;    &#34;pointer&#34;: {&#xA;        &#34;slot_num&#34;: 24157,&#xA;        &#34;output_index&#34;: 42,&#xA;        &#34;transaction_index&#34;: 177&#xA;    },&#xA;    &#34;network_tag&#34;: 0&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;NPM Package&lt;/h2&gt; &#xA;&lt;p&gt;There is an experimental NPM module for JavaScript and TypeScript available, which works in both NodeJS and the browser.&lt;/p&gt; &#xA;&lt;p&gt;Here is a code sample showing how it can be used:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var cardanoAddresses = require(&#39;cardano-addresses&#39;)&#xA;var addr = &#39;addr1gqtnpvdhqrtpd4g424fcaq7k0ufuzyadt7djygf8qdyzevuph3wczvf2dwyx5u&#39;&#xA;&#xA;cardanoAddresses.inspectAddress(addr)&#xA;  .then(info =&amp;gt; console.log(info)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.npmjs.com/package/cardano-addresses&#34;&gt;NPM Package&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://input-output-hk.github.io/cardano-addresses/typescript/&#34;&gt;API Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://input-output-hk.github.io/cardano-addresses/demo/&#34;&gt;Web Demo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/cardano-addresses/master/jsapi/README.md&#34;&gt;Development Info&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Pull requests are welcome.&lt;/p&gt; &#xA;&lt;p&gt;When creating a pull request, please make sure that your code adheres to our &lt;a href=&#34;https://input-output-hk.github.io/adrestia/code/Coding-Standards&#34;&gt;coding standards&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/input-output-hk/cardano-addresses/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/input-output-hk/cardano-addresses.svg?style=for-the-badge&#34;&gt;&lt;/a&gt; &lt;/p&gt;</summary>
  </entry>
</feed>