<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Haskell Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-05-14T01:56:19Z</updated>
  <subtitle>Weekly Trending of Haskell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>input-output-hk/ouroboros-consensus</title>
    <updated>2023-05-14T01:56:19Z</updated>
    <id>tag:github.com,2023-05-14:/input-output-hk/ouroboros-consensus</id>
    <link href="https://github.com/input-output-hk/ouroboros-consensus" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Implementation of a Consensus Layer for the Ouroboros family of protocols&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;a href=&#34;https://input-output-hk.github.io/ouroboros-consensus/&#34;&gt;Ouroboros Consensus&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://input-output-hk.github.io/cardano-haskell-packages/package/ouroboros-consensus-0.6.0.0/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/ouroboros--consensus-0.6.0.0-blue&#34; alt=&#34;consensus&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://input-output-hk.github.io/cardano-haskell-packages/package/ouroboros-consensus-diffusion-0.5.1.0/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/ouroboros--consensus--diffusion-0.5.1.0-blue&#34; alt=&#34;diffusion&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://input-output-hk.github.io/cardano-haskell-packages/package/ouroboros-consensus-protocol-0.5.0.1/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/ouroboros--consensus--protocol-0.5.0.1-blue&#34; alt=&#34;protocol&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://input-output-hk.github.io/cardano-haskell-packages/package/ouroboros-consensus-cardano-0.5.0.1/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/ouroboros--consensus--cardano-0.5.0.1-blue&#34; alt=&#34;cardano&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://input-output-hk.github.io/ouroboros-consensus/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Documentation-yellow&#34; alt=&#34;docs&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Implementation of the &lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/ouroboros-consensus/main/docs/website/docs/References.md&#34;&gt;Ouroboros-family&lt;/a&gt; of consensus algorithms.&lt;/p&gt; &#xA;&lt;h2&gt;Libraries and executables&lt;/h2&gt; &#xA;&lt;p&gt;This repository provides four packages, with the following dependencies among them:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;flowchart TD&#xA;    D[ouroboros-consensus-diffusion] --&amp;gt; C&#xA;    A[ouroboros-consensus-cardano] --&amp;gt; B[ouroboros-consensus-protocol]&#xA;    A --&amp;gt; C&#xA;    B --&amp;gt; C[ouroboros-consensus]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The packages contain many test-suites that complicate the dependency graph as they create new depencency arcs.&lt;/p&gt; &#xA;&lt;p&gt;This repository also provides two executables:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;ouroboros-consensus-cardano/app/db-analyser.hs&lt;/code&gt;: for analyzing ChainDBs as the ones created by the node. This helps identifying performance hotspots and testing that the validating logic remains correct.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;ouroboros-consensus-cardano/app/db-synthesizer.hs&lt;/code&gt;: for quickly generating chains to be used in benchmarking.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To list all the available Cabal components, one can use the following script because unfortunately, &lt;code&gt;cabal&lt;/code&gt; doesn&#39;t have a command to list the &lt;a href=&#34;https://github.com/haskell/cabal/issues/4070&#34;&gt;available targets&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;for f in $(find ouroboros-consensus* -type f -name &#34;*.cabal&#34;); do&#xA;    printf &#34;Components of package %s:\n&#34; $f;&#xA;    cat $f | grep -E &#34;^(library|test-suite|executable|benchmark)&#34; \&#xA;      | sed &#39;s/library /ü§´üì¶ /g&#39; \&#xA;      | sed &#39;s/test-suite /üß™   /g&#39; \&#xA;      | sed &#39;s/benchmark /üèÅ   /g&#39; \&#xA;      | sed &#39;s/executable /‚öôÔ∏è    /g&#39; \&#xA;      | sed &#34;s/library/üì¶   $(echo $f | cut -d\/ -f2 | cut -d\. -f1)/g&#34;&#xA;    printf &#34;\n\n&#34;&#xA;done&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Building the project&lt;/h2&gt; &#xA;&lt;p&gt;We use &lt;code&gt;cabal&lt;/code&gt; to build our project, potentially inside a Nix shell (&lt;code&gt;nix develop&lt;/code&gt; or &lt;code&gt;nix-shell&lt;/code&gt;). It should suffice with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; cabal build all&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Specific executables can be executed through cabal once built:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; cabal run db-analyser&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Testing the project&lt;/h2&gt; &#xA;&lt;p&gt;The project is tested with numerous Haskell test suites. To run every test suite, one can use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; cabal test all&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For running specific test-suites (such as &lt;code&gt;consensus-test&lt;/code&gt;), we recommend one of the following commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; cabal run ouroboros-consensus:test:consensus-test -- &amp;lt;args&amp;gt;&#xA;&amp;gt; cabal test ouroboros-consensus:test:consensus-test --test-show-details=direct&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note the second one cannot be used when we want to provide CLI arguments to the test-suite.&lt;/p&gt; &#xA;&lt;h2&gt;Using Consensus as a dependency&lt;/h2&gt; &#xA;&lt;p&gt;We make releases to the &lt;a href=&#34;https://input-output-hk.github.io/cardano-haskell-packages/all-packages/&#34;&gt;Cardano Haskell Package&lt;/a&gt; repository from where you should pull new releases.&lt;/p&gt; &#xA;&lt;p&gt;To use CHaP, follow their Readme, but in short:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Add this at the top of your &lt;code&gt;cabal.project&lt;/code&gt; file:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;repository cardano-haskell-packages&#xA;  url: https://input-output-hk.github.io/cardano-haskell-packages&#xA;  secure: True&#xA;  root-keys:&#xA;    3e0cce471cf09815f930210f7827266fd09045445d65923e6d0238a6cd15126f&#xA;    443abb7fb497a134c343faf52f0b659bd7999bc06b7f63fa76dc99d631f9bea1&#xA;    a86a1f6ce86c449c46666bda44268677abf29b5b2d2eb5ec7af903ec2f117a82&#xA;    bcec67e8e99cabfa7764d75ad9b158d72bfacf70ca1d0ec8bc6b4406d1bf8413&#xA;    c00aae8461a256275598500ea0e187588c35a5d5d7454fb57eac18d9edb86a56&#xA;    d4a35cd3121aa00d18544bb0ac01c3e1691d618f462c46129271bccf39f7e8ee&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;Run &lt;code&gt;cabal update&lt;/code&gt; to pull in the latest index.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Specify which version of the index you want for both Hackage and CHaP. Note that it has to be higher or equal to the highest timestamp of the release versions of the packages that you want to use as dependencies:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;index-state:&#xA; , hackage.haskell.org      2023-04-12T00:00:00Z&#xA; , cardano-haskell-packages 2023-04-23T00:00:00Z&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;At this point, you should be able to declare our libraries as dependencies in your &lt;code&gt;build-depends&lt;/code&gt; list on your cabal files.&lt;/p&gt; &#xA;&lt;p&gt;If you use Nix, see the &lt;a href=&#34;https://input-output-hk.github.io/cardano-haskell-packages/&#34;&gt;CHaP website&lt;/a&gt; on how to configure CHaP for haskell.nix.&lt;/p&gt; &#xA;&lt;h2&gt;How to contribute to the project&lt;/h2&gt; &#xA;&lt;p&gt;Your help is greatly appreciated. Please see &lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/ouroboros-consensus/main/CONTRIBUTING.md&#34;&gt;our CONTRIBUTING document&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;How to submit an issue&lt;/h2&gt; &#xA;&lt;p&gt;Issues can be filled in our &lt;a href=&#34;https://github.com/input-output-hk/ouroboros-consensus/issues&#34;&gt;GitHub issue tracker&lt;/a&gt;. Please use the provided issue templates.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;We have several sources of documentation:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://input-output-hk.github.io/ouroboros-consensus/haddocks/&#34;&gt;Haddocks&lt;/a&gt;: our code is full of haddock annotations and comments that try to clarify expected behaviors and subtleties. Reading through the code should provide most of the information on how is Consensus implemented.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://input-output-hk.github.io/ouroboros-consensus/&#34;&gt;Website&lt;/a&gt;: this website provides access to the markdown documentation to which step by step we want to move the bulk of the &#34;higher level documentation&#34; as well as achitectural documentation.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/ouroboros-consensus/main/docs/report/&#34;&gt;Report&lt;/a&gt;: this in-depth technical report describes many of the deep choices made in the implementation of the Consensus layer, as well as non-trivial lemmas or properties of the Consensus algorithms that have perspired to the implementation. Although incomplete in some sections, it is a mandatory reading for anyone looking to understand why Consensus does what it does.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>ghc/ghc</title>
    <updated>2023-05-14T01:56:19Z</updated>
    <id>tag:github.com,2023-05-14:/ghc/ghc</id>
    <link href="https://github.com/ghc/ghc" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Mirror of the Glasgow Haskell Compiler. Please submit issues and patches to GHC&#39;s Gitlab instance (https://gitlab.haskell.org/ghc/ghc). First time contributors are encouraged to get started with the newcomers info (https://gitlab.haskell.org/ghc/ghc/wikis/contributing).&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;The Glasgow Haskell Compiler&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gitlab.haskell.org/ghc/ghc/commits/master&#34;&gt;&lt;img src=&#34;https://gitlab.haskell.org/ghc/ghc/badges/master/pipeline.svg?style=flat&#34; alt=&#34;pipeline status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This is the source tree for &lt;a href=&#34;http://www.haskell.org/ghc/&#34; title=&#34;www.haskell.org/ghc/&#34;&gt;GHC&lt;/a&gt;, a compiler and interactive environment for the Haskell functional programming language.&lt;/p&gt; &#xA;&lt;p&gt;For more information, visit &lt;a href=&#34;http://www.haskell.org/ghc/&#34; title=&#34;www.haskell.org/ghc/&#34;&gt;GHC&#39;s web site&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Information for developers of GHC can be found on the &lt;a href=&#34;https://gitlab.haskell.org/ghc/ghc/issues&#34; title=&#34;gitlab.haskell.org/ghc/ghc/issues&#34;&gt;GHC issue tracker&lt;/a&gt;, and you can also view &lt;a href=&#34;https://github.com/ghc-proposals/ghc-proposals&#34; title=&#34;https://github.com/ghc-proposals/ghc-proposals&#34;&gt;proposals for new GHC features&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Getting the Source&lt;/h1&gt; &#xA;&lt;p&gt;There are two ways to get a source tree:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;em&gt;Download source tarballs&lt;/em&gt;&lt;/p&gt; &lt;p&gt;Download the GHC source distribution:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;ghc-&amp;lt;version&amp;gt;-src.tar.xz&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;which contains GHC itself and the &#34;boot&#34; libraries.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;em&gt;Check out the source code from git&lt;/em&gt;&lt;/p&gt; &lt;pre&gt;&lt;code&gt;$ git clone --recurse-submodules git@gitlab.haskell.org:ghc/ghc.git&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Note: cloning GHC from Github requires a special setup. See &lt;a href=&#34;https://gitlab.haskell.org/ghc/ghc/wikis/building/getting-the-sources#cloning-from-github&#34; title=&#34;https://gitlab.haskell.org/ghc/ghc/wikis/building/getting-the-sources#cloning-from-github&#34;&gt;Getting a GHC repository from Github&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;em&gt;See the GHC team&#39;s working conventions regarding &lt;a href=&#34;https://gitlab.haskell.org/ghc/ghc/wikis/working-conventions/fixing-bugs&#34;&gt;how to contribute a patch to GHC&lt;/a&gt;.&lt;/em&gt; First time contributors are encouraged to get started by just sending a Merge Request.&lt;/p&gt; &#xA;&lt;h1&gt;Building &amp;amp; Installing&lt;/h1&gt; &#xA;&lt;p&gt;For full information on building GHC, see the &lt;a href=&#34;https://gitlab.haskell.org/ghc/ghc/wikis/building&#34; title=&#34;https://gitlab.haskell.org/ghc/ghc/wikis/building&#34;&gt;GHC Building Guide&lt;/a&gt;. Here follows a summary - if you get into trouble, the Building Guide has all the answers.&lt;/p&gt; &#xA;&lt;p&gt;Before building GHC you may need to install some other tools and libraries. See, &lt;a href=&#34;https://gitlab.haskell.org/ghc/ghc/wikis/building/preparation&#34; title=&#34;https://gitlab.haskell.org/ghc/ghc/wikis/building/preparation&#34;&gt;Setting up your system for building GHC&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;NB.&lt;/em&gt; In particular, you need &lt;a href=&#34;http://www.haskell.org/ghc/&#34; title=&#34;www.haskell.org/ghc/&#34;&gt;GHC&lt;/a&gt; installed in order to build GHC, because the compiler is itself written in Haskell. You also need &lt;a href=&#34;http://www.haskell.org/happy/&#34; title=&#34;www.haskell.org/happy/&#34;&gt;Happy&lt;/a&gt;, &lt;a href=&#34;http://www.haskell.org/alex/&#34; title=&#34;www.haskell.org/alex/&#34;&gt;Alex&lt;/a&gt;, and &lt;a href=&#34;http://www.haskell.org/cabal/&#34; title=&#34;http://www.haskell.org/cabal/&#34;&gt;Cabal&lt;/a&gt;. For instructions on how to port GHC to a new platform, see the &lt;a href=&#34;https://gitlab.haskell.org/ghc/ghc/wikis/building&#34; title=&#34;https://gitlab.haskell.org/ghc/ghc/wikis/building&#34;&gt;GHC Building Guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For building library documentation, you&#39;ll need &lt;a href=&#34;http://www.haskell.org/haddock/&#34; title=&#34;www.haskell.org/haddock/&#34;&gt;Haddock&lt;/a&gt;. To build the compiler documentation, you need &lt;a href=&#34;http://www.sphinx-doc.org/&#34;&gt;Sphinx&lt;/a&gt; and Xelatex (only for PDF output).&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Quick start&lt;/strong&gt;: GHC is built using the &lt;a href=&#34;https://raw.githubusercontent.com/ghc/ghc/master/hadrian/README.md&#34;&gt;Hadrian build system&lt;/a&gt;. The following gives you a default build:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ./boot&#xA;$ ./configure&#xA;$ hadrian/build         # can also say &#39;-jX&#39; for X number of jobs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On Windows, you need an extra repository containing some build tools. These can be downloaded for you by configure. This only needs to be done once by running:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ./configure --enable-tarballs-autodownload&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Additionally, on Windows, to run Hadrian you should run &lt;code&gt;hadrian/build.bat&lt;/code&gt; instead of &lt;code&gt;hadrian/build&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;(NB: &lt;strong&gt;Do you have multiple cores? Be sure to tell that to &lt;code&gt;hadrian&lt;/code&gt;!&lt;/strong&gt; This can save you hours of build time depending on your system configuration, and is almost always a win regardless of how many cores you have. As a simple rule, you should have about N+1 jobs, where &lt;code&gt;N&lt;/code&gt; is the amount of cores you have.)&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;./boot&lt;/code&gt; step is only necessary if this is a tree checked out from git. For source distributions downloaded from &lt;a href=&#34;http://www.haskell.org/ghc/&#34; title=&#34;www.haskell.org/ghc/&#34;&gt;GHC&#39;s web site&lt;/a&gt;, this step has already been performed.&lt;/p&gt; &#xA;&lt;p&gt;These steps give you the default build, which includes everything optimised and built in various ways (eg. profiling libs are built). It can take a long time. To customise the build, see the file &lt;code&gt;HACKING.md&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Filing bugs and feature requests&lt;/h1&gt; &#xA;&lt;p&gt;If you&#39;ve encountered what you believe is a bug in GHC, or you&#39;d like to propose a feature request, please let us know! Submit an &lt;a href=&#34;https://gitlab.haskell.org/ghc/ghc/issues&#34; title=&#34;https://gitlab.haskell.org/ghc/ghc/issues&#34;&gt;issue&lt;/a&gt; and we&#39;ll be sure to look into it. Remember: &lt;strong&gt;Filing a bug is the best way to make sure your issue isn&#39;t lost over time&lt;/strong&gt;, so please feel free.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re an active user of GHC, you may also be interested in joining the &lt;a href=&#34;http://www.haskell.org/pipermail/glasgow-haskell-users/&#34; title=&#34;http://www.haskell.org/pipermail/glasgow-haskell-users/&#34;&gt;glasgow-haskell-users&lt;/a&gt; mailing list, where developers and GHC users discuss various topics and hang out.&lt;/p&gt; &#xA;&lt;h1&gt;Hacking &amp;amp; Developing GHC&lt;/h1&gt; &#xA;&lt;p&gt;Once you&#39;ve filed a bug, maybe you&#39;d like to fix it yourself? That would be great, and we&#39;d surely love your company! If you&#39;re looking to hack on GHC, check out the guidelines in the &lt;code&gt;HACKING.md&lt;/code&gt; file in this directory - they&#39;ll get you up to speed quickly.&lt;/p&gt; &#xA;&lt;h1&gt;Contributors &amp;amp; Acknowledgements&lt;/h1&gt; &#xA;&lt;p&gt;GHC in its current form wouldn&#39;t exist without the hard work of &lt;a href=&#34;https://gitlab.haskell.org/ghc/ghc/wikis/team-ghc&#34; title=&#34;https://gitlab.haskell.org/ghc/ghc/wikis/team-ghc&#34;&gt;its many contributors&lt;/a&gt;. Over time, it has grown to include the efforts and research of many institutions, highly talented people, and groups from around the world. We&#39;d like to thank them all, and invite you to join!&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>jongisli/ap-ass1-maze</title>
    <updated>2023-05-14T01:56:19Z</updated>
    <id>tag:github.com,2023-05-14:/jongisli/ap-ass1-maze</id>
    <link href="https://github.com/jongisli/ap-ass1-maze" rel="alternate"></link>
    <summary type="html">&lt;p&gt;maze&lt;/p&gt;&lt;hr&gt;&lt;p&gt;Gummi og Jon&lt;/p&gt;</summary>
  </entry>
</feed>