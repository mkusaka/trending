<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Haskell Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-03-31T01:47:49Z</updated>
  <subtitle>Weekly Trending of Haskell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Harmos274/ImageCompressor</title>
    <updated>2024-03-31T01:47:49Z</updated>
    <id>tag:github.com,2024-03-31:/Harmos274/ImageCompressor</id>
    <link href="https://github.com/Harmos274/ImageCompressor" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Epitech Functional Programming : Image Compressor&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Image Compressor&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/K-means_clustering&#34;&gt;K-mean algorithm&lt;/a&gt; applied to image compression. &lt;br&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Build&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://docs.haskellstack.org/en/stable/README/&#34;&gt;Stack&lt;/a&gt; and &lt;a href=&#34;https://www.gnu.org/software/make/&#34;&gt;GNU Make&lt;/a&gt; are used to build the project.&lt;/p&gt; &#xA;&lt;h3&gt;Makefile&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$&amp;gt; git clone https://github.com/Harmos274/ImageCompressor&#xA;$&amp;gt; cd ImageCompressor&#xA;$&amp;gt; make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;How to use it ?&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$&amp;gt; ./imageCompressor -h&#xA;USAGE: ./imageCompressor n e input&#xA;&#xA;&#x9;n&#x9;&#x9;number of colors in the final image&#xA;&#x9;e&#x9;&#x9;convergence limit&#xA;&#x9;input&#x9;path of the file containing the colors of the pixels&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Input Format&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$&amp;gt; head exampleInput&#xA;(0,0) (33,18,109)&#xA;(0,1) (33,18,109)&#xA;(0,2) (33,21,109)&#xA;(0,3) (33,21,112)&#xA;(0,4) (33,25,112)&#xA;(0,5) (33,32,112)&#xA;(1,0) (33,18,109)&#xA;(1,1) (35,18,109)&#xA;(1,2) (35,21,109)&#xA;(1,3) (38,21,112)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The left column is the actual position of a pixel and the right column it&#39;s color. &lt;br&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Tests (With Tasty and HUnit)&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$&amp;gt; stack test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Note:&lt;/h2&gt; &#xA;&lt;p&gt;I could rework the project for fun to allow &lt;code&gt;bmp&lt;/code&gt; format. Not &lt;em&gt;&lt;strong&gt;certainly&lt;/strong&gt;&lt;/em&gt;, but i could do it.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>sjmeverett/haskell-editor</title>
    <updated>2024-03-31T01:47:49Z</updated>
    <id>tag:github.com,2024-03-31:/sjmeverett/haskell-editor</id>
    <link href="https://github.com/sjmeverett/haskell-editor" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>MIMUW-Inf-2002/JPP_testy</title>
    <updated>2024-03-31T01:47:49Z</updated>
    <id>tag:github.com,2024-03-31:/MIMUW-Inf-2002/JPP_testy</id>
    <link href="https://github.com/MIMUW-Inf-2002/JPP_testy" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Testy do zadań z JPP 2023/24&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;JPP_testy&lt;/h1&gt; &#xA;&lt;h2&gt;Zadanie 1 - Zbiory i grafy&lt;/h2&gt; &#xA;&lt;h3&gt;Uruchamianie testów&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Zainstaluj QuickCheck: &lt;code&gt;cabal install --lib QuickCheck&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Umieść pliki &lt;code&gt;Graph.hs&lt;/code&gt; oraz &lt;code&gt;Set.hs&lt;/code&gt; z rozwiązaniem w katalogu &lt;code&gt;zad01/&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Odpal &lt;code&gt;make&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Wykonaj &lt;code&gt;TestAll&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Dodawanie testów&lt;/h3&gt; &#xA;&lt;p&gt;(Fork)&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Dodaj własny plik z testami do katalogu &lt;code&gt;zad01&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Dodaj w pliku z testami funkcję main - tak jak w testach oficjalnych&lt;/li&gt; &#xA; &lt;li&gt;Dodaj do &lt;code&gt;TestAll.hs&lt;/code&gt; wywołanie funkcji &lt;code&gt;main&lt;/code&gt; z Twoich testów&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;(Pull request)&lt;/p&gt;</summary>
  </entry>
</feed>