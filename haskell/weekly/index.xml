<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Haskell Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-11-17T01:39:08Z</updated>
  <subtitle>Weekly Trending of Haskell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>gren-lang/compiler</title>
    <updated>2024-11-17T01:39:08Z</updated>
    <id>tag:github.com,2024-11-17:/gren-lang/compiler</id>
    <link href="https://github.com/gren-lang/compiler" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Compiler for the Gren programming language&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Gren&lt;/h1&gt; &#xA;&lt;p&gt;Compiler for Gren, a pure functional programming language that is easy to learn, but powerful in use.&lt;/p&gt; &#xA;&lt;p&gt;There are easier ways to install the compiler than compiling the source, you might want to read the &lt;a href=&#34;https://gren-lang.org/install&#34;&gt;setup instructions&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Build from source&lt;/h2&gt; &#xA;&lt;p&gt;This project uses &lt;a href=&#34;https://www.jetify.com/devbox&#34;&gt;devbox&lt;/a&gt; for managing dependencies required to build the project. If you don&#39;t want to use devbox, you can find a list of the requried dependencies and the commands for building the compiler in &lt;code&gt;devbox.json&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Since Gren 0.4 the compiler is implemented in two parts. The Gren-part of the compiler lives in &lt;code&gt;src&lt;/code&gt;, and once built it acts as a frontend to the Haskell-part of the compiler.&lt;/p&gt; &#xA;&lt;p&gt;The end goal is for the entire compiler to be written in Gren.&lt;/p&gt; &#xA;&lt;p&gt;To build the compiler:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Use &lt;code&gt;devbox run prepare-deps&lt;/code&gt; to setup the required dependencies. The first time you run this it might take a while.&lt;/li&gt; &#xA; &lt;li&gt;Build the compiler with &lt;code&gt;devbox run build&lt;/code&gt;. This will create a &lt;code&gt;cli.js&lt;/code&gt; file and a &lt;code&gt;gren&lt;/code&gt; executable in the project root directory.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;You can now execute the Gren-part of the compiler with &lt;code&gt;node ./cli.js&lt;/code&gt; or just &lt;code&gt;./cli.js&lt;/code&gt;. This either requires &lt;code&gt;node&lt;/code&gt; to be installed, or that you&#39;ve entered the development shell by using &lt;code&gt;devbox shell&lt;/code&gt;. The Gren-part of the compiler will by default download a pre-built binary of the Haskell-part from Github. If you want to run the compiler with the Haskell-part you&#39;ve just built, set the path to the Haskell-binary in a &lt;code&gt;GREN_BIN&lt;/code&gt; environment variable, like: &lt;code&gt;GREN_BIN=$PWD/gren node ./cli.js&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You might also want to study the scripts defined in &lt;code&gt;devbox.json&lt;/code&gt;. You can execute one of these scripts by running &lt;code&gt;devbox run &amp;lt;script_name&amp;gt;&lt;/code&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>