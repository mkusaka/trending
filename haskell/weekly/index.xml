<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Haskell Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-03T02:10:55Z</updated>
  <subtitle>Weekly Trending of Haskell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>erebe/wstunnel</title>
    <updated>2022-06-03T02:10:55Z</updated>
    <id>tag:github.com,2022-06-03:/erebe/wstunnel</id>
    <link href="https://github.com/erebe/wstunnel" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Tunneling over websocket protocol - Static binary available&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://github.com/erebe/wstunnel/raw/master/logo_wstunnel.png&#34; alt=&#34;wstunnel logo&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Description&lt;/h2&gt; &#xA;&lt;p&gt;Most of the time when you are using a public network, you are behind some kind of firewall or proxy. One of their purpose is to constrain you to only use certain kind of protocols. Nowadays, the most widespread protocol is http and is de facto allowed by third party equipment.&lt;/p&gt; &#xA;&lt;p&gt;This tool understands this fact and uses the websocket protocol which is compatible with http in order to bypass firewalls and proxies. Wstunnel allows you to tunnel what ever traffic you want.&lt;/p&gt; &#xA;&lt;p&gt;My inspiration came from &lt;a href=&#34;https://www.npmjs.com/package/wstunnel&#34;&gt;this project&lt;/a&gt; but as I don&#39;t want to install npm and nodejs to use this tool, I remade it in Haskell and improved it.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;What to expect:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Good error messages and debug informations&lt;/li&gt; &#xA; &lt;li&gt;Static tunneling (TCP and UDP)&lt;/li&gt; &#xA; &lt;li&gt;Dynamic tunneling (socks5 proxy)&lt;/li&gt; &#xA; &lt;li&gt;Support for http proxy (when behind one)&lt;/li&gt; &#xA; &lt;li&gt;Support for tls/https server (with embedded self signed certificate, see comment in the example section)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Standalone binary for linux x86_64&lt;/strong&gt; (so just cp it where you want)&lt;/li&gt; &#xA; &lt;li&gt;Standalone archive for windows&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;P.S: Please do not pay attention to Main.hs because as I hate to write command line code this file is crappy&lt;/p&gt; &#xA;&lt;h2&gt;Command line&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;Use the websockets protocol to tunnel {TCP,UDP} traffic&#xA;wsTunnelClient &amp;lt;---&amp;gt; wsTunnelServer &amp;lt;---&amp;gt; RemoteHost&#xA;Use secure connection (wss://) to bypass proxies&#xA;&#xA;wstunnel [OPTIONS] ws[s]://wstunnelServer[:port]&#xA;&#xA;Client options:&#xA;  -L --localToRemote=[BIND:]PORT:HOST:PORT      Listen on local and forwards&#xA;                                                traffic from remote. Can be&#xA;                                                used multiple time&#xA;  -D --dynamicToRemote=[BIND:]PORT              Listen on local and&#xA;                                                dynamically (with socks5 proxy)&#xA;                                                forwards traffic from remote&#xA;  -u --udp                                      forward UDP traffic instead&#xA;                                                of TCP&#xA;     --udpTimeoutSec=INT                        When using udp forwarding,&#xA;                                                timeout in seconds after when&#xA;                                                the tunnel connection is&#xA;                                                closed. Default 30sec, -1 means&#xA;                                                no timeout&#xA;  -p --httpProxy=USER:PASS@HOST:PORT            If set, will use this proxy&#xA;                                                to connect to the server&#xA;     --soMark=int                               (linux only) Mark network&#xA;                                                packet with SO_MARK sockoption&#xA;                                                with the specified value. You&#xA;                                                need to use {root, sudo,&#xA;                                                capabilities} to run wstunnel&#xA;                                                when using this option&#xA;     --upgradePathPrefix=String                 Use a specific prefix that&#xA;                                                will show up in the http path&#xA;                                                in the upgrade request. Useful&#xA;                                                if you need to route requests&#xA;                                                server side but don&#39;t have&#xA;                                                vhosts&#xA;     --hostHeader=String                        If set, add the custom string&#xA;                                                as host http header&#xA;     --tlsSNI=String                            If set, use custom string in&#xA;                                                the SNI during TLS handshake&#xA;     --websocketPingFrequencySec=int            do a hearthbeat ping every x&#xA;                                                seconds to maintain websocket&#xA;                                                connection&#xA;     --upgradeCredentials=USER[:PASS]           Credentials for the Basic&#xA;                                                HTTP authorization type sent&#xA;                                                with the upgrade request.&#xA;  -H --customHeaders=&#34;HeaderName: HeaderValue&#34;  Send custom headers in the&#xA;                                                upgrade request. Can be used&#xA;                                                multiple time&#xA;  -h --help                                     Display help message&#xA;  -V --version                                  Print version information&#xA;Server options:&#xA;     --server                                   Start a server that will&#xA;                                                forward traffic for you&#xA;  -r --restrictTo=HOST:PORT                     Accept traffic to be&#xA;                                                forwarded only to this service&#xA;Common options:&#xA;  -v --verbose                                  Print debug information&#xA;  -q --quiet                                    Print only errors&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;h3&gt;Simplest one&lt;/h3&gt; &#xA;&lt;p&gt;On your remote host, start the wstunnel&#39;s server by typing this command in your terminal&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;wstunnel --server ws://0.0.0.0:8080&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will create a websocket server listening on any interface on port 8080. On the client side use this command to forward traffic through the websocket tunnel&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;wstunnel -D 8888 ws://myRemoteHost:8080&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This command will create a sock5 server listening on port 8888 of a loopback interface and will forward traffic.&lt;/p&gt; &#xA;&lt;p&gt;With firefox you can setup a proxy using this tunnel, by setting in networking preferences 127.0.0.1:8888 and selecting socks5 proxy&lt;/p&gt; &#xA;&lt;p&gt;or with curl&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -x socks5h://127.0.0.1:8888 http://google.com/&#xA;#Please note h after the 5, it is to avoid curl resolving DNS name locally&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;As proxy command for SSH&lt;/h3&gt; &#xA;&lt;p&gt;You can specify &lt;code&gt;stdio&lt;/code&gt; as source port on the client side if you wish to use wstunnel as part of a proxy command for ssh&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;ssh -o ProxyCommand=&#34;wstunnel -L stdio:%h:%p ws://localhost:8080&#34; my-server&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;When behind a corporate proxy&lt;/h3&gt; &#xA;&lt;p&gt;An other useful example is when you want to bypass an http proxy (a corporate proxy for example) The most reliable way to do it is to use wstunnel as described below&lt;/p&gt; &#xA;&lt;p&gt;Start your wstunnel server with tls activated&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;wstunnel --server wss://0.0.0.0:443 -r 127.0.0.1:22&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The server will listen on any interface using port 443 (https) and restrict traffic to be forwarded only to the ssh daemon.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Be aware that the server will use self signed certificate with weak cryptographic algorithm. It was made in order to add the least possible overhead while still being compliant with tls.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Do not rely on wstunnel to protect your privacy, as it only forwards traffic that is already secure by design (ex: https)&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Now on the client side start the client with&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;wstunnel -L 9999:127.0.0.1:22 -p mycorporateproxy:8080 wss://myRemoteHost:443&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It will start a tcp server on port 9999 that will contact the corporate proxy, negotiate a tls connection with the remote host and forward traffic to the ssh daemon on the remote host.&lt;/p&gt; &#xA;&lt;p&gt;You may now access your server from your local machine on ssh by using&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;ssh -p 9999 login@127.0.0.1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Wireguard and wstunnel&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://kirill888.github.io/notes/wireguard-via-websocket/&#34;&gt;https://kirill888.github.io/notes/wireguard-via-websocket/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;How to Build&lt;/h2&gt; &#xA;&lt;p&gt;Install the stack tool &lt;a href=&#34;https://docs.haskellstack.org/en/stable/README/&#34;&gt;https://docs.haskellstack.org/en/stable/README/&lt;/a&gt; or if you are a believer&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;curl -sSL https://get.haskellstack.org/ | sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and run those commands at the root of the project&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;stack init&#xA;stack install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;TODO&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Add sock5 proxy&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Add better logging&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Add better error handling&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Add httpProxy authentification&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Add Reverse tunnel&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Add more tests for socks5 proxy&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>ghc/ghc</title>
    <updated>2022-06-03T02:10:55Z</updated>
    <id>tag:github.com,2022-06-03:/ghc/ghc</id>
    <link href="https://github.com/ghc/ghc" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Mirror of the Glasgow Haskell Compiler. Please submit issues and patches to GHC&#39;s Gitlab instance (https://gitlab.haskell.org/ghc/ghc). First time contributors are encouraged to get started with the newcomers info (https://gitlab.haskell.org/ghc/ghc/wikis/contributing).&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;The Glasgow Haskell Compiler&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gitlab.haskell.org/ghc/ghc/commits/master&#34;&gt;&lt;img src=&#34;https://gitlab.haskell.org/ghc/ghc/badges/master/pipeline.svg?style=flat&#34; alt=&#34;pipeline status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This is the source tree for &lt;a href=&#34;http://www.haskell.org/ghc/&#34; title=&#34;www.haskell.org/ghc/&#34;&gt;GHC&lt;/a&gt;, a compiler and interactive environment for the Haskell functional programming language.&lt;/p&gt; &#xA;&lt;p&gt;For more information, visit &lt;a href=&#34;http://www.haskell.org/ghc/&#34; title=&#34;www.haskell.org/ghc/&#34;&gt;GHC&#39;s web site&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Information for developers of GHC can be found on the &lt;a href=&#34;https://gitlab.haskell.org/ghc/ghc/issues&#34; title=&#34;gitlab.haskell.org/ghc/ghc/issues&#34;&gt;GHC issue tracker&lt;/a&gt;, and you can also view &lt;a href=&#34;https://github.com/ghc-proposals/ghc-proposals&#34; title=&#34;https://github.com/ghc-proposals/ghc-proposals&#34;&gt;proposals for new GHC features&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Getting the Source&lt;/h1&gt; &#xA;&lt;p&gt;There are two ways to get a source tree:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;em&gt;Download source tarballs&lt;/em&gt;&lt;/p&gt; &lt;p&gt;Download the GHC source distribution:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;ghc-&amp;lt;version&amp;gt;-src.tar.xz&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;which contains GHC itself and the &#34;boot&#34; libraries.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;em&gt;Check out the source code from git&lt;/em&gt;&lt;/p&gt; &lt;pre&gt;&lt;code&gt;$ git clone --recurse-submodules git@gitlab.haskell.org:ghc/ghc.git&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Note: cloning GHC from Github requires a special setup. See &lt;a href=&#34;https://gitlab.haskell.org/ghc/ghc/wikis/building/getting-the-sources#cloning-from-github&#34; title=&#34;https://gitlab.haskell.org/ghc/ghc/wikis/building/getting-the-sources#cloning-from-github&#34;&gt;Getting a GHC repository from Github&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;em&gt;See the GHC team&#39;s working conventions regarding &lt;a href=&#34;https://gitlab.haskell.org/ghc/ghc/wikis/working-conventions/fixing-bugs&#34;&gt;how to contribute a patch to GHC&lt;/a&gt;.&lt;/em&gt; First time contributors are encouraged to get started by just sending a Merge Request.&lt;/p&gt; &#xA;&lt;h1&gt;Building &amp;amp; Installing&lt;/h1&gt; &#xA;&lt;p&gt;For full information on building GHC, see the &lt;a href=&#34;https://gitlab.haskell.org/ghc/ghc/wikis/building&#34; title=&#34;https://gitlab.haskell.org/ghc/ghc/wikis/building&#34;&gt;GHC Building Guide&lt;/a&gt;. Here follows a summary - if you get into trouble, the Building Guide has all the answers.&lt;/p&gt; &#xA;&lt;p&gt;Before building GHC you may need to install some other tools and libraries. See, &lt;a href=&#34;https://gitlab.haskell.org/ghc/ghc/wikis/building/preparation&#34; title=&#34;https://gitlab.haskell.org/ghc/ghc/wikis/building/preparation&#34;&gt;Setting up your system for building GHC&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;NB.&lt;/em&gt; In particular, you need &lt;a href=&#34;http://www.haskell.org/ghc/&#34; title=&#34;www.haskell.org/ghc/&#34;&gt;GHC&lt;/a&gt; installed in order to build GHC, because the compiler is itself written in Haskell. You also need &lt;a href=&#34;http://www.haskell.org/happy/&#34; title=&#34;www.haskell.org/happy/&#34;&gt;Happy&lt;/a&gt;, &lt;a href=&#34;http://www.haskell.org/alex/&#34; title=&#34;www.haskell.org/alex/&#34;&gt;Alex&lt;/a&gt;, and &lt;a href=&#34;http://www.haskell.org/cabal/&#34; title=&#34;http://www.haskell.org/cabal/&#34;&gt;Cabal&lt;/a&gt;. For instructions on how to port GHC to a new platform, see the &lt;a href=&#34;https://gitlab.haskell.org/ghc/ghc/wikis/building&#34; title=&#34;https://gitlab.haskell.org/ghc/ghc/wikis/building&#34;&gt;GHC Building Guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For building library documentation, you&#39;ll need &lt;a href=&#34;http://www.haskell.org/haddock/&#34; title=&#34;www.haskell.org/haddock/&#34;&gt;Haddock&lt;/a&gt;. To build the compiler documentation, you need &lt;a href=&#34;http://www.sphinx-doc.org/&#34;&gt;Sphinx&lt;/a&gt; and Xelatex (only for PDF output).&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Quick start&lt;/strong&gt;: the following gives you a default build:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ./boot&#xA;$ ./configure&#xA;$ make         # can also say &#39;make -jX&#39; for X number of jobs&#xA;$ make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On Windows, you need an extra repository containing some build tools. These can be downloaded for you by configure. This only needs to be done once by running:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ./configure --enable-tarballs-autodownload&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(NB: &lt;strong&gt;Do you have multiple cores? Be sure to tell that to &lt;code&gt;make&lt;/code&gt;!&lt;/strong&gt; This can save you hours of build time depending on your system configuration, and is almost always a win regardless of how many cores you have. As a simple rule, you should have about N+1 jobs, where &lt;code&gt;N&lt;/code&gt; is the amount of cores you have.)&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;./boot&lt;/code&gt; step is only necessary if this is a tree checked out from git. For source distributions downloaded from &lt;a href=&#34;http://www.haskell.org/ghc/&#34; title=&#34;www.haskell.org/ghc/&#34;&gt;GHC&#39;s web site&lt;/a&gt;, this step has already been performed.&lt;/p&gt; &#xA;&lt;p&gt;These steps give you the default build, which includes everything optimised and built in various ways (eg. profiling libs are built). It can take a long time. To customise the build, see the file &lt;code&gt;HACKING.md&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Filing bugs and feature requests&lt;/h1&gt; &#xA;&lt;p&gt;If you&#39;ve encountered what you believe is a bug in GHC, or you&#39;d like to propose a feature request, please let us know! Submit an &lt;a href=&#34;https://gitlab.haskell.org/ghc/ghc/issues&#34; title=&#34;https://gitlab.haskell.org/ghc/ghc/issues&#34;&gt;issue&lt;/a&gt; and we&#39;ll be sure to look into it. Remember: &lt;strong&gt;Filing a bug is the best way to make sure your issue isn&#39;t lost over time&lt;/strong&gt;, so please feel free.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re an active user of GHC, you may also be interested in joining the &lt;a href=&#34;http://www.haskell.org/pipermail/glasgow-haskell-users/&#34; title=&#34;http://www.haskell.org/pipermail/glasgow-haskell-users/&#34;&gt;glasgow-haskell-users&lt;/a&gt; mailing list, where developers and GHC users discuss various topics and hang out.&lt;/p&gt; &#xA;&lt;h1&gt;Hacking &amp;amp; Developing GHC&lt;/h1&gt; &#xA;&lt;p&gt;Once you&#39;ve filed a bug, maybe you&#39;d like to fix it yourself? That would be great, and we&#39;d surely love your company! If you&#39;re looking to hack on GHC, check out the guidelines in the &lt;code&gt;HACKING.md&lt;/code&gt; file in this directory - they&#39;ll get you up to speed quickly.&lt;/p&gt; &#xA;&lt;h1&gt;Contributors &amp;amp; Acknowledgements&lt;/h1&gt; &#xA;&lt;p&gt;GHC in its current form wouldn&#39;t exist without the hard work of &lt;a href=&#34;https://gitlab.haskell.org/ghc/ghc/wikis/team-ghc&#34; title=&#34;https://gitlab.haskell.org/ghc/ghc/wikis/team-ghc&#34;&gt;its many contributors&lt;/a&gt;. Over time, it has grown to include the efforts and research of many institutions, highly talented people, and groups from around the world. We&#39;d like to thank them all, and invite you to join!&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>simplex-chat/simplex-chat</title>
    <updated>2022-06-03T02:10:55Z</updated>
    <id>tag:github.com,2022-06-03:/simplex-chat/simplex-chat</id>
    <link href="https://github.com/simplex-chat/simplex-chat" rel="alternate"></link>
    <summary type="html">&lt;p&gt;SimpleX - the first messaging platform operating without user identifiers of any kind - 100% private by design! iOS and Android apps are released 📱!&lt;/p&gt;&lt;hr&gt;&lt;img src=&#34;https://raw.githubusercontent.com/simplex-chat/simplex-chat/stable/images/simplex-chat-logo.svg?sanitize=true&#34; alt=&#34;SimpleX logo&#34; width=&#34;100%&#34;&gt; &#xA;&lt;h1&gt;SimpleX - the first messaging platform that has no user identifiers of any kind - 100% private by design!&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/simplex-chat/simplex-chat/actions/workflows/build.yml&#34;&gt;&lt;img src=&#34;https://github.com/simplex-chat/simplex-chat/actions/workflows/build.yml/badge.svg?branch=stable&#34; alt=&#34;build&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/simplex-chat/simplex-chat/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/downloads/simplex-chat/simplex-chat/total&#34; alt=&#34;GitHub downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/simplex-chat/simplex-chat/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/simplex-chat/simplex-chat&#34; alt=&#34;GitHub release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/SimpleXChat&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/follow/SimpleXChat?style=social&#34; alt=&#34;Follow on Twitter&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.reddit.com/r/SimpleXChat&#34;&gt;&lt;img src=&#34;https://img.shields.io/reddit/subreddit-subscribers/SimpleXChat?style=social&#34; alt=&#34;Join on Reddit&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://apps.apple.com/us/app/simplex-chat/id1605771084&#34;&gt;&lt;img src=&#34;https://github.com/simplex-chat/.github/raw/master/profile/images/apple_store.svg?sanitize=true&#34; alt=&#34;iOS app&#34; height=&#34;42&#34;&gt;&lt;/a&gt; &amp;nbsp; &lt;a href=&#34;https://play.google.com/store/apps/details?id=chat.simplex.app&#34;&gt;&lt;img src=&#34;https://github.com/simplex-chat/.github/raw/master/profile/images/google_play.svg?sanitize=true&#34; alt=&#34;Android app&#34;&gt;&lt;/a&gt; &amp;nbsp; &lt;a href=&#34;https://app.simplex.chat&#34;&gt;&lt;img src=&#34;https://github.com/simplex-chat/.github/raw/master/profile/images/f_droid.svg?sanitize=true&#34; alt=&#34;F-Droid&#34; height=&#34;41&#34;&gt;&lt;/a&gt; &amp;nbsp; &lt;a href=&#34;https://testflight.apple.com/join/DWuT2LQu&#34;&gt;&lt;img src=&#34;https://github.com/simplex-chat/.github/raw/master/profile/images/testflight.png&#34; alt=&#34;iOS TestFlight&#34; height=&#34;41&#34;&gt;&lt;/a&gt; &amp;nbsp; &lt;a href=&#34;https://github.com/simplex-chat/website/raw/master/simplex.apk&#34;&gt;&lt;img src=&#34;https://github.com/simplex-chat/.github/raw/master/profile/images/apk_icon.png&#34; alt=&#34;APK&#34; height=&#34;41&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;🖲 Protects your messages and metadata - who you talk to and when.&lt;/li&gt; &#xA; &lt;li&gt;🔐 Double ratchet end-to-end encryption, with additional encryption layer.&lt;/li&gt; &#xA; &lt;li&gt;📱 Mobile apps for Android (&lt;a href=&#34;https://play.google.com/store/apps/details?id=chat.simplex.app&#34;&gt;Google Play&lt;/a&gt;, &lt;a href=&#34;https://github.com/simplex-chat/website/raw/master/simplex.apk&#34;&gt;APK&lt;/a&gt;) and &lt;a href=&#34;https://apps.apple.com/us/app/simplex-chat/id1605771084&#34;&gt;iOS&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;🚀 &lt;a href=&#34;https://testflight.apple.com/join/DWuT2LQu&#34;&gt;TestFlight preview for iOS&lt;/a&gt; with the new features 1-2 weeks earlier - &lt;strong&gt;limited to 10,000 users&lt;/strong&gt;!&lt;/li&gt; &#xA; &lt;li&gt;🖥 Available as a terminal (console) app / CLI on Linux, MacOS, Windows.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Why privacy of communications matter&lt;/h2&gt; &#xA;&lt;p&gt;Everyone should care about privacy and security of their communications - innocuous conversations can put you in danger even if there is nothing to hide.&lt;/p&gt; &#xA;&lt;p&gt;One of the most shocking stories is the experience of &lt;a href=&#34;https://en.wikipedia.org/wiki/Mohamedou_Ould_Slahi&#34;&gt;Mohamedou Ould Salahi&lt;/a&gt; that he wrote about in his memoir and that is shown in The Mauritanian movie. He was put into Guantanamo camp, without trial, and was tortured there for 15 years after a phone call to his relative in Afghanistan, under suspicion of being involved in 9/11 attacks, even though he lived in Germany for the 10 years prior to the attacks.&lt;/p&gt; &#xA;&lt;p&gt;It is not enough to use an end-to-end encrypted messenger, we all should use the messengers that protect the privacy of our personal networks - who we are connected with.&lt;/p&gt; &#xA;&lt;h2&gt;SimpleX unique approach to privacy and security&lt;/h2&gt; &#xA;&lt;h3&gt;Full privacy of your identity, profile, contacts and metadata&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Unlike any other existing messaging platform, SimpleX has no identifiers assigned to the users&lt;/strong&gt; - not even random numbers. This protects the privacy of who are you communicating with, hiding it from SimpleX platform servers and from any observers. &lt;a href=&#34;https://raw.githubusercontent.com/simplex-chat/simplex-chat/stable/docs/SIMPLEX.md#full-privacy-of-your-identity-profile-contacts-and-metadata&#34;&gt;Read more&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;The best protection against spam and abuse&lt;/h3&gt; &#xA;&lt;p&gt;As you have no identifier on SimpleX platform, you cannot be contacted unless you share a one-time invitation link or an optional temporary user address. &lt;a href=&#34;https://raw.githubusercontent.com/simplex-chat/simplex-chat/stable/docs/SIMPLEX.md#the-best-protection-against-spam-and-abuse&#34;&gt;Read more&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Complete ownership, control and security of your data&lt;/h3&gt; &#xA;&lt;p&gt;SimpleX stores all user data on client devices, the messages are only held temporarily on SimpleX relay servers until they are received. &lt;a href=&#34;https://raw.githubusercontent.com/simplex-chat/simplex-chat/stable/docs/SIMPLEX.md#complete-ownership-control-and-security-of-your-data&#34;&gt;Read more&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Users own SimpleX network&lt;/h3&gt; &#xA;&lt;p&gt;You can use SimpleX with your own servers and still communicate with people using the servers that are pre-configured in the apps or any other SimpleX servers. &lt;a href=&#34;https://raw.githubusercontent.com/simplex-chat/simplex-chat/stable/docs/SIMPLEX.md#users-own-simplex-network&#34;&gt;Read more&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;For developers&lt;/h2&gt; &#xA;&lt;p&gt;We plan that the SimpleX platform will grow into the platform supporting any distributed Internet application. This will allow you to build any service that people can access via chat, with custom web-based UI widgets that anybody with basic HTML/CSS/JavaScript knowledge can create in a few hours.&lt;/p&gt; &#xA;&lt;p&gt;You already can:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;use SimpleX Chat library to integrate chat functionality into your apps.&lt;/li&gt; &#xA; &lt;li&gt;use SimpleX Chat bot templates in Haskell to build your own chat bot services (TypeScript SDK is coming soon).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you are considering developing with SimpleX platform please get in touch for any advice and support.&lt;/p&gt; &#xA;&lt;h2&gt;News and updates&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/simplex-chat/simplex-chat/stable/blog/20220511-simplex-chat-v2-images-files.md&#34;&gt;May 11, 2022. v2.0 released - sending images and files in mobile apps&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/simplex-chat/simplex-chat/stable/blog/20220404-simplex-chat-instant-notifications.md&#34;&gt;Apr 04, 2022. Instant notifications for SimpleX Chat mobile apps&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/simplex-chat/simplex-chat/stable/blog/20220308-simplex-chat-mobile-apps.md&#34;&gt;Mar 08, 2022 Mobile apps for iOS and Android released&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/simplex-chat/simplex-chat/stable/blog&#34;&gt;All updates&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Make a private connection&lt;/h2&gt; &#xA;&lt;p&gt;You need to share a link or scan a QR code (in person or during a video call) to make a connection and start messaging.&lt;/p&gt; &#xA;&lt;p&gt;The channel through which you share the link does not have to be secure - it is enough that you can confirm who sent you the message and that your SimpleX connection is established.&lt;/p&gt; &#xA;&lt;img src=&#34;https://github.com/simplex-chat/.github/raw/master/profile/images/conversation.png&#34; alt=&#34;Make a private connection&#34; width=&#34;594&#34; height=&#34;360&#34;&gt; &#xA;&lt;h2&gt;&lt;span&gt;⚡&lt;/span&gt; Quick installation of a terminal app&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;curl -o- https://raw.githubusercontent.com/simplex-chat/simplex-chat/stable/install.sh | bash&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once the chat client is installed, simply run &lt;code&gt;simplex-chat&lt;/code&gt; from your terminal.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/simplex-chat/simplex-chat/stable/images/connection.gif&#34; alt=&#34;simplex-chat&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Read more about &lt;a href=&#34;https://raw.githubusercontent.com/simplex-chat/simplex-chat/stable/docs/CLI.md&#34;&gt;installing and using the terminal app&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;SimpleX Platform design&lt;/h2&gt; &#xA;&lt;p&gt;SimpleX is a client-server network with a unique network topology that uses redundant, disposable message relay nodes to asynchronously pass messages via unidirectional (simplex) message queues, providing recipient and sender anonymity.&lt;/p&gt; &#xA;&lt;p&gt;Unlike P2P networks, all messages are passed through one or several server nodes, that do not even need to have persistence. In fact, the current &lt;a href=&#34;https://github.com/simplex-chat/simplexmq#smp-server&#34;&gt;SMP server implementation&lt;/a&gt; uses in-memory message storage, persisting only the queue records. SimpleX provides better metadata protection than P2P designs, as no global participant identifiers are used to deliver messages, and avoids &lt;a href=&#34;https://raw.githubusercontent.com/simplex-chat/simplex-chat/stable/docs/SIMPLEX.md#comparison-with-p2p-messaging-protocols&#34;&gt;the problems of P2P networks&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Unlike federated networks, the server nodes &lt;strong&gt;do not have records of the users&lt;/strong&gt;, &lt;strong&gt;do not communicate with each other&lt;/strong&gt; and &lt;strong&gt;do not store messages&lt;/strong&gt; after they are delivered to the recipients. There is no way to discover the full list of servers participating in SimpleX network. This design avoids the problem of metadata visibility that all federated networks have and better protects from the network-wide attacks.&lt;/p&gt; &#xA;&lt;p&gt;Only the client devices have information about users, their contacts and groups.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/simplex-chat/simplexmq/raw/master/protocol/overview-tjr.md&#34;&gt;SimpleX whitepaper&lt;/a&gt; for more information on platform objectives and technical design.&lt;/p&gt; &#xA;&lt;h2&gt;Roadmap&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;✅ Easy to deploy SimpleX server with in-memory message storage, without any dependencies.&lt;/li&gt; &#xA; &lt;li&gt;✅ Terminal (console) client with groups and files support.&lt;/li&gt; &#xA; &lt;li&gt;✅ One-click SimpleX server deployment on Linode.&lt;/li&gt; &#xA; &lt;li&gt;✅ End-to-end encryption using double-ratchet protocol with additional encryption layer.&lt;/li&gt; &#xA; &lt;li&gt;✅ Mobile apps v1 for Android and iOS.&lt;/li&gt; &#xA; &lt;li&gt;✅ Private instant notifications for Android using background service.&lt;/li&gt; &#xA; &lt;li&gt;✅ Haskell chat bot templates.&lt;/li&gt; &#xA; &lt;li&gt;✅ v2.0 - supporting images and files in mobile apps.&lt;/li&gt; &#xA; &lt;li&gt;🏗 End-to-end encrypted audio and video calls via the mobile apps.&lt;/li&gt; &#xA; &lt;li&gt;🏗 Automatic chat history deletion.&lt;/li&gt; &#xA; &lt;li&gt;🏗 Privacy preserving instant notifications for iOS using Apple Push Notification service (in progress).&lt;/li&gt; &#xA; &lt;li&gt;🏗 Chat server and TypeScript client SDK to develop chat interfaces, integrations and chat bots (in progress).&lt;/li&gt; &#xA; &lt;li&gt;Groups support for mobile apps.&lt;/li&gt; &#xA; &lt;li&gt;Chat database portability and encryption.&lt;/li&gt; &#xA; &lt;li&gt;Web widgets for custom interactivity in the chats.&lt;/li&gt; &#xA; &lt;li&gt;SMP protocol improvements: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;SMP queue redundancy and rotation.&lt;/li&gt; &#xA;   &lt;li&gt;Message delivery confirmation.&lt;/li&gt; &#xA;   &lt;li&gt;Supporting the same profile on multiple devices.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Privacy-preserving identity server for optional DNS-based contact/group addresses to simplify connection and discovery, but not used to deliver messages: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;keep all your contacts and groups even if you lose the domain.&lt;/li&gt; &#xA;   &lt;li&gt;the server doesn&#39;t have information about your contacts and groups.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Media server to optimize sending large files to groups.&lt;/li&gt; &#xA; &lt;li&gt;Channels server for large groups and broadcast channels.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Disclaimer&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/simplex-chat/simplexmq/raw/master/protocol/overview-tjr.md&#34;&gt;SimpleX protocols and security model&lt;/a&gt; was reviewed and had many improvements in v1.0.0; we are currently arranging for the independent implementation audit.&lt;/p&gt; &#xA;&lt;p&gt;You are likely to discover some bugs - we would really appreciate if you use it and let us know anything that needs to be fixed or improved.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/simplex-chat/simplex-chat/stable/LICENSE&#34;&gt;AGPL v3&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Simspace/avaleryar</title>
    <updated>2022-06-03T02:10:55Z</updated>
    <id>tag:github.com,2022-06-03:/Simspace/avaleryar</id>
    <link href="https://github.com/Simspace/avaleryar" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A logical authorization system&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Avaleryar&lt;/h1&gt; &#xA;&lt;p&gt;An implementation of &lt;a href=&#34;http://okmij.org/ftp/papers/Soutei.pdf&#34; title=&#34;Soutei Paper&#34;&gt;Soutei&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Not yet fit for human consumption.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;It&#39;s easier to ask forgiveness than it is to get permission. --Rear Admiral Grace Murray Hopper&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;Avaleryar is an implementation of &lt;a href=&#34;http://okmij.org/ftp/papers/Soutei.pdf&#34; title=&#34;Soutei Paper&#34;&gt;Pimlott and Kiselyov&#39;s Soutei&lt;/a&gt; trust-management system, comprising&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A &lt;a href=&#34;https://en.wikipedia.org/wiki/Datalog&#34;&gt;Datalog&lt;/a&gt;-like rule language for describing authorization policies (including the evaluator, parser, and a pretty-printer).&lt;/li&gt; &#xA; &lt;li&gt;Convenient library support for extending the policy language with application-specific predicates.&lt;/li&gt; &#xA; &lt;li&gt;A REPL for exploring and debugging policies.&lt;/li&gt; &#xA; &lt;li&gt;An integrated unit-testing system. (NB: It&#39;s pretty bad; we intend to improve it someday).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;We have more improvements planned for the future, which you can read about &lt;a href=&#34;https://raw.githubusercontent.com/Simspace/avaleryar/master/#planned-improvements&#34;&gt;below&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;A Quick Example&lt;/h2&gt; &#xA;&lt;p&gt;Soutei is an extremely flexible system, capable of expressing various styles of authorization policies (RBAC, ABAC, other acronyms that end in -BAC). For this introductory example, we&#39;ll write a simple policy for a hypothetical blogging platform. When a user attempts to take an action, the platform will consult the policy to advise it whether or not to allow the operation to proceed. Here&#39;s an informal version of our policy, in English:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Anyone may read a post that&#39;s been published&lt;/li&gt; &#xA; &lt;li&gt;Anyone who is allowed to edit a post may read it&lt;/li&gt; &#xA; &lt;li&gt;The author of a post may edit and publish it&lt;/li&gt; &#xA; &lt;li&gt;The owner of a blog may create new posts&lt;/li&gt; &#xA; &lt;li&gt;A user may leave a comment on a post if they&#39;re permitted to read it, and are friends with the post&#39;s author.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-prolog&#34;&gt;;; Anyone may read a post that&#39;s been published&#xA;may(read) :-&#xA;  application says status(published).&#xA;  &#xA;;; Anyone who is allowed to edit a post may read it&#xA;may(read) :-&#xA;  may(edit).&#xA;&#xA;;; The author of a post may edit it...&#xA;may(edit) :-&#xA;  application says user(?user),&#xA;  application says author(?user).&#xA;&#xA;;; ...and publish it&#xA;may(publish) :-&#xA;  application says user(?user),&#xA;  application says author(?user).&#xA;&#xA;;; The owner of a blog may create new posts&#xA;may(create) :-&#xA;  application says user(?user),&#xA;  application says blog-owner(?user).&#xA;&#xA;;; A user may leave a comment on a post if they&#39;re permitted to read it, and are friends with the&#xA;;; post&#39;s author.&#xA;may(comment) :-&#xA;  may(read),&#xA;  application says user(?user),&#xA;  application says author(?author),&#xA;  ?author says friend(?user).&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;What we have is a collection of &lt;em&gt;rules&lt;/em&gt; describing the circumstances under which a particular action should be permitted. When our blog application wants to know whether a request is authorized, it will ask Soutei. Soutei will then try to prove that the rules permit the access somehow, and let the application know if it succeeded. We&#39;ll discuss this syntax in detail below. Briefly, though, you can decode, say, the third rule (the author of a post may edit and publish it) like this: &#34;&lt;code&gt;edit&lt;/code&gt; is permitted when the application tells us there&#39;s a user (denoted by the &lt;em&gt;variable&lt;/em&gt; &lt;code&gt;?user&lt;/code&gt;) associated with the request, and the application tells us that that user is identically the author of the post&#34;. Observe that &lt;code&gt;:-&lt;/code&gt; (which I&#39;ll pronounce &#34;when&#34;) is like an implication in logic. The second rule (if you&#39;re allowed to edit you&#39;re allowed to read) is just saying that &lt;code&gt;edit&lt;/code&gt; implies &lt;code&gt;read&lt;/code&gt; (or, since the implication goes right-to-left, perhaps &#34;&lt;code&gt;read&lt;/code&gt; is implied by &lt;code&gt;edit&lt;/code&gt;&#34; would be better).&lt;/p&gt; &#xA;&lt;p&gt;Don&#39;t worry if this is still confusing. The example demonstrates several different features of the system. Nonetheless, I hope you agree it&#39;s a relatively compact and clean description of a not-completely-trivial authorization policy.&lt;/p&gt; &#xA;&lt;h2&gt;Using Soutei for Authorization&lt;/h2&gt; &#xA;&lt;p&gt;Architecturally, Soutei provides support for implementing a so-called &#34;policy decision point&#34;. Its job is to advise an application on whether it should permit a request by determining if it complies with its security policy. It does &lt;em&gt;not&lt;/em&gt; provide policy &lt;em&gt;enforcement&lt;/em&gt;. This is to say, you ask whether to allow access, and you get an answer, but it&#39;s still up to you to send the 403 back to the client if that answer was &#34;no&#34;.&lt;/p&gt; &#xA;&lt;p&gt;To make use of the policy engine, you formulate a query and send it along. For instance, when implementing the commenting system for your blog platform, you might ask Soutei &lt;code&gt;may(comment)&lt;/code&gt; (this is concrete syntax, in practice you&#39;ll assemble the query using library functions). Of course, whether commenting is permitted depends on information that Soutei doesn&#39;t have. In our example, that&#39;s at least the identity of the commenting user and the author of the post, and probably some more information necessary to deduce the ability to read the post. Soutei only knows about the rules you&#39;ve given it, so where do these extra facts about this particular commenting operation come from? The application provides them as a parameter to the query. So in our example, the application might ask &#34;is commenting permitted? (and by the way, the post has been published, the current user is &lt;code&gt;bob&lt;/code&gt;, the author of the post is &lt;code&gt;alice&lt;/code&gt;, and &lt;code&gt;alice&lt;/code&gt; says &lt;code&gt;bob&lt;/code&gt; is her friend, in case that helps you make your decision)&#34;.&lt;/p&gt; &#xA;&lt;p&gt;This may be a rather different style of access control than you&#39;re used to, and it requires a bit of a shift in perspective.&lt;/p&gt; &#xA;&lt;p&gt;TODO: Say more here.&lt;/p&gt; &#xA;&lt;h2&gt;Syntax and Semantics&lt;/h2&gt; &#xA;&lt;p&gt;Here&#39;s a rule about activities:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-prolog&#34;&gt;can(?activity) :-&#xA;  want-to(?activity).&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It says that an activity is permitted (&lt;code&gt;can(?activity)&lt;/code&gt;) when we want to do that activity (&lt;code&gt;want-to(?activity)&lt;/code&gt;). We can see several features of the syntax in this small example. Rules have two parts (a &lt;strong&gt;head&lt;/strong&gt; and a &lt;strong&gt;body&lt;/strong&gt;), separated by the symbol &lt;code&gt;:-&lt;/code&gt; (which I tend to pronounce &#34;when&#34;), and terminated with a period. The head of the rule is &lt;code&gt;can(?activity)&lt;/code&gt;, and the body of the rule is &lt;code&gt;want-to(?activity)&lt;/code&gt;. They use a function-call like notation (called a &lt;strong&gt;literal&lt;/strong&gt;) to describe logical &lt;strong&gt;predicates&lt;/strong&gt; (i.e., &lt;code&gt;can&lt;/code&gt; and &lt;code&gt;want-to&lt;/code&gt;). Predicates are usually denoted with their arity, so rather than writing &lt;code&gt;can&lt;/code&gt;, we&#39;d write &lt;code&gt;can/1&lt;/code&gt;. If we had a predicate describing friendship between two people (&lt;code&gt;friend(alice, bob)&lt;/code&gt;), we&#39;d refer to it as &lt;code&gt;friend/2&lt;/code&gt;. We can also see that &lt;strong&gt;variables&lt;/strong&gt; are written with a prefix question-mark (&lt;code&gt;?activity&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;If this rule were our entire policy, it would never permit us to do anything, because it has no way to establish what we &lt;code&gt;want-to/1&lt;/code&gt; do. In general, determining our psyche&#39;s innermost desires can be complicated, and we could write a bunch of complicated rules to define &lt;code&gt;want-to/1&lt;/code&gt;. But let&#39;s just assume we&#39;re blessed with unusual self awareness, and add a special kind of rule, called a &lt;strong&gt;fact&lt;/strong&gt;, that will express our yearning:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-prolog&#34;&gt;can(?activity) :-&#xA;  want-to(?activity).&#xA;  &#xA;;; we can dance if we want to&#xA;want-to(dance).&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We can see that a fact is a rule without a body. We can also see that comments are introduced with semicolons and extend to the end of the line. This policy will now permit a query of the form &lt;code&gt;can(dance)&lt;/code&gt;. Let&#39;s look at how that deduction works. We ask Soutei &lt;code&gt;can(dance)&lt;/code&gt;, and it reasons: &#34;I can prove &lt;code&gt;can(dance)&lt;/code&gt; if, when &lt;code&gt;?activity&lt;/code&gt; is &lt;code&gt;dance&lt;/code&gt;, I can prove &lt;code&gt;want-to(dance)&lt;/code&gt;. Oh! and I can prove &lt;code&gt;want-to(dance)&lt;/code&gt; because I know that for fact!&#34;.&lt;/p&gt; &#xA;&lt;p&gt;Notice that &lt;code&gt;dance&lt;/code&gt; isn&#39;t a variable, it&#39;s just a symbol. We could have written &lt;code&gt;want-to(&#34;dance&#34;)&lt;/code&gt;, using double-quotes to delimit the string, but it&#39;s unnecessary (and un-idiomatic) when the string doesn&#39;t contain spaces or commas.&lt;/p&gt; &#xA;&lt;p&gt;Now suppose we want to say that we can dance if we want to, act if we want to, but sing under any circumstances? (This whole example will probably make more sense with a bit more &lt;a href=&#34;https://www.youtube.com/watch?v=AjPau5QYtYs&#34;&gt;context&lt;/a&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-prolog&#34;&gt;can(?activity) :-&#xA;  want-to(?activity).&#xA;&#xA;can(sing).&#xA;&#xA;;; we can dance if we want to&#xA;want-to(dance).&#xA;&#xA;;; we can act if we want to&#xA;want-to(act).&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;What &lt;code&gt;can/1&lt;/code&gt; we do now? Well, we &lt;code&gt;can(dance)&lt;/code&gt;, we &lt;code&gt;can(dance)&lt;/code&gt;, we &lt;code&gt;can(sing)&lt;/code&gt;, and we &lt;code&gt;can(act)&lt;/code&gt;. This shows that we&#39;re able to express different ways to conclude that an action is permitted by writing multiple rules for the same predicate (remember that facts are rules without bodies). Rule bodies aren&#39;t limited to a single literal. Let&#39;s add an example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-prolog&#34;&gt;can(?activity) :-&#xA;  want-to(?activity).&#xA;&#xA;can(sing).&#xA;&#xA;;; we can dance if we want to&#xA;want-to(dance).&#xA;&#xA;;; we can act if we want to&#xA;want-to(act).&#xA;&#xA;;; we only want to go when the night is young, and so am I&#xA;want-to(go) :-&#xA;  time-of(night, young),&#xA;  age-of(me, young).&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We require every predicate in the body of a rule to succeed in order for the rule to succeed. So &lt;code&gt;want-to(go)&lt;/code&gt; needs both &lt;code&gt;time-of(night, young)&lt;/code&gt; and &lt;code&gt;age-of(me, young)&lt;/code&gt; to be proven in order for this rule to prove that &lt;code&gt;want-to(go)&lt;/code&gt;. Of course, what we have so far isn&#39;t enough to prove &lt;code&gt;can(go)&lt;/code&gt; yet, because &lt;code&gt;age-of/2&lt;/code&gt; and &lt;code&gt;time-of/2&lt;/code&gt; aren&#39;t actually defined anywhere. This isn&#39;t considered an error; it simply means that an attempt to prove &lt;code&gt;want-to(go)&lt;/code&gt; will fail. (As a reminder, there&#39;s no special meaning attached to &lt;code&gt;night&lt;/code&gt;, &lt;code&gt;young&lt;/code&gt; or &lt;code&gt;me&lt;/code&gt;---they&#39;re just symbols I&#39;m using to demonstrate the syntax).&lt;/p&gt; &#xA;&lt;p&gt;It may be occurring to you by now that these rules don&#39;t actually depend on anything---the assertion we&#39;re developing (a collection of rules like this is called an &lt;strong&gt;assertion&lt;/strong&gt;---an assertion is kind of like a module or a namespace) will always prove exactly the same things. A rule may consult predicates in &lt;em&gt;other&lt;/em&gt; assertions than the one in which it&#39;s written. Let&#39;s hypothesize two new assertions, &lt;code&gt;clock&lt;/code&gt; and &lt;code&gt;bio&lt;/code&gt;, that contain chronological and biographical rules, respectively:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-prolog&#34;&gt;can(?activity) :-&#xA;  want-to(?activity).&#xA;&#xA;can(sing).&#xA;&#xA;;; we can dance if we want to&#xA;want-to(dance).&#xA;&#xA;;; we can act if we want to&#xA;want-to(act).&#xA;&#xA;;; we only want to go when the night is young, and so am and I&#xA;want-to(go) :-&#xA;  clock says time-of(night, young),&#xA;  bio says age-of(me, young).&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We&#39;ve changed the body of our &lt;code&gt;want-to(go)&lt;/code&gt; rule by adding &lt;code&gt;clock says time-of(night, young)&lt;/code&gt; and &lt;code&gt;bio says age-of(me, young)&lt;/code&gt;. This tells Soutei to try and resolve &lt;code&gt;time-of/2&lt;/code&gt; in the assertion named &lt;code&gt;clock&lt;/code&gt; and &lt;code&gt;age-of/2&lt;/code&gt; in the assertion named &lt;code&gt;bio&lt;/code&gt;. By &#34;resolve a predicate in an assertion&#34;, I mean that Soutei will load all the rules in that assertion, and continue trying to satisfy the predicate using the rules in &lt;em&gt;that&lt;/em&gt; assertion. Of course, if any rule in this new assertion has a body literal of the form &lt;code&gt;assertion says pred(...)&lt;/code&gt;, then Soutei will load the rules in &lt;code&gt;assertion&lt;/code&gt; and resolve &lt;code&gt;pred&lt;/code&gt; there.&lt;/p&gt; &#xA;&lt;p&gt;Other than a short discussion about variable binding and another on so-called &#34;native predicates&#34;, we&#39;ve now looked (albeit briefly) at the entirety of the semantics of the language. I point that out because in order to continue our Safety Dance, we&#39;ll need to introduce a convention that &lt;code&gt;avaleryar&lt;/code&gt; (following the original paper) imposes: the &lt;code&gt;application&lt;/code&gt; assertion. Semantically, the &lt;code&gt;application&lt;/code&gt; assertion is no different than any other. However, when &lt;code&gt;avaleryar&lt;/code&gt; runs a query, it accepts a collection of facts as, effectively, parameters that are made available to our rules through the &lt;code&gt;application&lt;/code&gt; assertion. (NB: I&#39;m doing my best to distinguish Soutei-the-language from &lt;code&gt;avaleryar&lt;/code&gt;-the-implementation-of-Soutei-the-language, I hope this isn&#39;t too confusing). So to demonstrate, let&#39;s write a needlessly complicated rule determining whether the dancing we can do is, properly a Safety Dance.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-prolog&#34;&gt;can(?activity) :-&#xA;  want-to(?activity).&#xA;&#xA;can(sing).&#xA;&#xA;;; we can dance if we want to&#xA;want-to(dance).&#xA;&#xA;;; we can act if we want to&#xA;want-to(act).&#xA;&#xA;;; we only want to go when the night is young, and so am and I&#xA;want-to(go) :-&#xA;  clock says time-of(night, young),&#xA;  bio says age-of(me, young).&#xA;&#xA;;; we can overextend the efficacy a questionable pop-culture reference&#xA;safety(?activity) :-&#xA;  can(?activity),&#xA;  application says out-of(control, everything),&#xA;  application says doing-it(from, pole),&#xA;  application says doing-it(to, pole),&#xA;  application says looking-at(hands, ?somebody),&#xA;  ?somebody says taking(the-chance).&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This (completely inane, it&#39;s getting pretty late as I write this---the examples section below won&#39;t be this silly) new rule uses a bunch of information provided by the application querying for authorization advice (&lt;code&gt;application says ...&lt;/code&gt;) in addition to some locally written rules (&lt;code&gt;can(?activity)&lt;/code&gt;). It also uses an assertion &lt;em&gt;determined by the query&lt;/em&gt; (&lt;code&gt;?somebody says taking(the-chance)&lt;/code&gt;) to ultimately establish that indeed, &lt;code&gt;safety(dance)&lt;/code&gt;. The ability to dynamically choose different assertions in which to reason is a powerfully expressive feature of Soutei.&lt;/p&gt; &#xA;&lt;p&gt;TODO: unification and native predicates.&lt;/p&gt; &#xA;&lt;p&gt;TODO: why encoding &#34;&#39;Cause your friends don&#39;t dance, and if they don&#39;t dance, then they&#39;re no friends of mine&#34; isn&#39;t (naively) possible.&lt;/p&gt; &#xA;&lt;p&gt;TODO: mode checking.&lt;/p&gt; &#xA;&lt;p&gt;TODO: monotonicity.&lt;/p&gt; &#xA;&lt;h2&gt;Examples and Advice&lt;/h2&gt; &#xA;&lt;h3&gt;Example: Unix File Permissions&lt;/h3&gt; &#xA;&lt;p&gt;Here is a simplified version of file permissions on Unix. We assume that the application will tell us what the file is, that there&#39;s an assertion named after the file that knows what permissions are set on it, who owns it, and which group it&#39;s associated with, as well as that each group has an assertion named after it that can tell us whether a user is a member of that group. For example, we might have an assertion for some file that looked like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-prolog&#34;&gt;;; assertion for /path/to/some/file&#xA;&#xA;owner(mary).&#xA;group(wheel).&#xA;perm(user, read).&#xA;perm(user, write).&#xA;perm(user, execute).&#xA;perm(group, read).&#xA;perm(group, execute).&#xA;perm(other, read).&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This would represent a file owned by &lt;code&gt;mary&lt;/code&gt;, with group &lt;code&gt;wheel&lt;/code&gt;, with permissions &lt;code&gt;754&lt;/code&gt; (as in, &lt;code&gt;chmod 754 /path/to/some/file&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-prolog&#34;&gt;;; allow ?access when the user is the owner and ?access is enabled for them.&#xA;;; NB: The word &#34;user&#34; appears with three different meanings in this rule.  The application fact&#xA;;; &#39;user/1&#39;, which indicates the user accessing the file, the variable &#39;?user&#39;, which has that&#xA;;; user bound to it, and the symbol &#39;user&#39; in &#39;perm(user, ?access)&#39;, which refers to user&#xA;;; permissions on a file in the sense of &#39;chmod u+x $FILE&#39;.&#xA;may(?access) :-&#xA;  application says file(?file),&#xA;  application says user(?user),&#xA;  ?file says owner(?user),&#xA;  ?file says perm(user, ?access).&#xA;&#xA;;; allow ?access when it&#39;s enabled on the file, the file is associated with a group ?group,&#xA;;; and the user is a member of ?group.&#xA;may(?access) :-&#xA;  application says file(?file),&#xA;  application says user(?user),&#xA;  ?file says group(?group),&#xA;  ?group says member(?user),&#xA;  ?file says perm(group, ?access).&#xA;  &#xA;;; allow ?access if it&#39;s enabled for all users (&#34;other&#34; permissions)&#xA;may(?access) :-&#xA;  application says file(?file),&#xA;  ?file says perm(other, ?access).&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Unix permissions are more sophisticated than this---for instance, if you have &lt;code&gt;read&lt;/code&gt; access to a directory, you are permitted to see the &lt;em&gt;names&lt;/em&gt; of the files in that directory, but not other metadata (roughly, you&#39;re allowed to see the output of &lt;code&gt;ls&lt;/code&gt;, but not &lt;code&gt;ls -l&lt;/code&gt;) unless you also have &lt;code&gt;execute&lt;/code&gt; permission on the directory as well. A more nuanced version of this policy would need to know what metadata is being sought by the application, and probably require some native predicates to compute the directory part of a file path.&lt;/p&gt; &#xA;&lt;h3&gt;Example: Role-Based Access Control (RBAC)&lt;/h3&gt; &#xA;&lt;p&gt;In RBAC, we have a discrete set of primitive &lt;em&gt;permissions&lt;/em&gt;, a collection of named &lt;em&gt;roles&lt;/em&gt; each of which is a subset of the permissions, and an assignment of users to (possibly multiple) roles. To determine if a user is permitted to take some action, we check that the user has been assigned some role that contains the appropriate permission.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-prolog&#34;&gt;;; permissions&#xA;&#xA;perm(manage-users).&#xA;perm(manage-computers).&#xA;perm(access-lab).&#xA;perm(run-experiment).&#xA;perm(create-experiment).&#xA;perm(approve-experiment).&#xA;&#xA;;; roles&#xA;&#xA;; grad students get to do all the work&#xA;role(grad-student, access-lab).&#xA;role(grad-student, run-experiment).&#xA;&#xA;; professors have at least the permissions of grad students, plus they can&#xA;; create experiments.&#xA;role(professor, ?perm) :-&#xA;  role(grad-student, ?perm).&#xA;role(professor, create-experiment).&#xA;&#xA;; poison control should probably be allowed into the lab, just in case&#xA;role(poison-control, access-lab).&#xA;&#xA;; the IT department needs to access the lab to manage its computers&#xA;role(it-support, access-lab).&#xA;role(it-support, manage-computers).&#xA;&#xA;; the dean has nothing to do with the science, but they still sign the&#xA;; checks and assign personel&#xA;role(dean, approve-experiment).&#xA;role(dean, manage-users).&#xA;&#xA;;; users&#xA;&#xA;has-role(bill, grad-student).&#xA;has-role(clara, professor).&#xA;has-role(dmitri, grad-student).&#xA;has-role(dmitri, poison-control). ; dmitri is a volunteer EMT&#xA;has-role(emily, it-support).&#xA;has-role(fabian, dean).&#xA;&#xA;;; RBAC&#xA;&#xA;may(?perm) :-&#xA;  application says user(?user),&#xA;  has-role(?user, ?role),&#xA;  role(?role, ?perm).&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Example: Access Control Lists (ACLs)&lt;/h3&gt; &#xA;&lt;h3&gt;Advice: Don&#39;t use ACLs&lt;/h3&gt; &#xA;&lt;h2&gt;Using Avaleryar&lt;/h2&gt; &#xA;&lt;p&gt;TODO: tutorial module.&lt;/p&gt; &#xA;&lt;h2&gt;Glossary&lt;/h2&gt; &#xA;&lt;h2&gt;Planned Improvements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;An interactive debugger&lt;/li&gt; &#xA; &lt;li&gt;A better persistence story (to make dynamic rule submission usable)&lt;/li&gt; &#xA; &lt;li&gt;Assertion signatures (enabling the use of variables for native assertions)&lt;/li&gt; &#xA; &lt;li&gt;Some kind of &lt;a href=&#34;https://en.wikipedia.org/wiki/Abductive_logic_programming&#34;&gt;abduction&lt;/a&gt; (to offer explanations of query failure)&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>msysyamamoto/RPN</title>
    <updated>2022-06-03T02:10:55Z</updated>
    <id>tag:github.com,2022-06-03:/msysyamamoto/RPN</id>
    <link href="https://github.com/msysyamamoto/RPN" rel="alternate"></link>
    <summary type="html">&lt;p&gt;RPN calculator&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;RPN&lt;/h2&gt; &#xA;&lt;p&gt;RPN calculator.&lt;/p&gt;</summary>
  </entry>
</feed>