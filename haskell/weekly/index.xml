<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Haskell Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-31T02:13:29Z</updated>
  <subtitle>Weekly Trending of Haskell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>agda/agda</title>
    <updated>2022-07-31T02:13:29Z</updated>
    <id>tag:github.com,2022-07-31:/agda/agda</id>
    <link href="https://github.com/agda/agda" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Agda is a dependently typed programming language / interactive theorem prover.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Agda 2&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://hackage.haskell.org/package/Agda&#34;&gt;&lt;img src=&#34;https://img.shields.io/hackage/v/Agda.svg?label=Hackage&#34; alt=&#34;Hackage version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.stackage.org/package/Agda&#34;&gt;&lt;img src=&#34;https://www.stackage.org/package/Agda/badge/lts?label=Stackage&#34; alt=&#34;Stackage version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/agda/agda/actions?query=workflow%3A%22Build%2C+Test%2C+and+Benchmark%22&#34;&gt;&lt;img src=&#34;https://github.com/agda/agda/workflows/Build,%20Test,%20and%20Benchmark/badge.svg?branch=master&#34; alt=&#34;Test&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/agda/agda/actions?query=workflow%3A%22stack+build%22&#34;&gt;&lt;img src=&#34;https://github.com/agda/agda/workflows/stack%20build/badge.svg?sanitize=true&#34; alt=&#34;Stack Build Status via GH Actions&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://agda.readthedocs.io/en/latest/?badge=latest&#34;&gt;&lt;img src=&#34;https://readthedocs.org/projects/agda/badge/?version=latest&#34; alt=&#34;Documentation Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://agda.zulipchat.com&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/zulip-join_chat-brightgreen.svg?sanitize=true&#34; alt=&#34;Agda Zulip&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/agda/agda/master/doc/user-manual/agda.svg?sanitize=true&#34; alt=&#34;The official Agda logo&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Note that this README is only about Agda, not its standard library. See the &lt;a href=&#34;http://wiki.portal.chalmers.se/agda/pmwiki.php&#34;&gt;Agda Wiki&lt;/a&gt; for information about the library.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://agda.readthedocs.io&#34;&gt;User manual&lt;/a&gt; (per-commit pdf can be downloaded from the &lt;a href=&#34;https://github.com/agda/agda/actions?query=workflow%3A%22User+Manual%22&#34;&gt;github actions&lt;/a&gt; page)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/agda/agda/raw/master/CHANGELOG.md&#34;&gt;CHANGELOG&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://agda.readthedocs.io/en/latest/getting-started/installation.html&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://agda.readthedocs.io/en/latest/getting-started/a-taste-of-agda.html&#34;&gt;Quick guide to editing, type checking and compiling Agda code&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing to Agda&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Contribution how-to: &lt;a href=&#34;https://github.com/agda/agda/raw/master/HACKING.md&#34;&gt;&lt;code&gt;HACKING&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/andreasabel/haskell-style-guide/raw/master/haskell-style.md&#34;&gt;Haskell style-guide&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>koka-lang/koka</title>
    <updated>2022-07-31T02:13:29Z</updated>
    <id>tag:github.com,2022-07-31:/koka-lang/koka</id>
    <link href="https://github.com/koka-lang/koka" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Koka language compiler and interpreter&lt;/p&gt;&lt;hr&gt;&lt;img align=&#34;left&#34; width=&#34;100&#34; height=&#34;100&#34; src=&#34;https://raw.githubusercontent.com/koka-lang/koka/master/doc/logo/koka-logo-filled.png&#34;&gt; &#xA;&lt;!--&#xA;[&lt;img align=&#34;right&#34; src=&#34;https://travis-ci.org/koka-lang/koka.svg?branch=master&#34;/&gt;](https://travis-ci.org/koka-lang/koka)&#xA;--&gt; &#xA;&lt;a href=&#34;https://matrix.to/#/#koka-lang_koka:gitter.im&#34;&gt; &lt;img align=&#34;right&#34; style=&#34;margin: 5px&#34; src=&#34;https://img.shields.io/matrix/koka-lang:matrix.org?label=chat%20on%20matrix&#34;&gt; &lt;/a&gt; &#xA;&lt;a href=&#34;https://gitter.im/koka-lang/koka?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge&#34;&gt; &lt;img align=&#34;right&#34; style=&#34;margin: 5px&#34; src=&#34;https://badges.gitter.im/koka-lang/koka.svg?sanitize=true&#34;&gt; &lt;/a&gt; &#xA;&lt;p&gt;&amp;nbsp;&lt;/p&gt; &#xA;&lt;h1&gt;Koka: a Functional Language with Effects&lt;/h1&gt; &#xA;&lt;p&gt;&lt;em&gt;Koka v2 is a research language that currently under heavy development with the new C backend&lt;/em&gt; &lt;em&gt;Latest release&lt;/em&gt;: v2.4.0, 2022-02-07 (&lt;a href=&#34;https://koka-lang.github.io/koka/doc/book.html&#34;&gt;Install&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://koka-lang.github.io/koka/doc/book.html#why-handlers&#34;&gt;&lt;img align=&#34;right&#34; width=&#34;300&#34; src=&#34;https://raw.githubusercontent.com/koka-lang/koka/master/doc/snippet-yield.png&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Koka is a strongly typed functional-style language with effect types and handlers.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The core of Koka consists of a small set of well-studied language features, like first-class functions, a polymorphic type- and effect system, algebraic data types, and effect handlers. Each of these is composable and avoid the addition of “special” extensions by being as general as possible.&lt;/li&gt; &#xA; &lt;li&gt;Koka tracks the (side) &lt;em&gt;effects&lt;/em&gt; of every function in its type, where pure and effectful computations are distinguished. The precise effect typing gives Koka &lt;em&gt;rock-solid semantics&lt;/em&gt; backed by well-studied category theory, which makes Koka particularly easy to reason about for both humans and compilers.&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Effect handlers&lt;/em&gt; let you define advanced control abstractions, like exceptions, async/await, or probabilistic programs, as a user library in a typed and composable way.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://koka-lang.github.io/koka/doc/book.html#why-perceus&#34;&gt;Perceus&lt;/a&gt; is an advanced compilation method for reference counting. Together with &lt;a href=&#34;https://www.microsoft.com/en-us/research/publication/generalized-evidence-passing-for-effect-handlers/&#34;&gt;evidence passing&lt;/a&gt;, this lets Koka compile directly to C code &lt;em&gt;without needing a garbage collector or runtime system&lt;/em&gt;. Perceus also performs &lt;a href=&#34;https://koka-lang.github.io/koka/doc/book.html#why-fbip&#34;&gt;reuse analysis&lt;/a&gt; and optimizes functional-style programs to use in-place updates when possible.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To learn more:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://koka-lang.github.io/koka/doc/book.html&#34;&gt;Install&lt;/a&gt; Koka and compile your first programs.&lt;/li&gt; &#xA; &lt;li&gt;Read the &lt;a href=&#34;https://koka-lang.github.io/koka/doc/book.html&#34;&gt;Koka book&lt;/a&gt; for a tour of the Koka language and its specification.&lt;/li&gt; &#xA; &lt;li&gt;Browse the &lt;a href=&#34;https://koka-lang.github.io/koka/doc/toc.html&#34;&gt;library documentation&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Help with &lt;a href=&#34;https://raw.githubusercontent.com/koka-lang/koka/master/#tasks&#34;&gt;development&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Enjoy, Daan Leijen&lt;/p&gt; &#xA;&lt;p&gt;Special thanks to: &lt;a href=&#34;https://antonlorenzen.de/&#34;&gt;Anton Lorenzen&lt;/a&gt; for his work on frame-limited reuse in Perceus &lt;a href=&#34;https://raw.githubusercontent.com/koka-lang/koka/master/#references&#34;&gt;[10]&lt;/a&gt;, &lt;a href=&#34;https://xnning.github.io/&#34;&gt;Ningning Xie&lt;/a&gt; for her work on the theory and practice of evidence passing &lt;a href=&#34;https://raw.githubusercontent.com/koka-lang/koka/master/#references&#34;&gt;[9,6]&lt;/a&gt; and the formalization of Perceus reference counting &lt;a href=&#34;https://raw.githubusercontent.com/koka-lang/koka/master/#references&#34;&gt;[8]&lt;/a&gt;, &lt;a href=&#34;https://alexreinking.com/&#34;&gt;Alex Reinking&lt;/a&gt; for the implementation of the Perceus reference counting analysis &lt;a href=&#34;https://raw.githubusercontent.com/koka-lang/koka/master/#references&#34;&gt;[8]&lt;/a&gt;, and all previous interns working on earlier versions of Koka: Daniel Hillerström, Jonathan Brachthäuser, Niki Vazou, Ross Tate, Edsko de Vries, and Dana Xu.&lt;/p&gt; &#xA;&lt;h2&gt;Recent Releases&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;v2.4.0&lt;/code&gt;, 2022-02-07: automatic generation of installation packages for various Linux distributions (by &lt;a href=&#34;https://github.com/rubikscraft&#34;&gt;Rubikscraft&lt;/a&gt;), improved specialization and integer add/sub, add &lt;code&gt;rbtree-fbip&lt;/code&gt; sample, improve grammar (&lt;code&gt;pub&lt;/code&gt; (instead of &lt;code&gt;public&lt;/code&gt;, remove private (as it is always default)), &lt;code&gt;final ctl&lt;/code&gt; (instead of &lt;code&gt;brk&lt;/code&gt;), underscores in number literals, etc), rename &lt;code&gt;double&lt;/code&gt; to &lt;code&gt;float64&lt;/code&gt;, various bug fixes.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;v2.3.8&lt;/code&gt;, 2021-12-27: improved &lt;code&gt;int&lt;/code&gt; performance, various bug fixes, update wasm backend, initial conan support, fix js backend.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;v2.3.6&lt;/code&gt;, 2021-11-26: fix specialization bug, add &lt;code&gt;std/os/readline&lt;/code&gt; module.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;v2.3.4&lt;/code&gt;, 2021-11-26: &lt;code&gt;maybe&lt;/code&gt;-like types are already value types, but now also no longer need heap allocation if not nested (and &lt;code&gt;[Just(1)]&lt;/code&gt; uses the same heap space as &lt;code&gt;[1]&lt;/code&gt;), improved atomic refcounting (by Anton Lorenzen), improved specialization (by Steven Fontanella), various small fixes, fix build on freeBSD.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;v2.3.2&lt;/code&gt;, 2021-10-15: initial wasm support (use &lt;code&gt;--target=wasm&lt;/code&gt;, and install &lt;a href=&#34;https://emscripten.org/docs/getting_started/downloads.html&#34;&gt;emscripten&lt;/a&gt; and &lt;a href=&#34;https://wasmtime.dev/&#34;&gt;wasmtime&lt;/a&gt;), improved reuse specialization (by Anton Lorenzen), fix default color scheme for non-dark shells (#190), stack-less free and marking, add &lt;code&gt;--stack&lt;/code&gt; option, &lt;a href=&#34;https://musl.libc.org/&#34;&gt;musl&lt;/a&gt; support (use &lt;code&gt;--cc=musl-gcc&lt;/code&gt;), fix &lt;code&gt;vcpkg&lt;/code&gt; support on macOS with homebrew installed vcpkg, various bug fixes.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;v2.3.1&lt;/code&gt;, 2021-09-29: improved TRMC optimizations, and improved reuse (the &lt;a href=&#34;https://raw.githubusercontent.com/koka-lang/koka/master/test/bench/koka/rbtree.kk&#34;&gt;rbtree&lt;/a&gt; benchmark is faster as C++ now). Improved effect operation speed. Allow elision of &lt;code&gt;-&amp;gt;&lt;/code&gt; in anonymous function expressions (e.g. &lt;code&gt;xs.map( fn(x) x + 1 )&lt;/code&gt;) and operation clauses. Allow &lt;code&gt;ctl&lt;/code&gt; for &lt;code&gt;control&lt;/code&gt;. New default output directory as &lt;code&gt;.koka&lt;/code&gt; and improved command line options to be more in line with other compilers (with &lt;code&gt;-o&lt;/code&gt; specifying the final output, and &lt;code&gt;-e&lt;/code&gt; to execute the program).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;v2.3.0&lt;/code&gt;, 2021-09-20: many changes: new layout rule to &lt;a href=&#34;https://koka-lang.github.io/koka/doc/book.html#sec-layout&#34;&gt;elide braces&lt;/a&gt; and no more need to parenthesize &lt;code&gt;if&lt;/code&gt; and &lt;code&gt;match&lt;/code&gt; conditions (see the &lt;a href=&#34;https://raw.githubusercontent.com/koka-lang/koka/master/samples/basic/rbtree.kk&#34;&gt;&lt;code&gt;samples/basic/rbtree&lt;/code&gt;&lt;/a&gt; for an example of this), updated the JavaScript backend (&lt;code&gt;--target=js&lt;/code&gt;) to use standard ES6 modules and using the new &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt&#34;&gt;&lt;code&gt;BigInt&lt;/code&gt;&lt;/a&gt; for arbitrary precision integers, improved runtime layout with support for 128-bit arm CHERI, add the &lt;code&gt;std/num/int64&lt;/code&gt; module and &lt;code&gt;int64&lt;/code&gt; primitive type, add the &lt;a href=&#34;https://raw.githubusercontent.com/koka-lang/koka/master/test/bench/koka/binarytrees.kk&#34;&gt;binarytrees&lt;/a&gt; benchmark, initial support for parallel tasks (in &lt;code&gt;std/os/task&lt;/code&gt;), improved simplification and inlining giving much improved effect operations, updated isocline for the interactive environment.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;v2.2.1&lt;/code&gt;, 2021-09-05: improved optimization, initial parallel tasks, binary-trees benchmark, still slightly slower effect handling, upgrade isocline, fix minor bugs.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;v2.2.0&lt;/code&gt;, 2021-08-26: improved case-of-known simpification (by Rakshika B), improve cross-module specialization (by Steven Fontanella), initial borrowing annotations and improved reuse analysis (by Anton Lorenzen), improved line editing in the interactive environment, improved inlining. Note: due to the new inline phases, effect handling may currently be a tad slower in this release but will be improved for the next release.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koka-lang/koka/master/#older-release-notes&#34;&gt;Older release notes&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!--&#xA;&lt;img align=&#34;right&#34; width=&#34;200&#34; src=&#34;doc/system-logos.png&#34;&gt;&#xA;--&gt; &#xA;&lt;h1&gt;Install&lt;/h1&gt; &#xA;&lt;p&gt;Koka has &lt;a href=&#34;https://koka-lang.github.io/koka/doc/book.html&#34;&gt;binary installers&lt;/a&gt; for Windows (x64), macOS (x64, M1), Linux (x64, arm64), and FreeBSD (x64). For other platforms, you need to build the compiler from source.&lt;/p&gt; &#xA;&lt;h1&gt;Build from Source&lt;/h1&gt; &#xA;&lt;p&gt;Koka has few dependencies and should build from source without problems on most common platforms, e.g. Windows (including WSL), macOS, and Unix. The following programs are required to build Koka:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.haskellstack.org/&#34;&gt;Stack&lt;/a&gt; to run the Haskell compiler. Use &lt;code&gt;curl -sSL https://get.haskellstack.org/ | sh&lt;/code&gt; on Unix and macOS x64, or the binary &lt;a href=&#34;https://get.haskellstack.org/stable/windows-x86_64-installer.exe&#34;&gt;installer&lt;/a&gt; on Windows. On macOS M1, use &lt;code&gt;brew install haskell-stack --head&lt;/code&gt; (and see the &lt;a href=&#34;https://raw.githubusercontent.com/koka-lang/koka/master/#build-notes&#34;&gt;build notes&lt;/a&gt; below).&lt;/li&gt; &#xA; &lt;li&gt;Optional: &lt;a href=&#34;https://vcpkg.io/en/getting-started.html&#34;&gt;vcpkg&lt;/a&gt; to be able to link easily with C libraries. Use &lt;code&gt;brew install vcpkg&lt;/code&gt; on macOS. On other systems use the vcpkg &lt;a href=&#34;https://vcpkg.io/en/getting-started.html&#34;&gt;install&lt;/a&gt; instructions (Koka can find vcpkg automatically if installed to &lt;code&gt;~/vcpkg&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Optional: &lt;a href=&#34;http://nodejs.org&#34;&gt;nodejs&lt;/a&gt; if using the Javascript backend.&lt;/li&gt; &#xA; &lt;li&gt;Optional: &lt;a href=&#34;https://emscripten.org/docs/getting_started/downloads.html&#34;&gt;emscripten&lt;/a&gt; and &lt;a href=&#34;https://wasmtime.dev/&#34;&gt;wasmtime&lt;/a&gt; if using the Wasm backend.&lt;/li&gt; &#xA; &lt;li&gt;Optional: On Windows it is recommended to install the &lt;a href=&#34;https://llvm.org/builds&#34;&gt;clang&lt;/a&gt; C compiler, or the &lt;a href=&#34;https://visualstudio.microsoft.com/downloads/&#34;&gt;Visual Studio&lt;/a&gt; C compiler.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Now clone the repository and build the compiler as (note the &lt;code&gt;--recursive&lt;/code&gt; flag):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ git clone --recursive https://github.com/koka-lang/koka&#xA;$ cd koka&#xA;$ stack update&#xA;$ stack build&#xA;$ stack exec koka&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also use &lt;code&gt;stack build --fast&lt;/code&gt; to build a debug version of the compiler. Use &lt;code&gt;stack test --fast&lt;/code&gt; to run the test-suite.&lt;/p&gt; &#xA;&lt;p&gt;(See the &lt;a href=&#34;https://raw.githubusercontent.com/koka-lang/koka/master/#build-notes&#34;&gt;build notes&lt;/a&gt; below for building macOS M1, or if you have issues when running- or installing &lt;code&gt;stack&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;h2&gt;Create an Install Bundle&lt;/h2&gt; &#xA;&lt;p&gt;Koka can generate a binary install bundle that can be installed on the local machine:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ stack exec koka -- -e util/bundle&#xA;...&#xA;distribution bundle created.&#xA;  bundle : bundle/v2.3.9/koka-v2.3.9-linux-x64.tar.gz&#xA;  cc     : gcc&#xA;  version: v2.3.9&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This takes a while as it pre-compiles the standard libraries in three build variants (&lt;code&gt;debug&lt;/code&gt;, &lt;code&gt;drelease&lt;/code&gt; (release with debug info), and &lt;code&gt;release&lt;/code&gt;). After generating the bundle, you can install it locally as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ util/install.sh  bundle/v2.3.9/koka-v2.3.9-linux-x64.tar.gz&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(use &lt;code&gt;util/install.bat&lt;/code&gt; on Windows). After installation, you can now directly invoke &lt;code&gt;koka&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ koka --version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Koka is by default installed for the current user in &lt;code&gt;&amp;lt;prefix&amp;gt;/bin/koka&lt;/code&gt;, (with architecture specific files under &lt;code&gt;&amp;lt;prefix&amp;gt;/lib/koka/v2.x.x&lt;/code&gt; and libraries and samples under &lt;code&gt;&amp;lt;prefix&amp;gt;/share/koka/v2.x.x&lt;/code&gt;). On Unix and macOS the default prefix is &lt;code&gt;/usr/local&lt;/code&gt; while on Windows the default prefix is &lt;code&gt;%LOCALAPPDATA%\koka&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;It is also possible to generate installation packages for various Linux platforms (RHEL, Debian, Alpine, etc.). See the [readme][util/packaging] for further information.&lt;/p&gt; &#xA;&lt;h1&gt;Benchmarks&lt;/h1&gt; &#xA;&lt;p&gt;These are initial benchmarks of Koka v2 with &lt;a href=&#34;https://www.microsoft.com/en-us/research/publication/perceus-garbage-free-reference-counting-with-reuse/&#34;&gt;Perceus&lt;/a&gt; reference counting versus state-of-the-art memory reclamation implementations in various other languages. Since we compare across languages we need to interpret these results with care -- the results depend not only on memory reclamation but also on the different optimizations performed by each compiler and how well we can translate each benchmark to that particular language. We view these results therefore mostly as &lt;em&gt;evidence that the current Koka implementation of reference counting is viable and can be competitive&lt;/em&gt; and &lt;em&gt;not&lt;/em&gt; as a direct comparison of absolute performance between languages and systems.&lt;/p&gt; &#xA;&lt;p&gt;As such, we select here only benchmarks that stress memory allocation, and we tried to select mature comparison systems that use a range of memory reclamation techniques and are considered best-in-class. The systems we compare are, Koka 2.0.3 (compiling the generated C code with gcc 9.3.0), &lt;a href=&#34;https://ocaml.org&#34;&gt;OCaml&lt;/a&gt; 4.08.1, &lt;a href=&#34;https://www.haskell.org&#34;&gt;Haskell&lt;/a&gt; GHC 8.6.5, &lt;a href=&#34;https://swift.org/&#34;&gt;Swift&lt;/a&gt; 5.3, &lt;a href=&#34;https://www.java.com&#34;&gt;Java&lt;/a&gt; SE 15.0.1 with the Hotspot G1 collector, and &lt;a href=&#34;http://www.cplusplus.org&#34;&gt;C++&lt;/a&gt; gcc 9.3.0.&lt;/p&gt; &#xA;&lt;img align=&#34;right&#34; width=&#34;400&#34; src=&#34;https://raw.githubusercontent.com/koka-lang/koka/master/doc/bench-amd3600-nov-2020.png&#34; style=&#34;border:1px solid black&#34;&gt; &#xA;&lt;p&gt;The benchmarks are all available in &lt;a href=&#34;https://raw.githubusercontent.com/koka-lang/koka/master/test/bench&#34;&gt;&lt;code&gt;test/bench&lt;/code&gt;&lt;/a&gt; (see the readme there for build instructions), and all stress memory allocation with little computation: &lt;code&gt;rbtree&lt;/code&gt; (inserts 42 million items into a red-black tree), &lt;code&gt;rbtree-ck&lt;/code&gt; (a variant of &lt;code&gt;rbtree&lt;/code&gt; that keeps a list of every 5th subtree and thus shares many subtrees), &lt;code&gt;deriv&lt;/code&gt; (the symbolic derivative of a large expression), &lt;code&gt;nqueens&lt;/code&gt; (calculates all solutions for the n-queens problem of size 13 into a list, and returns the length of that list where the solution lists share many sub-solutions), and &lt;code&gt;cfold&lt;/code&gt; (constant-folding over a large symbolic expression).&lt;/p&gt; &#xA;&lt;p&gt;Note: in C++, without automatic memory management, many benchmarks are difficult to express directly as they use persistent and partially shared data structures. To implement these faithfully would essentially require manual reference counting. Instead, we use C++ as our performance baseline: we either use in-place updates without supporting persistence (as in &lt;code&gt;rbtree&lt;/code&gt; which uses &lt;code&gt;std::map&lt;/code&gt;) or we do not reclaim memory at all (as in &lt;code&gt;deriv&lt;/code&gt;, &lt;code&gt;nqueens&lt;/code&gt;, and &lt;code&gt;cfold&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;The execution times and peak working set averaged over 10 runs and normalized to Koka are in the figure on the right (on a 3.8Ghz AMD3600XT on Ubuntu 20.04, Nov 2020).&lt;/p&gt; &#xA;&lt;p&gt;We can see that even though Koka has currently few optimizations besides the reference counting ones, it performs very well compared to these mature systems, often outperforming by a significant margin -- both in execution time and peak working set. Clearly, these benchmarks are allocation heavy but it is encouraging to see this initial performance from Koka.&lt;/p&gt; &#xA;&lt;p&gt;A full discussion of these benchmarks and systems can be found in the &lt;a href=&#34;https://www.microsoft.com/en-us/research/publication/perceus-garbage-free-reference-counting-with-reuse/&#34;&gt;Perceus&lt;/a&gt; report.&lt;/p&gt; &#xA;&lt;h1&gt;Tasks&lt;/h1&gt; &#xA;&lt;p&gt;Please help develop Koka: there are many opportunities to improve Koka or do research with Koka. We need:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Emacs (partially done) and Vim syntax highlighting.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Add more samples, improve documentation, landing page etc. Make it easier for people to contribute.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Many library modules are incomplete (like &lt;code&gt;std/os/file&lt;/code&gt;) or missing (like &lt;code&gt;std/data/map&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Update file and os primitives for the JavaScript backend.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Run the full test suite.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Run the Bayesian probalistic machine learning program with large parameters.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Functions with a pattern match in the argument (by Steven Fontanella).&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Support &lt;code&gt;int64&lt;/code&gt; operations&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;More advanced projects:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Update the JavaScript backend to 1) use modern modules instead of amdefine, 2) use the new bigints instead of bigint.js, and 3) add support for int64. (landed in the &lt;code&gt;dev&lt;/code&gt; branch)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Port &lt;code&gt;std/text/regex&lt;/code&gt; from v1 (using PCRE)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; A language server for Visual Studio Code and Atom. Koka can already generate a typed &lt;a href=&#34;https://raw.githubusercontent.com/koka-lang/koka/master/src/Syntax/RangeMap.hs&#34;&gt;range map&lt;/a&gt; so this should be managable. Partially done: see PR #100 (by @fwcd) -- it just needs work on packaging it to make it easy to build and install as part of the Koka installer.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Package management of Koka modules.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Compile to WASM (using emscripten on the current C backend)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Extend TRMC to include (1) return results with pairs (like &lt;code&gt;unzip&lt;/code&gt; or &lt;code&gt;partition&lt;/code&gt;), (2) associative functions (like &lt;code&gt;+&lt;/code&gt; in &lt;code&gt;length&lt;/code&gt;), and (3) mutually recursive functions.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Improve compilation of local state to use local variables directly (in C) without allocation. Tricky though due to multiple resumptions.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Improve performance of array/mutable reference programming. Koka is has great performance for algebraic datatypes but lags when using more imperative array algorithms. This requires better integration with the reference counting (faster in-place update for vectors) and integration local mutable references.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; To support optimal Btree&#39;s we need &lt;em&gt;mutable fields&lt;/em&gt; in constructors, and perhaps intrusive vector fields.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; The current parallel task support is very basic; we need a great work-stealing thread pool, LVar&#39;s etc.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Expose the &#34;bytes&#34; primitive data together with views..&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Improve C code generation by identifying output that could be better; also in effectful code we generate many join-points (see [9]), can we increase the sharing/reduce the extra code.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; The compiler always analyses module dependencies and builds any needed dependencies. The current code (in &lt;code&gt;src/Compiler/Compile.hs&lt;/code&gt;) is not great and it would be nice to factorize the &#34;make&#34; functionality out and also allow for parallel builds.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Master/PhD level:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Better language level FBIP support with guaranteed datatype matching, automatic derivative and visitor generation.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Can we use C++ exceptions to implement &#34;zero-cost&#34; &lt;code&gt;if yielding() ...&lt;/code&gt; branches and remove the need join points (see [9]).&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Float up &lt;code&gt;open&lt;/code&gt; calls to improve effect handling (worked on by Naoya Furudono)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Formalize opening and closing effect row types (worked on by Kazuki Ikemori)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Currently being worked on:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Various standard optimizations like case-of-case, join points, case-of-known constructor, etc.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Implement inline specialization where functions like &lt;code&gt;map&lt;/code&gt;, &lt;code&gt;fold&lt;/code&gt; etc get specialized for the function with which they are called. This is an important optimization for functional style languages to reduce the allocation of lambda&#39;s. (contact: Steven Fontanella)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Borrowing analysis for Perceus and improved reuse analysis. (contact: Anton Lorenzen)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Improve case-of-known simplification with shape information&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The following is the immediate todo list to be completed in the coming months:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Port &lt;code&gt;std/async&lt;/code&gt; (using &lt;code&gt;libuv&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Proper overloading with (a form of) type classes. (in design phase).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Contact me if you are interested in tackling some of these :-)&lt;/p&gt; &#xA;&lt;h1&gt;Build Notes&lt;/h1&gt; &#xA;&lt;h2&gt;Branches&lt;/h2&gt; &#xA;&lt;p&gt;The main development branches are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;master&lt;/code&gt;: latest stable version.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;dev&lt;/code&gt;: current development branch -- submit PR&#39;s to this branch.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;v1-master&lt;/code&gt;: last stable version of Koka v1: this is Koka with the Javascript (and C#) backend which does not use evidence translation. This version supports &lt;code&gt;std/async&lt;/code&gt; and should compile examples from published papers.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Building on macOS M1&lt;/h2&gt; &#xA;&lt;p&gt;Currently (Dec 2021) you need to use &lt;code&gt;brew install haskell-stack --head&lt;/code&gt; to get the latest &lt;code&gt;2.7.4&lt;/code&gt; version of stack. (Have patience as the cabal install step takes about 20 min). Moreover, you need to add the &lt;code&gt;brew&lt;/code&gt; installed LLVM to your path afterwards, or otherwise stack cannot find the LLVM tools. Add the following to your &lt;code&gt;~/.zshrc&lt;/code&gt; script and open an fresh prompt:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;export PATH=/opt/homebrew/opt/llvm/bin:$PATH&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;!--&#xA;Moreover, sometimes `stack` segfaults but running it inside `bash` seems to resolve the issue.&#xA;Also, we need to tell stack to use the system installed ghc and skip the version check as&#xA;it can currently not install GHC for arm64 yet:&#xA;```&#xA;bash:~$ git clone --recursive https://github.com/koka-lang/koka&#xA;bash:~$ cd koka&#xA;bash:~/koka$ stack --system-ghc --skip-ghc-check build&#xA;bash:~/koka$ stack --system-ghc --skip-ghc-check exec koka&#xA;```&#xA;&#xA;and pass the `--system-ghc` flag to create an installation bundle as well:&#xA;```&#xA;bash:~/koka$ stack --system-ghc --skip-ghc-check exec koka -- -e util/bundle -- --system-ghc&#xA;```&#xA;--&gt; &#xA;&lt;h2&gt;Building with Cabal&lt;/h2&gt; &#xA;&lt;p&gt;Some platforms (like Linux arm64 and FreeBSD) do not always support &lt;code&gt;stack&lt;/code&gt; well. In these cases we can also use &lt;code&gt;ghc&lt;/code&gt; and &lt;code&gt;cabal&lt;/code&gt; directly. Install these packages as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ sudo apt update&#xA;$ sudo apt install ghc cabal-install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On macOS (x64 and arm64) we use &lt;code&gt;brew&lt;/code&gt; instead:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ brew install pkg-config ghc cabal-install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On FreeBSD, use &lt;code&gt;pkg&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ sudo pkg update&#xA;$ sudo pkg install ghc hs-cabal-install   # or: hs-haskell-platform&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Optionally, install &lt;code&gt;vcpkg&lt;/code&gt; as well. If you install this in the &lt;code&gt;~/vcpkg&lt;/code&gt; directory Koka will find it automatically when needed:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;~$ git clone https://github.com/microsoft/vcpkg&#xA;~$ ./vcpkg/bootstrap-vcpkg.sh&#xA;~$ vcpkg/vcpkg install pcre&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We can now build the compiler using &lt;code&gt;cabal&lt;/code&gt; as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;~$ git clone --recursive https://github.com/koka-lang/koka&#xA;~$ cd koka&#xA;~/koka$ cabal new-update&#xA;~/koka$ cabal new-build&#xA;~/koka$ cabal new-run koka&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We can also run tests as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;~/koka$ cabal new-run koka-test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or create an installer:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;~/koka$ cabal new-run koka -- -e util/bundle&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Building with minbuild&lt;/h2&gt; &#xA;&lt;p&gt;If neither &lt;code&gt;stack&lt;/code&gt; nor &lt;code&gt;cabal&lt;/code&gt; are functional, you may try to run the minimal build script to build Koka:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;~/koka$ ./util/minbuild.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;which directly invokes &lt;code&gt;ghc&lt;/code&gt; to build the compiler. You can create an install bundle from a minbuild as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;~/koka$ .koka/minbuild/koka -e util/bundle.kk -- --koka=.koka/minbuild/koka&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Windows C Compilers&lt;/h2&gt; &#xA;&lt;p&gt;The Koka compiler on Windows requires a C compiler. By default when using &lt;code&gt;stack exec koka&lt;/code&gt; the C compiler supplied with &lt;code&gt;ghc&lt;/code&gt; is used (&lt;code&gt;mingw&lt;/code&gt;) but that is only visible within a stack environmet.&lt;/p&gt; &#xA;&lt;p&gt;It is therefore recommended to install the &lt;a href=&#34;https://llvm.org/builds&#34;&gt;clang&lt;/a&gt; compiler for Windows (which is automatically installed when running &lt;code&gt;util/install.bat&lt;/code&gt;). However, Koka can also use the Microsoft Visual C++ compiler (&lt;code&gt;cl&lt;/code&gt;) if you run &lt;code&gt;koka&lt;/code&gt; from a &lt;a href=&#34;https://raw.githubusercontent.com/koka-lang/koka/master/vsprompt&#34;&gt;Visual Studio x64 toolset&lt;/a&gt; command prompt (in order to link correctly with the Windows system libraries).&lt;/p&gt; &#xA;&lt;p&gt;Generally, for Koka code, &lt;code&gt;mingw&lt;/code&gt; (&lt;code&gt;gcc&lt;/code&gt;) optimizes best, closely followed &lt;code&gt;clang-cl&lt;/code&gt;. On a 3.8Gz AMD 3600XT, with &lt;code&gt;mingw&lt;/code&gt; 7.2.0, &lt;code&gt;clang-cl&lt;/code&gt; 11.0.0, and &lt;code&gt;cl&lt;/code&gt; 19.28 we get:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ stack exec out\v2.0.5\mingw-release\test_bench_koka_rbtree -- --kktime&#xA;420000&#xA;info: elapsed: 0.624s, user: 0.625s, sys: 0.000s, rss: 163mb&#xA;&#xA;$ out\v2.0.5\clang-cl-release\test_bench_koka_rbtree --kktime&#xA;420000&#xA;info: elapsed: 0.727s, user: 0.734s, sys: 0.000s, rss: 164mb&#xA;&#xA;$ out\v2.0.5\cl-release\test_bench_koka_rbtree --kktime&#xA;420000&#xA;info: elapsed: 1.483s, user: 1.484s, sys: 0.000s, rss: 164mb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Older Release Notes&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;v2.1.9&lt;/code&gt;, 2021-06-23: initial support for cross-module specialization (by Steven Fontanella).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;v2.1.8&lt;/code&gt;, 2021-06-17: initial support for macOS M1 and Linux arm64, improved readline, minor fixes.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;v2.1.6&lt;/code&gt;, 2021-06-10: initial support for shallow resumptions, fix space leak with vectors, allow &lt;code&gt;gcc&lt;/code&gt; with &lt;code&gt;--fasan&lt;/code&gt;, improved &lt;code&gt;vcpkg&lt;/code&gt; support, add &lt;code&gt;--fstdalloc&lt;/code&gt; flag, improved VS code syntax highlighting, improved &lt;code&gt;valgrind&lt;/code&gt; support, added &lt;code&gt;--no-optimize&lt;/code&gt; flag for extended debug information.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;v2.1.4&lt;/code&gt;, 2021-05-31: remove dependency on cmake, support library linking, support vckpg, updated &lt;code&gt;std/text/regex&lt;/code&gt;, improved Windows installer with &lt;code&gt;clang&lt;/code&gt; install included, remove dependency on Visual Studio on Windows, improved &lt;code&gt;--fasan&lt;/code&gt; support, fixed space leak on boxed value types, use signed &lt;code&gt;size_t&lt;/code&gt; internally, various small bug fixes.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;v2.1.2&lt;/code&gt;, 2021-05-01: various bug fixes, allow pattern bindings in parameters of anonymous functions (by Steven Fontanella), initial Emacs syntax highlighting (by Kamoii).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;v2.1.1&lt;/code&gt;, 2021-03-08: bug fixes, use right-associative (++) for string- and list append (instead of (+)), improved internal string handling.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;v2.0.16&lt;/code&gt;, 2021-02-14: bug fixes, fix short-circuit evaluation of logical operations, improved utf-8 handling.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;v2.0.14&lt;/code&gt;, 2020-12-11: bug fixes, improved var escape checking.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;v2.0.12&lt;/code&gt;, 2020-12-02: syntax highlighting support for VS Code and Atom, improved uninstall, more samples.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;v2.0.9&lt;/code&gt;, 2020-11-27: now with binary &lt;a href=&#34;https://github.com/koka-lang/koka/releases&#34;&gt;releases&lt;/a&gt; for Windows, macOS, and Linux.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;v2.0.7&lt;/code&gt;, 2020-11-23: more small fixes, improved scoped handlers, improved higher-rank type propagation, more samples.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;v2.0.5&lt;/code&gt;, 2020-11-15: many bug fixes and improvements. Improved codegen, named handlers, added samples, docker support, direct C compilation, local install support.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;v2.0.0&lt;/code&gt;, 2020-08-21: initial v2 release.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;References&lt;/h1&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Daniel Hillerström, and Sam Lindley. “Liberating Effects with Rows and Handlers.” In &lt;em&gt;Proceedings of the 1st International Workshop on Type-Driven Development&lt;/em&gt;, 15--27. TyDe 2016. Nara, Japan. 2016. doi:&lt;a href=&#34;https://dx.doi.org/10.1145/2976022.2976033&#34;&gt;10.1145/2976022.2976033&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Daan Leijen. “Koka: Programming with Row Polymorphic Effect Types.” In &lt;em&gt;Mathematically Structured Functional Programming 2014&lt;/em&gt;. EPTCS. Mar. 2014. arXiv:&lt;a href=&#34;http://arxiv.org/abs/1406.2061&#34;&gt;1406.2061&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Daan Leijen. &lt;em&gt;Algebraic Effects for Functional Programming&lt;/em&gt;. MSR-TR-2016-29. Microsoft Research. Aug. 2016. &lt;a href=&#34;https://www.microsoft.com/en-us/research/publication/algebraic-effects-for-functional-programming&#34;&gt;https://www.microsoft.com/en-us/research/publication/algebraic-effects-for-functional-programming&lt;/a&gt;. Extended version of [4].&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Daan Leijen. “Type Directed Compilation of Row-Typed Algebraic Effects.” In &lt;em&gt;Proceedings of Principles of Programming Languages (POPL’17)&lt;/em&gt;. Paris, France. Jan. 2017.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Nicolas Wu, Tom Schrijvers, and Ralf Hinze. “Effect Handlers in Scope.” In &lt;em&gt;Proceedings of the 2014 ACM SIGPLAN Symposium on Haskell&lt;/em&gt;, 1--12. Haskell ’14. ACM, New York, NY, USA. 2014. doi:&lt;a href=&#34;https://dx.doi.org/10.1145/2633357.2633358&#34;&gt;10.1145/2633357.2633358&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Ningning Xie, Jonathan Brachthäuser, Daniel Hillerström, Philipp Schuster, Daan Leijen. “Effect Handlers, Evidently” The 25th ACM SIGPLAN International Conference on Functional Programming (ICFP), August 2020. doi:&lt;a href=&#34;https://doi.org/10.1145/3408981&#34;&gt;10.1145/3408981&lt;/a&gt;, &lt;a href=&#34;https://www.microsoft.com/en-us/research/uploads/prod/2020/07/evidently-with-proofs-5f0b7d860b387.pdf&#34;&gt;pdf&lt;/a&gt;. See also [9] which improves upon this work.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Ningning Xie and Daan Leijen. “Effect Handlers in Haskell, Evidently” The 13th ACM SIGPLAN International Haskell Symposium, August 2020. &lt;a href=&#34;https://www.microsoft.com/en-us/research/uploads/prod/2020/07/effev.pdf&#34;&gt;pdf&lt;/a&gt; See also the &lt;a href=&#34;https://github.com/xnning/EvEff&#34;&gt;Ev.Eff&lt;/a&gt; and &lt;a href=&#34;https://github.com/xnning/MpEff&#34;&gt;Mp.Eff&lt;/a&gt; repositories.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Alex Reinking, Ningning Xie, Leonardo de Moura, and Daan Leijen: “ Perceus: Garbage Free Reference Counting with Reuse” MSR-TR-2020-42, Nov 22, 2020. Distinguished paper at PLDI&#39;21. &lt;a href=&#34;https://www.microsoft.com/en-us/research/publication/perceus-garbage-free-reference-counting-with-reuse/&#34;&gt;pdf&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Ningning Xie and Daan Leijen. “ Generalized Evidence Passing for Effect Handlers” In The 26th ACM SIGPLAN International Conference on Functional Programming (ICFP), August 2021. Also as MSR-TR-2021-5, Mar, 2021. &lt;a href=&#34;https://www.microsoft.com/en-us/research/publication/generalized-evidence-passing-for-effect-handlers/&#34;&gt;pdf&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Anton Lorenzen and Daan Leijen. “ Reference Counting with Frame-Limited Reuse” Microsoft Research technical report MSR-TR-2021-30, Nov 2021. &lt;a href=&#34;https://www.microsoft.com/en-us/research/publication/reference-counting-with-frame-limited-reuse-extended-version/&#34;&gt;pdf&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
  <entry>
    <title>github/semantic</title>
    <updated>2022-07-31T02:13:29Z</updated>
    <id>tag:github.com,2022-07-31:/github/semantic</id>
    <link href="https://github.com/github/semantic" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Parsing, analyzing, and comparing source code across many languages&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Semantic&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;semantic&lt;/code&gt; is a Haskell library and command line tool for parsing, analyzing, and comparing source code.&lt;/p&gt; &#xA;&lt;p&gt;In a hurry? Check out our documentation of &lt;a href=&#34;https://raw.githubusercontent.com/github/semantic/main/docs/examples.md&#34;&gt;example uses for the &lt;code&gt;semantic&lt;/code&gt; command line tool&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Table of Contents&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/github/semantic/main/#usage&#34;&gt;Usage&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/github/semantic/main/#language-support&#34;&gt;Language support&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/github/semantic/main/#development&#34;&gt;Development&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/github/semantic/main/#technology-and-architecture&#34;&gt;Technology and architecture&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/github/semantic/main/#licensing&#34;&gt;Licensing&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Run &lt;code&gt;semantic --help&lt;/code&gt; for complete list of up-to-date options.&lt;/p&gt; &#xA;&lt;h4&gt;Parse&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;Usage: semantic parse [--sexpression | (--json-symbols|--symbols) |&#xA;                        --proto-symbols | --show | --quiet] [FILES...]&#xA;  Generate parse trees for path(s)&#xA;&#xA;Available options:&#xA;  --sexpression            Output s-expression parse trees (default)&#xA;  --json-symbols,--symbols Output JSON symbol list&#xA;  --proto-symbols          Output protobufs symbol list&#xA;  --show                   Output using the Show instance (debug only, format&#xA;                           subject to change without notice)&#xA;  --quiet                  Don&#39;t produce output, but show timing stats&#xA;  -h,--help                Show this help text&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Language support&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Language&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Parse&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;AST Symbols†&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Stack graphs&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Ruby&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;JavaScript&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;TypeScript&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;🚧&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Python&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;🚧&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Go&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;PHP&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Java&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;🚧&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;JSON&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;⬜️&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;⬜️&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;JSX&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;TSX&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;CodeQL&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Haskell&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;🚧&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;🚧&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;† Used for &lt;a href=&#34;https://help.github.com/en/github/managing-files-in-a-repository/navigating-code-on-github&#34;&gt;code navigation&lt;/a&gt; on github.com.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;✅ — Supported&lt;/li&gt; &#xA; &lt;li&gt;🔶 — Partial support&lt;/li&gt; &#xA; &lt;li&gt;🚧 — Under development&lt;/li&gt; &#xA; &lt;li&gt;⬜ - N/A ️&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;semantic&lt;/code&gt; requires at least GHC 8.10.1 and Cabal 3.0. We strongly recommend using &lt;a href=&#34;https://www.haskell.org/ghcup/&#34;&gt;&lt;code&gt;ghcup&lt;/code&gt;&lt;/a&gt; to sandbox GHC versions, as GHC packages installed through your OS&#39;s package manager may not install statically-linked versions of the GHC boot libraries. &lt;code&gt;semantic&lt;/code&gt; currently builds only on Unix systems; users of other operating systems may wish to use the &lt;a href=&#34;https://github.com/github/semantic/packages/11609&#34;&gt;Docker images&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;We use &lt;code&gt;cabal&#39;s&lt;/code&gt; &lt;a href=&#34;https://cabal.readthedocs.io/en/3.4/nix-local-build-overview.html&#34;&gt;Nix-style local builds&lt;/a&gt; for development. To get started quickly:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone git@github.com:github/semantic.git&#xA;cd semantic&#xA;script/bootstrap&#xA;cabal v2-build all&#xA;cabal v2-run semantic:test&#xA;cabal v2-run semantic:semantic -- --help&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also use the &lt;a href=&#34;https://bazel.build&#34;&gt;Bazel&lt;/a&gt; build system for development. To learn more about Bazel and why it might give you a better development experience, check the &lt;a href=&#34;https://raw.githubusercontent.com/github/semantic/main/docs/build.md&#34;&gt;build documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone git@github.com:github/semantic.git&#xA;cd semantic&#xA;script/bootstrap-bazel&#xA;bazel build //...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;stack&lt;/code&gt; as a build tool is not officially supported; there is &lt;a href=&#34;https://github.com/jkachmar/semantic-stack-yaml&#34;&gt;unofficial &lt;code&gt;stack.yaml&lt;/code&gt; support&lt;/a&gt; available, though we cannot make guarantees as to its stability.&lt;/p&gt; &#xA;&lt;h2&gt;Technology and architecture&lt;/h2&gt; &#xA;&lt;p&gt;Architecturally, &lt;code&gt;semantic&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Generates per-language Haskell syntax types based on &lt;a href=&#34;https://github.com/tree-sitter/tree-sitter&#34;&gt;tree-sitter&lt;/a&gt; grammar definitions.&lt;/li&gt; &#xA; &lt;li&gt;Reads blobs from a filesystem or provided via a protocol buffer request.&lt;/li&gt; &#xA; &lt;li&gt;Returns blobs or performs analysis.&lt;/li&gt; &#xA; &lt;li&gt;Renders output in one of many supported formats.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Throughout its lifecycle, &lt;code&gt;semantic&lt;/code&gt; has leveraged a number of interesting algorithms and techniques, including:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Myers&#39; algorithm (SES) as described in the paper &lt;a href=&#34;http://www.xmailserver.org/diff2.pdf&#34;&gt;&lt;em&gt;An O(ND) Difference Algorithm and Its Variations&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;RWS as described in the paper &lt;a href=&#34;https://db.in.tum.de/~finis/papers/RWS-Diff.pdf&#34;&gt;&lt;em&gt;RWS-Diff: Flexible and Efficient Change Detection in Hierarchical Data&lt;/em&gt;&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Open unions and &lt;a href=&#34;http://www.cs.ru.nl/~W.Swierstra/Publications/DataTypesALaCarte.pdf&#34;&gt;data types à la carte&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;An implementation of &lt;a href=&#34;https://plum-umd.github.io/abstracting-definitional-interpreters/&#34;&gt;Abstracting Definitional Interpreters&lt;/a&gt; extended to work with an à la carte representation of syntax terms.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributions&lt;/h2&gt; &#xA;&lt;p&gt;Contributions are welcome! Please see our &lt;a href=&#34;https://raw.githubusercontent.com/github/semantic/main/CONTRIBUTING.md&#34;&gt;contribution guidelines&lt;/a&gt; and our &lt;a href=&#34;https://raw.githubusercontent.com/github/semantic/main/CODE_OF_CONDUCT.md&#34;&gt;code of conduct&lt;/a&gt; for details on how to participate in our community.&lt;/p&gt; &#xA;&lt;h2&gt;Licensing&lt;/h2&gt; &#xA;&lt;p&gt;Semantic is licensed under the &lt;a href=&#34;https://raw.githubusercontent.com/github/semantic/main/semantic/LICENSE&#34;&gt;MIT license&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>