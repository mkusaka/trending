<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Haskell Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-21T01:57:51Z</updated>
  <subtitle>Weekly Trending of Haskell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>input-output-hk/cardano-db-sync</title>
    <updated>2022-08-21T01:57:51Z</updated>
    <id>tag:github.com,2022-08-21:/input-output-hk/cardano-db-sync</id>
    <link href="https://github.com/input-output-hk/cardano-db-sync" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A component that follows the Cardano chain and stores blocks and transactions in PostgreSQL&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Cardano DB Sync&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Anyone wishing to build and run anything in this repository should avoid the &lt;code&gt;master&lt;/code&gt; branch and build/run from the latest release tag.&lt;/p&gt; &#xA;&lt;h2&gt;Purpose&lt;/h2&gt; &#xA;&lt;p&gt;The purpose of Cardano DB Sync is to follow the Cardano chain and take information from the chain and an internally maintained copy of ledger state. Data is then extracted from the chain and inserted into a PostgreSQL database. SQL queries can then be written directly against the database schema or as queries embedded in any language with libraries for interacting with an SQL database.&lt;/p&gt; &#xA;&lt;p&gt;Examples of what someone would be able to do via an SQL query against a Cardano DB Sync instance fully synced to a specific network is:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Look up any block, transaction, address, stake pool etc on that network, usually by the hash that identifies that item or the index into another table.&lt;/li&gt; &#xA; &lt;li&gt;Look up the balance of any stake address for any Shelley or later epoch.&lt;/li&gt; &#xA; &lt;li&gt;Look up the amount of ADA delegated to each pool for any Shelley or later epoch.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Example SQL queries are available at &lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/cardano-db-sync/master/doc/interesting-queries.md&#34;&gt;Example Queries&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Architecture&lt;/h2&gt; &#xA;&lt;p&gt;The cardano-db-sync component consists of a set of components:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;cardano-db&lt;/code&gt; which defines common data types and functions used by any application that needs to interact with the data base from Haskell. In particular, it defines the database schema.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cardano-db-tool&lt;/code&gt; a tool used to manage the databases of cardano-db-sync (create and run migrations, validate and analyse)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cardano-db-sync&lt;/code&gt; which acts as a Cardano node, following the chain and inserting data from the chain into a PostgreSQL database.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The db-sync node is written in a highly modular fashion to allow it to be as flexible as possible.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;cardano-db-sync&lt;/code&gt; node connects to a locally running &lt;code&gt;cardano-node&lt;/code&gt; (ie one connected to other nodes in the Cardano network over the internet with TCP/IP) using a Unix domain socket, retrieves blocks, updates its internal ledger state and stores parts of each block in a local PostgreSQL database. The database does not store things like cryptographic signatures but does store enough information to follow the chain of blocks and look at the transactions within blocks.&lt;/p&gt; &#xA;&lt;p&gt;The PostgreSQL database is designed to be accessed in a read-only fashion from other applications. The database schema is highly normalised which helps prevent data inconsistencies (specifically with the use of foreign keys from one table to another). More user friendly database queries can be implemented using &lt;a href=&#34;https://www.postgresql.org/docs/current/sql-createview.html&#34;&gt;Postgres Views&lt;/a&gt; to implement joins between tables.&lt;/p&gt; &#xA;&lt;h2&gt;System Requirements&lt;/h2&gt; &#xA;&lt;p&gt;The system requirements for &lt;code&gt;cardano-db-sync&lt;/code&gt; (with both &lt;code&gt;db-sync&lt;/code&gt; and the &lt;code&gt;node&lt;/code&gt; running on the same machine are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Any of the big well known Linux distributions (eg, Debian, Ubuntu, RHEL, CentOS, Arch etc).&lt;/li&gt; &#xA; &lt;li&gt;32 Gigabytes of RAM or more.&lt;/li&gt; &#xA; &lt;li&gt;4 CPU cores or more.&lt;/li&gt; &#xA; &lt;li&gt;Ensure that the machine has sufficient IOPS (Input/Output Operations per Second). Ie it should be 60k IOPS or better. Lower IOPS ratings will result in slower sync times and/or falling behind the chain tip.&lt;/li&gt; &#xA; &lt;li&gt;160 Gigabytes or more of disk storage (preferably SSD which are 2-5 times faster than electro-mechanical disks).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The recommended configuration is to have the &lt;code&gt;db-sync&lt;/code&gt; and the PostgreSQL server on the same machine. During syncing (getting historical data from the blockchain) there is a &lt;strong&gt;HUGE&lt;/strong&gt; amount of data traffic between &lt;code&gt;db-sync&lt;/code&gt; and the database. Traffic to a local database is significantly faster than traffic to a database on the LAN or remotely to another location.&lt;/p&gt; &#xA;&lt;h2&gt;Troubleshooting&lt;/h2&gt; &#xA;&lt;p&gt;If you have any issues with this project, consult the &lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/cardano-db-sync/master/doc/troubleshooting.md&#34;&gt;Troubleshooting&lt;/a&gt; page for possible solutions.&lt;/p&gt; &#xA;&lt;h2&gt;Further Reading&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/cardano-db-sync/master/doc/building-running.md&#34;&gt;BuildingRunning&lt;/a&gt;: Building and running the db-sync node.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/cardano-db-sync/master/doc/docker.md&#34;&gt;Docker&lt;/a&gt;: Instruction for docker-compose, and building the images using nix.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/cardano-db-sync/master/doc/ERG%3Epng&#34;&gt;ERD&lt;/a&gt;: The entity relationship diagram.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/cardano-db-sync/master/doc/interesting-queries.md&#34;&gt;Example SQL queries&lt;/a&gt;: Some example SQL and Haskell/Esqueleto queries.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/cardano-db-sync/master/doc/pool-offline-data.md&#34;&gt;PoolOfflineData&lt;/a&gt;: Explanation of how stake pool offline data is retried.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/cardano-db-sync/master/doc/schema.md&#34;&gt;Schema Documentation&lt;/a&gt;: The database schema documentation.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/cardano-db-sync/master/doc/schema-management.md&#34;&gt;Schema Management&lt;/a&gt;: How the database schema is managed and modified.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/cardano-db-sync/master/doc/state-snapshot.md&#34;&gt;StateSnapshot&lt;/a&gt;: Document the creation and restoration of state snapshot files.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://hydra.iohk.io/job/Cardano/cardano-db-sync/native.haskellPackages.cardano-db.checks.test-db.x86_64-linux/latest/download/1&#34;&gt;SQL DB Schema&lt;/a&gt;: The current PostgreSQL DB schema, as generated by the code.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/cardano-db-sync/master/doc/validation.md&#34;&gt;Validation&lt;/a&gt;: Explanation of validation done by the db-sync node and assumptions made.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>input-output-hk/cardano-ledger</title>
    <updated>2022-08-21T01:57:51Z</updated>
    <id>tag:github.com,2022-08-21:/input-output-hk/cardano-ledger</id>
    <link href="https://github.com/input-output-hk/cardano-ledger" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The ledger implementation and specifications of the Cardano blockchain.&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt;Cardano Ledger&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/input-output-hk/cardano-ledger/actions/workflows/haskell.yml&#34;&gt; &lt;img alt=&#34;GitHub Workflow Status (master)&#34; src=&#34;https://img.shields.io/github/workflow/status/input-output-hk/cardano-ledger/Haskell%20CI/master.svg?style=for-the-badge&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;This repository contains the formal specifications, executable models, and implementations of the Cardano Ledger.&lt;/p&gt; &#xA;&lt;p&gt;The documents are built in our CI and can be readily accessed using the following links:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Era&lt;/th&gt; &#xA;   &lt;th&gt;Design Documents&lt;/th&gt; &#xA;   &lt;th&gt;Formal Specification&lt;/th&gt; &#xA;   &lt;th&gt;CDDL&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Byron&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://hydra.iohk.io/job/Cardano/cardano-ledger/byronChainSpec/latest/download-by-type/doc-pdf/blockchain-spec&#34; title=&#34;Specification of the Blockchain Layer&#34;&gt;Chain Spec&lt;/a&gt;, &lt;a href=&#34;https://hydra.iohk.io/job/Cardano/cardano-ledger/byronLedgerSpec/latest/download-by-type/doc-pdf/ledger-spec&#34; title=&#34;A Formal Specification of the Cardano Ledger&#34;&gt;Ledger Spec&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/input-output-hk/cardano-ledger/tree/master/eras/byron/cddl-spec/byron.cddl&#34;&gt;CDDL&lt;/a&gt;, &lt;a href=&#34;https://hydra.iohk.io/job/Cardano/cardano-ledger/blocksCDDLSpec/latest/download-by-type/doc-pdf/binary&#34;&gt;PDF&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Shelley&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://hydra.iohk.io/job/Cardano/cardano-ledger/delegationDesignSpec/latest/download-by-type/doc-pdf/delegation_design_spec&#34; title=&#34;Design Specification for Delegation and Incentives in Cardano&#34;&gt;Design&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://hydra.iohk.io/job/Cardano/cardano-ledger/shelleyLedgerSpec/latest/download-by-type/doc-pdf/ledger-spec&#34; title=&#34;A Formal Specification of the Cardano Ledger&#34;&gt;Spec&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/input-output-hk/cardano-ledger/tree/master/eras/shelley/test-suite/cddl-files&#34;&gt;CDDL&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Allegra &amp;amp; Mary&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://eprint.iacr.org/2020/895&#34; title=&#34;Multi-Currency Ledgers&#34;&gt;Multi-Currency&lt;/a&gt;, &lt;a href=&#34;https://iohk.io/en/research/library/papers/utxoma-utxo-with-multi-asset-support/&#34; title=&#34;UTXOma:UTXO with Multi-Asset Support&#34;&gt;UTXOma&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://hydra.iohk.io/job/Cardano/cardano-ledger/specs.shelley-ma/latest/download-by-type/doc-pdf/shelley-ma&#34; title=&#34;A Formal Specification of the Cardano Ledger with a Native Multi-Asset Implementation&#34;&gt;Spec&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/input-output-hk/cardano-ledger/tree/master/eras/shelley-ma/test-suite/cddl-files&#34;&gt;CDDL&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Alonzo&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://iohk.io/en/research/library/papers/the-extended-utxo-model/&#34; title=&#34;The Extended UTXO Model&#34;&gt;eUTXO&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://hydra.iohk.io/job/Cardano/cardano-ledger/specs.alonzo-ledger/latest/download-by-type/doc-pdf/alonzo-changes&#34; title=&#34;A Formal Specification of the Cardano Ledger integrating Plutus Core&#34;&gt;Spec&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/input-output-hk/cardano-ledger/tree/master/eras/alonzo/test-suite/cddl-files&#34;&gt;CDDL&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Babbage&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://iohk.io/en/research/library/papers/on-uc-secure-range-extension-and-batch-verification-for-ecvrf/&#34; title=&#34;On UC-Secure Range Extension and Batch Verification for ECVRF&#34;&gt;batch-verification&lt;/a&gt;, &lt;a href=&#34;https://github.com/cardano-foundation/CIPs/pull/159&#34; title=&#34;Reference inputs&#34;&gt;CIP-31&lt;/a&gt;, &lt;a href=&#34;https://github.com/cardano-foundation/CIPs/pull/160&#34; title=&#34;Inline datums&#34;&gt;CIP-32&lt;/a&gt;, &lt;a href=&#34;https://github.com/cardano-foundation/CIPs/pull/161&#34; title=&#34;Reference scripts&#34;&gt;CIP-33&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://hydra.iohk.io/job/Cardano/cardano-ledger/specs.babbage-ledger/latest/download-by-type/doc-pdf/babbage-changes&#34; title=&#34;Formal Specification of the Cardano Ledger for the Babbage era&#34;&gt;Spec&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/input-output-hk/cardano-ledger/tree/master/eras/babbage/test-suite/cddl-files&#34;&gt;CDDL&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Other Documents:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://hydra.iohk.io/job/Cardano/cardano-ledger/nonIntegerCalculations/latest/download-by-type/doc-pdf/non-integer-calculations&#34;&gt;Non-integer calculations specification&lt;/a&gt;: details on the parts of the Shelley specification that use real numbers.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://hydra.iohk.io/job/Cardano/cardano-ledger/specs.pool-ranking/latest/download-by-type/doc-pdf/pool-ranking&#34;&gt;Stake pool ranking specification&lt;/a&gt;: details for a robust stake pool ranking mechanism.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://hydra.iohk.io/job/Cardano/cardano-ledger/semanticsSpec/latest/download-by-type/doc-pdf/small-step-semantics&#34;&gt;Explanation of the small-step-semantics framework&lt;/a&gt;: a guide to the notation and style used by our ledger rules.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In addition, there is a formalization of the Ledger Specification in Isabelle/HOL which can be found &lt;a href=&#34;https://github.com/input-output-hk/fm-ledger-formalization&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Some user documentation is published on &lt;a href=&#34;https://cardano-ledger.readthedocs.io/en/latest&#34;&gt;Read the Docs&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Repository structure&lt;/h1&gt; &#xA;&lt;p&gt;The directory structure of this repository is as follows:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/cardano-ledger/master/eras/byron&#34;&gt;byron&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/cardano-ledger/master/eras/byron/ledger&#34;&gt;ledger&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/cardano-ledger/master/eras/byron/ledger/formal-spec&#34;&gt;formal-spec&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/cardano-ledger/master/eras/byron/ledger/executable-spec&#34;&gt;executable-spec&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/cardano-ledger/master/eras/byron/ledger/impl&#34;&gt;implementation&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/cardano-ledger/master/eras/byron/chain&#34;&gt;chain&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/cardano-ledger/master/eras/byron/chain/formal-spec&#34;&gt;formal-spec&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/cardano-ledger/master/eras/byron/chain/executable-spec&#34;&gt;executable-spec&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/cardano-ledger/master/eras/byron/cddl-spec&#34;&gt;cddl&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/cardano-ledger/master/eras/shelley&#34;&gt;shelley&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/cardano-ledger/master/eras/shelley/design-spec&#34;&gt;design-spec&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/cardano-ledger/master/eras/shelley/formal-spec&#34;&gt;formal-spec&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/cardano-ledger/master/eras/shelley/impl&#34;&gt;implementation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/cardano-ledger/master/eras/shelley/test-suite&#34;&gt;tests&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/cardano-ledger/master/eras/shelley/test-suite/cddl-files&#34;&gt;cddl&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/cardano-ledger/master/eras/shelley-ma&#34;&gt;Timelocks and Multi-Assets&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/cardano-ledger/master/eras/shelley-ma/formal-spec&#34;&gt;formal-spec&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/cardano-ledger/master/eras/shelley-ma/impl&#34;&gt;implementation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/cardano-ledger/master/eras/shelley-ma/test-suite&#34;&gt;tests&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/cardano-ledger/master/eras/alonzo&#34;&gt;Smart Contracts&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/cardano-ledger/master/eras/alonzo/formal-spec&#34;&gt;formal-spec&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/cardano-ledger/master/eras/alonzo/impl&#34;&gt;implementation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/cardano-ledger/master/eras/alonzo/test-suite&#34;&gt;tests&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/cardano-ledger/master/libs&#34;&gt;Libraries&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Building&lt;/h1&gt; &#xA;&lt;p&gt;It is recommended to use &lt;a href=&#34;https://nixos.org/nix/download.html&#34;&gt;&lt;code&gt;nix&lt;/code&gt;&lt;/a&gt; for building everything in this repository. Haskell files can be built with &lt;a href=&#34;https://www.haskell.org/cabal/&#34;&gt;&lt;code&gt;cabal&lt;/code&gt;&lt;/a&gt; inside of a nix shell.&lt;/p&gt; &#xA;&lt;h2&gt;Nix Cache&lt;/h2&gt; &#xA;&lt;p&gt;When using &lt;code&gt;nix&lt;/code&gt; it is recommended that you setup the cache, so that it can reuse built artifacts, reducing the compilation times dramatically:&lt;/p&gt; &#xA;&lt;p&gt;If you are using &lt;a href=&#34;https://nixos.org/&#34;&gt;NixOS&lt;/a&gt; add the snippet below to your &lt;code&gt;/etc/nixos/configuration.nix&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;nix.settings = {&#xA;  experimental-features = [ &#34;nix-command&#34; &#34;flakes&#34; ];&#xA;  substituters = [&#xA;    &#34;https://cache.nixos.org&#34;&#xA;    &#34;https://cache.iog.io&#34;&#xA;  ];&#xA;  trusted-public-keys = [&#xA;    &#34;hydra.iohk.io:f/Ea+s+dFdN+3Y/G+FDgSq+a5NEWhJGzdjvKNGv0/EQ=&#34;&#xA;  ];&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you are using the &lt;code&gt;nix&lt;/code&gt; package manager next to another operating system put the following in &lt;code&gt;/etc/nix/nix.conf&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;experimental-features = nix-command flakes&#xA;substituters        = https://cache.iog.io https://cache.nixos.org/&#xA;trusted-public-keys = hydra.iohk.io:f/Ea+s+dFdN+3Y/G+FDgSq+a5NEWhJGzdjvKNGv0/EQ= cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY=&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Building the LaTeX documents and executable specifications&lt;/h2&gt; &#xA;&lt;p&gt;When using &lt;code&gt;nix&lt;/code&gt; the documents and Haskell code can be readily built by running:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;nix build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The LaTeX documents will be places inside directories named &lt;code&gt;result*&lt;/code&gt;, e.g.:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;result-2/ledger-spec.pdf&#xA;result-3/delegation_design_spec.pdf&#xA;result-4/non-integer-calculations.pdf&#xA;result-5/small-step-semantics.pdf&#xA;result-6/ledger-spec.pdf&#xA;result/blockchain-spec.pdf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Building individual LaTeX documents&lt;/h2&gt; &#xA;&lt;p&gt;Change to the latex directory where the latex document is (e.g. &lt;code&gt;eras/shelley/formal-spec&lt;/code&gt; for the ledger specification corresponding to the Shelley release, or &lt;code&gt;eras/byron/ledger/formal-spec&lt;/code&gt; for the ledger specification corresponding to the Byron release). Then, build the latex document by running:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;nix-shell --pure --run make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For a continuous compilation of the &lt;code&gt;LaTeX&lt;/code&gt; file run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;nix-shell --pure --run &#34;make watch&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Updating dependencies&lt;/h2&gt; &#xA;&lt;p&gt;When updating the &lt;a href=&#34;https://github.com/input-output-hk/cardano-ledger/raw/master/cabal.project&#34;&gt;pinned hackage index-state&lt;/a&gt; (for example, in order to get a new version of a package), it&#39;s necessary to make sure that &lt;a href=&#34;https://github.com/input-output-hk/cardano-ledger/raw/master/nix/sources.json&#34;&gt;&lt;code&gt;hackage.nix&lt;/code&gt; pin&lt;/a&gt; points to a later date than the index-state, in order to avoid an error like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;error: Unknown index-state 2021-08-08T00:00:00Z, the latest index-state I know about is 2021-08-06T00:00:00Z. You may need to update to a newer hackage.nix.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can update the &lt;code&gt;sources.json&lt;/code&gt; file using niv:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;niv update hackage&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Submitting an issue&lt;/h1&gt; &#xA;&lt;p&gt;Issues can be filed in the &lt;a href=&#34;https://github.com/input-output-hk/cardano-ledger/issues&#34;&gt;GitHub Issue tracker&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;However, note that this is pre-release software, so we will not usually be providing support.&lt;/p&gt; &#xA;&lt;h1&gt;Contributing&lt;/h1&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/input-output-hk/cardano-ledger/raw/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>xmonad/xmonad</title>
    <updated>2022-08-21T01:57:51Z</updated>
    <id>tag:github.com,2022-08-21:/xmonad/xmonad</id>
    <link href="https://github.com/xmonad/xmonad" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The core of xmonad, a small but functional ICCCM-compliant tiling window manager&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://xmonad.org/&#34;&gt;&lt;img alt=&#34;XMonad logo&#34; src=&#34;https://xmonad.org/images/logo-wrapped.svg?sanitize=true&#34; height=&#34;150&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://hackage.haskell.org/package/xmonad&#34;&gt;&lt;img alt=&#34;Hackage&#34; src=&#34;https://img.shields.io/hackage/v/xmonad?logo=haskell&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/xmonad/xmonad/raw/readme/LICENSE&#34;&gt;&lt;img alt=&#34;License&#34; src=&#34;https://img.shields.io/github/license/xmonad/xmonad&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://haskell.org/&#34;&gt;&lt;img alt=&#34;Made in Haskell&#34; src=&#34;https://img.shields.io/badge/Made%20in-Haskell-%235e5086?logo=haskell&#34;&gt;&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://github.com/xmonad/xmonad/actions/workflows/stack.yml&#34;&gt;&lt;img alt=&#34;Stack&#34; src=&#34;https://img.shields.io/github/workflow/status/xmonad/xmonad/Stack?label=Stack&amp;amp;logo=githubactions&amp;amp;logoColor=white&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/xmonad/xmonad/actions/workflows/haskell-ci.yml&#34;&gt;&lt;img alt=&#34;Cabal&#34; src=&#34;https://img.shields.io/github/workflow/status/xmonad/xmonad/Haskell-CI?label=Cabal&amp;amp;logo=githubactions&amp;amp;logoColor=white&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/xmonad/xmonad/actions/workflows/nix.yml&#34;&gt;&lt;img alt=&#34;Nix&#34; src=&#34;https://img.shields.io/github/workflow/status/xmonad/xmonad/Nix?label=Nix&amp;amp;logo=githubactions&amp;amp;logoColor=white&#34;&gt;&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://github.com/sponsors/xmonad&#34;&gt;&lt;img alt=&#34;GitHub Sponsors&#34; src=&#34;https://img.shields.io/github/sponsors/xmonad?label=GitHub%20Sponsors&amp;amp;logo=githubsponsors&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/xmonad&#34;&gt;&lt;img alt=&#34;Open Collective&#34; src=&#34;https://img.shields.io/opencollective/all/xmonad?label=Open%20Collective&amp;amp;logo=opencollective&#34;&gt;&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://web.libera.chat/#xmonad&#34;&gt;&lt;img alt=&#34;Chat on #xmonad@irc.libera.chat&#34; src=&#34;https://img.shields.io/badge/%23%20chat-on%20libera-brightgreen&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://matrix.to/#/#xmonad:matrix.org&#34;&gt;&lt;img alt=&#34;Chat on #xmonad:matrix.org&#34; src=&#34;https://img.shields.io/matrix/xmonad:matrix.org?logo=matrix&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;h1&gt;xmonad&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;A tiling window manager for X11.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://xmonad.org/&#34;&gt;XMonad&lt;/a&gt; is a tiling window manager for X11. Windows are arranged automatically to tile the screen without gaps or overlap, maximising screen use. Window manager features are accessible from the keyboard: a mouse is optional. xmonad is written, configured and extensible in Haskell. Custom layout algorithms, key bindings and other extensions may be written by the user in config files. Layouts are applied dynamically, and different layouts may be used on each workspace. Xinerama is fully supported, allowing windows to be tiled on several physical screens.&lt;/p&gt; &#xA;&lt;p&gt;This repository contains the &lt;a href=&#34;https://hackage.haskell.org/package/xmonad&#34;&gt;xmonad&lt;/a&gt; package, a minimal, stable, yet extensible core. It is accompanied by &lt;a href=&#34;https://github.com/xmonad/xmonad-contrib&#34;&gt;xmonad-contrib&lt;/a&gt;, a library of hundreds of additional community-maintained tiling algorithms and extension modules. The two combined make for a powerful X11 window-manager with endless customization possibilities. They are, quite literally, libraries for creating your own window manager.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;For installation and configuration instructions, please see:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xmonad.org/download.html&#34;&gt;downloading and installing xmonad&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xmonad.org/INSTALL.html&#34;&gt;installing latest xmonad snapshot from git&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xmonad.org/TUTORIAL.html&#34;&gt;configuring xmonad&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you run into any trouble, consult our &lt;a href=&#34;https://xmonad.org/documentation.html&#34;&gt;documentation&lt;/a&gt; or ask the &lt;a href=&#34;https://xmonad.org/community.html&#34;&gt;community&lt;/a&gt; for help.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;We welcome all forms of contributions:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/xmonad/xmonad/issues&#34;&gt;bug reports and feature ideas&lt;/a&gt; (also to &lt;a href=&#34;https://github.com/xmonad/xmonad-contrib/issues&#34;&gt;xmonad-contrib&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/xmonad/xmonad/pulls&#34;&gt;bug fixes, new features, new extensions&lt;/a&gt; (usually to &lt;a href=&#34;https://github.com/xmonad/xmonad-contrib/pulls&#34;&gt;xmonad-contrib&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;documentation fixes and improvements: &lt;a href=&#34;https://github.com/xmonad/xmonad&#34;&gt;xmonad&lt;/a&gt;, &lt;a href=&#34;https://github.com/xmonad/xmonad-contrib&#34;&gt;xmonad-contrib&lt;/a&gt;, &lt;a href=&#34;https://github.com/xmonad/xmonad-web&#34;&gt;xmonad-web&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;helping others in the &lt;a href=&#34;https://xmonad.org/community.html&#34;&gt;community&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;financial support: &lt;a href=&#34;https://github.com/sponsors/xmonad&#34;&gt;GitHub Sponsors&lt;/a&gt;, &lt;a href=&#34;https://opencollective.com/xmonad&#34;&gt;Open Collective&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Please do read the &lt;a href=&#34;https://github.com/xmonad/xmonad/raw/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING&lt;/a&gt; document for more information about bug reporting and code contributions. For a brief overview of the architecture and code conventions, see the &lt;a href=&#34;https://xmonad.github.io/xmonad-docs/xmonad-contrib/XMonad-Doc-Developing.html&#34;&gt;documentation for the &lt;code&gt;XMonad.Doc.Developing&lt;/code&gt; module&lt;/a&gt;. If in doubt, &lt;a href=&#34;https://xmonad.org/community.html&#34;&gt;talk to us&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Authors&lt;/h2&gt; &#xA;&lt;p&gt;Started in 2007 by &lt;a href=&#34;https://github.com/spencerjanssen&#34;&gt;Spencer Janssen&lt;/a&gt;, &lt;a href=&#34;https://github.com/donsbot&#34;&gt;Don Stewart&lt;/a&gt; and &lt;a href=&#34;https://github.com/JasonCreighton&#34;&gt;Jason Creighton&lt;/a&gt;, the &lt;a href=&#34;https://xmonad.org/&#34;&gt;XMonad&lt;/a&gt; project lives on thanks to &lt;a href=&#34;https://github.com/xmonad/xmonad/raw/master/MAINTAINERS.md&#34;&gt;new generations of maintainers&lt;/a&gt; and &lt;a href=&#34;https://github.com/xmonad/xmonad/graphs/contributors&#34;&gt;dozens of contributors&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>