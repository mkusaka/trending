<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Haskell Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-26T02:12:30Z</updated>
  <subtitle>Weekly Trending of Haskell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>kmonad/kmonad</title>
    <updated>2022-06-26T02:12:30Z</updated>
    <id>tag:github.com,2022-06-26:/kmonad/kmonad</id>
    <link href="https://github.com/kmonad/kmonad" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An advanced keyboard manager&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt; &lt;img alt=&#34;KMonad&#34; title=&#34;KMonad&#34; height=&#34;32&#34; src=&#34;https://raw.githubusercontent.com/kmonad/kmonad/master/kmonad.svg?sanitize=true&#34;&gt; &lt;/h1&gt; &#xA;&lt;h4 align=&#34;center&#34;&gt;The Onion of Keyboard Management Tools, available on GNU/Linux, Windows, and MacOS!&lt;/h4&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://raw.githubusercontent.com/kmonad/kmonad/master/#features&#34;&gt;Features&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/kmonad/kmonad/master/#installation&#34;&gt;Installation&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/kmonad/kmonad/master/#configuration&#34;&gt;Configuration&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/kmonad/kmonad/master/#troubleshooting&#34;&gt;Troubleshooting&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/kmonad/kmonad/master/#disclaimer&#34;&gt;Disclaimer&lt;/a&gt; • &lt;/p&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;KMonad is an advanced tool that lets you infinitely customize and extend the functionalities of almost any keyboard. For a detailed list of features, see &lt;a href=&#34;https://raw.githubusercontent.com/kmonad/kmonad/master/#features&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you want to get started with the latest, stable binary release, please check out the master branch, if you are interested in the latest additions and tweaks, switch on over to develop and compile your own binary.&lt;/p&gt; &#xA;&lt;p&gt;Additionally, if you need any help or just want to say hi, you can join our &lt;a href=&#34;https://discord.gg/3tFfWmnahN&#34;&gt;Discord server&lt;/a&gt; or jump into our &lt;a href=&#34;https://web.libera.chat/#kmonad&#34;&gt;IRC channel&lt;/a&gt; (&lt;code&gt;#kmonad@irc.libera.chat&lt;/code&gt;), which is also bridged with matrix (&lt;code&gt;#kmonad:libera.chat&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;p&gt;KMonad offers advanced customization features such as &lt;strong&gt;layers&lt;/strong&gt;, &lt;strong&gt;multi-tap&lt;/strong&gt;, &lt;strong&gt;tap-hold&lt;/strong&gt;, and much more. These features are usually available at the hardware level on the QMK-firmware enabled keyboards. However, KMonad allows you to enjoy such features in virtually any keyboard by low-level system manipulations.&lt;/p&gt; &#xA;&lt;p&gt;For a good introduction to KMonad, have a look at &lt;a href=&#34;https://www.youtube.com/watch?v=Dhj1eauljwU&#34;&gt;this Youtube video&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Key Customizations&lt;/h4&gt; &#xA;&lt;p&gt;KMonad lets you map any keyboard button to any keymap. Want to swap the useless &lt;strong&gt;Caps Lock&lt;/strong&gt; key with the &lt;strong&gt;Escape&lt;/strong&gt; key? Want to have your modifiers such as &lt;strong&gt;Shift&lt;/strong&gt; and &lt;strong&gt;Control&lt;/strong&gt; on your home row, without breaking your normal typing flow? Want a modifier that is combination of &lt;strong&gt;Alt + Ctrl + Super + Shift&lt;/strong&gt;? You can do all of those and much more!&lt;/p&gt; &#xA;&lt;h4&gt;Layers&lt;/h4&gt; &#xA;&lt;p&gt;A layer is a set of keymaps assigned to your keyboard&#39;s buttons. You can have as many layers on top of your base layer as you want. For instance, you can have your regular QWERTY layout, a Colemak/ Dvorak layout, a numbers and symbols layer, a function keys layer, a layer for mouse navigation and system controls --- all in a 60% keyboard. When a particular layer is active, any keypress is interpreted according to the layout defined in that layer. With proper configurations, you can jump to a specific layer or switch to one for the next keypress, or do various other complex manipulations.&lt;/p&gt; &#xA;&lt;h4&gt;Multi-Use and Multi-Tap Buttons&lt;/h4&gt; &#xA;&lt;p&gt;One of the distinguishing features of KMonad is the vast capabilities with Multi-Use Buttons. You can have a single button do different things based on whether it is pressed quickly in succession, or pressed once, or held. For example, you can configure the &lt;strong&gt;Caps Lock&lt;/strong&gt; key to act as an &lt;strong&gt;Escape&lt;/strong&gt; button when pressed once and released, a &lt;strong&gt;Ctrl&lt;/strong&gt; modifier when held-down, and a button to jump to a layer when pressed twice quickly in succession. You can make the left and right &lt;strong&gt;Shift&lt;/strong&gt; keys to act like left and right parentheses (like the Space Cadet Shift keys) when tapped once, and regular &lt;strong&gt;Shift&lt;/strong&gt; keys when held down. The possibilities are infinite!&lt;/p&gt; &#xA;&lt;h4&gt;Command Buttons&lt;/h4&gt; &#xA;&lt;p&gt;With Command Buttons you can trigger shell commands with a tap of any button.&lt;/p&gt; &#xA;&lt;h4&gt;And More!&lt;/h4&gt; &#xA;&lt;p&gt;There are many more exciting features of KMonad that you can find in the &lt;a href=&#34;https://raw.githubusercontent.com/kmonad/kmonad/master/keymap/tutorial.kbd&#34;&gt;configuration tutorial&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;For more information on how to install KMonad, please refer to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kmonad/kmonad/master/doc/installation.md&#34;&gt;installation&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;For information on how to configure KMonad, please refer you to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kmonad/kmonad/master/keymap/tutorial.kbd&#34;&gt;the configuration tutorial&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kmonad/kmonad-contrib&#34;&gt;user configurations&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Want to add your own keyboard configuration to &lt;a href=&#34;https://github.com/kmonad/kmonad-contrib&#34;&gt;kmonad-contrib&lt;/a&gt;? Just fork the repository, create a new subdirectory using your GitHub username and submit a pull request!&lt;/p&gt; &#xA;&lt;h3&gt;Editor Support for the Configuration Language&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kmonad/kbd-mode&#34;&gt;Emacs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kmonad/kmonad-vim&#34;&gt;Vim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/canadaduane/vscode-kmonad&#34;&gt;VSCode&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Startup&lt;/h3&gt; &#xA;&lt;p&gt;There are startup scripts available for different init systems in &lt;a href=&#34;https://raw.githubusercontent.com/kmonad/kmonad/master/startup/&#34;&gt;startup&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Troubleshooting&lt;/h2&gt; &#xA;&lt;p&gt;For several commonly asked questions regarding various configuration issues, please see:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kmonad/kmonad/master/doc/faq.md&#34;&gt;the FAQ&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Disclaimer&lt;/h2&gt; &#xA;&lt;p&gt;The original maintainer is chronically ill and currently unable to work on KMonad. Luckily we have a very helpful and pleasant community that is happy to be of assistance. When energy and circumstance permits, the core developer will labour to make progress, but for now this will be sporadically and unpredictably.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>hadolint/hadolint</title>
    <updated>2022-06-26T02:12:30Z</updated>
    <id>tag:github.com,2022-06-26:/hadolint/hadolint</id>
    <link href="https://github.com/hadolint/hadolint" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Dockerfile linter, validate inline bash, written in Haskell&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Haskell Dockerfile Linter&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/hadolint/hadolint/actions&#34;&gt;&lt;img src=&#34;https://github.com/hadolint/hadolint/workflows/Haskell%20Tests/badge.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://tldrlegal.com/l/gpl-3.0&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-GPL--3-blue.svg?sanitize=true&#34; alt=&#34;GPL-3 licensed&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/hadolint/hadolint/releases/latest&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/hadolint/hadolint.svg?sanitize=true&#34; alt=&#34;GitHub release&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/downloads/hadolint/hadolint/total.svg?sanitize=true&#34; alt=&#34;Github downloads&#34;&gt; &lt;img align=&#34;right&#34; alt=&#34;pipecat&#34; width=&#34;150&#34; src=&#34;https://hadolint.github.io/hadolint/img/cat_container.png&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;A smarter Dockerfile linter that helps you build &lt;a href=&#34;https://docs.docker.com/engine/userguide/eng-image/dockerfile_best-practices&#34;&gt;best practice&lt;/a&gt; Docker images. The linter parses the Dockerfile into an AST and performs rules on top of the AST. It stands on the shoulders of &lt;a href=&#34;https://github.com/koalaman/shellcheck&#34;&gt;ShellCheck&lt;/a&gt; to lint the Bash code inside &lt;code&gt;RUN&lt;/code&gt; instructions.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://hadolint.github.io/hadolint&#34;&gt;&lt;span&gt;🌐&lt;/span&gt; &lt;strong&gt;Check the online version on hadolint.github.io/hadolint&lt;/strong&gt;&lt;/a&gt; &lt;a href=&#34;https://hadolint.github.io/hadolint&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hadolint/hadolint/master/screenshot.png&#34; alt=&#34;Screenshot&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;How to use&lt;/h2&gt; &#xA;&lt;p&gt;You can run &lt;code&gt;hadolint&lt;/code&gt; locally to lint your Dockerfile.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;hadolint &amp;lt;Dockerfile&amp;gt;&#xA;hadolint --ignore DL3003 --ignore DL3006 &amp;lt;Dockerfile&amp;gt; # exclude specific rules&#xA;hadolint --trusted-registry my-company.com:500 &amp;lt;Dockerfile&amp;gt; # Warn when using untrusted FROM images&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Docker comes to the rescue, providing an easy way how to run &lt;code&gt;hadolint&lt;/code&gt; on most platforms. Just pipe your &lt;code&gt;Dockerfile&lt;/code&gt; to &lt;code&gt;docker run&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run --rm -i hadolint/hadolint &amp;lt; Dockerfile&#xA;# OR&#xA;docker run --rm -i ghcr.io/hadolint/hadolint &amp;lt; Dockerfile&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or using &lt;a href=&#34;https://podman.io/&#34;&gt;Podman&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;podman run --rm -i docker.io/hadolint/hadolint &amp;lt; Dockerfile&#xA;# OR&#xA;podman run --rm -i ghcr.io/hadolint/hadolint &amp;lt; Dockerfile&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or using Windows PowerShell:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;cat .\Dockerfile | docker run --rm -i hadolint/hadolint&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;p&gt;You can download prebuilt binaries for OSX, Windows and Linux from the latest &lt;a href=&#34;https://github.com/hadolint/hadolint/releases/latest&#34;&gt;release page&lt;/a&gt;. However, if this does not work for you, please fall back to container (Docker), &lt;code&gt;brew&lt;/code&gt; or source installation.&lt;/p&gt; &#xA;&lt;p&gt;On OSX, you can use &lt;a href=&#34;https://brew.sh/&#34;&gt;brew&lt;/a&gt; to install &lt;code&gt;hadolint&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew install hadolint&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On Windows, you can use &lt;a href=&#34;https://github.com/lukesampson/scoop&#34;&gt;scoop&lt;/a&gt; to install &lt;code&gt;hadolint&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-batch&#34;&gt;scoop install hadolint&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On distributions that have &lt;code&gt;nix&lt;/code&gt; installed, you can use the &lt;code&gt;hadolint&lt;/code&gt; package to run ad-hoc shells or permanently install &lt;code&gt;hadolint&lt;/code&gt; into your environment.&lt;/p&gt; &#xA;&lt;p&gt;As mentioned earlier, &lt;code&gt;hadolint&lt;/code&gt; is available as a container image:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker pull hadolint/hadolint&#xA;# OR&#xA;docker pull ghcr.io/hadolint/hadolint&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you need a container with shell access, use the Debian or Alpine variants:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker pull hadolint/hadolint:latest-debian&#xA;# OR&#xA;docker pull hadolint/hadolint:latest-alpine&#xA;# OR&#xA;docker pull ghcr.io/hadolint/hadolint:latest-debian&#xA;# OR&#xA;docker pull ghcr.io/hadolint/hadolint:latest-alpine&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also build &lt;code&gt;hadolint&lt;/code&gt; locally. You need &lt;a href=&#34;https://www.haskell.org/platform/&#34;&gt;Haskell&lt;/a&gt; and the &lt;a href=&#34;http://docs.haskellstack.org/en/stable/install_and_upgrade.html&#34;&gt;stack&lt;/a&gt; build tool to build the binary.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/hadolint/hadolint \&#xA;&amp;amp;&amp;amp; cd hadolint \&#xA;&amp;amp;&amp;amp; stack install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want the &lt;a href=&#34;https://github.com/michaellzc/vscode-hadolint&#34;&gt;VS Code Hadolint&lt;/a&gt; extension to use Hadolint in a container, you can use the following &lt;a href=&#34;https://github.com/hadolint/hadolint/issues/691#issuecomment-932116329&#34;&gt;wrapper script&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/bash&#xA;dockerfile=&#34;$1&#34;&#xA;shift&#xA;docker run --rm -i hadolint/hadolint hadolint &#34;$@&#34; - &amp;lt; &#34;$dockerfile&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;CLI&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;hadolint --help&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;hadolint - Dockerfile Linter written in Haskell&#xA;&#xA;Usage: hadolint [-v|--version] [-c|--config FILENAME] [DOCKERFILE...]&#xA;                [--file-path-in-report FILEPATHINREPORT] [--no-fail]&#xA;                [--no-color] [-V|--verbose] [-f|--format ARG] [--error RULECODE]&#xA;                [--warning RULECODE] [--info RULECODE] [--style RULECODE]&#xA;                [--ignore RULECODE]&#xA;                [--trusted-registry REGISTRY (e.g. docker.io)]&#xA;                [--require-label LABELSCHEMA (e.g. maintainer:text)]&#xA;                [--strict-labels] [--disable-ignore-pragma]&#xA;                [-t|--failure-threshold THRESHOLD]&#xA;  Lint Dockerfile for errors and best practices&#xA;&#xA;Available options:&#xA;  -h,--help                Show this help text&#xA;  -v,--version             Show version&#xA;  -c,--config FILENAME     Path to the configuration file&#xA;  --file-path-in-report FILEPATHINREPORT&#xA;                           The file path referenced in the generated report.&#xA;                           This only applies for the &#39;checkstyle&#39; format and is&#xA;                           useful when running Hadolint with Docker to set the&#xA;                           correct file path.&#xA;  --no-fail                Don&#39;t exit with a failure status code when any rule&#xA;                           is violated&#xA;  --no-color               Don&#39;t colorize output&#xA;  -V,--verbose             Enables verbose logging of hadolint&#39;s output to&#xA;                           stderr&#xA;  -f,--format ARG          The output format for the results [tty | json |&#xA;                           checkstyle | codeclimate | gitlab_codeclimate | gnu |&#xA;                           codacy | sonarqube | sarif] (default: tty)&#xA;  --error RULECODE         Make the rule `RULECODE` have the level `error`&#xA;  --warning RULECODE       Make the rule `RULECODE` have the level `warning`&#xA;  --info RULECODE          Make the rule `RULECODE` have the level `info`&#xA;  --style RULECODE         Make the rule `RULECODE` have the level `style`&#xA;  --ignore RULECODE        A rule to ignore. If present, the ignore list in the&#xA;                           config file is ignored&#xA;  --trusted-registry REGISTRY (e.g. docker.io)&#xA;                           A docker registry to allow to appear in FROM&#xA;                           instructions&#xA;  --require-label LABELSCHEMA (e.g. maintainer:text)&#xA;                           The option --require-label=label:format makes&#xA;                           Hadolint check that the label `label` conforms to&#xA;                           format requirement `format`&#xA;  --strict-labels          Do not permit labels other than specified in&#xA;                           `label-schema`&#xA;  --disable-ignore-pragma  Disable inline ignore pragmas `# hadolint&#xA;                           ignore=DLxxxx`&#xA;  -t,--failure-threshold THRESHOLD&#xA;                           Exit with failure code only when rules with a&#xA;                           severity equal to or above THRESHOLD are violated.&#xA;                           Accepted values: [error | warning | info | style |&#xA;                           ignore | none] (default: info)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Configure&lt;/h2&gt; &#xA;&lt;p&gt;Configuration files can be used globally or per project. Hadolint looks for configuration files in the following locations or their platform specific equivalents in this order and uses the first one exclusively:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;$PWD/.hadolint.yaml&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$XDG_CONFIG_HOME/hadolint.yaml&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$HOME/.config/hadolint.yaml&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$HOME/.hadolint/hadolint.yaml or $HOME/hadolint/config.yaml&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$HOME/.hadolint.yaml&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In windows, the &lt;code&gt;%LOCALAPPDATA%&lt;/code&gt; environment variable is used instead of &lt;code&gt;XDG_CONFIG_HOME&lt;/code&gt;. Config files can have either &lt;code&gt;yaml&lt;/code&gt; or &lt;code&gt;yml&lt;/code&gt; extensions.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;hadolint&lt;/code&gt; full &lt;code&gt;yaml&lt;/code&gt; config file schema&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;failure-threshold: string               # name of threshold level (error | warning | info | style | ignore | none)&#xA;format: string                          # Output format (tty | json | checkstyle | codeclimate | gitlab_codeclimate | gnu | codacy)&#xA;ignored: [string]                       # list of rules&#xA;label-schema:                           # See Linting Labels below for specific label-schema details&#xA;  author: string                        # Your name&#xA;  contact: string                       # email address&#xA;  created: timestamp                    # rfc3339 datetime&#xA;  version: string                       # semver&#xA;  documentation: string                 # url&#xA;  git-revision: string                  # hash&#xA;  license: string                       # spdx&#xA;no-color: boolean                       # true | false&#xA;no-fail: boolean                        # true | false&#xA;override:&#xA;  error: [string]                       # list of rules&#xA;  warning: [string]                     # list of rules&#xA;  info: [string]                        # list of rules&#xA;  style: [string]                       # list of rules&#xA;strict-labels: boolean                  # true | false&#xA;disable-ignore-pragma: boolean          # true | false&#xA;trustedRegistries: string | [string]    # registry or list of registries&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;hadolint&lt;/code&gt; supports specifying the ignored rules using a configuration file. The configuration file should be in &lt;code&gt;yaml&lt;/code&gt; format. This is one valid configuration file as an example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;ignored:&#xA;  - DL3000&#xA;  - SC1010&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Additionally, &lt;code&gt;hadolint&lt;/code&gt; can warn you when images from untrusted repositories are being used in Dockerfiles, you can append the &lt;code&gt;trustedRegistries&lt;/code&gt; keys to the configuration file, as shown below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;ignored:&#xA;  - DL3000&#xA;  - SC1010&#xA;&#xA;trustedRegistries:&#xA;  - docker.io&#xA;  - my-company.com:5000&#xA;  - &#34;*.gcr.io&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to override the severity of specific rules, you can do that too:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;override:&#xA;  error:&#xA;    - DL3001&#xA;    - DL3002&#xA;  warning:&#xA;    - DL3042&#xA;    - DL3033&#xA;  info:&#xA;    - DL3032&#xA;  style:&#xA;    - DL3015&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;failure-threshold&lt;/code&gt; Exit with failure code only when rules with a severity above THRESHOLD are violated (Available in v2.6.0+)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;failure-threshold: info&#xA;warning:&#xA;    - DL3042&#xA;    - DL3033&#xA;  info:&#xA;    - DL3032&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Additionally, you can pass a custom configuration file in the command line with the &lt;code&gt;--config&lt;/code&gt; option&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;hadolint --config /path/to/config.yaml Dockerfile&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To pass a custom configuration file (using relative or absolute path) to a container, use the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run --rm -i -v /your/path/to/hadolint.yaml:/.config/hadolint.yaml hadolint/hadolint &amp;lt; Dockerfile&#xA;# OR&#xA;docker run --rm -i -v /your/path/to/hadolint.yaml:/.config/hadolint.yaml ghcr.io/hadolint/hadolint &amp;lt; Dockerfile&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In addition to config files, Hadolint can be configured with environment variables.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;NO_COLOR=1                               # Set or unset. See https://no-color.org&#xA;HADOLINT_NOFAIL=1                        # Truthy value e.g. 1, true or yes&#xA;HADOLINT_VERBOSE=1                       # Truthy value e.g. 1, true or yes&#xA;HADOLINT_FORMAT=json                     # Output format (tty | json | checkstyle | codeclimate | gitlab_codeclimate | gnu | codacy | sarif )&#xA;HADOLINT_FAILURE_THRESHOLD=info          # threshold level (error | warning | info | style | ignore | none)&#xA;HADOLINT_OVERRIDE_ERROR=DL3010,DL3020    # comma separated list of rule codes&#xA;HADOLINT_OVERRIDE_WARNING=DL3010,DL3020  # comma separated list of rule codes&#xA;HADOLINT_OVERRIDE_INFO=DL3010,DL3020     # comma separated list of rule codes&#xA;HADOLINT_OVERRIDE_STYLE=DL3010,DL3020    # comma separated list of rule codes&#xA;HADOLINT_IGNORE=DL3010,DL3020            # comma separated list of rule codes&#xA;HADOLINT_STRICT_LABELS=1                 # Truthy value e.g. 1, true or yes&#xA;HADOLINT_DISABLE_IGNORE_PRAGMA=1         # Truthy value e.g. 1, true or yes&#xA;HADOLINT_TRUSTED_REGISTRIES=docker.io    # comma separated list of registry urls&#xA;HADOLINT_REQUIRE_LABELS=maintainer:text  # comma separated list of label schema items&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Non-Posix Shells&lt;/h2&gt; &#xA;&lt;p&gt;When using base images with non-posix shells as default (e.g. Windows based images) a special pragma &lt;code&gt;hadolint shell&lt;/code&gt; can specify which shell the base image uses, so that Hadolint can automatically ignore all shell-specific rules.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Dockerfile&#34;&gt;FROM mcr.microsoft.com/windows/servercore:ltsc2022&#xA;# hadolint shell=powershell&#xA;RUN Get-Process notepad | Stop-Process&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Inline ignores&lt;/h2&gt; &#xA;&lt;p&gt;It is also possible to ignore rules by adding a special comment directly above the Dockerfile statement for which you want to make an exception for. Such comments look like &lt;code&gt;# hadolint ignore=DL3001,SC1081&lt;/code&gt;. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dockerfile&#34;&gt;# hadolint ignore=DL3006&#xA;FROM ubuntu&#xA;&#xA;# hadolint ignore=DL3003,SC1035&#xA;RUN cd /tmp &amp;amp;&amp;amp; echo &#34;hello!&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The comment &#34;inline ignores&#34; applies only to the statement following it.&lt;/p&gt; &#xA;&lt;h2&gt;Linting Labels&lt;/h2&gt; &#xA;&lt;p&gt;Hadolint is able to check if specific labels are present and conform to a predefined label schema. First, a label schema must be defined either via the command line:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;hadolint --require-label author:text --require-label version:semver Dockerfile&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or via the config file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;label-schema:&#xA;  author: text&#xA;  contact: email&#xA;  created: rfc3339&#xA;  version: semver&#xA;  documentation: url&#xA;  git-revision: hash&#xA;  license: spdx&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The value of a label can be either of &lt;code&gt;text&lt;/code&gt;, &lt;code&gt;url&lt;/code&gt;, &lt;code&gt;semver&lt;/code&gt;, &lt;code&gt;hash&lt;/code&gt; or &lt;code&gt;rfc3339&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Schema&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;text&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Anything&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;rfc3339&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;A time, formatted according to &lt;a href=&#34;https://www.ietf.org/rfc/rfc3339.txt&#34;&gt;RFC 3339&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;semver&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;A &lt;a href=&#34;https://semver.org/&#34;&gt;semantic version&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;url&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;A URI as described in &lt;a href=&#34;https://www.ietf.org/rfc/rfc3986.txt&#34;&gt;RFC 3986&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;hash&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Either a short or a long &lt;a href=&#34;https://git-scm.com/book/en/v2/Git-Tools-Revision-Selection&#34;&gt;Git hash&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;spdx&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;An &lt;a href=&#34;https://spdx.org/licenses/&#34;&gt;SPDX license identifier&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;email&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;An email address conforming to &lt;a href=&#34;https://www.ietf.org/rfc/rfc5322.txt&#34;&gt;RFC 5322&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;By default, Hadolint ignores any label that is not specified in the label schema. To warn against such additional labels, turn on strict labels, using the command line:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;hadolint --strict-labels --require-label version:semver Dockerfile&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or the config file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;strict-labels: true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When strict labels is enabled, but no label schema is specified, &lt;code&gt;hadolint&lt;/code&gt; will warn if any label is present.&lt;/p&gt; &#xA;&lt;h3&gt;Note on dealing with variables in labels&lt;/h3&gt; &#xA;&lt;p&gt;It is a common pattern to fill the value of a label not statically, but rather dynamically at build time by using a variable:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dockerfile&#34;&gt;FROM debian:buster&#xA;ARG VERSION=&#34;du-jour&#34;&#xA;LABEL version=&#34;${VERSION}&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To allow this, the label schema must specify &lt;code&gt;text&lt;/code&gt; as value for that label:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;label-schema:&#xA;  version: text&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Integrations&lt;/h2&gt; &#xA;&lt;p&gt;To get most of &lt;code&gt;hadolint&lt;/code&gt;, it is useful to integrate it as a check in your CI or into your editor, or as a pre-commit hook, to lint your &lt;code&gt;Dockerfile&lt;/code&gt; as you write it. See our &lt;a href=&#34;https://raw.githubusercontent.com/hadolint/hadolint/master/docs/INTEGRATION.md&#34;&gt;Integration&lt;/a&gt; docs.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hadolint/hadolint/master/docs/INTEGRATION.md#code-review&#34;&gt;Code Review Platform Integrations&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hadolint/hadolint/master/docs/INTEGRATION.md#continuous-integration&#34;&gt;Continuous Integrations&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hadolint/hadolint/master/docs/INTEGRATION.md#editors&#34;&gt;Editor Integrations&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hadolint/hadolint/master/docs/INTEGRATION.md#version-control&#34;&gt;Version Control Integrations&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Rules&lt;/h2&gt; &#xA;&lt;p&gt;An incomplete list of implemented rules. Click on the error code to get more detailed information.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Rules with the prefix &lt;code&gt;DL&lt;/code&gt; are from &lt;code&gt;hadolint&lt;/code&gt;. Have a look at &lt;code&gt;Rules.hs&lt;/code&gt; to find the implementation of the rules.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Rules with the &lt;code&gt;SC&lt;/code&gt; prefix are from &lt;strong&gt;ShellCheck&lt;/strong&gt; (only the most common rules are listed, there are dozens more).&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Please &lt;a href=&#34;https://github.com/hadolint/hadolint/issues/new&#34;&gt;create an issue&lt;/a&gt; if you have an idea for a good rule.&lt;/p&gt; &#xA;&lt;!--lint disable maximum-line-length--&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Rule&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Default Severity&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL1001&#34;&gt;DL1001&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Ignore&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Please refrain from using inline ignore pragmas &lt;code&gt;# hadolint ignore=DLxxxx&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3000&#34;&gt;DL3000&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Error&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Use absolute WORKDIR.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3001&#34;&gt;DL3001&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Info&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;For some bash commands it makes no sense running them in a Docker container like ssh, vim, shutdown, service, ps, free, top, kill, mount, ifconfig.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3002&#34;&gt;DL3002&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Warning&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Last user should not be root.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3003&#34;&gt;DL3003&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Warning&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Use WORKDIR to switch to a directory.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3004&#34;&gt;DL3004&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Error&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Do not use sudo as it leads to unpredictable behavior. Use a tool like gosu to enforce root.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3005&#34;&gt;DL3005&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Error&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Do not use apt-get dist-upgrade.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3006&#34;&gt;DL3006&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Warning&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Always tag the version of an image explicitly.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3007&#34;&gt;DL3007&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Warning&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Using latest is prone to errors if the image will ever update. Pin the version explicitly to a release tag.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3008&#34;&gt;DL3008&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Warning&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Pin versions in apt-get install.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3009&#34;&gt;DL3009&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Info&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Delete the apt-get lists after installing something.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3010&#34;&gt;DL3010&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Info&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Use ADD for extracting archives into an image.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3011&#34;&gt;DL3011&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Error&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Valid UNIX ports range from 0 to 65535.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3012&#34;&gt;DL3012&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Error&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Multiple &lt;code&gt;HEALTHCHECK&lt;/code&gt; instructions.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3013&#34;&gt;DL3013&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Warning&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Pin versions in pip.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3014&#34;&gt;DL3014&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Warning&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Use the &lt;code&gt;-y&lt;/code&gt; switch.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3015&#34;&gt;DL3015&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Info&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Avoid additional packages by specifying --no-install-recommends.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3016&#34;&gt;DL3016&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Warning&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Pin versions in &lt;code&gt;npm&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3018&#34;&gt;DL3018&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Warning&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Pin versions in apk add. Instead of &lt;code&gt;apk add &amp;lt;package&amp;gt;&lt;/code&gt; use &lt;code&gt;apk add &amp;lt;package&amp;gt;=&amp;lt;version&amp;gt;&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3019&#34;&gt;DL3019&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Info&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Use the &lt;code&gt;--no-cache&lt;/code&gt; switch to avoid the need to use &lt;code&gt;--update&lt;/code&gt; and remove &lt;code&gt;/var/cache/apk/*&lt;/code&gt; when done installing packages.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3020&#34;&gt;DL3020&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Error&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Use &lt;code&gt;COPY&lt;/code&gt; instead of &lt;code&gt;ADD&lt;/code&gt; for files and folders.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3021&#34;&gt;DL3021&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Error&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;COPY&lt;/code&gt; with more than 2 arguments requires the last argument to end with &lt;code&gt;/&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3022&#34;&gt;DL3022&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Warning&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;COPY --from&lt;/code&gt; should reference a previously defined &lt;code&gt;FROM&lt;/code&gt; alias&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3023&#34;&gt;DL3023&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Error&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;COPY --from&lt;/code&gt; cannot reference its own &lt;code&gt;FROM&lt;/code&gt; alias&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3024&#34;&gt;DL3024&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Error&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;FROM&lt;/code&gt; aliases (stage names) must be unique&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3025&#34;&gt;DL3025&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Warning&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Use arguments JSON notation for CMD and ENTRYPOINT arguments&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3026&#34;&gt;DL3026&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Error&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Use only an allowed registry in the FROM image&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3027&#34;&gt;DL3027&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Warning&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Do not use &lt;code&gt;apt&lt;/code&gt; as it is meant to be a end-user tool, use &lt;code&gt;apt-get&lt;/code&gt; or &lt;code&gt;apt-cache&lt;/code&gt; instead&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3028&#34;&gt;DL3028&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Warning&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Pin versions in gem install. Instead of &lt;code&gt;gem install &amp;lt;gem&amp;gt;&lt;/code&gt; use &lt;code&gt;gem install &amp;lt;gem&amp;gt;:&amp;lt;version&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3029&#34;&gt;DL3029&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Warning&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Do not use --platform flag with FROM.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3030&#34;&gt;DL3030&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Warning&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Use the &lt;code&gt;-y&lt;/code&gt; switch to avoid manual input &lt;code&gt;yum install -y &amp;lt;package&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3032&#34;&gt;DL3032&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Warning&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;yum clean all&lt;/code&gt; missing after yum command.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3033&#34;&gt;DL3033&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Warning&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Specify version with &lt;code&gt;yum install -y &amp;lt;package&amp;gt;-&amp;lt;version&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3034&#34;&gt;DL3034&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Warning&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Non-interactive switch missing from &lt;code&gt;zypper&lt;/code&gt; command: &lt;code&gt;zypper install -y&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3035&#34;&gt;DL3035&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Warning&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Do not use &lt;code&gt;zypper dist-upgrade&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3036&#34;&gt;DL3036&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Warning&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;zypper clean&lt;/code&gt; missing after zypper use.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3037&#34;&gt;DL3037&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Warning&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Specify version with &lt;code&gt;zypper install -y &amp;lt;package&amp;gt;[=]&amp;lt;version&amp;gt;&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3038&#34;&gt;DL3038&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Warning&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Use the &lt;code&gt;-y&lt;/code&gt; switch to avoid manual input &lt;code&gt;dnf install -y &amp;lt;package&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3040&#34;&gt;DL3040&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Warning&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;dnf clean all&lt;/code&gt; missing after dnf command.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3041&#34;&gt;DL3041&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Warning&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Specify version with &lt;code&gt;dnf install -y &amp;lt;package&amp;gt;-&amp;lt;version&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3042&#34;&gt;DL3042&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Warning&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Avoid cache directory with &lt;code&gt;pip install --no-cache-dir &amp;lt;package&amp;gt;&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3043&#34;&gt;DL3043&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Error&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;ONBUILD&lt;/code&gt;, &lt;code&gt;FROM&lt;/code&gt; or &lt;code&gt;MAINTAINER&lt;/code&gt; triggered from within &lt;code&gt;ONBUILD&lt;/code&gt; instruction.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3044&#34;&gt;DL3044&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Error&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Do not refer to an environment variable within the same &lt;code&gt;ENV&lt;/code&gt; statement where it is defined.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3045&#34;&gt;DL3045&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Warning&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;COPY&lt;/code&gt; to a relative destination without &lt;code&gt;WORKDIR&lt;/code&gt; set.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3046&#34;&gt;DL3046&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Warning&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;useradd&lt;/code&gt; without flag &lt;code&gt;-l&lt;/code&gt; and high UID will result in excessively large Image.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3047&#34;&gt;DL3047&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Info&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;wget&lt;/code&gt; without flag &lt;code&gt;--progress&lt;/code&gt; will result in excessively bloated build logs when downloading larger files.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3048&#34;&gt;DL3048&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Style&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Invalid Label Key&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3049&#34;&gt;DL3049&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Info&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Label &lt;code&gt;&amp;lt;label&amp;gt;&lt;/code&gt; is missing.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3050&#34;&gt;DL3050&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Info&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Superfluous label(s) present.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3051&#34;&gt;DL3051&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Warning&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Label &lt;code&gt;&amp;lt;label&amp;gt;&lt;/code&gt; is empty.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3052&#34;&gt;DL3052&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Warning&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Label &lt;code&gt;&amp;lt;label&amp;gt;&lt;/code&gt; is not a valid URL.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3053&#34;&gt;DL3053&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Warning&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Label &lt;code&gt;&amp;lt;label&amp;gt;&lt;/code&gt; is not a valid time format - must be conform to RFC3339.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3054&#34;&gt;DL3054&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Warning&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Label &lt;code&gt;&amp;lt;label&amp;gt;&lt;/code&gt; is not a valid SPDX license identifier.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3055&#34;&gt;DL3055&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Warning&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Label &lt;code&gt;&amp;lt;label&amp;gt;&lt;/code&gt; is not a valid git hash.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3056&#34;&gt;DL3056&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Warning&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Label &lt;code&gt;&amp;lt;label&amp;gt;&lt;/code&gt; does not conform to semantic versioning.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3057&#34;&gt;DL3057&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Ignore&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;HEALTHCHECK&lt;/code&gt; instruction missing.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3058&#34;&gt;DL3058&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Warning&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Label &lt;code&gt;&amp;lt;label&amp;gt;&lt;/code&gt; is not a valid email format - must be conform to RFC5322.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3059&#34;&gt;DL3059&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Info&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Multiple consecutive &lt;code&gt;RUN&lt;/code&gt; instructions. Consider consolidation.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3060&#34;&gt;DL3060&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Info&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;yarn cache clean&lt;/code&gt; missing after &lt;code&gt;yarn install&lt;/code&gt; was run.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3061&#34;&gt;DL3061&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Error&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Invalid instruction order. Dockerfile must begin with &lt;code&gt;FROM&lt;/code&gt;, &lt;code&gt;ARG&lt;/code&gt; or comment.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL4000&#34;&gt;DL4000&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Error&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;MAINTAINER is deprecated.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL4001&#34;&gt;DL4001&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Warning&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Either use Wget or Curl but not both.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL4003&#34;&gt;DL4003&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Warning&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Multiple &lt;code&gt;CMD&lt;/code&gt; instructions found.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL4004&#34;&gt;DL4004&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Error&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Multiple &lt;code&gt;ENTRYPOINT&lt;/code&gt; instructions found.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL4005&#34;&gt;DL4005&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Warning&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Use &lt;code&gt;SHELL&lt;/code&gt; to change the default shell.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL4006&#34;&gt;DL4006&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Warning&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Set the &lt;code&gt;SHELL&lt;/code&gt; option -o pipefail before &lt;code&gt;RUN&lt;/code&gt; with a pipe in it&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/wiki/SC1000&#34;&gt;SC1000&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;$&lt;/code&gt; is not used specially and should therefore be escaped.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/wiki/SC1001&#34;&gt;SC1001&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;This &lt;code&gt;\c&lt;/code&gt; will be a regular &lt;code&gt;&#39;c&#39;&lt;/code&gt; in this context.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/wiki/SC1007&#34;&gt;SC1007&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Remove space after &lt;code&gt;=&lt;/code&gt; if trying to assign a value (or for empty string, use &lt;code&gt;var=&#39;&#39; ...&lt;/code&gt;).&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/wiki/SC1010&#34;&gt;SC1010&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Use semicolon or linefeed before &lt;code&gt;done&lt;/code&gt; (or quote to make it literal).&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/wiki/SC1018&#34;&gt;SC1018&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;This is a unicode non-breaking space. Delete it and retype as space.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/wiki/SC1035&#34;&gt;SC1035&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;You need a space here&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/wiki/SC1045&#34;&gt;SC1045&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;It&#39;s not &lt;code&gt;foo &amp;amp;; bar&lt;/code&gt;, just &lt;code&gt;foo &amp;amp; bar&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/wiki/SC1065&#34;&gt;SC1065&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Trying to declare parameters? Don&#39;t. Use &lt;code&gt;()&lt;/code&gt; and refer to params as &lt;code&gt;$1&lt;/code&gt;, &lt;code&gt;$2&lt;/code&gt; etc.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/wiki/SC1066&#34;&gt;SC1066&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Don&#39;t use $ on the left side of assignments.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/wiki/SC1068&#34;&gt;SC1068&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Don&#39;t put spaces around the &lt;code&gt;=&lt;/code&gt; in assignments.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/wiki/SC1077&#34;&gt;SC1077&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;For command expansion, the tick should slant left (` vs ´).&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/wiki/SC1078&#34;&gt;SC1078&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Did you forget to close this double-quoted string?&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/wiki/SC1079&#34;&gt;SC1079&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;This is actually an end quote, but due to next char, it looks suspect.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/wiki/SC1081&#34;&gt;SC1081&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Scripts are case sensitive. Use &lt;code&gt;if&lt;/code&gt;, not &lt;code&gt;If&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/wiki/SC1083&#34;&gt;SC1083&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;This &lt;code&gt;{/}&lt;/code&gt; is literal. Check expression (missing &lt;code&gt;;/\n&lt;/code&gt;?) or quote it.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/wiki/SC1086&#34;&gt;SC1086&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Don&#39;t use &lt;code&gt;$&lt;/code&gt; on the iterator name in for loops.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/wiki/SC1087&#34;&gt;SC1087&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Braces are required when expanding arrays, as in &lt;code&gt;${array[idx]}&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/wiki/SC1095&#34;&gt;SC1095&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;You need a space or linefeed between the function name and body.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/wiki/SC1097&#34;&gt;SC1097&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Unexpected &lt;code&gt;==&lt;/code&gt;. For assignment, use &lt;code&gt;=&lt;/code&gt;. For comparison, use &lt;code&gt;[ .. ]&lt;/code&gt; or &lt;code&gt;[[ .. ]]&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/wiki/SC1098&#34;&gt;SC1098&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Quote/escape special characters when using &lt;code&gt;eval&lt;/code&gt;, e.g. &lt;code&gt;eval &#34;a=(b)&#34;&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/wiki/SC1099&#34;&gt;SC1099&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;You need a space before the &lt;code&gt;#&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/wiki/SC2002&#34;&gt;SC2002&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Useless cat. Consider &lt;code&gt;cmd &amp;lt; file | ..&lt;/code&gt; or &lt;code&gt;cmd file | ..&lt;/code&gt; instead.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/wiki/SC2015&#34;&gt;SC2015&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Note that &lt;code&gt;A &amp;amp;&amp;amp; B || C&lt;/code&gt; is not if-then-else. C may run when A is true.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/wiki/SC2026&#34;&gt;SC2026&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;This word is outside of quotes. Did you intend to &#39;nest &#39;&#34;&#39;single quotes&#39;&#34;&#39; instead&#39;?&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/wiki/SC2028&#34;&gt;SC2028&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;echo&lt;/code&gt; won&#39;t expand escape sequences. Consider &lt;code&gt;printf&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/wiki/SC2035&#34;&gt;SC2035&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Use &lt;code&gt;./*glob*&lt;/code&gt; or &lt;code&gt;-- *glob*&lt;/code&gt; so names with dashes won&#39;t become options.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/wiki/SC2039&#34;&gt;SC2039&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;In POSIX sh, something is undefined.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/wiki/SC2046&#34;&gt;SC2046&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Quote this to prevent word splitting&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/wiki/SC2086&#34;&gt;SC2086&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Double quote to prevent globbing and word splitting.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/wiki/SC2140&#34;&gt;SC2140&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Word is in the form &lt;code&gt;&#34;A&#34;B&#34;C&#34;&lt;/code&gt; (B indicated). Did you mean &lt;code&gt;&#34;ABC&#34;&lt;/code&gt; or &lt;code&gt;&#34;A\&#34;B\&#34;C&#34;&lt;/code&gt;?&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/wiki/SC2154&#34;&gt;SC2154&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;var is referenced but not assigned.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/wiki/SC2155&#34;&gt;SC2155&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Declare and assign separately to avoid masking return values.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/wiki/SC2164&#34;&gt;SC2164&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Use &lt;code&gt;cd ... || exit&lt;/code&gt; in case &lt;code&gt;cd&lt;/code&gt; fails.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;!--lint enable maximum-line-length--&gt; &#xA;&lt;h2&gt;Develop&lt;/h2&gt; &#xA;&lt;p&gt;If you are an experienced Haskeller, we would be very grateful if you would tear our code apart in a review.&lt;/p&gt; &#xA;&lt;h3&gt;Setup&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Clone repository&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone --recursive git@github.com:hadolint/hadolint.git&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Install the dependencies&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;stack install&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;REPL&lt;/h3&gt; &#xA;&lt;p&gt;The easiest way to try out the parser is using the REPL.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# start the repl&#xA;stack repl&#xA;# overload strings to be able to use Text&#xA;:set -XOverloadedStrings&#xA;# import parser library&#xA;import Language.Docker&#xA;# parse instruction and look at AST representation&#xA;parseText &#34;FROM debian:jessie&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Tests&lt;/h3&gt; &#xA;&lt;p&gt;Run unit tests:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;stack test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run integration tests:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./integration_test.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;AST&lt;/h3&gt; &#xA;&lt;p&gt;Dockerfile syntax is fully described in the &lt;a href=&#34;http://docs.docker.com/engine/reference/builder/&#34;&gt;Dockerfile reference&lt;/a&gt;. Just take a look at &lt;a href=&#34;https://www.stackage.org/haddock/nightly-2018-01-07/language-docker-2.0.1/Language-Docker-Syntax.html&#34;&gt;Syntax.hs&lt;/a&gt; in the &lt;code&gt;language-docker&lt;/code&gt; project to see the AST definition.&lt;/p&gt; &#xA;&lt;h3&gt;Building against custom libraries&lt;/h3&gt; &#xA;&lt;p&gt;Hadolint uses many libraries to do the dirty work. In particular, language-docker is used to parse Dockerfiles and produce an AST which then can be analyzed. To build Hadolint against a custom version of such libraries, do the following. This example uses language-docker, but it would work with any other libaray as well.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;In the same directory (e.g. &lt;code&gt;/home/user/repos&lt;/code&gt;) clone Hadolint and language-docker git repositories&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd /home/user/repos&#xA;git clone https://github.com/hadolint/hadolint.git&#xA;git clone https://github.com/hadolint/language-docker.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;Make your modifications to language-docker&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;In the Hadolint repo, edit the &lt;code&gt;stack.yaml&lt;/code&gt; file, such that the &lt;code&gt;extra-deps&lt;/code&gt; property points to the other repo&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;[...]&#xA;extra-deps:&#xA;  - ../language-docker&#xA;[...]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;Recompile Hadolint and run the tests&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd /home/user/repos/hadolint&#xA;stack test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Alternatives&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;replicatedhq/&lt;a href=&#34;https://github.com/replicatedhq/dockerfilelint&#34;&gt;dockerfilelint&lt;/a&gt;, the other linter used by the &lt;a href=&#34;https://github.com/github/super-linter/raw/main/README.md#supported-linters&#34;&gt;super-linter&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;RedCoolBeans/&lt;a href=&#34;https://github.com/RedCoolBeans/dockerlint/&#34;&gt;dockerlint&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;projectatomic/&lt;a href=&#34;https://github.com/projectatomic/dockerfile_lint/&#34;&gt;dockerfile_lint&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- References --&gt;</summary>
  </entry>
  <entry>
    <title>haskell/cabal</title>
    <updated>2022-06-26T02:12:30Z</updated>
    <id>tag:github.com,2022-06-26:/haskell/cabal</id>
    <link href="https://github.com/haskell/cabal" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Official upstream development repository for Cabal and cabal-install&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Cabal&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://hackage.haskell.org/package/Cabal&#34;&gt;&lt;img src=&#34;https://img.shields.io/hackage/v/Cabal.svg?label=Hackage&#34; alt=&#34;Hackage version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.stackage.org/package/Cabal&#34;&gt;&lt;img src=&#34;https://www.stackage.org/package/Cabal/badge/lts?label=Stackage&#34; alt=&#34;Stackage version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://cabal.readthedocs.io/en/latest/?badge=latest&#34;&gt;&lt;img src=&#34;http://readthedocs.org/projects/cabal/badge/?version=latest&#34; alt=&#34;Documentation Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://web.libera.chat/#hackage&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/chat-via%20libera-brightgreen.svg?sanitize=true&#34; alt=&#34;IRC chat&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://matrix.to/#/#hackage:libera.chat&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/chat-via%20matrix-brightgreen.svg?sanitize=true&#34; alt=&#34;Matrix chat&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;img src=&#34;https://www.haskell.org/cabal/images/Cabal-light.png&#34; align=&#34;right&#34;&gt; &#xA;&lt;p&gt;This Cabal Git repository contains the following packages:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/haskell/cabal/master/Cabal/README.md&#34;&gt;Cabal&lt;/a&gt;: the Cabal library package (&lt;a href=&#34;https://raw.githubusercontent.com/haskell/cabal/master/Cabal/LICENSE&#34;&gt;license&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/haskell/cabal/master/Cabal-syntax/README.md&#34;&gt;Cabal-syntax&lt;/a&gt;: the &lt;code&gt;.cabal&lt;/code&gt; file format library (&lt;a href=&#34;https://raw.githubusercontent.com/haskell/cabal/master/Cabal-syntax/LICENSE&#34;&gt;license&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/haskell/cabal/master/cabal-install/README.md&#34;&gt;cabal-install&lt;/a&gt;: the package containing the &lt;code&gt;cabal&lt;/code&gt; tool (&lt;a href=&#34;https://raw.githubusercontent.com/haskell/cabal/master/cabal-install/LICENSE&#34;&gt;license&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The canonical upstream repository is located at &lt;a href=&#34;https://github.com/haskell/cabal&#34;&gt;https://github.com/haskell/cabal&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installing cabal-install (by downloading the binary)&lt;/h2&gt; &#xA;&lt;p&gt;Prebuilt binary releases can be obtained from &lt;a href=&#34;https://www.haskell.org/cabal/download.html&#34;&gt;https://www.haskell.org/cabal/download.html&lt;/a&gt;. The &lt;code&gt;cabal-install&lt;/code&gt; binary download for your platform should contain the &lt;code&gt;cabal&lt;/code&gt; executable.&lt;/p&gt; &#xA;&lt;h2&gt;Installing cabal-install (preferred, with cabal-install)&lt;/h2&gt; &#xA;&lt;p&gt;Assuming that you have a pre-existing, recent version of &lt;code&gt;cabal-install&lt;/code&gt;, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cabal install cabal-install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To get the latest version of &lt;code&gt;cabal-install&lt;/code&gt;. (You may want to &lt;code&gt;cabal update&lt;/code&gt; first.)&lt;/p&gt; &#xA;&lt;p&gt;To install the latest version from the Git repository, clone the Git repository and then run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cabal install --project-file=cabal.project.release cabal-install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Installing cabal-install without cabal-install&lt;/h2&gt; &#xA;&lt;p&gt;Assuming you don&#39;t have a pre-existing copy of &lt;code&gt;cabal-install&lt;/code&gt;, look into &lt;a href=&#34;https://raw.githubusercontent.com/haskell/cabal/master/bootstrap&#34;&gt;&lt;code&gt;bootstrap&lt;/code&gt;&lt;/a&gt; directory.&lt;/p&gt;</summary>
  </entry>
</feed>