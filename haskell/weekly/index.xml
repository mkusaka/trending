<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Haskell Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-12-15T01:41:44Z</updated>
  <subtitle>Weekly Trending of Haskell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>entropia/tip-toi-reveng</title>
    <updated>2024-12-15T01:41:44Z</updated>
    <id>tag:github.com,2024-12-15:/entropia/tip-toi-reveng</id>
    <link href="https://github.com/entropia/tip-toi-reveng" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Trying to understand the file format of Tip Toi&lt;/p&gt;&lt;hr&gt;&lt;p&gt;Das tttool hat jetzt eine deutsche Webseite für Anwender: &lt;a href=&#34;http://tttool.entropia.de/&#34;&gt;http://tttool.entropia.de/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;tip-toi-reveng&lt;/h1&gt; &#xA;&lt;p&gt;The goal of this project is to understand the file and paper format for the Ravensburger TipToi pen. The ultimate goal is that everyone can create their own books, with their own sounds.&lt;/p&gt; &#xA;&lt;p&gt;The current status is that we understood most of the file format (see the &lt;a href=&#34;https://raw.githubusercontent.com/entropia/tip-toi-reveng/master/GME-Format.md&#34;&gt;GME file format specification&lt;/a&gt;). We provide a tool that allows you to dissect these files. The tool can also be used to generate completely new files from scratch; see below for details.&lt;/p&gt; &#xA;&lt;p&gt;If you want to learn more please have a look into our wiki (&lt;a href=&#34;https://github.com/entropia/tip-toi-reveng/wiki&#34;&gt;https://github.com/entropia/tip-toi-reveng/wiki&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;h2&gt;The tttool tool&lt;/h2&gt; &#xA;&lt;p&gt;Use the tool &lt;code&gt;tttool&lt;/code&gt; to investigate the gme files and build new ones. It supports various subcommands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;GME creation commands:&#xA;  assemble                 creates a gme file from the given source&#xA;&#xA;OID code creation commands:&#xA;  oid-table                creates a PDF or SVG file with all codes in the yaml file&#xA;  oid-codes                creates files for every OID in the yaml file (default: PNG).&#xA;  oid-code                 creates PNG files for each given code(s)&#xA;&#xA;GME modification commands:&#xA;  set-language             sets the language field of an GME file&#xA;  set-product-id           changes the product id an GME file&#xA;&#xA;GME analysis commands:&#xA;  info                     Print general information about a GME file&#xA;  export                   dumps the file in the human-readable yaml format&#xA;  scripts                  prints the decoded scripts for each OID&#xA;  script                   prints the decoded scripts for a specific OID&#xA;  games                    prints the decoded games&#xA;  lint                     checks for errors in the file or in this program&#xA;  segments                 lists all known parts of the file, with description.&#xA;  segment                  prints the segment that contains a specific offset&#xA;  explain                  print a hexdump of a GME file with descriptions&#xA;  holes                    lists all unknown parts of the file.&#xA;  rewrite                  parses the file and writes it again (for debugging)&#xA;&#xA;GME extraction commands:&#xA;  media                    dumps all audio samples&#xA;  binaries                 dumps all binaries&#xA;&#xA;Simulation commands:&#xA;  play                     interactively play a GME file&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./tttool --help&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;to learn about global options (e.g. DPI settings), and&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./tttool command --help&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;for the options of the individual command.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;We release &lt;code&gt;tttool&lt;/code&gt; for Windows and Linux users as a zipfile. You can find them in the &lt;a href=&#34;https://github.com/entropia/tip-toi-reveng/releases&#34;&gt;releases section&lt;/a&gt; of the GitHub project.&lt;/p&gt; &#xA;&lt;p&gt;Linux users likely want to install additional packages. On Debian or Ubuntu, run &lt;code&gt;sudo apt install libttspico-utils vorbis-tools&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;See &lt;code&gt;Building.md&lt;/code&gt; for instructions on how to build &lt;code&gt;tttool&lt;/code&gt; from source.&lt;/p&gt; &#xA;&lt;h2&gt;Building your own gme files&lt;/h2&gt; &#xA;&lt;p&gt;Once you have installed &lt;code&gt;tttool&lt;/code&gt;, you can create your own &lt;code&gt;.gme&lt;/code&gt; files. The process is as follows&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Record the audio samples you want to include, as Ogg Vorbis files, mono, 22050Hz. I use&lt;/p&gt; &lt;pre&gt;&lt;code&gt;arecord -r 22050 foo.wav&#xA;oggenc foo.wav&#xA;rm foo.wav&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Write a &lt;code&gt;my-book.yaml&lt;/code&gt; file containing some general information, and especially the scripts (i.e. what to do) for each OIDs (i.e. the various fields of a book). You can use the &lt;a href=&#34;https://raw.githubusercontent.com/entropia/tip-toi-reveng/master/example.yaml&#34;&gt;example.yaml&lt;/a&gt; file as a starting point; it contains more information in its comments.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run &lt;code&gt;./tttool assemble my-book.yaml&lt;/code&gt;, and make sure it reports no error, i.e. finishes silently.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Copy the now generated &lt;code&gt;my-book.gme&lt;/code&gt; to your TipToi pen and enjoy!&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;If you need to find out what OID code corresponds to what part of the book, you can generate a debug gme using the &lt;code&gt;debug.yaml&lt;/code&gt; file, adjusting its &lt;code&gt;Product-Id&lt;/code&gt; to your product’s id, building it with &lt;code&gt;./tttool assemble debug.yaml&lt;/code&gt; and loading the resulting &lt;code&gt;debug.gme&lt;/code&gt; on your pen. It will then read out the codes, as a sequence of english digits.&lt;/p&gt; &#xA;&lt;p&gt;If you want to convert existing audio files of almost any format, and you have &lt;code&gt;ffmpeg&lt;/code&gt; installed, you can use&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;ffmpeg -i input-audio-in-some.fmt -ar 22050 -ac 1 foo.ogg&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Text to speech&lt;/h2&gt; &#xA;&lt;p&gt;If you have &lt;code&gt;libttspico-utils&lt;/code&gt; and &lt;code&gt;vorbis-tools installed&lt;/code&gt;, you can have tttool generate audio files from text for you, which makes developing your yaml file much easier. See &lt;a href=&#34;https://raw.githubusercontent.com/entropia/tip-toi-reveng/master/text2speech.yaml&#34;&gt;text2speech.yaml&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h2&gt;Printing your own books&lt;/h2&gt; &#xA;&lt;p&gt;With the code in this repository, you can create GME files. This is even more fun if you can also create your own books! „Pronwan“ found out how that works, as you can see in &lt;a href=&#34;http://youtu.be/KC97F4PfNhk&#34;&gt;this video demonstration&lt;/a&gt;. He also published 30 minute &lt;a href=&#34;http://youtu.be/4AjvjFM8GzM&#34;&gt;video tutorial&lt;/a&gt; (in German).&lt;/p&gt; &#xA;&lt;h2&gt;Press Review&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blogs.fsfe.org/guido/2014/05/tiptoi-hacking-und-systemanforderungen/&#34;&gt;tiptoi hacking&lt;/a&gt; by Guido Arnold&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.nerd.junetz.de/blogbox/index.php?/archives/1377-TipToi-Hacking.html&#34;&gt;TipToi Hacking&lt;/a&gt; and &lt;a href=&#34;http://www.nerd.junetz.de/blogbox/index.php?/archives/1378-TipToi-Hacking-II.html&#34;&gt;TipToi Hacking II&lt;/a&gt; by Mr. Blog&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.joachim-breitner.de/blog/tag/Tiptoi&#34;&gt;Various posts&lt;/a&gt; by Joachim “nomeata” Breitner (the main author of &lt;code&gt;tttool&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=Yic57Y9VORA&amp;amp;app=desktop&#34;&gt;Self-made animal figures&lt;/a&gt; demonstration video&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;TODO&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;What are all the header fields? (See &lt;a href=&#34;https://raw.githubusercontent.com/entropia/tip-toi-reveng/master/wip/Header.md&#34;&gt;wip/Header.md&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Finish decoding the games. (See &lt;a href=&#34;https://raw.githubusercontent.com/entropia/tip-toi-reveng/master/wip/games.txt&#34;&gt;wip/games.txt&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;What is the purpose of the additional script table?&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Other resources in this repository&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://htmlpreview.github.io/?https://github.com/entropia/tip-toi-reveng/raw/master/oid-decoder.html&#34;&gt;&lt;code&gt;oid-decoder.html&lt;/code&gt;&lt;/a&gt; allows you to manually decode an OID image.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;gameanalyse.c&lt;/code&gt; and &lt;code&gt;libtiptoi.c&lt;/code&gt; is an alternative tool to investigate gme files. It can also &lt;a href=&#34;https://raw.githubusercontent.com/entropia/tip-toi-reveng/master/Audio/README.md&#34;&gt;replace audio files in gme files&lt;/a&gt;; compile and run it for diagnostic output.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Audio/&lt;/code&gt; contains some audio files, such as digits read out.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;docs/&lt;/code&gt; collects information about TipToi found elsewhere.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;wip/&lt;/code&gt; (work in progess) contains notes about the parts of the gme files that are not fully understood yet.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;perl-tools&lt;/code&gt; contains a perl based script, to generate a PDF with all OID codes from a yaml-file as well some functions to generate PNG-files, inject pHYs-chunks with resolution hints into GD generated PNG files as result from some testing&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>