<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Haskell Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-07-13T01:39:48Z</updated>
  <subtitle>Weekly Trending of Haskell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>NixOS/cabal2nix</title>
    <updated>2025-07-13T01:39:48Z</updated>
    <id>tag:github.com,2025-07-13:/NixOS/cabal2nix</id>
    <link href="https://github.com/NixOS/cabal2nix" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Generate Nix build instructions from a Cabal file&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;The cabal2nix monorepo&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/NixOS/cabal2nix/workflows/Haskell-CI/badge.svg?sanitize=true&#34; alt=&#34;Continous Integration&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Components&lt;/h2&gt; &#xA;&lt;h3&gt;cabal2nix&lt;/h3&gt; &#xA;&lt;p&gt;Tool that generates Nix build instructions from a Cabal file. Also contains hackage2nix, the tool that generates the &lt;code&gt;haskellPackages&lt;/code&gt; set in nixpkgs.&lt;/p&gt; &#xA;&lt;h3&gt;distribution-nixpkgs&lt;/h3&gt; &#xA;&lt;p&gt;Utility library implementing nixpkgs-specific tasks and concepts: Looking up packages, &lt;code&gt;meta&lt;/code&gt; sets, Nix-style integrity hashes etc.&lt;/p&gt; &#xA;&lt;h3&gt;language-nix&lt;/h3&gt; &#xA;&lt;p&gt;Simplistic library to parse and render a subset of the Nix language.&lt;/p&gt; &#xA;&lt;h3&gt;hackage-db&lt;/h3&gt; &#xA;&lt;p&gt;Library for working with the Hackage database created and updated using &lt;code&gt;cabal update&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;p&gt;At the top-level, a &lt;code&gt;cabal.project&lt;/code&gt; and &lt;code&gt;shell.nix&lt;/code&gt; are provided for working on all packages in the repository. You can use &lt;code&gt;direnv&lt;/code&gt; and (optionally) lorri to make the environment available in your normal shell as well.&lt;/p&gt; &#xA;&lt;h2&gt;Maintenance&lt;/h2&gt; &#xA;&lt;p&gt;The monorepo has been assembled using &lt;a href=&#34;https://josh-project.github.io/josh/&#34;&gt;josh&lt;/a&gt;. You can obtain it from nixpkgs using &lt;code&gt;nix-shell -p josh&lt;/code&gt;. Below, some common tasks are documented.&lt;/p&gt; &#xA;&lt;h3&gt;Extracting the original git history&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://josh-project.github.io/josh/&#34;&gt;josh&lt;/a&gt;&#39;s history filtering capabilities are quite powerful, allowing us to extract the original git histories of the repositories that have been vendored in. For example, for &lt;code&gt;distribution-nixpkgs&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ josh-filter &#39;:/distribution-nixpkgs&#39;&#xA;$ git checkout FILTERED_HEAD&#xA;$ ls *.cabal&#xA;distribution-nixpkgs.cabal&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;FILTERED_HEAD&lt;/code&gt; ref has the original &lt;code&gt;HEAD&lt;/code&gt; of the &lt;code&gt;distribution-nixpkgs&lt;/code&gt; &lt;code&gt;HEAD&lt;/code&gt; when it was vendored as its ancestor and can thus be pushed to the original repository.&lt;/p&gt; &#xA;&lt;h3&gt;Vendoring components&lt;/h3&gt; &#xA;&lt;p&gt;This probably won&#39;t come up in the future, but the process that was used to vendor the additional libraries is documented here:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ name=â€¦&#xA;$ git fetch https://github.com/nixos/$name.git&#xA;$ josh-filter &#34;:prefix=$name&#34; FETCH_HEAD&#xA;$ git merge --allow-unrelated-histories FILTERED_HEAD -m &#34;$name: subtree upstream repo&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Also refer to the relevant &lt;a href=&#34;https://josh-project.github.io/josh/guide/importing.html&#34;&gt;josh documentation&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>