<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Haskell Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-03-19T01:57:09Z</updated>
  <subtitle>Weekly Trending of Haskell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>VinylRecords/Vinyl</title>
    <updated>2023-03-19T01:57:09Z</updated>
    <id>tag:github.com,2023-03-19:/VinylRecords/Vinyl</id>
    <link href="https://github.com/VinylRecords/Vinyl" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Extensible Records for Haskell. Pull requests welcome! Come visit us on #vinyl on freenode.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;Vinyl is a general solution to the records problem in Haskell using type level strings and other modern GHC features, featuring static structural typing (with a subtyping relation), and automatic row-polymorphic lenses. All this is possible without Template Haskell.&lt;/p&gt; &#xA;&lt;p&gt;First, install Vinyl from &lt;a href=&#34;http://hackage.haskell.org/package/vinyl&#34;&gt;Hackage&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cabal update&#xA;cabal install vinyl&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To learn more, &lt;a href=&#34;https://github.com/VinylRecords/Vinyl/raw/master/tests/Intro.lhs&#34;&gt;try this tutorial&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Performance Scaling&lt;/h2&gt; &#xA;&lt;p&gt;Vinyl is an approach to records in Haskell based on a heterogeneous list type: a list where each element may have a different type. Since it is a list, accessing any individual field of a Vinyl record seems as though it should have &lt;em&gt;O(n)&lt;/em&gt; complexity, with &lt;em&gt;n&lt;/em&gt; the size of the record. Sure enough, pattern matching on a Vinyl record works just as with a list: we peel off the head element until we reach the one we are looking for. But we have an option to change these asymptotics.&lt;/p&gt; &#xA;&lt;p&gt;If we anticipate frequent &lt;code&gt;get&lt;/code&gt; operations on a record, we can use the function &lt;code&gt;toARec :: Rec f ts -&amp;gt; ARec f ts&lt;/code&gt; to produce an &lt;em&gt;array-backed &lt;code&gt;Rec&lt;/code&gt;&lt;/em&gt; that offers constant-time field access. We can consider a &lt;a href=&#34;https://github.com/VinylRecords/Vinyl/raw/master/benchmarks/AccessorsBench.hs&#34;&gt;benchmark&lt;/a&gt; of getting specific fields from different varieties of Vinyl records.&lt;/p&gt; &#xA;&lt;p&gt;This benchmark suggests the trends we should expect&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Getting a field deeper in a Vinyl record takes more time than getting one earlier (i.e. it appears to the left, or under fewer &lt;code&gt;:&amp;amp;&lt;/code&gt; constructors) in the record&lt;/li&gt; &#xA; &lt;li&gt;Getting a field of an &lt;code&gt;ARec&lt;/code&gt; (or &lt;code&gt;AFieldRec&lt;/code&gt;, which is an &lt;code&gt;ARec&lt;/code&gt; with named fields) array-backed record does not depend on where in the record that field lies&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The x-axis of this graph should be labeled as &lt;em&gt;nanoseconds&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/VinylRecords/Vinyl/master/images/accessors.png&#34; alt=&#34;Accessors benchmark plot&#34;&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>GaloisInc/bv-sized-float</title>
    <updated>2023-03-19T01:57:09Z</updated>
    <id>tag:github.com,2023-03-19:/GaloisInc/bv-sized-float</id>
    <link href="https://github.com/GaloisInc/bv-sized-float" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Floating-point operations for bv-sized&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;bv-sized-float&lt;/h1&gt; &#xA;&lt;p&gt;Under development.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>launchdarkly/haskell-server-sdk-redis-hedis</title>
    <updated>2023-03-19T01:57:09Z</updated>
    <id>tag:github.com,2023-03-19:/launchdarkly/haskell-server-sdk-redis-hedis</id>
    <link href="https://github.com/launchdarkly/haskell-server-sdk-redis-hedis" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Redis integration for the LaunchDarkly SDK for Server-side Haskell using hedis&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;LaunchDarkly Server SDK for Haskell - Redis Integration&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://hackage.haskell.org/package/launchdarkly-server-sdk-redis-hedis&#34;&gt;&lt;img src=&#34;https://img.shields.io/hackage/v/launchdarkly-server-sdk-redis-hedis&#34; alt=&#34;Hackage&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://circleci.com/gh/launchdarkly/haskell-server-sdk-redis-hedis&#34;&gt;&lt;img src=&#34;https://circleci.com/gh/launchdarkly/haskell-server-sdk-redis-hedis.svg?style=shield&#34; alt=&#34;CircleCI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://launchdarkly.github.io/haskell-server-sdk-redis-hedis&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1?label=GitHub+Pages&amp;amp;message=API+reference&amp;amp;color=00add8&#34; alt=&#34;Documentation&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;LaunchDarkly overview&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.launchdarkly.com&#34;&gt;LaunchDarkly&lt;/a&gt; is a feature management platform that serves over 100 billion feature flags daily to help teams build better software, faster. &lt;a href=&#34;https://docs.launchdarkly.com/home/getting-started&#34;&gt;Get started&lt;/a&gt; using LaunchDarkly today!&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://twitter.com/intent/follow?screen_name=launchdarkly&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/follow/launchdarkly.svg?style=social&amp;amp;label=Follow&amp;amp;maxAge=2592000&#34; alt=&#34;Twitter Follow&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Supported Haskell versions&lt;/h2&gt; &#xA;&lt;p&gt;This version of the LaunchDarkly SDK has been tested with Haskell v4.&lt;/p&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;p&gt;Download a release archive from the &lt;a href=&#34;https://github.com/launchdarkly/haskell-server-sdk-redis-hedis/releases&#34;&gt;GitHub Releases&lt;/a&gt; for use in your project. Refer to the &lt;a href=&#34;https://docs.launchdarkly.com/sdk/features/storing-data/redis#haskell&#34;&gt;SDK Redis documentation&lt;/a&gt; for complete instructions on getting started with using the SDK with Redis.&lt;/p&gt; &#xA;&lt;h2&gt;Learn more&lt;/h2&gt; &#xA;&lt;p&gt;Check out our &lt;a href=&#34;https://docs.launchdarkly.com&#34;&gt;documentation&lt;/a&gt; for in-depth instructions on configuring and using LaunchDarkly. You can also head straight to the &lt;a href=&#34;https://docs.launchdarkly.com/sdk/server-side/haskell&#34;&gt;complete reference guide for this SDK&lt;/a&gt; or our &lt;a href=&#34;https://launchdarkly.github.io/haskell-server-sdk/&#34;&gt;code-generated API documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Testing&lt;/h2&gt; &#xA;&lt;p&gt;We run integration tests for all our SDKs using a centralized test harness. This approach gives us the ability to test for consistency across SDKs, as well as test networking behavior in a long-running application. These tests cover each method in the SDK, and verify that event sending, flag evaluation, stream reconnection, and other aspects of the SDK all behave correctly.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;We encourage pull requests and other contributions from the community. Check out our &lt;a href=&#34;https://raw.githubusercontent.com/launchdarkly/haskell-server-sdk-redis-hedis/main/CONTRIBUTING.md&#34;&gt;contributing guidelines&lt;/a&gt; for instructions on how to contribute to this SDK.&lt;/p&gt; &#xA;&lt;h2&gt;About LaunchDarkly&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;LaunchDarkly is a continuous delivery platform that provides feature flags as a service and allows developers to iterate quickly and safely. We allow you to easily flag your features and manage them from the LaunchDarkly dashboard. With LaunchDarkly, you can: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Roll out a new feature to a subset of your users (like a group of users who opt-in to a beta tester group), gathering feedback and bug reports from real-world use cases.&lt;/li&gt; &#xA;   &lt;li&gt;Gradually roll out a feature to an increasing percentage of users, and track the effect that the feature has on key metrics (for instance, how likely is a user to complete a purchase if they have feature A versus feature B?).&lt;/li&gt; &#xA;   &lt;li&gt;Turn off a feature that you realize is causing performance problems in production, without needing to re-deploy, or even restart the application with a changed configuration file.&lt;/li&gt; &#xA;   &lt;li&gt;Grant access to certain features based on user attributes, like payment plan (eg: users on the ‘gold’ plan get access to more features than users in the ‘silver’ plan). Disable parts of your application to facilitate maintenance, without taking everything offline.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;LaunchDarkly provides feature flag SDKs for a wide variety of languages and technologies. Check out &lt;a href=&#34;https://docs.launchdarkly.com/docs&#34;&gt;our documentation&lt;/a&gt; for a complete list.&lt;/li&gt; &#xA; &lt;li&gt;Explore LaunchDarkly &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.launchdarkly.com/&#34; title=&#34;LaunchDarkly Main Website&#34;&gt;launchdarkly.com&lt;/a&gt; for more information&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://docs.launchdarkly.com/&#34; title=&#34;LaunchDarkly Documentation&#34;&gt;docs.launchdarkly.com&lt;/a&gt; for our documentation and SDK reference guides&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://apidocs.launchdarkly.com/&#34; title=&#34;LaunchDarkly API Documentation&#34;&gt;apidocs.launchdarkly.com&lt;/a&gt; for our API documentation&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://launchdarkly.com/blog/&#34; title=&#34;LaunchDarkly Blog Documentation&#34;&gt;launchdarkly.com/blog&lt;/a&gt; for the latest product updates&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>