<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Haskell Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-09-04T01:43:47Z</updated>
  <subtitle>Weekly Trending of Haskell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>cdepillabout/servant-rawm</title>
    <updated>2022-09-04T01:43:47Z</updated>
    <id>tag:github.com,2022-09-04:/cdepillabout/servant-rawm</id>
    <link href="https://github.com/cdepillabout/servant-rawm" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Effectful Raw handler for Servant servers.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Servant.RawM&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/cdepillabout/servant-rawm/actions/workflows/ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/cdepillabout/servant-rawm/actions/workflows/ci.yml/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hackage.haskell.org/package/servant-rawm&#34;&gt;&lt;img src=&#34;https://img.shields.io/hackage/v/servant-rawm.svg?sanitize=true&#34; alt=&#34;Hackage&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://stackage.org/lts/package/servant-rawm&#34;&gt;&lt;img src=&#34;http://stackage.org/package/servant-rawm/badge/lts&#34; alt=&#34;Stackage LTS&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://stackage.org/nightly/package/servant-rawm&#34;&gt;&lt;img src=&#34;http://stackage.org/package/servant-rawm/badge/nightly&#34; alt=&#34;Stackage Nightly&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/badge/license-BSD3-blue.svg?sanitize=true&#34; alt=&#34;BSD3 license&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;servant-rawm&lt;/code&gt; provides a way to embed a WAI &lt;a href=&#34;https://hackage.haskell.org/package/wai-3.2.1.1/docs/Network-Wai.html#t:Application&#34;&gt;&lt;code&gt;Application&lt;/code&gt;&lt;/a&gt; in a Servant handler. It is more convenient and powerful than the &lt;a href=&#34;https://hackage.haskell.org/package/servant-0.11/docs/Servant-API-Raw.html#t:Raw&#34;&gt;&lt;code&gt;Raw&lt;/code&gt;&lt;/a&gt; type provided by &lt;a href=&#34;https://hackage.haskell.org/package/servant&#34;&gt;&lt;code&gt;servant&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://hackage.haskell.org/package/servant-rawm/docs/Servant-RawM.html&#34;&gt;Haddocks on Hackage for &lt;code&gt;servant-rawm&lt;/code&gt;&lt;/a&gt; for an explanation of how to use the &lt;a href=&#34;https://hackage.haskell.org/package/servant-rawm/docs/Servant-RawM.html#t:RawM&#34;&gt;&lt;code&gt;RawM&lt;/code&gt;&lt;/a&gt; type.&lt;/p&gt; &#xA;&lt;p&gt;After &lt;code&gt;servant-rawm&lt;/code&gt; 1.0.0.0, the implementations of the &lt;code&gt;RawM&lt;/code&gt; endpoint are divided into &lt;code&gt;servant-rawm-client&lt;/code&gt;, &lt;code&gt;servant-rawm-docs&lt;/code&gt;, and &lt;code&gt;servant-rawm-server&lt;/code&gt; to avoid introducing unnecessary dependencies and reduce the compilation overhead.&lt;/p&gt; &#xA;&lt;p&gt;You will need to add either of the implementations to your dependencies, and import the corresponding implementation (&lt;code&gt;Servant.RawM.Server&lt;/code&gt;, &lt;code&gt;Servant.RawM.Client&lt;/code&gt;, or &lt;code&gt;Servant.RawM.Docs&lt;/code&gt;) for the &lt;code&gt;RawM&lt;/code&gt; endpoint to function correctly.&lt;/p&gt; &#xA;&lt;h2&gt;Example&lt;/h2&gt; &#xA;&lt;p&gt;There is code for an example server, client, and documentation located in &lt;a href=&#34;https://raw.githubusercontent.com/cdepillabout/servant-rawm/master/servant-rawm-examples-and-tests/example/&#34;&gt;&lt;code&gt;servant-rawm-examples-and-tests/example/&lt;/code&gt;&lt;/a&gt;. The following section describes how to run the example executables.&lt;/p&gt; &#xA;&lt;h3&gt;Building&lt;/h3&gt; &#xA;&lt;p&gt;The example executables can be built with the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ stack build servant-rawm-examples-and-tests&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Server&lt;/h3&gt; &#xA;&lt;p&gt;After building, the server can be run with the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ stack exec -- servant-rawm-example-server&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This runs a server on port 8201 serving files in &lt;a href=&#34;https://raw.githubusercontent.com/cdepillabout/servant-rawm/master/servant-rawm-examples-and-tests/example/files/&#34;&gt;&lt;code&gt;servant-rawm-examples-and-tests/example/files/&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;It can be accessed from &lt;code&gt;curl&lt;/code&gt; like the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ curl http://localhost:8201/serve-directory/foo.txt&#xA;This is an example text file.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Client&lt;/h3&gt; &#xA;&lt;p&gt;After building and running the server, the client can be run like the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ stack exec -- servant-rawm-example-client&#xA;Successfully got file ./example/files/foo.txt:&#xA;&#xA;This is an example text file.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Documentation&lt;/h3&gt; &#xA;&lt;p&gt;After building, the documentation can be generated like the following. This is documentation for the API defined in &lt;a href=&#34;https://raw.githubusercontent.com/cdepillabout/servant-rawm/master/servant-rawm-examples-and-tests/example/Api.hs&#34;&gt;servant-rawm-examples-and-tests/example/Api.hs&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ stack exec -- servant-rawm-example-docs&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Maintainers&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/cdepillabout&#34;&gt;@cdepillabout&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Krasjet&#34;&gt;@Krasjet&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>Shopify/kubepacity</title>
    <updated>2022-09-04T01:43:47Z</updated>
    <id>tag:github.com,2022-09-04:/Shopify/kubepacity</id>
    <link href="https://github.com/Shopify/kubepacity" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Visualizing kubernetes capacity.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;kubepacity&lt;/h1&gt; &#xA;&lt;p&gt;Visualizing kubernetes capacity.&lt;/p&gt; &#xA;&lt;h3&gt;Setup&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.haskellstack.org/en/stable/README/&#34;&gt;Install stack!&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;stack build&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;stack test&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;stack exec kubepacity&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Dependencies&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Requires a working kubectl.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>digital-asset/lib-finance</title>
    <updated>2022-09-04T01:43:47Z</updated>
    <id>tag:github.com,2022-09-04:/digital-asset/lib-finance</id>
    <link href="https://github.com/digital-asset/lib-finance" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;DAML Finance Library (FinLib)&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://circleci.com/gh/digital-asset/lib-finance&#34;&gt;&lt;img src=&#34;https://circleci.com/gh/digital-asset/lib-finance.svg?style=svg&#34; alt=&#34;CircleCI&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Copyright (c) 2019, Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.&#xA;SPDX-License-Identifier: Apache-2.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;The FinLib is a collection of pure functions, DAML templates and triggers that can be used as building blocks to speed up application development and to increase code reuse, standardisation and compatibility across solutions.&lt;/p&gt; &#xA;&lt;p&gt;Currently, it contains code for:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/digital-asset/lib-finance/master/#assets&#34;&gt;Assets&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/digital-asset/lib-finance/master/#asset-transfers&#34;&gt;Asset Transfers&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/digital-asset/lib-finance/master/#delivery-vs-payment-(dvp)-trades&#34;&gt;Delivery vs Payment (DvP) Trades&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/digital-asset/lib-finance/master/#corporate-actions&#34;&gt;Corporate Actions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/digital-asset/lib-finance/master/#calendar-functions&#34;&gt;Calendar Functions&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Additional functionality will be added over time based on user feedback and demand. Thanks to its modular design, it&#39;s straightforward to use all the workflows of the FinLib or to selectively replace certain steps depending on the requirements of the solution.&lt;/p&gt; &#xA;&lt;p&gt;This Readme provides a conceptual overview of the FinLib. The individual contracts, fields and choices are described in the more detailed &lt;a href=&#34;https://raw.githubusercontent.com/digital-asset/lib-finance/master/docs/Reference_Model.md&#34;&gt;model reference documentation&lt;/a&gt;. Corresponding triggers are described in the &lt;a href=&#34;https://raw.githubusercontent.com/digital-asset/lib-finance/master/docs/Reference_Trigger.md&#34;&gt;trigger reference documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Prerequisites&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://daml.com/&#34;&gt;DAML SDK&lt;/a&gt; to work with the DAML code&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;Digital Asset is working on adding a DAML package management system to the DAML SDK. This will allow to reference the FinLib package from a a project and to import FinLib modules as usual, for example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;import DA.Finance.Fact.Asset&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In the meantime, a pragmatic way to use the FinLib is to copy its source code into a project.&lt;/p&gt; &#xA;&lt;h2&gt;Contract Ids and Trust Models&lt;/h2&gt; &#xA;&lt;p&gt;The FinLib addresses data with the following versioned identifier that is backed by a set of signatories:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;data Id = Id&#xA;  with&#xA;    signatories : Set Party&#xA;    label : Text&#xA;    version : Int&#xA;  deriving (Eq, Show)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;signatories&lt;/code&gt; are the parties that need to sign a contract with this id and that are responsible to ensure uniqueness of the &lt;code&gt;label&lt;/code&gt;. The &lt;code&gt;version&lt;/code&gt; allows to model multiple revisions of the same contract.&lt;/p&gt; &#xA;&lt;p&gt;Using a set of &lt;code&gt;signatories&lt;/code&gt; allows the FinLib to support various trust models. For example, an &lt;code&gt;AssetDeposit&lt;/code&gt; might be signed by (i) both the provider and the owner, (ii) just the provider or (iii) a third party agent. All approaches are valid depending on the desired level of trust between participants or the required flexibility to force upgrades.&lt;/p&gt; &#xA;&lt;h2&gt;Assets&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;AssetDeposit&lt;/code&gt; represents a deposit of a generic, fungible asset in an account. The &lt;code&gt;account.id&lt;/code&gt; and &lt;code&gt;asset.id&lt;/code&gt; fields can be used to link the contract to other contracts that provide further information such as the type of the asset or reference data for it. This allows new asset classes to be added without having to modify business processes that operate on generic asset deposits.&lt;/p&gt; &#xA;&lt;p&gt;A deposit is allocated to an account and backed by the &lt;code&gt;account.id.signatories&lt;/code&gt;. The deposited asset is specified by the &lt;code&gt;asset.id&lt;/code&gt;. The &lt;code&gt;asset.id.signatories&lt;/code&gt; are the parties that publish reference data for the asset and hence define what it is and how it can be lifecycled.&lt;/p&gt; &#xA;&lt;p&gt;The AssetDeposit is &lt;code&gt;fungible&lt;/code&gt; by design as it includes the choices how to &lt;code&gt;Split&lt;/code&gt; a single deposit into multiple and &lt;code&gt;Merge&lt;/code&gt; multiple deposits into a single one.&lt;/p&gt; &#xA;&lt;p&gt;Note that the library does not model positions. Positions can be derived e.g. client side by aggregating all asset deposits or a trigger that periodically updates a position contract by looking at all asset deposits.&lt;/p&gt; &#xA;&lt;h2&gt;Asset Transfers&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;AssetSettlement&lt;/code&gt; template allows to transfer &lt;code&gt;AssetDeposit&lt;/code&gt;s from one account to another by consuming a deposit and then crediting the asset to the receiver`s account. This requires that the sender is allowed to &lt;code&gt;Credit&lt;/code&gt; in the receiver&#39;s account through his &lt;code&gt;AssetSettlement&lt;/code&gt; contract.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/digital-asset/lib-finance/master/docs/AssetSettlement.png&#34; alt=&#34;AssetSettlement&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Delivery vs Payment (DvP) Trades&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;Dvp&lt;/code&gt; is a trade that represents an obligation to exchange the payment assets against the delivery assets at the agreed settlement date. A trade is allocated to a master agreement and backed by &lt;code&gt;masterAgreement.id.signatories&lt;/code&gt;. Depending on the desired trust model this might be both counterparties or a third party agent.&lt;/p&gt; &#xA;&lt;p&gt;Trades in general need to be settled. As part of instructing a trade a set of &lt;code&gt;SettlementInstruction&lt;/code&gt;s should be created. The library does not include the logic of how a DvP gets instructed because the process is often very bespoke to the given use case.&lt;/p&gt; &#xA;&lt;p&gt;Parties need to allocate deposits to &lt;code&gt;SettlementInstruction&lt;/code&gt;s. In the easy case where both counterparties have an account with the same provider a direct transfer from the sender to the receiver is possible, i.e. a single step need to be specified. The &lt;code&gt;SettlementInstruction&lt;/code&gt; can also handle more complex use cases where assets are &lt;em&gt;atomically&lt;/em&gt; transferred up and down an account hierarchy. In these cases multiple steps corresponding to the hierarchy are required.&lt;/p&gt; &#xA;&lt;p&gt;The trigger package includes an &lt;code&gt;AllocationRule&lt;/code&gt; template that helps to allocate deposits to settlement instructions and a trigger that eagerly allocates deposits.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;DvpSettlement&lt;/code&gt; template allows to settle a DvP by providing fully allocated settlement instructions for each payment and delivery obligation.&lt;/p&gt; &#xA;&lt;p&gt;The trigger package again includes a trigger that settles fully allocated DvPs.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/digital-asset/lib-finance/master/docs/DvP.png&#34; alt=&#34;DvP&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Corporate Actions&lt;/h2&gt; &#xA;&lt;p&gt;Similar like there is a generic asset deposit that can hold any asset, there is a generic &lt;code&gt;LifecycleEffects&lt;/code&gt; template storing the details of an asset&#39;s lifecycle event by defining the outcome, i.e the &lt;code&gt;effects&lt;/code&gt;. This avoids dealing with any type of corporate action in the &lt;code&gt;AssetLifecycle&lt;/code&gt; and &lt;code&gt;DvpLifecycle&lt;/code&gt; rules. Those rules are used to lifecycle &lt;code&gt;AssetDeposit&lt;/code&gt;s and &lt;code&gt;DvP&lt;/code&gt;s based on &lt;code&gt;LifecycleEffects&lt;/code&gt; contracts only. Triggers are available to automate the process.&lt;/p&gt; &#xA;&lt;p&gt;Details of corporate actions are captured in reference data contracts with the same version number as the asset to which it applies, for example an &lt;code&gt;EquityCashDividend&lt;/code&gt;. The reference data provider can use such a specific reference data contract to create the generic &lt;code&gt;LifecycleEffects&lt;/code&gt; contract.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/digital-asset/lib-finance/master/docs/CorporateAction.png&#34; alt=&#34;CorporateAction&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Calendar Functions&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/digital-asset/lib-finance/master/daml/DA/Finance/Base&#34;&gt;DA.Finance.Base&lt;/a&gt; includes a set of pure functions to deal with dates, holiday calendars, and schedules. See the &lt;a href=&#34;https://raw.githubusercontent.com/digital-asset/lib-finance/master/docs/Reference.md&#34;&gt;reference documentation&lt;/a&gt; for all available functions.&lt;/p&gt;</summary>
  </entry>
</feed>