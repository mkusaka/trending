<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Haskell Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-10-22T01:52:57Z</updated>
  <subtitle>Weekly Trending of Haskell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>bobzhangwz/ubuntu-setup</title>
    <updated>2023-10-22T01:52:57Z</updated>
    <id>tag:github.com,2023-10-22:/bobzhangwz/ubuntu-setup</id>
    <link href="https://github.com/bobzhangwz/ubuntu-setup" rel="alternate"></link>
    <summary type="html">&lt;p&gt;my own linux setup&lt;/p&gt;&lt;hr&gt;&lt;p&gt;Adobe Systems Incorporated Flash Player 11 for Linux Version 11.2.202.297 2012&lt;/p&gt; &#xA;&lt;p&gt;Adobe recommends that all users upgrade to the latest version of Adobe Flash Player for the most recent features, bug fixes, and security fixes. For more information on the new features in Flash Player 9, please visit &lt;a href=&#34;http://www.adobe.com/products/flashplayer/&#34;&gt;http://www.adobe.com/products/flashplayer/&lt;/a&gt;. For more information on system requirements, fixed issues, and known issues, see the release notes at &lt;a href=&#34;http://www.adobe.com/go/flashplayer_releasenotes&#34;&gt;http://www.adobe.com/go/flashplayer_releasenotes&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To confirm which version of Flash Player you have currently installed, see &lt;a href=&#34;http://www.adobe.com/software/flash/about/&#34;&gt;http://www.adobe.com/software/flash/about/&lt;/a&gt;. Users should only install Players that have been downloaded from trusted sources, such as &lt;a href=&#34;http://www.adobe.com/&#34;&gt;http://www.adobe.com/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Your use of this player is governed by the Adobe End User License Agreement found at &lt;a href=&#34;http://www.adobe.com/products/eulas/players/flash/&#34;&gt;http://www.adobe.com/products/eulas/players/flash/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Privacy&lt;/h2&gt; &#xA;&lt;p&gt;Adobe is committed to preserving the privacy of end users. For more information on configuring Client-side privacy visit the Settings Manager Documentation: &lt;a href=&#34;http://www.adobe.com/go/flashplayerhelp&#34;&gt;http://www.adobe.com/go/flashplayerhelp&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation instructions&lt;/h2&gt; &#xA;&lt;p&gt;Installing using the plugin tar.gz: o Unpack the plugin tar.gz and copy the files to the appropriate location.&lt;br&gt; o Save the plugin tar.gz locally and note the location the file was saved to. o Launch terminal and change directories to the location the file was saved to. o Unpack the tar.gz file. Once unpacked you will see the following: + libflashplayer.so + /usr o Identify the location of the browser plugins directory, based on your Linux distribution and Firefox version o Copy libflashplayer.so to the appropriate browser plugins directory. At the prompt type: + cp libflashlayer.so &#xA; &lt;browserpluginslocation&gt;&#xA;   o Copy the Flash Player Local Settings configurations files to the /usr directory. At the prompt type: + sudo cp -r usr/* /usr&#xA; &lt;/browserpluginslocation&gt;&lt;/p&gt; &#xA;&lt;p&gt;Installing the plugin using RPM: o As root, enter in terminal: + # rpm -Uvh &amp;lt;rpm_package_file&amp;gt; + Click Enter key and follow prompts&lt;/p&gt; &#xA;&lt;p&gt;Installing the standalone player: o Unpack the tar.gz file o To execute the standalone player, + Double-click, or + Enter in terminal: ./flashplayer&lt;/p&gt; &#xA;&lt;h2&gt;Uninstallation instructions&lt;/h2&gt; &#xA;&lt;p&gt;Manual uninstallation (for users who installed the plugin via Install script): o Delete libflashplayer.so binary and flashplayer.xpt file in directory /home/&#xA; &lt;user&gt;&#xA;  /.mozilla/plugins/&#xA; &lt;/user&gt;&lt;/p&gt; &#xA;&lt;p&gt;RPM uninstallation: o As root, enter in terminal: + # rpm -e flash-plugin + Click Enter key and follow prompts&lt;/p&gt; &#xA;&lt;h2&gt;Technical Issues and Reporting Bugs&lt;/h2&gt; &#xA;&lt;p&gt;The Adobe Flash Player Support Center at &lt;a href=&#34;http://www.adobe.com/support/flashplayer/&#34;&gt;http://www.adobe.com/support/flashplayer/&lt;/a&gt; is a free online resource for support and troubleshooting information. Bug reports may be submitted at &lt;a href=&#34;http://www.adobe.com/go/wish&#34;&gt;http://www.adobe.com/go/wish&lt;/a&gt;. To allow us to investigate reported bugs, please include the following information:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Platform and version&lt;/li&gt; &#xA; &lt;li&gt;Browser version&lt;/li&gt; &#xA; &lt;li&gt;Reproducible steps including a URL to the web site where the problem was encountered.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;If we need further information about a bug, you will be contacted. An automated reply will be sent to assure you that we have received your bug report. Due to the volume of mail received, we are not able to individually respond to each report.&lt;/p&gt; &#xA;&lt;p&gt;Use the following commands to generate dependency lists for Flash Player or the Local Setting Manager:&lt;/p&gt; &#xA;&lt;p&gt;Flash Player: ldd &#xA; &lt;browserpluginslocation&gt;&#xA;  /libflashplayer.so&#xA; &lt;/browserpluginslocation&gt;&lt;/p&gt; &#xA;&lt;p&gt;Gnome Local Setting Manager: ldd /usr/lib/kcm_adobe_flash_player.so (for 32-bit systems) ldd /usr/lib64/kcm_adobe_flash_player.so (for 64-bit systems)&lt;/p&gt; &#xA;&lt;p&gt;KDE Local Settings Manager: ldd /usr/bin/flash-player-properties&lt;/p&gt; &#xA;&lt;h2&gt;Legal&lt;/h2&gt; &#xA;&lt;p&gt;Adobe(R) Flash(R) Player. Copyright (C) 1996 - 2011 Adobe Systems Incorporated. All Rights Reserved. Adobe and Flash are either trademarks or registered trademarks in the United States and/or other countries.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>jaspervdj/patat</title>
    <updated>2023-10-22T01:52:57Z</updated>
    <id>tag:github.com,2023-10-22:/jaspervdj/patat</id>
    <link href="https://github.com/jaspervdj/patat" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Terminal-based presentations using Pandoc&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;🥔 patat&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/jaspervdj/patat/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt; &lt;a href=&#34;https://hackage.haskell.org/package/patat&#34;&gt;&lt;img src=&#34;https://img.shields.io/hackage/v/patat.svg?sanitize=true&#34; alt=&#34;Hackage&#34;&gt;&lt;/a&gt; &lt;a href=&#34;&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/tag/jaspervdj/patat.svg?sanitize=true&#34; alt=&#34;GitHub tag&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;patat&lt;/code&gt; (&lt;strong&gt;P&lt;/strong&gt;resentations &lt;strong&gt;A&lt;/strong&gt;top &lt;strong&gt;T&lt;/strong&gt;he &lt;strong&gt;A&lt;/strong&gt;NSI &lt;strong&gt;T&lt;/strong&gt;erminal) is a feature-rich presentation tool that runs in the terminal.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Understands most markdown extensions and many other input formats (rST, Org-mode...) by building on top of &lt;a href=&#34;http://pandoc.org/&#34;&gt;Pandoc&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jaspervdj/patat/main/#evaluating-code&#34;&gt;Evaluate code snippets and show the result&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Syntax highlighting for nearly one hundred languages generated from &lt;a href=&#34;https://kate-editor.org/&#34;&gt;Kate&lt;/a&gt; syntax files.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jaspervdj/patat/main/#running&#34;&gt;Automatically reload&lt;/a&gt; your slides as you edit them.&lt;/li&gt; &#xA; &lt;li&gt;Display &lt;a href=&#34;https://raw.githubusercontent.com/jaspervdj/patat/main/#speaker-notes&#34;&gt;speaker notes&lt;/a&gt; in a second window or monitor.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jaspervdj/patat/main/#fragmented-slides&#34;&gt;Incremental slide display&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Experimental &lt;a href=&#34;https://raw.githubusercontent.com/jaspervdj/patat/main/#images&#34;&gt;images&lt;/a&gt; support.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jaspervdj/patat/main/#transitions&#34;&gt;Transition effects&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Supports &lt;a href=&#34;https://raw.githubusercontent.com/jaspervdj/patat/main/#input-format&#34;&gt;smart slide splitting&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jaspervdj/patat/main/#auto-advancing&#34;&gt;Auto advancing&lt;/a&gt; with configurable delay.&lt;/li&gt; &#xA; &lt;li&gt;Optionally &lt;a href=&#34;https://raw.githubusercontent.com/jaspervdj/patat/main/#line-wrapping&#34;&gt;re-wrapping&lt;/a&gt; text to terminal width with proper indentation.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jaspervdj/patat/main/#theming&#34;&gt;Theming&lt;/a&gt; support including 24-bit RGB.&lt;/li&gt; &#xA; &lt;li&gt;Hihgly portable as it only requires an ANSI terminal as opposed to something like &lt;code&gt;ncurses&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jaspervdj/patat/main/extra/demo.gif?raw=true&#34; alt=&#34;screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jaspervdj/patat/main/#table-of-contents&#34;&gt;Table of Contents&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jaspervdj/patat/main/#installation&#34;&gt;Installation&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jaspervdj/patat/main/#pre-built-packages&#34;&gt;Pre-built-packages&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jaspervdj/patat/main/#homebrew&#34;&gt;Homebrew&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jaspervdj/patat/main/#from-source&#34;&gt;From source&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jaspervdj/patat/main/#running&#34;&gt;Running&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jaspervdj/patat/main/#options&#34;&gt;Options&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jaspervdj/patat/main/#controls&#34;&gt;Controls&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jaspervdj/patat/main/#input-format&#34;&gt;Input format&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jaspervdj/patat/main/#configuration&#34;&gt;Configuration&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jaspervdj/patat/main/#line-wrapping&#34;&gt;Line wrapping&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jaspervdj/patat/main/#margins&#34;&gt;Margins&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jaspervdj/patat/main/#auto-advancing&#34;&gt;Auto advancing&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jaspervdj/patat/main/#advanced-slide-splitting&#34;&gt;Advanced slide splitting&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jaspervdj/patat/main/#fragmented-slides&#34;&gt;Fragmented slides&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jaspervdj/patat/main/#theming&#34;&gt;Theming&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jaspervdj/patat/main/#syntax-highlighting&#34;&gt;Syntax Highlighting&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jaspervdj/patat/main/#pandoc-extensions&#34;&gt;Pandoc Extensions&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jaspervdj/patat/main/#images&#34;&gt;Images&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jaspervdj/patat/main/#breadcrumbs&#34;&gt;Breadcrumbs&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jaspervdj/patat/main/#slide-numbers&#34;&gt;Slide numbers&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jaspervdj/patat/main/#evaluating-code&#34;&gt;Evaluating code&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jaspervdj/patat/main/#speaker-notes&#34;&gt;Speaker notes&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jaspervdj/patat/main/#transitions&#34;&gt;Transitions&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jaspervdj/patat/main/#trivia&#34;&gt;Trivia&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Pre-built-packages&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Archlinux: &lt;a href=&#34;https://aur.archlinux.org/packages/patat-bin&#34;&gt;https://aur.archlinux.org/packages/patat-bin&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Debian: &lt;a href=&#34;https://packages.debian.org/unstable/patat&#34;&gt;https://packages.debian.org/unstable/patat&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Ubuntu: &lt;a href=&#34;https://packages.ubuntu.com/bionic/patat&#34;&gt;https://packages.ubuntu.com/bionic/patat&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;openSUSE: &lt;a href=&#34;https://build.opensuse.org/package/show/openSUSE:Factory:ARM/patat&#34;&gt;https://build.opensuse.org/package/show/openSUSE:Factory:ARM/patat&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Fedora: &lt;a href=&#34;https://src.fedoraproject.org/rpms/patat&#34;&gt;https://src.fedoraproject.org/rpms/patat&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;NixOS: &lt;a href=&#34;https://search.nixos.org/packages?show=haskellPackages.patat&#34;&gt;https://search.nixos.org/packages?show=haskellPackages.patat&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can also find generic Linux and Mac OS binaries here: &lt;a href=&#34;https://github.com/jaspervdj/patat/releases&#34;&gt;https://github.com/jaspervdj/patat/releases&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Homebrew&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://brew.sh/&#34;&gt;Homebrew&lt;/a&gt; packages are offered by a &lt;a href=&#34;https://github.com/nicholasdille/homebrew-tap&#34;&gt;third-party repository&lt;/a&gt;. &lt;strong&gt;Unfortunately this repo has been archived, and the latest version that can be installed from there is v0.8.7.0&lt;/strong&gt;. If you would like to contribute here, please contact us by opening an issue.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Run &lt;code&gt;brew tap nicholasdille/tap&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;brew install patat-bin&lt;/code&gt; to receive the official binaries or &lt;code&gt;brew install patat&lt;/code&gt; for pre-built (&#34;bottled&#34;) binaries.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;From source&lt;/h3&gt; &#xA;&lt;p&gt;Installation from source is very easy. You can build from source using &lt;code&gt;stack install&lt;/code&gt; or &lt;code&gt;cabal install&lt;/code&gt;. &lt;code&gt;patat&lt;/code&gt; is also available from &lt;a href=&#34;https://hackage.haskell.org/package/patat&#34;&gt;Hackage&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For people unfamiliar with the Haskell ecosystem, this means you can do either of the following:&lt;/p&gt; &#xA;&lt;h4&gt;Using stack&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install &lt;a href=&#34;https://docs.haskellstack.org/en/stable/README/&#34;&gt;stack&lt;/a&gt; for your platform.&lt;/li&gt; &#xA; &lt;li&gt;Clone this repository.&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;stack setup&lt;/code&gt; (if you&#39;re running stack for the first time) and &lt;code&gt;stack install&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Make sure &lt;code&gt;$HOME/.local/bin&lt;/code&gt; is in your &lt;code&gt;$PATH&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Using cabal&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install &lt;a href=&#34;https://www.haskell.org/cabal/&#34;&gt;cabal&lt;/a&gt; for your platform.&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;cabal install patat&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Make sure &lt;code&gt;$HOME/.cabal/bin&lt;/code&gt; is in your &lt;code&gt;$PATH&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Running&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;patat [*options*] file&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Options&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;-w&lt;/code&gt;, &lt;code&gt;--watch&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;: If you provide the &lt;code&gt;--watch&lt;/code&gt; flag, &lt;code&gt;patat&lt;/code&gt; will watch the presentation file for changes and reload automatically. This is very useful when you are writing the presentation.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;-f&lt;/code&gt;, &lt;code&gt;--force&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;: Run the presentation even if the terminal claims it does not support ANSI features.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;-d&lt;/code&gt;, &lt;code&gt;--dump&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;: Just dump all the slides to stdout. This is useful for debugging.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;--version&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;: Display version information.&lt;/p&gt; &#xA;&lt;h2&gt;Controls&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Next slide&lt;/strong&gt;: &lt;code&gt;space&lt;/code&gt;, &lt;code&gt;enter&lt;/code&gt;, &lt;code&gt;l&lt;/code&gt;, &lt;code&gt;→&lt;/code&gt;, &lt;code&gt;PageDown&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Previous slide&lt;/strong&gt;: &lt;code&gt;backspace&lt;/code&gt;, &lt;code&gt;h&lt;/code&gt;, &lt;code&gt;←&lt;/code&gt;, &lt;code&gt;PageUp&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Go forward 10 slides&lt;/strong&gt;: &lt;code&gt;j&lt;/code&gt;, &lt;code&gt;↓&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Go backward 10 slides&lt;/strong&gt;: &lt;code&gt;k&lt;/code&gt;, &lt;code&gt;↑&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;First slide&lt;/strong&gt;: &lt;code&gt;0&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Last slide&lt;/strong&gt;: &lt;code&gt;G&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Jump to slide N&lt;/strong&gt;: &lt;code&gt;N&lt;/code&gt; followed by &lt;code&gt;enter&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Reload file&lt;/strong&gt;: &lt;code&gt;r&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Quit&lt;/strong&gt;: &lt;code&gt;q&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The &lt;code&gt;r&lt;/code&gt; key is very useful since it allows you to preview your slides while you are writing them. You can also use this to fix artifacts when the terminal is resized.&lt;/p&gt; &#xA;&lt;h2&gt;Input format&lt;/h2&gt; &#xA;&lt;p&gt;The input format can be anything that Pandoc supports. Plain markdown is usually the most simple solution:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;---&#xA;title: This is my presentation&#xA;author: Jane Doe&#xA;...&#xA;&#xA;# This is a slide&#xA;&#xA;Slide contents.  Yay.&#xA;&#xA;---&#xA;&#xA;# Important title&#xA;&#xA;Things I like:&#xA;&#xA;- Markdown&#xA;- Haskell&#xA;- Pandoc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Horizontal rulers (&lt;code&gt;---&lt;/code&gt;) are used to split slides.&lt;/p&gt; &#xA;&lt;p&gt;However, if you prefer not use these since they are a bit intrusive in the markdown, you can also start every slide with a header. In that case, the file should not contain a single horizontal ruler.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;patat&lt;/code&gt; will pick the most deeply nested header (e.g. &lt;code&gt;h2&lt;/code&gt;) as the marker for a new slide. Headers &lt;em&gt;above&lt;/em&gt; the most deeply nested header (e.g. &lt;code&gt;h1&lt;/code&gt;) will turn into title slides, which are displayed as as a slide containing only the centered title.&lt;/p&gt; &#xA;&lt;p&gt;This means the following document is equivalent to the one we saw before:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;---&#xA;title: This is my presentation&#xA;author: Jane Doe&#xA;...&#xA;&#xA;# This is a slide&#xA;&#xA;Slide contents.  Yay.&#xA;&#xA;# Important title&#xA;&#xA;Things I like:&#xA;&#xA;- Markdown&#xA;- Haskell&#xA;- Pandoc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And that following document contains three slides: a title slide, followed by two content slides.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;---&#xA;title: This is my presentation&#xA;author: Jane Doe&#xA;...&#xA;&#xA;# Chapter 1&#xA;&#xA;## This is a slide&#xA;&#xA;Slide contents.  Yay.&#xA;&#xA;## Another slide&#xA;&#xA;Things I like:&#xA;&#xA;- Markdown&#xA;- Haskell&#xA;- Pandoc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more information, see &lt;a href=&#34;https://raw.githubusercontent.com/jaspervdj/patat/main/#advanced-slide-splitting&#34;&gt;Advanced slide splitting&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;patat&lt;/code&gt; is fairly configurable. The configuration is done using &lt;a href=&#34;http://yaml.org/&#34;&gt;YAML&lt;/a&gt;. There are several places where you can put your configuration.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;For per-user configuration you can use &lt;code&gt;$XDG_CONFIG_DIRECTORY/patat/config.yaml&lt;/code&gt; (typically &lt;code&gt;$HOME/.config/patat/config.yaml&lt;/code&gt;) or &lt;code&gt;$HOME/.patat.yaml&lt;/code&gt;, for example:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;slideNumber: false&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;In the presentation file itself, using the &lt;a href=&#34;http://pandoc.org/MANUAL.html#extension-yaml_metadata_block&#34;&gt;Pandoc metadata header&lt;/a&gt;. These settings take precedence over anything specified in the per-user configuration file. They must be placed in a &lt;code&gt;patat:&lt;/code&gt; section, so they don&#39;t conflict with metadata:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;---&#xA;title: Presentation with options&#xA;author: John Doe&#xA;patat:&#xA;    slideNumber: false&#xA;...&#xA;&#xA;Hello world.&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Within a slide, using a comment starting with &lt;code&gt;&amp;lt;!--config:&lt;/code&gt;. These settings can override configuration for that specific slide only. There should not be any whitespace between &lt;code&gt;&amp;lt;!--&lt;/code&gt; and &lt;code&gt;config:&lt;/code&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;# First slide&#xA;&#xA;Slide numbers are turned on here.&#xA;&#xA;# Second slide&#xA;&#xA;&amp;lt;!--config:&#xA;slideNumber: false&#xA;--&amp;gt;&#xA;&#xA;Slide numbers are turned off here.&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The following settings can &lt;strong&gt;not&lt;/strong&gt; be set in a slide configuration block, and doing so will result in an error:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;autoAdvanceDelay&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;eval&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;images&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;incrementalLists&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;pandocExtensions&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;slideLevel&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;speakerNotes&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Line wrapping&lt;/h3&gt; &#xA;&lt;p&gt;Line wrapping can be enabled by setting &lt;code&gt;wrap: true&lt;/code&gt; in the configuration. This will re-wrap all lines to fit the terminal width better.&lt;/p&gt; &#xA;&lt;h3&gt;Margins&lt;/h3&gt; &#xA;&lt;p&gt;Margins can be enabled by setting a &lt;code&gt;margins&lt;/code&gt; entry in the configuration:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;---&#xA;title: Presentation with margins&#xA;author: John Doe&#xA;patat:&#xA;    wrap: true&#xA;    margins:&#xA;        left: 10&#xA;        right: 10&#xA;        top: 5&#xA;...&#xA;&#xA;Lorem ipsum dolor sit amet, ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This example configuration will generate slides with a margin of 10 columns on the left, and it will wrap long lines 10 columns before the right side of the terminal. Additionally, there will be 5 empty lines in between the title bar and slide content.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jaspervdj/patat/main/#line-wrapping&#34;&gt;Line wrapping&lt;/a&gt; should be enabled when using non-zero &lt;code&gt;right&lt;/code&gt; margin.&lt;/p&gt; &#xA;&lt;p&gt;By default, the &lt;code&gt;left&lt;/code&gt; and &lt;code&gt;right&lt;/code&gt; margin are set to 0, and the &lt;code&gt;top&lt;/code&gt; margin is set to 1.&lt;/p&gt; &#xA;&lt;h3&gt;Auto advancing&lt;/h3&gt; &#xA;&lt;p&gt;By setting &lt;code&gt;autoAdvanceDelay&lt;/code&gt; to a number of seconds, &lt;code&gt;patat&lt;/code&gt; will automatically advance to the next slide.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;---&#xA;title: Auto-advance, yes please&#xA;author: John Doe&#xA;patat:&#xA;    autoAdvanceDelay: 2&#xA;...&#xA;&#xA;Hello World!&#xA;&#xA;---&#xA;&#xA;This slide will be shown two seconds after the presentation starts.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that changes to &lt;code&gt;autoAdvanceDelay&lt;/code&gt; are not picked up automatically if you are running &lt;code&gt;patat --watch&lt;/code&gt;. This requires restarting &lt;code&gt;patat&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Advanced slide splitting&lt;/h3&gt; &#xA;&lt;p&gt;You can control the way slide splitting works by setting the &lt;code&gt;slideLevel&lt;/code&gt; variable. This variable defaults to the least header that occurs before a non-header, but it can also be explicitly defined. For example, in the following document, the &lt;code&gt;slideLevel&lt;/code&gt; defaults to &lt;strong&gt;2&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;# This is a slide&#xA;&#xA;## This is a nested header&#xA;&#xA;This is some content&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With &lt;code&gt;slideLevel&lt;/code&gt; 2, the &lt;code&gt;h1&lt;/code&gt; will turn into a &#34;title slide&#34;, and the &lt;code&gt;h2&lt;/code&gt; will be displayed at the top of the second slide. We can customize this by setting &lt;code&gt;slideLevel&lt;/code&gt; manually:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;---&#xA;patat:&#xA;  slideLevel: 1&#xA;...&#xA;&#xA;# This is a slide&#xA;&#xA;## This is a nested header&#xA;&#xA;This is some content&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now, we will only see one slide, which contains a nested header.&lt;/p&gt; &#xA;&lt;h3&gt;Fragmented slides&lt;/h3&gt; &#xA;&lt;p&gt;By default, slides are always displayed &#34;all at once&#34;. If you want to display them fragment by fragment, there are two ways to do that. The most common case is that lists should be displayed incrementally.&lt;/p&gt; &#xA;&lt;p&gt;This can be configured by settings &lt;code&gt;incrementalLists&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; in the metadata block:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;---&#xA;title: Presentation with incremental lists&#xA;author: John Doe&#xA;patat:&#xA;    incrementalLists: true&#xA;...&#xA;&#xA;- This list&#xA;- is displayed&#xA;- item by item&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Setting &lt;code&gt;incrementalLists&lt;/code&gt; works on &lt;em&gt;all&lt;/em&gt; lists in the presentation. To flip the setting for a specific list, wrap it in a block quote. This will make the list incremental if &lt;code&gt;incrementalLists&lt;/code&gt; is not set, and it will display the list all at once if &lt;code&gt;incrementalLists&lt;/code&gt; is set to &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This example contains a sublist which is also displayed incrementally, and then a sublist which is displayed all at once (by merit of the block quote).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;---&#xA;title: Presentation with incremental lists&#xA;author: John Doe&#xA;patat:&#xA;    incrementalLists: true&#xA;...&#xA;&#xA;- This list&#xA;- is displayed&#xA;&#xA;    * item&#xA;    * by item&#xA;&#xA;- Or sometimes&#xA;&#xA;    &amp;gt; * all at&#xA;    &amp;gt; * once&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Another way to break up slides is to use a pagraph only containing three dots separated by spaces. For example, this slide has two pauses:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;Legen&#xA;&#xA;. . .&#xA;&#xA;wait for it&#xA;&#xA;. . .&#xA;&#xA;Dary!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Theming&lt;/h3&gt; &#xA;&lt;p&gt;Colors and other properties can also be changed using this configuration. For example, we can have:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;---&#xA;author: &#39;Jasper Van der Jeugt&#39;&#xA;title: &#39;This is a test&#39;&#xA;patat:&#xA;    wrap: true&#xA;    theme:&#xA;        emph: [vividBlue, onVividBlack, italic]&#xA;        strong: [bold]&#xA;        imageTarget: [onDullWhite, vividRed]&#xA;...&#xA;&#xA;# This is a presentation&#xA;&#xA;This is _emph_ text.&#xA;&#xA;![Hello](foo.png)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The properties that can be given a list of styles are:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;blockQuote&lt;/code&gt;, &lt;code&gt;borders&lt;/code&gt;, &lt;code&gt;bulletList&lt;/code&gt;, &lt;code&gt;codeBlock&lt;/code&gt;, &lt;code&gt;code&lt;/code&gt;, &lt;code&gt;definitionList&lt;/code&gt;, &lt;code&gt;definitionTerm&lt;/code&gt;, &lt;code&gt;emph&lt;/code&gt;, &lt;code&gt;header&lt;/code&gt;, &lt;code&gt;imageTarget&lt;/code&gt;, &lt;code&gt;imageText&lt;/code&gt;, &lt;code&gt;linkTarget&lt;/code&gt;, &lt;code&gt;linkText&lt;/code&gt;, &lt;code&gt;math&lt;/code&gt;, &lt;code&gt;orderedList&lt;/code&gt;, &lt;code&gt;quoted&lt;/code&gt;, &lt;code&gt;strikeout&lt;/code&gt;, &lt;code&gt;strong&lt;/code&gt;, &lt;code&gt;tableHeader&lt;/code&gt;, &lt;code&gt;tableSeparator&lt;/code&gt;, &lt;code&gt;underline&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;The accepted styles are:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;bold&lt;/code&gt;, &lt;code&gt;italic&lt;/code&gt;, &lt;code&gt;dullBlack&lt;/code&gt;, &lt;code&gt;dullBlue&lt;/code&gt;, &lt;code&gt;dullCyan&lt;/code&gt;, &lt;code&gt;dullGreen&lt;/code&gt;, &lt;code&gt;dullMagenta&lt;/code&gt;, &lt;code&gt;dullRed&lt;/code&gt;, &lt;code&gt;dullWhite&lt;/code&gt;, &lt;code&gt;dullYellow&lt;/code&gt;, &lt;code&gt;onDullBlack&lt;/code&gt;, &lt;code&gt;onDullBlue&lt;/code&gt;, &lt;code&gt;onDullCyan&lt;/code&gt;, &lt;code&gt;onDullGreen&lt;/code&gt;, &lt;code&gt;onDullMagenta&lt;/code&gt;, &lt;code&gt;onDullRed&lt;/code&gt;, &lt;code&gt;onDullWhite&lt;/code&gt;, &lt;code&gt;onDullYellow&lt;/code&gt;, &lt;code&gt;onVividBlack&lt;/code&gt;, &lt;code&gt;onVividBlue&lt;/code&gt;, &lt;code&gt;onVividCyan&lt;/code&gt;, &lt;code&gt;onVividGreen&lt;/code&gt;, &lt;code&gt;onVividMagenta&lt;/code&gt;, &lt;code&gt;onVividRed&lt;/code&gt;, &lt;code&gt;onVividWhite&lt;/code&gt;, &lt;code&gt;onVividYellow&lt;/code&gt;, &lt;code&gt;underline&lt;/code&gt;, &lt;code&gt;vividBlack&lt;/code&gt;, &lt;code&gt;vividBlue&lt;/code&gt;, &lt;code&gt;vividCyan&lt;/code&gt;, &lt;code&gt;vividGreen&lt;/code&gt;, &lt;code&gt;vividMagenta&lt;/code&gt;, &lt;code&gt;vividRed&lt;/code&gt;, &lt;code&gt;vividWhite&lt;/code&gt;, &lt;code&gt;vividYellow&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Also accepted are styles of the form &lt;code&gt;rgb#RrGgBb&lt;/code&gt; and &lt;code&gt;onRgb#RrGgBb&lt;/code&gt;, where &lt;code&gt;Rr&lt;/code&gt; &lt;code&gt;Gg&lt;/code&gt; and &lt;code&gt;Bb&lt;/code&gt; are hexadecimal bytes (e.g. &lt;code&gt;rgb#f08000&lt;/code&gt; for an orange foreground, and &lt;code&gt;onRgb#101060&lt;/code&gt; for a deep purple background). Naturally, your terminal needs to support 24-bit RGB for this to work. When creating portable presentations, it might be better to stick with the named colours listed above.&lt;/p&gt; &#xA;&lt;h3&gt;Syntax Highlighting&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;patat&lt;/code&gt; uses &lt;a href=&#34;https://kate-editor.org/&#34;&gt;Kate&lt;/a&gt; Syntax Highlighting files. &lt;code&gt;patat&lt;/code&gt; ships with support for nearly one hundred languages thanks to Pandoc. However, if your language is not yet available, you can add the highlighting XML file in the settings:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;---&#xA;patat:&#xA;  syntaxDefinitions:&#xA;  - &#39;impurescript.xml&#39;&#xA;...&#xA;&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;As part of theming, syntax highlighting is also configurable. This can be configured like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;---&#xA;patat:&#xA;  theme:&#xA;    syntaxHighlighting:&#xA;      decVal: [bold, onDullRed]&#xA;...&#xA;&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;decVal&lt;/code&gt; refers to &#34;decimal values&#34;. This is known as a &#34;token type&#34;. For a full list of token types, see &lt;a href=&#34;https://hackage.haskell.org/package/highlighting-kate-0.6.3/docs/Text-Highlighting-Kate-Types.html#t:TokenType&#34;&gt;this list&lt;/a&gt; -- the names are derived from there in an obvious way.&lt;/p&gt; &#xA;&lt;p&gt;Note that in order to get syntax highlighting to work, you should annotate code blocks with the language, e.g. using a fenced code block:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;```ruby&#xA;puts &#34;Hello, world!&#34;&#xA;```&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Pandoc Extensions&lt;/h3&gt; &#xA;&lt;p&gt;Pandoc comes with a fair number of extensions on top of markdown, listed &lt;a href=&#34;https://hackage.haskell.org/package/pandoc-2.0.5/docs/Text-Pandoc-Extensions.html&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;patat&lt;/code&gt; enables a number of them by default, but this is also customizable.&lt;/p&gt; &#xA;&lt;p&gt;In order to enable an additional extensions, e.g. &lt;code&gt;autolink_bare_uris&lt;/code&gt;, add it to the &lt;code&gt;pandocExtensions&lt;/code&gt; field in the YAML metadata:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;---&#xA;patat:&#xA;  pandocExtensions:&#xA;    - patat_extensions&#xA;    - autolink_bare_uris&#xA;...&#xA;&#xA;Document content...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;patat_extensions&lt;/code&gt; in the above snippet refers to the default set of extensions enabled by &lt;code&gt;patat&lt;/code&gt;. If you want to disable those and only use a select few extensions, simply leave it out and choose your own:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;---&#xA;patat:&#xA;  pandocExtensions:&#xA;    - autolink_bare_uris&#xA;    - emoji&#xA;...&#xA;&#xA;Document content...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you don&#39;t want to enable any extensions, simply set &lt;code&gt;pandocExtensions&lt;/code&gt; to the empty list &lt;code&gt;[]&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Images&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;patat-0.8.0.0&lt;/code&gt; and newer include images support for some terminal emulators.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;---&#xA;patat:&#xA;  images:&#xA;    backend: auto&#xA;...&#xA;&#xA;# A slide with only an image.&#xA;&#xA;![](matterhorn.jpg)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;patat&lt;/code&gt; can display full-size images on slides. For this to work &lt;code&gt;images&lt;/code&gt; must be enabled in the configuration and the slide needs to contain only a single image and no other content. The image will be centered and resized to fit the terminal window.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;images&lt;/code&gt; is off by default in the configuration.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;patat&lt;/code&gt; supports the following image drawing backends:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;backend: iterm2&lt;/code&gt;: uses &lt;a href=&#34;https://iterm2.com/&#34;&gt;iTerm2&lt;/a&gt;&#39;s special escape sequence to render the image. This even works with animated GIFs!&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;backend: kitty&lt;/code&gt;: uses &lt;a href=&#34;https://sw.kovidgoyal.net/kitty/kittens/icat.html&#34;&gt;Kitty&#39;s icat command&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;backend: w3m&lt;/code&gt;: uses the &lt;code&gt;w3mimgdisplay&lt;/code&gt; executable to draw directly onto the window. This has been tested in &lt;code&gt;urxvt&lt;/code&gt; and &lt;code&gt;xterm&lt;/code&gt;, but is known to produce weird results in &lt;code&gt;tmux&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;If &lt;code&gt;w3mimgdisplay&lt;/code&gt; is in a non-standard location, you can specify that using &lt;code&gt;path&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;backend: &#39;w3m&#39;&#xA;path: &#39;/home/jasper/.local/bin/w3mimgdisplay&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Breadcrumbs&lt;/h3&gt; &#xA;&lt;p&gt;By default, &lt;code&gt;patat&lt;/code&gt; will print a breadcrumbs-style header, e.g.:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;example.md &amp;gt; This is a title &amp;gt; This is a subtitle&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This feature can be turned off by using:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;patat:&#xA;  breadcrumbs: false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Slide numbers&lt;/h3&gt; &#xA;&lt;p&gt;By default, &lt;code&gt;patat&lt;/code&gt; will display slide number in bottom-right corner&lt;/p&gt; &#xA;&lt;p&gt;This feature can be turned off by using:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;patat:&#xA;  slideNumber: false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Evaluating code&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;patat&lt;/code&gt; can evaluate code blocks and show the result. You can register an &lt;em&gt;evaluator&lt;/em&gt; by specifying this in the YAML metadata:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;---&#xA;patat:&#xA;  eval:&#xA;    ruby:&#xA;      command: irb --noecho --noverbose&#xA;      fragment: true  # Optional&#xA;      replace: false  # Optional&#xA;...&#xA;&#xA;Here is an example of a code block that is evaluated:&#xA;&#xA;```ruby&#xA;puts &#34;Hi&#34;&#xA;```&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;An arbitrary amount of evaluators can be specified, and whenever a a class attribute on a code block matches the evaluator, it will be used.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note that executing arbitrary code is always dangerous&lt;/strong&gt;, so double check the code of presentations downloaded from the internet before running them if they contain &lt;code&gt;eval&lt;/code&gt; settings.&lt;/p&gt; &#xA;&lt;p&gt;Aside from the command, there are two more options:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;fragment&lt;/code&gt;: Introduce a pause (see &lt;a href=&#34;https://raw.githubusercontent.com/jaspervdj/patat/main/#fragmented-slides&#34;&gt;fragments&lt;/a&gt;) in between showing the original code block and the output. Defaults to &lt;code&gt;true&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;replace&lt;/code&gt;: Remove the original code block and replace it with the output rather than appending the output in a new code block. Defaults to &lt;code&gt;false&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Setting &lt;code&gt;fragment: false&lt;/code&gt; and &lt;code&gt;replace: true&lt;/code&gt; offers a way to &#34;filter&#34; code blocks, which can be used to render ASCII graphics.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;---&#xA;patat:&#xA;  eval:&#xA;    figlet:&#xA;      command: figlet&#xA;      fragment: false&#xA;      replace: true&#xA;...&#xA;&#xA;```figlet&#xA;Fancy Font&#xA;```&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This feature works by simply by:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Spawn a process with the provided command&lt;/li&gt; &#xA; &lt;li&gt;Write the contents of the code block to the &lt;code&gt;stdin&lt;/code&gt; of the process&lt;/li&gt; &#xA; &lt;li&gt;Wait for the process to exit&lt;/li&gt; &#xA; &lt;li&gt;Render the &lt;code&gt;stdout&lt;/code&gt; of the process&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Speaker Notes&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;patat&lt;/code&gt; supports comments which can be used as speaker notes.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;---&#xA;title: This is my presentation&#xA;author: Jane Doe&#xA;...&#xA;&#xA;# Chapter 1&#xA;&#xA;&amp;lt;!--&#xA;Note: I should not bore the audience with my thoughts on powerpoint but&#xA;just get straight to the point.&#xA;--&amp;gt;&#xA;&#xA;Slide contents.  Yay.&#xA;&#xA;&amp;lt;!-- TODO: Finish the rest of the presentation. --&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also configure &lt;code&gt;patat&lt;/code&gt; to write the speaker notes for the current slide to a file whenever the slide changes:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;patat:&#xA;  speakerNotes:&#xA;    file: /tmp/notes.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, you can display these in a second terminal (presumably on a second monitor) by just displaying this file whenever it changes. &lt;a href=&#34;http://eradman.com/entrproject/&#34;&gt;entr&lt;/a&gt; is one way to do that:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;echo /tmp/notes.txt | entr -s &#39;clear; cat /tmp/notes.txt&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, just use a second &lt;code&gt;patat&lt;/code&gt; instance with &lt;code&gt;--watch&lt;/code&gt; enabled:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;patat -w /tmp/notes.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that speaker notes should not start with &lt;code&gt;&amp;lt;!--config:&lt;/code&gt;, since then they will be parsed as &lt;a href=&#34;https://raw.githubusercontent.com/jaspervdj/patat/main/#configuration&#34;&gt;configuration&lt;/a&gt; blocks. They are allowed to start with &lt;code&gt;&amp;lt;!-- config:&lt;/code&gt;; the lack of whitespace matters.&lt;/p&gt; &#xA;&lt;h3&gt;Transitions&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;patat&lt;/code&gt; supports transitions in between slides. A relatively fast terminal emulator (e.g. &lt;a href=&#34;https://alacritty.org/&#34;&gt;Alacritty&lt;/a&gt;, &lt;a href=&#34;https://sw.kovidgoyal.net/kitty/&#34;&gt;Kitty&lt;/a&gt;, &lt;a href=&#34;https://iterm2.com/&#34;&gt;iTerm2&lt;/a&gt;) is suggested when enabling this, to avoid too much flickering -- some flickering is unavoidable since we redraw the entire screen on each frame.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;patat:&#xA;  transition:&#xA;    type: slideLeft&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To set transitions on specific slides, use &lt;code&gt;&amp;lt;!--config:&lt;/code&gt; blocks, as detailed in the &lt;a href=&#34;https://raw.githubusercontent.com/jaspervdj/patat/main/#configuration&#34;&gt;configuration section&lt;/a&gt;. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;# Slide one&#xA;&#xA;Slide one content.&#xA;&#xA;# Slide two&#xA;&#xA;&amp;lt;!--config:&#xA;transition:&#xA;  type: slideLeft&#xA;  duration: 2&#xA;--&amp;gt;&#xA;&#xA;Slide two content.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Supported transitions &lt;code&gt;type&lt;/code&gt;s:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;slideLeft&lt;/code&gt;: slides the new slide in from right to left.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;dissolve&lt;/code&gt;: changes characters over time.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;All transitions currently take these arguments:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;frameRate&lt;/code&gt;: number of frames per second. Defaults to 24.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;duration&lt;/code&gt;: duration of the animation in seconds. Defaults to 1.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Random transitions&lt;/h4&gt; &#xA;&lt;p&gt;You can set &lt;code&gt;type&lt;/code&gt; to &lt;code&gt;random&lt;/code&gt; to randomly pick a transition effect.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;patat:&#xA;  transition:&#xA;    type: random&#xA;    items:&#xA;    - type: dissolve&#xA;      duration: 3&#xA;    - type: slideLeft&#xA;      frameRate: 10&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can optionally set &lt;code&gt;items&lt;/code&gt; to a non-empty list of transition effects to randomly sample from. If &lt;code&gt;items&lt;/code&gt; is not set, &lt;code&gt;patat&lt;/code&gt; will simply sample from all transition effects using their respective default settings.&lt;/p&gt; &#xA;&lt;h2&gt;Trivia&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;&#34;Patat&#34;&lt;/em&gt; is the Flemish word for a simple potato. Dutch people also use it to refer to French Fries but I don&#39;t really do that -- in Belgium we just call fries &lt;em&gt;&#34;Frieten&#34;&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The idea of &lt;code&gt;patat&lt;/code&gt; is largely based upon &lt;a href=&#34;https://github.com/visit1985/mdp&#34;&gt;MDP&lt;/a&gt; which is in turn based upon &lt;a href=&#34;https://github.com/jclulow/vtmc&#34;&gt;VTMC&lt;/a&gt;. I wanted to write a clone using Pandoc because I ran into a markdown parsing bug in MDP which I could not work around. A second reason to do a Pandoc-based tool was that I would be able to use &lt;a href=&#34;https://wiki.haskell.org/Literate_programming&#34;&gt;Literate Haskell&lt;/a&gt; as well. Lastly, I also prefer not to install Node.js on my machine if I can avoid it.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>kawu/crf-chain1-constrained</title>
    <updated>2023-10-22T01:52:57Z</updated>
    <id>tag:github.com,2023-10-22:/kawu/crf-chain1-constrained</id>
    <link href="https://github.com/kawu/crf-chain1-constrained" rel="alternate"></link>
    <summary type="html">&lt;p&gt;First-order, linear-chain conditional random fields with position-wise constraints over label values&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;crf-chain1-constrained&lt;/h1&gt; &#xA;&lt;p&gt;The library implements first-order, linear-chain conditional random fields with position-wise constraints over label values.&lt;/p&gt;</summary>
  </entry>
</feed>