<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Haskell Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-12-17T01:55:21Z</updated>
  <subtitle>Weekly Trending of Haskell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>vrthra/markdown-ieee-pdf</title>
    <updated>2023-12-17T01:55:21Z</updated>
    <id>tag:github.com,2023-12-17:/vrthra/markdown-ieee-pdf</id>
    <link href="https://github.com/vrthra/markdown-ieee-pdf" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A skeletal project to convert a paper written in markdown format to IEEE style paper submission in pdf.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;README&lt;/h1&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;This repository contains materials to generate a paper in pdf in ieee standard.&lt;/p&gt; &#xA;&lt;h2&gt;Layout&lt;/h2&gt; &#xA;&lt;h3&gt;src&lt;/h3&gt; &#xA;&lt;p&gt;This directory contains the source code in &lt;a href=&#34;http://johnmacfarlane.net/pandoc/&#34;&gt;pandoc&lt;/a&gt; markdown wiki format.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;src/paper.md The paper itself in markdown.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;src/read.md The references used in the paper.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;src/meta The meta information such as title, author etc.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;src/req The ieee format specific files for generating pdf from pandoc markdown.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;build&lt;/h3&gt; &#xA;&lt;p&gt;This directory contains the generated pdf output.&lt;/p&gt; &#xA;&lt;h2&gt;Building&lt;/h2&gt; &#xA;&lt;h3&gt;Requirements&lt;/h3&gt; &#xA;&lt;p&gt;You will need pandoc to process the files. If pdf generation is intented, pandoc internally uses latex to generate the pdf files.&lt;/p&gt; &#xA;&lt;p&gt;If you are on ubuntu, these can be accomplished with&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;sudo apt-get install pandoc&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;sudo apt-get install texlive-full&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Generate&lt;/h3&gt; &#xA;&lt;p&gt;Run &#34;make&#34; from the top directory to generate build/ieee_jrnl.pdf&lt;/p&gt; &#xA;&lt;h3&gt;Settings&lt;/h3&gt; &#xA;&lt;p&gt;Ensure that these are run in your terminal.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;git config --global diff.tool vimdiff git config --global difftool.prompt false git config --global alias.d difftool&lt;/p&gt; &#xA;&lt;/blockquote&gt;</summary>
  </entry>
  <entry>
    <title>IntersectMBO/cardano-db-sync</title>
    <updated>2023-12-17T01:55:21Z</updated>
    <id>tag:github.com,2023-12-17:/IntersectMBO/cardano-db-sync</id>
    <link href="https://github.com/IntersectMBO/cardano-db-sync" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A component that follows the Cardano chain and stores blocks and transactions in PostgreSQL&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Cardano DB Sync&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Anyone wishing to build and run anything in this repository should avoid the &lt;code&gt;master&lt;/code&gt; branch and build/run from the latest release tag.&lt;/p&gt; &#xA;&lt;h2&gt;Purpose&lt;/h2&gt; &#xA;&lt;p&gt;The purpose of Cardano DB Sync is to follow the Cardano chain and take information from the chain and an internally maintained copy of ledger state. Data is then extracted from the chain and inserted into a PostgreSQL database. SQL queries can then be written directly against the database schema or as queries embedded in any language with libraries for interacting with an SQL database.&lt;/p&gt; &#xA;&lt;p&gt;Examples of what someone would be able to do via an SQL query against a Cardano DB Sync instance fully synced to a specific network is:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Look up any block, transaction, address, stake pool etc on that network, usually by the hash that identifies that item or the index into another table.&lt;/li&gt; &#xA; &lt;li&gt;Look up the balance of any stake address for any Shelley or later epoch.&lt;/li&gt; &#xA; &lt;li&gt;Look up the amount of ADA delegated to each pool for any Shelley or later epoch.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Example SQL queries are available at &lt;a href=&#34;https://raw.githubusercontent.com/IntersectMBO/cardano-db-sync/master/doc/interesting-queries.md&#34;&gt;Example Queries&lt;/a&gt;. You can also find some &lt;a href=&#34;https://docs.cardano.org/cardano-components/cardano-db-sync/best-practices&#34;&gt;DB Sync best practices here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Architecture&lt;/h2&gt; &#xA;&lt;p&gt;The cardano-db-sync component consists of a set of components:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;cardano-db&lt;/code&gt; which defines common data types and functions used by any application that needs to interact with the data base from Haskell. In particular, it defines the database schema.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cardano-db-tool&lt;/code&gt; a tool used to manage the databases of cardano-db-sync (create and run migrations, validate and analyse)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cardano-db-sync&lt;/code&gt; which acts as a Cardano node, following the chain and inserting data from the chain into a PostgreSQL database.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The db-sync node is written in a highly modular fashion to allow it to be as flexible as possible.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;cardano-db-sync&lt;/code&gt; node connects to a locally running &lt;code&gt;cardano-node&lt;/code&gt; (ie one connected to other nodes in the Cardano network over the internet with TCP/IP) using a Unix domain socket, retrieves blocks, updates its internal ledger state and stores parts of each block in a local PostgreSQL database. The database does not store things like cryptographic signatures but does store enough information to follow the chain of blocks and look at the transactions within blocks.&lt;/p&gt; &#xA;&lt;p&gt;The PostgreSQL database is designed to be accessed in a read-only fashion from other applications. The database schema is highly normalised which helps prevent data inconsistencies (specifically with the use of foreign keys from one table to another). More user friendly database queries can be implemented using &lt;a href=&#34;https://www.postgresql.org/docs/current/sql-createview.html&#34;&gt;Postgres Views&lt;/a&gt; to implement joins between tables.&lt;/p&gt; &#xA;&lt;h2&gt;System Requirements&lt;/h2&gt; &#xA;&lt;p&gt;The system requirements for &lt;code&gt;cardano-db-sync&lt;/code&gt; (with both &lt;code&gt;db-sync&lt;/code&gt; and the &lt;code&gt;node&lt;/code&gt; running on the same machine are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Any of the big well known Linux distributions (eg, Debian, Ubuntu, RHEL, CentOS, Arch etc).&lt;/li&gt; &#xA; &lt;li&gt;32 Gigabytes of RAM or more.&lt;/li&gt; &#xA; &lt;li&gt;4 CPU cores or more.&lt;/li&gt; &#xA; &lt;li&gt;Ensure that the machine has sufficient IOPS (Input/Output Operations per Second). Ie it should be 60k IOPS or better. Lower IOPS ratings will result in slower sync times and/or falling behind the chain tip.&lt;/li&gt; &#xA; &lt;li&gt;320 Gigabytes or more of disk storage (preferably SSD which are 2-5 times faster than electro-mechanical disks).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The recommended configuration is to have the &lt;code&gt;db-sync&lt;/code&gt; and the PostgreSQL server on the same machine. During syncing (getting historical data from the blockchain) there is a &lt;strong&gt;HUGE&lt;/strong&gt; amount of data traffic between &lt;code&gt;db-sync&lt;/code&gt; and the database. Traffic to a local database is significantly faster than traffic to a database on the LAN or remotely to another location.&lt;/p&gt; &#xA;&lt;p&gt;When building an application that will be querying the database, remember that for fast queries, low latency disk access is far more important than high throughput (assuming the minimal IOPS above is met).&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Install db-sync with one of the following methods:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/input-output-hk/cardano-db-sync/releases/latest&#34;&gt;Static Binaries&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/IntersectMBO/cardano-db-sync/master/doc/installing-with-nix.md&#34;&gt;Installing with Nix&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/IntersectMBO/cardano-db-sync/master/doc/installing.md&#34;&gt;Installing from Source&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/IntersectMBO/cardano-db-sync/master/doc/docker.md&#34;&gt;Docker&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Once installed, start db-sync by following the &lt;a href=&#34;https://raw.githubusercontent.com/IntersectMBO/cardano-db-sync/master/doc/running.md&#34;&gt;Running Guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Troubleshooting&lt;/h2&gt; &#xA;&lt;p&gt;If you have any issues with this project, consult the &lt;a href=&#34;https://raw.githubusercontent.com/IntersectMBO/cardano-db-sync/master/doc/troubleshooting.md&#34;&gt;Troubleshooting&lt;/a&gt; page for possible solutions.&lt;/p&gt; &#xA;&lt;h2&gt;Further Reading&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/IntersectMBO/cardano-db-sync/master/doc/building-running.md&#34;&gt;BuildingRunning&lt;/a&gt;: Building and running the db-sync node.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/IntersectMBO/cardano-db-sync/master/doc/docker.md&#34;&gt;Docker&lt;/a&gt;: Instruction for docker-compose, and building the images using nix.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/IntersectMBO/cardano-db-sync/master/doc/ERD.png&#34;&gt;ERD&lt;/a&gt;: The entity relationship diagram.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/IntersectMBO/cardano-db-sync/master/doc/interesting-queries.md&#34;&gt;Example SQL queries&lt;/a&gt;: Some example SQL and Haskell/Esqueleto queries.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/IntersectMBO/cardano-db-sync/master/doc/pool-offchain-data.md&#34;&gt;OffChainPoolData&lt;/a&gt;: Explanation of how stake pool offchain data is retried.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/IntersectMBO/cardano-db-sync/master/doc/schema.md&#34;&gt;Schema Documentation&lt;/a&gt;: The database schema documentation.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/IntersectMBO/cardano-db-sync/master/doc/schema-management.md&#34;&gt;Schema Management&lt;/a&gt;: How the database schema is managed and modified.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/IntersectMBO/cardano-db-sync/master/doc/state-snapshot.md&#34;&gt;StateSnapshot&lt;/a&gt;: Document the creation and restoration of state snapshot files.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/IntersectMBO/cardano-db-sync/master/doc/upgrading-postgresql.md&#34;&gt;Upgrading PostgreSQL&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/IntersectMBO/cardano-db-sync/master/doc/validation.md&#34;&gt;Validation&lt;/a&gt;: Explanation of validation done by the db-sync node and assumptions made.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>IntersectMBO/cardano-node</title>
    <updated>2023-12-17T01:55:21Z</updated>
    <id>tag:github.com,2023-12-17:/IntersectMBO/cardano-node</id>
    <link href="https://github.com/IntersectMBO/cardano-node" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The core component that is used to participate in a Cardano decentralised blockchain.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;.. raw:: html&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/intersectmbo/cardano-node/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release-pre/intersectmbo/cardano-node.svg?style=for-the-badge&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;table align=&#34;center&#34;&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt;&#xA;   &lt;td colspan=&#34;2&#34; align=&#34;center&#34;&gt;GitHub Actions&lt;/td&gt;&#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;a href=&#34;https://github.com/intersectmbo/cardano-node/actions/workflows/haskell.yml&#34;&gt;&lt;img alt=&#34;GitHub Workflow Status (master)&#34; src=&#34;https://img.shields.io/github/actions/workflow/status/intersectmbo/cardano-node/haskell.yml?branch=master&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/intersectmbo/cardano-node/actions/workflows/haskell.yml&#34;&gt;&lt;img alt=&#34;GitHub Workflow Status (branch)&#34; src=&#34;https://img.shields.io/github/actions/workflow/status/intersectmbo/cardano-node/haskell.yml?branch=nightly&#34;&gt;&lt;/a&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;p&gt;.. contents:: Contents&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Overview of the &lt;code&gt;cardano-node&lt;/code&gt; repository&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Integration of the &lt;code&gt;ledger &amp;lt;https://github.com/input-output-hk/cardano-ledger-specs&amp;gt;&lt;/code&gt;&lt;em&gt;, &lt;code&gt;consensus &amp;lt;https://github.com/input-output-hk/ouroboros-consensus&amp;gt;&lt;/code&gt;&lt;/em&gt;, &lt;code&gt;networking &amp;lt;https://github.com/input-output-hk/ouroboros-network/tree/master/ouroboros-network&amp;gt;&lt;/code&gt;_ and &lt;code&gt;node shell &amp;lt;https://github.com/input-output-hk/cardano-shell&amp;gt;&lt;/code&gt;_ repositories.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Logging &amp;lt;https://github.com/input-output-hk/iohk-monitoring-framework&amp;gt;&lt;/code&gt;_ is provided as a &lt;code&gt;feature &amp;lt;https://github.com/input-output-hk/cardano-shell/blob/master/app/Cardano/Shell/Features/Logging.hs&amp;gt;&lt;/code&gt;_ by the node shell to the other packages.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;The cardano-node is the top level for the node and aggregates the other components from other packages: consensus, ledger and networking, with configuration, CLI, logging and monitoring.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The node no longer incorporates wallet or explorer functionality. The wallet backend and explorer backend are separate components that run in separate external processes that communicate with the node via local IPC.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Network Configuration, Genesis and Topology Files&lt;/h1&gt; &#xA;&lt;p&gt;The latest supported networks can be found at &lt;code&gt;&amp;lt;https://book.world.dev.cardano.org/environments.html&amp;gt;&lt;/code&gt;_&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Obtaining &lt;code&gt;cardano-node&lt;/code&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h1&gt;Building from source&lt;/h1&gt; &#xA;&lt;p&gt;Documentation for building the node can be found &lt;code&gt;here &amp;lt;https://docs.cardano.org/getting-started/installing-the-cardano-node&amp;gt;&lt;/code&gt;_.&lt;/p&gt; &#xA;&lt;h1&gt;Executables&lt;/h1&gt; &#xA;&lt;p&gt;You can download the hydra binaries of &lt;code&gt;cardano-node&lt;/code&gt; and &lt;code&gt;cardano-cli&lt;/code&gt; from the &lt;code&gt;release notes &amp;lt;https://github.com/intersectmbo/cardano-node/releases&amp;gt;&lt;/code&gt;_&lt;/p&gt; &#xA;&lt;h2&gt;Running the node on Windows&lt;/h2&gt; &#xA;&lt;p&gt;The download includes cardano-node.exe and a .dll. To run the node with cardano-node run you need to reference a few files and directories as arguments. These can be copied from the cardano-node repo into the executables directory. The command to run the node on mainnet looks like this:&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: console&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cardano-node.exe run --topology ./configuration/cardano/mainnet-topology.json --database-path ./state --port 3001 --config ./configuration/cardano/mainnet-config.yaml  --socket-path \\.\pipe\cardano-node&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Docker image&lt;/h1&gt; &#xA;&lt;p&gt;You can pull the docker image with the latest version of cardano-node from &lt;code&gt;here &amp;lt;https://hub.docker.com/r/inputoutput/cardano-node&amp;gt;&lt;/code&gt;_.&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: console&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker pull inputoutput/cardano-node&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Using &lt;code&gt;cardano-node&lt;/code&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h1&gt;Command line summary: &lt;code&gt;cardano-node&lt;/code&gt;&lt;/h1&gt; &#xA;&lt;p&gt;This refers to the client that is used for running a node.&lt;/p&gt; &#xA;&lt;p&gt;The general synopsis is as follows:&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: console&lt;/p&gt; &#xA;&lt;p&gt;Usage: cardano-node run [--topology FILEPATH] [--database-path FILEPATH] [--socket-path FILEPATH] [--byron-delegation-certificate FILEPATH] [--byron-signing-key FILEPATH] [--shelley-kes-key FILEPATH] [--shelley-vrf-key FILEPATH] [--shelley-operational-certificate FILEPATH] [--start-as-non-producing-node] [--host-addr IPV4-ADDRESS] [--host-ipv6-addr IPV6-ADDRESS] [--port PORT] [--config NODE-CONFIGURATION] [--validate-db] Run the node.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--topology&lt;/code&gt; - Filepath to a topology file describing which peers the node should connect to.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--database-path&lt;/code&gt; - Path to the blockchain database.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--byron-delegation-certificate&lt;/code&gt; - Optional path to the Byron delegation certificate. The delegation certificate allows the delegator (the issuer of said certificate) to give his/her own block signing rights to somebody else (the delegatee). The delegatee can then sign blocks on behalf of the delegator.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--byron-signing-key&lt;/code&gt; - Optional path to the Byron signing key.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--shelley-signing-key&lt;/code&gt; - Optional path to the Shelley signing key.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--shelley-kes-key&lt;/code&gt; - Optional path to the Shelley KES signing key.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--shelley-vrf-key&lt;/code&gt; - Optional path to the Shelley VRF signing key.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--shelley-operational-certificate&lt;/code&gt; - Optional path to the Shelley operational certificate.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--start-as-non-producing-node&lt;/code&gt; - Optional flag to disable block production on node start. If credentials flags are passed the node will start block producing, however with this flag the node will only start block producing on SIGHUP (see &lt;code&gt;here &amp;lt;https://github.com/input-output-hk/cardano-node-wiki/wiki/dynamic-block-forging&amp;gt;&lt;/code&gt;_ for more details)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--socket-path&lt;/code&gt; - Path to the socket file.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--host-addr&lt;/code&gt; - Optionally specify your node&#39;s IPv4 address.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--host-ipv6-addr&lt;/code&gt; - Optionally specify your node&#39;s IPv6 address.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--port&lt;/code&gt; - Specify which port to assign to the node.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--config&lt;/code&gt; - Specify the filepath to the config &lt;code&gt;.yaml&lt;/code&gt; file. This file is responsible for all the other node&#39;s required settings. See examples in &lt;code&gt;configuration&lt;/code&gt; (e.g. &lt;code&gt;config-0.yaml &amp;lt;configuration/defaults/simpleview/config-0.yaml&amp;gt;&lt;/code&gt;_).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--validate-db&lt;/code&gt; - Flag to revalidate all on-disk database files&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Configuration&lt;/h1&gt; &#xA;&lt;p&gt;The &lt;code&gt;--config&lt;/code&gt; flag points to a &lt;code&gt;.yaml&lt;/code&gt; (or a structurally equivalent &lt;code&gt;.json&lt;/code&gt;) file that is responsible to configuring the logging &amp;amp; other important settings for the node. E.g. see the Byron mainnet configuration in this &lt;code&gt;configuration.yaml &amp;lt;https://github.com/intersectmbo/cardano-node/blob/master/configuration/defaults/byron-mainnet/configuration.yaml&amp;gt;&lt;/code&gt;_.&lt;/p&gt; &#xA;&lt;p&gt;Some of the more important settings are as follows:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;Protocol: RealPBFT&lt;/code&gt; -- Protocol the node will execute&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;RequiresNetworkMagic&lt;/code&gt;: RequiresNoMagic -- Used to distinguish between mainnet (&lt;code&gt;RequiresNoMagic&lt;/code&gt;) and testnets (&lt;code&gt;RequiresMagic&lt;/code&gt;)&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Scripts&lt;/h1&gt; &#xA;&lt;p&gt;Please see &lt;code&gt;scripts/README.md&lt;/code&gt; for information on the various scripts.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Using &lt;code&gt;cardano-cli&lt;/code&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;A CLI utility to support a variety of key material operations (genesis, migration, pretty-printing..) for different system generations. Usage documentation can be found at &lt;code&gt;https://github.com/input-output-hk/cardano-cli/tree/master/cardano-cli/README.md&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The general synopsis is as follows:&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: console&lt;/p&gt; &#xA;&lt;p&gt;Usage: cardano-cli (Era based commands | Byron specific commands | Miscellaneous commands)&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;NOTE: the exact invocation command depends on the environment. If you have only built &lt;code&gt;cardano-cli&lt;/code&gt;, without installing it, then you have to prepend &lt;code&gt;cabal run -- &lt;/code&gt; before &lt;code&gt;cardano-cli&lt;/code&gt;. We henceforth assume that the necessary environment-specific adjustment has been made, so we only mention &lt;code&gt;cardano-cli&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h1&gt;Command line options: &lt;code&gt;cardano-cli&lt;/code&gt;&lt;/h1&gt; &#xA;&lt;p&gt;The subcommands are subdivided in groups, and their full list can be seen in the output of &lt;code&gt;cardano-cli --help&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;All subcommands have help available. For example:&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: console&lt;/p&gt; &#xA;&lt;p&gt;cabal run -- cardano-cli -- byron key migrate-delegate-key-from --help&lt;/p&gt; &#xA;&lt;p&gt;cardano-cli -- byron key migrate-delegate-key-from Usage: cardano-cli byron key migrate-delegate-key-from --from FILEPATH --to FILEPATH Migrate a delegate key from an older version.&lt;/p&gt; &#xA;&lt;p&gt;Available options: --byron-legacy-formats Byron/cardano-sl formats and compatibility --byron-formats Byron era formats and compatibility --from FILEPATH Signing key file to migrate. --to FILEPATH Non-existent file to write the signing key to. -h,--help Show this help text&lt;/p&gt; &#xA;&lt;h1&gt;Genesis generation&lt;/h1&gt; &#xA;&lt;p&gt;The Byron genesis generation operations will create a directory that contains:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;genesis.json&lt;/code&gt;: The genesis JSON file itself.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;avvm-seed.*.seed&lt;/code&gt;: Ada Voucher Vending Machine seeds (secret). Affected by &lt;code&gt;--avvm-entry-count&lt;/code&gt; and &lt;code&gt;--avvm-entry-balance&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;delegate-keys.*.key&lt;/code&gt;: Delegate private keys. Affected by: &lt;code&gt;--n-delegate-addresses&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;delegation-cert.*.json&lt;/code&gt;: Delegation certificates. Affected by: &lt;code&gt;--n-delegate-addresses&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;genesis-keys.*.key&lt;/code&gt;: Genesis stake private keys. Affected by: &lt;code&gt;--n-delegate-addresses&lt;/code&gt;, &lt;code&gt;--total-balance&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;poor-keys.*.key&lt;/code&gt;: Non-delegate private keys with genesis UTxO. Affected by: &lt;code&gt;--n-poor-addresses&lt;/code&gt;, &lt;code&gt;--total-balance&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;More details on the Byron Genesis &lt;code&gt;JSON&lt;/code&gt; file can be found in &lt;code&gt;https://github.com/input-output-hk/cardano-node-wiki/wiki/byron-genesis&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Byron genesis delegation and related concepts are described in detail in:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;&amp;lt;https://hydra.iohk.io/job/Cardano/cardano-ledger-specs/byronLedgerSpec/latest/download-by-type/doc-pdf/ledger-spec&amp;gt;&lt;/code&gt;_&lt;/p&gt; &#xA;&lt;p&gt;The canned &lt;code&gt;scripts/benchmarking/genesis.sh&lt;/code&gt; example provides a nice set of defaults and illustrates available options.&lt;/p&gt; &#xA;&lt;h1&gt;Key operations&lt;/h1&gt; &#xA;&lt;p&gt;Note that key operations do not support password-protected keys.&lt;/p&gt; &#xA;&lt;h2&gt;Signing key generation &amp;amp; verification key extraction&lt;/h2&gt; &#xA;&lt;p&gt;Signing keys can be generated using the &lt;code&gt;keygen&lt;/code&gt; subcommand.&lt;/p&gt; &#xA;&lt;p&gt;Extracting a verification key out of the signing key is performed by the &lt;code&gt;to-verification&lt;/code&gt; subcommand.&lt;/p&gt; &#xA;&lt;h2&gt;Delegate key migration&lt;/h2&gt; &#xA;&lt;p&gt;In order to continue using a delegate key from the Byron Legacy era in the new implementation, it needs to be migrated over, which is done by the &lt;code&gt;migrate-delegate-key-from&lt;/code&gt; subcommand:&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: console&lt;/p&gt; &#xA;&lt;p&gt;$ cabal v2-run -- cardano-cli byron key migrate-delegate-key-from --from key0.sk --to key0Converted.sk&lt;/p&gt; &#xA;&lt;h2&gt;Signing key queries&lt;/h2&gt; &#xA;&lt;p&gt;One can gather information about a signing key&#39;s properties through the &lt;code&gt;signing-key-public&lt;/code&gt; and &lt;code&gt;signing-key-address&lt;/code&gt; subcommands (the latter requires the network magic):&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: console&lt;/p&gt; &#xA;&lt;p&gt;$ cabal v2-run -- cardano-cli byron key signing-key-public --byron-formats --secret key0.sk&lt;/p&gt; &#xA;&lt;p&gt;public key hash: a2b1af0df8ca764876a45608fae36cf04400ed9f413de2e37d92ce04 public key: sc4pa1pAriXO7IzMpByKo4cG90HCFD465Iad284uDYz06dHCqBwMHRukReQ90+TA/vQpj4L1YNaLHI7DS0Z2Vg==&lt;/p&gt; &#xA;&lt;p&gt;$ cabal v2-run -- cardano-cli signing-key-address --byron-formats --secret key0.pbft --testnet-magic 42&lt;/p&gt; &#xA;&lt;p&gt;2cWKMJemoBakxhXgZSsMteLP9TUvz7owHyEYbUDwKRLsw2UGDrG93gPqmpv1D9ohWNddx VerKey address with root e5a3807d99a1807c3f161a1558bcbc45de8392e049682df01809c488, attributes: AddrAttributes { derivation path: {} }&lt;/p&gt; &#xA;&lt;h1&gt;Transactions&lt;/h1&gt; &#xA;&lt;h2&gt;Creation&lt;/h2&gt; &#xA;&lt;p&gt;Transactions can be created via the &lt;code&gt;issue-genesis-utxo-expenditure&lt;/code&gt; &amp;amp; &lt;code&gt;issue-utxo-expenditure&lt;/code&gt; commands.&lt;/p&gt; &#xA;&lt;p&gt;The easiest way to create a transaction is via the &lt;code&gt;scripts/benchmarking/issue-genesis-utxo-expenditure.sh&lt;/code&gt; script as follows:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;./scripts/benchmarking/issue-genesis-utxo-expenditure.sh transaction_file&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;NB: This by default creates a transaction based on &lt;code&gt;configuration/defaults/liveview/config-0.yaml&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you do not have a &lt;code&gt;genesis_file&lt;/code&gt; you can run &lt;code&gt;scripts/benchmarking/genesis.sh&lt;/code&gt; which will create an example &lt;code&gt;genesis_file&lt;/code&gt; for you. The script &lt;code&gt;scripts/benchmarking/issue-genesis-utxo-expenditure.sh&lt;/code&gt; has defaults for all the requirements of the &lt;code&gt;issue-genesis-utxo-expenditure&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;h2&gt;Submission&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;submit-tx&lt;/code&gt; subcommand provides the option of submitting a pre-signed transaction, in its raw wire format (see GenTx for Byron transactions).&lt;/p&gt; &#xA;&lt;p&gt;The canned &lt;code&gt;scripts/benchmarking/submit-tx.sh&lt;/code&gt; script will submit the supplied transaction to a testnet launched by &lt;code&gt;scripts/benchmarking/shelley-testnet-liveview.sh&lt;/code&gt; script.&lt;/p&gt; &#xA;&lt;h2&gt;Issuing UTxO expenditure (genesis and regular)&lt;/h2&gt; &#xA;&lt;p&gt;To make a transaction spending UTxO, you can either use the:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;issue-genesis-utxo-expenditure&lt;/code&gt;, for genesis UTxO&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;issue-utxo-expenditure&lt;/code&gt;, for normal UTxO&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;subcommands directly, or, again use canned scripts that will make transactions tailored for the aforementioned testnet cluster:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;scripts/benchmarking/issue-genesis-utxo-expenditure.sh&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;scripts/benchmarking/issue-utxo-expenditure.sh&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The script requires the target file name to write the transaction to, input TxId (for normal UTxO), and optionally allows specifying the source txin output index, source and target signing keys and lovelace value to send.&lt;/p&gt; &#xA;&lt;p&gt;The target address defaults to the 1-st richman key (&lt;code&gt;configuration/delegate-keys.001.key&lt;/code&gt;) of the testnet, and lovelace amount is almost the entirety of its funds.&lt;/p&gt; &#xA;&lt;h1&gt;Local node queries&lt;/h1&gt; &#xA;&lt;p&gt;You can query the tip of your local node via the &lt;code&gt;get-tip&lt;/code&gt; command as follows&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Open &lt;code&gt;tmux&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;cabal build cardano-node&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;./scripts/lite/shelley-testnet.sh example&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run ``export CARDANO_NODE_SOCKET_PATH=/cardano-node/example/socket/node-1-socket&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cabal exec cardano-cli -- get-tip --testnet-magic 42&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;You will see output from stdout in this format:&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: console&lt;/p&gt; &#xA;&lt;p&gt;Current tip: Block hash: 4ab21a10e1b25e39 Slot: 6 Block number: 5&lt;/p&gt; &#xA;&lt;h1&gt;Update proposals&lt;/h1&gt; &#xA;&lt;h2&gt;Update proposal creation&lt;/h2&gt; &#xA;&lt;p&gt;A Byron update proposal can be created as follows:&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: console&lt;/p&gt; &#xA;&lt;p&gt;cardano-cli -- byron governance create-update-proposal (--mainnet | --testnet-magic NATURAL) --signing-key FILEPATH --protocol-version-major WORD16 --protocol-version-minor WORD16 --protocol-version-alt WORD8 --application-name STRING --software-version-num WORD32 --system-tag STRING --installer-hash HASH --filepath FILEPATH ..&lt;/p&gt; &#xA;&lt;p&gt;The mandatory arguments are &lt;code&gt;--mainnet | --testnet-magic&lt;/code&gt;, &lt;code&gt;signing-key&lt;/code&gt;, &lt;code&gt;protocol-version-major&lt;/code&gt;, &lt;code&gt;protocol-version-minor&lt;/code&gt;, &lt;code&gt;protocol-version-alt&lt;/code&gt;, &lt;code&gt;application-name&lt;/code&gt;, &lt;code&gt;software-version-num&lt;/code&gt;, &lt;code&gt;system-tag&lt;/code&gt;, &lt;code&gt;installer-hash&lt;/code&gt; and &lt;code&gt;filepath&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The remaining arguments are optional parameters you want to update in your update proposal.&lt;/p&gt; &#xA;&lt;p&gt;You can also check your proposal&#39;s validity using the &lt;code&gt;validate-cbor&lt;/code&gt; command. See: &lt;code&gt;Validate CBOR files&lt;/code&gt;_.&lt;/p&gt; &#xA;&lt;p&gt;See the &lt;code&gt;Byron specification &amp;lt;https://hydra.iohk.io/job/Cardano/cardano-ledger-specs/byronLedgerSpec/latest/download-by-type/doc-pdf/ledger-spec&amp;gt;&lt;/code&gt;_ for more details on update proposals.&lt;/p&gt; &#xA;&lt;h2&gt;Update proposal submission&lt;/h2&gt; &#xA;&lt;p&gt;You can submit your proposal using the &lt;code&gt;submit-update-proposal&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: console&lt;/p&gt; &#xA;&lt;p&gt;cardano-cli -- byron governance submit-update-proposal --config configuration/defaults/mainnet/configuration.yaml (--mainnet | --testnet-magic NATURAL) --filepath my-update-proposal&lt;/p&gt; &#xA;&lt;p&gt;See the &lt;code&gt;Byron specification &amp;lt;https://hydra.iohk.io/job/Cardano/cardano-ledger-specs/byronLedgerSpec/latest/download-by-type/doc-pdf/ledger-spec&amp;gt;&lt;/code&gt;_ for more details on update proposals.&lt;/p&gt; &#xA;&lt;h1&gt;Update proposal voting&lt;/h1&gt; &#xA;&lt;p&gt;You can create and submit byron update proposal votes with the &lt;code&gt;create-proposal-vote&lt;/code&gt; &amp;amp; &lt;code&gt;submit-proposal-vote&lt;/code&gt; commands. The following are two example commands:&lt;/p&gt; &#xA;&lt;p&gt;Byron vote creation:&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: console&lt;/p&gt; &#xA;&lt;p&gt;cabal exec cardano-cli -- byron governance create-proposal-vote (--mainnet | --testnet-magic NATURAL) --signing-key configuration/defaults/liveview/genesis/delegate-keys.000.key --proposal-filepath ProtocolUpdateProposalFile --vote-yes --output-filepath UpdateProposalVoteFile&lt;/p&gt; &#xA;&lt;p&gt;Byron vote submission:&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: console&lt;/p&gt; &#xA;&lt;p&gt;cabal exec cardano-cli -- byron governance submit-proposal-vote (--mainnet | --testnet-magic NATURAL) --filepath UpdateProposalVoteFile&lt;/p&gt; &#xA;&lt;h1&gt;Development&lt;/h1&gt; &#xA;&lt;h2&gt;GHCID&lt;/h2&gt; &#xA;&lt;p&gt;run &lt;em&gt;ghcid&lt;/em&gt; with: &lt;code&gt;ghcid -c &#34;cabal repl exe:cardano-node --reorder-goals&#34;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Note: When developing locally, for any package you are working on, in &lt;strong&gt;cabal.project&lt;/strong&gt; set, &lt;em&gt;ghc-options&lt;/em&gt; to &lt;code&gt;-Wwarn&lt;/code&gt; and set the &lt;code&gt;development&lt;/code&gt; flag, e.g.::&lt;/p&gt; &#xA;&lt;p&gt;package cardano-node ghc-options: -Wwarn flags: +development&lt;/p&gt; &#xA;&lt;p&gt;Otherwise GHC might complain about unused packages.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Native Tokens&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Native tokens is a new feature that enables the transacting of multi-assets on Cardano. Native tokens are now supported on mainnet and users can transact with ada, and an unlimited number of user-defined (custom) tokens natively. Note that users who do not need to create new assets (“token holders”) will be able to send and receive existing multi-asset tokens using a wallet such as Daedalus or Yoroi, and with no requirement to use any CLI commands.&lt;/p&gt; &#xA;&lt;p&gt;To help you get started, see:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;Cardano Forum discussion &amp;lt;https://forum.cardano.org/c/developers/cardano-tokens/150&amp;gt;&lt;/code&gt;_&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;Ledger explanations: native tokens &amp;lt;https://cardano-ledger.readthedocs.io/en/latest/&amp;gt;&lt;/code&gt;_. Covers explainers about assets, tokens, token bundles, minting policies, comparison to ERC20, and minimum ada value requirements.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;A tutorial on how to get started with native tokens &amp;lt;https://github.com/input-output-hk/cardano-node-wiki/wiki/02-getting-started&amp;gt;&lt;/code&gt;_. Explains how to create new currencies and assets, submit and send transactions containing multi-asset tokens, send and receive token bundles, manage your addresses and values.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;Native tokens exercises &amp;lt;https://github.com/input-output-hk/cardano-node-wiki/wiki/03-exercises&amp;gt;&lt;/code&gt;_&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To start, please ensure that you are familiar with setting up and operating the &lt;code&gt;Cardano node &amp;lt;https://github.com/intersectmbo/cardano-node&amp;gt;&lt;/code&gt;&lt;em&gt;. Alternatively, see instructions on how to &lt;code&gt;start your node &amp;lt;https://github.com/input-output-hk/cardano-node-wiki/wiki/2_start_your_nodes&amp;gt;&lt;/code&gt;&lt;/em&gt; to submit the commands. You will not need to set up and start a full block producing node (&#39;stake pool&#39;), just a much simpler relay node. This node will need to connect to a Cardano network that is capable of processing native tokens (e.g., the native token pre-production environment (PPE), or the Cardano mainnet).&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;API Documentation&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;The API documentation is published &lt;code&gt;here &amp;lt;https://cardano-node.cardano.intersectmbo.org/&amp;gt;&lt;/code&gt;_.&lt;/p&gt; &#xA;&lt;p&gt;The documentation is built with each push, but is only published from &lt;code&gt;master&lt;/code&gt; branch. In order to test if the documentation is working, build the documentation locally with &lt;code&gt;cabal haddock-project --local --output=./haddocks&lt;/code&gt; and open &lt;code&gt;haddocks/index.html&lt;/code&gt; in the browser.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Using the &lt;code&gt;cardano-node&lt;/code&gt; Haskell packages&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;If you want to use the &lt;code&gt;cardano-node&lt;/code&gt; Haskell packages from another project, you should use &lt;code&gt;CHaP &amp;lt;https://github.com/input-output-hk/cardano-haskell-packages&amp;gt;&lt;/code&gt;_ to get the packages defined in this repository. Please note that you may need to use any &lt;code&gt;source-repository-package&lt;/code&gt; stanzas defined in &lt;code&gt;cabal.project&lt;/code&gt;, although we will endeavour to keep these to an absolute minimum.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Style guide&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;The &lt;code&gt;style guide &amp;lt;https://github.com/input-output-hk/cardano-node-wiki/wiki/Style-guide&amp;gt;&lt;/code&gt;_ for can be found on the &lt;code&gt;cardano-node repository&#39;s wiki &amp;lt;https://github.com/input-output-hk/cardano-node-wiki/wiki&amp;gt;&lt;/code&gt;_.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Troubleshooting &lt;code&gt;cardano-node&lt;/code&gt; issues&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;For some troubleshooting help with building or running &lt;code&gt;cardano-node&lt;/code&gt;, the wiki has a &lt;code&gt;troubleshooting page &amp;lt;https://github.com/input-output-hk/cardano-node-wiki/wiki/Troubleshooting&amp;gt;&lt;/code&gt;_ that documents some common gotchas.&lt;/p&gt;</summary>
  </entry>
</feed>