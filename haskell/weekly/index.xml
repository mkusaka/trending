<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Haskell Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-05-19T01:39:26Z</updated>
  <subtitle>Weekly Trending of Haskell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>danchoi/mysql-ddl-parser</title>
    <updated>2024-05-19T01:39:26Z</updated>
    <id>tag:github.com,2024-05-19:/danchoi/mysql-ddl-parser</id>
    <link href="https://github.com/danchoi/mysql-ddl-parser" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Haskell MySQL DDL parser&lt;/p&gt;&lt;hr&gt;&lt;ul&gt; &#xA; &lt;li&gt;check expressions are not yet supported&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>unisoncomputing/share-api</title>
    <updated>2024-05-19T01:39:26Z</updated>
    <id>tag:github.com,2024-05-19:/unisoncomputing/share-api</id>
    <link href="https://github.com/unisoncomputing/share-api" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Unison Share&#39;s backend server&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Unison Share&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/unisoncomputing/share-api/main/#setup&#34;&gt;Setup&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/unisoncomputing/share-api/main/#macos&#34;&gt;MacOS&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/unisoncomputing/share-api/main/#nix&#34;&gt;Nix&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/unisoncomputing/share-api/main/#running-locally&#34;&gt;Running Locally&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/unisoncomputing/share-api/main/#self-hosting&#34;&gt;Self Hosting&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/unisoncomputing/share-api/main/#updating-unison-dependencies&#34;&gt;Updating unison dependencies&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/unisoncomputing/share-api/main/#postgres&#34;&gt;Postgres&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/unisoncomputing/share-api/main/#managing-postgres-migrations&#34;&gt;Managing Postgres Migrations&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/unisoncomputing/share-api/main/#redis&#34;&gt;Redis&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/unisoncomputing/share-api/main/#clearing-the-redis-cache&#34;&gt;Clearing the redis cache&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/unisoncomputing/share-api/main/#testing&#34;&gt;Testing&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/unisoncomputing/share-api/main/#running-transcripts&#34;&gt;Running Transcripts&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/unisoncomputing/share-api/main/#updating-transcripts&#34;&gt;Updating Transcripts&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This service provides the APIs which power the Unison Share web application, including the APIs for syncing code with UCM.&lt;/p&gt; &#xA;&lt;p&gt;Unison Share also acts as an authentication server for UCM and Unison Cloud. It implements &lt;a href=&#34;https://datatracker.ietf.org/doc/html/rfc6749&#34;&gt;OAuth2&lt;/a&gt; with the &lt;a href=&#34;https://www.oauth.com/oauth2-servers/pkce/&#34;&gt;PKCE extension&lt;/a&gt;, and a subset of the &lt;a href=&#34;https://openid.net/specs/openid-connect-core-1_0.html&#34;&gt;OpenID Connect Core&lt;/a&gt; and &lt;a href=&#34;https://openid.net/specs/openid-connect-discovery-1_0.html&#34;&gt;OpenID Discovery specifications&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Contributions are welcome, however we request that you join the &lt;a href=&#34;https://unison-lang.org/discord&#34;&gt;Unison Discord server&lt;/a&gt; and discuss your ideas with the team before starting work on any features.&lt;/p&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;p&gt;Dependencies:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;docker&lt;/li&gt; &#xA; &lt;li&gt;docker-compose&lt;/li&gt; &#xA; &lt;li&gt;postgres&lt;/li&gt; &#xA; &lt;li&gt;redis-cli&lt;/li&gt; &#xA; &lt;li&gt;Haskell stack&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This project depends on the &lt;code&gt;unison&lt;/code&gt; repository as a submodule. After cloning or pulling this repository you&#39;ll need to initialize the git submodules like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git submodule update --init --recursive&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can build the project for local development with &lt;code&gt;stack build --fast&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;MacOS&lt;/h3&gt; &#xA;&lt;p&gt;Requires postgres and redis.&lt;/p&gt; &#xA;&lt;p&gt;Note for M1 Arm architecture macs, if using an x86 version of &lt;code&gt;stack&lt;/code&gt; you&#39;ll also need to link against the x86 postgres lib. You can achieve this by following &lt;a href=&#34;https://gist.github.com/progrium/b286cd8c82ce0825b2eb3b0b3a0720a0&#34;&gt;these instructions&lt;/a&gt; to install an x86 version of homebrew, then use that homebrew version to install postgres, then uninstall any postgres from your arm &lt;code&gt;brew&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;brew install postgresql&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;brew install redis&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Nix&lt;/h3&gt; &#xA;&lt;p&gt;A &lt;a href=&#34;https://raw.githubusercontent.com/unisoncomputing/share-api/main/flake.nix&#34;&gt;flake.nix&lt;/a&gt; file is provided in this repo. It currently doesn&#39;t use a &#34;pure&#34; nix build and could probably use some improvements. However, it generally seems to work as long as you provide the &lt;code&gt;--nix&lt;/code&gt; and &lt;code&gt;--no-nix-pure&lt;/code&gt; arguments to &lt;code&gt;stack&lt;/code&gt;. For example &lt;code&gt;stack --nix --no-nix-pure test&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Running Locally&lt;/h2&gt; &#xA;&lt;p&gt;Start the server and its dependencies with &lt;code&gt;make serve&lt;/code&gt;. You may wish to run &lt;code&gt;make fixtures&lt;/code&gt; to fill some in some data for local testing.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;code&gt;./docker/docker-compose.yml&lt;/code&gt; to see how the postgres and redis services are configured.&lt;/p&gt; &#xA;&lt;h2&gt;Self Hosting&lt;/h2&gt; &#xA;&lt;p&gt;The Docker Compose configuration located in &lt;code&gt;./docker/docker-compose.yml&lt;/code&gt; is a great place to start for learning how Share&#39;s infrastructure is set up. It details Share&#39;s required environment variables and shows how it expects to be connected to Postgres and Redis.&lt;/p&gt; &#xA;&lt;p&gt;If you have any questions about self hosting, feel free to ask in our &lt;a href=&#34;https://unison-lang.org/discord&#34;&gt;Discord server&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Updating unison dependencies&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ cd unison&#xA;$ git checkout trunk&#xA;$ git pull&#xA;$ cd ..&#xA;$ git add unison&#xA;$ git commit&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Postgres&lt;/h2&gt; &#xA;&lt;h3&gt;Managing Postgres Migrations&lt;/h3&gt; &#xA;&lt;p&gt;Currently the postgres schema is managed manually. All the required schema changes exist in the &lt;code&gt;sql&lt;/code&gt; directory, ordered by timestamp, but they are applied to the database by copy-pasting them into a postgres terminal session.&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s recommended that you run migrations within a transaction so in the case something goes wrong, you can abort.&lt;/p&gt; &#xA;&lt;p&gt;E.g.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;gt; BEGIN;&#xA;&amp;gt; &amp;lt;run migrations&amp;gt;&#xA;&amp;gt; COMMIT;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Redis&lt;/h2&gt; &#xA;&lt;h3&gt;Clearing the redis cache&lt;/h3&gt; &#xA;&lt;p&gt;We use redis to cache various api responses. If a change to logic requires clearing the cache, you can do so by connecting to redis and executing the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;gt; FLUSHALL&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It&#39;s fine to clear the cache, but of course don&#39;t do it too often if you can help it. Clearing Redis may also interrupt users who are in the middle of the authentication flow, but at worst they&#39;d just need to log in again.&lt;/p&gt; &#xA;&lt;h2&gt;Testing&lt;/h2&gt; &#xA;&lt;p&gt;Similar to UCM, we do most of the testing for Share with golden-file transcripts. We set the database to an initial state, then interact with Share via UCM or curl commands and save the resulting JSON responses to files. This allows us to easily see changes in JSON output as we make changes.&lt;/p&gt; &#xA;&lt;p&gt;The transcript runner isn&#39;t perfectly deterministic yet, but is close enough to be useful.&lt;/p&gt; &#xA;&lt;h3&gt;Running Transcripts&lt;/h3&gt; &#xA;&lt;p&gt;Transcript tests are a series of scripts which interact with Share via its APIs and ucm integrations to produce output files which describe Share&#39;s behaviour. They&#39;re run on pull requests to ensure that any changes in behaviour are expected.&lt;/p&gt; &#xA;&lt;p&gt;To run transcripts, first start the server with &lt;code&gt;make serve&lt;/code&gt;, then in a separate terminal run &lt;code&gt;./transcripts/run-transcripts.zsh&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Note: If you get local authentication errors you may need to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Start the server&lt;/li&gt; &#xA; &lt;li&gt;Access &lt;code&gt;http://localhost:5424/local/user/transcripts/login&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;UNISON_SHARE_HOST=http://localhost:5424 ucm&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;&amp;gt; auth.login&lt;/code&gt; from within UCM&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Validate that the git diff is expected (or empty if that&#39;s what you expect) and then commit the changes.&lt;/p&gt; &#xA;&lt;h3&gt;Updating Transcripts&lt;/h3&gt; &#xA;&lt;p&gt;I recommend checking existing transcripts to see how things are being done.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>erochest/atom-ino</title>
    <updated>2024-05-19T01:39:26Z</updated>
    <id>tag:github.com,2024-05-19:/erochest/atom-ino</id>
    <link href="https://github.com/erochest/atom-ino" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
</feed>