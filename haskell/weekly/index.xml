<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Haskell Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-03-26T01:53:57Z</updated>
  <subtitle>Weekly Trending of Haskell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>haskell-beginners-2022/course-plan</title>
    <updated>2023-03-26T01:53:57Z</updated>
    <id>tag:github.com,2023-03-26:/haskell-beginners-2022/course-plan</id>
    <link href="https://github.com/haskell-beginners-2022/course-plan" rel="alternate"></link>
    <summary type="html">&lt;p&gt;📜 Haskell course info, plan, video lectures, slides&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;course-plan&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;256&#34; height=&#34;256&#34; src=&#34;https://raw.githubusercontent.com/haskell-beginners-2022/course-plan/main/logo.png&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;Haskell and Functional Programming course for complete beginners.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;👩‍🏫 The course was created in 2022 but it&#39;s still active and constantly improving.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Course learning materials comprises:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=6MsQcUprO9o&amp;amp;list=PLOJjn67NeYg9cWA4hyIWcxfaeX64pwo1c&amp;amp;ab_channel=chshersh&#34;&gt;🎥 Four 1-hour lectures on YouTube&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://slides.com/haskellbeginners2022&#34;&gt;🖼 Slides&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/haskell-beginners-2022/exercises&#34;&gt;🧩 Practical exercises and Haskell installation instructions&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The course is entirely free and includes two particularly interesting features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;🆙 &lt;strong&gt;Review of your solutions to exercises!&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;strong&gt;A certificate after successful completion!&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can solve exercises, and I&#39;m (Dmitrii Kovanikov) going to provide review to your solutions, suggesting improvements and alternative ways to solve tasks using idiomatic FP.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Below you can find the plan of each individual lecture with the corresponding links to learning materials.&lt;/p&gt; &#xA;&lt;h2&gt;🏡 Lecture 1: Fundamentals&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;What is Functional Programming?&lt;/li&gt; &#xA; &lt;li&gt;FP concepts&lt;/li&gt; &#xA; &lt;li&gt;Haskell features&lt;/li&gt; &#xA; &lt;li&gt;Haskell toolchain: GHC, GHCi, ghcup, cabal, hls&lt;/li&gt; &#xA; &lt;li&gt;How to install Haskell?&lt;/li&gt; &#xA; &lt;li&gt;GHCi &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Arithmetic expressions&lt;/li&gt; &#xA;   &lt;li&gt;Comparison operators&lt;/li&gt; &#xA;   &lt;li&gt;Boolean expressions&lt;/li&gt; &#xA;   &lt;li&gt;Calling functions&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Types &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;:t&lt;/code&gt; command in GHCi&lt;/li&gt; &#xA;   &lt;li&gt;Types of booleans, numbers and functions&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Lists and operations with them &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Prepending, concatenation&lt;/li&gt; &#xA;   &lt;li&gt;Standard list functions&lt;/li&gt; &#xA;   &lt;li&gt;Ranges&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Laziness&lt;/li&gt; &#xA; &lt;li&gt;String&lt;/li&gt; &#xA; &lt;li&gt;Syntax constructions &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Defining our own functions&lt;/li&gt; &#xA;   &lt;li&gt;packages, modules, imports&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;if-then-else&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;guards&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;let-in&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;where&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Immutability&lt;/li&gt; &#xA; &lt;li&gt;Recursion&lt;/li&gt; &#xA; &lt;li&gt;Higher-Order Functions (HOF) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Functions as first-class values&lt;/li&gt; &#xA;   &lt;li&gt;Lambda functions&lt;/li&gt; &#xA;   &lt;li&gt;Partial application&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;map&lt;/code&gt;, &lt;code&gt;filter&lt;/code&gt;, etc.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;🎞 Slides: &lt;a href=&#34;https://slides.com/haskellbeginners2022/lecture-1&#34;&gt;https://slides.com/haskellbeginners2022/lecture-1&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;📽 Video: &lt;a href=&#34;https://www.youtube.com/watch?v=6MsQcUprO9o&#34;&gt;Haskell Beginners 2022: Lecture 1&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;🏗 Lecture 2: Data types&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Pattern-matching &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Top level&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;case-of&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;List patterns&lt;/li&gt; &#xA;   &lt;li&gt;Recursion and pattern matching&lt;/li&gt; &#xA;   &lt;li&gt;Pattern matching pitfalls&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Totality&lt;/li&gt; &#xA; &lt;li&gt;Tuples&lt;/li&gt; &#xA; &lt;li&gt;Algebraic Data Types &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Product types&lt;/li&gt; &#xA;   &lt;li&gt;Sum types&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Data types in Haskell &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;data&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Simple product types&lt;/li&gt; &#xA;   &lt;li&gt;Records&lt;/li&gt; &#xA;   &lt;li&gt;Enumerations&lt;/li&gt; &#xA;   &lt;li&gt;Simple sum types&lt;/li&gt; &#xA;   &lt;li&gt;Recursive data types&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;type&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;newtype&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Polymorphism &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Parametric polymorphism&lt;/li&gt; &#xA;   &lt;li&gt;Types of standard functions&lt;/li&gt; &#xA;   &lt;li&gt;Hoogle&lt;/li&gt; &#xA;   &lt;li&gt;Polymorphic data types&lt;/li&gt; &#xA;   &lt;li&gt;Standard polymorphic data types&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Eta-reduction&lt;/li&gt; &#xA; &lt;li&gt;Function composition: dot operator &lt;code&gt;(.)&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;🎞 Slides: &lt;a href=&#34;https://slides.com/haskellbeginners2022/lecture-2&#34;&gt;https://slides.com/haskellbeginners2022/lecture-2&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;📽 Video: &lt;a href=&#34;https://www.youtube.com/watch?v=rf-lie7U04Q&#34;&gt;Haskell Beginners 2022: Lecture 2&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;🎮 Lecture 3: Typeclasses&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Parametric polymorphism vs Ad-hoc polymorphism&lt;/li&gt; &#xA; &lt;li&gt;Typeclasses &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;class&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;instance&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Default methods&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;{-# MINIMAL #-}&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Small typeclasses vs Big typeclasses&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Language Extensions &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;{-# LANGUAGE InstanceSigs #-}&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Standard typeclasses &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;Eq&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Haskell Equality Table&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Ord&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Num&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;deriving&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Stock derivable typeclasses&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;{-# LANGUAGE GeneralizedNewtypeDeriving #-}&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Algebraic typeclasses &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;Semigroup&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Monoid&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Laws&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Kinds&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Functor&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Folds &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;foldr&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;foldl&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;foldl&#39;&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;foldr&lt;/code&gt; vs &lt;code&gt;foldl&#39;&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Foldable&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Strict and Lazy evaluation &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Lazy evaluation&lt;/li&gt; &#xA;   &lt;li&gt;Tail Call Optimization (TCO)&lt;/li&gt; &#xA;   &lt;li&gt;Equational reasoning&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;{-# LANGUAGE BangPatterns #-}&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;🎞 Slides: &lt;a href=&#34;https://slides.com/haskellbeginners2022/lecture-3&#34;&gt;https://slides.com/haskellbeginners2022/lecture-3&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;📽 Video: &lt;a href=&#34;https://www.youtube.com/watch?v=Vs-vvlYLtRI&#34;&gt;Haskell Beginners 2022: Lecture 3&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;🔈🎤 Lecture 4: Monads and IO&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Monad example &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;andThen&lt;/code&gt; for &lt;code&gt;Maybe&lt;/code&gt;, &lt;code&gt;Either&lt;/code&gt; and list&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Monad as programming pattern&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Monad&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;The typeclass&lt;/li&gt; &#xA;   &lt;li&gt;Instances&lt;/li&gt; &#xA;   &lt;li&gt;Laws&lt;/li&gt; &#xA;   &lt;li&gt;Usage example&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;FAM&lt;/strong&gt;ily: &lt;code&gt;Functor&lt;/code&gt;, &lt;code&gt;Applicative&lt;/code&gt;, &lt;code&gt;Monad&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Purity&lt;/li&gt; &#xA; &lt;li&gt;Why Purity + Laziness is a problem for side effects?&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;IO&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Why does IO require a monad?&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;String&lt;/code&gt; vs &lt;code&gt;IO String&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;getLine&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;putStrLn&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Main&lt;/code&gt; and &lt;code&gt;main&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Then&lt;/em&gt; operator: &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;do&lt;/code&gt;-notation&lt;/li&gt; &#xA; &lt;li&gt;Cabal &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Packages&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;build-depends&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Functional Core, Imperative Shell&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;🎞 Slides: &lt;a href=&#34;https://slides.com/haskellbeginners2022/lecture-4&#34;&gt;https://slides.com/haskellbeginners2022/lecture-4&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;📽 Video: &lt;a href=&#34;https://www.youtube.com/watch?v=12D4Y2Hdnhg&#34;&gt;Haskell Beginners 2022: Lecture 4&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;What&#39;s next?&lt;/h2&gt; &#xA;&lt;p&gt;After you&#39;ve finished the course, you may be interested in the following resources to continue your FP and Haskell journey:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://lhbg-book.link/&#34;&gt;Learn Haskell by building a blog generator&lt;/a&gt;: A project-based course that teaches pragmatic Haskell by building a blog generator from scratch.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.manning.com/books/haskell-in-depth&#34;&gt;Haskell in Depth&lt;/a&gt;: A book about intermediate Haskell topics such as Monad Transformers, metaprogramming, testing, logging and performance analysis.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.manning.com/books/functional-design-and-architecture&#34;&gt;Functional Design and Architecture &lt;/a&gt;: Design patterns and architectures for building production quality applications using functional programming, with examples in Haskell and other FP languages.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/soupi/haskell-study-plan&#34;&gt;Haskell Study Plan&lt;/a&gt;: More links on different topics and examples to real-world Haskell projects.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/willbasky/Awesome-list-of-Haskell-mentors&#34;&gt;Awesome List of Haskell mentors&lt;/a&gt;: A list of Haskell projects and mentors willing to help you master Haskell.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;History&lt;/h2&gt; &#xA;&lt;p&gt;Below is the link to the original course announcement:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://kodimensional.dev/course&#34;&gt;Course announcement&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>ekmett/nats</title>
    <updated>2023-03-26T01:53:57Z</updated>
    <id>tag:github.com,2023-03-26:/ekmett/nats</id>
    <link href="https://github.com/ekmett/nats" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Haskell 98 Natural Numbers&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;nats&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://hackage.haskell.org/package/nats&#34;&gt;&lt;img src=&#34;https://img.shields.io/hackage/v/nats.svg?sanitize=true&#34; alt=&#34;Hackage&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/ekmett/nats/actions?query=workflow%3AHaskell-CI&#34;&gt;&lt;img src=&#34;https://github.com/ekmett/nats/workflows/Haskell-CI/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Haskell 98 natural numbers&lt;/p&gt; &#xA;&lt;h2&gt;Contact Information&lt;/h2&gt; &#xA;&lt;p&gt;Contributions and bug reports are welcome!&lt;/p&gt; &#xA;&lt;p&gt;Please feel free to contact me through github or on the #haskell IRC channel on irc.freenode.net.&lt;/p&gt; &#xA;&lt;p&gt;-Edward Kmett&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>nammayatri/nammayatri</title>
    <updated>2023-03-26T01:53:57Z</updated>
    <id>tag:github.com,2023-03-26:/nammayatri/nammayatri</id>
    <link href="https://github.com/nammayatri/nammayatri" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/nammayatri/nammayatri/main/docs/images/nammaYatrilogo.svg#gh-dark-mode-only&#34; alt=&#34;NammaYatri-Logo&#34; width=&#34;40%&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;i&gt;Open Direct-to-Driver app. Zero commision. No middleman. Secure. Safe.&lt;/i&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/nammayatri/nammayatri/raw/main/LICENSE&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/license/nammayatri/beckn-gateway&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;Namma Yatri is a Direct-to-Driver open mobility platform, developed by Juspay, powering the next-generation of mobility applications in India.&lt;/p&gt; &#xA;&lt;p&gt;The code in this repository are divided into sub-projects - Backend and Frontend.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;You can find the instructions to build and run the project in their respective sub-project directories - &lt;a href=&#34;https://raw.githubusercontent.com/nammayatri/nammayatri/main/Backend/README.md#getting-started&#34;&gt;Backend&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/nammayatri/nammayatri/main/Frontend/README.md&#34;&gt;Frontend&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;We strongly believe in the power of open-source. The main purpose of this repository is that the development of the mobility stack happens at an open-to-all platform, where anyone can inspect and contribute. The repository should evolve, adding more features and make existing features faster, correct and easy to use. We welcome contributions to the repository in the form of bug-reports, code patches, documentation updates and feature requests or heads-up for breaking changes in any of the dependencies.&lt;/p&gt; &#xA;&lt;p&gt;We welcome contributions from the community. Please read through our &lt;a href=&#34;https://raw.githubusercontent.com/nammayatri/nammayatri/main/docs/CONTRIBUTING.md&#34;&gt;contributing guidelines&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Product Roadmap&lt;/h2&gt; &#xA;&lt;p&gt;We&#39;re excited to share our product roadmap with you, which outlines the features and improvements we plan to make to our product in the coming months. Our roadmap is dynamic and subject to change as we receive feedback from our users and as we continue to iterate on our product.&lt;/p&gt; &#xA;&lt;p&gt;Check out our product roadmap &lt;a href=&#34;https://docs.google.com/spreadsheets/d/e/2PACX-1vRPdBJDIKyKHmAprGdLGfGb6Lt8j25xBHhV1Dr8f0kY8xhcP5DbBgAB5Fl-zvT4GjzNxwWzy81B1fDO/pubhtml?gid=685751497&amp;amp;single=true&#34;&gt;here&lt;/a&gt; to learn more about what we have planned for the future.&lt;/p&gt; &#xA;&lt;p&gt;If you have any suggestions or feedback on our roadmap, please don&#39;t hesitate to reach out to us through &lt;a href=&#34;mailto:nammayatri.support@juspay.in&#34;&gt;nammayatri.support@juspay.in&lt;/a&gt; or GitHub Issues. We&#39;d love to hear from you!&lt;/p&gt; &#xA;&lt;h2&gt;Community&lt;/h2&gt; &#xA;&lt;p&gt;Ask and explore our &lt;a href=&#34;https://github.com/orgs/nammayatri/discussions&#34;&gt;GitHub Discussions&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Bugs and feature requests&lt;/h2&gt; &#xA;&lt;p&gt;Please read the issue guidelines and search for &lt;a href=&#34;https://github.com/nammayatri/nammayatri/issues&#34;&gt;existing and closed issues&lt;/a&gt;. If your problem or idea is not addressed yet, please &lt;a href=&#34;https://github.com/nammayatri/nammayatri/issues/new/choose&#34;&gt;open a new issue&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Copyright and License&lt;/h2&gt; &#xA;&lt;p&gt;This product is licensed under the &lt;a href=&#34;https://raw.githubusercontent.com/nammayatri/nammayatri/main/LICENSE&#34;&gt;AGPL-3.0 License&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>