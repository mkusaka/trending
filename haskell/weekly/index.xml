<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Haskell Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-11-20T01:42:58Z</updated>
  <subtitle>Weekly Trending of Haskell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Liqwid-Labs/agora</title>
    <updated>2022-11-20T01:42:58Z</updated>
    <id>tag:github.com,2022-11-20:/Liqwid-Labs/agora</id>
    <link href="https://github.com/Liqwid-Labs/agora" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Governance modules for Cardano protocols&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Agora &lt;span&gt;üèõ&lt;/span&gt;&lt;/h1&gt; &#xA;&lt;p&gt;Agora is a set of Plutus scripts that compose together to form a governance system.&lt;/p&gt; &#xA;&lt;h3&gt;What is Agora&lt;/h3&gt; &#xA;&lt;p&gt;Goals:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Agora aims to reduce duplication in Liqwid and XplorerDAO and to serve as a one-size-fits-all governance library for projects on the Cardano blockchain.&lt;/li&gt; &#xA; &lt;li&gt;Agora aims to be modular and flexible for specific needs but presents an opinionated architecture.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Non-goals:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Agora is not a DAO. It doesn&#39;t have tokenomics or even a token. It is simply a library for governance.&lt;/li&gt; &#xA; &lt;li&gt;Agora doesn&#39;t aim to provide any primitive tools for Plutus that are not governance-specific. For this, see &lt;a href=&#34;https://github.com/Liqwid-Labs/liqwid-plutarch-extra/&#34;&gt;liqwid-plutarch-extra&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Project setup&lt;/h2&gt; &#xA;&lt;p&gt;An up to date version of the &lt;a href=&#34;https://raw.githubusercontent.com/Liqwid-Labs/agora/staging/nixos.org&#34;&gt;Nix package manager&lt;/a&gt; (&amp;gt;=2.3) is required to build this project. For information on how to install, see the &lt;a href=&#34;https://nixos.org/download.html&#34;&gt;NixOS website&lt;/a&gt;. Important: see also &lt;a href=&#34;https://github.com/input-output-hk/plutus#nix-advice&#34;&gt;this section&lt;/a&gt; on binary caches.&lt;/p&gt; &#xA;&lt;p&gt;Open a development shell with &lt;code&gt;nix develop&lt;/code&gt; and build the project with &lt;code&gt;cabal build&lt;/code&gt;. Those pained by the need to remember to enter a Nix shell may consider using &lt;a href=&#34;https://github.com/nix-community/nix-direnv&#34;&gt;nix-direnv&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;code&gt;agora-scripts&lt;/code&gt; HTTP export server&lt;/h2&gt; &#xA;&lt;p&gt;To use scripts in a frontend, you can use the &lt;code&gt;agora-scripts&lt;/code&gt; executable which allows you to query them on-demand.&lt;/p&gt; &#xA;&lt;p&gt;The CTL repo &lt;a href=&#34;https://github.com/mlabs-haskell/agora-offchain&#34;&gt;&lt;code&gt;agora-offchain&lt;/code&gt;&lt;/a&gt; already has the setup prepared for this feature.&lt;/p&gt; &#xA;&lt;p&gt;In order to run the server, simply run the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cabal run agora-scripts -- --enable-cors-middleware&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Documentation for Agora is hosted on Notion. You can find the specs &lt;a href=&#34;https://liqwid.notion.site/e85c09d2c9a542b19aac8dd3d6caa98b?v=d863219cd6a14082a661c4959cabd6e7&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Using Agora for your protocol&lt;/h3&gt; &#xA;&lt;p&gt;If you are a protocol wanting to use Agora, read &lt;a href=&#34;https://liqwid.notion.site/Using-Agora-74ceb4a70d024992abd9ff07087013e6&#34;&gt;Using Agora&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Please read &lt;a href=&#34;https://raw.githubusercontent.com/Liqwid-Labs/agora/staging/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt;. Additionally, please follow the &lt;a href=&#34;https://liqwid.notion.site/Git-Policy-9a7979b2fd5d4604b6d042b084e7e14f&#34;&gt;Git policy&lt;/a&gt; when contributing to this project.&lt;/p&gt; &#xA;&lt;h2&gt;Overview of components&lt;/h2&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/Liqwid-Labs/agora/staging/docs/diagrams/gov-overview.svg?sanitize=true&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Road-map&lt;/h2&gt; &#xA;&lt;h3&gt;v1&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Governor&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Treasury&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Stakes&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Proposals&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Effects&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;v2&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Flexible scripts using TxT pattern integrated with governance&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Different voting mechanisms&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Available support channels info&lt;/h3&gt; &#xA;&lt;p&gt;You can find help, more information and ongoing discusion about the project here:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The &lt;a href=&#34;https://discord.gg/yGkjxrYueB&#34;&gt;Agora &amp;amp; Liqwid Libs Discord&lt;/a&gt; - Most Agora discussion happens here.&lt;/li&gt; &#xA; &lt;li&gt;Specs, issues, and project-management-related information is tracked on &lt;a href=&#34;https://www.notion.so/liqwid&#34;&gt;Notion&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>mwotton/squealgen</title>
    <updated>2022-11-20T01:42:58Z</updated>
    <id>tag:github.com,2022-11-20:/mwotton/squealgen</id>
    <link href="https://github.com/mwotton/squealgen" rel="alternate"></link>
    <summary type="html">&lt;p&gt;generate haskell types for Squeal from a running postgresql database.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;squealgen&lt;/h1&gt; &#xA;&lt;p&gt;Generate squeal types from a running database.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/mwotton/squealgen/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;why?&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://hackage.haskell.org/package/squeal-postgresql&#34;&gt;Squeal&lt;/a&gt; is a lovely way to interact with a database, but setting up the initial schema is a struggle. By default, it assumes you will be managing and migrating your database with Squeal, and if you are starting from scratch, that works great, but if you&#39;re managing it some other way, or even just want to test out Squeal on an existing database, it&#39;s tedious to have to set up the database types and keep them up to date.&lt;/p&gt; &#xA;&lt;h2&gt;how?&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;clone the repo and change into the directory&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;make prefix=$HOME/.local install&lt;/code&gt;. (We will assume here that &lt;code&gt;$HOME/.local/bin&lt;/code&gt; is in your path, obviously feel free to install wherever makes sense to you.)&lt;/li&gt; &#xA; &lt;li&gt;If my database is &lt;code&gt;cooldb&lt;/code&gt;, my haskell module file is &lt;code&gt;Schema.hs&lt;/code&gt;, and i want to use the &lt;code&gt;public&lt;/code&gt; schema (the default), I would run &lt;code&gt;squealgen cooldb Schema public &amp;gt; ~/myproject/src/Schema.hs&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;You could integrate this in various ways: perhaps just as an initial scaffold, or perhaps integrated as part of your build process. A true madman could integrate this into a TH call, but I suspect this would be slow and prone to failing (for instance, better never compile any code if you don&#39;t have access to the right version of psql or a way of spinning up an empty database.)&lt;/p&gt; &#xA;&lt;p&gt;I highly recommend having a scripted way to bring up a temporary database and run all migrations first. I use Jonathan Fischoff&#39;s &lt;a href=&#34;https://hackage.haskell.org/package/tmp-postgres-1.34.1.0&#34;&gt;tmp-postgres&lt;/a&gt; library and recommend it if you&#39;re running migrations through Haskell.&lt;/p&gt; &#xA;&lt;h2&gt;hacking?&lt;/h2&gt; &#xA;&lt;p&gt;My workflow looks like this:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;make testwatch&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;you&#39;ll need&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;initdb&lt;/code&gt; from postgresql to be in your PATH. It typically isn&#39;t on Ubuntu systems, at least: usually in /usr/lib/postgresql/$VERSION_NUMBER/bin.&lt;/li&gt; &#xA; &lt;li&gt;pg_tmp from here: &lt;a href=&#34;https://eradman.com/ephemeralpg/code/ephemeralpg-3.0.tar.gz&#34;&gt;https://eradman.com/ephemeralpg/code/ephemeralpg-3.0.tar.gz&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;make&lt;/li&gt; &#xA; &lt;li&gt;stack&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;what next?&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;support in-out parameters in functions, once I know how to model this in squeal&lt;/li&gt; &#xA; &lt;li&gt;Remove string-hacking, generate in a more principled way.&lt;/li&gt; &#xA; &lt;li&gt;Extract check constraints (maybe). This is much harder than the rest of it.&lt;/li&gt; &#xA; &lt;li&gt;Triggers&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>ingolia-lab/RiboSeq</title>
    <updated>2022-11-20T01:42:58Z</updated>
    <id>tag:github.com,2022-11-20:/ingolia-lab/RiboSeq</id>
    <link href="https://github.com/ingolia-lab/RiboSeq" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;FpAnalysis&lt;/h1&gt;</summary>
  </entry>
</feed>