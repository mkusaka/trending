<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Haskell Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-08-03T01:43:03Z</updated>
  <subtitle>Weekly Trending of Haskell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>mchav/dataframe</title>
    <updated>2025-08-03T01:43:03Z</updated>
    <id>tag:github.com,2025-08-03:/mchav/dataframe</id>
    <link href="https://github.com/mchav/dataframe" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A fast, safe, and intuitive DataFrame library.&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt; &lt;a href=&#34;https://dataframe.readthedocs.io/en/latest/&#34;&gt; &lt;img width=&#34;100&#34; height=&#34;100&#34; src=&#34;https://raw.githubusercontent.com/mchav/dataframe/master/docs/_static/haskell-logo.svg?sanitize=true&#34; alt=&#34;dataframe logo&#34;&gt; &lt;/a&gt; &lt;/h1&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a href=&#34;https://hackage.haskell.org/package/dataframe-0.2.0.2&#34;&gt; &lt;img src=&#34;https://img.shields.io/hackage/v/dataframe&#34; alt=&#34;hackage Latest Release&#34;&gt; &lt;/a&gt; &#xA; &lt;a href=&#34;https://github.com/mchav/dataframe/actions/workflows/haskel-ci.yml&#34;&gt; &lt;img src=&#34;https://github.com/mchav/dataframe/actions/workflows/haskell-ci.yml/badge.svg?sanitize=true&#34; alt=&#34;C/I&#34;&gt; &lt;/a&gt; &#xA;&lt;/div&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://dataframe.readthedocs.io/en/latest/&#34;&gt;User guide&lt;/a&gt; | &lt;a href=&#34;https://discord.gg/XJE5wKT2kb&#34;&gt;Discord&lt;/a&gt; &lt;/p&gt; &#xA;&lt;h1&gt;DataFrame&lt;/h1&gt; &#xA;&lt;p&gt;A fast, safe, and intuitive DataFrame library.&lt;/p&gt; &#xA;&lt;h2&gt;Why use this DataFrame library?&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Encourages concise, declarative, and composable data pipelines.&lt;/li&gt; &#xA; &lt;li&gt;Static typing makes code easier to reason about and catches many bugs at compile time—before your code ever runs.&lt;/li&gt; &#xA; &lt;li&gt;Delivers high performance thanks to Haskell’s optimizing compiler and efficient memory model.&lt;/li&gt; &#xA; &lt;li&gt;Designed for interactivity: expressive syntax, helpful error messages, and sensible defaults.&lt;/li&gt; &#xA; &lt;li&gt;Works seamlessly in both command-line and notebook environments—great for exploration and scripting alike.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Example usage&lt;/h2&gt; &#xA;&lt;h3&gt;Interactive environment&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/mchav/dataframe/main/static/example.gif&#34; alt=&#34;Screencast of usage in GHCI&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Key features in example:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Intuitive, SQL-like API to get from data to insights.&lt;/li&gt; &#xA; &lt;li&gt;Create typed, completion-ready references to columns in a dataframe using &lt;code&gt;:exposeColumns&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Type-safe column transformations for faster and safer exploration.&lt;/li&gt; &#xA; &lt;li&gt;Fluid, chaining API that makes code easy to reason about.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Standalone script example&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;-- Useful Haskell extensions.&#xA;{-# LANGUAGE OverloadedStrings #-} -- Allow string literal to be interpreted as any other string type.&#xA;{-# LANGUAGE TypeApplications #-} -- Convenience syntax for specifiying the type `sum a b :: Int` vs `sum @Int a b&#39;. &#xA;&#xA;import qualified DataFrame as D -- import for general functionality.&#xA;import qualified DataFrame.Functions as F -- import for column expressions.&#xA;&#xA;import DataFrame ((|&amp;gt;)) -- import chaining operator with unqualified.&#xA;&#xA;main :: IO ()&#xA;main = do&#xA;    df &amp;lt;- D.readTsv &#34;./data/chipotle.tsv&#34;&#xA;    let quantity = F.col &#34;quantity&#34; :: D.Expr Int -- A typed reference to a column.&#xA;    print (df&#xA;      |&amp;gt; D.select [&#34;item_name&#34;, &#34;quantity&#34;]&#xA;      |&amp;gt; D.groupBy [&#34;item_name&#34;]&#xA;      |&amp;gt; D.aggregate [ (F.sum quantity)     `F.as` &#34;sum_quantity&#34;&#xA;                     , (F.mean quantity)    `F.as` &#34;mean_quantity&#34;&#xA;                     , (F.maximum quantity) `F.as` &#34;maximum_quantity&#34;&#xA;                     ]&#xA;      |&amp;gt; D.sortBy D.Descending [&#34;sum_quantity&#34;]&#xA;      |&amp;gt; D.take 10)&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Output:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;------------------------------------------------------------------------------------------&#xA;index |          item_name           | sum_quantity |    mean_quanity    | maximum_quanity&#xA;------|------------------------------|--------------|--------------------|----------------&#xA; Int  |             Text             |     Int      |       Double       |       Int      &#xA;------|------------------------------|--------------|--------------------|----------------&#xA;0     | Chicken Bowl                 | 761          | 1.0482093663911847 | 3              &#xA;1     | Chicken Burrito              | 591          | 1.0687160940325497 | 4              &#xA;2     | Chips and Guacamole          | 506          | 1.0563674321503131 | 4              &#xA;3     | Steak Burrito                | 386          | 1.048913043478261  | 3              &#xA;4     | Canned Soft Drink            | 351          | 1.1661129568106312 | 4              &#xA;5     | Chips                        | 230          | 1.0900473933649288 | 3              &#xA;6     | Steak Bowl                   | 221          | 1.04739336492891   | 3              &#xA;7     | Bottled Water                | 211          | 1.3024691358024691 | 10             &#xA;8     | Chips and Fresh Tomato Salsa | 130          | 1.1818181818181819 | 15             &#xA;9     | Canned Soda                  | 126          | 1.2115384615384615 | 4 &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Full example in &lt;code&gt;./examples&lt;/code&gt; folder using many of the constructs in the API.&lt;/p&gt; &#xA;&lt;h2&gt;Installing&lt;/h2&gt; &#xA;&lt;h3&gt;Jupyter notebook&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;We have a &lt;a href=&#34;https://ulwazi-exh9dbh2exbzgbc9.westus-01.azurewebsites.net/lab&#34;&gt;hosted version of the Jupyter notebook&lt;/a&gt; on azure sites. This is hosted on Azure&#39;s free tier so it can only support 3 or 4 kernels at a time.&lt;/li&gt; &#xA; &lt;li&gt;To get started quickly, use the Dockerfile in the &lt;a href=&#34;https://github.com/mchav/ihaskell-dataframe&#34;&gt;ihaskell-dataframe&lt;/a&gt; to build and run an image with dataframe integration.&lt;/li&gt; &#xA; &lt;li&gt;For a preview check out the &lt;a href=&#34;https://github.com/mchav/dataframe/raw/main/docs/California%20Housing.ipynb&#34;&gt;California Housing&lt;/a&gt; notebook.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;CLI&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Run the installation script &lt;code&gt;curl &#39;=https&#39; --tlsv1.2 -sSf https://raw.githubusercontent.com/mchav/dataframe/refs/heads/main/scripts/install.sh | sh&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Download the run script with: &lt;code&gt;curl --output dataframe &#34;https://raw.githubusercontent.com/mchav/dataframe/refs/heads/main/scripts/dataframe.sh&#34;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Make the script executable: &lt;code&gt;chmod +x dataframe&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Add the script your path: &lt;code&gt;export PATH=$PATH:./dataframe&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run the script with: &lt;code&gt;dataframe&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;What is exploratory data analysis?&lt;/h2&gt; &#xA;&lt;p&gt;We provide a primer &lt;a href=&#34;https://github.com/mchav/dataframe/raw/main/docs/exploratory_data_analysis_primer.md&#34;&gt;here&lt;/a&gt; and show how to do some common analyses.&lt;/p&gt; &#xA;&lt;h2&gt;Coming from other dataframe libraries&lt;/h2&gt; &#xA;&lt;p&gt;Familiar with another dataframe library? Get started:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mchav/dataframe/raw/main/docs/coming_from_pandas.md&#34;&gt;Coming from Pandas&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mchav/dataframe/raw/main/docs/coming_from_polars.md&#34;&gt;Coming from Polars&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mchav/dataframe/raw/main/docs/coming_from_dplyr.md&#34;&gt;Coming from dplyr&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Supported input formats&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;CSV&lt;/li&gt; &#xA; &lt;li&gt;Apache Parquet (still buggy and experimental)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Future work&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Apache arrow compatability&lt;/li&gt; &#xA; &lt;li&gt;Integration with common data formats (currently only supports CSV)&lt;/li&gt; &#xA; &lt;li&gt;Support windowed plotting (currently only supports ASCII plots)&lt;/li&gt; &#xA; &lt;li&gt;Host the whole library + Jupyter lab on Azure with auth and isolation.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>