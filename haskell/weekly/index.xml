<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Haskell Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-05-29T02:12:00Z</updated>
  <subtitle>Weekly Trending of Haskell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>input-output-hk/cardano-base</title>
    <updated>2022-05-29T02:12:00Z</updated>
    <id>tag:github.com,2022-05-29:/input-output-hk/cardano-base</id>
    <link href="https://github.com/input-output-hk/cardano-base" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Code used throughout the Cardano eco-system&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;cardano-base&lt;/h1&gt; &#xA;&lt;p&gt;A collection of miscellaneous packages used by Cardano that cover:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;cryptography&lt;/li&gt; &#xA; &lt;li&gt;serialization&lt;/li&gt; &#xA; &lt;li&gt;slotting&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Each sub-project has its own README.&lt;/p&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://github.com/input-output-hk/cardano-base/wiki&#34;&gt;wiki&lt;/a&gt; for more documentation.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>dapphub/dapptools</title>
    <updated>2022-05-29T02:12:00Z</updated>
    <id>tag:github.com,2022-05-29:/dapphub/dapptools</id>
    <link href="https://github.com/dapphub/dapptools" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Dapp, Seth, Hevm, and more&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Dapp tools by DappHub &lt;a href=&#34;https://dapphub.chat&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/community-chat-blue.svg?style=flat-square&#34; alt=&#34;Chat&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;Hello!&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;dapptools&lt;/code&gt; is a suite of Ethereum focused CLI tools following the Unix design philosophy, favoring composability, configurability and extensibility.&lt;/p&gt; &#xA;&lt;p&gt;This repository contains the source code for several programs hand-crafted and maintained by DappHub, along with dependency management, courtesy of Nix.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dapphub/dapptools/master/src/dapp&#34;&gt;dapp&lt;/a&gt; - All you need Ethereum development tool. Build, test, fuzz, formally verify, debug &amp;amp; deploy solidity contracts.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dapphub/dapptools/master/src/seth&#34;&gt;seth&lt;/a&gt; - Ethereum CLI. Query contracts, send transactions, follow logs, slice &amp;amp; dice data.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dapphub/dapptools/master/src/hevm&#34;&gt;hevm&lt;/a&gt; - Testing oriented EVM implementation. Debug, fuzz, or symbolically execute code against local or mainnet state.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dapphub/dapptools/master/src/ethsign&#34;&gt;ethsign&lt;/a&gt; - Sign Ethereum transactions from a local keystore or hardware wallet.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Development Status&lt;/h2&gt; &#xA;&lt;p&gt;dapptools is currently in a stage of clandestine development where support for the casual user may be deprived. The software can now be considered free as in free puppy. Users seeking guidance can explore using foundry as an alternative&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Install Nix if you haven&#39;t already (&lt;a href=&#34;https://nixos.org/download.html&#34;&gt;instructions&lt;/a&gt;). Then install dapptools:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;curl https://dapp.tools/install | sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This configures the dapphub binary cache and installs the &lt;code&gt;dapp&lt;/code&gt;, &lt;code&gt;solc&lt;/code&gt;, &lt;code&gt;seth&lt;/code&gt; and &lt;code&gt;hevm&lt;/code&gt; executables.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; Arm support in the GHC haskell compiiler is still fairly bleeding edge, until this situation stabilises, users of M1 macs must run dapptools (and the installer!) under rosetta 2 (i.e. as an emulated x86 program). Make sure &lt;code&gt;/etc/nix/nix.conf&lt;/code&gt; contains &lt;code&gt;system = x86_64-darwin&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can also install an individual tool with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;nix-env -iA &amp;lt;tool&amp;gt; -f $(curl -sS https://api.github.com/repos/dapphub/dapptools/releases/latest | jq -r .tarball_url)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you instead want to build from &lt;code&gt;master&lt;/code&gt;, change the url to &lt;code&gt;https://github.com/dapphub/dapptools/archive/master.tar.gz&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Prebuilt hevm binary&lt;/h3&gt; &#xA;&lt;p&gt;Static binaries for linux and macos of hevm are available for each release at &lt;a href=&#34;https://github.com/dapphub/dapptools/releases&#34;&gt;https://github.com/dapphub/dapptools/releases&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Most functionality is available out of the box, but for symbolic execution you will need &lt;a href=&#34;https://github.com/ethereum/solidity&#34;&gt;&lt;code&gt;solc&lt;/code&gt;&lt;/a&gt; and (&lt;a href=&#34;https://github.com/Z3Prover/z3/&#34;&gt;&lt;code&gt;z3&lt;/code&gt;&lt;/a&gt; or &lt;a href=&#34;https://github.com/CVC4/CVC4&#34;&gt;&lt;code&gt;cvc4&lt;/code&gt;&lt;/a&gt; (or both)).&lt;/p&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;p&gt;For more information about the tools, consult the individual README pages:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dapphub/dapptools/master/src/seth/README.md&#34;&gt;seth&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dapphub/dapptools/master/src/dapp/README.md&#34;&gt;dapp&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dapphub/dapptools/master/src/hevm/README.md&#34;&gt;hevm&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dapphub/dapptools/master/src/ethsign/README.md&#34;&gt;ethsign&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;or use the &lt;code&gt;--help&lt;/code&gt; flag for any tool.&lt;/p&gt; &#xA;&lt;p&gt;We&#39;re also happy to answer any questions at &lt;a href=&#34;https://dapphub.chat/&#34;&gt;https://dapphub.chat/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;p&gt;Deploy a &#39;Hello World&#39; contract and call it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;export ETH_RPC_URL=https://mainnet.infura.io/v3/$YOUR_API_KEY&#xA;export ETH_FROM=$YOUR_ADDRESS&#xA;echo &#39;contract Hello { function hi() public pure returns(string memory) {return &#34;Hello, World!&#34;;}}&#39; | solc --bin -o . --overwrite -&#xA;HELLO=$(seth send --create $(&amp;lt;Hello.bin))&#xA;seth call $HELLO &#34;hi()(string)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Debug the first transaction of the latest block in the interactive debugger:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;export ETH_RPC_URL=https://mainnet.infura.io/v3/$YOUR_API_KEY&#xA;seth run-tx $(seth block latest transactions | jq .&#39;[0]&#39; -r) --debug&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If Vitalik&#39;s next transaction were a contract deployment, calculate the address it would be deployed at:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;export ETH_RPC_URL=https://mainnet.infura.io/v3/$YOUR_API_KEY&#xA;dapp address 0xab5801a7d398351b8be11c439e05c5b3259aec9b $(seth nonce 0xab5801a7d398351b8be11c439e05c5b3259aec9b)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Symbolically explore the possible execution paths of a call to &lt;code&gt;dai.transfer(address,uint)&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;seth bundle-source 0x6b175474e89094c44da98b954eedeac495271d0f &amp;gt; daisrc.json &amp;amp;&amp;amp; \&#xA;hevm symbolic --address 0x6b175474e89094c44da98b954eedeac495271d0f --rpc $ETH_RPC_URL  --debug --sig &#34;transfer(address,uint256)&#34; --json-file daisrc.json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Contributions are always welcome! You may be interested in the &lt;a href=&#34;https://raw.githubusercontent.com/dapphub/dapptools/master/ARCHITECTURE.md&#34;&gt;architecture&lt;/a&gt; of this repository.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://builtwithnix.org&#34;&gt;&lt;img src=&#34;https://builtwithnix.org/badge.svg?sanitize=true&#34; alt=&#34;built with nix&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>xmonad/xmonad</title>
    <updated>2022-05-29T02:12:00Z</updated>
    <id>tag:github.com,2022-05-29:/xmonad/xmonad</id>
    <link href="https://github.com/xmonad/xmonad" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The core of xmonad, a small but functional ICCCM-compliant tiling window manager&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://xmonad.org/&#34;&gt;&lt;img alt=&#34;XMonad logo&#34; src=&#34;https://xmonad.org/images/logo-wrapped.svg?sanitize=true&#34; height=&#34;150&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://hackage.haskell.org/package/xmonad&#34;&gt;&lt;img alt=&#34;Hackage&#34; src=&#34;https://img.shields.io/hackage/v/xmonad?logo=haskell&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/xmonad/xmonad/raw/readme/LICENSE&#34;&gt;&lt;img alt=&#34;License&#34; src=&#34;https://img.shields.io/github/license/xmonad/xmonad&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://haskell.org/&#34;&gt;&lt;img alt=&#34;Made in Haskell&#34; src=&#34;https://img.shields.io/badge/Made%20in-Haskell-%235e5086?logo=haskell&#34;&gt;&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://github.com/xmonad/xmonad/actions/workflows/stack.yml&#34;&gt;&lt;img alt=&#34;Stack&#34; src=&#34;https://img.shields.io/github/workflow/status/xmonad/xmonad/Stack?label=Stack&amp;amp;logo=githubactions&amp;amp;logoColor=white&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/xmonad/xmonad/actions/workflows/haskell-ci.yml&#34;&gt;&lt;img alt=&#34;Cabal&#34; src=&#34;https://img.shields.io/github/workflow/status/xmonad/xmonad/Haskell-CI?label=Cabal&amp;amp;logo=githubactions&amp;amp;logoColor=white&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/xmonad/xmonad/actions/workflows/nix.yml&#34;&gt;&lt;img alt=&#34;Nix&#34; src=&#34;https://img.shields.io/github/workflow/status/xmonad/xmonad/Nix?label=Nix&amp;amp;logo=githubactions&amp;amp;logoColor=white&#34;&gt;&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://github.com/sponsors/xmonad&#34;&gt;&lt;img alt=&#34;GitHub Sponsors&#34; src=&#34;https://img.shields.io/github/sponsors/xmonad?label=GitHub%20Sponsors&amp;amp;logo=githubsponsors&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/xmonad&#34;&gt;&lt;img alt=&#34;Open Collective&#34; src=&#34;https://img.shields.io/opencollective/all/xmonad?label=Open%20Collective&amp;amp;logo=opencollective&#34;&gt;&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://web.libera.chat/#xmonad&#34;&gt;&lt;img alt=&#34;Chat on #xmonad@irc.libera.chat&#34; src=&#34;https://img.shields.io/badge/%23%20chat-on%20libera-brightgreen&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://matrix.to/#/#xmonad:matrix.org&#34;&gt;&lt;img alt=&#34;Chat on #xmonad:matrix.org&#34; src=&#34;https://img.shields.io/matrix/xmonad:matrix.org?logo=matrix&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;h1&gt;xmonad&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;A tiling window manager for X11.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://xmonad.org/&#34;&gt;XMonad&lt;/a&gt; is a tiling window manager for X11. Windows are arranged automatically to tile the screen without gaps or overlap, maximising screen use. Window manager features are accessible from the keyboard: a mouse is optional. xmonad is written, configured and extensible in Haskell. Custom layout algorithms, key bindings and other extensions may be written by the user in config files. Layouts are applied dynamically, and different layouts may be used on each workspace. Xinerama is fully supported, allowing windows to be tiled on several physical screens.&lt;/p&gt; &#xA;&lt;p&gt;This repository contains the &lt;a href=&#34;https://hackage.haskell.org/package/xmonad&#34;&gt;xmonad&lt;/a&gt; package, a minimal, stable, yet extensible core. It is accompanied by &lt;a href=&#34;https://github.com/xmonad/xmonad-contrib&#34;&gt;xmonad-contrib&lt;/a&gt;, a library of hundreds of additional community-maintained tiling algorithms and extension modules. The two combined make for a powerful X11 window-manager with endless customization possibilities. They are, quite literally, libraries for creating your own window manager.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;For installation and configuration instructions, please see:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xmonad.org/download.html&#34;&gt;downloading and installing xmonad&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xmonad.org/INSTALL.html&#34;&gt;installing latest xmonad snapshot from git&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xmonad.org/TUTORIAL.html&#34;&gt;configuring xmonad&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you run into any trouble, consult our &lt;a href=&#34;https://xmonad.org/documentation.html&#34;&gt;documentation&lt;/a&gt; or ask the &lt;a href=&#34;https://xmonad.org/community.html&#34;&gt;community&lt;/a&gt; for help.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;We welcome all forms of contributions:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/xmonad/xmonad/issues&#34;&gt;bug reports and feature ideas&lt;/a&gt; (also to &lt;a href=&#34;https://github.com/xmonad/xmonad-contrib/issues&#34;&gt;xmonad-contrib&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/xmonad/xmonad/pulls&#34;&gt;bug fixes, new features, new extensions&lt;/a&gt; (usually to &lt;a href=&#34;https://github.com/xmonad/xmonad-contrib/pulls&#34;&gt;xmonad-contrib&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;documentation fixes and improvements: &lt;a href=&#34;https://github.com/xmonad/xmonad&#34;&gt;xmonad&lt;/a&gt;, &lt;a href=&#34;https://github.com/xmonad/xmonad-contrib&#34;&gt;xmonad-contrib&lt;/a&gt;, &lt;a href=&#34;https://github.com/xmonad/xmonad-web&#34;&gt;xmonad-web&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;helping others in the &lt;a href=&#34;https://xmonad.org/community.html&#34;&gt;community&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;financial support: &lt;a href=&#34;https://github.com/sponsors/xmonad&#34;&gt;GitHub Sponsors&lt;/a&gt;, &lt;a href=&#34;https://opencollective.com/xmonad&#34;&gt;Open Collective&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Please do read the &lt;a href=&#34;https://github.com/xmonad/xmonad/raw/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING&lt;/a&gt; document for more information about bug reporting and code contributions. For a brief overview of the architecture and code conventions, see the &lt;a href=&#34;https://xmonad.github.io/xmonad-docs/xmonad-contrib/XMonad-Doc-Developing.html&#34;&gt;documentation for the &lt;code&gt;XMonad.Doc.Developing&lt;/code&gt; module&lt;/a&gt;. If in doubt, &lt;a href=&#34;https://xmonad.org/community.html&#34;&gt;talk to us&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Authors&lt;/h2&gt; &#xA;&lt;p&gt;Started in 2007 by &lt;a href=&#34;https://github.com/spencerjanssen&#34;&gt;Spencer Janssen&lt;/a&gt;, &lt;a href=&#34;https://github.com/donsbot&#34;&gt;Don Stewart&lt;/a&gt; and &lt;a href=&#34;https://github.com/JasonCreighton&#34;&gt;Jason Creighton&lt;/a&gt;, the &lt;a href=&#34;https://xmonad.org/&#34;&gt;XMonad&lt;/a&gt; project lives on thanks to &lt;a href=&#34;https://github.com/xmonad/xmonad/raw/master/MAINTAINERS.md&#34;&gt;new generations of maintainers&lt;/a&gt; and &lt;a href=&#34;https://github.com/xmonad/xmonad/graphs/contributors&#34;&gt;dozens of contributors&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>input-output-hk/cardano-addresses</title>
    <updated>2022-05-29T02:12:00Z</updated>
    <id>tag:github.com,2022-05-29:/input-output-hk/cardano-addresses</id>
    <link href="https://github.com/input-output-hk/cardano-addresses" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Addresses and mnemonic manipulation &amp; derivations&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;big&gt;&lt;strong&gt;Cardano Addresses&lt;/strong&gt;&lt;/big&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/input-output-hk/cardano-addresses/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/input-output-hk/cardano-addresses?color=%239b59b6&amp;amp;label=RELEASE&amp;amp;sort=semver&amp;amp;style=for-the-badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.npmjs.com/package/cardano-addresses&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/v/cardano-addresses?color=%239b59b6&amp;amp;style=for-the-badge&#34;&gt;&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://github.com/input-output-hk/cardano-addresses/actions?query=workflow%3A&amp;quot;Continuous Integration (Linux)&amp;quot;&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/workflow/status/input-output-hk/cardano-addresses/Continuous%20Integration%20(Linux)?style=for-the-badge&amp;amp;label=BUILD%20(Linux)&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/input-output-hk/cardano-addresses/actions?query=workflow%3A&amp;quot;Continuous Integration (Windows)&amp;quot;&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/workflow/status/input-output-hk/cardano-addresses/Continuous%20Integration%20(Windows)?style=for-the-badge&amp;amp;label=BUILD%20(Windows)&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/input-output-hk/cardano-addresses/actions?query=workflow%3A&amp;quot;TypeScript NPM Package&amp;quot;&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/workflow/status/input-output-hk/cardano-addresses/TypeScript%20NPM%20Package?style=for-the-badge&amp;amp;label=BUILD%20(TypeScript)&#34;&gt;&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://input-output-hk.github.io/cardano-addresses/coverage/hpc_index.html&#34;&gt;&lt;img src=&#34;https://input-output-hk.github.io/cardano-addresses/coverage/badge.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;This module provides mnemonic (backup phrase) creation, and conversion of a mnemonic to seed for wallet restoration, and address derivation functionalities.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/input-output-hk/cardano-addresses/master/.github/example.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;API documentation is available &lt;a href=&#34;https://input-output-hk.github.io/cardano-addresses/haddock&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Command-Line&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;cardano-address&lt;/code&gt; comes with a command-line interface for Linux. See the &lt;a href=&#34;https://github.com/input-output-hk/cardano-addresses/releases&#34;&gt;release artifacts&lt;/a&gt; or &lt;a href=&#34;https://github.com/input-output-hk/cardano-addresses/actions?query=workflow%3A%22Continuous+Integration%22&#34;&gt;continuous integration artifacts&lt;/a&gt; to get a pre-compiled binary, or &lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/cardano-addresses/master/#docker-image&#34;&gt;build a Docker image&lt;/a&gt;. The command-line is self explanatory by using &lt;code&gt;--help&lt;/code&gt; on various commands and sub-commands.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span&gt;💡&lt;/span&gt; Most commands read argument from the standard input. This prevent sensitive information from appearing into your shell history and, makes it easy to pipe commands!&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;How to generate a recovery phrase (&lt;strong&gt;phrase.prv&lt;/strong&gt;)&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ cardano-address recovery-phrase generate --size 15 &amp;gt; phrase.prv&#xA;exercise club noble adult miracle awkward problem olympic puppy private goddess piano fatal fashion vacuum&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;How to generate a root private key (&lt;strong&gt;root.xsk&lt;/strong&gt;)&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ cardano-address key from-recovery-phrase Shelley &amp;lt; phrase.prv &amp;gt; root.xsk&#xA;root_xsk1hqzfzrgskgnpwskxxrv5khs7ess82ecy8za9l5ef7e0afd2849p3zryje8chk39nxtva0sww5me3pzkej4rvd5cae3q3v8eu7556n6pdrp4fdu8nsglynpmcppxxvfdyzdz5gfq3fefjepxhvqspmuyvmvqg8983&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;blockquote&gt; &#xA;  &lt;p&gt;&lt;span&gt;ℹ&lt;/span&gt; Notice the &lt;code&gt;root_xsk&lt;/code&gt; prefix to identify a root extended signing (private) key.&lt;/p&gt; &#xA; &lt;/blockquote&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;How to generate a wallet id based on extended root or account keys (&lt;strong&gt;phrase.prv&lt;/strong&gt;)&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ cat root.xsk&#xA;root_xsk1hqzfzrgskgnpwskxxrv5khs7ess82ecy8za9l5ef7e0afd2849p3zryje8chk39nxtva0sww5me3pzkej4rvd5cae3q3v8eu7556n6pdrp4fdu8nsglynpmcppxxvfdyzdz5gfq3fefjepxhvqspmuyvmvqg8983&#xA;$ cardano-address key walletid &amp;lt; root.xsk&#xA;163ea20ad0611e4815a61c44bb32c82a81538999&#xA;&#xA;$ cardano-address key public --with-chain-code &amp;lt; root.xsk | cardano-address key walletid&#xA;163ea20ad0611e4815a61c44bb32c82a81538999&#xA;&#xA;$ cardano-address key child 1852H/1815H/0H &amp;lt; root.xsk &amp;gt; acct.xsk&#xA;$ cat acct.xsk&#xA;acct_xsk15ztha8ws7qjze5vmdkwqh0ddzvtlgstkg79swazhc5lxns2849plr3msjx082mcmd9hc24ujczk2cjnjwrcz4tjaucw9jqf8h5yc7d84rac0zdckkuhazpam0kleg4sq52ph3e0wn98a64hr8g5cpmh9zqpwtrhy&#xA;$ cardano-address key walletid &amp;lt; acct.xsk&#xA;15fd6c2130b0758ec7995bf9771d2a6602417c39&#xA;$ cardano-address key public --with-chain-code &amp;lt; acct.xsk | cardano-address key walletid&#xA;15fd6c2130b0758ec7995bf9771d2a6602417c39&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;How to generate a wallet id based on account keys of shared wallet (&lt;strong&gt;phrase.prv&lt;/strong&gt;)&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ cardano-address key from-recovery-phrase Shared &amp;lt; phrase.prv &amp;gt; root.shared_xsk&#xA;root_shared_xsk1hqzfzrgskgnpwskxxrv5khs7ess82ecy8za9l5ef7e0afd2849p3zryje8chk39nxtva0sww5me3pzkej4rvd5cae3q3v8eu7556n6pdrp4fdu8nsglynpmcppxxvfdyzdz5gfq3fefjepxhvqspmuyvmvzteqlc&#xA;&#xA;$ cardano-address key child 1854H/1815H/0H &amp;lt; root.shared_xsk &amp;gt; acct.shared_xsk&#xA;acct_shared_xsk14zh0kh0geaz9qpxv6q0n5upq8ux4n97u2gyl69mnhan74w6849pa3hj2p40xg0nugw8tzqu5eynzjunay6tffru9wdjank0phsfuc7vngjsmtktel05g6mx555tw8nxr8rpn2gac6km5plu9mwqsz54rfyhwd7pd&#xA;&#xA;$ cardano-address key walletid &amp;lt; acct.shared_xsk&#xA;user error (shared wallet needs to have at least spending script specified)&#xA;&#xA;$ cardano-address key walletid --spending &#34;cosigner#0&#34; &amp;lt; acct.shared_xsk&#xA;185d3582fc4892c4528614210b13e9a775dd7d02&#xA;&#xA;$ cardano-address key public --with-chain-code &amp;lt; acct.shared_xsk | cardano-address key walletid --spending &#34;cosigner#0&#34;&#xA;185d3582fc4892c4528614210b13e9a775dd7d02&#xA;&#xA;$ cardano-address key walletid --spending &#34;all [cosigner#0, active_until 1000]&#34; &amp;lt; acct.shared_xsk&#xA;42ecb214586dcbcb593688fb081784fa0aebb2c0&#xA;&#xA;$ cardano-address key walletid --spending &#34;all [cosigner#0, active_until 1000]&#34; --staking &#34;cosigner#1&#34; &amp;lt; acct.shared_xsk&#xA;12dc98557a4c5aa00575c5d1f0dbfa3837261e32&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;How to generate a private policy key (&lt;strong&gt;policy.xsk&lt;/strong&gt;), a public policy key (&lt;strong&gt;policy.vk&lt;/strong&gt;) and its hash (&lt;strong&gt;policy.vkh&lt;/strong&gt;)&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ cardano-address key child 1855H/1815H/0H &amp;lt; root.xsk &amp;gt; policy.xsk&#xA;policy_xsk1hr47zvxgzeeutgq50r965ygwxys86cwp8wdjqftlhan8mw6849pus6vc50dznjs5vkyjcz9usl6964u6nha88slrh8hyex74xnlfehcrkp80cp8wgzkqh22dzy7c48ekhhvvf2zz8hqakjwgfzgrjq5lx538et75&#xA;&#xA;$ cardano-address key child 1855H/1815H/0H &amp;lt; root.xsk | cardano-address key public --with-chain-code &amp;gt; policy.xvk&#xA;policy_xvk1e9ngmlhcwhszwyuxwc7anwk6tvzwndldz7j262rvfpd049tq74mq8vzwlszwus9vpw556yfa320nd0wccj5yy0wpmdyusjys8ypf7dgaauf0m&#xA;&#xA;$ cardano-address key child 1855H/1815H/0H &amp;lt; root.xsk | cardano-address key public --without-chain-code &amp;gt; policy.vk&#xA;policy_vk1e9ngmlhcwhszwyuxwc7anwk6tvzwndldz7j262rvfpd049tq74mq0ylkrs&#xA;&#xA;$ cardano-address key hash &amp;lt; policy.xvk&#xA;policy_vkh1qpc9xly4lc7yt98gcf59kdcqcss6dda4u9g72e775yxpxeypamc&#xA;$ cardano-address key hash &amp;lt; policy.vk&#xA;policy_vkh1qpc9xly4lc7yt98gcf59kdcqcss6dda4u9g72e775yxpxeypamc&#xA;$ cardano-address key hash --hex &amp;lt; policy.vk&#xA;0070537c95fe3c4594e8c2685b3700c421a6b7b5e151e567dea10c13&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;blockquote&gt; &#xA;  &lt;p&gt;&lt;span&gt;ℹ&lt;/span&gt; The last segment in the path is the key index and can be incremented up to &lt;code&gt;2^31-1&lt;/code&gt; to derive more keys.&lt;/p&gt; &#xA; &lt;/blockquote&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;How to generate a payment verification key (&lt;strong&gt;addr.xvk&lt;/strong&gt;)&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ cardano-address key child 1852H/1815H/0H/0/0 &amp;lt; root.xsk | cardano-address key public --with-chain-code &amp;gt; addr.xvk&#xA;addr_xvk1grvg8qzmkmw2n0dm4pd0h3j4dv6yglyammyp733eyj629dc3z28v6wk22nfmru6xz0vl2s3y5xndyd57fu70hrt84c6zkvlwx6fdl7ct9j7yc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;blockquote&gt; &#xA;  &lt;p&gt;&lt;span&gt;ℹ&lt;/span&gt; The last segment in the path is the key index and can be incremented up to &lt;code&gt;2^31-1&lt;/code&gt; to derive more keys.&lt;/p&gt; &#xA; &lt;/blockquote&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;How to generate a stake verification key (&lt;strong&gt;stake.xvk&lt;/strong&gt;)&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ cardano-address key child 1852H/1815H/0H/2/0 &amp;lt; root.xsk | cardano-address key public --with-chain-code &amp;gt; stake.xvk&#xA;stake_xvk1658atzttunamzn80204khrg0qfdk5nvmrutlmmpg7xlsyaggwa7h9z4smmeqsvs67qhyqmc2lqa0vy36rf2la74ym8a5p93zp4qtpuq6ky3ve&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;blockquote&gt; &#xA;  &lt;p&gt;&lt;span&gt;ℹ&lt;/span&gt; The last segment in the path is the key index and can be incremented up to &lt;code&gt;2^31-1&lt;/code&gt; to derive more keys.&lt;/p&gt; &#xA; &lt;/blockquote&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;How to generate a hash for payment verification key (&lt;strong&gt;addr.xvk&lt;/strong&gt;)&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ cardano-address key child 1852H/1815H/0H/0/0 &amp;lt; root.xsk | cardano-address key public --with-chain-code &amp;gt; addr.xvk&#xA;addr_xvk1grvg8qzmkmw2n0dm4pd0h3j4dv6yglyammyp733eyj629dc3z28v6wk22nfmru6xz0vl2s3y5xndyd57fu70hrt84c6zkvlwx6fdl7ct9j7yc&#xA;$ cardano-address key hash &amp;lt; addr.xvk&#xA;addr_vkh12j28hnmtwcp3n08vy58vyf0arnnrhtavu3lrfdztw0j0jng3d6v&#xA;$ cardano-address key hash --hex &amp;lt; addr.xvk&#xA;54947bcf6b760319bcec250ec225fd1ce63baface47e34b44b73e4f9&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;blockquote&gt; &#xA;  &lt;p&gt;&lt;span&gt;ℹ&lt;/span&gt; The hashing is available for both stake and payment verification keys. Additional flag &#39;--hex&#39; can be used.&lt;/p&gt; &#xA; &lt;/blockquote&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;How to generate a payment address from a payment key (&lt;strong&gt;payment.addr&lt;/strong&gt;)&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ cardano-address address payment --network-tag testnet &amp;lt; addr.xvk &amp;gt; payment.addr&#xA;addr_test1vp2fg770ddmqxxduasjsas39l5wwvwa04nj8ud95fde7f7guscp6v&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;How to generate a delegated payment address from a stake key (&lt;strong&gt;payment-delegated.addr&lt;/strong&gt;)&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ cardano-address address delegation $(cat stake.xvk) &amp;lt; payment.addr &amp;gt; payment-delegated.addr&#xA;addr_test1qp2fg770ddmqxxduasjsas39l5wwvwa04nj8ud95fde7f70k6tew7wrnx0s4465nx05ajz890g44z0kx6a3gsnms4c4qq8ve0n&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;How to generate a stake address from a stake key (&lt;strong&gt;stake.addr&lt;/strong&gt;)&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ cardano-address address stake --network-tag testnet &amp;lt; stake.xvk &amp;gt; stake.addr&#xA;stake_test1urmd9uh08pen8c26a2fn86weprjh52638mrdwc5gfac2u2s25zpat%&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;How to inspect address&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ echo addr_test1vp2fg770ddmqxxduasjsas39l5wwvwa04nj8ud95fde7f7guscp6v | cardano-address address inspect&#xA;{&#xA;    &#34;stake_reference&#34;: &#34;none&#34;,&#xA;    &#34;spending_key_hash_bech32&#34;: &#34;addr_vkh12j28hnmtwcp3n08vy58vyf0arnnrhtavu3lrfdztw0j0jng3d6v&#34;,&#xA;    &#34;address_style&#34;: &#34;Shelley&#34;,&#xA;    &#34;spending_key_hash&#34;: &#34;54947bcf6b760319bcec250ec225fd1ce63baface47e34b44b73e4f9&#34;,&#xA;    &#34;network_tag&#34;: 0,&#xA;    &#34;address_type&#34;: 6&#xA;}&#xA;&#xA;$ echo addr_test1qp2fg770ddmqxxduasjsas39l5wwvwa04nj8ud95fde7f70k6tew7wrnx0s4465nx05ajz890g44z0kx6a3gsnms4c4qq8ve0n | cardano-address address inspect&#xA;{&#xA;    &#34;stake_reference&#34;: &#34;by value&#34;,&#xA;    &#34;stake_key_hash_bech32&#34;: &#34;stake_vkh17mf09mecwve7zkh2jve7nkggu4azk5f7cmtk9zz0wzhz5efq2w6&#34;,&#xA;    &#34;stake_key_hash&#34;: &#34;f6d2f2ef387333e15aea9333e9d908e57a2b513ec6d762884f70ae2a&#34;,&#xA;    &#34;spending_key_hash_bech32&#34;: &#34;addr_vkh12j28hnmtwcp3n08vy58vyf0arnnrhtavu3lrfdztw0j0jng3d6v&#34;,&#xA;    &#34;address_style&#34;: &#34;Shelley&#34;,&#xA;    &#34;spending_key_hash&#34;: &#34;54947bcf6b760319bcec250ec225fd1ce63baface47e34b44b73e4f9&#34;,&#xA;    &#34;network_tag&#34;: 0,&#xA;    &#34;address_type&#34;: 0&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Details about possible address types are following (refer also to &lt;a href=&#34;https://github.com/input-output-hk/cardano-ledger/raw/master/eras/alonzo/test-suite/cddl-files/alonzo.cddl&#34;&gt;cddl&lt;/a&gt; )&lt;/p&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th&gt;address_type&lt;/th&gt; &#xA;    &lt;th align=&#34;center&#34;&gt;binary prefix&lt;/th&gt; &#xA;    &lt;th align=&#34;center&#34;&gt;Meaning&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;0&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;0000&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;base address: keyhash28,keyhash28&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;1&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;0001&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;base address: scripthash28,keyhash28&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;2&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;0010&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;base address: keyhash28,scripthash28&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;3&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;0011&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;base address: scripthash28,scripthash28&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;4&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;0100&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;pointer address: keyhash28, 3 variable length uint&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;5&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;0101&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;pointer address: scripthash28, 3 variable length uint&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;6&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;0110&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;enterprise address: keyhash28&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;7&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;0111&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;enterprise address: scripthash28&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;8&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;1000&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;byron/icarus&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;14&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;1110&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;reward account: keyhash28&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;15&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;1111&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;reward account: scripthash28&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;How to generate a payment verification key for shared wallet (&lt;strong&gt;addr_shared.vk&lt;/strong&gt;, &lt;strong&gt;stake_shared.vk&lt;/strong&gt;)&lt;/summary&gt; &#xA; &lt;p&gt;Let&#39;s generate extended root private key for shared style:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ cardano-address key from-recovery-phrase Shared &amp;lt; phrase.prv &amp;gt; root_shared.xsk&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Now generate payment verification key (&lt;code&gt;role=0&lt;/code&gt; is used). Please note that purpose &lt;code&gt;1854H&lt;/code&gt; is used for multisig.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ cardano-address key child 1854H/1815H/0H/0/0 &amp;lt; root_shared.xsk | cardano-address key public --without-chain-code &amp;gt; addr_shared.vk&#xA;addr_shared_vk1a9h46rvjnqquxz02zyesh0ct29szh7vv9x7r2h87ttmnkgrfgguqhz0mtc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Generating delegation verification key is the similar (the only difference is role=2)&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ cardano-address key child 1854H/1815H/0H/2/0 &amp;lt; root_shared.xsk | cardano-address key public --without-chain-code &amp;gt; stake_shared.vk&#xA;stake_shared_vk18a8z5dcrlwene88n84j6dm9yvj5rt296fjtresqnunmacetdcymquyq43z&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;blockquote&gt; &#xA;  &lt;p&gt;&lt;span&gt;ℹ&lt;/span&gt; The last segment in the path is the key index, which can be incremented to derive more keys. Up &lt;code&gt;2^31-1&lt;/code&gt; keys are possible.&lt;/p&gt; &#xA; &lt;/blockquote&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;How to construct a multisig script hash (&lt;strong&gt;script.hash&lt;/strong&gt;)&lt;/summary&gt; &#xA; &lt;p&gt;We consider &lt;code&gt;addr_shared.1.vk&lt;/code&gt; and &lt;code&gt;addr_shared.2.vk&lt;/code&gt; obtained like &lt;code&gt;addr_shared.vk&lt;/code&gt; but by replacing the final index by &lt;code&gt;1&lt;/code&gt; and &lt;code&gt;2&lt;/code&gt; respectively.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ cardano-address script hash &#34;all [$(cat addr_shared.1.vk), $(cat addr_shared.2.vk)]&#34; &amp;gt; script.hash&#xA;script1gr69m385thgvkrtspk73zmkwk537wxyxuevs2u9cukglvtlkz4k&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;This script requires the signature from both signing keys corresponding to &lt;code&gt;shared_addr.1.vk&lt;/code&gt; and &lt;code&gt;shared_addr.2.vk&lt;/code&gt; (ie., shared_addr.1.sk and shared_addr.2.sk) in order to be valid. Similarly, we could require only one of the two signatures:&lt;/p&gt; &#xA; &lt;p&gt;We can also use extended verification, eiher payment or delegation, keys. They can be obtained as the non-extended ones by using &lt;code&gt;--with-chain-code&lt;/code&gt; option rather than &lt;code&gt;--without-chain-option&lt;/code&gt; as above. They will give rise to the same script hash as for verification keys chain code is stripped upon calculation.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ cardano-address script hash &#34;any [$(cat addr_shared.1.xvk), $(cat addr_shared.2.xvk)]&#34;&#xA;script1gr69m385thgvkrtspk73zmkwk537wxyxuevs2u9cukglvtlkz4k&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;which is equivalent (functionally, but not in terms of hash value) to :&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ cardano-address script hash &#34;at_least 1 [$(cat addr_shared.1.xvk), $(cat addr_shared.2.xvk)]&#34;&#xA;script13uf3fz3ts5srpjc5zcfe977uvnyvp36wcvxuudryegz0zpjlx6a&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;How to construct a multisig script hash with timelocks&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$  cardano-address script hash &#34;all [$(cat addr_shared.1.xvk), $(cat addr_shared.2.xvk), active_from 100, active_until 120]&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;How to validate a script&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$  cardano-address script validate &#34;at_least 1 [$(cat addr_shared.1.xvk), $(cat addr_shared.2.xvk), $(cat addr_shared.2.xvk)]&#34;&#xA;Validated.&#xA;&#xA;$  cardano-address script validate --recommended  &#34;at_least 1 [$(cat addr_shared.1.xvk), $(cat addr_shared.2.xvk), $(cat addr_shared.2.xvk)]&#34;&#xA;Not validated: The list inside a script has duplicate keys (which is not recommended)..&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;How to get preimage for a script&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ cardano-address script preimage &#34;all [addr_shared_vkh1zxt0uvrza94h3hv4jpv0ttddgnwkvdgeyq8jf9w30mcs6y8w3nq, addr_shared_vkh1y3zl4nqgm96ankt96dsdhc86vd5geny0wr7hu8cpzdfcqskq2cp]&#34;&#xA;008201828200581c1196fe3062e96b78dd959058f5adad44dd663519200f2495d17ef10d8200581c2445facc08d975d9d965d360dbe0fa63688ccc8f70fd7e1f01135380&#xA;&#xA;$  cardano-address script preimage &#34;all [addr_shared_vkh1zxt0uvrza94h3hv4jpv0ttddgnwkvdgeyq8jf9w30mcs6y8w3nq, active_from 100, active_until 150]&#34;&#xA;008201838200581c1196fe3062e96b78dd959058f5adad44dd663519200f2495d17ef10d8204186482051896&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;How to generate a payment script address from a script hash (&lt;strong&gt;script.addr&lt;/strong&gt;)&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ cardano-address address payment --network-tag testnet &amp;lt; script.hash &amp;gt; script.addr&#xA;addr_test1wqqggtajwkxjgf58v452jz6jl87lt32w3mhez5hd7xz6hugp80tta&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Correspondence between keys in cardano-addresses and cardano-cli (&lt;strong&gt;key.xsk key.xvk key.vk key.hash&lt;/strong&gt;)&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;Let&#39;s assume we have mnemonic&#xA;$ cat recovery-phrase.prv&#xA;nothing heart matrix fly sleep slogan tomato pulse what roof rail since plastic false enlist&#xA;&#xA;Construct root extended private key&#xA;$ cardano-address key from-recovery-phrase Shelley &amp;lt; recovery-phrase.prv &amp;gt; root.xprv&#xA;root_xsk1apjwjs3ksgm5mnnk0cc5v5emgv0hmafmmy8tffay5s2ffk69830whwznr46672ruucdzwwtv9upv72e4ylrypyz5m6cyh0p00t7n3u3agt20lv32j4kxcqlkzu78nzjx0ysxxlc2ghfz9prxfmrds802xsuhh404~&#xA;&#xA;Construct extended private key for account ix=0H, role=0 and address ix=0&#xA;$ cardano-address key child 1852H/1815H/0H/0/0 &amp;lt; root.xprv &amp;gt; key.xsk&#xA;addr_xsk1kzl5vgev0u843tfnxqcwg0lmaf7zhdhczddaqhas6dp6m6z98302e3avp8mhu94kxkpj2gss064f74km3rrptafh4fsztekz8k5c469shcvx35wrdmus3xemp984lcwhs0jdtl4pfcsrfspe00h9pej6rg8drvcv&#xA;&#xA;Create extended signing key using cardano-cli&#xA;$ cardano-cli key convert-cardano-address-key --shelley-payment-key --signing-key-file key.xsk --out-file key.skey&#xA;{&#xA;    &#34;type&#34;: &#34;PaymentExtendedSigningKeyShelley_ed25519_bip32&#34;,&#xA;    &#34;description&#34;: &#34;&#34;,&#xA;    &#34;cborHex&#34;: &#34;5880b0bf46232c7f0f58ad333030e43ffbea7c2bb6f8135bd05fb0d343ade8453c5eacc7ac09f77e16b635832522107eaa9f56db88c615f537aa6025e6c23da98ae8fbbbf6410e24532f35e9279febb085d2cc05b3b2ada1df77ea1951eb694f3834b0be1868d1c36ef9089b3b094f5fe1d783e4d5fea14e2034c0397bee50e65a1a&#34;&#xA;}&#xA;&#xA;The cborhex here contains of 4 parts:&#xA;1. prefix 5880 - bytestring of 128 bytes&#xA;2. signing key (64 bytes) - b0bf46232c7f0f58ad333030e43ffbea7c2bb6f8135bd05fb0d343ade8453c5eacc7ac09f77e16b635832522107eaa9f56db88c615f537aa6025e6c23da98ae8&#xA;3. verification key (32 bytes) - fbbbf6410e24532f35e9279febb085d2cc05b3b2ada1df77ea1951eb694f3834&#xA;4. chain code (32 bytes) - b0be1868d1c36ef9089b3b094f5fe1d783e4d5fea14e2034c0397bee50e65a1a&#xA;&#xA;Create corresponding verification key using cardano-cli&#xA;$ cardano-cli key verification-key --signing-key-file key.skey --verification-key-file key.vkey&#xA;{&#xA;    &#34;type&#34;: &#34;PaymentExtendedVerificationKeyShelley_ed25519_bip32&#34;,&#xA;    &#34;description&#34;: &#34;&#34;,&#xA;    &#34;cborHex&#34;: &#34;5840fbbbf6410e24532f35e9279febb085d2cc05b3b2ada1df77ea1951eb694f3834b0be1868d1c36ef9089b3b094f5fe1d783e4d5fea14e2034c0397bee50e65a1a&#34;&#xA;}&#xA;The cborhex here contains of 3 parts:&#xA;1. prefix 5840 - bytestring of 64 bytes&#xA;2. verification key (32 bytes) - fbbbf6410e24532f35e9279febb085d2cc05b3b2ada1df77ea1951eb694f3834&#xA;3. chain code (32 bytes) - b0be1868d1c36ef9089b3b094f5fe1d783e4d5fea14e2034c0397bee50e65a1a&#xA;&#xA;Rule for prefixes:&#xA;  - CBOR-encoded bytestring (which is what the 58 identifies)&#xA;  - size (80 means 128 bytes, whereas 40 means 64 bytes, 20 means 32 bytes)&#xA;&#xA;Create verification key hash using cardano-cli&#xA;$ cardano-cli address key-hash --payment-verification-key-file key.vkey &amp;gt; key.hash&#xA;0185545935760c5e370d01e6f4fedbb89b7fd79e115f2837cfab9ea8&#xA;&#xA;Alternatively, we can create non-extended key&#xA;$ cardano-address key public --without-chain-code &amp;lt; key.xsk &amp;gt; key.vk&#xA;addr_vk1lwalvsgwy3fj7d0fy707hvy96txqtvaj4ksa7al2r9g7k6208q6qmrv9k3&#xA;&#xA;Also, take notice that signing key can be translated to cborhex:&#xA;$ cat key.xsk | bech32&#xA;b0bf46232c7f0f58ad333030e43ffbea7c2bb6f8135bd05fb0d343ade8453c5eacc7ac09f77e16b635832522107eaa9f56db88c615f537aa6025e6c23da98ae8b0be1868d1c36ef9089b3b094f5fe1d783e4d5fea14e2034c0397bee50e65a1a&#xA;(signing key and chain code appended)&#xA;&#xA;Moreover, basing on key.vk one can get hash&#xA;$ cardano-cli address key-hash --payment-verification-key $(cat key.vk) &amp;gt; key1.hash&#xA;0185545935760c5e370d01e6f4fedbb89b7fd79e115f2837cfab9ea8&#xA;&#xA;Within cardano-addresses one can get cborhex of verification key (with chain code)&#xA;$ cardano-address key public --with-chain-code &amp;lt; key.xsk | bech32&#xA;fbbbf6410e24532f35e9279febb085d2cc05b3b2ada1df77ea1951eb694f3834b0be1868d1c36ef9089b3b094f5fe1d783e4d5fea14e2034c0397bee50e65a1a&#xA;(verification key and chain code appended)&#xA;&#xA;Within cardano-addresses one can get cborhex of verification key (without chain code)&#xA;$ cardano-address key public --without-chain-code &amp;lt; key.xsk | bech32&#xA;fbbbf6410e24532f35e9279febb085d2cc05b3b2ada1df77ea1951eb694f3834&#xA;(verification key without chain code)&#xA;&#xA;Then, we can get compute hash (but here we need to use without chain code):&#xA;$ cardano-address key public --without-chain-code &amp;lt; key.xsk | cardano-address key hash | bech32&#xA;0185545935760c5e370d01e6f4fedbb89b7fd79e115f2837cfab9ea8&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Docker Image&lt;/h2&gt; &#xA;&lt;h3&gt;Build&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ docker build -t cardano-address .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Run&lt;/h3&gt; &#xA;&lt;p&gt;Use the auto-remove flag &lt;code&gt;--rm&lt;/code&gt; when running commands.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ docker run --rm cardano-address recovery-phrase generate --size 15&#xA;dismiss grit bacon glare napkin satisfy tribe proud carpet bench fantasy rich history face north&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use the interactive flag &lt;code&gt;-i&lt;/code&gt; when piping stdin&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ echo &#34;addr1gqtnpvdhqrtpd4g424fcaq7k0ufuzyadt7djygf8qdyzevuph3wczvf2dwyx5u&#34; | docker run --rm -i cardano-addresses address inspect&#xA;{&#xA;    &#34;address_style&#34;: &#34;Shelley&#34;,&#xA;    &#34;stake_reference&#34;: &#34;by pointer&#34;,&#xA;    &#34;spending_key_hash&#34;: &#34;1730b1b700d616d51555538e83d67f13c113ad5f9b22212703482cb3&#34;,&#xA;    &#34;pointer&#34;: {&#xA;        &#34;slot_num&#34;: 24157,&#xA;        &#34;output_index&#34;: 42,&#xA;        &#34;transaction_index&#34;: 177&#xA;    },&#xA;    &#34;network_tag&#34;: 0&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;NPM Package&lt;/h2&gt; &#xA;&lt;p&gt;There is an experimental NPM module for JavaScript and TypeScript available, which works in both NodeJS and the browser.&lt;/p&gt; &#xA;&lt;p&gt;Here is a code sample showing how it can be used:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var cardanoAddresses = require(&#39;cardano-addresses&#39;)&#xA;var addr = &#39;addr1gqtnpvdhqrtpd4g424fcaq7k0ufuzyadt7djygf8qdyzevuph3wczvf2dwyx5u&#39;&#xA;&#xA;cardanoAddresses.inspectAddress(addr)&#xA;  .then(info =&amp;gt; console.log(info)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.npmjs.com/package/cardano-addresses&#34;&gt;NPM Package&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://input-output-hk.github.io/cardano-addresses/typescript/&#34;&gt;API Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://input-output-hk.github.io/cardano-addresses/demo/&#34;&gt;Web Demo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/cardano-addresses/master/jsapi/README.md&#34;&gt;Development Info&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Pull requests are welcome.&lt;/p&gt; &#xA;&lt;p&gt;When creating a pull request, please make sure that your code adheres to our &lt;a href=&#34;https://input-output-hk.github.io/adrestia/code/Coding-Standards&#34;&gt;coding standards&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/input-output-hk/cardano-addresses/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/input-output-hk/cardano-addresses.svg?style=for-the-badge&#34;&gt;&lt;/a&gt; &lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>input-output-hk/cardano-node</title>
    <updated>2022-05-29T02:12:00Z</updated>
    <id>tag:github.com,2022-05-29:/input-output-hk/cardano-node</id>
    <link href="https://github.com/input-output-hk/cardano-node" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The core component that is used to participate in a Cardano decentralised blockchain.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;.. raw:: html&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/input-output-hk/cardano-node/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release-pre/input-output-hk/cardano-node.svg?style=for-the-badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://buildkite.com/input-output-hk/cardano-node&#34;&gt;&lt;img src=&#34;https://img.shields.io/buildkite/a978cbb4def7018be3d0a004127da356f4db32f1c318c1a48a/master?label=BUILD&amp;amp;style=for-the-badge&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;table align=&#34;center&#34;&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt;&#xA;   &lt;td colspan=&#34;2&#34; align=&#34;center&#34;&gt;GitHub Actions&lt;/td&gt;&#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;a href=&#34;https://github.com/input-output-hk/cardano-node/actions/workflows/haskell.yml&#34;&gt;&lt;img alt=&#34;GitHub Workflow Status (master)&#34; src=&#34;https://img.shields.io/github/workflow/status/input-output-hk/cardano-node/Haskell%20CI/master&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/input-output-hk/cardano-node/actions/workflows/haskell.yml&#34;&gt;&lt;img alt=&#34;GitHub Workflow Status (branch)&#34; src=&#34;https://img.shields.io/github/workflow/status/input-output-hk/cardano-node/Haskell%20CI/nightly?label=nightly&#34;&gt;&lt;/a&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;code&gt;cardano-node&lt;/code&gt; Overview&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Integration of the &lt;code&gt;ledger &amp;lt;https://github.com/input-output-hk/cardano-ledger-specs&amp;gt;&lt;/code&gt;&lt;em&gt;, &lt;code&gt;consensus &amp;lt;https://github.com/input-output-hk/ouroboros-network/tree/master/ouroboros-consensus&amp;gt;&lt;/code&gt;&lt;/em&gt;, &lt;code&gt;networking &amp;lt;https://github.com/input-output-hk/ouroboros-network/tree/master/ouroboros-network&amp;gt;&lt;/code&gt;_ and &lt;code&gt;node shell &amp;lt;https://github.com/input-output-hk/cardano-shell&amp;gt;&lt;/code&gt;_ repositories.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Logging &amp;lt;https://github.com/input-output-hk/iohk-monitoring-framework&amp;gt;&lt;/code&gt;_ is provided as a &lt;code&gt;feature &amp;lt;https://github.com/input-output-hk/cardano-shell/blob/master/app/Cardano/Shell/Features/Logging.hs&amp;gt;&lt;/code&gt;_ by the node shell to the other packages.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;The cardano-node is the top level for the node and aggregates the other components from other packages: consensus, ledger and networking, with configuration, CLI, logging and monitoring.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The node no longer incorporates wallet or explorer functionality. The wallet backend and explorer backend are separate components that run in separate external processes that communicate with the node via local IPC.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Network Configuration, Genesis and Topology Files&lt;/h1&gt; &#xA;&lt;p&gt;The latest supported networks can be found at &lt;code&gt;&amp;lt;https://hydra.iohk.io/job/Cardano/cardano-node/cardano-deployment/latest-finished/download/1/index.html&amp;gt;&lt;/code&gt;_&lt;/p&gt; &#xA;&lt;h1&gt;How to build&lt;/h1&gt; &#xA;&lt;p&gt;Documentation for building the node can be found &lt;code&gt;here &amp;lt;https://docs.cardano.org/getting-started/installing-the-cardano-node&amp;gt;&lt;/code&gt;_.&lt;/p&gt; &#xA;&lt;h1&gt;Executables&lt;/h1&gt; &#xA;&lt;p&gt;You can download the latest version of &lt;code&gt;cardano-node&lt;/code&gt; and &lt;code&gt;cardano-cli&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;linux &amp;lt;https://hydra.iohk.io/job/Cardano/cardano-node/linux.musl.cardano-node-linux/latest-finished&amp;gt;&lt;/code&gt;_&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;win64 &amp;lt;https://hydra.iohk.io/job/Cardano/cardano-node/linux.windows.cardano-node-win64/latest-finished&amp;gt;&lt;/code&gt;_&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;macos &amp;lt;https://hydra.iohk.io/job/Cardano/cardano-node/macos.cardano-node-macos/latest-finished&amp;gt;&lt;/code&gt;_&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Windows Executable&lt;/h1&gt; &#xA;&lt;h2&gt;Download&lt;/h2&gt; &#xA;&lt;p&gt;You can download &lt;code&gt;here &amp;lt;https://hydra.iohk.io/job/Cardano/cardano-node/linux.windows.cardano-node-win64/latest-finished&amp;gt;&lt;/code&gt;_.&lt;/p&gt; &#xA;&lt;h2&gt;Instructions&lt;/h2&gt; &#xA;&lt;p&gt;The download includes cardano-node.exe and a .dll. To run the node with cardano-node run you need to reference a few files and directories as arguments. These can be copied from the cardano-node repo into the executables directory. The command to run the node on mainnet looks like this:&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: console&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cardano-node.exe run --topology ./configuration/cardano/mainnet-topology.json --database-path ./state --port 3001 --config ./configuration/cardano/mainnet-config.yaml  --socket-path \\.\pipe\cardano-node&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Docker image&lt;/h1&gt; &#xA;&lt;p&gt;You can pull the docker image with the latest version of cardano-node from &lt;code&gt;here &amp;lt;https://hub.docker.com/r/inputoutput/cardano-node&amp;gt;&lt;/code&gt;_.&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: console&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker pull inputoutput/cardano-node&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;&lt;code&gt;cardano-node&lt;/code&gt;&lt;/h1&gt; &#xA;&lt;p&gt;This refers to the client that is used for running a node.&lt;/p&gt; &#xA;&lt;p&gt;The general synopsis is as follows:&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: console&lt;/p&gt; &#xA;&lt;p&gt;Usage: cardano-node run [--topology FILEPATH] [--database-path FILEPATH] [--socket-path FILEPATH] [--byron-delegation-certificate FILEPATH] [--byron-signing-key FILEPATH] [--shelley-kes-key FILEPATH] [--shelley-vrf-key FILEPATH] [--shelley-operational-certificate FILEPATH] [--host-addr IPV4-ADDRESS] [--host-ipv6-addr IPV6-ADDRESS] [--port PORT] [--config NODE-CONFIGURATION] [--validate-db] Run the node.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--topology&lt;/code&gt; - Filepath to a topology file describing which peers the node should connect to.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--database-path&lt;/code&gt; - Path to the blockchain database.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--byron-delegation-certificate&lt;/code&gt; - Optional path to the Byron delegation certificate. The delegation certificate allows the delegator (the issuer of said certificate) to give his/her own block signing rights to somebody else (the delegatee). The delegatee can then sign blocks on behalf of the delegator.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--byron-signing-key&lt;/code&gt; - Optional path to the Byron signing key.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--shelley-signing-key&lt;/code&gt; - Optional path to the Shelley signing key.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--shelley-kes-key&lt;/code&gt; - Optional path to the Shelley KES signing key.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--shelley-vrf-key&lt;/code&gt; - Optional path to the Shelley VRF signing key.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--shelley-operational-certificate&lt;/code&gt; - Optional path to the Shelley operational certificate.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--socket-path&lt;/code&gt; - Path to the socket file.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--host-addr&lt;/code&gt; - Optionally specify your node&#39;s IPv4 address.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--host-ipv6-addr&lt;/code&gt; - Optionally specify your node&#39;s IPv6 address.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--port&lt;/code&gt; - Specify which port to assign to the node.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--config&lt;/code&gt; - Specify the filepath to the config &lt;code&gt;.yaml&lt;/code&gt; file. This file is responsible for all the other node&#39;s required settings. See examples in &lt;code&gt;configuration&lt;/code&gt; (e.g. &lt;code&gt;config-0.yaml &amp;lt;configuration/defaults/simpleview/config-0.yaml&amp;gt;&lt;/code&gt;_).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--validate-db&lt;/code&gt; - Flag to revalidate all on-disk database files&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Configuration &lt;code&gt;.yaml&lt;/code&gt; files&lt;/h1&gt; &#xA;&lt;p&gt;The &lt;code&gt;--config&lt;/code&gt; flag points to a &lt;code&gt;.yaml&lt;/code&gt; file that is responsible to configuring the logging &amp;amp; other important settings for the node. E.g. see the Byron mainnet configuration in this &lt;code&gt;configuration.yaml &amp;lt;https://github.com/input-output-hk/cardano-node/blob/master/configuration/defaults/byron-mainnet/configuration.yaml&amp;gt;&lt;/code&gt;_. Some of the more important settings are as follows:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;Protocol: RealPBFT&lt;/code&gt; -- Protocol the node will execute&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;RequiresNetworkMagic&lt;/code&gt;: RequiresNoMagic -- Used to distinguish between mainnet (&lt;code&gt;RequiresNoMagic&lt;/code&gt;) and testnets (&lt;code&gt;RequiresMagic&lt;/code&gt;)&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Logging&lt;/h1&gt; &#xA;&lt;p&gt;Logs are output to the &lt;code&gt;logs/&lt;/code&gt; dir.&lt;/p&gt; &#xA;&lt;h1&gt;Profiling &amp;amp; statistics&lt;/h1&gt; &#xA;&lt;p&gt;Profiling data and RTS run stats are stored in the &lt;code&gt;profile/&lt;/code&gt; dir.&lt;/p&gt; &#xA;&lt;p&gt;Please see &lt;code&gt;scripts/README.md&lt;/code&gt; for how to obtain profiling information using the scripts.&lt;/p&gt; &#xA;&lt;h1&gt;Scripts&lt;/h1&gt; &#xA;&lt;p&gt;Please see &lt;code&gt;scripts/README.md&lt;/code&gt; for information on the various scripts.&lt;/p&gt; &#xA;&lt;h1&gt;&lt;code&gt;cardano-cli&lt;/code&gt;&lt;/h1&gt; &#xA;&lt;p&gt;A CLI utility to support a variety of key material operations (genesis, migration, pretty-printing..) for different system generations. Usage documentation can be found at &lt;code&gt;cardano-cli/README.md&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The general synopsis is as follows:&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: console&lt;/p&gt; &#xA;&lt;p&gt;Usage: cardano-cli (Era based commands | Byron specific commands | Miscellaneous commands)&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;NOTE: the exact invocation command depends on the environment. If you have only built &lt;code&gt;cardano-cli&lt;/code&gt;, without installing it, then you have to prepend &lt;code&gt;cabal run -- &lt;/code&gt; before &lt;code&gt;cardano-cli&lt;/code&gt;. We henceforth assume that the necessary environment-specific adjustment has been made, so we only mention &lt;code&gt;cardano-cli&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;The subcommands are subdivided in groups, and their full list can be seen in the output of &lt;code&gt;cardano-cli --help&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;All subcommands have help available. For example:&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: console&lt;/p&gt; &#xA;&lt;p&gt;cabal run -- cardano-cli -- byron key migrate-delegate-key-from --help&lt;/p&gt; &#xA;&lt;p&gt;cardano-cli -- byron key migrate-delegate-key-from Usage: cardano-cli byron key migrate-delegate-key-from --from FILEPATH --to FILEPATH Migrate a delegate key from an older version.&lt;/p&gt; &#xA;&lt;p&gt;Available options: --byron-legacy-formats Byron/cardano-sl formats and compatibility --byron-formats Byron era formats and compatibility --from FILEPATH Signing key file to migrate. --to FILEPATH Non-existent file to write the signing key to. -h,--help Show this help text&lt;/p&gt; &#xA;&lt;h1&gt;Genesis operations&lt;/h1&gt; &#xA;&lt;h2&gt;Generation&lt;/h2&gt; &#xA;&lt;p&gt;The Byron genesis generation operations will create a directory that contains:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;genesis.json&lt;/code&gt;: The genesis JSON file itself.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;avvm-seed.*.seed&lt;/code&gt;: Ada Voucher Vending Machine seeds (secret). Affected by &lt;code&gt;--avvm-entry-count&lt;/code&gt; and &lt;code&gt;--avvm-entry-balance&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;delegate-keys.*.key&lt;/code&gt;: Delegate private keys. Affected by: &lt;code&gt;--n-delegate-addresses&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;delegation-cert.*.json&lt;/code&gt;: Delegation certificates. Affected by: &lt;code&gt;--n-delegate-addresses&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;genesis-keys.*.key&lt;/code&gt;: Genesis stake private keys. Affected by: &lt;code&gt;--n-delegate-addresses&lt;/code&gt;, &lt;code&gt;--total-balance&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;poor-keys.*.key&lt;/code&gt;: Non-delegate private keys with genesis UTxO. Affected by: &lt;code&gt;--n-poor-addresses&lt;/code&gt;, &lt;code&gt;--total-balance&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;More details on the Byron Genesis &lt;code&gt;JSON&lt;/code&gt; file can be found in &lt;code&gt;docs/reference/byron-genesis.md&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Byron genesis delegation and related concepts are described in detail in:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;&amp;lt;https://hydra.iohk.io/job/Cardano/cardano-ledger-specs/byronLedgerSpec/latest/download-by-type/doc-pdf/ledger-spec&amp;gt;&lt;/code&gt;_&lt;/p&gt; &#xA;&lt;p&gt;The canned &lt;code&gt;scripts/benchmarking/genesis.sh&lt;/code&gt; example provides a nice set of defaults and illustrates available options.&lt;/p&gt; &#xA;&lt;h1&gt;Key operations&lt;/h1&gt; &#xA;&lt;p&gt;Note that key operations do not support password-protected keys.&lt;/p&gt; &#xA;&lt;h2&gt;Signing key generation &amp;amp; verification key extraction&lt;/h2&gt; &#xA;&lt;p&gt;Signing keys can be generated using the &lt;code&gt;keygen&lt;/code&gt; subcommand.&lt;/p&gt; &#xA;&lt;p&gt;Extracting a verification key out of the signing key is performed by the &lt;code&gt;to-verification&lt;/code&gt; subcommand.&lt;/p&gt; &#xA;&lt;h2&gt;Delegate key migration&lt;/h2&gt; &#xA;&lt;p&gt;In order to continue using a delegate key from the Byron Legacy era in the new implementation, it needs to be migrated over, which is done by the &lt;code&gt;migrate-delegate-key-from&lt;/code&gt; subcommand:&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: console&lt;/p&gt; &#xA;&lt;p&gt;$ cabal v2-run -- cardano-cli byron key migrate-delegate-key-from --from key0.sk --to key0Converted.sk&lt;/p&gt; &#xA;&lt;h2&gt;Signing key queries&lt;/h2&gt; &#xA;&lt;p&gt;One can gather information about a signing key&#39;s properties through the &lt;code&gt;signing-key-public&lt;/code&gt; and &lt;code&gt;signing-key-address&lt;/code&gt; subcommands (the latter requires the network magic):&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: console&lt;/p&gt; &#xA;&lt;p&gt;$ cabal v2-run -- cardano-cli byron key signing-key-public --byron-formats --secret key0.sk&lt;/p&gt; &#xA;&lt;p&gt;public key hash: a2b1af0df8ca764876a45608fae36cf04400ed9f413de2e37d92ce04 public key: sc4pa1pAriXO7IzMpByKo4cG90HCFD465Iad284uDYz06dHCqBwMHRukReQ90+TA/vQpj4L1YNaLHI7DS0Z2Vg==&lt;/p&gt; &#xA;&lt;p&gt;$ cabal v2-run -- cardano-cli signing-key-address --byron-formats --secret key0.pbft --testnet-magic 42&lt;/p&gt; &#xA;&lt;p&gt;2cWKMJemoBakxhXgZSsMteLP9TUvz7owHyEYbUDwKRLsw2UGDrG93gPqmpv1D9ohWNddx VerKey address with root e5a3807d99a1807c3f161a1558bcbc45de8392e049682df01809c488, attributes: AddrAttributes { derivation path: {} }&lt;/p&gt; &#xA;&lt;h1&gt;Transactions&lt;/h1&gt; &#xA;&lt;h2&gt;Creation&lt;/h2&gt; &#xA;&lt;p&gt;Transactions can be created via the &lt;code&gt;issue-genesis-utxo-expenditure&lt;/code&gt; &amp;amp; &lt;code&gt;issue-utxo-expenditure&lt;/code&gt; commands.&lt;/p&gt; &#xA;&lt;p&gt;The easiest way to create a transaction is via the &lt;code&gt;scripts/benchmarking/issue-genesis-utxo-expenditure.sh&lt;/code&gt; script as follows:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;./scripts/benchmarking/issue-genesis-utxo-expenditure.sh transaction_file&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;NB: This by default creates a transaction based on &lt;code&gt;configuration/defaults/liveview/config-0.yaml&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you do not have a &lt;code&gt;genesis_file&lt;/code&gt; you can run &lt;code&gt;scripts/benchmarking/genesis.sh&lt;/code&gt; which will create an example &lt;code&gt;genesis_file&lt;/code&gt; for you. The script &lt;code&gt;scripts/benchmarking/issue-genesis-utxo-expenditure.sh&lt;/code&gt; has defaults for all the requirements of the &lt;code&gt;issue-genesis-utxo-expenditure&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;h2&gt;Submission&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;submit-tx&lt;/code&gt; subcommand provides the option of submitting a pre-signed transaction, in its raw wire format (see GenTx for Byron transactions).&lt;/p&gt; &#xA;&lt;p&gt;The canned &lt;code&gt;scripts/benchmarking/submit-tx.sh&lt;/code&gt; script will submit the supplied transaction to a testnet launched by &lt;code&gt;scripts/benchmarking/shelley-testnet-liveview.sh&lt;/code&gt; script.&lt;/p&gt; &#xA;&lt;h2&gt;Issuing UTxO expenditure (genesis and regular)&lt;/h2&gt; &#xA;&lt;p&gt;To make a transaction spending UTxO, you can either use the:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;issue-genesis-utxo-expenditure&lt;/code&gt;, for genesis UTxO&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;issue-utxo-expenditure&lt;/code&gt;, for normal UTxO&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;subcommands directly, or, again use canned scripts that will make transactions tailored for the aforementioned testnet cluster:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;scripts/benchmarking/issue-genesis-utxo-expenditure.sh&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;scripts/benchmarking/issue-utxo-expenditure.sh&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The script requires the target file name to write the transaction to, input TxId (for normal UTxO), and optionally allows specifying the source txin output index, source and target signing keys and lovelace value to send.&lt;/p&gt; &#xA;&lt;p&gt;The target address defaults to the 1-st richman key (&lt;code&gt;configuration/delegate-keys.001.key&lt;/code&gt;) of the testnet, and lovelace amount is almost the entirety of its funds.&lt;/p&gt; &#xA;&lt;h1&gt;Local node queries&lt;/h1&gt; &#xA;&lt;p&gt;You can query the tip of your local node via the &lt;code&gt;get-tip&lt;/code&gt; command as follows&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Open &lt;code&gt;tmux&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;cabal build cardano-node&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;./scripts/lite/shelley-testnet.sh example&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run ``export CARDANO_NODE_SOCKET_PATH=/cardano-node/example/socket/node-1-socket&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cabal exec cardano-cli -- get-tip --testnet-magic 42&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;You will see output from stdout in this format:&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: console&lt;/p&gt; &#xA;&lt;p&gt;Current tip: Block hash: 4ab21a10e1b25e39 Slot: 6 Block number: 5&lt;/p&gt; &#xA;&lt;h1&gt;Update proposals&lt;/h1&gt; &#xA;&lt;h2&gt;Update proposal creation&lt;/h2&gt; &#xA;&lt;p&gt;A Byron update proposal can be created as follows:&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: console&lt;/p&gt; &#xA;&lt;p&gt;cardano-cli -- byron governance create-update-proposal (--mainnet | --testnet-magic NATURAL) --signing-key FILEPATH --protocol-version-major WORD16 --protocol-version-minor WORD16 --protocol-version-alt WORD8 --application-name STRING --software-version-num WORD32 --system-tag STRING --installer-hash HASH --filepath FILEPATH ..&lt;/p&gt; &#xA;&lt;p&gt;The mandatory arguments are &lt;code&gt;--mainnet | --testnet-magic&lt;/code&gt;, &lt;code&gt;signing-key&lt;/code&gt;, &lt;code&gt;protocol-version-major&lt;/code&gt;, &lt;code&gt;protocol-version-minor&lt;/code&gt;, &lt;code&gt;protocol-version-alt&lt;/code&gt;, &lt;code&gt;application-name&lt;/code&gt;, &lt;code&gt;software-version-num&lt;/code&gt;, &lt;code&gt;system-tag&lt;/code&gt;, &lt;code&gt;installer-hash&lt;/code&gt; and &lt;code&gt;filepath&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The remaining arguments are optional parameters you want to update in your update proposal.&lt;/p&gt; &#xA;&lt;p&gt;You can also check your proposal&#39;s validity using the &lt;code&gt;validate-cbor&lt;/code&gt; command. See: &lt;code&gt;Validate CBOR files&lt;/code&gt;_.&lt;/p&gt; &#xA;&lt;p&gt;See the &lt;code&gt;Byron specification &amp;lt;https://hydra.iohk.io/job/Cardano/cardano-ledger-specs/byronLedgerSpec/latest/download-by-type/doc-pdf/ledger-spec&amp;gt;&lt;/code&gt;_ for more details on update proposals.&lt;/p&gt; &#xA;&lt;h2&gt;Update proposal submission&lt;/h2&gt; &#xA;&lt;p&gt;You can submit your proposal using the &lt;code&gt;submit-update-proposal&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: console&lt;/p&gt; &#xA;&lt;p&gt;cardano-cli -- byron governance submit-update-proposal --config configuration/defaults/mainnet/configuration.yaml (--mainnet | --testnet-magic NATURAL) --filepath my-update-proposal&lt;/p&gt; &#xA;&lt;p&gt;See the &lt;code&gt;Byron specification &amp;lt;https://hydra.iohk.io/job/Cardano/cardano-ledger-specs/byronLedgerSpec/latest/download-by-type/doc-pdf/ledger-spec&amp;gt;&lt;/code&gt;_ for more details on update proposals.&lt;/p&gt; &#xA;&lt;h1&gt;Update proposal voting&lt;/h1&gt; &#xA;&lt;p&gt;You can create and submit byron update proposal votes with the &lt;code&gt;create-proposal-vote&lt;/code&gt; &amp;amp; &lt;code&gt;submit-proposal-vote&lt;/code&gt; commands. The following are two example commands:&lt;/p&gt; &#xA;&lt;p&gt;Byron vote creation:&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: console&lt;/p&gt; &#xA;&lt;p&gt;cabal exec cardano-cli -- byron governance create-proposal-vote (--mainnet | --testnet-magic NATURAL) --signing-key configuration/defaults/liveview/genesis/delegate-keys.000.key --proposal-filepath ProtocolUpdateProposalFile --vote-yes --output-filepath UpdateProposalVoteFile&lt;/p&gt; &#xA;&lt;p&gt;Byron vote submission:&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: console&lt;/p&gt; &#xA;&lt;p&gt;cabal exec cardano-cli -- byron governance submit-proposal-vote (--mainnet | --testnet-magic NATURAL) --filepath UpdateProposalVoteFile&lt;/p&gt; &#xA;&lt;h1&gt;Development&lt;/h1&gt; &#xA;&lt;h2&gt;GHCID&lt;/h2&gt; &#xA;&lt;p&gt;run &lt;em&gt;ghcid&lt;/em&gt; with: &lt;code&gt;ghcid -c &#34;cabal repl exe:cardano-node --reorder-goals&#34;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Haskell Language Server&lt;/h2&gt; &#xA;&lt;p&gt;When using Haskell Language Server with Visual Studio Code, you may find that &lt;code&gt;HLINT annotations are ignored&amp;lt;https://github.com/haskell/haskell-language-server/issues/638&amp;gt;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To work around this, you may run the script &lt;code&gt;./scripts/reconfigure-hlint.sh&lt;/code&gt; to generate a &lt;code&gt;.hlint.yaml&lt;/code&gt; file with HLINT ignore rules derived from the source code.&lt;/p&gt; &#xA;&lt;h1&gt;Testing&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;cardano-node&lt;/code&gt; is essentially a container which implements several components such networking, consensus, and storage. These components have individual test coverage. The node goes through integration and release testing by Devops/QA while automated CLI tests are ongoing alongside development.&lt;/p&gt; &#xA;&lt;p&gt;Developers on &lt;code&gt;cardano-node&lt;/code&gt; can &lt;code&gt;launch their own testnets &amp;lt;doc/getting-started/launching-a-testnet.md&amp;gt;&lt;/code&gt;_ or &lt;code&gt;run the chairman tests &amp;lt;doc/getting-started/running-chairman-tests.md&amp;gt;&lt;/code&gt;_ locally.&lt;/p&gt; &#xA;&lt;h2&gt;Chairman tests&lt;/h2&gt; &#xA;&lt;h1&gt;Debugging&lt;/h1&gt; &#xA;&lt;h2&gt;Pretty printing CBOR encoded files&lt;/h2&gt; &#xA;&lt;p&gt;It may be useful to print the on chain representations of blocks, delegation certificates, txs and update proposals. There are two commands that do this (for any cbor encoded file):&lt;/p&gt; &#xA;&lt;p&gt;To pretty print as CBOR: &lt;code&gt;cabal exec cardano-cli -- pretty-print-cbor --filepath CBOREncodedFile&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Validate CBOR files&lt;/h2&gt; &#xA;&lt;p&gt;You can validate Byron era blocks, delegation certificates, txs and update proposals with the &lt;code&gt;validate-cbor&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;cabal exec cardano-cli -- validate-cbor --byron-block 21600 --filepath CBOREncodedByronBlockFile&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Native Tokens&lt;/h1&gt; &#xA;&lt;p&gt;Native tokens is a new feature that enables the transacting of multi-assets on Cardano. Native tokens are now supported on mainnet and users can transact with ada, and an unlimited number of user-defined (custom) tokens natively.&lt;/p&gt; &#xA;&lt;p&gt;To help you get started we have compiled a handy list of resources:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Cardano Forum discussion &amp;lt;https://forum.cardano.org/c/developers/cardano-tokens/150&amp;gt;&lt;/code&gt;_&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Documentation for native tokens &amp;lt;https://docs.cardano.org/native-tokens/learn&amp;gt;&lt;/code&gt;_&lt;/p&gt; &#xA;&lt;p&gt;You can also read more about &lt;code&gt;native tokens and how they compare to ada and ERC20 &amp;lt;https://github.com/input-output-hk/cardano-ledger-specs/blob/master/doc/explanations/features.rst&amp;gt;&lt;/code&gt;_. Browse native tokens created on the Cardano blockchain and see their transactions in an interactive dashboard that allows filtering and searching: nativetokens.da.iogservices.io.&lt;/p&gt; &#xA;&lt;h1&gt;API Documentation&lt;/h1&gt; &#xA;&lt;p&gt;The API documentation is published &lt;code&gt;here &amp;lt;https://input-output-hk.github.io/cardano-node/&amp;gt;&lt;/code&gt;_.&lt;/p&gt; &#xA;&lt;p&gt;The documentation is built with each push, but is only published from &lt;code&gt;master&lt;/code&gt; branch. In order to test if the documentation is working, build the documentation locally with &lt;code&gt;./scripts/haddocs.sh&lt;/code&gt; and open &lt;code&gt;haddocks/index.html&lt;/code&gt; in the browser.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>input-output-hk/plutus-pioneer-program</title>
    <updated>2022-05-29T02:12:00Z</updated>
    <id>tag:github.com,2022-05-29:/input-output-hk/plutus-pioneer-program</id>
    <link href="https://github.com/input-output-hk/plutus-pioneer-program" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Plutus Pioneer Program&lt;/h1&gt; &#xA;&lt;h2&gt;Lectures&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://www.youtube.com/playlist?list=PLNEK_Ejlx3x2nLM4fAck2JS6KhFQlXq2N&#34;&gt;Lecture #1&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/X80uNXenWF4&#34;&gt;Part 1 - Welcome and Introduction&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/bfofA4MM0QE&#34;&gt;Part 2 - The EUTxO-Model&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/zPaDp4R9X7o&#34;&gt;Part 3 - Building the Example Code&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/Bj6bqRGT1L0&#34;&gt;Part 4 - Auction Contract in the EUTxO-Model&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/K61Si6iQ-Js&#34;&gt;Part 5 - Auction Contract on the Playground&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/tfanOE2ARho&#34;&gt;Part 6 - Homework&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://www.youtube.com/playlist?list=PLNEK_Ejlx3x0mhPmOjPSHZPtTFpfJo3Nd&#34;&gt;Lecture #2&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/BEr7lcCPjnA&#34;&gt;Part 1 - Triggering Change&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/xgnmMl-eIIM&#34;&gt;Part 2 - Low Level, Untyped Validation Scripts&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/HoB_PqeZPNc&#34;&gt;Part 3 - High Level, Typed Validation Scripts&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/V5P2gKHos48&#34;&gt;Part 4 - Summary&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/_r-EpXzQGKo&#34;&gt;Part 5 - Homework&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://www.youtube.com/playlist?list=PLNEK_Ejlx3x2zxcfoVGARFExzOHwXFCCL&#34;&gt;Lecture #3&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/sLMhsqiWeGU&#34;&gt;Part 1 - Configuring Playground Time Out&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/B66xLrGXwmw&#34;&gt;Part 2 - Script Contexts&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/mf06ll-4j2w&#34;&gt;Part 3 - Handling Time&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/ae7U_yKIQ0Y&#34;&gt;Part 4 - A Vesting Example&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/XqFILXV_ACM&#34;&gt;Part 5 - Parameterized Contracts&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/ABtffZPoUqU&#34;&gt;Part 6 - Deploying to the Cardano Testnet&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/GGUT2O_0urQ&#34;&gt;Part 7 - Homework&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/uyaPtayBRb8&#34;&gt;Part 8 - Summary&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://www.youtube.com/playlist?list=PLNEK_Ejlx3x230-g-U02issX5BiWAgmSi&#34;&gt;Lecture #4&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/gxMW9uXTEj4&#34;&gt;Part 1 - Introduction&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/f2w-MB3X4a0&#34;&gt;Part 2 - Monads&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/qoUfgaHs1CI&#34;&gt;Part 3 - The EmulatorTrace Monad&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/yKX5Ce8Y0VQ&#34;&gt;Part 4 - The Contract Monad&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/sxRLzR0jdiY&#34;&gt;Part 5 - Homework &amp;amp; Summary&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://www.youtube.com/playlist?list=PLNEK_Ejlx3x0G8V8CDBnRDZ86POVsrfzw&#34;&gt;Lecture #5&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/mGPqi9m0EPw&#34;&gt;Part 1 - Start&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/4iNTgjovMRg&#34;&gt;Part 2 - Values&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/DBUdFsZpW7A&#34;&gt;Part 3 - A Simple Minting Policy&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/4SROikF8JwE&#34;&gt;Part 4 - A More Realistic Minting Policy&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/2lKN0ZL_EQU&#34;&gt;Part 5 - NFT&#39;s&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/j7yT2OqGY6U&#34;&gt;Part 6 - Homework&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://www.youtube.com/playlist?list=PLNEK_Ejlx3x2sBWXHdFBRgkzPF6N-1LVi&#34;&gt;Lecture #6&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/TfWKxdli4eI&#34;&gt;Part 1 - Introduction&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/w7_27sQIqkY&#34;&gt;Part 2 - The Minting Policy&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/kfvzrC9J02k&#34;&gt;Part 3 - Minting with the CLI&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/tW7uoY16gC0&#34;&gt;Part 4 - Deployment Scenarios&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/JgNhY_uuuGA&#34;&gt;Part 5 - The Contracts&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/X6AyZIZ0vaE&#34;&gt;Part 6 - Minting with the PAB&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/KmNOFltlRiA&#34;&gt;Part 7 - Summary&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://www.youtube.com/playlist?list=PLNEK_Ejlx3x3Y5xvAsVqq46S9xkHopSGU&#34;&gt;Lecture #7&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/CLOHdIGgy90&#34;&gt;Part 1 - Introduction&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/JXKf1JwVAOE&#34;&gt;Part 2 - Commit Schemes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/yczHkTzDnpk&#34;&gt;Part 3 - Implementation without State Machines&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/7jiaQRA-wKI&#34;&gt;Part 4 - State Machines&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/J0rD_hmsMVo&#34;&gt;Part 5 - Homework&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://www.youtube.com/playlist?list=PLNEK_Ejlx3x0UIixvEQG2Y2mmFL6__pEJ&#34;&gt;Lecture #8&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/mqHifIPefus&#34;&gt;Part 1 - Introduction&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/y5O58-NpnJ4&#34;&gt;Part 2 - Another State Machine Example: Token Sale&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/LG9O8YbBXyM&#34;&gt;Part 3 - Automatic Testing using Emulator Traces&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/wJQnQtLxi2E&#34;&gt;Part 4 - Test Coverage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/naLA0OMIF1Q&#34;&gt;Part 5 - Interlude: Optics&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/9mrYT9UXLO8&#34;&gt;Part 6 - Property-Based Testing with QuickCheck&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/49oAwySp6Ys&#34;&gt;Part 7 - Property-Based Testing of Plutus Contracts&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/u2Plwc3Gkrs&#34;&gt;Part 8 - Homework&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://www.youtube.com/playlist?list=PLNEK_Ejlx3x2zSFnzWA4Gbr_AVTz-4rzf&#34;&gt;Lecture #9&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/433VbouC-30&#34;&gt;Part 1 - Introduction&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/ce_Yv8BlW7c&#34;&gt;Part 2 - Simon Thompson: Marlowe Overview&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/hd-E5DCN8uc&#34;&gt;Part 3 - Alexander Nemish: Marlowe in Plutus&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/Vx_ygegrY78&#34;&gt;Part 4 - Brian Bush: The Marlowe CLI&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/l0LXjh8J-go&#34;&gt;Part 5 - Marlowe Playground Demo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/iYdyUaq_enA&#34;&gt;Part 6 - Homework&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://www.youtube.com/playlist?list=PLNEK_Ejlx3x3EV7FKhlogJgS27dWgwI9B&#34;&gt;Lecture #10&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/AnID8hn68DA&#34;&gt;Part 1 - Introduction&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/xhEMEH0C2XU&#34;&gt;Part 2 - The Private Testnet&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/kFi-7HyBN-s&#34;&gt;Part 3 - Plutus &amp;amp; Staking&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/5cBu4J5RRZ4&#34;&gt;Part 4 - Trying it on the Testnet&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/9oWmDXoxtmI&#34;&gt;Part 5 - Conclusion&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Code Examples&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Lecture #1: &lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus-pioneer-program/main/code/week01&#34;&gt;English Auction&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Lecture #2: &lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus-pioneer-program/main/code/week02&#34;&gt;Simple Validation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Lecture #3: &lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus-pioneer-program/main/code/week03&#34;&gt;Script Contexts &amp;amp; Parameterized Contracts&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Lecture #4: &lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus-pioneer-program/main/code/week04&#34;&gt;Monads, Traces &amp;amp; Contracts&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Lecture #5: &lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus-pioneer-program/main/code/week05&#34;&gt;Native Tokens&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Lecture #6: &lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus-pioneer-program/main/code/week06&#34;&gt;Deployment&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Lecture #7: &lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus-pioneer-program/main/code/week07&#34;&gt;State Machines&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Lecture #8: &lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus-pioneer-program/main/code/week08&#34;&gt;Testing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Lecture #9: &lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus-pioneer-program/main/code/week09&#34;&gt;Marlowe&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Lecture #10: &lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus-pioneer-program/main/code/week10&#34;&gt;Staking&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Exercises&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Week #1&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Clone the &lt;a href=&#34;https://github.com/input-output-hk/plutus-apps&#34;&gt;The Plutus-Apps repository&lt;/a&gt;, check out the correct commit as specified in &lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus-pioneer-program/main/code/week01/cabal.project&#34;&gt;cabal.project&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Install NixOS cross-referencing the following resources. &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://nixos.org/download.html&#34;&gt;https://nixos.org/download.html&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://docs.plutus-community.com&#34;&gt;https://docs.plutus-community.com&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;A few resources to understand the what and why regarding NixOS &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://nixos.org/manual/nix/stable&#34;&gt;https://nixos.org/manual/nix/stable&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://serokell.io/blog/what-is-nix&#34;&gt;https://serokell.io/blog/what-is-nix&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Set-up IOHK binary caches &lt;a href=&#34;https://github.com/input-output-hk/plutus#iohk-binary-cache&#34;&gt;How to set up the IOHK binary caches&lt;/a&gt;. &#34;If you do not do this, you will end up building GHC, which takes several hours. If you find yourself building GHC, &lt;em&gt;stop&lt;/em&gt; and fix the cache.&#34;&lt;/li&gt; &#xA;   &lt;li&gt;Enter a &lt;code&gt;nix-shell&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Build the &lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus-pioneer-program/main/code/week01&#34;&gt;English Auction&lt;/a&gt; contract with &lt;code&gt;cabal build&lt;/code&gt; (you may need to run &lt;code&gt;cabal update&lt;/code&gt; first).&lt;/li&gt; &#xA;   &lt;li&gt;Go to the &lt;code&gt;plutus-playground-client&lt;/code&gt; folder in the &lt;code&gt;plutus-apps&lt;/code&gt; repository.&lt;/li&gt; &#xA;   &lt;li&gt;Start the Playground server with &lt;code&gt;plutus-playground-server&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Start the Playground client (in another &lt;code&gt;nix-shell&lt;/code&gt;) with &lt;code&gt;npm start&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Copy-paste the auction contract into the Playground editor, do not forget to remove the module header.&lt;/li&gt; &#xA;   &lt;li&gt;Compile.&lt;/li&gt; &#xA;   &lt;li&gt;Simulate various auction scenarios.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Week #2&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Fix and complete the code in the &lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus-pioneer-program/main/code/week02/src/Week02/Homework1.hs&#34;&gt;Homework1&lt;/a&gt; module.&lt;/li&gt; &#xA;   &lt;li&gt;Fix and complete the code in the &lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus-pioneer-program/main/code/week02/src/Week02/Homework2.hs&#34;&gt;Homework2&lt;/a&gt; module.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Week #3&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Fix and complete the code in the &lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus-pioneer-program/main/code/week03/src/Week03/Homework1.hs&#34;&gt;Homework1&lt;/a&gt; module.&lt;/li&gt; &#xA;   &lt;li&gt;Fix and complete the code in the &lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus-pioneer-program/main/code/week03/src/Week03/Homework2.hs&#34;&gt;Homework2&lt;/a&gt; module.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Week #4&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Implement function &lt;code&gt;payTrace&lt;/code&gt; in the &lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus-pioneer-program/main/code/week04/src/Week04/Homework.hs&#34;&gt;Homework&lt;/a&gt; module.&lt;/li&gt; &#xA;   &lt;li&gt;Handle exceptions thrown by &lt;code&gt;submitTx&lt;/code&gt; in function &lt;code&gt;payContract&lt;/code&gt; in the same module.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Week #5&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Implement a Mary-era-style minting policy in the &lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus-pioneer-program/main/code/week05/src/Week05/Homework1.hs&#34;&gt;Homework1&lt;/a&gt; module.&lt;/li&gt; &#xA;   &lt;li&gt;Fix the token name to the empty ByteString in the NFT contract in the &lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus-pioneer-program/main/code/week05/src/Week05/Homework2.hs&#34;&gt;Homework2&lt;/a&gt; module.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Week #6&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Try to replicate what is done in the lecture - minting tokens with the &lt;code&gt;cardano-cli&lt;/code&gt; and the PAB.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Week #7&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Implement the game of &#34;Rock, Paper, Scissors&#34; using state machines.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Week #8&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Add a new operation close to the TokenSale-contract that allows the seller to close the contract and retrieve all remaining funds.&lt;/li&gt; &#xA;   &lt;li&gt;Modify the tests accordingly.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Week #9m&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Modify the example Marlowe contract, so that Charlie must put down twice the deposit in the very beginning, which gets split between Alice and Bob if Charlie refuses to make his choice.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Some Plutus Modules&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Ledger.Scripts&lt;/code&gt;, contains functions related to untyped Plutus scripts.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Ledger.Typed.Scripts&lt;/code&gt;, contains functions related to typed Plutus scripts.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Plutus.Contract&lt;/code&gt;, contains definitions and functions for writing offchain code.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Plutus.Contract.StateMachine&lt;/code&gt;, contains definitions and functions for working with &lt;em&gt;state machines&lt;/em&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Plutus.Contract.Test&lt;/code&gt;, contains support for automatic tests.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Plutus.Contract.Test.ContractModel&lt;/code&gt;, contains support for automatic property-based tests using &lt;code&gt;QuickCheck&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Plutus.V1.Ledger.Ada&lt;/code&gt;, contains definitions and functions related to &lt;em&gt;ADA&lt;/em&gt;-values.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Plutus.V1.Ledger.Interval&lt;/code&gt;, contains the definition of intervals and functions for working with them.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Plutus.V1.Ledger.Value&lt;/code&gt;, contains definitions and functions related to &lt;em&gt;values&lt;/em&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Plutus.V1.Ledger.Time&lt;/code&gt;, contains time-related types and functions.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;PlutusTx&lt;/code&gt;, contains important types like &lt;code&gt;Data&lt;/code&gt; and &lt;code&gt;BuiltinData&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;PlutusTx.IsData.Class&lt;/code&gt;, contains the &lt;code&gt;ToData&lt;/code&gt; and &lt;code&gt;FromData&lt;/code&gt; classes and related functions.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Wallet.Emulator&lt;/code&gt;, contains types and functions for dealing with wallets.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Additional Resources&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/input-output-hk/plutus&#34;&gt;The Plutus repository&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/input-output-hk/plutus-apps&#34;&gt;The Plutus-Apps repository&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Learn You a Haskell for Great Good: &lt;a href=&#34;http://learnyouahaskell.com/&#34;&gt;original&lt;/a&gt;, &lt;a href=&#34;https://hansruec.github.io/learn-you-a-haskell-remastered/01-first-things-first.html&#34;&gt;remastered&lt;/a&gt; and &lt;a href=&#34;https://hub.gke2.mybinder.org/user/jamesdbrock-lea-askell-notebook-24dgdx7w/lab/tree/learn_you_a_haskell/00-preface.ipynb&#34;&gt;interactive notebook&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/playlist?list=PLJ3w5xyG4JWmBVIigNBytJhvSSfZZzfTm&#34;&gt;Haskell &amp;amp; Cryptocurrencies course Mongolia&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/woofpool/cardano-private-testnet-setup&#34;&gt;Private Testnet Setup&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>kmonad/kmonad</title>
    <updated>2022-05-29T02:12:00Z</updated>
    <id>tag:github.com,2022-05-29:/kmonad/kmonad</id>
    <link href="https://github.com/kmonad/kmonad" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An advanced keyboard manager&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt; &lt;img alt=&#34;KMonad&#34; title=&#34;KMonad&#34; height=&#34;32&#34; src=&#34;https://raw.githubusercontent.com/kmonad/kmonad/master/kmonad.svg?sanitize=true&#34;&gt; &lt;/h1&gt; &#xA;&lt;h4 align=&#34;center&#34;&gt;The Onion of Keyboard Management Tools, available on GNU/Linux, Windows, and MacOS!&lt;/h4&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://raw.githubusercontent.com/kmonad/kmonad/master/#features&#34;&gt;Features&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/kmonad/kmonad/master/#installation&#34;&gt;Installation&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/kmonad/kmonad/master/#configuration&#34;&gt;Configuration&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/kmonad/kmonad/master/#troubleshooting&#34;&gt;Troubleshooting&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/kmonad/kmonad/master/#disclaimer&#34;&gt;Disclaimer&lt;/a&gt; • &lt;/p&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;KMonad is an advanced tool that lets you infinitely customize and extend the functionalities of almost any keyboard. For a detailed list of features, see &lt;a href=&#34;https://raw.githubusercontent.com/kmonad/kmonad/master/#features&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you want to get started with the latest, stable binary release, please check out the master branch, if you are interested in the latest additions and tweaks, switch on over to develop and compile your own binary.&lt;/p&gt; &#xA;&lt;p&gt;Additionally, if you need any help or just want to say hi, you can join our &lt;a href=&#34;https://discord.gg/3tFfWmnahN&#34;&gt;Discord server&lt;/a&gt; or jump into our &lt;a href=&#34;https://web.libera.chat/#kmonad&#34;&gt;IRC channel&lt;/a&gt; (&lt;code&gt;#kmonad@irc.libera.chat&lt;/code&gt;), which is also bridged with matrix (&lt;code&gt;#kmonad:libera.chat&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;p&gt;KMonad offers advanced customization features such as &lt;strong&gt;layers&lt;/strong&gt;, &lt;strong&gt;multi-tap&lt;/strong&gt;, &lt;strong&gt;tap-hold&lt;/strong&gt;, and much more. These features are usually available at the hardware level on the QMK-firmware enabled keyboards. However, KMonad allows you to enjoy such features in virtually any keyboard by low-level system manipulations.&lt;/p&gt; &#xA;&lt;p&gt;For a good introduction to KMonad, have a look at &lt;a href=&#34;https://www.youtube.com/watch?v=Dhj1eauljwU&#34;&gt;this Youtube video&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Key Customizations&lt;/h4&gt; &#xA;&lt;p&gt;KMonad lets you map any keyboard button to any keymap. Want to swap the useless &lt;strong&gt;Caps Lock&lt;/strong&gt; key with the &lt;strong&gt;Escape&lt;/strong&gt; key? Want to have your modifiers such as &lt;strong&gt;Shift&lt;/strong&gt; and &lt;strong&gt;Control&lt;/strong&gt; on your home row, without breaking your normal typing flow? Want a modifier that is combination of &lt;strong&gt;Alt + Ctrl + Super + Shift&lt;/strong&gt;? You can do all of those and much more!&lt;/p&gt; &#xA;&lt;h4&gt;Layers&lt;/h4&gt; &#xA;&lt;p&gt;A layer is a set of keymaps assigned to your keyboard&#39;s buttons. You can have as many layers on top of your base layer as you want. For instance, you can have your regular QWERTY layout, a Colemak/ Dvorak layout, a numbers and symbols layer, a function keys layer, a layer for mouse navigation and system controls --- all in a 60% keyboard. When a particular layer is active, any keypress is interpreted according to the layout defined in that layer. With proper configurations, you can jump to a specific layer or switch to one for the next keypress, or do various other complex manipulations.&lt;/p&gt; &#xA;&lt;h4&gt;Multi-Use and Multi-Tap Buttons&lt;/h4&gt; &#xA;&lt;p&gt;One of the distinguishing features of KMonad is the vast capabilities with Multi-Use Buttons. You can have a single button do different things based on whether it is pressed quickly in succession, or pressed once, or held. For example, you can configure the &lt;strong&gt;Caps Lock&lt;/strong&gt; key to act as an &lt;strong&gt;Escape&lt;/strong&gt; button when pressed once and released, a &lt;strong&gt;Ctrl&lt;/strong&gt; modifier when held-down, and a button to jump to a layer when pressed twice quickly in succession. You can make the left and right &lt;strong&gt;Shift&lt;/strong&gt; keys to act like left and right parentheses (like the Space Cadet Shift keys) when tapped once, and regular &lt;strong&gt;Shift&lt;/strong&gt; keys when held down. The possibilities are infinite!&lt;/p&gt; &#xA;&lt;h4&gt;Command Buttons&lt;/h4&gt; &#xA;&lt;p&gt;With Command Buttons you can trigger shell commands with a tap of any button.&lt;/p&gt; &#xA;&lt;h4&gt;And More!&lt;/h4&gt; &#xA;&lt;p&gt;There are many more exciting features of KMonad that you can find in the &lt;a href=&#34;https://raw.githubusercontent.com/kmonad/kmonad/master/keymap/tutorial.kbd&#34;&gt;configuration tutorial&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;For more information on how to install KMonad, please refer to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kmonad/kmonad/master/doc/installation.md&#34;&gt;installation&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;For information on how to configure KMonad, please refer you to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kmonad/kmonad/master/keymap/tutorial.kbd&#34;&gt;the configuration tutorial&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kmonad/kmonad-contrib&#34;&gt;user configurations&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Want to add your own keyboard configuration to &lt;a href=&#34;https://github.com/kmonad/kmonad-contrib&#34;&gt;kmonad-contrib&lt;/a&gt;? Just fork the repository, create a new subdirectory using your GitHub username and submit a pull request!&lt;/p&gt; &#xA;&lt;h3&gt;Editor Support for the Configuration Language&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kmonad/kbd-mode&#34;&gt;Emacs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kmonad/kmonad-vim&#34;&gt;Vim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/canadaduane/vscode-kmonad&#34;&gt;VSCode&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Startup&lt;/h3&gt; &#xA;&lt;p&gt;There are startup scripts available for different init systems in &lt;a href=&#34;https://raw.githubusercontent.com/kmonad/kmonad/master/startup/&#34;&gt;startup&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Troubleshooting&lt;/h2&gt; &#xA;&lt;p&gt;For several commonly asked questions regarding various configuration issues, please see:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kmonad/kmonad/master/doc/faq.md&#34;&gt;the FAQ&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Disclaimer&lt;/h2&gt; &#xA;&lt;p&gt;The original maintainer is chronically ill and currently unable to work on KMonad. Luckily we have a very helpful and pleasant community that is happy to be of assistance. When energy and circumstance permits, the core developer will labour to make progress, but for now this will be sporadically and unpredictably.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>hasura/graphql-engine</title>
    <updated>2022-05-29T02:12:00Z</updated>
    <id>tag:github.com,2022-05-29:/hasura/graphql-engine</id>
    <link href="https://github.com/hasura/graphql-engine" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Blazing fast, instant realtime GraphQL APIs on your DB with fine grained access control, also trigger webhooks on database events.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Hasura GraphQL Engine&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/hasura/graphql-engine/releases/latest&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/hasura/graphql-engine&#34; alt=&#34;Latest release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hasura.io/docs&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/docs-v2.x-brightgreen.svg?style=flat&#34; alt=&#34;Docs&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://discord.gg/vBPpJkS&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/chat-discord-brightgreen.svg?logo=discord&amp;amp;style=flat&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/intent/follow?screen_name=HasuraHQ&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Follow-HasuraHQ-blue.svg?style=flat&amp;amp;logo=twitter&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hasura.io/newsletter/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/newsletter-subscribe-yellow.svg?style=flat&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Hasura is an open source product that accelerates API development by 10x by giving you &lt;a href=&#34;https://hasura.io/graphql/&#34;&gt;GraphQL&lt;/a&gt; or REST APIs with built in authorization on your data, instantly.&lt;/p&gt; &#xA;&lt;p&gt;Read more at &lt;a href=&#34;https://hasura.io&#34;&gt;hasura.io&lt;/a&gt; and the &lt;a href=&#34;https://hasura.io/docs/&#34;&gt;docs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/assets/demo.gif&#34; alt=&#34;Hasura GraphQL Engine Demo&#34;&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/assets/realtime.gif&#34; alt=&#34;Hasura GraphQL Engine Realtime Demo&#34;&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Make powerful queries&lt;/strong&gt;: Built-in filtering, pagination, pattern search, bulk insert, update, delete mutations&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Works with existing, live databases&lt;/strong&gt;: Point it to an existing database to instantly get a ready-to-use GraphQL API&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Realtime&lt;/strong&gt;: Convert any GraphQL query to a live query by using subscriptions&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Merge remote schemas&lt;/strong&gt;: Access custom GraphQL schemas for business logic via a single GraphQL Engine endpoint. &lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/remote-schemas.md&#34;&gt;&lt;strong&gt;Read more&lt;/strong&gt;&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Extend with Actions&lt;/strong&gt;: Write REST APIs to extend Hasura’s schema with custom business logic.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Trigger webhooks or serverless functions&lt;/strong&gt;: On Postgres insert/update/delete events (&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/event-triggers.md&#34;&gt;read more&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Scheduled Triggers&lt;/strong&gt;: Execute custom business logic at specific points in time using a cron config or a one-off event.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Fine-grained access control&lt;/strong&gt;: Dynamic access control that integrates with your auth system (eg: auth0, firebase-auth)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Admin UI &amp;amp; Migrations&lt;/strong&gt;: Admin UI &amp;amp; Rails-inspired schema migrations&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Supported Databases&lt;/strong&gt;: Supports PostgreSQL (and its flavours), MS SQL Server and Big Query. Support for more &lt;a href=&#34;https://hasura.io/graphql/database/&#34;&gt;databases&lt;/a&gt; coming soon.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Read more at &lt;a href=&#34;https://hasura.io&#34;&gt;hasura.io&lt;/a&gt; and the &lt;a href=&#34;https://hasura.io/docs/&#34;&gt;docs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Table of contents&lt;/h2&gt; &#xA;&lt;!-- markdown-toc start - Don&#39;t edit this section. Run M-x markdown-toc-refresh-toc --&gt; &#xA;&lt;p&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/#quickstart&#34;&gt;Quickstart:&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/#one-click-deployment-on-hasura-cloud&#34;&gt;One-click deployment on Hasura Cloud&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/#other-one-click-deployment-options&#34;&gt;Other one-click deployment options&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/#other-deployment-methods&#34;&gt;Other deployment methods&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/#architecture&#34;&gt;Architecture&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/#client-side-tooling&#34;&gt;Client-side tooling&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/#add-business-logic&#34;&gt;Add business logic&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/#remote-schemas&#34;&gt;Remote schemas&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/#trigger-webhooks-on-database-events&#34;&gt;Trigger webhooks on database events&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/#demos&#34;&gt;Demos&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/#realtime-applications&#34;&gt;Realtime applications&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/#videos&#34;&gt;Videos&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/#support--troubleshooting&#34;&gt;Support &amp;amp; Troubleshooting&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/#stay-up-to-date&#34;&gt;Stay up to date&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/#brand-assets&#34;&gt;Brand assets&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/#translations&#34;&gt;Translations&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- markdown-toc end --&gt; &#xA;&lt;h2&gt;Quickstart:&lt;/h2&gt; &#xA;&lt;h3&gt;One-click deployment on Hasura Cloud&lt;/h3&gt; &#xA;&lt;p&gt;The fastest and easiest way to try Hasura out is via &lt;a href=&#34;https://hasura.io/docs/latest/graphql/cloud/getting-started/index.html&#34;&gt;Hasura Cloud&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Click on the following button to deploy GraphQL engine on Hasura Cloud including Postgres add-on or using an existing Postgres database:&lt;/p&gt; &lt;p&gt;&lt;a href=&#34;https://cloud.hasura.io/signup&#34;&gt;&lt;img src=&#34;https://graphql-engine-cdn.hasura.io/img/deploy_to_hasura.png&#34; alt=&#34;Deploy to Hasura Cloud&#34;&gt;&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Open the Hasura console&lt;/p&gt; &lt;p&gt;Click on the button &#34;Launch console&#34; to open the Hasura console.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Make your first GraphQL query&lt;/p&gt; &lt;p&gt;Create a table and instantly run your first query. Follow this &lt;a href=&#34;https://hasura.io/docs/latest/graphql/core/getting-started/first-graphql-query.html&#34;&gt;simple guide&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Other one-click deployment options&lt;/h3&gt; &#xA;&lt;p&gt;Check out the instructions for the following one-click deployment options:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;strong&gt;Infra provider&lt;/strong&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;strong&gt;One-click link&lt;/strong&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;strong&gt;Additional information&lt;/strong&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Heroku&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://heroku.com/deploy?template=https://github.com/hasura/graphql-engine-heroku&#34;&gt;&lt;img src=&#34;https://www.herokucdn.com/deploy/button.svg?sanitize=true&#34; alt=&#34;Deploy to Heroku&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://hasura.io/docs/latest/graphql/core/guides/deployment/heroku-one-click.html&#34;&gt;docs&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;DigitalOcean&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://marketplace.digitalocean.com/apps/hasura?action=deploy&amp;amp;refcode=c4d9092d2c48&amp;amp;utm_source=hasura&amp;amp;utm_campaign=readme&#34;&gt;&lt;img src=&#34;https://graphql-engine-cdn.hasura.io/img/create_hasura_droplet_200px.png&#34; alt=&#34;Deploy to DigitalOcean&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://hasura.io/docs/latest/graphql/core/guides/deployment/digital-ocean-one-click.html#hasura-graphql-engine-digitalocean-one-click-app&#34;&gt;docs&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Azure&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://portal.azure.com/#create/Microsoft.Template/uri/https%3a%2f%2fraw.githubusercontent.com%2fhasura%2fgraphql-engine%2fmaster%2finstall-manifests%2fazure-container-with-pg%2fazuredeploy.json&#34;&gt;&lt;img src=&#34;http://azuredeploy.net/deploybutton.png&#34; alt=&#34;Deploy to Azure&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://hasura.io/docs/latest/graphql/core/guides/deployment/azure-container-instances-postgres.html&#34;&gt;docs&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Render&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://render.com/deploy?repo=https://github.com/render-examples/hasura-graphql&#34;&gt;&lt;img src=&#34;https://render.com/images/deploy-to-render-button.svg?sanitize=true&#34; alt=&#34;Deploy to Render&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://hasura.io/docs/latest/graphql/core/guides/deployment/render-one-click.html&#34;&gt;docs&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Other deployment methods&lt;/h3&gt; &#xA;&lt;p&gt;For Docker-based deployment and advanced configuration options, see &lt;a href=&#34;https://hasura.io/docs/latest/graphql/core/getting-started/index.html&#34;&gt;deployment guides&lt;/a&gt; or &lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/install-manifests&#34;&gt;install manifests&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Architecture&lt;/h2&gt; &#xA;&lt;p&gt;The Hasura GraphQL Engine fronts a Postgres database instance and can accept GraphQL requests from your client apps. It can be configured to work with your existing auth system and can handle access control using field-level rules with dynamic variables from your auth system.&lt;/p&gt; &#xA;&lt;p&gt;You can also merge remote GraphQL schemas and provide a unified GraphQL API.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/assets/hasura-arch.svg?sanitize=true&#34; alt=&#34;Hasura GraphQL Engine architecture&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Client-side tooling&lt;/h2&gt; &#xA;&lt;p&gt;Hasura works with any GraphQL client. See &lt;a href=&#34;https://github.com/chentsulin/awesome-graphql&#34;&gt;awesome-graphql&lt;/a&gt; for a list of clients. Our &lt;a href=&#34;https://hasura.io/learn/#frontend-tutorial&#34;&gt;frontend tutorial series&lt;/a&gt; also have integrations with GraphQL clients for different frameworks.&lt;/p&gt; &#xA;&lt;h2&gt;Add business logic&lt;/h2&gt; &#xA;&lt;p&gt;GraphQL Engine provides easy-to-reason, scalable and performant methods for adding custom business logic to your backend:&lt;/p&gt; &#xA;&lt;h3&gt;Remote schemas&lt;/h3&gt; &#xA;&lt;p&gt;Add custom resolvers in a remote schema in addition to Hasura&#39;s database-based GraphQL schema. Ideal for use-cases like implementing a payment API, or querying data that is not in your database - &lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/remote-schemas.md&#34;&gt;read more&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Actions&lt;/h3&gt; &#xA;&lt;p&gt;Actions are a way to extend Hasura’s schema with custom business logic using custom queries and mutations. Actions can be added to Hasura to handle various use cases such as data validation, data enrichment from external sources and any other complex business logic - &lt;a href=&#34;https://hasura.io/docs/latest/graphql/core/actions/index.html&#34;&gt;read more&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Trigger webhooks on database events&lt;/h3&gt; &#xA;&lt;p&gt;Add asynchronous business logic that is triggered based on database events. Ideal for notifications, data-pipelines from Postgres or asynchronous processing - &lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/event-triggers.md&#34;&gt;read more&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Derived data or data transformations&lt;/h3&gt; &#xA;&lt;p&gt;Transform data in Postgres or run business logic on it to derive another dataset that can be queried using GraphQL Engine - &lt;a href=&#34;https://hasura.io/docs/latest/graphql/core/queries/derived-data.html&#34;&gt;read more&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Demos&lt;/h2&gt; &#xA;&lt;p&gt;Check out all the example applications in the &lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/community/sample-apps&#34;&gt;community/sample-apps&lt;/a&gt; directory.&lt;/p&gt; &#xA;&lt;h3&gt;Realtime applications&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Group Chat application built with React, includes a typing indicator, online users &amp;amp; new message notifications.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://realtime-chat.demo.hasura.io/&#34;&gt;Try it out&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/community/sample-apps/realtime-chat&#34;&gt;Tutorial&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Live location tracking app that shows a running vehicle changing current GPS coordinates moving on a map.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://realtime-location-tracking.demo.hasura.io/&#34;&gt;Try it out&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/community/sample-apps/realtime-location-tracking&#34;&gt;Tutorial&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;A realtime dashboard for data aggregations on continuously changing data.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://realtime-poll.demo.hasura.io/&#34;&gt;Try it out&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/community/sample-apps/realtime-poll&#34;&gt;Tutorial&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Videos&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=a2AhxKqd82Q&#34;&gt;Add GraphQL to a self-hosted GitLab instance&lt;/a&gt; (&lt;em&gt;3:44 mins&lt;/em&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=15ITBYnccgc&#34;&gt;Todo app with Auth0 and GraphQL backend&lt;/a&gt; (&lt;em&gt;4:00 mins&lt;/em&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=m1ChRhRLq7o&#34;&gt;GraphQL on GitLab integrated with GitLab auth&lt;/a&gt; (&lt;em&gt;4:05 mins&lt;/em&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=tsY573yyGWA&#34;&gt;Dashboard for 10million rides with geo-location (PostGIS, Timescale)&lt;/a&gt; (&lt;em&gt;3:06 mins&lt;/em&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Support &amp;amp; Troubleshooting&lt;/h2&gt; &#xA;&lt;p&gt;The documentation and community will help you troubleshoot most issues. If you have encountered a bug or need to get in touch with us, you can contact us using one of the following channels:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Support &amp;amp; feedback: &lt;a href=&#34;https://discord.gg/hasura&#34;&gt;Discord&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Issue &amp;amp; bug tracking: &lt;a href=&#34;https://github.com/hasura/graphql-engine/issues&#34;&gt;GitHub issues&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Follow product updates: &lt;a href=&#34;https://twitter.com/hasurahq&#34;&gt;@HasuraHQ&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Talk to us on our &lt;a href=&#34;https://hasura.io&#34;&gt;website chat&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;We are committed to fostering an open and welcoming environment in the community. Please see the &lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/code-of-conduct.md&#34;&gt;Code of Conduct&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you want to report a security issue, please &lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/SECURITY.md&#34;&gt;read this&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Stay up to date&lt;/h2&gt; &#xA;&lt;p&gt;We release new features every month. Sign up for our newsletter by using the link below. We send newsletters only once a month. &lt;a href=&#34;https://hasura.io/newsletter/&#34;&gt;https://hasura.io/newsletter/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Check out our &lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/CONTRIBUTING.md&#34;&gt;contributing guide&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;h2&gt;Brand assets&lt;/h2&gt; &#xA;&lt;p&gt;Hasura brand assets (logos, the Hasura mascot, powered by badges etc.) can be found in the &lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/assets/brand&#34;&gt;assets/brand&lt;/a&gt; folder. Feel free to use them in your application/website etc. We&#39;d be thrilled if you add the &#34;Powered by Hasura&#34; badge to your applications built using Hasura. ❤️&lt;/p&gt; &#xA;&lt;div style=&#34;display: flex;&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/assets/brand/powered_by_hasura_primary_darkbg.svg?sanitize=true&#34; width=&#34;150px&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/assets/brand/powered_by_hasura_primary_lightbg.svg?sanitize=true&#34; width=&#34;150px&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!-- For light backgrounds --&amp;gt;&#xA;&amp;lt;a href=&#34;https://hasura.io&#34;&amp;gt;&#xA;  &amp;lt;img width=&#34;150px&#34; src=&#34;https://graphql-engine-cdn.hasura.io/img/powered_by_hasura_primary_darkbg.svg&#34; /&amp;gt;&#xA;&amp;lt;/a&amp;gt;&#xA;&#xA;&amp;lt;!-- For dark backgrounds --&amp;gt;&#xA;&amp;lt;a href=&#34;https://hasura.io&#34;&amp;gt;&#xA;  &amp;lt;img width=&#34;150px&#34; src=&#34;https://graphql-engine-cdn.hasura.io/img/powered_by_hasura_primary_lightbg.svg&#34; /&amp;gt;&#xA;&amp;lt;/a&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The core GraphQL Engine is available under the &lt;a href=&#34;https://www.apache.org/licenses/LICENSE-2.0&#34;&gt;Apache License 2.0&lt;/a&gt; (Apache-2.0).&lt;/p&gt; &#xA;&lt;p&gt;All &lt;strong&gt;other contents&lt;/strong&gt; (except those in &lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/server&#34;&gt;&lt;code&gt;server&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/cli&#34;&gt;&lt;code&gt;cli&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/console&#34;&gt;&lt;code&gt;console&lt;/code&gt;&lt;/a&gt; directories) are available under the &lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/LICENSE-community&#34;&gt;MIT License&lt;/a&gt;. This includes everything in the &lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/docs&#34;&gt;&lt;code&gt;docs&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/community&#34;&gt;&lt;code&gt;community&lt;/code&gt;&lt;/a&gt; directories.&lt;/p&gt; &#xA;&lt;h2&gt;Translations&lt;/h2&gt; &#xA;&lt;p&gt;This readme is available in the following translations:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/translations/README.japanese.md&#34;&gt;Japanese &lt;span&gt;🇯🇵&lt;/span&gt;&lt;/a&gt; (&lt;span&gt;🙏&lt;/span&gt; &lt;a href=&#34;https://github.com/moksahero&#34;&gt;@moksahero&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/translations/README.french.md&#34;&gt;French &lt;span&gt;🇫🇷&lt;/span&gt;&lt;/a&gt; (&lt;span&gt;🙏&lt;/span&gt; &lt;a href=&#34;https://github.com/l0ck3&#34;&gt;@l0ck3&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/translations/README.bosnian.md&#34;&gt;Bosnian &lt;span&gt;🇧🇦&lt;/span&gt;&lt;/a&gt; (&lt;span&gt;🙏&lt;/span&gt; &lt;a href=&#34;https://github.com/hajro92&#34;&gt;@hajro92&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/translations/README.russian.md&#34;&gt;Russian &lt;span&gt;🇷🇺&lt;/span&gt;&lt;/a&gt; (&lt;span&gt;🙏&lt;/span&gt; &lt;a href=&#34;https://github.com/highflyer910&#34;&gt;@highflyer910&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/translations/README.greek.md&#34;&gt;Greek 🇬🇷&lt;/a&gt; (&lt;span&gt;🙏&lt;/span&gt; &lt;a href=&#34;https://github.com/MIP2000&#34;&gt;@MIP2000&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/translations/README.mx_spanish.md&#34;&gt;Spanish 🇲🇽&lt;/a&gt;(&lt;span&gt;🙏&lt;/span&gt; &lt;a href=&#34;https://github.com/ferdox2&#34;&gt;@ferdox2&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/translations/README.indonesian.md&#34;&gt;Indonesian &lt;span&gt;🇮🇩&lt;/span&gt;&lt;/a&gt; (&lt;span&gt;🙏&lt;/span&gt; &lt;a href=&#34;https://github.com/anwari666&#34;&gt;@anwari666&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/translations/README.portuguese_br.md&#34;&gt;Brazilian Portuguese &lt;span&gt;🇧🇷&lt;/span&gt;&lt;/a&gt; (&lt;span&gt;🙏&lt;/span&gt; &lt;a href=&#34;https://github.com/rubensmp&#34;&gt;@rubensmp&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/translations/README.german.md&#34;&gt;German 🇩🇪&lt;/a&gt; (&lt;span&gt;🙏&lt;/span&gt; &lt;a href=&#34;https://github.com/FynnGrandke&#34;&gt;@FynnGrandke&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/translations/README.chinese.md&#34;&gt;Chinese &lt;span&gt;🇨🇳&lt;/span&gt;&lt;/a&gt; (&lt;span&gt;🙏&lt;/span&gt; &lt;a href=&#34;https://github.com/jagreetdg&#34;&gt;@jagreetdg&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://github.com/johnbanq&#34;&gt;@johnbanq&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/translations/README.turkish.md&#34;&gt;Turkish &lt;span&gt;🇹🇷&lt;/span&gt;&lt;/a&gt; (&lt;span&gt;🙏&lt;/span&gt; &lt;a href=&#34;https://github.com/berat&#34;&gt;@berat&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/translations/README.korean.md&#34;&gt;Korean &lt;span&gt;🇰🇷&lt;/span&gt;&lt;/a&gt; (&lt;span&gt;🙏&lt;/span&gt; &lt;a href=&#34;https://github.com/laskdjlaskdj12&#34;&gt;@라스크&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Translations for other files can be found &lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/translations&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>dataartisan/trees-algebra-haskell</title>
    <updated>2022-05-29T02:12:00Z</updated>
    <id>tag:github.com,2022-05-29:/dataartisan/trees-algebra-haskell</id>
    <link href="https://github.com/dataartisan/trees-algebra-haskell" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;p&gt;This example is based on chapter six of Richard Bird&#39;s Introduction to Functional Programming using Haskell (2nd ed.) and section two of Erik Meijer&#39;s banana paper.&lt;/p&gt; &#xA;&lt;p&gt;Please see the nat-algebra-haskell example for more information.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>khibino/haskell-invertible-syntax-parsec</title>
    <updated>2022-05-29T02:12:00Z</updated>
    <id>tag:github.com,2022-05-29:/khibino/haskell-invertible-syntax-parsec</id>
    <link href="https://github.com/khibino/haskell-invertible-syntax-parsec" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Turn Parsec type into instance of invertible-syntax-poly.&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>srid/emanote</title>
    <updated>2022-05-29T02:12:00Z</updated>
    <id>tag:github.com,2022-05-29:/srid/emanote</id>
    <link href="https://github.com/srid/emanote" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Spiritual successor to neuron, based on Ema.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;emanote&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Affero_General_Public_License&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-AGPL%20v3-blue.svg?sanitize=true&#34; alt=&#34;AGPL&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://builtwithnix.org&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Built_With-Nix-5277C3.svg?logo=nixos&amp;amp;labelColor=73C3D5&#34; alt=&#34;built with nix&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://app.element.io/#/room/#neuron:matrix.org&#34; title=&#34;Chat on Matrix&#34;&gt;&lt;img src=&#34;https://img.shields.io/matrix/neuron:matrix.org&#34; alt=&#34;Matrix&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Spiritual successor to &lt;a href=&#34;https://neuron.zettel.page&#34;&gt;neuron&lt;/a&gt;, based on &lt;a href=&#34;https://ema.srid.ca&#34;&gt;Ema&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Create beautiful websites -- such as personal webpage, blog, wiki, Zettelkasten, notebook, knowledge-base, documentation, etc. from future-proof plain-text notes and arbitrary data -- with live preview that updates in real-time.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Project Status&lt;/strong&gt;: In beta phase, but is &lt;a href=&#34;https://github.com/srid/emanote/milestone/3&#34;&gt;nearly 1.0&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installing and using&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://emanote.srid.ca/start/install&#34;&gt;https://emanote.srid.ca/start/install&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Examples&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://emanote.srid.ca/examples&#34;&gt;https://emanote.srid.ca/examples&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Developing&lt;/h2&gt; &#xA;&lt;p&gt;Emanote is written in Haskell. Thanks to Nix, this repository is pre-configured to provide a delightful development experience with full IDE support in Visual Studio Code. Follow these steps:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nixos.org/download.html&#34;&gt;Install Nix&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://nixos.wiki/wiki/Flakes&#34;&gt;enable Flakes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;nix develop -c haskell-language-server&lt;/code&gt; to sanity check your environment (Expect it to download and build a bunch of things the first time)&lt;/li&gt; &#xA; &lt;li&gt;Open the repository &lt;a href=&#34;https://code.visualstudio.com/docs/editor/workspaces#_singlefolder-workspaces&#34;&gt;as single-folder workspace&lt;/a&gt; in Visual Studio Code &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Install the &lt;a href=&#34;https://code.visualstudio.com/docs/editor/extension-marketplace#_workspace-recommended-extensions&#34;&gt;workspace recommended&lt;/a&gt; extensions&lt;/li&gt; &#xA;   &lt;li&gt;&lt;kbd&gt;Ctrl+Shift+P&lt;/kbd&gt; to run command &#34;Nix-Env: Select Environment&#34; and select &lt;code&gt;shell.nix&lt;/code&gt;. The extension will ask you to reload VSCode at the end.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Press &lt;kbd&gt;Ctrl+Shift+B&lt;/kbd&gt; in VSCode, or run &lt;code&gt;bin/run&lt;/code&gt; in terminal, to launch the dev version Emanote on &lt;code&gt;./docs&lt;/code&gt;, then navigate to &lt;a href=&#34;http://localhost:9010/&#34;&gt;http://localhost:9010/&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Changing the Haskell sources will recompile and reload this instance automatically.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;All but the final step need to be done only once. See &lt;a href=&#34;https://raw.githubusercontent.com/srid/emanote/master/docs/architecture.md&#34;&gt;architecture.md&lt;/a&gt; for a high-level overview of the codebase.&lt;/p&gt; &#xA;&lt;h2&gt;Discussion&lt;/h2&gt; &#xA;&lt;p&gt;To discuss the emanote project, &lt;a href=&#34;https://matrix.to/#/#neuron:matrix.org&#34;&gt;join Matrix&lt;/a&gt; or post in &lt;a href=&#34;https://github.com/srid/emanote/discussions&#34;&gt;GitHub Discussions&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>brendanhay/amazonka</title>
    <updated>2022-05-29T02:12:00Z</updated>
    <id>tag:github.com,2022-05-29:/brendanhay/amazonka</id>
    <link href="https://github.com/brendanhay/amazonka" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A comprehensive Amazon Web Services SDK for Haskell.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;a href=&#34;https://www.brendanhay.nz/amazonka&#34;&gt;Amazonka&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opensource.org/licenses/MPL-2.0&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-MPL%202.0-blue.svg?sanitize=true&#34; alt=&#34;MPL2&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://hackage.haskell.org/package/amazonka&#34;&gt;&lt;img src=&#34;https://img.shields.io/hackage/v/amazonka.svg?sanitize=true&#34; alt=&#34;Hackage&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/brendanhay/amazonka/actions&#34;&gt;&lt;img src=&#34;https://github.com/brendanhay/amazonka/workflows/build/badge.svg?sanitize=true&#34; alt=&#34;Build&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/brendanhay/amazonka/actions&#34;&gt;&lt;img src=&#34;https://github.com/brendanhay/amazonka/workflows/gen/badge.svg?sanitize=true&#34; alt=&#34;Gen&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/brendanhay/amazonka/actions&#34;&gt;&lt;img src=&#34;https://github.com/brendanhay/amazonka/workflows/docs/badge.svg?sanitize=true&#34; alt=&#34;Docs&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;An Amazon Web Services SDK for Haskell with support for most public services. Parts of the code contained in this repository are auto-generated and automatically kept up to date with Amazon&#39;s latest service APIs.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You can find the latest Haddock documentation for each respective library on the &lt;a href=&#34;https://www.brendanhay.nz/amazonka&#34;&gt;Amazonka&lt;/a&gt; website.&lt;/li&gt; &#xA; &lt;li&gt;A release changelog can be found in &lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/amazonka/main/lib/amazonka/CHANGELOG.md&#34;&gt;lib/amazonka/CHANGELOG.md&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;For problems, comments, or feedback please create an issue &lt;a href=&#34;https://github.com/brendanhay/amazonka/issues&#34;&gt;here on GitHub&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/amazonka/main/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/amazonka/main/#directory-layout&#34;&gt;Directory Layout&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/amazonka/main/#supported-platforms-and-ghc-versions&#34;&gt;Supported Platforms and GHC Versions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/amazonka/main/#getting-started&#34;&gt;Getting Started&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/amazonka/main/#building-the-project&#34;&gt;Building the Project&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/amazonka/main/#building-the-documentation&#34;&gt;Building the Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/amazonka/main/#running-the-code-generator&#34;&gt;Running the Code Generator&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/amazonka/main/#code-formatting&#34;&gt;Code Formatting&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/amazonka/main/#third-party-packages&#34;&gt;Third Party Packages&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Amazonka is licensed under the &lt;a href=&#34;http://www.mozilla.org/MPL/&#34;&gt;Mozilla Public License Version 2.0&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The AWS service descriptions are licensed under Apache 2.0. Source files derived from the service descriptions contain an additional licensing clause in their header.&lt;/p&gt; &#xA;&lt;h2&gt;Directory Layout&lt;/h2&gt; &#xA;&lt;p&gt;This repository is organised into the following directory structure:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/amazonka/main/lib/amazonka&#34;&gt;&lt;code&gt;lib/amazonka&lt;/code&gt;&lt;/a&gt;: The main library containing setup, authentication, and send logic. This will be your primary dependency.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lib/service/amazonka-*&lt;/code&gt;: A library per supported Amazon Web Service, you&#39;ll need to add a dependency on each selected service library.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/amazonka/main/lib/amazonka-core&#34;&gt;&lt;code&gt;lib/amazonka-core&lt;/code&gt;&lt;/a&gt;: The &lt;code&gt;amazonka-core&lt;/code&gt; library upon which each of the services depends.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/amazonka/main/lib/amazonka-test&#34;&gt;&lt;code&gt;lib/amazonka-test&lt;/code&gt;&lt;/a&gt;: Common test functionality.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/amazonka/main/examples&#34;&gt;&lt;code&gt;examples&lt;/code&gt;&lt;/a&gt;: Basic examples for using the service libraries.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/amazonka/main/configs&#34;&gt;&lt;code&gt;configs&lt;/code&gt;&lt;/a&gt;: Service configuration, templates, and assets used by the code generator.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/amazonka/main/docs&#34;&gt;&lt;code&gt;docs&lt;/code&gt;&lt;/a&gt;: The website documentation and related build code.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/amazonka/main/gen&#34;&gt;&lt;code&gt;gen&lt;/code&gt;&lt;/a&gt;: The code and configuration generators.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/amazonka/main/nix&#34;&gt;&lt;code&gt;nix&lt;/code&gt;&lt;/a&gt;: Nix configuration code for toolchain packages.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/amazonka/main/scripts&#34;&gt;&lt;code&gt;scripts&lt;/code&gt;&lt;/a&gt;: Scripts to manage the project, such as the release lifecycle.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/amazonka/main/tools&#34;&gt;&lt;code&gt;tools&lt;/code&gt;&lt;/a&gt;: Custom bazel rules.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/amazonka/main/third_party&#34;&gt;&lt;code&gt;third_party&lt;/code&gt;&lt;/a&gt;: Third party packages and patches.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Supported Platforms and GHC Versions&lt;/h2&gt; &#xA;&lt;p&gt;GHC versions &lt;code&gt;8.8.4&lt;/code&gt; and &lt;code&gt;8.10.7&lt;/code&gt; are officially supported and tested on NixOS, Ubuntu, and macOS. GHC &lt;code&gt;8.6.5&lt;/code&gt; may also work, but is not tested by our continuous integration pipeline.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;This repository is built using a combination of &lt;a href=&#34;https://nixos.org/nix/&#34;&gt;Nix&lt;/a&gt; and your choice of &lt;a href=&#34;https://bazel.build&#34;&gt;Bazel&lt;/a&gt; or Cabal. If you&#39;re just using Amazonka as a git dependency in your Cabal or Stack project, you can skip these steps. But if you plan on contributing to the codebase - welcome, read on!&lt;/p&gt; &#xA;&lt;h3&gt;1. Clone this repository&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone git@github.com:brendanhay/amazonka.git&#xA;cd amazonka&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;2. Setup Nix&lt;/h3&gt; &#xA;&lt;p&gt;Building the code in this repository requires various development dependencies (e.g. &lt;a href=&#34;https://nixos.org/nix/&#34;&gt;Nix&lt;/a&gt;, &lt;a href=&#34;https://bazel.build&#34;&gt;Bazel&lt;/a&gt;, &lt;a href=&#34;https://www.haskell.org/ghc/&#34;&gt;GHC&lt;/a&gt;.)&lt;/p&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://nixos.org/nix/&#34;&gt;Nix&lt;/a&gt; package manager is used to obtain and build the other dependencies in a &lt;a href=&#34;https://sre.google/sre-book/release-engineering/#hermetic-builds-nqslhnid&#34;&gt;hermetic&lt;/a&gt; environment. You can install Nix by following the &lt;a href=&#34;https://nixos.org/guides/install-nix.html&#34;&gt;official installation instructions&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sh &amp;lt;(curl -L https://nixos.org/nix/install) --daemon&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once Nix is setup, you can enable the &lt;a href=&#34;https://amazonka.cachix.org&#34;&gt;cache&lt;/a&gt; to avoid building dependencies:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;nix-env -iA cachix -f https://cachix.org/api/v1/install&#xA;cachix use amazonka&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;3. Enter a Nix Shell&lt;/h3&gt; &#xA;&lt;p&gt;The build tools are installed and activated upon entering a &lt;a href=&#34;https://nixos.org/nix/&#34;&gt;Nix&lt;/a&gt; shell, which is achieved by running the following command in the root of the repository:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;nix-shell&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also enter a shell and explicitly specify the GHC version:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;nix-shell --argstr ghcVersion 884&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Optionally, if you have &lt;a href=&#34;https://direnv.net&#34;&gt;Direnv&lt;/a&gt; and &lt;a href=&#34;https://github.com/nix-community/lorri&#34;&gt;lorri&lt;/a&gt; installed you can use the provided &lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/amazonka/main/.envrc&#34;&gt;.envrc&lt;/a&gt; instead, which will also add the &lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/amazonka/main/scripts&#34;&gt;scripts&lt;/a&gt; directory to your &lt;code&gt;PATH&lt;/code&gt;. You can extend this by adding your own uncommitted &lt;code&gt;.envrc.local&lt;/code&gt; file. See the &lt;a href=&#34;https://github.com/direnv/direnv/wiki&#34;&gt;Direnv Wiki&lt;/a&gt; for various recipes.&lt;/p&gt; &#xA;&lt;h2&gt;Building the Project&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;The following commands assume you&#39;re already in a nix-shell outlined in the previous step.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Cabal&lt;/h3&gt; &#xA;&lt;p&gt;If you&#39;re familiar with Cabal, you can build &lt;code&gt;amazonka-*&lt;/code&gt; packages via:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cabal build amazonka amazonka-s3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or the entire project (which will take a very long time!):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cabal build all&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Bazel&lt;/h3&gt; &#xA;&lt;p&gt;Alternatively, if you plan on contributing to the project or want to perform code generation, you will need to familiarise yourself with &lt;a href=&#34;https://bazel.build&#34;&gt;Bazel&lt;/a&gt;. You can build packages by specifying one or more targets using &lt;a href=&#34;https://docs.bazel.build/versions/4.1.0/build-ref.html#labels&#34;&gt;Bazel&#39;s label&lt;/a&gt; syntax:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bazel build //lib/amazonka //lib/services/amazonka-s3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or build all Haskell libraries in the project using the &lt;code&gt;...&lt;/code&gt; wildcard:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bazel build //lib/...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To view what targets are available in the workspace:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bazel query //...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;By default, the &lt;code&gt;bazel&lt;/code&gt; command will use the same GHC version as the Nix shell&#39;s &lt;code&gt;ghcVersion&lt;/code&gt; argument. You can choose a different GHC version using &lt;code&gt;nix-shell --argstr ghcVersion 884&lt;/code&gt; - which is just a synonym for &lt;code&gt;bazel build --//tools/ghc:version=884&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Building the Documentation&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/amazonka/main/docs&#34;&gt;docs&lt;/a&gt; Bazel package contains the Haddock target and Hugo static site definition and markdown content. To build the site locally, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bazel build //docs:bundle&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, you can serve the documentation site locally on &lt;code&gt;http://localhost:1313&lt;/code&gt; by running:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bazel run //docs:serve&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Running the Code Generator&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/amazonka/main/gen&#34;&gt;gen&lt;/a&gt; Bazel package contains code generators for synthesising Haskell data types, packages, and configuration from the botocore service definitions.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/amazonka/main/scripts/generate&#34;&gt;scripts/generate&lt;/a&gt; will run the code generator for all services configured in &lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/amazonka/main/config/services&#34;&gt;config/services&lt;/a&gt;, for example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./scripts/generate&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or, you can selectively run the generator on one or more services:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./scripts/generate ec2 s3 iam&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To update the &lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/amazonka/main/botocore&#34;&gt;botocore&lt;/a&gt; service definitions used by the generator, you can run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./scripts/update-botocore&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/amazonka/main/scripts/generate-configs&#34;&gt;scripts/generate-configs&lt;/a&gt; will run the config generator to produce placeholder &lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/amazonka/main/config/services&#34;&gt;config/serivces&lt;/a&gt; configurations for the version of botocore pinned in the &lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/amazonka/main/WORKSPACE&#34;&gt;WORKSPACE&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To generate any missing service configurations:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./scripts/generate-configs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Service configurations generated in this way are intended as examples only and the resulting &lt;code&gt;configs/services/&amp;lt;name&amp;gt;.json:libraryName&lt;/code&gt; (Haskell package name) and &lt;code&gt;configs/annexes/&amp;lt;name&amp;gt;.json:serviceAbbreviation&lt;/code&gt; (Haskell package namespace) should be manually verified and curated as necessary.&lt;/p&gt; &#xA;&lt;p&gt;For pull requests which affect generated output please &lt;em&gt;do not include&lt;/em&gt; the regenerated &lt;code&gt;amazonka-*&lt;/code&gt; packages, only commit updates to the build rules, documentation, generator, and related configuration. This ensures the Continuous Integration process is the single source of truth for the generated code and reduces noise in pull requests, keeping them reviewable and focused on actual generator code/logic changes.&lt;/p&gt; &#xA;&lt;h2&gt;Code Formatting&lt;/h2&gt; &#xA;&lt;p&gt;Please use &lt;code&gt;./scripts/format&lt;/code&gt; frequently - it&#39;s OK, I hate 2 spaces too, we&#39;re in this together.&lt;/p&gt; &#xA;&lt;h2&gt;Third Party Packages&lt;/h2&gt; &#xA;&lt;p&gt;When naming an additional library which provides supplemental functionality to &lt;code&gt;amazonka&lt;/code&gt;, if you want to use the &lt;code&gt;amazonka-*&lt;/code&gt; namespace, then please consider prefixing your package names with &lt;code&gt;amazonka-contrib-*&lt;/code&gt;. For example, &lt;a href=&#34;https://hackage.haskell.org/package/amazonka-contrib-rds-utils&#34;&gt;amazonka-contrib-rds-utils&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This minimises potential future collisions with auto-generated package names and new AWS service and product releases.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>input-output-hk/iohk-monitoring-framework</title>
    <updated>2022-05-29T02:12:00Z</updated>
    <id>tag:github.com,2022-05-29:/input-output-hk/iohk-monitoring-framework</id>
    <link href="https://github.com/input-output-hk/iohk-monitoring-framework" rel="alternate"></link>
    <summary type="html">&lt;p&gt;This framework provides logging, benchmarking and monitoring.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;iohk-monitoring-framework&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/input-output-hk/iohk-monitoring-framework/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release-pre/input-output-hk/iohk-monitoring-framework.svg?sanitize=true&#34; alt=&#34;Release version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://buildkite.com/input-output-hk/iohk-monitoring-framework&#34;&gt;&lt;img src=&#34;https://badge.buildkite.com/1cc7939a1fed4972c15b8f87d510e0404b0eb65d73cfd1e30b.svg?branch=master&#34; alt=&#34;Build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://coveralls.io/github/input-output-hk/iohk-monitoring-framework?branch=master&#34;&gt;&lt;img src=&#34;https://coveralls.io/repos/github/input-output-hk/iohk-monitoring-framework/badge.svg?branch=master&#34; alt=&#34;Coverage Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This framework provides logging, benchmarking and monitoring.&lt;/p&gt; &#xA;&lt;h2&gt;documentation&lt;/h2&gt; &#xA;&lt;p&gt;Documentation of the &lt;a href=&#34;https://github.com/input-output-hk/iohk-monitoring-framework/wiki/IOHK-Monitoring.pdf&#34;&gt;source code and tests&lt;/a&gt; in PDF format. Please, download the PDF file and open it in an external viewer. It contains links for easier navigation in the source code. Those links are not active in the online viewer.&lt;/p&gt; &#xA;&lt;p&gt;Slides of our presentations are available in &lt;a href=&#34;https://input-output-hk.github.io/iohk-monitoring-framework/&#34;&gt;html&lt;/a&gt; format.&lt;/p&gt; &#xA;&lt;p&gt;And, introductory one-pagers on logging and benchmarking are available in &lt;a href=&#34;https://input-output-hk.github.io/iohk-monitoring-framework/&#34;&gt;pdf&lt;/a&gt; format.&lt;/p&gt; &#xA;&lt;h2&gt;module dependencies&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/input-output-hk/iohk-monitoring-framework/master/docs/OverviewModules.png&#34; alt=&#34;Overview of modules&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;building and testing&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;cabal new-build all&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;cabal new-test all&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;examples&lt;/h2&gt; &#xA;&lt;p&gt;Some examples are available in the directory &lt;a href=&#34;https://github.com/input-output-hk/iohk-monitoring-framework/tree/master/iohk-monitoring/examples&#34;&gt;examples&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;simple&lt;/code&gt; - run with &lt;code&gt;cabal new-run example-simple&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;complex&lt;/code&gt; - run with &lt;code&gt;cabal new-run example-complex&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;These showcase the usage of this framework in an application. The &lt;em&gt;complex&lt;/em&gt; example includes &lt;code&gt;EKGView&lt;/code&gt; (&lt;a href=&#34;http://localhost:12789&#34;&gt;http://localhost:12789&lt;/a&gt;) and the configuration editor (&lt;a href=&#34;http://localhost:13789&#34;&gt;http://localhost:13789&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/input-output-hk/iohk-monitoring-framework/master/docs/ConfigEditor.png&#34; alt=&#34;Edit runtime configuration&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;development&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;cabal new-build all&lt;/code&gt; and &lt;code&gt;cabal new-test all&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ghcid -c &#34;cabal new-repl&#34;&lt;/code&gt; watches for file changes and recompiles them immediately&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>koalaman/shellcheck</title>
    <updated>2022-05-29T02:12:00Z</updated>
    <id>tag:github.com,2022-05-29:/koalaman/shellcheck</id>
    <link href="https://github.com/koalaman/shellcheck" rel="alternate"></link>
    <summary type="html">&lt;p&gt;ShellCheck, a static analysis tool for shell scripts&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/actions/workflows/build.yml&#34;&gt;&lt;img src=&#34;https://github.com/koalaman/shellcheck/actions/workflows/build.yml/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;ShellCheck - A shell script static analysis tool&lt;/h1&gt; &#xA;&lt;p&gt;ShellCheck is a GPLv3 tool that gives warnings and suggestions for bash/sh shell scripts:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/doc/terminal.png&#34; alt=&#34;Screenshot of a terminal showing problematic shell script lines highlighted&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The goals of ShellCheck are&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;To point out and clarify typical beginner&#39;s syntax issues that cause a shell to give cryptic error messages.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To point out and clarify typical intermediate level semantic problems that cause a shell to behave strangely and counter-intuitively.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To point out subtle caveats, corner cases and pitfalls that may cause an advanced user&#39;s otherwise working script to fail under future circumstances.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/README.md#user-content-gallery-of-bad-code&#34;&gt;the gallery of bad code&lt;/a&gt; for examples of what ShellCheck can help you identify!&lt;/p&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#how-to-use&#34;&gt;How to use&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#on-the-web&#34;&gt;On the web&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#from-your-terminal&#34;&gt;From your terminal&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#in-your-editor&#34;&gt;In your editor&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#in-your-build-or-test-suites&#34;&gt;In your build or test suites&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#installing&#34;&gt;Installing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#compiling-from-source&#34;&gt;Compiling from source&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#installing-cabal&#34;&gt;Installing Cabal&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#compiling-shellcheck&#34;&gt;Compiling ShellCheck&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#running-tests&#34;&gt;Running tests&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#gallery-of-bad-code&#34;&gt;Gallery of bad code&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#quoting&#34;&gt;Quoting&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#conditionals&#34;&gt;Conditionals&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#frequently-misused-commands&#34;&gt;Frequently misused commands&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#common-beginners-mistakes&#34;&gt;Common beginner&#39;s mistakes&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#style&#34;&gt;Style&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#data-and-typing-errors&#34;&gt;Data and typing errors&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#robustness&#34;&gt;Robustness&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#portability&#34;&gt;Portability&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#miscellaneous&#34;&gt;Miscellaneous&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#testimonials&#34;&gt;Testimonials&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#ignoring-issues&#34;&gt;Ignoring issues&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#reporting-bugs&#34;&gt;Reporting bugs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#copyright&#34;&gt;Copyright&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#other-resources&#34;&gt;Other Resources&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How to use&lt;/h2&gt; &#xA;&lt;p&gt;There are a number of ways to use ShellCheck!&lt;/p&gt; &#xA;&lt;h3&gt;On the web&lt;/h3&gt; &#xA;&lt;p&gt;Paste a shell script on &lt;a href=&#34;https://www.shellcheck.net&#34;&gt;https://www.shellcheck.net&lt;/a&gt; for instant feedback.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.shellcheck.net&#34;&gt;ShellCheck.net&lt;/a&gt; is always synchronized to the latest git commit, and is the easiest way to give ShellCheck a go. Tell your friends!&lt;/p&gt; &#xA;&lt;h3&gt;From your terminal&lt;/h3&gt; &#xA;&lt;p&gt;Run &lt;code&gt;shellcheck yourscript&lt;/code&gt; in your terminal for instant output, as seen above.&lt;/p&gt; &#xA;&lt;h3&gt;In your editor&lt;/h3&gt; &#xA;&lt;p&gt;You can see ShellCheck suggestions directly in a variety of editors.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Vim, through &lt;a href=&#34;https://github.com/w0rp/ale&#34;&gt;ALE&lt;/a&gt;, &lt;a href=&#34;https://github.com/neomake/neomake&#34;&gt;Neomake&lt;/a&gt;, or &lt;a href=&#34;https://github.com/scrooloose/syntastic&#34;&gt;Syntastic&lt;/a&gt;:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/doc/vim-syntastic.png&#34; alt=&#34;Screenshot of Vim showing inlined shellcheck feedback&#34;&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Emacs, through &lt;a href=&#34;https://github.com/flycheck/flycheck&#34;&gt;Flycheck&lt;/a&gt; or &lt;a href=&#34;https://github.com/federicotdn/flymake-shellcheck&#34;&gt;Flymake&lt;/a&gt;:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/doc/emacs-flycheck.png&#34; alt=&#34;Screenshot of emacs showing inlined shellcheck feedback&#34;&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Sublime, through &lt;a href=&#34;https://github.com/SublimeLinter/SublimeLinter-shellcheck&#34;&gt;SublimeLinter&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Atom, through &lt;a href=&#34;https://github.com/AtomLinter/linter-shellcheck&#34;&gt;Linter&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;VSCode, through &lt;a href=&#34;https://github.com/timonwong/vscode-shellcheck&#34;&gt;vscode-shellcheck&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Most other editors, through &lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/shellcheck.1.md#user-content-formats&#34;&gt;GCC error compatibility&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;In your build or test suites&lt;/h3&gt; &#xA;&lt;p&gt;While ShellCheck is mostly intended for interactive use, it can easily be added to builds or test suites. It makes canonical use of exit codes, so you can just add a &lt;code&gt;shellcheck&lt;/code&gt; command as part of the process.&lt;/p&gt; &#xA;&lt;p&gt;For example, in a Makefile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Makefile&#34;&gt;check-scripts:&#xA;    # Fail if any of these files have warnings&#xA;    shellcheck myscripts/*.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or in a Travis CI &lt;code&gt;.travis.yml&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;script:&#xA;  # Fail if any of these files have warnings&#xA;  - shellcheck myscripts/*.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Services and platforms that have ShellCheck pre-installed and ready to use:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://travis-ci.org/&#34;&gt;Travis CI&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.codacy.com/&#34;&gt;Codacy&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://codeclimate.com/&#34;&gt;Code Climate&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.codefactor.io/&#34;&gt;Code Factor&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://circleci.com&#34;&gt;CircleCI&lt;/a&gt; via the &lt;a href=&#34;https://circleci.com/orbs/registry/orb/circleci/shellcheck&#34;&gt;ShellCheck Orb&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/features/actions&#34;&gt;Github&lt;/a&gt; (only Linux)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Most other services, including &lt;a href=&#34;https://about.gitlab.com/&#34;&gt;GitLab&lt;/a&gt;, let you install ShellCheck yourself, either through the system&#39;s package manager (see &lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#installing&#34;&gt;Installing&lt;/a&gt;), or by downloading and unpacking a &lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#installing-a-pre-compiled-binary&#34;&gt;binary release&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s a good idea to manually install a specific ShellCheck version regardless. This avoids any surprise build breaks when a new version with new warnings is published.&lt;/p&gt; &#xA;&lt;p&gt;For customized filtering or reporting, ShellCheck can output simple JSON, CheckStyle compatible XML, GCC compatible warnings as well as human readable text (with or without ANSI colors). See the &lt;a href=&#34;https://github.com/koalaman/shellcheck/wiki/Integration&#34;&gt;Integration&lt;/a&gt; wiki page for more documentation.&lt;/p&gt; &#xA;&lt;h2&gt;Installing&lt;/h2&gt; &#xA;&lt;p&gt;The easiest way to install ShellCheck locally is through your package manager.&lt;/p&gt; &#xA;&lt;p&gt;On systems with Cabal (installs to &lt;code&gt;~/.cabal/bin&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cabal update&#xA;cabal install ShellCheck&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On systems with Stack (installs to &lt;code&gt;~/.local/bin&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;stack update&#xA;stack install ShellCheck&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On Debian based distros:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo apt install shellcheck&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On Arch Linux based distros:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pacman -S shellcheck&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or get the dependency free &lt;a href=&#34;https://aur.archlinux.org/packages/shellcheck-bin/&#34;&gt;shellcheck-bin&lt;/a&gt; from the AUR.&lt;/p&gt; &#xA;&lt;p&gt;On Gentoo based distros:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;emerge --ask shellcheck&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On EPEL based distros:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo yum -y install epel-release&#xA;sudo yum install ShellCheck&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On Fedora based distros:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;dnf install ShellCheck&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On FreeBSD:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pkg install hs-ShellCheck&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On macOS (OS X) with Homebrew:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;brew install shellcheck&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or with MacPorts:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo port install shellcheck&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On OpenBSD:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pkg_add shellcheck&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On openSUSE&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;zypper in ShellCheck&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or use OneClickInstall - &lt;a href=&#34;https://software.opensuse.org/package/ShellCheck&#34;&gt;https://software.opensuse.org/package/ShellCheck&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;On Solus:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;eopkg install shellcheck&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On Windows (via &lt;a href=&#34;https://chocolatey.org/packages/shellcheck&#34;&gt;chocolatey&lt;/a&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cmd&#34;&gt;C:\&amp;gt; choco install shellcheck&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or Windows (via &lt;a href=&#34;http://scoop.sh&#34;&gt;scoop&lt;/a&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cmd&#34;&gt;C:\&amp;gt; scoop install shellcheck&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;From &lt;a href=&#34;https://anaconda.org/conda-forge/shellcheck&#34;&gt;conda-forge&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;conda install -c conda-forge shellcheck&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;From Snap Store:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;snap install --channel=edge shellcheck&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;From Docker Hub:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker run --rm -v &#34;$PWD:/mnt&#34; koalaman/shellcheck:stable myscript&#xA;# Or :v0.4.7 for that version, or :latest for daily builds&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or use &lt;code&gt;koalaman/shellcheck-alpine&lt;/code&gt; if you want a larger Alpine Linux based image to extend. It works exactly like a regular Alpine image, but has shellcheck preinstalled.&lt;/p&gt; &#xA;&lt;p&gt;Using the &lt;a href=&#34;https://nixos.org/nix&#34;&gt;nix package manager&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;nix-env -iA nixpkgs.shellcheck&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, you can download pre-compiled binaries for the latest release here:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/releases/download/stable/shellcheck-stable.linux.x86_64.tar.xz&#34;&gt;Linux, x86_64&lt;/a&gt; (statically linked)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/releases/download/stable/shellcheck-stable.linux.armv6hf.tar.xz&#34;&gt;Linux, armv6hf&lt;/a&gt;, i.e. Raspberry Pi (statically linked)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/releases/download/stable/shellcheck-stable.linux.aarch64.tar.xz&#34;&gt;Linux, aarch64&lt;/a&gt; aka ARM64 (statically linked)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/releases/download/stable/shellcheck-stable.darwin.x86_64.tar.xz&#34;&gt;macOS, x86_64&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/releases/download/stable/shellcheck-stable.zip&#34;&gt;Windows, x86&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;or see the &lt;a href=&#34;https://github.com/koalaman/shellcheck/releases&#34;&gt;GitHub Releases&lt;/a&gt; for other releases (including the &lt;a href=&#34;https://github.com/koalaman/shellcheck/releases/tag/latest&#34;&gt;latest&lt;/a&gt; meta-release for daily git builds).&lt;/p&gt; &#xA;&lt;p&gt;Distro packages already come with a &lt;code&gt;man&lt;/code&gt; page. If you are building from source, it can be installed with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;pandoc -s -f markdown-smart -t man shellcheck.1.md -o shellcheck.1&#xA;sudo mv shellcheck.1 /usr/share/man/man1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;pre-commit&lt;/h3&gt; &#xA;&lt;p&gt;To run ShellCheck via &lt;a href=&#34;https://pre-commit.com/&#34;&gt;pre-commit&lt;/a&gt;, add the hook to your &lt;code&gt;.pre-commit-config.yaml&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;repos:&#xA;-   repo: https://github.com/koalaman/shellcheck-precommit&#xA;    rev: v0.7.2&#xA;    hooks:&#xA;    -   id: shellcheck&#xA;#       args: [&#34;--severity=warning&#34;]  # Optionally only show errors and warnings&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Travis CI&lt;/h3&gt; &#xA;&lt;p&gt;Travis CI has now integrated ShellCheck by default, so you don&#39;t need to manually install it.&lt;/p&gt; &#xA;&lt;p&gt;If you still want to do so in order to upgrade at your leisure or ensure you&#39;re using the latest release, follow the steps below to install a binary version.&lt;/p&gt; &#xA;&lt;h3&gt;Installing a pre-compiled binary&lt;/h3&gt; &#xA;&lt;p&gt;The pre-compiled binaries come in &lt;code&gt;tar.xz&lt;/code&gt; files. To decompress them, make sure &lt;code&gt;xz&lt;/code&gt; is installed. On Debian/Ubuntu/Mint, you can &lt;code&gt;apt install xz-utils&lt;/code&gt;. On Redhat/Fedora/CentOS, &lt;code&gt;yum -y install xz&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;A simple installer may do something like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;scversion=&#34;stable&#34; # or &#34;v0.4.7&#34;, or &#34;latest&#34;&#xA;wget -qO- &#34;https://github.com/koalaman/shellcheck/releases/download/${scversion?}/shellcheck-${scversion?}.linux.x86_64.tar.xz&#34; | tar -xJv&#xA;cp &#34;shellcheck-${scversion}/shellcheck&#34; /usr/bin/&#xA;shellcheck --version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Compiling from source&lt;/h2&gt; &#xA;&lt;p&gt;This section describes how to build ShellCheck from a source directory. ShellCheck is written in Haskell and requires 2GB of RAM to compile.&lt;/p&gt; &#xA;&lt;h3&gt;Installing Cabal&lt;/h3&gt; &#xA;&lt;p&gt;ShellCheck is built and packaged using Cabal. Install the package &lt;code&gt;cabal-install&lt;/code&gt; from your system&#39;s package manager (with e.g. &lt;code&gt;apt-get&lt;/code&gt;, &lt;code&gt;brew&lt;/code&gt;, &lt;code&gt;emerge&lt;/code&gt;, &lt;code&gt;yum&lt;/code&gt;, or &lt;code&gt;zypper&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;On macOS (OS X), you can do a fast install of Cabal using brew, which takes a couple of minutes instead of more than 30 minutes if you try to compile it from source.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ brew install cabal-install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On MacPorts, the package is instead called &lt;code&gt;hs-cabal-install&lt;/code&gt;, while native Windows users should install the latest version of the Haskell platform from &lt;a href=&#34;https://www.haskell.org/platform/&#34;&gt;https://www.haskell.org/platform/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Verify that &lt;code&gt;cabal&lt;/code&gt; is installed and update its dependency list with&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cabal update&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Compiling ShellCheck&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;git clone&lt;/code&gt; this repository, and &lt;code&gt;cd&lt;/code&gt; to the ShellCheck source directory to build/install:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cabal install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or if you intend to run the tests:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cabal install --enable-tests&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will compile ShellCheck and install it to your &lt;code&gt;~/.cabal/bin&lt;/code&gt; directory.&lt;/p&gt; &#xA;&lt;p&gt;Add this directory to your &lt;code&gt;PATH&lt;/code&gt; (for bash, add this to your &lt;code&gt;~/.bashrc&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;export PATH=&#34;$HOME/.cabal/bin:$PATH&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Log out and in again, and verify that your PATH is set up correctly:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ which shellcheck&#xA;~/.cabal/bin/shellcheck&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On native Windows, the &lt;code&gt;PATH&lt;/code&gt; should already be set up, but the system may use a legacy codepage. In &lt;code&gt;cmd.exe&lt;/code&gt;, &lt;code&gt;powershell.exe&lt;/code&gt; and Powershell ISE, make sure to use a TrueType font, not a Raster font, and set the active codepage to UTF-8 (65001) with &lt;code&gt;chcp&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cmd&#34;&gt;chcp 65001&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In Powershell ISE, you may need to additionally update the output encoding:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;[Console]::OutputEncoding = [System.Text.Encoding]::UTF8&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Running tests&lt;/h3&gt; &#xA;&lt;p&gt;To run the unit test suite:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cabal test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Gallery of bad code&lt;/h2&gt; &#xA;&lt;p&gt;So what kind of things does ShellCheck look for? Here is an incomplete list of detected issues.&lt;/p&gt; &#xA;&lt;h3&gt;Quoting&lt;/h3&gt; &#xA;&lt;p&gt;ShellCheck can recognize several types of incorrect quoting:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;echo $1                           # Unquoted variables&#xA;find . -name *.ogg                # Unquoted find/grep patterns&#xA;rm &#34;~/my file.txt&#34;                # Quoted tilde expansion&#xA;v=&#39;--verbose=&#34;true&#34;&#39;; cmd $v      # Literal quotes in variables&#xA;for f in &#34;*.ogg&#34;                  # Incorrectly quoted &#39;for&#39; loops&#xA;touch $@                          # Unquoted $@&#xA;echo &#39;Don&#39;t forget to restart!&#39;   # Singlequote closed by apostrophe&#xA;echo &#39;Don\&#39;t try this at home&#39;    # Attempting to escape &#39; in &#39;&#39;&#xA;echo &#39;Path is $PATH&#39;              # Variables in single quotes&#xA;trap &#34;echo Took ${SECONDS}s&#34; 0    # Prematurely expanded trap&#xA;unset var[i]                      # Array index treated as glob&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Conditionals&lt;/h3&gt; &#xA;&lt;p&gt;ShellCheck can recognize many types of incorrect test statements.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;[[ n != 0 ]]                      # Constant test expressions&#xA;[[ -e *.mpg ]]                    # Existence checks of globs&#xA;[[ $foo==0 ]]                     # Always true due to missing spaces&#xA;[[ -n &#34;$foo &#34; ]]                  # Always true due to literals&#xA;[[ $foo =~ &#34;fo+&#34; ]]               # Quoted regex in =~&#xA;[ foo =~ re ]                     # Unsupported [ ] operators&#xA;[ $1 -eq &#34;shellcheck&#34; ]           # Numerical comparison of strings&#xA;[ $n &amp;amp;&amp;amp; $m ]                      # &amp;amp;&amp;amp; in [ .. ]&#xA;[ grep -q foo file ]              # Command without $(..)&#xA;[[ &#34;$$file&#34; == *.jpg ]]           # Comparisons that can&#39;t succeed&#xA;(( 1 -lt 2 ))                     # Using test operators in ((..))&#xA;[ x ] &amp;amp; [ y ] | [ z ]             # Accidental backgrounding and piping&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Frequently misused commands&lt;/h3&gt; &#xA;&lt;p&gt;ShellCheck can recognize instances where commands are used incorrectly:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;grep &#39;*foo*&#39; file                 # Globs in regex contexts&#xA;find . -exec foo {} &amp;amp;&amp;amp; bar {} \;  # Prematurely terminated find -exec&#xA;sudo echo &#39;Var=42&#39; &amp;gt; /etc/profile # Redirecting sudo&#xA;time --format=%s sleep 10         # Passing time(1) flags to time builtin&#xA;while read h; do ssh &#34;$h&#34; uptime  # Commands eating while loop input&#xA;alias archive=&#39;mv $1 /backup&#39;     # Defining aliases with arguments&#xA;tr -cd &#39;[a-zA-Z0-9]&#39;              # [] around ranges in tr&#xA;exec foo; echo &#34;Done!&#34;            # Misused &#39;exec&#39;&#xA;find -name \*.bak -o -name \*~ -delete  # Implicit precedence in find&#xA;# find . -exec foo &amp;gt; bar \;       # Redirections in find&#xA;f() { whoami; }; sudo f           # External use of internal functions&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Common beginner&#39;s mistakes&lt;/h3&gt; &#xA;&lt;p&gt;ShellCheck recognizes many common beginner&#39;s syntax errors:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;var = 42                          # Spaces around = in assignments&#xA;$foo=42                           # $ in assignments&#xA;for $var in *; do ...             # $ in for loop variables&#xA;var$n=&#34;Hello&#34;                     # Wrong indirect assignment&#xA;echo ${var$n}                     # Wrong indirect reference&#xA;var=(1, 2, 3)                     # Comma separated arrays&#xA;array=( [index] = value )         # Incorrect index initialization&#xA;echo $var[14]                     # Missing {} in array references&#xA;echo &#34;Argument 10 is $10&#34;         # Positional parameter misreference&#xA;if $(myfunction); then ..; fi     # Wrapping commands in $()&#xA;else if othercondition; then ..   # Using &#39;else if&#39;&#xA;f; f() { echo &#34;hello world; }     # Using function before definition&#xA;[ false ]                         # &#39;false&#39; being true&#xA;if ( -f file )                    # Using (..) instead of test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Style&lt;/h3&gt; &#xA;&lt;p&gt;ShellCheck can make suggestions to improve style:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;[[ -z $(find /tmp | grep mpg) ]]  # Use grep -q instead&#xA;a &amp;gt;&amp;gt; log; b &amp;gt;&amp;gt; log; c &amp;gt;&amp;gt; log      # Use a redirection block instead&#xA;echo &#34;The time is `date`&#34;         # Use $() instead&#xA;cd dir; process *; cd ..;         # Use subshells instead&#xA;echo $[1+2]                       # Use standard $((..)) instead of old $[]&#xA;echo $(($RANDOM % 6))             # Don&#39;t use $ on variables in $((..))&#xA;echo &#34;$(date)&#34;                    # Useless use of echo&#xA;cat file | grep foo               # Useless use of cat&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Data and typing errors&lt;/h3&gt; &#xA;&lt;p&gt;ShellCheck can recognize issues related to data and typing:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;args=&#34;$@&#34;                         # Assigning arrays to strings&#xA;files=(foo bar); echo &#34;$files&#34;    # Referencing arrays as strings&#xA;declare -A arr=(foo bar)          # Associative arrays without index&#xA;printf &#34;%s\n&#34; &#34;Arguments: $@.&#34;    # Concatenating strings and arrays&#xA;[[ $# &amp;gt; 2 ]]                      # Comparing numbers as strings&#xA;var=World; echo &#34;Hello &#34; var      # Unused lowercase variables&#xA;echo &#34;Hello $name&#34;                # Unassigned lowercase variables&#xA;cmd | read bar; echo $bar         # Assignments in subshells&#xA;cat foo | cp bar                  # Piping to commands that don&#39;t read&#xA;printf &#39;%s: %s\n&#39; foo             # Mismatches in printf argument count&#xA;eval &#34;${array[@]}&#34;                # Lost word boundaries in array eval&#xA;for i in &#34;${x[@]}&#34;; do ${x[$i]}   # Using array value as key&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Robustness&lt;/h3&gt; &#xA;&lt;p&gt;ShellCheck can make suggestions for improving the robustness of a script:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;rm -rf &#34;$STEAMROOT/&#34;*            # Catastrophic rm&#xA;touch ./-l; ls *                 # Globs that could become options&#xA;find . -exec sh -c &#39;a &amp;amp;&amp;amp; b {}&#39; \; # Find -exec shell injection&#xA;printf &#34;Hello $name&#34;             # Variables in printf format&#xA;for f in $(ls *.txt); do         # Iterating over ls output&#xA;export MYVAR=$(cmd)              # Masked exit codes&#xA;case $version in 2.*) :;; 2.6.*) # Shadowed case branches&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Portability&lt;/h3&gt; &#xA;&lt;p&gt;ShellCheck will warn when using features not supported by the shebang. For example, if you set the shebang to &lt;code&gt;#!/bin/sh&lt;/code&gt;, ShellCheck will warn about portability issues similar to &lt;code&gt;checkbashisms&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;echo {1..$n}                     # Works in ksh, but not bash/dash/sh&#xA;echo {1..10}                     # Works in ksh and bash, but not dash/sh&#xA;echo -n 42                       # Works in ksh, bash and dash, undefined in sh&#xA;expr match str regex             # Unportable alias for `expr str : regex`&#xA;trap &#39;exit 42&#39; sigint            # Unportable signal spec&#xA;cmd &amp;amp;&amp;gt; file                      # Unportable redirection operator&#xA;read foo &amp;lt; /dev/tcp/host/22      # Unportable intercepted files&#xA;foo-bar() { ..; }                # Undefined/unsupported function name&#xA;[ $UID = 0 ]                     # Variable undefined in dash/sh&#xA;local var=value                  # local is undefined in sh&#xA;time sleep 1 | sleep 5           # Undefined uses of &#39;time&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Miscellaneous&lt;/h3&gt; &#xA;&lt;p&gt;ShellCheck recognizes a menagerie of other issues:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;PS1=&#39;\e[0;32m\$\e[0m &#39;            # PS1 colors not in \[..\]&#xA;PATH=&#34;$PATH:~/bin&#34;                # Literal tilde in $PATH&#xA;rm “file”                         # Unicode quotes&#xA;echo &#34;Hello world&#34;                # Carriage return / DOS line endings&#xA;echo hello \                      # Trailing spaces after \&#xA;var=42 echo $var                  # Expansion of inlined environment&#xA;!# bin/bash -x -e                 # Common shebang errors&#xA;echo $((n/180*100))               # Unnecessary loss of precision&#xA;ls *[:digit:].txt                 # Bad character class globs&#xA;sed &#39;s/foo/bar/&#39; file &amp;gt; file      # Redirecting to input&#xA;var2=$var2                        # Variable assigned to itself&#xA;[ x$var = xval ]                  # Antiquated x-comparisons&#xA;ls() { ls -l &#34;$@&#34;; }              # Infinitely recursive wrapper&#xA;alias ls=&#39;ls -l&#39;; ls foo          # Alias used before it takes effect&#xA;for x; do for x; do               # Nested loop uses same variable&#xA;while getopts &#34;a&#34; f; do case $f in &#34;b&#34;) # Unhandled getopts flags&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Testimonials&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;At first you&#39;re like &#34;shellcheck is awesome&#34; but then you&#39;re like &#34;wtf are we still using bash&#34;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Alexander Tarasikov, &lt;a href=&#34;https://twitter.com/astarasikov/status/568825996532707330&#34;&gt;via Twitter&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Ignoring issues&lt;/h2&gt; &#xA;&lt;p&gt;Issues can be ignored via environmental variable, command line, individually or globally within a file:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/wiki/Ignore&#34;&gt;https://github.com/koalaman/shellcheck/wiki/Ignore&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Reporting bugs&lt;/h2&gt; &#xA;&lt;p&gt;Please use the GitHub issue tracker for any bugs or feature suggestions:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/issues&#34;&gt;https://github.com/koalaman/shellcheck/issues&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Please submit patches to code or documentation as GitHub pull requests! Check out the &lt;a href=&#34;https://github.com/koalaman/shellcheck/wiki/DevGuide&#34;&gt;DevGuide&lt;/a&gt; on the ShellCheck Wiki.&lt;/p&gt; &#xA;&lt;p&gt;Contributions must be licensed under the GNU GPLv3. The contributor retains the copyright.&lt;/p&gt; &#xA;&lt;h2&gt;Copyright&lt;/h2&gt; &#xA;&lt;p&gt;ShellCheck is licensed under the GNU General Public License, v3. A copy of this license is included in the file &lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/LICENSE&#34;&gt;LICENSE&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Copyright 2012-2019, &lt;a href=&#34;https://github.com/koalaman/&#34;&gt;Vidar &#39;koala_man&#39; Holen&lt;/a&gt; and contributors.&lt;/p&gt; &#xA;&lt;p&gt;Happy ShellChecking!&lt;/p&gt; &#xA;&lt;h2&gt;Other Resources&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The wiki has &lt;a href=&#34;https://github.com/koalaman/shellcheck/wiki/Checks&#34;&gt;long form descriptions&lt;/a&gt; for each warning, e.g. &lt;a href=&#34;https://github.com/koalaman/shellcheck/wiki/SC2221&#34;&gt;SC2221&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;ShellCheck does not attempt to enforce any kind of formatting or indenting style, so also check out &lt;a href=&#34;https://github.com/mvdan/sh&#34;&gt;shfmt&lt;/a&gt;!&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>facebook/duckling</title>
    <updated>2022-05-29T02:12:00Z</updated>
    <id>tag:github.com,2022-05-29:/facebook/duckling</id>
    <link href="https://github.com/facebook/duckling" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Language, engine, and tooling for expressing, testing, and evaluating composable language rules on input strings.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://github.com/facebook/duckling/raw/main/logo.png&#34; alt=&#34;Duckling Logo&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Duckling &lt;a href=&#34;https://opensource.fb.com/support-ukraine&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Support-Ukraine-FFD500?style=flat&amp;amp;labelColor=005BBB&#34; alt=&#34;Support Ukraine&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://travis-ci.org/facebook/duckling&#34;&gt;&lt;img src=&#34;https://travis-ci.org/facebook/duckling.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;Duckling is a Haskell library that parses text into structured data.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&#34;the first Tuesday of October&#34;&#xA;=&amp;gt; {&#34;value&#34;:&#34;2017-10-03T00:00:00.000-07:00&#34;,&#34;grain&#34;:&#34;day&#34;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;A Haskell environment is required. We recommend using &lt;a href=&#34;https://haskell-lang.org/get-started&#34;&gt;stack&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;On Linux and MacOS you&#39;ll need to install PCRE development headers. On Linux, use your package manager to install them. On MacOS, the easiest way to install them is with &lt;a href=&#34;https://brew.sh/&#34;&gt;Homebrew&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew install pcre&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If that doesn&#39;t help, try running &lt;code&gt;brew doctor&lt;/code&gt; and fix the issues it finds.&lt;/p&gt; &#xA;&lt;h2&gt;Quickstart&lt;/h2&gt; &#xA;&lt;p&gt;To compile and run the binary:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;stack build&#xA;stack exec duckling-example-exe&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The first time you run it, it will download all required packages.&lt;/p&gt; &#xA;&lt;p&gt;This runs a basic HTTP server. Example request:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -XPOST http://0.0.0.0:8000/parse --data &#39;locale=en_GB&amp;amp;text=tomorrow at eight&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In the example application, all dimensions are enabled by default. Provide the parameter &lt;code&gt;dims&lt;/code&gt; to specify which ones you want. Examples:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Identify credit card numbers only:&#xA;$ curl -XPOST http://0.0.0.0:8000/parse --data &#39;locale=en_US&amp;amp;text=&#34;4111-1111-1111-1111&#34;&amp;amp;dims=&#34;[&#34;credit-card-number&#34;]&#34;&#39;&#xA;If you want multiple dimensions, comma-separate them in the array:&#xA;$ curl -XPOST http://0.0.0.0:8000/parse --data &#39;locale=en_US&amp;amp;text=&#34;3 cups of sugar&#34;&amp;amp;dims=&#34;[&#34;quantity&#34;,&#34;numeral&#34;]&#34;&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;code&gt;exe/ExampleMain.hs&lt;/code&gt; for an example on how to integrate Duckling in your project. If your backend doesn&#39;t run Haskell or if you don&#39;t want to spin your own Duckling server, you can directly use &lt;a href=&#34;https://wit.ai&#34;&gt;wit.ai&lt;/a&gt;&#39;s built-in entities.&lt;/p&gt; &#xA;&lt;h2&gt;Supported dimensions&lt;/h2&gt; &#xA;&lt;p&gt;Duckling supports many languages, but most don&#39;t support all dimensions yet (&lt;strong&gt;we need your help!&lt;/strong&gt;). Please look into &lt;a href=&#34;https://github.com/facebook/duckling/raw/master/Duckling/Dimensions&#34;&gt;this directory&lt;/a&gt; for language-specific support.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Dimension&lt;/th&gt; &#xA;   &lt;th&gt;Example input&lt;/th&gt; &#xA;   &lt;th&gt;Example value output&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;AmountOfMoney&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&#34;42€&#34;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;{&#34;value&#34;:42,&#34;type&#34;:&#34;value&#34;,&#34;unit&#34;:&#34;EUR&#34;}&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;CreditCardNumber&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&#34;4111-1111-1111-1111&#34;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;{&#34;value&#34;:&#34;4111111111111111&#34;,&#34;issuer&#34;:&#34;visa&#34;}&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Distance&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&#34;6 miles&#34;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;{&#34;value&#34;:6,&#34;type&#34;:&#34;value&#34;,&#34;unit&#34;:&#34;mile&#34;}&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Duration&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&#34;3 mins&#34;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;{&#34;value&#34;:3,&#34;minute&#34;:3,&#34;unit&#34;:&#34;minute&#34;,&#34;normalized&#34;:{&#34;value&#34;:180,&#34;unit&#34;:&#34;second&#34;}}&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Email&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&#34;&lt;a href=&#34;mailto:duckling-team@fb.com&#34;&gt;duckling-team@fb.com&lt;/a&gt;&#34;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;{&#34;value&#34;:&#34;duckling-team@fb.com&#34;}&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Numeral&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&#34;eighty eight&#34;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;{&#34;value&#34;:88,&#34;type&#34;:&#34;value&#34;}&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Ordinal&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&#34;33rd&#34;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;{&#34;value&#34;:33,&#34;type&#34;:&#34;value&#34;}&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;PhoneNumber&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&#34;+1 (650) 123-4567&#34;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;{&#34;value&#34;:&#34;(+1) 6501234567&#34;}&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Quantity&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&#34;3 cups of sugar&#34;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;{&#34;value&#34;:3,&#34;type&#34;:&#34;value&#34;,&#34;product&#34;:&#34;sugar&#34;,&#34;unit&#34;:&#34;cup&#34;}&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Temperature&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&#34;80F&#34;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;{&#34;value&#34;:80,&#34;type&#34;:&#34;value&#34;,&#34;unit&#34;:&#34;fahrenheit&#34;}&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Time&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&#34;today at 9am&#34;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;{&#34;values&#34;:[{&#34;value&#34;:&#34;2016-12-14T09:00:00.000-08:00&#34;,&#34;grain&#34;:&#34;hour&#34;,&#34;type&#34;:&#34;value&#34;}],&#34;value&#34;:&#34;2016-12-14T09:00:00.000-08:00&#34;,&#34;grain&#34;:&#34;hour&#34;,&#34;type&#34;:&#34;value&#34;}&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Url&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&#34;&lt;a href=&#34;https://api.wit.ai/message?q=hi&#34;&gt;https://api.wit.ai/message?q=hi&lt;/a&gt;&#34;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;{&#34;value&#34;:&#34;https://api.wit.ai/message?q=hi&#34;,&#34;domain&#34;:&#34;api.wit.ai&#34;}&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Volume&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&#34;4 gallons&#34;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;{&#34;value&#34;:4,&#34;type&#34;:&#34;value&#34;,&#34;unit&#34;:&#34;gallon&#34;}&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/facebook/duckling/raw/master/exe/CustomDimensionExample.hs&#34;&gt;Custom dimensions&lt;/a&gt; are also supported.&lt;/p&gt; &#xA;&lt;h2&gt;Extending Duckling&lt;/h2&gt; &#xA;&lt;p&gt;To regenerate the classifiers and run the test suite:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;stack build :duckling-regen-exe &amp;amp;&amp;amp; stack exec duckling-regen-exe &amp;amp;&amp;amp; stack test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It&#39;s important to regenerate the classifiers after updating the code and before running the test suite.&lt;/p&gt; &#xA;&lt;p&gt;To extend Duckling&#39;s support for a dimension in a given language, typically 4 files need to be updated:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;Duckling/&amp;lt;Dimension&amp;gt;/&amp;lt;Lang&amp;gt;/Rules.hs&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;Duckling/&amp;lt;Dimension&amp;gt;/&amp;lt;Lang&amp;gt;/Corpus.hs&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;Duckling/Dimensions/&amp;lt;Lang&amp;gt;.hs&lt;/code&gt; (if not already present in &lt;code&gt;Duckling/Dimensions/Common.hs&lt;/code&gt;)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;Duckling/Rules/&amp;lt;Lang&amp;gt;.hs&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To add a new language:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Make sure that the language code used follows the &lt;a href=&#34;https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes&#34;&gt;ISO-639-1 standard&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;The first dimension to implement is &lt;code&gt;Numeral&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Follow &lt;a href=&#34;https://github.com/facebook/duckling/commit/24d3f199768be970149412c95b1c1bf5d76f8240&#34;&gt;this example&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To add a new locale:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;There should be a need for diverging rules between the locale and the language.&lt;/li&gt; &#xA; &lt;li&gt;Make sure that the locale code is a valid &lt;a href=&#34;https://www.iso.org/obp/ui/#search/code/&#34;&gt;ISO3166 alpha2 country code&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Follow &lt;a href=&#34;https://github.com/facebook/duckling/commit/1ab5f447d2635fe6d48887a501d333a52adff5b9&#34;&gt;this example&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Rules have a name, a pattern and a production. Patterns are used to perform character-level matching (regexes on input) and concept-level matching (predicates on tokens). Productions are arbitrary functions that take a list of tokens and return a new token.&lt;/p&gt; &#xA;&lt;p&gt;The corpus (resp. negative corpus) is a list of examples that should (resp. shouldn&#39;t) parse. The reference time for the corpus is Tuesday Feb 12, 2013 at 4:30am.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Duckling.Debug&lt;/code&gt; provides a few debugging tools:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ stack repl --no-load&#xA;&amp;gt; :l Duckling.Debug&#xA;&amp;gt; debug (makeLocale EN $ Just US) &#34;in two minutes&#34; [Seal Time]&#xA;in|within|after &amp;lt;duration&amp;gt; (in two minutes)&#xA;-- regex (in)&#xA;-- &amp;lt;integer&amp;gt; &amp;lt;unit-of-duration&amp;gt; (two minutes)&#xA;-- -- integer (0..19) (two)&#xA;-- -- -- regex (two)&#xA;-- -- minute (grain) (minutes)&#xA;-- -- -- regex (minutes)&#xA;[Entity {dim = &#34;time&#34;, body = &#34;in two minutes&#34;, value = RVal Time (TimeValue (SimpleValue (InstantValue {vValue = 2013-02-12 04:32:00 -0200, vGrain = Second})) [SimpleValue (InstantValue {vValue = 2013-02-12 04:32:00 -0200, vGrain = Second})] Nothing), start = 0, end = 14}]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Duckling is &lt;a href=&#34;https://raw.githubusercontent.com/facebook/duckling/main/LICENSE&#34;&gt;BSD-licensed&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>imsut/starthaskell</title>
    <updated>2022-05-29T02:12:00Z</updated>
    <id>tag:github.com,2022-05-29:/imsut/starthaskell</id>
    <link href="https://github.com/imsut/starthaskell" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>input-output-hk/plutus</title>
    <updated>2022-05-29T02:12:00Z</updated>
    <id>tag:github.com,2022-05-29:/input-output-hk/plutus</id>
    <link href="https://github.com/input-output-hk/plutus" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The Plutus language implementation and tools&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;a href=&#34;https://github.com/input-output-hk/plutus&#34;&gt;Plutus Core&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;div id=&#34;toc&#34; class=&#34;toc&#34;&gt; &#xA; &lt;div id=&#34;toctitle&#34;&gt;&#xA;  Table of Contents&#xA; &lt;/div&gt; &#xA; &lt;ul class=&#34;sectlevel1&#34;&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus/master/#_documentation&#34;&gt;Documentation&lt;/a&gt; &#xA;   &lt;ul class=&#34;sectlevel2&#34;&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus/master/#_user_documentation&#34;&gt;User documentation&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus/master/#_talks&#34;&gt;Talks&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus/master/#_specifications_and_design&#34;&gt;Specifications and design&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus/master/#_academic_papers&#34;&gt;Academic papers&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus/master/#_versioning_and_releases&#34;&gt;Versioning and releases&lt;/a&gt; &#xA;   &lt;ul class=&#34;sectlevel2&#34;&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus/master/#_versioning&#34;&gt;Versioning&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus/master/#_branching_and_tagging&#34;&gt;Branching and tagging&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus/master/#_version_ranges&#34;&gt;Version ranges&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus/master/#_releases&#34;&gt;Releases&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus/master/#_working_with_the_project&#34;&gt;Working with the project&lt;/a&gt; &#xA;   &lt;ul class=&#34;sectlevel2&#34;&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus/master/#_how_to_submit_an_issue&#34;&gt;How to submit an issue&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus/master/#how-to-develop&#34;&gt;How to develop and contribute to the project&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus/master/#_how_to_depend_on_the_project_from_another_haskell_project&#34;&gt;How to depend on the project from another Haskell project&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus/master/#_how_to_build_the_projects_artifacts&#34;&gt;How to build the project’s artifacts&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus/master/#nix-advice&#34;&gt;Nix&lt;/a&gt; &#xA;   &lt;ul class=&#34;sectlevel2&#34;&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus/master/#iohk-binary-cache&#34;&gt;How to set up the IOHK binary caches&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus/master/#nix-build-attributes&#34;&gt;Which attributes to use to build different artifacts&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus/master/#_licensing&#34;&gt;Licensing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/div&gt; &#xA;&lt;div id=&#34;preamble&#34;&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;Plutus Core is the scripting language embedded in the Cardano ledger and forms the basis of the Plutus Platform, an application development platform for developing distributed applications using the Cardano blockchain. For more information about the projects, see the &lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus/master/#user-documentation&#34;&gt;[user-documentation]&lt;/a&gt;.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;This repository contains:&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;ulist&#34;&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt; &lt;p&gt;The implementation, specification, and mechanized metatheory of Plutus Core&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;Plutus Tx, the compiler from Haskell to Plutus Core.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;/ul&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;The rest of this README is focussed on people who want to develop or contribute to the project.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;For people who want to &lt;strong&gt;use&lt;/strong&gt; the project, please consult the &lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus/master/#user-documentation&#34;&gt;[user-documentation]&lt;/a&gt;.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;admonitionblock important&#34;&gt; &#xA;   &lt;table&gt; &#xA;    &lt;tbody&gt;&#xA;     &lt;tr&gt; &#xA;      &lt;td class=&#34;icon&#34;&gt; &#xA;       &lt;div class=&#34;title&#34;&gt;&#xA;        Important&#xA;       &lt;/div&gt; &lt;/td&gt; &#xA;      &lt;td class=&#34;content&#34;&gt; &#xA;       &lt;div class=&#34;paragraph&#34;&gt; &#xA;        &lt;p&gt;This repository used to contain the code for the Plutus Application Framework and Marlowe. These have now &lt;strong&gt;moved&lt;/strong&gt;:&lt;/p&gt; &#xA;       &lt;/div&gt; &#xA;       &lt;div class=&#34;ulist&#34;&gt; &#xA;        &lt;ul&gt; &#xA;         &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/input-output-hk/plutus-apps&#34;&gt;Plutus Application Framework&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;         &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/input-output-hk/marlowe-cardano&#34;&gt;Marlowe&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;        &lt;/ul&gt; &#xA;       &lt;/div&gt; &#xA;       &lt;div class=&#34;paragraph&#34;&gt; &#xA;        &lt;p&gt;Please ensure that you make PRs and issues in the appropriate repository!&lt;/p&gt; &#xA;       &lt;/div&gt; &lt;/td&gt; &#xA;     &lt;/tr&gt; &#xA;    &lt;/tbody&gt;&#xA;   &lt;/table&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div id=&#34;cache-warning&#34; class=&#34;admonitionblock important&#34;&gt; &#xA;   &lt;table&gt; &#xA;    &lt;tbody&gt;&#xA;     &lt;tr&gt; &#xA;      &lt;td class=&#34;icon&#34;&gt; &#xA;       &lt;div class=&#34;title&#34;&gt;&#xA;        Important&#xA;       &lt;/div&gt; &lt;/td&gt; &#xA;      &lt;td class=&#34;content&#34;&gt; &#xA;       &lt;div class=&#34;paragraph&#34;&gt; &#xA;        &lt;p&gt;DO NOT IGNORE THIS&lt;/p&gt; &#xA;       &lt;/div&gt; &#xA;       &lt;div class=&#34;paragraph&#34;&gt; &#xA;        &lt;p&gt;If you want to use Nix with this project, make sure to set up the &lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus/master/#iohk-binary-cache&#34;&gt;IOHK binary cache&lt;/a&gt;. If you do not do this, you will end up building GHC, which takes several hours. If you find yourself building GHC, STOP and fix the cache.&lt;/p&gt; &#xA;       &lt;/div&gt; &lt;/td&gt; &#xA;     &lt;/tr&gt; &#xA;    &lt;/tbody&gt;&#xA;   &lt;/table&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;_documentation&#34;&gt;Documentation&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;_user_documentation&#34;&gt;User documentation&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;The main documentation is located &lt;a href=&#34;https://plutus.readthedocs.io/en/latest/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;_talks&#34;&gt;Talks&lt;/h3&gt; &#xA;   &lt;div class=&#34;ulist&#34;&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=MpWeg6Fg0t8&#34;&gt;Functional Smart Contracts on Cardano (2020)&lt;/a&gt;: an overview of the ideas behind the Plutus Platform.&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=usMPt8KpBeI&#34;&gt;The Plutus Platform (2020)&lt;/a&gt;: an overview of the Platform as a whole (including the Application Framework) at the time.&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;_specifications_and_design&#34;&gt;Specifications and design&lt;/h3&gt; &#xA;   &lt;div class=&#34;ulist&#34;&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://hydra.iohk.io/job/Cardano/plutus/linux.docs.plutus-report/latest/download-by-type/doc-pdf/plutus&#34;&gt;Plutus Technical Report (draft)&lt;/a&gt;: a technical report and design document for the project.&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://hydra.iohk.io/job/Cardano/plutus/linux.docs.plutus-core-spec/latest/download-by-type/doc-pdf/plutus-core-specification&#34;&gt;Plutus Core Specification&lt;/a&gt;: the formal specification of the core language.&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://hydra.iohk.io/job/Cardano/plutus/linux.docs.extended-utxo-spec/latest/download-by-type/doc-pdf/extended-utxo-specification&#34;&gt;Extended UTXO Model&lt;/a&gt;: a design document for the core changes to the Cardano ledger.&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;_academic_papers&#34;&gt;Academic papers&lt;/h3&gt; &#xA;   &lt;div class=&#34;ulist&#34;&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://hydra.iohk.io/job/Cardano/plutus/linux.docs.papers.unraveling-recursion/latest/download-by-type/doc-pdf/unraveling-recursion&#34;&gt;Unraveling Recursion&lt;/a&gt;: a description of some of the compilation strategies used in Plutus IR (&lt;a href=&#34;https://doi.org/10.1007/978-3-030-33636-3_15&#34;&gt;published version&lt;/a&gt;).&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://hydra.iohk.io/job/Cardano/plutus/linux.docs.papers.system-f-in-agda/latest/download-by-type/doc-pdf/paper&#34;&gt;System F in Agda&lt;/a&gt;: a formal model of System F in Agda (&lt;a href=&#34;https://doi.org/10.1007/978-3-030-33636-3_10&#34;&gt;published version&lt;/a&gt;).&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://hydra.iohk.io/job/Cardano/plutus/linux.docs.papers.eutxo/latest/download-by-type/doc-pdf/eutxo&#34;&gt;The Extended UTXO Model&lt;/a&gt;: a full presentation of the EUTXO ledger extension (&lt;a href=&#34;https://doi.org/10.1007/978-3-030-54455-3_37&#34;&gt;published version&lt;/a&gt;).&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://hydra.iohk.io/job/Cardano/plutus/linux.docs.papers.utxoma/latest/download-by-type/doc-pdf/utxoma&#34;&gt;UTXOma: UTXO with Multi-Asset Support&lt;/a&gt;: a full presentation of the multi-asset ledger extension (&lt;a href=&#34;https://doi.org/10.1007/978-3-030-61467-6_8&#34;&gt;published version&lt;/a&gt;).&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://hydra.iohk.io/job/Cardano/plutus/linux.docs.papers.eutxoma/latest/download-by-type/doc-pdf/eutxoma&#34;&gt;Native Custom Tokens in the Extended UTXO Model&lt;/a&gt;: a discussion of the interaction of the multi-asset support with EUTXO (&lt;a href=&#34;https://doi.org/10.1007/978-3-030-61467-6_7&#34;&gt;published version&lt;/a&gt;).&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://arxiv.org/abs/2201.04919&#34;&gt;Translation Certification for Smart Contracts&lt;/a&gt;: a certifier of Plutus IR compiler passes written in Coq.&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;_versioning_and_releases&#34;&gt;Versioning and releases&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;_versioning&#34;&gt;Versioning&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;The core &lt;code&gt;plutus&lt;/code&gt; packages are versioned as follows:&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;ulist&#34;&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt; &lt;p&gt;Package versioning follows the &lt;a href=&#34;https://pvp.haskell.org/&#34;&gt;PVP&lt;/a&gt; on a best-effort basis (i.e. we will generally try to but we won’t guarantee it).&lt;/p&gt; &#xA;      &lt;div class=&#34;ulist&#34;&gt; &#xA;       &lt;ul&gt; &#xA;        &lt;li&gt; &lt;p&gt;The first-major-version component indicates the &#34;era&#34; which for our purposes means which major version of the &lt;strong&gt;Cardano node&lt;/strong&gt; is being targeted.&lt;/p&gt; &lt;/li&gt; &#xA;        &lt;li&gt; &lt;p&gt;The second-major-version component is used for releases which are major versions according to the PVP, but which are still compatible with the current &#34;era&#34;.&lt;/p&gt; &lt;/li&gt; &#xA;        &lt;li&gt; &lt;p&gt;The minor-version and below are used as normal.&lt;/p&gt; &lt;/li&gt; &#xA;       &lt;/ul&gt; &#xA;      &lt;/div&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Packages which are used downstream should all have the same version.&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Other packages which are not used downstream (e.g. &lt;code&gt;plutus-benchmark&lt;/code&gt;) can remain unversioned.&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;In principle we could just have a single major version, but using two makes it easier to avoid mistakes.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;_branching_and_tagging&#34;&gt;Branching and tagging&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;The following branching and tagging rules are followed:&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;ulist&#34;&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt; &lt;p&gt;Version &lt;code&gt;X&lt;/code&gt; is tagged as &lt;code&gt;vX&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;code&gt;master&lt;/code&gt; is always targeting the next first-major-version.&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;First-major-version releases also have a release branch, &lt;code&gt;release/X&lt;/code&gt;.&lt;/p&gt; &#xA;      &lt;div class=&#34;ulist&#34;&gt; &#xA;       &lt;ul&gt; &#xA;        &lt;li&gt; &lt;p&gt;Changes will be backported from master to the release branch&lt;/p&gt; &lt;/li&gt; &#xA;        &lt;li&gt; &lt;p&gt;Subsequent lesser releases will be made from that branch but do not create new branches.&lt;/p&gt; &lt;/li&gt; &#xA;       &lt;/ul&gt; &#xA;      &lt;/div&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;_version_ranges&#34;&gt;Version ranges&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;Packages which depend on &lt;code&gt;plutus&lt;/code&gt; packages should use version ranges to control which version of those packages they build against.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;ulist&#34;&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt; &lt;p&gt;Packages in &lt;code&gt;plutus&lt;/code&gt; which are used downstream should pin the major-version of each other (e.g. &lt;code&gt;plutus-tx-1.0.1&lt;/code&gt; should depend on &lt;code&gt;plutus-core ^&amp;gt;= 1.0&lt;/code&gt;).&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Downstream packages should pin at least the first-major-version of &lt;code&gt;plutus&lt;/code&gt; packages.&lt;/p&gt; &#xA;      &lt;div class=&#34;ulist&#34;&gt; &#xA;       &lt;ul&gt; &#xA;        &lt;li&gt; &lt;p&gt;Upgrading to a new second-major-version should always be safe, with at most code breakage (following the PVP). Users may of course want to pin this version as well to avoid such breakage.&lt;/p&gt; &lt;/li&gt; &#xA;       &lt;/ul&gt; &#xA;      &lt;/div&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Downstream packages pulling in &lt;code&gt;plutus&lt;/code&gt; packages via &lt;code&gt;source-repository-package&lt;/code&gt; stanzas should always take tagged commits, or potentially commits from a release branch.&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;_releases&#34;&gt;Releases&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;Currently there is no release process beyond bumping the package versions and making a tag/branch as appropriate.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;_working_with_the_project&#34;&gt;Working with the project&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;_how_to_submit_an_issue&#34;&gt;How to submit an issue&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;Issues can be filed in the &lt;a href=&#34;https://github.com/input-output-hk/plutus/issues&#34;&gt;GitHub Issue tracker&lt;/a&gt;.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;However, note that this is pre-release software, so we will not usually be providing support.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;how-to-develop&#34;&gt;How to develop and contribute to the project&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus/master/CONTRIBUTING.html&#34;&gt;CONTRIBUTING&lt;/a&gt;, which describes our processes in more detail including development environments.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;_how_to_depend_on_the_project_from_another_haskell_project&#34;&gt;How to depend on the project from another Haskell project&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;None of our libraries are on Hackage, unfortunately (many of our dependencies aren’t either). So for the time being, you need to:&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;olist arabic&#34;&gt; &#xA;    &lt;ol class=&#34;arabic&#34;&gt; &#xA;     &lt;li&gt; &lt;p&gt;Add &lt;code&gt;plutus&lt;/code&gt; as a &lt;code&gt;source-repository-package&lt;/code&gt; to your &lt;code&gt;cabal.project&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Copy the &lt;code&gt;source-repository-package&lt;/code&gt; stanzas from our &lt;code&gt;cabal.project&lt;/code&gt; to yours.&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Copy additional stanzas from our &lt;code&gt;cabal.project&lt;/code&gt; as you need, e.g. you may need some of the &lt;code&gt;allow-newer&lt;/code&gt; stanzas.&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;/ol&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;The &lt;a href=&#34;https://github.com/input-output-hk/plutus-starter&#34;&gt;plutus-starter&lt;/a&gt; project provides an example.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;_how_to_build_the_projects_artifacts&#34;&gt;How to build the project’s artifacts&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;This section contains information about how to build the project’s artifacts for independent usage. For development work see &lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus/master/#how-to-develop&#34;&gt;How to develop and contribute to the project&lt;/a&gt; for more information.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;sect3&#34;&gt; &#xA;    &lt;h4 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h4&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;The Haskell libraries in Plutus Core are built with &lt;code&gt;cabal&lt;/code&gt; and Nix. The other artifacts (docs etc.) are also most easily built with Nix.&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;sect4&#34;&gt; &#xA;     &lt;h5 id=&#34;_nix&#34;&gt;Nix&lt;/h5&gt; &#xA;     &lt;div class=&#34;paragraph&#34;&gt; &#xA;      &lt;p&gt;Install &lt;a href=&#34;https://nixos.org/nix/&#34;&gt;Nix&lt;/a&gt; (recommended). following the instructions on the &lt;a href=&#34;https://nixos.org/nix/&#34;&gt;Nix website&lt;/a&gt;.&lt;/p&gt; &#xA;     &lt;/div&gt; &#xA;     &lt;div class=&#34;paragraph&#34;&gt; &#xA;      &lt;p&gt;Make sure you have read and understood the &lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus/master/#cache-warning&#34;&gt;cache warning&lt;/a&gt;. DO NOT IGNORE THIS.&lt;/p&gt; &#xA;     &lt;/div&gt; &#xA;     &lt;div class=&#34;paragraph&#34;&gt; &#xA;      &lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus/master/#nix-advice&#34;&gt;Nix&lt;/a&gt; for further advice on using Nix.&lt;/p&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;sect4&#34;&gt; &#xA;     &lt;h5 id=&#34;_non_nix&#34;&gt;Non-Nix&lt;/h5&gt; &#xA;     &lt;div class=&#34;paragraph&#34;&gt; &#xA;      &lt;p&gt;You can build some of the Haskell packages without Nix, but this is not recommended and we don’t guarantee that these prerequisites are sufficient. If you use Nix, these tools are provided for you via &lt;code&gt;shell.nix&lt;/code&gt;, and you do &lt;strong&gt;not&lt;/strong&gt; need to install them yourself.&lt;/p&gt; &#xA;     &lt;/div&gt; &#xA;     &lt;div class=&#34;ulist&#34;&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt; &lt;p&gt;If you want to build our Haskell packages with &lt;a href=&#34;https://www.haskell.org/cabal/&#34;&gt;&lt;code&gt;cabal&lt;/code&gt;&lt;/a&gt;, then install it.&lt;/p&gt; &lt;/li&gt; &#xA;       &lt;li&gt; &lt;p&gt;If you want to build our Agda code, then install &lt;a href=&#34;https://github.com/agda/agda&#34;&gt;Agda&lt;/a&gt; and the &lt;a href=&#34;https://github.com/agda/agda-stdlib&#34;&gt;standard library&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;/ul&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;sect3&#34;&gt; &#xA;    &lt;h4 id=&#34;building-with-nix&#34;&gt;How to build the Haskell packages and other artifacts with Nix&lt;/h4&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;Run &lt;code&gt;nix build -f default.nix plutus.haskell.packages.plutus-core.components.library&lt;/code&gt; from the root to build the Plutus Core library.&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus/master/#nix-build-attributes&#34;&gt;Which attributes to use to build different artifacts&lt;/a&gt; to find out what other attributes you can build.&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;sect3&#34;&gt; &#xA;    &lt;h4 id=&#34;_how_to_build_the_haskell_packages_with_cabal&#34;&gt;How to build the Haskell packages with &lt;code&gt;cabal&lt;/code&gt;&lt;/h4&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;The Haskell packages can be built directly with &lt;code&gt;cabal&lt;/code&gt;. We do this during development (see &lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus/master/#how-to-develop&#34;&gt;How to develop and contribute to the project&lt;/a&gt;). The best way is to do this is inside a &lt;code&gt;nix-shell&lt;/code&gt;.&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;admonitionblock note&#34;&gt; &#xA;     &lt;table&gt; &#xA;      &lt;tbody&gt;&#xA;       &lt;tr&gt; &#xA;        &lt;td class=&#34;icon&#34;&gt; &#xA;         &lt;div class=&#34;title&#34;&gt;&#xA;          Note&#xA;         &lt;/div&gt; &lt;/td&gt; &#xA;        &lt;td class=&#34;content&#34;&gt; &#xA;         &lt;div class=&#34;paragraph&#34;&gt; &#xA;          &lt;p&gt;For fresh development setups, you also need to run &lt;code&gt;cabal update&lt;/code&gt;.&lt;/p&gt; &#xA;         &lt;/div&gt; &lt;/td&gt; &#xA;       &lt;/tr&gt; &#xA;      &lt;/tbody&gt;&#xA;     &lt;/table&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;Run &lt;code&gt;cabal build plutus-core&lt;/code&gt; from the root to build the Plutus Core library.&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus/master/cabal.project&#34;&gt;cabal project file&lt;/a&gt; to see the other packages that you can build with &lt;code&gt;cabal&lt;/code&gt;.&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;nix-advice&#34;&gt;Nix&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;iohk-binary-cache&#34;&gt;How to set up the IOHK binary caches&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;Adding the IOHK binary cache to your Nix configuration will speed up builds a lot, since many things will have been built already by our CI.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;If you find you are building packages that are not defined in this repository, or if the build seems to take a very long time then you may not have this set up properly.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;To set up the cache:&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;olist arabic&#34;&gt; &#xA;    &lt;ol class=&#34;arabic&#34;&gt; &#xA;     &lt;li&gt; &lt;p&gt;On non-NixOS, edit &lt;code&gt;/etc/nix/nix.conf&lt;/code&gt; and add the following lines:&lt;/p&gt; &#xA;      &lt;div class=&#34;listingblock&#34;&gt; &#xA;       &lt;div class=&#34;content&#34;&gt; &#xA;        &lt;pre&gt;substituters        = https://hydra.iohk.io https://iohk.cachix.org https://cache.nixos.org/&#xA;trusted-public-keys = hydra.iohk.io:f/Ea+s+dFdN+3Y/G+FDgSq+a5NEWhJGzdjvKNGv0/EQ= iohk.cachix.org-1:DpRUyj7h7V830dp/i6Nti+NEO2/nhblbov/8MW7Rqoo= cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY=&lt;/pre&gt; &#xA;       &lt;/div&gt; &#xA;      &lt;/div&gt; &#xA;      &lt;div class=&#34;admonitionblock note&#34;&gt; &#xA;       &lt;table&gt; &#xA;        &lt;tbody&gt;&#xA;         &lt;tr&gt; &#xA;          &lt;td class=&#34;icon&#34;&gt; &#xA;           &lt;div class=&#34;title&#34;&gt;&#xA;            Note&#xA;           &lt;/div&gt; &lt;/td&gt; &#xA;          &lt;td class=&#34;content&#34;&gt; &#xA;           &lt;div class=&#34;paragraph&#34;&gt; &#xA;            &lt;p&gt;If you don’t have an &lt;code&gt;/etc/nix/nix.conf&lt;/code&gt; or don’t want to edit it, you may add the &lt;code&gt;nix.conf&lt;/code&gt; lines to &lt;code&gt;~/.config/nix/nix.conf&lt;/code&gt; instead. You must be a &lt;a href=&#34;https://nixos.org/nix/manual/#ssec-multi-user&#34;&gt;trusted user&lt;/a&gt; to do this. If this file doesn’t exist, go ahead and create it.&lt;/p&gt; &#xA;           &lt;/div&gt; &lt;/td&gt; &#xA;         &lt;/tr&gt; &#xA;        &lt;/tbody&gt;&#xA;       &lt;/table&gt; &#xA;      &lt;/div&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;On NixOS, set the following NixOS options:&lt;/p&gt; &#xA;      &lt;div class=&#34;listingblock&#34;&gt; &#xA;       &lt;div class=&#34;content&#34;&gt; &#xA;        &lt;pre&gt;nix = {&#xA;  binaryCaches          = [ &#34;https://hydra.iohk.io&#34; &#34;https://iohk.cachix.org&#34; ];&#xA;  binaryCachePublicKeys = [ &#34;hydra.iohk.io:f/Ea+s+dFdN+3Y/G+FDgSq+a5NEWhJGzdjvKNGv0/EQ=&#34; &#34;iohk.cachix.org-1:DpRUyj7h7V830dp/i6Nti+NEO2/nhblbov/8MW7Rqoo=&#34; ];&#xA;};&lt;/pre&gt; &#xA;       &lt;/div&gt; &#xA;      &lt;/div&gt; &lt;/li&gt; &#xA;    &lt;/ol&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;Note: after changing /etc/nix/nix.conf you must restart the nix-daemon on non-NixOS for the changes to take effect!&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;nix-build-attributes&#34;&gt;Which attributes to use to build different artifacts&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus/master/default.nix&#34;&gt;&lt;code&gt;default.nix&lt;/code&gt;&lt;/a&gt; defines a package set with attributes for all the artifacts you can build from this repository. These can be built using &lt;code&gt;nix build&lt;/code&gt;. For example:&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;listingblock&#34;&gt; &#xA;    &lt;div class=&#34;content&#34;&gt; &#xA;     &lt;pre&gt;nix build -f default.nix docs.papers.eutxo&lt;/pre&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;ulist&#34;&gt; &#xA;    &lt;div class=&#34;title&#34;&gt;&#xA;     Example attributes&#xA;    &lt;/div&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt; &lt;p&gt;Project packages: defined inside &lt;code&gt;plutus.haskell.packages&lt;/code&gt;&lt;/p&gt; &#xA;      &lt;div class=&#34;ulist&#34;&gt; &#xA;       &lt;ul&gt; &#xA;        &lt;li&gt; &lt;p&gt;e.g.&amp;nbsp;&lt;code&gt;plutus.haskell.packages.plutus-core.components.library&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;       &lt;/ul&gt; &#xA;      &lt;/div&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Documents: defined inside &lt;code&gt;docs&lt;/code&gt;&lt;/p&gt; &#xA;      &lt;div class=&#34;ulist&#34;&gt; &#xA;       &lt;ul&gt; &#xA;        &lt;li&gt; &lt;p&gt;e.g.&amp;nbsp;&lt;code&gt;docs.plutus-core-spec&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;       &lt;/ul&gt; &#xA;      &lt;/div&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;There are other attributes defined in &lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus/master/default.nix&#34;&gt;&lt;code&gt;default.nix&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;_licensing&#34;&gt;Licensing&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;You are free to copy, modify, and distribute this software under the terms of the Apache 2.0 license. See the &lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus/master/LICENSE&#34;&gt;LICENSE&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus/master/NOTICE&#34;&gt;NOTICE&lt;/a&gt; files for details.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt;</summary>
  </entry>
  <entry>
    <title>kowainik/learn4haskell</title>
    <updated>2022-05-29T02:12:00Z</updated>
    <id>tag:github.com,2022-05-29:/kowainik/learn4haskell</id>
    <link href="https://github.com/kowainik/learn4haskell" rel="alternate"></link>
    <summary type="html">&lt;p&gt;👩‍🏫 👨‍🏫 Learn Haskell basics in 4 pull requests&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;learn4haskell&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kowainik/learn4haskell/main/images/HacktoberFest2021-Learn4Haskell-Banner.png&#34; alt=&#34;Learn4Haskell&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;🚨 &lt;strong&gt;Important notice: This course continues BAU even after Hacktoberfest&lt;/strong&gt; 🚨&lt;/p&gt; &#xA;&lt;p&gt;You can find the results of Hacktoberfest 2020 for &lt;a href=&#34;https://github.com/kowainik/learn4haskell&#34;&gt;Learn4Haskell&lt;/a&gt; in the following blog post:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://kowainik.github.io/posts/hacktoberfest2020&#34;&gt;Brave New Hacktoberfest&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;It&#39;s the time of the year when thousand pull requests are starting to float in the air like a leaf on the wind 🍃&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s Hacktoberfest! And we are happy to be part of this fantastic event.&lt;/p&gt; &#xA;&lt;p&gt;Usually, people contribute to projects within the communities they spend most of their time already and don&#39;t try to go out of those boundaries. But why not use this time to learn something challenging, something fresh, something that you never had time for?&lt;/p&gt; &#xA;&lt;p&gt;You can get the benefits of Hacktoberfest while learning something new fascinating concepts – Functional Programming with Haskell.&lt;/p&gt; &#xA;&lt;p&gt;And we&#39;re here to help!&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;4 Pull Request to get the T-Shirt or plant a tree as stands in the Hacktoberfest rules.&lt;/li&gt; &#xA; &lt;li&gt;4 Pull Request to learn to program in Haskell.&lt;/li&gt; &#xA; &lt;li&gt;4 Pull Request to blow your mind.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kowainik/learn4haskell/main/#what-is-learn4haskell&#34;&gt;What is Learn4Haskell&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kowainik/learn4haskell/main/#course-plan&#34;&gt;Course Plan&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kowainik/learn4haskell/main/#goals&#34;&gt;Goals&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kowainik/learn4haskell/main/#who-can-participate&#34;&gt;Who can participate&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kowainik/learn4haskell/main/#what-you-will-get-from-this-course&#34;&gt;What you will get from this course&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kowainik/learn4haskell/main/#how-to-get-started&#34;&gt;How to get started&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kowainik/learn4haskell/main/#installing-haskell&#34;&gt;Installing Haskell&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kowainik/learn4haskell/main/#haskell-ide&#34;&gt;Haskell IDE&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kowainik/learn4haskell/main/#how-to-develop&#34;&gt;How to develop&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kowainik/learn4haskell/main/#who-we-are&#34;&gt;Who we are&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kowainik/learn4haskell/main/#how-can-you-help&#34;&gt;How can you help&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;What is Learn4Haskell&lt;/h2&gt; &#xA;&lt;p&gt;Learn4Haskell is a GitHub-located course that will get you into the Haskell Functional Programming world in just 4 Pull Requests.&lt;/p&gt; &#xA;&lt;p&gt;This course is organised as a coding project. So you can complete the course without needing to exit your editor.&lt;/p&gt; &#xA;&lt;p&gt;This works in the following way. When you decide to start the project, all you need to do is to fork the project. We have prepared 4 separate modules — chapters. Each part contains educational material and lots of examples that we provide in a simple form that doesn&#39;t require you to know anything about functional programming beforehand. Also, each chapter contains several exercises on everything that is explained by us. You can solve the tasks on your way and at the end open a PR to your fork with this chapter&#39;s solution and summon us (by shouting out our nicknames there). We would be happy to give you feedback on your progress, explain problematic concepts or just support you mentally!&lt;/p&gt; &#xA;&lt;p&gt;Each chapter contains unique information and covers different topics. We suggest going through them in order. However, if you think that some of the chapters are already familiar to you, feel free to skip onto the next one. If you would like to talk to us, you can even rely on PRs for the chapter you have questions about.&lt;/p&gt; &#xA;&lt;p&gt;Chapters are stuffed with information but are aimed to be completed without additional resources. You may spend an evening per chapter, but we swear it&#39;s worth it!&lt;/p&gt; &#xA;&lt;p&gt;At the end of the course, you should be able to independently create and read basic Haskell code and understand Monads and other famous concepts of Functional Programming.&lt;/p&gt; &#xA;&lt;h3&gt;Course Plan&lt;/h3&gt; &#xA;&lt;p&gt;Here is a more concrete plan of the mystical 4 Chapters we prepared for you. These are the highlights of each part.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Chapter One&lt;/strong&gt; – What is Haskell, what are its particularities, basic Haskell syntax, functions, types, expressions.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Chapter Two&lt;/strong&gt; – FP concepts in the language, immutability, pattern matching, recursion, polymorphism, laziness, Higher-ordered functions, partial applications, eta-reduction.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Chapter Three&lt;/strong&gt; – Focus on Types. Type aliases, ADTs, Product types and Records, Sum types and Enumerations, Newtypes, Typeclasses.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Chapter Four&lt;/strong&gt; – Kinds. Three monsters of functional programming: Functor, Applicative, Monad.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Goals&lt;/h2&gt; &#xA;&lt;p&gt;We created the Learn4Haskell project in pursuit of the following goals:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Help others to learn Haskell&lt;/li&gt; &#xA; &lt;li&gt;Give a beginner-friendly and self-consistent course with theory and practice in the same place&lt;/li&gt; &#xA; &lt;li&gt;Explain Haskell topics before each task, but strive to be concise and useful at the same time. It&#39;s a tough balance!&lt;/li&gt; &#xA; &lt;li&gt;Help people who want to participate in Hacktoberfest and Open-Source, but also want to learn new things during this process&lt;/li&gt; &#xA; &lt;li&gt;Provide review and feedback on solutions, so people are never alone in this challenging yet exciting journey!&lt;/li&gt; &#xA; &lt;li&gt;Give people who completed this course all the necessary understandings to be able to work with basic projects that use standard features. We also intend that you have a strong basis on what they should do to be able to continue their functional programming studies.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Who can participate&lt;/h2&gt; &#xA;&lt;p&gt;Everyone!&lt;/p&gt; &#xA;&lt;p&gt;We welcome everyone and would be happy to assist you in this journey!&lt;/p&gt; &#xA;&lt;p&gt;The course is intended for people who don&#39;t know Haskell or know only language basics, though.&lt;/p&gt; &#xA;&lt;p&gt;If you are already an experienced Haskell developer and have come here for learning advanced topics, this course might not be that for you. But you still can help us! Your feedback and suggestions would be helpful for us as well as for the language newcomers who decide to work with this course.&lt;/p&gt; &#xA;&lt;h2&gt;What you will get from this course&lt;/h2&gt; &#xA;&lt;p&gt;This course has many benefits upon completion. Check them out to be sure that it fits your expectations!&lt;/p&gt; &#xA;&lt;p&gt;Participation in this course would give you:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;4 Pull Requests required for Hacktoberfest completion&lt;/li&gt; &#xA; &lt;li&gt;Basic knowledge of the most functional programming language&lt;/li&gt; &#xA; &lt;li&gt;Understanding of the functional programming concepts that you would be able to use in your day-to-day life afterwards&lt;/li&gt; &#xA; &lt;li&gt;On-the-fly feedback and help from experienced Haskell developers and educators&lt;/li&gt; &#xA; &lt;li&gt;Interesting challenges&lt;/li&gt; &#xA; &lt;li&gt;Fun!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Honestly, this seems like a pretty rad deal!&lt;/p&gt; &#xA;&lt;h2&gt;How to get started&lt;/h2&gt; &#xA;&lt;p&gt;Starting to learn Haskell with Learn4Haskell is a piece of cake!&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.github.com/en/free-pro-team@latest/github/getting-started-with-github/fork-a-repo&#34;&gt;Fork this repository&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;⚠&lt;/span&gt; Add the &lt;code&gt;hacktoberfest&lt;/code&gt; topic to your fork. Otherwise, &lt;a href=&#34;https://hacktoberfest.digitalocean.com/hacktoberfest-update&#34;&gt;your PRs won&#39;t count&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Enable GitHub Actions for your forked repository. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Visit: &lt;a href=&#34;https://github.com/&#34;&gt;https://github.com/&lt;/a&gt;&amp;lt;YOUR_GITHUB_USERNAME&amp;gt;/learn4haskell/actions&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kowainik/learn4haskell/main/#installing-haskell&#34;&gt;Install the Haskell compiler&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Open the &lt;code&gt;src/Chapter1.hs&lt;/code&gt; file, and start learning and solving tasks!&lt;/li&gt; &#xA; &lt;li&gt;After you finish the first chapter (or any other chapter, or even if you are stuck in the middle), open &lt;a href=&#34;https://docs.github.com/en/free-pro-team@latest/github/collaborating-with-issues-and-pull-requests/creating-a-pull-request&#34;&gt;Pull Request&lt;/a&gt; &lt;strong&gt;to your fork&lt;/strong&gt; with the solution and mention @vrom911 and @chshersh and we would be on our way for the review.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note, that you should open a PR for your fork of this repo, not this repo. Everyone has their solutions to the included tasks, and they don&#39;t mix together well in one repo 🙂&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;However, if you find some bugs or problems in this repo, you can open a PR to Learn4Haskell directly. We appreciate any help and feedback!&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Learn4Haskell has 4 chapters that you can walk through and submit 4 pull requests to complete the Hacktoberfest event (or just for knowledge and your enjoyment).&lt;/p&gt; &#xA;&lt;p&gt;So, you can start right now with forking. Following this we&#39;ll describe how you can install all the necessary items to be able to run this course locally.&lt;/p&gt; &#xA;&lt;h3&gt;Installing Haskell&lt;/h3&gt; &#xA;&lt;p&gt;If you&#39;re on Windows, install the &lt;code&gt;haskell-dev&lt;/code&gt; and &lt;code&gt;make&lt;/code&gt; packages &lt;a href=&#34;https://chocolatey.org/install&#34;&gt;using Chocolatey&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;choco install haskell-dev make&#xA;refreshenv&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you&#39;re on Linux or macOS, then the process is easy:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Install &lt;a href=&#34;https://www.haskell.org/ghcup/&#34;&gt;ghcup&lt;/a&gt; and follow &lt;code&gt;ghcup&lt;/code&gt; instructions for successful installation (remember to restart your terminal afterwards to avoid an &lt;code&gt;unknown ghcup command&lt;/code&gt; error on the next step).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Install the latest version of the Haskell compiler — GHC — and the &lt;a href=&#34;https://www.haskell.org/cabal/&#34;&gt;Cabal&lt;/a&gt; build tool. After you install &lt;code&gt;ghcup&lt;/code&gt;, it is easy to install the rest with a few commands from your terminal&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;ghcup install ghc 8.10.4&#xA;ghcup set ghc 8.10.4&#xA;ghcup install cabal 3.2.0.0&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run &lt;code&gt;cabal update&lt;/code&gt; to fetch the latest info about Haskell packages.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Haskell IDE&lt;/h3&gt; &#xA;&lt;p&gt;If you don&#39;t have any IDE preferences, we recommend installing &lt;a href=&#34;https://code.visualstudio.com/download&#34;&gt;Visual Studio Code&lt;/a&gt; with the &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=haskell.haskell&#34;&gt;Haskell plugin&lt;/a&gt;. The mentioned plugin would give you everything required to immediately start coding with Haskell.&lt;/p&gt; &#xA;&lt;h3&gt;Gitpod&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gitpod.io/#https://github.com/kowainik/learn4haskell&#34;&gt;&lt;img src=&#34;https://gitpod.io/button/open-in-gitpod.svg?sanitize=true&#34; alt=&#34;Open in Gitpod&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.gitpod.io/&#34;&gt;Gitpod&lt;/a&gt; is a VSCode-based Web IDE. With it, you can get a Haskell environment out-of-the-box. It&#39;s free to use up to 50 hours per month.&lt;/p&gt; &#xA;&lt;p&gt;Just prepend &lt;code&gt;gitpod.io#&lt;/code&gt; to your repo URL and you are ready to go. It will take some time to initialize the workspace for the first time it opens. It only keeps changes under &lt;code&gt;/workspace&lt;/code&gt;, and it will be deleted after a period of inactivity unless it&#39;s pinned.&lt;/p&gt; &#xA;&lt;h3&gt;How to develop&lt;/h3&gt; &#xA;&lt;p&gt;The course assumes that you install Haskell tooling (GHC and Cabal), edit code in the corresponding chapters, run GHCi (Haskell interpreter, explained in the course) from the root of this project and load your chapters to check your code. Don&#39;t worry, each chapter explains all the needed information!&lt;/p&gt; &#xA;&lt;p&gt;We also provide a Makefile with commands to test your solutions locally with the included prepared test-suite. We have also configured the CI using GitHub Actions on Learn4Haskell to check your answers at GitHub automatically!&lt;/p&gt; &#xA;&lt;p&gt;To run all tests for Chapter One:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;make test-chapter1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To run tests only for basic tasks for Chapter One (without the advanced tasks):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;make test-chapter1-basic&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Similar commands are provided for all chapters from One to Four.&lt;/p&gt; &#xA;&lt;h2&gt;Who we are&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://vrom911.github.io/&#34;&gt;Veronika (@vrom911)&lt;/a&gt; and &lt;a href=&#34;https://kodimensional.dev/&#34;&gt;Dmitrii (@chshersh)&lt;/a&gt; are experienced Haskell developers. Together we drive this open source organisation — &lt;a href=&#34;https://kowainik.github.io/&#34;&gt;Kowainik&lt;/a&gt;. We have a lot of open source projects and libraries in Haskell that are used in the Haskell community. We are also working on a lot of tutorials and guides in Haskell and mentoring people who are keen to learn Haskell as well. Moreover, Dmitrii has a few years of experience teaching Haskell courses in the university to CS students.&lt;/p&gt; &#xA;&lt;p&gt;We are passionate about Functional Programming and Haskell in particular. But at the same time, we understand how difficult it can be to get into all these ideas on your own. That is why we&#39;ve decided to start this course to help newcomers. With the interactive learning process and live discussions we&#39;ve included, Haskell will not be that scary. We will do our best so that it especially won&#39;t be the case for you or any others participating here!&lt;/p&gt; &#xA;&lt;h2&gt;How can you help&lt;/h2&gt; &#xA;&lt;p&gt;You can help us by supporting us on Ko-Fi or via GitHub sponsorship program:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ko-fi.com/kowainik&#34;&gt;Kowainik Ko-Fi&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sponsors/vrom911&#34;&gt;Veronika Romashkina via GitHub&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sponsors/chshersh&#34;&gt;Dmitrii Kovanikov via GitHub&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;We also appreciate any feedback on our course a lot! You can submit your feedback using the following form:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.google.com/forms/d/e/1FAIpQLScBVhLxq5CgGnAfIGUE-fCoOUqeGkDY2HXzbT7KV2jjLOsmjQ/viewform&#34;&gt;Feedback Form&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>benwbooth/cleo</title>
    <updated>2022-05-29T02:12:00Z</updated>
    <id>tag:github.com,2022-05-29:/benwbooth/cleo</id>
    <link href="https://github.com/benwbooth/cleo" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Beginnings of a parser for a new functional language&lt;/p&gt;&lt;hr&gt;&lt;p&gt;Beginnings of a parser for a new functional language&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>qnikst/iochan-conduit</title>
    <updated>2022-05-29T02:12:00Z</updated>
    <id>tag:github.com,2022-05-29:/qnikst/iochan-conduit</id>
    <link href="https://github.com/qnikst/iochan-conduit" rel="alternate"></link>
    <summary type="html">&lt;p&gt;IO concurrent promitives for conduit&lt;/p&gt;&lt;hr&gt;&lt;p&gt;Library for making conduit message passing via Control.Concurrent primitives, it can be faster than using STM in some cases, but do not allow all functionality that STM chans has.&lt;/p&gt; &#xA;&lt;p&gt;3 basic primitives will be provided:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;simple Chan as InfiniteChan&lt;/li&gt; &#xA; &lt;li&gt;wrapper over Chan as EndedChan&lt;/li&gt; &#xA; &lt;li&gt;bounded Chan as BChan&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>hadolint/hadolint</title>
    <updated>2022-05-29T02:12:00Z</updated>
    <id>tag:github.com,2022-05-29:/hadolint/hadolint</id>
    <link href="https://github.com/hadolint/hadolint" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Dockerfile linter, validate inline bash, written in Haskell&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Haskell Dockerfile Linter&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/hadolint/hadolint/actions&#34;&gt;&lt;img src=&#34;https://github.com/hadolint/hadolint/workflows/Haskell%20Tests/badge.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://tldrlegal.com/l/gpl-3.0&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-GPL--3-blue.svg?sanitize=true&#34; alt=&#34;GPL-3 licensed&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/hadolint/hadolint/releases/latest&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/hadolint/hadolint.svg?sanitize=true&#34; alt=&#34;GitHub release&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/downloads/hadolint/hadolint/total.svg?sanitize=true&#34; alt=&#34;Github downloads&#34;&gt; &lt;img align=&#34;right&#34; alt=&#34;pipecat&#34; width=&#34;150&#34; src=&#34;https://hadolint.github.io/hadolint/img/cat_container.png&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;A smarter Dockerfile linter that helps you build &lt;a href=&#34;https://docs.docker.com/engine/userguide/eng-image/dockerfile_best-practices&#34;&gt;best practice&lt;/a&gt; Docker images. The linter parses the Dockerfile into an AST and performs rules on top of the AST. It stands on the shoulders of &lt;a href=&#34;https://github.com/koalaman/shellcheck&#34;&gt;ShellCheck&lt;/a&gt; to lint the Bash code inside &lt;code&gt;RUN&lt;/code&gt; instructions.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://hadolint.github.io/hadolint&#34;&gt;&lt;span&gt;🌐&lt;/span&gt; &lt;strong&gt;Check the online version on hadolint.github.io/hadolint&lt;/strong&gt;&lt;/a&gt; &lt;a href=&#34;https://hadolint.github.io/hadolint&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hadolint/hadolint/master/screenshot.png&#34; alt=&#34;Screenshot&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;How to use&lt;/h2&gt; &#xA;&lt;p&gt;You can run &lt;code&gt;hadolint&lt;/code&gt; locally to lint your Dockerfile.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;hadolint &amp;lt;Dockerfile&amp;gt;&#xA;hadolint --ignore DL3003 --ignore DL3006 &amp;lt;Dockerfile&amp;gt; # exclude specific rules&#xA;hadolint --trusted-registry my-company.com:500 &amp;lt;Dockerfile&amp;gt; # Warn when using untrusted FROM images&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Docker comes to the rescue, providing an easy way how to run &lt;code&gt;hadolint&lt;/code&gt; on most platforms. Just pipe your &lt;code&gt;Dockerfile&lt;/code&gt; to &lt;code&gt;docker run&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run --rm -i hadolint/hadolint &amp;lt; Dockerfile&#xA;# OR&#xA;docker run --rm -i ghcr.io/hadolint/hadolint &amp;lt; Dockerfile&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or using &lt;a href=&#34;https://podman.io/&#34;&gt;Podman&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;podman run --rm -i docker.io/hadolint/hadolint &amp;lt; Dockerfile&#xA;# OR&#xA;podman run --rm -i ghcr.io/hadolint/hadolint &amp;lt; Dockerfile&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or using Windows PowerShell:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;cat .\Dockerfile | docker run --rm -i hadolint/hadolint&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;p&gt;You can download prebuilt binaries for OSX, Windows and Linux from the latest &lt;a href=&#34;https://github.com/hadolint/hadolint/releases/latest&#34;&gt;release page&lt;/a&gt;. However, if this does not work for you, please fall back to container (Docker), &lt;code&gt;brew&lt;/code&gt; or source installation.&lt;/p&gt; &#xA;&lt;p&gt;On OSX, you can use &lt;a href=&#34;https://brew.sh/&#34;&gt;brew&lt;/a&gt; to install &lt;code&gt;hadolint&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew install hadolint&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On Windows, you can use &lt;a href=&#34;https://github.com/lukesampson/scoop&#34;&gt;scoop&lt;/a&gt; to install &lt;code&gt;hadolint&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-batch&#34;&gt;scoop install hadolint&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On distributions that have &lt;code&gt;nix&lt;/code&gt; installed, you can use the &lt;code&gt;hadolint&lt;/code&gt; package to run ad-hoc shells or permanently install &lt;code&gt;hadolint&lt;/code&gt; into your environment.&lt;/p&gt; &#xA;&lt;p&gt;As mentioned earlier, &lt;code&gt;hadolint&lt;/code&gt; is available as a container image:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker pull hadolint/hadolint&#xA;# OR&#xA;docker pull ghcr.io/hadolint/hadolint&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you need a container with shell access, use the Debian or Alpine variants:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker pull hadolint/hadolint:latest-debian&#xA;# OR&#xA;docker pull hadolint/hadolint:latest-alpine&#xA;# OR&#xA;docker pull ghcr.io/hadolint/hadolint:latest-debian&#xA;# OR&#xA;docker pull ghcr.io/hadolint/hadolint:latest-alpine&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also build &lt;code&gt;hadolint&lt;/code&gt; locally. You need &lt;a href=&#34;https://www.haskell.org/platform/&#34;&gt;Haskell&lt;/a&gt; and the &lt;a href=&#34;http://docs.haskellstack.org/en/stable/install_and_upgrade.html&#34;&gt;stack&lt;/a&gt; build tool to build the binary.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/hadolint/hadolint \&#xA;&amp;amp;&amp;amp; cd hadolint \&#xA;&amp;amp;&amp;amp; stack install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want the &lt;a href=&#34;https://github.com/michaellzc/vscode-hadolint&#34;&gt;VS Code Hadolint&lt;/a&gt; extension to use Hadolint in a container, you can use the following &lt;a href=&#34;https://github.com/hadolint/hadolint/issues/691#issuecomment-932116329&#34;&gt;wrapper script&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/bash&#xA;dockerfile=&#34;$1&#34;&#xA;shift&#xA;docker run --rm -i hadolint/hadolint hadolint &#34;$@&#34; - &amp;lt; &#34;$dockerfile&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;CLI&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;hadolint --help&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;hadolint - Dockerfile Linter written in Haskell&#xA;&#xA;Usage: hadolint [-v|--version] [-c|--config FILENAME] [DOCKERFILE...]&#xA;                [--file-path-in-report FILEPATHINREPORT] [--no-fail]&#xA;                [--no-color] [-V|--verbose] [-f|--format ARG] [--error RULECODE]&#xA;                [--warning RULECODE] [--info RULECODE] [--style RULECODE]&#xA;                [--ignore RULECODE]&#xA;                [--trusted-registry REGISTRY (e.g. docker.io)]&#xA;                [--require-label LABELSCHEMA (e.g. maintainer:text)]&#xA;                [--strict-labels] [--disable-ignore-pragma]&#xA;                [-t|--failure-threshold THRESHOLD]&#xA;  Lint Dockerfile for errors and best practices&#xA;&#xA;Available options:&#xA;  -h,--help                Show this help text&#xA;  -v,--version             Show version&#xA;  -c,--config FILENAME     Path to the configuration file&#xA;  --file-path-in-report FILEPATHINREPORT&#xA;                           The file path referenced in the generated report.&#xA;                           This only applies for the &#39;checkstyle&#39; format and is&#xA;                           useful when running Hadolint with Docker to set the&#xA;                           correct file path.&#xA;  --no-fail                Don&#39;t exit with a failure status code when any rule&#xA;                           is violated&#xA;  --no-color               Don&#39;t colorize output&#xA;  -V,--verbose             Enables verbose logging of hadolint&#39;s output to&#xA;                           stderr&#xA;  -f,--format ARG          The output format for the results [tty | json |&#xA;                           checkstyle | codeclimate | gitlab_codeclimate | gnu |&#xA;                           codacy | sonarqube | sarif] (default: tty)&#xA;  --error RULECODE         Make the rule `RULECODE` have the level `error`&#xA;  --warning RULECODE       Make the rule `RULECODE` have the level `warning`&#xA;  --info RULECODE          Make the rule `RULECODE` have the level `info`&#xA;  --style RULECODE         Make the rule `RULECODE` have the level `style`&#xA;  --ignore RULECODE        A rule to ignore. If present, the ignore list in the&#xA;                           config file is ignored&#xA;  --trusted-registry REGISTRY (e.g. docker.io)&#xA;                           A docker registry to allow to appear in FROM&#xA;                           instructions&#xA;  --require-label LABELSCHEMA (e.g. maintainer:text)&#xA;                           The option --require-label=label:format makes&#xA;                           Hadolint check that the label `label` conforms to&#xA;                           format requirement `format`&#xA;  --strict-labels          Do not permit labels other than specified in&#xA;                           `label-schema`&#xA;  --disable-ignore-pragma  Disable inline ignore pragmas `# hadolint&#xA;                           ignore=DLxxxx`&#xA;  -t,--failure-threshold THRESHOLD&#xA;                           Exit with failure code only when rules with a&#xA;                           severity equal to or above THRESHOLD are violated.&#xA;                           Accepted values: [error | warning | info | style |&#xA;                           ignore | none] (default: info)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Configure&lt;/h2&gt; &#xA;&lt;p&gt;Configuration files can be used globally or per project. Hadolint looks for configuration files in the following locations or their platform specific equivalents in this order and uses the first one exclusively:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;$PWD/.hadolint.yaml&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$XDG_CONFIG_HOME/hadolint.yaml&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$HOME/.config/hadolint.yaml&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$HOME/.hadolint/hadolint.yaml or $HOME/hadolint/config.yaml&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$HOME/.hadolint.yaml&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In windows, the &lt;code&gt;%LOCALAPPDATA%&lt;/code&gt; environment variable is used instead of &lt;code&gt;XDG_CONFIG_HOME&lt;/code&gt;. Config files can have either &lt;code&gt;yaml&lt;/code&gt; or &lt;code&gt;yml&lt;/code&gt; extensions.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;hadolint&lt;/code&gt; full &lt;code&gt;yaml&lt;/code&gt; config file schema&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;failure-threshold: string               # name of threshold level (error | warning | info | style | ignore | none)&#xA;format: string                          # Output format (tty | json | checkstyle | codeclimate | gitlab_codeclimate | gnu | codacy)&#xA;ignored: [string]                       # list of rules&#xA;label-schema:                           # See Linting Labels below for specific label-schema details&#xA;  author: string                        # Your name&#xA;  contact: string                       # email address&#xA;  created: timestamp                    # rfc3339 datetime&#xA;  version: string                       # semver&#xA;  documentation: string                 # url&#xA;  git-revision: string                  # hash&#xA;  license: string                       # spdx&#xA;no-color: boolean                       # true | false&#xA;no-fail: boolean                        # true | false&#xA;override:&#xA;  error: [string]                       # list of rules&#xA;  warning: [string]                     # list of rules&#xA;  info: [string]                        # list of rules&#xA;  style: [string]                       # list of rules&#xA;strict-labels: boolean                  # true | false&#xA;disable-ignore-pragma: boolean          # true | false&#xA;trustedRegistries: string | [string]    # registry or list of registries&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;hadolint&lt;/code&gt; supports specifying the ignored rules using a configuration file. The configuration file should be in &lt;code&gt;yaml&lt;/code&gt; format. This is one valid configuration file as an example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;ignored:&#xA;  - DL3000&#xA;  - SC1010&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Additionally, &lt;code&gt;hadolint&lt;/code&gt; can warn you when images from untrusted repositories are being used in Dockerfiles, you can append the &lt;code&gt;trustedRegistries&lt;/code&gt; keys to the configuration file, as shown below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;ignored:&#xA;  - DL3000&#xA;  - SC1010&#xA;&#xA;trustedRegistries:&#xA;  - docker.io&#xA;  - my-company.com:5000&#xA;  - &#34;*.gcr.io&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to override the severity of specific rules, you can do that too:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;override:&#xA;  error:&#xA;    - DL3001&#xA;    - DL3002&#xA;  warning:&#xA;    - DL3042&#xA;    - DL3033&#xA;  info:&#xA;    - DL3032&#xA;  style:&#xA;    - DL3015&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;failure-threshold&lt;/code&gt; Exit with failure code only when rules with a severity above THRESHOLD are violated (Available in v2.6.0+)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;failure-threshold: info&#xA;warning:&#xA;    - DL3042&#xA;    - DL3033&#xA;  info:&#xA;    - DL3032&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Additionally, you can pass a custom configuration file in the command line with the &lt;code&gt;--config&lt;/code&gt; option&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;hadolint --config /path/to/config.yaml Dockerfile&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To pass a custom configuration file (using relative or absolute path) to a container, use the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run --rm -i -v /your/path/to/hadolint.yaml:/.config/hadolint.yaml hadolint/hadolint &amp;lt; Dockerfile&#xA;# OR&#xA;docker run --rm -i -v /your/path/to/hadolint.yaml:/.config/hadolint.yaml ghcr.io/hadolint/hadolint &amp;lt; Dockerfile&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In addition to config files, Hadolint can be configured with environment variables.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;NO_COLOR=1                               # Set or unset. See https://no-color.org&#xA;HADOLINT_NOFAIL=1                        # Truthy value e.g. 1, true or yes&#xA;HADOLINT_VERBOSE=1                       # Truthy value e.g. 1, true or yes&#xA;HADOLINT_FORMAT=json                     # Output format (tty | json | checkstyle | codeclimate | gitlab_codeclimate | gnu | codacy | sarif )&#xA;HADOLINT_FAILURE_THRESHOLD=info          # threshold level (error | warning | info | style | ignore | none)&#xA;HADOLINT_OVERRIDE_ERROR=DL3010,DL3020    # comma separated list of rule codes&#xA;HADOLINT_OVERRIDE_WARNING=DL3010,DL3020  # comma separated list of rule codes&#xA;HADOLINT_OVERRIDE_INFO=DL3010,DL3020     # comma separated list of rule codes&#xA;HADOLINT_OVERRIDE_STYLE=DL3010,DL3020    # comma separated list of rule codes&#xA;HADOLINT_IGNORE=DL3010,DL3020            # comma separated list of rule codes&#xA;HADOLINT_STRICT_LABELS=1                 # Truthy value e.g. 1, true or yes&#xA;HADOLINT_DISABLE_IGNORE_PRAGMA=1         # Truthy value e.g. 1, true or yes&#xA;HADOLINT_TRUSTED_REGISTRIES=docker.io    # comma separated list of registry urls&#xA;HADOLINT_REQUIRE_LABELS=maintainer:text  # comma separated list of label schema items&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Non-Posix Shells&lt;/h2&gt; &#xA;&lt;p&gt;When using base images with non-posix shells as default (e.g. Windows based images) a special pragma &lt;code&gt;hadolint shell&lt;/code&gt; can specify which shell the base image uses, so that Hadolint can automatically ignore all shell-specific rules.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Dockerfile&#34;&gt;FROM mcr.microsoft.com/windows/servercore:ltsc2022&#xA;# hadolint shell=powershell&#xA;RUN Get-Process notepad | Stop-Process&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Inline ignores&lt;/h2&gt; &#xA;&lt;p&gt;It is also possible to ignore rules by adding a special comment directly above the Dockerfile statement for which you want to make an exception for. Such comments look like &lt;code&gt;# hadolint ignore=DL3001,SC1081&lt;/code&gt;. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dockerfile&#34;&gt;# hadolint ignore=DL3006&#xA;FROM ubuntu&#xA;&#xA;# hadolint ignore=DL3003,SC1035&#xA;RUN cd /tmp &amp;amp;&amp;amp; echo &#34;hello!&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The comment &#34;inline ignores&#34; applies only to the statement following it.&lt;/p&gt; &#xA;&lt;h2&gt;Linting Labels&lt;/h2&gt; &#xA;&lt;p&gt;Hadolint is able to check if specific labels are present and conform to a predefined label schema. First, a label schema must be defined either via the command line:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;hadolint --require-label author:text --require-label version:semver Dockerfile&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or via the config file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;label-schema:&#xA;  author: text&#xA;  contact: email&#xA;  created: rfc3339&#xA;  version: semver&#xA;  documentation: url&#xA;  git-revision: hash&#xA;  license: spdx&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The value of a label can be either of &lt;code&gt;text&lt;/code&gt;, &lt;code&gt;url&lt;/code&gt;, &lt;code&gt;semver&lt;/code&gt;, &lt;code&gt;hash&lt;/code&gt; or &lt;code&gt;rfc3339&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Schema&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;text&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Anything&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;rfc3339&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;A time, formatted according to &lt;a href=&#34;https://www.ietf.org/rfc/rfc3339.txt&#34;&gt;RFC 3339&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;semver&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;A &lt;a href=&#34;https://semver.org/&#34;&gt;semantic version&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;url&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;A URI as described in &lt;a href=&#34;https://www.ietf.org/rfc/rfc3986.txt&#34;&gt;RFC 3986&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;hash&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Either a short or a long &lt;a href=&#34;https://git-scm.com/book/en/v2/Git-Tools-Revision-Selection&#34;&gt;Git hash&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;spdx&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;An &lt;a href=&#34;https://spdx.org/licenses/&#34;&gt;SPDX license identifier&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;email&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;An email address conforming to &lt;a href=&#34;https://www.ietf.org/rfc/rfc5322.txt&#34;&gt;RFC 5322&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;By default, Hadolint ignores any label that is not specified in the label schema. To warn against such additional labels, turn on strict labels, using the command line:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;hadolint --strict-labels --require-label version:semver Dockerfile&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or the config file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;strict-labels: true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When strict labels is enabled, but no label schema is specified, &lt;code&gt;hadolint&lt;/code&gt; will warn if any label is present.&lt;/p&gt; &#xA;&lt;h3&gt;Note on dealing with variables in labels&lt;/h3&gt; &#xA;&lt;p&gt;It is a common pattern to fill the value of a label not statically, but rather dynamically at build time by using a variable:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dockerfile&#34;&gt;FROM debian:buster&#xA;ARG VERSION=&#34;du-jour&#34;&#xA;LABEL version=&#34;${VERSION}&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To allow this, the label schema must specify &lt;code&gt;text&lt;/code&gt; as value for that label:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;label-schema:&#xA;  version: text&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Integrations&lt;/h2&gt; &#xA;&lt;p&gt;To get most of &lt;code&gt;hadolint&lt;/code&gt;, it is useful to integrate it as a check in your CI or into your editor, or as a pre-commit hook, to lint your &lt;code&gt;Dockerfile&lt;/code&gt; as you write it. See our &lt;a href=&#34;https://raw.githubusercontent.com/hadolint/hadolint/master/docs/INTEGRATION.md&#34;&gt;Integration&lt;/a&gt; docs.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hadolint/hadolint/master/docs/INTEGRATION.md#code-review&#34;&gt;Code Review Platform Integrations&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hadolint/hadolint/master/docs/INTEGRATION.md#continuous-integration&#34;&gt;Continuous Integrations&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hadolint/hadolint/master/docs/INTEGRATION.md#editors&#34;&gt;Editor Integrations&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hadolint/hadolint/master/docs/INTEGRATION.md#version-control&#34;&gt;Version Control Integrations&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Rules&lt;/h2&gt; &#xA;&lt;p&gt;An incomplete list of implemented rules. Click on the error code to get more detailed information.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Rules with the prefix &lt;code&gt;DL&lt;/code&gt; are from &lt;code&gt;hadolint&lt;/code&gt;. Have a look at &lt;code&gt;Rules.hs&lt;/code&gt; to find the implementation of the rules.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Rules with the &lt;code&gt;SC&lt;/code&gt; prefix are from &lt;strong&gt;ShellCheck&lt;/strong&gt; (only the most common rules are listed, there are dozens more).&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Please &lt;a href=&#34;https://github.com/hadolint/hadolint/issues/new&#34;&gt;create an issue&lt;/a&gt; if you have an idea for a good rule.&lt;/p&gt; &#xA;&lt;!--lint disable maximum-line-length--&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Rule&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Default Severity&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL1001&#34;&gt;DL1001&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Ignore&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Please refrain from using inline ignore pragmas &lt;code&gt;# hadolint ignore=DLxxxx&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3000&#34;&gt;DL3000&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Error&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Use absolute WORKDIR.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3001&#34;&gt;DL3001&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Info&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;For some bash commands it makes no sense running them in a Docker container like ssh, vim, shutdown, service, ps, free, top, kill, mount, ifconfig.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3002&#34;&gt;DL3002&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Warning&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Last user should not be root.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3003&#34;&gt;DL3003&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Warning&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Use WORKDIR to switch to a directory.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3004&#34;&gt;DL3004&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Error&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Do not use sudo as it leads to unpredictable behavior. Use a tool like gosu to enforce root.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3005&#34;&gt;DL3005&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Error&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Do not use apt-get dist-upgrade.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3006&#34;&gt;DL3006&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Warning&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Always tag the version of an image explicitly.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3007&#34;&gt;DL3007&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Warning&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Using latest is prone to errors if the image will ever update. Pin the version explicitly to a release tag.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3008&#34;&gt;DL3008&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Warning&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Pin versions in apt-get install.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3009&#34;&gt;DL3009&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Info&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Delete the apt-get lists after installing something.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3010&#34;&gt;DL3010&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Info&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Use ADD for extracting archives into an image.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3011&#34;&gt;DL3011&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Error&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Valid UNIX ports range from 0 to 65535.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3012&#34;&gt;DL3012&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Error&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Multiple &lt;code&gt;HEALTHCHECK&lt;/code&gt; instructions.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3013&#34;&gt;DL3013&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Warning&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Pin versions in pip.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3014&#34;&gt;DL3014&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Warning&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Use the &lt;code&gt;-y&lt;/code&gt; switch.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3015&#34;&gt;DL3015&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Info&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Avoid additional packages by specifying --no-install-recommends.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3016&#34;&gt;DL3016&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Warning&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Pin versions in &lt;code&gt;npm&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3018&#34;&gt;DL3018&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Warning&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Pin versions in apk add. Instead of &lt;code&gt;apk add &amp;lt;package&amp;gt;&lt;/code&gt; use &lt;code&gt;apk add &amp;lt;package&amp;gt;=&amp;lt;version&amp;gt;&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3019&#34;&gt;DL3019&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Info&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Use the &lt;code&gt;--no-cache&lt;/code&gt; switch to avoid the need to use &lt;code&gt;--update&lt;/code&gt; and remove &lt;code&gt;/var/cache/apk/*&lt;/code&gt; when done installing packages.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3020&#34;&gt;DL3020&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Error&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Use &lt;code&gt;COPY&lt;/code&gt; instead of &lt;code&gt;ADD&lt;/code&gt; for files and folders.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3021&#34;&gt;DL3021&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Error&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;COPY&lt;/code&gt; with more than 2 arguments requires the last argument to end with &lt;code&gt;/&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3022&#34;&gt;DL3022&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Warning&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;COPY --from&lt;/code&gt; should reference a previously defined &lt;code&gt;FROM&lt;/code&gt; alias&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3023&#34;&gt;DL3023&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Error&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;COPY --from&lt;/code&gt; cannot reference its own &lt;code&gt;FROM&lt;/code&gt; alias&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3024&#34;&gt;DL3024&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Error&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;FROM&lt;/code&gt; aliases (stage names) must be unique&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3025&#34;&gt;DL3025&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Warning&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Use arguments JSON notation for CMD and ENTRYPOINT arguments&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3026&#34;&gt;DL3026&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Error&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Use only an allowed registry in the FROM image&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3027&#34;&gt;DL3027&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Warning&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Do not use &lt;code&gt;apt&lt;/code&gt; as it is meant to be a end-user tool, use &lt;code&gt;apt-get&lt;/code&gt; or &lt;code&gt;apt-cache&lt;/code&gt; instead&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3028&#34;&gt;DL3028&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Warning&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Pin versions in gem install. Instead of &lt;code&gt;gem install &amp;lt;gem&amp;gt;&lt;/code&gt; use &lt;code&gt;gem install &amp;lt;gem&amp;gt;:&amp;lt;version&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3029&#34;&gt;DL3029&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Warning&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Do not use --platform flag with FROM.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3030&#34;&gt;DL3030&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Warning&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Use the &lt;code&gt;-y&lt;/code&gt; switch to avoid manual input &lt;code&gt;yum install -y &amp;lt;package&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3032&#34;&gt;DL3032&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Warning&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;yum clean all&lt;/code&gt; missing after yum command.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3033&#34;&gt;DL3033&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Warning&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Specify version with &lt;code&gt;yum install -y &amp;lt;package&amp;gt;-&amp;lt;version&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3034&#34;&gt;DL3034&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Warning&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Non-interactive switch missing from &lt;code&gt;zypper&lt;/code&gt; command: &lt;code&gt;zypper install -y&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3035&#34;&gt;DL3035&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Warning&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Do not use &lt;code&gt;zypper dist-upgrade&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3036&#34;&gt;DL3036&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Warning&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;zypper clean&lt;/code&gt; missing after zypper use.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3037&#34;&gt;DL3037&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Warning&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Specify version with &lt;code&gt;zypper install -y &amp;lt;package&amp;gt;[=]&amp;lt;version&amp;gt;&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3038&#34;&gt;DL3038&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Warning&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Use the &lt;code&gt;-y&lt;/code&gt; switch to avoid manual input &lt;code&gt;dnf install -y &amp;lt;package&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3040&#34;&gt;DL3040&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Warning&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;dnf clean all&lt;/code&gt; missing after dnf command.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3041&#34;&gt;DL3041&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Warning&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Specify version with &lt;code&gt;dnf install -y &amp;lt;package&amp;gt;-&amp;lt;version&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3042&#34;&gt;DL3042&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Warning&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Avoid cache directory with &lt;code&gt;pip install --no-cache-dir &amp;lt;package&amp;gt;&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3043&#34;&gt;DL3043&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Error&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;ONBUILD&lt;/code&gt;, &lt;code&gt;FROM&lt;/code&gt; or &lt;code&gt;MAINTAINER&lt;/code&gt; triggered from within &lt;code&gt;ONBUILD&lt;/code&gt; instruction.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3044&#34;&gt;DL3044&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Error&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Do not refer to an environment variable within the same &lt;code&gt;ENV&lt;/code&gt; statement where it is defined.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3045&#34;&gt;DL3045&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Warning&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;COPY&lt;/code&gt; to a relative destination without &lt;code&gt;WORKDIR&lt;/code&gt; set.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3046&#34;&gt;DL3046&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Warning&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;useradd&lt;/code&gt; without flag &lt;code&gt;-l&lt;/code&gt; and high UID will result in excessively large Image.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3047&#34;&gt;DL3047&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Info&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;wget&lt;/code&gt; without flag &lt;code&gt;--progress&lt;/code&gt; will result in excessively bloated build logs when downloading larger files.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3048&#34;&gt;DL3048&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Style&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Invalid Label Key&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3049&#34;&gt;DL3049&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Info&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Label &lt;code&gt;&amp;lt;label&amp;gt;&lt;/code&gt; is missing.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3050&#34;&gt;DL3050&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Info&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Superfluous label(s) present.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3051&#34;&gt;DL3051&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Warning&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Label &lt;code&gt;&amp;lt;label&amp;gt;&lt;/code&gt; is empty.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3052&#34;&gt;DL3052&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Warning&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Label &lt;code&gt;&amp;lt;label&amp;gt;&lt;/code&gt; is not a valid URL.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3053&#34;&gt;DL3053&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Warning&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Label &lt;code&gt;&amp;lt;label&amp;gt;&lt;/code&gt; is not a valid time format - must be conform to RFC3339.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3054&#34;&gt;DL3054&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Warning&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Label &lt;code&gt;&amp;lt;label&amp;gt;&lt;/code&gt; is not a valid SPDX license identifier.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3055&#34;&gt;DL3055&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Warning&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Label &lt;code&gt;&amp;lt;label&amp;gt;&lt;/code&gt; is not a valid git hash.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3056&#34;&gt;DL3056&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Warning&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Label &lt;code&gt;&amp;lt;label&amp;gt;&lt;/code&gt; does not conform to semantic versioning.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3057&#34;&gt;DL3057&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Ignore&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;HEALTHCHECK&lt;/code&gt; instruction missing.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3058&#34;&gt;DL3058&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Warning&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Label &lt;code&gt;&amp;lt;label&amp;gt;&lt;/code&gt; is not a valid email format - must be conform to RFC5322.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3059&#34;&gt;DL3059&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Info&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Multiple consecutive &lt;code&gt;RUN&lt;/code&gt; instructions. Consider consolidation.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3060&#34;&gt;DL3060&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Info&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;yarn cache clean&lt;/code&gt; missing after &lt;code&gt;yarn install&lt;/code&gt; was run.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3061&#34;&gt;DL3061&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Error&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Invalid instruction order. Dockerfile must begin with &lt;code&gt;FROM&lt;/code&gt;, &lt;code&gt;ARG&lt;/code&gt; or comment.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL4000&#34;&gt;DL4000&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Error&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;MAINTAINER is deprecated.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL4001&#34;&gt;DL4001&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Warning&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Either use Wget or Curl but not both.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL4003&#34;&gt;DL4003&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Warning&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Multiple &lt;code&gt;CMD&lt;/code&gt; instructions found.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL4004&#34;&gt;DL4004&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Error&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Multiple &lt;code&gt;ENTRYPOINT&lt;/code&gt; instructions found.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL4005&#34;&gt;DL4005&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Warning&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Use &lt;code&gt;SHELL&lt;/code&gt; to change the default shell.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL4006&#34;&gt;DL4006&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Warning&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Set the &lt;code&gt;SHELL&lt;/code&gt; option -o pipefail before &lt;code&gt;RUN&lt;/code&gt; with a pipe in it&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/wiki/SC1000&#34;&gt;SC1000&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;$&lt;/code&gt; is not used specially and should therefore be escaped.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/wiki/SC1001&#34;&gt;SC1001&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;This &lt;code&gt;\c&lt;/code&gt; will be a regular &lt;code&gt;&#39;c&#39;&lt;/code&gt; in this context.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/wiki/SC1007&#34;&gt;SC1007&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Remove space after &lt;code&gt;=&lt;/code&gt; if trying to assign a value (or for empty string, use &lt;code&gt;var=&#39;&#39; ...&lt;/code&gt;).&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/wiki/SC1010&#34;&gt;SC1010&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Use semicolon or linefeed before &lt;code&gt;done&lt;/code&gt; (or quote to make it literal).&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/wiki/SC1018&#34;&gt;SC1018&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;This is a unicode non-breaking space. Delete it and retype as space.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/wiki/SC1035&#34;&gt;SC1035&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;You need a space here&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/wiki/SC1045&#34;&gt;SC1045&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;It&#39;s not &lt;code&gt;foo &amp;amp;; bar&lt;/code&gt;, just &lt;code&gt;foo &amp;amp; bar&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/wiki/SC1065&#34;&gt;SC1065&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Trying to declare parameters? Don&#39;t. Use &lt;code&gt;()&lt;/code&gt; and refer to params as &lt;code&gt;$1&lt;/code&gt;, &lt;code&gt;$2&lt;/code&gt; etc.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/wiki/SC1066&#34;&gt;SC1066&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Don&#39;t use $ on the left side of assignments.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/wiki/SC1068&#34;&gt;SC1068&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Don&#39;t put spaces around the &lt;code&gt;=&lt;/code&gt; in assignments.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/wiki/SC1077&#34;&gt;SC1077&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;For command expansion, the tick should slant left (` vs ´).&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/wiki/SC1078&#34;&gt;SC1078&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Did you forget to close this double-quoted string?&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/wiki/SC1079&#34;&gt;SC1079&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;This is actually an end quote, but due to next char, it looks suspect.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/wiki/SC1081&#34;&gt;SC1081&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Scripts are case sensitive. Use &lt;code&gt;if&lt;/code&gt;, not &lt;code&gt;If&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/wiki/SC1083&#34;&gt;SC1083&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;This &lt;code&gt;{/}&lt;/code&gt; is literal. Check expression (missing &lt;code&gt;;/\n&lt;/code&gt;?) or quote it.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/wiki/SC1086&#34;&gt;SC1086&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Don&#39;t use &lt;code&gt;$&lt;/code&gt; on the iterator name in for loops.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/wiki/SC1087&#34;&gt;SC1087&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Braces are required when expanding arrays, as in &lt;code&gt;${array[idx]}&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/wiki/SC1095&#34;&gt;SC1095&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;You need a space or linefeed between the function name and body.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/wiki/SC1097&#34;&gt;SC1097&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Unexpected &lt;code&gt;==&lt;/code&gt;. For assignment, use &lt;code&gt;=&lt;/code&gt;. For comparison, use &lt;code&gt;[ .. ]&lt;/code&gt; or &lt;code&gt;[[ .. ]]&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/wiki/SC1098&#34;&gt;SC1098&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Quote/escape special characters when using &lt;code&gt;eval&lt;/code&gt;, e.g. &lt;code&gt;eval &#34;a=(b)&#34;&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/wiki/SC1099&#34;&gt;SC1099&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;You need a space before the &lt;code&gt;#&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/wiki/SC2002&#34;&gt;SC2002&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Useless cat. Consider &lt;code&gt;cmd &amp;lt; file | ..&lt;/code&gt; or &lt;code&gt;cmd file | ..&lt;/code&gt; instead.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/wiki/SC2015&#34;&gt;SC2015&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Note that &lt;code&gt;A &amp;amp;&amp;amp; B || C&lt;/code&gt; is not if-then-else. C may run when A is true.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/wiki/SC2026&#34;&gt;SC2026&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;This word is outside of quotes. Did you intend to &#39;nest &#39;&#34;&#39;single quotes&#39;&#34;&#39; instead&#39;?&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/wiki/SC2028&#34;&gt;SC2028&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;echo&lt;/code&gt; won&#39;t expand escape sequences. Consider &lt;code&gt;printf&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/wiki/SC2035&#34;&gt;SC2035&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Use &lt;code&gt;./*glob*&lt;/code&gt; or &lt;code&gt;-- *glob*&lt;/code&gt; so names with dashes won&#39;t become options.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/wiki/SC2039&#34;&gt;SC2039&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;In POSIX sh, something is undefined.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/wiki/SC2046&#34;&gt;SC2046&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Quote this to prevent word splitting&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/wiki/SC2086&#34;&gt;SC2086&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Double quote to prevent globbing and word splitting.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/wiki/SC2140&#34;&gt;SC2140&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Word is in the form &lt;code&gt;&#34;A&#34;B&#34;C&#34;&lt;/code&gt; (B indicated). Did you mean &lt;code&gt;&#34;ABC&#34;&lt;/code&gt; or &lt;code&gt;&#34;A\&#34;B\&#34;C&#34;&lt;/code&gt;?&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/wiki/SC2154&#34;&gt;SC2154&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;var is referenced but not assigned.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/wiki/SC2155&#34;&gt;SC2155&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Declare and assign separately to avoid masking return values.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/wiki/SC2164&#34;&gt;SC2164&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Use &lt;code&gt;cd ... || exit&lt;/code&gt; in case &lt;code&gt;cd&lt;/code&gt; fails.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;!--lint enable maximum-line-length--&gt; &#xA;&lt;h2&gt;Develop&lt;/h2&gt; &#xA;&lt;p&gt;If you are an experienced Haskeller, we would be very grateful if you would tear our code apart in a review.&lt;/p&gt; &#xA;&lt;h3&gt;Setup&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Clone repository&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone --recursive git@github.com:hadolint/hadolint.git&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Install the dependencies&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;stack install&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;REPL&lt;/h3&gt; &#xA;&lt;p&gt;The easiest way to try out the parser is using the REPL.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# start the repl&#xA;stack repl&#xA;# overload strings to be able to use Text&#xA;:set -XOverloadedStrings&#xA;# import parser library&#xA;import Language.Docker&#xA;# parse instruction and look at AST representation&#xA;parseText &#34;FROM debian:jessie&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Tests&lt;/h3&gt; &#xA;&lt;p&gt;Run unit tests:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;stack test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run integration tests:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./integration_test.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;AST&lt;/h3&gt; &#xA;&lt;p&gt;Dockerfile syntax is fully described in the &lt;a href=&#34;http://docs.docker.com/engine/reference/builder/&#34;&gt;Dockerfile reference&lt;/a&gt;. Just take a look at &lt;a href=&#34;https://www.stackage.org/haddock/nightly-2018-01-07/language-docker-2.0.1/Language-Docker-Syntax.html&#34;&gt;Syntax.hs&lt;/a&gt; in the &lt;code&gt;language-docker&lt;/code&gt; project to see the AST definition.&lt;/p&gt; &#xA;&lt;h3&gt;Building against custom libraries&lt;/h3&gt; &#xA;&lt;p&gt;Hadolint uses many libraries to do the dirty work. In particular, language-docker is used to parse Dockerfiles and produce an AST which then can be analyzed. To build Hadolint against a custom version of such libraries, do the following. This example uses language-docker, but it would work with any other libaray as well.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;In the same directory (e.g. &lt;code&gt;/home/user/repos&lt;/code&gt;) clone Hadolint and language-docker git repositories&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd /home/user/repos&#xA;git clone https://github.com/hadolint/hadolint.git&#xA;git clone https://github.com/hadolint/language-docker.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;Make your modifications to language-docker&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;In the Hadolint repo, edit the &lt;code&gt;stack.yaml&lt;/code&gt; file, such that the &lt;code&gt;extra-deps&lt;/code&gt; property points to the other repo&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;[...]&#xA;extra-deps:&#xA;  - ../language-docker&#xA;[...]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;Recompile Hadolint and run the tests&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd /home/user/repos/hadolint&#xA;stack test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Alternatives&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;replicatedhq/&lt;a href=&#34;https://github.com/replicatedhq/dockerfilelint&#34;&gt;dockerfilelint&lt;/a&gt;, the other linter used by the &lt;a href=&#34;https://github.com/github/super-linter/raw/main/README.md#supported-linters&#34;&gt;super-linter&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;RedCoolBeans/&lt;a href=&#34;https://github.com/RedCoolBeans/dockerlint/&#34;&gt;dockerlint&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;projectatomic/&lt;a href=&#34;https://github.com/projectatomic/dockerfile_lint/&#34;&gt;dockerfile_lint&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- References --&gt;</summary>
  </entry>
  <entry>
    <title>fryguybob/diagrams-examples</title>
    <updated>2022-05-29T02:12:00Z</updated>
    <id>tag:github.com,2022-05-29:/fryguybob/diagrams-examples</id>
    <link href="https://github.com/fryguybob/diagrams-examples" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Random examples in diagrams.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;diagrams-examples&lt;/h1&gt; &#xA;&lt;p&gt;Random examples in diagrams.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;code&gt;puzzle&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Project to solve a 3d puzzle. Diagrams projections and Rasterific&#39;s &lt;code&gt;gifMain&lt;/code&gt; are used to visualize the pieces.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;code&gt;weave&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Playing with 1.3 intersections, exploring what will be nice for an API that includes intersection parameters.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;code&gt;lion&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Eventually will turn into a wall hanging made from felt squares.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>input-output-hk/cardano-ledger</title>
    <updated>2022-05-29T02:12:00Z</updated>
    <id>tag:github.com,2022-05-29:/input-output-hk/cardano-ledger</id>
    <link href="https://github.com/input-output-hk/cardano-ledger" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The ledger implementation and specifications of the Cardano blockchain.&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt;Cardano Ledger&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/input-output-hk/cardano-ledger/actions/workflows/haskell.yml&#34;&gt; &lt;img alt=&#34;GitHub Workflow Status (master)&#34; src=&#34;https://img.shields.io/github/workflow/status/input-output-hk/cardano-ledger/Haskell%20CI/master.svg?style=for-the-badge&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;This repository contains the formal specifications, executable models, and implementations of the Cardano Ledger.&lt;/p&gt; &#xA;&lt;p&gt;The documents are built in our CI and can be readily accessed using the following links:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Era&lt;/th&gt; &#xA;   &lt;th&gt;Design Documents&lt;/th&gt; &#xA;   &lt;th&gt;Formal Specification&lt;/th&gt; &#xA;   &lt;th&gt;CDDL&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Byron&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://hydra.iohk.io/job/Cardano/cardano-ledger/byronChainSpec/latest/download-by-type/doc-pdf/blockchain-spec&#34; title=&#34;Specification of the Blockchain Layer&#34;&gt;Chain Spec&lt;/a&gt;, &lt;a href=&#34;https://hydra.iohk.io/job/Cardano/cardano-ledger/byronLedgerSpec/latest/download-by-type/doc-pdf/ledger-spec&#34; title=&#34;A Formal Specification of the Cardano Ledger&#34;&gt;Ledger Spec&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://hydra.iohk.io/job/Cardano/cardano-ledger/blocksCDDLSpec/latest/download-by-type/doc-pdf/binary&#34;&gt;CDDL&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Shelley&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://hydra.iohk.io/job/Cardano/cardano-ledger/delegationDesignSpec/latest/download-by-type/doc-pdf/delegation_design_spec&#34; title=&#34;Design Specification for Delegation and Incentives in Cardano&#34;&gt;Design&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://hydra.iohk.io/job/Cardano/cardano-ledger/shelleyLedgerSpec/latest/download-by-type/doc-pdf/ledger-spec&#34; title=&#34;A Formal Specification of the Cardano Ledger&#34;&gt;Spec&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/input-output-hk/cardano-ledger/tree/master/eras/shelley/test-suite/cddl-files&#34;&gt;CDDL&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Allegra &amp;amp; Mary&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://eprint.iacr.org/2020/895&#34; title=&#34;Multi-Currency Ledgers&#34;&gt;Multi-Currency&lt;/a&gt;, &lt;a href=&#34;https://iohk.io/en/research/library/papers/utxoma-utxo-with-multi-asset-support/&#34; title=&#34;UTXOma:UTXO with Multi-Asset Support&#34;&gt;UTXOma&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://hydra.iohk.io/job/Cardano/cardano-ledger/specs.shelley-ma/latest/download-by-type/doc-pdf/shelley-ma&#34; title=&#34;A Formal Specification of the Cardano Ledger with a Native Multi-Asset Implementation&#34;&gt;Spec&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/input-output-hk/cardano-ledger/tree/master/eras/shelley-ma/test-suite/cddl-files&#34;&gt;CDDL&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Alonzo&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://iohk.io/en/research/library/papers/the-extended-utxo-model/&#34; title=&#34;The Extended UTXO Model&#34;&gt;eUTXO&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://hydra.iohk.io/job/Cardano/cardano-ledger/specs.alonzo-ledger/latest/download-by-type/doc-pdf/alonzo-changes&#34; title=&#34;A Formal Specification of the Cardano Ledger integrating Plutus Core&#34;&gt;Spec&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/input-output-hk/cardano-ledger/tree/master/eras/alonzo/test-suite/cddl-files&#34;&gt;CDDL&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Babbage&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://iohk.io/en/research/library/papers/on-uc-secure-range-extension-and-batch-verification-for-ecvrf/&#34; title=&#34;On UC-Secure Range Extension and Batch Verification for ECVRF&#34;&gt;batch-verification&lt;/a&gt;, &lt;a href=&#34;https://github.com/cardano-foundation/CIPs/pull/159&#34; title=&#34;Reference inputs&#34;&gt;CIP-31&lt;/a&gt;, &lt;a href=&#34;https://github.com/cardano-foundation/CIPs/pull/160&#34; title=&#34;Inline datums&#34;&gt;CIP-32&lt;/a&gt;, &lt;a href=&#34;https://github.com/cardano-foundation/CIPs/pull/161&#34; title=&#34;Reference scripts&#34;&gt;CIP-33&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://hydra.iohk.io/job/Cardano/cardano-ledger/specs.babbage-ledger/latest/download-by-type/doc-pdf/babbage-changes&#34; title=&#34;Formal Specification of the Cardano Ledger for the Babbage era&#34;&gt;Spec&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/input-output-hk/cardano-ledger/tree/master/eras/babbage/test-suite/cddl-files&#34;&gt;CDDL&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Other Documents:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://hydra.iohk.io/job/Cardano/cardano-ledger/nonIntegerCalculations/latest/download-by-type/doc-pdf/non-integer-calculations&#34;&gt;Non-integer calculations specification&lt;/a&gt;: details on the parts of the Shelley specification that use real numbers.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://hydra.iohk.io/job/Cardano/cardano-ledger/specs.pool-ranking/latest/download-by-type/doc-pdf/pool-ranking&#34;&gt;Stake pool ranking specification&lt;/a&gt;: details for a robust stake pool ranking mechanism.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://hydra.iohk.io/job/Cardano/cardano-ledger/semanticsSpec/latest/download-by-type/doc-pdf/small-step-semantics&#34;&gt;Explanation of the small-step-semantics framework&lt;/a&gt;: a guide to the notation and style used by our ledger rules.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In addition, there is a formalization of the Ledger Specification in Isabelle/HOL which can be found &lt;a href=&#34;https://github.com/input-output-hk/fm-ledger-formalization&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Repository structure&lt;/h1&gt; &#xA;&lt;p&gt;The directory structure of this repository is as follows:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/cardano-ledger/master/eras/byron&#34;&gt;byron&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/cardano-ledger/master/eras/byron/ledger&#34;&gt;ledger&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/cardano-ledger/master/eras/byron/ledger/formal-spec&#34;&gt;formal-spec&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/cardano-ledger/master/eras/byron/ledger/executable-spec&#34;&gt;executable-spec&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/cardano-ledger/master/eras/byron/ledger/impl&#34;&gt;implementation&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/cardano-ledger/master/eras/byron/chain&#34;&gt;chain&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/cardano-ledger/master/eras/byron/chain/formal-spec&#34;&gt;formal-spec&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/cardano-ledger/master/eras/byron/chain/executable-spec&#34;&gt;executable-spec&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/cardano-ledger/master/eras/byron/cddl-spec&#34;&gt;cddl&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/cardano-ledger/master/eras/shelley&#34;&gt;shelley&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/cardano-ledger/master/eras/shelley/design-spec&#34;&gt;design-spec&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/cardano-ledger/master/eras/shelley/formal-spec&#34;&gt;formal-spec&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/cardano-ledger/master/eras/shelley/impl&#34;&gt;implementation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/cardano-ledger/master/eras/shelley/test-suite&#34;&gt;tests&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/cardano-ledger/master/eras/shelley/test-suite/cddl-files&#34;&gt;cddl&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/cardano-ledger/master/eras/shelley-ma&#34;&gt;Timelocks and Multi-Assets&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/cardano-ledger/master/eras/shelley-ma/formal-spec&#34;&gt;formal-spec&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/cardano-ledger/master/eras/shelley-ma/impl&#34;&gt;implementation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/cardano-ledger/master/eras/shelley-ma/test-suite&#34;&gt;tests&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/cardano-ledger/master/eras/alonzo&#34;&gt;Smart Contracts&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/cardano-ledger/master/eras/alonzo/formal-spec&#34;&gt;formal-spec&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/cardano-ledger/master/eras/alonzo/impl&#34;&gt;implementation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/cardano-ledger/master/eras/alonzo/test-suite&#34;&gt;tests&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/cardano-ledger/master/libs&#34;&gt;Libraries&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Building&lt;/h1&gt; &#xA;&lt;p&gt;It is recommended to use &lt;a href=&#34;https://nixos.org/nix/download.html&#34;&gt;&lt;code&gt;nix&lt;/code&gt;&lt;/a&gt; for building everything in this repository. Haskell files can be built with &lt;a href=&#34;https://www.haskell.org/cabal/&#34;&gt;&lt;code&gt;cabal&lt;/code&gt;&lt;/a&gt; inside of a nix shell.&lt;/p&gt; &#xA;&lt;h2&gt;Nix Cache&lt;/h2&gt; &#xA;&lt;p&gt;When using &lt;code&gt;nix&lt;/code&gt; it is recommended that you setup the cache, so that it can reuse built artifacts, reducing the compilation times dramatically:&lt;/p&gt; &#xA;&lt;p&gt;If you are using &lt;a href=&#34;https://nixos.org/&#34;&gt;NixOS&lt;/a&gt; add the snippet below to your &lt;code&gt;/etc/nixos/configuration.nix&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;nix.binaryCaches = [&#xA;  &#34;https://cache.nixos.org&#34;&#xA;  &#34;https://hydra.iohk.io&#34;&#xA;];&#xA;&#xA;nix.binaryCachePublicKeys = [&#xA;  &#34;hydra.iohk.io:f/Ea+s+dFdN+3Y/G+FDgSq+a5NEWhJGzdjvKNGv0/EQ=&#34;&#xA;];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you are using the &lt;code&gt;nix&lt;/code&gt; package manager next to another operating system put the following in &lt;code&gt;/etc/nix/nix.conf&lt;/code&gt; if you have a system-wide &lt;code&gt;nix&lt;/code&gt; installation , or in &lt;code&gt;~/.config/nix/nix.conf&lt;/code&gt; if you have a local installation:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;substituters        = https://hydra.iohk.io https://cache.nixos.org/&#xA;trusted-public-keys = hydra.iohk.io:f/Ea+s+dFdN+3Y/G+FDgSq+a5NEWhJGzdjvKNGv0/EQ= cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY=&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Building the LaTeX documents and executable specifications&lt;/h2&gt; &#xA;&lt;p&gt;When using &lt;code&gt;nix&lt;/code&gt; the documents and Haskell code can be readily built by running:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;nix build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The LaTeX documents will be places inside directories named &lt;code&gt;result*&lt;/code&gt;, e.g.:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;result-2/ledger-spec.pdf&#xA;result-3/delegation_design_spec.pdf&#xA;result-4/non-integer-calculations.pdf&#xA;result-5/small-step-semantics.pdf&#xA;result-6/ledger-spec.pdf&#xA;result/blockchain-spec.pdf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Building individual LaTeX documents&lt;/h2&gt; &#xA;&lt;p&gt;Change to the latex directory where the latex document is (e.g. &lt;code&gt;eras/shelley/formal-spec&lt;/code&gt; for the ledger specification corresponding to the Shelley release, or &lt;code&gt;eras/byron/ledger/formal-spec&lt;/code&gt; for the ledger specification corresponding to the Byron release). Then, build the latex document by running:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;nix-shell --pure --run make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For a continuous compilation of the &lt;code&gt;LaTeX&lt;/code&gt; file run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;nix-shell --pure --run &#34;make watch&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Submitting an issue&lt;/h1&gt; &#xA;&lt;p&gt;Issues can be filed in the &lt;a href=&#34;https://github.com/input-output-hk/cardano-ledger/issues&#34;&gt;GitHub Issue tracker&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;However, note that this is pre-release software, so we will not usually be providing support.&lt;/p&gt; &#xA;&lt;h1&gt;Contributing&lt;/h1&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/input-output-hk/cardano-ledger/raw/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>elm/compiler</title>
    <updated>2022-05-29T02:12:00Z</updated>
    <id>tag:github.com,2022-05-29:/elm/compiler</id>
    <link href="https://github.com/elm/compiler" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Compiler for Elm, a functional language for reliable webapps.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Elm&lt;/h1&gt; &#xA;&lt;p&gt;A delightful language for reliable webapps.&lt;/p&gt; &#xA;&lt;p&gt;Check out the &lt;a href=&#34;http://elm-lang.org/&#34;&gt;Home Page&lt;/a&gt;, &lt;a href=&#34;http://elm-lang.org/try&#34;&gt;Try Online&lt;/a&gt;, or &lt;a href=&#34;http://guide.elm-lang.org/&#34;&gt;The Official Guide&lt;/a&gt;&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;p&gt;✨ &lt;a href=&#34;https://guide.elm-lang.org/install/elm.html&#34;&gt;Install&lt;/a&gt; ✨&lt;/p&gt; &#xA;&lt;p&gt;For multiple versions, previous versions, and uninstallation, see the instructions &lt;a href=&#34;https://github.com/elm/compiler/raw/master/installers/README.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Help&lt;/h2&gt; &#xA;&lt;p&gt;If you are stuck, ask around on &lt;a href=&#34;http://elmlang.herokuapp.com/&#34;&gt;the Elm slack channel&lt;/a&gt;. Folks are friendly and happy to help with questions!&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>input-output-hk/cardano-wallet</title>
    <updated>2022-05-29T02:12:00Z</updated>
    <id>tag:github.com,2022-05-29:/input-output-hk/cardano-wallet</id>
    <link href="https://github.com/input-output-hk/cardano-wallet" rel="alternate"></link>
    <summary type="html">&lt;p&gt;HTTP server &amp; command-line for managing UTxOs and HD wallets in Cardano.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;big&gt;&lt;strong&gt;Cardano Wallet&lt;/strong&gt;&lt;/big&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;200&#34; src=&#34;https://raw.githubusercontent.com/input-output-hk/cardano-wallet/master/.github/images/cardano-logo.png&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/input-output-hk/cardano-wallet/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release-pre/input-output-hk/cardano-wallet.svg?style=for-the-badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://buildkite.com/input-output-hk/cardano-wallet&#34;&gt;&lt;img src=&#34;https://img.shields.io/buildkite/7ea3dac7a16f066d8dfc8f426a9a9f7a2131e899cd96c444cf/master?label=BUILD&amp;amp;style=for-the-badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://buildkite.com/input-output-hk/cardano-wallet-nightly&#34;&gt;&lt;img src=&#34;https://img.shields.io/buildkite/59ea9363b8526e867005ca8839db47715bc5f661f36e490143/master?label=BENCHMARK&amp;amp;style=for-the-badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/input-output-hk/cardano-wallet/actions?query=workflow%3Awindows&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/workflow/status/input-output-hk/cardano-wallet/windows?label=Windows&amp;amp;style=for-the-badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hydra.iohk.io/jobset/Cardano/cardano-wallet#tabs-jobs&#34;&gt;&lt;img src=&#34;https://img.shields.io/endpoint?style=for-the-badge&amp;amp;url=https%3A%2F%2Fhydra.iohk.io%2Fjob%2FCardano%2Fcardano-wallet%2Frequired%2Fshield&#34;&gt;&lt;/a&gt; &#xA; &lt;!--&#xA;  &lt;a href=&#34;https://coveralls.io/github/input-output-hk/cardano-wallet?branch=HEAD&#34;&gt;&lt;img src=&#34;https://img.shields.io/coveralls/github/input-output-hk/cardano-wallet/HEAD?style=for-the-badge&#34; /&gt;&lt;/a&gt;&#xA;  --&gt; &lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;Cardano Wallet helps you manage your Ada. You can use it to send and receive payments on the &lt;a href=&#34;https://www.cardano.org&#34;&gt;Cardano&lt;/a&gt; blockchain.&lt;/p&gt; &#xA;&lt;p&gt;This project provides an HTTP Application Programming Interface (API) and command-line interface (CLI) for working with your wallet.&lt;/p&gt; &#xA;&lt;p&gt;It can be used as a component of a frontend such as &lt;a href=&#34;https://daedaluswallet.io&#34;&gt;Daedalus&lt;/a&gt;, which provides a friendly user interface for wallets. Most users who would like to use Cardano should start with Daedalus.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span&gt;ℹ&lt;/span&gt; This source code repository contains the next major version of Cardano Wallet, which has been completely rewritten for the &lt;a href=&#34;https://roadmap.cardano.org/&#34;&gt;Shelley&lt;/a&gt; phase.&lt;/p&gt; &#xA; &lt;p&gt;&lt;span&gt;💡&lt;/span&gt; The Byron version of Cardano Wallet is in the &lt;a href=&#34;https://github.com/input-output-hk/cardano-sl&#34;&gt;cardano-sl&lt;/a&gt; repository.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;wget https://raw.githubusercontent.com/input-output-hk/cardano-wallet/master/docker-compose.yml&#xA;NETWORK=testnet docker-compose up&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Fantastic! The server is up-and-running, waiting for HTTP requests on &lt;code&gt;localhost:8090/v2&lt;/code&gt; e.g.:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;curl http://localhost:8090/v2/network/information&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or to be accessed via CLI, e.g.:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run --network host --rm inputoutput/cardano-wallet network information&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See also &lt;a href=&#34;https://input-output-hk.github.io/cardano-wallet/user-guide/Docker&#34;&gt;Docker&lt;/a&gt; for more information about using docker.&lt;/p&gt; &#xA;&lt;p&gt;NixOS users can also use the &lt;a href=&#34;https://input-output-hk.github.io/cardano-wallet/user-guide/NixOS&#34;&gt;NixOS service&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;How to install (Linux / Windows / Mac OS)&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;strong&gt;Installation Instructions&lt;/strong&gt; for each available &lt;a href=&#34;https://github.com/input-output-hk/cardano-wallet/releases&#34;&gt;release&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;h3&gt;Latest releases&lt;/h3&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th&gt;cardano-wallet&lt;/th&gt; &#xA;    &lt;th&gt;cardano-node (compatible versions)&lt;/th&gt; &#xA;    &lt;th&gt;SMASH (compatible versions)&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;master&lt;/code&gt; branch&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/input-output-hk/cardano-node/releases/tag/1.34.1&#34;&gt;1.34.1&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/input-output-hk/smash/releases/tag/1.6.1&#34;&gt;1.6.1&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/input-output-hk/cardano-wallet/releases/tag/v2022-05-27&#34;&gt;v2022-05-27&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/input-output-hk/cardano-node/releases/tag/1.34.1&#34;&gt;1.34.1&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/input-output-hk/smash/releases/tag/1.6.1&#34;&gt;1.6.1&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/input-output-hk/cardano-wallet/releases/tag/v2022-04-27&#34;&gt;v2022-04-27&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/input-output-hk/cardano-node/releases/tag/1.34.1&#34;&gt;1.34.1&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/input-output-hk/smash/releases/tag/1.6.1&#34;&gt;1.6.1&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/input-output-hk/cardano-wallet/releases/tag/v2022-01-18&#34;&gt;v2022-01-18&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/input-output-hk/cardano-node/releases/tag/1.33.0&#34;&gt;1.33.0&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/input-output-hk/smash/releases/tag/1.6.1&#34;&gt;1.6.1&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;How to build from sources&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://input-output-hk.github.io/cardano-wallet/developers/Building&#34;&gt;Building&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;How to test&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://input-output-hk.github.io/cardano-wallet/contributing/Testing&#34;&gt;Testing&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Link&lt;/th&gt; &#xA;   &lt;th&gt;Audience&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://input-output-hk.github.io/cardano-wallet/user-guide&#34;&gt;User Guide&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Users of Cardano Wallet&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://input-output-hk.github.io/cardano-wallet/user-guide/cli&#34;&gt;CLI Manual&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Users of the Cardano Wallet API&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://input-output-hk.github.io/cardano-wallet/api/edge&#34;&gt;API Documentation&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Users of the Cardano Wallet API&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://input-output-hk.github.io/cardano-wallet/&#34;&gt;Cardano Wallet Documentation&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Anyone interested in the project and our development process&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://input-output-hk.github.io/adrestia/&#34;&gt;Adrestia Documentation&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Anyone interested in the project and our development process&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;hr&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/input-output-hk/cardano-wallet/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/input-output-hk/cardano-wallet.svg?style=for-the-badge&#34;&gt;&lt;/a&gt; &lt;/p&gt;</summary>
  </entry>
</feed>