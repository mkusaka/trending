<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Haskell Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-02T02:12:57Z</updated>
  <subtitle>Weekly Trending of Haskell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>simonmichael/hledger</title>
    <updated>2022-06-02T02:12:57Z</updated>
    <id>tag:github.com,2022-06-02:/simonmichael/hledger</id>
    <link href="https://github.com/simonmichael/hledger" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A reliable, user-friendly Plain Text Accounting tool with command line, terminal and web interfaces.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;hledger&lt;/h1&gt; &#xA;&lt;h2&gt;Robust, intuitive plain text accounting&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.gnu.org/licenses/gpl.html&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-GPLv3+-brightgreen.svg?sanitize=true&#34; alt=&#34;license&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hackage.haskell.org/package/hledger&#34;&gt;&lt;img src=&#34;https://img.shields.io/hackage/v/hledger.svg?label=hackage&amp;amp;colorB=green&#34; alt=&#34;on hackage&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://repology.org/metapackage/hledger&#34;&gt;&lt;img src=&#34;https://repology.org/badge/version-for-repo/stackage_nighly/hledger.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://repology.org/metapackage/hledger&#34;&gt;&lt;img src=&#34;https://repology.org/badge/version-for-repo/stackage_lts/hledger.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://bugs.hledger.org&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/issues/simonmichael/hledger.svg?sanitize=true&#34; alt=&#34;github issues&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Welcome! This a brief intro to hledger. For a more detailed version, see the home page: &lt;strong&gt;&lt;a href=&#34;https://hledger.org&#34;&gt;https://hledger.org&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;hledger is lightweight, cross platform, multi-currency, double-entry accounting software. It lets you track money, investments, cryptocurrencies, invoices, time, inventory and more, in a safe, future-proof plain text data format with full version control and privacy.&lt;/p&gt; &#xA;&lt;p&gt;hledger aims to help both computer experts and regular folks gain clarity in their finances and time management. Though the UIs are basic, hledger can model any accounting situation and provide precise, clear reports. It is reliable, quick, and backed by the highly supportive &lt;a href=&#34;https://plaintextaccounting.org&#34;&gt;Plain Text Accounting&lt;/a&gt; ecosystem. Using it is an excellent way to learn double entry accounting.&lt;/p&gt; &#xA;&lt;p&gt;Compared to &lt;a href=&#34;https://plaintextaccounting.org/#software&#34;&gt;other PTA apps&lt;/a&gt;, hledger is actively maintained, with regular releases, and a strong focus on being easy to use and practical for everyday accounting.&lt;/p&gt; &#xA;&lt;p&gt;More features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Installs easily on unix, mac or windows&lt;/li&gt; &#xA; &lt;li&gt;Complete, built-in documentation in multiple formats, beginner videos, tutorials etc.&lt;/li&gt; &#xA; &lt;li&gt;Multiple UIs: command-line, terminal, web, mobile, editors/IDEs&lt;/li&gt; &#xA; &lt;li&gt;Good at importing and exporting CSV; also outputs text/HTML/JSON/SQL&lt;/li&gt; &#xA; &lt;li&gt;A robust, general, well-specified multi-currency accounting engine&lt;/li&gt; &#xA; &lt;li&gt;Fast, analysing 25k transactions per second on a macbook air m1&lt;/li&gt; &#xA; &lt;li&gt;Accurate to 255 decimal places&lt;/li&gt; &#xA; &lt;li&gt;Supports your preferred account names, currencies, number formats&lt;/li&gt; &#xA; &lt;li&gt;Inspired by and partly compatible with Ledger CLI; interconvertible with Beancount&lt;/li&gt; &#xA; &lt;li&gt;Scriptable by CLI, HTTP or API, with plenty of examples&lt;/li&gt; &#xA; &lt;li&gt;Clean Haskell codebase, continually improved since 2007, with $100 regression bounties&lt;/li&gt; &#xA; &lt;li&gt;Free software licensed under GPLv3+.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;p&gt;I use hledger to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;track income and spending, sometimes with budgets&lt;/li&gt; &#xA; &lt;li&gt;see time reports by day/week/month/project&lt;/li&gt; &#xA; &lt;li&gt;track reimbursables, invoices and payments&lt;/li&gt; &#xA; &lt;li&gt;predict cashflow and account balances&lt;/li&gt; &#xA; &lt;li&gt;get accurate numbers for tax filing&lt;/li&gt; &#xA; &lt;li&gt;research past events&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Here&#39;s an example of the journal file format:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-journal&#34;&gt;2022-01-01 opening balances as of this date&#xA;    assets&lt;span&gt;üè¶&lt;/span&gt;checking                $1000&#xA;    assets&lt;span&gt;üè¶&lt;/span&gt;savings                 $2000&#xA;    assets:cash                          $100&#xA;    liabilities:creditcard               $-50&#xA;    equity:opening/closing balances&#xA;&#xA;2022-01-15 market&#xA;    expenses:food             $50&#xA;    assets:cash              $-50&#xA;&#xA;2022-02-01 GOODWORKS CORP&#xA;    assets&lt;span&gt;üè¶&lt;/span&gt;checking           $1000&#xA;    income:salary                 $-1000&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and some simple reports:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cli&#34;&gt;$ hledger bs&#xA;Balance Sheet 2022-02-15&#xA;&#xA;                        || 2022-02-15 &#xA;========================++============&#xA; Assets                 ||            &#xA;------------------------++------------&#xA; assets&lt;span&gt;üè¶&lt;/span&gt;checking   ||      $2000 &#xA; assets&lt;span&gt;üè¶&lt;/span&gt;savings    ||      $2000 &#xA; assets:cash            ||        $50 &#xA;------------------------++------------&#xA;                        ||      $4050 &#xA;========================++============&#xA; Liabilities            ||            &#xA;------------------------++------------&#xA; liabilities:creditcard ||        $50 &#xA;------------------------++------------&#xA;                        ||        $50 &#xA;========================++============&#xA; Net:                   ||      $4000 &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cli&#34;&gt;$ hledger is --monthly                                            &#xA;Income Statement 2022-01-01..2022-02-28                                               &#xA;                                                                                      &#xA;               ||  Jan    Feb                                                         &#xA;===============++=============                                                        &#xA; Revenues      ||                                                                     &#xA;---------------++-------------                                                        &#xA; income:salary ||    0  $1000                                                         &#xA;---------------++-------------                                                        &#xA;               ||    0  $1000                                                         &#xA;===============++=============                                                        &#xA; Expenses      ||                                                                     &#xA;---------------++-------------                                                        &#xA; expenses:food ||  $50      0                                                         &#xA;---------------++-------------                                                        &#xA;               ||  $50      0                                                         &#xA;===============++=============                                                        &#xA; Net:          || $-50  $1000                                                         &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;More examples and screenshots: &lt;a href=&#34;https://hledger.org/#how-to-get-started&#34;&gt;https://hledger.org/#how-to-get-started&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Funding&lt;/h2&gt; &#xA;&lt;p&gt;hledger is brought to you by &lt;a href=&#34;http://joyful.com&#34;&gt;Simon Michael&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/simonmichael/hledger/master/CREDITS.html&#34;&gt;140+ contributors&lt;/a&gt;, and the generous financial sponsors below.&lt;/p&gt; &#xA;&lt;p&gt;After enjoying some personal or organisational success with hledger, you might want to become one of them, to help support this work. It&#39;s easy! Please see &lt;a href=&#34;https://hledger.org/sponsor.html&#34;&gt;https://hledger.org/sponsor.html&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;!-- keep synced with sponsor.md: --&gt; &#xA;&lt;h3&gt;Organisational sponsors&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opencollective.com/hledger/organization/0/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/organization/0/avatar.svg?avatarHeight=200&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/organization/1/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/organization/1/avatar.svg?avatarHeight=200&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/organization/2/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/organization/2/avatar.svg?avatarHeight=200&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/organization/3/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/organization/3/avatar.svg?avatarHeight=200&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/organization/4/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/organization/4/avatar.svg?avatarHeight=200&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/organization/5/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/organization/5/avatar.svg?avatarHeight=200&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/organization/6/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/organization/6/avatar.svg?avatarHeight=200&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/organization/7/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/organization/7/avatar.svg?avatarHeight=200&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/organization/8/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/organization/8/avatar.svg?avatarHeight=200&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/organization/9/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/organization/9/avatar.svg?avatarHeight=200&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/organization/10/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/organization/10/avatar.svg?avatarHeight=200&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/organization/11/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/organization/11/avatar.svg?avatarHeight=200&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/organization/12/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/organization/12/avatar.svg?avatarHeight=200&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/organization/13/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/organization/13/avatar.svg?avatarHeight=200&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/organization/14/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/organization/14/avatar.svg?avatarHeight=200&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/organization/15/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/organization/15/avatar.svg?avatarHeight=200&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/organization/16/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/organization/16/avatar.svg?avatarHeight=200&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/organization/17/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/organization/17/avatar.svg?avatarHeight=200&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/organization/18/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/organization/18/avatar.svg?avatarHeight=200&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/organization/19/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/organization/19/avatar.svg?avatarHeight=200&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Individual sponsors&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opencollective.com/hledger/individual/0/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/individual/0/avatar.svg?avatarHeight=100&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/individual/1/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/individual/1/avatar.svg?avatarHeight=100&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/individual/2/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/individual/2/avatar.svg?avatarHeight=100&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/individual/3/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/individual/3/avatar.svg?avatarHeight=100&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/individual/4/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/individual/4/avatar.svg?avatarHeight=100&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/individual/5/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/individual/5/avatar.svg?avatarHeight=100&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/individual/6/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/individual/6/avatar.svg?avatarHeight=100&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/individual/7/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/individual/7/avatar.svg?avatarHeight=100&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/individual/8/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/individual/8/avatar.svg?avatarHeight=100&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/individual/9/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/individual/9/avatar.svg?avatarHeight=100&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/individual/10/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/individual/10/avatar.svg?avatarHeight=100&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/individual/11/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/individual/11/avatar.svg?avatarHeight=100&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/individual/12/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/individual/12/avatar.svg?avatarHeight=100&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/individual/13/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/individual/13/avatar.svg?avatarHeight=100&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/individual/14/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/individual/14/avatar.svg?avatarHeight=100&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/individual/15/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/individual/15/avatar.svg?avatarHeight=100&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/individual/16/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/individual/16/avatar.svg?avatarHeight=100&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/individual/17/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/individual/17/avatar.svg?avatarHeight=100&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/individual/18/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/individual/18/avatar.svg?avatarHeight=100&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/individual/19/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/individual/19/avatar.svg?avatarHeight=100&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/individual/20/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/individual/20/avatar.svg?avatarHeight=100&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/individual/21/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/individual/21/avatar.svg?avatarHeight=100&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/individual/22/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/individual/22/avatar.svg?avatarHeight=100&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/individual/23/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/individual/23/avatar.svg?avatarHeight=100&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/individual/24/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/individual/24/avatar.svg?avatarHeight=100&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/individual/25/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/individual/25/avatar.svg?avatarHeight=100&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/individual/26/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/individual/26/avatar.svg?avatarHeight=100&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/individual/27/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/individual/27/avatar.svg?avatarHeight=100&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/individual/28/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/individual/28/avatar.svg?avatarHeight=100&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/individual/29/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/individual/29/avatar.svg?avatarHeight=100&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/individual/30/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/individual/30/avatar.svg?avatarHeight=100&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/individual/31/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/individual/31/avatar.svg?avatarHeight=100&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/individual/32/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/individual/32/avatar.svg?avatarHeight=100&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/individual/33/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/individual/33/avatar.svg?avatarHeight=100&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/individual/34/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/individual/34/avatar.svg?avatarHeight=100&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/individual/35/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/individual/35/avatar.svg?avatarHeight=100&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/individual/36/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/individual/36/avatar.svg?avatarHeight=100&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/individual/37/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/individual/37/avatar.svg?avatarHeight=100&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/individual/38/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/individual/38/avatar.svg?avatarHeight=100&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/individual/39/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/individual/39/avatar.svg?avatarHeight=100&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;If your logo/avatar needs to be added, &lt;a href=&#34;mailto:webmaster@hledger.org&#34;&gt;let me know&lt;/a&gt;!&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>NeuralNine/config-files</title>
    <updated>2022-06-02T02:12:57Z</updated>
    <id>tag:github.com,2022-06-02:/NeuralNine/config-files</id>
    <link href="https://github.com/NeuralNine/config-files" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A collection of my config files.&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>hadolint/hadolint</title>
    <updated>2022-06-02T02:12:57Z</updated>
    <id>tag:github.com,2022-06-02:/hadolint/hadolint</id>
    <link href="https://github.com/hadolint/hadolint" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Dockerfile linter, validate inline bash, written in Haskell&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Haskell Dockerfile Linter&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/hadolint/hadolint/actions&#34;&gt;&lt;img src=&#34;https://github.com/hadolint/hadolint/workflows/Haskell%20Tests/badge.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://tldrlegal.com/l/gpl-3.0&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-GPL--3-blue.svg?sanitize=true&#34; alt=&#34;GPL-3 licensed&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/hadolint/hadolint/releases/latest&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/hadolint/hadolint.svg?sanitize=true&#34; alt=&#34;GitHub release&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/downloads/hadolint/hadolint/total.svg?sanitize=true&#34; alt=&#34;Github downloads&#34;&gt; &lt;img align=&#34;right&#34; alt=&#34;pipecat&#34; width=&#34;150&#34; src=&#34;https://hadolint.github.io/hadolint/img/cat_container.png&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;A smarter Dockerfile linter that helps you build &lt;a href=&#34;https://docs.docker.com/engine/userguide/eng-image/dockerfile_best-practices&#34;&gt;best practice&lt;/a&gt; Docker images. The linter parses the Dockerfile into an AST and performs rules on top of the AST. It stands on the shoulders of &lt;a href=&#34;https://github.com/koalaman/shellcheck&#34;&gt;ShellCheck&lt;/a&gt; to lint the Bash code inside &lt;code&gt;RUN&lt;/code&gt; instructions.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://hadolint.github.io/hadolint&#34;&gt;&lt;span&gt;üåê&lt;/span&gt; &lt;strong&gt;Check the online version on hadolint.github.io/hadolint&lt;/strong&gt;&lt;/a&gt; &lt;a href=&#34;https://hadolint.github.io/hadolint&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hadolint/hadolint/master/screenshot.png&#34; alt=&#34;Screenshot&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;How to use&lt;/h2&gt; &#xA;&lt;p&gt;You can run &lt;code&gt;hadolint&lt;/code&gt; locally to lint your Dockerfile.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;hadolint &amp;lt;Dockerfile&amp;gt;&#xA;hadolint --ignore DL3003 --ignore DL3006 &amp;lt;Dockerfile&amp;gt; # exclude specific rules&#xA;hadolint --trusted-registry my-company.com:500 &amp;lt;Dockerfile&amp;gt; # Warn when using untrusted FROM images&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Docker comes to the rescue, providing an easy way how to run &lt;code&gt;hadolint&lt;/code&gt; on most platforms. Just pipe your &lt;code&gt;Dockerfile&lt;/code&gt; to &lt;code&gt;docker run&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run --rm -i hadolint/hadolint &amp;lt; Dockerfile&#xA;# OR&#xA;docker run --rm -i ghcr.io/hadolint/hadolint &amp;lt; Dockerfile&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or using &lt;a href=&#34;https://podman.io/&#34;&gt;Podman&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;podman run --rm -i docker.io/hadolint/hadolint &amp;lt; Dockerfile&#xA;# OR&#xA;podman run --rm -i ghcr.io/hadolint/hadolint &amp;lt; Dockerfile&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or using Windows PowerShell:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;cat .\Dockerfile | docker run --rm -i hadolint/hadolint&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;p&gt;You can download prebuilt binaries for OSX, Windows and Linux from the latest &lt;a href=&#34;https://github.com/hadolint/hadolint/releases/latest&#34;&gt;release page&lt;/a&gt;. However, if this does not work for you, please fall back to container (Docker), &lt;code&gt;brew&lt;/code&gt; or source installation.&lt;/p&gt; &#xA;&lt;p&gt;On OSX, you can use &lt;a href=&#34;https://brew.sh/&#34;&gt;brew&lt;/a&gt; to install &lt;code&gt;hadolint&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew install hadolint&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On Windows, you can use &lt;a href=&#34;https://github.com/lukesampson/scoop&#34;&gt;scoop&lt;/a&gt; to install &lt;code&gt;hadolint&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-batch&#34;&gt;scoop install hadolint&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On distributions that have &lt;code&gt;nix&lt;/code&gt; installed, you can use the &lt;code&gt;hadolint&lt;/code&gt; package to run ad-hoc shells or permanently install &lt;code&gt;hadolint&lt;/code&gt; into your environment.&lt;/p&gt; &#xA;&lt;p&gt;As mentioned earlier, &lt;code&gt;hadolint&lt;/code&gt; is available as a container image:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker pull hadolint/hadolint&#xA;# OR&#xA;docker pull ghcr.io/hadolint/hadolint&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you need a container with shell access, use the Debian or Alpine variants:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker pull hadolint/hadolint:latest-debian&#xA;# OR&#xA;docker pull hadolint/hadolint:latest-alpine&#xA;# OR&#xA;docker pull ghcr.io/hadolint/hadolint:latest-debian&#xA;# OR&#xA;docker pull ghcr.io/hadolint/hadolint:latest-alpine&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also build &lt;code&gt;hadolint&lt;/code&gt; locally. You need &lt;a href=&#34;https://www.haskell.org/platform/&#34;&gt;Haskell&lt;/a&gt; and the &lt;a href=&#34;http://docs.haskellstack.org/en/stable/install_and_upgrade.html&#34;&gt;stack&lt;/a&gt; build tool to build the binary.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/hadolint/hadolint \&#xA;&amp;amp;&amp;amp; cd hadolint \&#xA;&amp;amp;&amp;amp; stack install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want the &lt;a href=&#34;https://github.com/michaellzc/vscode-hadolint&#34;&gt;VS Code Hadolint&lt;/a&gt; extension to use Hadolint in a container, you can use the following &lt;a href=&#34;https://github.com/hadolint/hadolint/issues/691#issuecomment-932116329&#34;&gt;wrapper script&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/bash&#xA;dockerfile=&#34;$1&#34;&#xA;shift&#xA;docker run --rm -i hadolint/hadolint hadolint &#34;$@&#34; - &amp;lt; &#34;$dockerfile&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;CLI&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;hadolint --help&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;hadolint - Dockerfile Linter written in Haskell&#xA;&#xA;Usage: hadolint [-v|--version] [-c|--config FILENAME] [DOCKERFILE...]&#xA;                [--file-path-in-report FILEPATHINREPORT] [--no-fail]&#xA;                [--no-color] [-V|--verbose] [-f|--format ARG] [--error RULECODE]&#xA;                [--warning RULECODE] [--info RULECODE] [--style RULECODE]&#xA;                [--ignore RULECODE]&#xA;                [--trusted-registry REGISTRY (e.g. docker.io)]&#xA;                [--require-label LABELSCHEMA (e.g. maintainer:text)]&#xA;                [--strict-labels] [--disable-ignore-pragma]&#xA;                [-t|--failure-threshold THRESHOLD]&#xA;  Lint Dockerfile for errors and best practices&#xA;&#xA;Available options:&#xA;  -h,--help                Show this help text&#xA;  -v,--version             Show version&#xA;  -c,--config FILENAME     Path to the configuration file&#xA;  --file-path-in-report FILEPATHINREPORT&#xA;                           The file path referenced in the generated report.&#xA;                           This only applies for the &#39;checkstyle&#39; format and is&#xA;                           useful when running Hadolint with Docker to set the&#xA;                           correct file path.&#xA;  --no-fail                Don&#39;t exit with a failure status code when any rule&#xA;                           is violated&#xA;  --no-color               Don&#39;t colorize output&#xA;  -V,--verbose             Enables verbose logging of hadolint&#39;s output to&#xA;                           stderr&#xA;  -f,--format ARG          The output format for the results [tty | json |&#xA;                           checkstyle | codeclimate | gitlab_codeclimate | gnu |&#xA;                           codacy | sonarqube | sarif] (default: tty)&#xA;  --error RULECODE         Make the rule `RULECODE` have the level `error`&#xA;  --warning RULECODE       Make the rule `RULECODE` have the level `warning`&#xA;  --info RULECODE          Make the rule `RULECODE` have the level `info`&#xA;  --style RULECODE         Make the rule `RULECODE` have the level `style`&#xA;  --ignore RULECODE        A rule to ignore. If present, the ignore list in the&#xA;                           config file is ignored&#xA;  --trusted-registry REGISTRY (e.g. docker.io)&#xA;                           A docker registry to allow to appear in FROM&#xA;                           instructions&#xA;  --require-label LABELSCHEMA (e.g. maintainer:text)&#xA;                           The option --require-label=label:format makes&#xA;                           Hadolint check that the label `label` conforms to&#xA;                           format requirement `format`&#xA;  --strict-labels          Do not permit labels other than specified in&#xA;                           `label-schema`&#xA;  --disable-ignore-pragma  Disable inline ignore pragmas `# hadolint&#xA;                           ignore=DLxxxx`&#xA;  -t,--failure-threshold THRESHOLD&#xA;                           Exit with failure code only when rules with a&#xA;                           severity equal to or above THRESHOLD are violated.&#xA;                           Accepted values: [error | warning | info | style |&#xA;                           ignore | none] (default: info)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Configure&lt;/h2&gt; &#xA;&lt;p&gt;Configuration files can be used globally or per project. Hadolint looks for configuration files in the following locations or their platform specific equivalents in this order and uses the first one exclusively:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;$PWD/.hadolint.yaml&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$XDG_CONFIG_HOME/hadolint.yaml&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$HOME/.config/hadolint.yaml&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$HOME/.hadolint/hadolint.yaml or $HOME/hadolint/config.yaml&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$HOME/.hadolint.yaml&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In windows, the &lt;code&gt;%LOCALAPPDATA%&lt;/code&gt; environment variable is used instead of &lt;code&gt;XDG_CONFIG_HOME&lt;/code&gt;. Config files can have either &lt;code&gt;yaml&lt;/code&gt; or &lt;code&gt;yml&lt;/code&gt; extensions.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;hadolint&lt;/code&gt; full &lt;code&gt;yaml&lt;/code&gt; config file schema&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;failure-threshold: string               # name of threshold level (error | warning | info | style | ignore | none)&#xA;format: string                          # Output format (tty | json | checkstyle | codeclimate | gitlab_codeclimate | gnu | codacy)&#xA;ignored: [string]                       # list of rules&#xA;label-schema:                           # See Linting Labels below for specific label-schema details&#xA;  author: string                        # Your name&#xA;  contact: string                       # email address&#xA;  created: timestamp                    # rfc3339 datetime&#xA;  version: string                       # semver&#xA;  documentation: string                 # url&#xA;  git-revision: string                  # hash&#xA;  license: string                       # spdx&#xA;no-color: boolean                       # true | false&#xA;no-fail: boolean                        # true | false&#xA;override:&#xA;  error: [string]                       # list of rules&#xA;  warning: [string]                     # list of rules&#xA;  info: [string]                        # list of rules&#xA;  style: [string]                       # list of rules&#xA;strict-labels: boolean                  # true | false&#xA;disable-ignore-pragma: boolean          # true | false&#xA;trustedRegistries: string | [string]    # registry or list of registries&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;hadolint&lt;/code&gt; supports specifying the ignored rules using a configuration file. The configuration file should be in &lt;code&gt;yaml&lt;/code&gt; format. This is one valid configuration file as an example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;ignored:&#xA;  - DL3000&#xA;  - SC1010&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Additionally, &lt;code&gt;hadolint&lt;/code&gt; can warn you when images from untrusted repositories are being used in Dockerfiles, you can append the &lt;code&gt;trustedRegistries&lt;/code&gt; keys to the configuration file, as shown below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;ignored:&#xA;  - DL3000&#xA;  - SC1010&#xA;&#xA;trustedRegistries:&#xA;  - docker.io&#xA;  - my-company.com:5000&#xA;  - &#34;*.gcr.io&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to override the severity of specific rules, you can do that too:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;override:&#xA;  error:&#xA;    - DL3001&#xA;    - DL3002&#xA;  warning:&#xA;    - DL3042&#xA;    - DL3033&#xA;  info:&#xA;    - DL3032&#xA;  style:&#xA;    - DL3015&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;failure-threshold&lt;/code&gt; Exit with failure code only when rules with a severity above THRESHOLD are violated (Available in v2.6.0+)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;failure-threshold: info&#xA;warning:&#xA;    - DL3042&#xA;    - DL3033&#xA;  info:&#xA;    - DL3032&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Additionally, you can pass a custom configuration file in the command line with the &lt;code&gt;--config&lt;/code&gt; option&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;hadolint --config /path/to/config.yaml Dockerfile&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To pass a custom configuration file (using relative or absolute path) to a container, use the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run --rm -i -v /your/path/to/hadolint.yaml:/.config/hadolint.yaml hadolint/hadolint &amp;lt; Dockerfile&#xA;# OR&#xA;docker run --rm -i -v /your/path/to/hadolint.yaml:/.config/hadolint.yaml ghcr.io/hadolint/hadolint &amp;lt; Dockerfile&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In addition to config files, Hadolint can be configured with environment variables.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;NO_COLOR=1                               # Set or unset. See https://no-color.org&#xA;HADOLINT_NOFAIL=1                        # Truthy value e.g. 1, true or yes&#xA;HADOLINT_VERBOSE=1                       # Truthy value e.g. 1, true or yes&#xA;HADOLINT_FORMAT=json                     # Output format (tty | json | checkstyle | codeclimate | gitlab_codeclimate | gnu | codacy | sarif )&#xA;HADOLINT_FAILURE_THRESHOLD=info          # threshold level (error | warning | info | style | ignore | none)&#xA;HADOLINT_OVERRIDE_ERROR=DL3010,DL3020    # comma separated list of rule codes&#xA;HADOLINT_OVERRIDE_WARNING=DL3010,DL3020  # comma separated list of rule codes&#xA;HADOLINT_OVERRIDE_INFO=DL3010,DL3020     # comma separated list of rule codes&#xA;HADOLINT_OVERRIDE_STYLE=DL3010,DL3020    # comma separated list of rule codes&#xA;HADOLINT_IGNORE=DL3010,DL3020            # comma separated list of rule codes&#xA;HADOLINT_STRICT_LABELS=1                 # Truthy value e.g. 1, true or yes&#xA;HADOLINT_DISABLE_IGNORE_PRAGMA=1         # Truthy value e.g. 1, true or yes&#xA;HADOLINT_TRUSTED_REGISTRIES=docker.io    # comma separated list of registry urls&#xA;HADOLINT_REQUIRE_LABELS=maintainer:text  # comma separated list of label schema items&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Non-Posix Shells&lt;/h2&gt; &#xA;&lt;p&gt;When using base images with non-posix shells as default (e.g. Windows based images) a special pragma &lt;code&gt;hadolint shell&lt;/code&gt; can specify which shell the base image uses, so that Hadolint can automatically ignore all shell-specific rules.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Dockerfile&#34;&gt;FROM mcr.microsoft.com/windows/servercore:ltsc2022&#xA;# hadolint shell=powershell&#xA;RUN Get-Process notepad | Stop-Process&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Inline ignores&lt;/h2&gt; &#xA;&lt;p&gt;It is also possible to ignore rules by adding a special comment directly above the Dockerfile statement for which you want to make an exception for. Such comments look like &lt;code&gt;# hadolint ignore=DL3001,SC1081&lt;/code&gt;. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dockerfile&#34;&gt;# hadolint ignore=DL3006&#xA;FROM ubuntu&#xA;&#xA;# hadolint ignore=DL3003,SC1035&#xA;RUN cd /tmp &amp;amp;&amp;amp; echo &#34;hello!&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The comment &#34;inline ignores&#34; applies only to the statement following it.&lt;/p&gt; &#xA;&lt;h2&gt;Linting Labels&lt;/h2&gt; &#xA;&lt;p&gt;Hadolint is able to check if specific labels are present and conform to a predefined label schema. First, a label schema must be defined either via the command line:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;hadolint --require-label author:text --require-label version:semver Dockerfile&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or via the config file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;label-schema:&#xA;  author: text&#xA;  contact: email&#xA;  created: rfc3339&#xA;  version: semver&#xA;  documentation: url&#xA;  git-revision: hash&#xA;  license: spdx&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The value of a label can be either of &lt;code&gt;text&lt;/code&gt;, &lt;code&gt;url&lt;/code&gt;, &lt;code&gt;semver&lt;/code&gt;, &lt;code&gt;hash&lt;/code&gt; or &lt;code&gt;rfc3339&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Schema&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;text&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Anything&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;rfc3339&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;A time, formatted according to &lt;a href=&#34;https://www.ietf.org/rfc/rfc3339.txt&#34;&gt;RFC 3339&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;semver&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;A &lt;a href=&#34;https://semver.org/&#34;&gt;semantic version&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;url&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;A URI as described in &lt;a href=&#34;https://www.ietf.org/rfc/rfc3986.txt&#34;&gt;RFC 3986&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;hash&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Either a short or a long &lt;a href=&#34;https://git-scm.com/book/en/v2/Git-Tools-Revision-Selection&#34;&gt;Git hash&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;spdx&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;An &lt;a href=&#34;https://spdx.org/licenses/&#34;&gt;SPDX license identifier&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;email&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;An email address conforming to &lt;a href=&#34;https://www.ietf.org/rfc/rfc5322.txt&#34;&gt;RFC 5322&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;By default, Hadolint ignores any label that is not specified in the label schema. To warn against such additional labels, turn on strict labels, using the command line:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;hadolint --strict-labels --require-label version:semver Dockerfile&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or the config file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;strict-labels: true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When strict labels is enabled, but no label schema is specified, &lt;code&gt;hadolint&lt;/code&gt; will warn if any label is present.&lt;/p&gt; &#xA;&lt;h3&gt;Note on dealing with variables in labels&lt;/h3&gt; &#xA;&lt;p&gt;It is a common pattern to fill the value of a label not statically, but rather dynamically at build time by using a variable:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dockerfile&#34;&gt;FROM debian:buster&#xA;ARG VERSION=&#34;du-jour&#34;&#xA;LABEL version=&#34;${VERSION}&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To allow this, the label schema must specify &lt;code&gt;text&lt;/code&gt; as value for that label:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;label-schema:&#xA;  version: text&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Integrations&lt;/h2&gt; &#xA;&lt;p&gt;To get most of &lt;code&gt;hadolint&lt;/code&gt;, it is useful to integrate it as a check in your CI or into your editor, or as a pre-commit hook, to lint your &lt;code&gt;Dockerfile&lt;/code&gt; as you write it. See our &lt;a href=&#34;https://raw.githubusercontent.com/hadolint/hadolint/master/docs/INTEGRATION.md&#34;&gt;Integration&lt;/a&gt; docs.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hadolint/hadolint/master/docs/INTEGRATION.md#code-review&#34;&gt;Code Review Platform Integrations&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hadolint/hadolint/master/docs/INTEGRATION.md#continuous-integration&#34;&gt;Continuous Integrations&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hadolint/hadolint/master/docs/INTEGRATION.md#editors&#34;&gt;Editor Integrations&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hadolint/hadolint/master/docs/INTEGRATION.md#version-control&#34;&gt;Version Control Integrations&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Rules&lt;/h2&gt; &#xA;&lt;p&gt;An incomplete list of implemented rules. Click on the error code to get more detailed information.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Rules with the prefix &lt;code&gt;DL&lt;/code&gt; are from &lt;code&gt;hadolint&lt;/code&gt;. Have a look at &lt;code&gt;Rules.hs&lt;/code&gt; to find the implementation of the rules.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Rules with the &lt;code&gt;SC&lt;/code&gt; prefix are from &lt;strong&gt;ShellCheck&lt;/strong&gt; (only the most common rules are listed, there are dozens more).&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Please &lt;a href=&#34;https://github.com/hadolint/hadolint/issues/new&#34;&gt;create an issue&lt;/a&gt; if you have an idea for a good rule.&lt;/p&gt; &#xA;&lt;!--lint disable maximum-line-length--&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Rule&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Default Severity&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL1001&#34;&gt;DL1001&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Ignore&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Please refrain from using inline ignore pragmas &lt;code&gt;# hadolint ignore=DLxxxx&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3000&#34;&gt;DL3000&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Error&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Use absolute WORKDIR.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3001&#34;&gt;DL3001&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Info&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;For some bash commands it makes no sense running them in a Docker container like ssh, vim, shutdown, service, ps, free, top, kill, mount, ifconfig.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3002&#34;&gt;DL3002&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Warning&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Last user should not be root.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3003&#34;&gt;DL3003&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Warning&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Use WORKDIR to switch to a directory.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3004&#34;&gt;DL3004&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Error&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Do not use sudo as it leads to unpredictable behavior. Use a tool like gosu to enforce root.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3005&#34;&gt;DL3005&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Error&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Do not use apt-get dist-upgrade.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3006&#34;&gt;DL3006&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Warning&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Always tag the version of an image explicitly.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3007&#34;&gt;DL3007&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Warning&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Using latest is prone to errors if the image will ever update. Pin the version explicitly to a release tag.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3008&#34;&gt;DL3008&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Warning&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Pin versions in apt-get install.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3009&#34;&gt;DL3009&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Info&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Delete the apt-get lists after installing something.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3010&#34;&gt;DL3010&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Info&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Use ADD for extracting archives into an image.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3011&#34;&gt;DL3011&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Error&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Valid UNIX ports range from 0 to 65535.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3012&#34;&gt;DL3012&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Error&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Multiple &lt;code&gt;HEALTHCHECK&lt;/code&gt; instructions.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3013&#34;&gt;DL3013&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Warning&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Pin versions in pip.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3014&#34;&gt;DL3014&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Warning&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Use the &lt;code&gt;-y&lt;/code&gt; switch.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3015&#34;&gt;DL3015&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Info&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Avoid additional packages by specifying --no-install-recommends.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3016&#34;&gt;DL3016&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Warning&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Pin versions in &lt;code&gt;npm&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3018&#34;&gt;DL3018&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Warning&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Pin versions in apk add. Instead of &lt;code&gt;apk add &amp;lt;package&amp;gt;&lt;/code&gt; use &lt;code&gt;apk add &amp;lt;package&amp;gt;=&amp;lt;version&amp;gt;&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3019&#34;&gt;DL3019&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Info&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Use the &lt;code&gt;--no-cache&lt;/code&gt; switch to avoid the need to use &lt;code&gt;--update&lt;/code&gt; and remove &lt;code&gt;/var/cache/apk/*&lt;/code&gt; when done installing packages.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3020&#34;&gt;DL3020&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Error&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Use &lt;code&gt;COPY&lt;/code&gt; instead of &lt;code&gt;ADD&lt;/code&gt; for files and folders.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3021&#34;&gt;DL3021&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Error&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;COPY&lt;/code&gt; with more than 2 arguments requires the last argument to end with &lt;code&gt;/&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3022&#34;&gt;DL3022&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Warning&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;COPY --from&lt;/code&gt; should reference a previously defined &lt;code&gt;FROM&lt;/code&gt; alias&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3023&#34;&gt;DL3023&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Error&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;COPY --from&lt;/code&gt; cannot reference its own &lt;code&gt;FROM&lt;/code&gt; alias&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3024&#34;&gt;DL3024&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Error&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;FROM&lt;/code&gt; aliases (stage names) must be unique&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3025&#34;&gt;DL3025&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Warning&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Use arguments JSON notation for CMD and ENTRYPOINT arguments&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3026&#34;&gt;DL3026&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Error&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Use only an allowed registry in the FROM image&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3027&#34;&gt;DL3027&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Warning&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Do not use &lt;code&gt;apt&lt;/code&gt; as it is meant to be a end-user tool, use &lt;code&gt;apt-get&lt;/code&gt; or &lt;code&gt;apt-cache&lt;/code&gt; instead&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3028&#34;&gt;DL3028&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Warning&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Pin versions in gem install. Instead of &lt;code&gt;gem install &amp;lt;gem&amp;gt;&lt;/code&gt; use &lt;code&gt;gem install &amp;lt;gem&amp;gt;:&amp;lt;version&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3029&#34;&gt;DL3029&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Warning&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Do not use --platform flag with FROM.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3030&#34;&gt;DL3030&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Warning&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Use the &lt;code&gt;-y&lt;/code&gt; switch to avoid manual input &lt;code&gt;yum install -y &amp;lt;package&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3032&#34;&gt;DL3032&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Warning&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;yum clean all&lt;/code&gt; missing after yum command.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3033&#34;&gt;DL3033&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Warning&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Specify version with &lt;code&gt;yum install -y &amp;lt;package&amp;gt;-&amp;lt;version&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3034&#34;&gt;DL3034&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Warning&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Non-interactive switch missing from &lt;code&gt;zypper&lt;/code&gt; command: &lt;code&gt;zypper install -y&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3035&#34;&gt;DL3035&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Warning&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Do not use &lt;code&gt;zypper dist-upgrade&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3036&#34;&gt;DL3036&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Warning&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;zypper clean&lt;/code&gt; missing after zypper use.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3037&#34;&gt;DL3037&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Warning&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Specify version with &lt;code&gt;zypper install -y &amp;lt;package&amp;gt;[=]&amp;lt;version&amp;gt;&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3038&#34;&gt;DL3038&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Warning&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Use the &lt;code&gt;-y&lt;/code&gt; switch to avoid manual input &lt;code&gt;dnf install -y &amp;lt;package&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3040&#34;&gt;DL3040&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Warning&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;dnf clean all&lt;/code&gt; missing after dnf command.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3041&#34;&gt;DL3041&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Warning&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Specify version with &lt;code&gt;dnf install -y &amp;lt;package&amp;gt;-&amp;lt;version&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3042&#34;&gt;DL3042&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Warning&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Avoid cache directory with &lt;code&gt;pip install --no-cache-dir &amp;lt;package&amp;gt;&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3043&#34;&gt;DL3043&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Error&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;ONBUILD&lt;/code&gt;, &lt;code&gt;FROM&lt;/code&gt; or &lt;code&gt;MAINTAINER&lt;/code&gt; triggered from within &lt;code&gt;ONBUILD&lt;/code&gt; instruction.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3044&#34;&gt;DL3044&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Error&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Do not refer to an environment variable within the same &lt;code&gt;ENV&lt;/code&gt; statement where it is defined.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3045&#34;&gt;DL3045&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Warning&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;COPY&lt;/code&gt; to a relative destination without &lt;code&gt;WORKDIR&lt;/code&gt; set.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3046&#34;&gt;DL3046&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Warning&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;useradd&lt;/code&gt; without flag &lt;code&gt;-l&lt;/code&gt; and high UID will result in excessively large Image.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3047&#34;&gt;DL3047&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Info&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;wget&lt;/code&gt; without flag &lt;code&gt;--progress&lt;/code&gt; will result in excessively bloated build logs when downloading larger files.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3048&#34;&gt;DL3048&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Style&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Invalid Label Key&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3049&#34;&gt;DL3049&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Info&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Label &lt;code&gt;&amp;lt;label&amp;gt;&lt;/code&gt; is missing.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3050&#34;&gt;DL3050&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Info&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Superfluous label(s) present.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3051&#34;&gt;DL3051&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Warning&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Label &lt;code&gt;&amp;lt;label&amp;gt;&lt;/code&gt; is empty.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3052&#34;&gt;DL3052&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Warning&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Label &lt;code&gt;&amp;lt;label&amp;gt;&lt;/code&gt; is not a valid URL.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3053&#34;&gt;DL3053&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Warning&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Label &lt;code&gt;&amp;lt;label&amp;gt;&lt;/code&gt; is not a valid time format - must be conform to RFC3339.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3054&#34;&gt;DL3054&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Warning&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Label &lt;code&gt;&amp;lt;label&amp;gt;&lt;/code&gt; is not a valid SPDX license identifier.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3055&#34;&gt;DL3055&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Warning&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Label &lt;code&gt;&amp;lt;label&amp;gt;&lt;/code&gt; is not a valid git hash.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3056&#34;&gt;DL3056&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Warning&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Label &lt;code&gt;&amp;lt;label&amp;gt;&lt;/code&gt; does not conform to semantic versioning.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3057&#34;&gt;DL3057&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Ignore&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;HEALTHCHECK&lt;/code&gt; instruction missing.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3058&#34;&gt;DL3058&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Warning&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Label &lt;code&gt;&amp;lt;label&amp;gt;&lt;/code&gt; is not a valid email format - must be conform to RFC5322.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3059&#34;&gt;DL3059&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Info&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Multiple consecutive &lt;code&gt;RUN&lt;/code&gt; instructions. Consider consolidation.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3060&#34;&gt;DL3060&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Info&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;yarn cache clean&lt;/code&gt; missing after &lt;code&gt;yarn install&lt;/code&gt; was run.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3061&#34;&gt;DL3061&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Error&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Invalid instruction order. Dockerfile must begin with &lt;code&gt;FROM&lt;/code&gt;, &lt;code&gt;ARG&lt;/code&gt; or comment.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL4000&#34;&gt;DL4000&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Error&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;MAINTAINER is deprecated.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL4001&#34;&gt;DL4001&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Warning&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Either use Wget or Curl but not both.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL4003&#34;&gt;DL4003&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Warning&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Multiple &lt;code&gt;CMD&lt;/code&gt; instructions found.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL4004&#34;&gt;DL4004&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Error&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Multiple &lt;code&gt;ENTRYPOINT&lt;/code&gt; instructions found.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL4005&#34;&gt;DL4005&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Warning&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Use &lt;code&gt;SHELL&lt;/code&gt; to change the default shell.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL4006&#34;&gt;DL4006&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Warning&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Set the &lt;code&gt;SHELL&lt;/code&gt; option -o pipefail before &lt;code&gt;RUN&lt;/code&gt; with a pipe in it&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/wiki/SC1000&#34;&gt;SC1000&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;$&lt;/code&gt; is not used specially and should therefore be escaped.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/wiki/SC1001&#34;&gt;SC1001&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;This &lt;code&gt;\c&lt;/code&gt; will be a regular &lt;code&gt;&#39;c&#39;&lt;/code&gt; in this context.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/wiki/SC1007&#34;&gt;SC1007&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Remove space after &lt;code&gt;=&lt;/code&gt; if trying to assign a value (or for empty string, use &lt;code&gt;var=&#39;&#39; ...&lt;/code&gt;).&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/wiki/SC1010&#34;&gt;SC1010&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Use semicolon or linefeed before &lt;code&gt;done&lt;/code&gt; (or quote to make it literal).&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/wiki/SC1018&#34;&gt;SC1018&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;This is a unicode non-breaking space. Delete it and retype as space.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/wiki/SC1035&#34;&gt;SC1035&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;You need a space here&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/wiki/SC1045&#34;&gt;SC1045&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;It&#39;s not &lt;code&gt;foo &amp;amp;; bar&lt;/code&gt;, just &lt;code&gt;foo &amp;amp; bar&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/wiki/SC1065&#34;&gt;SC1065&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Trying to declare parameters? Don&#39;t. Use &lt;code&gt;()&lt;/code&gt; and refer to params as &lt;code&gt;$1&lt;/code&gt;, &lt;code&gt;$2&lt;/code&gt; etc.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/wiki/SC1066&#34;&gt;SC1066&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Don&#39;t use $ on the left side of assignments.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/wiki/SC1068&#34;&gt;SC1068&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Don&#39;t put spaces around the &lt;code&gt;=&lt;/code&gt; in assignments.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/wiki/SC1077&#34;&gt;SC1077&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;For command expansion, the tick should slant left (` vs ¬¥).&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/wiki/SC1078&#34;&gt;SC1078&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Did you forget to close this double-quoted string?&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/wiki/SC1079&#34;&gt;SC1079&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;This is actually an end quote, but due to next char, it looks suspect.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/wiki/SC1081&#34;&gt;SC1081&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Scripts are case sensitive. Use &lt;code&gt;if&lt;/code&gt;, not &lt;code&gt;If&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/wiki/SC1083&#34;&gt;SC1083&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;This &lt;code&gt;{/}&lt;/code&gt; is literal. Check expression (missing &lt;code&gt;;/\n&lt;/code&gt;?) or quote it.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/wiki/SC1086&#34;&gt;SC1086&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Don&#39;t use &lt;code&gt;$&lt;/code&gt; on the iterator name in for loops.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/wiki/SC1087&#34;&gt;SC1087&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Braces are required when expanding arrays, as in &lt;code&gt;${array[idx]}&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/wiki/SC1095&#34;&gt;SC1095&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;You need a space or linefeed between the function name and body.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/wiki/SC1097&#34;&gt;SC1097&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Unexpected &lt;code&gt;==&lt;/code&gt;. For assignment, use &lt;code&gt;=&lt;/code&gt;. For comparison, use &lt;code&gt;[ .. ]&lt;/code&gt; or &lt;code&gt;[[ .. ]]&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/wiki/SC1098&#34;&gt;SC1098&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Quote/escape special characters when using &lt;code&gt;eval&lt;/code&gt;, e.g. &lt;code&gt;eval &#34;a=(b)&#34;&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/wiki/SC1099&#34;&gt;SC1099&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;You need a space before the &lt;code&gt;#&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/wiki/SC2002&#34;&gt;SC2002&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Useless cat. Consider &lt;code&gt;cmd &amp;lt; file | ..&lt;/code&gt; or &lt;code&gt;cmd file | ..&lt;/code&gt; instead.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/wiki/SC2015&#34;&gt;SC2015&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Note that &lt;code&gt;A &amp;amp;&amp;amp; B || C&lt;/code&gt; is not if-then-else. C may run when A is true.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/wiki/SC2026&#34;&gt;SC2026&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;This word is outside of quotes. Did you intend to &#39;nest &#39;&#34;&#39;single quotes&#39;&#34;&#39; instead&#39;?&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/wiki/SC2028&#34;&gt;SC2028&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;echo&lt;/code&gt; won&#39;t expand escape sequences. Consider &lt;code&gt;printf&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/wiki/SC2035&#34;&gt;SC2035&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Use &lt;code&gt;./*glob*&lt;/code&gt; or &lt;code&gt;-- *glob*&lt;/code&gt; so names with dashes won&#39;t become options.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/wiki/SC2039&#34;&gt;SC2039&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;In POSIX sh, something is undefined.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/wiki/SC2046&#34;&gt;SC2046&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Quote this to prevent word splitting&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/wiki/SC2086&#34;&gt;SC2086&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Double quote to prevent globbing and word splitting.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/wiki/SC2140&#34;&gt;SC2140&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Word is in the form &lt;code&gt;&#34;A&#34;B&#34;C&#34;&lt;/code&gt; (B indicated). Did you mean &lt;code&gt;&#34;ABC&#34;&lt;/code&gt; or &lt;code&gt;&#34;A\&#34;B\&#34;C&#34;&lt;/code&gt;?&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/wiki/SC2154&#34;&gt;SC2154&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;var is referenced but not assigned.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/wiki/SC2155&#34;&gt;SC2155&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Declare and assign separately to avoid masking return values.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/wiki/SC2164&#34;&gt;SC2164&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Use &lt;code&gt;cd ... || exit&lt;/code&gt; in case &lt;code&gt;cd&lt;/code&gt; fails.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;!--lint enable maximum-line-length--&gt; &#xA;&lt;h2&gt;Develop&lt;/h2&gt; &#xA;&lt;p&gt;If you are an experienced Haskeller, we would be very grateful if you would tear our code apart in a review.&lt;/p&gt; &#xA;&lt;h3&gt;Setup&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Clone repository&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone --recursive git@github.com:hadolint/hadolint.git&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Install the dependencies&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;stack install&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;REPL&lt;/h3&gt; &#xA;&lt;p&gt;The easiest way to try out the parser is using the REPL.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# start the repl&#xA;stack repl&#xA;# overload strings to be able to use Text&#xA;:set -XOverloadedStrings&#xA;# import parser library&#xA;import Language.Docker&#xA;# parse instruction and look at AST representation&#xA;parseText &#34;FROM debian:jessie&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Tests&lt;/h3&gt; &#xA;&lt;p&gt;Run unit tests:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;stack test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run integration tests:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./integration_test.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;AST&lt;/h3&gt; &#xA;&lt;p&gt;Dockerfile syntax is fully described in the &lt;a href=&#34;http://docs.docker.com/engine/reference/builder/&#34;&gt;Dockerfile reference&lt;/a&gt;. Just take a look at &lt;a href=&#34;https://www.stackage.org/haddock/nightly-2018-01-07/language-docker-2.0.1/Language-Docker-Syntax.html&#34;&gt;Syntax.hs&lt;/a&gt; in the &lt;code&gt;language-docker&lt;/code&gt; project to see the AST definition.&lt;/p&gt; &#xA;&lt;h3&gt;Building against custom libraries&lt;/h3&gt; &#xA;&lt;p&gt;Hadolint uses many libraries to do the dirty work. In particular, language-docker is used to parse Dockerfiles and produce an AST which then can be analyzed. To build Hadolint against a custom version of such libraries, do the following. This example uses language-docker, but it would work with any other libaray as well.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;In the same directory (e.g. &lt;code&gt;/home/user/repos&lt;/code&gt;) clone Hadolint and language-docker git repositories&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd /home/user/repos&#xA;git clone https://github.com/hadolint/hadolint.git&#xA;git clone https://github.com/hadolint/language-docker.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;Make your modifications to language-docker&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;In the Hadolint repo, edit the &lt;code&gt;stack.yaml&lt;/code&gt; file, such that the &lt;code&gt;extra-deps&lt;/code&gt; property points to the other repo&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;[...]&#xA;extra-deps:&#xA;  - ../language-docker&#xA;[...]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;Recompile Hadolint and run the tests&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd /home/user/repos/hadolint&#xA;stack test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Alternatives&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;replicatedhq/&lt;a href=&#34;https://github.com/replicatedhq/dockerfilelint&#34;&gt;dockerfilelint&lt;/a&gt;, the other linter used by the &lt;a href=&#34;https://github.com/github/super-linter/raw/main/README.md#supported-linters&#34;&gt;super-linter&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;RedCoolBeans/&lt;a href=&#34;https://github.com/RedCoolBeans/dockerlint/&#34;&gt;dockerlint&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;projectatomic/&lt;a href=&#34;https://github.com/projectatomic/dockerfile_lint/&#34;&gt;dockerfile_lint&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- References --&gt;</summary>
  </entry>
  <entry>
    <title>input-output-hk/plutus</title>
    <updated>2022-06-02T02:12:57Z</updated>
    <id>tag:github.com,2022-06-02:/input-output-hk/plutus</id>
    <link href="https://github.com/input-output-hk/plutus" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The Plutus language implementation and tools&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;a href=&#34;https://github.com/input-output-hk/plutus&#34;&gt;Plutus Core&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;div id=&#34;toc&#34; class=&#34;toc&#34;&gt; &#xA; &lt;div id=&#34;toctitle&#34;&gt;&#xA;  Table of Contents&#xA; &lt;/div&gt; &#xA; &lt;ul class=&#34;sectlevel1&#34;&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus/master/#_documentation&#34;&gt;Documentation&lt;/a&gt; &#xA;   &lt;ul class=&#34;sectlevel2&#34;&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus/master/#_user_documentation&#34;&gt;User documentation&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus/master/#_talks&#34;&gt;Talks&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus/master/#_specifications_and_design&#34;&gt;Specifications and design&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus/master/#_academic_papers&#34;&gt;Academic papers&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus/master/#_versioning_and_releases&#34;&gt;Versioning and releases&lt;/a&gt; &#xA;   &lt;ul class=&#34;sectlevel2&#34;&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus/master/#_versioning&#34;&gt;Versioning&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus/master/#_branching_and_tagging&#34;&gt;Branching and tagging&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus/master/#_version_ranges&#34;&gt;Version ranges&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus/master/#_releases&#34;&gt;Releases&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus/master/#_working_with_the_project&#34;&gt;Working with the project&lt;/a&gt; &#xA;   &lt;ul class=&#34;sectlevel2&#34;&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus/master/#_how_to_submit_an_issue&#34;&gt;How to submit an issue&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus/master/#how-to-develop&#34;&gt;How to develop and contribute to the project&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus/master/#_how_to_depend_on_the_project_from_another_haskell_project&#34;&gt;How to depend on the project from another Haskell project&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus/master/#_how_to_build_the_projects_artifacts&#34;&gt;How to build the project‚Äôs artifacts&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus/master/#nix-advice&#34;&gt;Nix&lt;/a&gt; &#xA;   &lt;ul class=&#34;sectlevel2&#34;&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus/master/#iohk-binary-cache&#34;&gt;How to set up the IOHK binary caches&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus/master/#nix-build-attributes&#34;&gt;Which attributes to use to build different artifacts&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus/master/#_licensing&#34;&gt;Licensing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/div&gt; &#xA;&lt;div id=&#34;preamble&#34;&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;Plutus Core is the scripting language embedded in the Cardano ledger and forms the basis of the Plutus Platform, an application development platform for developing distributed applications using the Cardano blockchain. For more information about the projects, see the &lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus/master/#user-documentation&#34;&gt;[user-documentation]&lt;/a&gt;.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;This repository contains:&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;ulist&#34;&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt; &lt;p&gt;The implementation, specification, and mechanized metatheory of Plutus Core&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;Plutus Tx, the compiler from Haskell to Plutus Core.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;/ul&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;The rest of this README is focussed on people who want to develop or contribute to the project.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;For people who want to &lt;strong&gt;use&lt;/strong&gt; the project, please consult the &lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus/master/#user-documentation&#34;&gt;[user-documentation]&lt;/a&gt;.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;admonitionblock important&#34;&gt; &#xA;   &lt;table&gt; &#xA;    &lt;tbody&gt;&#xA;     &lt;tr&gt; &#xA;      &lt;td class=&#34;icon&#34;&gt; &#xA;       &lt;div class=&#34;title&#34;&gt;&#xA;        Important&#xA;       &lt;/div&gt; &lt;/td&gt; &#xA;      &lt;td class=&#34;content&#34;&gt; &#xA;       &lt;div class=&#34;paragraph&#34;&gt; &#xA;        &lt;p&gt;This repository used to contain the code for the Plutus Application Framework and Marlowe. These have now &lt;strong&gt;moved&lt;/strong&gt;:&lt;/p&gt; &#xA;       &lt;/div&gt; &#xA;       &lt;div class=&#34;ulist&#34;&gt; &#xA;        &lt;ul&gt; &#xA;         &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/input-output-hk/plutus-apps&#34;&gt;Plutus Application Framework&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;         &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/input-output-hk/marlowe-cardano&#34;&gt;Marlowe&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;        &lt;/ul&gt; &#xA;       &lt;/div&gt; &#xA;       &lt;div class=&#34;paragraph&#34;&gt; &#xA;        &lt;p&gt;Please ensure that you make PRs and issues in the appropriate repository!&lt;/p&gt; &#xA;       &lt;/div&gt; &lt;/td&gt; &#xA;     &lt;/tr&gt; &#xA;    &lt;/tbody&gt;&#xA;   &lt;/table&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div id=&#34;cache-warning&#34; class=&#34;admonitionblock important&#34;&gt; &#xA;   &lt;table&gt; &#xA;    &lt;tbody&gt;&#xA;     &lt;tr&gt; &#xA;      &lt;td class=&#34;icon&#34;&gt; &#xA;       &lt;div class=&#34;title&#34;&gt;&#xA;        Important&#xA;       &lt;/div&gt; &lt;/td&gt; &#xA;      &lt;td class=&#34;content&#34;&gt; &#xA;       &lt;div class=&#34;paragraph&#34;&gt; &#xA;        &lt;p&gt;DO NOT IGNORE THIS&lt;/p&gt; &#xA;       &lt;/div&gt; &#xA;       &lt;div class=&#34;paragraph&#34;&gt; &#xA;        &lt;p&gt;If you want to use Nix with this project, make sure to set up the &lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus/master/#iohk-binary-cache&#34;&gt;IOHK binary cache&lt;/a&gt;. If you do not do this, you will end up building GHC, which takes several hours. If you find yourself building GHC, STOP and fix the cache.&lt;/p&gt; &#xA;       &lt;/div&gt; &lt;/td&gt; &#xA;     &lt;/tr&gt; &#xA;    &lt;/tbody&gt;&#xA;   &lt;/table&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;_documentation&#34;&gt;Documentation&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;_user_documentation&#34;&gt;User documentation&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;The main documentation is located &lt;a href=&#34;https://plutus.readthedocs.io/en/latest/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;_talks&#34;&gt;Talks&lt;/h3&gt; &#xA;   &lt;div class=&#34;ulist&#34;&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=MpWeg6Fg0t8&#34;&gt;Functional Smart Contracts on Cardano (2020)&lt;/a&gt;: an overview of the ideas behind the Plutus Platform.&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=usMPt8KpBeI&#34;&gt;The Plutus Platform (2020)&lt;/a&gt;: an overview of the Platform as a whole (including the Application Framework) at the time.&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;_specifications_and_design&#34;&gt;Specifications and design&lt;/h3&gt; &#xA;   &lt;div class=&#34;ulist&#34;&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://hydra.iohk.io/job/Cardano/plutus/linux.docs.plutus-report/latest/download-by-type/doc-pdf/plutus&#34;&gt;Plutus Technical Report (draft)&lt;/a&gt;: a technical report and design document for the project.&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://hydra.iohk.io/job/Cardano/plutus/linux.docs.plutus-core-spec/latest/download-by-type/doc-pdf/plutus-core-specification&#34;&gt;Plutus Core Specification&lt;/a&gt;: the formal specification of the core language.&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://hydra.iohk.io/job/Cardano/plutus/linux.docs.extended-utxo-spec/latest/download-by-type/doc-pdf/extended-utxo-specification&#34;&gt;Extended UTXO Model&lt;/a&gt;: a design document for the core changes to the Cardano ledger.&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;_academic_papers&#34;&gt;Academic papers&lt;/h3&gt; &#xA;   &lt;div class=&#34;ulist&#34;&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://hydra.iohk.io/job/Cardano/plutus/linux.docs.papers.unraveling-recursion/latest/download-by-type/doc-pdf/unraveling-recursion&#34;&gt;Unraveling Recursion&lt;/a&gt;: a description of some of the compilation strategies used in Plutus IR (&lt;a href=&#34;https://doi.org/10.1007/978-3-030-33636-3_15&#34;&gt;published version&lt;/a&gt;).&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://hydra.iohk.io/job/Cardano/plutus/linux.docs.papers.system-f-in-agda/latest/download-by-type/doc-pdf/paper&#34;&gt;System F in Agda&lt;/a&gt;: a formal model of System F in Agda (&lt;a href=&#34;https://doi.org/10.1007/978-3-030-33636-3_10&#34;&gt;published version&lt;/a&gt;).&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://hydra.iohk.io/job/Cardano/plutus/linux.docs.papers.eutxo/latest/download-by-type/doc-pdf/eutxo&#34;&gt;The Extended UTXO Model&lt;/a&gt;: a full presentation of the EUTXO ledger extension (&lt;a href=&#34;https://doi.org/10.1007/978-3-030-54455-3_37&#34;&gt;published version&lt;/a&gt;).&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://hydra.iohk.io/job/Cardano/plutus/linux.docs.papers.utxoma/latest/download-by-type/doc-pdf/utxoma&#34;&gt;UTXOma: UTXO with Multi-Asset Support&lt;/a&gt;: a full presentation of the multi-asset ledger extension (&lt;a href=&#34;https://doi.org/10.1007/978-3-030-61467-6_8&#34;&gt;published version&lt;/a&gt;).&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://hydra.iohk.io/job/Cardano/plutus/linux.docs.papers.eutxoma/latest/download-by-type/doc-pdf/eutxoma&#34;&gt;Native Custom Tokens in the Extended UTXO Model&lt;/a&gt;: a discussion of the interaction of the multi-asset support with EUTXO (&lt;a href=&#34;https://doi.org/10.1007/978-3-030-61467-6_7&#34;&gt;published version&lt;/a&gt;).&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://arxiv.org/abs/2201.04919&#34;&gt;Translation Certification for Smart Contracts&lt;/a&gt;: a certifier of Plutus IR compiler passes written in Coq.&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;_versioning_and_releases&#34;&gt;Versioning and releases&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;_versioning&#34;&gt;Versioning&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;The core &lt;code&gt;plutus&lt;/code&gt; packages are versioned as follows:&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;ulist&#34;&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt; &lt;p&gt;Package versioning follows the &lt;a href=&#34;https://pvp.haskell.org/&#34;&gt;PVP&lt;/a&gt; on a best-effort basis (i.e. we will generally try to but we won‚Äôt guarantee it).&lt;/p&gt; &#xA;      &lt;div class=&#34;ulist&#34;&gt; &#xA;       &lt;ul&gt; &#xA;        &lt;li&gt; &lt;p&gt;The first-major-version component indicates the &#34;era&#34; which for our purposes means which major version of the &lt;strong&gt;Cardano node&lt;/strong&gt; is being targeted.&lt;/p&gt; &lt;/li&gt; &#xA;        &lt;li&gt; &lt;p&gt;The second-major-version component is used for releases which are major versions according to the PVP, but which are still compatible with the current &#34;era&#34;.&lt;/p&gt; &lt;/li&gt; &#xA;        &lt;li&gt; &lt;p&gt;The minor-version and below are used as normal.&lt;/p&gt; &lt;/li&gt; &#xA;       &lt;/ul&gt; &#xA;      &lt;/div&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Packages which are used downstream should all have the same version.&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Other packages which are not used downstream (e.g. &lt;code&gt;plutus-benchmark&lt;/code&gt;) can remain unversioned.&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;In principle we could just have a single major version, but using two makes it easier to avoid mistakes.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;_branching_and_tagging&#34;&gt;Branching and tagging&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;The following branching and tagging rules are followed:&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;ulist&#34;&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt; &lt;p&gt;Version &lt;code&gt;X&lt;/code&gt; is tagged as &lt;code&gt;vX&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;code&gt;master&lt;/code&gt; is always targeting the next first-major-version.&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;First-major-version releases also have a release branch, &lt;code&gt;release/X&lt;/code&gt;.&lt;/p&gt; &#xA;      &lt;div class=&#34;ulist&#34;&gt; &#xA;       &lt;ul&gt; &#xA;        &lt;li&gt; &lt;p&gt;Changes will be backported from master to the release branch&lt;/p&gt; &lt;/li&gt; &#xA;        &lt;li&gt; &lt;p&gt;Subsequent lesser releases will be made from that branch but do not create new branches.&lt;/p&gt; &lt;/li&gt; &#xA;       &lt;/ul&gt; &#xA;      &lt;/div&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;_version_ranges&#34;&gt;Version ranges&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;Packages which depend on &lt;code&gt;plutus&lt;/code&gt; packages should use version ranges to control which version of those packages they build against.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;ulist&#34;&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt; &lt;p&gt;Packages in &lt;code&gt;plutus&lt;/code&gt; which are used downstream should pin the major-version of each other (e.g. &lt;code&gt;plutus-tx-1.0.1&lt;/code&gt; should depend on &lt;code&gt;plutus-core ^&amp;gt;= 1.0&lt;/code&gt;).&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Downstream packages should pin at least the first-major-version of &lt;code&gt;plutus&lt;/code&gt; packages.&lt;/p&gt; &#xA;      &lt;div class=&#34;ulist&#34;&gt; &#xA;       &lt;ul&gt; &#xA;        &lt;li&gt; &lt;p&gt;Upgrading to a new second-major-version should always be safe, with at most code breakage (following the PVP). Users may of course want to pin this version as well to avoid such breakage.&lt;/p&gt; &lt;/li&gt; &#xA;       &lt;/ul&gt; &#xA;      &lt;/div&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Downstream packages pulling in &lt;code&gt;plutus&lt;/code&gt; packages via &lt;code&gt;source-repository-package&lt;/code&gt; stanzas should always take tagged commits, or potentially commits from a release branch.&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;_releases&#34;&gt;Releases&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;Currently there is no release process beyond bumping the package versions and making a tag/branch as appropriate.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;_working_with_the_project&#34;&gt;Working with the project&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;_how_to_submit_an_issue&#34;&gt;How to submit an issue&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;Issues can be filed in the &lt;a href=&#34;https://github.com/input-output-hk/plutus/issues&#34;&gt;GitHub Issue tracker&lt;/a&gt;.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;However, note that this is pre-release software, so we will not usually be providing support.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;how-to-develop&#34;&gt;How to develop and contribute to the project&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus/master/CONTRIBUTING.html&#34;&gt;CONTRIBUTING&lt;/a&gt;, which describes our processes in more detail including development environments.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;_how_to_depend_on_the_project_from_another_haskell_project&#34;&gt;How to depend on the project from another Haskell project&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;None of our libraries are on Hackage, unfortunately (many of our dependencies aren‚Äôt either). So for the time being, you need to:&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;olist arabic&#34;&gt; &#xA;    &lt;ol class=&#34;arabic&#34;&gt; &#xA;     &lt;li&gt; &lt;p&gt;Add &lt;code&gt;plutus&lt;/code&gt; as a &lt;code&gt;source-repository-package&lt;/code&gt; to your &lt;code&gt;cabal.project&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Copy the &lt;code&gt;source-repository-package&lt;/code&gt; stanzas from our &lt;code&gt;cabal.project&lt;/code&gt; to yours.&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Copy additional stanzas from our &lt;code&gt;cabal.project&lt;/code&gt; as you need, e.g. you may need some of the &lt;code&gt;allow-newer&lt;/code&gt; stanzas.&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;/ol&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;The &lt;a href=&#34;https://github.com/input-output-hk/plutus-starter&#34;&gt;plutus-starter&lt;/a&gt; project provides an example.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;_how_to_build_the_projects_artifacts&#34;&gt;How to build the project‚Äôs artifacts&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;This section contains information about how to build the project‚Äôs artifacts for independent usage. For development work see &lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus/master/#how-to-develop&#34;&gt;How to develop and contribute to the project&lt;/a&gt; for more information.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;sect3&#34;&gt; &#xA;    &lt;h4 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h4&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;The Haskell libraries in Plutus Core are built with &lt;code&gt;cabal&lt;/code&gt; and Nix. The other artifacts (docs etc.) are also most easily built with Nix.&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;sect4&#34;&gt; &#xA;     &lt;h5 id=&#34;_nix&#34;&gt;Nix&lt;/h5&gt; &#xA;     &lt;div class=&#34;paragraph&#34;&gt; &#xA;      &lt;p&gt;Install &lt;a href=&#34;https://nixos.org/nix/&#34;&gt;Nix&lt;/a&gt; (recommended). following the instructions on the &lt;a href=&#34;https://nixos.org/nix/&#34;&gt;Nix website&lt;/a&gt;.&lt;/p&gt; &#xA;     &lt;/div&gt; &#xA;     &lt;div class=&#34;paragraph&#34;&gt; &#xA;      &lt;p&gt;Make sure you have read and understood the &lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus/master/#cache-warning&#34;&gt;cache warning&lt;/a&gt;. DO NOT IGNORE THIS.&lt;/p&gt; &#xA;     &lt;/div&gt; &#xA;     &lt;div class=&#34;paragraph&#34;&gt; &#xA;      &lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus/master/#nix-advice&#34;&gt;Nix&lt;/a&gt; for further advice on using Nix.&lt;/p&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;sect4&#34;&gt; &#xA;     &lt;h5 id=&#34;_non_nix&#34;&gt;Non-Nix&lt;/h5&gt; &#xA;     &lt;div class=&#34;paragraph&#34;&gt; &#xA;      &lt;p&gt;You can build some of the Haskell packages without Nix, but this is not recommended and we don‚Äôt guarantee that these prerequisites are sufficient. If you use Nix, these tools are provided for you via &lt;code&gt;shell.nix&lt;/code&gt;, and you do &lt;strong&gt;not&lt;/strong&gt; need to install them yourself.&lt;/p&gt; &#xA;     &lt;/div&gt; &#xA;     &lt;div class=&#34;ulist&#34;&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt; &lt;p&gt;If you want to build our Haskell packages with &lt;a href=&#34;https://www.haskell.org/cabal/&#34;&gt;&lt;code&gt;cabal&lt;/code&gt;&lt;/a&gt;, then install it.&lt;/p&gt; &lt;/li&gt; &#xA;       &lt;li&gt; &lt;p&gt;If you want to build our Agda code, then install &lt;a href=&#34;https://github.com/agda/agda&#34;&gt;Agda&lt;/a&gt; and the &lt;a href=&#34;https://github.com/agda/agda-stdlib&#34;&gt;standard library&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;/ul&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;sect3&#34;&gt; &#xA;    &lt;h4 id=&#34;building-with-nix&#34;&gt;How to build the Haskell packages and other artifacts with Nix&lt;/h4&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;Run &lt;code&gt;nix build -f default.nix plutus.haskell.packages.plutus-core.components.library&lt;/code&gt; from the root to build the Plutus Core library.&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus/master/#nix-build-attributes&#34;&gt;Which attributes to use to build different artifacts&lt;/a&gt; to find out what other attributes you can build.&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;sect3&#34;&gt; &#xA;    &lt;h4 id=&#34;_how_to_build_the_haskell_packages_with_cabal&#34;&gt;How to build the Haskell packages with &lt;code&gt;cabal&lt;/code&gt;&lt;/h4&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;The Haskell packages can be built directly with &lt;code&gt;cabal&lt;/code&gt;. We do this during development (see &lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus/master/#how-to-develop&#34;&gt;How to develop and contribute to the project&lt;/a&gt;). The best way is to do this is inside a &lt;code&gt;nix-shell&lt;/code&gt;.&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;admonitionblock note&#34;&gt; &#xA;     &lt;table&gt; &#xA;      &lt;tbody&gt;&#xA;       &lt;tr&gt; &#xA;        &lt;td class=&#34;icon&#34;&gt; &#xA;         &lt;div class=&#34;title&#34;&gt;&#xA;          Note&#xA;         &lt;/div&gt; &lt;/td&gt; &#xA;        &lt;td class=&#34;content&#34;&gt; &#xA;         &lt;div class=&#34;paragraph&#34;&gt; &#xA;          &lt;p&gt;For fresh development setups, you also need to run &lt;code&gt;cabal update&lt;/code&gt;.&lt;/p&gt; &#xA;         &lt;/div&gt; &lt;/td&gt; &#xA;       &lt;/tr&gt; &#xA;      &lt;/tbody&gt;&#xA;     &lt;/table&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;Run &lt;code&gt;cabal build plutus-core&lt;/code&gt; from the root to build the Plutus Core library.&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus/master/cabal.project&#34;&gt;cabal project file&lt;/a&gt; to see the other packages that you can build with &lt;code&gt;cabal&lt;/code&gt;.&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;nix-advice&#34;&gt;Nix&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;iohk-binary-cache&#34;&gt;How to set up the IOHK binary caches&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;Adding the IOHK binary cache to your Nix configuration will speed up builds a lot, since many things will have been built already by our CI.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;If you find you are building packages that are not defined in this repository, or if the build seems to take a very long time then you may not have this set up properly.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;To set up the cache:&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;olist arabic&#34;&gt; &#xA;    &lt;ol class=&#34;arabic&#34;&gt; &#xA;     &lt;li&gt; &lt;p&gt;On non-NixOS, edit &lt;code&gt;/etc/nix/nix.conf&lt;/code&gt; and add the following lines:&lt;/p&gt; &#xA;      &lt;div class=&#34;listingblock&#34;&gt; &#xA;       &lt;div class=&#34;content&#34;&gt; &#xA;        &lt;pre&gt;substituters        = https://hydra.iohk.io https://iohk.cachix.org https://cache.nixos.org/&#xA;trusted-public-keys = hydra.iohk.io:f/Ea+s+dFdN+3Y/G+FDgSq+a5NEWhJGzdjvKNGv0/EQ= iohk.cachix.org-1:DpRUyj7h7V830dp/i6Nti+NEO2/nhblbov/8MW7Rqoo= cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY=&lt;/pre&gt; &#xA;       &lt;/div&gt; &#xA;      &lt;/div&gt; &#xA;      &lt;div class=&#34;admonitionblock note&#34;&gt; &#xA;       &lt;table&gt; &#xA;        &lt;tbody&gt;&#xA;         &lt;tr&gt; &#xA;          &lt;td class=&#34;icon&#34;&gt; &#xA;           &lt;div class=&#34;title&#34;&gt;&#xA;            Note&#xA;           &lt;/div&gt; &lt;/td&gt; &#xA;          &lt;td class=&#34;content&#34;&gt; &#xA;           &lt;div class=&#34;paragraph&#34;&gt; &#xA;            &lt;p&gt;If you don‚Äôt have an &lt;code&gt;/etc/nix/nix.conf&lt;/code&gt; or don‚Äôt want to edit it, you may add the &lt;code&gt;nix.conf&lt;/code&gt; lines to &lt;code&gt;~/.config/nix/nix.conf&lt;/code&gt; instead. You must be a &lt;a href=&#34;https://nixos.org/nix/manual/#ssec-multi-user&#34;&gt;trusted user&lt;/a&gt; to do this. If this file doesn‚Äôt exist, go ahead and create it.&lt;/p&gt; &#xA;           &lt;/div&gt; &lt;/td&gt; &#xA;         &lt;/tr&gt; &#xA;        &lt;/tbody&gt;&#xA;       &lt;/table&gt; &#xA;      &lt;/div&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;On NixOS, set the following NixOS options:&lt;/p&gt; &#xA;      &lt;div class=&#34;listingblock&#34;&gt; &#xA;       &lt;div class=&#34;content&#34;&gt; &#xA;        &lt;pre&gt;nix = {&#xA;  binaryCaches          = [ &#34;https://hydra.iohk.io&#34; &#34;https://iohk.cachix.org&#34; ];&#xA;  binaryCachePublicKeys = [ &#34;hydra.iohk.io:f/Ea+s+dFdN+3Y/G+FDgSq+a5NEWhJGzdjvKNGv0/EQ=&#34; &#34;iohk.cachix.org-1:DpRUyj7h7V830dp/i6Nti+NEO2/nhblbov/8MW7Rqoo=&#34; ];&#xA;};&lt;/pre&gt; &#xA;       &lt;/div&gt; &#xA;      &lt;/div&gt; &lt;/li&gt; &#xA;    &lt;/ol&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;Note: after changing /etc/nix/nix.conf you must restart the nix-daemon on non-NixOS for the changes to take effect!&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;nix-build-attributes&#34;&gt;Which attributes to use to build different artifacts&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus/master/default.nix&#34;&gt;&lt;code&gt;default.nix&lt;/code&gt;&lt;/a&gt; defines a package set with attributes for all the artifacts you can build from this repository. These can be built using &lt;code&gt;nix build&lt;/code&gt;. For example:&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;listingblock&#34;&gt; &#xA;    &lt;div class=&#34;content&#34;&gt; &#xA;     &lt;pre&gt;nix build -f default.nix docs.papers.eutxo&lt;/pre&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;ulist&#34;&gt; &#xA;    &lt;div class=&#34;title&#34;&gt;&#xA;     Example attributes&#xA;    &lt;/div&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt; &lt;p&gt;Project packages: defined inside &lt;code&gt;plutus.haskell.packages&lt;/code&gt;&lt;/p&gt; &#xA;      &lt;div class=&#34;ulist&#34;&gt; &#xA;       &lt;ul&gt; &#xA;        &lt;li&gt; &lt;p&gt;e.g.&amp;nbsp;&lt;code&gt;plutus.haskell.packages.plutus-core.components.library&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;       &lt;/ul&gt; &#xA;      &lt;/div&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Documents: defined inside &lt;code&gt;docs&lt;/code&gt;&lt;/p&gt; &#xA;      &lt;div class=&#34;ulist&#34;&gt; &#xA;       &lt;ul&gt; &#xA;        &lt;li&gt; &lt;p&gt;e.g.&amp;nbsp;&lt;code&gt;docs.plutus-core-spec&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;       &lt;/ul&gt; &#xA;      &lt;/div&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;There are other attributes defined in &lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus/master/default.nix&#34;&gt;&lt;code&gt;default.nix&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;_licensing&#34;&gt;Licensing&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;You are free to copy, modify, and distribute this software under the terms of the Apache 2.0 license. See the &lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus/master/LICENSE&#34;&gt;LICENSE&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus/master/NOTICE&#34;&gt;NOTICE&lt;/a&gt; files for details.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt;</summary>
  </entry>
  <entry>
    <title>cdepillabout/servant-rawm</title>
    <updated>2022-06-02T02:12:57Z</updated>
    <id>tag:github.com,2022-06-02:/cdepillabout/servant-rawm</id>
    <link href="https://github.com/cdepillabout/servant-rawm" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Effectful Raw handler for Servant servers.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Servant.RawM&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/cdepillabout/servant-rawm/actions/workflows/ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/cdepillabout/servant-rawm/actions/workflows/ci.yml/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hackage.haskell.org/package/servant-rawm&#34;&gt;&lt;img src=&#34;https://img.shields.io/hackage/v/servant-rawm.svg?sanitize=true&#34; alt=&#34;Hackage&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://stackage.org/lts/package/servant-rawm&#34;&gt;&lt;img src=&#34;http://stackage.org/package/servant-rawm/badge/lts&#34; alt=&#34;Stackage LTS&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://stackage.org/nightly/package/servant-rawm&#34;&gt;&lt;img src=&#34;http://stackage.org/package/servant-rawm/badge/nightly&#34; alt=&#34;Stackage Nightly&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/badge/license-BSD3-blue.svg?sanitize=true&#34; alt=&#34;BSD3 license&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;servant-rawm&lt;/code&gt; provides a way to embed a WAI &lt;a href=&#34;https://hackage.haskell.org/package/wai-3.2.1.1/docs/Network-Wai.html#t:Application&#34;&gt;&lt;code&gt;Application&lt;/code&gt;&lt;/a&gt; in a Servant handler. It is more convenient and powerful than the &lt;a href=&#34;https://hackage.haskell.org/package/servant-0.11/docs/Servant-API-Raw.html#t:Raw&#34;&gt;&lt;code&gt;Raw&lt;/code&gt;&lt;/a&gt; type provided by &lt;a href=&#34;https://hackage.haskell.org/package/servant&#34;&gt;&lt;code&gt;servant&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://hackage.haskell.org/package/servant-rawm/docs/Servant-RawM.html&#34;&gt;Haddocks on Hackage for &lt;code&gt;servant-rawm&lt;/code&gt;&lt;/a&gt; for an explanation of how to use the &lt;a href=&#34;https://hackage.haskell.org/package/servant-rawm/docs/Servant-RawM.html#t:RawM&#34;&gt;&lt;code&gt;RawM&lt;/code&gt;&lt;/a&gt; type.&lt;/p&gt; &#xA;&lt;p&gt;After &lt;code&gt;servant-rawm&lt;/code&gt; 1.0.0.0, the implementations of the &lt;code&gt;RawM&lt;/code&gt; endpoint are divided into &lt;code&gt;servant-rawm-client&lt;/code&gt;, &lt;code&gt;servant-rawm-docs&lt;/code&gt;, and &lt;code&gt;servant-rawm-server&lt;/code&gt; to avoid introducing unnecessary dependencies and reduce the compilation overhead.&lt;/p&gt; &#xA;&lt;p&gt;You will need to add either of the implementations to your dependencies, and import the corresponding implementation (&lt;code&gt;Servant.RawM.Server&lt;/code&gt;, &lt;code&gt;Servant.RawM.Client&lt;/code&gt;, or &lt;code&gt;Servant.RawM.Docs&lt;/code&gt;) for the &lt;code&gt;RawM&lt;/code&gt; endpoint to function correctly.&lt;/p&gt; &#xA;&lt;h2&gt;Example&lt;/h2&gt; &#xA;&lt;p&gt;There is code for an example server, client, and documentation located in &lt;a href=&#34;https://raw.githubusercontent.com/cdepillabout/servant-rawm/master/servant-rawm-examples-and-tests/example/&#34;&gt;&lt;code&gt;servant-rawm-examples-and-tests/example/&lt;/code&gt;&lt;/a&gt;. The following section describes how to run the example executables.&lt;/p&gt; &#xA;&lt;h3&gt;Building&lt;/h3&gt; &#xA;&lt;p&gt;The example executables can be built with the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ stack build servant-rawm-examples-and-tests&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Server&lt;/h3&gt; &#xA;&lt;p&gt;After building, the server can be run with the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ stack exec -- servant-rawm-example-server&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This runs a server on port 8201 serving files in &lt;a href=&#34;https://raw.githubusercontent.com/cdepillabout/servant-rawm/master/servant-rawm-examples-and-tests/example/files/&#34;&gt;&lt;code&gt;servant-rawm-examples-and-tests/example/files/&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;It can be accessed from &lt;code&gt;curl&lt;/code&gt; like the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ curl http://localhost:8201/serve-directory/foo.txt&#xA;This is an example text file.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Client&lt;/h3&gt; &#xA;&lt;p&gt;After building and running the server, the client can be run like the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ stack exec -- servant-rawm-example-client&#xA;Successfully got file ./example/files/foo.txt:&#xA;&#xA;This is an example text file.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Documentation&lt;/h3&gt; &#xA;&lt;p&gt;After building, the documentation can be generated like the following. This is documentation for the API defined in &lt;a href=&#34;https://raw.githubusercontent.com/cdepillabout/servant-rawm/master/servant-rawm-examples-and-tests/example/Api.hs&#34;&gt;servant-rawm-examples-and-tests/example/Api.hs&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ stack exec -- servant-rawm-example-docs&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Maintainers&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/cdepillabout&#34;&gt;@cdepillabout&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Krasjet&#34;&gt;@Krasjet&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>Simspace/on-error</title>
    <updated>2022-06-02T02:12:57Z</updated>
    <id>tag:github.com,2022-06-02:/Simspace/on-error</id>
    <link href="https://github.com/Simspace/on-error" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Clearly-delineated error-handling&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;on-error: clearly-delineated error-handling&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.com/simspace/on-error&#34;&gt;&lt;img src=&#34;https://travis-ci.com/simspace/on-error.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Error-handling code is messy, but if we want to provide good error messages, we should still take the time to do it right. &lt;code&gt;on-error&lt;/code&gt; provides a naming convention which clearly distinguishes error-handling code from the rest of the code, thereby allowing developers to only pay attention to the error-handling code when they want to do so.&lt;/p&gt; &#xA;&lt;p&gt;The naming convention is as follows:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;on[Condition]ThrowError&lt;/code&gt; functions detect errors&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;[transform]Error&lt;/code&gt; functions transform errors&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;onError[Action]&lt;/code&gt; functions handle errors&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Furthermore, those functions are designed to be composed using &lt;code&gt;(.)&lt;/code&gt; into a clearly-delineated block of error-handling code. Here is an example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;countDogs :: Response Int&#xA;countDogs = onErrorCatch sendErrorStatus&#xA;          . onNothingThrowError 500&#xA;       =&amp;lt;&amp;lt;$ liftIO&#xA;          $ fetchCount &#34;http://example.com/dogs/count&#34;&#xA;&#xA;fetchCount :: Text -&amp;gt; IO (Maybe Int)&#xA;sendErrorStatus :: Int -&amp;gt; Response a&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Everything before the &lt;code&gt;(=&amp;lt;&amp;lt;$)&lt;/code&gt; (which is just a low-precedence version of &lt;code&gt;(=&amp;lt;&amp;lt;)&lt;/code&gt;) is error-handling code, and everything after it is normal code. Once our brains have learned to recognize those error-handling blocks as such, we can take a brief look at the above definition and quickly home in to the important part: &lt;code&gt;countDogs&lt;/code&gt; calls &lt;code&gt;fetchCount&lt;/code&gt; at a specific URL, while the rest of the code embeds this &lt;code&gt;IO&lt;/code&gt; computation into a &lt;code&gt;Response&lt;/code&gt; computation, and deals with the error cases somehow. This is often a good enough level of understanding, but if later on we do need to understand the error-handling code, we can take a closer look and determine that the &lt;code&gt;Nothing&lt;/code&gt; case is handled by calling &lt;code&gt;sendErrorStatus 500&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Without &lt;code&gt;on-error&lt;/code&gt;, the implementation of &lt;code&gt;countDogs&lt;/code&gt; might look something like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;countDogs&#39; :: Response Int&#xA;countDogs&#39; = do&#xA;  r &amp;lt;- liftIO $ fetchCount &#34;http://example.com/dogs/count&#34;&#xA;  case r of&#xA;    Nothing -&amp;gt; sendErrorStatus 500&#xA;    Just count -&amp;gt; pure count&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;countDogs&#39;&#39; :: Response Int&#xA;countDogs&#39;&#39; = join&#xA;            . fmap (maybe (sendErrorStatus 500) pure)&#xA;            . liftIO&#xA;            $ fetchCount &#34;http://example.com/dogs/count&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;countDogs&#39;&lt;/code&gt; is quite clear, but you only realize that the second part of the function only performs error-handling after you have already read and understood that part. &lt;code&gt;countDogs&#39;&#39;&lt;/code&gt; uses a different style in which the core &lt;code&gt;fetchCount&lt;/code&gt; computation is gradually transformed into a &lt;code&gt;Response&lt;/code&gt; computation, but again, it&#39;s unclear whether some of those transformations affect the happy path or just the error cases until after you&#39;ve read and understood those transformations.&lt;/p&gt; &#xA;&lt;h2&gt;Detecting errors&lt;/h2&gt; &#xA;&lt;p&gt;Functions which can fail do so in one of three ways:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;By returning a special value such as &lt;code&gt;Nothing&lt;/code&gt; or &lt;code&gt;Either&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;By signaling failure using some monadic effect, such &lt;code&gt;ExceptT.throwE&lt;/code&gt;, &lt;code&gt;MonadError.throwError&lt;/code&gt;, or &lt;code&gt;MonadFail.fail&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;By throwing an exception.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;In each case, we want to detect the error condition and to convert it to a value of some type &lt;code&gt;e&lt;/code&gt; representing the errors which we know can happen within the current code. If you only plan to log the error or to display it to the user, &lt;code&gt;Text&lt;/code&gt; is a good enough representation, but if you plan to handle some of those errors later on, &lt;code&gt;SomeException&lt;/code&gt; and &lt;code&gt;Text&lt;/code&gt; are terrible representations because they don&#39;t give your callers any information about the set of error cases they might want to handle. If you want to do error-&lt;em&gt;handling&lt;/em&gt;, not just error-displaying, a sum type would be a better choice for &lt;code&gt;e&lt;/code&gt;. See &lt;a href=&#34;https://raw.githubusercontent.com/Simspace/on-error/master/#handling-errors&#34;&gt;Handling errors&lt;/a&gt; for some concrete suggestions.&lt;/p&gt; &#xA;&lt;p&gt;In any case, here&#39;s how to obtain an &lt;code&gt;e&lt;/code&gt; in all three cases.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;For &lt;code&gt;Nothing&lt;/code&gt;, use &lt;code&gt;onNothingThrowError&lt;/code&gt; with a value of type &lt;code&gt;e&lt;/code&gt; to be thrown if the value is &lt;code&gt;Nothing&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;For &lt;code&gt;Left x&lt;/code&gt;, use &lt;code&gt;onLeftThrowError&lt;/code&gt;. It uses &lt;code&gt;x&lt;/code&gt; as the error, which you can then convert to an &lt;code&gt;e&lt;/code&gt; using &lt;code&gt;mapError&lt;/code&gt;. For other, less common values, define a custom &lt;code&gt;on[Condition]ThrowError&lt;/code&gt; function in order to avoid polluting your non-error-handling code with error-handling concerns such as converting to &lt;code&gt;Maybe&lt;/code&gt; or &lt;code&gt;Either&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;For &lt;code&gt;ExceptT.throwE&lt;/code&gt; and &lt;code&gt;MonadError.throwError&lt;/code&gt;, there is nothing to do, because &lt;code&gt;Control.Monad.Trans.OnError&lt;/code&gt; already uses &lt;code&gt;ExceptT&lt;/code&gt; to propagate the error upwards. The &lt;code&gt;Control.Monad.OnError&lt;/code&gt; API is slightly different in that regard, see the &lt;a href=&#34;https://raw.githubusercontent.com/Simspace/on-error/master/#propagating-and-transforming-errors&#34;&gt;Propagating and transforming errors&lt;/a&gt; section for details.&lt;/p&gt; &lt;p&gt;For &lt;code&gt;MonadFail.fail&lt;/code&gt;, the behaviour depends on the monad. Due to a design wart, calling &lt;code&gt;fail&lt;/code&gt; often throws an exception, even for error-tracking monads such as &lt;code&gt;Either&lt;/code&gt; and &lt;code&gt;ExceptT&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;For exceptions, try to catch them as close to their source as possible and to rethrow them as errors using one of the two other methods. Be careful to only catch the exceptions you know about; blindly catching all exceptions and propagating them up as a &lt;code&gt;SomeException&lt;/code&gt; or a &lt;code&gt;Text&lt;/code&gt; will not improve the quality of your error handling, it will only decrease it since your callers won&#39;t know what to handle and it will be much more difficult to make sure the generated error messages are valid english sentences. It is better to let unknown exceptions propagate upwards as exceptions, not errors, and to handle exceptions generically at the top-level of your program. Because of asynchronous exceptions, all the code you write has to be exception-safe anyway.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Propagating and transforming errors&lt;/h2&gt; &#xA;&lt;p&gt;Once an error is detected, the computation stops and the error gets propagated up the stack until it gets handled. &lt;code&gt;on-error&lt;/code&gt;&#39;s two modules provide two alternate ways of doing that:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;Control.Monad.Trans.OnError&lt;/code&gt; is based on &lt;code&gt;transformers&lt;/code&gt;, in which case &lt;code&gt;ExceptT&lt;/code&gt; should be the outermost transformer.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Control.Monad.OnError&lt;/code&gt; is based on &lt;code&gt;mtl&lt;/code&gt;, in which case the computation should be polymorphic in &lt;code&gt;m&lt;/code&gt; and have a &lt;code&gt;MonadError e m&lt;/code&gt; constaint.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Learning &lt;code&gt;Control.Monad.Trans.OnError&lt;/code&gt; first is recommended, because its type signatures are more intuitive. The type signatures of the &lt;code&gt;Control.Monad.OnError&lt;/code&gt; module are a bit misleading because they often ask for an &lt;code&gt;ExceptT&lt;/code&gt; computation when a computation which is polymorphic in &lt;code&gt;m&lt;/code&gt; would be a better choice. For example, the type of &lt;code&gt;Control.Monad.OnError.mapError&lt;/code&gt; is&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;mapError :: MonadError e&#39; m =&amp;gt; (e -&amp;gt; e&#39;) -&amp;gt; ExceptT e m a -&amp;gt; m a&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And so we might be tempted to give it an &lt;code&gt;ExceptT e m a&lt;/code&gt; computation:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;countHumans :: forall m. (MonadError Text m, MonadIO m) =&amp;gt; m Int&#xA;countHumans = mapError (&#34;while counting humans: &#34; &amp;lt;&amp;gt;) body&#xA;  where&#xA;    body :: ExceptT Text m Int&#xA;    body = do&#xA;      liftIO $ putStrLn &#34;counting humans...&#34;&#xA;      throwE &#34;humans are not pets&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This typechecks, but using such a concrete monad stack doesn&#39;t fit well with the &lt;code&gt;mtl&lt;/code&gt; style for which &lt;code&gt;Control.Monad.OnError&lt;/code&gt; is designed. It would be better to use a polymorphic monad stack:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;countHumans :: forall m. (MonadError Text m, MonadIO m) =&amp;gt; m Int&#xA;countHumans = mapError (&#34;while counting humans: &#34; &amp;lt;&amp;gt;) body&#xA;  where&#xA;    body :: forall n. (MonadError Text n, MonadIO n) =&amp;gt; n Int&#xA;    body = do&#xA;      liftIO $ putStrLn &#34;counting humans...&#34;&#xA;      throwError &#34;humans are not pets&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This typechecks as well, since &lt;code&gt;n&lt;/code&gt; automatically gets specialized to &lt;code&gt;ExceptT Text m&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The reason &lt;code&gt;mapError&lt;/code&gt; specializes the &lt;code&gt;n&lt;/code&gt; of its input computation in this way is that changing the type of the error being propagated is not an effectful action in any monad, it is instead a translation from an &lt;code&gt;ExceptT e&lt;/code&gt; computation to an &lt;code&gt;ExceptT e&#39;&lt;/code&gt; computation. By specializing &lt;code&gt;n a&lt;/code&gt; to &lt;code&gt;ExceptT e m a&lt;/code&gt;, we can strip off the &lt;code&gt;ExceptT e&lt;/code&gt; layer to obtain an &lt;code&gt;m (Either e a)&lt;/code&gt;, at which point we can convert the &lt;code&gt;e&lt;/code&gt; to an &lt;code&gt;e&#39;&lt;/code&gt; and rethrow it using &lt;code&gt;m&lt;/code&gt;&#39;s &lt;code&gt;MonadError&lt;/code&gt; instance. This means that &lt;code&gt;m&lt;/code&gt; will itself be instantiated to a monad stack containing an &lt;code&gt;ExceptT e&#39;&lt;/code&gt; at some point, and so if the &lt;code&gt;n a&lt;/code&gt; computation was using a concrete monad stack, it would look something like &lt;code&gt;ExceptT e (ExceptT e&#39; IO) a&lt;/code&gt;. This is a pretty unusual and unintuitive monad stack, which is another reason to prefer writing it as a computation which is polymorphic in &lt;code&gt;n&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Handling errors&lt;/h2&gt; &#xA;&lt;p&gt;While you can use the &lt;code&gt;onError[Action]&lt;/code&gt; functions to handle the errors in whichever way you please, here are some concrete recommendations.&lt;/p&gt; &#xA;&lt;p&gt;For a function which looks up a key in a &lt;code&gt;Map&lt;/code&gt;, it makes sense to return a &lt;code&gt;Maybe&lt;/code&gt; to denote the fact that the key was not found. The &lt;code&gt;Nothing&lt;/code&gt; case isn&#39;t necessarily an error case; perhaps the caller wants to insert a new value at that key, and the &lt;code&gt;Nothing&lt;/code&gt; case is actually the success case because there isn&#39;t an existing, conflicting value at that key.&lt;/p&gt; &#xA;&lt;p&gt;So when we are very close to the source of the &#34;error&#34;, it&#39;s not yet clear whether that error is problematic or not, because we do not yet have enough context. So we propagate the information upwards, in the hope that the caller has more context.&lt;/p&gt; &#xA;&lt;p&gt;If we are manipulating a graph represented as a &lt;code&gt;Map&lt;/code&gt; from node to neighbours, we know that our invariant is that all the neighbour nodes must be present in the &lt;code&gt;Map&lt;/code&gt;. So if we attempt to perform a lookup and we receive a &lt;code&gt;Nothing&lt;/code&gt;, we know that we have a bug somewhere which accidentally breaks the invariant. There is nothing the caller can do about this, the only solution is to abort and to inform the programmer that a bug needs to be fixed. Since there is nothing the caller can do, it is not useful to tell it that this particular error case could happen, and so for bugs, I don&#39;t recommend propagating the error up using &lt;code&gt;on-error&lt;/code&gt;, instead I recommend failing with an exception, for example using &lt;code&gt;error &#34;invariant violated: neighbour not in Map&#34;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Keeping track of such invariants in order to know when to convert unlikely errors into exceptions which will hopefully never be thrown is an important part of error-handling, because it allows you to reduce the number of error cases you are propagating up. Otherwise, as we go up the stack, functions have more and more sub-calls beneath them, and so more and more error cases would accumulate, and handling all those cases would become unmanageable. I recommend trying to keep the number of error cases small at all levels.&lt;/p&gt; &#xA;&lt;p&gt;At the top-level, the caller is the user. For them, a sum type describing all the possible error cases is less useful; what they need is a clear error message. So once we have enough context to know that an error cannot be handled by the code and will have to be displayed to the user, I recommend converting the value representing the error to &lt;code&gt;Text&lt;/code&gt;, and to propagate that error message upwards. With judicious uses of &lt;code&gt;annotateError&lt;/code&gt;, this error message can be annotated with some contextual information clarifying where the error has occurred.&lt;/p&gt; &#xA;&lt;p&gt;For example, if the user provides a pair of keys so we can perform some lookup in a nested &lt;code&gt;Map&lt;/code&gt; of &lt;code&gt;Map&lt;/code&gt;s, we&#39;ll have to tell the user which key wasn&#39;t found and in which &lt;code&gt;Map&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;lookupM :: MonadError Text m&#xA;        =&amp;gt; Int -&amp;gt; Map Int a -&amp;gt; m a&#xA;lookupM k = onNothingThrowError (&#34;key &#34; &amp;lt;&amp;gt; showt k &amp;lt;&amp;gt; &#34; not found&#34;)&#xA;          . Map.lookup k&#xA;&#xA;nestedLookupM :: MonadError Text m&#xA;              =&amp;gt; (Int, Int) -&amp;gt; Map Int (Map Int a) -&amp;gt; m a&#xA;nestedLookupM (k1, k2) mm = do&#xA;  m &amp;lt;- annotateError &#34;outer map&#34; $ lookupM k1 mm&#xA;  a &amp;lt;- annotateError &#34;inner map&#34; $ lookupM k2 m&#xA;  pure a&#xA;&#xA;-- |&#xA;-- &amp;gt;&amp;gt;&amp;gt; nestedLookupM (3,4) nestedMap :: Either Text Int&#xA;-- Left &#34;outer map: key 3 not found&#34;&#xA;-- &amp;gt;&amp;gt;&amp;gt; nestedLookupM (1,4) nestedMap :: Either Text Int&#xA;-- Left &#34;inner map: key 4 not found&#34;&#xA;nestedMap :: Map Int (Map Int Int)&#xA;nestedMap = Map.fromList [(1, Map.fromList [(2, 42)])]&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>bitnomial/prometheus</title>
    <updated>2022-06-02T02:12:57Z</updated>
    <id>tag:github.com,2022-06-02:/bitnomial/prometheus</id>
    <link href="https://github.com/bitnomial/prometheus" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Prometheus.io Haskell client.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Prometheus Haskell Client&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.com/bitnomial/prometheus&#34;&gt;&lt;img src=&#34;https://travis-ci.com/bitnomial/prometheus.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hackage.haskell.org/package/prometheus&#34;&gt;&lt;img src=&#34;https://img.shields.io/hackage/v/prometheus.svg?sanitize=true&#34; alt=&#34;Hackage&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A simple and modern, type safe, performance focused, idiomatic Haskell client for &lt;a href=&#34;http://prometheus.io&#34;&gt;Prometheus&lt;/a&gt; monitoring. Specifically there is no use of unsafe IO or manual ByteString construction from lists of bytes. Batteries-included web server.&lt;/p&gt; &#xA;&lt;p&gt;A key design element of this library is that the RegistryT monad transformer is only required for registering new time series. Once the time series is registered, new data samples may just be added in the IO monad.&lt;/p&gt; &#xA;&lt;p&gt;Note: Version 0.* supports Prometheus v1.0 and version 2.* supports Prometheus v2.0.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://hackage.haskell.org/package/prometheus&#34;&gt;Hackage Package&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://github.com/bitnomial/prometheus&#34;&gt;Github Repo&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage Example&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;{-# LANGUAGE OverloadedStrings #-}&#xA;&#xA;module Example where&#xA;&#xA;import           Control.Monad.IO.Class                         (liftIO)&#xA;import           System.Metrics.Prometheus.Http.Scrape          (serveMetricsT)&#xA;import           System.Metrics.Prometheus.Concurrent.RegistryT&#xA;import           System.Metrics.Prometheus.Metric.Counter       (inc)&#xA;import           System.Metrics.Prometheus.MetricId&#xA;&#xA;main :: IO ()&#xA;main = runRegistryT $ do&#xA;    -- Labels can be defined as lists or added to an empty label set&#xA;    connectSuccessGauge &amp;lt;- registerGauge &#34;example_connections&#34; (fromList [(&#34;login&#34;, &#34;success&#34;)])&#xA;    connectFailureGauge &amp;lt;- registerGauge &#34;example_connections&#34; (addLabel &#34;login&#34; &#34;failure&#34; mempty)&#xA;    connectCounter &amp;lt;- registerCounter &#34;example_connection_total&#34; mempty&#xA;    latencyHistogram &amp;lt;- registerHistogram &#34;example_round_trip_latency_ms&#34; mempty [10, 20..100]&#xA;&#xA;    liftIO $ inc connectCounter -- increment a counter&#xA;&#xA;    -- [...] pass metric handles to the rest of the app&#xA;&#xA;    serveMetricsT 8080 [&#34;metrics&#34;] -- http://localhost:8080/metric server&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Advanced Usage&lt;/h2&gt; &#xA;&lt;p&gt;A &lt;code&gt;Registry&lt;/code&gt; and &lt;code&gt;StateT&lt;/code&gt;-based &lt;code&gt;RegistryT&lt;/code&gt; are available for unit testing or generating lists of &lt;code&gt;[IO a]&lt;/code&gt; actions that can be &lt;code&gt;sequenced&lt;/code&gt; and returned from pure code to be applied.&lt;/p&gt; &#xA;&lt;h2&gt;Concurrency Model&lt;/h2&gt; &#xA;&lt;p&gt;Metrics are &#34;values&#34; and the Registry is the map of &#34;name_labels&#34; to metric &#34;keys&#34;.&lt;/p&gt; &#xA;&lt;p&gt;Metrics may be created/registered at any point, not just at start up, in the &lt;code&gt;RegistryT&lt;/code&gt; monad transformer. Thread the &lt;code&gt;RegistryT&lt;/code&gt; through your transformer stack to tell the type system you intend to register new metrics in that call stack. The &lt;code&gt;RegistryT&lt;/code&gt; has a thread safe version in the &lt;code&gt;Concurrent&lt;/code&gt; module.&lt;/p&gt; &#xA;&lt;p&gt;The metrics are thread safe on their own and do not require locking the entire registry to update them. They use high performance check-and-set atomic primitives. This is because metrics may be updated many times in between scrapes where the Reigstry needs to be lock. You do NOT want to lock all the metrics just to update one.&lt;/p&gt; &#xA;&lt;p&gt;The scraping operation of the server to collect all the metrics locks the registry to ensure no new metrics are being created/keyed in a race with the scrape.&lt;/p&gt; &#xA;&lt;h2&gt;Tasks&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Implement help docstrings.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Implement GHC-specific metrics.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Implement &lt;a href=&#34;https://github.com/prometheus/client_golang/raw/master/prometheus/summary.go&#34;&gt;summary metric&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Encode name and labels on register.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Implement ReaderT for Concurrent Registry.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Library documentation and example.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;http://prometheus.io/docs/concepts/data_model/#metric-names-and-labels&#34;&gt;Name and label validation&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>mwotton/squealgen</title>
    <updated>2022-06-02T02:12:57Z</updated>
    <id>tag:github.com,2022-06-02:/mwotton/squealgen</id>
    <link href="https://github.com/mwotton/squealgen" rel="alternate"></link>
    <summary type="html">&lt;p&gt;generate haskell types for Squeal from a running postgresql database.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;squealgen&lt;/h1&gt; &#xA;&lt;p&gt;Generate squeal types from a running database.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/mwotton/squealgen/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;why?&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://hackage.haskell.org/package/squeal-postgresql&#34;&gt;Squeal&lt;/a&gt; is a lovely way to interact with a database, but setting up the initial schema is a struggle. By default, it assumes you will be managing and migrating your database with Squeal, and if you are starting from scratch, that works great, but if you&#39;re managing it some other way, or even just want to test out Squeal on an existing database, it&#39;s tedious to have to set up the database types and keep them up to date.&lt;/p&gt; &#xA;&lt;h2&gt;how?&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;clone the repo and change into the directory&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;make prefix=$HOME/.local install&lt;/code&gt;. (We will assume here that &lt;code&gt;$HOME/.local/bin&lt;/code&gt; is in your path, obviously feel free to install wherever makes sense to you.)&lt;/li&gt; &#xA; &lt;li&gt;If my database is &lt;code&gt;cooldb&lt;/code&gt;, my haskell module file is &lt;code&gt;Schema.hs&lt;/code&gt;, and i want to use the &lt;code&gt;public&lt;/code&gt; schema (the default), I would run &lt;code&gt;squealgen cooldb Schema public &amp;gt; ~/myproject/src/Schema.hs&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;You could integrate this in various ways: perhaps just as an initial scaffold, or perhaps integrated as part of your build process. A true madman could integrate this into a TH call, but I suspect this would be slow and prone to failing (for instance, better never compile any code if you don&#39;t have access to the right version of psql or a way of spinning up an empty database.)&lt;/p&gt; &#xA;&lt;p&gt;I highly recommend having a scripted way to bring up a temporary database and run all migrations first. I use Jonathan Fischoff&#39;s &lt;a href=&#34;https://hackage.haskell.org/package/tmp-postgres-1.34.1.0&#34;&gt;tmp-postgres&lt;/a&gt; library and recommend it if you&#39;re running migrations through Haskell.&lt;/p&gt; &#xA;&lt;h2&gt;hacking?&lt;/h2&gt; &#xA;&lt;p&gt;My workflow looks like this:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;make testwatch&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;you&#39;ll need&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;initdb&lt;/code&gt; from postgresql to be in your PATH. It typically isn&#39;t on Ubuntu systems, at least: usually in /usr/lib/postgresql/$VERSION_NUMBER/bin.&lt;/li&gt; &#xA; &lt;li&gt;pg_tmp from here: &lt;a href=&#34;https://eradman.com/ephemeralpg/code/ephemeralpg-3.0.tar.gz&#34;&gt;https://eradman.com/ephemeralpg/code/ephemeralpg-3.0.tar.gz&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;make&lt;/li&gt; &#xA; &lt;li&gt;stack&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;what next?&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;support in-out parameters in functions, once I know how to model this in squeal&lt;/li&gt; &#xA; &lt;li&gt;Remove string-hacking, generate in a more principled way.&lt;/li&gt; &#xA; &lt;li&gt;Extract check constraints (maybe). This is much harder than the rest of it.&lt;/li&gt; &#xA; &lt;li&gt;Triggers&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>