<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Haskell Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-05T02:14:34Z</updated>
  <subtitle>Weekly Trending of Haskell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>olivierverdier/zsh-git-prompt</title>
    <updated>2022-06-05T02:14:34Z</updated>
    <id>tag:github.com,2022-06-05:/olivierverdier/zsh-git-prompt</id>
    <link href="https://github.com/olivierverdier/zsh-git-prompt" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Informative git prompt for zsh&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Informative git prompt for zsh&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/olivierverdier/zsh-git-prompt&#34;&gt;&lt;img src=&#34;https://travis-ci.org/olivierverdier/zsh-git-prompt.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A &lt;code&gt;zsh&lt;/code&gt; prompt that displays information about the current git repository. In particular the branch name, difference with remote branch, number of files staged, changed, etc.&lt;/p&gt; &#xA;&lt;p&gt;(an original idea from this &lt;a href=&#34;http://sebastiancelis.com/2009/nov/16/zsh-prompt-git-users/&#34;&gt;blog post&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;p&gt;The prompt may look like the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;(master↑3|✚1)&lt;/code&gt;: on branch &lt;code&gt;master&lt;/code&gt;, ahead of remote by 3 commits, 1 file changed but not staged&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;(status|●2)&lt;/code&gt;: on branch &lt;code&gt;status&lt;/code&gt;, 2 files staged&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;(master|✚7…)&lt;/code&gt;: on branch &lt;code&gt;master&lt;/code&gt;, 7 files changed, some files untracked&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;(master|✖2✚3)&lt;/code&gt;: on branch &lt;code&gt;master&lt;/code&gt;, 2 conflicts, 3 files changed&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;(experimental↓2↑3|✔)&lt;/code&gt;: on branch &lt;code&gt;experimental&lt;/code&gt;; your branch has diverged by 3 commits, remote by 2 commits; the repository is otherwise clean&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;(:70c2952|✔)&lt;/code&gt;: not on any branch; parent commit has hash &lt;code&gt;70c2952&lt;/code&gt;; the repository is otherwise clean&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Here is how it could look like when you are ahead by 4 commits, behind by 5 commits, and have 1 staged files, 1 changed but unstaged file, and some untracked files, on branch &lt;code&gt;dev&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;img src=&#34;https://github.com/olivierverdier/zsh-git-prompt/raw/master/screenshot.png&#34; width=&#34;300/&#34;&gt; &#xA;&lt;h2&gt;Prompt Structure&lt;/h2&gt; &#xA;&lt;p&gt;By default, the general appearance of the prompt is:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(&amp;lt;branch&amp;gt;&amp;lt;branch tracking&amp;gt;|&amp;lt;local status&amp;gt;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The symbols are as follows:&lt;/p&gt; &#xA;&lt;h3&gt;Local Status Symbols&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Symbol&lt;/th&gt; &#xA;   &lt;th&gt;Meaning&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;✔&lt;/td&gt; &#xA;   &lt;td&gt;repository clean&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;●n&lt;/td&gt; &#xA;   &lt;td&gt;there are &lt;code&gt;n&lt;/code&gt; staged files&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;✖n&lt;/td&gt; &#xA;   &lt;td&gt;there are &lt;code&gt;n&lt;/code&gt; unmerged files&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;✚n&lt;/td&gt; &#xA;   &lt;td&gt;there are &lt;code&gt;n&lt;/code&gt; changed but &lt;em&gt;unstaged&lt;/em&gt; files&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;…&lt;/td&gt; &#xA;   &lt;td&gt;there are some untracked files&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Branch Tracking Symbols&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Symbol&lt;/th&gt; &#xA;   &lt;th&gt;Meaning&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;↑n&lt;/td&gt; &#xA;   &lt;td&gt;ahead of remote by &lt;code&gt;n&lt;/code&gt; commits&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;↓n&lt;/td&gt; &#xA;   &lt;td&gt;behind remote by &lt;code&gt;n&lt;/code&gt; commits&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;↓m↑n&lt;/td&gt; &#xA;   &lt;td&gt;branches diverged, other by &lt;code&gt;m&lt;/code&gt; commits, yours by &lt;code&gt;n&lt;/code&gt; commits&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Branch Symbol&lt;/h3&gt; &#xA;&lt;p&gt;When the branch name starts with a colon &lt;code&gt;:&lt;/code&gt;, it means it’s actually a hash, not a branch (although it should be pretty clear, unless you name your branches like hashes :-)&lt;/p&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Clone this repository somewhere on your hard drive.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Source the file &lt;code&gt;zshrc.sh&lt;/code&gt; from your &lt;code&gt;~/.zshrc&lt;/code&gt; config file, and configure your prompt. So, somewhere in &lt;code&gt;~/.zshrc&lt;/code&gt;, you should have:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;source path/to/zshrc.sh&#xA;# an example prompt&#xA;PROMPT=&#39;%B%m%~%b$(git_super_status) %# &#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Go in a git repository and test it!&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Haskell (optional)&lt;/h3&gt; &#xA;&lt;p&gt;There is now a Haskell implementation as well, which can be four to six times faster than the Python one. The reason is not that Haskell is faster in itself (although it is), but that this implementation calls &lt;code&gt;git&lt;/code&gt; only once. To install, do the following:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Make sure &lt;a href=&#34;http://docs.haskellstack.org/en/stable/README.html#how-to-install&#34;&gt;Haskell&#39;s stack&lt;/a&gt; is installed on your system&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cd&lt;/code&gt; to this folder&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;stack setup&lt;/code&gt; to install the Haskell compiler, if it is not already there&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;stack build &amp;amp;&amp;amp; stack install&lt;/code&gt; (don&#39;t worry, the executable is only “installed” in this folder, not on your system)&lt;/li&gt; &#xA; &lt;li&gt;Define the variable &lt;code&gt;GIT_PROMPT_EXECUTABLE=&#34;haskell&#34;&lt;/code&gt; somewhere in your &lt;code&gt;.zshrc&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Customisation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You may redefine the function &lt;code&gt;git_super_status&lt;/code&gt; (after the &lt;code&gt;source&lt;/code&gt; statement) to adapt it to your needs (to change the order in which the information is displayed).&lt;/li&gt; &#xA; &lt;li&gt;Define the variable &lt;code&gt;ZSH_THEME_GIT_PROMPT_CACHE&lt;/code&gt; in order to enable caching.&lt;/li&gt; &#xA; &lt;li&gt;You may also change a number of variables (which name start with &lt;code&gt;ZSH_THEME_GIT_PROMPT_&lt;/code&gt;) to change the appearance of the prompt. Take a look in the file &lt;code&gt;zshrc.sh&lt;/code&gt; to see how the function &lt;code&gt;git_super_status&lt;/code&gt; is defined, and what variables are available.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Enjoy!&lt;/strong&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>dapphub/dapptools</title>
    <updated>2022-06-05T02:14:34Z</updated>
    <id>tag:github.com,2022-06-05:/dapphub/dapptools</id>
    <link href="https://github.com/dapphub/dapptools" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Dapp, Seth, Hevm, and more&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Dapp tools by DappHub &lt;a href=&#34;https://dapphub.chat&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/community-chat-blue.svg?style=flat-square&#34; alt=&#34;Chat&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;Hello!&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;dapptools&lt;/code&gt; is a suite of Ethereum focused CLI tools following the Unix design philosophy, favoring composability, configurability and extensibility.&lt;/p&gt; &#xA;&lt;p&gt;This repository contains the source code for several programs hand-crafted and maintained by DappHub, along with dependency management, courtesy of Nix.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dapphub/dapptools/master/src/dapp&#34;&gt;dapp&lt;/a&gt; - All you need Ethereum development tool. Build, test, fuzz, formally verify, debug &amp;amp; deploy solidity contracts.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dapphub/dapptools/master/src/seth&#34;&gt;seth&lt;/a&gt; - Ethereum CLI. Query contracts, send transactions, follow logs, slice &amp;amp; dice data.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dapphub/dapptools/master/src/hevm&#34;&gt;hevm&lt;/a&gt; - Testing oriented EVM implementation. Debug, fuzz, or symbolically execute code against local or mainnet state.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dapphub/dapptools/master/src/ethsign&#34;&gt;ethsign&lt;/a&gt; - Sign Ethereum transactions from a local keystore or hardware wallet.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Development Status&lt;/h2&gt; &#xA;&lt;p&gt;dapptools is currently in a stage of clandestine development where support for the casual user may be deprived. The software can now be considered free as in free puppy. Users seeking guidance can explore using foundry as an alternative&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Install Nix if you haven&#39;t already (&lt;a href=&#34;https://nixos.org/download.html&#34;&gt;instructions&lt;/a&gt;). Then install dapptools:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;curl https://dapp.tools/install | sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This configures the dapphub binary cache and installs the &lt;code&gt;dapp&lt;/code&gt;, &lt;code&gt;solc&lt;/code&gt;, &lt;code&gt;seth&lt;/code&gt; and &lt;code&gt;hevm&lt;/code&gt; executables.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; Arm support in the GHC haskell compiler is still fairly bleeding edge, until this situation stabilises, users of M1 macs must run dapptools (and the installer!) under rosetta 2 (i.e. as an emulated x86 program). Make sure &lt;code&gt;/etc/nix/nix.conf&lt;/code&gt; contains &lt;code&gt;system = x86_64-darwin&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can also install an individual tool with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;nix-env -iA &amp;lt;tool&amp;gt; -f $(curl -sS https://api.github.com/repos/dapphub/dapptools/releases/latest | jq -r .tarball_url)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you instead want to build from &lt;code&gt;master&lt;/code&gt;, change the url to &lt;code&gt;https://github.com/dapphub/dapptools/archive/master.tar.gz&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Prebuilt hevm binary&lt;/h3&gt; &#xA;&lt;p&gt;Static binaries for linux and macos of hevm are available for each release at &lt;a href=&#34;https://github.com/dapphub/dapptools/releases&#34;&gt;https://github.com/dapphub/dapptools/releases&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Most functionality is available out of the box, but for symbolic execution you will need &lt;a href=&#34;https://github.com/ethereum/solidity&#34;&gt;&lt;code&gt;solc&lt;/code&gt;&lt;/a&gt; and (&lt;a href=&#34;https://github.com/Z3Prover/z3/&#34;&gt;&lt;code&gt;z3&lt;/code&gt;&lt;/a&gt; or &lt;a href=&#34;https://github.com/CVC4/CVC4&#34;&gt;&lt;code&gt;cvc4&lt;/code&gt;&lt;/a&gt; (or both)).&lt;/p&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;p&gt;For more information about the tools, consult the individual README pages:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dapphub/dapptools/master/src/seth/README.md&#34;&gt;seth&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dapphub/dapptools/master/src/dapp/README.md&#34;&gt;dapp&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dapphub/dapptools/master/src/hevm/README.md&#34;&gt;hevm&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dapphub/dapptools/master/src/ethsign/README.md&#34;&gt;ethsign&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;or use the &lt;code&gt;--help&lt;/code&gt; flag for any tool.&lt;/p&gt; &#xA;&lt;p&gt;We&#39;re also happy to answer any questions at &lt;a href=&#34;https://dapphub.chat/&#34;&gt;https://dapphub.chat/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;p&gt;Deploy a &#39;Hello World&#39; contract and call it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;export ETH_RPC_URL=https://mainnet.infura.io/v3/$YOUR_API_KEY&#xA;export ETH_FROM=$YOUR_ADDRESS&#xA;echo &#39;contract Hello { function hi() public pure returns(string memory) {return &#34;Hello, World!&#34;;}}&#39; | solc --bin -o . --overwrite -&#xA;HELLO=$(seth send --create $(&amp;lt;Hello.bin))&#xA;seth call $HELLO &#34;hi()(string)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Debug the first transaction of the latest block in the interactive debugger:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;export ETH_RPC_URL=https://mainnet.infura.io/v3/$YOUR_API_KEY&#xA;seth run-tx $(seth block latest transactions | jq .&#39;[0]&#39; -r) --debug&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If Vitalik&#39;s next transaction were a contract deployment, calculate the address it would be deployed at:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;export ETH_RPC_URL=https://mainnet.infura.io/v3/$YOUR_API_KEY&#xA;dapp address 0xab5801a7d398351b8be11c439e05c5b3259aec9b $(seth nonce 0xab5801a7d398351b8be11c439e05c5b3259aec9b)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Symbolically explore the possible execution paths of a call to &lt;code&gt;dai.transfer(address,uint)&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;seth bundle-source 0x6b175474e89094c44da98b954eedeac495271d0f &amp;gt; daisrc.json &amp;amp;&amp;amp; \&#xA;hevm symbolic --address 0x6b175474e89094c44da98b954eedeac495271d0f --rpc $ETH_RPC_URL  --debug --sig &#34;transfer(address,uint256)&#34; --json-file daisrc.json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Contributions are always welcome! You may be interested in the &lt;a href=&#34;https://raw.githubusercontent.com/dapphub/dapptools/master/ARCHITECTURE.md&#34;&gt;architecture&lt;/a&gt; of this repository.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://builtwithnix.org&#34;&gt;&lt;img src=&#34;https://builtwithnix.org/badge.svg?sanitize=true&#34; alt=&#34;built with nix&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>koalaman/shellcheck</title>
    <updated>2022-06-05T02:14:34Z</updated>
    <id>tag:github.com,2022-06-05:/koalaman/shellcheck</id>
    <link href="https://github.com/koalaman/shellcheck" rel="alternate"></link>
    <summary type="html">&lt;p&gt;ShellCheck, a static analysis tool for shell scripts&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/actions/workflows/build.yml&#34;&gt;&lt;img src=&#34;https://github.com/koalaman/shellcheck/actions/workflows/build.yml/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;ShellCheck - A shell script static analysis tool&lt;/h1&gt; &#xA;&lt;p&gt;ShellCheck is a GPLv3 tool that gives warnings and suggestions for bash/sh shell scripts:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/doc/terminal.png&#34; alt=&#34;Screenshot of a terminal showing problematic shell script lines highlighted&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The goals of ShellCheck are&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;To point out and clarify typical beginner&#39;s syntax issues that cause a shell to give cryptic error messages.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To point out and clarify typical intermediate level semantic problems that cause a shell to behave strangely and counter-intuitively.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To point out subtle caveats, corner cases and pitfalls that may cause an advanced user&#39;s otherwise working script to fail under future circumstances.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/README.md#user-content-gallery-of-bad-code&#34;&gt;the gallery of bad code&lt;/a&gt; for examples of what ShellCheck can help you identify!&lt;/p&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#how-to-use&#34;&gt;How to use&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#on-the-web&#34;&gt;On the web&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#from-your-terminal&#34;&gt;From your terminal&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#in-your-editor&#34;&gt;In your editor&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#in-your-build-or-test-suites&#34;&gt;In your build or test suites&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#installing&#34;&gt;Installing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#compiling-from-source&#34;&gt;Compiling from source&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#installing-cabal&#34;&gt;Installing Cabal&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#compiling-shellcheck&#34;&gt;Compiling ShellCheck&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#running-tests&#34;&gt;Running tests&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#gallery-of-bad-code&#34;&gt;Gallery of bad code&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#quoting&#34;&gt;Quoting&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#conditionals&#34;&gt;Conditionals&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#frequently-misused-commands&#34;&gt;Frequently misused commands&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#common-beginners-mistakes&#34;&gt;Common beginner&#39;s mistakes&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#style&#34;&gt;Style&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#data-and-typing-errors&#34;&gt;Data and typing errors&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#robustness&#34;&gt;Robustness&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#portability&#34;&gt;Portability&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#miscellaneous&#34;&gt;Miscellaneous&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#testimonials&#34;&gt;Testimonials&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#ignoring-issues&#34;&gt;Ignoring issues&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#reporting-bugs&#34;&gt;Reporting bugs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#copyright&#34;&gt;Copyright&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#other-resources&#34;&gt;Other Resources&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How to use&lt;/h2&gt; &#xA;&lt;p&gt;There are a number of ways to use ShellCheck!&lt;/p&gt; &#xA;&lt;h3&gt;On the web&lt;/h3&gt; &#xA;&lt;p&gt;Paste a shell script on &lt;a href=&#34;https://www.shellcheck.net&#34;&gt;https://www.shellcheck.net&lt;/a&gt; for instant feedback.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.shellcheck.net&#34;&gt;ShellCheck.net&lt;/a&gt; is always synchronized to the latest git commit, and is the easiest way to give ShellCheck a go. Tell your friends!&lt;/p&gt; &#xA;&lt;h3&gt;From your terminal&lt;/h3&gt; &#xA;&lt;p&gt;Run &lt;code&gt;shellcheck yourscript&lt;/code&gt; in your terminal for instant output, as seen above.&lt;/p&gt; &#xA;&lt;h3&gt;In your editor&lt;/h3&gt; &#xA;&lt;p&gt;You can see ShellCheck suggestions directly in a variety of editors.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Vim, through &lt;a href=&#34;https://github.com/w0rp/ale&#34;&gt;ALE&lt;/a&gt;, &lt;a href=&#34;https://github.com/neomake/neomake&#34;&gt;Neomake&lt;/a&gt;, or &lt;a href=&#34;https://github.com/scrooloose/syntastic&#34;&gt;Syntastic&lt;/a&gt;:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/doc/vim-syntastic.png&#34; alt=&#34;Screenshot of Vim showing inlined shellcheck feedback&#34;&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Emacs, through &lt;a href=&#34;https://github.com/flycheck/flycheck&#34;&gt;Flycheck&lt;/a&gt; or &lt;a href=&#34;https://github.com/federicotdn/flymake-shellcheck&#34;&gt;Flymake&lt;/a&gt;:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/doc/emacs-flycheck.png&#34; alt=&#34;Screenshot of emacs showing inlined shellcheck feedback&#34;&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Sublime, through &lt;a href=&#34;https://github.com/SublimeLinter/SublimeLinter-shellcheck&#34;&gt;SublimeLinter&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Atom, through &lt;a href=&#34;https://github.com/AtomLinter/linter-shellcheck&#34;&gt;Linter&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;VSCode, through &lt;a href=&#34;https://github.com/timonwong/vscode-shellcheck&#34;&gt;vscode-shellcheck&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Most other editors, through &lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/shellcheck.1.md#user-content-formats&#34;&gt;GCC error compatibility&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;In your build or test suites&lt;/h3&gt; &#xA;&lt;p&gt;While ShellCheck is mostly intended for interactive use, it can easily be added to builds or test suites. It makes canonical use of exit codes, so you can just add a &lt;code&gt;shellcheck&lt;/code&gt; command as part of the process.&lt;/p&gt; &#xA;&lt;p&gt;For example, in a Makefile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Makefile&#34;&gt;check-scripts:&#xA;    # Fail if any of these files have warnings&#xA;    shellcheck myscripts/*.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or in a Travis CI &lt;code&gt;.travis.yml&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;script:&#xA;  # Fail if any of these files have warnings&#xA;  - shellcheck myscripts/*.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Services and platforms that have ShellCheck pre-installed and ready to use:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://travis-ci.org/&#34;&gt;Travis CI&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.codacy.com/&#34;&gt;Codacy&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://codeclimate.com/&#34;&gt;Code Climate&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.codefactor.io/&#34;&gt;Code Factor&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://circleci.com&#34;&gt;CircleCI&lt;/a&gt; via the &lt;a href=&#34;https://circleci.com/orbs/registry/orb/circleci/shellcheck&#34;&gt;ShellCheck Orb&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/features/actions&#34;&gt;Github&lt;/a&gt; (only Linux)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Most other services, including &lt;a href=&#34;https://about.gitlab.com/&#34;&gt;GitLab&lt;/a&gt;, let you install ShellCheck yourself, either through the system&#39;s package manager (see &lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#installing&#34;&gt;Installing&lt;/a&gt;), or by downloading and unpacking a &lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#installing-a-pre-compiled-binary&#34;&gt;binary release&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s a good idea to manually install a specific ShellCheck version regardless. This avoids any surprise build breaks when a new version with new warnings is published.&lt;/p&gt; &#xA;&lt;p&gt;For customized filtering or reporting, ShellCheck can output simple JSON, CheckStyle compatible XML, GCC compatible warnings as well as human readable text (with or without ANSI colors). See the &lt;a href=&#34;https://github.com/koalaman/shellcheck/wiki/Integration&#34;&gt;Integration&lt;/a&gt; wiki page for more documentation.&lt;/p&gt; &#xA;&lt;h2&gt;Installing&lt;/h2&gt; &#xA;&lt;p&gt;The easiest way to install ShellCheck locally is through your package manager.&lt;/p&gt; &#xA;&lt;p&gt;On systems with Cabal (installs to &lt;code&gt;~/.cabal/bin&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cabal update&#xA;cabal install ShellCheck&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On systems with Stack (installs to &lt;code&gt;~/.local/bin&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;stack update&#xA;stack install ShellCheck&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On Debian based distros:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo apt install shellcheck&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On Arch Linux based distros:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pacman -S shellcheck&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or get the dependency free &lt;a href=&#34;https://aur.archlinux.org/packages/shellcheck-bin/&#34;&gt;shellcheck-bin&lt;/a&gt; from the AUR.&lt;/p&gt; &#xA;&lt;p&gt;On Gentoo based distros:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;emerge --ask shellcheck&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On EPEL based distros:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo yum -y install epel-release&#xA;sudo yum install ShellCheck&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On Fedora based distros:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;dnf install ShellCheck&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On FreeBSD:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pkg install hs-ShellCheck&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On macOS (OS X) with Homebrew:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;brew install shellcheck&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or with MacPorts:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo port install shellcheck&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On OpenBSD:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pkg_add shellcheck&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On openSUSE&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;zypper in ShellCheck&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or use OneClickInstall - &lt;a href=&#34;https://software.opensuse.org/package/ShellCheck&#34;&gt;https://software.opensuse.org/package/ShellCheck&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;On Solus:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;eopkg install shellcheck&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On Windows (via &lt;a href=&#34;https://chocolatey.org/packages/shellcheck&#34;&gt;chocolatey&lt;/a&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cmd&#34;&gt;C:\&amp;gt; choco install shellcheck&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or Windows (via &lt;a href=&#34;http://scoop.sh&#34;&gt;scoop&lt;/a&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cmd&#34;&gt;C:\&amp;gt; scoop install shellcheck&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;From &lt;a href=&#34;https://anaconda.org/conda-forge/shellcheck&#34;&gt;conda-forge&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;conda install -c conda-forge shellcheck&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;From Snap Store:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;snap install --channel=edge shellcheck&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;From Docker Hub:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker run --rm -v &#34;$PWD:/mnt&#34; koalaman/shellcheck:stable myscript&#xA;# Or :v0.4.7 for that version, or :latest for daily builds&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or use &lt;code&gt;koalaman/shellcheck-alpine&lt;/code&gt; if you want a larger Alpine Linux based image to extend. It works exactly like a regular Alpine image, but has shellcheck preinstalled.&lt;/p&gt; &#xA;&lt;p&gt;Using the &lt;a href=&#34;https://nixos.org/nix&#34;&gt;nix package manager&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;nix-env -iA nixpkgs.shellcheck&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, you can download pre-compiled binaries for the latest release here:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/releases/download/stable/shellcheck-stable.linux.x86_64.tar.xz&#34;&gt;Linux, x86_64&lt;/a&gt; (statically linked)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/releases/download/stable/shellcheck-stable.linux.armv6hf.tar.xz&#34;&gt;Linux, armv6hf&lt;/a&gt;, i.e. Raspberry Pi (statically linked)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/releases/download/stable/shellcheck-stable.linux.aarch64.tar.xz&#34;&gt;Linux, aarch64&lt;/a&gt; aka ARM64 (statically linked)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/releases/download/stable/shellcheck-stable.darwin.x86_64.tar.xz&#34;&gt;macOS, x86_64&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/releases/download/stable/shellcheck-stable.zip&#34;&gt;Windows, x86&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;or see the &lt;a href=&#34;https://github.com/koalaman/shellcheck/releases&#34;&gt;GitHub Releases&lt;/a&gt; for other releases (including the &lt;a href=&#34;https://github.com/koalaman/shellcheck/releases/tag/latest&#34;&gt;latest&lt;/a&gt; meta-release for daily git builds).&lt;/p&gt; &#xA;&lt;p&gt;Distro packages already come with a &lt;code&gt;man&lt;/code&gt; page. If you are building from source, it can be installed with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;pandoc -s -f markdown-smart -t man shellcheck.1.md -o shellcheck.1&#xA;sudo mv shellcheck.1 /usr/share/man/man1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;pre-commit&lt;/h3&gt; &#xA;&lt;p&gt;To run ShellCheck via &lt;a href=&#34;https://pre-commit.com/&#34;&gt;pre-commit&lt;/a&gt;, add the hook to your &lt;code&gt;.pre-commit-config.yaml&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;repos:&#xA;-   repo: https://github.com/koalaman/shellcheck-precommit&#xA;    rev: v0.7.2&#xA;    hooks:&#xA;    -   id: shellcheck&#xA;#       args: [&#34;--severity=warning&#34;]  # Optionally only show errors and warnings&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Travis CI&lt;/h3&gt; &#xA;&lt;p&gt;Travis CI has now integrated ShellCheck by default, so you don&#39;t need to manually install it.&lt;/p&gt; &#xA;&lt;p&gt;If you still want to do so in order to upgrade at your leisure or ensure you&#39;re using the latest release, follow the steps below to install a binary version.&lt;/p&gt; &#xA;&lt;h3&gt;Installing a pre-compiled binary&lt;/h3&gt; &#xA;&lt;p&gt;The pre-compiled binaries come in &lt;code&gt;tar.xz&lt;/code&gt; files. To decompress them, make sure &lt;code&gt;xz&lt;/code&gt; is installed. On Debian/Ubuntu/Mint, you can &lt;code&gt;apt install xz-utils&lt;/code&gt;. On Redhat/Fedora/CentOS, &lt;code&gt;yum -y install xz&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;A simple installer may do something like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;scversion=&#34;stable&#34; # or &#34;v0.4.7&#34;, or &#34;latest&#34;&#xA;wget -qO- &#34;https://github.com/koalaman/shellcheck/releases/download/${scversion?}/shellcheck-${scversion?}.linux.x86_64.tar.xz&#34; | tar -xJv&#xA;cp &#34;shellcheck-${scversion}/shellcheck&#34; /usr/bin/&#xA;shellcheck --version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Compiling from source&lt;/h2&gt; &#xA;&lt;p&gt;This section describes how to build ShellCheck from a source directory. ShellCheck is written in Haskell and requires 2GB of RAM to compile.&lt;/p&gt; &#xA;&lt;h3&gt;Installing Cabal&lt;/h3&gt; &#xA;&lt;p&gt;ShellCheck is built and packaged using Cabal. Install the package &lt;code&gt;cabal-install&lt;/code&gt; from your system&#39;s package manager (with e.g. &lt;code&gt;apt-get&lt;/code&gt;, &lt;code&gt;brew&lt;/code&gt;, &lt;code&gt;emerge&lt;/code&gt;, &lt;code&gt;yum&lt;/code&gt;, or &lt;code&gt;zypper&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;On macOS (OS X), you can do a fast install of Cabal using brew, which takes a couple of minutes instead of more than 30 minutes if you try to compile it from source.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ brew install cabal-install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On MacPorts, the package is instead called &lt;code&gt;hs-cabal-install&lt;/code&gt;, while native Windows users should install the latest version of the Haskell platform from &lt;a href=&#34;https://www.haskell.org/platform/&#34;&gt;https://www.haskell.org/platform/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Verify that &lt;code&gt;cabal&lt;/code&gt; is installed and update its dependency list with&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cabal update&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Compiling ShellCheck&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;git clone&lt;/code&gt; this repository, and &lt;code&gt;cd&lt;/code&gt; to the ShellCheck source directory to build/install:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cabal install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or if you intend to run the tests:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cabal install --enable-tests&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will compile ShellCheck and install it to your &lt;code&gt;~/.cabal/bin&lt;/code&gt; directory.&lt;/p&gt; &#xA;&lt;p&gt;Add this directory to your &lt;code&gt;PATH&lt;/code&gt; (for bash, add this to your &lt;code&gt;~/.bashrc&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;export PATH=&#34;$HOME/.cabal/bin:$PATH&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Log out and in again, and verify that your PATH is set up correctly:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ which shellcheck&#xA;~/.cabal/bin/shellcheck&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On native Windows, the &lt;code&gt;PATH&lt;/code&gt; should already be set up, but the system may use a legacy codepage. In &lt;code&gt;cmd.exe&lt;/code&gt;, &lt;code&gt;powershell.exe&lt;/code&gt; and Powershell ISE, make sure to use a TrueType font, not a Raster font, and set the active codepage to UTF-8 (65001) with &lt;code&gt;chcp&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cmd&#34;&gt;chcp 65001&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In Powershell ISE, you may need to additionally update the output encoding:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;[Console]::OutputEncoding = [System.Text.Encoding]::UTF8&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Running tests&lt;/h3&gt; &#xA;&lt;p&gt;To run the unit test suite:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cabal test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Gallery of bad code&lt;/h2&gt; &#xA;&lt;p&gt;So what kind of things does ShellCheck look for? Here is an incomplete list of detected issues.&lt;/p&gt; &#xA;&lt;h3&gt;Quoting&lt;/h3&gt; &#xA;&lt;p&gt;ShellCheck can recognize several types of incorrect quoting:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;echo $1                           # Unquoted variables&#xA;find . -name *.ogg                # Unquoted find/grep patterns&#xA;rm &#34;~/my file.txt&#34;                # Quoted tilde expansion&#xA;v=&#39;--verbose=&#34;true&#34;&#39;; cmd $v      # Literal quotes in variables&#xA;for f in &#34;*.ogg&#34;                  # Incorrectly quoted &#39;for&#39; loops&#xA;touch $@                          # Unquoted $@&#xA;echo &#39;Don&#39;t forget to restart!&#39;   # Singlequote closed by apostrophe&#xA;echo &#39;Don\&#39;t try this at home&#39;    # Attempting to escape &#39; in &#39;&#39;&#xA;echo &#39;Path is $PATH&#39;              # Variables in single quotes&#xA;trap &#34;echo Took ${SECONDS}s&#34; 0    # Prematurely expanded trap&#xA;unset var[i]                      # Array index treated as glob&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Conditionals&lt;/h3&gt; &#xA;&lt;p&gt;ShellCheck can recognize many types of incorrect test statements.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;[[ n != 0 ]]                      # Constant test expressions&#xA;[[ -e *.mpg ]]                    # Existence checks of globs&#xA;[[ $foo==0 ]]                     # Always true due to missing spaces&#xA;[[ -n &#34;$foo &#34; ]]                  # Always true due to literals&#xA;[[ $foo =~ &#34;fo+&#34; ]]               # Quoted regex in =~&#xA;[ foo =~ re ]                     # Unsupported [ ] operators&#xA;[ $1 -eq &#34;shellcheck&#34; ]           # Numerical comparison of strings&#xA;[ $n &amp;amp;&amp;amp; $m ]                      # &amp;amp;&amp;amp; in [ .. ]&#xA;[ grep -q foo file ]              # Command without $(..)&#xA;[[ &#34;$$file&#34; == *.jpg ]]           # Comparisons that can&#39;t succeed&#xA;(( 1 -lt 2 ))                     # Using test operators in ((..))&#xA;[ x ] &amp;amp; [ y ] | [ z ]             # Accidental backgrounding and piping&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Frequently misused commands&lt;/h3&gt; &#xA;&lt;p&gt;ShellCheck can recognize instances where commands are used incorrectly:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;grep &#39;*foo*&#39; file                 # Globs in regex contexts&#xA;find . -exec foo {} &amp;amp;&amp;amp; bar {} \;  # Prematurely terminated find -exec&#xA;sudo echo &#39;Var=42&#39; &amp;gt; /etc/profile # Redirecting sudo&#xA;time --format=%s sleep 10         # Passing time(1) flags to time builtin&#xA;while read h; do ssh &#34;$h&#34; uptime  # Commands eating while loop input&#xA;alias archive=&#39;mv $1 /backup&#39;     # Defining aliases with arguments&#xA;tr -cd &#39;[a-zA-Z0-9]&#39;              # [] around ranges in tr&#xA;exec foo; echo &#34;Done!&#34;            # Misused &#39;exec&#39;&#xA;find -name \*.bak -o -name \*~ -delete  # Implicit precedence in find&#xA;# find . -exec foo &amp;gt; bar \;       # Redirections in find&#xA;f() { whoami; }; sudo f           # External use of internal functions&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Common beginner&#39;s mistakes&lt;/h3&gt; &#xA;&lt;p&gt;ShellCheck recognizes many common beginner&#39;s syntax errors:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;var = 42                          # Spaces around = in assignments&#xA;$foo=42                           # $ in assignments&#xA;for $var in *; do ...             # $ in for loop variables&#xA;var$n=&#34;Hello&#34;                     # Wrong indirect assignment&#xA;echo ${var$n}                     # Wrong indirect reference&#xA;var=(1, 2, 3)                     # Comma separated arrays&#xA;array=( [index] = value )         # Incorrect index initialization&#xA;echo $var[14]                     # Missing {} in array references&#xA;echo &#34;Argument 10 is $10&#34;         # Positional parameter misreference&#xA;if $(myfunction); then ..; fi     # Wrapping commands in $()&#xA;else if othercondition; then ..   # Using &#39;else if&#39;&#xA;f; f() { echo &#34;hello world; }     # Using function before definition&#xA;[ false ]                         # &#39;false&#39; being true&#xA;if ( -f file )                    # Using (..) instead of test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Style&lt;/h3&gt; &#xA;&lt;p&gt;ShellCheck can make suggestions to improve style:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;[[ -z $(find /tmp | grep mpg) ]]  # Use grep -q instead&#xA;a &amp;gt;&amp;gt; log; b &amp;gt;&amp;gt; log; c &amp;gt;&amp;gt; log      # Use a redirection block instead&#xA;echo &#34;The time is `date`&#34;         # Use $() instead&#xA;cd dir; process *; cd ..;         # Use subshells instead&#xA;echo $[1+2]                       # Use standard $((..)) instead of old $[]&#xA;echo $(($RANDOM % 6))             # Don&#39;t use $ on variables in $((..))&#xA;echo &#34;$(date)&#34;                    # Useless use of echo&#xA;cat file | grep foo               # Useless use of cat&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Data and typing errors&lt;/h3&gt; &#xA;&lt;p&gt;ShellCheck can recognize issues related to data and typing:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;args=&#34;$@&#34;                         # Assigning arrays to strings&#xA;files=(foo bar); echo &#34;$files&#34;    # Referencing arrays as strings&#xA;declare -A arr=(foo bar)          # Associative arrays without index&#xA;printf &#34;%s\n&#34; &#34;Arguments: $@.&#34;    # Concatenating strings and arrays&#xA;[[ $# &amp;gt; 2 ]]                      # Comparing numbers as strings&#xA;var=World; echo &#34;Hello &#34; var      # Unused lowercase variables&#xA;echo &#34;Hello $name&#34;                # Unassigned lowercase variables&#xA;cmd | read bar; echo $bar         # Assignments in subshells&#xA;cat foo | cp bar                  # Piping to commands that don&#39;t read&#xA;printf &#39;%s: %s\n&#39; foo             # Mismatches in printf argument count&#xA;eval &#34;${array[@]}&#34;                # Lost word boundaries in array eval&#xA;for i in &#34;${x[@]}&#34;; do ${x[$i]}   # Using array value as key&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Robustness&lt;/h3&gt; &#xA;&lt;p&gt;ShellCheck can make suggestions for improving the robustness of a script:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;rm -rf &#34;$STEAMROOT/&#34;*            # Catastrophic rm&#xA;touch ./-l; ls *                 # Globs that could become options&#xA;find . -exec sh -c &#39;a &amp;amp;&amp;amp; b {}&#39; \; # Find -exec shell injection&#xA;printf &#34;Hello $name&#34;             # Variables in printf format&#xA;for f in $(ls *.txt); do         # Iterating over ls output&#xA;export MYVAR=$(cmd)              # Masked exit codes&#xA;case $version in 2.*) :;; 2.6.*) # Shadowed case branches&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Portability&lt;/h3&gt; &#xA;&lt;p&gt;ShellCheck will warn when using features not supported by the shebang. For example, if you set the shebang to &lt;code&gt;#!/bin/sh&lt;/code&gt;, ShellCheck will warn about portability issues similar to &lt;code&gt;checkbashisms&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;echo {1..$n}                     # Works in ksh, but not bash/dash/sh&#xA;echo {1..10}                     # Works in ksh and bash, but not dash/sh&#xA;echo -n 42                       # Works in ksh, bash and dash, undefined in sh&#xA;expr match str regex             # Unportable alias for `expr str : regex`&#xA;trap &#39;exit 42&#39; sigint            # Unportable signal spec&#xA;cmd &amp;amp;&amp;gt; file                      # Unportable redirection operator&#xA;read foo &amp;lt; /dev/tcp/host/22      # Unportable intercepted files&#xA;foo-bar() { ..; }                # Undefined/unsupported function name&#xA;[ $UID = 0 ]                     # Variable undefined in dash/sh&#xA;local var=value                  # local is undefined in sh&#xA;time sleep 1 | sleep 5           # Undefined uses of &#39;time&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Miscellaneous&lt;/h3&gt; &#xA;&lt;p&gt;ShellCheck recognizes a menagerie of other issues:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;PS1=&#39;\e[0;32m\$\e[0m &#39;            # PS1 colors not in \[..\]&#xA;PATH=&#34;$PATH:~/bin&#34;                # Literal tilde in $PATH&#xA;rm “file”                         # Unicode quotes&#xA;echo &#34;Hello world&#34;                # Carriage return / DOS line endings&#xA;echo hello \                      # Trailing spaces after \&#xA;var=42 echo $var                  # Expansion of inlined environment&#xA;!# bin/bash -x -e                 # Common shebang errors&#xA;echo $((n/180*100))               # Unnecessary loss of precision&#xA;ls *[:digit:].txt                 # Bad character class globs&#xA;sed &#39;s/foo/bar/&#39; file &amp;gt; file      # Redirecting to input&#xA;var2=$var2                        # Variable assigned to itself&#xA;[ x$var = xval ]                  # Antiquated x-comparisons&#xA;ls() { ls -l &#34;$@&#34;; }              # Infinitely recursive wrapper&#xA;alias ls=&#39;ls -l&#39;; ls foo          # Alias used before it takes effect&#xA;for x; do for x; do               # Nested loop uses same variable&#xA;while getopts &#34;a&#34; f; do case $f in &#34;b&#34;) # Unhandled getopts flags&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Testimonials&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;At first you&#39;re like &#34;shellcheck is awesome&#34; but then you&#39;re like &#34;wtf are we still using bash&#34;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Alexander Tarasikov, &lt;a href=&#34;https://twitter.com/astarasikov/status/568825996532707330&#34;&gt;via Twitter&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Ignoring issues&lt;/h2&gt; &#xA;&lt;p&gt;Issues can be ignored via environmental variable, command line, individually or globally within a file:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/wiki/Ignore&#34;&gt;https://github.com/koalaman/shellcheck/wiki/Ignore&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Reporting bugs&lt;/h2&gt; &#xA;&lt;p&gt;Please use the GitHub issue tracker for any bugs or feature suggestions:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/issues&#34;&gt;https://github.com/koalaman/shellcheck/issues&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Please submit patches to code or documentation as GitHub pull requests! Check out the &lt;a href=&#34;https://github.com/koalaman/shellcheck/wiki/DevGuide&#34;&gt;DevGuide&lt;/a&gt; on the ShellCheck Wiki.&lt;/p&gt; &#xA;&lt;p&gt;Contributions must be licensed under the GNU GPLv3. The contributor retains the copyright.&lt;/p&gt; &#xA;&lt;h2&gt;Copyright&lt;/h2&gt; &#xA;&lt;p&gt;ShellCheck is licensed under the GNU General Public License, v3. A copy of this license is included in the file &lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/LICENSE&#34;&gt;LICENSE&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Copyright 2012-2019, &lt;a href=&#34;https://github.com/koalaman/&#34;&gt;Vidar &#39;koala_man&#39; Holen&lt;/a&gt; and contributors.&lt;/p&gt; &#xA;&lt;p&gt;Happy ShellChecking!&lt;/p&gt; &#xA;&lt;h2&gt;Other Resources&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The wiki has &lt;a href=&#34;https://github.com/koalaman/shellcheck/wiki/Checks&#34;&gt;long form descriptions&lt;/a&gt; for each warning, e.g. &lt;a href=&#34;https://github.com/koalaman/shellcheck/wiki/SC2221&#34;&gt;SC2221&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;ShellCheck does not attempt to enforce any kind of formatting or indenting style, so also check out &lt;a href=&#34;https://github.com/mvdan/sh&#34;&gt;shfmt&lt;/a&gt;!&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>