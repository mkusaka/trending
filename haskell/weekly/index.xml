<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Haskell Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-10-15T01:46:23Z</updated>
  <subtitle>Weekly Trending of Haskell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>IntersectMBO/cardano-addresses</title>
    <updated>2023-10-15T01:46:23Z</updated>
    <id>tag:github.com,2023-10-15:/IntersectMBO/cardano-addresses</id>
    <link href="https://github.com/IntersectMBO/cardano-addresses" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Addresses and mnemonic manipulation &amp; derivations&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;big&gt;&lt;strong&gt;Cardano Addresses&lt;/strong&gt;&lt;/big&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/IntersectMBO/cardano-addresses/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/IntersectMBO/cardano-addresses?color=%239b59b6&amp;amp;label=RELEASE&amp;amp;sort=semver&amp;amp;style=for-the-badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.npmjs.com/package/cardano-addresses&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/v/cardano-addresses?color=%239b59b6&amp;amp;style=for-the-badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://IntersectMBO.github.io/cardano-addresses/coverage/hpc_index.html&#34;&gt;&lt;img src=&#34;https://IntersectMBO.github.io/cardano-addresses/coverage/badge.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;br&gt; &lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt;&lt;a href=&#34;&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://github.com/IntersectMBO/cardano-addresses/actions/workflows/style.yml&#34;&gt;&lt;img src=&#34;https://github.com/IntersectMBO/cardano-addresses/actions/workflows/style.yml/badge.svg?branch=master&#34; alt=&#34;Coding Standards&#34;&gt;&lt;/a&gt; &lt;a href=&#34;&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://github.com/IntersectMBO/cardano-addresses/actions/workflows/haskell.yml&#34;&gt;&lt;img src=&#34;https://github.com/IntersectMBO/cardano-addresses/actions/workflows/haskell.yml/badge.svg?sanitize=true&#34; alt=&#34;Haskell CI using Cabal&#34;&gt;&lt;/a&gt; &lt;a href=&#34;&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://github.com/IntersectMBO/cardano-addresses/actions/workflows/main.yml&#34;&gt;&lt;img src=&#34;https://github.com/IntersectMBO/cardano-addresses/actions/workflows/main.yml/badge.svg?sanitize=true&#34; alt=&#34;Haskell CI using stack for Linux&#34;&gt;&lt;/a&gt; &lt;a href=&#34;&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://github.com/IntersectMBO/cardano-addresses/actions/workflows/typescript.yml&#34;&gt;&lt;img src=&#34;https://github.com/IntersectMBO/cardano-addresses/actions/workflows/typescript.yml/badge.svg?sanitize=true&#34; alt=&#34;TypeScript NPM Package&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;This module provides mnemonic (backup phrase) creation, and conversion of a mnemonic to seed for wallet restoration, and address derivation functionalities.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/IntersectMBO/cardano-addresses/master/.github/example.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;API documentation is available &lt;a href=&#34;https://IntersectMBO.github.io/cardano-addresses/haddock&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Command-Line&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;cardano-address&lt;/code&gt; comes with a command-line interface for Linux. See the &lt;a href=&#34;https://github.com/IntersectMBO/cardano-addresses/releases&#34;&gt;release artifacts&lt;/a&gt; or &lt;a href=&#34;https://github.com/IntersectMBO/cardano-addresses/actions?query=workflow%3A%22Continuous+Integration%22&#34;&gt;continuous integration artifacts&lt;/a&gt; to get a pre-compiled binary, or &lt;a href=&#34;https://raw.githubusercontent.com/IntersectMBO/cardano-addresses/master/#docker-image&#34;&gt;build a Docker image&lt;/a&gt;. The command-line is self explanatory by using &lt;code&gt;--help&lt;/code&gt; on various commands and sub-commands.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span&gt;💡&lt;/span&gt; Most commands read argument from the standard input. This prevent sensitive information from appearing into your shell history and, makes it easy to pipe commands!&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;How to generate a recovery phrase (&lt;strong&gt;phrase.prv&lt;/strong&gt;)&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ cardano-address recovery-phrase generate --size 15 &amp;gt; phrase.prv&#xA;exercise club noble adult miracle awkward problem olympic puppy private goddess piano fatal fashion vacuum&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;How to generate a root private key (&lt;strong&gt;root.xsk&lt;/strong&gt;)&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ cardano-address key from-recovery-phrase Shelley &amp;lt; phrase.prv &amp;gt; root.xsk&#xA;root_xsk1hqzfzrgskgnpwskxxrv5khs7ess82ecy8za9l5ef7e0afd2849p3zryje8chk39nxtva0sww5me3pzkej4rvd5cae3q3v8eu7556n6pdrp4fdu8nsglynpmcppxxvfdyzdz5gfq3fefjepxhvqspmuyvmvqg8983&#xA;&#xA;-- which is equivalent to empty passphrase&#xA;$ cardano-address key from-recovery-phrase Shelley --passphrase from-hex&#xA;Please enter a [9, 12, 15, 18, 21, 24] word mnemonic:&#xA;exercise club noble adult miracle awkward problem olympic puppy private goddess piano fatal fashion vacuum&#xA;Please enter hex-encoded passphrase:&#xA;&#xA;root_xsk1hqzfzrgskgnpwskxxrv5khs7ess82ecy8za9l5ef7e0afd2849p3zryje8chk39nxtva0sww5me3pzkej4rvd5cae3q3v8eu7556n6pdrp4fdu8nsglynpmcppxxvfdyzdz5gfq3fefjepxhvqspmuyvmvqg8983&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;blockquote&gt; &#xA;  &lt;p&gt;&lt;span&gt;ℹ&lt;/span&gt; Notice the &lt;code&gt;root_xsk&lt;/code&gt; prefix to identify a root extended signing (private) key.&lt;/p&gt; &#xA; &lt;/blockquote&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;How to generate a root private key with passphrase (&lt;strong&gt;root.xsk&lt;/strong&gt;)&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ cardano-address recovery-phrase generate --size 9 &amp;gt; sndfactor.prv&#xA;swing payment diagram happy chimney mammal flip become lyrics&#xA;&#xA;$ cardano-address key from-recovery-phrase Shelley --passphrase from-mnemonic&#xA;Please enter a [9, 12, 15, 18, 21, 24] word mnemonic:&#xA;exercise club noble adult miracle awkward problem olympic puppy private goddess piano fatal fashion vacuum&#xA;Please enter a 9–12 word second factor:&#xA;swing payment diagram happy chimney mammal flip become lyrics&#xA;root_xsk1jqx0xpke7de69ceyk20tdl9rq7nsava7cfnyeu42yqum8usnpppwmsxn2qsfj0nn2ur2kuq0kmrll67ryvkdhd6pgpsls6s6qx7hlyv6uqt0907t73eflkpw3xz45lcg5fsh6dunfk56j08jslh6x6rttspfny8c&#xA;&#xA; cardano-address key from-recovery-phrase Shelley --passphrase from-mnemonic --sensitive&#xA;Please enter a [9, 12, 15, 18, 21, 24] word mnemonic:&#xA;**********************************************************************************************************&#xA;Please enter a 9–12 word second factor:&#xA;*************************************************************&#xA;root_xsk1jqx0xpke7de69ceyk20tdl9rq7nsava7cfnyeu42yqum8usnpppwmsxn2qsfj0nn2ur2kuq0kmrll67ryvkdhd6pgpsls6s6qx7hlyv6uqt0907t73eflkpw3xz45lcg5fsh6dunfk56j08jslh6x6rttspfny8c&#xA;&#xA;$ cardano-address key from-recovery-phrase Shelley --passphrase from-mnemonic --silent&#xA;Please enter a [9, 12, 15, 18, 21, 24] word mnemonic:&#xA;&#xA;Please enter a 9–12 word second factor:&#xA;&#xA;root_xsk1jqx0xpke7de69ceyk20tdl9rq7nsava7cfnyeu42yqum8usnpppwmsxn2qsfj0nn2ur2kuq0kmrll67ryvkdhd6pgpsls6s6qx7hlyv6uqt0907t73eflkpw3xz45lcg5fsh6dunfk56j08jslh6x6rttspfny8c&#xA;&#xA;$ cardano-address key from-recovery-phrase Shelley --passphrase from-mnemonic --from-file &#34;./sndfactor.prv&#34; &amp;lt; phrase.prv&#xA;root_xsk1jqx0xpke7de69ceyk20tdl9rq7nsava7cfnyeu42yqum8usnpppwmsxn2qsfj0nn2ur2kuq0kmrll67ryvkdhd6pgpsls6s6qx7hlyv6uqt0907t73eflkpw3xz45lcg5fsh6dunfk56j08jslh6x6rttspfny8c&#xA;&#xA;$ cardano-address key from-recovery-phrase Shelley --passphrase from-hex&#xA;Please enter a [9, 12, 15, 18, 21, 24] word mnemonic:&#xA;exercise club noble adult miracle awkward problem olympic puppy private goddess piano fatal fashion vacuum&#xA;Please enter hex-encoded passphrase:&#xA;dc1434f3b472810d56409f85&#xA;root_xsk1jqx0xpke7de69ceyk20tdl9rq7nsava7cfnyeu42yqum8usnpppwmsxn2qsfj0nn2ur2kuq0kmrll67ryvkdhd6pgpsls6s6qx7hlyv6uqt0907t73eflkpw3xz45lcg5fsh6dunfk56j08jslh6x6rttspfny8c&#xA;&#xA;$ echo &#34;dc1434f3b472810d56409f85&#34; &amp;gt; base16.prv&#xA;$ cardano-address key from-recovery-phrase Shelley --passphrase from-hex --from-file &#34;./base16.prv&#34; &amp;lt; phrase.prv&#xA;root_xsk1jqx0xpke7de69ceyk20tdl9rq7nsava7cfnyeu42yqum8usnpppwmsxn2qsfj0nn2ur2kuq0kmrll67ryvkdhd6pgpsls6s6qx7hlyv6uqt0907t73eflkpw3xz45lcg5fsh6dunfk56j08jslh6x6rttspfny8c&#xA;&#xA;$ cardano-address key from-recovery-phrase Shelley --passphrase from-base64&#xA;Please enter a [9, 12, 15, 18, 21, 24] word mnemonic:&#xA;exercise club noble adult miracle awkward problem olympic puppy private goddess piano fatal fashion vacuum&#xA;Please enter base64-encoded passphrase:&#xA;3BQ087RygQ1WQJ+F&#xA;root_xsk1jqx0xpke7de69ceyk20tdl9rq7nsava7cfnyeu42yqum8usnpppwmsxn2qsfj0nn2ur2kuq0kmrll67ryvkdhd6pgpsls6s6qx7hlyv6uqt0907t73eflkpw3xz45lcg5fsh6dunfk56j08jslh6x6rttspfny8c&#xA;&#xA;$ echo &#34;3BQ087RygQ1WQJ+F&#34; &amp;gt; base64.prv&#xA;[pawel@arch testingCardanoAddresses]$ cardano-address key from-recovery-phrase Shelley --passphrase from-base64 --from-file &#34;./base64.prv&#34; &amp;lt; phrase.prv&#xA;root_xsk1jqx0xpke7de69ceyk20tdl9rq7nsava7cfnyeu42yqum8usnpppwmsxn2qsfj0nn2ur2kuq0kmrll67ryvkdhd6pgpsls6s6qx7hlyv6uqt0907t73eflkpw3xz45lcg5fsh6dunfk56j08jslh6x6rttspfny8c&#xA;&#xA;$ cardano-address key from-recovery-phrase Shelley --passphrase from-octets&#xA;Please enter a [9, 12, 15, 18, 21, 24] word mnemonic:&#xA;exercise club noble adult miracle awkward problem olympic puppy private goddess piano fatal fashion vacuum&#xA;Please enter passphrase in the form of octet array:&#xA;[220,20,52,243,180,114,129,13,86,64,159,133]&#xA;root_xsk1jqx0xpke7de69ceyk20tdl9rq7nsava7cfnyeu42yqum8usnpppwmsxn2qsfj0nn2ur2kuq0kmrll67ryvkdhd6pgpsls6s6qx7hlyv6uqt0907t73eflkpw3xz45lcg5fsh6dunfk56j08jslh6x6rttspfny8c&#xA;&#xA;$ echo &#34;[220,20,52,243,180,114,129,13,86,64,159,133]&#34; &amp;gt; octets.prv&#xA;$ cardano-address key from-recovery-phrase Shelley --passphrase from-octets --from-file &#34;./octets.prv&#34; &amp;lt; phrase.prv&#xA;root_xsk1jqx0xpke7de69ceyk20tdl9rq7nsava7cfnyeu42yqum8usnpppwmsxn2qsfj0nn2ur2kuq0kmrll67ryvkdhd6pgpsls6s6qx7hlyv6uqt0907t73eflkpw3xz45lcg5fsh6dunfk56j08jslh6x6rttspfny8c&#xA;&#xA;$ cardano-address key from-recovery-phrase Shelley --passphrase from-utf8&#xA;Please enter a [9, 12, 15, 18, 21, 24] word mnemonic:&#xA;exercise club noble adult miracle awkward problem olympic puppy private goddess piano fatal fashion vacuum&#xA;Please enter utf8-encoded passphrase:&#xA;my secret passphrase&#xA;root_xsk1aq5jduvnx7s6a4wl845jggvnhey5agqjv55dsexsx43np59pse0u4yfxpdfecz9h95jwecduqpt7zlk97j9mprmvjcfeyrcu9nyagpjq6k5cxpnwve5pj3cu24m9my94xtrqvzrlmu0893guffzazyk95cvprwzp&#xA;&#xA;$ cardano-address key from-recovery-phrase Shelley --passphrase &#34;&#34;&#xA;Please enter a [9, 12, 15, 18, 21, 24] word mnemonic:&#xA;exercise club noble adult miracle awkward problem olympic puppy private goddess piano fatal fashion vacuum&#xA;Please enter utf8-encoded passphrase:&#xA;my secret passphrase&#xA;root_xsk1aq5jduvnx7s6a4wl845jggvnhey5agqjv55dsexsx43np59pse0u4yfxpdfecz9h95jwecduqpt7zlk97j9mprmvjcfeyrcu9nyagpjq6k5cxpnwve5pj3cu24m9my94xtrqvzrlmu0893guffzazyk95cvprwzp&#xA;&#xA;$ echo &#34;my secret passphrase&#34; &amp;gt; utf8.prv&#xA;$ cardano-address key from-recovery-phrase Shelley --passphrase from-utf8 --from-file &#34;./utf8.prv&#34; &amp;lt; phrase.prv&#xA;root_xsk1aq5jduvnx7s6a4wl845jggvnhey5agqjv55dsexsx43np59pse0u4yfxpdfecz9h95jwecduqpt7zlk97j9mprmvjcfeyrcu9nyagpjq6k5cxpnwve5pj3cu24m9my94xtrqvzrlmu0893guffzazyk95cvprwzp&#xA;&#xA;-- NOTE:&#xA;--λ&amp;gt; let (Right m) = mkSomeMnemonic @&#39;[ 9 ] [&#34;swing&#34;, &#34;payment&#34;, &#34;diagram&#34;, &#34;happy&#34;, &#34;chimney&#34;, &#34;mammal&#34;, &#34;flip&#34;, &#34;become&#34;, &#34;lyrics&#34;]&#xA;--λ&amp;gt; m&#xA;--SomeMnemonic (Mnemonic {mnemonicToEntropy = Entropy {entropyRaw = &#34;\220\DC44\243\180r\129\rV@\159\133&#34;, entropyChecksum = Checksum 3}, mnemonicToSentence = MnemonicSentence {mnemonicSentenceToListN = [WordIndex {unWordIndex = Offset 1760},WordIndex {unWordIndex = Offset 1293},WordIndex {unWordIndex = Offset 487},WordIndex {unWordIndex = Offset 839},WordIndex {unWordIndex = Offset 320},WordIndex {unWordIndex = Offset 1077},WordIndex {unWordIndex = Offset 712},WordIndex {unWordIndex = Offset 159},WordIndex {unWordIndex = Offset 1067}]}})&#xA;--λ&amp;gt; let bytes = BA.convert $ someMnemonicToBytes m :: ByteString&#xA;--λ&amp;gt; bytes&#xA;--&#34;\220\DC44\243\180r\129\rV@\159\133&#34;&#xA;--λ&amp;gt; encode EBase16 bytes&#xA;--&#34;dc1434f3b472810d56409f85&#34;&#xA;--λ&amp;gt; decodeUtf8 $ convertToBase Base64 bytes&#xA;-- &#34;3BQ087RygQ1WQJ+F&#34;&#xA;--λ&amp;gt; BS.unpack bytes&#xA;-- [220,20,52,243,180,114,129,13,86,64,159,133]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;blockquote&gt; &#xA;  &lt;p&gt;&lt;span&gt;ℹ&lt;/span&gt; Notice the &lt;code&gt;root_xsk&lt;/code&gt; prefix to identify a root extended signing (private) key.&lt;/p&gt; &#xA; &lt;/blockquote&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;How to generate a wallet id based on extended root or account keys (&lt;strong&gt;phrase.prv&lt;/strong&gt;)&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ cat root.xsk&#xA;root_xsk1hqzfzrgskgnpwskxxrv5khs7ess82ecy8za9l5ef7e0afd2849p3zryje8chk39nxtva0sww5me3pzkej4rvd5cae3q3v8eu7556n6pdrp4fdu8nsglynpmcppxxvfdyzdz5gfq3fefjepxhvqspmuyvmvqg8983&#xA;$ cardano-address key walletid &amp;lt; root.xsk&#xA;163ea20ad0611e4815a61c44bb32c82a81538999&#xA;&#xA;$ cardano-address key public --with-chain-code &amp;lt; root.xsk | cardano-address key walletid&#xA;163ea20ad0611e4815a61c44bb32c82a81538999&#xA;&#xA;$ cardano-address key child 1852H/1815H/0H &amp;lt; root.xsk &amp;gt; acct.xsk&#xA;$ cat acct.xsk&#xA;acct_xsk15ztha8ws7qjze5vmdkwqh0ddzvtlgstkg79swazhc5lxns2849plr3msjx082mcmd9hc24ujczk2cjnjwrcz4tjaucw9jqf8h5yc7d84rac0zdckkuhazpam0kleg4sq52ph3e0wn98a64hr8g5cpmh9zqpwtrhy&#xA;$ cardano-address key walletid &amp;lt; acct.xsk&#xA;15fd6c2130b0758ec7995bf9771d2a6602417c39&#xA;$ cardano-address key public --with-chain-code &amp;lt; acct.xsk | cardano-address key walletid&#xA;15fd6c2130b0758ec7995bf9771d2a6602417c39&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;How to generate a wallet id based on account keys of shared wallet (&lt;strong&gt;phrase.prv&lt;/strong&gt;)&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ cardano-address key from-recovery-phrase Shared &amp;lt; phrase.prv &amp;gt; root.shared_xsk&#xA;root_shared_xsk1hqzfzrgskgnpwskxxrv5khs7ess82ecy8za9l5ef7e0afd2849p3zryje8chk39nxtva0sww5me3pzkej4rvd5cae3q3v8eu7556n6pdrp4fdu8nsglynpmcppxxvfdyzdz5gfq3fefjepxhvqspmuyvmvzteqlc&#xA;&#xA;$ cardano-address key child 1854H/1815H/0H &amp;lt; root.shared_xsk &amp;gt; acct.shared_xsk&#xA;acct_shared_xsk14zh0kh0geaz9qpxv6q0n5upq8ux4n97u2gyl69mnhan74w6849pa3hj2p40xg0nugw8tzqu5eynzjunay6tffru9wdjank0phsfuc7vngjsmtktel05g6mx555tw8nxr8rpn2gac6km5plu9mwqsz54rfyhwd7pd&#xA;&#xA;$ cardano-address key walletid &amp;lt; acct.shared_xsk&#xA;user error (shared wallet needs to have at least spending script specified)&#xA;&#xA;$ cardano-address key walletid --spending &#34;cosigner#0&#34; &amp;lt; acct.shared_xsk&#xA;185d3582fc4892c4528614210b13e9a775dd7d02&#xA;&#xA;$ cardano-address key public --with-chain-code &amp;lt; acct.shared_xsk | cardano-address key walletid --spending &#34;cosigner#0&#34;&#xA;185d3582fc4892c4528614210b13e9a775dd7d02&#xA;&#xA;$ cardano-address key walletid --spending &#34;all [cosigner#0, active_until 1000]&#34; &amp;lt; acct.shared_xsk&#xA;42ecb214586dcbcb593688fb081784fa0aebb2c0&#xA;&#xA;$ cardano-address key walletid --spending &#34;all [cosigner#0, active_until 1000]&#34; --staking &#34;cosigner#1&#34; &amp;lt; acct.shared_xsk&#xA;12dc98557a4c5aa00575c5d1f0dbfa3837261e32&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;How to generate a private policy key (&lt;strong&gt;policy.xsk&lt;/strong&gt;), a public policy key (&lt;strong&gt;policy.vk&lt;/strong&gt;) and its hash (&lt;strong&gt;policy.vkh&lt;/strong&gt;)&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ cardano-address key child 1855H/1815H/0H &amp;lt; root.xsk &amp;gt; policy.xsk&#xA;policy_xsk1hr47zvxgzeeutgq50r965ygwxys86cwp8wdjqftlhan8mw6849pus6vc50dznjs5vkyjcz9usl6964u6nha88slrh8hyex74xnlfehcrkp80cp8wgzkqh22dzy7c48ekhhvvf2zz8hqakjwgfzgrjq5lx538et75&#xA;&#xA;$ cardano-address key child 1855H/1815H/0H &amp;lt; root.xsk | cardano-address key public --with-chain-code &amp;gt; policy.xvk&#xA;policy_xvk1e9ngmlhcwhszwyuxwc7anwk6tvzwndldz7j262rvfpd049tq74mq8vzwlszwus9vpw556yfa320nd0wccj5yy0wpmdyusjys8ypf7dgaauf0m&#xA;&#xA;$ cardano-address key child 1855H/1815H/0H &amp;lt; root.xsk | cardano-address key public --without-chain-code &amp;gt; policy.vk&#xA;policy_vk1e9ngmlhcwhszwyuxwc7anwk6tvzwndldz7j262rvfpd049tq74mq0ylkrs&#xA;&#xA;$ cardano-address key hash &amp;lt; policy.xvk&#xA;policy_vkh1qpc9xly4lc7yt98gcf59kdcqcss6dda4u9g72e775yxpxeypamc&#xA;$ cardano-address key hash &amp;lt; policy.vk&#xA;policy_vkh1qpc9xly4lc7yt98gcf59kdcqcss6dda4u9g72e775yxpxeypamc&#xA;$ cardano-address key hash --hex &amp;lt; policy.vk&#xA;0070537c95fe3c4594e8c2685b3700c421a6b7b5e151e567dea10c13&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;blockquote&gt; &#xA;  &lt;p&gt;&lt;span&gt;ℹ&lt;/span&gt; The last segment in the path is the key index and can be incremented up to &lt;code&gt;2^31-1&lt;/code&gt; to derive more keys.&lt;/p&gt; &#xA; &lt;/blockquote&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;How to generate a payment verification key (&lt;strong&gt;addr.xvk&lt;/strong&gt;)&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ cardano-address key child 1852H/1815H/0H/0/0 &amp;lt; root.xsk | cardano-address key public --with-chain-code &amp;gt; addr.xvk&#xA;addr_xvk1grvg8qzmkmw2n0dm4pd0h3j4dv6yglyammyp733eyj629dc3z28v6wk22nfmru6xz0vl2s3y5xndyd57fu70hrt84c6zkvlwx6fdl7ct9j7yc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;blockquote&gt; &#xA;  &lt;p&gt;&lt;span&gt;ℹ&lt;/span&gt; The last segment in the path is the key index and can be incremented up to &lt;code&gt;2^31-1&lt;/code&gt; to derive more keys.&lt;/p&gt; &#xA; &lt;/blockquote&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;How to generate an extended stake verification key (&lt;strong&gt;stake.xvk&lt;/strong&gt;)&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ cardano-address key child 1852H/1815H/0H/2/0 &amp;lt; root.xsk | cardano-address key public --with-chain-code &amp;gt; stake.xvk&#xA;stake_xvk1658atzttunamzn80204khrg0qfdk5nvmrutlmmpg7xlsyaggwa7h9z4smmeqsvs67qhyqmc2lqa0vy36rf2la74ym8a5p93zp4qtpuq6ky3ve&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;blockquote&gt; &#xA;  &lt;p&gt;&lt;span&gt;ℹ&lt;/span&gt; The last segment in the path is the key index and can be incremented up to &lt;code&gt;2^31-1&lt;/code&gt; to derive more keys.&lt;/p&gt; &#xA; &lt;/blockquote&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;How to generate a non-extended stake verification key (&lt;strong&gt;stake.vk&lt;/strong&gt;)&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ cardano-address key child 1852H/1815H/0H/2/0 &amp;lt; root.xsk | cardano-address key public --without-chain-code &amp;gt; stake.vk&#xA;stake_vk1658atzttunamzn80204khrg0qfdk5nvmrutlmmpg7xlsyaggwa7sg87an2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;blockquote&gt; &#xA;  &lt;p&gt;&lt;span&gt;ℹ&lt;/span&gt; The last segment in the path is the key index and can be incremented up to &lt;code&gt;2^31-1&lt;/code&gt; to derive more keys.&lt;/p&gt; &#xA; &lt;/blockquote&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;How to generate a hash for payment verification key (&lt;strong&gt;addr.xvk&lt;/strong&gt;)&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ cardano-address key child 1852H/1815H/0H/0/0 &amp;lt; root.xsk | cardano-address key public --with-chain-code &amp;gt; addr.xvk&#xA;addr_xvk1grvg8qzmkmw2n0dm4pd0h3j4dv6yglyammyp733eyj629dc3z28v6wk22nfmru6xz0vl2s3y5xndyd57fu70hrt84c6zkvlwx6fdl7ct9j7yc&#xA;$ cardano-address key hash &amp;lt; addr.xvk&#xA;addr_vkh12j28hnmtwcp3n08vy58vyf0arnnrhtavu3lrfdztw0j0jng3d6v&#xA;$ cardano-address key hash --hex &amp;lt; addr.xvk&#xA;54947bcf6b760319bcec250ec225fd1ce63baface47e34b44b73e4f9&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;blockquote&gt; &#xA;  &lt;p&gt;&lt;span&gt;ℹ&lt;/span&gt; The hashing is available for both stake and payment verification keys. Additional flag &#39;--hex&#39; can be used.&lt;/p&gt; &#xA; &lt;/blockquote&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;How to generate a payment address from an extended payment key (&lt;strong&gt;payment.addr&lt;/strong&gt;)&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ cardano-address address payment --network-tag testnet &amp;lt; addr.xvk &amp;gt; payment.addr&#xA;addr_test1vp2fg770ddmqxxduasjsas39l5wwvwa04nj8ud95fde7f7guscp6v&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;How to generate a payment address from a non-extended payment key (&lt;strong&gt;payment.addr&lt;/strong&gt;)&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ cardano-address key child 1852H/1815H/0H/0/0 &amp;lt; root.xsk | cardano-address key public --without-chain-code &amp;gt; addr.vk&#xA;addr_vk1grvg8qzmkmw2n0dm4pd0h3j4dv6yglyammyp733eyj629dc3z28qwq4y73&#xA;$ cardano-address address payment --network-tag testnet &amp;lt; addr.vk &amp;gt; payment.addr&#xA;addr_test1vp2fg770ddmqxxduasjsas39l5wwvwa04nj8ud95fde7f7guscp6v&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;How to generate a payment address from a payment key hash (&lt;strong&gt;payment.addr&lt;/strong&gt;)&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ cardano-address key hash &amp;lt; addr.xvk &amp;gt; addr.vkh&#xA;addr_vkh12j28hnmtwcp3n08vy58vyf0arnnrhtavu3lrfdztw0j0jng3d6v&#xA;$ cardano-address address payment --network-tag testnet &amp;lt; addr.vkh &amp;gt; payment.addr&#xA;addr_test1vp2fg770ddmqxxduasjsas39l5wwvwa04nj8ud95fde7f7guscp6v&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;How to generate a delegated payment address, i.e. base address, from an extended stake key (&lt;strong&gt;base.addr&lt;/strong&gt;)&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ cardano-address address delegation $(cat stake.xvk) &amp;lt; payment.addr &amp;gt; base.addr&#xA;addr_test1qp2fg770ddmqxxduasjsas39l5wwvwa04nj8ud95fde7f70k6tew7wrnx0s4465nx05ajz890g44z0kx6a3gsnms4c4qq8ve0n&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;How to generate a delegated payment address, i.e. base address, from a non-extended stake key (&lt;strong&gt;base.addr&lt;/strong&gt;)&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ cardano-address key child 1852H/1815H/0H/2/0 &amp;lt; root.xsk | cardano-address key public --without-chain-code &amp;gt; stake.vk&#xA;stake_vk1658atzttunamzn80204khrg0qfdk5nvmrutlmmpg7xlsyaggwa7sg87an2&#xA;$ cardano-address address delegation $(cat stake.vk) &amp;lt; payment.addr &amp;gt; base.addr&#xA;addr_test1qp2fg770ddmqxxduasjsas39l5wwvwa04nj8ud95fde7f70k6tew7wrnx0s4465nx05ajz890g44z0kx6a3gsnms4c4qq8ve0n&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;How to generate a delegated payment address, i.e. base address, from a stake key hash (&lt;strong&gt;base.addr&lt;/strong&gt;)&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ cardano-address key hash &amp;lt; stake.xvk &amp;gt; stake.vkh&#xA;stake_vkh17mf09mecwve7zkh2jve7nkggu4azk5f7cmtk9zz0wzhz5efq2w6&#xA;$ cardano-address address delegation $(cat stake.vkh) &amp;lt; payment.addr &amp;gt; base.addr&#xA;addr_test1qp2fg770ddmqxxduasjsas39l5wwvwa04nj8ud95fde7f70k6tew7wrnx0s4465nx05ajz890g44z0kx6a3gsnms4c4qq8ve0n&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;How to generate a stake address from an extended stake key (&lt;strong&gt;stake.addr&lt;/strong&gt;)&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ cardano-address address stake --network-tag testnet &amp;lt; stake.xvk &amp;gt; stake.addr&#xA;stake_test1urmd9uh08pen8c26a2fn86weprjh52638mrdwc5gfac2u2s25zpat&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;How to generate a stake address from a non-extended stake key (&lt;strong&gt;stake.addr&lt;/strong&gt;)&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ cardano-address address stake --network-tag testnet &amp;lt; stake.vk &amp;gt; stake.addr&#xA;stake_test1urmd9uh08pen8c26a2fn86weprjh52638mrdwc5gfac2u2s25zpat&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;How to generate a stake address from a stake key hash (&lt;strong&gt;stake.addr&lt;/strong&gt;)&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ cardano-address key hash &amp;lt; stake.xvk &amp;gt; stake.vkh&#xA;stake_vkh17mf09mecwve7zkh2jve7nkggu4azk5f7cmtk9zz0wzhz5efq2w6&#xA;$ cardano-address address stake --network-tag testnet &amp;lt; stake.vkh &amp;gt; stake.addr&#xA;stake_test1urmd9uh08pen8c26a2fn86weprjh52638mrdwc5gfac2u2s25zpat&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;How to inspect address&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ echo addr_test1vp2fg770ddmqxxduasjsas39l5wwvwa04nj8ud95fde7f7guscp6v | cardano-address address inspect&#xA;{&#xA;    &#34;stake_reference&#34;: &#34;none&#34;,&#xA;    &#34;spending_key_hash_bech32&#34;: &#34;addr_vkh12j28hnmtwcp3n08vy58vyf0arnnrhtavu3lrfdztw0j0jng3d6v&#34;,&#xA;    &#34;address_style&#34;: &#34;Shelley&#34;,&#xA;    &#34;spending_key_hash&#34;: &#34;54947bcf6b760319bcec250ec225fd1ce63baface47e34b44b73e4f9&#34;,&#xA;    &#34;network_tag&#34;: 0,&#xA;    &#34;address_type&#34;: 6&#xA;}&#xA;&#xA;$ echo addr_test1qp2fg770ddmqxxduasjsas39l5wwvwa04nj8ud95fde7f70k6tew7wrnx0s4465nx05ajz890g44z0kx6a3gsnms4c4qq8ve0n | cardano-address address inspect&#xA;{&#xA;    &#34;stake_reference&#34;: &#34;by value&#34;,&#xA;    &#34;stake_key_hash_bech32&#34;: &#34;stake_vkh17mf09mecwve7zkh2jve7nkggu4azk5f7cmtk9zz0wzhz5efq2w6&#34;,&#xA;    &#34;stake_key_hash&#34;: &#34;f6d2f2ef387333e15aea9333e9d908e57a2b513ec6d762884f70ae2a&#34;,&#xA;    &#34;spending_key_hash_bech32&#34;: &#34;addr_vkh12j28hnmtwcp3n08vy58vyf0arnnrhtavu3lrfdztw0j0jng3d6v&#34;,&#xA;    &#34;address_style&#34;: &#34;Shelley&#34;,&#xA;    &#34;spending_key_hash&#34;: &#34;54947bcf6b760319bcec250ec225fd1ce63baface47e34b44b73e4f9&#34;,&#xA;    &#34;network_tag&#34;: 0,&#xA;    &#34;address_type&#34;: 0&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Details about possible address types are following (refer also to &lt;a href=&#34;https://github.com/input-output-hk/cardano-ledger/raw/master/eras/alonzo/test-suite/cddl-files/alonzo.cddl&#34;&gt;cddl&lt;/a&gt; )&lt;/p&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th&gt;address_type&lt;/th&gt; &#xA;    &lt;th align=&#34;center&#34;&gt;binary prefix&lt;/th&gt; &#xA;    &lt;th align=&#34;center&#34;&gt;Meaning&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;0&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;0000&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;base address: keyhash28,keyhash28&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;1&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;0001&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;base address: scripthash28,keyhash28&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;2&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;0010&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;base address: keyhash28,scripthash28&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;3&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;0011&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;base address: scripthash28,scripthash28&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;4&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;0100&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;pointer address: keyhash28, 3 variable length uint&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;5&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;0101&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;pointer address: scripthash28, 3 variable length uint&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;6&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;0110&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;enterprise address: keyhash28&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;7&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;0111&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;enterprise address: scripthash28&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;8&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;1000&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;byron/icarus&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;14&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;1110&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;reward account: keyhash28&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;15&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;1111&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;reward account: scripthash28&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;How to generate a payment verification key for shared wallet (&lt;strong&gt;addr_shared.vk&lt;/strong&gt;, &lt;strong&gt;stake_shared.vk&lt;/strong&gt;)&lt;/summary&gt; &#xA; &lt;p&gt;Let&#39;s generate extended root private key for shared style:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ cardano-address key from-recovery-phrase Shared &amp;lt; phrase.prv &amp;gt; root_shared.xsk&#xA;root_shared_xsk1hqzfzrgskgnpwskxxrv5khs7ess82ecy8za9l5ef7e0afd2849p3zryje8chk39nxtva0sww5me3pzkej4rvd5cae3q3v8eu7556n6pdrp4fdu8nsglynpmcppxxvfdyzdz5gfq3fefjepxhvqspmuyvmvzteqlc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Now generate payment verification key (&lt;code&gt;role=0&lt;/code&gt; is used). Please note that purpose &lt;code&gt;1854H&lt;/code&gt; is used for multisig.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ cardano-address key child 1854H/1815H/0H/0/0 &amp;lt; root_shared.xsk | cardano-address key public --without-chain-code &amp;gt; addr_shared.vk&#xA;addr_shared_vk1a9h46rvjnqquxz02zyesh0ct29szh7vv9x7r2h87ttmnkgrfgguqhz0mtc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Generating delegation verification key is the similar (the only difference is role=2)&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ cardano-address key child 1854H/1815H/0H/2/0 &amp;lt; root_shared.xsk | cardano-address key public --without-chain-code &amp;gt; stake_shared.vk&#xA;stake_shared_vk18a8z5dcrlwene88n84j6dm9yvj5rt296fjtresqnunmacetdcymquyq43z&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;blockquote&gt; &#xA;  &lt;p&gt;&lt;span&gt;ℹ&lt;/span&gt; The last segment in the path is the key index, which can be incremented to derive more keys. Up &lt;code&gt;2^31-1&lt;/code&gt; keys are possible.&lt;/p&gt; &#xA; &lt;/blockquote&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;How to construct a multisig script hash (&lt;strong&gt;script.hash&lt;/strong&gt;)&lt;/summary&gt; &#xA; &lt;p&gt;We consider &lt;code&gt;addr_shared.1.vk&lt;/code&gt; and &lt;code&gt;addr_shared.2.vk&lt;/code&gt; obtained like &lt;code&gt;addr_shared.vk&lt;/code&gt; but by replacing the final index by &lt;code&gt;1&lt;/code&gt; and &lt;code&gt;2&lt;/code&gt; respectively.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ cardano-address key child 1854H/1815H/0H/0/1 &amp;lt; root_shared.xsk | cardano-address key public --without-chain-code &amp;gt; addr_shared.1.vk&#xA;addr_shared_vk1wgj79fxw2vmxkp85g88nhwlflkxevd77t6wy0nsktn2f663wdcmqcd4fp3&#xA;$ cardano-address key child 1854H/1815H/0H/0/2 &amp;lt; root_shared.xsk | cardano-address key public --without-chain-code &amp;gt; addr_shared.2.vk&#xA;addr_shared_vk1jthguyss2vffmszq63xsmxlpc9elxnvdyaqk7susl4sppp2s9xqsuszh44&#xA;$ cardano-address script hash &#34;all [$(cat addr_shared.1.vk), $(cat addr_shared.2.vk)]&#34; &amp;gt; script.hash&#xA;script1gr69m385thgvkrtspk73zmkwk537wxyxuevs2u9cukglvtlkz4k&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;This script requires the signature from both signing keys corresponding to &lt;code&gt;shared_addr.1.vk&lt;/code&gt; and &lt;code&gt;shared_addr.2.vk&lt;/code&gt; (i.e., shared_addr.1.sk and shared_addr.2.sk) in order to be valid. Similarly, we could require only one of the two signatures:&lt;/p&gt; &#xA; &lt;p&gt;We can also use extended verification, eiher payment or delegation, keys. They can be obtained as the non-extended ones by using &lt;code&gt;--with-chain-code&lt;/code&gt; option rather than &lt;code&gt;--without-chain-option&lt;/code&gt; as above. They will give rise to the same script hash as for verification keys chain code is stripped upon calculation.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ cardano-address key child 1854H/1815H/0H/0/1 &amp;lt; root_shared.xsk | cardano-address key public --with-chain-code &amp;gt; addr_shared.1.xvk&#xA;addr_shared_xvk1wgj79fxw2vmxkp85g88nhwlflkxevd77t6wy0nsktn2f663wdcmqhlfft3dn0qcn6q99dvlfl2ws5duy6w65zks5jgufe60fg839sysavl5pc&#xA;$ cardano-address key child 1854H/1815H/0H/0/2 &amp;lt; root_shared.xsk | cardano-address key public --with-chain-code &amp;gt; addr_shared.2.xvk&#xA;addr_shared_xvk1jthguyss2vffmszq63xsmxlpc9elxnvdyaqk7susl4sppp2s9xq3zegcxtslhpghmadrlvsphssfjqp3mxg9gca27e35wpu43lqjqnsmjvxuw&#xA;$ cardano-address script hash &#34;all [$(cat addr_shared.1.xvk), $(cat addr_shared.2.xvk)]&#34;&#xA;script1gr69m385thgvkrtspk73zmkwk537wxyxuevs2u9cukglvtlkz4k&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;which is equivalent (functionally, but not in terms of hash value) to :&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ cardano-address script hash &#34;at_least 1 [$(cat addr_shared.1.xvk), $(cat addr_shared.2.xvk)]&#34;&#xA;script13uf3fz3ts5srpjc5zcfe977uvnyvp36wcvxuudryegz0zpjlx6a&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;How to construct a multisig script hash with timelocks&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$  cardano-address script hash &#34;all [$(cat addr_shared.1.xvk), $(cat addr_shared.2.xvk), active_from 100, active_until 120]&#34;&#xA;script1nugjzwfs2t9htl7s3dv9ajnd5us8pctpa8aj4ank8dnd6d6unul&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;How to validate a script&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$  cardano-address script validate &#34;at_least 1 [$(cat addr_shared.1.xvk), $(cat addr_shared.2.xvk), $(cat addr_shared.2.xvk)]&#34;&#xA;Validated.&#xA;&#xA;$  cardano-address script validate --recommended  &#34;at_least 1 [$(cat addr_shared.1.xvk), $(cat addr_shared.2.xvk), $(cat addr_shared.2.xvk)]&#34;&#xA;Not validated: The list inside a script has duplicate keys (which is not recommended)..&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;How to get preimage for a script&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ cardano-address script preimage &#34;all [addr_shared_vkh1zxt0uvrza94h3hv4jpv0ttddgnwkvdgeyq8jf9w30mcs6y8w3nq, addr_shared_vkh1y3zl4nqgm96ankt96dsdhc86vd5geny0wr7hu8cpzdfcqskq2cp]&#34;&#xA;008201828200581c1196fe3062e96b78dd959058f5adad44dd663519200f2495d17ef10d8200581c2445facc08d975d9d965d360dbe0fa63688ccc8f70fd7e1f01135380&#xA;&#xA;$  cardano-address script preimage &#34;all [addr_shared_vkh1zxt0uvrza94h3hv4jpv0ttddgnwkvdgeyq8jf9w30mcs6y8w3nq, active_from 100, active_until 150]&#34;&#xA;008201838200581c1196fe3062e96b78dd959058f5adad44dd663519200f2495d17ef10d8204186482051896&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;How to generate a payment script address from a script hash (&lt;strong&gt;script.addr&lt;/strong&gt;)&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ cardano-address address payment --network-tag testnet &amp;lt; script.hash &amp;gt; script.addr&#xA;addr_test1wpq0ghwy73wapjcdwqxm6ytwe66j8eccsmn9jptshrjerashp7y82&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;How to generate a payment script address from a script (&lt;strong&gt;script.addr&lt;/strong&gt;)&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ cardano-address address payment --network-tag testnet &#34;all [$(cat addr_shared.1.xvk), $(cat addr_shared.2.xvk)]&#34;  &amp;gt; script.addr&#xA;addr_test1wpq0ghwy73wapjcdwqxm6ytwe66j8eccsmn9jptshrjerashp7y82&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;How to generate a delegated payment address, i.e. base address, from a script hash (&lt;strong&gt;base.addr&lt;/strong&gt;)&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ cardano-address script hash &#34;all [$(cat addr_shared.1.xvk), $(cat addr_shared.2.xvk), active_from 100, active_until 120]&#34; &amp;gt; script.stake.hash&#xA;script1nugjzwfs2t9htl7s3dv9ajnd5us8pctpa8aj4ank8dnd6d6unul&#xA;$ cardano-address address delegation $(cat script.stake.hash) &amp;lt; script.addr &amp;gt; base.addr&#xA;addr_test1xpq0ghwy73wapjcdwqxm6ytwe66j8eccsmn9jptshrjera5lzysnjvzjed6ll5yttp0v5md8ypcwzc0flv40va3mvmwsl7grs3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;How to generate a delegated payment address, i.e. base address, from a script (&lt;strong&gt;base.addr&lt;/strong&gt;)&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ cardano-address address delegation &#34;all [$(cat addr_shared.1.xvk), $(cat addr_shared.2.xvk), active_from 100, active_until 120]&#34; &amp;lt; script.addr &amp;gt; base.addr&#xA;addr_test1xpq0ghwy73wapjcdwqxm6ytwe66j8eccsmn9jptshrjera5lzysnjvzjed6ll5yttp0v5md8ypcwzc0flv40va3mvmwsl7grs3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;How to generate a stake address from a script hash (&lt;strong&gt;stake.addr&lt;/strong&gt;)&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ cardano-address address stake --network-tag testnet &amp;lt; script.stake.hash &amp;gt; stake.addr&#xA;stake_test17z03zgfexpfvka0l6z94shk2dknjqu8pv85lk2hkwcakdhgx52yaj&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;How to generate a stake address from a script (&lt;strong&gt;stake.addr&lt;/strong&gt;)&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ cardano-address address stake --network-tag testnet &#34;all [$(cat addr_shared.1.xvk), $(cat addr_shared.2.xvk), active_from 100, active_until 120]&#34; &amp;gt; stake.addr&#xA;stake_test17z03zgfexpfvka0l6z94shk2dknjqu8pv85lk2hkwcakdhgx52yaj&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Correspondence between keys in cardano-addresses and cardano-cli (&lt;strong&gt;key.xsk key.xvk key.vk key.hash&lt;/strong&gt;)&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;Let&#39;s assume we have mnemonic&#xA;$ cat recovery-phrase.prv&#xA;nothing heart matrix fly sleep slogan tomato pulse what roof rail since plastic false enlist&#xA;&#xA;Construct root extended private key&#xA;$ cardano-address key from-recovery-phrase Shelley &amp;lt; recovery-phrase.prv &amp;gt; root.xprv&#xA;root_xsk1apjwjs3ksgm5mnnk0cc5v5emgv0hmafmmy8tffay5s2ffk69830whwznr46672ruucdzwwtv9upv72e4ylrypyz5m6cyh0p00t7n3u3agt20lv32j4kxcqlkzu78nzjx0ysxxlc2ghfz9prxfmrds802xsuhh404~&#xA;&#xA;Construct extended private key for account ix=0H, role=0 and address ix=0&#xA;$ cardano-address key child 1852H/1815H/0H/0/0 &amp;lt; root.xprv &amp;gt; key.xsk&#xA;addr_xsk1kzl5vgev0u843tfnxqcwg0lmaf7zhdhczddaqhas6dp6m6z98302e3avp8mhu94kxkpj2gss064f74km3rrptafh4fsztekz8k5c469shcvx35wrdmus3xemp984lcwhs0jdtl4pfcsrfspe00h9pej6rg8drvcv&#xA;&#xA;Create extended signing key using cardano-cli&#xA;$ cardano-cli key convert-cardano-address-key --shelley-payment-key --signing-key-file key.xsk --out-file key.skey&#xA;{&#xA;    &#34;type&#34;: &#34;PaymentExtendedSigningKeyShelley_ed25519_bip32&#34;,&#xA;    &#34;description&#34;: &#34;&#34;,&#xA;    &#34;cborHex&#34;: &#34;5880b0bf46232c7f0f58ad333030e43ffbea7c2bb6f8135bd05fb0d343ade8453c5eacc7ac09f77e16b635832522107eaa9f56db88c615f537aa6025e6c23da98ae8fbbbf6410e24532f35e9279febb085d2cc05b3b2ada1df77ea1951eb694f3834b0be1868d1c36ef9089b3b094f5fe1d783e4d5fea14e2034c0397bee50e65a1a&#34;&#xA;}&#xA;&#xA;The cborhex here contains of 4 parts:&#xA;1. prefix 5880 - bytestring of 128 bytes&#xA;2. signing key (64 bytes) - b0bf46232c7f0f58ad333030e43ffbea7c2bb6f8135bd05fb0d343ade8453c5eacc7ac09f77e16b635832522107eaa9f56db88c615f537aa6025e6c23da98ae8&#xA;3. verification key (32 bytes) - fbbbf6410e24532f35e9279febb085d2cc05b3b2ada1df77ea1951eb694f3834&#xA;4. chain code (32 bytes) - b0be1868d1c36ef9089b3b094f5fe1d783e4d5fea14e2034c0397bee50e65a1a&#xA;&#xA;Create corresponding verification key using cardano-cli&#xA;$ cardano-cli key verification-key --signing-key-file key.skey --verification-key-file key.vkey&#xA;{&#xA;    &#34;type&#34;: &#34;PaymentExtendedVerificationKeyShelley_ed25519_bip32&#34;,&#xA;    &#34;description&#34;: &#34;&#34;,&#xA;    &#34;cborHex&#34;: &#34;5840fbbbf6410e24532f35e9279febb085d2cc05b3b2ada1df77ea1951eb694f3834b0be1868d1c36ef9089b3b094f5fe1d783e4d5fea14e2034c0397bee50e65a1a&#34;&#xA;}&#xA;The cborhex here contains of 3 parts:&#xA;1. prefix 5840 - bytestring of 64 bytes&#xA;2. verification key (32 bytes) - fbbbf6410e24532f35e9279febb085d2cc05b3b2ada1df77ea1951eb694f3834&#xA;3. chain code (32 bytes) - b0be1868d1c36ef9089b3b094f5fe1d783e4d5fea14e2034c0397bee50e65a1a&#xA;&#xA;Rule for prefixes:&#xA;  - CBOR-encoded bytestring (which is what the 58 identifies)&#xA;  - size (80 means 128 bytes, whereas 40 means 64 bytes, 20 means 32 bytes)&#xA;&#xA;Create verification key hash using cardano-cli&#xA;$ cardano-cli address key-hash --payment-verification-key-file key.vkey &amp;gt; key.hash&#xA;0185545935760c5e370d01e6f4fedbb89b7fd79e115f2837cfab9ea8&#xA;&#xA;Alternatively, we can create non-extended key&#xA;$ cardano-address key public --without-chain-code &amp;lt; key.xsk &amp;gt; key.vk&#xA;addr_vk1lwalvsgwy3fj7d0fy707hvy96txqtvaj4ksa7al2r9g7k6208q6qmrv9k3&#xA;&#xA;Also, take notice that signing key can be translated to cborhex:&#xA;$ cat key.xsk | bech32&#xA;b0bf46232c7f0f58ad333030e43ffbea7c2bb6f8135bd05fb0d343ade8453c5eacc7ac09f77e16b635832522107eaa9f56db88c615f537aa6025e6c23da98ae8b0be1868d1c36ef9089b3b094f5fe1d783e4d5fea14e2034c0397bee50e65a1a&#xA;(signing key and chain code appended)&#xA;&#xA;Moreover, basing on key.vk one can get hash&#xA;$ cardano-cli address key-hash --payment-verification-key $(cat key.vk) &amp;gt; key1.hash&#xA;0185545935760c5e370d01e6f4fedbb89b7fd79e115f2837cfab9ea8&#xA;&#xA;Within cardano-addresses one can get cborhex of verification key (with chain code)&#xA;$ cardano-address key public --with-chain-code &amp;lt; key.xsk | bech32&#xA;fbbbf6410e24532f35e9279febb085d2cc05b3b2ada1df77ea1951eb694f3834b0be1868d1c36ef9089b3b094f5fe1d783e4d5fea14e2034c0397bee50e65a1a&#xA;(verification key and chain code appended)&#xA;&#xA;Within cardano-addresses one can get cborhex of verification key (without chain code)&#xA;$ cardano-address key public --without-chain-code &amp;lt; key.xsk | bech32&#xA;fbbbf6410e24532f35e9279febb085d2cc05b3b2ada1df77ea1951eb694f3834&#xA;(verification key without chain code)&#xA;&#xA;Then, we can get compute hash (but here we need to use without chain code):&#xA;$ cardano-address key public --without-chain-code &amp;lt; key.xsk | cardano-address key hash | bech32&#xA;0185545935760c5e370d01e6f4fedbb89b7fd79e115f2837cfab9ea8&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Docker Image&lt;/h2&gt; &#xA;&lt;h3&gt;Build&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ docker build -t cardano-address .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Run&lt;/h3&gt; &#xA;&lt;p&gt;Use the auto-remove flag &lt;code&gt;--rm&lt;/code&gt; when running commands.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ docker run --rm cardano-address recovery-phrase generate --size 15&#xA;dismiss grit bacon glare napkin satisfy tribe proud carpet bench fantasy rich history face north&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use the interactive flag &lt;code&gt;-i&lt;/code&gt; when piping stdin&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ echo &#34;addr1gqtnpvdhqrtpd4g424fcaq7k0ufuzyadt7djygf8qdyzevuph3wczvf2dwyx5u&#34; | docker run --rm -i cardano-addresses address inspect&#xA;{&#xA;    &#34;address_style&#34;: &#34;Shelley&#34;,&#xA;    &#34;stake_reference&#34;: &#34;by pointer&#34;,&#xA;    &#34;spending_key_hash&#34;: &#34;1730b1b700d616d51555538e83d67f13c113ad5f9b22212703482cb3&#34;,&#xA;    &#34;pointer&#34;: {&#xA;        &#34;slot_num&#34;: 24157,&#xA;        &#34;output_index&#34;: 42,&#xA;        &#34;transaction_index&#34;: 177&#xA;    },&#xA;    &#34;network_tag&#34;: 0&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;NPM Package&lt;/h2&gt; &#xA;&lt;p&gt;There is an experimental NPM module for JavaScript and TypeScript available, which works in both NodeJS and the browser.&lt;/p&gt; &#xA;&lt;p&gt;Here is a code sample showing how it can be used:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var cardanoAddresses = require(&#39;cardano-addresses&#39;)&#xA;var addr = &#39;addr1gqtnpvdhqrtpd4g424fcaq7k0ufuzyadt7djygf8qdyzevuph3wczvf2dwyx5u&#39;&#xA;&#xA;cardanoAddresses.inspectAddress(addr)&#xA;  .then(info =&amp;gt; console.log(info)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.npmjs.com/package/cardano-addresses&#34;&gt;NPM Package&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://IntersectMBO.github.io/cardano-addresses/typescript/&#34;&gt;API Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://IntersectMBO.github.io/cardano-addresses/demo/&#34;&gt;Web Demo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/IntersectMBO/cardano-addresses/master/jsapi/README.md&#34;&gt;Development Info&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Pull requests are welcome.&lt;/p&gt; &#xA;&lt;p&gt;When creating a pull request, please make sure that your code adheres to our &lt;a href=&#34;https://input-output-hk.github.io/adrestia/code/Coding-Standards&#34;&gt;coding standards&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/IntersectMBO/cardano-addresses/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/IntersectMBO/cardano-addresses.svg?style=for-the-badge&#34;&gt;&lt;/a&gt; &lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>lsmor/snake-fury</title>
    <updated>2023-10-15T01:46:23Z</updated>
    <id>tag:github.com,2023-10-15:/lsmor/snake-fury</id>
    <link href="https://github.com/lsmor/snake-fury" rel="alternate"></link>
    <summary type="html">&lt;p&gt;a challenge for Haskell beginners&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;snake-fury&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lsmor/snake-fury/main/#snake-fury&#34;&gt;snake-fury&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lsmor/snake-fury/main/#introduction&#34;&gt;Introduction&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lsmor/snake-fury/main/#note-about-not-using-monads&#34;&gt;note about not using monads&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lsmor/snake-fury/main/#start-coding-building-a-mvp&#34;&gt;Start coding: Building a MVP&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lsmor/snake-fury/main/#continue-coding-refactors&#34;&gt;Continue coding: Refactors&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lsmor/snake-fury/main/#solution-branches&#34;&gt;Solution branches&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lsmor/snake-fury/main/#architecture&#34;&gt;Architecture&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lsmor/snake-fury/main/#contributions-and-feedback&#34;&gt;Contributions and Feedback&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Welcome to snake-fury&lt;/strong&gt;: the Haskell challenge for beginners. This challenge aims to provide a learning path for people willing to learn Haskell further than basic recursion exercises by implementing the snake game in Haskell. Snake-fury&#39;s pedagogical approach is based on two legs:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;snake-fury isn&#39;t a tutorial but a challenge.&lt;/li&gt; &#xA; &lt;li&gt;snake-fury is focused on learning by refactoring, not by example.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The first leg means that you&#39;ll be asked to implement some functions/algorithms. It is expected that the challenger will be unable to implement them without some research on Hackage&#39;s documentation, blogs, youtube videos, etc. There will be guidelines to help the challenger. Nevertheless, an important skill when learning Haskell is to be able to search, read and understand the documentation that is (often, but not always) more complex and less accessible than other programming languages.&lt;/p&gt; &#xA;&lt;p&gt;The second leg is even more interesting. Haskell is notoriously known for its difficulty and the popularization of the holy triad: Functor - Applicative - Monad. There are plenty of tutorials showing examples and hundreds of thousands of lines trying to make them accessible and newcomer-friendly... But with all due respect, It seems they all fail to explain: &#34;Why monads? Why not other less mathematical abstraction? Why not classic OOP patterns?&#34;. The approach given by snake-fury is to make the same application twice... it sounds crazy, but the idea goes like this: You&#39;ll implement a &#34;pure&#34; version of the snake game: No monads, no functors, no abstractions [&lt;a href=&#34;https://raw.githubusercontent.com/lsmor/snake-fury/main/#note-about-not-using-monads&#34;&gt;see below&lt;/a&gt;]. Then you will refactor the core application logic using the state and reader monads. Then you&#39;ll be asked to abstract your code and to use &lt;code&gt;mtl&lt;/code&gt; classes to make your code less dependent on the concrete implementation.&lt;/p&gt; &#xA;&lt;p&gt;Below there is a dramatization of Haskell&#39;s learning curve. This challenge aims to be a helpful companion from the newby slope to the temple of oblivion... but be aware, nothing will save you from the temptation of abandon. Hopefully, you&#39;ll be able to climb up to the temple and spread the lambdas&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/lsmor/snake-fury/main/assets/Haskell_learning_curve.png&#34; alt=&#34;dramatization of Haskell&#39;s learning curve&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;note about not using monads&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;By that I mean, not using do notation nor functor/applicative/monads combinators like &lt;code&gt;liftA2&lt;/code&gt;, &lt;code&gt;fmap&lt;/code&gt;, &lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt;, etc... Obviously, The IO and the asynchronous part of the code are provided and the challenger is not expected to solve it.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Start coding: Building a MVP&lt;/h2&gt; &#xA;&lt;p&gt;First you need access to a Haskell development environment. You can either:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install it locally following the &lt;a href=&#34;https://www.haskell.org/get-started/&#34;&gt;official guide&lt;/a&gt; (Recommended).&lt;/li&gt; &#xA; &lt;li&gt;You can use gitpod to quickly jump into an &lt;a href=&#34;https://www.gitpod.io/docs/introduction/getting-started&#34;&gt;online environment&lt;/a&gt;. Follow these considerations: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;You will need a fork of the repo in order to save your progress&lt;/li&gt; &#xA;   &lt;li&gt;If you are a &lt;code&gt;stack&lt;/code&gt; user, modify the &lt;code&gt;hie.yaml&lt;/code&gt; so the cradle is &lt;code&gt;stack&lt;/code&gt; not &lt;code&gt;cabal&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Once you have a dev-env up and running, clone the code and move to &lt;code&gt;snake-fury-exercise&lt;/code&gt; branch&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/lsmor/snake-fury.git&#xA;git checkout snake-fury-exercise&#xA;&#xA;# Optionally, you can create a solution branch out of this one&#xA;git checkout -b my-solution # (example name)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You should see this folder structure (among other files)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;app&#xA; |- Main.hs            # (implemented)     the entrypoint of your application.&#xA;src&#xA; |- EventQueue.hs      # (implemented)     here is the EventQueue.&#xA; |- GameState.hs       # (not implemented) here will go the logic of the game.&#xA; |- RenderState.hs     # (not implemented) here will go the data structures for rendering the game&#xA; |- Initialization.hs  # (implemented)     some utility functions&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Exercises are comments in the files:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;src/GameState.hs&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;src/RenderState.hs&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;They can be filled in any order.&lt;/p&gt; &#xA;&lt;p&gt;Each file correspond to each component in the system (and some utilities to keep code simpler). Be sure you read the &lt;a href=&#34;https://raw.githubusercontent.com/lsmor/snake-fury/main/#architecture&#34;&gt;architecture&lt;/a&gt; section to understand why the code is structured this way. Notice that you&#39;ll need to implement as many auxiliary functions as you need to make it work. If you feel stuck you can check the &lt;a href=&#34;https://raw.githubusercontent.com/lsmor/snake-fury/main/#solution-branches&#34;&gt;solution&lt;/a&gt; I&#39;ve implemented.&lt;/p&gt; &#xA;&lt;p&gt;Once you complete all exercises in &lt;code&gt;GameState.hs&lt;/code&gt; and &lt;code&gt;RenderState.hs&lt;/code&gt; you should be able to run the snake game in a terminal with the command below.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# To move the snake, either&#xA;#   use arrow keys: ← ↑ → ↓&#xA;#   use vim motions: hjkl&#xA;#   use gamer motions: wasd&#xA;&#xA;# cabal users&#xA;cabal build&#xA;cabal run snake-fury -- height width fps # A common set up is a 10x10 board running at 6 fps&#xA;&#xA;# stack users&#xA;stack build --stack-yaml stack-ghc-&amp;lt;your.system.version&amp;gt;.yaml&#xA;stack run snake-fury -- height width fps # A common set up is a 10x10 board running at 6 fps&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/lsmor/snake-fury/main/assets/snake-mvp.gif&#34; alt=&#34;example of running&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Continue coding: Refactors&lt;/h2&gt; &#xA;&lt;p&gt;You&#39;ve built a minimum viable product. Now it is time to improve it!. In the &lt;code&gt;exercises&lt;/code&gt; folder you have intructions for refactoring. Follow them one by one as enumerated. One of the ideas is you feel the power of the type system when refactoring. Also you&#39;ll be dealing with poor design choices implemented in the mpv part.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;refactor-1&lt;/strong&gt;: you will move from you mvp to a full snake game with all the functionality: like a score counter and increasing speed. Also, you&#39;ll deal with performance issue the mvp has.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;refactor-2&lt;/strong&gt;: you will refactor the logic of the game to use the state monad. Hopefully you&#39;ll find code much easier to read.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;refactor-3&lt;/strong&gt;: you will refactor the logic of the game to use the reader + state monad stack. Also, as an optional but recommended exercise, you can learn about the IO monad&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;refactor-4&lt;/strong&gt;: You will refactor the code to use &lt;code&gt;mtl&lt;/code&gt; like constraints. Now the code looks a little bit abstract but it is easy to read and follow&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;refactor-5&lt;/strong&gt;: Finally, you&#39;ll refactor the code to be fully abstracted over the monad stack you use. You will create you own type classes expressing exactly the actions you want to execute.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Solution branches&lt;/h2&gt; &#xA;&lt;p&gt;You have multiple solutions branches, one for each refactor step and one for the mvp. Below you have the relation of branches and refactors. You can run &lt;code&gt;git branch -l&lt;/code&gt; to see the list of all branches.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;solution-mvp&lt;/code&gt; branch corresponds to the solution of the first exercise&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;solution-refactor-1&lt;/code&gt; branch corresponds to the solution of the first refactor in &lt;a href=&#34;https://raw.githubusercontent.com/lsmor/snake-fury/main/exercises/refactor-1.md&#34;&gt;exercises/refactor-1&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;solution-refactor-2.1&lt;/code&gt; branch corresponds to the solution of the second refactor, step 1 in &lt;a href=&#34;https://raw.githubusercontent.com/lsmor/snake-fury/main/exercises/refactor-2.md#step-1-apply-changes-locally&#34;&gt;exercises/refactor-2&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;solution-refactor-2.2&lt;/code&gt; branch corresponds to the solution of the second refactor, step 2 in &lt;a href=&#34;https://raw.githubusercontent.com/lsmor/snake-fury/main/exercises/refactor-2.md#step-2-did-you-spot-the-pattern-thats-a-monad&#34;&gt;exercises/refactor-2&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;solution-refactor-3&lt;/code&gt; branch corresponds to the solution of the third refactor in &lt;a href=&#34;https://raw.githubusercontent.com/lsmor/snake-fury/main/exercises/refactor-3.md&#34;&gt;exercises/refactor-3&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;solution-refactor-4.1&lt;/code&gt; branch corresponds to the solution of the fourth refactor, step 1 in &lt;a href=&#34;https://raw.githubusercontent.com/lsmor/snake-fury/main/exercises/refactor-4.md#step-1-mtl-constraints&#34;&gt;exercises/refactor-4&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;solution-refactor-4.2&lt;/code&gt; branch corresponds to the solution of the fourth refactor, step 2 in &lt;a href=&#34;https://raw.githubusercontent.com/lsmor/snake-fury/main/exercises/refactor-4.md#step-2-glue-together-renderstate-and-gamestate&#34;&gt;exercises/refactor-4&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;solution-refactor-5&lt;/code&gt; branch corresponds to the solution of the fifth refactor in &lt;a href=&#34;https://raw.githubusercontent.com/lsmor/snake-fury/main/exercises/refactor-5.md&#34;&gt;exercises/refactor-5&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;My solution might be different than yours, and that is totally fine. All solution branches should build and run the same as your exercise branch.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;note 1: &lt;code&gt;main&lt;/code&gt; branch is unstable an you shouldn&#39;t build it. Contains all sort of experiments, including an heavy sdl front-end&lt;/p&gt; &#xA; &lt;p&gt;note 2: At the moment, the &lt;code&gt;main&lt;/code&gt; branch doesn&#39;t use frames per second but microseconds as input parameter. Hence &lt;code&gt;cabal run snake-fury -- 10 10 100000&lt;/code&gt; will run at 10 fps. In the exercise branch, the input parameter is correct. So if you want to build from &lt;code&gt;main&lt;/code&gt; be aware of this change.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Architecture&lt;/h2&gt; &#xA;&lt;p&gt;The general architecture of the software is the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;There are three major components: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;An &lt;em&gt;Event Queue&lt;/em&gt;: It keeps a queue of the following events to happen in the game based on the user keyboard input&lt;/li&gt; &#xA;   &lt;li&gt;A &lt;em&gt;Game State&lt;/em&gt;: Is the logic state. It keeps track on the snake body, the current apple, the direction of movement, etc...&lt;/li&gt; &#xA;   &lt;li&gt;A &lt;em&gt;Render State&lt;/em&gt;: Is the game board. Instead of building up the board from the GameState, we keep an array in memory and modify it as convenient&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Each compoment sends a message to the next one in the following order: &lt;code&gt;(user keyboard) -&amp;gt; EventQueue -&amp;gt; GameState -&amp;gt; RenderState -&amp;gt; (render device)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;We have two threads: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;The secondary thread is continuously reading from user&#39;s keyboard and pushing the key strokes into an asynchronous &lt;code&gt;EventQueue&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;The main thread reads at steady time from the &lt;code&gt;EventQueue&lt;/code&gt;, and based on what the user has pressed, it runs the game logic and prints the board in the console&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Notice that two threads are necessary, since user could press keys faster than the game updates (fps). For example let say we run a frame each second and a half (normal speed in the snake game), then a user is likely to press keys faster than that. If the key strokes are catched only when a frame is about to be rendered, then many strokes will be lost.&lt;/p&gt; &#xA;&lt;p&gt;The following diagram helps to visualize&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/lsmor/snake-fury/main/assets/snake_architecture.png&#34; alt=&#34;Overview of the architecture&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contributions and Feedback&lt;/h2&gt; &#xA;&lt;p&gt;Please, open an issue if you:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;find some solution branch doesn&#39;t build. Typically this is due to some external dependencies not available or an error with &lt;code&gt;cabal&lt;/code&gt;. Add label &lt;em&gt;solution branch does not build&lt;/em&gt; to the issue&lt;/li&gt; &#xA; &lt;li&gt;If you think the README or any of the exercises is poorly written, or could be improved substantially. Add label &lt;em&gt;documentation&lt;/em&gt; to the issue&lt;/li&gt; &#xA; &lt;li&gt;If the software builds but it missbehaves. For example, the snake doesn&#39;t move, or the board looks wrong. Add label &lt;em&gt;bug&lt;/em&gt; to the issue&lt;/li&gt; &#xA; &lt;li&gt;If you want to provide some feedback (see below). Add label &lt;em&gt;feedback&lt;/em&gt; to the issue.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you want to contribute with a PR, take into account that due to the refactoring nature of the challenge, there are many branches. This makes integration difficult but you should follow these two rules:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Documentation&lt;/strong&gt; should be merge into &lt;code&gt;main&lt;/code&gt; branch. This rule apply to README, any markdown under &lt;code&gt;exercises&lt;/code&gt;, and any file in the &lt;code&gt;assets&lt;/code&gt; folder&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Code&lt;/strong&gt; should be merge into &lt;code&gt;solution-mvp&lt;/code&gt; if the change applies to all refactors; Or merge into &lt;code&gt;solution-refactor-XXX&lt;/code&gt; if the change applies only to that refactor, hence you should branch out from the corresponding branch. Any change done in &lt;code&gt;solution-mvp&lt;/code&gt; is merge into &lt;code&gt;snake-fury-exercise&lt;/code&gt; and &lt;code&gt;solution-refactor-XXX&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;If you aren&#39;t sure how to contribute, just ask :)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The branch graph look like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-txt&#34;&gt;main&#xA; |-solution-mvp&#xA;   |-snake-fury-exercise&#xA;   |-solution-refactor-1&#xA;     |-solution-refactor-2&#xA;       |-solution-refactor-2.2&#xA;         |-solution-refactor-3&#xA;           |-solution-refactor-4.1&#xA;             |-solution-refactor-4.2&#xA;               |-solution-refactor-5&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Also I&#39;d appreciate if you write some feedback for me. As already said, open an issue with a label &lt;em&gt;feedback&lt;/em&gt;. These issue won&#39;t be closed, as it is easier for someone comming to the challenge to filter by open issues with label &lt;em&gt;feedback&lt;/em&gt;, rather than closed issues. Please, do not use the &lt;em&gt;feedback&lt;/em&gt; issue for any other than providing feedback, so if you have an idea on how to improve the challenge open a second issue with your proposal. Ideally &lt;em&gt;feedback&lt;/em&gt; issue will have a maximum of two comments: the feedback itself, and a second comment in case the issue is outdated due to changes. Avoid meaningless feeback if possible.&lt;/p&gt; &#xA;&lt;p&gt;Positive feedback should answer these questions:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;How much Haskell did you know before starting the challenge?&lt;/li&gt; &#xA; &lt;li&gt;Does the project helped you with some concepts more than other resources?&lt;/li&gt; &#xA; &lt;li&gt;In your opinion, What&#39;s the most difficult part?&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Negative feedback (is welcome) should answer these questions:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;How much Haskell did you know before starting the challenge?&lt;/li&gt; &#xA; &lt;li&gt;How much of the project have you completed?&lt;/li&gt; &#xA; &lt;li&gt;How can I improve the challenge?&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Here are some examples:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Wrong positive feedback&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;This challenge is cool!&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;hr&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Right positive feedback&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;This challenge is cool!. I learnt some Haskell a year ago but could not build anything usefull with it (so I was in the valley of frustration and abandom the language). Monads are much clearer now, I am still wrapping my head around mtl style, but sure I will get it!!.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;hr&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Wrong negative feedback&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;This challenge is worthless&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;hr&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Right negative feedback&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;This challenge is worthless. I&#39;ve being learning Haskell for the last 6 months and still I am unable to build anything usefull. Building the mpv is doable (but very difficult), but when you start with the first refactor you end up touching the f**** IO monad and using ByteString/Builder. Why on earth Haskell hasn&#39;t a good default string library??.&lt;/p&gt; &#xA; &lt;p&gt;This challenge should make an effort to explain all the inconviniences newcommers should face when getting into the language.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Thanks for reading&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>geniusyield/smart-order-router</title>
    <updated>2023-10-15T01:46:23Z</updated>
    <id>tag:github.com,2023-10-15:/geniusyield/smart-order-router</id>
    <link href="https://github.com/geniusyield/smart-order-router" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Open-source Smart Order Router framework to connect liquidity from the Genius Yield DEX&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt;Smart Order Router&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/geniusyield/smart-order-router/actions?query=branch%3Amain&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/geniusyield/smart-order-router/build.yml?style=flat-square&amp;amp;branch=main&amp;amp;label=Build&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://www.haskell.org/&#34;&gt; &lt;img alt=&#34;GitHub top language&#34; src=&#34;https://img.shields.io/github/languages/top/geniusyield/smart-order-router&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/geniusyield/smart-order-router/commits/main&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/commit-activity/m/geniusyield/smart-order-router?style=flat-square&amp;amp;label=Commit%20Activity&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/geniusyield/smart-order-router/raw/main/LICENSE&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/license/geniusyield/smart-order-router?style=flat-square&amp;amp;label=Licence&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/geniusyield/smart-order-router/main/CONTRIBUTING.md&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=flat-square&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://twitter.com/GeniusyieldO&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/-%40GeniusYieldO-F3F1EF?style=flat-square&amp;amp;logo=twitter&amp;amp;logoColor=1D9BF0&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://discord.gg/TNHf4fs626&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/-Discord-414EEC?style=flat-square&amp;amp;logo=discord&amp;amp;logoColor=white&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Table of contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;🎓 &lt;a href=&#34;https://raw.githubusercontent.com/geniusyield/smart-order-router/main/#crash-course-geniusyield-dex-orders--sor&#34;&gt;Crash Course&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🚀 &lt;a href=&#34;https://raw.githubusercontent.com/geniusyield/smart-order-router/main/#building-and-running&#34;&gt;Building and running&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🧠 &lt;a href=&#34;https://raw.githubusercontent.com/geniusyield/smart-order-router/main/#strategies&#34;&gt;Strategies&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🛠️ &lt;a href=&#34;https://raw.githubusercontent.com/geniusyield/smart-order-router/main/#troubleshooting&#34;&gt;Troubleshooting&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;⚖️ &lt;a href=&#34;https://raw.githubusercontent.com/geniusyield/smart-order-router/main/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;SORs are off-chain bots that execute a routing algorithm that scans the blockchain for open limit orders, matches them based on their trigger conditions, and submits new transactions back to the ledger to perform the swap state transitions. Each Smart Swap encodes trigger conditions that the SOR must fulfill to execute the swap. The SOR continuously scans and analyzes the current state of the limit orders and relies on the configured matching strategy to best execute a customer’s order based on price.&lt;/p&gt; &#xA;&lt;p&gt;Specifically, the bot periodically builds a multi-asset order book consisting of one order book for each token pair listed in its configuration. Each order book contains only sell and buy orders for the same pair of tokens. The bot runs the selected strategy over the multi-asset order book to obtain a list of matches. The matches are then translated into transactions that will be signed and submitted by the bot.&lt;/p&gt; &#xA;&lt;h2&gt;Crash Course GeniusYield DEX Orders &amp;lt;&amp;gt; SOR&lt;/h2&gt; &#xA;&lt;p&gt;Let&#39;s start with a concrete and short overview of the GY DEX Orders, so the context of the SOR for using, modifying, and improving with new custom strategies is properly established. A complete description can be found in the &lt;a href=&#34;https://www.geniusyield.co/whitepaper.pdf?lng=en&#34;&gt;GY whitepaper&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Given a pair of tokens, an order will contain the number of tokens it offers, the price of one unit of those offered, and the minimal amount we are forced to buy from the order. Besides that, the order will have some life timeline and, of course, a notion of ownership related to the one that created it. For example, we could create an order offering of &lt;code&gt;10 tokenA&lt;/code&gt;, with a unit price of &lt;code&gt;2 tokenB&lt;/code&gt;, that is, we expect to receive &lt;code&gt;2 tokenB&lt;/code&gt; per &lt;code&gt;1 tokenA&lt;/code&gt;. Also, we want the minimal amount to be bought be &lt;code&gt;5 tokenA&lt;/code&gt;. Clearly, the owners of this order will be us and it&#39;s important to mention that all this information is &lt;strong&gt;mandatory&lt;/strong&gt;, but we can avoid setting the life timeline, meaning the order will always be available. Once we create an order, the offered tokens will be locked on the order.&lt;/p&gt; &#xA;&lt;p&gt;Given an order, two interesting &#34;actions&#34; can be performed over it. The owner can cancel it and get back the locked tokens. Or anyone can &lt;em&gt;fill&lt;/em&gt; it, filling an order is just paying the correct amount of tokens the owner of the order expects to receive related to the amount of tokens we want to buy from that order. Following the previous example, anyone could fill that order by buying from it &lt;code&gt;6 tokenA&lt;/code&gt; and paying the owner &lt;code&gt;12 tokenB&lt;/code&gt;. But, it isn&#39;t possible to buy, for instance, &lt;code&gt;3 tokenA&lt;/code&gt; from the order because the minimal amount was setup to &lt;code&gt;5&lt;/code&gt;, except the amount of offered tokens is less than that.&lt;/p&gt; &#xA;&lt;p&gt;One important thing to mention that is transparent for any end user, is that there are two kinds of fills: &lt;em&gt;complete&lt;/em&gt; and &lt;em&gt;partial&lt;/em&gt;. A complete fill will buy all the offered tokens from the order, and for the partial fill, we need to specify the amount we want to buy from the order. For us, that will be running and probably improving this implementation is relevant because, as we will see in a moment, we can design different matching strategies using these two different fills.&lt;/p&gt; &#xA;&lt;p&gt;Up to this point, we quickly covered the key actions that can be performed over the orders. There shouldn&#39;t be any surprise if we mention that each action is performed by a transaction.&lt;/p&gt; &#xA;&lt;p&gt;Now, let&#39;s suppose, besides the previous order, we have another one offering of &lt;code&gt;20 tokenB&lt;/code&gt;, with a unit price of &lt;code&gt;0.4 tokenA&lt;/code&gt;. We could earn some tokens by “combining” the two orders and take advantage of the price difference. Following the example, given we bought &lt;code&gt;6 tokenA&lt;/code&gt; using &lt;code&gt;12 tokenB&lt;/code&gt;, we now can use these &lt;code&gt;6 tokenA&lt;/code&gt; to buy back &lt;code&gt;15 tokenB&lt;/code&gt; from this other order, earning &lt;code&gt;3 tokenB&lt;/code&gt;. These two fills can be combined into a single transaction, in fact, we could combine more than two orders.&lt;/p&gt; &#xA;&lt;p&gt;The SOR has the ability to build these transactions matching orders programmatically, that is, combining orders into a single transaction. Which orders the SOR will match is determined by the strategy that must be configured in advance. To reason about any strategy, we need to classify orders into sell or buy. It&#39;s possible for an order to be a buy or sell, depending on the token used to earn the difference between the orders. In the previous example, we earned in &lt;code&gt;tokenB&lt;/code&gt;, but we could have earned in &lt;code&gt;tokenA&lt;/code&gt;. So, given a token pair, we will specify which token is the commodity and which is the currency, which will establish if a given order is a sell order or a buy order: If the order offers commodity, then it will be classified as a sell order. On the other hand, if the order involves buying the commodity with currency (that is offers currency), it will be considered a buy order.&lt;/p&gt; &#xA;&lt;p&gt;Using the previous example we could have two cases:&lt;/p&gt; &#xA;&lt;table align=&#34;center&#34;&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt;&#xA;   &lt;th&gt; Commodity A | Currency B &lt;/th&gt;&#xA;   &lt;th&gt; Commodity B | Currency A &lt;/th&gt;&#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt;&#xA;   &lt;td&gt; &#xA;    &lt;table&gt; &#xA;     &lt;thead&gt; &#xA;      &lt;tr&gt; &#xA;       &lt;th align=&#34;center&#34;&gt;Amount&lt;/th&gt; &#xA;       &lt;th align=&#34;center&#34;&gt;Price&lt;/th&gt; &#xA;       &lt;th align=&#34;center&#34;&gt;Type&lt;/th&gt; &#xA;      &lt;/tr&gt; &#xA;     &lt;/thead&gt; &#xA;     &lt;tbody&gt; &#xA;      &lt;tr&gt; &#xA;       &lt;td align=&#34;center&#34;&gt;&lt;code&gt;10 tokenA&lt;/code&gt;&lt;/td&gt; &#xA;       &lt;td align=&#34;center&#34;&gt;&lt;code&gt;2 tokenB&lt;/code&gt;&lt;/td&gt; &#xA;       &lt;td align=&#34;center&#34;&gt;Sell&lt;/td&gt; &#xA;      &lt;/tr&gt; &#xA;      &lt;tr&gt; &#xA;       &lt;td align=&#34;center&#34;&gt;&lt;code&gt;8 tokenA&lt;/code&gt;&lt;/td&gt; &#xA;       &lt;td align=&#34;center&#34;&gt;&lt;code&gt;2.5 tokenB&lt;/code&gt;&lt;/td&gt; &#xA;       &lt;td align=&#34;center&#34;&gt;Buy&lt;/td&gt; &#xA;      &lt;/tr&gt; &#xA;     &lt;/tbody&gt; &#xA;    &lt;/table&gt; &lt;/td&gt;&#xA;   &lt;td&gt; &#xA;    &lt;table&gt; &#xA;     &lt;thead&gt; &#xA;      &lt;tr&gt; &#xA;       &lt;th align=&#34;center&#34;&gt;Amount&lt;/th&gt; &#xA;       &lt;th align=&#34;center&#34;&gt;Price&lt;/th&gt; &#xA;       &lt;th align=&#34;center&#34;&gt;Type&lt;/th&gt; &#xA;      &lt;/tr&gt; &#xA;     &lt;/thead&gt; &#xA;     &lt;tbody&gt; &#xA;      &lt;tr&gt; &#xA;       &lt;td align=&#34;center&#34;&gt;&lt;code&gt;20 tokenB&lt;/code&gt;&lt;/td&gt; &#xA;       &lt;td align=&#34;center&#34;&gt;&lt;code&gt;0.4 tokenA&lt;/code&gt;&lt;/td&gt; &#xA;       &lt;td align=&#34;center&#34;&gt;Sell&lt;/td&gt; &#xA;      &lt;/tr&gt; &#xA;      &lt;tr&gt; &#xA;       &lt;td align=&#34;center&#34;&gt;&lt;code&gt;20 tokenB&lt;/code&gt;&lt;/td&gt; &#xA;       &lt;td align=&#34;center&#34;&gt;&lt;code&gt;0.5 tokenA&lt;/code&gt;&lt;/td&gt; &#xA;       &lt;td align=&#34;center&#34;&gt;Buy&lt;/td&gt; &#xA;      &lt;/tr&gt; &#xA;     &lt;/tbody&gt; &#xA;    &lt;/table&gt; &lt;/td&gt;&#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;p&gt;If we want our earnings to be in &lt;code&gt;tokenB&lt;/code&gt;, then the commodity must be &lt;code&gt;tokenA&lt;/code&gt;. We can buy from the sell order, &lt;code&gt;6 tokenA&lt;/code&gt; using &lt;code&gt;12 tokenB&lt;/code&gt;, then using these &lt;code&gt;6 tokenA&lt;/code&gt; we buy back &lt;code&gt;15 tokenB&lt;/code&gt; from the buy order, earning &lt;code&gt;3 tokenB&lt;/code&gt;. However, if we want our earnings to be in &lt;code&gt;tokenA&lt;/code&gt;, then the commodity must be &lt;code&gt;tokenB&lt;/code&gt;. So we can buy from the sell order, &lt;code&gt;18 tokenB&lt;/code&gt; using &lt;code&gt;7 tokenA&lt;/code&gt;, then using these &lt;code&gt;18 tokenB&lt;/code&gt; we buy back &lt;code&gt;9 tokenA&lt;/code&gt; from the buy order, earning &lt;code&gt;2 tokenA&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Building and running&lt;/h2&gt; &#xA;&lt;h3&gt;Docker&lt;/h3&gt; &#xA;&lt;p&gt;A ready-to-run, containerized version of the Smart Order Router is availabe via the &lt;a href=&#34;https://raw.githubusercontent.com/geniusyield/smart-order-router/main/ghcr.io/geniusyield/smart-order-router:latest&#34;&gt;GitHub Container Registry&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;A Smart Order Router container instance using the Maestro backend can be started by using the following snippet:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# SMART ORDER INSTANCE ROUTER USING MAESTRO&#xA;# =========================================&#xA;# Replace these values with your configuration:&#xA;PAYMENT_SIGNING_KEY_CBOR_HEX=5820d682e237a04d43ad011fdecd141acd485f6d3d634466692d58f6d75250f39134&#xA;COLLATERAL_UTXO_REF=7cc7b044d26981d3fc73ae72994f289d99ba113ceefb5b83f4d7643bfb12682a#1&#xA;MAESTRO_API_KEY=some_api_key&#xA;CARDANO_NETWORK=testnet-preprod&#xA;&#xA;docker run -it \&#xA;    -e BOTC_SKEY=&#34;{\&#34;cborHex\&#34;: \&#34;$PAYMENT_SIGNING_KEY_CBOR_HEX\&#34;, \&#34;type\&#34;: \&#34;PaymentSigningKeyShelley_ed25519\&#34;, \&#34;description\&#34;: \&#34;Payment Signing Key\&#34;}&#34; \&#xA;    -e BOTC_COLLATERAL=&#34;$COLLATERAL_UTXO_REF&#34; \&#xA;    -e BOTC_CONFIG=&#34;{ \&#34;coreProvider\&#34;: { \&#34;maestroToken\&#34;: \&#34;$MAESTRO_API_KEY\&#34; }, \&#34;networkId\&#34;: \&#34;$CARDANO_NETWORK\&#34;, \&#34;logging\&#34;: [{ \&#34;type\&#34;: { \&#34;tag\&#34;: \&#34;stderr\&#34; }, \&#34;severity\&#34;: \&#34;Info\&#34;, \&#34;verbosity\&#34;: \&#34;V2\&#34; }],\&#34;utxoCacheEnable\&#34;: false }&#34; \&#xA;    ghcr.io/geniusyield/smart-order-router:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Please make sure to replace the placeholders with the actual values.&lt;/p&gt; &#xA;&lt;p&gt;Alternatively the Blockfrost or the Kupo backend could be used.&lt;/p&gt; &#xA;&lt;p&gt;This can be accomplished for Blockfrost by using the following commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# SMART ORDER ROUTER INSTANCE USING BLOCKFROST&#xA;# ============================================&#xA;# Replace these values with your configuration:&#xA;PAYMENT_SIGNING_KEY_CBOR_HEX=5820d682e237a04d43ad011fdecd141acd485f6d3d634466692d58f6d75250f39134&#xA;COLLATERAL_UTXO_REF=7cc7b044d26981d3fc73ae72994f289d99ba113ceefb5b83f4d7643bfb12682a#1&#xA;BLOCKFROST_API_KEY=some_api_key&#xA;CARDANO_NETWORK=testnet-preprod&#xA;&#xA;docker run -it \&#xA;    -e BOTC_SKEY=&#34;{\&#34;cborHex\&#34;: \&#34;$PAYMENT_SIGNING_KEY_CBOR_HEX\&#34;, \&#34;type\&#34;: \&#34;PaymentSigningKeyShelley_ed25519\&#34;, \&#34;description\&#34;: \&#34;Payment Signing Key\&#34;}&#34; \&#xA;    -e BOTC_COLLATERAL=&#34;$COLLATERAL_UTXO_REF&#34; \&#xA;    -e BOTC_CONFIG=&#34;{ \&#34;coreProvider\&#34;: { \&#34;blockfrostKey\&#34;: \&#34;$BLOCKFROST_API_KEY\&#34; }, \&#34;networkId\&#34;: \&#34;$CARDANO_NETWORK\&#34;, \&#34;logging\&#34;: [{ \&#34;type\&#34;: { \&#34;tag\&#34;: \&#34;stderr\&#34; }, \&#34;severity\&#34;: \&#34;Info\&#34;, \&#34;verbosity\&#34;: \&#34;V2\&#34; }],\&#34;utxoCacheEnable\&#34;: false }&#34; \&#xA;    ghcr.io/geniusyield/smart-order-router:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And the following commands can be used to start a Kupo backed instance:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# SMART ORDER ROUTER INSTANCE USING KUPO&#xA;# ======================================&#xA;# Replace these values with your configuration:&#xA;PAYMENT_SIGNING_KEY_CBOR_HEX=5820d682e237a04d43ad011fdecd141acd485f6d3d634466692d58f6d75250f39134&#xA;COLLATERAL_UTXO_REF=7cc7b044d26981d3fc73ae72994f289d99ba113ceefb5b83f4d7643bfb12682a#1&#xA;KUPO_URL=http://some.url.to.your.kupo.instance:1442&#xA;CARDANO_NODE_SOCKET_PATH=/cardano/node/socket&#xA;CARDANO_NETWORK=testnet-preprod&#xA;&#xA;docker run -it \&#xA;    -e BOTC_SKEY=&#34;{\&#34;cborHex\&#34;: \&#34;$PAYMENT_SIGNING_KEY_CBOR_HEX\&#34;, \&#34;type\&#34;: \&#34;PaymentSigningKeyShelley_ed25519\&#34;, \&#34;description\&#34;: \&#34;Payment Signing Key\&#34;}&#34; \&#xA;    -e BOTC_COLLATERAL=&#34;$COLLATERAL_UTXO_REF&#34; \&#xA;    -e BOTC_CONFIG=&#34;{\&#34;coreProvider\&#34;: { \&#34;socketPath\&#34;: \&#34;/cardano/node/socket\&#34;, \&#34;kupoUrl\&#34;: \&#34;$KUPO_URL\&#34; }, \&#34;networkId\&#34;: \&#34;$CARDANO_NETWORK\&#34;, \&#34;logging\&#34;: [{ \&#34;type\&#34;: { \&#34;tag\&#34;: \&#34;stderr\&#34; }, \&#34;severity\&#34;: \&#34;Info\&#34;, \&#34;verbosity\&#34;: \&#34;V2\&#34; }], \&#34;utxoCacheEnable\&#34;: false }&#34; \&#xA;    -v $CARDANO_NODE_SOCKET_PATH:/cardano/node/socket&#xA;    ghcr.io/geniusyield/smart-order-router:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] &lt;span&gt;🚧&lt;/span&gt; Coming Soon: docker-compose &lt;span&gt;🚧&lt;/span&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Local build&lt;/h3&gt; &#xA;&lt;p&gt;First, you need to setup the necessary tooling to work with &lt;a href=&#34;https://github.com/input-output-hk/haskell.nix&#34;&gt;haskell.nix&lt;/a&gt;. A complete guide and troubleshooting of how to install and configure &lt;code&gt;nix&lt;/code&gt; can be found on one of the officials IOG repositories: &lt;a href=&#34;https://github.com/input-output-hk/plutus-apps/raw/main/CONTRIBUTING.adoc#installing-and-setting-up-nix&#34;&gt;plutus-apps&lt;/a&gt;. Once we completed the previous steps we can simply run &lt;code&gt;nix develop&lt;/code&gt;, and it will drop you into a shell with all the necessary tools. Once inside the environment, you can build the order bot with &lt;code&gt;cabal build all&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Orderbot Config&lt;/h3&gt; &#xA;&lt;p&gt;To run the order bot, it is necessary to setup the provider and specify the bot options. There is one option for a completely local provider and two remote ones.&lt;/p&gt; &#xA;&lt;h4&gt;Local Provider&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/CardanoSolutions/kupo&#34;&gt;Kupo&lt;/a&gt; can be used as a local provider. For this it is necessary to provide a path to a cardano node socket file and the Kupo url in the &lt;a href=&#34;https://raw.githubusercontent.com/geniusyield/smart-order-router/main/config-files/atlas-config-kupo.json&#34;&gt;atlas-config-kupo.json&lt;/a&gt; file.&lt;/p&gt; &#xA;&lt;h4&gt;Remote Providers&lt;/h4&gt; &#xA;&lt;p&gt;There are two possible remote providers: &lt;code&gt;Maestro&lt;/code&gt; or &lt;code&gt;Blockfrost&lt;/code&gt;. In order to function properly, each provider requires a specific &lt;code&gt;API-TOKEN&lt;/code&gt; or &lt;code&gt;API-KEY&lt;/code&gt; (that should be created on each official site). These must be entered into the appropriate provider configuration file, either &lt;a href=&#34;https://raw.githubusercontent.com/geniusyield/smart-order-router/main/config-files/atlas-config-maestro.json&#34;&gt;atlas-config-maestro.json&lt;/a&gt; or &lt;a href=&#34;https://raw.githubusercontent.com/geniusyield/smart-order-router/main/config-files/atlas-config-blockfrost.json&#34;&gt;atlas-config-blockfrost.json&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You must also configure the &lt;code&gt;networkId&lt;/code&gt; to specify which Blockchain to use. Inside any of those configuration files, we can also configure the logging mechanisms, we can specify the log severity level with &lt;code&gt;Debug&lt;/code&gt;, &lt;code&gt;Info&lt;/code&gt;, &lt;code&gt;Warning&lt;/code&gt;, but also the sinking of the information by choosing between a console log or a file. Besides different levels of verbosity. We even can have multiple logs, for instance on the example below we are logging some &lt;code&gt;Info&lt;/code&gt; level info into de console, and some &lt;code&gt;Debug&lt;/code&gt; level info into the &lt;code&gt;Debug.log&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&#34;logging&#34;: [ { &#34;type&#34;: { &#34;tag&#34;: &#34;stderr&#34; }, &#34;severity&#34;: &#34;Info&#34;, &#34;verbosity&#34;: &#34;V2&#34; }&#xA;           , { &#34;type&#34;: { &#34;tag&#34;: &#34;gySource&#34;, &#34;source&#34; : &#34;Debug.logs&#34; }, &#34;severity&#34;: &#34;Debug&#34;, &#34;verbosity&#34;: &#34;V2&#34; }&#xA;           ]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In addition, to configure the &lt;strong&gt;bot&lt;/strong&gt;, it is necessary to edit the &lt;a href=&#34;https://raw.githubusercontent.com/geniusyield/smart-order-router/main/config-files/bot-config.json&#34;&gt;bot-config.json&lt;/a&gt; file. The complete bot configuration looks like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;   &#34;signingKeyFP&#34;:&#34;bot.skey&#34;,&#xA;   &#34;nftMintingPolicyFP&#34;:&#34;compiled-scripts/minting-policy&#34;,&#xA;   &#34;orderValidatorFP&#34;:&#34;compiled-scripts/partial-order&#34;,&#xA;   &#34;validatorRefs&#34;:{&#xA;      &#34;refAddr&#34;:&#34;addr_test1wpgexmeunzsykesf42d4eqet5yvzeap6trjnflxqtkcf66g0kpnxt&#34;,&#xA;      &#34;refNftAC&#34;:&#34;fae686ea8f21d567841d703dea4d4221c2af071a6f2b433ff07c0af2.e6a295bb83d06f53fcf91151f54acec0a63fbd6f0d924206d5d012e6da3b72af&#34;,&#xA;      &#34;refNftUtxoRef&#34;:&#34;39f987a6beb9cc4c45bba149a21c28068f640f3593f15f8157f0b6022b431977#0&#34;,&#xA;      &#34;scriptRef&#34;:&#34;39f987a6beb9cc4c45bba149a21c28068f640f3593f15f8157f0b6022b431977#1&#34;,&#xA;      &#34;nftPolicyRef&#34;:&#34;39f987a6beb9cc4c45bba149a21c28068f640f3593f15f8157f0b6022b431977#0&#34;&#xA;   },&#xA;   &#34;strategy&#34;:&#34;OneSellToManyBuy&#34;,&#xA;   &#34;scanDelay&#34;:40000000,&#xA;   &#34;maxOrderMatches&#34;:5,&#xA;   &#34;maxTxsPerIteration&#34;:5,&#xA;   &#34;randomizeMatchesFound&#34;:true,&#xA;   &#34;scanTokens&#34;:[&#xA;      {&#xA;         &#34;commodityAsset&#34;:&#34;c6e65ba7878b2f8ea0ad39287d3e2fd256dc5c4160fc19bdf4c4d87e.7447454e53&#34;,&#xA;         &#34;currencyAsset&#34;:&#34;lovelace&#34;&#xA;      }&#xA;   ]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;signingKeyFP&lt;/code&gt;, we need to specify the bot signing key, that must be placed on a file.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;collateral&lt;/code&gt;, an optional field to specify the collateral for the bot. If not present, Atlas will choose a suitable UTxO as collateral.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;nftMintingPolicyFP&lt;/code&gt; and &lt;code&gt;orderValidatorFP&lt;/code&gt;, the filepath where the minting policy and validator are stored.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&#34;validatorsRefs&#34;&lt;/code&gt;, contains the information necessary for the validator. Contains 3 mandatory fields and 2 optional ones. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;&#34;refAddr&#34;&lt;/code&gt;, address where the reference NFT is placed.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;&#34;refNftAc&#34;&lt;/code&gt;, assetClass of the reference NFT is placed.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;&#34;refNftUtxoRef&#34;&lt;/code&gt;, UTxO reference where the reference NFT is placed.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;&#34;scriptRef&#34;&lt;/code&gt;, an optional parameter for the script reference. This UTxO has to have the partial order validator as a script ref.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;&#34;nftPolicyRef&#34;&lt;/code&gt;, an optional parameter for the script reference of the partial orders NFT. This UTxO has to have the partial order NFT minting policy as a script ref.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;strategy&lt;/code&gt;, currently the SOR supports one possible strategy: OneSellToManyBuy.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;scanDelay&lt;/code&gt;, the duration of time we wait before re-initiating a complete iteration for the bot.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;maxOrderMatches&lt;/code&gt;, is the maximum amount of orders to be matched into a single transaction. 8 orders is near the limit that will fit into a transaction.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;maxTxsPerIteration&lt;/code&gt;, is the maximum amount of transactions that the bot will build, sign and submit in each iteration.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;randomizeMatchesFound&lt;/code&gt;, a boolean that dictates whether the bot chooses the tx to submit at random (to decrease collisions), or not (to maximize profit)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;scanTokens&lt;/code&gt;, the list of token pairs to be scanned. Each element in the list specifies which token in the pair is the &lt;code&gt;commodityAsset&lt;/code&gt; and which is the &lt;code&gt;currencyAsset&lt;/code&gt;. The bot will arbitrage the orders to get tokens of the &lt;code&gt;currencyAsset&lt;/code&gt;. Each token must be written with the format policyId.hexTokenName. For convenience, scanning ADAs can be done by writing lovelace or the empty string. The multi-asset order book is built using this list.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Creating Signing Key&lt;/h4&gt; &#xA;&lt;p&gt;Another important and necessary setup to make is the creation of the bot wallet. If you already have a wallet signing key to use, you just need to put the signing key in a file and properly configure &lt;code&gt;signingKeyFP&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you want to create a new wallet, you can create everything using the &lt;code&gt;cardano-cli&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cardano-cli address key-gen \&#xA;&#x9;--verification-key-file bot.vkey \&#xA;&#x9;--signing-key-file bot.skey&#xA;&#xA;cardano-cli address build \&#xA;    --payment-verification-key-file bot.vkey \&#xA;    --testnet-magic 1 \&#xA;    --out-file bot.preprod.addr&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will create the files &lt;code&gt;bot.skey&lt;/code&gt;, &lt;code&gt;bot.vkey&lt;/code&gt;, and &lt;code&gt;bot.preprod.addr&lt;/code&gt;: the private signing key, the verification key, and the wallet address on the preprod testnet. You can claim some &lt;strong&gt;preprod&lt;/strong&gt; lovelaces using the &lt;a href=&#34;https://docs.cardano.org/cardano-testnet/tools/faucet/&#34;&gt;faucet&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s &lt;strong&gt;recomended&lt;/strong&gt; to create and setup a &lt;code&gt;collateral&lt;/code&gt;. A UTxO with 5 ADAs will do the work. But as we mentioned the &lt;code&gt;collateral&lt;/code&gt; config field is optional.&lt;/p&gt; &#xA;&lt;h4&gt;Deployed Contract&lt;/h4&gt; &#xA;&lt;p&gt;The SOR has the ability to use reference scripts on the filling transactions to help minimize the fees. To do that, we need to use the official contract information that is completely placed on the blockchain. That is the validator and minting policy.&lt;/p&gt; &#xA;&lt;h5&gt;Preprod&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;   &#34;validatorRefs&#34;:{&#xA;      &#34;refAddr&#34;:&#34;addr_test1wpgexmeunzsykesf42d4eqet5yvzeap6trjnflxqtkcf66g0kpnxt&#34;,&#xA;      &#34;refNftAC&#34;:&#34;fae686ea8f21d567841d703dea4d4221c2af071a6f2b433ff07c0af2.e6a295bb83d06f53fcf91151f54acec0a63fbd6f0d924206d5d012e6da3b72af&#34;,&#xA;      &#34;refNftUtxoRef&#34;:&#34;39f987a6beb9cc4c45bba149a21c28068f640f3593f15f8157f0b6022b431977#0&#34;,&#xA;      &#34;scriptRef&#34;:&#34;39f987a6beb9cc4c45bba149a21c28068f640f3593f15f8157f0b6022b431977#1&#34;,&#xA;      &#34;nftPolicyRef&#34;:&#34;39f987a6beb9cc4c45bba149a21c28068f640f3593f15f8157f0b6022b431977#0&#34;&#xA;   }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Mainnet&lt;/h5&gt; &#xA;&lt;p&gt;&lt;span&gt;🚧&lt;/span&gt; Coming Soon &lt;span&gt;🚧&lt;/span&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;   &#34;validatorRefs&#34;:{&#xA;      &#34;refAddr&#34;:&#34;&#34;,&#xA;      &#34;refNftAC&#34;:&#34;&#34;,&#xA;      &#34;refNftUtxoRef&#34;:&#34;&#34;,&#xA;      &#34;scriptRef&#34;:&#34;&#34;,&#xA;      &#34;nftPolicyRef&#34;:&#34;&#34;&#xA;   }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Running&lt;/h4&gt; &#xA;&lt;p&gt;Once we compiled and configured the order bot, you can execute using the &lt;a href=&#34;https://raw.githubusercontent.com/geniusyield/smart-order-router/main/Makefile&#34;&gt;Makefile&lt;/a&gt;: &lt;code&gt;make orderbot-maestro&lt;/code&gt;, &lt;code&gt;make orderbot-blockfrost&lt;/code&gt; or &lt;code&gt;make orderbot-kupo&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Testing&lt;/h4&gt; &#xA;&lt;p&gt;The SOR is equipped with a test suite that employs QuickCheck to perform property-based testing. By implementing certain properties, we are able to verify various important aspects of the strategies, like for example, given a matching between sell and buy orders there is always a &lt;a href=&#34;https://raw.githubusercontent.com/geniusyield/smart-order-router/main/geniusyield-orderbot/test/Tests/Prop/Strategies.hs#L167-L177&#34;&gt;positive earning&lt;/a&gt;. Among others that can be found on &lt;a href=&#34;https://raw.githubusercontent.com/geniusyield/smart-order-router/main/geniusyield-orderbot/test/Tests/Prop/Strategies.hs&#34;&gt;Tests.Prop.Strategies&lt;/a&gt; module.&lt;/p&gt; &#xA;&lt;p&gt;For running the tests we can just simply execute &lt;code&gt;make orderbot-tests&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Design&lt;/h2&gt; &#xA;&lt;p&gt;The SOR is organized into 5 main folders:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/geniusyield/smart-order-router/main/compiled-scripts&#34;&gt;&lt;code&gt;compiled-scripts&lt;/code&gt;&lt;/a&gt;, contains the compiled validator and minting policy of the DEX.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/geniusyield/smart-order-router/main/geniusyield-dex-api&#34;&gt;&lt;code&gt;geniusyield-dex-api&lt;/code&gt;&lt;/a&gt;, defines the DEX interface to query and build transactions.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/geniusyield/smart-order-router/main/geniusyield-orderbot-framework&#34;&gt;&lt;code&gt;geniusyield-orderbot-framework&lt;/code&gt;&lt;/a&gt;, implement the main abstract tools for the SOR.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/geniusyield/smart-order-router/main/geniusyield-orderbot&#34;&gt;&lt;code&gt;geniusyield-orderbot&lt;/code&gt;&lt;/a&gt;, the executable is implemented here, together with the strategies.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/geniusyield/smart-order-router/main/impl&#34;&gt;&lt;code&gt;impl&lt;/code&gt;&lt;/a&gt;, specific implementations of the orderbook and data-provider.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Backpack&lt;/h3&gt; &#xA;&lt;p&gt;This is an order matching bot implementation that is meant to be modular and polymorphic. It uses backpack to support this goal. Backpack is surprisingly flexible, supporting signature merging and signature thinning. This may be especially relevant for modular orderbot implementations. &lt;a href=&#34;https://github.com/danidiaz/really-small-backpack-example/tree/master/lesson4-signature-thinning&#34;&gt;Signature thinning&lt;/a&gt; is when an indefinite library depends on a signature but only demands a subset of said signature, allowing an implementation that only implements said subset of the interface to be used merrily with the library.&lt;/p&gt; &#xA;&lt;p&gt;Solid resource for learning backpack: &lt;a href=&#34;https://github.com/danidiaz/really-small-backpack-example&#34;&gt;GitHub - danidiaz/really-small-backpack-example: A really small example of the Backpack module system for Haskell&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Strategies&lt;/h2&gt; &#xA;&lt;p&gt;On the &lt;a href=&#34;https://raw.githubusercontent.com/geniusyield/smart-order-router/main/geniusyield-orderbot/src/Strategies.hs&#34;&gt;&lt;code&gt;Strategies&lt;/code&gt;&lt;/a&gt; module, you can find all the strategies implemented by the SOR. Currently, there is only one called &lt;a href=&#34;https://raw.githubusercontent.com/geniusyield/smart-order-router/main/geniusyield-orderbot/src/Strategies.hs#L36C20-L36C36&#34;&gt;&lt;code&gt;OneSellToManyBuy&lt;/code&gt;&lt;/a&gt;, which basically takes the best sell order (the one with the lowest price) and searches for many buy orders (starting from the one with the highest price), ideally buying the total amount of offered tokens, or until it reaches the maxOrderMatches.&lt;/p&gt; &#xA;&lt;h3&gt;Adding a new strategy&lt;/h3&gt; &#xA;&lt;p&gt;In this Haskell implementation, a strategy is simply a function with type &lt;code&gt;OrderAssetPair -&amp;gt; OrderBook -&amp;gt; [MatchResult]&lt;/code&gt;. This function returns a list of matching results from a pair of tokens and an order book, which consists of both sell and buy orders. Each matching result represents a transaction, which involves a specific set of sell and buy orders.&lt;/p&gt; &#xA;&lt;p&gt;We can start with the most bureaucratic part of adding a new strategy. We need to define the name of the new strategy, so let&#39;s say we want to implement the &#34;dual&#34; strategy to the one that is already there. We want to implement then one strategy that given the best buy order, searches for many sell orders. We add then a new constructor &lt;code&gt;OneBuyToManySell&lt;/code&gt; to the type BotStrategy&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;data BotStrategy = OneSellToManyBuy&#xA;                 | OneBuyToManySell&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We must adjust some straightforward instances with the new constructor: &lt;code&gt;FromJSON&lt;/code&gt; and &lt;code&gt;Var&lt;/code&gt;. As is the case with &lt;a href=&#34;https://raw.githubusercontent.com/geniusyield/smart-order-router/main/geniusyield-orderbot/src/Strategies.hs#L56-L59&#34;&gt;&lt;code&gt;mkIndependentStrategy&lt;/code&gt;&lt;/a&gt;, adding a new particular case for &lt;code&gt;OneBuyToManySell&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;mkIndependentStrategy :: BotStrategy -&amp;gt; Natural -&amp;gt; IndependentStrategy&#xA;mkIndependentStrategy bs maxOrders _ bk =&#xA;    case bs of&#xA;      OneSellToManyBuy -&amp;gt; oneSellToManyBuy maxOrders bk&#xA;      OneBuyToManySell -&amp;gt; oneBuyToManySell maxOrders bk&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once we get to this point, we can focus on the implementation of the new function. In fact, we can start with a very silly implementation that doesn&#39;t find any matching with the goal of compiling everything.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;oneBuyToManySell :: Natural -&amp;gt; OrderBook -&amp;gt; [MatchResult]&#xA;oneBuyToManySell _ _ = []&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Even more! We can go to the &lt;a href=&#34;https://raw.githubusercontent.com/geniusyield/smart-order-router/main/geniusyield-orderbot/test/Main.hs&#34;&gt;Main&lt;/a&gt; testing module, and add the new constructor &lt;code&gt;OneBuyToManySell&lt;/code&gt; to &lt;a href=&#34;https://raw.githubusercontent.com/geniusyield/smart-order-router/main/geniusyield-orderbot/test/Main.hs#L25C9-L25C29&#34;&gt;&#34;Strategies tests&#34; list&lt;/a&gt; and it will be enough to start testing our strategy by running the tests.&lt;/p&gt; &#xA;&lt;p&gt;Finishing the implementation of &lt;code&gt;oneBuyToManySell&lt;/code&gt; is left as an exercise.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Hint&lt;/summary&gt; &#xA; &lt;blockquote&gt; &#xA;  &lt;p&gt;Checking &lt;a href=&#34;https://raw.githubusercontent.com/geniusyield/smart-order-router/main/geniusyield-orderbot/src/Strategies.hs#L95-L132&#34;&gt;&lt;code&gt;multiFill&lt;/code&gt;&lt;/a&gt;, can help to realize that it&#39;s enough to use &lt;a href=&#34;https://raw.githubusercontent.com/geniusyield/smart-order-router/main/geniusyield-orderbot/src/Strategies.hs#L82-L92&#34;&gt;&lt;code&gt;oneSellToManyBuy&lt;/code&gt;&lt;/a&gt; as inspiration and &#34;flip&#34; something.&lt;/p&gt; &#xA; &lt;/blockquote&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;Questions: Choosing between one strategy or the other will always enforce some matching strategy, so will it be possible to merge the two strategies into a single one? Or it will be better to run two different SOR instances?&lt;/p&gt; &#xA;&lt;h2&gt;Troubleshooting&lt;/h2&gt; &#xA;&lt;h3&gt;Providers&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;geniusyield-orderbot-exe: MspvApiError &#34;SystemStart&#34; (MaestroApiKeyMissing &#34;Invalid authentication credentials&#34;)&lt;/code&gt;, you need to setup the corresponding Maestro token into &lt;a href=&#34;https://raw.githubusercontent.com/geniusyield/smart-order-router/main/config-files/atlas-config-maestro.json&#34;&gt;atlas-config-maestro.json&lt;/a&gt; file.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;geniusyield-orderbot-exe: BlpvApiError &#34;LedgerGenesis&#34; (BlockfrostTokenMissing &#34;Invalid project token.&#34;)&lt;/code&gt; you need to setup the corresponding Blockfrost token into &lt;a href=&#34;https://raw.githubusercontent.com/geniusyield/smart-order-router/main/config-files/atlas-config-blockfrost.json&#34;&gt;atlas-config-blockfrost.json&lt;/a&gt; file.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Cardano&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;BadInputsUTxO&lt;/code&gt; in the exception that is raised during tx submission, not creation/balancing, usually indicates contention. An order you are trying to match is being matched by another transaction.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;ExUnitsTooBigUTxO&lt;/code&gt; in the exception means you are trying to match too many orders simultaneously, making the transaction size cross the limit.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;BalancingErrorInsufficientFunds&lt;/code&gt; in the exception indicates there are not enough of one or many tokens to construct the transaction. If you see ADA in the value that is printed afterward, it means your bot is out of ADA. More often, however, this error will be raised if your matching strategy does not return proper order matches and there aren&#39;t enough tokens in the transaction bucket to pay an order.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;GYTxMonadException &#34;partiallyFillPartialOrder: amount x must be smaller than offered amount x&lt;/code&gt;, you are trying to partially fill an order, but the partial fill amount is the max volume of the order. Use &lt;a href=&#34;https://raw.githubusercontent.com/geniusyield/smart-order-router/main/geniusyield-orderbot-framework/src/GeniusYield/OrderBot/MatchingStrategy.hs#L98C17-L98C29&#34;&gt;&lt;code&gt;CompleteFill&lt;/code&gt;&lt;/a&gt; instead. See &lt;a href=&#34;https://raw.githubusercontent.com/geniusyield/smart-order-router/main/geniusyield-orderbot-framework/src/GeniusYield/OrderBot/MatchingStrategy.hs#L98&#34;&gt;GeniusYield.OrderBot.MatchingStrategy&lt;/a&gt; for more information.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Cabal &amp;lt;&amp;gt; Haskell&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;HLS will not work in signature modules, nor will it work in modules importing a signature module.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Cabal mixins can be flaky sometimes. If you&#39;re sure you&#39;re using mixins properly but still getting &#34;Module X does not require Y&#34;, try cleaning the geniusyield-orderbot build and rebuilding from scratch.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/geniusyield/smart-order-router/main/LICENSE&#34;&gt;Apache-2.0&lt;/a&gt; © &lt;a href=&#34;https://www.geniusyield.co&#34;&gt;GYELD GMBH&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>