<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Common Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-06-25T01:34:01Z</updated>
  <subtitle>Daily Trending of Common Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>fukamachi/dexador</title>
    <updated>2023-06-25T01:34:01Z</updated>
    <id>tag:github.com,2023-06-25:/fukamachi/dexador</id>
    <link href="https://github.com/fukamachi/dexador" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A fast HTTP client for Common Lisp&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Dexador&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/fukamachi/dexador&#34;&gt;&lt;img src=&#34;https://travis-ci.org/fukamachi/dexador.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://coveralls.io/r/fukamachi/dexador&#34;&gt;&lt;img src=&#34;https://coveralls.io/repos/fukamachi/dexador/badge.svg?branch=master&#34; alt=&#34;Coverage Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Dexador is yet another HTTP client for Common Lisp with neat APIs and connection-pooling.&lt;/p&gt; &#xA;&lt;h2&gt;Warning&lt;/h2&gt; &#xA;&lt;p&gt;This software is still BETA quality. The APIs will be likely to change.&lt;/p&gt; &#xA;&lt;h2&gt;Differences from Drakma&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fast, particularly when requesting to the same host (See &lt;a href=&#34;https://raw.githubusercontent.com/fukamachi/dexador/master/#benchmark&#34;&gt;Benchmark&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Neat APIs&lt;/li&gt; &#xA; &lt;li&gt;Signal a condition when HTTP request failed&lt;/li&gt; &#xA; &lt;li&gt;OpenSSL isn&#39;t required for Windows&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See also &lt;a href=&#34;http://www.slideshare.net/fukamachi/dexador-rises&#34;&gt;a presentation given at Lisp Meetup #31&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-common-lisp&#34;&gt;(dex:get &#34;http://lisp.org/&#34;)&#xA;&#xA;(dex:post &#34;https://example.com/login&#34;&#xA;          :content &#39;((&#34;name&#34; . &#34;fukamachi&#34;) (&#34;password&#34; . &#34;1ispa1ien&#34;)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Posting a form-data&lt;/h3&gt; &#xA;&lt;p&gt;You can specify a form-data at &lt;code&gt;:content&lt;/code&gt; in an association list. The data will be sent in &lt;code&gt;application/x-www-form-urlencoded&lt;/code&gt; format.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-common-lisp&#34;&gt;(dex:post &#34;http://example.com/entry/create&#34;&#xA;          :content &#39;((&#34;title&#34; . &#34;The Truth About Lisp&#34;)&#xA;                     (&#34;body&#34; . &#34;In which the truth about lisp is revealed, and some alternatives are enumerated.&#34;)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Auto-detects Multipart&lt;/h3&gt; &#xA;&lt;p&gt;If the association list contains a pathname, the data will be sent as &lt;code&gt;multipart/form-data&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-common-lisp&#34;&gt;(dex:post &#34;http://example.com/entry/create&#34;&#xA;          :content &#39;((&#34;photo&#34; . #P&#34;images/2015030201.jpg&#34;)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Following redirects (GET or HEAD)&lt;/h3&gt; &#xA;&lt;p&gt;If the server reports that the requested page has moved to a different location (indicated with a Location header and a 3XX response code), Dexador will redo the request on the new place, the fourth return value shows.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-common-lisp&#34;&gt;(dex:head &#34;http://lisp.org&#34;)&#xA;;=&amp;gt; &#34;&#34;&#xA;;   200&#xA;;   #&amp;lt;HASH-TABLE :TEST EQUAL :COUNT 7 {100D2A47A3}&amp;gt;&#xA;;   #&amp;lt;QURI.URI.HTTP:URI-HTTP http://lisp.org/index.html&amp;gt;&#xA;;   NIL&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can limit the count of redirection by specifying &lt;code&gt;:max-redirects&lt;/code&gt; with an integer. The default value is &lt;code&gt;5&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Using cookies&lt;/h3&gt; &#xA;&lt;p&gt;Dexador adopts &lt;a href=&#34;https://github.com/fukamachi/cl-cookie&#34;&gt;cl-cookie&lt;/a&gt; for its cookie management. All functions takes a cookie-jar instance at &lt;code&gt;:cookie-jar&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-common-lisp&#34;&gt;(defvar *cookie-jar* (cl-cookie:make-cookie-jar))&#xA;&#xA;(dex:head &#34;https://mixi.jp&#34; :cookie-jar *cookie-jar* :verbose t)&#xA;;-&amp;gt; &amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&#xA;;   HEAD / HTTP/1.1&#xA;;   User-Agent: Dexador/0.1 (SBCL 1.2.9); Darwin; 14.1.0&#xA;;   Host: mixi.jp&#xA;;   Accept: */*&#xA;;   &#xA;;   &amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&#xA;;   &amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&#xA;;   HTTP/1.1 200 OK&#xA;;   Date: Tue, 10 Mar 2015 10:16:29 GMT&#xA;;   Server: Apache&#xA;;   X-Dealer: 152151&#xA;;   X-XRDS-Location: https://mixi.jp/xrds.pl&#xA;;   Cache-Control: no-cache&#xA;;   Pragma: no-cache&#xA;;   Vary: User-Agent&#xA;;   Content-Type: text/html; charset=EUC-JP&#xA;;   Set-Cookie: _auid=9d47ca5a00ce4980c41511beb2626fd4; domain=.mixi.jp; path=/; expires=Thu, 09-Mar-2017 10:16:29 GMT&#xA;;   Set-Cookie: _lcp=8ee4121c9866435007fff2c90dc31a4d; domain=.mixi.jp; expires=Wed, 11-Mar-2015 10:16:29 GMT&#xA;;   X-Content-Type-Options: nosniff&#xA;;   &#xA;;   &amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&#xA;&#xA;;; Again&#xA;(dex:head &#34;https://mixi.jp&#34; :cookie-jar *cookie-jar* :verbose t)&#xA;;-&amp;gt; &amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&#xA;;   HEAD / HTTP/1.1&#xA;;   User-Agent: Dexador/0.1 (SBCL 1.2.9); Darwin; 14.1.0&#xA;;   Host: mixi.jp&#xA;;   Accept: */*&#xA;;   Cookie: _auid=b878756ed71a0ed5bcf527e324c78f8c; _lcp=8ee4121c9866435007fff2c90dc31a4d&#xA;;   &#xA;;   &amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&#xA;;   &amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&#xA;;   HTTP/1.1 200 OK&#xA;;   Date: Tue, 10 Mar 2015 10:16:59 GMT&#xA;;   Server: Apache&#xA;;   X-Dealer: 152146&#xA;;   X-XRDS-Location: https://mixi.jp/xrds.pl&#xA;;   Cache-Control: no-cache&#xA;;   Pragma: no-cache&#xA;;   Vary: User-Agent&#xA;;   Content-Type: text/html; charset=EUC-JP&#xA;;   Set-Cookie: _auid=b878756ed71a0ed5bcf527e324c78f8c; domain=.mixi.jp; path=/; expires=Thu, 09-Mar-2017 10:16:59 GMT&#xA;;   Set-Cookie: _lcp=8ee4121c9866435007fff2c90dc31a4d; domain=.mixi.jp; expires=Wed, 11-Mar-2015 10:16:59 GMT&#xA;;   X-Content-Type-Options: nosniff&#xA;;   &#xA;;   &amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Basic Authorization&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-common-lisp&#34;&gt;(dex:head &#34;http://www.hatena.ne.jp/&#34; :basic-auth &#39;(&#34;nitro_idiot&#34; . &#34;password&#34;) :verbose t)&#xA;;-&amp;gt; &amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&#xA;;   HEAD / HTTP/1.1&#xA;;   User-Agent: Dexador/0.1 (SBCL 1.2.9); Darwin; 14.1.0&#xA;;   Host: www.hatena.ne.jp&#xA;;   Accept: */*&#xA;;   Authorization: Basic bml0cm9faWRpb3Q6cGFzc3dvcmQ=&#xA;;   &#xA;;   &amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Faking a User-Agent header&lt;/h3&gt; &#xA;&lt;p&gt;You can overwrite the default User-Agent header by simply specifying &#34;User-Agent&#34; in &lt;code&gt;:headers&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-common-lisp&#34;&gt;(dex:head &#34;http://www.sbcl.org/&#34; :verbose t)&#xA;;-&amp;gt; &amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&#xA;;   HEAD / HTTP/1.1&#xA;;   User-Agent: Dexador/0.1 (SBCL 1.2.6); Darwin; 14.1.0&#xA;;   Host: www.sbcl.org&#xA;;   Accept: */*&#xA;;   &#xA;;   &amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&#xA;&#xA;(dex:head &#34;http://www.sbcl.org/&#34;&#xA;          :headers &#39;((&#34;User-Agent&#34; . &#34;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_2) AppleWebKit/600.3.18 (KHTML, like Gecko) Version/8.0.3 Safari/600.3.18&#34;))&#xA;          :verbose t)&#xA;;-&amp;gt; &amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&#xA;;   HEAD / HTTP/1.1&#xA;;   User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_2) AppleWebKit/600.3.18 (KHTML, like Gecko) Version/8.0.3 Safari/600.3.18&#xA;;   Host: www.sbcl.org&#xA;;   Accept: */*&#xA;;   &#xA;;   &amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Reusing a connection&lt;/h3&gt; &#xA;&lt;p&gt;Dexador reuses a connection by default. As it skips a TCP handshake, it would be much faster when you send requests to the same host continuously.&lt;/p&gt; &#xA;&lt;h3&gt;Handling unexpected HTTP status code&lt;/h3&gt; &#xA;&lt;p&gt;Dexador signals a condition &lt;code&gt;http-request-failed&lt;/code&gt; when the server returned 4xx or 5xx status code.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-common-lisp&#34;&gt;;; Handles 400 bad request&#xA;(handler-case (dex:get &#34;http://lisp.org&#34;)&#xA;  (dex:http-request-bad-request ()&#xA;    ;; Runs when 400 bad request returned&#xA;    )&#xA;  (dex:http-request-failed (e)&#xA;    ;; For other 4xx or 5xx&#xA;    (format *error-output* &#34;The server returned ~D&#34; (dex:response-status e))))&#xA;&#xA;;; Ignore 404 Not Found and continue&#xA;(handler-bind ((dex:http-request-not-found #&#39;dex:ignore-and-continue))&#xA;  (dex:get &#34;http://lisp.org&#34;))&#xA;&#xA;;; Retry&#xA;(handler-bind ((dex:http-request-failed #&#39;dex:retry-request))&#xA;  (dex:get &#34;http://lisp.org&#34;))&#xA;&#xA;;; Retry 5 times&#xA;(let ((retry-request (dex:retry-request 5 :interval 3)))&#xA;  (handler-bind ((dex:http-request-failed retry-request))&#xA;    (dex:get &#34;http://lisp.org&#34;)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Proxy&lt;/h3&gt; &#xA;&lt;p&gt;You can connect via proxy.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-common-lisp&#34;&gt;(dex:get &#34;http://lisp.org/&#34; :proxy &#34;http://proxy.yourcompany.com:8080/&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can connect via SOCKS5 proxy.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-common-lisp&#34;&gt;(dex:get &#34;https://www.facebookcorewwwi.onion/&#34; :proxy &#34;socks5://127.0.0.1:9150&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can set the default proxy by setting &lt;code&gt;dex:*default-proxy*&lt;/code&gt; which defaults to the value of the environment variable HTTPS_PROXY or HTTP_PROXY&lt;/p&gt; &#xA;&lt;h2&gt;Functions&lt;/h2&gt; &#xA;&lt;p&gt;All functions take similar arguments.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;uri&lt;/code&gt; (string or quri:uri)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;method&lt;/code&gt; (keyword) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;The HTTP request method: &lt;code&gt;:GET&lt;/code&gt;, &lt;code&gt;:HEAD&lt;/code&gt;, &lt;code&gt;:OPTIONS&lt;/code&gt;, &lt;code&gt;:PUT&lt;/code&gt;, &lt;code&gt;:POST&lt;/code&gt;, or &lt;code&gt;:DELETE&lt;/code&gt;. The default is &lt;code&gt;:GET&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;version&lt;/code&gt; (number) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;The version of the HTTP protocol: typically &lt;code&gt;1.0&lt;/code&gt; or &lt;code&gt;1.1&lt;/code&gt;. The default is &lt;code&gt;1.1&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;content&lt;/code&gt; (string, alist or pathname) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;The body of the request.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;headers&lt;/code&gt; (alist) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;The headers of the request. If the value of a pair is &lt;code&gt;NIL&lt;/code&gt;, the header won&#39;t be sent. You can overwrite the default headers (Host, User-Agent and Accept) by this with the same header name.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;basic-auth&lt;/code&gt; (cons of username and password) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Username and password for basic authorization. This is a cons having username at car and password at cdr. (e.g. &lt;code&gt;&#39;(&#34;foo&#34; . &#34;bar&#34;)&lt;/code&gt;)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cookie-jar&lt;/code&gt; (cookie-jar of &lt;a href=&#34;https://github.com/fukamachi/cl-cookie&#34;&gt;cl-cookie&lt;/a&gt;) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;A cookie jar object.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;connect-timeout&lt;/code&gt; (fixnum) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;The seconds to timeout until the HTTP connection established. The default is &lt;code&gt;10&lt;/code&gt;, the value of &lt;code&gt;*default-connect-timeout*&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;read-timeout&lt;/code&gt; (fixnum) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;The seconds to timeout until the whole HTTP body read. The default is &lt;code&gt;10&lt;/code&gt;, the value of &lt;code&gt;*default-read-timeout*&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;keep-alive&lt;/code&gt; (boolean) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;A flag if the connection keep connected even after the HTTP request. The default is &lt;code&gt;T&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;use-connection-pool&lt;/code&gt; (boolean) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;When combined with &lt;code&gt;:keep-alive t&lt;/code&gt;, will internally cache the socket connection to web servers to avoid having to open new ones. This is compatible with &lt;code&gt;:want-stream t&lt;/code&gt; (when you close the returned stream or it is garbage collected the connection will be returned to the pool). If you pass in a stream with &lt;code&gt;:stream&lt;/code&gt; then the connection pool is not used (unless there is a redirect to a new web server). This is not supported when using the WINHTTP backend. The default is &lt;code&gt;T&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;max-redirects&lt;/code&gt; (fixnum) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;The limit of redirections. The default is &lt;code&gt;5&lt;/code&gt;. If the redirection exceeds the limit, functions return the last response (not raise a condition).&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ssl-key-file&lt;/code&gt;, &lt;code&gt;ssl-cert-file&lt;/code&gt;, &lt;code&gt;ssl-key-password&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;for HTTPS connection&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;stream&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;The stream to write an HTTP request. This is a way to reuse a connection and commonly used with &lt;code&gt;:keep-alive T&lt;/code&gt;. This allows the caller to do connection pooling, etc. It is easier to just use &lt;code&gt;:use-connection-pool t&lt;/code&gt;, which is the default, and let the dexador internals take care of this for you (only supported for usocket backends).&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;verbose&lt;/code&gt; (boolean) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;This option is for debugging. When &lt;code&gt;T&lt;/code&gt;, it dumps the HTTP request headers.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;force-binary&lt;/code&gt; (boolean) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;A flag for suppressing auto-decoding of the response body.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- - `force-string` --&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;want-stream&lt;/code&gt; (boolean) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;A flag to get the response body as a stream.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;proxy&lt;/code&gt; (string) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;for use proxy. defaults to the value of &lt;code&gt;dex:*default-proxy*&lt;/code&gt; which defaults to the value of environment variables HTTPS_PROXY or HTTP_PROXY. Not supported on windows currently&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;insecure&lt;/code&gt; (boolean) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;To bypass SSL certificate verification (use at your own risk). The default is &lt;code&gt;NIL&lt;/code&gt;, the value of &lt;code&gt;*not-verify-ssl*&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- - `ca-path` --&gt; &#xA;&lt;h3&gt;[Function] request&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-common-lisp&#34;&gt;(dex:request uri &amp;amp;key (method get) (version 1.1) content headers&#xA;             basic-auth cookie-jar (connect-timeout *default-connect-timeout*)&#xA;             (read-timeout *default-read-timeout*) (keep-alive t) (use-connection-pool t)&#xA;             (max-redirects 5) ssl-key-file ssl-cert-file ssl-key-password stream&#xA;             (verbose *verbose*) force-binary force-string want-stream proxy&#xA;             (insecure *not-verify-ssl*) ca-path)&#xA;;=&amp;gt; body&#xA;;   status&#xA;;   response-headers&#xA;;   uri&#xA;;   stream&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Send an HTTP request to &lt;code&gt;uri&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;body&lt;/code&gt; is an octet vector or a string if the &lt;code&gt;Content-Type&lt;/code&gt; is &lt;code&gt;text/*&lt;/code&gt;. If you always want it to return an octet vector, specify &lt;code&gt;:force-binary&lt;/code&gt; as &lt;code&gt;T&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;status&lt;/code&gt; is an integer which represents HTTP status code.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;response-headers&lt;/code&gt; is a hash table which represents HTTP response headers. Note that all hash keys are downcased like &#34;content-type&#34;. If there&#39;s duplicate HTTP headers, those values are concatenated with a comma.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;uri&lt;/code&gt; is a &lt;a href=&#34;https://github.com/fukamachi/quri&#34;&gt;QURI&lt;/a&gt; object which represents the last URI Dexador requested.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;stream&lt;/code&gt; is a usocket stream to communicate with the HTTP server if the connection is still alive and can be reused. This value may be &lt;code&gt;NIL&lt;/code&gt; if &lt;code&gt;:keep-alive&lt;/code&gt; is &lt;code&gt;NIL&lt;/code&gt; or the server closed the connection with &lt;code&gt;Connection: close&lt;/code&gt; header or you are using &lt;code&gt;:use-connection-pool t&lt;/code&gt; which handles re-using the connections for you.&lt;/p&gt; &#xA;&lt;p&gt;This function signals &lt;code&gt;http-request-failed&lt;/code&gt; when the HTTP status code is 4xx or 5xx.&lt;/p&gt; &#xA;&lt;h3&gt;[Function] get&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-common-lisp&#34;&gt;(dex:get uri &amp;amp;key version headers basic-auth cookie-jar keep-alive&#xA;         use-connection-pool connect-timeout read-timeout max-redirects&#xA;         force-binary force-string want-stream ssl-key-file&#xA;         ssl-cert-file ssl-key-password stream verbose proxy insecure&#xA;         ca-path)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;[Function] post&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-common-lisp&#34;&gt;(dex:post uri &amp;amp;key version content headers basic-auth cookie-jar&#xA;          keep-alive use-connection-pool connect-timeout read-timeout&#xA;          force-binary force-string want-stream ssl-key-file&#xA;          ssl-cert-file ssl-key-password stream verbose proxy insecure&#xA;          ca-path)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;[Function] head&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-common-lisp&#34;&gt;(dex:head uri &amp;amp;key version headers basic-auth cookie-jar connect-timeout&#xA;          read-timeout max-redirects ssl-key-file ssl-cert-file&#xA;          ssl-key-password stream verbose proxy insecure ca-path)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;[Function] put&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-common-lisp&#34;&gt;(dex:put uri &amp;amp;key version content headers basic-auth cookie-jar&#xA;         keep-alive use-connection-pool connect-timeout read-timeout&#xA;         force-binary force-string want-stream ssl-key-file&#xA;         ssl-cert-file ssl-key-password stream verbose proxy insecure&#xA;         ca-path)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;[Function] patch&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-common-lisp&#34;&gt;(dex:patch uri &amp;amp;key version content headers basic-auth cookie-jar&#xA;           keep-alive use-connection-pool connect-timeout read-timeout&#xA;           force-binary force-string want-stream ssl-key-file&#xA;           ssl-cert-file ssl-key-password stream verbose proxy insecure&#xA;           ca-path)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;[Function] delete&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-common-lisp&#34;&gt;(dex:delete uri &amp;amp;key version headers basic-auth cookie-jar keep-alive&#xA;            use-connection-pool connect-timeout read-timeout&#xA;            force-binary force-string want-stream ssl-key-file&#xA;            ssl-cert-file ssl-key-password stream verbose proxy insecure&#xA;            ca-path)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;[Function] fetch&lt;/h3&gt; &#xA;&lt;p&gt;Send a GET request to &lt;code&gt;URI&lt;/code&gt; and write the response body to the &lt;code&gt;DESTINATION&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-common-lisp&#34;&gt;(dex:fetch uri destination &amp;amp;key (if-exists error) verbose proxy insecure)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Benchmark&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/fukamachi/dexador/master/images/benchmark.png&#34; alt=&#34;Benchmark graph&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Server &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Sakura VPS 1GB&lt;/li&gt; &#xA;   &lt;li&gt;nginx 1.2.7, KeepAlive On&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Client &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;MacBook Pro OS X Yosemite (CPU: 3GHz Intel Core i7, Memory: 8GB)&lt;/li&gt; &#xA;   &lt;li&gt;SBCL 1.2.9&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Downloads an HTML file (181 bytes).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Drakma&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;(time (dotimes (i 30) (drakma:http-request &#34;http://files.8arrow.org/181B.html&#34;)))&#xA;Evaluation took:&#xA;  1.012 seconds of real time&#xA;  0.174742 seconds of total run time (0.148141 user, 0.026601 system)&#xA;  17.29% CPU&#xA;  1,683 forms interpreted&#xA;  500 lambdas converted&#xA;  3,027,928,949 processor cycles&#xA;  29,416,656 bytes consed&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Dexador&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;(time (dotimes (i 30) (dex:get &#34;http://files.8arrow.org/181B.html&#34;)))&#xA;Evaluation took:&#xA;  0.499 seconds of real time&#xA;  0.028057 seconds of total run time (0.019234 user, 0.008823 system)&#xA;  5.61% CPU&#xA;  56 forms interpreted&#xA;  16 lambdas converted&#xA;  1,494,851,690 processor cycles&#xA;  1,472,992 bytes consed&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;See Also&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/fukamachi/fast-http&#34;&gt;fast-http&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/fukamachi/cl-cookie&#34;&gt;cl-cookie&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/fukamachi/quri&#34;&gt;QURI&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Author&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Eitaro Fukamachi (&lt;a href=&#34;mailto:e.arrows@gmail.com&#34;&gt;e.arrows@gmail.com&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Copyright&lt;/h2&gt; &#xA;&lt;p&gt;Copyright (c) 2015 Eitaro Fukamachi (&lt;a href=&#34;mailto:e.arrows@gmail.com&#34;&gt;e.arrows@gmail.com&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Licensed under the MIT License.&lt;/p&gt;</summary>
  </entry>
</feed>