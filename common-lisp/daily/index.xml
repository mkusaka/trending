<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Common Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-05-06T01:27:28Z</updated>
  <subtitle>Daily Trending of Common Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>aartaka/trivial-inspect</title>
    <updated>2024-05-06T01:27:28Z</updated>
    <id>tag:github.com,2024-05-06:/aartaka/trivial-inspect</id>
    <link href="https://github.com/aartaka/trivial-inspect" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A portable Common Lisp toolkit for building inspectors&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#+TITLE:trivial-inspect&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;A portable toolkit for building inspectors&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;del&gt;trivial-inspect&lt;/del&gt; exposes a set of utils useful in building inspectors akin to standard &lt;del&gt;inspect&lt;/del&gt; and &lt;del&gt;describe&lt;/del&gt;. The goal is to provide as much information as possible. Including the implementation-specific info.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Getting Started Clone the Git repository: #+begin_src sh git clone --recursive &lt;a href=&#34;https://github.com/aartaka/trivial-inspect&#34;&gt;https://github.com/aartaka/trivial-inspect&lt;/a&gt; ~/common-lisp/ #+end_src&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;And then load &lt;del&gt;:trivial-inspect&lt;/del&gt; in the REPL: #+begin_src lisp (asdf:load-system :trivial-inspect) ;; or, if you use Quicklisp (ql:quickload :trivial-inspect) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;You can also use the bundled &lt;del&gt;guix.scm&lt;/del&gt; to install it on Guix.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;APIs Two main entry points of this library are &lt;del&gt;fields&lt;/del&gt;: #+begin_src lisp (trivial-inspect:fields #&#39;identity) ;; ((0 :self #&#xA;  &lt;function identity&gt;&#xA;   ) (1 :id 1407351035) ;; (2 class-of #&amp;lt;sb-pcl:system-class common-lisp:function&amp;gt; #&amp;lt;function # {100A28547B}&amp;gt;) ;; (3 type-of compiled-function) (4 :name identity) (5 :arguments (sb-impl::thing)) ;; (6 compiled-function-p t) (7 :ftype (function # #)) ;; (8 :expression nil) ;; (9 lambda-list-keywords (&amp;amp;allow-other-keys &amp;amp;aux &amp;amp;body &amp;amp;environment &amp;amp;key sb-int:&amp;amp;more &amp;amp;optional &amp;amp;rest &amp;amp;whole)) ;; (10 call-arguments-limit 1073741824) (11 lambda-parameters-limit 1073741824)) (trivial-inspect:fields nil) ;; ((0 :self nil) (1 :id 1342177559) ;; (2 class-of #&#xA;   &lt;built-in-class common-lisp:null&gt;&#xA;     nil) ;; (3 type-of null) (4 length 0) ;; (5 symbol-name &#34;NIL&#34;) (6 symbol-package #&amp;lt;package &#34;COMMON-LISP&#34;&amp;gt;) ;; (7 :visibility :external #&amp;lt;function # {100CFF5F0B}&amp;gt;) ;; (8 symbol-value nil #&amp;lt;function # {100CFF5F2B}&amp;gt;) (9 symbol-plist nil)) (trivial-inspect:fields (find-class &#39;standard-object)) ;; ((0 :self #&#xA;    &lt;standard-class common-lisp:standard-object&gt;&#xA;     ) (1 :id 68721940739) ;; (2 class-of #&#xA;     &lt;standard-class common-lisp:standard-class&gt;&#xA;       ;; #&amp;lt;function (lambda (trivial-inspect::new-value trivial-inspect::_) :in trivial-inspect:fields) {1003A7BAEB}&amp;gt;) ;; (3 :slot-definitions ;; (#&amp;lt;sb-mop:standard-effective-slot-definition sb-pcl::%type&amp;gt; #&amp;lt;sb-mop:standard-effective-slot-definition sb-pcl::source&amp;gt; ..))) #+end_src&#xA;     &lt;/standard-class&gt;&#xA;    &lt;/standard-class&gt;&#xA;   &lt;/built-in-class&gt;&#xA;  &lt;/function&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;and &lt;del&gt;description&lt;/del&gt;: #+begin_src lisp (trivial-inspect:description #&#39;+ t) ;; Compiled-function + (&amp;amp;REST NUMBERS) ;; : (&amp;amp;REST NUMBER) -&amp;gt; (VALUES NUMBER &amp;amp;OPTIONAL) ;; Return the sum of its arguments. With no args, returns 0. (trivial-inspect:description &#39;standard-class t) ;; Symbol STANDARD-CLASS (EXTERNAL to COMMON-LISP) [class] (trivial-inspect:description (find-class &#39;standard-class) t) ;; Standard-class #&#xA; &lt;standard-class common-lisp:standard-class&gt;&#xA;   #+end_src&#xA; &lt;/standard-class&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Darel777/Tri_TE</title>
    <updated>2024-05-06T01:27:28Z</updated>
    <id>tag:github.com,2024-05-06:/Darel777/Tri_TE</id>
    <link href="https://github.com/Darel777/Tri_TE" rel="alternate"></link>
    <summary type="html">&lt;p&gt;This is a tricolor lovestory trueend re-build project.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Tri_TE mxj 介绍&lt;/h1&gt; &#xA;&lt;p&gt;这里是三色绘恋用爱发电的墨小菊线DLC（三色绘恋橘色绘卷）制作组。&lt;/p&gt; &#xA;&lt;p&gt;有关项目的开发进展和教学说明请移步B站三色绘恋橘色绘卷官方号&lt;a href=&#34;https://space.bilibili.com/3494365206940219&#34;&gt;https://space.bilibili.com/3494365206940219&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;有bug请移步“pull requests”和&#34;issues&#34;。&lt;/p&gt; &#xA;&lt;p&gt;This is a DLC development group of HL-game Tricolor Lovestory. We make this DLC for love and passion. Welcome your cooperation!&lt;/p&gt; &#xA;&lt;p&gt;Any development progress and instructions can be gotten from bilibili.&lt;/p&gt; &#xA;&lt;p&gt;Any progress and tasks/issues can be detected from &#34;requests&#34; and &#34;issues&#34;.&lt;/p&gt; &#xA;&lt;h1&gt;更新进度&lt;/h1&gt; &#xA;&lt;h2&gt;24/05/03&lt;/h2&gt; &#xA;&lt;p&gt;已发布&lt;/p&gt; &#xA;&lt;h2&gt;24/04/30~24/05/03&lt;/h2&gt; &#xA;&lt;p&gt;已完成，进入最后的宣发流程。&lt;/p&gt; &#xA;&lt;h2&gt;23/08/10&lt;/h2&gt; &#xA;&lt;p&gt;游戏DEMO发布，详见&lt;a href=&#34;https://b23.tv/SGOwYZz&#34;&gt;【三色绘恋】我们的同人游戏开始试玩了！&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;23/08/10&lt;/h2&gt; &#xA;&lt;p&gt;游戏PV发布，详见&lt;a href=&#34;https://space.bilibili.com/3494365206940219&#34;&gt;三色绘恋橘色绘卷的个人空间_哔哩哔哩_bilibili&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>