<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Common Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-02-26T01:32:47Z</updated>
  <subtitle>Daily Trending of Common Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>gefjon/immutable</title>
    <updated>2023-02-26T01:32:47Z</updated>
    <id>tag:github.com,2023-02-26:/gefjon/immutable</id>
    <link href="https://github.com/gefjon/immutable" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Persistent data structures in Common Lisp&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;IMMUTABLE - persistent data structures in Common Lisp&lt;/h1&gt; &#xA;&lt;h2&gt;By Phoebe Goldman&lt;/h2&gt; &#xA;&lt;p&gt;This is a (currently WIP) repository of immutable, persistent data structures in Common Lisp. My dream is that someday it will rival Clojure&#39;s standard library collection types.&lt;/p&gt; &#xA;&lt;h2&gt;Design notes&lt;/h2&gt; &#xA;&lt;h3&gt;Naming and package local nicknames&lt;/h3&gt; &#xA;&lt;p&gt;Modern CL code has access to &lt;code&gt;:package-local-nicknames&lt;/code&gt; in &lt;code&gt;defpackage&lt;/code&gt; and &lt;code&gt;uiop:define-package&lt;/code&gt;. We can expect the main way of using IMMUTABLE to be by local-nicknaming &lt;code&gt;immutable/vec&lt;/code&gt; to &lt;code&gt;vec&lt;/code&gt;, or &lt;code&gt;immutable/map&lt;/code&gt; to &lt;code&gt;map&lt;/code&gt;, and referring to operators like &lt;code&gt;vec:length&lt;/code&gt; and &lt;code&gt;vec:ref&lt;/code&gt;. This means that operator names should be concise, and need not include their type to disambiguate. IMMUTABLE&#39;s packages should shadow CL symbols liberally to accomplish this.&lt;/p&gt; &#xA;&lt;h2&gt;TODO&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;code&gt;vec&lt;/code&gt; - bit-partitioned tries with tails &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; type definition - &lt;code&gt;vec&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; indexing - &lt;code&gt;ref&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; internal iteration facility - &lt;code&gt;generate-vec&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; convert from CL sequences - &lt;code&gt;from-list&lt;/code&gt; and &lt;code&gt;from-vector&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; convert to CL sequences - &lt;code&gt;to-list&lt;/code&gt; and &lt;code&gt;to-vector&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; constructor analogous to &lt;code&gt;list&lt;/code&gt; and &lt;code&gt;vector&lt;/code&gt; - &lt;code&gt;vec&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; append one to end - &lt;code&gt;push-back&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; pop one from end&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; append multiple to end - &lt;code&gt;extend&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; remove multiple from end&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; replace element at given index - &lt;code&gt;replace-at&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; convenient iteration constructs &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;code&gt;map&lt;/code&gt; - apply function to each element, collect result to new &lt;code&gt;vec&lt;/code&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;code&gt;for-each&lt;/code&gt; - apply function to each element, discard result&lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;code&gt;do&lt;/code&gt; - macro analogous to &lt;code&gt;dolist&lt;/code&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;code&gt;iterate&lt;/code&gt; integration?&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; equality testing&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; hashing?&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; transients - see &lt;a href=&#34;https://hypirion.com/musings/understanding-clojure-transients&#34;&gt;Jean Niklas L&#39;orange&#39;s blog post&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; representation for transient ids&lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; make &lt;code&gt;vec&lt;/code&gt; transient - &lt;code&gt;transient!&lt;/code&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; make transient persistent - &lt;code&gt;persistent&lt;/code&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; append one to end - &lt;code&gt;push-back!&lt;/code&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; pop one from end&lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; append multiple to end - &lt;code&gt;extend!&lt;/code&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; remove multiple from end&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;code&gt;map&lt;/code&gt; - hash array mapped tries &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; type definition &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; generic over hash and equality functions&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; lookup &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; generic over hash and equality functions&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; internal iteration facility&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; convert from CL collections - &lt;code&gt;from-hash-table&lt;/code&gt;, &lt;code&gt;from-alist&lt;/code&gt;?&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; convert to CL collections - &lt;code&gt;to-hash-table&lt;/code&gt;, &lt;code&gt;to-alist&lt;/code&gt;?&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; convenient constructor macro?&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; insert one pair&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; insert multiple pairs?&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; remove one pair&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; remove multiple pairs?&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; convenient iteration constructs &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;code&gt;map-values&lt;/code&gt; - apply function to each value, leaving keys untouched, collect to new &lt;code&gt;map&lt;/code&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;code&gt;for-each&lt;/code&gt; - apply function to each pair, discard result&lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;code&gt;do&lt;/code&gt; - macro analogous to &lt;code&gt;dolist&lt;/code&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;code&gt;iterate&lt;/code&gt; integration?&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; equality testing&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; hashing?&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; transients &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; representation for transient ids&lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; make map transient - &lt;code&gt;transient!&lt;/code&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; add one pair&lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; add multiple pairs?&lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; remove one pair&lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; remove multiple pairs?&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>VitoVan/calm</title>
    <updated>2023-02-26T01:32:47Z</updated>
    <id>tag:github.com,2023-02-26:/VitoVan/calm</id>
    <link href="https://github.com/VitoVan/calm" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Calm down and draw something, in Lisp.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;img style=&#34;vertical-align:middle;margin-right:10px;&#34; width=&#34;100&#34; alt=&#34;Calm&#34; src=&#34;https://raw.githubusercontent.com/VitoVan/calm/main/docs/src/images/calm.png&#34;&gt; Canvas And Lisp Magic&lt;/h1&gt; &#xA;&lt;p&gt;Calm down and draw something, in Lisp.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/VitoVan/calm/main/#installation&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Platform-Linux%20%7C%20macOS%20%7C%20Windows-blue.svg?sanitize=true&#34; alt=&#34;platform support&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/VitoVan/calm/actions/workflows/calm.yml&#34;&gt;&lt;img src=&#34;https://github.com/VitoVan/calm/actions/workflows/calm.yml/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/VitoVan/calm/releases/latest&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/downloads/vitovan/calm/total?color=green&amp;amp;label=Downloads&amp;amp;style=plastic&#34; alt=&#34;GitHub all releases&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Hello World&lt;/h2&gt; &#xA;&lt;p&gt;Find whatever directory, create a file: &lt;strong&gt;canvas.lisp&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(in-package #:calm)&#xA;(defparameter *color-list* &#39;((0.83 0.82 0.84) (0.89 0.12 0.17) (0.94 0.87 0.47) (0 0.35 0.59)))&#xA;(defun draw ()&#xA;  (dotimes (i 7)&#xA;    (apply #&#39;c:set-source-rgb (nth (if (&amp;gt;= i 4) (- i 4) i) *color-list*))&#xA;    (c:arc (+ 60 (* (- (/ *calm-window-width* 5) 40) i)) 70 50 0 (* 2 pi))&#xA;    (c:fill-path)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Launch your terminal, cd to that directory, enter the command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;calm&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/VitoVan/calm/main/#hello-world&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/VitoVan/calm/main/docs/src/examples/circles/canvas.png&#34; alt=&#34;Hello World&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;More Examples&lt;/h2&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a title=&#34;Check the code for Fan&#34; href=&#34;https://raw.githubusercontent.com/VitoVan/calm/main/docs/src/examples/fan&#34;&gt;&lt;img width=&#34;250&#34; alt=&#34;Fan&#34; src=&#34;https://raw.githubusercontent.com/VitoVan/calm/main/docs/src/examples/fan/canvas.png&#34;&gt;&lt;/a&gt; &lt;a title=&#34;Check the code for Mondrian&#34; href=&#34;https://raw.githubusercontent.com/VitoVan/calm/main/docs/src/examples/mondrian&#34;&gt;&lt;img width=&#34;250&#34; alt=&#34;Mondrian&#34; src=&#34;https://raw.githubusercontent.com/VitoVan/calm/main/docs/src/examples/mondrian/canvas.png&#34;&gt;&lt;/a&gt; &lt;a title=&#34;Check the code for Meditator&#34; href=&#34;https://raw.githubusercontent.com/VitoVan/calm/main/docs/src/examples/meditator&#34;&gt;&lt;img width=&#34;250&#34; alt=&#34;Meditator&#34; src=&#34;https://raw.githubusercontent.com/VitoVan/calm/main/docs/src/examples/meditator/canvas.png&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;The example pack can be downloaded &lt;a href=&#34;https://github.com/VitoVan/calm/releases/latest/download/examples.zip&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For more examples, please check this list: &lt;a href=&#34;https://github.com/VitoVan/made-with-calm&#34;&gt;Made with CALM&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;If you want to have a taste of CALM quickly, &lt;a href=&#34;https://raw.githubusercontent.com/VitoVan/calm/main/docs/src/getting-started.md&#34;&gt;please click here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Pre-built Binary&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Download the &lt;a href=&#34;https://github.com/VitoVan/calm/releases/latest&#34;&gt;latest release&lt;/a&gt;&lt;/strong&gt; for your platform&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Extract the content&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Add the extracted folder into your PATH environment&lt;/p&gt; &lt;p&gt;for macOS, add &lt;code&gt;/path/to/Calm.app/Contents/MacOS/&lt;/code&gt; instead&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;In case anything went wrong, here is an &lt;a href=&#34;https://raw.githubusercontent.com/VitoVan/calm/main/docs/src/installation.md&#34;&gt;Installation Guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;From the Source Code&lt;/h3&gt; &#xA;&lt;p&gt;All the binaries are built with &lt;a href=&#34;https://raw.githubusercontent.com/VitoVan/calm/main/.github/workflows/calm.yml&#34;&gt;Github Action&lt;/a&gt;, the available environments are limited. Currently they only support x86_64 CPU.&lt;/p&gt; &#xA;&lt;p&gt;If you are using something not supported, or you are one of those good old Lispers, feel free to &lt;a href=&#34;https://raw.githubusercontent.com/VitoVan/calm/main/docs/src/installation.md#run-from-source&#34;&gt;Run from Source&lt;/a&gt;, or &lt;a href=&#34;https://raw.githubusercontent.com/VitoVan/calm/main/docs/src/installation.md#build-calm&#34;&gt;Build CALM&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;img style=&#34;vertical-align:middle;margin-right:5px;&#34; width=&#34;50&#34; alt=&#34;Calm Application&#34; src=&#34;https://raw.githubusercontent.com/VitoVan/calm/main/build/app.png&#34;&gt; Distribution&lt;/h2&gt; &#xA;&lt;p&gt;Distribute your CALM Application.&lt;/p&gt; &#xA;&lt;h3&gt;Generate Application&lt;/h3&gt; &#xA;&lt;p&gt;Launch your terminal, cd to the directory where the file &lt;strong&gt;canvas.lisp&lt;/strong&gt; exists, enter the command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;calm dist&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You will get a directory &lt;code&gt;dist&lt;/code&gt; containing all the dependencies and your final binary, you should put all your assets (.wav, .png, .mp3, etc.) into that directory.&lt;/p&gt; &#xA;&lt;p&gt;Now, pack it and send it to your friend! Normally, they will be able to enjoy your application. If not, tell them to run the file &lt;code&gt;calm&lt;/code&gt; or double click &lt;code&gt;calm.exe&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;There exists a similar command &lt;code&gt;calm dist-with-canvas&lt;/code&gt;, this one will include &lt;code&gt;canvas.lisp&lt;/code&gt; in the final &lt;code&gt;dist&lt;/code&gt; directory. This gives the end user the ability to modify your application.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;for macOS, you may want to create an &lt;a href=&#34;https://en.wikipedia.org/wiki/Bundle_(macOS)&#34;&gt;application bundle&lt;/a&gt; to avoid too many &lt;a href=&#34;https://support.apple.com/HT202491&#34;&gt;warning messages&lt;/a&gt; for the dylibs:&lt;/p&gt; &#xA; &lt;details&gt;&#xA;  &lt;summary&gt;Click to show code&lt;/summary&gt; &#xA;  &lt;p&gt; &lt;/p&gt;&#xA;  &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;export APP_ICON=asset/coolapp.icns&#xA;export APP_NAME=Coolapp&#xA;export APP_ID=com.jack.coolapp&#xA;export APP_VERSION=0.0.1&#xA;export DIST_DIR=./dist&#xA;calm sh darwin bundle&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;p&gt;&lt;/p&gt; &#xA; &lt;/details&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Generate Package&lt;/h3&gt; &#xA;&lt;p&gt;Instead of sending out the directory, you can also generate pretty packages.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Linux AppImage&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/VitoVan/calm/main/docs/src/tutorials/images/linux-appimage.png&#34; alt=&#34;Linux AppImage&#34;&gt;&lt;/p&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;Click to show code&lt;/summary&gt; &#xA; &lt;p&gt; &lt;/p&gt;&#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;export DIST_DIR=./dist&#xA;export APP_NAME=Coolapp&#xA;export APP_ICON=&#34;asset/coolapp.png&#34;&#xA;calm sh fedora appimage&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;&lt;strong&gt;macOS Application Bundle&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/VitoVan/calm/main/docs/src/tutorials/images/macos-dmg.png&#34; alt=&#34;macOS Application DMG&#34;&gt;&lt;/p&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;Click to show code&lt;/summary&gt; &#xA; &lt;p&gt; &lt;/p&gt;&#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# you should have ran `calm sh darwin bundle`&#xA;export APP_NAME=Coolapp&#xA;export DMG_NAME=coolapp&#xA;export DMG_ICON=asset/coolapp-dmg.icns&#xA;calm sh darwin dmg&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;&lt;strong&gt;Windows Installer&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/VitoVan/calm/main/docs/src/tutorials/images/windows-installer.png&#34; alt=&#34;Windows Installer&#34;&gt;&lt;/p&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;Click to show code&lt;/summary&gt; &#xA; &lt;p&gt; &lt;/p&gt;&#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;export DIST_DIR=./dist&#xA;export APP_NAME=Coolapp&#xA;calm sh msys installer&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Expedient Distribution&lt;/h3&gt; &#xA;&lt;p&gt;Your friend is using Linux / macOS / Windows, but you don&#39;t have the corresponding OS.&lt;/p&gt; &#xA;&lt;p&gt;Let&#39;s say it&#39;s Windows.&lt;/p&gt; &#xA;&lt;p&gt;You could also distribute expediently:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;download &lt;a href=&#34;https://github.com/VitoVan/calm/releases/latest&#34;&gt;the latest&lt;/a&gt; &lt;code&gt;hello-canvas.zip &lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;extract it&lt;/li&gt; &#xA; &lt;li&gt;replace the &lt;code&gt;canvas.lisp&lt;/code&gt; file with yours&lt;/li&gt; &#xA; &lt;li&gt;zip it and send it to your friend&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;Don&#39;t use Quicklisp, normally it won&#39;t work.&lt;/li&gt; &#xA;  &lt;li&gt;CFFI might work, but foreign libraries (except SDL2, Cairo, etc.) are not guaranteed to exist.&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Environment Variables&lt;/h2&gt; &#xA;&lt;p&gt;Setf-able:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;SDL_VIDEO_ALLOW_SCREENSAVER=1&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Allow screensaver, check &lt;a href=&#34;https://wiki.libsdl.org/SDL2/FAQUsingSDL#why_does_sdl_disable_my_screensaver_by_default&#34;&gt;Why does SDL disable my screensaver by default?&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;You can use &lt;code&gt;(setf (uiop:getenv &#34;SDL_VIDEO_ALLOW_SCREENSAVER&#34;) &#34;1&#34;)&lt;/code&gt; to set it.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Read-only:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;CALM_DIR&lt;/code&gt;&lt;/p&gt; &lt;p&gt;This variable holds the path of the directory where calm binary exists&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;APP_DIR&lt;/code&gt;&lt;/p&gt; &lt;p&gt;This variable holds the path of the directory where calm was started up (aka &lt;code&gt;pwd&lt;/code&gt;)&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Tutorials&lt;/h2&gt; &#xA;&lt;p&gt;Not yet, but here are some links might be helpful:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;SDL2&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://wiki.libsdl.org/SDL2&#34;&gt;https://wiki.libsdl.org/SDL2&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/lispgames/cl-sdl2&#34;&gt;https://github.com/lispgames/cl-sdl2&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Cairo&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.cairographics.org/&#34;&gt;https://www.cairographics.org/&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/rpav/cl-cairo2&#34;&gt;https://github.com/rpav/cl-cairo2&lt;/a&gt; in &lt;code&gt;(c:fill-path)&lt;/code&gt;, the &lt;code&gt;c&lt;/code&gt; is a nickname for &lt;code&gt;cl-cairo2&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;CALM&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/VitoVan/calm/raw/main/src/config.lisp&#34;&gt;https://github.com/VitoVan/calm/blob/main/src/config.lisp&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/VitoVan/calm/raw/main/src/utils.lisp&#34;&gt;https://github.com/VitoVan/calm/blob/main/src/utils.lisp&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Development Tools&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://slime.common-lisp.dev/&#34;&gt;https://slime.common-lisp.dev/&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://lispcookbook.github.io/cl-cookbook/vscode-alive.html&#34;&gt;https://lispcookbook.github.io/cl-cookbook/vscode-alive.html&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Common Lisp&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://lispcookbook.github.io/cl-cookbook/&#34;&gt;https://lispcookbook.github.io/cl-cookbook/&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;http://www.lispworks.com/documentation/HyperSpec/Front/&#34;&gt;http://www.lispworks.com/documentation/HyperSpec/Front/&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://lisp-lang.org/books/&#34;&gt;https://lisp-lang.org/books/&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>