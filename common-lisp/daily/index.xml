<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Common Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-09-13T01:33:20Z</updated>
  <subtitle>Daily Trending of Common Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>vindarel/cl-cookieproject</title>
    <updated>2022-09-13T01:33:20Z</updated>
    <id>tag:github.com,2022-09-13:/vindarel/cl-cookieproject</id>
    <link href="https://github.com/vindarel/cl-cookieproject" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Generate a ready-to-use Common Lisp project&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;cl-cookieproject&lt;/h1&gt; &#xA;&lt;p&gt;A &lt;a href=&#34;https://github.com/audreyr/cookiecutter&#34;&gt;cookiecutter&lt;/a&gt; template for Common Lisp projects featuring:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Canonical Common Lisp project structure, a ready-to-use project with an entry point and unit tests.&lt;/li&gt; &#xA; &lt;li&gt;Run project from sources&lt;/li&gt; &#xA; &lt;li&gt;Build a binary&lt;/li&gt; &#xA; &lt;li&gt;and choose your Lisp implementation&lt;/li&gt; &#xA; &lt;li&gt;Test suite using &lt;a href=&#34;https://common-lisp.net/project/fiveam/docs/&#34;&gt;Fiveam&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;a &lt;a href=&#34;https://travis-ci.org/&#34;&gt;travis&lt;/a&gt; CI configuration file (untested)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/roswell/roswell/&#34;&gt;Roswell&lt;/a&gt; recipe to build, install and share a binary&lt;/li&gt; &#xA; &lt;li&gt;example use of command line arguments (&lt;code&gt;uiop:command-line-arguments&lt;/code&gt;). Proper parsing is left to do with a third-party library (&lt;a href=&#34;https://github.com/dnaeon/clingon&#34;&gt;clingon&lt;/a&gt;, unix-opts, defmain, adoptâ€¦).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;We are also shaping out a template for a web project, see &lt;a href=&#34;https://github.com/vindarel/cl-cookieweb&#34;&gt;cl-cookieweb&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;NEW! ðŸŽ¥ See our demo video: &lt;a href=&#34;https://www.youtube.com/watch?v=XFc513MJjos&#34;&gt;https://www.youtube.com/watch?v=XFc513MJjos&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Create a new project. You&#39;ll be prompted to provide some basic information about your new project, which will then be auto-generated in the current working directory:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ pip install cookiecutter&#xA;$ cookiecutter https://github.com/vindarel/cl-cookieproject&#xA;project_name [cookie-lisp-project]:&#xA;repo_name [cookie-lisp-project]:&#xA;description []: A test project&#xA;version [0.0.1]:&#xA;year [1984]:&#xA;author [CL User]: me&#xA;email [me@mail.com]:&#xA;username [me]:&#xA;Initialised empty Git repository in /home/vince/bacasable/lisp-projects/cookie-lisp-project/.git/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run it straight away:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cd cookie-lisp-project&#xA;$ make run&#xA;rlwrap sbcl --load run.lisp&#xA;This is SBCL 2.0.10, an implementation of ANSI Common Lisp.&#xA;More information about SBCL is available at &amp;lt;http://www.sbcl.org/&amp;gt;.&#xA;&#xA;SBCL is free software, provided as is, with absolutely no warranty.&#xA;It is mostly in the public domain; some portions are provided under&#xA;BSD-style licenses.  See the CREDITS and COPYING files in the&#xA;distribution for more information.&#xA;To load &#34;cffi&#34;:&#xA;  Load 1 ASDF system:&#xA;    cffi&#xA;; Loading &#34;cffi&#34;&#xA;.&#xA;To load &#34;cookie-lisp-project&#34;:&#xA;  Load 1 ASDF system:&#xA;    cookie-lisp-project&#xA;; Loading &#34;cookie-lisp-project&#34;&#xA;[package cookie-lisp-project]&#xA;Hello from cookie-lisp-project!&#xA;*&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can see the &lt;code&gt;Hello&lt;/code&gt; from the &lt;code&gt;main&lt;/code&gt; function, and we are given a Lisp REPL.&lt;/p&gt; &#xA;&lt;p&gt;Build an executable:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ make build&#xA;[â€¦]&#xA;[saving current Lisp image into /home/vince/bacasable/lisp-projects/cookie-lisp-project/cookie-lisp-project:&#xA;writing 0 bytes from the read-only space at 0x50000000&#xA;writing 736 bytes from the static space at 0x50100000&#xA;writing 37060608 bytes from the dynamic space at 0x1000000000&#xA;writing 2154496 bytes from the immobile space at 0x50200000&#xA;writing 13910016 bytes from the immobile space at 0x52000000&#xA;done]&#xA;&#xA;$ ./cookie-lisp-project me&#xA;Hello me from cookie-lisp-project!&#xA;&#xA;$ ./cookie-lisp-project -h&#xA;Usage:&#xA;&#xA;  cookie-lisp-project [name]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Build it with Roswell:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ros build roswell/cookie-lisp-project.ros&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A binary is created in the &lt;code&gt;roswell&lt;/code&gt; directory.&lt;/p&gt; &#xA;&lt;p&gt;Your users can install the application with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ros install github_username/project_name&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Cookiecutter options&lt;/h3&gt; &#xA;&lt;p&gt;You can use command line options: &lt;a href=&#34;https://cookiecutter.readthedocs.io/en/1.7.2/advanced/cli_options.html&#34;&gt;https://cookiecutter.readthedocs.io/en/1.7.2/advanced/cli_options.html&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;--no-input&lt;/code&gt;: do not prompt for parameters and only use cookiecutter.json file content&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt; --replay&lt;/code&gt;: do not prompt for parameters and only use information entered previously&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt; -f, --overwrite-if-exists&lt;/code&gt;: overwrite the contents of the output directory if it already exists&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt; -s, --skip-if-file-exists&lt;/code&gt;: skip the files in the corresponding directories if they already exist&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt; -o, --output-dir&lt;/code&gt;: where to output the generated project dir into&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt; --config-file&lt;/code&gt;: user configuration file&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The first time you run &lt;code&gt;cookiecutter&lt;/code&gt; with a link to a GitHub repository, the skeleton is saved under &lt;code&gt;~/.cookiecutters/&lt;/code&gt;. You can run the command for the second time with only the skeleton name:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cookiecutter cl-cookieproject&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;TODOs&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; initialize a git repository&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; better guess the author&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; include a documentation system&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/vindarel/cl-cookieweb&#34;&gt;web project skeleton&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; more CI setup&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; build a .deb (and .rpm)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;See also&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/fukamachi/cl-project&#34;&gt;https://github.com/fukamachi/cl-project&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;one-package per file style (called &#34;modern&#34; but I find it too cumbersome to use)&lt;/li&gt; &#xA;   &lt;li&gt;uses the Rove test system (and I think it is not ready, see &lt;a href=&#34;https://github.com/LispCookbook/cl-cookbook/issues/297&#34;&gt;this discussion&lt;/a&gt; and its own issues)&lt;/li&gt; &#xA;   &lt;li&gt;less integration (no recipe to build binaries, use CLI args or use Roswell). Pure CL, doesn&#39;t need Cookiecutter (Python).&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/triclops200/quickapp&#34;&gt;https://github.com/triclops200/quickapp&lt;/a&gt; and &lt;a href=&#34;https://github.com/triclops200/quickapp-cli&#34;&gt;quickapp-cli&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;last commit 2016 / 2015 &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;its &lt;code&gt;internal-quit&lt;/code&gt; in app-utils.lisp should be &lt;code&gt;uiop:quit&lt;/code&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;uses buildapp: kind of old and not needed now with &lt;code&gt;asdf:make&lt;/code&gt; or Roswell? (proove me wrong)&lt;/li&gt; &#xA;   &lt;li&gt;includes an args parsing utility (it should probably use a more complete library though)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.xach.com/lisp/quickproject/&#34;&gt;https://www.xach.com/lisp/quickproject/&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;doesn&#39;t include a test definition&lt;/li&gt; &#xA;   &lt;li&gt;simple, nothing fancy.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/40ants/cl-project-with-docs&#34;&gt;https://github.com/40ants/cl-project-with-docs&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;uses Sphinx and reStructured text to render nice and readable HTML documentation.&lt;/li&gt; &#xA;   &lt;li&gt;automatic gh-pages&lt;/li&gt; &#xA;   &lt;li&gt;includes tests, CI (Travis), Roswell&lt;/li&gt; &#xA;   &lt;li&gt;needs Sphinx (Python) and cl-launch.&lt;/li&gt; &#xA;   &lt;li&gt;2018: I suspect the author has now another favourite documentation generator (MGLPAX, 40ants/doc) and might not update much this skeleton.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Acknowledgement: we forked &lt;a href=&#34;https://github.com/hbristow/cookiecutter-cl&#34;&gt;cookiecutter-cl&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>