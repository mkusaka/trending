<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Common Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-08-12T01:28:57Z</updated>
  <subtitle>Daily Trending of Common Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>fukamachi/qlot</title>
    <updated>2024-08-12T01:28:57Z</updated>
    <id>tag:github.com,2024-08-12:/fukamachi/qlot</id>
    <link href="https://github.com/fukamachi/qlot" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A project-local library installer for Common Lisp&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Qlot&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/fukamachi/qlot/actions&#34;&gt;&lt;img src=&#34;https://github.com/fukamachi/qlot/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://quickdocs.org/qlot&#34;&gt;&lt;img src=&#34;https://api.quickdocs.org/badge/qlot.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Qlot&lt;/strong&gt; (pronounced &lt;code&gt;kyü-&#39;lät&lt;/code&gt;, like culotte) is a project-local library installer using Quicklisp facility. This aims to be like &lt;a href=&#34;http://bundler.io&#34;&gt;Bundler&lt;/a&gt; of Ruby or &lt;a href=&#34;http://search.cpan.org/~miyagawa/Carton/lib/Carton.pm&#34;&gt;Carton&lt;/a&gt; of Perl.&lt;/p&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fukamachi/qlot/master/#usage&#34;&gt;Usage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fukamachi/qlot/master/#what-qlot-is-trying-to-solve&#34;&gt;What Qlot is trying to solve&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fukamachi/qlot/master/#requirements&#34;&gt;Requirements&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fukamachi/qlot/master/#installation&#34;&gt;Installation&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fukamachi/qlot/master/#automatic-installer-recommended&#34;&gt;Automatic installer&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fukamachi/qlot/master/#via-roswell&#34;&gt;via Roswell&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fukamachi/qlot/master/#via-quicklisp&#34;&gt;via Quicklisp&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fukamachi/qlot/master/#manual-installation&#34;&gt;Manual installation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fukamachi/qlot/master/#install-from-source&#34;&gt;Install from source&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fukamachi/qlot/master/#via-docker&#34;&gt;via Docker&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fukamachi/qlot/master/#optional-settings&#34;&gt;Optional settings&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fukamachi/qlot/master/#asdf-configuration-to-prevent-from-loading-by-mistake&#34;&gt;ASDF configuration to prevent from loading by mistake&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fukamachi/qlot/master/#tutorial&#34;&gt;Tutorial&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fukamachi/qlot/master/#qlfile-syntax&#34;&gt;qlfile syntax&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fukamachi/qlot/master/#priorities-of-distributions&#34;&gt;Priorities of distributions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fukamachi/qlot/master/#working-with-slime&#34;&gt;Working with SLIME&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fukamachi/qlot/master/#lem&#34;&gt;Lem&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fukamachi/qlot/master/#emacs&#34;&gt;Emacs&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fukamachi/qlot/master/#vimneovim&#34;&gt;Vim/Neovim&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fukamachi/qlot/master/#working-with-local-git-repositories&#34;&gt;Working with local git repositories&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Shell&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cd /path/to/myapp&#xA;&#xA;# Initialize the project to start using Qlot.&#xA;$ qlot init&#xA;&#xA;# Install libraries project-locally.&#xA;$ qlot install&#xA;&#xA;# Add the upstream version of a library&#xA;$ qlot add mito --upstream&#xA;&#xA;# Add a library from GitHub&#xA;$ qlot add fukamachi/anypool&#xA;&#xA;# Update specific libraries&#xA;$ qlot update mito&#xA;&#xA;# Run a REPL with a project-local Quicklisp&#xA;$ qlot exec sbcl&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;REPL (experimental)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-common-lisp&#34;&gt;;; Move to the project root&#xA;;; (not necessary if the REPL is invoked by &#39;qlot exec&#39;)&#xA;(setf qlot:*project-root* #P&#34;/path/to/project/&#34;)&#xA;&#xA;;; Initialize the project to start using Qlot.&#xA;(qlot:init #P&#34;/path/to/project/&#34;)&#xA;&#xA;;; Install libraries project-locally.&#xA;(qlot:install)&#xA;&#xA;;; Add the upstream version of a library&#xA;(qlot:add :mito :upstream t)&#xA;&#xA;;; Add a library from GitHub&#xA;(qlot:add &#34;fukamachi/anypool&#34;)&#xA;&#xA;;; Update specific libraries&#xA;(qlot:update :mito)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;What Qlot is trying to solve&lt;/h2&gt; &#xA;&lt;p&gt;We have Quicklisp, the central library registry. It made installation of libraries damn easy.&lt;/p&gt; &#xA;&lt;p&gt;However, what only you can specify is the month of distribution. Which means you have to use all libraries of the same moment and you cannot use a newer/older version of a library for your project.&lt;/p&gt; &#xA;&lt;p&gt;&#34;local-projects/&#34; or ASDF configurations may be a solution to this problem, but there are a couple of problems.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;em&gt;They are not project-local.&lt;/em&gt; If you have multiple projects that use different versions of the same library, it would be a problem.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;em&gt;They are difficult to fix the version or to update them.&lt;/em&gt; If your project needs to work on other than your machine, for instance on other people&#39;s machines or on servers, the version of depending libraries should be the same.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;This is what Qlot is trying to solve.&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/roswell/roswell/&#34;&gt;Roswell&lt;/a&gt; or &lt;a href=&#34;https://www.sbcl.org/&#34;&gt;SBCL&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;OpenSSL (Unix only) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;[Ubuntu/Debian]&lt;/strong&gt; &lt;code&gt;sudo apt install libssl-dev&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;[macOS]&lt;/strong&gt; &lt;code&gt;brew install openssl&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;git (for installation from git repositories)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Automatic installer (recommended)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ curl -L https://qlot.tech/installer | sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It also requires &lt;code&gt;curl&lt;/code&gt; (or &lt;code&gt;wget&lt;/code&gt;) and &lt;code&gt;tar&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To uninstall Qlot, run a Qlot uninstaller like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ~/.qlot/qlot/scripts/qlot-uninstaller.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;via Roswell&lt;/h3&gt; &#xA;&lt;p&gt;If you&#39;re already using Roswell, Qlot can be installed by &lt;code&gt;ros install&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# Install from the Quicklisp dist&#xA;$ ros install qlot&#xA;# Or, install the latest version from the git repository&#xA;$ ros install fukamachi/qlot&#xA;&#xA;# For older Roswell (Not required since v23.10.14.114 or above)&#xA;$ ros -e &#39;(ql:quickload :qlot/distify)&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Roswell adds an executable script under &lt;code&gt;$HOME/.roswell/bin&lt;/code&gt;. Make sure the directory exists in &lt;code&gt;$PATH&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ which qlot&#xA;/Users/fukamachi/.roswell/bin/qlot&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run &lt;code&gt;ros update qlot&lt;/code&gt; to update Qlot.&lt;/p&gt; &#xA;&lt;h3&gt;via Quicklisp&lt;/h3&gt; &#xA;&lt;p&gt;If &lt;a href=&#34;https://www.quicklisp.org/&#34;&gt;Quicklisp&lt;/a&gt; is set up on your home directory, Qlot can be installed by &lt;code&gt;ql:quickload&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-common-lisp&#34;&gt;(ql:quickload :qlot)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use functions exported by &lt;code&gt;qlot&lt;/code&gt; package for using Qlot.&lt;/p&gt; &#xA;&lt;p&gt;To update Qlot, run &lt;code&gt;(ql:update-all-dists)&lt;/code&gt; in the REPL.&lt;/p&gt; &#xA;&lt;h3&gt;Manual installation&lt;/h3&gt; &#xA;&lt;p&gt;If you don&#39;t use both Roswell and Quicklisp for some reason, Qlot also can be installed manually.&lt;/p&gt; &#xA;&lt;p&gt;The advantage of this method is no dependencies are required other than &lt;code&gt;sbcl&lt;/code&gt; and &lt;code&gt;OpenSSL&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# Getting the latest version&#xA;$ curl -sL https://api.github.com/repos/fukamachi/qlot/releases/latest | jq -rM &#39;.name&#39;&#xA;1.3.5&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ curl https://github.com/fukamachi/qlot/releases/download/1.3.5/qlot-1.3.5.tar.gz -o qlot.tar.gz&#xA;$ tar xfz qlot.tar.gz&#xA;$ cd qlot&#xA;$ scripts/setup.sh&#xA;$ sudo scripts/install.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Install from source&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ git clone https://github.com/fukamachi/qlot&#xA;$ cd qlot&#xA;$ scripts/setup.sh&#xA;$ sudo scripts/install.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To update Qlot, run &lt;code&gt;git pull &amp;amp;&amp;amp; scripts/setup.sh&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;WARNING&lt;/strong&gt;: Don&#39;t add the Qlot source directory to any ASDF loadable directories, such as &lt;code&gt;~/common-lisp&lt;/code&gt; or &lt;code&gt;~/quicklisp/local-projects&lt;/code&gt;. ASDF accidentally loads dependencies of Qlot in a REPL even in case you don&#39;t need it. (See also &lt;a href=&#34;https://raw.githubusercontent.com/fukamachi/qlot/master/#asdf-configuration-to-prevent-from-loading-by-mistake&#34;&gt;ASDF configuration&lt;/a&gt; section)&lt;/p&gt; &#xA;&lt;h3&gt;via Docker&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://hub.docker.com/r/fukamachi/qlot/&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/pulls/fukamachi/qlot.svg?sanitize=true&#34; alt=&#34;Docker Pulls&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ docker run --rm -it fukamachi/qlot&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can build it by yourself with &lt;code&gt;docker build&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ git clone https://github.com/fukamachi/qlot&#xA;$ cd qlot&#xA;$ docker build -t qlot .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Optional settings&lt;/h2&gt; &#xA;&lt;h3&gt;ASDF configuration to prevent from loading by mistake&lt;/h3&gt; &#xA;&lt;p&gt;ASDF loads any ASD files under a directory &lt;code&gt;~/common-lisp&lt;/code&gt; including its subdirectories. It is easily understandable and convenient. However, it will lead to a problematic situation which ASDF accidentally loads libraries under &#34;.qlot/&#34; even in case you don&#39;t need it.&lt;/p&gt; &#xA;&lt;p&gt;To avoid the situation, we recommend not to use &lt;code&gt;~/common-lisp&lt;/code&gt; directory, or add the following lines to your Lisp&#39;s init file such as &lt;code&gt;~/.sbclrc&lt;/code&gt; for SBCL.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;;; .sbclrc&#xA;(push &#34;.qlot&#34; asdf::*default-source-registry-exclusions*)&#xA;(asdf:initialize-source-registry)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Roswell doesn&#39;t require this setting since it ignores directories starting with a dot.&lt;/p&gt; &#xA;&lt;h2&gt;Tutorial&lt;/h2&gt; &#xA;&lt;h3&gt;Start using Qlot&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ qlot init&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It creates 2 files &#34;qlfile&#34; and &#34;qlfile.lock&#34;, and a directory &#34;.qlot/&#34; at the root of your project directory.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;qlfile&lt;/code&gt; is a file clarifying the project dependencies. See &lt;a href=&#34;https://raw.githubusercontent.com/fukamachi/qlot/master/#qlfile-syntax&#34;&gt;qlfile syntax&lt;/a&gt; for the details.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;qlfile.lock&lt;/code&gt; is similar to &lt;code&gt;qlfile&lt;/code&gt; except the library versions are clarified. This will ensure that other developers or your deployment environment use exactly the same versions of libraries you just installed.&lt;/p&gt; &#xA;&lt;p&gt;Make sure you add &lt;code&gt;qlfile&lt;/code&gt; and &lt;code&gt;qlfile.lock&lt;/code&gt; to your version-controlled repository.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ git add qlfile qlfile.lock&#xA;$ git commit -m &#39;Start using Qlot.&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Adding a new dependency&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ qlot add &amp;lt;library name&amp;gt;              # Add a new library from Quicklisp explicitly&#xA;$ qlot add &amp;lt;library name&amp;gt; --upstream   # Add an upstream version of a Quicklisp library&#xA;$ qlot add &amp;lt;username/repository&amp;gt;       # Add a new library from a GitHub repository&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also edit a &lt;code&gt;qlfile&lt;/code&gt; file directly. See &lt;a href=&#34;https://raw.githubusercontent.com/fukamachi/qlot/master/#qlfile-syntax&#34;&gt;qlfile syntax&lt;/a&gt; section to know how to write it. Be sure to run &lt;code&gt;qlot install&lt;/code&gt; to install new dependencies.&lt;/p&gt; &#xA;&lt;h3&gt;Updating the project-local Quicklisp&lt;/h3&gt; &#xA;&lt;p&gt;You can update the version of dependencies via:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ qlot update&#xA;&#xA;# Update a specific project&#xA;$ qlot update mito&#xA;$ qlot update mito sxql&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It will also overwrite &lt;code&gt;qlfile.lock&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Commands&lt;/h2&gt; &#xA;&lt;h3&gt;install&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;qlot install&lt;/code&gt; will install Quicklisp and libraries that are declared in &lt;code&gt;qlfile&lt;/code&gt; project-locally. &lt;code&gt;qlfile.lock&lt;/code&gt; will be used with precedence if it exists.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ qlot install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;update&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;qlot update&lt;/code&gt; will update the project-local &lt;code&gt;.qlot/&lt;/code&gt; directory using &lt;code&gt;qlfile&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ qlot update&#xA;&#xA;# Update a specific project&#xA;$ qlot update mito&#xA;$ qlot update mito sxql&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;add&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;qlot add&lt;/code&gt; will add a line to &lt;code&gt;qlfile&lt;/code&gt; and invoke &lt;code&gt;qlot install&lt;/code&gt; internally. It replaces an existing line if a library with the same name already exists.&lt;/p&gt; &#xA;&lt;p&gt;Its arguments are same as the qlfile syntax.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ qlot add mito                                # ql mito&#xA;$ qlot add mito --latest                       # ql mito :latest&#xA;$ qlot add mito --upstream                     # ql mito :upstream&#xA;$ qlot add fukamachi/datafly                   # github datafly fukamachi/datafly&#xA;$ qlot add fukamachi/datafly --branch stable   # github datafly fukamachi/datafly :branch stable&#xA;$ qlot add ultralisp egao1980-cl-idna          # ultralisp egao1980-cl-idna&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;remove&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;qlot remove&lt;/code&gt; will remove libraries from &lt;code&gt;qlfile&lt;/code&gt; and invoke &lt;code&gt;qlot install&lt;/code&gt; internally.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ qlot remove mito&#xA;$ qlot remove mito datafly   # can specify multiple names&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;exec&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;qlot exec&lt;/code&gt; does following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;configures ASDF&#39;s source registries;&lt;/li&gt; &#xA; &lt;li&gt;adds Roswell&#39;s &lt;code&gt;bin&lt;/code&gt; directory to the &lt;code&gt;PATH&lt;/code&gt; environment variable;&lt;/li&gt; &#xA; &lt;li&gt;executes given command with arguments.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Here are few useful commands:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;qlot exec ros emacs&lt;/code&gt; - starts Emacs for development. Inferior lisp will use only systems, installed by &lt;code&gt;qlot install&lt;/code&gt;. If you want to use systems from directories other than current and &lt;code&gt;./.qlot/&lt;/code&gt;, then set &lt;code&gt;CL_SOURCE_REGISTRY&lt;/code&gt; variable before starting &lt;code&gt;qlot&lt;/code&gt;. This can be useful in case, if you have development versions of some systems, for example, in &lt;code&gt;~/common-lisp/&lt;/code&gt; directory and want to use them during project development:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;CL_SOURCE_REGISTRY=~/common-lisp// qlot exec ros emacs&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Read more about &lt;code&gt;CL_SOURCE_REGISTRY&lt;/code&gt; in &lt;a href=&#34;https://common-lisp.net/project/asdf/asdf/Shell_002dfriendly-syntax-for-configuration.html&#34;&gt;asdf&#39;s documentation&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;qlot exec ros build some-app.ros&lt;/code&gt; - another command, useful, to build a binary from systems, fixed in &lt;code&gt;qlfile&lt;/code&gt; and &lt;code&gt;qlfile.lock&lt;/code&gt;. This way you can be sure that your builds are stable.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;code&gt;qlfile&lt;/code&gt; syntax&lt;/h2&gt; &#xA;&lt;p&gt;&#34;qlfile&#34; is a collection of Quicklisp dist declarations. Each line of that represents a dist.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;source&amp;gt; &amp;lt;project name&amp;gt; [arg1, arg2..]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Currently, &lt;code&gt;&amp;lt;source&amp;gt;&lt;/code&gt; must be one of &lt;code&gt;dist&lt;/code&gt;, &lt;code&gt;ql&lt;/code&gt;, &lt;code&gt;ultralisp&lt;/code&gt;, &lt;code&gt;http&lt;/code&gt;, &lt;code&gt;git&lt;/code&gt; or &lt;code&gt;github&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;ql&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;ql &amp;lt;project name&amp;gt; &amp;lt;version&amp;gt;&#xA;ql &amp;lt;project name&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;ql&lt;/code&gt; source will download libraries from Quicklisp official dist.&lt;/p&gt; &#xA;&lt;p&gt;If you want to use Clack in Quicklisp dist of January 13, 2014, qlfile would be like this.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;ql clack 2014-01-13&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If &lt;code&gt;:latest&lt;/code&gt; is specified for the version, the latest Quicklisp dist version will be used.&lt;/p&gt; &#xA;&lt;p&gt;If &lt;code&gt;:upstream&lt;/code&gt; is specified, Qlot downloads the latest code from the upstream git repository.&lt;/p&gt; &#xA;&lt;h3&gt;ultralisp&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;ultralisp &amp;lt;project name&amp;gt; &amp;lt;version&amp;gt;&#xA;ultralisp &amp;lt;project name&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;ultralisp&lt;/code&gt; is same as &lt;code&gt;ql&lt;/code&gt; except downloading from Ultralisp.&lt;/p&gt; &#xA;&lt;h3&gt;http&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;http &amp;lt;project name&amp;gt; &amp;lt;url&amp;gt; [&amp;lt;file md5&amp;gt;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;http&lt;/code&gt; source will download a tarball.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;http yason http://netzhansa.com/yason.tar.gz&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;git&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;git &amp;lt;project name&amp;gt; &amp;lt;repos url&amp;gt;&#xA;git &amp;lt;project name&amp;gt; &amp;lt;repos url&amp;gt; :ref &amp;lt;commit ref&amp;gt;&#xA;git &amp;lt;project name&amp;gt; &amp;lt;repos url&amp;gt; :branch &amp;lt;branch name&amp;gt;&#xA;git &amp;lt;project name&amp;gt; &amp;lt;repos url&amp;gt; :tag &amp;lt;tag name&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;git&lt;/code&gt; source will download libraries from a public git repository.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clack https://github.com/fukamachi/clack.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also specify &lt;code&gt;:ref&lt;/code&gt;, &lt;code&gt;:branch&lt;/code&gt; or &lt;code&gt;:tag&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clack https://github.com/fukamachi/clack.git :branch develop&#xA;git datafly https://github.com/fukamachi/datafly.git :tag v0.7.4&#xA;git cl-dbi https://github.com/fukamachi/cl-dbi.git :ref 54928984e5756e92ba298aae51de8b95a6b0cf4b&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Retrieving from private repository&lt;/h4&gt; &#xA;&lt;p&gt;Qlot doesn&#39;t authenticate itself, but retrieving from private repository can be done via git&#39;s SSH key authentication. This means, if the current user can &lt;code&gt;git clone&lt;/code&gt;, Qlot also would be possible to do it.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git myapp git@github.com:somewrite-adtech/myapp&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;github&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;github &amp;lt;username/repository&amp;gt;&#xA;github &amp;lt;username/repository&amp;gt; :ref &amp;lt;commit ref&amp;gt;&#xA;github &amp;lt;username/repository&amp;gt; :branch &amp;lt;branch name&amp;gt;&#xA;github &amp;lt;username/repository&amp;gt; :tag &amp;lt;tag name&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;github&lt;/code&gt; source is similar to &lt;code&gt;git&lt;/code&gt;, but it is specifically for GitHub. As it uses GitHub API and tarballs GitHub serves, it doesn&#39;t require &#34;git&#34; command.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;github fukamachi/datafly&#xA;github fukamachi/datafly :branch develop&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;local&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;local &amp;lt;project name&amp;gt; &amp;lt;directory path&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Add a directory to the ASDF&#39;s source registry.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;local rove ~/Programs/lib/rove&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;dist&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;dist &amp;lt;distribution URL&amp;gt; [&amp;lt;dist version&amp;gt;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;dist&lt;/code&gt; allows to use a custom Quicklisp dist, like Ultralisp.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;dist http://beta.quicklisp.org/dist/quicklisp.txt&#xA;dist http://dist.ultralisp.org/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Priorities of distributions&lt;/h2&gt; &#xA;&lt;p&gt;If multiple distributions provide the same library, lower ones would take priority over higher ones.&lt;/p&gt; &#xA;&lt;h2&gt;Working with SLIME&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/slime/slime&#34;&gt;SLIME&lt;/a&gt; is the most popular development environment in Common Lisp. However, its REPL always loads the global Quicklisp, not the project-local one.&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s quick steps to start project-local REPL with SLIME for each text editor:&lt;/p&gt; &#xA;&lt;h3&gt;Lem&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Add &lt;a href=&#34;https://github.com/lem-project/micros&#34;&gt;lem-project/micros&lt;/a&gt; to &lt;code&gt;.qlot/local-projects&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ git clone https://github.com/lem-project/micros .qlot/local-projects/micros&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Add the following function to &lt;code&gt;~/.lem/init.lisp&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-common-lisp&#34;&gt;(define-command slime-qlot-exec () ()&#xA;  (let ((command (first (lem-lisp-mode/implementation::list-roswell-with-qlot-commands))))&#xA;    (when command&#xA;      (lem-lisp-mode:run-slime command))))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;Relaunch the Lem, or reload the init file with &lt;code&gt;M-x lisp-load-file RET ~/.lem/init.lisp&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Invoke &lt;code&gt;M-x slime-qlot-exec RET /path/to/project/&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Emacs&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Add one of the following functions to &lt;code&gt;init.el&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;a) SLIME&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(setq slime-lisp-implementations&#xA;      &#39;((sbcl (&#34;sbcl&#34;) :coding-system utf-8-unix)&#xA;        (qlot (&#34;qlot&#34; &#34;exec&#34; &#34;sbcl&#34;) :coding-system utf-8-unix)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://slime.common-lisp.dev/doc/html/Multiple-Lisps.html#Multiple-Lisps&#34;&gt;SLIME manual&lt;/a&gt; to set up multiple Lisps.&lt;/p&gt; &#xA;&lt;h4&gt;b) Sly&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(setq sly-lisp-implementations&#xA;      &#39;((sbcl (&#34;sbcl&#34;) :coding-system utf-8-unix)&#xA;        (qlot (&#34;qlot&#34; &#34;exec&#34; &#34;sbcl&#34;) :coding-system utf-8-unix)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://joaotavora.github.io/sly/#Multiple-Lisps&#34;&gt;Sly manual&lt;/a&gt; to set up multiple Lisps.&lt;/p&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Relaunch the Emacs or load the config file.&lt;/li&gt; &#xA; &lt;li&gt;Invoke &lt;code&gt;M-- M-x slime RET qlot RET&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Vim/Neovim&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install &lt;a href=&#34;https://github.com/vlime/vlime&#34;&gt;vlime/vlime&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Add the following code to your Vim/Neovim init.vim.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vimscript&#34;&gt;let g:vlime_cl_use_terminal = v:true&#xA;let s:vlime_path = &#39;/path/to/vlime&#39;&#xA;function! VlimeBuildServerCommandFor_qlot(vlime_loader, vlime_eval)&#xA;    return [&#34;qlot&#34;, &#34;exec&#34;, &#34;ros&#34;, &#34;run&#34;,&#xA;               \ &#34;--load&#34;, s:vlime_path . &#34;/lisp/load-vlime.lisp&#34;,&#xA;               \ &#34;--eval&#34;, vlime_eval]&#xA;endfunction&#xA;function! VlimeQlotExec()&#xA;    call vlime#server#New(v:true, get(g:, &#34;vlime_cl_use_terminal&#34;, v:false), v:null, &#34;qlot&#34;)&#xA;endfunction&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Relaunch the Vim/Neovim.&lt;/li&gt; &#xA; &lt;li&gt;Change the directory by &lt;code&gt;:cd /path/to/project/&lt;/code&gt; and invoke &lt;code&gt;:call VlimeQlotExec()&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Working with local git repositories&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;PROJECT_ROOT/.qlot/local-projects&lt;/code&gt; can be used for local git repositories. Symbolic links are also accessible in Qlot environment.&lt;/p&gt; &#xA;&lt;h2&gt;Author&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Eitaro Fukamachi (&lt;a href=&#34;mailto:e.arrows@gmail.com&#34;&gt;e.arrows@gmail.com&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/fukamachi/qlot/master/LICENSE.txt&#34;&gt;LICENSE.txt&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The license of bundled Quicklisp installer can be found at &lt;a href=&#34;https://raw.githubusercontent.com/fukamachi/qlot/master/quicklisp/LICENSE.txt&#34;&gt;quicklisp/LICENSE.txt&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>