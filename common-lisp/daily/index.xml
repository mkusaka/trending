<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Common Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-12-29T01:29:42Z</updated>
  <subtitle>Daily Trending of Common Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>justinmeiners/srcweave</title>
    <updated>2025-12-29T01:29:42Z</updated>
    <id>tag:github.com,2025-12-29:/justinmeiners/srcweave</id>
    <link href="https://github.com/justinmeiners/srcweave" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A literate programming system for any language.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;srcweave&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;srcweave&lt;/code&gt; is a &lt;a href=&#34;https://en.wikipedia.org/wiki/Literate_programming&#34;&gt;literate programming&lt;/a&gt; system for ANY programming language. &lt;code&gt;srcweave&lt;/code&gt; helps you write code to be read by humans, not machines.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Features:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Compatible with all programming languages. Uses markdown for prose.&lt;/li&gt; &#xA; &lt;li&gt;Great support for working with multiple files (even books!). Code and prose can be moved between files seamlessly.&lt;/li&gt; &#xA; &lt;li&gt;Outputs clean HTML documentation that is easy to read and customize.&lt;/li&gt; &#xA; &lt;li&gt;An optional beautifier includes syntax highlighting (google-prettify) and typeset math (KaTeX).&lt;/li&gt; &#xA; &lt;li&gt;Focused UNIX philosphy design. It does one thing well and plays nice with other tools like &lt;code&gt;make&lt;/code&gt; (preserves mod dates).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;.lit file examples&lt;/h2&gt; &#xA;&lt;p&gt;The best part about &lt;code&gt;.lit&lt;/code&gt; is you learn it by just reading the code! Here are a few basic examples to get started with:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/justinmeiners/srcweave/tree/master/tests/hello/hello.lit&#34;&gt;Hello world&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/justinmeiners/srcweave/tree/master/tests/basic/basic.lit&#34;&gt;Basic features&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For more in-depth examples, see my article:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/justinmeiners/lc3-vm&#34;&gt;Write your own Virtual Machine&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Requirements&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;sbcl&lt;/code&gt; with &lt;a href=&#34;https://quicklisp.org&#34;&gt;quicklisp&lt;/a&gt; installed&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;markdown&lt;/code&gt; (I recommend the &lt;code&gt;discount&lt;/code&gt; implementation).&lt;/li&gt; &#xA; &lt;li&gt;Recommended: A POSIX system with &lt;code&gt;sh&lt;/code&gt;, &lt;code&gt;curl&lt;/code&gt; and related commands for &lt;code&gt;srcweave-html-styler&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Install&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Clone the project and run the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make&#xA;make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Usage&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Create an &lt;code&gt;index.lit&lt;/code&gt; file. For example:&lt;/p&gt; &lt;pre&gt;&lt;code&gt; # Test&#xA;&#xA; Test console output:&#xA;&#xA; --- hello.js&#xA; console.log(&#34;Hello, World!&#34;);&#xA; ---&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run &lt;code&gt;srcweave --tangle . index.lit&lt;/code&gt; to generate source files (&lt;code&gt;hello.js&lt;/code&gt;).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run &lt;code&gt;srcweave --weave doc/ index.lit&lt;/code&gt; to generate documentation (&lt;code&gt;index.html&lt;/code&gt;).&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Both &lt;code&gt;--tangle&lt;/code&gt; and &lt;code&gt;--weave&lt;/code&gt; can be included in the same invocation. Multiple lit files can be specified, and the order they are listed in will determine the order of chapters and sections across files.&lt;/p&gt; &#xA;&lt;h2&gt;Styling&lt;/h2&gt; &#xA;&lt;p&gt;Included in the installation is a tool called &lt;code&gt;srcweave-html-styler&lt;/code&gt; which converts default HTML into beautiful documents. To use just add the &lt;code&gt;--style srcweave-html-styler&lt;/code&gt; to any weave command. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;srcweave --weave doc/ --styler srcweave-html-styler index.lit&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once for every project, you will also need to run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;srcweave-html-styler-init docs/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This downloads all the necessary JavaScript and CSS dependencies.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Math typesetting&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Include the &lt;code&gt;-m&lt;/code&gt; flag on &lt;code&gt;srcweave-html-styler-init&lt;/code&gt; to download KaTex. See the examples for how to use &lt;code&gt;TeX&lt;/code&gt; in .lit.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Custom styles&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;An easy way to customize the style is to edit the CSS file created by &lt;code&gt;srcweave-html-styler-init&lt;/code&gt;. If that&#39;s insufficient, you are encouraged to create your own styler program. Stylers are just programs that take raw HTML in &lt;code&gt;stdin&lt;/code&gt; and format it to &lt;code&gt;stdout&lt;/code&gt;. You can start from scratch, or you can modify a copy of &lt;code&gt;srcweave-html-styler&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Comparison with Literate&lt;/h2&gt; &#xA;&lt;p&gt;srcweave is inspired by Zach Yedidia&#39;s &lt;a href=&#34;https://zyedidia.github.io/literate/&#34;&gt;Literate&lt;/a&gt;. I like his program, have used it for several years, and am grateful for his contribution. However, I have since developed my own preferences and ideas for improvement:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Written in Common Lisp instead of D. This makes it more stable and portable (works on BSD, etc).&lt;/li&gt; &#xA; &lt;li&gt;More modular UNIX design. srcweave completely delegates HTML formatting and libraries to a shell script. It provides high quality document output right out of the box, but is much easier to customize.&lt;/li&gt; &#xA; &lt;li&gt;Simpler handling of multiple files. The &#34;books&#34; feature in Literate is a little cumbersome. In srcweave you can have multiple chapters in a single file, or divide them each into their own file. There is no distinction.&lt;/li&gt; &#xA; &lt;li&gt;GPL license instead of MIT. srcweave is a program for end users. GPL should not restrict commercial use of the program while maximizing user freedom (contact me if you have an issue).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://github.com/zyedidia/literate.vim&#34;&gt;vim plugin&lt;/a&gt; should be compatible.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Known incompatibilities:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can migrate files from Literate with only minor changes. Here are the important differences:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Literate produces a file for any block title with a file extension (eg. &#34;out.txt&#34;). In srcweave, all file blocks must be prefixed with a path (eg. &lt;code&gt;/out.txt&lt;/code&gt; to create &lt;code&gt;out.txt&lt;/code&gt; in the working directory).&lt;/li&gt; &#xA; &lt;li&gt;Styling commands like &lt;code&gt;@add_css&lt;/code&gt;, &lt;code&gt;@colorscheme&lt;/code&gt; are ignored. All styling is done with a separate tool instead (see &#34;Styling&#34; section above).&lt;/li&gt; &#xA; &lt;li&gt;No support for &lt;code&gt;@book&lt;/code&gt;. Just pass multiple &lt;code&gt;.lit&lt;/code&gt; files to &lt;code&gt;srcweave&lt;/code&gt; in the order you want.&lt;/li&gt; &#xA; &lt;li&gt;No support for &lt;code&gt;@change&lt;/code&gt;. Adjusting &lt;code&gt;.lit&lt;/code&gt; files should be done using your build process, such as with a shell script or makefile.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;@title&lt;/code&gt; only sets the page title, it does not create a heading.&lt;/li&gt; &#xA; &lt;li&gt;Prefer markdown headings &lt;code&gt;# heading 1&lt;/code&gt; and &lt;code&gt;## heading 2&lt;/code&gt; instead of &lt;code&gt;@s&lt;/code&gt;, etc.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Acknowledgments&lt;/h2&gt; &#xA;&lt;p&gt;We are very grateful to all our contributors:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rpendleton&#34;&gt;Ryan Pendleton&lt;/a&gt; for designing the document styler.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/eihli&#34;&gt;Eric Ihli&lt;/a&gt; for creating an &lt;a href=&#34;https://github.com/eihli/lit-mode&#34;&gt;Emacs mode&lt;/a&gt; and guiding new features.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/justinmeiners/srcweave/master/LICENSE.txt&#34;&gt;GPL 2&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>