<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Common Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-06-04T01:34:34Z</updated>
  <subtitle>Daily Trending of Common Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ak-coram/cl-frugal-uuid</title>
    <updated>2023-06-04T01:34:34Z</updated>
    <id>tag:github.com,2023-06-04:/ak-coram/cl-frugal-uuid</id>
    <link href="https://github.com/ak-coram/cl-frugal-uuid" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Common Lisp UUID library with zero dependencies&lt;/p&gt;&lt;hr&gt;&lt;ul&gt; &#xA; &lt;li&gt;cl-frugal-uuid (WiP)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;#+begin_html&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a href=&#34;https://upload.wikimedia.org/wikipedia/commons/5/5f/NASA_satellite_view_of_Southern_Ocean_phytoplankton_bloom_%28crop%29.jpg&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://upload.wikimedia.org/wikipedia/commons/thumb/5/5f/NASA_satellite_view_of_Southern_Ocean_phytoplankton_bloom_%28crop%29.jpg/320px-NASA_satellite_view_of_Southern_Ocean_phytoplankton_bloom_%28crop%29.jpg&#34; width=&#34;220&#34; height=&#34;157&#34;&gt; &lt;/a&gt; &#xA;&lt;/div&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/ak-coram/cl-frugal-uuid/actions&#34;&gt; &lt;img alt=&#34;Build Status&#34; src=&#34;https://github.com/ak-coram/cl-frugal-uuid/workflows/CI/badge.svg?sanitize=true&#34;&gt; &lt;/a&gt; &lt;/p&gt; #+end_html &#xA;&lt;p&gt;Common Lisp [[https://en.wikipedia.org/wiki/Universally_unique_identifier][UUID]] library with zero dependencies&lt;/p&gt; &#xA;&lt;p&gt;** Rationale&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Permissive license (MIT)&lt;/li&gt; &#xA; &lt;li&gt;Small (e.g. doesn&#39;t rely on [[https://github.com/sharplispers/ironclad][Ironclad]])&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Limitations&lt;/p&gt; &#xA;&lt;p&gt;Currently only generating random UUIDs (Version 4) is supported. Please note that by default the implementation dependent built-in CL random number generator is used, which might not be of sufficient quality for your purposes. The use of cryptographic-quality random numbers is strongly recommended in order to reduce the probability of repeated values. Please see the section of this README on UUID Version 4 for setting up an alternative source of random numbers.&lt;/p&gt; &#xA;&lt;p&gt;The following implementations and operating systems are tested via [[https://github.com/ak-coram/cl-frugal-uuid/blob/main/.github/workflows/CI.yml][CI]]:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[[https://sbcl.org/][SBCL]] (Linux, Windows, macOS)&lt;/li&gt; &#xA; &lt;li&gt;[[https://ccl.clozure.com/][CCL]] (Linux, macOS)&lt;/li&gt; &#xA; &lt;li&gt;[[https://ecl.common-lisp.dev/][ECL]] (Linux, macOS)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Installation&lt;/p&gt; &#xA;&lt;p&gt;cl-frugal-uuid can be installed via [[https://www.quicklisp.org/][Quicklisp]] from the [[https://ultralisp.org/][Ultralisp]] distribution:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src lisp (ql-dist:install-dist &#34;&lt;a href=&#34;http://dist.ultralisp.org/&#34;&gt;http://dist.ultralisp.org/&lt;/a&gt;&#34; :prompt nil) (ql:quickload :frugal-uuid) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;** Basic usage&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src lisp ;; Generate random UUID (fuuid:make-v4) ; =&amp;gt; #&amp;lt;FRUGAL-UUID:UUID 3ffc05ba-9c35-4f21-8535-beba03a2495c&amp;gt;&lt;/p&gt; &#xA;&lt;p&gt;;; Convert random UUID to canonical string representation (fuuid:to-string (fuuid:make-v4)) ; =&amp;gt; &#34;2172e412-06a6-4cfb-bbf1-3584aadaed15&#34;&lt;/p&gt; &#xA;&lt;p&gt;;; Parse UUID from string (fuuid:from-string &#34;0909e4f4-8333-4712-8609-5ae02d735772&#34;) ;; =&amp;gt; #&amp;lt;FRUGAL-UUID:UUID 0909e4f4-8333-4712-8609-5ae02d735772&amp;gt;&lt;/p&gt; &#xA;&lt;p&gt;;; Compare two random UUID values (fuuid:uuid= (fuuid:make-v4) (fuuid:make-v4)) ; =&amp;gt; NIL&lt;/p&gt; &#xA;&lt;p&gt;;; Loosely compare UUID with canonical string representation (fuuid:uuid-equal-p (fuuid:from-string &#34;0909e4f4-8333-4712-8609-5ae02d735772&#34;) &#34;0909e4f4-8333-4712-8609-5ae02d735772&#34;) ; =&amp;gt; T #+end_src&lt;/p&gt; &#xA;&lt;p&gt;** UUID Versions&lt;/p&gt; &#xA;&lt;p&gt;*** Version 4&lt;/p&gt; &#xA;&lt;p&gt;If you have an alternative source of random numbers, you can use it instead of the built-in random number generator. Please consult the documentation of your chosen library for details on thread-safety if you intend to use this in a multi-threaded program.&lt;/p&gt; &#xA;&lt;p&gt;Below you&#39;ll find and example using the [[https://github.com/avodonosov/secure-random][secure-random]] library which relies on OpenSSL:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src lisp ;; Load library for generating secure random numbers (ql:quickload :secure-random)&lt;/p&gt; &#xA;&lt;p&gt;;; Setup random number generator (fuuid:initialize-v4-random #&#39;secure-random:number secure-random:&lt;em&gt;generator&lt;/em&gt;)&lt;/p&gt; &#xA;&lt;p&gt;;; Generate random UUID using secure random numbers (fuuid:make-v4) ; =&amp;gt; #&amp;lt;FRUGAL-UUID:UUID 4bed852c-e726-4007-9a1f-e569a59d060a&amp;gt; #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Alternatively you can pass 128-bit random integers directly:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src lisp (fuuid:make-v4-from-integer (secure-random:number #xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Another alternative setup using [[https://github.com/sharplispers/ironclad][Ironclad]]:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src lisp (ql:quickload :ironclad/prngs)&lt;/p&gt; &#xA;&lt;p&gt;;; Use the default Ironclad PRNG: (fuuid:initialize-v4-random #&#39;crypto:strong-random) (fuuid:make-v4) ; =&amp;gt; #&amp;lt;FRUGAL-UUID:UUID 547d5dce-1de5-41f7-bd6f-22de70e898a7&amp;gt;&lt;/p&gt; &#xA;&lt;p&gt;;; Setup with custom PRNG: (fuuid:initialize-v4-random #&#39;crypto:strong-random (ironclad:make-prng :os)) (fuuid:make-v4) ; =&amp;gt; #&amp;lt;FRUGAL-UUID:UUID 4bed852c-e726-4007-9a1f-e569a59d060a&amp;gt; #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Some other examples which might be helpful:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src lisp ;; Dynamically bind random number generator: (fuuid:with-v4-random-number-generator (make-random-state t) (fuuid:make-v4))&lt;/p&gt; &#xA;&lt;p&gt;;; Dynamically bind both random number generator &amp;amp; random function: (fuuid:with-v4-random (#&#39;random (make-random-state t)) (fuuid:make-v4)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;** Running tests&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Load the tests via Quicklisp:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;#+begin_src lisp (ql:quickload :frugal-uuid/test) #+end_src&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Use [[https://asdf.common-lisp.dev/][ASDF]] or [[https://fiveam.common-lisp.dev/][FiveAM]] to run the tests:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;#+begin_src lisp ;; Using ASDF: (asdf:test-system :frugal-uuid) ;; Using FiveAM directly: (fiveam:run! :frugal-uuid) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;** Legal&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Released under the MIT License.&lt;/li&gt; &#xA; &lt;li&gt;[[https://commons.wikimedia.org/wiki/File:NASA_satellite_view_of_Southern_Ocean_phytoplankton_bloom_(crop).jpg][Source]] for README photo&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>