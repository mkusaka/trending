<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Common Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-09-26T01:32:22Z</updated>
  <subtitle>Daily Trending of Common Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>susam/mathb</title>
    <updated>2022-09-26T01:32:22Z</updated>
    <id>tag:github.com,2022-09-26:/susam/mathb</id>
    <link href="https://github.com/susam/mathb" rel="alternate"></link>
    <summary type="html">&lt;p&gt;MathB.in - Mathematics Pastebin Written in Common Lisp&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;MathB&lt;/h1&gt; &#xA;&lt;p&gt;MathB is a mathematics pastebin software that powers &lt;a href=&#34;https://mathb.in/&#34;&gt;MathB.in&lt;/a&gt;. It is a web-based service meant for sharing snippets of mathematical text with others on the world wide web. Visit &lt;a href=&#34;https://mathb.in/&#34;&gt;https://mathb.in/&lt;/a&gt; to use the mathematics pastebin.&lt;/p&gt; &#xA;&lt;h2&gt;Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/susam/mathb/main/#quick-start&#34;&gt;Quick Start&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/susam/mathb/main/#data-directory&#34;&gt;Data Directory&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/susam/mathb/main/#data-files&#34;&gt;Data Files&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/susam/mathb/main/#runtime-options&#34;&gt;Runtime Options&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/susam/mathb/main/#template-files&#34;&gt;Templates Files&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/susam/mathb/main/#static-files&#34;&gt;Static Files&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/susam/mathb/main/#live-directory&#34;&gt;Live Directory&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/susam/mathb/main/#history&#34;&gt;History&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/susam/mathb/main/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/susam/mathb/main/#support&#34;&gt;Support&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/susam/mathb/main/#channels&#34;&gt;Channels&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/susam/mathb/main/#more&#34;&gt;More&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Quick Start&lt;/h2&gt; &#xA;&lt;p&gt;This section explains how to run MathB locally. The steps assume a macOS, Debian, or Debian-based Linux distribution.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Install SBCL and Git.&lt;/p&gt; &lt;p&gt;On macOS, enter the following command if you have Homebrew:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;brew install sbcl git&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;On Debian, Ubuntu, or another Debian-based Linux system, enter the following command:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo apt-get update &amp;amp;&amp;amp; sudo apt-get install sbcl git&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Install Quicklisp with the following commands:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;curl -O https://beta.quicklisp.org/quicklisp.lisp&#xA;sbcl --load quicklisp.lisp --eval &#34;(quicklisp-quickstart:install)&#34; --quit&#xA;sbcl --load ~/quicklisp/setup.lisp --eval &#34;(ql:add-to-init-file)&#34; --quit&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;From here on, we assume that all commands are being run in the top-level directory of this project. Set up dependencies necessary to run MathB by running this command within the top-level directory of this project:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;make live&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This creates a &lt;code&gt;_live&lt;/code&gt; directory within the current directory and copies all necessary dependencies to it.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Create MathB data directory:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo mkdir -p /opt/data/mathb/&#xA;sudo cp -R meta/data/* /opt/data/mathb/&#xA;sudo chown -R &#34;$USER&#34; /opt/data/mathb/&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;By default, MathB reads post data from and writes post to &lt;code&gt;/opt/data/mathb/&lt;/code&gt;. The next section explains how to make MathB use a custom data directory path.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run MathB with the following command:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sbcl --load mathb.lisp&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Visit &lt;a href=&#34;http://localhost:4242/&#34;&gt;http://localhost:4242/&lt;/a&gt; with a web browser to use MathB.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;After starting MathB in this manner, click on the various navigation links and make a new post to confirm that MathB is working as expected.&lt;/p&gt; &#xA;&lt;h2&gt;Data Directory&lt;/h2&gt; &#xA;&lt;p&gt;In the previous section, we created a data directory at &lt;code&gt;/opt/data/mathb/&lt;/code&gt;. By default, MathB writes new posts to and reads posts from this directory path. To make MathB use a different path for the data directory, set the variable named &lt;code&gt;*data-directory*&lt;/code&gt; before loading MathB. The following steps explain how to do this:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Create MathB data directory at a custom path, say, at &lt;code&gt;~/data&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;mkdir -p ~/data/&#xA;cp -R meta/data/* ~/data/&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run MathB with the following command:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sbcl --eval &#39;(defvar *data-directory* &#34;~/data/&#34;)&#39; --load mathb.lisp&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Visit &lt;a href=&#34;http://localhost:4242/&#34;&gt;http://localhost:4242/&lt;/a&gt; with a web browser to use MathB.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;After starting MathB in this manner, click on the various navigation links and make a new post to confirm that MathB is working as expected.&lt;/p&gt; &#xA;&lt;h2&gt;Data Files&lt;/h2&gt; &#xA;&lt;p&gt;The data directory contains the following files:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/susam/mathb/main/meta/data/opt.lisp&#34;&gt;&lt;code&gt;opt.lisp&lt;/code&gt;&lt;/a&gt;: This file contains a property list that can be modified to alter the behaviour of MathB. This is explained in detail in the next section.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/susam/mathb/main/meta/data/slug.txt&#34;&gt;&lt;code&gt;slug.txt&lt;/code&gt;&lt;/a&gt;: This file contains the ID of the latest post successfully saved.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/susam/mathb/main/meta/data/post/0/0&#34;&gt;&lt;code&gt;post/X/Y/*.txt&lt;/code&gt;&lt;/a&gt;: These files contain the actual posts submitted by users where &lt;code&gt;X&lt;/code&gt; and &lt;code&gt;Y&lt;/code&gt; are placeholders for two integers explained shortly. Each &lt;code&gt;.txt&lt;/code&gt; file contains a post submitted by a user.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In the last point, the placeholder &lt;code&gt;X&lt;/code&gt; is the post ID divided by 1000000. The placeholder &lt;code&gt;Y&lt;/code&gt; is the post ID divided by 1000. For example, for a post with ID 1, &lt;code&gt;X&lt;/code&gt; is &lt;code&gt;0&lt;/code&gt; and &lt;code&gt;Y&lt;/code&gt; is &lt;code&gt;0&lt;/code&gt;, so a post with this ID is saved at &lt;code&gt;post/0/0/1.txt&lt;/code&gt;. For a more illustrative example, consider a post with with ID 2301477. Now &lt;code&gt;X&lt;/code&gt; is &lt;code&gt;2&lt;/code&gt; and &lt;code&gt;Y&lt;/code&gt; is &lt;code&gt;2301&lt;/code&gt;, so a post with this ID is saved at &lt;code&gt;post/2/2301/2301477.txt&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Let us call each &lt;code&gt;X&lt;/code&gt; directory a short-prefix directory and each &lt;code&gt;Y&lt;/code&gt; directory under it a long-prefix directory. As a result of the calculation explained above, each short-prefix directory contains a maximum of 1000 long-prefix directories and each long-prefix directory contains a maximum of 1000 post files. Thus, each short-prefix directory contains a maximum of one million post files under it.&lt;/p&gt; &#xA;&lt;h2&gt;Runtime Options&lt;/h2&gt; &#xA;&lt;p&gt;MathB reads runtime properties from &lt;code&gt;opt.lisp&lt;/code&gt;. This file contains a property list. Each property in this list is followed by a value for that property. This property list may be used to alter the behaviour of MathB. A list of all supported properties and their descriptions is provided below.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;:read-only&lt;/code&gt; (default is &lt;code&gt;nil&lt;/code&gt;): A value of &lt;code&gt;t&lt;/code&gt; makes MathB run in read-only mode, i.e., old posts can be viewed but new posts cannot be made. A value of &lt;code&gt;nil&lt;/code&gt; makes MathB run normally in read-write mode.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;:max-title-length&lt;/code&gt; (default is &lt;code&gt;120&lt;/code&gt;): The maximum number of characters allowed in the title field.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;:max-name-length&lt;/code&gt; (default is &lt;code&gt;120&lt;/code&gt;): The maximum number of characters allowed in the name field.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;:max-code-length&lt;/code&gt; (default is &lt;code&gt;10000&lt;/code&gt;): The maximum number of characters allowed in the code field.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;:global-post-interval&lt;/code&gt; (default is &lt;code&gt;0&lt;/code&gt;): The minimum interval (in seconds) between two consecutive successful posts allowed on MathB.&lt;/p&gt; &lt;p&gt;Example: If this value is &lt;code&gt;10&lt;/code&gt; and one client submits a new post at 10:00:00 and another client submits a post at 10:00:07, the post of the second client is rejected with an error message that they must wait for 3 more seconds before submitting the post. An attempt to submit the post at 10:00:10 or later would succeed, provided that no other client submitted another post between 10:00:10 and the second client&#39;s attempt to make a post.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;:client-post-interval&lt;/code&gt; (default is &lt;code&gt;0&lt;/code&gt;): The minimum interval (in seconds) between two consecutive successful posts allowed from the same client.&lt;/p&gt; &lt;p&gt;Example: If this value is &lt;code&gt;10&lt;/code&gt; and one client submits a new post at 10:00:00, then the same client is allowed to make the next successful post submission at 10:00:10 or later. If the same client submits another post at 10:00:07, the post is rejected with an error message that they must wait for 3 more seconds before submitting the post. This does not affect the posting behaviour for other clients. For example, another client can successfully submit their post at 10:00:07 while the first client cannot.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;:block&lt;/code&gt; (default is &lt;code&gt;nil&lt;/code&gt;): A list of strings that are not allowed in a post. If a post contains any string in this list, the post is rejected and the input form is returned intact to the client.&lt;/p&gt; &lt;p&gt;Example: If this value is &lt;code&gt;(&#34;berk&#34; &#34;naff&#34; &#34;xxx&#34;)&lt;/code&gt; and a client posts content which contains the string &lt;code&gt;xxx&lt;/code&gt; in any field (code, title, or name), the post is rejected.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;:ban&lt;/code&gt; (default is &lt;code&gt;nil&lt;/code&gt;): A list of IPv4 or IPv6 address prefixes. If the address of the remote client (as it appears in the MathB logs) matches any prefix in this list, the post from the client is rejected. The prefixes must be expressed as simple string literals. CIDRs, globs, regular expressions, etc. are not supported. A dollar sign (&lt;code&gt;$&lt;/code&gt;) at the end of a prefix string matches the end of the client&#39;s address string.&lt;/p&gt; &lt;p&gt;Example: Let us consider a value of &lt;code&gt;(&#34;10.1.&#34; &#34;10.2.0.2&#34; &#34;10.3.0.2$&#34;)&lt;/code&gt; for this property. If a client from IP address &lt;code&gt;10.1.2.3&lt;/code&gt; submits a post, it is rejected because the prefix &lt;code&gt;10.1.&lt;/code&gt; matches this IP address. If a client from IP address &lt;code&gt;10.2.0.23&lt;/code&gt; submits a post, it is rejected because the prefix &lt;code&gt;10.2.0.2&lt;/code&gt; matches this IP address. If a client from IP address &lt;code&gt;10.3.0.2&lt;/code&gt; submits a post, it is rejected because the prefix &lt;code&gt;10.3.0.2$&lt;/code&gt; matches this IP address. If a client from IP address &lt;code&gt;10.3.0.23&lt;/code&gt; submits a post, it is accepted because none of the prefixes match this IP address.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If a property name is missing from this file or if the file itself is missing, then MathB defaults to the default value of the property mentioned within parentheses above.&lt;/p&gt; &#xA;&lt;p&gt;Whenever MathB rejects a post due to a runtime option, the entire input form is returned intact to the client with an error message, so that they can fix the errors or wait for the suggested post interval and resubmit the post again.&lt;/p&gt; &#xA;&lt;p&gt;The property values in &lt;code&gt;opt.lisp&lt;/code&gt; may be modified at any time, even while MathB is running. It is not necessary to restart MathB after changing property values in &lt;code&gt;opt.lisp&lt;/code&gt;. MathB automatically picks up the changes while processing the next HTTP POST request.&lt;/p&gt; &#xA;&lt;h2&gt;Template Files&lt;/h2&gt; &#xA;&lt;p&gt;There are two template files to generate the HTML pages sent to the clients:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/susam/mathb/main/web/html/mathb.html&#34;&gt;&lt;code&gt;web/html/mathb.html&lt;/code&gt;&lt;/a&gt;: This template file is used to generate the HTML response for the home page, a mathematical snippet page, as well as an HTTP response page when the post is rejected due to a validation error.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/susam/mathb/main/web/html/error.html&#34;&gt;&lt;code&gt;web/html/error.html&lt;/code&gt;&lt;/a&gt;: This template file is used to generate HTTP error pages.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;A template file may be modified at any time, even while MathB is running. It is not necessary to restart MathB after changing a template file. MathB automatically picks up the template changes while processing the next HTTP request.&lt;/p&gt; &#xA;&lt;h2&gt;Static Files&lt;/h2&gt; &#xA;&lt;p&gt;There are three types of static files that MathB uses to for its HTML pages:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/susam/mathb/main/web/js/&#34;&gt;&lt;code&gt;web/js/&lt;/code&gt;&lt;/a&gt;: This directory contains the JavaScript files that perform input rendering as a user types out content in the input form.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/susam/mathb/main/web/css/&#34;&gt;&lt;code&gt;web/css/&lt;/code&gt;&lt;/a&gt;: This directory contains the stylesheets for the HTML pages generated by MathB.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/susam/mathb/main/web/img/&#34;&gt;&lt;code&gt;web/img/&lt;/code&gt;&lt;/a&gt;: This directory contains the favicons for the website. These icons are generated using a LaTeX project in the &lt;a href=&#34;https://raw.githubusercontent.com/susam/mathb/main/meta/logo/&#34;&gt;&lt;code&gt;meta/logo/&lt;/code&gt;&lt;/a&gt; directory.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;A static file may be modified at any time, even while MathB is running. It is not necessary to restart MathB after adding, deleting, or editing a static file. However, it is necessary to run &lt;code&gt;make live&lt;/code&gt; (in the top-level directory of the project) to copy the static files to the live directory (explained in the next section) from which MathB serves the static files.&lt;/p&gt; &#xA;&lt;h2&gt;Live Directory&lt;/h2&gt; &#xA;&lt;p&gt;MathB needs to pull additional JavaScript libraries named TeXMe, Marked, and MathJax that are essential for rendering Markdown and LaTeX input. This is done by running the following command in the top-level directory of this project:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;make live&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The above command creates a &lt;code&gt;_live&lt;/code&gt; directory from scratch, copies the static files to it, then pulls the additional JavaScript libraries into it, and sets up the &lt;code&gt;_live&lt;/code&gt; directory, so that MathB can serve the static files from it.&lt;/p&gt; &#xA;&lt;p&gt;The live directory should never be modified directly because every &lt;code&gt;make live&lt;/code&gt; run deletes the entire directory and creates it from scratch again. Any modification necessary should be made to the template files or static files explained in the previous two sections.&lt;/p&gt; &#xA;&lt;h2&gt;History&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://mathb.in/&#34;&gt;MathB.in&lt;/a&gt; is the oldest mathematics pastebin that is still online and serving its community of users. It isn&#39;t the first mathematics pastebin though. It&#39;s the second. The first pastebin was written by Mark A. Stratman. It was hosted at the domain &lt;em&gt;mathbin.net&lt;/em&gt; until 2020.&lt;/p&gt; &#xA;&lt;p&gt;MathB.in was born on Sunday, 25 March 2012, after a single night of furious coding. This was a result of stumbling upon &lt;a href=&#34;https://math.stackexchange.com/&#34;&gt;math.stackexchange.com&lt;/a&gt; the previous night which used MathJax to render mathematics formula on the web browser. Thanks to that chance encounter with MathJax, the rest of the Saturday night was spent in coding a new mathematics pastebin using MathJax and PHP. After coding all through the night, registering a new domain name, and setting up a website, &lt;a href=&#34;https://mathb.in/&#34;&gt;MathB.in&lt;/a&gt; was released early Sunday morning.&lt;/p&gt; &#xA;&lt;p&gt;The current version of MathB.in no longer runs on PHP. It has been rewritten in Common Lisp since then. See the blog post &lt;a href=&#34;https://susam.net/blog/mathbin-turns-10.html&#34;&gt;MathB.in Turns 10&lt;/a&gt; for more details about the history of MathB.in.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This is free and open source software. You can use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of it, under the terms of the MIT License. See &lt;a href=&#34;https://raw.githubusercontent.com/susam/mathb/main/LICENSE.md&#34;&gt;LICENSE.md&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;p&gt;This software is provided &#34;AS IS&#34;, WITHOUT WARRANTY OF ANY KIND, express or implied. See &lt;a href=&#34;https://raw.githubusercontent.com/susam/mathb/main/LICENSE.md&#34;&gt;LICENSE.md&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;p&gt;To report bugs, suggest improvements, or ask questions, &lt;a href=&#34;https://github.com/susam/mathb/issues&#34;&gt;create issues&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Channels&lt;/h2&gt; &#xA;&lt;p&gt;The author of this project hangs out at the following places online:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://susam.net&#34;&gt;susam.net&lt;/a&gt; on the Web&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/susam&#34;&gt;@susam&lt;/a&gt; on Twitter&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/susam&#34;&gt;@susam&lt;/a&gt; on GitHub&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://web.libera.chat/#susam&#34;&gt;#susam&lt;/a&gt; on Libera&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://app.element.io/#/room/#susam:matrix.org&#34;&gt;#susam&lt;/a&gt; on Matrix&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You are welcome to subscribe to, follow, or join one or more of the above channels to receive updates from the author or ask questions about this project.&lt;/p&gt; &#xA;&lt;h2&gt;More&lt;/h2&gt; &#xA;&lt;p&gt;If you like this project, check out related projects &lt;a href=&#34;https://github.com/susam/texme&#34;&gt;TeXMe&lt;/a&gt; and &lt;a href=&#34;https://github.com/susam/muboard&#34;&gt;Muboard&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>woodrush/lambdacraft</title>
    <updated>2022-09-26T01:32:22Z</updated>
    <id>tag:github.com,2022-09-26:/woodrush/lambdacraft</id>
    <link href="https://github.com/woodrush/lambdacraft" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Common Lisp DSL for building untyped lambda calculus expressions&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/woodrush/lambdacraft/main/bin/lambdacraft_logo.png&#34; alt=&#34;LambdaCraftLisp&#39;s logo&#34;&gt; &lt;br&gt; &lt;a href=&#34;https://github.com/woodrush/lambdacraft/actions/workflows/test.yml&#34;&gt;&lt;img src=&#34;https://github.com/woodrush/lambdacraft/actions/workflows/test.yml/badge.svg?sanitize=true&#34; alt=&#34;test&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;LambdaCraft is a Common Lisp DSL for building untyped lambda calculus terms in a macro-based style. It is inspired by Ben Rudiak-Gould&#39;s Scheme program Lazier, a compiler from lambda terms written in Scheme to &lt;a href=&#34;https://tromp.github.io/cl/lazy-k.html&#34;&gt;Lazy K&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;LambdaCraft is used to build &lt;a href=&#34;https://github.com/woodrush/lambdalisp&#34;&gt;LambdaLisp&lt;/a&gt;, a Lisp interpreter written in untyped lambda calculus. It can be used to write large programs in the following lambda-calculus-based languages:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://tromp.github.io/cl/cl.html&#34;&gt;Binary Lambda Calculus&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.golfscript.com/lam/&#34;&gt;Universal Lambda&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://tromp.github.io/cl/lazy-k.html&#34;&gt;Lazy K&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;LambdaCraft can also be used to build general-purpose generic lambda terms for educational purposes as well. Many output formats shown in the &lt;a href=&#34;https://raw.githubusercontent.com/woodrush/lambdacraft/main/#supported-output-formats&#34;&gt;supported output formats&lt;/a&gt; section are supported.&lt;/p&gt; &#xA;&lt;h2&gt;Example&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;(load &#34;./lambdacraft.cl&#34;)&#xA;&#xA;(defrec-lazy fact (n)&#xA;  (if (&amp;lt;= n 0)&#xA;    1&#xA;    (* n (fact (- n 1)))))&#xA;&#xA;(format t (compile-to-plaintext-lambda-lazy fact))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;will print&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(λx.(λy.(x (y y)) λy.(x (y y))) λx.λy.((((((λz.λa.a λy.λa.λb.(((y λc.λd.(d (c a))) λc.b) λc.c)) y) λz.λz.λb.b) λz.λa.z) λz.λa.(z a)) λz.λa.((y ((x ((λz.λa.(z a) y.λz.λa.(((y λe.λf.(f (e z))) λe.a) λe.e)) y)) z)) a)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Which is a lambda calculus term that takes a &lt;a href=&#34;https://en.wikipedia.org/wiki/Church_encoding&#34;&gt;Church-encoded&lt;/a&gt; number and returns its factorial. Here, &lt;code&gt;defrec-lazy&lt;/code&gt; is a LambdaCraft macro that uses the &lt;a href=&#34;https://en.wikipedia.org/wiki/Fixed-point_combinator&#34;&gt;Y combinator&lt;/a&gt; for self-recursion. The source code is available as &lt;a href=&#34;https://raw.githubusercontent.com/woodrush/lambdacraft/main/example.cl&#34;&gt;example.cl&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Usage for Lambda-Calculus-Based Programming Languages&lt;/h2&gt; &#xA;&lt;p&gt;LambdaCraft supports the following lambda-calculus-based and SKI-combinator-based languages:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://tromp.github.io/cl/cl.html&#34;&gt;Binary Lambda Calculus&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.golfscript.com/lam/&#34;&gt;Universal Lambda&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://tromp.github.io/cl/lazy-k.html&#34;&gt;Lazy K&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;These languages accept a lambda calculus term or a &lt;a href=&#34;https://en.wikipedia.org/wiki/SKI_combinator_calculus&#34;&gt;SKI combinator calculus&lt;/a&gt; term as a program. Using a stream-based I/O with strings encoded in the &lt;a href=&#34;https://en.wikipedia.org/wiki/Mogensen%E2%80%93Scott_encoding&#34;&gt;Mogensen-Scott encoding&lt;/a&gt;, these languages are able to handle lambda terms as a function that takes a string and outputs a string, where each string represents the standard input and output.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;examples/*.cl&lt;/code&gt; are sample scripts for these languages, which compiles to a program that prints the letter &lt;code&gt;A&lt;/code&gt; and exits. The outputs of &lt;code&gt;examples/*.cl&lt;/code&gt; can be run on each language as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sbcl --script ./examples/blc.cl | asc2bin | tromp        # Binary Lambda Calculus&#xA;sbcl --script ./examples/ulamb.cl | asc2bin | clamb -u   # Universal Lambda&#xA;lazyk &amp;lt;(sbcl --script ./examples/lazyk.cl) -u            # Lazy K&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Instructions for building the interpreters for these languages are described in detail in my other project, &lt;a href=&#34;https://github.com/woodrush/lambdalisp&#34;&gt;LambdaLisp&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Supported Output Formats&lt;/h2&gt; &#xA;&lt;p&gt;LambdaCraft can compile lambda terms into the following formats:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Format&lt;/th&gt; &#xA;   &lt;th&gt;Example&lt;/th&gt; &#xA;   &lt;th&gt;API&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Plaintext lambda notation&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;\x.x&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;compile-to-plaintext-lambda-lazy&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://tromp.github.io/cl/cl.html&#34;&gt;Binary lambda calculus&lt;/a&gt; notation&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;0010&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;compile-to-blc-lazy&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SKI combinator calculus term in &lt;a href=&#34;http://www.madore.org/~david/programs/unlambda/&#34;&gt;Unlambda&lt;/a&gt; notation&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt; ``skk&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;compile-to-ski-lazy&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SKI combinator calculus term&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;((SK)K)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;compile-to-ski-parens-lazy&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Plaintext lambda compatible with &lt;a href=&#34;https://github.com/tromp/AIT&#34;&gt;https://github.com/tromp/AIT&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;(\x.x)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;compile-to-lam-lazy&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Lisp S-expression&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;(lambda (x) x)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;compile-to-lisp-lazy&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Lisp S-expression, pretty-printed&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;(lambda (x) x)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;compile-to-lisp-pretty-lazy&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;JavaScript function&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;function (x) { return x; }&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;compile-to-js-lazy&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;JavaScript function in arrow notation&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;(x) =&amp;gt; x&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;compile-to-js-arrow-lazy&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Python lambda&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;lambda x: x&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;compile-to-python-lazy&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;LambdaCraft is written in Common Lisp. It should run in any Common Lisp interpreter of your choice. I particularly use SBCL (Steel Bank Common Lisp), which is installable by:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo apt install sbcl&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or on a Mac with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;brew install sbcl&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;LambdaCraft can then be used by simply including the program as a header, and running the source as a Common Lisp program. For example, &lt;a href=&#34;https://raw.githubusercontent.com/woodrush/lambdacraft/main/example.cl&#34;&gt;example.cl&lt;/a&gt; can be run as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sbcl --script example.cl&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;which will print the factorial function defined in the script.&lt;/p&gt; &#xA;&lt;p&gt;LambdaCraft also runs on &lt;a href=&#34;https://github.com/woodrush/lambdalisp&#34;&gt;LambdaLisp&lt;/a&gt; as well, since it is written as a Common-Lisp-LambdaLisp polyglot program. Practically, running it on Common Lisp is faster.&lt;/p&gt; &#xA;&lt;h2&gt;Testing&lt;/h2&gt; &#xA;&lt;p&gt;The test runs &lt;code&gt;make test&lt;/code&gt;, which does the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Runs &lt;a href=&#34;https://raw.githubusercontent.com/woodrush/lambdacraft/main/examples/ulamb.cl&#34;&gt;./examples/ulamb.cl&lt;/a&gt; with SBCL, and saves the output as &lt;code&gt;a.ulamb&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Builds &lt;a href=&#34;https://github.com/irori/clamb&#34;&gt;clamb&lt;/a&gt;, a &lt;a href=&#34;http://www.golfscript.com/lam/&#34;&gt;Universal Lambda&lt;/a&gt; interpreter written by Kunihiko Sakamoto (&lt;a href=&#34;https://github.com/irori/&#34;&gt;@irori&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Runs &lt;code&gt;a.ulamb&lt;/code&gt; on &lt;code&gt;clamb&lt;/code&gt; and confirms that it prints the letter &lt;code&gt;A&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>K1D77A/lisp-pay</title>
    <updated>2022-09-26T01:32:22Z</updated>
    <id>tag:github.com,2022-09-26:/K1D77A/lisp-pay</id>
    <link href="https://github.com/K1D77A/lisp-pay" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Wrappers around various Payment Processors&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;lisp-pay&lt;/h1&gt; &#xA;&lt;h2&gt;Wrapper over multiple Payment Processor API&#39;s&lt;/h2&gt; &#xA;&lt;p&gt;Current: Paypal, Stripe, Coinpayment&lt;/p&gt; &#xA;&lt;p&gt;Coming: BTCPayserver&lt;/p&gt; &#xA;&lt;p&gt;I would like to make many things like Webhook verification generic. I would like to make responses as generic as possible, currently this is possible with Coinpayments and Paypal, but I implemented Stripe responses as conditions... Perhaps I should do the same with the others. I am going to remove all *parse-as* and instead parse json as hash-tables. Coinpayments will be an exception until I am required to fix it.&lt;/p&gt; &#xA;&lt;p&gt;For now there is backward compatibility with cl-coinpayments, latter-day-paypal and stripe-against-the-modern-world as you can use their respective nicknames.&lt;/p&gt; &#xA;&lt;h1&gt;Coinpayments&lt;/h1&gt; &#xA;&lt;h2&gt;cl-coinpayments&lt;/h2&gt; &#xA;&lt;p&gt;This is simply a helper library for using working with the original version of the coinpayment.net API, there is a new version of the API in the works.&lt;/p&gt; &#xA;&lt;h2&gt;Intro&lt;/h2&gt; &#xA;&lt;p&gt;The coinpayment IPN (Instant Payment Notification) system sends messages to a listening server to inform the server of activity within their coinpayment account, whether this is to inform the user of a processed payment, whether a payment has failed etc. You can see the current docs on IPN&#39;s here: &lt;a href=&#34;https://www.coinpayments.net/merchant-tools-ipn&#34;&gt;https://www.coinpayments.net/merchant-tools-ipn&lt;/a&gt; this library just helps with managing the IPN&#39;s you receive.&lt;/p&gt; &#xA;&lt;h3&gt;Quick notes&lt;/h3&gt; &#xA;&lt;p&gt;The post data sent from the coinpayment server is formatted in snake case ie &lt;code&gt;i_am_a_variable&lt;/code&gt; but when you convert the data into a plist representing an IPN, all the snake_case keys are converted to kebab case ie i-am-a-variable, so &lt;code&gt;ipn_type&lt;/code&gt; would be the keyword &lt;code&gt;:IPN-TYPE&lt;/code&gt;. Parsing is memoized so it should be pretty fast.&lt;/p&gt; &#xA;&lt;h2&gt;Working with IPN&#39;s&lt;/h2&gt; &#xA;&lt;p&gt;This section is talking about the IPN&#39;s, the next is about API calls.&lt;/p&gt; &#xA;&lt;h3&gt;Parsing the IPN&#39;s&lt;/h3&gt; &#xA;&lt;p&gt;There is a generic function called &lt;code&gt;(parse-data data)&lt;/code&gt; which accepts a list, a string or an array, with this it attempts to convert it to a PLIST.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;#(97 109 111 117 110 116 61 49 48 46 48 48 48 48 48 48 48 48 38 97 109 111 117&#xA;  110 116 105 61 49 48 48 48 48 48 48 48 48 48 38 99 117 114 114 101 110 99 121&#xA;  61 76 84 67 84 38 102 101 101 61 48 46 48 48 48 48 48 48 48 48 38 102 101 101&#xA;  105 61 48 38 102 105 97 116 95 97 109 111 117 110 116 61 49 49 48 56 46 48 51&#xA;  48 50 57 49 53 48 38 102 105 97 116 95 97 109 111 117 110 116 105 61 49 49 48&#xA;  56 48 51 48 50 57 49 53 48 38 102 105 97 116 95 99 111 105 110 61 71 66 80 38&#xA;  102 114 111 109 61 56 97 99 57 53 50 56 100 49 57 49 102 56 102 98 51 102 53&#xA;  98 57 100 97 97 50 53 53 51 56 99 52 97 101 38 105 112 110 95 105 100 61 102&#xA;  54 48 102 55 51 57 49 101 99 54 48 54 100 50 54 51 49 101 54 100 53 51 49 53&#xA;  55 57 48 54 100 98 102 38 105 112 110 95 109 111 100 101 61 104 109 97 99 38&#xA;  105 112 110 95 116 121 112 101 61 116 114 97 110 115 102 101 114 38 105 112&#xA;  110 95 118 101 114 115 105 111 110 61 49 46 48 38 109 101 114 99 104 97 110&#xA;  116 61 54 57 56 57 48 54 51 98 99 53 101 48 102 52 51 99 49 51 57 102 56 100&#xA;  100 102 101 48 101 55 49 100 98 57 38 115 116 97 116 117 115 61 50 38 115 116&#xA;  97 116 117 115 95 116 101 120 116 61 67 111 109 112 108 101 116 101 38 116&#xA;  120 110 95 105 100 61 67 84 70 70 51 84 77 74 73 57 79 74 65 73 74 56 83 83&#xA;  77 74 86 75 69 66 72 74)&#xA;CL-COINPAYMENTS&amp;gt; (parse-data *)&#xA;(:AMOUNT &#34;10.00000000&#34; :AMOUNTI &#34;1000000000&#34; :CURRENCY &#34;LTCT&#34; :FEE &#34;0.00000000&#34;&#xA; :FEEI &#34;0&#34; :FIAT-AMOUNT &#34;1108.03029150&#34; :FIAT-AMOUNTI &#34;110803029150&#34; :FIAT-COIN&#xA; &#34;GBP&#34; :FROM &#34;8ac9528d191f8fb3f5b9daa25538c4ae&#34; :IPN-ID&#xA; &#34;f60f7391ec606d2631e6d53157906dbf&#34; :IPN-MODE &#34;hmac&#34; :IPN-TYPE &#34;transfer&#34; ... )&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Verifying the source&lt;/h3&gt; &#xA;&lt;p&gt;coinpayment signs all its messages from the API with a HMAC header, with Hunchentoot you can extract that header like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt; (let* ((headers (tbnl:headers-in*))&#xA;        (hmac (cdr (assoc :hmac headers))))&#xA;     hmac)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now using the method &lt;code&gt;(verify-data hmac private-key raw-post)&lt;/code&gt; you can parse this header your IPN Secret, this is not your API secret key but the key &lt;em&gt;you&lt;/em&gt; provided as a &#39;secret&#39; &#34;Your IPN Secret is a string of your choosing that is used to verify that an IPN was really sent from our servers &#34;&lt;/p&gt; &#xA;&lt;p&gt;and either the parsed plist, the raw-data or a string consisting of post parameters like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(hunchentoot:define-easy-handler (ipn :uri &#34;/ipnreceiver&#34; )&#xA;    ()&#xA;  (let* ((headers (tbnl:headers-in*))&#xA;         (hmac (cdr (assoc :hmac headers)))&#xA;         (raw-data (tbnl:raw-post-data))&#xA;         (plist (cl-coinpayments::parse-data (tbnl:post-parameters*))))&#xA;    (when (and (string= (getf plist :merchant) *coinpayment-merchant-id*)&#xA;               (cl-coinpayments::verify-data hmac *coinpayment-ipn-secret*&#xA;                                             raw-data))&#xA;      (let ((status (cl-coinpayments:construct-status plist)))&#xA;        (handler-case &#xA;            (cl-coinpayments:dispatch-ipn-by-name process plist status)&#xA;          (cl-coinpayments:no-dispatcher-found (c)&#xA;            (log:warn &#34;Received an IPN that wasn&#39;t handled explicitly. Status: ~A~%IPN: ~A&#34;&#xA;                      (cl-coinpayments:status c)&#xA;                      (cl-coinpayments:ipn c)))))))&#xA;  &#34;done&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In the above example I also confirm that my merchants ID and the merchants ID sent are the same.&lt;/p&gt; &#xA;&lt;h2&gt;Working with the IPN&lt;/h2&gt; &#xA;&lt;p&gt;Now you have verified the legitimacy of your IPN you can construct a status object.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;CL-COINPAYMENTS&amp;gt; (construct-status *)&#xA;#&amp;lt;TWO {10196A08D3}&amp;gt;&#xA;(:AMOUNT &#34;10.00000000&#34; :AMOUNTI &#34;1000000000&#34; :CURRENCY &#34;LTCT&#34; :FEE &#34;0.00000000&#34;&#xA; :FEEI &#34;0&#34; :FIAT-AMOUNT &#34;1108.03029150&#34; :FIAT-AMOUNTI &#34;110803029150&#34; :FIAT-COIN&#xA; &#34;GBP&#34; :FROM &#34;8ac9528d191f8fb3f5b9daa25538c4ae&#34; :IPN-ID&#xA; &#34;f60f7391ec606d2631e6d53157906dbf&#34; :IPN-MODE &#34;hmac&#34; :IPN-TYPE &#34;transfer&#34;&#xA; :IPN-VERSION &#34;1.0&#34; :MERCHANT &#34;oof&#34; :STATUS &#34;2&#34; :STATUS-TEXT &#34;Complete&#34; :TXN-ID&#xA; &#34;CTFF3TMJI9OJAIJ8SSMJVKEBHJ&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This returns two values, with the most easily referenced being the new status object. The status objects rules are described here: &lt;a href=&#34;https://www.coinpayments.net/merchant-tools-ipn&#34;&gt;https://www.coinpayments.net/merchant-tools-ipn&lt;/a&gt; Under the heading &#39;Payment Statuses&#39;. If the status cannot be determined (which probably means the request is bogus) the condition &#39;unknown-status is signalled.&lt;/p&gt; &#xA;&lt;p&gt;If you look in classes.lisp you can see the relationship between the status objects, CLOS is used to represent the relationship described in those docs, so the class one-hundred is a subclass of ipn-payment-success and ipn-payment-success is a subclass of ipn-status etc, this is important for the next part.&lt;/p&gt; &#xA;&lt;h3&gt;Dispatching on statuses&lt;/h3&gt; &#xA;&lt;p&gt;This library has a means of creating functions that are executed based on the name of the dispatcher, the type of IPN sent from the server and the two main args the class of the STATUS object and the number of arguments. This is best demonstrated with an example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;&#xA;(def-ipn-dispatcher print-info ((foo :transfer) (ipn ipn-status) arg1)&#xA;  (print foo)&#xA;  (print ipn)&#xA;  (print &#34;less specific&#34;)&#xA;  (print arg1))&#xA;&#xA;(def-ipn-dispatcher print-info ((foo :transfer) (ipn ipn-status) arg1 arg2)&#xA;  (print foo)&#xA;  (print ipn)&#xA;  (print &#34;less specific&#34;)&#xA;  (print arg1)&#xA;  (print arg2))&#xA;&#xA;(def-ipn-dispatcher print-info ((foo :transfer) (ipn two) arg1)&#xA;  (print foo)&#xA;  (print ipn)&#xA;  (print &#34;more specific&#34;))&#xA;&#xA;(def-ipn-dispatcher print-info ((foo :transfer) (ipn two) arg1 arg2)&#xA;  (print arg1)&#xA;  (print arg2))&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Some example inputs using the function &lt;code&gt;(ipn-dispatch name ipn status args)&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;CL-COINPAYMENTS&amp;gt; (ipn-dispatch &#39;print-info &#39;(:IPN-TYPE &#34;transfer&#34;) (make-instance &#39;zero) &#34;abc&#34;)&#xA;&#xA;(:IPN-TYPE &#34;transfer&#34;) &#xA;#&amp;lt;ZERO {1025E64EB3}&amp;gt; &#xA;&#34;less specific&#34; &#xA;&#34;abc&#34; &#xA;&#34;abc&#34;&#xA;&#xA;&#xA;CL-COINPAYMENTS&amp;gt; (ipn-dispatch &#39;print-info &#39;(:IPN-TYPE &#34;transfer&#34;) (make-instance &#39;zero) &#34;abc&#34; &#34;deeef&#34;)&#xA;&#xA;(:IPN-TYPE &#34;transfer&#34;) &#xA;#&amp;lt;ZERO {1025E852C3}&amp;gt; &#xA;&#34;less specific&#34; &#xA;&#34;abc&#34; &#xA;&#34;deeef&#34; &#xA;&#34;deeef&#34;&#xA;&#xA;&#xA;CL-COINPAYMENTS&amp;gt; (ipn-dispatch &#39;print-info &#39;(:IPN-TYPE &#34;transfer&#34;) (make-instance &#39;two) &#34;abc&#34; &#34;deeef&#34;)&#xA;&#xA;&#34;abc&#34; &#xA;&#34;deeef&#34; &#xA;&#34;deeef&#34;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;I assume you get the jist. Anyway you can use this to perform actions based the same types of IPN&#39;s but when they are in varying states. There is the macro &lt;code&gt;(dispatch-ipn-by-name name ipn status args)&lt;/code&gt; which does the same&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;CL-COINPAYMENTS&amp;gt; (dispatch-ipn-by-name print-info &#39;(:IPN-TYPE &#34;transfer&#34;) (make-instance &#39;ipn-status) &#34;abc&#34; &#34;def&#34;)&#xA;&#xA;(:IPN-TYPE &#34;transfer&#34;) &#xA;#&amp;lt;IPN-STATUS {1025E8F173}&amp;gt; &#xA;&#34;less specific&#34; &#xA;&#34;abc&#34; &#xA;&#34;def&#34; &#xA;&#34;def&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If a dispatcher cannot be found for the args provided then the condition &#39;no-dispatcher-found is signalled, you should wrap all calls to dispatch-ipn and dispatch-ipn-by-name within a handler-case to make sure you have some fallback functionality in the case the server sends something unexpected, which it has done for me...&lt;/p&gt; &#xA;&lt;p&gt;Just a note the list &#39;(:IPN-TYPE &#34;transfer&#34;) is the most basic of IPN&#39;s represented as a plist that is required for this to function, this is why it is used in the examples, in a real world example the IPN would be what has been received and parsed by (parse-data ..)&lt;/p&gt; &#xA;&lt;h2&gt;Working with the API.&lt;/h2&gt; &#xA;&lt;p&gt;In cl-coinpayments API requests are all represented by objects, so if you wish to make an API call you instantiate an object of the request type, pass in the correct arguments as initargs and then call the method &lt;code&gt;(request &amp;lt;instance&amp;gt;)&lt;/code&gt; on it. Its important to note that the :merchant-secret-key initarg is the special key &lt;em&gt;YOU&lt;/em&gt; gave to coinpayments as your secret, not the API secret automatically generated and :key is your API public key.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;&#xA;CL-COINPAYMENTS&amp;gt; (make-instance &#39;get-basic-info :merchant-secret-key *coinpayment-private* :key *coinpayment-public*)&#xA;#&amp;lt;GET-BASIC-INFO {100230D643}&amp;gt;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This request has the following slots:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;[ ]  CMD                 = &#34;get_basic_info&#34;&#xA;[ ]  DEX-ALIST           = ((&#34;version&#34; . &#34;1&#34;) (&#34;key&#34; . &amp;lt;removed for privacy&amp;gt;) (&#34;cmd&#34; . &#34;get_basic_info&#34;) (&#34;format&#34; . &#34;json&#34;))&#xA;[ ]  FORMAT              = &#34;json&#34;&#xA;[ ]  HMAC                = &#34;c776c7821d4d7c785c5971652e6139ab5499ca3f7af195e8bd4dc5b56aeae91be8185e42a98d2af843bfa8a88062ac76362a5759f2cbdc612b9a6ece2a37a478&#34;&#xA;[ ]  KEY                 = &amp;lt;removed for privacy&amp;gt;&#xA;[ ]  MERCHANT-SECRET-KEY = &amp;lt;removed for privacy&amp;gt;&#xA;[ ]  NONCE               = #&amp;lt;unbound&amp;gt;&#xA;[ ]  POST-STRING         = &#34;version=1&amp;amp;key=&amp;lt;removed for privacy&amp;gt;&amp;amp;cmd=get_basic_info&amp;amp;format=json&#34;&#xA;[ ]  REQUIRED            = (MERCHANT-SECRET-KEY KEY)&#xA;[ ]  VERSION             = &#34;1&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When a response is received it is parsed into either a good-response or bad-response object:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;CL-COINPAYMENTS&amp;gt; (make-instance &#39;get-basic-info :merchant-secret-key *coinpayment-private* :key *coinpayment-public*)&#xA;#&amp;lt;GET-BASIC-INFO {101A377823}&amp;gt;&#xA;CL-COINPAYMENTS&amp;gt; (request *)&#xA;#&amp;lt;BAD-RESPONSE {101B67EC63}&amp;gt;&#xA;CL-COINPAYMENTS&amp;gt; (make-instance &#39;currency-prices :merchant-secret-key *coinpayment-private* :key *coinpayment-public*)&#xA;#&amp;lt;CURRENCY-PRICES {101B8E9323}&amp;gt;&#xA;CL-COINPAYMENTS&amp;gt; (request *)&#xA;#&amp;lt;GOOD-RESPONSE {101879EC63}&amp;gt;&#xA;CL-COINPAYMENTS&amp;gt; &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The slots look like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;[ ]  DEX-EXTRA   = (:CODE 200 :HEADERS #&amp;lt;HASH-TABLE :TEST EQUAL :COUNT 11 {1001CF6FB3}&amp;gt; :URL #&amp;lt;QURI.URI.HTTP:URI-HTTPS https://www.coinpayments.net/api.php&amp;gt; :STREAM #&amp;lt;CL+SSL::SSL-STREAM for #&amp;lt;FD-STREAM for &#34;socket 192.168.200.16:49534, peer: 205.220.231.4:443&#34; {1001B3AF73}&amp;gt;&amp;gt;)&#xA;[ ]  ERROR-SLOT  = &#34;This API Key does not have permission to use that command!&#34;&#xA;[ ]  REQUEST     = #&amp;lt;GET-BASIC-INFO {10018804D3}&amp;gt;&#xA;[ ]  RESULT-SLOT = NIL&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;All of the values returned by dex:post that are not directly used are stored in DEX-EXTRA, RESULT-SLOT contains any parsed results, ERROR-SLOT will either be &#39;ok&#39; or a descriptive string, and REQUEST is the object used to send the request.&lt;/p&gt; &#xA;&lt;p&gt;All requests inherit their slots from the toplevel class &lt;code&gt;&#39;request&lt;/code&gt;, currently the nonce is not used but if you wanted to use it you can, if you set the value to an integer represented as a string then it will also be added into the post params and the HMAC. The same goes for if you modify any of the slots that are used for storing values which are later used in the post request. You could change FORMAT to XML, however that would probably break &lt;code&gt;(request ..)&lt;/code&gt; so maybe dont do that.&lt;/p&gt; &#xA;&lt;p&gt;Each request within the docs &lt;a href=&#34;https://www.coinpayments.net/apidoc-intro&#34;&gt;https://www.coinpayments.net/apidoc-intro&lt;/a&gt; has its own class and they are all listed in api-forms.lisp. If you try to make a request object without providing &#39;required&#39; arguments then you will get an error of type `&#39;required-slots-not-bound&#39;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;CL-COINPAYMENTS&amp;gt; (make-instance &#39;create-transfer :merchant-secret-key *coinpayment-private* :key *coinpayment-public* :amount &#34;1&#34; :currency &#34;btc&#34;)&#xA;; Debugger entered on #&amp;lt;REQUIRED-SLOTS-NOT-BOUND {1002506873}&amp;gt;&#xA;[1] CL-COINPAYMENTS&amp;gt; &#xA;; Evaluation aborted on #&amp;lt;REQUIRED-SLOTS-NOT-BOUND {1002506873}&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;I think that all of the API calls will work except maybe &lt;code&gt;create-mass-withdrawal&lt;/code&gt; which I have not tested but it has some odd characteristics, so dont rely on it to work. If you do test it and find it doesn&#39;t work just open an issue and I&#39;ll fix it.&lt;/p&gt; &#xA;&lt;h1&gt;Paypal&lt;/h1&gt; &#xA;&lt;h2&gt;latter-day-paypal&lt;/h2&gt; &#xA;&lt;p&gt;Right now this is just a thin wrapper over the paypal api.&lt;/p&gt; &#xA;&lt;h3&gt;Dependencies&lt;/h3&gt; &#xA;&lt;p&gt;You will need to git clone cl-tls from &lt;a href=&#34;https://github.com/shrdlu68/cl-tls&#34;&gt;https://github.com/shrdlu68/cl-tls&lt;/a&gt; and put it into your local-projects, this is for verifying webhooks.&lt;/p&gt; &#xA;&lt;p&gt;To adjust how jojo parses, set the parameter &lt;code&gt;*parse-as*&lt;/code&gt; to either :hash-table or :plist, by default it is :plist to maintain backwards compatibility.&lt;/p&gt; &#xA;&lt;p&gt;To adjust the content encoder, set the parameter &lt;code&gt;*json-encoder*&lt;/code&gt; to a function, by default it is &lt;code&gt;#&#39;cl-json:encode-json-as-string&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Intro&lt;/h3&gt; &#xA;&lt;p&gt;To get started you need to set &lt;code&gt;*client*&lt;/code&gt; and &lt;code&gt;*secret*&lt;/code&gt; to your client and secret. Then call &lt;code&gt;get-token&lt;/code&gt;. They are currently set to my old client and secret.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;LDP&amp;gt; *client*&#xA;&#34;ATiiZbWBH3_qd_y3P3AZQiQlBIh9mVTDSTtr4ALOPqfTd5eBZooqeJlLT0o6-HLF95_Vj2GADaIhp5Ee&#34;&#xA;LDP&amp;gt; *secret*&#xA;&#34;EMBuo5-J3kWfSEJYY5mtQd8Hm9JezbxjkUUJ2D9JwKwwas1E05Ejp4A1wlpNuuFd3YyIoKZrSxjs9OUb&#34;&#xA;LDP&amp;gt; (get-token)&#xA;#&amp;lt;TWO-HUNDRED {100A51E5C3}&amp;gt;&#xA;#&amp;lt;TOKEN {100A456B93}&amp;gt;&#xA;LDP&amp;gt; &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This sets the value of &lt;code&gt;*token*&lt;/code&gt;. Now you have your token you can make requests.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;LDP&amp;gt; (make-instance &#39;products%list)&#xA;#&amp;lt;PRODUCTS%LIST {100BBA0F7B}&amp;gt;&#xA;LDP&amp;gt; (call-api *)&#xA;#&amp;lt;TWO-HUNDRED {100BD2E673}&amp;gt;&#xA;LDP&amp;gt; (body *)&#xA;(:|links|&#xA; ((:|method| &#34;GET&#34; :|rel| &#34;self&#34; :|href|&#xA;   &#34;https://api.sandbox.paypal.com/v1/catalogs/products?page_size=10&amp;amp;page=1&#34;))&#xA; :|products| NIL)&#xA;LDP&amp;gt; &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The result is wrapped in an object with its status code and text and a body slot that contains the result. The same is true if it returns an error. The json is decoded using jonathan.&lt;/p&gt; &#xA;&lt;h3&gt;Token issues&lt;/h3&gt; &#xA;&lt;p&gt;If you have failed to set token or it has expired&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;LDP&amp;gt; (setf *token* nil)&#xA;NIL&#xA;LDP&amp;gt; (make-instance &#39;products%list)&#xA;#&amp;lt;PRODUCTS%LIST {100BD37F5B}&amp;gt;&#xA;LDP&amp;gt; (call-api *)&#xA;; Debugger entered on #&amp;lt;UNBOUND-TOKEN {100BD3E133}&amp;gt;&#xA;&#xA;You have not evaluated &#39;get-token&#39;.&#xA;   [Condition of type UNBOUND-TOKEN]&#xA;&#xA;Restarts:&#xA; 0: [MISSING-TOKEN] Token could be broken, refresh and try again?&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;All requests made with &lt;code&gt;call-api&lt;/code&gt; have the restart &lt;code&gt;missing-token&lt;/code&gt; just in case your token expires.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;#&amp;lt;PRODUCTS%LIST {100BD37F5B}&amp;gt;&#xA;LDP&amp;gt; (handler-bind ((token-issue (lambda (c)&#xA;                                   (declare (ignore c))&#xA;                                   (invoke-restart &#39;missing-token))))&#xA;       (call-api *))&#xA;#&amp;lt;TWO-HUNDRED {1003A50663}&amp;gt;&#xA;LDP&amp;gt; (body *)&#xA;(:|links|&#xA; ((:|method| &#34;GET&#34; :|rel| &#34;self&#34; :|href|&#xA;   &#34;https://api.sandbox.paypal.com/v1/catalogs/products?page_size=10&amp;amp;page=1&#34;))&#xA; :|products| NIL)&#xA;LDP&amp;gt; &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Errors&lt;/h3&gt; &#xA;&lt;p&gt;All conditions are subclasses of &lt;code&gt;paypal-api-condition&lt;/code&gt; see conditions.lisp&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;LDP&amp;gt; (handler-case (call-api *)&#xA;       (condition (c)&#xA;         c))&#xA;#&amp;lt;FOUR-HUNDRED-FOUR Status: 404.&#xA;Status Text: Not Found.&#xA;Body: NIL {10040F0083}&amp;gt;&#xA;LDP&amp;gt; &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Adding headers&lt;/h3&gt; &#xA;&lt;p&gt;Some calls accept other headers like Paypal-Request-Id to add these headers to a request lexically bind the variable &lt;code&gt;*request-headers*&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;#&amp;lt;PRODUCTS%LIST {101130BC0B}&amp;gt;&#xA;LDP&amp;gt; (let ((*request-headers* &#39;((&#34;Paypal-Auth-Assertion&#34; . &#34;imauthassertion&#34;))))&#xA;       (declare (special *request-headers*))&#xA;       &amp;lt;request&amp;gt; &#xA;       &amp;lt;call-api&amp;gt;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Headers are sent using Dex so they have to be a properly formed alist like above. You can see the additional headers in the paypal dev docs.&lt;/p&gt; &#xA;&lt;h3&gt;Testing&lt;/h3&gt; &#xA;&lt;p&gt;By default the API URL used is the sandbox url, to go live set &lt;code&gt;*testing*&lt;/code&gt; to non nil.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;LDP&amp;gt; *testing*&#xA;T&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Encoding&lt;/h3&gt; &#xA;&lt;p&gt;All encoding is done with cl-json. So the easiest way to create JSON objects is to use a hash-table. There is a helper function called &lt;code&gt;%quick-hash&lt;/code&gt; to generate a hash-table from an alist&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;LDP&amp;gt; (cl-json:encode-json-to-string (%quick-hash &#39;((&#34;abc&#34; . &#34;def&#34;))))&#xA;&#34;{\&#34;abc\&#34;:\&#34;def\&#34;}&#34;&#xA;LDP&amp;gt; &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Patch requests take an array:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;LDP&amp;gt; (make-array 1 :initial-element (%quick-hash &#39;((&#34;abc&#34; . &#34;def&#34;))))&#xA;#(#&amp;lt;HASH-TABLE :TEST EQL :COUNT 1 {100BED8343}&amp;gt;)&#xA;LDP&amp;gt; (cl-json:encode-json-to-string *)&#xA;&#34;[{\&#34;abc\&#34;:\&#34;def\&#34;}]&#34;&#xA;LDP&amp;gt; &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Patch requests&lt;/h3&gt; &#xA;&lt;p&gt;A lot of the requests that update are patch requests which accept objects. When you are using make-instance you will see a slot called &#39;patch-request, put your request data in this.&lt;/p&gt; &#xA;&lt;h3&gt;Requests that have a json body&lt;/h3&gt; &#xA;&lt;p&gt;Most requests (put/post) have a body, to provide this data use the :content slot.&lt;/p&gt; &#xA;&lt;h3&gt;Query parameters&lt;/h3&gt; &#xA;&lt;p&gt;Query parameters are slots within the object, just set them and the ones that are bound will be encoded and added onto the end of the URL.&lt;/p&gt; &#xA;&lt;h3&gt;Path parameters&lt;/h3&gt; &#xA;&lt;p&gt;Path parameters are slots within the request object, just set the slots and they will be automatically encoded into the URL.&lt;/p&gt; &#xA;&lt;h2&gt;Webhook verification&lt;/h2&gt; &#xA;&lt;p&gt;To verify the signature of a paypal request there are two methods you can use. &lt;code&gt;(ldp:verify-webhook )&lt;/code&gt; this takes &lt;code&gt;algo cert-url transmission-signature transmission-id timestamp webhook-id raw-body&lt;/code&gt; algo is a keyword generated with &lt;code&gt;%algo-&amp;gt;key&lt;/code&gt; its simply the string converted to a keyword. Or you can use &lt;code&gt;(ldp:verify-paypal-webhook)&lt;/code&gt; which takes &lt;code&gt;webhook-id request raw-body&lt;/code&gt; this is a method that will dispatch on REQUEST, and currently only works with a hunchentoot request object like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(hunchentoot:define-easy-handler (paypal-payment-processor&#xA;                                  :uri &amp;lt;your webhook url&amp;gt;&#xA;                                  :default-request-type :POST)&#xA;    ()&#xA;  (let* ((raw-data (tbnl:raw-post-data :force-binary t)))&#xA;    (if (ldp:verify-paypal-webhook (if *testing*&#xA;                                       &#34;your testing webhook id&#34;&#xA;                                       &#34;Your live webhook id&#34;)&#xA;                                   tbnl:*request* raw-data)&#xA;        (let ((plist (jojo:parse (babel:octets-to-string raw-data))))&#xA;          (setf (tbnl:return-code*) 200)&#xA;          &amp;lt;your processing method&amp;gt; &#xA;          &#34;t&#34;)&#xA;        (progn (setf (tbnl:return-code*) 400)&#xA;               &#34;nil&#34;))))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you are using a server that is not Hunchentoot then you can just extract the header values and pass them to &lt;code&gt;(ldp:verify-webhook)&lt;/code&gt;, this is all the method &lt;code&gt;ldp:verify-paypal-webhook&lt;/code&gt; is doing under the hood.&lt;/p&gt; &#xA;&lt;h1&gt;Stripe&lt;/h1&gt; &#xA;&lt;p&gt;This is a an implementation of the Stripe API.&lt;/p&gt; &#xA;&lt;p&gt;Currently have wrapped the section Core Resources and under Products the products, prices and shipping then, under Checkout the sessions and finally under Webhooks the webhooks.&lt;/p&gt; &#xA;&lt;h2&gt;How to&lt;/h2&gt; &#xA;&lt;p&gt;To change the default parser from jojo&#39;s plist to a hash-table change &lt;code&gt;*parse-as*&lt;/code&gt; to a valid (jojo:parse &#xA; &lt;content&gt;&#xA;   :as &#xA;  &lt;key&gt;&#xA;   ), I suggest :hash-table&#xA;  &lt;/key&gt;&#xA; &lt;/content&gt;&lt;/p&gt; &#xA;&lt;p&gt;First you have to set &lt;code&gt;*api-key*&lt;/code&gt; to your api key from stripe, you can do this lexically ofcourse. Best run a few tests, so use your test keys first.&lt;/p&gt; &#xA;&lt;p&gt;Then you simply do the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;SATMW&amp;gt; (make-instance &#39;events%all)&#xA;#&amp;lt;EVENTS%ALL {100F16210B}&amp;gt;&#xA;SATMW&amp;gt; (call-api *)&#xA;(:|url| &#34;/v1/events&#34; :|has_more| NIL :|data| NIL :|object| &#34;list&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Jonathan is used for parsing. Any API error is caught and converted into a condition as per the Stripe documentation.&lt;/p&gt; &#xA;&lt;p&gt;If you have a call that requires an argument like an &lt;code&gt;:id&lt;/code&gt; in the path then there will be a slot by that name which you fill on creation.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;SATMW&amp;gt; (make-instance &#39;events%id :id &#34;abc&#34;)&#xA;#&amp;lt;EVENTS%ID {100F182A7B}&amp;gt;&#xA;SATMW&amp;gt; (call-api *)&#xA;&amp;lt;invalid-request-error because no known id&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you have a post request that requires values then these requests have a slot called &lt;code&gt;content&lt;/code&gt; that you fill with an ALIST.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;SATMW&amp;gt; (make-instance &#39;charges%create :content &#39;((&#34;amount&#34; . 100)(&#34;currency&#34; . &#34;gbp&#34;)(&#34;source&#34; . &#34;abc&#34;)))&#xA;#&amp;lt;CHARGES%CREATE {100F4CF67B}&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Dexador is used to send the requests so it must be a properly formed ALIST.&lt;/p&gt; &#xA;&lt;h2&gt;Alist construct&lt;/h2&gt; &#xA;&lt;p&gt;In &lt;code&gt;src/helpers.lisp&lt;/code&gt; I have built a very simple DSL which will parse into an alist, you can pass the result of evaluating this as the :content key to dex:post.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(defparameter *test* &#xA;  &#39;((&#34;fur&#34; . &#34;fluffy&#34;)&#xA;    (&#34;cat&#34; . &#34;dog&#34;)&#xA;    (:array &#34;woofers&#34;&#xA;     (&#34;dog&#34; &#34;wolf&#34;)&#xA;     ((&#34;smol&#34; . &#34;shih-tzu&#34;)&#xA;      (&#34;big&#34; . &#34;labrador&#34;)))&#xA;    (:array &#34;animals&#34;&#xA;     ((&#34;oof&#34; . &#34;doof&#34;)&#xA;      (&#34;kaboof&#34; . &#34;foo&#34;))&#xA;     (&#34;dog&#34;&#xA;      &#34;cat&#34;&#xA;      &#34;bird&#34;))&#xA;    (:array &#34;images&#34;&#xA;     ((&#34;fur&#34; . &#34;fluffy&#34;)&#xA;      (&#34;colour&#34; . &#34;brown&#34;)))&#xA;    (&#34;fur&#34; . &#34;fluffy&#34;)&#xA;    (&#34;colour&#34; . &#34;brown&#34;)))&#xA;&#xA;SATMW&amp;gt; (ec *test*)&#xA;((&#34;fur&#34; . &#34;fluffy&#34;) (&#34;cat&#34; . &#34;dog&#34;) (&#34;woofers[0]&#34; . &#34;dog&#34;)&#xA; (&#34;woofers[1]&#34; . &#34;wolf&#34;) (&#34;woofers[2][smol]&#34; . &#34;shih-tzu&#34;)&#xA; (&#34;woofers[2][big]&#34; . &#34;labrador&#34;) (&#34;animals[0][oof]&#34; . &#34;doof&#34;)&#xA; (&#34;animals[0][kaboof]&#34; . &#34;foo&#34;) (&#34;animals[1]&#34; . &#34;dog&#34;) (&#34;animals[2]&#34; . &#34;cat&#34;)&#xA; (&#34;animals[3]&#34; . &#34;bird&#34;) (&#34;images[0][fur]&#34; . &#34;fluffy&#34;)&#xA; (&#34;images[0][colour]&#34; . &#34;brown&#34;) (&#34;fur&#34; . &#34;fluffy&#34;) (&#34;colour&#34; . &#34;brown&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It accepts an arbitrary number of lists and appends them together. The DSL means you can create an alist that will correctly format as a form-url encoded string, this is annoying but its how Stripe handles requests...&lt;/p&gt; &#xA;&lt;p&gt;Supports nested arrays although I&#39;ve never tested it.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(defparameter *test2* &#xA;  &#39;((&#34;fur&#34; . &#34;fluffy&#34;)&#xA;    (&#34;cat&#34; . &#34;dog&#34;)&#xA;    (:array &#34;animals&#34;&#xA;     ((&#34;oof&#34; . &#34;doof&#34;)&#xA;      (&#34;kaboof&#34; . &#34;foo&#34;))&#xA;     (&#34;dog&#34;&#xA;      &#34;cat&#34;&#xA;      &#34;bird&#34;))&#xA;    (:array &#34;images&#34;&#xA;     ((&#34;fur&#34; . &#34;fluffy&#34;)&#xA;      (&#34;colour&#34; . &#34;brown&#34;))&#xA;     (:array &#34;nested-images&#34;&#xA;      ((&#34;fluff&#34; . &#34;fluffy&#34;))&#xA;      (&#34;pos&#34; &#34;foo&#34; &#34;bar&#34;)))&#xA;    (:array &#34;cats&#34;&#xA;     (&#34;brown&#34; &#34;white&#34; &#34;black&#34;))&#xA;    (&#34;fur&#34; . &#34;fluffy&#34;)&#xA;    (&#34;colour&#34; . &#34;brown&#34;)))&#xA;&#xA;SATMW&amp;gt; (ec *test2*)&#xA;((&#34;fur&#34; . &#34;fluffy&#34;) (&#34;cat&#34; . &#34;dog&#34;) (&#34;animals[0][oof]&#34; . &#34;doof&#34;)&#xA; (&#34;animals[0][kaboof]&#34; . &#34;foo&#34;) (&#34;animals[1]&#34; . &#34;dog&#34;) (&#34;animals[2]&#34; . &#34;cat&#34;)&#xA; (&#34;animals[3]&#34; . &#34;bird&#34;) (&#34;images[0][fur]&#34; . &#34;fluffy&#34;)&#xA; (&#34;images[0][colour]&#34; . &#34;brown&#34;) (&#34;images[1][0][fluff]&#34; . &#34;fluffy&#34;)&#xA; (&#34;images[1][1]&#34; . &#34;pos&#34;) (&#34;images[1][2]&#34; . &#34;foo&#34;) (&#34;images[1][3]&#34; . &#34;bar&#34;)&#xA; (&#34;cats[0]&#34; . &#34;brown&#34;) (&#34;cats[1]&#34; . &#34;white&#34;) (&#34;cats[2]&#34; . &#34;black&#34;)&#xA; (&#34;fur&#34; . &#34;fluffy&#34;) (&#34;colour&#34; . &#34;brown&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;ec&lt;/code&gt; now also accepts hash-tables and will attempt to convert them into the correctly encoded format for Stripe. You can even combine lists written in the basic DSL I wrote with hash-tables to produce one large alist to pass to Stripe.&lt;/p&gt; &#xA;&lt;h2&gt;Webhooks&lt;/h2&gt; &#xA;&lt;p&gt;To verify the webhooks from Stripe you need to follow the instructions here: &lt;a href=&#34;https://stripe.com/docs/webhooks/signatures&#34;&gt;https://stripe.com/docs/webhooks/signatures&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Extract the raw-body, the signature (v1), and the timestamp then pass them as arguments to &lt;code&gt;verify-signature&lt;/code&gt;. This returns a boolean (t or nil) to tell you if it validated and the time difference between the timestamp received and &lt;code&gt;local-time:now&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;There is currently one build in method to validate instances &lt;code&gt;lack.request:request&lt;/code&gt; these are the wrappers created by Ningle (which uses clack and lack), so you can &lt;code&gt;verify-webhook&lt;/code&gt; with &lt;code&gt;ningle:*request*&lt;/code&gt; and your signing secret. See &lt;code&gt;./api/webhooks.lisp&lt;/code&gt; to see how to implement verification for other servers.&lt;/p&gt; &#xA;&lt;p&gt;An example of &lt;code&gt;verify-webhook&lt;/code&gt; with Ningle:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(setf (ningle/app:route *app* *stripe-webhook* :method :post)&#xA;      (lambda (params)&#xA;        (declare (ignore params))&#xA;        (multiple-value-bind (validp time-dif raw)&#xA;            (satmw:verify-webhook *stripe-webhook-signing-secret* ningle:*request*)&#xA;          (if (validate-webhook :stripe validp time-dif)&#xA;              &#34;fail&#34;&#xA;              (let* ((parsed (jojo:parse (babel:octets-to-string raw)&#xA;                                         :as :hash-table)))&#xA;                (process-webhook :stripe parsed))))))&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>