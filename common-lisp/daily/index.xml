<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Common Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-09-02T01:25:50Z</updated>
  <subtitle>Daily Trending of Common Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>lelanthran/l2h</title>
    <updated>2023-09-02T01:25:50Z</updated>
    <id>tag:github.com,2023-09-02:/lelanthran/l2h</id>
    <link href="https://github.com/lelanthran/l2h" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Convert s-expressions input to HTML output.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;l2h&lt;/h1&gt; &#xA;&lt;h2&gt;Convert Lisp(-ish) S-expressions to HTML.&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Write S-expressions,&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;l2h&lt;/code&gt;,&lt;/li&gt; &#xA; &lt;li&gt;Use generated HTML file(s).&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Here&#39;s a small example of &lt;code&gt;s-exp&lt;/code&gt; input and &lt;code&gt;HTML&lt;/code&gt; output:&lt;/p&gt; &#xA;&lt;p&gt;&lt;ins&gt;Input&lt;/ins&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(html&#xA;  (body&#xA;    (h1 :disabled Hello world!)&#xA;    (div :class=&#34;alert&#34;&#xA;      So long, and (b thanks) for all the (em fish))))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;ins&gt;Output&lt;/ins&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;html&amp;gt;&#xA;  &amp;lt;body&amp;gt;&#xA;    &amp;lt;h1  disabled&amp;gt;Hello world!&amp;lt;/h1&amp;gt;&#xA;    &amp;lt;div  class=&#34;alert&#34;&amp;gt;So long, and &amp;lt;b&amp;gt;thanks&amp;lt;/b&amp;gt; for all the &amp;lt;em&amp;gt;fish&amp;lt;/em&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;  &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] &lt;em&gt;The output is actually tab-indented; in the interests of brevity I have substituted 2x spaces for each tab.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Language Rules&lt;/h2&gt; &#xA;&lt;p&gt;There are only two rules to remember, both of which are very simple[^1]:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;The first symbol of each s-expression is the HTML tag.&lt;/li&gt; &#xA; &lt;li&gt;Attributes for an HTML tag must be preceded with a &lt;code&gt;:&lt;/code&gt; character.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Here&#39;s how it looks in practice:&lt;/p&gt; &#xA;&lt;h4&gt;The first symbol of each s-expression is the HTML tag.&lt;/h4&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;ins&gt;Input&lt;/ins&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code&gt;  (MyTag Some random content goes here)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;ins&gt;Output&lt;/ins&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;  &amp;lt;MyTag&amp;gt;Some random content goes here&amp;lt;/MyTag&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;Attributes are prefixed with a &lt;code&gt;:&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;ins&gt;Input&lt;/ins&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code&gt;  (MyTag :class=&#34;alert&#34; :readonly Some random text)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;ins&gt;Output&lt;/ins&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;  &amp;lt;MyTag  class=&#34;alert&#34; readonly&amp;gt;Some random text&amp;lt;/MyTag&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;That&#39;s pretty much all you need to know[^2] to generate HTML.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;h3&gt;Newlines&lt;/h3&gt; &#xA;&lt;p&gt;Newlines in the source are respected as far as possible so that the generated HTML matches the visual structure of the source s-expression.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;ins&gt;Input&lt;/ins&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code&gt;(html&#xA;  (body (h1 :disabled Hello world!)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;ins&gt;Output&lt;/ins&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;html&amp;gt;&#xA;  &amp;lt;body&amp;gt;&amp;lt;h1  disabled&amp;gt;Hello world!&amp;lt;/h1&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Spaces&lt;/h3&gt; &#xA;&lt;p&gt;Spaces have significance to ensure that results like &lt;code&gt;He&amp;lt;b&amp;gt;ll&amp;lt;/b&amp;gt;o&lt;/code&gt; and &lt;code&gt;Good &amp;lt;b&amp;gt;Morning&amp;lt;/b&amp;gt; world&lt;/code&gt; come out as expected. In particular:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Spaces are significant prior to a starting tag.&lt;/li&gt; &#xA; &lt;li&gt;Spaces are significant prior to an ending tag.&lt;/li&gt; &#xA; &lt;li&gt;Spaces are significant after an ending tag.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;ins&gt;Input&lt;/ins&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code&gt;He(b ll)o&#xA;Good (b Morning) World&#xA;Good (b Morning )World&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;ins&gt;Output&lt;/ins&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;He&amp;lt;b&amp;gt;ll&amp;lt;/b&amp;gt;o&#xA;Good &amp;lt;b&amp;gt;Morning&amp;lt;/b&amp;gt; World&#xA;Good &amp;lt;b&amp;gt;Morning &amp;lt;/b&amp;gt;World&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Speed&lt;/h3&gt; &#xA;&lt;p&gt;As this is meant to be part of my workflow, speed is one of the more important criteria, especially complete duration (which includes startup speed). I use inotify tools to watch a directory for changes and then apply &lt;code&gt;l2h -r&lt;/code&gt; which processes all named directories recursively. In practice, the delay is imperceptible to me.&lt;/p&gt; &#xA;&lt;p&gt;For most projects, I will be surprised if you notice &lt;code&gt;l2h&lt;/code&gt; added to your workflow just by looking at build times.&lt;/p&gt; &#xA;&lt;p&gt;For large amounts of input content, it can be noticeable. I imagine that when my filecounts grow that large I&#39;d make some attempt at optimisation.&lt;/p&gt; &#xA;&lt;p&gt;On my VirtualBox instance (4 cores, 6GB RAM), the &lt;a href=&#34;https://raw.githubusercontent.com/lelanthran/l2h/master/speed-test.sh&#34;&gt;speed test script&lt;/a&gt; produced the following data at different input data sizes (when processing recursively).&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Files&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Dirs&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Size&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Create (secs)&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Convert (secs)&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;100&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;111&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;14M&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;0.29&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;0.99&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;400&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;421&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;55M&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;1.16&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;3.88&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;900&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;931&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;123M&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;2.60&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;9.37&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;1600&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;1641&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;219M&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;4.72&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;16.08&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;2500&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;2551&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;341M&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;7.29&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;25.42&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;3600&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;3661&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;491M&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;10.59&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;36.87&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;4900&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;4971&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;668M&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;14.17&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;50.28&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;6400&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;6481&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;873M&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;19.73&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;64.00&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;8100&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;8191&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;1.1G&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;26.55&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;82.88&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;BUGS&lt;/h2&gt; &#xA;&lt;p&gt;There&#39;s one that I know off, which I will get around to fixing at some point:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;The &lt;code&gt;:&lt;/code&gt; character must be escaped whenever it occurs in content, otherwise it is parsed as an attribute of the HTML tag.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;For example, here is how the bug manifests, and how escaping fixes it.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;ins&gt;Input&lt;/ins&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code&gt;(tag This is some content :with a `:` character)&#xA;(tag This is some content \:with a `:` character)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;ins&gt;Output&lt;/ins&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;tag  with&amp;gt;this is come content a `:` character&amp;lt;/tag&amp;gt;&#xA;&amp;lt;tag&amp;gt;this is come content :with a `:` character&amp;lt;/tag&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Either grab the pre-compiled package (for Linux/x64 only, for now) or download the single &lt;code&gt;./l2h_main.c&lt;/code&gt; file and compile it (tested with &lt;code&gt;gcc&lt;/code&gt;, &lt;code&gt;clang&lt;/code&gt; and &lt;code&gt;tcc&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;h2&gt;Help&lt;/h2&gt; &#xA;&lt;p&gt;Feel free to log issues. Starting the program with &lt;code&gt;l2h --help&lt;/code&gt; prints out all the options available, and all the flags supported.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Lisp2Html: Convert lisp-ish s-expressions to HTML tag trees&#xA;Usage:&#xA;  l2h [options] PATH1 PATH2 ... PATHn&#xA;&#xA;  Each path must be a filename of the form &#39;*.html.lisp&#39; or a directory&#xA;name. When PATH is a filename, the file is converted and the results&#xA;are written to &#39;*.html&#39; (i.e. the &#39;.lisp&#39; is removed from the output&#xA;filename). When PATH is a directory it is scanned for all files matching&#xA;the pattern &#39;*.html.lisp&#39; and each file is converted, with the results&#xA;stored in &#39;*.html&#39;&#xA;&#xA;  Unless the option &#39;-r&#39; or &#39;--recurse&#39; is specified, directories are&#xA;not recursively processed. If the option &#39;-s&#39; or &#39;--stdio&#39; is specified&#xA;then input is read from stdin and written to stdout. All pathnames are&#xA;ignored when &#39;-s&#39; or &#39;--stdio&#39; is specified.&#xA;&#xA;  The following options are recognised. Unrecognised options produce an&#xA;error message without any processing of files or data.&#xA;&#xA;-r | --recurse     Recursively process any directories specified&#xA;-s | --stdio       Read input from stdin and write the output to stdout&#xA;-v | --verbose     Produce extra informational messages&#xA;-V | --version     Print the program version, then continue as normal&#xA;-h | --help        Display this message and exit&#xA;&#xA;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Footnotes&lt;/h2&gt; &#xA;&lt;p&gt;[^1]: I was aiming for intuitive. I may have misjudged.&lt;/p&gt; &#xA;&lt;p&gt;[^2]: Caveats apply, see the &lt;a href=&#34;https://raw.githubusercontent.com/lelanthran/l2h/master/#BUGS&#34;&gt;BUGS section&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>