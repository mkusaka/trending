<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Common Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-03-29T01:33:36Z</updated>
  <subtitle>Daily Trending of Common Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>scymtym/xml.location</title>
    <updated>2023-03-29T01:33:36Z</updated>
    <id>tag:github.com,2023-03-29:/scymtym/xml.location</id>
    <link href="https://github.com/scymtym/xml.location" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Bind XPath-based locations to variables with extensible type-based to/from XML conversion&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#+TITLE: xml.location README #+AUTHOR: Jan Moringen #+EMAIL: &lt;a href=&#34;mailto:jmoringe@techfak.uni-bielefeld.de&#34;&gt;jmoringe@techfak.uni-bielefeld.de&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Introduction The =xml.location= system provides manipulation of and a conversion mechanisms for XML data:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Typed, XPath-based location bindings&lt;/li&gt; &#xA;   &lt;li&gt;Extensible Lisp -&amp;gt; XML and XML -&amp;gt; Lisp conversion&lt;/li&gt; &#xA;   &lt;li&gt;Creation of XPath-specified XML structures&lt;/li&gt; &#xA;   &lt;li&gt;Automatic compile-time parsing of XML documents and XPaths&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;p&gt;This means, when working with an XML document #+BEGIN_SRC xml &#xA;   &lt;root foo=&#34;1 2 3&#34;&gt;&#xA;    old text&#xA;   &lt;/root&gt; #+END_SRC we can write #+BEGIN_SRC lisp (let ((document (cxml:parse &#34;&amp;lt;root foo=&#34;1 2 3&#34;&amp;gt;old text&#34; (stp:make-builder)))) (with-locations (((:name name) &#34;node()&#34;) (text &#34;node()/text()&#34;) ((:@ (foo &#34;foo&#34;) :type &#39;(list number)) &#34;node()&#34;)) document (setf text &#34;new text&#34; foo &#39;(4 5)) (values name text foo (stp:serialize document (cxml:make-string-sink))))) =&amp;gt; (values &#34;root&#34; &#34;new text&#34; (4 5) &#34;&#xA;   &lt;!--?xml version=\&#34;1.0\&#34; encoding=\&#34;UTF-8\&#34;?--&gt; &amp;lt;root foo=&#34;4 5&#34;&amp;gt;new text&#34;) #+END_SRC&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Tutorial The simplest case of using =xml.location= looks like this: #+BEGIN_SRC lisp -n (let ((loc (xml.location:loc &#34;&#xA;   &lt;foo a=&#34;1&#34; b=&#34;c d&#34;&gt;&#xA;    bar baz&#xA;   &lt;/foo&gt;&#34; &#34;node()&#34;))) (values (xml.location:name loc) (xml.location:@ loc &#34;a&#34; :type &#39;integer) (xml.location:@ loc &#34;b&#34; :type &#39;(list symbol)))) =&amp;gt; (values &#34;foo&#34; 1 (C D)) #+END_SRC The first line uses the =xml.location:loc= function to construct a =xml.location:location= object for the document &lt;del&gt;&#xA;    &lt;foo a=&#34;1&#34; b=&#34;c&#xA;d&#34;&gt;&#xA;     bar baz&#xA;    &lt;/foo&gt;&lt;/del&gt; and the XPath =node()=. In lines 3 -5, the following things are extracted and returned as Lisp objects:&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;the name of the root node (using the =xml.location:name= accessor)&lt;/li&gt; &#xA;   &lt;li&gt;the value of the attribute &#34;a&#34;, interpreted as =integer= (using the =xml.location:@= attribute accessor)&lt;/li&gt; &#xA;   &lt;li&gt;the value of the attribute &#34;b&#34;, interpreted as =list= of =symbol= s&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;p&gt;The accessors =xml.location:name=, =xml.location:@= and =xml.location:val= are =setf= able places: #+BEGIN_SRC lisp (let ((loc (xml.location:loc &#34;&#xA;   &lt;foo old-attr=&#34;1&#34; /&gt;&#34; &#34;node()[@pred-attr=&#39;baz&#39;]&#34; :if-no-match :create))) (setf (xml.location:@ loc &#34;old-attr&#34; :type &#39;number) 2 (xml.location:@ loc &#34;new-attr&#34;) &#34;foo&#34;) loc) =&amp;gt; #&amp;lt;(LOCATION 3 MIXINS) node()[@pred-attr=&#39;baz&#39;] in &#xA;   &lt;foo new-attr=&#34;foo&#34; pred-attr=&#34;baz&#34; old-attr=&#34;2&#34; /&gt; {FAC7D81}&amp;gt; #+END_SRC Note how =:if-no-match :create= causes specified locations to be created if they do not exist already --- including things specified in form of predicates in some cases.&lt;/p&gt; &lt;p&gt;In both previous examples, a single =xml.location:location= object was used multiple times. Such cases can be simplified using the =xml.location:with-locations-r/o= and =xml.location:with-locations= macros. The former binds variables to values extracted from XML locations while the latter uses symbol macros to make XML locations =setf= able places: #+BEGIN_SRC lisp (xml.location:with-locations (((:name name) &#34;node()&#34;) (text &#34;bla/text()&#34;) ((:@ (my-foo &#34;foo&#34;) :type &#39;(list number)) &#34;node()&#34;) ((:@ bar) &#34;node()&#34;)) &#34;&#xA;   &lt;bla foo=&#34;1 2 4&#34; bar=&#34;baz&#34;&gt;&#xA;    foo&#xA;   &lt;/bla&gt;&#34; ;; Set values of generalized variables (setf name &#34;frooble&#34; my-foo &#39;(5 6) bar 42 text &#34;bubba&#34;)&lt;/p&gt; &lt;p&gt;;; Extract values from generalized variables (values name my-foo bar text)) =&amp;gt; (values &#34;frooble&#34; (5 6) &#34;42&#34; &#34;bubba&#34;) #+END_SRC&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;TODO Namespaces&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Conversion Infrastructure The core of the conversion infrastructure consists of two operations:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Lisp -&amp;gt; XML conversion&lt;/li&gt; &#xA;   &lt;li&gt;XML -&amp;gt; Lisp conversion Actually, there are several details which lead to a greater number of conversions, but all of these are special cases of the aforementioned two conversions. ** TODO Lisp to XML conversion ** TODO XML to Lisp conversion ** Adding Conversions There are several possible ways to define to/from XML conversion methods for a type:&lt;/li&gt; &#xA;  &lt;/ul&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;Types that have obvious string representations&lt;/li&gt; &#xA;   &lt;li&gt;Types that require a structured representation&lt;/li&gt; &#xA;   &lt;li&gt;Types that require a structured representation and have internal structure that can be represented in several different ways Types of the first kind often work without the definition of additional methods since the default behavior for to/from string conversion uses =read= and =print= which is often sufficient.&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;p&gt;For the second kind of type, at least the following two methods have to be defined: #+BEGIN_SRC lisp (defmethod -&amp;gt;xml ((value MY-TYPE) (dest stp:element) (type t)) &#34;Store VALUE in XML element DEST.&#34; ;; actual conversion code )&lt;/p&gt; &lt;p&gt;(defmethod xml-&amp;gt; ((value stp:element) (type &#39;MY-TYPE)) &#34;Retrieve an instance of MY-TYPE from the XML element VALUE.&#34; ;; actual conversion code ) #+END_SRC&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;TODO Reference&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>