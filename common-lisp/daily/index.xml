<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Common Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-05-16T01:28:04Z</updated>
  <subtitle>Daily Trending of Common Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ciel-lang/CIEL</title>
    <updated>2024-05-16T01:28:04Z</updated>
    <id>tag:github.com,2024-05-16:/ciel-lang/CIEL</id>
    <link href="https://github.com/ciel-lang/CIEL" rel="alternate"></link>
    <summary type="html">&lt;p&gt;CIEL Is an Extended Lisp. Scripting with batteries included.&lt;/p&gt;&lt;hr&gt;&lt;p&gt; &lt;/p&gt;&#xA;&lt;h2 align=&#34;center&#34;&gt; CIEL &lt;/h2&gt; &#xA;&lt;h3 align=&#34;center&#34;&gt; Common Lisp, batteries included. &lt;/h3&gt; &#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://ciel-lang.github.io/CIEL/#/&#34;&gt;&lt;b&gt; Home page &lt;/b&gt;&lt;/a&gt; | &lt;a href=&#34;https://github.com/ciel-lang/CIEL/issues&#34;&gt;&lt;b&gt;Issues&lt;/b&gt;&lt;/a&gt; | &lt;a href=&#34;https://github.com/ciel-lang/CIEL/discussions&#34;&gt;&lt;b&gt; Discussions&lt;/b&gt;&lt;/a&gt; | &lt;a href=&#34;https://github.com/sponsors/vindarel&#34;&gt; Support us! &lt;/a&gt; | &lt;a href=&#34;https://ko-fi.com/vindarel&#34;&gt; Buy me a coffee! &lt;/a&gt; &lt;/p&gt; &#xA;&lt;h1&gt;CIEL Is an Extended Lisp&lt;/h1&gt; &#xA;&lt;p&gt;STATUS: &lt;del&gt;highly&lt;/del&gt; WIP, the API WILL change, but it is usable.&lt;/p&gt; &#xA;&lt;p&gt;I am dogfooding it in public and private projects.&lt;/p&gt; &#xA;&lt;h2&gt;What is this ?&lt;/h2&gt; &#xA;&lt;p&gt;CIEL is a ready-to-use collection of libraries.&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s Common Lisp, batteries included.&lt;/p&gt; &#xA;&lt;p&gt;It comes in 3 forms:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;a binary, to run CIEL &lt;strong&gt;scripts&lt;/strong&gt;: fast start-up times, standalone image, built-in utilities.&lt;/li&gt; &#xA; &lt;li&gt;a simple full-featured &lt;strong&gt;REPL&lt;/strong&gt; for the terminal.&lt;/li&gt; &#xA; &lt;li&gt;a &lt;strong&gt;Lisp library&lt;/strong&gt; and a &lt;strong&gt;core image&lt;/strong&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Questions, doubts? See the &lt;a href=&#34;https://raw.githubusercontent.com/ciel-lang/CIEL/master/docs/FAQ.md&#34;&gt;FAQ&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;NEW: we now have a Docker file.&lt;/p&gt; &#xA;&lt;h2&gt;Rationale&lt;/h2&gt; &#xA;&lt;p&gt;One of our goals is to make Common Lisp useful out of the box for mundane tasks -by today standards. As such, we ship libraries to handle &lt;strong&gt;JSON&lt;/strong&gt; or &lt;strong&gt;CSV&lt;/strong&gt;, as well as others to ease string manipulation, to do pattern matching, to bring regular expressions, for threads and jobs scheduling, for &lt;strong&gt;HTTP&lt;/strong&gt; and URI handling, to create simple GUIs with nodgui (Tk-based, nice theme), and so on. You can of course do all this without CIEL, but then you have to install the library manager first and load these libraries into your Lisp image every time you start it. Now, you have them at your fingertips whenever you start CIEL.&lt;/p&gt; &#xA;&lt;p&gt;We also aim to soften the irritating parts of standard Common Lisp. A famous one, puzzling for beginners and non-optimal for seasoned lispers, is the creation of hash-tables. We include the &lt;code&gt;dict&lt;/code&gt; function from the Serapeum library (which we enhanced further with a pull request):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;CIEL-USER&amp;gt; (dict :a 1 :b 2 :c 3)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;which prints:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-txt&#34;&gt;(dict&#xA; :A 1&#xA; :B 2&#xA; :C 3&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In standard Common Lisp, the equivalent is more convoluted:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-commonlisp&#34;&gt;  (let ((ht (make-hash-table :test &#39;equal)))&#xA;    (setf (gethash :a ht) 1)&#xA;    (setf (gethash :b ht) 2)&#xA;    (setf (gethash :c ht) 3)&#xA;    ht)&#xA;;; #&amp;lt;HASH-TABLE :TEST EQUAL :COUNT 3 {1006CE5613}&amp;gt;&#xA;;; (and we don&#39;t get a readable representation, so our example is not even equivalent)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Moreover, we bring:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;a &lt;strong&gt;full featured REPL on the terminal&lt;/strong&gt; and&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;scripting capabilities&lt;/strong&gt;, see more below.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See &lt;em&gt;the documentation&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Install&lt;/h1&gt; &#xA;&lt;p&gt;You will probably need the following system dependencies (names for a Debian Bullseye system):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;libmagic-dev libc6-dev gcc  # from magicffi&#xA;zlib1g-dev # from deploy for SBCL &amp;lt; 2.2.6&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If your SBCL version is &amp;gt;= 2.2.6 you might want to use the more performant &lt;code&gt;libzstd-dev&lt;/code&gt; library instead of &lt;code&gt;zlib1g-dev&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;libzstd-dev # from deploy for SBCL &amp;gt;= 2.2.6&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On Linux:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;inotify-tools&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On MacOS:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;fsevent&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;With Quicklisp&lt;/h2&gt; &#xA;&lt;p&gt;You need a Lisp implementation and Quicklisp installed.&lt;/p&gt; &#xA;&lt;p&gt;You need the system dependencies above.&lt;/p&gt; &#xA;&lt;p&gt;You need a CL implementation with a recent enough version of ASDF to support package-local nicknames. As of March, 2023, this is not the case with SBCL 2.2.9. Here&#39;s a one-liner to update ASDF:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ( cd ~/common-lisp/ &amp;amp;&amp;amp; wget https://asdf.common-lisp.dev/archives/asdf-3.3.5.tar.gz  &amp;amp;&amp;amp; tar -xvf asdf-3.3.5.tar.gz &amp;amp;&amp;amp; mv asdf-3.3.5 asdf )&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;CIEL is not on Quicklisp yet, but it is on &lt;a href=&#34;https://ultralisp.org&#34;&gt;Ultralisp&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;So, either clone this repository:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/ciel-lang/CIEL ~/quicklisp/local-projects/CIEL&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And install dependencies missing or outdated from Quicklisp:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ( cd ~/quicklisp/local-projects/CIEL &amp;amp;&amp;amp; make ql-deps )&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or install the Ultralisp distribution and pull the library from there:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(ql-dist:install-dist &#34;http://dist.ultralisp.org/&#34; :prompt nil)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, load the .asd file (with &lt;code&gt;asdf:load-asd&lt;/code&gt; or &lt;code&gt;C-c C-k&lt;/code&gt; in Slime), quickload &#34;ciel&#34;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(ql:quickload &#34;ciel&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and enter the &lt;code&gt;ciel-user&lt;/code&gt; package:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(in-package :ciel-user)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To build CIEL&#39;s binary and core image, use&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ make build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This creates the &lt;code&gt;bin/&lt;/code&gt; directory with the &lt;code&gt;ciel&lt;/code&gt; binary.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ make image&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This creates the &lt;code&gt;ciel-core&lt;/code&gt; Lisp image.&lt;/p&gt; &#xA;&lt;h2&gt;With a core image&lt;/h2&gt; &#xA;&lt;p&gt;You need a Lisp implementation, but you don&#39;t need Quicklisp.&lt;/p&gt; &#xA;&lt;p&gt;Build a &lt;em&gt;core image&lt;/em&gt; for your lisp with all CIEL&#39;s dependencies:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sbcl --load build-image.lisp&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and use it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sbcl --core ciel-core --eval &#39;(in-package :ciel-user)&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then you can configure Slime to have the choice of the Lisp image to start. See below in &lt;em&gt;*Use CIEL at startup&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;We &lt;del&gt;will distribute ready-to-use core images&lt;/del&gt; can not distribute core images, you must build it yourself.&lt;/p&gt; &#xA;&lt;h2&gt;With a binary. Use CIEL&#39;s custom REPL.&lt;/h2&gt; &#xA;&lt;p&gt;You don&#39;t need anything, just download the CIEL executable and run it. You need to build the core image yourself though.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;we provide an experimental binary for some systems: go to &lt;a href=&#34;https://gitlab.com/vindarel/ciel/-/pipelines&#34;&gt;https://gitlab.com/vindarel/ciel/-/pipelines&lt;/a&gt;, download the latest artifacts, unzip the &lt;code&gt;ciel-v0-{platform}.zip&lt;/code&gt; archive and run &lt;code&gt;ciel-v0-{platform}/ciel&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;CIEL is currently built for the following platforms:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Platform&lt;/th&gt; &#xA;   &lt;th&gt;System Version (release date)&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;debian&lt;/td&gt; &#xA;   &lt;td&gt;Debian Buster (2019)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;void&lt;/td&gt; &#xA;   &lt;td&gt;Void Linux glibc (2023-05)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;To build it, clone this repository and run &lt;code&gt;make build&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Start it with &lt;code&gt;./ciel&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;With Docker&lt;/h2&gt; &#xA;&lt;p&gt;We have a Dockerfile.&lt;/p&gt; &#xA;&lt;p&gt;Build your CIEL image:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker build -t ciel .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The executable is built in &lt;code&gt;/usr/local/bin/ciel&lt;/code&gt; of the Docker image.&lt;/p&gt; &#xA;&lt;p&gt;Get a CIEL REPL:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run --rm -it ciel /usr/local/bin/ciel&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run a script on your filesystem:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run --rm -it ciel /usr/local/bin/ciel path/to/your/lisp/script.lisp&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run a built-in script:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run --rm -it ciel /usr/local/bin/ciel -s simpleHTTPserver&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;So, save you some typing with a shell alias:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;alias ciel=&#34;sudo docker run --rm -it ciel /usr/local/bin/ciel&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Usage&lt;/h1&gt; &#xA;&lt;h2&gt;Scripting&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] this is brand new! Expect limitations and changes.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Get the &lt;code&gt;ciel&lt;/code&gt; binary and call it with your .lisp script:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ciel script.lisp&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use the &lt;code&gt;#!/usr/bin/env ciel&lt;/code&gt; shebang line to directly call your files:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ./script&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Call built-in scripts:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ciel -s simpleHTTPserver 9000&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See available built-in scripts with &lt;code&gt;--scripts&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://ciel-lang.github.io/CIEL/#/scripting&#34;&gt;the scripts documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Terminal REPL&lt;/h2&gt; &#xA;&lt;p&gt;CIEL ships a terminal REPL for the terminal which is more user friendly than the default SBCL one:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;it has readline capabilities, meaning that the arrow keys work by default (woohoo!) and there is a persistent history, like in any shell.&lt;/li&gt; &#xA; &lt;li&gt;it has &lt;strong&gt;multiline input&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;it has &lt;strong&gt;TAB completion&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;it handles errors gracefully: you are not dropped into the debugger and its sub-REPL, you simply see the error message.&lt;/li&gt; &#xA; &lt;li&gt;it has optional &lt;strong&gt;syntax highlighting&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;it has an optional &lt;strong&gt;lisp critic&lt;/strong&gt; that scans the code you enter at the REPL for instances of bad practices.&lt;/li&gt; &#xA; &lt;li&gt;it has a &lt;strong&gt;shell pass-through&lt;/strong&gt;: try &lt;code&gt;!ls&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;it has &lt;strong&gt;documentation lookup&lt;/strong&gt; shorthands: use &lt;code&gt;:doc symbol&lt;/code&gt; or &lt;code&gt;?&lt;/code&gt; after a symbol to get its documentation: &lt;code&gt;ciel-user&amp;gt; (dict ?&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;it has &lt;strong&gt;developer friendly&lt;/strong&gt; macros: use &lt;code&gt;(printv code)&lt;/code&gt; for an annotated trace output.&lt;/li&gt; &#xA; &lt;li&gt;it integrates the &lt;strong&gt;lisp critic&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;and it defines some more helper commands.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The CIEL terminal REPL loads the &lt;code&gt;~/.cielrc&lt;/code&gt; init file at start-up if present. Don&#39;t load it with &lt;code&gt;--no-userinit&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;See more in &lt;a href=&#34;https://ciel-lang.github.io/CIEL/#/&#34;&gt;&lt;em&gt;the documentation&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Run &lt;code&gt;ciel&lt;/code&gt; with no arguments:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ ciel&#xA;&#xA;CIEL&#39;s REPL version 0.1.5&#xA;Read more on packages with readme or summary. For example: (summary :str)&#xA;Special commands:&#xA;  %help =&amp;gt; Prints this general help message&#xA;  %doc =&amp;gt; Print the available documentation for this symbol.&#xA;  %? =&amp;gt; Gets help on a symbol &amp;lt;sym&amp;gt;: :? str&#xA;  %w =&amp;gt; Writes the current session to a file &amp;lt;filename&amp;gt;&#xA;  %d =&amp;gt; Dumps the disassembly of a symbol &amp;lt;sym&amp;gt;&#xA;  %t =&amp;gt; Prints the type of a expression &amp;lt;expr&amp;gt;&#xA;  %q =&amp;gt; Ends the session.&#xA;  %lisp-critic =&amp;gt; Enable or disable the lisp critic. He critizes the code you type before compiling it.&#xA;  %edit =&amp;gt; Edit a file with EDITOR and evaluate it.&#xA;Press CTRL-D or type :q to exit&#xA;&#xA;ciel-user&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It is freely based on &lt;a href=&#34;https://github.com/hellerve/sbcli&#34;&gt;sbcli&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Lisp library&lt;/h2&gt; &#xA;&lt;p&gt;You can install and &lt;code&gt;quickload&lt;/code&gt; CIEL like any other Common Lisp library.&lt;/p&gt; &#xA;&lt;p&gt;To use it in your project, create a package and &#34;use&#34; &lt;code&gt;ciel&lt;/code&gt; in addition of &lt;code&gt;cl&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(defpackage yourpackage&#xA;  (:use :cl :ciel))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also use &lt;code&gt;generic-ciel&lt;/code&gt;, based on &lt;a href=&#34;https://github.com/alex-gutev/generic-cl/&#34;&gt;generic-cl&lt;/a&gt; (warn: generic-ciel is less tested at the moment).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;    (defpackage yourpackage&#xA;      (:use :cl :generic-ciel))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;generic-cl allows us to define our &lt;code&gt;+&lt;/code&gt; or &lt;code&gt;equalp&lt;/code&gt; methods for our own objects (and more).&lt;/p&gt; &#xA;&lt;h2&gt;Core image: use CIEL in your current developer setup&lt;/h2&gt; &#xA;&lt;p&gt;You can enter the &lt;code&gt;CIEL-USER&lt;/code&gt; package when you start your Lisp image from your editor.&lt;/p&gt; &#xA;&lt;p&gt;A working, but naive and slow-ish approach would be to add this in your &lt;code&gt;~/.sbclrc&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(ql:quickload &#34;ciel&#34;)&#xA;(in-package :ciel-user)&#xA;(ciel-user-help)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A faster way is to use CIEL&#39;s core image and to use SLIME&#39;s or your editor&#39;s feature to &lt;a href=&#34;https://common-lisp.net/project/slime/doc/html/Multiple-Lisps.html#Multiple-Lisps&#34;&gt;configure multiple Lisps&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You need to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;build CIEL&#39;s core image for your machine (&lt;code&gt;make image&lt;/code&gt;),&lt;/li&gt; &#xA; &lt;li&gt;add this to your Emacs init file:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(setq slime-lisp-implementations&#xA;      `((sbcl    (&#34;sbcl&#34; &#34;--dynamic-space-size&#34; &#34;2000&#34;))  ;; default. Adapt if needed.&#xA;        (ciel-sbcl  (&#34;sbcl&#34; &#34;--core&#34; &#34;/path/to/ciel/ciel-core&#34; &#34;--eval&#34; &#34;(in-package :ciel-user)&#34;))))&#xA;(setq slime-default-lisp &#39;ciel-sbcl)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;and start a new Lisp process.&lt;/li&gt; &#xA; &lt;li&gt;optional: if you didn&#39;t set it as default with &lt;code&gt;slime-default-lisp&lt;/code&gt;, then start a new Lisp process with &lt;code&gt;M-- M-x slime&lt;/code&gt; (alt-minus prefix), and choose ciel-sbcl. You can start more than one Lisp process from SLIME.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The Lisp process should start instantly, as fast as the default SBCL, you won&#39;t wait for the quicklisp libraries to load.&lt;/p&gt; &#xA;&lt;h2&gt;Libraries&lt;/h2&gt; &#xA;&lt;p&gt;We import, use and document libraries to fill various use cases: generic access to data structures, functional data structures, string manipulation, JSON, database access, web, URI handling, GUI, iteration helpers, type checking helpers, syntax extensions, developer utilities, etc.&lt;/p&gt; &#xA;&lt;p&gt;See the documentation.&lt;/p&gt; &#xA;&lt;p&gt;To see the full list of dependencies, see the &lt;code&gt;ciel.asd&lt;/code&gt; project definition or this &lt;a href=&#34;https://raw.githubusercontent.com/ciel-lang/CIEL/master/docs/dependencies.md&#34;&gt;dependencies list&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Language extensions&lt;/h2&gt; &#xA;&lt;p&gt;We provide arrow macros, easy type declaratons in the function lambda list, macros for exhaustiveness type checking, pattern matching, etc.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://ciel-lang.github.io/CIEL/#/language-extensions&#34;&gt;the documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Final words&lt;/h1&gt; &#xA;&lt;p&gt;That was your life in CL:&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ciel-lang/CIEL/master/docs/before.jpeg&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;and now:&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ciel-lang/CIEL/master/docs/after-plus.jpeg&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Misc: how to generate the documentation&lt;/h1&gt; &#xA;&lt;p&gt;See &lt;code&gt;src/ciel.lisp&lt;/code&gt; and run &lt;code&gt;(generate-dependencies-page-reference)&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Contributors&lt;/h1&gt; &#xA;&lt;p&gt;Special big thanks to @cinerion, &lt;a href=&#34;https://github.com/themarcelor&#34;&gt;@themarcelor&lt;/a&gt; and everyone who helped (@agam, @patrixl, @bo-tato…).&lt;/p&gt; &#xA;&lt;h1&gt;Lisp?!&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/CodyReichert/awesome-cl&#34;&gt;awesome-cl&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://lispcookbook.github.io/cl-cookbook/&#34;&gt;the Common Lisp Cookbook&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://lispcookbook.github.io/cl-cookbook/editor-support.html&#34;&gt;editor support&lt;/a&gt; (Emacs, Vim, VSCode, Atom, Pulsar, Jetbrains, Sublime, Jupyter notebooks…)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/azzamsa/awesome-lisp-companies/&#34;&gt;Lisp companies&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;blog posts: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://lisp-journey.gitlab.io/blog/these-years-in-common-lisp-2022-in-review/&#34;&gt;these years in Lisp: 2022 in review&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://lisp-journey.gitlab.io/pythonvslisp/&#34;&gt;Python VS Common Lisp, workflow and ecosystem&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://stevelosh.com/blog/2018/08/a-road-to-common-lisp/&#34;&gt;A road to Common Lisp&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;🎥 my &lt;a href=&#34;https://www.udemy.com/course/common-lisp-programming/?referralCode=2F3D698BBC4326F94358&#34;&gt;Common Lisp course in videos: from novice to efficient programmer&lt;/a&gt;, on the Udemy platform.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>