<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Common Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-05-21T01:31:40Z</updated>
  <subtitle>Daily Trending of Common Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>jasonrhalpern/HeuristicSearch</title>
    <updated>2023-05-21T01:31:40Z</updated>
    <id>tag:github.com,2023-05-21:/jasonrhalpern/HeuristicSearch</id>
    <link href="https://github.com/jasonrhalpern/HeuristicSearch" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Artificial Intelligence - implement several heuristics in LISP to solve a 3x3 puzzle&lt;/p&gt;&lt;hr&gt;&lt;p&gt;Jason Halpern (jrh2170) Artificial Intelligence Homework #2 Spring 2012, Professor Pasik&lt;/p&gt; &#xA;&lt;p&gt;The zip folder includes the following 3 files: puzzle.lsp search.lsp queue.lsp&lt;/p&gt; &#xA;&lt;p&gt;LOADING THE FILES: In order to run the program, you have to first unzip the folder. Then you just have to (load &#34;puzzle.lsp&#34;) because that file includes the other files in it with the appropriate load functions.&lt;/p&gt; &#xA;&lt;p&gt;There can be stack overflow issues when running the code in CLISP if the number of node expansions ends up being high.&lt;/p&gt; &#xA;&lt;p&gt;FILES: queue.lsp - This file includes a lot of the queue and heap code that Professor Pasik presented in class. The only modifications I made were to use the appropriate enqueue and key functions. In this case, I used enqueue-priority to create a priority queue and I used my evaluation-function for the key instead of the identity function.&lt;/p&gt; &#xA;&lt;p&gt;search.lsp - This file includes the node structure and search functions from class. I made the necessary modifications to the node structure and functions such that a heuristic cost is also included within the node. I also changed the paramters to expand, general-search and graph-search so the correct heuristic function is now passed around. In addition, at the bottom of this file is my evaluation function, which is the actual cost from the root to this node plus the heuristic cost from this node to the goal state. I also changed the information in the parameters to the appropriate enqueue (enqueue-priority), key (evaluation-function) and samep (equal-states) functions.&lt;/p&gt; &#xA;&lt;p&gt;puzzle.lsp - This file includes the bulk of the code that I wrote for this assignment. There are the 3 heuristic functions that I wrote - manhattan, misplaced and extracredit. For this assignment, the extra credit heuristic is the manhattan distance heuristic plus a linear conflict heuristic. Linear conflict is an admissible heuristic since it always underestimates the true cost to the goal. Linear conflict adds a cost of 2 for each pair of conflict tiles. A pair of tiles have a linear conflict if:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;The two tiles are on the same line&lt;/li&gt; &#xA; &lt;li&gt;The goal positions of both tiles are on that line&lt;/li&gt; &#xA; &lt;li&gt;If tile x is to the left of tile y, but the goal of tile x is to the right of tile y&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;In this file, you can also see the state representation that I created for the nodes. Each state is a 3x3 array which represents the puzzle board. I wrote functions that allowed me to get the value of a square at a specific dimension in the board and to set the value of a square in a given dimension. I wrote a function to test if a given state is the goal state and to test if two states are equal states. I also wrote a function to swap the values of two squares and I wrote functions to find either the x or y coordinate of a number on a given board. I wrote functions to convert a list to the state represenation and vice versa. This file also has the functions I wrote to generate random solvable states. My successor function is also in this file.&lt;/p&gt; &#xA;&lt;p&gt;RUNNING THE PROGRAM: I followed the instructions from your email in terms of input and output. You can run the program using the following - 8-puzzle Input: (8-puzzle start-state heuristic)&lt;/p&gt; &#xA;&lt;p&gt;start-state - is a list of the form &#39;(1 2 3 4 5 6 7 8 0), where 0 is the blank square. heuristic - is either #&#39;manhattan, #&#39;misplaced, or #&#39;extracredit&lt;/p&gt; &#xA;&lt;p&gt;In order to generate 5 random solvable states you can use the following: (random-case)&lt;/p&gt; &#xA;&lt;p&gt;SAMPLE: Here are some examples of how the heuristics compare for random states:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&#39;(2 3 1 0 4 5 6 7 8)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;misplaced ((&#34;up&#34; &#34;right&#34; &#34;right&#34; &#34;down&#34; &#34;left&#34; &#34;left&#34; &#34;up&#34; &#34;right&#34; &#34;down&#34; &#34;right &#34;up&#34; &#34;left&#34; &#34;left&#34;) 13 144)&lt;/p&gt; &#xA;&lt;p&gt;manhattan ((&#34;up&#34; &#34;right&#34; &#34;right&#34; &#34;down&#34; &#34;left&#34; &#34;left&#34; &#34;up&#34; &#34;right&#34; &#34;down&#34; &#34;right &#34;up&#34; &#34;left&#34; &#34;left&#34;) 13 79)&lt;/p&gt; &#xA;&lt;p&gt;extracredit ((&#34;up&#34; &#34;right&#34; &#34;right&#34; &#34;down&#34; &#34;left&#34; &#34;left&#34; &#34;up&#34; &#34;right&#34; &#34;down&#34; &#34;right &#34;up&#34; &#34;left&#34; &#34;left&#34;) 13 50)&lt;/p&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;&#39;(0 3 5 4 2 1 6 7 8)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;misplaced ((&#34;right&#34; &#34;down&#34; &#34;right&#34; &#34;up&#34; &#34;left&#34; &#34;down&#34; &#34;left&#34; &#34;up&#34;) 8 18)&lt;/p&gt; &#xA;&lt;p&gt;manhattan ((&#34;right&#34; &#34;down&#34; &#34;right&#34; &#34;up&#34; &#34;left&#34; &#34;down&#34; &#34;left&#34; &#34;up&#34;) 8 10)&lt;/p&gt; &#xA;&lt;p&gt;extracredit ((&#34;right&#34; &#34;down&#34; &#34;right&#34; &#34;up&#34; &#34;left&#34; &#34;down&#34; &#34;left&#34; &#34;up&#34;) 8 10)&lt;/p&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;&#39;(0 4 3 5 8 1 7 6 2)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;misplaced STACK OVERFLOW&lt;/p&gt; &#xA;&lt;p&gt;manhattan ((&#34;down&#34; &#34;down&#34; &#34;right&#34; &#34;up&#34; &#34;left&#34; &#34;up&#34; &#34;right&#34; &#34;right&#34; &#34;down&#34; &#34;down&#34; &#34;left&#34; &#34;up&#34; &#34;left&#34; &#34;up&#34; &#34;right&#34; &#34;right&#34; &#34;down&#34; &#34;left&#34; &#34;left&#34; &#34;up&#34; 20 188)&lt;/p&gt; &#xA;&lt;p&gt;extracredit ((&#34;down&#34; &#34;down&#34; &#34;right&#34; &#34;up&#34; &#34;left&#34; &#34;up&#34; &#34;right&#34; &#34;right&#34; &#34;down&#34; &#34;down&#34; &#34;left&#34; &#34;up&#34; &#34;left&#34; &#34;up&#34; &#34;right&#34; &#34;right&#34; &#34;down&#34; &#34;left&#34; &#34;left&#34; &#34;up&#34; 20 67)&lt;/p&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;&#39;(5 4 2 6 1 3 7 0 8)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;misplaced ((&#34;left&#34; &#34;up&#34; &#34;right&#34; &#34;right&#34; &#34;up&#34; &#34;left&#34; &#34;left&#34; &#34;down&#34; &#34;right&#34; &#34;up&#34; &#34;right&#34; &#34;down&#34; &#34;left&#34; &#34;up&#34; &#34;left&#34; 15 302)&lt;/p&gt; &#xA;&lt;p&gt;manhattan ((&#34;left&#34; &#34;up&#34; &#34;right&#34; &#34;right&#34; &#34;up&#34; &#34;left&#34; &#34;left&#34; &#34;down&#34; &#34;right&#34; &#34;up&#34; &#34;right&#34; &#34;down&#34; &#34;left&#34; &#34;up&#34; &#34;left&#34; 15 85)&lt;/p&gt; &#xA;&lt;p&gt;extracredit ((&#34;left&#34; &#34;up&#34; &#34;right&#34; &#34;right&#34; &#34;up&#34; &#34;left&#34; &#34;left&#34; &#34;down&#34; &#34;right&#34; &#34;up&#34; &#34;right&#34; &#34;down&#34; &#34;left&#34; &#34;up&#34; &#34;left&#34; 15 75)&lt;/p&gt; &#xA;&lt;ol start=&#34;5&#34;&gt; &#xA; &lt;li&gt;&#39;(1 5 0 6 2 4 7 3 8)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;misplaced ((&#34;left&#34; &#34;down&#34; &#34;down&#34; &#34;left&#34; &#34;up&#34; &#34;right&#34; &#34;right&#34; &#34;up&#34; &#34;left&#34; &#34;left&#34;) 10 27)&lt;/p&gt; &#xA;&lt;p&gt;manhattan ((&#34;left&#34; &#34;down&#34; &#34;down&#34; &#34;left&#34; &#34;up&#34; &#34;right&#34; &#34;right&#34; &#34;up&#34; &#34;left&#34; &#34;left&#34;) 10 10)&lt;/p&gt; &#xA;&lt;p&gt;extracredit ((&#34;left&#34; &#34;down&#34; &#34;down&#34; &#34;left&#34; &#34;up&#34; &#34;right&#34; &#34;right&#34; &#34;up&#34; &#34;left&#34; &#34;left&#34;) 10 10)&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>ocicl/ocicl</title>
    <updated>2023-05-21T01:31:40Z</updated>
    <id>tag:github.com,2023-05-21:/ocicl/ocicl</id>
    <link href="https://github.com/ocicl/ocicl" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An ASDF system distribution and management tool for Common Lisp&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ocicl&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;An ASDF system distribution and management tool for Common Lisp&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;What is it?&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;ocicl&lt;/code&gt; is a modern alternative to quicklisp. It is modern in the sense that:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;all software is &lt;a href=&#34;https://oras.land/&#34;&gt;bundled as OCI-compliant artifacts&lt;/a&gt; and distributed from an OCI-compliant registry (the github container registry).&lt;/li&gt; &#xA; &lt;li&gt;all software is distributed over secure (TLS) connections.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.sigstore.dev/&#34;&gt;sigstore&lt;/a&gt; tooling is used ensure the integrity and authenticity of all software bundles.&lt;/li&gt; &#xA; &lt;li&gt;all software bundles are project-local, making it easy to lock specific versions to your own projects.&lt;/li&gt; &#xA; &lt;li&gt;all software bundles are built and published transparently using hosted CI infrastructure (&lt;a href=&#34;https://github.com/ocicl/ocicl-action&#34;&gt;github actions&lt;/a&gt;).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;code&gt;ocicl&lt;/code&gt; rhymes with &#34;&lt;a href=&#34;https://en.wikipedia.org/wiki/Ossicles&#34;&gt;ossicle&lt;/a&gt;&#34;, a tiny bone embedded in your middle ear. Like the ossicles in your ear, the &lt;code&gt;ocicl-runtime&lt;/code&gt; is a tiny library that is embedded in your lisp image. It is responsible for finding and loading &lt;a href=&#34;https://asdf.common-lisp.dev/&#34;&gt;ASDF&lt;/a&gt; systems that you manage with the &lt;code&gt;ocicl&lt;/code&gt; command line tool.&lt;/p&gt; &#xA;&lt;p&gt;The main innovation behind &lt;code&gt;ocicl&lt;/code&gt; is the idea of applying the ecosystem of tooling and services from the world of application container images to ordinary tarballs of Lisp code. OCI + CL = &lt;code&gt;ocicl&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;ocicl&lt;/code&gt; is under active development. It currently requires SBCL and only works on Linux, but adapting to other systems and platforms should not be difficult. Feedback is welcome at &lt;a href=&#34;https://github.com/ocicl/ocicl/issues&#34;&gt;https://github.com/ocicl/ocicl/issues&lt;/a&gt;. Pull requests are even more welcome, at &lt;a href=&#34;https://github.com/ocicl/ocicl/pulls&#34;&gt;https://github.com/ocicl/ocicl/pulls&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;h2&gt;Quick Start&lt;/h2&gt; &#xA;&lt;p&gt;Install &lt;code&gt;ocicl&lt;/code&gt; by running &lt;code&gt;make&lt;/code&gt; in the source directory. This will build the &lt;code&gt;ocicl&lt;/code&gt; binary and install it in &lt;code&gt;${DESTDIR}/bin&lt;/code&gt;. It will also install a helper program called &lt;code&gt;ocicl-oras&lt;/code&gt;. The default value for &lt;code&gt;DESTDIR&lt;/code&gt; is &lt;code&gt;${HOME}/.local/bin&lt;/code&gt;, but you can change it at install time like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ DESTDIR=/usr/local make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Make sure the &lt;code&gt;${DESTDIR}/bin&lt;/code&gt; directory is on your path.&lt;/p&gt; &#xA;&lt;p&gt;Now run &lt;code&gt;ocicl setup&lt;/code&gt;. This is a mandatory step that installs the &lt;code&gt;ocicl-runtime&lt;/code&gt; library, and suggests configurations for your &lt;code&gt;${HOME}/.sbclrc&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ocicl setup&#xA;Add the following to your ${HOME}/.sbclrc file:&#xA;&#xA;#-ocicl&#xA;(when (probe-file #P&#34;/home/green/.local/share/ocicl/ocicl-runtime.lisp&#34;)&#xA;  (load #P&#34;/home/green/.local/share/ocicl/ocicl-runtime.lisp&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The default behavior for the runtime is to invoke &lt;code&gt;ocicl&lt;/code&gt; when ASDF tries to load a system that it can&#39;t find.&lt;/p&gt; &#xA;&lt;p&gt;Try running this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ sbcl --eval &#34;(asdf:load-system :str)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now look at your current directory. You should see a directory called &lt;code&gt;systems&lt;/code&gt; and a file called &lt;code&gt;systems.csv&lt;/code&gt;. The &lt;code&gt;systems&lt;/code&gt; directory contains the code you just downloaded, and &lt;code&gt;systems.csv&lt;/code&gt; contains a mapping of system names to OCI artifacts and &lt;code&gt;.asd&lt;/code&gt; files.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;str.test, ghcr.io/ocicl/str@sha256:0903b59c33d3026ac55a6f4b25a79094d08e3110758d8ae728bf4188db659313, cl-str-20230511-b1c8380/str.test.asd&#xA;str, ghcr.io/ocicl/str@sha256:0903b59c33d3026ac55a6f4b25a79094d08e3110758d8ae728bf4188db659313, cl-str-20230511-b1c8380/str.asd&#xA;cl-ppcre, ghcr.io/ocicl/cl-ppcre@sha256:5274824d397fa197d5c7790344ace27f2a30fc34c6cadb0a9fcce7d1e4052486, cl-ppcre-20230511-b4056c5a/cl-ppcre.asd&#xA;cl-ppcre-unicode, ghcr.io/ocicl/cl-ppcre@sha256:5274824d397fa197d5c7790344ace27f2a30fc34c6cadb0a9fcce7d1e4052486, cl-ppcre-20230511-b4056c5a/cl-ppcre-unicode.asd&#xA;cl-unicode, ghcr.io/ocicl/cl-unicode@sha256:b61ac07aed06c926720e6a4c155fd0c9411b01a05ee7ebba55fca7df491880e5, cl-unicode-20230511-2790a6b/cl-unicode.asd&#xA;flexi-streams, ghcr.io/ocicl/flexi-streams@sha256:091df0cda6006b19aa206b022bb6d06fd9d5e5787b6152b9f0ae6846926ac5e0, flexi-streams-20230511-74a1027/flexi-streams.asd&#xA;flexi-streams-test, ghcr.io/ocicl/flexi-streams@sha256:091df0cda6006b19aa206b022bb6d06fd9d5e5787b6152b9f0ae6846926ac5e0, flexi-streams-20230511-74a1027/flexi-streams-test.asd&#xA;trivial-gray-streams, ghcr.io/ocicl/trivial-gray-streams@sha256:e82a60fdccc33916f26b60a3af63ee110f0b364cc2af59eee4be86256e8ea2b6, trivial-gray-streams-20230511-2b3823e/trivial-gray-streams.asd&#xA;trivial-gray-streams-test, ghcr.io/ocicl/trivial-gray-streams@sha256:e82a60fdccc33916f26b60a3af63ee110f0b364cc2af59eee4be86256e8ea2b6, trivial-gray-streams-20230511-2b3823e/trivial-gray-streams-test.asd&#xA;cl-change-case, ghcr.io/ocicl/cl-change-case@sha256:61791ee49f0160adad694eedbe8804fe9bcebad54336b0fbb8ce1a82091e20fa, cl-change-case-0.2.0/cl-change-case.asd&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The next time you try to load &lt;code&gt;str&lt;/code&gt;, ASDF will load the code that you&#39;ve already downloaded and compiled.&lt;/p&gt; &#xA;&lt;p&gt;Now try deleting the &lt;code&gt;systems&lt;/code&gt; directory, and loading &lt;code&gt;str&lt;/code&gt; again as above. &lt;code&gt;ocicl&lt;/code&gt; will download the exact version specified in the &lt;code&gt;systems.csv&lt;/code&gt; file. The idea here is that you would commit your &lt;code&gt;systems.csv&lt;/code&gt; file to your project&#39;s source repo, but never the &lt;code&gt;systems&lt;/code&gt; directory. When you run your program, you will always be using the library versions locked in your &lt;code&gt;systems.csv&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;p&gt;Now let&#39;s try the &lt;code&gt;ocicl&lt;/code&gt; command line tool.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ocicl help&#xA;ocicl 1.0.0 - copyright (C) 2023 Anthony Green &amp;lt;green@moxielogic.com&amp;gt;&#xA;&#xA;Usage: ocicl [-h|--help] [-v|--verbose] command&#xA;&#xA;Available options:&#xA;  -v, --verbose            produce verbose output&#xA;&#xA;Choose from the following ocicl commands:&#xA;&#xA;   help                                Print this help text&#xA;   install [SYSTEM[:VERSION]]...       Install systems&#xA;   latest [SYSTEM]...                  Install latest version of systems&#xA;   list SYSTEM...                      List available system versions&#xA;   setup                               Mandatory ocicl configuration&#xA;   version                             Show the ocicl version information&#xA;&#xA;Distributed under the terms of the MIT License&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If we again delete the &lt;code&gt;systems&lt;/code&gt; directory, running &lt;code&gt;ocicl install&lt;/code&gt; will download all of the systems specified in your &lt;code&gt;systems.csv&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ocicl install&#xA;; downloading ghcr.io/ocicl/str@sha256:0903b59c33d3026ac55a6f4b25a79094d08e3110758d8ae728bf4188db659313&#xA;; downloading ghcr.io/ocicl/cl-ppcre@sha256:5274824d397fa197d5c7790344ace27f2a30fc34c6cadb0a9fcce7d1e4052486&#xA;; downloading ghcr.io/ocicl/cl-unicode@sha256:b61ac07aed06c926720e6a4c155fd0c9411b01a05ee7ebba55fca7df491880e5&#xA;; downloading ghcr.io/ocicl/flexi-streams@sha256:091df0cda6006b19aa206b022bb6d06fd9d5e5787b6152b9f0ae6846926ac5e0&#xA;; downloading ghcr.io/ocicl/trivial-gray-streams@sha256:e82a60fdccc33916f26b60a3af63ee110f0b364cc2af59eee4be86256e8ea2b6&#xA;; downloading ghcr.io/ocicl/cl-change-case@sha256:61791ee49f0160adad694eedbe8804fe9bcebad54336b0fbb8ce1a82091e20fa&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can download additional systems like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ocicl install trivial-garbage&#xA;; downloading trivial-garbage&#xA;; downloaded ghcr.io/ocicl/trivial-garbage@sha256:1eaadc3a546aaad7b452197663d9baece7a7e11beac6beb7db5b5faf4e74d541&#xA;; compiling file &#34;/home/green/test/systems/trivial-garbage-20230511-b3af9c0/trivial-garbage.lisp&#34; (written 19 MAY 2023 08:34:59 AM):&#xA;&#xA;; wrote /home/green/.cache/common-lisp/sbcl-2.3.2-linux-x64/home/green/test/systems/trivial-garbage-20230511-b3af9c0/trivial-garbage-tmpMQBOWYP9.fasl&#xA;; compilation finished in 0:00:00.007&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This downloads the latest version of trivial-garbage, which is the OCI image with the &lt;code&gt;latest&lt;/code&gt; tag, and is equivalent to &lt;code&gt;ocicl install trivial-garbage:latest&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To see what other versions of a package are available, run &lt;code&gt;ocicl list trivial-garbage&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ocicl list trivial-garbage&#xA;trivial-garbage:&#xA; latest&#xA; 20230511-b3af9c0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here we only have one version, 20230511-b3af9c0, which also has the &lt;code&gt;latest&lt;/code&gt; tag. Many lisp libraries are built from git sources without release tags. In this case, the version label represents the build date and the git commit hash (b3af9c0).&lt;/p&gt; &#xA;&lt;p&gt;To install any specific version of a system, just use the appropriate version label in your &lt;code&gt;ocicl install&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;p&gt;To update all systems in your &lt;code&gt;systems.csv&lt;/code&gt; file to the latest version, run &lt;code&gt;ocicl latest&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can change the default behaviour of downloading systems on demand by setting &lt;code&gt;ocicl-runtime:*download*&lt;/code&gt; to nil.&lt;/p&gt; &#xA;&lt;h2&gt;Security&lt;/h2&gt; &#xA;&lt;p&gt;All system tarballs are digitally signed with the ocicl-tarball-signer key: B96ACDBF35C5C1AB81596FB6D3AFE1884397BDC8.&lt;/p&gt; &#xA;&lt;p&gt;You can download the unexpanded tarballs like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ocicl-oras pull ghcr.io/ocicl/str:latest&#xA;Downloading 577fc7118b8a cl-str-20230511-b1c8380.tar.gz&#xA;Downloaded  577fc7118b8a cl-str-20230511-b1c8380.tar.gz&#xA;Pulled [registry] ghcr.io/ocicl/str:latest&#xA;Digest: sha256:0903b59c33d3026ac55a6f4b25a79094d08e3110758d8ae728bf4188db659313&#xA;&#xA;$ ls -l&#xA;total 32&#xA;-rw-r--r--. 1 green green 24609 May 19 09:02 cl-str-20230511-b1c8380.tar.gz&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Similarly, the signature is available by appending &lt;code&gt;.sig&lt;/code&gt; to the system name.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ocicl-oras pull ghcr.io/ocicl/str.sig:latest&#xA;Downloading 2a97da913ef7 cl-str-20230511-b1c8380.tar.gz.sig&#xA;Downloaded  2a97da913ef7 cl-str-20230511-b1c8380.tar.gz.sig&#xA;Pulled [registry] ghcr.io/ocicl/str.sig:latest&#xA;Digest: sha256:47903679d96504c5e83f08f7d6dfc4e613e7ab968e44dc46cb13b29f7917ddea&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can verify the signature like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ gpg --verify cl-str-20230511-b1c8380.tar.gz.sig cl-str-20230511-b1c8380.tar.gz&#xA;gpg: Signature made Thu 11 May 2023 05:44:45 AM EDT&#xA;gpg:                using RSA key B96ACDBF35C5C1AB81596FB6D3AFE1884397BDC8&#xA;gpg: Good signature from &#34;ocicl-tarball-signer&#34; [ultimate]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;These signatures are also archived in the &lt;a href=&#34;https://www.sigstore.dev&#34;&gt;sigstore&lt;/a&gt; &lt;a href=&#34;https://docs.sigstore.dev/rekor/overview/&#34;&gt;rekor transparency log&lt;/a&gt;. This gives you and your auditors confidence that the code you are running is what it claims to be.&lt;/p&gt; &#xA;&lt;p&gt;You can search for these signatures based on the sha of the tarball like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ rekor-cli search --sha $(sha256sum cl-str-20230511-b1c8380.tar.gz)&#xA;Found matching entries (listed by UUID):&#xA;24296fb24b8ad77a6594635675d0e6365b89ee0d5e3b1ce823adb19c28aa3602c2537163710638d9&#xA;&#xA;$ rekor-cli get --uuid 24296fb24b8ad77a6594635675d0e6365b89ee0d5e3b1ce823adb19c28aa3602c2537163710638d9&#xA;LogID: c0d23d6ad406973f9559f3ba2d1ca01f84147d8ffc5b8445c224f98b9591801d&#xA;Index: 20300488&#xA;IntegratedTime: 2023-05-11T09:44:49Z&#xA;UUID: 24296fb24b8ad77a6594635675d0e6365b89ee0d5e3b1ce823adb19c28aa3602c2537163710638d9&#xA;Body: {&#xA;  &#34;RekordObj&#34;: {&#xA;    &#34;data&#34;: {&#xA;      &#34;hash&#34;: {&#xA;        &#34;algorithm&#34;: &#34;sha256&#34;,&#xA;        &#34;value&#34;: &#34;577fc7118b8a21285ad871dd44e4fe25126fd05d2d4fad52a4015d5a01788d44&#34;&#xA;      }&#xA;    },&#xA;    &#34;signature&#34;: {&#xA;      &#34;content&#34;: &#34;LS0tLS1CRUdJTiBQR1AgU0lHTkFUVVJFLS0tLS0KCmlRR3pCQUFCQ2dBZEZpRUV1V3JOdnpYRndhdUJXVysyMDYvaGlFT1h2Y2dGQW1SY3VRMEFDZ2tRMDYvaGlFT1gKdmNqcGh3d0FsSUJ6N3IrcnhZSml5dHhHZlFXMDJ6Z0tzQ1BKcC9RRXI1NUdIZjBQN3U0QlBod0ZmRlFRbWhRWQpsYndoclpjMEcvRFRXdm5vdzBOa0RTRXFBbVhtUjIyMzJOWDFEMVVBSEVRYWUzc3lhbld0aTd4ZEhLdXI3TE90CmsyRmFFMFl0VGt0a1RscDBzSGlxazliWHkzVVpqUHBFazBWZzZCaTM2QVUzVVFCMHFpc1dKQ2o4RGVLZnhSN1EKdkgvblo0MnJSMUNsTkRhdzBXQWc5eFR0WmNCSTRydEM4UXFIbWIzQ2N6elJ2WVM3T3V2VFRaM1h4NkNPQVFjUgpjVHNKa25qSGI4MXFQNFlBNDFiQ3l1L28xWGVCUmxIM1ZXVURyWHBoWEhETm1FcFFaTVFpWVBOYUl2Q1dOQ09lCkRqSFhLazk3NnFBcFVzVHBxcFRIdmgxUGNxSFpFeFdPRWQwSkxpR3BzZW9vODN4M1k0bTBDaXRBTDhDK2xzTk4KTGxWeFNCbmZ6STJVZnpBK3lWMFVVT1pHMXhJY1QzMVNaRGRZV1VKdG9OZmVuSnA0RTNXdlZzZXA3UDhXMXZxOApHY0RVU2lxT010ajFIdHhqTmdMTldCUk01aDNaMHhyaHQ0SjFRejArZHVESGxCOWJxeU9OS240eGtLZnBrWlRBCkRUakJkZTJlCj1DdS9LCi0tLS0tRU5EIFBHUCBTSUdOQVRVUkUtLS0tLQo=&#34;,&#xA;      &#34;format&#34;: &#34;pgp&#34;,&#xA;      &#34;publicKey&#34;: {&#xA;        &#34;content&#34;: &#34;LS0tLS1CRUdJTiBQR1AgUFVCTElDIEtFWSBCTE9DSy0tLS0tCgp4c0ROQkdSYnIrY0JEQUM5YUlXaElpc08zNjRCdnhYc093QjZwUklKWGQrbWJINHp1VXdRNHIrcmQvb3M0TG1SCkxaaVRDekVZbVMrcHhnUWQwb1haR2o5elZ3VzRYMndaVzI4K0RVRDljWnpHL1J6RkRHeExnZzc1d2dDYmp1czcKeVc0UmtQQkhYOXRsNUFuRHU0SjFKK01Ra3hyUEVHZFpFSVp2QVlKOVJFWDRDSVhHQUNjdXgyaGtaVUlTNVpxZQpvdjRwd1FReFhTNm5SOVpUOHpieWo1SkhQWmtRek02eU42c0F6aXFlUUZpK3pKdXJaTG9kdU9BbEs2Z3BjY1F1CkRnQ0JCM280S2cvSk5lZVB0VTlHYUxHSXB1ZGdxd0N2VHpSbUR0NUc5bjd0cVJaV0ZFMitxSmg5MVBFdzhyUjkKOG5NQWxZSFI1S3BJcUpwbldjOFRSME0yQ0tCOEd2UzNjS3E3NHYvQTZ5bUFPNzErbmVad3pxTENyTEsydllNeApHbjdOSUVKM0grRVFQcEplNGkrbWxoeGE5Rm1zMi9qSUdjemJMNGtSbGdqVE9wazFmOE4zaWZDbnp1YkpxQ3ZXCnZGbWMxM2I0eE9ic3BlWndjckk3Kzg2R092a2FaZk1ONWZweGt4U1lETStLSVEyZlNYcXp0ZGlHWDBVZEp3dG4KOEZhTlBnTUJvckFGMzAwQUVRRUFBYzBVYjJOcFkyd3RkR0Z5WW1Gc2JDMXphV2R1WlhMQ3dSRUVFd0VJQURzVwpJUVM1YXMyL05jWEJxNEZaYjdiVHIrR0lRNWU5eUFVQ1pGdXY1d0liQXdVTENRZ0hBZ0lpQWdZVkNna0lDd0lFCkZnSURBUUllQndJWGdBQUtDUkRUcitHSVE1ZTl5TEZ6Qy85TmJmVUIzYncyMUhHQStBTk03WHg5VVdpZVlNSzkKcWlFUUFyYVgvQm85cnl6c3ZtcnUxcDZYN2RsTmtoTEJzMWl1MFZ0eFB4SWhHdUdncHNPekV2N0Y3OFdvM0pwNQo4dVQ5cW5kelV2aXh2S2lFTTJsdzZHZWFrallCMjV4Zy9VSnpWNmxGYWhhcVZ6emhUSkovbkI5YU9jNDg1WjBpCnV1UnIxU3Nkb3VHbHdRTVZydktRbU1rMjlaTzlKcnNIUmxQR2hnY1p0K2J1bUJPdDNKZTQ0WGtkL0NtNDBxdXYKb2Mwb0FFNGN2c2JkSmE2d3EwODlQK3VPWFZNZlhpUDVBd3ZWSjYxQ2NEYWRJWk1kT29KYnc0b1k3V2dWS2NIWQpYd0tlS0NzOFpzRWs2OGlTRm1FQ3Q3THI4U2tENVcwRXY0QWV3clh4dEFXNElCYUtRaE1pSEZsQ2kvdzdLdjduCm1lM0t4Q1JEc0F4NEdld05iTXRaUjBnZHRwV21CWGVpRytROC8wZGdMUFRqRmFBWHFRQithUWNuMzFscnZCYVgKd0Jib3FtUlNtWDVwdk1uaHhiNSt0R0hsRU9QekMrZ0k0VU50cVZ4L1NIRCtSZHNNM0owd2huRjh3R09KWlRZUwo1WkxrZWR6Qjc3VEtzakNhci92Q2x5UTUvalIrck81VjlwSE93TTBFWkZ1djV3RU1BTUJkY1JYYUpCQ2V2dHV1CklnU3Nmc3hDb3NLRnJQN3JTdmN2bHlHT3pCVlBKT2JFbE5NbjVTOGNwZCtuMXcrQS9rdXFobUNHVmJjaHI2YkMKUERRbmJad2pwWUU3bGVISGtQT2tkT2JHY3VOWjZ1YVNsSktWcWg5aHpHeHZZUlhIMFhUSDNkb2NJTTdyRkdtOQpSMWdKcDhBNmtSbWg4ZVNSOWpMRWNhS2lRTUZPbEYzU3RFZms4VzFsZ0x2Z2VTVnJkc0s0Rnc3Ui9BRVlmek5xClpTZEdRYmx0WXkyekVKcG04M2QxN1BCZXN4eE5FdVNWYUlibCtqai9TLzVkL1h0OGVKdVJzbDVOeDdLSTRpenkKK1pFWkxOWkJZa3FzMTZsSnRva2oxclZOUitLWEtCN1pDenVacGxjYURJbExWMUN0YXFqVXpMazFlcVh0TXBZOQordTFocXd0em5vWnRsTTZTTmVYZnUzS3YzSFlaWUlJVGcrSDBLQVVnZko1S1F1YnNaN2dmSVpaMno0WkZHUHJPCllhWlRJQmNGMGlIbEhZWitPTVRONWpKR2VrU0NlTW0yVUZzZVBqSUtQdHhudTk0ajNDanhWbmlzZURzUkJja1oKcFRaY2VPNkZVa3pCYkltQ2FqNklZd2NmdFhBWVRFQjZXdzE0OUdFYnpONEVyV1pKaXdBUkFRQUJ3c0QyQkJnQgpDQUFnRmlFRXVXck52elhGd2F1QldXKzIwNi9oaUVPWHZjZ0ZBbVJicitjQ0d3d0FDZ2tRMDYvaGlFT1h2Y2lGCmxndi9URndrYXYzYWFFVnhvU0hDNDJzTGl0YmZGOC83YW53ZGZPZkhFdFVSejBmdk1vVEVsamdtS05jb3FQYkEKdkhJMmN1MXA3RTAvOXNZY0VTaXlPNzJVR29oWmZtaWFsTlhROE53TVcySzFnM1FZS0hKam55WWV2WnlkV3dlegpDbXovU0RpNXFBYmMzSVprTFZXRk5LOXdrenljVlhYcVB6ZnJzdDkyTXJ1ZktYSDc2eEExZlA2NXl6S21ZSW9WCnc3eHJkaGp2VzMvS0JHeU5iZHk0dmNucWdERUFCbWR5OUJxRkhKK0p4QnFIZXZKTjV6SXAySHFRK2x4YWVGYmgKQTllckJKYVMzNDU4eXVxd0FvTEJ4OURscHZYQzE2c3NXVVU3WGlJQ1pFb255aXVxQVN4QXMxZjk3SFNjVWx3UQpxWExLUURmZEFud25PeE9wcXFHS1E1M3FzN3UxdUJ0RzJrN0JQMmEwbE1EUW9Za1hoK2tPNTRVT0ZtS1lFNGdvCjE0SFdYSmc3S0Y5UjMxQ0ZrNXNGUU9yYmR1bCtoNC80VVRMSFhGTFBMVkkvTzYwZDNCNkd4cm91SlRSeWJDUHAKV0tvZjg0VGcyY1FiV2FmVko5bzlIbklwb2lPNGJCMVZrQndoM3E2TTE2L0kyWC9zNGhaVVNLODJYSWJ0TlFxRgpRZmxZCj1hbnlKCi0tLS0tRU5EIFBHUCBQVUJMSUMgS0VZIEJMT0NLLS0tLS0=&#34;&#xA;      }&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Further explanation of the sigstore tooling and ecosystem is beyond the scope of this document, but you can read about it at &lt;a href=&#34;https://docs.sigstore.dev/&#34;&gt;https://docs.sigstore.dev/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Self-Hosting&lt;/h2&gt; &#xA;&lt;p&gt;[This section needs to be written on hosting the OCI content in your own registry -- something very easy to do, as there are many useful tools to borrow from the container world.]&lt;/p&gt; &#xA;&lt;h2&gt;Systems&lt;/h2&gt; &#xA;&lt;p&gt;Systems managed by &lt;code&gt;ocicl&lt;/code&gt; are maintained in github, at &lt;code&gt;https://github.com/ocicl&lt;/code&gt;. Each system has its own source repo, and the &lt;code&gt;README.org&lt;/code&gt; file contains everything required to build and publish to the OCI registry via github actions. Contributions are welcome and appreciated!&lt;/p&gt; &#xA;&lt;h2&gt;Tips and Troubleshooting&lt;/h2&gt; &#xA;&lt;p&gt;You may find it convenient to tell ASDF to load from the current directory. Do this by placing the following in your &lt;code&gt;.sbclrc&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(pushnew (uiop:getcwd) asdf:*central-registry*)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Setting &lt;code&gt;ocicl-runtime:*verbose*&lt;/code&gt; to &lt;code&gt;t&lt;/code&gt; will output useful and interesting log info.&lt;/p&gt; &#xA;&lt;h2&gt;Author and License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;ocicl&lt;/code&gt; was written by &lt;a href=&#34;https://github.com/atgreen&#34;&gt;Anthony Green&lt;/a&gt;, and is distributed under the terms of the MIT license.&lt;/p&gt; &#xA;&lt;p&gt;This software includes Lisp source code files written by Zachary Beane, Mark Karpov, and PMSF IT Consulting Pierre R. Mai. See the ocicl source files for details.&lt;/p&gt;</summary>
  </entry>
</feed>