<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Common Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-09-19T01:35:43Z</updated>
  <subtitle>Daily Trending of Common Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>bohonghuang/cl-gtk4</title>
    <updated>2022-09-19T01:35:43Z</updated>
    <id>tag:github.com,2022-09-19:/bohonghuang/cl-gtk4</id>
    <link href="https://github.com/bohonghuang/cl-gtk4" rel="alternate"></link>
    <summary type="html">&lt;p&gt;GTK4/libadwaita binding for Common Lisp.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#+TITLE: cl-gtk4&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Requirement Before getting started, please ensure these libraries are available in your system:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;del&gt;gtk4&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;libadwaita&lt;/del&gt; (optional)&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;libgirepository&lt;/del&gt; Theoretically, the application built with &lt;del&gt;cl-gtk4&lt;/del&gt; can run on most systems supported by GTK4 and most implementations that support CFFI callback (required by &lt;del&gt;cl-gobject-introspection&lt;/del&gt;). The [[file:example/][examples]] are tested to run on following implementations:&lt;/li&gt; &#xA; &lt;li&gt;SBCL &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Microsoft Windows \ [[file:example/adw-win.png]]&lt;/li&gt; &#xA;   &lt;li&gt;MacOS \ See: [[https://ibb.co/7KZz3r2]]&lt;/li&gt; &#xA;   &lt;li&gt;GNU/Linux \ See the screenshots in the [[Examples][Examples]] section.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;CCL&lt;/li&gt; &#xA; &lt;li&gt;ECL&lt;/li&gt; &#xA; &lt;li&gt;ABCL&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Usage&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Clone this repository along with [[https://github.com/bohonghuang/cl-gobject-introspection-wrapper][cl-gobject-introspection-wrapper]] and [[https://github.com/bohonghuang/cl-gio][cl-gio]] into the folder &lt;del&gt;local-projects&lt;/del&gt; under where your Quicklisp is installed.&lt;/li&gt; &#xA; &lt;li&gt;Load the library with &lt;del&gt;(ql:quickload :cl-gtk4)&lt;/del&gt; (or &lt;del&gt;(ql:quickload :cl-gtk4.adw)&lt;/del&gt; if you want to use libadwaita).&lt;/li&gt; &#xA; &lt;li&gt;For GTK4 usage, please refer to [[https://docs.gtk.org/gtk4/][GTK API reference]] and check out the [[https://github.com/bohonghuang/cl-gobject-introspection-wrapper#conversion-rules][conversion rules]] of these APIs.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Examples ** [[file:example/gtk4.lisp][Simple Counter]] (GTK4) [[file:example/gtk4.png]]&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;#+BEGIN_SRC lisp (defpackage gtk4.example (:use #:cl #:gtk4) (:export #:main))&lt;/p&gt; &#xA;&lt;p&gt;(in-package #:gtk4.example)&lt;/p&gt; &#xA;&lt;p&gt;(defun main () (let ((app (make-application :application-id &#34;your.application.id&#34; :flags gio:+application-flags-flags-none+))) (connect app &#34;activate&#34; (lambda (app) (let ((window (make-application-window :application app))) (setf (window-title window) &#34;CL-GTK4 Example&#34;) (let ((box (make-box :orientation +orientation-vertical+ :spacing 4))) (let ((label (make-label :str &#34;0&#34;))) (setf (widget-hexpand-p label) t (widget-vexpand-p label) t) (box-append box label) (let ((button (make-button :label &#34;Add&#34;)) (count 0)) (connect button &#34;clicked&#34; (lambda (button) (declare (ignore button)) (setf (label-text label) (format nil &#34;~A&#34; (incf count))))) (box-append box button)) (let ((button (make-button :label &#34;Exit&#34;))) (connect button &#34;clicked&#34; (lambda (button) (declare (ignore button)) (window-destroy window))) (box-append box button))) (setf (window-child window) box)) (window-present window)))) (gio:application-run app nil))) #+END_SRC ** [[file:example/adw.lisp][Simple Lisp REPL]] (Libadwaita) [[file:example/adw.png]]&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC lisp (defpackage adw.example (:use #:cl #:gtk4) (:export #:main))&lt;/p&gt; &#xA;&lt;p&gt;(in-package #:adw.example)&lt;/p&gt; &#xA;&lt;p&gt;(defun main-window (app) (let ((expression nil)) (let ((window (adw:make-application-window :app app))) (widget-add-css-class window &#34;devel&#34;) (widget-set-size-request window 400 600) (let ((box (make-box :orientation +orientation-vertical+ :spacing 0))) (setf (adw:window-content window) box) (let ((header-bar (adw:make-header-bar))) (setf (adw:header-bar-title-widget header-bar) (adw:make-window-title :title (lisp-implementation-type) :subtitle (lisp-implementation-version))) (box-append box header-bar)) (let ((carousel (adw:make-carousel))) (setf (widget-hexpand-p carousel) t (widget-vexpand-p carousel) t (adw:carousel-interactive-p carousel) t) (let ((page (adw:make-status-page))) (setf (widget-hexpand-p page) t (widget-vexpand-p page) t (adw:status-page-icon-name page) &#34;utilities-terminal-symbolic&#34; (adw:status-page-title page) &#34;Simple Lisp REPL&#34; (adw:status-page-description page) &#34; &#34;) (flet ((eval-expression (widget) (declare (ignore widget)) (when expression (setf (adw:status-page-description page) (princ-to-string (handler-case (eval expression) (error (err) err))))))) (let ((box (make-box :orientation +orientation-vertical+ :spacing 0))) (let ((group (adw:make-preferences-group))) (setf (widget-margin-all group) 10) (let ((row (adw:make-action-row))) (setf (adw:preferences-row-title row) (format nil &#34;~A&amp;gt;&#34; (or (car (package-nicknames &lt;em&gt;package&lt;/em&gt;)) (package-name &lt;em&gt;package&lt;/em&gt;)))) (let ((entry (make-entry))) (setf (widget-valign entry) +align-center+ (widget-hexpand-p entry) t) (connect entry &#34;changed&#34; (lambda (entry) (setf expression (ignore-errors (read-from-string (entry-buffer-text (entry-buffer entry))))) (funcall (if expression #&#39;widget-remove-css-class #&#39;widget-add-css-class) entry &#34;error&#34;))) (connect entry &#34;activate&#34; #&#39;eval-expression) (adw:action-row-add-suffix row entry)) (adw:preferences-group-add group row)) (box-append box group)) (let ((carousel-box box) (box (make-box :orientation +orientation-horizontal+ :spacing 0))) (setf (widget-hexpand-p box) t (widget-halign box) +align-fill+) (let ((button (make-button :label &#34;Exit&#34;))) (setf (widget-css-classes button) &#39;(&#34;pill&#34;) (widget-margin-all button) 10 (widget-hexpand-p button) t) (connect button &#34;clicked&#34; (lambda (button) (declare (ignore button)) (window-destroy window))) (box-append box button)) (let ((button (make-button :label &#34;Eval&#34;))) (setf (widget-css-classes button) &#39;(&#34;suggested-action&#34; &#34;pill&#34;) (widget-margin-all button) 10 (widget-hexpand-p button) t) (connect button &#34;clicked&#34; #&#39;eval-expression) (box-append box button)) (box-append carousel-box box)) (setf (adw:status-page-child page) box))) (adw:carousel-append carousel page)) (box-append box carousel))) (window-present window))))&lt;/p&gt; &#xA;&lt;p&gt;(defun main () (unless (adw:initialized-p) (adw:init)) (let ((app (make-application :application-id &#34;your.application.id&#34; :flags gio:+application-flags-flags-none+))) (connect app &#34;activate&#34; #&#39;main-window) (gio:application-run app nil))) #+END_SRC&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>acl2/acl2</title>
    <updated>2022-09-19T01:35:43Z</updated>
    <id>tag:github.com,2022-09-19:/acl2/acl2</id>
    <link href="https://github.com/acl2/acl2" rel="alternate"></link>
    <summary type="html">&lt;p&gt;ACL2 System and Books as Maintained by the Community&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ACL2 System and Community Books&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;WARNING&lt;/strong&gt;: On rare occasions development versions of ACL2 may be incomplete, fragile, or unable to pass the usual regression tests. You may choose to download an official ACL2 release as described on the &lt;a href=&#34;http://www.cs.utexas.edu/users/moore/acl2&#34; title=&#34;ACL2 Home Page&#34;&gt;ACL2 Home Page&lt;/a&gt; or below in this README.&lt;/p&gt; &#xA;&lt;p&gt;The ACL2 theorem proving environment consists of two parts: The ACL2 System and The ACL2 Books. This repository contains both.&lt;/p&gt; &#xA;&lt;h3&gt;ACL2 System&lt;/h3&gt; &#xA;&lt;p&gt;The included version of the ACL2 System is the latest, under-development version of the &lt;a href=&#34;http://www.cs.utexas.edu/users/moore/acl2&#34; title=&#34;ACL2 Home Page&#34;&gt;ACL2 Theorem Prover&lt;/a&gt;. It is updated only by the ACL2 authors, Matt Kaufmann and J Moore.&lt;/p&gt; &#xA;&lt;h3&gt;ACL2 Books&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;books/&lt;/code&gt; directory of this repository comprises the Community Books, which are the canonical collection of open-source libraries for the ACL2 System. As the name suggests, they are updated by the ACL2 community.&lt;/p&gt; &#xA;&lt;h3&gt;Documentation&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;The &lt;a href=&#34;http://www.cs.utexas.edu/users/moore/acl2/current/combined-manual/index.html&#34;&gt;Combined ACL2 + Books Manual&lt;/a&gt; has extensive documentation for the latest stable version of ACL2 and many of the community books that come with it.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;There is also a &lt;a href=&#34;http://www.cs.utexas.edu/users/moore/acl2/manuals/latest/index.html&#34;&gt;development version&lt;/a&gt; of the manual which is updated reasonably frequently and corresponds to the development version of ACL2 and its books.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Finally there is the more compact &lt;a href=&#34;http://www.cs.utexas.edu/users/moore/acl2/current/manual/index.html&#34;&gt;ACL2-only manual&lt;/a&gt; which only documents the ACL2 system itself and not any books.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Each of these manuals can be downloaded for offline use by clicking the download button on the right hand side of the upper toolbar while browsing the manual.&lt;/p&gt; &#xA;&lt;h3&gt;Obtaining the Source Code&lt;/h3&gt; &#xA;&lt;p&gt;While active development of ACL2 occurs at the &lt;code&gt;acl2/acl2&lt;/code&gt; repo on GitHub, stable releases are officially distributed from the &lt;code&gt;acl2-devel/acl2-devel&lt;/code&gt; fork, which exists for that purpose.&lt;/p&gt; &#xA;&lt;h4&gt;Latest Stable Release&lt;/h4&gt; &#xA;&lt;p&gt;You can download a gzipped tarfile or zip file for the latest release, which includes the &lt;a href=&#34;http://www.cs.utexas.edu/users/moore/acl2&#34; title=&#34;ACL2 Home Page&#34;&gt;ACL2 system&lt;/a&gt; and the &lt;a href=&#34;http://www.cs.utexas.edu/users/moore/acl2/manuals/latest/index.html?topic=ACL2____COMMUNITY-BOOKS&#34;&gt;community books&lt;/a&gt;, from &lt;a href=&#34;https://github.com/acl2-devel/acl2-devel/releases/&#34;&gt;the releases page&lt;/a&gt; on GitHub.&lt;/p&gt; &#xA;&lt;p&gt;Alternatively you can obtain a copy of the latest release using &lt;a href=&#34;http://git-scm.com&#34;&gt;&lt;code&gt;git&lt;/code&gt;&lt;/a&gt;. For example, do the following in a fresh directory (note the &#34;.&#34; at the end).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone -b 8.5 https://github.com/acl2-devel/acl2-devel .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The new directory &lt;code&gt;/path/to/somewhere/acl2/&lt;/code&gt; will now contain a copy of ACL2 Version 8.5. Please see the &lt;a href=&#34;http://www.cs.utexas.edu/users/moore/acl2&#34; title=&#34;ACL2 Home Page&#34;&gt;ACL2 home page&lt;/a&gt;, specifically its &lt;a href=&#34;http://www.cs.utexas.edu/users/moore/acl2/current/HTML/installation/installation.html&#34;&gt;installation instructions&lt;/a&gt;, for how to build an executable and certify books in your new directory.&lt;/p&gt; &#xA;&lt;h4&gt;Experimental Development Version&lt;/h4&gt; &#xA;&lt;p&gt;To check out the latest development version of the repository using &lt;code&gt;git&lt;/code&gt;, you can (for example) do the following in a fresh directory (note the &#34;.&#34; at the end):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/acl2/acl2 .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Contributing&lt;/h3&gt; &#xA;&lt;p&gt;See the documentation for &lt;a href=&#34;http://www.cs.utexas.edu/users/moore/acl2/manuals/latest/index.html?topic=ACL2____GIT-QUICK-START&#34;&gt;how to contribute&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Even though we have merged the Community Books (formerly acl2-books) and ACL2 System (formerly acl2-devel) repositories into one, changes should be made only to the &lt;code&gt;books/&lt;/code&gt; subdirectory unless you are Matt Kaufmann or J Moore, since everything outside &lt;code&gt;books/&lt;/code&gt; is part of the ACL2 system. (If you have suggestions for system changes, they should be emailed to &lt;a href=&#34;mailto:kaufmann@cs.utexas.edu&#34;&gt;Matt or J&lt;/a&gt;, as has been done in the past.)&lt;/p&gt; &#xA;&lt;h3&gt;Staying Informed&lt;/h3&gt; &#xA;&lt;p&gt;We invite anyone who is using this repository to join the &lt;a href=&#34;http://groups.google.com/group/acl2-books&#34;&gt;acl2-books mailing list&lt;/a&gt;, which receives commit messages and other discussion related to ACL2 system- and book-related development.&lt;/p&gt; &#xA;&lt;h3&gt;Contributors wanted!&lt;/h3&gt; &#xA;&lt;p&gt;Everyone can contribute documentation and advice to our &lt;a href=&#34;https://github.com/acl2/acl2/wiki&#34;&gt;wiki&lt;/a&gt; and discuss &lt;a href=&#34;https://github.com/acl2/acl2/issues&#34;&gt;problems and feature requests&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you would like to contribute to this repository, see the documentation topic &lt;a href=&#34;http://www.cs.utexas.edu/users/moore/acl2/manuals/latest/?topic=ACL2____GIT-QUICK-START&#34;&gt;git-quick-start&lt;/a&gt;. Please note the &lt;a href=&#34;https://github.com/acl2/acl2/wiki/Committing-code:-guidelines&#34;&gt;guidelines for book development&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>