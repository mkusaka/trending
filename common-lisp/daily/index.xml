<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Common Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-06-24T01:33:10Z</updated>
  <subtitle>Daily Trending of Common Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>radian628/lispsmos</title>
    <updated>2023-06-24T01:33:10Z</updated>
    <id>tag:github.com,2023-06-24:/radian628/lispsmos</id>
    <link href="https://github.com/radian628/lispsmos" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A LISP-y language that compiles to Desmos expressions.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;LISPsmos&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/radian628/desmoscript&#34;&gt;If you&#39;re coming here from that desmos plane video, note that this project has been succeeded by my new language, Desmoscript!&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://radian628.github.io/lispsmos/&#34;&gt;DOCUMENTATION HERE&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Disclaimer: Despite what GitHub says, LISPsmos was not written in Common Lisp. The &#34;.lisp&#34; files are LISPsmos files.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;LISPsmos is a LISP-like programming language that maps almost directly to Desmos expressions, offering an alternate, text-based workflow and tooling.&lt;/p&gt; &#xA;&lt;p&gt;Along with most Desmos features, LISPsmos comes with builtin support for the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Procedural expressions for creating complex conditional logic and branching trees of actions. LISPsmos will automatically convert structured, procedural code (using if, while, procedure calls, etc.) into a piecewise with a program counter positioned at the start of the given entry point. Procedure calls can be recursive.&lt;/li&gt; &#xA; &lt;li&gt;Simple &#34;find and replace&#34; macros, along with token concatenation features.&lt;/li&gt; &#xA; &lt;li&gt;Macros that evaluate arbitrary JavaScript code to transform an AST (Abstract Syntax Tree).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;h3&gt;Basic Usage&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(= a 1) ;variable assignment&#xA;(-&amp;gt; a (+ a 1)) ;actions and arithmetic operators&#xA;(= tenDividedByFive (/ 10 5)) ;longer variable names are automatically made subscript&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Functions&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;;The positive solution to the quadratic formula.&#xA;(fn quadraticFormulaPositiveSoln a b c (&#xA;    / &#xA;    (+ (* -1 b) (sqrt (- (* b b) (* 4 a c)))) &#xA;    (* 2 a)&#xA;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Piecewises&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;;Print x if x&amp;gt;=0, and -x if x&amp;lt;0. Effectively mimics the absolute value function.&#xA;;You&#39;ll need to manually turn on the display for this (disabled by default)&#xA;(fn absoluteValue x (piecewise&#xA;    ((&amp;gt;= x 0) x)&#xA;    ((&amp;lt; x 0) (* -1 x))&#xA;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Display&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(displayMe ;indicates that the expression should be displayed&#xA;    (= y x) ;expression to display&#xA;    (color red) ;all subsequent arguments to displayMe are optional display settings&#xA;    (lineWidth 30) &#xA;    (lineOpacity 0.2) &#xA;    (lineStyle DOTTED)&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Find-and-replace Macros&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;;macro that increments a variable&#xA;(defineFindAndReplace inc v (-&amp;gt; v (+ v 1)))&#xA;(= i 0)&#xA;;expands to (-&amp;gt; i (+ i 1))&#xA;(inc i)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;JavaScript Evaluation Macros&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;;macro that calls the following function on its arguments&#xA;(evalMacro inc &#34;return [[&#39;-&amp;gt;&#39;, args[1], [&#39;+&#39;, args[1], &#39;1&#39;]]]&#34;)&#xA;(= a 0)&#xA;(inc a) ;application of the macro. All macros of this type are variadic.&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>armedbear/abcl</title>
    <updated>2023-06-24T01:33:10Z</updated>
    <id>tag:github.com,2023-06-24:/armedbear/abcl</id>
    <link href="https://github.com/armedbear/abcl" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Armed Bear Common Lisp &lt;git+https://github.com/armedbear/abcl/&gt; &lt;--&gt; &lt;svn+https://abcl.org/svn&gt; Bridge&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Armed Bear Common Lisp (ABCL)&lt;/h1&gt; &#xA;&lt;p&gt;Armed Bear Common Lisp is a conforming implementation of ANSI X3J13 Common Lisp that runs in a Java virtual machine. It compiles Lisp code directly to Java byte code for execution.&lt;/p&gt; &#xA;&lt;h2&gt;LICENSE&lt;/h2&gt; &#xA;&lt;p&gt;Armed Bear Common Lisp is distributed under the GNU General Public License with a classpath exception (see &#34;Classpath Exception&#34; below).&lt;/p&gt; &#xA;&lt;p&gt;A copy of GNU General Public License (GPLv2) is included in this distribution, in &lt;a href=&#34;file:COPYING&#34;&gt;file:COPYING&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;We have modified our GPLv2 license section 13 to read:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt; 13. Linking this library statically or dynamically with other&#xA; modules is making a combined work based on this library. Thus, the&#xA; terms and conditions of the GNU General Public License cover the&#xA; whole combination.&#xA;&#xA; The following paragraph details the &#34;classpath exception&#34; which ABCL&#xA; allows as an exception to the statement about linking libraries.&#xA;&#xA; As a special exception, the copyright holders of this software give&#xA; you permission to link this software with independent modules to&#xA; produce an executable, regardless of the license terms of these&#xA; independent modules, and to copy and distribute the resulting&#xA; executable under terms of your choice, provided that you also meet,&#xA; for each linked independent module, the terms and conditions of the&#xA; license of that module. An independent module is a module which is&#xA; not derived from or based on this software. If you modify this&#xA; software, you may extend this exception to your version of the&#xA; software, but you are not obligated to do so. If you do not wish to&#xA; do so, delete this exception statement from your version.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;CONTAINERIZATION&lt;/h2&gt; &#xA;&lt;p&gt;We recommend using podman over docker for political reasons, but the surface syntax is identical so if you must, just substitute &lt;code&gt;docker&lt;/code&gt; for &lt;code&gt;podman&lt;/code&gt; in the following examples.&lt;/p&gt; &#xA;&lt;p&gt;With &lt;a href=&#34;https://podman.io/releases/&#34;&gt;podman&lt;/a&gt; installed, one may execute:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;podman build -t YOURID/abcl .&#xA;podman run -it YOURID/abcl &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;to get something like&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;illin:~/work/abcl$ podman run -it YOURID/abcl&#xA;VM settings:&#xA;    Max. Heap Size (Estimated): 3.89G&#xA;    Using VM: OpenJDK 64-Bit Server VM&#xA;&#xA;Armed Bear Common Lisp 1.9.2&#xA;Java 17.0.2 Oracle Corporation&#xA;OpenJDK 64-Bit Server VM&#xA;Low-level initialization completed in 0.432 seconds.&#xA;Startup completed in 2.246 seconds.&#xA;Type &#34;:help&#34; for a list of available commands.&#xA;CL-USER(1):&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To install Quicklisp for ABCL in the container run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;podman run -t YOURID/abcl abcl \&#xA;  --batch --load /home/abcl/work/abcl/ci/install-quicklisp.lisp&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;file:Dockerfile&#34;&gt;file:Dockerfile&lt;/a&gt; for the build instructions.&lt;/p&gt; &#xA;&lt;h2&gt;RUNNING FROM BINARY RELEASE&lt;/h2&gt; &#xA;&lt;p&gt;After you have downloaded a binary release from either &lt;a href=&#34;https://mvnrepository.com/artifact/org.abcl/abcl/1.9.2&#34;&gt;the distributed Maven POM graph&lt;/a&gt; or from &lt;a href=&#34;http://abcl.org/releases/1.9.2/&#34;&gt;abcl.org&lt;/a&gt; archive unpack it into its own directory. To run ABCL directly from this directory, make sure the Java executable (&lt;code&gt;java&lt;/code&gt;) is in your shell&#39;s path. Java 8, 11, 17 are strongly supported by ABCL, but others may work with a little elbow grease.&lt;/p&gt; &#xA;&lt;p&gt;To start ABCL, simply issue the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cmd$ java -jar abcl.jar&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;which should result in output like the following&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Armed Bear Common Lisp 1.9.2&#xA;Java 17.0.7 OpenJDK Porters Group&#xA;OpenJDK 64-Bit Server VM&#xA;Low-level initialization completed in 0.107 seconds.&#xA;Startup completed in 0.493 seconds.&#xA;CL-USER(1):&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Yer now at the interactive ABCL &#34;Read Eval Print Loop&#34; (REPL): hacks &#39;n glory await.&lt;/p&gt; &#xA;&lt;p&gt;See the section headed &#34;SLIME&#34; for instructions to connect to this repl from Emacs.&lt;/p&gt; &#xA;&lt;h2&gt;BUILDING FROM SOURCE RELEASE&lt;/h2&gt; &#xA;&lt;p&gt;ABCL may be built from its source code by executing the build instructions &lt;a href=&#34;file:build.xml&#34;&gt;file:build.xml&lt;/a&gt; expressed by the venerable Apache Ant tool. Alternately, one may use the Apache Maven tool as a facade to Ant.&lt;/p&gt; &#xA;&lt;p&gt;To build, one must have a Java 8, 11, or 17 openjdk installed locally. Just the Java Runtime Environment (JRE) isn&#39;t enough, as you need the Java compiler (&#39;javac&#39;) to compile the Java source of the ABCL implementation.&lt;/p&gt; &#xA;&lt;p&gt;Download a binary distribution &lt;a href=&#34;https://ant.apache.org/bindownload.cgi&#34;&gt;Ant version 1.7.1 or greater&lt;/a&gt;. Unpack the files somewhere convenient, ensuring that the &#39;ant&#39; (or &#39;ant.bat&#39; under Windows) executable is in your path and executable.&lt;/p&gt; &#xA;&lt;p&gt;Then simply executing&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cmd$ ant&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To use &lt;a href=&#34;https://maven.apache.org/download.cgi&#34;&gt;Maven&lt;/a&gt;, download it, ensure the &lt;code&gt;mvn&lt;/code&gt; executable is in your PATH and then&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cmd$ mvn -Dmaven.test.skip=true install &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;from the directory containing the &lt;a href=&#34;file:build.xml&#34;&gt;file:build.xml&lt;/a&gt; instructions will create an executable wrapper (&#39;abcl&#39; under UNIX, &#39;abcl.bat&#39; under Windows). Use this wrapper to start ABCL.&lt;/p&gt; &#xA;&lt;p&gt;The build may be customized by copying &lt;a href=&#34;file:abcl.properties.in&#34;&gt;file:abcl.properties.in&lt;/a&gt; to &lt;a href=&#34;file:abcl.properties&#34;&gt;file:abcl.properties&lt;/a&gt;, which will cause Ant to attempt to build incrementally as well as optimizing the runtime for a contemporary 64bit desktop/server machine running Java 8, 11, and/or 17. The file contains incomplete documentation on how it may be edited for subsequent customization. As an alternative to copying the prototype, if one has a version of bash locally, one may issue via Ant&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;ant abcl.properties.autoconfigure.openjdk.17&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or from the shell as&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;bash ci/create-abcl-properties.bash openjdk17&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Currently supported platforms are &#39;openjdk8&#39;, &#39;openjdk11&#39;, &#39;openjdk13&#39;, &#39;openjdk14&#39;, &#39;openjdk15&#39;, &#39;openjd16&#39;, &#39;openjdk17&#39;, &#39;openjdk18&#39;, and &#39;openjdk19&#39;.&lt;/p&gt; &#xA;&lt;h2&gt;USING APACHE NETBEANS&lt;/h2&gt; &#xA;&lt;p&gt;Alternatively, one may install the &lt;a href=&#34;https://netbeans.org/downloads/&#34;&gt;Netbeans visual integrated development environment&lt;/a&gt;, which contains both the Java Development Kit as well as the Ant build tool. The source distribution contains Netbeans-specific project artifacts under &lt;a href=&#34;file:nbproject&#34;&gt;file:nbproject&lt;/a&gt; for loading ABCL as a Netbeans project.&lt;/p&gt; &#xA;&lt;p&gt;With Netbeans, one should be able to open the ABCL directory as a project whereupon the usual build, run, and debug targets as invoked in the GUI are available. To launch the debugging target it is currently necessary to have the &lt;code&gt;abcl.build.incremental&lt;/code&gt; Ant property be set to &lt;code&gt;true&lt;/code&gt;. This can most easily be affected by running the autoconfigure mechanism for the underlying JVM platform as documented in the previous section entitlted &#34;BUILDING FROM SOURCE RELEASE&#34;.&lt;/p&gt; &#xA;&lt;p&gt;To connect to the running Netbeans process, one may use the &lt;code&gt;slime&lt;/code&gt; Netbeans configuration connecting to &lt;a href=&#34;tcp:4:localhost:4005&#34;&gt;tcp:4:localhost:4005&lt;/a&gt; when prompted from an invocation M-x slime-connect with Emacs. For this to work, ASDF must be configured to find a suitably linked SLIME &lt;code&gt;swank.asd&lt;/code&gt;; the Lisp stanzas in the subsequent section entitled &#34;SLIME&#34; affect this in the local installation.&lt;/p&gt; &#xA;&lt;h2&gt;SLIME&lt;/h2&gt; &#xA;&lt;p&gt;For usage of ABCL with the &lt;a href=&#34;https://common-lisp.net/project/slime/&#34;&gt;Superior Lisp Interaction Mode for Emacs&lt;/a&gt;, one may easily start a Swank listener via:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(require :asdf)&#xA;(require :abcl-contrib)&#xA;(asdf:load-system :quicklisp-abcl)&#xA;(or&#xA;   (asdf:make :swank)&#xA;   (ql:quickload :swank))&#xA;(swank:create-server :dont-close t)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;BUGS&lt;/h2&gt; &#xA;&lt;p&gt;Armed Bear Common Lisp strives to be a conforming ANSI X3J13 Common Lisp implementation. Any other behavior should be reported as a bug.&lt;/p&gt; &#xA;&lt;p&gt;ABCL has a &lt;a href=&#34;https://abcl.org/releases/1.9.2/abcl-1.9.2.pdf&#34;&gt;User Manual&lt;/a&gt; stating its conformance to the ANSI standard, providing a compliant and practical Common Lisp implementation.&lt;/p&gt; &#xA;&lt;h2&gt;TESTS&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;| Version | Failures | Total |&#xA;|---------+----------+-------|&#xA;|   1.9.2 |       63 | 21902 |&#xA;|   1.9.1 |       60 | 21870 |&#xA;|   1.9.0 |       61 | 21870 |&#xA;|   1.8.0 |       49 | 21848 |&#xA;|   1.5.0 |       48 | 21708 |&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;ABCL 1.9.2 currently fails ~63 out of 21902 the current ANSI test suite derived from the tests originally written for GCL.&lt;/p&gt; &#xA;&lt;p&gt;Maxima&#39;s test suite runs without failures.&lt;/p&gt; &#xA;&lt;p&gt;ABCL comes with a test suite. Consult the output of &lt;code&gt;ant help.test&lt;/code&gt; for more information.&lt;/p&gt; &#xA;&lt;h2&gt;SUPPORT&lt;/h2&gt; &#xA;&lt;p&gt;ABCL has many deficiencies, both known and unknown. Descriptions, tests, and even patches to address them will be gladly accepted.&lt;/p&gt; &#xA;&lt;p&gt;Please report problems to the &lt;a href=&#34;https://mailman.common-lisp.net/pipermail/armedbear-devel/&#34;&gt;development mailing list&lt;/a&gt; or via opening an issue on either the &lt;a href=&#34;https://abcl.org/trac/&#34;&gt;ABCL trac instance&lt;/a&gt; or &lt;a href=&#34;https://github.com/armedbear/abcl/issues&#34;&gt;github&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;AUTHORS&lt;/h2&gt; &#xA;&lt;p&gt;On behalf of all ABCL development team and contributors,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Mark Evenson&#xA;Erik Hülsmann&#xA;Rudolf Schlatte&#xA;Alessio Stalla&#xA;Ville Voutilainen&#xA;&#xA;alan&#xA;dmiles&#xA;Dmitry Nadezhin&#xA;olof ferada&#xA;pipping&#xA;slyrus&#xA;vibhu&#xA;&#xA;Jonathan Cunningham&#xA;Uthar&#xA;alejandrozf&#xA;phoe&#xA;jackdaniel&#xA;Robert Munyer&#xA;Eric Timmons (daewok)&#xA;contrapunctus&#xA;Scott Burson&#xA;Samuel Hunter&#xA;Phil Eaton&#xA;jpellegrini&#xA;&#xA;András Simon&#xA;Peter Graves&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Have fun!&lt;/p&gt; &#xA;&lt;p&gt;June 2023&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>exercism/common-lisp</title>
    <updated>2023-06-24T01:33:10Z</updated>
    <id>tag:github.com,2023-06-24:/exercism/common-lisp</id>
    <link href="https://github.com/exercism/common-lisp" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Exercism exercises in Common Lisp.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Exercism Common Lisp Track&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/exercism/common-lisp/workflows/Configlet%20CI/badge.svg&#34;&gt;&lt;img src=&#34;https://github.com/exercism/common-lisp/workflows/Configlet%20CI/badge.svg?sanitize=true&#34; alt=&#34;Configlet Lint Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/exercism/common-lisp/workflows/Config%20Check/badge.svg&#34;&gt;&lt;img src=&#34;https://github.com/exercism/common-lisp/workflows/Config%20Check/badge.svg?sanitize=true&#34; alt=&#34;Config Check Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/exercism/common-lisp/workflows/Test%20Exercises/badge.svg&#34;&gt;&lt;img src=&#34;https://github.com/exercism/common-lisp/workflows/Test%20Exercises/badge.svg?sanitize=true&#34; alt=&#34;Exercise Test Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Exercism exercises in &lt;a href=&#34;https://common-lisp.net&#34;&gt;Common Lisp&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing to the Common Lisp Track&lt;/h2&gt; &#xA;&lt;p&gt;There are several ways to contribute to the Common Lisp track including (but not limited to):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Reporting problems with the track.&lt;/li&gt; &#xA; &lt;li&gt;Working on the &lt;a href=&#34;https://github.com/exercism/common-lisp-test-runner&#34;&gt;test runner&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Working on the &lt;a href=&#34;https://github.com/exercism/common-lisp-representer&#34;&gt;representer&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Working on the &lt;a href=&#34;https://github.com/exercism/common-lisp-analyzer&#34;&gt;analyzer&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Working on concept exercises.&lt;/li&gt; &#xA; &lt;li&gt;Working on practice exercises.&lt;/li&gt; &#xA; &lt;li&gt;Working on track documents.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;There are two guides to the structure of the track and tooling which would be good to be familiar with.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;The &lt;a href=&#34;https://github.com/exercism/docs/tree/main/building/tracks&#34;&gt;language track guide&lt;/a&gt;. This describes how all the language tracks are put together, as well as details about the common metadata.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The &lt;a href=&#34;https://github.com/exercism/docs/tree/main/building/tooling&#34;&gt;track tooling guide&lt;/a&gt;. This describes the interface to the various tooling (test runner, representer and analyzer) as well as how they are used and invoked.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Issues&lt;/h3&gt; &#xA;&lt;p&gt;Feel free to file an issues on the &lt;a href=&#34;https://github.com/exercism/common-lisp/issues&#34;&gt;track repository&lt;/a&gt; for problems of any size. Feel free to report typographical errors or poor wording for example. You can greatly help improve the quality of the exercises by filing reports of invalid solutions that pass tests or of valid solutions that fail tests.&lt;/p&gt; &#xA;&lt;p&gt;For issues specifically with &lt;a href=&#34;https://github.com/exercism/common-lisp-analyzer&#34;&gt;the analyzer&lt;/a&gt;, &lt;a href=&#34;https://github.com/exercism/common-lisp-representer&#34;&gt;the representer&lt;/a&gt;, or &lt;a href=&#34;https://github.com/exercism/common-lisp-test-runner&#34;&gt;the test runner&lt;/a&gt; please file the issues in the appropriate repository.&lt;/p&gt; &#xA;&lt;h3&gt;Pull Requests&lt;/h3&gt; &#xA;&lt;p&gt;Feel free to submit &lt;a href=&#34;https://github.com/exercism/common-lisp/pulls&#34;&gt;pull requests&lt;/a&gt; to correct any &lt;a href=&#34;https://github.com/exercism/common-lisp/issues&#34;&gt;issues&lt;/a&gt; or to add new functionality.&lt;/p&gt; &#xA;&lt;p&gt;For pull requests specifically with &lt;a href=&#34;https://github.com/exercism/common-lisp-analyzer&#34;&gt;the analyzer&lt;/a&gt;, &lt;a href=&#34;https://github.com/exercism/common-lisp-representer&#34;&gt;the representer&lt;/a&gt;, or &lt;a href=&#34;https://github.com/exercism/common-lisp-test-runner&#34;&gt;the test runner&lt;/a&gt; please file the pull requests in the appropriate repository.&lt;/p&gt; &#xA;&lt;p&gt;Pull Requests should be focused on a single change. They must pass the CI system before they will be merged.&lt;/p&gt; &#xA;&lt;h3&gt;Creating or Modifying Exercises&lt;/h3&gt; &#xA;&lt;p&gt;There are two types of exercises: concept and practice.&lt;/p&gt; &#xA;&lt;p&gt;Concept exercises are intended to teach the student a particular concept of the language. They should be simple and short. Refer to the document on the &lt;a href=&#34;https://github.com/exercism/docs/raw/main/building/tracks/concept-exercises.md&#34;&gt;anatomy of a concept exercises&lt;/a&gt; for details of the parts that are needed for a concept exercises. The work needed for a concept exercise can be large, feel free to create an &lt;a href=&#34;https://github.com/exercism/common-lisp/issues&#34;&gt;issue&lt;/a&gt; or &lt;a href=&#34;https://github.com/exercism/common-lisp/pulls&#34;&gt;pull request&lt;/a&gt; to discuss ideas for a concept exercise so it can be worked on collaboratively.&lt;/p&gt; &#xA;&lt;p&gt;Practice exercises are intended to allow a student to further practice and extend their knowledge of a concept. They can be longer and/or more &#39;clever&#39;. Refer to the document on the &lt;a href=&#34;https://github.com/exercism/docs/raw/main/building/tracks/practice-exercises.md&#34;&gt;anatomy of a practice exercise&lt;/a&gt; for details of the parts that are needed for a concept exercise.&lt;/p&gt; &#xA;&lt;h4&gt;Practice Exercise Generation&lt;/h4&gt; &#xA;&lt;p&gt;Many practice exercises are part of a canonical set of exercises shared across tracks (information on this can be found in the &lt;a href=&#34;https://github.com/exercism/problem-specifications/&#34;&gt;problem specifications repository&lt;/a&gt;. There is a generator in the ./bin folder that you can use to generate all of the requisite files from the problem-specifications. (Note, you &lt;em&gt;will&lt;/em&gt; need to have cloned the &lt;a href=&#34;https://github.com/exercism/problem-specifications/&#34;&gt;problem specifications repository&lt;/a&gt; for the generator to work.) The generator is written in Python, and you will therefore need to have Python 3.8 or later installed. You can run the script directly and follow the prompts, or you can run it from the command line. If you wish to run the generator from the command line, first navigate to your common-lisp repository. From here, there are two ways to run the generator, the first way being to enter the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;python ./bin/lisp_exercise_generator.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and from there, follow the prompts. The second way is to type in:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;python ./bin/lisp_exercise_generator.py [-f] [path exercise author]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;where:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;path is the relative or absolute path to your problem-specifications repository&lt;/li&gt; &#xA; &lt;li&gt;exercise is the name of the exercise to be generated&lt;/li&gt; &#xA; &lt;li&gt;author is your Github handle&lt;/li&gt; &#xA; &lt;li&gt;-f is a flag to force overwrite an already existing exercise&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Any one of these methods will generate and fill in all the necessary files, with the exception of the .meta/example.lisp file, which you will need to complete yourself. &lt;strong&gt;The common-lisp/config.json file will remain unaltered - you will have to manually alter this file.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;A Common Lisp replacement for this generator will be coming &#34;soon&#34;.&lt;/p&gt; &#xA;&lt;h2&gt;Development Setup&lt;/h2&gt; &#xA;&lt;p&gt;This track uses &lt;a href=&#34;http://www.sbcl.org&#34;&gt;SBCL&lt;/a&gt; for its development. Since Common Lisp is a standardized language and (at present) exercises only use features and behavior specified by the standard any other conforming implementation could be used for development of features for the track. However any tooling created for this track (such as part of its build system) must work in &lt;a href=&#34;http://www.sbcl.org&#34;&gt;SBCL&lt;/a&gt;. It is outside the scope of this document to describe how to install a Common Lisp implementation. Please refer to the documentation for your chosen implementation for details.&lt;/p&gt; &#xA;&lt;p&gt;The track also uses &lt;a href=&#34;https://www.quicklisp.org/beta/&#34;&gt;QuickLisp&lt;/a&gt; for system management. Please refer to its documentation for instructions on how to install it.&lt;/p&gt; &#xA;&lt;h3&gt;A note about QuickLisp &amp;amp; ASDF registries&lt;/h3&gt; &#xA;&lt;p&gt;The track contains some tools useful during development such as CI tasks. These are provided as &lt;a href=&#34;https://common-lisp.net/project/asdf/&#34;&gt;ASDF&lt;/a&gt; systems. To ensure they are found appropriately by &lt;a href=&#34;https://www.quicklisp.org/beta/&#34;&gt;QuickLisp&lt;/a&gt; and &lt;a href=&#34;https://common-lisp.net/project/asdf/&#34;&gt;ASDF&lt;/a&gt; either symbolic-link them into your &lt;code&gt;quickslip/local-projects&lt;/code&gt; directory or by configuring your &lt;a href=&#34;https://common-lisp.net/project/asdf/asdf/Configuring-ASDF-to-find-your-systems.html&#34;&gt;ASDF registry&lt;/a&gt; appropriately.&lt;/p&gt; &#xA;&lt;h3&gt;A note about markdown files&lt;/h3&gt; &#xA;&lt;p&gt;Some exercises have a &lt;code&gt;introduction.md.tpl&lt;/code&gt; file - this means that exercise&#39;s &lt;code&gt;introduction.md&lt;/code&gt; file is not meant to be edited by hand, instead it is generated by combining other documents. To update the &lt;code&gt;introduction.md&lt;/code&gt; files one must run &lt;code&gt;./bin/configlet generate&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Track Build System&lt;/h2&gt; &#xA;&lt;p&gt;This track uses &lt;a href=&#34;https://github.com/features/actions&#34;&gt;GitHub Actions&lt;/a&gt; as a build system.&lt;/p&gt; &#xA;&lt;p&gt;It contains several workflows:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/exercism/common-lisp/raw/main/.github/workflows/configlet.yml&#34;&gt;&lt;code&gt;configlet.yml&lt;/code&gt;&lt;/a&gt; - runs &lt;a href=&#34;https://github.com/exercism/configlet&#34;&gt;&lt;code&gt;configlet&lt;/code&gt;&lt;/a&gt; to do a general track structure check.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/exercism/common-lisp/raw/main/.github/workflows/config-checker.yml&#34;&gt;&lt;code&gt;config-checker.yml&lt;/code&gt;&lt;/a&gt; - runs the &lt;a href=&#34;https://github.com/exercism/common-lisp/raw/main/src/config-checker.asd&#34;&gt;&lt;code&gt;config-checker&lt;/code&gt; system&lt;/a&gt; to do some other specific track structure checks.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/exercism/common-lisp/raw/main/.github/workflows/test-exercises.yml&#34;&gt;&lt;code&gt;test-exercises.yml&lt;/code&gt;&lt;/a&gt; - runs the &lt;a href=&#34;https://github.com/exercism/common-lisp/raw/main/src/test-exercises.asd&#34;&gt;&lt;code&gt;test-execise&lt;/code&gt; system&lt;/a&gt; to run all exercise tests against the example/exemplar files to verify validity of the solutions.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Building &amp;amp; Testing&lt;/h3&gt; &#xA;&lt;p&gt;To run the build &#34;manually&#34; execute the following from the root directory of the track:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;In the shell: &lt;code&gt;./bin/fetch-configlet &amp;amp;&amp;amp; ./configlet lint&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;In the REPL: &lt;code&gt;(progn (asdf:load-system &#34;config-checker&#34;) (config-checker:check-config))&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;In the REPL: &lt;code&gt;(asdf:test-system &#34;test-exercises&#34;)&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>