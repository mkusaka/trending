<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Common Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-07-10T01:33:07Z</updated>
  <subtitle>Daily Trending of Common Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>pascalcombier/plain-common-lisp</title>
    <updated>2023-07-10T01:33:07Z</updated>
    <id>tag:github.com,2023-07-10:/pascalcombier/plain-common-lisp</id>
    <link href="https://github.com/pascalcombier/plain-common-lisp" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A trivial way to get a native Common Lisp environment on Windows&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;plain-common-lisp&lt;/h1&gt; &#xA;&lt;div id=&#34;toc&#34; class=&#34;toc&#34;&gt; &#xA; &lt;div id=&#34;toctitle&#34;&gt;&#xA;  Table of Contents&#xA; &lt;/div&gt; &#xA; &lt;ul class=&#34;sectlevel1&#34;&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pascalcombier/plain-common-lisp/main/#_document_versioning&#34;&gt;Document versioning&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pascalcombier/plain-common-lisp/main/#_introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pascalcombier/plain-common-lisp/main/#_examples&#34;&gt;Examples&lt;/a&gt; &#xA;   &lt;ul class=&#34;sectlevel2&#34;&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pascalcombier/plain-common-lisp/main/#_console_hello_world&#34;&gt;Console Hello World!&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pascalcombier/plain-common-lisp/main/#_other_examples&#34;&gt;Other examples&lt;/a&gt; &#xA;     &lt;ul class=&#34;sectlevel3&#34;&gt; &#xA;      &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pascalcombier/plain-common-lisp/main/#_plain_common_lisp_swank&#34;&gt;plain-common-lisp-swank&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pascalcombier/plain-common-lisp/main/#_console_hello_world_2&#34;&gt;console-hello-world&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pascalcombier/plain-common-lisp/main/#_console_cat&#34;&gt;console-cat&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pascalcombier/plain-common-lisp/main/#_gui_helloworld_win32&#34;&gt;gui-helloworld-win32&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pascalcombier/plain-common-lisp/main/#_gui_helloworld_iup&#34;&gt;gui-helloworld-iup&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pascalcombier/plain-common-lisp/main/#_gui_paint_tk&#34;&gt;gui-paint-tk&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pascalcombier/plain-common-lisp/main/#_gui_ftw_tetris&#34;&gt;gui-ftw-tetris&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pascalcombier/plain-common-lisp/main/#_gui_opengl&#34;&gt;gui-opengl&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pascalcombier/plain-common-lisp/main/#_slime_configuration&#34;&gt;SLIME configuration&lt;/a&gt; &#xA;   &lt;ul class=&#34;sectlevel2&#34;&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pascalcombier/plain-common-lisp/main/#_install_slime_on_gnu_emacs&#34;&gt;Install SLIME on GNU Emacs&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pascalcombier/plain-common-lisp/main/#_install_swank_in_plain_common_lisp&#34;&gt;Install SWANK in plain-common-lisp&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pascalcombier/plain-common-lisp/main/#_make_the_slime_configuration_persistent&#34;&gt;Make the SLIME configuration persistent&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pascalcombier/plain-common-lisp/main/#_technical_information&#34;&gt;Technical information&lt;/a&gt; &#xA;   &lt;ul class=&#34;sectlevel2&#34;&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pascalcombier/plain-common-lisp/main/#_application_startup&#34;&gt;Application startup&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pascalcombier/plain-common-lisp/main/#_sbcl_changes&#34;&gt;SBCL changes&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pascalcombier/plain-common-lisp/main/#_known_issues&#34;&gt;Known issues&lt;/a&gt; &#xA;     &lt;ul class=&#34;sectlevel3&#34;&gt; &#xA;      &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pascalcombier/plain-common-lisp/main/#_slime_does_not_work_when_spawning_plain_common_lisp_executables&#34;&gt;SLIME does not work when spawning plain-common-lisp executables&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pascalcombier/plain-common-lisp/main/#_external_references&#34;&gt;External references&lt;/a&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;_document_versioning&#34;&gt;Document versioning&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;table class=&#34;tableblock frame-all grid-all stretch&#34;&gt; &#xA;   &lt;colgroup&gt; &#xA;    &lt;col style=&#34;width: 16.6666%;&#34;&gt; &#xA;    &lt;col style=&#34;width: 16.6666%;&#34;&gt; &#xA;    &lt;col style=&#34;width: 25%;&#34;&gt; &#xA;    &lt;col style=&#34;width: 41.6668%;&#34;&gt; &#xA;   &lt;/colgroup&gt; &#xA;   &lt;thead&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;th class=&#34;tableblock halign-left valign-top&#34;&gt;Version&lt;/th&gt; &#xA;     &lt;th class=&#34;tableblock halign-left valign-top&#34;&gt;Date&lt;/th&gt; &#xA;     &lt;th class=&#34;tableblock halign-left valign-top&#34;&gt;Author&lt;/th&gt; &#xA;     &lt;th class=&#34;tableblock halign-left valign-top&#34;&gt;Comment&lt;/th&gt; &#xA;    &lt;/tr&gt; &#xA;   &lt;/thead&gt; &#xA;   &lt;tbody&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;v0.1&lt;/p&gt;&lt;/td&gt; &#xA;     &lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;2022-07-17&lt;/p&gt;&lt;/td&gt; &#xA;     &lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;Pascal COMBIER&lt;/p&gt;&lt;/td&gt; &#xA;     &lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;Initial release&lt;/p&gt;&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;v0.2&lt;/p&gt;&lt;/td&gt; &#xA;     &lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;2022-07-23&lt;/p&gt;&lt;/td&gt; &#xA;     &lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;Pascal COMBIER&lt;/p&gt;&lt;/td&gt; &#xA;     &lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;Add SLIME chapter&lt;/p&gt;&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;v0.3&lt;/p&gt;&lt;/td&gt; &#xA;     &lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;2022-07-31&lt;/p&gt;&lt;/td&gt; &#xA;     &lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;Pascal COMBIER&lt;/p&gt;&lt;/td&gt; &#xA;     &lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;Add examples&lt;/p&gt;&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;v0.4&lt;/p&gt;&lt;/td&gt; &#xA;     &lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;2022-08-13&lt;/p&gt;&lt;/td&gt; &#xA;     &lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;Pascal COMBIER&lt;/p&gt;&lt;/td&gt; &#xA;     &lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;Fix issues&lt;/p&gt;&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;   &lt;/tbody&gt; &#xA;  &lt;/table&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;_introduction&#34;&gt;Introduction&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;plain-common-lisp is a lightweight framework created to make it easier for software developers to develop and distribute &lt;a href=&#34;https://common-lisp.net&#34;&gt;Common Lisp&lt;/a&gt;â€™s applications on Microsoft Windows:&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;olist arabic&#34;&gt; &#xA;   &lt;ol class=&#34;arabic&#34;&gt; &#xA;    &lt;li&gt; &lt;p&gt;Download the &lt;a href=&#34;https://github.com/pascalcombier/plain-common-lisp/releases&#34;&gt;latest release&lt;/a&gt; of plain-common-lisp&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;Extract the archive in your workspace&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;Done: you have a decent &lt;a href=&#34;https://raw.githubusercontent.com/pascalcombier/plain-common-lisp/main/#bookmark-quicklisp&#34;&gt;Quicklisp-enabled&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/pascalcombier/plain-common-lisp/main/#bookmark-slime&#34;&gt;SLIME-compatible&lt;/a&gt; Common Lispâ€™s distribution on Windows!&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;/ol&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;imageblock&#34;&gt; &#xA;   &lt;div class=&#34;content&#34;&gt; &#xA;    &lt;img src=&#34;https://raw.githubusercontent.com/pascalcombier/plain-common-lisp/main/docs/images/readme/03-workspace-directory-highlight.png&#34; alt=&#34;screenshot&#34;&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;imageblock&#34;&gt; &#xA;   &lt;div class=&#34;content&#34;&gt; &#xA;    &lt;img src=&#34;https://raw.githubusercontent.com/pascalcombier/plain-common-lisp/main/docs/images/readme/06-repl.png&#34; alt=&#34;screenshot&#34;&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;At this point, the Common Lispâ€™s REPL is ready, and the user can already work with all &lt;a href=&#34;https://www.quicklisp.org/beta/releases.html&#34;&gt;the third-party libraries&lt;/a&gt; available from Quicklisp! This makes Common Lisp a good candidate for writing &lt;a href=&#34;http://fare.tunes.org/files/asdf3/asdf3-2014.html&#34;&gt;small programs&lt;/a&gt; and &lt;a href=&#34;http://fare.tunes.org/files/asdf3/scripting-slides.pdf&#34;&gt;utilities&lt;/a&gt;. Thousands of Common Lispâ€™s libraries are available, to give an example, one can install a HTTP library and start to use it immediately:&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;imageblock&#34;&gt; &#xA;   &lt;div class=&#34;content&#34;&gt; &#xA;    &lt;img src=&#34;https://raw.githubusercontent.com/pascalcombier/plain-common-lisp/main/docs/images/readme/07-winhttp-highlight.png&#34; alt=&#34;screenshot&#34;&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;The changes are persistent: the installed libraries will be available after a restart.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;imageblock&#34;&gt; &#xA;   &lt;div class=&#34;content&#34;&gt; &#xA;    &lt;img src=&#34;https://raw.githubusercontent.com/pascalcombier/plain-common-lisp/main/docs/images/readme/08-next-startup-highlight.png&#34; alt=&#34;screenshot&#34;&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;plain-common-lisp is basically a ready-to-use distribution of &lt;a href=&#34;http://www.sbcl.org&#34;&gt;SBCL&lt;/a&gt; and &lt;a href=&#34;http://blog.quicklisp.org&#34;&gt;Quicklisp&lt;/a&gt;. The distribution is small and only contains a few files.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;listingblock&#34;&gt; &#xA;   &lt;div class=&#34;content&#34;&gt; &#xA;    &lt;pre class=&#34;highlight&#34;&gt;&lt;code&gt;plain-common-lisp&#xA;â”‚   plain-common-lisp.exe&#xA;â”‚   plain-common-lisp-help.txt&#xA;â”‚   README.md&#xA;â”œâ”€â”€â”€applications&#xA;â”œâ”€â”€â”€cache&#xA;â”œâ”€â”€â”€configs&#xA;â”‚       plain-common-lisp.cfg&#xA;â”œâ”€â”€â”€sources&#xA;â”‚   â””â”€â”€â”€lisp&#xA;â”‚           pcl-loader.lisp&#xA;â””â”€â”€â”€third-party&#xA;    â”œâ”€â”€â”€binaries&#xA;    â”‚   â”‚   sbcl.core&#xA;    â”‚   â”‚   sbcl.exe&#xA;    â”‚   â””â”€â”€â”€contrib (SBCL&#39;s fasl files)&#xA;    â””â”€â”€â”€quicklisp&#xA;            quicklisp.lisp&lt;/code&gt;&lt;/pre&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;To keep the plain-common-lisp archive small, Quicklisp is not included. For that reason, the first startup might be a little bit slow because plain-common-lisp will:&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;ulist&#34;&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt; &lt;p&gt;Download and install the last version of Quicklisp from the Internet&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;Compile the Lisp code and store the compilation results into the &#34;cache&#34; directory&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;/ul&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;The following executions should be much faster.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;imageblock&#34;&gt; &#xA;   &lt;div class=&#34;content&#34;&gt; &#xA;    &lt;img src=&#34;https://raw.githubusercontent.com/pascalcombier/plain-common-lisp/main/docs/images/readme/01-workspace-directory.png&#34; alt=&#34;screenshot&#34;&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;imageblock&#34;&gt; &#xA;   &lt;div class=&#34;content&#34;&gt; &#xA;    &lt;img src=&#34;https://raw.githubusercontent.com/pascalcombier/plain-common-lisp/main/docs/images/readme/02-workspace-cache-empty.png&#34; alt=&#34;screenshot&#34;&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;imageblock&#34;&gt; &#xA;   &lt;div class=&#34;content&#34;&gt; &#xA;    &lt;img src=&#34;https://raw.githubusercontent.com/pascalcombier/plain-common-lisp/main/docs/images/readme/03-workspace-directory-highlight.png&#34; alt=&#34;screenshot&#34;&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;imageblock&#34;&gt; &#xA;   &lt;div class=&#34;content&#34;&gt; &#xA;    &lt;img src=&#34;https://raw.githubusercontent.com/pascalcombier/plain-common-lisp/main/docs/images/readme/04-first-execution.png&#34; alt=&#34;screenshot&#34;&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;imageblock&#34;&gt; &#xA;   &lt;div class=&#34;content&#34;&gt; &#xA;    &lt;img src=&#34;https://raw.githubusercontent.com/pascalcombier/plain-common-lisp/main/docs/images/readme/05-workspace-cache-populated.png&#34; alt=&#34;screenshot&#34;&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;imageblock&#34;&gt; &#xA;   &lt;div class=&#34;content&#34;&gt; &#xA;    &lt;img src=&#34;https://raw.githubusercontent.com/pascalcombier/plain-common-lisp/main/docs/images/readme/06-repl.png&#34; alt=&#34;screenshot&#34;&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;_examples&#34;&gt;Examples&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;This chapter will describe how to use the plain-common-lisp project to develop and distribute Common Lisp applications. All the examples can be downloaded from &lt;a href=&#34;https://github.com/pascalcombier/plain-common-lisp/releases&#34;&gt;the releases area&lt;/a&gt; of plain-common-lisp.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;_console_hello_world&#34;&gt;Console Hello World!&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;Letâ€™s write a &lt;em&gt;Hello-World&lt;/em&gt; application with plain-common-lisp. To do that, one just need to extract the last release of plain-common-lisp project:&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;imageblock&#34;&gt; &#xA;    &lt;div class=&#34;content&#34;&gt; &#xA;     &lt;img src=&#34;https://raw.githubusercontent.com/pascalcombier/plain-common-lisp/main/docs/images/hello-world/01-plain-common-lisp-directory.png&#34; alt=&#34;screenshot&#34;&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;The &#34;applications&#34; directory is initially empty:&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;imageblock&#34;&gt; &#xA;    &lt;div class=&#34;content&#34;&gt; &#xA;     &lt;img src=&#34;https://raw.githubusercontent.com/pascalcombier/plain-common-lisp/main/docs/images/hello-world/02-applications-directory-empty.png&#34; alt=&#34;screenshot&#34;&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;One first need to create a directory &#34;hello-world&#34; to store the files for the application &#34;hello-world&#34;.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;imageblock&#34;&gt; &#xA;    &lt;div class=&#34;content&#34;&gt; &#xA;     &lt;img src=&#34;https://raw.githubusercontent.com/pascalcombier/plain-common-lisp/main/docs/images/hello-world/03-applications-directory-non-empty.png&#34; alt=&#34;screenshot&#34;&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;imageblock&#34;&gt; &#xA;    &lt;div class=&#34;content&#34;&gt; &#xA;     &lt;img src=&#34;https://raw.githubusercontent.com/pascalcombier/plain-common-lisp/main/docs/images/hello-world/04-applications-directory-hello-world.png&#34; alt=&#34;screenshot&#34;&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;Each application contains a directory named &#34;systems&#34;. This directory must contain at least one ASDF system. Nothing specific to plain-common-lisp here, this structure is common to most Common Lispâ€™s projects.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;The optional &#34;third-party&#34; directory is not used in this example. It can be used to store third-party systems and third-party binaries (i.e. DLL files).&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;imageblock&#34;&gt; &#xA;    &lt;div class=&#34;content&#34;&gt; &#xA;     &lt;img src=&#34;https://raw.githubusercontent.com/pascalcombier/plain-common-lisp/main/docs/images/hello-world/05-applications-directory-hello-world-sources.png&#34; alt=&#34;screenshot&#34;&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;The file &#34;hello-world.asd&#34; defines the way to compile the source code of the application. The format is &lt;a href=&#34;https://asdf.common-lisp.dev/asdf.html=The-defsystem-form&#34;&gt;documented in the ASDF project&lt;/a&gt;.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;listingblock&#34;&gt; &#xA;    &lt;div class=&#34;content&#34;&gt; &#xA;     &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;;;; +----------+-------------------------------------------------------+&#xA;;;; | Info     | Value                                                 |&#xA;;;; +----------+-------------------------------------------------------+&#xA;;;; | Filename | hello-world.asd                                       |&#xA;;;; | Project  | plain-common-lisp-examples                            |&#xA;;;; +------------------------------------------------------------------+&#xA;&#xA;(asdf:defsystem #:hello-world&#xA;    :description &#34;Hello world for plain-common-lisp&#34;&#xA;    :author      &#34;Pascal COMBIER&#34;&#xA;    :license     &#34;BSD&#34;&#xA;    :components&#xA;     ((:file &#34;package&#34;)&#xA;      (:file &#34;hello-world&#34; :depends-on (&#34;package&#34;))))&lt;/code&gt;&lt;/pre&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;The &#34;package.lisp&#34; file describe the package &#34;hello-world&#34; which exports the &#34;main&#34; function:&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;listingblock&#34;&gt; &#xA;    &lt;div class=&#34;content&#34;&gt; &#xA;     &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;;;; +----------+-------------------------------------------------------+&#xA;;;; | Info     | Value                                                 |&#xA;;;; +----------+-------------------------------------------------------+&#xA;;;; | Filename | package.lisp                                          |&#xA;;;; | Project  | plain-common-lisp-examples                            |&#xA;;;; +----------+-------------------------------------------------------+&#xA;&#xA;(defpackage #:hello-world&#xA;  (:use&#xA;   #:common-lisp)&#xA;  (:export #:main))&lt;/code&gt;&lt;/pre&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;The file &#34;hello-world.lisp&#34; implements the &#34;main&#34; function.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;listingblock&#34;&gt; &#xA;    &lt;div class=&#34;content&#34;&gt; &#xA;     &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;;;; +----------+-------------------------------------------------------+&#xA;;;; | Info     | Value                                                 |&#xA;;;; +----------+-------------------------------------------------------+&#xA;;;; | Filename | hello-world.lisp                                      |&#xA;;;; | Project  | plain-common-lisp-examples                            |&#xA;;;; +----------+-------------------------------------------------------+&#xA;&#xA;(in-package :hello-world)&#xA;&#xA;;;--------------------------------------------------------------------;;&#xA;;; IMPLEMENTATION                                                     ;;&#xA;;;--------------------------------------------------------------------;;&#xA;&#xA;(defun main ()&#xA;  (format t &#34;Hello World!~%&#34;))&lt;/code&gt;&lt;/pre&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;Itâ€™s trivial to test such application because all the applications in the &#34;applications&#34; directory are automatically registered to ASDF at plain-common-lispâ€™s startup:&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;imageblock&#34;&gt; &#xA;    &lt;div class=&#34;content&#34;&gt; &#xA;     &lt;img src=&#34;https://raw.githubusercontent.com/pascalcombier/plain-common-lisp/main/docs/images/hello-world/06-application-hello-world-test-highlight.png&#34; alt=&#34;screenshot&#34;&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;To distribute this application, one way could be to distribute it with its source code. An easy approach would be to &lt;em&gt;duplicate&lt;/em&gt; &#34;plain-common-lisp.exe&#34; into &#34;hello-world.exe&#34; and &lt;em&gt;duplicate&lt;/em&gt; &#34;configs/plain-common-lisp.cfg&#34; into &#34;configs/hello-world.cfg&#34;.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;Note that &#34;plain-common-lisp.exe&#34; is actually a copy of the executable from &lt;a href=&#34;https://github.com/pascalcombier/plain-starter&#34;&gt;the plain-starter project&lt;/a&gt;.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;imageblock&#34;&gt; &#xA;    &lt;div class=&#34;content&#34;&gt; &#xA;     &lt;img src=&#34;https://raw.githubusercontent.com/pascalcombier/plain-common-lisp/main/docs/images/hello-world/07-application-hello-world-duplicate-exe.png&#34; alt=&#34;screenshot&#34;&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;imageblock&#34;&gt; &#xA;    &lt;div class=&#34;content&#34;&gt; &#xA;     &lt;img src=&#34;https://raw.githubusercontent.com/pascalcombier/plain-common-lisp/main/docs/images/hello-world/08-application-hello-world-duplicate-cfg.png&#34; alt=&#34;screenshot&#34;&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;The last step would be to create an application starter file in the applications directory.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;imageblock&#34;&gt; &#xA;    &lt;div class=&#34;content&#34;&gt; &#xA;     &lt;img src=&#34;https://raw.githubusercontent.com/pascalcombier/plain-common-lisp/main/docs/images/hello-world/09-application-hello-world-starter.png&#34; alt=&#34;screenshot&#34;&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;listingblock&#34;&gt; &#xA;    &lt;div class=&#34;title&#34;&gt;&#xA;     hello-world.lisp&#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;content&#34;&gt; &#xA;     &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;(asdf:load-system &#34;hello-world&#34;)&#xA;(hello-world:main)&lt;/code&gt;&lt;/pre&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;Executing &#34;hello-world.exe&#34; will have the behavior that everyone expects:&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;imageblock&#34;&gt; &#xA;    &lt;div class=&#34;content&#34;&gt; &#xA;     &lt;img src=&#34;https://raw.githubusercontent.com/pascalcombier/plain-common-lisp/main/docs/images/hello-world/10-application-hello-world-exe.png&#34; alt=&#34;screenshot&#34;&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;imageblock&#34;&gt; &#xA;    &lt;div class=&#34;content&#34;&gt; &#xA;     &lt;img src=&#34;https://raw.githubusercontent.com/pascalcombier/plain-common-lisp/main/docs/images/hello-world/11-application-hello-world-execution.png&#34; alt=&#34;screenshot&#34;&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;The final step before creating a ZIP file and distribute this application would be to delete the unnecessary files: &#34;plain-common-lisp.exe&#34;, &#34;configs/plain-common-lisp.cfg&#34; and remove all the files from the cache directory.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;imageblock&#34;&gt; &#xA;    &lt;div class=&#34;content&#34;&gt; &#xA;     &lt;img src=&#34;https://raw.githubusercontent.com/pascalcombier/plain-common-lisp/main/docs/images/hello-world/12-application-hello-world-final.png&#34; alt=&#34;screenshot&#34;&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;A second way would be to distribute this application as a standalone binary file, without any source code attached. This can be achieved by using the &lt;a href=&#34;http://www.sbcl.org/manual/=Function-sb_002dext-save_002dlisp_002dand_002ddie)&#34;&gt;save-lisp-and-die&lt;/a&gt; function from SBCL.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;listingblock&#34;&gt; &#xA;    &lt;div class=&#34;content&#34;&gt; &#xA;     &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;(sb-ext:save-lisp-and-die &#34;hello-world-standalone.exe&#34; :toplevel #&#39;hello-world:main :executable t :compression t)&lt;/code&gt;&lt;/pre&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;Note that the &#34;compression&#34; flag is not mandatory here. Itâ€™s a SBCL feature which is not always enabled on the official SBCL binaries for Windows. The SBCL binaries of plain-common-lispâ€™s always have this feature activated, allowing to trade a little bit of startup time to get a smaller binary size. Note that since SBCL 2.2.6, &lt;a href=&#34;https://github.com/facebook/zstd&#34;&gt;the zstd from Facebook&lt;/a&gt; is used for the compression. A compressed hello-world will typically take 12.5 MiB and the startup time be negligible.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;imageblock&#34;&gt; &#xA;    &lt;div class=&#34;content&#34;&gt; &#xA;     &lt;img src=&#34;https://raw.githubusercontent.com/pascalcombier/plain-common-lisp/main/docs/images/hello-world/13-application-hello-world-save-lisp-and-die.png&#34; alt=&#34;screenshot&#34;&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;imageblock&#34;&gt; &#xA;    &lt;div class=&#34;content&#34;&gt; &#xA;     &lt;img src=&#34;https://raw.githubusercontent.com/pascalcombier/plain-common-lisp/main/docs/images/hello-world/14-application-hello-world-standalone.png&#34; alt=&#34;screenshot&#34;&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;imageblock&#34;&gt; &#xA;    &lt;div class=&#34;content&#34;&gt; &#xA;     &lt;img src=&#34;https://raw.githubusercontent.com/pascalcombier/plain-common-lisp/main/docs/images/hello-world/15-application-hello-world-standalone-exec.png&#34; alt=&#34;screenshot&#34;&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;Thatâ€™s it! The application can be distributed to its users.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;It is possible to change the icon present in the executable file without recompiling the program. The cost-free proprietary program &lt;a href=&#34;http://www.angusj.com/resourcehacker/&#34;&gt;Resource Hacker&lt;/a&gt; v4.5.30 has been reported working with plain-common-lispâ€™s executable files.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;imageblock&#34;&gt; &#xA;    &lt;div class=&#34;content&#34;&gt; &#xA;     &lt;img src=&#34;https://raw.githubusercontent.com/pascalcombier/plain-common-lisp/main/docs/images/hello-world/17-application-hello-world-standalone-icon.png&#34; alt=&#34;screenshot&#34;&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;imageblock&#34;&gt; &#xA;    &lt;div class=&#34;content&#34;&gt; &#xA;     &lt;img src=&#34;https://raw.githubusercontent.com/pascalcombier/plain-common-lisp/main/docs/images/hello-world/18-application-hello-world-standalone-icon.png&#34; alt=&#34;screenshot&#34;&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;imageblock&#34;&gt; &#xA;    &lt;div class=&#34;content&#34;&gt; &#xA;     &lt;img src=&#34;https://raw.githubusercontent.com/pascalcombier/plain-common-lisp/main/docs/images/hello-world/19-application-hello-world-standalone-properties.png&#34; alt=&#34;screenshot&#34;&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;_other_examples&#34;&gt;Other examples&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;All the other examples can be downloaded from &lt;a href=&#34;https://github.com/pascalcombier/plain-common-lisp/releases&#34;&gt;the releases area&lt;/a&gt; of plain-common-lisp. For each example, the program &#34;make-standalone-executable.exe&#34; will generate a standalone executable from the provided Lisp sources.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;All the examples should be a little bit slow to start at the first execution. This is perfectly normal because plain-common-lisp will download and install Quicklisp from the internet and compile it. The &#34;cache&#34; directory will then be populated with the results of the compilation. This could take up to a couple of minutes on old systems. The following executions will be much faster. The executions from the standalone executables will be quite fast.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;sect3&#34;&gt; &#xA;    &lt;h4 id=&#34;_plain_common_lisp_swank&#34;&gt;plain-common-lisp-swank&lt;/h4&gt; &#xA;    &lt;div class=&#34;imageblock&#34;&gt; &#xA;     &lt;div class=&#34;content&#34;&gt; &#xA;      &lt;img src=&#34;https://raw.githubusercontent.com/pascalcombier/plain-common-lisp/main/docs/images/slime-pcl-install-swank/11-slime-packages.png&#34; alt=&#34;screenshot&#34;&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;This example shows how to integrate plain-common-lisp with GNU Emacs and SLIME. &#34;plain-common-lisp-swank.exe&#34; will start a SWANK server so that SLIME could connect to it and interact with plain-common-lisp. More details are available in a dedicated chapter of this document.&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;sect3&#34;&gt; &#xA;    &lt;h4 id=&#34;_console_hello_world_2&#34;&gt;console-hello-world&lt;/h4&gt; &#xA;    &lt;div class=&#34;imageblock&#34;&gt; &#xA;     &lt;div class=&#34;content&#34;&gt; &#xA;      &lt;img src=&#34;https://raw.githubusercontent.com/pascalcombier/plain-common-lisp/main/docs/images/hello-world/15-application-hello-world-standalone-exec.png&#34; alt=&#34;screenshot&#34;&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;sect3&#34;&gt; &#xA;    &lt;h4 id=&#34;_console_cat&#34;&gt;console-cat&lt;/h4&gt; &#xA;    &lt;div class=&#34;imageblock&#34;&gt; &#xA;     &lt;div class=&#34;content&#34;&gt; &#xA;      &lt;img src=&#34;https://raw.githubusercontent.com/pascalcombier/plain-common-lisp/main/docs/images/examples/example-cat.png&#34; alt=&#34;screenshot&#34;&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;This example shows how to write console applications with plain-common-lisp. Here &#34;cat&#34; refers to &lt;a href=&#34;https://en.wikipedia.org/wiki/Cat_(Unix)&#34;&gt;the cat command from Unix&lt;/a&gt;.&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;sect3&#34;&gt; &#xA;    &lt;h4 id=&#34;_gui_helloworld_win32&#34;&gt;gui-helloworld-win32&lt;/h4&gt; &#xA;    &lt;div class=&#34;imageblock&#34;&gt; &#xA;     &lt;div class=&#34;content&#34;&gt; &#xA;      &lt;img src=&#34;https://raw.githubusercontent.com/pascalcombier/plain-common-lisp/main/docs/images/examples/example-helloworld-win32.png&#34; alt=&#34;screenshot&#34;&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;This example shows how to use &lt;a href=&#34;https://cffi.common-lisp.dev/manual/cffi-manual.html&#34;&gt;CFFI&lt;/a&gt; to access the Win32 API.&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;sect3&#34;&gt; &#xA;    &lt;h4 id=&#34;_gui_helloworld_iup&#34;&gt;gui-helloworld-iup&lt;/h4&gt; &#xA;    &lt;div class=&#34;imageblock&#34;&gt; &#xA;     &lt;div class=&#34;content&#34;&gt; &#xA;      &lt;img src=&#34;https://raw.githubusercontent.com/pascalcombier/plain-common-lisp/main/docs/images/examples/example-helloworld-iup.png&#34; alt=&#34;screenshot&#34;&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;This example shows how to use the &lt;a href=&#34;https://github.com/klimenko-serj/cl-iup&#34;&gt;CL-IUP package&lt;/a&gt; with plain-common-lisp.&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;sect3&#34;&gt; &#xA;    &lt;h4 id=&#34;_gui_paint_tk&#34;&gt;gui-paint-tk&lt;/h4&gt; &#xA;    &lt;div class=&#34;imageblock&#34;&gt; &#xA;     &lt;div class=&#34;content&#34;&gt; &#xA;      &lt;img src=&#34;https://raw.githubusercontent.com/pascalcombier/plain-common-lisp/main/docs/images/examples/example-paint-tk.png&#34; alt=&#34;screenshot&#34;&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;This example shows how to use the &lt;a href=&#34;http://www.peter-herth.de/ltk/&#34;&gt;ltk library&lt;/a&gt; with plain-common-lisp. LTK will use the Tk binaries from Tcl/Tk and will require the program &#34;wish.exe&#34; to be shipped with the application. &#34;wish.exe&#34; is included with the example.&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;sect3&#34;&gt; &#xA;    &lt;h4 id=&#34;_gui_ftw_tetris&#34;&gt;gui-ftw-tetris&lt;/h4&gt; &#xA;    &lt;div class=&#34;imageblock&#34;&gt; &#xA;     &lt;div class=&#34;content&#34;&gt; &#xA;      &lt;img src=&#34;https://raw.githubusercontent.com/pascalcombier/plain-common-lisp/main/docs/images/examples/example-tetris.png&#34; alt=&#34;screenshot&#34;&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;This example shows how to use the &lt;a href=&#34;https://github.com/fjames86/ftw/tree/master/examples/tetris&#34;&gt;ftw library&lt;/a&gt; with plain-common-lisp.&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;sect3&#34;&gt; &#xA;    &lt;h4 id=&#34;_gui_opengl&#34;&gt;gui-opengl&lt;/h4&gt; &#xA;    &lt;div class=&#34;imageblock&#34;&gt; &#xA;     &lt;div class=&#34;content&#34;&gt; &#xA;      &lt;img src=&#34;https://raw.githubusercontent.com/pascalcombier/plain-common-lisp/main/docs/images/examples/example-opengl.png&#34; alt=&#34;screenshot&#34;&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;This example simply integrates an example from the &#34;cl-glut-examples&#34; available on Quicklisp.&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;_slime_configuration&#34;&gt;SLIME configuration&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;_install_slime_on_gnu_emacs&#34;&gt;Install SLIME on GNU Emacs&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;This chapter is based on a fresh installation of the vanilla GNU Emacs. The default package repository contains an old SLIME version which is not working properly. The third-party repository MELPA contains a good version. The first step is to add this MELPA repository to GNU Emacs.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;Note that SLIME refers to the package for GNU Emacs and SWANK refers to the implementation of a debugging server embedded in the application.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;imageblock&#34;&gt; &#xA;    &lt;div class=&#34;content&#34;&gt; &#xA;     &lt;img src=&#34;https://raw.githubusercontent.com/pascalcombier/plain-common-lisp/main/docs/images/slime-emacs-install-slime/01-emacs-starts.png&#34; alt=&#34;screenshot&#34;&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;Press &lt;code&gt;Alt-x&lt;/code&gt; and then enter the command &lt;code&gt;customize-variable&lt;/code&gt;.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;imageblock&#34;&gt; &#xA;    &lt;div class=&#34;content&#34;&gt; &#xA;     &lt;img src=&#34;https://raw.githubusercontent.com/pascalcombier/plain-common-lisp/main/docs/images/slime-emacs-install-slime/02-customize-variable.png&#34; alt=&#34;screenshot&#34;&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;Input &lt;code&gt;package-archives&lt;/code&gt;.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;imageblock&#34;&gt; &#xA;    &lt;div class=&#34;content&#34;&gt; &#xA;     &lt;img src=&#34;https://raw.githubusercontent.com/pascalcombier/plain-common-lisp/main/docs/images/slime-emacs-install-slime/03-customize-variable-package-archives.png&#34; alt=&#34;screenshot&#34;&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;Click on &lt;code&gt;INS&lt;/code&gt; to insert a new repository:&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;ulist&#34;&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt; &lt;p&gt;Name: MELPA&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;URL: &lt;a href=&#34;https://melpa.org/packages/&#34; class=&#34;bare&#34;&gt;https://melpa.org/packages/&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;imageblock&#34;&gt; &#xA;    &lt;div class=&#34;content&#34;&gt; &#xA;     &lt;img src=&#34;https://raw.githubusercontent.com/pascalcombier/plain-common-lisp/main/docs/images/slime-emacs-install-slime/04-add-melpa.png&#34; alt=&#34;screenshot&#34;&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;Click on &#34;STATE&#34; and then &#34;Save for Future Sessions&#34;.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;imageblock&#34;&gt; &#xA;    &lt;div class=&#34;content&#34;&gt; &#xA;     &lt;img src=&#34;https://raw.githubusercontent.com/pascalcombier/plain-common-lisp/main/docs/images/slime-emacs-install-slime/05-save-package-archives.png&#34; alt=&#34;screenshot&#34;&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;Restart GNU Emacs. This is not techically required but slighly simplier to document.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;imageblock&#34;&gt; &#xA;    &lt;div class=&#34;content&#34;&gt; &#xA;     &lt;img src=&#34;https://raw.githubusercontent.com/pascalcombier/plain-common-lisp/main/docs/images/slime-emacs-install-slime/06-emacs-starts.png&#34; alt=&#34;screenshot&#34;&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;Press &lt;code&gt;Alt-x&lt;/code&gt; and then enter the command &lt;code&gt;list-packages&lt;/code&gt;. Wait a few seconds for the package list to be downloaded.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;imageblock&#34;&gt; &#xA;    &lt;div class=&#34;content&#34;&gt; &#xA;     &lt;img src=&#34;https://raw.githubusercontent.com/pascalcombier/plain-common-lisp/main/docs/images/slime-emacs-install-slime/07-emacs-list-packages.png&#34; alt=&#34;screenshot&#34;&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;Find the MELPA version of &#34;SLIME&#34; and press &lt;code&gt;i&lt;/code&gt; the mark the software for installation.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;imageblock&#34;&gt; &#xA;    &lt;div class=&#34;content&#34;&gt; &#xA;     &lt;img src=&#34;https://raw.githubusercontent.com/pascalcombier/plain-common-lisp/main/docs/images/slime-emacs-install-slime/08-mark-slime-melpa.png&#34; alt=&#34;screenshot&#34;&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;Press &lt;code&gt;x&lt;/code&gt; to start the installation.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;imageblock&#34;&gt; &#xA;    &lt;div class=&#34;content&#34;&gt; &#xA;     &lt;img src=&#34;https://raw.githubusercontent.com/pascalcombier/plain-common-lisp/main/docs/images/slime-emacs-install-slime/09-confirm-install.png&#34; alt=&#34;screenshot&#34;&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;Thatâ€™s done, SLIME is installed on GNU Emacs.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;imageblock&#34;&gt; &#xA;    &lt;div class=&#34;content&#34;&gt; &#xA;     &lt;img src=&#34;https://raw.githubusercontent.com/pascalcombier/plain-common-lisp/main/docs/images/slime-emacs-install-slime/10-slime-install-done.png&#34; alt=&#34;screenshot&#34;&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;_install_swank_in_plain_common_lisp&#34;&gt;Install SWANK in plain-common-lisp&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;This chapter is based on a fresh installation of plain-common-lisp.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;imageblock&#34;&gt; &#xA;    &lt;div class=&#34;content&#34;&gt; &#xA;     &lt;img src=&#34;https://raw.githubusercontent.com/pascalcombier/plain-common-lisp/main/docs/images/slime-pcl-install-swank/01-pcl-fresh-start.png&#34; alt=&#34;screenshot&#34;&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;Install SWANK from Quicklisp with the command &lt;code&gt;(ql:quickload &#34;swank&#34;)&lt;/code&gt;.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;imageblock&#34;&gt; &#xA;    &lt;div class=&#34;content&#34;&gt; &#xA;     &lt;img src=&#34;https://raw.githubusercontent.com/pascalcombier/plain-common-lisp/main/docs/images/slime-pcl-install-swank/02-pcl-quickload-swank.png&#34; alt=&#34;screenshot&#34;&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;One can start a SWANK server with the function &lt;code&gt;(swank:create-server)&lt;/code&gt; which will create a local server. By default, this server will listen on the port 4005. This function will need to be called each time the application is executed.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;imageblock&#34;&gt; &#xA;    &lt;div class=&#34;content&#34;&gt; &#xA;     &lt;img src=&#34;https://raw.githubusercontent.com/pascalcombier/plain-common-lisp/main/docs/images/slime-pcl-install-swank/03-pcl-swank-create-server.png&#34; alt=&#34;screenshot&#34;&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;Create a new Lisp file in the &#34;applications&#34; directory.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;imageblock&#34;&gt; &#xA;    &lt;div class=&#34;content&#34;&gt; &#xA;     &lt;img src=&#34;https://raw.githubusercontent.com/pascalcombier/plain-common-lisp/main/docs/images/slime-pcl-install-swank/04-pcl-create-lisp-file.png&#34; alt=&#34;screenshot&#34;&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;For example, one can write a hello-world function.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;imageblock&#34;&gt; &#xA;    &lt;div class=&#34;content&#34;&gt; &#xA;     &lt;img src=&#34;https://raw.githubusercontent.com/pascalcombier/plain-common-lisp/main/docs/images/slime-pcl-install-swank/05-create-hello-word.png&#34; alt=&#34;screenshot&#34;&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;At this stage, letâ€™s try to make Emacs connect to the plain-common-lisp process. Press &lt;code&gt;Alt-x&lt;/code&gt; and type the command &lt;code&gt;slime-connect&lt;/code&gt;.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;imageblock&#34;&gt; &#xA;    &lt;div class=&#34;content&#34;&gt; &#xA;     &lt;img src=&#34;https://raw.githubusercontent.com/pascalcombier/plain-common-lisp/main/docs/images/slime-pcl-install-swank/06-slime-connect.png&#34; alt=&#34;screenshot&#34;&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;When prompted about which host to use, just validate: the default host &lt;code&gt;localhost&lt;/code&gt; is perfectly fine.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;imageblock&#34;&gt; &#xA;    &lt;div class=&#34;content&#34;&gt; &#xA;     &lt;img src=&#34;https://raw.githubusercontent.com/pascalcombier/plain-common-lisp/main/docs/images/slime-pcl-install-swank/07-slime-connect-localhost.png&#34; alt=&#34;screenshot&#34;&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;When prompted about which port to use, just validate: the default port &lt;code&gt;4005&lt;/code&gt; is perfectly fine.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;imageblock&#34;&gt; &#xA;    &lt;div class=&#34;content&#34;&gt; &#xA;     &lt;img src=&#34;https://raw.githubusercontent.com/pascalcombier/plain-common-lisp/main/docs/images/slime-pcl-install-swank/08-slime-connect-port.png&#34; alt=&#34;screenshot&#34;&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;Thatâ€™s it, SLIME is started and connected to the plain-common-lisp process.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;imageblock&#34;&gt; &#xA;    &lt;div class=&#34;content&#34;&gt; &#xA;     &lt;img src=&#34;https://raw.githubusercontent.com/pascalcombier/plain-common-lisp/main/docs/images/slime-pcl-install-swank/09-slime-started.png&#34; alt=&#34;screenshot&#34;&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;To compile the &lt;code&gt;hello-world&lt;/code&gt; function and send it to plain-common-lisp, it is simply needed to type &lt;code&gt;Ctrl-c Ctrl-c&lt;/code&gt;. The result of the compilation will appear in the terminal below the source code. One can directly test the hello-world function by jumping in the REPL and typing the Common Lisp code &lt;code&gt;(hello-world)&lt;/code&gt;.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;imageblock&#34;&gt; &#xA;    &lt;div class=&#34;content&#34;&gt; &#xA;     &lt;img src=&#34;https://raw.githubusercontent.com/pascalcombier/plain-common-lisp/main/docs/images/slime-pcl-install-swank/10-slime-interaction.png&#34; alt=&#34;screenshot&#34;&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;This is exactly why it is named &lt;em&gt;interactive&lt;/em&gt;. The programmer write a function in its source code and test it immediately. If the function is working, the developer can save the file and then write a new function. The development of the program is done step-by-step in a incremental way.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;In most of Common Lispâ€™s programs there are different packages. By default, SLIME starts in the standard package &lt;code&gt;common-lisp-user&lt;/code&gt; also named &lt;code&gt;CL-USER&lt;/code&gt;. All the functions will be created in this package. If one want to switch to another package, he can:&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;ulist&#34;&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt; &lt;p&gt;Press &lt;code&gt;Alt-x&lt;/code&gt; and then type the command &lt;code&gt;slime-repl-set-package&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Use the shortcut &lt;code&gt;Ctrl-c&lt;/code&gt; then &lt;code&gt;Alt-p&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;The package names can be automatically completed when pressing the &lt;code&gt;TAB&lt;/code&gt; key.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;In the example below, we have created a package &#34;hello&#34; exporting the &#34;main&#34; function. Then we asked SLIME to jump inside this package. At this point, we implemented the &#34;main&#34; function and tested it.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;imageblock&#34;&gt; &#xA;    &lt;div class=&#34;content&#34;&gt; &#xA;     &lt;img src=&#34;https://raw.githubusercontent.com/pascalcombier/plain-common-lisp/main/docs/images/slime-pcl-install-swank/11-slime-packages.png&#34; alt=&#34;screenshot&#34;&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;_make_the_slime_configuration_persistent&#34;&gt;Make the SLIME configuration persistent&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;A full example is available and can be downloaded from &lt;a href=&#34;https://github.com/pascalcombier/plain-common-lisp/releases&#34;&gt;the releases area&lt;/a&gt; of plain-common-lisp. We can make the assumption that the SWANK server might not be needed when delivering the application to the users. So it could be reasonable to consider 2 environments:&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;ulist&#34;&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt; &lt;p&gt;Development environment, starting SWANK server automatically&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Production environment, without any SWANK server&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;Creating a new environment simply means duplicating 2 files. Duplicate &#34;plain-common-lisp.exe&#34; into &#34;plain-common-lisp-dev.exe&#34;. Duplicate &#34;configs/plain-common-lisp.cfg&#34; into &#34;configs/plain-common-lisp-dev.cfg&#34;.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;imageblock&#34;&gt; &#xA;    &lt;div class=&#34;content&#34;&gt; &#xA;     &lt;img src=&#34;https://raw.githubusercontent.com/pascalcombier/plain-common-lisp/main/docs/images/slime-persistent/01-dev-environment.png&#34; alt=&#34;screenshot&#34;&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;imageblock&#34;&gt; &#xA;    &lt;div class=&#34;content&#34;&gt; &#xA;     &lt;img src=&#34;https://raw.githubusercontent.com/pascalcombier/plain-common-lisp/main/docs/images/slime-persistent/02-dev-config.png&#34; alt=&#34;screenshot&#34;&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;Then one simply need to write the &#34;plain-common-lisp-dev&#34; application startup file named &#34;plain-common-lisp-dev.lisp&#34;.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;imageblock&#34;&gt; &#xA;    &lt;div class=&#34;content&#34;&gt; &#xA;     &lt;img src=&#34;https://raw.githubusercontent.com/pascalcombier/plain-common-lisp/main/docs/images/slime-persistent/03-applications.png&#34; alt=&#34;screenshot&#34;&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;listingblock&#34;&gt; &#xA;    &lt;div class=&#34;title&#34;&gt;&#xA;     plain-common-lisp-dev.lisp&#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;content&#34;&gt; &#xA;     &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;(asdf:load-system &#34;swank&#34;)&#xA;(swank:create-server)&lt;/code&gt;&lt;/pre&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;When the program &#34;plain-common-lisp-dev.exe&#34; will be executed, it will try to load and execute the file &#34;applicationsplain-common-lisp-dev.lisp&#34;. This startup file will load SWANK and create a server.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;After that, we can just run the application &#34;plain-common-lisp-dev.exe&#34; and connect with SLIME from GNU Emacs. The SWANK server is started automatically.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;imageblock&#34;&gt; &#xA;    &lt;div class=&#34;content&#34;&gt; &#xA;     &lt;img src=&#34;https://raw.githubusercontent.com/pascalcombier/plain-common-lisp/main/docs/images/slime-persistent/04-slime.png&#34; alt=&#34;screenshot&#34;&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;_technical_information&#34;&gt;Technical information&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;_application_startup&#34;&gt;Application startup&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;To explain how plain-common-lispâ€™s application, itâ€™s convenient to describe how the &#34;hello-world&#34; example is started.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;olist arabic&#34;&gt; &#xA;    &lt;ol class=&#34;arabic&#34;&gt; &#xA;     &lt;li&gt; &lt;p&gt;The user starts &#34;hello-world.exe&#34;&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;hello-world.exe will look for &#34;config/hello-world.cfg&#34;, register the environment variable PCL_PROGNAME as &#34;hello-world&#34; and starts sbcl.exe&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;sbcl.exe will initialize plain-common-lisp with the file &#34;sources/pcl-loader.lisp&#34;&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;pcl-loader.lisp will start &#34;applications%PCL_PROGNAME%.lisp&#34;, in our case &#34;applicationshello-world.lisp&#34;&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;/ol&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;This way seems complex but has several advantages:&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;ulist&#34;&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt; &lt;p&gt;One plain-common-lisp directory can host several applications sharing a common source code.&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;All the applications use the same sbcl.exe, sbcl.core and contribs, making the system simple to maintain and update.&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;_sbcl_changes&#34;&gt;SBCL changes&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;plain-common-lisp does not work completely with the vanilla SBCL, a few changes have been made on SBCL:&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;ulist&#34;&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt; &lt;p&gt;The additional hook sb-ext:*pre-foreign-init-hooks* has been added. It is called just before the initialization of the foreign module, allowing DLL files to be relocated at runtime, and therefore allowing plain-common-lispâ€™s applications to be moved accross the disk.&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;A manifest file has been added to the binary file, allowing plain-common-lispâ€™s GUIs to enable Windows visual styles.&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;The default icon of sbcl.exe has been replaced with plainstarterâ€™s icon, to make it clear that the 2 binaries are different.&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;The compression option has been activated (it does not seem to be activated in all the builds for Windows).&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Static linking has been activated to avoid the need for libzstd.dll.&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;_known_issues&#34;&gt;Known issues&lt;/h3&gt; &#xA;   &lt;div class=&#34;sect3&#34;&gt; &#xA;    &lt;h4 id=&#34;_slime_does_not_work_when_spawning_plain_common_lisp_executables&#34;&gt;SLIME does not work when spawning plain-common-lisp executables&lt;/h4&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;This method is unfortunately not currently supported. The reason is technical, the SWANK package from Quicklisp implements its own FASL binaries relocation scheme. It does it in a way which is not compatible with plain-common-lisp.&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;imageblock&#34;&gt; &#xA;     &lt;div class=&#34;content&#34;&gt; &#xA;      &lt;img src=&#34;https://raw.githubusercontent.com/pascalcombier/plain-common-lisp/main/docs/images/slime-known-issues.png&#34; alt=&#34;screenshot&#34;&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;The FASL files from plain-common-lisp and SWANK being located in different directories, plain-common-lisp startup meets an error when loading SWANK. If one successfuly modify SWANK so that he donâ€™t implement any custom FASL redirection, this issue would probably be solved.&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;_external_references&#34;&gt;External references&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;ulist&#34;&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt; &lt;p&gt;&lt;a id=&#34;bookmark-quicklisp&#34;&gt;&lt;/a&gt;&lt;a href=&#34;http://blog.quicklisp.org&#34;&gt;Quicklisp&lt;/a&gt; is the fantastic library manager for Common Lisp developped by &lt;a href=&#34;https://www.xach.com&#34;&gt;Zach Beane&lt;/a&gt;. Note that Quicklisp is unaffiliated to plain-common-lispâ€™s project.&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;&lt;a id=&#34;bookmark-slime&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://slime.common-lisp.dev/doc/html&#34;&gt;SLIME&lt;/a&gt; is a powerful mode for &lt;a href=&#34;https://www.gnu.org/software/emacs&#34;&gt;GNU Emacs&lt;/a&gt; allowing to write programs in an interactive and incremental way.&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://asdf.common-lisp.dev&#34;&gt;ASDF&lt;/a&gt; is the de-facto standard tool to build Common Lisp software. It has been maintained &lt;a href=&#34;http://fare.tunes.org/files/asdf3/asdf3-2014.pdf&#34;&gt;over 10 years&lt;/a&gt; and &lt;a href=&#34;https://fare.livejournal.com/176185.html&#34;&gt;greatly documented&lt;/a&gt; by the outstanding FranÃ§ois-RenÃ© Rideau.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;/ul&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt;</summary>
  </entry>
</feed>