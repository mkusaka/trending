<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Common Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-07-22T01:30:02Z</updated>
  <subtitle>Daily Trending of Common Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>3b/3bmd</title>
    <updated>2024-07-22T01:30:02Z</updated>
    <id>tag:github.com,2024-07-22:/3b/3bmd</id>
    <link href="https://github.com/3b/3bmd" rel="alternate"></link>
    <summary type="html">&lt;p&gt;markdown processor in CL using esrap parser&lt;/p&gt;&lt;hr&gt;&lt;p&gt;Common Lisp &lt;a href=&#34;http://daringfireball.net/projects/markdown/&#34;&gt;Markdown&lt;/a&gt; -&amp;gt; html converter, using &lt;a href=&#34;https://github.com/scymtym/esrap&#34;&gt;esrap&lt;/a&gt; for parsing, and grammar based on &lt;a href=&#34;https://github.com/jgm/peg-markdown&#34;&gt;peg-markdown&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Currently a bit slow and uses lots of RAM for large documents (particularly when using the top-level &lt;code&gt;doc&lt;/code&gt; parser instead of reading documents as a sequence of &lt;code&gt;block&lt;/code&gt;s), but seems to handle the tests from &lt;a href=&#34;https://github.com/jgm/peg-markdown&#34;&gt;peg-markdown&lt;/a&gt; reasonably well.&lt;/p&gt; &#xA;&lt;p&gt;Note that this library processes &lt;a href=&#34;http://daringfireball.net/projects/markdown/&#34;&gt;Markdown&lt;/a&gt; and not the newer (and better specified) &lt;a href=&#34;https://commonmark.org/&#34;&gt;CommonMark&lt;/a&gt;, so may not behave quite as expected for people used to the latter. See &lt;a href=&#34;https://github.com/3b/3bmd/issues/53&#34;&gt;issue #53&lt;/a&gt; for some discussion on why CommonMark support isn&#39;t currently planned, and would probably be in a separate library if it were implemented.&lt;/p&gt; &#xA;&lt;p&gt;todo:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;clean up API&lt;/li&gt; &#xA; &lt;li&gt;figure out how to automate testing (closure-html + &lt;code&gt;tree-equal&lt;/code&gt;? need some way to normalize whitespace though), and add tests&lt;/li&gt; &#xA; &lt;li&gt;optimize grammar&lt;/li&gt; &#xA; &lt;li&gt;optimize esrap&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Extensions:&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;If &lt;code&gt;3bmd:*smart-quotes*&lt;/code&gt; is non-&lt;code&gt;NIL&lt;/code&gt; while parsing, some extra patterns will be recognized and converted as follows (outside code blocks):&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;&#39;&lt;/code&gt;single quoted strings&lt;code&gt;&#39;&lt;/code&gt; -&amp;gt; &lt;code&gt;&amp;amp;lsquo;&lt;/code&gt; ... &lt;code&gt;&amp;amp;rsquo;&lt;/code&gt; like ‘single quoted string’ (with slightly ugly heuristics to avoid contractions)&lt;/li&gt; &#xA;   &lt;li&gt;other single quotes &lt;code&gt;&#39;&lt;/code&gt; -&amp;gt; &lt;code&gt;&amp;amp;apos;&lt;/code&gt; &#39;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;&#34;&lt;/code&gt;double quoted strings&lt;code&gt;&#34;&lt;/code&gt; -&amp;gt; &lt;code&gt;&amp;amp;ldquo;&lt;/code&gt; ... &lt;code&gt;&amp;amp;rdquo;&lt;/code&gt;, like “double quoted string”&lt;/li&gt; &#xA;   &lt;li&gt;ellipsis &lt;code&gt;...&lt;/code&gt; or &lt;code&gt;. . .&lt;/code&gt; -&amp;gt; &lt;code&gt;&amp;amp;hellip;&lt;/code&gt;, …&lt;/li&gt; &#xA;   &lt;li&gt;en dash &lt;code&gt;--&lt;/code&gt; -&amp;gt; &lt;code&gt;&amp;amp;ndash;&lt;/code&gt;, –&lt;/li&gt; &#xA;   &lt;li&gt;em dash &lt;code&gt;---&lt;/code&gt; -&amp;gt; &lt;code&gt;&amp;amp;mdash;&lt;/code&gt;, —&lt;/li&gt; &#xA;   &lt;li&gt;left right arrow &lt;code&gt;&amp;lt;-&amp;gt;&lt;/code&gt; -&amp;gt; &lt;code&gt;&amp;amp;harr;&lt;/code&gt;, ↔&lt;/li&gt; &#xA;   &lt;li&gt;left arrow &lt;code&gt;&amp;lt;-&lt;/code&gt; -&amp;gt; &lt;code&gt;&amp;amp;larr;&lt;/code&gt;, ←&lt;/li&gt; &#xA;   &lt;li&gt;right arrow &lt;code&gt;-&amp;gt;&lt;/code&gt; -&amp;gt; &lt;code&gt;&amp;amp;rarr;&lt;/code&gt;, →&lt;/li&gt; &#xA;   &lt;li&gt;left right double arrow &lt;code&gt;&amp;lt;=&amp;gt;&lt;/code&gt; -&amp;gt; &lt;code&gt;&amp;amp;hArr&lt;/code&gt;, ⇔&lt;/li&gt; &#xA;   &lt;li&gt;left double arrow &lt;code&gt;&amp;lt;=&lt;/code&gt; -&amp;gt; &lt;code&gt;&amp;amp;lArr;&lt;/code&gt;, ⇐&lt;/li&gt; &#xA;   &lt;li&gt;right double arrow &lt;code&gt;=&amp;gt;&lt;/code&gt; -&amp;gt; &lt;code&gt;&amp;amp;rArr;&lt;/code&gt;, ⇒&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Loading &lt;code&gt;3bmd-ext-wiki-links.asd&lt;/code&gt; adds support for parsing simple &lt;code&gt;[[]]&lt;/code&gt; style wiki links: If &lt;code&gt;3bmd-wiki:*wiki-links*&lt;/code&gt; is non-&lt;code&gt;NIL&lt;/code&gt; while parsing, wiki links of the form &lt;code&gt;[[foo]]&lt;/code&gt; or &lt;code&gt;[[foo|...]]&lt;/code&gt; will be parsed, where &lt;code&gt;...&lt;/code&gt; is one or more optional args separated by &lt;code&gt;|&lt;/code&gt; characters. By default, wiki links will just print the &lt;code&gt;foo&lt;/code&gt; part as normal text. To integrate into an actual wiki, users should bind &lt;code&gt;3bmd-wiki:*wiki-processor*&lt;/code&gt; during printing, and define a method on &lt;code&gt;3bmd-wiki:process-wiki-link&lt;/code&gt; that specializes on the value of &lt;code&gt;3bmd-wiki:*wiki-processor*&lt;/code&gt; to create an HTML link from the &lt;code&gt;foo&lt;/code&gt; and arguments. (API subject to change.)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Loading &lt;code&gt;3bmd-ext-code-blocks.asd&lt;/code&gt; adds support for github style fenced code blocks, with &lt;code&gt;colorize&lt;/code&gt; support: If &lt;code&gt;3bmd-code-blocks:*code-blocks*&lt;/code&gt; is non-&lt;code&gt;NIL&lt;/code&gt; while parsing, in addition to normal indented verbatim blocks, &lt;code&gt;```&lt;/code&gt; can be used to delimit blocks of code:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  ```&#xA;  This block doesn&#39;t specify a language for colorization&#xA;  ```&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;or&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  ```lisp&#xA;  ;;; this block will be colorized as Common Lisp&#xA;  (defun foo (bar)&#xA;    (list bar))&#xA;  ```&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Language names ignore case and whitespace, so &lt;code&gt;Common Lisp&lt;/code&gt; and &lt;code&gt;commonlisp&lt;/code&gt; are treated the same, see &lt;code&gt;3bmd-code-blocks:*colorize-name-map*&lt;/code&gt; for full list of supported language names, or add names to that to recognize a custom colorize &lt;code&gt;coloring-type&lt;/code&gt;. If a language name is not specified after the opening &lt;code&gt;```&lt;/code&gt;, &lt;code&gt;3bmd-code-blocks:*code-blocks-default-colorize*&lt;/code&gt; can be set to one of the keywords naming a &lt;code&gt;coloring-type&lt;/code&gt; recognized by &lt;code&gt;colorize&lt;/code&gt; to specify a default, otherwise the block will not be colorized.&lt;/p&gt; &lt;p&gt;Can optionally use &lt;code&gt;Pygments&lt;/code&gt; instead of &lt;code&gt;colorize&lt;/code&gt; by setting &lt;code&gt;3bmd-code-blocks:*renderer*&lt;/code&gt; to &lt;code&gt;:pygments&lt;/code&gt;. Lexer and formatter options (&lt;code&gt;-O&lt;/code&gt;) can be specified like &lt;code&gt; ```c++|linenos=1&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Some attempt has been made to avoid interpretation of the options by the shell when calling &lt;code&gt;pygmentize&lt;/code&gt;, but you should probably audit the code and test the interaction with the implementation of &lt;code&gt;uiop:run-program&lt;/code&gt; on your implementation of choice before using it on untrusted input. Pygments html formatter creates arbitrary files when passed &lt;code&gt;-Ofull,cssfile=filename&lt;/code&gt;, so parameters with the substring &lt;code&gt;cssfile&lt;/code&gt; are ignored (&lt;code&gt;noclobber_cssfile=True&lt;/code&gt; is also set by default, but that only prevents overwriting, not creation). Users with untrusted input may want to audit that as well to make sure there are no other dangerous options or ways to get around the exact substring check.&lt;/p&gt; &lt;p&gt;Can optionally use &lt;a href=&#34;https://github.com/alecthomas/chroma&#34;&gt;&lt;code&gt;Chroma&lt;/code&gt;&lt;/a&gt; instead of &lt;code&gt;colorize&lt;/code&gt; or &lt;code&gt;Pygments&lt;/code&gt; by setting &lt;code&gt;3bmd-code-blocks:*renderer*&lt;/code&gt; to &lt;code&gt;:chroma&lt;/code&gt;. Change the embedded theme of the &lt;code&gt;:chroma&lt;/code&gt; code block via &lt;code&gt;3bmd-code-blocks:*chroma-style*&lt;/code&gt;. The various styles for Chroma can be viewed via &lt;code&gt;chroma --list&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;If no highlighting is desired, in case of using a JavaScript highlighter, it is possible to specify &lt;code&gt;:nohighlight&lt;/code&gt; as &lt;code&gt;3bmd-code-blocks:*renderer*&lt;/code&gt;. In this case the &lt;code&gt;pre&lt;/code&gt; tags &lt;code&gt;class&lt;/code&gt; attribute is rendered with the defined language. So:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;```lisp&#xA;(defun foo ())&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Is rendered as:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;&amp;lt;pre class=&#34;lisp&#34;&amp;gt;&amp;lt;code&amp;gt;...&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;To change the format used for rendering the &lt;code&gt;class&lt;/code&gt; attribute value you can set a different format to &lt;code&gt;*code-blocks-pre-class-format*&lt;/code&gt; which defaults to &lt;code&gt;~a&lt;/code&gt; in order to render the language as parsed from the triple ticks block. I.e.: setting the format &lt;code&gt;(setf 3bmd-code-blocks:*code-blocks-pre-class-format* &#34;brush: ~a;&#34;)&lt;/code&gt; will render:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;&amp;lt;pre class=&#34;brush: lisp;&#34;&amp;gt;&amp;lt;code&amp;gt;...&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;    &#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Inline code spans (like &lt;code&gt;`this`&lt;/code&gt;) can also be optionally highlighted with &lt;code&gt;3bmd-ext-code-blocks&lt;/code&gt;. Set &lt;code&gt;3bmd-code-blocks:*render-code-spans*&lt;/code&gt; to true, and set &lt;code&gt;3bmd-code-blocks:*render-code-spans-lang*&lt;/code&gt; to the desired language.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Loading &lt;code&gt;3bmd-ext-definition-lists.asd&lt;/code&gt; adds support for parsing PHP Markdown Extra style definition lists: If &lt;code&gt;3bmd-definition-lists:*definition-lists*&lt;/code&gt; is non-&lt;code&gt;NIL&lt;/code&gt; while parsing, the following definition list will be recognized (see &lt;a href=&#34;http://michelf.ca/projects/php-markdown/extra/#def-list&#34;&gt;http://michelf.ca/projects/php-markdown/extra/#def-list&lt;/a&gt;):&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  Term&#xA;  : definition&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Loading &lt;code&gt;3bmd-ext-tables.asd&lt;/code&gt; adds support for parsing PHP Markdown Extra style tables: If &lt;code&gt;3bmd-tables:*tables*&lt;/code&gt; is non-&lt;code&gt;NIL&lt;/code&gt; while parsing, the following will be recognized as tables (see &lt;a href=&#34;http://michelf.ca/projects/php-markdown/extra/#table&#34;&gt;http://michelf.ca/projects/php-markdown/extra/#table&lt;/a&gt;):&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  | Content Cell  | Content Cell  |&#xA;  | Content Cell  | Content Cell  |&#xA;&#xA;  | First Header  | Second Header |&#xA;  | ------------- | ------------- |&#xA;  | Content Cell  | Content Cell  |&#xA;  | Content Cell  | Content Cell  |&#xA;&#xA;  | Name | Description          |&#xA;  | ------------- | ----------- |&#xA;  | Help      | Display the help window.|&#xA;  | Close     | Closes a window     |&#xA;&#xA;  | Left-Aligned  | Center Aligned  | Right Aligned |&#xA;  | :------------ |:---------------:| -----:|&#xA;  | col 3 is      | some wordy text | $1600 |&#xA;  | col 2 is      | centered        |   $12 |&#xA;  | zebra stripes | are neat        |    $1 |&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The following simplified table style is not supported, because it is ambiguous, especially, without heading:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;First Header  | Second Header&#xA;------------- | -------------&#xA;Content Cell  | Content Cell&#xA;Content Cell  | Content Cell&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Loading &lt;code&gt;3bmd-youtube.asd&lt;/code&gt; adds support for embedding youtube videos. If &lt;code&gt;3bmd-youtube:*youtube-embeds*&lt;/code&gt; is non-&lt;code&gt;NIL&lt;/code&gt; while parsing, the shorthand syntax &lt;code&gt;!yt[video-id(|options)]&lt;/code&gt; can be used. For example:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  !yt[nbY-meOL57I]&#xA;  !yt[nbY-meOL57I|width=20,allowfullscreen]&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Loading &lt;code&gt;3bmd-ext-math.asd&lt;/code&gt; adds support for math markup with libraries like MathJax. If &lt;code&gt;3bmd-math:*math*&lt;/code&gt; is non-&lt;code&gt;NIL&lt;/code&gt; while parsing, the shorthand syntax &lt;code&gt;$$ latex markup $$&lt;/code&gt; can be used. For example:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  $$&#xA;  \frac{\partial E}{\partial y} = \frac{\partial }{\partial y} \frac{1}{n}\sum_{i=1}^{n} (y_i - a_i)^2&#xA;  $$&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>