<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Common Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-09-18T01:25:55Z</updated>
  <subtitle>Daily Trending of Common Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Shinmera/multiposter</title>
    <updated>2023-09-18T01:25:55Z</updated>
    <id>tag:github.com,2023-09-18:/Shinmera/multiposter</id>
    <link href="https://github.com/Shinmera/multiposter" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Small application to post to multiple services simultaneously&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;About Multiposter&lt;/h1&gt; &#xA;&lt;p&gt;This is an application that lets you post to multiple web services at once.&lt;/p&gt; &#xA;&lt;h2&gt;How To&lt;/h2&gt; &#xA;&lt;p&gt;While you can use Multiposter from the REPL, it also has a convenient command line interface. To build a binary, simply run &lt;code&gt;sbcl --eval &#39;(asdf:make :multiposter)&#39;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The following services are supported:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&#34;Cohost&#34;(&lt;a href=&#34;https://cohost.org&#34;&gt;https://cohost.org&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;File (just writes to disk)&lt;/li&gt; &#xA; &lt;li&gt;Git (commits and pushes)&lt;/li&gt; &#xA; &lt;li&gt;&#34;Lichat&#34;(&lt;a href=&#34;https://shirakumo.github.io/lichat&#34;&gt;https://shirakumo.github.io/lichat&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&#34;Mastodon&#34;(&lt;a href=&#34;https://mastodon.social&#34;&gt;https://mastodon.social&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&#34;Pixiv&#34;(&lt;a href=&#34;https://pixiv.net&#34;&gt;https://pixiv.net&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&#34;Reader&#34;(&lt;a href=&#34;https://github.com/shirakumo/reader&#34;&gt;https://github.com/shirakumo/reader&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&#34;Studio&#34;(&lt;a href=&#34;https://github.com/shirakumo/studio&#34;&gt;https://github.com/shirakumo/studio&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&#34;Tumblr&#34;(&lt;a href=&#34;https://tumblr.com&#34;&gt;https://tumblr.com&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;WebDAV&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;On the command line you can simply run &lt;code&gt;multiposter&lt;/code&gt; and it should show you a nice help text with all the available options and commands.&lt;/p&gt; &#xA;&lt;h2&gt;Creating New Clients&lt;/h2&gt; &#xA;&lt;p&gt;If you&#39;d like to contribute another client to Multiposter, it&#39;s not too hard. Simply create a new client class with &lt;code&gt;define-client&lt;/code&gt;, and ensure all the properties that should be persisted for it are returned from an &lt;code&gt;initargs&lt;/code&gt; method. Then implement methods for the &lt;code&gt;post&lt;/code&gt;, &lt;code&gt;ready-p&lt;/code&gt; and &lt;code&gt;setup&lt;/code&gt; functions.&lt;/p&gt; &#xA;&lt;p&gt;If your service supports undoing/deleting a post, you should also create a &lt;code&gt;result&lt;/code&gt; subclass and implement the &lt;code&gt;undo&lt;/code&gt; method for it. Your &lt;code&gt;post&lt;/code&gt; methods should then return a result instance on success, such that the post can be removed again later if desired.&lt;/p&gt; &#xA;&lt;p&gt;For the &lt;code&gt;setup&lt;/code&gt; function, make sure you implement the following logic: if &lt;code&gt;&amp;amp;rest args&lt;/code&gt; are passed, reinitialise your client to use those initargs. Otherwise, if your client is not yet &lt;code&gt;ready-p&lt;/code&gt;, perform an interactive setup using &lt;code&gt;query&lt;/code&gt; to prompt the user for the necessary options.&lt;/p&gt;</summary>
  </entry>
</feed>