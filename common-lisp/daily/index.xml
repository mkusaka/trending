<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Common Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-05-07T01:27:16Z</updated>
  <subtitle>Daily Trending of Common Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>alex-gutev/generic-cl</title>
    <updated>2024-05-07T01:27:16Z</updated>
    <id>tag:github.com,2024-05-07:/alex-gutev/generic-cl</id>
    <link href="https://github.com/alex-gutev/generic-cl" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Generic function interface to standard Common Lisp functions&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;GENERIC-CL&lt;/h1&gt; &#xA;&lt;p&gt;GENERIC-CL provides a generic function wrapper over various functions in the Common Lisp standard, such as equality predicates and sequence operations. The goal of this wrapper is to provide a standard interface to common operations, such as testing for the equality of two objects, which is extensible to user-defined types.&lt;/p&gt; &#xA;&lt;h2&gt;Example&lt;/h2&gt; &#xA;&lt;p&gt;In Common lisp you have a number of different equality comparison functions for different object types. Worse still you have to invent a new name for the comparison functions for each of your own object types.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Standard Common Lisp:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(eq &#39;a x)           ;; Symbols&#xA;(= 1 2)             ;; Numbers&#xA;(equal &#39;(1 2 3) x)  ;; Lists&#xA;(equal &#34;hello&#34; y)   ;; Strings&#xA;(equalp #(1 2 3) z) ;; Arrays&#xA;&#xA;(foo-equal x y)     ;; Instances of class foo&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In GENERIC-CL there is a single equality predicate &lt;code&gt;=&lt;/code&gt; which can be used on objects of any builtin type. Since it&#39;s implemented using generic functions, it can be extended with methods for user-defined classes and structures.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Using GENERIC-CL:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(= &#39;a x)       ;; Symbols&#xA;(= 1 2)        ;; Numbers&#xA;(= &#39;(1 2 3) x) ;; Lists&#xA;(= &#34;hello&#34; y)  ;; Strings&#xA;(= #(1 2 3) z) ;; Arrays&#xA;&#xA;(= x y)        ;; Instances of class foo&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;GENERIC-CL also provides generic interfaces for comparison (&lt;code&gt;&amp;lt;&lt;/code&gt;, &lt;code&gt;&amp;gt;&lt;/code&gt;, ...) functions, copying objects, iteration, sequence operations, hash-tables capable of storing keys of user defined classes, and many more.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Full documentation is available online in HTML format at &lt;a href=&#34;https://alex-gutev.github.io/generic-cl/&#34;&gt;https://alex-gutev.github.io/generic-cl/&lt;/a&gt;, and also in AsciiDoc format in the &lt;code&gt;doc/&lt;/code&gt; folder.&lt;/p&gt; &#xA;&lt;h2&gt;Isn&#39;t this slow?&lt;/h2&gt; &#xA;&lt;p&gt;Generic functions do carry an additional overhead over ordinary functions, however this isn&#39;t a significant issue for most applications.&lt;/p&gt; &#xA;&lt;p&gt;For those applications where the speed of generic-functions is an issue, generic function calls can be optimized, using &lt;a href=&#34;https://github.com/alex-gutev/static-dispatch&#34;&gt;static-dispatch&lt;/a&gt; on which this library is built, to be as efficient (and sometimes even more efficient) as ordinary function calls, when the types of the arguments are known at compile-time. Check out the &lt;a href=&#34;https://alex-gutev.github.io/generic-cl/#gf-optimization&#34;&gt;Optimization&lt;/a&gt; section for more information.&lt;/p&gt;</summary>
  </entry>
</feed>