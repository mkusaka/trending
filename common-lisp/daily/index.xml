<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Common Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-04-18T01:32:49Z</updated>
  <subtitle>Daily Trending of Common Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>mirkov/nested-vectors</title>
    <updated>2023-04-18T01:32:49Z</updated>
    <id>tag:github.com,2023-04-18:/mirkov/nested-vectors</id>
    <link href="https://github.com/mirkov/nested-vectors" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Matrix-like data structure that stores data in a vector of sequences&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#+title: nested-vectors&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Introduction&lt;/p&gt; &lt;p&gt;The package provides a matrix-like data structure whose internal format is a vector of sequences of equal length, e.g. #+BEGIN_EXAMPLE #(#(1 2) #(3 4) #(&#39;a &#39;b) #(&#34;a&#34; &#34;b&#34;)) #+END_EXAMPLE The structure has the following properties:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;It can be extended in either dimension by adding rows and/or columns &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Subject to certain conditions&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;The inner sequences can by one of &lt;del&gt;vector&lt;/del&gt;, &lt;del&gt;list&lt;/del&gt;, or &lt;del&gt;grid:mvector&lt;/del&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;p&gt;The package provides facilities for:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Defining and initializing&lt;/li&gt; &#xA;   &lt;li&gt;Extracting rows and columns&lt;/li&gt; &#xA;   &lt;li&gt;Accessing individual elements&lt;/li&gt; &#xA;   &lt;li&gt;Accessing and iterating over rows or columns&lt;/li&gt; &#xA;   &lt;li&gt;Adding rows and columns&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Raison d&#39;Ãªtre&lt;/p&gt; &#xA;&lt;p&gt;The purpose of this package is two-fold. First, it will replace some of the plumbing of my [[https://github.com/mirkov/data-table][data-table]] package.&lt;/p&gt; &#xA;&lt;p&gt;Second, it is a test-bed for a general grid structure for Liam Healy&#39;s &lt;del&gt;grid&lt;/del&gt; package (part of [[http://www.common-lisp.net/project/antik/][Antik]]). Grids will eventually support nested structures: vectors of vectors of lists of ... Also see [[*&lt;del&gt;nested-vectors&lt;/del&gt;%20as%20prototype%20for%20nested%20&lt;del&gt;grid&lt;/del&gt;&#39;s][here]].&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;External interface&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Generation and inspection of a nested vector&lt;/p&gt; &#xA;&lt;p&gt;The nested vector is initialized using the &lt;del&gt;make-nested-vector&lt;/del&gt; function, e.g. #+BEGIN_EXAMPLE (make-nested-vector 2 3 :adjustable-rows-p) #+END_EXAMPLE It is an object of class &lt;del&gt;nested-vector&lt;/del&gt;. &lt;del&gt;print&lt;/del&gt; and &lt;del&gt;describe&lt;/del&gt; methods have been implemented for it.&lt;/p&gt; &#xA;&lt;p&gt;The object&#39;s properties can be inspected using &lt;del&gt;row-count&lt;/del&gt;, &lt;del&gt;column-count&lt;/del&gt;, &lt;del&gt;adjustable-rows-p&lt;/del&gt;, &lt;del&gt;adjustable-columns-p&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;** Setting and accessing fields of a nested vector&lt;/p&gt; &#xA;&lt;p&gt;The nested vector columns are set and accessed using &lt;del&gt;nth-column&lt;/del&gt;: #+BEGIN_EXAMPLE (nth-column 0 nv) (setf (nth-column 0 nv) sequence) #+END_EXAMPLE Allowed &lt;del&gt;sequence&lt;/del&gt; types are lists, native arrays, and foreign arrays (&lt;del&gt;cl:list&lt;/del&gt;, &lt;del&gt;cl:array&lt;/del&gt;, and &lt;del&gt;grid:foreign-array&lt;/del&gt; respectively).&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Restriction&lt;/em&gt;: Nested vectors with adjustable columns cannot be used to store foreign arrays.&lt;/p&gt; &#xA;&lt;p&gt;Individual elements are set and accessed using &lt;del&gt;vvref&lt;/del&gt; which has a syntax identical to that of &lt;del&gt;aref&lt;/del&gt;: #+BEGIN_EXAMPLE (vvref nested-vector i j) (setf (vvref nested-vector i j) value) #+END_EXAMPLE&lt;/p&gt; &#xA;&lt;p&gt;&lt;del&gt;nth-row&lt;/del&gt; returns a &lt;del&gt;nested-vector-row&lt;/del&gt; object (&lt;del&gt;print&lt;/del&gt; and &lt;del&gt;describe&lt;/del&gt; work on it). This object can be used to inspect and set row values. See [[*&lt;del&gt;nested-vector-row&lt;/del&gt;][here]] for details.&lt;/p&gt; &#xA;&lt;p&gt;** Iterating over nested vectors&lt;/p&gt; &#xA;&lt;p&gt;Iterating over rows, columns or their indices has been defined using &lt;del&gt;iter&lt;/del&gt;. Examples of use: #+BEGIN_EXAMPLE (iter:iter (iter:for r :in-nv-row nv) ...) (iter:iter (iter:for ri :row-index-of-nv nv) ...) (iter:iter (iter:for c :in-nv-column nv) ...) (iter:iter (iter:for ci :column-index-of-nv nv) ...) #+END_EXAMPLE&lt;/p&gt; &#xA;&lt;p&gt;One can also iterate over elements or indices of &lt;del&gt;nested-vector-row&lt;/del&gt;: #+BEGIN_EXAMPLE (iter:iter (iter:for v :in-nv-row-element row) ...) #+END_EXAMPLE&lt;/p&gt; &#xA;&lt;p&gt;** &lt;del&gt;nested-vector-row&lt;/del&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;del&gt;nested-vector-row&lt;/del&gt; object is used to access row elements of a nested vector. &lt;del&gt;row-index&lt;/del&gt; specifies the row. It can be changed using &lt;del&gt;setf&lt;/del&gt;, &lt;del&gt;incf&lt;/del&gt;, &lt;del&gt;decf&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Individual row elements are set or accessed using &lt;del&gt;vrref&lt;/del&gt;. Row contents can be obtained via &lt;del&gt;row-contents&lt;/del&gt; as a list.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Implementation notes&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** &lt;del&gt;nested-vector&lt;/del&gt; states and allowed operations&lt;/p&gt; &#xA;&lt;p&gt;The allowed states are &lt;del&gt;defined&lt;/del&gt; and &lt;del&gt;operational&lt;/del&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;del&gt;defined&lt;/del&gt; :: dimensions and adjustement flags, with limited set and retrieval functionality&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;operational&lt;/del&gt; :: Full functionality&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In the &lt;del&gt;defined&lt;/del&gt; state we allow operations to examine the state of the nested vectors and add additional data. Once the data is loaded, the user manually sets the state to operational.&lt;/p&gt; &#xA;&lt;p&gt;Allowed operations during the &lt;del&gt;defined&lt;/del&gt; state:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;All declaration queries &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;row-count, column-count&lt;/li&gt; &#xA;   &lt;li&gt;state&lt;/li&gt; &#xA;   &lt;li&gt;adjustable-row-p, adjustable-column-p&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;setf nth-column&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Not allowed are operations with rows and individual elements&lt;/p&gt; &#xA;&lt;p&gt;** &lt;del&gt;nested-vector-row&lt;/del&gt;&lt;/p&gt; &#xA;&lt;p&gt;The external interface to accessing row elements is the &lt;del&gt;vrref&lt;/del&gt;. All the activities are done using three functions that are built on the fly when the object is initialized (during &lt;del&gt;initialize-instance :after&lt;/del&gt;).&lt;/p&gt; &#xA;&lt;p&gt;The object has three slots containing these functions. They access and set elements, or change the row index. These functions share a row-index variable using a closure established during the object initialization. See the source code for comments.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;del&gt;nested-vectors&lt;/del&gt; as test-bed for nested &lt;del&gt;grid&lt;/del&gt;&#39;s&lt;/p&gt; &lt;p&gt;to be written ...&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>