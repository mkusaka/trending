<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Common Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-11-25T01:30:05Z</updated>
  <subtitle>Daily Trending of Common Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>neomacs-project/unix-in-lisp</title>
    <updated>2024-11-25T01:30:05Z</updated>
    <id>tag:github.com,2024-11-25:/neomacs-project/unix-in-lisp</id>
    <link href="https://github.com/neomacs-project/unix-in-lisp" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Mount Unix system into Common Lisp image&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;-&lt;em&gt;- toc-org-max-depth: 3; -&lt;/em&gt;-&lt;/h1&gt; &#xA;&lt;p&gt;#+TITLE: Unix in Lisp - mount Unix into Common Lisp image Unix in Lisp is currently a usable Lisp (not POSIX!) shell for Unix. The distinctive feature of Unix in Lisp is that rather than creating a sub-language for Unix operations, Unix concepts are directly/shallowly embedded into Lisp (Unix commands become Lisp macros, Unix file become Lisp variables, Unix streams become lazy Lisp sequences, etc).&lt;/p&gt; &#xA;&lt;p&gt;The fact that Unix in Lisp /is/ Lisp, rather than an interpreter written in Lisp, makes it possible to leverage existing tools for Lisp. One instance is the Unix in SLIME listener, which inherits completion, interactive debugger and multiple listeners etc from SLIME itself. Another instance is that existing CL library such as sequence helper functions from &lt;del&gt;serapeum&lt;/del&gt; works out of the box on Unix in Lisp process streams.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Table of Contents :TOC:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[[#quick-start][Quick Start]] &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;[[#examples][Examples]]&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;[[#documentation][Documentation]] &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;[[#file-system-mapping][File System Mapping]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#command-and-process-mapping][Command and Process Mapping]] &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;[[#simple-commands][Simple commands]]&lt;/li&gt; &#xA;     &lt;li&gt;[[#pipeline][Pipeline]]&lt;/li&gt; &#xA;     &lt;li&gt;[[#interactive-use][Interactive Use]]&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;[[#environment][Environment]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#scripting-blazingly-fast-start-up][Scripting (blazingly fast start up)]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#unix-in-slime][Unix in SLIME]] &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;[[#performance-fast][Performance: fast!]]&lt;/li&gt; &#xA;     &lt;li&gt;[[#completion][Completion]]&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;[[#package-system-structure][Package system structure]]&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Quick Start Currently, only SBCL is supported. Clone this repository into your =~/quicklisp/local-projects/=. Unix in Lisp is currently at /alpha/ stage and will receive frequent changes. It&#39;s recommended to use Ultralisp to install dependencies, to make sure various bug fixes to the upstream are available which Unix in Lisp relies on. If you haven&#39;t done so, &lt;del&gt;(ql-dist:install-dist &#34;&lt;a href=&#34;http://dist.ultralisp.org/&#34;&gt;http://dist.ultralisp.org/&lt;/a&gt;&#34; :prompt nil)&lt;/del&gt;. Before first-time use, run &lt;del&gt;(ql:update-dist &#34;ultralisp&#34;)&lt;/del&gt; and &lt;del&gt;(ql:quickload &#34;unix-in-lisp&#34;)&lt;/del&gt; to install all dependencies. It&#39;s also advised to &lt;del&gt;(ql:update-dist &#34;ultralisp&#34;)&lt;/del&gt; and &lt;del&gt;git pull&lt;/del&gt; this repo regularly to get updates and bug fixes.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;It&#39;s recommended to load &lt;del&gt;unix-in-slime.el&lt;/del&gt; for better SLIME integration. To load it, evaluate &lt;del&gt;(require &#39;unix-in-slime &#34;&lt;/del&gt;/quicklisp/local-projects/unix-in-lisp/unix-in-slime&#34;)~ in emacs. You may want to add this line to your &lt;del&gt;init.el&lt;/del&gt;. Then &lt;del&gt;M-x unix-in-sime&lt;/del&gt; to start a listener, and have fun!&lt;/p&gt; &#xA;&lt;p&gt;&lt;del&gt;unix-in-slime&lt;/del&gt; installs hacks to the host Lisp environment by calling &lt;del&gt;(unix-in-lisp:install)&lt;/del&gt; on startup. To undo hacks done to the host environment and unmount Unix FS packages, run &lt;del&gt;(unix-in-lisp:uninstall)&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;** Examples (Some print-outs are omitted)&lt;/p&gt; &#xA;&lt;p&gt;Counting number of files #+begin_src /Users/kchan&amp;gt; (cd quicklisp/local-projects/unix-in-lisp) /Users/kchan/quicklisp/local-projects/unix-in-lisp&amp;gt; (pipe (ls) (wc -l)) 9 #+end_src But why not the Lisp way as well! #+begin_src /Users/kchan/quicklisp/local-projects/unix-in-lisp&amp;gt; (length (package-exports ./)) 9 #+end_src&lt;/p&gt; &#xA;&lt;p&gt;For more examples, see [[file:TUTORIAL.org]]&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Documentation ** File System Mapping Directories are mapped as /Unix FS packages/. A Unix FS packages is any Common Lisp package whose package name designate an absolute path name (usually when it starts with a slash).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The exported symbols of a Unix FS package should one-to-one correspond to files in the mapped directory. Exceptions to this one-to-one correspondence:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Because of the limit of file system change tracking, the package structure in the Common Lisp image may diverge from the Unix FS state. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Currently, the state of a Unix FS package is synchronized when calling &lt;del&gt;mount-directory&lt;/del&gt;. By default, &lt;del&gt;remount-current-directory&lt;/del&gt; is added to &lt;del&gt;&lt;em&gt;post-command-hook&lt;/em&gt;&lt;/del&gt;, which does the obvious thing.&lt;/li&gt; &#xA;   &lt;li&gt;If your environment&#39;s &lt;del&gt;$PATH&lt;/del&gt; includes directories that do not exist, you will see warnings at every prompt like &#34;&lt;del&gt;warning: Failed to mount /bad/path/ in $PATH: /bad/path/ does not exist.&lt;/del&gt;&#34; You&#39;d benefit from fixing this where &lt;del&gt;$PATH&lt;/del&gt; is defined (&lt;del&gt;.bashrc&lt;/del&gt;, &lt;del&gt;.profile&lt;/del&gt;, ...), but can use &lt;del&gt;(setf unix-in-lisp:&lt;em&gt;path-warning&lt;/em&gt; nil)&lt;/del&gt; to silence the warnings instead.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Each of these exported symbols has a global symbol macro binding, so that they can be read/write like Lisp variables. Access to the symbol gives the list of lines of the underlying file, and setting it with a list designator of lines cause them to be written to the file.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src unix-user /Users/kchan/&amp;gt; .bashrc (&#34;export CC=&#34;clang&#34;&#34; &#34;export PS1=&#39;$(hostname):$(pwd) $(whoami)\$ &#39;&#34; ...) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Note that there are no corresponding symbol for a non-existent file. To write or create a file that you are not sure whether it already exists, it&#39;s recommended to use &lt;del&gt;defile&lt;/del&gt; macro, which will ensure the file exists and creates the corresponding symbol. #+begin_src unix-user /Users/kchan/&amp;gt; (defile iota.txt (iota 10)) /Users/kchan/iota.txt unix-user /Users/kchan/&amp;gt; iota.txt (&#34;0&#34; &#34;1&#34; &#34;2&#34; &#34;3&#34; &#34;4&#34; &#34;5&#34; &#34;6&#34; &#34;7&#34; &#34;8&#34; &#34;9&#34;) #+end_src In the above example, if &lt;del&gt;iota.txt&lt;/del&gt; does not exist and I use &lt;del&gt;setq&lt;/del&gt; instead of &lt;del&gt;defile&lt;/del&gt;, an internal symbol named &lt;del&gt;IOTA.TXT&lt;/del&gt; will be created in &lt;del&gt;UNIX-USER&lt;/del&gt; package instead and I will write to its value cell, rather than &lt;del&gt;/Users/kchan/iota.txt&lt;/del&gt; on the file system.&lt;/p&gt; &#xA;&lt;p&gt;** Command and Process Mapping Unix in Lisp manages jobs in the unit of /Effective processes/. Theses include regular Unix processes represented by &lt;del&gt;simple-process&lt;/del&gt;, and &lt;del&gt;pipeline&lt;/del&gt;&#39;s which are consisted of any number of UNIX processes and Lisp function stages. *** Simple commands When Unix in Lisp maps a directory, files are checked for execution permission and executable ones are mapped as Common Lisp macros. These macros /implicitly quasiquotes/ their arguments. The arguments are converted to strings using &lt;del&gt;literal-to-string&lt;/del&gt;, then passed to the corresponding executable.&lt;/p&gt; &#xA;&lt;p&gt;Examples of using macros mapped from Unix commands #+begin_src /Users/kchan/some-documents&amp;gt; (cat ,@(ls)) ;; This cats together all files under current directory. #+end_src&lt;/p&gt; &#xA;&lt;p&gt;You can also set up redirections (and maybe other process creation settings in the future) via supplying keyword arguments. These arguments /are not/ implicitly quasiquoted and /are/ evaluated.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src /Users/kchan/some-documents&amp;gt; (ls :output &lt;em&gt;terminal-io&lt;/em&gt;) ;; This outputs to &lt;em&gt;terminal-io&lt;/em&gt;, which usually goes into &lt;em&gt;inferior-lisp&lt;/em&gt; buffer. #+end_src&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src /Users/kchan/some-documents&amp;gt; (ls :error :output) ;; This redirect stderr of ls command to its stdout, like 2&amp;gt;&amp;amp;1 in posix shell #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Like you have discovered in &lt;del&gt;(cat ,@(ls))&lt;/del&gt;, effective processes can be used like Lisp sequences -- they designate the sequence of their output lines. *** Pipeline&lt;/p&gt; &#xA;&lt;p&gt;Pipelines are created via the &lt;del&gt;pipe&lt;/del&gt; macro: #+begin_src /Users/kchan/quicklisp/local-projects/unix-in-lisp&amp;gt; (pipe (wc -l) (ls)) 9 #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Under the hood, except the first stage, each stage of the pipeline is passed &lt;del&gt;:input &#xA;  &lt;result-of-previous-pipeline-stage&gt;&lt;/result-of-previous-pipeline-stage&gt;&lt;/del&gt; as an additional argument. Alternatively, if there are arguments &lt;del&gt;_&lt;/del&gt;, they are substituted with the result of the previous stage. You can mix Lisp functions and values with Unix commands. Using Lisp value as the first input stage is easy enough: #+begin_src /Users/kchan&amp;gt; (pipe (iota 10) (wc)) 10 10 20 #+end_src&lt;/p&gt; &#xA;&lt;p&gt;The &lt;del&gt;_&lt;/del&gt; extension make it easy to add Lisp functions to the mix: #+begin_src /Users/kchan&amp;gt; (pipe (ls) (filter (lambda (s) (&amp;gt; (length s) 10)) _) (wc -l)) 47 #+end_src The above counts the number of file with filename longer than 10 under my home directory. *** Interactive Use Inside a &lt;del&gt;unix-in-slime&lt;/del&gt; listener, if the primary value of evaluation is an effective process and it has avaliable input/output streams, &lt;del&gt;unix-in-slime&lt;/del&gt; automatically &#34;connect&#34; it to the listener, i.e. I/O of the listener is redirected to the process, similar to /foreground processes/ in POSIX shell: #+begin_src /Users/kchan&amp;gt; (python3 -i) Python 3.8.9 (default, Apr 13 2022, 08:48:07) [Clang 13.1.6 (clang-1316.0.21.2.5)] on darwin Type &#34;help&#34;, &#34;copyright&#34;, &#34;credits&#34; or &#34;license&#34; for more information.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;blockquote&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;print(&#34;Hello world!&#34;) Hello world! ; No values /Users/kchan&amp;gt; #+end_src&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &#xA; &lt;/blockquote&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;em&gt;Attention:&lt;/em&gt; use &lt;del&gt;C-u RET&lt;/del&gt; to signal EOF in &lt;del&gt;unix-in-slime&lt;/del&gt;, similar to &lt;del&gt;Ctrl+D&lt;/del&gt; in POSIX shells. You can interrupt evaluation via &lt;del&gt;C-c C-c&lt;/del&gt; like usual, after which you will be provided a few restarts:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;del&gt;BACKGROUND&lt;/del&gt; puts the job in background (accessible via &lt;del&gt;unix-in-lisp:&lt;em&gt;jobs&lt;/em&gt;&lt;/del&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;ABORT&lt;/del&gt; terminates the current job (via &lt;del&gt;SIGTERM&lt;/del&gt; for Unix processes)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;em&gt;Attention:&lt;/em&gt; You have to use &lt;del&gt;-i&lt;/del&gt; flag to start Python REPL, because Unix in Lisp currently talk to all processes using pipe rather than pseudo tty. Without &lt;del&gt;-i&lt;/del&gt;, Python will start itself into non-interactive mode. Other REPLs may need respective flags.&lt;/p&gt; &#xA;&lt;p&gt;When using Unix in Lisp outside &lt;del&gt;unix-in-slime&lt;/del&gt;, use &lt;del&gt;(unix-in-lisp:repl-connect &#xA;  &lt;process&gt;&#xA;   )&#xA;  &lt;/process&gt;&lt;/del&gt; to achieve the same thing.&lt;/p&gt; &#xA;&lt;p&gt;&lt;del&gt;unix-in-lisp:&lt;em&gt;jobs&lt;/em&gt;&lt;/del&gt; keeps a list of running effective processes: #+begin_src unix-in-lisp&amp;gt; &lt;em&gt;jobs&lt;/em&gt; (#&amp;lt;simple-process python3 (running) {1005BFFCF3}&amp;gt;) #+end_src Note that because &lt;del&gt;unix-in-slime&lt;/del&gt; listener connects a job automatically if it is the primary value of evaluation, you can use e.g. #+begin_src unix-in-lisp&amp;gt; (nth 0 &lt;em&gt;jobs&lt;/em&gt;) #+end_src to resume from a background job.&lt;/p&gt; &#xA;&lt;p&gt;&lt;del&gt;unix-in-lisp:repl-connect&lt;/del&gt; connects a process exclusively in at most one listener. If a process is already connected in other listener, it will do nothing and the effective process object will be printed like normal. In fact, many Unix in Lisp operations (including &lt;del&gt;repl-connect&lt;/del&gt; and &lt;del&gt;pipe&lt;/del&gt;) takes exclusive access of input/output stream of processes (by setting the respective slots to &lt;del&gt;nil&lt;/del&gt; during their course of operation). *** More about job control, seq, &amp;amp;&amp;amp; and || Different from POSIX shell, Unix in Lisp by default run all command asynchronously, or &#34;in the background&#34;. This is a very important difference to keep in mind!&lt;/p&gt; &#xA;&lt;p&gt;The macro &lt;del&gt;(fg . forms)&lt;/del&gt; run each of the &lt;del&gt;forms&lt;/del&gt; in foreground via &lt;del&gt;repl-connect&lt;/del&gt;, just like how Unix in SLIME listener would run them.&lt;/p&gt; &#xA;&lt;p&gt;&lt;del&gt;seq,&amp;amp;&amp;amp;,||&lt;/del&gt; roughly correspond to &lt;del&gt;;,&amp;amp;&amp;amp;,||&lt;/del&gt; in POSIX shell, except that they are all asynchronous. They return effective processes that aggregate the input/output of their sub-commands. When you use Lisp code inside these operators, be aware that they run in a /different/ thread rather than the caller thread! The rule of thumb is that if you want something like &lt;del&gt;progn&lt;/del&gt; for both regular Lisp and Unix in Lisp commands, use &lt;del&gt;fg&lt;/del&gt; instead of &lt;del&gt;seq&lt;/del&gt;. Use &lt;del&gt;seq,&amp;amp;&amp;amp;,||&lt;/del&gt; for composing effective processes only. ** Environment Unix environment variables are mapped to special (dynamic-scope) Lisp variables. #+begin_src /Users/kchan&amp;gt; $logname &#34;kchan&#34; #+end_src&lt;/p&gt; &#xA;&lt;p&gt;You can set them or dynamically bind them #+begin_src /Users/kchan&amp;gt; (setf $test &#34;42&#34;) &#34;42&#34; /Users/kchan&amp;gt; (pipe &#39;(&#34;echo $TEST&#34;) (bash)) 42 nil /Users/kchan&amp;gt; (let (($test &#34;override&#34;)) (pipe &#39;(&#34;echo $TEST&#34;) (bash))) override nil #+end_src&lt;/p&gt; &#xA;&lt;p&gt;The above works with the help of a reader macro defined on &lt;del&gt;$&lt;/del&gt;, which registers the following symbol as an environment variable. If you want to use Unix in Lisp environment variables without our readtable, you need to use function &lt;del&gt;unix-in-lisp:ensure-env-var&lt;/del&gt; to register the symbol first. Consult its docstring for more information.&lt;/p&gt; &#xA;&lt;p&gt;Unix in Lisp keeps its own idea of a Unix environment, and pass to subprocesses created by it (e.g. via the macros it created from Unix commands). Other Lisp facilities (e.g. &lt;del&gt;uiop:run-program&lt;/del&gt;) does not know this, and usually inherit the &#34;real&#34; Unix environment of the Lisp process instead. To remedy this, Unix in Lisp provides function &lt;del&gt;unix-in-lisp:synchronize-env-to-unix&lt;/del&gt; which copies the environment Unix in Lisp manages to the &#34;real&#34; Unix environment of the Lisp process. This is by default run in &lt;del&gt;&lt;em&gt;post-command-hook&lt;/em&gt;&lt;/del&gt;, and you may want to call them before using other Lisp facilities that spawns Unix subprocesses. ** Scripting (blazingly fast start up) The recommended way to write scripts is to create executable files (say &lt;del&gt;do-stuff.sh&lt;/del&gt;) with contents like #+begin_src #!/usr/bin/env -S sbcl --script (asdf:require-system &#34;&#xA; &lt;dependency&gt;&#xA;  &#34;) (asdf:require-system &#34;unix-in-lisp&#34;) (unix-in-lisp:setup) &#xA;  &lt;do-stuff&gt;&#xA;    #+end_src&#xA;  &lt;/do-stuff&gt;&#xA; &lt;/dependency&gt;&lt;/p&gt; &#xA;&lt;p&gt;The benefit of the above approach is that it is blazingly fast when started from within Unix in Lisp (via e.g. &lt;del&gt;(do-stuff.sh)&lt;/del&gt;), because Unix in Lisp has a /Fast loading command/ mechanism, which can execute the script within Unix in Lisp image without starting subprocess if it detects a Lisp shebang. The essence of writing fast startup script is:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Use &lt;del&gt;#!/usr/bin/env -S sbcl --script&lt;/del&gt; shebang. Currently it has to be an exact match.&lt;/li&gt; &#xA; &lt;li&gt;Use &lt;del&gt;asdf:require-system&lt;/del&gt;. This avoids scanning the ASDF registry directory tree for modification, which wastes significant time!&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;On my machine, a hello world using the above approach run in 0.5ms, while Python 3 uses 30ms! ** Unix in SLIME The above documentations have been assuming you are using the &lt;del&gt;unix-in-slime&lt;/del&gt; listener. Here we document some additional aspects of &lt;del&gt;unix-in-slime&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Unix in Lisp assumes a dedicated swank server for &lt;del&gt;unix-in-slime&lt;/del&gt; listeners (and potentially other front-ends in the future). &lt;del&gt;M-x unix-in-slime&lt;/del&gt; will start one on &lt;del&gt;unix-in-slime-default-port&lt;/del&gt; (4010 by default) if none already exists in the Unix in Lisp image. The server handles multiple connections, so you can safely start multiple &lt;del&gt;unix-in-slime&lt;/del&gt; listeners simultaneously, like how you must have lived with multiple terminal windows.&lt;/p&gt; &#xA;&lt;p&gt;*** Performance: fast! A quite unintended achievement is that &lt;del&gt;unix-in-slime&lt;/del&gt; is a very fast shell for Emacs. In fact, a simple &lt;del&gt;(pipe &#34;time for i in {0..99999}; do echo line $i; done&#34; (sh))&lt;/del&gt; benchmark takes 0.83s in &lt;del&gt;unix-in-slime&lt;/del&gt;, and takes 2.93s in &lt;del&gt;vterm&lt;/del&gt;. &lt;del&gt;unix-in-slime&lt;/del&gt; is more than 3 times faster than one of the fastest Emacs terminal emulator (partly written in C)! Of course, this is not a head-to-head comparison because &lt;del&gt;vterm&lt;/del&gt; is a terminal emulator while &lt;del&gt;unix-in-slime&lt;/del&gt; is a shell, but I did frequent experience fast command outputs choking Emacs and it&#39;s good to know &lt;del&gt;unix-in-slime&lt;/del&gt; is pretty good at handle these. I think the reason is that SLIME&#39;s swank server does some very Emacs-specific tuning, e.g. limiting network packet rate because it knows Emacs choke on a flood of them, which also benefits us when we use it as a shell.&lt;/p&gt; &#xA;&lt;p&gt;*** Completion If you have configured completion for SLIME, completion works out of the box for &lt;del&gt;unix-in-slime&lt;/del&gt;. Note that we automagically get &#34;filename completion&#34;, because they are mapped as symbols, and we have symbol completion at home! Currently there&#39;s one quirk: filenames are always completed to their fully resolved path (with ~.. . ~~ components resolved), because that&#39;s what corresponds to symbols. I&#39;d say it&#39;s either a bug or a feature depending on who you ask, I&#39;m leaving it like that for now. ** Package system structure Unix in Lisp defines and populates a number of packages during &lt;del&gt;unix-in-lisp:install&lt;/del&gt;. First, &lt;del&gt;unix-in-lisp:path&lt;/del&gt; is created according to &lt;del&gt;$PATH&lt;/del&gt; environment variable. Then, &lt;del&gt;unix-in-lisp.common&lt;/del&gt; is ensured to re-export &lt;del&gt;unix-in-lisp.path&lt;/del&gt;, and also export symbols corresponding to environment variables. Packages that wish to make use of Unix in Lisp functionalities should use &lt;del&gt;unix-in-lisp.common&lt;/del&gt;, and potentially shadowing import some of its symbols. Any other usage of packages created by Unix in Lisp is less safe, including using or importing symbols from the Unix FS packages, particularly because invoking &lt;del&gt;unix-in-lisp:uninstall&lt;/del&gt; deletes them.&lt;/p&gt; &#xA;&lt;p&gt;The Unix in SLIME listener by default starts in &lt;del&gt;unix-user&lt;/del&gt; package, which uses &lt;del&gt;unix-in-lisp.common&lt;/del&gt; and other utility packages. This causes all listeners to share the same package by default, but you can also create new packages and switch listeners to it. Note that we /do not/ support current directory by /using/ its corresponding Unix FS package. Instead, a reader hook (to &lt;del&gt;sb-impl::%intern&lt;/del&gt;) is installed that replace symbols denoting relative path with a new &#34;effective&#34; uninterned symbol that merges bindings from the original symbol and the mounted symbols according to the relative path under current directory (&lt;del&gt;&lt;em&gt;default-pathname-defaults&lt;/em&gt;&lt;/del&gt;). Similar to Unix, our redirection never shadows existing global function bindings, to avoid unintentionally execute files under current directory.&lt;/p&gt;</summary>
  </entry>
</feed>