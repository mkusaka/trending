<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Common Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-09-11T01:33:13Z</updated>
  <subtitle>Daily Trending of Common Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>arielnetworks/cl-memcached</title>
    <updated>2022-09-11T01:33:13Z</updated>
    <id>tag:github.com,2022-09-11:/arielnetworks/cl-memcached</id>
    <link href="https://github.com/arielnetworks/cl-memcached" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Common Lisp interface to the memcached object caching system.&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>mirkov/data-table</title>
    <updated>2022-09-11T01:33:13Z</updated>
    <id>tag:github.com,2022-09-11:/mirkov/data-table</id>
    <link href="https://github.com/mirkov/data-table" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Classes for storing data tables along with meta-data&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#+title: Numeric table&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Aim&lt;/p&gt; &lt;p&gt;Collection of tabular data structures for use in statistics and numerical data analysis. The structure supports table queries and selections. In addition, numerical analysis (such as fitting, interpolation) can be performed on columns, rows or regions.&lt;/p&gt; &lt;p&gt;The query and selection functionality replicates and expand functionality provided by Chapter 27 of &#34;Practical Common Lisp&#34;. The difference between this code and PCL&#39;s code is that our code is more geared towards numerical data, while PCL is more data-base like. type of app.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Supported data formats&lt;/p&gt; &lt;p&gt;Currently there is only one supported format: [[*COLUMN-MAJOR-TABLE][COLUMN-MAJOR-TABLE]]&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** COLUMN-MAJOR-TABLE&lt;/p&gt; &#xA;&lt;p&gt;Stores data that is organized by columns, each column having a name and storing values of a one type. The data in columns can be stored as foreign arrays and used in numerical analysis via GSLL.&lt;/p&gt; &#xA;&lt;p&gt;For examples of use of column-major-tables see [[file:user/example1/README.org][this file]], and other lisp and png files in that directory.&lt;/p&gt; &#xA;&lt;p&gt;I am currently investigating the following use of numeric table:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;numeric table as a data frame to hold multiple columns of data&lt;/li&gt; &#xA; &lt;li&gt;A recursive structure of data frame to hold multiple data frames, all related by a common thread&lt;/li&gt; &#xA; &lt;li&gt;data frames and recursive data frames as a basic data structure for the grammar of graphics&lt;/li&gt; &#xA; &lt;li&gt;These topics are discussed in [[file:doc/data-frames%2Bgog.org][this document]].&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;*** Initialization of a column-major-table&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;The table contents can be specified in three manners:&#xA;- ~add-row~, row-by-row method&#xA;- ~set-column~, set-column method&#xA;- ~add-column~ *not implemented*&#xA;- ~set-value~, any&#xA;&#xA;  &#xA;The table can be initialized as follows&#xA;#+BEGIN_SRC lisp&#xA;  (make-table &#39;column-major-table schema)&#xA;  (make-table &#39;column-major-table schema row-count)&#xA;#+END_SRC&#xA;The first method initializes the table so that ~add-row~ and&#xA;~set-column~ are operational.  In the first method, internally,&#xA;spine is initialized with empty adjustable vectors.  These are&#xA;extended as rows are added setting the mode to row-by-row, or&#xA;overwritten by columns, setting the mode to set-column.&#xA;&#xA;The second method initializes the table so that ~set-column~ and&#xA;~set-value~ are operational.  Internally, the storage is&#xA;initialized to a series of empty column vectors.  ~set-value~ can&#xA;operate on them.&#xA;&#xA;The table cannot be created pre-loaded with data.  This effect&#xA;can be achieved by a user function or macro that creates a new&#xA;table and then inserts contents into it.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;**** Internal operation&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Documentation&lt;/p&gt; &lt;p&gt;Documentation is maintained for users and separately for developers/maintainers. The documentation sources are in the &lt;del&gt;doc&lt;/del&gt; directory. The html files are in the &lt;del&gt;documentation&lt;/del&gt; directory. The documentation is not yet complete.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Architecture&lt;/p&gt; &lt;p&gt;I see this library supporting several types of table formats. They will be unified by a uniform interface (as much as possible). To that end, there is a section of the library that deals with base class and generic function definitions.&lt;/p&gt; &lt;p&gt;These are then specialized for various table types.&lt;/p&gt; &lt;p&gt;Currently, I support only one table type, &lt;del&gt;column-major-table&lt;/del&gt;. The data is stored as nested vectors. Top level vector holds the columns. Each column is stored in a vector. The vectors can be either native CL or &lt;del&gt;grid&lt;/del&gt;&#39;s foreign-array.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Note&lt;/p&gt; &lt;p&gt;This library may become part of the data-frame capability of the [[https://groups.google.com/forum/?hl%3Den&amp;amp;fromgroups#!forum/lisp-stat][Common Lisp Statistics]] library.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>