<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Common Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-11-04T01:26:28Z</updated>
  <subtitle>Daily Trending of Common Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>fiddlerwoaroof/cl-git</title>
    <updated>2023-11-04T01:26:28Z</updated>
    <id>tag:github.com,2023-11-04:/fiddlerwoaroof/cl-git</id>
    <link href="https://github.com/fiddlerwoaroof/cl-git" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Common Lisp implementation of parsers for the git object file formats&lt;/p&gt;&lt;hr&gt;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;CL-GIT: the pure lisp interface to Git objects ** Introduction&lt;/p&gt; &lt;p&gt;Git libraries for Common Lisp common in a couple forms. Some attempt to wrap the libgit2 git library (e.g. &lt;a href=&#34;https://github.com/russell/cl-git&#34;&gt;https://github.com/russell/cl-git&lt;/a&gt;). Others wrap the git binary in a subprocess (e.g. &lt;a href=&#34;http://shinmera.github.io/legit/&#34;&gt;http://shinmera.github.io/legit/&lt;/a&gt;). Such libraries work well in cases where you control the environment but not all lisp programs run in such circumstances. This library, on the contrary, attempts to implement parsers for git&#39;s file formats as well as a thin &#34;porcelain&#34; interface for manipulating git objects.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Contributing&lt;/p&gt; &#xA;&lt;p&gt;This project uses (loosely) conventional-commits: &lt;a href=&#34;https://www.conventionalcommits.org/en/v1.0.0/&#34;&gt;https://www.conventionalcommits.org/en/v1.0.0/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Also, some use of &lt;a href=&#34;https://github.com/fiddlerwoaroof/git-issue&#34;&gt;https://github.com/fiddlerwoaroof/git-issue&lt;/a&gt; has been made&lt;/p&gt; &#xA;&lt;p&gt;To run the tests in a clean environment, you can do (this will eventually be a Github Action):&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC sh :noeval docker run &lt;br&gt; -v $PWD/docker-run:/code fiddlerwoaroof/sbcl-static:latest &lt;br&gt; --load /code/main.lisp #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;** Installation&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC sh :noeval % git clone &lt;a href=&#34;https://github.com/fiddlerwoaroof/fwoar.lisputils.git&#34;&gt;https://github.com/fiddlerwoaroof/fwoar.lisputils.git&lt;/a&gt; &#34;$HOME/quicklisp/local-projects/fwoar-lisputils&#34; % git clone &lt;a href=&#34;https://github.com/fiddlerwoaroof/cl-git.git&#34;&gt;https://github.com/fiddlerwoaroof/cl-git.git&lt;/a&gt; &#34;$HOME/quicklisp/local-projects/cl-git&#34; % sbcl --load &#34;$HOME/quicklisp/setup.lisp&#34; CL-USER&amp;gt; (ql:quickload :cl-git) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;** Example usage&lt;/p&gt; &#xA;&lt;p&gt;*** Get the commit id of the master branch for a specific repository:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;#+BEGIN_SRC lisp :exports both :results verbatim&#xA;  (co.fwoar.git:in-repository &#34;.&#34;)&#xA;  (co.fwoar.git:branch &#34;master&#34;) ;; the argument to branch defaults to &#34;master&#34;&#xA;#+END_SRC&#xA;&#xA;#+RESULTS:&#xA;: #&amp;lt;FWOAR.CL-GIT::LOOSE-REF f5f888 of #&amp;lt;GIT-REPOSITORY {700E286593}&amp;gt; {700E298AA3}&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;*** Show the commit message&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;#+BEGIN_SRC lisp :exports both :results verbatim&#xA;  (co.fwoar.git:in-repository &#34;.&#34;)&#xA;  (co.fwoar.git:component :message (co.fwoar.git:branch &#34;master&#34;))&#xA;#+END_SRC&#xA;&#xA;#+RESULTS:&#xA;: feat: repository generic function turns a repository into itself&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;*** Show the messages of the commit&#39;s parent&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;#+BEGIN_SRC lisp :exports both :results verbatim&#xA;  (co.fwoar.git:in-repository &#34;.&#34;)&#xA;  (let* ((branch (co.fwoar.git:branch &#34;master&#34;))&#xA;         (parents (co.fwoar.git:parents branch)))&#xA;    (mapcar (lambda (it)&#xA;              (co.fwoar.git:component :message it))&#xA;            parents))&#xA;#+END_SRC&#xA;&#xA;#+RESULTS:&#xA;: (&#34;feat: fix graphing&#xA;: &#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;*** Show the files in a commit - Note taken on [2020-11-15 Sun 01:49] \ If the table comes out wrong, =&lt;em&gt;print-case&lt;/em&gt;= must be =:downcase=&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;#+BEGIN_SRC lisp :exports both :results table :hlines yes :post proc(data=*this*)&#xA;  (co.fwoar.git:in-repository &#34;.&#34;)&#xA;  (list* &#39;(&#34;Name&#34; &#34;Mode&#34; &#34;Hash&#34;)&#xA;         &#39;hline&#xA;         (co.fwoar.git:git (branch &#34;master&#34;)&#xA;                           (component :tree :entries)&#xA;                           (map (juxt (component :name)&#xA;                                      (component :mode)&#xA;                                      (component :hash)))))&#xA;#+END_SRC&#xA;&#xA;#+RESULTS:&#xA;| Name                |   Mode | Hash                                     |&#xA;|---------------------+--------+------------------------------------------|&#xA;| .github             |  40000 | 8a2d4357c2ecb8658006f638df28dea78079e438 |&#xA;| .gitignore          | 100644 | 8a9fe9f77149f74fed5c05388be8e5ffd4a31678 |&#xA;| .projectile         | 100644 | e69de29bb2d1d6434b8b29ae775ad8c2e48c5391 |&#xA;| LICENSE             | 100644 | 0306819e780fa57dc3bf6b99a0a059670b605ae0 |&#xA;| README.org          | 100644 | 228549f2ddd3fff60fa45ca13c4dd1d84476ae0e |&#xA;| branch.lisp         | 100644 | 6ee2b1e254e7895d55ecd534b2fa16267ec14389 |&#xA;| co.fwoar.cl-git.asd | 100644 | b46a0006889e11b609a3712e3580056613e29adc |&#xA;| commit.lisp         | 100644 | 01a443c09232db495b1babfeef98e708a0d3e0b5 |&#xA;| delta.lisp          | 100644 | 1e6be7f65fa732646316d72a9a725c0145a84758 |&#xA;| docker-run          |  40000 | 4703dc01430d67c5d60f00ad412fddfa22f60764 |&#xA;| docs                |  40000 | 9fe62496fc4ab6debd3c5e1b26f844b5566c36d5 |&#xA;| extract.lisp        | 100644 | c3acabc2c2b7ec9427ccf9a96bce582c52f985cd |&#xA;| git.lisp            | 100644 | b28579d23e87866f05635b666074e445ba26883f |&#xA;| graph.lisp          | 100644 | 513606d9eb9eb9a5a3891d7307cb071034d84b59 |&#xA;| model.lisp          | 100644 | f305b81a1781579c5570d5bc5209048a0e3fe9dc |&#xA;| package.lisp        | 100644 | c532eeeeca12e48e02999ce0ffcbd0bba8768867 |&#xA;| porcelain.lisp      | 100644 | 00ecaacea7ebcd57746198b248c3a3f5b89f21a5 |&#xA;| protocol.lisp       | 100644 | a9c317a589516da0a9d88113bb56a28b73f2d41e |&#xA;| repository.lisp     | 100644 | f367c22c6c7fb59fec1b514f2fe71fe78465e878 |&#xA;| tests               |  40000 | 5d7ec1c0804dc910ddd9b42c5e53552034aaccac |&#xA;| tree.lisp           | 100644 | c798b0c4d0b5f552548bac98f44b5b5c19334e66 |&#xA;| types.lisp          | 100644 | 3f53e0f33ee260a962b97ef26de1d66b32a12a15 |&#xA;| undelta.lisp        | 100644 | ae0a070133d1a14d6e940a0f790f40b37e885b22 |&#xA;| util.lisp           | 100644 | 02cf7436032dd6adec92d42d3ed9b7f6307860f7 |&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;*** Show the files that match a pattern - Note taken on [2020-11-15 Sun 01:49] \ If the table comes out wrong, =&lt;em&gt;print-case&lt;/em&gt;= must be =:downcase=&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;#+BEGIN_SRC lisp :exports both :results table :hlines yes :post proc(data=*this*)&#xA;  (co.fwoar.git:with-repository (&#34;.&#34;)&#xA;    (let* ((branch (co.fwoar.git:branch &#34;master&#34;))&#xA;           (tree (co.fwoar.git:tree branch))&#xA;           (tree-entries (co.fwoar.git:filter-tree &#34;^.....?[.]lisp&#34; tree)))&#xA;      (flet ((component (component)&#xA;               (lambda (it)&#xA;                 (co.fwoar.git:component component it))))&#xA;        (list* &#39;(&#34;Name&#34; &#34;Mode&#34; &#34;Hash&#34;)&#xA;               &#39;hline&#xA;               (mapcar (data-lens:juxt (component :name)&#xA;                                       (component :mode)&#xA;                                       (component :hash))&#xA;                       tree-entries)))))&#xA;#+END_SRC&#xA;&#xA;#+RESULTS:&#xA;| Name       |   Mode | Hash                                     |&#xA;|------------+--------+------------------------------------------|&#xA;| delta.lisp | 100644 | 1e6be7f65fa732646316d72a9a725c0145a84758 |&#xA;| graph.lisp | 100644 | 513606d9eb9eb9a5a3891d7307cb071034d84b59 |&#xA;| model.lisp | 100644 | f305b81a1781579c5570d5bc5209048a0e3fe9dc |&#xA;| tree.lisp  | 100644 | c798b0c4d0b5f552548bac98f44b5b5c19334e66 |&#xA;| types.lisp | 100644 | 3f53e0f33ee260a962b97ef26de1d66b32a12a15 |&#xA;| util.lisp  | 100644 | 02cf7436032dd6adec92d42d3ed9b7f6307860f7 |&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;** Partially Implemented:&lt;/p&gt; &#xA;&lt;p&gt;*** Delta refs Git uses a [[https://git-scm.com/docs/pack-format#_deltified_representation][delta calculation]] routine to compress some of the blobs in a pack file. This delta stores a reference to a base object and a sequence of commands for transforming the base object into the new object. My plan to support this is to first just extract the commands from the pack file and store them as a [[file:delta.lisp::(defclass delta () ((%repository :initarg :repository :reader repository) (%base :initarg :base :reader base) (%commands :initarg :commands :reader commands)))][delta object]]. When this works adequately, I&#39;ll write an interpreter to do the actual merge.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;A workaround for the moment is to manually unpack the pack files:&#xA;&#xA;#+BEGIN_SRC sh :noeval&#xA;  mkdir tmp&#xA;  mv .git/objects/pack/* tmp&#xA;  for pack in tmp/*.pack; do&#xA;    git unpack-objects &amp;lt; &#34;$pack&#34;;&#xA;  done&#xA;#+END_SRC&#xA;&#xA;Or, you can undeltify the packs by, first unpacking the packfile as above and then doing:&#xA;&#xA;#+BEGIN_SRC sh :noeval&#xA;  git repack --window=0&#xA;#+END_SRC&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;*** git:git porcelain I have some thoughts abound a =(git:git ...)= form that can be used as a [[https://github.com/shinmera/lquery.git][lQuery-like]] DSL for manipulating git repositories, and this is partially implemented in [[file+emacs:./porcelain.lisp][porcelain.lisp]], but the details need more thought before it is ready.&lt;/p&gt; &#xA;&lt;p&gt;** TODOs *** TODO start implementing Pharo-like git integration (read-only first, commits later)&lt;/p&gt; &#xA;&lt;p&gt;#+name: proc #+begin_src emacs-lisp :var data=() (mapcar (lambda (it) (if (equal it &#39;HLINE) &#39;hline it)) data) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;#+RESULTS: proc&lt;/p&gt;</summary>
  </entry>
</feed>