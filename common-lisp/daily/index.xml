<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Common Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-04-05T01:26:24Z</updated>
  <subtitle>Daily Trending of Common Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>eschulte/memoize</title>
    <updated>2023-04-05T01:26:24Z</updated>
    <id>tag:github.com,2023-04-05:/eschulte/memoize</id>
    <link href="https://github.com/eschulte/memoize" rel="alternate"></link>
    <summary type="html">&lt;p&gt;thread safe function memoization&lt;/p&gt;&lt;hr&gt;&lt;p&gt;MEMOIZE - thread safe function memoization&lt;/p&gt; &#xA;&lt;p&gt;A tiny memoization library built on FLEXI-STREAMS and CL-STORE. This uses implementation-specific (currently only supports SBLC) thread safe hashes to ensure thread safe memoization.&lt;/p&gt; &#xA;&lt;p&gt;For more information see &lt;a href=&#34;http://eschulte.github.com/memoize&#34;&gt;http://eschulte.github.com/memoize&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>bld/bld-maxima</title>
    <updated>2023-04-05T01:26:24Z</updated>
    <id>tag:github.com,2023-04-05:/bld/bld-maxima</id>
    <link href="https://github.com/bld/bld-maxima" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Common Lisp interface to Maxima. Runs Maxima in batch mode, sending Maxima or lisp expressions to be evaluated, or spawns Maxima as a client and communicates with it over a socket.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;bld-maxima&lt;/h1&gt; &#xA;&lt;p&gt;BLD-MAXIMA runs a Maxima process in the background with a socket connection through with commands and Lisp math code can be sent for evaluation. It includes translation of Lisp math expressions to Maxima for algebraic simplification. Lisp forms that aren&#39;t in the translation table are identified and treated as symbols in Maxima. Depends on CL-PPCRE for translating Lisp -&amp;gt; Maxima -&amp;gt; Lisp. Currently, only SBCL is supported, using SB-EXT:RUN-PROGRAM to run Maxima in the background. This has been tested on both Win32 and Linux (both X86-64). The WITH-MAXIMA macro is provided to start &amp;amp; shutdown the Maxima process around whatever expressions are passed to it.&lt;/p&gt; &#xA;&lt;h2&gt;Routines&lt;/h2&gt; &#xA;&lt;p&gt;Allow running a single Maxima process and sending it commands or lisp math code to simplify over a network socket. Depends on USOCKET. Requires MAXIMA-START to run a socket connected Maxima session, and MAXIMA-SHUTDOWN once finished sending computations. Or, run inside WITH-MAXIMA macro.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;CL-USER&amp;gt; (bld-maxima:maxima-start)&#xA;(((%I1) (%O1) FALSE)&#xA; ((%I2) (%O2) &#34;/usr/share/maxima/5.20.1/share/linearalgebra/linearalgebra.mac&#34;))&#xA;CL-USER&amp;gt; (bld-maxima:simp &#39;(+ (aref a 2) (aref a 2)))&#xA;(* 2 (AREF A 2))&#xA;16&#xA;CL-USER&amp;gt; (bld-maxima:maxima-shutdown)&#xA;T&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, you can run these routines inside the WITH-MAXIMA macro:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;CL-USER&amp;gt; (with-maxima&#xA;            (simp &#39;(+ a a)))&#xA;(* 2 A)&#xA;CL-USER&amp;gt; &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Also, trigonometric simplification functions are available corresponding to those in Maxima:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;CL-USER&amp;gt; (with-maxima (trigreduce &#39;(expt (cos x) 2)))&#xA;(* (/ 1 2) (+ 1 (COS (* 2 X))))&#xA;CL-USER&amp;gt; (with-maxima (trigexpand &#39;(cos (* 2 x))))&#xA;(+ (EXPT (COS X) 2) (* -1 (EXPT (SIN X) 2)))&#xA;CL-USER&amp;gt; (with-maxima (trigsimp &#39;(+ (expt (sin x) 2) (expt (cos x) 2))))&#xA;1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Delay&lt;/h2&gt; &#xA;&lt;p&gt;Wrapping the &#39;delay&#39; macro around a &#39;simp expression prevents evaluation so it can be deferred until later, which can speed computations in certain circumstances because of the overhead incurred by &#39;simp.&lt;/p&gt;</summary>
  </entry>
</feed>