<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Common Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-03-18T01:31:42Z</updated>
  <subtitle>Daily Trending of Common Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>bohonghuang/cl-universal-tween-engine</title>
    <updated>2023-03-18T01:31:42Z</updated>
    <id>tag:github.com,2023-03-18:/bohonghuang/cl-universal-tween-engine</id>
    <link href="https://github.com/bohonghuang/cl-universal-tween-engine" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Common Lisp port of the Universal Tween Engine&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#+TITLE: cl-universal-tween-engine This is the [[https://github.com/AurelienRibon/universal-tween-engine][Universal Tween Engine]] ported version for Common Lisp, including some bug fixes for the original version.&lt;/p&gt; &#xA;&lt;p&gt;[[file:demo/screenshots/easings.gif]]&lt;/p&gt; &#xA;&lt;p&gt;[[file:demo/screenshots/timeline.gif]]&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Usage The APIs is optimized based on the original Java version to better fit Lisp programming conventions. Considering this example from the original Java version:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;#+BEGIN_SRC java Timeline.createSequence() .push(Tween.set(myObject, OPACITY).target(0)) .push(Tween.set(myObject, SCALE).target(0, 0)) .beginParallel() .push(Tween.to(myObject, OPACITY, 0.5f).target(1).ease(Quad.INOUT)) .push(Tween.to(myObject, SCALE, 0.5f).target(1, 1).ease(Quad.INOUT)) .end() .pushPause(1.0f) .push(Tween.to(myObject, POSITION_X, 0.5f).target(100).ease(Quad.INOUT)) .push(Tween.to(myObject, ROTATION, 0.5f).target(360).ease(Quad.INOUT)) .repeat(5, 0.5f) .start(myManager); #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;whose equivalent Lisp code can be:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC lisp (defstruct object (opacity 0.0 :type single-float) (scale-x 0.0 :type single-float) (scale-y 0.0 :type single-float) (position-x 0.0 :type single-float) (position-y 0.0 :type single-float) (rotation 0.0 :type single-float))&lt;/p&gt; &#xA;&lt;p&gt;(let ((my-object (make-object))) (ute:start (ute:timeline (:sequence (:to (((object-opacity my-object)) ; places ; waypoints ... (0.0))) ; targets (:to (((object-scale-x my-object) (object-scale-y my-object)) (0.0 0.0))) (:parallel (:to (((object-opacity my-object)) (1.0)) :duration 0.5 :ease #&#39;ute:quad-inout) (:to (((object-scale-x my-object) (object-scale-y my-object)) (1.0 1.0)) :duration 0.5 :ease #&#39;ute:quad-inout)) (:pause 1.0) (:to (((object-position-x my-object)) (100.0)) :duration 0.5 :ease #&#39;ute:quad-inout) (:to (((object-rotation my-object)) (360.0)) :duration 0.5 :ease #&#39;ute:quad-inout)) :repeat (:count 5 :delay 0.5)))) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;For more usage examples, please refer to the [[file:demo/package.lisp][demo]], which requires installation of [[https://github.com/longlene/cl-raylib][cl-raylib]] and can be launched with:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC lisp (ql:quickload :universal-tween-engine/demo) (ute.demo:main) #+END_SRC&lt;/p&gt;</summary>
  </entry>
</feed>