<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Common Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-12-05T01:32:40Z</updated>
  <subtitle>Daily Trending of Common Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Gopiandcode/emacs-viewer</title>
    <updated>2022-12-05T01:32:40Z</updated>
    <id>tag:github.com,2022-12-05:/Gopiandcode/emacs-viewer</id>
    <link href="https://github.com/Gopiandcode/emacs-viewer" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A web frontend for your Org-files (100% faithful to GNU+Emacs!)&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;NOTE: THIS IS A MIRROR, REAL DEVELOPMENT HAPPENS ON &lt;a href=&#34;https://codeberg.org/gopiandcode/emacs-viewer&#34;&gt;https://codeberg.org/gopiandcode/emacs-viewer&lt;/a&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Emacs Viewer&lt;/h1&gt; &#xA;&lt;p&gt;A web frontend for your Org files! (100% faithful to GNU+Emacs!)&lt;/p&gt; &#xA;&lt;h2&gt;Screenshots&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Gopiandcode/emacs-viewer/master/images/intro-gif.gif&#34; alt=&#34;intro_gif&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Damn, feels good to be FREE (AGPL3+).&lt;/p&gt; &#xA;&lt;p&gt;Awesome features!&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Live updating: &lt;img src=&#34;https://raw.githubusercontent.com/Gopiandcode/emacs-viewer/master/images/live-updating.gif&#34; alt=&#34;live_updating&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Clocking support: &lt;img src=&#34;https://raw.githubusercontent.com/Gopiandcode/emacs-viewer/master/images/clocking-support.gif&#34; alt=&#34;clocking_support&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Filtering by completed tasks: &lt;img src=&#34;https://raw.githubusercontent.com/Gopiandcode/emacs-viewer/master/images/completed-tasks.gif&#34; alt=&#34;completed_tasks&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Full text search over org headlines: &lt;img src=&#34;https://raw.githubusercontent.com/Gopiandcode/emacs-viewer/master/images/full-text-search.gif&#34; alt=&#34;full_text_search&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Filtering by tags : &lt;img src=&#34;https://raw.githubusercontent.com/Gopiandcode/emacs-viewer/master/images/tag-support.gif&#34; alt=&#34;tag_filtering&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Project setup&lt;/h2&gt; &#xA;&lt;p&gt;Emacs_viewer requires OCaml 4.14.0 to build, to install the project dependencies, simply run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;opam install --deps-only .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then to build the executable, simply run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;dune build --release ./bin/main.exe&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Copy the executable in &lt;code&gt;./_build/default/bin/main.exe&lt;/code&gt; to somewhere convenient with the name &lt;code&gt;emacs_viewer&lt;/code&gt; (on your path), and run to your hearts content!&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./emacs_viewer --help&#xA;&#xA;NAME emacs-viewer&#xA;&#xA;SYNOPSIS&#xA;       emacs-viewer [--client=VAL] [--debug] [--port=VAL] [OPTION]â€¦&#xA;&#xA;OPTIONS&#xA;       -c VAL, --client=VAL&#xA;           Command to use for Emacsclient, defaults to emacsclient.emacs.&#xA;&#xA;       -D, --debug&#xA;           Whether to run in debug mode.&#xA;&#xA;       -p VAL, --port=VAL&#xA;           Port to run server on, defaults to 8080.&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Developer setup&lt;/h2&gt; &#xA;&lt;p&gt;Then to build and run the tests:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;opam exec -- dune build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Finally, to run the tool:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;opam exec -- dune exec ./bin/main.exe -- &amp;lt;options-go-here&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For development, we provide an OCaml script that uses inotify to rebuild and rerun the project automatically when the sources change:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;opam exec -- dune exec ./scripts/run_and_rebuild.exe&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Project structure&lt;/h2&gt; &#xA;&lt;p&gt;The project is organised as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;.&#xA;|-- LICENSE&#xA;|-- bin/                         -- CLI &amp;amp; entry point&#xA;|-- data/                        -- generic representation of Org data in OCaml&#xA;|-- js/                          -- frontend using Bonsai&#xA;|-- lib/                         -- Dream server&#xA;|-- scripts/                     -- Utility tools for development&#xA;|-- styles/                      -- Project styling&#xA;|-- test/                        -- Tests&#xA;|-- dune&#xA;`-- dune-project&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>Shirakumo/keygen</title>
    <updated>2022-12-05T01:32:40Z</updated>
    <id>tag:github.com,2022-12-05:/Shirakumo/keygen</id>
    <link href="https://github.com/Shirakumo/keygen" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A software distribution management system through keys&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
</feed>