<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Common Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-10-31T01:32:48Z</updated>
  <subtitle>Daily Trending of Common Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>facts-db/cl-facts</title>
    <updated>2022-10-31T01:32:48Z</updated>
    <id>tag:github.com,2022-10-31:/facts-db/cl-facts</id>
    <link href="https://github.com/facts-db/cl-facts" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Graph database in Common Lisp&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Facts&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;1.1 The world is the totality of facts, not of things.&lt;/p&gt; &#xA; &lt;p&gt;-- Ludwig Wittgenstein, Tractatus Logico Philosophicus&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Facts is a small in-memory graph database for Common Lisp. It features :&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;a triple store based on unlabelled skip lists&lt;/li&gt; &#xA; &lt;li&gt;a very simple query language (facts:with)&lt;/li&gt; &#xA; &lt;li&gt;transactions using rollback functions&lt;/li&gt; &#xA; &lt;li&gt;logging and replay of transactions to/from disk&lt;/li&gt; &#xA; &lt;li&gt;dumping and loading the database to/from disk&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;You will need :&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/cl-facts/lessp&#34;&gt;https://github.com/cl-facts/lessp&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/cl-facts/rollback&#34;&gt;https://github.com/cl-facts/rollback&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;FACTS:ADD &amp;amp;rest SPECS&lt;/h3&gt; &#xA;&lt;p&gt;Adds facts (triples) to the database. Triples can be grouped by subject.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-common-lisp&#34;&gt;(facts:add (&#34;Blade Runner&#34; :is-a :movie&#xA;                           :director &#34;Ridley Scott&#34;&#xA;                           :actor &#34;Harison Ford&#34;&#xA;                           :actor &#34;Rutger Hauer&#34;)&#xA;           (&#34;Snow White&#34; :is-a :movie&#xA;                         :director &#34;William Cottrell&#34;&#xA;                         :director &#34;David Hand&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-common-lisp&#34;&gt;(facts:add (?movie :is-a :movie&#xA;                   :title &#34;Blade Runner&#34;&#xA;                   :director &#34;Ridley Scott&#34;&#xA;                   :actor &#34;Harrison Ford&#34;&#xA;                   :actor &#34;Rutger Hauer&#34;))&#xA;&#xA;(facts:add (?movie :is-a :movie&#xA;                   :title &#34;Snow White and the Seven Dwarfs&#34;&#xA;                   :director &#34;William Cottrell&#34;&#xA;                   :director &#34;David Hand&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The second version with &lt;code&gt;?movie&lt;/code&gt; will generate an anonymous symbol prefixed with &lt;code&gt;movie-&lt;/code&gt;. It is considered a more clean and efficient way to abstract identifiers.&lt;/p&gt; &#xA;&lt;h3&gt;FACTS:RM &amp;amp;rest SPECS&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-common-lisp&#34;&gt;(facts:rm (?movie :actor &#34;Harison Ford&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;FACTS:WITH SPECS &amp;amp;body BODY&lt;/h3&gt; &#xA;&lt;p&gt;To follow Wittgenstein&#39;s view of the world, all queries get turned into testing the presence or absence of triples (facts).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-common-lisp&#34;&gt;(defun movie-title (movie)&#xA;  (facts:with ((movie :is-a :movie&#xA;                      :title ?title))&#xA;    (return ?title)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;is equivalent to&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-common-lisp&#34;&gt;(defun movie-title (movie)&#xA;  (facts:with ((movie :is-a :movie)&#xA;               (movie :title ?title))&#xA;    (return ?title)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;which is itself equivalent to&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-common-lisp&#34;&gt;(defun movie-title (movie)&#xA;  (facts:with ((movie :is-a :movie))&#xA;    (facts:with ((movie :title ?title))&#xA;      (return ?title))))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Multiple queries on the same subject can be grouped together easily :&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-common-lisp&#34;&gt;(facts:with ((?movie :is-a :movie&#xA;                     :title ?title&#xA;                     :director ?director))&#xA;  (format t &#34;~A directed ~A~%&#34; ?director ?title))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;FACTS:*DB*&lt;/h3&gt; &#xA;&lt;p&gt;The current facts database.&lt;/p&gt; &#xA;&lt;h3&gt;FACTS:CLEAR-DB&lt;/h3&gt; &#xA;&lt;p&gt;Clears the database from every facts.&lt;/p&gt; &#xA;&lt;h3&gt;FACTS:SAVE-DB &amp;amp;key INTO (READABLY T)&lt;/h3&gt; &#xA;&lt;p&gt;Dump the database facts into filespec INTO.&lt;/p&gt; &#xA;&lt;h3&gt;FACTS:LOAD-DB SRC&lt;/h3&gt; &#xA;&lt;p&gt;Load the facts from SRC into *db*.&lt;/p&gt; &#xA;&lt;h3&gt;FACTS:WITH-TRANSACTION &amp;amp;body BODY&lt;/h3&gt; &#xA;&lt;p&gt;Enclose BODY database operations into a transaction.&lt;/p&gt; &#xA;&lt;p&gt;A transaction ensures that all database operations will succeed or be reverted using their respective rollback functions.&lt;/p&gt; &#xA;&lt;p&gt;Transactions can be nested safely.&lt;/p&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/RailsOnLisp/rol-server/raw/master/resource.lisp&#34;&gt;https://github.com/RailsOnLisp/rol-server/blob/master/resource.lisp&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lowh/mentats&#34;&gt;https://github.com/lowh/mentats&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>