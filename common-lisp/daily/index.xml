<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Common Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-07-08T01:33:38Z</updated>
  <subtitle>Daily Trending of Common Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>dnaeon/cl-jwk</title>
    <updated>2023-07-08T01:33:38Z</updated>
    <id>tag:github.com,2023-07-08:/dnaeon/cl-jwk</id>
    <link href="https://github.com/dnaeon/cl-jwk" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Common Lisp system for decoding public JSON Web Keys (JWK)&lt;/p&gt;&lt;hr&gt;&lt;ul&gt; &#xA; &lt;li&gt;cl-jwk&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;=cl-jwk= is a Common Lisp system for parsing public JSON Web Keys (JWK).&lt;/p&gt; &#xA;&lt;p&gt;The following JWK keys are supported by the system.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=RSA=&lt;/li&gt; &#xA; &lt;li&gt;=EC P-256=&lt;/li&gt; &#xA; &lt;li&gt;=EC P-384=&lt;/li&gt; &#xA; &lt;li&gt;=EC P-521=&lt;/li&gt; &#xA; &lt;li&gt;=EC secp256k1=&lt;/li&gt; &#xA; &lt;li&gt;=oct= (symmetric key)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Requirements&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[[https://www.quicklisp.org/beta/][Quicklisp]]&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Installation&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Clone the repo in your [[https://www.quicklisp.org/beta/faq.html][Quicklisp local-projects]] directory.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src lisp (ql:register-local-projects) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Then load the system.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src lisp (ql:quickload :cl-jwk) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;NOTE: =cl-jwk= uses features from latest =ironclad=, so make sure that you are using the latest =ironclad= release from Github, until it gets published on Quicklisp.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Usage&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In order to decode a public JWK key from a JSON object, simply call the =CL-JWK:DECODE= generic function.&lt;/p&gt; &#xA;&lt;p&gt;For instance, in order to decode one of the test keys used by the =cl-jwk.test= system, you can call =CL-JWK:DECODE= like this.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src lisp CL-USER&amp;gt; (defparameter &lt;em&gt;json-data&lt;/em&gt; (uiop:read-file-string (asdf:system-relative-pathname :cl-jwk.test &#34;tests/test-keys/rsa-3072-pub.json&#34;))) &lt;em&gt;JSON-DATA&lt;/em&gt; CL-USER&amp;gt; (cl-jwk:decode :json &lt;em&gt;json-data&lt;/em&gt;) #&amp;lt;CL-JWK.CORE:JWK {100510EB73}&amp;gt; #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Upon successful decoding of the JSON data the =CL-JWK:DECODE= method will return a =CL-JWK:JWK= class instance. Use the available readers to get more details about the decoded public key. The following reader methods are available for a =CL-JWK:JWK= instance.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=CL-JWK:JWK-KTY=&lt;/li&gt; &#xA; &lt;li&gt;=CL-JWK:JWK-USE=&lt;/li&gt; &#xA; &lt;li&gt;=CL-JWK:JWK-KID=&lt;/li&gt; &#xA; &lt;li&gt;=CL-JWK:JWK-ALG=&lt;/li&gt; &#xA; &lt;li&gt;=CL-JWK:JWK-KEY-OPS=&lt;/li&gt; &#xA; &lt;li&gt;=CL-JWK:JWK-KEY=&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The =CL-JWK:JWK-KEY= method returns an instance of an =ironclad= public key.&lt;/p&gt; &#xA;&lt;p&gt;You can also fetch public JWKs from an OpenID Provider. For example:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src lisp CL-USER&amp;gt; (defparameter &lt;em&gt;client&lt;/em&gt; (cl-jwk:make-client :hostname &#34;accounts.google.com&#34;)) &lt;em&gt;CLIENT&lt;/em&gt; CL-USER&amp;gt; (cl-jwk:public-keys &lt;em&gt;client&lt;/em&gt;) (#&amp;lt;CL-JWK.CORE:JWK {10021B5FD3}&amp;gt; #&amp;lt;CL-JWK.CORE:JWK {10021B6053}&amp;gt; #&amp;lt;CL-JWK.CORE:JWK {10021B60D3}&amp;gt;) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Token verification can be done using the =CL-JWK:VERIFY-TOKEN= generic function. =CL-JWK:VERIFY-TOKEN= is implemented for both =CL-JWK:JWK= and =CL-JWK:CLIENT= classes.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Tests&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The =cl-jwk= tests are provided as part of the =:cl-jwk.test= system.&lt;/p&gt; &#xA;&lt;p&gt;In order to run the tests you can evaluate the following expressions.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src lisp CL-USER&amp;gt; (ql:quickload :cl-jwk.test) CL-USER&amp;gt; (asdf:test-system :cl-jwk.test) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Or you can run the tests using the =scripts/run-tests.sh= shell script instead, e.g.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src shell env LISP=sbcl ./scripts/run-tests.sh #+end_src&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Contributing&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;=cl-jwk= is hosted on [[https://github.com/dnaeon/cl-jwk][Github]]. Please contribute by reporting issues, suggesting features or by sending patches using pull requests.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Authors&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Marin Atanasov Nikolov &amp;lt;[[mailto:&lt;a href=&#34;mailto:dnaeon@gmail.com&#34;&gt;dnaeon@gmail.com&lt;/a&gt;][&lt;a href=&#34;mailto:dnaeon@gmail.com&#34;&gt;dnaeon@gmail.com&lt;/a&gt;]]&amp;gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;License&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This project is Open Source and licensed under the [[http://opensource.org/licenses/BSD-2-Clause][BSD License]].&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>orodley/sokoban</title>
    <updated>2023-07-08T01:33:38Z</updated>
    <id>tag:github.com,2023-07-08:/orodley/sokoban</id>
    <link href="https://github.com/orodley/sokoban" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Common Lisp implementation of sokoban&lt;/p&gt;&lt;hr&gt;&lt;p&gt;Inspired by the live coding of sokoban at: &lt;a href=&#34;http://codinguncut.com/sokoban-part-1-game-logic/&#34;&gt;http://codinguncut.com/sokoban-part-1-game-logic/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Deliberately written as quickly as possible, so the code is quite messy&lt;/p&gt;</summary>
  </entry>
</feed>