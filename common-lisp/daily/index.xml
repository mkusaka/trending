<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Common Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-11-02T01:25:43Z</updated>
  <subtitle>Daily Trending of Common Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>clasp-developers/trivial-utf-8</title>
    <updated>2023-11-02T01:25:43Z</updated>
    <id>tag:github.com,2023-11-02:/clasp-developers/trivial-utf-8</id>
    <link href="https://github.com/clasp-developers/trivial-utf-8" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Mirror of https://gitlab.common-lisp.net/trivial-utf-8/trivial-utf-8.git&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a id=&#34;x-28TRIVIAL-UTF-8-3A-40TRIVIAL-UTF-8-MANUAL-20MGL-PAX-3ASECTION-29&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Trivial UTF-8 Manual&lt;/h1&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/clasp-developers/trivial-utf-8/master/#x-28-22trivial-utf-8-22-20ASDF-2FSYSTEM-3ASYSTEM-29&#34; title=&#34;&amp;quot;trivial-utf-8&amp;quot; ASDF/SYSTEM:SYSTEM&#34;&gt;1 The trivial-utf-8 ASDF System&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/clasp-developers/trivial-utf-8/master/#x-28TRIVIAL-UTF-8-3A-40TRIVIAL-UTF-8-INTRODUCTION-20MGL-PAX-3ASECTION-29&#34; title=&#34;Introduction&#34;&gt;2 Introduction&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/clasp-developers/trivial-utf-8/master/#x-28TRIVIAL-UTF-8-3A-40TRIVIAL-UTF-8-LINKS-20MGL-PAX-3ASECTION-29&#34; title=&#34;Links&#34;&gt;3 Links&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/clasp-developers/trivial-utf-8/master/#x-28TRIVIAL-UTF-8-3A-40TRIVIAL-UTF-8-REFERENCE-20MGL-PAX-3ASECTION-29&#34; title=&#34;Reference&#34;&gt;4 Reference&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h6&gt;[in package TRIVIAL-UTF-8]&lt;/h6&gt; &#xA;&lt;p&gt;&lt;a id=&#34;x-28-22trivial-utf-8-22-20ASDF-2FSYSTEM-3ASYSTEM-29&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;1 The trivial-utf-8 ASDF System&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Description: A small library for doing UTF-8-based input and output.&lt;/li&gt; &#xA; &lt;li&gt;Licence: ZLIB&lt;/li&gt; &#xA; &lt;li&gt;Author: Marijn Haverbeke &lt;a href=&#34;mailto:marijnh@gmail.com&#34;&gt;marijnh@gmail.com&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Maintainer: GÃ¡bor Melis &lt;a href=&#34;mailto:mega@retes.hu&#34;&gt;mega@retes.hu&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Homepage: &lt;a href=&#34;https://common-lisp.net/project/trivial-utf-8/&#34;&gt;https://common-lisp.net/project/trivial-utf-8/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Bug tracker: &lt;a href=&#34;https://gitlab.common-lisp.net/trivial-utf-8/trivial-utf-8/-/issues&#34;&gt;https://gitlab.common-lisp.net/trivial-utf-8/trivial-utf-8/-/issues&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Source control: &lt;a href=&#34;https://gitlab.common-lisp.net/trivial-utf-8/trivial-utf-8.git&#34;&gt;GIT&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a id=&#34;x-28TRIVIAL-UTF-8-3A-40TRIVIAL-UTF-8-INTRODUCTION-20MGL-PAX-3ASECTION-29&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;2 Introduction&lt;/h2&gt; &#xA;&lt;p&gt;Trivial UTF-8 is a small library for doing UTF-8-based in- and output on a Lisp implementation that already supports Unicode - meaning &lt;a href=&#34;http://www.lispworks.com/documentation/HyperSpec/Body/f_char_c.htm&#34; title=&#34;CHAR-CODE (MGL-PAX:CLHS FUNCTION)&#34;&gt;&lt;code&gt;CHAR-CODE&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;http://www.lispworks.com/documentation/HyperSpec/Body/f_code_c.htm&#34; title=&#34;CODE-CHAR (MGL-PAX:CLHS FUNCTION)&#34;&gt;&lt;code&gt;CODE-CHAR&lt;/code&gt;&lt;/a&gt; deal with Unicode character codes.&lt;/p&gt; &#xA;&lt;p&gt;The rationale for the existence of this library is that while Unicode-enabled implementations usually do provide some kind of interface to dealing with character encodings, these are typically not terribly flexible or uniform.&lt;/p&gt; &#xA;&lt;p&gt;The Babel library solves a similar problem while understanding more encodings. Trivial UTF-8 was written before Babel existed, but for new projects you might be better off going with Babel. The one plus that Trivial UTF-8 has is that it doesn&#39;t depend on any other libraries.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a id=&#34;x-28TRIVIAL-UTF-8-3A-40TRIVIAL-UTF-8-LINKS-20MGL-PAX-3ASECTION-29&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;3 Links&lt;/h2&gt; &#xA;&lt;p&gt;Here is the &lt;a href=&#34;https://gitlab.common-lisp.net/trivial-utf-8/trivial-utf-8&#34;&gt;official repository&lt;/a&gt; and the &lt;a href=&#34;http://melisgl.github.io/mgl-pax-world/trivial-utf-8-manual.html&#34;&gt;HTML documentation&lt;/a&gt; for the latest version.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a id=&#34;x-28TRIVIAL-UTF-8-3A-40TRIVIAL-UTF-8-REFERENCE-20MGL-PAX-3ASECTION-29&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;4 Reference&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a id=&#34;x-28TRIVIAL-UTF-8-3AUTF-8-BYTE-LENGTH-20FUNCTION-29&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;[function] &lt;strong&gt;UTF-8-BYTE-LENGTH&lt;/strong&gt; &lt;em&gt;STRING&lt;/em&gt;&lt;/p&gt; &lt;p&gt;Calculate the amount of bytes needed to encode &lt;code&gt;STRING&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a id=&#34;x-28TRIVIAL-UTF-8-3ASTRING-TO-UTF-8-BYTES-20FUNCTION-29&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;[function] &lt;strong&gt;STRING-TO-UTF-8-BYTES&lt;/strong&gt; &lt;em&gt;STRING &amp;amp;KEY NULL-TERMINATE&lt;/em&gt;&lt;/p&gt; &lt;p&gt;Convert &lt;code&gt;STRING&lt;/code&gt; into an array of unsigned bytes containing its UTF-8 representation. If &lt;code&gt;NULL-TERMINATE&lt;/code&gt;, add an extra 0 byte at the end.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a id=&#34;x-28TRIVIAL-UTF-8-3AUTF-8-GROUP-SIZE-20FUNCTION-29&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;[function] &lt;strong&gt;UTF-8-GROUP-SIZE&lt;/strong&gt; &lt;em&gt;BYTE&lt;/em&gt;&lt;/p&gt; &lt;p&gt;Determine the amount of bytes that are part of the character whose encoding starts with &lt;code&gt;BYTE&lt;/code&gt;. May signal &lt;a href=&#34;https://raw.githubusercontent.com/clasp-developers/trivial-utf-8/master/#x-28TRIVIAL-UTF-8-3AUTF-8-DECODING-ERROR-20CONDITION-29&#34; title=&#34;TRIVIAL-UTF-8:UTF-8-DECODING-ERROR CONDITION&#34;&gt;&lt;code&gt;UTF-8-DECODING-ERROR&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a id=&#34;x-28TRIVIAL-UTF-8-3AUTF-8-BYTES-TO-STRING-20FUNCTION-29&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;[function] &lt;strong&gt;UTF-8-BYTES-TO-STRING&lt;/strong&gt; &lt;em&gt;BYTES &amp;amp;KEY (START 0) (END (LENGTH BYTES))&lt;/em&gt;&lt;/p&gt; &lt;p&gt;Convert the &lt;code&gt;START&lt;/code&gt;, &lt;code&gt;END&lt;/code&gt; subsequence of the array of &lt;code&gt;BYTES&lt;/code&gt; containing UTF-8 encoded characters to a &lt;a href=&#34;http://www.lispworks.com/documentation/HyperSpec/Body/t_string.htm&#34; title=&#34;STRING (MGL-PAX:CLHS CLASS)&#34;&gt;&lt;code&gt;STRING&lt;/code&gt;&lt;/a&gt;. The element type of &lt;code&gt;BYTES&lt;/code&gt; may be anything as long as it can be &lt;a href=&#34;http://www.lispworks.com/documentation/HyperSpec/Body/f_coerce.htm&#34; title=&#34;COERCE (MGL-PAX:CLHS FUNCTION)&#34;&gt;&lt;code&gt;COERCE&lt;/code&gt;&lt;/a&gt;d into an &lt;code&gt;(UNSIGNED-BYTES 8)&lt;/code&gt; array. May signal &lt;a href=&#34;https://raw.githubusercontent.com/clasp-developers/trivial-utf-8/master/#x-28TRIVIAL-UTF-8-3AUTF-8-DECODING-ERROR-20CONDITION-29&#34; title=&#34;TRIVIAL-UTF-8:UTF-8-DECODING-ERROR CONDITION&#34;&gt;&lt;code&gt;UTF-8-DECODING-ERROR&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a id=&#34;x-28TRIVIAL-UTF-8-3AREAD-UTF-8-STRING-20FUNCTION-29&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;[function] &lt;strong&gt;READ-UTF-8-STRING&lt;/strong&gt; &lt;em&gt;INPUT &amp;amp;KEY NULL-TERMINATED STOP-AT-EOF (CHAR-LENGTH -1) (BYTE-LENGTH -1)&lt;/em&gt;&lt;/p&gt; &lt;p&gt;Read UTF-8 encoded data from &lt;code&gt;INPUT&lt;/code&gt;, a byte stream, and construct a string with the characters found. When &lt;code&gt;NULL-TERMINATED&lt;/code&gt; is given, stop reading at a null character. If &lt;code&gt;STOP-AT-EOF&lt;/code&gt;, then stop at &lt;a href=&#34;http://www.lispworks.com/documentation/HyperSpec/Body/e_end_of.htm&#34; title=&#34;END-OF-FILE (MGL-PAX:CLHS CONDITION)&#34;&gt;&lt;code&gt;END-OF-FILE&lt;/code&gt;&lt;/a&gt; without raising an error. The &lt;code&gt;CHAR-LENGTH&lt;/code&gt; and &lt;code&gt;BYTE-LENGTH&lt;/code&gt; parameters can be used to specify the max amount of characters or bytes to read, where -1 means no limit. May signal &lt;a href=&#34;https://raw.githubusercontent.com/clasp-developers/trivial-utf-8/master/#x-28TRIVIAL-UTF-8-3AUTF-8-DECODING-ERROR-20CONDITION-29&#34; title=&#34;TRIVIAL-UTF-8:UTF-8-DECODING-ERROR CONDITION&#34;&gt;&lt;code&gt;UTF-8-DECODING-ERROR&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a id=&#34;x-28TRIVIAL-UTF-8-3AUTF-8-DECODING-ERROR-20CONDITION-29&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[condition] &lt;strong&gt;UTF-8-DECODING-ERROR&lt;/strong&gt; &lt;em&gt;&lt;a href=&#34;http://www.lispworks.com/documentation/HyperSpec/Body/e_smp_er.htm&#34; title=&#34;SIMPLE-ERROR (MGL-PAX:CLHS CONDITION)&#34;&gt;SIMPLE-ERROR&lt;/a&gt;&lt;/em&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h6&gt;[generated by &lt;a href=&#34;https://github.com/melisgl/mgl-pax&#34;&gt;MGL-PAX&lt;/a&gt;]&lt;/h6&gt;</summary>
  </entry>
</feed>