<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Common Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-10-23T01:33:02Z</updated>
  <subtitle>Daily Trending of Common Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>davazp/x-html-template</title>
    <updated>2022-10-23T01:33:02Z</updated>
    <id>tag:github.com,2022-10-23:/davazp/x-html-template</id>
    <link href="https://github.com/davazp/x-html-template" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A fork of HTML-TEMPLATES to support computed expressions&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#+title: X-HTML-TEMPLATE Library #+startup: showall content&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;X-HTML-TEMPLATE Library&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Introduction /X-HTML-TEMPLATE/ library is a little fork of the Common Lisp library [[http://weitz.de/html-template/][html-template]] which adds support for computed expressions while keeps mostly compatible. See the differences with /html-template/ [[Differences with html-template][below]].&lt;/p&gt; &#xA;&lt;p&gt;I wrote this because we were using too many html-templates and migrating to a new template system was not worth. We wanted some extra flexibility however and it made our lives easier.&lt;/p&gt; &#xA;&lt;p&gt;** Using x-html-template The /HTML-TEMPLATE/ API is untouched (see its documentation if you are not used /HTML-TEMPLATE/ before), except the system name and packages were renamed to /X-HTML-TEMPLATE/, to avoid possible collisions. A package nickname =x-template= is also provided as shortcut.&lt;/p&gt; &#xA;&lt;p&gt;/X-HTML-TEMPLATE/ changes the semantic of the template attributes. The tags accept expressions instead of symbols. The expressions follow the following syntax:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_EXAMPLE expression ::= &#39;literal&#39; | &#34;literal&#34; | symbol | symbol(expression_1,expression_2,..,expression_N) #+END_EXAMPLE&lt;/p&gt; &#xA;&lt;p&gt;A hypothetical template could look like&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_EXAMPLE&lt;/p&gt; &#xA;&lt;!-- tmpl_loop sort(users,&#39;name&#39;) --&gt; &#xA;&lt;pre&gt;&lt;code&gt;  &amp;lt;!-- tmpl_var escape-html(upcase(name)) --&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;!-- /tmpl_if --&gt; &#xA;&lt;!-- /tmpl_loop --&gt; &#xA;&lt;p&gt;#+END_EXAMPLE&lt;/p&gt; &#xA;&lt;p&gt;This change diverges from the philosophy of /HTML-TEMPLATE/ about separation of the code and the layout. However, this library does not provide harmful abstractions itself, but it offers the ability to provide them :-)&lt;/p&gt; &#xA;&lt;p&gt;I really think that used properly, the extensions can be useful.&lt;/p&gt; &#xA;&lt;p&gt;** Examples&lt;/p&gt; &#xA;&lt;p&gt;A simple use:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC common-lisp (with-output-to-string (&lt;em&gt;default-template-output&lt;/em&gt;) (fill-and-print-template &#34;&#xA; &lt;!-- tmpl_var html-escape(string) --&gt;&#34; (list :string &#34;0 &amp;lt;&amp;gt; 1&#34; :html-escape #&#39;escape-string-all))) #+END_SRC =&amp;gt; #+BEGIN_EXAMPLE &#34;0 &amp;amp;lt;&amp;amp;gt; 1&#34; #+END_EXAMPLE&lt;/p&gt; &#xA;&lt;p&gt;*** Providing a default set of user-defined functions Sometimes, it is convenient to provide a default set of user-defined function values to the templates. You can set the special variable =&lt;em&gt;VALUE-ACCESS-FUNCTION&lt;/em&gt;= to provide them. The code would look like:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC common-lisp (defvar &lt;em&gt;x-template-default-values&lt;/em&gt; (list :html-escape #&#39;escape-string-all))&lt;/p&gt; &#xA;&lt;p&gt;(unless (boundp &#39;&lt;em&gt;original-value-access-function&lt;/em&gt;) (defvar &lt;em&gt;original-value-access-function&lt;/em&gt; ,&lt;em&gt;value-access-function&lt;/em&gt;))&lt;/p&gt; &#xA;&lt;p&gt;(setf &lt;em&gt;value-access-function&lt;/em&gt; (lambda (symbol values &amp;amp;optional in-loop) (or (funcall &lt;em&gt;original-value-access-function&lt;/em&gt; symbol values in-loop) (getf &lt;em&gt;x-template-default-values&lt;/em&gt; symbol)))) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;Then, we can write the above example without defining the html-escape function. #+BEGIN_SRC common-lisp (with-output-to-string (&lt;em&gt;default-template-output&lt;/em&gt;) (fill-and-print-template &#34;&#xA; &lt;!-- tmpl_var html-escape(string) --&gt;&#34; (list :string &#34;0 &amp;lt;&amp;gt; 1&#34;))) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;** Differences with html-template /X-HTML-TEMPLATE/ is not fully compatible with /HTML-TEMPLATE/, but it is in the common cases and porting your code should be trivial.&lt;/p&gt; &#xA;&lt;p&gt;*** Quoting attributes /HTML-TEMPLATE/ allows to quote an attribute as =&#xA; &lt;!-- tmpl_var &#39;foobar&#39; --&gt;= As &#39;foobar&#39; is a literal string in /X-HTML-TEMPLATE/, this code will not work in the same way. To port it, just remove the single or double quotes. However, if you are quoting the symbol because it contains spaces or non-allowed characters, then you will have to rename your symbol.&lt;/p&gt; &#xA;&lt;p&gt;*** White-spaces delimiters&lt;/p&gt; &#xA;&lt;p&gt;/HTML-TEMPLATE/ white-spaces delimiters after the template start marker are optional and you could omit them if you quote the parameters. In /X-HTML-TEMPLATE/, quoting parameters is not allowed, but the white-spaces are optional anyway.&lt;/p&gt; &#xA;&lt;p&gt;Therefore, a template like =&#xA; &lt;!-- tmpl_var foo--&gt;= which is &lt;em&gt;not&lt;/em&gt; legal in /HTML-TEMPLATE/, will be in /X-HTML-TEMPLATE/. It could seem weird, but it becomes useful if you override the default tag markers. Consider, for example:&lt;/p&gt; &#xA;&lt;p&gt;=&amp;lt;tmpl_var foo&amp;gt;= in contrast to =&amp;lt;tmpl_var foo &amp;gt;=.&lt;/p&gt; &#xA;&lt;p&gt;A full working example:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC common-lisp (let ((&lt;em&gt;template-start-marker&lt;/em&gt; &#34;&amp;lt;&#34;) (&lt;em&gt;template-end-marker&lt;/em&gt; &#34;&amp;gt;&#34;)) (with-output-to-string (&lt;em&gt;default-template-output&lt;/em&gt;) (x-template:fill-and-print-template &#34;&amp;lt;tmpl_var foo&amp;gt;&#34; &#39;(:foo &#34;bar&#34;)))) #+END_SRC&lt;/p&gt;</summary>
  </entry>
</feed>