<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Common Lisp Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-01T02:33:18Z</updated>
  <subtitle>Monthly Trending of Common Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>open-goal/jak-project</title>
    <updated>2022-06-01T02:33:18Z</updated>
    <id>tag:github.com,2022-06-01:/open-goal/jak-project</id>
    <link href="https://github.com/open-goal/jak-project" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Reviving the language that brought us the Jak &amp; Daxter Series&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;500&#34; height=&#34;100%&#34; src=&#34;https://raw.githubusercontent.com/open-goal/jak-project/master/docs/img/logo-text-colored-new.png&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://open-goal.github.io/&#34; rel=&#34;nofollow&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Documentation-Here-informational&#34; alt=&#34;Documentation Badge&#34; style=&#34;max-width:100%;&#34;&gt;&lt;/a&gt; &lt;a target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34; href=&#34;https://github.com/open-goal/jak-project/workflows/Linux/badge.svg&#34;&gt;&lt;img src=&#34;https://github.com/open-goal/jak-project/workflows/Linux/badge.svg?sanitize=true&#34; alt=&#34;Linux&#34; style=&#34;max-width:100%;&#34;&gt;&lt;/a&gt; &lt;a target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34; href=&#34;https://github.com/open-goal/jak-project/workflows/Windows/badge.svg&#34;&gt;&lt;img src=&#34;https://github.com/open-goal/jak-project/workflows/Windows/badge.svg?sanitize=true&#34; alt=&#34;Windows&#34; style=&#34;max-width:100%;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.codacy.com/gh/open-goal/jak-project/dashboard?utm_source=github.com&amp;amp;utm_medium=referral&amp;amp;utm_content=open-goal/jak-project&amp;amp;utm_campaign=Badge_Coverage&#34; rel=&#34;nofollow&#34;&gt;&lt;img src=&#34;https://app.codacy.com/project/badge/Coverage/29316d04a1644aa390c33be07289f3f5&#34; alt=&#34;Codacy Badge&#34; style=&#34;max-width:100%;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.codacy.com/gh/open-goal/jak-project/dashboard?utm_source=github.com&amp;amp;utm_medium=referral&amp;amp;utm_content=open-goal/jak-project&amp;amp;utm_campaign=Badge_Grade&#34; rel=&#34;nofollow&#34;&gt;&lt;img src=&#34;https://app.codacy.com/project/badge/Grade/29316d04a1644aa390c33be07289f3f5&#34; alt=&#34;Codacy Badge&#34; style=&#34;max-width:100%;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/VZbXMHXzWv&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/756287461377703987&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://makeapullrequest.com&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=flat-square&#34; alt=&#34;PRs&#34; Welcome&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;!-- toc --&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/open-goal/jak-project/master/#project-description&#34;&gt;Project Description&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/open-goal/jak-project/master/#current-status&#34;&gt;Current Status&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/open-goal/jak-project/master/#whats-next&#34;&gt;What&#39;s Next&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/open-goal/jak-project/master/#getting-started---linux&#34;&gt;Getting Started - Linux&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/open-goal/jak-project/master/#ubuntu-2004&#34;&gt;Ubuntu (20.04)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/open-goal/jak-project/master/#arch&#34;&gt;Arch&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/open-goal/jak-project/master/#getting-started---windows&#34;&gt;Getting Started - Windows&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/open-goal/jak-project/master/#required-software&#34;&gt;Required Software&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/open-goal/jak-project/master/#setting-up-and-opening-the-project&#34;&gt;Setting up and Opening the Project&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/open-goal/jak-project/master/#building-and-running-the-game&#34;&gt;Building and Running the Game&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/open-goal/jak-project/master/#extract-assets&#34;&gt;Extract Assets&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/open-goal/jak-project/master/#build-the-game&#34;&gt;Build the Game&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/open-goal/jak-project/master/#run-the-game&#34;&gt;Run the Game&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/open-goal/jak-project/master/#connecting-the-repl-to-the-game&#34;&gt;Connecting the REPL to the Game&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/open-goal/jak-project/master/#running-the-game-without-auto-booting&#34;&gt;Running the Game Without Auto-Booting&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/open-goal/jak-project/master/#interacting-with-the-game&#34;&gt;Interacting with the Game&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/open-goal/jak-project/master/#project-layout&#34;&gt;Project Layout&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/open-goal/jak-project/master/#directory-layout&#34;&gt;Directory Layout&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- tocstop --&gt; &#xA;&lt;h2&gt;Project Description&lt;/h2&gt; &#xA;&lt;p&gt;This project is to port Jak 1 (NTSC, &#34;black label&#34; version) to PC. Over 98% of this game is written in GOAL, a custom Lisp language developed by Naughty Dog. Our strategy is:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;decompile the original game code into human-readable GOAL code&lt;/li&gt; &#xA; &lt;li&gt;develop our own compiler for GOAL and recompile game code for x86-64&lt;/li&gt; &#xA; &lt;li&gt;create a tool to extract game assets into formats that can be easily viewed or modified&lt;/li&gt; &#xA; &lt;li&gt;create tools to repack game assets into a format that our port uses.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Our objectives are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;make the port a &#34;native application&#34; on x86-64, with high performance. It shouldn&#39;t emulated, interpreted, or transpiled.&lt;/li&gt; &#xA; &lt;li&gt;Our GOAL compiler&#39;s performance should be around the same as unoptimized C.&lt;/li&gt; &#xA; &lt;li&gt;try to match things from the original game and development as possible. For example, the original GOAL compiler supported live modification of code while the game is running, so we do the same, even though it&#39;s not required for just porting the game.&lt;/li&gt; &#xA; &lt;li&gt;support modifications. It should be possible to make edits to the code without everything else breaking.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;We support both Linux and Windows on x86-64.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/open-goal/jak-project/master/FAQ.md&#34;&gt;Please read the FAQ by clicking here if you have any questions.&lt;/a&gt;&lt;/strong&gt;&lt;/h3&gt; &#xA;&lt;p&gt;We have a Discord server where we discuss development: &lt;a href=&#34;https://discord.gg/VZbXMHXzWv&#34;&gt;https://discord.gg/VZbXMHXzWv&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Current Status&lt;/h2&gt; &#xA;&lt;p&gt;So far, we&#39;ve decompiled around 400,000 lines of GOAL code, out of an estimated 500,000 total lines. We have a working OpenGL renderer which renders most of the game world and foreground. Levels are fully playable, and you can finish the game with 100% completion! There is currently &lt;em&gt;no&lt;/em&gt; audio.&lt;/p&gt; &#xA;&lt;p&gt;Here are some screenshots of the renderer: &lt;img src=&#34;https://raw.githubusercontent.com/open-goal/jak-project/master/docs/img/promosmall1.png&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/open-goal/jak-project/master/docs/img/promosmall2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;YouTube playlist: &lt;a href=&#34;https://www.youtube.com/playlist?list=PLWx9T30aAT50cLnCTY1SAbt2TtWQzKfXX&#34;&gt;https://www.youtube.com/playlist?list=PLWx9T30aAT50cLnCTY1SAbt2TtWQzKfXX&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;To help with decompiling, we&#39;ve built a decompiler that can process GOAL code and unpack game assets. We manually specify function types and locations where we believe the original code had type casts (or where they feel appropriate) until the decompiler succeeds, then we clean up the output of the decompiled code by adding comments and adjusting formatting, then save it in &lt;code&gt;goal_src&lt;/code&gt;. Our decompiler is designed specifically for processing the output of the original GOAL compiler. As a result, when given correct casts, it often produces code that can be directly fed into a compiler and works perfectly. This is tested as part of our unit tests, and so far we have over 300,000 lines (460 files) that pass.&lt;/p&gt; &#xA;&lt;p&gt;We don&#39;t save any assets from the game - you must bring your own copy of the game and use the decompiler to extract assets.&lt;/p&gt; &#xA;&lt;h2&gt;What&#39;s Next&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Bug testing! The game can be beaten 100% from start to finish, but it&#39;s possible a few things do not work correctly.&lt;/li&gt; &#xA; &lt;li&gt;Improve the decompiler and clean up decompilation of GOAL code. We are always finding new features and macros in the GOAL language.&lt;/li&gt; &#xA; &lt;li&gt;Investigate and rewrite the more complicated renderers.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting Started - Linux&lt;/h2&gt; &#xA;&lt;h3&gt;Ubuntu (20.04)&lt;/h3&gt; &#xA;&lt;p&gt;Install packages and init repository:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo apt install gcc make cmake build-essential g++ nasm clang-format libxrandr-dev libxinerama-dev libxcursor-dev libxi-dev python&#xA;sudo sh -c &#34;$(curl --location https://taskfile.dev/install.sh)&#34; -- -d -b /usr/local/bin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Compile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cmake -B build &amp;amp;&amp;amp; cmake --build build -j 8&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run tests:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./test.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: we have found that &lt;code&gt;clang&lt;/code&gt; and &lt;code&gt;lld&lt;/code&gt; are significantly faster to compile and link than &lt;code&gt;gcc&lt;/code&gt;, generate faster code, and have better warning messages. To install these:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo apt install lld clang&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and run &lt;code&gt;cmake&lt;/code&gt; (in a fresh build directory) with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cmake -DCMAKE_SHARED_LINKER_FLAGS=&#34;-fuse-ld=lld&#34; -DCMAKE_EXE_LINKER_FLAGS=&#34;-fuse-ld=lld&#34; -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ ..&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Arch&lt;/h3&gt; &#xA;&lt;p&gt;Install packages and init repository:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo pacman -S gcc make cmake base-devel g++ nasm python&#xA;yay -S taskfile-git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Compile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cmake -B build &amp;amp;&amp;amp; cmake --build build -j 8&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run tests:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./test.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Getting Started - Windows&lt;/h2&gt; &#xA;&lt;h3&gt;Required Software&lt;/h3&gt; &#xA;&lt;p&gt;We primarily use Visual Studio on Windows for C++ development. Download the latest community edition from &lt;a href=&#34;https://visualstudio.microsoft.com/vs/&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;You will require the &lt;code&gt;Desktop development with C++&lt;/code&gt; workload. This can be selected during the installation, or after via the &lt;code&gt;Visual Studio Installer&lt;/code&gt;, modifying the Visual Studio Installation.&lt;/p&gt; &#xA;&lt;p&gt;On Windows, it&#39;s recommended to use a package manager, we use Scoop. Follow the steps on the bottom of the homepage &lt;a href=&#34;https://scoop.sh/&#34;&gt;here&lt;/a&gt; to get it.&lt;/p&gt; &#xA;&lt;p&gt;Once Scoop is installed, run the following commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;scoop install git llvm nasm python&#xA;scoop bucket add extras&#xA;scoop install task&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Setting up and Opening the Project&lt;/h3&gt; &#xA;&lt;p&gt;Clone the repository by running the following command in your folder of choice.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone https://github.com/open-goal/jak-project.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will create a &lt;code&gt;jak-project&lt;/code&gt; folder, open the project as a CMake project via Visual Studio.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/open-goal/jak-project/master/docs/img/windows/open-project.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Then build the entire project as &lt;code&gt;Windows Release (clang-cl)&lt;/code&gt;. You can also press Ctrl+Shift+B as a hotkey for Build All. We currently prefer &lt;code&gt;clang-cl&lt;/code&gt; on Windows as opposed to &lt;code&gt;msvc&lt;/code&gt;, though it should work as well!&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/open-goal/jak-project/master/docs/img/windows/release-build.png&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/open-goal/jak-project/master/docs/img/windows/build-all.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Building and Running the Game&lt;/h2&gt; &#xA;&lt;p&gt;Getting a running game involves 4 steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Build C++ tools (follow Getting Started steps above for your platform)&lt;/li&gt; &#xA; &lt;li&gt;Extract assets from the game&lt;/li&gt; &#xA; &lt;li&gt;Build the game&lt;/li&gt; &#xA; &lt;li&gt;Run the game&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Extract Assets&lt;/h3&gt; &#xA;&lt;p&gt;The first step is to extract your ISO file contents into the &lt;code&gt;iso_data/&amp;lt;game-name&amp;gt;&lt;/code&gt; folder. In the case of Jak 1 this is &lt;code&gt;iso_data/jak1&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Once this is done, open a terminal in the &lt;code&gt;jak-project&lt;/code&gt; folder and run the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;task extract-jak1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Build the Game&lt;/h3&gt; &#xA;&lt;p&gt;The next step is to build the game itself. To do so, in the same terminal run the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;task repl&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You will be greeted with a prompt like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt; _____             _____ _____ _____ __&#xA;|     |___ ___ ___|   __|     |  _  |  |&#xA;|  |  | . | -_|   |  |  |  |  |     |  |__&#xA;|_____|  _|___|_|_|_____|_____|__|__|_____|&#xA;      |_|&#xA;Welcome to OpenGOAL 0.8!&#xA;Run (repl-help) for help with common commands and REPL usage.&#xA;Run (lt) to connect to the local target.&#xA;&#xA;g &amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run the following to build the game:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;g &amp;gt; (mi)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Run the Game&lt;/h3&gt; &#xA;&lt;p&gt;Finally the game can be ran. Open a second terminal from the &lt;code&gt;jak-project&lt;/code&gt; directory and run the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;task boot-game&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The game should boot automatically if everything was done correctly.&lt;/p&gt; &#xA;&lt;h4&gt;Connecting the REPL to the Game&lt;/h4&gt; &#xA;&lt;p&gt;Connecting the REPL to the game allows you to inspect and modify code or data while the game is running.&lt;/p&gt; &#xA;&lt;p&gt;To do so, in the REPL after a successful &lt;code&gt;(mi)&lt;/code&gt;, run the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;g &amp;gt; (lt)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If successful, your prompt should change to:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;gc&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For example, running the following will print out some basic information about Jak:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;gc&amp;gt; *target*&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Running the Game Without Auto-Booting&lt;/h4&gt; &#xA;&lt;p&gt;You can also start up the game without booting. To do so run the following in one terminal&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;task run-game&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And then in your REPL run the following (after a successful &lt;code&gt;(mi)&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;g &amp;gt; (lt)&#xA;[Listener] Socket connected established! (took 0 tries). Waiting for version...&#xA;Got version 0.8 OK!&#xA;[Debugger] Context: valid = true, s7 = 0x147d24, base = 0x2123000000, tid = 2438049&#xA;&#xA;gc&amp;gt; (lg)&#xA;10836466        #xa559f2              0.0000        (&#34;game&#34; &#34;kernel&#34;)&#xA;&#xA;gc&amp;gt; (test-play)&#xA;(play :use-vis #t :init-game #f) has been called!&#xA;0        #x0              0.0000        0&#xA;&#xA;gc&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Interacting with the Game&lt;/h3&gt; &#xA;&lt;p&gt;In the graphics window, you can use the period key to bring up the debug menu. Controllers also work, using the same mapping as the original game.&lt;/p&gt; &#xA;&lt;p&gt;Check out the &lt;code&gt;pc_debug&lt;/code&gt;, &lt;code&gt;examples&lt;/code&gt; and &lt;code&gt;pc&lt;/code&gt; folders under &lt;code&gt;goal_src&lt;/code&gt; for some examples of GOAL code we wrote. The debug files that are not loaded automatically by the engine have instructions for how to run them.&lt;/p&gt; &#xA;&lt;h2&gt;Project Layout&lt;/h2&gt; &#xA;&lt;p&gt;There are four main components to the project.&lt;/p&gt; &#xA;&lt;p&gt;The first is &lt;code&gt;goalc&lt;/code&gt;, which is a GOAL compiler for x86-64. Our implementation of GOAL is called OpenGOAL. All of the compiler source code is in &lt;code&gt;goalc&lt;/code&gt;. To run the compiler on Linux, there is a script &lt;code&gt;gc.sh&lt;/code&gt;. On Windows, there is a &lt;code&gt;gc.bat&lt;/code&gt; scripts and a &lt;code&gt;gc-no-lt.bat&lt;/code&gt; script, the latter of which will not attempt to automatically attach to a running target. The compiler is controlled through a prompt which can be used to enter commands to compile, connect to a running GOAL program for interaction, run the OpenGOAL debugger, or, if you are connected to a running GOAL program, can be used as a REPL to run code interactively. In addition to compiling code files, the compiler has features to pack and build data files.&lt;/p&gt; &#xA;&lt;p&gt;The second component to the project is the decompiler. You must have a copy of the PS2 game and place all files from the DVD inside a folder corresponding to the game within &lt;code&gt;iso_data&lt;/code&gt; folder (&lt;code&gt;jak1&lt;/code&gt; for Jak 1 Black Label, etc.), as seen in this picture:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/open-goal/jak-project/master/docs/img/iso_data-help.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Then run &lt;code&gt;decomp.sh&lt;/code&gt; (Linux) or &lt;code&gt;decomp-jak1.bat&lt;/code&gt; (Windows) to run the decompiler. The decompiler will extract assets to the &lt;code&gt;assets&lt;/code&gt; folder. These assets will be used by the compiler when building the port, and you may want to turn asset extraction off after running it once. The decompiler will output code and other data intended to be inspected by humans in the &lt;code&gt;decompiler_out&lt;/code&gt; folder. Stuff in this folder will not be used by the compiler.&lt;/p&gt; &#xA;&lt;p&gt;The third is the game source code, written in OpenGOAL. This is located in &lt;code&gt;goal_src&lt;/code&gt;. All GOAL and GOOS code should be in this folder. Right now most of this is placeholders or incomplete, but you can take a look at &lt;code&gt;kernel/gcommon.gc&lt;/code&gt; or &lt;code&gt;goal-lib.gc&lt;/code&gt; to see some in-progress source code.&lt;/p&gt; &#xA;&lt;p&gt;The final component is the &#34;runtime&#34;, located in &lt;code&gt;game&lt;/code&gt;. This is the part of the game that&#39;s written in C++. In the port, that includes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The &#34;C Kernel&#34;, which contains the GOAL linker and some low-level GOAL language features. GOAL has a completely custom dynamically linked object file format so in order to load the first GOAL code, you need a linker written in C++. Some low-level functions for memory allocation, communicating with the I/O Processor, symbol table, strings, and the type system are also implemented in C, as these are required for the linker. It also listens for incoming messages from the compiler and passes them to the running game. This also initializes the game, by initializing the PS2 hardware, allocating the GOAL heaps, loading the GOAL kernel off of the DVD, and executing the kernel dispatcher function. This is in the &lt;code&gt;game/kernel&lt;/code&gt; folder. This should be as close as possible to the game, and all differences should be noted with a comment.&lt;/li&gt; &#xA; &lt;li&gt;Implementation of Sony&#39;s standard library. GOAL code can call C library functions, and Naughty Dog used some Sony library functions to access files, memory cards, controllers, and communicate with the separate I/O Processor. The library functions are in &lt;code&gt;game/sce&lt;/code&gt;. Implementations of library features specific to the PC port are located in &lt;code&gt;game/system&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;The I/O Processor driver, Overlord. The PS2 had a separate CPU called the I/O Processor (IOP) that was directly connected to the DVD drive hardware and the sound hardware. Naughty Dog created a custom driver for the IOP that handled streaming data off of the DVD. It is much more complicated than I first expected. It&#39;s located in &lt;code&gt;game/overlord&lt;/code&gt;. Like the C kernel, we try to keep this as close as possible to the actual game.&lt;/li&gt; &#xA; &lt;li&gt;Sound Code. Naughty Dog used a third party library for sound. We have not started on this yet.&lt;/li&gt; &#xA; &lt;li&gt;PC specific graphics stuff. We have a functional OpenGL renderer and context that can create a game window and display graphics on it. The specific renderers used by the game however are mostly unimplemented. We have a debug, sprite and tfrag renderers, which is enough to render most of the game world, on-screen text and sprites like the progress menu. This is located in &lt;code&gt;game/graphics&lt;/code&gt;. Many liberties will be taken to make this work, but the end result should closely match the actual game.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Directory Layout&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;assets&lt;/code&gt;: extracted assets (textures, translated game text, audio) generated by the decompiler. Not included in the repository. This data is used when building the PC port.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;build&lt;/code&gt;: C++ CMake build folder.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;common&lt;/code&gt;: common C++ code shared between the compiler, decompiler, and game. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;audio&lt;/code&gt;: tools for decoding the audio files.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;cross_os_debug&lt;/code&gt;: platform-independent library for implementing the OpenGOAL debugger. Linux and Windows.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;cross_sockets&lt;/code&gt;: platform-independent library for sockets. Used to connect the compiler to a running game. Linux and Windows.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;goos&lt;/code&gt;: the compiler-time macro language and parser for OpenGOAL.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;type_system&lt;/code&gt;: the OpenGOAL type system.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;texture&lt;/code&gt;: texture unpacking and format conversion.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;dma&lt;/code&gt;: utilities for handling the transfer of PS2 DMA packets.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;util&lt;/code&gt;, &lt;code&gt;math&lt;/code&gt;, &lt;code&gt;log&lt;/code&gt;: Random utility functions for accessing files, timers, etc.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;decompiler&lt;/code&gt;: Source code for the decompiler. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;analysis&lt;/code&gt;: analysis algorithms.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;config&lt;/code&gt;: JSON config files for the decompiler and type definition file.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;data&lt;/code&gt;: utilities to extract assets from the game.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Disasm&lt;/code&gt;: MIPS disassembler.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Function&lt;/code&gt;: Tools for analyzing GOAL functions.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;gui&lt;/code&gt;: an early prototype of a Python GUI for reading the output of the decompiler.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;IR2&lt;/code&gt;: the &#34;Intermediate Representation&#34; for GOAL functions and expressions.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;ObjectFile&lt;/code&gt;: Utilities for processing the GOAL object file format.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;scripts&lt;/code&gt;: Useful scripts for setting up the decompilation.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;util&lt;/code&gt;: random utilities.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;VuDisasm&lt;/code&gt;: disassembler for VU code.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;decompiler_out&lt;/code&gt;: output of the decompiler that&#39;s not automatically used by the compiler. This is for humans to read and use. Not included in the repository.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;docs&lt;/code&gt;: more documentation!&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;game&lt;/code&gt;: the source code for the game executable. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;common&lt;/code&gt;: shared stuff between the &lt;code&gt;kernel&lt;/code&gt; (EE) and &lt;code&gt;overlord&lt;/code&gt; (IOP).&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;graphics&lt;/code&gt;: PC Port graphics.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;kernel&lt;/code&gt;: the part of the GOAL kernel written in C. The entry point for the game is in &lt;code&gt;kboot.cpp&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;overlord&lt;/code&gt;: the I/O processor driver used to get data off of the DVD.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;sce&lt;/code&gt;: the Sony library implementation.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;system&lt;/code&gt;: PC-port specific OS-level stuff, like file I/O, threads, controllers, debug network connection.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;goal_src&lt;/code&gt;: The GOAL code for the game. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;build&lt;/code&gt;: info related to the GOAL build system.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;engine&lt;/code&gt;: the game engine.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;kernel&lt;/code&gt;: The GOAL kernel.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;levels&lt;/code&gt;: Level specific code.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;old&lt;/code&gt;: Unused or deleted files from the original game.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;dgos&lt;/code&gt;: File lists for DGOs in the build system.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;examples&lt;/code&gt;: Example GOAL code we have written.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;test&lt;/code&gt;: Test code we have written.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;pc_debug&lt;/code&gt;: GOAL code for PC-specific debugging. Also written by us.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;pc&lt;/code&gt;: GOAL code for PC-specific features. Also written by us.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;user&lt;/code&gt;: User sandboxes. Written by you! And anyone else that wishes to share their user code.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;goalc&lt;/code&gt;: The OpenGOAL compiler. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;compiler&lt;/code&gt;: The implementation of the OpenGOAL language.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;data_compiler&lt;/code&gt;: Tools for packing data.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;debugger&lt;/code&gt;: The OpenGOAL debugger (part of the compiler).&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;emitter&lt;/code&gt;: x86-64 emitter and object file generator.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;listener&lt;/code&gt;: The OpenGOAL listener, which connects the compiler to a running GOAL program for the interactive REPL.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;make&lt;/code&gt;: The OpenGOAL build system, builds both code and data files.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;regalloc&lt;/code&gt;: Register allocator.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;iso_data&lt;/code&gt;:&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;out&lt;/code&gt;: Outputs from the build process. Only the &lt;code&gt;iso&lt;/code&gt; subfolder should contain assets used by the game. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;iso&lt;/code&gt;: Final outputs that are used by the game.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;obj&lt;/code&gt;: Object files generated by the compiler.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;resources&lt;/code&gt;: To be removed. Contains fake versions of some files required to get things booting.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;scripts&lt;/code&gt;: Utility scripts. Windows-specific batch files are in a &lt;code&gt;batch&lt;/code&gt; folder while Unix shell scripts are in a &lt;code&gt;shell&lt;/code&gt; folder.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;test&lt;/code&gt;: Unit tests (run on GitHub Actions).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;third-party&lt;/code&gt;: Third party libraries. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;CMake Code Coverage. For code coverage statistics on GitHub builds.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;fmt&lt;/code&gt;. String formatting library.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;googletest&lt;/code&gt;: Test framework.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;inja&lt;/code&gt;: templating library used for generating test code for compiler tests.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;lzokay&lt;/code&gt;: decompression code for Jak 2 and later DGOs.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;mman&lt;/code&gt;: Windows library used to emulate &lt;code&gt;mmap&lt;/code&gt; on Linux.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;run-clang-format&lt;/code&gt;: Utility to check and enforce code formatting.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;run-clang-tidy&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;zydis&lt;/code&gt;: x86-64 disassembler used in the OpenGOAL debugger.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;json&lt;/code&gt;: A JSON library.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;replxx&lt;/code&gt;: Used for the REPL input. Supports history and useful editing shortcuts.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;svpng&lt;/code&gt;: Save a PNG file.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>norvig/paip-lisp</title>
    <updated>2022-06-01T02:33:18Z</updated>
    <id>tag:github.com,2022-06-01:/norvig/paip-lisp</id>
    <link href="https://github.com/norvig/paip-lisp" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Lisp code for the textbook &#34;Paradigms of Artificial Intelligence Programming&#34;&lt;/p&gt;&lt;hr&gt;&lt;img src=&#34;https://raw.githubusercontent.com/norvig/paip-lisp/main/paip-cover.png&#34; title=&#34;Paradigms of Artificial Intelligence Programming&#34; width=&#34;413&#34;&gt; &#xA;&lt;p&gt;This is an open-source repository for the book &lt;em&gt;Paradigms of Artificial Intelligence Programming: Case Studies in Common Lisp&lt;/em&gt; by Peter Norvig (1992), and the code contained therein. The copyright has reverted to the author, who has shared it here under MIT license. On the list of &lt;a href=&#34;https://github.com/cs-books/influential-cs-books&#34;&gt;most influential books for programmers&lt;/a&gt;. As seen on &lt;a href=&#34;https://norvig.com/paip-tv.html&#34;&gt;TV&lt;/a&gt;. See also: &lt;a href=&#34;https://norvig.com/paip-errata.html&#34;&gt;errata&lt;/a&gt;, &lt;a href=&#34;https://norvig.com/paip-comments.html&#34;&gt;comments&lt;/a&gt;, &lt;a href=&#34;https://norvig.com/Lisp-retro.html&#34;&gt;retrospective&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The book is available in these formats:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;pdf: &lt;a href=&#34;https://github.com/norvig/paip-lisp/releases/tag/v1.0&#34;&gt;see releases&lt;/a&gt; for a scanned version&lt;/li&gt; &#xA; &lt;li&gt;text: &lt;a href=&#34;https://github.com/norvig/paip-lisp/raw/master/PAIP.txt&#34;&gt;PAIP.txt&lt;/a&gt; (from OCR&#39;ing the scanned pdf, containing many errors)&lt;/li&gt; &#xA; &lt;li&gt;epub: &lt;a href=&#34;https://github.com/norvig/paip-lisp/releases/tag/1.1&#34;&gt;see releases&lt;/a&gt; for a cleaned up version downloaded from Safari (much cleaner than the scanned versions)&lt;/li&gt; &#xA; &lt;li&gt;and &lt;code&gt;chapter?.md&lt;/code&gt; markdown files:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Table of Contents&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Paradigms of Artificial Intelligence Programming&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/norvig/paip-lisp/main/docs/frontmatter.md&#34;&gt;Front matter&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/norvig/paip-lisp/main/docs/preface.md&#34;&gt;Preface&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Part I: Introduction to Common Lisp&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;1 &lt;a href=&#34;https://raw.githubusercontent.com/norvig/paip-lisp/main/docs/chapter1.md&#34;&gt;Introduction to Lisp&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;2 &lt;a href=&#34;https://raw.githubusercontent.com/norvig/paip-lisp/main/docs/chapter2.md&#34;&gt;A Simple Lisp Program&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;3 &lt;a href=&#34;https://raw.githubusercontent.com/norvig/paip-lisp/main/docs/chapter3.md&#34;&gt;Overview of Lisp&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Part II: Early AI Programs&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;4 &lt;a href=&#34;https://raw.githubusercontent.com/norvig/paip-lisp/main/docs/chapter4.md&#34;&gt;GPS: The General problem Solver&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;5 &lt;a href=&#34;https://raw.githubusercontent.com/norvig/paip-lisp/main/docs/chapter5.md&#34;&gt;Eliza: Dialog with a Machine&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;6 &lt;a href=&#34;https://raw.githubusercontent.com/norvig/paip-lisp/main/docs/chapter6.md&#34;&gt;Building Software Tools&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;7 &lt;a href=&#34;https://raw.githubusercontent.com/norvig/paip-lisp/main/docs/chapter7.md&#34;&gt;Student: Solving Algebra Word Problems&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;8 &lt;a href=&#34;https://raw.githubusercontent.com/norvig/paip-lisp/main/docs/chapter8.md&#34;&gt;Symbolic Mathematics: A Simplification Program&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Part III: Tools and Techniques&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;9 &lt;a href=&#34;https://raw.githubusercontent.com/norvig/paip-lisp/main/docs/chapter9.md&#34;&gt;Efficiency Issues&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;10 &lt;a href=&#34;https://raw.githubusercontent.com/norvig/paip-lisp/main/docs/chapter10.md&#34;&gt;Low-Level Efficiency Issues&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;11 &lt;a href=&#34;https://raw.githubusercontent.com/norvig/paip-lisp/main/docs/chapter11.md&#34;&gt;Logic Programming&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;12 &lt;a href=&#34;https://raw.githubusercontent.com/norvig/paip-lisp/main/docs/chapter12.md&#34;&gt;Compiling Logic programs&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;13 &lt;a href=&#34;https://raw.githubusercontent.com/norvig/paip-lisp/main/docs/chapter13.md&#34;&gt;Object-Oriented Programming&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;14 &lt;a href=&#34;https://raw.githubusercontent.com/norvig/paip-lisp/main/docs/chapter14.md&#34;&gt;Knowledge Representation and Reasoning&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Part IV: Advanced AI Programs&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;15 &lt;a href=&#34;https://raw.githubusercontent.com/norvig/paip-lisp/main/docs/chapter15.md&#34;&gt;Symbolic Mathematics with Canonical Forms&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;16 &lt;a href=&#34;https://raw.githubusercontent.com/norvig/paip-lisp/main/docs/chapter16.md&#34;&gt;Expert Systems&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;17 &lt;a href=&#34;https://raw.githubusercontent.com/norvig/paip-lisp/main/docs/chapter17.md&#34;&gt;Line-Diagram Labeling by Constraint Satisfaction&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;18 &lt;a href=&#34;https://raw.githubusercontent.com/norvig/paip-lisp/main/docs/chapter18.md&#34;&gt;Search and the Game of Othello&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;19 &lt;a href=&#34;https://raw.githubusercontent.com/norvig/paip-lisp/main/docs/chapter19.md&#34;&gt;Introduction to Natural Language&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;20 &lt;a href=&#34;https://raw.githubusercontent.com/norvig/paip-lisp/main/docs/chapter20.md&#34;&gt;Unification Grammars&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;21 &lt;a href=&#34;https://raw.githubusercontent.com/norvig/paip-lisp/main/docs/chapter21.md&#34;&gt;A Grammar of English&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Part V: The Rest of Lisp&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;22 &lt;a href=&#34;https://raw.githubusercontent.com/norvig/paip-lisp/main/docs/chapter22.md&#34;&gt;Scheme: An Uncommon Lisp&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;23 &lt;a href=&#34;https://raw.githubusercontent.com/norvig/paip-lisp/main/docs/chapter23.md&#34;&gt;Compiling Lisp&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;24 &lt;a href=&#34;https://raw.githubusercontent.com/norvig/paip-lisp/main/docs/chapter24.md&#34;&gt;ANSI Common Lisp&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;25 &lt;a href=&#34;https://raw.githubusercontent.com/norvig/paip-lisp/main/docs/chapter25.md&#34;&gt;Troubleshooting&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;The Lisp Files&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://github.com/norvig/paip-lisp/tree/master/lisp&#34;&gt;Lisp code files&lt;/a&gt; are listed here:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;CH&lt;/th&gt; &#xA;   &lt;th&gt;Filename&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/norvig/paip-lisp/main/lisp/examples.lisp&#34;&gt;examples.lisp&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A list of example inputs taken from the book&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/norvig/paip-lisp/main/lisp/tutor.lisp&#34;&gt;tutor.lisp&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;An interpreter for running the examples&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/norvig/paip-lisp/main/lisp/auxfns.lisp&#34;&gt;auxfns.lisp&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Auxiliary functions; load this before anything else&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/norvig/paip-lisp/main/lisp/intro.lisp&#34;&gt;intro.lisp&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A few simple definitions&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;2&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/norvig/paip-lisp/main/lisp/simple.lisp&#34;&gt;simple.lisp&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Random sentence generator (two versions)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;3&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/norvig/paip-lisp/main/lisp/overview.lisp&#34;&gt;overview.lisp&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;14 versions of LENGTH and other examples&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;4&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/norvig/paip-lisp/main/lisp/gps1.lisp&#34;&gt;gps1.lisp&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Simple version of General Problem Solver&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;4&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/norvig/paip-lisp/main/lisp/gps.lisp&#34;&gt;gps.lisp&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Final version of General Problem Solver&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;5&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/norvig/paip-lisp/main/lisp/eliza1.lisp&#34;&gt;eliza1.lisp&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Basic version of Eliza program&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;5&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/norvig/paip-lisp/main/lisp/eliza.lisp&#34;&gt;eliza.lisp&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Eliza with more rules; different reader&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;6&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/norvig/paip-lisp/main/lisp/patmatch.lisp&#34;&gt;patmatch.lisp&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Pattern Matching Utility&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;6&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/norvig/paip-lisp/main/lisp/eliza-pm.lisp&#34;&gt;eliza-pm.lisp&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Version of Eliza using utilities&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;6&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/norvig/paip-lisp/main/lisp/search.lisp&#34;&gt;search.lisp&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Search Utility&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;6&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/norvig/paip-lisp/main/lisp/gps-srch.lisp&#34;&gt;gps-srch.lisp&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Version of GPS using the search utility&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;7&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/norvig/paip-lisp/main/lisp/student.lisp&#34;&gt;student.lisp&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The Student Program&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;8&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/norvig/paip-lisp/main/lisp/macsyma.lisp&#34;&gt;macsyma.lisp&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The Macsyma Program&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;8&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/norvig/paip-lisp/main/lisp/macsymar.lisp&#34;&gt;macsymar.lisp&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Simplification and integration rules for Macsyma&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;9-10&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/norvig/paip-lisp/main/lisp/auxfns.lisp&#34;&gt;auxfns.lisp&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Auxiliary functions&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;11&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/norvig/paip-lisp/main/lisp/unify.lisp&#34;&gt;unify.lisp&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Unification functions&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;11&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/norvig/paip-lisp/main/lisp/prolog1.lisp&#34;&gt;prolog1.lisp&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;First version of Prolog interpreter&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;11&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/norvig/paip-lisp/main/lisp/prolog.lisp&#34;&gt;prolog.lisp&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Final version of Prolog interpreter&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;12&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/norvig/paip-lisp/main/lisp/prologc1.lisp&#34;&gt;prologc1.lisp&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;First version of Prolog compiler&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;12&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/norvig/paip-lisp/main/lisp/prologc2.lisp&#34;&gt;prologc2.lisp&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Second version of Prolog compiler&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;12&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/norvig/paip-lisp/main/lisp/prologc.lisp&#34;&gt;prologc.lisp&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Final version of Prolog compiler&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;12&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/norvig/paip-lisp/main/lisp/prologcp.lisp&#34;&gt;prologcp.lisp&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Primitives for Prolog compiler&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;13&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/norvig/paip-lisp/main/lisp/clos.lisp&#34;&gt;clos.lisp&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Some object-oriented and CLOS code&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;14&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/norvig/paip-lisp/main/lisp/krep1.lisp&#34;&gt;krep1.lisp&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Knowledge Representation code: first version&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;14&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/norvig/paip-lisp/main/lisp/krep2.lisp&#34;&gt;krep2.lisp&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Knowledge Representation code with conjunctions&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;14&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/norvig/paip-lisp/main/lisp/krep.lisp&#34;&gt;krep.lisp&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Final KR code: worlds and attached functions&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;15&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/norvig/paip-lisp/main/lisp/cmacsyma.lisp&#34;&gt;cmacsyma.lisp&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Efficient Macsyma with canonical form&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;16&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/norvig/paip-lisp/main/lisp/mycin.lisp&#34;&gt;mycin.lisp&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The Emycin expert system shell&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;16&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/norvig/paip-lisp/main/lisp/mycin-r.lisp&#34;&gt;mycin-r.lisp&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Some rules for a medical application of emycin&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;17&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/norvig/paip-lisp/main/lisp/waltz.lisp&#34;&gt;waltz.lisp&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A Line-Labeling program using the Waltz algorithm&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;18&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/norvig/paip-lisp/main/lisp/othello.lisp&#34;&gt;othello.lisp&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The Othello playing program and some strategies&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;18&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/norvig/paip-lisp/main/lisp/othello2.lisp&#34;&gt;othello2.lisp&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Additional strategies for Othello&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;18&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/norvig/paip-lisp/main/lisp/edge-tab.lisp&#34;&gt;edge-tab.lisp&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Edge table for Iago strategy&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;19&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/norvig/paip-lisp/main/lisp/syntax1.lisp&#34;&gt;syntax1.lisp&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Syntactic Parser&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;19&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/norvig/paip-lisp/main/lisp/syntax2.lisp&#34;&gt;syntax2.lisp&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Syntactic Parser with semantics&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;19&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/norvig/paip-lisp/main/lisp/syntax3.lisp&#34;&gt;syntax3.lisp&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Syntactic Parser with semantics and preferences&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;20&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/norvig/paip-lisp/main/lisp/unifgram.lisp&#34;&gt;unifgram.lisp&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Unification Parser&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;21&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/norvig/paip-lisp/main/lisp/grammar.lisp&#34;&gt;grammar.lisp&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Comprehensive grammar of English&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;21&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/norvig/paip-lisp/main/lisp/lexicon.lisp&#34;&gt;lexicon.lisp&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Sample Lexicon of English&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;22&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/norvig/paip-lisp/main/lisp/interp1.lisp&#34;&gt;interp1.lisp&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Scheme interpreter, including version with macros&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;22&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/norvig/paip-lisp/main/lisp/interp2.lisp&#34;&gt;interp2.lisp&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A tail recursive Scheme interpreter&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;22&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/norvig/paip-lisp/main/lisp/interp3.lisp&#34;&gt;interp3.lisp&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A Scheme interpreter that handles call/cc&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;23&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/norvig/paip-lisp/main/lisp/compile1.lisp&#34;&gt;compile1.lisp&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Simple Scheme compiler&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;23&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/norvig/paip-lisp/main/lisp/compile2.lisp&#34;&gt;compile2.lisp&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Compiler with tail recursion and primitives&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;23&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/norvig/paip-lisp/main/lisp/compile3.lisp&#34;&gt;compile3.lisp&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Compiler with peephole optimizer&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;23&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/norvig/paip-lisp/main/lisp/compopt.lisp&#34;&gt;compopt.lisp&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Peephole optimizers for compile3.lisp&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h1&gt;Running the Code&lt;/h1&gt; &#xA;&lt;p&gt;There is no single &#34;application&#34; to run. Rather, there is a collection of source code files, duplicating the code in the book. You can read and/or run whatever you like. Lisp is an interactive language, and you will need to interact with the code to get benefit from it. Some hints:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You will need a Common Lisp interpreter/compiler/environment. Here&#39;s a &lt;a href=&#34;https://www.reddit.com/r/lisp/comments/752wxe/what_is_the_best_common_lisp_interpreter_out_there/&#34;&gt;discussion&lt;/a&gt; of the options.&lt;/li&gt; &#xA; &lt;li&gt;You will always need &lt;code&gt;(load &#34;auxfns.lisp&#34;)&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;You will need &lt;code&gt;(requires &#34;&lt;/code&gt;&lt;em&gt;file&lt;/em&gt;&lt;code&gt;&#34;)&lt;/code&gt;, for the various instances of &lt;em&gt;file&lt;/em&gt; that you want to use. (If &lt;code&gt;requires&lt;/code&gt; does not work properly on your system you may have to alter its definition, in &lt;code&gt;auxfns.lisp&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;The function &lt;code&gt;do-examples&lt;/code&gt;, which takes as an argument either &lt;code&gt;:all&lt;/code&gt; or a chapter number or a list of chapter numbers, can be used to see examples of the use of various functions. For example, &lt;code&gt;(do-examples 1)&lt;/code&gt; shows the examples from chapter 1. Access this by doing &lt;code&gt;(requires &#34;examples&#34;)&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Other resources&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;I wrote a &lt;a href=&#34;http://norvig.com/Lisp-retro.html&#34;&gt;retrospective&lt;/a&gt; on the book in 2002.&lt;/li&gt; &#xA; &lt;li&gt;There is a nice &lt;a href=&#34;https://github.com/dhconnelly/paip-python&#34;&gt;Python version&lt;/a&gt; of the code, by Daniel Connelly at Georgia Tech, supervised by Ashok Goel.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>google/lisp-koans</title>
    <updated>2022-06-01T02:33:18Z</updated>
    <id>tag:github.com,2022-06-01:/google/lisp-koans</id>
    <link href="https://github.com/google/lisp-koans" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Common Lisp Koans is a language learning exercise in the same vein as the ruby koans, python koans and others. It is a port of the prior koans with some modifications to highlight lisp-specific features. Structured as ordered groups of broken unit tests, the project guides the learner progressively through many Common Lisp language features.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Lisp Koans&lt;/h1&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;h3&gt;One-time Method&lt;/h3&gt; &#xA;&lt;p&gt;From a terminal, execute your lisp interpreter on the file &#39;contemplate.lisp&#39; e.g.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;abcl --noinform --noinit --load contemplate.lisp --eval &#39;(quit)&#39;&#xA;ccl -n -l contemplate.lisp -e &#39;(quit)&#39;&#xA;clisp -q -norc -ansi contemplate.lisp&#xA;ecl -norc -load contemplate.lisp -eval &#39;(quit)&#39;&#xA;sbcl --script contemplate.lisp&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Watching the Koans&lt;/h3&gt; &#xA;&lt;p&gt;On Linux and MacOS systems, the shell scripts &lt;code&gt;meditate-linux.sh&lt;/code&gt; and &lt;code&gt;meditate-macos.sh&lt;/code&gt; can be used to automatically evaluate &#39;contemplate.lisp&#39; whenever the koan files are modified, providing immediate feedback on changes to the koans. To run the MacOS version you need to have &lt;a href=&#34;https://github.com/emcrisostomo/fswatch&#34;&gt;&lt;code&gt;fswatch&lt;/code&gt;&lt;/a&gt; installed. From a terminal:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cd lisp-koans&#xA;$ sh meditate-linux.sh # on Linux&#xA;$ sh meditate-macos.sh # on MacOS&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Results of Contemplation&lt;/h2&gt; &#xA;&lt;p&gt;Running on a fresh version should output the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Thinking about ASSERTS&#xA;    FILL-IN-THE-BLANKS requires more meditation.&#xA;&#xA;You have not yet reached enlightenment.&#xA;    A koan is incomplete.&#xA;Please meditate on the following code:&#xA;    File &#34;koans/asserts.lisp&#34;&#xA;    Koan &#34;FILL-IN-THE-BLANKS&#34;&#xA;    Current koan assert status is &#34;(INCOMPLETE INCOMPLETE INCOMPLETE)&#34;&#xA;&#xA;You are now 0/198 koans and 0/31 lessons closer to reaching enlightenment.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This indicates that the script has completed, and that the learner should look to asserts.lisp to locate and fix the problem. The problem will be within a define-test expression such as&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;;;; In order to progress, fill in the blanks, denoted via ____ in source code.&#xA;;;; Sometimes, you will be asked to provide values that are equal to something.&#xA;&#xA;(define-test fill-in-the-blanks&#xA;  (assert-equal ____ 2)&#xA;  (assert-equal ____ 3.14)&#xA;  (assert-equal ____ &#34;Hello World&#34;))&#xA;&#xA;;;; Sometimes, you will be asked to say whether something is true or false,&#xA;;;; In Common Lisp, the canonical values for truth and falsehood are T and NIL.&#xA;&#xA;(define-test assert-true&#xA;  (assert-true ____))&#xA;&#xA;(define-test assert-false&#xA;  (assert-false ____))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In this case, the test is incomplete, and the student should fill in the blank (____) with appropriate lisp code to make the assert pass.&lt;/p&gt; &#xA;&lt;p&gt;In order to test code, or evaluate tests interactively, students may copy and paste code into the lisp command line REPL.&lt;/p&gt; &#xA;&lt;h3&gt;Testing&lt;/h3&gt; &#xA;&lt;p&gt;To test the koans, execute your lisp interpreter on the file &#39;contemplate.lisp&#39; e.g.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;abcl --noinform --noinit --load test.lisp --eval &#39;(quit)&#39;&#xA;ccl -n -l test.lisp -e &#39;(quit)&#39;&#xA;clisp -q -norc -ansi test.lisp&#xA;ecl -norc -load test.lisp -eval &#39;(quit)&#39;&#xA;sbcl --script test.lisp&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Quoting the Ruby Koans instructions&lt;/h2&gt; &#xA;&lt;p&gt;&#34;In test-driven development the mantra has always been, red, green, refactor. Write a failing test and run it (red), make the test pass (green), then refactor it (that is look at the code and see if you can make it any better). In this case you will need to run the koan and see it fail (red), make the test pass (green), then take a moment and reflect upon the test to see what it is teaching you and improve the code to better communicate its intent (refactor).&#34;&lt;/p&gt; &#xA;&lt;h2&gt;Content&lt;/h2&gt; &#xA;&lt;p&gt;The Common Lisp koans are based on the Python koans and Ruby koans projects. Additionally, many of the tests are based on new material that is special to Common Lisp.&lt;/p&gt; &#xA;&lt;p&gt;Note that the unit on threads uses bordeaux-threads and bt-semaphore. The user must have Quicklisp installed and loaded or a reader macro will remove the instructions to run :threads. For information and instructions on installing Quicklisp please see: &lt;a href=&#34;https://www.quicklisp.org/beta/&#34;&gt;https://www.quicklisp.org/beta/&lt;/a&gt; The user can either remove #+quicklisp and uncomment (load &#34;~/.quicklisp/setup.lisp&#34;) in threads.lisp, or if they know quicklisp will be loaded while running contemplate.lisp do nothing.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>dimitri/pgloader</title>
    <updated>2022-06-01T02:33:18Z</updated>
    <id>tag:github.com,2022-06-01:/dimitri/pgloader</id>
    <link href="https://github.com/dimitri/pgloader" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Migrate to PostgreSQL in a single command!&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;PGLoader&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/dimitri/pgloader&#34;&gt;&lt;img src=&#34;https://travis-ci.org/dimitri/pgloader.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitter.im/dimitri/pgloader?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/Join%20Chat.svg?sanitize=true&#34; alt=&#34;Join the chat at https://gitter.im/dimitri/pgloader&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cloud.docker.com/repository/docker/dimitri/pgloader&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/cloud/build/dimitri/pgloader.svg?sanitize=true&#34; alt=&#34;Docker Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://pgloader.readthedocs.io/en/latest/&#34;&gt;&lt;img src=&#34;https://readthedocs.org/projects/pgloader/badge/?version=latest&amp;amp;style=plastic&#34; alt=&#34;Read The Docs Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;pgloader is a data loading tool for PostgreSQL, using the &lt;code&gt;COPY&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;p&gt;Its main advantage over just using &lt;code&gt;COPY&lt;/code&gt; or &lt;code&gt;\copy&lt;/code&gt;, and over using a &lt;em&gt;Foreign Data Wrapper&lt;/em&gt;, is its transaction behaviour, where &lt;em&gt;pgloader&lt;/em&gt; will keep a separate file of rejected data, but continue trying to &lt;code&gt;copy&lt;/code&gt; good data in your database.&lt;/p&gt; &#xA;&lt;p&gt;The default PostgreSQL behaviour is transactional, which means that &lt;em&gt;any&lt;/em&gt; erroneous line in the input data (file or remote database) will stop the entire bulk load for the table.&lt;/p&gt; &#xA;&lt;p&gt;pgloader also implements data reformatting, a typical example of that being the transformation of MySQL datestamps &lt;code&gt;0000-00-00&lt;/code&gt; and &lt;code&gt;0000-00-00 00:00:00&lt;/code&gt; to PostgreSQL &lt;code&gt;NULL&lt;/code&gt; value (because our calendar never had a &lt;em&gt;year zero&lt;/em&gt;).&lt;/p&gt; &#xA;&lt;h2&gt;Versioning&lt;/h2&gt; &#xA;&lt;p&gt;pgloader version 1.x is quite old and was developed in &lt;code&gt;TCL&lt;/code&gt;. When faced with maintaining that code, the new emerging development team (hi!) picked &lt;code&gt;python&lt;/code&gt; instead because that made sense at the time. So pgloader version 2.x was written in python.&lt;/p&gt; &#xA;&lt;p&gt;The current version of pgloader is the 3.x series, which is written in &lt;a href=&#34;http://cliki.net/&#34;&gt;Common Lisp&lt;/a&gt; for better development flexibility, runtime performance, and support of real threading.&lt;/p&gt; &#xA;&lt;p&gt;The versioning is now following the Emacs model, where any X.0 release number means you&#39;re using a development version (alpha, beta, or release candidate). The next stable versions are going to be &lt;code&gt;3.1&lt;/code&gt; then &lt;code&gt;3.2&lt;/code&gt; etc.&lt;/p&gt; &#xA;&lt;p&gt;When using a development snapshot rather than a released version the version number includes the git hash (in its abbreviated form):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;pgloader version &#34;3.0.99&#34;&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Release candidate 9 for pgloader version 3.1, with a &lt;em&gt;git tag&lt;/em&gt; named &lt;code&gt;v3.0.99&lt;/code&gt; so that it&#39;s easy to checkout the same sources as the released code.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;pgloader version &#34;3.0.fecae2c&#34;&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Development snapshot again &lt;em&gt;git hash&lt;/em&gt; &lt;code&gt;fecae2c&lt;/code&gt;. It&#39;s possible to have the same sources on another setup with using the git command &lt;code&gt;git checkout fecae2c&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;pgloader version &#34;3.1.0&#34;&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Stable release.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;LICENCE&lt;/h2&gt; &#xA;&lt;p&gt;pgloader is available under &lt;a href=&#34;http://www.postgresql.org/about/licence/&#34;&gt;The PostgreSQL Licence&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;INSTALL&lt;/h2&gt; &#xA;&lt;p&gt;You can install pgloader directly from &lt;a href=&#34;https://wiki.postgresql.org/wiki/Apt&#34;&gt;apt.postgresql.org&lt;/a&gt; and from official debian repositories, see &lt;a href=&#34;https://packages.debian.org/search?keywords=pgloader&#34;&gt;packages.debian.org/pgloader&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ apt-get install pgloader&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also use a &lt;strong&gt;docker&lt;/strong&gt; image for pgloader at &lt;a href=&#34;https://hub.docker.com/r/dimitri/pgloader/&#34;&gt;https://hub.docker.com/r/dimitri/pgloader/&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ docker pull dimitri/pgloader&#xA;$ docker run --rm --name pgloader dimitri/pgloader:latest pgloader --version&#xA;$ docker run --rm --name pgloader dimitri/pgloader:latest pgloader --help&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Build from sources&lt;/h2&gt; &#xA;&lt;p&gt;pgloader is now a Common Lisp program, tested using the &lt;a href=&#34;http://sbcl.org/&#34;&gt;SBCL&lt;/a&gt; (&amp;gt;= 1.2.5) and &lt;a href=&#34;http://ccl.clozure.com/&#34;&gt;Clozure CL&lt;/a&gt; implementations with &lt;a href=&#34;http://www.quicklisp.org/beta/&#34;&gt;Quicklisp&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;When building from sources, you should always build from the current git &lt;code&gt;HEAD&lt;/code&gt; as it&#39;s basically the only source that is managed in a way to ensure it builds aginst current set of dependencies versions.&lt;/p&gt; &#xA;&lt;h3&gt;Building from sources on debian&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ apt-get install sbcl unzip libsqlite3-dev make curl gawk freetds-dev libzip-dev&#xA;$ cd /path/to/pgloader&#xA;$ make pgloader&#xA;$ ./build/bin/pgloader --help&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Building from sources on RedHat/CentOS&lt;/h3&gt; &#xA;&lt;p&gt;See &#34;Redhat / CentOS&#34; in &lt;a href=&#34;https://raw.githubusercontent.com/dimitri/pgloader/master/INSTALL.md#redhat--centos&#34;&gt;INSTALL.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Building from sources on macOS&lt;/h3&gt; &#xA;&lt;p&gt;When using &lt;a href=&#34;https://brew.sh&#34;&gt;brew&lt;/a&gt;, it should be a simple &lt;code&gt;brew install --HEAD pgloader&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;When using &lt;a href=&#34;https://www.macports.org&#34;&gt;macports&lt;/a&gt;, then we have a situation to deal with with shared objects pgloader depends on, as reported in issue #161 at &lt;a href=&#34;https://github.com/dimitri/pgloader/issues/161#issuecomment-201162647&#34;&gt;https://github.com/dimitri/pgloader/issues/161#issuecomment-201162647&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;I was able to get a clean build without having to disable compression after symlinking /usr/local/lib to /opt/local/lib. Note that I did not have anything installed to /usr/local/lib so I didn&#39;t lose anything here.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Building from sources on Windows&lt;/h3&gt; &#xA;&lt;p&gt;Building pgloader on Windows is supported, thanks to Common Lisp implementations being available on that platform, and to the Common Lisp Standard for making it easy to write actually portable code.&lt;/p&gt; &#xA;&lt;p&gt;It is recommended to have a look at the issues labelled with &lt;em&gt;Windows support&lt;/em&gt; if you run into trouble when building pgloader:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/dimitri/pgloader/issues?utf8=%E2%9C%93&amp;amp;q=label%3A%22Windows%20support%22%20&#34;&gt;https://github.com/dimitri/pgloader/issues?utf8=✓&amp;amp;q=label%3A%22Windows%20support%22%20&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Building Docker image from sources&lt;/h3&gt; &#xA;&lt;p&gt;You can build a Docker image from source using SBCL by default:&lt;/p&gt; &#xA;&lt;p&gt;$ docker build .&lt;/p&gt; &#xA;&lt;p&gt;Or Clozure CL (CCL):&lt;/p&gt; &#xA;&lt;p&gt;$ docker build -f Dockerfile.ccl .&lt;/p&gt; &#xA;&lt;h2&gt;More options when building from source&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;Makefile&lt;/code&gt; target &lt;code&gt;pgloader&lt;/code&gt; knows how to produce a Self Contained Binary file for pgloader, found at &lt;code&gt;./build/bin/pgloader&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ make pgloader&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default, the &lt;code&gt;Makefile&lt;/code&gt; uses &lt;a href=&#34;http://sbcl.org/&#34;&gt;SBCL&lt;/a&gt; to compile your binary image, though it&#39;s possible to build using &lt;a href=&#34;http://ccl.clozure.com/&#34;&gt;CCL&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ make CL=ccl pgloader&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If using &lt;code&gt;SBCL&lt;/code&gt; and it supports core compression, the make process will use it to generate a smaller binary. To force disabling core compression, you may use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ make COMPRESS_CORE=no pgloader&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;--compress-core&lt;/code&gt; is unique to SBCL, so not used when &lt;code&gt;CC&lt;/code&gt; is different from the &lt;code&gt;sbcl&lt;/code&gt; value.&lt;/p&gt; &#xA;&lt;p&gt;You can also tweak the default amount of memory that the &lt;code&gt;pgloader&lt;/code&gt; image will allow itself using when running through your data (don&#39;t ask for more than your current RAM tho):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ make DYNSIZE=8192 pgloader&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;make pgloader&lt;/code&gt; command when successful outputs a &lt;code&gt;./build/bin/pgloader&lt;/code&gt; file for you to use.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;You can either give a command file to pgloader or run it all from the command line, see the &lt;a href=&#34;https://pgloader.readthedocs.io/en/latest/tutorial/tutorial.html#pgloader-quick-start&#34;&gt;pgloader quick start&lt;/a&gt; on &lt;a href=&#34;https://pgloader.readthedocs.io&#34;&gt;https://pgloader.readthedocs.io&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ./build/bin/pgloader --help&#xA;$ ./build/bin/pgloader &amp;lt;file.load&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For example, for a full migration from SQLite:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ createdb newdb&#xA;$ pgloader ./test/sqlite/sqlite.db postgresql:///newdb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or for a full migration from MySQL, including schema definition (tables, indexes, foreign keys, comments) and parallel loading of the corrected data:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ createdb pagila&#xA;$ pgloader mysql://user@localhost/sakila postgresql:///pagila&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>atlas-engineer/nyxt</title>
    <updated>2022-06-01T02:33:18Z</updated>
    <id>tag:github.com,2022-06-01:/atlas-engineer/nyxt</id>
    <link href="https://github.com/atlas-engineer/nyxt" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Nyxt - the hacker&#39;s power-browser.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#+html: &lt;img src=&#34;https://nyxt.atlas.engineer/static/image/nyxt_256x256.png&#34; align=&#34;right&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Nyxt browser&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;Nyxt&lt;/em&gt; is a keyboard-driven web browser designed for power users. Inspired by Emacs and Vim, it has familiar keybindings ([[https://en.wikipedia.org/wiki/Emacs][Emacs]], [[https://en.wikipedia.org/wiki/Vim_(text_editor)][vi]], [[https://en.wikipedia.org/wiki/IBM_Common_User_Access][CUA]]), and is infinitely extensible in Lisp.&lt;/p&gt; &#xA;&lt;p&gt;If you like Nyxt and you would like to help future development, please give us a star, spread the word, and support us on [[https://www.patreon.com/nyxt][Patreon]], thank you!&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Attention:&lt;/em&gt; Nyxt is under active development. Feel free to [[https://github.com/atlas-engineer/nyxt/issues][report]] bugs, instabilities or feature wishes.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;#+html: &lt;/p&gt;&#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a href=&#34;http://nyxt.atlas.engineer/&#34;&gt;Homepage&lt;/a&gt; | &#xA; &lt;a href=&#34;https://nyxt.atlas.engineer/download&#34;&gt;Downloads&lt;/a&gt; | &#xA; &lt;a href=&#34;https://nyxt.atlas.engineer/articles&#34;&gt;Articles&lt;/a&gt; | &#xA; &lt;a href=&#34;https://store.nyxt.atlas.engineer/&#34;&gt;Store&lt;/a&gt; | &#xA; &lt;a href=&#34;https://github.com/atlas-engineer/nyxt/raw/master/documents/README.org&#34;&gt;Developer&#39;s Manual&lt;/a&gt; | &#xA; &lt;a href=&#34;https://discourse.atlas.engineer/&#34;&gt;Forum&lt;/a&gt; | &#xA; &lt;a href=&#34;https://kiwiirc.com/nextclient/irc.libera.chat/nyxt&#34;&gt;Chat&lt;/a&gt; &#xA;&lt;/div&gt;&#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Features For an exhaustive description of all of the features, please refer to the manual.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Fast tab switching&lt;/p&gt; &#xA;&lt;p&gt;Switch easily between your open tabs via fuzzy search. If you are looking for &lt;del&gt;&lt;a href=&#34;https://www.example.com&#34;&gt;https://www.example.com&lt;/a&gt;&lt;/del&gt;, you could type in &lt;del&gt;ele&lt;/del&gt;, &lt;del&gt;exa&lt;/del&gt;, &lt;del&gt;epl&lt;/del&gt;, or any other matching series of letters.&lt;/p&gt; &#xA;&lt;p&gt;#+html: &lt;img src=&#34;https://nyxt.atlas.engineer/static/image/switch-buffer.png?&#34; align=&#34;center&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;** Multiple selection&lt;/p&gt; &#xA;&lt;p&gt;Commands can accept multiple inputs, allowing you to quickly perform an operation against multiple objects. In the example below we search for cactuses, and open up several images simultaneously:&lt;/p&gt; &#xA;&lt;p&gt;#+html: &lt;img src=&#34;https://nyxt.atlas.engineer/static/image/multi-select.png?&#34; align=&#34;center&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;** Powerful bookmarks&lt;/p&gt; &#xA;&lt;p&gt;Bookmark a page with tags. Search bookmarks with compound queries. Capture more data about your bookmarks, and group and wrangle them in any way you like.&lt;/p&gt; &#xA;&lt;p&gt;#+html: &lt;img src=&#34;https://nyxt.atlas.engineer/static/image/bookmark.png?&#34; align=&#34;center&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;** Multi tab search&lt;/p&gt; &#xA;&lt;p&gt;Search multiple tabs at the same time, and view all the results in a single window. Jump quickly through your open tabs to find what you need.&lt;/p&gt; &#xA;&lt;p&gt;#+html: &lt;img src=&#34;https://nyxt.atlas.engineer/static/image/multi-search.png?&#34; align=&#34;center&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;** History as a tree&lt;/p&gt; &#xA;&lt;p&gt;History is represented as a tree that you can traverse. Smarter than the &#34;forwards-backwards&#34; abstraction found in other browsers, the tree makes sure you never lose track of where you&#39;ve been.&lt;/p&gt; &#xA;&lt;p&gt;#+html: &lt;img src=&#34;https://nyxt.atlas.engineer/static/image/history.png?&#34; align=&#34;center&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Getting started ** Install Nyxt&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Nyxt supports:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;GNU/Linux&lt;/li&gt; &#xA; &lt;li&gt;macOS (unofficial)&lt;/li&gt; &#xA; &lt;li&gt;FreeBSD (unofficial)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Nyxt has engine support for WebKit and &lt;em&gt;experimental support&lt;/em&gt; for WebEngine/Blink.&lt;/p&gt; &#xA;&lt;p&gt;Please find pre-built binaries at [[https://nyxt.atlas.engineer/download][Nyxt&#39;s downloads page]]. Nyxt is available on the following platforms:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Alpine.&lt;/li&gt; &#xA; &lt;li&gt;Debian and derivatives such as Ubuntu and Linux Mint.&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/atlas-engineer/ports][MacPorts]].&lt;/li&gt; &#xA; &lt;li&gt;[[https://archlinux.org/][Arch Linux]]: Install with =pacman -Syu nyxt=.&lt;/li&gt; &#xA; &lt;li&gt;[[https://nixos.org/nix/][Nix]]: Install with =nix-env --install nyxt=.&lt;/li&gt; &#xA; &lt;li&gt;[[https://guix.gnu.org][Guix]]: Install with =guix install nyxt=.&lt;/li&gt; &#xA; &lt;li&gt;[[https://voidlinux.org/][Void]]: Install with =xbps-install nyxt=.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To install from source, please refer to the [[file:documents/README.org][developer&#39;s manual]].&lt;/p&gt; &#xA;&lt;p&gt;** Documentation &amp;amp; Customization&lt;/p&gt; &#xA;&lt;p&gt;For full documentation about Nyxt, how it works, and how to extend it please refer to the embedded manual. To get started, run the =manual= command (press =control= + =space=, type =manual= and confirm with =return=).&lt;/p&gt; &#xA;&lt;p&gt;If you want to help with development, or build Nyxt from source, read the developer&#39;s documentation at [[file:documents/README.org][documents/README.org]].&lt;/p&gt; &#xA;&lt;p&gt;** History of changes&lt;/p&gt; &#xA;&lt;p&gt;If you are running a recent version of Nyxt please run the =changelog= command. For older versions, please refer to the [[https://github.com/atlas-engineer/nyxt/blob/2.2.1/documents/CHANGELOG.org][CHANGELOG]].&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>mirkov/verbose-calcs</title>
    <updated>2022-06-01T02:33:18Z</updated>
    <id>tag:github.com,2022-06-01:/mirkov/verbose-calcs</id>
    <link href="https://github.com/mirkov/verbose-calcs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Provide environment that prints computation results as they are performed&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#+title: &lt;del&gt;verbose-calcs&lt;/del&gt; package&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Introduction and Background This package provides functionality for defining calculations that at the same time generate textual output with their results. It provides two sets commands:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;del&gt;vlet&lt;/del&gt; and &lt;del&gt;vlet*&lt;/del&gt; establish and prints out bindings, and then evaluate the body&lt;/li&gt; &#xA;   &lt;li&gt;&lt;del&gt;defvfun&lt;/del&gt; is a &lt;del&gt;defun&lt;/del&gt; that prints out argument values and a header prior to executing the body&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;del&gt;vlet&lt;/del&gt; and &lt;del&gt;vlet*&lt;/del&gt; This is a &lt;del&gt;let(*)&lt;/del&gt;-like environment. It establishes bindings. As each binding is established, its value is printed out.&lt;/p&gt; &lt;p&gt;If no bindings are established, &lt;del&gt;body&lt;/del&gt; is executed inside a &lt;del&gt;progn&lt;/del&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;del&gt;defvfun&lt;/del&gt; Defines a function with keyword arguments only. The defaults can be specified when the function is defined.&lt;/p&gt; &lt;p&gt;Upon execution, the function prints its header and values of all arguments.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To do&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Improve &lt;del&gt;defvfun&lt;/del&gt;&#39;s documentation handling&lt;/li&gt; &#xA;   &lt;li&gt;Modify &lt;del&gt;defvfun&lt;/del&gt; to print out the calculation result&lt;/li&gt; &#xA;   &lt;li&gt;Consider adding a preamble to &lt;del&gt;vlet&lt;/del&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>rabbibotton/clog</title>
    <updated>2022-06-01T02:33:18Z</updated>
    <id>tag:github.com,2022-06-01:/rabbibotton/clog</id>
    <link href="https://github.com/rabbibotton/clog" rel="alternate"></link>
    <summary type="html">&lt;p&gt;CLOG - The Common Lisp Omnificent GUI&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;CLOG - The Common Lisp Omnificent GUI&lt;/h1&gt; &#xA;&lt;h2&gt;David Botton &lt;a href=&#34;mailto:david@botton.com&#34;&gt;david@botton.com&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;h3&gt;License BSD 3-Clause License&lt;/h3&gt; &#xA;&lt;p&gt;View the HTML Documentation:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://rabbibotton.github.io/clog/clog-manual.html&#34;&gt;https://rabbibotton.github.io/clog/clog-manual.html&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;View a short video on reddit about CLOG Builder&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.reddit.com/r/lisp/comments/sd9wf1/clog_builder_cl_web_3_awesome_lang_awesome_tool/&#34;&gt;https://www.reddit.com/r/lisp/comments/sd9wf1/clog_builder_cl_web_3_awesome_lang_awesome_tool/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rabbibotton/clog/main/LEARN.md&#34;&gt;LEARN COMMON-LISP AND CLOG - LEARN.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://rabbibotton.github.io/images/clog.png&#34; alt=&#34;Image of CLOG&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The Common Lisp Omnificent GUI, CLOG for short, uses web technology to produce graphical user interfaces for applications locally or remotely. CLOG can take the place, or work alongside, most cross-platform GUI frameworks and website frameworks. The CLOG package starts up the connectivity to the browser or other websocket client (often a browser embedded in a native template application.)&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rabbibotton/clog/main/CONCEPT.md&#34;&gt;CLOG - Technical Overview and Purpose&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;STATUS: CLOG 1.2 and CLOG Builder 1.1 released.&lt;/p&gt; &#xA;&lt;p&gt;CLOG is actually based on GNOGA, a framework I wrote for Ada in 2013 and used in commercial production code for the last 9+ years, i.e. the techiniques CLOG uses are solid and proven.&lt;/p&gt; &#xA;&lt;p&gt;CLOG is being actively extended daily. Check the github discussion boards for the latest.&lt;/p&gt; &#xA;&lt;p&gt;Some potential applications for CLOG:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Cross-platform GUIs and Reports&lt;/li&gt; &#xA; &lt;li&gt;Secure websites and complex interactive web applications&lt;/li&gt; &#xA; &lt;li&gt;Mobile software (CLOG Runs native on Android and iOS)&lt;/li&gt; &#xA; &lt;li&gt;Massive multiplayer online games&lt;/li&gt; &#xA; &lt;li&gt;Monitoring software for embedded systems&lt;/li&gt; &#xA; &lt;li&gt;A fun way to teach programming and advanced multi-tasking parallel programming techniques. (CLOG is a parallel GUI)&lt;/li&gt; &#xA; &lt;li&gt;And the list goes on&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The key to CLOG is the relationship it forms with a Browser window or Browser control compiled to native code. CLOG uses websockets for communications and the browser to render a GUI that maintains an active soft realtime connection. For most CLOG applications all programming logic, events and decisions are done on the server which can be local, or remote over the web.&lt;/p&gt; &#xA;&lt;p&gt;CLOG is developed with ECL and SBCL, it is tested fairly regulary on Linux, Windows, Rasberry Pi (running Ubuntu), M1 and Intel Mac. It should in theory work out of the box on any system with Quicklisp (although you could hand install) and CLACK (easily switched out and the ecl Android/iPhone branch doesn&#39;t use).&lt;/p&gt; &#xA;&lt;p&gt;CLOG is in QuickLisp (ql:quickload :clog), but you likely want to live on the bleeding edge and use UltraLisp or clone the github repo into ~/common-lisp directory [or other quicklisp/asdf findable directory (push &#34;path/to/dir/of/projects&#34; ql:&lt;em&gt;local-project-directories&lt;/em&gt;) ]:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd ~/common-lisp&#xA;git clone https://github.com/rabbibotton/clog.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To load this package and work through tutorials (assuming you have Quicklisp configured.)&lt;/p&gt; &#xA;&lt;p&gt;Note: If using portacle for Windows you will need to update Quicklisp use (ql:update-dist &#34;quicklisp&#34;) You will also likely need to copy the sqlite3 dll from &lt;a href=&#34;https://www.sqlite.org/download.html&#34;&gt;https://www.sqlite.org/download.html&lt;/a&gt; to portacle\win\lib Consider a custom &lt;a href=&#34;https://raw.githubusercontent.com/rabbibotton/clog/main/WINDOWS.md&#34;&gt;install on windows&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Start emacs then M-x slime&lt;/li&gt; &#xA; &lt;li&gt;In the REPL, run:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;CL-USER&amp;gt; (ql:quickload :clog)&#xA;CL-USER&amp;gt; (clog:run-tutorial 1)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Tip for Windows WSL linux user. Install &#34;sudo apt install xdg-utils&#34; to install xdg-open so that run-tutorial uses the windows browser.&lt;/p&gt; &#xA;&lt;p&gt;To see where the source, tutorial and demo files are:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;CL-USER&amp;gt; (clog:clog-install-dir)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can the run the demos with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;CL-USER&amp;gt; (ql:quickload :clog)&#xA;CL-USER&amp;gt; (clog:run-demo 1)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The clog-db-admin tool can be run with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;CL-USER&amp;gt; (ql:quickload :clog/tools)&#xA;CL-USER&amp;gt; (clog-tools:clog-db-admin)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The CLOG Builder tool can be run with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;CL-USER&amp;gt; (ql:quickload :clog/tools)&#xA;CL-USER&amp;gt; (clog-tools:clog-builder)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also open a &#34;clog-repl&#34; window in your browser to play from the common-lisp repl:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;CL-USER&amp;gt; (in-package clog-user)&#xA;CLOG-USER&amp;gt; (clog-repl)&#xA;CLOG-USER&amp;gt; (setf (background-color *body*) &#34;beige&#34;)&#xA;CLOG-USER&amp;gt; (create-div *body* :content &#34;Hello World!&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The clog-repl URL is &lt;a href=&#34;http://127.0.0.1:8080/repl&#34;&gt;http://127.0.0.1:8080/repl&lt;/a&gt; &lt;em&gt;body&lt;/em&gt; will always refer to the last access of that URL.&lt;/p&gt; &#xA;&lt;p&gt;To open a browser with the CLOG manual:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;CL-USER&amp;gt; (clog:open-manual)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Work your way through the tutorials. You will see how quick and easy it is to be a CLOGer.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://rabbibotton.github.io/images/clog-builder.png&#34; alt=&#34;Image of clog-builder&#34;&gt; &lt;img src=&#34;https://rabbibotton.github.io/images/cb-web.png&#34; alt=&#34;Image of clog-builder-web&#34;&gt; &lt;img src=&#34;https://rabbibotton.github.io/images/clog-demo1.png&#34; alt=&#34;Image of demo1&#34;&gt; &lt;img src=&#34;https://rabbibotton.github.io/images/clog-demo2.png&#34; alt=&#34;Image of demo2&#34;&gt; &lt;img src=&#34;https://rabbibotton.github.io/images/clog-demo3.png&#34; alt=&#34;Image of demo3&#34;&gt; &lt;img src=&#34;https://rabbibotton.github.io/images/clog-db-admin.png&#34; alt=&#34;Image of clog-db-admin&#34;&gt; &lt;img src=&#34;https://rabbibotton.github.io/images/clog-web-containers.png&#34; alt=&#34;Image of clog-web-containers&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Here is a sample CLOG app:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(defpackage #:clog-user               ; Setup a package for our work to exist in&#xA;  (:use #:cl #:clog)                  ; Use the Common Lisp language and CLOG&#xA;  (:export start-tutorial))           ; Export as public the start-tutorial function&#xA;&#xA;(in-package :clog-user)               ; Tell the &#34;reader&#34; we are in the clog-user package&#xA;&#xA;&#xA;;; Define our CLOG application&#xA;(defun on-new-window (body)           ; Define the function called on-new-window&#xA;  &#34;On-new-window handler.&#34;            ; Optional docstring to describe function&#xA;&#xA;  (let ((hello-element                ; hello-element is a local variable that&#xA;                                      ; will be bound to our new CLOG-Element&#xA;&#xA;      ;; This application simply creates a CLOG-Element as a child to the&#xA;      ;; CLOG-body object in the browser window.&#xA;&#xA;      ;; A CLOG-Element represents a block of HTML (we will later see ways to&#xA;      ;; directly create buttons and all sorts of HTML elements in more&#xA;      ;; lisp-like ways with no knowledge of HTML or JavaScript.&#xA;      (create-child body &#34;&amp;lt;h1&amp;gt;Hello World! (click me!)&amp;lt;/h1&amp;gt;&#34;)))&#xA;&#xA;    (set-on-click hello-element      ; Now we set a function to handle clicks&#xA;          (lambda (obj)              ; In this case we use an anonymous function&#xA;            (setf (color hello-element) &#34;green&#34;))))))&#xA;&#xA;;; To see all the events one can set and the many properties and styles that&#xA;;; exist, refer to the CLOG manual or the file clog-element.lisp&#xA;&#xA;&#xA;(defun start-tutorial ()   ; Define the function called start-tutorial&#xA;  &#34;Start tutorial.&#34;        ; Optional docstring to describe function&#xA;&#xA;  ;; Initialize the CLOG system&#xA;  (initialize #&#39;on-new-window)&#xA;  ;; Set the function on-new-window to execute&#xA;  ;; every time a browser connection to our app.&#xA;  ;; #&#39; tells Common Lisp to pass the function&#xA;  ;; to intialize and not to execute it.&#xA;&#xA;&#xA;  ;; Open a browser to http://12.0.0.1:8080 - the default for CLOG apps&#xA;  (open-browser))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Other samples of CLOG on the web:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/byulparan/clog-collider-experience&#34;&gt;CLOG + cl-collider&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.reddit.com/r/lisp/comments/tl46of/would_it_be_cool_to_run_a_clog_app_on_mobile_you/&#34;&gt;CLOG on iOS and Android&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gist.github.com/mmontone/3a5a8a57675750e99ffb7fa64f40bc39#file-clog-learn-lisp&#34;&gt;Learn CLOG Dashboard&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;CLOG Builder Tutorials&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Chat App &lt;a href=&#34;https://www.reddit.com/r/lisp/comments/sj1tv5/clog_builder_tutorial_1_a_chat_app_from_start_to/&#34;&gt;https://www.reddit.com/r/lisp/comments/sj1tv5/clog_builder_tutorial_1_a_chat_app_from_start_to/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Building a Web Page &lt;a href=&#34;https://www.reddit.com/r/lisp/comments/sn8j77/clog_builder_tutorial_2_building_a_web_page/&#34;&gt;https://www.reddit.com/r/lisp/comments/sn8j77/clog_builder_tutorial_2_building_a_web_page/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Importing HTML in to Builder, Adding Pages and Hand Coding &lt;a href=&#34;https://www.reddit.com/r/lisp/comments/snvv0w/clog_builder_tutorial_3_importing_html_adding/&#34;&gt;https://www.reddit.com/r/lisp/comments/snvv0w/clog_builder_tutorial_3_importing_html_adding/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;CLOS-CONTACT - Using database controls demos a contact manager app in clog. &lt;a href=&#34;https://www.reddit.com/r/lisp/comments/t61sib/clog_builder_tutorial_4_a_complete_database_app/&#34;&gt;https://www.reddit.com/r/lisp/comments/t61sib/clog_builder_tutorial_4_a_complete_database_app/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;CLOG Tutorials&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rabbibotton/clog/main/tutorial/01-tutorial.lisp&#34;&gt;01-tutorial.lisp&lt;/a&gt; - Hello World&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rabbibotton/clog/main/tutorial/02-tutorial.lisp&#34;&gt;02-tutorial.lisp&lt;/a&gt; - Closures in CLOG&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rabbibotton/clog/main/tutorial/03-tutorial.lisp&#34;&gt;03-tutorial.lisp&lt;/a&gt; - Events fire in parallel&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rabbibotton/clog/main/tutorial/04-tutorial.lisp&#34;&gt;04-tutorial.lisp&lt;/a&gt; - The event target, reusing event handlers&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rabbibotton/clog/main/tutorial/05-tutorial.lisp&#34;&gt;05-tutorial.lisp&lt;/a&gt; - Using connection-data-item&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rabbibotton/clog/main/tutorial/06-tutorial.lisp&#34;&gt;06-tutorial.lisp&lt;/a&gt; - Tasking and events&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rabbibotton/clog/main/tutorial/07-tutorial.lisp&#34;&gt;07-tutorial.lisp&lt;/a&gt; - My first CLOG video game (and handling disconnects)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rabbibotton/clog/main/tutorial/08-tutorial.lisp&#34;&gt;08-tutorial.lisp&lt;/a&gt; - Mice Love Containers&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rabbibotton/clog/main/tutorial/09-tutorial.lisp&#34;&gt;09-tutorial.lisp&lt;/a&gt; - Tabs, panels, and forms&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rabbibotton/clog/main/tutorial/10-tutorial.lisp&#34;&gt;10-tutorial.lisp&lt;/a&gt; - Canvas&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rabbibotton/clog/main/tutorial/11-tutorial.lisp&#34;&gt;11-tutorial.lisp&lt;/a&gt; - Attaching to existing HTML&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rabbibotton/clog/main/tutorial/12-tutorial.lisp&#34;&gt;12-tutorial.lisp&lt;/a&gt; - Running a website in CLOG (routing)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rabbibotton/clog/main/tutorial/13-tutorial&#34;&gt;13-tutorial/&lt;/a&gt; - Flying Solo - A minimalist CLOG project&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rabbibotton/clog/main/tutorial/14-tutorial.lisp&#34;&gt;14-tutorial.lisp&lt;/a&gt; - Local (persistent) and Session client-side storage&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rabbibotton/clog/main/tutorial/15-tutorial.lisp&#34;&gt;15-tutorial.lisp&lt;/a&gt; - Multi-media&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rabbibotton/clog/main/tutorial/16-tutorial.lisp&#34;&gt;16-tutorial.lisp&lt;/a&gt; - Bootstrap 4, Loading css files and javascript&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rabbibotton/clog/main/tutorial/17-tutorial.lisp&#34;&gt;17-tutorial.lisp&lt;/a&gt; - W3.CSS layout example and Form submit methods&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rabbibotton/clog/main/tutorial/18-tutorial.lisp&#34;&gt;18-tutorial.lisp&lt;/a&gt; - Drag and Drop&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rabbibotton/clog/main/tutorial/19-tutorial.lisp&#34;&gt;19-tutorial.lisp&lt;/a&gt; - Using JavaScript components&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rabbibotton/clog/main/tutorial/20-tutorial.lisp&#34;&gt;20-tutorial.lisp&lt;/a&gt; - New CLOG plugin from JavaScript component&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rabbibotton/clog/main/tutorial/21-tutorial.lisp&#34;&gt;21-tutorial.lisp&lt;/a&gt; - New CLOG plugin in Common-Lisp&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rabbibotton/clog/main/tutorial/22-tutorial.lisp&#34;&gt;22-tutorial.lisp&lt;/a&gt; - CLOG GUI Menus and Desktop Look and Feel&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rabbibotton/clog/main/tutorial/23-tutorial.lisp&#34;&gt;23-tutorial.lisp&lt;/a&gt; - Using semaphores to wait for input&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rabbibotton/clog/main/tutorial/24-tutorial.lisp&#34;&gt;24-tutorial.lisp&lt;/a&gt; - CLOG WEB containers&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rabbibotton/clog/main/tutorial/25-tutorial.lisp&#34;&gt;25-tutorial.lisp&lt;/a&gt; - A &#34;local&#34; web app using CLOG WEB&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rabbibotton/clog/main/tutorial/26-tutorial.lisp&#34;&gt;26-tutorial.lisp&lt;/a&gt; - A web page and form with CLOG WEB&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rabbibotton/clog/main/tutorial/27-tutorial.lisp&#34;&gt;27-tutorial.lisp&lt;/a&gt; - Panel Box Layouts&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rabbibotton/clog/main/tutorial/28-tutorial&#34;&gt;28-tutorial/&lt;/a&gt; - CLOG Builder Hello - A minimalist CLOG Builder project&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rabbibotton/clog/main/tutorial/29-tutorial.lisp&#34;&gt;29-tutorial.lisp&lt;/a&gt; - Presentations (and jQuery) - linking lisp objects to clog objects&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rabbibotton/clog/main/tutorial/30-tutorial.lisp&#34;&gt;30-tutorial.lisp&lt;/a&gt; - Instant websites - clog-web-site&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rabbibotton/clog/main/tutorial/31-tutorial.lisp&#34;&gt;31-tutorial.lisp&lt;/a&gt; - Database and Authority based websites - clog-web-dbi and clog-auth&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rabbibotton/clog/main/tutorial/32-tutorial.lisp&#34;&gt;32-tutorial.lisp&lt;/a&gt; - Database Managed Content websites - clog-web-content&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rabbibotton/clog/main/tutorial/33-tutorial.lisp&#34;&gt;33-tutorial.lisp&lt;/a&gt; - with-clog-create - Using a declartive syntax for GUIs&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;CLOG Demos&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rabbibotton/clog/main/demos/01-demo.lisp&#34;&gt;01-demo.lisp&lt;/a&gt; - Sparkey the Snake Game&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rabbibotton/clog/main/demos/02-demo.lisp&#34;&gt;02-demo.lisp&lt;/a&gt; - Chat - Private instant messenger&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rabbibotton/clog/main/demos/03-demo.lisp&#34;&gt;03-demo.lisp&lt;/a&gt; - IDE - A very simple common lisp IDE&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rabbibotton/clog/main/demos/04-demo.lisp&#34;&gt;04-demo.lisp&lt;/a&gt; - CMS Website - A very simple database driven website&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Tool Summary&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;clog-db-admin - SQLite3 admin tool&lt;/li&gt; &#xA; &lt;li&gt;clog-builder - Rapid visual interactive development for Web and GUIs&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;High Order Extensions to CLOG&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;clog-gui - Desktop over the web&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Menus&lt;/li&gt; &#xA;   &lt;li&gt;Windowing system&lt;/li&gt; &#xA;   &lt;li&gt;Modal windows, Keep-on-top windows&lt;/li&gt; &#xA;   &lt;li&gt;File Load / Save dialogs&lt;/li&gt; &#xA;   &lt;li&gt;Alert, Input and Confirmation dialogs&lt;/li&gt; &#xA;   &lt;li&gt;Form dialogs&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;clog-web - Webpage creation&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Auto column layouts&lt;/li&gt; &#xA;   &lt;li&gt;12 Point Grid System layouts&lt;/li&gt; &#xA;   &lt;li&gt;Content containers&lt;/li&gt; &#xA;   &lt;li&gt;Panels&lt;/li&gt; &#xA;   &lt;li&gt;Sidebar menus&lt;/li&gt; &#xA;   &lt;li&gt;Compositor containers&lt;/li&gt; &#xA;   &lt;li&gt;Menus&lt;/li&gt; &#xA;   &lt;li&gt;Alerts&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;clog-web-site - Instant themed websites with plugins:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;clog-web-page - create a theme based page&lt;/li&gt; &#xA;   &lt;li&gt;clog-web-dbi - database driven websites (uses clog-auth)&lt;/li&gt; &#xA;   &lt;li&gt;clog-web-forms - Instant web forms&lt;/li&gt; &#xA;   &lt;li&gt;clog-web-themes - basic themes for clog based websites&lt;/li&gt; &#xA;   &lt;li&gt;clog-web-content - database driven content,tags, comments (in progress)&lt;/li&gt; &#xA;   &lt;li&gt;clog-web-blog - instant blogs (in progress)&lt;/li&gt; &#xA;   &lt;li&gt;clog-web-cart - instant shopping carts (future)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;clog-panels - Quick application layouts&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;clog-presentations - bi-directional linking of Lisp Objects and CLOG Objects&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;clog-jquery - DOM queries&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;clog-data - Move data to and from groups of controls&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;SQL writer helpers for basic SQL&lt;/li&gt; &#xA;   &lt;li&gt;CLOG-Database - Database control for CLOG Builder&lt;/li&gt; &#xA;   &lt;li&gt;CLOG-One-Row - One row at a time table access auto binds to controls in CLOG Builder&lt;/li&gt; &#xA;   &lt;li&gt;CLOG-Lookup - Version of the select control (dropdown and listbox) that are database connected&lt;/li&gt; &#xA;   &lt;li&gt;CLOG-DB-Table - Version of html table that are database connected&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;clog-auth - Authentication and authorization framework&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;(See &lt;a href=&#34;https://raw.githubusercontent.com/rabbibotton/clog/main/FUTURE.md&#34;&gt;FUTURE.md&lt;/a&gt; for future plans)&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>stumpwm/stumpwm</title>
    <updated>2022-06-01T02:33:18Z</updated>
    <id>tag:github.com,2022-06-01:/stumpwm/stumpwm</id>
    <link href="https://github.com/stumpwm/stumpwm" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The Stump Window Manager&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://stumpwm.github.io/images/stumpwm-logo-stripe.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;The Stump Window Manager&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://travis-ci.org/stumpwm/stumpwm.svg?sanitize=true&#34; alt=&#34;&#34;&gt; &lt;a href=&#34;https://gitter.im/stumpwm/community?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/stumpwm/community.svg?sanitize=true&#34; alt=&#34;Gitter&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;StumpWM is a window manager written entirely in Common Lisp. It attempts to be highly customizable while relying entirely on the keyboard for input. You will not find buttons, icons, title bars, tool bars, or any of the other conventional GUI widgets.&lt;/p&gt; &#xA;&lt;p&gt;These design decisions reflect the growing popularity of productive, customizable lisp based systems.&lt;/p&gt; &#xA;&lt;h2&gt;Philosophy&lt;/h2&gt; &#xA;&lt;p&gt;StumpWM is a &#34;everything-and-the-kitchen-sink WM&#34; or &#34;the Emacs of WMs.&#34;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;StumpWM:Windows::Emacs:Text&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;StumpWM is &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Hackable&lt;/li&gt; &#xA;   &lt;li&gt;Written in Common Lisp&lt;/li&gt; &#xA;   &lt;li&gt;A multi paradigm window manager&lt;/li&gt; &#xA;   &lt;li&gt;A Superior window managing experience&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;StumpWM is &lt;em&gt;not&lt;/em&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Minimalist&lt;/li&gt; &#xA;   &lt;li&gt;Narrow scope&lt;/li&gt; &#xA;   &lt;li&gt;Configured by editing the source directly&lt;/li&gt; &#xA;   &lt;li&gt;A full blown desktop environment&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you want a minimalist tiling window manager, then StumpWM is &lt;em&gt;not&lt;/em&gt; what you&#39;re looking for. The code base is ~15k lines, the binaries produced are ~60mb.&lt;/p&gt; &#xA;&lt;p&gt;StumpWM manages windows the way emacs manages buffers, or the way screen manages terminals. If you want a flexible, customizable, hackable desktop experience, look no further.&lt;/p&gt; &#xA;&lt;h1&gt;Build &amp;amp; Start Stumpwm&lt;/h1&gt; &#xA;&lt;h2&gt;Prerequisites&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://sbcl.org&#34;&gt;SBCL&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;quicklisp (for obtaining the following dependencies; not needed if you use your distribution&#39;s package manager.)&lt;/li&gt; &#xA; &lt;li&gt;clx&lt;/li&gt; &#xA; &lt;li&gt;cl-ppcre&lt;/li&gt; &#xA; &lt;li&gt;alexandria&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The recommended way to install the dependencies is using Quicklisp. Follow the instructions at &lt;a href=&#34;http://www.quicklisp.org/&#34;&gt;http://www.quicklisp.org/&lt;/a&gt; to install it. In short:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ curl -O https://beta.quicklisp.org/quicklisp.lisp&#xA;$ sbcl --load quicklisp.lisp&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then at the REPL:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(quicklisp-quickstart:install)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Make sure you have added it to your lisp init file using:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt; (ql:add-to-init-file)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, in a repl:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt; (ql:quickload &#34;clx&#34;)&#xA; (ql:quickload &#34;cl-ppcre&#34;)&#xA; (ql:quickload &#34;alexandria&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: The recommended way to install SBCL is by downloading one of their pre-built binaries available in their &lt;a href=&#34;http://sbcl.org/platform-table.html&#34;&gt;web page&lt;/a&gt; or build it from source. Please do &lt;em&gt;not&lt;/em&gt; install SBCL using your distributions package manager, especially Ubuntu. If you do so it is likely that you&#39;ll run into problems when building StumpWM due to using obsolete versions of the dependencies.&lt;/p&gt; &#xA;&lt;h2&gt;Building&lt;/h2&gt; &#xA;&lt;p&gt;Building stumpwm from git requires that you build the configure script:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt; ./autogen.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then run it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt; ./configure&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now build it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt; make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If all goes well, you should have a stumpwm binary now. You can run the binary from where it is (starting it with X) or install it, along with the .info documentation, with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt; make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now that you have a binary, call it from your ~/.xinitrc file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt; # The default path is /usr/local/bin/stumpwm&#xA; echo /path/to/stumpwm &amp;gt;&amp;gt; ~/.xinitrc&#xA; startx&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Hopefully that will put you in X running stumpwm! See &lt;a href=&#34;https://github.com/sabetts/stumpwm/wiki/StartUp&#34;&gt;StartUp on the wiki&lt;/a&gt; for more examples.&lt;/p&gt; &#xA;&lt;h1&gt;Contributing&lt;/h1&gt; &#xA;&lt;p&gt;Pull requests are always welcome! Here are some guidelines to ensure that your contribution gets merged in a timely manner:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Do&#39;s &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Add your name to the list of AUTHORS with your pull request.&lt;/li&gt; &#xA;   &lt;li&gt;Preserve comments or docstrings explaining what code does, and update them if your patch changes them in a significant way&lt;/li&gt; &#xA;   &lt;li&gt;Try to follow an &#34;80 column rule.&#34; The current code base does not follow this all the time, so don&#39;t use it as an example&lt;/li&gt; &#xA;   &lt;li&gt;If you export a symbol, you &lt;em&gt;must&lt;/em&gt; add it to the manual.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stumpwm/stumpwm/master/(http://web.archive.org/web/20160101153032/http://people.ace.ed.ac.uk/staff/medward2/class/moz/cm/doc/contrib/lispstyle.html)&#34;&gt;Use lisp idioms&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;If you are working on a major change to the internals, keep us informed on stumpwm-devel! Also, it will probably help if the changes are made and then incrementally applied to the codebase in order to avoid introducing show-stopping bugs.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Do not&#39;s &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Include Emacs local variables&lt;/li&gt; &#xA;   &lt;li&gt;Change whitespace&lt;/li&gt; &#xA;   &lt;li&gt;Write lots of code without supporting comments/documentation&lt;/li&gt; &#xA;   &lt;li&gt;Delete comments or docstrings (yes this is a duplicate of above!)&lt;/li&gt; &#xA;   &lt;li&gt;Export symbols from packages that aren&#39;t widely useful (many times a little more thought will reveal how to implement your internal change without having to export/break encapsulation)&lt;/li&gt; &#xA;   &lt;li&gt;Make stylistic changes that suit your coding style/way of thinking&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you aren&#39;t a lisp hacker, you can contribute in the form of documenting and organizing the wiki. There&#39;s a lot of information floating around; if you find it where you didn&#39;t expect it, move or link to it in a more logical place.&lt;/p&gt; &#xA;&lt;h1&gt;Wishlist&lt;/h1&gt; &#xA;&lt;p&gt;Fancy yourself a lisp hacker? Here&#39;s a wishlist of features for the StumpWM universe (in no particular order):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;float-splits (ie allow floating windows over tiled ones)&lt;/li&gt; &#xA; &lt;li&gt;Float windows within parent applications (specifically dialogs in gimp or firefox).&lt;/li&gt; &#xA; &lt;li&gt;tab-list showing the contents of the current frame at the side, top, or bottom of the frame&lt;/li&gt; &#xA; &lt;li&gt;Emacs&#39; iswitchb function implemented in emacs &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Re-arranging windows between groups&lt;/li&gt; &#xA;   &lt;li&gt;Killing windows&lt;/li&gt; &#xA;   &lt;li&gt;Marking windows for batch operations&lt;/li&gt; &#xA;   &lt;li&gt;Deleting/adding groups&lt;/li&gt; &#xA;   &lt;li&gt;Import data from stumpwm to emacs, use an emacs minor mode to implement the above features, then export the data back to stumpwm and let stumpwm perform the appropriate actions&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Emacs&#39; completing-read-multiple function&lt;/li&gt; &#xA; &lt;li&gt;Dynamic tiling&lt;/li&gt; &#xA; &lt;li&gt;Lock Screen (with support for leaving notes, bonus points if emacs is involved)&lt;/li&gt; &#xA; &lt;li&gt;Wallpapers! (support pulling from remote sources, changing based on timers, and other hacky features)&lt;/li&gt; &#xA; &lt;li&gt;Shutdown, restart, suspend, and hibernate functions that don&#39;t require root access&lt;/li&gt; &#xA; &lt;li&gt;Revamped, mouse-friendly mode-line. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Support fixed number of chars for window titles&lt;/li&gt; &#xA;   &lt;li&gt;Dynamically trim window titles to fit them all on the mode-line&lt;/li&gt; &#xA;   &lt;li&gt;Split the mode-line into multiple cells for containing different information&lt;/li&gt; &#xA;   &lt;li&gt;Implement widget icons to indicate system status (new mail, low battery, network etc)&lt;/li&gt; &#xA;   &lt;li&gt;Support raising windows when left-clicked, closing/killing when right-clicked&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Help&lt;/h1&gt; &#xA;&lt;p&gt;There&#39;s a texinfo manual, stumpwm.texi. The build scripts generate an info file you can read in emacs or with the `info&#39; program. The manual for the latest git version (may be slightly out of date) is available to read online at: &lt;a href=&#34;https://stumpwm.github.io/&#34;&gt;The Manual&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;And, as in Emacs, you can always get documentation with:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Key&lt;/th&gt; &#xA;   &lt;th&gt;Help&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;C-t h v&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Variables&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;C-t h f&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Functions&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;C-t h k&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Key sequences&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;C-t h c&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Commands&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;C-t h w&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Find key sequences for a command&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;For other stuff (tips tricks and examples) visit the &lt;a href=&#34;https://github.com/stumpwm/stumpwm/wiki&#34;&gt;stumpwm wiki&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;There&#39;s a &lt;strong&gt;#stumpwm&lt;/strong&gt; channel on &lt;a href=&#34;https://libera.chat&#34;&gt;irc.libera.chat&lt;/a&gt;, too.&lt;/p&gt; &#xA;&lt;p&gt;Finally, there&#39;s our mailing list (click to sign up) &lt;a href=&#34;https://lists.nongnu.org/mailman/listinfo/stumpwm-devel&#34;&gt;stumpwm-devel@nongnu.org&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Shirakumo/trial</title>
    <updated>2022-06-01T02:33:18Z</updated>
    <id>tag:github.com,2022-06-01:/Shirakumo/trial</id>
    <link href="https://github.com/Shirakumo/trial" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A fully-fledged Common Lisp game engine&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Shirakumo/trial/master/logo.svg?sanitize=true&#34; alt=&#34;logo&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;About Trial&lt;/h2&gt; &#xA;&lt;p&gt;Trial is a game engine written in Common Lisp. Unlike many other engines, it is meant to be more of a loose connection of components that can be fit together as required by any particular game.&lt;/p&gt; &#xA;&lt;p&gt;The project is still in its very early stages and may change heavily as new constraints become clear. As such there is no guarantee for API stability at this point and no documentation is available. However, you may use projects such as &lt;a href=&#34;https://github.com/shinmera/vpetjam&#34;&gt;Vegetable Mash&lt;/a&gt; as a reference on how to start using it.&lt;/p&gt; &#xA;&lt;p&gt;Come talk to us at the shirakumo channel, reachable through &lt;a href=&#34;https://chat.tymoon.eu/?channel=shirakumo&#34;&gt;lichat&lt;/a&gt; or IRC on Libera.&lt;/p&gt; &#xA;&lt;h2&gt;Projects Using Trial&lt;/h2&gt; &#xA;&lt;p&gt;Here are a few games that are using Trial as their engine. Kandria and Eternia: Pet Whisperer are commercial games available on Steam.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://kandria.com&#34;&gt;&lt;img src=&#34;https://kandria.com/media/small%20capsule.png&#34; alt=&#34;logo&#34;&gt;&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://kandria.com&#34;&gt;Kandria&lt;/a&gt; On &lt;a href=&#34;https://store.steampowered.com/app/1261430/Kandria/&#34;&gt;Steam&lt;/a&gt;!&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://kandria.com/eternia&#34;&gt;&lt;img src=&#34;https://kandria.com/eternia/media/small%20capsule.png&#34; alt=&#34;logo&#34;&gt;&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://kandria.com/eternia&#34;&gt;Eternia Pet Whisperer&lt;/a&gt; On &lt;a href=&#34;https://store.steampowered.com/app/1605720/Eternia_Pet_Whisperer/&#34;&gt;Steam&lt;/a&gt;!&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://shinmera.itch.io/vegetablemash&#34;&gt;Vegetable Mash&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://shinmera.itch.io/rush&#34;&gt;Rush&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://shinmera.itch.io/outsider&#34;&gt;Outsider&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>aleksandr-vin/Google-Code-Jam-Practice</title>
    <updated>2022-06-01T02:33:18Z</updated>
    <id>tag:github.com,2022-06-01:/aleksandr-vin/Google-Code-Jam-Practice</id>
    <link href="https://github.com/aleksandr-vin/Google-Code-Jam-Practice" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Source codes for Google Code Jam practicing&lt;/p&gt;&lt;hr&gt;&lt;p&gt;This is a repository for practicing for Google Code Jam 2010.&lt;/p&gt;</summary>
  </entry>
</feed>