<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Common Lisp Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-01T02:36:10Z</updated>
  <subtitle>Monthly Trending of Common Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>dimitri/pgloader</title>
    <updated>2022-07-01T02:36:10Z</updated>
    <id>tag:github.com,2022-07-01:/dimitri/pgloader</id>
    <link href="https://github.com/dimitri/pgloader" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Migrate to PostgreSQL in a single command!&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;PGLoader&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/dimitri/pgloader&#34;&gt;&lt;img src=&#34;https://travis-ci.org/dimitri/pgloader.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitter.im/dimitri/pgloader?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/Join%20Chat.svg?sanitize=true&#34; alt=&#34;Join the chat at https://gitter.im/dimitri/pgloader&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cloud.docker.com/repository/docker/dimitri/pgloader&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/cloud/build/dimitri/pgloader.svg?sanitize=true&#34; alt=&#34;Docker Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://pgloader.readthedocs.io/en/latest/&#34;&gt;&lt;img src=&#34;https://readthedocs.org/projects/pgloader/badge/?version=latest&amp;amp;style=plastic&#34; alt=&#34;Read The Docs Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;pgloader is a data loading tool for PostgreSQL, using the &lt;code&gt;COPY&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;p&gt;Its main advantage over just using &lt;code&gt;COPY&lt;/code&gt; or &lt;code&gt;\copy&lt;/code&gt;, and over using a &lt;em&gt;Foreign Data Wrapper&lt;/em&gt;, is its transaction behaviour, where &lt;em&gt;pgloader&lt;/em&gt; will keep a separate file of rejected data, but continue trying to &lt;code&gt;copy&lt;/code&gt; good data in your database.&lt;/p&gt; &#xA;&lt;p&gt;The default PostgreSQL behaviour is transactional, which means that &lt;em&gt;any&lt;/em&gt; erroneous line in the input data (file or remote database) will stop the entire bulk load for the table.&lt;/p&gt; &#xA;&lt;p&gt;pgloader also implements data reformatting, a typical example of that being the transformation of MySQL datestamps &lt;code&gt;0000-00-00&lt;/code&gt; and &lt;code&gt;0000-00-00 00:00:00&lt;/code&gt; to PostgreSQL &lt;code&gt;NULL&lt;/code&gt; value (because our calendar never had a &lt;em&gt;year zero&lt;/em&gt;).&lt;/p&gt; &#xA;&lt;h2&gt;Versioning&lt;/h2&gt; &#xA;&lt;p&gt;pgloader version 1.x is quite old and was developed in &lt;code&gt;TCL&lt;/code&gt;. When faced with maintaining that code, the new emerging development team (hi!) picked &lt;code&gt;python&lt;/code&gt; instead because that made sense at the time. So pgloader version 2.x was written in python.&lt;/p&gt; &#xA;&lt;p&gt;The current version of pgloader is the 3.x series, which is written in &lt;a href=&#34;http://cliki.net/&#34;&gt;Common Lisp&lt;/a&gt; for better development flexibility, runtime performance, and support of real threading.&lt;/p&gt; &#xA;&lt;p&gt;The versioning is now following the Emacs model, where any X.0 release number means you&#39;re using a development version (alpha, beta, or release candidate). The next stable versions are going to be &lt;code&gt;3.1&lt;/code&gt; then &lt;code&gt;3.2&lt;/code&gt; etc.&lt;/p&gt; &#xA;&lt;p&gt;When using a development snapshot rather than a released version the version number includes the git hash (in its abbreviated form):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;pgloader version &#34;3.0.99&#34;&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Release candidate 9 for pgloader version 3.1, with a &lt;em&gt;git tag&lt;/em&gt; named &lt;code&gt;v3.0.99&lt;/code&gt; so that it&#39;s easy to checkout the same sources as the released code.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;pgloader version &#34;3.0.fecae2c&#34;&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Development snapshot again &lt;em&gt;git hash&lt;/em&gt; &lt;code&gt;fecae2c&lt;/code&gt;. It&#39;s possible to have the same sources on another setup with using the git command &lt;code&gt;git checkout fecae2c&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;pgloader version &#34;3.1.0&#34;&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Stable release.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;LICENCE&lt;/h2&gt; &#xA;&lt;p&gt;pgloader is available under &lt;a href=&#34;http://www.postgresql.org/about/licence/&#34;&gt;The PostgreSQL Licence&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;INSTALL&lt;/h2&gt; &#xA;&lt;p&gt;You can install pgloader directly from &lt;a href=&#34;https://wiki.postgresql.org/wiki/Apt&#34;&gt;apt.postgresql.org&lt;/a&gt; and from official debian repositories, see &lt;a href=&#34;https://packages.debian.org/search?keywords=pgloader&#34;&gt;packages.debian.org/pgloader&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ apt-get install pgloader&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also use a &lt;strong&gt;docker&lt;/strong&gt; image for pgloader at &lt;a href=&#34;https://hub.docker.com/r/dimitri/pgloader/&#34;&gt;https://hub.docker.com/r/dimitri/pgloader/&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ docker pull dimitri/pgloader&#xA;$ docker run --rm --name pgloader dimitri/pgloader:latest pgloader --version&#xA;$ docker run --rm --name pgloader dimitri/pgloader:latest pgloader --help&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Build from sources&lt;/h2&gt; &#xA;&lt;p&gt;pgloader is now a Common Lisp program, tested using the &lt;a href=&#34;http://sbcl.org/&#34;&gt;SBCL&lt;/a&gt; (&amp;gt;= 1.2.5) and &lt;a href=&#34;http://ccl.clozure.com/&#34;&gt;Clozure CL&lt;/a&gt; implementations with &lt;a href=&#34;http://www.quicklisp.org/beta/&#34;&gt;Quicklisp&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;When building from sources, you should always build from the current git &lt;code&gt;HEAD&lt;/code&gt; as it&#39;s basically the only source that is managed in a way to ensure it builds aginst current set of dependencies versions.&lt;/p&gt; &#xA;&lt;h3&gt;Building from sources on debian&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ apt-get install sbcl unzip libsqlite3-dev make curl gawk freetds-dev libzip-dev&#xA;$ cd /path/to/pgloader&#xA;$ make pgloader&#xA;$ ./build/bin/pgloader --help&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Building from sources on RedHat/CentOS&lt;/h3&gt; &#xA;&lt;p&gt;See &#34;Redhat / CentOS&#34; in &lt;a href=&#34;https://raw.githubusercontent.com/dimitri/pgloader/master/INSTALL.md#redhat--centos&#34;&gt;INSTALL.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Building from sources on macOS&lt;/h3&gt; &#xA;&lt;p&gt;When using &lt;a href=&#34;https://brew.sh&#34;&gt;brew&lt;/a&gt;, it should be a simple &lt;code&gt;brew install --HEAD pgloader&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;When using &lt;a href=&#34;https://www.macports.org&#34;&gt;macports&lt;/a&gt;, then we have a situation to deal with with shared objects pgloader depends on, as reported in issue #161 at &lt;a href=&#34;https://github.com/dimitri/pgloader/issues/161#issuecomment-201162647&#34;&gt;https://github.com/dimitri/pgloader/issues/161#issuecomment-201162647&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;I was able to get a clean build without having to disable compression after symlinking /usr/local/lib to /opt/local/lib. Note that I did not have anything installed to /usr/local/lib so I didn&#39;t lose anything here.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Building from sources on Windows&lt;/h3&gt; &#xA;&lt;p&gt;Building pgloader on Windows is supported, thanks to Common Lisp implementations being available on that platform, and to the Common Lisp Standard for making it easy to write actually portable code.&lt;/p&gt; &#xA;&lt;p&gt;It is recommended to have a look at the issues labelled with &lt;em&gt;Windows support&lt;/em&gt; if you run into trouble when building pgloader:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/dimitri/pgloader/issues?utf8=%E2%9C%93&amp;amp;q=label%3A%22Windows%20support%22%20&#34;&gt;https://github.com/dimitri/pgloader/issues?utf8=âœ“&amp;amp;q=label%3A%22Windows%20support%22%20&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Building Docker image from sources&lt;/h3&gt; &#xA;&lt;p&gt;You can build a Docker image from source using SBCL by default:&lt;/p&gt; &#xA;&lt;p&gt;$ docker build .&lt;/p&gt; &#xA;&lt;p&gt;Or Clozure CL (CCL):&lt;/p&gt; &#xA;&lt;p&gt;$ docker build -f Dockerfile.ccl .&lt;/p&gt; &#xA;&lt;h2&gt;More options when building from source&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;Makefile&lt;/code&gt; target &lt;code&gt;pgloader&lt;/code&gt; knows how to produce a Self Contained Binary file for pgloader, found at &lt;code&gt;./build/bin/pgloader&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ make pgloader&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default, the &lt;code&gt;Makefile&lt;/code&gt; uses &lt;a href=&#34;http://sbcl.org/&#34;&gt;SBCL&lt;/a&gt; to compile your binary image, though it&#39;s possible to build using &lt;a href=&#34;http://ccl.clozure.com/&#34;&gt;CCL&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ make CL=ccl pgloader&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If using &lt;code&gt;SBCL&lt;/code&gt; and it supports core compression, the make process will use it to generate a smaller binary. To force disabling core compression, you may use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ make COMPRESS_CORE=no pgloader&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;--compress-core&lt;/code&gt; is unique to SBCL, so not used when &lt;code&gt;CC&lt;/code&gt; is different from the &lt;code&gt;sbcl&lt;/code&gt; value.&lt;/p&gt; &#xA;&lt;p&gt;You can also tweak the default amount of memory that the &lt;code&gt;pgloader&lt;/code&gt; image will allow itself using when running through your data (don&#39;t ask for more than your current RAM tho):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ make DYNSIZE=8192 pgloader&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;make pgloader&lt;/code&gt; command when successful outputs a &lt;code&gt;./build/bin/pgloader&lt;/code&gt; file for you to use.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;You can either give a command file to pgloader or run it all from the command line, see the &lt;a href=&#34;https://pgloader.readthedocs.io/en/latest/tutorial/tutorial.html#pgloader-quick-start&#34;&gt;pgloader quick start&lt;/a&gt; on &lt;a href=&#34;https://pgloader.readthedocs.io&#34;&gt;https://pgloader.readthedocs.io&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ./build/bin/pgloader --help&#xA;$ ./build/bin/pgloader &amp;lt;file.load&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For example, for a full migration from SQLite:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ createdb newdb&#xA;$ pgloader ./test/sqlite/sqlite.db postgresql:///newdb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or for a full migration from MySQL, including schema definition (tables, indexes, foreign keys, comments) and parallel loading of the corrected data:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ createdb pagila&#xA;$ pgloader mysql://user@localhost/sakila postgresql:///pagila&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>norvig/paip-lisp</title>
    <updated>2022-07-01T02:36:10Z</updated>
    <id>tag:github.com,2022-07-01:/norvig/paip-lisp</id>
    <link href="https://github.com/norvig/paip-lisp" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Lisp code for the textbook &#34;Paradigms of Artificial Intelligence Programming&#34;&lt;/p&gt;&lt;hr&gt;&lt;img src=&#34;https://raw.githubusercontent.com/norvig/paip-lisp/main/paip-cover.png&#34; title=&#34;Paradigms of Artificial Intelligence Programming&#34; width=&#34;413&#34;&gt; &#xA;&lt;p&gt;This is an open-source repository for the book &lt;em&gt;Paradigms of Artificial Intelligence Programming: Case Studies in Common Lisp&lt;/em&gt; by Peter Norvig (1992), and the code contained therein. The copyright has reverted to the author, who has shared it here under MIT license. On the list of &lt;a href=&#34;https://github.com/cs-books/influential-cs-books&#34;&gt;most influential books for programmers&lt;/a&gt;. As seen on &lt;a href=&#34;https://norvig.com/paip-tv.html&#34;&gt;TV&lt;/a&gt;. See also: &lt;a href=&#34;https://norvig.com/paip-errata.html&#34;&gt;errata&lt;/a&gt;, &lt;a href=&#34;https://norvig.com/paip-comments.html&#34;&gt;comments&lt;/a&gt;, &lt;a href=&#34;https://norvig.com/Lisp-retro.html&#34;&gt;retrospective&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The book is available in these formats:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;pdf, 4th edition: &lt;a href=&#34;https://github.com/norvig/paip-lisp/releases/tag/v1.2&#34;&gt;see releases&lt;/a&gt; (this is a better scan than that of the 6th edition)&lt;/li&gt; &#xA; &lt;li&gt;pdf, 6th edition: &lt;a href=&#34;https://github.com/norvig/paip-lisp/releases/tag/v1.0&#34;&gt;see releases&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;text: &lt;a href=&#34;https://github.com/norvig/paip-lisp/raw/master/PAIP.txt&#34;&gt;PAIP.txt&lt;/a&gt; (from OCR&#39;ing the scanned pdf, containing many errors)&lt;/li&gt; &#xA; &lt;li&gt;epub: &lt;a href=&#34;https://github.com/norvig/paip-lisp/releases/tag/1.1&#34;&gt;see releases&lt;/a&gt; for a cleaned up version downloaded from Safari (much cleaner than the scanned versions)&lt;/li&gt; &#xA; &lt;li&gt;and &lt;code&gt;chapter?.md&lt;/code&gt; markdown files:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Table of Contents&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Paradigms of Artificial Intelligence Programming&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/norvig/paip-lisp/main/docs/frontmatter.md&#34;&gt;Front matter&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/norvig/paip-lisp/main/docs/preface.md&#34;&gt;Preface&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Part I: Introduction to Common Lisp&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;1 &lt;a href=&#34;https://raw.githubusercontent.com/norvig/paip-lisp/main/docs/chapter1.md&#34;&gt;Introduction to Lisp&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;2 &lt;a href=&#34;https://raw.githubusercontent.com/norvig/paip-lisp/main/docs/chapter2.md&#34;&gt;A Simple Lisp Program&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;3 &lt;a href=&#34;https://raw.githubusercontent.com/norvig/paip-lisp/main/docs/chapter3.md&#34;&gt;Overview of Lisp&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Part II: Early AI Programs&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;4 &lt;a href=&#34;https://raw.githubusercontent.com/norvig/paip-lisp/main/docs/chapter4.md&#34;&gt;GPS: The General problem Solver&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;5 &lt;a href=&#34;https://raw.githubusercontent.com/norvig/paip-lisp/main/docs/chapter5.md&#34;&gt;Eliza: Dialog with a Machine&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;6 &lt;a href=&#34;https://raw.githubusercontent.com/norvig/paip-lisp/main/docs/chapter6.md&#34;&gt;Building Software Tools&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;7 &lt;a href=&#34;https://raw.githubusercontent.com/norvig/paip-lisp/main/docs/chapter7.md&#34;&gt;Student: Solving Algebra Word Problems&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;8 &lt;a href=&#34;https://raw.githubusercontent.com/norvig/paip-lisp/main/docs/chapter8.md&#34;&gt;Symbolic Mathematics: A Simplification Program&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Part III: Tools and Techniques&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;9 &lt;a href=&#34;https://raw.githubusercontent.com/norvig/paip-lisp/main/docs/chapter9.md&#34;&gt;Efficiency Issues&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;10 &lt;a href=&#34;https://raw.githubusercontent.com/norvig/paip-lisp/main/docs/chapter10.md&#34;&gt;Low-Level Efficiency Issues&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;11 &lt;a href=&#34;https://raw.githubusercontent.com/norvig/paip-lisp/main/docs/chapter11.md&#34;&gt;Logic Programming&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;12 &lt;a href=&#34;https://raw.githubusercontent.com/norvig/paip-lisp/main/docs/chapter12.md&#34;&gt;Compiling Logic programs&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;13 &lt;a href=&#34;https://raw.githubusercontent.com/norvig/paip-lisp/main/docs/chapter13.md&#34;&gt;Object-Oriented Programming&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;14 &lt;a href=&#34;https://raw.githubusercontent.com/norvig/paip-lisp/main/docs/chapter14.md&#34;&gt;Knowledge Representation and Reasoning&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Part IV: Advanced AI Programs&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;15 &lt;a href=&#34;https://raw.githubusercontent.com/norvig/paip-lisp/main/docs/chapter15.md&#34;&gt;Symbolic Mathematics with Canonical Forms&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;16 &lt;a href=&#34;https://raw.githubusercontent.com/norvig/paip-lisp/main/docs/chapter16.md&#34;&gt;Expert Systems&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;17 &lt;a href=&#34;https://raw.githubusercontent.com/norvig/paip-lisp/main/docs/chapter17.md&#34;&gt;Line-Diagram Labeling by Constraint Satisfaction&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;18 &lt;a href=&#34;https://raw.githubusercontent.com/norvig/paip-lisp/main/docs/chapter18.md&#34;&gt;Search and the Game of Othello&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;19 &lt;a href=&#34;https://raw.githubusercontent.com/norvig/paip-lisp/main/docs/chapter19.md&#34;&gt;Introduction to Natural Language&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;20 &lt;a href=&#34;https://raw.githubusercontent.com/norvig/paip-lisp/main/docs/chapter20.md&#34;&gt;Unification Grammars&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;21 &lt;a href=&#34;https://raw.githubusercontent.com/norvig/paip-lisp/main/docs/chapter21.md&#34;&gt;A Grammar of English&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Part V: The Rest of Lisp&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;22 &lt;a href=&#34;https://raw.githubusercontent.com/norvig/paip-lisp/main/docs/chapter22.md&#34;&gt;Scheme: An Uncommon Lisp&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;23 &lt;a href=&#34;https://raw.githubusercontent.com/norvig/paip-lisp/main/docs/chapter23.md&#34;&gt;Compiling Lisp&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;24 &lt;a href=&#34;https://raw.githubusercontent.com/norvig/paip-lisp/main/docs/chapter24.md&#34;&gt;ANSI Common Lisp&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;25 &lt;a href=&#34;https://raw.githubusercontent.com/norvig/paip-lisp/main/docs/chapter25.md&#34;&gt;Troubleshooting&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;The Lisp Files&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://github.com/norvig/paip-lisp/tree/master/lisp&#34;&gt;Lisp code files&lt;/a&gt; are listed here:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;CH&lt;/th&gt; &#xA;   &lt;th&gt;Filename&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/norvig/paip-lisp/main/lisp/examples.lisp&#34;&gt;examples.lisp&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A list of example inputs taken from the book&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/norvig/paip-lisp/main/lisp/tutor.lisp&#34;&gt;tutor.lisp&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;An interpreter for running the examples&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/norvig/paip-lisp/main/lisp/auxfns.lisp&#34;&gt;auxfns.lisp&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Auxiliary functions; load this before anything else&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/norvig/paip-lisp/main/lisp/intro.lisp&#34;&gt;intro.lisp&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A few simple definitions&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;2&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/norvig/paip-lisp/main/lisp/simple.lisp&#34;&gt;simple.lisp&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Random sentence generator (two versions)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;3&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/norvig/paip-lisp/main/lisp/overview.lisp&#34;&gt;overview.lisp&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;14 versions of LENGTH and other examples&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;4&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/norvig/paip-lisp/main/lisp/gps1.lisp&#34;&gt;gps1.lisp&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Simple version of General Problem Solver&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;4&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/norvig/paip-lisp/main/lisp/gps.lisp&#34;&gt;gps.lisp&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Final version of General Problem Solver&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;5&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/norvig/paip-lisp/main/lisp/eliza1.lisp&#34;&gt;eliza1.lisp&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Basic version of Eliza program&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;5&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/norvig/paip-lisp/main/lisp/eliza.lisp&#34;&gt;eliza.lisp&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Eliza with more rules; different reader&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;6&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/norvig/paip-lisp/main/lisp/patmatch.lisp&#34;&gt;patmatch.lisp&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Pattern Matching Utility&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;6&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/norvig/paip-lisp/main/lisp/eliza-pm.lisp&#34;&gt;eliza-pm.lisp&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Version of Eliza using utilities&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;6&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/norvig/paip-lisp/main/lisp/search.lisp&#34;&gt;search.lisp&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Search Utility&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;6&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/norvig/paip-lisp/main/lisp/gps-srch.lisp&#34;&gt;gps-srch.lisp&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Version of GPS using the search utility&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;7&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/norvig/paip-lisp/main/lisp/student.lisp&#34;&gt;student.lisp&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The Student Program&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;8&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/norvig/paip-lisp/main/lisp/macsyma.lisp&#34;&gt;macsyma.lisp&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The Macsyma Program&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;8&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/norvig/paip-lisp/main/lisp/macsymar.lisp&#34;&gt;macsymar.lisp&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Simplification and integration rules for Macsyma&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;9-10&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/norvig/paip-lisp/main/lisp/auxfns.lisp&#34;&gt;auxfns.lisp&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Auxiliary functions&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;11&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/norvig/paip-lisp/main/lisp/unify.lisp&#34;&gt;unify.lisp&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Unification functions&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;11&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/norvig/paip-lisp/main/lisp/prolog1.lisp&#34;&gt;prolog1.lisp&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;First version of Prolog interpreter&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;11&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/norvig/paip-lisp/main/lisp/prolog.lisp&#34;&gt;prolog.lisp&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Final version of Prolog interpreter&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;12&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/norvig/paip-lisp/main/lisp/prologc1.lisp&#34;&gt;prologc1.lisp&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;First version of Prolog compiler&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;12&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/norvig/paip-lisp/main/lisp/prologc2.lisp&#34;&gt;prologc2.lisp&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Second version of Prolog compiler&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;12&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/norvig/paip-lisp/main/lisp/prologc.lisp&#34;&gt;prologc.lisp&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Final version of Prolog compiler&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;12&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/norvig/paip-lisp/main/lisp/prologcp.lisp&#34;&gt;prologcp.lisp&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Primitives for Prolog compiler&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;13&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/norvig/paip-lisp/main/lisp/clos.lisp&#34;&gt;clos.lisp&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Some object-oriented and CLOS code&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;14&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/norvig/paip-lisp/main/lisp/krep1.lisp&#34;&gt;krep1.lisp&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Knowledge Representation code: first version&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;14&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/norvig/paip-lisp/main/lisp/krep2.lisp&#34;&gt;krep2.lisp&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Knowledge Representation code with conjunctions&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;14&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/norvig/paip-lisp/main/lisp/krep.lisp&#34;&gt;krep.lisp&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Final KR code: worlds and attached functions&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;15&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/norvig/paip-lisp/main/lisp/cmacsyma.lisp&#34;&gt;cmacsyma.lisp&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Efficient Macsyma with canonical form&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;16&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/norvig/paip-lisp/main/lisp/mycin.lisp&#34;&gt;mycin.lisp&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The Emycin expert system shell&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;16&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/norvig/paip-lisp/main/lisp/mycin-r.lisp&#34;&gt;mycin-r.lisp&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Some rules for a medical application of emycin&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;17&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/norvig/paip-lisp/main/lisp/waltz.lisp&#34;&gt;waltz.lisp&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A Line-Labeling program using the Waltz algorithm&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;18&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/norvig/paip-lisp/main/lisp/othello.lisp&#34;&gt;othello.lisp&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The Othello playing program and some strategies&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;18&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/norvig/paip-lisp/main/lisp/othello2.lisp&#34;&gt;othello2.lisp&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Additional strategies for Othello&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;18&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/norvig/paip-lisp/main/lisp/edge-tab.lisp&#34;&gt;edge-tab.lisp&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Edge table for Iago strategy&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;19&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/norvig/paip-lisp/main/lisp/syntax1.lisp&#34;&gt;syntax1.lisp&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Syntactic Parser&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;19&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/norvig/paip-lisp/main/lisp/syntax2.lisp&#34;&gt;syntax2.lisp&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Syntactic Parser with semantics&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;19&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/norvig/paip-lisp/main/lisp/syntax3.lisp&#34;&gt;syntax3.lisp&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Syntactic Parser with semantics and preferences&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;20&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/norvig/paip-lisp/main/lisp/unifgram.lisp&#34;&gt;unifgram.lisp&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Unification Parser&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;21&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/norvig/paip-lisp/main/lisp/grammar.lisp&#34;&gt;grammar.lisp&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Comprehensive grammar of English&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;21&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/norvig/paip-lisp/main/lisp/lexicon.lisp&#34;&gt;lexicon.lisp&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Sample Lexicon of English&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;22&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/norvig/paip-lisp/main/lisp/interp1.lisp&#34;&gt;interp1.lisp&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Scheme interpreter, including version with macros&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;22&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/norvig/paip-lisp/main/lisp/interp2.lisp&#34;&gt;interp2.lisp&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A tail recursive Scheme interpreter&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;22&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/norvig/paip-lisp/main/lisp/interp3.lisp&#34;&gt;interp3.lisp&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A Scheme interpreter that handles call/cc&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;23&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/norvig/paip-lisp/main/lisp/compile1.lisp&#34;&gt;compile1.lisp&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Simple Scheme compiler&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;23&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/norvig/paip-lisp/main/lisp/compile2.lisp&#34;&gt;compile2.lisp&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Compiler with tail recursion and primitives&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;23&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/norvig/paip-lisp/main/lisp/compile3.lisp&#34;&gt;compile3.lisp&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Compiler with peephole optimizer&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;23&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/norvig/paip-lisp/main/lisp/compopt.lisp&#34;&gt;compopt.lisp&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Peephole optimizers for compile3.lisp&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h1&gt;Running the Code&lt;/h1&gt; &#xA;&lt;p&gt;There is no single &#34;application&#34; to run. Rather, there is a collection of source code files, duplicating the code in the book. You can read and/or run whatever you like. Lisp is an interactive language, and you will need to interact with the code to get benefit from it. Some hints:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You will need a Common Lisp interpreter/compiler/environment. Here&#39;s a &lt;a href=&#34;https://www.reddit.com/r/lisp/comments/752wxe/what_is_the_best_common_lisp_interpreter_out_there/&#34;&gt;discussion&lt;/a&gt; of the options.&lt;/li&gt; &#xA; &lt;li&gt;You will always need &lt;code&gt;(load &#34;auxfns.lisp&#34;)&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;You will need &lt;code&gt;(requires &#34;&lt;/code&gt;&lt;em&gt;file&lt;/em&gt;&lt;code&gt;&#34;)&lt;/code&gt;, for the various instances of &lt;em&gt;file&lt;/em&gt; that you want to use. (If &lt;code&gt;requires&lt;/code&gt; does not work properly on your system you may have to alter its definition, in &lt;code&gt;auxfns.lisp&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;The function &lt;code&gt;do-examples&lt;/code&gt;, which takes as an argument either &lt;code&gt;:all&lt;/code&gt; or a chapter number or a list of chapter numbers, can be used to see examples of the use of various functions. For example, &lt;code&gt;(do-examples 1)&lt;/code&gt; shows the examples from chapter 1. Access this by doing &lt;code&gt;(requires &#34;examples&#34;)&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Other resources&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;I wrote a &lt;a href=&#34;http://norvig.com/Lisp-retro.html&#34;&gt;retrospective&lt;/a&gt; on the book in 2002.&lt;/li&gt; &#xA; &lt;li&gt;There is a nice &lt;a href=&#34;https://github.com/dhconnelly/paip-python&#34;&gt;Python version&lt;/a&gt; of the code, by Daniel Connelly at Georgia Tech, supervised by Ashok Goel.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>sbcl/sbcl</title>
    <updated>2022-07-01T02:36:10Z</updated>
    <id>tag:github.com,2022-07-01:/sbcl/sbcl</id>
    <link href="https://github.com/sbcl/sbcl" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Mirror of Steel Bank Common Lisp (SBCL)&#39;s official repository&lt;/p&gt;&lt;hr&gt;&lt;p&gt;GENERAL INFORMATION&lt;/p&gt; &#xA;&lt;p&gt;Welcome to SBCL.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;d like to install or build the system, see the &#34;INSTALL&#34; file.&lt;/p&gt; &#xA;&lt;p&gt;To find out more about who created the system, see the &#34;CREDITS&#34; file.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;d like information about the legalities of copying the system, see the &#34;COPYING&#34; file.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;d like more information about using the system, see the man page, &#34;sbcl.1&#34;, or the user manual in the &#34;doc/manual&#34; subdirectory of the distribution. (The user manual is maintained as Texinfo in the source distribution; HTML version is available for download, and &#34;INSTALL&#34; describes how to build the Texinfo version in HTML and PDF.)&lt;/p&gt; &#xA;&lt;p&gt;The system is a work in progress. See the &#34;TODO&#34; file in the source distribution for some highlights.&lt;/p&gt; &#xA;&lt;p&gt;The &#34;BUGS&#34; file lists current known bugs.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;d like to make suggestions, report a bug, or help to improve the system, please send mail to one of the mailing lists: &lt;a href=&#34;mailto:sbcl-help@lists.sourceforge.net&#34;&gt;sbcl-help@lists.sourceforge.net&lt;/a&gt; &lt;a href=&#34;mailto:sbcl-devel@lists.sourceforge.net&#34;&gt;sbcl-devel@lists.sourceforge.net&lt;/a&gt; Note that as a spam reduction measure you must subscribe to the lists before you can post.&lt;/p&gt; &#xA;&lt;p&gt;The &#34;HACKING&#34; file has more details regarding hacking on and contributing to SBCL.&lt;/p&gt; &#xA;&lt;p&gt;SYSTEM-SPECIFIC HINTS&lt;/p&gt; &#xA;&lt;p&gt;for OpenBSD 6.0 and newer: SBCL must be built and run from a filesystem with the &#34;wxallowed&#34; mount option, such as /usr/local in the default install.&lt;/p&gt;</summary>
  </entry>
</feed>