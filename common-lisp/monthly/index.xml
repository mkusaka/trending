<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Common Lisp Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-09-01T01:49:27Z</updated>
  <subtitle>Monthly Trending of Common Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>lem-project/lem</title>
    <updated>2022-09-01T01:49:27Z</updated>
    <id>tag:github.com,2022-09-01:/lem-project/lem</id>
    <link href="https://github.com/lem-project/lem" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Common Lisp editor/IDE with high expansibility&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Lem is the editor/IDE well-tuned for Common Lisp.&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/Shinmera/lem-icon/raw/gh-pages/icon-blue.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/lem-project/lem/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt; &lt;a href=&#34;https://raw.githubusercontent.com/lem-project/lem/master/#backers&#34;&gt;&lt;img src=&#34;https://opencollective.com/lem/backers/badge.svg?sanitize=true&#34; alt=&#34;Backers on Open Collective&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/lem-project/lem/master/#sponsors&#34;&gt;&lt;img src=&#34;https://opencollective.com/lem/sponsors/badge.svg?sanitize=true&#34; alt=&#34;Sponsors on Open Collective&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;After installing lem, you can start developing in Common Lisp at once.&lt;/p&gt; &#xA;&lt;p&gt;You can skip over writing tidy settings or installing many plugins as you do on Emacs.&lt;/p&gt; &#xA;&lt;h2&gt;Screenshot&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/lem-project/lem/master/screenshots/terminal.png&#34; alt=&#34;Terminal&#34;&gt;„ÄÄ„ÄÄ&lt;/p&gt; &#xA;&lt;h2&gt;Requirement&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/roswell/roswell&#34;&gt;roswell&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;ncurses&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Platform&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Linux&lt;/li&gt; &#xA; &lt;li&gt;MacOS 10.13+&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lem-project/lem/wiki/Windows-Platform&#34;&gt;Windows&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Play with Lem in the Docker&lt;/h2&gt; &#xA;&lt;p&gt;You can try Lem by running it in a docker container:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run --rm -ti -v `pwd`:/app 40ants/lem:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Please install roswell at first.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/roswell/roswell/wiki/Installation&#34;&gt;Roswell Installation Guide&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;After that, please follow the steps bellow.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;1. install lem by roswell&#xA;$ ros install lem-project/lem&#xA;&#xA;2. add the PATH in the initialization file(such as ~/.bashrc)&#xA;export PATH=$PATH:~/.roswell/bin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Updating&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ros update lem&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ lem &amp;lt;filename.lisp&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can watch the screencast on Youtube.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://youtu.be/YkSJ3p7Z9H0&#34;&gt;Screencast&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;Lem loads &lt;code&gt;~/.lem/init.lisp&lt;/code&gt; when starting up.&lt;/p&gt; &#xA;&lt;p&gt;You can see an example &lt;a href=&#34;https://raw.githubusercontent.com/lem-project/lem/master/lemrc-example&#34;&gt;here&lt;/a&gt; or &lt;a href=&#34;https://github.com/Fedreg/.lem/raw/master/init.lisp&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;fukamachi also published his init files on GitHub. &lt;a href=&#34;https://github.com/fukamachi/.lem&#34;&gt;https://github.com/fukamachi/.lem&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Extensions and modes&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/40ants/lem-pareto&#34;&gt;Pareto&lt;/a&gt; - A mode, complement to the Paredit. Makes Lisp code editing even more efficient!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Electron version (Experiment)&lt;/h2&gt; &#xA;&lt;p&gt;Electron version is in the experimental stage.&lt;/p&gt; &#xA;&lt;p&gt;If you try, please follow below steps.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ node -v  # check if your nodejs is 8.9.3LTS+.&#xA;v8.9.3&#xA;$ npm -v&#xA;5.5.1&#xA;$ npm install -g cxxxr/lem   # install lem-electron&#xA;$ lem-electron               # Electron version will start&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/lem-project/lem/master/screenshots/electron.png&#34; alt=&#34;Electron&#34;&gt;„ÄÄ„ÄÄ&lt;/p&gt; &#xA;&lt;h2&gt;Lem on platforms without SBCL thread support (e.g. raspberry pi3)&lt;/h2&gt; &#xA;&lt;p&gt;If installation fails due to &lt;code&gt;bordeaux-threads&lt;/code&gt;, there is no thread provided by SBCL on your PC.&lt;br&gt; You need to use Clozure Common Lisp (CCL) instead of SBCL.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ros install ccl-bin&#xA;$ ros use ccl-bin&#xA;$ ros install cxxxr/lem&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And also need to specify frontend to &lt;code&gt;ncurses-ccl&lt;/code&gt;. You can launch lem as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ lem --frontend ncurses-ccl&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;How to develop lisp&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/lem-project/lem/wiki/Lisp-Mode&#34;&gt;https://github.com/lem-project/lem/wiki/Lisp-Mode&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;How to hack on lem itself&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/lem-project/lem/wiki/How-to-hack-on-lem-itself&#34;&gt;https://github.com/lem-project/lem/wiki/How-to-hack-on-lem-itself&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you have a questions, join &lt;a href=&#34;https://gitter.im/lem-developers/community&#34;&gt;this Gitter chat&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributors&lt;/h2&gt; &#xA;&lt;p&gt;This project exists thanks to all the people who contribute. &lt;a href=&#34;https://raw.githubusercontent.com/lem-project/lem/master/CONTRIBUTING.md&#34;&gt;[Contribute]&lt;/a&gt;. &lt;a href=&#34;https://raw.githubusercontent.com/lem-project/lem/master/graphs/contributors&#34;&gt;&lt;img src=&#34;https://opencollective.com/lem/contributors.svg?width=890&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Backers&lt;/h2&gt; &#xA;&lt;p&gt;Thank you to all our backers! üôè [&lt;a href=&#34;https://opencollective.com/lem#backer&#34;&gt;Become a backer&lt;/a&gt;]&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opencollective.com/lem#backers&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/lem/backers.svg?width=890&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Sponsors&lt;/h2&gt; &#xA;&lt;p&gt;Support this project by becoming a sponsor. Your logo will show up here with a link to your website. [&lt;a href=&#34;https://opencollective.com/lem#sponsor&#34;&gt;Become a sponsor&lt;/a&gt;]&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opencollective.com/lem/sponsor/0/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/lem/sponsor/0/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/lem/sponsor/1/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/lem/sponsor/1/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/lem/sponsor/2/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/lem/sponsor/2/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/lem/sponsor/3/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/lem/sponsor/3/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/lem/sponsor/4/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/lem/sponsor/4/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/lem/sponsor/5/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/lem/sponsor/5/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/lem/sponsor/6/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/lem/sponsor/6/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/lem/sponsor/7/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/lem/sponsor/7/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/lem/sponsor/8/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/lem/sponsor/8/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/lem/sponsor/9/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/lem/sponsor/9/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/lem-project/lem/raw/master/LICENCE&#34;&gt;MIT&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>coalton-lang/coalton</title>
    <updated>2022-09-01T01:49:27Z</updated>
    <id>tag:github.com,2022-09-01:/coalton-lang/coalton</id>
    <link href="https://github.com/coalton-lang/coalton" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Coalton is an efficient, statically typed functional programming language that supercharges Common Lisp.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/coalton-lang/coalton/main/docs/assets/coalton-logotype-gray.svg?sanitize=true&#34; style=&#34;zoom:45%;&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34; class=&#34;badges&#34;&gt; &lt;a href=&#34;https://github.com/coalton-lang/coalton/actions/workflows/main.yml&#34;&gt; &lt;img alt=&#34;Github Workflow Status&#34; src=&#34;https://img.shields.io/github/workflow/status/coalton-lang/coalton/CI?logo=github&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://discord.gg/cPb6Bc4xAH&#34;&gt; &lt;img alt=&#34;Discord&#34; src=&#34;https://img.shields.io/discord/888196168067199046?logo=discord&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;Coalton is an efficient, statically typed functional programming language that supercharges Common Lisp.&lt;/p&gt; &#xA;&lt;p&gt;Coalton can be written in files:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(in-package #:coalton-user)&#xA;&#xA;(coalton-toplevel&#xA;  (define-type Symbol&#xA;    (Symbol String))&#xA;&#xA;  (define (symbol-name sym)&#xA;    (match sym&#xA;      ((Symbol s) s)))&#xA;&#xA;  (define-instance (Eq Symbol)&#xA;    (define (== a b)&#xA;      (== (symbol-name a) (symbol-name b))))&#xA;&#xA;  (define-type Expr&#xA;    &#34;A symbolic expression of basic arithmetic.&#34;&#xA;    (EConst Integer)&#xA;    (EVar   Symbol)&#xA;    (E+     Expr Expr)&#xA;    (E*     Expr Expr))&#xA;&#xA;  (declare diff (Symbol -&amp;gt; Expr -&amp;gt; Expr))&#xA;  (define (diff x f)&#xA;    &#34;Compute the derivative of F with respect to X.&#34;&#xA;    (match f&#xA;      ((EConst _)   ; c&#39; = 0&#xA;       (EConst 0))&#xA;      ((EVar s)     ; x&#39; = 1&#xA;       (if (== s x) (EConst 1) (EConst 0)))&#xA;      ((E+ a b)     ; (a+b)&#39; = a&#39; + b&#39;&#xA;       (E+ (diff x a) (diff x b)))&#xA;      ((E* a b)     ; (ab)&#39; = a&#39;b + ab&#39;&#xA;       (E+ (E* (diff x a) b)&#xA;           (E* a          (diff x b))))))&#xA;&#xA; (declare dt (Expr -&amp;gt; Expr))&#xA; (define dt&#xA;   &#34;The time derivative operator.&#34;&#xA;   (diff (Symbol &#34;t&#34;))))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And at the REPL:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;CL-USER&amp;gt; (in-package #:coalton-user)&#xA;COALTON-USER&amp;gt; (coalton (dt (E+ (EVar (Symbol &#34;t&#34;))&#xA;                               (EConst 1))))&#xA;#.(E+ #.(ECONST 1) #.(ECONST 0))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;Coalton has &lt;strong&gt;not&lt;/strong&gt; reached &#34;1.0&#34; yet. This means that, from time to time, you may have a substandard user experience. While we try to be ANSI-conforming, Coalton may only work on SBCL 2.1.x.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Prepare&lt;/strong&gt;: Install &lt;a href=&#34;http://www.sbcl.org/platform-table.html&#34;&gt;SBCL&lt;/a&gt; (on macOS with Homebrew: &lt;code&gt;brew install sbcl&lt;/code&gt;). Install Quicklisp by following instructions &lt;a href=&#34;https://www.quicklisp.org/beta/#installation&#34;&gt;here&lt;/a&gt;. (The step command involving &lt;code&gt;gpg&lt;/code&gt; is not needed.) After installing Quicklisp, you should have a &lt;code&gt;quicklisp&lt;/code&gt; folder which will make installing Coalton easier.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Install&lt;/strong&gt;: Clone this repository into a place your Lisp can see (e.g., &lt;code&gt;~/quicklisp/local-projects/&lt;/code&gt;). Coalton is not yet on Quicklisp.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Use&lt;/strong&gt;: Either run &lt;code&gt;(ql:quickload :coalton)&lt;/code&gt;, or add &lt;code&gt;#:coalton&lt;/code&gt; to your ASD&#39;s &lt;code&gt;:depends-on&lt;/code&gt; list. Quicklisp will automatically download all of Coalton&#39;s dependencies.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Test&lt;/strong&gt;: Compile the tests with &lt;code&gt;(ql:quickload :coalton/tests)&lt;/code&gt;, then run the tests with &lt;code&gt;(asdf:test-system :coalton)&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Learn&lt;/strong&gt;: We recommend starting with the &lt;a href=&#34;https://raw.githubusercontent.com/coalton-lang/coalton/main/docs/intro-to-coalton.md&#34;&gt;&lt;em&gt;Intro to Coalton&lt;/em&gt;&lt;/a&gt; document, and then taking a peek in the &lt;a href=&#34;https://raw.githubusercontent.com/coalton-lang/coalton/main/examples/&#34;&gt;examples directory&lt;/a&gt;. It may also be helpful to check out the &lt;a href=&#34;https://coalton-lang.github.io/20211010-introducing-coalton/&#34;&gt;introductory blog post&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;What&#39;s Here?&lt;/h2&gt; &#xA;&lt;p&gt;This repository contains the source code to the &lt;a href=&#34;https://raw.githubusercontent.com/coalton-lang/coalton/main/src/&#34;&gt;Coalton compiler&lt;/a&gt;, and the &lt;a href=&#34;https://raw.githubusercontent.com/coalton-lang/coalton/main/library/&#34;&gt;standard library&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;It also contains a few example programs, such as:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Some &lt;a href=&#34;https://raw.githubusercontent.com/coalton-lang/coalton/main/examples/small-coalton-programs/&#34;&gt;simple pedagogical programs&lt;/a&gt;,&lt;/li&gt; &#xA; &lt;li&gt;A &lt;a href=&#34;https://raw.githubusercontent.com/coalton-lang/coalton/main/examples/coalton-json&#34;&gt;JSON parser&lt;/a&gt; piggybacking on a native Common Lisp library.&lt;/li&gt; &#xA; &lt;li&gt;An &lt;a href=&#34;https://raw.githubusercontent.com/coalton-lang/coalton/main/examples/thih/&#34;&gt;implementation&lt;/a&gt; of Jones&#39;s &lt;em&gt;Typing Haskell in Haskell&lt;/em&gt;, and&lt;/li&gt; &#xA; &lt;li&gt;An &lt;a href=&#34;https://raw.githubusercontent.com/coalton-lang/coalton/main/examples/quil-coalton/&#34;&gt;implementation&lt;/a&gt; of a simple &lt;a href=&#34;https://en.wikipedia.org/wiki/Quil_(instruction_set_architecture)&#34;&gt;Quil&lt;/a&gt; parser using parser combinators.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Lastly and importantly, we maintain a collection of documentation about Coalton in the &lt;a href=&#34;https://raw.githubusercontent.com/coalton-lang/coalton/main/docs/&#34;&gt;docs&lt;/a&gt; directory, including a &lt;a href=&#34;https://coalton-lang.github.io/reference/&#34;&gt;standard library reference guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Get Involved&lt;/h2&gt; &#xA;&lt;p&gt;Want to ask a question about Coalton, propose a feature, or share a cool program you wrote? Try posting in the &lt;a href=&#34;https://github.com/coalton-lang/coalton/discussions&#34;&gt;GitHub Discussions&lt;/a&gt; page!&lt;/p&gt; &#xA;&lt;p&gt;We welcome contributions of all forms, especially as we stabilize toward a 1.0 release. We would be grateful to receive:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;bug reports (filed as issues),&lt;/li&gt; &#xA; &lt;li&gt;bug fixes and typo corrections (filed as pull requests),&lt;/li&gt; &#xA; &lt;li&gt;small &lt;a href=&#34;https://raw.githubusercontent.com/coalton-lang/coalton/main/examples/small-coalton-programs/&#34;&gt;example programs&lt;/a&gt;, and&lt;/li&gt; &#xA; &lt;li&gt;user experience troubles.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>joaotavora/sly</title>
    <updated>2022-09-01T01:49:27Z</updated>
    <id>tag:github.com,2022-09-01:/joaotavora/sly</id>
    <link href="https://github.com/joaotavora/sly" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Sylvester the Cat&#39;s Common Lisp IDE&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/joaotavora/sly&#34;&gt;&lt;img src=&#34;https://travis-ci.org/joaotavora/sly.png?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://melpa.org/#/sly&#34;&gt;&lt;img src=&#34;http://melpa.org/packages/sly-badge.svg?sanitize=true&#34; alt=&#34;MELPA&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;          _____    __   __  __        &#xA;         / ___/   / /   \ \/ /               |\      _,,,---,,_&#xA;         \__ \   / /     \  /                /,`.-&#39;`&#39;    -.  ;-;;,_&#xA;        ___/ /  / /___   / /                |,4-  ) )-,_..;\ (  `&#39;-&#39;&#xA;       /____/  /_____/  /_/                &#39;---&#39;&#39;(_/--&#39;  `-&#39;\_)&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;SLY is Sylvester the Cat&#39;s Common Lisp IDE for Emacs:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ü§î Read &lt;a href=&#34;http://joaotavora.github.io/sly/#A-SLY-tour-for-SLIME-users&#34;&gt;a short illustrated guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;üìΩÔ∏è Scroll down this README for some &lt;a href=&#34;https://raw.githubusercontent.com/joaotavora/sly/master/#animated_gifs&#34;&gt;pretty gifs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;üì£ Read the &lt;a href=&#34;https://github.com/joaotavora/sly/raw/master/NEWS.md&#34;&gt;NEWS&lt;/a&gt; file&lt;/li&gt; &#xA; &lt;li&gt;üìö Read the &lt;a href=&#34;http://joaotavora.github.io/sly&#34;&gt;manual&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;SLY&#39;s highlights are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A &lt;a href=&#34;https://raw.githubusercontent.com/joaotavora/sly/master/#repl&#34;&gt;full-featured REPL&lt;/a&gt; based on Emacs&#39;s &lt;code&gt;comint.el&lt;/code&gt;. Everything can be copied to the REPL;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/joaotavora/sly/master/#stickers&#34;&gt;Stickers&lt;/a&gt;, or live code annotations that record values as code traverses them.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/joaotavora/sly/master/#company-flex-completion&#34;&gt;Flex-style completion&lt;/a&gt; out-of-the-box, using Emacs&#39;s completion API. Company, Helm, and other &lt;a href=&#34;https://raw.githubusercontent.com/joaotavora/sly/master/#completion&#34;&gt;supported natively&lt;/a&gt;, no plugin required;&lt;/li&gt; &#xA; &lt;li&gt;An interactive &lt;a href=&#34;http://joaotavora.github.io/sly/#Trace-Dialog&#34;&gt;Trace Dialog&lt;/a&gt;;&lt;/li&gt; &#xA; &lt;li&gt;Cleanly ASDF-loaded by default, including contribs, enabled out-of-the-box;&lt;/li&gt; &#xA; &lt;li&gt;Multiple inspectors and multiple REPLs;&lt;/li&gt; &#xA; &lt;li&gt;&#34;Presentations&#34; replaced by &lt;a href=&#34;https://raw.githubusercontent.com/joaotavora/sly/master/#repl&#34;&gt;interactive backreferences&lt;/a&gt; which highlight the object and remain stable throughout the REPL session;&lt;/li&gt; &#xA; &lt;li&gt;Support for &lt;a href=&#34;https://github.com/joaotavora/sly-named-readtables&#34;&gt;NAMED-READTABLES&lt;/a&gt;, &lt;a href=&#34;https://github.com/joaotavora/sly-macrostep&#34;&gt;macrostep.el&lt;/a&gt; and &lt;a href=&#34;https://github.com/joaotavora/sly-quicklisp&#34;&gt;quicklisp&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;A &lt;a href=&#34;https://zenodo.org/record/3742759&#34;&gt;portable, annotation-based stepper&lt;/a&gt; in &lt;a href=&#34;https://github.com/joaotavora/sly-stepper&#34;&gt;early&lt;/a&gt; but functional prototype stage.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;SLY is a fork of &lt;a href=&#34;http://www.common-lisp.net/project/slime/&#34;&gt;SLIME&lt;/a&gt;. We tracks its bugfixes, particularly to the implementation backends. All SLIME&#39;s familar features (debugger, inspector, xref, etc...) are still available, with improved overall UX.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Ensure that &lt;a href=&#34;https://github.com/milkypostman/melpa&#34;&gt;MELPA&lt;/a&gt; is setup as usual and ask &lt;code&gt;M-x package-install&lt;/code&gt; to install the package &lt;code&gt;sly&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;That&#39;s it&lt;/em&gt;. &lt;code&gt;sly-mode&lt;/code&gt; will automatically come up in every &lt;code&gt;.lisp&lt;/code&gt; file. To fire up SLY, connect to a Lisp and get a friendly REPL, use &lt;code&gt;M-x sly&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Even if you already have SLIME installed, SLY will ask you and temporarily disable it for the Emacs session.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;animated_gifs&#34;&gt;&lt;/a&gt; &lt;em&gt;Obligatory animated gif section&lt;/em&gt;&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a name=&#34;company-flex-completion&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://joaotavora.github.io/sly/#Completion&#34;&gt;Flex completion&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/joaotavora/sly/master/doc/animations/company-flex-completion.gif&#34; alt=&#34;company-flex-completion&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a name=&#34;repl&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://joaotavora.github.io/sly/#REPL-backreferences&#34;&gt;Backreferences&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/joaotavora/sly/master/doc/animations/backreferences.gif&#34; alt=&#34;backreferences&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://joaotavora.github.io/sly/#REPL-commands&#34;&gt;Reverse i-search&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/joaotavora/sly/master/doc/animations/reverse-isearch.gif&#34; alt=&#34;reverse-isearch&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a name=&#34;stickers&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://joaotavora.github.io/sly/#Stickers&#34;&gt;Stickers&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/joaotavora/sly/master/doc/animations/stickers-example.gif&#34; alt=&#34;stickers-example&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Install from git&lt;/h2&gt; &#xA;&lt;p&gt;Clone this repository, add this to your &lt;code&gt;~/.emacs&lt;/code&gt; file and fill in the appropriate file names:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(add-to-list &#39;load-path &#34;~/dir/to/cloned/sly&#34;)&#xA;(require &#39;sly-autoloads)&#xA;(setq inferior-lisp-program &#34;/opt/sbcl/bin/sbcl&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you wish to byte-compile SLY yourself (not needed generally) you can do &lt;code&gt;make compile compile-contrib&lt;/code&gt; in the dir where you cloned SLY.&lt;/p&gt; &#xA;&lt;h2&gt;Running the server standalone&lt;/h2&gt; &#xA;&lt;p&gt;This also works&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ sbcl&#xA;...&#xA;* (push #p&#34;~/dir/to/sly&#34; asdf:*central-registry*)&#xA;* (asdf:load-system :slynk)&#xA;* (slynk:create-server :port 4008)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now in Emacs you can do &lt;code&gt;sly-connect&lt;/code&gt; and give it the host and the 4008 port as a destination.&lt;/p&gt; &#xA;&lt;h2&gt;Faster startup&lt;/h2&gt; &#xA;&lt;p&gt;If the Lisp program doesn&#39;t start fast enough for you, look in &lt;a href=&#34;http://joaotavora.github.io/sly/#Loading-Slynk-faster&#34;&gt;the manual&lt;/a&gt;, for ways to make it faster.&lt;/p&gt; &#xA;&lt;h2&gt;Additional Contribs&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/joaotavora/sly-quicklisp&#34;&gt;https://github.com/joaotavora/sly-quicklisp&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/joaotavora/sly-named-readtables&#34;&gt;https://github.com/joaotavora/sly-named-readtables&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/joaotavora/sly-macrostep&#34;&gt;https://github.com/joaotavora/sly-macrostep&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/joaotavora/sly-stepper&#34;&gt;https://github.com/joaotavora/sly-stepper&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mmgeorge/sly-asdf&#34;&gt;https://github.com/mmgeorge/sly-asdf&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/40ants/sly-package-inferred&#34;&gt;https://github.com/40ants/sly-package-inferred&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;completion&#34;&gt;&lt;/a&gt; Completion UIs&lt;/h2&gt; &#xA;&lt;p&gt;SLY works with most Emacs &#34;completion UIs&#34; out of the box, providing completion in source files and inputting Common Lisp symbol names from the minibuffer. &lt;a href=&#34;https://github.com/company-mode/company-mode&#34;&gt;Company&lt;/a&gt;, Emacs 27&#39;s Fido-mode, and Helm are well-supported, as is &#34;vanilla&#34; completion. For consistency, SLY defaults to its own UI, &lt;code&gt;sly-symbol-completion-mode&lt;/code&gt;, useful if you don&#39;t have or like any of those. You can turn it off. Also, if you use Helm and wish to have even more Helm-based fanciness, you can use &lt;a href=&#34;https://github.com/emacs-helm/helm-sly&#34;&gt;helm-sly&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;SLY is free software. All files, unless explicitly stated otherwise, are public domain. ASCII artwork is copyright by Felix Lee, Joan G. Stark and Hayley Jane Wakenshaw.&lt;/p&gt; &#xA;&lt;h2&gt;Fork&lt;/h2&gt; &#xA;&lt;p&gt;SLIME is the work of Eric Marsden, Luke Gorrie, Helmut Eller, Tobias C. Rittweiler and &lt;a href=&#34;http://common-lisp.net/project/slime/doc/html/Credits.html#Credits&#34;&gt;many others&lt;/a&gt;. I forked SLIME because I used it daily, for work, had a long list of hacks developed for myself, and wanted to share them with others.&lt;/p&gt; &#xA;&lt;p&gt;In 2013, SLIME development was stalling, patches and issues rotting. In early 2014, Lu√≠s Oliveira and myself moved SLIME to Github and set up its Travis CI system. I brought in the old bug reports from the Launchpad tracker, fixed long-standing problems and submitted many changes, particularly to the under-curated but popular &#34;contrib&#34; section.&lt;/p&gt; &#xA;&lt;p&gt;Now, the changes that SLY brings to the table are too deep at the Elisp and Lisp level to be accepted to SLIME, given its current focus on stability (for the record, I find this perfectly reasonable). The new features, such as stickers or multiple inspectors, cannot be realized well using only the existing &#34;contrib&#34; system. Finally, SLY frees itself from the shackles of Emacs 23 and supports Emacs 24.3+ only, allowing for much cleaner code and liberal use of lexical binding.&lt;/p&gt; &#xA;&lt;p&gt;The list of technical reasons is bigger than this though, and you can read up on them in the &lt;a href=&#34;https://github.com/joaotavora/sly/raw/master/CONTRIBUTING.md#architecture&#34;&gt;CONTRIBUTING.md&lt;/a&gt; file.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/joaotavora/sly/issues&#34;&gt;Open an issue or a pull request&lt;/a&gt;, but at least have a quick look at the first part &lt;a href=&#34;https://github.com/joaotavora/sly/raw/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; file for instructions on how to contribute.&lt;/p&gt; &#xA;&lt;!-- Local Variables: --&gt; &#xA;&lt;!-- fill-column: 80 --&gt; &#xA;&lt;!-- End: --&gt;</summary>
  </entry>
</feed>