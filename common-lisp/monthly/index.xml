<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Common Lisp Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-01T02:36:36Z</updated>
  <subtitle>Monthly Trending of Common Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>open-goal/jak-project</title>
    <updated>2022-08-01T02:36:36Z</updated>
    <id>tag:github.com,2022-08-01:/open-goal/jak-project</id>
    <link href="https://github.com/open-goal/jak-project" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Reviving the language that brought us the Jak &amp; Daxter Series&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;500&#34; height=&#34;100%&#34; src=&#34;https://raw.githubusercontent.com/open-goal/jak-project/master/docs/img/logo-text-colored-new.png&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://open-goal.github.io/&#34; rel=&#34;nofollow&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Documentation-Here-informational&#34; alt=&#34;Documentation Badge&#34; style=&#34;max-width:100%;&#34;&gt;&lt;/a&gt; &lt;a target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34; href=&#34;https://github.com/open-goal/jak-project/workflows/Build/badge.svg&#34;&gt;&lt;img src=&#34;https://github.com/open-goal/jak-project/workflows/Build/badge.svg?sanitize=true&#34; alt=&#34;Linux and Windows Build&#34; style=&#34;max-width:100%;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.codacy.com/gh/open-goal/jak-project/dashboard?utm_source=github.com&amp;amp;utm_medium=referral&amp;amp;utm_content=open-goal/jak-project&amp;amp;utm_campaign=Badge_Coverage&#34; rel=&#34;nofollow&#34;&gt;&lt;img src=&#34;https://app.codacy.com/project/badge/Coverage/29316d04a1644aa390c33be07289f3f5&#34; alt=&#34;Codacy Badge&#34; style=&#34;max-width:100%;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.codacy.com/gh/open-goal/jak-project/dashboard?utm_source=github.com&amp;amp;utm_medium=referral&amp;amp;utm_content=open-goal/jak-project&amp;amp;utm_campaign=Badge_Grade&#34; rel=&#34;nofollow&#34;&gt;&lt;img src=&#34;https://app.codacy.com/project/badge/Grade/29316d04a1644aa390c33be07289f3f5&#34; alt=&#34;Codacy Badge&#34; style=&#34;max-width:100%;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/VZbXMHXzWv&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/756287461377703987&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://makeapullrequest.com&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=flat-square&#34; alt=&#34;PRs&#34; Welcome&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/open-goal/jak-project/master/#read-first&#34;&gt;READ FIRST&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/open-goal/jak-project/master/#how-to-play-the-game&#34;&gt;How to play the game&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/open-goal/jak-project/master/#project-description&#34;&gt;Project Description&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/open-goal/jak-project/master/#current-status&#34;&gt;Current Status&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/open-goal/jak-project/master/#methodology&#34;&gt;Methodology&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/open-goal/jak-project/master/#setting-up-a-development-environment&#34;&gt;Setting up a Development Environment&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/open-goal/jak-project/master/#linux&#34;&gt;Linux&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/open-goal/jak-project/master/#ubuntu-2004&#34;&gt;Ubuntu (20.04)&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/open-goal/jak-project/master/#arch&#34;&gt;Arch&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/open-goal/jak-project/master/#fedora&#34;&gt;Fedora&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/open-goal/jak-project/master/#windows&#34;&gt;Windows&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/open-goal/jak-project/master/#required-software&#34;&gt;Required Software&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/open-goal/jak-project/master/#using-visual-studio&#34;&gt;Using Visual Studio&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/open-goal/jak-project/master/#building-and-running-the-game&#34;&gt;Building and Running the Game&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/open-goal/jak-project/master/#extract-assets&#34;&gt;Extract Assets&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/open-goal/jak-project/master/#build-the-game&#34;&gt;Build the Game&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/open-goal/jak-project/master/#run-the-game&#34;&gt;Run the Game&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/open-goal/jak-project/master/#connecting-the-repl-to-the-game&#34;&gt;Connecting the REPL to the Game&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/open-goal/jak-project/master/#running-the-game-without-auto-booting&#34;&gt;Running the Game Without Auto-Booting&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/open-goal/jak-project/master/#interacting-with-the-game&#34;&gt;Interacting with the Game&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/open-goal/jak-project/master/#technical-project-overview&#34;&gt;Technical Project Overview&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/open-goal/jak-project/master/#goalc&#34;&gt;&lt;code&gt;goalc&lt;/code&gt;&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/open-goal/jak-project/master/#running-the-compiler&#34;&gt;Running the compiler&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/open-goal/jak-project/master/#decompiler&#34;&gt;&lt;code&gt;decompiler&lt;/code&gt;&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/open-goal/jak-project/master/#running-the-decompiler&#34;&gt;Running the decompiler&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/open-goal/jak-project/master/#goal_src&#34;&gt;&lt;code&gt;goal_src/&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/open-goal/jak-project/master/#game-runtime&#34;&gt;&lt;code&gt;game&lt;/code&gt; runtime&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;READ FIRST&lt;/h2&gt; &#xA;&lt;p&gt;The github repositories are for development of the project and tracking active issues. Most of the information you will find here pertains to setting up the project for development purposes and is not relevant to a general user.&lt;/p&gt; &#xA;&lt;p&gt;There is a discord server where discussion occur &lt;a href=&#34;https://discord.gg/VZbXMHXzWv&#34;&gt;https://discord.gg/VZbXMHXzWv&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Additionally you can find further information and answers to &lt;strong&gt;frequently asked questions&lt;/strong&gt; on the project&#39;s main website &lt;a href=&#34;https://open-goal.github.io/&#34;&gt;https://open-goal.github.io/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;How to play the game&lt;/h3&gt; &#xA;&lt;p&gt;To just play the game, follow the steps in this video &lt;a href=&#34;https://www.youtube.com/watch?v=yQBKCnS5MDY&#34;&gt;https://www.youtube.com/watch?v=yQBKCnS5MDY&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;We don&#39;t save any assets from the game - you must use your own legitimately obtained copy of the game.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note that this installation method is a temporary stop gap while we work on something more user-friendly.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Project Description&lt;/h2&gt; &#xA;&lt;p&gt;This project is to port Jak 1 (NTSC, &#34;black label&#34; version) to PC. Over 98% of this game is written in GOAL, a custom Lisp language developed by Naughty Dog. Our strategy is:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;decompile the original game code into human-readable GOAL code&lt;/li&gt; &#xA; &lt;li&gt;develop our own compiler for GOAL and recompile game code for x86-64&lt;/li&gt; &#xA; &lt;li&gt;create a tool to extract game assets into formats that can be easily viewed or modified&lt;/li&gt; &#xA; &lt;li&gt;create tools to repack game assets into a format that our port uses.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Our objectives are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;make the port a &#34;native application&#34; on x86-64, with high performance. It shouldn&#39;t be emulated, interpreted, or transpiled.&lt;/li&gt; &#xA; &lt;li&gt;Our GOAL compiler&#39;s performance should be around the same as unoptimized C.&lt;/li&gt; &#xA; &lt;li&gt;try to match things from the original game and development as possible. For example, the original GOAL compiler supported live modification of code while the game is running, so we do the same, even though it&#39;s not required for just porting the game.&lt;/li&gt; &#xA; &lt;li&gt;support modifications. It should be possible to make edits to the code without everything else breaking.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;We support both Linux and Windows on x86-64.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;We do not support, or plan to support the ARM architecture. This means that this will not run on devices such as an M1 Mac or a mobile device.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Current Status&lt;/h3&gt; &#xA;&lt;p&gt;Jak 1 is largely playable from start to finish with a handful of bugs that are continually being ironed out.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/open-goal/jak-project/master/docs/img/promosmall1.png&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/open-goal/jak-project/master/docs/img/promosmall2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;YouTube playlist: &lt;a href=&#34;https://www.youtube.com/playlist?list=PLWx9T30aAT50cLnCTY1SAbt2TtWQzKfXX&#34;&gt;https://www.youtube.com/playlist?list=PLWx9T30aAT50cLnCTY1SAbt2TtWQzKfXX&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Methodology&lt;/h3&gt; &#xA;&lt;p&gt;To help with decompiling, we&#39;ve built a decompiler that can process GOAL code and unpack game assets. We manually specify function types and locations where we believe the original code had type casts (or where they feel appropriate) until the decompiler succeeds, then we clean up the output of the decompiled code by adding comments and adjusting formatting, then save it in &lt;code&gt;goal_src&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Our decompiler is designed specifically for processing the output of the original GOAL compiler. As a result, when given correct casts, it often produces code that can be directly fed into a compiler and works perfectly. This is continually tested as part of our unit tests.&lt;/p&gt; &#xA;&lt;h2&gt;Setting up a Development Environment&lt;/h2&gt; &#xA;&lt;p&gt;The remainder of this README is catered towards people interested in building the project from source, typically with the intention on contributing as a developer.&lt;/p&gt; &#xA;&lt;p&gt;If this does not sound like you and you just want to play the game, refer to the above section &lt;a href=&#34;https://raw.githubusercontent.com/open-goal/jak-project/master/#how-to-play-the-game&#34;&gt;How to play the game&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Linux&lt;/h3&gt; &#xA;&lt;h4&gt;Ubuntu (20.04)&lt;/h4&gt; &#xA;&lt;p&gt;Install packages and init repository:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo apt install gcc make cmake build-essential g++ nasm clang-format libxrandr-dev libxinerama-dev libxcursor-dev libpulse-dev libxi-dev python&#xA;sudo sh -c &#34;$(curl --location https://taskfile.dev/install.sh)&#34; -- -d -b /usr/local/bin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Compile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cmake -B build &amp;amp;&amp;amp; cmake --build build -j 8&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run tests:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./test.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: we have found that &lt;code&gt;clang&lt;/code&gt; and &lt;code&gt;lld&lt;/code&gt; are significantly faster to compile and link than &lt;code&gt;gcc&lt;/code&gt;, generate faster code, and have better warning messages. To install these:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo apt install lld clang&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and run &lt;code&gt;cmake&lt;/code&gt; (in a fresh build directory) with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cmake -DCMAKE_SHARED_LINKER_FLAGS=&#34;-fuse-ld=lld&#34; -DCMAKE_EXE_LINKER_FLAGS=&#34;-fuse-ld=lld&#34; -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ ..&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Arch&lt;/h4&gt; &#xA;&lt;p&gt;Install packages and init repository:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo pacman -S cmake libpulse base-devel nasm python&#xA;yay -S go-task&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For Arch only, replace &lt;code&gt;task&lt;/code&gt; with &lt;code&gt;go-task&lt;/code&gt; in the rest of the instructions.&lt;/p&gt; &#xA;&lt;p&gt;Compile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cmake -B build &amp;amp;&amp;amp; cmake --build build -j 8&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run tests:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./test.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Fedora&lt;/h4&gt; &#xA;&lt;p&gt;Install packages and init repository:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo dnf install cmake lld clang nasm libX11-devel libXrandr-devel libXinerama-devel libXcursor-devel libXi-devel pulseaudio-libs-devel&#xA;sudo sh -c &#34;$(curl --location https://taskfile.dev/install.sh)&#34; -- -d -b /usr/local/bin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Compile with &lt;code&gt;clang&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cmake -DCMAKE_SHARED_LINKER_FLAGS=&#34;-fuse-ld=lld&#34; -DCMAKE_EXE_LINKER_FLAGS=&#34;-fuse-ld=lld&#34; -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ -B build&#xA;cmake --build build -j$(nproc)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run tests:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./test.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Windows&lt;/h3&gt; &#xA;&lt;h4&gt;Required Software&lt;/h4&gt; &#xA;&lt;p&gt;We primarily use Visual Studio on Windows for C++ development. Download the latest community edition from &lt;a href=&#34;https://visualstudio.microsoft.com/vs/&#34;&gt;here&lt;/a&gt;. At the time of writing this is Visual Studio 2022.&lt;/p&gt; &#xA;&lt;p&gt;You will require the &lt;code&gt;Desktop development with C++&lt;/code&gt; workload. This can be selected during the installation, or after via the &lt;code&gt;Visual Studio Installer&lt;/code&gt;, modifying the Visual Studio Installation.&lt;/p&gt; &#xA;&lt;p&gt;On Windows, it&#39;s recommended to use a package manager, we use Scoop. Follow the steps on the bottom of the homepage &lt;a href=&#34;https://scoop.sh/&#34;&gt;here&lt;/a&gt; to get it.&lt;/p&gt; &#xA;&lt;p&gt;Once Scoop is installed, run the following commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;scoop install git llvm nasm python task&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Using Visual Studio&lt;/h4&gt; &#xA;&lt;p&gt;Clone the repository by running the following command in your folder of choice.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone https://github.com/open-goal/jak-project.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will create a &lt;code&gt;jak-project&lt;/code&gt; folder, open the project as a CMake project via Visual Studio.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/open-goal/jak-project/master/docs/img/windows/open-project.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Then build the entire project as &lt;code&gt;Windows Release (clang)&lt;/code&gt;. You can also press Ctrl+Shift+B as a hotkey for Build All. We currently prefer &lt;code&gt;clang&lt;/code&gt; on Windows as opposed to &lt;code&gt;msvc&lt;/code&gt;, though it should work as well!&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/open-goal/jak-project/master/docs/img/windows/release-build.png&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/open-goal/jak-project/master/docs/img/windows/build-all.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Building and Running the Game&lt;/h3&gt; &#xA;&lt;p&gt;Getting a running game involves 4 steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Build C++ tools (follow Getting Started steps above for your platform)&lt;/li&gt; &#xA; &lt;li&gt;Extract assets from the game&lt;/li&gt; &#xA; &lt;li&gt;Build the game&lt;/li&gt; &#xA; &lt;li&gt;Run the game&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Extract Assets&lt;/h4&gt; &#xA;&lt;p&gt;First, setup your settings so the following scripts know which game you are using, and which version. In a terminal, run the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;task set-game-jak1&#xA;task set-decomp-ntscv1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Run &lt;code&gt;task --list&lt;/code&gt; to see the other available options&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;At the time of writing, only Jak 1 is expected to work end-to-end!&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;The first step is to extract your ISO file contents into the &lt;code&gt;iso_data/&amp;lt;game-name&amp;gt;&lt;/code&gt; folder. In the case of Jak 1 this is &lt;code&gt;iso_data/jak1&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Once this is done, open a terminal in the &lt;code&gt;jak-project&lt;/code&gt; folder and run the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;task extract&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Build the Game&lt;/h4&gt; &#xA;&lt;p&gt;The next step is to build the game itself. To do so, in the same terminal run the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;task repl&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You will be greeted with a prompt like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt; _____             _____ _____ _____ __&#xA;|     |___ ___ ___|   __|     |  _  |  |&#xA;|  |  | . | -_|   |  |  |  |  |     |  |__&#xA;|_____|  _|___|_|_|_____|_____|__|__|_____|&#xA;      |_|&#xA;Welcome to OpenGOAL 0.8!&#xA;Run (repl-help) for help with common commands and REPL usage.&#xA;Run (lt) to connect to the local target.&#xA;&#xA;g &amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run the following to build the game:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;g &amp;gt; (mi)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Run the Game&lt;/h4&gt; &#xA;&lt;p&gt;Finally the game can be ran. Open a second terminal from the &lt;code&gt;jak-project&lt;/code&gt; directory and run the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;task boot-game&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The game should boot automatically if everything was done correctly.&lt;/p&gt; &#xA;&lt;h5&gt;Connecting the REPL to the Game&lt;/h5&gt; &#xA;&lt;p&gt;Connecting the REPL to the game allows you to inspect and modify code or data while the game is running.&lt;/p&gt; &#xA;&lt;p&gt;To do so, in the REPL after a successful &lt;code&gt;(mi)&lt;/code&gt;, run the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;g &amp;gt; (lt)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If successful, your prompt should change to:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;gc&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For example, running the following will print out some basic information about Jak:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;gc&amp;gt; *target*&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Running the Game Without Auto-Booting&lt;/h5&gt; &#xA;&lt;p&gt;You can also start up the game without booting. To do so run the following in one terminal&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;task run-game&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And then in your REPL run the following (after a successful &lt;code&gt;(mi)&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;g &amp;gt; (lt)&#xA;[Listener] Socket connected established! (took 0 tries). Waiting for version...&#xA;Got version 0.8 OK!&#xA;[Debugger] Context: valid = true, s7 = 0x147d24, base = 0x2123000000, tid = 2438049&#xA;&#xA;gc&amp;gt; (lg)&#xA;10836466        #xa559f2              0.0000        (&#34;game&#34; &#34;kernel&#34;)&#xA;&#xA;gc&amp;gt; (test-play)&#xA;(play :use-vis #t :init-game #f) has been called!&#xA;0        #x0              0.0000        0&#xA;&#xA;gc&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Interacting with the Game&lt;/h4&gt; &#xA;&lt;p&gt;In the graphics window, you can use the period key to bring up the debug menu. Controllers also work, using the same mapping as the original game.&lt;/p&gt; &#xA;&lt;p&gt;Check out the &lt;code&gt;pc_debug&lt;/code&gt;, &lt;code&gt;examples&lt;/code&gt; and &lt;code&gt;pc&lt;/code&gt; folders under &lt;code&gt;goal_src&lt;/code&gt; for some examples of GOAL code we wrote. The debug files that are not loaded automatically by the engine have instructions for how to run them.&lt;/p&gt; &#xA;&lt;h2&gt;Technical Project Overview&lt;/h2&gt; &#xA;&lt;p&gt;There are four main components to the project.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;goalc&lt;/code&gt; - the GOAL compiler for x86-64&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;decompiler&lt;/code&gt; - our decompiler&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;goal_src/&lt;/code&gt; - the folder containing all OpenGOAL / GOOS code&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;game&lt;/code&gt; - aka the runtime written in C++&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Let&#39;s break down each component.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;goalc&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Our implementation of GOAL is called OpenGOAL.&lt;/p&gt; &#xA;&lt;p&gt;All of the compiler source code is in &lt;code&gt;goalc/&lt;/code&gt;. The compiler is controlled through a prompt which can be used to enter commands to compile, connect to a running GOAL program for interaction, run the OpenGOAL debugger, or, if you are connected to a running GOAL program, can be used as a REPL to run code interactively. In addition to compiling code files, the compiler has features to pack and build data files.&lt;/p&gt; &#xA;&lt;h4&gt;Running the compiler&lt;/h4&gt; &#xA;&lt;p&gt;&lt;strong&gt;Environment Agnostic&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you have installed &lt;code&gt;task&lt;/code&gt; as recommended above, you can run the compiler with &lt;code&gt;task repl&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Linux&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;To run the compiler on Linux, there is a script &lt;code&gt;scripts/shell/gc.sh&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Windows&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;On Windows, there is a &lt;code&gt;scripts/batch/gc.bat&lt;/code&gt; scripts and a &lt;code&gt;scripts/batch/gc-no-lt.bat&lt;/code&gt; script, the latter of which will not attempt to automatically attach to a running target.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;decompiler&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;The second component to the project is the decompiler.&lt;/p&gt; &#xA;&lt;p&gt;The decompiler will output code and other data intended to be inspected by humans in the &lt;code&gt;decompiler_out&lt;/code&gt; folder. Files in this folder will not be used by the compiler.&lt;/p&gt; &#xA;&lt;h4&gt;Running the decompiler&lt;/h4&gt; &#xA;&lt;p&gt;You must have a copy of the PS2 game and place all files from the DVD inside a folder corresponding to the game within &lt;code&gt;iso_data&lt;/code&gt; folder (&lt;code&gt;jak1&lt;/code&gt; for Jak 1 Black Label, etc.), as seen in this picture:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/open-goal/jak-project/master/docs/img/iso_data-help.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The decompiler will extract assets to the &lt;code&gt;assets&lt;/code&gt; folder. These assets will be used by the compiler when building the port, and you may want to turn asset extraction off after running it once.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Environment Agnostic&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you have installed &lt;code&gt;task&lt;/code&gt; as recommended above, you can run the compiler with &lt;code&gt;task decomp&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Linux&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;To run, you can use &lt;code&gt;scripts/shell/decomp.sh&lt;/code&gt; to run the decompiler&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Windows&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;To run, you can use &lt;code&gt;scripts/shell/decomp-jak1.bat&lt;/code&gt; to run the decompiler&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;goal_src/&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;The game source code, written in OpenGOAL, is located in &lt;code&gt;goal_src&lt;/code&gt;. All GOAL and GOOS code should be in this folder.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;game&lt;/code&gt; runtime&lt;/h3&gt; &#xA;&lt;p&gt;The final component is the &#34;runtime&#34;, located in &lt;code&gt;game&lt;/code&gt;. This is the part of the game that&#39;s written in C++.&lt;/p&gt; &#xA;&lt;p&gt;In the port, that includes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The &#34;C Kernel&#34;, which contains the GOAL linker and some low-level GOAL language features. GOAL has a completely custom dynamically linked object file format so in order to load the first GOAL code, you need a linker written in C++. Some low-level functions for memory allocation, communicating with the I/O Processor, symbol table, strings, and the type system are also implemented in C, as these are required for the linker. It also listens for incoming messages from the compiler and passes them to the running game. This also initializes the game, by initializing the PS2 hardware, allocating the GOAL heaps, loading the GOAL kernel off of the DVD, and executing the kernel dispatcher function. This is in the &lt;code&gt;game/kernel&lt;/code&gt; folder. This should be as close as possible to the game, and all differences should be noted with a comment.&lt;/li&gt; &#xA; &lt;li&gt;Implementation of Sony&#39;s standard library. GOAL code can call C library functions, and Naughty Dog used some Sony library functions to access files, memory cards, controllers, and communicate with the separate I/O Processor. The library functions are in &lt;code&gt;game/sce&lt;/code&gt;. Implementations of library features specific to the PC port are located in &lt;code&gt;game/system&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;The I/O Processor driver, OVERLORD. The PS2 had a separate CPU called the I/O Processor (IOP) that was directly connected to the DVD drive hardware and the sound hardware. Naughty Dog created a custom driver for the IOP that handled streaming data off of the DVD. It is much more complicated than I first expected. It&#39;s located in &lt;code&gt;game/overlord&lt;/code&gt;. Like the C kernel, we try to keep this as close as possible to the actual game.&lt;/li&gt; &#xA; &lt;li&gt;Sound code. Naughty Dog used a third party library for sound called &lt;code&gt;989SND&lt;/code&gt;. Code for the library and an interface for it is located in &lt;code&gt;game/sound&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;PC specific graphics code. We have a functional OpenGL renderer and context that can create a game window and display graphics on it. The specific renderers used by the game however are mostly implemented. Aside from post-processing effects, everything in the game is rendered. This is located in &lt;code&gt;game/graphics&lt;/code&gt;. While many liberties will be taken to make this work, the end result should very closely match the actual game.&lt;/li&gt; &#xA; &lt;li&gt;Extra assets used by the port in some fashion, located in &lt;code&gt;game/assets&lt;/code&gt;. These include extra text files, icons, etc.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>rabbibotton/clog</title>
    <updated>2022-08-01T02:36:36Z</updated>
    <id>tag:github.com,2022-08-01:/rabbibotton/clog</id>
    <link href="https://github.com/rabbibotton/clog" rel="alternate"></link>
    <summary type="html">&lt;p&gt;CLOG - The Common Lisp Omnificent GUI&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;CLOG - The Common Lisp Omnificent GUI&lt;/h1&gt; &#xA;&lt;h2&gt;David Botton &lt;a href=&#34;mailto:david@botton.com&#34;&gt;david@botton.com&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;h3&gt;License BSD 3-Clause License&lt;/h3&gt; &#xA;&lt;p&gt;View the HTML Documentation:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://rabbibotton.github.io/clog/clog-manual.html&#34;&gt;https://rabbibotton.github.io/clog/clog-manual.html&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;View a short video on reddit about CLOG Builder&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.reddit.com/r/lisp/comments/sd9wf1/clog_builder_cl_web_3_awesome_lang_awesome_tool/&#34;&gt;https://www.reddit.com/r/lisp/comments/sd9wf1/clog_builder_cl_web_3_awesome_lang_awesome_tool/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rabbibotton/clog/main/LEARN.md&#34;&gt;LEARN COMMON-LISP AND CLOG - LEARN.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://rabbibotton.github.io/images/clog.png&#34; alt=&#34;Image of CLOG&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The Common Lisp Omnificent GUI, CLOG for short, uses web technology to produce graphical user interfaces for applications locally or remotely. CLOG can take the place, or work alongside, most cross-platform GUI frameworks and website frameworks. The CLOG package starts up the connectivity to the browser or other websocket client (often a browser embedded in a native template application.)&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rabbibotton/clog/main/CONCEPT.md&#34;&gt;CLOG - Technical Overview and Purpose&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;STATUS: CLOG 1.5 and CLOG Builder 1.5 released.&lt;/p&gt; &#xA;&lt;p&gt;CLOG is actually based on GNOGA, a framework I wrote for Ada in 2013 and used in commercial production code for the last 9+ years. CLOG itself is already used in commerical products, corporate websites, and other opensource projects.&lt;/p&gt; &#xA;&lt;p&gt;CLOG is being actively extended with tools and custom controls daily but the core API is stable and proven. Check the github discussion boards for the latest.&lt;/p&gt; &#xA;&lt;p&gt;Some potential applications for CLOG:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Cross-platform GUIs and Reports&lt;/li&gt; &#xA; &lt;li&gt;Secure websites and complex interactive web applications&lt;/li&gt; &#xA; &lt;li&gt;Mobile software (CLOG Runs native on Android and iOS)&lt;/li&gt; &#xA; &lt;li&gt;Massive multiplayer online games&lt;/li&gt; &#xA; &lt;li&gt;Monitoring software for embedded systems&lt;/li&gt; &#xA; &lt;li&gt;A fun way to teach programming and advanced multi-tasking parallel programming techniques. (CLOG is a parallel GUI)&lt;/li&gt; &#xA; &lt;li&gt;And the list goes on&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The key to CLOG is the relationship it forms with a Browser window or Browser control compiled to native code. CLOG uses websockets for communications and the browser to render a GUI that maintains an active soft realtime connection. For most CLOG applications all programming logic, events and decisions are done on the server which can be local, or remote over the web.&lt;/p&gt; &#xA;&lt;p&gt;CLOG is developed with ECL and SBCL, it is tested fairly regulary on Linux, Windows, Rasberry Pi (running Ubuntu), M1 and Intel Mac. It should in theory work out of the box on any system with Quicklisp (although you could hand install) and CLACK (easily switched out and the ecl Android/iPhone branch for example doesn&#39;t use).&lt;/p&gt; &#xA;&lt;p&gt;CLOG is in QuickLisp (ql:quickload :clog), however I recommend installing Ultralisp into your QuickLisp as you likely want the most up to date version or you can also clone the github repo into ~/common-lisp directory [or other quicklisp/asdf findable directory (push #P&#34;path/to/dir/of/projects&#34; ql:&lt;em&gt;local-project-directories&lt;/em&gt;) ]:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;For git (you need the ace editor plug in for the builder too from git):&#xA;&#xA;cd ~/common-lisp&#xA;git clone https://github.com/rabbibotton/clog.git&#xA;git clone https://github.com/rabbibotton/clog-ace.git&#xA;git clone https://github.com/rabbibotton/clog-terminal.git&#xA;&#xA;&#xA;To add UltraLisp to QuickLisp (_RECOMMENDED_):&#xA;&#xA;To add UtraLisp to quicklisp install:&#xA;(ql-dist:install-dist &#34;http://dist.ultralisp.org/&#34;&#xA;                      :prompt nil)&#xA;&#xA;To update to latest packages do _often_ to get the latest:&#xA;(ql:update-all-dists)&#xA;&#xA;Then as always:&#xA;(ql:quickload :clog)&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To load this package and work through tutorials (assuming you have Quicklisp configured.)&lt;/p&gt; &#xA;&lt;p&gt;Note: If using portacle for Windows you will need to update Quicklisp use (ql:update-dist &#34;quicklisp&#34;) You will also likely need to copy the sqlite3 dll from &lt;a href=&#34;https://www.sqlite.org/download.html&#34;&gt;https://www.sqlite.org/download.html&lt;/a&gt; to portacle\win\lib Consider a custom &lt;a href=&#34;https://raw.githubusercontent.com/rabbibotton/clog/main/WINDOWS.md&#34;&gt;install on windows&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Start emacs then M-x slime&lt;/li&gt; &#xA; &lt;li&gt;In the REPL, run:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;CL-USER&amp;gt; (ql:quickload :clog)&#xA;CL-USER&amp;gt; (clog:run-tutorial 1)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Tip for Windows WSL linux user. Install &#34;sudo apt install xdg-utils&#34; to install xdg-open so that run-tutorial uses the windows browser.&lt;/p&gt; &#xA;&lt;p&gt;To see where the source, tutorial and demo files are:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;CL-USER&amp;gt; (clog:clog-install-dir)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can the run the demos with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;CL-USER&amp;gt; (ql:quickload :clog)&#xA;CL-USER&amp;gt; (clog:run-demo 1)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The clog-new-app tool can be run with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;CL-USER&amp;gt; (ql:quickload :clog/tools)&#xA;CL-USER&amp;gt; (clog-tools:clog-new-app)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The clog-db-admin tool can be run with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;CL-USER&amp;gt; (ql:quickload :clog/tools)&#xA;CL-USER&amp;gt; (clog-tools:clog-db-admin)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The CLOG Builder tool can be run with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;CL-USER&amp;gt; (ql:quickload :clog/tools)&#xA;CL-USER&amp;gt; (clog-tools:clog-builder)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also open a &#34;clog-repl&#34; window in your browser to play from the common-lisp repl:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;CL-USER&amp;gt; (in-package clog-user)&#xA;CLOG-USER&amp;gt; (clog-repl)&#xA;CLOG-USER&amp;gt; (setf (background-color *body*) &#34;beige&#34;)&#xA;CLOG-USER&amp;gt; (create-div *body* :content &#34;Hello World!&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The clog-repl URL is &lt;a href=&#34;http://127.0.0.1:8080/repl&#34;&gt;http://127.0.0.1:8080/repl&lt;/a&gt; &lt;em&gt;body&lt;/em&gt; will always refer to the last access of that URL.&lt;/p&gt; &#xA;&lt;p&gt;To open a browser with the CLOG manual:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;CL-USER&amp;gt; (clog:open-manual)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Work your way through the tutorials. You will see how quick and easy it is to be a CLOGer.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://rabbibotton.github.io/images/clog-builder.png&#34; alt=&#34;Image of clog-builder&#34;&gt; &lt;img src=&#34;https://rabbibotton.github.io/images/cb-web.png&#34; alt=&#34;Image of clog-builder-web&#34;&gt; &lt;img src=&#34;https://rabbibotton.github.io/images/clog-demo1.png&#34; alt=&#34;Image of demo1&#34;&gt; &lt;img src=&#34;https://rabbibotton.github.io/images/clog-demo2.png&#34; alt=&#34;Image of demo2&#34;&gt; &lt;img src=&#34;https://rabbibotton.github.io/images/clog-demo3.png&#34; alt=&#34;Image of demo3&#34;&gt; &lt;img src=&#34;https://rabbibotton.github.io/images/clog-db-admin.png&#34; alt=&#34;Image of clog-db-admin&#34;&gt; &lt;img src=&#34;https://rabbibotton.github.io/images/clog-web-containers.png&#34; alt=&#34;Image of clog-web-containers&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Here is a sample CLOG app:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(defpackage #:clog-user               ; Setup a package for our work to exist in&#xA;  (:use #:cl #:clog)                  ; Use the Common Lisp language and CLOG&#xA;  (:export start-tutorial))           ; Export as public the start-tutorial function&#xA;&#xA;(in-package :clog-user)               ; Tell the &#34;reader&#34; we are in the clog-user package&#xA;&#xA;&#xA;;; Define our CLOG application&#xA;(defun on-new-window (body)           ; Define the function called on-new-window&#xA;  &#34;On-new-window handler.&#34;            ; Optional docstring to describe function&#xA;&#xA;  (let ((hello-element                ; hello-element is a local variable that&#xA;                                      ; will be bound to our new CLOG-Element&#xA;&#xA;      ;; This application simply creates a CLOG-Element as a child to the&#xA;      ;; CLOG-body object in the browser window.&#xA;&#xA;      ;; A CLOG-Element represents a block of HTML (we will later see ways to&#xA;      ;; directly create buttons and all sorts of HTML elements in more&#xA;      ;; lisp-like ways with no knowledge of HTML or JavaScript.&#xA;      (create-child body &#34;&amp;lt;h1&amp;gt;Hello World! (click me!)&amp;lt;/h1&amp;gt;&#34;)))&#xA;&#xA;    (set-on-click hello-element      ; Now we set a function to handle clicks&#xA;          (lambda (obj)              ; In this case we use an anonymous function&#xA;            (setf (color hello-element) &#34;green&#34;))))))&#xA;&#xA;;; To see all the events one can set and the many properties and styles that&#xA;;; exist, refer to the CLOG manual or the file clog-element.lisp&#xA;&#xA;&#xA;(defun start-tutorial ()   ; Define the function called start-tutorial&#xA;  &#34;Start tutorial.&#34;        ; Optional docstring to describe function&#xA;&#xA;  ;; Initialize the CLOG system&#xA;  (initialize #&#39;on-new-window)&#xA;  ;; Set the function on-new-window to execute&#xA;  ;; every time a browser connection to our app.&#xA;  ;; #&#39; tells Common Lisp to pass the function&#xA;  ;; to intialize and not to execute it.&#xA;&#xA;&#xA;  ;; Open a browser to http://12.0.0.1:8080 - the default for CLOG apps&#xA;  (open-browser))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Other samples of CLOG on the web:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/byulparan/clog-collider-experience&#34;&gt;CLOG + cl-collider&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.reddit.com/r/lisp/comments/tl46of/would_it_be_cool_to_run_a_clog_app_on_mobile_you/&#34;&gt;CLOG on iOS and Android&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gist.github.com/mmontone/3a5a8a57675750e99ffb7fa64f40bc39#file-clog-learn-lisp&#34;&gt;Learn CLOG Dashboard&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Websites/apps made with CLOG&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;clogpower.com&lt;/li&gt; &#xA; &lt;li&gt;ackfock.com&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;CLOG Builder Tutorials&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Chat App &lt;a href=&#34;https://www.reddit.com/r/lisp/comments/sj1tv5/clog_builder_tutorial_1_a_chat_app_from_start_to/&#34;&gt;https://www.reddit.com/r/lisp/comments/sj1tv5/clog_builder_tutorial_1_a_chat_app_from_start_to/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Building a Web Page &lt;a href=&#34;https://www.reddit.com/r/lisp/comments/sn8j77/clog_builder_tutorial_2_building_a_web_page/&#34;&gt;https://www.reddit.com/r/lisp/comments/sn8j77/clog_builder_tutorial_2_building_a_web_page/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Importing HTML in to Builder, Adding Pages and Hand Coding &lt;a href=&#34;https://www.reddit.com/r/lisp/comments/snvv0w/clog_builder_tutorial_3_importing_html_adding/&#34;&gt;https://www.reddit.com/r/lisp/comments/snvv0w/clog_builder_tutorial_3_importing_html_adding/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;CLOS-CONTACT - Using database controls demos a contact manager app in clog. &lt;a href=&#34;https://www.reddit.com/r/lisp/comments/t61sib/clog_builder_tutorial_4_a_complete_database_app/&#34;&gt;https://www.reddit.com/r/lisp/comments/t61sib/clog_builder_tutorial_4_a_complete_database_app/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Using and Creating Custom Controls &lt;a href=&#34;https://www.reddit.com/r/lisp/comments/w2d6dr/builder_tutorial_5_using_and_creating_lisp_custom/&#34;&gt;https://www.reddit.com/r/lisp/comments/w2d6dr/builder_tutorial_5_using_and_creating_lisp_custom/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;CLOG Tutorials&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rabbibotton/clog/main/tutorial/01-tutorial.lisp&#34;&gt;01-tutorial.lisp&lt;/a&gt; - Hello World&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rabbibotton/clog/main/tutorial/02-tutorial.lisp&#34;&gt;02-tutorial.lisp&lt;/a&gt; - Closures in CLOG&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rabbibotton/clog/main/tutorial/03-tutorial.lisp&#34;&gt;03-tutorial.lisp&lt;/a&gt; - Events fire in parallel&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rabbibotton/clog/main/tutorial/04-tutorial.lisp&#34;&gt;04-tutorial.lisp&lt;/a&gt; - The event target, reusing event handlers&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rabbibotton/clog/main/tutorial/05-tutorial.lisp&#34;&gt;05-tutorial.lisp&lt;/a&gt; - Using connection-data-item&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rabbibotton/clog/main/tutorial/06-tutorial.lisp&#34;&gt;06-tutorial.lisp&lt;/a&gt; - Tasking and events&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rabbibotton/clog/main/tutorial/07-tutorial.lisp&#34;&gt;07-tutorial.lisp&lt;/a&gt; - My first CLOG video game (and handling disconnects)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rabbibotton/clog/main/tutorial/08-tutorial.lisp&#34;&gt;08-tutorial.lisp&lt;/a&gt; - Mice Love Containers&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rabbibotton/clog/main/tutorial/09-tutorial.lisp&#34;&gt;09-tutorial.lisp&lt;/a&gt; - Tabs, panels, and forms&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rabbibotton/clog/main/tutorial/10-tutorial.lisp&#34;&gt;10-tutorial.lisp&lt;/a&gt; - Canvas&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rabbibotton/clog/main/tutorial/11-tutorial.lisp&#34;&gt;11-tutorial.lisp&lt;/a&gt; - Attaching to existing HTML&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rabbibotton/clog/main/tutorial/12-tutorial.lisp&#34;&gt;12-tutorial.lisp&lt;/a&gt; - Running a website in CLOG (routing)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rabbibotton/clog/main/tutorial/13-tutorial&#34;&gt;13-tutorial/&lt;/a&gt; - Flying Solo - A minimalist CLOG project&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rabbibotton/clog/main/tutorial/14-tutorial.lisp&#34;&gt;14-tutorial.lisp&lt;/a&gt; - Local (persistent) and Session client-side storage&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rabbibotton/clog/main/tutorial/15-tutorial.lisp&#34;&gt;15-tutorial.lisp&lt;/a&gt; - Multi-media&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rabbibotton/clog/main/tutorial/16-tutorial.lisp&#34;&gt;16-tutorial.lisp&lt;/a&gt; - Bootstrap 4, Loading css files and javascript&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rabbibotton/clog/main/tutorial/17-tutorial.lisp&#34;&gt;17-tutorial.lisp&lt;/a&gt; - W3.CSS layout example and Form submit methods&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rabbibotton/clog/main/tutorial/18-tutorial.lisp&#34;&gt;18-tutorial.lisp&lt;/a&gt; - Drag and Drop&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rabbibotton/clog/main/tutorial/19-tutorial.lisp&#34;&gt;19-tutorial.lisp&lt;/a&gt; - Using JavaScript components&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rabbibotton/clog/main/tutorial/20-tutorial.lisp&#34;&gt;20-tutorial.lisp&lt;/a&gt; - New CLOG plugin from JavaScript component&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rabbibotton/clog/main/tutorial/21-tutorial.lisp&#34;&gt;21-tutorial.lisp&lt;/a&gt; - New CLOG plugin in Common-Lisp&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rabbibotton/clog/main/tutorial/22-tutorial.lisp&#34;&gt;22-tutorial.lisp&lt;/a&gt; - CLOG GUI Menus and Desktop Look and Feel&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rabbibotton/clog/main/tutorial/23-tutorial.lisp&#34;&gt;23-tutorial.lisp&lt;/a&gt; - Using semaphores to wait for input&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rabbibotton/clog/main/tutorial/24-tutorial.lisp&#34;&gt;24-tutorial.lisp&lt;/a&gt; - CLOG WEB containers&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rabbibotton/clog/main/tutorial/25-tutorial.lisp&#34;&gt;25-tutorial.lisp&lt;/a&gt; - A &#34;local&#34; web app using CLOG WEB&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rabbibotton/clog/main/tutorial/26-tutorial.lisp&#34;&gt;26-tutorial.lisp&lt;/a&gt; - A web page and form with CLOG WEB&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rabbibotton/clog/main/tutorial/27-tutorial.lisp&#34;&gt;27-tutorial.lisp&lt;/a&gt; - Panel Box Layouts&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rabbibotton/clog/main/tutorial/28-tutorial&#34;&gt;28-tutorial/&lt;/a&gt; - CLOG Builder Hello - A minimalist CLOG Builder project&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rabbibotton/clog/main/tutorial/29-tutorial.lisp&#34;&gt;29-tutorial.lisp&lt;/a&gt; - Presentations (and jQuery) - linking lisp objects to clog objects&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rabbibotton/clog/main/tutorial/30-tutorial.lisp&#34;&gt;30-tutorial.lisp&lt;/a&gt; - Instant websites - clog-web-site&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rabbibotton/clog/main/tutorial/31-tutorial.lisp&#34;&gt;31-tutorial.lisp&lt;/a&gt; - Database and Authority based websites - clog-web-dbi and clog-auth&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rabbibotton/clog/main/tutorial/32-tutorial.lisp&#34;&gt;32-tutorial.lisp&lt;/a&gt; - Database Managed Content websites - clog-web-content&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rabbibotton/clog/main/tutorial/33-tutorial.lisp&#34;&gt;33-tutorial.lisp&lt;/a&gt; - with-clog-create - Using a declarative syntax for GUIs&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;CLOG Demos&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rabbibotton/clog/main/demos/01-demo.lisp&#34;&gt;01-demo.lisp&lt;/a&gt; - Sparkey the Snake Game&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rabbibotton/clog/main/demos/02-demo.lisp&#34;&gt;02-demo.lisp&lt;/a&gt; - Chat - Private instant messenger&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rabbibotton/clog/main/demos/03-demo.lisp&#34;&gt;03-demo.lisp&lt;/a&gt; - IDE - A very simple common lisp IDE&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rabbibotton/clog/main/demos/04-demo.lisp&#34;&gt;04-demo.lisp&lt;/a&gt; - CMS Website - A very simple database driven website&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Tool Summary&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;clog-builder - Rapid visual interactive development for Web and GUIs&lt;/li&gt; &#xA; &lt;li&gt;clog-db-admin - SQLite3 admin tool&lt;/li&gt; &#xA; &lt;li&gt;clog-new-app - New application template tool&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;High Order Extensions to CLOG&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;clog-gui - Desktop over the web&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Menus&lt;/li&gt; &#xA;   &lt;li&gt;Windowing system&lt;/li&gt; &#xA;   &lt;li&gt;Modal windows, Keep-on-top windows&lt;/li&gt; &#xA;   &lt;li&gt;File Load / Save dialogs&lt;/li&gt; &#xA;   &lt;li&gt;Alert, Input and Confirmation dialogs&lt;/li&gt; &#xA;   &lt;li&gt;Form dialogs&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;clog-web - Webpage creation&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Auto column layouts&lt;/li&gt; &#xA;   &lt;li&gt;12 Point Grid System layouts&lt;/li&gt; &#xA;   &lt;li&gt;Content containers&lt;/li&gt; &#xA;   &lt;li&gt;Panels&lt;/li&gt; &#xA;   &lt;li&gt;Sidebar menus&lt;/li&gt; &#xA;   &lt;li&gt;Compositor containers&lt;/li&gt; &#xA;   &lt;li&gt;Menus&lt;/li&gt; &#xA;   &lt;li&gt;Alerts&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;clog-web-site - Instant themed websites with plugins:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;clog-web-page - create a theme based page&lt;/li&gt; &#xA;   &lt;li&gt;clog-web-dbi - database driven websites (uses clog-auth)&lt;/li&gt; &#xA;   &lt;li&gt;clog-web-forms - Instant web forms&lt;/li&gt; &#xA;   &lt;li&gt;clog-web-themes - basic themes for clog based websites&lt;/li&gt; &#xA;   &lt;li&gt;clog-web-content - database driven content,tags, comments (in progress)&lt;/li&gt; &#xA;   &lt;li&gt;clog-web-blog - instant blogs (in progress)&lt;/li&gt; &#xA;   &lt;li&gt;clog-web-cart - instant shopping carts (future)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;clog-panels - Quick application layouts&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;clog-presentations - bi-directional linking of Lisp Objects and CLOG Objects&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;clog-jquery - DOM queries&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;clog-data - Move data to and from groups of controls&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;SQL writer helpers for basic SQL&lt;/li&gt; &#xA;   &lt;li&gt;CLOG-Database - Database control for CLOG Builder&lt;/li&gt; &#xA;   &lt;li&gt;CLOG-One-Row - One row at a time table access auto binds to controls in CLOG Builder&lt;/li&gt; &#xA;   &lt;li&gt;CLOG-Lookup - Version of the select control (dropdown and listbox) that are database connected&lt;/li&gt; &#xA;   &lt;li&gt;CLOG-DB-Table - Version of html table that are database connected&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;clog-auth - Authentication and authorization framework&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;clog-plugin - Custom Control Plug-in template for Builder and CLOG&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;(See &lt;a href=&#34;https://raw.githubusercontent.com/rabbibotton/clog/main/FUTURE.md&#34;&gt;FUTURE.md&lt;/a&gt; for future plans)&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>atlas-engineer/nyxt</title>
    <updated>2022-08-01T02:36:36Z</updated>
    <id>tag:github.com,2022-08-01:/atlas-engineer/nyxt</id>
    <link href="https://github.com/atlas-engineer/nyxt" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Nyxt - the hacker&#39;s power-browser.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#+html: &lt;img src=&#34;https://nyxt.atlas.engineer/static/image/nyxt_256x256.png&#34; align=&#34;right&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Nyxt browser&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;Nyxt&lt;/em&gt; [nýkst] is a keyboard-driven web browser designed for power users. Inspired by Emacs and Vim, it has familiar keybindings ([[https://en.wikipedia.org/wiki/Emacs][Emacs]], [[https://en.wikipedia.org/wiki/Vim_(text_editor)][vi]], [[https://en.wikipedia.org/wiki/IBM_Common_User_Access][CUA]]), and is infinitely extensible in Lisp.&lt;/p&gt; &#xA;&lt;p&gt;If you like Nyxt and you would like to help future development, please give us a star, spread the word, and support us on [[https://www.patreon.com/nyxt][Patreon]], thank you!&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Attention:&lt;/em&gt; Nyxt is under active development. Feel free to [[https://github.com/atlas-engineer/nyxt/issues][report]] bugs, instabilities or feature wishes.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;#+html: &lt;/p&gt;&#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a href=&#34;http://nyxt.atlas.engineer/&#34;&gt;Homepage&lt;/a&gt; | &#xA; &lt;a href=&#34;https://nyxt.atlas.engineer/download&#34;&gt;Downloads&lt;/a&gt; | &#xA; &lt;a href=&#34;https://nyxt.atlas.engineer/articles&#34;&gt;Articles&lt;/a&gt; | &#xA; &lt;a href=&#34;https://store.nyxt.atlas.engineer/&#34;&gt;Store&lt;/a&gt; | &#xA; &lt;a href=&#34;https://github.com/atlas-engineer/nyxt/raw/master/documents/README.org&#34;&gt;Developer&#39;s Manual&lt;/a&gt; | &#xA; &lt;a href=&#34;https://discourse.atlas.engineer/&#34;&gt;Forum&lt;/a&gt; | &#xA; &lt;a href=&#34;https://kiwiirc.com/nextclient/irc.libera.chat/nyxt&#34;&gt;Chat&lt;/a&gt; &#xA;&lt;/div&gt;&#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Features For an exhaustive description of all of the features, please refer to the manual.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Fast tab switching&lt;/p&gt; &#xA;&lt;p&gt;Switch easily between your open tabs via fuzzy search. If you are looking for &lt;del&gt;&lt;a href=&#34;https://www.example.com&#34;&gt;https://www.example.com&lt;/a&gt;&lt;/del&gt;, you could type in &lt;del&gt;ele&lt;/del&gt;, &lt;del&gt;exa&lt;/del&gt;, &lt;del&gt;epl&lt;/del&gt;, or any other matching series of letters.&lt;/p&gt; &#xA;&lt;p&gt;#+html: &lt;img src=&#34;https://nyxt.atlas.engineer/static/image/switch-buffer.png?&#34; align=&#34;center&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;** Multiple selection&lt;/p&gt; &#xA;&lt;p&gt;Commands can accept multiple inputs, allowing you to quickly perform an operation against multiple objects. In the example below we search for cactuses, and open up several images simultaneously:&lt;/p&gt; &#xA;&lt;p&gt;#+html: &lt;img src=&#34;https://nyxt.atlas.engineer/static/image/multi-select.png?&#34; align=&#34;center&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;** Powerful bookmarks&lt;/p&gt; &#xA;&lt;p&gt;Bookmark a page with tags. Search bookmarks with compound queries. Capture more data about your bookmarks, and group and wrangle them in any way you like.&lt;/p&gt; &#xA;&lt;p&gt;#+html: &lt;img src=&#34;https://nyxt.atlas.engineer/static/image/bookmark.png?&#34; align=&#34;center&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;** Multi tab search&lt;/p&gt; &#xA;&lt;p&gt;Search multiple tabs at the same time, and view all the results in a single window. Jump quickly through your open tabs to find what you need.&lt;/p&gt; &#xA;&lt;p&gt;#+html: &lt;img src=&#34;https://nyxt.atlas.engineer/static/image/multi-search.png?&#34; align=&#34;center&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;** History as a tree&lt;/p&gt; &#xA;&lt;p&gt;History is represented as a tree that you can traverse. Smarter than the &#34;forwards-backwards&#34; abstraction found in other browsers, the tree makes sure you never lose track of where you&#39;ve been.&lt;/p&gt; &#xA;&lt;p&gt;#+html: &lt;img src=&#34;https://nyxt.atlas.engineer/static/image/history.png?&#34; align=&#34;center&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Getting started ** Install Nyxt&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Nyxt supports:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;GNU/Linux&lt;/li&gt; &#xA; &lt;li&gt;macOS (unofficial)&lt;/li&gt; &#xA; &lt;li&gt;FreeBSD (unofficial)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Nyxt has engine support for WebKit and &lt;em&gt;experimental support&lt;/em&gt; for WebEngine/Blink.&lt;/p&gt; &#xA;&lt;p&gt;Please find pre-built binaries at [[https://nyxt.atlas.engineer/download][Nyxt&#39;s downloads page]]. Nyxt is available on the following platforms:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;[[https://www.alpinelinux.org/][Alpine]].&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[[https://www.debian.org][Debian]] and derivatives such as [[https://ubuntu.com/][Ubuntu]] and [[https://linuxmint.com/][Linux Mint]].&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[[https://github.com/atlas-engineer/ports][MacPorts]].&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[[https://archlinux.org/][Arch Linux]]: Install with =pacman -Syu nyxt=.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[[https://nixos.org/nix/][Nix]]: Install with =nix-env --install nyxt=.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[[https://guix.gnu.org][Guix]]: Install with =guix install nyxt=.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[[https://voidlinux.org/][Void]]: Install with =xbps-install nyxt=.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[[https://www.opensuse.org/][OpenSuse]] (user-maintained package of the latest &lt;code&gt;master&lt;/code&gt; build):&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;Tumbleweed:&lt;/p&gt; &lt;p&gt;#+begin_src sh zypper ar &lt;a href=&#34;https://download.opensuse.org/repositories/home:/bobbie424242/openSUSE_Tumbleweed/&#34;&gt;https://download.opensuse.org/repositories/home:/bobbie424242/openSUSE_Tumbleweed/&lt;/a&gt; nyxt-git #+end_src&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;LEAP:&lt;/p&gt; &lt;p&gt;#+begin_src sh zypper ar &lt;a href=&#34;https://download.opensuse.org/repositories/home:/bobbie424242/15.4/&#34;&gt;https://download.opensuse.org/repositories/home:/bobbie424242/15.4/&lt;/a&gt; nyxt-git #+end_src&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;p&gt;Then install with =zypper in nyxt=.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To install from source, please refer to the [[file:documents/README.org][developer&#39;s manual]].&lt;/p&gt; &#xA;&lt;p&gt;** Documentation &amp;amp; Customization&lt;/p&gt; &#xA;&lt;p&gt;For full documentation about Nyxt, how it works, and how to extend it please refer to the embedded manual. To get started, run the =manual= command (press =control= + =space=, type =manual= and confirm with =return=).&lt;/p&gt; &#xA;&lt;p&gt;If you want to help with development, or build Nyxt from source, read the developer&#39;s documentation at [[file:documents/README.org][documents/README.org]].&lt;/p&gt; &#xA;&lt;p&gt;** History of changes&lt;/p&gt; &#xA;&lt;p&gt;If you are running a recent version of Nyxt please run the =changelog= command. For older versions, please refer to the [[https://github.com/atlas-engineer/nyxt/blob/2.2.1/documents/CHANGELOG.org][CHANGELOG]].&lt;/p&gt;</summary>
  </entry>
</feed>