<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Common Lisp Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-04-02T01:51:45Z</updated>
  <subtitle>Weekly Trending of Common Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>scymtym/xml.location</title>
    <updated>2023-04-02T01:51:45Z</updated>
    <id>tag:github.com,2023-04-02:/scymtym/xml.location</id>
    <link href="https://github.com/scymtym/xml.location" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Bind XPath-based locations to variables with extensible type-based to/from XML conversion&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#+TITLE: xml.location README #+AUTHOR: Jan Moringen #+EMAIL: &lt;a href=&#34;mailto:jmoringe@techfak.uni-bielefeld.de&#34;&gt;jmoringe@techfak.uni-bielefeld.de&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Introduction The =xml.location= system provides manipulation of and a conversion mechanisms for XML data:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Typed, XPath-based location bindings&lt;/li&gt; &#xA;   &lt;li&gt;Extensible Lisp -&amp;gt; XML and XML -&amp;gt; Lisp conversion&lt;/li&gt; &#xA;   &lt;li&gt;Creation of XPath-specified XML structures&lt;/li&gt; &#xA;   &lt;li&gt;Automatic compile-time parsing of XML documents and XPaths&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;p&gt;This means, when working with an XML document #+BEGIN_SRC xml &#xA;   &lt;root foo=&#34;1 2 3&#34;&gt;&#xA;    old text&#xA;   &lt;/root&gt; #+END_SRC we can write #+BEGIN_SRC lisp (let ((document (cxml:parse &#34;&amp;lt;root foo=&#34;1 2 3&#34;&amp;gt;old text&#34; (stp:make-builder)))) (with-locations (((:name name) &#34;node()&#34;) (text &#34;node()/text()&#34;) ((:@ (foo &#34;foo&#34;) :type &#39;(list number)) &#34;node()&#34;)) document (setf text &#34;new text&#34; foo &#39;(4 5)) (values name text foo (stp:serialize document (cxml:make-string-sink))))) =&amp;gt; (values &#34;root&#34; &#34;new text&#34; (4 5) &#34;&#xA;   &lt;!--?xml version=\&#34;1.0\&#34; encoding=\&#34;UTF-8\&#34;?--&gt; &amp;lt;root foo=&#34;4 5&#34;&amp;gt;new text&#34;) #+END_SRC&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Tutorial The simplest case of using =xml.location= looks like this: #+BEGIN_SRC lisp -n (let ((loc (xml.location:loc &#34;&#xA;   &lt;foo a=&#34;1&#34; b=&#34;c d&#34;&gt;&#xA;    bar baz&#xA;   &lt;/foo&gt;&#34; &#34;node()&#34;))) (values (xml.location:name loc) (xml.location:@ loc &#34;a&#34; :type &#39;integer) (xml.location:@ loc &#34;b&#34; :type &#39;(list symbol)))) =&amp;gt; (values &#34;foo&#34; 1 (C D)) #+END_SRC The first line uses the =xml.location:loc= function to construct a =xml.location:location= object for the document &lt;del&gt;&#xA;    &lt;foo a=&#34;1&#34; b=&#34;c&#xA;d&#34;&gt;&#xA;     bar baz&#xA;    &lt;/foo&gt;&lt;/del&gt; and the XPath =node()=. In lines 3 -5, the following things are extracted and returned as Lisp objects:&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;the name of the root node (using the =xml.location:name= accessor)&lt;/li&gt; &#xA;   &lt;li&gt;the value of the attribute &#34;a&#34;, interpreted as =integer= (using the =xml.location:@= attribute accessor)&lt;/li&gt; &#xA;   &lt;li&gt;the value of the attribute &#34;b&#34;, interpreted as =list= of =symbol= s&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;p&gt;The accessors =xml.location:name=, =xml.location:@= and =xml.location:val= are =setf= able places: #+BEGIN_SRC lisp (let ((loc (xml.location:loc &#34;&#xA;   &lt;foo old-attr=&#34;1&#34; /&gt;&#34; &#34;node()[@pred-attr=&#39;baz&#39;]&#34; :if-no-match :create))) (setf (xml.location:@ loc &#34;old-attr&#34; :type &#39;number) 2 (xml.location:@ loc &#34;new-attr&#34;) &#34;foo&#34;) loc) =&amp;gt; #&amp;lt;(LOCATION 3 MIXINS) node()[@pred-attr=&#39;baz&#39;] in &#xA;   &lt;foo new-attr=&#34;foo&#34; pred-attr=&#34;baz&#34; old-attr=&#34;2&#34; /&gt; {FAC7D81}&amp;gt; #+END_SRC Note how =:if-no-match :create= causes specified locations to be created if they do not exist already --- including things specified in form of predicates in some cases.&lt;/p&gt; &lt;p&gt;In both previous examples, a single =xml.location:location= object was used multiple times. Such cases can be simplified using the =xml.location:with-locations-r/o= and =xml.location:with-locations= macros. The former binds variables to values extracted from XML locations while the latter uses symbol macros to make XML locations =setf= able places: #+BEGIN_SRC lisp (xml.location:with-locations (((:name name) &#34;node()&#34;) (text &#34;bla/text()&#34;) ((:@ (my-foo &#34;foo&#34;) :type &#39;(list number)) &#34;node()&#34;) ((:@ bar) &#34;node()&#34;)) &#34;&#xA;   &lt;bla foo=&#34;1 2 4&#34; bar=&#34;baz&#34;&gt;&#xA;    foo&#xA;   &lt;/bla&gt;&#34; ;; Set values of generalized variables (setf name &#34;frooble&#34; my-foo &#39;(5 6) bar 42 text &#34;bubba&#34;)&lt;/p&gt; &lt;p&gt;;; Extract values from generalized variables (values name my-foo bar text)) =&amp;gt; (values &#34;frooble&#34; (5 6) &#34;42&#34; &#34;bubba&#34;) #+END_SRC&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;TODO Namespaces&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Conversion Infrastructure The core of the conversion infrastructure consists of two operations:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Lisp -&amp;gt; XML conversion&lt;/li&gt; &#xA;   &lt;li&gt;XML -&amp;gt; Lisp conversion Actually, there are several details which lead to a greater number of conversions, but all of these are special cases of the aforementioned two conversions. ** TODO Lisp to XML conversion ** TODO XML to Lisp conversion ** Adding Conversions There are several possible ways to define to/from XML conversion methods for a type:&lt;/li&gt; &#xA;  &lt;/ul&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;Types that have obvious string representations&lt;/li&gt; &#xA;   &lt;li&gt;Types that require a structured representation&lt;/li&gt; &#xA;   &lt;li&gt;Types that require a structured representation and have internal structure that can be represented in several different ways Types of the first kind often work without the definition of additional methods since the default behavior for to/from string conversion uses =read= and =print= which is often sufficient.&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;p&gt;For the second kind of type, at least the following two methods have to be defined: #+BEGIN_SRC lisp (defmethod -&amp;gt;xml ((value MY-TYPE) (dest stp:element) (type t)) &#34;Store VALUE in XML element DEST.&#34; ;; actual conversion code )&lt;/p&gt; &lt;p&gt;(defmethod xml-&amp;gt; ((value stp:element) (type &#39;MY-TYPE)) &#34;Retrieve an instance of MY-TYPE from the XML element VALUE.&#34; ;; actual conversion code ) #+END_SRC&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;TODO Reference&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>wobh/org.wobh.common-lisp.games.wumpus</title>
    <updated>2023-04-02T01:51:45Z</updated>
    <id>tag:github.com,2023-04-02:/wobh/org.wobh.common-lisp.games.wumpus</id>
    <link href="https://github.com/wobh/org.wobh.common-lisp.games.wumpus" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Common Lisp implementation of Gregory Yob&#39;s classic game.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#+Title: Hunt The Wumpus README #+date: &amp;lt;2012-10-27 Sat&amp;gt; #+author: William Clifford #+email: &lt;a href=&#34;mailto:will@wobh.org&#34;&gt;will@wobh.org&lt;/a&gt; #+language: en #+select_tags: export #+exclude_tags: noexport&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Introduction&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;A Common Lisp implementation of Gregory Yob&#39;s classic game.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Purpose&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This is here shared with the idea that some might find it useful for personal experiments and toys--that&#39;s all I&#39;m using it for. It might also be cautionarily if not pedagogically useful. All that said, it should not be expected to have any desireable characteristics or be useful in any way.&lt;/p&gt; &#xA;&lt;p&gt;Non-personal use (for example, commercial) is forbidden.&lt;/p&gt; &#xA;&lt;p&gt;Non-casual personal use is strongly discouraged.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Instructions&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To use:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Clone repository&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;del&gt;make install&lt;/del&gt; this will install it into &lt;del&gt;${XDG_DATA_HOME}/common-lisp/source/org.wobh.common-lisp.games.wumpus&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;in REPL &lt;del&gt;(require &#34;asdf&#34;)&lt;/del&gt; (as needed)&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;(require :org.wobh.common-lisp.games.wumpus)&lt;/del&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;The test package is simply Lisp assertions and loads with the rest of the system. If the system loads without errors all the tests passed.&lt;/p&gt; &#xA;&lt;p&gt;The package defines a nickname of &lt;del&gt;wumpus&lt;/del&gt; for convenience.&lt;/p&gt; &#xA;&lt;p&gt;Once required, you can play wumpus in the REPL with &lt;del&gt;(wumpus:play)&lt;/del&gt; or enter the playtest environment with &lt;del&gt;(in-package #:wumpus-user)&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Features and Suggestions&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Gregory Yob made the following suggestions to expand his original &lt;em&gt;Hunt the Wumpus&lt;/em&gt; game.&lt;/p&gt; &#xA;&lt;p&gt;&#34;If you are a Wumpus fiend, make a version in which he avoids pits and superbats can carry him only one room (with the possibility of being dumped into your cave).&#34; [[[1]]]&lt;/p&gt; &#xA;&lt;p&gt;[[http://www.atariarchives.org/bcc1/showpage.php?page%3D248][http://www.atariarchives.org/bcc1/showpage.php?page=248]]&lt;/p&gt; &#xA;&lt;p&gt;Yob added different cave systems in &lt;em&gt;Wumpus 2&lt;/em&gt; and discussed additional features in &lt;em&gt;Wumpus 3&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&#34;... earthquakes, bat migrations, and the incredible &#39;turnareo&#39; ...&#34; [[[2]]]&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://www.atariarchives.org/bcc2/showpage.php?page=244&#34;&gt;http://www.atariarchives.org/bcc2/showpage.php?page=244&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;So the idea here is to make a &lt;em&gt;Hunt the Wumpus&lt;/em&gt; for Common Lisp, which allows the classic &lt;em&gt;Hunt the Wumpus&lt;/em&gt; and &lt;em&gt;Wumpus 2&lt;/em&gt; games. I couldn&#39;t find source for &lt;em&gt;Wumpus 3&lt;/em&gt;, but I thought I should set it up to easily allow adapting and modifying the game.&lt;/p&gt; &#xA;&lt;p&gt;** New Features&lt;/p&gt; &#xA;&lt;p&gt;It might take more than one arrow to slay the Wumpus (or the Hunter). The Hunter might be able to survive a Wumpus mauling.&lt;/p&gt; &#xA;&lt;p&gt;If the arrow strikes the Wumpus and the Wumpus survives, the Wumpus might be able to track the arrow to the room it came from. If the hunter or other scapegoat is not found, the still enraged Wumpus might make one further move at random. This would force the hunter to shoot from a couple of rooms away to be safe.&lt;/p&gt; &#xA;&lt;p&gt;** Features to consider&lt;/p&gt; &#xA;&lt;p&gt;Bats might move around.&lt;/p&gt; &#xA;&lt;p&gt;How do arrows interact with pits or bats?&lt;/p&gt; &#xA;&lt;p&gt;Wounded Wumpuses and Hunters might heal (perhaps by eating mushrooms, or drinking mineral water).&lt;/p&gt; &#xA;&lt;p&gt;The Wumpus might wake and move around before settling down again. (hunter-makes-noise?)&lt;/p&gt; &#xA;&lt;p&gt;The Wumpus might track the Hunter through the caves.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Exported functions and their parameters&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** &lt;del&gt;MAIN&lt;/del&gt;&lt;/p&gt; &#xA;&lt;p&gt;Launches game, defaults to classic Hunt the Wumpus settings.&lt;/p&gt; &#xA;&lt;p&gt;*** &lt;del&gt;:GAME&lt;/del&gt;&lt;/p&gt; &#xA;&lt;p&gt;Option to provide custom Hunt the Wumpus game environment&lt;/p&gt; &#xA;&lt;p&gt;** &lt;del&gt;SETUP-GAME&lt;/del&gt;&lt;/p&gt; &#xA;&lt;p&gt;Creates Hunt the Wumpus game environment&lt;/p&gt; &#xA;&lt;p&gt;*** &lt;del&gt;:HUNT&lt;/del&gt;&lt;/p&gt; &#xA;&lt;p&gt;Option for providing a custom hunting setting.&lt;/p&gt; &#xA;&lt;p&gt;*** &lt;del&gt;:ALLOW-QUIT&lt;/del&gt;&lt;/p&gt; &#xA;&lt;p&gt;When true, allows player to quit game at action prompt.&lt;/p&gt; &#xA;&lt;p&gt;*** &lt;del&gt;:CANCEL-SHOT-WITH-ZERO&lt;/del&gt;&lt;/p&gt; &#xA;&lt;p&gt;When true, allows hunter to cancel shot by entering &#39;0&#39; at shot range prompt.&lt;/p&gt; &#xA;&lt;p&gt;*** &lt;del&gt;:SHOW-NEAR-CHAMBERS&lt;/del&gt;&lt;/p&gt; &#xA;&lt;p&gt;When true, shows the player the nearby chambers to the last room in arrow path. This makes accurately steering an arrow shot path a lot easier.&lt;/p&gt; &#xA;&lt;p&gt;** &lt;del&gt;SETUP-HUNT&lt;/del&gt;&lt;/p&gt; &#xA;&lt;p&gt;*** &lt;del&gt;:CAVE-NAME&lt;/del&gt;&lt;/p&gt; &#xA;&lt;p&gt;Option to provide a cave name for custom cave. The cave names&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;del&gt;DODECAHEDRON&lt;/del&gt; :: Classic Wumpus cave. Default cave.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;DODECAHEDRON-CIRCUIT&lt;/del&gt; :: dodecahedron with Hamiltonian circuit passages&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;MOBIUS-STRIP&lt;/del&gt; :: From Wumpus II&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;STRING-OF-BEADS&lt;/del&gt; :: From Wumpus II&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;HEX-NET-ON-TORUS&lt;/del&gt; :: From Wumpus II&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;DENDRITE-WITH-DEGENERACIES&lt;/del&gt; :: From Wumpus II&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;ONE-WAY-LATTICE&lt;/del&gt; :: From Wumpus II&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;*** &lt;del&gt;:WUMPUS-HEALTH&lt;/del&gt;&lt;/p&gt; &#xA;&lt;p&gt;Option for allowing the Wumpus to take more than one arrow hit. Default, 1.&lt;/p&gt; &#xA;&lt;p&gt;*** &lt;del&gt;:WUMPUS-HURT&lt;/del&gt;&lt;/p&gt; &#xA;&lt;p&gt;Symbol of function which governs what the wumpus does when struck by an arrow and not slain.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;del&gt;WUMPUS-BOTHERED&lt;/del&gt; :: will randomly move or stay&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;WUMPUS-ENRAGED&lt;/del&gt; :: will try to follow the arrow into the room it came from, and beyond if no one found&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;*** &lt;del&gt;:HUNTER-HEALTH&lt;/del&gt;&lt;/p&gt; &#xA;&lt;p&gt;Option for allowing the Hunter to survive more than one wumpus mauling. Default 1.&lt;/p&gt; &#xA;&lt;p&gt;*** &lt;del&gt;:BOW-RANGE-MAXIMUM&lt;/del&gt;&lt;/p&gt; &#xA;&lt;p&gt;Option for setting the maximum range of the Hunter&#39;s bow. Default 5.&lt;/p&gt; &#xA;&lt;p&gt;*** &lt;del&gt;:QUIVER-ROOM&lt;/del&gt;&lt;/p&gt; &#xA;&lt;p&gt;Option for setting the maximum number of arrows the Hunter&#39;s quiver can hold. Default 5.&lt;/p&gt; &#xA;&lt;p&gt;*** &lt;del&gt;:QUIVER-HOLD&lt;/del&gt;&lt;/p&gt; &#xA;&lt;p&gt;Option for setting the number of arrows the Hunter&#39;s quiver starts off with. Default 5.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;References&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&amp;lt;&amp;lt;1&amp;gt;&amp;gt; Yob, Gregory, &lt;em&gt;Hunt The Wumpus&lt;/em&gt;, &lt;em&gt;The Best Of Creative Computing Volume 1&lt;/em&gt;, 1976, pgs 247-250, &lt;a href=&#34;http://www.atariarchives.org/bcc1/showpage.php?page=247&#34;&gt;http://www.atariarchives.org/bcc1/showpage.php?page=247&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&amp;lt;&amp;lt;2&amp;gt;&amp;gt;Yob, Gregory, &lt;em&gt;Wumpus 2&lt;/em&gt;, &lt;em&gt;The Best Of Creative Computing Volume 2&lt;/em&gt;, 1977, pgs 244-246, &lt;a href=&#34;http://www.atariarchives.org/bcc2/showpage.php?page=244&#34;&gt;http://www.atariarchives.org/bcc2/showpage.php?page=244&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&amp;lt;&amp;lt;3&amp;gt;&amp;gt; &lt;em&gt;Baf&#39;s guide to the IF Archive&lt;/em&gt;, &lt;a href=&#34;http://www.wurb.com/if/game/442&#34;&gt;http://www.wurb.com/if/game/442&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;COMMENT org settings #+options: &#39;:nil *:t -:t ::t &amp;lt;:t H:6 \n:nil ^:t arch:headline #+options: author:t broken-links:nil c:nil creator:nil #+options: d:(not &#34;LOGBOOK&#34;) date:t e:t email:nil f:t inline:t num:nil #+options: p:nil pri:nil prop:nil stat:t tags:t tasks:t tex:t #+options: timestamp:t title:t toc:nil todo:t |:t&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>