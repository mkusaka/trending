<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Common Lisp Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-04-21T03:25:40Z</updated>
  <subtitle>Weekly Trending of Common Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>mychrisdangelo/Decision-Tree-Learning</title>
    <updated>2024-04-21T03:25:40Z</updated>
    <id>tag:github.com,2024-04-21:/mychrisdangelo/Decision-Tree-Learning</id>
    <link href="https://github.com/mychrisdangelo/Decision-Tree-Learning" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Decision Tree Learning - Artificial Intelligence Project 4 Spring 2013&lt;/p&gt;&lt;hr&gt;&lt;p&gt;Chris D&#39;Angelo &lt;a href=&#34;mailto:cd2665@columbia.edu&#34;&gt;cd2665@columbia.edu&lt;/a&gt; May 4, 2013 AI - Spring 2013 - Professor Stolfo&lt;/p&gt; &#xA;&lt;p&gt;Assumes that user is able to enter in the heading titles (attributes) manually or heading tites are added automatically. Program assumes that the user will provide a database file in plain text form in the style of the enclosed document &#34;restuarantlsp.txt&#34;.&lt;/p&gt; &#xA;&lt;p&gt;Decision Tree Learning - Project 4&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Project implemented in Common Lisp.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Programming environment: Sublime Text 2 and emacs+slime+clozure.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To run the program on clic machines I suggest starting clisp in in the extracted project directory. Then executing the following example commands. The paths are an example on my home computer.&lt;/p&gt; &lt;p&gt;(load (compile-file &#34;/Users/chrisdangelo/Desktop/cd2665-hw4.lisp&#34;))&lt;/p&gt; &lt;p&gt;; to load the data from file (load-file &#34;/Users/chrisdangelo/Desktop/restuarantlsp.txt&#34;)&lt;/p&gt; &lt;p&gt;; to create a decision-tree function with its goal as attribute11 (functional-id3 &#39;attribute11)&lt;/p&gt; &lt;p&gt;; using that function to find the result of a new input (eval &#39;(decision-tree &#39;(no yes no no some $ no no burger 0-10 yes)))&lt;/p&gt; &lt;p&gt;; to see the lisp list representation of the decision tree issue command... (id3 &#39;attribute11)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Example Output:&lt;/p&gt; &lt;p&gt;CL-USER&amp;gt; (load-file &#34;/Users/chrisdangelo/Desktop/restuarantlsp.txt&#34;) Add attribute names? (y or n) n (EXAMPLE ATTRIBUTE1 ATTRIBUTE2 ATTRIBUTE3 ATTRIBUTE4 ATTRIBUTE5 ATTRIBUTE6 ATTRIBUTE7 ATTRIBUTE8 ATTRIBUTE9 ATTRIBUTE10 ATTRIBUTE11) (EXAMPLE1 YES NO NO YES SOME $$$ NO YES FRENCH 0-10 YES) (EXAMPLE2 YES NO NO YES FULL $ NO NO THAI 30-60 NO) (EXAMPLE3 NO YES NO NO SOME $ NO NO BURGER 0-10 YES) (EXAMPLE4 YES NO YES YES FULL $ NO NO THAI 10-30 YES) (EXAMPLE5 YES NO YES NO FULL $$$ NO YES FRENCH &amp;gt;60 NO) (EXAMPLE6 NO YES NO YES SOME $$ YES YES ITALIAN 0-10 YES) (EXAMPLE7 NO YES NO NO NONE $ YES NO BURGER 0-10 NO) (EXAMPLE8 NO NO NO YES SOME $$ YES YES THAI 0-10 YES) (EXAMPLE9 NO YES YES NO FULL $ YES NO BURGER &amp;gt;60 NO) (EXAMPLE10 YES YES YES YES FULL $$$ NO YES ITALIAN 10-30 NO) (EXAMPLE11 NO NO NO NO NONE $ NO NO THAI 0-10 NO) (EXAMPLE12 YES YES YES YES FULL $ NO NO BURGER 30-60 YES) NIL CL-USER&amp;gt; (functional-id3 &#39;attribute11) DECISION-TREE CL-USER&amp;gt; (eval &#39;(decision-tree &#39;(no yes no no some $ no no burger 0-10 yes))) YES CL-USER&amp;gt; (id3 &#39;attribute11) (ATTRIBUTE5 (NONE NO) (FULL (ATTRIBUTE4 (NO NO) (YES (ATTRIBUTE9 (BURGER YES) (ITALIAN NO) (THAI (ATTRIBUTE3 (YES YES) (NO NO))))))) (SOME YES))&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
</feed>