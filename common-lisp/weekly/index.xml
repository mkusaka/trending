<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Common Lisp Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-04-23T01:51:13Z</updated>
  <subtitle>Weekly Trending of Common Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>nobody-famous/alive-lsp</title>
    <updated>2023-04-23T01:51:13Z</updated>
    <id>tag:github.com,2023-04-23:/nobody-famous/alive-lsp</id>
    <link href="https://github.com/nobody-famous/alive-lsp" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Language Server Protocol implementation for use with the Alive extension&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Alive Language Server&lt;/h1&gt; &#xA;&lt;p&gt;This is the language server for &lt;a href=&#34;https://github.com/nobody-famous/alive&#34;&gt;Alive: The Average Lisp VSCode Environment&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Running the server&lt;/h2&gt; &#xA;&lt;p&gt;For newcomers it could be difficult to start with Common LISP specially if the tech stack is not known yet. These instructions helps to have the server up and running as easy as possible. Steps are:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install your LISP Implementation&lt;/li&gt; &#xA; &lt;li&gt;Install a library/package manager&lt;/li&gt; &#xA; &lt;li&gt;Clone this repository&lt;/li&gt; &#xA; &lt;li&gt;Load the &lt;code&gt;alive-lsp&lt;/code&gt; project and start the server&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Install your LISP Implementation&lt;/h3&gt; &#xA;&lt;p&gt;Here let&#39;s assume we install &lt;a href=&#34;https://www.sbcl.org/&#34;&gt;sbcl&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# debian&#xA;apt-get install sbcl&#xA;&#xA;# macos&#xA;brew install sbcl&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Install a library/package manager&lt;/h3&gt; &#xA;&lt;p&gt;Here let&#39;s assume we use &lt;a href=&#34;https://www.quicklisp.org/beta/&#34;&gt;quicklisp&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -O https://beta.quicklisp.org/quicklisp.lisp&#xA;curl -O https://beta.quicklisp.org/quicklisp.lisp.asc&#xA;gpg --verify quicklisp.lisp.asc quicklisp.lisp&#xA;sbcl --load quicklisp.lisp&#xA;# ....&#xA;* (quicklisp-quickstart:install)&#xA;# it is also advisable to:&#xA;* (ql:add-to-init-file)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Clone this repository&lt;/h3&gt; &#xA;&lt;p&gt;Previous step should have created a directory in your home directory: &lt;code&gt;~/quicklisp&lt;/code&gt;, unless you decided to install it in another directory&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(quicklisp-quickstart:install :path &#34;~/.quicklisp&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;just keep in mind the directory, let&#39;s called here &lt;code&gt;$QUICKLISP_HOME&lt;/code&gt;. Let&#39;s clone this repository in &lt;code&gt;$QUICKLISP_HOME/local-projects&lt;/code&gt;, so that it will be discovered automatically by Quicklisp when loading the project:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone git@github.com:nobody-famous/alive-lsp.git $QUICKLISP_HOME/local-projects/alive-lsp&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Load the &lt;code&gt;alive-lsp&lt;/code&gt; project and start the server&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sbcl&#xA;This is SBCL 2.2.11, an implementation of ANSI Common Lisp.&#xA;More information about SBCL is available at &amp;lt;http://www.sbcl.org/&amp;gt;.&#xA;&#xA;SBCL is free software, provided as is, with absolutely no warranty.&#xA;It is mostly in the public domain; some portions are provided under&#xA;BSD-style licenses.  See the CREDITS and COPYING files in the&#xA;distribution for more information.&#xA;* (ql:quickload &#34;alive-lsp&#34;)&#xA;To load &#34;alive-lsp&#34;:&#xA;  Load 1 ASDF system:&#xA;    alive-lsp&#xA;; Loading &#34;alive-lsp&#34;&#xA;.&#xA;(&#34;alive-lsp&#34;)&#xA;* (alive/server::start :port 8006)&#xA;#&amp;lt;SB-THREAD:THREAD &#34;Alive LSP Server&#34; RUNNING {70069B3BE3}&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Your language server works! You can stop it now (Ctrl + C) and proceed to properly configure you Alive Extension in vscode:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;    &#34;alive.lsp.startCommand&#34;: [&#xA;        &#34;sbcl&#34;,&#xA;        &#34;--eval&#34;,&#xA;        &#34;(require :asdf)&#34;,&#xA;        &#34;--eval&#34;,&#xA;        &#34;(asdf:load-system :alive-lsp)&#34;,&#xA;        &#34;--eval&#34;,&#xA;        &#34;(alive/server:start)&#34;&#xA;    ]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;note that &lt;code&gt;alive.lsp.startCommand&lt;/code&gt; could also be the one used before in the REPL session, something like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;    &#34;alive.lsp.remote.port&#34;: &#34;8006&#34;,&#xA;    &#34;alive.lsp.startCommand&#34;: [&#xA;        &#34;sbcl&#34;,&#xA;        &#34;--noinform&#34;,&#xA;        &#34;--eval&#34;,&#xA;        &#34;ql:quickload \&#34;alive-lsp\&#34;)&#34;,&#xA;        &#34;--eval&#34;,&#xA;        &#34;(alive/server::start :port 8006)&#34;&#xA;    ]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;just be sure to also configure the port if you specify one on the command for starting the server.&lt;/p&gt; &#xA;&lt;h2&gt;Using the server outside of vscode&lt;/h2&gt; &#xA;&lt;p&gt;Take a look at thread &lt;a href=&#34;https://github.com/nobody-famous/alive-lsp/issues/31&#34;&gt;#31&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>bld/bld-maxima</title>
    <updated>2023-04-23T01:51:13Z</updated>
    <id>tag:github.com,2023-04-23:/bld/bld-maxima</id>
    <link href="https://github.com/bld/bld-maxima" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Common Lisp interface to Maxima. Runs Maxima in batch mode, sending Maxima or lisp expressions to be evaluated, or spawns Maxima as a client and communicates with it over a socket.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;bld-maxima&lt;/h1&gt; &#xA;&lt;p&gt;BLD-MAXIMA runs a Maxima process in the background with a socket connection through with commands and Lisp math code can be sent for evaluation. It includes translation of Lisp math expressions to Maxima for algebraic simplification. Lisp forms that aren&#39;t in the translation table are identified and treated as symbols in Maxima. Depends on CL-PPCRE for translating Lisp -&amp;gt; Maxima -&amp;gt; Lisp. Currently, only SBCL is supported, using SB-EXT:RUN-PROGRAM to run Maxima in the background. This has been tested on both Win32 and Linux (both X86-64). The WITH-MAXIMA macro is provided to start &amp;amp; shutdown the Maxima process around whatever expressions are passed to it.&lt;/p&gt; &#xA;&lt;h2&gt;Routines&lt;/h2&gt; &#xA;&lt;p&gt;Allow running a single Maxima process and sending it commands or lisp math code to simplify over a network socket. Depends on USOCKET. Requires MAXIMA-START to run a socket connected Maxima session, and MAXIMA-SHUTDOWN once finished sending computations. Or, run inside WITH-MAXIMA macro.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;CL-USER&amp;gt; (bld-maxima:maxima-start)&#xA;(((%I1) (%O1) FALSE)&#xA; ((%I2) (%O2) &#34;/usr/share/maxima/5.20.1/share/linearalgebra/linearalgebra.mac&#34;))&#xA;CL-USER&amp;gt; (bld-maxima:simp &#39;(+ (aref a 2) (aref a 2)))&#xA;(* 2 (AREF A 2))&#xA;16&#xA;CL-USER&amp;gt; (bld-maxima:maxima-shutdown)&#xA;T&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, you can run these routines inside the WITH-MAXIMA macro:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;CL-USER&amp;gt; (with-maxima&#xA;            (simp &#39;(+ a a)))&#xA;(* 2 A)&#xA;CL-USER&amp;gt; &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Also, trigonometric simplification functions are available corresponding to those in Maxima:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;CL-USER&amp;gt; (with-maxima (trigreduce &#39;(expt (cos x) 2)))&#xA;(* (/ 1 2) (+ 1 (COS (* 2 X))))&#xA;CL-USER&amp;gt; (with-maxima (trigexpand &#39;(cos (* 2 x))))&#xA;(+ (EXPT (COS X) 2) (* -1 (EXPT (SIN X) 2)))&#xA;CL-USER&amp;gt; (with-maxima (trigsimp &#39;(+ (expt (sin x) 2) (expt (cos x) 2))))&#xA;1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Delay&lt;/h2&gt; &#xA;&lt;p&gt;Wrapping the &#39;delay&#39; macro around a &#39;simp expression prevents evaluation so it can be deferred until later, which can speed computations in certain circumstances because of the overhead incurred by &#39;simp.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>eschulte/memoize</title>
    <updated>2023-04-23T01:51:13Z</updated>
    <id>tag:github.com,2023-04-23:/eschulte/memoize</id>
    <link href="https://github.com/eschulte/memoize" rel="alternate"></link>
    <summary type="html">&lt;p&gt;thread safe function memoization&lt;/p&gt;&lt;hr&gt;&lt;p&gt;MEMOIZE - thread safe function memoization&lt;/p&gt; &#xA;&lt;p&gt;A tiny memoization library built on FLEXI-STREAMS and CL-STORE. This uses implementation-specific (currently only supports SBLC) thread safe hashes to ensure thread safe memoization.&lt;/p&gt; &#xA;&lt;p&gt;For more information see &lt;a href=&#34;http://eschulte.github.com/memoize&#34;&gt;http://eschulte.github.com/memoize&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>