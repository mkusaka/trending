<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Common Lisp Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-01T02:05:27Z</updated>
  <subtitle>Weekly Trending of Common Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>rabbibotton/clog</title>
    <updated>2022-06-01T02:05:27Z</updated>
    <id>tag:github.com,2022-06-01:/rabbibotton/clog</id>
    <link href="https://github.com/rabbibotton/clog" rel="alternate"></link>
    <summary type="html">&lt;p&gt;CLOG - The Common Lisp Omnificent GUI&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;CLOG - The Common Lisp Omnificent GUI&lt;/h1&gt; &#xA;&lt;h2&gt;David Botton &lt;a href=&#34;mailto:david@botton.com&#34;&gt;david@botton.com&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;h3&gt;License BSD 3-Clause License&lt;/h3&gt; &#xA;&lt;p&gt;View the HTML Documentation:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://rabbibotton.github.io/clog/clog-manual.html&#34;&gt;https://rabbibotton.github.io/clog/clog-manual.html&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;View a short video on reddit about CLOG Builder&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.reddit.com/r/lisp/comments/sd9wf1/clog_builder_cl_web_3_awesome_lang_awesome_tool/&#34;&gt;https://www.reddit.com/r/lisp/comments/sd9wf1/clog_builder_cl_web_3_awesome_lang_awesome_tool/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rabbibotton/clog/main/LEARN.md&#34;&gt;LEARN COMMON-LISP AND CLOG - LEARN.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://rabbibotton.github.io/images/clog.png&#34; alt=&#34;Image of CLOG&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The Common Lisp Omnificent GUI, CLOG for short, uses web technology to produce graphical user interfaces for applications locally or remotely. CLOG can take the place, or work alongside, most cross-platform GUI frameworks and website frameworks. The CLOG package starts up the connectivity to the browser or other websocket client (often a browser embedded in a native template application.)&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rabbibotton/clog/main/CONCEPT.md&#34;&gt;CLOG - Technical Overview and Purpose&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;STATUS: CLOG 1.2 and CLOG Builder 1.1 released.&lt;/p&gt; &#xA;&lt;p&gt;CLOG is actually based on GNOGA, a framework I wrote for Ada in 2013 and used in commercial production code for the last 9+ years, i.e. the techiniques CLOG uses are solid and proven.&lt;/p&gt; &#xA;&lt;p&gt;CLOG is being actively extended daily. Check the github discussion boards for the latest.&lt;/p&gt; &#xA;&lt;p&gt;Some potential applications for CLOG:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Cross-platform GUIs and Reports&lt;/li&gt; &#xA; &lt;li&gt;Secure websites and complex interactive web applications&lt;/li&gt; &#xA; &lt;li&gt;Mobile software (CLOG Runs native on Android and iOS)&lt;/li&gt; &#xA; &lt;li&gt;Massive multiplayer online games&lt;/li&gt; &#xA; &lt;li&gt;Monitoring software for embedded systems&lt;/li&gt; &#xA; &lt;li&gt;A fun way to teach programming and advanced multi-tasking parallel programming techniques. (CLOG is a parallel GUI)&lt;/li&gt; &#xA; &lt;li&gt;And the list goes on&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The key to CLOG is the relationship it forms with a Browser window or Browser control compiled to native code. CLOG uses websockets for communications and the browser to render a GUI that maintains an active soft realtime connection. For most CLOG applications all programming logic, events and decisions are done on the server which can be local, or remote over the web.&lt;/p&gt; &#xA;&lt;p&gt;CLOG is developed with ECL and SBCL, it is tested fairly regulary on Linux, Windows, Rasberry Pi (running Ubuntu), M1 and Intel Mac. It should in theory work out of the box on any system with Quicklisp (although you could hand install) and CLACK (easily switched out and the ecl Android/iPhone branch doesn&#39;t use).&lt;/p&gt; &#xA;&lt;p&gt;CLOG is in QuickLisp (ql:quickload :clog), but you likely want to live on the bleeding edge and use UltraLisp or clone the github repo into ~/common-lisp directory [or other quicklisp/asdf findable directory (push &#34;path/to/dir/of/projects&#34; ql:&lt;em&gt;local-project-directories&lt;/em&gt;) ]:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd ~/common-lisp&#xA;git clone https://github.com/rabbibotton/clog.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To load this package and work through tutorials (assuming you have Quicklisp configured.)&lt;/p&gt; &#xA;&lt;p&gt;Note: If using portacle for Windows you will need to update Quicklisp use (ql:update-dist &#34;quicklisp&#34;) You will also likely need to copy the sqlite3 dll from &lt;a href=&#34;https://www.sqlite.org/download.html&#34;&gt;https://www.sqlite.org/download.html&lt;/a&gt; to portacle\win\lib Consider a custom &lt;a href=&#34;https://raw.githubusercontent.com/rabbibotton/clog/main/WINDOWS.md&#34;&gt;install on windows&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Start emacs then M-x slime&lt;/li&gt; &#xA; &lt;li&gt;In the REPL, run:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;CL-USER&amp;gt; (ql:quickload :clog)&#xA;CL-USER&amp;gt; (clog:run-tutorial 1)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Tip for Windows WSL linux user. Install &#34;sudo apt install xdg-utils&#34; to install xdg-open so that run-tutorial uses the windows browser.&lt;/p&gt; &#xA;&lt;p&gt;To see where the source, tutorial and demo files are:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;CL-USER&amp;gt; (clog:clog-install-dir)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can the run the demos with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;CL-USER&amp;gt; (ql:quickload :clog)&#xA;CL-USER&amp;gt; (clog:run-demo 1)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The clog-db-admin tool can be run with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;CL-USER&amp;gt; (ql:quickload :clog/tools)&#xA;CL-USER&amp;gt; (clog-tools:clog-db-admin)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The CLOG Builder tool can be run with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;CL-USER&amp;gt; (ql:quickload :clog/tools)&#xA;CL-USER&amp;gt; (clog-tools:clog-builder)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also open a &#34;clog-repl&#34; window in your browser to play from the common-lisp repl:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;CL-USER&amp;gt; (in-package clog-user)&#xA;CLOG-USER&amp;gt; (clog-repl)&#xA;CLOG-USER&amp;gt; (setf (background-color *body*) &#34;beige&#34;)&#xA;CLOG-USER&amp;gt; (create-div *body* :content &#34;Hello World!&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The clog-repl URL is &lt;a href=&#34;http://127.0.0.1:8080/repl&#34;&gt;http://127.0.0.1:8080/repl&lt;/a&gt; &lt;em&gt;body&lt;/em&gt; will always refer to the last access of that URL.&lt;/p&gt; &#xA;&lt;p&gt;To open a browser with the CLOG manual:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;CL-USER&amp;gt; (clog:open-manual)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Work your way through the tutorials. You will see how quick and easy it is to be a CLOGer.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://rabbibotton.github.io/images/clog-builder.png&#34; alt=&#34;Image of clog-builder&#34;&gt; &lt;img src=&#34;https://rabbibotton.github.io/images/cb-web.png&#34; alt=&#34;Image of clog-builder-web&#34;&gt; &lt;img src=&#34;https://rabbibotton.github.io/images/clog-demo1.png&#34; alt=&#34;Image of demo1&#34;&gt; &lt;img src=&#34;https://rabbibotton.github.io/images/clog-demo2.png&#34; alt=&#34;Image of demo2&#34;&gt; &lt;img src=&#34;https://rabbibotton.github.io/images/clog-demo3.png&#34; alt=&#34;Image of demo3&#34;&gt; &lt;img src=&#34;https://rabbibotton.github.io/images/clog-db-admin.png&#34; alt=&#34;Image of clog-db-admin&#34;&gt; &lt;img src=&#34;https://rabbibotton.github.io/images/clog-web-containers.png&#34; alt=&#34;Image of clog-web-containers&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Here is a sample CLOG app:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(defpackage #:clog-user               ; Setup a package for our work to exist in&#xA;  (:use #:cl #:clog)                  ; Use the Common Lisp language and CLOG&#xA;  (:export start-tutorial))           ; Export as public the start-tutorial function&#xA;&#xA;(in-package :clog-user)               ; Tell the &#34;reader&#34; we are in the clog-user package&#xA;&#xA;&#xA;;; Define our CLOG application&#xA;(defun on-new-window (body)           ; Define the function called on-new-window&#xA;  &#34;On-new-window handler.&#34;            ; Optional docstring to describe function&#xA;&#xA;  (let ((hello-element                ; hello-element is a local variable that&#xA;                                      ; will be bound to our new CLOG-Element&#xA;&#xA;      ;; This application simply creates a CLOG-Element as a child to the&#xA;      ;; CLOG-body object in the browser window.&#xA;&#xA;      ;; A CLOG-Element represents a block of HTML (we will later see ways to&#xA;      ;; directly create buttons and all sorts of HTML elements in more&#xA;      ;; lisp-like ways with no knowledge of HTML or JavaScript.&#xA;      (create-child body &#34;&amp;lt;h1&amp;gt;Hello World! (click me!)&amp;lt;/h1&amp;gt;&#34;)))&#xA;&#xA;    (set-on-click hello-element      ; Now we set a function to handle clicks&#xA;          (lambda (obj)              ; In this case we use an anonymous function&#xA;            (setf (color hello-element) &#34;green&#34;))))))&#xA;&#xA;;; To see all the events one can set and the many properties and styles that&#xA;;; exist, refer to the CLOG manual or the file clog-element.lisp&#xA;&#xA;&#xA;(defun start-tutorial ()   ; Define the function called start-tutorial&#xA;  &#34;Start tutorial.&#34;        ; Optional docstring to describe function&#xA;&#xA;  ;; Initialize the CLOG system&#xA;  (initialize #&#39;on-new-window)&#xA;  ;; Set the function on-new-window to execute&#xA;  ;; every time a browser connection to our app.&#xA;  ;; #&#39; tells Common Lisp to pass the function&#xA;  ;; to intialize and not to execute it.&#xA;&#xA;&#xA;  ;; Open a browser to http://12.0.0.1:8080 - the default for CLOG apps&#xA;  (open-browser))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Other samples of CLOG on the web:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/byulparan/clog-collider-experience&#34;&gt;CLOG + cl-collider&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.reddit.com/r/lisp/comments/tl46of/would_it_be_cool_to_run_a_clog_app_on_mobile_you/&#34;&gt;CLOG on iOS and Android&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gist.github.com/mmontone/3a5a8a57675750e99ffb7fa64f40bc39#file-clog-learn-lisp&#34;&gt;Learn CLOG Dashboard&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;CLOG Builder Tutorials&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Chat App &lt;a href=&#34;https://www.reddit.com/r/lisp/comments/sj1tv5/clog_builder_tutorial_1_a_chat_app_from_start_to/&#34;&gt;https://www.reddit.com/r/lisp/comments/sj1tv5/clog_builder_tutorial_1_a_chat_app_from_start_to/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Building a Web Page &lt;a href=&#34;https://www.reddit.com/r/lisp/comments/sn8j77/clog_builder_tutorial_2_building_a_web_page/&#34;&gt;https://www.reddit.com/r/lisp/comments/sn8j77/clog_builder_tutorial_2_building_a_web_page/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Importing HTML in to Builder, Adding Pages and Hand Coding &lt;a href=&#34;https://www.reddit.com/r/lisp/comments/snvv0w/clog_builder_tutorial_3_importing_html_adding/&#34;&gt;https://www.reddit.com/r/lisp/comments/snvv0w/clog_builder_tutorial_3_importing_html_adding/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;CLOS-CONTACT - Using database controls demos a contact manager app in clog. &lt;a href=&#34;https://www.reddit.com/r/lisp/comments/t61sib/clog_builder_tutorial_4_a_complete_database_app/&#34;&gt;https://www.reddit.com/r/lisp/comments/t61sib/clog_builder_tutorial_4_a_complete_database_app/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;CLOG Tutorials&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rabbibotton/clog/main/tutorial/01-tutorial.lisp&#34;&gt;01-tutorial.lisp&lt;/a&gt; - Hello World&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rabbibotton/clog/main/tutorial/02-tutorial.lisp&#34;&gt;02-tutorial.lisp&lt;/a&gt; - Closures in CLOG&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rabbibotton/clog/main/tutorial/03-tutorial.lisp&#34;&gt;03-tutorial.lisp&lt;/a&gt; - Events fire in parallel&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rabbibotton/clog/main/tutorial/04-tutorial.lisp&#34;&gt;04-tutorial.lisp&lt;/a&gt; - The event target, reusing event handlers&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rabbibotton/clog/main/tutorial/05-tutorial.lisp&#34;&gt;05-tutorial.lisp&lt;/a&gt; - Using connection-data-item&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rabbibotton/clog/main/tutorial/06-tutorial.lisp&#34;&gt;06-tutorial.lisp&lt;/a&gt; - Tasking and events&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rabbibotton/clog/main/tutorial/07-tutorial.lisp&#34;&gt;07-tutorial.lisp&lt;/a&gt; - My first CLOG video game (and handling disconnects)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rabbibotton/clog/main/tutorial/08-tutorial.lisp&#34;&gt;08-tutorial.lisp&lt;/a&gt; - Mice Love Containers&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rabbibotton/clog/main/tutorial/09-tutorial.lisp&#34;&gt;09-tutorial.lisp&lt;/a&gt; - Tabs, panels, and forms&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rabbibotton/clog/main/tutorial/10-tutorial.lisp&#34;&gt;10-tutorial.lisp&lt;/a&gt; - Canvas&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rabbibotton/clog/main/tutorial/11-tutorial.lisp&#34;&gt;11-tutorial.lisp&lt;/a&gt; - Attaching to existing HTML&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rabbibotton/clog/main/tutorial/12-tutorial.lisp&#34;&gt;12-tutorial.lisp&lt;/a&gt; - Running a website in CLOG (routing)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rabbibotton/clog/main/tutorial/13-tutorial&#34;&gt;13-tutorial/&lt;/a&gt; - Flying Solo - A minimalist CLOG project&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rabbibotton/clog/main/tutorial/14-tutorial.lisp&#34;&gt;14-tutorial.lisp&lt;/a&gt; - Local (persistent) and Session client-side storage&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rabbibotton/clog/main/tutorial/15-tutorial.lisp&#34;&gt;15-tutorial.lisp&lt;/a&gt; - Multi-media&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rabbibotton/clog/main/tutorial/16-tutorial.lisp&#34;&gt;16-tutorial.lisp&lt;/a&gt; - Bootstrap 4, Loading css files and javascript&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rabbibotton/clog/main/tutorial/17-tutorial.lisp&#34;&gt;17-tutorial.lisp&lt;/a&gt; - W3.CSS layout example and Form submit methods&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rabbibotton/clog/main/tutorial/18-tutorial.lisp&#34;&gt;18-tutorial.lisp&lt;/a&gt; - Drag and Drop&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rabbibotton/clog/main/tutorial/19-tutorial.lisp&#34;&gt;19-tutorial.lisp&lt;/a&gt; - Using JavaScript components&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rabbibotton/clog/main/tutorial/20-tutorial.lisp&#34;&gt;20-tutorial.lisp&lt;/a&gt; - New CLOG plugin from JavaScript component&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rabbibotton/clog/main/tutorial/21-tutorial.lisp&#34;&gt;21-tutorial.lisp&lt;/a&gt; - New CLOG plugin in Common-Lisp&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rabbibotton/clog/main/tutorial/22-tutorial.lisp&#34;&gt;22-tutorial.lisp&lt;/a&gt; - CLOG GUI Menus and Desktop Look and Feel&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rabbibotton/clog/main/tutorial/23-tutorial.lisp&#34;&gt;23-tutorial.lisp&lt;/a&gt; - Using semaphores to wait for input&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rabbibotton/clog/main/tutorial/24-tutorial.lisp&#34;&gt;24-tutorial.lisp&lt;/a&gt; - CLOG WEB containers&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rabbibotton/clog/main/tutorial/25-tutorial.lisp&#34;&gt;25-tutorial.lisp&lt;/a&gt; - A &#34;local&#34; web app using CLOG WEB&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rabbibotton/clog/main/tutorial/26-tutorial.lisp&#34;&gt;26-tutorial.lisp&lt;/a&gt; - A web page and form with CLOG WEB&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rabbibotton/clog/main/tutorial/27-tutorial.lisp&#34;&gt;27-tutorial.lisp&lt;/a&gt; - Panel Box Layouts&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rabbibotton/clog/main/tutorial/28-tutorial&#34;&gt;28-tutorial/&lt;/a&gt; - CLOG Builder Hello - A minimalist CLOG Builder project&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rabbibotton/clog/main/tutorial/29-tutorial.lisp&#34;&gt;29-tutorial.lisp&lt;/a&gt; - Presentations (and jQuery) - linking lisp objects to clog objects&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rabbibotton/clog/main/tutorial/30-tutorial.lisp&#34;&gt;30-tutorial.lisp&lt;/a&gt; - Instant websites - clog-web-site&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rabbibotton/clog/main/tutorial/31-tutorial.lisp&#34;&gt;31-tutorial.lisp&lt;/a&gt; - Database and Authority based websites - clog-web-dbi and clog-auth&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rabbibotton/clog/main/tutorial/32-tutorial.lisp&#34;&gt;32-tutorial.lisp&lt;/a&gt; - Database Managed Content websites - clog-web-content&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rabbibotton/clog/main/tutorial/33-tutorial.lisp&#34;&gt;33-tutorial.lisp&lt;/a&gt; - with-clog-create - Using a declartive syntax for GUIs&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;CLOG Demos&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rabbibotton/clog/main/demos/01-demo.lisp&#34;&gt;01-demo.lisp&lt;/a&gt; - Sparkey the Snake Game&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rabbibotton/clog/main/demos/02-demo.lisp&#34;&gt;02-demo.lisp&lt;/a&gt; - Chat - Private instant messenger&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rabbibotton/clog/main/demos/03-demo.lisp&#34;&gt;03-demo.lisp&lt;/a&gt; - IDE - A very simple common lisp IDE&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rabbibotton/clog/main/demos/04-demo.lisp&#34;&gt;04-demo.lisp&lt;/a&gt; - CMS Website - A very simple database driven website&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Tool Summary&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;clog-db-admin - SQLite3 admin tool&lt;/li&gt; &#xA; &lt;li&gt;clog-builder - Rapid visual interactive development for Web and GUIs&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;High Order Extensions to CLOG&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;clog-gui - Desktop over the web&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Menus&lt;/li&gt; &#xA;   &lt;li&gt;Windowing system&lt;/li&gt; &#xA;   &lt;li&gt;Modal windows, Keep-on-top windows&lt;/li&gt; &#xA;   &lt;li&gt;File Load / Save dialogs&lt;/li&gt; &#xA;   &lt;li&gt;Alert, Input and Confirmation dialogs&lt;/li&gt; &#xA;   &lt;li&gt;Form dialogs&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;clog-web - Webpage creation&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Auto column layouts&lt;/li&gt; &#xA;   &lt;li&gt;12 Point Grid System layouts&lt;/li&gt; &#xA;   &lt;li&gt;Content containers&lt;/li&gt; &#xA;   &lt;li&gt;Panels&lt;/li&gt; &#xA;   &lt;li&gt;Sidebar menus&lt;/li&gt; &#xA;   &lt;li&gt;Compositor containers&lt;/li&gt; &#xA;   &lt;li&gt;Menus&lt;/li&gt; &#xA;   &lt;li&gt;Alerts&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;clog-web-site - Instant themed websites with plugins:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;clog-web-page - create a theme based page&lt;/li&gt; &#xA;   &lt;li&gt;clog-web-dbi - database driven websites (uses clog-auth)&lt;/li&gt; &#xA;   &lt;li&gt;clog-web-forms - Instant web forms&lt;/li&gt; &#xA;   &lt;li&gt;clog-web-themes - basic themes for clog based websites&lt;/li&gt; &#xA;   &lt;li&gt;clog-web-content - database driven content,tags, comments (in progress)&lt;/li&gt; &#xA;   &lt;li&gt;clog-web-blog - instant blogs (in progress)&lt;/li&gt; &#xA;   &lt;li&gt;clog-web-cart - instant shopping carts (future)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;clog-panels - Quick application layouts&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;clog-presentations - bi-directional linking of Lisp Objects and CLOG Objects&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;clog-jquery - DOM queries&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;clog-data - Move data to and from groups of controls&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;SQL writer helpers for basic SQL&lt;/li&gt; &#xA;   &lt;li&gt;CLOG-Database - Database control for CLOG Builder&lt;/li&gt; &#xA;   &lt;li&gt;CLOG-One-Row - One row at a time table access auto binds to controls in CLOG Builder&lt;/li&gt; &#xA;   &lt;li&gt;CLOG-Lookup - Version of the select control (dropdown and listbox) that are database connected&lt;/li&gt; &#xA;   &lt;li&gt;CLOG-DB-Table - Version of html table that are database connected&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;clog-auth - Authentication and authorization framework&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;(See &lt;a href=&#34;https://raw.githubusercontent.com/rabbibotton/clog/main/FUTURE.md&#34;&gt;FUTURE.md&lt;/a&gt; for future plans)&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>dimitri/pgloader</title>
    <updated>2022-06-01T02:05:27Z</updated>
    <id>tag:github.com,2022-06-01:/dimitri/pgloader</id>
    <link href="https://github.com/dimitri/pgloader" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Migrate to PostgreSQL in a single command!&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;PGLoader&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/dimitri/pgloader&#34;&gt;&lt;img src=&#34;https://travis-ci.org/dimitri/pgloader.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitter.im/dimitri/pgloader?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/Join%20Chat.svg?sanitize=true&#34; alt=&#34;Join the chat at https://gitter.im/dimitri/pgloader&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cloud.docker.com/repository/docker/dimitri/pgloader&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/cloud/build/dimitri/pgloader.svg?sanitize=true&#34; alt=&#34;Docker Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://pgloader.readthedocs.io/en/latest/&#34;&gt;&lt;img src=&#34;https://readthedocs.org/projects/pgloader/badge/?version=latest&amp;amp;style=plastic&#34; alt=&#34;Read The Docs Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;pgloader is a data loading tool for PostgreSQL, using the &lt;code&gt;COPY&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;p&gt;Its main advantage over just using &lt;code&gt;COPY&lt;/code&gt; or &lt;code&gt;\copy&lt;/code&gt;, and over using a &lt;em&gt;Foreign Data Wrapper&lt;/em&gt;, is its transaction behaviour, where &lt;em&gt;pgloader&lt;/em&gt; will keep a separate file of rejected data, but continue trying to &lt;code&gt;copy&lt;/code&gt; good data in your database.&lt;/p&gt; &#xA;&lt;p&gt;The default PostgreSQL behaviour is transactional, which means that &lt;em&gt;any&lt;/em&gt; erroneous line in the input data (file or remote database) will stop the entire bulk load for the table.&lt;/p&gt; &#xA;&lt;p&gt;pgloader also implements data reformatting, a typical example of that being the transformation of MySQL datestamps &lt;code&gt;0000-00-00&lt;/code&gt; and &lt;code&gt;0000-00-00 00:00:00&lt;/code&gt; to PostgreSQL &lt;code&gt;NULL&lt;/code&gt; value (because our calendar never had a &lt;em&gt;year zero&lt;/em&gt;).&lt;/p&gt; &#xA;&lt;h2&gt;Versioning&lt;/h2&gt; &#xA;&lt;p&gt;pgloader version 1.x is quite old and was developed in &lt;code&gt;TCL&lt;/code&gt;. When faced with maintaining that code, the new emerging development team (hi!) picked &lt;code&gt;python&lt;/code&gt; instead because that made sense at the time. So pgloader version 2.x was written in python.&lt;/p&gt; &#xA;&lt;p&gt;The current version of pgloader is the 3.x series, which is written in &lt;a href=&#34;http://cliki.net/&#34;&gt;Common Lisp&lt;/a&gt; for better development flexibility, runtime performance, and support of real threading.&lt;/p&gt; &#xA;&lt;p&gt;The versioning is now following the Emacs model, where any X.0 release number means you&#39;re using a development version (alpha, beta, or release candidate). The next stable versions are going to be &lt;code&gt;3.1&lt;/code&gt; then &lt;code&gt;3.2&lt;/code&gt; etc.&lt;/p&gt; &#xA;&lt;p&gt;When using a development snapshot rather than a released version the version number includes the git hash (in its abbreviated form):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;pgloader version &#34;3.0.99&#34;&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Release candidate 9 for pgloader version 3.1, with a &lt;em&gt;git tag&lt;/em&gt; named &lt;code&gt;v3.0.99&lt;/code&gt; so that it&#39;s easy to checkout the same sources as the released code.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;pgloader version &#34;3.0.fecae2c&#34;&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Development snapshot again &lt;em&gt;git hash&lt;/em&gt; &lt;code&gt;fecae2c&lt;/code&gt;. It&#39;s possible to have the same sources on another setup with using the git command &lt;code&gt;git checkout fecae2c&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;pgloader version &#34;3.1.0&#34;&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Stable release.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;LICENCE&lt;/h2&gt; &#xA;&lt;p&gt;pgloader is available under &lt;a href=&#34;http://www.postgresql.org/about/licence/&#34;&gt;The PostgreSQL Licence&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;INSTALL&lt;/h2&gt; &#xA;&lt;p&gt;You can install pgloader directly from &lt;a href=&#34;https://wiki.postgresql.org/wiki/Apt&#34;&gt;apt.postgresql.org&lt;/a&gt; and from official debian repositories, see &lt;a href=&#34;https://packages.debian.org/search?keywords=pgloader&#34;&gt;packages.debian.org/pgloader&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ apt-get install pgloader&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also use a &lt;strong&gt;docker&lt;/strong&gt; image for pgloader at &lt;a href=&#34;https://hub.docker.com/r/dimitri/pgloader/&#34;&gt;https://hub.docker.com/r/dimitri/pgloader/&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ docker pull dimitri/pgloader&#xA;$ docker run --rm --name pgloader dimitri/pgloader:latest pgloader --version&#xA;$ docker run --rm --name pgloader dimitri/pgloader:latest pgloader --help&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Build from sources&lt;/h2&gt; &#xA;&lt;p&gt;pgloader is now a Common Lisp program, tested using the &lt;a href=&#34;http://sbcl.org/&#34;&gt;SBCL&lt;/a&gt; (&amp;gt;= 1.2.5) and &lt;a href=&#34;http://ccl.clozure.com/&#34;&gt;Clozure CL&lt;/a&gt; implementations with &lt;a href=&#34;http://www.quicklisp.org/beta/&#34;&gt;Quicklisp&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;When building from sources, you should always build from the current git &lt;code&gt;HEAD&lt;/code&gt; as it&#39;s basically the only source that is managed in a way to ensure it builds aginst current set of dependencies versions.&lt;/p&gt; &#xA;&lt;h3&gt;Building from sources on debian&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ apt-get install sbcl unzip libsqlite3-dev make curl gawk freetds-dev libzip-dev&#xA;$ cd /path/to/pgloader&#xA;$ make pgloader&#xA;$ ./build/bin/pgloader --help&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Building from sources on RedHat/CentOS&lt;/h3&gt; &#xA;&lt;p&gt;See &#34;Redhat / CentOS&#34; in &lt;a href=&#34;https://raw.githubusercontent.com/dimitri/pgloader/master/INSTALL.md#redhat--centos&#34;&gt;INSTALL.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Building from sources on macOS&lt;/h3&gt; &#xA;&lt;p&gt;When using &lt;a href=&#34;https://brew.sh&#34;&gt;brew&lt;/a&gt;, it should be a simple &lt;code&gt;brew install --HEAD pgloader&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;When using &lt;a href=&#34;https://www.macports.org&#34;&gt;macports&lt;/a&gt;, then we have a situation to deal with with shared objects pgloader depends on, as reported in issue #161 at &lt;a href=&#34;https://github.com/dimitri/pgloader/issues/161#issuecomment-201162647&#34;&gt;https://github.com/dimitri/pgloader/issues/161#issuecomment-201162647&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;I was able to get a clean build without having to disable compression after symlinking /usr/local/lib to /opt/local/lib. Note that I did not have anything installed to /usr/local/lib so I didn&#39;t lose anything here.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Building from sources on Windows&lt;/h3&gt; &#xA;&lt;p&gt;Building pgloader on Windows is supported, thanks to Common Lisp implementations being available on that platform, and to the Common Lisp Standard for making it easy to write actually portable code.&lt;/p&gt; &#xA;&lt;p&gt;It is recommended to have a look at the issues labelled with &lt;em&gt;Windows support&lt;/em&gt; if you run into trouble when building pgloader:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/dimitri/pgloader/issues?utf8=%E2%9C%93&amp;amp;q=label%3A%22Windows%20support%22%20&#34;&gt;https://github.com/dimitri/pgloader/issues?utf8=✓&amp;amp;q=label%3A%22Windows%20support%22%20&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Building Docker image from sources&lt;/h3&gt; &#xA;&lt;p&gt;You can build a Docker image from source using SBCL by default:&lt;/p&gt; &#xA;&lt;p&gt;$ docker build .&lt;/p&gt; &#xA;&lt;p&gt;Or Clozure CL (CCL):&lt;/p&gt; &#xA;&lt;p&gt;$ docker build -f Dockerfile.ccl .&lt;/p&gt; &#xA;&lt;h2&gt;More options when building from source&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;Makefile&lt;/code&gt; target &lt;code&gt;pgloader&lt;/code&gt; knows how to produce a Self Contained Binary file for pgloader, found at &lt;code&gt;./build/bin/pgloader&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ make pgloader&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default, the &lt;code&gt;Makefile&lt;/code&gt; uses &lt;a href=&#34;http://sbcl.org/&#34;&gt;SBCL&lt;/a&gt; to compile your binary image, though it&#39;s possible to build using &lt;a href=&#34;http://ccl.clozure.com/&#34;&gt;CCL&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ make CL=ccl pgloader&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If using &lt;code&gt;SBCL&lt;/code&gt; and it supports core compression, the make process will use it to generate a smaller binary. To force disabling core compression, you may use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ make COMPRESS_CORE=no pgloader&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;--compress-core&lt;/code&gt; is unique to SBCL, so not used when &lt;code&gt;CC&lt;/code&gt; is different from the &lt;code&gt;sbcl&lt;/code&gt; value.&lt;/p&gt; &#xA;&lt;p&gt;You can also tweak the default amount of memory that the &lt;code&gt;pgloader&lt;/code&gt; image will allow itself using when running through your data (don&#39;t ask for more than your current RAM tho):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ make DYNSIZE=8192 pgloader&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;make pgloader&lt;/code&gt; command when successful outputs a &lt;code&gt;./build/bin/pgloader&lt;/code&gt; file for you to use.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;You can either give a command file to pgloader or run it all from the command line, see the &lt;a href=&#34;https://pgloader.readthedocs.io/en/latest/tutorial/tutorial.html#pgloader-quick-start&#34;&gt;pgloader quick start&lt;/a&gt; on &lt;a href=&#34;https://pgloader.readthedocs.io&#34;&gt;https://pgloader.readthedocs.io&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ./build/bin/pgloader --help&#xA;$ ./build/bin/pgloader &amp;lt;file.load&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For example, for a full migration from SQLite:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ createdb newdb&#xA;$ pgloader ./test/sqlite/sqlite.db postgresql:///newdb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or for a full migration from MySQL, including schema definition (tables, indexes, foreign keys, comments) and parallel loading of the corrected data:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ createdb pagila&#xA;$ pgloader mysql://user@localhost/sakila postgresql:///pagila&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>stumpwm/stumpwm</title>
    <updated>2022-06-01T02:05:27Z</updated>
    <id>tag:github.com,2022-06-01:/stumpwm/stumpwm</id>
    <link href="https://github.com/stumpwm/stumpwm" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The Stump Window Manager&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://stumpwm.github.io/images/stumpwm-logo-stripe.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;The Stump Window Manager&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://travis-ci.org/stumpwm/stumpwm.svg?sanitize=true&#34; alt=&#34;&#34;&gt; &lt;a href=&#34;https://gitter.im/stumpwm/community?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/stumpwm/community.svg?sanitize=true&#34; alt=&#34;Gitter&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;StumpWM is a window manager written entirely in Common Lisp. It attempts to be highly customizable while relying entirely on the keyboard for input. You will not find buttons, icons, title bars, tool bars, or any of the other conventional GUI widgets.&lt;/p&gt; &#xA;&lt;p&gt;These design decisions reflect the growing popularity of productive, customizable lisp based systems.&lt;/p&gt; &#xA;&lt;h2&gt;Philosophy&lt;/h2&gt; &#xA;&lt;p&gt;StumpWM is a &#34;everything-and-the-kitchen-sink WM&#34; or &#34;the Emacs of WMs.&#34;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;StumpWM:Windows::Emacs:Text&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;StumpWM is &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Hackable&lt;/li&gt; &#xA;   &lt;li&gt;Written in Common Lisp&lt;/li&gt; &#xA;   &lt;li&gt;A multi paradigm window manager&lt;/li&gt; &#xA;   &lt;li&gt;A Superior window managing experience&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;StumpWM is &lt;em&gt;not&lt;/em&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Minimalist&lt;/li&gt; &#xA;   &lt;li&gt;Narrow scope&lt;/li&gt; &#xA;   &lt;li&gt;Configured by editing the source directly&lt;/li&gt; &#xA;   &lt;li&gt;A full blown desktop environment&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you want a minimalist tiling window manager, then StumpWM is &lt;em&gt;not&lt;/em&gt; what you&#39;re looking for. The code base is ~15k lines, the binaries produced are ~60mb.&lt;/p&gt; &#xA;&lt;p&gt;StumpWM manages windows the way emacs manages buffers, or the way screen manages terminals. If you want a flexible, customizable, hackable desktop experience, look no further.&lt;/p&gt; &#xA;&lt;h1&gt;Build &amp;amp; Start Stumpwm&lt;/h1&gt; &#xA;&lt;h2&gt;Prerequisites&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://sbcl.org&#34;&gt;SBCL&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;quicklisp (for obtaining the following dependencies; not needed if you use your distribution&#39;s package manager.)&lt;/li&gt; &#xA; &lt;li&gt;clx&lt;/li&gt; &#xA; &lt;li&gt;cl-ppcre&lt;/li&gt; &#xA; &lt;li&gt;alexandria&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The recommended way to install the dependencies is using Quicklisp. Follow the instructions at &lt;a href=&#34;http://www.quicklisp.org/&#34;&gt;http://www.quicklisp.org/&lt;/a&gt; to install it. In short:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ curl -O https://beta.quicklisp.org/quicklisp.lisp&#xA;$ sbcl --load quicklisp.lisp&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then at the REPL:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(quicklisp-quickstart:install)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Make sure you have added it to your lisp init file using:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt; (ql:add-to-init-file)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, in a repl:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt; (ql:quickload &#34;clx&#34;)&#xA; (ql:quickload &#34;cl-ppcre&#34;)&#xA; (ql:quickload &#34;alexandria&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: The recommended way to install SBCL is by downloading one of their pre-built binaries available in their &lt;a href=&#34;http://sbcl.org/platform-table.html&#34;&gt;web page&lt;/a&gt; or build it from source. Please do &lt;em&gt;not&lt;/em&gt; install SBCL using your distributions package manager, especially Ubuntu. If you do so it is likely that you&#39;ll run into problems when building StumpWM due to using obsolete versions of the dependencies.&lt;/p&gt; &#xA;&lt;h2&gt;Building&lt;/h2&gt; &#xA;&lt;p&gt;Building stumpwm from git requires that you build the configure script:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt; ./autogen.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then run it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt; ./configure&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now build it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt; make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If all goes well, you should have a stumpwm binary now. You can run the binary from where it is (starting it with X) or install it, along with the .info documentation, with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt; make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now that you have a binary, call it from your ~/.xinitrc file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt; # The default path is /usr/local/bin/stumpwm&#xA; echo /path/to/stumpwm &amp;gt;&amp;gt; ~/.xinitrc&#xA; startx&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Hopefully that will put you in X running stumpwm! See &lt;a href=&#34;https://github.com/sabetts/stumpwm/wiki/StartUp&#34;&gt;StartUp on the wiki&lt;/a&gt; for more examples.&lt;/p&gt; &#xA;&lt;h1&gt;Contributing&lt;/h1&gt; &#xA;&lt;p&gt;Pull requests are always welcome! Here are some guidelines to ensure that your contribution gets merged in a timely manner:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Do&#39;s &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Add your name to the list of AUTHORS with your pull request.&lt;/li&gt; &#xA;   &lt;li&gt;Preserve comments or docstrings explaining what code does, and update them if your patch changes them in a significant way&lt;/li&gt; &#xA;   &lt;li&gt;Try to follow an &#34;80 column rule.&#34; The current code base does not follow this all the time, so don&#39;t use it as an example&lt;/li&gt; &#xA;   &lt;li&gt;If you export a symbol, you &lt;em&gt;must&lt;/em&gt; add it to the manual.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stumpwm/stumpwm/master/(http://web.archive.org/web/20160101153032/http://people.ace.ed.ac.uk/staff/medward2/class/moz/cm/doc/contrib/lispstyle.html)&#34;&gt;Use lisp idioms&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;If you are working on a major change to the internals, keep us informed on stumpwm-devel! Also, it will probably help if the changes are made and then incrementally applied to the codebase in order to avoid introducing show-stopping bugs.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Do not&#39;s &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Include Emacs local variables&lt;/li&gt; &#xA;   &lt;li&gt;Change whitespace&lt;/li&gt; &#xA;   &lt;li&gt;Write lots of code without supporting comments/documentation&lt;/li&gt; &#xA;   &lt;li&gt;Delete comments or docstrings (yes this is a duplicate of above!)&lt;/li&gt; &#xA;   &lt;li&gt;Export symbols from packages that aren&#39;t widely useful (many times a little more thought will reveal how to implement your internal change without having to export/break encapsulation)&lt;/li&gt; &#xA;   &lt;li&gt;Make stylistic changes that suit your coding style/way of thinking&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you aren&#39;t a lisp hacker, you can contribute in the form of documenting and organizing the wiki. There&#39;s a lot of information floating around; if you find it where you didn&#39;t expect it, move or link to it in a more logical place.&lt;/p&gt; &#xA;&lt;h1&gt;Wishlist&lt;/h1&gt; &#xA;&lt;p&gt;Fancy yourself a lisp hacker? Here&#39;s a wishlist of features for the StumpWM universe (in no particular order):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;float-splits (ie allow floating windows over tiled ones)&lt;/li&gt; &#xA; &lt;li&gt;Float windows within parent applications (specifically dialogs in gimp or firefox).&lt;/li&gt; &#xA; &lt;li&gt;tab-list showing the contents of the current frame at the side, top, or bottom of the frame&lt;/li&gt; &#xA; &lt;li&gt;Emacs&#39; iswitchb function implemented in emacs &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Re-arranging windows between groups&lt;/li&gt; &#xA;   &lt;li&gt;Killing windows&lt;/li&gt; &#xA;   &lt;li&gt;Marking windows for batch operations&lt;/li&gt; &#xA;   &lt;li&gt;Deleting/adding groups&lt;/li&gt; &#xA;   &lt;li&gt;Import data from stumpwm to emacs, use an emacs minor mode to implement the above features, then export the data back to stumpwm and let stumpwm perform the appropriate actions&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Emacs&#39; completing-read-multiple function&lt;/li&gt; &#xA; &lt;li&gt;Dynamic tiling&lt;/li&gt; &#xA; &lt;li&gt;Lock Screen (with support for leaving notes, bonus points if emacs is involved)&lt;/li&gt; &#xA; &lt;li&gt;Wallpapers! (support pulling from remote sources, changing based on timers, and other hacky features)&lt;/li&gt; &#xA; &lt;li&gt;Shutdown, restart, suspend, and hibernate functions that don&#39;t require root access&lt;/li&gt; &#xA; &lt;li&gt;Revamped, mouse-friendly mode-line. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Support fixed number of chars for window titles&lt;/li&gt; &#xA;   &lt;li&gt;Dynamically trim window titles to fit them all on the mode-line&lt;/li&gt; &#xA;   &lt;li&gt;Split the mode-line into multiple cells for containing different information&lt;/li&gt; &#xA;   &lt;li&gt;Implement widget icons to indicate system status (new mail, low battery, network etc)&lt;/li&gt; &#xA;   &lt;li&gt;Support raising windows when left-clicked, closing/killing when right-clicked&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Help&lt;/h1&gt; &#xA;&lt;p&gt;There&#39;s a texinfo manual, stumpwm.texi. The build scripts generate an info file you can read in emacs or with the `info&#39; program. The manual for the latest git version (may be slightly out of date) is available to read online at: &lt;a href=&#34;https://stumpwm.github.io/&#34;&gt;The Manual&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;And, as in Emacs, you can always get documentation with:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Key&lt;/th&gt; &#xA;   &lt;th&gt;Help&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;C-t h v&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Variables&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;C-t h f&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Functions&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;C-t h k&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Key sequences&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;C-t h c&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Commands&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;C-t h w&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Find key sequences for a command&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;For other stuff (tips tricks and examples) visit the &lt;a href=&#34;https://github.com/stumpwm/stumpwm/wiki&#34;&gt;stumpwm wiki&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;There&#39;s a &lt;strong&gt;#stumpwm&lt;/strong&gt; channel on &lt;a href=&#34;https://libera.chat&#34;&gt;irc.libera.chat&lt;/a&gt;, too.&lt;/p&gt; &#xA;&lt;p&gt;Finally, there&#39;s our mailing list (click to sign up) &lt;a href=&#34;https://lists.nongnu.org/mailman/listinfo/stumpwm-devel&#34;&gt;stumpwm-devel@nongnu.org&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>sbcl/sbcl</title>
    <updated>2022-06-01T02:05:27Z</updated>
    <id>tag:github.com,2022-06-01:/sbcl/sbcl</id>
    <link href="https://github.com/sbcl/sbcl" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Mirror of Steel Bank Common Lisp (SBCL)&#39;s official repository&lt;/p&gt;&lt;hr&gt;&lt;p&gt;GENERAL INFORMATION&lt;/p&gt; &#xA;&lt;p&gt;Welcome to SBCL.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;d like to install or build the system, see the &#34;INSTALL&#34; file.&lt;/p&gt; &#xA;&lt;p&gt;To find out more about who created the system, see the &#34;CREDITS&#34; file.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;d like information about the legalities of copying the system, see the &#34;COPYING&#34; file.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;d like more information about using the system, see the man page, &#34;sbcl.1&#34;, or the user manual in the &#34;doc/manual&#34; subdirectory of the distribution. (The user manual is maintained as Texinfo in the source distribution; HTML version is available for download, and &#34;INSTALL&#34; describes how to build the Texinfo version in HTML and PDF.)&lt;/p&gt; &#xA;&lt;p&gt;The system is a work in progress. See the &#34;TODO&#34; file in the source distribution for some highlights.&lt;/p&gt; &#xA;&lt;p&gt;The &#34;BUGS&#34; file lists current known bugs.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;d like to make suggestions, report a bug, or help to improve the system, please send mail to one of the mailing lists: &lt;a href=&#34;mailto:sbcl-help@lists.sourceforge.net&#34;&gt;sbcl-help@lists.sourceforge.net&lt;/a&gt; &lt;a href=&#34;mailto:sbcl-devel@lists.sourceforge.net&#34;&gt;sbcl-devel@lists.sourceforge.net&lt;/a&gt; Note that as a spam reduction measure you must subscribe to the lists before you can post.&lt;/p&gt; &#xA;&lt;p&gt;The &#34;HACKING&#34; file has more details regarding hacking on and contributing to SBCL.&lt;/p&gt; &#xA;&lt;p&gt;SYSTEM-SPECIFIC HINTS&lt;/p&gt; &#xA;&lt;p&gt;for OpenBSD 6.0 and newer: SBCL must be built and run from a filesystem with the &#34;wxallowed&#34; mount option, such as /usr/local in the default install.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>atlas-engineer/nyxt</title>
    <updated>2022-06-01T02:05:27Z</updated>
    <id>tag:github.com,2022-06-01:/atlas-engineer/nyxt</id>
    <link href="https://github.com/atlas-engineer/nyxt" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Nyxt - the hacker&#39;s power-browser.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#+html: &lt;img src=&#34;https://nyxt.atlas.engineer/static/image/nyxt_256x256.png&#34; align=&#34;right&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Nyxt browser&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;Nyxt&lt;/em&gt; is a keyboard-driven web browser designed for power users. Inspired by Emacs and Vim, it has familiar keybindings ([[https://en.wikipedia.org/wiki/Emacs][Emacs]], [[https://en.wikipedia.org/wiki/Vim_(text_editor)][vi]], [[https://en.wikipedia.org/wiki/IBM_Common_User_Access][CUA]]), and is infinitely extensible in Lisp.&lt;/p&gt; &#xA;&lt;p&gt;If you like Nyxt and you would like to help future development, please give us a star, spread the word, and support us on [[https://www.patreon.com/nyxt][Patreon]], thank you!&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Attention:&lt;/em&gt; Nyxt is under active development. Feel free to [[https://github.com/atlas-engineer/nyxt/issues][report]] bugs, instabilities or feature wishes.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;#+html: &lt;/p&gt;&#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a href=&#34;http://nyxt.atlas.engineer/&#34;&gt;Homepage&lt;/a&gt; | &#xA; &lt;a href=&#34;https://nyxt.atlas.engineer/download&#34;&gt;Downloads&lt;/a&gt; | &#xA; &lt;a href=&#34;https://nyxt.atlas.engineer/articles&#34;&gt;Articles&lt;/a&gt; | &#xA; &lt;a href=&#34;https://store.nyxt.atlas.engineer/&#34;&gt;Store&lt;/a&gt; | &#xA; &lt;a href=&#34;https://github.com/atlas-engineer/nyxt/raw/master/documents/README.org&#34;&gt;Developer&#39;s Manual&lt;/a&gt; | &#xA; &lt;a href=&#34;https://discourse.atlas.engineer/&#34;&gt;Forum&lt;/a&gt; | &#xA; &lt;a href=&#34;https://kiwiirc.com/nextclient/irc.libera.chat/nyxt&#34;&gt;Chat&lt;/a&gt; &#xA;&lt;/div&gt;&#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Features For an exhaustive description of all of the features, please refer to the manual.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Fast tab switching&lt;/p&gt; &#xA;&lt;p&gt;Switch easily between your open tabs via fuzzy search. If you are looking for &lt;del&gt;&lt;a href=&#34;https://www.example.com&#34;&gt;https://www.example.com&lt;/a&gt;&lt;/del&gt;, you could type in &lt;del&gt;ele&lt;/del&gt;, &lt;del&gt;exa&lt;/del&gt;, &lt;del&gt;epl&lt;/del&gt;, or any other matching series of letters.&lt;/p&gt; &#xA;&lt;p&gt;#+html: &lt;img src=&#34;https://nyxt.atlas.engineer/static/image/switch-buffer.png?&#34; align=&#34;center&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;** Multiple selection&lt;/p&gt; &#xA;&lt;p&gt;Commands can accept multiple inputs, allowing you to quickly perform an operation against multiple objects. In the example below we search for cactuses, and open up several images simultaneously:&lt;/p&gt; &#xA;&lt;p&gt;#+html: &lt;img src=&#34;https://nyxt.atlas.engineer/static/image/multi-select.png?&#34; align=&#34;center&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;** Powerful bookmarks&lt;/p&gt; &#xA;&lt;p&gt;Bookmark a page with tags. Search bookmarks with compound queries. Capture more data about your bookmarks, and group and wrangle them in any way you like.&lt;/p&gt; &#xA;&lt;p&gt;#+html: &lt;img src=&#34;https://nyxt.atlas.engineer/static/image/bookmark.png?&#34; align=&#34;center&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;** Multi tab search&lt;/p&gt; &#xA;&lt;p&gt;Search multiple tabs at the same time, and view all the results in a single window. Jump quickly through your open tabs to find what you need.&lt;/p&gt; &#xA;&lt;p&gt;#+html: &lt;img src=&#34;https://nyxt.atlas.engineer/static/image/multi-search.png?&#34; align=&#34;center&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;** History as a tree&lt;/p&gt; &#xA;&lt;p&gt;History is represented as a tree that you can traverse. Smarter than the &#34;forwards-backwards&#34; abstraction found in other browsers, the tree makes sure you never lose track of where you&#39;ve been.&lt;/p&gt; &#xA;&lt;p&gt;#+html: &lt;img src=&#34;https://nyxt.atlas.engineer/static/image/history.png?&#34; align=&#34;center&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Getting started ** Install Nyxt&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Nyxt supports:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;GNU/Linux&lt;/li&gt; &#xA; &lt;li&gt;macOS (unofficial)&lt;/li&gt; &#xA; &lt;li&gt;FreeBSD (unofficial)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Nyxt has engine support for WebKit and &lt;em&gt;experimental support&lt;/em&gt; for WebEngine/Blink.&lt;/p&gt; &#xA;&lt;p&gt;Please find pre-built binaries at [[https://nyxt.atlas.engineer/download][Nyxt&#39;s downloads page]]. Nyxt is available on the following platforms:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Alpine.&lt;/li&gt; &#xA; &lt;li&gt;Debian and derivatives such as Ubuntu and Linux Mint.&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/atlas-engineer/ports][MacPorts]].&lt;/li&gt; &#xA; &lt;li&gt;[[https://archlinux.org/][Arch Linux]]: Install with =pacman -Syu nyxt=.&lt;/li&gt; &#xA; &lt;li&gt;[[https://nixos.org/nix/][Nix]]: Install with =nix-env --install nyxt=.&lt;/li&gt; &#xA; &lt;li&gt;[[https://guix.gnu.org][Guix]]: Install with =guix install nyxt=.&lt;/li&gt; &#xA; &lt;li&gt;[[https://voidlinux.org/][Void]]: Install with =xbps-install nyxt=.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To install from source, please refer to the [[file:documents/README.org][developer&#39;s manual]].&lt;/p&gt; &#xA;&lt;p&gt;** Documentation &amp;amp; Customization&lt;/p&gt; &#xA;&lt;p&gt;For full documentation about Nyxt, how it works, and how to extend it please refer to the embedded manual. To get started, run the =manual= command (press =control= + =space=, type =manual= and confirm with =return=).&lt;/p&gt; &#xA;&lt;p&gt;If you want to help with development, or build Nyxt from source, read the developer&#39;s documentation at [[file:documents/README.org][documents/README.org]].&lt;/p&gt; &#xA;&lt;p&gt;** History of changes&lt;/p&gt; &#xA;&lt;p&gt;If you are running a recent version of Nyxt please run the =changelog= command. For older versions, please refer to the [[https://github.com/atlas-engineer/nyxt/blob/2.2.1/documents/CHANGELOG.org][CHANGELOG]].&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>kowaraj/CommonLisp</title>
    <updated>2022-06-01T02:05:27Z</updated>
    <id>tag:github.com,2022-06-01:/kowaraj/CommonLisp</id>
    <link href="https://github.com/kowaraj/CommonLisp" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>aleksandr-vin/Google-Code-Jam-Practice</title>
    <updated>2022-06-01T02:05:27Z</updated>
    <id>tag:github.com,2022-06-01:/aleksandr-vin/Google-Code-Jam-Practice</id>
    <link href="https://github.com/aleksandr-vin/Google-Code-Jam-Practice" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Source codes for Google Code Jam practicing&lt;/p&gt;&lt;hr&gt;&lt;p&gt;This is a repository for practicing for Google Code Jam 2010.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>kishorekdty/scheme1</title>
    <updated>2022-06-01T02:05:27Z</updated>
    <id>tag:github.com,2022-06-01:/kishorekdty/scheme1</id>
    <link href="https://github.com/kishorekdty/scheme1" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;scheme1&lt;/h1&gt;</summary>
  </entry>
  <entry>
    <title>mirkov/verbose-calcs</title>
    <updated>2022-06-01T02:05:27Z</updated>
    <id>tag:github.com,2022-06-01:/mirkov/verbose-calcs</id>
    <link href="https://github.com/mirkov/verbose-calcs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Provide environment that prints computation results as they are performed&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#+title: &lt;del&gt;verbose-calcs&lt;/del&gt; package&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Introduction and Background This package provides functionality for defining calculations that at the same time generate textual output with their results. It provides two sets commands:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;del&gt;vlet&lt;/del&gt; and &lt;del&gt;vlet*&lt;/del&gt; establish and prints out bindings, and then evaluate the body&lt;/li&gt; &#xA;   &lt;li&gt;&lt;del&gt;defvfun&lt;/del&gt; is a &lt;del&gt;defun&lt;/del&gt; that prints out argument values and a header prior to executing the body&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;del&gt;vlet&lt;/del&gt; and &lt;del&gt;vlet*&lt;/del&gt; This is a &lt;del&gt;let(*)&lt;/del&gt;-like environment. It establishes bindings. As each binding is established, its value is printed out.&lt;/p&gt; &lt;p&gt;If no bindings are established, &lt;del&gt;body&lt;/del&gt; is executed inside a &lt;del&gt;progn&lt;/del&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;del&gt;defvfun&lt;/del&gt; Defines a function with keyword arguments only. The defaults can be specified when the function is defined.&lt;/p&gt; &lt;p&gt;Upon execution, the function prints its header and values of all arguments.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To do&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Improve &lt;del&gt;defvfun&lt;/del&gt;&#39;s documentation handling&lt;/li&gt; &#xA;   &lt;li&gt;Modify &lt;del&gt;defvfun&lt;/del&gt; to print out the calculation result&lt;/li&gt; &#xA;   &lt;li&gt;Consider adding a preamble to &lt;del&gt;vlet&lt;/del&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>