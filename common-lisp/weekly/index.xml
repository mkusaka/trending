<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Common Lisp Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-03-12T01:49:12Z</updated>
  <subtitle>Weekly Trending of Common Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>jscl-project/jscl</title>
    <updated>2023-03-12T01:49:12Z</updated>
    <id>tag:github.com,2023-03-12:/jscl-project/jscl</id>
    <link href="https://github.com/jscl-project/jscl" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Lisp-to-JavaScript compiler bootstrapped from Common Lisp&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;JSCL&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/jscl-project/jscl/actions/workflows/main.yml&#34;&gt;&lt;img src=&#34;https://github.com/jscl-project/jscl/actions/workflows/main.yml/badge.svg?sanitize=true&#34; alt=&#34;Pipeline CI&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;JSCL is a Common Lisp to JavaScript compiler, which is bootstrapped from Common Lisp and executed from the browser.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://jscl-project.github.io/&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/jscl-project/jscl/master/logo/logo-128.png&#34; alt=&#34;JSCL&#34; title=&#34;JSCL&#34; height=&#34;128&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;You can try a demo online &lt;a href=&#34;https://jscl-project.github.io/&#34;&gt;here&lt;/a&gt;, or you can install the JSCL npm package:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;npm install -g jscl&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;to run &lt;code&gt;jscl-repl&lt;/code&gt; in NodeJS.&lt;/p&gt; &#xA;&lt;h2&gt;Build&lt;/h2&gt; &#xA;&lt;p&gt;If you want to hack JSCL, you will have to download the repository&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/jscl-project/jscl.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;load&lt;/em&gt; &lt;code&gt;jscl.lisp&lt;/code&gt; in your Lisp, and call the bootstrap function to compile the implementation itself:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(jscl:bootstrap)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It will generate a &lt;code&gt;jscl.js&lt;/code&gt; file in the top of the source tree. Now you can open &lt;code&gt;jscl.html&lt;/code&gt; in your browser and use it.&lt;/p&gt; &#xA;&lt;h2&gt;Status&lt;/h2&gt; &#xA;&lt;p&gt;JSCL is and will be a subset of Common Lisp. Of course it is far from complete, but it supports partially most common special operators, functions and macros. In particular:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Multiple values&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Explicit control transfers &lt;a href=&#34;http://www.lispworks.com/documentation/HyperSpec/Body/s_tagbod.htm&#34;&gt;tagbody&lt;/a&gt; and &lt;a href=&#34;http://www.lispworks.com/documentation/HyperSpec/Body/s_go.htm&#34;&gt;go&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Static and dynamic non local exit &lt;a href=&#34;http://www.lispworks.com/documentation/HyperSpec/Body/s_catch.htm&#34;&gt;catch&lt;/a&gt;, &lt;a href=&#34;http://www.lispworks.com/documentation/HyperSpec/Body/s_throw.htm&#34;&gt;throw&lt;/a&gt;; &lt;a href=&#34;http://www.lispworks.com/documentation/HyperSpec/Body/s_block.htm&#34;&gt;block&lt;/a&gt;, &lt;a href=&#34;http://www.lispworks.com/documentation/HyperSpec/Body/s_ret_fr.htm&#34;&gt;return-from&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Lexical and special variables. However, declare expressions are missing, but you can &lt;em&gt;proclaim&lt;/em&gt; special variables.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Optional and keyword arguments&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;SETF places&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Packages&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The &lt;code&gt;LOOP&lt;/code&gt; macro&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;CLOS&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Others&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The compiler is very verbose, some simple optimizations or &lt;em&gt;minification&lt;/em&gt; could help to deal with it.&lt;/p&gt; &#xA;&lt;p&gt;Most of the above features are incomplete. The major features that are still missing are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The &lt;code&gt;format&lt;/code&gt; function&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;Feel free to hack it yourself&lt;/em&gt;&lt;/p&gt;</summary>
  </entry>
</feed>