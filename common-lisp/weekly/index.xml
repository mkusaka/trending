<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Common Lisp Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-12-17T01:52:01Z</updated>
  <subtitle>Weekly Trending of Common Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>kliph/blocky</title>
    <updated>2023-12-17T01:52:01Z</updated>
    <id>tag:github.com,2023-12-17:/kliph/blocky</id>
    <link href="https://github.com/kliph/blocky" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Blocky is a visual programming language based on Common Lisp.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;This is the README.ORG file for the Blocky programming language. It contains general information about the project as well as an index of important files in this source distribution. More information about Blocky can be found at the Blocky home page, [[http://blocky.io][blocky.io]].&lt;/p&gt; &#xA;&lt;p&gt;The included file &#34;COPYING&#34; contains full licensing information, including the text of the GNU General Public License, Version 3.&lt;/p&gt; &#xA;&lt;p&gt;See the included file INSTALL for installation instructions. A programmer&#39;s guide may be found in the file GUIDE.ORG.&lt;/p&gt; &#xA;&lt;p&gt;Blocky is a visual programming language for [[http://en.wikipedia.org/wiki/Common_Lisp][Common Lisp]] paired with an [[http://www.gnu.org/software/emacs/][Emacs-like]] user interface. In addition to borrowing ideas from GNU Emacs, the language design is heavily influenced by existing research environments such as [[http://puredata.info/][PureData]], [[http://squeak.org][Squeak]], [[http://en.wikipedia.org/wiki/Morphic_(software)][Self Morphic]], [[http://scratch.mit.edu][MIT Scratch]], [[http://byob.berkeley.edu][Berkeley&#39;s BYOB]] project, and more recently Jens Moenig&#39;s [[http://www.chirp.scratchr.org/blog/?p=24][Smalltalk Elements.]]&lt;/p&gt; &#xA;&lt;p&gt;My ultimate goal is to create an industrial-strength object-oriented visual Lisp by importing the &#34;abstraction&#34; concept from PureData. Such a &#34;visual Lisp macro&#34; facility enables much more powerful blocks to be defined in terms of simpler ones, interactively. In addition there are some improvements, such as native [[http://en.wikipedia.org/wiki/OpenGL][OpenGL]] support throughout, and of course the advantage of compiling your block diagrams to optimized machine code via [[http://sbcl.org][SBCL]]. (Don&#39;t forget [[http://quicklisp.org][Quicklisp]] either.)&lt;/p&gt; &#xA;&lt;p&gt;I also wish to enable unfettered inquiry into computable knowledge, and to support radical autonomy of creative expression. So I have built Blocky first and foremost /as a human language activity supported by free software/, not as an app or platform---because language is a human right.&lt;/p&gt; &#xA;&lt;p&gt;For more information on the design of Blocky, see &lt;a href=&#34;http://blocky.io/design.html&#34;&gt;http://blocky.io/design.html&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;For a quick start to getting familiar with Blocky internals, see the included file GUIDE.ORG (or read the first parts of the [[http://blocky.io/reference.html][online Blocky reference manual]]) to get an overview of the language syntax. Then look through BLOCKS.LISP and branch out from there. I&#39;ve placed cross references wherever possible.&lt;/p&gt; &#xA;&lt;p&gt;Blocky is relatively stable at this point, but documentation is somewhat lacking.&lt;/p&gt; &#xA;&lt;p&gt;Emacs users may find BLOCKY.EL useful in making Emacs behave better while editing Blocky sources and game modules.&lt;/p&gt; &#xA;&lt;p&gt;Here is a quick index of the various files:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;COPYING: Licensing information, including full GPLv3 text&lt;/li&gt; &#xA; &lt;li&gt;CREDITS: List of thank-yous for help, influences, dependencies&lt;/li&gt; &#xA; &lt;li&gt;INSTALL: How to obtain and build Blocky from source&lt;/li&gt; &#xA; &lt;li&gt;rgb.lisp: X11 color set&lt;/li&gt; &#xA; &lt;li&gt;keys.lisp: SDL key symbol translation table&lt;/li&gt; &#xA; &lt;li&gt;math.lisp: bresenham&#39;s and other algorithms&lt;/li&gt; &#xA; &lt;li&gt;logic.lisp: several CL tools adapted from PAIP&lt;/li&gt; &#xA; &lt;li&gt;prototypes.lisp: a custom Self-like object system underlying Blocky&lt;/li&gt; &#xA; &lt;li&gt;console.lisp: basic device and file operations for SDL, OpenGL, etc&lt;/li&gt; &#xA; &lt;li&gt;blocks.lisp: core Blocky language model and default block behaviors&lt;/li&gt; &#xA; &lt;li&gt;halo.lisp: generic GUI object handles, in the style of Squeak Morphic&lt;/li&gt; &#xA; &lt;li&gt;windows.lisp: generic interactive viewer for buffers&lt;/li&gt; &#xA; &lt;li&gt;text.lisp: generic emacs-like textbox editing control&lt;/li&gt; &#xA; &lt;li&gt;trees.lisp: drop-down menus and tree tab widgets&lt;/li&gt; &#xA; &lt;li&gt;listener.lisp: Lisp data entry, data objects, and command processing&lt;/li&gt; &#xA; &lt;li&gt;worlds.lisp: simulation of interacting objects&lt;/li&gt; &#xA; &lt;li&gt;path.lisp: A-star pathfinding on a grid&lt;/li&gt; &#xA; &lt;li&gt;syntax.lisp: visual macros&lt;/li&gt; &#xA; &lt;li&gt;blocky.el: emacs lisp configuration for editing blocky source&lt;/li&gt; &#xA; &lt;li&gt;blocky.asd: ASDF system definition&lt;/li&gt; &#xA; &lt;li&gt;blocky-init.lisp: user-specific startup configuration file for blocky&lt;/li&gt; &#xA; &lt;li&gt;tasks.org: current task list and plans, in org-mode format&lt;/li&gt; &#xA; &lt;li&gt;standard: directory with included fonts/images&lt;/li&gt; &#xA; &lt;li&gt;build-unix.lisp: build script for unix&lt;/li&gt; &#xA; &lt;li&gt;build-win32.lisp: build script for win32 (obsolete)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Blocky is (C) Copyright 2006-2012 by David T. O&#39;Toole &lt;a href=&#34;mailto:dto@ioforms.org&#34;&gt;dto@ioforms.org&lt;/a&gt; This program is dedicated to our beloved Yogi, who died 2006-10-06. Re-dedicated June 2012 to our beloved Cookie-Puss.&lt;/p&gt;</summary>
  </entry>
</feed>