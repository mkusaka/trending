<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Common Lisp Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-19T02:05:13Z</updated>
  <subtitle>Weekly Trending of Common Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>dimitri/pgloader</title>
    <updated>2022-06-19T02:05:13Z</updated>
    <id>tag:github.com,2022-06-19:/dimitri/pgloader</id>
    <link href="https://github.com/dimitri/pgloader" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Migrate to PostgreSQL in a single command!&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;PGLoader&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/dimitri/pgloader&#34;&gt;&lt;img src=&#34;https://travis-ci.org/dimitri/pgloader.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitter.im/dimitri/pgloader?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/Join%20Chat.svg?sanitize=true&#34; alt=&#34;Join the chat at https://gitter.im/dimitri/pgloader&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cloud.docker.com/repository/docker/dimitri/pgloader&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/cloud/build/dimitri/pgloader.svg?sanitize=true&#34; alt=&#34;Docker Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://pgloader.readthedocs.io/en/latest/&#34;&gt;&lt;img src=&#34;https://readthedocs.org/projects/pgloader/badge/?version=latest&amp;amp;style=plastic&#34; alt=&#34;Read The Docs Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;pgloader is a data loading tool for PostgreSQL, using the &lt;code&gt;COPY&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;p&gt;Its main advantage over just using &lt;code&gt;COPY&lt;/code&gt; or &lt;code&gt;\copy&lt;/code&gt;, and over using a &lt;em&gt;Foreign Data Wrapper&lt;/em&gt;, is its transaction behaviour, where &lt;em&gt;pgloader&lt;/em&gt; will keep a separate file of rejected data, but continue trying to &lt;code&gt;copy&lt;/code&gt; good data in your database.&lt;/p&gt; &#xA;&lt;p&gt;The default PostgreSQL behaviour is transactional, which means that &lt;em&gt;any&lt;/em&gt; erroneous line in the input data (file or remote database) will stop the entire bulk load for the table.&lt;/p&gt; &#xA;&lt;p&gt;pgloader also implements data reformatting, a typical example of that being the transformation of MySQL datestamps &lt;code&gt;0000-00-00&lt;/code&gt; and &lt;code&gt;0000-00-00 00:00:00&lt;/code&gt; to PostgreSQL &lt;code&gt;NULL&lt;/code&gt; value (because our calendar never had a &lt;em&gt;year zero&lt;/em&gt;).&lt;/p&gt; &#xA;&lt;h2&gt;Versioning&lt;/h2&gt; &#xA;&lt;p&gt;pgloader version 1.x is quite old and was developed in &lt;code&gt;TCL&lt;/code&gt;. When faced with maintaining that code, the new emerging development team (hi!) picked &lt;code&gt;python&lt;/code&gt; instead because that made sense at the time. So pgloader version 2.x was written in python.&lt;/p&gt; &#xA;&lt;p&gt;The current version of pgloader is the 3.x series, which is written in &lt;a href=&#34;http://cliki.net/&#34;&gt;Common Lisp&lt;/a&gt; for better development flexibility, runtime performance, and support of real threading.&lt;/p&gt; &#xA;&lt;p&gt;The versioning is now following the Emacs model, where any X.0 release number means you&#39;re using a development version (alpha, beta, or release candidate). The next stable versions are going to be &lt;code&gt;3.1&lt;/code&gt; then &lt;code&gt;3.2&lt;/code&gt; etc.&lt;/p&gt; &#xA;&lt;p&gt;When using a development snapshot rather than a released version the version number includes the git hash (in its abbreviated form):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;pgloader version &#34;3.0.99&#34;&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Release candidate 9 for pgloader version 3.1, with a &lt;em&gt;git tag&lt;/em&gt; named &lt;code&gt;v3.0.99&lt;/code&gt; so that it&#39;s easy to checkout the same sources as the released code.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;pgloader version &#34;3.0.fecae2c&#34;&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Development snapshot again &lt;em&gt;git hash&lt;/em&gt; &lt;code&gt;fecae2c&lt;/code&gt;. It&#39;s possible to have the same sources on another setup with using the git command &lt;code&gt;git checkout fecae2c&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;pgloader version &#34;3.1.0&#34;&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Stable release.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;LICENCE&lt;/h2&gt; &#xA;&lt;p&gt;pgloader is available under &lt;a href=&#34;http://www.postgresql.org/about/licence/&#34;&gt;The PostgreSQL Licence&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;INSTALL&lt;/h2&gt; &#xA;&lt;p&gt;You can install pgloader directly from &lt;a href=&#34;https://wiki.postgresql.org/wiki/Apt&#34;&gt;apt.postgresql.org&lt;/a&gt; and from official debian repositories, see &lt;a href=&#34;https://packages.debian.org/search?keywords=pgloader&#34;&gt;packages.debian.org/pgloader&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ apt-get install pgloader&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also use a &lt;strong&gt;docker&lt;/strong&gt; image for pgloader at &lt;a href=&#34;https://hub.docker.com/r/dimitri/pgloader/&#34;&gt;https://hub.docker.com/r/dimitri/pgloader/&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ docker pull dimitri/pgloader&#xA;$ docker run --rm --name pgloader dimitri/pgloader:latest pgloader --version&#xA;$ docker run --rm --name pgloader dimitri/pgloader:latest pgloader --help&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Build from sources&lt;/h2&gt; &#xA;&lt;p&gt;pgloader is now a Common Lisp program, tested using the &lt;a href=&#34;http://sbcl.org/&#34;&gt;SBCL&lt;/a&gt; (&amp;gt;= 1.2.5) and &lt;a href=&#34;http://ccl.clozure.com/&#34;&gt;Clozure CL&lt;/a&gt; implementations with &lt;a href=&#34;http://www.quicklisp.org/beta/&#34;&gt;Quicklisp&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;When building from sources, you should always build from the current git &lt;code&gt;HEAD&lt;/code&gt; as it&#39;s basically the only source that is managed in a way to ensure it builds aginst current set of dependencies versions.&lt;/p&gt; &#xA;&lt;h3&gt;Building from sources on debian&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ apt-get install sbcl unzip libsqlite3-dev make curl gawk freetds-dev libzip-dev&#xA;$ cd /path/to/pgloader&#xA;$ make pgloader&#xA;$ ./build/bin/pgloader --help&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Building from sources on RedHat/CentOS&lt;/h3&gt; &#xA;&lt;p&gt;See &#34;Redhat / CentOS&#34; in &lt;a href=&#34;https://raw.githubusercontent.com/dimitri/pgloader/master/INSTALL.md#redhat--centos&#34;&gt;INSTALL.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Building from sources on macOS&lt;/h3&gt; &#xA;&lt;p&gt;When using &lt;a href=&#34;https://brew.sh&#34;&gt;brew&lt;/a&gt;, it should be a simple &lt;code&gt;brew install --HEAD pgloader&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;When using &lt;a href=&#34;https://www.macports.org&#34;&gt;macports&lt;/a&gt;, then we have a situation to deal with with shared objects pgloader depends on, as reported in issue #161 at &lt;a href=&#34;https://github.com/dimitri/pgloader/issues/161#issuecomment-201162647&#34;&gt;https://github.com/dimitri/pgloader/issues/161#issuecomment-201162647&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;I was able to get a clean build without having to disable compression after symlinking /usr/local/lib to /opt/local/lib. Note that I did not have anything installed to /usr/local/lib so I didn&#39;t lose anything here.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Building from sources on Windows&lt;/h3&gt; &#xA;&lt;p&gt;Building pgloader on Windows is supported, thanks to Common Lisp implementations being available on that platform, and to the Common Lisp Standard for making it easy to write actually portable code.&lt;/p&gt; &#xA;&lt;p&gt;It is recommended to have a look at the issues labelled with &lt;em&gt;Windows support&lt;/em&gt; if you run into trouble when building pgloader:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/dimitri/pgloader/issues?utf8=%E2%9C%93&amp;amp;q=label%3A%22Windows%20support%22%20&#34;&gt;https://github.com/dimitri/pgloader/issues?utf8=✓&amp;amp;q=label%3A%22Windows%20support%22%20&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Building Docker image from sources&lt;/h3&gt; &#xA;&lt;p&gt;You can build a Docker image from source using SBCL by default:&lt;/p&gt; &#xA;&lt;p&gt;$ docker build .&lt;/p&gt; &#xA;&lt;p&gt;Or Clozure CL (CCL):&lt;/p&gt; &#xA;&lt;p&gt;$ docker build -f Dockerfile.ccl .&lt;/p&gt; &#xA;&lt;h2&gt;More options when building from source&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;Makefile&lt;/code&gt; target &lt;code&gt;pgloader&lt;/code&gt; knows how to produce a Self Contained Binary file for pgloader, found at &lt;code&gt;./build/bin/pgloader&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ make pgloader&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default, the &lt;code&gt;Makefile&lt;/code&gt; uses &lt;a href=&#34;http://sbcl.org/&#34;&gt;SBCL&lt;/a&gt; to compile your binary image, though it&#39;s possible to build using &lt;a href=&#34;http://ccl.clozure.com/&#34;&gt;CCL&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ make CL=ccl pgloader&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If using &lt;code&gt;SBCL&lt;/code&gt; and it supports core compression, the make process will use it to generate a smaller binary. To force disabling core compression, you may use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ make COMPRESS_CORE=no pgloader&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;--compress-core&lt;/code&gt; is unique to SBCL, so not used when &lt;code&gt;CC&lt;/code&gt; is different from the &lt;code&gt;sbcl&lt;/code&gt; value.&lt;/p&gt; &#xA;&lt;p&gt;You can also tweak the default amount of memory that the &lt;code&gt;pgloader&lt;/code&gt; image will allow itself using when running through your data (don&#39;t ask for more than your current RAM tho):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ make DYNSIZE=8192 pgloader&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;make pgloader&lt;/code&gt; command when successful outputs a &lt;code&gt;./build/bin/pgloader&lt;/code&gt; file for you to use.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;You can either give a command file to pgloader or run it all from the command line, see the &lt;a href=&#34;https://pgloader.readthedocs.io/en/latest/tutorial/tutorial.html#pgloader-quick-start&#34;&gt;pgloader quick start&lt;/a&gt; on &lt;a href=&#34;https://pgloader.readthedocs.io&#34;&gt;https://pgloader.readthedocs.io&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ./build/bin/pgloader --help&#xA;$ ./build/bin/pgloader &amp;lt;file.load&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For example, for a full migration from SQLite:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ createdb newdb&#xA;$ pgloader ./test/sqlite/sqlite.db postgresql:///newdb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or for a full migration from MySQL, including schema definition (tables, indexes, foreign keys, comments) and parallel loading of the corrected data:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ createdb pagila&#xA;$ pgloader mysql://user@localhost/sakila postgresql:///pagila&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>lem-project/lem</title>
    <updated>2022-06-19T02:05:13Z</updated>
    <id>tag:github.com,2022-06-19:/lem-project/lem</id>
    <link href="https://github.com/lem-project/lem" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Common Lisp editor/IDE with high expansibility&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Lem is the editor/IDE well-tuned for Common Lisp.&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/Shinmera/lem-icon/raw/gh-pages/icon-blue.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/lem-project/lem/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt; &lt;a href=&#34;https://raw.githubusercontent.com/lem-project/lem/master/#backers&#34;&gt;&lt;img src=&#34;https://opencollective.com/lem/backers/badge.svg?sanitize=true&#34; alt=&#34;Backers on Open Collective&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/lem-project/lem/master/#sponsors&#34;&gt;&lt;img src=&#34;https://opencollective.com/lem/sponsors/badge.svg?sanitize=true&#34; alt=&#34;Sponsors on Open Collective&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;After installing lem, you can start developing in Common Lisp at once.&lt;/p&gt; &#xA;&lt;p&gt;You can skip over writing tidy settings or installing many plugins as you do on Emacs.&lt;/p&gt; &#xA;&lt;h2&gt;Screenshot&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/lem-project/lem/master/screenshots/terminal.png&#34; alt=&#34;Terminal&#34;&gt;　　&lt;/p&gt; &#xA;&lt;h2&gt;Requirement&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/roswell/roswell&#34;&gt;roswell&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;ncurses&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Platform&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Linux&lt;/li&gt; &#xA; &lt;li&gt;MacOS 10.13+&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lem-project/lem/wiki/Windows-Platform&#34;&gt;Windows&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Play with Lem in the Docker&lt;/h2&gt; &#xA;&lt;p&gt;You can try Lem by running it in a docker container:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run --rm -ti -v `pwd`:/app 40ants/lem:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Please install roswell at first.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/roswell/roswell/wiki/Installation&#34;&gt;Roswell Installation Guide&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;After that, please follow the steps bellow.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;1. install lem by roswell&#xA;$ ros install lem-project/lem&#xA;&#xA;2. add the PATH in the initialization file(such as ~/.bashrc)&#xA;export PATH=$PATH:~/.roswell/bin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Updating&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ros update lem&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ lem &amp;lt;filename.lisp&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can watch the screencast on Youtube.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://youtu.be/YkSJ3p7Z9H0&#34;&gt;Screencast&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;Lem loads &lt;code&gt;~/.lem/init.lisp&lt;/code&gt; when starting up.&lt;/p&gt; &#xA;&lt;p&gt;You can see an example &lt;a href=&#34;https://raw.githubusercontent.com/lem-project/lem/master/lemrc-example&#34;&gt;here&lt;/a&gt; or &lt;a href=&#34;https://github.com/Fedreg/.lem/raw/master/init.lisp&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;fukamachi also published his init files on GitHub. &lt;a href=&#34;https://github.com/fukamachi/.lem&#34;&gt;https://github.com/fukamachi/.lem&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Extensions and modes&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/40ants/lem-pareto&#34;&gt;Pareto&lt;/a&gt; - A mode, complement to the Paredit. Makes Lisp code editing even more efficient!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Electron version (Experiment)&lt;/h2&gt; &#xA;&lt;p&gt;Electron version is in the experimental stage.&lt;/p&gt; &#xA;&lt;p&gt;If you try, please follow below steps.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ node -v  # check if your nodejs is 8.9.3LTS+.&#xA;v8.9.3&#xA;$ npm -v&#xA;5.5.1&#xA;$ npm install -g cxxxr/lem   # install lem-electron&#xA;$ lem-electron               # Electron version will start&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/lem-project/lem/master/screenshots/electron.png&#34; alt=&#34;Electron&#34;&gt;　　&lt;/p&gt; &#xA;&lt;h2&gt;Lem on platforms without SBCL thread support (e.g. raspberry pi3)&lt;/h2&gt; &#xA;&lt;p&gt;If installation fails due to &lt;code&gt;bordeaux-threads&lt;/code&gt;, there is no thread provided by SBCL on your PC.&lt;br&gt; You need to use Clozure Common Lisp (CCL) instead of SBCL.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ros install ccl-bin&#xA;$ ros use ccl-bin&#xA;$ ros install cxxxr/lem&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And also need to specify frontend to &lt;code&gt;ncurses-ccl&lt;/code&gt;. You can launch lem as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ lem --frontend ncurses-ccl&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;How to develop lisp&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/lem-project/lem/wiki/Lisp-Mode&#34;&gt;https://github.com/lem-project/lem/wiki/Lisp-Mode&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;How to hack on lem itself&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/lem-project/lem/wiki/How-to-hack-on-lem-itself&#34;&gt;https://github.com/lem-project/lem/wiki/How-to-hack-on-lem-itself&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you have a questions, join &lt;a href=&#34;https://gitter.im/lem-developers/community&#34;&gt;this Gitter chat&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributors&lt;/h2&gt; &#xA;&lt;p&gt;This project exists thanks to all the people who contribute. &lt;a href=&#34;https://raw.githubusercontent.com/lem-project/lem/master/CONTRIBUTING.md&#34;&gt;[Contribute]&lt;/a&gt;. &lt;a href=&#34;https://raw.githubusercontent.com/lem-project/lem/master/graphs/contributors&#34;&gt;&lt;img src=&#34;https://opencollective.com/lem/contributors.svg?width=890&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Backers&lt;/h2&gt; &#xA;&lt;p&gt;Thank you to all our backers! 🙏 [&lt;a href=&#34;https://opencollective.com/lem#backer&#34;&gt;Become a backer&lt;/a&gt;]&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opencollective.com/lem#backers&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/lem/backers.svg?width=890&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Sponsors&lt;/h2&gt; &#xA;&lt;p&gt;Support this project by becoming a sponsor. Your logo will show up here with a link to your website. [&lt;a href=&#34;https://opencollective.com/lem#sponsor&#34;&gt;Become a sponsor&lt;/a&gt;]&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opencollective.com/lem/sponsor/0/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/lem/sponsor/0/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/lem/sponsor/1/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/lem/sponsor/1/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/lem/sponsor/2/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/lem/sponsor/2/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/lem/sponsor/3/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/lem/sponsor/3/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/lem/sponsor/4/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/lem/sponsor/4/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/lem/sponsor/5/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/lem/sponsor/5/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/lem/sponsor/6/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/lem/sponsor/6/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/lem/sponsor/7/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/lem/sponsor/7/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/lem/sponsor/8/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/lem/sponsor/8/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/lem/sponsor/9/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/lem/sponsor/9/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/lem-project/lem/raw/master/LICENCE&#34;&gt;MIT&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>aleksandr-vin/Google-Code-Jam-Practice</title>
    <updated>2022-06-19T02:05:13Z</updated>
    <id>tag:github.com,2022-06-19:/aleksandr-vin/Google-Code-Jam-Practice</id>
    <link href="https://github.com/aleksandr-vin/Google-Code-Jam-Practice" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Source codes for Google Code Jam practicing&lt;/p&gt;&lt;hr&gt;&lt;p&gt;This is a repository for practicing for Google Code Jam 2010.&lt;/p&gt;</summary>
  </entry>
</feed>