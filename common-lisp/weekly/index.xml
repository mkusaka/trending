<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Common Lisp Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-31T02:07:45Z</updated>
  <subtitle>Weekly Trending of Common Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>coalton-lang/coalton</title>
    <updated>2022-07-31T02:07:45Z</updated>
    <id>tag:github.com,2022-07-31:/coalton-lang/coalton</id>
    <link href="https://github.com/coalton-lang/coalton" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Coalton is an efficient, statically typed functional programming language that supercharges Common Lisp.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/coalton-lang/coalton/main/docs/assets/coalton-logotype-gray.svg?sanitize=true&#34; style=&#34;zoom:45%;&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34; class=&#34;badges&#34;&gt; &lt;a href=&#34;https://github.com/coalton-lang/coalton/actions/workflows/main.yml&#34;&gt; &lt;img alt=&#34;Github Workflow Status&#34; src=&#34;https://img.shields.io/github/workflow/status/coalton-lang/coalton/CI?logo=github&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://discord.gg/cPb6Bc4xAH&#34;&gt; &lt;img alt=&#34;Discord&#34; src=&#34;https://img.shields.io/discord/888196168067199046?logo=discord&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;Coalton is an efficient, statically typed functional programming language that supercharges Common Lisp.&lt;/p&gt; &#xA;&lt;p&gt;Coalton can be written in files:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(in-package #:coalton-user)&#xA;&#xA;(coalton-toplevel&#xA;  (define-type Symbol&#xA;    (Symbol String))&#xA;&#xA;  (define (symbol-name sym)&#xA;    (match sym&#xA;      ((Symbol s) s)))&#xA;&#xA;  (define-instance (Eq Symbol)&#xA;    (define (== a b)&#xA;      (== (symbol-name a) (symbol-name b))))&#xA;&#xA;  (define-type Expr&#xA;    &#34;A symbolic expression of basic arithmetic.&#34;&#xA;    (EConst Integer)&#xA;    (EVar   Symbol)&#xA;    (E+     Expr Expr)&#xA;    (E*     Expr Expr))&#xA;&#xA;  (declare diff (Symbol -&amp;gt; Expr -&amp;gt; Expr))&#xA;  (define (diff x f)&#xA;    &#34;Compute the derivative of F with respect to X.&#34;&#xA;    (match f&#xA;      ((EConst _)   ; c&#39; = 0&#xA;       (EConst 0))&#xA;      ((EVar s)     ; x&#39; = 1&#xA;       (if (== s x) (EConst 1) (EConst 0)))&#xA;      ((E+ a b)     ; (a+b)&#39; = a&#39; + b&#39;&#xA;       (E+ (diff x a) (diff x b)))&#xA;      ((E* a b)     ; (ab)&#39; = a&#39;b + ab&#39;&#xA;       (E+ (E* (diff x a) b)&#xA;           (E* a          (diff x b))))))&#xA;&#xA; (declare dt (Expr -&amp;gt; Expr))&#xA; (define dt&#xA;   &#34;The time derivative operator.&#34;&#xA;   (diff (Symbol &#34;t&#34;))))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And at the REPL:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;CL-USER&amp;gt; (in-package #:coalton-user)&#xA;COALTON-USER&amp;gt; (coalton (dt (E+ (EVar (Symbol &#34;t&#34;))&#xA;                               (EConst 1))))&#xA;#.(E+ #.(ECONST 1) #.(ECONST 0))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;Coalton has &lt;strong&gt;not&lt;/strong&gt; reached &#34;1.0&#34; yet. This means that, from time to time, you may have a substandard user experience. While we try to be ANSI-conforming, Coalton may only work on SBCL 2.1.x.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Prepare&lt;/strong&gt;: Install &lt;a href=&#34;http://www.sbcl.org/platform-table.html&#34;&gt;SBCL&lt;/a&gt; (on macOS with Homebrew: &lt;code&gt;brew install sbcl&lt;/code&gt;). Install Quicklisp by following instructions &lt;a href=&#34;https://www.quicklisp.org/beta/#installation&#34;&gt;here&lt;/a&gt;. (The step command involving &lt;code&gt;gpg&lt;/code&gt; is not needed.) After installing Quicklisp, you should have a &lt;code&gt;quicklisp&lt;/code&gt; folder which will make installing Coalton easier.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Install&lt;/strong&gt;: Clone this repository into a place your Lisp can see (e.g., &lt;code&gt;~/quicklisp/local-projects/&lt;/code&gt;). Coalton is not yet on Quicklisp.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Use&lt;/strong&gt;: Either run &lt;code&gt;(ql:quickload :coalton)&lt;/code&gt;, or add &lt;code&gt;#:coalton&lt;/code&gt; to your ASD&#39;s &lt;code&gt;:depends-on&lt;/code&gt; list. Quicklisp will automatically download all of Coalton&#39;s dependencies.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Test&lt;/strong&gt;: Compile the tests with &lt;code&gt;(ql:quickload :coalton/tests)&lt;/code&gt;, then run the tests with &lt;code&gt;(asdf:test-system :coalton)&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Learn&lt;/strong&gt;: We recommend starting with the &lt;a href=&#34;https://raw.githubusercontent.com/coalton-lang/coalton/main/docs/intro-to-coalton.md&#34;&gt;&lt;em&gt;Intro to Coalton&lt;/em&gt;&lt;/a&gt; document, and then taking a peek in the &lt;a href=&#34;https://raw.githubusercontent.com/coalton-lang/coalton/main/examples/&#34;&gt;examples directory&lt;/a&gt;. It may also be helpful to check out the &lt;a href=&#34;https://coalton-lang.github.io/20211010-introducing-coalton/&#34;&gt;introductory blog post&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;What&#39;s Here?&lt;/h2&gt; &#xA;&lt;p&gt;This repository contains the source code to the &lt;a href=&#34;https://raw.githubusercontent.com/coalton-lang/coalton/main/src/&#34;&gt;Coalton compiler&lt;/a&gt;, and the &lt;a href=&#34;https://raw.githubusercontent.com/coalton-lang/coalton/main/library/&#34;&gt;standard library&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;It also contains a few example programs, such as:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Some &lt;a href=&#34;https://raw.githubusercontent.com/coalton-lang/coalton/main/examples/small-coalton-programs/&#34;&gt;simple pedagogical programs&lt;/a&gt;,&lt;/li&gt; &#xA; &lt;li&gt;A &lt;a href=&#34;https://raw.githubusercontent.com/coalton-lang/coalton/main/examples/coalton-json&#34;&gt;JSON parser&lt;/a&gt; piggybacking on a native Common Lisp library.&lt;/li&gt; &#xA; &lt;li&gt;An &lt;a href=&#34;https://raw.githubusercontent.com/coalton-lang/coalton/main/examples/thih/&#34;&gt;implementation&lt;/a&gt; of Jones&#39;s &lt;em&gt;Typing Haskell in Haskell&lt;/em&gt;, and&lt;/li&gt; &#xA; &lt;li&gt;An &lt;a href=&#34;https://raw.githubusercontent.com/coalton-lang/coalton/main/examples/quil-coalton/&#34;&gt;implementation&lt;/a&gt; of a simple &lt;a href=&#34;https://en.wikipedia.org/wiki/Quil_(instruction_set_architecture)&#34;&gt;Quil&lt;/a&gt; parser using parser combinators.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Lastly and importantly, we maintain a collection of documentation about Coalton in the &lt;a href=&#34;https://raw.githubusercontent.com/coalton-lang/coalton/main/docs/&#34;&gt;docs&lt;/a&gt; directory, including a &lt;a href=&#34;https://coalton-lang.github.io/reference/&#34;&gt;standard library reference guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Get Involved&lt;/h2&gt; &#xA;&lt;p&gt;Want to ask a question about Coalton, propose a feature, or share a cool program you wrote? Try posting in the &lt;a href=&#34;https://github.com/coalton-lang/coalton/discussions&#34;&gt;GitHub Discussions&lt;/a&gt; page!&lt;/p&gt; &#xA;&lt;p&gt;We welcome contributions of all forms, especially as we stabilize toward a 1.0 release. We would be grateful to receive:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;bug reports (filed as issues),&lt;/li&gt; &#xA; &lt;li&gt;bug fixes and typo corrections (filed as pull requests),&lt;/li&gt; &#xA; &lt;li&gt;small &lt;a href=&#34;https://raw.githubusercontent.com/coalton-lang/coalton/main/examples/small-coalton-programs/&#34;&gt;example programs&lt;/a&gt;, and&lt;/li&gt; &#xA; &lt;li&gt;user experience troubles.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>