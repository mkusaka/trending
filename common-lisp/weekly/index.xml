<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Common Lisp Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-09-08T01:39:22Z</updated>
  <subtitle>Weekly Trending of Common Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ciel-lang/CIEL</title>
    <updated>2024-09-08T01:39:22Z</updated>
    <id>tag:github.com,2024-09-08:/ciel-lang/CIEL</id>
    <link href="https://github.com/ciel-lang/CIEL" rel="alternate"></link>
    <summary type="html">&lt;p&gt;CIEL Is an Extended Lisp. Scripting with batteries included.&lt;/p&gt;&lt;hr&gt;&lt;p&gt; &lt;/p&gt;&#xA;&lt;h2 align=&#34;center&#34;&gt; CIEL &lt;/h2&gt; &#xA;&lt;h3 align=&#34;center&#34;&gt; Common Lisp, batteries included. &lt;/h3&gt; &#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://ciel-lang.github.io/CIEL/#/&#34;&gt;&lt;b&gt; Home page &lt;/b&gt;&lt;/a&gt; | &lt;a href=&#34;https://github.com/ciel-lang/CIEL/issues&#34;&gt;&lt;b&gt;Issues&lt;/b&gt;&lt;/a&gt; | &lt;a href=&#34;https://github.com/ciel-lang/CIEL/discussions&#34;&gt;&lt;b&gt; Discussions&lt;/b&gt;&lt;/a&gt; | &lt;a href=&#34;https://github.com/sponsors/vindarel&#34;&gt; Support us! &lt;/a&gt; | &lt;a href=&#34;https://ko-fi.com/vindarel&#34;&gt; Buy me a coffee! &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/72611034?s=48&amp;amp;v=4&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;CIEL Is an Extended Lisp&lt;/h1&gt; &#xA;&lt;p&gt;STATUS: &lt;del&gt;highly&lt;/del&gt; WIP, the API WILL change, but it is usable.&lt;/p&gt; &#xA;&lt;p&gt;I am dogfooding it in public and private projects.&lt;/p&gt; &#xA;&lt;h2&gt;What is this ?&lt;/h2&gt; &#xA;&lt;p&gt;CIEL is a ready-to-use collection of libraries.&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s Common Lisp, batteries included.&lt;/p&gt; &#xA;&lt;p&gt;It comes in 3 forms:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;a binary, to run CIEL &lt;strong&gt;scripts&lt;/strong&gt;: fast start-up times, standalone image, built-in utilities.&lt;/li&gt; &#xA; &lt;li&gt;a simple full-featured &lt;strong&gt;REPL&lt;/strong&gt; for the terminal.&lt;/li&gt; &#xA; &lt;li&gt;a &lt;strong&gt;Lisp library&lt;/strong&gt; and a &lt;strong&gt;core image&lt;/strong&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Questions, doubts? See the &lt;a href=&#34;https://raw.githubusercontent.com/ciel-lang/CIEL/master/docs/FAQ.md&#34;&gt;FAQ&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;NEW: we now have a Docker file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;#!/usr/bin/env ciel&#xA;&#xA;(-&amp;gt; &#34;https://fakestoreapi.com/products?limit=5&#34;&#xA;  http:get&#xA;  json:read-json&#xA;  (elt 0)&#xA;  (access &#34;title&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ chmodx +x getproduct.lisp&#xA;$ time ./getproduct.lisp&#xA;&#34;Fjallraven - Foldsack Noâ€¦ckpack, Fits 15 Laptops&#34;&#xA;./getproduct.lisp  0.10s user 0.02s system 24% cpu 0.466 total&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Rationale&lt;/h2&gt; &#xA;&lt;p&gt;One of our goals is to make Common Lisp useful out of the box for mundane tasks -by today standards. As such, we ship libraries to handle &lt;strong&gt;JSON&lt;/strong&gt; or &lt;strong&gt;CSV&lt;/strong&gt;, as well as others to ease string manipulation, to do pattern matching, to bring regular expressions, for threads and jobs scheduling, for &lt;strong&gt;HTTP&lt;/strong&gt; and URI handling, and so on. You can of course do all this without CIEL, but then you have to install the library manager first and load these libraries into your Lisp image every time you start it. Now, you have them at your fingertips whenever you start CIEL.&lt;/p&gt; &#xA;&lt;p&gt;We also aim to soften the irritating parts of standard Common Lisp. A famous one, puzzling for beginners and non-optimal for seasoned lispers, is the creation of hash-tables. We include the &lt;code&gt;dict&lt;/code&gt; function from the Serapeum library (which we enhanced further with a pull request):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;CIEL-USER&amp;gt; (dict :a 1 :b 2 :c 3)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;which prints:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-txt&#34;&gt;(dict&#xA; :A 1&#xA; :B 2&#xA; :C 3&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In standard Common Lisp, the equivalent is more convoluted:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-commonlisp&#34;&gt;  (let ((ht (make-hash-table :test &#39;equal)))&#xA;    (setf (gethash :a ht) 1)&#xA;    (setf (gethash :b ht) 2)&#xA;    (setf (gethash :c ht) 3)&#xA;    ht)&#xA;;; #&amp;lt;HASH-TABLE :TEST EQUAL :COUNT 3 {1006CE5613}&amp;gt;&#xA;;; (and we don&#39;t get a readable representation, so our example is not even equivalent)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Moreover, we bring:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;a &lt;strong&gt;full featured REPL on the terminal&lt;/strong&gt; and&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;scripting capabilities&lt;/strong&gt;, see more below.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See &lt;em&gt;the documentation&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;!-- markdown-toc start - Don&#39;t edit this section. Run M-x markdown-toc-refresh-toc --&gt; &#xA;&lt;p&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ciel-lang/CIEL/master/#ciel-is-an-extended-lisp&#34;&gt;CIEL Is an Extended Lisp&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ciel-lang/CIEL/master/#what-is-this-&#34;&gt;What is this ?&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ciel-lang/CIEL/master/#rationale&#34;&gt;Rationale&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ciel-lang/CIEL/master/#install&#34;&gt;Install&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ciel-lang/CIEL/master/#download-a-binary-for-scripting-and-the-custom-repl&#34;&gt;Download a binary. For scripting and the custom REPL.&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ciel-lang/CIEL/master/#build&#34;&gt;Build&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ciel-lang/CIEL/master/#dependencies&#34;&gt;Dependencies&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ciel-lang/CIEL/master/#system-dependencies&#34;&gt;System dependencies&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ciel-lang/CIEL/master/#asdf--334-local-nicknames&#34;&gt;ASDF &amp;gt;= 3.3.4 (local-nicknames)&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ciel-lang/CIEL/master/#install-quicklisp&#34;&gt;Install Quicklisp&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ciel-lang/CIEL/master/#install-our-lisp-dependencies-mandatory&#34;&gt;Install our Lisp dependencies [MANDATORY]&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ciel-lang/CIEL/master/#how-to-load-ciel-with-quicklisp&#34;&gt;How to load CIEL with Quicklisp&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ciel-lang/CIEL/master/#how-to-build-a-ciel-binary-and-a-core-image&#34;&gt;How to build a CIEL binary and a core image&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ciel-lang/CIEL/master/#docker&#34;&gt;Docker&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ciel-lang/CIEL/master/#usage&#34;&gt;Usage&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ciel-lang/CIEL/master/#scripting&#34;&gt;Scripting&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ciel-lang/CIEL/master/#terminal-repl&#34;&gt;Terminal REPL&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ciel-lang/CIEL/master/#ciel-as-a-library-use-ciel-in-your-lisp-systems&#34;&gt;CIEL as a library: &#34;use&#34; :ciel in your Lisp systems&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ciel-lang/CIEL/master/#core-image-configure-your-editor&#34;&gt;Core image: configure your editor&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ciel-lang/CIEL/master/#libraries&#34;&gt;Libraries&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ciel-lang/CIEL/master/#language-extensions&#34;&gt;Language extensions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ciel-lang/CIEL/master/#final-words&#34;&gt;Final words&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ciel-lang/CIEL/master/#misc-how-to-generate-the-documentation&#34;&gt;Misc: how to generate the documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ciel-lang/CIEL/master/#contributors&#34;&gt;Contributors&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ciel-lang/CIEL/master/#lisp&#34;&gt;Lisp?!&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- markdown-toc end --&gt; &#xA;&lt;h1&gt;Install&lt;/h1&gt; &#xA;&lt;h2&gt;Download a binary. For scripting and the custom REPL.&lt;/h2&gt; &#xA;&lt;p&gt;Getting a binary allows you to run scripts, to play around in its terminal readline REPL. A binary doesn&#39;t allow you to use CIEL in your existing Common Lisp editor (which still offers the most interactive and fast development experience).&lt;/p&gt; &#xA;&lt;p&gt;To download a CIEL binary:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;check our releases on &lt;a href=&#34;https://github.com/ciel-lang/CIEL/releases/&#34;&gt;https://github.com/ciel-lang/CIEL/releases/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;we provide a binary from a CI for some systems: go to &lt;a href=&#34;https://gitlab.com/vindarel/ciel/-/pipelines&#34;&gt;https://gitlab.com/vindarel/ciel/-/pipelines&lt;/a&gt;, download the latest artifacts, unzip the &lt;code&gt;ciel-v0-{platform}.zip&lt;/code&gt; archive and run &lt;code&gt;ciel-v0-{platform}/ciel&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;CIEL is currently built for the following platforms:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Platform&lt;/th&gt; &#xA;   &lt;th&gt;System Version (release date)&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;debian&lt;/td&gt; &#xA;   &lt;td&gt;Debian Buster (2019)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;void&lt;/td&gt; &#xA;   &lt;td&gt;Void Linux glibc (2023-05), using &lt;a href=&#34;https://github.com/cinerion/sbcl-voidlinux-docker&#34;&gt;cinerion&#39;s Docker image&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Start it with &lt;code&gt;./ciel&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;With no arguments, you enter CIEL&#39;s terminal REPL.&lt;/p&gt; &#xA;&lt;p&gt;You can give a CIEL script as first argument, or call a built-in one. See the scripting section.&lt;/p&gt; &#xA;&lt;h1&gt;Build&lt;/h1&gt; &#xA;&lt;p&gt;To build CIEL, both the binary and the core image, you need a couple system dependencies and you have to check a couple things on the side of lisp before proceeding.&lt;/p&gt; &#xA;&lt;h2&gt;Dependencies&lt;/h2&gt; &#xA;&lt;h3&gt;System dependencies&lt;/h3&gt; &#xA;&lt;p&gt;You will probably need the following system dependencies (names for a Debian Bullseye system):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;zlib1g-dev # from deploy for SBCL &amp;lt; 2.2.6&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If your SBCL version is &amp;gt;= 2.2.6 you might want to use the more performant &lt;code&gt;libzstd-dev&lt;/code&gt; library instead of &lt;code&gt;zlib1g-dev&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;libzstd-dev # from deploy for SBCL &amp;gt;= 2.2.6&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On Linux:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;inotify-tools&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On MacOS:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;fsevent&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can run: &lt;code&gt;make debian-deps&lt;/code&gt; or &lt;code&gt;make macos-deps&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;ASDF &amp;gt;= 3.3.4 (local-nicknames)&lt;/h3&gt; &#xA;&lt;p&gt;ASDF is the de-facto system definition facility of Common Lisp, that lets you define your system&#39;s metadata (author, dependencies, sources, modulesâ€¦).&lt;/p&gt; &#xA;&lt;p&gt;Please ensure that you have ASDF &amp;gt;= 3.3.4. It is for instance not the case with SBCL 2.2.9.&lt;/p&gt; &#xA;&lt;p&gt;Ask the version with our script:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ make check-asdf-version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or yourself with&lt;code&gt;(asdf:asdf-version)&lt;/code&gt; on a Lisp REPL, or with this one-liner from a terminal:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ sbcl  --eval &#39;(and (print (asdf:asdf-version)) (quit))&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here&#39;s a one-liner to update ASDF:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ mkdir ~/common-lisp/&#xA;$ ( cd ~/common-lisp/ &amp;amp;&amp;amp; wget https://asdf.common-lisp.dev/archives/asdf-3.3.5.tar.gz  &amp;amp;&amp;amp; tar -xvf asdf-3.3.5.tar.gz &amp;amp;&amp;amp; mv asdf-3.3.5 asdf )&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Install Quicklisp&lt;/h3&gt; &#xA;&lt;p&gt;To build CIEL on your machine, you need the &lt;a href=&#34;https://quicklisp.org/beta/&#34;&gt;Quicklisp library manager&lt;/a&gt;. Quicklisp downloads and installs a library and its dependencies on your machine. It&#39;s very slick, we can install everything from the REPL without restarting our Lisp process. It follows a &#34;distrubution&#34; approach, think Debian releases, where libraries are tested to load.&lt;/p&gt; &#xA;&lt;p&gt;It isn&#39;t the only library manager nowadays. See &lt;a href=&#34;https://github.com/CodyReichert/awesome-cl#library-manager&#34;&gt;https://github.com/CodyReichert/awesome-cl#library-manager&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Install it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;curl -O https://beta.quicklisp.org/quicklisp.lisp&#xA;sbcl --load quicklisp.lisp --eval &#34;(quicklisp-quickstart:install)&#34; --quit&#xA;sbcl --load ~/quicklisp/setup.lisp --eval &#34;(ql:add-to-init-file)&#34; --quit&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It creates a &lt;code&gt;~/quicklisp/&lt;/code&gt; directory. Read its installation instructions to know more.&lt;/p&gt; &#xA;&lt;h3&gt;Install our Lisp dependencies [MANDATORY]&lt;/h3&gt; &#xA;&lt;p&gt;Even if you have a Lisp setup with Quicklisp installed, the current distribution of Quicklisp is quite old (as of August, 2024) and you need to pull recent dependencies.&lt;/p&gt; &#xA;&lt;p&gt;We&#39;ll clone the required ones into your &lt;code&gt;~/quicklisp/local-projects/&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make ql-deps&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Other tools exist for this (Qlot, ociclâ€¦), we are just not using them yet.&lt;/p&gt; &#xA;&lt;h2&gt;How to load CIEL with Quicklisp&lt;/h2&gt; &#xA;&lt;p&gt;You need the dependencies above: Quicklisp, a good ASDF version, our up-to-date Lisp dependencies.&lt;/p&gt; &#xA;&lt;p&gt;This shows you how to load CIEL and all its goodies, in order to use it in your current editor.&lt;/p&gt; &#xA;&lt;p&gt;CIEL is not on Quicklisp yet, but it is on &lt;a href=&#34;https://ultralisp.org&#34;&gt;Ultralisp&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;So, either clone this repository:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/ciel-lang/CIEL ~/quicklisp/local-projects/CIEL&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or install the Ultralisp distribution and pull the library from there:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(ql-dist:install-dist &#34;http://dist.ultralisp.org/&#34; :prompt nil)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now, in both cases, you can load the &lt;code&gt;ciel.asd&lt;/code&gt; file (with &lt;code&gt;asdf:load-asd&lt;/code&gt; or &lt;code&gt;C-c C-k&lt;/code&gt; in Slime) and quickload &#34;ciel&#34;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;CL-USER&amp;gt; (ql:quickload &#34;ciel&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;be sure to enter the &lt;code&gt;ciel-user&lt;/code&gt; package:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(in-package :ciel-user)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;you now have access to all CIEL&#39;s packages and functions.&lt;/p&gt; &#xA;&lt;h2&gt;How to build a CIEL binary and a core image&lt;/h2&gt; &#xA;&lt;p&gt;You need the dependencies above: Quicklisp, a good ASDF version, our up-to-date Lisp dependencies.&lt;/p&gt; &#xA;&lt;p&gt;To build CIEL&#39;s binary, use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ make build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This creates a &lt;code&gt;ciel&lt;/code&gt; binary in the current directory.&lt;/p&gt; &#xA;&lt;p&gt;To create a Lisp image:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ make image&#xA;# or&#xA;$ sbcl --load build-image.lisp&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This creates the &lt;code&gt;ciel-core&lt;/code&gt; Lisp image.&lt;/p&gt; &#xA;&lt;p&gt;Unlike a binary, we can not distribute core images. It is dependent on the machine it was built on.&lt;/p&gt; &#xA;&lt;p&gt;The way we use a core image is to load it at startup like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sbcl --core ciel-core --eval &#39;(in-package :ciel-user)&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It loads fast and you have all CIEL libraries and goodies at your disposal.&lt;/p&gt; &#xA;&lt;p&gt;Then you have to configure your editor, like Slime, to have the choice of the Lisp image to start. See below.&lt;/p&gt; &#xA;&lt;h2&gt;Docker&lt;/h2&gt; &#xA;&lt;p&gt;We have a Dockerfile.&lt;/p&gt; &#xA;&lt;p&gt;Build your CIEL image:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker build -t ciel .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The executable is built in &lt;code&gt;/usr/local/bin/ciel&lt;/code&gt; of the Docker image.&lt;/p&gt; &#xA;&lt;p&gt;Get a CIEL REPL:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run --rm -it ciel /usr/local/bin/ciel&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run a script on your filesystem:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run --rm -it ciel /usr/local/bin/ciel path/to/your/lisp/script.lisp&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run a built-in script:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run --rm -it ciel /usr/local/bin/ciel -s simpleHTTPserver&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;So, save you some typing with a shell alias:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;alias ciel=&#34;sudo docker run --rm -it ciel /usr/local/bin/ciel&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Usage&lt;/h1&gt; &#xA;&lt;h2&gt;Scripting&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] this is brand new! Expect limitations and changes.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Get the &lt;code&gt;ciel&lt;/code&gt; binary and call it with your .lisp script:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ciel script.lisp&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use the &lt;code&gt;#!/usr/bin/env ciel&lt;/code&gt; shebang line to directly call your files:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ./script&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Call built-in scripts:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ciel -s simpleHTTPserver 9000&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See available built-in scripts with &lt;code&gt;--scripts&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://ciel-lang.github.io/CIEL/#/scripting&#34;&gt;the scripts documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Terminal REPL&lt;/h2&gt; &#xA;&lt;p&gt;CIEL ships a terminal REPL for the terminal which is more user friendly than the default SBCL one:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;it has readline capabilities, meaning that the arrow keys work by default (woohoo!) and there is a persistent history, like in any shell.&lt;/li&gt; &#xA; &lt;li&gt;it has &lt;strong&gt;multiline input&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;it has &lt;strong&gt;TAB completion&lt;/strong&gt;. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;including for files (after a bracket) and binaries in the PATH.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;it handles errors gracefully: you are not dropped into the debugger and its sub-REPL, you simply see the error message.&lt;/li&gt; &#xA; &lt;li&gt;it has optional &lt;strong&gt;syntax highlighting&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;it has a &lt;strong&gt;shell pass-through&lt;/strong&gt;: try &lt;code&gt;!ls&lt;/code&gt;. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;you can mix and match shell and Lisp: try &lt;code&gt;!echo ?(+ 1/3 1/3)&lt;/code&gt; (look, a fraction)&lt;/li&gt; &#xA;   &lt;li&gt;it runs &lt;strong&gt;interactive commands&lt;/strong&gt;: try &lt;code&gt;!htop&lt;/code&gt;, &lt;code&gt;!vim test.lisp&lt;/code&gt;, &lt;code&gt;!emacs -nw test.lisp&lt;/code&gt; or &lt;code&gt;!env FOO=BAR sudo -i powertop&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;it has &lt;strong&gt;documentation lookup&lt;/strong&gt; shorthands: use &lt;code&gt;:doc symbol&lt;/code&gt; or &lt;code&gt;?&lt;/code&gt; after a symbol to get its documentation: &lt;code&gt;ciel-user&amp;gt; (dict ?&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;it has &lt;strong&gt;developer friendly&lt;/strong&gt; macros: use &lt;code&gt;(printv code)&lt;/code&gt; for an annotated trace output.&lt;/li&gt; &#xA; &lt;li&gt;it has an optional &lt;strong&gt;lisp critic&lt;/strong&gt; that scans the code you enter at the REPL for instances of bad practices.&lt;/li&gt; &#xA; &lt;li&gt;and it defines some more helper commands.&lt;/li&gt; &#xA; &lt;li&gt;it works on Slime (to a certain extent)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The CIEL terminal REPL loads the &lt;code&gt;~/.cielrc&lt;/code&gt; init file at start-up if present. Don&#39;t load it with &lt;code&gt;--no-userinit&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;See more in &lt;a href=&#34;https://ciel-lang.github.io/CIEL/#/repl&#34;&gt;&lt;em&gt;the documentation&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] Our terminal readline REPL does NOT replace a good Common Lisp editor. You have more choices than Emacs. Check them out! &lt;a href=&#34;https://lispcookbook.github.io/cl-cookbook/editor-support.html&#34;&gt;https://lispcookbook.github.io/cl-cookbook/editor-support.html&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Run &lt;code&gt;ciel&lt;/code&gt; with no arguments:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ ciel&#xA;&#xA;CIEL&#39;s REPL version 0.1.5&#xA;Read more on packages with readme or summary. For example: (summary :str)&#xA;Special commands:&#xA;  %help =&amp;gt; Prints this general help message&#xA;  %doc =&amp;gt; Print the available documentation for this symbol.&#xA;  %? =&amp;gt; Gets help on a symbol &amp;lt;sym&amp;gt;: :? str&#xA;  %w =&amp;gt; Writes the current session to a file &amp;lt;filename&amp;gt;&#xA;  %d =&amp;gt; Dumps the disassembly of a symbol &amp;lt;sym&amp;gt;&#xA;  %t =&amp;gt; Prints the type of a expression &amp;lt;expr&amp;gt;&#xA;  %q =&amp;gt; Ends the session.&#xA;  %lisp-critic =&amp;gt; Enable or disable the lisp critic. He critizes the code you type before compiling it.&#xA;  %edit =&amp;gt; Edit a file with EDITOR and evaluate it.&#xA;Press CTRL-D or type :q to exit&#xA;&#xA;ciel-user&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It is freely based on &lt;a href=&#34;https://github.com/hellerve/sbcli&#34;&gt;sbcli&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;CIEL as a library: &#34;use&#34; :ciel in your Lisp systems&lt;/h2&gt; &#xA;&lt;p&gt;You can install and &lt;code&gt;quickload&lt;/code&gt; CIEL like any other Common Lisp library.&lt;/p&gt; &#xA;&lt;p&gt;To use it in your project, create a package and &#34;use&#34; &lt;code&gt;ciel&lt;/code&gt; in addition of &lt;code&gt;cl&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(defpackage yourpackage&#xA;  (:use :cl :ciel))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also use &lt;code&gt;generic-ciel&lt;/code&gt;, based on &lt;a href=&#34;https://github.com/alex-gutev/generic-cl/&#34;&gt;generic-cl&lt;/a&gt; (warn: generic-ciel is less tested at the moment).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;    (defpackage yourpackage&#xA;      (:use :cl :generic-ciel))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;generic-cl allows us to define our &lt;code&gt;+&lt;/code&gt; or &lt;code&gt;equalp&lt;/code&gt; methods for our own objects (and more).&lt;/p&gt; &#xA;&lt;h2&gt;Core image: configure your editor&lt;/h2&gt; &#xA;&lt;p&gt;The advantage of a core image is that it loads instantly, faster than a &lt;code&gt;(ql:quickload &#34;ciel&#34;)&lt;/code&gt;. We&#39;ll ask our editor to start SBCL with our CIEL core image.&lt;/p&gt; &#xA;&lt;p&gt;We&#39;ll configure SLIME for &lt;a href=&#34;https://common-lisp.net/project/slime/doc/html/Multiple-Lisps.html#Multiple-Lisps&#34;&gt;multiple Lisps&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You need to add this to your Emacs init file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(setq slime-lisp-implementations&#xA;      `((sbcl    (&#34;sbcl&#34; &#34;--dynamic-space-size&#34; &#34;2000&#34;))  ;; default. Adapt if needed.&#xA;        (ciel-sbcl  (&#34;sbcl&#34; &#34;--core&#34; &#34;/path/to/ciel/ciel-core&#34; &#34;--eval&#34; &#34;(in-package :ciel-user)&#34;))))&#xA;(setq slime-default-lisp &#39;ciel-sbcl)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and start a Lisp process with &lt;code&gt;M-x slime&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you didn&#39;t set &lt;code&gt;ciel-sbcl&lt;/code&gt; as the default, then start the Lisp process with &lt;code&gt;M-- M-x slime&lt;/code&gt; (alt-minus prefix), and choose &lt;code&gt;ciel-sbcl&lt;/code&gt;. You can start more than one Lisp process from SLIME.&lt;/p&gt; &#xA;&lt;p&gt;The Lisp process should start instantly, as fast as the default SBCL, you won&#39;t wait for the quicklisp libraries to load.&lt;/p&gt; &#xA;&lt;h1&gt;Libraries&lt;/h1&gt; &#xA;&lt;p&gt;We import, use and document libraries to fill various use cases: generic access to data structures, functional data structures, string manipulation, JSON, database access, web, URI handling, iteration helpers, type checking helpers, syntax extensions, developer utilities, etc.&lt;/p&gt; &#xA;&lt;p&gt;See the documentation.&lt;/p&gt; &#xA;&lt;p&gt;To see the full list of dependencies, see the &lt;code&gt;ciel.asd&lt;/code&gt; project definition or this &lt;a href=&#34;https://raw.githubusercontent.com/ciel-lang/CIEL/master/docs/dependencies.md&#34;&gt;dependencies list&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Language extensions&lt;/h1&gt; &#xA;&lt;p&gt;We provide arrow macros, easy type declaratons in the function lambda list, macros for exhaustiveness type checking, pattern matching, etc.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://ciel-lang.github.io/CIEL/#/language-extensions&#34;&gt;the documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Final words&lt;/h1&gt; &#xA;&lt;p&gt;That was your life in CL:&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ciel-lang/CIEL/master/docs/before.jpeg&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;and now:&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ciel-lang/CIEL/master/docs/after-plus.jpeg&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Misc: how to generate the documentation&lt;/h1&gt; &#xA;&lt;p&gt;See &lt;code&gt;src/ciel.lisp&lt;/code&gt; and run &lt;code&gt;(generate-dependencies-page-reference)&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Contributors&lt;/h1&gt; &#xA;&lt;p&gt;Special big thanks to @cinerion, &lt;a href=&#34;https://github.com/themarcelor&#34;&gt;@themarcelor&lt;/a&gt; and everyone who helped (@agam, @patrixl, @bo-tatoâ€¦).&lt;/p&gt; &#xA;&lt;h1&gt;Lisp?!&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/CodyReichert/awesome-cl&#34;&gt;awesome-cl&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://lispcookbook.github.io/cl-cookbook/&#34;&gt;the Common Lisp Cookbook&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://lispcookbook.github.io/cl-cookbook/editor-support.html&#34;&gt;editor support&lt;/a&gt; (Emacs, Vim, VSCode, Atom, Pulsar, Jetbrains, Sublime, Jupyter notebooksâ€¦)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/azzamsa/awesome-lisp-companies/&#34;&gt;Lisp companies&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;blog posts: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://lisp-journey.gitlab.io/blog/these-years-in-common-lisp-2022-in-review/&#34;&gt;these years in Lisp: 2022 in review&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://lisp-journey.gitlab.io/pythonvslisp/&#34;&gt;Python VS Common Lisp, workflow and ecosystem&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://stevelosh.com/blog/2018/08/a-road-to-common-lisp/&#34;&gt;A road to Common Lisp&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;ðŸŽ¥ &lt;a href=&#34;https://www.youtube.com/@vindarel&#34;&gt;Youtube showcases&lt;/a&gt;: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=jBBS4FeY7XM&#34;&gt;Debugging Lisp: fix and resume a program from any point in the stack&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=TAtwcBh1QLg&#34;&gt;How to call a REST API in Common Lisp: HTTP requests, JSON&amp;nbsp;parsing, CLI arguments, binaries&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;ðŸŽ¥ my &lt;a href=&#34;https://www.udemy.com/course/common-lisp-programming/?referralCode=2F3D698BBC4326F94358&#34;&gt;Common Lisp course in videos: from novice to efficient programmer&lt;/a&gt;, on the Udemy platform.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>