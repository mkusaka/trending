<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Common Lisp Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-12-03T01:46:54Z</updated>
  <subtitle>Weekly Trending of Common Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Interlisp/medley</title>
    <updated>2023-12-03T01:46:54Z</updated>
    <id>tag:github.com,2023-12-03:/Interlisp/medley</id>
    <link href="https://github.com/Interlisp/medley" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The main repo for the Medley Interlisp project. Wiki, Issues are here. Other repositories include maiko (the VM implementation) and Interlisp.github.io (web site sources)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Medley&lt;/h1&gt; &#xA;&lt;p&gt;This repository is for the Lisp environment of &lt;a href=&#34;https://Interlisp.org&#34;&gt;Medley Interlisp&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://github.com/Interlisp/medley/wiki/Documentation&#34;&gt;Documentation links&lt;/a&gt; for an overview and pointers to documentation. In particular &lt;a href=&#34;https://github.com/Interlisp/medley/wiki/Running&#34;&gt;Running&lt;/a&gt; explains other methods of getting Medley Interlisp.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Interlisp/maiko&#34;&gt;Interlisp/maiko&lt;/a&gt;, is the repo for the implementation (in C) of the Medley virtual machine.&lt;/p&gt; &#xA;&lt;h2&gt;Using releases&lt;/h2&gt; &#xA;&lt;p&gt;There currently are separate releases of medley and maiko; get the latest version of each.&lt;/p&gt; &#xA;&lt;h3&gt;Getting releases&lt;/h3&gt; &#xA;&lt;p&gt;Get the Maiko release &lt;a href=&#34;https://github.com/Interlisp/maiko/releases&#34;&gt;here&lt;/a&gt;. You&#39;ll need the .tgz file corresponding to your operating system and processor (for Windows with WSL or Intel Linux, use &lt;code&gt;linux.x86_64&lt;/code&gt;; for Macs use &lt;code&gt;darwin.x86_64&lt;/code&gt; for Intel and &lt;code&gt;darwin.aarch64&lt;/code&gt; for M1.)&lt;/p&gt; &#xA;&lt;p&gt;Or, build your own maiko (the binaries &lt;code&gt;lde&lt;/code&gt; &lt;code&gt;ldex&lt;/code&gt; and &lt;code&gt;ldeinit&lt;/code&gt;) We can build for other OS arch pairs depending on what is available for GitHub actions.&lt;/p&gt; &#xA;&lt;p&gt;The medley release comes in two parts, found &lt;a href=&#34;https://github.com/Interlisp/medley/releases&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;The &#34;loadups&#34; (download &lt;code&gt;medley-&lt;/code&gt;YYMMDD&lt;code&gt;-loadups.tgz&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;The &#34;runtime&#34; (download &lt;code&gt;medley-&lt;/code&gt;YYMMDD&lt;code&gt;-runtime.tgz&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;You don&#39;t need the &#34;runtime&#34; if you&#39;ve cloned this (medley) repo, but you&#39;ll still need the &#34;loadups&#34; release.&lt;/p&gt; &#xA;&lt;p&gt;If you happen to have the &#39;gh&#39; GitHub command line installed you can download both using&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;   gh release download -R Interlisp/medley -p &#34;*&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;but otherwise just click on the link(s) below to the parts you need.&lt;/p&gt; &#xA;&lt;h3&gt;Unpacking releases&lt;/h3&gt; &#xA;&lt;p&gt;From a shell/terminal window:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Choose where you want to install medley and maiko. Unpack the medley loadups file&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;cd &lt;/code&gt; &lt;del&gt;parent&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;tar xvzf medley-&lt;/code&gt;YYMMDD&lt;code&gt;-loadups.tgz&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Unpack the medley runtime OR clone the Medley repo (the &#34;medley runtime&#34; is just a subset of the whole repo)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;tar xvzf medley-&lt;/code&gt;YYMMDD&lt;code&gt;-runtime.tgz&lt;/code&gt;&lt;/p&gt; &lt;p&gt;OR&lt;/p&gt; &lt;pre&gt;&lt;code&gt;git clone https://github.com/Interlisp/medley&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;Unpack the maiko file for your operating system and CPU type, e.g.,&lt;/p&gt; &lt;pre&gt;&lt;code&gt;tar xvzf maiko-210823.linux.x86_64.tgz&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;This should leave you with two directories, &lt;code&gt;medley&lt;/code&gt; and &lt;code&gt;maiko&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Setting up X&lt;/h3&gt; &#xA;&lt;p&gt;Medley Interlisp currently needs an X-Server to manage its display. Most Linux desktops have one. Windows 11 with WSL includes an X-Server. For Windows 10 with WSL2, there are a number of open-source X servers; for example vcxsrv.&lt;/p&gt; &#xA;&lt;p&gt;Mac users should get &lt;a href=&#34;https://xquartz.org/releases&#34;&gt;XQuartz from XQuartz.org&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Medley manages the display entirely, doesn&#39;t use X fonts and manages it&#39;s own window system.&lt;/p&gt; &#xA;&lt;p&gt;If you have a high-resolution display, note that much of the graphics was designed for a low-resolution display, so an X-server that does &#34;pixel doublilng&#34; is best. (E.g., Raspberry Pi does pixel doubling on 4K displays.) It also presumes you have a 3-button mouse; the scroll-wheel on some mice act as one with some difficulty.) XQuartz Preferences/Input has &#34;Emulate three button mouse&#34; option.&lt;/p&gt; &#xA;&lt;h3&gt;Running Medley Interlisp&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;run-medley&lt;/code&gt; script in this repo sets up some convenient defaults. Running Medley can be done by typing:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cd medley&#xA;$ ./run-medley&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or, if you wish to start Medley up with a different SYSOUT:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cd medley&#xA;$ ./run-medley &amp;lt;SYSOUT-file-name&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The first time the system is run it loads the system image that comes with the system. When you exit the system (or &#34;do a &lt;code&gt;SaveVM&lt;/code&gt;&#34; menu option) the state of your machine is saved in a file named &lt;code&gt;~/lisp.virtualmem&lt;/code&gt;. Subsequent system startups load the &lt;code&gt;~/lisp.virtualmem&lt;/code&gt; image by default.&lt;/p&gt; &#xA;&lt;h3&gt;Exiting The System&lt;/h3&gt; &#xA;&lt;p&gt;The system may be exited from the Interlisp prompt by typing:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(LOGOUT)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or from the Common Lisp prompt with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(IL:LOGOUT)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When you log out of the system, Medley automatically creates a binary dump of your system located in your home directory named &lt;code&gt;lisp.virtualmem&lt;/code&gt;. The next time you run the system, if you don&#39;t specify a specific image to run, Medley restores that image so that you can continue right where you left off.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://interlisp.org/doc/info/Using.html&#34;&gt;Using Medley Interlisp&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Naming conventions and directory structure&lt;/h2&gt; &#xA;&lt;p&gt;File Names and Extensions: Most Interlisp source file names are UPPERCASE and Interlisp didn&#39;t use file extensions for its source files. A .TEDIT or .TXT file is probably documentation for the package of same name, at least in the library, lispusers.&lt;/p&gt; &#xA;&lt;p&gt;The current repo has both Lisp sources and compiled .LCOM and .DFASL files.&lt;/p&gt; &#xA;&lt;p&gt;Each directory should have a README.md, but briefly&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;BUILDING.md -- instructions on how to make your own loadups&lt;/li&gt; &#xA; &lt;li&gt;clos -- early implementation of Common Lisp Object System&lt;/li&gt; &#xA; &lt;li&gt;CLTL2 -- files submitted to bring Medley up to the conformance to &#34;Common Lisp, the Language&#34; 2nd edition. Not enough to conform to the ANSII standard lisp.&lt;/li&gt; &#xA; &lt;li&gt;Dockerfile -- used when building Docker containers with Medley&lt;/li&gt; &#xA; &lt;li&gt;docs -- Documentation files (in TEdit format PDFs or online help; look &lt;a href=&#34;https://github.com/Interlisp/medley/Documentation&#34;&gt;here&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;fonts -- raster fonts (or font widths) in various resolutions for display, postscript, interpress, press formats&lt;/li&gt; &#xA; &lt;li&gt;greetfiles -- various configuration setups&lt;/li&gt; &#xA; &lt;li&gt;internal -- These &lt;em&gt;were&lt;/em&gt; internal to Venue&lt;/li&gt; &#xA; &lt;li&gt;library -- packages that were supported (30 years ago)&lt;/li&gt; &#xA; &lt;li&gt;lispusers -- User contributed packages that were only half supported (ditto)&lt;/li&gt; &#xA; &lt;li&gt;loadups -- has sysouts and other builds plus a few remnants&lt;/li&gt; &#xA; &lt;li&gt;obsolete -- files we should remove from the repo&lt;/li&gt; &#xA; &lt;li&gt;rooms -- implementation of ROOMS window/desktop manager&lt;/li&gt; &#xA; &lt;li&gt;run-medley -- script to enhance the options of running medley&lt;/li&gt; &#xA; &lt;li&gt;scripts -- some scripts for fixing up things&lt;/li&gt; &#xA; &lt;li&gt;sources -- sources for Interlisp and Common Lisp implementations&lt;/li&gt; &#xA; &lt;li&gt;unicode -- data files for support of XCCS to and from Unicode mappings&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;plus Dockerfile, and scripts for building and running medley tmp directory for use during build processes&lt;/p&gt;</summary>
  </entry>
</feed>