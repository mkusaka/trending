<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Common Lisp Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-01-14T01:52:33Z</updated>
  <subtitle>Weekly Trending of Common Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>thinkphp/lisp-training</title>
    <updated>2024-01-14T01:52:33Z</updated>
    <id>tag:github.com,2024-01-14:/thinkphp/lisp-training</id>
    <link href="https://github.com/thinkphp/lisp-training" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Experiments with ANSI Common Lisp&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Lisp-training&lt;/h1&gt; &#xA;&lt;p&gt;Lisp training&lt;/p&gt; &#xA;&lt;h1&gt;Usage&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ git clone git://github.com/thinkphp/lisp-training.git&#xA;$ cd lisp-training&#xA;$ clisp&#xA;$ [1]&amp;gt; (load &#34;sum.lsp&#34;)&#xA;$ ;; Loading file sum.lsp ...&#xA;$ ;; Loaded file sum.lsp&#xA;$ [2]&amp;gt; (makesum 100)&#xA;$ =&amp;gt; 5050&#xA;$ [3]&amp;gt; (exit)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;DEMOS&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://ideone.com/eysCTu&#34;&gt;https://ideone.com/eysCTu&lt;/a&gt; (GCD)&lt;/p&gt; &#xA;&lt;h2&gt;Resources&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://norvig.com/&#34;&gt;http://norvig.com&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://cs.gmu.edu/~sean/lisp/&#34;&gt;http://cs.gmu.edu/~sean/lisp/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www2.cs.sfu.ca/CourseCentral/310/pwfong/Lisp/&#34;&gt;http://www2.cs.sfu.ca/CourseCentral/310/pwfong/Lisp/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://psg.com/~dlamkins/sl/contents.html&#34;&gt;http://psg.com/~dlamkins/sl/contents.html&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.gigamonkeys.com/book/&#34;&gt;http://www.gigamonkeys.com/book/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://sunburn.stanford.edu/~nick/compdocs/LISP_Examples.pdf&#34;&gt;http://sunburn.stanford.edu/~nick/compdocs/LISP_Examples.pdf&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://2k8618.blogspot.ro/p/lisp-programs.html&#34;&gt;http://2k8618.blogspot.ro/p/lisp-programs.html&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.anselm.edu/internet/compsci/Faculty_Staff/mmalita/HOMEPAGE/cuLisp/index.html&#34;&gt;http://www.anselm.edu/internet/compsci/Faculty_Staff/mmalita/HOMEPAGE/cuLisp/index.html&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://norvig.com/paip.html&#34;&gt;http://norvig.com/paip.html&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.okazii.ro/recomandate/carti-it/limbaje-programare/antrenamente-lisp-mihaela-malita-a55230982&#34;&gt;http://www.okazii.ro/recomandate/carti-it/limbaje-programare/antrenamente-lisp-mihaela-malita-a55230982&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;MIT&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>leadnose/tsoha</title>
    <updated>2024-01-14T01:52:33Z</updated>
    <id>tag:github.com,2024-01-14:/leadnose/tsoha</id>
    <link href="https://github.com/leadnose/tsoha" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Tietokantasovellus-kurssin harjoitustyö&lt;/p&gt;&lt;hr&gt;&lt;p&gt;About Common Lisp:&lt;/p&gt; &#xA;&lt;p&gt;COMMENTS start with ; and continue to end of line.&lt;/p&gt; &#xA;&lt;p&gt;STRINGS look like &#34;this&#34;, just like in most other languages.&lt;/p&gt; &#xA;&lt;p&gt;NUMBERS look like numbers in most languages, but 1/3 denotes a rational number, not a division operation, and 2/6 would be the same as 1/3.&lt;/p&gt; &#xA;&lt;p&gt;PACKAGES are somewhat like packages in Java, and in this app they are all defined in the file `packages.lisp´. They define what names are visible to the outside of packages.&lt;/p&gt; &#xA;&lt;p&gt;MACROS look like function calls but are called (expanded) before compilation. Macros are not really important in this app, but there are few typical macro-usages in this app, eg.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(with-connection&#xA;   &amp;lt;code that uses the database&amp;gt;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This means that the database connection is established before entering the body of the expression, and database is disconnected after it, regardless of whether the body exited normally or if it raised an error. In Java that would look something like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Connection connection = null;&#xA;try {&#xA;    connection = new Connection(foo, bar);&#xA;    &amp;lt;code that uses the database&amp;gt;&#xA;} finally {&#xA;    if (connection != null)&#xA;    connection.close();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This idiom of macros starting with &#34;WITH-&#34; is quite common and it is almost always used like this, to acquire some resource, execute code that uses the resource, and release the resource, all in controlled and concise manner.&lt;/p&gt;</summary>
  </entry>
</feed>