<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Common Lisp Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-05T02:09:06Z</updated>
  <subtitle>Weekly Trending of Common Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>rattmuffen/twtg.cl</title>
    <updated>2022-06-05T02:09:06Z</updated>
    <id>tag:github.com,2022-06-05:/rattmuffen/twtg.cl</id>
    <link href="https://github.com/rattmuffen/twtg.cl" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An implementation on Dijkstras algorightm in LISP on a model of swedish highways.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;TheWayToGo&lt;/h1&gt; &#xA;&lt;p&gt;TheWayToGo is an implementation of Dijkstra&#39;s pathfinding algorithm. It uses a model of Swedish cities and highways as nodes and connections. It&#39;s commented and documented in Swedish.&lt;/p&gt; &#xA;&lt;h2&gt;Misc&lt;/h2&gt; &#xA;&lt;p&gt;By &lt;a href=&#34;http://www.rattmuffen.st&#34;&gt;rattmuffen&lt;/a&gt; and Jasmin Khran back in 2009.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>atlas-engineer/nyxt</title>
    <updated>2022-06-05T02:09:06Z</updated>
    <id>tag:github.com,2022-06-05:/atlas-engineer/nyxt</id>
    <link href="https://github.com/atlas-engineer/nyxt" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Nyxt - the hacker&#39;s power-browser.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#+html: &lt;img src=&#34;https://nyxt.atlas.engineer/static/image/nyxt_256x256.png&#34; align=&#34;right&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Nyxt browser&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;Nyxt&lt;/em&gt; is a keyboard-driven web browser designed for power users. Inspired by Emacs and Vim, it has familiar keybindings ([[https://en.wikipedia.org/wiki/Emacs][Emacs]], [[https://en.wikipedia.org/wiki/Vim_(text_editor)][vi]], [[https://en.wikipedia.org/wiki/IBM_Common_User_Access][CUA]]), and is infinitely extensible in Lisp.&lt;/p&gt; &#xA;&lt;p&gt;If you like Nyxt and you would like to help future development, please give us a star, spread the word, and support us on [[https://www.patreon.com/nyxt][Patreon]], thank you!&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Attention:&lt;/em&gt; Nyxt is under active development. Feel free to [[https://github.com/atlas-engineer/nyxt/issues][report]] bugs, instabilities or feature wishes.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;#+html: &lt;/p&gt;&#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a href=&#34;http://nyxt.atlas.engineer/&#34;&gt;Homepage&lt;/a&gt; | &#xA; &lt;a href=&#34;https://nyxt.atlas.engineer/download&#34;&gt;Downloads&lt;/a&gt; | &#xA; &lt;a href=&#34;https://nyxt.atlas.engineer/articles&#34;&gt;Articles&lt;/a&gt; | &#xA; &lt;a href=&#34;https://store.nyxt.atlas.engineer/&#34;&gt;Store&lt;/a&gt; | &#xA; &lt;a href=&#34;https://github.com/atlas-engineer/nyxt/raw/master/documents/README.org&#34;&gt;Developer&#39;s Manual&lt;/a&gt; | &#xA; &lt;a href=&#34;https://discourse.atlas.engineer/&#34;&gt;Forum&lt;/a&gt; | &#xA; &lt;a href=&#34;https://kiwiirc.com/nextclient/irc.libera.chat/nyxt&#34;&gt;Chat&lt;/a&gt; &#xA;&lt;/div&gt;&#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Features For an exhaustive description of all of the features, please refer to the manual.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Fast tab switching&lt;/p&gt; &#xA;&lt;p&gt;Switch easily between your open tabs via fuzzy search. If you are looking for &lt;del&gt;&lt;a href=&#34;https://www.example.com&#34;&gt;https://www.example.com&lt;/a&gt;&lt;/del&gt;, you could type in &lt;del&gt;ele&lt;/del&gt;, &lt;del&gt;exa&lt;/del&gt;, &lt;del&gt;epl&lt;/del&gt;, or any other matching series of letters.&lt;/p&gt; &#xA;&lt;p&gt;#+html: &lt;img src=&#34;https://nyxt.atlas.engineer/static/image/switch-buffer.png?&#34; align=&#34;center&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;** Multiple selection&lt;/p&gt; &#xA;&lt;p&gt;Commands can accept multiple inputs, allowing you to quickly perform an operation against multiple objects. In the example below we search for cactuses, and open up several images simultaneously:&lt;/p&gt; &#xA;&lt;p&gt;#+html: &lt;img src=&#34;https://nyxt.atlas.engineer/static/image/multi-select.png?&#34; align=&#34;center&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;** Powerful bookmarks&lt;/p&gt; &#xA;&lt;p&gt;Bookmark a page with tags. Search bookmarks with compound queries. Capture more data about your bookmarks, and group and wrangle them in any way you like.&lt;/p&gt; &#xA;&lt;p&gt;#+html: &lt;img src=&#34;https://nyxt.atlas.engineer/static/image/bookmark.png?&#34; align=&#34;center&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;** Multi tab search&lt;/p&gt; &#xA;&lt;p&gt;Search multiple tabs at the same time, and view all the results in a single window. Jump quickly through your open tabs to find what you need.&lt;/p&gt; &#xA;&lt;p&gt;#+html: &lt;img src=&#34;https://nyxt.atlas.engineer/static/image/multi-search.png?&#34; align=&#34;center&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;** History as a tree&lt;/p&gt; &#xA;&lt;p&gt;History is represented as a tree that you can traverse. Smarter than the &#34;forwards-backwards&#34; abstraction found in other browsers, the tree makes sure you never lose track of where you&#39;ve been.&lt;/p&gt; &#xA;&lt;p&gt;#+html: &lt;img src=&#34;https://nyxt.atlas.engineer/static/image/history.png?&#34; align=&#34;center&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Getting started ** Install Nyxt&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Nyxt supports:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;GNU/Linux&lt;/li&gt; &#xA; &lt;li&gt;macOS (unofficial)&lt;/li&gt; &#xA; &lt;li&gt;FreeBSD (unofficial)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Nyxt has engine support for WebKit and &lt;em&gt;experimental support&lt;/em&gt; for WebEngine/Blink.&lt;/p&gt; &#xA;&lt;p&gt;Please find pre-built binaries at [[https://nyxt.atlas.engineer/download][Nyxt&#39;s downloads page]]. Nyxt is available on the following platforms:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Alpine.&lt;/li&gt; &#xA; &lt;li&gt;Debian and derivatives such as Ubuntu and Linux Mint.&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/atlas-engineer/ports][MacPorts]].&lt;/li&gt; &#xA; &lt;li&gt;[[https://archlinux.org/][Arch Linux]]: Install with =pacman -Syu nyxt=.&lt;/li&gt; &#xA; &lt;li&gt;[[https://nixos.org/nix/][Nix]]: Install with =nix-env --install nyxt=.&lt;/li&gt; &#xA; &lt;li&gt;[[https://guix.gnu.org][Guix]]: Install with =guix install nyxt=.&lt;/li&gt; &#xA; &lt;li&gt;[[https://voidlinux.org/][Void]]: Install with =xbps-install nyxt=.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To install from source, please refer to the [[file:documents/README.org][developer&#39;s manual]].&lt;/p&gt; &#xA;&lt;p&gt;** Documentation &amp;amp; Customization&lt;/p&gt; &#xA;&lt;p&gt;For full documentation about Nyxt, how it works, and how to extend it please refer to the embedded manual. To get started, run the =manual= command (press =control= + =space=, type =manual= and confirm with =return=).&lt;/p&gt; &#xA;&lt;p&gt;If you want to help with development, or build Nyxt from source, read the developer&#39;s documentation at [[file:documents/README.org][documents/README.org]].&lt;/p&gt; &#xA;&lt;p&gt;** History of changes&lt;/p&gt; &#xA;&lt;p&gt;If you are running a recent version of Nyxt please run the =changelog= command. For older versions, please refer to the [[https://github.com/atlas-engineer/nyxt/blob/2.2.1/documents/CHANGELOG.org][CHANGELOG]].&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>google/lisp-koans</title>
    <updated>2022-06-05T02:09:06Z</updated>
    <id>tag:github.com,2022-06-05:/google/lisp-koans</id>
    <link href="https://github.com/google/lisp-koans" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Common Lisp Koans is a language learning exercise in the same vein as the ruby koans, python koans and others. It is a port of the prior koans with some modifications to highlight lisp-specific features. Structured as ordered groups of broken unit tests, the project guides the learner progressively through many Common Lisp language features.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Lisp Koans&lt;/h1&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;h3&gt;One-time Method&lt;/h3&gt; &#xA;&lt;p&gt;From a terminal, execute your lisp interpreter on the file &#39;contemplate.lisp&#39; e.g.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;abcl --noinform --noinit --load contemplate.lisp --eval &#39;(quit)&#39;&#xA;ccl -n -l contemplate.lisp -e &#39;(quit)&#39;&#xA;clisp -q -norc -ansi contemplate.lisp&#xA;ecl -norc -load contemplate.lisp -eval &#39;(quit)&#39;&#xA;sbcl --script contemplate.lisp&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Watching the Koans&lt;/h3&gt; &#xA;&lt;p&gt;On Linux and MacOS systems, the shell scripts &lt;code&gt;meditate-linux.sh&lt;/code&gt; and &lt;code&gt;meditate-macos.sh&lt;/code&gt; can be used to automatically evaluate &#39;contemplate.lisp&#39; whenever the koan files are modified, providing immediate feedback on changes to the koans. To run the MacOS version you need to have &lt;a href=&#34;https://github.com/emcrisostomo/fswatch&#34;&gt;&lt;code&gt;fswatch&lt;/code&gt;&lt;/a&gt; installed. From a terminal:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cd lisp-koans&#xA;$ sh meditate-linux.sh # on Linux&#xA;$ sh meditate-macos.sh # on MacOS&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Results of Contemplation&lt;/h2&gt; &#xA;&lt;p&gt;Running on a fresh version should output the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Thinking about ASSERTS&#xA;    FILL-IN-THE-BLANKS requires more meditation.&#xA;&#xA;You have not yet reached enlightenment.&#xA;    A koan is incomplete.&#xA;Please meditate on the following code:&#xA;    File &#34;koans/asserts.lisp&#34;&#xA;    Koan &#34;FILL-IN-THE-BLANKS&#34;&#xA;    Current koan assert status is &#34;(INCOMPLETE INCOMPLETE INCOMPLETE)&#34;&#xA;&#xA;You are now 0/198 koans and 0/31 lessons closer to reaching enlightenment.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This indicates that the script has completed, and that the learner should look to asserts.lisp to locate and fix the problem. The problem will be within a define-test expression such as&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;;;; In order to progress, fill in the blanks, denoted via ____ in source code.&#xA;;;; Sometimes, you will be asked to provide values that are equal to something.&#xA;&#xA;(define-test fill-in-the-blanks&#xA;  (assert-equal ____ 2)&#xA;  (assert-equal ____ 3.14)&#xA;  (assert-equal ____ &#34;Hello World&#34;))&#xA;&#xA;;;; Sometimes, you will be asked to say whether something is true or false,&#xA;;;; In Common Lisp, the canonical values for truth and falsehood are T and NIL.&#xA;&#xA;(define-test assert-true&#xA;  (assert-true ____))&#xA;&#xA;(define-test assert-false&#xA;  (assert-false ____))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In this case, the test is incomplete, and the student should fill in the blank (____) with appropriate lisp code to make the assert pass.&lt;/p&gt; &#xA;&lt;p&gt;In order to test code, or evaluate tests interactively, students may copy and paste code into the lisp command line REPL.&lt;/p&gt; &#xA;&lt;h3&gt;Testing&lt;/h3&gt; &#xA;&lt;p&gt;To test the koans, execute your lisp interpreter on the file &#39;contemplate.lisp&#39; e.g.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;abcl --noinform --noinit --load test.lisp --eval &#39;(quit)&#39;&#xA;ccl -n -l test.lisp -e &#39;(quit)&#39;&#xA;clisp -q -norc -ansi test.lisp&#xA;ecl -norc -load test.lisp -eval &#39;(quit)&#39;&#xA;sbcl --script test.lisp&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Quoting the Ruby Koans instructions&lt;/h2&gt; &#xA;&lt;p&gt;&#34;In test-driven development the mantra has always been, red, green, refactor. Write a failing test and run it (red), make the test pass (green), then refactor it (that is look at the code and see if you can make it any better). In this case you will need to run the koan and see it fail (red), make the test pass (green), then take a moment and reflect upon the test to see what it is teaching you and improve the code to better communicate its intent (refactor).&#34;&lt;/p&gt; &#xA;&lt;h2&gt;Content&lt;/h2&gt; &#xA;&lt;p&gt;The Common Lisp koans are based on the Python koans and Ruby koans projects. Additionally, many of the tests are based on new material that is special to Common Lisp.&lt;/p&gt; &#xA;&lt;p&gt;Note that the unit on threads uses bordeaux-threads and bt-semaphore. The user must have Quicklisp installed and loaded or a reader macro will remove the instructions to run :threads. For information and instructions on installing Quicklisp please see: &lt;a href=&#34;https://www.quicklisp.org/beta/&#34;&gt;https://www.quicklisp.org/beta/&lt;/a&gt; The user can either remove #+quicklisp and uncomment (load &#34;~/.quicklisp/setup.lisp&#34;) in threads.lisp, or if they know quicklisp will be loaded while running contemplate.lisp do nothing.&lt;/p&gt;</summary>
  </entry>
</feed>