<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dockerfile Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-03-29T01:34:49Z</updated>
  <subtitle>Daily Trending of Dockerfile in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>AL-V-0x0005/Auto-AList-docker-for-Zeabur</title>
    <updated>2023-03-29T01:34:49Z</updated>
    <id>tag:github.com,2023-03-29:/AL-V-0x0005/Auto-AList-docker-for-Zeabur</id>
    <link href="https://github.com/AL-V-0x0005/Auto-AList-docker-for-Zeabur" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Auto-AList-docker-for-Zeabur&lt;/h1&gt; &#xA;&lt;h3&gt;如何使用？&lt;/h3&gt; &#xA;&lt;p&gt;Fork到自己的仓库，然后在Zeabur中使用Github仓库部署，找到Fork的[Auto-AList-docker-for-Zeabur]，部署即可，建议白嫖一个数据库，这样每次更新部署就不用来回备份与恢复了&lt;/p&gt; &#xA;&lt;h2&gt;数据库&lt;/h2&gt; &#xA;&lt;p&gt;一些免费数据库:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://db4free.net/&#34;&gt;https://db4free.net/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://remotemysql.com/&#34;&gt;https://remotemysql.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.freesqldatabase.com/&#34;&gt;https://www.freesqldatabase.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://planetscale.com/&#34;&gt;https://planetscale.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://bit.io/&#34;&gt;https://bit.io/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.elephantsql.com/&#34;&gt;https://www.elephantsql.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://scalingo.com/&#34;&gt;https://scalingo.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://cloud.yugabyte.com/&#34;&gt;http://cloud.yugabyte.com/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;如何更改数据库？&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;在 Variable 中添加变量&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;  &#34;DB_TYPE&#34;:&#34;mysql&#34;,&#xA;  &#34;DB_HOST&#34;:&#34;sql.com&#34;,&#xA;  &#34;DB_PORT&#34;:&#34;3306&#34;,&#xA;  &#34;DB_USER&#34;:&#34;账号&#34;,&#xA;  &#34;DB_PASS&#34;:&#34;密码&#34;,&#xA;  &#34;DB_NAME&#34;:&#34;数据名称&#34;,&#xA;  &#34;DB_TABLE_PREFIX&#34;:&#34;alist_&#34;,&#xA;  &#34;DB_SSL_MODE&#34;:&#34;true&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;数据库是私有的，因此您无需担心泄露数据。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;bit数据库示例 &lt;a href=&#34;https://bit.io&#34;&gt;https://bit.io&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;  &#34;DB_TYPE&#34;: &#34;postgres&#34;,&#xA;  &#34;DB_HOST&#34;: &#34;db.bit.io&#34;,&#xA;  &#34;DB_PORT&#34;: &#34;5432&#34;,&#xA;  &#34;DB_USER&#34;: &#34;账号&#34;,&#xA;  &#34;DB_PASS&#34;: &#34;密码&#34;,&#xA;  &#34;DB_NAME&#34;: &#34;账号/数据库名称&#34;,&#xA;  &#34;DB_TABLE_PREFIX&#34;: &#34;alist_&#34;,&#xA;  &#34;DB_SSL_MODE&#34;: &#34;require&#34;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;db4free示例 &lt;a href=&#34;https://db4free.net&#34;&gt;https://db4free.net&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;  &#34;DB_TYPE&#34;: &#34;mysql&#34;, &#xA;  &#34;DB_HOST&#34;: &#34;db4free.net&#34;, &#xA;  &#34;DB_PORT&#34;: &#34;3306&#34;, &#xA;  &#34;DB_USER&#34;: &#34;账号&#34;, &#xA;  &#34;DB_PASS&#34;: &#34;密码&#34;, &#xA;  &#34;DB_NAME&#34;: &#34;数据库名称&#34;, &#xA;  &#34;DB_TABLE_PREFIX&#34;: &#34;alist_&#34;, &#xA;  &#34;DB_SSL_MODE&#34;: &#34;false&#34; &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;密码&lt;/h2&gt; &#xA;&lt;p&gt;初始密码是随机生成的，您可以通过检查控制台日志/查看数据库来获取它。&lt;/p&gt; &#xA;&lt;p&gt;请勿滥用！&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>marosc/dbs-docker</title>
    <updated>2023-03-29T01:34:49Z</updated>
    <id>tag:github.com,2023-03-29:/marosc/dbs-docker</id>
    <link href="https://github.com/marosc/dbs-docker" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Docker file for subject Database systems&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>ome/devspace</title>
    <updated>2023-03-29T01:34:49Z</updated>
    <id>tag:github.com,2023-03-29:/ome/devspace</id>
    <link href="https://github.com/ome/devspace" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Continuous integration tool for OME projects&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Getting started&lt;/h1&gt; &#xA;&lt;p&gt;Devspace is a Continuous Integration tool managed by &lt;a href=&#34;https://jenkins.io/&#34;&gt;Jenkins CI&lt;/a&gt; providing an automation framework that runs repeated jobs. The default deployment initializes a Jenkins CI master with a predefined set of jobs.&lt;/p&gt; &#xA;&lt;p&gt;Running and maintaining Devspace requires brief understanding of:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.docker.com/&#34;&gt;Docker engine&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.docker.com/compose/&#34;&gt;Docker compose&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Running Devspace requires access to SSH and Git configuration files used for fetching and pushing the Git repositories.&lt;/p&gt; &#xA;&lt;p&gt;Devspace code depends on the following repositories:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ome/omero-install/&#34;&gt;OMERO install&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ome/devslave-c7-docker&#34;&gt;devslave-c7-docker&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;p&gt;The following instructions explain how to deploy a devspace on a Docker host.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Log into the Docker host using ssh&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Install the prerequisites &lt;a href=&#34;https://docs.docker.com/&#34;&gt;Docker engine&lt;/a&gt; and &lt;a href=&#34;https://docs.docker.com/compose/&#34;&gt;Docker compose&lt;/a&gt; either globally or in a virtual environment:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;$ pip install docker-compose&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Create a directory &lt;code&gt;/data/username&lt;/code&gt; and change ownership:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;$ sudo mkdir /data/username&#xA;$ sudo chown username /data/username&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Clone the &lt;code&gt;devspace&lt;/code&gt; Git repository:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;$ git clone https://github.com/ome/devspace.git&#xA;$ cd devspace&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Generated self-signed SSL certificates for the Jenkins and NGINX containers:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;$ ./sslcert jenkins/sslcert HOST_IP&#xA;$ ./sslcert nginx/sslcert HOST_IP&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;alternatively put your own certificate &lt;code&gt;.crt and .key&lt;/code&gt; in the above locations.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Copy the SSH and Git configuration files used for fetching and pushing the Git repositories under &lt;code&gt;slave/.ssh&lt;/code&gt; and &lt;code&gt;slave/.gitconfig&lt;/code&gt;. This is usually your own SSH and Git configuration files. You need to use a public key without a passphrase and a &lt;code&gt;.gitconfig&lt;/code&gt; file containing the following sections:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;[user]&#xA;   name = YOUR_NAME&#xA;   email = YOUR_EMAIL&#xA;[github]&#xA;    token = YOUR_GITHUB_TOKEN&#xA;    user = YOUR_GITHUB_NAME&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run &lt;code&gt;rename.py&lt;/code&gt; to match your topic name. Specify the Git user corresponding to the confguration files used above. If you do not yet have topic branches available on origin, use &lt;code&gt;develop&lt;/code&gt; or one of the main branches:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;$ ./rename.py MYTOPIC --user git_user&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;This will also replace the &lt;code&gt;USER_ID&lt;/code&gt; of the various Dockerfile with the ID of the user who will run the devspace, assumed to be: &lt;code&gt;id -u&lt;/code&gt;, i.e. the current user.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Set the environment variables in &lt;code&gt;.env&lt;/code&gt;, especially:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;JENKINS_USERNAME=devspace&#xA;JENKINS_PASSWORD=&amp;lt;password&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Optionally, commit all the deployment changes above on the local clone of the devspace repository.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Start and configure:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Build devspace using &lt;code&gt;docker-compose&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;$ docker-compose -f docker-compose.yml build &#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Start devspace using &lt;code&gt;docker-compose&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;$ docker-compose -f docker-compose.yml up -d&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;By default, this will use the name of the directory as the project name. In the case of a shared Docker host, it is possible to override the project name using&lt;/p&gt; &lt;pre&gt;&lt;code&gt;$ docker-compose up -p my_project -d&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Retrieve the dynamic port of the Jenkins NGINX container. You can access the Jenkins UI from https://HOST_IP:PORT after accepting the self-signed certificate:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;$ docker-compose -p my_project port nginxjenkins 443&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Create the &lt;code&gt;maven-internal&lt;/code&gt; Nexus repository:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;$ docker-compose exec nexus /nexus-data/createRepoMavenInternal.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[Optional] Turn on Basic HTTP authentication for Jenkins&lt;/p&gt; &lt;pre&gt;&lt;code&gt;sudo htpasswd -c jenkins/conf.d/passwdfile nginx&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;and update &lt;code&gt;jenkins/conf.d/jenkins.conf&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;auth_basic &#34;Restricted&#34;;&#xA;auth_basic_user_file /etc/nginx/conf.d/passwdfile;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;GitHub OAuth&lt;/h1&gt; &#xA;&lt;p&gt;You can optionally enable GitHub OAuth:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Copy &lt;a href=&#34;https://raw.githubusercontent.com/ome/devspace/master/home/init.groovy.d/github-oauth.groovy.disabled&#34;&gt;&lt;code&gt;home/init.groovy.d/github-oauth.groovy.disabled&lt;/code&gt;&lt;/a&gt; to &lt;code&gt;home/init.groovy.d/github-oauth.groovy&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Create a &lt;a href=&#34;https://github.com/settings/applications/new&#34;&gt;new GitHub app&lt;/a&gt; and edit the variables at the top of &lt;code&gt;home/init.groovy.d/github-oauth.groovy&lt;/code&gt;. The script also gives details of the required GitHub OAuth callback.&lt;/li&gt; &#xA; &lt;li&gt;Restart Jenkins&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Note: if you are modifying an existing devspace you are advised to backup &lt;code&gt;home/config.xml&lt;/code&gt;. If there are errors in the GitHub setup you can restore &lt;code&gt;home/config.xml&lt;/code&gt; to return to the default authentication.&lt;/p&gt; &#xA;&lt;p&gt;After the script has completed you can either leave it in place so it will override any manual changes on restart, or delete it and make changes through the Jenkins UI.&lt;/p&gt; &#xA;&lt;h1&gt;Job configurations&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;When running the OMERO-build job for the first time, select the &lt;code&gt;PURGE_DATA&lt;/code&gt; option to create the database.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Job workflow&lt;/h1&gt; &#xA;&lt;p&gt;The default deployment initializes a Jenkins server with a &lt;a href=&#34;https://raw.githubusercontent.com/ome/devspace/master/home/jobs&#34;&gt;predefined set of jobs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The table below lists the job names, the Jenkins node labels and the associated docker they are associated with and a short description of the jobs.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Job name&lt;/th&gt; &#xA;   &lt;th&gt;Name&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;th&gt;docker name&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Trigger&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Runs all the following jobs in order&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;BIOFORMATS-push&lt;/td&gt; &#xA;   &lt;td&gt;testintegration&lt;/td&gt; &#xA;   &lt;td&gt;Merges all Bio-Formats PRs&lt;/td&gt; &#xA;   &lt;td&gt;devspace_testintegration_1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;BIOFORMATS-build&lt;/td&gt; &#xA;   &lt;td&gt;testintegration&lt;/td&gt; &#xA;   &lt;td&gt;Builds Bio-Formats components&lt;/td&gt; &#xA;   &lt;td&gt;devspace_testintegration_1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;BIOFORMATS-image&lt;/td&gt; &#xA;   &lt;td&gt;testintegration&lt;/td&gt; &#xA;   &lt;td&gt;Builds a Docker image of Bio-Formats&lt;/td&gt; &#xA;   &lt;td&gt;devspace_docker_1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;OMERO-push&lt;/td&gt; &#xA;   &lt;td&gt;testintegration&lt;/td&gt; &#xA;   &lt;td&gt;Merges all OMERO PRs&lt;/td&gt; &#xA;   &lt;td&gt;devspace_testintegration_1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;OMERO-build&lt;/td&gt; &#xA;   &lt;td&gt;testintegration&lt;/td&gt; &#xA;   &lt;td&gt;Builds OMERO artifacts (server, clients)&lt;/td&gt; &#xA;   &lt;td&gt;devspace_testintegration_1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;OMERO-server&lt;/td&gt; &#xA;   &lt;td&gt;omero&lt;/td&gt; &#xA;   &lt;td&gt;Deploys an OMERO.server&lt;/td&gt; &#xA;   &lt;td&gt;devspace_omero_1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;OMERO-web&lt;/td&gt; &#xA;   &lt;td&gt;web&lt;/td&gt; &#xA;   &lt;td&gt;Deploys an OMERO.web client&lt;/td&gt; &#xA;   &lt;td&gt;devspace_web_1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;OMERO-test-integration&lt;/td&gt; &#xA;   &lt;td&gt;testintegration&lt;/td&gt; &#xA;   &lt;td&gt;Runs the OMERO integration tests&lt;/td&gt; &#xA;   &lt;td&gt;devspace_testintegration_1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;OMERO-robot&lt;/td&gt; &#xA;   &lt;td&gt;testintegration&lt;/td&gt; &#xA;   &lt;td&gt;Runs the Robot tests&lt;/td&gt; &#xA;   &lt;td&gt;devspace_testintegration_1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;nginx&lt;/td&gt; &#xA;   &lt;td&gt;nginx&lt;/td&gt; &#xA;   &lt;td&gt;Reloads the nginx server&lt;/td&gt; &#xA;   &lt;td&gt;devspace_nginx_1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;OMERO-docs&lt;/td&gt; &#xA;   &lt;td&gt;testintegration&lt;/td&gt; &#xA;   &lt;td&gt;Builds the OMERO documentation&lt;/td&gt; &#xA;   &lt;td&gt;devspace_testintegration_1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;This means that by default the following repositories need to be forked to your GitHub account:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ome/openmicroscopy&#34;&gt;ome/openmiscrocopy&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ome/ome-documentation&#34;&gt;ome/ome-documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ome/bioformats&#34;&gt;ome/bioformats&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you do not have some of the repositories forked, you will need to remove the jobs from the list of jobs to run either from the Trigger job &lt;a href=&#34;https://raw.githubusercontent.com/ome/devspace/master/home/jobs/Trigger/config.xml&#34;&gt;configuration&lt;/a&gt; or directly from the Jenkins UI i.e. &lt;code&gt;Trigger &amp;gt; Configure&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;New jobs&lt;/h1&gt; &#xA;&lt;p&gt;It is recommended that new jobs should be defined using &lt;a href=&#34;https://jenkins.io/doc/book/pipeline/jenkinsfile/&#34;&gt;Jenkinsfile pipelines&lt;/a&gt; in the target repository as this makes it easier to maintain jobs. Most Jenkins Pipeline jobs can share the same configuration apart from the repository URL. If you do not require any special configuration use the &lt;a href=&#34;https://raw.githubusercontent.com/ome/devspace/master/TEMPLATE-pipeline-job-config.xml&#34;&gt;&lt;code&gt;TEMPLATE-pipeline-job-config.xml&lt;/code&gt;&lt;/a&gt; template by adding the job and parameters to &lt;a href=&#34;https://raw.githubusercontent.com/ome/devspace/master/pipeline-configs.yaml&#34;&gt;&lt;code&gt;pipeline-configs.yaml&lt;/code&gt;&lt;/a&gt;. Supported parameters are documented in that file.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;rename.py&lt;/code&gt; script will create the required job configurations from &lt;code&gt;pipeline-configs.yaml&lt;/code&gt; as well as performing the renaming steps. If for some reason you want to create the new job without running &lt;code&gt;rename.py&lt;/code&gt; you can just run &lt;code&gt;createpipelinejobs.py&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Alternatively create a new job in the Jenkins web-interface in the usual way.&lt;/p&gt; &#xA;&lt;h1&gt;Default packages used&lt;/h1&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Name&lt;/th&gt; &#xA;   &lt;th&gt;Version&lt;/th&gt; &#xA;   &lt;th&gt;Optional&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Java&lt;/td&gt; &#xA;   &lt;td&gt;openJDK 1.8&lt;/td&gt; &#xA;   &lt;td&gt;openJDK 1.8 devel, oracleJDK 1.8&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Python&lt;/td&gt; &#xA;   &lt;td&gt;2.7&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Ice&lt;/td&gt; &#xA;   &lt;td&gt;3.6&lt;/td&gt; &#xA;   &lt;td&gt;3.5&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;PostgreSQL&lt;/td&gt; &#xA;   &lt;td&gt;9.4&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://hub.docker.com/_/postgres/&#34;&gt;https://hub.docker.com/_/postgres/&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Nginx&lt;/td&gt; &#xA;   &lt;td&gt;1.8&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Redis&lt;/td&gt; &#xA;   &lt;td&gt;latest&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://hub.docker.com/_/redis/&#34;&gt;https://hub.docker.com/_/redis/&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h1&gt;Troubleshooting&lt;/h1&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/ome/devspace/master/Troubleshooting.md&#34;&gt;Troubleshooting&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;ADVANCE: extend omero-install&lt;/h1&gt; &#xA;&lt;p&gt;In order to install additional components or new version of packages e.g. PostgreSQL 10, it is required to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Modify the files in &lt;a href=&#34;https://github.com/ome/omero-install&#34;&gt;omero-install&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Create a new image of &lt;a href=&#34;https://github.com/ome/devslave-c7-docker&#34;&gt;devslave-c7-docker&lt;/a&gt; using the updated omero-install files&lt;/li&gt; &#xA; &lt;li&gt;Push the new image to &lt;a href=&#34;https://hub.docker.com/&#34;&gt;Docker Hub&lt;/a&gt;. You will need to your own account&lt;/li&gt; &#xA; &lt;li&gt;Modify each Dockerfile of this repository to use the new image&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Upgrade&lt;/h1&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/ome/devspace/master/CHANGELOG.md&#34;&gt;Changelog&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>