<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dockerfile Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-02-10T01:28:09Z</updated>
  <subtitle>Daily Trending of Dockerfile in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>stratisproject/StratisEVM</title>
    <updated>2024-02-10T01:28:09Z</updated>
    <id>tag:github.com,2024-02-10:/stratisproject/StratisEVM</id>
    <link href="https://github.com/stratisproject/StratisEVM" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Quickstart: Run a node and (optionally) stake STRAX&lt;/h1&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;Prysm is an implementation of the &lt;a href=&#34;https://github.com/ethereum/consensus-specs&#34;&gt;Ethereum proof-of-stake consensus specification&lt;/a&gt;. In this quickstart, you’ll use Prysm to run an STRAX node and optionally a validator client. This will let you stake 20,000 STRAX using hardware that you manage.&lt;/p&gt; &#xA;&lt;p&gt;This is a beginner-friendly guide. Familiarity with the command line is expected, but otherwise this guide makes no assumptions about your technical skills or prior knowledge.&lt;/p&gt; &#xA;&lt;p&gt;At a high level, we&#39;ll walk through the following flow:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Configure an &lt;strong&gt;execution node&lt;/strong&gt; using an execution-layer client.&lt;/li&gt; &#xA; &lt;li&gt;Configure a &lt;strong&gt;beacon node&lt;/strong&gt; using Prysm, a consensus-layer client.&lt;/li&gt; &#xA; &lt;li&gt;Configure a &lt;strong&gt;validator client&lt;/strong&gt; and stake STRAX using Prysm (optional).&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Step 1: Review prerequisites and best practices&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Hardware Requirements&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;OS&lt;/strong&gt;: 64-bit Linux, Mac OS X 10.14+, Windows 10+ 64-bit&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;CPU&lt;/strong&gt;: 4+ cores @ 2.8+ GHz&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Memory&lt;/strong&gt;: 8GB+ RAM&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Storage&lt;/strong&gt;: SSD with at least 1TB free space&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Network&lt;/strong&gt;: 8 MBit/sec broadband&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Port Requirements&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;GETH&lt;/strong&gt;: Allow: 30303/UDP+TCP in+out; Block: 8545/TCP all&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Prysm beacon-chain&lt;/strong&gt;: Allow: */TCP+UDP out, 13000/TCP in+out, 12000/UDP in+out; Block: 3500/TCP all, 8551/TCP all, 4000/TCP all&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Validator Requirements&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A new machine that has never been connected to the internet that you can use to securely generate your mnemonic phrase and keypair&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;20,000 STRAX&lt;/strong&gt; (Mainnet) or &lt;strong&gt;20,000 tSTRAX&lt;/strong&gt; (Testnet)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Best practices&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;If you&#39;re staking STRAX as a validator, try this guide on a testnet first&lt;/strong&gt;, &lt;em&gt;then&lt;/em&gt; mainnet.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Keep things simple&lt;/strong&gt;. This guidance assumes all client software will run on a single machine.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Step 2: Run an execution client&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download the latest release of &lt;code&gt;geth&lt;/code&gt; for your Operating System from: &lt;a href=&#34;https://github.com/stratisproject/go-stratis/releases&#34;&gt;https://github.com/stratisproject/go-stratis/releases&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Extract into a location on your host, to the &lt;code&gt;bin&lt;/code&gt; directory in this repository&#39;s local copy. For example &lt;code&gt;C:\repos\StratisEVM\bin&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Navigate to your &lt;code&gt;bin&lt;/code&gt; directory and execute the following command:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Windows&lt;/h2&gt; &#xA;&lt;h4&gt;Auroria (Testnet)&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;geth.exe --auroria --http --http.api eth,net,engine,admin --datadir=data\testnet\geth --authrpc.addr=127.0.0.1 --authrpc.jwtsecret=jwtsecret --syncmode=full&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Mainnet&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;geth.exe --http --http.api eth,net,engine,admin --datadir=data\mainnet\geth --authrpc.addr=127.0.0.1 --authrpc.jwtsecret=jwtsecret --syncmode=full&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Linux&lt;/h2&gt; &#xA;&lt;h4&gt;Auroria (Testnet)&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;./geth --auroria --http --http.api eth,net,engine,admin --datadir=data\testnet\geth --authrpc.addr=127.0.0.1 --authrpc.jwtsecret=jwtsecret --syncmode=full&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Mainnet&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;./geth --http --http.api eth,net,engine,admin --datadir=data\mainnet\geth --authrpc.addr=127.0.0.1 --authrpc.jwtsecret=jwtsecret --syncmode=full&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;MacOS&lt;/h2&gt; &#xA;&lt;h4&gt;Auroria (Testnet)&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;./geth --auroria --http --http.api eth,net,engine,admin --datadir=data\testnet\geth --authrpc.addr=127.0.0.1 --authrpc.jwtsecret=jwtsecret --syncmode=full&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Mainnet&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;./geth --http --http.api eth,net,engine,admin --datadir=data\mainnet\geth --authrpc.addr=127.0.0.1 --authrpc.jwtsecret=jwtsecret --syncmode=full&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The execution layer client cannot sync without an attached beacon node. We&#39;ll see how to setup a beacon node in the next step.&lt;/p&gt; &#xA;&lt;h2&gt;Step 3: Run a beacon node using Prysm&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download the latest release of &lt;code&gt;beacon-chain&lt;/code&gt; and &lt;code&gt;validator&lt;/code&gt; for your Operating System from: &lt;a href=&#34;https://github.com/stratisproject/prysm-stratis/releases&#34;&gt;https://github.com/stratisproject/prysm-stratis/releases&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Extract into a location on your host, to the &lt;code&gt;bin&lt;/code&gt; directory in this repository&#39;s local copy. For example &lt;code&gt;C:\repos\StratisEVM\bin&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Navigate to your &lt;code&gt;bin&lt;/code&gt; directory and run the following command to start your beacon node that connects to your local execution node:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Windows&lt;/h2&gt; &#xA;&lt;h5&gt;Recommended for Windows:&lt;/h5&gt; &#xA;&lt;p&gt;Run the following command to improve output displayed in console:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;reg add HKCU\Console /v VirtualTerminalLevel /t REG_DWORD /d 1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note: You will need to launch a new instance of CMD or PowerShell for these changes to take effect.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Auroria (Testnet)&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;beacon-chain.exe --auroria --datadir=data\testnet\beacon --execution-endpoint=http://localhost:8551 --jwt-secret=jwtsecret&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Mainnet&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;beacon-chain.exe --datadir=data\mainnet\beacon --execution-endpoint=http://localhost:8551 --jwt-secret=jwtsecret&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Linux&lt;/h2&gt; &#xA;&lt;h4&gt;Auroria (Testnet)&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;./beacon-chain --auroria --datadir=data\testnet\beacon --execution-endpoint=http://localhost:8551 --jwt-secret=jwtsecret&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Mainnet&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;./beacon-chain --datadir=data\mainnet\beacon --execution-endpoint=http://localhost:8551 --jwt-secret=jwtsecret&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;MacOS&lt;/h2&gt; &#xA;&lt;h4&gt;Auroria (Testnet)&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;./beacon-chain --auroria --datadir=data\testnet\beacon --execution-endpoint=http://localhost:8551 --jwt-secret=jwtsecret&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Mainnet&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;./beacon-chain --datadir=data\mainnet\beacon --execution-endpoint=http://localhost:8551 --jwt-secret=jwtsecret&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you are planning to run a validator, it is &lt;strong&gt;strongly&lt;/strong&gt; advised to use the &lt;code&gt;--suggested-fee-recipient=&amp;lt;WALLET ADDRESS&amp;gt;&lt;/code&gt; option. When your validator proposes a block, it will allow you to earn block priority fees, also sometimes called &#34;tips&#34;.&lt;/p&gt; &#xA;&lt;p&gt;Congratulations - you’re now running a &lt;strong&gt;full StratisEVM node&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Step 5: Setup validator to Stake&lt;/h2&gt; &#xA;&lt;p&gt;Please refer to the Stratis Staking Launchpad to create your keys for staking:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://auroria.launchpad.stratisevm.com/en/generate-keys&#34;&gt;Generate Keys (Auroria)&lt;/a&gt; &lt;a href=&#34;&#34;&gt;Generate Keys (Mainnet)&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Alternatively, you can follow the below steps:&lt;/p&gt; &#xA;&lt;h2&gt;Step 5a: Generate Keys without Launchpad (Optional)&lt;/h2&gt; &#xA;&lt;p&gt;Download - ideally on a new machine that has never been connected to the internet - the latest stable version of the deposit CLI from the &lt;a href=&#34;https://github.com/stratisproject/staking-deposit-cli/releases&#34;&gt;Staking Deposit CLI Releases page&lt;/a&gt; to the &lt;code&gt;bin&lt;/code&gt; directory in this repository&#39;s local copy.&lt;/p&gt; &#xA;&lt;p&gt;You may choose to provide a withdrawal address with your initial deposit to automatically enable reward payments and also the ability to fully exit your funds at anytime (recommended). This address should be to a regular Stratis address and will be the only address funds can be sent to from your new validator accounts, and cannot be changed once chosen.&lt;/p&gt; &#xA;&lt;p&gt;Run the following command to create your mnemonic (a unique and &lt;strong&gt;highly sensitive&lt;/strong&gt; 24-word phrase) and keys:&lt;/p&gt; &#xA;&lt;h2&gt;Windows&lt;/h2&gt; &#xA;&lt;h4&gt;Auroria (Testnet)&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;deposit.exe new-mnemonic --num_validators=1 --mnemonic_language=english --chain=auroria --eth1_withdrawal_address=&amp;lt;INSERT ADDRESS&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Mainnet&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;deposit.exe new-mnemonic --num_validators=1 --mnemonic_language=english --chain=mainnet --eth1_withdrawal_address=&amp;lt;INSERT ADDRESS&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Linux&lt;/h2&gt; &#xA;&lt;h4&gt;Auroria (Testnet)&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;./deposit new-mnemonic --num_validators=1 --mnemonic_language=english --chain=auroria --eth1_withdrawal_address=&amp;lt;INSERT ADDRESS&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Mainnet&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;./deposit new-mnemonic --num_validators=1 --mnemonic_language=english --chain=mainnet --eth1_withdrawal_address=&amp;lt;INSERT ADDRESS&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;MacOS&lt;/h2&gt; &#xA;&lt;h4&gt;Auroria (Testnet)&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;./deposit new-mnemonic --num_validators=1 --mnemonic_language=english --chain=auroria --eth1_withdrawal_address=&amp;lt;INSERT ADDRESS&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Mainnet&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;./deposit new-mnemonic --num_validators=1 --mnemonic_language=english --chain=mainnet --eth1_withdrawal_address=&amp;lt;INSERT ADDRESS&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Follow the CLI prompts to generate your keys, it&#39;s better to use the directory &lt;code&gt;configs/testnet/validator_keys&lt;/code&gt; or &lt;code&gt;configs/mainnet/validator_keys&lt;/code&gt; for the chosen network. The password you choose will be needed later when importing the generated data into the Prysm validator client. This will give you the following artifacts:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;A &lt;strong&gt;new mnemonic seed phrase&lt;/strong&gt;. This is &lt;strong&gt;highly sensitive&lt;/strong&gt; and should never be exposed to other people or networked hardware.&lt;/li&gt; &#xA; &lt;li&gt;A &lt;code&gt;validator_keys&lt;/code&gt; folder. This folder will contain two files: &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;&lt;code&gt;deposit_data-*.json&lt;/code&gt; - contains deposit data that you’ll later upload to the Stratis launchpad.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;keystore-m_*.json&lt;/code&gt; - contains your public key and encrypted private key.&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Step 5b: Import staking keys&lt;/h2&gt; &#xA;&lt;p&gt;If needed, copy the &lt;code&gt;validator_keys&lt;/code&gt; folder to your primary machine. Run the following command to import your keystores, replacing &lt;code&gt;&amp;lt;YOUR_FOLDER_PATH&amp;gt;&lt;/code&gt; with the full path to your &lt;code&gt;validator_keys&lt;/code&gt; folder:&lt;/p&gt; &#xA;&lt;h2&gt;Windows&lt;/h2&gt; &#xA;&lt;h4&gt;Auroria (Testnet)&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;validator.exe accounts import --keys-dir=&amp;lt;YOUR_FOLDER_PATH&amp;gt; --auroria&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Mainnet&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;validator.exe accounts import --keys-dir=&amp;lt;YOUR_FOLDER_PATH&amp;gt; --mainnet&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Linux&lt;/h2&gt; &#xA;&lt;h4&gt;Auroria (Testnet)&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;./validator accounts import --keys-dir=&amp;lt;YOUR_FOLDER_PATH&amp;gt; --auroria&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Mainnet&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;./validator accounts import --keys-dir=&amp;lt;YOUR_FOLDER_PATH&amp;gt; --mainnet&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;MacOS&lt;/h2&gt; &#xA;&lt;h4&gt;Auroria (Testnet)&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;./validator accounts import --keys-dir=&amp;lt;YOUR_FOLDER_PATH&amp;gt; --auroria&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Mainnet&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;./validator accounts import --keys-dir=&amp;lt;YOUR_FOLDER_PATH&amp;gt; --mainnet&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You’ll be prompted to specify a wallet directory twice. Provide the path to your future wallets directory. For example: &lt;code&gt;C:/repos/StratisEVM/configs/testnet/wallet_dir&lt;/code&gt; or &lt;code&gt;C:/repos/StratisEVM/configs/mainnet/wallet_dir&lt;/code&gt; for the selected network. You should see &lt;code&gt;Imported accounts [...] view all of them by running accounts list&lt;/code&gt; when your account has been successfully imported into Prysm.&lt;/p&gt; &#xA;&lt;h2&gt;Step 6: Make staking deposit and run validator&lt;/h2&gt; &#xA;&lt;p&gt;Go to the Stratis Staking Launchpad site and continue through the prompts to upload your &lt;code&gt;deposit_data-*.json&lt;/code&gt; file. You’ll be prompted to connect your wallet.&lt;/p&gt; &#xA;&lt;p&gt;You can then deposit 20,000 STRAX into the Mainnet or Testnet deposit contract via the Launchpad page. Exercise extreme caution throughout this procedure.&lt;/p&gt; &#xA;&lt;p&gt;If you need tSTRAX, head over to our Discord server or use the Faucet:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://discord.gg/ethstaker&#34;&gt;Stratis Discord&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Next, go to the launcphad and upload your &lt;code&gt;deposit_data-*.json&lt;/code&gt; file. You’ll be prompted to connect your wallet.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://auroria.launchpad.stratisevm.com/en/generate-keys&#34;&gt;Auroria Staking Launchpad (Testnet)&lt;/a&gt; &lt;a href=&#34;https://launchpad.stratisevm.com/en/generate-keys&#34;&gt;Stratis Staking Launchpad (Mainnet)&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Exercise extreme caution throughout this procedure - &lt;strong&gt;never send real STRAX to the testnet deposit contract.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Finally, run the following command to start your validator, replacing &lt;code&gt;&amp;lt;YOUR_FOLDER_PATH&amp;gt;&lt;/code&gt; with the full path to your &lt;code&gt;wallet_dir&lt;/code&gt; folder (examples: &lt;code&gt;C:/repos/StratisEVM/configs/testnet/wallet_dir&lt;/code&gt; and &lt;code&gt;C:/repos/StratisEVM/configs/mainnet/wallet_dir&lt;/code&gt;) and &lt;code&gt;&amp;lt;YOUR_WALLET_ADDRESS&amp;gt;&lt;/code&gt; by the address of a wallet you own. When your validator proposes a block, it will allow you to earn block priority fees, also sometimes called &#34;tips&#34;. See &lt;a href=&#34;https://docs.prylabs.network/docs/execution-node/fee-recipient&#34;&gt;How to configure Fee Recipient&lt;/a&gt; for more information about this feature:&lt;/p&gt; &#xA;&lt;h2&gt;Windows&lt;/h2&gt; &#xA;&lt;h4&gt;Auroria (Testnet)&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;validator.exe --wallet-dir=&amp;lt;YOUR_FOLDER_PATH&amp;gt; --auroria --suggested-fee-recipient=&amp;lt;YOUR_WALLET_ADDRESS&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Mainnet&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;validator.exe --wallet-dir=&amp;lt;YOUR_FOLDER_PATH&amp;gt; --mainnet--suggested-fee-recipient=&amp;lt;YOUR_WALLET_ADDRESS&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Linux&lt;/h3&gt; &#xA;&lt;h4&gt;Auroria (Testnet)&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;./validator --wallet-dir=&amp;lt;YOUR_FOLDER_PATH&amp;gt; --auroria --suggested-fee-recipient=&amp;lt;YOUR_WALLET_ADDRESS&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Mainnet&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;./validator -wallet-dir=&amp;lt;YOUR_FOLDER_PATH&amp;gt; --mainnet--suggested-fee-recipient=&amp;lt;YOUR_WALLET_ADDRESS&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;MacOS&lt;/h2&gt; &#xA;&lt;h4&gt;Auroria (Testnet)&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;./validator --wallet-dir=&amp;lt;YOUR_FOLDER_PATH&amp;gt; --auroria --suggested-fee-recipient=&amp;lt;YOUR_WALLET_ADDRESS&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Mainnet&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;./validator -wallet-dir=&amp;lt;YOUR_FOLDER_PATH&amp;gt; --mainnet--suggested-fee-recipient=&amp;lt;YOUR_WALLET_ADDRESS&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You may wonder why you need to use the &lt;code&gt;--suggested-fee-recipient&lt;/code&gt; in both beacon node and validator client. The reason is it is possible to plug multiple validator clients to the same beacon node. If no &lt;code&gt;--suggested-fee-recipient&lt;/code&gt; is set on a validator client, then the beacon node will fallback on its own &lt;code&gt;--suggested-fee-recipient&lt;/code&gt; when proposing a block.&lt;/p&gt; &#xA;&lt;p&gt;If no &lt;code&gt;--suggested-fee-recipient&lt;/code&gt; is set neither on the validator client nor on the beacon node, the corresponding tips will be sent to the burn address, and forever lost,&lt;/p&gt; &#xA;&lt;p&gt;Congratulations!&lt;/p&gt; &#xA;&lt;p&gt;You’re now running a &lt;strong&gt;full Stratis node&lt;/strong&gt; and a &lt;strong&gt;validator client&lt;/strong&gt;. You can leave your &lt;strong&gt;execution client&lt;/strong&gt;, &lt;strong&gt;beacon node&lt;/strong&gt;, and &lt;strong&gt;validator client&lt;/strong&gt; terminal windows open and running. Once your validator is activated, it will automatically begin proposing and validating blocks.&lt;/p&gt;</summary>
  </entry>
</feed>