<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dockerfile Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-04-09T01:28:11Z</updated>
  <subtitle>Daily Trending of Dockerfile in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>flor0/nextcloud-docker</title>
    <updated>2024-04-09T01:28:11Z</updated>
    <id>tag:github.com,2024-04-09:/flor0/nextcloud-docker</id>
    <link href="https://github.com/flor0/nextcloud-docker" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Nextcloud but with docker&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://cdn.rawgit.com/nextcloud/docker/071b888f7f689caa62c1498b6c61cb3599bcea2b/logo.svg?sanitize=true&#34; alt=&#34;logo&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Nextcloud Dockerized&lt;/h1&gt; &#xA;&lt;p&gt;Currently existing &#34;all-in-one&#34; Nextcloud solutions using Docker are either unoptimized or lack many configuration options for advanced setup scenarios. This setup is close to an optimized Nextcloud baremetal installation but with each component being dockerized.&lt;/p&gt; &#xA;&lt;p&gt;With this project you &lt;strong&gt;don&#39;t need to do manual configuration&lt;/strong&gt; such as&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;installing webserver, php, redis&lt;/li&gt; &#xA; &lt;li&gt;installing php extensions&lt;/li&gt; &#xA; &lt;li&gt;optimizing web server and php for performance and large filesizes&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You must still do:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;download nextcloud&lt;/li&gt; &#xA; &lt;li&gt;set permissions&lt;/li&gt; &#xA; &lt;li&gt;set your domain names and passwords in the config files&lt;/li&gt; &#xA; &lt;li&gt;(optional) add a cronjob on the host system&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Disclaimer: This project is in no way associated with the official Nextcloud project. This project is maintained by me and is intended for expert use. If you want something simple to set up but with less configuration options consider the &lt;a href=&#34;https://github.com/nextcloud/all-in-one#nextcloud-all-in-one&#34;&gt;Nextcloud All-In-One docker container&lt;/a&gt;. I do not take responsibility if you mess up your server, existing Nextcloud or lose your job because the Nextcloud calendar broke.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;An optimized version of php-fpm as described in the official Nextcloud &lt;a href=&#34;https://docs.nextcloud.com/server/28/admin_manual/installation/php_configuration.html&#34;&gt;documentation&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Redis preinstalled.&lt;/li&gt; &#xA; &lt;li&gt;Nginx preinstalled and already configured for Nextcloud as described in the &lt;a href=&#34;https://docs.nextcloud.com/server/28/admin_manual/installation/nginx.html&#34;&gt;documentation&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Install Guide&lt;/h2&gt; &#xA;&lt;p&gt;This assumes you already know how to install Nextcloud on a baremetal server or are familiar with the &lt;a href=&#34;https://docs.nextcloud.com/server/28/admin_manual/installation/index.html&#34;&gt;documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Directories and file permissions&lt;/h3&gt; &#xA;&lt;p&gt;You need to create two directories. One where your Nextcloud webroot will be and another where you want the data to be. The location doesn&#39;t really matter. &lt;em&gt;In this example&lt;/em&gt; we have both directories in &lt;strong&gt;/your/nextcloud/root&lt;/strong&gt; bt you should choose your own.&lt;/p&gt; &#xA;&lt;p&gt;Next, download the latest archive containing Nextcloud from the official site &lt;a href=&#34;https://download.nextcloud.com/server/releases/latest.zip&#34;&gt;here&lt;/a&gt; and put it in &lt;code&gt;/your/nextcloud/root&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Unzip the archive with &lt;code&gt;unzip latest.zip&lt;/code&gt;. This will create the directory &lt;code&gt;/your/nextcloud/root/nextcloud&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Create the directory where your Nextcloud data will be: &lt;code&gt;mkdir /your/nextcloud/root/data&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Set the correct owner for both directories:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;sudo chown -R www-data:www-data /your/nextcloud/root/nextcloud&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;sudo chown -R www-data:www-data /your/nextcloud/root/data&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Setting up Docker Compose&lt;/h3&gt; &#xA;&lt;p&gt;You must set some environment variables. Create a &lt;strong&gt;.env&lt;/strong&gt; file in the root of the cloned repo.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;DATA_DIR: Where your nextcloud data is. The same as /your/nextcloud/root/data&lt;/li&gt; &#xA; &lt;li&gt;NEXTCLOUD_DIR: Where your nextcloud webroot is. The same as /your/nextcloud/root/nextcloud&lt;/li&gt; &#xA; &lt;li&gt;MARIADB_ROOT_PASS and MARIADB_PASS: Password for your mariadb root user and the user called &#34;nextcloud&#34;&lt;/li&gt; &#xA; &lt;li&gt;TRAEFIK_CUSTOM_MIDDLEWARES: (optional) If you plan to use Traefik and want to add additional middlewares, if you have any&lt;/li&gt; &#xA; &lt;li&gt;DOMAIN: Set this to your domain like &lt;strong&gt;&#34;`example.com`&#34;&lt;/strong&gt; or for more than one &lt;strong&gt;&#34;`example.com`,`another.com`&#34;&lt;/strong&gt; without the double quotes. &lt;strong&gt;Don&#39;t forget the backticks!&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Building php-fpm&lt;/h3&gt; &#xA;&lt;p&gt;Because the official php-fpm images don&#39;t have and php extensions installed, we must do it ourselves. Simply run this command from the root of the cloned repo:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;docker compose build php-fpm-nextcloud&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;this will take a while.&lt;/p&gt; &#xA;&lt;h3&gt;Installing Nextcloud&lt;/h3&gt; &#xA;&lt;p&gt;Run &lt;code&gt;docker compose up -d&lt;/code&gt;. If something doesn&#39;t work try debugging it yourself of open an issue with the php-fpm and nginx logs attached.&lt;/p&gt; &#xA;&lt;p&gt;Install Nextcloud how you usually would through the web interface. Use the MariaDB database and fill in the passwords you chose earlier. The database host is &lt;strong&gt;mariadb-nextcloud:3306&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Editing the Nextcloud config&lt;/h3&gt; &#xA;&lt;p&gt;Edit &lt;code&gt;/your/nextcloud/root/nextcloud/config/config.php&lt;/code&gt; and add the following optimizations:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#39;memcache.local&#39; =&amp;gt; &#39;\\OC\\Memcache\\APCu&#39;,&#xA;&#39;maintenance_window_start&#39; =&amp;gt; 1,&#xA;&#39;filelocking.enabled&#39; =&amp;gt; true,&#xA;&#39;memcache.locking&#39; =&amp;gt; &#39;\OC\Memcache\Redis&#39;,&#xA;&#39;redis&#39; =&amp;gt; array(&#xA;    &#39;host&#39; =&amp;gt; &#39;redis-nextcloud&#39;,&#xA;    &#39;port&#39; =&amp;gt; 6379,&#xA;    &#39;timeout&#39; =&amp;gt; 0.0,&#xA;),&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Editing nginx.conf&lt;/h3&gt; &#xA;&lt;p&gt;You may also have to replace &lt;code&gt;example.com&lt;/code&gt; with your own domain or multiple domains in the nginx.conf file.&lt;/p&gt; &#xA;&lt;h3&gt;Enabling system cron (optional)&lt;/h3&gt; &#xA;&lt;p&gt;Nextcloud must perform background tasks. The best way to do that is to use cron. However, on docker this is not easily doable. Here the host will perform the cronjobs required.&lt;/p&gt; &#xA;&lt;p&gt;For testing if system cron works run this yourself first:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;docker exec -u www-data php-fpm-nextcloud php --define apc.enable_cli=1 /var/www/html/cron.php&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;If it doesn&#39;t throw any errors, you&#39;re set. Add this to your crontab:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;*/5 * * * * docker exec -u www-data php-fpm-nextcloud php --define apc.enable_cli=1 /var/www/html/cron.php&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Make sure you enable system cron in your Nextcloud admin panel.&lt;/p&gt; &#xA;&lt;h3&gt;Adding Traefik (optional)&lt;/h3&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Instructions&lt;/summary&gt; &#xA; &lt;p&gt;If you want to run Nextcloud behind a reverse proxy here&#39;s how to set it up with Traefik. This assumes you already have Traefik up and running and created a docker network for it called &lt;em&gt;traefik&lt;/em&gt;. Add the environment variable as mentioned above.&lt;/p&gt; &#xA; &lt;p&gt;&lt;em&gt;Replace&lt;/em&gt; the entire nginx service with this in the docker-compose.yml and add the traefik network:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code&gt;nginx:&#xA;    container_name: nginx-nextcloud&#xA;    image: nginx:latest&#xA;    volumes:&#xA;      - ${NEXTCLOUD_DIR}:/var/www/html&#xA;      - ${DATA_DIR}:/data&#xA;      - ./nginx.conf:/etc/nginx/nginx.conf:ro&#xA;    labels:&#xA;      - &#34;traefik.enable=true&#34;&#xA;      - &#34;traefik.docker.network=traefik&#34;&#xA;&#xA;      - &#34;traefik.http.routers.nginx-http.rule=Host(${DOMAIN})&#34;&#xA;      - &#34;traefik.http.routers.nginx-http.entrypoints=web&#34;&#xA;      - &#34;traefik.http.routers.nginx-http.middlewares=nextcloud-https-redirect@docker,nc-header@docker,nextcloud_redirectregex@docker${TRAEFIK_CUSTOM_MIDDLEWARES}&#34;&#xA;&#xA;      - &#34;traefik.http.routers.nginx-https.rule=Host(${DOMAIN})&#34;&#xA;      - &#34;traefik.http.routers.nginx-https.tls=true&#34;&#xA;      - &#34;traefik.http.routers.nginx-https.tls.certresolver=myresolver&#34;&#xA;      - &#34;traefik.http.routers.nginx-https.entrypoints=websecure&#34;&#xA;      - &#34;traefik.http.routers.nginx-https.middlewares=nc-header@docker,nextcloud_redirectregex@docker${TRAEFIK_CUSTOM_MIDDLEWARES}&#34;&#xA;      - &#34;traefik.http.middlewares.nc-header.headers.stsSeconds=15552001&#34;&#xA;&#xA;      # MIDDLEWARES&#xA;      - &#34;traefik.http.middlewares.nextcloud_redirectregex.redirectregex.permanent=true&#34;&#xA;      - &#34;traefik.http.middlewares.nextcloud_redirectregex.redirectregex.regex=https://(.*)/.well-known/(?:card|cal)dav&#34;&#xA;      - &#34;traefik.http.middlewares.nextcloud_redirectregex.redirectregex.replacement=https://$${1}/remote.php/dav&#34;&#xA;&#xA;      # HTTP-&amp;gt;HTTPS redirect&#xA;      - &#34;traefik.http.middlewares.nextcloud-https-redirect.redirectscheme.scheme=https&#34;&#xA;      - &#34;traefik.http.middlewares.nextcloud-https-redirect.redirectscheme.permanent=true&#34;&#xA;      # Traefik service&#xA;      - &#34;traefik.http.routers.nginx-https.service=nextcloud-service&#34;&#xA;      - &#34;traefik.http.services.nextcloud-service.loadbalancer.server.port=80&#34;&#xA;    networks:&#xA;      - nextcloud&#xA;      - traefik&#xA;    depends_on:&#xA;      - php-fpm-nextcloud&#xA;      - redis-nextcloud&#xA;      - mariadb-nextcloud&#xA;&#xA;networks:&#xA;    traefik:&#xA;        external: true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Get the internal IP address range of your Traefik network with &lt;code&gt;docker network inspect traefik&lt;/code&gt;. For example this will give you a subnet like 192.168.173.0/20 Add this to your &lt;code&gt;/your/nextcloud/root/nextcloud/config/config.php&lt;/code&gt;:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code&gt;&#39;trusted_proxies&#39; =&amp;gt; &#xA;  array (&#xA;    0 =&amp;gt; &#39;INSERT TRAEFIK IP SUBNET HERE for our example 192.168.173.0/20&#39;,&#xA;  ),&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Migrating from existing Nextcloud&lt;/h3&gt; &#xA;&lt;p&gt;To migrate you follow the steps described in the official &lt;a href=&#34;https://docs.nextcloud.com/server/28/admin_manual/maintenance/migrating.html&#34;&gt;docs&lt;/a&gt;. The only difference here is importing the database backup into MariaDB running in the Docker Container. The way I did it is I exposed a port to MariaDB in the docker compose file and I ran something like &lt;code&gt;mysql -h [localhost:PORT HERE] -u nextcloud -pPASSWORD HERE nextcloud &amp;lt; database.bak&lt;/code&gt; to import the backed up database.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>LinkedInLearning/guide-to-java-design-patterns-4512383</title>
    <updated>2024-04-09T01:28:11Z</updated>
    <id>tag:github.com,2024-04-09:/LinkedInLearning/guide-to-java-design-patterns-4512383</id>
    <link href="https://github.com/LinkedInLearning/guide-to-java-design-patterns-4512383" rel="alternate"></link>
    <summary type="html">&lt;p&gt;This repo is for the Linkedin Learning course: A Complete Guide to Java Design Patterns: Creational, Behavioral, and Structural&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;A Complete Guide to Java Design Patterns: Creational, Behavioral, and Structural&lt;/h1&gt; &#xA;&lt;p&gt;This is the repository for the LinkedIn Learning course &lt;code&gt;A Complete Guide to Java Design Patterns: Creational, Behavioral, and Structural&lt;/code&gt;. The full course is available from &lt;a href=&#34;https://www.linkedin.com/learning/complete-guide-to-java-design-patterns-creational-behavioral-and-structural&#34;&gt;LinkedIn Learning&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://media.licdn.com/dms/image/D4D0DAQEyFMOVuMzMew/learning-public-crop_675_1200/0/1711582600788?e=2147483647&amp;amp;v=beta&amp;amp;t=8fPn5iZ-ghDqbhm2QXeWYKlDNbUaIIHAV7rhwBEa8OU&#34; alt=&#34;lil-thumbnail-url&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;In this course, developer Bethan Palmer guides you through using creative, behavioral, and structural design patterns in Java. Find out how design patterns help you write cleaner, more elegant code, and explore a wide range of patterns with real world examples. Practice and reinforce what you learn with hands-on challenges in each chapter.&lt;/p&gt; &#xA;&lt;p&gt;The best way to learn a language is to use it in practice. That’s why this course is integrated with GitHub Codespaces, an instant cloud developer environment that offers all the functionality of your favorite IDE without the need for any local machine setup. With GitHub Codespaces, you can get hands-on practice from any machine, at any time—all while using a tool that you’ll likely encounter in the workplace. Check out the “Using GitHub Codespaces with this course” video to learn how to get started.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;See the readme file in the main branch for updated instructions and information.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Instructions&lt;/h2&gt; &#xA;&lt;p&gt;This repository has branches for each of the videos in the course. You can use the branch pop up menu in github to switch to a specific branch and take a look at the course at that stage, or you can add &lt;code&gt;/tree/BRANCH_NAME&lt;/code&gt; to the URL to go to the branch you want to access.&lt;/p&gt; &#xA;&lt;h2&gt;Branches&lt;/h2&gt; &#xA;&lt;p&gt;The branches are structured to correspond to the videos in the course. The naming convention is &lt;code&gt;CHAPTER#_MOVIE#&lt;/code&gt;. As an example, the branch named &lt;code&gt;02_03&lt;/code&gt; corresponds to the second chapter and the third video in that chapter. Some branches will have a beginning and an end state. These are marked with the letters &lt;code&gt;b&lt;/code&gt; for &#34;beginning&#34; and &lt;code&gt;e&lt;/code&gt; for &#34;end&#34;. The &lt;code&gt;b&lt;/code&gt; branch contains the code as it is at the beginning of the movie. The &lt;code&gt;e&lt;/code&gt; branch contains the code as it is at the end of the movie. The &lt;code&gt;main&lt;/code&gt; branch holds the final state of the code when in the course.&lt;/p&gt; &#xA;&lt;p&gt;When switching from one exercise files branch to the next after making changes to the files, you may get a message like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;error: Your local changes to the following files would be overwritten by checkout:        [files]&#xA;Please commit your changes or stash them before you switch branches.&#xA;Aborting&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To resolve this issue:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Add changes to git using this command: git add .&#xA;Commit changes using this command: git commit -m &#34;some message&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Instructor&lt;/h3&gt; &#xA;&lt;p&gt;Bethan Palmer&lt;/p&gt; &#xA;&lt;p&gt;Developer&lt;/p&gt; &#xA;&lt;p&gt;Check out my other courses on &lt;a href=&#34;https://www.linkedin.com/learning/instructors/bethan-palmer?u=104&#34;&gt;LinkedIn Learning&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>