<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dockerfile Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-04-06T01:34:23Z</updated>
  <subtitle>Daily Trending of Dockerfile in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>RynoM/self-hosted-deployment</title>
    <updated>2023-04-06T01:34:23Z</updated>
    <id>tag:github.com,2023-04-06:/RynoM/self-hosted-deployment</id>
    <link href="https://github.com/RynoM/self-hosted-deployment" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A deployment pipeline for docker compose stacks on a single host, running on Gitea Actions.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Docker compose CI/CD&lt;/h1&gt; &#xA;&lt;p&gt;While on this self-hosting journey, I&#39;ve not found any simple solutions that I liked for automatically deploying a docker compose stack to a single machine. I&#39;ve played with git hooks and didn&#39;t want to go for Github actions (have to expose network). But now with the new release of &lt;a href=&#34;https://blog.gitea.io/2022/12/feature-preview-gitea-actions/&#34;&gt;Gitea Actions&lt;/a&gt;, you can self-host a simple CI/CD workflow! No more hacks/workarounds needed and lots of flexibility if needed, and you can easily store all your environment variables in the Gitea repo secrets.&lt;/p&gt; &#xA;&lt;p&gt;Changes normally come from one of two scenarios:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;You make changes to your &lt;code&gt;docker-compose.yml&lt;/code&gt; or something like home assistant&#39;s &lt;code&gt;configuration.yml&lt;/code&gt; in your local IDE.&lt;/li&gt; &#xA; &lt;li&gt;You update something (config) through the UI of a service (say node-red &lt;code&gt;flows.json&lt;/code&gt;), that you want backed up to your repo.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;For scenario 1, you can simply make your changes in your comfy local IDE, push them to Gitea and the &lt;code&gt;deploy.yaml&lt;/code&gt; will pull the changes to your server, set environment variables based on your Gitea repo&#39;s secrets and update your compose stack. For scenario 2, once &lt;a href=&#34;https://github.com/go-gitea/gitea/pull/22751&#34;&gt;this PR in Gitea&lt;/a&gt; is merged, we can use &lt;code&gt;backup.yaml&lt;/code&gt; to schedule a workflow that will push your changes from the server to the repo. Bonus: From Gitea you can set up a mirror to Github, so that you have extra peace of mind.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/RynoM/self-hosted-deployment/main/img/Architecture.png&#34; alt=&#34;Architecture&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;p&gt;The following steps are to be executed on the same server the docker compose stack is meant to run on.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Use &lt;code&gt;docker compose up -d gitea&lt;/code&gt; to start Gitea&lt;/li&gt; &#xA; &lt;li&gt;browse to the new Gitea instance and go through initial setup.&lt;/li&gt; &#xA; &lt;li&gt;Since Gitea Actions are still in preview: Enable actions in Gitea&#39;s &lt;code&gt;app.ini&lt;/code&gt; (&lt;a href=&#34;https://blog.gitea.io/2022/12/feature-preview-gitea-actions/&#34;&gt;see link&lt;/a&gt;) and restart Gitea.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;    # custom/conf/app.ini&#xA;    [actions]&#xA;    ENABLED = true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;Create a new repo in Gitea. Note: Name the base branch &lt;code&gt;main&lt;/code&gt; or update the workflows accordingly.&lt;/li&gt; &#xA; &lt;li&gt;Go to the repo&#39;s setting in Gitea, check the box: &#39;Enable Repository Actions&#39; and save.&lt;/li&gt; &#xA; &lt;li&gt;Go to Site Administration -&amp;gt; Runners -&amp;gt; Create new runner and get a runner registration token.&lt;/li&gt; &#xA; &lt;li&gt;Replace the &lt;code&gt;${RUNNER_TOKEN}&lt;/code&gt; in &lt;code&gt;docker-compose.yml&lt;/code&gt; or set it as an environment variable.&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;docker compose up -d gitea_act&lt;/code&gt; to start the actions runner.&lt;/li&gt; &#xA; &lt;li&gt;Add all your environment variables for your other docker compose services to the secrets in the Gitea repo, using the &lt;code&gt;SERVER_ENV_PROD&lt;/code&gt; secret name.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Optional: 10) Set Github (or other) as mirror for Gitea repo.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;In your development environment, set Gitea as the remote for your repo. Commit and push your work, and watch the Gitea Actions do the rest of the work!&lt;/p&gt; &#xA;&lt;h2&gt;TODO / IDEAS&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Simplify by not using SSH between containers, but gitea volume in the runner instead&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Could maybe try and get a runner token from Gitea by itself?&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Test the schedule workflow once its released.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; The runner registration token only works once, so if you have to rebuild, you have to refresh the token. Maybe there is a solution for this?&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Automatically restart services in the workflow if files in their folders have changed.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Reduce image size&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Add image to Dockerhub?&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>hocus-dev/quickstart</title>
    <updated>2023-04-06T01:34:23Z</updated>
    <id>tag:github.com,2023-04-06:/hocus-dev/quickstart</id>
    <link href="https://github.com/hocus-dev/quickstart" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Hocus Quickstart&lt;/h1&gt; &#xA;&lt;p&gt;This repository is used in the &lt;a href=&#34;https://hocus.dev/docs/installation/quickstart&#34;&gt;Hocus quickstart&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>