<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dockerfile Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-03-29T01:27:18Z</updated>
  <subtitle>Daily Trending of Dockerfile in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>CapSens/circleCi-dynamic-config</title>
    <updated>2024-03-29T01:27:18Z</updated>
    <id>tag:github.com,2024-03-29:/CapSens/circleCi-dynamic-config</id>
    <link href="https://github.com/CapSens/circleCi-dynamic-config" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;circleCi-dynamic-config&lt;/h1&gt; &#xA;&lt;p&gt;This is the home of the global configuration for &lt;a href=&#34;https://www.capsens.eu/&#34;&gt;CapSens&lt;/a&gt; project&#39;s CircleCI pipelines.&lt;/p&gt; &#xA;&lt;p&gt;It runs RSpec, handles the assets (Webpacker and Sprockets), and much more.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Enable dynamic config for your project in CircleCI (Project Settings &amp;gt; Advanced &amp;gt; Enable dynamic config using setup workflows).&lt;/li&gt; &#xA; &lt;li&gt;Copy the file &lt;code&gt;config.yml.example&lt;/code&gt; to your project&#39;s &lt;code&gt;.circleci/config.yml&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Choose the appropriate template file (e.g.: &lt;code&gt;configs/rails_config.yml&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;If applicable, copy the file &lt;code&gt;database.yml.ci.example&lt;/code&gt; (or &lt;code&gt;database_mysql.yml.ci.example&lt;/code&gt; if you are using the MySQL template file &lt;code&gt;configs/rails_config_mysql.yml&lt;/code&gt;) to your project&#39;s &lt;code&gt;config/database.yml.ci&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Adapt your &lt;code&gt;.circleci/config.yml&lt;/code&gt; file with the appropriate parameters (the full list of available parameters can be found inside the template file). &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;The &lt;code&gt;project-name&lt;/code&gt; config file parameter must match the &lt;code&gt;username&lt;/code&gt; and &lt;code&gt;database&lt;/code&gt; variables of the CI database file.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Don&#39;t forget to activate your project (if necessary) on CircleCI (&lt;a href=&#34;https://app.circleci.com/projects/project-dashboard/github/CapSens/&#34;&gt;https://app.circleci.com/projects/project-dashboard/github/CapSens/&lt;/a&gt; =&amp;gt; &#34;Set up Project&#34;)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Rails applications with per-environment encrypted credentials&lt;/h2&gt; &#xA;&lt;p&gt;When using the dynamic config in a Rails application that has per-environment encrypted credentials, the &lt;code&gt;configs/rails_config_with_per_env_credentials.yml&lt;/code&gt; file must be used.&lt;/p&gt; &#xA;&lt;p&gt;This config file requires two environment variables:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;RAILS_MASTER_KEY_STAGING&lt;/code&gt;: This is the &lt;code&gt;RAILS_MASTER_KEY&lt;/code&gt; for the encrypted credentials of the staging environment&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;RAILS_MASTER_KEY_PRODUCTION&lt;/code&gt;: This is the &lt;code&gt;RAILS_MASTER_KEY&lt;/code&gt; for the encrypted credentials of the production environment&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To use this config, copy the file &lt;code&gt;config_with_per_env_credentials.yml.example&lt;/code&gt; to your project&#39;s &lt;code&gt;.circleci/config.yml&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Tests parallelism&lt;/h2&gt; &#xA;&lt;p&gt;You can enable the tests parallelism by providing the &lt;code&gt;tests-parallelism&lt;/code&gt; variable with a value greater than 1. It will split the RSpec suite in X smaller pipelines that should really speed up the execution time if your project&#39;s tests are slow. Be careful, as it will spawn &lt;strong&gt;real&lt;/strong&gt; containers. So, for example, if you set &lt;code&gt;tests-parallelism&lt;/code&gt; to 3, each pipeline (commit) running on your project will effectively run 4 pipelines. That leaves that much less spots in the queue for your other projects and other pipelines to run. So, consider this option &lt;strong&gt;ONLY&lt;/strong&gt; if this is worth it.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.capsens.eu/&#34;&gt;https://www.capsens.eu/&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>TierMobility/techdocs-container</title>
    <updated>2024-03-29T01:27:18Z</updated>
    <id>tag:github.com,2024-03-29:/TierMobility/techdocs-container</id>
    <link href="https://github.com/TierMobility/techdocs-container" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Docker container that powers the generation of TechDocs static sites at TIER Mobility. Inspired by Backstage&#39;s techdocs-container.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;TIER Mobility TechDocs Container&lt;/h1&gt; &#xA;&lt;p&gt;A Docker container that powers the generation of TechDocs static sites at TIER Mobility.&lt;br&gt; Inspired by the Backstage &lt;a href=&#34;https://github.com/backstage/techdocs-container&#34;&gt;techdocs-container&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Builds on top of &lt;a href=&#34;https://mkdocs.org/&#34;&gt;mkdocs&lt;/a&gt; and our customized &lt;a href=&#34;https://github.com/TierMobility/tier-mkdocs-techdocs-core&#34;&gt;core mkdocs plugin&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;First, create a &lt;code&gt;docs/&lt;/code&gt; directory and place your markdown files into it. Note that for &lt;code&gt;mkdocs&lt;/code&gt; to properly recognize your docs directory, this folder &lt;strong&gt;needs&lt;/strong&gt; to contain an &lt;code&gt;index.md&lt;/code&gt; file.&lt;br&gt; Then, create your mkdocs config file, &lt;code&gt;mkdocs.yaml&lt;/code&gt; and place it next to (not inside) the &lt;code&gt;docs/&lt;/code&gt; directory. In order to use the functionality provided by our &lt;a href=&#34;https://github.com/TierMobility/tier-mkdocs-techdocs-core&#34;&gt;core mkdocs plugin&lt;/a&gt;, specify &lt;code&gt;tier-techdocs-core&lt;/code&gt; in the &lt;code&gt;plugins&lt;/code&gt; section of the config.&lt;/p&gt; &#xA;&lt;p&gt;Here is an example of a &lt;code&gt;mkdocs.yaml&lt;/code&gt; config file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;site_name: My Docs&#xA;&#xA;plugins:&#xA;  - tier-techdocs-core&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Before you proceed, make sure you are logged in to GitHub container registry. Check the &lt;a href=&#34;https://docs.github.com/en/packages/working-with-a-github-packages-registry/working-with-the-container-registry#authenticating-to-the-container-registry&#34;&gt;official documentation&lt;/a&gt; to learn how to do this.&lt;/p&gt; &#xA;&lt;p&gt;Now, you can use the Backstage &lt;code&gt;techdocs-cli&lt;/code&gt; to serve a preview of your static site:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;npx @techdocs/cli serve -i ghcr.io/tiermobility/techdocs-container:latest&lt;/code&gt;&lt;/p&gt;</summary>
  </entry>
</feed>