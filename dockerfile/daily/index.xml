<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dockerfile Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-01-02T01:32:16Z</updated>
  <subtitle>Daily Trending of Dockerfile in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>l3tnun/docker-mirakurun-epgstation</title>
    <updated>2023-01-02T01:32:16Z</updated>
    <id>tag:github.com,2023-01-02:/l3tnun/docker-mirakurun-epgstation</id>
    <link href="https://github.com/l3tnun/docker-mirakurun-epgstation" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Mirakurun + EPGStation on Docker&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;docker-mirakurun-epgstation&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Chinachu/Mirakurun&#34;&gt;Mirakurun&lt;/a&gt; + &lt;a href=&#34;https://github.com/l3tnun/EPGStation&#34;&gt;EPGStation&lt;/a&gt; の Docker コンテナ&lt;/p&gt; &#xA;&lt;h2&gt;前提条件&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Docker, docker-compose の導入が必須&lt;/li&gt; &#xA; &lt;li&gt;ホスト上の pcscd は停止する&lt;/li&gt; &#xA; &lt;li&gt;チューナーのドライバが適切にインストールされていること&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;インストール手順&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;curl -sf https://raw.githubusercontent.com/l3tnun/docker-mirakurun-epgstation/v2/setup.sh | sh -s&#xA;cd docker-mirakurun-epgstation&#xA;&#xA;#チャンネル設定&#xA;vim mirakurun/conf/channels.yml&#xA;&#xA;#コメントアウトされている restart や user の設定を適宜変更する&#xA;vim docker-compose.yml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;起動&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo docker-compose up -d&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;チャンネルスキャン地上波のみ(取得漏れが出る場合もあるので注意)&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;curl -X PUT &#34;http://localhost:40772/api/config/channels/scan&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;mirakurun の EPG 更新を待ってからブラウザで &lt;a href=&#34;http://DockerHostIP:8888&#34;&gt;http://DockerHostIP:8888&lt;/a&gt; へアクセスし動作を確認する&lt;/p&gt; &#xA;&lt;h2&gt;停止&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo docker-compose down&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;更新&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# mirakurunとdbを更新&#xA;sudo docker-compose pull&#xA;# epgstationを更新&#xA;sudo docker-compose build --pull&#xA;# 最新のイメージを元に起動&#xA;sudo docker-compose up -d&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;設定&lt;/h2&gt; &#xA;&lt;h3&gt;Mirakurun&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ポート番号: 40772&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;EPGStation&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ポート番号: 8888&lt;/li&gt; &#xA; &lt;li&gt;ポート番号: 8889&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;各種ファイル保存先&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;録画データ&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;code&gt;./recorded&lt;/code&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;サムネイル&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;code&gt;./epgstation/thumbnail&lt;/code&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;予約情報と HLS 配信時の一時ファイル&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;code&gt;./epgstation/data&lt;/code&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;EPGStation 設定ファイル&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;code&gt;./epgstation/config&lt;/code&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;EPGStation のログ&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;code&gt;./epgstation/logs&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;v1からの移行について&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/l3tnun/docker-mirakurun-epgstation/v2/docs/migration.md&#34;&gt;docs/migration.md&lt;/a&gt;を参照&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>linuxserver/docker-emulatorjs</title>
    <updated>2023-01-02T01:32:16Z</updated>
    <id>tag:github.com,2023-01-02:/linuxserver/docker-emulatorjs</id>
    <link href="https://github.com/linuxserver/docker-emulatorjs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Web based retro emulation frontend with rom scanning and automated art ingestion.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://linuxserver.io&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/linuxserver/docker-templates/master/linuxserver.io/img/linuxserver_medium.png&#34; alt=&#34;linuxserver.io&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://blog.linuxserver.io&#34; title=&#34;all the things you can do with our containers including How-To guides, opinions and much more!&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1.svg?color=94398d&amp;amp;labelColor=555555&amp;amp;logoColor=ffffff&amp;amp;style=for-the-badge&amp;amp;label=linuxserver.io&amp;amp;message=Blog&#34; alt=&#34;Blog&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/YWrKVTn&#34; title=&#34;realtime support / chat with the community and the team.&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/354974912613449730.svg?color=94398d&amp;amp;labelColor=555555&amp;amp;logoColor=ffffff&amp;amp;style=for-the-badge&amp;amp;label=Discord&amp;amp;logo=discord&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discourse.linuxserver.io&#34; title=&#34;post on our community forum.&#34;&gt;&lt;img src=&#34;https://img.shields.io/discourse/https/discourse.linuxserver.io/topics.svg?color=94398d&amp;amp;labelColor=555555&amp;amp;logoColor=ffffff&amp;amp;style=for-the-badge&amp;amp;logo=discourse&#34; alt=&#34;Discourse&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://fleet.linuxserver.io&#34; title=&#34;an online web interface which displays all of our maintained images.&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1.svg?color=94398d&amp;amp;labelColor=555555&amp;amp;logoColor=ffffff&amp;amp;style=for-the-badge&amp;amp;label=linuxserver.io&amp;amp;message=Fleet&#34; alt=&#34;Fleet&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/linuxserver&#34; title=&#34;view the source for all of our repositories.&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1.svg?color=94398d&amp;amp;labelColor=555555&amp;amp;logoColor=ffffff&amp;amp;style=for-the-badge&amp;amp;label=linuxserver.io&amp;amp;message=GitHub&amp;amp;logo=github&#34; alt=&#34;GitHub&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/linuxserver&#34; title=&#34;please consider helping us by either donating or contributing to our budget&#34;&gt;&lt;img src=&#34;https://img.shields.io/opencollective/all/linuxserver.svg?color=94398d&amp;amp;labelColor=555555&amp;amp;logoColor=ffffff&amp;amp;style=for-the-badge&amp;amp;label=Supporters&amp;amp;logo=open%20collective&#34; alt=&#34;Open Collective&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://linuxserver.io&#34;&gt;LinuxServer.io&lt;/a&gt; team brings you another container release featuring:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;regular and timely application updates&lt;/li&gt; &#xA; &lt;li&gt;easy user mappings (PGID, PUID)&lt;/li&gt; &#xA; &lt;li&gt;custom base image with s6 overlay&lt;/li&gt; &#xA; &lt;li&gt;weekly base OS updates with common layers across the entire LinuxServer.io ecosystem to minimise space usage, down time and bandwidth&lt;/li&gt; &#xA; &lt;li&gt;regular security updates&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Find us at:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.linuxserver.io&#34;&gt;Blog&lt;/a&gt; - all the things you can do with our containers including How-To guides, opinions and much more!&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://discord.gg/YWrKVTn&#34;&gt;Discord&lt;/a&gt; - realtime support / chat with the community and the team.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://discourse.linuxserver.io&#34;&gt;Discourse&lt;/a&gt; - post on our community forum.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://fleet.linuxserver.io&#34;&gt;Fleet&lt;/a&gt; - an online web interface which displays all of our maintained images.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/linuxserver&#34;&gt;GitHub&lt;/a&gt; - view the source for all of our repositories.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://opencollective.com/linuxserver&#34;&gt;Open Collective&lt;/a&gt; - please consider helping us by either donating or contributing to our budget&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;&lt;a href=&#34;https://github.com/linuxserver/docker-emulatorjs&#34;&gt;linuxserver/emulatorjs&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://scarf.sh/gateway/linuxserver-ci/docker/linuxserver%2Femulatorjs&#34;&gt;&lt;img src=&#34;https://scarf.sh/installs-badge/linuxserver-ci/linuxserver%2Femulatorjs?color=94398d&amp;amp;label-color=555555&amp;amp;logo-color=ffffff&amp;amp;style=for-the-badge&amp;amp;package-type=docker&#34; alt=&#34;Scarf.io pulls&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/linuxserver/docker-emulatorjs&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/linuxserver/docker-emulatorjs.svg?color=94398d&amp;amp;labelColor=555555&amp;amp;logoColor=ffffff&amp;amp;style=for-the-badge&amp;amp;logo=github&#34; alt=&#34;GitHub Stars&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/linuxserver/docker-emulatorjs/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/linuxserver/docker-emulatorjs.svg?color=94398d&amp;amp;labelColor=555555&amp;amp;logoColor=ffffff&amp;amp;style=for-the-badge&amp;amp;logo=github&#34; alt=&#34;GitHub Release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/linuxserver/docker-emulatorjs/packages&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1.svg?color=94398d&amp;amp;labelColor=555555&amp;amp;logoColor=ffffff&amp;amp;style=for-the-badge&amp;amp;label=linuxserver.io&amp;amp;message=GitHub%20Package&amp;amp;logo=github&#34; alt=&#34;GitHub Package Repository&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitlab.com/linuxserver.io/docker-emulatorjs/container_registry&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1.svg?color=94398d&amp;amp;labelColor=555555&amp;amp;logoColor=ffffff&amp;amp;style=for-the-badge&amp;amp;label=linuxserver.io&amp;amp;message=GitLab%20Registry&amp;amp;logo=gitlab&#34; alt=&#34;GitLab Container Registry&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://quay.io/repository/linuxserver.io/emulatorjs&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1.svg?color=94398d&amp;amp;labelColor=555555&amp;amp;logoColor=ffffff&amp;amp;style=for-the-badge&amp;amp;label=linuxserver.io&amp;amp;message=Quay.io&#34; alt=&#34;Quay.io&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/linuxserver/emulatorjs&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/pulls/linuxserver/emulatorjs.svg?color=94398d&amp;amp;labelColor=555555&amp;amp;logoColor=ffffff&amp;amp;style=for-the-badge&amp;amp;label=pulls&amp;amp;logo=docker&#34; alt=&#34;Docker Pulls&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/linuxserver/emulatorjs&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/stars/linuxserver/emulatorjs.svg?color=94398d&amp;amp;labelColor=555555&amp;amp;logoColor=ffffff&amp;amp;style=for-the-badge&amp;amp;label=stars&amp;amp;logo=docker&#34; alt=&#34;Docker Stars&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://ci.linuxserver.io/job/Docker-Pipeline-Builders/job/docker-emulatorjs/job/master/&#34;&gt;&lt;img src=&#34;https://img.shields.io/jenkins/build?labelColor=555555&amp;amp;logoColor=ffffff&amp;amp;style=for-the-badge&amp;amp;jobUrl=https%3A%2F%2Fci.linuxserver.io%2Fjob%2FDocker-Pipeline-Builders%2Fjob%2Fdocker-emulatorjs%2Fjob%2Fmaster%2F&amp;amp;logo=jenkins&#34; alt=&#34;Jenkins Build&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://ci-tests.linuxserver.io/linuxserver/emulatorjs/latest/index.html&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/dynamic/yaml?color=94398d&amp;amp;labelColor=555555&amp;amp;logoColor=ffffff&amp;amp;style=for-the-badge&amp;amp;label=CI&amp;amp;query=CI&amp;amp;url=https%3A%2F%2Fci-tests.linuxserver.io%2Flinuxserver%2Femulatorjs%2Flatest%2Fci-status.yml&#34; alt=&#34;LSIO CI&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/linuxserver/emulatorjs&#34;&gt;Emulatorjs&lt;/a&gt; - In browser web based emulation portable to nearly any device for many retro consoles. A mix of emulators is used between Libretro and EmulatorJS.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/linuxserver/emulatorjs&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/linuxserver/docker-templates/master/linuxserver.io/img/emulatorjs-logo.png&#34; alt=&#34;emulatorjs&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Supported Architectures&lt;/h2&gt; &#xA;&lt;p&gt;We utilise the docker manifest for multi-platform awareness. More information is available from docker &lt;a href=&#34;https://github.com/docker/distribution/raw/master/docs/spec/manifest-v2-2.md#manifest-list&#34;&gt;here&lt;/a&gt; and our announcement &lt;a href=&#34;https://blog.linuxserver.io/2019/02/21/the-lsio-pipeline-project/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Simply pulling &lt;code&gt;lscr.io/linuxserver/emulatorjs:latest&lt;/code&gt; should retrieve the correct image for your arch, but you can also pull specific arch images via tags.&lt;/p&gt; &#xA;&lt;p&gt;The architectures supported by this image are:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Architecture&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Available&lt;/th&gt; &#xA;   &lt;th&gt;Tag&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;x86-64&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;amd64-&amp;lt;version tag&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;arm64&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;arm64v8-&amp;lt;version tag&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;armhf&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;arm32v7-&amp;lt;version tag&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Application Setup&lt;/h2&gt; &#xA;&lt;p&gt;The Backend can be accessed at:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://yourhost:3000/&#34;&gt;http://yourhost:3000/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The first thing you will need to do is click to download the default art/configs from this interface, this will setup a skeleton directory in your &lt;code&gt;/data&lt;/code&gt; mount. From there add roms to the respective &lt;code&gt;roms&lt;/code&gt; directories and follow the on screen instructions to add them to your web frontend running on port 80.&lt;/p&gt; &#xA;&lt;p&gt;The frontend application has been initially optimized around being used with a standard gamepad (more specifically for modern Xbox consoles that have chromium based Edge browsers). The navigation revolves around the up/down/left/right keys to browse the menus and launch games. Mobile browsers will function, just keep in mind compatibility will be reduced especially for CD based games.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;It is important to note that some of the current emulators used for this frontend are obfuscated code, efforts are being made to &lt;a href=&#34;https://github.com/ethanaobrien/emulatorjs/&#34;&gt;reverse engineer it&lt;/a&gt; but you should know it can potentially reach out to third party services if you manually enable features like netplay (this should never happen in a stock setup). The point of this message is that on top of the de-obfuscation effort there is also effort to stop using binary blobs and shift to built from source libretro emscripten blobs, for now this web based emulation stack is the best for useability and compatibility. We are in the process to transitioning to libretro cores for emulators, currently 27/30 emulators have been replaced.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;For Xbox users please click the select button a couple times after launching a game to ensure the B button does not trigger a &#34;back&#34; action in the browser. (official name &#34;view button&#34; it is the two small squares) Exiting the controller mode and back to browser controls can be triggered by holding the start button for 3 seconds. (official name &#34;menu button&#34; the three lines) You will be unable to use features like save states and modify controller layouts on the emulatorjs based emulators currently as I have not determined a methodology of re-entering controller mode once you exit it. All normal game saves will function given you exit the game play screen cleanly using the B button for back this includes multi disc games for psx. Your game saves are stored in browser storage by hostname so if you make any changes to your local hosted setup (port or IP) the saves will not follow with it. For libretro based emulators you can use the button combination start+select+L+R to access the libretro menu and change settings/save or load/etc.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;We know about most of the oddities like crackling sound for some emulators, rendering issues, and games unreliably auto launching to fullscreen. In general full CD games on the Xbox web browser do not seem to work due to their size if you have a chd/pbp less than 450 megs it will run. Edge on Xbox has some kind of undocumented ram limitation of about a gigabyte. Until all emulators are transitioned to libretro cores the oddities of using self hosted EmulatorJS will not be something that can or should be solved using hacky workarounds interacting with obfuscated code. Just keep in mind these are full blown machine emulators running in Javascript in a browser, do not expect bare metal performance.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Mounting in existing rom directories can be achieved by pointing to the default folder structure, IE lets say you would like to mount your NES library:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;-v /path/to/nes/roms:/data/nes/roms&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;The folder names are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;3do&lt;/li&gt; &#xA; &lt;li&gt;arcade&lt;/li&gt; &#xA; &lt;li&gt;atari2600&lt;/li&gt; &#xA; &lt;li&gt;atari7800&lt;/li&gt; &#xA; &lt;li&gt;colecovision&lt;/li&gt; &#xA; &lt;li&gt;doom&lt;/li&gt; &#xA; &lt;li&gt;gb&lt;/li&gt; &#xA; &lt;li&gt;gba&lt;/li&gt; &#xA; &lt;li&gt;gbc&lt;/li&gt; &#xA; &lt;li&gt;jaguar&lt;/li&gt; &#xA; &lt;li&gt;lynx&lt;/li&gt; &#xA; &lt;li&gt;msx&lt;/li&gt; &#xA; &lt;li&gt;n64&lt;/li&gt; &#xA; &lt;li&gt;nds&lt;/li&gt; &#xA; &lt;li&gt;nes&lt;/li&gt; &#xA; &lt;li&gt;ngp&lt;/li&gt; &#xA; &lt;li&gt;odyssey2&lt;/li&gt; &#xA; &lt;li&gt;pce&lt;/li&gt; &#xA; &lt;li&gt;psx&lt;/li&gt; &#xA; &lt;li&gt;sega32x&lt;/li&gt; &#xA; &lt;li&gt;segaCD&lt;/li&gt; &#xA; &lt;li&gt;segaGG&lt;/li&gt; &#xA; &lt;li&gt;segaMD&lt;/li&gt; &#xA; &lt;li&gt;segaMS&lt;/li&gt; &#xA; &lt;li&gt;segaSaturn&lt;/li&gt; &#xA; &lt;li&gt;segaSG&lt;/li&gt; &#xA; &lt;li&gt;snes&lt;/li&gt; &#xA; &lt;li&gt;vb&lt;/li&gt; &#xA; &lt;li&gt;vectrex&lt;/li&gt; &#xA; &lt;li&gt;ws&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Here are some example snippets to help you get started creating a container.&lt;/p&gt; &#xA;&lt;h3&gt;docker-compose (recommended, &lt;a href=&#34;https://docs.linuxserver.io/general/docker-compose&#34;&gt;click here for more info&lt;/a&gt;)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;---&#xA;version: &#34;2.1&#34;&#xA;services:&#xA;  emulatorjs:&#xA;    image: lscr.io/linuxserver/emulatorjs:latest&#xA;    container_name: emulatorjs&#xA;    environment:&#xA;      - PUID=1000&#xA;      - PGID=1000&#xA;      - TZ=Europe/London&#xA;      - SUBFOLDER=/ #optional&#xA;    volumes:&#xA;      - /path/to/config:/config&#xA;      - /path/to/data:/data&#xA;    ports:&#xA;      - 3000:3000&#xA;      - 80:80&#xA;      - 4001:4001 #optional&#xA;    restart: unless-stopped&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;docker cli (&lt;a href=&#34;https://docs.docker.com/engine/reference/commandline/cli/&#34;&gt;click here for more info&lt;/a&gt;)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run -d \&#xA;  --name=emulatorjs \&#xA;  -e PUID=1000 \&#xA;  -e PGID=1000 \&#xA;  -e TZ=Europe/London \&#xA;  -e SUBFOLDER=/ `#optional` \&#xA;  -p 3000:3000 \&#xA;  -p 80:80 \&#xA;  -p 4001:4001 `#optional` \&#xA;  -v /path/to/config:/config \&#xA;  -v /path/to/data:/data \&#xA;  --restart unless-stopped \&#xA;  lscr.io/linuxserver/emulatorjs:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Parameters&lt;/h2&gt; &#xA;&lt;p&gt;Container images are configured using parameters passed at runtime (such as those above). These parameters are separated by a colon and indicate &lt;code&gt;&amp;lt;external&amp;gt;:&amp;lt;internal&amp;gt;&lt;/code&gt; respectively. For example, &lt;code&gt;-p 8080:80&lt;/code&gt; would expose port &lt;code&gt;80&lt;/code&gt; from inside the container to be accessible from the host&#39;s IP on port &lt;code&gt;8080&lt;/code&gt; outside the container.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Parameter&lt;/th&gt; &#xA;   &lt;th&gt;Function&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;-p 3000&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Rom/artwork management interface, used to generate/manage config files and download artwork&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;-p 80&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Emulation frontend containing static web files used to browse and launch games&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;-p 4001&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;IPFS peering port, if you want to participate in the P2P network to distribute frontend artwork please forward this to the Internet&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;-e PUID=1000&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;for UserID - see below for explanation&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;-e PGID=1000&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;for GroupID - see below for explanation&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;-e TZ=Europe/London&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Specify a timezone to use EG Europe/London&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;-e SUBFOLDER=/&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Specify a subfolder for reverse proxies IE &#39;/FOLDER/&#39;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;-v /config&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Path to store user profiles&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;-v /data&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Path to store roms/artwork&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Environment variables from files (Docker secrets)&lt;/h2&gt; &#xA;&lt;p&gt;You can set any environment variable from a file by using a special prepend &lt;code&gt;FILE__&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;As an example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;-e FILE__PASSWORD=/run/secrets/mysecretpassword&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Will set the environment variable &lt;code&gt;PASSWORD&lt;/code&gt; based on the contents of the &lt;code&gt;/run/secrets/mysecretpassword&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;h2&gt;Umask for running applications&lt;/h2&gt; &#xA;&lt;p&gt;For all of our images we provide the ability to override the default umask settings for services started within the containers using the optional &lt;code&gt;-e UMASK=022&lt;/code&gt; setting. Keep in mind umask is not chmod it subtracts from permissions based on it&#39;s value it does not add. Please read up &lt;a href=&#34;https://en.wikipedia.org/wiki/Umask&#34;&gt;here&lt;/a&gt; before asking for support.&lt;/p&gt; &#xA;&lt;h2&gt;User / Group Identifiers&lt;/h2&gt; &#xA;&lt;p&gt;When using volumes (&lt;code&gt;-v&lt;/code&gt; flags) permissions issues can arise between the host OS and the container, we avoid this issue by allowing you to specify the user &lt;code&gt;PUID&lt;/code&gt; and group &lt;code&gt;PGID&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Ensure any volume directories on the host are owned by the same user you specify and any permissions issues will vanish like magic.&lt;/p&gt; &#xA;&lt;p&gt;In this instance &lt;code&gt;PUID=1000&lt;/code&gt; and &lt;code&gt;PGID=1000&lt;/code&gt;, to find yours use &lt;code&gt;id user&lt;/code&gt; as below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  $ id username&#xA;    uid=1000(dockeruser) gid=1000(dockergroup) groups=1000(dockergroup)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Docker Mods&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://mods.linuxserver.io/?mod=emulatorjs&#34; title=&#34;view available mods for this container.&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/dynamic/yaml?color=94398d&amp;amp;labelColor=555555&amp;amp;logoColor=ffffff&amp;amp;style=for-the-badge&amp;amp;label=emulatorjs&amp;amp;query=%24.mods%5B%27emulatorjs%27%5D.mod_count&amp;amp;url=https%3A%2F%2Fraw.githubusercontent.com%2Flinuxserver%2Fdocker-mods%2Fmaster%2Fmod-list.yml&#34; alt=&#34;Docker Mods&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://mods.linuxserver.io/?mod=universal&#34; title=&#34;view available universal mods.&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/dynamic/yaml?color=94398d&amp;amp;labelColor=555555&amp;amp;logoColor=ffffff&amp;amp;style=for-the-badge&amp;amp;label=universal&amp;amp;query=%24.mods%5B%27universal%27%5D.mod_count&amp;amp;url=https%3A%2F%2Fraw.githubusercontent.com%2Flinuxserver%2Fdocker-mods%2Fmaster%2Fmod-list.yml&#34; alt=&#34;Docker Universal Mods&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;We publish various &lt;a href=&#34;https://github.com/linuxserver/docker-mods&#34;&gt;Docker Mods&lt;/a&gt; to enable additional functionality within the containers. The list of Mods available for this image (if any) as well as universal mods that can be applied to any one of our images can be accessed via the dynamic badges above.&lt;/p&gt; &#xA;&lt;h2&gt;Support Info&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Shell access whilst the container is running: &lt;code&gt;docker exec -it emulatorjs /bin/bash&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;To monitor the logs of the container in realtime: &lt;code&gt;docker logs -f emulatorjs&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;container version number &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;docker inspect -f &#39;{{ index .Config.Labels &#34;build_version&#34; }}&#39; emulatorjs&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;image version number &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;docker inspect -f &#39;{{ index .Config.Labels &#34;build_version&#34; }}&#39; lscr.io/linuxserver/emulatorjs:latest&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Updating Info&lt;/h2&gt; &#xA;&lt;p&gt;Most of our images are static, versioned, and require an image update and container recreation to update the app inside. With some exceptions (ie. nextcloud, plex), we do not recommend or support updating apps inside the container. Please consult the &lt;a href=&#34;https://raw.githubusercontent.com/linuxserver/docker-emulatorjs/master/#application-setup&#34;&gt;Application Setup&lt;/a&gt; section above to see if it is recommended for the image.&lt;/p&gt; &#xA;&lt;p&gt;Below are the instructions for updating containers:&lt;/p&gt; &#xA;&lt;h3&gt;Via Docker Compose&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Update all images: &lt;code&gt;docker-compose pull&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;or update a single image: &lt;code&gt;docker-compose pull emulatorjs&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Let compose update all containers as necessary: &lt;code&gt;docker-compose up -d&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;or update a single container: &lt;code&gt;docker-compose up -d emulatorjs&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;You can also remove the old dangling images: &lt;code&gt;docker image prune&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Via Docker Run&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Update the image: &lt;code&gt;docker pull lscr.io/linuxserver/emulatorjs:latest&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Stop the running container: &lt;code&gt;docker stop emulatorjs&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Delete the container: &lt;code&gt;docker rm emulatorjs&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Recreate a new container with the same docker run parameters as instructed above (if mapped correctly to a host folder, your &lt;code&gt;/config&lt;/code&gt; folder and settings will be preserved)&lt;/li&gt; &#xA; &lt;li&gt;You can also remove the old dangling images: &lt;code&gt;docker image prune&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Via Watchtower auto-updater (only use if you don&#39;t remember the original parameters)&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Pull the latest image at its tag and replace it with the same env variables in one run:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run --rm \&#xA;-v /var/run/docker.sock:/var/run/docker.sock \&#xA;containrrr/watchtower \&#xA;--run-once emulatorjs&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;You can also remove the old dangling images: &lt;code&gt;docker image prune&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; We do not endorse the use of Watchtower as a solution to automated updates of existing Docker containers. In fact we generally discourage automated updates. However, this is a useful tool for one-time manual updates of containers where you have forgotten the original parameters. In the long term, we highly recommend using &lt;a href=&#34;https://docs.linuxserver.io/general/docker-compose&#34;&gt;Docker Compose&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Image Update Notifications - Diun (Docker Image Update Notifier)&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;We recommend &lt;a href=&#34;https://crazymax.dev/diun/&#34;&gt;Diun&lt;/a&gt; for update notifications. Other tools that automatically update containers unattended are not recommended or supported.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Building locally&lt;/h2&gt; &#xA;&lt;p&gt;If you want to make local modifications to these images for development purposes or just to customize the logic:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/linuxserver/docker-emulatorjs.git&#xA;cd docker-emulatorjs&#xA;docker build \&#xA;  --no-cache \&#xA;  --pull \&#xA;  -t lscr.io/linuxserver/emulatorjs:latest .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The ARM variants can be built on x86_64 hardware using &lt;code&gt;multiarch/qemu-user-static&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run --rm --privileged multiarch/qemu-user-static:register --reset&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once registered you can define the dockerfile to use with &lt;code&gt;-f Dockerfile.aarch64&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Versions&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;24.11.22:&lt;/strong&gt; - Update IPFS links for chdman.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;04.04.22:&lt;/strong&gt; - Ingest pre-built chdman bins during build time.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;23.02.22:&lt;/strong&gt; - Update ingestion point for emulatorjs bins.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;25.01.22:&lt;/strong&gt; - Allow users to mount in existing rom directories.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;14.01.22:&lt;/strong&gt; - Add profile paths and rebase to Alpine 3.15.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;04.01.22:&lt;/strong&gt; - Add headers needed for Threaded emulators.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;29.11.21:&lt;/strong&gt; - Add wasm mime type to NGINX.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;26.11.21:&lt;/strong&gt; - Configure IPFS in a lower power mode, use homebuilt blobs for emu cores.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;19.11.21:&lt;/strong&gt; - Pin retroarch version.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;14.11.21:&lt;/strong&gt; - Update default cores to ingest.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;23.10.21:&lt;/strong&gt; - Initial release.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>LazyDeveloperr/Mogneius</title>
    <updated>2023-01-02T01:32:16Z</updated>
    <id>tag:github.com,2023-01-02:/LazyDeveloperr/Mogneius</id>
    <link href="https://github.com/LazyDeveloperr/Mogneius" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;mogenius&lt;/h1&gt; &#xA;&lt;p&gt;An Script to host telegram bot on mogenius.com&lt;/p&gt; &#xA;&lt;h1&gt;Credits&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ITZ-ZAID&#34;&gt;ITZ-ZAID&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>