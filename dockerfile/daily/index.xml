<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dockerfile Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-03T01:37:30Z</updated>
  <subtitle>Daily Trending of Dockerfile in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>kelseyhightower/nocode</title>
    <updated>2022-06-03T01:37:30Z</updated>
    <id>tag:github.com,2022-06-03:/kelseyhightower/nocode</id>
    <link href="https://github.com/kelseyhightower/nocode" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The best way to write secure and reliable applications. Write nothing; deploy nowhere.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;No Code&lt;/h1&gt; &#xA;&lt;p&gt;No code is the best way to write secure and reliable applications. Write nothing; deploy nowhere.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;Start by not writing any code.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is just an example application, but imagine it doing anything you want. Adding new features is easy too:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The possibilities are endless.&lt;/p&gt; &#xA;&lt;h3&gt;Building the Application&lt;/h3&gt; &#xA;&lt;p&gt;Now that you have not done anything it&#39;s time to build your application:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Yep. That&#39;s it. You should see the following output:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Deploying&lt;/h3&gt; &#xA;&lt;p&gt;While you still have not done anything it&#39;s time to deploy your application. By running the following command you can deploy your application absolutely nowhere.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It&#39;s that simple. And when it comes time to scale the application, all you have to do is:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;I know right?&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;You don&#39;t.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>aws/aws-codebuild-docker-images</title>
    <updated>2022-06-03T01:37:30Z</updated>
    <id>tag:github.com,2022-06-03:/aws/aws-codebuild-docker-images</id>
    <link href="https://github.com/aws/aws-codebuild-docker-images" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Official AWS CodeBuild repository for managed Docker images http://docs.aws.amazon.com/codebuild/latest/userguide/build-env-ref.html&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;AWS CodeBuild curated Docker images&lt;/h1&gt; &#xA;&lt;p&gt;This repository holds Dockerfiles of official AWS CodeBuild curated Docker images. Please refer to &lt;a href=&#34;http://docs.aws.amazon.com/codebuild/latest/userguide/build-env-ref.html&#34;&gt;the AWS CodeBuild User Guide&lt;/a&gt; for list of environments supported by AWS CodeBuild.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://codebuild.us-west-2.amazonaws.com/badges?uuid=eyJlbmNyeXB0ZWREYXRhIjoiSkJibVVQVEpvUms1cmw3YVlnU1hSdkpBQ0c5SFgyTkJXMFBFdEU2SWtySHREcUlUVlRhbW4zMEd3NlhsOWIzUWgvRkxhUWVSSTFPZGNNakNHRVNLalY0PSIsIml2UGFyYW1ldGVyU3BlYyI6IlV0QjBRZXRvS0F5dE5vbTciLCJtYXRlcmlhbFNldFNlcmlhbCI6MX0%3D&amp;amp;branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The master branch will sometimes have changes that are still in the process of being released in AWS CodeBuild. See the latest released versions of the Dockerfiles &lt;a href=&#34;https://github.com/aws/aws-codebuild-docker-images/releases&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;How to build Docker images&lt;/h3&gt; &#xA;&lt;p&gt;Steps to build Standard 5.0 image&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Run &lt;code&gt;git clone https://github.com/aws/aws-codebuild-docker-images.git&lt;/code&gt; to download this repository to your local machine&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;cd ubuntu/standard/5.0&lt;/code&gt; to change the directory in your local workspace. This is the location of the Standard 5.0 Dockerfile with Ubuntu base.&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;docker build -t aws/codebuild/standard:5.0 .&lt;/code&gt; to build Docker image locally&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To poke around in the image interactively, build it and run: &lt;code&gt;docker run -it --entrypoint sh aws/codebuild/standard:5.0 -c bash&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;To let the Docker daemon start up in the container, build it and run: &lt;code&gt;docker run -it --privileged aws/codebuild/standard:5.0 bash&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ git clone https://github.com/aws/aws-codebuild-docker-images.git&#xA;$ cd aws-codebuild-docker-images&#xA;$ cd ubuntu/standard/5.0&#xA;$ docker build -t aws/codebuild/standard:5.0 .&#xA;$ docker run -it --entrypoint sh aws/codebuild/standard:5.0 -c bash&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Image maintenance&lt;/h3&gt; &#xA;&lt;p&gt;Some of the images in this repository are no longer actively maintained by AWS CodeBuild and may no longer build successfully. These images will not receive any further updates. They remain in this repository as a reference for the contents of these images that were previously released by CodeBuild.&lt;/p&gt; &#xA;&lt;p&gt;The following images are actively maintained by AWS CodeBuild, and are listed in the CodeBuild console.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aws/aws-codebuild-docker-images/master/ubuntu/standard/3.0&#34;&gt;standard 3.0&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aws/aws-codebuild-docker-images/master/ubuntu/standard/4.0&#34;&gt;standard 4.0&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aws/aws-codebuild-docker-images/master/ubuntu/standard/5.0&#34;&gt;standard 5.0&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aws/aws-codebuild-docker-images/master/al2/x86_64/standard/2.0&#34;&gt;amazonlinux2-x86_64-standard:2.0&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aws/aws-codebuild-docker-images/master/al2/x86_64/standard/3.0&#34;&gt;amazonlinux2-x86_64-standard:3.0&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aws/aws-codebuild-docker-images/master/al2/aarch64/standard/1.0&#34;&gt;amazonlinux2-aarch64-standard:1.0&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aws/aws-codebuild-docker-images/master/al2/aarch64/standard/2.0&#34;&gt;amazonlinux2-aarch64-standard:2.0&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>corretto/corretto-docker</title>
    <updated>2022-06-03T01:37:30Z</updated>
    <id>tag:github.com,2022-06-03:/corretto/corretto-docker</id>
    <link href="https://github.com/corretto/corretto-docker" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Dockerfiles for Amazon Corretto Official images.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Corretto Docker &lt;img src=&#34;https://github.com/corretto/corretto-docker/workflows/Verify%20Docker%20Images/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/h1&gt; &#xA;&lt;p&gt;Master repository where Dockerfiles for Amazon Corretto are hosted. These docker files are used to build images for &lt;a href=&#34;https://hub.docker.com/_/amazoncorretto&#34;&gt;Amazon Corretto Offical Images&lt;/a&gt; and ECR images.&lt;/p&gt; &#xA;&lt;h1&gt;Usage&lt;/h1&gt; &#xA;&lt;p&gt;The docker images are available on &lt;a href=&#34;https://hub.docker.com/_/amazoncorretto&#34;&gt;Amazon Corretto Official Images&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;To use Amazon Corretto Official Images from Docker hub run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker pull amazoncorretto:11&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The docker images are also available on &lt;strong&gt;Amazon ECR&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To use the docker images from Amazon ECR, you would need to authenticate with the ECR registry (id: 489478819445) with the help of instruction from &lt;a href=&#34;https://aws.amazon.com/blogs/compute/authenticating-amazon-ecr-repositories-for-docker-cli-with-credential-helper/&#34;&gt;here&lt;/a&gt;. Once authenticated, Amazon Corretto docker images can be pulled using command&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker pull 489478819445.dkr.ecr.us-west-2.amazonaws.com/amazoncorretto:latest&#xA;docker run -it 489478819445.dkr.ecr.us-west-2.amazonaws.com/amazoncorretto:latest /bin/bash&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can view the available tags, run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;aws ecr list-images --region us-west-2 --registry-id 489478819445 --repository-name amazoncorretto | jq -r &#39;.imageIds[] | .imageTag&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Supported Tags&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://hub.docker.com/_/amazoncorretto&#34;&gt;8, 8u332, 8u332-al2, 8-al2-full,8-al2-jdk, latest&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://hub.docker.com/_/amazoncorretto&#34;&gt;11, 11.0.15, 11.0.15-al2, 11-al2-jdk, 11-al2-full&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://hub.docker.com/_/amazoncorretto&#34;&gt;8-alpine, 8u322-alpine, 8-alpine-full, 8-alpine-jdk&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://hub.docker.com/_/amazoncorretto&#34;&gt;8-alpine-jre, 8u322-alpine-jre&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://hub.docker.com/_/amazoncorretto&#34;&gt;8-alpine3.13, 8u322-alpine3.13, 8-alpine3.13-full, 8-alpine3.13-jdk&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://hub.docker.com/_/amazoncorretto&#34;&gt;8-alpine3.13-jre, 8u322-alpine3.13-jre&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://hub.docker.com/_/amazoncorretto&#34;&gt;8-alpine3.14, 8u322-alpine3.14, 8-alpine3.14-full, 8-alpine3.14-jdk&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://hub.docker.com/_/amazoncorretto&#34;&gt;8-alpine3.14-jre, 8u322-alpine3.14-jre&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://hub.docker.com/_/amazoncorretto&#34;&gt;11-alpine, 11.0.14-alpine, 11-alpine-full, 11-alpine-jdk&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://hub.docker.com/_/amazoncorretto&#34;&gt;11-alpine3.13, 11.0.14-alpine3.13, 11-alpine3.13-full, 11-alpine3.13-jdk&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://hub.docker.com/_/amazoncorretto&#34;&gt;11-alpine3.14, 11.0.14-alpine3.14, 11-alpine3.14-full, 11-alpine3.14-jdk&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://hub.docker.com/_/amazoncorretto&#34;&gt;17, 17-al2-jdk, 17-al2-full&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://hub.docker.com/_/amazoncorretto&#34;&gt;17-alpine3.13, 17.0.2-alpine3.13, 17-alpine3.13-full, 17-alpine3.13-jdk&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://hub.docker.com/_/amazoncorretto&#34;&gt;17-alpine3.14, 17.0.2-alpine3.14, 17-alpine3.14-full, 17-alpine3.14-jdk, 17-alpine, 17.0.2-alpine, 17-alpine-full, 17-alpine-jdk&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Building&lt;/h1&gt; &#xA;&lt;p&gt;To build the docker images, you can use the following command.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker build -t amazon-corretto-{major_version} -f ./{major_version}/{jdk|jre|slim}/{al2|alpine|debian}/Dockerfile .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Security&lt;/h1&gt; &#xA;&lt;p&gt;If you would like to report a potential security issue in this project, please do not create a GitHub issue. Instead, please follow the instructions &lt;a href=&#34;https://aws.amazon.com/security/vulnerability-reporting/&#34;&gt;here&lt;/a&gt; or email AWS security directly.&lt;/p&gt; &#xA;&lt;h2&gt;Why does security scanner show that a docker image has a CVE?&lt;/h2&gt; &#xA;&lt;p&gt;&lt;span&gt;⚠&lt;/span&gt; If you are using a Corretto Docker image with an AL2 guest, then Amazon’s ECS scanning function can result in a &lt;a href=&#34;https://alas.aws.amazon.com/AL2/ALAS-2021-1731.html&#34;&gt;ALAS2-2021-1731 notification&lt;/a&gt;. However, there is no reason to update the Corretto application within Docker. You can safely ignore this ALAS. Once the next Corretto quarterly release is posted, currently scheduled for January 19, 2022, the alarm condition will be satisfied. This notice only affects the following Corretto Docker images with AL2 in the Docker ECR:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://hub.docker.com/_/amazoncorretto&#34;&gt;11, 11.0.15, 11.0.15-al2, 11-al2-jdk, 11-al2-full&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://hub.docker.com/_/amazoncorretto&#34;&gt;17, 17-al2-jdk, 17-al2-full&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;If a security scanner reports that an amazoncorretto image includes a CVE, the first recommended action is to pull an updated version of this image.&lt;/p&gt; &#xA;&lt;p&gt;If no updated image is available, run the appropriate command to update packages for the platform, ie. run &#34;apk -U upgrade&#34; for Alpine or &#34;yum update -y --security&#34; for AmazonLinux in your Dockerfiles or systems to resolve the issue immediately.&lt;/p&gt; &#xA;&lt;p&gt;If no updated package is available, please treat this as a potential security issue and follow &lt;a href=&#34;https://aws.amazon.com/security/vulnerability-reporting/&#34;&gt;these instructions&lt;/a&gt; or email AWS security directly at &lt;a href=&#34;mailto:aws-security@amazon.com&#34;&gt;aws-security@amazon.com&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;It is the responsibility of the base docker image supplier to provide timely security updates to images and packages. The amazoncorretto images are automatically rebuilt when a new base image is made available, but we do not make changes to our Dockerfiles to pull in one-off package updates. If a new base image has not yet been made generally available by a base docker image maintainer, please contact that maintainer to request that the issue be addressed.&lt;/p&gt; &#xA;&lt;p&gt;Note that there are multiple reasons why a CVE may appear to be present in a docker image, as explained in the &lt;a href=&#34;https://github.com/docker-library/faq/tree/73f10b0daf2fb8e7b38efaccc0e90b3510919d51#why-does-my-security-scanner-show-that-an-image-has-cves&#34;&gt;docker library FAQs&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>onplus/v2hero</title>
    <updated>2022-06-03T01:37:30Z</updated>
    <id>tag:github.com,2022-06-03:/onplus/v2hero</id>
    <link href="https://github.com/onplus/v2hero" rel="alternate"></link>
    <summary type="html">&lt;p&gt;All Free . Deploy V2Ray to Heroku . v2ray学习参考&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;v2hero &amp;nbsp;&lt;a href=&#34;https://travis-ci.org/onplus/v2hero&#34;&gt;&lt;img src=&#34;https://travis-ci.org/onplus/v2hero.svg?branch=core-3.1&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;本项目是一个&lt;a href=&#34;https://github.com/onplus/v2hero/tree/core-3.8&#34;&gt;利用Travis-CI部署Docker到Heroku&lt;/a&gt; 的学习示例。&lt;/p&gt; &#xA;&lt;p&gt;如果为您的学习提供了帮助，欢迎给一个Star ^_^&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;快捷部署 &lt;a href=&#34;https://heroku.com/deploy?template=https://github.com/onplus/v2hero/tree/core-latest&#34;&gt;&lt;img src=&#34;https://www.herokucdn.com/deploy/button.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;提问&amp;amp;建议 &lt;a href=&#34;https://github.com/onplus/v2hero/issues&#34;&gt;https://github.com/onplus/v2hero/issues&lt;/a&gt; &amp;nbsp; 发起issue前请尽量先使用文档和搜索&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;相关项目 &lt;a href=&#34;https://github.com/onplus/shadowsocks-heroku&#34;&gt;https://github.com/onplus/shadowsocks-heroku&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;实现参考&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/v2ray/v2ray-core&#34;&gt;https://github.com/v2ray/v2ray-core&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/wangyi2005/v2ray&#34;&gt;https://github.com/wangyi2005/v2ray&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Heroku &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://devcenter.heroku.com/articles/container-registry-and-runtime&#34;&gt;https://devcenter.heroku.com/articles/container-registry-and-runtime&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://devcenter.heroku.com/articles/build-docker-images-heroku-yml&#34;&gt;https://devcenter.heroku.com/articles/build-docker-images-heroku-yml&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>Misaka-blog/KOXray</title>
    <updated>2022-06-03T01:37:30Z</updated>
    <id>tag:github.com,2022-06-03:/Misaka-blog/KOXray</id>
    <link href="https://github.com/Misaka-blog/KOXray" rel="alternate"></link>
    <summary type="html">&lt;p&gt;某容器云部署Xray高性能代理服务&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;某容器云部署Xray高性能代理服务&lt;/h1&gt; &#xA;&lt;p&gt;在某容器云部署Xray高性能代理服务，通过ws传输的(vmess、vless、trojan、shadowsocks、socks)等协议&lt;/p&gt; &#xA;&lt;p&gt;Kxxxb：&lt;a href=&#34;https://owo.misaka.rest/koyeb-xray/&#34;&gt;https://owo.misaka.rest/koyeb-xray/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Flyio（已被检测，需要付费）：&lt;a href=&#34;https://owo.misaka.rest/flyio-xray/&#34;&gt;https://owo.misaka.rest/flyio-xray/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;请勿使用常用的账号部署此项目，以免封号！！&lt;/h1&gt; &#xA;&lt;p&gt;关于本脚本加密sh文件的说明：由于某容器云已识别本脚本，故不得不加密项目的sh文件代码&lt;/p&gt; &#xA;&lt;h2&gt;部署步骤&lt;/h2&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Fly.io 容器云 （已被检测，需要付费）&lt;/summary&gt; 1. 使用以下命令安装Flyctl工具 &#xA; &lt;p&gt;Windows：&lt;code&gt;iwr https://fly.io/install.ps1 -useb | iex&lt;/code&gt;&lt;/p&gt; &#xA; &lt;p&gt;（请使用PowerShell或Windows终端的管理员模式安装）&lt;/p&gt; &#xA; &lt;p&gt;Mac OS / Linux：&lt;code&gt;curl -L https://fly.io/install.sh | sh&lt;/code&gt;&lt;/p&gt; &#xA; &lt;ol start=&#34;2&#34;&gt; &#xA;  &lt;li&gt; &lt;p&gt;下载&lt;a href=&#34;https://github.com/Misaka-blog/KOXray&#34;&gt;KOXray项目文件&lt;/a&gt;，并解压&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;修改&lt;code&gt;Dockerfile&lt;/code&gt;内第3-5行修改自定义设置，说明如下：&lt;/p&gt; &lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;p&gt;&lt;code&gt;AUUID&lt;/code&gt;：用来部署节点的UUID，如有需要可在&lt;a href=&#34;https://www.uuidgenerator.net/&#34;&gt;uuidgenerator&lt;/a&gt;生成&lt;/p&gt; &#xA; &lt;p&gt;&lt;code&gt;CADDYIndexPage&lt;/code&gt;：伪装站首页文件&lt;/p&gt; &#xA; &lt;p&gt;&lt;code&gt;ParameterSSENCYPT&lt;/code&gt;：ShadowSocks加密协议&lt;/p&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/Misaka-blog/tuchuang@master/20220423024827.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA; &lt;ol start=&#34;4&#34;&gt; &#xA;  &lt;li&gt;右键当前目录，点击“从终端中打开”&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/Misaka-blog/tuchuang@master/20220423024905.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA; &lt;ol start=&#34;5&#34;&gt; &#xA;  &lt;li&gt; &lt;p&gt;输入&lt;code&gt;flyctl auth login&lt;/code&gt;，在CLI页面登陆自己的Fly.io账号&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;输入&lt;code&gt;flyctl launch&lt;/code&gt;，然后按照下图设置&lt;/p&gt; &lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/Misaka-blog/tuchuang@master/20220423025437.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/Misaka-blog/tuchuang@master/20220423025618.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA; &lt;ol start=&#34;7&#34;&gt; &#xA;  &lt;li&gt;修改CLI生成的&lt;code&gt;fly.toml&lt;/code&gt;文件，将&lt;code&gt;internal_port = 8080&lt;/code&gt;改为&lt;code&gt;internal_port = 80&lt;/code&gt;&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/Misaka-blog/tuchuang@master/20220423025720.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA; &lt;ol start=&#34;8&#34;&gt; &#xA;  &lt;li&gt;回到命令行，输入&lt;code&gt;flyctl deploy&lt;/code&gt;进行推送至Fly.io&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/Misaka-blog/tuchuang@master/20220423025825.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA; &lt;ol start=&#34;9&#34;&gt; &#xA;  &lt;li&gt;CLI推送成功之后，在Fly.io的控制面板会提示刚刚部署的应用&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/Misaka-blog/tuchuang@master/20220423030020.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA; &lt;ol start=&#34;10&#34;&gt; &#xA;  &lt;li&gt;在这里你可以看到应用信息，复制Hostname备用&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/Misaka-blog/tuchuang@master/20220423030108.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA; &lt;ol start=&#34;11&#34;&gt; &#xA;  &lt;li&gt;客户端配置如下&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;p&gt;V2ray&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code&gt;地址：appname.fly.dev&#xA;端口：443&#xA;默认UUID：24b4b1e1-7a89-45f6-858c-242cf53b5bdb&#xA;vmess额外id：0&#xA;加密：none&#xA;传输协议：ws&#xA;伪装类型：none&#xA;伪装域名：appname.fly.dev&#xA;路径：/24b4b1e1-7a89-45f6-858c-242cf53b5bdb-vless&#xA;vless使用(/自定义UUID码-vless)，vmess使用(/自定义UUID码-vmess)&#xA;底层传输安全：tls&#xA;跳过证书验证：false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Trojan-go&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;{&#xA;    &#34;run_type&#34;: &#34;client&#34;,&#xA;    &#34;local_addr&#34;: &#34;127.0.0.1&#34;,&#xA;    &#34;local_port&#34;: 1080,&#xA;    &#34;remote_addr&#34;: &#34;appname.fly.dev&#34;,&#xA;    &#34;remote_port&#34;: 443,&#xA;    &#34;password&#34;: [&#xA;        &#34;24b4b1e1-7a89-45f6-858c-242cf53b5bdb&#34;&#xA;    ],&#xA;    &#34;websocket&#34;: {&#xA;        &#34;enabled&#34;: true,&#xA;        &#34;path&#34;: &#34;/24b4b1e1-7a89-45f6-858c-242cf53b5bdb-trojan&#34;,&#xA;        &#34;host&#34;: &#34;appname.fly.dev&#34;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;ShadowSocks&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;服务器地址: appname.fly.dev&#xA;端口: 443&#xA;密码：24b4b1e1-7a89-45f6-858c-242cf53b5bdb&#xA;加密：chacha20-ietf-poly1305&#xA;插件程序：xray-plugin_windows_amd64.exe&#xA;说明：需将插件 https://github.com/shadowsocks/xray-plugin/releases 下载解压后放至shadowsocks同目录&#xA;插件选项: tls;host=appname.fly.dev;path=/24b4b1e1-7a89-45f6-858c-242cf53b5bdb-ss&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Kxxxb 容器云&lt;/summary&gt; 1. Fork本仓库并改名 &#xA; &lt;ol start=&#34;2&#34;&gt; &#xA;  &lt;li&gt;在&lt;code&gt;Dockerfile&lt;/code&gt;内第3-5行修改自定义设置，说明如下：&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;p&gt;&lt;code&gt;AUUID&lt;/code&gt;：用来部署节点的UUID，如有需要可在&lt;a href=&#34;https://www.uuidgenerator.net/&#34;&gt;uuidgenerator&lt;/a&gt;生成&lt;/p&gt; &#xA; &lt;p&gt;&lt;code&gt;CADDYIndexPage&lt;/code&gt;：伪装站首页文件&lt;/p&gt; &#xA; &lt;p&gt;&lt;code&gt;ParameterSSENCYPT&lt;/code&gt;：ShadowSocks加密协议&lt;/p&gt; &#xA; &lt;ol start=&#34;3&#34;&gt; &#xA;  &lt;li&gt; &lt;p&gt;去&lt;a href=&#34;https://hub.docker.com/&#34;&gt;Docker Hub&lt;/a&gt;注册一个账号，如有账号可跳过&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;编辑Actions文件&lt;code&gt;docker-image.yml&lt;/code&gt;，按照“name: Docker Hub ID/自定义镜像名称”格式修改第13行&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;添加Actions的Secrets变量，变量说明如下&lt;/p&gt; &lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;p&gt;&lt;code&gt;DOCKER_USERNAME&lt;/code&gt;：Docker Hub ID&lt;/p&gt; &#xA; &lt;p&gt;&lt;code&gt;DOCKER_PASSWORD&lt;/code&gt;：Docker Hub 登录密码&lt;/p&gt; &#xA; &lt;ol start=&#34;6&#34;&gt; &#xA;  &lt;li&gt; &lt;p&gt;打开某容器云主页，新建一个应用&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;应用配置如下所示&lt;/p&gt; &lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;p&gt;&lt;code&gt;Docker Image&lt;/code&gt;：Docker Hub镜像地址，格式为“docker.io/Docker Hub ID/自定义镜像名称”&lt;/p&gt; &#xA; &lt;p&gt;&lt;code&gt;Container size&lt;/code&gt;：部署配置，一般默认即可&lt;/p&gt; &#xA; &lt;p&gt;&lt;code&gt;Port&lt;/code&gt;：80&lt;/p&gt; &#xA; &lt;p&gt;Environment variables：&lt;code&gt;Key&lt;/code&gt;：PORT，&lt;code&gt;Value&lt;/code&gt;：80 &lt;code&gt;Name&lt;/code&gt;：自己定义&lt;/p&gt; &#xA; &lt;ol start=&#34;8&#34;&gt; &#xA;  &lt;li&gt;客户端配置如下所示&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;p&gt;V2ray&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code&gt;地址：xxx-xxx.koyeb.app 或 CF优选IP&#xA;端口：443&#xA;默认UUID：24b4b1e1-7a89-45f6-858c-242cf53b5bdb&#xA;vmess额外id：0&#xA;加密：none&#xA;传输协议：ws&#xA;伪装类型：none&#xA;伪装域名：xxx-xxx.koyeb.app&#xA;路径：/24b4b1e1-7a89-45f6-858c-242cf53b5bdb-vless&#xA;vless使用(/自定义UUID码-vless)，vmess使用(/自定义UUID码-vmess)&#xA;底层传输安全：tls&#xA;跳过证书验证：false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Trojan-go&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;{&#xA;    &#34;run_type&#34;: &#34;client&#34;,&#xA;    &#34;local_addr&#34;: &#34;127.0.0.1&#34;,&#xA;    &#34;local_port&#34;: 1080,&#xA;    &#34;remote_addr&#34;: &#34;xxx-xxx.koyeb.app&#34;,&#xA;    &#34;remote_port&#34;: 443,&#xA;    &#34;password&#34;: [&#xA;        &#34;24b4b1e1-7a89-45f6-858c-242cf53b5bdb&#34;&#xA;    ],&#xA;    &#34;websocket&#34;: {&#xA;        &#34;enabled&#34;: true,&#xA;        &#34;path&#34;: &#34;/24b4b1e1-7a89-45f6-858c-242cf53b5bdb-trojan&#34;,&#xA;        &#34;host&#34;: &#34;xxx-xxx.koyeb.app&#34;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;ShadowSocks&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;服务器地址: xxx-xxx.koyeb.app&#xA;端口: 443&#xA;密码：24b4b1e1-7a89-45f6-858c-242cf53b5bdb&#xA;加密：chacha20-ietf-poly1305&#xA;插件程序：xray-plugin_windows_amd64.exe&#xA;说明：需将插件 https://github.com/shadowsocks/xray-plugin/releases 下载解压后放至shadowsocks同目录&#xA;插件选项: tls;host=xxx-xxx.koyeb.app;path=/24b4b1e1-7a89-45f6-858c-242cf53b5bdb-ss&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;注意&lt;/h2&gt; &#xA;&lt;p&gt;请勿滥用本仓库&lt;/p&gt; &#xA;&lt;h2&gt;赞助我们&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://s2.loli.net/2021/12/25/SimocqwhVg89NQJ.jpg&#34; alt=&#34;afdian-MisakaNo.jpg&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;交流群&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://t.me/misakanetcn&#34;&gt;Telegram&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Stars 增长记录&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://starchart.cc/Misaka-blog/KOXray&#34;&gt;&lt;img src=&#34;https://starchart.cc/Misaka-blog/KOXray.svg?sanitize=true&#34; alt=&#34;Stargazers over time&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>nnn-training/fibonacci</title>
    <updated>2022-06-03T01:37:30Z</updated>
    <id>tag:github.com,2022-06-03:/nnn-training/fibonacci</id>
    <link href="https://github.com/nnn-training/fibonacci" rel="alternate"></link>
    <summary type="html">&lt;p&gt;入門コースの3章3節 フィボナッチ数列&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>2398872109/cloudbaserun_app</title>
    <updated>2022-06-03T01:37:30Z</updated>
    <id>tag:github.com,2022-06-03:/2398872109/cloudbaserun_app</id>
    <link href="https://github.com/2398872109/cloudbaserun_app" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;云托管 弹性服务实例 应用汇总&lt;/h1&gt; &#xA;&lt;h2&gt;sockd：socks5 proxy&lt;/h2&gt; &#xA;&lt;p&gt;这个是一个socks5的代理端，通过在云托管的弹性服务实例上启动，可以获得一个socks5的代理服务端，可以适配海外游戏代理、电商店铺管理代理。具体使用说明可见文件夹内 readme 说明。&lt;/p&gt; &#xA;&lt;h2&gt;ssr：shadowsocks-r proxy&lt;/h2&gt; &#xA;&lt;p&gt;这个是一个ssr的代理端，通过在云托管的弹性服务实例上启动，可以获得一个ssr的代理服务端，可以适配海外游戏代理、电商店铺管理代理。具体使用说明可见文件夹内 readme 说明。&lt;/p&gt; &#xA;&lt;h2&gt;sockd_ssr：socks5 + shadowsocks-r proxy&lt;/h2&gt; &#xA;&lt;p&gt;这个是一个socks5+ssr的多合一代理端，通过在云托管的弹性服务实例上启动，可以获得一个多合一的代理服务端，可以适配海外游戏代理、电商店铺管理代理。具体使用说明可见文件夹内 readme 说明。&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>nnn-training/yarn-training</title>
    <updated>2022-06-03T01:37:30Z</updated>
    <id>tag:github.com,2022-06-03:/nnn-training/yarn-training</id>
    <link href="https://github.com/nnn-training/yarn-training" rel="alternate"></link>
    <summary type="html">&lt;p&gt;入門コースの3章5節 yarnの練習&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>microsoft/mssql-docker</title>
    <updated>2022-06-03T01:37:30Z</updated>
    <id>tag:github.com,2022-06-03:/microsoft/mssql-docker</id>
    <link href="https://github.com/microsoft/mssql-docker" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Official Microsoft repository for SQL Server in Docker resources&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;SQL Server in Docker&lt;/h1&gt; &#xA;&lt;p&gt;This GitHub repository aims to provide a centralized location for community engagement. In here you will find documentation, Dockerfiles and additional developer resources.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;SQL Server in Docker&lt;/strong&gt; comes in two different flavors:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Microsoft/mssql-docker/tree/master/linux&#34;&gt;Linux-based containers&lt;/a&gt;: This Docker image uses &lt;a href=&#34;https://docs.microsoft.com/en-us/sql/linux/&#34;&gt;SQL Server 2017 Developer Edition on Linux&lt;/a&gt; on top of an Ubuntu 16.04 base image. This is meant to be run on &lt;a href=&#34;https://www.docker.com/products/overview&#34;&gt;Docker Engine&lt;/a&gt; on its multiple platforms. There are also Dockerfiles here for building &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/mssql-docker/master/linux/preview/RHEL/Dockerfile&#34;&gt;RHEL&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/mssql-docker/master/linux/preview/CentOS/Dockerfile&#34;&gt;CentOS&lt;/a&gt; based images.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Microsoft/mssql-docker/tree/master/windows&#34;&gt;Windows-based containers&lt;/a&gt;: These Docker images use SQL Server 2017 Express Edition and SQL Server 2017 Developer Edition. Both images are based on Windows Container technology and can only be run using &lt;a href=&#34;https://msdn.microsoft.com/en-us/virtualization/windowscontainers/docker/configure_docker_daemon&#34;&gt;Docker Engine for Windows Containers&lt;/a&gt;. You can currently sign-up for SQL Server 2019 on Windows Containers available in our &lt;a href=&#34;https://cloudblogs.microsoft.com/sqlserver/2019/07/01/sql-server-2019-on-windows-containers-now-in-early-adopters-program/&#34;&gt;Early Adopter Preview&lt;/a&gt; program.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Before choosing to run a SQL Server container for production use cases, please review our &lt;a href=&#34;https://support.microsoft.com/en-us/help/4047326/support-policy-for-microsoft-sql-server&#34;&gt;support policy&lt;/a&gt; for SQL Server Containers to ensure that you are running on a supported configuration.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;SQL Server Command Line Tools(sqlcmd,bcp)&lt;/strong&gt; are also available as a Docker Image. You can now deliver SQL Server management payload using this as a base image for your CI/CD scenarios. Check out the &lt;a href=&#34;https://hub.docker.com/r/microsoft/mssql-tools/&#34;&gt;mssql-tools Docker Image&lt;/a&gt; to get started.&lt;/p&gt; &#xA;&lt;p&gt;Visit the &lt;a href=&#34;https://hub.docker.com/u/microsoft&#34;&gt;Microsoft Docker Hub page&lt;/a&gt; for more information and additional images.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/sql/linux/quickstart-install-connect-docker&#34;&gt;Getting started guide for the SQL Server on Linux container&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/sql/linux/sql-server-linux-configure-docker&#34;&gt;Best practices guide&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Take our survey&lt;/h2&gt; &#xA;&lt;p&gt;Let us know more about how you would like to use SQL containers by taking our &lt;a href=&#34;https://www.surveymonkey.com/r/XXSY536&#34;&gt;survey&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Issues&lt;/h2&gt; &#xA;&lt;p&gt;For any issues with the repo, please file under this GitHub project on the &lt;a href=&#34;https://github.com/Microsoft/mssql-docker/issues&#34;&gt;Issues section&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you require support with a production related issue, then please raise a support incident with Microsoft &lt;a href=&#34;https://support.microsoft.com/en-us/hub/4343728/support-for-business&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;There is also a &lt;a href=&#34;https://gitter.im/Microsoft/mssql-devops?utm_source=share-link&amp;amp;utm_medium=link&amp;amp;utm_campaign=share-link&#34;&gt;Gitter channel for SQL Server in DevOps&lt;/a&gt; that you can join and discuss interesting topics with other container, SQL Server, and DevOps enthusiasts.&lt;/p&gt; &#xA;&lt;h2&gt;Troubleshooting &amp;amp; Frequently Asked Questions&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&#34;Unknown blob&#34; error code: You are probably trying to run the Windows Containers-based Docker image on a Linux-based Docker Engine. If you want to continue running the Windows Container-based image, we recommend reading the following community article: &lt;a href=&#34;https://stefanscherer.github.io/run-linux-and-windows-containers-on-windows-10/&#34;&gt;Run Linux and Windows Containers on Windows 10&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;When using the Windows Docker CLI you must use double quotes instead of single ticks for the environment variables, else the mssql-server-linux image won&#39;t find the &lt;code&gt;ACCEPT_EULA&lt;/code&gt; or &lt;code&gt;SA_PASSWORD&lt;/code&gt; variables which are required to start the container.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The &#39;sa&#39; password has a minimum complexity requirement (8 characters, uppercase, lowercase, alphanumerical and/or non-alphanumerical)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Licensing for SQL Server in Docker: Regardless of where you run it - VM, Docker, physical, cloud, on prem - the licensing model is the same and it depends on which edition of SQL Server you are using. The Express and Developer Editions are free. Standard and Enterprise have a cost. More information here: &lt;a href=&#34;https://www.microsoft.com/en-us/sql-server/sql-server-2016-editions&#34;&gt;https://www.microsoft.com/en-us/sql-server/sql-server-2016-editions&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The Docker resource files for SQL Server are licensed under the MIT license. See the &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/mssql-docker/master/LICENSE&#34;&gt;LICENSE file&lt;/a&gt; for more details.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>microsoft/vscode-remote-try-go</title>
    <updated>2022-06-03T01:37:30Z</updated>
    <id>tag:github.com,2022-06-03:/microsoft/vscode-remote-try-go</id>
    <link href="https://github.com/microsoft/vscode-remote-try-go" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Go sample project for trying out the &#39;VS Code Remote - Containers&#39; extension&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Try Out Development Containers: Go&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://vscode.dev/redirect?url=vscode://ms-vscode-remote.remote-containers/cloneInVolume?url=https://github.com/microsoft/vscode-remote-try-go&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1?label=Remote%20-%20Containers&amp;amp;message=Open&amp;amp;color=blue&amp;amp;logo=visualstudiocode&#34; alt=&#34;Open in Remote - Containers&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A &lt;strong&gt;development container&lt;/strong&gt; is a running &lt;a href=&#34;https://www.docker.com&#34;&gt;Docker&lt;/a&gt; container with a well-defined tool/runtime stack and its prerequisites. You can try out development containers with &lt;strong&gt;&lt;a href=&#34;https://github.com/features/codespaces&#34;&gt;GitHub Codespaces&lt;/a&gt;&lt;/strong&gt; or &lt;strong&gt;&lt;a href=&#34;https://aka.ms/vscode-remote/containers&#34;&gt;Visual Studio Code Remote - Containers&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This is a sample project that lets you try out either option in a few easy steps. We have a variety of other &lt;a href=&#34;https://github.com/search?q=org%3Amicrosoft+vscode-remote-try-&amp;amp;type=Repositories&#34;&gt;vscode-remote-try-*&lt;/a&gt; sample projects, too.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If you already have a Codespace or dev container, you can jump to the &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/vscode-remote-try-go/main/#things-to-try&#34;&gt;Things to try&lt;/a&gt; section.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Setting up the development container&lt;/h2&gt; &#xA;&lt;h3&gt;GitHub Codespaces&lt;/h3&gt; &#xA;&lt;p&gt;Follow these steps to open this sample in a Codespace:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Click the Code drop-down menu and select the &lt;strong&gt;Open with Codespaces&lt;/strong&gt; option.&lt;/li&gt; &#xA; &lt;li&gt;Select &lt;strong&gt;+ New codespace&lt;/strong&gt; at the bottom on the pane.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;For more info, check out the &lt;a href=&#34;https://docs.github.com/en/free-pro-team@latest/github/developing-online-with-codespaces/creating-a-codespace#creating-a-codespace&#34;&gt;GitHub documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;VS Code Remote - Containers&lt;/h3&gt; &#xA;&lt;p&gt;If you already have VS Code and Docker installed, you can click the badge above or &lt;a href=&#34;https://vscode.dev/redirect?url=vscode://ms-vscode-remote.remote-containers/cloneInVolume?url=https://github.com/microsoft/vscode-remote-try-go&#34;&gt;here&lt;/a&gt; to get started. Clicking these links will cause VS Code to automatically install the Remote - Containers extension if needed, clone the source code into a container volume, and spin up a dev container for use.&lt;/p&gt; &#xA;&lt;p&gt;Follow these steps to open this sample in a container using the VS Code Remote - Containers extension:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;If this is your first time using a development container, please ensure your system meets the pre-reqs (i.e. have Docker installed) in the &lt;a href=&#34;https://aka.ms/vscode-remote/containers/getting-started&#34;&gt;getting started steps&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To use this repository, you can either open the repository in an isolated Docker volume:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Press &lt;kbd&gt;F1&lt;/kbd&gt; and select the &lt;strong&gt;Remote-Containers: Try a Sample...&lt;/strong&gt; command.&lt;/li&gt; &#xA;   &lt;li&gt;Choose the &#34;Go&#34; sample, wait for the container to start, and try things out! &#xA;    &lt;blockquote&gt; &#xA;     &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Under the hood, this will use the &lt;strong&gt;Remote-Containers: Clone Repository in Container Volume...&lt;/strong&gt; command to clone the source code in a Docker volume instead of the local filesystem. &lt;a href=&#34;https://docs.docker.com/storage/volumes/&#34;&gt;Volumes&lt;/a&gt; are the preferred mechanism for persisting container data.&lt;/p&gt; &#xA;    &lt;/blockquote&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;p&gt;Or open a locally cloned copy of the code:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Clone this repository to your local filesystem.&lt;/li&gt; &#xA;   &lt;li&gt;Press &lt;kbd&gt;F1&lt;/kbd&gt; and select the &lt;strong&gt;Remote-Containers: Open Folder in Container...&lt;/strong&gt; command.&lt;/li&gt; &#xA;   &lt;li&gt;Select the cloned copy of this folder, wait for the container to start, and try things out!&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Things to try&lt;/h2&gt; &#xA;&lt;p&gt;Once you have this sample opened, you&#39;ll be able to work with it like you would locally.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This container runs as a non-root user with sudo access by default. Comment out &lt;code&gt;&#34;remoteUser&#34;: &#34;vscode&#34;&lt;/code&gt; in &lt;code&gt;.devcontainer/devcontainer.json&lt;/code&gt; if you&#39;d prefer to run as root.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Some things to try:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Edit:&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Open &lt;code&gt;server.go&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Try adding some code and check out the language features.&lt;/li&gt; &#xA;   &lt;li&gt;Notice the Go extension is already installed in the container since the &lt;code&gt;.devcontainer/devcontainer.json&lt;/code&gt; lists &lt;code&gt;&#34;golang.Go&#34;&lt;/code&gt; as an extension to install automatically when the container is created.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Terminal:&lt;/strong&gt; Press &lt;kbd&gt;ctrl&lt;/kbd&gt;+&lt;kbd&gt;shift&lt;/kbd&gt;+&lt;kbd&gt;`&lt;/kbd&gt; and type &lt;code&gt;uname&lt;/code&gt; and other Linux commands from the terminal window.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Build, Run, and Debug:&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Open &lt;code&gt;server.go&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Add a breakpoint (e.g. on line 22).&lt;/li&gt; &#xA;   &lt;li&gt;Press &lt;kbd&gt;F5&lt;/kbd&gt; to launch the app in the container.&lt;/li&gt; &#xA;   &lt;li&gt;Once the breakpoint is hit, try hovering over variables, examining locals, and more.&lt;/li&gt; &#xA;   &lt;li&gt;Continue (&lt;kbd&gt;F5&lt;/kbd&gt;). You can connect to the server in the container by either: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Clicking on &lt;code&gt;Open in Browser&lt;/code&gt; in the notification telling you: &lt;code&gt;Your service running on port 9000 is available&lt;/code&gt;.&lt;/li&gt; &#xA;     &lt;li&gt;Clicking the globe icon in the &#39;Ports&#39; view. The &#39;Ports&#39; view gives you an organized table of your forwarded ports, and you can get there by clicking on the &#34;1&#34; in the status bar, which means your app has 1 forwarded port.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Notice port 9000 in the &#39;Ports&#39; view is labeled &#34;Hello Remote World.&#34; In &lt;code&gt;devcontainer.json&lt;/code&gt;, you can set &lt;code&gt;&#34;portsAttributes&#34;&lt;/code&gt;, such as a label for your forwarded ports and the action to be taken when the port is autoforwarded.&lt;/li&gt; &#xA;  &lt;/ul&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; In Remote - Containers, you can access your app at &lt;code&gt;http://localhost:9000&lt;/code&gt; in a local browser. But in a browser-based Codespace, you must click the link from the notification or the &lt;code&gt;Ports&lt;/code&gt; view so that the service handles port forwarding in the browser and generates the correct URL.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Rebuild or update your container:&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;You may want to make changes to your container, such as installing a different version of a software or forwarding a new port. You&#39;ll rebuild your container for your changes to take effect.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Open browser automatically:&lt;/strong&gt; As an example change, let&#39;s update the &lt;code&gt;portsAttributes&lt;/code&gt; in the &lt;code&gt;.devcontainer/devcontainer.json&lt;/code&gt; file to open a browser when our port is automatically forwarded.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Open the &lt;code&gt;.devcontainer/devcontainer.json&lt;/code&gt; file.&lt;/li&gt; &#xA;   &lt;li&gt;Modify the &lt;code&gt;&#34;onAutoForward&#34;&lt;/code&gt; attribute in your &lt;code&gt;portsAttributes&lt;/code&gt; from &lt;code&gt;&#34;notify&#34;&lt;/code&gt; to &lt;code&gt;&#34;openBrowser&#34;&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Press &lt;kbd&gt;F1&lt;/kbd&gt; and select the &lt;strong&gt;Remote-Containers: Rebuild Container&lt;/strong&gt; or &lt;strong&gt;Codespaces: Rebuild Container&lt;/strong&gt; command so the modifications are picked up.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Refactoring - rename:&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Open &lt;code&gt;hello.go&lt;/code&gt;, select method name &lt;code&gt;Hello&lt;/code&gt; press &lt;kbd&gt;F1&lt;/kbd&gt; and run the &lt;strong&gt;Rename Symbol&lt;/strong&gt; command.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Refactoring - extract:&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Open &lt;code&gt;hello.go&lt;/code&gt; and select string, press &lt;kbd&gt;F1&lt;/kbd&gt; and run the &lt;strong&gt;Go: Extract to variable&lt;/strong&gt; command.&lt;/li&gt; &#xA;   &lt;li&gt;Open &lt;code&gt;hello.go&lt;/code&gt; and select line with return statement, press &lt;kbd&gt;F1&lt;/kbd&gt; and run the &lt;strong&gt;Go: Extract to function&lt;/strong&gt; command.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Generate tests:&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Open &lt;code&gt;hello.go&lt;/code&gt; and press &lt;kbd&gt;F1&lt;/kbd&gt; and run the &lt;strong&gt;Go: Generate Unit Tests For File&lt;/strong&gt; command.&lt;/li&gt; &#xA;   &lt;li&gt;Implement a test case: Open file &lt;code&gt;hello_test.go&lt;/code&gt; and edit the line with the &lt;code&gt;TODO&lt;/code&gt; comment: &lt;code&gt;{&#34;hello without name&#34;, &#34;Hello, &#34;},&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;You can toggle between implementation file and test file with press &lt;kbd&gt;F1&lt;/kbd&gt; and run the &lt;strong&gt;Go: Toggle Test File&lt;/strong&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Tests can also run as benchmarks: Open file &lt;code&gt;hello_test.go&lt;/code&gt;, press &lt;kbd&gt;F1&lt;/kbd&gt; and run the &lt;strong&gt;Go: Benchmark File&lt;/strong&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Stub generation:&lt;/strong&gt; ( &lt;a href=&#34;https://github.com/josharian/impl&#34;&gt;details&lt;/a&gt;)&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;define a struct &lt;code&gt;type mock struct {}&lt;/code&gt;, enter a new line , press &lt;kbd&gt;F1&lt;/kbd&gt; and run the &lt;strong&gt;Go: Generate interface stubs&lt;/strong&gt; command.&lt;/li&gt; &#xA;   &lt;li&gt;edit command &lt;code&gt;m *mock http.ResponseWriter&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Fill structs:&lt;/strong&gt; (&lt;a href=&#34;https://github.com/davidrjenni/reftools/tree/master/cmd/fillstruct&#34;&gt;details&lt;/a&gt;)&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Open &lt;code&gt;hello.go&lt;/code&gt; and select &lt;code&gt;User{}&lt;/code&gt; of variable asignment, press &lt;kbd&gt;F1&lt;/kbd&gt; and run the &lt;strong&gt;Go: Fill struct&lt;/strong&gt; command.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Add json tags to structs:&lt;/strong&gt; (&lt;a href=&#34;https://github.com/fatih/gomodifytags&#34;&gt;details&lt;/a&gt;)&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Open &lt;code&gt;hello.go&lt;/code&gt; and go with cursor in to a struct, press &lt;kbd&gt;F1&lt;/kbd&gt; and run the &lt;strong&gt;Go: Add Tags To Struct Fields&lt;/strong&gt; command.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;This project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit &lt;a href=&#34;https://cla.microsoft.com&#34;&gt;https://cla.microsoft.com&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;When you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.&lt;/p&gt; &#xA;&lt;p&gt;This project has adopted the &lt;a href=&#34;https://opensource.microsoft.com/codeofconduct/&#34;&gt;Microsoft Open Source Code of Conduct&lt;/a&gt;. For more information see the &lt;a href=&#34;https://opensource.microsoft.com/codeofconduct/faq/&#34;&gt;Code of Conduct FAQ&lt;/a&gt; or contact &lt;a href=&#34;mailto:opencode@microsoft.com&#34;&gt;opencode@microsoft.com&lt;/a&gt; with any additional questions or comments.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Copyright © Microsoft Corporation All rights reserved.&lt;br&gt; Licensed under the MIT License. See LICENSE in the project root for license information.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>LandmakTechnology/Dockerfiles</title>
    <updated>2022-06-03T01:37:30Z</updated>
    <id>tag:github.com,2022-06-03:/LandmakTechnology/Dockerfiles</id>
    <link href="https://github.com/LandmakTechnology/Dockerfiles" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Dockerfiles&lt;/h1&gt; &#xA;&lt;p&gt;docker build -f DockerfileName -t imageName&lt;/p&gt;</summary>
  </entry>
</feed>