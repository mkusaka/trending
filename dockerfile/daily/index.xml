<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dockerfile Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-11-15T01:32:07Z</updated>
  <subtitle>Daily Trending of Dockerfile in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>koel/docker</title>
    <updated>2022-11-15T01:32:07Z</updated>
    <id>tag:github.com,2022-11-15:/koel/docker</id>
    <link href="https://github.com/koel/docker" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A minimal docker image for the koel music streaming server.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;koel/docker&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://hub.docker.com/r/phanan/koel&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/pulls/phanan/koel&#34; alt=&#34;docker-pulls-badge&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://github.com/koel/docker/workflows/Continuous%20testing%20and%20deployment/badge.svg?sanitize=true&#34; alt=&#34;Continuous testing and deployment&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;A docker image with only the bare essentials needed to run &lt;a href=&#34;https://koel.dev/&#34;&gt;koel&lt;/a&gt;. It includes apache and a php runtime with required extensions.&lt;/p&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/koel/docker/master/CHANGELOG.md&#34;&gt;Changelog&lt;/a&gt; to keep track of changes to the image.&lt;/p&gt; &#xA;&lt;h2&gt;âš  Image changed to &lt;code&gt;phanan/koel&lt;/code&gt; on 2022-04-15&lt;/h2&gt; &#xA;&lt;p&gt;This repository no longer updates &lt;code&gt;hyzual/koel&lt;/code&gt;. The latest version is now at &lt;a href=&#34;https://hub.docker.com/r/phanan/koel&#34;&gt;phanan/koel:latest&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt; This container does not include a database. It &lt;strong&gt;requires&lt;/strong&gt; another container to handle the database.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Since &lt;a href=&#34;https://docs.koel.dev/#/?id=requirements&#34;&gt;Koel supports many databases&lt;/a&gt; you are free to choose any Docker image that hosts one of those databases.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;koel/docker&lt;/code&gt; (this image) has been tested with MySQL and PostgreSQL.&lt;/p&gt; &#xA;&lt;h3&gt;Run with docker-compose and MySQL&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://docs.docker.com/compose/&#34;&gt;docker-compose&lt;/a&gt; is the easiest way to get started. It will start both the database container and this image. Clone this repository and edit &lt;code&gt;docker-compose.mysql.yml&lt;/code&gt;. &lt;strong&gt;Make sure to replace passwords !&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Check out the &lt;a href=&#34;https://raw.githubusercontent.com/koel/docker/master/docker-compose.mysql.yml&#34;&gt;&lt;code&gt;./docker-compose.mysql.yml&lt;/code&gt;&lt;/a&gt; file for more details.&lt;/p&gt; &#xA;&lt;p&gt;Then run &lt;code&gt;docker-compose&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker-compose -f ./docker-compose.mysql.yml up -d&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Run with docker-compose and PostgreSQL&lt;/h3&gt; &#xA;&lt;p&gt;Clone this repository and edit &lt;code&gt;docker-compose.postgres.yml&lt;/code&gt;. &lt;strong&gt;Make sure to replace passwords !&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Check out the &lt;a href=&#34;https://raw.githubusercontent.com/koel/docker/master/docker-compose.postgres.yml&#34;&gt;&lt;code&gt;./docker-compose.postgres.yml&lt;/code&gt;&lt;/a&gt; file for more details.&lt;/p&gt; &#xA;&lt;p&gt;Then run &lt;code&gt;docker-compose&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker-compose -f ./docker-compose.postgres.yml up -d&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;First run&lt;/h3&gt; &#xA;&lt;p&gt;On the first run, you will need to:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Generate &lt;code&gt;APP_KEY&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Create an admin user&lt;/li&gt; &#xA; &lt;li&gt;Initialize the database&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;All these steps are achieved by running &lt;code&gt;koel:init&lt;/code&gt; once:&lt;/p&gt; &#xA;&lt;p&gt;Replace &lt;code&gt;&amp;lt;container_name_for_koel&amp;gt;&lt;/code&gt; in the command by the actual container name.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker exec --user www-data -it &amp;lt;container_name_for_koel&amp;gt; bash&#xA;# Once inside the container, you can run commands:&#xA;$ php artisan koel:init --no-assets&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;--no-assets&lt;/code&gt; option tells the init command to skip building the front-end assets, as they have been generated by Koel&#39;s &#34;Release&#34; GitHub action.&lt;/p&gt; &#xA;&lt;h3&gt;Default admin account&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; From v5.1.0, Koel no longer asks for a username, email and password for the admin account. Instead, it creates one automatically with the following credentials: email: &lt;code&gt;admin@koel.dev&lt;/code&gt; password: &lt;code&gt;KoelIsCool&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;strong&gt;Make sure to change this unsecure password&lt;/strong&gt; with the user interface (click on your profile picture) or by running the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker exec -it &amp;lt;container_name_for_koel&amp;gt; php artisan koel:admin:change-password&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Run manually with MySQL&lt;/h3&gt; &#xA;&lt;p&gt;Create a docker network. It will be shared by Koel and its database.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker network create --attachable koel-net&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Create a database container. Here we will use &lt;a href=&#34;https://hub.docker.com/r/mysql/mysql-server&#34;&gt;mysql&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run -d --name database \&#xA;    -e MYSQL_ROOT_PASSWORD=&amp;lt;root_password&amp;gt; \&#xA;    -e MYSQL_DATABASE=koel \&#xA;    -e MYSQL_USER=koel \&#xA;    -e MYSQL_PASSWORD=&amp;lt;koel_password&amp;gt; \&#xA;    --network=koel-net \&#xA;    -v koel_db:/var/lib/mysql \&#xA;    mysql/mysql-server:5.7&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Create the koel container on the same network so they can communicate&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run -d --name koel \&#xA;    -p 80:80 \&#xA;    -e DB_CONNECTION=mysql \&#xA;    -e DB_HOST=database \&#xA;    -e DB_DATABASE=koel \&#xA;    -e DB_USERNAME=koel \&#xA;    -e DB_PASSWORD=&amp;lt;koel_password&amp;gt; \&#xA;    --network=koel-net \&#xA;    -v music:/music \&#xA;    -v covers:/var/www/html/public/img/covers \&#xA;    -v search_index:/var/www/html/storage/search-indexes \&#xA;    phanan/koel&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The same applies for the first run. See the &lt;a href=&#34;https://raw.githubusercontent.com/koel/docker/master/#first-run&#34;&gt;First run section&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;How to bind-mount the &lt;code&gt;.env&lt;/code&gt; file&lt;/h3&gt; &#xA;&lt;p&gt;To be sure to preserve &lt;code&gt;APP_KEY&lt;/code&gt; you can choose to bind-mount the &lt;code&gt;.env&lt;/code&gt; file to your host:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# On your host, create an `.env` file:&#xA;touch .env&#xA;# Then, you can bind-mount it directly in the container.&#xA;docker run -d --name koel \&#xA;    -p 80:80 \&#xA;    --mount type=bind,source=&#34;$(pwd)&#34;/.env,target=/var/www/html/.env \&#xA;    phanan/koel&#xA;docker exec --user www-data -it koel bash&#xA;# In the container, init&#xA;$ php artisan koel:init --no-assets&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Pass environment variables&lt;/h3&gt; &#xA;&lt;p&gt;Once you have generated an &lt;code&gt;APP_KEY&lt;/code&gt; you can provide it as environment variables to your container to preserve it.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Run a container just to generate the key&#xA;docker run -it --rm phanan/koel bash&#xA;# In the container, generate APP_KEY&#xA;$ php artisan key:generate --force&#xA;# Show the modified .env file&#xA;$ cat .env&#xA;# Copy the APP_KEY variable&#xA;$ exit&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can then provide the variables to your real container:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run -d --name koel \&#xA;    -p 80:80 \&#xA;    -e APP_KEY=&amp;lt;your_app_key&amp;gt; \&#xA;    phanan/koel&#xA;# Even better, write an env-file in your host and pass it to the container&#xA;docker run -d --name koel \&#xA;    -p 80:80 \&#xA;    --env-file .koel.env \&#xA;    phanan/koel&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Scan media folders&lt;/h3&gt; &#xA;&lt;p&gt;Whenever the music in &lt;code&gt;/music&lt;/code&gt; changes, you will need to manually scan it before koel is able to play it. Run the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker exec --user www-data &amp;lt;container_name_for_koel&amp;gt; php artisan koel:sync&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Populate the search indexes&lt;/h3&gt; &#xA;&lt;p&gt;If you were running a version of Koel prior to v5.0.2, the search mechanism has changed and needs a step to index songs, albums and artists. Run the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker exec --user www-data &amp;lt;container_name_for_koel&amp;gt; php artisan koel:search:import&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For all new songs, the search index will be automatically populated by &lt;code&gt;php artisan koel:sync&lt;/code&gt;. No need to run the &lt;code&gt;php artisan koel:search:import&lt;/code&gt; again ðŸ™‚.&lt;/p&gt; &#xA;&lt;h2&gt;Useful environment variables&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/koel/koel/raw/v5.1.3/.env.example&#34;&gt;&lt;code&gt;.env.example&lt;/code&gt;&lt;/a&gt; for reference.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;DB_CONNECTION&lt;/code&gt;: &lt;code&gt;mysql&lt;/code&gt; OR &lt;code&gt;pgsql&lt;/code&gt; OR &lt;code&gt;sqlsrv&lt;/code&gt; OR &lt;code&gt;sqlite-persistent&lt;/code&gt;. Corresponds to the type of database being used with Koel.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;DB_HOST&lt;/code&gt;: &lt;code&gt;database&lt;/code&gt;. The name of the Docker container hosting the database. Koel needs to be on the same Docker network to find the database by its name.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;DB_USERNAME&lt;/code&gt;: &lt;code&gt;koel&lt;/code&gt;. If you change it, also change it in the database container.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;DB_PASSWORD&lt;/code&gt;: The password credential matching &lt;code&gt;DB_USERNAME&lt;/code&gt;. If you change it, also change it in the database container.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;DB_DATABASE&lt;/code&gt;: &lt;code&gt;koel&lt;/code&gt;. The database name for Koel. If you change it, also change it in the database container.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;APP_KEY&lt;/code&gt;: A base64-encoded string, generated by &lt;code&gt;php artisan koel:init&lt;/code&gt; or by &lt;code&gt;php artisan key:generate&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;FORCE_HTTPS&lt;/code&gt;: If set to &lt;code&gt;true&lt;/code&gt;, all URLs redirects done by koel will use &lt;code&gt;https&lt;/code&gt;. If you have set up a reverse-proxy in front of this container that supports &lt;code&gt;https&lt;/code&gt;, set it to &lt;code&gt;true&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;MEMORY_LIMIT&lt;/code&gt;: The amount of memory in MB for the scanning process. Increase this value if &lt;code&gt;php artisan koel:sync&lt;/code&gt; runs out of memory.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;LASTFM_API_KEY&lt;/code&gt; and &lt;code&gt;LASTFM_API_SECRET&lt;/code&gt;: Enables Last.fm integration. See &lt;a href=&#34;https://docs.koel.dev/3rd-party.html#last-fm&#34;&gt;https://docs.koel.dev/3rd-party.html#last-fm&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;SPOTIFY_CLIENT_ID&lt;/code&gt; and &lt;code&gt;SPOTIFY_CLIENT_SECRET&lt;/code&gt;: Enables Spotify integration. See &lt;a href=&#34;https://docs.koel.dev/3rd-party.html#spotify&#34;&gt;https://docs.koel.dev/3rd-party.html#spotify&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;SCOUT_DRIVER&lt;/code&gt;, &lt;code&gt;ALGOLIA_APP_ID&lt;/code&gt;, &lt;code&gt;ALGOLIA_API_KEY&lt;/code&gt;, &lt;code&gt;ALGOLIA_INDEX_NAME&lt;/code&gt;, &lt;code&gt;MEILISEARCH_HOST&lt;/code&gt;, &lt;code&gt;MEILISEARCH_KEY&lt;/code&gt;: Configuration for Koel&#39;s &lt;a href=&#34;https://docs.koel.dev/#instant-search&#34;&gt;instant search&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Volumes&lt;/h2&gt; &#xA;&lt;h3&gt;/music&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;/music&lt;/code&gt; will contain the music library. Keep in mind that koel needs to scan music before it&#39;s able to play it.&lt;/p&gt; &#xA;&lt;h3&gt;/var/www/html/storage/search-indexes&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;/var/www/html/storage/search-indexes&lt;/code&gt; will contain the search indexes. Searching songs, albums and artists leverages this to provide results.&lt;/p&gt; &#xA;&lt;h2&gt;Ports&lt;/h2&gt; &#xA;&lt;h3&gt;80&lt;/h3&gt; &#xA;&lt;p&gt;Only HTTP is provided. Consider setting up a reverse-proxy to provide HTTPS support.&lt;/p&gt; &#xA;&lt;h2&gt;Workdir&lt;/h2&gt; &#xA;&lt;h3&gt;/var/www/html&lt;/h3&gt; &#xA;&lt;p&gt;Apache&#39;s root directory. All koel files will be here. If you &lt;code&gt;exec&lt;/code&gt; into the container, this will be your current directory.&lt;/p&gt;</summary>
  </entry>
</feed>