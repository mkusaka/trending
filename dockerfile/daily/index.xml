<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dockerfile Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-13T01:39:11Z</updated>
  <subtitle>Daily Trending of Dockerfile in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>docker-library/rabbitmq</title>
    <updated>2022-08-13T01:39:11Z</updated>
    <id>tag:github.com,2022-08-13:/docker-library/rabbitmq</id>
    <link href="https://github.com/docker-library/rabbitmq" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Docker Official Image packaging for RabbitMQ&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;a href=&#34;https://github.com/docker-library/rabbitmq&#34;&gt;https://github.com/docker-library/rabbitmq&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;h2&gt;Maintained by: &lt;a href=&#34;https://github.com/docker-library/rabbitmq&#34;&gt;the Docker Community&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;This is the Git repo of the &lt;a href=&#34;https://github.com/docker-library/official-images#what-are-official-images&#34;&gt;Docker &#34;Official Image&#34;&lt;/a&gt; for &lt;a href=&#34;https://hub.docker.com/_/rabbitmq/&#34;&gt;&lt;code&gt;rabbitmq&lt;/code&gt;&lt;/a&gt; (not to be confused with any official &lt;code&gt;rabbitmq&lt;/code&gt; image provided by &lt;code&gt;rabbitmq&lt;/code&gt; upstream). See &lt;a href=&#34;https://hub.docker.com/_/rabbitmq/&#34;&gt;the Docker Hub page&lt;/a&gt; for the full readme on how to use this Docker image and for information regarding contributing and issues.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://hub.docker.com/_/rabbitmq/&#34;&gt;full image description on Docker Hub&lt;/a&gt; is generated/maintained over in &lt;a href=&#34;https://github.com/docker-library/docs&#34;&gt;the docker-library/docs repository&lt;/a&gt;, specifically in &lt;a href=&#34;https://github.com/docker-library/docs/tree/master/rabbitmq&#34;&gt;the &lt;code&gt;rabbitmq&lt;/code&gt; directory&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;See a change merged here that doesn&#39;t show up on Docker Hub yet?&lt;/h2&gt; &#xA;&lt;p&gt;For more information about the full official images change lifecycle, see &lt;a href=&#34;https://github.com/docker-library/faq#an-images-source-changed-in-git-now-what&#34;&gt;the &#34;An image&#39;s source changed in Git, now what?&#34; FAQ entry&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For outstanding &lt;code&gt;rabbitmq&lt;/code&gt; image PRs, check &lt;a href=&#34;https://github.com/docker-library/official-images/labels/library%2Frabbitmq&#34;&gt;PRs with the &#34;library/rabbitmq&#34; label on the official-images repository&lt;/a&gt;. For the current &#34;source of truth&#34; for &lt;a href=&#34;https://hub.docker.com/_/rabbitmq/&#34;&gt;&lt;code&gt;rabbitmq&lt;/code&gt;&lt;/a&gt;, see &lt;a href=&#34;https://github.com/docker-library/official-images/raw/master/library/rabbitmq&#34;&gt;the &lt;code&gt;library/rabbitmq&lt;/code&gt; file in the official-images repository&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/docker-library/rabbitmq/actions?query=workflow%3A%22GitHub+CI%22+branch%3Amaster&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/workflow/status/docker-library/rabbitmq/GitHub%20CI/master?label=GitHub%20CI&#34; alt=&#34;build status badge&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://doi-janky.infosiftr.net/job/update.sh/job/rabbitmq/&#34;&gt;&lt;img src=&#34;https://img.shields.io/jenkins/s/https/doi-janky.infosiftr.net/job/update.sh/job/rabbitmq.svg?label=Automated%20update.sh&#34; alt=&#34;build status badge&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Build&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Status&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Badges&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;(per-arch)&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://doi-janky.infosiftr.net/job/multiarch/job/amd64/job/rabbitmq/&#34;&gt;&lt;img src=&#34;https://img.shields.io/jenkins/s/https/doi-janky.infosiftr.net/job/multiarch/job/amd64/job/rabbitmq.svg?label=amd64&#34; alt=&#34;amd64 build status badge&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://doi-janky.infosiftr.net/job/multiarch/job/arm32v6/job/rabbitmq/&#34;&gt;&lt;img src=&#34;https://img.shields.io/jenkins/s/https/doi-janky.infosiftr.net/job/multiarch/job/arm32v6/job/rabbitmq.svg?label=arm32v6&#34; alt=&#34;arm32v6 build status badge&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://doi-janky.infosiftr.net/job/multiarch/job/arm32v7/job/rabbitmq/&#34;&gt;&lt;img src=&#34;https://img.shields.io/jenkins/s/https/doi-janky.infosiftr.net/job/multiarch/job/arm32v7/job/rabbitmq.svg?label=arm32v7&#34; alt=&#34;arm32v7 build status badge&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://doi-janky.infosiftr.net/job/multiarch/job/arm64v8/job/rabbitmq/&#34;&gt;&lt;img src=&#34;https://img.shields.io/jenkins/s/https/doi-janky.infosiftr.net/job/multiarch/job/arm64v8/job/rabbitmq.svg?label=arm64v8&#34; alt=&#34;arm64v8 build status badge&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://doi-janky.infosiftr.net/job/multiarch/job/i386/job/rabbitmq/&#34;&gt;&lt;img src=&#34;https://img.shields.io/jenkins/s/https/doi-janky.infosiftr.net/job/multiarch/job/i386/job/rabbitmq.svg?label=i386&#34; alt=&#34;i386 build status badge&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://doi-janky.infosiftr.net/job/multiarch/job/ppc64le/job/rabbitmq/&#34;&gt;&lt;img src=&#34;https://img.shields.io/jenkins/s/https/doi-janky.infosiftr.net/job/multiarch/job/ppc64le/job/rabbitmq.svg?label=ppc64le&#34; alt=&#34;ppc64le build status badge&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://doi-janky.infosiftr.net/job/multiarch/job/s390x/job/rabbitmq/&#34;&gt;&lt;img src=&#34;https://img.shields.io/jenkins/s/https/doi-janky.infosiftr.net/job/multiarch/job/s390x/job/rabbitmq.svg?label=s390x&#34; alt=&#34;s390x build status badge&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://doi-janky.infosiftr.net/job/put-shared/job/light/job/rabbitmq/&#34;&gt;&lt;img src=&#34;https://img.shields.io/jenkins/s/https/doi-janky.infosiftr.net/job/put-shared/job/light/job/rabbitmq.svg?label=put-shared&#34; alt=&#34;put-shared build status badge&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;!-- THIS FILE IS GENERATED BY https://github.com/docker-library/docs/blob/master/generate-repo-stub-readme.sh --&gt;</summary>
  </entry>
  <entry>
    <title>exasol/script-languages-release</title>
    <updated>2022-08-13T01:39:11Z</updated>
    <id>tag:github.com,2022-08-13:/exasol/script-languages-release</id>
    <link href="https://github.com/exasol/script-languages-release" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Release Repository for Script Language Container for user defined functions (UDF&#39;s) that can be used in the EXASOL database.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;EXASOL Script Languages&lt;/h1&gt; &#xA;&lt;h6&gt;Please note that this is an open source project which is officially supported by EXASOL. For any question, you can contact our support team.&lt;/h6&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/exasol/script-languages-release/master/script-languages-container-logo.png&#34; alt=&#34;drawing&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;This project contains script-language containers for the user-defined functions (UDF&#39;s) that can be used in the EXASOL database (version 7.0.0 or later). Using script-language containers, user can extend the UDF&#39;s with additional libraries and tools, such as Python or R packages and their dependencies.&lt;/p&gt; &#xA;&lt;p&gt;A script language container consists of a Linux container with a complete Linux distribution and all required libraries and a script client. The script client is responsible for the communication with the database and for executing the UDF code.&lt;/p&gt; &#xA;&lt;p&gt;We provide in this repository several &lt;a href=&#34;https://raw.githubusercontent.com/exasol/script-languages-release/master/flavors&#34;&gt;flavors&lt;/a&gt; of script-language containers, such as the current standard implementation of the &lt;a href=&#34;https://github.com/exasol/script-languages/raw/master/exaudfclient/base&#34;&gt;script client&lt;/a&gt; with support for Python 2/3, R und Java. A flavor contains the build description of a container. We will show below how to customize and build the different script-language containers.&lt;/p&gt; &#xA;&lt;p&gt;You can find pre-built containers in the &lt;a href=&#34;https://github.com/exasol/script-languages-release/releases&#34;&gt;release section&lt;/a&gt; of this repository. If you are interested in the script client you find more details &lt;a href=&#34;https://github.com/exasol/script-languages/raw/master/exaudfclient/base/README.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Build a script language container as docker images&lt;/li&gt; &#xA; &lt;li&gt;Export a script language container as an archive which can be used for extending Exasol UDFs&lt;/li&gt; &#xA; &lt;li&gt;Upload a script language container as an archive to the Exasol DB&#39;s BucketFS&lt;/li&gt; &#xA; &lt;li&gt;Generating the activation command for a script language container&lt;/li&gt; &#xA; &lt;li&gt;Can use Docker registries, such as Docker Hub, as a cache to avoid rebuilding image without changes&lt;/li&gt; &#xA; &lt;li&gt;Can push Docker images to Docker registries&lt;/li&gt; &#xA; &lt;li&gt;Run tests for you container against an Exasol DB (docker-db or external db)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;h3&gt;Information for Users&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/exasol/script-languages-release/master/doc/user_guide/user_guide.md&#34;&gt;User Guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/exasol/script-languages-release/master/doc/changes/changelog.md&#34;&gt;Changelog&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>Shopify/livesys</title>
    <updated>2022-08-13T01:39:11Z</updated>
    <id>tag:github.com,2022-08-13:/Shopify/livesys</id>
    <link href="https://github.com/Shopify/livesys" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A simple ubuntu system, intended to be run as an in-memory live image.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;livesys&lt;/h1&gt; &#xA;&lt;p&gt;This is a live system, intended to be run in-memory with a kernel and initramfs built using ubuntu&#39;s live-boot.&lt;/p&gt; &#xA;&lt;p&gt;It is intended for:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;collecting system inventory&lt;/li&gt; &#xA; &lt;li&gt;stress testing&lt;/li&gt; &#xA; &lt;li&gt;acting as a rescue image&lt;/li&gt; &#xA; &lt;li&gt;performing live system installs&lt;/li&gt; &#xA; &lt;li&gt;executing arbitrary scripts&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Development&lt;/h1&gt; &#xA;&lt;p&gt;To build the image, you must have docker.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./build.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once the image is built, you can snapshot it. This requires squashfs-tools&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./snapshot.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Applications&lt;/h1&gt; &#xA;&lt;h2&gt;Arbitrary script execution&lt;/h2&gt; &#xA;&lt;p&gt;Simply specify the path to a script to execute in the &lt;code&gt;onboot_script&lt;/code&gt; kernel parameter. This will be fetched and executed on boot.&lt;/p&gt; &#xA;&lt;p&gt;You may also pass &lt;code&gt;max_uptime&lt;/code&gt;, which accepts time in the same format as the &lt;code&gt;shutdown&lt;/code&gt; command. If a number is passed, it is assumed to be a minute unless otherwise specified.&lt;/p&gt; &#xA;&lt;h2&gt;Stress testing&lt;/h2&gt; &#xA;&lt;p&gt;There are numerous stress testing suites:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;stress - an overall benchmark suite for CPU and memory&lt;/li&gt; &#xA; &lt;li&gt;stressapptest - another benchmark suite for CPU and memory&lt;/li&gt; &#xA; &lt;li&gt;cpuburn - a suite for CPU burnin&lt;/li&gt; &#xA; &lt;li&gt;gimps (mprime) - a prime number factoring CPU burnin&lt;/li&gt; &#xA; &lt;li&gt;sysbench - a system benchmark suite designed to mimic MySQL workloads&lt;/li&gt; &#xA; &lt;li&gt;fio - an I/O testing suite&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Swiss-army&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Various helpful commands have been included:&lt;/li&gt; &#xA; &lt;li&gt;ipmitool&lt;/li&gt; &#xA; &lt;li&gt;megacli&lt;/li&gt; &#xA; &lt;li&gt;mdadm&lt;/li&gt; &#xA; &lt;li&gt;lvm&lt;/li&gt; &#xA; &lt;li&gt;ethtool&lt;/li&gt; &#xA; &lt;li&gt;smartmontools&lt;/li&gt; &#xA; &lt;li&gt;supermicro ipmicfg&lt;/li&gt; &#xA; &lt;li&gt;ruby&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you can think of a utility that would be useful, please send a pull request!&lt;/p&gt; &#xA;&lt;p&gt;A fully functional ubuntu apt package manager is also included, so you can install packages on-the-fly&lt;/p&gt; &#xA;&lt;h2&gt;System installation&lt;/h2&gt; &#xA;&lt;p&gt;This image may be used to install other live images, by preparing the necessary environment to copy an image onto. Typically, this means formatting disks.&lt;/p&gt; &#xA;&lt;h2&gt;Testing&lt;/h2&gt; &#xA;&lt;p&gt;Tested automatically using: &lt;a href=&#34;https://travis-ci.org/Shopify/livesys&#34;&gt;&lt;img src=&#34;https://travis-ci.org/Shopify/livesys.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>