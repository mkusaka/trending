<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dockerfile Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-03-07T01:17:44Z</updated>
  <subtitle>Daily Trending of Dockerfile in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>aws/sagemaker-distribution</title>
    <updated>2024-03-07T01:17:44Z</updated>
    <id>tag:github.com,2024-03-07:/aws/sagemaker-distribution</id>
    <link href="https://github.com/aws/sagemaker-distribution" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A set of Docker images that include popular frameworks for machine learning, data science and visualization.&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Amazon SageMaker Distribution&lt;/h2&gt; &#xA;&lt;p&gt;Amazon SageMaker Distribution is a set of Docker images that include popular frameworks for machine learning, data science and visualization.&lt;/p&gt; &#xA;&lt;p&gt;These images come in two variants, CPU and GPU, and include deep learning frameworks like PyTorch, TensorFlow and Keras; popular Python packages like numpy, scikit-learn and pandas; and IDEs like Jupyter Lab. The distribution contains the &lt;em&gt;latest&lt;/em&gt; versions of all these packages &lt;em&gt;such that&lt;/em&gt; they are &lt;em&gt;mutually compatible&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This project follows semver (more on that below) and comes with a helper tool to automate new releases of the distribution.&lt;/p&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;p&gt;If you just want to use the images, you do &lt;em&gt;not&lt;/em&gt; need to use this GitHub repository. Instead, you can pull pre-built and ready-to-use images from our &lt;a href=&#34;https://gallery.ecr.aws/sagemaker/sagemaker-distribution&#34;&gt;AWS ECR Gallery repository&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Dependency versions included in a particular Amazon SageMaker Distribution version&lt;/h3&gt; &#xA;&lt;p&gt;If you want to check what packages are installed in a given version of Amazon SageMaker Distribution, you can find that in the relevant &lt;em&gt;RELEASE.md&lt;/em&gt; file in the &lt;a href=&#34;https://raw.githubusercontent.com/aws/sagemaker-distribution/main/build_artifacts&#34;&gt;build_artifacts&lt;/a&gt; directory.&lt;/p&gt; &#xA;&lt;h3&gt;Versioning strategy&lt;/h3&gt; &#xA;&lt;p&gt;Amazon SageMaker Distribution supports semantic versioning as described on &lt;a href=&#34;https://semver.org/&#34;&gt;semver.org&lt;/a&gt;. A major version upgrade of Amazon SageMaker Distribution allows major version upgrades of all its dependencies, and similarly for minor and patch version upgrades. However, it is important to note that Amazon SageMaker Distributionâ€™s ability to follow semver guidelines is currently dependent on how its dependencies adhere to them.&lt;/p&gt; &#xA;&lt;p&gt;Some dependencies, such as Python, will be treated differently. Amazon SageMaker Distribution will allow a minor upgrade of Python (say, 3.10 to 3.11) only during a major upgrade (say, 4.8 to 5.0).&lt;/p&gt; &#xA;&lt;h3&gt;Image tags&lt;/h3&gt; &#xA;&lt;p&gt;Our current image tagging scheme is: &lt;code&gt;&amp;lt;AMAZON_SAGEMAKER_DISTRIBUTION_VERSION_NUMBER&amp;gt;-&amp;lt;CPU_OR_GPU&amp;gt;&lt;/code&gt;. For example, the CPU version of Amazon SageMaker Distribution&#39;s &lt;em&gt;v0.1.2&lt;/em&gt; will carry the following tags:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;0.1.2-cpu&lt;/code&gt;: Once an image is tagged with such a patch version, that tag will &lt;em&gt;not&lt;/em&gt; be assigned to any other image in future.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;0.1-cpu&lt;/code&gt;: this, and the two below, &lt;em&gt;can&lt;/em&gt; change when new versions of Amazon SageMaker Distribution are released.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;0-cpu&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;latest-cpu&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;So, if you want to stay on the latest software as and when release by Amazon SageMaker Distribution, you can use &lt;code&gt;latest-cpu&lt;/code&gt; and do a &lt;code&gt;docker pull latest-cpu&lt;/code&gt; when needed. If you use, say, &lt;code&gt;0.1.2-cpu&lt;/code&gt;, the underlying distribution will remain the same over time.&lt;/p&gt; &#xA;&lt;h3&gt;Package Staleness Report&lt;/h3&gt; &#xA;&lt;p&gt;If you want to generate/view the staleness report for each of the individual packages in a given SageMaker distribution image version, then run the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;VERSION=&amp;lt;Insert SageMaker Distribution version in semver format here. example: 0.4.2&amp;gt;&#xA;python ./src/main.py generate-staleness-report --target-patch-version $VERSION&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Example use cases&lt;/h2&gt; &#xA;&lt;p&gt;Here are some examples on how you can try out one of our images.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;em&gt;Local&lt;/em&gt; environment, such as your laptop&lt;/h3&gt; &#xA;&lt;p&gt;The easiest way to get it running on your laptop is through the Docker CLI:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;export ECR_IMAGE_ID=&#39;INSERT_IMAGE_YOU_WANT_TO_USE&#39;&#xA;docker run -it \&#xA;    -p 8888:8888 \&#xA;    --user `id -u`:`id -g` \&#xA;    -v `pwd`/sample-notebooks:/home/sagemaker-user/sample-notebooks \&#xA;    $ECR_IMAGE_ID jupyter-lab --no-browser --ip=0.0.0.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(If you have access to Nvidia GPUs, you can pass &lt;code&gt;--gpus=all&lt;/code&gt; to the Docker command.)&lt;/p&gt; &#xA;&lt;p&gt;In the image, we also have entrypoints built in, that automatically starts IDE server and automatically restarts IDE server in case of minor IDE server interruptions or crashes. For example, to start JupyterLab server using the entrypoint built in:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;export ECR_IMAGE_ID=&#39;INSERT_IMAGE_YOU_WANT_TO_USE&#39;&#xA;docker run -it \&#xA;    -p 8888:8888 \&#xA;    --entrypoint entrypoint-jupyter-server \&#xA;    --user `id -u`:`id -g` \&#xA;    -v `pwd`/sample-notebooks:/home/sagemaker-user/sample-notebooks \&#xA;    $ECR_IMAGE_ID&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In the console output, you&#39;ll then see a URL similar to &lt;code&gt;http://127.0.0.1:8888/lab?token=foo&lt;/code&gt;. Just open that URL in your browser, create a Jupyter Lab notebook or open a terminal, and start hacking.&lt;/p&gt; &#xA;&lt;p&gt;Note that the sample command above bind mounts a directory in &lt;code&gt;pwd&lt;/code&gt; inside the container. That way, if you were to re-create the container (say, to use a different version or CPU/GPU variant), any files you created within that directory (such as Jupyter Lab notebooks) will persist.&lt;/p&gt; &#xA;&lt;h3&gt;Amazon SageMaker Studio&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://docs.aws.amazon.com/sagemaker/latest/dg/studio.html&#34;&gt;Amazon SageMaker Studio&lt;/a&gt; is a web-based, integrated development environment (IDE) for machine learning that lets you build, train, debug, deploy, and monitor your machine learning models.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;To use the sagemaker-distribution image in SageMaker Studio, select &lt;code&gt;SageMaker Distribution v{Major_version} {CPU/GPU}&lt;/code&gt; using the &lt;a href=&#34;https://docs.aws.amazon.com/sagemaker/latest/dg/studio-launcher.html&#34;&gt;SageMaker Studio Launcher&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;&#34;I want to directly use the Conda environment, not via a Docker image&#34;&lt;/h3&gt; &#xA;&lt;p&gt;Amazon SageMaker Distribution supports full reproducibility of Conda environments, so you don&#39;t necessarily need to use Docker. Just find the version number you want to use in the &lt;a href=&#34;https://raw.githubusercontent.com/aws/sagemaker-distribution/main/build_artifacts&#34;&gt;build_artifacts&lt;/a&gt; directory, open one of &lt;em&gt;cpu.env.out&lt;/em&gt; or &lt;em&gt;gpu.env.out&lt;/em&gt; and follow the instructions in the first 2 lines.&lt;/p&gt; &#xA;&lt;h3&gt;Customizing image&lt;/h3&gt; &#xA;&lt;p&gt;If you&#39;d like to create a new Docker image on top of what we offer, we recommend you use &lt;code&gt;micromamba install ...&lt;/code&gt; instead of &lt;code&gt;pip install ...&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;FROM public.ecr.aws/sagemaker/sagemaker-distribution:latest-cpu&#xA;USER $ROOT&#xA;RUN apt-get install -y vim&#xA;USER $MAMBA_USER&#xA;RUN micromamba install sagemaker-inference --freeze-installed --yes --channel conda-forge --name base&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;FIPS&lt;/h2&gt; &#xA;&lt;p&gt;As of sagemaker-distribution: v0.12+, v1.6+, and v2+, the images come with FIPS 140-2 validated openssl provider available for use. You can enable the FIPS provider by running:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;export OPENSSL_CONF=/opt/conda/ssl/openssl-fips.cnf&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;For more info on the FIPS provider see: &lt;a href=&#34;https://github.com/openssl/openssl/raw/master/README-FIPS.md&#34;&gt;https://github.com/openssl/openssl/blob/master/README-FIPS.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Security&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/aws/sagemaker-distribution/main/CONTRIBUTING.md#security-issue-notifications&#34;&gt;CONTRIBUTING&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This project is licensed under the Apache-2.0 License.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>PolarExpress/marketplace-backend</title>
    <updated>2024-03-07T01:17:44Z</updated>
    <id>tag:github.com,2024-03-07:/PolarExpress/marketplace-backend</id>
    <link href="https://github.com/PolarExpress/marketplace-backend" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;PolarExpress backend&lt;/h1&gt; &#xA;&lt;p&gt;Backend and infrastructure for the GraphPolaris marketplace.&lt;/p&gt; &#xA;&lt;h2&gt;Dependencies&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Docker and Docker Compose&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For development or running bare metal, the following are also required:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Node.js 21 or above&lt;/li&gt; &#xA; &lt;li&gt;pnpm&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How to run&lt;/h2&gt; &#xA;&lt;h3&gt;Using docker&lt;/h3&gt; &#xA;&lt;p&gt;The easiest way to run the backend is using docker. To run the backend, use the following compose command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker compose up backend-dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will automatically start the database container if it wasn&#39;t running already, and build the &lt;code&gt;dev&lt;/code&gt; stage of the backend Dockerfile, which will run the backend using &lt;code&gt;ts-node&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;When deploying, run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker compose up backend-prod&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;which will build the backend using &lt;code&gt;tsc&lt;/code&gt; before running with node.&lt;/p&gt; &#xA;&lt;p&gt;In case you only need the database (and nothing else), run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker compose up db&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Run locally&lt;/h3&gt; &#xA;&lt;p&gt;If you prefer to run the backend locally instead, follow these instructions:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Run &lt;code&gt;npm i&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;npm start:dev&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Prisma Studio&lt;/h3&gt; &#xA;&lt;p&gt;To edit the contents for the database, we recommend you use Prisma Studio. To open prisma studio, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;npx prisma studio&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>