<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dockerfile Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-07-02T01:34:27Z</updated>
  <subtitle>Daily Trending of Dockerfile in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>dunglas/php-dev-docker</title>
    <updated>2023-07-02T01:34:27Z</updated>
    <id>tag:github.com,2023-07-02:/dunglas/php-dev-docker</id>
    <link href="https://github.com/dunglas/php-dev-docker" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Docker image to hack the PHP interpreter&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Docker Image to Hack the PHP Interpreter&lt;/h1&gt; &#xA;&lt;p&gt;A convenient Docker image to track PHP bugs (segmentation faults), to develop extensions or the PHP interpreter itself.&lt;/p&gt; &#xA;&lt;h2&gt;Build&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/dunglas/php-dev-docker&#xA;cd php-dev-docker&#xA;docker build -t php-dev .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Run&lt;/h2&gt; &#xA;&lt;p&gt;Basic usage:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run --cap-add=SYS_PTRACE --security-opt seccomp=unconfined -it php-dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Debug a Local PHP Script Using GDB&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run --cap-add=SYS_PTRACE --security-opt seccomp=unconfined -v ./:/app/ -it php-dev gdb php /app/my-script.php&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, type &lt;code&gt;r&lt;/code&gt; to execute the script.&lt;/p&gt; &#xA;&lt;p&gt;If the program segfaults, type &lt;code&gt;bt&lt;/code&gt; to get a backtrace.&lt;/p&gt; &#xA;&lt;p&gt;More information:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.phpinternalsbook.com/php7/debugging.html&#34;&gt;Debugging PHP with GDB (PHP Internals Book)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://sourceware.org/gdb/current/onlinedocs/gdb.html/&#34;&gt;GDB User Manual&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Use Your Custom Forks of C Projects&lt;/h3&gt; &#xA;&lt;p&gt;Start the container with volumes containing your local sources of PHP, curl and/or nghttp2:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run --cap-add=SYS_PTRACE --security-opt seccomp=unconfined -v ~/workspace/php-src:/usr/src/php-src -v ~/workspace/curl:/usr/src/curl -v ~/workspace/nghttp2:/usr/src/nghttp2 -it php-dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Tools Included&lt;/h2&gt; &#xA;&lt;p&gt;Base image: Debian&lt;/p&gt; &#xA;&lt;p&gt;Libraries (Git repositories, and compiled versions with debug symbols):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;the PHP Interpreter&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;libcurl&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;nghttp2&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Development tools:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;GCC&lt;/li&gt; &#xA; &lt;li&gt;LLVM&lt;/li&gt; &#xA; &lt;li&gt;GDB&lt;/li&gt; &#xA; &lt;li&gt;Valgrind&lt;/li&gt; &#xA; &lt;li&gt;neovim&lt;/li&gt; &#xA; &lt;li&gt;Git&lt;/li&gt; &#xA; &lt;li&gt;zsh&lt;/li&gt; &#xA; &lt;li&gt;Caddy&lt;/li&gt; &#xA; &lt;li&gt;OpenSSL&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;p&gt;Created by &lt;a href=&#34;https://dunglas.dev&#34;&gt;KÃ©vin Dunglas&lt;/a&gt;. Sponsored by &lt;a href=&#34;https://les-tilleuls.coop&#34;&gt;Les-Tilleuls.coop&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>mrivnak/game-of-life</title>
    <updated>2023-07-02T01:34:27Z</updated>
    <id>tag:github.com,2023-07-02:/mrivnak/game-of-life</id>
    <link href="https://github.com/mrivnak/game-of-life" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Conway&#39;s Game of Life in an many programming languages as I can figure out&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Conway&#39;s Game of Life&lt;/h1&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;h3&gt;Conway&#39;s Game of Life in an many programming languages as I can figure out&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/badge/ada-%230000AA.svg?style=for-the-badge&#34; alt=&#34;Ada&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/bash-%23121011.svg?style=for-the-badge&amp;amp;logo=gnu-bash&amp;amp;logoColor=white&#34; alt=&#34;Bash&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/c-%2300599C.svg?style=for-the-badge&amp;amp;logo=c&amp;amp;logoColor=white&#34; alt=&#34;C&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/c++-%2300599C.svg?style=for-the-badge&amp;amp;logo=c%2B%2B&amp;amp;logoColor=white&#34; alt=&#34;C++&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/c%23-%23239120.svg?style=for-the-badge&amp;amp;logo=.net&amp;amp;logoColor=white&#34; alt=&#34;C#&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/d-%2398312A.svg?style=for-the-badge&amp;amp;logo=d&amp;amp;logoColor=white&#34; alt=&#34;D&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/dart-%230175C2.svg?style=for-the-badge&amp;amp;logo=dart&amp;amp;logoColor=white&#34; alt=&#34;Dart&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/f%23-%2330B9DB.svg?style=for-the-badge&amp;amp;logo=.net&amp;amp;logoColor=white&#34; alt=&#34;F#&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/go-%2300ADD8.svg?style=for-the-badge&amp;amp;logo=go&amp;amp;logoColor=white&#34; alt=&#34;Go&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Haskell-5e5086?style=for-the-badge&amp;amp;logo=haskell&amp;amp;logoColor=white&#34; alt=&#34;Haskell&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/java-%23ED8B00.svg?style=for-the-badge&amp;amp;logo=openjdk&amp;amp;logoColor=white&#34; alt=&#34;Java&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/-Julia-9558B2?style=for-the-badge&amp;amp;logo=julia&amp;amp;logoColor=white&#34; alt=&#34;Julia&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/lua-%232C2D72.svg?style=for-the-badge&amp;amp;logo=lua&amp;amp;logoColor=white&#34; alt=&#34;Lua&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/nim-%23FFE953.svg?style=for-the-badge&amp;amp;logo=nim&amp;amp;logoColor=black&#34; alt=&#34;Nim&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/perl-%2339457E.svg?style=for-the-badge&amp;amp;logo=perl&amp;amp;logoColor=white&#34; alt=&#34;Perl&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/PowerShell-%235391FE.svg?style=for-the-badge&amp;amp;logo=powershell&amp;amp;logoColor=white&#34; alt=&#34;PowerShell&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/python-3670A0?style=for-the-badge&amp;amp;logo=python&amp;amp;logoColor=ffdd54&#34; alt=&#34;Python&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/ruby-%23CC342D.svg?style=for-the-badge&amp;amp;logo=ruby&amp;amp;logoColor=white&#34; alt=&#34;Ruby&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/rust-%23000000.svg?style=for-the-badge&amp;amp;logo=rust&amp;amp;logoColor=white&#34; alt=&#34;Rust&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/typescript-%23007ACC.svg?style=for-the-badge&amp;amp;logo=typescript&amp;amp;logoColor=white&#34; alt=&#34;TypeScript&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/visual_basic-%2368217a.svg?style=for-the-badge&amp;amp;logo=.net&amp;amp;logoColor=white&#34; alt=&#34;Visual Basic&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Zig-%23F7A442.svg?style=for-the-badge&amp;amp;logo=zig&amp;amp;logoColor=black&#34; alt=&#34;Zig&#34;&gt;&lt;/p&gt; &#xA;&lt;!--&#xA;![Assembly](https://img.shields.io/badge/Assembly-black?style=for-the-badge&amp;logo=arm&amp;logoColor=white)&#xA;![Forth](https://img.shields.io/badge/forth-%23EF5350.svg?style=for-the-badge)&#xA;![Elixir](https://img.shields.io/badge/elixir-%234B275F.svg?style=for-the-badge&amp;logo=elixir&amp;logoColor=white)&#xA;![Fortran](https://img.shields.io/badge/Fortran-%23734F96.svg?style=for-the-badge&amp;logo=fortran&amp;logoColor=white)&#xA;--&gt; &#xA;&lt;p&gt;The games are all setup to run a 100x50 (WxH) board for 500 generations. Most of them were originally written to be dynamic and find the terminal size or accept arguments but it was taking too much work to get all of that set up for each language and (imo) distracting from the purpose of this by shifting half of the work onto random argument parsing libraries rather than the languages themselves.&lt;/p&gt; &#xA;&lt;h2&gt;Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mrivnak/game-of-life/main/#prerequisites&#34;&gt;Prerequisites&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mrivnak/game-of-life/main/#build-from-source&#34;&gt;Build From Source&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mrivnak/game-of-life/main/#benchmarking&#34;&gt;Benchmarking&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mrivnak/game-of-life/main/#container-build&#34;&gt;Container Build&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mrivnak/game-of-life/main/#dev-container&#34;&gt;Visual Studio Code Dev Container&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Prerequisites&lt;/h2&gt; &#xA;&lt;!--&#xA;- Assembly&#xA;  - GNU Binutils (as &amp; ld)&#xA;  - Raspberry Pi 4&#xA;- Elixir&#xA;- Fortran&#xA;  - GCC (gfortran)&#xA;--&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Ada 95 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;GCC Gnat&lt;/li&gt; &#xA;   &lt;li&gt;GCC Gnatmake&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Bash&lt;/li&gt; &#xA; &lt;li&gt;C &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;GCC&lt;/li&gt; &#xA;   &lt;li&gt;GNU Make&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;C++ &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;GCC&lt;/li&gt; &#xA;   &lt;li&gt;Meson&lt;/li&gt; &#xA;   &lt;li&gt;Ninja&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;C# &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;.NET 7.0 SDK&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;D &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;GCC GDC&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Dart&lt;/li&gt; &#xA; &lt;li&gt;F# &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;.NET 7.0 SDK&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Go&lt;/li&gt; &#xA; &lt;li&gt;Haskell &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;GHC&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Java &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Gradle&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Julia&lt;/li&gt; &#xA; &lt;li&gt;Lua&lt;/li&gt; &#xA; &lt;li&gt;Nim&lt;/li&gt; &#xA; &lt;li&gt;Perl&lt;/li&gt; &#xA; &lt;li&gt;PowerShell&lt;/li&gt; &#xA; &lt;li&gt;Python&lt;/li&gt; &#xA; &lt;li&gt;Ruby&lt;/li&gt; &#xA; &lt;li&gt;Rust &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Cargo&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Typescript &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Node.js&lt;/li&gt; &#xA;   &lt;li&gt;Yarn&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Visual Basic &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;.NET 7.0 SDK&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Zig&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Build from Source&lt;/h2&gt; &#xA;&lt;!-- ### Assembly&#xA;&#xA;This is written for a Raspberry Pi 4 running aarch64 Linux&#xA;&#xA;```sh&#xA;cd asm/&#xA;make&#xA;./game_of_life&#xA;``` --&gt; &#xA;&lt;h3&gt;Ada&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cd ada/&#xA;gnatmake src/game_of_life.adb&#xA;./game_of_life&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Bash&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cd bash/&#xA;./game_of_life.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;C&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cd c/&#xA;make&#xA;./game_of_life&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;C++&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cd cpp/&#xA;meson setup build&#xA;cd build&#xA;ninja&#xA;./game_of_life&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;C#&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cd csharp/&#xA;dotnet run&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;D&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cd d/&#xA;make&#xA;./game_of_life&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Dart&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cd dart/&#xA;dart run&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;!-- ### Elixir&#xA;&#xA;```sh&#xA;cd elixir/&#xA;elixir game_of_life.exs&#xA;``` --&gt; &#xA;&lt;h3&gt;F#&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cd fsharp/&#xA;dotnet run&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Go&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cd go/&#xA;go run .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Haskell&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cd haskell/&#xA;ghc -o game_of_life main.hs game.hs board.hs&#xA;./game_of_life&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Java&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cd java/&#xA;./gradlew run --console plain&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Julia&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cd julia/&#xA;julia game_of_life.jl&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Lua&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cd lua/&#xA;lua game_of_life.lua&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Nim&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cd nim/&#xA;nim c -r GameOfLife.nim&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Perl&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cd perl/&#xA;perl GameOfLife.pl&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;PowerShell&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cd powershell/&#xA;pwsh Game-Of-Life.ps1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Python&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cd python/&#xA;python game_of_life.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Ruby&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cd ruby/&#xA;ruby GameOfLife.rb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Rust&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cd rust/&#xA;cargo run&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Typescript&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cd typescript/&#xA;yarn install&#xA;yarn run start&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Visual Basic&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cd vb/&#xA;dotnet run&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Zig&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cd zig/&#xA;zig build run&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Benchmarking&lt;/h2&gt; &#xA;&lt;p&gt;There&#39;s an included script to build all version and run benchmarks. It requires &lt;a href=&#34;https://github.org/google/zx&#34;&gt;zx&lt;/a&gt; to run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;zx --install benchmark.mjs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;--install&lt;/code&gt; is only needed on the first run to install the script&#39;s dependencies&lt;/p&gt; &#xA;&lt;p&gt;You can also specify how many iterations to run the benchmark (default 5), averaging the results&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./benchmark.mjs --iterations 5&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The set of languages to run in the benchmark can also be set. NOTE: Some languages, e.g. bash, powershell, are disabled by default for performance reasons. The default set is &#34;ada,c,cpp,csharp,d,dart,fsharp,go,haskell,java,julia,lua,nim,perl,python,ruby,rust,typescript,vb,zig&#34;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./benchmark.mjs --languages c,cpp,rust&#xA;# of&#xA;./benchmark.mjs --languages all&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Container Build&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;podman build -t game-of-life .&#xA;&#xA;podman run --rm game-of-life&#xA;# or&#xA;podman run --rm game-of-life --iterations 5 --languages c,cpp,rust&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;NOTE: Docker will also work&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Prebuilt Container&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/mrivnak/game-of-life/actions/workflows/publish-image.yml&#34;&gt;&lt;img src=&#34;https://github.com/mrivnak/game-of-life/actions/workflows/publish-image.yml/badge.svg?sanitize=true&#34; alt=&#34;Container build&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;There&#39;s a prebuilt image on GitHub Container Registry since the container build is quite long, especially on low powered systems. Images will be available for x86_64 and aarch64. riscv64 will also be available once software support is available&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;podman pull ghcr.io/mrivnak/game-of-life:main&#xA;podman run --rm mrivnak/game-of-life:main&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Dev Container&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/badge/Visual%20Studio%20Code-0078d7.svg?style=for-the-badge&amp;amp;logo=visual-studio-code&amp;amp;logoColor=white&#34; alt=&#34;Visual Studio Code&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Provided is a &lt;code&gt;devcontainer.json&lt;/code&gt; file that will automatically setup a development environment for all of the languages in here, along with relevant extensions and language servers&lt;/p&gt;</summary>
  </entry>
</feed>