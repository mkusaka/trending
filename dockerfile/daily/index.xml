<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dockerfile Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-16T01:38:45Z</updated>
  <subtitle>Daily Trending of Dockerfile in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>PhilipAbed/RenovateTutorial</title>
    <updated>2022-07-16T01:38:45Z</updated>
    <id>tag:github.com,2022-07-16:/PhilipAbed/RenovateTutorial</id>
    <link href="https://github.com/PhilipAbed/RenovateTutorial" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Renovate Tutorial Repository&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Renovate - Hands On Tutorial&lt;/h1&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;Welcome to the Renovate hands-on tutorial.&lt;/p&gt; &#xA;&lt;p&gt;This tutorial is based on the Renovate GitHub App. you can also run Renovate as a CLI tool or a self-hosted application.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; Although this tutorial is based in the GitHub App, the concepts discussed apply to all environments.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;In this tutorial, you will learn how to configure Renovate and become familiar with some of the basic features.&lt;/p&gt; &#xA;&lt;p&gt;What you will learn:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Installation&lt;/li&gt; &#xA; &lt;li&gt;Onboarding&lt;/li&gt; &#xA; &lt;li&gt;Getting to know Renovate‚Äôs update PRs&lt;/li&gt; &#xA; &lt;li&gt;Dependency Dashboard&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;We will begin this tutorial with configuring and installing the Renovate App and an overview of the default settings and basic functionalities.&lt;/p&gt; &#xA;&lt;p&gt;Later, we will dive deeper into functional use-cases, advanced features, and &lt;code&gt;best practices&lt;/code&gt; so you&#39;ll know how to leverage Renovate to its fullest.&lt;/p&gt; &#xA;&lt;h2&gt;Part 1 - Installation&lt;/h2&gt; &#xA;&lt;p&gt;Let‚Äôs start by forking the tutorial repo to your account, installing the Renovate GitHub App, and configuring it to your repo.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Make sure you are logged in to GitHub.com&lt;/li&gt; &#xA; &lt;li&gt;Fork this &lt;a href=&#34;https://github.com/PhilipAbed/RenovateTutorial&#34;&gt;RenovateTutorial&lt;/a&gt; repository. The tutorial instructions will be based on the contents of this repository&lt;/li&gt; &#xA; &lt;li&gt;The following instructions are directed at those that don‚Äôt have Renovate installed: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Install the Renovate App to your account by navigating to the &lt;a href=&#34;https://github.com/apps/renovate&#34;&gt;Renovate App GitHub installation page&lt;/a&gt; and select Install: &lt;img src=&#34;https://user-images.githubusercontent.com/102745725/178965463-525a385e-d914-4309-aeb4-cb4358dc12bc.png&#34; alt=&#34;image&#34;&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;If you do have Renovate installed: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;navigate to the &lt;a href=&#34;https://github.com/apps/renovate&#34;&gt;Renovate app page&lt;/a&gt; and select configure: &lt;img src=&#34;https://user-images.githubusercontent.com/42116482/178491021-a0b7ba34-3bc7-4953-8452-416fbd3d6ec9.png&#34; alt=&#34;image&#34;&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;You will reach an installation configuration page where you are asked to configure Repository Access.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; for existing users, installation configuration appears at the bottom of the page.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Mark &lt;code&gt;Only select repositories&lt;/code&gt; and make sure to select the forked RenovateTutorial repo&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; each selected repo gets an onboarding PR.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;p&gt;If you select &lt;code&gt;All repositories&lt;/code&gt;, forked repos will be skipped by default (including RenovateTutorial).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;click on &lt;code&gt;Install&lt;/code&gt; (‚ÄúSave‚Äù for existing users)&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;img width=&#34;629&#34; alt=&#34;configuration page&#34; src=&#34;https://user-images.githubusercontent.com/102745725/178964980-df55dafd-f087-433a-90f7-986fa01c1ac0.png&#34;&gt; &#xA;&lt;p&gt;For new installs:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You will be redirected to our ‚ÄúThank you for installing Renovate‚Äù page while we are setting up your account.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/42116482/178492276-ac0f5c03-db21-482c-95e9-07dc229ac298.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;After a few seconds, you will be automatically directed to a dashboard where you can login and view the Renovate logs. We recommend saving this link for future use.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;img width=&#34;625&#34; alt=&#34;Screen Shot 2022-07-14 at 14 24 26&#34; src=&#34;https://user-images.githubusercontent.com/102745725/178972035-abe2e859-0756-498c-91d5-ec2f0cfdd503.png&#34;&gt; &#xA;&lt;p&gt;&lt;strong&gt;Congratulations! You have successfully installed Renovate to your account.&lt;/strong&gt; üéà&lt;/p&gt; &#xA;&lt;h2&gt;Part 2 - Onboarding&lt;/h2&gt; &#xA;&lt;p&gt;Now that you have Renovate installed, we can begin onboarding.&lt;/p&gt; &#xA;&lt;p&gt;Let‚Äôs review the concepts of the Onboarding PR and learn about Renovate‚Äôs initial settings.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; For your convenience, Renovate will not make any changes to your repo or raise PRs until after you finish onboarding.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Upon installing Renovate, an onboarding PR will be automatically generated.&lt;/li&gt; &#xA; &lt;li&gt;This PR is there to help you understand Renovate and its default settings before Renovate starts running on your repository.&lt;/li&gt; &#xA; &lt;li&gt;The Onboarding PR creates a configuration file called &lt;code&gt;renovate.json&lt;/code&gt;, which contains Renovate‚Äôs default settings and can be modified during onboarding.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Now let‚Äôs review the onboarding PR -&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Navigate to the &lt;code&gt;Pull Requests&lt;/code&gt; section in GitHub, and open the newly generated PR - &lt;code&gt;Configure Renovate&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;img width=&#34;1500&#34; alt=&#34;onboarding PR&#34; src=&#34;https://user-images.githubusercontent.com/102745725/178965966-76aa3941-cac4-4df3-bd89-75b9f8002924.png&#34;&gt; &#xA;&lt;img width=&#34;935&#34; alt=&#34;onboarding content&#34; src=&#34;https://user-images.githubusercontent.com/102745725/178966039-b11315b8-8c75-416b-9f18-c8109c17d0ab.png&#34;&gt; &#xA;&lt;h4&gt;The onboarding PR contains:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Detected Package Files&lt;/strong&gt; - All package files detected by Renovate in your code.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Configuration Summary&lt;/strong&gt; - The default configuration settings that will be applied.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;What to Expect&lt;/strong&gt; - The dependency update PRs that Renovate is about to automatically create.&lt;/li&gt; &#xA; &lt;li&gt;The link to Renovate‚Äôs official &lt;a href=&#34;https://docs.renovatebot.com/&#34;&gt;documentation&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;The link to review jobs logs in the &lt;a href=&#34;https://app.renovatebot.com/dashboard&#34;&gt;Renovate dashboard&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; Renovate will not create dependency update PRs until the onboarding PR will be merged.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;These are some of the default configurations of Renovate:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Enables creation of the ‚ÄúDependency Dashboard‚Äù - a dashboard that shows an overview of the state of your repositories&#39; dependencies.&lt;/li&gt; &#xA; &lt;li&gt;PRs will be created at a rate of 2 PRs per hour.&lt;/li&gt; &#xA; &lt;li&gt;The limit of simultaneous open Renovate PRs is set to 10.&lt;/li&gt; &#xA; &lt;li&gt;Renovate automatically groups known monorepo packages to a single PR (example can be seen in the &lt;code&gt;date-io&lt;/code&gt; PR under the &lt;strong&gt;what to expect&lt;/strong&gt; section).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Renovate offers the ability to change configurations before merging the onboarding PR as well as preview the results of these changes. At this point, Renovate has created a branch called renovate/configure which contains the &lt;code&gt;renovate.json&lt;/code&gt; configuration file. By default, Renovate limits branch creation to 2 per hour:&lt;/p&gt; &#xA;&lt;img width=&#34;829&#34; alt=&#34;onboarding warning hourly&#34; src=&#34;https://user-images.githubusercontent.com/102745725/178961193-2f1f1548-5282-4d33-b8ef-6e141f0a643d.png&#34;&gt; &#xA;&lt;p&gt;Example&lt;/p&gt; &#xA;&lt;p&gt;As a user, despite Renovate‚Äôs suggestion to limit hourly PR creation to 2, we might want to increase the limit to a different number. Let‚Äôs try changing this hourly limitation to 3:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Go to the newly created branch - &lt;code&gt;renovate/configure&lt;/code&gt;:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;img width=&#34;763&#34; alt=&#34;new branch&#34; src=&#34;https://user-images.githubusercontent.com/102745725/178966974-35c089c6-4190-4721-b1c2-956d84e80d07.png&#34;&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Go into the &lt;code&gt;renovate.json&lt;/code&gt; file:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/42116482/178494908-89189f2e-632a-42ee-a49a-16941a40101b.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Add the following code segment:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;{&#xA;  &#34;prHourlyLimit&#34;: 3&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img width=&#34;591&#34; alt=&#34;change in config 1&#34; src=&#34;https://user-images.githubusercontent.com/102745725/178967120-51ec5940-42bc-444e-8c4d-b98ea4ee5948.png&#34;&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;Commit the changes&lt;/li&gt; &#xA; &lt;li&gt;Revisit the onboarding PR and notice how the onboarding PR automatically updates to reflect the changes you made to the configuration&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;img width=&#34;830&#34; alt=&#34;onboarding warning hourly update&#34; src=&#34;https://user-images.githubusercontent.com/102745725/178960884-40077a5c-8fe1-422f-81c1-567ea1e6619b.png&#34;&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; May take a few moments to update.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ol start=&#34;6&#34;&gt; &#xA; &lt;li&gt;Merge the onboarding pull request.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;Congratulations! You have successfully onboarded Renovate.&lt;/strong&gt; üéà&lt;/p&gt; &#xA;&lt;h2&gt;Part 3 - Getting to know Renovate‚Äôs update PRs&lt;/h2&gt; &#xA;&lt;p&gt;Now that you have merged the onboarding PR, Renovate will generate Update PRs to the most recent dependency version based on your configuration.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; PRs may take a couple of minutes to appear&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Here we will review the basic concepts of Renovate update PRs and merge it.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;By default, Renovate will create up to 2 update PRs per hour. However, if you completed the onboarding section of this tutorial, Renovate will now create 3 PRs.&lt;/li&gt; &#xA; &lt;li&gt;You should already see notifications for these pull requests in the &lt;code&gt;Pull Requests&lt;/code&gt; section of the repo.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Let‚Äôs go ahead and take a look at a Renovate update PR:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Navigate to the &lt;code&gt;Pull requests&lt;/code&gt; section and open - &lt;code&gt;Update dependency lodash to x.y.z&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;img width=&#34;1256&#34; alt=&#34;open PRs&#34; src=&#34;https://user-images.githubusercontent.com/102745725/178967929-690b3866-190b-4576-a961-981ce78cbd1b.png&#34;&gt; &#xA;&lt;h3&gt;Each update PR contains:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Dependency information (name and version changes)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.renovatebot.com/merge-confidence/&#34;&gt;Merge Confidence&lt;/a&gt; values&lt;/li&gt; &#xA; &lt;li&gt;Up-to-date release notes&lt;/li&gt; &#xA; &lt;li&gt;Renovate configuration-related info&lt;/li&gt; &#xA; &lt;li&gt;Option to rebase PR&lt;/li&gt; &#xA; &lt;li&gt;Link to view Renovate logs&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/42116482/178495994-7cce93f1-db65-4f09-b682-7506dc242fdc.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Renovate‚Äôs update PRs will update the relevant dependency across your entire repo. In our RenovateTutorial repo, this will be both the &lt;code&gt;package.json&lt;/code&gt; file and the &lt;code&gt;package-lock.json&lt;/code&gt; file:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;img width=&#34;1488&#34; alt=&#34;file diff lodash&#34; src=&#34;https://user-images.githubusercontent.com/102745725/178968020-865560f7-173c-4e9e-a073-488147dbb137.png&#34;&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Merge this pull request&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note - Renovate is highly configurable and supports:&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;On-demand PR creation.&lt;/li&gt; &#xA;  &lt;li&gt;Automatic merging of PRs.&lt;/li&gt; &#xA;  &lt;li&gt;Settings for specific dependencies/package managers.&lt;/li&gt; &#xA;  &lt;li&gt;Scheduling.&lt;/li&gt; &#xA;  &lt;li&gt;Grouping.&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;p&gt;All the above and more will be discussed in future parts of the tutorial.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;strong&gt;Congratulations! You have now updated your first dependency with Renovate.&lt;/strong&gt; üéà&lt;/p&gt; &#xA;&lt;h2&gt;Part 4 - Dependency Dashboard&lt;/h2&gt; &#xA;&lt;p&gt;Renovate‚Äôs Dependency Dashboard is a GitHub Issue that enables you to manage and monitor Renovate‚Äôs activity in your repo. In this section, we will go over some of its main functionalities and capabilities.&lt;/p&gt; &#xA;&lt;p&gt;Let‚Äôs begin by creating and enabling the Dependency Dashboard. Since GitHub defaults to disable &lt;code&gt;issues&lt;/code&gt; on forked repositories, we need to enable it on the forked RenovateTutorial repo:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Navigate to the main page of the repo and go to &lt;code&gt;settings&lt;/code&gt; -&amp;gt; &lt;code&gt;general&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Check the &lt;code&gt;issues&lt;/code&gt; checkbox under the Features section:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;img width=&#34;1284&#34; alt=&#34;issues settings&#34; src=&#34;https://user-images.githubusercontent.com/102745725/178968523-fb002cf1-2510-4b4f-b840-f9776e660d92.png&#34;&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;In order for the Dependency Dashboard to become available, we will need to re-run Renovate by triggering a webhook (for example, closing an update PR).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; This is usually done in a click via the Dependency Dashboard.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Go to the &lt;code&gt;Pull requests&lt;/code&gt; section&lt;/li&gt; &#xA; &lt;li&gt;Select &lt;code&gt;Update dependency php to v8.1&lt;/code&gt; and select &lt;code&gt;Close pull request&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;img width=&#34;927&#34; alt=&#34;close php&#34; src=&#34;https://user-images.githubusercontent.com/102745725/178969009-7239db99-4abe-44d1-a86c-a0effdf6fb7a.png&#34;&gt; &#xA;&lt;ol start=&#34;5&#34;&gt; &#xA; &lt;li&gt;This will trigger Renovate to run and the Dependency Dashboard will appear under the &lt;code&gt;Issues&lt;/code&gt; section - navigate to it&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; it may take a minute to appear.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;The Dependency Dashboard includes:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Overview of all updates that are still to-do:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Open&lt;/strong&gt; PRs&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Rate Limited&lt;/strong&gt; - PRs blocked by rate limit setting and will be opened based on preferences.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Pending Approval&lt;/strong&gt; - PRs that require manual triggering based on configurations.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Awaiting Schedule&lt;/strong&gt; - PRs creation blocked by Renovate scheduling settings.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Pending Status Checks&lt;/strong&gt; - updates that await pending status checks in order to be created.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Visibility into &lt;strong&gt;rejected/deferred updates&lt;/strong&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;List of all the &lt;strong&gt;detected dependencies&lt;/strong&gt; and &lt;strong&gt;package managers&lt;/strong&gt; in your repository.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;img width=&#34;942&#34; alt=&#34;Screen Shot 2022-07-14 at 14 05 40&#34; src=&#34;https://user-images.githubusercontent.com/102745725/178968912-24ef22ec-fc98-4bf1-a293-9fb5dbf4c1b8.png&#34;&gt; &#xA;&lt;p&gt;Users can manually trigger the creation of dependency updates directly from the dashboard.&lt;/p&gt; &#xA;&lt;p&gt;You can also re-run the Renovate bot manually directly from the Dependency Dashboard by enabling the ‚ÄúCheck this box to trigger a request Renovate to run again on this repository‚Äù option:&lt;/p&gt; &#xA;&lt;img width=&#34;867&#34; alt=&#34;rerun renovate&#34; src=&#34;https://user-images.githubusercontent.com/102745725/178969114-c1b64333-b45a-4508-b638-1e25ad0adab5.png&#34;&gt; &#xA;&lt;p&gt;Let‚Äôs dive into one of the dependency dashboard capabilities - &lt;strong&gt;the Pending Approval feature&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Say we want to take extra measures before updating major versions of a package (either to reduce noise or to handle it more carefully). Renovate offers an option to prevent automatic creation of major version update PRs and create such PRs only upon manual request from the Dependency Dashboard.&lt;/p&gt; &#xA;&lt;p&gt;In the Dependency Dasboard, under the &lt;code&gt;Rate Limited&lt;/code&gt; section, the &lt;code&gt;Update dependency commander to vX&lt;/code&gt; is waiting to be created.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; based on the previously set &lt;code&gt;prHourlyLimit&lt;/code&gt; configuration, 3 PRs per hour in our case, this PR will be created within an hour.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;img width=&#34;928&#34; alt=&#34;commander in Rate Limited&#34; src=&#34;https://user-images.githubusercontent.com/102745725/178960104-c254c12f-08fb-4508-824d-20df60b2290f.png&#34;&gt; &#xA;&lt;p&gt;Since we decided that we want to handle it manually, we will edit configurations and see how the depndency dashboard is affected by this change.&lt;/p&gt; &#xA;&lt;p&gt;In order to limit all major updates to on-demand creation:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Add this code segment to your &lt;code&gt;renovate.json&lt;/code&gt; file:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#34;packageRules&#34;: [&#xA;    {&#xA;      &#34;matchUpdateTypes&#34;: [&#34;major&#34;],&#xA;      &#34;dependencyDashboardApproval&#34;: true&#xA;    }&#xA;  ]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img width=&#34;924&#34; alt=&#34;change in config - pending approval&#34; src=&#34;https://user-images.githubusercontent.com/102745725/178962677-612e8172-fac7-45fb-937b-46a559d848f0.png&#34;&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Commit the changes&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; Changing the &lt;code&gt;renovate.json&lt;/code&gt; configuraion file is a webhook that triggers Renovate to re-run.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;Now go back to the Dependency Dashboard in the Issues section&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;As you can see, &lt;code&gt;commander&lt;/code&gt; major update PR now appears under the &lt;strong&gt;Pending Approval&lt;/strong&gt; section and &lt;strong&gt;will not&lt;/strong&gt; be opened unless manually triggered&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; it make take a minute to complete Renovate&#39;s run&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;img width=&#34;926&#34; alt=&#34;commander in pending approval&#34; src=&#34;https://user-images.githubusercontent.com/102745725/178962735-84f1ae00-df4c-4fed-adf5-12fefeb94e9f.png&#34;&gt; &#xA;&lt;ol start=&#34;5&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;You can now decide to manually open this PR by checking the box next to it&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Navigate to the &lt;code&gt;Pull requests&lt;/code&gt; section to review the generated PR and merge it to the repo.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;Congratulations! You are now familiar with Renovate‚Äôs Dependency Dashboard.&lt;/strong&gt; üéà&lt;/p&gt; &#xA;&lt;h2&gt;What have we learned so far:&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;How to install Renovate&lt;/li&gt; &#xA; &lt;li&gt;Onboarding Renovate by reviewing, configuring, and merging the onboarding PR&lt;/li&gt; &#xA; &lt;li&gt;How to update a dependency with Renovate&lt;/li&gt; &#xA; &lt;li&gt;How to utilize the Dependency Dashboard&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;General Comments:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Granting access to all repositories or change repo selections can be modified at any time on the &lt;a href=&#34;https://github.com/apps/renovate&#34;&gt;Renovate App GitHub page&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Renovate configuration can be modified by manual configurations, global organization configurations and existing Renovate presets.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Congratulations! You have successfully completed Renovate‚Äôs hands-on tutorial and have taken your first steps to automate dependency updates in your projects.&lt;/h3&gt; &#xA;&lt;h3&gt;Now, it&#39;s time to configure Renovate on the rest of your repositories and let Renovate manage your dependencies&#39; health.&lt;/h3&gt; &#xA;&lt;h3&gt;Upcoming Tutorials:&lt;/h3&gt; &#xA;&lt;p&gt;We have more advanced Renovate tutorials in the pipeline and will post updates when they are published.&lt;/p&gt; &#xA;&lt;p&gt;What‚Äôs coming next?&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Merge confidence&lt;/li&gt; &#xA; &lt;li&gt;Auto Merge&lt;/li&gt; &#xA; &lt;li&gt;Labeling&lt;/li&gt; &#xA; &lt;li&gt;Grouping&lt;/li&gt; &#xA; &lt;li&gt;Schedule&lt;/li&gt; &#xA; &lt;li&gt;Package Rules&lt;/li&gt; &#xA; &lt;li&gt;GitHub actions&lt;/li&gt; &#xA; &lt;li&gt;Assignees and reviewers&lt;/li&gt; &#xA; &lt;li&gt;Regex Managers&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>VergilGao/docker-mdc</title>
    <updated>2022-07-16T01:38:45Z</updated>
    <id>tag:github.com,2022-07-16:/VergilGao/docker-mdc</id>
    <link href="https://github.com/VergilGao/docker-mdc" rel="alternate"></link>
    <summary type="html">&lt;p&gt;https://github.com/yoshiko2/Movie_Data_Capture ÁöÑ dockerÈïúÂÉèÔºåÂ∏ÆÂä©‰Ω†Êõ¥‰ºòÈõÖÁöÑÁÆ°ÁêÜÁ°¨Áõò‰∏≠ÁöÑÂ§ßÂßêÂßê‰ª¨„ÄÇ&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Movie Data Capture - Docker&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/VergilGao/docker-mdc&#34;&gt;github&lt;/a&gt; &lt;a href=&#34;https://github.com/VergilGao/docker-mdc/stargazers&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/VergilGao/docker-mdc&#34; alt=&#34;GitHub stars&#34;&gt;&lt;/a&gt; | &lt;a href=&#34;https://hub.docker.com/repository/docker/vergilgao/mdc&#34;&gt;dockerhub&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/VergilGao/docker-mdc/workflows/publish/badge.svg?sanitize=true&#34; alt=&#34;publish&#34;&gt; &lt;a href=&#34;https://github.com/VergilGao/docker-mdc/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/VergilGao/docker-mdc&#34; alt=&#34;GitHub license&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Êï∞ÊçÆÊó†‰ª∑ÔºåËØ∑Ë∞®ÊÖéÊìç‰ΩúÔºÅ&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Êï∞ÊçÆÊó†‰ª∑ÔºåËØ∑Ë∞®ÊÖéÊìç‰ΩúÔºÅ&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Êï∞ÊçÆÊó†‰ª∑ÔºåËØ∑Ë∞®ÊÖéÊìç‰ΩúÔºÅ&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;ÈáçË¶ÅÁöÑ‰∫ãÊÉÖËØ¥‰∏âÈÅç„ÄÇ&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Movie_Data_Capture&lt;/code&gt; ‰ª•‰∏ãÁÆÄÁß∞ &lt;code&gt;mdc&lt;/code&gt;ÊòØ‰∏ÄÊ¨æÁî±&lt;a href=&#34;https://github.com/yoshiko2&#34;&gt;yoshiko2&lt;/a&gt;‰ΩøÁî® &lt;code&gt;python3&lt;/code&gt;ÁºñÂÜôÁöÑÊàê‰∫∫ÂΩ±ÁâáÂàÆÂâäÂô®„ÄÇ&lt;/p&gt; &#xA;&lt;p&gt;Êú¨ÈïúÂÉèËÉΩÂ∏ÆÂä©Áî®Êà∑Âú®nas‰∏≠Êó†ÈúÄÂÆâË£ÖËøêË°åÊó∂ÁéØÂ¢ÉÔºåÂèØ‰ª•Êõ¥ÁÆÄÂçïÁöÑ‰ΩøÁî® &lt;code&gt;mdc&lt;/code&gt;„ÄÇ&lt;/p&gt; &#xA;&lt;p&gt;Êú¨‰ªìÂ∫ìÈíàÂØπ &lt;code&gt;unraid&lt;/code&gt;Á≥ªÁªüÂÅöÂá∫‰∫ÜÁâπÂà´‰ºòÂåñÔºåÂØπ‰∫é &lt;code&gt;unraid&lt;/code&gt;Áî®Êà∑ÔºåÊú¨ÈïúÂÉèÁöÑÈªòËÆ§ÈÖçÁΩÆÂç≥ÂèØÈÅøÂÖçÊùÉÈôêÈóÆÈ¢ò„ÄÇÂØπ‰∫éÂÖ∂‰ªñnasÁ≥ªÁªüÁî®Êà∑ÔºåËØ∑ÊåâÁÖßÂêÑËá™ÁöÑÁ≥ªÁªüÊùÉÈôêÁ≠ñÁï•ËÆæÁΩÆ &lt;code&gt;UID&lt;/code&gt; &lt;code&gt;GID&lt;/code&gt; &lt;code&gt;UMASK&lt;/code&gt;‰∏â‰∏™ÁéØÂ¢ÉÂèòÈáè„ÄÇ&lt;/p&gt; &#xA;&lt;p&gt;Êú¨ÈïúÂÉè‰ªé‰ªìÂ∫ì&lt;a href=&#34;https://github.com/yoshiko2/movie_data_Capture&#34;&gt;Movie_Data_Capture&lt;/a&gt;ÊûÑÂª∫ÔºåÂõ†‰∏∫Êú¨‰∫∫Â∑•‰ΩúËæÉÂøôÔºåÂæàÂèØËÉΩ‰∏ç‰ºöÂèäÊó∂Âíå‰∏äÊ∏∏releaseÂêåÊ≠•„ÄÇ&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Ê≥®ÊÑèÔºåÂõ†‰∏∫dockerÊñá‰ª∂Á≥ªÁªüÁöÑÁâπÊÆäÊÄßÔºåËØ∑‰ªîÁªÜÈòÖËØª‰ª•‰∏ãÊìç‰ΩúÊåáÂçóÂêéÂÜçË°å‰ΩøÁî®„ÄÇ&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;ÈïúÂÉè‰ΩúËÄÖ&lt;a href=&#34;https://github.com/VergilGao&#34;&gt;VergilGao&lt;/a&gt; &lt;a href=&#34;https://github.com/yoshiko2&#34;&gt;yoshiko2&lt;/a&gt;ÂØπ‰ΩøÁî®Ê≠§ÈïúÂÉèÂØºËá¥ÁöÑÊñá‰ª∂‰∏¢Â§±„ÄÅÊçüÂùèÂùá‰∏çË¥üË¥£„ÄÇ&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;6.2.1ÁâàÊú¨ÊúâÂäüËÉΩÊÄßBUGÔºåÂ∑≤Ë¢´‰∏äÊ∏∏‰ΩúËÄÖÂ∫üÁΩÆÔºåËØ∑ÈÖåÊÉÖ‰ΩøÁî®&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Êõ¥Êñ∞Êó•Âøó&lt;/h2&gt; &#xA;&lt;p&gt;20220529Ôºö&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;‰øÆÂ§çrootÁî®Êà∑ËøêË°å&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;20220528Ôºö&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Êõ¥Êñ∞Ëá≥‰∏äÊ∏∏6.2.2ÁâàÊú¨&lt;/li&gt; &#xA; &lt;li&gt;‰øÆÂ§ç‰∫∫ËÑ∏ËØÜÂà´Êú™ÁîüÊïàÁöÑÈóÆÈ¢ò&lt;/li&gt; &#xA; &lt;li&gt;ÈÄöËøáÁéØÂ¢ÉÂèòÈáèÂêØÂä®Á®ãÂ∫èÁöÑÊñπÊ≥ïÂ∑≤ÁªèÂ∫üÂºÉÔºåÁ®ãÂ∫èÂ∞ÜÂú®ÂêØÂä®Êó∂Ê£ÄÊµãÊòØÂê¶Â≠òÂú®ÈÖçÁΩÆÊñá‰ª∂ÔºåÂ¶ÇÊûú‰∏çÂ≠òÂú®ÔºåÂ∞Ü‰ºöÂú®configÊò†Â∞ÑÁõÆÂΩï‰∏ãÂàõÂª∫ÔºåÂπ∂‰∏îÈÄÄÂá∫„ÄÇËØ∑‰øÆÊîπÈÖçÁΩÆÊñá‰ª∂ÂêéÂÜçÊ¨°ÂêØÂä®Á®ãÂ∫è„ÄÇ&lt;strong&gt;Breaking Change!&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;ÁéØÂ¢ÉÂèòÈáè&lt;code&gt;PUID&lt;/code&gt;,&lt;code&gt;PGID&lt;/code&gt;Â∑≤Áªè‰øÆÊîπ‰∏∫&lt;code&gt;UID&lt;/code&gt; &lt;code&gt;GID&lt;/code&gt;&lt;strong&gt;Breaking Change!&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;UMASK&lt;/code&gt;ÁöÑÈªòËÆ§ÂÄºÊîπ‰∏∫&lt;code&gt;002&lt;/code&gt;&lt;strong&gt;Breaking Change!&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;20220312:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Êñ∞Â¢ûËá™ÂÆö‰πâÈÖçÁΩÆÊñá‰ª∂ÂäüËÉΩÔºå‰Ω†Áé∞Âú®ÂèØ‰ª•‰ΩøÁî®Ëá™Â∑±ÁºñÂÜôÁöÑÈÖçÁΩÆÊñá‰ª∂Êù•ËøêË°åÁ®ãÂ∫è‰∫ÜÔºÅËØ∑Êò†Â∞Ñ &lt;code&gt;mdc.ini&lt;/code&gt; Êñá‰ª∂Ëá≥ &lt;code&gt;/config/mdc.ini&lt;/code&gt; ÁõÆÂΩïÔºåÁ®ãÂ∫è‰ºöËá™Âä®Âà§Êñ≠ÊòØÂê¶Â≠òÂú®ÈÖçÁΩÆÊñá‰ª∂„ÄÇÂ¶ÇÊûúÈÖçÁΩÆÊñá‰ª∂Â≠òÂú®ÔºåÁéØÂ¢ÉÂèòÈáèÁöÑËÆæÁΩÆÂèä‰øÆÊîπÂ∞Ü‰ºö&lt;strong&gt;‰∏çËµ∑‰ΩúÁî®&lt;/strong&gt;ÔºåËøôÊÑèÂë≥ÁùÄÂ¶ÇÊûú‰ΩøÁî®ÁéØÂ¢ÉÂèòÈáèÂêØÂä®ÔºåÁ®ãÂ∫èÂè™‰ºöÂ∫îÁî®&lt;strong&gt;È¶ñÊ¨°&lt;/strong&gt;ÂêØÂä®ÂÆπÂô®Êó∂ÁöÑÁéØÂ¢ÉÂèòÈáèÔºåÂèçÂ§çÂêØÂä®Á®ãÂ∫èÊó∂ÔºåÊñ∞‰øÆÊîπÁöÑÁéØÂ¢ÉÂèòÈáèÂ∞Ü&lt;strong&gt;‰∏çËµ∑‰ΩúÁî®&lt;/strong&gt;„ÄÇÂ¶ÇÊûú‰Ω†ÁöÑÂÆπÂô®‰∏çÊòØ‰∏ÄÊ¨°ÊÄßÁöÑÔºåËØ∑‰ΩøÁî®Êò†Â∞Ñmdc.iniÊñá‰ª∂ÁöÑÊñπÂºèÂêØÂä®„ÄÇ&lt;/li&gt; &#xA; &lt;li&gt;Êñ∞Â¢ûÁéØÂ¢ÉÂèòÈáè &lt;code&gt;TZ&lt;/code&gt;ÔºåÈªòËÆ§ÂÄº‰∏∫ &lt;code&gt;Asia/Shanghai&lt;/code&gt;ÔºåËøôÂ∞ÜËÆæÁΩÆÂÆπÂô®ÂÜÖÁöÑÊó∂Èó¥Âå∫Âüü„ÄÇ&lt;/li&gt; &#xA; &lt;li&gt;Êñ∞Â¢ûÁéØÂ¢ÉÂèòÈáè &lt;code&gt;UMASK&lt;/code&gt;Ôºå‰øÆÊîπ &lt;code&gt;PUID&lt;/code&gt;Âíå &lt;code&gt;PGID&lt;/code&gt;ÁöÑÈªòËÆ§ÂÄºÔºåÁõÆÂâçÁöÑÈªòËÆ§ÂÄº‰∏∫ &lt;code&gt;PUID=99, PGID=100 UMASK=000&lt;/code&gt;ÔºåÊ≠§‰∏∫ &lt;code&gt;UNRAID&lt;/code&gt;Á≥ªÁªüÁî®Êà∑ÁöÑÊé®ËçêÈÖçÁΩÆÔºåÂÖ∂‰ªñÁ≥ªÁªü‰ªçÁÑ∂ÈúÄË¶ÅËá™Ë°å‰øÆÊîπ‰ª•Èò≤Ê≠¢Âá∫Áé∞ÊùÉÈôêÈóÆÈ¢ò„ÄÇ&lt;/li&gt; &#xA; &lt;li&gt;Âà†Èô§ &lt;code&gt;s6-overlay&lt;/code&gt;È©±Âä®ÔºåÊùÉÈôêÈóÆÈ¢òÂ∞ÜÈÄöËøá &lt;code&gt;su&lt;/code&gt;ÂëΩ‰ª§Ëß£ÂÜ≥ÔºåÂõ†Ê≠§ÔºåÊú¨ÈïúÂÉèÁöÑ &lt;code&gt;PUID&lt;/code&gt;Âíå &lt;code&gt;PGID&lt;/code&gt;ÁéØÂ¢ÉÂèòÈáè‰∫ãÂÆû‰∏äÁ≠âÂêå‰∫é &lt;code&gt;UID&lt;/code&gt;Âíå &lt;code&gt;GID&lt;/code&gt;Ôºå‰∏∫‰∫Ü‰øùÊåÅÂÖºÂÆπÊÄßÔºåÁéØÂ¢ÉÂèòÈáèÂêç‰∏çÂÜç‰øÆÊîπ„ÄÇ&lt;/li&gt; &#xA; &lt;li&gt;Êñ∞Â¢û&lt;a href=&#34;https://github.com/VergilGao/docker-mdc/pkgs/container/mdc&#34;&gt;ghcr.io&lt;/a&gt;ÈïúÂÉè‰ªìÂ∫ìÔºåÊ≠§‰ªìÂ∫ìÂè™Êúâ &lt;code&gt;vergilgao/mdc&lt;/code&gt;ÔºåÂêåÊó∂dockerhubÈïúÂÉè‰ªìÂ∫ìÂ∞ÜÁªßÁª≠‰øùÊåÅ &lt;code&gt;vergilgao/avdc&lt;/code&gt;Âíå &lt;code&gt;vergilgao/mdc&lt;/code&gt;‰∏§‰∏™Âú∞ÂùÄÁöÑÊõ¥Êñ∞„ÄÇ&lt;/li&gt; &#xA; &lt;li&gt;ÊèêÂçátag‰∏∞ÂØåÂ∫¶ÔºåÂ∞Ü‰∏äÊ∏∏ÁâàÊú¨Âè∑Êåâ &lt;code&gt;{major}.{minor}.{build}&lt;/code&gt;ÊãÜÂàÜÊõ¥Êñ∞ÔºåÂêåÊó∂Êñ∞Â¢û‰∏Ä‰∏™ÂÆö‰πâ‰∏∫ &lt;code&gt;{version}-r{release_count}&lt;/code&gt;ÁöÑtagÔºåÁî®‰∫éÊ†áËØÜÂêå‰∏Ä‰∏™‰∏äÊ∏∏release‰∏ãdockerÁâàÊú¨ÁöÑÊõ¥Êñ∞Ê¨°Êï∞„ÄÇ&lt;/li&gt; &#xA; &lt;li&gt;Êñ∞Â¢ûÂ§úÈó¥ÊûÑÂª∫tagÔºåÂè™‰ºöÊé®ÈÄÅÂà∞ &lt;code&gt;vergilgao/mdc&lt;/code&gt;Âíå &lt;code&gt;ghcr.io/vergilgao/mdc&lt;/code&gt;ÔºåÊ≠§tagÂ∞Ü‰øùÊåÅÊØèÂë®‰∏ÄÊ¨°ÁöÑÊõ¥Êñ∞È¢ëÁéáÔºåÂπ∂‰∏ç‰øùËØÅ‰ºöÊõ¥Êñ∞Ëá≥ÊúÄÊñ∞Ê∫êÁ†Å„ÄÇ&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;20220209Ôºö&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Êñá‰ª∂ÊåÇËΩΩÁõÆÂΩï‰ªé /app/data Âèò‰∏∫ /data &lt;strong&gt;Breaking Change!&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Â¢ûÂä† PUID PGID ‰∏§‰∏™ÁéØÂ¢ÉÂèòÈáèÔºåÁé∞Âú®‰Ω†ÂèØ‰ª•ÈÄöËøáËÆæÁΩÆËøô‰∏§‰∏™ÁéØÂ¢ÉÂèòÈáèÊù•ÊéßÂà∂Á®ãÂ∫èÂàÆÂâäËé∑ÂèñÂà∞ÁöÑÊñá‰ª∂ÊùÉÈôêÔºåÊ≥®ÊÑèÔºåÁ®ãÂ∫èÂêØÂä®ÂêéÂêåÊó∂‰πü‰ºöÁî®Ëøô‰∏§‰∏™ÁéØÂ¢ÉÂèòÈáèËÆæÁΩÆÊï¥‰∏™ÊåÇËΩΩÁõÆÂΩïÁöÑÊâÄÊúâÊñá‰ª∂ÁöÑÊùÉÈôêÔºÅ‰∏§‰∏™ÁéØÂ¢ÉÂèòÈáèÁöÑÈªòËÆ§ÂÄºÂùá‰∏∫ 666 &lt;strong&gt;Âº∫ÁÉàÊé®ËçêËÆæÁΩÆËøô‰∏§‰∏™ÁéØÂ¢ÉÂèòÈáè&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;ÈïúÂÉè‰ªéÊ∫ê‰ª£Á†ÅËøêË°åÊîπ‰∏∫‰∫Ü‰ΩøÁî® alpine ËøêË°å‰∫åËøõÂà∂ &lt;strong&gt;‰ªÖÊµãËØï‰∫Üx64ÁéØÂ¢ÉÔºåÂÖ∂‰ªñÁéØÂ¢ÉÂ¶ÇÊûúÊúâÈóÆÈ¢òËØ∑ÂèëissueÂèçÈ¶à&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;ÊµãËØï&lt;/h2&gt; &#xA;&lt;p&gt;È¶ñÂÖà‰Ω†ÂèØ‰ª•ÊµãËØï‰∏Ä‰∏ãÁ®ãÂ∫èÊòØÂê¶ÂèØÁî®„ÄÇ&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker pull ghcr.io/vergilgao/mdc:latest&#xA;mkdir test&#xA;dd if=/dev/zero of=&#34;./test/MIFD-046.mp4&#34; bs=250MB count=1&#xA;docker run --rm --name mdc_test -it -v ${PWD}/test:/data -v ${PWD}/config:/config -e UID=$(stat -c %u test) -e GID=$(stat -c %g test) ghcr.io/vergilgao/mdc:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;ÁÑ∂Âêé‰Ω†‰ºöÁúãÂà∞Â¶Ç‰∏ãËæìÂá∫Ôºö&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;---Setup Timezone to Asia/Shanghai---&#xA;---Checking if UID: 1000 matches user---&#xA;usermod: no changes&#xA;---Checking if GID: 1000 matches user---&#xA;usermod: no changes&#xA;---Setting umask to 002---&#xA;---Taking ownership of data...---&#xA;Checking if config file exist&#xA;Starting...&#xA;[*]================= Movie Data Capture =================&#xA;[*]                        6.2.1&#xA;[*]======================================================&#xA;[*] - Linux-5.4.0-110-generic-x86_64-with&#xA;[*] - x86_64 - Python-3.9.13&#xA;[*]======================================================&#xA;[*] - ‰∏•Á¶ÅÂú®Â¢ôÂÜÖÂÆ£‰º†Êú¨È°πÁõÆ -&#xA;[*]======================================================&#xA;[+]Start at 2022-05-26 15:12:30&#xA;[+]Load Config file &#39;/config/mdc.ini&#39;.&#xA;[+]Main Working mode ## 1: Scraping ## , nfo_skip_days=30&#xA;[+]Find 1 movies.&#xA;[*]======================================================&#xA;[!]                - 100.% [1/1] -             15:12:31&#xA;[!] [MIFD-046] As Number Processing for &#39;/data/Âæ°ÂùÇ„Çä„ÅÇ/MIFD-046/MIFD-046.mp4&#39;&#xA;[+]Find movie [MIFD-046] metadata on website &#39;javbus&#39;&#xA;[+]Image Downloaded! MIFD-046-fanart.jpg&#xA;[+]Image Cutted!     MIFD-046-poster.jpg&#xA;[+]Wrote!            JAV_output/Âæ°ÂùÇ„Çä„ÅÇ/MIFD-046/MIFD-046.nfo&#xA;[*]======================================================&#xA;[+]Deleting empty folder /data/JAV_output/Âæ°ÂùÇ„Çä„ÅÇ/MIFD-046/extrafanart&#xA;[+]Deleting empty folder /data/failed&#xA;[+]Running time 0:00:17.748  End at 2022-05-26 15:12:47&#xA;[+]All finished!!!&#xA;Log file &#39;/config/.mlogs/mdc_20220526T151229.txt&#39; saved.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Á°ÆËÆ§Á®ãÂ∫èÊ≤°ÊúâÈóÆÈ¢òÂêéÊääÊµãËØïÊï∞ÊçÆÂà†ÊéâÂ∞±Â•Ω‰∫Ü„ÄÇ&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;rm -rf test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;dockerÁéØÂ¢ÉÂèòÈáè&lt;/h2&gt; &#xA;&lt;p&gt;Êú¨ÈïúÂÉèÂ¢ûÂä†‰∫ÜÊùÉÈôêËÆæÁΩÆÂäüËÉΩÔºå‰Ω†ÂèØ‰ª•ÈÄöËøá‰ΩøÁî® UID (Áî®Êà∑id) GID (ÁªÑid) ‰∏§‰∏™ÁéØÂ¢ÉÂèòÈáèÊù•ÈÖçÁΩÆÁ®ãÂ∫èËøêË°åÂêéÊâÄÊúâÊñá‰ª∂ÁöÑÊùÉÈôê„ÄÇ&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Â≠óÊÆµÂêç&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;ÂÄºËØ≠‰πâ&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;È¢ÑËÆæÂÄº&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;UID&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;uid&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;99&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;GID&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;gid&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;100&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;UMASK&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;dataÁõÆÂΩïÁöÑumask&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;002&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;TZ&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;ÂÆπÂô®ÂÜÖÊó∂Èó¥Âå∫Âüü&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Asia/Shanghai&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Á®ãÂ∫èËøêË°åÊó∂ÈÖçÁΩÆ&lt;/h2&gt; &#xA;&lt;h3&gt;Êò†Â∞Ñmdc.iniÊñá‰ª∂&lt;/h3&gt; &#xA;&lt;p&gt;ÂÅáËÆæ‰Ω†ÁöÑmdc.iniÊñá‰ª∂Â≠òÊîæÂú®ÂΩìÂâçÁõÆÂΩïÁöÑconfigÂ≠êÁõÆÂΩï‰∏ã„ÄÇ&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker run --rm -it \&#xA;  --name mdc_test \&#xA;  -v ${PWD}/test:/data \&#xA;  -v ${PWD}/config:/config \&#xA;  -e PUID=1000&#xA;  -e PGID=1000&#xA;  vergilgao/mdc:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Á®ãÂ∫èÂ∞ÜÂú®ÂêØÂä®Êó∂Ê£ÄÊµãÊòØÂê¶Â≠òÂú®ÈÖçÁΩÆÊñá‰ª∂ÔºåÂ¶ÇÊûú‰∏çÂ≠òÂú®ÔºåÂ∞Ü‰ºöÂú®configÊò†Â∞ÑÁõÆÂΩï‰∏ãÂàõÂª∫ÔºåÂπ∂‰∏îÈÄÄÂá∫„ÄÇËØ∑‰øÆÊîπÈÖçÁΩÆÊñá‰ª∂ÂêéÂÜçÊ¨°ÂêØÂä®Á®ãÂ∫è„ÄÇ&lt;/p&gt; &#xA;&lt;h3&gt;ÁéØÂ¢ÉÂèòÈáèÈÖçÁΩÆÔºàÂ∑≤Â∫üÂºÉÔºâ&lt;/h3&gt; &#xA;&lt;h2&gt;Â§úÈó¥ÊûÑÂª∫ÁâàÊú¨ÔºàÂ∑≤ÊöÇÂÅúÔºâ&lt;/h2&gt; &#xA;&lt;p&gt;Êú¨‰ªìÂ∫ìÊØèÂë®‰∏ÄÊ¨°‰ΩøÁî®ÂΩìÊó∂ÁöÑÊúÄÊñ∞‰∏äÊ∏∏Ê∫êÁ†ÅÊûÑÂª∫Ôºåtag‰∏∫nightlyÔºå‰Ω†ÂèØ‰ª•ÈÄâÊã©ÊãâÂèñ &lt;code&gt;vergilgao/mdc:nightly&lt;/code&gt;Âíå &lt;code&gt;ghcr.io/vergilgao/mdc:nightly&lt;/code&gt;ËøõË°åÊµãËØïÔºåÊ≥®ÊÑèÊ≠§tag‰ªÖÁî®‰∫éÊµãËØïÔºåÂπ∂‰∏ç‰øùËØÅ‰ºöÊõ¥Êñ∞Ëá≥ÊúÄÊñ∞Ê∫êÁ†ÅÔºåÊõ¥‰∏ç‰øùËØÅÂäüËÉΩÁöÑÁ®≥ÂÆöÊÄß„ÄÇ Ê≠§Â§ñÔºåÁî±‰∫éÈÖçÁΩÆÊñá‰ª∂ÂÖºÂÆπÊÄßÈóÆÈ¢òÔºåÈªòËÆ§ÊÉÖÂÜµ‰∏ãÔºåÂ§úÈó¥ÊûÑÂª∫ÁâàÊú¨‰ºöÂøΩÁï•‰º†ÂÖ•ÁöÑÈÖçÁΩÆÊñá‰ª∂ÁéØÂ¢ÉÂèòÈáèÔºå‰ΩøÁî®Â§úÈó¥ÊûÑÂª∫ÁâàÊú¨Âº∫ÁÉàÂª∫ËÆÆËá™Ë°åÊò†Â∞ÑÈÖçÁΩÆÊñá‰ª∂„ÄÇ&lt;/p&gt; &#xA;&lt;h2&gt;ÊûÑÂª∫ÔºàÂºÄÂèë‰∫∫ÂëòÔºåÊûÑÂª∫ÊñπÂºèÂ∑≤ÁªèÂèëÁîüÂèòÂåñÔºåÁ≠âÂæÖË°•ÂÖÖ‰øÆÊîπÔºâ&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cd docker-mdc&#xA;docker build -t mdc --build-arg MDC_VERSION=&#34;6.0.1&#34; ./&#xA;&#xA;mkdir test&#xA;dd if=/dev/zero of=&#34;./test/MIFD-046.mp4&#34; bs=250MB count=1&#xA;docker run --rm --name mdc_test -it -v ${PWD}/test:/data -e UID=$(stat -c %u test) -e GID=$(stat -c %g test) vergilgao/mdc:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Áî≥Êòé&lt;/h2&gt; &#xA;&lt;p&gt;ÂΩì‰Ω†Êü•ÈòÖ„ÄÅ‰∏ãËΩΩ‰∫ÜÊú¨È°πÁõÆÊ∫ê‰ª£Á†ÅÊàñ‰∫åËøõÂà∂Á®ãÂ∫èÔºåÂç≥‰ª£Ë°®‰Ω†Êé•Âèó‰∫Ü‰ª•‰∏ãÊù°Ê¨æ&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Êú¨ËΩØ‰ª∂‰ªÖ‰æõÊäÄÊúØ‰∫§ÊµÅÔºåÂ≠¶ÊúØ‰∫§ÊµÅ‰ΩøÁî®&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;ËØ∑ÂãøÂú®Â¢ôÂÜÖÁöÑÁ§æ‰∫§Âπ≥Âè∞‰∏äÂÆ£‰º†Ê≠§È°πÁõÆ&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Êú¨ËΩØ‰ª∂‰ΩúËÄÖÁºñÂÜôÂá∫ËØ•ËΩØ‰ª∂Êó®Âú®Â≠¶‰π† Python ÔºåÊèêÈ´òÁºñÁ®ãÊ∞¥Âπ≥&lt;/li&gt; &#xA; &lt;li&gt;Êú¨ËΩØ‰ª∂‰∏çÊèê‰æõ‰ªª‰ΩïÂΩ±Áâá‰∏ãËΩΩÁöÑÁ∫øÁ¥¢&lt;/li&gt; &#xA; &lt;li&gt;Áî®Êà∑Âú®‰ΩøÁî®Êú¨ËΩØ‰ª∂ÂâçÔºåËØ∑Áî®Êà∑‰∫ÜËß£Âπ∂ÈÅµÂÆàÂΩìÂú∞Ê≥ïÂæãÊ≥ïËßÑÔºåÂ¶ÇÊûúÊú¨ËΩØ‰ª∂‰ΩøÁî®ËøáÁ®ã‰∏≠Â≠òÂú®ËøùÂèçÂΩìÂú∞Ê≥ïÂæãÊ≥ïËßÑÁöÑË°å‰∏∫ÔºåËØ∑Âãø‰ΩøÁî®ËØ•ËΩØ‰ª∂&lt;/li&gt; &#xA; &lt;li&gt;Áî®Êà∑Âú®‰ΩøÁî®Êú¨ËΩØ‰ª∂Êó∂ÔºåËã•Áî®Êà∑Âú®ÂΩìÂú∞‰∫ßÁîü‰∏ÄÂàáËøùÊ≥ïË°å‰∏∫Áî±Áî®Êà∑ÊâøÊãÖ&lt;/li&gt; &#xA; &lt;li&gt;‰∏•Á¶ÅÁî®Êà∑Â∞ÜÊú¨ËΩØ‰ª∂‰ΩøÁî®‰∫éÂïÜ‰∏öÂíå‰∏™‰∫∫ÂÖ∂‰ªñÊÑèÂõæ&lt;/li&gt; &#xA; &lt;li&gt;Ê∫ê‰ª£Á†ÅÂíå‰∫åËøõÂà∂Á®ãÂ∫èËØ∑Âú®‰∏ãËΩΩÂêé24Â∞èÊó∂ÂÜÖÂà†Èô§&lt;/li&gt; &#xA; &lt;li&gt;Âá∫ÂîÆÊ∫êÁ†ÅËÄÖÁöÑÊØç‰∫≤‰ºöÂçáÂ§©&lt;/li&gt; &#xA; &lt;li&gt;Êú¨È°πÁõÆÂèëËµ∑ËÄÖyoshiko2‰øùÁïôÊúÄÁªàÂÜ≥ÂÆöÊùÉÂíåÊúÄÁªàËß£ÈáäÊùÉ&lt;/li&gt; &#xA; &lt;li&gt;Ëã•Áî®Êà∑‰∏çÂêåÊÑè‰∏äËø∞Êù°Ê¨æ‰ªªÊÑè‰∏ÄÊù°ÔºåËØ∑Âãø‰ΩøÁî®Êú¨ËΩØ‰ª∂&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;When you view and download the source code or binary program of this project, it means that you have accepted the following terms&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;This software is only for technical exchange and academic exchange&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Please do not promote this project on popular social platforms&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;The software author wrote this software to learn Python and improve programming&lt;/li&gt; &#xA; &lt;li&gt;This software does not provide any clues for video download&lt;/li&gt; &#xA; &lt;li&gt;Before using this software, please understand and abide by local laws and regulations. If there is any violation of local laws and regulations during the use of this software, * please do not use this software&lt;/li&gt; &#xA; &lt;li&gt;When the user uses this software, if the user has any illegal acts in the local area, the user shall bear&lt;/li&gt; &#xA; &lt;li&gt;It is strictly forbidden for users to use this software for commercial and personal intentions&lt;/li&gt; &#xA; &lt;li&gt;Please delete the source code and binary program within 24 hours after downloading&lt;/li&gt; &#xA; &lt;li&gt;The mother of the source seller will die&lt;/li&gt; &#xA; &lt;li&gt;The author of this software yoshiko2 reserves the right of final decision and final interpretation&lt;/li&gt; &#xA; &lt;li&gt;If the user does not agree with any of the above terms, please do not use this software&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Êú¨„Éó„É≠„Ç∏„Çß„ÇØ„Éà„ÅÆ„ÇΩ„Éº„Çπ„Ç≥„Éº„Éâ„ÄÅ„Éê„Ç§„Éä„É™„Éï„Ç°„Ç§„É´„Çí„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ„ÄÅ„Åæ„Åü„ÅØË°®Á§∫„Åô„Çã„Åó„Åü„ÅÜ„Åà„Åß„ÄÅ„ÅÇ„Å™„Åü„ÅØÊú¨Ë¶èÁ¥Ñ„Å´ÂêåÊÑè„Åó„Åü„ÇÇ„ÅÆ„Å®Ë¶ã„Å™„Åó„Åæ„Åô„ÄÇ&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;„Åì„ÅÆ„ÇΩ„Éï„Éà„Ç¶„Çß„Ç¢„ÅØ„ÄÅÈñãÁô∫ÊäÄË°ìÂ≠¶Áøí„Åô„Çã„Åì„Å®„ÅÆ„Åø„Å´‰ΩøÁî®„Åß„Åç„Åæ„Åô„ÄÇ&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;„ÇΩ„Éº„Ç∑„É£„É´„É°„Éá„Ç£„Ç¢„ÅßÊú¨„Éó„É≠„Ç∏„Çß„ÇØ„Éà„ÅÆÂÆ£‰ºù„Çí„ÅîÈÅ†ÊÖÆ„Åè„Å†„Åï„ÅÑ&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;‰ΩúËÄÖ„ÅØPython„ÅÆÂãâÂº∑„Å®ÊäÄË°ìÂäõ„ÅÆÂêë‰∏ä„ÅÆ„Åü„ÇÅ„Å´„ÄÅ„Åì„ÅÆ„ÇΩ„Éï„Éà„Ç¶„Çß„Ç¢„Çí‰ΩúÊàê„Åó„Åæ„Åó„Åü&lt;/li&gt; &#xA; &lt;li&gt;Êú¨„ÇΩ„Éï„Éà„Ç¶„Çß„Ç¢„ÅØ„ÄÅ„ÅÇ„Çâ„ÇÜ„ÇãÂãïÁîª„ÉÄ„Ç¶„É≥„É≠„Éº„ÉâÊ©üËÉΩ‰∏ÄÂàáÊèê‰æõ„Åó„Åæ„Åõ„Çì&lt;/li&gt; &#xA; &lt;li&gt;Êú¨„ÇΩ„Éï„Éà„Ç¶„Çß„Ç¢„Çí‰ΩøÁî®„Åô„ÇãÂâç„Å´„ÄÅÁèæÂú∞„ÅÆÊ≥ïÂæãË¶èÁØÑ„Çí„Çà„ÅèÁêÜËß£„Åô„ÇãÂøÖË¶Å„Åå„ÅÇ„Çä„Åæ„Åô„ÄÇ„ÅÇ„Å™„Åü„ÅØ„ÄÅÈÅ©Áî®„Åï„Çå„ÇãÁèæÂú∞„ÅÆÊ≥ï‰ª§„ÇíÈ†ÜÂÆà„Åô„ÇãË≤¨‰ªª„ÇíË≤†„ÅÑ„Åæ„Åô&lt;/li&gt; &#xA; &lt;li&gt;Êú¨„ÇΩ„Éï„Éà„Ç¶„Çß„Ç¢„Çí‰ΩøÁî®„Åó„ÅüÁµêÊûúÁîü„Åò„ÅüÊêçÂÆ≥„ÇÑÊ≥ïÁöÑË≤¨‰ªª„Å´„Å§„Åç„Åæ„Åó„Å¶‰ΩúËÄÖ„ÅØ‰∏ÄÂàáË≤¨‰ªª„ÇíË≤†„ÅÑ„Åæ„Åõ„Çì&lt;/li&gt; &#xA; &lt;li&gt;Êú¨„ÇΩ„Éï„Éà„Ç¶„Çß„Ç¢„ÇíÂïÜÁî®„ÄÅÊ•≠Âãô„ÄÅ„Åù„ÅÆ‰ªñ„ÅÆÂñ∂Âà©ÁõÆÁöÑ„ÅÆ„Åü„ÇÅ„Å´‰ΩøÁî®„Åô„Çã„Åì„Å®„ÅØ‰∏ÄÂàáÁ¶ÅÊ≠¢„Åó„Åæ„Åô„ÄÇ&lt;/li&gt; &#xA; &lt;li&gt;Êú¨„Éó„É≠„Ç∏„Çß„ÇØ„Éà„ÅÆ„ÇΩ„Éº„Çπ„Ç≥„Éº„Éâ„ÄÅ„Éê„Ç§„Éä„É™„Éï„Ç°„Ç§„É´„Çí„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ„Åó„ÅüÂ†¥Âêà„ÄÅ24ÊôÇÈñì‰ª•ÂÜÖ„Å´ÂâäÈô§„Åó„Å¶„Åè„Å†„Åï„ÅÑ&lt;/li&gt; &#xA; &lt;li&gt;ÂÖÉÂ£≤„ÇäÊâã„ÅÆÊØçË¶™„ÅåÂ§©„Å´Âè¨„Åï„Çå„Çã&lt;/li&gt; &#xA; &lt;li&gt;ÊúÄÁµÇËß£ÈáàÊ®©„ÅØ‰ΩúËÄÖyoshiko2„Å´Â±û„Åó„Åæ„Åô&lt;/li&gt; &#xA; &lt;li&gt;Êú¨Ë¶èÁ¥Ñ„Åä„Çà„Å≥„Åô„Åπ„Å¶„ÅÆÈÅ©Áî®Ê≥ï„ÄÅË¶èÁ¥Ñ„Åä„Çà„Å≥Ë¶èÂâá„ÇíÈÅµÂÆà„Åô„ÇãÂ†¥Âêà„Å´„ÅÆ„ÅøÊú¨„ÇΩ„Éï„Éà„Ç¶„Çß„Ç¢„Çí‰ΩøÁî®„Åô„Çã„Åì„Å®„Åå„Åß„Åç„Åæ„Åô&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>chadmcrowell/linux-docker</title>
    <updated>2022-07-16T01:38:45Z</updated>
    <id>tag:github.com,2022-07-16:/chadmcrowell/linux-docker</id>
    <link href="https://github.com/chadmcrowell/linux-docker" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Linux and Docker&lt;/h1&gt; &#xA;&lt;h2&gt;PART ONE (one hour)&lt;/h2&gt; &#xA;&lt;h3&gt;Linux OS and file system&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The Operating system is the intermediary between the applications and the hardware running on your local machine&lt;/li&gt; &#xA; &lt;li&gt;An operating system can have a GUI or NOT (servers usually don&#39;t have GUI)&lt;/li&gt; &#xA; &lt;li&gt;Each OS takes up RAM, CPU &amp;amp; Storage&lt;/li&gt; &#xA; &lt;li&gt;RAM is used for running processes, if you run out, there&#39;s SWAP which turns disk storage into RAM&lt;/li&gt; &#xA; &lt;li&gt;CPU is running one application at a time (dual core or quad core)&lt;/li&gt; &#xA; &lt;li&gt;Storage is the files stored in directories&lt;/li&gt; &#xA; &lt;li&gt;Operating system has a kernel which manages the CPU, RAM, Storage&lt;/li&gt; &#xA; &lt;li&gt;Variation of the kernel is the distro (ubutnu, debian, redhat, fedora, etc.)&lt;/li&gt; &#xA; &lt;li&gt;POSIX&lt;/li&gt; &#xA; &lt;li&gt;GNU/Linux&lt;/li&gt; &#xA; &lt;li&gt;NOTE: you don&#39;t interact with these regularly, the package manager or executable will automatically store files in various locations for you&lt;/li&gt; &#xA; &lt;li&gt;There are hidden files that you don&#39;t see (start with a .)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;/&#xA;/home # home directories and files from users&#xA;/bin # user command binaries (cat, echo, etc.)&#xA;/sbin # system binaries (need sudo)&#xA;/usr # user &#xA;/usr/bin # primary executables that system needs in order to run&#xA;/usr/local # programs installed just for that user&#xA;/lib # when executables in /bin need additional library files in order to run&#xA;/var # variable data (temporary)&#xA;/var/log # logs are stored here usually for 30 days&#xA;/var/log/syslog # system logs&#xA;/var/cache # cached data from programs&#xA;/opt # programs that install everything in one direcotry (not separated in /bin and /lib)&#xA;/etc # system wide configurations&#xA;/etc/fstab # controls how different filesystems are treated each time they are introduced to a system&#xA;/etc/hosts # used to translate hostnames to IP-addresses. &#xA;/etc/hostname # name of the machine&#xA;/etc/sudoers # who can act as the super user (sudo)&#xA;/tmp # temporary location for running processes&#xA;/boot # do not touch - for booting the system&#xA;/dev # devices configurations like mouse and keyboard&#xA;/media # devices like CD or usb drive auto mounts here&#xA;/mnt # temporary mount points for additional filesystems&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;CHALLENGE 1&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Using commands inside the terminal, Find out what operating system you are running&lt;/li&gt; &#xA; &lt;li&gt;Find where the system log (syslog) is in Linux. View the file once found.&lt;/li&gt; &#xA; &lt;li&gt;create new user named &#34;chris&#34; with bash as default shell&lt;/li&gt; &#xA; &lt;li&gt;create new group named &#34;devops&#34; and add &#34;chris&#34; to it&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd /&#xA;pwd&#xA;ls&#xA;&#xA;# find the release info&#xA;lsb_release -a&#xA;cat /etc/os-release&#xA;uname -a&#xA;lscpu&#xA;lsmem&#xA;&#xA;# find syslog&#xA;find / -name &#39;syslog&#39;&#xA;find / -iname &#39;syslog&#39;&#xA;&#xA;# change directory to where syslog is&#xA;cd /var/log/&#xA;&#xA;# view the syslog&#xA;cat /var/log/syslog&#xA;cat /var/log/syslog | less&#xA;&#xA;# view default options for new users&#xA;# bash is command language interpreter&#xA;man useradd&#xA;useradd -D&#xA;&#xA;# change from Bourne shell to Bourne Again SHell&#xA;useradd -D -s /bin/bash&#xA;&#xA;# what shell am I running&#xA;echo $0&#xA;echo $SHELL&#xA;&#xA;# all available shells&#xA;cat /etc/shells&#xA;&#xA;# adduser chris # will prompt for password and other info&#xA;useradd -m chris&#xA;&#xA;# create user and add a home directory&#xA;# useradd -m chad&#xA;# useradd -m newuser&#xA;&#xA;# create password&#xA;passwd chris&#xA;&#xA;# Add User to Sudo Group&#xA;usermod -aG sudo chris&#xA;&#xA;# switch to user&#xA;su - chris&#xA;&#xA;# add group&#xA;groupadd docker&#xA;&#xA;# get group info&#xA;getent group docker&#xA;&#xA;# add your user to the docker group&#xA;sudo usermod -aG docker $USER&#xA;&#xA;# what groups user is in&#xA;groups chris&#xA;cat /etc/group&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;COMMANDS &amp;amp; PACKAGE MANAGERS&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# man pages for everything&#xA;man curl&#xA;man ping&#xA;man grep&#xA;man ls&#xA;&#xA;# present working directory&#xA;pwd&#xA;&#xA;# use bash shell&#xA;bash&#xA;&#xA;# to user home dir&#xA;cd&#xA;cd ..&#xA;cd /usr/local/bin&#xA;cd ../..&#xA;&#xA;# clear the terminal&#xA;clear&#xA;&#xA;# ls&#xA;ls&#xA;ls -al&#xA;ls -R /home&#xA;&#xA;# alias&#xA;alias&#xA;alias k=kubectl&#xA;alias d=docker&#xA;&#xA;# find what user you are logged in as&#xA;whoami&#xA;echo $USER&#xA;&#xA;hostname&#xA;&#xA;# go to previous command up and down arrows&#xA;# use reverse search with cmd + R&#xA;# also see all history&#xA;history&#xA;history 10&#xA;&#xA;groups &#xA;&#xA;# add group&#xA;sudo groupadd docker&#xA;sudo addgroup devops&#xA;getent group devops&#xA;&#xA;# delete user&#xA;userdel chad&#xA;&#xA;# delete user from group&#xA;gpasswd -d chad devops&#xA;&#xA;# get numeric ID‚Äôs (UID or group ID) of the current user&#xA;id&#xA;id root&#xA;&#xA;# You can find the UID in the /etc/passwd file&#xA;cat /etc/passwd&#xA;&#xA;# from left to right&#xA;# Name, Password (indicated with the letter (x)), UID (User ID), GID (Group ID), Gecos ‚Äì Contain general information about the user and can be empty, Home directory, Shell ‚Äì The path to the default shell for the user.&#xA;&#xA;# A UID (user identifier) is a number assigned by Linux to each user on the system. This number is used to identify the user to the system and to determine which system resources the user can access.&#xA;# UID 0 (zero) is reserved for the root.&#xA;# Groups in Linux are defined by GIDs (group IDs).&#xA;# GID 0 (zero) is reserved for the root group.&#xA;&#xA;&#xA;# change user&#xA;su - chad&#xA;su -&#xA;&#xA;&#xA;&#xA;# bash history contains all command history&#xA;&#xA;vim /etc/sudoers&#xA;sudo !!&#xA;&#xA;# ENVIRONMENT VARIABLES&#xA;APP_VERSION=v2&#xA;&#xA;# view all environment variables&#xA;env&#xA;printenv&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;CHALLENGE 2&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;change the prompt for your user to &#34;MyNewPrompt $ &#34;&lt;/li&gt; &#xA; &lt;li&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# change prompt&#xA;vim .bashrc&#xA;PS1=&#34;MyNewPrompt $ &#34;&#xA;source .bashrc&#xA;&#xA;# create directory&#xA;cd ~&#xA;cd $HOME&#xA;cd&#xA;mkdir dir1&#xA;mkdir -p dir1&#xA;&#xA;# move or rename&#xA;# mv dir1 mynewdirectory&#xA;&#xA;# copy&#xA;cp -r dir1 dir2&#xA;&#xA;# delete directory&#xA;rm -r dir2&#xA;&#xA;# create file&#xA;# touch file1.txt&#xA;# touch file1.txt file3.txt&#xA;# touch dir1/{file4.txt,file3.txt}&#xA;touch dir1/file1.txt&#xA;cp dir1/file1.txt dir1/file2.txt&#xA;mv dir1/file2.txt dir1/file3.txt&#xA;&#xA;# cat file&#xA;# cat file1.txt&#xA;&#xA;# copy&#xA;# cp file1.txt file2.txt&#xA;&#xA;# delete file&#xA;# rm file1.txt&#xA;&#xA;# On Ubuntu and all other Debian based distributions, the apt software repositories are defined in the /etc/apt/sources.list file or in separate files under the /etc/apt/sources.list.d/ directory.&#xA;# The names of the repository files inside the /etc/apt/sources.list.d/ directory must end with .list.&#xA;cat /etc/apt/sources.list&#xA;ls /etc/apt/ # see sources.list.d&#xA;&#xA;# update packages&#xA;# package manager helps with installing software and all dependencies&#xA;apt update&#xA;sudo !!&#xA;&#xA;# apt search python&#xA;# apt install -y python3&#xA;# apt remove -y python3&#xA;&#xA;# see the tree structure&#xA;# apt install tree &amp;amp;&amp;amp; tree -L 1&#xA;&#xA;# docker pre-requisites &#xA;sudo apt install -y ca-certificates \&#xA;curl \&#xA;gnupg \&#xA;lsb-release&#xA;&#xA;# GPG, or GNU Privacy Guard, is a public key cryptography implementation. This allows for the secure transmission of information between parties and can be used to verify that the origin of a message is genuine&#xA;# apt-key is a program that is used to manage a keyring of gpg keys for secure apt.&#xA;sudo mkdir -p /etc/apt/keyrings&#xA;curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg&#xA;&#xA;# When installing packages using apt the packages are downloaded from one or more apt software repositories. &#xA;# An APT repository is a network server or a local directory containing deb packages and metadata files that are readable by the APT tools.&#xA;# While there are thousands of application available in the default Ubuntu repositories, sometimes you may need to install software from a 3rd party repository.&#xA;&#xA;# add docker 3rd party repository&#xA;echo \&#xA;&#34;deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \&#xA;$(lsb_release -cs) stable&#34; | sudo tee /etc/apt/sources.list.d/docker.list &amp;gt; /dev/null&#xA;&#xA;# pull down packages locally&#xA;apt search docker-ce&#xA;sudo apt update&#xA;apt search docker-ce&#xA;&#xA;# install  Docker Engine, containerd, and Docker Compose&#xA;sudo apt install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin&#xA;&#xA;# show docker-ce package metadata from repository&#xA;# madison is the name of the Debian archive management tool used for all debian and debian-like distros&#xA;# apt-cache madison docker-ce&#xA;&#xA;# install a specific version&#xA;# sudo apt install -y docker-ce=5:20.10.17~3-0~ubuntu-focal docker-ce-cli=5:20.10.17~3-0~ubuntu-focal containerd.io docker-compose-plugin&#xA;&#xA;# verify its all working&#xA;docker run hello-world&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;VIM, PERMISSIONS &amp;amp; PIPES&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;command mode&lt;/li&gt; &#xA; &lt;li&gt;insert mode&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;:q  # quit&#xA;:w  # write&#xA;:wq # write and quit&#xA;:q! # quit without saving&#xA;:wq! # write and quit by force&#xA;command + ^ # beginning of line&#xA;command + $ # end of line&#xA;gg   # top of file&#xA;G    # bottom of file (last line)&#xA;i&#x9; # Insert at cursor (goes into insert mode)&#xA;A&#x9; # Write at the end of line (goes into insert mode)&#xA;ESC&#x9; # get out of insert mode&#xA;u&#x9; # Undo last change&#xA;U&#x9; # Undo all changes to the entire line&#xA;o&#x9; # Open a new line (goes into insert mode)&#xA;dd&#x9; # Delete line&#xA;D&#x9; # Delete contents of line after the cursor&#xA;C&#x9; # Delete contents of a line after the cursor and insert new text. Press ESC key to end insertion.&#xA;dw&#x9; # Delete word&#xA;4dw&#x9; # Delete 4 words&#xA;cw&#x9;# Change word&#xA;~&#x9;# Change case of individual character&#xA;:set nu # view line numbers&#xA;:set paste # paste without auto-indent&#xA;:set nopaste # paste with auto-indent&#xA;&#xA;tail -5 $HOME/.bashrc&#xA;tail -5 /etc/passwd&#xA;head -5 $HOME/.bashrc&#xA;head -5 /etc/passwd&#xA;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;CHALLENGE 3&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# pipe to less&#xA;# cat /var/log/syslog | less&#xA;# cat /var/log/syslog | grep file&#xA;cat /var/log/syslog | grep ubuntu | less&#xA;&#xA;# pipe to a file&#xA;# history | grep ls &amp;gt; commands.txt&#xA;# history | grep history &amp;gt;&amp;gt; commands.txt&#xA;&#xA;# create script&#xA;vim script.sh&#xA;# type bash&#xA;&#xA;# change ownership of file&#xA;# chown chad:root file1.txt&#xA;&#xA;# change just the user&#xA;# chown chad file1.txt&#xA;&#xA;# change just the group&#xA;# chgrp root file1.txt&#xA;&#xA;# take away write permissions for the group&#xA;# chmod g-w file1.txt&#xA;&#xA;# give executable permission to the group&#xA;# chmod g+x file1.txt&#xA;&#xA;# give owner permission to execute&#xA;ls -al # verify chris is owner&#xA;chmod u+x script.sh&#xA;ls -al # verify change&#xA;&#xA;# give other permissions to execute&#xA;# chmod o+x script.sh&#xA;&#xA;# give executable for all&#xA;# chmod +x script.sh&#xA;&#xA;vim script.sh&#xA;# copy and paste from this &#xA;&#xA;./script.sh&#xA;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;LINUX SERVICES &amp;amp; GIT&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# running processes by user&#xA;ps -u chad | grep firefox&#xA;ps -u chris | grep bash&#xA;&#xA;# find process for firefox&#xA;pgrep firefox&#xA;pgrep bash&#xA;&#xA;# kill the firefox process (after running previous command)&#xA;kill 2376 # default SIGTERM&#xA;&#xA;# see all kill signals&#xA;kill -l&#xA;&#xA;# stop a process (SIGSTOP)&#xA;kill -19 2376&#xA;&#xA;# interrupt a process (SIGINT)&#xA;kill -2 2376&#xA;&#xA;# kill forcefully (SIGKILL)&#xA;kill -9 2376&#xA;&#xA;# kill all the proccesses by name (SIGKILL)&#xA;pkill -9 firefox&#xA;&#xA;# see running processes by cpu usage&#xA;top&#xA;&#xA;# see running processes by cpu&#xA;htop&#xA;&#xA;# stop a foreground process&#xA;ping -c 1000 google.com # hit enter, then while running press ctrl + z&#xA;&#xA;# view the foreground process you stopped&#xA;jobs&#xA;&#xA;# change foreground process into backgrond process&#xA;bg 1 # where 1 is the job number (from jobs command)&#xA;&#xA;# change background process into a foreground process&#xA;fg 1 # where 1 is the job number (from jobs command)&#xA;&#xA;# start a background process&#xA;ping -c 300 hackthebox.eu &amp;amp;&#xA;&#xA;# running processes form all users&#xA;ps -aux&#xA;&#xA;# process tree with systemd at the top&#xA;pstree&#xA;&#xA;# systemd process is process #1&#xA;ps -aux | grep systemd&#xA;&#xA;# stop ssh service&#xA;sudo systemctl stop sshd&#xA;&#xA;# ssh status &#xA;sudo systemctl status sshd&#xA;&#xA;# start ssh service&#xA;sudo systemctl start sshd&#xA;&#xA;# restart sshd&#xA;sudo systemctl restart sshd&#xA;&#xA;# reload &#xA;sudo systemctl reload sshd&#xA;&#xA;# reload or restart (let system chose)&#xA;sudo systemctl reload-or-restart sshd&#xA;&#xA;# stop ntp when system boots&#xA;sudo systemctl disable ntp&#xA;&#xA;# start when system boots up&#xA;sudo systemctl enable ntp&#xA;&#xA;# if ntp daemon is active&#xA;sudo systemctl is-active ntp&#xA;&#xA;# check if enabled&#xA;sudo systemctl is-enabled ntp&#xA;&#xA;# list active services&#xA;sudo systemctl list-units&#xA;&#xA;# list only service type daemons&#xA;sudo systemctl list-units -t service&#xA;&#xA;# list active and inactive daemons&#xA;sudo systemctl list-units --all&#xA;&#xA;# list daemons NOT loaded into memory&#xA;sudo systemctl list-unit-files | grep nginx&#xA;&#xA;# get status of nginx&#xA;sudo systemctl status nginx&#xA;&#xA;# enable nginx&#xA;sudo systemctl enable nginx&#xA;&#xA;# check if nginx is enabled&#xA;sudo systemctl is-enabled nginx&#xA;&#xA;# start nginx&#xA;sudo systemctl start nginx&#xA;&#xA;# check status of nginx.service (full name)&#xA;sudo systemctl status nginx.service&#xA;&#xA;# check logs for nginx&#xA;sudo journalctl -xe&#xA;&#xA;# check for journalctl unit (daemon)&#xA;sudo systemctl list-units | grep journal&#xA;&#xA;# restart journald daemon&#xA;sudo systemctl restart systemd-journald&#xA;&#xA;&#xA;#########################################################&#xA;############### GIT #####################################&#xA;#########################################################&#xA;&#xA;# Configuring user information used across all local repositories&#xA;git config --global user.name ‚Äú[firstname lastname]‚Äù&#xA;&#xA;# set an email address that will be associated with each history marker&#xA;git config --global user.email ‚Äú[valid-email]‚Äù&#xA;&#xA;# initialize an existing directory as a Git repository&#xA;git init&#xA;&#xA;# retrieve an entire repository from a hosted location via URL&#xA;git clone [url]&#xA;&#xA;# show modified files in working directory, staged for your next commit&#xA;git status&#xA;&#xA;# add a file as it looks now to your next commit (stage)&#xA;git add [file]&#xA;&#xA;# unstage a file while retaining the changes in working directory&#xA;git reset [file]&#xA;&#xA;# diff of what is changed but not staged&#xA;git diff&#xA;&#xA;# diff of what is staged but not yet commited&#xA;git diff --staged&#xA;&#xA;# commit your staged content as a new commit snapshot&#xA;git commit -m ‚Äú[descriptive message]‚Äù&#xA;&#xA;# list your branches. a * will appear next to the currently active branch&#xA;git branch&#xA;&#xA;# create a new branch at the current commit&#xA;git branch [branch-name]&#xA;&#xA;# switch to another branch and check it out into your working directory&#xA;git checkout&#xA;&#xA;# create branch and switch to it&#xA;git checkout -b newbranch&#xA;&#xA;# merge the specified branch‚Äôs history into the current one&#xA;git merge newbranch&#xA;&#xA;# show all commits in the current branch‚Äôs history&#xA;git log&#xA;&#xA;# show the commit history for the currently active branch&#xA;git log&#xA;&#xA;# show the commits on branchA that are not on branchB&#xA;git log branchB..branchA&#xA;&#xA;# show the commits that changed file, even across renames&#xA;git log --follow [file]&#xA;&#xA;# show the diff of what is in branchA that is not in branchB&#xA;git diff branchB...branchA&#xA;&#xA;# show any object in Git in human-readable format&#xA;git show [SHA]&#xA;&#xA;# delete the file from project and stage the removal for commit&#xA;git rm [file]&#xA;&#xA;# change an existing file path and stage the move&#xA;git mv [existing-path] [new-path]&#xA;&#xA;# add a git URL as an alias&#xA;git remote add origin [url]&#xA;&#xA;# fetch down all the branches from that Git remote&#xA;git fetch origin&#xA;&#xA;# merge a remote branch into your current branch to bring it up to date&#xA;git merge origin/main&#xA;&#xA;# Transmit local branch commits to the remote repository branch&#xA;git push origin main&#xA;&#xA;# fetch and merge any commits from the tracking remote branch&#xA;git pull&#xA;&#xA;# apply any commits of current branch ahead of specified one&#xA;git rebase [branch]&#xA;&#xA;# clear staging area, rewrite working tree from specified commit&#xA;git reset --hard [commit]&#xA;&#xA;# Save modified and staged changes&#xA;git stash&#xA;&#xA;# list stack-order of stashed file changes&#xA;git stash list&#xA;&#xA;# write working from top of stash stack&#xA;git stash pop&#xA;&#xA;# discard the changes from top of stash stack&#xA;git stash drop&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;CHALLENGE 4&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# list services running for all users&#xA;ps -aux&#xA;ps -aux | grep chris&#xA;&#xA;# list only service type daemons&#xA;sudo systemctl list-units -t service&#xA;&#xA;# install nginx&#xA;sudo apt install nginx&#xA;&#xA;# list daemons NOT loaded into memory&#xA;sudo systemctl list-unit-files | grep nginx&#xA;&#xA;# get status of nginx&#xA;sudo systemctl status nginx&#xA;&#xA;# enable nginx&#xA;# sudo systemctl enable nginx&#xA;&#xA;# check if nginx is enabled&#xA;# sudo systemctl is-enabled nginx&#xA;&#xA;# stop nginx&#xA;sudo systemctl stop nginx&#xA;&#xA;# start nginx&#xA;sudo systemctl start nginx&#xA;&#xA;sudo systemctl restart nginx&#xA;&#xA;# journalctl is a command-line tool for viewing logs collected by systemd. &#xA;# The systemd-journald service is responsible for log collection, &#xA;# retrieves messages from the kernel, systemd services, and other sources.&#xA;sudo journalctl -xe&#xA;&#xA;mkdir -p newrepo&#xA;&#xA;cd newrepo &#xA;&#xA;git init&#xA;&#xA;touch file1.txt&#xA;&#xA;git add file1.txt&#xA;&#xA;git commit -m &#34;initial commit&#34;&#xA;&#xA;git status&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;PART TWO (two hours)&lt;/h2&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;VMS &amp;amp; CONTAINERS&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;you can install a hypervisor on your desktop/laptop (type 2 hypervisor)&lt;/li&gt; &#xA; &lt;li&gt;you can remove the OS layer and use ESXi or Hyper-V (type 1 hypervisor)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;CHALLENGE 5&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Create a new cgroup, using cgroups limit the memory allowed for a container&lt;/li&gt; &#xA; &lt;li&gt;create a new namespace in UTS and PID. The the root filesystem for the system.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&#xA;# types of cgroups on the system&#xA;ls /sys/fs/cgroup/&#xA;&#xA;# look at memory cgroup&#xA;ls /sys/fs/cgroup/memory/&#xA;&#xA;# all processes will use this cgroup by default&#xA;# to use a different cgroup beside the default, you must create a new and assign the process to it&#xA;&#xA;# create a new cgroup and assign a process to it&#xA;cd /sys/fs/cgroup&#xA;mkdir memory/chad&#xA;ls memory/chad/&#xA;&#xA;# the maximum a cgroup is allowed is &#39;memory.limit_in_bytes&#39;&#xA;&#xA;# use lscgroup utility to see cgroups from the host side&#xA;&#xA;# compare memory cgroups before and after starting a new container with runc&#xA;# first, take a snapshot of before we make a change&#xA;cd&#xA;apt install -y cgroup-tools&#xA;lscgroup memory:/ &amp;gt; before.memory&#xA;&#xA;# start a new container&#xA;docker container run --detach --name nginx nginx&#xA;&#xA;# take an after snapshot&#xA;lscgroup memory:/ &amp;gt; after.memory&#xA;&#xA;# compare&#xA;diff before.memory after.memory&#xA;&#xA;# this is relative to the root of the memory cgroup&#xA;# inspect cgroup from the host&#xA;cd /sys/fs/cgroup/memory/&#xA;ls system.slice/docker-3076b152051a7543f4724f8950a55f84828387e30170f08e3804c03936566799.scope/&#xA;&#xA;# from inside the container, the list of its own cgroups is aviailble from the /proc directory&#xA;docker exec -it nginx bash&#xA;# from inside run &#39;cat /proc/$$/cgroup&#39;&#xA;&#xA;# notice (on last line) that the memory cgroup is exactly what you found on the host&#xA;# once we have the cgroup name, we can modify the parameters&#xA;&#xA;# see how the mem limit is &#xA;cat system.slice/docker-3076b152051a7543f4724f8950a55f84828387e30170f08e3804c03936566799.scope/memory.limit_in_bytes&#xA;&#xA;# by default, no limit, so this number represents all memory available to host machine (overall)&#xA;&#xA;# this is a problem because a single container can use up all memory if it wants (if memory leak)&#xA;&#xA;# limit the memory for a container&#xA;docker rm -f nginx&#xA;docker container run --detach -m 6MB --name nginx nginx&#xA;docker exec -it nginx bash&#xA;# from inside run &#39;cat /proc/$$/cgroup&#39;&#xA;# exit&#xA;&#xA;# cd&#xA;# lscgroup memory:/ &amp;gt; after.memory&#xA;# diff before.memory after.memory&#xA;# cd /sys/fs/cgroup/memory/&#xA;&#xA;cat system.slice/docker-653e68c52719eff5aa7f6e29f7b17aa2a0a7a2cd6ab6375148e5502021fe121f.scope/memory.limit_in_bytes&#xA;&#xA;# see the change in memory limit&#xA;&#xA;# assign a process to a cgroup by write the process ID to the cgroups.procs file for that cgroup&#xA;&#xA;# get the PID for the container&#xA;docker container top # 46981&#xA;&#xA;# change memory limit for cgroup&#xA;cd chad&#xA;echo 6291456 &amp;gt; memory.limit_in_bytes&#xA;cat memory.limit_in_bytes&#xA;&#xA;# assign PID to cgroup&#xA;echo 46981 &amp;gt; cgroup.procs&#xA;&#xA;# cat out what memory cgroup is assinged to that process&#xA;cat /proc/46981/cgroup | grep memory&#xA;&#xA;######################################################&#xA;&#xA;# NAMESPACES&#xA;&#xA;&#xA;#######################################################&#xA;&#xA;# by putting a process in a namespace, you can restrict the resources that are visible to that process&#xA;&#xA;# a process has exactly one namespace of each type&#xA;# see the namespaces &#xA;lsns&#xA;&#xA;# for non-root users, ns list may be incomplete&#xA;sudo lsns&#xA;&#xA;# use namespaces to create something that behaves like a container&#xA;# start with the UTS namespace (handles hostname and domain names)&#xA;# put a process in it&#39;s own UTS namespace, to change it&#39;s hostname (different than host)&#xA;hostname&#xA;&#xA;# run a container to get a random ID for the hostname (not the name of the container)&#xA;docker container run --rm -it --name hello ubuntu bash&#xA;# inside container run &#39;hostname&#39;&#xA;# inside container run &#39;exit&#39;&#xA;&#xA;# you can change the hostname of the container&#xA;# using the unshare command, you can create a process that has a UTS namespace of its own&#xA;sudo unshare --uts sh&#xA;hostname&#xA;hostname experiment&#xA;hostname&#xA;exit&#xA;&#xA;# this ran a sh shell in a new process that has a new UTS namespace (not effect host)&#xA;hostname&#xA;&#xA;# isolate process IDs&#xA;# run ps inside a container to get list of processes only running inside the container&#xA;docker container run --rm -it --name hello ubuntu bash&#xA;# inside container run &#39;ps -eaf&#39;&#xA;&#xA;# this is because of the process ID namespace&#xA;# PID namespace restricts the PIDs you can see&#xA;&#xA;# use unshare to create new pid namespace&#xA;sudo unshare --pid sh&#xA;# run &#39;whoami&#39;&#xA;# run &#39;whoami&#39;&#xA;# run &#39;whoami&#39;&#xA;# run &#39;ls&#39;&#xA;&#xA;# this did not work because it created a new PID with every command (following the process heirarchy)&#xA;&#xA;# view process heirarchy by opening a new tab (second terminal) while the unshare cmd is running in the first&#xA;ps fa&#xA;&#xA;# the sh process is a child of the sudo process&#xA;# get around this by using the --fork&#xA;sudo unshare --pid --fork sh&#xA;# run &#39;whoami&#39;&#xA;# run &#39;whoami&#39;&#xA;&#xA;# no problem running the command multiple times&#xA;&#xA;# view process heirarchy (in second terminal)&#xA;ps fa&#xA;&#xA;# the fork version is a chile of unshare&#xA;&#xA;# from the first terminal, run ps&#xA;ps&#xA;ps -eaf&#xA;&#xA;# still showing processes on the entire host because it reads virtual files in /proc&#xA;&#xA;# look at the /proc dir to see why&#xA;ls /proc&#xA;&#xA;# every number refererences a different PID&#xA;# /proc/&amp;lt;pid&amp;gt;/exe is a symbolic link to the executable&#xA;ps&#xA;ls /proc/32440&#xA;ls -l /proc/32440/exe&#xA;&#xA;# /proc is under root, so it&#39;s giving us PID under root (all of them instead of just for our namespace)&#xA;# this means that there needs to be a separate copy of /proc to return information only inside new namespace (because /proc is under root)&#xA;&#xA;# change the root directory with chroot&#xA;# docker does this automatically &#xA;# this moves the root directory for a process to point to a different location within the filesystem (not /proc)&#xA;# first, you must grab a filesystem to run /bin/bash and other command executables&#xA;cd&#xA;mkdir alpine&#xA;cd alpine&#xA;curl -o alpine.tar.gz http://dl-cdn.alpinelinux.org/alpine/v3.16/releases/x86_64/alpine-minirootfs-3.16.0-x86_64.tar.gz&#xA;tar -xvf alpine.tar.gz&#xA;rm alpine.tar.gz&#xA;cd ..&#xA;&#xA;# you now have a copy of the alpine filesystem&#xA;# use chroot to move into the alpine directory&#xA;sudo chroot alpine ls&#xA;&#xA;# only the child process &#39;ls&#39; got it&#39;s own root directory &#xA;&#xA;# try again with running a shell as a child process&#xA;sudo chroot alpine sh&#xA;ls&#xA;ls /home&#xA;exit&#xA;&#xA;# this changes the root for a process just like a container&#xA;&#xA;# run chroot in a new namespace&#xA;sudo unshare --pid --fork chroot alpine sh&#xA;&#xA;# ps will now show the processes just inside the PID namespace&#xA;# first mount proc as pseudofilesystem of type proc, independent from proc on host&#xA;mount -t proc proc proc&#xA;ps&#xA;exit&#xA;&#xA;&#xA;# Mount Namespaces&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;DOCKER&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# docker version&#xA;docker version&#xA;&#xA;docker info &#xA;&#xA;docker # get a list of all commands, diff btwn mgmt commands&#xA;&#xA;docker container run --detach --publish 8800:80 httpd&#xA;&#xA;curl localhost:8800&#xA;&#xA;docker container run --detach --publish 8801:80 httpd&#xA;&#xA;docker container ls # two running containers&#xA;&#xA;# each container has it&#39;s own netns&#xA;&#xA;docker container stop &amp;lt;containerID&amp;gt;&#xA;&#xA;docker container ls -a&#xA;&#xA;docker container run --detach --publish 8080:80 --name web01 nginx&#xA;&#xA;docker container logs web01&#xA;&#xA;docker container top web01&#xA;&#xA;docker container --help&#xA;&#xA;docker container rm &amp;lt;container-id&amp;gt; &amp;lt;container-id&amp;gt; &amp;lt;container-ID&amp;gt; # 3 diff containers&#xA;&#xA;# if one container is running, you&#39;ll get error&#xA;&#xA;docker container ls&#xA;&#xA;docker container rm -f &amp;lt;container-ID&amp;gt;&#xA;&#xA;docker container ls -a&#xA;&#xA;# a container is just a process&#xA;&#xA;docker container run --name mongo --detach mongo&#xA;&#xA;docker container ls&#xA;&#xA;docker container top mongo # list running processes in container&#xA;&#xA;ps -aux | grep mongod # look for mongod process&#xA;&#xA;docker container stop mongo&#xA;&#xA;docker container ls&#xA;&#xA;docker container top mongo # container is not running&#xA;&#xA;ps -aux | grep mongod # the process is no longer there&#xA;&#xA;docker container top nginx&#xA;&#xA;docker container inspect nginx&#xA;&#xA;docker container stats # info for all containers&#xA;&#xA;docker container stats --help&#xA;&#xA;docker container ls&#xA;&#xA;docker container run -it --name proxy nginx bash&#xA;&#xA;# inside container run &#39;ls -al&#39;&#xA;&#xA;# inside container run &#39;exit&#39;&#xA;&#xA;docker container ls -a # command column says &#34;bash&#34;&#xA;&#xA;docker container run -it --name ubuntu ubuntu&#xA;&#xA;# inside container run &#39;apt update&#39;&#xA;&#xA;# inside container run &#39;apt install -y curl&#39;&#xA;&#xA;# inside container run &#39;exit&#39;&#xA;&#xA;docker container start -ai ubuntu # start a stopped container again&#xA;&#xA;# &#39;a&#39; is attach and &#39;i&#39; is tty&#xA;&#xA;# inside container run &#39;curl google.com&#39;&#xA;&#xA;# inside container run &#39;exit&#39;&#xA;&#xA;docker container start --help&#xA;&#xA;docker container exec --help&#xA;&#xA;docker container run --detach --publish 3306:3306 --name mysql --env MYSQL_RANDOM_ROOT_PASSWORD=yes mysql # docker container logs to find password&#xA;&#xA;# get a shell to a container that&#39;s already running (previously only got a shell on startup)&#xA;&#xA;docker container exec -it mysql bash&#xA;&#xA;# inside container run &#39;ps -aux&#39;&#xA;&#xA;# inside container run &#39;exit&#39;&#xA;&#xA;docker container ls # didn&#39;t effect the running container (didn&#39;t stop it)&#xA;&#xA;docker pull alpine&#xA;&#xA;docker image ls # see size of images (alpine smaller than ubuntu)&#xA;&#xA;docker container run -it alpine bash # will error because bash not found in container&#xA;&#xA;docker container run -it alpine sh&#xA;&#xA;# inside container run &#39;apk&#39;&#xA;&#xA;# inside container run &#39;exit&#39;&#xA;&#xA;docker container port nginx&#xA;&#xA;&#xA;&#xA;docker container run --rm -it centos:7 bash&#xA;# in container run &#39;yum update curl&#39;&#xA;# in container run &#39;curl --version&#39;&#xA;# in container run &#39;exit&#39;&#xA;&#xA;docker container run --rm -it ubuntu:20.04 bash&#xA;# in container run &#39;apt update &amp;amp;&amp;amp; apt install -y curl&#xA;# in container run &#39;curl --version&#39;&#xA;# in container run &#39;exit&#39;&#xA;&#xA;docker container ls -a # they are both gone due to --rm&#xA;&#xA;docker network create dude&#xA;&#xA;docker container run -d --net dude --net-alias search elasticsearch:2&#xA;&#xA;docker container run -d --net dude --net-alias search elasticsearch:2&#xA;&#xA;docker container ls&#xA;&#xA;docker container run --rm --net dude alpine:3.10 nslookup search&#xA;&#xA;docker container run --rm --net dude centos curl -s search:9200&#xA;&#xA;docker container run --rm --net dude centos curl -s search:9200 # should get a different response due to rount robin dns&#xA;&#xA;docker image ls&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;CHALLENGE 6&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Run two containers together, one uses the image for apache and the other uses the image for nginx. stop and remove containers after.&lt;/li&gt; &#xA; &lt;li&gt;Run a container from the mysql image and use the environment variable on startup to set a db password. Retreive the password from the logs&lt;/li&gt; &#xA; &lt;li&gt;Get a bash shell to a container using the image centos:7. update the package manager. stop the container when you exit the bash shell.&lt;/li&gt; &#xA; &lt;li&gt;Run a container with mongo image. Get the running process ID for a container. Compare that PID to the PID on the local workstation.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&#xA;docker # get a list of all commands, diff btwn mgmt commands&#xA;&#xA;docker version&#xA;&#xA;docker info&#xA;&#xA;docker container run --detach --name apache --publish 8080:80 httpd&#xA;&#xA;docker container ls&#xA;&#xA;# try 8080 again&#xA;docker container run --detach --name nginx --publish 80:80 nginx&#xA;&#xA;curl localhost&#xA;&#xA;curl localhost:8080&#xA;&#xA;docker container stop apache nginx&#xA;&#xA;docker container rm apache nginx&#xA;&#xA;# run -it &#xA;docker container run --rm -it centos:7 bash&#xA;# in container run &#39;yum update&#39;, then exit&#xA;&#xA;&#xA;docker container ls -a # they are both gone due to --rm&#xA;&#xA;# a container is just a process&#xA;docker container run --name mongo --detach mongo&#xA;&#xA;docker container ls&#xA;&#xA;docker container top mongo # list running processes in container&#xA;&#xA;ps -aux | grep mongod # look for mongod process&#xA;&#xA;docker container stop mongo&#xA;&#xA;docker container ls&#xA;&#xA;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;DOCKER IMAGES&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&#xA;docker pull nginx&#xA;&#xA;# union file system - making layers &#xA;&#xA;docker history nginx:latest&#xA;&#xA;# containers start with a layer called &#34;scratch&#34;&#xA;&#xA;# copy on write - when changes to the base image, container updated in real time, but base image never changes&#xA;docker history mysql # see the copy on write &#xA;&#xA;docker image inspect nginx&#xA;&#xA;docker image tag --help&#xA;&#xA;# tag an image and uplaod it to dockerhub&#xA;&#xA;docker pull mysql/mysql-server&#xA;&#xA;docker image ls&#xA;&#xA;docker pull nginx:mainline&#xA;&#xA;docker image tag nginx:latest chadmcrowell/nginx:1.50&#xA;&#xA;docker image tag --help&#xA;&#xA;docker image ls&#xA;&#xA;docker image push chadmcrowell/nginx:1.50&#xA;&#xA;docker login&#xA;&#xA;cat .docker/config.json&#xA;&#xA;docker image push chadmcrowell/nginx:1.50&#xA;&#xA;docker image tag nginx:latest chadmcrowell/nginx:1.55 # notice that it says &#34;layers already exist&#34;&#xA;&#xA;# just because you tag an image, doesn&#39;t mean that it changes the image ID&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;CHALLENGE 7&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;pull down three images python, busybox, and redis. look at the history of that image&lt;/li&gt; &#xA; &lt;li&gt;tag an image with a the format of your-name/image-name&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&#xA;docker pull python&#xA;&#xA;docker pull busybox&#xA;&#xA;docker pull redis&#xA;&#xA;# containers start with a layer called &#34;scratch&#34;&#xA;&#xA;# copy on write - when changes to the base image, container updated in real time, but base image never changes&#xA;docker history python # see the copy on write&#xA;&#xA;docker history busybox&#xA;&#xA;docker history redis&#xA;&#xA;docker image ls&#xA;&#xA;docker image tag python:latest chadmcrowell/python:1.50&#xA;docker image tag busybox:latest chadmcrowell/busybox:1.20&#xA;docker image tag redis:latest chadmcrowell/redis:1&#xA;&#xA;docker image tag --help&#xA;&#xA;docker image ls&#xA;&#xA;docker image tag python:latest chadmcrowell/python:1.55 # notice that it says &#34;layers already exist&#34;&#xA;&#xA;# just because you tag an image, doesn&#39;t mean that it changes the image ID&#xA;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Dockerfile&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;example dockerfile: &lt;a href=&#34;https://docs.docker.com/get-started/02_our_app/&#34;&gt;https://docs.docker.com/get-started/02_our_app/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&#xA;# build image (Dockerfile has to be in current dir)&#xA;docker image build -t custom .&#xA;&#xA;docker image build -t custom . # rebuilds with a change to a line in the Dockerfile (e.g. add expose port 8080)&#xA;&#xA;# keep the things that change the most at the bottom of the dockerfile for a faster build&#xA;&#xA;docker container run -p 80:80 --rm nginx&#xA;&#xA;docker image build -t nginx-with-html .&#xA;&#xA;docker container run -p 80:80 --rm nginx-with-html&#xA;&#xA;docker image ls&#xA;&#xA;docker image tag nginx-with-html:latest chadmcrowell/nginx-with-html:1.0&#xA;&#xA;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;CHALLENGE 8&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Build a Dockerfile that would allow you to build an image customizing the nginx welcome page&lt;/li&gt; &#xA; &lt;li&gt;Build your own image with the given requirements.&lt;/li&gt; &#xA; &lt;li&gt;Push the container to the dockerhub image registry&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&#xA;# build an index.html&#xA;vim index.html&#xA;&#xA;vim Dockerfile&#xA;&#xA;# start with nginx:latest, then set WORKDIR, then COPY index.html to index.html&#xA;&#xA;# pull down the code&#xA;git clone https://github.com/docker/getting-started.git&#xA;&#xA;cd getting-started/app&#xA;&#xA;vim Dockerfile&#xA;&#xA;# start with node:12-alpine&#xA;# run &#39;apk add --no-cache python2 g++ make&#39; inside the container&#xA;# the working directory is /app&#xA;# copy all the contents from the current directory into the container&#xA;# run &#39;yarn install --production&#39; inside the container&#xA;# command &#39;[&#34;node&#34;, &#34;src/index.js&#34;]&#39;&#xA;# expose port 3000&#xA;&#xA;docker image build -t todo-app .&#xA;&#xA;docker image ls&#xA;&#xA;docker run -d --name todo-app -p 3000:3000 todo-app&#xA;&#xA;docker container ls&#xA;&#xA;# to open the todo app in killercoda:&#xA;# - click in the top right on Traffic / Ports&#xA;# - In custom ports type 3000&#xA;# - click &#34;access&#34;&#xA;&#xA;# push the image to dockerhub&#xA;docker image tag todo-app:latest chadmcrowell/todo-app:1.0&#xA;&#xA;docker image ls&#xA;&#xA;docker login&#xA;&#xA;cat .docker/config.json&#xA;&#xA;docker image push chadmcrowell/todo-app:1.0&#xA;&#xA;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;DOCKER NETWORKING&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&#xA;docker container run -p 80:80 --name webhost -d nginx&#xA;&#xA;docker container port webhost # which ports are forwarding traffic to the container&#xA;&#xA;docker container inspect --format &#39;{{ .NetworkSettings.IPAddress }}&#39; webhost&#xA;&#xA;docker network ls # see the bridge network (default virtual network created with docker)&#xA;&#xA;docker network inspect bridge # list containers attached to this network (bridge network)&#xA;&#xA;docker network ls # host network to attach directly to host&#xA;&#xA;docker network create my_app_net # create new virtual network using bridge driver&#xA;&#xA;docker network ls # uses bridge driver&#xA;&#xA;docker container run -d --name new_nginx --network my_app_net nginx&#xA;&#xA;docker network inspect my_app_net # new container is on that network&#xA;&#xA;docker network --help&#xA;&#xA;docker network connect my_app_net webhost # add a nic to running container named &#34;webhost&#34;&#xA;&#xA;docker container inspect webhost # view new nic on container for my_app_net network&#xA;&#xA;docker network disconnect my_app_net webhost # unplugg the nic&#xA;&#xA;docker container inspect webhost # nic is gone&#xA;&#xA;docker container run -d --name my_nginx --network my_app_net nginx&#xA;&#xA;docker network inspect my_app_net # should see two containers on that network&#xA;&#xA;docker container exec -it my_nginx ping new_nginx # ping no longer comes with nginx image&#xA;&#xA;docker network ls&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;CHALLENGE 9&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Get the IP address of a container&lt;/li&gt; &#xA; &lt;li&gt;Create a new virtual network for a different subset of containers&lt;/li&gt; &#xA; &lt;li&gt;Add a nic to an already running container by adding it to the new network.&lt;/li&gt; &#xA; &lt;li&gt;inspect the network to see which containers are on which network&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&#xA;docker network ls # see the bridge network (default virtual network created with docker)&#xA;&#xA;docker container run -p 80:80 --name proxy -d nginx&#xA;&#xA;docker container port proxy # which ports are forwarding traffic to the container&#xA;&#xA;docker container inspect --format &#39;{{ .NetworkSettings.IPAddress }}&#39; proxy&#xA;&#xA;&#xA;&#xA;docker network inspect bridge # list containers attached to this network (bridge network)&#xA;&#xA;docker network ls # host network to attach directly to host&#xA;&#xA;docker network create my_net # create new virtual network using bridge driver&#xA;&#xA;docker network ls # uses bridge driver&#xA;&#xA;docker network inspect my_net # see the new ip range&#xA;&#xA;docker container ls&#xA;&#xA;docker network --help&#xA;&#xA;docker network connect my_net proxy # add a nic to running container named &#34;webhost&#34;&#xA;&#xA;docker container inspect proxy # view new nic on container for my_network network&#xA;&#xA;docker network ls&#xA;&#xA;docker network inspect bridge&#xA;docker network inspect my_net&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;DOCKER VOLUMES&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&#xA;docker pull mysql&#xA;&#xA;docker image inspect mysql # look for volume &#xA;&#xA;docker container run -d --name mysql -e MYSQL_ALLOW_EMPTY_PASSWORD=yes mysql&#xA;&#xA;docker container ls&#xA;&#xA;docker container inspect mysql # look for volume under mounts&#xA;&#xA;# it&#39;s mounted to /var/lib/docker&#xA;&#xA;docker volume ls&#xA;&#xA;docker volume inspect {hit-tab}&#xA;&#xA;docker container run -d --name mysql2 -e MYSQL_ALLOW_EMPTY_PASSWORD=yes mysql&#xA;&#xA;docker volume ls # no way to tell them apart???&#xA;&#xA;docker container stop mysql&#xA;&#xA;docker container stop mysql2&#xA;&#xA;docker container ls&#xA;&#xA;docker container ls -a&#xA;&#xA;docker volume ls&#xA;&#xA;docker container rm mysql mysql2&#xA;&#xA;docker volume ls # VOLUMES STILL THERE&#xA;&#xA;docker container run -d --name mysql -e MYSQL_ALLOW_EMPTY_PASSWORD=yes -v mysql-db:/var/lib/mysql mysql&#xA;&#xA;docker volume ls # new volume is named&#xA;&#xA;docker volume inspect mysql # friendly name&#xA;&#xA;docker container rm -f mysql&#xA;&#xA;docker container run -d --name mysql3 -e MYSQL_ALLOW_EMPTY_PASSWORD=yes -v mysql-db:/var/lib/mysql mysql&#xA;&#xA;docker volume ls # using the same volume, i DID NOT create a new one&#xA;&#xA;docker container inspect mysql3 # scroll up and look at MOUNTS at the source&#xA;&#xA;# BIND MOUNT&#xA;&#xA;docker container run -d --name nginx -p 80:80 -v ${pwd}:/usr/share/nginx/html nginx # must have index.html in pwd&#xA;&#xA;docker container exec -it nginx bash&#xA;# in container run &#39;cd /usr/share/nginx/html&#39;&#xA;# in container run &#39;ls -al&#39;&#xA;&#xA;# it mapped the whole directory&#xA;&#xA;# any changes will be on the host and on the container all at once&#xA;&#xA;# good for development, so we can work locally and it will impact container&#xA;&#xA;docker container run -d --name postgres -v postgres:/var/lib/postgresql/data postgres:9.6.1&#xA;&#xA;docker container logs -f postgres&#xA;&#xA;docker container stop postgres&#xA;&#xA;docker container run -d --name postgres2 -v postgres:/var/lib/postgresql/data postgres:9.6.2&#xA;&#xA;docker container ps -a&#xA;&#xA;docker volume ls &#xA;&#xA;docker container logs postgres2&#xA;&#xA;&#xA;&#xA;# start an ubuntu container that will create a file named /data.txt with a random number between 1 and 10000&#xA;docker container run -d --name data ubuntu bash -c &#34;shuf -i 1-10000 -n 1 -o /data.txt &amp;amp;&amp;amp; tail -f /dev/null&#34;&#xA;&#xA;# get the output from the data.txt file&#xA;docker container exec data cat /data.txt&#xA;&#xA;# run a second container, there is no /data.txt&#xA;docker container run -it ubuntu ls /&#xA;&#xA;# remove the first container&#xA;docker container rm -f data&#xA;&#xA;# create a persistent volume &#xA;docker volume create todo-db&#xA;&#xA;# list vol&#xA;docker volume ls&#xA;&#xA;# stop the myapp container&#xA;docker container rm -f todo-app&#xA;&#xA;# add the container with volume mount&#xA;docker container run -d --name todo-app -p 3000:3000 -v todo-db:/etc/todos todo-app&#xA;&#xA;# add a few things to the todo app&#xA;&#xA;# to open the todo app in killercoda:&#xA;# - click in the top right on Traffic / Ports&#xA;# - In custom ports type 3000&#xA;# - click &#34;access&#34;&#xA;&#xA;# Stop and remove the container&#xA;docker container rm -f todo-app&#xA;&#xA;docker container ls&#xA;docker container ls -a&#xA;&#xA;# run container again&#xA;docker container run -d --name todo-app -p 3000:3000 -v todo-db:/etc/todos todo-app&#xA;&#xA;# access website to see data persist! &#xA;&#xA;# to open the todo app in killercoda:&#xA;# - click in the top right on Traffic / Ports&#xA;# - In custom ports type 3000&#xA;# - click &#34;access&#34;&#xA;&#xA;docker volume inspect todo-db&#xA;&#xA;# The Mountpoint is the actual location on the disk where the data is stored.&#xA;&#xA;# BIND MOUNTS&#xA;&#xA;# With bind mounts, we control the exact mountpoint on the host&#xA;&#xA;# use a bind mount to mount our source code into the container and see the changes right away&#xA;&#xA;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;CHALLENGE 10&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Create a container based on the mysql image while mounting a volume named mysql-db into the container at /var/lib/mysql. Delete the container and create a new one that accessess the same data.&lt;/li&gt; &#xA; &lt;li&gt;Create a bind mount directly to local mountpoint in /app dir, update the source code, and see the changes in the container immediately. Rebuild the image when done.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker volume ls&#xA;&#xA;docker container run -d --name mysql -e MYSQL_ALLOW_EMPTY_PASSWORD=yes -v mysql-db:/var/lib/mysql mysql&#xA;&#xA;docker volume ls # new volume is named&#xA;&#xA;docker volume inspect mysql-db # friendly name&#xA;&#xA;# the mountpoint is where the data resides locally&#xA;&#xA;&#xA;docker container rm -f mysql&#xA;&#xA;docker volume ls # data is still there (persists)&#xA;&#xA;docker container run -d --name mysql2 -e MYSQL_ALLOW_EMPTY_PASSWORD=yes -v mysql-db:/var/lib/mysql mysql&#xA;&#xA;docker volume ls # using the same volume, i DID NOT create a new one&#xA;&#xA;docker container inspect mysql2 # scroll up and look at MOUNTS at the source&#xA;&#xA;docker container rm -f todo-app&#xA;&#xA;docker container ls -a&#xA;&#xA;# from the gettingstarted/app dir&#xA;docker container run -d --name todo-app -p 3000:3000 -w /app -v &#34;$(pwd):/app&#34; node:12-alpine sh -c &#34;yarn install &amp;amp;&amp;amp; yarn run dev&#34;&#xA;&#xA;# &#39;-w /app&#39; sets the ‚Äúworking directory‚Äù or the current directory that the command will run from&#xA;# &#39;-v &#34;$(pwd):/app&#34;&#39; bind mount the current directory from the host in the container into the /app directory&#xA;# &#39;sh -c &#34;yarn install &amp;amp;&amp;amp; yarn run dev&#34;&#39; Starting a shell using sh (alpine doesn‚Äôt have bash) and running yarn install to install all dependencies and then running yarn run dev. If we look in the package.json, we‚Äôll see that the dev script is starting nodemon.&#xA;&#xA;docker logs todo-app # when you see &#39;listening on 3000&#39; then it&#39;s ready to go&#xA;&#xA;# view the app in a web browser&#xA;&#xA;# In the src/static/js/app.js file, change the ‚ÄúAdd Item‚Äù button to ‚ÄúAdd‚Äù. This change will be on line 109:&#xA;vim src/static/js/app.js # search for &#34;adding&#34;&#xA;&#xA;docker container stop todo-app&#xA;&#xA;docker container ls -a&#xA;&#xA;docker image build -t todo-app .&#xA;&#xA;# using bind mounts like this, we didn&#39;t have to keep rebuilding our image in order to see the changes, we were able to see it in real time&#xA;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Docker compose&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;CHALLENGE 11&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Create two Docker containers by creating a docker compose file. The frontend will use &#39;node:12-alpine&#39; and backend will use mysql&lt;/li&gt; &#xA; &lt;li&gt;Run the docker compose commands to start the multi-container service created in the compose file.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&#xA;# in getting-started/app create docker-compose.yml&#xA;vim docker-compose.yml&#xA;&#xA;# start off by defining the schema version&#xA;&#xA;# define the list of services (or containers) we want to run&#xA;&#xA;# &#xA;&#xA;# FINAL compose file should look like this&#xA;&#xA;# version: &#34;3.7&#34;&#xA;&#xA;# services:&#xA;#   app:&#xA;#     image: node:12-alpine&#xA;#     command: sh -c &#34;yarn install &amp;amp;&amp;amp; yarn run dev&#34;&#xA;#     ports:&#xA;#       - 3000:3000&#xA;#     working_dir: /app&#xA;#     volumes:&#xA;#       - ./:/app&#xA;#     environment:&#xA;#       MYSQL_HOST: mysql&#xA;#       MYSQL_USER: root&#xA;#       MYSQL_PASSWORD: secret&#xA;#       MYSQL_DB: todos&#xA;&#xA;#   mysql:&#xA;#     image: mysql:5.7&#xA;#     volumes:&#xA;#       - todo-mysql-data:/var/lib/mysql&#xA;#     environment:&#xA;#       MYSQL_ROOT_PASSWORD: secret&#xA;#       MYSQL_DATABASE: todos&#xA;&#xA;# volumes:&#xA;#   todo-mysql-data:&#xA;&#xA;&#xA;docker compose up -d&#xA;&#xA;docker compose logs&#xA;&#xA;docker compose --help&#xA;&#xA;docker compose ps&#xA;&#xA;docker compose top&#xA;&#xA;docker compose down &#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;DOCKER SECURITY&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/docker/docker-bench-security&#34;&gt;Docker Bench&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This is intended to be a few hours of workshop where the expectation is to teach linux required for devops - basics commands etc and then moving to VMs&#39; then moving to Docker and then explaing about dokcer , what it is container, installation, main commands, volumes, dockerfile, docker-compose, dockerhub, docker registry,&lt;/p&gt; &#xA;&lt;p&gt;Yeah so basically we need to asume that the attendees have no prior knowledge and you make them understand in detail&lt;/p&gt; &#xA;&lt;p&gt;when you reach the section on how containers work you can refer this video that I made - &lt;a href=&#34;https://youtu.be/buHPsFgpsgU&#34;&gt;https://youtu.be/buHPsFgpsgU&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;similar you can find on dockerfile examples.&lt;/p&gt; &#xA;&lt;p&gt;Docker volume and security is missing which is part of docker 101&lt;/p&gt; &#xA;&lt;p&gt;Now there is no limit to the timings tbh so it totally depends on you which sections you think you can fast forward and which ones you can explain a bit well. I would say minimum 3 hours would be required as docker itself is a huge topic.&lt;/p&gt; &#xA;&lt;p&gt;You can see this all needs to be covered for docker: &lt;a href=&#34;https://youtube.com/playlist?list=PL5uLNcv9SibBZj30yqG01a7A4_MXSyGK3&#34;&gt;https://youtube.com/playlist?list=PL5uLNcv9SibBZj30yqG01a7A4_MXSyGK3&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;1 hr for linux and git 2 hour for docker IMO If I were you I would skip shell scirpt&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://iximiuz.com/en/posts/container-learning-path/&#34;&gt;https://iximiuz.com/en/posts/container-learning-path/&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>