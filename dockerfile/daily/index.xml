<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dockerfile Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-04-04T01:28:31Z</updated>
  <subtitle>Daily Trending of Dockerfile in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>peermetrics/peermetrics</title>
    <updated>2024-04-04T01:28:31Z</updated>
    <id>tag:github.com,2024-04-04:/peermetrics/peermetrics</id>
    <link href="https://github.com/peermetrics/peermetrics" rel="alternate"></link>
    <summary type="html">&lt;p&gt;WebRTC monitoring made easy&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img width=&#34;300px&#34; src=&#34;https://github.com/peermetrics/peermetrics/assets/1862405/f0984648-c4aa-4c3c-86f9-4f3535ec6a9b&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;h1&gt;peer metrics - WebRTC monitoring system&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://makeapullrequest.com&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=flat-square&#34; alt=&#34;PRs Welcome&#34;&gt;&lt;/a&gt;&lt;img src=&#34;https://img.shields.io/github/license/peermetrics/peermetrics&#34; alt=&#34;GitHub License&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The all complete solution to monitor your WebRTC application.&lt;/p&gt; &#xA;&lt;p&gt;peer metrics offers fully open source client SDKs, back-ends and dashboards so you can start collecting metrics get the best idea of what&#39;s working or not.&lt;/p&gt; &#xA;&lt;p&gt;For a hosted version check &lt;a href=&#34;https://peermetrics.io/&#34;&gt;peermetrics.io&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Table of Contents&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/peermetrics/peermetrics/master/#about&#34;&gt;About&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/peermetrics/peermetrics/master/#features&#34;&gt;Features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/peermetrics/peermetrics/master/#how-it-works&#34;&gt;How it works&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/peermetrics/peermetrics/master/#demo&#34;&gt;Demo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/peermetrics/peermetrics/master/#tech-stack&#34;&gt;Tech stack&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/peermetrics/peermetrics/master/#how-to-run-locally&#34;&gt;How to run locally&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/peermetrics/peermetrics/master/#how-to-deploy&#34;&gt;How to Deploy&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/peermetrics/peermetrics/master/#docker&#34;&gt;Docker&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/peermetrics/peermetrics/master/#google-app-engine&#34;&gt;Google app engine&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/peermetrics/peermetrics/master/#development&#34;&gt;Development&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/peermetrics/peermetrics/master/#clone-repos&#34;&gt;Clone repos&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/peermetrics/peermetrics/master/#start-docker&#34;&gt;Start docker&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/peermetrics/peermetrics/master/#start-watcher&#34;&gt;Start watcher&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/peermetrics/peermetrics/master/#how-to-integrate&#34;&gt;How to integrate&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/peermetrics/peermetrics/master/#other&#34;&gt;Other&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/peermetrics/peermetrics/master/#db-migrations&#34;&gt;DB Migrations&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/peermetrics/peermetrics/master/#api-admin&#34;&gt;API Admin&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/peermetrics/peermetrics/master/#dummy-data&#34;&gt;Dummy data&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/peermetrics/peermetrics/master/#css&#34;&gt;CSS&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/peermetrics/peermetrics/master/#faq&#34;&gt;FAQ&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;About&lt;/h2&gt; &#xA;&lt;p&gt;peer metrics is the complete solution to start monitoring your WebRTC implementation.&lt;/p&gt; &#xA;&lt;p&gt;Starting with the &lt;a href=&#34;https://github.com/peermetrics/sdk-js&#34;&gt;javascript SDK&lt;/a&gt; you can integrate with all the major WebRTC libs (Livekit, Mediasoup, Janus, etc.) or your custom implementation.&lt;/p&gt; &#xA;&lt;p&gt;This repo contains the services that are used to ingest and visualize those metrics:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/peermetrics/api&#34;&gt;api&lt;/a&gt;: the ingestion endpoint&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/peermetrics/web&#34;&gt;web&lt;/a&gt;: the visualization service&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;h3&gt;App dashboard&lt;/h3&gt; &#xA;&lt;p&gt;The app dashboard is the best way to get an overview of how the your users are experiencing your app. On top of the usual metrics (browsers, OS, location, etc) you can see the most common issues overall so you know on what to focus.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/peermetrics/peermetrics/assets/1862405/b9a541d9-6793-4e55-b604-c717ccab8edd&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/peermetrics/peermetrics/assets/1862405/f06c88a1-6fca-42a9-879d-aa75947d2f38&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Detailed participant details&lt;/h3&gt; &#xA;&lt;p&gt;Get detailed reports for each participant (how they connected, their devices) and automatically detected issues. &lt;img src=&#34;https://github.com/peermetrics/peermetrics/assets/1862405/ee1a5c6e-794d-4c39-a2dd-1bbb94697440&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Connection timelines&lt;/h3&gt; &#xA;&lt;p&gt;Drilldown into each participant&#39;s connection to get insights about how their connection behaved during the whole call. &lt;img src=&#34;https://github.com/peermetrics/peermetrics/assets/1862405/1849dcf8-abc8-4292-8ef9-a35aed671ef0&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Demo&lt;/h2&gt; &#xA;&lt;p&gt;Try the live &lt;a href=&#34;https://peermetrics.io/how-it-works&#34;&gt;DEMO&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;How it works&lt;/h2&gt; &#xA;&lt;p&gt;peer metrics contains all the components you need to monitor and improve your WebRTC app:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;client SDKs&lt;/strong&gt;: used for collecting metrics from client devices (right now we only support the &lt;a href=&#34;https://github.com/peermetrics/sdk-js&#34;&gt;JavaScript SDK&lt;/a&gt;).&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;ingestion endpoint&lt;/strong&gt;: this is a server where the SDK sends the metrics collected (this is the &lt;a href=&#34;https://github.com/peermetrics/api&#34;&gt;api&lt;/a&gt; service).&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;visualization endpoint&lt;/strong&gt;: used by the dev / customer team to visualize the metrics collected (this is the &lt;a href=&#34;https://github.com/peermetrics/web&#34;&gt;web&lt;/a&gt; service).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The reason for separating into &lt;strong&gt;api&lt;/strong&gt; and &lt;strong&gt;web&lt;/strong&gt; it&#39;s because the services have different scaling needs.&lt;/p&gt; &#xA;&lt;h2&gt;Tech stack&lt;/h2&gt; &#xA;&lt;p&gt;Both &lt;strong&gt;api&lt;/strong&gt; and &lt;strong&gt;web&lt;/strong&gt; have the same backend:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Language: Python 3.8&lt;/li&gt; &#xA; &lt;li&gt;Framework: Django&lt;/li&gt; &#xA; &lt;li&gt;DB: Postgres&lt;/li&gt; &#xA; &lt;li&gt;Template rendering: Jinja2&lt;/li&gt; &#xA; &lt;li&gt;Frontend: VueJS&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How to run locally&lt;/h2&gt; &#xA;&lt;h3&gt;1. Clone repo&lt;/h3&gt; &#xA;&lt;p&gt;Fastest way to get started is to pull this repo and use docker compose&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git pull https://github.com/peermetrics/peermetrics&#xA;cd peermetrics&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;1.1 Run migrations&lt;/h5&gt; &#xA;&lt;p&gt;Before running the containers for the first time we need to run the Django migrations. This is a one time step.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker-compose run api sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And inside the container, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;python manage.py makemigrations app&#xA;python manage.py migrate&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;2. Start docker&lt;/h3&gt; &#xA;&lt;p&gt;Now you can simply start all the containers:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker-compose up&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;How to Deploy&lt;/h2&gt; &#xA;&lt;p&gt;Because peer metrics consists for two services, both need to be deployed independently.&lt;/p&gt; &#xA;&lt;p&gt;This also offers the flexibility to scale them separately.&lt;/p&gt; &#xA;&lt;p&gt;There are multiple ways to deploy peer metrics:&lt;/p&gt; &#xA;&lt;h3&gt;Docker&lt;/h3&gt; &#xA;&lt;p&gt;The recommended way for deploying is to use Docker.&lt;/p&gt; &#xA;&lt;p&gt;There are 2 images on Docker Hub:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;api&lt;/strong&gt;: &lt;code&gt;peermetrics/api&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;web&lt;/strong&gt;: &lt;code&gt;peermetrics/web&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For inspiration on how to use the images with Docker Compose check the files:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;api: &lt;a href=&#34;https://raw.githubusercontent.com/peermetrics/peermetrics/master/docker-compose.api.yaml&#34;&gt;docker-compose.api.yaml&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;web: &lt;a href=&#34;https://raw.githubusercontent.com/peermetrics/peermetrics/master/docker-compose.web.yaml&#34;&gt;docker-compose.web.yaml&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To deploy both containers on the same server look at &lt;a href=&#34;https://raw.githubusercontent.com/peermetrics/peermetrics/master/docker-compose.yaml&#34;&gt;docker-compose.yaml&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Google app engine&lt;/h3&gt; &#xA;&lt;p&gt;You also have the option to deploy the app as a &lt;a href=&#34;https://cloud.google.com/appengine?hl=en&#34;&gt;Google App engine service&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Each service repo has a &lt;code&gt;app_engine.yaml&lt;/code&gt; file that will help you deploy both services to App engine.&lt;/p&gt; &#xA;&lt;p&gt;Check the files for &lt;a href=&#34;https://github.com/peermetrics/web&#34;&gt;web&lt;/a&gt; and &lt;a href=&#34;https://github.com/peermetrics/api&#34;&gt;api&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;p&gt;To start developing peer metrics locally:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;h4&gt;Clone repos&lt;/h4&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Clone this repo:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone https://github.com/peermetrics/peermetrics &amp;amp;&amp;amp; cd peermetrics&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then clone &lt;code&gt;api&lt;/code&gt; and &lt;code&gt;web&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone https://github.com/peermetrics/web&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone https://github.com/peermetrics/api&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt; &lt;h4&gt;Run migrations&lt;/h4&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Before running the containers for the first time we need to run the Django migrations. This is a one time step.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker-compose -f docker-compose.dev.yaml run api sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And inside the container, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;python manage.py makemigrations app&#xA;python manage.py migrate&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt; &lt;h4&gt;Start docker&lt;/h4&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;To start development start Docker using the special dev file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker-compose -f docker-compose.dev.yaml up&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt; &lt;h4&gt;Start watcher&lt;/h4&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Start the watcher for the vue files:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cd web&#xA;npm install&#xA;npm start watch&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;How to integrate&lt;/h2&gt; &#xA;&lt;p&gt;To integrate peer metrics into your WebRTC app you need to follow these steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Deploy the &lt;strong&gt;api&lt;/strong&gt; / &lt;strong&gt;web&lt;/strong&gt; images using Docker or any of the options found in &lt;a href=&#34;https://raw.githubusercontent.com/peermetrics/peermetrics/master/#how-to-deploy&#34;&gt;How to deploy&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Access the &lt;strong&gt;web&lt;/strong&gt; service, create a new organization and app. There will be an API key associated with the new app.&lt;/li&gt; &#xA; &lt;li&gt;Integrate the Javascript SDK following the steps &lt;a href=&#34;https://github.com/peermetrics/sdk-js&#34;&gt;listed here&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;When initializing the JS SDK, use an additional attribute &lt;code&gt;apiRoot&lt;/code&gt; to start using your custom API endpoint.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;For example, if you deployed the &lt;strong&gt;api&lt;/strong&gt; endpoint at &lt;code&gt;api.example.com&lt;/code&gt;, the initializing object will become:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;let peerMetrics = new PeerMetrics({&#xA;    apiRoot: &#39;https://api.example.com/v1&#39;,&#xA;    apiKey: &#39;7090df95cd247f4aa735779636b202&#39;, // api key from the newly created app&#xA;    userId: &#39;1234&#39;,&#xA;    userName: &#39;My user&#39;,&#xA;    conferenceId: &#39;conference-1&#39;,&#xA;    conferenceName: &#39;Conference from 4pm&#39;,&#xA;    appVersion: &#39;1.0.1&#39;&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: very important that &lt;code&gt;apiRoot&lt;/code&gt; is a valid URL and ends with &lt;code&gt;/v1&lt;/code&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;Follow the instructions in the &lt;a href=&#34;https://github.com/peermetrics/sdk-js&#34;&gt;SDK repo&lt;/a&gt; to start collecting metrics.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Other&lt;/h2&gt; &#xA;&lt;h3&gt;DB Migrations&lt;/h3&gt; &#xA;&lt;p&gt;A think to note is that the &lt;strong&gt;api&lt;/strong&gt; container runs the Django migrations automatically when it starts.&lt;/p&gt; &#xA;&lt;p&gt;Details are in the docker compose files.&lt;/p&gt; &#xA;&lt;h3&gt;API Admin&lt;/h3&gt; &#xA;&lt;p&gt;In order to debug conferences, events, etc you can use the Admin section in the &lt;code&gt;api&lt;/code&gt; container.&lt;/p&gt; &#xA;&lt;p&gt;For that, you need to create a superuser:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# sh into the api container&#xA;docker-compose run api sh&#xA;# run the createsuperuser command&#xA;python manage.py createsuperuser --username admin --email admin@admin.com&#xA;# it will ask for you to choose a password&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You&#39;ll also need to collectstatic:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;python manage.py collectstatic --clear --noinput&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Dummy data&lt;/h3&gt; &#xA;&lt;p&gt;If you want to add some dummy data while developping, run this script (last number is the number of past days to populate):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker-compose -f docker-compose.dev.yaml run api python populate_db.py 5&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;CSS&lt;/h3&gt; &#xA;&lt;p&gt;For &lt;strong&gt;web&lt;/strong&gt; you have the following commands:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;compile CSS&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;npm run css&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;start CSS watcher&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;npm run css-watch&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;h4&gt;Why PostgreSQL for data storage?&lt;/h4&gt; &#xA;&lt;p&gt;We believe PostgreSQL is more than suited for the job. It is a very powerful DB and you can get a lot out of it with just vertical scaling. We use PostgreSQL for our production environment and we&#39;ve been really happy with it.&lt;/p&gt; &#xA;&lt;p&gt;The big advantage with this option is that it a well-understood technology, widely supported, cheap to scale, etc.&lt;/p&gt; &#xA;&lt;p&gt;If your team reaches a point where the limiting factor is PostgreSQL, we would love to offer support for other options.&lt;/p&gt; &#xA;&lt;h4&gt;What does the &lt;code&gt;POST_CONFERENCE_CLEANUP&lt;/code&gt; flag do?&lt;/h4&gt; &#xA;&lt;p&gt;The &lt;code&gt;GenericEvent&lt;/code&gt; model takes a big percentage of the data stored in the DB. Drilling down, a big percentage of that is made of &lt;code&gt;stats&lt;/code&gt; events. At the end of the conference, we go through all of those events and create a summary, so the events are not really needed afterwards.&lt;/p&gt; &#xA;&lt;p&gt;This flag will delete all the &lt;code&gt;stats&lt;/code&gt; events for the just ended conference.&lt;/p&gt;</summary>
  </entry>
</feed>