<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dockerfile Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-01-10T01:34:45Z</updated>
  <subtitle>Daily Trending of Dockerfile in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Hacking-the-Cloud/hackingthe.cloud</title>
    <updated>2023-01-10T01:34:45Z</updated>
    <id>tag:github.com,2023-01-10:/Hacking-the-Cloud/hackingthe.cloud</id>
    <link href="https://github.com/Hacking-the-Cloud/hackingthe.cloud" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An encyclopedia for offensive and defensive security knowledge in cloud native technologies.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;hackingthe.cloud &lt;img src=&#34;https://github.com/Hacking-the-Cloud/hackingthe.cloud/workflows/Deploy/badge.svg?sanitize=true&#34; alt=&#34;Deploy&#34;&gt;&lt;/h1&gt; &#xA;&lt;p&gt;Hacking the cloud is an encyclopedia of the attacks/tactics/techniques that offensive security professionals can use on their next cloud exploitation adventure. The goal is to share this knowledge with the security community to better defend cloud environments.&lt;/p&gt; &#xA;&lt;p&gt;All content on this site is created by volunteers. If you&#39;d like to be one of them, you can contribute your knowledge by submitting a &lt;a href=&#34;https://github.com/Hacking-the-Cloud/hackingthe.cloud/pulls&#34;&gt;Pull Request&lt;/a&gt;. We are open to content from any major cloud provider and will also accept cloud-related technologies as well (Docker, Terraform, K8s, etc.). Additionally you are encouraged to update/modify/improve existing pages as well.&lt;/p&gt; &#xA;&lt;p&gt;Topics can include offensive techniques, tools, general knowledge related to cloud security, etc. &lt;strong&gt;Defensive knowledge is also welcome!&lt;/strong&gt; At the end of the day the primary goal is to make the cloud safer, and defenders are welcome to submit content all the same.&lt;/p&gt; &#xA;&lt;p&gt;Don&#39;t worry about submitting content in the wrong format or what section it should be a part of, we can always make improvements later :) When writing content: do try to credit the researcher who discovered it and link to their site/talk.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Please review the &lt;a href=&#34;https://raw.githubusercontent.com/Hacking-the-Cloud/hackingthe.cloud/main/CONTRIBUTING.md&#34;&gt;contributing guidelines&lt;/a&gt; to see how you can add to the site!&lt;/p&gt; &#xA;&lt;h2&gt;Roadmap&lt;/h2&gt; &#xA;&lt;p&gt;Currently the site has some material on AWS, and very little for Azure or GCP. If you have experience in any of those areas you are welcome to submit content. Even something as small as fixing grammar mistakes or adding a screenshot is appreciated!&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>mmicu/python-for-coding-interviews</title>
    <updated>2023-01-10T01:34:45Z</updated>
    <id>tag:github.com,2023-01-10:/mmicu/python-for-coding-interviews</id>
    <link href="https://github.com/mmicu/python-for-coding-interviews" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Python for Coding Interviews&lt;/p&gt;&lt;hr&gt;&lt;hr&gt; &#xA;&lt;h2&gt;title: Python for Coding Interviews subtitle: &lt;a href=&#34;https://github.com/mmicu/python-for-coding-interviews&#34;&gt;https://github.com/mmicu/python-for-coding-interviews&lt;/a&gt; geometry: margin=1in&lt;/h2&gt; &#xA;&lt;h1&gt;Introduction&lt;/h1&gt; &#xA;&lt;p&gt;This guide includes a list of several and useful &lt;code&gt;Python&lt;/code&gt; data structures to know for coding interviews.&lt;/p&gt; &#xA;&lt;p&gt;It is intended to show the main data structures incorporated in the language and their useful functions. More advance &lt;code&gt;Python&lt;/code&gt; features will not be shown here.&lt;/p&gt; &#xA;&lt;p&gt;Additional material:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;strong&gt;Topic&lt;/strong&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;strong&gt;Link&lt;/strong&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Python DS&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.python.org/3/tutorial/datastructures.html&#34;&gt;https://docs.python.org/3/tutorial/datastructures.html&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Python collections&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.python.org/3/library/collections.html&#34;&gt;https://docs.python.org/3/library/collections.html&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Time complexity&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://wiki.python.org/moin/TimeComplexity&#34;&gt;https://wiki.python.org/moin/TimeComplexity&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Index&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mmicu/python-for-coding-interviews/main/#primitive-types&#34;&gt;Primitive Types&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mmicu/python-for-coding-interviews/main/#tuples&#34;&gt;Tuples&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mmicu/python-for-coding-interviews/main/#lists&#34;&gt;Lists&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mmicu/python-for-coding-interviews/main/#strings&#34;&gt;Strings&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mmicu/python-for-coding-interviews/main/#stacks&#34;&gt;Stacks&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mmicu/python-for-coding-interviews/main/#queues&#34;&gt;Queues&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mmicu/python-for-coding-interviews/main/#sets&#34;&gt;Sets&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mmicu/python-for-coding-interviews/main/#hash-tables&#34;&gt;Hash Tables&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mmicu/python-for-coding-interviews/main/#heaps&#34;&gt;Heaps&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mmicu/python-for-coding-interviews/main/#collections&#34;&gt;Collections&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mmicu/python-for-coding-interviews/main/#collectionsnamedtuple&#34;&gt;namedtuple&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mmicu/python-for-coding-interviews/main/#collectionsdefaultdict&#34;&gt;defaultdict&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mmicu/python-for-coding-interviews/main/#collectionscounter&#34;&gt;Counter&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mmicu/python-for-coding-interviews/main/#collectionsordereddict&#34;&gt;OrderedDict&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;\newpage&lt;/p&gt; &#xA;&lt;h2&gt;Primitive Types&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Booleans (&lt;code&gt;bool&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Integers (&lt;code&gt;int&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Floats (&lt;code&gt;float&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Strings (&lt;code&gt;str&lt;/code&gt;).&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Define variables&#xA;&amp;gt;&amp;gt;&amp;gt; b, i, f, s = True, 12, 8.31, &#39;Hello, world!&#39;&#xA;&amp;gt;&amp;gt;&amp;gt; type(b)  # &amp;lt;class &#39;bool&#39;&amp;gt;&#xA;&amp;gt;&amp;gt;&amp;gt; type(i)  # &amp;lt;class &#39;int&#39;&amp;gt;   ~ Unbounded&#xA;&amp;gt;&amp;gt;&amp;gt; type(f)  # &amp;lt;class &#39;float&#39;&amp;gt; ~ Bounded&#xA;&amp;gt;&amp;gt;&amp;gt; type(s)  # &amp;lt;class &#39;str&#39;&amp;gt;&#xA;&#xA;# Type Conversion&#xA;&amp;gt;&amp;gt;&amp;gt; str(i)&#xA;&#39;12&#39;&#xA;&amp;gt;&amp;gt;&amp;gt; float(i)&#xA;12.0&#xA;&amp;gt;&amp;gt;&amp;gt; str(b)&#xA;&#39;True&#39;&#xA;&amp;gt;&amp;gt;&amp;gt; int(&#39;10&#39;)&#xA;10&#xA;&amp;gt;&amp;gt;&amp;gt; int(&#39;10a&#39;)  # `ValueError: invalid literal for int() with base 10: &#39;10a&#39;`&#xA;&#xA;# Operations&#xA;&amp;gt;&amp;gt;&amp;gt; 5 * 2&#xA;10&#xA;&amp;gt;&amp;gt;&amp;gt; 5 * 2.&#xA;10.0&#xA;&amp;gt;&amp;gt;&amp;gt; 5 / 2&#xA;2.5&#xA;&amp;gt;&amp;gt;&amp;gt; 5 // 2  # `//` is the integer division&#xA;2&#xA;&amp;gt;&amp;gt;&amp;gt; 5 % 2&#xA;1&#xA;&#xA;# `min` and `max`&#xA;&amp;gt;&amp;gt;&amp;gt; min(4, 2)&#xA;2&#xA;&amp;gt;&amp;gt;&amp;gt; max(21, 29)&#xA;29&#xA;&#xA;# Some useful math functions&#xA;&amp;gt;&amp;gt;&amp;gt; abs(-1.2)&#xA;1.2&#xA;&amp;gt;&amp;gt;&amp;gt; divmod(9, 4)&#xA;(2, 1)&#xA;&amp;gt;&amp;gt;&amp;gt; 2 ** 3  # Equivalent to `pow(2, 3)`&#xA;8&#xA;&#xA;# Math functions from the `math` package&#xA;&amp;gt;&amp;gt;&amp;gt; import math&#xA;&amp;gt;&amp;gt;&amp;gt; math.ceil(7.2)&#xA;8&#xA;&amp;gt;&amp;gt;&amp;gt; math.floor(7.2)&#xA;7&#xA;&amp;gt;&amp;gt;&amp;gt; math.sqrt(4)&#xA;2.0&#xA;&#xA;# Pseudo lower and upper bounds&#xA;&amp;gt;&amp;gt;&amp;gt; float(&#39;-inf&#39;)  # Pseudo min-int&#xA;-inf&#xA;&amp;gt;&amp;gt;&amp;gt; float(&#39;inf&#39;)  # Pseudo max-int&#xA;inf&#xA;&#xA;# Pseudo lower and upper bounds (Python &amp;gt;= 3.5)&#xA;&amp;gt;&amp;gt;&amp;gt; import math&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; math.inf&#xA;inf&#xA;&amp;gt;&amp;gt;&amp;gt; -math.inf&#xA;-inf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;&lt;code&gt;range&lt;/code&gt; and &lt;code&gt;enumerate&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# `range`&#xA;&amp;gt;&amp;gt;&amp;gt; list(range(3))  # Equivalent to `range(0, 3)`&#xA;[0, 1, 2]&#xA;&amp;gt;&amp;gt;&amp;gt; list(range(1, 10, 2))&#xA;[1, 3, 5, 7, 9]&#xA;&amp;gt;&amp;gt;&amp;gt; for i in range(3): print(i)&#xA;0&#xA;1&#xA;2&#xA;&amp;gt;&amp;gt;&amp;gt; for i in range(2, -1, -1): print(i)  # Equivalent to `reversed(range(3))`&#xA;2&#xA;1&#xA;0&#xA;&#xA;# `enumerate`&#xA;&amp;gt;&amp;gt;&amp;gt; for i, v in enumerate(range(3)): print(i, v)&#xA;0 0&#xA;1 1&#xA;2 2&#xA;&amp;gt;&amp;gt;&amp;gt; for i, v in enumerate(range(3), start=10): print(i, v)&#xA;10 0&#xA;11 1&#xA;12 2&#xA;&#xA;# Reversed `enumerate`&#xA;&amp;gt;&amp;gt;&amp;gt; for i, v in reversed(list(enumerate([&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]))): print(i, v)&#xA;2 c&#xA;1 b&#xA;0 a&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Tuples&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; t = (1, 2, &#39;str&#39;)&#xA;&amp;gt;&amp;gt;&amp;gt; type(t)&#xA;&amp;lt;class &#39;tuple&#39;&amp;gt;&#xA;&amp;gt;&amp;gt;&amp;gt; t&#xA;(1, 2, &#39;str&#39;)&#xA;&amp;gt;&amp;gt;&amp;gt; len(t)&#xA;3&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; t[0] = 10  # Tuples are immutable: `TypeError: &#39;tuple&#39; object does not support item assignment`&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; a, b, c = t  # Unpacking&#xA;&amp;gt;&amp;gt;&amp;gt; a&#xA;1&#xA;&amp;gt;&amp;gt;&amp;gt; b&#xA;2&#xA;&amp;gt;&amp;gt;&amp;gt; c&#xA;&#39;str&#39;&#xA;&amp;gt;&amp;gt;&amp;gt; a, _, _ = t  # Unpacking: ignore second and third elements&#xA;&amp;gt;&amp;gt;&amp;gt; a&#xA;1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Lists&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;Python&lt;/code&gt; uses &lt;code&gt;Timsort&lt;/code&gt; algorithm in &lt;code&gt;sort&lt;/code&gt; and &lt;code&gt;sorted&lt;/code&gt; (&lt;a href=&#34;https://en.wikipedia.org/wiki/Timsort&#34;&gt;https://en.wikipedia.org/wiki/Timsort&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Define a list&#xA;&amp;gt;&amp;gt;&amp;gt; l = [1, 2, &#39;a&#39;]&#xA;&amp;gt;&amp;gt;&amp;gt; type(l)  # &amp;lt;class &#39;list&#39;&amp;gt;&#xA;&amp;gt;&amp;gt;&amp;gt; len(l)&#xA;3&#xA;&amp;gt;&amp;gt;&amp;gt; l[0]  # First element of the list&#xA;1&#xA;&amp;gt;&amp;gt;&amp;gt; l[-1]  # Last element of the list (equivalent to `l[len(l) - 1]`)&#xA;&#39;a&#39;&#xA;&#xA;# Slicing&#xA;&amp;gt;&amp;gt;&amp;gt; l[:]  # `l[start:end]` which means `[start, end)`&#xA;[1, 2, &#39;a&#39;]&#xA;&amp;gt;&amp;gt;&amp;gt; l[0:len(l)]  # `start` is 0 and `end` is `len(l)` if omitted&#xA;[1, 2, &#39;a&#39;]&#xA;&#xA;# Some useful methods&#xA;&amp;gt;&amp;gt;&amp;gt; l.append(&#39;b&#39;)  # `O(1)`&#xA;&amp;gt;&amp;gt;&amp;gt; l.pop()  # `O(1)` just for the last element&#xA;&#39;b&#39;&#xA;&amp;gt;&amp;gt;&amp;gt; l.pop(0)  # `O(n)` since list must be shifted&#xA;1&#xA;&amp;gt;&amp;gt;&amp;gt; l&#xA;[2, &#39;a&#39;]&#xA;&amp;gt;&amp;gt;&amp;gt; l.remove(&#39;a&#39;)  # `O(n)`&#xA;&amp;gt;&amp;gt;&amp;gt; l.remove(&#39;b&#39;)  # `ValueError: list.remove(x): x not in list`&#xA;&amp;gt;&amp;gt;&amp;gt; l&#xA;[2]&#xA;&amp;gt;&amp;gt;&amp;gt; l.index(2)  # It returns first occurrence (`O(n)`)&#xA;0&#xA;&amp;gt;&amp;gt;&amp;gt; l.index(12)  # `ValueError: 12 is not in list`&#xA;&#xA;# More compact way to define a list&#xA;&amp;gt;&amp;gt;&amp;gt; l = [0] * 5&#xA;&amp;gt;&amp;gt;&amp;gt; l&#xA;[0, 0, 0, 0, 0]&#xA;&amp;gt;&amp;gt;&amp;gt; len(l)&#xA;5&#xA;&amp;gt;&amp;gt;&amp;gt; [k for k in range(5)]&#xA;[0, 1, 2, 3, 4]&#xA;&amp;gt;&amp;gt;&amp;gt; [k for k in reversed(range(5))]&#xA;[4, 3, 2, 1, 0]&#xA;&#xA;# Compact way to define 2D arrays&#xA;&amp;gt;&amp;gt;&amp;gt; rows, cols = 2, 3&#xA;&amp;gt;&amp;gt;&amp;gt; m = [[0] * cols for _ in range(rows)]&#xA;&amp;gt;&amp;gt;&amp;gt; len(m) == rows&#xA;True&#xA;&amp;gt;&amp;gt;&amp;gt; all(len(m[k]) == cols for k in range(rows))&#xA;True&#xA;&#xA;# Built-in methods&#xA;&amp;gt;&amp;gt;&amp;gt; l = [3, 1, 2, 0]&#xA;&amp;gt;&amp;gt;&amp;gt; len(l)&#xA;4&#xA;&amp;gt;&amp;gt;&amp;gt; min(l)&#xA;0&#xA;&amp;gt;&amp;gt;&amp;gt; max(l)&#xA;3&#xA;&amp;gt;&amp;gt;&amp;gt; sum(l)&#xA;6&#xA;&amp;gt;&amp;gt;&amp;gt; any(v == 3 for v in l)&#xA;True&#xA;&amp;gt;&amp;gt;&amp;gt; any(v == 5 for v in l)&#xA;False&#xA;&amp;gt;&amp;gt;&amp;gt; all(v &amp;gt;= 0 for v in l)&#xA;True&#xA;&#xA;# Sort list in-place (`sort`)&#xA;&amp;gt;&amp;gt;&amp;gt; l = [10, 2, 0, 1]&#xA;&amp;gt;&amp;gt;&amp;gt; l&#xA;[10, 2, 0, 1]&#xA;&amp;gt;&amp;gt;&amp;gt; l.sort()  # It changes the original list&#xA;&amp;gt;&amp;gt;&amp;gt; l&#xA;[0, 1, 2, 10]&#xA;&amp;gt;&amp;gt;&amp;gt; l.sort(reverse=True)  # It changes the original list&#xA;&amp;gt;&amp;gt;&amp;gt; l&#xA;[10, 2, 1, 0]&#xA;&#xA;# Sort a list a return a new one (`sorted`)&#xA;&amp;gt;&amp;gt;&amp;gt; l = [10, 2, 0, 1]&#xA;&amp;gt;&amp;gt;&amp;gt; sorted(l)  # It returns a new list&#xA;[0, 1, 2, 10]&#xA;&amp;gt;&amp;gt;&amp;gt; l  # Original list is not sorted&#xA;[10, 2, 0, 1]&#xA;&#xA;# Sort by a different key&#xA;&amp;gt;&amp;gt;&amp;gt; students = [&#xA;    (&#39;Mark&#39;, 21),&#xA;    (&#39;Luke&#39;, 20),&#xA;    (&#39;Anna&#39;, 18),&#xA;]&#xA;&amp;gt;&amp;gt;&amp;gt; sorted(students, key=lambda s: s[1])  # It returns a new list&#xA;[(&#39;Anna&#39;, 18), (&#39;Luke&#39;, 20), (&#39;Mark&#39;, 21)]&#xA;&amp;gt;&amp;gt;&amp;gt; students.sort(key=lambda s: s[1])  # In-place&#xA;&amp;gt;&amp;gt;&amp;gt; students&#xA;[(&#39;Anna&#39;, 18), (&#39;Luke&#39;, 20), (&#39;Mark&#39;, 21)]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Strings&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; s = &#39;Hello, world!&#39;&#xA;&amp;gt;&amp;gt;&amp;gt; type(s)  # &amp;lt;class &#39;str&#39;&amp;gt;&#xA;&amp;gt;&amp;gt;&amp;gt; len(s)&#xA;13&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; s[0] = &#39;h&#39;  # Strings are immutable: `TypeError: &#39;str&#39; object does not support item assignment`&#xA;&amp;gt;&amp;gt;&amp;gt; s += &#39; Another string&#39;  # A new string will be created, so concatenation is quite slow&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; s = &#39;Hello&#39;&#xA;&amp;gt;&amp;gt;&amp;gt; l = list(s)&#xA;&amp;gt;&amp;gt;&amp;gt; l&#xA;[&#39;H&#39;, &#39;e&#39;, &#39;l&#39;, &#39;l&#39;, &#39;o&#39;]&#xA;&amp;gt;&amp;gt;&amp;gt; l[0] = &#39;h&#39;&#xA;&amp;gt;&amp;gt;&amp;gt; &#39;&#39;.join(l)&#xA;&#39;hello&#39;&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; &#39;lo&#39; in s&#xA;True&#xA;&amp;gt;&amp;gt;&amp;gt; ord(&#39;a&#39;)&#xA;97&#xA;&amp;gt;&amp;gt;&amp;gt; chr(97)&#xA;&#39;a&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Stacks&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; stack = []  # We can use a normal list to simulate a stack&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; stack.append(0)  # `O(1)`&#xA;&amp;gt;&amp;gt;&amp;gt; stack.append(1)&#xA;&amp;gt;&amp;gt;&amp;gt; stack.append(2)&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; len(stack)&#xA;3&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; stack[0]  # Bottom of the stack&#xA;0&#xA;&amp;gt;&amp;gt;&amp;gt; stack[-1]  # Top of the stack&#xA;2&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; stack.pop()  # `O(1)`&#xA;2&#xA;&amp;gt;&amp;gt;&amp;gt; stack.pop()&#xA;1&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; len(stack)&#xA;1&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; stack.pop()&#xA;0&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; stack.pop()  # `IndexError: pop from empty list`&#xA;&amp;gt;&amp;gt;&amp;gt; stack[-1]    # `IndexError: pop from empty list`&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Queues&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; from collections import deque&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; queue = deque()&#xA;&#xA;# Enqueue -&amp;gt; append()&#xA;&amp;gt;&amp;gt;&amp;gt; queue.append(0)  # `O(1)`&#xA;&amp;gt;&amp;gt;&amp;gt; queue.append(1)&#xA;&amp;gt;&amp;gt;&amp;gt; queue.append(2)&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; len(queue)&#xA;3&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; queue[0]  # Head of the queue&#xA;0&#xA;&amp;gt;&amp;gt;&amp;gt; queue[-1]  # Tail of the queue&#xA;2&#xA;&#xA;# Dequeue -&amp;gt; popleft()&#xA;&amp;gt;&amp;gt;&amp;gt; queue.popleft()  # `O(1)`&#xA;0&#xA;&amp;gt;&amp;gt;&amp;gt; queue.popleft()&#xA;1&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; len(queue)&#xA;2&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; queue.popleft()&#xA;2&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; len(queue)&#xA;0&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; queue.popleft()  # `IndexError: pop from an empty deque`&#xA;&amp;gt;&amp;gt;&amp;gt; queue[0]  # `IndexError: pop from an empty deque`&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Sets&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; s = set()&#xA;&amp;gt;&amp;gt;&amp;gt; s.add(1)&#xA;&amp;gt;&amp;gt;&amp;gt; s.add(2)&#xA;&amp;gt;&amp;gt;&amp;gt; s&#xA;{1, 2}&#xA;&amp;gt;&amp;gt;&amp;gt; len(s)&#xA;2&#xA;&amp;gt;&amp;gt;&amp;gt; s.add(1)  # Duplicate elements are not allowed per definition&#xA;&amp;gt;&amp;gt;&amp;gt; s&#xA;{1, 2}&#xA;&amp;gt;&amp;gt;&amp;gt; s.add(&#39;a&#39;)  # We can mix types&#xA;&amp;gt;&amp;gt;&amp;gt; s&#xA;{1, 2, &#39;a&#39;}&#xA;&amp;gt;&amp;gt;&amp;gt; 1 in s  # `O(1)`&#xA;True&#xA;&amp;gt;&amp;gt;&amp;gt; s.remove(1)&#xA;&amp;gt;&amp;gt;&amp;gt; s&#xA;{2, &#39;a&#39;}&#xA;&amp;gt;&amp;gt;&amp;gt; s.remove(1)  # `KeyError: 1`&#xA;&amp;gt;&amp;gt;&amp;gt; s.pop()  # Remove and return an arbitrary element from the set&#xA;2&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; s0 = {1, 2, &#39;a&#39;}&#xA;&amp;gt;&amp;gt;&amp;gt; s0&#xA;{1, 2, &#39;a&#39;}&#xA;&amp;gt;&amp;gt;&amp;gt; s1 = set([1, 2, &#39;a&#39;])&#xA;&amp;gt;&amp;gt;&amp;gt; s1&#xA;{1, 2, &#39;a&#39;}&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; s0 = {1, 2}&#xA;&amp;gt;&amp;gt;&amp;gt; s1 = {1, 3}&#xA;&amp;gt;&amp;gt;&amp;gt; s0 | s1&#xA;{1, 2, 3}&#xA;&amp;gt;&amp;gt;&amp;gt; s0.union(s1)  # New set will be returned&#xA;{1, 2, 3}&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; s0 = {1, 2}&#xA;&amp;gt;&amp;gt;&amp;gt; s1 = {1, 3}&#xA;&amp;gt;&amp;gt;&amp;gt; s0 &amp;amp; s1&#xA;{1}&#xA;&amp;gt;&amp;gt;&amp;gt; s0.intersection(s1)  # New set will be returned&#xA;{1}&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; s0 = {1, 2}&#xA;&amp;gt;&amp;gt;&amp;gt; s1 = {1, 3}&#xA;&amp;gt;&amp;gt;&amp;gt; s0 - s1&#xA;{2}&#xA;&amp;gt;&amp;gt;&amp;gt; s0.difference(s1)&#xA;{2}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Hash Tables&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; d = {&#39;a&#39;: &#39;hello, world&#39;, &#39;b&#39;: 11}  # Equivalent to `dict(a=&#39;hello, world&#39;, b=11)`&#xA;&amp;gt;&amp;gt;&amp;gt; type(d)&#xA;&amp;lt;class &#39;dict&#39;&amp;gt;&#xA;&amp;gt;&amp;gt;&amp;gt; d&#xA;{&#39;a&#39;: &#39;hello, world&#39;, &#39;b&#39;: 11}&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; d.keys()&#xA;dict_keys([&#39;a&#39;, &#39;b&#39;])&#xA;&amp;gt;&amp;gt;&amp;gt; d.values()&#xA;dict_values([&#39;hello, world&#39;, 11])&#xA;&amp;gt;&amp;gt;&amp;gt; for k, v in d.items(): print(k, v)&#xA;a hello, world&#xA;b 11&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; &#39;a&#39; in d  # `O(1)`&#xA;True&#xA;&amp;gt;&amp;gt;&amp;gt; 1 in d&#xA;False&#xA;&amp;gt;&amp;gt;&amp;gt; d[&#39;a&#39;] += &#39;!&#39;&#xA;&amp;gt;&amp;gt;&amp;gt; d&#xA;{&#39;a&#39;: &#39;hello, world!&#39;, &#39;b&#39;: 11}&#xA;&amp;gt;&amp;gt;&amp;gt; d[1] = &#39;a new element&#39;&#xA;&amp;gt;&amp;gt;&amp;gt; d&#xA;{&#39;a&#39;: &#39;hello, world!&#39;, &#39;b&#39;: 11, 1: &#39;a new element&#39;}&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; d[0] += 10  # `KeyError: 0`&#xA;&amp;gt;&amp;gt;&amp;gt; d.get(0, 1)  # Return `1` as default value since key `0` does not exist&#xA;1&#xA;&amp;gt;&amp;gt;&amp;gt; d.get(1, &#39;?&#39;)  # Key `1` exists, so the actual value will be returned&#xA;&#39;a new element&#39;&#xA;&amp;gt;&amp;gt;&amp;gt; d.get(10) is None&#xA;True&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Heaps&lt;/h2&gt; &#xA;&lt;p&gt;The following commands show how to work with a &lt;code&gt;min heap&lt;/code&gt;. Currently, &lt;code&gt;Python&lt;/code&gt; does not have public methods for the &lt;code&gt;max heap&lt;/code&gt;. You can overcome this problem by applying one of the following strategies:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Invert the value of each number. So, for example, if you want to add 1, 2 and 3 in the min heap, you can &lt;code&gt;heappush&lt;/code&gt; -3, -2 and -1. When you &lt;code&gt;heappop&lt;/code&gt; you invert the number again to get the proper value. This solution clearly works if your domain is composed by numbers &amp;gt;= 0.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/a/40455775&#34;&gt;Invert your object comparison&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; import heapq&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; min_heap = [3, 2, 1]&#xA;&amp;gt;&amp;gt;&amp;gt; heapq.heapify(min_heap)&#xA;&amp;gt;&amp;gt;&amp;gt; min_heap&#xA;[1, 2, 3]&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; min_heap = []&#xA;&amp;gt;&amp;gt;&amp;gt; heapq.heappush(min_heap, 3)  # `O(log n)`&#xA;&amp;gt;&amp;gt;&amp;gt; heapq.heappush(min_heap, 2)&#xA;&amp;gt;&amp;gt;&amp;gt; heapq.heappush(min_heap, 1)&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; min_heap&#xA;[1, 3, 2]&#xA;&amp;gt;&amp;gt;&amp;gt; len(min_heap)&#xA;&amp;gt;&amp;gt;&amp;gt; min_heap[0]&#xA;1&#xA;&amp;gt;&amp;gt;&amp;gt; heapq.heappop(min_heap)  # `O(log n)`&#xA;1&#xA;&amp;gt;&amp;gt;&amp;gt; min_heap&#xA;[2, 3]&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; heapq.heappop(min_heap)&#xA;2&#xA;&amp;gt;&amp;gt;&amp;gt; heapq.heappop(min_heap)&#xA;3&#xA;&amp;gt;&amp;gt;&amp;gt; heapq.heappop(min_heap)  # `IndexError: index out of range`&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;collections&lt;/h3&gt; &#xA;&lt;p&gt;Container datatypes (&lt;a href=&#34;https://docs.python.org/3/library/collections.html&#34;&gt;collections package&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;h4&gt;collections.namedtuple&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; from collections import namedtuple&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; Point = namedtuple(&#39;Point&#39;, &#39;x y&#39;)&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; p0 = Point(1, 2)&#xA;&amp;gt;&amp;gt;&amp;gt; p0&#xA;Point(x=1, y=2)&#xA;&amp;gt;&amp;gt;&amp;gt; p0.x&#xA;1&#xA;&amp;gt;&amp;gt;&amp;gt; p0.y&#xA;2&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; p1 = Point(x=1, y=2)&#xA;&amp;gt;&amp;gt;&amp;gt; p0 == p1&#xA;True&#xA;&#xA;# Python &amp;gt;= 3.6.1&#xA;&amp;gt;&amp;gt;&amp;gt; from typing import NamedTuple&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; class Point(NamedTuple):&#xA;        x: int&#xA;        y: int&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; p0 = Point(1, 2)&#xA;&amp;gt;&amp;gt;&amp;gt; p1 = Point(x=1, y=2)&#xA;&amp;gt;&amp;gt;&amp;gt; p0 == p1&#xA;True&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;collections.defaultdict&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; from collections import defaultdict&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; d = defaultdict(int)&#xA;&amp;gt;&amp;gt;&amp;gt; d[&#39;x&#39;] += 1&#xA;&amp;gt;&amp;gt;&amp;gt; d&#xA;defaultdict(&amp;lt;class &#39;int&#39;&amp;gt;, {&#39;x&#39;: 1})&#xA;&amp;gt;&amp;gt;&amp;gt; d[&#39;x&#39;] += 2&#xA;&amp;gt;&amp;gt;&amp;gt; d&#xA;defaultdict(&amp;lt;class &#39;int&#39;&amp;gt;, {&#39;x&#39;: 3})&#xA;&amp;gt;&amp;gt;&amp;gt; d[&#39;y&#39;] += 10&#xA;&amp;gt;&amp;gt;&amp;gt; d&#xA;defaultdict(&amp;lt;class &#39;int&#39;&amp;gt;, {&#39;x&#39;: 3, &#39;y&#39;: 10})&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; d = defaultdict(list)&#xA;&amp;gt;&amp;gt;&amp;gt; d[&#39;x&#39;].append(1)&#xA;&amp;gt;&amp;gt;&amp;gt; d[&#39;x&#39;].append(2)&#xA;&amp;gt;&amp;gt;&amp;gt; d&#xA;defaultdict(&amp;lt;class &#39;list&#39;&amp;gt;, {&#39;x&#39;: [1, 2]})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;collections.Counter&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; from collections import Counter&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; c = Counter(&#39;abcabcaa&#39;)&#xA;&amp;gt;&amp;gt;&amp;gt; c&#xA;Counter({&#39;a&#39;: 4, &#39;b&#39;: 2, &#39;c&#39;: 2})&#xA;&amp;gt;&amp;gt;&amp;gt; c.keys()&#xA;dict_keys([&#39;a&#39;, &#39;b&#39;, &#39;c&#39;])&#xA;&amp;gt;&amp;gt;&amp;gt; c.items()&#xA;dict_items([(&#39;a&#39;, 4), (&#39;b&#39;, 2), (&#39;c&#39;, 2)])&#xA;&amp;gt;&amp;gt;&amp;gt; for k, v in c.items(): print(k, v)&#xA;a 4&#xA;b 2&#xA;c 2&#xA;&amp;gt;&amp;gt;&amp;gt; c[&#39;d&#39;]  # It acts as a `defaultdict` for missing keys&#xA;0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;collections.OrderedDict&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; from collections import OrderedDict&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; d = OrderedDict()&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; d[&#39;first&#39;] = 1&#xA;&amp;gt;&amp;gt;&amp;gt; d[&#39;second&#39;] = 2&#xA;&amp;gt;&amp;gt;&amp;gt; d[&#39;third&#39;] = 3&#xA;&amp;gt;&amp;gt;&amp;gt; d&#xA;OrderedDict([(&#39;first&#39;, 1), (&#39;second&#39;, 2), (&#39;third&#39;, 3)])&#xA;&#xA;&amp;gt;&amp;gt;&amp;gt; for k, v in d.items(): print(k, v)&#xA;first 1&#xA;second 2&#xA;third 3&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>