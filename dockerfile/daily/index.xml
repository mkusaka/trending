<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dockerfile Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-07-16T01:34:32Z</updated>
  <subtitle>Daily Trending of Dockerfile in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>open-quantum-safe/oqs-demos</title>
    <updated>2023-07-16T01:34:32Z</updated>
    <id>tag:github.com,2023-07-16:/open-quantum-safe/oqs-demos</id>
    <link href="https://github.com/open-quantum-safe/oqs-demos" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Instructions for enabling the use of quantum-safe cryptography in assorted software using the OQS suite&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/open-quantum-safe/oqs-demos/actions/workflows/linux.yml&#34;&gt;&lt;img src=&#34;https://github.com/open-quantum-safe/oqs-demos/actions/workflows/linux.yml/badge.svg?sanitize=true&#34; alt=&#34;GitHub actions&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://app.circleci.com/pipelines/github/open-quantum-safe/oqs-demos&#34;&gt;&lt;img src=&#34;https://circleci.com/gh/open-quantum-safe/oqs-demos.svg?style=svg&#34; alt=&#34;open-quantum-safe&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;oqs-demos&lt;/h1&gt; &#xA;&lt;h2&gt;Purpose&lt;/h2&gt; &#xA;&lt;p&gt;A repository of instructions (with associated patches and scripts) to enable, through &lt;a href=&#34;https://github.com/open-quantum-safe/liboqs&#34;&gt;liboqs&lt;/a&gt;, the use of quantum-safe cryptography in various application software.&lt;/p&gt; &#xA;&lt;p&gt;In most cases, Dockerfiles encode the instructions for ease-of-use: Just do &lt;code&gt;docker build -t &amp;lt;package_name&amp;gt; .&lt;/code&gt;. For more detailed usage instructions (parameters, algorithms, etc.) refer to the README for each package. Pre-built Docker images may also be available.&lt;/p&gt; &#xA;&lt;p&gt;Currently supported packages:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;strong&gt;Build instructions&lt;/strong&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;strong&gt;Pre-built Docker image or binary files&lt;/strong&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;curl&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/open-quantum-safe/oqs-demos/main/curl&#34;&gt;Github: oqs-demos/curl&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://hub.docker.com/repository/docker/openquantumsafe/curl&#34;&gt;Dockerhub: openquantumsafe/curl&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Apache httpd&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/open-quantum-safe/oqs-demos/main/httpd&#34;&gt;Github: oqs-demos/httpd&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://hub.docker.com/repository/docker/openquantumsafe/httpd&#34;&gt;Dockerhub: openquantumsafe/httpd&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;nginx&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/open-quantum-safe/oqs-demos/main/nginx&#34;&gt;Github: oqs-demos/nginx&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://hub.docker.com/repository/docker/openquantumsafe/nginx&#34;&gt;Dockerhub: openquantumsafe/nginx&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Chromium&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/open-quantum-safe/oqs-demos/main/chromium&#34;&gt;Github: oqs-demos/chromium&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/open-quantum-safe/oqs-demos/releases/download/0.7.2/chromium-ubuntu-0.7.2.tgz&#34;&gt;Binary for Ubuntu 20&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;OpenSSH&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/open-quantum-safe/oqs-demos/main/openssh&#34;&gt;Github: oqs-demos/openssh&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://hub.docker.com/repository/docker/openquantumsafe/openssh&#34;&gt;Dockerhub: openquantumsafe/openssh&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Wireshark&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/open-quantum-safe/oqs-demos/main/wireshark&#34;&gt;Github: oqs-demos/wireshark&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://hub.docker.com/repository/docker/openquantumsafe/wireshark&#34;&gt;Dockerhub: openquantumsafe/wireshark&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Epiphany&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/open-quantum-safe/oqs-demos/main/epiphany&#34;&gt;Github: oqs-demos/epiphany&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://hub.docker.com/repository/docker/openquantumsafe/epiphany&#34;&gt;Dockerhub: openquantumsafe/epiphany&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;QUIC&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/open-quantum-safe/oqs-demos/main/quic&#34;&gt;Github: oqs-demos/quic&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Dockerhub: &lt;a href=&#34;https://hub.docker.com/repository/docker/openquantumsafe/nginx-quic&#34;&gt;Server: openquantumsafe/nginx-quic&lt;/a&gt;, &lt;a href=&#34;https://hub.docker.com/repository/docker/openquantumsafe/msquic-reach&#34;&gt;Client: openquantumsafe/msquic&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Mosquitto&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/open-quantum-safe/oqs-demos/main/mosquitto&#34;&gt;Github: oqs-demos/mosquitto&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://hub.docker.com/repository/docker/openquantumsafe/mosquitto&#34;&gt;Dockerhub: openquantumsafe/mosquitto&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;OpenVPN&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/open-quantum-safe/oqs-demos/main/openvpn&#34;&gt;Github: oqs-demos/openvpn&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://hub.docker.com/repository/docker/openquantumsafe/openvpn&#34;&gt;Dockerhub: openquantumsafe/openvpn&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;ngtcp2&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/open-quantum-safe/oqs-demos/main/ngtcp2&#34;&gt;Github: oqs-demos/ngtcp2&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Dockerhub: &lt;a href=&#34;https://hub.docker.com/repository/docker/openquantumsafe/ngtcp2-server&#34;&gt;Server: openquantumsafe/ngtcp2-server&lt;/a&gt;, &lt;a href=&#34;https://hub.docker.com/repository/docker/openquantumsafe/ngtcp2-client&#34;&gt;Client: openquantumsafe/ngtcp2-client&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;OpenLiteSpeed&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/open-quantum-safe/oqs-demos/main/openlitespeed&#34;&gt;Github: oqs-demos/openlitespeed&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://hub.docker.com/repository/docker/openquantumsafe/openlitespeed&#34;&gt; Dockerhub: openquantumsafe/openlitespeed&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Unbound&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/open-quantum-safe/oqs-demos/main/unbound&#34;&gt;Github: oqs-demos/unbound&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://hub.docker.com/repository/docker/openquantumsafe/unbound&#34;&gt; Dockerhub: openquantumsafe/unbound&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Envoy&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/open-quantum-safe/oqs-demos/main/envoy&#34;&gt;Github: oqs-demos/envoy&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://hub.docker.com/repository/docker/openquantumsafe/envoy&#34;&gt; Dockerhub: openquantumsafe/envoy&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;h2load&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/open-quantum-safe/oqs-demos/main/h2load&#34;&gt;Github: oqs-demos/h2load&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://hub.docker.com/repository/docker/openquantumsafe/h2load&#34;&gt; Dockerhub: openquantumsafe/h2load&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;!--| **HAproxy**      | [Github: oqs-demos/haproxy](haproxy)   | [Dockerhub: openquantumsafe/haproxy](https://hub.docker.com/repository/docker/openquantumsafe/haproxy)                       | --&gt; &#xA;&lt;p&gt;You can use the openssl (s_client), curl and GNOME Web/epiphany clients with all algorithm combinations available at the Open Quantum Safe TLS/X.509 interoperability test server at &lt;a href=&#34;https://test.openquantumsafe.org&#34;&gt;https://test.openquantumsafe.org&lt;/a&gt; (set up using &lt;code&gt;oqs-provider v0.5.0&lt;/code&gt; and &lt;code&gt;liboqs v0.8.0&lt;/code&gt;). Chromium and &lt;code&gt;oqs-boringssl&lt;/code&gt; are no longer maintained to the same set of algorithms, so are not to be expected to (inter)operate fully with the test server.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Contributions are gratefully welcomed. See our &lt;a href=&#34;https://github.com/open-quantum-safe/oqs-demos/wiki/Contributing-guide&#34;&gt;Contributing Guide&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;All modifications to this repository are released under the same terms as &lt;a href=&#34;https://github.com/open-quantum-safe/liboqs&#34;&gt;liboqs&lt;/a&gt;, namely as described in the file &lt;a href=&#34;https://github.com/open-quantum-safe/liboqs/raw/main/LICENSE.txt&#34;&gt;LICENSE&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Team&lt;/h2&gt; &#xA;&lt;p&gt;The Open Quantum Safe project is led by &lt;a href=&#34;https://www.douglas.stebila.ca/research/&#34;&gt;Douglas Stebila&lt;/a&gt; and &lt;a href=&#34;http://faculty.iqc.uwaterloo.ca/mmosca/&#34;&gt;Michele Mosca&lt;/a&gt;at the University of Waterloo.&lt;/p&gt; &#xA;&lt;h2&gt;Contributors to oqs-demos include:&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;Christian Paquin (Microsoft Research)&#xA;Dimitris Sikeridis (University of New Mexico / Cisco Systems)&#xA;Douglas Stebila (University of Waterloo)&#xA;Goutam Tamvada (University of Waterloo)&#xA;Michael Baentsch (baentsch.ch)&#xA;ISE @ FHNW (Fachhochschule Nordwestschweiz)&#xA;Anthony Hu (wolfSSL)&#xA;Igor Barshteyn&#xA;Chia-Chin Chung&#xA;Keelan Cannoo (University of Mauritius / Cyberstorm.mu)&#xA;Dindyal Jeevesh Rishi (University of Mauritius / cyberstorm.mu)&#xA;Dan Rouhana (University of Washington)&#xA;JT (Henan Raytonne Trading Company)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Acknowledgments&lt;/h2&gt; &#xA;&lt;p&gt;Financial support for the development of Open Quantum Safe has been provided by Amazon Web Services and the Canadian Centre for Cyber Security.&lt;/p&gt; &#xA;&lt;p&gt;We&#39;d like to make a special acknowledgement to the companies who have dedicated programmer time to contribute source code to OQS, including Amazon Web Services, evolutionQ, Microsoft Research, Cisco Systems, IBM Research and Fachhochschule Nordwestschweiz.&lt;/p&gt; &#xA;&lt;p&gt;Research projects which developed specific components of OQS have been supported by various research grants, including funding from the Natural Sciences and Engineering Research Council of Canada (NSERC); see here and here for funding acknowledgments.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>CTF-Archives/ctf-docker-template</title>
    <updated>2023-07-16T01:34:32Z</updated>
    <id>tag:github.com,2023-07-16:/CTF-Archives/ctf-docker-template</id>
    <link href="https://github.com/CTF-Archives/ctf-docker-template" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Deployment template for docker target machine in ctf for CTFd and other platforms that support dynamic flags&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;CTF 动态靶机模板&lt;/h1&gt; &#xA;&lt;p&gt;对于各个模板的详细适用情况，请见各情景的文件夹内的README&lt;/p&gt; &#xA;&lt;p&gt;本仓库内的Docker容器模板均支持&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;$GZCTF_FLAG&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$DASCTF&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$FLAG&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;三种动态flag部署方式，支持GZCTF、CTFd、安恒DASCTF等支持Docker动态部署题目靶机的平台&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;有问题请开issue，好用请点star&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;关于每个模板的文件夹结构&lt;/h2&gt; &#xA;&lt;p&gt;这里以 &lt;code&gt;crypto-python_3.8-no_socket&lt;/code&gt; 模板为例&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-plaintext&#34;&gt;.&#xA;├── docker&#xA;│   └── docker-compose.yml&#xA;├── Dockerfile&#xA;├── README.md&#xA;├── service&#xA;│   └── docker-entrypoint.sh&#xA;└── src&#xA;    └── main.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;docker&lt;/code&gt; 文件夹内存放与docker有关的文件，如 &lt;code&gt;docker-compose.yml&lt;/code&gt; 文件，内部已经设置好了端口转发和测试用flag，便于测试容器环境&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Dockerfile&lt;/code&gt; 为docker容器编译文件，用于设计docker容器，可在其中设置换源、增添软件包等等&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;service&lt;/code&gt; 文件夹内存放着与服务有关的文件，如 &lt;code&gt;docker-entrypoint.sh&lt;/code&gt; 用于定义容器的入口点&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;src&lt;/code&gt; 文件夹内存放着题目的项目源码，也可以是pwn题目的二进制文件，即为题目的相关文件&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;config&lt;/code&gt; 文件夹内存放着容器内服务相关的配置文件，如 &lt;code&gt;nginx&lt;/code&gt; 的配置文件等等&lt;/p&gt; &#xA;&lt;h2&gt;About no_socket with crypto&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;no_socket&lt;/code&gt;指的是源代码中没有引入&lt;code&gt;socket&lt;/code&gt;相关的库，当希望达到的效果是类似于当用户通过特定端口连接到靶机时，就运行python代码，并将代码的运行界面转发给用户。如果已经引入了&lt;code&gt;socket&lt;/code&gt;相关的库，请直接使用如&lt;code&gt;python app.py&lt;/code&gt;这类语句启动python程序，并让程序自行监听特定端口&lt;/p&gt; &#xA;&lt;h2&gt;关于软件源换源&lt;/h2&gt; &#xA;&lt;p&gt;环境中涉及软件包处理的情形，如apt、yum，均已换源为ustc源，如不处于中国大陆网络环境/启用了全局代理环境，请自行修改相关换源语句，避免由于还原带来的负优化&lt;/p&gt; &#xA;&lt;h2&gt;关于容器无限重启，看日志发现sh文件错误&lt;/h2&gt; &#xA;&lt;p&gt;常见以下报错：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;/docker-entrypoint.sh: line 2: $&#39;\r&#39;: command not found&#xA;/docker-entrypoint.sh: line 26: syntax error: unexpected end of file&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;这是因为Windows与Linux文件编码在换行的操作不一样，导致Linux的shell无法解析脚本文件。解决方案如下&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sed -i &#34;&#34;s/\r//&#34;&#34; docker-entrypoint.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;即通过正则匹配，直接替换掉 &lt;code&gt;\r&lt;/code&gt; 字符，不过此方案不一定能完全解决问题&lt;/p&gt; &#xA;&lt;p&gt;建议直接在linux下执行 &lt;code&gt;git clone&lt;/code&gt; 操作，或者直接从github下载zip版本的源码，避免一些奇奇怪怪的编码问题&lt;/p&gt; &#xA;&lt;h2&gt;如有其他问题&lt;/h2&gt; &#xA;&lt;p&gt;欢迎直接提issue，一般于三个工作日内就能有回复，也请遇到问题的时候能提供当前的整体题目文件，以及具体的报错/信息&lt;/p&gt; &#xA;&lt;p&gt;也欢迎通过 &lt;a href=&#34;http://qm.qq.com/cgi-bin/qm/qr?_wv=1027&amp;amp;k=wJ35e-T-qSlU7Y3Cs-PAasrAvZfRSc9k&amp;amp;authKey=WNEQbZUpolxgfKjUHHoUIoTBvSnvk2jZtcyWlhaDcUZ6ZYGgvywqi1ah5D7UwUrg&amp;amp;noverify=0&amp;amp;group_code=590430891&#34;&gt;CTF快速入门手册 - QQ群聊&lt;/a&gt; 联系维护人员寻求帮助&lt;/p&gt; &#xA;&lt;h2&gt;A little advertisement&lt;/h2&gt; &#xA;&lt;p&gt;某 &lt;a href=&#34;https://github.com/Randark-JMT&#34;&gt;Randark-JMT&lt;/a&gt; 可以无偿为CTF平台搭建、题目打包提供一定帮助，欢迎联系😘&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>drum-grammer/docker-pro-2308</title>
    <updated>2023-07-16T01:34:32Z</updated>
    <id>tag:github.com,2023-07-16:/drum-grammer/docker-pro-2308</id>
    <link href="https://github.com/drum-grammer/docker-pro-2308" rel="alternate"></link>
    <summary type="html">&lt;p&gt;원티드와 함께하는 Docker 뽀개기&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Docker : 나만의 도커 이미지 만들기 부터, 클라우드 배포까지!&lt;/h1&gt; &#xA;&lt;p&gt;8월 원티드 프리 온보딩 챌린지 - docker 뽀개기&lt;/p&gt; &#xA;&lt;h2&gt;I. 사전 미션하는 법&lt;/h2&gt; &#xA;&lt;h3&gt;방법 1&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;해당 repository를 fork 하세요.&lt;/li&gt; &#xA; &lt;li&gt;로컬에서 작업한 커밋을 fork한 repository에 push 하세요.&lt;/li&gt; &#xA; &lt;li&gt;Pull Request를 생성하여, 사전 미션을 제출해주세요.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;방법 2&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;해당 repository를 clone 하세요:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone git@github.com:drum-grammer/docker-pro-wanted.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;별도의 브랜치를 생성하세요:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;git checkout -b my-branch-xx&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;아래 사전 미션 내용을 보고 답안을 마크다운 형식으로 작성하시고, &lt;code&gt;./mission/{nickName}&lt;/code&gt; 디렉토리 저장해주세요.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;해당 브랜치를 푸쉬해주세요.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;git push -u origin my-branch-xx&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;5&#34;&gt; &#xA; &lt;li&gt;Pull Request를 생성하여, 사전 미션을 제출해주세요.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;II. 사전 미션&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;컨테이너 기술이란 무엇입니까? (100자 이내로 요약)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;도커란 무엇입니까? (100자 이내로 요약)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;도커 파일, 도커 이미지, 도커 컨테이너의 개념은 무엇이고, 서로 어떤 관계입니까?&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[실전 미션] 도커 설치하기 (참조: &lt;a href=&#34;https://docs.docker.com/engine/install/&#34;&gt;도커 공식 설치 페이지&lt;/a&gt;)&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;아래 &lt;code&gt;도커 설치부터 실행 튜토리얼&lt;/code&gt;을 참조하여 도커를 설치하고, 도커 컨테이너를 실행한 화면을 캡쳐해서 Pull Request에 올리세요.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;III. 도커 설치부터 실행 튜토리얼&lt;/h2&gt; &#xA;&lt;h3&gt;도커 설치&lt;/h3&gt; &#xA;&lt;h4&gt;1. 도커 공식 웹사이트에서 &#34;&lt;a href=&#34;https://www.docker.com/get-started&#34;&gt;Get Started&lt;/a&gt;&#34;를 클릭합니다.&lt;/h4&gt; &#xA;&lt;h4&gt;2. OS에 맞는 설치 파일을 다운로드 받습니다.&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;MacOS의 경우 &#34;Download for Mac&#34;을 클릭합니다.&lt;/li&gt; &#xA; &lt;li&gt;Window 일 경우 &#34;Download for Windows&#34;를 클릭합니다.&lt;/li&gt; &#xA; &lt;li&gt;다운로드한 설치 파일을 실행합니다.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;도커 컨테이너 실행 시키기&lt;/h3&gt; &#xA;&lt;h4&gt;1. &lt;code&gt;나의 사전 미션 폴더&lt;/code&gt;를 만들고 해당 폴더로 이동합니다.&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cd path/to/docker-pro-wanted/mission&#xA;mkdir my-name&#xA;cd my-name&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;2. &#34;Hello, World!&#34;를 출력하는 도커 파일을 만듭니다.&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;vim Dockerfile&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;i&lt;/code&gt;를 눌러 편집모드로 전환 후 아래 내용을 작성합니다:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Dockerfile&#34;&gt;FROM alpine:latest&#xA;CMD [&#34;echo&#34;, &#34;Hello, World&#34;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;ESC&lt;/code&gt;를 눌러 명령모드로 전환 후, &lt;code&gt;:wq&lt;/code&gt; 입력, &lt;code&gt;enter&lt;/code&gt;키를 눌러 &lt;code&gt;Dockerfile&lt;/code&gt;을 생성합니다.&lt;/p&gt; &#xA;&lt;h4&gt;3. 도커 파일로 도커 이미지를 빌드합니다.&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker build -t hello-world .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(위 명령어의 의미는 &#34;현재 디렉토리에서 &lt;code&gt;Dockerfile&lt;/code&gt;을 읽어 도커 이미지를 만들고, 해당 이미지에 &lt;code&gt;hello-world&lt;/code&gt;라는 &lt;code&gt;tag&lt;/code&gt; 를 붙혀라&#34; 입니다.)&lt;/p&gt; &#xA;&lt;h4&gt;4. 빌드한 도커 이미지를 실행합니다.&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker run hello-world&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;이 명령어는 hello-world라는 이름의 도커 이미지를 실행시켜 &#34;Hello, World!&#34;를 출력합니다.&lt;/p&gt;</summary>
  </entry>
</feed>