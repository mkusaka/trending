<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dockerfile Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-04-03T01:32:14Z</updated>
  <subtitle>Daily Trending of Dockerfile in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>FrankFang/oh-my-env-1</title>
    <updated>2023-04-03T01:32:14Z</updated>
    <id>tag:github.com,2023-04-03:/FrankFang/oh-my-env-1</id>
    <link href="https://github.com/FrankFang/oh-my-env-1" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;我的开发环境&lt;/h1&gt; &#xA;&lt;h2&gt;视频教程&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV1ZL4y1u7c4/&#34;&gt;https://www.bilibili.com/video/BV1ZL4y1u7c4/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;使用方法&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;安装最新版 Docker 客户端&lt;/li&gt; &#xA; &lt;li&gt;打开 Docker 客户端的配置 &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;找到 Docker Engine 选项卡，配置 registry-mirrors（自行搜索教程）&lt;/li&gt; &#xA;   &lt;li&gt;找到 Resources 选项卡，配置 Proxies（可跳过）&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;git clone https://github.com/FrankFang/oh-my-env-1.git&lt;/code&gt; 将 oh-my-env-1 下载到本地（也可以直接下载 zip），重命名为 oh-my-env &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;mac M1 用户请将 &lt;code&gt;.devcontainer/Dockerfile&lt;/code&gt; 文件中的 &lt;code&gt;oh-my-docker:mangosteen&lt;/code&gt; 改为 &lt;code&gt;oh-my-docker-m1:mangosteen&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;打开 Windows/Mac 的终端，运行 &lt;code&gt;docker network create network1&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;打开 VSCode &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;安装 Dev Containers 插件&lt;/li&gt; &#xA;   &lt;li&gt;将 oh-my-env 目录拖入 VSCode&lt;/li&gt; &#xA;   &lt;li&gt;输入 Ctrl + Shift + P，然后输入 Reopen，回车，等待&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;等上一步启动完毕之后，新建终端 &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;运行 &lt;code&gt;nvm use system&lt;/code&gt; 和 &lt;code&gt;node --version&lt;/code&gt; 得到 node 运行环境&lt;/li&gt; &#xA;   &lt;li&gt;运行 &lt;code&gt;rvm use 3&lt;/code&gt; 和 &lt;code&gt;ruby --version&lt;/code&gt; 得到 ruby 运行环境&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;如何升级&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;删掉本地的旧镜像&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker rmi frankfang128/oh-my-docker:mangosteen&#xA;# 如果你是 M1 用户，那么你需要把 oh-my-docker 改为 oh-my-docker-m1&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;删除之前的 oh-my-env 目录，下载最新的 oh-my-env，然后用 VSCode 打开，输入 Ctrl + Shift + P，然后输入 Reopen，回车，等待&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;如果你之前是用 &lt;code&gt;git clone&lt;/code&gt; 下载的 oh-my-env-1，那么你也可以用 &lt;code&gt;git pull&lt;/code&gt; 命令来更新代码&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;如何使用宿主机的代理&lt;/h2&gt; &#xA;&lt;p&gt;你的 docker 环境里访问外网会发现无法连接或者下载速度很慢，怎么才能用上宿主机的代理呢？步骤如下：&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;在 Docker 终端运行 &lt;code&gt;code /workspaces/oh-my-env/.devcontainer/devcontainer.json&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;搜索 &lt;code&gt;--network&lt;/code&gt;，找到这一行并注释掉或者删掉&lt;/li&gt; &#xA; &lt;li&gt;在 VSCode 中 rebuild 当前环境&lt;/li&gt; &#xA; &lt;li&gt;获取宿主机的 IP，以 Clash 为例，点击 General 面板中的 Allow LAN 文字旁边的图标，就能获取 WSL 的 Address：172.29.xxx.x&lt;/li&gt; &#xA; &lt;li&gt;回到 Docker 终端运行 &lt;code&gt;export all_proxy=&#34;socks5://172.29.xxx.x:1080&#34;&lt;/code&gt;，然后终端里的其他命令就能网速飞快地运行了&lt;/li&gt; &#xA; &lt;li&gt;运行完了之后，把第 2 步里注释掉的 &lt;code&gt;--network&lt;/code&gt; 改回来，重新 rebuild（此时代理就不能用了）&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;这个方法略显麻烦，因为一旦你启用了 network，就不能访问宿主机；但不启用 network，开发又不是那么方便。&lt;/p&gt; &#xA;&lt;h2&gt;如何 trojan&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;运行 &lt;code&gt;code ~/.config/trojan.conf&lt;/code&gt;，将你自己购买的 trojan 服务器的 JSON 配置复制进去，保存文件&lt;/li&gt; &#xA; &lt;li&gt;运行命令 &lt;code&gt;fq&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;这是我写在 bashrc 里的 alias，会去运行 &lt;code&gt;trojan&lt;/code&gt; 命令&lt;/li&gt; &#xA;   &lt;li&gt;这个命令会在后台运行，运行日志在 /tmp/trojan.log&lt;/li&gt; &#xA;   &lt;li&gt;如果你想关闭它，可以运行 &lt;code&gt;killall trojan&lt;/code&gt; 命令&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;如果你的本地代理端口不是 1080， 那么你需要运行 &lt;code&gt;code ~/.config/proxychains.conf&lt;/code&gt;，将 1080 改为你的端口，然后保存文件&lt;/li&gt; &#xA; &lt;li&gt;在你的任意命令前加 pc 即可，例如： &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;pc git clone git@xxxxx&lt;/li&gt; &#xA;   &lt;li&gt;pc curl -L &lt;a href=&#34;https://twitter.com&#34;&gt;https://twitter.com&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
  <entry>
    <title>vernard/magento-lts-docker</title>
    <updated>2023-04-03T01:32:14Z</updated>
    <id>tag:github.com,2023-04-03:/vernard/magento-lts-docker</id>
    <link href="https://github.com/vernard/magento-lts-docker" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;p&gt;This repository is based off &lt;a href=&#34;https://github.com/OpenMage/magento-lts&#34;&gt;OpenMage/Magento-LTS&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;I did a screen recording while installing this repository on a &lt;a href=&#34;https://www.loom.com/share/33d53f2140574e5a95e70d14e72562b0&#34;&gt;Linux&lt;/a&gt; and &lt;a href=&#34;https://www.loom.com/share/7329342460314171b8a1f15ea99048c5&#34;&gt;Windows&lt;/a&gt; OS. If you prefer watching videos than reading, you may want to watch these videos instead.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;You must have these installed. I&#39;ve documented the installation instructions at the bottom of this document.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/vernard/magento-lts-docker/main/#how-to-install-git&#34;&gt;git&lt;/a&gt;,&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/vernard/magento-lts-docker/main/#how-to-install-php-and-composer-2&#34;&gt;composer 2&lt;/a&gt;,&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/vernard/magento-lts-docker/main/#how-to-docker-and-docker-compose&#34;&gt;docker, and docker-compose&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Clone this repository to your machine&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run &lt;code&gt;composer install&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run &lt;code&gt;docker-compose up -d&lt;/code&gt;. Make sure that port 80 (http), 443 (https), 3306 (mysql), 1080, and 8080 are open.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Update your hosts file and add whatever host you want. You can skip this step and stick to &lt;code&gt;localhost&lt;/code&gt;, but it&#39;s a good idea to use a different virtual host name per project.&lt;/p&gt; &lt;p&gt;In this case, we&#39;ll use &lt;code&gt;magento-lts.local&lt;/code&gt;.&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;Hosts file is located at &lt;code&gt;/etc/hosts&lt;/code&gt; in Linux OS while it&#39;s located at &lt;code&gt;C:/Windows/system32/drivers/etc/hosts&lt;/code&gt; in Windows OS&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;p&gt;Add this line to your hosts file:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;127.0.0.1       magento-lts.local&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run the wizard by visiting &lt;code&gt;magento-lts.local&lt;/code&gt; in your browser, or run the install script.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Linux OS (docker-based installation)&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker-compose exec -u application php php -f install.php -- --license_agreement_accepted yes \&#xA;  --locale en_US --timezone &#34;America/Los_Angeles&#34; --default_currency USD \&#xA;  --db_host db --db_name magento --db_user magento --db_pass magento \&#xA;  --url &#34;http://magento-lts.local/&#34; --use_rewrites yes \&#xA;  --use_secure yes --secure_base_url &#34;https://magento-lts.local/&#34; --use_secure_admin yes \&#xA;  --admin_lastname Owner --admin_firstname Store --admin_email &#34;admin@example.com&#34; \&#xA;  --admin_username admin --admin_password 123123password&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Windows OS (wamp-based installation)&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;php -f install.php -- --license_agreement_accepted yes \&#xA;  --locale en_US --timezone &#34;America/Los_Angeles&#34; --default_currency USD \&#xA;  --db_host db --db_name magento --db_user magento --db_pass magento \&#xA;  --url &#34;http://magento-lts.local/&#34; --use_rewrites yes \&#xA;  --use_secure yes --secure_base_url &#34;https://magento-lts.local/&#34; --use_secure_admin yes \&#xA;  --admin_lastname Owner --admin_firstname Store --admin_email &#34;admin@example.com&#34; \&#xA;  --admin_username admin --admin_password 123123password&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This creates ad admin user &lt;code&gt;admin&lt;/code&gt; with a password of &lt;code&gt;123123password&lt;/code&gt; (14 alphanumeric characters required for password, so deal with it).&lt;/p&gt; &lt;p&gt;Change the script if you want to use a different &lt;strong&gt;username, password, or if you used a different host name&lt;/strong&gt;.&lt;/p&gt; &lt;p&gt;Check out the file in &lt;code&gt;pub/install.php&lt;/code&gt; if you want to know the possible options and how to customize this.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Setting up your local development machine (Linux OS)&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a name=&#34;how-to-docker-and-docker-compose&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;How to install Docker &amp;amp; Docker Compose&lt;/h3&gt; &#xA;&lt;p&gt;You must have &lt;a href=&#34;https://docker.com/&#34;&gt;docker&lt;/a&gt; and &lt;a href=&#34;https://docs.docker.com/compose/install/&#34;&gt;docker-compose&lt;/a&gt; command installed to use this repository.&lt;/p&gt; &#xA;&lt;p&gt;Follow the Docker installation instructions here: &lt;a href=&#34;https://docs.docker.com/engine/install/ubuntu/&#34;&gt;https://docs.docker.com/engine/install/ubuntu/&lt;/a&gt; or just copy paste the instructions below.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Set up the repository&lt;/p&gt; &lt;pre&gt;&lt;code&gt;sudo apt-get update&#xA;sudo apt-get install \&#xA;    ca-certificates \&#xA;    curl \&#xA;    gnupg \&#xA;    lsb-release&#xA;curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg&#xA;echo \&#xA;  &#34;deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \&#xA;  $(lsb_release -cs) stable&#34; | sudo tee /etc/apt/sources.list.d/docker.list &amp;gt; /dev/null&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Install Docker Engine&lt;/p&gt; &lt;pre&gt;&lt;code&gt;sudo apt-get update&#xA;sudo apt-get install docker-ce docker-ce-cli containerd.io&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Verify that docker is installed&lt;/p&gt; &lt;pre&gt;&lt;code&gt;docker -v&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Install Docker Compose by following these instructions: &lt;a href=&#34;https://docs.docker.com/compose/install/&#34;&gt;https://docs.docker.com/compose/install/&lt;/a&gt; or just copy paste the instructions below.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;sudo curl -L &#34;https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)&#34; -o /usr/local/bin/docker-compose&#xA;sudo chmod +x /usr/local/bin/docker-compose&#xA;docker-compose --version # Check if it&#39;s installed&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Change the permission of /var/run/docker.sock&lt;/p&gt; &lt;pre&gt;&lt;code&gt;sudo nano /etc/systemd/system/sockets.target.wants/docker.socket&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Change the file content to this: (don&#39;t forget to change the &lt;code&gt;SocketUser&lt;/code&gt; value)&lt;/p&gt; &lt;pre&gt;&lt;code&gt;[Unit]&#xA;Description=Docker Socket for the API&#xA;&#xA;[Socket]&#xA;ListenStream=/var/run/docker.sock&#xA;SocketMode=0660&#xA;SocketUser=YOUR_USERNAME_HERE     #### Edit this line to what your linux user is&#xA;SocketGroup=docker&#xA;&#xA;[Install]&#xA;WantedBy=sockets.target&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Add the group &lt;code&gt;docker&lt;/code&gt; to the current user.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;### This creates the group if it doesn&#39;t exist yet&#xA;sudo groupadd docker    &#xA;&#xA;### This attaches current user to `docker` group&#xA;sudo usermod -aG docker $USER&#xA;&#xA;### Reload user to reflect new group&#xA;su - $USER&#xA;&#xA;### Double check that `docker` is in your current group&#xA;groups&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a name=&#34;how-to-install-git&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;How to install Git&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt-get update&#xA;sudo apt-get install git&#xA;&#xA;git --version # Verify that it&#39;s installed&#xA;&#xA;# Replace with your actual name and email&#xA;git config --global user.name &#34;Your Name&#34;&#xA;git config --global user.email &#34;youremail@example.com&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a name=&#34;how-to-install-php-and-composer-2&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;How to install PHP and Composer 2&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt-get update &amp;amp;&amp;amp; sudo apt-get upgrade&#xA;sudo apt-get install php&#xA;&#xA;### Remove apache2 in case it got installed with PHP&#xA;sudo apt remove apache2&#xA;&#xA;### Install Composer 2&#xA;php -r &#34;copy(&#39;https://getcomposer.org/installer&#39;, &#39;composer-setup.php&#39;);&#34;&#xA;php -r &#34;if (hash_file(&#39;sha384&#39;, &#39;composer-setup.php&#39;) === &#39;55ce33d7678c5a611085589f1f3ddf8b3c52d662cd01d4ba75c0ee0459970c2200a51f492d557530c71c15d8dba01eae&#39;) { echo &#39;Installer verified&#39;; } else { echo &#39;Installer corrupt&#39;; unlink(&#39;composer-setup.php&#39;); } echo PHP_EOL;&#34;&#xA;php composer-setup.php&#xA;php -r &#34;unlink(&#39;composer-setup.php&#39;);&#34;&#xA;sudo chmod +x composer.phar&#xA;sudo mv composer.phar /usr/local/bin/composer&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>camptocamp/docker-qgis-server</title>
    <updated>2023-04-03T01:32:14Z</updated>
    <id>tag:github.com,2023-04-03:/camptocamp/docker-qgis-server</id>
    <link href="https://github.com/camptocamp/docker-qgis-server" rel="alternate"></link>
    <summary type="html">&lt;p&gt;All that is needed to generate a proper QGIS server image&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Docker image for QGIS server&lt;/h1&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;The Docker container needs to have access to all files of the QGIS project to be published. Either you create another image to add the files or you inject them using a volume. For example, if your QGIS project is stored in &lt;code&gt;./qgis/project.qgz&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run --detach --publish=8380:80 --volume=${PWD}/qgis:/etc/qgisserver camptocamp/qgis-server&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With the previous command, you&#39;ll get to your server with this URL: &lt;a href=&#34;http://localhost:8380/?MAP=/etc/qgisserver/project.qgz&amp;amp;SERVICE=WMS&amp;amp;REQUEST=GetCapabilities&#34;&gt;http://localhost:8380/?MAP=/etc/qgisserver/project.qgz&amp;amp;SERVICE=WMS&amp;amp;REQUEST=GetCapabilities&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Tuning&lt;/h2&gt; &#xA;&lt;p&gt;You can use the following variables (&lt;code&gt;-e&lt;/code&gt; option in &lt;code&gt;docker run&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;QGIS_CATCH_SEGV&lt;/code&gt;: Set to &lt;code&gt;1&lt;/code&gt; if you want stacktraces in the logs in case of segmentation faults.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;FCGID_MAX_REQUESTS_PER_PROCESS&lt;/code&gt;: The number of requests a QGIS server will serve before being restarted by apache&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;FCGID_MIN_PROCESSES&lt;/code&gt;: The minimum number of fcgi processes to keep (defaults to &lt;code&gt;1&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;FCGID_MAX_PROCESSES&lt;/code&gt;: The maximum number of fcgi processes to keep (defaults to &lt;code&gt;5&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;FCGID_IO_TIMEOUT&lt;/code&gt;: This is the maximum period of time the module will wait while trying to read from or write to a FastCGI application (default is &lt;code&gt;40&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;FCGID_BUSY_TIMEOUT&lt;/code&gt;: The maximum time limit for request handling (defaults to &lt;code&gt;300&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;FCGID_IDLE_TIMEOUT&lt;/code&gt;: Application processes which have not handled a request for this period of time will be terminated (defaults to &lt;code&gt;300&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;FILTER_ENV&lt;/code&gt;: Filter the environment variables with e.g.: &lt;code&gt;| grep -vi _SERVICE_ | grep -vi _TCP | grep -vi _UDP | grep -vi _PORT&lt;/code&gt; to remove the default Kubernetes environment variables (default in an empty string)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;GET_ENV&lt;/code&gt;: alternative to &lt;code&gt;FILTER_ENV&lt;/code&gt;, a command that return the environment variables (defaults to &lt;code&gt;env&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://docs.qgis.org/latest/en/docs/server_manual/config.html?highlight=environment#environment-variables&#34;&gt;See also QGIS server documentation&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Fonts present in the &lt;code&gt;/etc/qgisserver/fonts&lt;/code&gt; directory will be installed and thus usable by QGIS.&lt;/p&gt; &#xA;&lt;h2&gt;Running the client&lt;/h2&gt; &#xA;&lt;p&gt;If you want to edit a project file, you can run the client from a Linux machine with the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run --rm -ti --env=DISPLAY=unix${DISPLAY} --volume=/tmp/.X11-unix:/tmp/.X11-unix --volume=${HOME}:${HOME} camptocamp/qgis-server:master-desktop&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Changelog&lt;/h2&gt; &#xA;&lt;h3&gt;QGIS 3.22&lt;/h3&gt; &#xA;&lt;p&gt;We removed the default values for the following environment variables to better fit with the QGIS documentation:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;QGIS_SERVER_LOG_LEVEL&lt;/code&gt;, was &lt;code&gt;0&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;QGIS_PROJECT_FILE&lt;/code&gt;, was &lt;code&gt;/etc/qgisserver/project.qgs&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;MAX_CACHE_LAYERS&lt;/code&gt;, was &lt;code&gt;&#34;&#34;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;QGIS_AUTH_DB_DIR_PATH&lt;/code&gt;, was &lt;code&gt;/etc/qgisserver/&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;PGSERVICEFILE&lt;/code&gt;, was &lt;code&gt;/etc/qgisserver/pg_service.conf&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Install the pre-commit hooks:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install pre-commit&#xA;pre-commit install --allow-missing-config&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>