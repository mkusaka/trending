<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dockerfile Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-08-14T01:26:12Z</updated>
  <subtitle>Daily Trending of Dockerfile in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>3Kmfi6HP/argo-quicktunnel</title>
    <updated>2023-08-14T01:26:12Z</updated>
    <id>tag:github.com,2023-08-14:/3Kmfi6HP/argo-quicktunnel</id>
    <link href="https://github.com/3Kmfi6HP/argo-quicktunnel" rel="alternate"></link>
    <summary type="html">&lt;p&gt;完全使用临时域名 trycloudflare.com 并且使用订阅来自动获取最新的节点&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;argo-quicktunnel&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;特点：完全使用临时 quicktunnel 并且使用订阅来自动获取最新的节点，全部是使用 trycloudflare.com 域名&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;示例部署演示：&lt;a href=&#34;https://rft8lt-3000.csb.app/host/sub&#34;&gt;https://rft8lt-3000.csb.app/host/sub&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;GitHub Copilot: 以下是根据给定的 &lt;code&gt;api.js&lt;/code&gt; 代码生成的 API 文档，用作项目的 &lt;code&gt;README.md&lt;/code&gt; 文件。&lt;/p&gt; &#xA;&lt;p&gt;这些是 &lt;code&gt;http://localhost:3001/&lt;/code&gt;(Arogo tunnel) 上可用的 API 路径：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;/debug&lt;/code&gt;：标准的 pprof 端点，用于性能分析。&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;/metrics&lt;/code&gt;：从 cloudflared 进程报告广泛的 Prometheus 指标。&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;/healthcheck&lt;/code&gt;：如果 cloudflared 正在运行，则返回标准的 200 OK。&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;/ready&lt;/code&gt;：返回 cloudflared 是否与边缘连接并能够提供流量以及连接器 ID。&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;/quicktunnel&lt;/code&gt;：快速隧道的 API 路径。&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;/config&lt;/code&gt;：如果隧道由 Cloudflare 远程管理，则返回活动配置的 JSON。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;以下是关于如何设置环境变量的文档介绍，以便正确运行 &lt;code&gt;api.js&lt;/code&gt;。&lt;/p&gt; &#xA;&lt;h2&gt;环境变量&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;UUID&lt;/code&gt; 设置一个例子为 &lt;code&gt;91b985e2-7d7d-40e9-9a05-60423e51a632&lt;/code&gt; 的 UUID。&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;UUID&lt;/code&gt;：用于 vlees 的 UUID。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;code&gt;api.js&lt;/code&gt; 使用以下环境变量：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;PORT&lt;/code&gt;：指定应用程序监听的端口号。如果未设置，则默认为 &lt;code&gt;3000&lt;/code&gt;。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;要设置环境变量，请在终端中使用以下语法：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;export VARIABLE_NAME=value&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;例如，要将端口号设置为 &lt;code&gt;8080&lt;/code&gt;，请使用以下命令：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;export PORT=8080&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;请注意，这将仅在当前终端会话中设置环境变量。如果您希望永久设置环境变量，请将其添加到您的 shell 配置文件中，例如 &lt;code&gt;~/.bashrc&lt;/code&gt; 或 &lt;code&gt;~/.zshrc&lt;/code&gt;。&lt;/p&gt; &#xA;&lt;h2&gt;GET /&lt;/h2&gt; &#xA;&lt;p&gt;返回 &lt;code&gt;Hello World! quicktunnel hostname: ${data.hostname}&lt;/code&gt;。&lt;/p&gt; &#xA;&lt;h3&gt;请求参数&lt;/h3&gt; &#xA;&lt;p&gt;无。&lt;/p&gt; &#xA;&lt;h3&gt;响应参数&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;参数名&lt;/th&gt; &#xA;   &lt;th&gt;类型&lt;/th&gt; &#xA;   &lt;th&gt;描述&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;data.hostname&lt;/td&gt; &#xA;   &lt;td&gt;string&lt;/td&gt; &#xA;   &lt;td&gt;quicktunnel 的主机名。&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;示例&lt;/h3&gt; &#xA;&lt;p&gt;请求：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;GET /&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;响应：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Hello World! quicktunnel hostname: example.com&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;GET /health&lt;/h2&gt; &#xA;&lt;p&gt;返回 &lt;code&gt;http://localhost:3001/healthcheck&lt;/code&gt; 的响应。&lt;/p&gt; &#xA;&lt;h3&gt;请求参数&lt;/h3&gt; &#xA;&lt;p&gt;无。&lt;/p&gt; &#xA;&lt;h3&gt;响应参数&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;参数名&lt;/th&gt; &#xA;   &lt;th&gt;类型&lt;/th&gt; &#xA;   &lt;th&gt;描述&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;data&lt;/td&gt; &#xA;   &lt;td&gt;string&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;http://localhost:3001/healthcheck&lt;/code&gt; 的响应。&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;示例&lt;/h3&gt; &#xA;&lt;p&gt;请求：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;GET /health&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;响应：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;OK&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;GET /host&lt;/h2&gt; &#xA;&lt;p&gt;返回 quicktunnel 的主机名。&lt;/p&gt; &#xA;&lt;h3&gt;请求参数&lt;/h3&gt; &#xA;&lt;p&gt;无。&lt;/p&gt; &#xA;&lt;h3&gt;响应参数&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;参数名&lt;/th&gt; &#xA;   &lt;th&gt;类型&lt;/th&gt; &#xA;   &lt;th&gt;描述&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;data.hostname&lt;/td&gt; &#xA;   &lt;td&gt;string&lt;/td&gt; &#xA;   &lt;td&gt;quicktunnel 的主机名。&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;示例&lt;/h3&gt; &#xA;&lt;p&gt;请求：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;GET /host&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;响应：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;example.com&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;GET /host/sub&lt;/h2&gt; &#xA;&lt;p&gt;根据返回 quicktunnel 的主机名，来返回 quicktunnel vless 节点订阅信息。&lt;/p&gt; &#xA;&lt;h3&gt;请求参数&lt;/h3&gt; &#xA;&lt;p&gt;无。&lt;/p&gt; &#xA;&lt;h3&gt;响应参数&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;参数名&lt;/th&gt; &#xA;   &lt;th&gt;类型&lt;/th&gt; &#xA;   &lt;th&gt;描述&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;data.hostname&lt;/td&gt; &#xA;   &lt;td&gt;string&lt;/td&gt; &#xA;   &lt;td&gt;quicktunnel 的主机名。&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;示例&lt;/h3&gt; &#xA;&lt;p&gt;请求：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;GET /host/sub&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;响应：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;vless://91b985e2-7d7d-40e9-9a05-60423e51a632@lanes-slight-silicon-inclusive.trycloudflare.com:80?encryption=none&amp;amp;security=none&amp;amp;fp=random&amp;amp;type=ws&amp;amp;host=lanes-slight-silicon-inclusive.trycloudflare.com&amp;amp;path=%2F%3Fed%3D2048#lanes-slight-silicon-inclusive.trycloudflare.com-HTTP&#xA;vless://91b985e2-7d7d-40e9-9a05-60423e51a632@skk.moe:80?encryption=none&amp;amp;security=none&amp;amp;fp=random&amp;amp;type=ws&amp;amp;host=lanes-slight-silicon-inclusive.trycloudflare.com&amp;amp;path=%2F%3Fed%3D2048#lanes-slight-silicon-inclusive.trycloudflare.com-HTTP-skk.moe&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>LondheShubham153/python-multistage-docker</title>
    <updated>2023-08-14T01:26:12Z</updated>
    <id>tag:github.com,2023-08-14:/LondheShubham153/python-multistage-docker</id>
    <link href="https://github.com/LondheShubham153/python-multistage-docker" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Multistage Dockerfile Example for Flask Application&lt;/h1&gt; &#xA;&lt;p&gt;This repository demonstrates the use of a multistage Dockerfile to build and package a Flask backend application. Multistage builds are used to optimize the final Docker image size and improve security.&lt;/p&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LondheShubham153/python-multistage-docker/master/#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LondheShubham153/python-multistage-docker/master/#prerequisites&#34;&gt;Prerequisites&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LondheShubham153/python-multistage-docker/master/#getting-started&#34;&gt;Getting Started&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LondheShubham153/python-multistage-docker/master/#usage&#34;&gt;Usage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LondheShubham153/python-multistage-docker/master/#dockerfile-explanation&#34;&gt;Dockerfile Explanation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LondheShubham153/python-multistage-docker/master/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LondheShubham153/python-multistage-docker/master/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;Modern application deployments often involve containerizing both the backend and frontend components. This project focuses on using a multistage Dockerfile to efficiently build a Flask backend application, creating a lightweight and secure Docker image.&lt;/p&gt; &#xA;&lt;h2&gt;Prerequisites&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Docker: You need to have Docker installed on your machine. Visit &lt;a href=&#34;https://www.docker.com/get-started&#34;&gt;Docker&#39;s official website&lt;/a&gt; to download and install Docker.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Clone this repository:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone https://github.com/your-username/multistage-flask-app.git&#xA;cd multistage-flask-app&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Build the Docker image:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker build -t my-flask-app .&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Run the Docker container:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker run -p 5000:5000 my-flask-app&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Access the Flask application in your web browser at &lt;code&gt;http://localhost:5000&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Dockerfile Explanation&lt;/h2&gt; &#xA;&lt;p&gt;The multistage Dockerfile consists of two build stages, each optimized for a specific purpose.&lt;/p&gt; &#xA;&lt;h3&gt;Stage 1: Build the Flask Application&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Use a Python base image to build the Flask backend.&lt;/li&gt; &#xA; &lt;li&gt;Copy the backend source code and install dependencies.&lt;/li&gt; &#xA; &lt;li&gt;Build the Flask application.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Stage 2: Final Image&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Use a minimal Python base image for the final image.&lt;/li&gt; &#xA; &lt;li&gt;Copy the built backend from Stage 1.&lt;/li&gt; &#xA; &lt;li&gt;Expose the necessary port and start the Flask application.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Contributions are welcome! If you find any issues or want to improve this project, please open an issue or submit a pull request.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This project is licensed under the &lt;a href=&#34;https://raw.githubusercontent.com/LondheShubham153/python-multistage-docker/master/LICENSE&#34;&gt;MIT License&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>