<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dockerfile Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-10-11T01:33:14Z</updated>
  <subtitle>Daily Trending of Dockerfile in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>bsefwe/mogenius</title>
    <updated>2022-10-11T01:33:14Z</updated>
    <id>tag:github.com,2022-10-11:/bsefwe/mogenius</id>
    <link href="https://github.com/bsefwe/mogenius" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;p&gt;本项目用于在mogenius上部署XRay WebSocket，部署完成后，每次启动应用时，运行的 XRay 将始终为最新版本.&lt;/p&gt; &#xA;&lt;p&gt;&lt;span&gt;🐳&lt;/span&gt; Dockerfiles for &lt;a href=&#34;https://mogenius.io&#34;&gt;mogenius&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;mogenius搭建的账号已经绑定cf，可直接用优选的IP。&lt;/p&gt; &#xA;&lt;p&gt;在Xray.sh文件里修改UUID。&lt;/p&gt; &#xA;&lt;h3&gt;vless客户端配置&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;主机地址&lt;/code&gt;：&lt;code&gt;优选IP&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;uuid&lt;/code&gt;：&lt;code&gt;ad806487-2d26-4636-98b6-ab85cc8521f7&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;端口&lt;/code&gt;：&lt;code&gt;443&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;传输协议&lt;/code&gt;：&lt;code&gt;ws&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;伪装域名&lt;/code&gt;：&lt;code&gt;mogenius的域名&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;路径&lt;/code&gt;：&lt;code&gt;/&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;底层传输安全&lt;/code&gt;：&lt;code&gt;tls&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;跳过证书验证&lt;/code&gt;：&lt;code&gt;false&lt;/code&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>kevinsullivan/TLAPlusDocker</title>
    <updated>2022-10-11T01:33:14Z</updated>
    <id>tag:github.com,2022-10-11:/kevinsullivan/TLAPlusDocker</id>
    <link href="https://github.com/kevinsullivan/TLAPlusDocker" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;VSCode Dev Containter for TLA+&lt;/h1&gt; &#xA;&lt;h2&gt;What this is&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A TLA+ development environment through VSCode, Docker, and Dev Containers&lt;/li&gt; &#xA; &lt;li&gt;Good enough for this Gentle Introduction to TLA+ (not mine): [https://www.youtube.com/watch?v=D_sh1nnX3zY].&lt;/li&gt; &#xA; &lt;li&gt;TLA+ environment based on this installer (not mine): [https://github.com/lemmy/ewd998/blob/main/.devcontainer/install.sh]&lt;/li&gt; &#xA; &lt;li&gt;Installed and running in a generic, official Ubuntu 22.04 container&lt;/li&gt; &#xA; &lt;li&gt;Tested on Windows and Intel Mac host machines.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Dependencies&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install and run Docker Desktop if you haven&#39;t already got it running&lt;/li&gt; &#xA; &lt;li&gt;Install VSCode if necessary, then open a new VSCode editor process&lt;/li&gt; &#xA; &lt;li&gt;Get yourself a GitHub account if you don&#39;t already have one and log in&lt;/li&gt; &#xA; &lt;li&gt;At GitHub, fork &lt;em&gt;this&lt;/em&gt; repository into your GitHub account (do not skip)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How to get it&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;In VSCode, install the remote development extension if it&#39;s not already installed&lt;/li&gt; &#xA; &lt;li&gt;Use the remote-containers &#34;Clone into container&#34; command to clone &lt;em&gt;your fork&lt;/em&gt; into our container&lt;/li&gt; &#xA; &lt;li&gt;Click in the lower right if you want to see the container build, which takes maybe 5-10 minutes.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How to start using it&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Open the test/test.tla file in VSCode.&lt;/li&gt; &#xA; &lt;li&gt;The files you have to start are as &lt;em&gt;at the end&lt;/em&gt; of the video tutorial.&lt;/li&gt; &#xA; &lt;li&gt;Change the name of the color variable to colour. Save the file. There should be an error.&lt;/li&gt; &#xA; &lt;li&gt;Fix the error by undoing the change in spelling. Save. All should be well again.&lt;/li&gt; &#xA; &lt;li&gt;Now start the video and follow along, emptying test.tla to synch it with the start of the video.&lt;/li&gt; &#xA; &lt;li&gt;If you want to flag issues or suggest or contribute improvements, please use GitHub issues and send PRs.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;A Video installation walk-through&lt;/h2&gt; &#xA;&lt;p&gt;Thank you to Ben for producing this video: &lt;a href=&#34;https://www.youtube.com/watch?v=sLGY7_agg4E&#34;&gt;https://www.youtube.com/watch?v=sLGY7_agg4E&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Nice features (as you will see in the video)&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;format and preview specifications in LaTeX&lt;/li&gt; &#xA; &lt;li&gt;generate and preview dot/graphviz state machine visualizations&lt;/li&gt; &#xA; &lt;li&gt;automatically reparse .tla files whenever they&#39;re saved&lt;/li&gt; &#xA; &lt;li&gt;See the .devcontainer/Dockerfile for what&#39;s being set up&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;To disable auto-parse on file save&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;change setting from true to false in .vscode/settings.json for tlaplus&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Regarding bugs and suggested repairs&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Report issues using the issues tab in &lt;em&gt;this&lt;/em&gt; GitHub-hosted repo&lt;/li&gt; &#xA; &lt;li&gt;I welcome pull requests&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contact&lt;/h2&gt; &#xA;&lt;p&gt;Kevin Sullivan Department of Comp. Sci. University of Virginia &lt;a href=&#34;mailto:sullivan@virginia.edu&#34;&gt;sullivan@virginia.edu&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>fenixsoft/openjdk-for-dummies</title>
    <updated>2022-10-11T01:33:14Z</updated>
    <id>tag:github.com,2022-10-11:/fenixsoft/openjdk-for-dummies</id>
    <link href="https://github.com/fenixsoft/openjdk-for-dummies" rel="alternate"></link>
    <summary type="html">&lt;p&gt;一组快速环境构建、编译、裁剪、调试OpenJDK的懒人包&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;openjdk-for-dummies&lt;/h1&gt; &#xA;&lt;p&gt;一组快速环境构建、编译、修改、裁剪、调试OpenJDK的懒人包。&lt;/p&gt; &#xA;&lt;p&gt;本工程是笔者在&lt;a href=&#34;https://github.com/JetBrains/projector-server&#34;&gt;JetBrains Projector&lt;/a&gt;项目基础上修改的headlessly集成开发环境。目标是客户端可以仅通过浏览器，实现在CLion图形化集成开发环境中进行OpenJDK的开发调试工作。JetBrains Projector提供了比直接使用X11 Forwarding、RDP或VNC更高效的远程图形性能，在本机环境或者局域网环境中使用时，能获得几乎与Native IDE相同的响应速度和操作体验。可以说此懒人包确是偷懒的方案，但并非玩具，能够作为VSC Remote之外，另一种本机编码远端编译运行的解决方案，实际应用于生产之中。&lt;/p&gt; &#xA;&lt;h2&gt;使用方法&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;运行以下Docker镜像：&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run -it --rm -p 8887:8887 icyfenix/openjdk-clion:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;此镜像支持Linux、Windows、WSL2、MacOS等宿主环境，不过编译结果与宿主环境无关，编译输出均是Linux-Server-64 Bits的OpenJDK，如需调整，可参见“编译镜像”一节。 出于OpenJDK编译本身&lt;a href=&#34;https://hg.openjdk.java.net/jdk/jdk/raw-file/tip/doc/building.html#build-hardware-requirements&#34;&gt;资源需求&lt;/a&gt;，此容器要求可使用的资源至少应为2 Cores、4 GB RAM、6 GB Disk。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;容器启动后，在浏览器中打开&lt;a href=&#34;http://localhost:8887&#34;&gt;http://localhost:8887&lt;/a&gt;，出现如下界面： &lt;img src=&#34;https://raw.githubusercontent.com/fenixsoft/openjdk-for-dummies/main/images/reg.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &lt;p&gt;CLion并没有像IDEA那样提供免费的社区版，所以这步买了JetBrains产品同学的填账号，没有买的就选择&#34;Evaluate for free&#34;试用30天。JetBrains IDE&lt;a href=&#34;https://github.com/JetBrains/projector-docker#license&#34;&gt;允许&lt;/a&gt;以Projector方式封装为Docker镜像去使用，但IDE本身是收费的，JetBrains对学生、开源作者都有免费授权，产品也极为优秀，希望你能支持正版。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;进入主界面，选择Open，笔者在HOME目录下放了一份JDK15源码，此源码在镜像编译时已自动生成了Slow Debug配置项，并生成好了对应的&lt;a href=&#34;https://hg.openjdk.java.net/jdk/jdk/raw-file/tip/doc/ide.html&#34;&gt;Compilation Database&lt;/a&gt;和CLion的工程配置，因此你可以直接在IDE中导入这个工程。 &lt;img src=&#34;https://raw.githubusercontent.com/fenixsoft/openjdk-for-dummies/main/images/index.png&#34; alt=&#34;index&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;打开工程，待IDE自动更新符号表、索引文件结束之后（视宿主机的性能不同，可能要几分钟时间），你即可以：&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;阅读浏览OpenJDK源码。&lt;br&gt;CLion的各种代码导航、辅助功能可以帮助你更方便地了解工程结构。&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;修改OpenJDK源码并重编译。&lt;br&gt;通过Build菜单中的Build Project或Rebuild Project选项，可增量编译或全量编译源码。全量编译可能需要十分钟以上的时间，但增量编译一般较快，所以在Run/Debug Configurations中默认也会进行增量编译，如果你不希望这样做，可自行在Before Luanch菜单中移除。 &lt;img src=&#34;https://raw.githubusercontent.com/fenixsoft/openjdk-for-dummies/main/images/build.png&#34; alt=&#34;build&#34;&gt; 另再次强调笔者预置的编译配置项为Slow Debug，保留了符号表，禁用了大部分优化，这意味着它很适合调试，但不适合真正地应用于生产环境。如果你需要发布正式产品，请自行建立Release配置项，做法可参见“编译镜像”一节。。&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;跟踪调试HotSpot虚拟机。 笔者预置提供了&lt;code&gt;java -version&lt;/code&gt;和&lt;code&gt;java Helloworld&lt;/code&gt;两个运行配置。如果你是刚刚开始接触OpenJDK源码，不妨在&lt;code&gt;~/jdk/java.base/share/native/libjli/java.c&lt;/code&gt;的&lt;code&gt;JavaMain(void * _args)&lt;/code&gt;方法上打个断点，由此开启你学习HotSpot内部实现的旅程。 &lt;img src=&#34;https://raw.githubusercontent.com/fenixsoft/openjdk-for-dummies/main/images/debug.png&#34; alt=&#34;debug&#34;&gt; 在开始调试之前，你最好至少进行过一次编译，生成了二进制的可运行程序，否则将会在首次运行时自动进行全量编译。&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;调试自己的Java代码。 笔者在&lt;code&gt;/playgrounds&lt;/code&gt;中预置了一个Helloworld Class供测试之用，倘若你跟踪HotSpot的目的是想解决学习工作中预见的真实问题，那可以把你自己的Class或者Jar文件映射到容器中进行调试，譬如：&lt;/p&gt; &lt;pre&gt;&lt;code&gt;docker run -it --rm -p 8887:8887 -v JAVA-APP-PATH:/home/projector-user/playgrounds icyfenix/openjdk-clion:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;编译镜像&lt;/h2&gt; &#xA;&lt;p&gt;本镜像是以Debian 10为基座，整合了JetBrains Projector Server、JetBrains Clion 2020.3、OpenJDK 15（作为Bootstrap JDK）二进制包，以及一份OpenJDK 15的源码，内容多，容量大，所以编译镜像必须具备良好的网络条件，尤其是科学上网。编译步骤倒是颇为简单，具体为：&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;克隆本工程。&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/fenixsoft/openjdk-for-dummies.git&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;建议&lt;/strong&gt;：创建一个空目录，然后在该目录中克隆本工程。由于镜像编译时还会克隆Projector Server与OpenJDK项目，因此它的Docker Build Context是父目录而不是通常的当前目录。如果父目录中有其他内容，将会导致发送给Docker Daemon的内容变多，导致编译时间变长。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;克隆Projector Server与OpenJDK。&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./clone-core.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;编译镜像。&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./build-container.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;镜像编译的过程是完全傻瓜式的，但是实际内容很多，时间也很长，不妨先浏览一下&lt;code&gt;Dockerfile&lt;/code&gt;文件，看看镜像具体做了什么事情，有时候一些小的修改会提高很多的编译效率，譬如脚本中出于版本兼容性考虑，关闭了&lt;a href=&#34;https://docs.docker.com/develop/develop-images/build_enhancements/&#34;&gt;Docker BuildKit&lt;/a&gt;，打开会使得重复编译的速度有很大提升。&lt;/p&gt; &#xA;&lt;p&gt;你可能会基于以下目的，希望编译、定制一份新的镜像：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;希望将它作为正式的工作环境，想保存JetBrains账号、个人习惯配置等信息。笔者建议是你完成配置之后，采用&lt;code&gt;docker commit&lt;/code&gt;命令来保存变更，无必要从头开始构建，这样会快捷许多。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;希望变更内置的JDK源码的版本。JDK的源码是通过&lt;code&gt;clone-core.sh&lt;/code&gt;文件下载的，可以通过修改此文件中JDK的GitHub地址来切换不同的版本，如下：&lt;/p&gt; &lt;pre&gt;&lt;code&gt;git clone https://github.com/openjdk/jdk15.git ../jdk-source&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;希望采用不同的编译配置，譬如编译32 Bits版本，譬如交叉编译出其他系统的JDK版本、譬如建立Fast Debug、Release等其他编译配置项等。这些信息定义在&lt;code&gt;Dockerfile&lt;/code&gt;的&lt;code&gt;configure&lt;/code&gt;中，你可以调整此行的参数来实现：&lt;/p&gt; &lt;pre&gt;&lt;code&gt;./configure --with-boot-jdk=/usr/lib/jvm/openjdk-15-jdk --with-debug-level=slowdebug --disable-warnings-as-errors --build=x86_64-unknown-linux-gnu --host=x86_64-unknown-linux-gnu --with-version-opt=icyfenix.cn&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;希望切换IDE版本、加入其他辅助软件或者IDE Plugins。CLion IDE的下载地址&lt;code&gt;build-container.sh&lt;/code&gt;之中，你可以在&lt;a href=&#34;https://github.com/JetBrains/projector-installer/raw/master/projector_installer/compatible_ide.json&#34;&gt;这里&lt;/a&gt;找到其他兼容的IDE列表，更换其中的下载地址即可。&lt;/p&gt; &lt;pre&gt;&lt;code&gt;downloadUrl=${2:-https://download.jetbrains.com/cpp/CLion-2020.3.2.tar.gz}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;IDE也可以直接在市场中安装Plugins，但想支持独立于IDE的其他软件（譬如中文输入法）则有较大困难。由于Projector本质上是一种AWT的实现，因此只可能支持Swing应用以headlessly形式运行，在获得良好交互性能的同时，也决定了它不太可能像RDP、VNC那样实现与应用无关的全面兼容性。&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;其他&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;如果打算使用此镜像用作实际工作环境，建议采用JetBrains专门提供的PWA外壳（&lt;a href=&#34;https://github.com/JetBrains/projector-client/releases&#34;&gt;Projector Luancher&lt;/a&gt;）来代替Chrome、Safari浏览器。否则在浏览器中写代码总会遇到一些冲突问题，譬如查找代码&lt;code&gt;Ctrl+F&lt;/code&gt;却弹出了浏览器的搜索框等。&lt;/li&gt; &#xA; &lt;li&gt;如果你打算以iPad作为编码客户端，那服务器就不能使用SSL（仅能用HTTP，不能用HTTPS），因为iPad不支持&lt;a href=&#34;https://en.wikipedia.org/wiki/Self-signed_certificate&#34;&gt;Self-Signed&lt;/a&gt; WebSockets。&lt;/li&gt; &#xA; &lt;li&gt;如果响应好的话，后续笔者可能会再做一些别的复杂环境，譬如Kubernetes（应该会是K3S）配GoLand之类的源码IDE镜像。&lt;/li&gt; &#xA; &lt;li&gt;镜像压缩后有2.08 GB，Keep Patient。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;协议&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;本文档代码部分采用&lt;a href=&#34;https://www.apache.org/licenses/LICENSE-2.0&#34;&gt;Apache 2.0协议&lt;/a&gt;进行许可。遵循许可的前提下，你可以自由地对代码进行修改，再发布，可以将代码用作商业用途。但要求你： &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;署名&lt;/strong&gt;：在原有代码和衍生代码中，保留原作者署名及代码来源信息。&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;保留许可证&lt;/strong&gt;：在原有代码和衍生代码中，保留Apache 2.0协议文件。&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>