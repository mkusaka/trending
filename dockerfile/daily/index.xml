<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dockerfile Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-09-08T01:37:13Z</updated>
  <subtitle>Daily Trending of Dockerfile in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>hellofresh/docker-node-ci</title>
    <updated>2022-09-08T01:37:13Z</updated>
    <id>tag:github.com,2022-09-08:/hellofresh/docker-node-ci</id>
    <link href="https://github.com/hellofresh/docker-node-ci" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Lightweight Docker container used for building deployment artefacts in Concourse for node apps&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>github/request-marketplace-action</title>
    <updated>2022-09-08T01:37:13Z</updated>
    <id>tag:github.com,2022-09-08:/github/request-marketplace-action</id>
    <link href="https://github.com/github/request-marketplace-action" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Actions workflows to help organizations manage the process of users requesting to use GitHub Actions from Marketplace and approving or denying such requests within an organization.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;request-marketplace-action&lt;/h1&gt; &#xA;&lt;h2&gt;Background&lt;/h2&gt; &#xA;&lt;p&gt;In &lt;a href=&#34;https://docs.github.com/en/enterprise-server&#34;&gt;GitHub Enterprise Server&lt;/a&gt; you can allow access to &lt;a href=&#34;https://github.com/marketplace?type=actions&#34;&gt;marketplace actions&lt;/a&gt; by configuring &lt;a href=&#34;https://docs.github.com/en/enterprise-server/admin/github-actions/managing-access-to-actions-from-githubcom/enabling-automatic-access-to-githubcom-actions-using-github-connect&#34;&gt;GitHub Connect&lt;/a&gt;. However, controlling which actions can be used comes at a huge administrative cost, as you would need to configure each org to allow the actions you approve of. Sometimes org admins are not the appropriate people to decide what actions are allowed or not. You may want to control allowed action for the entire enterprise, which can be done through the Enterprise Settings&amp;gt;Policies&amp;gt;Actions. However, there is no API to automate updating this setting, and there is no way to stage actions and allow admins to evaluate them prior to approval for wider use within your enterprise. The same issue exist for managing access to marketplace actions in &lt;a href=&#34;https://github.com/enterprise&#34;&gt;GitHub Enterprise Cloud&lt;/a&gt;. In these case, you want to host the requested marketplace actions in an org within your enterprise as private repos, allowing admins to evaluate the actions prior to making them available within your enterprise. Upon approval, the visibility of the repo changes so that the action is available to users within your enterprise.&lt;/p&gt; &#xA;&lt;p&gt;This project provides two actions workflows to help manage the process of requesting marketplace actions and approving or denying such requests: Initialize Marketplace Action Request and Approve or Deny Marketplace Action Request&lt;/p&gt; &#xA;&lt;h2&gt;Workflows&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Initialize Marketplace Action Request&lt;/strong&gt; is triggered when a user opens an issue requesting a spicific marketplace action. The marketplace actions is &#34;staged&#34; as a private repo in your org where you intend to host the approved actions. Within this private repo, admins can review the marketplace action code and determine if it is appropriate for use within your enterprise.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Approve or Deny Marketplace Action Request&lt;/strong&gt; is triggered when a user comments on an issue. If the user commenting is a member of the approvers team, and the comment includes the word &#34;approve&#34;, then the visibility of the repo create by the previous workflow is changed from &#34;private&#34; to &#34;internal&#34; (GHEC EMU and GHES &amp;gt;= 3.5, for GHES &amp;lt; 3.5 repos become &#34;public&#34; on approval) and the issue is closed. If the user commenting is a member of the approvers team, and the comment includes the word &#34;deny&#34;, then the repo create by the previous workflow is put in &#34;archive&#34; mode and remains &#34;private&#34;.&lt;/p&gt; &#xA;&lt;h2&gt;Requesting a marketplace action&lt;/h2&gt; &#xA;&lt;p&gt;To request a marketplace action, open an issue in this repo. Include in your issue, the following markdown...&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    ```json request&#xA;    {&#xA;        &#34;owner&#34;: &#34;hashicorp-contrib&#34;,&#xA;        &#34;repo&#34;: &#34;setup-packer&#34;,&#xA;        &#34;version&#34;: &#34;latest&#34;&#xA;    }&#xA;    ```&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The example above refers to the repo &lt;code&gt;https://github.com/hashicorp-contrib/setup-packer&lt;/code&gt;. The value of the &lt;code&gt;version&lt;/code&gt; field needs to either match exactly a release in the repo, or be &lt;code&gt;latest&lt;/code&gt;. The value of &lt;code&gt;latest&lt;/code&gt; will cause the workflow to find the latest release available currently.&lt;br&gt; See &lt;a href=&#34;https://raw.githubusercontent.com/github/request-marketplace-action/main/examples.md&#34;&gt;examples.md&lt;/a&gt; for more examples.&lt;/p&gt; &#xA;&lt;h2&gt;Prerequisites&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.github.com/en/enterprise-server@3.5/get-started/onboarding/getting-started-with-github-enterprise-server&#34;&gt;GitHub Enterprise Server v3.x&lt;/a&gt; or &lt;a href=&#34;https://docs.github.com/en/enterprise-cloud@latest/admin/identity-and-access-management/using-enterprise-managed-users-for-iam/about-enterprise-managed-users&#34;&gt;GitHub Enterprise Managed Users (EMU) Account on GitHub.com&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;You must have &lt;a href=&#34;https://docs.github.com/en/enterprise-server@3.4/admin/github-actions/enabling-github-actions-for-github-enterprise-server&#34;&gt;enabled GitHub Actions for GitHub Enterprise Server&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;You have an org created where you intend to host your approved actions. Let&#39;s call it &lt;code&gt;actions-approved&lt;/code&gt; for now.&lt;/li&gt; &#xA; &lt;li&gt;You have an org created where you intend to host the repos that will run these workflow. Let&#39;s call it &lt;code&gt;admin-ops&lt;/code&gt; for now.&lt;/li&gt; &#xA; &lt;li&gt;You have a team created within the &lt;code&gt;admin-ops&lt;/code&gt; org. Members of this team will be able to approve or deny requests for marketplace actions. Let&#39;s call it &lt;code&gt;actions-approvers&lt;/code&gt; for now.&lt;/li&gt; &#xA; &lt;li&gt;You need runners available to the repo or org where you intend to run these workflows.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Configure this repo with a sercret named &lt;code&gt;TOKEN&lt;/code&gt; with the value of a PAT that has &lt;code&gt;admin:org&lt;/code&gt;, &lt;code&gt;repo&lt;/code&gt;, and &lt;code&gt;workflow&lt;/code&gt; scope on your GHEC server.&lt;/li&gt; &#xA; &lt;li&gt;Configure this repo with the following repo secrets and note their values below. These are not really secrets, but rather config values that should be known.&lt;br&gt; &lt;code&gt;ADMIN_OPS_ORG&lt;/code&gt;: admin-ops&lt;br&gt; &lt;code&gt;ACTIONS_APPROVED_ORG&lt;/code&gt;: actions-approved&lt;br&gt; &lt;code&gt;ACTIONS_APPROVERS_TEAM&lt;/code&gt;: actions-approvers&lt;/li&gt; &#xA; &lt;li&gt;Configure the Enterprise Actions Policies to allow select actions. Allow specified actions as follows: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;peter-murray/issue-body-parser-action@v1 (required by these workflows)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Installing these workflows into another repo&lt;/h2&gt; &#xA;&lt;p&gt;You may already have requests for marketplace actions occuring in another repo, and want to simply use these workflows in that repo.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Make sure the &lt;a href=&#34;https://raw.githubusercontent.com/github/request-marketplace-action/main/#prerequisites&#34;&gt;prerequisutes&lt;/a&gt; above are met.&lt;/li&gt; &#xA; &lt;li&gt;Follow the &lt;a href=&#34;https://raw.githubusercontent.com/github/request-marketplace-action/main/#setup&#34;&gt;setup&lt;/a&gt; instructions above on the repo you intent to use.&lt;/li&gt; &#xA; &lt;li&gt;Move the contents of the this repos .github directory into the .github directory of the repo you intent to use. Be careful not to clobber any existing files in the .github repo!&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
  <entry>
    <title>hellofresh/strider-docker-spark</title>
    <updated>2022-09-08T01:37:13Z</updated>
    <id>tag:github.com,2022-09-08:/hellofresh/strider-docker-spark</id>
    <link href="https://github.com/hellofresh/strider-docker-spark" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Strider CD docker image containing Apache Spark 1.5.2 and its dependencies&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;strider-docker-spark &lt;a href=&#34;https://quay.io/repository/hellofresh/strider-docker-spark&#34;&gt;&lt;img src=&#34;https://quay.io/repository/hellofresh/strider-docker-spark/status?token=b1a92a8a-6ed0-4c79-bb08-69819ce8f033&#34; alt=&#34;Docker Repository on Quay&#34; title=&#34;Docker Repository on Quay&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;A Strider CD docker image containing Apache Spark 1.5.2 and its dependencies&lt;/p&gt;</summary>
  </entry>
</feed>