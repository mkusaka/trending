<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dockerfile Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-12-12T01:47:50Z</updated>
  <subtitle>Daily Trending of Dockerfile in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>josephmachado/simple_dbt_project</title>
    <updated>2023-12-12T01:47:50Z</updated>
    <id>tag:github.com,2023-12-12:/josephmachado/simple_dbt_project</id>
    <link href="https://github.com/josephmachado/simple_dbt_project" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Code for dbt tutorial&lt;/p&gt;&lt;hr&gt;&lt;p&gt;This is the code repo for dbt tutorial at &lt;a href=&#34;https://www.startdataengineering.com/post/dbt-data-build-tool-tutorial&#34;&gt;https://www.startdataengineering.com/post/dbt-data-build-tool-tutorial&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Setup&lt;/h1&gt; &#xA;&lt;h3&gt;Prerequisites&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.docker.com/get-docker/&#34;&gt;Docker&lt;/a&gt; and &lt;a href=&#34;https://docs.docker.com/compose/install/&#34;&gt;Docker compose&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.getdbt.com/dbt-cli/installation/&#34;&gt;dbt&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.pgcli.com/install&#34;&gt;pgcli&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://git-scm.com/book/en/v2/Getting-Started-Installing-Git&#34;&gt;git&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Clone the git repo and start the warehouse &amp;amp; dbt docker containers, as shown below.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/josephmachado/simple_dbt_project.git&#xA;cd simple_dbt_project&#xA;make up&#xA;make sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We use &lt;code&gt;make sh&lt;/code&gt; to log into the dbt docker container, &amp;amp; run dbt commands.&lt;/p&gt; &#xA;&lt;h2&gt;Run dbt&lt;/h2&gt; &#xA;&lt;p&gt;Once you are inside the dbt docker container, run the following commands.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd $WORKDIR # go to the directory where we have dbt code&#xA;dbt deps&#xA;dbt snapshot&#xA;dbt run --select sde_dbt_tutorial&#xA;dbt test&#xA;dbt docs generate&#xA;dbt docs serve&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Go to &lt;a href=&#34;http://localhost:8080&#34;&gt;http://localhost:8080&lt;/a&gt; to see the dbt documentation (press ctrl+c).&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;[Optional] We can create a data observability report with Elemetary as shown below:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;dbt run --select elementary&#xA;edr report&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;From your file system, open the html file at the path &lt;code&gt;sde_dbt_tutorial/edr_target/elementary_report.html&lt;/code&gt; on your broswer to see the data observability report.&lt;/p&gt; &#xA;&lt;p&gt;You can exit the dbt container using &lt;code&gt;exit&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Let&#39;s do some testing, Insert some data into source customer table, to demonstrate dbt snapshots. From your terminal (after exiting dbt container) run the following command.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make warehouse&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You will be logged into your warehouse, here use the below command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;COPY warehouse.customers(customer_id, zipcode, city, state_code, datetime_created, datetime_updated) FROM &#39;/input_data/customer_new.csv&#39; DELIMITER &#39;,&#39; CSV HEADER;&#xA;\q&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run snapshot and create models again.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make sh&#xA;cd $WORKDIR # go to the directory where we have dbt code&#xA;dbt snapshot --select sde_dbt_tutorial&#xA;dbt run --select sde_dbt_tutorial&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can exit the dbt container using &lt;code&gt;exit&lt;/code&gt;. From your terminal (after exiting dbt container) run the following command.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make warehouse&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;select * from warehouse.customer_orders limit 3;&#xA;\q&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Stop docker container&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make down&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>keep-network/bitcoind-docker</title>
    <updated>2023-12-12T01:47:50Z</updated>
    <id>tag:github.com,2023-12-12:/keep-network/bitcoind-docker</id>
    <link href="https://github.com/keep-network/bitcoind-docker" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Bitcoin Core Full Node&lt;/h1&gt; &#xA;&lt;div id=&#34;preamble&#34;&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;This is Dockerfile for Bitcoin Core full node application (&lt;code&gt;bitcoind&lt;/code&gt;).&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;_bitcoin&#34;&gt;Bitcoin&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;ulist&#34;&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt; &lt;p&gt;RPC API: &lt;a href=&#34;https://developer.bitcoin.org/reference/rpc/&#34; class=&#34;bare&#34;&gt;https://developer.bitcoin.org/reference/rpc/&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;/ul&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;_docker&#34;&gt;Docker&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;Dockerfile is based on:&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;ulist&#34;&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/kylemanna/docker-bitcoind&#34; class=&#34;bare&#34;&gt;https://github.com/kylemanna/docker-bitcoind&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/keep-network/local-setup/tree/main/bitcoin&#34; class=&#34;bare&#34;&gt;https://github.com/keep-network/local-setup/tree/main/bitcoin&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;/ul&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;_list_of_bitcoin_node_versions&#34;&gt;List of Bitcoin node versions&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;&lt;a href=&#34;https://bitcoincore.org/bin/&#34; class=&#34;bare&#34;&gt;https://bitcoincore.org/bin/&lt;/a&gt;&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;_docker_registry&#34;&gt;Docker Registry&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;We are using Docker Hub for storing images.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;&lt;a href=&#34;https://hub.docker.com/r/keepnetwork/bitcoind&#34; class=&#34;bare&#34;&gt;https://hub.docker.com/r/keepnetwork/bitcoind&lt;/a&gt;&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt;</summary>
  </entry>
  <entry>
    <title>runpod-workers/worker-template</title>
    <updated>2023-12-12T01:47:50Z</updated>
    <id>tag:github.com,2023-12-12:/runpod-workers/worker-template</id>
    <link href="https://github.com/runpod-workers/worker-template" rel="alternate"></link>
    <summary type="html">&lt;p&gt;üöÄ | A simple worker that can be used as a starting point to build your own custom RunPod Endpoint API worker.&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h1&gt;Template | Worker&lt;/h1&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/runpod-workers/worker-template/actions/workflows/CI-test_handler.yml&#34;&gt;&lt;img src=&#34;https://github.com/runpod-workers/worker-template/actions/workflows/CI-test_handler.yml/badge.svg?sanitize=true&#34; alt=&#34;CI | Test Handler&#34;&gt;&lt;/a&gt; &amp;nbsp; &lt;a href=&#34;https://github.com/runpod-workers/worker-template/actions/workflows/build-test-release.yml&#34;&gt;&lt;img src=&#34;https://github.com/runpod-workers/worker-template/actions/workflows/build-test-release.yml/badge.svg?sanitize=true&#34; alt=&#34;CD | Build-Test-Release&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;üöÄ | A simple worker that can be used as a starting point to build your own custom RunPod Endpoint API worker.&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;üìñ | Getting Started&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Clone this repository.&lt;/li&gt; &#xA; &lt;li&gt;(Optional) Add DockerHub credentials to GitHub Secrets.&lt;/li&gt; &#xA; &lt;li&gt;Add your code to the &lt;code&gt;src&lt;/code&gt; directory.&lt;/li&gt; &#xA; &lt;li&gt;Update the &lt;code&gt;handler.py&lt;/code&gt; file to load models and process requests.&lt;/li&gt; &#xA; &lt;li&gt;Add any dependencies to the &lt;code&gt;requirements.txt&lt;/code&gt; file.&lt;/li&gt; &#xA; &lt;li&gt;Add any other build time scripts to the&lt;code&gt;builder&lt;/code&gt; directory, for example, downloading models.&lt;/li&gt; &#xA; &lt;li&gt;Update the &lt;code&gt;Dockerfile&lt;/code&gt; to include any additional dependencies.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;‚öôÔ∏è | CI/CD (GitHub Actions)&lt;/h3&gt; &#xA;&lt;p&gt;As a reference this repository provides example CI/CD workflows to help you test your worker and build a docker image. The three main workflows are:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;CI-test_handler.yml&lt;/code&gt; - Tests the handler using the input provided by the &lt;code&gt;--test_input&lt;/code&gt; argument when calling the file containing your handler.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Test Handler&lt;/h3&gt; &#xA;&lt;p&gt;This workflow will validate that your handler works as expected. You may need to add some dependency installations to the &lt;code&gt;CI-test_handler.yml&lt;/code&gt; file to ensure your handler can be tested.&lt;/p&gt; &#xA;&lt;p&gt;The action expects the following arguments to be available:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;vars.RUNNER_24GB&lt;/code&gt; | The endpoint ID on RunPod for a 24GB runner.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;secrets.RUNPOD_API_KEY&lt;/code&gt; | Your RunPod API key.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;secrets.GH_PAT&lt;/code&gt; | Your GitHub Personal Access Token.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;vars.GH_ORG&lt;/code&gt; | The GitHub organization that owns the repository, this is where the runner will be added to.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Test End-to-End&lt;/h3&gt; &#xA;&lt;p&gt;This repository is setup to automatically build and push a docker image to the GitHub Container Registry. You will need to add the following to the GitHub Secrets for this repository to enable this functionality:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;DOCKERHUB_USERNAME&lt;/code&gt; | Your DockerHub username for logging in.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;DOCKERHUB_TOKEN&lt;/code&gt; | Your DockerHub token for logging in.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Additionally, the following need to be added as GitHub actions variables:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;DOCKERHUB_REPO&lt;/code&gt; | The name of the repository you want to push to.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;DOCKERHUB_IMG&lt;/code&gt; | The name of the image you want to push to.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The &lt;code&gt;CD-docker_dev.yml&lt;/code&gt; file will build the image and push it to the &lt;code&gt;dev&lt;/code&gt; tag, while the &lt;code&gt;CD-docker_release.yml&lt;/code&gt; file will build the image on releases and tag it with the release version.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;CI-test_worker.yml&lt;/code&gt; file will test the worker using the input provided by the &lt;code&gt;--test_input&lt;/code&gt; argument when calling the file containing your handler. Be sure to update this workflow to install any dependencies you need to run your tests.&lt;/p&gt; &#xA;&lt;h2&gt;Example Input&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;    &#34;input&#34;: {&#xA;        &#34;name&#34;: &#34;John Doe&#34;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;üí° | Best Practices&lt;/h2&gt; &#xA;&lt;p&gt;System dependency installation, model caching, and other shell tasks should be added to the &lt;code&gt;builder/setup.sh&lt;/code&gt; this will allow you to easily setup your Dockerfile as well as run CI/CD tasks.&lt;/p&gt; &#xA;&lt;p&gt;Models should be part of your docker image, this can be accomplished by either copying them into the image or downloading them during the build process.&lt;/p&gt; &#xA;&lt;p&gt;If using the input validation utility from the runpod python package, create a &lt;code&gt;schemas&lt;/code&gt; python file where you can define the schemas, then import that file into your &lt;code&gt;handler.py&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;h2&gt;üîó | Links&lt;/h2&gt; &#xA;&lt;p&gt;üê≥ &lt;a href=&#34;https://hub.docker.com/r/runpod/serverless-hello-world&#34;&gt;Docker Container&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>