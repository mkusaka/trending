<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dockerfile Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-11-18T01:32:14Z</updated>
  <subtitle>Daily Trending of Dockerfile in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>eugene-krivosheyev/podman</title>
    <updated>2022-11-18T01:32:14Z</updated>
    <id>tag:github.com,2022-11-18:/eugene-krivosheyev/podman</id>
    <link href="https://github.com/eugene-krivosheyev/podman" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Podman training&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Intro to Podman&lt;/h1&gt; &#xA;&lt;p&gt;2 days, 8 ac.hrs, 7 as.hrs.&lt;/p&gt; &#xA;&lt;h1&gt;Знакомство&lt;/h1&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Роль&lt;/li&gt; &#xA; &lt;li&gt;Текущий уровень с Linux: 0–3&lt;/li&gt; &#xA; &lt;li&gt;Текущий уровень с Docker/Podman: 0–3&lt;/li&gt; &#xA; &lt;li&gt;Как поймете, что тренинг дал Вам ценность?&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;Prerequisites&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Virtual machine for practice @ vra8: &lt;code&gt;IT Academy Training Group&lt;/code&gt;, HDD 50Gb, OS AlmaLinux + local ssh client&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Доступен git repo с данным руководством {{ git-repo }} &lt;code&gt;https://github.com/eugene-krivosheyev/podman&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Доступен {{ registry-host }}&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Доступ учетной записи {{ registry-account }} на {{ registry-host }}&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;a href=&#34;https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux_atomic_host/7/html/managing_containers/finding_running_and_building_containers_with_podman_skopeo_and_buildah&#34;&gt;Установлен Podman и зависимости&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo dnf update&#xA;sudo dnf install -y podman&#xA;sudo dnf install -y slirp4netns # for rootless containers&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo dnf install -y bash-completion&#xA;source &amp;lt;(podman completion bash)&#xA;sudo podman completion -f /etc/bash_completion.d/podman bash&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h1&gt;Intro to containerization and Podman &lt;sup&gt;30 мин&lt;/sup&gt;&lt;/h1&gt; &#xA;&lt;h2&gt;Задачи контейнеризации&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Переносимость ПО: запуск на разных окружениях – dev, test, prod&lt;/li&gt; &#xA; &lt;li&gt;исполняемые файлы нашего ПО&lt;/li&gt; &#xA; &lt;li&gt;зависимости&lt;/li&gt; &#xA; &lt;li&gt;конфигурация&lt;/li&gt; &#xA; &lt;li&gt;аргументы командной строки&lt;/li&gt; &#xA; &lt;li&gt;порты&lt;/li&gt; &#xA; &lt;li&gt;побочные эффекты&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Контейнеризация vs виртуализация&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;место на диске для гостевой ОС&lt;/li&gt; &#xA; &lt;li&gt;время запуска гостевой ОС&lt;/li&gt; &#xA; &lt;li&gt;overhead операций гостевой ОС&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Ключевые термины контейнеризации&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/eugene-krivosheyev/podman/main/img/containerization.svg&#34;&gt;Схема контейнеризации&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Host&lt;/li&gt; &#xA; &lt;li&gt;Image&lt;/li&gt; &#xA; &lt;li&gt;Image Registry&lt;/li&gt; &#xA; &lt;li&gt;Container&lt;/li&gt; &#xA; &lt;li&gt;Port Mapping&lt;/li&gt; &#xA; &lt;li&gt;Mounts&lt;/li&gt; &#xA; &lt;li&gt;Pod&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;puml&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-puml&#34;&gt;@startuml&#xA;node &#34;image\nregistry&#34; {&#xA;    database &#34;disk\nimage&#34; as disk_image&#xA;}&#xA;&#xA;node &#34;host&#34; {&#xA;    rectangle &#34;pod&#34; {&#xA;        rectangle &#34;infra\ncontainer&#34;&#xA;        rectangle &#34;container&#34; {&#xA;            component &#34;application&#34;&#xA;            database &#34;container\nlayer&#34; as layer&#xA;        }&#xA;    }&#xA;    database &#34;disk&#34; {&#xA;        database &#34;image&#34;&#xA;        file &#34;volume&#34;&#xA;        folder &#34;shared\nfolder&#34; as folder&#xA;        disk_image - image&#xA;    }&#xA;    image --layer&#xA;    volume -# container&#xA;    folder -# container&#xA;    volume -# pod&#xA;    folder -# pod&#xA;}&#xA;&#xA;pod #--# host : &#34;port\nmapping&#34;&#xA;container #--# host : &#34;port\nmapping&#34;&#xA;@enduml&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Podman vs другой популярный стиральный порошок&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;p&gt;&lt;code&gt;pod&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;bunch of containers&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;infra&lt;/code&gt; container&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;localhost&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;port mappings&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;mounts&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;p&gt;daemonless&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;p&gt;rootfull and rootless modes&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Hands-on practice quest #00: Prerequisites sound-check and tools install &lt;sup&gt;20 мин парной практики + 10 мин дебриф&lt;/sup&gt;&lt;/h1&gt; &#xA;&lt;h2&gt;Given&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Пары участников с чередованием ролей в паре&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Форк данного руководства для собственных пометок&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Все команды запускаются из-под суперпользователя&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;или&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;su -&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Как описать &lt;em&gt;сценарий&lt;/em&gt; использования команд?&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;- каоманды перевода системы в нужное состояние&#xA;- команды действия&#xA;- команды проверки успешности и корректности действия &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Hints&lt;/li&gt; &#xA; &lt;li&gt;при работе в терминале используйте &lt;code&gt;Tab&lt;/code&gt; и &lt;code&gt;↑&lt;/code&gt; для автоподстановки значений&lt;/li&gt; &#xA; &lt;li&gt;синонимы команд cli&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;... --help&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.podman.io/en/latest/Commands.html&#34;&gt;podman cli reference&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;When участники &lt;em&gt;именуют сценарии&lt;/em&gt;, выполняют команды и анализируют их вывод и поведение&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Сценарий &#34;Как ...?&#34;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;podman version # TODO: собственные пометки участников для будущего использования в проектах&#xA;podman system info&#xA;podman system df&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Сценарий &#34;Как ...?&#34;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;podman logout&#xA;podman login {{ registry-host }}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Сценарий &#34;Как найти нужный образ в registry?&#34; Залогиниться браузером по адресу {{ registry-host }}, в поиске найти нужный образ и скопировать полное символьное имя (включая сетевой адрес хоста).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Сценарий &#34;Как ...?&#34;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;podman image pull {{ registry-host }}/{{ os-images-path }}/alpine:3.14&#xA;podman system df&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Сценарий &#34;Как ...?&#34;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;podman container run hello&#xA;&#xA;podman container run --name demo -it {{ registry-host }}/{{ os-images-path }}/alpine:3.14&#xA;/# cat /etc/os-release&#xA;/# exit &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Сценарий &#34;Как ...?&#34;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;podman container ls [--all]&#xA;podman container rm demo&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Then участники отвечают на вопросы&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Как назвали сценарии?&lt;/li&gt; &#xA; &lt;li&gt;Успешна ли сконфигурирована система для использования Podman?&lt;/li&gt; &#xA; &lt;li&gt;Откуда взялся образ диска?&lt;/li&gt; &#xA; &lt;li&gt;Сколько места занимает образ?&lt;/li&gt; &#xA; &lt;li&gt;Сколько места занимает контейнер?&lt;/li&gt; &#xA; &lt;li&gt;Какая версия образа скачивается по умолчанию?&lt;/li&gt; &#xA; &lt;li&gt;Какая гостевая команда запускается при запуске контейнера?&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Жизненный цикл готового образа &lt;sup&gt;30&lt;/sup&gt;&lt;/h1&gt; &#xA;&lt;h2&gt;Зачем нужен образ&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Задача среды исполнения контейнеров: изоляция нашего ПО от хоста&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Отображение диска контейнера на диск хоста: &lt;em&gt;образ&lt;/em&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Что хранит образ&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Что должно быть на диске для запуска и работы контейнеризованного приложения?&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Состав образа диска (от &lt;code&gt;scratch&lt;/code&gt; до prod-ready)&lt;/li&gt; &#xA; &lt;li&gt;OS libraries&lt;/li&gt; &#xA; &lt;li&gt;OS package manager (для удобной установки зависимостей, нужен на этапе сборки образа)&lt;/li&gt; &#xA; &lt;li&gt;OS commands (для отладки, мониторинга и траблшутинга контейнеров на этапе эксплуатации)&lt;/li&gt; &#xA; &lt;li&gt;Application libraries&lt;/li&gt; &#xA; &lt;li&gt;Application executables&lt;/li&gt; &#xA; &lt;li&gt;Config files&lt;/li&gt; &#xA; &lt;li&gt;Data files&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ podman run --rm -it alpine:3.14 ls&#xA;bin    dev    etc    home   lib    media  mnt    opt    proc   root   run    sbin   srv    sys    tmp    usr    var&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Как идентифицируется образ&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ podman images&#xA;REPOSITORY                TAG         IMAGE ID      CREATED       SIZE&#xA;quay.io/podman/hello      latest      577bf902f284  9 hours ago   85.1 kB&#xA;&amp;lt;none&amp;gt;                    &amp;lt;none&amp;gt;      4f391b4bf86f  3 days ago    85.1 kB&#xA;docker.io/library/alpine  3.14        376ba31ae3da  2 months ago  5.63 MB&#xA;docker.io/library/alpine  latest      a6215f271958  2 months ago  5.58 MB&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;id&lt;/code&gt; как хеш образа&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;хост/группа/имя&lt;/code&gt; как имя &lt;em&gt;репозитория&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;хост/группа/имя:тег&lt;/code&gt; как полное символьное имя&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Как создается образ&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;podman container run&lt;/code&gt; + side effects &amp;gt; &lt;code&gt;podman container commit&lt;/code&gt; &amp;gt; &lt;code&gt;podman image push&lt;/code&gt; # редко используемый &#34;ручной&#34; ЖЦ&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;podman image build&lt;/code&gt; &amp;gt; &lt;code&gt;podman image push&lt;/code&gt; # штатный автоматизированный ЖЦ&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://docs.oracle.com/en/operating-systems/oracle-linux/podman/podman-ConfiguringStorageforPodman.html&#34;&gt;Как хранится образ&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Overlay FS&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ podman image history quay.io/podman/hello&#xA;ID            CREATED       CREATED BY                                     SIZE        COMMENT&#xA;577bf902f284  10 hours ago  /bin/sh -c #(nop) LABEL &#34;org.opencontainer...  0 B         FROM d2f3fdcf80a2&#xA;&amp;lt;missing&amp;gt;     10 hours ago  /bin/sh -c #(nop) LABEL &#34;org.opencontainer...  0 B         FROM cc07153b17e6&#xA;&amp;lt;missing&amp;gt;     10 hours ago  /bin/sh -c #(nop) LABEL &#34;org.opencontainer...  0 B         FROM d45976f9036e&#xA;&amp;lt;missing&amp;gt;     10 hours ago  /bin/sh -c #(nop) CMD [&#34;/usr/local/bin/pod...  0 B         FROM aeedbc3e44e3&#xA;&amp;lt;missing&amp;gt;     10 hours ago  /bin/sh -c #(nop) COPY file:d246003209ea6b...  80.9 kB     FROM a796bd9429dc&#xA;&amp;lt;missing&amp;gt;     10 hours ago  /bin/sh -c #(nop) USER 1000                    0 B         FROM 190f78d5a9fb&#xA;&amp;lt;missing&amp;gt;     10 hours ago  /bin/sh -c #(nop) LABEL artist=&#34;Máirín N...    0 B         FROM 78ab72a99b9f&#xA;&amp;lt;missing&amp;gt;     10 hours ago  /bin/sh -c #(nop) LABEL maintainer=&#34;Podman...  0 B&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ docker run --rm -v /var/run/docker.sock:/var/run/docker.sock nate/dockviz images -t&#xA;├─&amp;lt;missing&amp;gt; Virtual Size: 5.6 MB&#xA;│ └─&amp;lt;missing&amp;gt; Virtual Size: 5.6 MB&#xA;│   └─&amp;lt;missing&amp;gt; Virtual Size: 5.6 MB&#xA;│     └─&amp;lt;missing&amp;gt; Virtual Size: 19.8 MB&#xA;│       └─&amp;lt;missing&amp;gt; Virtual Size: 19.8 MB&#xA;│         └─&amp;lt;missing&amp;gt; Virtual Size: 19.8 MB&#xA;│           └─&amp;lt;missing&amp;gt; Virtual Size: 116.7 MB&#xA;│             └─&amp;lt;missing&amp;gt; Virtual Size: 116.7 MB&#xA;│               ├─&amp;lt;missing&amp;gt; Virtual Size: 116.7 MB&#xA;│               │ └─&amp;lt;missing&amp;gt; Virtual Size: 116.7 MB&#xA;│               │   └─&amp;lt;missing&amp;gt; Virtual Size: 116.7 MB&#xA;│               │     └─&amp;lt;missing&amp;gt; Virtual Size: 136.7 MB&#xA;│               │       └─&amp;lt;missing&amp;gt; Virtual Size: 136.7 MB&#xA;│               │         └─3c1355b22f16 Virtual Size: 136.7 MB Tags: training-docker/ekr-stub:1.0.0&#xA;│               └─&amp;lt;missing&amp;gt; Virtual Size: 116.7 MB&#xA;│                 └─&amp;lt;missing&amp;gt; Virtual Size: 116.7 MB&#xA;│                   └─&amp;lt;missing&amp;gt; Virtual Size: 116.7 MB&#xA;│                     └─&amp;lt;missing&amp;gt; Virtual Size: 116.7 MB&#xA;│                       └─e96641ea7cdf Virtual Size: 182.6 MB Tags: training-docker/ekr-backend:1.0.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Как управлять образами c &lt;a href=&#34;https://github.com/InfuseAI/crane&#34;&gt;Crane&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Hands-on practice quest #01: Pre-built disk image lifecycle &lt;sup&gt;20 + 10&lt;/sup&gt;&lt;/h1&gt; &#xA;&lt;h2&gt;Given&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; пары участников&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;When участники именуют сценарии, выполняют команды и анализируют их вывод и поведение&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Сценарий &#34;Как ...?&#34;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;podman image ls # TODO: собственные пометки участников для будущего использования в проектах&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Сценарий &#34;Как ...?&#34;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;podman image pull {{ registry-host }}/{{ os-images-path }}/alpine:3.14&#xA;podman image ls&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Сценарий &#34;Как ...?&#34;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;podman image history {{ registry-host }}/{{ os-images-path }}/alpine:3.14&#xA;podman image inspect {{ registry-host }}/{{ os-images-path }}/alpine:3.14 [| jq]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Сценарий &#34;Как ...?&#34;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;podman container run --name demo -it {{ registry-host }}/{{ os-images-path }}/alpine:3.14&#xA;/# touch side-effect.txt&#xA;/# exit&#xA;podman container diff demo&#xA;podman container commit demo {{ registry-host }}/container-training-docker/{{ registry-account }}/demo&#xA;podman image ls&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Сценарий &#34;Как ...?&#34;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;podman image tag {{ registry-host }}/container-training-docker/{{ registry-account }}/demo:latest {{ registry-host }}/container-training-docker/{{ registry-account }}/demo:1.0.0&#xA;podman image ls&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Сценарий &#34;Как ...?&#34;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;podman image push {{ registry-host }}/container-training-docker/{{ registry-account }}/demo:1.0.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Сценарий &#34;Как ...?&#34;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;podman image ls&#xA;podman container rm demo&#xA;podman image prune&#xA;podman image ls&#xA;podman image rm {{ registry-host }}/container-training-docker/{{ registry-account }}/demo:1.0.0&#xA;podman image ls&#xA;podman image rm {{ registry-host }}/container-training-docker/{{ registry-account }}/demo:latest&#xA;podman image ls&#xA;podman image prune --all&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Then участники делятся проблемами и отвечают на вопросы&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Как назвали сценарии?&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Какой тег у образа по умолчанию?&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; В чем физический смысл удаления образа командой &lt;code&gt;rm&lt;/code&gt;?&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Всегда ли удаляется образ по команде &lt;code&gt;rm&lt;/code&gt;?&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Что делает prune?&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Что такое &lt;a href=&#34;https://docs.docker.com/config/pruning/#prune-images&#34;&gt;&lt;em&gt;dangling&lt;/em&gt;&lt;/a&gt; image?&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Жизненный цикл пода и контейнера &lt;sup&gt;30&lt;/sup&gt;&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;p&gt;container = running process + container data (container layer)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;p&gt;Что значит &#34;запуск&#34; контейнера? Что именно там запускается?&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;p&gt;Сколько по времени будет работать контейнер?&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;p&gt;Как можно доопределить команду, запускаемую в контейнере?&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;p&gt;Что нужно определить для запуска контейнера?&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;disk image&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;меппинг (форвардинг) портов&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;имя контейнера (+defaults)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;virtual network&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;folder | volume mapping&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;guest environment variables&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;command line (image &lt;code&gt;entrypoint&lt;/code&gt; override)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;command line arguments (image &lt;code&gt;cmd&lt;/code&gt; override)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;p&gt;Экстернализация конфигурации приложения&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Задачи экстернализации конфигурации приложения&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Способы: &lt;code&gt;--env&lt;/code&gt; и аргументы командной строки&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;p&gt;Жизненный цикл контейнера&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;podman container create&lt;/code&gt; + &lt;code&gt;podman container start&lt;/code&gt; = &lt;code&gt;podman container run&lt;/code&gt; &lt;code&gt;[args]&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;podman container commit&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;podman container ls [--all]&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;podman container logs&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;podman container stop&lt;/code&gt; &amp;amp; &lt;code&gt;podman container kill&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;podman container rm&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;p&gt;Запуск контейнера в интерактивном и фоновом режимах:&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;-i&lt;/code&gt; vs &lt;code&gt;-d&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;-t&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;p&gt;&lt;a href=&#34;https://developers.redhat.com/blog/2019/01/15/podman-managing-containers-pods?intcmp=701f20000012ngPAAQ#&#34;&gt;Жизненный цикл пода&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;podman pod create&lt;/code&gt; &amp;amp; &lt;code&gt;podman container run --pod [new:]&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;podman pod ps&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;podman pod ls&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;podman pod logs&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;podman pod stop&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;podman pod rm&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Hands-on practice quest #02: Pod and Container lifecycle &lt;sup&gt;20 + 10&lt;/sup&gt;&lt;/h1&gt; &#xA;&lt;h2&gt;Given&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; пары участников&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;When участники именуют сценарии, формируют свои сценарии и проверяют их вывод и поведение&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Сценарий &#34;Как посмотреть список работающих и остановленных контейнеров?&#34;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;podman container ls --all&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Сценарий &#34;Как запустить &#39;одноразовый&#39; контейнер?&#34;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;podman container run --rm -it {{ registry-host }}/{{ os-images-path }}/alpine:3.14 # note `--rm`&#xA;/# exit&#xA;podman container ls --all&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Сценарий &#34;Как запустить контейнер в фоновом режиме?&#34;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;podman container run --detach --name proxy --publish 8080:80 {{ registry-host }}/{{ software-images-path }}/nginx:1.19.4 # note `--detach` or `-d`&#xA;podman container ls&#xA;curl localhost:8080&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Сценарий &#34;Как &#39;подключиться&#39; к работающему контейнеру?&#34;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;podman container logs proxy&#xA;&#xA;podman container attach --sig-proxy=false proxy # otherwise detach key `ctrl-c` will stop container &#xA;&#xA;podman container top proxy&#xA;&#xA;podman container exec -it proxy /bin/sh # run additional process `sh` within _running_ container&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Сценарий &#34;Как посмотреть свойства контейнера?&#34;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;podman container port proxy&#xA;podman container inspect proxy [| jq]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Сценарий &#34;Как остановить и перезапустить работающий контейнер?&#34;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;podman container stop ... # send SIGTERM, and then SIGKILL after grace period&#xA;podman container kill ... # send SIGKILL, or specified signal&#xA;&#xA;podman container start ...&#xA;podman container restart ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Сценарий &#34;Как удалить работающий контейнер?&#34;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;podman container rm --force&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Сценарий &#34;Как удалить остановленный контейнер?&#34;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;podman container rm ...&#xA;podman container prune ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Сценарий &#34;Как создать под?&#34;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;podman ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Сценарий &#34;Как запустить контейнер с добавлением его в под?&#34;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;podman ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Сценарий &#34;Как посмотреть список подов?&#34;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;podman ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Сценарий &#34;Как посмотреть список контейнеров в поде?&#34;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;podman pod ps&#xA;podman ps -a --pod&#xA;podman pod inspect ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Сценарий &#34;Как посмотреть логи контейнеров в поде?&#34;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;podman logs --latest ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Сценарий &#34;Как сгенерировать k8s manifest из готового пода?&#34;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;podman generate kube ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Сценарий &#34;Как остановить под?&#34;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;podman ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Then участники делятся проблемами и отвечают на вопросы&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Какие способы идентификации контейнера?&lt;/li&gt; &#xA; &lt;li&gt;Какое имя у контейнера по умолчанию?&lt;/li&gt; &#xA; &lt;li&gt;Где можно определить конфигурацию сети (например, меппинг портов) – для контейнера или для пода?&lt;/li&gt; &#xA; &lt;li&gt;Что за логи наблюдаются для контейнера и пода?&lt;/li&gt; &#xA; &lt;li&gt;В чем физический смысл удаления контейнера?&lt;/li&gt; &#xA; &lt;li&gt;В чем физический смысл удаления пода?&lt;/li&gt; &#xA; &lt;li&gt;Что делает &lt;code&gt;container prune&lt;/code&gt;?&lt;/li&gt; &#xA; &lt;li&gt;Что такое k8s manifest?&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Контейнеризация простого сервиса: автоматическая сборка образа &lt;sup&gt;40&lt;/sup&gt;&lt;/h1&gt; &#xA;&lt;h2&gt;Задачи автоматических сборщиков&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; На выходе бинарный файл образа&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; На входе дескриптор сборки образа &lt;code&gt;Containerfile&lt;/code&gt;/&lt;code&gt;Dockerfile&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Что должно быть в этом дескрипторе?&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Как собрать с &lt;code&gt;Containerfile&lt;/code&gt; и Buildah под капотом&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;a href=&#34;https://www.mankier.com/5/Containerfile&#34;&gt;Ключевые директивы Containerfile&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.docker.com/engine/reference/builder/#from&#34;&gt;&lt;code&gt;FROM&lt;/code&gt;&lt;/a&gt; + &lt;a href=&#34;https://www.docker.com/blog/faster-multi-platform-builds-dockerfile-cross-compilation-guide/&#34;&gt;&lt;code&gt;--platform=&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.docker.com/engine/reference/builder/#workdir&#34;&gt;&lt;code&gt;WORKDIR&lt;/code&gt;&lt;/a&gt; создаст папку при необходимости&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.docker.com/engine/reference/builder/#copy&#34;&gt;&lt;code&gt;COPY&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://stackoverflow.com/questions/24958140/what-is-the-difference-between-the-copy-and-add-commands-in-a-dockerfile/24958548#24958548&#34;&gt;and&lt;/a&gt; &lt;a href=&#34;https://docs.docker.com/engine/reference/builder/#add&#34;&gt;&lt;code&gt;ADD&lt;/code&gt;&lt;/a&gt; from build context (+ &lt;a href=&#34;https://docs.docker.com/engine/reference/builder/#dockerignore-file&#34;&gt;&lt;code&gt;.dockerignore&lt;/code&gt;&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.docker.com/engine/reference/builder/#run&#34;&gt;&lt;code&gt;RUN&lt;/code&gt;&lt;/a&gt; (+ &lt;code&gt;shell&lt;/code&gt; and preferred &lt;code&gt;exec&lt;/code&gt; forms) and &lt;a href=&#34;https://docs.docker.com/engine/reference/builder/#shell&#34;&gt;&lt;code&gt;SHELL&lt;/code&gt;&lt;/a&gt; for non-default shell&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.docker.com/engine/reference/builder/#expose&#34;&gt;&lt;code&gt;EXPOSE&lt;/code&gt;&lt;/a&gt; documentation&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.docker.com/engine/reference/builder/#entrypoint&#34;&gt;&lt;code&gt;ENTRYPOINT&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://docs.docker.com/engine/reference/builder/#understand-how-cmd-and-entrypoint-interact&#34;&gt;and&lt;/a&gt; &lt;a href=&#34;https://docs.docker.com/engine/reference/builder/#cmd&#34;&gt;&lt;code&gt;CMD&lt;/code&gt;&lt;/a&gt; (+ preferred &lt;code&gt;exec&lt;/code&gt; and similar &lt;code&gt;default parameters to ENTRYPOINT&lt;/code&gt;, &lt;code&gt;shell&lt;/code&gt; forms)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.docker.com/engine/reference/builder/#label&#34;&gt;&lt;code&gt;LABEL&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;podman container run [--entrypoint Dockerfile&#39;s ENTRYPOINT override] IMAGE [Dockerfile&#39;s CMD defaults override] &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;FROM alpine&#xA;ENTRYPOINT [&#34;echo&#34;, &#34;Hello&#34;]&#xA;CMD [&#34;World&#34;] # &#39;default parameters to ENTRYPOINT&#39; form&#xA;...&#xA;$ podman build --tag test .&#xA;...&#xA;$ podman run --rm test&#xA;Hello World&#xA;...&#xA;$ podman run --rm test Alpine&#xA;Hello Alpine&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;p&gt;Системные образы для базы VS прикладные образы с приложениями&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;p&gt;Кратко по оптимизации сборки:&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Сборка &lt;code&gt;FROM scratch&lt;/code&gt;, &#34;пинцетный метод&#34;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Использование легковесных базовых образов&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;alpine 5.33MB&#xA;registry.access.redhat.com/ubi8/ubi-micro 51.6MB&#xA;debian:stable-slim 74.3MB&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Понятие build context и кеширование при сборке (+ .dockerignore)&lt;/li&gt; &#xA; &lt;li&gt;Изменение порядка директив в Dockerfile, чтобы максимально повторно использовать кеш builder&lt;/li&gt; &#xA; &lt;li&gt;Объединение директив, чтобы снизить количество слоёв образа&lt;/li&gt; &#xA; &lt;li&gt;Multi-stage build, чтобы не тащить в итоговый образ инфраструктуру сборки&lt;/li&gt; &#xA; &lt;li&gt;Объединение слоёв образа в один слой&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h1&gt;Hands-on practice quest #03: Simple java application containerization with Buildah &lt;sup&gt;30 + 10&lt;/sup&gt;&lt;/h1&gt; &#xA;&lt;h2&gt;Given&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Склонирован git repo c приложением&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;application&#xA;└── backend&#xA;    ├── Containerfile&#xA;    └── dbo-1.0-SNAPSHOT.jar&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Задана рабочая папка&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cd application&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Проведена аутентификация консольного Podman CLI в Registry&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;podman login ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;When участники именуют сценарии, формируют свои команды и проверяют их вывод и поведение&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Сценарий &#34;Как собрать образ на основе Containerfile?&#34;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;vi backend/Containerfile # Replace base image with one that suitable for corporate image registry&#xA;podman image build \&#xA;  --tag {{ registry-host }}/container-training-docker/{{ registry-account }}/app:1.0.0 \ # set up symbolic name for image&#xA;  ./backend # folder where Containerfile located&#xA;&#xA;podman image ls&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Сценарий &#34;Как запустить &#39;одноразовый&#39; контейнер на базе своего образа с приложением?&#34;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;podman container run \&#xA; --name backend \&#xA; --rm \ # одноразовый: удалится после остановки&#xA; --detach \ # -d&#xA; --publish 8080:8080 \ # -p [host address:]8080:8080&#xA; --env SPRING_PROFILES_ACTIVE=qa \ # -e: в контейнере действует переменная окружения&#xA; {{ registry-host }}/container-training-docker/{{ registry-account }}/app:1.0.0 \ #  имя и тег&#xA;  --spring.profiles.active=qa # параметры командной строки&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Сценарий &#34;Как протестировать запущенное в контейнере приложение?&#34;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;podman container ls --all # Check for status&#xA;&#xA;curl localhost:8080/dbo/actuator/health&#xA;open http://localhost:8080/dbo/swagger-ui/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Сценарий &#34;Как мягко остановить приложение средствами самого приложения?&#34;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;curl -X POST localhost:8080/dbo/actuator/shutdown&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Сценарий &#34;Как опубликовать проверенный образ в репозитории?&#34;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;podman image push ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Then участники делятся проблемами и отвечают на вопросы&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; В каком порядке выполнялись директивы Dockerfile?&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Сколько новых layers добавила сборка к базовому образу?&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Когда и по какой причине остановился контейнер?&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Что происходит с процессом приложения, когда останавливаем контейнер?&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Сколько раз вы столкнулись с настройкой экстернализированной конфигурации приложения?&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Изоляция данных &lt;sup&gt;20&lt;/sup&gt;&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Что происходит с изменениями в образе при остановке контейнера?&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Как зафиксировать изменения в образе?&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Как откатить изменения в образе?&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Как можно сохранять изменения на диске &lt;em&gt;вне&lt;/em&gt; образа? (stateful containers): mounts&lt;/li&gt; &#xA; &lt;li&gt;tmpfs&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;podman container run &#xA; --tmpfs /tmp&#xA; --tmpfs /var/log&#xA; --tmpfs /dbo/log &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;shared folders&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;podman container run --volume &#34;$(pwd)&#34;/folder/file:/folder/file:ro # пути у folder абсолютные, начинаются с &#34;/&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;volumes&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;podman container run --volume my_volume:/folder/file:ro # имя volume не начинается с &#34;/&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Логи&lt;/li&gt; &#xA; &lt;li&gt;консольные логи: stdout/stderr&lt;/li&gt; &#xA; &lt;li&gt;собираются и упаковываются в выбранный формат (определяется log driver)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;podman logs [--until=10s] ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Hands-on practice quest #04: Simple &lt;em&gt;stateful&lt;/em&gt; application containerization &lt;sup&gt;20 + 10&lt;/sup&gt;&lt;/h1&gt; &#xA;&lt;h2&gt;Given&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Собран образ с приложением&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;When участники именуют сценарии, формируют свои команды и проверяют их вывод и поведение&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Сценарий &#34;Как запустить stateful container c пробросом на хостовую папку?&#34;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;podman container run \&#xA; -- ... \ # TODO имя контейнера&#xA; -- ... \ # TODO одноразовый: удалится после остановки&#xA; -- ... \ # TODO фоновой режим&#xA; -- ... \ # TODO проброс порта на хост&#xA; -- ... \ # TODO профиль конфигурации Spring &#39;qa&#39;&#xA; --volume $(pwd)/log:/dbo/log \ # -v: папка в конейнере /dbo/log отображена на папку на хосте /current-path/log. Windows caution for $()!&#xA; {{ registry-host }}/container-training-docker/{{ registry-account }}/app:1.0.0&#xA;&#xA;cat $(pwd)/log/dbo.log&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Then участники делятся проблемами и отвечают на вопросы&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; В данных сценариях какой тип mount лучше подойдет? tmpfs, shared folder, volume?&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Оркестрация &lt;sup&gt;40&lt;/sup&gt;&lt;/h1&gt; &#xA;&lt;h2&gt;Задачи оркестраторов&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Зачем нужны оркестраторы?&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Понятие &#39;сервиса&#39; в оркестраторах&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Структура &lt;a href=&#34;https://raw.githubusercontent.com/eugene-krivosheyev/podman/main/application/podman-compose.yml&#34;&gt;дескриптора оркестратора Compose&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;services&lt;/li&gt; &#xA; &lt;li&gt;mounts&lt;/li&gt; &#xA; &lt;li&gt;virtual networks&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Управление группой контейнеров с Podman Compose&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cd application&#xA;podman-compose up --detach&#xA;&#xA;podman-compose ps&#xA;podman-compose logs&#xA;&#xA;podman-compose down&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Hands-on practice quest #05: Multi-component stateful application containerization with Compose &lt;sup&gt;30 + 10&lt;/sup&gt;&lt;/h1&gt; &#xA;&lt;h2&gt;Given&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Установлен Podman Compose&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo dnf install -y pip&#xA;pip3 install https://github.com/containers/podman-compose/archive/devel.tar.gz&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;When&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Сценарий &#34;Как запустить группу контейнеров под управлением Compose?&#34;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cd application&#xA;podman-compose up --detach&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Сценарий &#34;Как наблюдать контейнеры под управлением Compose?&#34;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cd application&#xA;podman-compose ps&#xA;podman-compose port&#xA;podman-compose logs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Сценарий &#34;Как остановить и удалить контейнеры?&#34;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cd application&#xA;podman-compose down&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Then участники делятся проблемами и отвечают на вопросы&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Можно ли наблюдать контейнеры средствами podman, а не Compose?&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Рекомендуемые практики &lt;sup&gt;30&lt;/sup&gt;&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Минимизировать &lt;a href=&#34;https://snyk.io/blog/10-docker-image-security-best-practices&#34;&gt;security риски&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Используйте минимальные образы: быстрее и меньше зависимостей + меньше рисков&lt;/li&gt; &#xA; &lt;li&gt;Запуск в rootless mode&lt;/li&gt; &#xA; &lt;li&gt;Подписывать образы и проверять подписи&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://techbeacon.com/security/10-top-open-source-tools-docker-security&#34;&gt;Сканеры уязвимостей&lt;/a&gt; для образов &lt;code&gt;docker scan --dependency-tree &amp;lt;image&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://medium.com/@renatomefi/writing-dockerfile-like-a-software-developer-linting-9fd8c620174&#34;&gt;Линтеры&lt;/a&gt; для Dockerfile&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nickjanetakis.com/blog/docker-tip-2-the-difference-between-copy-and-add-in-a-dockerile&#34;&gt;COPY вместо ADD&lt;/a&gt; + .dockerignore&lt;/li&gt; &#xA; &lt;li&gt;Фиксированные теги для идентификации образов (Semantic versioning or Unique tags)&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Multi-Stage Build&lt;/em&gt; в том числе для того, чтобы в итоговый образ не утекли чувствительные данные&lt;/li&gt; &#xA; &lt;li&gt;Хранение и передача конфигурации и чувствительных данных: &lt;em&gt;Secrets&lt;/em&gt;&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
  <entry>
    <title>safestack-hq/squirrel-lab</title>
    <updated>2022-11-18T01:32:14Z</updated>
    <id>tag:github.com,2022-11-18:/safestack-hq/squirrel-lab</id>
    <link href="https://github.com/safestack-hq/squirrel-lab" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;squirrel-lab&lt;/h1&gt; &#xA;&lt;p&gt;Hi! In this repo is a slightly insecure Docker container, and an automated CICD Workflow configured to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Scan for vulns&lt;/li&gt; &#xA; &lt;li&gt;Validate them against the SafeStack platform&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To get started, you have to perform the following:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Fork this repo&lt;/li&gt; &#xA; &lt;li&gt;Enable actions&lt;/li&gt; &#xA; &lt;li&gt;Set a valid &lt;code&gt;LABS_AUTH&lt;/code&gt; repository secret&lt;/li&gt; &#xA; &lt;li&gt;Update and commit a change to this readme - this will kick off the first action which you can track by clicking &#34;Actions&#34; above&lt;/li&gt; &#xA; &lt;li&gt;Look at the output of the &#34;Labs Validator&#34; job step, and see what issues are being reported, and then try and address it by committing fixes to this repo!&lt;/li&gt; &#xA; &lt;li&gt;After the fixes are in place, they will be validated against the SafeStack platform, and you will receive a result token which you must supply to complete the challenge.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Don&#39;t forget, you have to enable actions, then make a preliminary commit to start the CI/CD process.&lt;/p&gt; &#xA;&lt;p&gt;Feel free to update this file and let us know how you&#39;re feeling.&lt;/p&gt; &#xA;&lt;p&gt;Today I&#39;m feeling: [update here]&lt;/p&gt;</summary>
  </entry>
</feed>