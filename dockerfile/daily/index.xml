<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dockerfile Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-01-28T01:30:33Z</updated>
  <subtitle>Daily Trending of Dockerfile in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>WATonomous/wato_monorepo</title>
    <updated>2024-01-28T01:30:33Z</updated>
    <id>tag:github.com,2024-01-28:/WATonomous/wato_monorepo</id>
    <link href="https://github.com/WATonomous/wato_monorepo" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Dockerized ROS2 stack for the the WATonomous Autonomous Driving Software Pipeline&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;WATonomous Monorepo v2&lt;/h1&gt; &#xA;&lt;p&gt;Dockerized ROS2 setup for the WATonomous Autonomous Driving Software Pipeline&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/WATonomous/wato_monorepo/main/#watonomous-monorepo&#34;&gt;WATonomous Monorepo&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/WATonomous/wato_monorepo/main/#getting-started&#34;&gt;Getting Started&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/WATonomous/wato_monorepo/main/#description-of-files&#34;&gt;Description of Files&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/WATonomous/wato_monorepo/main/#documentation&#34;&gt;Documentation&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/WATonomous/wato_monorepo/main/#setup-docs&#34;&gt;Setup Docs&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/WATonomous/wato_monorepo/main/#important-topics-for-developers&#34;&gt;Important Topics for Developers&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/WATonomous/wato_monorepo/main/#monorepo-info&#34;&gt;Monorepo Info&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/WATonomous/wato_monorepo/main/#technical-specification&#34;&gt;Technical Specification&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/WATonomous/wato_monorepo/main/#faq&#34;&gt;FAQ&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;Read the following:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/WATonomous/wato_monorepo/main/docs/setup/setup.md&#34;&gt;docs/setup.md&lt;/a&gt; How to setup our repo.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;TLDR:&lt;/strong&gt; Clone the monorepo, specify active modules, &lt;code&gt;watod up&lt;/code&gt;. Everything is containerized, so there&#39;s little need to setup any dependencies on your end :).&lt;/p&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/WATonomous/wato_monorepo/main/docs/monorepo.md&#34;&gt;docs/monorepo.md&lt;/a&gt; What is a monorepo? Why a monorepo?&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/WATonomous/wato_monorepo/main/docs/dev/how_to_dev.md&#34;&gt;docs/how_to_dev.md&lt;/a&gt; How to develop in the monorepo.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Description of Important Files and Directories&lt;/h2&gt; &#xA;&lt;p&gt;Below is a tree diagram of the Monorepo.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;wato_monorepo_v2&#xA;├── watod-setup-env.sh&#xA;├── docker&#xA;│&amp;nbsp;&amp;nbsp; ├── samples&#xA;│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; └── cpp&#xA;│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp;     ├── Dockerfile.aggregator&#xA;│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp;     ├── Dockerfile.producer&#xA;│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp;     └── Dockerfile.transformer&#xA;│&amp;nbsp;&amp;nbsp; └── wato_ros_entrypoint.sh&#xA;├── docs&#xA;├── modules&#xA;│&amp;nbsp;&amp;nbsp; └── docker-compose.samples.yaml&#xA;├── scripts&#xA;├── src&#xA;│&amp;nbsp;&amp;nbsp; ├── motion_planning_and_control&#xA;│&amp;nbsp;&amp;nbsp; ├── perception&#xA;│&amp;nbsp;&amp;nbsp; ├── wato_msgs&#xA;│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; └── sample_msgs&#xA;│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp;     ├── CMakeLists.txt&#xA;│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp;     ├── msg&#xA;│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp;     └── package.xml&#xA;│&amp;nbsp;&amp;nbsp; ├── samples&#xA;│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; └── cpp&#xA;│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp;     ├── aggregator&#xA;│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp;     ├── image&#xA;│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp;     ├── producer&#xA;│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp;     ├── README.md&#xA;│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp;     └── transformer&#xA;│&amp;nbsp;&amp;nbsp; ├── sensor_interfacing&#xA;│&amp;nbsp;&amp;nbsp; ├── simulation&#xA;│&amp;nbsp;&amp;nbsp; ├── tools&#xA;│&amp;nbsp;&amp;nbsp; └── world_modeling&#xA;└── watod&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;watod&lt;/code&gt;. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;This is the main bash script that you will use to interface with your containers. More info on &lt;code&gt;watod&lt;/code&gt;: &lt;a href=&#34;https://raw.githubusercontent.com/WATonomous/wato_monorepo/main/docs/dev/watod.md&#34;&gt;docs/dev/watod.md&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;watod-setup-env.sh&lt;/code&gt;. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;watod-setup-env.sh (in scripts directory) will create a &lt;a href=&#34;https://docs.docker.com/compose/env-file/&#34;&gt;.env file&lt;/a&gt; specifying environment variables for docker-compose. &lt;code&gt;watod&lt;/code&gt; automatically runs this script before running any commands. To override variables in &lt;code&gt;watod-setup-env.sh&lt;/code&gt;, create a &lt;code&gt;wato2-config.sh&lt;/code&gt; file and populate it with variables, for example &lt;code&gt;ACTIVE_MODULES=&#34;perception path_planning&#34;&lt;/code&gt;. &lt;code&gt;watod-setup-env.sh&lt;/code&gt; will then take this file into account when building the &lt;code&gt;.env&lt;/code&gt; file.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;scripts/watod-completion.bash&lt;/code&gt;. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Bash autocomplete for watod. Adapted from docker-compose. Add &lt;code&gt;source &amp;lt;MONO_DIR&amp;gt;/scripts/watod-completion.bash&lt;/code&gt; to your bashrc to use autocomplete.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;modules/&lt;/code&gt;: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;This folder contains all docker-compose files specifying the services we will run. They are grouped up into modules. Note that by default no modules are enabled. To select additional modules, overwrite &lt;code&gt;ACTIVE_MODULES=&#34;&amp;lt;MODULES_OF_YOUR_CHOICE&#34;&lt;/code&gt; in &lt;code&gt;wato2-config.sh&lt;/code&gt;. See the &lt;a href=&#34;https://docs.docker.com/compose/extends/&#34;&gt;docker-compose wiki&lt;/a&gt;. More info on modules: &lt;a href=&#34;https://raw.githubusercontent.com/WATonomous/wato_monorepo/main/docs/dev/modules.md&#34;&gt;docs/dev/modules.md&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;docker/&lt;/code&gt;: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;This folder contains the &lt;code&gt;Dockerfiles&lt;/code&gt; for each of our images. &lt;a href=&#34;https://docs.docker.com/engine/reference/builder/&#34;&gt;Docker wiki&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;src/&lt;/code&gt;: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Here is where all the logic and cool technologies for autonomous software go. The folders in &lt;code&gt;src&lt;/code&gt; will be mounted to our docker images, so changes in the &lt;code&gt;src&lt;/code&gt; directory will be reflected in the containers.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;docs/&lt;/code&gt;: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;This folder contains the documentation for this monorepo, including instructions for setup and details on how to navigate and develop in this monorepo.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;h3&gt;Setup Docs&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/WATonomous/wato_monorepo/main/docs/setup&#34;&gt;docs/setup&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Important Topics for Developers&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/WATonomous/wato_monorepo/main/docs/dev&#34;&gt;docs/dev&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Using Foxglove&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://foxglove.dev/&#34;&gt;Foxglove&lt;/a&gt; is used to visualize ROS messages on a local machine.&lt;/p&gt; &#xA;&lt;p&gt;Add &lt;code&gt;data_stream&lt;/code&gt; as an &lt;code&gt;ACTIVE_MODULES&lt;/code&gt; and &lt;code&gt;watod up&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;It exposes the port specified by the &lt;code&gt;FOXGLOVE_BRIDGE_PORT&lt;/code&gt; variable, which you will need to forward to your local machine. This can either be done in the &lt;code&gt;ports&lt;/code&gt; section of VS Code or by running the command &lt;code&gt;ssh -L 8765:localhost:8765 &amp;lt;username&amp;gt;@&amp;lt;machine&amp;gt;-ubuntu1.watocluster.local&lt;/code&gt; on your local machine.&lt;/p&gt; &#xA;&lt;p&gt;Then, open foxglove and add a connection &lt;code&gt;localhost:8765&lt;/code&gt;, and it should connect.&lt;/p&gt; &#xA;&lt;h3&gt;Monorepo Info&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/WATonomous/wato_monorepo/main/docs/monorepo.md&#34;&gt;docs/monorepo.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Technical Specification&lt;/h3&gt; &#xA;&lt;p&gt;Docker, Continuous Integration: &lt;a href=&#34;https://raw.githubusercontent.com/WATonomous/wato_monorepo/main/docs/tech_spec.md&#34;&gt;tech_spec.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;FAQ&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/WATonomous/wato_monorepo/main/docs/faq.md&#34;&gt;docs/faq.md&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>k0baya/xiaoya_alist_docker_on_render</title>
    <updated>2024-01-28T01:30:33Z</updated>
    <id>tag:github.com,2024-01-28:/k0baya/xiaoya_alist_docker_on_render</id>
    <link href="https://github.com/k0baya/xiaoya_alist_docker_on_render" rel="alternate"></link>
    <summary type="html">&lt;p&gt;在Render中部署小雅Alist的Docker镜像&lt;/p&gt;&lt;hr&gt;&lt;blockquote&gt; &#xA; &lt;h1&gt;&lt;strong&gt;已经弃用，目前在CodeSandBox平台有更好的部署方法，甚至可以把清理脚本xiaoyakeeper也一同部署，为防止滥用，不在github继续说明。感兴趣的话可以自己去CodeSandBox平台尝试。&lt;/strong&gt;&lt;/h1&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h1&gt;如何在&lt;a href=&#34;https://dashboard.render.com/&#34;&gt;Render&lt;/a&gt;中部署小雅Alist的Docker镜像&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://dashboard.render.com/&#34;&gt;Render&lt;/a&gt;是一个全托管的云计算平台，可以用于托管Docker容器，且每月有750小时的免费使用时长，如果你仅仅部署一个容器，则可以覆盖整月使用。&lt;/p&gt; &#xA; &lt;p&gt;而&lt;a href=&#34;http://alist.xiaoya.pro/&#34;&gt;小雅Alist&lt;/a&gt;由于token限制，无法直接用于观看视频，需要自行挂载其docker镜像，使用自己的token才能正常观看。这无疑对没有服务器/软路由等可以用来挂载Docker镜像的设备的用户设置了一道很高的门槛。&lt;/p&gt; &#xA; &lt;p&gt;而无论是&lt;a href=&#34;https://railway.app/dashboard&#34;&gt;Railway&lt;/a&gt;还是&lt;a href=&#34;https://dashboard.render.com/&#34;&gt;Render&lt;/a&gt;都无法使用小雅提供的一键命令进行部署，那么该如何将小雅Alist的Docker镜像部署到Render上呢？&lt;/p&gt; &#xA; &lt;p&gt;通过修改镜像，把自己的token打包进去，重新构筑镜像的办法就可以。&lt;/p&gt; &#xA; &lt;p&gt;不需要你手动构筑镜像，你可以直接使用这个仓库来完成。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;部署方法&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;好用的话，可以帮我点一下star嘛？&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;新建一个仓库，并设置为&lt;strong&gt;Private&lt;/strong&gt;。&lt;/h3&gt; &#xA;&lt;p&gt;点击&lt;a href=&#34;https://github.com/new&#34;&gt;这里&lt;/a&gt;进入新建仓库的页面，名称任意，设置为Private。&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/k0baya/xiaoya_alist_docker_on_render/main/pic/Private.png&#34; alt=&#34;Private&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;导入本仓库的内容&lt;/h3&gt; &#xA;&lt;p&gt;翻到最下面，点击import code&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/k0baya/xiaoya_alist_docker_on_render/main/pic/import.png&#34; alt=&#34;import&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;输入本仓库的地址，然后点击Begin import。&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/k0baya/xiaoya_alist_docker_on_render/main/pic/address.png&#34; alt=&#34;address&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;填入自己的token&lt;/h3&gt; &#xA;&lt;p&gt;首先按照&lt;a href=&#34;http://alist.xiaoya.pro/%E5%AE%89%E8%A3%85%EF%BC%8C%E9%85%8D%E7%BD%AE%EF%BC%8C%E4%BF%AE%E5%A4%8D%20xiaoya%20docker%20%E6%8C%87%E5%8D%97/%E5%A6%82%E4%BD%95%E5%AE%89%E8%A3%85%E5%92%8C%E7%BB%B4%E6%8A%A4xiaoya%20docker.pdf&#34;&gt;小雅的说明文档&lt;/a&gt;中的说明获取自己的token、opentoken、folder_id。&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/k0baya/xiaoya_alist_docker_on_render/main/pic/xiaoyadoc.png&#34; alt=&#34;xiaoyadoc&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;然后在自己新建的Private仓库中进入data文件夹，编辑三个文件，分别填入上图的三个参数并保存。&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/k0baya/xiaoya_alist_docker_on_render/main/pic/edit.png&#34; alt=&#34;edit&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/k0baya/xiaoya_alist_docker_on_render/main/pic/commit.png&#34; alt=&#34;commit&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;在Render进行部署&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;据一些网友反馈，Render部署时有部分地区的服务器无法正确部署小雅，具体是哪些区域我没有统计，请自行更换区域测试。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;打开&lt;a href=&#34;https://dashboard.render.com/&#34;&gt;Render&lt;/a&gt;，用相同的GitHub账户登录，然后点击New Web Service，选择刚刚自己新建的的Private仓库，点击Connect。&lt;/p&gt; &#xA;&lt;p&gt;Name随意填写，Runtime选择免费的那一项，翻到最后点击Advanced，在展开的选项中点击Add Environment Variable，添加环境变量PORT=5678。&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/k0baya/xiaoya_alist_docker_on_render/main/pic/environment.png&#34; alt=&#34;environment&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;然后再点击最下方的Create Web Service。&lt;/p&gt; &#xA;&lt;p&gt;等待3-5分钟，Logs窗口出现类似于下图这样的信息时，你的小雅Alist Docker镜像就成功部署到Render上啦，在标题下方你可以找到访问地址。&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/k0baya/xiaoya_alist_docker_on_render/main/pic/log.png&#34; alt=&#34;log&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/k0baya/xiaoya_alist_docker_on_render/main/pic/url.png&#34; alt=&#34;url&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;同步更新小雅Alist的内容&lt;/h3&gt; &#xA;&lt;p&gt;你只需要在Render中删除这个项目，然后重新Create New Service，重复最后这一步操作，就可以同步更新小雅Alist的更新内容。&lt;/p&gt; &#xA;&lt;h3&gt;搜索以及WebDav挂载问题&lt;/h3&gt; &#xA;&lt;p&gt;由于Render的原因，在Render上搭建的小雅Alist的Docker镜像的搜索和WebDav挂载功能会失效，需要你再搭建一个Alist，并挂载你在Render上搭建的小雅，并构建索引，才能正常搜索并挂载WebDav。&lt;/p&gt; &#xA;&lt;h3&gt;安全性问题&lt;/h3&gt; &#xA;&lt;p&gt;由于如此搭建之后，使用你的Token搭建的小雅Alist的Docker镜像站是暴露在公网的，任何人只要知道网址就能进去访问，请不要泄露自己的网址，以防止Token被滥用。&lt;/p&gt; &#xA;&lt;h2&gt;容器保活&lt;/h2&gt; &#xA;&lt;p&gt;Render上托管的项目并不一定会一直保持活跃，有些在一段时间无人访问之后就会休眠，所以可以使用一些外部监控手段保活。&lt;/p&gt; &#xA;&lt;p&gt;我已知的网站监控：&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;1 &lt;a href=&#34;https://console.cron-job.org&#34;&gt;cron-job.org&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;2 &lt;a href=&#34;https://uptimerobot.com/&#34;&gt;UptimeRobot&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;可供自行搭建的网站监控：&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/louislam/uptime-kuma&#34;&gt;Uptime-Kuma&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt;</summary>
  </entry>
</feed>