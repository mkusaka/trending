<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dockerfile Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-18T01:41:14Z</updated>
  <subtitle>Daily Trending of Dockerfile in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>AmirulAndalib/desterRoku</title>
    <updated>2022-07-18T01:41:14Z</updated>
    <id>tag:github.com,2022-07-18:/AmirulAndalib/desterRoku</id>
    <link href="https://github.com/AmirulAndalib/desterRoku" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Deploy Dester-Lib to Heroku via Docker image&lt;/h1&gt; &#xA;&lt;h3&gt;Warning:&lt;/h3&gt; &#xA;&lt;h2&gt;This image is based on Alpine Edge Docker Image so it maybe unstable.&lt;/h2&gt; &#xA;&lt;h2&gt;Enjoy&lt;/h2&gt; &#xA;&lt;h1&gt;For support contact Dester-lib not here&lt;/h1&gt; &#xA;&lt;h2&gt;for docker related support for this contact &lt;a href=&#34;https://t.me/kangershub&#34;&gt;here&lt;/a&gt;&lt;/h2&gt;</summary>
  </entry>
  <entry>
    <title>freedomofpress/securedrop-workstation-docs</title>
    <updated>2022-07-18T01:41:14Z</updated>
    <id>tag:github.com,2022-07-18:/freedomofpress/securedrop-workstation-docs</id>
    <link href="https://github.com/freedomofpress/securedrop-workstation-docs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;User documentation for the SecureDrop Workstation&lt;/p&gt;&lt;hr&gt;&lt;blockquote&gt; &#xA; &lt;p&gt;By contributing to this project, you agree to abide by our &lt;a href=&#34;https://github.com/freedomofpress/.github/raw/main/CODE_OF_CONDUCT.md&#34;&gt;Code of Conduct&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h1&gt;securedrop-workstation-docs&lt;/h1&gt; &#xA;&lt;p&gt;User documentation for SecureDrop Workstation.&lt;/p&gt; &#xA;&lt;h1&gt;Quickstart&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Set up and activate a Python 3 virtualenv using your preferred method for your system&lt;/li&gt; &#xA; &lt;li&gt;Install dependencies using &lt;code&gt;pip install --require-hashes -r requirements/requirements.txt&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;make docs&lt;/code&gt; to start a live build of the documentation at &lt;code&gt;http://127.0.0.1:8000&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Edit RST files under the &lt;code&gt;docs&lt;/code&gt; directory - your changes will be reflected in the live build&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Stable and development builds&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://workstation.securedrop.org/&#34;&gt;https://workstation.securedrop.org/&lt;/a&gt; is automatically built from this repo. It redirects to the stable version by default, which is built from the commit tagged &lt;code&gt;stable&lt;/code&gt;. The latest version tracks the tip of the &lt;code&gt;main&lt;/code&gt; branch.&lt;/p&gt; &#xA;&lt;p&gt;To tag a new stable version, delete the current &lt;code&gt;stable&lt;/code&gt; tag, and push a new individually signed, annotated &lt;code&gt;stable&lt;/code&gt; tag (&lt;code&gt;git tag -sa stable&lt;/code&gt;). When doing so, be careful not to pull in documentation commits for changes that have not been released yet.&lt;/p&gt; &#xA;&lt;h2&gt;Detailed setup instructions for macOS&lt;/h2&gt; &#xA;&lt;p&gt;There are multiple ways to set your virtual environment; the following procedure uses &lt;code&gt;pyenv&lt;/code&gt; and &lt;code&gt;pyenv-virtualenv&lt;/code&gt; installed by Homebrew.&lt;/p&gt; &#xA;&lt;h3&gt;Set up pyenv and pyenv-virtualenv&lt;/h3&gt; &#xA;&lt;p&gt;Open a Terminal and run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;brew update &amp;amp;&amp;amp; brew upgrade &amp;amp;&amp;amp; brew install pyenv pyenv-virtualenv&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You may want to read more about &lt;a href=&#34;https://github.com/pyenv/pyenv&#34;&gt;pyenv&lt;/a&gt; and &lt;a href=&#34;https://github.com/pyenv/pyenv-virtualenv&#34;&gt;pyenv-virtualenv&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To ensure that these tools run properly, add the following lines to your &lt;code&gt;~/.bash_profile&lt;/code&gt; (or &lt;code&gt;~/.zprofile&lt;/code&gt;) by opening that file in your favourite text editor (you can use &lt;code&gt;nano ~/.bash_profile&lt;/code&gt; to work on the command-line):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;eval &#34;$(pyenv init -)&#34;&#xA;eval &#34;$(pyenv virtualenv-init -)&#34;&#xA;export LC_ALL=en_US.UTF-8&#xA;export LANG=en_US.UTF-8&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Reload your shell by typing &lt;code&gt;source ~/.bash_profile&lt;/code&gt; in the Terminal app.&lt;/p&gt; &#xA;&lt;h2&gt;Install Python 3&lt;/h2&gt; &#xA;&lt;p&gt;In the terminal, list available versions of python with &lt;code&gt;pyenv install --list&lt;/code&gt; and install Python 3.x.x with &lt;code&gt;pyenv install 3.x.x&lt;/code&gt; (the latest version of Python 3.5 is recommended).&lt;/p&gt; &#xA;&lt;h2&gt;Clone repo, set up environment&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Clone this repo and &lt;code&gt;cd&lt;/code&gt; into the &lt;code&gt;securedrop-workstation-docs&lt;/code&gt; directory in the Terminal app, then run the following commands. You may replace &lt;code&gt;sdwdocs&lt;/code&gt; with whatever name you wish to give this virtual environment, and &lt;code&gt;3.5.9&lt;/code&gt; with whichever version of Python 3 you installed in the previous step:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;pyenv local 3.5.9&#xA;pyenv virtualenv sdwdocs&#xA;pyenv activate sdwdocs&#xA;pip install --require-hashes -r requirements/requirements.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;When the installation of dependencies completes, you can run &lt;code&gt;make docs&lt;/code&gt; to build the documentation and view it in your browser at &lt;code&gt;127.0.0.1:8000&lt;/code&gt;, or &lt;code&gt;make docs-lint&lt;/code&gt; and &lt;code&gt;make docs-lintcheck&lt;/code&gt; to check for style/formatting errors.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;When you&#39;re done, deactivate the virtual environment by typing &lt;pre&gt;&lt;code&gt;pyenv deactivate sdwdocs&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Fix brew errors&lt;/h3&gt; &#xA;&lt;p&gt;If you run &lt;code&gt;brew doctor&lt;/code&gt;, you may see the following warning:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Warning: &#34;config&#34; scripts exist outside your system or Homebrew directories.&#xA;`./configure` scripts often look for *-config scripts to determine if&#xA;software packages are installed, and what additional flags to use when&#xA;compiling and linking.&#xA;&#xA;Having additional scripts in your path can confuse software installed via&#xA;Homebrew if the config script overrides a system or Homebrew provided&#xA;script of the same name. We found the following &#34;config&#34; scripts:&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can ignore this warning, or use one of the two possible fixes documented in the &lt;a href=&#34;https://github.com/pyenv/pyenv/issues/106&#34;&gt;pyenv Github repo&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For example, creating a file called &lt;code&gt;~/bin/brew&lt;/code&gt; with the following contents:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;#!/bin/sh&#xA;&#xA;# from https://github.com/pyenv/pyenv/issues/106&#xA;if which pyenv &amp;gt; /dev/null 2&amp;gt;&amp;amp;1; then&#xA;  # assumes default location of brew in `/usr/local/bin/brew`&#xA;  /usr/bin/env PATH=&#34;${PATH//$(pyenv root)\/shims:/}&#34; /usr/local/bin/brew &#34;$@&#34;&#xA;else&#xA;  /usr/local/bin/brew &#34;$@&#34;&#xA;fi&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and adding &lt;code&gt;~/bin&lt;/code&gt; to your PATH variable (&lt;code&gt;EXPORT PATH=${HOME}/bin:${PATH}&lt;/code&gt;) is a workaround for this issue.&lt;/p&gt; &#xA;&lt;p&gt;Once you have finished making these changes, reload your shell by typing &lt;code&gt;source ~/.bash_profile&lt;/code&gt; in the Terminal app.&lt;/p&gt; &#xA;&lt;h1&gt;Testing&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Run &lt;code&gt;make docs-lint&lt;/code&gt; to test documentation syntax&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;make docs-linkcheck&lt;/code&gt; to check for broken outgoing links in the documentation&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>