<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dockerfile Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-04-25T01:33:30Z</updated>
  <subtitle>Daily Trending of Dockerfile in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>svx/poetry-fastapi-docker</title>
    <updated>2023-04-25T01:33:30Z</updated>
    <id>tag:github.com,2023-04-25:/svx/poetry-fastapi-docker</id>
    <link href="https://github.com/svx/poetry-fastapi-docker" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Docker multi-stage builds for Python and Poetry&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt;Poetry - FastAPI - Docker&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; I currently do not actively use or maintain this project, the versions of Debian, Python and Poetry are not up to date!&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Table Of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/svx/poetry-fastapi-docker/main/#about-the-project&#34;&gt;About the Project&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/svx/poetry-fastapi-docker/main/#requirements&#34;&gt;Requirements&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/svx/poetry-fastapi-docker/main/#local-development&#34;&gt;Local development&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/svx/poetry-fastapi-docker/main/#docker&#34;&gt;Docker&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/svx/poetry-fastapi-docker/main/#credits&#34;&gt;Credits&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;About The Project&lt;/h2&gt; &#xA;&lt;p&gt;This repo serves as a minimal reference on setting up docker multi-stage builds with poetry.&lt;/p&gt; &#xA;&lt;p&gt;This is an updated and modified fork of &lt;a href=&#34;https://github.com/michael0liver/python-poetry-docker-example&#34;&gt;python-poetry-docker-example&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; - This is only tested with Linux and macOS&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Differences&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Newer poetry version&lt;/li&gt; &#xA; &lt;li&gt;Install poetry from python-poetry GitHub source&lt;/li&gt; &#xA; &lt;li&gt;Does not run production image as &lt;code&gt;/root&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Set the SHELL option &lt;code&gt;-o pipefail&lt;/code&gt; before RUN with a pipe&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.python.org/downloads/release/python-381/&#34;&gt;Docker &amp;gt;= 17.05&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.python.org/downloads/release/python-381/&#34;&gt;Python &amp;gt;= 3.7&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/python-poetry/poetry&#34;&gt;Poetry&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt; - Run all commands from the project root&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Local development&lt;/h2&gt; &#xA;&lt;h3&gt;Poetry&lt;/h3&gt; &#xA;&lt;p&gt;Create the virtual environment and install dependencies with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;poetry install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://python-poetry.org/docs/&#34;&gt;poetry docs&lt;/a&gt; for information on how to add/update dependencies.&lt;/p&gt; &#xA;&lt;p&gt;Run commands inside the virtual environment with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;poetry run &amp;lt;your_command&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Spawn a shell inside the virtual environment with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;poetry shell&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Start a development server locally:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;poetry run uvicorn app.main:app --reload --host localhost --port 8000&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;API will be available at &lt;a href=&#34;http://localhost:8000/&#34;&gt;localhost:8000/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Swagger UI docs at &lt;a href=&#34;http://localhost:8000/docs&#34;&gt;localhost:8000/docs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;ReDoc docs at &lt;a href=&#34;http://localhost:8000/redoc&#34;&gt;localhost:8000/redoc&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To run testing/linting locally you would run lint/test in the &lt;a href=&#34;https://raw.githubusercontent.com/svx/poetry-fastapi-docker/main/scripts&#34;&gt;scripts directory&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Docker&lt;/h2&gt; &#xA;&lt;p&gt;Build images with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker build -t poetry-project .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The Dockerfile uses multi-stage builds to run lint and test stages before building the production stage. If linting or testing fails the build will fail.&lt;/p&gt; &#xA;&lt;p&gt;You can stop the build at specific stages with the &lt;code&gt;--target&lt;/code&gt; option:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker build -t poetry-project --target $STAGE .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For example we wanted to stop at the &lt;strong&gt;test&lt;/strong&gt; stage:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker build -t poetry-project --target test .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We could then get a shell inside the container with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker run -it poetry-project bash&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you do not specify a target the resulting image will be the last image defined which in our case is the &#39;production&#39; image.&lt;/p&gt; &#xA;&lt;p&gt;Run the &#39;production&#39; image:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker run -it -p 8000:8000 poetry-project&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Open your browser and go to &lt;a href=&#34;http://localhost:8000/redoc&#34;&gt;http://localhost:8000/redoc&lt;/a&gt; to see the API spec in ReDoc.&lt;/p&gt; &#xA;&lt;h3&gt;Docker Compose&lt;/h3&gt; &#xA;&lt;p&gt;You can build and run the container with Docker Compose&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker compose up&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or, run in &lt;em&gt;detached&lt;/em&gt; mode if you prefer.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt; - If you use an older version of Docker Compose, you may need to uncomment the version in the docker-compose,yml file!&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/michael0liver/python-poetry-docker-example&#34;&gt;Michael Oliver&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>