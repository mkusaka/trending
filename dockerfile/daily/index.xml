<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dockerfile Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-02-24T01:23:55Z</updated>
  <subtitle>Daily Trending of Dockerfile in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>mikeizbicki/sql_quiz</title>
    <updated>2024-02-24T01:23:55Z</updated>
    <id>tag:github.com,2024-02-24:/mikeizbicki/sql_quiz</id>
    <link href="https://github.com/mikeizbicki/sql_quiz" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Overview&lt;/h1&gt; &#xA;&lt;p&gt;This repo contains the material for the SQL quizzes in CMC&#39;s CSCI143: Big Data class.&lt;/p&gt; &#xA;&lt;p&gt;Notes with example problems and explanations can be found in the &lt;code&gt;quiz_notes_?.sql&lt;/code&gt; files. For each SQL command in the notes, you need to understand the output in both SQLite and Postgres. In most cases, the output will be the same. Differences are usually because sqlite3 is less standards compliant than postgres.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Terminology Note:&lt;/strong&gt; SQLite and Postgres are two different &lt;em&gt;database engines&lt;/em&gt; or &lt;em&gt;RDBMS&lt;/em&gt;es. SQL is the language used to interact with the database.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;In the actual quiz, you will have 2^2 problems to complete and the quiz will be worth 2^3 points. Each problem will be worth 2^1 points: 2^0 points for the correct sqlite3 output, and 2^0 points for the correct postgres output. If the command does not result in an error, you should provide the full table of the output. If the command does result in an error, just write &#34;error&#34;. You do not need to provide the full error message. If the output of both sqlite3 and postgres is the same, you can just write &#34;sqlite3 and postgres are the same&#34; instead of redrawing the output.&lt;/p&gt; &#xA;&lt;p&gt;Notice that I&#39;ve switched to SQL math notation here instead of python. One of the difficulties of using SQL is that the notation is different from most other programming languages.&lt;/p&gt; &#xA;&lt;h2&gt;Running from SQLite&lt;/h2&gt; &#xA;&lt;p&gt;To create a SQLite database, run the command&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ sqlite3 quiz.db &amp;lt; create_tables.sql&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can run all practice problems at once with the command&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cat quiz_example_?.sql | sqlite3 quiz.db&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You might find the following incantation provides more useful output&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ (echo &#39;.echo on&#39; &amp;amp;&amp;amp; echo &#39;.mode markdown&#39; &amp;amp;&amp;amp; cat quiz_example_?.sql) | sqlite3 quiz.db&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can enter an interactive session with&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ sqlite3 quiz.db&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Running from Postgres&lt;/h2&gt; &#xA;&lt;p&gt;To create a postgres database, run the commands&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ docker-compose up --build -d&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;Dockerfile&lt;/code&gt; runs the &lt;code&gt;create_tables.sql&lt;/code&gt; files inside of postgres to populate the database with example values.&lt;/p&gt; &#xA;&lt;p&gt;You can run all practice problems at once with the incantation&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ docker-compose &amp;lt; quiz_notes_?.sql exec -T pg psql -a&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can enter an interactive SQL session with the command&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ docker-compose exec pg psql&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>okio-ai/nendo-platform</title>
    <updated>2024-02-24T01:23:55Z</updated>
    <id>tag:github.com,2024-02-24:/okio-ai/nendo-platform</id>
    <link href="https://github.com/okio-ai/nendo-platform" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Nendo is an open source platform for AI-driven audio management, intelligence, and generation.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Nendo Platform&lt;/h1&gt; &#xA;&lt;br&gt; &#xA;&lt;p align=&#34;left&#34;&gt; &lt;img src=&#34;https://okio.ai/docs/assets/nendo_logo.png&#34; width=&#34;500&#34; alt=&#34;Nendo Core&#34;&gt; &lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;p align=&#34;left&#34;&gt; &lt;a href=&#34;https://okio.ai&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://img.shields.io/website/https/okio.ai&#34; alt=&#34;Website&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://twitter.com/okio_ai&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://img.shields.io/twitter/url/https/twitter.com/okio_ai.svg?style=social&amp;amp;label=Follow%20%40okio_ai&#34; alt=&#34;Twitter&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://discord.gg/gaZMZKzScj&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://dcbadge.vercel.app/api/server/XpkUsjwXTp?compact=true&amp;amp;style=flat&#34; alt=&#34;Discord&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Nendo is an open source platform for AI-driven audio management, intelligence, and generation. It is a feature-rich web application stack to develop and run tools that are based on &lt;a href=&#34;https://github.com/okio-ai/nendo&#34;&gt;Nendo Core&lt;/a&gt; and it&#39;s &lt;a href=&#34;https://okio.ai/docs/plugins/&#34;&gt;plugin ecosystem&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/okio-ai/nendo-platform/main/#requirements&#34;&gt;Requirements&lt;/a&gt;&lt;/strong&gt; - &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/okio-ai/nendo-platform/main/#quickstart&#34;&gt;Quickstart&lt;/a&gt;&lt;/strong&gt; - &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/okio-ai/nendo-platform/main/#server-deployment&#34;&gt;Server Deployment&lt;/a&gt;&lt;/strong&gt; - &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/okio-ai/nendo-platform/main/#development&#34;&gt;Development&lt;/a&gt;&lt;/strong&gt; - &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/okio-ai/nendo-platform/main/#troubleshooting&#34;&gt;Troubleshooting&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;To run Nendo Platform on Unix-based systems, make sure you have &lt;code&gt;docker&lt;/code&gt; and &lt;code&gt;docker-compose&lt;/code&gt; (&lt;code&gt;&amp;gt;=1.28.0&lt;/code&gt;) installed. Make sure the user with which you intend to run Nendo Platform is a member of the &lt;code&gt;docker&lt;/code&gt; group, otherwise the &lt;code&gt;make&lt;/code&gt; commands will fail with &lt;code&gt;permission denied&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;GPU Compatibility&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: If your system does not have a GPU available, you can still run Nendo Platform in &lt;a href=&#34;https://raw.githubusercontent.com/okio-ai/nendo-platform/main/#cpu-mode&#34;&gt;CPU mode&lt;/a&gt; but expect certain tools to fail.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;Minimum Requirements&lt;/h4&gt; &#xA;&lt;p&gt;Nendo Platform needs a GPU with 8 GB of VRAM for the most basic AI features to work properly. Expect certain tools to be significantly slower or even to fail when running with the minimum requirements.&lt;/p&gt; &#xA;&lt;p&gt;Also note that audio files over 15 minutes in length might not be processable with the minimum requirements.&lt;/p&gt; &#xA;&lt;h4&gt;Recommended Requirements&lt;/h4&gt; &#xA;&lt;p&gt;Nendo Platform needs a GPU with at least 24 GB of VRAM for its whole feature set to work properly. The list of supported hardware includes, but is not limited to: RTX 3090 (Ti), RTX 4090 (Ti), RTX 8000, RTX A5000, RTX A6000, Tesla V100, A10, A100, H100.&lt;/p&gt; &#xA;&lt;p&gt;The default images for the GPU-enabled tools in Nendo use the &lt;strong&gt;&lt;code&gt;nvcr.io/nvidia/pytorch:22.08-py3&lt;/code&gt;&lt;/strong&gt; image which is based on &lt;strong&gt;&lt;code&gt;CUDA 11.7.1&lt;/code&gt;&lt;/strong&gt; and requires &lt;strong&gt;&lt;code&gt;NVIDIA Driver release 515&lt;/code&gt;&lt;/strong&gt;. Depending on your hardware setup, it might be necessary to build Nendo&#39;s tools with another nvidia container toolkit image as base. Refer to the &lt;a href=&#34;https://docs.nvidia.com/deeplearning/frameworks/support-matrix/index.html&#34;&gt;nvidia frameworks support matrix&lt;/a&gt; to find the right base image and tag for your hardware and make sure to use a version that includes &lt;code&gt;pytorch&lt;/code&gt;. Then, replace the image and tag at the top of &lt;code&gt;build/core/3.8-gpu/Dockerfile&lt;/code&gt; with the one that fits your system and call &lt;code&gt;make build-tools-gpu&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Quickstart&lt;/h2&gt; &#xA;&lt;p&gt;Everything can be controlled using &lt;code&gt;make&lt;/code&gt;. To get an overview of the available commands, just call it directly:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Before you start Nendo for the first time, you have to build the images:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make setup&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then you can start Nendo Platform by simply calling:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make run&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now start your browser and navigate to &lt;code&gt;http://localhost&lt;/code&gt; to view the Nendo Platform.&lt;/p&gt; &#xA;&lt;p&gt;The default username / password combination for the dev superuser is:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Username&lt;/strong&gt;: &lt;code&gt;dev@okio.ai&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Password&lt;/strong&gt;: &lt;code&gt;AIaudio4all!&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;To change the password of the default user, refer to the &lt;a href=&#34;https://raw.githubusercontent.com/okio-ai/nendo-platform/main/#server-deployment&#34;&gt;server deployment section&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;CPU mode&lt;/h3&gt; &#xA;&lt;p&gt;If your machine does not have a GPU, you can run Nendo Platform in CPU-only mode.&lt;/p&gt; &#xA;&lt;p&gt;First, build the CPU-mode images:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make setup-cpu&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then start Nendo by calling:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make run-cpu&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Many of the AI capabilities of a Nendo Platform require a GPU to run properly or at all. Expect most tools to fail in CPU-only mode.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Server deployment&lt;/h2&gt; &#xA;&lt;p&gt;To deploy Nendo Platform to your server, you need to set a few configuration variables before starting the server.&lt;/p&gt; &#xA;&lt;p&gt;First, you should decide whether or not you&#39;d like to have SSL enabled. &lt;strong&gt;Running Nendo Platform on a server without SSL enabled is strongly discouraged for security reasons.&lt;/strong&gt; The default is to have SSL enabled so you need to configure the correct location of your SSL certificate and private key:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;export SSL_CERTIFICATE_PATH=/path/to/my/certificate.crt&#xA;export SSL_KEY_PATH=/path/to/my/key.key&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, you can create the local directory &lt;code&gt;./cert&lt;/code&gt; and add your certificate and key as &lt;code&gt;./conf/nginx/certs/nendo.crt&lt;/code&gt; and &lt;code&gt;./conf/nginx/certs/nendo.key&lt;/code&gt; and it will be picked up without the need to specify the above environment variables.&lt;/p&gt; &#xA;&lt;p&gt;If you want to run Nendo Platform on your server without SSL enabled, you can skip defining the above environment variables and instead just set &lt;code&gt;USE_SSL&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;export USE_SSL=false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Set the DNS domain or IP address on which your server is listening. Make sure to differentiate between &lt;code&gt;https://&lt;/code&gt; and &lt;code&gt;http://&lt;/code&gt; depending on whether you have SSL enabled.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# if your server has a domain name:&#xA;export SERVER_URL=https://my-nendo-server.com&#xA;# OR, if your server has only an IP address:&#xA;export SERVER_URL=https://192.168.0.1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When everything is configured according to your setup, simply use &lt;code&gt;make run&lt;/code&gt; again to start the stack, open your browser and navigate to your domain / IP address to start using Nendo Platform.&lt;/p&gt; &#xA;&lt;p&gt;Finally, change the password of the default user:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make set-password NEW_PASSWORD=mynewpassword&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;p&gt;Nendo Platform comes with a &lt;em&gt;development mode&lt;/em&gt; in which the Nendo Web frontend and the Nendo API Server are started with debugging output and hot-reloading enabled.&lt;/p&gt; &#xA;&lt;p&gt;First, build the development-mode images:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make setup-dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then start Nendo by calling:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make run-dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: The hot-reloading only works with changes that are done to the application code, i.e. code that resides in the &lt;code&gt;nendo_server/&lt;/code&gt; subdirectory of &lt;code&gt;nendo-server&lt;/code&gt; and in the &lt;code&gt;src/&lt;/code&gt; subdirectory of &lt;code&gt;nendo-web&lt;/code&gt; accordingly. All changes to files outside those directories require &lt;a href=&#34;https://raw.githubusercontent.com/okio-ai/nendo-platform/main/#building&#34;&gt;rebuilding of the images, as explained below&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Now you can start developing your app by changing files in the &lt;code&gt;repo/nendo-server&lt;/code&gt; and &lt;code&gt;repo/nendo-web&lt;/code&gt; directories.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt;: Development mode is unsecure and should only be used in local environments.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Building&lt;/h3&gt; &#xA;&lt;p&gt;If you end up changing something about &lt;code&gt;nendo-server&lt;/code&gt; or &lt;code&gt;nendo-web&lt;/code&gt; that requires (re-)building of the images, you should use the respective &lt;code&gt;make&lt;/code&gt; commands for that. To build both images (server &lt;em&gt;and&lt;/em&gt; web):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make build-dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To only build &lt;code&gt;nendo-server&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make server-build&#xA;# OR, for development mode&#xA;make server-build-dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To only build &lt;code&gt;nendo-web&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make web-build&#xA;# OR, for development mode&#xA;make web-build-dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Updating&lt;/h3&gt; &#xA;&lt;p&gt;To get the latest version of all involved repos and packages, use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make update-dependencies&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then you need to rebuild the stack:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make build&#xA;# OR, for development mode&#xA;make build-dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Resetting&lt;/h3&gt; &#xA;&lt;p&gt;To completely erase the database and all associated audio files in the library, make sure the Nendo Platform is running and then call:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make flush&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;CAUTION: This will erase all data in your database and all audio files in the &lt;code&gt;library/&lt;/code&gt; folder. Make sure you understand the consequences before executing this command.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Debugging&lt;/h3&gt; &#xA;&lt;p&gt;To get the logs of the &lt;code&gt;nendo-server&lt;/code&gt; docker container:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make server-logs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To get the logs of the &lt;code&gt;nendo-web&lt;/code&gt; docker container:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make web-logs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To get a shell into the running &lt;code&gt;nendo-server&lt;/code&gt; container:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make server-shell&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To get a shell into the running &lt;code&gt;nendo-web&lt;/code&gt; container:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make web-shell&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Troubleshooting&lt;/h2&gt; &#xA;&lt;h3&gt;I added/updated a package in &lt;code&gt;nendo-web&lt;/code&gt; but it won&#39;t update the app&lt;/h3&gt; &#xA;&lt;p&gt;This is due to docker build caching. When chaning &lt;code&gt;package.json&lt;/code&gt;, run once:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;rm repo/nendo-web/package-lock.json repo/nendo-web/node_modules&#xA;make web-build-dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To update the image.&lt;/p&gt; &#xA;&lt;h3&gt;The building of &lt;code&gt;nendo-server&lt;/code&gt; fails with a checksum error&lt;/h3&gt; &#xA;&lt;p&gt;Try to build from scratch by first removing the existing image and clearing the docker build cache:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker image rm nendo-server&#xA;docker builder prune&#xA;make server-build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;I started Nendo but when I try to log in, I get the error &lt;code&gt;Error logging in: {}&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Most likely, Nendo has not fully booted up yet. To check, run &lt;code&gt;make server-logs&lt;/code&gt; and verify that you see the line &lt;code&gt;INFO Application startup complete.&lt;/code&gt;. Then try to log in again.&lt;/p&gt; &#xA;&lt;h3&gt;When I start Nendo, the server fails to build with &lt;code&gt;UID 0 is not unique&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;When you encounter the following error during startup of Nendo:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;=&amp;gt; ERROR [server-dev nendo-server-base 6/16] RUN useradd nendo --create-home -u 0 -g 0 -m -s /bin/bash 0.3s&#xA;0.318 useradd: UID 0 is not unique&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then you most likely tried to run the &lt;code&gt;make build&lt;/code&gt; or &lt;code&gt;make run&lt;/code&gt; as the &lt;code&gt;root&lt;/code&gt; user or are using &lt;code&gt;sudo&lt;/code&gt; to run it. This is not supported by Nendo. Please make sure you run any of the &lt;code&gt;make&lt;/code&gt; commands as a non-root user and also make sure that the user you are running the commands with is in the &lt;code&gt;docker&lt;/code&gt; group. To verify that, check the output of the &lt;code&gt;id&lt;/code&gt; command and make sure you see &lt;code&gt;(docker)&lt;/code&gt; there. Then proceed to run your &lt;code&gt;make&lt;/code&gt; calls without &lt;code&gt;sudo&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;When I try to run a tool, I get a CUDA version mismatch error&lt;/h3&gt; &#xA;&lt;p&gt;Make sure you are using the right version of the NVIDIA container toolkit images for your hardware. Refer to the &lt;a href=&#34;https://raw.githubusercontent.com/okio-ai/nendo-platform/main/#gpu-compatibility&#34;&gt;GPU requirements section&lt;/a&gt; for more information.&lt;/p&gt;</summary>
  </entry>
</feed>