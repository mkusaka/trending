<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dockerfile Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-11-06T01:34:55Z</updated>
  <subtitle>Daily Trending of Dockerfile in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>nachovizzo/ros_in_docker</title>
    <updated>2022-11-06T01:34:55Z</updated>
    <id>tag:github.com,2022-11-06:/nachovizzo/ros_in_docker</id>
    <link href="https://github.com/nachovizzo/ros_in_docker" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Run all your ugly ROS1 nodes inside a completely isolated development environment. With a nice text editor support for development&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ROS in Docker&lt;/h1&gt; &#xA;&lt;p&gt;Tired of trying to compile ROS1 on Ubuntu 22.04? Tired of breaking your systems due to conflicts with the ton of dependencies ROS1 has? Here we propose a solution. A completely isolated environment, with ROS1 support by default, extensible, and with all the tools included for developing ROS1 applications without having to install them locally.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/21349875/199551739-c33dee77-57c7-4c10-a272-c60b98645368.mp4&#34;&gt;https://user-images.githubusercontent.com/21349875/199551739-c33dee77-57c7-4c10-a272-c60b98645368.mp4&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Tested host-machines&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Ubuntu 22.04&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Supported development environments&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; tmux&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; VSCode&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;GUI Supported?&lt;/h2&gt; &#xA;&lt;p&gt;Of course, you can run &lt;code&gt;rviz&lt;/code&gt; and friends inside the dev container, it looks a bit ugly but at least it works.&lt;/p&gt; &#xA;&lt;h2&gt;Install host-machine dependencies&lt;/h2&gt; &#xA;&lt;p&gt;For now, you only need, I expect this repo to be used by &#34;intermediate&#34; developers, so I guess you can figure out how to do that.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;docker&lt;/li&gt; &#xA; &lt;li&gt;docker-compose&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How to use with your project&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Click on &#34;Use this template&#34;, or fork if you like.&lt;/li&gt; &#xA; &lt;li&gt;Git clone the repo locally and &lt;code&gt;cd&lt;/code&gt; into it.&lt;/li&gt; &#xA; &lt;li&gt;Launch &lt;code&gt;make docker&lt;/code&gt; to create a local docker container image with all the nice stuff installed. If you need any extra dependency, now is the time to add it to the &lt;a href=&#34;https://raw.githubusercontent.com/nachovizzo/ros_in_docker/main/Dockerfile&#34;&gt;Dockerfile&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Create an &lt;code&gt;src/&lt;/code&gt; directory inside the repository: &lt;code&gt;mkdir -p src/&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Clone inside the &lt;code&gt;src/&lt;/code&gt; directory the ROS1 code you want to develop/test. I will be using the &lt;a href=&#34;https://github.com/ros/ros_tutorials&#34;&gt;ros_tutorials&lt;/a&gt; as an example, but it can be as complex as you wish, so, &lt;code&gt;git clone git@github.com:ros/ros_tutorials.git src/&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Launch &lt;code&gt;make&lt;/code&gt;, this will build your project and open a &lt;code&gt;tmux&lt;/code&gt; session with all the batteries included.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;What about injecting rosbags inside the dev container?&lt;/h2&gt; &#xA;&lt;p&gt;Got you covered, just use the environment variable &lt;code&gt;export ROS_BAGS=/path/to/data/in/host&lt;/code&gt; and launch &lt;code&gt;make&lt;/code&gt;. Your rosbag files will be mounted in the dev container in &lt;code&gt;~/ros_ws/bags&lt;/code&gt; and are read-only accessible to the ROS1 applications.&lt;/p&gt; &#xA;&lt;h2&gt;How to extend the container&lt;/h2&gt; &#xA;&lt;p&gt;Could not be more simple, just add all your user-space command (use sudo) on the &lt;a href=&#34;https://raw.githubusercontent.com/nachovizzo/ros_in_docker/main/Dockerfile&#34;&gt;Dockerfile&lt;/a&gt;. &lt;code&gt;sudo apt install &amp;lt;your-libs&amp;gt;&lt;/code&gt; and enjoy the setup.&lt;/p&gt; &#xA;&lt;h2&gt;Security concerns&lt;/h2&gt; &#xA;&lt;p&gt;The entire setup is NOT safe at all, so, use it at your own risk. I&#39;m mounting directories from the host machine to the docker container where the user has &lt;code&gt;sudo&lt;/code&gt; access without a password. So you can literally delete some stuff with &lt;code&gt;root&lt;/code&gt; permissions without even typing a password. So, you are warned!&lt;/p&gt; &#xA;&lt;h2&gt;About the tools for development&lt;/h2&gt; &#xA;&lt;p&gt;I built this project on top of my &lt;a href=&#34;https://github.com/nachovizzo/dotfiles/raw/main/.config/yadm/bootstrap&#34;&gt;dotfiles&lt;/a&gt;, so it&#39;s completely overfitted to my own needs and I don&#39;t intend to provide support for extra stuff. If there is something you don&#39;t like or don&#39;t need, feel free to modify your copy of the Dockerfile. You are in full control of what you want and not.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>umihico/docker-selenium-lambda</title>
    <updated>2022-11-06T01:34:55Z</updated>
    <id>tag:github.com,2022-11-06:/umihico/docker-selenium-lambda</id>
    <link href="https://github.com/umihico/docker-selenium-lambda" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The simplest demo of chrome automation by python and selenium in AWS Lambda&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;docker-selenium-lambda&lt;/h1&gt; &#xA;&lt;p&gt;This is minimum demo of headless chrome and selenium on container image on AWS Lambda&lt;/p&gt; &#xA;&lt;p&gt;This image goes with these versions. &lt;a href=&#34;https://circleci.com/gh/umihico/docker-selenium-lambda/tree/circleci&#34;&gt;These are automatically updated and tested everyday. &lt;img src=&#34;https://circleci.com/gh/umihico/docker-selenium-lambda/tree/circleci.svg?style=svg&#34; alt=&#34;CircleCI&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Python 3.9.14&lt;/li&gt; &#xA; &lt;li&gt;chromium 107.0.5304.0&lt;/li&gt; &#xA; &lt;li&gt;chromedriver 107.0.5304.62&lt;/li&gt; &#xA; &lt;li&gt;selenium 4.6.0&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Running the demo&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ npm install -g serverless # skip this line if you have already installed Serverless Framework&#xA;$ export AWS_REGION=ap-northeast-1 # You can specify region or skip this line. us-east-1 will be used by default.&#xA;$ sls create --template-url &#34;https://github.com/umihico/docker-selenium-lambda/tree/main&#34; --path docker-selenium-lambda &amp;amp;&amp;amp; cd $_&#xA;$ sls deploy&#xA;$ sls invoke --function demo # Yay! You will get texts of example.com&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Public image is available&lt;/h2&gt; &#xA;&lt;p&gt;If you want your image simplier and updated automatically, rewrite the Dockerfile with the following commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Dockerfile&#34;&gt;FROM umihico/aws-lambda-selenium-python:latest&#xA;&#xA;COPY main.py ./&#xA;CMD [ &#34;main.handler&#34; ]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Available tags are listed &lt;a href=&#34;https://hub.docker.com/r/umihico/aws-lambda-selenium-python/tags&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Side Project&lt;/h2&gt; &#xA;&lt;p&gt;If you don&#39;t want to create functions each time for each purpose, Please check out &lt;a href=&#34;https://github.com/umihico/pythonista-chromeless&#34;&gt;pythonista-chromeless&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>cloudfaster-academy-workshop/lab-ecs-docker</title>
    <updated>2022-11-06T01:34:55Z</updated>
    <id>tag:github.com,2022-11-06:/cloudfaster-academy-workshop/lab-ecs-docker</id>
    <link href="https://github.com/cloudfaster-academy-workshop/lab-ecs-docker" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;CloudFaster Academy: Laboratório de containers na AWS (Amazon ECS + Amazon ECR)&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Autor:&lt;/strong&gt; &lt;a href=&#34;https://cloudfaster.com.br&#34;&gt;CloudFaster Tecnologia&lt;/a&gt;, &lt;strong&gt;Última revisão:&lt;/strong&gt; 31/10/2022&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Introdução&lt;/h2&gt; &#xA;&lt;p&gt;Para utilização de containers Docker na AWS vamos ver o serviço Amazon ECS (Elastic Container Service), neste serviço podemos utilizar as imagens de Docker que geramos para executar nossos containers.&lt;/p&gt; &#xA;&lt;p&gt;O Amazon ECS é baseado em Tarefas (&lt;code&gt;Tasks&lt;/code&gt;) e Serviços (&lt;code&gt;Services&lt;/code&gt;), onde:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;Tasks&lt;/code&gt; são utilizadas para configurar a forma que nosso container vai ser executado, como um ($ docker run), onde iremos mapear, portas, volumes e capacidade de memoria e processamento.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;Services&lt;/code&gt; são utilizados para definir como e quando a &lt;code&gt;Tasks&lt;/code&gt; seram executada.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Juntamente com o serviço do Amazon ECS, precisamos utilziar o Amazon ECR (Elastic Container Registry) para armazenar as imagens Docker que faremos o upload.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/cloudfaster-academy-workshop/lab-ecs-docker/main/assets/ARQ-LAB-ECS.png&#34; alt=&#34;ARQ&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Pré-requisitos&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Uma conta na AWS.&lt;/li&gt; &#xA; &lt;li&gt;Um usuário com permissões suficientes para acessar os recursos necessários (ECS, ECR).&lt;/li&gt; &#xA; &lt;li&gt;Credenciais de acesso programático&lt;/li&gt; &#xA; &lt;li&gt;Docker instalado no dispositivo do aluno&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Importante:&lt;/strong&gt; Segue a documentação oficial para a instalação do Docker em ambiente Lunix, MacOS e Windows. &lt;a href=&#34;https://docs.docker.com/get-docker/&#34;&gt;https://docs.docker.com/get-docker/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;AWS-CLI instalado e configurado no dispositivo do aluno&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Importante:&lt;/strong&gt; Segue a documentação oficial da AWS para a instalação do AWS-CLI em ambiente Lunix, MacOS e Windows. Link &lt;a href=&#34;https://docs.aws.amazon.com/pt_br/cli/latest/userguide/getting-started-install.html&#34;&gt;https://docs.aws.amazon.com/pt_br/cli/latest/userguide/getting-started-install.html&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Passo 1: Configurar um Dockerfile&lt;/h2&gt; &#xA;&lt;p&gt;Vamos criar um docker file com o objetivo de:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Instalar o Apache.&lt;/li&gt; &#xA; &lt;li&gt;Fazer o download de um arquivo .html no diretório padrão do Apache.&lt;/li&gt; &#xA; &lt;li&gt;Iniciar o Apache quando o container for executado.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Acesse aqui o &lt;a href=&#34;https://raw.githubusercontent.com/cloudfaster-academy-workshop/lab-ecs-docker/main/scripts/Dockerfile&#34;&gt;Dockerfile&lt;/a&gt; de exemplo.&lt;/p&gt; &#xA;&lt;h2&gt;Passo 2: Fazer o build da imagem docker&lt;/h2&gt; &#xA;&lt;p&gt;No diretório/pasta que estiver o Dockerfile, execute o comando abaixo para fazer o build da imagem que vamos utilizar.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ docker build -t lab-ecs:latest .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Pra verificar a imagem criada execute:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ docker images&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A imagem que fizemos o build deve aparecer.&lt;/p&gt; &#xA;&lt;h2&gt;Passo 3: Criar um repositório no Amazon ECR&lt;/h2&gt; &#xA;&lt;p&gt;Após acessar sua conta AWS, navegue até o serviço &#34;ECR&#34; ou acesse diretamente por esse link: &lt;a href=&#34;https://console.aws.amazon.com/ecr&#34;&gt;https://console.aws.amazon.com/ecr&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Vamos criar um novo repositório de imagens docker.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/cloudfaster-academy-workshop/lab-ecs-docker/main/assets/tela_01.png&#34; alt=&#34;ECS_01&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Selecione a visibilidade do repositório como &lt;em&gt;Privado&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Coloque o nome &lt;code&gt;lab-ecr&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/cloudfaster-academy-workshop/lab-ecs-docker/main/assets/tela_02.png&#34; alt=&#34;ECS_02&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Deixe as outras opções como padrão (não modifica-las), e clique em &lt;em&gt;Criar repositório&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/cloudfaster-academy-workshop/lab-ecs-docker/main/assets/tela_03.png&#34; alt=&#34;ECS_03&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Vamos observar que o nosso repositório foi criado com sucesso.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/cloudfaster-academy-workshop/lab-ecs-docker/main/assets/tela_04.png&#34; alt=&#34;ECS_04&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Passo 4: Fazendo upload da imagem docker para o Amazon ECR e copiando a URI&lt;/h2&gt; &#xA;&lt;p&gt;Para realizar o upload da imagem docker no Amazon ECR vamos, clicar no nosso repositório:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/cloudfaster-academy-workshop/lab-ecs-docker/main/assets/tela_05.png&#34; alt=&#34;ECS_05&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Clicar na opção &lt;em&gt;Visualizar comando de push&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/cloudfaster-academy-workshop/lab-ecs-docker/main/assets/tela_06.png&#34; alt=&#34;ECS_06&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Vamos ter duas formas de fazer o &lt;em&gt;push&lt;/em&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Utilizando sistema operacional &lt;em&gt;Linux ou Mac&lt;/em&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Utilizando sistema operacional &lt;em&gt;Windows&lt;/em&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Importante:&lt;/strong&gt; É necessário ter configurado o AWS-CLI com suas credencias de acesso. Segue link da documentação de configuração do AWS-CLI. (&lt;a href=&#34;https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-quickstart.html&#34;&gt;https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-quickstart.html&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;code&gt;LINUX/MAC:&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/cloudfaster-academy-workshop/lab-ecs-docker/main/assets/tela_07.png&#34; alt=&#34;ECS_07&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;WINDOWS:&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/cloudfaster-academy-workshop/lab-ecs-docker/main/assets/tela_08.png&#34; alt=&#34;ECS_08&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Após o upload da imagem docker vamos copiar a &lt;em&gt;URI da imagem&lt;/em&gt; para usar ela na criação na nossa task posteriormente.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/cloudfaster-academy-workshop/lab-ecs-docker/main/assets/tela_09.png&#34; alt=&#34;ECS_09&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Passo 5: Criando um novo grupo de segurança&lt;/h2&gt; &#xA;&lt;p&gt;Vamos realizar a criação de um grupo de segurança para os nossos containers.&lt;/p&gt; &#xA;&lt;p&gt;Para isso, vamos acessar &lt;em&gt;em outra aba&lt;/em&gt; o serviço do Amazon EC2 (&lt;a href=&#34;https://console.aws.amazon.com/ec2&#34;&gt;https://console.aws.amazon.com/ec2&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;Vamos clicar em &lt;em&gt;Security Group&lt;/em&gt;, e em seguida em &lt;em&gt;Criar grupo de segurança&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/cloudfaster-academy-workshop/lab-ecs-docker/main/assets/tela_31.png&#34; alt=&#34;ECS_31&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Nas configurações do &lt;em&gt;Grupo de segurança&lt;/em&gt; vamos colocar:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Nome: &lt;code&gt;sg-lab-ecs&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Descrição : &lt;code&gt;sg-lab-ecs&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Regras de entrada: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Vamos &lt;em&gt;Adicionar Regra&lt;/em&gt;: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Colocar o protocolo &lt;em&gt;HTTP&lt;/em&gt; e liberar para &lt;em&gt;qualquer origem&lt;/em&gt;.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Após as configurações, clicar em &lt;code&gt;Criar grupo de segurança&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Com isso o nosso *Grupo de segurança dos containers estão criados.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/cloudfaster-academy-workshop/lab-ecs-docker/main/assets/tela_32.png&#34; alt=&#34;ECS_32&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Passo 6: Criando o cluster de ECS&lt;/h2&gt; &#xA;&lt;p&gt;Navegue até o serviço &#34;ECR&#34; ou acesse diretamente por esse link: &lt;a href=&#34;https://console.aws.amazon.com/ecr&#34;&gt;https://console.aws.amazon.com/ecr&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Vamos clicar em &lt;em&gt;Criar Cluster&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/cloudfaster-academy-workshop/lab-ecs-docker/main/assets/tela_10.png&#34; alt=&#34;ECS_10&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Na criação do Cluster vamos preencher o nome: &lt;code&gt;LAB-ECS&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/cloudfaster-academy-workshop/lab-ecs-docker/main/assets/tela_11.png&#34; alt=&#34;ECS_11&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Deixaremos a VPC Padrão e as subnets com o sufixo &lt;code&gt;1a&lt;/code&gt; e &lt;code&gt;1b&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/cloudfaster-academy-workshop/lab-ecs-docker/main/assets/tela_12.png&#34; alt=&#34;ECS_12&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;As demais opções vamos deixar default (não modificar) e clicar em &lt;em&gt;Criar&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/cloudfaster-academy-workshop/lab-ecs-docker/main/assets/tela_13.png&#34; alt=&#34;ECS_13&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Você vai ser redirecionado para o serviço do Amazon ECS e o cluster será provisionado.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/cloudfaster-academy-workshop/lab-ecs-docker/main/assets/tela_14.png&#34; alt=&#34;ECS_14&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Quando o Cluster estiver provisionado, veremos a mensagem &lt;em&gt;Criado com êxito&lt;/em&gt;, e o mesmo estará disponível.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/cloudfaster-academy-workshop/lab-ecs-docker/main/assets/tela_15.png&#34; alt=&#34;ECS_15&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Passo 7: Criando uma Task Definition para o ECS&lt;/h2&gt; &#xA;&lt;p&gt;Agora que temos o Cluster disponível, vamos clicar em &lt;em&gt;Definições de tarefa&lt;/em&gt;, e em &lt;em&gt;Criar nova definição de tarefa&lt;/em&gt;,&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/cloudfaster-academy-workshop/lab-ecs-docker/main/assets/tela_16.png&#34; alt=&#34;ECS_16&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Selecionar a opção &lt;em&gt;Criar nova definição de tarefa&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/cloudfaster-academy-workshop/lab-ecs-docker/main/assets/tela_17.png&#34; alt=&#34;ECS_17&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Na tela de criação de task vamos escolher o nome: &lt;code&gt;task-lab-ecs&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/cloudfaster-academy-workshop/lab-ecs-docker/main/assets/tela_18.png&#34; alt=&#34;ECS_18&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Na etapa de configuração de Container, colocamos:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Nome: &lt;code&gt;apache&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;URI da imagem (que salvamos no passo 4)&lt;/li&gt; &#xA; &lt;li&gt;Porta que vamos utilizar: &lt;code&gt;80&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Protocolo: &lt;code&gt;TCP&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Em seguida vamo Clicar em &lt;em&gt;Próximo&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/cloudfaster-academy-workshop/lab-ecs-docker/main/assets/tela_19.png&#34; alt=&#34;ECS_19&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Na etapa de configuração de ambiente da aplicação, colocamos:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Ambiente: &lt;code&gt;AWS Fargate&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Sistema Operacional/Arquitetura: &lt;code&gt;Linux/X86_64&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;CPU: &lt;code&gt;1 vCPU&lt;/code&gt; , Memória: &lt;code&gt;2GB&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Função da tarefa: &lt;code&gt;TeamRole&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Função de execução da tarefa: &lt;code&gt;TeamRole&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Em seguida vamos Clicar em &lt;em&gt;Próximo&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/cloudfaster-academy-workshop/lab-ecs-docker/main/assets/tela_20.png&#34; alt=&#34;ECS_20&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Veremos o ambiente para uma revisão e em seguida clicar em &lt;em&gt;Criar&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/cloudfaster-academy-workshop/lab-ecs-docker/main/assets/tela_13.png&#34; alt=&#34;ECS_13&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Podemos obsrvar que a &lt;em&gt;Task definition&lt;/em&gt; está sendo provisionada.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/cloudfaster-academy-workshop/lab-ecs-docker/main/assets/tela_21.png&#34; alt=&#34;ECS_21&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Assim que concluir podemos ver.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/cloudfaster-academy-workshop/lab-ecs-docker/main/assets/tela_22.png&#34; alt=&#34;ECS_22&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Passo 8: Rodando a Task de forma manual e validando o acesso&lt;/h2&gt; &#xA;&lt;p&gt;No painel do serviço do ECS, vamos abrir o &lt;em&gt;Cluster&lt;/em&gt;, selecionar a aba &lt;em&gt;Tarefas&lt;/em&gt; e clicar em &lt;em&gt;Executar nova tarefa&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/cloudfaster-academy-workshop/lab-ecs-docker/main/assets/tela_23.png&#34; alt=&#34;ECS_23&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Na configuração de ambiente vamos marcar a opção &lt;em&gt;Tipo de inicialização&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/cloudfaster-academy-workshop/lab-ecs-docker/main/assets/tela_24.png&#34; alt=&#34;ECS_24&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Na configuração de implantação vamos colocar:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Tipo: &lt;em&gt;Tarefa&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;Familia: &lt;em&gt;task-lab-ecs&lt;/em&gt; na versão mais recente&lt;/li&gt; &#xA; &lt;li&gt;Numero de tarefas, vamos colocar &lt;em&gt;1&lt;/em&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Vamos deixar a opção &lt;code&gt;Especifique a revisão manualmente&lt;/code&gt; &lt;em&gt;DESMARCADA&lt;/em&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/cloudfaster-academy-workshop/lab-ecs-docker/main/assets/tela_25.png&#34; alt=&#34;ECS_25&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Nas configurações de &lt;em&gt;Rede&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Selecionamos as subnets: &lt;code&gt;us-east-1a&lt;/code&gt; e &lt;code&gt;us-east-1b&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Importante:&lt;/strong&gt; Caso esteja em outra região, utilize o prefixo da região e os finais &lt;code&gt;1a&lt;/code&gt; e &lt;code&gt;1b&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/cloudfaster-academy-workshop/lab-ecs-docker/main/assets/tela_33.png&#34; alt=&#34;ECS_33&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Vamos selecionar a opção de &lt;em&gt;Usar um grupo de segurança existente&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Nome do grupo de segurança: &lt;code&gt;sg_lab_ecs&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/cloudfaster-academy-workshop/lab-ecs-docker/main/assets/tela_29.png&#34; alt=&#34;ECS_29&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Agora vamos clicar em &lt;em&gt;Implantar&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/cloudfaster-academy-workshop/lab-ecs-docker/main/assets/tela_26.png&#34; alt=&#34;ECS_26&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Podemos ver nossa Tarefa sendo provisionada.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/cloudfaster-academy-workshop/lab-ecs-docker/main/assets/tela_27.png&#34; alt=&#34;ECS_27&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Quando o status da nossa tafera estiver como &lt;em&gt;Em execução&lt;/em&gt; vamos clicar nela.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/cloudfaster-academy-workshop/lab-ecs-docker/main/assets/tela_28.png&#34; alt=&#34;ECS_28&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Assim que clicar na &lt;em&gt;Task&lt;/em&gt; em execução, vamos pegar o IP externo dela e realizar o teste no navegador.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/cloudfaster-academy-workshop/lab-ecs-docker/main/assets/tela_30.png&#34; alt=&#34;ECS_30&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Realizando o teste no navegador vamos ter acesso a aplicação dentro do container.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/cloudfaster-academy-workshop/lab-ecs-docker/main/assets/tela_web.png&#34; alt=&#34;WEB_01&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Passo 9: Rodando task de forma automática criando um serviço&lt;/h2&gt; &#xA;&lt;p&gt;Voltando a tela iniciar do nosso &lt;em&gt;Cluster de ECS&lt;/em&gt;. Vamos clicar em &lt;em&gt;Serviços&lt;/em&gt; e em seguida em &lt;em&gt;Implantar&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/cloudfaster-academy-workshop/lab-ecs-docker/main/assets/tela_34.png&#34; alt=&#34;ECS_34&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Na tela de configuração do &lt;em&gt;Serviço&lt;/em&gt; vamos selecionar:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Opções de computação: &lt;code&gt;Tipo de inicialização&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Tipo de inicialização: &lt;code&gt;FARGATE&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Em Configura&#39;ão de implantação vamos configurar:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Tipo: &lt;code&gt;Serviço&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Definição de tarefa: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;DESMARQUE A OPÇÃO &lt;code&gt;Especifique a revisão manualmente&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Família: &lt;code&gt;task-lab-ecs&lt;/code&gt; (que é &lt;em&gt;task&lt;/em&gt; que criamos).&lt;/li&gt; &#xA;   &lt;li&gt;Revisão: &lt;code&gt;LATEST&lt;/code&gt; (última versão).&lt;/li&gt; &#xA;   &lt;li&gt;Nome do serviço: &lt;code&gt;service-lab-ecs&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Tipo de serviço: &lt;code&gt;Réplica&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Tarefas desejadas: &lt;code&gt;2&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Nas configurações de rede, vamos fazer as mesmas do &lt;code&gt;Passo 08&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Em seguida Clique em &lt;em&gt;Implantar&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;O provisionamento do nosso serviço vai iniciar, e deve demorar alguns minutos.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/cloudfaster-academy-workshop/lab-ecs-docker/main/assets/tela_35.png&#34; alt=&#34;ECS_35&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Quando finalizar, podemos ver nosso serviço ativo.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/cloudfaster-academy-workshop/lab-ecs-docker/main/assets/tela_36.png&#34; alt=&#34;ECS_36&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Clicando em &lt;em&gt;Task&lt;/em&gt; já vemos elas sendo provisionadas.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/cloudfaster-academy-workshop/lab-ecs-docker/main/assets/tela_37.png&#34; alt=&#34;ECS_37&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;E um pouco depois, com o status &lt;em&gt;Em execução&lt;/em&gt;. E finalmente podemos repetir o teste que fizemos no final do &lt;code&gt;Passo 08&lt;/code&gt;, onde:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Clicamos na &lt;em&gt;Task&lt;/em&gt;, copiamos o endereço de IP Externo, e testamos no navegador.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/cloudfaster-academy-workshop/lab-ecs-docker/main/assets/tela_37.png&#34; alt=&#34;ECS_38&#34;&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Agora temos o mesmo ambiente do LAB de EC2, porem utilizando containers na AWS com o serviço do Amazon ECS.&lt;/p&gt; &#xA;&lt;p&gt;That&#39;s all folks!&lt;/p&gt;</summary>
  </entry>
</feed>