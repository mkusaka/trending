<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dockerfile Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-09-01T01:29:59Z</updated>
  <subtitle>Daily Trending of Dockerfile in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>snakepacker/python</title>
    <updated>2023-09-01T01:29:59Z</updated>
    <id>tag:github.com,2023-09-01:/snakepacker/python</id>
    <link href="https://github.com/snakepacker/python" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Python docker images&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;A simple way to build a Python project&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/snakepacker/python/raw/master/logo.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;This repository provides and demonstrates a way to pack python package into a compact Docker image, based on modern &lt;a href=&#34;https://releases.ubuntu.com/jammy/&#34;&gt;Ubuntu Jammy&lt;/a&gt; operation system.&lt;/p&gt; &#xA;&lt;h2&gt;Awailable images&lt;/h2&gt; &#xA;&lt;p&gt;This project is available both in the official docker repository and also on the Github Container Registry (&lt;code&gt;ghcr.io&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;https://github.com/orgs/snakepacker/repositories&#34;&gt;&lt;code&gt;ghcr.io&lt;/code&gt;&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;https://hub.docker.com/r/snakepacker/python&#34;&gt;&lt;code&gt;docker.io&lt;/code&gt;&lt;/a&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/orgs/snakepacker/packages/container/package/python%2Fall&#34;&gt;&lt;code&gt;ghcr.io/snakepacker/python/all&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://hub.docker.com/r/snakepacker/python/tags?page=1&amp;amp;name=all&#34;&gt;&lt;code&gt;snakepacker/python:all&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/orgs/snakepacker/packages/container/package/python%2Fall-pillow&#34;&gt;&lt;code&gt;ghcr.io/snakepacker/python/all-pillow&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://hub.docker.com/r/snakepacker/python/tags?page=1&amp;amp;name=all-pillow&#34;&gt;&lt;code&gt;snakepacker/python:all-pillow&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/orgs/snakepacker/packages/container/package/python%2F3.11&#34;&gt;&lt;code&gt;ghcr.io/snakepacker/python/3.11&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://hub.docker.com/r/snakepacker/python/tags?page=1&amp;amp;name=3.11&#34;&gt;&lt;code&gt;snakepacker/python:3.11&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/orgs/snakepacker/packages/container/package/python%2F3.11-pillow&#34;&gt;&lt;code&gt;ghcr.io/snakepacker/python/3.11-pillow&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://hub.docker.com/r/snakepacker/python/tags?page=1&amp;amp;name=3.11-pillow&#34;&gt;&lt;code&gt;snakepacker/python:3.11-pillow&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/orgs/snakepacker/packages/container/package/python%2F3.10&#34;&gt;&lt;code&gt;ghcr.io/snakepacker/python/3.10&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://hub.docker.com/r/snakepacker/python/tags?page=1&amp;amp;name=3.10&#34;&gt;&lt;code&gt;snakepacker/python:3.10&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/orgs/snakepacker/packages/container/package/python%2F3.10-pillow&#34;&gt;&lt;code&gt;ghcr.io/snakepacker/python/3.10-pillow&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://hub.docker.com/r/snakepacker/python/tags?page=1&amp;amp;name=3.10-pillow&#34;&gt;&lt;code&gt;snakepacker/python:3.10-pillow&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/orgs/snakepacker/packages/container/package/python%2F3.9&#34;&gt;&lt;code&gt;ghcr.io/snakepacker/python/3.9&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://hub.docker.com/r/snakepacker/python/tags?page=1&amp;amp;name=3.9&#34;&gt;&lt;code&gt;snakepacker/python:3.9&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/orgs/snakepacker/packages/container/package/python%2F3.9-pillow&#34;&gt;&lt;code&gt;ghcr.io/snakepacker/python/3.9-pillow&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://hub.docker.com/r/snakepacker/python/tags?page=1&amp;amp;name=3.9-pillow&#34;&gt;&lt;code&gt;snakepacker/python:3.9-pillow&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/orgs/snakepacker/packages/container/package/python%2F3.8&#34;&gt;&lt;code&gt;ghcr.io/snakepacker/python/3.8&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://hub.docker.com/r/snakepacker/python/tags?page=1&amp;amp;name=3.8&#34;&gt;&lt;code&gt;snakepacker/python:3.8&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/orgs/snakepacker/packages/container/package/python%2F3.8-pillow&#34;&gt;&lt;code&gt;ghcr.io/snakepacker/python/3.8-pillow&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://hub.docker.com/r/snakepacker/python/tags?page=1&amp;amp;name=3.8-pillow&#34;&gt;&lt;code&gt;snakepacker/python:3.8-pillow&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/orgs/snakepacker/packages/container/package/python%2F3.7&#34;&gt;&lt;code&gt;ghcr.io/snakepacker/python/3.7&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://hub.docker.com/r/snakepacker/python/tags?page=1&amp;amp;name=3.7&#34;&gt;&lt;code&gt;snakepacker/python:3.7&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/orgs/snakepacker/packages/container/package/python%2F3.7-pillow&#34;&gt;&lt;code&gt;ghcr.io/snakepacker/python/3.7-pillow&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://hub.docker.com/r/snakepacker/python/tags?page=1&amp;amp;name=3.7-pillow&#34;&gt;&lt;code&gt;snakepacker/python:3.7-pillow&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/orgs/snakepacker/packages/container/package/python%2Fpylama&#34;&gt;&lt;code&gt;ghcr.io/snakepacker/python/pylama&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://hub.docker.com/r/snakepacker/python/tags?page=1&amp;amp;name=pylama&#34;&gt;&lt;code&gt;snakepacker/python:pylama&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/orgs/snakepacker/packages/container/package/python%2Fpylava&#34;&gt;&lt;code&gt;ghcr.io/snakepacker/python/pylava&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://hub.docker.com/r/snakepacker/python/tags?page=1&amp;amp;name=pylava&#34;&gt;&lt;code&gt;snakepacker/python:pylava&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/orgs/snakepacker/packages/container/package/python%2Fipython&#34;&gt;&lt;code&gt;ghcr.io/snakepacker/python/ipython&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://hub.docker.com/r/snakepacker/python/tags?page=1&amp;amp;name=ipython&#34;&gt;&lt;code&gt;snakepacker/python:ipython&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/orgs/snakepacker/packages/container/package/python%2Fcertbot&#34;&gt;&lt;code&gt;ghcr.io/snakepacker/python/certbot&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://hub.docker.com/r/snakepacker/python/tags?page=1&amp;amp;name=certbot&#34;&gt;&lt;code&gt;snakepacker/python:certbot&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/orgs/snakepacker/packages/container/package/python%2Fblack&#34;&gt;&lt;code&gt;ghcr.io/snakepacker/python/black&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://hub.docker.com/r/snakepacker/python/tags?page=1&amp;amp;name=black&#34;&gt;&lt;code&gt;snakepacker/python:black&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/orgs/snakepacker/packages/container/package/python%2Fgray&#34;&gt;&lt;code&gt;ghcr.io/snakepacker/python/gray&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://hub.docker.com/r/snakepacker/python/tags?page=1&amp;amp;name=gray&#34;&gt;&lt;code&gt;snakepacker/python:gray&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/orgs/snakepacker/packages/container/package/python%2Fruff&#34;&gt;&lt;code&gt;ghcr.io/snakepacker/python/ruff&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://hub.docker.com/r/snakepacker/python/tags?page=1&amp;amp;name=ruff&#34;&gt;&lt;code&gt;snakepacker/python:ruff&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/orgs/snakepacker/packages/container/package/python%2Fjupyterlab&#34;&gt;&lt;code&gt;ghcr.io/snakepacker/python/jupyterlab&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://hub.docker.com/r/snakepacker/python/tags?page=1&amp;amp;name=jupyterlab&#34;&gt;&lt;code&gt;snakepacker/python:jupyterlab&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/orgs/snakepacker/packages/container/package/python%2Fbase&#34;&gt;&lt;code&gt;ghcr.io/snakepacker/python/base&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://hub.docker.com/r/snakepacker/python/tags?page=1&amp;amp;name=base&#34;&gt;&lt;code&gt;snakepacker/python:base&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Image descriptions&lt;/h2&gt; &#xA;&lt;p&gt;The images according to their purpose and features:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Tag&lt;/th&gt; &#xA;   &lt;th&gt;Info&lt;/th&gt; &#xA;   &lt;th&gt;Purpose&lt;/th&gt; &#xA;   &lt;th&gt;Features&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;all&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://flat.badgen.net/docker/size/snakepacker/python/all/amd64?label=size&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;build stage&lt;/td&gt; &#xA;   &lt;td&gt;all available python versions, libpython headers and compiler&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;all-pillow&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://flat.badgen.net/docker/size/snakepacker/python/all-pillow/amd64?label=size&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;build stage&lt;/td&gt; &#xA;   &lt;td&gt;all available python versions, libpython headers, graphics libraries headers and compiler&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.python.org/3/whatsnew/3.11.html&#34;&gt;3.11&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://flat.badgen.net/docker/size/snakepacker/python/3.11/amd64?label=size&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;target stage&lt;/td&gt; &#xA;   &lt;td&gt;pure python 3.11&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.python.org/3/whatsnew/3.10.html&#34;&gt;3.10&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://flat.badgen.net/docker/size/snakepacker/python/3.10/amd64?label=size&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;target stage&lt;/td&gt; &#xA;   &lt;td&gt;pure python 3.10&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.python.org/3/whatsnew/3.9.html&#34;&gt;3.9&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://flat.badgen.net/docker/size/snakepacker/python/3.9/amd64?label=size&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;target stage&lt;/td&gt; &#xA;   &lt;td&gt;pure python 3.9&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.python.org/3/whatsnew/3.8.html&#34;&gt;3.8&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://flat.badgen.net/docker/size/snakepacker/python/3.8/amd64?label=size&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;target stage&lt;/td&gt; &#xA;   &lt;td&gt;pure python 3.8&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.python.org/3/whatsnew/3.7.html&#34;&gt;3.7&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://flat.badgen.net/docker/size/snakepacker/python/3.7/amd64?label=size&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;target stage&lt;/td&gt; &#xA;   &lt;td&gt;pure python 3.7&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.python.org/3/whatsnew/3.11.html&#34;&gt;3.11-pillow&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://flat.badgen.net/docker/size/snakepacker/python/3.11-pillow/amd64?label=size&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;target stage&lt;/td&gt; &#xA;   &lt;td&gt;pure python 3.11 with graphics libraries binaries&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.python.org/3/whatsnew/3.10.html&#34;&gt;3.10-pillow&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://flat.badgen.net/docker/size/snakepacker/python/3.10-pillow/amd64?label=size&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;target stage&lt;/td&gt; &#xA;   &lt;td&gt;pure python 3.10 with graphics libraries binaries&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.python.org/3/whatsnew/3.9.html&#34;&gt;3.9-pillow&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://flat.badgen.net/docker/size/snakepacker/python/3.9-pillow/amd64?label=size&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;target stage&lt;/td&gt; &#xA;   &lt;td&gt;pure python 3.9 with graphics libraries binaries&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.python.org/3/whatsnew/3.8.html&#34;&gt;3.8-pillow&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://flat.badgen.net/docker/size/snakepacker/python/3.8-pillow/amd64?label=size&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;target stage&lt;/td&gt; &#xA;   &lt;td&gt;pure python 3.8 with graphics libraries binaries&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.python.org/3/whatsnew/3.7.html&#34;&gt;3.7-pillow&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://flat.badgen.net/docker/size/snakepacker/python/3.7-pillow/amd64?label=size&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;target stage&lt;/td&gt; &#xA;   &lt;td&gt;pure python 3.7 with graphics libraries binaries&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://pylama.readthedocs.io/en/latest/&#34;&gt;pylama&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://flat.badgen.net/docker/size/snakepacker/python/pylama/amd64?label=size&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;ready to use&lt;/td&gt; &#xA;   &lt;td&gt;pylama application image (useful for CI)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://pylavadocs.readthedocs.io/en/latest/&#34;&gt;pylava&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://flat.badgen.net/docker/size/snakepacker/python/pylava/amd64?label=size&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;ready to use&lt;/td&gt; &#xA;   &lt;td&gt;pylava application image (useful for CI)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://jupyter.org&#34;&gt;ipython&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://flat.badgen.net/docker/size/snakepacker/python/ipython/amd64?label=size&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;ready to use&lt;/td&gt; &#xA;   &lt;td&gt;ipython application image&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://certbot.eff.org&#34;&gt;certbot&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://flat.badgen.net/docker/size/snakepacker/python/certbot/amd64?label=size&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;ready to use&lt;/td&gt; &#xA;   &lt;td&gt;certbot application image&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://black.readthedocs.io/en/stable/&#34;&gt;black&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://flat.badgen.net/docker/size/snakepacker/python/black/amd64?label=size&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;ready to use&lt;/td&gt; &#xA;   &lt;td&gt;black application image (useful for CI)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/dizballanze/gray&#34;&gt;gray&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://flat.badgen.net/docker/size/snakepacker/python/gray/amd64?label=size&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;ready to use&lt;/td&gt; &#xA;   &lt;td&gt;gray application image (useful for CI)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/astral-sh/ruff&#34;&gt;ruff&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://flat.badgen.net/docker/size/snakepacker/python/ruff/amd64?label=size&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;ready to use&lt;/td&gt; &#xA;   &lt;td&gt;ruff linter image (useful for CI)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/jupyterlab/jupyterlab&#34;&gt;jupyterlab&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://flat.badgen.net/docker/size/snakepacker/python/jupyterlab/amd64?label=size&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;ready to use&lt;/td&gt; &#xA;   &lt;td&gt;jupyterlab image&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;base&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://flat.badgen.net/docker/size/snakepacker/python/base/amd64?label=size&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;common layers&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Concept&lt;/h2&gt; &#xA;&lt;p&gt;The main idea of this method is to build a &lt;code&gt;virtualenv&lt;/code&gt; for your package using heavy full-powered image (e.g. &lt;code&gt;ghcr.io/snakepacker/python:all&lt;/code&gt;, that contains all necessary headers, libraries, compiler, etc.), and then copy it into thin &lt;code&gt;base image&lt;/code&gt; with suitable Python version.&lt;/p&gt; &#xA;&lt;h2&gt;Reasons&lt;/h2&gt; &#xA;&lt;p&gt;Why so complex? You could just &lt;code&gt;COPY&lt;/code&gt; directory with your python project into Docker container, and for the first point of view this seems to be reasonable.&lt;/p&gt; &#xA;&lt;p&gt;But just copying directory with python project cause several problems:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Generated on different operating system .pyc files can be put into Docker image accidentally. Thus, python would try to rewrite .pyc with correct ones each time when Docker image would be started. If you would run Docker image in read-only mode - your application would break.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Large possibility that you would also pack garbage files: pytest and tox cache, developer&#39;s virtualenv and other files, that just increate the size of the resulting image.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;No explicit entrypoint. It is not obvious what commands end user is able to run (we hope you&#39;ve implemented &lt;code&gt;-h&lt;/code&gt; or &lt;code&gt;--help&lt;/code&gt; arguments).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;By default, tox interprets your package as python module, e.g. it tries to run &lt;code&gt;pip install .&lt;/code&gt; when preparing environment.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Yes, of course, you can solve all of those problems using hacks, specific settings, .dockeridnore file, and other tricks. But it would be non-intuitive and non-obvious for your users.&lt;/p&gt; &#xA;&lt;p&gt;So, we recommend to spend a little more time and pack your package carefully, so your users would run it with pleasure.&lt;/p&gt; &#xA;&lt;h2&gt;Example&lt;/h2&gt; &#xA;&lt;p&gt;For example, you may build the &lt;code&gt;jupyter notebook&lt;/code&gt;. Just create a Dockerfile with the following content:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Dockerfile&#34;&gt;#################################################################&#xA;####################### BUILD STAGE #############################&#xA;#################################################################&#xA;# This image contains:&#xA;# 1. All the Python versions&#xA;# 2. required python headers&#xA;# 3. C compiler and developer tools&#xA;FROM ghcr.io/snakepacker/python:all as builder&#xA;&#xA;# Create virtualenv on python 3.10&#xA;# Target folder should be the same on the build stage and on the target stage&#xA;RUN python3.10 -m venv /usr/share/python3/app&#xA;&#xA;# Install target package&#xA;RUN /usr/share/python3/app/bin/pip install -U pip &#39;ipython[notebook]&#39;&#xA;&#xA;# Will be find required system libraries and their packages&#xA;RUN find-libdeps /usr/share/python3/app &amp;gt; /usr/share/python3/app/pkgdeps.txt&#xA;&#xA;#################################################################&#xA;####################### TARGET STAGE ############################&#xA;#################################################################&#xA;# Use the image version used on the build stage&#xA;FROM ghcr.io/snakepacker/python:3.10&#xA;&#xA;# Copy virtualenv to the target image&#xA;COPY --from=builder /usr/share/python3/app /usr/share/python3/app&#xA;&#xA;# Install the required library packages&#xA;RUN xargs -ra /usr/share/python3/app/pkgdeps.txt apt-install&#xA;&#xA;# Create a symlink to the target binary (just for convenience)&#xA;RUN ln -snf /usr/share/python3/app/bin/ipython /usr/bin/&#xA;&#xA;CMD [&#34;ipython&#34;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And just build this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker build -t ipython .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Useful tools&lt;/h2&gt; &#xA;&lt;p&gt;All images contain ready to use and simple wrappers for easy image building.&lt;/p&gt; &#xA;&lt;h3&gt;apt-install&lt;/h3&gt; &#xA;&lt;p&gt;Pretty simple bash script. The main purpose is removing the apt cache and temporary files after installation when you want to install something through apt-get install.&lt;/p&gt; &#xA;&lt;p&gt;Otherwise, you have to write something like this&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;apt-get update &amp;amp;&amp;amp; \&#xA;apt-get install -y tcpdump &amp;amp;&amp;amp; \&#xA;rm -fr /var/lib/apt/lists /var/lib/cache/* /var/log/*&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It might be replaced like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;apt-install tcpdump&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;wait-for-port&lt;/h3&gt; &#xA;&lt;p&gt;Python script which waits for availability one or multiple TCP ports. It&#39;s very useful for tests and with docker-compose.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;wait-for-port --period=0.5 --timeout=600 postgres:5432 pgbouncer:6432 &amp;amp;&amp;amp; python myscript.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or shorter (values from previous example are defaults):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;wait-for-port postgres:5432 pgbouncer:6432 &amp;amp;&amp;amp; python myscript.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This script will be trying to make connections to passed endpoints until timeout would be reached or endpoints stay connectable.&lt;/p&gt; &#xA;&lt;h3&gt;find-libdeps&lt;/h3&gt; &#xA;&lt;p&gt;A shell script which find binary &lt;code&gt;*.so&lt;/code&gt; files and resolve required system package for install library dependencies.&lt;/p&gt; &#xA;&lt;p&gt;Save required packages&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;find-libdeps /usr/share/python3/app &amp;gt; /usr/share/python3/app/pkgdeps.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Install saved packages&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;xargs -ra /usr/share/python3/app/pkgdeps.txt apt-install&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>mzazon/php-apache-mysql-containerized</title>
    <updated>2023-09-01T01:29:59Z</updated>
    <id>tag:github.com,2023-09-01:/mzazon/php-apache-mysql-containerized</id>
    <link href="https://github.com/mzazon/php-apache-mysql-containerized" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A brief demo of containerizing php apache and mysql with Docker using some best practices.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Containerize This: PHP/Apache/MySQL&lt;/h1&gt; &#xA;&lt;h3&gt;Intro&lt;/h3&gt; &#xA;&lt;p&gt;Continuing with the Containerize This! series, we&#39;re looking at common web application technologies and how they can be used within Docker containers effectively. PHP/Apache/MySQL have a very large market share on content management systems and web applications on the internet, and with so many developers using these technologies, there is a lot of interest to modernize the way that they use them from from local development all the way to production. Today we&#39;ll take a look at several ways to containerize and link PHP, Apache, and MySQL together while demonstrating some tips, tricks, and best-practices that will help you take a modern approach when developing and deploying your PHP applications!&lt;/p&gt; &#xA;&lt;p&gt;There are 5 simple files for this demo that you can clone from &lt;a href=&#34;https://github.com/mzazon/php-apache-mysql&#34;&gt;https://github.com/mzazon/php-apache-mysql&lt;/a&gt; or simply copy and paste from this post to replicate the following folder structure. Please note that some Docker and security principals have been skipped here for simplicity and demonstration purposes. Namely PHP using root credentials, hardcoded/weak MySQL password, lack of SSL, to name a few! Do not run this code in production! :-)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;/php-apache-mysql/&#xA;├── apache&#xA;│   ├── Dockerfile&#xA;│   └── demo.apache.conf&#xA;├── docker-compose.yml&#xA;├── php&#xA;│   └── Dockerfile&#xA;└── public_html&#xA;    └── index.php&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once this structure is replicated or cloned with these files, and Docker installed locally, you can simply run &#34;docker-compose up&#34; from the root of the project to run this entire demo, and point your browser (or curl) to &lt;a href=&#34;http://localhost:80&#34;&gt;http://localhost:80&lt;/a&gt; to see the demo. We will get into what &#34;docker-compose&#34; is, and what makes up this basic demonstration in the following sections!&lt;/p&gt; &#xA;&lt;p&gt;We&#39;ll use the following simple PHP application to demonstrate everything:&lt;/p&gt; &#xA;&lt;h4&gt;index.php&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;h1&amp;gt;Hello Cloudreach!&amp;lt;/h1&amp;gt;&#xA;&amp;lt;h4&amp;gt;Attempting MySQL connection from php...&amp;lt;/h4&amp;gt;&#xA;&amp;lt;?php&#xA;$host = &#39;mysql&#39;;&#xA;$user = &#39;root&#39;;&#xA;$pass = &#39;rootpassword&#39;;&#xA;$conn = new mysqli($host, $user, $pass);&#xA;&#xA;if ($conn-&amp;gt;connect_error) {&#xA;    die(&#34;Connection failed: &#34; . $conn-&amp;gt;connect_error);&#xA;} else {&#xA;  echo &#34;Connected to MySQL successfully!&#34;;&#xA;}&#xA;?&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This code attempts to connect to a MySQL database using the mysqli interface from PHP. If successful, it prints a success. If not, it prints a failed message.&lt;/p&gt; &#xA;&lt;h3&gt;Docker Compose&lt;/h3&gt; &#xA;&lt;p&gt;This format has been around for a while in Dockerland and is now in version 3.6 at the time of this writing. We&#39;ll use 3.2 here to ensure broad compatibility with those who may not be running the latest and greatest versions of Docker (however, you should always upgrade!)&lt;/p&gt; &#xA;&lt;p&gt;This format allows for defining sets of services which make up an entire application. It allows you to define the dependencies for those services, networks, volumes, etc as code and as you roll into production, you can even specify deployment parameters on services which allow you to replicate, scale, update, and self-heal on Docker Swarm or even Kubernetes on the latest Docker for Mac or Docker Enterprise Edition!&lt;/p&gt; &#xA;&lt;h4&gt;docker-compose.yml&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;version: &#34;3.2&#34;&#xA;services:&#xA;  php:&#xA;    build: &#xA;      context: &#39;./php/&#39;&#xA;      args:&#xA;       PHP_VERSION: ${PHP_VERSION}&#xA;    networks:&#xA;      - backend&#xA;    volumes:&#xA;      - ${PROJECT_ROOT}/:/var/www/html/&#xA;    container_name: php&#xA;  apache:&#xA;    build:&#xA;      context: &#39;./apache/&#39;&#xA;      args:&#xA;       APACHE_VERSION: ${APACHE_VERSION}&#xA;    depends_on:&#xA;      - php&#xA;      - mysql&#xA;    networks:&#xA;      - frontend&#xA;      - backend&#xA;    ports:&#xA;      - &#34;80:80&#34;&#xA;    volumes:&#xA;      - ${PROJECT_ROOT}/:/var/www/html/&#xA;    container_name: apache&#xA;  mysql:&#xA;    image: mysql:${MYSQL_VERSION:-latest}&#xA;    restart: always&#xA;    ports:&#xA;      - &#34;3306:3306&#34;&#xA;    volumes:&#xA;            - data:/var/lib/mysql&#xA;    networks:&#xA;      - backend&#xA;    environment:&#xA;      MYSQL_ROOT_PASSWORD: &#34;${DB_ROOT_PASSWORD}&#34;&#xA;      MYSQL_DATABASE: &#34;${DB_NAME}&#34;&#xA;      MYSQL_USER: &#34;${DB_USERNAME}&#34;&#xA;      MYSQL_PASSWORD: &#34;${DB_PASSWORD}&#34;&#xA;    container_name: mysql&#xA;networks:&#xA;  frontend:&#xA;  backend:&#xA;volumes:&#xA;    data:&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Decouple dependencies, run one process per container (PID 1)&lt;/h3&gt; &#xA;&lt;p&gt;Containers at the core are simply process encapsulation within a shared Linux kernel, to allow for many processes to run inside of their own spaces without interfering or interacting unless we explicitly tell them they can. Thus, it is a long-running best practice to run your primary service within a container as PID 1. This means that no other process should be running inside of your containers. It allows containers to maintain a native linux process lifecycle, respect linux process signals, allow for greater security, and will make your life easier when you schedule these containers on orchestrators such as Docker Swarm or Kubernetes in production.&lt;/p&gt; &#xA;&lt;p&gt;A perfect example is decoupling Apache and PHP by building them out into separate containers. We see our customers often starting to couple Apache and PHP together early on in a Docker journey by building custom images which include both Apache and PHP in the image. This easily works in development scenarios and is a fast way to get off the ground, but as we want to follow a more modern approach of decoupling, we want to break these apart.&lt;/p&gt; &#xA;&lt;p&gt;The following simple Dockerfiles are what we&#39;re using in this example to build a decoupled Apache and PHP envivonment:&lt;/p&gt; &#xA;&lt;h4&gt;apache/Dockerfile&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;FROM httpd:2.4.33-alpine&#xA;&#xA;RUN apk update; \&#xA;    apk upgrade;&#xA;&#xA;# Copy apache vhost file to proxy php requests to php-fpm container&#xA;COPY demo.apache.conf /usr/local/apache2/conf/demo.apache.conf&#xA;RUN echo &#34;Include /usr/local/apache2/conf/demo.apache.conf&#34; \&#xA;    &amp;gt;&amp;gt; /usr/local/apache2/conf/httpd.conf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;php/Dockerfile&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;FROM php:7.2.7-fpm-alpine3.7&#xA;&#xA;RUN apk update; \&#xA;    apk upgrade;&#xA;&#xA;RUN docker-php-ext-install mysqli&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that we run minimal containers wherever possible, in this example we&#39;re using official alpine-based images!&lt;/p&gt; &#xA;&lt;h3&gt;Networking&lt;/h3&gt; &#xA;&lt;p&gt;Now that we have container images for Apache and PHP that are decoupled, how do we get these to interact with eachother? Notice we&#39;re using &#34;PHP FPM&#34; for this. We&#39;re going to have Apache proxy connections which require PHP rendering to port 9000 of our PHP container, and then have the PHP container serve those out as rendered HTML. Sound complicated? Don&#39;t worry! This is very common in modern applications, Apache and NGINX are very good at this proxying, and there is plenty of documentation out there to support this behavior!&lt;/p&gt; &#xA;&lt;p&gt;Notice in the above Docker Compose example, we link the containers together with an overlay networks we define as &#34;frontend&#34; and &#34;backend&#34;. By specifying these networks in our services, we can leverage some really cool Docker features! Namely, we can refer to the containers/services by their service names in code, so we don&#39;t have to worry about messy hard-coding of IP addresses anymore. Phew! Docker handles this for us by managing and updating /etc/hosts files within containers seamlessly to allow for this cross-talk. We can also enforce which containers can talk to eachother. This allows for more secure applications. Notice in this example we have &#34;frontend&#34; and &#34;backend&#34; defined. We can have our php and mysql services live in a network that is more restricted and not exposed to the outside world, and only expose our apache container on the required port. This is great for production environments!&lt;/p&gt; &#xA;&lt;p&gt;One note: We need an apache vhost configuration file that is set up to proxy these requests for PHP files to the PHP container. You&#39;ll notice in the Dockerfile for Apache we have defined above, we add this file and then include it in the base httpd.conf file. This is for the proxying which allows for the decoupling of Apache and PHP. In this example we called it demo.apache.conf and we have the proxying modules defined as well as the VirtualHost. Also notice that we call the php container in the code &#34;php&#34; which, because of the /etc/hosts file integration that Docker handles for us, works flawlessly!&lt;/p&gt; &#xA;&lt;h4&gt;apache/demo.apache.conf&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;ServerName localhost&#xA;&#xA;LoadModule deflate_module /usr/local/apache2/modules/mod_deflate.so&#xA;LoadModule proxy_module /usr/local/apache2/modules/mod_proxy.so&#xA;LoadModule proxy_fcgi_module /usr/local/apache2/modules/mod_proxy_fcgi.so&#xA;&#xA;&amp;lt;VirtualHost *:80&amp;gt;&#xA;    # Proxy .php requests to port 9000 of the php-fpm container&#xA;    ProxyPassMatch ^/(.*\.php(/.*)?)$ fcgi://php:9000/var/www/html/$1&#xA;    DocumentRoot /var/www/html/&#xA;    &amp;lt;Directory /var/www/html/&amp;gt;&#xA;        DirectoryIndex index.php&#xA;        Options Indexes FollowSymLinks&#xA;        AllowOverride All&#xA;        Require all granted&#xA;    &amp;lt;/Directory&amp;gt;&#xA;    &#xA;    # Send apache logs to stdout and stderr&#xA;    CustomLog /proc/self/fd/1 common&#xA;    ErrorLog /proc/self/fd/2&#xA;&amp;lt;/VirtualHost&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Volumes&lt;/h3&gt; &#xA;&lt;p&gt;The last feature that we&#39;ll call out here for demonstration purposes is the use of volumes to serve out our code. Both the PHP and Apache containers have access to a &#34;volume&#34; that we define in the docker-compose.yml file which maps the public_html folder of our repository to the respective services for them to access. When we do this, we map a folder on the host filesystem (outside of the container context) to inside of the running containers. Developers may wish to set their projects up like this because it allows them to edit the file outside of the container, yet have the container serve the updated PHP code out as soon as changes are saved.&lt;/p&gt; &#xA;&lt;p&gt;Volumes are a very powerful construct of the Docker world and we&#39;re only scratching the surface of what one can achieve by using them in development and production. Please see the official documentation on volumes for further use cases and best practices!&lt;/p&gt; &#xA;&lt;h3&gt;Demonstration of docker-compose up!&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ docker-compose up&#xA;&#xA;&amp;lt;... some details omitted ...&amp;gt;&#xA;php_1     | [16-Jul-2018 02:08:11] NOTICE: fpm is running, pid 1&#xA;php_1     | [16-Jul-2018 02:08:11] NOTICE: ready to handle connections&#xA;apache_1  | [Mon Jul 16 02:08:12.494294 2018] [pid 1:tid 140290664872840] AH00489: Apache/2.4.33 (Unix)&#xA;apache_1  | [Mon Jul 16 02:08:12.496833 2018] [pid 1:tid 140290664872840] AH00094: Command line: &#39;httpd -D FOREGROUND&#39;&#xA;mysql_1   | 2018-07-16 02:08:12 1 [Note] mysqld: ready for connections.&#xA;mysql_1   | Version: &#39;5.6.40&#39;  socket: &#39;/var/run/mysqld/mysqld.sock&#39;  port: 3306  MySQL Community Server (GPL)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Notice how these 3 daemons run on PID 1 inside of each container, this is considered a best-practice for building containers!&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$  curl localhost:80&#xA;Hello Cloudreach!&#xA;Attempting MySQL connection from php...&#xA;Connected to MySQL successfully!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Notice now in the logs that the apache container and php containers both respond to the request, as desired:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;php_1     | 172.18.0.4 -  16/Jul/2018:02:09:22 +0000 &#34;GET /index.php&#34; 200&#xA;apache_1  | 172.18.0.1 - - [16/Jul/2018:02:09:22 +0000] &#34;GET / HTTP/1.1&#34; 200 108&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Conclusion&lt;/h3&gt; &#xA;&lt;p&gt;With these basic principals you can link services together to create applications. You could easily include &#34;composer&#34; in the PHP container to build and run your PHP/Laravel application in a similar manner. Perhaps you want to run Drupal or Wordpress and decouple PHP from the Apache instance, that is possible too! You can even use this to seamlessly test PHP version or MySQL version upgrades with minimal code change. There are a lot of benefits to modernizing your application with Docker using docker-compose and some of the latest images and features.&lt;/p&gt;</summary>
  </entry>
</feed>