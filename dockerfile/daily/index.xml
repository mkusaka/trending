<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dockerfile Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-03-23T01:24:09Z</updated>
  <subtitle>Daily Trending of Dockerfile in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ed1rac/unipe-estruturas-dados</title>
    <updated>2024-03-23T01:24:09Z</updated>
    <id>tag:github.com,2024-03-23:/ed1rac/unipe-estruturas-dados</id>
    <link href="https://github.com/ed1rac/unipe-estruturas-dados" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Este reposit√≥rio Codespaces fornece um ambiente de desenvolvimento pr√©-configurado para aulas de Estruturas de Dados. Ele inclui todos os softwares e ferramentas necess√°rios para voc√™ come√ßar a programar, sem a necessidade de instalar nada em seu computador.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Unip√™ Estruturas de dados&lt;/h1&gt; &#xA;&lt;p&gt;Este reposit√≥rio Codespaces fornece um ambiente de desenvolvimento pr√©-configurado para aulas de Estruturas de Dados da Unip√™. Ele inclui todos os softwares e ferramentas necess√°rios para voc√™ come√ßar a programar, sem a necessidade de instalar nada em seu computador.&lt;/p&gt; &#xA;&lt;h2&gt;Linguagens dispon√≠veis&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;C/C++&lt;/li&gt; &#xA; &lt;li&gt;HTML/CSS/Javascript (b√°sico)&lt;/li&gt; &#xA; &lt;li&gt;Node.js&lt;/li&gt; &#xA; &lt;li&gt;Python&lt;/li&gt; &#xA; &lt;li&gt;Lua&lt;/li&gt; &#xA; &lt;li&gt;Ruby&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Features dispon√≠veis&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Pandoc&lt;/li&gt; &#xA; &lt;li&gt;Gdb&lt;/li&gt; &#xA; &lt;li&gt;Doxygen&lt;/li&gt; &#xA; &lt;li&gt;Graphviz&lt;/li&gt; &#xA; &lt;li&gt;Jq&lt;/li&gt; &#xA; &lt;li&gt;Openbox&lt;/li&gt; &#xA; &lt;li&gt;pip&lt;/li&gt; &#xA; &lt;li&gt;entre outros recursos ...&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Programa√ß√£o&lt;/h2&gt; &#xA;&lt;p&gt;Template para as disciplinas de Programa√ß√£o do&amp;nbsp;&lt;a href=&#34;https://edkallenn.github.io/&#34;&gt;Professor Ed&lt;/a&gt; &amp;nbsp;do Centro Universit√°rio Unip√™ de Jo√£o Pessoa - Para√≠ba.&lt;/p&gt; &#xA;&lt;h2&gt;Instru√ß√µes do Terminal&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Comandos do terminal&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Comando&lt;/th&gt; &#xA;   &lt;th&gt;Descri√ß√£o&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;ls&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Lista os arquivos e diret√≥rios&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;cd &amp;lt;diret√≥rio&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Muda o diret√≥rio atual&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;cd ..&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Volta um diret√≥rio&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;mkdir &amp;lt;diret√≥rio&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Cria um diret√≥rio&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;code &amp;lt;arquivo&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Abre o arquivo no VS Code&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;rm &amp;lt;arquivo&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Remove o arquivo&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;clear&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Limpa a tela&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Para compilar e executar um arquivo em C no terminal, use os seguintes comandos:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make &amp;lt;nome_do_arquivo&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;ou&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;gcc &amp;lt;nome_do_arquivo&amp;gt;.c -o &amp;lt;nome_do_arquivo&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Para executar o aequivo, no terminal fa√ßa:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./&amp;lt;nome_do_arquivo&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;Obs&lt;/em&gt;: se a biblioteca&amp;nbsp;&lt;code&gt;math.h&lt;/code&gt;&amp;nbsp;for usada, adicione o par√¢metro&amp;nbsp;&lt;code&gt;-lm&lt;/code&gt;&amp;nbsp;no final do comando &lt;code&gt;gcc&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Teclas de atalho&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;A√ß√£o&lt;/th&gt; &#xA;   &lt;th&gt;Tecla&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Compilar e executar&lt;/td&gt; &#xA;   &lt;td&gt;F6&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Compilar sem executar&lt;/td&gt; &#xA;   &lt;td&gt;Ctrl-Shift-B&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Depurar&lt;/td&gt; &#xA;   &lt;td&gt;F5&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Indentar automaticamente&lt;/td&gt; &#xA;   &lt;td&gt;Ctrl-Shift-I&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt;</summary>
  </entry>
  <entry>
    <title>YanWenKun/ComfyUI-Docker</title>
    <updated>2024-03-23T01:24:09Z</updated>
    <id>tag:github.com,2024-03-23:/YanWenKun/ComfyUI-Docker</id>
    <link href="https://github.com/YanWenKun/ComfyUI-Docker" rel="alternate"></link>
    <summary type="html">&lt;p&gt;üê≥Dockerfile for üé®ComfyUI. | ÂÆπÂô®ÈïúÂÉè‰∏éÂêØÂä®ËÑöÊú¨&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Docker image for ComfyUI&lt;/h1&gt; &#xA;&lt;div id=&#34;preamble&#34;&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;&lt;span class=&#34;image&#34;&gt;&lt;img src=&#34;https://github.com/YanWenKun/ComfyUI-Docker/actions/workflows/build-latest.yml/badge.svg?sanitize=true&#34; alt=&#34;GitHub Workflow Status&#34;&gt;&lt;/span&gt; &lt;span class=&#34;image&#34;&gt;&lt;img src=&#34;https://github.com/YanWenKun/ComfyUI-Docker/actions/workflows/build-rocm.yml/badge.svg?sanitize=true&#34; alt=&#34;GitHub Workflow Status&#34;&gt;&lt;/span&gt;&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;imageblock&#34;&gt; &#xA;   &lt;div class=&#34;content&#34;&gt; &#xA;    &lt;img src=&#34;https://raw.githubusercontent.com/YanWenKun/ComfyUI-Docker/main/docs/chart-concept.svg?sanitize=true&#34; alt=&#34;Concept Design&#34;&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/YanWenKun/ComfyUI-Docker/main/README.zh.adoc&#34;&gt;&amp;gt;&amp;gt; ‰∏≠ÊñáÊñáÊ°£ &amp;lt;&amp;lt;&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;This repo is for &lt;a href=&#34;https://hub.docker.com/r/yanwk/comfyui-boot&#34;&gt;Docker images&lt;/a&gt; that runs &lt;a href=&#34;https://github.com/comfyanonymous/ComfyUI&#34;&gt;ComfyUI&lt;/a&gt; - a Stable Diffusion GUI powering node-based workflow.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;_how_it_works&#34;&gt;How it works&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;olist arabic&#34;&gt; &#xA;   &lt;ol class=&#34;arabic&#34;&gt; &#xA;    &lt;li&gt; &lt;p&gt;At first start, a script will download latest ComfyUI, some custom nodes and models.&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;The whole ComfyUI will be stored in a local folder (&lt;code&gt;./storage/ComfyUI&lt;/code&gt;).&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;If you already have a ComfyUI bundle, put it there and make an empty file (&lt;code&gt;./storage/.download-complete&lt;/code&gt;) so the start script will skip downloading.&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;You can update ComfyUI &amp;amp; its custom nodes via ComfyUI-Manager (in ComfyUI web page).&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;/ol&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;_prerequisites&#34;&gt;Prerequisites&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;ulist&#34;&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt; &lt;p&gt;NVIDIA GPU with ‚â•6GB VRAM&lt;/p&gt; &#xA;     &lt;div class=&#34;ulist&#34;&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt; &lt;p&gt;For 4GB see &lt;a href=&#34;https://raw.githubusercontent.com/YanWenKun/ComfyUI-Docker/main/#q-n-a&#34;&gt;Q &amp;amp; A&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;       &lt;li&gt; &lt;p&gt;For AMD GPU see &lt;a href=&#34;https://raw.githubusercontent.com/YanWenKun/ComfyUI-Docker/main/#rocm&#34;&gt;ROCm&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;/ul&gt; &#xA;     &lt;/div&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;Latest NVIDIA GPU driver&lt;/p&gt; &#xA;     &lt;div class=&#34;ulist&#34;&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt; &lt;p&gt;Either Game or Studio edition will work.&lt;/p&gt; &lt;/li&gt; &#xA;       &lt;li&gt; &lt;p&gt;You don‚Äôt need to install drivers inside containers. Just make sure it‚Äôs working on your host OS.&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;/ul&gt; &#xA;     &lt;/div&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;Docker Installed&lt;/p&gt; &#xA;     &lt;div class=&#34;ulist&#34;&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt; &lt;p&gt;Linux user may need to install &lt;a href=&#34;https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/latest/install-guide.html&#34;&gt;NVIDIA Container Toolkit&lt;/a&gt; (only on host OS). It will enable containers&#39; GPU access.&lt;/p&gt; &lt;/li&gt; &#xA;       &lt;li&gt; &lt;p&gt;Windows user could use &lt;a href=&#34;https://www.docker.com/products/docker-desktop/&#34;&gt;Docker Desktop&lt;/a&gt; with WSL2 enabled.&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;/ul&gt; &#xA;     &lt;/div&gt; &lt;/li&gt; &#xA;   &lt;/ul&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;_usage_nvidia_gpu&#34;&gt;Usage - NVIDIA GPU&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;listingblock&#34;&gt; &#xA;   &lt;div class=&#34;title&#34;&gt;&#xA;    A. Using &#xA;    &lt;code&gt;docker compose&lt;/code&gt;&#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;content&#34;&gt; &#xA;    &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;git clone https://github.com/YanWenKun/ComfyUI-Docker.git&#xA;&#xA;cd ComfyUI-Docker&#xA;&#xA;docker compose up --detach&#xA;&#xA;# Update image (only when Python components are outdated)&#xA;git pull&#xA;docker compose pull&#xA;docker compose up --detach --remove-orphans&#xA;docker image prune&lt;/code&gt;&lt;/pre&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;listingblock&#34;&gt; &#xA;   &lt;div class=&#34;title&#34;&gt;&#xA;    B. Using &#xA;    &lt;code&gt;docker run&lt;/code&gt;&#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;content&#34;&gt; &#xA;    &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;mkdir -p storage&#xA;&#xA;docker run -it   --name comfyui   --gpus all   -p 8188:8188   -v &#34;$(pwd)&#34;/storage:/home/runner   --env CLI_ARGS=&#34;&#34;   yanwk/comfyui-boot:latest&#xA;&#xA;# Update image (only when Python components are outdated)&#xA;docker rm comfyui&#xA;docker pull yanwk/comfyui-boot:latest&#xA;# Then re-run &#39;docker run&#39; above again&lt;/code&gt;&lt;/pre&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;Once the app is loaded, visit &lt;a href=&#34;http://localhost:8188/&#34; class=&#34;bare&#34;&gt;http://localhost:8188/&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;rocm&#34;&gt;Usage - AMD GPU (Experimental)&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;admonitionblock note&#34;&gt; &#xA;   &lt;table&gt; &#xA;    &lt;tbody&gt;&#xA;     &lt;tr&gt; &#xA;      &lt;td class=&#34;icon&#34;&gt; &#xA;       &lt;div class=&#34;title&#34;&gt;&#xA;        Note&#xA;       &lt;/div&gt; &lt;/td&gt; &#xA;      &lt;td class=&#34;content&#34;&gt; If you are using WSL2 with AMD/Intel GPU, consider &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/YanWenKun/ComfyUI-Docker/main/docs/wsl-directml.adoc&#34;&gt;Run ComfyUI on WSL2 with DirectML&lt;/a&gt;&lt;/strong&gt; &lt;/td&gt; &#xA;     &lt;/tr&gt; &#xA;    &lt;/tbody&gt;&#xA;   &lt;/table&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;listingblock&#34;&gt; &#xA;   &lt;div class=&#34;title&#34;&gt;&#xA;    C. Using &#xA;    &lt;code&gt;docker compose&lt;/code&gt;&#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;content&#34;&gt; &#xA;    &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;git clone https://github.com/YanWenKun/ComfyUI-Docker.git&#xA;&#xA;cd ComfyUI-Docker&#xA;&#xA;docker compose -f docker-compose-rocm.yml up --detach&#xA;&#xA;# Update image (only when Python components are outdated)&#xA;git pull&#xA;docker compose -f docker-compose-rocm.yml pull&#xA;docker compose -f docker-compose-rocm.yml up --detach --remove-orphans&#xA;docker image prune&lt;/code&gt;&lt;/pre&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;listingblock&#34;&gt; &#xA;   &lt;div class=&#34;title&#34;&gt;&#xA;    D. Using &#xA;    &lt;code&gt;docker run&lt;/code&gt;&#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;content&#34;&gt; &#xA;    &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;mkdir -p storage&#xA;&#xA;docker run -it   --name comfyui   -p 8188:8188   -v &#34;$(pwd)&#34;/storage:/home/runner   --env CLI_ARGS=&#34;--use-pytorch-cross-attention&#34;   --device=/dev/kfd --device=/dev/dri   --group-add=video --ipc=host --cap-add=SYS_PTRACE   --security-opt seccomp=unconfined   yanwk/comfyui-boot:rocm&#xA;&#xA;# Update image (only when Python components are outdated)&#xA;docker rm comfyui&#xA;docker pull yanwk/comfyui-boot:rocm&#xA;# Then re-run &#39;docker run&#39; above again&lt;/code&gt;&lt;/pre&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;Once the app is loaded, visit &lt;a href=&#34;http://localhost:8188/&#34; class=&#34;bare&#34;&gt;http://localhost:8188/&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;q-n-a&#34;&gt;Q &amp;amp; A&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;Q: My GPU has only 4GB VRAM&lt;br&gt; A: Add &lt;code&gt;--lowvram&lt;/code&gt; to &lt;code&gt;CLI_ARGS&lt;/code&gt;.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;Q: Adding &lt;code&gt;--lowvram&lt;/code&gt; still out-of-memory&lt;br&gt; A: Use &lt;code&gt;--novram&lt;/code&gt; instead. It will use CPU RAM.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;Q: How to run on CPU?&lt;br&gt; A: Add &lt;code&gt;--cpu&lt;/code&gt; to &lt;code&gt;CLI_ARGS&lt;/code&gt;. It‚Äôs pretty slow.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;Q: I don‚Äôt want to use xFormers, how to use PyTorch‚Äôs Cross Attention?&lt;br&gt; A: Add &lt;code&gt;--use-pytorch-cross-attention&lt;/code&gt; to &lt;code&gt;CLI_ARGS&lt;/code&gt;. It may perform well on WSL2, but significantly slower on Linux hosts.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;More &lt;code&gt;CLI_ARGS&lt;/code&gt; available at &lt;a href=&#34;https://github.com/comfyanonymous/ComfyUI/raw/master/comfy/cli_args.py&#34;&gt;ComfyUI&lt;/a&gt;.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;_some_commands_for_debugging&#34;&gt;Some commands for debugging&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;listingblock&#34;&gt; &#xA;   &lt;div class=&#34;title&#34;&gt;&#xA;    Build the image, print all logs to STDOUT&#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;content&#34;&gt; &#xA;    &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;docker build . --progress=plain -f Dockerfile -t yanwk/comfyui-boot:latest&lt;/code&gt;&lt;/pre&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;listingblock&#34;&gt; &#xA;   &lt;div class=&#34;title&#34;&gt;&#xA;    Run a one-time container&#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;content&#34;&gt; &#xA;    &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;docker run -it --rm   --gpus all -p 8188:8188   --volume &#34;$(pwd)&#34;/storage:/home/runner   --env CLI_ARGS=&#34;&#34;   yanwk/comfyui-boot:latest&lt;/code&gt;&lt;/pre&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;listingblock&#34;&gt; &#xA;   &lt;div class=&#34;title&#34;&gt;&#xA;    Run into a root bash&#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;content&#34;&gt; &#xA;    &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;docker run -it --rm   --gpus all -p 8188:8188   --volume &#34;$(pwd)&#34;/storage:/home/runner   --env CLI_ARGS=&#34;&#34;   --user root   yanwk/comfyui-boot:latest /bin/bash&lt;/code&gt;&lt;/pre&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;_run_with_podman&#34;&gt;Run with Podman&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;Podman is root-less by default. And &lt;a href=&#34;https://www.tutorialworks.com/podman-rootless-volumes/&#34;&gt;it‚Äôs tricky&lt;/a&gt; to bind-mount volume as non-root user inside rootless container. &lt;a href=&#34;https://docs.podman.io/en/latest/markdown/podman-run.1.html#mount-type-type-type-specific-option&#34;&gt;Options&lt;/a&gt; provided by Podman will chown files on host space, which probably is undesirable.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;I recommend two different ways to workaround:&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;sect3&#34;&gt; &#xA;    &lt;h4 id=&#34;_1_go_root_ful_just_like_docker&#34;&gt;1. Go &#34;root-ful&#34; just like Docker&lt;/h4&gt; &#xA;    &lt;details&gt; &#xA;     &lt;summary class=&#34;title&#34;&gt;Expand details&lt;/summary&gt; &#xA;     &lt;div class=&#34;content&#34;&gt; &#xA;      &lt;div class=&#34;paragraph&#34;&gt; &#xA;       &lt;p&gt;The straightforward way. By adding &lt;code&gt;sudo&lt;/code&gt; you go from rootless to rootful. And everything else would be the same as using Docker.&lt;br&gt; Note that Podman will download images to root, not the user.&lt;/p&gt; &#xA;      &lt;/div&gt; &#xA;      &lt;div class=&#34;listingblock&#34;&gt; &#xA;       &lt;div class=&#34;content&#34;&gt; &#xA;        &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;mkdir -p storage&#xA;&#xA;sudo podman run -it --rm   --name comfyui-rootful   --device nvidia.com/gpu=all   --security-opt label=disable   -p 8188:8188   -v &#34;$(pwd)&#34;/storage:/home/runner   -e CLI_ARGS=&#34;&#34;   docker.io/yanwk/comfyui-boot&lt;/code&gt;&lt;/pre&gt; &#xA;       &lt;/div&gt; &#xA;      &lt;/div&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/details&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;sect3&#34;&gt; &#xA;    &lt;h4 id=&#34;_2_run_as_root_inside_container&#34;&gt;2. Run as root inside container&lt;/h4&gt; &#xA;    &lt;details&gt; &#xA;     &lt;summary class=&#34;title&#34;&gt;Expand details&lt;/summary&gt; &#xA;     &lt;div class=&#34;content&#34;&gt; &#xA;      &lt;div class=&#34;paragraph&#34;&gt; &#xA;       &lt;p&gt;The rootless way, no sudo needed. Inside the pod, Podman will mount volume as root, scripts will run as root. And from the host side, we see files keep their original ownership.&lt;/p&gt; &#xA;      &lt;/div&gt; &#xA;      &lt;div class=&#34;listingblock&#34;&gt; &#xA;       &lt;div class=&#34;content&#34;&gt; &#xA;        &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;mkdir -p storage&#xA;&#xA;podman run -it --rm   --name comfyui-rootless   --device nvidia.com/gpu=all   --security-opt label=disable   -p 8188:8188   -v &#34;$(pwd)&#34;/storage:/root   --user root   --workdir /root   -e CLI_ARGS=&#34;&#34;   docker.io/yanwk/comfyui-boot:latest   /bin/bash /home/scripts/root-wrapper.sh&lt;/code&gt;&lt;/pre&gt; &#xA;       &lt;/div&gt; &#xA;      &lt;/div&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/details&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;_some_custom_nodes&#34;&gt;Some custom nodes&lt;/h3&gt; &#xA;   &lt;details&gt; &#xA;    &lt;summary class=&#34;title&#34;&gt;Install a bunch of custom nodes that may save you some time&lt;/summary&gt; &#xA;    &lt;div class=&#34;content&#34;&gt; &#xA;     &lt;div class=&#34;paragraph&#34;&gt; &#xA;      &lt;p&gt;Note that most dependencies are bundled in the image, you don‚Äôt need to manually install them.&lt;br&gt; (Except &lt;a href=&#34;https://pypi.org/project/imageio-ffmpeg/&#34;&gt;imageio-ffmpeg&lt;/a&gt; which uses FFmpeg4. The image came with FFmpeg6 or newer.)&lt;/p&gt; &#xA;     &lt;/div&gt; &#xA;     &lt;div class=&#34;listingblock&#34;&gt; &#xA;      &lt;div class=&#34;content&#34;&gt; &#xA;       &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;cd ComfyUI/custom_nodes/&#xA;&#xA;gcs=&#39;git clone --depth=1 --no-tags --recurse-submodules --shallow-submodules&#39;&#xA;&#xA;$gcs https://github.com/bash-j/mikey_nodes.git&#xA;$gcs https://github.com/chrisgoringe/cg-use-everywhere.git&#xA;$gcs https://github.com/crystian/ComfyUI-Crystools.git&#xA;$gcs https://github.com/cubiq/ComfyUI_essentials.git&#xA;$gcs https://github.com/cubiq/ComfyUI_IPAdapter_plus.git&#xA;$gcs https://github.com/Fannovel16/comfyui_controlnet_aux.git&#xA;$gcs https://github.com/Fannovel16/ComfyUI-Frame-Interpolation.git&#xA;$gcs https://github.com/FizzleDorf/ComfyUI_FizzNodes.git&#xA;$gcs https://github.com/jags111/efficiency-nodes-comfyui.git&#xA;$gcs https://github.com/Kosinkadink/ComfyUI-Advanced-ControlNet.git&#xA;$gcs https://github.com/Kosinkadink/ComfyUI-AnimateDiff-Evolved.git&#xA;$gcs https://github.com/Kosinkadink/ComfyUI-VideoHelperSuite.git&#xA;$gcs https://github.com/ltdrdata/ComfyUI-Impact-Pack.git&#xA;$gcs https://github.com/ltdrdata/ComfyUI-Inspire-Pack.git&#xA;$gcs https://github.com/pythongosssss/ComfyUI-Custom-Scripts.git&#xA;$gcs https://github.com/pythongosssss/ComfyUI-WD14-Tagger.git&#xA;$gcs https://github.com/rgthree/rgthree-comfy.git&#xA;$gcs https://github.com/shiimizu/ComfyUI_smZNodes.git&#xA;$gcs https://github.com/SLAPaper/ComfyUI-Image-Selector.git&#xA;$gcs https://github.com/twri/sdxl_prompt_styler.git&#xA;$gcs https://github.com/ZHO-ZHO-ZHO/ComfyUI-InstantID.git&lt;/code&gt;&lt;/pre&gt; &#xA;      &lt;/div&gt; &#xA;     &lt;/div&gt; &#xA;     &lt;div class=&#34;paragraph&#34;&gt; &#xA;      &lt;p&gt;Another note is this image doesn‚Äôt bundled deps for &lt;a href=&#34;https://github.com/WASasquatch/was-node-suite-comfyui&#34;&gt;WAS Node Suite&lt;/a&gt;, because it has some deps version &lt;a href=&#34;https://github.com/WASasquatch/was-node-suite-comfyui/raw/main/requirements.txt&#34;&gt;fixed&lt;/a&gt;, and is not under active development.&lt;br&gt; However, the image‚Äôs script only install one custom node (ComfyUI-Manager). You can safely install WAS NS via ComfyUI-Manager in a new deployment. If anything conflicts, just delete unwanted custom nodes and &lt;code&gt;.local&lt;/code&gt; (or &lt;code&gt;local&lt;/code&gt;) folder, and update/try-fix/reinstall custom nodes in ComfyUI-Manager.&lt;/p&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/details&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;_pre_start_script&#34;&gt;Pre-start script&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;You can create your own pre-start script at&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;listingblock&#34;&gt; &#xA;    &lt;div class=&#34;content&#34;&gt; &#xA;     &lt;pre&gt;./storage/scripts/pre-start.sh&lt;/pre&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;It will run before ComfyUI starts, handy for debugging.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;_license&#34;&gt;License&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/YanWenKun/ComfyUI-Docker/main/LICENSE&#34;&gt;Mulan Public LicenseÔºåVersion 2&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;This open source license is written and valid both in Chinese and English, how good is that!&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt;</summary>
  </entry>
  <entry>
    <title>VideoCurio/ProtonMailBridgeDocker</title>
    <updated>2024-03-23T01:24:09Z</updated>
    <id>tag:github.com,2024-03-23:/VideoCurio/ProtonMailBridgeDocker</id>
    <link href="https://github.com/VideoCurio/ProtonMailBridgeDocker" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A docker version of the Proton mail bridge command line interface. It creates a local SMTP server, so other docker containers can send emails via your proton mail account.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Proton Mail Bridge docker&lt;/h1&gt; &#xA;&lt;p&gt;A docker version of the &lt;a href=&#34;https://proton.me/mail/bridge&#34;&gt;Proton mail Bridge&lt;/a&gt; command line interface. It creates a local SMTP server, so other docker containers can send emails via your Proton email account.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;!WARNING!&lt;/strong&gt; As of the time of this writing, you need a paid plan (Mail Plus, Proton Unlimited or Proton for Business) to be able to log in. It won&#39;t work for free account.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/VideoCurio/ProtonMailBridgeDocker/master/logo.png&#34; alt=&#34;Logo Proton Mail Bridge docker&#34; title=&#34;Merci √† Korben pour le logo!&#34;&gt; &lt;em&gt;(Merci &lt;a href=&#34;https://korben.info/&#34;&gt;Korben&lt;/a&gt; pour le logo)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;p&gt;Download the latest docker image from:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker pull ghcr.io/videocurio/proton-mail-bridge:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;(Alternative)&lt;/strong&gt; Or the lightweight version based on Alpine Linux:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker pull ghcr.io/videocurio/proton-mail-bridge-alpine:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;(Optional)&lt;/strong&gt; It is recommended to set up a custom docker network for all of your containers to use, for DNS / network-alias resolution:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo docker network create --subnet 172.20.0.0/16 network20&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Launch it with the following command to expose TCP ports 12025 for SMTP and 12143 for IMAP on your local network interface. &lt;strong&gt;&lt;em&gt;You SHOULD provide a path volume storage&lt;/em&gt;&lt;/strong&gt; (&lt;code&gt;mkdir /path/to/your/volume/storage&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run -d --name=protonmail_bridge -v /path/to/your/volume/storage:/root -p 127.0.0.1:12025:25/tcp -p 127.0.0.1:12143:143/tcp --network network20 --restart=unless-stopped ghcr.io/videocurio/proton-mail-bridge:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;(Optional)&lt;/strong&gt; Make sure the container is running:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker ps&#xA;CONTAINER ID   IMAGE                                          COMMAND                  CREATED              STATUS              PORTS                                                  NAMES&#xA;d9932fb7136b   ghcr.io/videocurio/proton-mail-bridge:latest   &#34;/app/entrypoint.sh&#34;     About a minute ago   Up About a minute   127.0.0.1:12025-&amp;gt;1025/tcp, 127.0.0.1:12143-&amp;gt;1143/tcp   protonmail_bridge&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;p&gt;Now, you need to open a bash terminal on the current running container and use the Proton Bridge interactive command line:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker exec -it protonmail_bridge /bin/bash&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;# First we need to kill the default bridge startup instance (only one instance of bridge can run at the same time)&#xA;root@8972584f86d4:/app# pkill bridge&#xA;# Login to your Proton account:&#xA;root@8972584f86d4:/app# /app/bridge --cli&#xA;....&#xA;      Welcome to Proton Mail Bridge interactive shell&#xA;....&#xA;&amp;gt;&amp;gt;&amp;gt; info&#xA;No active accounts. Please add account to continue.&#xA;&#xA;# Type help for a list of all commands:&#xA;&amp;gt;&amp;gt;&amp;gt; help&#xA;# Login to a Proton account (!MUST! be a paid plan to use this client), follow the instructions on screen:&#xA;# Tip: Use Ctrl+Shift+V to paste on most Linux terminal.&#xA;&amp;gt;&amp;gt;&amp;gt; login&#xA;Username: test_account@proton.me&#xA;Password: &#xA;Authenticating ...&#xA;Two factor code: 123456&#xA;Account test_account was added successfully.&#xA;&amp;gt;&amp;gt;&amp;gt; A sync has begun for test_account.&#xA;Sync (test_account): 1.0% (Elapsed: 0.5s, ETA: 46.0s)&#xA;...&#xA;Sync (test_account): 99.9% (Elapsed: 50.4s, ETA: 0.4s)&#xA;A sync has finished for test_account.&#xA;&amp;gt;&amp;gt;&amp;gt;&#xA;# Success !&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;IF&lt;/strong&gt; you are using multiple domain names or email addresses, you &lt;strong&gt;SHOULD&lt;/strong&gt; switch to split address mode (it will set credentials for each address in the account).&lt;/p&gt; &#xA;&lt;p&gt;It will sync the account again, time to grab a coffee.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; change mode 0&#xA;Are you sure you want to change the mode for account test_account to split? yes/no: yes&#xA;Address mode for account test_account changed to split&#xA;&amp;gt;&amp;gt;&amp;gt; A sync has begun for test_account.&#xA;Sync (test_account): 1.0% (Elapsed: 0.3s, ETA: 32.6s)&#xA;...&#xA;Sync (test_account): 99.9% (Elapsed: 50.4s, ETA: 0.4s)&#xA;A sync has finished for test_account.&#xA;&amp;gt;&amp;gt;&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use the following information to connect via an SMTP client. The port numbers for the SMTP/IMAP connections are 12025 and 12143 (see your previous Docker container launch command), not the one provided by the &lt;code&gt;info&lt;/code&gt;command.&lt;/p&gt; &#xA;&lt;p&gt;You &lt;strong&gt;&lt;em&gt;MUST copy the username AND password&lt;/em&gt;&lt;/strong&gt; from the info command (the password is random and different from your Proton account):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; info&#xA;Configuration for test_account@proton.me&#xA;IMAP Settings&#xA;Address:   127.0.0.1&#xA;IMAP port: 1143&#xA;Username:  test_account@proton.me&#xA;Password:  abcedfGHI12345&#xA;Security:  STARTTLS&#xA;&#xA;SMTP Settings&#xA;Address:   127.0.0.1&#xA;SMTP port: 1025&#xA;Username:  test_account@proton.me&#xA;Password:  abcedfGHI12345&#xA;Security:  STARTTLS&#xA;&#xA;Configuration for another_account@proton.me&#xA;....&#xA;&#xA;# Exit&#xA;&amp;gt;&amp;gt;&amp;gt; exit&#xA;root@8972584f86d4:/app# exit&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See a list of &lt;a href=&#34;https://proton.me/support/bridge-cli-guide&#34;&gt;all Proton bridge commands available here&lt;/a&gt; or use the &lt;code&gt;help&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;p&gt;We have killed the default bridge instance by exiting it during the previous step, so we &lt;strong&gt;MUST&lt;/strong&gt; restart the container:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker container restart protonmail_bridge&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;(Optional)&lt;/strong&gt; You can check the bridge command line output with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker container logs protonmail_bridge&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It should end with &lt;code&gt;A sync has finished for test_account&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Notes&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Your email client might complain about the self-signed certificate used by Proton mail bridge server.&lt;/li&gt; &#xA; &lt;li&gt;If you want other docker containers to only be able to send emails, you should only expose SMTP port 25.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;TrueNAS Scale&lt;/h3&gt; &#xA;&lt;p&gt;The docker image was tested on the latest stable version of &lt;a href=&#34;https://www.truenas.com/truenas-scale/&#34;&gt;TrueNAS Scale&lt;/a&gt; (at the time of writing), follow the &lt;a href=&#34;https://www.truenas.com/docs/scale/scaleuireference/apps/installcustomappscreens/&#34;&gt;installation custom app screen&lt;/a&gt; documentation.&lt;/p&gt; &#xA;&lt;p&gt;The recommended parameters are:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;Container images&lt;/strong&gt; - Image repository: &lt;code&gt;ghcr.io/videocurio/proton-mail-bridge&lt;/code&gt; / Image tag: &lt;code&gt;latest&lt;/code&gt; / Image pull policy: &lt;code&gt;Always pull...&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Container Entrypoint&lt;/strong&gt; - Command: &lt;code&gt;/app/entrypoint.sh&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Container Environment Variables&lt;/strong&gt; - Add &amp;gt; Environment Variable Name: &lt;code&gt;PROTON_BRIDGE_SMTP_PORT&lt;/code&gt; / Environment Variable Value: &lt;code&gt;1026&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Port Forwarding&lt;/strong&gt; - Add &amp;gt; Container Port: &lt;code&gt;25&lt;/code&gt; / Node Port: &lt;code&gt;12025&lt;/code&gt; (Or any other non-used port) / Protocol: &lt;code&gt;TCP&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Storage&lt;/strong&gt; - Volumes &amp;gt; Mount Path: &lt;code&gt;/root&lt;/code&gt; / Dataset name: &lt;code&gt;protonmail&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Resource limits&lt;/strong&gt; - &lt;code&gt;Check&lt;/code&gt; Enable resource limits, configure the limits to your liking.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;About point 3 of the recommended parameters, on Kubernetes (used by TrueNAS Scale for Applications) the Proton Mail Bridge applications seems to listening on localhost TCP port 1026 instead of port 1025. In order to confirm this setting, launch a console on your running Proton Mail bridge pod and see the results of a &lt;code&gt;netstat -ltpn&lt;/code&gt; command, you are looking for a &lt;code&gt;bridge&lt;/code&gt; program name on &lt;code&gt;127.0.0.1:1026&lt;/code&gt;address.&lt;/p&gt; &#xA;&lt;p&gt;If everything is set correctly, on a TrueNAS Scale console the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo k3s kubectl get service --all-namespaces&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;should report the Proton bridge mail as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;ix-protonmail-bridge    protonmail-bridge-ix-chart      NodePort    172.17.22.33    &amp;lt;none&amp;gt;  25:12025/TCP        1h&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The SMTP server is now available from TCP port 12025 on your server&#39;s LAN IP address.&lt;/p&gt; &#xA;&lt;h2&gt;Developers notes&lt;/h2&gt; &#xA;&lt;p&gt;Build / test docker image, see: &lt;a href=&#34;https://docs.docker.com/language/python/containerize/&#34;&gt;Docker documentation&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Local tests:&#xA;git clone https://github.com/VideoCurio/ProtonMailBridgeDocker.git&#xA;cd /path/to/ProtonMailBridgeDocker/&#xA;docker build --tag=ghcr.io/videocurio/proton-mail-bridge .&#xA;docker images | grep videocurio&#xA;&#xA;docker run -it --rm --entrypoint /bin/bash ghcr.io/videocurio/proton-mail-bridge:latest&#xA;&#xA;docker image tag ghcr.io/videocurio/proton-mail-bridge:latest ghcr.io/videocurio/proton-mail-bridge:3.9.1a&#xA;docker push ghcr.io/videocurio/proton-mail-bridge:3.9.1a&#xA;docker push ghcr.io/videocurio/proton-mail-bridge:latest&#xA;&#xA;### TrueNAS&#xA;ping -c 4 protonmail-bridge-ix-chart.ix-protonmail-bridge.svc.cluster.local&#xA;nslookup protonmail-bridge-ix-chart.ix-protonmail-bridge.svc.cluster.local 172.17.0.10&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There is a &lt;a href=&#34;https://github.com/VideoCurio/ProtonMailBridgeDocker/tree/testing&#34;&gt;testing branch&lt;/a&gt; available if you want to submit a patch.&lt;/p&gt; &#xA;&lt;p&gt;An &lt;a href=&#34;https://www.alpinelinux.org/&#34;&gt;Alpine Linux&lt;/a&gt; version for a small image base footprint is available in the &lt;a href=&#34;https://github.com/VideoCurio/ProtonMailBridgeDocker/tree/master/Alpine&#34;&gt;Alpine directory&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Copyright (C) 2024 David BASTIEN&lt;/p&gt; &#xA;&lt;p&gt;This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.&lt;/p&gt; &#xA;&lt;p&gt;This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.&lt;/p&gt; &#xA;&lt;p&gt;You should have received a copy of the GNU General Public License along with this program. If not, see &lt;a href=&#34;https://www.gnu.org/licenses/&#34;&gt;https://www.gnu.org/licenses/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Sources:&lt;/h2&gt; &#xA;&lt;p&gt;Made from &lt;a href=&#34;https://hub.docker.com/_/golang/&#34;&gt;Debian 12 (bookworm) Go image&lt;/a&gt; and &lt;a href=&#34;https://github.com/ProtonMail/proton-bridge/tree/master&#34;&gt;Proton Mail Bridge sources&lt;/a&gt; v3.9.1&lt;/p&gt;</summary>
  </entry>
</feed>