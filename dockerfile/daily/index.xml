<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dockerfile Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-10-27T01:29:22Z</updated>
  <subtitle>Daily Trending of Dockerfile in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>inpyjama/c-ninja-listings</title>
    <updated>2023-10-27T01:29:22Z</updated>
    <id>tag:github.com,2023-10-27:/inpyjama/c-ninja-listings</id>
    <link href="https://github.com/inpyjama/c-ninja-listings" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Lower level assembly and C baremetal programming on RISC-V CPUs. Source code listings from the C-Ninja, in Pyjama! book.&lt;/p&gt;&lt;hr&gt;&lt;pre&gt;&lt;code&gt;The code provided as part of this repository is ONLY for learning purposes!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Code Listings for &#34;C-Ninja, in Pyjama!&#34;&lt;/h1&gt; &#xA;&lt;p&gt;This repository contains code listings cited as examples from the book &#34;&lt;strong&gt;C Ninja, in Pyjama!&lt;/strong&gt;&#34;. There is also supporting YouTube playlist that guides through the chapters and concepts.&lt;/p&gt; &#xA;&lt;figure&gt; &#xA; &lt;a href=&#34;https://www.youtube.com/playlist?list=PLFt5JBAXXlQow0PLTdqvaiIUMRa71VQHl&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/inpyjama/c-ninja-listings/main/imgs/youtube.png&#34; alt=&#34;Watch the video&#34;&gt; &#xA;  &lt;figcaption align=&#34;center&#34;&gt;&#xA;   Embedded Systems 101: C Ninja, in Pyjama! The right way to learn C...&#xA;  &lt;/figcaption&gt; &lt;/a&gt; &#xA;&lt;/figure&gt; &#xA;&lt;h1&gt;Environment Setup&lt;/h1&gt; &#xA;&lt;p&gt;All the examples are based on the RISC-V CPU implementing the &lt;strong&gt;rv32i&lt;/strong&gt; instruction set. To avoid having to procure/purchase new hardware, the examples are based on the QEMU emulator that emulates the intended CPU. This makes it easy to learn all the core concepts first before trying to execute them on a real hardware.&lt;/p&gt; &#xA;&lt;p&gt;To ensure that everyone has the same development environment, we create and use a docker container. Following steps guide on setting up the right docker container locally.&lt;/p&gt; &#xA;&lt;h2&gt;1. Setup Docker Container&lt;/h2&gt; &#xA;&lt;p&gt;You would need to have Docker engine/desktop installed and running. If you don&#39;t already have it, get a copy and install it for your Operating system by following steps here: &lt;a href=&#34;https://www.docker.com&#34;&gt;Docker&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;1.1. Mac OS&lt;/h3&gt; &#xA;&lt;p&gt;Execute the following to run the setup after &lt;a href=&#34;https://www.docker.com&#34;&gt;Docker&lt;/a&gt; is installed and actively running on your local machine.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bash setup.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;1.1.1. Testing the container&lt;/h4&gt; &#xA;&lt;figure&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/inpyjama/c-ninja-listings/main/imgs/c-ninja.png&#34;&gt; &#xA; &lt;figcaption align=&#34;center&#34;&gt;&#xA;  Example of correctly setup environment...&#xA; &lt;/figcaption&gt; &#xA;&lt;/figure&gt; &#xA;&lt;p&gt;Open a new terminal window. If you are using the &lt;code&gt;bash&lt;/code&gt; shell then simply execute the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;c-ninja&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;b style=&#34;color:red&#34;&gt;Important:&lt;/b&gt; If you are using some other shell, please change to the &lt;code&gt;bash&lt;/code&gt; shell first by executing the &lt;code&gt;bash&lt;/code&gt; command! Once you are in the bash shell is activated, execute the &lt;code&gt;c-ninja&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;p&gt;Once within the docker container, execute the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;c-ninja@c-ninja-linux ~/Documents&#xA;% cd test&#xA;c-ninja@c-ninja-linux ~/Documents/test&#xA;% make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You should see prints as below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;riscv64-unknown-elf-gcc  -O0 -ggdb -nostdlib -march=rv32i -mabi=ilp32 -Wl,-Tmain.ld main.s -o main.elf&#xA;riscv64-unknown-elf-objcopy -O binary main.elf main.bin&#xA;xxd -e -c 4 -g 4 main.bin&#xA;00000000: 00100093  ....&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;1.2. Linux&lt;/h2&gt; &#xA;&lt;p&gt;The installation of docker is described in detail on the official Docker website: &lt;a href=&#34;https://docs.docker.com/engine/install/ubuntu/#install-using-the-repository&#34;&gt;Docker installation on Linux&lt;/a&gt;. We cover the steps needed to enable Docker Desktop on Ubuntu Desktop.&lt;/p&gt; &#xA;&lt;h4&gt;1.2.1 Installing Docker Desktop&lt;/h4&gt; &#xA;&lt;p&gt;Installing docker Desktop on Linux is not straight forward when compared to Mac and Windows.&lt;/p&gt; &#xA;&lt;h4&gt;1.2.1.1 Update APT sources&lt;/h4&gt; &#xA;&lt;p&gt;Open a terminal and update the &lt;code&gt;apt&lt;/code&gt; sources by executing the following commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Add Docker&#39;s official GPG key:&#xA;sudo apt-get update&#xA;sudo apt-get install ca-certificates curl gnupg&#xA;sudo install -m 0755 -d /etc/apt/keyrings&#xA;curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg&#xA;sudo chmod a+r /etc/apt/keyrings/docker.gpg&#xA;&#xA;# Add the repository to Apt sources:&#xA;echo \&#xA;  &#34;deb [arch=&#34;$(dpkg --print-architecture)&#34; signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \&#xA;  &#34;$(. /etc/os-release &amp;amp;&amp;amp; echo &#34;$VERSION_CODENAME&#34;)&#34; stable&#34; | \&#xA;  sudo tee /etc/apt/sources.list.d/docker.list &amp;gt; /dev/null&#xA;sudo apt-get update&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;1.2.1.2 Install Docker CLI&lt;/h4&gt; &#xA;&lt;p&gt;Install the dependencies along with &lt;code&gt;docker-ce-cli&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin curl qemu-system-x86 pass uidmap&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;1.2.1.3 Install Docker Desktop&lt;/h4&gt; &#xA;&lt;p&gt;Download the &lt;a href=&#34;https://desktop.docker.com/linux/main/amd64/docker-desktop-4.24.0-amd64.deb?utm_source=docker&amp;amp;utm_medium=webreferral&amp;amp;utm_campaign=docs-driven-download-linux-amd64&#34;&gt;Docker Desktop Installer&lt;/a&gt;. This should download the &lt;code&gt;docker-desktop-4.24.0-amd64.deb&lt;/code&gt; file. From the location where this file is downloaded, execute the following command to install the Docker Desktop -&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo dpkg -i docker-desktop-4.24.0-amd64.deb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;1.2.1.4 Fix the launch of Docker Desktop&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo rm /etc/xdg/systemd/user/docker-desktop.service&#xA;systemctl --user enable docker-desktop&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;1.2.2 Create the Image and the Container&lt;/h3&gt; &#xA;&lt;p&gt;Ensure Docker Desktop is running and from within the directory for this current repository run the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bash setup.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will create the image and the container.&lt;/p&gt; &#xA;&lt;h4&gt;1.2.3 Testing Installation&lt;/h4&gt; &#xA;&lt;p&gt;Open a new terminal window. If you are using the &lt;code&gt;bash&lt;/code&gt; shell then simply execute the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;c-ninja&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;b style=&#34;color:red&#34;&gt;1.2.3.1. Linux Host Only: Change Ownership of the directory!&lt;/b&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Once within the docker container, you will need to change the ownership of the contents within &lt;code&gt;~/Documents/&lt;/code&gt; in the container. Execute the command as shown below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;c-ninja@c-ninja-linux ~/Documents&#xA;% sudo chown -R c-ninja .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will change the ownership of the files to the local user &lt;code&gt;c-ninja&lt;/code&gt; within the docker container. After this you should be able to issue &lt;code&gt;cd test; make&lt;/code&gt; as below -&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;c-ninja@c-ninja-linux ~/Documents&#xA;% cd test&#xA;c-ninja@c-ninja-linux ~/Documents/test&#xA;% make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This should result in prints as below, confirming that the environment is set correctly.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;riscv64-unknown-elf-gcc  -O0 -ggdb -nostdlib -march=rv32i -mabi=ilp32 -Wl,-Tmain.ld main.s -o main.elf&#xA;riscv64-unknown-elf-objcopy -O binary main.elf main.bin&#xA;xxd -e -c 4 -g 4 main.bin&#xA;00000000: 00100093  ....&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;1.3. Windows&lt;/h3&gt; &#xA;&lt;p&gt;Execute the following to run the setup after &lt;a href=&#34;https://www.docker.com&#34;&gt;Docker&lt;/a&gt; is installed and actively running on your local machine. You can either double-click this file or execute it from the &lt;code&gt;cmd&lt;/code&gt;/&lt;code&gt;power shell&lt;/code&gt; prompt. This command has been tested on Windows 11.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;setup.bat&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;These commands should download the required Linux image, create a container using it, install all the required packages, create the &lt;code&gt;c-ninja&lt;/code&gt; user, and map the current directory as the &lt;code&gt;~/Documents&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h4&gt;1.3.1. Testing the installation&lt;/h4&gt; &#xA;&lt;p&gt;You should see a new, &lt;code&gt;c-ninja.bat&lt;/code&gt; file generated in the current directory. You can double-click on the file to launch the terminal connected to the docker container.&lt;/p&gt; &#xA;&lt;h2&gt;2. Setup VScode&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://code.visualstudio.com/download&#34;&gt;Download and Install Vscode&lt;/a&gt; for your operating system.&lt;/li&gt; &#xA; &lt;li&gt;Launch VScode, open the terminal, and install the extensions -&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;code --install-extension ms-vscode-remote.remote-containers&#xA;code --install-extension ms-vscode-remote.remote-ssh&#xA;code --install-extension ms-vscode-remote.remote-ssh-edit&#xA;code --install-extension ms-vscode.remote-explorer&#xA;code --install-extension zhwu95.riscv&#xA;code --install-extension ZixuanWang.linkerscript&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Restart VSCode and from the Remote explorer connect to the container.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Copyright&lt;/h1&gt; &#xA;&lt;p&gt;Copyright © 2023 inpyjama.com. All Rights Reserved.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>EdenKim-dev/krampoline_step4_v2</title>
    <updated>2023-10-27T01:29:22Z</updated>
    <id>tag:github.com,2023-10-27:/EdenKim-dev/krampoline_step4_v2</id>
    <link href="https://github.com/EdenKim-dev/krampoline_step4_v2" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;krampoline-step4&lt;/h1&gt; &#xA;&lt;h2&gt;소개&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;krampoline-step4&lt;/code&gt;는 krampoline으로 여러가지 앱들을 하나의 구성으로 배포하는 시나리오를 담고 있습니다. 이 저장소에서는 아주 간단한 mariaDB 이미지 생성과 여러가지 쿠버네티스 설정들을 담고 있습니다.&lt;/p&gt; &#xA;&lt;p&gt;프론트엔드(React) 저장소와 백엔드(Spring) 저장소를 등록하여 도커 이미지를 만듭니다. 그리고 nginx 이미지를 가지고 와서 프론트엔드와 백엔드를 위한 프록시 서버 역활을 합니다.&lt;/p&gt; &#xA;&lt;p&gt;현재 저장소에서는 nginx와 데이터베이스의 초기 데이터를 위한 config 파일이 있습니다. 쿠버네티스를 통해서 해당 설정들을 어떻게 하는지를 확인할 수 있습니다.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/MonoKim01/krampoline-step4/assets/85483855/1421cd44-8c34-4b6d-ab5e-222c9a63e4d7&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;</summary>
  </entry>
</feed>