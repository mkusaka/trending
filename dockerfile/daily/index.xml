<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dockerfile Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-07-16T01:31:01Z</updated>
  <subtitle>Daily Trending of Dockerfile in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>zoneminder-containers/zoneminder-base</title>
    <updated>2024-07-16T01:31:01Z</updated>
    <id>tag:github.com,2024-07-16:/zoneminder-containers/zoneminder-base</id>
    <link href="https://github.com/zoneminder-containers/zoneminder-base" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An always up-to-date automatically building ZoneMinder container&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Zoneminder Container&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/zoneminder-containers/zoneminder-base/actions/workflows/docker-build.yaml&#34;&gt;&lt;img src=&#34;https://github.com/zoneminder-containers/zoneminder-base/actions/workflows/docker-build.yaml/badge.svg?sanitize=true&#34; alt=&#34;Docker Build&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/yaoa/zoneminder-base&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/pulls/yaoa/zoneminder-base.svg?sanitize=true&#34; alt=&#34;DockerHub Pulls&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/badge/Status-Completed-brightgreen&#34; alt=&#34;Status&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Maintenance Mode Notice&lt;/h1&gt; &#xA;&lt;p&gt;I do not personally use this and as such will have limited time to invest into this project. Basic things will be fixed, however larger issues from either changes from Zoneminder or otherwise will likely not be fixed. If there is substantial demand for a new feature/improvement, I will consider implementing it if I have time. Sponsoring me and noting this is the reason you are doing so will help me invest more time into this as well.&lt;/p&gt; &#xA;&lt;h1&gt;Why&lt;/h1&gt; &#xA;&lt;p&gt;This is an automatically updating ZoneMinder container built using s6-overlay with full support for all things containers. This aims to be the container that will never die as things will automatically keep themselves up to date and allow for easy selection/testing of various ZoneMinder versions.&lt;/p&gt; &#xA;&lt;p&gt;This container aims to follow all of the best practices of being a container meaning that the software and persistent data are separated, with the container remaining static. This means the container can easily be updated/restored provided the persistent data volumes are backed up.&lt;/p&gt; &#xA;&lt;p&gt;Not only does this aim to follow all of the best practices, but this also aims to be the easiest container with nearly everything configurable through environment variables or automatically/preconfigured for you!&lt;/p&gt; &#xA;&lt;p&gt;There is also full support for multi-server setups with automation to link all servers!&lt;/p&gt; &#xA;&lt;h1&gt;How&lt;/h1&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install &lt;a href=&#34;https://docs.docker.com/get-docker/&#34;&gt;Docker&lt;/a&gt; and &lt;a href=&#34;https://docs.docker.com/compose/install/&#34;&gt;docker-compose&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Download docker-compose.yml or docker-compose-multi.yml depending on single/multi server setups.&lt;/li&gt; &#xA; &lt;li&gt;Download .env&lt;/li&gt; &#xA; &lt;li&gt;Place all these files in the same folder and configure .env and the yml files as you please.&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;docker-compose up -d&lt;/code&gt; to start.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;NOTE: The default docker-compose.yml files use the &lt;code&gt;latest&lt;/code&gt; tag which runs the latest release build of ZoneMinder.&lt;/p&gt; &#xA;&lt;h2&gt;Defining a Version&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Replace &lt;code&gt;latest&lt;/code&gt; in the &lt;code&gt;docker-compose.yml&lt;/code&gt; file with any ZoneMinder version you would like to run. You can find all available releases &lt;a href=&#34;https://github.com/zoneminder-containers/zoneminder-base/releases&#34;&gt;here&lt;/a&gt;. Ex. &lt;code&gt;1.36.1&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Note: For those new to Docker, these values are known as the container tag.&lt;/p&gt; &#xA;&lt;h3&gt;Available Tags&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;branch_name&lt;/code&gt;: This is the branch name of this repository, not Zoneminder.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;release&lt;/code&gt;: References the latest release&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;latest&lt;/code&gt;: Same as release&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;nightly&lt;/code&gt;: Nightly builds from master on Zoneminder&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Updates&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Replace the tag with the new version to update to, or for &lt;code&gt;latest&lt;/code&gt;, simply continue to the next step.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;docker-compose pull&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;docker-compose up -d&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;Helpful Info&lt;/h1&gt; &#xA;&lt;p&gt;Logs are rotated according to the &lt;a href=&#34;http://skarnet.org/software/s6/s6-log.html&#34;&gt;TAI64N standard&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;/data&lt;/code&gt; is not included in fix-permissions because it takes a substantial amount of time to run for the events folder when there are a large number of files&lt;/p&gt; &#xA;&lt;p&gt;The web interface is accessible at the root directory. Do not use the /zm subdirectory to access the interface.&lt;/p&gt; &#xA;&lt;h1&gt;Issues:&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Tell me?&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Future Containers:&lt;/h1&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/zoneminder-containers/eventserver-base&#34;&gt;eventserver-base&lt;/a&gt; (Currently WIP)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install ZM Event Server&lt;/li&gt; &#xA; &lt;li&gt;Automatically enable Event Server and modify Servers table entry to enable Event Server&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;eventserver-mlapi-base&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install YOLO ML Models without opencv&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;eventserver-mlapi&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Build and install standard opencv&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;eventserver-mlapi-cuda&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Develop autobuilding opencv with cuda support container&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>iterativo-git/dockerdoo</title>
    <updated>2024-07-16T01:31:01Z</updated>
    <id>tag:github.com,2024-07-16:/iterativo-git/dockerdoo</id>
    <link href="https://github.com/iterativo-git/dockerdoo" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Flexible and streamlined Odoo image to be used with docker-compose, docker swarm or Kubernetes. Fully integrated to with VSCode devcontainers&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Dockerized Odoo&lt;/h1&gt; &#xA;&lt;p&gt;This is a flexible and &lt;strong&gt;streamlined&lt;/strong&gt; version of most dockerized Odoo projects that you&#39;ll find. And one that allows you to deploy with two different methods using the same Dockerfile:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Standalone&lt;/strong&gt;: As most people use their implementation. With Odoo&#39;s source code inside the container. &lt;strong&gt;This is the default&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Hosted&lt;/strong&gt;: A more practical deployment for &lt;strong&gt;development&lt;/strong&gt;, as the HOST (where docker is installed) has the source code, and each container uses this single source.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Dockerdoo is integrated with &lt;strong&gt;VSCode&lt;/strong&gt; for fast development and debugging, just install the &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-containers&#34;&gt;Remote Containers extension&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;By default this approach does not use the modules availables at the &lt;code&gt;./custom&lt;/code&gt; directory, as this uses Docker&#39;s hosted volumes approach which is considerably slow on Mac and PC. If you&#39;d like to use it this way, just uncomment &lt;code&gt;./custom:${ODOO_EXTRA_ADDONS}:delegated&lt;/code&gt; from the &lt;code&gt;dev-vscode.yml&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Quick usage&lt;/h2&gt; &#xA;&lt;p&gt;To use the &lt;strong&gt;hosted&lt;/strong&gt; approach, the Odoo code must be in the &lt;code&gt;./src&lt;/code&gt; directory, if you also use Enterprise you can add it to the &lt;code&gt;custom&lt;/code&gt; directory, which is automagically added to your addons_path.&lt;/p&gt; &#xA;&lt;h3&gt;Standalone&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git clone -b 16.0 git@github.com:iterativo-git/dockerdoo.git &amp;amp;&amp;amp; cd dockerdoo&#xA;docker-compose up&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Hosted&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git clone -b 16.0 git@github.com:iterativo-git/dockerdoo.git &amp;amp;&amp;amp; cd dockerdoo&#xA;git clone --depth=1 -b 16.0 git@github.com:odoo/odoo.git src/odoo&#xA;docker-compose -f docker-compose.yml -f hosted.yml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Development&lt;/h3&gt; &#xA;&lt;h4&gt;Standalone development&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git clone -b 16.0 git@github.com:iterativo-git/dockerdoo.git &amp;amp;&amp;amp; cd dockerdoo&#xA;docker-compose -f docker-compose.yml -f dev-standalone.yml up&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Hosted development&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git clone -b 16.0 git@github.com:iterativo-git/dockerdoo.git &amp;amp;&amp;amp; cd dockerdoo&#xA;git clone --depth=1 -b 16.0 git@github.com:odoo/odoo.git src/odoo&#xA;docker-compose -f docker-compose.yml -f dev-hosted.yml up&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;To use this docker compose file you should comply with this requirements:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install &lt;a href=&#34;https://www.docker.com/products/docker-desktop&#34;&gt;Docker Desktop&lt;/a&gt; for Windows/Mac or &lt;a href=&#34;https://docs.docker.com/install/linux/docker-ce/ubuntu/#install-docker-ce&#34;&gt;Docker Engine&lt;/a&gt; for Linux&lt;/li&gt; &#xA; &lt;li&gt;Install &lt;a href=&#34;https://docs.docker.com/compose/install/&#34;&gt;docker-compose&lt;/a&gt; (This is installed by default on Windows and Mac with Docker installation)&lt;/li&gt; &#xA; &lt;li&gt;clone this repository &lt;code&gt;git@github.com:iterativo-git/dockerdoo.git&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Running options&lt;/h2&gt; &#xA;&lt;p&gt;There&#39;s a bunch of configurations that can be changed in the .env file, allowing you to adapt your installation.&lt;/p&gt; &#xA;&lt;p&gt;All compose files will raise a &lt;strong&gt;postgres&lt;/strong&gt; container to be used by the &lt;strong&gt;Odoo&lt;/strong&gt; container, depending on the version that has been set in the &lt;code&gt;.env&lt;/code&gt; file for &lt;code&gt;$ODOO_VERSION&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Standalone Odoo&lt;/h3&gt; &#xA;&lt;p&gt;This is the most straightforward option, as it will install &lt;strong&gt;odoo&lt;/strong&gt; &lt;a href=&#34;https://github.com/odoo/odoo&#34;&gt;source code&lt;/a&gt; inside the &lt;em&gt;odoo container&lt;/em&gt;, this gives flexibility to the image as it allows you to move it from host to host, and it&#39;s more stable-safe for a &lt;strong&gt;production environment&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Hosted Odoo&lt;/h3&gt; &#xA;&lt;p&gt;This approach is more effective if you&#39;d like have full control over the &lt;a href=&#34;https://github.com/odoo/odoo&#34;&gt;source code&lt;/a&gt; of the &lt;em&gt;odoo container&lt;/em&gt;, as it will use the source one on your host, which &lt;strong&gt;must&lt;/strong&gt; be located in &lt;code&gt;./src&lt;/code&gt;, and additionally, if using enterprise, in &lt;code&gt;./custom/odoo&lt;/code&gt;. Using a hosted Odoo source code allows for easier &lt;strong&gt;debugging&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Basic Usage&lt;/h2&gt; &#xA;&lt;p&gt;Before running the compose you should evaluate the &lt;code&gt;.env&lt;/code&gt; file, which sets most variables used in this project.&lt;/p&gt; &#xA;&lt;h3&gt;Available &lt;code&gt;docker-compose up&lt;/code&gt; arguments&lt;/h3&gt; &#xA;&lt;p&gt;The Odoo service will use the &lt;em&gt;&lt;strong&gt;arguments&lt;/strong&gt;&lt;/em&gt; defined in the &lt;code&gt;.env&lt;/code&gt; file, the settings in the &lt;em&gt;&lt;strong&gt;configuration file&lt;/strong&gt;&lt;/em&gt; at &lt;code&gt;./config/odoo.conf&lt;/code&gt; (if hosted) and the predefined commands from the &lt;code&gt;docker-compose.yml&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;The available overrides to run with &lt;code&gt;docker-compose&lt;/code&gt; are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;up&lt;/code&gt;: This will raise an streamlined Odoo service, with no additional arguments that the ones stated above.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-docker&#34;&gt;docker-compose up -d&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;-f docker-compose.yml -f hosted.yml up&lt;/code&gt;: This will raise an streamlined Odoo service, with no additional arguments that the ones stated above, but hosted in your PC/SERVER outside the container.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-docker&#34;&gt;docker-compose -f docker-compose.yml -f hosted.yml up -d&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;-f docker-compose.yml -f dev-standalone.yml up&lt;/code&gt;: This will raise an Odoo service with &lt;code&gt;--dev wdb,reload,qweb,werkzeug,xml&lt;/code&gt;. Additionally it will raise a &lt;strong&gt;WDB&lt;/strong&gt; service.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-docker&#34;&gt;docker-compose -f docker-compose.yml -f dev-standalone.yml up&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;-f docker-compose.yml -f test-env.yml up&lt;/code&gt;: This will raise an Odoo service with &lt;code&gt;--dev wdb,qweb,werkzeug,xml&lt;/code&gt;, &lt;code&gt;--test-enable&lt;/code&gt;, &lt;code&gt;--stop-after-init&lt;/code&gt;, &lt;code&gt;--logfile ${ODOO_LOGS_DIR}/odoo-server.log&lt;/code&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-docker&#34;&gt;docker-compose -f docker-compose.yml -f test-env.yml up -d&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;As shown above, all this services are recommended to be run on &lt;strong&gt;detached mode&lt;/strong&gt;: &lt;code&gt;-d&lt;/code&gt;, as this is the most common use case.&lt;/p&gt; &#xA;&lt;h3&gt;Project Structure&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;your-project/&#xA; ├── resources/         # Scripts for service automation&#xA; ├── src/&#xA; │   └── odoo/          # Just required if using hosted source code&#xA; │&#xA; ├── config/&#xA; │   └── odoo.conf      # Hosted configuration file for hosted environment&#xA; ├── custom/            # Custom modules goes here, same level hierarchy **REQUIRED**&#xA; │   ├── iterativo/&#xA; │   ├── OCA/&#xA; │   ├── enterprise/&#xA; │   └── /&#xA; ├── ...                # Common files (.gitignore, etc.)&#xA; ├── .env               # Single source of environment definition&#xA; ├── Dockerfile         # Single source of image definition&#xA; ├── docker-compose.yml             # The opionated version&#xA; └── docker-compose.override.yml    # Your custom version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Extra addons&lt;/h3&gt; &#xA;&lt;p&gt;You can put all your &lt;strong&gt;custom addons&lt;/strong&gt; in the folder &lt;code&gt;./custom/&lt;/code&gt;, those will be automatically added to your &lt;code&gt;addons_path&lt;/code&gt; thanks to the script in &lt;code&gt;./resources/getaddons.py&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;p&gt;Mainly based on dockery-odoo work by:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/blaggacao&#34;&gt;David Arnold&lt;/a&gt; (&lt;a href=&#34;https://xoe.solutions&#34;&gt;XOE Solutions&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Bunch of ideas taken from:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/odoo&#34;&gt;Odoo&lt;/a&gt; (&lt;a href=&#34;https://github.com/odoo/docker&#34;&gt;docker&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/OCA&#34;&gt;OCA&lt;/a&gt; (&lt;a href=&#34;https://github.com/OCA/maintainer-quality-tools&#34;&gt;maintainer-quality-tools&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jjscarafia&#34;&gt;Ingeniería ADHOC&lt;/a&gt; (&lt;a href=&#34;https://github.com/ingadhoc/docker-odoo-adhoc&#34;&gt;docker-odoo-adhoc&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;WIP&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Swarm / Kubernetes considerations (secrets, etc.)&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>