<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dockerfile Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-11-07T01:35:57Z</updated>
  <subtitle>Daily Trending of Dockerfile in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>yoanbernabeu/symfony6-php8-in-docker-compose</title>
    <updated>2022-11-07T01:35:57Z</updated>
    <id>tag:github.com,2022-11-07:/yoanbernabeu/symfony6-php8-in-docker-compose</id>
    <link href="https://github.com/yoanbernabeu/symfony6-php8-in-docker-compose" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A very simple Docker-compose to discover Symfony 6 with PHP 8.0.13 in 5 minutes&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Symfony 6 + PHP 8.0.13 with Docker&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;ONLY for DEV, not for production&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;A very simple Docker-compose to discover Symfony 6 with PHP 8.0.13 in 5 minutes&lt;/p&gt; &#xA;&lt;h2&gt;Run Locally&lt;/h2&gt; &#xA;&lt;p&gt;Clone the project&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  git@github.com:yoanbernabeu/symfony6-php8-in-docker-compose.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run the docker-compose&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  docker-compose build&#xA;  docker-compose up -d&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Log into the PHP container&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  docker exec -it php8-sf6 bash&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Create your Symfony application and launch the internal server&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  symfony new new-project --full&#xA;  cd new-project&#xA;  symfony serve -d&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Create an account (identical to your local session)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  adduser username&#xA;  chown username:username -R .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;Your application is available at &lt;a href=&#34;http://127.0.0.1:9000&#34;&gt;http://127.0.0.1:9000&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you need a database, modify the .env file like this example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;  DATABASE_URL=&#34;postgresql://symfony:ChangeMe@database:5432/app?serverVersion=13&amp;amp;charset=utf8&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Ready to use with&lt;/h2&gt; &#xA;&lt;p&gt;This docker-compose provides you :&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;PHP-8.0.13-cli (Debian) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Composer&lt;/li&gt; &#xA;   &lt;li&gt;Symfony CLI&lt;/li&gt; &#xA;   &lt;li&gt;and some other php extentions&lt;/li&gt; &#xA;   &lt;li&gt;nodejs, npm, yarn&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;postgres:13-alpine&lt;/li&gt; &#xA; &lt;li&gt;mailcatcher&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;Out of the box, this docker-compose is designed for a Linux operating system, provide adaptations for a Mac or Windows environment.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Linux (Ubuntu 20.04 or other)&lt;/li&gt; &#xA; &lt;li&gt;Docker&lt;/li&gt; &#xA; &lt;li&gt;Docker-compose&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Author&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yoanbernabeu&#34;&gt;@yoanbernabeu&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>FWSquatch/do180-practice</title>
    <updated>2022-11-07T01:35:57Z</updated>
    <id>tag:github.com,2022-11-07:/FWSquatch/do180-practice</id>
    <link href="https://github.com/FWSquatch/do180-practice" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Practice Environment for DO180&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;EX180 Automated Practice Deployment&lt;/h1&gt; &#xA;&lt;p&gt;&lt;em&gt;Powered by Ansible and Vagrant&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Install this system to complete &lt;a href=&#34;https://docs.google.com/document/d/e/2PACX-1vS-91bm_QXLo4oRy94wB0FPxzNk-yAhCs9gE2ljU9xjTGGtHmCXdc7TVBalhr59bl49-qZDJuSP0bDL/pub&#34;&gt;this EX180 Practice Exam&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install vagrant and virtualbox.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.virtualbox.org/wiki/Downloads&#34;&gt;Install the Virtual Box Extension Pack&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Clone this repo: &lt;code&gt;git clone https://github.com/FWSquatch/do180-practice&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Change into the newly created directory: &lt;code&gt;cd do180-practice&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Fire up the VMs: &lt;code&gt;vagrant up&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Other Useful Information:&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;vagrant up&lt;/code&gt; - Boots and provisions the environment&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;vagrant destroy -f&lt;/code&gt; - Shuts down and destroys the environment&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;vagrant halt&lt;/code&gt; - Only shuts down the environment VMs (can be booted up with &lt;code&gt;vagrant up&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;vagrant suspend&lt;/code&gt; - Puts the VMs in a suspended state&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;vagrant resume&lt;/code&gt; - Takes VMs out of a suspended state&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can also use the VirtualBox console to interact with the VMs or through a terminal. If you need to reset the root password, you would need to use the console. I&#39;m constantly making upgrades to the environments, so every once and awhile run &lt;code&gt;git pull&lt;/code&gt; in the repo directory to pull down changes. If you&#39;re using Windows, it&#39;s recommended to use Github Desktop so you can easily pull changes that are made to the environment. The first time you run the vagrant up command, it will download the OS images for later use. In other words, it will take longest the first time around but will be faster when it is deployed again. You can run &lt;code&gt;vagrant destroy -f&lt;/code&gt; to destroy your environment at anytime. &lt;strong&gt;This will erase everything&lt;/strong&gt;. This environment is meant to be reuseable, If you run the &lt;code&gt;vagrant up&lt;/code&gt; command after destroying the environment, the OS image will already be downloaded and environment will deploy faster. Deployment should take around 15 minutes depending on your computer. You shouldn&#39;t need to access the IPA server during your practice exams. Everything should be provided that you would normally need during an actual exam. Hope this helps in your studies!&lt;/p&gt; &#xA;&lt;h2&gt;Included systems:&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;registry.do180.lab&lt;/li&gt; &#xA; &lt;li&gt;workstation.do180.lab&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;System Details:&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;workstation&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;192.168.88.4&lt;/li&gt; &#xA; &lt;li&gt;Gateway - 192.168.88.1&lt;/li&gt; &#xA; &lt;li&gt;DNS - 8.8.8.8&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;registry&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;192.168.88.5&lt;/li&gt; &#xA; &lt;li&gt;Gateway - 192.168.88.1&lt;/li&gt; &#xA; &lt;li&gt;DNS - 8.8.8.8&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Accessing the systems&lt;/h2&gt; &#xA;&lt;p&gt;Remember to add the IP addresses to your local host file if you want to connect to the guest systems with the hostname. Username - vagrant Password - vagrant&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;For root - use &lt;code&gt;sudo&lt;/code&gt; or &lt;code&gt;sudo su&lt;/code&gt; Access example - &lt;code&gt;ssh vagrant@192.168.88.4&lt;/code&gt; or &lt;code&gt;vagrant ssh workstation&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>pangeo-data/pangeo-docker-images</title>
    <updated>2022-11-07T01:35:57Z</updated>
    <id>tag:github.com,2022-11-07:/pangeo-data/pangeo-docker-images</id>
    <link href="https://github.com/pangeo-data/pangeo-docker-images" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Docker Images For Pangeo Jupyter Environment&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Pangeo Docker Images&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/pangeo-data/pangeo-docker-images/workflows/Build/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt; &lt;img src=&#34;https://github.com/pangeo-data/pangeo-docker-images/workflows/Publish/badge.svg?sanitize=true&#34; alt=&#34;Publish Status&#34;&gt; &lt;img src=&#34;https://img.shields.io/docker/v/pangeo/base-image?sort=date&#34; alt=&#34;DockerHub Version&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The images defined in this repository capture reproducible computing environments used by &lt;a href=&#34;https://pangeo.io/cloud.html&#34;&gt;Pangeo Cloud&lt;/a&gt;. They build on top of the Ubuntu operating system and include &lt;a href=&#34;https://conda.io/projects/conda&#34;&gt;conda environments&lt;/a&gt; with a curated set of Python packages for geospatial analysis. While intended for Pangeo Cloud, they can be used outside of Pangeo infrastructure too!&lt;/p&gt; &#xA;&lt;p&gt;Images are hosted on DockerHub: &lt;a href=&#34;https://hub.docker.com/u/pangeo&#34;&gt;https://hub.docker.com/u/pangeo&lt;/a&gt; and on Quay.io: &lt;a href=&#34;https://quay.io/organization/pangeo&#34;&gt;https://quay.io/organization/pangeo&lt;/a&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Image&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;th&gt;Size&lt;/th&gt; &#xA;   &lt;th&gt;Pulls&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;base-image&lt;/td&gt; &#xA;   &lt;td&gt;Foundational Dockerfile for builds&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://img.shields.io/docker/image-size/pangeo/base-image?sort=date&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://img.shields.io/docker/pulls/pangeo/base-image?sort=date&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pangeo-data/pangeo-docker-images/master/base-notebook/packages.txt&#34;&gt;base-notebook&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;minimally functional image for pangeo hubs&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://img.shields.io/docker/image-size/pangeo/base-notebook?sort=date&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://img.shields.io/docker/pulls/pangeo/base-notebook?sort=date&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pangeo-data/pangeo-docker-images/master/pangeo-notebook/packages.txt&#34;&gt;pangeo-notebook&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;base-notebook + core earth science analysis packages&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://img.shields.io/docker/image-size/pangeo/pangeo-notebook?sort=date&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://img.shields.io/docker/pulls/pangeo/pangeo-notebook?sort=date&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pangeo-data/pangeo-docker-images/master/pytorch-notebook/packages.txt&#34;&gt;pytorch-notebook&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;pangeo-notebook + GPU-enabled pytorch&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://img.shields.io/docker/image-size/pangeo/pytorch-notebook?sort=date&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://img.shields.io/docker/pulls/pangeo/pytorch-notebook?sort=date&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pangeo-data/pangeo-docker-images/master/ml-notebook/packages.txt&#34;&gt;ml-notebook&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;pangeo-notebook + GPU-enabled tensorflow2&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://img.shields.io/docker/image-size/pangeo/ml-notebook?sort=date&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://img.shields.io/docker/pulls/pangeo/ml-notebook?sort=date&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pangeo-data/pangeo-docker-images/master/ml-notebook/packages.txt&#34;&gt;forge&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;pangeo-notebook + &lt;a href=&#34;https://beam.apache.org/&#34;&gt;Apache Beam&lt;/a&gt; support&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://img.shields.io/docker/image-size/pangeo/forge?sort=date&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://img.shields.io/docker/pulls/pangeo/forge?sort=date&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;em&gt;Click on the image name in the table above for a current list of installed packages and versions&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;graph TD;&#xA;    base-image--&amp;gt;base-notebook;&#xA;    base-notebook--&amp;gt;pangeo-notebook;&#xA;    pangeo-notebook--&amp;gt;pytorch-notebook;&#xA;    pangeo-notebook--&amp;gt;ml-notebook;&#xA;    pangeo-notebook--&amp;gt;forge;&#xA;    click base-image &#34;https://hub.docker.com/r/pangeo/base-image&#34; &#34;Open this in a new tab&#34; _blank&#xA;    click base-notebook &#34;https://hub.docker.com/r/pangeo/base-notebook&#34; &#34;Open this in a new tab&#34; _blank&#xA;    click pangeo-notebook &#34;https://hub.docker.com/r/pangeo/pangeo-notebook&#34; &#34;Open this in a new tab&#34; _blank&#xA;    click pytorch-notebook &#34;https://hub.docker.com/r/pangeo/pytorch-notebook&#34; &#34;Open this in a new tab&#34; _blank&#xA;    click ml-notebook &#34;https://hub.docker.com/r/pangeo/ml-notebook&#34; &#34;Open this in a new tab&#34; _blank&#xA;    click forge &#34;https://hub.docker.com/r/pangeo/forge&#34; &#34;Open this in a new tab&#34; _blank&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;How to use the pangeo-notebook image with Binder&lt;/h3&gt; &#xA;&lt;p&gt;A major use-case for these images is running an ephemeral server on the Cloud with BinderHub. Anyone can launch a server running the latest-and-greatest &lt;code&gt;pangeo-notebook&lt;/code&gt; image with the following URL&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mybinder.org/v2/gh/pangeo-data/pangeo-docker-images/HEAD?urlpath=lab&#34;&gt;https://mybinder.org/v2/gh/pangeo-data/pangeo-docker-images/HEAD?urlpath=lab&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Users who need the special features offered by &lt;a href=&#34;https://binder.pangeo.io/&#34;&gt;Pangeo binder&lt;/a&gt; can use the following links for running in GCP us-central1 or AWS us-west-2 respectively:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://binder.pangeo.io/v2/gh/pangeo-data/pangeo-docker-images/HEAD?urlpath=lab&#34;&gt;https://binder.pangeo.io/v2/gh/pangeo-data/pangeo-docker-images/HEAD?urlpath=lab&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://aws-uswest2-binder.pangeo.io/v2/gh/pangeo-data/pangeo-docker-images/HEAD?urlpath=lab&#34;&gt;https://aws-uswest2-binder.pangeo.io/v2/gh/pangeo-data/pangeo-docker-images/HEAD?urlpath=lab&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;NOTE: the links above resolve to the &lt;a href=&#34;https://github.com/pangeo-data/pangeo-docker-images/tree/master/pangeo-notebook&#34;&gt;&lt;code&gt;pangeo-notebook&lt;/code&gt; image&lt;/a&gt; and not &lt;code&gt;base-notebook&lt;/code&gt;, &lt;code&gt;ml-notebook&lt;/code&gt; or &lt;code&gt;pytorch-notebook&lt;/code&gt; that are also defined in this repository. Currently BinderHubs map to a single image definition per repository.&lt;/p&gt; &#xA;&lt;h4&gt;Use nbgitpuller to automatically load content&lt;/h4&gt; &#xA;&lt;p&gt;The links above will launch Jupyterlab without any notebooks or other content. From Jupyterlab you can then upload notebooks or run &lt;code&gt;git pull&lt;/code&gt; commands to retrieve content in another GitHub repository. However, it can be very useful to pre-load content when a server launches. &lt;a href=&#34;https://jupyterhub.github.io/nbgitpuller/link&#34;&gt;nbgitpuller link generator&lt;/a&gt; is very useful for this!&lt;/p&gt; &#xA;&lt;p&gt;Below is a link to illustrate launching &lt;a href=&#34;https://github.com/pangeo-data/pangeo-docker-images/raw/2021.09.30/pangeo-notebook/packages.txt&#34;&gt;&lt;code&gt;pangeo-notebook/2021.09.30&lt;/code&gt;&lt;/a&gt; and automatically pulling the notebooks housed in &lt;a href=&#34;https://github.com/pangeo-data/cog-best-practices&#34;&gt;https://github.com/pangeo-data/cog-best-practices&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://aws-uswest2-binder.pangeo.io/v2/gh/pangeo-data/pangeo-docker-images/2021.09.30?urlpath=git-pull%3Frepo%3Dhttps%253A%252F%252Fgithub.com%252Fpangeo-data%252Fcog-best-practices%26urlpath%3Dlab%252Ftree%252Fcog-best-practices%252F%26branch%3Dmain&#34;&gt;https://aws-uswest2-binder.pangeo.io/v2/gh/pangeo-data/pangeo-docker-images/2021.09.30?urlpath=git-pull%3Frepo%3Dhttps%253A%252F%252Fgithub.com%252Fpangeo-data%252Fcog-best-practices%26urlpath%3Dlab%252Ftree%252Fcog-best-practices%252F%26branch%3Dmain&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Those links get a bit long and complicated to look at, so it&#39;s common use a markdown button to hide them:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;AWS&lt;/th&gt; &#xA;   &lt;th&gt;GCP&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://aws-uswest2-binder.pangeo.io/v2/gh/pangeo-data/pangeo-docker-images/2021.09.30?urlpath=git-pull%3Frepo%3Dhttps%253A%252F%252Fgithub.com%252Fpangeo-data%252Fcog-best-practices%26urlpath%3Dlab%252Ftree%252Fcog-best-practices%252F%26branch%3Dmain&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1.svg?logo=Jupyter&amp;amp;label=PangeoBinder&amp;amp;message=AWS+us-west-2&amp;amp;color=orange&#34; alt=&#34;badge&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://binder.pangeo.io/v2/gh/pangeo-data/pangeo-docker-images/2021.09.30?urlpath=git-pull%3Frepo%3Dhttps%253A%252F%252Fgithub.com%252Fpangeo-data%252Fcog-best-practices%26urlpath%3Dlab%252Ftree%252Fcog-best-practices%252F%26branch%3Dmain&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1.svg?logo=Jupyter&amp;amp;label=PangeoBinder&amp;amp;message=GCP+us-central1&amp;amp;color=blue&#34; alt=&#34;badge&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;Customize your environment&lt;/h4&gt; &#xA;&lt;p&gt;Advanced users may want a highly customized environment that still works on Pangeo BinderHubs. You can do that by building off the pangeo &lt;code&gt;base-image&lt;/code&gt; following our &lt;a href=&#34;https://github.com/pangeo-data/pangeo-binder-template&#34;&gt;template repository example&lt;/a&gt;. Further documentation on the configuration files in the &lt;code&gt;binder&lt;/code&gt; subfolder can be found in the &lt;a href=&#34;https://repo2docker.readthedocs.io/en/latest/config_files.html#configuration-files&#34;&gt;repo2docker documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;How to launch Jupyterlab locally with one of these images&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run -it --rm -p 8888:8888 pangeo/pangeo-notebook:latest jupyter lab --ip 0.0.0.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; images are mirrored on quay.io so you can also pull &lt;code&gt;quay.io/pangeo/pangeo-notebook:latest&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;To access files from your local hard drive from within the Docker Jupyterlab, you need to use a Docker &lt;a href=&#34;https://docs.docker.com/storage/volumes/&#34;&gt;volume mount&lt;/a&gt;. The following command will mount your home directory in the docker container and launch the Jupyterlab from there.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run -it --rm --volume $HOME:$HOME -p 8888:8888 pangeo/pangeo-notebook:latest jupyter lab --ip 0.0.0.0 $HOME&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also run commands other than &lt;code&gt;jupyter&lt;/code&gt; when starting a Docker container:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run -it --rm pangeo/base-notebook:2021.09.30 /bin/bash&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you&#39;re doing Machine Learning and want to use NVIDIA GPUs, follow the instructions at &lt;a href=&#34;https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/install-guide.html&#34;&gt;https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/install-guide.html&lt;/a&gt; to install &lt;code&gt;nvidia-docker&lt;/code&gt;, and then start the Docker container like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run -it --rm --gpus all -p 8888:8888 pangeo/pytorch-notebook:master jupyter lab --ip 0.0.0.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;How to launch an image with a Cloud provider on your own account&lt;/h3&gt; &#xA;&lt;p&gt;Many Cloud providers offer services to run Docker containers in their data centers. Instructions will vary, so we don&#39;t provide specifics here, but as an example, check out these docs for running containers on the cloud via Docker Compose:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.docker.com/cloud/ecs-integration&#34;&gt;Amazon Elastic Container Service (ECS)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.docker.com/cloud/aci-integration&#34;&gt;Azure Container Instances (ACI)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;How to install just the conda environment&lt;/h3&gt; &#xA;&lt;p&gt;If you&#39;re used to managing conda environments on your personal computer, or running a hosted JupyterLab service like &lt;a href=&#34;https://colab.research.google.com&#34;&gt;Google Colab&lt;/a&gt; or &lt;a href=&#34;https://studiolab.sagemaker.aws&#34;&gt;AWS SageMaker Studio Lab&lt;/a&gt;, you can exactly match a tagged pangeo-notebook conda environment. For example, below we install the &lt;code&gt;pangeo-notebook&lt;/code&gt; environment tagged on &lt;code&gt;2021.12.02&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;%conda create -n pangeo-notebook --file https://raw.githubusercontent.com/pangeo-data/pangeo-docker-images/2021.12.02/pangeo-notebook/conda-linux-64.lock&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that this will only work on linux environments, since the conda lockfile is specific to linux.&lt;/p&gt; &#xA;&lt;h3&gt;Image tagging and &#34;continuous building&#34;&lt;/h3&gt; &#xA;&lt;p&gt;This repository uses &lt;a href=&#34;https://help.github.com/en/actions&#34;&gt;GitHub Actions&lt;/a&gt; to build images, run tests, and push images to &lt;a href=&#34;https://hub.docker.com/orgs/pangeo&#34;&gt;DockerHub&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Pull requests from forks trigger rebuilding all images&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;pangeo/base-notebook:master&lt;/code&gt; corresponds to current &#34;staging&#34; image in sync with master branch. Built with every commit to master. Also tagged with short GitHub short SHA &lt;code&gt;pangeo/base-notebook:2639bd3&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Tags pushed to GitHub manually represent &#34;production&#34; releases with corresponding tags on DockerHub &lt;code&gt;pangeo/pangeo-notebook:2020.03.11&lt;/code&gt;. The &lt;code&gt;latest&lt;/code&gt; tag also corresponds to the most recent GitHub tag.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;How to build images through CI&lt;/h3&gt; &#xA;&lt;p&gt;A common need is to update conda package versions in these images. To do so simply, 1) Fork this repo, 2) edit &lt;code&gt;pangeo-notebook/environment.yml&lt;/code&gt; on your fork, 3) create a PR. Compatible packages versions with &lt;code&gt;conda-lock&lt;/code&gt; and a lock file is automatically committed added as a commit in your PR.&lt;/p&gt; &#xA;&lt;h3&gt;How to build images locally&lt;/h3&gt; &#xA;&lt;p&gt;You&#39;ll need at least Conda installed, and Docker if you want to build and test locally.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# create a fork of this repo and clone it locally&#xA;git clone https://github.com/mygithub/pangeo-docker-images&#xA;cd pangeo-docker-images&#xA;# Install conda-lock&#xA;conda env create -f environment-condalock.yml&#xA;git checkout -b change-pangeo-notebook&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Edit &lt;code&gt;pangeo-notebook/environment.yml&lt;/code&gt; to change packages! Note that &lt;code&gt;make pangeo-notebook&lt;/code&gt; is a convenient shortcut to build and test. See the Makefile for specific commands that are run. For example, you can just run conda-lock and don&#39;t have to run Docker to build and test locally.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make pangeo-notebook&#xA;git commit -a -m &#34;added x packages, changed x version&#34;&#xA;git push&#xA;# go to github to create PR, or use github cli https://cli.github.com&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Design:&lt;/h3&gt; &#xA;&lt;h5&gt;Goals:&lt;/h5&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;compatible with &lt;a href=&#34;https://github.com/pangeo-data/pangeo-binder&#34;&gt;Pangeo BinderHubs&lt;/a&gt; and &lt;a href=&#34;https://github.com/pangeo-data/pangeo-cloud-federation&#34;&gt;JupyterHubs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;compatible with &lt;a href=&#34;https://repo2docker.readthedocs.io/en/latest/config_files.html&#34;&gt;Repo2Docker Python configuration files&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;reproducible build process and explicit conda package lists&lt;/li&gt; &#xA; &lt;li&gt;small size, fast build&lt;/li&gt; &#xA; &lt;li&gt;easy to customize&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Everything stems from the &lt;code&gt;Dockerfile&lt;/code&gt; in the &lt;code&gt;base-image&lt;/code&gt; folder. The &lt;code&gt;base-image&lt;/code&gt; configures default settings for Conda and Dask with &lt;code&gt;condarc.yml&lt;/code&gt; and &lt;code&gt;dask_config.yml&lt;/code&gt; files. The &lt;code&gt;base-image&lt;/code&gt; is not meant to run on its own, it is the common foundation for &lt;code&gt;-notebook&lt;/code&gt; images that install Python packages including JupyerLab and lab extensions. Lists of Conda packages for each image are specified in an &lt;code&gt;environment.yml&lt;/code&gt; in each &lt;code&gt;-notebook&lt;/code&gt; folder, and compatible Dask and Jupyter packages are guaranteed by specifying the &lt;code&gt;pangeo-notebook&lt;/code&gt; &lt;a href=&#34;https://github.com/conda-forge/pangeo-notebook-feedstock&#34;&gt;conda metapackage&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can pre-solve for compatible environments locally with &lt;a href=&#34;https://github.com/mariusvniekerk/conda-lock/raw/master/README.md&#34;&gt;conda-lock&lt;/a&gt; to convert the &lt;code&gt;environment.yml&lt;/code&gt; file to a &lt;a href=&#34;https://docs.conda.io/projects/conda/en/latest/user-guide/tasks/manage-environments.html#building-identical-conda-environments&#34;&gt;conda-linux-64.lock&lt;/a&gt; file which is an explicit list of compatible packages solved by Conda. The major advantage of doing this is that if you rebuild at a later date the resulting Conda environment is identical, which improves reproducibility. For this reason, when building off of the &lt;code&gt;base-image&lt;/code&gt;, any existing &lt;code&gt;conda-linux-64.lock&lt;/code&gt; file takes precedence over the &lt;code&gt;environment.yml&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;h3&gt;Environment&lt;/h3&gt; &#xA;&lt;p&gt;The runtime environment sets two variables by default&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;$PANGEO_ENV&lt;/code&gt;: name of the conda environment.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$PANGEO_SCRATCH&lt;/code&gt;: a URL like &lt;code&gt;gcs://pangeo-scratch/username/&lt;/code&gt; that points to a cloud storage bucket for temporary storage. This is set if the variable &lt;code&gt;$PANGEO_SCRATCH_PREFIX&lt;/code&gt; and &lt;code&gt;JUPYTERHUB_USER&lt;/code&gt; are detected. The prefix should be like &lt;code&gt;s3://pangeo-scratch&lt;/code&gt;. This is not present in the &lt;code&gt;forge/&lt;/code&gt; image.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Other notes&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Since 2020.10.16, &lt;a href=&#34;https://github.com/mamba-org/mamba&#34;&gt;mamba&lt;/a&gt; is installed into the base-image and conda-lock environment and is used by default to solve for a compatible environment (see #146)&lt;/li&gt; &#xA; &lt;li&gt;For a simple list of packages for a given image, you can use a link like this: &lt;a href=&#34;https://github.com/pangeo-data/pangeo-docker-images/raw/2020.10.08/pangeo-notebook/packages.txt&#34;&gt;https://github.com/pangeo-data/pangeo-docker-images/blob/2020.10.08/pangeo-notebook/packages.txt&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;To compare changes between two images, you can use a link like this: &lt;a href=&#34;https://github.com/pangeo-data/pangeo-docker-images/compare/2020.10.03..2020.10.08&#34;&gt;https://github.com/pangeo-data/pangeo-docker-images/compare/2020.10.03..2020.10.08&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Our &lt;code&gt;ml-notebook&lt;/code&gt; image now contains JAX and TensorFlow with XLA enabled. Due to licensing issues, conda-forge does not have &lt;code&gt;ptxas&lt;/code&gt;, but &lt;code&gt;ptxas&lt;/code&gt; is needed for XLA to work correctly. Should you like to use JAX and/or TensorFlow with XLA optimization, please install &lt;code&gt;ptxas&lt;/code&gt; on your own, for example, by &lt;code&gt;conda install -c nvidia cuda-nvcc&lt;/code&gt;. At the time of writing (October 2022), JAX throws a compilation error if the &lt;code&gt;ptxas&lt;/code&gt; version is higher than the driver version. There does not exist an easy solution for K80 GPUs, but in the case of T4 GPUs, you should install &lt;code&gt;conda install -c nvidia cuda-nvcc==11.6.*&lt;/code&gt; to be safe. Alternatively for any GPU, you could set an environment variable to resolve the error caused by JAX: &lt;code&gt;XLA_FLAGS=&#34;--xla_gpu_force_compilation_parallelism=1&#34;&lt;/code&gt;. The aforementioned error will be removed (and likely turned into a warning) in a future version of JAX. See &lt;a href=&#34;https://github.com/google/jax/issues/12776#issuecomment-1276649134&#34;&gt;https://github.com/google/jax/issues/12776#issuecomment-1276649134&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Dask-gateway compatibility&lt;/h3&gt; &#xA;&lt;p&gt;The primary use of these Docker images is running on Pangeo Cloud deployments with &lt;a href=&#34;https://github.com/dask/dask-gateway&#34;&gt;dask-gateway&lt;/a&gt;. Generally, the dask-gateway library version built into the image must match the dask-gateway version deployed in the cloud environment. The follow table keeps track of the first time a new dask-gateway version appears in a tagged image:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;dask-gateway&lt;/th&gt; &#xA;   &lt;th&gt;Image tag&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;0.9&lt;/td&gt; &#xA;   &lt;td&gt;2020.11.06&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;0.8&lt;/td&gt; &#xA;   &lt;td&gt;2020.07.28&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;0.7&lt;/td&gt; &#xA;   &lt;td&gt;2020.04.22&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt;</summary>
  </entry>
</feed>