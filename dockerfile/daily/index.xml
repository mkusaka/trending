<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dockerfile Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-10-13T01:33:12Z</updated>
  <subtitle>Daily Trending of Dockerfile in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>revanced/revanced-cdn-action</title>
    <updated>2022-10-13T01:33:12Z</updated>
    <id>tag:github.com,2022-10-13:/revanced/revanced-cdn-action</id>
    <link href="https://github.com/revanced/revanced-cdn-action" rel="alternate"></link>
    <summary type="html">&lt;p&gt;ðŸš€ Because delivering content is hard&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ReVanced Releases CDN&lt;/h1&gt; &#xA;&lt;p&gt;Because delivering content to the world is hard.&lt;/p&gt; &#xA;&lt;h2&gt;Why?&lt;/h2&gt; &#xA;&lt;p&gt;Distributing content is hard. It&#39;s hard to get it to the right people, and it&#39;s hard to make sure it&#39;s always available. GitHub is a great place to host code, but it&#39;s not a great place to host content. This is where the ReVanced Releases CDN comes in.&lt;/p&gt; &#xA;&lt;h2&gt;How?&lt;/h2&gt; &#xA;&lt;p&gt;By leveraging new technologies like the &lt;a href=&#34;https://ipfs.io&#34;&gt;InterPlanetary File System&lt;/a&gt;, &lt;a href=&#34;https://filecoin.io&#34;&gt;Filecoin&lt;/a&gt; and the InterPlanetary Naming System (IPNS), we can make sure that content is always available, and that it&#39;s always available to the right people. And most importantly, we can do it in a way that is cheap, decentralized and resilient to censorship.&lt;/p&gt; &#xA;&lt;p&gt;The main star in this project is &lt;a href=&#34;https://web3.storage/&#34;&gt;web3.storage&lt;/a&gt;. By using their API we can get forget about the complexities of dealing with IPFS and Filecoin and focus on building on top of those technologies. Web3.storage also provides a variety of other important tools: free pinning, a very fast and reliable gateway (&lt;a href=&#34;https://w3s.link&#34;&gt;w3s.link&lt;/a&gt;), and an incredibly powerful IPNS API for mutable data.&lt;/p&gt; &#xA;&lt;h2&gt;Architecture&lt;/h2&gt; &#xA;&lt;p&gt;ToDo :D&lt;/p&gt; &#xA;&lt;h2&gt;How to use&lt;/h2&gt; &#xA;&lt;p&gt;ToDo :D&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>kubernetes-sigs/contributor-playground</title>
    <updated>2022-10-13T01:33:12Z</updated>
    <id>tag:github.com,2022-10-13:/kubernetes-sigs/contributor-playground</id>
    <link href="https://github.com/kubernetes-sigs/contributor-playground" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Kubernetes Contributor Playground&lt;/h1&gt; &#xA;&lt;p&gt;Hello new contributors!&lt;/p&gt; &#xA;&lt;p&gt;This repository will be used as a safe space for participants in the New Contributor Onboarding Track to familiarize themselves with (some of) the Kubernetes Project&#39;s review and pull request processes.&lt;/p&gt; &#xA;&lt;p&gt;A &lt;a href=&#34;https://www.youtube.com/playlist?list=PL69nYSiGNLP3M5X7stuD7N4r3uP2PZQUx&#34;&gt;Youtube playlist&lt;/a&gt; of the New Contributor workshop has been posted, and an outline of content to videos can be found &lt;a href=&#34;http://git.k8s.io/community/events/2018/05-contributor-summit&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Community, discussion, contribution, and support&lt;/h2&gt; &#xA;&lt;p&gt;Learn how to engage with the Kubernetes community on the &lt;a href=&#34;http://kubernetes.io/community/&#34;&gt;community page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can reach the maintainers of this project at:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://slack.k8s.io/&#34;&gt;Slack&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://groups.google.com/forum/#!forum/kubernetes-dev&#34;&gt;Mailing List&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Code of conduct&lt;/h3&gt; &#xA;&lt;p&gt;Participation in the Kubernetes community is governed by the &lt;a href=&#34;https://raw.githubusercontent.com/kubernetes-sigs/contributor-playground/master/code-of-conduct.md&#34;&gt;Kubernetes Code of Conduct&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>commercialhaskell/stackage</title>
    <updated>2022-10-13T01:33:12Z</updated>
    <id>tag:github.com,2022-10-13:/commercialhaskell/stackage</id>
    <link href="https://github.com/commercialhaskell/stackage" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&#34;Stable Hackage&#34;: vetted consistent packages from Hackage&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;stackage&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stackage/actions/workflows/check.yml&#34;&gt;&lt;img src=&#34;https://github.com/commercialhaskell/stackage/actions/workflows/check.yml/badge.svg?sanitize=true&#34; alt=&#34;check&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Stable sets of Haskell Packages from Hackage&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;This repository is for package authors and maintainers to get their packages into Stackage.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you simply want to use Stackage as an end user, please follow the instructions on &lt;a href=&#34;https://www.stackage.org&#34;&gt;https://www.stackage.org/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;We strongly recommend using the Haskell &lt;a href=&#34;https://github.com/commercialhaskell/stack&#34;&gt;stack&lt;/a&gt; tool for doing builds, which includes built-in Stackage support.&lt;/p&gt; &#xA;&lt;h2&gt;Add your package&lt;/h2&gt; &#xA;&lt;p&gt;We welcome all packages, provided:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The package author/maintainer agrees to the &lt;a href=&#34;https://github.com/commercialhaskell/stackage/raw/master/MAINTAINERS.md&#34;&gt;maintainers agreement&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;The package is buildable and testable from Hackage. We recommend &lt;a href=&#34;https://docs.haskellstack.org/en/stable/travis_ci/&#34;&gt;the Stack Travis script&lt;/a&gt;, which ensures a package is not accidentally incomplete.&lt;/li&gt; &#xA; &lt;li&gt;The package is compatible with the newest versions of all dependencies (You can find restrictive upper bounds by visiting &lt;a href=&#34;http://packdeps.haskellers.com/feed?needle=PACKAGENAME&#34;&gt;http://packdeps.haskellers.com/feed?needle=PACKAGENAME&lt;/a&gt;).&lt;/li&gt; &#xA; &lt;li&gt;The package is compatible with the versions of libraries that ship with GHC (&lt;a href=&#34;https://tech.fpcomplete.com/blog/2014/05/lenient-lower-bounds&#34;&gt;more information on lenient lower bounds&lt;/a&gt;).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Full details on how to add and test a package can be found in the &lt;a href=&#34;https://github.com/commercialhaskell/stackage/raw/master/MAINTAINERS.md#adding-a-package&#34;&gt;maintainers agreement&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: There is an approximate 30 minute delay between a package uploading to Hackage and being available to the Github workflow action to check upper bounds. If a pull request is marked as failed due to using an older version, please close and reopen the PR to retrigger a Travis build.&lt;/p&gt; &#xA;&lt;h2&gt;Other repos&lt;/h2&gt; &#xA;&lt;p&gt;The Stackage project consists of multiple repositories. This repository contains the metadata on packages to be included in future builds and some project information. In addition, we have the following repositories:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/fpco/stackage-server&#34;&gt;stackage-server&lt;/a&gt; &lt;a href=&#34;https://github.com/fpco/stackage-server/actions/workflows/base.yml&#34;&gt;&lt;img src=&#34;https://github.com/fpco/stackage-server/actions/workflows/base.yml/badge.svg?sanitize=true&#34; alt=&#34;Base image&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/curator&#34;&gt;curator&lt;/a&gt; &lt;img src=&#34;https://github.com/commercialhaskell/curator/workflows/Runtime%20image/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/lts-haskell&#34;&gt;lts-haskell&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stackage-snapshots/&#34;&gt;stackage-snapshots&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Curious how it all fits together? See the &lt;a href=&#34;https://github.com/commercialhaskell/stackage/raw/master/DATA-FLOW.md&#34;&gt;Stackage data flow&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Build the package set&lt;/h2&gt; &#xA;&lt;p&gt;Generally only the stackage build server run by the stackage curator team and people interested in incorporating stackage snapshots into an OS distribution need to build the entire package set. If you&#39;re interested in trying this yourself, please check out &lt;a href=&#34;https://github.com/commercialhaskell/stackage/raw/master/CURATORS.md&#34;&gt;the curator guide&lt;/a&gt;, though be aware that this is not a recommended practice and there likely will be problems you will need to debug yourself.&lt;/p&gt; &#xA;&lt;h2&gt;Processing&lt;/h2&gt; &#xA;&lt;p&gt;The following describes at a high level the series of steps for processing&lt;/p&gt; &#xA;&lt;h3&gt;Nightlies&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Get list of core packages&lt;/li&gt; &#xA; &lt;li&gt;Get build constraints from list of maintained packages&lt;/li&gt; &#xA; &lt;li&gt;Load up package index&lt;/li&gt; &#xA; &lt;li&gt;Calculate build plan using newest versions of packages&lt;/li&gt; &#xA; &lt;li&gt;Write out a YAML file with complete build plan&lt;/li&gt; &#xA; &lt;li&gt;Verify that the build plan can be compiled&lt;/li&gt; &#xA; &lt;li&gt;Perform the build&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;LTS&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Load up most recent build plan&lt;/li&gt; &#xA; &lt;li&gt;Convert build plan into constraints for next build&lt;/li&gt; &#xA; &lt;li&gt;Continue from step (3) above&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Frequently Asked Questions&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Why is Stackage LTS still on an older version of GHC?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Typically it takes some months from a new major ghc release before the Haskell ecosystem supports it fully enough that we can push it to a new stable Stackage major version release. There can also be ghc regressions that hold up a LTS major release.&lt;/p&gt; &#xA;&lt;p&gt;The lag for minor ghc releases should be less but it still requires extra work and there is usually some delay - this also allows for some community testing before updating LTS.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Why does Stackage have an older version of a package than Hackage?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;There are a number of answers to this question:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Simplest reason: how old of a Stackage snapshot are you using? Once a snapshot is created, it&#39;s frozen for all time. So if you use nightly-2016-01-01, by the time you get to 2018, it will be pretty dated.&lt;/li&gt; &#xA; &lt;li&gt;If you&#39;re using an LTS snapshot: we lock down major versions when first creating an LTS run, so subsequent minor versions will not get new versions necessary. For example, if LTS 6.0 has &lt;code&gt;foo&lt;/code&gt; version 1.2.3, and the author immediately thereafter releases a version 1.3.0 and never releases another 1.2.* version, you&#39;ll never get another update in the LTS 6 line&lt;/li&gt; &#xA; &lt;li&gt;Sometimes we have upper bounds in place because other packages have problems with newer versions of dependencies. Open up the &lt;a href=&#34;https://github.com/commercialhaskell/stackage/raw/master/build-constraints.yaml&#34;&gt;build-constraints file&lt;/a&gt; and search for &#34;Stackage upper bounds&#34;&lt;/li&gt; &#xA; &lt;li&gt;Wired-in packages - those that ship with GHC and cannot be upgraded, and packages depending on them - are fixed to GHC versions. Common examples of this are containers and transformers. There&#39;s a lot more information on this in &lt;a href=&#34;https://tech.fpcomplete.com/blog/2014/05/lenient-lower-bounds&#34;&gt;an FP Complete blog post&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;How long do you maintain an LTS build?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;We only guarantee that we will maintain a single LTS major version at a time, and that it will be maintained for at least three months. This is the &lt;a href=&#34;https://tech.fpcomplete.com/blog/2014/12/backporting-bug-fixes&#34;&gt;originally proposed support window&lt;/a&gt;, and hasn&#39;t changed since then.&lt;/p&gt; &#xA;&lt;p&gt;That said, we do maintain the capability to keep multiple LTS runs operational in parallel, and with LTS 6 and 7 in fact did so. We aren&#39;t changing our guarantees yet on longevity of a release, but are trying to push out the bounds a bit farther.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;What time are Stackage snapshots published?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Stackage Nightly and LTS are not released at a fixed time of day, they get pushed to stackage.org (and the metadata to the stackage-nightly and stackage-lts github repos) when their builds finish on the Stackage build server and the latest built haddocks have been synced over. This time varies greatly depending on build times for package updates, bounds breakage, problems with new packages being added and other build issues, etc. There are days when a release does not happen. LTS releases tend to happen over the weekend or early in the week.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Where to get help regarding uploading packages?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Please ask on the #stackage channel on the &lt;a href=&#34;https://join.slack.com/t/haskell-foundation/shared_invite/zt-mjh76fw0-CEjg2NbyVE8rVQDvR~0F4A&#34;&gt;Haskell Foundation Slack&lt;/a&gt; or open an issue or comment on the PR which uploads the package.&lt;/p&gt;</summary>
  </entry>
</feed>