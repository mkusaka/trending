<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dockerfile Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-05-12T01:31:44Z</updated>
  <subtitle>Daily Trending of Dockerfile in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>leplusorg/openid-connect-provider-debugger</title>
    <updated>2024-05-12T01:31:44Z</updated>
    <id>tag:github.com,2024-05-12:/leplusorg/openid-connect-provider-debugger</id>
    <link href="https://github.com/leplusorg/openid-connect-provider-debugger" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A docker image to test OpenID Connect Providers (OP) using a simple Relying Party (RP).&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;OpenID Connect provider debugger&lt;/h1&gt; &#xA;&lt;p&gt;A docker image to test and troubleshoot OpenID Connect (OIDC) Providers (OP). This containers provides a minimalist Relying Party (RP) with verbose logs enabled including all HTTP requests and responses. Used in conjuction with the network logs of your web browser, it provides a full picture of the OP&#39;s behavior to help understand and troubleshoot the OIDC flow.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/leplusorg/openid-connect-provider-debugger/raw/main/openid-connect-provider-debugger/Dockerfile&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/GitHub-Dockerfile-blue&#34; alt=&#34;Dockerfile&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/leplusorg/openid-connect-provider-debugger/actions?query=workflow:%22Docker%22&#34;&gt;&lt;img src=&#34;https://github.com/leplusorg/openid-connect-provider-debugger/workflows/Docker/badge.svg?sanitize=true&#34; alt=&#34;Docker Build&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/leplusorg/openid-connect-provider-debugger&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/stars/leplusorg/openid-connect-provider-debugger&#34; alt=&#34;Docker Stars&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/leplusorg/openid-connect-provider-debugger&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/pulls/leplusorg/openid-connect-provider-debugger&#34; alt=&#34;Docker Pulls&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/leplusorg/openid-connect-provider-debugger&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/v/leplusorg/openid-connect-provider-debugger?sort=semver&#34; alt=&#34;Docker Version&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Run&lt;/h2&gt; &#xA;&lt;p&gt;To launch the debugger, you will need to get the following information from the OP:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;client ID.&lt;/li&gt; &#xA; &lt;li&gt;client secret.&lt;/li&gt; &#xA; &lt;li&gt;discovery URI (usually something like &lt;a href=&#34;https://www.provider.com/.well-known/openid-configuration&#34;&gt;https://www.provider.com/.well-known/openid-configuration&lt;/a&gt;).&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Also typically your OP will ask you to provide the Redirect URI it should accept (&lt;a href=&#34;http://localhost:8080/login&#34;&gt;http://localhost:8080/login&lt;/a&gt; in our example below).&lt;/p&gt; &#xA;&lt;h3&gt;Using the web UI&lt;/h3&gt; &#xA;&lt;p&gt;Once your have provided and gathered the above information, run the following docker:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run -i -p 8080:80 leplusorg/openid-connect-provider-debugger&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Finally, open &lt;a href=&#34;http://localhost:8080&#34;&gt;http://localhost:8080&lt;/a&gt; in your favorite browser and follow the instruction on the web page.&lt;/p&gt; &#xA;&lt;p&gt;You should be redirected to your OP to begin the authentication flow. Remember that if you are already signed in, you may go through the authentication without any prompt. If you authenticate successfully, you should see a JSON document containing all the information received by the debugger from the OP. You can find more details (including the raw tokens) in the logs printed by the docker container.&lt;/p&gt; &#xA;&lt;p&gt;A successful sign in would result in the display of a JSON document like this one:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;    &#34;options&#34;: {&#xA;        &#34;client_id&#34;: &#34;id&#34;,&#xA;        &#34;discovery&#34;: &#34;http:\/\/192.168.0.1:8081\/realms\/master\/.well-known\/openid-configuration&#34;,&#xA;        &#34;redirect_uri&#34;: &#34;http:\/\/localhost:8080\/login&#34;,&#xA;        &#34;ssl_verify&#34;: &#34;no&#34;,&#xA;        &#34;client_secret&#34;: &#34;835e0717-e0c8-4b57-b044-295fa0e3f61b&#34;&#xA;    },&#xA;    &#34;id_token&#34;: {&#xA;        &#34;azp&#34;: &#34;debugger&#34;,&#xA;        &#34;iat&#34;: 1590619714,&#xA;        &#34;iss&#34;: &#34;http:\/\/192.168.0.1:8081\/realms\/master&#34;,&#xA;        &#34;aud&#34;: &#34;debugger&#34;,&#xA;        &#34;nonce&#34;: &#34;1e23537bb06f2b4e324d12d8d51f2c6b&#34;,&#xA;        &#34;exp&#34;: 1590619774,&#xA;        &#34;jti&#34;: &#34;9a1b5cf6-87ab-4557-a4aa-b771a67af1db&#34;,&#xA;        &#34;sub&#34;: &#34;38b4a290-5332-4c4c-bb8f-46eb2826c7ea&#34;,&#xA;        &#34;email_verified&#34;: false,&#xA;        &#34;acr&#34;: &#34;1&#34;,&#xA;        &#34;preferred_username&#34;: &#34;tom&#34;,&#xA;        &#34;auth_time&#34;: 1590619714,&#xA;        &#34;session_state&#34;: &#34;fb3edcc2-f5b3-47fa-84f6-60cbae792cde&#34;,&#xA;        &#34;typ&#34;: &#34;ID&#34;&#xA;    },&#xA;    &#34;user&#34;: {&#xA;        &#34;email_verified&#34;: false,&#xA;        &#34;preferred_username&#34;: &#34;tom&#34;,&#xA;        &#34;sub&#34;: &#34;38b4a290-5332-4c4c-bb8f-46eb2826c7ea&#34;&#xA;    },&#xA;    &#34;access_token&#34;: &#34;eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJwbjdtd1B1WDZ5ZjBvSHEtTDFiZ2l6T2FVeGs5aDlGaU8ycjlMcV9LYkNRIn0.eyJleHAiOjE1OTA2MTk3NzQsImlhdCI6MTU5MDYxOTcxNCwiYXV0aF90aW1lIjoxNTkwNjE5NzE0LCJqdGkiOiI5MTk0ODgxZS05ZGMzLTQ1YjItOWExOS1mZDFlZTk3NDY4NjciLCJpc3MiOiJodHRwOi8vMTkyLjE2OC4xLjEwOjgwODEvYXV0aC9yZWFsbXMvbWFzdGVyIiwiYXVkIjpbIm1hc3Rlci1yZWFsbSIsImFjY291bnQiXSwic3ViIjoiMzhiNGEyOTAtNTMzMi00YzRjLWJiOGYtNDZlYjI4MjZjN2VhIiwidHlwIjoiQmVhcmVyIiwiYXpwIjoiZGVidWdnZXIiLCJub25jZSI6IjFlMjM1MzdiYjA2ZjJiNGUzMjRkMTJkOGQ1MWYyYzZiIiwic2Vzc2lvbl9zdGF0ZSI6ImZiM2VkY2MyLWY1YjMtNDdmYS04NGY2LTYwY2JhZTc5MmNkZSIsImFjciI6IjEiLCJyZWFsbV9hY2Nlc3MiOnsicm9sZXMiOlsiY3JlYXRlLXJlYWxtIiwib2ZmbGluZV9hY2Nlc3MiLCJhZG1pbiIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsibWFzdGVyLXJlYWxtIjp7InJvbGVzIjpbInZpZXctcmVhbG0iLCJ2aWV3LWlkZW50aXR5LXByb3ZpZGVycyIsIm1hbmFnZS1pZGVudGl0eS1wcm92aWRlcnMiLCJpbXBlcnNvbmF0aW9uIiwiY3JlYXRlLWNsaWVudCIsIm1hbmFnZS11c2VycyIsInF1ZXJ5LXJlYWxtcyIsInZpZXctYXV0aG9yaXphdGlvbiIsInF1ZXJ5LWNsaWVudHMiLCJxdWVyeS11c2VycyIsIm1hbmFnZS1ldmVudHMiLCJtYW5hZ2UtcmVhbG0iLCJ2aWV3LWV2ZW50cyIsInZpZXctdXNlcnMiLCJ2aWV3LWNsaWVudHMiLCJtYW5hZ2UtYXV0aG9yaXphdGlvbiIsIm1hbmFnZS1jbGllbnRzIiwicXVlcnktZ3JvdXBzIl19LCJhY2NvdW50Ijp7InJvbGVzIjpbIm1hbmFnZS1hY2NvdW50IiwibWFuYWdlLWFjY291bnQtbGlua3MiLCJ2aWV3LXByb2ZpbGUiXX19LCJzY29wZSI6Im9wZW5pZCBwcm9maWxlIGVtYWlsIiwiZW1haWxfdmVyaWZpZWQiOmZhbHNlLCJwcmVmZXJyZWRfdXNlcm5hbWUiOiJ0b20ifQ.NCFiSW3Tt7qQCtE8g46kLg-oSqKiDseg4NCwV1kVPoD5yFa9XunooVE3eO1XgKACb_FFzrxEMYfmStpvypI7VFu-XO5ULkrbXElhDtMmVbEn-aqNILHs_h_Ewo1JdCa-gNL9zav5QhmcwmIUpNYsDsQxm-bN86JgQO2f8ZJ497K6DpPFnIrhd0eT0fa4iw7Tx64PdIDUPXqqYrR2nh0P-D0dkkVTSu-EI14uuwwClYy5Pq9EeKfX9M8SqUp81gprhty-9PneDcFjBpEgFRCfFhecSBn0_c1urlx5QTbN96PnCWlH2t-aGLfRHD8oJcv-xztHt02Zhy-L2B3z-bCfSQ&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can use &lt;a href=&#34;https://jwt.io&#34;&gt;https://jwt.io&lt;/a&gt; to decode the access token.&lt;/p&gt; &#xA;&lt;h3&gt;Using URL parameters&lt;/h3&gt; &#xA;&lt;p&gt;If you prefer to skip the UI, you can pass directly the required values as URL parameters using the following syntax: &lt;a href=&#34;http://localhost:8080/debug?oidc_client_id=id&amp;amp;oidc_client_secret=secret&amp;amp;oidc_discovery=http%3A%2F%2F192.168.0.1%3A8081%2Frealms%2Fmaster%2F.well-known%2Fopenid-configuration&amp;amp;oidc_redirect_uri=http://localhost:8080/login&#34;&gt;http://localhost:8080/debug?oidc_client_id=id&amp;amp;oidc_client_secret=secret&amp;amp;oidc_discovery=http%3A%2F%2F192.168.0.1%3A8081%2Frealms%2Fmaster%2F.well-known%2Fopenid-configuration&amp;amp;oidc_redirect_uri=http://localhost:8080/login&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;See section &#34;Parameters&#34; below for a description of each parameter.&lt;/p&gt; &#xA;&lt;p&gt;Remember to URL encode the parameter values if they contain any reserved characters (&#39;&amp;amp;&#39;, &#39;?&#39;, &#39;/&#39; etc.).&lt;/p&gt; &#xA;&lt;h3&gt;Using environment variables&lt;/h3&gt; &#xA;&lt;p&gt;You can pass the parameters to the docker container using environment variales like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run -i -e &#39;oidc_client_id=id&#39; -e &#39;oidc_client_secret=secret&#39; -e &#39;oidc_discovery=http://192.168.0.1:8081/realms/master/.well-known/openid-configuration&#39; -e &#39;oidc_redirect_uri=http://localhost:8080/login&#39; -p 8080:80 leplusorg/openid-connect-provider-debugger&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See section &#34;Parameters&#34; below for a description of each parameter.&lt;/p&gt; &#xA;&lt;p&gt;Then go to &lt;a href=&#34;http://localhost:8080/debug&#34;&gt;http://localhost:8080/debug&lt;/a&gt; to skip the UI and initiate the authentication flow.&lt;/p&gt; &#xA;&lt;h2&gt;Parameters&lt;/h2&gt; &#xA;&lt;p&gt;Settings are passed to the docker image using environment variables (e.g. using the -e command-line option) or directly to NGINX using URL parameters.&lt;/p&gt; &#xA;&lt;h3&gt;oidc_client_id&lt;/h3&gt; &#xA;&lt;p&gt;Description: the OpenID Connect Client ID.&lt;/p&gt; &#xA;&lt;p&gt;Mandatory: yes&lt;/p&gt; &#xA;&lt;p&gt;Default: none&lt;/p&gt; &#xA;&lt;h3&gt;oidc_client_secret&lt;/h3&gt; &#xA;&lt;p&gt;Description: the OpenID Connect Client Secret (WARNING: this sensitive value will appear in the logs of the docker so please do not share your logs without redacting this value).&lt;/p&gt; &#xA;&lt;p&gt;Mandatory: yes&lt;/p&gt; &#xA;&lt;p&gt;Default: none&lt;/p&gt; &#xA;&lt;h3&gt;oidc_discovery&lt;/h3&gt; &#xA;&lt;p&gt;Description: the URI of the OpenID Connect Provider discovery endpoint (usually a URI ending in something like &#34;/.well-known/openid-configuration&#34;).&lt;/p&gt; &#xA;&lt;p&gt;Mandatory: yes&lt;/p&gt; &#xA;&lt;p&gt;Default: none&lt;/p&gt; &#xA;&lt;h3&gt;oidc_redirect_uri&lt;/h3&gt; &#xA;&lt;p&gt;Description: the OpenID Connect redirect URI (typically if you are running the instance locally on port 8080, it would be &lt;a href=&#34;http://localhost:8080/login&#34;&gt;http://localhost:8080/login&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;Mandatory: yes&lt;/p&gt; &#xA;&lt;p&gt;Default: none&lt;/p&gt; &#xA;&lt;h2&gt;Test&lt;/h2&gt; &#xA;&lt;p&gt;To test the debugger (or any other Relying Party), you can use JBoss Keycloak as a local OpenID Connect Provider.&lt;/p&gt; &#xA;&lt;p&gt;Launch Keycloak using the following command (choosing the desired username and password):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run -i -e &#39;KEYCLOAK_ADMIN=admin&#39; -e &#39;KEYCLOAK_ADMIN_PASSWORD=admin&#39; -p 8081:8080 quay.io/keycloak/keycloak:latest start-dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then go to the Keycloak admin console at &lt;a href=&#34;http://localhost:8081/admin/master/console/#/master/clients&#34;&gt;http://localhost:8081/admin/master/console/#/master/clients&lt;/a&gt; and authenticate using the username and password chosen in the above command.&lt;/p&gt; &#xA;&lt;p&gt;Click the &#34;Create&#34; button to create a new client. Choose a client ID and click &#34;Next&#34;. On the next screen, toggle on the Client authentication then click Next again. Then on the final screen you need to provide the &#34;Valid Redirect URIs&#34;. Put here the value &lt;a href=&#34;http://localhost:8080/*&#34;&gt;http://localhost:8080/*&lt;/a&gt; assuming that you will be running the debugger on port 8080 (see &#34;Run&#34; section above for details). Click &#34;Save&#34;. Then go to the &#34;Credentials&#34; tab and copy the client secret.&lt;/p&gt; &#xA;&lt;p&gt;Now you can run the debugger (see &#34;Run&#34; section above for details). The client ID is the value that you just chose when creating the client in Keycloak. The client secret is the value that you copied from the Credentials tab. The OpenID Connect Discovery URL will be &lt;a href=&#34;http://192.168.0.1:8081/realms/master/.well-known/openid-configuration&#34;&gt;http://192.168.0.1:8081/realms/master/.well-known/openid-configuration&lt;/a&gt; where you need to replace the IP address by your local machine network address. You need to use an IP address that works from inside the debugger docker container (for the debugger to be able to connect to the OP to get the discovery metadata and later retrieve the tokens). This is why you can&#39;t use &lt;code&gt;localhost&lt;/code&gt; or &lt;code&gt;127.0.0.1&lt;/code&gt; which the debugger would interpret as itself instead of the provider.&lt;/p&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;p&gt;This project is based on NGINX / OpenResty and all the actual OpenID Connect implementation comes from &lt;a href=&#34;https://github.com/zmartzone/lua-resty-openidc&#34;&gt;https://github.com/zmartzone/lua-resty-openidc&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Alternatives&lt;/h2&gt; &#xA;&lt;p&gt;If all you need is to do a simple test and you do not need to see the details of each HTTP request and response, you can use this online OIDC debugger: &lt;a href=&#34;https://oidcdebugger.com&#34;&gt;https://oidcdebugger.com&lt;/a&gt;. Its source code is available at &lt;a href=&#34;https://github.com/nbarbettini/oidc-debugger&#34;&gt;https://github.com/nbarbettini/oidc-debugger&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Another alternative is the official OpenID Foundation certification tests that can be run online at &lt;a href=&#34;https://op.certification.openid.net:60000&#34;&gt;https://op.certification.openid.net:60000&lt;/a&gt; and &lt;a href=&#34;https://rp.certification.openid.net:8080&#34;&gt;https://rp.certification.openid.net:8080&lt;/a&gt;, the source code being available at &lt;a href=&#34;https://github.com/openid-certification/oidctest&#34;&gt;https://github.com/openid-certification/oidctest&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>