<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dockerfile Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-02-10T01:34:42Z</updated>
  <subtitle>Daily Trending of Dockerfile in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>KopanevPavel/SLAM-Dockers</title>
    <updated>2023-02-10T01:34:42Z</updated>
    <id>tag:github.com,2023-02-10:/KopanevPavel/SLAM-Dockers</id>
    <link href="https://github.com/KopanevPavel/SLAM-Dockers" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Dockerized SOTA SLAM algorithms&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Description&lt;/h1&gt; &#xA;&lt;p&gt;Dockerfiles for some SOTA SLAM algorithms (mainly Visual Inertial Odometry with SLAM capabilities). Compiled images could be found &lt;a href=&#34;https://hub.docker.com/u/kopanev&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The repository is part of the publication which is under consideration in the Journal of Intelligent &amp;amp; Robotic System.&lt;/p&gt; &#xA;&lt;p&gt;Sharafutdinov, D., Griguletskii, M., Kopanev, P., Kurenkov, M., Ferrer, G., Burkov, A., Gonnochenko, A., &amp;amp; Tsetserukou, D. (2021). &lt;strong&gt;Comparison of modern open-source visual SLAM approaches&lt;/strong&gt;. arXiv preprint arXiv:2108.01654. &lt;a href=&#34;https://arxiv.org/pdf/2108.01654.pdf&#34;&gt;PDF&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you use this repo in academic work, please cite:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;@article{sharafutdinov2021comparison,&#xA;  title={Comparison of modern open-source visual SLAM approaches},&#xA;  author={Sharafutdinov, Dinar and Griguletskii, Mark and Kopanev, Pavel and Kurenkov, Mikhail &#xA;          and Ferrer, Gonzalo and Burkov, Aleksey and Gonnochenko, Aleksei and Tsetserukou, Dzmitry},&#xA;  journal={arXiv preprint arXiv:2108.01654},&#xA;  year={2021}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Available algorithms&lt;/h1&gt; &#xA;&lt;p&gt;&lt;em&gt;PS some dockerfiles fail to compile automatically due to the big size or building is in progress&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Kimera&lt;/h2&gt; &#xA;&lt;p&gt;Docker for &lt;a href=&#34;https://github.com/MIT-SPARK/Kimera-VIO-ROS&#34;&gt;Kimera-VIO&lt;/a&gt; - Visual Inertial Odometry with SLAM capabilities and 3D Mesh generation.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/docker/pulls/kopanev/kimera&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://img.shields.io/docker/cloud/automated/kopanev/kimera&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://img.shields.io/docker/cloud/build/kopanev/kimera&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Possible commands (building, pulling, cleaning):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;make help&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run container:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./run.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Maplab&lt;/h2&gt; &#xA;&lt;p&gt;Docker for &lt;a href=&#34;https://github.com/ethz-asl/maplab&#34;&gt;Maplab&lt;/a&gt; - An open visual-inertial mapping framework. Dockerfile was created using &lt;a href=&#34;https://github.com/sofwerx/docker-maplab&#34;&gt;this&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/docker/pulls/kopanev/maplab&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://img.shields.io/docker/cloud/automated/kopanev/maplab&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://img.shields.io/docker/cloud/build/kopanev/maplab&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;To run, use make:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will build and run the docker container with the maplab components.&lt;/p&gt; &#xA;&lt;p&gt;Or you can pull compiled image from Docker Hub:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker pull kopanev/maplab:version3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This version includes CLion and vim for development.&lt;/p&gt; &#xA;&lt;p&gt;Run container using this command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;xhost +&#xA;docker run -v /tmp/.X11-unix:/tmp/.X11-unix -e DISPLAY=$DISPLAY -h $HOSTNAME -v $HOME/.Xauthority:/home/lyonn/.Xauthority kopanev/maplab:version3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;VINS-Mono&lt;/h2&gt; &#xA;&lt;p&gt;Docker for &lt;a href=&#34;https://github.com/HKUST-Aerial-Robotics/VINS-Mono&#34;&gt;VINS-Mono&lt;/a&gt; - A Robust and Versatile Monocular Visual-Inertial State Estimator.&lt;/p&gt; &#xA;&lt;p&gt;You need to put this folder into your project (as it was done in the original repo), or modify Dockerfile (to clone repo into the container)&lt;/p&gt; &#xA;&lt;p&gt;Run container:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;make build&#xA;&#xA;./run.sh LAUNCH_FILE_NAME   # ./run.sh euroc.launch&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;VINS-Fusion&lt;/h2&gt; &#xA;&lt;p&gt;Docker for &lt;a href=&#34;https://github.com/HKUST-Aerial-Robotics/VINS-Fusion&#34;&gt;VINS-Fusion&lt;/a&gt; - An optimization-based multi-sensor state estimator.&lt;/p&gt; &#xA;&lt;p&gt;You need to put this folder into your project (as it was done in the original repo), or modify Dockerfile (to clone repo into the container)&lt;/p&gt; &#xA;&lt;p&gt;Run container:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;make build&#xA;&#xA;# Euroc Monocualr camera + IMU&#xA;./run.sh ~/catkin_ws/src/VINS-Fusion/config/euroc/euroc_mono_imu_config.yaml&#xA;&#xA;# Euroc Stereo cameras + IMU with loop fusion&#xA;./run.sh -l ~/catkin_ws/src/VINS-Fusion/config/euroc/euroc_mono_imu_config.yaml&#xA;&#xA;# KITTI Odometry (Stereo)&#xA;./run.sh -k ~/catkin_ws/src/VINS-Fusion/config/kitti_odom/kitti_config00-02.yaml YOUR_DATASET_FOLDER/sequences/00/&#xA;&#xA;# KITTI Odometry (Stereo) with loop fusion&#xA;./run.sh -kl ~/catkin_ws/src/VINS-Fusion/config/kitti_odom/kitti_config00-02.yaml YOUR_DATASET_FOLDER/sequences/00/&#xA;&#xA;#  KITTI GPS Fusion (Stereo + GPS)&#xA;./run.sh -kg ~/catkin_ws/src/VINS-Fusion/config/kitti_raw/kitti_10_03_config.yaml YOUR_DATASET_FOLDER/2011_10_03_drive_0027_sync/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;OpenVINS&lt;/h2&gt; &#xA;&lt;p&gt;Docker for &lt;a href=&#34;https://github.com/rpng/open_vins&#34;&gt;OpenVINS&lt;/a&gt; - An open source platform for visual-inertial navigation research. Note that this container launches with flag --net=host (gives the container full access to local system services such as D-bus and is therefore considered insecure). ROS master will run on the host PC and will see all topics published in the container.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/docker/pulls/kopanev/openvins&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://img.shields.io/docker/cloud/automated/kopanev/openvins&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://img.shields.io/docker/cloud/build/kopanev/openvins&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Possible commands (building, pulling, cleaning):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;make help&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To run the simulation from the examples:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./run.sh pgeneva_serial_eth.launch&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;VIORB&lt;/h2&gt; &#xA;&lt;p&gt;Docker for &lt;a href=&#34;https://github.com/jingpang/LearnVIORB&#34;&gt;VIORB&lt;/a&gt; - Visual Inertial ORB SLAM based on &lt;a href=&#34;https://github.com/raulmur/ORB_SLAM2&#34;&gt;ORB-SLAM2&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/docker/pulls/kopanev/viorb&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://img.shields.io/docker/cloud/automated/kopanev/viorb&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://img.shields.io/docker/cloud/build/kopanev/viorb&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Possible commands (building, pulling, cleaning):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;make help&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To run the container:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./run.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then inside the container:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;export ROS_PACKAGE_PATH=${ROS_PACKAGE_PATH}:$CATKIN_WS/src/Examples/ROS &#xA;roslaunch ORB_VIO testeuroc.launch&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;OpenVSLAM&lt;/h2&gt; &#xA;&lt;p&gt;Possible commands (building, pulling, cleaning):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;make help&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To run the container:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;xhost +local&#xA;docker run -it --rm -e DISPLAY=$DISPLAY -v /tmp/.X11-unix/:/tmp/.X11-unix:ro ros:openvslam&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;ORB_SLAM2&lt;/h2&gt; &#xA;&lt;p&gt;Pull docker &lt;a href=&#34;https://hub.docker.com/r/youyu/orb_slam2/tags?page=1&amp;amp;ordering=last_updated&#34;&gt;image&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker pull youyu/orb_slam2:ubuntu18&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(&lt;a href=&#34;https://github.com/yuyou/ORB_SLAM2&#34;&gt;this&lt;/a&gt; fork is used)&lt;/p&gt; &#xA;&lt;p&gt;To run the container:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;xhost +local:&#xA;sudo docker run --name orb -it --rm -e DISPLAY=$DISPLAY -v /tmp/.X11-unix:/tmp/.X11-unix:ro \&#xA;youyu/orb_slam2:ubuntu18&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>ublue-os/nvidia</title>
    <updated>2023-02-10T01:34:42Z</updated>
    <id>tag:github.com,2023-02-10:/ublue-os/nvidia</id>
    <link href="https://github.com/ublue-os/nvidia" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Vanilla Fedora Silverblue with Nvidia drivers added&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;nvidia&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/ublue-os/nvidia/actions/workflows/build.yml&#34;&gt;&lt;img src=&#34;https://github.com/ublue-os/nvidia/actions/workflows/build.yml/badge.svg?sanitize=true&#34; alt=&#34;build-ublue&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The purpose of these images is to provide builds of vanilla Fedora with Nvidia drivers built-in. This approach can lead to greater reliability as failures can be caught at the build level instead of the client machine. This also lets us generate individual sets of images for each series of Nvidia drivers, allowing users to remain current with their OS but on an older, known working driver. Performance regression with a recent driver update? Reboot into a known-working driver after one command. That&#39;s the goal!&lt;/p&gt; &#xA;&lt;p&gt;Note: This project is a work-in-progress. You should at a minimum be familiar with the &lt;a href=&#34;https://docs.fedoraproject.org/en-US/fedora-silverblue/&#34;&gt;Fedora documentation&lt;/a&gt; on how to administer an ostree system. This is currently for people who want to help figure this out, so there may be explosions and gnashing of teeth.&lt;/p&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Rebase onto the image&lt;/p&gt; &lt;p&gt;Any system running &lt;code&gt;rpm-ostree&lt;/code&gt; should be able to rebase onto one of the images built in this project:&lt;/p&gt; &lt;p&gt;Note: The image previously titled &#34;nvidia&#34; will not be updated anymore. If you wish to retain the same functionality, switch to &#34;silverblue-nvidia&#34;.&lt;/p&gt; &lt;p&gt;Silverblue:&lt;br&gt; &lt;code&gt;rpm-ostree rebase ostree-unverified-registry:ghcr.io/ublue-os/silverblue-nvidia:latest&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Kinoite:&lt;br&gt; &lt;code&gt;rpm-ostree rebase ostree-unverified-registry:ghcr.io/ublue-os/kinoite-nvidia:latest&lt;/code&gt;&lt;/p&gt; &lt;p&gt;And then reboot.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Set kargs after rebasing&lt;/p&gt; &lt;p&gt;Setting kargs to disable nouveau and enabling nvidia early at boot is &lt;a href=&#34;https://github.com/coreos/rpm-ostree/issues/3738&#34;&gt;currently not supported within container builds&lt;/a&gt;. They must be set after rebasing:&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;rpm-ostree kargs \&#xA;    --append=rd.driver.blacklist=nouveau \&#xA;    --append=modprobe.blacklist=nouveau \&#xA;    --append=nvidia-drm.modeset=1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And then reboot one more time!&lt;/p&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;Enable Secure Boot support&lt;/p&gt; &lt;p&gt;&lt;a href=&#34;https://rpmfusion.org/Howto/Secure%20Boot&#34;&gt;Secure Boot&lt;/a&gt; support for the nvidia kernel modules can be enabled by enrolling the signing key:&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo mokutil --import /etc/pki/akmods/certs/akmods-nvidia.der&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, the key can be enrolled from within this repo:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo mokutil --import ./certs/public_key.der&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Rolling back&lt;/h2&gt; &#xA;&lt;p&gt;To rollback to a specific date, use a date tag:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;   rpm-ostree rebase ostree-unverified-registry:ghcr.io/ublue-os/nvidia:20230128&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Verification&lt;/h2&gt; &#xA;&lt;p&gt;These images are signed with sisgstore&#39;s &lt;a href=&#34;https://docs.sigstore.dev/cosign/overview/&#34;&gt;cosign&lt;/a&gt;. You can verify the signature by downloading the &lt;code&gt;cosign.pub&lt;/code&gt; key from this repo and running the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cosign verify --key cosign.pub ghcr.io/ublue-os/base&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you&#39;re forking this repo you should &lt;a href=&#34;https://docs.github.com/en/actions/security-guides/encrypted-secrets&#34;&gt;read the docs&lt;/a&gt; on keeping secrets in github. You need to &lt;a href=&#34;https://docs.sigstore.dev/cosign/overview/&#34;&gt;generate a new keypair&lt;/a&gt; with cosign. The public key can be in your public repo (your users need it to check the signatures), and you can paste the private key in Settings -&amp;gt; Secrets -&amp;gt; Actions with the name SIGNING_SECRET.&lt;/p&gt; &#xA;&lt;h2&gt;Building locally&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Generate signing keys&lt;/p&gt; &lt;p&gt;Self-generated signing keys in &lt;code&gt;certs/&lt;/code&gt; are required for kernel module signing to succeed:&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ./generate-akmod-key&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;If you are forking this repo, you also need to add the private key to the repository secrets under the name AKMOD_PRIVKEY.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;Build container&lt;/p&gt; &lt;p&gt;A container build can be invoked by simply running:&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ podman build \&#xA;    --file Containerfile \&#xA;    --tag build-test:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;Or to specify the version of Fedora and/or Nvidia driver:&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ podman build \&#xA;    --build-arg FEDORA_MAJOR_VERSION=37 \&#xA;    --build-arg NVIDIA_MAJOR_VERSION=525 \&#xA;    --file Containerfile \&#xA;    --tag build-test:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Acknowledgements&lt;/h2&gt; &#xA;&lt;p&gt;Thanks to Alex Diaz for advice, and who got this working first, check out this repo:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/akdev1l/ostree-images&#34;&gt;https://github.com/akdev1l/ostree-images&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>hmanzur/actions-aws-eb</title>
    <updated>2023-02-10T01:34:42Z</updated>
    <id>tag:github.com,2023-02-10:/hmanzur/actions-aws-eb</id>
    <link href="https://github.com/hmanzur/actions-aws-eb" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Elastic beanstalk cli custom action&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Aws eb cli action&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/hmanzur/actions-aws-eb/workflows/Run%20tests/badge.svg?sanitize=true&#34; alt=&#34;Run tests&#34;&gt; &lt;a href=&#34;https://github.com/hmanzur/actions-aws-eb/raw/master/LICENCE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-MIT-yellow.svg?sanitize=true&#34; alt=&#34;License: MIT&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://githubhackathon.com&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1?label=Github%20Actions%20Hackathon%202020&amp;amp;message=Winner&amp;amp;logo=github&amp;amp;color=%23100637&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This action run &lt;a href=&#34;https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/eb-cli3.html&#34;&gt;eb cli&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Inputs&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;code&gt;command&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Required&lt;/strong&gt; The command to run on cli.&lt;/p&gt; &#xA;&lt;h2&gt;Example usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-YAML&#34;&gt;uses: hmanzur/actions-aws-eb@v1.0.0&#xA;with:&#xA;  command: &#39;deploy ${{ secrets.ENVIRONMENT_NAME }}&#39;&#xA;env:&#xA;  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}&#xA;  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}&#xA;  AWS_DEFAULT_REGION: &#34;us-east-1&#34;&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>