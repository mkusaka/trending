<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dockerfile Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-14T01:43:56Z</updated>
  <subtitle>Daily Trending of Dockerfile in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>hongyonghan/Docker_Microsoft365_E5_Renew_X</title>
    <updated>2022-06-14T01:43:56Z</updated>
    <id>tag:github.com,2022-06-14:/hongyonghan/Docker_Microsoft365_E5_Renew_X</id>
    <link href="https://github.com/hongyonghan/Docker_Microsoft365_E5_Renew_X" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Docker版本的E5调用API续订服务：Microsoft 365 E5 Renew X&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;strong&gt;制作不易，欢迎Star!!!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;切记不要浪费公共资源，如果不需要或者不使用，请一定不要搭建该服务！请一定要做好资料备份工作！&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;本文是基于作者SundayRX提出的E5 调用API续订服务：Microsoft 365 E5 Renew X的基础上提出的Docker版本的E5调用API续订服务。&lt;/p&gt; &#xA;&lt;p&gt;基础的账号注册等过程见SundayRX的博客：&lt;a href=&#34;https://blog.csdn.net/qq_33212020/article/details/119747634&#34;&gt;https://blog.csdn.net/qq_33212020/article/details/119747634&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;本文主要是让小白轻松部署自己的E5续订服务。&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;优点：&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;镜像小，仅仅225M，可以轻松部署在任何配置的服务器上，占用资源小&lt;/li&gt; &#xA; &lt;li&gt;部署方便，仅仅使用一行命令即可完成部署。&lt;/li&gt; &#xA; &lt;li&gt;等等。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;你需要有：&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;有Docker的环境，了解Docker的基本命令（没有也没有关系，可以很快学会）。&lt;/li&gt; &#xA; &lt;li&gt;有一个服务器/群晖NAS等。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;一些Docker环境安装的教程：&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Docker环境搭建：&lt;a href=&#34;https://www.jianshu.com/p/996e08b7976d&#34;&gt;https://www.jianshu.com/p/996e08b7976d&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;史上最全Docker环境安装指南：&lt;a href=&#34;https://zhuanlan.zhihu.com/p/82269806&#34;&gt;https://zhuanlan.zhihu.com/p/82269806&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;为了使得容器更加稳定且好用（小白专用），latest版本中添加了vim等软件，并且更换了基础镜像，会有点大。如果介意，请使用slim版本&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker pull hanhongyong/ms365-e5-renew-x:slim&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;下面部署命令时版本也改为slim版本即可。slim版本仅为225M。 建议使用latest版本，这个版本持续修改完善下去，slim版本仅为资源受限的主机使用。&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;部署步骤&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;安装Docker环境后，下载MS365 E5 Renew X镜像。&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hongyonghan/Docker_Microsoft365_E5_Renew_X/main/README.assets/image-20220211202818966.png&#34; alt=&#34;image-20220211202818966&#34;&gt;&lt;/p&gt; &lt;pre&gt;&lt;code&gt;docker pull hanhongyong/ms365-e5-renew-x:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;运行MS365 E5 Renew X镜像，得到容器。&lt;/p&gt; &lt;pre&gt;&lt;code&gt;docker run -d -p 1066:1066 -e TZ=Asia/Shanghai --name ms365  hanhongyong/ms365-e5-renew-x:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;默认管理员密码为：123456&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;进入容器内部，修改登录密码。 进入容器命令：&lt;/p&gt; &lt;pre&gt;&lt;code&gt;docker exec -it ms365 /bin/bash&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;进入Deploy文件夹：&lt;/p&gt; &lt;pre&gt;&lt;code&gt;cd Deploy&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;修改密码：&lt;/p&gt; &lt;pre&gt;&lt;code&gt;vim Config.xml&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;键盘敲入i键，移动上下左右光标，将123456修改为你想修改的密码。键盘敲入esc键，退出编辑模式，输入:wq!键退出编辑模式。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;服务访问：输入ip:1066.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hongyonghan/Docker_Microsoft365_E5_Renew_X/main/README.assets/image-20220211205438949.png&#34; alt=&#34;image-20220211205438949&#34;&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;5&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;以上就完成了部署。&lt;/p&gt; &lt;p&gt;&lt;strong&gt;定制版&lt;/strong&gt;（定制版为高级操作，主要是为了高级用户分享自己的站点给别人、方便迁移等操作。小白无需使用。）：&lt;/p&gt; &lt;pre&gt;&lt;code&gt;docker run -d -p 1066:1066 -v /root/Docker_Microsoft365_E5_Renew_X/Microsoft365_E5_Renew_X/Deploy:/app/Deploy  hanhongyong/ms365-e5-renew-x:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;其中-p为暴露服务器的端口（前面的1066，可以自行修改）和暴露容器的端口（后面的1066，可以自行修改，这个端口是在Config.xml中指定的开放的端口）；-v为数据卷的挂载，前面的Deploy指的是服务器中的Deploy文件夹（可以修改，但是必须是绝对路径），/app/Deploy指的是容器内的文件夹（不能修改）；--name为容器的名字。&lt;/p&gt; &#xA;&lt;p&gt;备份和迁移：&lt;/p&gt; &#xA;&lt;p&gt;所有的配置文件都放在/app文件路径下，如果您以后有迁移的需要可以用命令将容器中/app路径下的文件复制出来。或者在一开始的时候就可以挂载数据卷到您的之前的全部文件中。如：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run -d -p 1066:1066 -v /root/Docker_Microsoft365_E5_Renew_X/Microsoft365_E5_Renew_X/:/app/ hanhongyong/ms365-e5-renew-x:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;如此便可以实现您所要求的配置文件备份的功能，且您的容器中的文件和服务器主机中文件是一样的。&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;ARM64版本镜像&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker pull hanhongyong/ms365-e5-renew-x:arm&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run -d -p 1066:1066 -e TZ=Asia/Shanghai --name ms365  hanhongyong/ms365-e5-renew-x:arm&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Serverless部署&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;没有服务器的同学们，可以使用koyeb进行部署。点击下面按钮一键部署:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://app.koyeb.com/deploy?type=docker&amp;amp;image=docker.io/hanhongyong/ms365-e5-renew-x&amp;amp;name=web-renew&amp;amp;ports=1066;http;/&#34;&gt;&lt;img src=&#34;https://www.koyeb.com/static/images/deploy/button.svg?sanitize=true&#34; alt=&#34;Deploy to Koyeb&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;koyeb部署:感谢&lt;a href=&#34;https://github.com/hongyonghan/Docker_Microsoft365_E5_Renew_X/issues/5&#34;&gt;gd1214b&lt;/a&gt;提出的解决方案。 具体见文件: &lt;a href=&#34;https://raw.githubusercontent.com/hongyonghan/Docker_Microsoft365_E5_Renew_X/main/ReadMe_Serverless.md&#34;&gt;ReadMe_Serverless.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;注意：类似于heroku和koyeb等云容器平台，都会有重启实例的现象，不过heroku是每天强制重启，koyeb是隔几天重启一次。每次重启都会丢失实例在部署后的所有更改，造成数据丢失。请大家注意。感谢&lt;a href=&#34;https://github.com/hongyonghan/Docker_Microsoft365_E5_Renew_X/issues/15&#34;&gt;ChirmyRam&lt;/a&gt;给出的提醒。&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;开发相关的命令（与部署无关）：&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;##构建镜像&#xA;docker build -t ms365-e5-renew-x .&#xA;docker tag ms365-e5-renew-x:latest hanhongyong/ms365-e5-renew-x:latest&#xA;&#xA;#上传镜像&#xA;docker push hanhongyong/ms365-e5-renew-x:latest&#xA;#登录dockerhub&#xA;docker login&#xA;#使用buildx编译arm架构的镜像&#xA;docker buildx build --push --tag hanhongyong/ms365-e5-renew-x:arm --platform linux/arm64/v8 -f Dockerfile_arm .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;制作不易，欢迎Star!!!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;GitHub:&lt;a href=&#34;https://github.com/hongyonghan/Docker_Microsoft365_E5_Renew_X&#34;&gt;https://github.com/hongyonghan/Docker_Microsoft365_E5_Renew_X&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Dockerhub:&lt;a href=&#34;https://hub.docker.com/r/hanhongyong/ms365-e5-renew-x&#34;&gt;https://hub.docker.com/r/hanhongyong/ms365-e5-renew-x&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;CSDN:&lt;a href=&#34;https://blog.csdn.net/qq_40605167/article/details/122888580&#34;&gt;https://blog.csdn.net/qq_40605167/article/details/122888580&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>linuxserver/docker-jellyfin</title>
    <updated>2022-06-14T01:43:56Z</updated>
    <id>tag:github.com,2022-06-14:/linuxserver/docker-jellyfin</id>
    <link href="https://github.com/linuxserver/docker-jellyfin" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://linuxserver.io&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/linuxserver/docker-templates/master/linuxserver.io/img/linuxserver_medium.png&#34; alt=&#34;linuxserver.io&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://blog.linuxserver.io&#34; title=&#34;all the things you can do with our containers including How-To guides, opinions and much more!&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1.svg?color=94398d&amp;amp;labelColor=555555&amp;amp;logoColor=ffffff&amp;amp;style=for-the-badge&amp;amp;label=linuxserver.io&amp;amp;message=Blog&#34; alt=&#34;Blog&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/YWrKVTn&#34; title=&#34;realtime support / chat with the community and the team.&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/354974912613449730.svg?color=94398d&amp;amp;labelColor=555555&amp;amp;logoColor=ffffff&amp;amp;style=for-the-badge&amp;amp;label=Discord&amp;amp;logo=discord&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discourse.linuxserver.io&#34; title=&#34;post on our community forum.&#34;&gt;&lt;img src=&#34;https://img.shields.io/discourse/https/discourse.linuxserver.io/topics.svg?color=94398d&amp;amp;labelColor=555555&amp;amp;logoColor=ffffff&amp;amp;style=for-the-badge&amp;amp;logo=discourse&#34; alt=&#34;Discourse&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://fleet.linuxserver.io&#34; title=&#34;an online web interface which displays all of our maintained images.&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1.svg?color=94398d&amp;amp;labelColor=555555&amp;amp;logoColor=ffffff&amp;amp;style=for-the-badge&amp;amp;label=linuxserver.io&amp;amp;message=Fleet&#34; alt=&#34;Fleet&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/linuxserver&#34; title=&#34;view the source for all of our repositories.&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1.svg?color=94398d&amp;amp;labelColor=555555&amp;amp;logoColor=ffffff&amp;amp;style=for-the-badge&amp;amp;label=linuxserver.io&amp;amp;message=GitHub&amp;amp;logo=github&#34; alt=&#34;GitHub&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/linuxserver&#34; title=&#34;please consider helping us by either donating or contributing to our budget&#34;&gt;&lt;img src=&#34;https://img.shields.io/opencollective/all/linuxserver.svg?color=94398d&amp;amp;labelColor=555555&amp;amp;logoColor=ffffff&amp;amp;style=for-the-badge&amp;amp;label=Supporters&amp;amp;logo=open%20collective&#34; alt=&#34;Open Collective&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://linuxserver.io&#34;&gt;LinuxServer.io&lt;/a&gt; team brings you another container release featuring:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;regular and timely application updates&lt;/li&gt; &#xA; &lt;li&gt;easy user mappings (PGID, PUID)&lt;/li&gt; &#xA; &lt;li&gt;custom base image with s6 overlay&lt;/li&gt; &#xA; &lt;li&gt;weekly base OS updates with common layers across the entire LinuxServer.io ecosystem to minimise space usage, down time and bandwidth&lt;/li&gt; &#xA; &lt;li&gt;regular security updates&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Find us at:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.linuxserver.io&#34;&gt;Blog&lt;/a&gt; - all the things you can do with our containers including How-To guides, opinions and much more!&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://discord.gg/YWrKVTn&#34;&gt;Discord&lt;/a&gt; - realtime support / chat with the community and the team.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://discourse.linuxserver.io&#34;&gt;Discourse&lt;/a&gt; - post on our community forum.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://fleet.linuxserver.io&#34;&gt;Fleet&lt;/a&gt; - an online web interface which displays all of our maintained images.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/linuxserver&#34;&gt;GitHub&lt;/a&gt; - view the source for all of our repositories.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://opencollective.com/linuxserver&#34;&gt;Open Collective&lt;/a&gt; - please consider helping us by either donating or contributing to our budget&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;&lt;a href=&#34;https://github.com/linuxserver/docker-jellyfin&#34;&gt;linuxserver/jellyfin&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://scarf.sh/gateway/linuxserver-ci/docker/linuxserver%2Fjellyfin&#34;&gt;&lt;img src=&#34;https://scarf.sh/installs-badge/linuxserver-ci/linuxserver%2Fjellyfin?color=94398d&amp;amp;label-color=555555&amp;amp;logo-color=ffffff&amp;amp;style=for-the-badge&amp;amp;package-type=docker&#34; alt=&#34;Scarf.io pulls&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/linuxserver/docker-jellyfin&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/linuxserver/docker-jellyfin.svg?color=94398d&amp;amp;labelColor=555555&amp;amp;logoColor=ffffff&amp;amp;style=for-the-badge&amp;amp;logo=github&#34; alt=&#34;GitHub Stars&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/linuxserver/docker-jellyfin/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/linuxserver/docker-jellyfin.svg?color=94398d&amp;amp;labelColor=555555&amp;amp;logoColor=ffffff&amp;amp;style=for-the-badge&amp;amp;logo=github&#34; alt=&#34;GitHub Release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/linuxserver/docker-jellyfin/packages&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1.svg?color=94398d&amp;amp;labelColor=555555&amp;amp;logoColor=ffffff&amp;amp;style=for-the-badge&amp;amp;label=linuxserver.io&amp;amp;message=GitHub%20Package&amp;amp;logo=github&#34; alt=&#34;GitHub Package Repository&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitlab.com/linuxserver.io/docker-jellyfin/container_registry&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1.svg?color=94398d&amp;amp;labelColor=555555&amp;amp;logoColor=ffffff&amp;amp;style=for-the-badge&amp;amp;label=linuxserver.io&amp;amp;message=GitLab%20Registry&amp;amp;logo=gitlab&#34; alt=&#34;GitLab Container Registry&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://quay.io/repository/linuxserver.io/jellyfin&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1.svg?color=94398d&amp;amp;labelColor=555555&amp;amp;logoColor=ffffff&amp;amp;style=for-the-badge&amp;amp;label=linuxserver.io&amp;amp;message=Quay.io&#34; alt=&#34;Quay.io&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/linuxserver/jellyfin&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/pulls/linuxserver/jellyfin.svg?color=94398d&amp;amp;labelColor=555555&amp;amp;logoColor=ffffff&amp;amp;style=for-the-badge&amp;amp;label=pulls&amp;amp;logo=docker&#34; alt=&#34;Docker Pulls&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/linuxserver/jellyfin&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/stars/linuxserver/jellyfin.svg?color=94398d&amp;amp;labelColor=555555&amp;amp;logoColor=ffffff&amp;amp;style=for-the-badge&amp;amp;label=stars&amp;amp;logo=docker&#34; alt=&#34;Docker Stars&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://ci.linuxserver.io/job/Docker-Pipeline-Builders/job/docker-jellyfin/job/master/&#34;&gt;&lt;img src=&#34;https://img.shields.io/jenkins/build?labelColor=555555&amp;amp;logoColor=ffffff&amp;amp;style=for-the-badge&amp;amp;jobUrl=https%3A%2F%2Fci.linuxserver.io%2Fjob%2FDocker-Pipeline-Builders%2Fjob%2Fdocker-jellyfin%2Fjob%2Fmaster%2F&amp;amp;logo=jenkins&#34; alt=&#34;Jenkins Build&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://ci-tests.linuxserver.io/linuxserver/jellyfin/latest/index.html&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/dynamic/yaml?color=94398d&amp;amp;labelColor=555555&amp;amp;logoColor=ffffff&amp;amp;style=for-the-badge&amp;amp;label=CI&amp;amp;query=CI&amp;amp;url=https%3A%2F%2Fci-tests.linuxserver.io%2Flinuxserver%2Fjellyfin%2Flatest%2Fci-status.yml&#34; alt=&#34;LSIO CI&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://jellyfin.github.io/&#34;&gt;Jellyfin&lt;/a&gt; is a Free Software Media System that puts you in control of managing and streaming your media. It is an alternative to the proprietary Emby and Plex, to provide media from a dedicated server to end-user devices via multiple apps. Jellyfin is descended from Emby&#39;s 3.5.2 release and ported to the .NET Core framework to enable full cross-platform support. There are no strings attached, no premium licenses or features, and no hidden agendas: just a team who want to build something better and work together to achieve it.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://jellyfin.github.io/&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jellyfin/jellyfin-ux/master/branding/SVG/banner-logo-solid.svg?sanitize=true&#34; alt=&#34;jellyfin&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Supported Architectures&lt;/h2&gt; &#xA;&lt;p&gt;We utilise the docker manifest for multi-platform awareness. More information is available from docker &lt;a href=&#34;https://github.com/docker/distribution/raw/master/docs/spec/manifest-v2-2.md#manifest-list&#34;&gt;here&lt;/a&gt; and our announcement &lt;a href=&#34;https://blog.linuxserver.io/2019/02/21/the-lsio-pipeline-project/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Simply pulling &lt;code&gt;lscr.io/linuxserver/jellyfin:latest&lt;/code&gt; should retrieve the correct image for your arch, but you can also pull specific arch images via tags.&lt;/p&gt; &#xA;&lt;p&gt;The architectures supported by this image are:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Architecture&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Available&lt;/th&gt; &#xA;   &lt;th&gt;Tag&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;x86-64&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;amd64-&amp;lt;version tag&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;arm64&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;arm64v8-&amp;lt;version tag&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;armhf&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;arm32v7-&amp;lt;version tag&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Version Tags&lt;/h2&gt; &#xA;&lt;p&gt;This image provides various versions that are available via tags. Please read the descriptions carefully and exercise caution when using unstable or development tags.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Tag&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Available&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;latest&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;Stable Jellyfin releases&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;nightly&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;Nightly Jellyfin releases&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Application Setup&lt;/h2&gt; &#xA;&lt;p&gt;Webui can be found at &lt;code&gt;http://&amp;lt;your-ip&amp;gt;:8096&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;More information can be found on the official documentation &lt;a href=&#34;https://jellyfin.org/docs/general/quick-start.html&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Hardware Acceleration&lt;/h2&gt; &#xA;&lt;h3&gt;Intel&lt;/h3&gt; &#xA;&lt;p&gt;Hardware acceleration users for Intel Quicksync will need to mount their /dev/dri video device inside of the container by passing the following command when running or creating the container:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;--device=/dev/dri:/dev/dri&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;We will automatically ensure the abc user inside of the container has the proper permissions to access this device.&lt;/p&gt; &#xA;&lt;h3&gt;Nvidia&lt;/h3&gt; &#xA;&lt;p&gt;Hardware acceleration users for Nvidia will need to install the container runtime provided by Nvidia on their host, instructions can be found here:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/NVIDIA/nvidia-docker&#34;&gt;https://github.com/NVIDIA/nvidia-docker&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;We automatically add the necessary environment variable that will utilise all the features available on a GPU on the host. Once nvidia-docker is installed on your host you will need to re/create the docker container with the nvidia container runtime &lt;code&gt;--runtime=nvidia&lt;/code&gt; and add an environment variable &lt;code&gt;-e NVIDIA_VISIBLE_DEVICES=all&lt;/code&gt; (can also be set to a specific gpu&#39;s UUID, this can be discovered by running &lt;code&gt;nvidia-smi --query-gpu=gpu_name,gpu_uuid --format=csv&lt;/code&gt; ). NVIDIA automatically mounts the GPU and drivers from your host into the jellyfin docker container.&lt;/p&gt; &#xA;&lt;h3&gt;OpenMAX (Raspberry Pi)&lt;/h3&gt; &#xA;&lt;p&gt;Hardware acceleration users for Raspberry Pi MMAL/OpenMAX will need to mount their &lt;code&gt;/dev/vcsm&lt;/code&gt; and &lt;code&gt;/dev/vchiq&lt;/code&gt; video devices inside of the container and their system OpenMax libs by passing the following options when running or creating the container:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;--device=/dev/vcsm:/dev/vcsm&#xA;--device=/dev/vchiq:/dev/vchiq&#xA;-v /opt/vc/lib:/opt/vc/lib&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;V4L2 (Raspberry Pi)&lt;/h3&gt; &#xA;&lt;p&gt;Hardware acceleration users for Raspberry Pi V4L2 will need to mount their &lt;code&gt;/dev/video1X&lt;/code&gt; devices inside of the container by passing the following options when running or creating the container:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;--device=/dev/video10:/dev/video10&#xA;--device=/dev/video11:/dev/video11&#xA;--device=/dev/video12:/dev/video12&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Here are some example snippets to help you get started creating a container.&lt;/p&gt; &#xA;&lt;h3&gt;docker-compose (recommended, &lt;a href=&#34;https://docs.linuxserver.io/general/docker-compose&#34;&gt;click here for more info&lt;/a&gt;)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;---&#xA;version: &#34;2.1&#34;&#xA;services:&#xA;  jellyfin:&#xA;    image: lscr.io/linuxserver/jellyfin:latest&#xA;    container_name: jellyfin&#xA;    environment:&#xA;      - PUID=1000&#xA;      - PGID=1000&#xA;      - TZ=Europe/London&#xA;      - JELLYFIN_PublishedServerUrl=192.168.0.5 #optional&#xA;    volumes:&#xA;      - /path/to/library:/config&#xA;      - /path/to/tvseries:/data/tvshows&#xA;      - /path/to/movies:/data/movies&#xA;    ports:&#xA;      - 8096:8096&#xA;      - 8920:8920 #optional&#xA;      - 7359:7359/udp #optional&#xA;      - 1900:1900/udp #optional&#xA;    restart: unless-stopped&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;docker cli (&lt;a href=&#34;https://docs.docker.com/engine/reference/commandline/cli/&#34;&gt;click here for more info&lt;/a&gt;)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run -d \&#xA;  --name=jellyfin \&#xA;  -e PUID=1000 \&#xA;  -e PGID=1000 \&#xA;  -e TZ=Europe/London \&#xA;  -e JELLYFIN_PublishedServerUrl=192.168.0.5 `#optional` \&#xA;  -p 8096:8096 \&#xA;  -p 8920:8920 `#optional` \&#xA;  -p 7359:7359/udp `#optional` \&#xA;  -p 1900:1900/udp `#optional` \&#xA;  -v /path/to/library:/config \&#xA;  -v /path/to/tvseries:/data/tvshows \&#xA;  -v /path/to/movies:/data/movies \&#xA;  --restart unless-stopped \&#xA;  lscr.io/linuxserver/jellyfin:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Parameters&lt;/h2&gt; &#xA;&lt;p&gt;Container images are configured using parameters passed at runtime (such as those above). These parameters are separated by a colon and indicate &lt;code&gt;&amp;lt;external&amp;gt;:&amp;lt;internal&amp;gt;&lt;/code&gt; respectively. For example, &lt;code&gt;-p 8080:80&lt;/code&gt; would expose port &lt;code&gt;80&lt;/code&gt; from inside the container to be accessible from the host&#39;s IP on port &lt;code&gt;8080&lt;/code&gt; outside the container.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Parameter&lt;/th&gt; &#xA;   &lt;th&gt;Function&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;-p 8096&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Http webUI.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;-p 8920&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Optional - Https webUI (you need to set up your own certificate).&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;-p 7359/udp&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Optional - Allows clients to discover Jellyfin on the local network.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;-p 1900/udp&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Optional - Service discovery used by DNLA and clients.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;-e PUID=1000&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;for UserID - see below for explanation&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;-e PGID=1000&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;for GroupID - see below for explanation&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;-e TZ=Europe/London&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Specify a timezone to use (e.g. Europe/London).&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;-e JELLYFIN_PublishedServerUrl=192.168.0.5&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Set the autodiscovery response domain or IP address.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;-v /config&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Jellyfin data storage location. &lt;em&gt;This can grow very large, 50gb+ is likely for a large collection.&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;-v /data/tvshows&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Media goes here. Add as many as needed e.g. &lt;code&gt;/data/movies&lt;/code&gt;, &lt;code&gt;/data/tv&lt;/code&gt;, etc.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;-v /data/movies&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Media goes here. Add as many as needed e.g. &lt;code&gt;/data/movies&lt;/code&gt;, &lt;code&gt;/data/tv&lt;/code&gt;, etc.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Environment variables from files (Docker secrets)&lt;/h2&gt; &#xA;&lt;p&gt;You can set any environment variable from a file by using a special prepend &lt;code&gt;FILE__&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;As an example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;-e FILE__PASSWORD=/run/secrets/mysecretpassword&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Will set the environment variable &lt;code&gt;PASSWORD&lt;/code&gt; based on the contents of the &lt;code&gt;/run/secrets/mysecretpassword&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;h2&gt;Umask for running applications&lt;/h2&gt; &#xA;&lt;p&gt;For all of our images we provide the ability to override the default umask settings for services started within the containers using the optional &lt;code&gt;-e UMASK=022&lt;/code&gt; setting. Keep in mind umask is not chmod it subtracts from permissions based on it&#39;s value it does not add. Please read up &lt;a href=&#34;https://en.wikipedia.org/wiki/Umask&#34;&gt;here&lt;/a&gt; before asking for support.&lt;/p&gt; &#xA;&lt;h2&gt;Optional Parameters&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://jellyfin.org/docs/general/networking/index.html&#34;&gt;official documentation for ports&lt;/a&gt; has additional ports that can provide auto discovery.&lt;/p&gt; &#xA;&lt;p&gt;Service Discovery (&lt;code&gt;1900/udp&lt;/code&gt;) - Since client auto-discover would break if this option were configurable, you cannot change this in the settings at this time. DLNA also uses this port and is required to be in the local subnet.&lt;/p&gt; &#xA;&lt;p&gt;Client Discovery (&lt;code&gt;7359/udp&lt;/code&gt;) - Allows clients to discover Jellyfin on the local network. A broadcast message to this port with &#34;Who is Jellyfin Server?&#34; will get a JSON response that includes the server address, ID, and name.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;  -p 7359:7359/udp \&#xA;  -p 1900:1900/udp \&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://jellyfin.org/docs/general/administration/configuration.html&#34;&gt;official documentation for environmentals&lt;/a&gt; has additional environmentals that can provide additional configurability such as migrating to the native Jellyfin image.&lt;/p&gt; &#xA;&lt;h2&gt;User / Group Identifiers&lt;/h2&gt; &#xA;&lt;p&gt;When using volumes (&lt;code&gt;-v&lt;/code&gt; flags) permissions issues can arise between the host OS and the container, we avoid this issue by allowing you to specify the user &lt;code&gt;PUID&lt;/code&gt; and group &lt;code&gt;PGID&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Ensure any volume directories on the host are owned by the same user you specify and any permissions issues will vanish like magic.&lt;/p&gt; &#xA;&lt;p&gt;In this instance &lt;code&gt;PUID=1000&lt;/code&gt; and &lt;code&gt;PGID=1000&lt;/code&gt;, to find yours use &lt;code&gt;id user&lt;/code&gt; as below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  $ id username&#xA;    uid=1000(dockeruser) gid=1000(dockergroup) groups=1000(dockergroup)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Docker Mods&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://mods.linuxserver.io/?mod=jellyfin&#34; title=&#34;view available mods for this container.&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/dynamic/yaml?color=94398d&amp;amp;labelColor=555555&amp;amp;logoColor=ffffff&amp;amp;style=for-the-badge&amp;amp;label=jellyfin&amp;amp;query=%24.mods%5B%27jellyfin%27%5D.mod_count&amp;amp;url=https%3A%2F%2Fraw.githubusercontent.com%2Flinuxserver%2Fdocker-mods%2Fmaster%2Fmod-list.yml&#34; alt=&#34;Docker Mods&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://mods.linuxserver.io/?mod=universal&#34; title=&#34;view available universal mods.&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/dynamic/yaml?color=94398d&amp;amp;labelColor=555555&amp;amp;logoColor=ffffff&amp;amp;style=for-the-badge&amp;amp;label=universal&amp;amp;query=%24.mods%5B%27universal%27%5D.mod_count&amp;amp;url=https%3A%2F%2Fraw.githubusercontent.com%2Flinuxserver%2Fdocker-mods%2Fmaster%2Fmod-list.yml&#34; alt=&#34;Docker Universal Mods&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;We publish various &lt;a href=&#34;https://github.com/linuxserver/docker-mods&#34;&gt;Docker Mods&lt;/a&gt; to enable additional functionality within the containers. The list of Mods available for this image (if any) as well as universal mods that can be applied to any one of our images can be accessed via the dynamic badges above.&lt;/p&gt; &#xA;&lt;h2&gt;Support Info&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Shell access whilst the container is running: &lt;code&gt;docker exec -it jellyfin /bin/bash&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;To monitor the logs of the container in realtime: &lt;code&gt;docker logs -f jellyfin&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;container version number &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;docker inspect -f &#39;{{ index .Config.Labels &#34;build_version&#34; }}&#39; jellyfin&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;image version number &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;docker inspect -f &#39;{{ index .Config.Labels &#34;build_version&#34; }}&#39; lscr.io/linuxserver/jellyfin:latest&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Updating Info&lt;/h2&gt; &#xA;&lt;p&gt;Most of our images are static, versioned, and require an image update and container recreation to update the app inside. With some exceptions (ie. nextcloud, plex), we do not recommend or support updating apps inside the container. Please consult the &lt;a href=&#34;https://raw.githubusercontent.com/linuxserver/docker-jellyfin/master/#application-setup&#34;&gt;Application Setup&lt;/a&gt; section above to see if it is recommended for the image.&lt;/p&gt; &#xA;&lt;p&gt;Below are the instructions for updating containers:&lt;/p&gt; &#xA;&lt;h3&gt;Via Docker Compose&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Update all images: &lt;code&gt;docker-compose pull&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;or update a single image: &lt;code&gt;docker-compose pull jellyfin&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Let compose update all containers as necessary: &lt;code&gt;docker-compose up -d&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;or update a single container: &lt;code&gt;docker-compose up -d jellyfin&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;You can also remove the old dangling images: &lt;code&gt;docker image prune&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Via Docker Run&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Update the image: &lt;code&gt;docker pull lscr.io/linuxserver/jellyfin:latest&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Stop the running container: &lt;code&gt;docker stop jellyfin&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Delete the container: &lt;code&gt;docker rm jellyfin&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Recreate a new container with the same docker run parameters as instructed above (if mapped correctly to a host folder, your &lt;code&gt;/config&lt;/code&gt; folder and settings will be preserved)&lt;/li&gt; &#xA; &lt;li&gt;You can also remove the old dangling images: &lt;code&gt;docker image prune&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Via Watchtower auto-updater (only use if you don&#39;t remember the original parameters)&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Pull the latest image at its tag and replace it with the same env variables in one run:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run --rm \&#xA;-v /var/run/docker.sock:/var/run/docker.sock \&#xA;containrrr/watchtower \&#xA;--run-once jellyfin&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;You can also remove the old dangling images: &lt;code&gt;docker image prune&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; We do not endorse the use of Watchtower as a solution to automated updates of existing Docker containers. In fact we generally discourage automated updates. However, this is a useful tool for one-time manual updates of containers where you have forgotten the original parameters. In the long term, we highly recommend using &lt;a href=&#34;https://docs.linuxserver.io/general/docker-compose&#34;&gt;Docker Compose&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Image Update Notifications - Diun (Docker Image Update Notifier)&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;We recommend &lt;a href=&#34;https://crazymax.dev/diun/&#34;&gt;Diun&lt;/a&gt; for update notifications. Other tools that automatically update containers unattended are not recommended or supported.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Building locally&lt;/h2&gt; &#xA;&lt;p&gt;If you want to make local modifications to these images for development purposes or just to customize the logic:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/linuxserver/docker-jellyfin.git&#xA;cd docker-jellyfin&#xA;docker build \&#xA;  --no-cache \&#xA;  --pull \&#xA;  -t lscr.io/linuxserver/jellyfin:latest .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The ARM variants can be built on x86_64 hardware using &lt;code&gt;multiarch/qemu-user-static&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run --rm --privileged multiarch/qemu-user-static:register --reset&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once registered you can define the dockerfile to use with &lt;code&gt;-f Dockerfile.aarch64&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Versions&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;11.06.22:&lt;/strong&gt; - Switch to upstream repo&#39;s ffmpeg5 build.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;05.01.22:&lt;/strong&gt; - Specify Intel iHD driver versions to avoid mismatched libva errors.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;25.12.21:&lt;/strong&gt; - Fix video device group perms error message.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;10.12.21:&lt;/strong&gt; - Rework readme, disable template sync.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;22.09.21:&lt;/strong&gt; - Pull only the server, web and ffmpeg packages instead of the wrapper.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;23.06.21:&lt;/strong&gt; - Add log message if device permissions are incorrect. Pin jellyfin dependency versions to prevent upstream apt repo issues. Deprecate the &lt;code&gt;bionic&lt;/code&gt; tag.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;21.05.21:&lt;/strong&gt; - Add nvidia.icd file to fix missing tonemapping using Nvidia HW.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;20.01.21:&lt;/strong&gt; - Add Jellyfin Binary Environmentals&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;20.01.21:&lt;/strong&gt; - Deprecate &lt;code&gt;UMASK_SET&lt;/code&gt; in favor of UMASK in baseimage, see above for more information.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;23.11.20:&lt;/strong&gt; - Rebase to Focal, branch off Bionic.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;22.07.20:&lt;/strong&gt; - Ingest releases from Jellyfin repo.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;28.04.20:&lt;/strong&gt; - Replace MMAL/OMX dependency device &lt;code&gt;/dev/vc-mem&lt;/code&gt; with &lt;code&gt;/dev/vcsm&lt;/code&gt; as the former was not sufficient for raspbian.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;11.04.20:&lt;/strong&gt; - Enable hw decode (mmal) on Raspberry Pi, update readme instructions, add donation info, create missing default transcodes folder.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;11.03.20:&lt;/strong&gt; - Add Pi V4L2 support, remove optional transcode mapping (location is selected in the gui, defaults to path under &lt;code&gt;/config&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;30.01.20:&lt;/strong&gt; - Add nightly tag.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;09.01.20:&lt;/strong&gt; - Add Pi OpenMax support.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;02.10.19:&lt;/strong&gt; - Improve permission fixing for render &amp;amp; dvb devices.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;31.07.19:&lt;/strong&gt; - Add AMD drivers for vaapi support on x86.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;13.06.19:&lt;/strong&gt; - Add Intel drivers for vaapi support on x86.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;07.06.19:&lt;/strong&gt; - Initial release.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>wyveo/nginx-php-fpm</title>
    <updated>2022-06-14T01:43:56Z</updated>
    <id>tag:github.com,2022-06-14:/wyveo/nginx-php-fpm</id>
    <link href="https://github.com/wyveo/nginx-php-fpm" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Nginx + PHP-FPM 8.1.x / 8.0.x / 7.4.x / 7.3.x / 7.2.x / 7.1.x / 7.0.x + Composer built on Debian (Bullseye/Buster) image&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://hub.docker.com/r/wyveo/nginx-php-fpm/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/docker%20hub-wyveo%2Fnginx--php--fpm-blue.svg?&amp;amp;logo=docker&amp;amp;style=for-the-badge&#34; alt=&#34;Docker Hub; wyveo/nginx-php-fpm&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/wyveo/nginx-php-fpm/&#34;&gt;&lt;img src=&#34;https://badges.weareopensource.me/docker/pulls/wyveo/nginx-php-fpm?style=for-the-badge&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/wyveo/nginx-php-fpm/&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/image-size/wyveo/nginx-php-fpm/latest?style=for-the-badge&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://nginx.org/en/CHANGES&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/nginx-1.21.6-brightgreen.svg?&amp;amp;logo=nginx&amp;amp;logoColor=white&amp;amp;style=for-the-badge&#34; alt=&#34;nginx 1.21.6&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://secure.php.net/releases/8_1_3.php&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/php--fpm-8.1.3-blue.svg?&amp;amp;logo=php&amp;amp;logoColor=white&amp;amp;style=for-the-badge&#34; alt=&#34;php 8.1.3&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/wyveo/nginx-php-fpm/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-MIT-blue.svg?&amp;amp;style=for-the-badge&#34; alt=&#34;License MIT&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;This is a Dockerfile to build a debian based container image running nginx and php-fpm 8.1.x / 8.0.x / 7.4.x / 7.3.x / 7.2.x / 7.1.x / 7.0.x &amp;amp; Composer.&lt;/p&gt; &#xA;&lt;h3&gt;Versioning&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Docker Tag&lt;/th&gt; &#xA;   &lt;th&gt;GitHub Release&lt;/th&gt; &#xA;   &lt;th&gt;Nginx Version&lt;/th&gt; &#xA;   &lt;th&gt;PHP Version&lt;/th&gt; &#xA;   &lt;th&gt;Debian Version&lt;/th&gt; &#xA;   &lt;th&gt;Composer&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;latest&lt;/td&gt; &#xA;   &lt;td&gt;master Branch&lt;/td&gt; &#xA;   &lt;td&gt;1.21.6&lt;/td&gt; &#xA;   &lt;td&gt;8.1.3&lt;/td&gt; &#xA;   &lt;td&gt;bullseye&lt;/td&gt; &#xA;   &lt;td&gt;2.2.7&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;php81&lt;/td&gt; &#xA;   &lt;td&gt;php81 Branch&lt;/td&gt; &#xA;   &lt;td&gt;1.21.6&lt;/td&gt; &#xA;   &lt;td&gt;8.1.3&lt;/td&gt; &#xA;   &lt;td&gt;bullseye&lt;/td&gt; &#xA;   &lt;td&gt;2.2.7&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;php80&lt;/td&gt; &#xA;   &lt;td&gt;php80 Branch&lt;/td&gt; &#xA;   &lt;td&gt;1.21.6&lt;/td&gt; &#xA;   &lt;td&gt;8.0.16&lt;/td&gt; &#xA;   &lt;td&gt;buster&lt;/td&gt; &#xA;   &lt;td&gt;2.0.13&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;php74&lt;/td&gt; &#xA;   &lt;td&gt;php74 Branch&lt;/td&gt; &#xA;   &lt;td&gt;1.21.6&lt;/td&gt; &#xA;   &lt;td&gt;7.4.28&lt;/td&gt; &#xA;   &lt;td&gt;buster&lt;/td&gt; &#xA;   &lt;td&gt;2.0.13&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;php73&lt;/td&gt; &#xA;   &lt;td&gt;php73 Branch&lt;/td&gt; &#xA;   &lt;td&gt;1.21.6&lt;/td&gt; &#xA;   &lt;td&gt;7.3.33&lt;/td&gt; &#xA;   &lt;td&gt;buster&lt;/td&gt; &#xA;   &lt;td&gt;2.0.13&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;php72&lt;/td&gt; &#xA;   &lt;td&gt;php72 Branch&lt;/td&gt; &#xA;   &lt;td&gt;1.21.6&lt;/td&gt; &#xA;   &lt;td&gt;7.2.34&lt;/td&gt; &#xA;   &lt;td&gt;buster&lt;/td&gt; &#xA;   &lt;td&gt;2.0.13&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;php71&lt;/td&gt; &#xA;   &lt;td&gt;php71 Branch&lt;/td&gt; &#xA;   &lt;td&gt;1.21.6&lt;/td&gt; &#xA;   &lt;td&gt;7.1.33&lt;/td&gt; &#xA;   &lt;td&gt;buster&lt;/td&gt; &#xA;   &lt;td&gt;2.0.13&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;php70&lt;/td&gt; &#xA;   &lt;td&gt;php70 Branch&lt;/td&gt; &#xA;   &lt;td&gt;1.21.6&lt;/td&gt; &#xA;   &lt;td&gt;7.0.33&lt;/td&gt; &#xA;   &lt;td&gt;buster&lt;/td&gt; &#xA;   &lt;td&gt;2.0.13&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Building from source&lt;/h2&gt; &#xA;&lt;p&gt;To build from source you need to clone the git repo and run docker build:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ git clone https://github.com/wyveo/nginx-php-fpm.git&#xA;$ cd nginx-php-fpm&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;followed by&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ docker build -t nginx-php-fpm:php81 . # PHP 8.1.x&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Pulling from Docker Hub&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ docker pull wyveo/nginx-php-fpm:php81&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Running&lt;/h2&gt; &#xA;&lt;p&gt;To run the container:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ sudo docker run -d wyveo/nginx-php-fpm:php81&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Default web root:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;/usr/share/nginx/html&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>