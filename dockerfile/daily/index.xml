<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dockerfile Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-17T01:39:24Z</updated>
  <subtitle>Daily Trending of Dockerfile in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Taiyo-ai/ts-mesh-pipeline</title>
    <updated>2022-06-17T01:39:24Z</updated>
    <id>tag:github.com,2022-06-17:/Taiyo-ai/ts-mesh-pipeline</id>
    <link href="https://github.com/Taiyo-ai/ts-mesh-pipeline" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Use this template repository to write time series data ingestion pipelines&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Data Ingestion Pipeline Template&lt;/h1&gt; &#xA;&lt;p&gt;This repository consists of boilerplate folder structure to write and organize your scripts for a data ingestion pipeline&lt;/p&gt; &#xA;&lt;h2&gt;Folder Structure&lt;/h2&gt; &#xA;&lt;p&gt;The tree diagram below represents a general file structure&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;|--- data_source_name                      &#xA;     |--- deploy                            # pipeline orchestration and configuration of DAGs&#xA;     |    |---dev              &#xA;     |    |---prod&#xA;     |--- src&#xA;          |--- dependencies&#xA;          |    |--- cleaning&#xA;          |    |    |--- __init__.py&#xA;          |    |    |--- cleaner.py         ## Cleaning script here&#xA;          |    |--- geocoding&#xA;          |    |    |--- __init__.py&#xA;          |    |    |--- geocoder.py        ## Geocoding script here&#xA;          |    |--- scraping                # This folder contains all data harvesting scipts&#xA;          |    |    |--- __init__.py&#xA;          |    |    |--- scraper.py         ## Harvesting script here&#xA;          |    |--- standardization&#xA;          |    |    |--- __init__.py&#xA;          |    |    |--- standardizer.py    ## Standardization script here&#xA;          |    |--- utils                   # Utility and helper scipts to be placed here&#xA;          |         |--- __init__.py&#xA;          |--- .dockerignore&#xA;          |--- Dockerfile&#xA;          |--- client.py                    # Master script that connects all the above blocks&#xA;          |--- requirements.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Different Blocks of ETL pipeline&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Scraping/Data Harvesting &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Contains all the scripts that extracts metadata and raw data to be processed further from database, websites, webservices, APIs, etc.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Cleaning &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Treatment missing fields and values&lt;/li&gt; &#xA;   &lt;li&gt;Treatment of duplicate entries&lt;/li&gt; &#xA;   &lt;li&gt;Convert country codes to &lt;code&gt;ISO 3166-1 alpha3&lt;/code&gt; i.e. 3 letter format&lt;/li&gt; &#xA;   &lt;li&gt;Identify region name and region code using the country code&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Geocoding &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Based upon location information available in the data &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Location label&lt;/li&gt; &#xA;     &lt;li&gt;Geo-spatial coordinates&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Missing field can be found either by using geocoding or reverse geocoding with max precision available&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Standardization &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Fields to be strictly in &lt;strong&gt;lower snake casing&lt;/strong&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Taking care of data types and consistency of fields&lt;/li&gt; &#xA;   &lt;li&gt;Standardize fields like &lt;code&gt;sector&lt;/code&gt;, &lt;code&gt;subsector&lt;/code&gt;, &lt;code&gt;domain&lt;/code&gt;, &lt;code&gt;subdomain&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Renaming of field names as per required standards&lt;/li&gt; &#xA;   &lt;li&gt;Manipulation of certain fields and values to meet up the global standards for presentation, analytics and business use of data&lt;/li&gt; &#xA;   &lt;li&gt;Refer to the &lt;a href=&#34;https://docs.google.com/spreadsheets/d/1Zyn0qLI1JdZD-3EQdvpi7twzUUy3vExg80SL3CK6sWI/edit#gid=0&#34;&gt;Global Field Standards&lt;/a&gt; spreadsheet for the standards to be followed&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Note&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Depending upon what fields are already available in the data &lt;code&gt;GEOCODING&lt;/code&gt; step may or may not be required.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;It is recommended that the resultant data after each and every step is stored and backed up for recovery purpose.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Apart from the primary fields listed down in &lt;a href=&#34;https://docs.google.com/spreadsheets/d/1Zyn0qLI1JdZD-3EQdvpi7twzUUy3vExg80SL3CK6sWI/edit#gid=0&#34;&gt;Global Field Standards&lt;/a&gt; spreadsheet, there are several other secondary fields that are to be scraped; given by the data provider for every document that holds significant business importance.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Submission and Evaluation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;For assignment submission guidelines and evaluation criteria refer to the &lt;a href=&#34;https://github.com/Taiyo-ai/ts-mesh-pipeline/wiki&#34;&gt;WIKI&lt;/a&gt; documentation&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Copyright © 2021 Taiyō.ai Inc.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>weltenwort/frigate-synology-dsm7</title>
    <updated>2022-06-17T01:39:24Z</updated>
    <id>tag:github.com,2022-06-17:/weltenwort/frigate-synology-dsm7</id>
    <link href="https://github.com/weltenwort/frigate-synology-dsm7" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Dockerfile and docker-compose file to enable google coral USB accelerators in containers on Synology DSM 7&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;frigate-synology-dsm7&lt;/h1&gt; &#xA;&lt;p&gt;This provides a &lt;code&gt;Dockerfile&lt;/code&gt; (with context) as well as a &lt;code&gt;docker-compose.yml&lt;/code&gt; file to build a &lt;a href=&#34;https://github.com/blakeblackshear/frigate&#34;&gt;frigate&lt;/a&gt; docker image that supports using a Google Coral USB TPU. It is based on the official upstream frigate image but recompiles &lt;code&gt;libusb1&lt;/code&gt; without &lt;code&gt;udev&lt;/code&gt; support.&lt;/p&gt; &#xA;&lt;h2&gt;Usage on the NAS with &lt;code&gt;docker-compose&lt;/code&gt; but without &lt;code&gt;git&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;SSH into the NAS.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Download the compose file:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;wget &#34;https://github.com/weltenwort/frigate-synology-dsm7/raw/main/docker-compose.yml&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Create environment file &lt;code&gt;secrets.env&lt;/code&gt; to inject secrets:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cat &amp;lt;&amp;lt;EOF &amp;gt;secrets.env&#xA;FRIGATE_MQTT_USERNAME=my-frigate-mqtt-username&#xA;FRIGATE_MQTT_PASSWORD=my-frigate-mqtt-password&#xA;FRIGATE_CAMERA_1_RTSP_CREDENTIALS=my-camera-1-username:my-camera-1-password&#xA;FRIGATE_CAMERA_2_RTSP_CREDENTIALS=my-camera-2-username:my-camera-2-password&#xA;EOF&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Create the volume directories (adjust paths if you changed them in the compose file):&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;mkdir -p /volume1/docker/volumes/frigate-0-config&#xA;mkdir -p /volume1/docker/volumes/frigate-0-media&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Edit the &lt;code&gt;docker-compose.yml&lt;/code&gt; file and configure frigate with a config file at &lt;code&gt;/volume1/docker/volumes/frigate-0-config/config.yml&lt;/code&gt; using the env variables. Adjust paths and env vars to match your choices above.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Start the container:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo docker-compose up --detach --force-create&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Usage on the NAS with &lt;code&gt;docker-compose&lt;/code&gt; and &lt;code&gt;git&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;SSH into the NAS.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Clone this repository:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone https://github.com/weltenwort/frigate-synology-dsm7.git&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Create environment file &lt;code&gt;secrets.env&lt;/code&gt; to inject secrets:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cat &amp;lt;&amp;lt;EOF &amp;gt;secrets.env&#xA;FRIGATE_MQTT_USERNAME=my-frigate-mqtt-username&#xA;FRIGATE_MQTT_PASSWORD=my-frigate-mqtt-password&#xA;FRIGATE_CAMERA_1_RTSP_CREDENTIALS=my-camera-1-username:my-camera-1-password&#xA;FRIGATE_CAMERA_2_RTSP_CREDENTIALS=my-camera-2-username:my-camera-2-password&#xA;EOF&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Create the volume directories (adjust paths if you changed them in the compose file):&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;mkdir -p /volume1/docker/volumes/frigate-0-config&#xA;mkdir -p /volume1/docker/volumes/frigate-0-media&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Edit the &lt;code&gt;docker-compose.yml&lt;/code&gt; file and configure frigate with a config file at &lt;code&gt;/volume1/docker/volumes/frigate-0-config/config.yml&lt;/code&gt; using the env variables. Adjust paths and env vars to match your choices above.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Start the container:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo docker-compose up --detach --force-create&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
  <entry>
    <title>AlanTur1ng/Free-VPN-for-Coursera</title>
    <updated>2022-06-17T01:39:24Z</updated>
    <id>tag:github.com,2022-06-17:/AlanTur1ng/Free-VPN-for-Coursera</id>
    <link href="https://github.com/AlanTur1ng/Free-VPN-for-Coursera" rel="alternate"></link>
    <summary type="html">&lt;p&gt;🔑 🔓免费开源的科学上网工具&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;VPN-for-Coursera&lt;/h1&gt; &#xA;&lt;p&gt;科学上网工具：主要是为了解决部分用户在Coursera上遇到的视频无法观看，黑屏，缓冲问题。&lt;br&gt;更多解决方法见： &lt;a href=&#34;https://blog.csdn.net/qq_39521554/article/details/79039548#comments&#34;&gt;Coursera视频无法观看的三种不同解决方法（亲测有效）&lt;/a&gt;&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;VPN工具一：Shadow-SSR-4.0&lt;/h2&gt; &#xA;&lt;h3&gt;使用方法&lt;br&gt;&lt;/h3&gt; &#xA;&lt;br&gt; 第一步：将文件解压缩至本地&#xA;&lt;br&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/Y1ran/JavaSE/raw/master/%E6%95%99%E7%A8%8B%E5%9B%BE%E7%89%87/1.JPG&#34; alt=&#34;步骤一&#34;&gt;&lt;/p&gt; &#xA;&lt;br&gt; 第二步：打开Shadow-ssr-dot-4.0（粉红小飞机图标）&#xA;&lt;br&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/Y1ran/JavaSE/raw/master/%E6%95%99%E7%A8%8B%E5%9B%BE%E7%89%87/2.JPG&#34; alt=&#34;步骤一&#34;&gt;&lt;/p&gt; &#xA;&lt;br&gt; 第三步：在任务栏图标处找到白色小飞机&#xA;&lt;br&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/Y1ran/JavaSE/raw/master/%E6%95%99%E7%A8%8B%E5%9B%BE%E7%89%87/3.JPG&#34; alt=&#34;步骤一&#34;&gt;&lt;/p&gt; &#xA;&lt;br&gt; 第四步：右键白色小飞机，选择import-SSR links from-clipboard &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/Y1ran/JavaSE/raw/master/%E6%95%99%E7%A8%8B%E5%9B%BE%E7%89%87/4.JPG&#34; alt=&#34;步骤一&#34;&gt; &lt;br&gt; &lt;em&gt;执行这一步前请先在项目文件内找到&lt;strong&gt;节点.txt&lt;/strong&gt;并ctrl+C复制里面内容)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;br&gt; 第五步：双击白色小飞机，更改设置如下 &#xA;&lt;br&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/Y1ran/JavaSE/raw/master/%E6%95%99%E7%A8%8B%E5%9B%BE%E7%89%87/Capture.JPG&#34; alt=&#34;步骤一&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;br&gt;此时点击OK进行连接，即可科学上网，除了Coursera还可以上谷歌,FB,INS等网站&lt;/p&gt; &#xA;&lt;h2&gt;VPN工具二：SSTap&lt;/h2&gt; &#xA;&lt;h3&gt;使用方法&lt;br&gt;&lt;/h3&gt; &#xA;&lt;br&gt; 第一步：将文件解压缩至本地&#xA;&lt;br&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/Y1ran/JavaSE/raw/master/%E6%95%99%E7%A8%8B%E5%9B%BE%E7%89%87/5.JPG&#34; alt=&#34;步骤一&#34;&gt;&lt;/p&gt; &#xA;&lt;br&gt; 第二步：打开红色标记图标&#xA;&lt;br&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/Y1ran/JavaSE/raw/master/%E6%95%99%E7%A8%8B%E5%9B%BE%E7%89%87/6.JPG&#34; alt=&#34;步骤一&#34;&gt;&lt;/p&gt; &#xA;&lt;br&gt; 第三步：单击绿色加号，选择第三个选项&#xA;&lt;br&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/Y1ran/JavaSE/raw/master/%E6%95%99%E7%A8%8B%E5%9B%BE%E7%89%87/7.JPG&#34; alt=&#34;步骤一&#34;&gt; &lt;br&gt; &lt;em&gt;执行这一步前请先在项目文件内找到&lt;strong&gt;节点.txt&lt;/strong&gt;并ctrl+C复制里面内容)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;第四步：点击闪电标志进行测试，如果运行正常则如下图所示 &lt;br&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/Y1ran/JavaSE/raw/master/%E6%95%99%E7%A8%8B%E5%9B%BE%E7%89%87/8.JPG&#34; alt=&#34;步骤一&#34;&gt;&lt;/p&gt;</summary>
  </entry>
</feed>