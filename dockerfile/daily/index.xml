<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dockerfile Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-09-09T01:35:41Z</updated>
  <subtitle>Daily Trending of Dockerfile in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>skeeto/w64devkit</title>
    <updated>2022-09-09T01:35:41Z</updated>
    <id>tag:github.com,2022-09-09:/skeeto/w64devkit</id>
    <link href="https://github.com/skeeto/w64devkit" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Portable C and C++ Development Kit for x64 (and x86) Windows&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Portable C and C++ Development Kit for x64 Windows&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/skeeto/w64devkit&#34;&gt;w64devkit&lt;/a&gt; is a Dockerfile that builds from source a small, portable development suite for creating C and C++ applications on and for x64 Windows. See &#34;Releases&#34; for pre-built, ready-to-use kits.&lt;/p&gt; &#xA;&lt;p&gt;Included tools:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://mingw-w64.org/&#34;&gt;Mingw-w64 GCC&lt;/a&gt; : compilers, linker, assembler&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.gnu.org/software/gdb/&#34;&gt;GDB&lt;/a&gt; : debugger&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.gnu.org/software/make/&#34;&gt;GNU Make&lt;/a&gt; : standard build tool&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://frippery.org/busybox/&#34;&gt;busybox-w32&lt;/a&gt; : standard unix utilities, including sh&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.vim.org/&#34;&gt;Vim&lt;/a&gt; : powerful text editor&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/universal-ctags/ctags&#34;&gt;Universal Ctags&lt;/a&gt; : source navigation&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.nasm.us/&#34;&gt;NASM&lt;/a&gt; : x86 assembler&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cppcheck.sourceforge.io/&#34;&gt;Cppcheck&lt;/a&gt; : static code analysis&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The toolchain includes pthreads, C++11 threads, and OpenMP. All included runtime components are static. &lt;strong&gt;Docker/Podman is not required to use the development kit&lt;/strong&gt;. It&#39;s merely a reliable, clean environment for building the kit itself.&lt;/p&gt; &#xA;&lt;h2&gt;Build&lt;/h2&gt; &#xA;&lt;p&gt;First build the image, then run it to produce a distribution .zip file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker build -t w64devkit .&#xA;docker run --rm w64devkit &amp;gt;w64devkit.zip&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This takes about half an hour on modern systems. You will need an internet connection during the first couple minutes of the build.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;The final .zip file contains tools in a typical unix-like configuration. Unzip the contents anywhere. Inside is &lt;code&gt;w64devkit.exe&lt;/code&gt;, which launches a console window with the environment configured and ready to go. It is the easiest way to enter the development environment, and requires no system changes. It also sets two extra environment variables: &lt;code&gt;W64DEVKIT_HOME&lt;/code&gt; to the installation root and &lt;code&gt;W64DEVKIT&lt;/code&gt; to the version.&lt;/p&gt; &#xA;&lt;p&gt;Alternatively, add the &lt;code&gt;bin/&lt;/code&gt; directory to your path. For example, inside a &lt;code&gt;cmd.exe&lt;/code&gt; console or batch script:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;set PATH=c:\path\to\w64devkit\bin;%PATH%&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then to start an interactive unix shell:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sh -l&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Main features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;No installation required. Run it anywhere as any user. Simply delete when no longer needed.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Fully offline. No internet access is ever required or attempted.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;A focus on static linking all runtime components. The runtime is optimized for size.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Trivial to build from source, meaning it&#39;s easy to tweak and adjust any part of the kit for your own requirements.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://nullprogram.com/blog/2021/06/29/&#34;&gt;Complements Go&lt;/a&gt; for cgo and bootstrapping.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Optimized for size&lt;/h2&gt; &#xA;&lt;p&gt;The language runtimes in w64devkit are optimized for size, so it produces particularly small binaries when programs are also optimized for size (&lt;code&gt;-Os&lt;/code&gt;) during compilation. If your program only uses the &lt;code&gt;printf&lt;/code&gt; family of functions with MSVC-compatable directivies (i.e. limited to C89), and you want even smaller binaries, you can avoid embdedding the Mingw-w64&#39;s improved implementation by setting &lt;code&gt;__USE_MINGW_ANSI_STDIO&lt;/code&gt; to 0 before including any headers.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cc -Os -D__USE_MINGW_ANSI_STDIO=0 ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Fortran support&lt;/h2&gt; &#xA;&lt;p&gt;Only C and C++ are included by default, but w64devkit also has full support for Fortran. To build a Fortran compiler, add &lt;code&gt;fortran&lt;/code&gt; to the &lt;code&gt;--enable-languages&lt;/code&gt; lines in the Dockerfile.&lt;/p&gt; &#xA;&lt;h2&gt;Recommended downloadable, offline documentation&lt;/h2&gt; &#xA;&lt;p&gt;With a few exceptions, such as Vim&#39;s built-in documentation (&lt;code&gt;:help&lt;/code&gt;), w64devkit does not include documentation. However, you need not forgo offline documentation alongside your offline development tools. This is a list of recommended, no-cost, downloadable documentation complementing w64devkit&#39;s capabilities. In rough order of importance:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://en.cppreference.com/w/Cppreference:Archives&#34;&gt;cppreference&lt;/a&gt; (HTML), friendly documentation for the C and C++ standard libraries.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://gcc.gnu.org/onlinedocs/&#34;&gt;GCC manuals&lt;/a&gt; (PDF, HTML), to reference GCC features, especially built-ins, intrinsics, and command line switches.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;http://laurencejackson.com/win32/&#34;&gt;Win32 Help File&lt;/a&gt; (CHM) is old, but official, Windows API documentation. Unfortunately much is missing, such as Winsock. (Offline Windows documentation has always been very hard to come by.)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://stackoverflow.com/a/83763&#34;&gt;C and C++ Standards (drafts)&lt;/a&gt; (PDF), for figuring out how corner cases are intended to work.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://software.intel.com/sites/landingpage/IntrinsicsGuide/&#34;&gt;Intel Intrinsics Guide&lt;/a&gt; (interactive HTML), a great resource when working with SIMD intrinsics. (Search for &#34;Download&#34; on the left.)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://www.gnu.org/software/make/manual/&#34;&gt;GNU Make manual&lt;/a&gt; (PDF, HTML)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://sourceware.org/binutils/docs/&#34;&gt;GNU Binutils manuals&lt;/a&gt; (PDF, HTML), particularly &lt;code&gt;ld&lt;/code&gt; and &lt;code&gt;as&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://sourceware.org/gdb/current/onlinedocs/gdb.pdf&#34;&gt;GDB manual&lt;/a&gt; (PDF)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://busybox.net/downloads/BusyBox.txt&#34;&gt;BusyBox man pages&lt;/a&gt; (TXT), though everything here is also available via &lt;code&gt;-h&lt;/code&gt; option inside w64devkit.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://www.nasm.us/docs.php&#34;&gt;NASM manual&lt;/a&gt; (PDF)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://software.intel.com/content/www/us/en/develop/articles/intel-sdm.html&#34;&gt;Intel Software Developer Manuals&lt;/a&gt; (PDF), for referencing x86 instructions, when either studying compiler output with &lt;code&gt;objdump&lt;/code&gt;, or writing assembly with &lt;code&gt;nasm&lt;/code&gt; or &lt;code&gt;as&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Cppcheck tips&lt;/h2&gt; &#xA;&lt;p&gt;Use &lt;code&gt;--library=windows&lt;/code&gt; for programs calling the Win32 API directly, which adds additional checks. In general, the following configuration is a good default for programs developed using w64devkit:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cppcheck --quiet -j$(nproc) --library=windows \&#xA;           --suppress=uninitvar --enable=portability,performance .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A &#34;strict&#34; check that is more thorough, but more false positives:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cppcheck --quiet -j$(nproc) --library=windows \&#xA;      --enable=portability,performance,style \&#xA;      --suppress=uninitvar --suppress=unusedStructMember \&#xA;      --suppress=constVariable --suppress=shadowVariable \&#xA;      --suppress=variableScope --suppress=constParameter \&#xA;      --suppress=shadowArgument --suppress=knownConditionTrueFalse .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Notes&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;$HOME&lt;/code&gt; can be set through the adjacent &lt;code&gt;w64devkit.ini&lt;/code&gt; configuration, and may even be relative to the &lt;code&gt;w64devkit/&lt;/code&gt; directory. This is useful for encapsulating the entire development environment, with home directory, on removable, even read-only, media. Use a &lt;code&gt;.profile&lt;/code&gt; in the home directory to configure the environment further.&lt;/p&gt; &#xA;&lt;p&gt;I&#39;d love to include Git, but unfortunately Git&#39;s build system doesn&#39;t quite support cross-compilation. A decent alternative would be &lt;a href=&#34;http://savannah.nongnu.org/projects/quilt&#34;&gt;Quilt&lt;/a&gt;, but it&#39;s written in Bash and Perl.&lt;/p&gt; &#xA;&lt;p&gt;Neither Address Sanitizer (ASan) nor Thread Sanitizer (TSan) &lt;a href=&#34;http://mingw-w64.org/doku.php/contribute#sanitizers_asan_tsan_usan&#34;&gt;has been ported to Mingw-w64&lt;/a&gt; (&lt;a href=&#34;https://groups.google.com/forum/#!topic/address-sanitizer/q0e5EBVKZT4&#34;&gt;also&lt;/a&gt;), but Undefined Behavior Sanitizer (UBSan) works perfectly under GDB. With both &lt;code&gt;-fsanitize=undefined&lt;/code&gt; and &lt;code&gt;-fsanitize-undefined-trap-on-error&lt;/code&gt;, GDB will &lt;a href=&#34;https://nullprogram.com/blog/2022/06/26/&#34;&gt;break precisely&lt;/a&gt; on undefined behavior, and it does not require linking with libsanitizer.&lt;/p&gt; &#xA;&lt;p&gt;The kit includes a unique &lt;a href=&#34;https://nullprogram.com/blog/2022/07/31/&#34;&gt;&lt;code&gt;debugbreak&lt;/code&gt; command&lt;/a&gt;. It causes all debugee processes to break in the debugger, like using Windows&#39; F12 debugger hotkey. This is especially useful for console subsystem programs.&lt;/p&gt; &#xA;&lt;p&gt;Since the build environment is so stable and predicable, it would be great for the .zip to be reproducible, i.e. builds by different people are bit-for-bit identical. There are multiple reasons why this is not currently the case, the least of which are &lt;a href=&#34;https://tanzu.vmware.com/content/blog/barriers-to-deterministic-reproducible-zip-files&#34;&gt;timestamps in the .zip file&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Licenses&lt;/h2&gt; &#xA;&lt;p&gt;When distributing binaries built using w64devkit, your .exe will include parts of this distribution. For the GCC runtime, including OpenMP, you&#39;re covered by the &lt;a href=&#34;https://www.gnu.org/licenses/gcc-exception-3.1.en.html&#34;&gt;GCC Runtime Library Exception&lt;/a&gt; so you do not need to do anything. However the Mingw-w64 runtime &lt;a href=&#34;https://www.rdegges.com/2016/i-dont-give-a-shit-about-licensing/&#34;&gt;has the usual software license headaches&lt;/a&gt; and you may need to comply with various BSD-style licenses depending on the functionality used by your program: &lt;a href=&#34;https://sourceforge.net/p/mingw-w64/mingw-w64/ci/master/tree/COPYING.MinGW-w64-runtime/COPYING.MinGW-w64-runtime.txt&#34;&gt;MinGW-w64 runtime licensing&lt;/a&gt; and &lt;a href=&#34;https://sourceforge.net/p/mingw-w64/mingw-w64/ci/master/tree/mingw-w64-libraries/winpthreads/COPYING&#34;&gt;winpthreads license&lt;/a&gt;. To make this easy, w64devkit includes the concatenated set of all licenses in the file &lt;code&gt;COPYING.MinGW-w64-runtime.txt&lt;/code&gt;, which should be distributed with your binaries.&lt;/p&gt;</summary>
  </entry>
</feed>