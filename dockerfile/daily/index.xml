<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dockerfile Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-10-27T01:34:46Z</updated>
  <subtitle>Daily Trending of Dockerfile in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>DISIC/DesignGouv-Confiture</title>
    <updated>2022-10-27T01:34:46Z</updated>
    <id>tag:github.com,2022-10-27:/DISIC/DesignGouv-Confiture</id>
    <link href="https://github.com/DISIC/DesignGouv-Confiture" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>arcones/kc-devops-6-cicd-jenkins-system</title>
    <updated>2022-10-27T01:34:46Z</updated>
    <id>tag:github.com,2022-10-27:/arcones/kc-devops-6-cicd-jenkins-system</id>
    <link href="https://github.com/arcones/kc-devops-6-cicd-jenkins-system" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;kc-devops-6-cicd-jenkins-system&lt;/h1&gt; &#xA;&lt;p&gt;Files needed to build a normalized Jenkins instance in AWS&lt;/p&gt; &#xA;&lt;h2&gt;Prepare environment&lt;/h2&gt; &#xA;&lt;h3&gt;1. Instance creation in AWS&lt;/h3&gt; &#xA;&lt;p&gt;Characteristics of the required EC2 instance:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Ubuntu Server 22.04 LTS (HVM), SSD Volume Type&lt;/li&gt; &#xA; &lt;li&gt;Architecture 64-bit (x86)&lt;/li&gt; &#xA; &lt;li&gt;t2.large (2 vCPU, 8GiB memory)&lt;/li&gt; &#xA; &lt;li&gt;Create a key pair to connect with ssh (download the .pem file to your computer)&lt;/li&gt; &#xA; &lt;li&gt;Network settings: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Create security group&lt;/li&gt; &#xA;   &lt;li&gt;Mark Allow SSH traffic from your IP&lt;/li&gt; &#xA;   &lt;li&gt;Mark Allow HTTP (not HTTPS!) traffic from your IP&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Storage: Create 30GiB gp2 root volume (non encrypted)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Once created connect with the machine &amp;gt; go to EC2 dashboard &amp;gt; select the machine just created &amp;gt; connect &amp;gt; ssh client. Follow instructions to connect with it using ssh and the key pair you have created&lt;/p&gt; &#xA;&lt;h3&gt;2. Instance provisioning&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Once inside the ec2 machine, create a file &lt;code&gt;vim 1_machineProvisioning.sh&lt;/code&gt; and copy inside the contents of &lt;a href=&#34;https://raw.githubusercontent.com/arcones/kc-devops-6-cicd-jenkins-system/main/1_machineProvisioning.sh&#34;&gt;1_machineProvisioning.sh&lt;/a&gt;. Save it&lt;/li&gt; &#xA; &lt;li&gt;Repeat the step with the second script. Create a file &lt;code&gt;vim 2_machineProvisioning.sh&lt;/code&gt; and copy inside the contents of &lt;a href=&#34;https://raw.githubusercontent.com/arcones/kc-devops-6-cicd-jenkins-system/main/2_machineProvisioning.sh&#34;&gt;2_machineProvisioning.sh&lt;/a&gt;. Save it&lt;/li&gt; &#xA; &lt;li&gt;Give both files execution permissions with &lt;code&gt;sudo chmod +x 1_machineProvisioning.sh 2_machineProvisioning.sh&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Execute &lt;a href=&#34;https://raw.githubusercontent.com/arcones/kc-devops-6-cicd-jenkins-system/main/1_machineProvisioning.sh&#34;&gt;1_machineProvisioning.sh&lt;/a&gt;. It will ask for confirmation a couple of times, it is normal, just press enter.&lt;/li&gt; &#xA; &lt;li&gt;In the standard output it will appear a line similar to this &lt;code&gt;ssh-rsa &amp;lt;&amp;lt;alpahanumericChain&amp;gt;&amp;gt; jenkins&lt;/code&gt;, copy it and add it to your github account &amp;gt; settings &amp;gt; ssh and gpg keys &amp;gt; new ssh key (add jenkins to the title of the key and paste the public key you just copied in the text field)&lt;/li&gt; &#xA; &lt;li&gt;Then reboot the machine with &lt;code&gt;sudo reboot&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Connect again via ssh&lt;/li&gt; &#xA; &lt;li&gt;Execute &lt;a href=&#34;https://raw.githubusercontent.com/arcones/kc-devops-6-cicd-jenkins-system/main/2_machineProvisioning.sh&#34;&gt;2_machineProvisioning.sh&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;It will prompt for a password to &lt;code&gt;ubuntu&lt;/code&gt; user, set it to something you can remember as will be needed soon&lt;/li&gt; &#xA; &lt;li&gt;Say &#39;yes&#39; when it ask you to save Github identity to known hosts file.&lt;/li&gt; &#xA; &lt;li&gt;docker-compose will be triggered, pick the password jenkins container is showing in the console output&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;3. Jenkins configuration&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Go to AWS ec2 dashboard again &amp;gt; select your instance &amp;gt; Public IPv4 address &amp;gt; copy the IP&lt;/li&gt; &#xA; &lt;li&gt;Open your jenkins in the browser accessing to http:// and the your public IPv4 address. You should see jenkins asking the password you pick from console output, input it&lt;/li&gt; &#xA; &lt;li&gt;Install the following plugin: &lt;code&gt;folders&lt;/code&gt;, &lt;code&gt;ssh build agents&lt;/code&gt;, &lt;code&gt;build timeout&lt;/code&gt;, &lt;code&gt;timestamper&lt;/code&gt;, &lt;code&gt;pipeline&lt;/code&gt;, &lt;code&gt;pipeline: stage view&lt;/code&gt;, &lt;code&gt;git&lt;/code&gt;,&lt;/li&gt; &#xA; &lt;li&gt;Add an &lt;code&gt;admin&lt;/code&gt; user with a password you can remember in the next screen. Leave the URL as it is in the next screen. Initial configuration is done.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;4. Add required credentials&lt;/h3&gt; &#xA;&lt;p&gt;We will need credentials to:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Use our private repos in Github&lt;/li&gt; &#xA; &lt;li&gt;Connect with the docker agents in a distributed build scenario&lt;/li&gt; &#xA; &lt;li&gt;Upload artifacts to Pypi&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Create the key to connect with the agents&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Go to manage jenkins &amp;gt; manage credentials &amp;gt; Stores scoped to Jenkins &amp;gt; System &amp;gt; Global credentials (unrestricted) &amp;gt; Add credentials&lt;/li&gt; &#xA; &lt;li&gt;Place &#34;jenkins&#34; as username and &#34;jenkins&#34; as password. As id set &#34;ssh-agents-key&#34;. Leave the rest with the defaults. Click on create&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Add credentials to connect to Pypi&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Go to manage jenkins &amp;gt; manage credentials &amp;gt; Stores scoped to Jenkins &amp;gt; System &amp;gt; Global credentials (unrestricted) &amp;gt; Add credentials&lt;/li&gt; &#xA; &lt;li&gt;Add your username and password for Pypi. As id set &#34;pypi-credentials&#34;. Leave the rest with the defaults. Click on create&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Create the key to acces github&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Go to manage jenkins &amp;gt; manage credentials &amp;gt; Stores scoped to Jenkins &amp;gt; System &amp;gt; Global credentials (unrestricted) &amp;gt; Add credentials&lt;/li&gt; &#xA; &lt;li&gt;Set the kind to &#34;ssh username with private key&#34;. As id set &#34;ssh-github-key&#34;. Username is &#34;jenkins&#34;. Click on enter directly the private key and, in a terminal connected with the ec2 machine do &lt;code&gt;cat ~/.ssh/id_rsa&lt;/code&gt; which will print the private key. Copy it carefully and provide it to Jenkins. Click on create&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Configure known host strategy&lt;/h4&gt; &#xA;&lt;p&gt;Last we need to configure security to connect with github. We go to manage Jenkins &amp;gt; configure global security &amp;gt; Git Host Key Verification Configuration &amp;gt; Accept First connection&lt;/p&gt; &#xA;&lt;h3&gt;5. Add docker cloud and agents&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Go to Manage Jenkins &amp;gt; Manage plugins &amp;gt; Available tab &amp;gt; Install &lt;code&gt;Job DSL&lt;/code&gt; and &lt;code&gt;docker&lt;/code&gt; with restart&lt;/li&gt; &#xA; &lt;li&gt;As the restart kills our container, you will need to go to the terminal you have opened with the EC2 machine a run &lt;code&gt;cd kc-devops-6-cicd-jenkins-system/ &amp;amp;&amp;amp; docker-compose up&lt;/code&gt; again&lt;/li&gt; &#xA; &lt;li&gt;We then refresh the browser, Jenkins will be asking for the admin password, sign in there&lt;/li&gt; &#xA; &lt;li&gt;Go to Manage Jenkins &amp;gt; Manage Nodes and Clouds &amp;gt; Configure Clouds&lt;/li&gt; &#xA; &lt;li&gt;Add new cloud &amp;gt; docker&lt;/li&gt; &#xA; &lt;li&gt;Docker cloud details &amp;gt; In the the Docker Host URI put tcp://172.17.0.1:4243&lt;/li&gt; &#xA; &lt;li&gt;Click on test connection, it should show some versions&lt;/li&gt; &#xA; &lt;li&gt;Mark the checkbox enabled&lt;/li&gt; &#xA; &lt;li&gt;Click on docker agent templates &amp;gt; add docker agent template&lt;/li&gt; &#xA; &lt;li&gt;Fill the following fields: labels is &#34;base&#34;, name is &#34;base&#34;, mark the checkbox enabled.&lt;/li&gt; &#xA; &lt;li&gt;In the docker image field you can use you base-jenkins-agent image in docker hub. So the field should be set as yourUserOfDockerHub/base-jenkins-agent&lt;/li&gt; &#xA; &lt;li&gt;In Remote File System Root place &#34;/home/jenkins&#34;&lt;/li&gt; &#xA; &lt;li&gt;In Usage select &#34;Only build jobs with label expression matching this node&#34;&lt;/li&gt; &#xA; &lt;li&gt;In connect method select &#34;Connect with SSH&#34;&lt;/li&gt; &#xA; &lt;li&gt;In SSH Key select &#34;Use configured SSH credentials&#34;&lt;/li&gt; &#xA; &lt;li&gt;In SSH Credentials select &#34;jenkins/*****&#34;&lt;/li&gt; &#xA; &lt;li&gt;In Host Key Verification Strategy select &#34;Non Verification Strategy&#34;&lt;/li&gt; &#xA; &lt;li&gt;Click on Save at the bottom&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;6. Ensure everything is working&lt;/h3&gt; &#xA;&lt;p&gt;Let&#39;s create in this instance with JobDSL the job we used to have:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Go to new item &amp;gt; Set 0.Seed as name &amp;gt; freestyle project &amp;gt; OK&lt;/li&gt; &#xA; &lt;li&gt;Mark the checkbox &lt;code&gt;Add timestamps to the Console Output&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;In Build Steps &amp;gt; Process Job DSLs&lt;/li&gt; &#xA; &lt;li&gt;Mark the radio button &#34;Use the provided DSL script&#34; and enter in the text field the contents of &lt;a href=&#34;https://raw.githubusercontent.com/arcones/kc-devops-6-cicd-jenkins-system/main/job.dsl&#34;&gt;job.dsl&lt;/a&gt; &lt;strong&gt;with the SSH URL of your repo with Jenkinsfile&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Click on save and run the job 0.Seed in the button &#34;Build now&#34;. It will fail for script approval missing.&lt;/li&gt; &#xA; &lt;li&gt;Go to Manage Jenkins &amp;gt; In-process Script Approval and approve the script&lt;/li&gt; &#xA; &lt;li&gt;Run again the 0.Seed&lt;/li&gt; &#xA; &lt;li&gt;A GithubExample multribranch job will appear, open it&lt;/li&gt; &#xA; &lt;li&gt;Click on &#34;Scan Multibranch Pipeline Now&#34; so the main branch appear&lt;/li&gt; &#xA; &lt;li&gt;Enter on the main branch&lt;/li&gt; &#xA; &lt;li&gt;Click on &#34;Build now&#34;. It should run a process of which certain steps are green and others are red&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Jenkins structure and builds generated by JobDSL&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/arcones/kc-devops-6-cicd-jenkins-system/main/Diagram.png&#34; alt=&#34;Diagram&#34;&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>contino/docker-aws-cdk</title>
    <updated>2022-10-27T01:34:46Z</updated>
    <id>tag:github.com,2022-10-27:/contino/docker-aws-cdk</id>
    <link href="https://github.com/contino/docker-aws-cdk" rel="alternate"></link>
    <summary type="html">&lt;p&gt;🐳 Containerized AWS CDK on alpine to avoid having to install CLI on Dev or CI/CD machines.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Docker AWS CDK&lt;/h1&gt; &#xA;&lt;p&gt;Containerised AWS CDK to ensure consistent local development and simple CD pipelines.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Run as a command using &lt;code&gt;cdk&lt;/code&gt; as entrypoint:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run --rm --entrypoint cdk contino/aws-cdk --version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run as a shell and mount &lt;code&gt;.aws&lt;/code&gt; folder and current directory as volumes:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run --rm -it -v ~/.aws:/root/.aws -v $(pwd):/opt/app contino/aws-cdk bash&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Using docker-compose:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cdk:&#xA;    image: contino/aws-cdk&#xA;    env_file: .env&#xA;    entrypoint: aws&#xA;    working_dir: /opt/app&#xA;    volumes:&#xA;    - ~/.aws:/root/.aws&#xA;    - .:/opt/app:rw&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And run &lt;code&gt;docker-compose run cdk --version&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Language Support&lt;/h2&gt; &#xA;&lt;p&gt;CDK Supports different languages to define your (re)usable assets.&lt;/p&gt; &#xA;&lt;h3&gt;JavaScript/TypeScript&lt;/h3&gt; &#xA;&lt;p&gt;This should work out of the box through &lt;code&gt;package.json&lt;/code&gt; and &lt;code&gt;node_modules&lt;/code&gt;, which are automatically &lt;em&gt;cached&lt;/em&gt; in your working directory.&lt;/p&gt; &#xA;&lt;h3&gt;Python&lt;/h3&gt; &#xA;&lt;p&gt;This image ships with Python 3 installed. To cache installed cdk python packages, &lt;code&gt;site-packages&lt;/code&gt; is exposed as a volume. This allows you to cache packages between invocations:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cdk:&#xA;    ...&#xA;    volumes:&#xA;    - cdk-python:/usr/lib/python3.7/site-packages/&#xA;    - ...&#xA;volumes:&#xA;    cdk-python&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, if you install e.g. &lt;code&gt;aws-cdk.core&lt;/code&gt; through pip (&lt;code&gt;pip3 install aws-cdk.core&lt;/code&gt;) in a container, you won&#39;t have to install it again next time you start a new container.&lt;/p&gt; &#xA;&lt;h3&gt;Java&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Not supported in this image yet&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Build&lt;/h2&gt; &#xA;&lt;p&gt;Update the &lt;code&gt;AWS_CDK_VERSION&lt;/code&gt; in both &lt;code&gt;Makefile&lt;/code&gt; and &lt;code&gt;Dockerfile&lt;/code&gt;. The run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Docker Hub will automatically trigger a new build.&lt;/p&gt; &#xA;&lt;h2&gt;Updates&lt;/h2&gt; &#xA;&lt;p&gt;To update this container with a newer version of the AWS CDK:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Update the Dockerfile with the new AWS CDK version number&lt;/li&gt; &#xA; &lt;li&gt;Update the Dockerfile with a new Alpine container version (if applicable)&lt;/li&gt; &#xA; &lt;li&gt;Update the Makefile with the new AWS CDK version number&lt;/li&gt; &#xA; &lt;li&gt;Submit pull request and get approved&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Related Projects&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/contino/docker-aws-cli&#34;&gt;docker-aws-cli&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/contino/docker-terraform&#34;&gt;docker-terraform&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>