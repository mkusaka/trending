<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dockerfile Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-06-02T01:34:20Z</updated>
  <subtitle>Daily Trending of Dockerfile in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>bell-sw/Liberica</title>
    <updated>2023-06-02T01:34:20Z</updated>
    <id>tag:github.com,2023-06-02:/bell-sw/Liberica</id>
    <link href="https://github.com/bell-sw/Liberica" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Free and 100% open source Progressive Java Runtime for modern Javaâ„¢ deployments supported by a leading OpenJDK contributor&lt;/p&gt;&lt;hr&gt;&lt;p&gt;BellSoft Liberica JDK is a build of OpenJDK that is tested and verified to be compliant with the Java SE specification using OpenJDK Technology Compatibility Kit test suite for Linux, Windows, macOS, and Solaris operating systems. The distribution includes Server, Client, and Minimal JVMs.&lt;/p&gt; &#xA;&lt;p&gt;For more information, check out the &lt;a href=&#34;https://bell-sw.com/pages/libericajdk/&#34;&gt;Liberica JDK product page&lt;/a&gt;, or download it directly &lt;a href=&#34;https://bell-sw.com/pages/downloads/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Alpine, Centos, and Debian Docker official images of BellSoft Liberica JDK are available in &lt;a href=&#34;https://registry.hub.docker.com/u/bellsoft&#34;&gt;Docker Hub&lt;/a&gt; in the following repositories:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://registry.hub.docker.com/r/bellsoft/liberica-openjdk-alpine-musl&#34;&gt;https://registry.hub.docker.com/r/bellsoft/liberica-openjdk-alpine-musl&lt;/a&gt; (musl-based)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://registry.hub.docker.com/r/bellsoft/liberica-openjdk-alpine&#34;&gt;https://registry.hub.docker.com/r/bellsoft/liberica-openjdk-alpine&lt;/a&gt; (glibc-based)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://registry.hub.docker.com/r/bellsoft/liberica-openjdk-centos&#34;&gt;https://registry.hub.docker.com/r/bellsoft/liberica-openjdk-centos&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://registry.hub.docker.com/r/bellsoft/liberica-openjdk-debian&#34;&gt;https://registry.hub.docker.com/r/bellsoft/liberica-openjdk-debian&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Provided by BellSoft: &lt;a href=&#34;https://bell-sw.com&#34;&gt;https://bell-sw.com&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>ebpfdev/explorer</title>
    <updated>2023-06-02T01:34:20Z</updated>
    <id>tag:github.com,2023-06-02:/ebpfdev/explorer</id>
    <link href="https://github.com/ebpfdev/explorer" rel="alternate"></link>
    <summary type="html">&lt;p&gt;eBPF explorer lets you see all the maps and programs in eBPF subsystem&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;eBPF explorer&lt;/h1&gt; &#xA;&lt;p&gt;eBPF is a web application that lets you explore eBPF subsystem of your Linux host.&lt;/p&gt; &#xA;&lt;p&gt;Explorer consists of two parts: an agent with GraphQL API and a web interface. It is currently shipped as a single container. But you can also run them separately.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ebpfdev/dev-agent&#34;&gt;ebpfdev/dev-agent&lt;/a&gt;, MIT license&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ebpfdev/explorer-ui&#34;&gt;ebpfdev/explorer-ui&lt;/a&gt;, MIT license&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Docker image should be run with &lt;code&gt;--privileged&lt;/code&gt; flag to allow it to access eBPF subsystem.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker run -ti --rm --privileged -p 8070:80 ghcr.io/ebpfdev/explorer:main&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Links:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://localhost:8070&#34;&gt;http://localhost:8070&lt;/a&gt; - web interface&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://localhost:8070/dev-agent&#34;&gt;http://localhost:8070/dev-agent&lt;/a&gt; - Agent&#39;s GraphQL web client&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Demo&lt;/h1&gt; &#xA;&lt;p&gt;Run the explorer as described above and open &lt;a href=&#34;http://localhost:8070&#34;&gt;http://localhost:8070&lt;/a&gt; in your browser.&lt;/p&gt; &#xA;&lt;p&gt;You should see a file tree view with a list of eBPF programs and maps:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ebpfdev/explorer/main/docs/pics/00-start.png&#34; alt=&#34;List of maps&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Let&#39;s use &lt;a href=&#34;https://github.com/iovisor/bpftrace&#34;&gt;bpftrace&lt;/a&gt; to track amount of data read by each process:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ sudo bpftrace -e &#39;tracepoint:syscalls:sys_exit_read /args-&amp;gt;ret/ { @[comm] = sum(args-&amp;gt;ret); }&#39;&#xA;Attaching 1 probe...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once you run it, list will be automatically updated:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ebpfdev/explorer/main/docs/pics/01-list-with-bpftrace.png&#34; alt=&#34;A list of maps containing two new maps&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;...&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ebpfdev/explorer/main/docs/pics/02-list-with-sys_exit_read.png&#34; alt=&#34;A list of programs with the new sys_exit_read&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Let&#39;s examine the &lt;code&gt;sys_exit_read&lt;/code&gt; program:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ebpfdev/explorer/main/docs/pics/03-sys_exit_read-page.png&#34; alt=&#34;sys_exit_read program page&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;We can see that this new program is bounded to the new map &lt;code&gt;AT_&lt;/code&gt;. Which probably means that it contains state of &lt;code&gt;@&lt;/code&gt; variable of a generated by &lt;code&gt;bpftrace&lt;/code&gt; program.&lt;/p&gt; &#xA;&lt;p&gt;There is also &lt;code&gt;printf&lt;/code&gt; map of type PerfEventArray. It is probably used by &lt;code&gt;printf()&lt;/code&gt; invocation within &lt;code&gt;bpftrace&lt;/code&gt; programs and created regardless of whatever you actually use it or not.&lt;/p&gt; &#xA;&lt;p&gt;We can also examine current state of the &lt;code&gt;AT_&lt;/code&gt; map, it is &#34;Hash per CPU&#34; type of map, so we will see as many columns with values as amount of CPU cores we have:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ebpfdev/explorer/main/docs/pics/04-at-map-page.png&#34; alt=&#34;Page of the AT map&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;It is probably better to switch representation of keys and values to string and number accordingly:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ebpfdev/explorer/main/docs/pics/05-at-map-page-repr.png&#34; alt=&#34;Page of the AT map with different representation&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;p&gt;list of eBPF programs + details page&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;p&gt;list of eBPF maps + details page&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;p&gt;showing bounded maps of a programs (and vice versa)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;p&gt;showing map content&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Hash (+ per CPU)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Array (+ per CPU)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; others are planned&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;p&gt;program introspection&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; eBPF bytecode&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; JIT disassembly&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;p&gt;visualization of map&#39;s content&lt;/p&gt; &lt;p&gt;Like plotting a chart of values of maps keys&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;p&gt;program execution profiling&lt;/p&gt; &lt;p&gt;I plan to keep track of duration/number of executions of a programs provided by kernel to draw nice charts&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;p&gt;cluster support&lt;/p&gt; &lt;p&gt;To traverse over a cluster of agents within a single interface&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Feedback and suggestions are welcome in &lt;a href=&#34;https://github.com/ebpfdev/explorer/issues&#34;&gt;GitHub Issues&lt;/a&gt; or via &lt;a href=&#34;mailto:alex@hsslb.ch&#34;&gt;alex@hsslb.ch&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>runpod-workers/worker-a1111</title>
    <updated>2023-06-02T01:34:20Z</updated>
    <id>tag:github.com,2023-06-02:/runpod-workers/worker-a1111</id>
    <link href="https://github.com/runpod-workers/worker-a1111" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Automatic1111 serverless worker.&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h1&gt;Automatic1111 | Worker&lt;/h1&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/runpod-workers/worker-template/actions/workflows/CI-test_worker.yml&#34;&gt;&lt;img src=&#34;https://github.com/runpod-workers/worker-template/actions/workflows/CI-test_worker.yml/badge.svg?sanitize=true&#34; alt=&#34;CI | Test Worker&#34;&gt;&lt;/a&gt; &amp;nbsp; &lt;a href=&#34;https://github.com/runpod-workers/worker-template/actions/workflows/CD-docker_dev.yml&#34;&gt;&lt;img src=&#34;https://github.com/runpod-workers/worker-template/actions/workflows/CD-docker_dev.yml/badge.svg?sanitize=true&#34; alt=&#34;Docker Image&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;This worker is a RunPod worker that uses the Stable Diffusion model for AI tasks. The worker is built upon the Stable Diffusion WebUI, which is a user interface for Stable Diffusion AI models.&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Model&lt;/h2&gt; &#xA;&lt;p&gt;The worker uses the Stable Diffusion model, which has been optimized for RunPod. This model is stored as a SafeTensors file, which is a format that facilitates efficient loading and execution of AI models. You may download the model file from the following link: here.&lt;/p&gt; &#xA;&lt;h2&gt;Building the Worker&lt;/h2&gt; &#xA;&lt;p&gt;The worker is built using a Dockerfile. The Dockerfile specifies the base image, environment variables, system package dependencies, Python dependencies, and the steps to install and setup the Stable Diffusion WebUI. It also downloads the model and sets up the API server using supervisor.&lt;/p&gt; &#xA;&lt;p&gt;The Python dependencies are specified in requirements.txt. The primary dependency is runpod==0.9.4.&lt;/p&gt; &#xA;&lt;h2&gt;Running the Worker&lt;/h2&gt; &#xA;&lt;p&gt;The worker can be run using the start.sh script. This script starts the init system and runs the serverless handler script.&lt;/p&gt; &#xA;&lt;h2&gt;API&lt;/h2&gt; &#xA;&lt;p&gt;The worker provides an API for inference. The API is set up using supervisor, and the configuration is specified in webui_api.conf. The API runs on port 3000.&lt;/p&gt; &#xA;&lt;h2&gt;Serverless Handler&lt;/h2&gt; &#xA;&lt;p&gt;The serverless handler (rp_handler.py) is a Python script that handles inference requests. It defines a function handler(event) that takes an inference request, runs the inference using the Stable Diffusion model, and returns the output.&lt;/p&gt;</summary>
  </entry>
</feed>