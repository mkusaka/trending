<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dockerfile Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-06T01:43:00Z</updated>
  <subtitle>Daily Trending of Dockerfile in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>HaveAGitGat/Tdarr</title>
    <updated>2022-06-06T01:43:00Z</updated>
    <id>tag:github.com,2022-06-06:/HaveAGitGat/Tdarr</id>
    <link href="https://github.com/HaveAGitGat/Tdarr" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Tdarr - Distributed transcode automation using FFmpeg/HandBrake + Audio/Video library analytics + video health checking (Windows, macOS, Linux &amp; Docker)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Tdarr V2: Distributed Transcoding System&lt;/h1&gt; &#xA;&lt;p&gt;Audio/Video Library Analytics &amp;amp; Transcode/Remux Automation&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://storage.googleapis.com/tdarr/media/images/banner-systems.png&#34;&gt; &lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;FFmpeg/HandBrake + video health checking (Windows, macOS, Linux &amp;amp; Docker)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.reddit.com/r/Tdarr/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Reddit-Tdarr-orange&#34; alt=&#34;Reddit&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://discord.gg/GF8X8cq&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Discord-Chat-green.svg?sanitize=true&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt; &lt;a href=&#34;https://tdarr.io/docs/installation&#34; target=&#34;_blank&#34;&gt;Setup/Installation&lt;/a&gt; &lt;/h2&gt; &#xA;&lt;h2&gt;About:&lt;/h2&gt; More information can be found on the following websites: &#xA;&lt;p&gt;&lt;a href=&#34;https://tdarr.io/&#34;&gt;https://tdarr.io/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://docs.tdarr.io/&#34;&gt;https://docs.tdarr.io/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Tdarr V2 is a cross-platform conditional based transcoding application for automating media library transcode/remux management in order to process your media files as required. For example, you can set rules for the required codecs, containers, languages etc that your media should have which helps keeps things organized and can increase compatability with your devices. A common use for Tdarr is to simply convert video files from h264 to h265 (hevc), saving 40%-50% in size.&lt;/p&gt; &#xA;&lt;p&gt;The application is in the form of a click-to-run web-app, comprised of the following 2 components:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Tdarr_Server - Central process which all Nodes connect with&lt;/li&gt; &#xA; &lt;li&gt;Tdarr_Node - Processes running on same/other devices which collect tasks from the Server&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Put your spare hardware to use with Tdarr Nodes for Windows, Linux (including Linux arm/arm64) and macOS.&lt;/p&gt; &#xA;&lt;p&gt;Designed to work alongside applications like Sonarr/Radarr and built with the aim of modularisation, parallelisation and scalability, each library you add has its own transcode settings, filters and schedule. Workers can be fired up and closed down as necessary, and are split into 4 types - Transcode CPU/GPU and Health Check CPU/GPU. Worker limits can be managed by the scheduler as well as manually. For a desktop application with similar functionality please see &lt;a href=&#34;https://github.com/HaveAGitGat/HBBatchBeast&#34;&gt;HBBatchBeast&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Cross-platform Tdarr Nodes which work together with Tdarr Server to process your files&lt;/li&gt; &#xA; &lt;li&gt;GPU and CPU workers&lt;/li&gt; &#xA; &lt;li&gt;Use/create Tdarr Plugins for infinite control on how your files are processed: &lt;a href=&#34;https://github.com/HaveAGitGat/Tdarr_Plugins&#34;&gt;https://github.com/HaveAGitGat/Tdarr_Plugins&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Audio and video library management&lt;/li&gt; &#xA; &lt;li&gt;7 day, 24 hour scheduler&lt;/li&gt; &#xA; &lt;li&gt;Folder watcher&lt;/li&gt; &#xA; &lt;li&gt;Worker stall detector&lt;/li&gt; &#xA; &lt;li&gt;Load balancing between libraries/drives&lt;/li&gt; &#xA; &lt;li&gt;Use HandBrake or FFmpeg&lt;/li&gt; &#xA; &lt;li&gt;Tested on a 1,000,000 file dummy library&lt;/li&gt; &#xA; &lt;li&gt;Search for files based on hundreds of properties&lt;/li&gt; &#xA; &lt;li&gt;Library stats&lt;/li&gt; &#xA; &lt;li&gt;Hardware transcoding container (install Nvidia plugin on unRAID/Nvidia runtime container on Ubuntu)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://i.imgur.com/wRV6tBJ.png&#34; height=&#34;300&#34;&gt; &lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Stats&lt;/h2&gt; &#xA;&lt;h2&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/43864057/163762996-65381fc8-0a57-4651-ba20-b5cba28e39d3.png&#34; alt=&#34;image&#34;&gt;&lt;/h2&gt; &#xA;&lt;h2&gt;Nodes&lt;/h2&gt; &#xA;&lt;h2&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/43864057/163763000-35742f0e-ae67-40b4-a44c-eee60eae61cf.png&#34; alt=&#34;image&#34;&gt;&lt;/h2&gt; &#xA;&lt;h2&gt;Job reports&lt;/h2&gt; &#xA;&lt;h2&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/43864057/163763006-a73a06cb-9fec-4960-bc72-46fb9744f9a9.png&#34; alt=&#34;image&#34;&gt;&lt;/h2&gt; &#xA;&lt;h2&gt;Property explorer&lt;/h2&gt; &#xA;&lt;h2&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/43864057/163763020-2231d5d1-d016-4c5c-84bf-662a6069ed01.png&#34; alt=&#34;image&#34;&gt;&lt;/h2&gt; &#xA;&lt;h2&gt;Worker verdict history&lt;/h2&gt; &#xA;&lt;h2&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/43864057/163763035-5a90e2a3-9516-44c4-994e-77d844123527.png&#34; alt=&#34;image&#34;&gt;&lt;/h2&gt; &#xA;&lt;h2&gt;Plugin stack system&lt;/h2&gt; &#xA;&lt;h2&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/43864057/163763049-fea46078-3749-4fb9-997c-3ced5b19049f.png&#34; alt=&#34;image&#34;&gt;&lt;/h2&gt; &#xA;&lt;h2&gt;Property search&lt;/h2&gt; &#xA;&lt;h2&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/43864057/163763064-24193295-1494-4c08-aa2e-76892a771b7b.png&#34; alt=&#34;image&#34;&gt;&lt;/h2&gt; &#xA;&lt;h2&gt;Library schedule&lt;/h2&gt; &#xA;&lt;h2&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/43864057/163763073-c00a3e8d-486a-4d12-b99d-7e4120961248.png&#34; alt=&#34;image&#34;&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Tdarr is extremely modular/configurable and the main idea behind it is creating a plugin stack to clean up/standardise your files. For example, a typical plugin stack might look like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(1) Transcode non hevc files into hevc&#xA;&#xA;(2) Remove subs&#xA;&#xA;(3) Remove meta data (if title)&#xA;&#xA;(4) Add aac stereo audio if none (eng preferred)&#xA;&#xA;(5) Remove closed captions&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In this example, plugins 1,2,3 and 5 are community plugins which are available for you to use immediately. Plugin 4 can be created in the plugin creator interface in Tdarr and will appear as a local plugin.&lt;/p&gt; &#xA;&lt;p&gt;Each of the plugins are conditional, so are only used if needed. They are located in Tdarr/Documents and are written in JavaScript so if none of the plugins do what you want then you can modify/create new plugins if you have a bit of coding experience (or get the gist from having a look). Steps for doing so are in the README here:&lt;a href=&#34;https://github.com/HaveAGitGat/Tdarr_Plugins&#34;&gt;https://github.com/HaveAGitGat/Tdarr_Plugins&lt;/a&gt; . Ask for help in the Discord channel if need be.&lt;/p&gt; &#xA;&lt;p&gt;Here is an illustration of how the plugin stack works:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://i.imgur.com/483AakN.png&#34;&gt;https://i.imgur.com/483AakN.png&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;For the term &#39;streams&#39;, here is an example of how a file appears in Tdarr search results:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://i.imgur.com/RaKnq2c.png&#34;&gt;https://i.imgur.com/RaKnq2c.png&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;That file has 3 streams - a video, audio and subtitle stream. Subtitles and closed captions are very different. Where is the closed caption data in this example? It&#39;s embedded inside the h264 video stream.&lt;/p&gt; &#xA;&lt;p&gt;Extra streams and closed captions which you don&#39;t need can cause problems with direct playing and syncing files, so you might as well remove them (it&#39;s recommended to use something like Bazarr for subtitles). Even when playing files in programs such as VLC or Kodi, subtitles/closed captions can cause playback delays and make things stuttery for a few seconds when jumping around the video.&lt;/p&gt; &#xA;&lt;p&gt;Extra streams can also take up a lot of space. Don&#39;t be surprised to see some files in your library with 15+ audio/commentary/subtitle tracks in a bunch of different languages. These can take up an extra GB+ per file.&lt;/p&gt; &#xA;&lt;p&gt;The plugin creator is split into &#39;Filters&#39; and &#39;Actions&#39;. Filters encapsulate the actions, so the actions will only be carried out if the filter conditions are met.&lt;/p&gt; &#xA;&lt;p&gt;Current filters:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Filter by codec&#xA;&#xA;Filter by medium&#xA;&#xA;Filter by age&#xA;&#xA;Filter by resolution&#xA;&#xA;Filter by size&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Current actions:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Transcode - HandBrake basic options&#xA;&#xA;Transcode - HandBrake/FFmpeg custom arguments&#xA;&#xA;Transcode - Standardise audio stream codecs&#xA;&#xA;Transcode - Add audio stream&#xA;&#xA;Transcode - Keep one audio stream&#xA;&#xA;Remux container&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Some actions/plugins have built-in filters (specified in the plugin creator). This means they&#39;ll automatically detect if a file needs to be processed or not (such as the remove subtitles community plugin). Additional filters can be added.&lt;/p&gt; &#xA;&lt;p&gt;Some of the actions have become quite complicated so take a bit more time. For example, the &#39;Keep one audio stream&#39; has 16 different outcomes as it tries to determine the best audio stream to keep based on the codec, language and channel count you specify.&lt;/p&gt; &#xA;&lt;p&gt;If you have a request for a new filter/action, then try and think of it generically so I can implement it in way that other people can configure and apply it to their (slightly) different circumstances. Request on GitHub,Reddit or Discord.&lt;/p&gt; &#xA;&lt;p&gt;For example, to maximize direct play, a plugin stack like this can be used:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(1) If not in h264, transcode into h264 [h264 is a more universal video codec than others]&#xA;&#xA;(2) If not in mp4, remux into mp4 [mp4 is the most universal container]&#xA;&#xA;(3) Remove subs&#xA;&#xA;(4) Remove closed captions&#xA;&#xA;(5) Add aac stereo audio if none (eng preferred) [very universal audio codec/channel count]&#xA;&#xA;(6) Remove meta-data if title meta detected [Stops annoying titles appearing in Plex]&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>linuxserver/docker-qbittorrent</title>
    <updated>2022-06-06T01:43:00Z</updated>
    <id>tag:github.com,2022-06-06:/linuxserver/docker-qbittorrent</id>
    <link href="https://github.com/linuxserver/docker-qbittorrent" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://linuxserver.io&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/linuxserver/docker-templates/master/linuxserver.io/img/linuxserver_medium.png&#34; alt=&#34;linuxserver.io&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://blog.linuxserver.io&#34; title=&#34;all the things you can do with our containers including How-To guides, opinions and much more!&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1.svg?color=94398d&amp;amp;labelColor=555555&amp;amp;logoColor=ffffff&amp;amp;style=for-the-badge&amp;amp;label=linuxserver.io&amp;amp;message=Blog&#34; alt=&#34;Blog&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/YWrKVTn&#34; title=&#34;realtime support / chat with the community and the team.&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/354974912613449730.svg?color=94398d&amp;amp;labelColor=555555&amp;amp;logoColor=ffffff&amp;amp;style=for-the-badge&amp;amp;label=Discord&amp;amp;logo=discord&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discourse.linuxserver.io&#34; title=&#34;post on our community forum.&#34;&gt;&lt;img src=&#34;https://img.shields.io/discourse/https/discourse.linuxserver.io/topics.svg?color=94398d&amp;amp;labelColor=555555&amp;amp;logoColor=ffffff&amp;amp;style=for-the-badge&amp;amp;logo=discourse&#34; alt=&#34;Discourse&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://fleet.linuxserver.io&#34; title=&#34;an online web interface which displays all of our maintained images.&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1.svg?color=94398d&amp;amp;labelColor=555555&amp;amp;logoColor=ffffff&amp;amp;style=for-the-badge&amp;amp;label=linuxserver.io&amp;amp;message=Fleet&#34; alt=&#34;Fleet&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/linuxserver&#34; title=&#34;view the source for all of our repositories.&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1.svg?color=94398d&amp;amp;labelColor=555555&amp;amp;logoColor=ffffff&amp;amp;style=for-the-badge&amp;amp;label=linuxserver.io&amp;amp;message=GitHub&amp;amp;logo=github&#34; alt=&#34;GitHub&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/linuxserver&#34; title=&#34;please consider helping us by either donating or contributing to our budget&#34;&gt;&lt;img src=&#34;https://img.shields.io/opencollective/all/linuxserver.svg?color=94398d&amp;amp;labelColor=555555&amp;amp;logoColor=ffffff&amp;amp;style=for-the-badge&amp;amp;label=Supporters&amp;amp;logo=open%20collective&#34; alt=&#34;Open Collective&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://linuxserver.io&#34;&gt;LinuxServer.io&lt;/a&gt; team brings you another container release featuring:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;regular and timely application updates&lt;/li&gt; &#xA; &lt;li&gt;easy user mappings (PGID, PUID)&lt;/li&gt; &#xA; &lt;li&gt;custom base image with s6 overlay&lt;/li&gt; &#xA; &lt;li&gt;weekly base OS updates with common layers across the entire LinuxServer.io ecosystem to minimise space usage, down time and bandwidth&lt;/li&gt; &#xA; &lt;li&gt;regular security updates&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Find us at:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.linuxserver.io&#34;&gt;Blog&lt;/a&gt; - all the things you can do with our containers including How-To guides, opinions and much more!&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://discord.gg/YWrKVTn&#34;&gt;Discord&lt;/a&gt; - realtime support / chat with the community and the team.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://discourse.linuxserver.io&#34;&gt;Discourse&lt;/a&gt; - post on our community forum.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://fleet.linuxserver.io&#34;&gt;Fleet&lt;/a&gt; - an online web interface which displays all of our maintained images.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/linuxserver&#34;&gt;GitHub&lt;/a&gt; - view the source for all of our repositories.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://opencollective.com/linuxserver&#34;&gt;Open Collective&lt;/a&gt; - please consider helping us by either donating or contributing to our budget&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;&lt;a href=&#34;https://github.com/linuxserver/docker-qbittorrent&#34;&gt;linuxserver/qbittorrent&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://scarf.sh/gateway/linuxserver-ci/docker/linuxserver%2Fqbittorrent&#34;&gt;&lt;img src=&#34;https://scarf.sh/installs-badge/linuxserver-ci/linuxserver%2Fqbittorrent?color=94398d&amp;amp;label-color=555555&amp;amp;logo-color=ffffff&amp;amp;style=for-the-badge&amp;amp;package-type=docker&#34; alt=&#34;Scarf.io pulls&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/linuxserver/docker-qbittorrent&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/linuxserver/docker-qbittorrent.svg?color=94398d&amp;amp;labelColor=555555&amp;amp;logoColor=ffffff&amp;amp;style=for-the-badge&amp;amp;logo=github&#34; alt=&#34;GitHub Stars&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/linuxserver/docker-qbittorrent/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/linuxserver/docker-qbittorrent.svg?color=94398d&amp;amp;labelColor=555555&amp;amp;logoColor=ffffff&amp;amp;style=for-the-badge&amp;amp;logo=github&#34; alt=&#34;GitHub Release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/linuxserver/docker-qbittorrent/packages&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1.svg?color=94398d&amp;amp;labelColor=555555&amp;amp;logoColor=ffffff&amp;amp;style=for-the-badge&amp;amp;label=linuxserver.io&amp;amp;message=GitHub%20Package&amp;amp;logo=github&#34; alt=&#34;GitHub Package Repository&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitlab.com/linuxserver.io/docker-qbittorrent/container_registry&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1.svg?color=94398d&amp;amp;labelColor=555555&amp;amp;logoColor=ffffff&amp;amp;style=for-the-badge&amp;amp;label=linuxserver.io&amp;amp;message=GitLab%20Registry&amp;amp;logo=gitlab&#34; alt=&#34;GitLab Container Registry&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://quay.io/repository/linuxserver.io/qbittorrent&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1.svg?color=94398d&amp;amp;labelColor=555555&amp;amp;logoColor=ffffff&amp;amp;style=for-the-badge&amp;amp;label=linuxserver.io&amp;amp;message=Quay.io&#34; alt=&#34;Quay.io&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/linuxserver/qbittorrent&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/pulls/linuxserver/qbittorrent.svg?color=94398d&amp;amp;labelColor=555555&amp;amp;logoColor=ffffff&amp;amp;style=for-the-badge&amp;amp;label=pulls&amp;amp;logo=docker&#34; alt=&#34;Docker Pulls&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/linuxserver/qbittorrent&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/stars/linuxserver/qbittorrent.svg?color=94398d&amp;amp;labelColor=555555&amp;amp;logoColor=ffffff&amp;amp;style=for-the-badge&amp;amp;label=stars&amp;amp;logo=docker&#34; alt=&#34;Docker Stars&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://ci.linuxserver.io/job/Docker-Pipeline-Builders/job/docker-qbittorrent/job/master/&#34;&gt;&lt;img src=&#34;https://img.shields.io/jenkins/build?labelColor=555555&amp;amp;logoColor=ffffff&amp;amp;style=for-the-badge&amp;amp;jobUrl=https%3A%2F%2Fci.linuxserver.io%2Fjob%2FDocker-Pipeline-Builders%2Fjob%2Fdocker-qbittorrent%2Fjob%2Fmaster%2F&amp;amp;logo=jenkins&#34; alt=&#34;Jenkins Build&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://ci-tests.linuxserver.io/linuxserver/qbittorrent/latest/index.html&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/dynamic/yaml?color=94398d&amp;amp;labelColor=555555&amp;amp;logoColor=ffffff&amp;amp;style=for-the-badge&amp;amp;label=CI&amp;amp;query=CI&amp;amp;url=https%3A%2F%2Fci-tests.linuxserver.io%2Flinuxserver%2Fqbittorrent%2Flatest%2Fci-status.yml&#34; alt=&#34;LSIO CI&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://www.qbittorrent.org/&#34;&gt;Qbittorrent&lt;/a&gt; project aims to provide an open-source software alternative to µTorrent. qBittorrent is based on the Qt toolkit and libtorrent-rasterbar library.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.qbittorrent.org/&#34;&gt;&lt;img src=&#34;https://github.com/linuxserver/docker-templates/raw/master/linuxserver.io/img/qbittorrent-icon.png&#34; alt=&#34;qbittorrent&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Supported Architectures&lt;/h2&gt; &#xA;&lt;p&gt;We utilise the docker manifest for multi-platform awareness. More information is available from docker &lt;a href=&#34;https://github.com/docker/distribution/raw/master/docs/spec/manifest-v2-2.md#manifest-list&#34;&gt;here&lt;/a&gt; and our announcement &lt;a href=&#34;https://blog.linuxserver.io/2019/02/21/the-lsio-pipeline-project/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Simply pulling &lt;code&gt;lscr.io/linuxserver/qbittorrent:latest&lt;/code&gt; should retrieve the correct image for your arch, but you can also pull specific arch images via tags.&lt;/p&gt; &#xA;&lt;p&gt;The architectures supported by this image are:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Architecture&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Available&lt;/th&gt; &#xA;   &lt;th&gt;Tag&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;x86-64&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;amd64-&amp;lt;version tag&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;arm64&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;arm64v8-&amp;lt;version tag&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;armhf&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;arm32v7-&amp;lt;version tag&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Version Tags&lt;/h2&gt; &#xA;&lt;p&gt;This image provides various versions that are available via tags. Please read the descriptions carefully and exercise caution when using unstable or development tags.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Tag&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Available&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;latest&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;Stable qbittorrent releases&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Application Setup&lt;/h2&gt; &#xA;&lt;p&gt;The webui is at &lt;code&gt;&amp;lt;your-ip&amp;gt;:8080&lt;/code&gt; and the default username/password is &lt;code&gt;admin/adminadmin&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Change username/password via the webui in the webui section of settings.&lt;/p&gt; &#xA;&lt;h3&gt;WEBUI_PORT variable&lt;/h3&gt; &#xA;&lt;p&gt;Due to issues with CSRF and port mapping, should you require to alter the port for the webui you need to change both sides of the -p 8080 switch AND set the WEBUI_PORT variable to the new port.&lt;/p&gt; &#xA;&lt;p&gt;For example, to set the port to 8090 you need to set -p 8090:8090 and -e WEBUI_PORT=8090&lt;/p&gt; &#xA;&lt;p&gt;This should alleviate the &#34;white screen&#34; issue.&lt;/p&gt; &#xA;&lt;p&gt;If you have no webui , check the file /config/qBittorrent/qBittorrent.conf&lt;/p&gt; &#xA;&lt;p&gt;edit or add the following lines&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;WebUI\Address=*&#xA;&#xA;WebUI\ServerDomains=*&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you are running a very old (3.x) kernel you may run into &lt;a href=&#34;https://github.com/linuxserver/docker-qbittorrent/issues/103&#34;&gt;this issue&lt;/a&gt; which can be worked around using &lt;a href=&#34;https://github.com/linuxserver/docker-qbittorrent/issues/103#issuecomment-831238484&#34;&gt;this method&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Here are some example snippets to help you get started creating a container.&lt;/p&gt; &#xA;&lt;h3&gt;docker-compose (recommended, &lt;a href=&#34;https://docs.linuxserver.io/general/docker-compose&#34;&gt;click here for more info&lt;/a&gt;)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;---&#xA;version: &#34;2.1&#34;&#xA;services:&#xA;  qbittorrent:&#xA;    image: lscr.io/linuxserver/qbittorrent:latest&#xA;    container_name: qbittorrent&#xA;    environment:&#xA;      - PUID=1000&#xA;      - PGID=1000&#xA;      - TZ=Europe/London&#xA;      - WEBUI_PORT=8080&#xA;    volumes:&#xA;      - /path/to/appdata/config:/config&#xA;      - /path/to/downloads:/downloads&#xA;    ports:&#xA;      - 8080:8080&#xA;      - 6881:6881&#xA;      - 6881:6881/udp&#xA;    restart: unless-stopped&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;docker cli (&lt;a href=&#34;https://docs.docker.com/engine/reference/commandline/cli/&#34;&gt;click here for more info&lt;/a&gt;)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run -d \&#xA;  --name=qbittorrent \&#xA;  -e PUID=1000 \&#xA;  -e PGID=1000 \&#xA;  -e TZ=Europe/London \&#xA;  -e WEBUI_PORT=8080 \&#xA;  -p 8080:8080 \&#xA;  -p 6881:6881 \&#xA;  -p 6881:6881/udp \&#xA;  -v /path/to/appdata/config:/config \&#xA;  -v /path/to/downloads:/downloads \&#xA;  --restart unless-stopped \&#xA;  lscr.io/linuxserver/qbittorrent:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Parameters&lt;/h2&gt; &#xA;&lt;p&gt;Container images are configured using parameters passed at runtime (such as those above). These parameters are separated by a colon and indicate &lt;code&gt;&amp;lt;external&amp;gt;:&amp;lt;internal&amp;gt;&lt;/code&gt; respectively. For example, &lt;code&gt;-p 8080:80&lt;/code&gt; would expose port &lt;code&gt;80&lt;/code&gt; from inside the container to be accessible from the host&#39;s IP on port &lt;code&gt;8080&lt;/code&gt; outside the container.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Parameter&lt;/th&gt; &#xA;   &lt;th&gt;Function&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;-p 8080&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;WebUI&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;-p 6881&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;tcp connection port&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;-p 6881/udp&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;udp connection port&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;-e PUID=1000&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;for UserID - see below for explanation&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;-e PGID=1000&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;for GroupID - see below for explanation&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;-e TZ=Europe/London&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Specify a timezone to use EG Europe/London&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;-e WEBUI_PORT=8080&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;for changing the port of the webui, see below for explanation&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;-v /config&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Contains all relevant configuration files.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;-v /downloads&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Location of downloads on disk.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Environment variables from files (Docker secrets)&lt;/h2&gt; &#xA;&lt;p&gt;You can set any environment variable from a file by using a special prepend &lt;code&gt;FILE__&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;As an example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;-e FILE__PASSWORD=/run/secrets/mysecretpassword&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Will set the environment variable &lt;code&gt;PASSWORD&lt;/code&gt; based on the contents of the &lt;code&gt;/run/secrets/mysecretpassword&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;h2&gt;Umask for running applications&lt;/h2&gt; &#xA;&lt;p&gt;For all of our images we provide the ability to override the default umask settings for services started within the containers using the optional &lt;code&gt;-e UMASK=022&lt;/code&gt; setting. Keep in mind umask is not chmod it subtracts from permissions based on it&#39;s value it does not add. Please read up &lt;a href=&#34;https://en.wikipedia.org/wiki/Umask&#34;&gt;here&lt;/a&gt; before asking for support.&lt;/p&gt; &#xA;&lt;h2&gt;User / Group Identifiers&lt;/h2&gt; &#xA;&lt;p&gt;When using volumes (&lt;code&gt;-v&lt;/code&gt; flags) permissions issues can arise between the host OS and the container, we avoid this issue by allowing you to specify the user &lt;code&gt;PUID&lt;/code&gt; and group &lt;code&gt;PGID&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Ensure any volume directories on the host are owned by the same user you specify and any permissions issues will vanish like magic.&lt;/p&gt; &#xA;&lt;p&gt;In this instance &lt;code&gt;PUID=1000&lt;/code&gt; and &lt;code&gt;PGID=1000&lt;/code&gt;, to find yours use &lt;code&gt;id user&lt;/code&gt; as below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  $ id username&#xA;    uid=1000(dockeruser) gid=1000(dockergroup) groups=1000(dockergroup)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Docker Mods&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://mods.linuxserver.io/?mod=qbittorrent&#34; title=&#34;view available mods for this container.&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/dynamic/yaml?color=94398d&amp;amp;labelColor=555555&amp;amp;logoColor=ffffff&amp;amp;style=for-the-badge&amp;amp;label=qbittorrent&amp;amp;query=%24.mods%5B%27qbittorrent%27%5D.mod_count&amp;amp;url=https%3A%2F%2Fraw.githubusercontent.com%2Flinuxserver%2Fdocker-mods%2Fmaster%2Fmod-list.yml&#34; alt=&#34;Docker Mods&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://mods.linuxserver.io/?mod=universal&#34; title=&#34;view available universal mods.&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/dynamic/yaml?color=94398d&amp;amp;labelColor=555555&amp;amp;logoColor=ffffff&amp;amp;style=for-the-badge&amp;amp;label=universal&amp;amp;query=%24.mods%5B%27universal%27%5D.mod_count&amp;amp;url=https%3A%2F%2Fraw.githubusercontent.com%2Flinuxserver%2Fdocker-mods%2Fmaster%2Fmod-list.yml&#34; alt=&#34;Docker Universal Mods&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;We publish various &lt;a href=&#34;https://github.com/linuxserver/docker-mods&#34;&gt;Docker Mods&lt;/a&gt; to enable additional functionality within the containers. The list of Mods available for this image (if any) as well as universal mods that can be applied to any one of our images can be accessed via the dynamic badges above.&lt;/p&gt; &#xA;&lt;h2&gt;Support Info&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Shell access whilst the container is running: &lt;code&gt;docker exec -it qbittorrent /bin/bash&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;To monitor the logs of the container in realtime: &lt;code&gt;docker logs -f qbittorrent&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;container version number &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;docker inspect -f &#39;{{ index .Config.Labels &#34;build_version&#34; }}&#39; qbittorrent&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;image version number &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;docker inspect -f &#39;{{ index .Config.Labels &#34;build_version&#34; }}&#39; lscr.io/linuxserver/qbittorrent:latest&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Updating Info&lt;/h2&gt; &#xA;&lt;p&gt;Most of our images are static, versioned, and require an image update and container recreation to update the app inside. With some exceptions (ie. nextcloud, plex), we do not recommend or support updating apps inside the container. Please consult the &lt;a href=&#34;https://raw.githubusercontent.com/linuxserver/docker-qbittorrent/master/#application-setup&#34;&gt;Application Setup&lt;/a&gt; section above to see if it is recommended for the image.&lt;/p&gt; &#xA;&lt;p&gt;Below are the instructions for updating containers:&lt;/p&gt; &#xA;&lt;h3&gt;Via Docker Compose&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Update all images: &lt;code&gt;docker-compose pull&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;or update a single image: &lt;code&gt;docker-compose pull qbittorrent&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Let compose update all containers as necessary: &lt;code&gt;docker-compose up -d&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;or update a single container: &lt;code&gt;docker-compose up -d qbittorrent&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;You can also remove the old dangling images: &lt;code&gt;docker image prune&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Via Docker Run&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Update the image: &lt;code&gt;docker pull lscr.io/linuxserver/qbittorrent:latest&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Stop the running container: &lt;code&gt;docker stop qbittorrent&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Delete the container: &lt;code&gt;docker rm qbittorrent&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Recreate a new container with the same docker run parameters as instructed above (if mapped correctly to a host folder, your &lt;code&gt;/config&lt;/code&gt; folder and settings will be preserved)&lt;/li&gt; &#xA; &lt;li&gt;You can also remove the old dangling images: &lt;code&gt;docker image prune&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Via Watchtower auto-updater (only use if you don&#39;t remember the original parameters)&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Pull the latest image at its tag and replace it with the same env variables in one run:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run --rm \&#xA;-v /var/run/docker.sock:/var/run/docker.sock \&#xA;containrrr/watchtower \&#xA;--run-once qbittorrent&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;You can also remove the old dangling images: &lt;code&gt;docker image prune&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; We do not endorse the use of Watchtower as a solution to automated updates of existing Docker containers. In fact we generally discourage automated updates. However, this is a useful tool for one-time manual updates of containers where you have forgotten the original parameters. In the long term, we highly recommend using &lt;a href=&#34;https://docs.linuxserver.io/general/docker-compose&#34;&gt;Docker Compose&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Image Update Notifications - Diun (Docker Image Update Notifier)&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;We recommend &lt;a href=&#34;https://crazymax.dev/diun/&#34;&gt;Diun&lt;/a&gt; for update notifications. Other tools that automatically update containers unattended are not recommended or supported.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Building locally&lt;/h2&gt; &#xA;&lt;p&gt;If you want to make local modifications to these images for development purposes or just to customize the logic:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/linuxserver/docker-qbittorrent.git&#xA;cd docker-qbittorrent&#xA;docker build \&#xA;  --no-cache \&#xA;  --pull \&#xA;  -t lscr.io/linuxserver/qbittorrent:latest .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The ARM variants can be built on x86_64 hardware using &lt;code&gt;multiarch/qemu-user-static&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run --rm --privileged multiarch/qemu-user-static:register --reset&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once registered you can define the dockerfile to use with &lt;code&gt;-f Dockerfile.aarch64&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Versions&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;25.05.22:&lt;/strong&gt; - Fetch qbitorrent-cli from upstream repo.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;02.03.22:&lt;/strong&gt; - Add unrar, 7zip, and qbitorrent-cli.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;01.03.22:&lt;/strong&gt; - Add python for search plugin support.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;23.02.22:&lt;/strong&gt; - Rebase to Alpine Edge, install from Alpine repos.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;19.02.22:&lt;/strong&gt; - Add jq to build-stage&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;07.01.22:&lt;/strong&gt; - Rebase to Alpine, build from source.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;06.01.22:&lt;/strong&gt; - Deprecate unstable branch.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;10.02.21:&lt;/strong&gt; - Rebase to focal.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;20.01.21:&lt;/strong&gt; - Deprecate &lt;code&gt;UMASK_SET&lt;/code&gt; in favor of UMASK in baseimage, see above for more information.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;12.11.20:&lt;/strong&gt; - Stop creating /config/data directory on startup&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;03.04.20:&lt;/strong&gt; - Fix adding search engine plugin&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;02.08.19:&lt;/strong&gt; - Add qbitorrent-cli for processing scripts.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;23.03.19:&lt;/strong&gt; - Switching to new Base images, shift to arm32v7 tag.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;14.01.19:&lt;/strong&gt; - Rebase to Ubuntu, add multi arch and pipeline logic.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;25.09.18:&lt;/strong&gt; - Use buildstage type build, bump qbitorrent to 4.1.3.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;14.08.18:&lt;/strong&gt; - Rebase to alpine 3.8, bump libtorrent to 1.1.9 and qbitorrent to 4.1.2.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;08.06.18:&lt;/strong&gt; - Bump qbitorrent to 4.1.1.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;26.04.18:&lt;/strong&gt; - Bump libtorrent to 1.1.7.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;02.03.18:&lt;/strong&gt; - Bump qbitorrent to 4.0.4 and libtorrent to 1.1.6.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;02.01.18:&lt;/strong&gt; - Deprecate cpu_core routine lack of scaling.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;19.12.17:&lt;/strong&gt; - Update to v4.0.3.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;09.02.17:&lt;/strong&gt; - Rebase to alpine 3.7&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;01.12.17:&lt;/strong&gt; - Update to v4.0.2.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;27.11.17:&lt;/strong&gt; - Update to v4 and use cpu_core routine to speed up builds.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;16.09.17:&lt;/strong&gt; - Bump to 3.3.16, Add WEBUI_PORT variable and notes to README to allow changing port of webui.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;01.08.17:&lt;/strong&gt; - Initial Release.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;12.02.18:&lt;/strong&gt; - Initial Release.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>microsoft/vscode-remote-try-python</title>
    <updated>2022-06-06T01:43:00Z</updated>
    <id>tag:github.com,2022-06-06:/microsoft/vscode-remote-try-python</id>
    <link href="https://github.com/microsoft/vscode-remote-try-python" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Python sample project for trying out the VS Code Remote - Containers extension&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Try Out Development Containers: Python&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://vscode.dev/redirect?url=vscode://ms-vscode-remote.remote-containers/cloneInVolume?url=https://github.com/microsoft/vscode-remote-try-python&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1?label=Remote%20-%20Containers&amp;amp;message=Open&amp;amp;color=blue&amp;amp;logo=visualstudiocode&#34; alt=&#34;Open in Remote - Containers&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A &lt;strong&gt;development container&lt;/strong&gt; is a running &lt;a href=&#34;https://www.docker.com&#34;&gt;Docker&lt;/a&gt; container with a well-defined tool/runtime stack and its prerequisites. You can try out development containers with &lt;strong&gt;&lt;a href=&#34;https://github.com/features/codespaces&#34;&gt;GitHub Codespaces&lt;/a&gt;&lt;/strong&gt; or &lt;strong&gt;&lt;a href=&#34;https://aka.ms/vscode-remote/containers&#34;&gt;Visual Studio Code Remote - Containers&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This is a sample project that lets you try out either option in a few easy steps. We have a variety of other &lt;a href=&#34;https://github.com/search?q=org%3Amicrosoft+vscode-remote-try-&amp;amp;type=Repositories&#34;&gt;vscode-remote-try-*&lt;/a&gt; sample projects, too.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If you already have a codespace or dev container, you can jump to the &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/vscode-remote-try-python/main/#things-to-try&#34;&gt;Things to try&lt;/a&gt; section.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Setting up the development container&lt;/h2&gt; &#xA;&lt;h3&gt;GitHub Codespaces&lt;/h3&gt; &#xA;&lt;p&gt;Follow these steps to open this sample in a Codespace:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Click the Code drop-down menu and select the &lt;strong&gt;Open with Codespaces&lt;/strong&gt; option.&lt;/li&gt; &#xA; &lt;li&gt;Select &lt;strong&gt;+ New codespace&lt;/strong&gt; at the bottom on the pane.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;For more information on creating your codespace, visit the &lt;a href=&#34;https://docs.github.com/en/free-pro-team@latest/github/developing-online-with-codespaces/creating-a-codespace#creating-a-codespace&#34;&gt;GitHub documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;VS Code Remote - Containers&lt;/h3&gt; &#xA;&lt;p&gt;If you already have VS Code and Docker installed, you can click the badge above or &lt;a href=&#34;https://vscode.dev/redirect?url=vscode://ms-vscode-remote.remote-containers/cloneInVolume?url=https://github.com/microsoft/vscode-remote-try-python&#34;&gt;here&lt;/a&gt; to get started. Clicking these links will cause VS Code to automatically install the Remote - Containers extension if needed, clone the source code into a container volume, and spin up a dev container for use.&lt;/p&gt; &#xA;&lt;p&gt;Follow these steps to open this sample in a container using the VS Code Remote - Containers extension:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;If this is your first time using a development container, please ensure your system meets the prerequisites (i.e. have Docker installed) in the &lt;a href=&#34;https://aka.ms/vscode-remote/containers/getting-started&#34;&gt;getting started steps&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To use this repository, you can either open the repository in an isolated Docker volume:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Press &lt;kbd&gt;F1&lt;/kbd&gt; and select the &lt;strong&gt;Remote-Containers: Try a Sample...&lt;/strong&gt; command.&lt;/li&gt; &#xA;   &lt;li&gt;Choose the &#34;Python&#34; sample, wait for the container to start, and try things out! &#xA;    &lt;blockquote&gt; &#xA;     &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Under the hood, this will use the &lt;strong&gt;Remote-Containers: Clone Repository in Container Volume...&lt;/strong&gt; command to clone the source code in a Docker volume instead of the local filesystem. &lt;a href=&#34;https://docs.docker.com/storage/volumes/&#34;&gt;Volumes&lt;/a&gt; are the preferred mechanism for persisting container data.&lt;/p&gt; &#xA;    &lt;/blockquote&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;p&gt;Or open a locally cloned copy of the code:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Clone this repository to your local filesystem.&lt;/li&gt; &#xA;   &lt;li&gt;Press &lt;kbd&gt;F1&lt;/kbd&gt; and select the &lt;strong&gt;Remote-Containers: Open Folder in Container...&lt;/strong&gt; command.&lt;/li&gt; &#xA;   &lt;li&gt;Select the cloned copy of this folder, wait for the container to start, and try things out!&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Things to try&lt;/h2&gt; &#xA;&lt;p&gt;Once you have this sample opened, you&#39;ll be able to work with it like you would locally.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This container runs as a non-root user with sudo access by default. Comment out &lt;code&gt;&#34;remoteUser&#34;: &#34;vscode&#34;&lt;/code&gt; in &lt;code&gt;.devcontainer/devcontainer.json&lt;/code&gt; if you&#39;d prefer to run as root.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Some things to try:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Edit:&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Open &lt;code&gt;app.py&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Try adding some code and check out the language features.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Terminal:&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;Press &lt;kbd&gt;ctrl&lt;/kbd&gt;+&lt;kbd&gt;shift&lt;/kbd&gt;+&lt;kbd&gt;`&lt;/kbd&gt; to open a terminal window.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Type &lt;code&gt;python -m flask run --port 9000 --no-debugger --no-reload&lt;/code&gt; to run the app.&lt;/p&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;The terminal will say your app is &lt;code&gt;Running on http://127.0.0.1:9000/&lt;/code&gt;. Click on the link in the terminal to view your app running in the browser.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Notice that the Python extension is already installed in the container since the &lt;code&gt;.devcontainer/devcontainer.json&lt;/code&gt; lists &lt;code&gt;&#34;ms-python.python&#34;&lt;/code&gt; as an extension to install automatically when the container is created.&lt;/p&gt; &#xA;    &lt;blockquote&gt; &#xA;     &lt;p&gt;&lt;strong&gt;Tip:&lt;/strong&gt; If you use this container outside of VS Code via &lt;code&gt;docker run&lt;/code&gt; with &lt;code&gt;-p 9000&lt;/code&gt;, you may need to append &lt;code&gt;--host 0.0.0.0&lt;/code&gt; to the command above. The &lt;code&gt;-p&lt;/code&gt; option &#34;publishes&#34; the port rather than forwarding it. It therefore will not work if the application only listens to localhost. The &lt;code&gt;forwardPorts&lt;/code&gt; property in &lt;code&gt;devcontainer.json&lt;/code&gt; does not have this limitation, but you can use &lt;code&gt;appPort&lt;/code&gt; property instead if you want to mirror the &lt;code&gt;docker run&lt;/code&gt; behavior.&lt;/p&gt; &#xA;    &lt;/blockquote&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Build, Run, and Debug:&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Open &lt;code&gt;app.py&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Add a breakpoint (e.g. on line 9).&lt;/li&gt; &#xA;   &lt;li&gt;Press &lt;kbd&gt;F5&lt;/kbd&gt; to launch the app in the container.&lt;/li&gt; &#xA;   &lt;li&gt;Once the breakpoint is hit, try hovering over variables (e.g. the app variable on line 7), examining locals, and more.&lt;/li&gt; &#xA;   &lt;li&gt;Continue (&lt;kbd&gt;F5&lt;/kbd&gt;). You can connect to the server in the container by either: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Clicking on &lt;code&gt;Open in Browser&lt;/code&gt; in the notification telling you: &lt;code&gt;Your service running on port 9000 is available&lt;/code&gt;.&lt;/li&gt; &#xA;     &lt;li&gt;Clicking the globe icon in the &#39;Ports&#39; view. The &#39;Ports&#39; view gives you an organized table of your forwarded ports, and you can access it with the command &lt;strong&gt;Ports: Focus on Ports View&lt;/strong&gt;.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Notice port 9000 in the &#39;Ports&#39; view is labeled &#34;Hello Remote World.&#34; In &lt;code&gt;devcontainer.json&lt;/code&gt;, you can set &lt;code&gt;&#34;portsAttributes&#34;&lt;/code&gt;, such as a label for your forwarded ports and the action to be taken when the port is autoforwarded.&lt;/li&gt; &#xA;  &lt;/ul&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; In Remote - Containers, you can access your app at &lt;code&gt;http://localhost:9000&lt;/code&gt; in a local browser. But in a browser-based Codespace, you must click the link from the notification or the &lt;code&gt;Ports&lt;/code&gt; view so that the service handles port forwarding in the browser and generates the correct URL.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Rebuild or update your container&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;You may want to make changes to your container, such as installing a different version of a software or forwarding a new port. You&#39;ll rebuild your container for your changes to take effect.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Open browser automatically:&lt;/strong&gt; As an example change, let&#39;s update the &lt;code&gt;portsAttributes&lt;/code&gt; in the &lt;code&gt;.devcontainer/devcontainer.json&lt;/code&gt; file to open a browser when our port is automatically forwarded.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Open the &lt;code&gt;.devcontainer/devcontainer.json&lt;/code&gt; file.&lt;/li&gt; &#xA;   &lt;li&gt;Modify the &lt;code&gt;&#34;onAutoForward&#34;&lt;/code&gt; attribute in your &lt;code&gt;portsAttributes&lt;/code&gt; from &lt;code&gt;&#34;notify&#34;&lt;/code&gt; to &lt;code&gt;&#34;openBrowser&#34;&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Press &lt;kbd&gt;F1&lt;/kbd&gt; and select the &lt;strong&gt;Remote-Containers: Rebuild Container&lt;/strong&gt; or &lt;strong&gt;Codespaces: Rebuild Container&lt;/strong&gt; command so the modifications are picked up.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;More samples&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Microsoft/python-sample-tweeterapp&#34;&gt;Tweeter App - Python and Django&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;This project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit &lt;a href=&#34;https://cla.microsoft.com&#34;&gt;https://cla.microsoft.com&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;When you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.&lt;/p&gt; &#xA;&lt;p&gt;This project has adopted the &lt;a href=&#34;https://opensource.microsoft.com/codeofconduct/&#34;&gt;Microsoft Open Source Code of Conduct&lt;/a&gt;. For more information see the &lt;a href=&#34;https://opensource.microsoft.com/codeofconduct/faq/&#34;&gt;Code of Conduct FAQ&lt;/a&gt; or contact &lt;a href=&#34;mailto:opencode@microsoft.com&#34;&gt;opencode@microsoft.com&lt;/a&gt; with any additional questions or comments.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Copyright © Microsoft Corporation All rights reserved.&lt;br&gt; Licensed under the MIT License. See LICENSE in the project root for license information.&lt;/p&gt;</summary>
  </entry>
</feed>