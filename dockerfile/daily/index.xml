<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dockerfile Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-05-18T01:33:56Z</updated>
  <subtitle>Daily Trending of Dockerfile in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>vbachele/Inception</title>
    <updated>2023-05-18T01:33:56Z</updated>
    <id>tag:github.com,2023-05-18:/vbachele/Inception</id>
    <link href="https://github.com/vbachele/Inception" rel="alternate"></link>
    <summary type="html">&lt;p&gt;School 42 inception project. Project + tutorial + bonus in my read.me&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Inception&lt;/h1&gt; &#xA;&lt;p&gt;This project from 42 school aims to broaden your knowledge of system administration by using Docker. IIn this tutorial You will virtualize several Docker images, creating them in your new personal virtual machine. In this read.me you will have an inception tutorial to know how the project works.&lt;/p&gt; &#xA;&lt;h2&gt;Important things to read before beginning the project&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Don&#39;t try to do all the containers&lt;/strong&gt; (Nginx, wordpress and mariaDB) at the same time. You will be lost and you will not understand properly how it works. Do it step by step.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Begin with Nginx&lt;/strong&gt; by displaying an index.html page&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Learn first how to launch a docker image &amp;amp;&amp;amp; to execute this image &lt;strong&gt;without using docker-compose&lt;/strong&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Learn How to display an html page on &lt;a href=&#34;http://localhost:80&#34;&gt;http://localhost:80&lt;/a&gt;&#34;&lt;/li&gt; &#xA;   &lt;li&gt;Learn how to display an html page with SSL on &lt;a href=&#34;http://localhost:443&#34;&gt;http://localhost:443&lt;/a&gt;&#34;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Do wordpress&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;You can begin from here the docker-compose file, you don&#39;t need it before&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Finish with MariaDB.&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;You want to try if each container works in general? No worries, you will be able to do it by importing images for wordpress and mariaDB from the hub. (if you read this for the first time, I invite you to begin to read this beautiful READ.ME and put a star on it! It helps!)&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The 2 github which helped me a lot for the project : &lt;a href=&#34;https://github.com/llescure/42_Inception&#34;&gt;llescure&lt;/a&gt; and &lt;a href=&#34;https://github.com/42cursus/inception&#34;&gt;malatini&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;This github which helped me for the bonus &lt;a href=&#34;https://github.com/twagger/inception&#34;&gt;twagger&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you have questions: please contact me, I will be glad to give you an answer ! my discord username: vbachele#7949&lt;/p&gt; &#xA;&lt;h1&gt;SUMMARY&lt;/h1&gt; &#xA;&lt;h3&gt;1. &lt;a href=&#34;https://github.com/vbachele/Inception/raw/main/README.md#definitions&#34;&gt;DEFINITIONS&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;h3&gt;2. &lt;a href=&#34;https://github.com/vbachele/Inception/raw/main/README.md#Docker&#34;&gt;DOCKER&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;h3&gt;3. &lt;a href=&#34;https://github.com/vbachele/Inception/raw/main/README.md#NGINX&#34;&gt;NGINX&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;h3&gt;4. &lt;a href=&#34;https://github.com/vbachele/Inception/raw/main/README.md#WORDPRESS&#34;&gt;WORDPRESS&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;h3&gt;4. &lt;a href=&#34;https://github.com/vbachele/Inception/raw/main/README.md#MARIADB&#34;&gt;MARIADB&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;h3&gt;5. &lt;a href=&#34;https://github.com/vbachele/Inception/raw/main/README.md#BONUS&#34;&gt;BONUS&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/vbachele/Inception/raw/main/README.md#REDIS&#34;&gt;REDIS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/vbachele/Inception/raw/main/README.md#FTP-SERVER&#34;&gt;FTP-server&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/vbachele/Inception/raw/main/README.md#ADMINER&#34;&gt;Adminer&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/vbachele/Inception/raw/main/README.md#Service-of-my-choice&#34;&gt;Service of my choice (hugo)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/vbachele/Inception/raw/main/README.md#Static-web-page&#34;&gt;Static web page&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Definitions&lt;/h1&gt; &#xA;&lt;h2&gt;What is a docker ?&lt;/h2&gt; &#xA;&lt;p&gt;Docker is an open platform for developing, shipping, and running applications. Docker enables you to separate your applications from your infrastructure so you can deliver software quickly. With Docker, you can manage your infrastructure in the same ways you manage your applications. By taking advantage of Docker’s methodologies for shipping, testing, and deploying code quickly, you can significantly reduce the delay between writing code and running it in production. Docker provides the ability to package and run an application in a loosely isolated environment called a container.&lt;/p&gt; &#xA;&lt;h2&gt;What is a docker-compose ?&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.educative.io/blog/docker-compose-tutorial&#34;&gt;What is docker in general&lt;/a&gt; &lt;a href=&#34;https://www.aquasec.com/cloud-native-academy/docker-container/docker-networking/&#34;&gt;What is docker network&lt;/a&gt; Compose is a tool for defining and running multi-container Docker applications. With Compose, you use a YAML file to configure your application’s services. Then, with a single command, you create and start all the services from your configuration.&lt;/p&gt; &#xA;&lt;h2&gt;What is a docker-file ?&lt;/h2&gt; &#xA;&lt;p&gt;Docker can build images automatically by reading the instructions from a Dockerfile. A Dockerfile is a text document that contains all the commands a user could call on the command line to assemble an image. Using docker build users can create an automated build that executes several command-line instructions in succession.&lt;/p&gt; &#xA;&lt;h2&gt;How to install docker on MACOS&lt;/h2&gt; &#xA;&lt;p&gt;For this project, I am on my personal mac so I don&#39;t need to use the virtual machine to use a sudo command. I had to install docker. First, you need:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;I went directly to the docker website and I downloaded docker &lt;a href=&#34;https://docs.docker.com/desktop/install/mac-install/&#34;&gt;Link to the website&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;I installed docker on the machine&lt;/li&gt; &#xA; &lt;li&gt;I tested to run a dockerfile thanks to the command docker run hello-world&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Useful things to know about inception dockers and containers&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;On the mac, Apache service is installed by default. I deleted Apache from my computer to avoid any problem with nginx&lt;/li&gt; &#xA; &lt;li&gt;If you are at 42 on their computer you should stop these services which are running by default&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;sudo service nginx stop&#xA;sudo service mariadb stop&#xA;sudo service apache2 stop&#xA;sudo service mysql stop&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;DOCKER&lt;/h1&gt; &#xA;&lt;h2&gt;Important commands to use docker&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cloud.google.com/architecture/best-practices-for-building-containers&#34;&gt;Best practices for building containers&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;General docker commands&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;- docker ps or docker ps -a //show the names of all the containers you have + the id you need and the port associated.&#xA;- docker pull &#34;NameOfTheImage&#34; // pull an image from dockerhub&#xA;- docker &#34;Three first letter of your docker&#34; // show the logs of your last run of dockers&#xA;- docker rm $(docker ps -a -q) //allow to delete all the opened images&#xA;- docker exec -it &#34;Three first letter of your docker&#34; sh // to execute the program with the shell&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Docker run&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;- docker run &#34;name of the docker image&#34; //to run the docker image&#xA;- docker run -d, // run container in background&#xA;- docker run -p,// publish a container&#39;s port to the host&#xA;- docker run -P, // publish all exposed port to random ports&#xA;- docker run -it &#34;imageName&#34;, //le programme continuera de fonctionner et on pourra interagir avec le container&#xA;- docker run -name sl mysql, //give a name for the container instead an ID&#xA;- docker run -d -p 7000:80 test:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Docker image&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;- docker image rm -f &#34;image name/id&#34;, //delete the image, if the image is running you need to kill it first.&#xA;- docker image kill &#34;name&#34;, //stop a running image,&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;How to write a docker file&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Create a filename dockerfile&lt;/li&gt; &#xA; &lt;li&gt;Write your command inside the doc&lt;/li&gt; &#xA; &lt;li&gt;Build the dockerfile with the command &#34;docker build -t &#34;nameYouChoose&#34;.&#34;&lt;/li&gt; &#xA; &lt;li&gt;Execute the dockerfile with the command: docker run &#34;nameYouChoose&#34;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Here are the most common types of instructions:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;FROM &lt;img&gt; - defines a base for your image. exemple : FROM debian&lt;/li&gt; &#xA; &lt;li&gt;RUN &lt;command&gt; - executes any commands in a new layer on top of the current image and commits the result. RUN also has a shell form for running commands.&lt;/li&gt; &#xA; &lt;li&gt;WORKDIR &#xA;  &lt;directory&gt;&#xA;    - sets the working directory for any RUN, CMD, ENTRYPOINT, COPY, and ADD instructions that follow it in the Dockerfile. (You go directly in the directory you choose)&#xA;  &lt;/directory&gt;&lt;/li&gt; &#xA; &lt;li&gt;COPY &#xA;  &lt;src&gt; &#xA;   &lt;dest&gt;&#xA;     - copies new files or directories from &#xA;    &lt;src&gt;&#xA;      and adds them to the filesystem of the container at the path &#xA;     &lt;dest&gt;&#xA;      .&#xA;     &lt;/dest&gt;&#xA;    &lt;/src&gt;&#xA;   &lt;/dest&gt;&#xA;  &lt;/src&gt;&lt;/li&gt; &#xA; &lt;li&gt;CMD &lt;command&gt; - lets you define the default program that is run once you start the container based on this image. Each Dockerfile only has one CMD, and only the last CMD instance is respected when multiple ones exist.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How to launch a localhost webpage to test&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;strong&gt;(this point works only on the mac and not the VM)&lt;/strong&gt;&lt;/h3&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=F2il_Mo5yww&amp;amp;ab_channel=linuxxraza&#34;&gt;Watch this Video tutorial&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Create a HTML file with some code in it.&lt;/li&gt; &#xA; &lt;li&gt;Create you dockerfile &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;The image will be NGINX : FROM NGINX&lt;/li&gt; &#xA;   &lt;li&gt;Use COPY to copy your files into the html directory on NGINX&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Use the command &#34;docker build -t simple .&#34;&lt;/li&gt; &#xA; &lt;li&gt;Use the command &#34;docker container run --name=&#34;nameofyourchoice&#34; -d -p 9000:80 simple&#34; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;--name is to give a name to your image&lt;/li&gt; &#xA;   &lt;li&gt;-d run the container in background&lt;/li&gt; &#xA;   &lt;li&gt;-p publish the container&#39;s port to the host. In that case 9000 to 80&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;NGINX&lt;/h1&gt; &#xA;&lt;h2&gt;How to set up NGINX (our web server)&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://nginx.org/en/docs/beginners_guide.html&#34;&gt;Video tutorial&lt;/a&gt; Nginx is a webserver which stores hmtl, js, images files and use http request to display a website. Nginx conf documents will be used to config our server and the right proxy connexion.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;configure .conf file on nginx&lt;/h2&gt; &#xA;&lt;h3&gt;useful nginx links&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.digitalocean.com/community/tutorials/nginx-location-directive&#34;&gt;location explanations&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.varonis.com/fr/blog/serveur-proxy&#34;&gt;What is a proxy server&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://nginx.org/en/docs/http/ngx_http_core_module.html&#34;&gt;All nginx definitions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.nginx.com/resources/wiki/start/topics/tutorials/commandline/&#34;&gt;Nginx Command line&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cloud.google.com/architecture/best-practices-for-building-containers#signal-handling&#34;&gt;PID 1 signal handling &amp;amp;&amp;amp; nginx&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://fr.wikipedia.org/wiki/Transport_Layer_Security&#34;&gt;What is TLS(in french)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Listen &amp;amp;&amp;amp; Location&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Listen will indicate to the server which request it has to accept: Listen can take ports and adresses : exemple Listen 80;&lt;/li&gt; &#xA; &lt;li&gt;The location directive within NGINX server block allows to route request to correct location within the file system. The directive is used to tell NGINX where to look for a resource by including files and folders while matching a location block against an URL.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Steps to add in localhost by configuring&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;strong&gt;(this point works only on the mac and not the VM)&lt;/strong&gt;&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;I added to my /var/www/ directory an index html file&lt;/li&gt; &#xA; &lt;li&gt;I configured the default file in etc/nginx/site-enabled/default&lt;/li&gt; &#xA; &lt;li&gt;I added a server bracket with a location to var/www/ in the doc. Save it and reload nginx with &#39;nginx -s reload&#39;.&lt;/li&gt; &#xA; &lt;li&gt;Because the port host I put when I built was 7000. Go to a web page and put: &lt;a href=&#34;http://localhost:7000/&#34;&gt;http://localhost:7000/&lt;/a&gt;. It works!!!! &lt;img src=&#34;https://raw.githubusercontent.com/vbachele/Inception/main/images/nginxLocalImages.png&#34; alt=&#34;nginxLocalImage&#34;&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;How to change your localhost by vbachele.42.fr&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Go to the file /etc/hosts&lt;/li&gt; &#xA; &lt;li&gt;Add the following line : &#34;127.0.0.1 vbachele.42.fr&#34;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Fastcgi (or how to process PHP with nginx)&lt;/h2&gt; &#xA;&lt;h3&gt;Useful links&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol&#34;&gt;What is http&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.goanywhere.com/blog/http-vs-tcp-whats-the-difference#:~:text=TCP%20contains%20information%20about%20what,data%20in%20the%20stream%20contains.&#34;&gt;difference between http &amp;amp;&amp;amp; tcp&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.nginx.com/resources/wiki/start/topics/examples/phpfcgi/&#34;&gt;PHP Fast CGI Examples&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://serverfault.com/questions/1094793/what-is-this-nginx-location-for-php-fpm-fastcgi-pass-127-0-0-19000-really-doing&#34;&gt;Why using fastcgi_pass 127.0.0.1:9000&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=I_9-xWmkh28&amp;amp;ab_channel=ProgramWithGio&#34;&gt;Install Nginx with php-fpm in video&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.digitalocean.com/community/tutorials/understanding-and-implementing-fastcgi-proxying-in-nginx&#34;&gt;Fast CGI explanations commands&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;PHP-FPM (for fast-cgi Process Manager) runs as an isolated service when you use PHP-FPM. Employing this PHP version as the language interpreter means requests will be processed via a TCP/IP socket, and the Nginx server handles HTTP requests only, while PHP-FPM interprets the PHP code. Taking advantage of two separate services is vital to become more efficient. It features with Wordpress&lt;/p&gt; &#xA;&lt;h1&gt;Docker-compose&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://openclassrooms.com/fr/courses/2035766-optimisez-votre-deploiement-en-creant-des-conteneurs-avec-docker/6211624-decouvrez-et-installez-docker-compose&#34;&gt;tutorial open classroom dockercompose&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Docker-Compose commands&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;- docker-compose up -d --build, //Create and build all the containers and they still run in the background&#xA;- docker-compose ps, //Check the status for all the containers&#xA;- docker-compose logs -f --tail 5, //see the first 5 lines of the logs of your containers&#xA;- docker-compose stop , //stop a stack of your docker compose&#xA;- Docker-compose down, //destroy all your ressources&#xA;- docker-compose config, //check the syntax of you docker-compose file&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Inside the docker-compose file&lt;/h2&gt; &#xA;&lt;p&gt;All the information about what every line means are in this &lt;a href=&#34;https://openclassrooms.com/fr/courses/2035766-optimisez-votre-deploiement-en-creant-des-conteneurs-avec-docker/6211677-creez-un-fichier-docker-compose-pour-orchestrer-vos-conteneurs&#34;&gt;tutorial&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;WORDPRESS&lt;/h1&gt; &#xA;&lt;h2&gt;Useful links&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.dreamhost.com/wordpress/guide-to-wp-cli/#:~:text=The%20WP%2DCLI%20is%20a,faster%20using%20the%20WP%2DCLI.&#34;&gt;What is the wordpress CLI&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://wpformation.com/wp-config-php-et-functions-php-fichiers-wordpress/&#34;&gt;Know more about wp-config.php&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://myjeeva.com/php-fpm-configuration-101.html&#34;&gt;php-fpm - www.conf&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;definitions&lt;/em&gt; &lt;em&gt;wp-config.php&lt;/em&gt; This file tells to your database how to get your files and how to treat them&lt;/p&gt; &#xA;&lt;h2&gt;What are the steps to create your Wordpress&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Create you dockerfile image&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Download php-fpm&lt;/li&gt; &#xA;   &lt;li&gt;Copy the &lt;a href=&#34;http://www.conf&#34;&gt;www.conf&lt;/a&gt; file in php/7.3/fpm/pool.d/&lt;/li&gt; &#xA;   &lt;li&gt;Create the php directory to enable php-fpm to run&lt;/li&gt; &#xA;   &lt;li&gt;Copy the script and launch it&lt;/li&gt; &#xA;   &lt;li&gt;Go to the html directory&lt;/li&gt; &#xA;   &lt;li&gt;Launch php-fpm&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Create a script&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Download wordpress&lt;/li&gt; &#xA;   &lt;li&gt;Create the configuration file of wordpress&lt;/li&gt; &#xA;   &lt;li&gt;Move files from wordpress in the html directory&lt;/li&gt; &#xA;   &lt;li&gt;Give the 4th environmental variables for wordpress&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Create a &lt;a href=&#34;http://www.conf&#34;&gt;www.conf&lt;/a&gt;&lt;/strong&gt; You need to edit &lt;a href=&#34;http://www.conf&#34;&gt;www.conf&lt;/a&gt; and place it in /etc/php/7.3(the usual version of php on 42 vm)/fpm/pool.d and wp-content.php to disable access to the wordpress installation page when you access your site at &lt;a href=&#34;https://login.42.fr&#34;&gt;https://login.42.fr&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Put listen = 0.0.0.0:9000 to listen to all ports&lt;/li&gt; &#xA;   &lt;li&gt;Increase the number for the pm values in order to avoid a 502 page&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;MARIADB&lt;/h1&gt; &#xA;&lt;p&gt;MariaDB will be the database to store information about our wordpress users and settings. In this section we have to create the Mariadb image and create 2 users.&lt;/p&gt; &#xA;&lt;h2&gt;Useful links&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.interserver.net/tips/kb/import-export-databases-mysql-command-line/&#34;&gt;Import-export databases&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.daniloaz.com/en/how-to-create-a-user-in-mysql-mariadb-and-grant-permissions-on-a-specific-database/&#34;&gt;Create and give permissions to a user&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://cactogeek.free.fr/autres/DocumentationLinux-Windows/LinuxUbuntu/ProblemeMYSQL-mysqld.sockInexistant.pdf&#34;&gt;Why create /var/run/mysqld directory&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://chartio.com/resources/tutorials/how-to-grant-all-privileges-on-a-database-in-mysql/&#34;&gt;How to give all privileges for a user on a database&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.journaldunet.fr/web-tech/developpement/1202663-comment-importer-un-fichier-sql-dans-mysql-en-ligne-de-commande/&#34;&gt;How to import a data base&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;MARIADB useful commands&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;mysql -uroot // To connect on mysql CLI&#xA;SELECT User FROM mysql.user; // To see all the users&#xA;USE wordpress // To connect on your wordpress database&#xA;mysqldump -u username -p databasename &amp;gt; filename.sql // To export the file&#xA;mysql -uroot -p$MYSQL_ROOT_PASSWORD $MYSQL_DATABASE &amp;lt; /usr/local/bin/wordpress.sql // To import the file&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;What are the steps to create your own Maria DB image&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Create a dockerfile&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Download mariadb-server &amp;amp;&amp;amp; mariadb-client&lt;/li&gt; &#xA;   &lt;li&gt;To run mariaDB on your container, you have to copy your .sh and the .sql on the /var/local/bin/&lt;/li&gt; &#xA;   &lt;li&gt;Give the right to execute your mysqld (which is the daemon for mysql)&lt;/li&gt; &#xA;   &lt;li&gt;Launch your script to install mariaDB&lt;/li&gt; &#xA;   &lt;li&gt;Then do a CMD to enable the database to listen to all the IPV4 adresses.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Create a script (.sh file)&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;mysql_install_db initializes the MySQL data directory and creates the system tables that it contains, if they do not exist&lt;/li&gt; &#xA;   &lt;li&gt;In this script we downloaded Maria DB on the container, we have to install it and create the root user&lt;/li&gt; &#xA;   &lt;li&gt;Then we launch the commandline to give all the privileges to the root user. The function GRANT from mysqlcli (sql command line) gives access (or all access) to a user.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Create your file.sql&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;2 options : &#xA;    &lt;ol&gt; &#xA;     &lt;li&gt;You create the database, the user and you give all privileges to the user as &lt;a href=&#34;https://github.com/42cursus/inception/raw/validated/srcs/requirements/mariadb/config/create_db.sql&#34;&gt;malatini did&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;You export your own wordpress.sql as I did (and Lea did !!!!) &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;Step 1: Create your admin user on wordpress: You might don&#39;t know what it is, no prob! It means you will export your admin user from your database in order to put it in your .sql file. &#xA;        &lt;ul&gt; &#xA;         &lt;li&gt;Go to your wordpress website (localhost:443) and create your user by using the same username and password as your .env file.&lt;/li&gt; &#xA;        &lt;/ul&gt; &lt;/li&gt; &#xA;       &lt;li&gt;Step 2: Export your admin user.sql You have to go on your mariaDB container and do the following command &#xA;        &lt;ul&gt; &#xA;         &lt;li&gt;mysqldump -u &#39;username&#39; -p &#39;databasename&#39; &amp;gt; filename.sql &lt;em&gt;it will export your user on the filename.sql, please change username, databasename by what you put in your .env file&lt;/em&gt;&lt;/li&gt; &#xA;         &lt;li&gt;You have a file called filename.sql in your current directory&lt;/li&gt; &#xA;         &lt;li&gt;&#34;cat filename.sql&#34; in your container and copy past to your .sql project.&lt;/li&gt; &#xA;         &lt;li&gt;Your .sql is ready now to be imported&lt;/li&gt; &#xA;        &lt;/ul&gt; &lt;/li&gt; &#xA;       &lt;li&gt;Step 3: relaunch your docker-compose &#xA;        &lt;ul&gt; &#xA;         &lt;li&gt;TADA you will be directly in your website by passing the phase of installation &lt;img src=&#34;https://raw.githubusercontent.com/vbachele/Inception/main/images/wordpress_page.png&#34; alt=&#34;Wordpress without installation&#34;&gt;&lt;/li&gt; &#xA;        &lt;/ul&gt; &lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;/ol&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Commands to check if all is working&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;&#x9;SHOW DATABASES; // show the databes&#xA;&#x9;use &#39;wordpress&#39;; // go in the wordpress databse&#xA;&#x9;SHOW TABLES; // show all the tables from the database you selected&#xA;&#x9;SELECT wp_users.display_name FROM wp_users; // display username from wordpress database&#xA;&#x9;SELECT *  FROM wp_users; // select&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;BONUS&lt;/h1&gt; &#xA;&lt;h2&gt;REDIS&lt;/h2&gt; &#xA;&lt;h3&gt;Useful links&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.section.io/engineering-education/how-to-set-up-and-configure-redis-caching-for-wordpress/&#34;&gt;What is redis works with wordpress and what is a cache&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.vultr.com/docshow-to-setup-redis-caching-for-wordpress-with-ubuntu-20-04-and-nginx/&#34;&gt;How to set up redis (english article)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gaelbillon.com/installer-et-configurer-redis-pour-wordpress-en-5-minutes/&#34;&gt;how to set up redis(french article)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Definition&lt;/h3&gt; &#xA;&lt;p&gt;Remote Dictionary Server (Redis) is an in-memory, persistent, key-value database known as a data structure server. One important factor that differentiates Redis from similar servers is its ability to store and manipulate high-level data types (common examples include lists, maps, sets, and sorted sets).&lt;/p&gt; &#xA;&lt;h3&gt;REDIS useful commands&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;redis-cli // to connect with the cli&#xA;redis-server --protected-mode no // To set up redis when you launch your image&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;How to set up REDIS&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Create a dockerfile&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Install redis on it&lt;/li&gt; &#xA;   &lt;li&gt;Copy the .sh in your image&lt;/li&gt; &#xA;   &lt;li&gt;RUN the .sh&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Create a sheel script&lt;/strong&gt; &lt;em&gt;Redis by default has a redis.conf and we need to modify 3 values on it&lt;/em&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Modify the value on the .conf document with the sed function&lt;/li&gt; &#xA;   &lt;li&gt;Run the redis-server command to install it&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Modify the dockerfile of wordpress&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;You need to DL the wp-cli and you need to move it it the app directory (/usr/bin/wordpress)&lt;/li&gt; &#xA;   &lt;li&gt;Add the installation of redis and php-redis&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Modify your script on wordpress file&lt;/strong&gt;&lt;br&gt; &lt;em&gt;To do this, we can set directly information in the script for wordpress wpcli command&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Modify the wp-config.php file &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Define the redis Host&lt;/li&gt; &#xA;   &lt;li&gt;Define the redis Port // To redirect wordpress port on this port&lt;/li&gt; &#xA;   &lt;li&gt;Define wp cache key salt&lt;/li&gt; &#xA;   &lt;li&gt;Define wp redis password&lt;/li&gt; &#xA;   &lt;li&gt;Define wp redis client&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Install the redis-cache plugin, updates and enables it&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;How to know your redis is installed on wordpress and running&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;Check redis is properly installed on your redis image&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Launch the command &#39;redis-cli -h localhost&#39; on your redis image, your should connect to your localhost. Then do ping and the answer should be PONG. Great your redis is installed.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;&lt;strong&gt;Check if the plugin is installed on wordpress&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Go to your wp-admin panel on wordpress : for me it is &lt;a href=&#34;https://vbachele.42.fr&#34;&gt;https://vbachele.42.fr&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;click on plugins on the left tab&lt;/li&gt; &#xA;   &lt;li&gt;If you see &#34;Redis Object Cache&#34;, Congrats !, click on settings and you will see Status &#34;Connected&#34; in green&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;FTP SERVER&lt;/h2&gt; &#xA;&lt;h3&gt;Useful links&lt;/h3&gt; &#xA;&lt;p&gt;&lt;em&gt;This is the most difficult of the bonus to do&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://titanftp.com/2022/07/05/what-is-an-ftp-server/&#34;&gt;What is an FTP server?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Vsftpd&#34;&gt;What is vstftpd&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://praveen.kumar.in/2009/05/31setting-up-ftps-using-vsftpd-for-wordpress-plugins-auto-upgrade/&#34;&gt;Install an ftp server with wordpress&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://linux.developpez.com/vsftpd/&#34;&gt;Understand vstftpd.conf file (french version)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Definition&lt;/h3&gt; &#xA;&lt;p&gt;An FTP Server, in the simplest of definitions, is a software application that enables the transfer of files from one computer to another. FTP (which stands for “File Transfer Protocol”) is a way to transfer files to any computer in the world that is connected to the Internet. For wordpress it allows to modify ealisy your files like the wordpress files or your code.&lt;/p&gt; &#xA;&lt;h3&gt;How to set up your ftp server ?&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Create a dockerfile&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Download vsftpd (a ftp secure secure server)&lt;/li&gt; &#xA;   &lt;li&gt;Copy the .conf in your ftp image&lt;/li&gt; &#xA;   &lt;li&gt;Run your script to install ftp_server&lt;/li&gt; &#xA;   &lt;li&gt;Run your ftp_server&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Modify your docker-composer.yml&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Create your image as usual&lt;/li&gt; &#xA;   &lt;li&gt;Add the port 20 and 21 (port by default for ftp servers)&lt;/li&gt; &#xA;   &lt;li&gt;Put the same volumes as your wordpress &amp;amp;&amp;amp; nginx&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Create a script to execute&lt;/strong&gt; &lt;em&gt;In this script we will create a user, give rights&lt;/em&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Create a user&lt;/li&gt; &#xA;   &lt;li&gt;give him the right to your www files&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Create .conf_file&lt;/strong&gt; &lt;em&gt;In this .conf you will have to configure your file to allow the localhost&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;How you know it works?&lt;/h3&gt; &#xA;&lt;p&gt;I did the test on my macOS (should work everywhere), you have to download filezilla for exemple it is a ftp client which will communicate with our vsftpd server. Once installed as the image shows below, you should see the directory you put in your .conf file with the line &lt;em&gt;local_root=/var/www/html&lt;/em&gt;. If you add a file in the /var/www/html directory from filezilla, you should be able to see it in you container nginx, wordpress or ftp-server.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/vbachele/Inception/main/images/ftp_server_filezilla.png&#34; alt=&#34;filezilla client&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ADMINER&lt;/h2&gt; &#xA;&lt;h3&gt;Definition&lt;/h3&gt; &#xA;&lt;p&gt;Replace phpMyAdmin with Adminer and you will get a tidier user interface, better support for MySQL features, higher performance and more security.&lt;/p&gt; &#xA;&lt;h3&gt;How to set up adminer&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Create a dockerfile&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Download curl &amp;amp;&amp;amp; php&lt;/li&gt; &#xA;   &lt;li&gt;Download the version of adminer&lt;/li&gt; &#xA;   &lt;li&gt;Move the adminer php file to the index.php file (located in var/www/html)&lt;/li&gt; &#xA;   &lt;li&gt;Add the user www-data&lt;/li&gt; &#xA;   &lt;li&gt;Move your conf file in the php-fpm.d directory&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Create a &lt;a href=&#34;http://www.conf&#34;&gt;www.conf&lt;/a&gt; file&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;You need to add the listen port (&lt;em&gt;in my case the 9000&lt;/em&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;Add the listen owner and listen group &lt;em&gt;(in my case : www-data)&lt;/em&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Modify the nginx.conf file&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;You need to add in your nginx.conf a rule to listen the adminer on the port 9000.&lt;/li&gt; &#xA;   &lt;li&gt;It will check if the index.php exist&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Modify your docker-compose.yml&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Create as usual a docker image adminer in your docker-compose&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;How to know adminer is working?&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You have to put : https://&#34;your_website_name&#34;/adminer &lt;em&gt;in my case &lt;a href=&#34;https://vbachele.42.fr/adminer&#34;&gt;https://vbachele.42.fr/adminer&lt;/a&gt;&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;You should be redirect on the adminer connexion page&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Service of my choice&lt;/h2&gt; &#xA;&lt;h3&gt;Useful links&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gohugo.io/about/what-is-hugo/&#34;&gt;What is hugo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gohugo.io/getting-started/quick-start/&#34;&gt;How to set up hugo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gohugo.io/getting-started/configuration/#configure-build&#34;&gt;Configure hugo (more explanations about .toml file)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Definition&lt;/h3&gt; &#xA;&lt;p&gt;Hugo is a fast and modern static site generator written in Go, and designed to make website creation fun again.&lt;/p&gt; &#xA;&lt;h3&gt;How to set up hugo?&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Modify the docker-compose file&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Create a dockerfile&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Download hugo&lt;/li&gt; &#xA;   &lt;li&gt;Create and go the dedicate directory (for me the name is &lt;em&gt;me&lt;/em&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;Create your webiste and add your template&lt;/li&gt; &#xA;   &lt;li&gt;Copy your toml file to replace the one for your directory&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Add a config.toml file&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;The toml file is used by hugo as a configuration file&lt;/li&gt; &#xA;   &lt;li&gt;You need to add the #baseURL with your url&lt;/li&gt; &#xA;   &lt;li&gt;Your need to add the theme your downloaded on the dockerfile for my case it is &#34;m10c&#34;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Modify the .nginx file&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;You have to add a rule to listen the dedicated directory&lt;/li&gt; &#xA;   &lt;li&gt;Add the rule for the proxy pass to listen your container&lt;/li&gt; &#xA;   &lt;li&gt;include the params for the proxy for nginx&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;How to test your program?&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;- You need to go on the URL you passed (my url is *https://vbachele.42.fr/me*)&#xA;- If you see only a blank page, that means your theme is not applied it works but you need to find how to apply the theme.&#xA;- If you see a page it works !&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/vbachele/Inception/main/images/hugo.png&#34; alt=&#34;hugo_website&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Static web page&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;For this one it is easy, I took the hugo services and I did the following changes.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Update the .toml file&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;I changed the .toml file with my theme from the previous bonus to add a page about, presentation and my github link.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Create a dockerfile&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Update your docker-compose.yml&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Update the .nginx conf file&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;You need to update the .conf file to listen your new image in order to display the website.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Create your static pages&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;I created the about page in markdown&lt;/li&gt; &#xA;   &lt;li&gt;I created the presentation page in markdown&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;Here is the website&lt;/strong&gt; &lt;img src=&#34;https://raw.githubusercontent.com/vbachele/Inception/main/images/static_page.png&#34; alt=&#34;static web page&#34;&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>jangrewe/gitlab-ci-android</title>
    <updated>2023-05-18T01:33:56Z</updated>
    <id>tag:github.com,2023-05-18:/jangrewe/gitlab-ci-android</id>
    <link href="https://github.com/jangrewe/gitlab-ci-android" rel="alternate"></link>
    <summary type="html">&lt;p&gt;GitLab CI image for building Android apps&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;gitlab-ci-android&lt;/h1&gt; &#xA;&lt;p&gt;This Docker image contains the Android SDK and most common packages necessary for building Android apps in a CI tool like GitLab CI. Make sure your CI environment&#39;s caching works as expected, this greatly improves the build time, especially if you use multiple build jobs.&lt;/p&gt; &#xA;&lt;p&gt;A &lt;code&gt;.gitlab-ci.yml&lt;/code&gt; with caching of your project&#39;s dependencies would look like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;image: jangrewe/gitlab-ci-android&#xA;&#xA;stages:&#xA;- build&#xA;&#xA;before_script:&#xA;- export GRADLE_USER_HOME=$(pwd)/.gradle&#xA;- chmod +x ./gradlew&#xA;&#xA;cache:&#xA;  key: ${CI_PROJECT_ID}&#xA;  paths:&#xA;  - .gradle/&#xA;&#xA;build:&#xA;  stage: build&#xA;  script:&#xA;  - ./gradlew assembleDebug&#xA;  artifacts:&#xA;    paths:&#xA;    - app/build/outputs/apk/app-debug.apk&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>