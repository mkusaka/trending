<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dockerfile Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-10-17T01:33:27Z</updated>
  <subtitle>Daily Trending of Dockerfile in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>davidgasquez/datadex</title>
    <updated>2022-10-17T01:33:27Z</updated>
    <id>tag:github.com,2022-10-17:/davidgasquez/datadex</id>
    <link href="https://github.com/davidgasquez/datadex" rel="alternate"></link>
    <summary type="html">&lt;p&gt;ðŸ’¾ Bring the modern data stack to Open Data!&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img alt=&#34;Logo&#34; src=&#34;https://user-images.githubusercontent.com/1682202/160557212-c23c2bea-4179-4223-abfe-90f4a92e8aaa.png#gh-light-mode-only&#34; width=&#34;400&#34;&gt; &lt;img alt=&#34;Logo&#34; src=&#34;https://user-images.githubusercontent.com/1682202/160557880-ebd4d53f-5ed8-40d2-b20c-7da90443f389.png#gh-dark-mode-only&#34; width=&#34;400&#34;&gt; &lt;/p&gt;&#xA;&lt;h4 align=&#34;center&#34;&gt; Model Open Data collaboratively using &lt;a href=&#34;https://docs.getdbt.com/docs/introduction&#34;&gt;dbt&lt;/a&gt; and &lt;a href=&#34;https://duckdb.org&#34;&gt;DuckDB&lt;/a&gt; &lt;/h4&gt; &#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;h2&gt;What is Datadex?&lt;/h2&gt; &#xA;&lt;p&gt;Datadex is a proof of concept project to explore how people could model Open Tabular Datasets using SQL. Thanks to &lt;a href=&#34;https://docs.getdbt.com/docs/introduction&#34;&gt;dbt&lt;/a&gt; and &lt;a href=&#34;https://duckdb.org/&#34;&gt;DuckDB&lt;/a&gt; you can transform data by simply writing select statements or import someone else&#39;s model and build on it!&lt;/p&gt; &#xA;&lt;h3&gt;Features&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Open. Run it from your laptop, the browser, EC2...!&lt;/li&gt; &#xA; &lt;li&gt;Data as code. Version your datasets as dbt packages!&lt;/li&gt; &#xA; &lt;li&gt;Package management. Publish and share your models for other people to build on top of them!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;This is an example of how you can use Datadex to model data. Is already configured with some sample datasets. Get things working end to end with the following steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Setup dependencies with &lt;code&gt;make deps&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Build your dbt models and save them to Parquet files with &lt;code&gt;make run&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Explore the data with &lt;code&gt;make rill&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/1682202/195888267-ab119222-9269-4e00-98a9-8cf3a6405252.png&#34; alt=&#34;rill&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;What can you do with Datadex?&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Model local and remote datasets (&lt;code&gt;csv&lt;/code&gt; or &lt;code&gt;parquet&lt;/code&gt;) with &lt;code&gt;dbt&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Use any of the other awesome &lt;code&gt;dbt&lt;/code&gt; features like &lt;code&gt;tests&lt;/code&gt; and &lt;code&gt;docs&lt;/code&gt;. &lt;a href=&#34;https://davidgasquez.github.io/datadex&#34;&gt;Docs are automatically generated and published on GitHub Pages&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/1682202/195890290-a27498dd-1d7b-4613-ba9a-4848fb3001be.png&#34; alt=&#34;docs&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;p&gt;The fastest way to start using Datadex is via &lt;a href=&#34;https://code.visualstudio.com/docs/remote/containers&#34;&gt;VSCode Remote Containers&lt;/a&gt;. Once inside the develpment environment, you&#39;ll only need to run &lt;code&gt;make deps&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;PS: The development environment can also run in your browser thanks to GitHub Codespaces.&lt;/p&gt; &#xA;&lt;h2&gt;Motivation&lt;/h2&gt; &#xA;&lt;p&gt;This small project was created after &lt;a href=&#34;https://publish.obsidian.md/davidgasquez/Open+Data&#34;&gt;thinking how an Open Data Protocol could look like&lt;/a&gt;! I just wanted to stitch together a few open source technologies and see what could they do.&lt;/p&gt; &#xA;&lt;h2&gt;Acknowledgements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;This proof of concept was created thanks to open source projects like &lt;a href=&#34;https://www.duckdb.org/&#34;&gt;DuckDB&lt;/a&gt; and &lt;a href=&#34;https://getdbt.com&#34;&gt;dbt&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Datadex name was inspired by &lt;a href=&#34;https://juan.benet.ai/blog/2014-03-11-discussion-scienceexchange/&#34;&gt;Juan Benet awesome &lt;code&gt;data&lt;/code&gt; projects&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>linuxserver/docker-transmission</title>
    <updated>2022-10-17T01:33:27Z</updated>
    <id>tag:github.com,2022-10-17:/linuxserver/docker-transmission</id>
    <link href="https://github.com/linuxserver/docker-transmission" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://linuxserver.io&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/linuxserver/docker-templates/master/linuxserver.io/img/linuxserver_medium.png&#34; alt=&#34;linuxserver.io&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://blog.linuxserver.io&#34; title=&#34;all the things you can do with our containers including How-To guides, opinions and much more!&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1.svg?color=94398d&amp;amp;labelColor=555555&amp;amp;logoColor=ffffff&amp;amp;style=for-the-badge&amp;amp;label=linuxserver.io&amp;amp;message=Blog&#34; alt=&#34;Blog&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/YWrKVTn&#34; title=&#34;realtime support / chat with the community and the team.&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/354974912613449730.svg?color=94398d&amp;amp;labelColor=555555&amp;amp;logoColor=ffffff&amp;amp;style=for-the-badge&amp;amp;label=Discord&amp;amp;logo=discord&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discourse.linuxserver.io&#34; title=&#34;post on our community forum.&#34;&gt;&lt;img src=&#34;https://img.shields.io/discourse/https/discourse.linuxserver.io/topics.svg?color=94398d&amp;amp;labelColor=555555&amp;amp;logoColor=ffffff&amp;amp;style=for-the-badge&amp;amp;logo=discourse&#34; alt=&#34;Discourse&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://fleet.linuxserver.io&#34; title=&#34;an online web interface which displays all of our maintained images.&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1.svg?color=94398d&amp;amp;labelColor=555555&amp;amp;logoColor=ffffff&amp;amp;style=for-the-badge&amp;amp;label=linuxserver.io&amp;amp;message=Fleet&#34; alt=&#34;Fleet&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/linuxserver&#34; title=&#34;view the source for all of our repositories.&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1.svg?color=94398d&amp;amp;labelColor=555555&amp;amp;logoColor=ffffff&amp;amp;style=for-the-badge&amp;amp;label=linuxserver.io&amp;amp;message=GitHub&amp;amp;logo=github&#34; alt=&#34;GitHub&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/linuxserver&#34; title=&#34;please consider helping us by either donating or contributing to our budget&#34;&gt;&lt;img src=&#34;https://img.shields.io/opencollective/all/linuxserver.svg?color=94398d&amp;amp;labelColor=555555&amp;amp;logoColor=ffffff&amp;amp;style=for-the-badge&amp;amp;label=Supporters&amp;amp;logo=open%20collective&#34; alt=&#34;Open Collective&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://linuxserver.io&#34;&gt;LinuxServer.io&lt;/a&gt; team brings you another container release featuring:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;regular and timely application updates&lt;/li&gt; &#xA; &lt;li&gt;easy user mappings (PGID, PUID)&lt;/li&gt; &#xA; &lt;li&gt;custom base image with s6 overlay&lt;/li&gt; &#xA; &lt;li&gt;weekly base OS updates with common layers across the entire LinuxServer.io ecosystem to minimise space usage, down time and bandwidth&lt;/li&gt; &#xA; &lt;li&gt;regular security updates&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Find us at:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.linuxserver.io&#34;&gt;Blog&lt;/a&gt; - all the things you can do with our containers including How-To guides, opinions and much more!&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://discord.gg/YWrKVTn&#34;&gt;Discord&lt;/a&gt; - realtime support / chat with the community and the team.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://discourse.linuxserver.io&#34;&gt;Discourse&lt;/a&gt; - post on our community forum.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://fleet.linuxserver.io&#34;&gt;Fleet&lt;/a&gt; - an online web interface which displays all of our maintained images.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/linuxserver&#34;&gt;GitHub&lt;/a&gt; - view the source for all of our repositories.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://opencollective.com/linuxserver&#34;&gt;Open Collective&lt;/a&gt; - please consider helping us by either donating or contributing to our budget&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;&lt;a href=&#34;https://github.com/linuxserver/docker-transmission&#34;&gt;linuxserver/transmission&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://scarf.sh/gateway/linuxserver-ci/docker/linuxserver%2Ftransmission&#34;&gt;&lt;img src=&#34;https://scarf.sh/installs-badge/linuxserver-ci/linuxserver%2Ftransmission?color=94398d&amp;amp;label-color=555555&amp;amp;logo-color=ffffff&amp;amp;style=for-the-badge&amp;amp;package-type=docker&#34; alt=&#34;Scarf.io pulls&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/linuxserver/docker-transmission&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/linuxserver/docker-transmission.svg?color=94398d&amp;amp;labelColor=555555&amp;amp;logoColor=ffffff&amp;amp;style=for-the-badge&amp;amp;logo=github&#34; alt=&#34;GitHub Stars&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/linuxserver/docker-transmission/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/linuxserver/docker-transmission.svg?color=94398d&amp;amp;labelColor=555555&amp;amp;logoColor=ffffff&amp;amp;style=for-the-badge&amp;amp;logo=github&#34; alt=&#34;GitHub Release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/linuxserver/docker-transmission/packages&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1.svg?color=94398d&amp;amp;labelColor=555555&amp;amp;logoColor=ffffff&amp;amp;style=for-the-badge&amp;amp;label=linuxserver.io&amp;amp;message=GitHub%20Package&amp;amp;logo=github&#34; alt=&#34;GitHub Package Repository&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitlab.com/linuxserver.io/docker-transmission/container_registry&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1.svg?color=94398d&amp;amp;labelColor=555555&amp;amp;logoColor=ffffff&amp;amp;style=for-the-badge&amp;amp;label=linuxserver.io&amp;amp;message=GitLab%20Registry&amp;amp;logo=gitlab&#34; alt=&#34;GitLab Container Registry&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://quay.io/repository/linuxserver.io/transmission&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1.svg?color=94398d&amp;amp;labelColor=555555&amp;amp;logoColor=ffffff&amp;amp;style=for-the-badge&amp;amp;label=linuxserver.io&amp;amp;message=Quay.io&#34; alt=&#34;Quay.io&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/linuxserver/transmission&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/pulls/linuxserver/transmission.svg?color=94398d&amp;amp;labelColor=555555&amp;amp;logoColor=ffffff&amp;amp;style=for-the-badge&amp;amp;label=pulls&amp;amp;logo=docker&#34; alt=&#34;Docker Pulls&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/linuxserver/transmission&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/stars/linuxserver/transmission.svg?color=94398d&amp;amp;labelColor=555555&amp;amp;logoColor=ffffff&amp;amp;style=for-the-badge&amp;amp;label=stars&amp;amp;logo=docker&#34; alt=&#34;Docker Stars&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://ci.linuxserver.io/job/Docker-Pipeline-Builders/job/docker-transmission/job/master/&#34;&gt;&lt;img src=&#34;https://img.shields.io/jenkins/build?labelColor=555555&amp;amp;logoColor=ffffff&amp;amp;style=for-the-badge&amp;amp;jobUrl=https%3A%2F%2Fci.linuxserver.io%2Fjob%2FDocker-Pipeline-Builders%2Fjob%2Fdocker-transmission%2Fjob%2Fmaster%2F&amp;amp;logo=jenkins&#34; alt=&#34;Jenkins Build&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://ci-tests.linuxserver.io/linuxserver/transmission/latest/index.html&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/dynamic/yaml?color=94398d&amp;amp;labelColor=555555&amp;amp;logoColor=ffffff&amp;amp;style=for-the-badge&amp;amp;label=CI&amp;amp;query=CI&amp;amp;url=https%3A%2F%2Fci-tests.linuxserver.io%2Flinuxserver%2Ftransmission%2Flatest%2Fci-status.yml&#34; alt=&#34;LSIO CI&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.transmissionbt.com/&#34;&gt;Transmission&lt;/a&gt; is designed for easy, powerful use. Transmission has the features you want from a BitTorrent client: encryption, a web interface, peer exchange, magnet links, DHT, ÂµTP, UPnP and NAT-PMP port forwarding, webseed support, watch directories, tracker editing, global and per-torrent speed limits, and more.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.transmissionbt.com/&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/linuxserver/docker-templates/master/linuxserver.io/img/transmission.png&#34; alt=&#34;transmission&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Supported Architectures&lt;/h2&gt; &#xA;&lt;p&gt;We utilise the docker manifest for multi-platform awareness. More information is available from docker &lt;a href=&#34;https://github.com/docker/distribution/raw/master/docs/spec/manifest-v2-2.md#manifest-list&#34;&gt;here&lt;/a&gt; and our announcement &lt;a href=&#34;https://blog.linuxserver.io/2019/02/21/the-lsio-pipeline-project/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Simply pulling &lt;code&gt;lscr.io/linuxserver/transmission:latest&lt;/code&gt; should retrieve the correct image for your arch, but you can also pull specific arch images via tags.&lt;/p&gt; &#xA;&lt;p&gt;The architectures supported by this image are:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Architecture&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Available&lt;/th&gt; &#xA;   &lt;th&gt;Tag&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;x86-64&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;âœ…&lt;/td&gt; &#xA;   &lt;td&gt;amd64-&amp;lt;version tag&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;arm64&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;âœ…&lt;/td&gt; &#xA;   &lt;td&gt;arm64v8-&amp;lt;version tag&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;armhf&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;âœ…&lt;/td&gt; &#xA;   &lt;td&gt;arm32v7-&amp;lt;version tag&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Application Setup&lt;/h2&gt; &#xA;&lt;p&gt;Webui is on port 9091, the settings.json file in /config has extra settings not available in the webui. Stop the container before editing it or any changes won&#39;t be saved.&lt;/p&gt; &#xA;&lt;p&gt;If you choose to use transmission-web-control as your default UI, just note that the origional Web UI will not be available to you despite the button being present.&lt;/p&gt; &#xA;&lt;h2&gt;Securing the webui with a username/password.&lt;/h2&gt; &#xA;&lt;p&gt;Use the &lt;code&gt;USER&lt;/code&gt; and &lt;code&gt;PASS&lt;/code&gt; variables in docker run/create/compose to set authentication. Do not manually edit the &lt;code&gt;settings.json&lt;/code&gt; to input user/pass, otherwise transmission cannot be stopped cleanly by the s6 supervisor.&lt;/p&gt; &#xA;&lt;h2&gt;Updating Blocklists Automatically&lt;/h2&gt; &#xA;&lt;p&gt;This requires &lt;code&gt;&#34;blocklist-enabled&#34;: true,&lt;/code&gt; to be set. By setting this to true, it is assumed you have also populated &lt;code&gt;blocklist-url&lt;/code&gt; with a valid block list.&lt;/p&gt; &#xA;&lt;p&gt;The automatic update is a shell script that downloads a blocklist from the url stored in the settings.json, gunzips it, and restarts the transmission daemon.&lt;/p&gt; &#xA;&lt;p&gt;The automatic update will run once a day at 3am local server time.&lt;/p&gt; &#xA;&lt;h2&gt;Using whitelist&lt;/h2&gt; &#xA;&lt;p&gt;Use &lt;code&gt;WHITELIST&lt;/code&gt; to enable a list of ip as whitelist. This enable support for &lt;code&gt;rpc-whitelist&lt;/code&gt;. When &lt;code&gt;WHITELIST&lt;/code&gt; is empty support for whitelist is disabled.&lt;/p&gt; &#xA;&lt;p&gt;Use &lt;code&gt;HOST_WHITELIST&lt;/code&gt; to enable an list of dns names as host-whitelist. This enable support for &lt;code&gt;rpc-host-whitelist&lt;/code&gt;. When &lt;code&gt;HOST_WHITELIST&lt;/code&gt; is empty support for host-whitelist is disabled.&lt;/p&gt; &#xA;&lt;h2&gt;Use alternative Transmission torrent ports&lt;/h2&gt; &#xA;&lt;p&gt;Use &lt;code&gt;PEERPORT&lt;/code&gt; to specify the port(s) Transmission should listen on. This disables random port selection. This should be the same as the port mapped in your docker configuration.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Here are some example snippets to help you get started creating a container.&lt;/p&gt; &#xA;&lt;h3&gt;docker-compose (recommended, &lt;a href=&#34;https://docs.linuxserver.io/general/docker-compose&#34;&gt;click here for more info&lt;/a&gt;)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;---&#xA;version: &#34;2.1&#34;&#xA;services:&#xA;  transmission:&#xA;    image: lscr.io/linuxserver/transmission:latest&#xA;    container_name: transmission&#xA;    environment:&#xA;      - PUID=1000&#xA;      - PGID=1000&#xA;      - TZ=Europe/London&#xA;      - TRANSMISSION_WEB_HOME=/combustion-release/ #optional&#xA;      - USER=username #optional&#xA;      - PASS=password #optional&#xA;      - WHITELIST=iplist #optional&#xA;      - PEERPORT=peerport #optional&#xA;      - HOST_WHITELIST=dnsname list #optional&#xA;    volumes:&#xA;      - /path/to/data:/config&#xA;      - /path/to/downloads:/downloads&#xA;      - /path/to/watch/folder:/watch&#xA;    ports:&#xA;      - 9091:9091&#xA;      - 51413:51413&#xA;      - 51413:51413/udp&#xA;    restart: unless-stopped&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;docker cli (&lt;a href=&#34;https://docs.docker.com/engine/reference/commandline/cli/&#34;&gt;click here for more info&lt;/a&gt;)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run -d \&#xA;  --name=transmission \&#xA;  -e PUID=1000 \&#xA;  -e PGID=1000 \&#xA;  -e TZ=Europe/London \&#xA;  -e TRANSMISSION_WEB_HOME=/combustion-release/ `#optional` \&#xA;  -e USER=username `#optional` \&#xA;  -e PASS=password `#optional` \&#xA;  -e WHITELIST=iplist `#optional` \&#xA;  -e PEERPORT=peerport `#optional` \&#xA;  -e HOST_WHITELIST=dnsname list `#optional` \&#xA;  -p 9091:9091 \&#xA;  -p 51413:51413 \&#xA;  -p 51413:51413/udp \&#xA;  -v /path/to/data:/config \&#xA;  -v /path/to/downloads:/downloads \&#xA;  -v /path/to/watch/folder:/watch \&#xA;  --restart unless-stopped \&#xA;  lscr.io/linuxserver/transmission:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Parameters&lt;/h2&gt; &#xA;&lt;p&gt;Container images are configured using parameters passed at runtime (such as those above). These parameters are separated by a colon and indicate &lt;code&gt;&amp;lt;external&amp;gt;:&amp;lt;internal&amp;gt;&lt;/code&gt; respectively. For example, &lt;code&gt;-p 8080:80&lt;/code&gt; would expose port &lt;code&gt;80&lt;/code&gt; from inside the container to be accessible from the host&#39;s IP on port &lt;code&gt;8080&lt;/code&gt; outside the container.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Parameter&lt;/th&gt; &#xA;   &lt;th&gt;Function&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;-p 9091&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;WebUI&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;-p 51413&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Torrent Port TCP&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;-p 51413/udp&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Torrent Port UDP&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;-e PUID=1000&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;for UserID - see below for explanation&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;-e PGID=1000&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;for GroupID - see below for explanation&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;-e TZ=Europe/London&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Specify a timezone to use EG Europe/London.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;-e TRANSMISSION_WEB_HOME=/combustion-release/&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Specify an alternative UI options are &lt;a href=&#34;https://github.com/Secretmapper/combustion&#34;&gt;&lt;code&gt;/combustion-release/&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://github.com/ronggang/transmission-web-control&#34;&gt;&lt;code&gt;/transmission-web-control/&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://github.com/endor/kettu&#34;&gt;&lt;code&gt;/kettu/&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://github.com/johman10/flood-for-transmission&#34;&gt;&lt;code&gt;/flood-for-transmission/&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&#34;https://github.com/6c65726f79/Transmissionic&#34;&gt;&lt;code&gt;/transmissionic/&lt;/code&gt;&lt;/a&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;-e USER=username&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Specify an optional username for the interface&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;-e PASS=password&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Specify an optional password for the interface&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;-e WHITELIST=iplist&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Specify an optional list of comma separated ip whitelist. Fills rpc-whitelist setting.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;-e PEERPORT=peerport&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Specify an optional port for torrent TCP/UDP connections. Fills peer-port setting.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;-e HOST_WHITELIST=dnsname list&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Specify an optional list of comma separated dns name whitelist. Fills rpc-host-whitelist setting.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;-v /config&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Where transmission should store config files and logs.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;-v /downloads&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Local path for downloads.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;-v /watch&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Watch folder for torrent files.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Environment variables from files (Docker secrets)&lt;/h2&gt; &#xA;&lt;p&gt;You can set any environment variable from a file by using a special prepend &lt;code&gt;FILE__&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;As an example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;-e FILE__PASSWORD=/run/secrets/mysecretpassword&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Will set the environment variable &lt;code&gt;PASSWORD&lt;/code&gt; based on the contents of the &lt;code&gt;/run/secrets/mysecretpassword&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;h2&gt;Umask for running applications&lt;/h2&gt; &#xA;&lt;p&gt;For all of our images we provide the ability to override the default umask settings for services started within the containers using the optional &lt;code&gt;-e UMASK=022&lt;/code&gt; setting. Keep in mind umask is not chmod it subtracts from permissions based on it&#39;s value it does not add. Please read up &lt;a href=&#34;https://en.wikipedia.org/wiki/Umask&#34;&gt;here&lt;/a&gt; before asking for support.&lt;/p&gt; &#xA;&lt;h2&gt;User / Group Identifiers&lt;/h2&gt; &#xA;&lt;p&gt;When using volumes (&lt;code&gt;-v&lt;/code&gt; flags) permissions issues can arise between the host OS and the container, we avoid this issue by allowing you to specify the user &lt;code&gt;PUID&lt;/code&gt; and group &lt;code&gt;PGID&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Ensure any volume directories on the host are owned by the same user you specify and any permissions issues will vanish like magic.&lt;/p&gt; &#xA;&lt;p&gt;In this instance &lt;code&gt;PUID=1000&lt;/code&gt; and &lt;code&gt;PGID=1000&lt;/code&gt;, to find yours use &lt;code&gt;id user&lt;/code&gt; as below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  $ id username&#xA;    uid=1000(dockeruser) gid=1000(dockergroup) groups=1000(dockergroup)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Docker Mods&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://mods.linuxserver.io/?mod=transmission&#34; title=&#34;view available mods for this container.&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/dynamic/yaml?color=94398d&amp;amp;labelColor=555555&amp;amp;logoColor=ffffff&amp;amp;style=for-the-badge&amp;amp;label=transmission&amp;amp;query=%24.mods%5B%27transmission%27%5D.mod_count&amp;amp;url=https%3A%2F%2Fraw.githubusercontent.com%2Flinuxserver%2Fdocker-mods%2Fmaster%2Fmod-list.yml&#34; alt=&#34;Docker Mods&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://mods.linuxserver.io/?mod=universal&#34; title=&#34;view available universal mods.&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/dynamic/yaml?color=94398d&amp;amp;labelColor=555555&amp;amp;logoColor=ffffff&amp;amp;style=for-the-badge&amp;amp;label=universal&amp;amp;query=%24.mods%5B%27universal%27%5D.mod_count&amp;amp;url=https%3A%2F%2Fraw.githubusercontent.com%2Flinuxserver%2Fdocker-mods%2Fmaster%2Fmod-list.yml&#34; alt=&#34;Docker Universal Mods&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;We publish various &lt;a href=&#34;https://github.com/linuxserver/docker-mods&#34;&gt;Docker Mods&lt;/a&gt; to enable additional functionality within the containers. The list of Mods available for this image (if any) as well as universal mods that can be applied to any one of our images can be accessed via the dynamic badges above.&lt;/p&gt; &#xA;&lt;h2&gt;Support Info&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Shell access whilst the container is running: &lt;code&gt;docker exec -it transmission /bin/bash&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;To monitor the logs of the container in realtime: &lt;code&gt;docker logs -f transmission&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;container version number &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;docker inspect -f &#39;{{ index .Config.Labels &#34;build_version&#34; }}&#39; transmission&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;image version number &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;docker inspect -f &#39;{{ index .Config.Labels &#34;build_version&#34; }}&#39; lscr.io/linuxserver/transmission:latest&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Updating Info&lt;/h2&gt; &#xA;&lt;p&gt;Most of our images are static, versioned, and require an image update and container recreation to update the app inside. With some exceptions (ie. nextcloud, plex), we do not recommend or support updating apps inside the container. Please consult the &lt;a href=&#34;https://raw.githubusercontent.com/linuxserver/docker-transmission/master/#application-setup&#34;&gt;Application Setup&lt;/a&gt; section above to see if it is recommended for the image.&lt;/p&gt; &#xA;&lt;p&gt;Below are the instructions for updating containers:&lt;/p&gt; &#xA;&lt;h3&gt;Via Docker Compose&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Update all images: &lt;code&gt;docker-compose pull&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;or update a single image: &lt;code&gt;docker-compose pull transmission&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Let compose update all containers as necessary: &lt;code&gt;docker-compose up -d&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;or update a single container: &lt;code&gt;docker-compose up -d transmission&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;You can also remove the old dangling images: &lt;code&gt;docker image prune&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Via Docker Run&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Update the image: &lt;code&gt;docker pull lscr.io/linuxserver/transmission:latest&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Stop the running container: &lt;code&gt;docker stop transmission&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Delete the container: &lt;code&gt;docker rm transmission&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Recreate a new container with the same docker run parameters as instructed above (if mapped correctly to a host folder, your &lt;code&gt;/config&lt;/code&gt; folder and settings will be preserved)&lt;/li&gt; &#xA; &lt;li&gt;You can also remove the old dangling images: &lt;code&gt;docker image prune&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Via Watchtower auto-updater (only use if you don&#39;t remember the original parameters)&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Pull the latest image at its tag and replace it with the same env variables in one run:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run --rm \&#xA;-v /var/run/docker.sock:/var/run/docker.sock \&#xA;containrrr/watchtower \&#xA;--run-once transmission&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;You can also remove the old dangling images: &lt;code&gt;docker image prune&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; We do not endorse the use of Watchtower as a solution to automated updates of existing Docker containers. In fact we generally discourage automated updates. However, this is a useful tool for one-time manual updates of containers where you have forgotten the original parameters. In the long term, we highly recommend using &lt;a href=&#34;https://docs.linuxserver.io/general/docker-compose&#34;&gt;Docker Compose&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Image Update Notifications - Diun (Docker Image Update Notifier)&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;We recommend &lt;a href=&#34;https://crazymax.dev/diun/&#34;&gt;Diun&lt;/a&gt; for update notifications. Other tools that automatically update containers unattended are not recommended or supported.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Building locally&lt;/h2&gt; &#xA;&lt;p&gt;If you want to make local modifications to these images for development purposes or just to customize the logic:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/linuxserver/docker-transmission.git&#xA;cd docker-transmission&#xA;docker build \&#xA;  --no-cache \&#xA;  --pull \&#xA;  -t lscr.io/linuxserver/transmission:latest .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The ARM variants can be built on x86_64 hardware using &lt;code&gt;multiarch/qemu-user-static&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run --rm --privileged multiarch/qemu-user-static:register --reset&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once registered you can define the dockerfile to use with &lt;code&gt;-f Dockerfile.aarch64&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Versions&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;12.08.22:&lt;/strong&gt; - Bump unrar to 6.1.7.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;03.04.22:&lt;/strong&gt; - Add Transmissionic as a UI option.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;21.02.22:&lt;/strong&gt; - Build unrar from source, rebase to Alpine 3.15, add symlinks neeeded for TWC. Credit @alexbelgium&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;09.07.21:&lt;/strong&gt; - Wait for the transmission-daemon termination after a caught sigterm.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;06.03.21:&lt;/strong&gt; - Add Flood for Transmission as a UI option.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;23.01.21:&lt;/strong&gt; - Rebasing to alpine 3.13.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;02.11.20:&lt;/strong&gt; - Add ca-certificates package to allow connecting to https trackers.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;02.06.20:&lt;/strong&gt; - Rebase to alpine 3.12, update to transmission 3.0, remove python2, add python3.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;11.05.20:&lt;/strong&gt; - Remove unnecessary chmod (remnant of previous change).&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;28.04.20:&lt;/strong&gt; - Use transmission-remote to update blocklist.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;30.03.20:&lt;/strong&gt; - Internalize blocklist-update.sh.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;29.03.20:&lt;/strong&gt; - Update auth info in readme.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;19.12.19:&lt;/strong&gt; - Rebasing to alpine 3.11.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;04.10.19:&lt;/strong&gt; - Update package label.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;21.08.19:&lt;/strong&gt; - Add optional user/pass environment variables, fix transmission shut down if user/pass are set.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;19.07.19:&lt;/strong&gt; - Send SIGTERM in blocklist update to properly close pid.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;28.06.19:&lt;/strong&gt; - Rebasing to alpine 3.10.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;23.03.19:&lt;/strong&gt; - Switching to new Base images, shift to arm32v7 tag.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;22.02.19:&lt;/strong&gt; - Rebase to Alpine 3.9, add themes to baseimage, add python and findutils.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;22.02.19:&lt;/strong&gt; - Catch term and clean exit.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;07.02.19:&lt;/strong&gt; - Add pipeline logic and multi arch.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;15.08.18:&lt;/strong&gt; - Rebase to alpine linux 3.8.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;12.02.18:&lt;/strong&gt; - Pull transmission from edge repo.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;10.01.18:&lt;/strong&gt; - Rebase to alpine linux 3.7.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;25.07.17:&lt;/strong&gt; - Add rsync package.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;27.05.17:&lt;/strong&gt; - Rebase to alpine linux 3.6.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;06.02.17:&lt;/strong&gt; - Rebase to alpine linux 3.5.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;15.01.17:&lt;/strong&gt; - Add p7zip, tar, unrar, and unzip packages.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;16.10.16:&lt;/strong&gt; - Blocklist autoupdate with optional authentication.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;14.10.16:&lt;/strong&gt; - Add version layer informationE.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;23.09.16:&lt;/strong&gt; - Add information about securing the webui to README.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;21.09.16:&lt;/strong&gt; - Add curl package.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;09.09.16:&lt;/strong&gt; - Add layer badges to README.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;28.08.16:&lt;/strong&gt; - Add badges to README.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;09.08.16:&lt;/strong&gt; - Rebase to alpine linux.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;06.12.15:&lt;/strong&gt; - Separate mapping for watch folder.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;16.11.15:&lt;/strong&gt; - Initial Release.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>