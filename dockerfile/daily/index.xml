<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dockerfile Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-07-22T01:30:27Z</updated>
  <subtitle>Daily Trending of Dockerfile in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>hazelcast/hazelcast-docker</title>
    <updated>2024-07-22T01:30:27Z</updated>
    <id>tag:github.com,2024-07-22:/hazelcast/hazelcast-docker</id>
    <link href="https://github.com/hazelcast/hazelcast-docker" rel="alternate"></link>
    <summary type="html">&lt;p&gt;This repository contains docker image for Hazelcast open-source in-memory data-grid.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Hazelcast Docker&lt;/h1&gt; &#xA;&lt;p&gt;This repository contains Dockerfiles for the official Hazelcast Docker images.&lt;/p&gt; &#xA;&lt;h2&gt;Quick Start&lt;/h2&gt; &#xA;&lt;h3&gt;Hazelcast&lt;/h3&gt; &#xA;&lt;p&gt;You can launch a Hazelcast Docker Container by running the following command. Check &lt;a href=&#34;https://raw.githubusercontent.com/hazelcast/hazelcast-docker/master/#hazelcast-versions&#34;&gt;Hazelcast Versions&lt;/a&gt; for the versions to replace $HAZELCAST_VERSION.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ docker run hazelcast/hazelcast:$HAZELCAST_VERSION&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This command will pull a Hazelcast Docker image and run a new Hazelcast instance.&lt;/p&gt; &#xA;&lt;h3&gt;Hazelcast Versions&lt;/h3&gt; &#xA;&lt;p&gt;You can find the full list of Hazelcast versions at the &lt;a href=&#34;https://store.docker.com/community/images/hazelcast/hazelcast/tags&#34;&gt;Official Hazelcast Docker Hub&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Hazelcast Hello World&lt;/h3&gt; &#xA;&lt;p&gt;For the simplest end-to-end scenario, you can create a Hazelcast cluster with two Docker containers and access it from the client application.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ docker run -e HZ_NETWORK_PUBLICADDRESS=&amp;lt;host_ip&amp;gt;:5701 -p 5701:5701 hazelcast/hazelcast:$HAZELCAST_VERSION&#xA;$ docker run -e HZ_NETWORK_PUBLICADDRESS=&amp;lt;host_ip&amp;gt;:5702 -p 5702:5701 hazelcast/hazelcast:$HAZELCAST_VERSION&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;each container must publish the &lt;code&gt;5701&lt;/code&gt; port under a different host machine port (&lt;code&gt;5701&lt;/code&gt; and &lt;code&gt;5702&lt;/code&gt; in the example)&lt;/li&gt; &#xA; &lt;li&gt;supplying a custom &lt;code&gt;HZ_NETWORK_PUBLICADDRESS&lt;/code&gt; is critical for autodiscovery. Otherwise, Hazelcast will bind to Docker&#39;s internal ports.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;host_ip&amp;gt;&lt;/code&gt; needs to be the host machine address that will be used for the Hazelcast communication&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;After setting up the cluster, you can start the &lt;a href=&#34;https://github.com/hazelcast/hazelcast-code-samples/tree/master/clients/basic&#34;&gt;client&lt;/a&gt; application to check if it works correctly.&lt;/p&gt; &#xA;&lt;h3&gt;Hazelcast Enterprise&lt;/h3&gt; &#xA;&lt;p&gt;You can launch a Hazelcast Enterprise Docker Container by running the following command. Check &lt;a href=&#34;https://raw.githubusercontent.com/hazelcast/hazelcast-docker/master/#hazelcast-enterprise-versions&#34;&gt;Hazelcast Enterprise Versions&lt;/a&gt; for the versions to replace $HAZELCAST_VERSION.&lt;/p&gt; &#xA;&lt;p&gt;Please request a trial license &lt;a href=&#34;https://hazelcast.com/hazelcast-enterprise-download/&#34;&gt;here&lt;/a&gt; or contact &lt;a href=&#34;mailto:sales@hazelcast.com&#34;&gt;sales@hazelcast.com&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ docker run -e HZ_LICENSEKEY=&amp;lt;your_license_key&amp;gt; hazelcast/hazelcast-enterprise:$HAZELCAST_VERSION&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Hazelcast Enterprise Versions&lt;/h3&gt; &#xA;&lt;p&gt;You can find the full list of Hazelcast Enterprise versions at the &lt;a href=&#34;https://store.docker.com/community/images/hazelcast/hazelcast-enterprise/tags&#34;&gt;Official Hazelcast Docker Hub&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Hazelcast Enterprise Hello World&lt;/h3&gt; &#xA;&lt;p&gt;To run two Hazelcast nodes, use the following commands.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ docker run -p 5701:5701 -e HZ_LICENSEKEY=&amp;lt;your_license_key&amp;gt; -e HZ_NETWORK_PUBLICADDRESS=&amp;lt;host_ip&amp;gt;:5701 hazelcast/hazelcast-enterprise:$HAZELCAST_VERSION&#xA;$ docker run -p 5702:5701 -e HZ_LICENSEKEY=&amp;lt;your_license_key&amp;gt; -e HZ_NETWORK_PUBLICADDRESS=&amp;lt;host_ip&amp;gt;:5702 hazelcast/hazelcast-enterprise:$HAZELCAST_VERSION&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;This example assumes unencrypted communication channels for Hazelcast members and clients. Hazelcast allows you to encrypt socket-level communication between Hazelcast members and between Hazelcast clients and members. Refer to &lt;a href=&#34;https://github.com/hazelcast/hazelcast-docker#tls_enabled-hazelcast-enterprise-only&#34;&gt;this section&lt;/a&gt; to learn about enabling TLS/SSL encryption.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Management Center Hello World&lt;/h3&gt; &#xA;&lt;p&gt;Whether you started the Hazelcast or Hazelcast Enterprise cluster, you could use the Management Center application to monitor and manage your cluster.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run \&#xA;  -e MC_INIT_CMD=&#34;./mc-conf.sh cluster add -H=/data -ma &amp;lt;host_ip&amp;gt;:5701 -cn dev&#34; \&#xA;  -p 8080:8080 hazelcast/management-center:$MANAGEMENT_CENTER_VERSION&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now, you can access Management Center from your browser using the following URL: &lt;code&gt;https://localhost:8080&lt;/code&gt;. You can read more about the Management Center Docker image &lt;a href=&#34;https://github.com/hazelcast/management-center-docker&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Note that the way the Management Center is started changed since Hazelcast 4.0. If you use Hazelcast 3.x, please find the instructions &lt;a href=&#34;https://github.com/hazelcast/hazelcast-docker/tree/3.12.z&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Hazelcast Defined Environment Variables&lt;/h2&gt; &#xA;&lt;h3&gt;JAVA_OPTS&lt;/h3&gt; &#xA;&lt;p&gt;As shown below, you can use &lt;code&gt;JAVA_OPTS&lt;/code&gt; environment variable if you need to pass multiple VM arguments to your Hazelcast member.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ docker run -e JAVA_OPTS=&#34;-Xms512M -Xmx1024M&#34; hazelcast/hazelcast&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;PROMETHEUS_PORT&lt;/h3&gt; &#xA;&lt;p&gt;The port of the JMX Prometheus agent. For example, if you set &lt;code&gt;PROMETHEUS_PORT=8080&lt;/code&gt;, then you can access metrics at: &lt;code&gt;http://&amp;lt;hostname&amp;gt;:8080/metrics&lt;/code&gt;. You can also use &lt;code&gt;PROMETHEUS_CONFIG&lt;/code&gt; to set a path to the custom configuration.&lt;/p&gt; &#xA;&lt;h3&gt;LOGGING_LEVEL&lt;/h3&gt; &#xA;&lt;p&gt;The logging level can be changed using the &lt;code&gt;LOGGING_LEVEL&lt;/code&gt; variable, for example, to see the &lt;code&gt;DEBUG&lt;/code&gt; logs.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ docker run -e LOGGING_LEVEL=DEBUG hazelcast/hazelcast&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Available logging levels are (from highest to lowest): &lt;code&gt;OFF&lt;/code&gt;, &lt;code&gt;FATAL&lt;/code&gt;, &lt;code&gt;ERROR&lt;/code&gt;, &lt;code&gt;WARN&lt;/code&gt;, &lt;code&gt;INFO&lt;/code&gt;, &lt;code&gt;DEBUG&lt;/code&gt;, &lt;code&gt;TRACE&lt;/code&gt; and &lt;code&gt;ALL&lt;/code&gt;. The default logging level is &lt;code&gt;INFO&lt;/code&gt;. Invalid levels will be assumed &lt;code&gt;OFF&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Note that if you need some more custom logging configuration, you can specify a configuration file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ docker run -v &amp;lt;config-file-path&amp;gt;:/opt/hazelcast/config/log4j2.properties hazelcast/hazelcast&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;LOGGING_CONFIG&lt;/h3&gt; &#xA;&lt;p&gt;&lt;em&gt;since version 5.1&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;The logging configuration can be changed using the &lt;code&gt;LOGGING_CONFIG&lt;/code&gt; variable, for example you can mount your own Log4j2 configuration file and set the path using this variable. The default value is set to &lt;code&gt;/opt/hazelcast/config/log4j2.properties&lt;/code&gt;. A relative or an absolute path can be provided.&lt;/p&gt; &#xA;&lt;p&gt;We also provide &lt;code&gt;log4j2-json.properties&lt;/code&gt; file in the image. This is using the Log4j2 &lt;a href=&#34;https://logging.apache.org/log4j/2.x/manual/json-template-layout.html&#34;&gt;log4j-layout-template-json&lt;/a&gt; module. To use it you can do the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ docker run -e LOGGING_CONFIG=log4j2-json.properties hazelcast/hazelcast&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://logging.apache.org/log4j/2.x/manual/&#34;&gt;Log4j2 manual&lt;/a&gt; for reference.&lt;/p&gt; &#xA;&lt;h2&gt;Customizing Hazelcast&lt;/h2&gt; &#xA;&lt;h3&gt;Memory&lt;/h3&gt; &#xA;&lt;p&gt;Hazelcast Docker image respects the container memory limits, so you can specify it with the &lt;code&gt;-m&lt;/code&gt; parameter.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ docker run -m 512M hazelcast/hazelcast:$HAZELCAST_VERSION&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that by default Hazelcast uses up to 80% of the container memory limit, but you can configure it by adding &lt;code&gt;-XX:MaxRAMPercentage&lt;/code&gt; to the &lt;code&gt;JAVA_OPTS&lt;/code&gt; variable.&lt;/p&gt; &#xA;&lt;h3&gt;Configuring Hazelcast via Environment Variables&lt;/h3&gt; &#xA;&lt;p&gt;Configuration entries of your cluster can be overritten without changing the declarative configuration files (XML/YAML), see &lt;a href=&#34;https://docs.hazelcast.com/hazelcast/latest/configuration/configuring-with-system-properties&#34;&gt;Overriding Configuration documentation section&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Assume that you want to have the following configuration for your cluster, represented as YAML:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;hazelcast:&#xA;  cluster-name: dev&#xA;  network:&#xA;    port:&#xA;      auto-increment: true&#xA;      port-count: 100&#xA;      port: 5701&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to use the environment variables, the above would be represented as a set of the following environment variables:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker run -e HZ_CLUSTERNAME=dev \&#xA;  -e HZ_NETWORK_PORT_AUTOINCREMENT=true \&#xA;  -e HZ_NETWORK_PORT_PORTCOUNT=100 \&#xA;  -e HZ_NETWORK_PORT_PORT=5701 \&#xA;  hazelcast/hazelcast&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using Custom Hazelcast Configuration File&lt;/h3&gt; &#xA;&lt;p&gt;If you need to configure Hazelcast with your own &lt;code&gt;hazelcast.yaml&lt;/code&gt; (or &lt;code&gt;hazelcast.xml&lt;/code&gt;), you can mount the host folder which contains Hazelcast configuration and pass &lt;code&gt;hazelcast.config&lt;/code&gt; JVM property. For example, assuming you placed Hazelcast configuration as &lt;code&gt;/home/ubuntu/hazelcast/hazelcast.yaml&lt;/code&gt;, you can execute the following command.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ docker run -e JAVA_OPTS=&#34;-Dhazelcast.config=/opt/hazelcast/config_ext/hazelcast.yaml&#34; -v /home/ubuntu/hazelcast:/opt/hazelcast/config_ext hazelcast/hazelcast&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, you can &lt;a href=&#34;https://raw.githubusercontent.com/hazelcast/hazelcast-docker/master/#extending-hazelcast-base-image&#34;&gt;extend Hazelcast base image&lt;/a&gt; adding your Hazelcast configuration file.&lt;/p&gt; &#xA;&lt;h3&gt;Extending CLASSPATH with new jars or files&lt;/h3&gt; &#xA;&lt;p&gt;Hazelcast has several extension points i.e MapStore API where you can provide your own implementation to add specific functionality into Hazelcast Cluster. If you have custom jars or files to put into classpath of docker container, you can simply use Docker volume and use &lt;code&gt;CLASSPATH&lt;/code&gt; environment variable in the &lt;code&gt;docker run&lt;/code&gt; command. For example, assuming you placed your custom JARs into &lt;code&gt;/home/ubuntu/hazelcast/&lt;/code&gt;, you can execute the following command.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ docker run -e CLASSPATH=&#34;/opt/hazelcast/CLASSPATH_EXT/*&#34; -v /home/ubuntu/hazelcast:/opt/hazelcast/CLASSPATH_EXT hazelcast/hazelcast&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, you can &lt;a href=&#34;https://raw.githubusercontent.com/hazelcast/hazelcast-docker/master/#extending-hazelcast-base-image&#34;&gt;extend Hazelcast base image&lt;/a&gt; adding your custom JARs.&lt;/p&gt; &#xA;&lt;h3&gt;Using TLS (Hazelcast Enterprise Only)&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;HZ_NETWORK_SSL_ENABLED&lt;/code&gt; environment variable can be used to enable TLS for the communication. The key material folder should be mounted and properly referenced by using &lt;code&gt;JAVA_OPTS&lt;/code&gt; variable.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Generate a sample key material (self-signed certificate)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ mkdir keystore&#xA;$ keytool -validity 365 -genkeypair -alias server -keyalg EC -keystore ./keystore/server.keystore -storepass 123456 -keypass 123456 -dname CN=localhost&#xA;$ keytool -export -alias server -keystore ./keystore/server.keystore -storepass 123456 -file ./keystore/server.crt&#xA;$ keytool -import -noprompt -alias server -keystore ./keystore/server.truststore -storepass 123456 -file ./keystore/server.crt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Run Hazelcast Enterprise with TLS enabled:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker run -e HZ_LICENSEKEY=&amp;lt;your_license_key&amp;gt; \&#xA;    -e HZ_NETWORK_SSL_ENABLED=true \&#xA;    -v `pwd`/keystore:/keystore \&#xA;    -e &#34;JAVA_OPTS=-Djavax.net.ssl.keyStore=/keystore/server.keystore -Djavax.net.ssl.keyStorePassword=123456&#xA;    -Djavax.net.ssl.trustStore=/keystore/server.truststore -Djavax.net.ssl.trustStorePassword=123456&#34; \&#xA;    hazelcast/hazelcast-enterprise&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Extending Hazelcast Base Image&lt;/h3&gt; &#xA;&lt;p&gt;If you&#39;d like to customize your Hazelcast member, you can extend the Hazelcast base image and provide your configuration file or/and custom JARs. To do that, you need to create a new &lt;code&gt;Dockerfile&lt;/code&gt; and build it with &lt;code&gt;docker build&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;p&gt;In the &lt;code&gt;Dockerfile&lt;/code&gt; example below, we are creating a new image based on the Hazelcast image and adding our configuration file and a custom JAR from our host to the container, which will be used with Hazelcast when the container runs.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;FROM hazelcast/hazelcast:$HAZELCAST_VERSION&#xA;&#xA;# Adding custom hazelcast.yaml&#xA;ADD hazelcast.yaml ${HZ_HOME}&#xA;ENV JAVA_OPTS -Dhazelcast.config=${HZ_HOME}/hazelcast.yaml&#xA;&#xA;# Adding custom JARs to the classpath&#xA;ADD custom-library.jar ${HZ_HOME}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Graceful Shutdown&lt;/h2&gt; &#xA;&lt;p&gt;You can &lt;code&gt;stop&lt;/code&gt; the member using the docker command: &lt;code&gt;docker stop &amp;lt;containerid&amp;gt;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;By default, Hazelcast is configured to &lt;code&gt;TERMINATE&lt;/code&gt; on receiving the SIGTERM signal from Docker, which means that a container stops quickly, but the cluster&#39;s data safety relies on the backup stored by other Hazelcast members.&lt;/p&gt; &#xA;&lt;p&gt;The other option is to use the &lt;code&gt;GRACEFUL&lt;/code&gt; shutdown, which triggers the partition migration before shutting down the Hazelcast member. Note that it may take some time, depending on your data size. To use that approach, configure the following properties:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Add &lt;code&gt;hazelcast.shutdownhook.policy=GRACEFUL&lt;/code&gt; to your &lt;code&gt;JAVA_OPTS&lt;/code&gt; environment variable&lt;/li&gt; &#xA; &lt;li&gt;Add &lt;code&gt;hazelcast.graceful.shutdown.max.wait=&amp;lt;seconds&amp;gt;&lt;/code&gt; to your &lt;code&gt;JAVA_OPTS&lt;/code&gt; environment variable &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Default value is 600 seconds&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Stop the container using &lt;code&gt;docker stop --time &amp;lt;seconds&amp;gt;&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;It defines how much time Docker waits before sending SIGKILL&lt;/li&gt; &#xA;   &lt;li&gt;Default value is 10 seconds&lt;/li&gt; &#xA;   &lt;li&gt;Value should be greater or equal &lt;code&gt;hazelcast.graceful.shutdown.max.wait&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Alternatively, you can configure the Docker timeout upfront by &lt;code&gt;docker run --stop-timeout &amp;lt;seconds&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can debug and monitor Hazelcast instances running inside Docker containers.&lt;/p&gt; &#xA;&lt;h2&gt;Managing and Monitoring&lt;/h2&gt; &#xA;&lt;p&gt;You can use JMX or Prometheus for application monitoring.&lt;/p&gt; &#xA;&lt;h3&gt;JMX&lt;/h3&gt; &#xA;&lt;p&gt;You can use the standard JMX protocol to monitor your Hazelcast instance. Start a Hazelcast container with the following parameters.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ docker run -p 9999:9999 -e JAVA_OPTS=&#39;-Dhazelcast.jmx=true -Dcom.sun.management.jmxremote.port=9999 -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false&#39; hazelcast/hazelcast&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now you can connect using the address: &lt;code&gt;localhost:9999&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Prometheus&lt;/h3&gt; &#xA;&lt;p&gt;You can use the JMX Prometheus agent and expose JVM and JMX Hazelcast metrics.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ docker run -p 8080:8080 -e PROMETHEUS_PORT=8080&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, the metrics are available at: &lt;code&gt;http://localhost:8080/metrics&lt;/code&gt;. Note that you can add also &lt;code&gt;-e JAVA_OPTS=&#39;-Dhazelcast.jmx=true&#39;&lt;/code&gt; to expose JMX via Prometheus (otherwise, just JVM metrics are visible).&lt;/p&gt; &#xA;&lt;h2&gt;Debugging&lt;/h2&gt; &#xA;&lt;h3&gt;Remote Debugger&lt;/h3&gt; &#xA;&lt;p&gt;To debug your Hazelcast with the standard Java Tools support, use the following command to start Hazelcast container:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ docker run -p 5005:5005 -e JAVA_TOOL_OPTIONS=&#39;-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005&#39; hazelcast/hazelcast&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now you can connect with your remote debugger using the address: &lt;code&gt;localhost:5005&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Building Your Hazelcast Image&lt;/h3&gt; &#xA;&lt;p&gt;You may want to build your own Hazelcast Docker image with some custom JARs. For example, if you want to test if your change in the Hazelcast Root repository works fine in the Kubernetes environment or you just need to use an entry processor JAR. To do it, place your JARs into the current directory, build the image, and push it into the Docker registry.&lt;/p&gt; &#xA;&lt;p&gt;Taking our first example, imagine you did some change in the Hazelcast Root repository and would like to test it on Kubernetes. You need to build &lt;code&gt;hazelcast-SNAPSHOT.jar&lt;/code&gt; and then do the following.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cd hazelcast-oss&#xA;$ cp &amp;lt;path-to-hazelcast-jar&amp;gt; ./&#xA;$ docker build -t &amp;lt;username&amp;gt;/hazelcast:test .&#xA;$ docker push &amp;lt;username&amp;gt;/hazelcast:test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, use the image &lt;code&gt;&amp;lt;username&amp;gt;/hazelcast:test&lt;/code&gt; in your Kubernetes environment to test your change.&lt;/p&gt; &#xA;&lt;p&gt;Additional documentation can be found &lt;a href=&#34;https://hazelcast.atlassian.net/wiki/spaces/DI/pages/5110693890/How+to+build+local+Hazelcast+Docker+image+from+hazelcast-mono&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Docker Images Usages&lt;/h2&gt; &#xA;&lt;h3&gt;Hazelcast Docker Repositories&lt;/h3&gt; &#xA;&lt;p&gt;You can find all Hazelcast Docker Images on Docker Store Hazelcast Page. &lt;a href=&#34;https://store.docker.com/profiles/hazelcast&#34;&gt;https://store.docker.com/profiles/hazelcast&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can find Docker files by going to the corresponding &lt;code&gt;hazelcast-docker&lt;/code&gt; repo tag. See the full list here: &lt;a href=&#34;https://github.com/hazelcast/hazelcast-docker/releases&#34;&gt;https://github.com/hazelcast/hazelcast-docker/releases&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Management Center&lt;/h3&gt; &#xA;&lt;p&gt;Please see &lt;a href=&#34;https://github.com/hazelcast/management-center-docker&#34;&gt;Management Center Repository&lt;/a&gt; for Dockerfile definitions and have a look at available images on &lt;a href=&#34;https://store.docker.com/profiles/hazelcast&#34;&gt;Docker Hub&lt;/a&gt; page.&lt;/p&gt; &#xA;&lt;h3&gt;Hazelcast Kubernetes&lt;/h3&gt; &#xA;&lt;p&gt;Hazelcast is prepared to work in the Kubernetes environment. For details, please check:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hazelcast/hazelcast-platform-operator&#34;&gt;Hazelcast Platform Operator&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Hazelcast Helm Charts: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/helm/charts/tree/master/stable/hazelcast&#34;&gt;Hazelcast&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/hazelcast/charts/tree/master/stable/hazelcast-enterprise&#34;&gt;Hazelcast Enterprise&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Automatic rebuilding (Hazelcast Enterprise only)&lt;/h3&gt; &#xA;&lt;p&gt;Every 24 hours maintained Hazelcast Enterprise docker images are checked against updates of the base system or system libraries. If any of them are present the images are rebuilt and republished.&lt;/p&gt;</summary>
  </entry>
</feed>