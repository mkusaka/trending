<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dockerfile Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-12-06T01:29:43Z</updated>
  <subtitle>Daily Trending of Dockerfile in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>omerbsezer/Fast-Docker</title>
    <updated>2023-12-06T01:29:43Z</updated>
    <id>tag:github.com,2023-12-06:/omerbsezer/Fast-Docker</id>
    <link href="https://github.com/omerbsezer/Fast-Docker" rel="alternate"></link>
    <summary type="html">&lt;p&gt;This repo covers containerization and Docker Environment: Docker File, Image, Container, Commands, Volumes, Networks, Swarm, Stack, Service, possible scenarios.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Fast-Docker&lt;/h1&gt; &#xA;&lt;p&gt;This repo aims to cover Docker details (Dockerfile, Image, Container, Commands, Volumes, Docker-Compose, Networks, Swarm, Stack) quickly, and possible example usage scenarios (HowTo: LABs) in a nutshell. Possible usage scenarios are aimed to update over time.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Keywords:&lt;/strong&gt; Docker-Image, Dockerfile, Containerization, Docker-Compose, Docker-Volume, Docker-Network, Docker-Swarm, Service, Cheatsheet.&lt;/p&gt; &#xA;&lt;h1&gt;Quick Look (HowTo: LABs)&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/omerbsezer/Fast-Docker/raw/main/LAB01-FirstImageFirstContainer.md&#34;&gt;LAB-01: Creating First Docker Image and Container using Docker File&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/omerbsezer/Fast-Docker/raw/main/LAB02-DockerVolume.md&#34;&gt;LAB-02: Binding Volume to the Different Containers&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/omerbsezer/Fast-Docker/raw/main/LAB02-DockerVolume.md#app_mount&#34;&gt;LAB-02.1: Binding Mount to the Container&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/omerbsezer/Fast-Docker/raw/main/LAB03-DockerCompose.md&#34;&gt;LAB-03: Docker-Compose File - Creating 2 Different Containers: WordPress Container depends on MySql Container&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/omerbsezer/Fast-Docker/raw/main/LAB04-DockerStackService.md&#34;&gt;LAB-04: Creating Docker Swarm Cluster With 5 PCs using PlayWithDocker : 3 x WordPress Containers and 1 x MySql Container using Docker-Compose File&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/omerbsezer/Fast-Docker/raw/main/LAB05-DockerLocalRegistry.md&#34;&gt;LAB-05: Running Docker Free Local Registry, Tagging Image, Pushing Image to the Local Registry, Pulling Image From Local Registry and Deleting Images from Local Registry&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/omerbsezer/Fast-Docker/raw/main/LAB06-DockerTransferringContent.md&#34;&gt;LAB-06: Transferring Content between Host PC and Docker Container&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/omerbsezer/Fast-Docker/raw/main/LAB07-DockerfileForLinuxC++Build.md&#34;&gt;LAB-07: Creating Docker Container using Dockerfile to Build C++ on Ubuntu18.04&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/omerbsezer/Fast-Docker/raw/main/LAB08-DockerfileForWindowsC++Build.md&#34;&gt;LAB-08: Creating Docker Container using Dockerfile to Build C++ on Windows&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/omerbsezer/Fast-Docker/raw/main/LAB09-DockerConfiguration.md&#34;&gt;LAB-09: Docker Configuration (Proxy, Registry)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/omerbsezer/Fast-Docker/raw/main/DockerCommandCheatSheet.md&#34;&gt;Docker Commands Cheatsheet&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Table of Contents&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/omerbsezer/Fast-Docker/main/#motivation&#34;&gt;Motivation&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/omerbsezer/Fast-Docker/main/#needs&#34;&gt;Needs&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/omerbsezer/Fast-Docker/main/#benefits&#34;&gt;Benefits&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/omerbsezer/Fast-Docker/main/#problems&#34;&gt;Problems Docker does not solve&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/omerbsezer/Fast-Docker/main/#whatisdocker&#34;&gt;What is Docker?&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/omerbsezer/Fast-Docker/main/#architecture&#34;&gt;Architecture&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/omerbsezer/Fast-Docker/main/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/omerbsezer/Fast-Docker/main/#engine&#34;&gt;Docker Engine (Deamon, REST API, CLI)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/omerbsezer/Fast-Docker/main/#registry&#34;&gt;Docker Registry and Docker Hub&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/omerbsezer/Fast-Docker/main/#command&#34;&gt;Docker Command Structure&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/omerbsezer/Fast-Docker/main/#container&#34;&gt;Docker Container&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/omerbsezer/Fast-Docker/main/#volume&#34;&gt;Docker Volumes/Bind Mounts&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/omerbsezer/Fast-Docker/main/#network&#34;&gt;Docker Network&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/omerbsezer/Fast-Docker/main/#log&#34;&gt;Docker Log&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/omerbsezer/Fast-Docker/main/#stats&#34;&gt;Docker Stats/Memory-CPU Limitations&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/omerbsezer/Fast-Docker/main/#variables&#34;&gt;Docker Environment Variables&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/omerbsezer/Fast-Docker/main/#file&#34;&gt;Docker File&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/omerbsezer/Fast-Docker/main/#image&#34;&gt;Docker Image&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/omerbsezer/Fast-Docker/main/#compose&#34;&gt;Docker Compose&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/omerbsezer/Fast-Docker/main/#swarm&#34;&gt;Docker Swarm&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/omerbsezer/Fast-Docker/main/#stack&#34;&gt;Docker Stack / Docker Service&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/omerbsezer/Fast-Docker/main/#playwithdocker&#34;&gt;Play With Docker&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/omerbsezer/Fast-Docker/main/#cheatsheet&#34;&gt;Docker Commands Cheatsheet&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/omerbsezer/Fast-Docker/main/#resource&#34;&gt;Other Useful Resources Related Docker &lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/omerbsezer/Fast-Docker/main/#references&#34;&gt;References&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Motivation &lt;a name=&#34;motivation&#34;&gt;&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Why should we use Docker? &#34;Docker changed the way applications used to build and ship. It has completely revolutionized the containerization world.&#34; (Ref:ItNext)&lt;/p&gt; &#xA;&lt;h3&gt;Needs &lt;a name=&#34;needs&#34;&gt;&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Installing all dependencies, setting up a new environment for SW (time-consuming every time to install environment for testing )&lt;/li&gt; &#xA; &lt;li&gt;We want to run our apps on different platforms (Ubuntu, Windows, Raspberry Pi). &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Question in our mind: What if, it does not run on a different OS?&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;CI/CD Integration Testing: We can handle unit testing, component testing with Jenkins. What if integration testing? &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Extending Chain: Jenkins- Docker Image - Docker Container - Automatic testing&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Are our SW products portable to carry on different PC easily? (especially in the development &amp;amp; testing phase)&lt;/li&gt; &#xA; &lt;li&gt;Developing, testing, maintenance of code as one Monolithic App could be problematic when the app needs more features/services. It is required to convert one big monolithic app into microservices.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Benefits &lt;a name=&#34;benefits&#34;&gt;&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;NOT needed to install dependencies/SWs again &amp;amp; again&lt;/li&gt; &#xA; &lt;li&gt;Enables to run on different OS, different platforms&lt;/li&gt; &#xA; &lt;li&gt;Enables a consistent environment&lt;/li&gt; &#xA; &lt;li&gt;Enables more efficient use of system resources&lt;/li&gt; &#xA; &lt;li&gt;Easy to use and maintain&lt;/li&gt; &#xA; &lt;li&gt;Efficient use of the system resources&lt;/li&gt; &#xA; &lt;li&gt;Isolate SW components&lt;/li&gt; &#xA; &lt;li&gt;Enables faster software delivery cycles&lt;/li&gt; &#xA; &lt;li&gt;Containers give us instant application portability.&lt;/li&gt; &#xA; &lt;li&gt;Enables developers to easily pack, ship, and run any application as a lightweight, portable, self-sufficient container&lt;/li&gt; &#xA; &lt;li&gt;Microservice Architecture (Monolithic Apps to MicroService Architecture, e.g. &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/architecture/cloud-native/introduction&#34;&gt;Cloud Native App&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;(Ref: Infoworld)&lt;/p&gt; &#xA;&lt;h3&gt;Problems Docker does not solve&lt;a name=&#34;problems&#34;&gt;&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Docker does NOT fix your security issues&lt;/li&gt; &#xA; &lt;li&gt;Docker does NOT turn applications magically into microservices&lt;/li&gt; &#xA; &lt;li&gt;Docker isn’t a substitute for virtual machines&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;(Ref: Infoworld)&lt;/p&gt; &#xA;&lt;h2&gt;What is Docker? &lt;a name=&#34;whatisdocker&#34;&gt;&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Docker is a tool that reduces the gap between the Development/Deployment phase of a software development cycle.&lt;/li&gt; &#xA; &lt;li&gt;Docker is like a VM but it has more features than VMs (no kernel, only small app and file systems, portable) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;On Linux Kernel (2000s) two features are added (these features support Docker): &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Namespaces: Isolate process.&lt;/li&gt; &#xA;     &lt;li&gt;Control Groups: Resource usage (CPU, Memory) isolation and limitation for each process.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Without Docker, each VM consumes 30% of resources (Memory, CPU)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/10358317/113183089-ef51fa00-9253-11eb-9ade-771905ce8ebd.png&#34; alt=&#34;image&#34;&gt; (Ref: Docker.com)&lt;/p&gt; &#xA;&lt;h3&gt;Architecture &lt;a name=&#34;architecture&#34;&gt;&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/10358317/113183210-0db7f580-9254-11eb-9716-0de635f3cbdf.png&#34; alt=&#34;image&#34;&gt; (Ref: docs.docker.com)&lt;/p&gt; &#xA;&lt;h3&gt;Installation &lt;a name=&#34;installation&#34;&gt;&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Linux: Docker Engine &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://docs.docker.com/engine/install/ubuntu/&#34;&gt;https://docs.docker.com/engine/install/ubuntu/&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Windows: Docker Desktop for Windows &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;WSL: Windows Subsystem for Linux,&lt;/li&gt; &#xA;   &lt;li&gt;WSL2: virtualization through a highly optimized subset of Hyper-V to run the kernel and distributions, better than WLS. &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://docs.docker.com/docker-for-windows/install/&#34;&gt;https://docs.docker.com/docker-for-windows/install/&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Mac-OS: Docker Desktop for Mac &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://docs.docker.com/docker-for-mac/install/&#34;&gt;https://docs.docker.com/docker-for-mac/install/&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Docker Engine (Deamon, REST API, CLI) &lt;a name=&#34;engine&#34;&gt;&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;There are mainly 3 components in the Docker Engine: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Server&amp;nbsp;is the docker daemon named docker daemon. Creates and manages docker images, containers, networks, etc.&lt;/li&gt; &#xA;   &lt;li&gt;Rest API&amp;nbsp;instructs docker daemon what to do.&lt;/li&gt; &#xA;   &lt;li&gt;Command Line Interface&amp;nbsp;(CLI) is the client used to enter docker commands.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/10358317/113183406-45bf3880-9254-11eb-8d13-e68c83f3d349.png&#34; alt=&#34;image&#34;&gt; (Ref: Docker.com)&lt;/p&gt; &#xA;&lt;h3&gt;Docker Registry and Docker Hub &lt;a name=&#34;registry&#34;&gt;&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://hub.docker.com/&#34;&gt;https://hub.docker.com/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/10358317/113183434-4eb00a00-9254-11eb-9275-9b1ccf705d5b.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/omerbsezer/Fast-Docker/raw/main/DockerLocalRegistry.md&#34;&gt;App: Running Docker Free Local Registry, Tagging Container, Pushing to Local Registry, Pulling From Local Registry and Deleting Images from Local Registry&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Docker Command Structure &lt;a name=&#34;command&#34;&gt;&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;docker [ManagementCommand] [Command]&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker container ls -a&#xA;docker image ls&#xA;docker volume ls&#xA;docker network ls&#xA;docker container rm -f [containerName or containerID]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/10358317/113183615-81f29900-9254-11eb-8695-360680931866.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/10358317/113183721-9fbffe00-9254-11eb-9841-79bf037db34a.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Docker Container &lt;a name=&#34;container&#34;&gt;&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/10358317/113183556-730be680-9254-11eb-8bdd-84c5cf5b86c6.png&#34; alt=&#34;image&#34;&gt; (Ref: docker-handbook-borosan)&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;When we create the container from the image, in every container, there is an application that is set to run by default app. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;When this app runs, the container runs.&lt;/li&gt; &#xA;   &lt;li&gt;When this default app finishes/stops, the container stops.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;There could be more than one app in docker image (such as: sh, ls, basic commands)&lt;/li&gt; &#xA; &lt;li&gt;When the Docker container is started, it is allowed that a single application is configured to run automatically.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker container run --name mywebserver -d -p 80:80 -v test:/usr/share/nginx/html nginx&#xA;docker container ls -a&#xA;docker image pull alpine&#xA;docker image push alpine&#xA;docker image build -t hello . (run this command where “Dockerfile” is)&#xA;(PS: image file name MUST be “Dockerfile”, no extension)&#xA;docker save -o hello.tar test/hello&#xA;docker load -i &amp;lt;path to docker image tar file&amp;gt;&#xA;docker load -i .\hello.tar&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Goto: &lt;a href=&#34;https://github.com/omerbsezer/Fast-Docker/raw/main/FirstImageFirstContainer.md&#34;&gt;App: Creating First Docker Image and Container using Docker File&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Docker Container: Life Cycle&lt;/h4&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/10358317/113186436-f67b0700-9257-11eb-9b2e-41ccf056e88b.png&#34; alt=&#34;image&#34;&gt; (Ref: life-cycle-medium)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;e.g. [imageName]=alpine, busybox, nginx, ubuntu, etc.&#xA;docker image pull [imageName]&#xA;docker container run [imageName]&#xA;docker container start [containerId or containerName]&#xA;docker container stop [containerId or containerName]&#xA;docker container pause [containerId or containerName]&#xA;docker container unpause [containerId or containerName]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Docker Container: Union File System &lt;a name=&#34;container-filesystem&#34;&gt;&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Images are read only (R/O).&lt;/li&gt; &#xA; &lt;li&gt;When containers are created, new read-write (R/W) thin layer is created.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/10358317/113183883-d8f86e00-9254-11eb-994b-30c17fe9429b.png&#34; alt=&#34;image&#34;&gt; (Ref: docs.docker.com)&lt;/p&gt; &#xA;&lt;h3&gt;Docker Volumes: Why Volumes needed?&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Containers do not save the changes/logs when erased if there is not any binding to volume/mount.&lt;/li&gt; &#xA; &lt;li&gt;For persistence, volumes/mounts MUST be used.&lt;/li&gt; &#xA; &lt;li&gt;e.g. Creating a log file in the container. When the container is deleted, the log file also deleted with the container. So volumes/binding mounts MUST be used to provide persistence!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/10358317/113184189-2d035280-9255-11eb-9409-578ad1f2bd4b.png&#34; alt=&#34;image&#34;&gt; (Ref: udemy-course:adan-zye-docker)&lt;/p&gt; &#xA;&lt;h3&gt;Docker Volumes/Bind Mounts &lt;a name=&#34;volume&#34;&gt;&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Volumes and binding mounts must be used for saving logs, output files, and input files.&lt;/li&gt; &#xA; &lt;li&gt;When volumes bind to the directory in the container, this directory and volume are synchronized.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker volume create [volumeName]&#xA;docker volume create test&#xA;docker container run --name [containerName] -v [volumeName]:[pathInContainer] [imageName]&#xA;docker container run --name c1 -v test:/app alpine&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Goto: &lt;a href=&#34;https://github.com/omerbsezer/Fast-Docker/raw/main/DockerVolume.md&#34;&gt;App: Binding Volume to the Different Containers&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Bind Mount&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker container run --name [containerName] -v [pathInHost]:[pathInContainer] [imageName]&#xA;docker container run --name c1 -v C:\test:/app alpine&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/10358317/113184347-57eda680-9255-11eb-811c-9f55efd11deb.png&#34; alt=&#34;image&#34;&gt; (Ref: Docker.com)&lt;/p&gt; &#xA;&lt;p&gt;Goto: &lt;a href=&#34;https://github.com/omerbsezer/Fast-Docker/raw/main/DockerVolume.md#app_mount&#34;&gt;App: Binding Mount to Container&lt;/a&gt; Goto: &lt;a href=&#34;https://github.com/omerbsezer/Fast-Docker/raw/main/DockerTransferringContent.md&#34;&gt;App: Transferring Content between Host PC and Docker Container&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Docker Network &lt;a name=&#34;network&#34;&gt;&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Docker containers work like VMs.&lt;/li&gt; &#xA; &lt;li&gt;Every Docker container has network connections&lt;/li&gt; &#xA; &lt;li&gt;Docker Network Drivers: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;None&lt;/li&gt; &#xA;   &lt;li&gt;Bridge&lt;/li&gt; &#xA;   &lt;li&gt;Host&lt;/li&gt; &#xA;   &lt;li&gt;Macvlan&lt;/li&gt; &#xA;   &lt;li&gt;Overlay&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Docker Network: Bridge&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Default Network Driver: Bridge (--net bridge)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker network create [networkName]&#xA;docker network create bridge1&#xA;docker container run --name [containerName] --net [networkName] [imageName] &#xA;docker container run --name c1 --net bridge1 alpine sh&#xA;docker network inspect bridge1&#xA;docker container run --name c2 --net bridge1 alpine sh&#xA;docker network connect bridge1 c2&#xA;docker network inspect bridge1&#xA;docker network disconnect bridge1 c2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Creating a new network using customized network parameters:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker network create --driver=bridge --subnet=10.10.0.0/16 --ip-range=10.10.10.0/24 --gateway=10.10.10.10 newbridge&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/10358317/113184949-1b6e7a80-9256-11eb-9a0c-fe5c62404a06.png&#34; alt=&#34;image&#34;&gt; (Ref: Docker.com)&lt;/p&gt; &#xA;&lt;h4&gt;Docker Network: Host&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Containers reach host network interfaces (--net host)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker container run --name [containerName] --net [networkName] [imageName] &#xA;docker container run --name c1 --net host alpine sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/10358317/113185061-43f67480-9256-11eb-9b94-83735ce980ce.png&#34; alt=&#34;image&#34;&gt; (Ref: Docker.com)&lt;/p&gt; &#xA;&lt;h4&gt;Docker Network: MacVlan&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Each Container has its own MAC interface (--net macvlan)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/10358317/113185105-52dd2700-9256-11eb-84f2-ef1880eb4f4c.png&#34; alt=&#34;image&#34;&gt; (Ref: Docker.com)&lt;/p&gt; &#xA;&lt;h4&gt;Docker Network: Overlay&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Containers that work on different PCs/hosts can work as the same network (--net overlay)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/10358317/113185192-6e483200-9256-11eb-8cb4-d8aa170d1a1e.png&#34; alt=&#34;image&#34;&gt; (Ref: Docker.com)&lt;/p&gt; &#xA;&lt;h4&gt;Port Mapping/Publish:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Mapping Host PC&#39;s port to container port:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;-p [hostPort]:[containerPort], --publish [hostPort]:[containerPort] e.g. -p 8080:80, -p 80:80&#xA;docker container run --name mywebserver -d -p 80:80 nginx&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Docker Log &lt;a name=&#34;log&#34;&gt;&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Docker Logs show /dev/stdout, /dev/stderror&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker logs --details [containerName]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/10358317/113289697-d8151a00-92f0-11eb-86e6-6280c4bf2e77.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Docker Stats/Memory-CPU Limitations &lt;a name=&#34;stats&#34;&gt;&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/10358317/113289735-e9f6bd00-92f0-11eb-940b-13113a5a5da2.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/10358317/113289755-efec9e00-92f0-11eb-9f49-333a4608c523.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/10358317/113289773-f5e27f00-92f0-11eb-8c4f-2db75f17baeb.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Docker Environment Variables &lt;a name=&#34;variables&#34;&gt;&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/10358317/113289974-40fc9200-92f1-11eb-9f12-1125ec32eabf.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Docker File &lt;a name=&#34;file&#34;&gt;&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/10358317/113185932-54f3b580-9257-11eb-9f50-0d18512a0c40.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Goto: &lt;a href=&#34;https://github.com/omerbsezer/Fast-Docker/raw/main/DockerfileForLinuxC%2B%2BBuild.md&#34;&gt;App: Creating Docker Container using Dockerfile to Build C++ on Ubuntu18.04&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Goto: &lt;a href=&#34;https://github.com/omerbsezer/Fast-Docker/raw/main/DockerfileForWindowsC%2B%2BBuild.md&#34;&gt;App: Creating Docker Container using Dockerfile to Build C++ on Windows&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Sample Docker Files&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;FROM python:alpine3.7&#xA;COPY . /app&#xA;WORKDIR /app&#xA;RUN pip install -r requirements.txt&#xA;EXPOSE 5000&#xA;CMD python ./index.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;FROM ubuntu:18.04&#xA;RUN apt-get update -y&#xA;RUN apt-get install default-jre -y&#xA;WORKDIR /myapp&#xA;COPY /myapp .&#xA;CMD [&#34;java&#34;,&#34;hello&#34;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Multistage Docker File (Creating temporary container): &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;In the example, JDK (Java Development Kit) based temporary image (~440MB) container is created for compilation.&lt;/li&gt; &#xA;   &lt;li&gt;Compiled files are copied into JRE (Java Runtime Environment) based image (~145MB). Finally, we have only JRE based image.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;COPY --from=&amp;lt;stage 1&amp;gt; stage1/src stage2/destination&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;In the example below, &#39;compiler&#39; is &#39;stage1&#39;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;FROM mcr.microsoft.com/java/jdk:8-zulu-alpine AS compiler&#xA;COPY /myapp /usr/src/myapp&#xA;WORKDIR /usr/src/myapp&#xA;RUN javac hello.java&#xA;&#xA;FROM mcr.microsoft.com/java/jre:8-zulu-alpine &#xA;WORKDIR /myapp&#xA;COPY --from=compiler /usr/src/myapp .&#xA;CMD [&#34;java&#34;, &#34;hello&#34;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Docker Image &lt;a name=&#34;image&#34;&gt;&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Create Image using Dockerfile&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker image build -t hello . (run this command where “Dockerfile” is)&#xA;(PS: image file name MUST be “Dockerfile”, no extension)&#xA;docker image pull [imageName]&#xA;docker image push [imageName]&#xA;docker image tag [imageOldName] [imageNewName]&#xA;(PS: If you want to push DockerHub, [imageNewName]=[username]/[imageName]:[version])&#xA;docker save -o hello.tar test/hello&#xA;docker load -i &amp;lt;path to docker image tar file&amp;gt;&#xA;docker load -i .\hello.tar&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/10358317/113186047-748ade00-9257-11eb-9c1c-1604d53523e8.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Goto: &lt;a href=&#34;https://github.com/omerbsezer/Fast-Docker/raw/main/FirstImageFirstContainer.md&#34;&gt;App: Creating First Docker Image and Container using Docker File&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Docker Compose &lt;a name=&#34;compose&#34;&gt;&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Define and run multi-container applications with Docker.&lt;/li&gt; &#xA; &lt;li&gt;Easy to create Docker components using one file: Docker-Compose file&lt;/li&gt; &#xA; &lt;li&gt;It is a YAML file that defines components: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Services,&lt;/li&gt; &#xA;   &lt;li&gt;Volumes,&lt;/li&gt; &#xA;   &lt;li&gt;Networks,&lt;/li&gt; &#xA;   &lt;li&gt;Secrets&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Sample &#34;docker-compose.yml&#34; file:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;version: &#34;3.8&#34;&#xA;&#xA;services:&#xA;  mydatabase:&#xA;    image: mysql:5.7&#xA;    restart: always&#xA;    volumes: &#xA;      - mydata:/var/lib/mysql&#xA;    environment: &#xA;      MYSQL_ROOT_PASSWORD: somewordpress&#xA;      MYSQL_DATABASE: wordpress&#xA;      MYSQL_USER: wordpress&#xA;      MYSQL_PASSWORD: wordpress&#xA;    networks:&#xA;      - mynet&#xA;  mywordpress:&#xA;    image: wordpress:latest&#xA;    depends_on: &#xA;      - mydatabase&#xA;    restart: always&#xA;    ports:&#xA;      - &#34;80:80&#34;&#xA;      - &#34;443:443&#34;&#xA;    environment: &#xA;      WORDPRESS_DB_HOST: mydatabase:3306&#xA;      WORDPRESS_DB_USER: wordpress&#xA;      WORDPRESS_DB_PASSWORD: wordpress&#xA;      WORDPRESS_DB_NAME: wordpress&#xA;    networks:&#xA;      - mynet&#xA;volumes:&#xA;  mydata: {}&#xA;networks:&#xA;  mynet:&#xA;    driver: bridge&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;After saving the file as &#34;docker-compose.yml&#34;, run the following commands where the docker-compose file is, to create containers, volumes, networks:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker-compose up -d&#xA;docker-compose down&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Goto: &lt;a href=&#34;https://github.com/omerbsezer/Fast-Docker/raw/main/DockerCompose.md&#34;&gt;App: Docker-Compose File - Creating 2 Different Containers: WordPress Container depends on MySql Container&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Docker Swarm &lt;a name=&#34;swarm&#34;&gt;&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;One of the Container Orchestration tool:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Automating and scheduling the &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;deployment,&lt;/li&gt; &#xA;   &lt;li&gt;management,&lt;/li&gt; &#xA;   &lt;li&gt;scaling, and&lt;/li&gt; &#xA;   &lt;li&gt;networking of containers&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Container Orchestration tools: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Docker Swarm,&lt;/li&gt; &#xA;   &lt;li&gt;Kubernetes,&lt;/li&gt; &#xA;   &lt;li&gt;Mesos&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/10358317/113186661-3b06a280-9258-11eb-9bb8-3ad38d3c55fb.png&#34; alt=&#34;image&#34;&gt; (Ref: udemy-course:adan-zye-docker)&lt;/p&gt; &#xA;&lt;h3&gt;Docker Stack / Docker Service &lt;a name=&#34;stack&#34;&gt;&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;With Docker Stack, multiple services can be created with one file.&lt;/li&gt; &#xA; &lt;li&gt;It is like a Docker-Compose file but it has more features than a Docker-compose file: update_config, replicas.&lt;/li&gt; &#xA; &lt;li&gt;But it is running on when Docker Swarm mode is activated.&lt;/li&gt; &#xA; &lt;li&gt;Network must be &#39;overlay&#39;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Creating, Listing, Inspecting&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker service create --name testservice --replicas=5 -p 8080:80 nginx&#xA;docker service ps testservice (listing running containers on which nodes)&#xA;docker service inspect testservice&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Scaling&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker service scale testservice=10 (scaling up the containers to 10 replicas)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Updating&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker service update --detach --update-delay 5s --update-parallelism 2 --image nginx:v2 testservice (previous state: testservice created, now updating)&#xA;docker service update --help (to see the parameters of update)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Rollbacking&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker service rollback --detach testservice (rollbacking to previous state)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/10358317/113303356-4a8df600-9301-11eb-9114-38872ca01f29.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Goto: &lt;a href=&#34;https://github.com/omerbsezer/Fast-Docker/raw/main/DockerStackService.md&#34;&gt;App: Creating Docker Swarm Cluster With 5 PCs using PlayWithDocker : 3 x WordPress Containers and 1 x MySql Container using Docker-Compose File&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Play With Docker &lt;a name=&#34;playwithdocker&#34;&gt;&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://labs.play-with-docker.com/&#34;&gt;https://labs.play-with-docker.com/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/10358317/113187037-ae101900-9258-11eb-9789-781ca2f6a464.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Docker Commands Cheatsheet &lt;a name=&#34;cheatsheet&#34;&gt;&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Goto: &lt;a href=&#34;https://github.com/omerbsezer/Fast-Docker/raw/main/DockerCommandCheatSheet.md&#34;&gt;Docker Commands Cheatsheet&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Other Useful Resources Related Docker &lt;a name=&#34;resource&#34;&gt;&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Original Docker Document: &lt;a href=&#34;https://docs.docker.com/get-started/&#34;&gt;https://docs.docker.com/get-started/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Cheatsheet: &lt;a href=&#34;https://github.com/wsargent/docker-cheat-sheet&#34;&gt;https://github.com/wsargent/docker-cheat-sheet&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Workshop: &lt;a href=&#34;https://dockerlabs.collabnix.com/workshop/docker/&#34;&gt;https://dockerlabs.collabnix.com/workshop/docker/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;All-in-one Docker Image for Deep Learning: &lt;a href=&#34;https://github.com/floydhub/dl-docker&#34;&gt;https://github.com/floydhub/dl-docker&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Various Dockerfiles for Different Purposes: &lt;a href=&#34;https://github.com/jessfraz/dockerfiles&#34;&gt;https://github.com/jessfraz/dockerfiles&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Docker Tutorial for Beginners [FULL COURSE in 3 Hours]- Youtube: &lt;a href=&#34;https://www.youtube.com/watch?v=3c-iBn73dDE&amp;amp;t=6831s&#34;&gt;https://www.youtube.com/watch?v=3c-iBn73dDE&amp;amp;t=6831s&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Docker and Kubernetes Tutorial | Full Course [2021] - Youtube: &lt;a href=&#34;https://www.youtube.com/watch?v=bhBSlnQcq2k&amp;amp;t=3088s&#34;&gt;https://www.youtube.com/watch?v=bhBSlnQcq2k&amp;amp;t=3088s&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;References &lt;a name=&#34;references&#34;&gt;&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.docker.com/&#34;&gt;Docker.com&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.docker.com/get-started/overview/&#34;&gt;docs.docker.com&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://borosan.gitbook.io/docker-handbook/docker-images&#34;&gt;docker-handbook-borosan&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://medium.com/future-vision/docker-lifecycle-tutorial-and-quickstart-guide-c5fd5b987e0d&#34;&gt;life-cycle-medium&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.infoworld.com/article/3310941/why-you-should-use-docker-and-containers.html&#34;&gt;Infoworld&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://itnext.io/getting-started-with-docker-facts-you-should-know-d000e5815598&#34;&gt;ItNext&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.udemy.com/course/adan-zye-docker/&#34;&gt;udemy-course:adan-zye-docker&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>nihalgonsalves/node-typescript-eslint-template</title>
    <updated>2023-12-06T01:29:43Z</updated>
    <id>tag:github.com,2023-12-06:/nihalgonsalves/node-typescript-eslint-template</id>
    <link href="https://github.com/nihalgonsalves/node-typescript-eslint-template" rel="alternate"></link>
    <summary type="html">&lt;p&gt;TypeScript template repository with typescript-eslint (airbnb config) and ts-node-dev + Dockerfile / GitHub Workflow&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;node-typescript-eslint-template&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/nihalgonsalves/node-typescript-eslint-template/workflows/build/badge.svg?sanitize=true&#34; alt=&#34;build status&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/last-commit/nihalgonsalves/node-typescript-eslint-template&#34; alt=&#34;last commit&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/license/nihalgonsalves/node-typescript-eslint-template?color=brightgreen&#34; alt=&#34;license UNLICENSE&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;TypeScript template repository with typescript-eslint (airbnb config) and ts-node-dev.&lt;/p&gt; &#xA;&lt;p&gt;Dependabot keeps the dependencies up to date.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Build tool&lt;/strong&gt;: yarn (can be replaced with npm: &lt;code&gt;rm yarn.lock &amp;amp;&amp;amp; npm install&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Target Node version&lt;/strong&gt;: 18.x (es2023)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Structure&lt;/strong&gt;: &lt;code&gt;src/&lt;/code&gt; for TypeScript source files and &lt;code&gt;build/&lt;/code&gt; for output&lt;/li&gt; &#xA; &lt;li&gt;Also includes a default &lt;code&gt;.editorconfig&lt;/code&gt; with 2-space indents&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Scripts:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;yarn dev&lt;/code&gt; run from source, auto-restarting&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;yarn lint&lt;/code&gt; run eslint&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;yarn lint --fix&lt;/code&gt; run eslint with auto-formatting&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;yarn build&lt;/code&gt; build to JS&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;yarn start&lt;/code&gt; run built JS&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;yarn test&lt;/code&gt; currently does nothing&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;use with react&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;diff --git a/.eslintrc b/.eslintrc&#xA;index e755856..bbaeee5 100644&#xA;--- a/.eslintrc&#xA;+++ b/.eslintrc&#xA;@@ -1,3 +1,6 @@&#xA;{&#xA;-  &#34;extends&#34;: [&#34;./node_modules/@nihalgonsalves/esconfig/.eslintrc&#34;]&#xA;+  &#34;extends&#34;: [&#xA;+    &#34;./node_modules/@nihalgonsalves/esconfig/.eslintrc&#34;,&#xA;+    &#34;./node_modules/@nihalgonsalves/esconfig/.eslintrc.react&#34;&#xA;+  ]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>