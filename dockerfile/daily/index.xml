<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dockerfile Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-09-11T01:33:41Z</updated>
  <subtitle>Daily Trending of Dockerfile in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Synthetixio/docker-e2e</title>
    <updated>2022-09-11T01:33:41Z</updated>
    <id>tag:github.com,2022-09-11:/Synthetixio/docker-e2e</id>
    <link href="https://github.com/Synthetixio/docker-e2e" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Docker container based on docker-node with e2e-related tools included.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;docker-e2e&lt;/h1&gt; &#xA;&lt;h2&gt;Description&lt;/h2&gt; &#xA;&lt;p&gt;Docker container based on &lt;a href=&#34;https://github.com/Synthetixio/docker-node&#34;&gt;docker-node&lt;/a&gt; with pre-installed Chrome and Firefox with following e2e-related tools included:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.npmjs.com/package/lighthouse&#34;&gt;lighthouse with plugins&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.npmjs.com/package/@lhci/cli&#34;&gt;@lhci/cli&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.npmjs.com/package/sitespeed.io&#34;&gt;sitespeed.io&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.npmjs.com/package/webdriver-manager&#34;&gt;webdriver-manager&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.npmjs.com/package/cypress&#34;&gt;cypress&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.selenium.dev/downloads/&#34;&gt;selenium standalone&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://chromedriver.chromium.org/downloads&#34;&gt;chromedriver&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mozilla/geckodriver/releases&#34;&gt;gecko&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Updating versions&lt;/h2&gt; &#xA;&lt;p&gt;Take a look at &lt;a href=&#34;https://github.com/Synthetixio/docker-node/raw/master/config.json&#34;&gt;config.json&lt;/a&gt; file.&lt;/p&gt; &#xA;&lt;h2&gt;Generating dockerfiles&lt;/h2&gt; &#xA;&lt;p&gt;Is as simple as running:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;cd shared&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;npm install&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;npm run generate&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
  <entry>
    <title>thinkst/canarytokens-docker</title>
    <updated>2022-09-11T01:33:41Z</updated>
    <id>tag:github.com,2022-09-11:/thinkst/canarytokens-docker</id>
    <link href="https://github.com/thinkst/canarytokens-docker" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Docker configuration to quickly setup your own Canarytokens.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Dockerized Canarytokens&lt;/h1&gt; &#xA;&lt;p&gt;by Thinkst Applied Research&lt;/p&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;Canarytokens help track activity and actions on your network.&lt;/p&gt; &#xA;&lt;p&gt;If you have any issues please check out our FAQ over &lt;a href=&#34;https://github.com/thinkst/canarytokens/wiki#&#34;&gt;here&lt;/a&gt;, or create an issue and we&#39;ll try to get back to you as soon as possible.&lt;/p&gt; &#xA;&lt;h2&gt;Prerequisites&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;At least one domain name. If you want to enable PDF-opening tracking, at least two domains.&lt;/li&gt; &#xA; &lt;li&gt;Internet-facing Docker host. You can &lt;a href=&#34;https://docs.docker.com/installation/&#34;&gt;install Docker on a Linux host&lt;/a&gt; quickly.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;What&#39;s new?&lt;/h2&gt; &#xA;&lt;p&gt;We are going to track some new features/additions here so that it is quick and easy to see what has been recently added.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;we now have the capability of sending error logs to a webhook of your choice, hopefully alerting you or your team to the failures as opposed to these errors only living in a log file. Simply supply the corresponding webhook URI in the &lt;code&gt;ERROR_LOG_WEBHOOK&lt;/code&gt; value in your switchboard.env file. (2021-04-09)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;we&#39;ve renamed the distributed .env files to &lt;code&gt;switchboard.env.dist&lt;/code&gt; and &lt;code&gt;frontend.env.dist&lt;/code&gt;. This ensures that your local configuration doesn&#39;t get blown away when you pull changes from the repo. (We still use &lt;code&gt;switchboard.env&lt;/code&gt; and &lt;code&gt;frontend.env&lt;/code&gt; for the config, it just means that new clones of the repo require the users to copy/rename the dist files)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;we have added an extra &lt;code&gt;switchboard.env&lt;/code&gt; called &lt;code&gt;CANARY_IPINFO_API_KEY&lt;/code&gt;. This allows you to use your ipinfo.io API key if you want to (keep in mind ipinfo.io does have a free tier of up to 1000 requests a day).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;we now have slack support. When you supply a webhook, you simply supply your slack webhook URL. (Thanks to @shortstack).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;we have added a new environment variable to &lt;code&gt;frontend.env&lt;/code&gt; called &lt;code&gt;CANARY_AWSID_URL&lt;/code&gt; which allows you to specify a private or different URL for the AWS ID token. This means you can easily change between accounts. (2018-10-17)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;if you intend to build the image to be run on another system with different architecture, you can build the images with &lt;code&gt;docker-compose build --build-arg ARCH=&amp;lt;target arch&amp;gt;/&lt;/code&gt;, noting the forward slash at the end of the argument. The image will not build correctly if this is not included.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Setup (in Ubuntu)&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Boot your Docker host, and take note of the public IP.&lt;/li&gt; &#xA; &lt;li&gt;Configure your domains so that their nameservers point to the public IP of the Docker host. This requires a change at your Registrar. Simply changing NS records in the zone file is insufficient. You will need an A record of your domain pointing towards your public IP.&lt;/li&gt; &#xA; &lt;li&gt;Clone the Docker setup:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ git clone https://github.com/thinkst/canarytokens-docker&#xA;$ cd canarytokens-docker&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install Docker compose (if not already present):&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ sudo apt-get install python-pip python-dev&#xA;$ sudo pip install -U docker-compose&#xA;#if this breaks with PyYAML errors, install the libyaml development package&#xA;# sudo apt-get install libyaml-dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;We distribute two .env files that will be used for configuration, namely &lt;code&gt;switchboard.env.dist&lt;/code&gt; and &lt;code&gt;frontend.env.dist&lt;/code&gt;. You&#39;ll need to copy/rename them to &lt;code&gt;switchboard.env&lt;/code&gt; and &lt;code&gt;frontend.env&lt;/code&gt; respectively (this ensures that your configuration doesn&#39;t get blown away if you pull changes). Once that is done, you can edit them:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Set the &lt;code&gt;CANARY_PUBLIC_IP&lt;/code&gt; in both configurations to the same public IP used for the external public IP for switchboard which handles the Canarytoken triggers.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Set the values for &lt;code&gt;CANARY_DOMAINS&lt;/code&gt; in &lt;code&gt;frontend.env&lt;/code&gt;. These must be domains you own because you will need to add an A record to each &lt;code&gt;CANARY_DOMAINS&lt;/code&gt; specified pointing the domain towards your docker&#39;s public IP.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[NOTE: This step is only necessary if you want to use PDF tokens] Set the values for &lt;code&gt;CANARY_NXDOMAINS&lt;/code&gt; in &lt;code&gt;frontend.env&lt;/code&gt;. These must be domains you own because you will need to add an NS record to each &lt;code&gt;CANARY_NXDOMAINS&lt;/code&gt; specified pointing the domain towards your previously specified &lt;code&gt;CANARY_DOMAINS&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Uncomment &#39;CANARY_PUBLIC_DOMAIN&#39; in &lt;code&gt;switchboard.env&lt;/code&gt; and set it to one of the domains defined for &lt;code&gt;CANARY_DOMAINS&lt;/code&gt; in &lt;code&gt;frontend.env&lt;/code&gt;(if you do not uncomment and set it, the Public IP will be used).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Next decide on which email provider you want to use to send alerts. If you are using Mailgun to send emails, uncomment &lt;code&gt;CANARY_MAILGUN_DOMAIN_NAME&lt;/code&gt; and &lt;code&gt;CANARY_MAILGUN_API_KEY&lt;/code&gt; from &lt;code&gt;switchboard.env&lt;/code&gt; and set the values. If you are using Mandrill or Sendgrid instead, uncomment the appropriate API key setting and set it. If using Mailgun&#39;s European infrastructure for your Canarytokens Server, you will need to add &lt;code&gt;CANARY_MAILGUN_BASE_URL=https://api.eu.mailgun.net&lt;/code&gt; to your &lt;code&gt;switchboard.env&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Generate a single unique WireGuard key seed to set as &lt;code&gt;CANARY_WG_PRIVATE_KEY_SEED&lt;/code&gt; in both &lt;code&gt;switchboard.env&lt;/code&gt; and &lt;code&gt;frontend.env&lt;/code&gt; with the command:&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;dd bs=32 count=1 if=/dev/urandom 2&amp;gt;/dev/null | base64&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Here are example files for a setup that uses: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;the domains example1.com, example2.com, and example3.com (PDFs) for canarytoken triggers via switchboard&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;the public IP 1.1.1.1 for the switchboard triggers&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;the domain &#39;my.domain&#39; to serve the frontend&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;the Mailgun Domain Name &#39;x.y&#39; and API Key &#39;zzzzzzzzzz&#39;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;the WireGuard key seed &lt;code&gt;vk/GD+frlhve/hDTTSUvqpQ/WsQtioKAri0Rt5mg7dw=&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;frontend.env&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;#These domains are used for general purpose tokens&#xA;CANARY_DOMAINS=example1.com,example2.com&#xA;&#xA;#These domains are only used for PDF tokens&#xA;CANARY_NXDOMAINS=example3.com&#xA;&#xA;#Requires a Google Cloud API key to generate an incident map on the history page with the Maps JavaScript API&#xA;#CANARY_GOOGLE_API_KEY=&#xA;CANARY_PUBLIC_IP=1.1.1.1&#xA;CANARY_WG_PRIVATE_KEY_SEED=vk/GD+frlhve/hDTTSUvqpQ/WsQtioKAri0Rt5mg7dw=&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;switchboard.env (Example using Mailgun for email)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;CANARY_MAILGUN_DOMAIN_NAME=x.y&#xA;CANARY_MAILGUN_API_KEY=zzzzzzzzzz&#xA;#CANARY_MANDRILL_API_KEY=&#xA;#CANARY_SENDGRID_API_KEY=&#xA;CANARY_PUBLIC_IP=1.1.1.1&#xA;CANARY_PUBLIC_DOMAIN=my.domain&#xA;CANARY_ALERT_EMAIL_FROM_ADDRESS=noreply@example.com&#xA;CANARY_ALERT_EMAIL_FROM_DISPLAY=&#34;Example Canarytokens&#34;&#xA;CANARY_ALERT_EMAIL_SUBJECT=&#34;Canarytoken&#34;&#xA;CANARY_WG_PRIVATE_KEY_SEED=vk/GD+frlhve/hDTTSUvqpQ/WsQtioKAri0Rt5mg7dw=&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Finally, download and initiate the images:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ docker-compose up&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The front end and switchboard will now be running in the foreground. The front end is accessible at &lt;a href=&#34;http://example1.com/generate&#34;&gt;http://example1.com/generate&lt;/a&gt;. If you wish to run this in the background, you may use&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ docker-compose up -d&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;NOTE: If you only own one domain, and would like to use pdf tokens, you can use subdomains for &lt;code&gt;CANARY_NXDOMAINS&lt;/code&gt;. Using &lt;code&gt;example.com&lt;/code&gt; as our domain, you can set &lt;code&gt;CANARY_NXDOMAINS&lt;/code&gt; to &lt;code&gt;nx.example.com&lt;/code&gt;. Then log into your DNS manager console (where you can edit your domain DNS records) and add an NS record of &lt;code&gt;nx.example.com&lt;/code&gt; mapping to &lt;code&gt;example.com&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Persisting data&lt;/h2&gt; &#xA;&lt;p&gt;The tokens are saved in a Redis database file that exists outside of the Docker containers. Look for &lt;code&gt;dump.rdb&lt;/code&gt; in the &lt;code&gt;canarytokens-docker/data&lt;/code&gt; directory.&lt;/p&gt; &#xA;&lt;p&gt;If you want to wipe all your tokens, delete dump.rdb.&lt;/p&gt; &#xA;&lt;h2&gt;I want HTTPS!&lt;/h2&gt; &#xA;&lt;p&gt;We have a separate docker-compose file that will automate (mostly) getting you up and running a Canarytokens server with HTTPS. You will need to do the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Edit the &lt;code&gt;certbot.env&lt;/code&gt;. You will need to provide your domain and email address (these are necessary for the certbot&#39;s registration process). E.g.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Specify a single domain name&#xA;MY_DOMAIN_NAME=example.com&#xA;&#xA;# or multiple domains names with this different key (comment out MY_DOMAIN_NAME above if you do):&#xA;# MY_DOMAIN_NAMES=example.com anotherexample.net thirdexample.org&#xA;&#xA;EMAIL_ADDRESS=jay@example.com&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Now when you want to bring up your server, you will use &lt;code&gt;docker-compose -f docker-compose-letsencrypt.yml up&lt;/code&gt; which will run the server in the foreground so you can make sure everything gets started alright.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If everything is running, you may want to CTRL+C, run &lt;code&gt;docker-compose -f docker-compose-letsencrypt.yml down&lt;/code&gt; to get to a clean slate, and then rerun &lt;code&gt;docker-compose -f docker-compose-letsencrypt.yml up -d&lt;/code&gt; with the added &lt;code&gt;-d&lt;/code&gt; to run the server in the background (in daemon mode)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Please keep in mind that using the HTTPS method will use the email you specified and the domain name to register the certificate. You can read about the let&#39;s encrypt process (using cerbot) over &lt;a href=&#34;https://certbot.eff.org/lets-encrypt/ubuntuxenial-nginx&#34;&gt;here&lt;/a&gt;. The process involves verifying that you are the owner of the domain you have specified and registering you with let&#39;s encrypt.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;THERE IS A RATE LIMIT. So don&#39;t keep bringing this server up and down otherwise you will quickly hit a let&#39;s encrypt certificate generation limit. To avoid this, for testing purposes you may add &lt;code&gt;--staging&lt;/code&gt; to the &lt;code&gt;./certbot-auto&lt;/code&gt; command in &lt;code&gt;cerbot-nginx/start.sh&lt;/code&gt; which will test whether let&#39;s encrypt gives you the certificate.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Enabling Basic Auth to your Canarytokens Site&lt;/h2&gt; &#xA;&lt;p&gt;You may follow these steps if you wish to have a public-facing canarytokens site but would like some basic auth to access it.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;git clone https://github.com/thinkst/canarytokens-docker.git&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cd canarytokens-docker/nginx&lt;/code&gt; or if you plan on using HTTPS, &lt;code&gt;cd canarytokens-docker/certbot-nginx&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;sudo htpasswd -c .htpasswd user&lt;/code&gt; where &lt;code&gt;user&lt;/code&gt; can be any username you would like to use.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;sudo chown &amp;lt;user&amp;gt;:&amp;lt;user&amp;gt; .htpasswd&lt;/code&gt; where &lt;code&gt;user&lt;/code&gt; is the local linux user&lt;/li&gt; &#xA; &lt;li&gt;edit the appropriate &lt;code&gt;nginx.conf&lt;/code&gt; and&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;server {&#xA;    ...&#xA;    location ~* (/generate|/manage|/download|/history|/settings|/resources|/legal).* {&#xA;        auth_basic           &#34;Basic Auth Restricted Canrytokens&#34;; &amp;lt;---- ADD&#xA;        auth_basic_user_file /etc/nginx/.htpasswd;                 &amp;lt;---- ADD&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;6&#34;&gt; &#xA; &lt;li&gt;edit the appropriate &lt;code&gt;Dockerfile&lt;/code&gt; and add below &lt;code&gt;COPY nginx.conf ...&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;COPY .htpasswd /etc/nginx/.htpasswd&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;7&#34;&gt; &#xA; &lt;li&gt;rebuild the images using &lt;code&gt;docker-compose build&lt;/code&gt;, restart your docker containers, and enjoy!&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Thanks, @mamisano for catching a silly issue using the above 🙏&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>gardener/portmap-copier</title>
    <updated>2022-09-11T01:33:41Z</updated>
    <id>tag:github.com,2022-09-11:/gardener/portmap-copier</id>
    <link href="https://github.com/gardener/portmap-copier" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Minimized container image for copying portmap cni plugin to a host&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Portmap CNI binary copy tool&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://reuse.software/&#34;&gt;&lt;img src=&#34;https://reuse.software/badge/reuse-compliant.svg?sanitize=true&#34; alt=&#34;reuse compliant&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This repository provides the means to create a simple container image, which can be used to copy the portmap CNI binary to a host. It can be used with a Kubernetes DaemonSet to distribute the binary across all nodes of a cluster.&lt;/p&gt;</summary>
  </entry>
</feed>