<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dockerfile Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-04T01:38:47Z</updated>
  <subtitle>Daily Trending of Dockerfile in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>emk/rust-musl-builder</title>
    <updated>2022-06-04T01:38:47Z</updated>
    <id>tag:github.com,2022-06-04:/emk/rust-musl-builder</id>
    <link href="https://github.com/emk/rust-musl-builder" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Docker images for compiling static Rust binaries using musl-libc and musl-gcc, with static versions of useful C libraries. Supports openssl and diesel crates.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;code&gt;rust-musl-builder&lt;/code&gt;: Docker container for easily building static Rust binaries&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://hub.docker.com/r/ekidd/rust-musl-builder/&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/pulls/ekidd/rust-musl-builder.svg?maxAge=2592000&#34; alt=&#34;Docker Image&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/emk/rust-musl-builder&#34;&gt;Source on GitHub&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/emk/rust-musl-builder/raw/master/CHANGELOG.md&#34;&gt;Changelog&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;UPDATED:&lt;/strong&gt; We are now running builds on GitHub, including scheduled builds of &lt;code&gt;stable&lt;/code&gt; and &lt;code&gt;beta&lt;/code&gt; every Thursday!&lt;/p&gt; &#xA;&lt;p&gt;However, &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emk/rust-musl-builder/main/rustls&#34;&gt;&lt;code&gt;rustls&lt;/code&gt;&lt;/a&gt; now works well&lt;/strong&gt; with most of the Rust ecosystem, including &lt;code&gt;reqwest&lt;/code&gt;, &lt;code&gt;tokio&lt;/code&gt;, &lt;code&gt;tokio-postgres&lt;/code&gt;, &lt;code&gt;sqlx&lt;/code&gt; and many others. The only major project which still requires &lt;code&gt;libpq&lt;/code&gt; and OpenSSL is &lt;a href=&#34;https://diesel.rs/&#34;&gt;Diesel&lt;/a&gt;. If you don&#39;t need &lt;code&gt;diesel&lt;/code&gt; or &lt;code&gt;libpq&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;See if you can switch away from OpenSSL, typically by using &lt;code&gt;features&lt;/code&gt; in &lt;code&gt;Cargo.toml&lt;/code&gt; to ask your dependencies to use &lt;a href=&#34;https://raw.githubusercontent.com/emk/rust-musl-builder/main/rustls&#34;&gt;&lt;code&gt;rustls&lt;/code&gt;&lt;/a&gt; instead.&lt;/li&gt; &#xA; &lt;li&gt;If you don&#39;t need OpenSSL, try &lt;a href=&#34;https://github.com/rust-embedded/cross&#34;&gt;&lt;code&gt;cross build --target=x86_64-unknown-linux-musl --release&lt;/code&gt;&lt;/a&gt; to cross-compile your binaries for &lt;code&gt;libmusl&lt;/code&gt;. This supports many more platforms, with less hassle!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;What is this?&lt;/h2&gt; &#xA;&lt;p&gt;This image allows you to build static Rust binaries using &lt;code&gt;diesel&lt;/code&gt;, &lt;code&gt;sqlx&lt;/code&gt; or &lt;code&gt;openssl&lt;/code&gt;. These images can be distributed as single executable files with no dependencies, and they should work on any modern Linux system.&lt;/p&gt; &#xA;&lt;p&gt;To try it, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;alias rust-musl-builder=&#39;docker run --rm -it -v &#34;$(pwd)&#34;:/home/rust/src ekidd/rust-musl-builder&#39;&#xA;rust-musl-builder cargo build --release&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This command assumes that &lt;code&gt;$(pwd)&lt;/code&gt; is readable and writable by uid 1000, gid 1000. At the moment, it doesn&#39;t attempt to cache libraries between builds, so this is best reserved for making final release builds.&lt;/p&gt; &#xA;&lt;p&gt;For a more realistic example, see the &lt;code&gt;Dockerfile&lt;/code&gt;s for &lt;a href=&#34;https://raw.githubusercontent.com/emk/rust-musl-builder/main/examples/using-diesel&#34;&gt;examples/using-diesel&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/emk/rust-musl-builder/main/examples/using-sqlx&#34;&gt;examples/using-sqlx&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Deploying your Rust application&lt;/h2&gt; &#xA;&lt;p&gt;With a bit of luck, you should be able to just copy your application binary from &lt;code&gt;target/x86_64-unknown-linux-musl/release&lt;/code&gt;, and install it directly on any reasonably modern x86_64 Linux machine. In particular, you should be able make static release binaries using TravisCI and GitHub, or you can copy your Rust application into an &lt;a href=&#34;https://hub.docker.com/_/alpine/&#34;&gt;Alpine Linux container&lt;/a&gt;. See below for details!&lt;/p&gt; &#xA;&lt;h2&gt;Available tags&lt;/h2&gt; &#xA;&lt;p&gt;In general, we provide the following tagged Docker images:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;latest&lt;/code&gt;, &lt;code&gt;stable&lt;/code&gt;: Current stable Rust, now with OpenSSL 1.1. We try to update this fairly rapidly after every new stable release, and after most point releases.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;X.Y.Z&lt;/code&gt;: Specific versions of stable Rust.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;beta&lt;/code&gt;: This usually gets updated every six weeks alongside the stable release. It will usually not be updated for beta bugfix releases.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;nightly-YYYY-MM-DD&lt;/code&gt;: Specific nightly releases. These should almost always support &lt;code&gt;clippy&lt;/code&gt;, &lt;code&gt;rls&lt;/code&gt; and &lt;code&gt;rustfmt&lt;/code&gt;, as verified using &lt;a href=&#34;https://rust-lang.github.io/rustup-components-history/index.html&#34;&gt;rustup components history&lt;/a&gt;. If you need a specific date for compatibility with &lt;code&gt;tokio&lt;/code&gt; or another popular library using unstable Rust, please file an issue.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;At a minimum, each of these images should be able to compile &lt;a href=&#34;https://raw.githubusercontent.com/emk/rust-musl-builder/main/examples/using-diesel&#34;&gt;examples/using-diesel&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/emk/rust-musl-builder/main/examples/using-sqlx&#34;&gt;examples/using-sqlx&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Caching builds&lt;/h2&gt; &#xA;&lt;p&gt;You may be able to speed up build performance by adding the following &lt;code&gt;-v&lt;/code&gt; commands to the &lt;code&gt;rust-musl-builder&lt;/code&gt; alias:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;-v cargo-git:/home/rust/.cargo/git&#xA;-v cargo-registry:/home/rust/.cargo/registry&#xA;-v target:/home/rust/src/target&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You will also need to fix the permissions on the mounted volumes:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;rust-musl-builder sudo chown -R rust:rust \&#xA;  /home/rust/.cargo/git /home/rust/.cargo/registry /home/rust/src/target&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;How it works&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;rust-musl-builder&lt;/code&gt; uses &lt;a href=&#34;http://www.musl-libc.org/&#34;&gt;musl-libc&lt;/a&gt;, &lt;a href=&#34;http://www.musl-libc.org/how.html&#34;&gt;musl-gcc&lt;/a&gt;, and the new &lt;a href=&#34;https://www.rustup.rs/&#34;&gt;rustup&lt;/a&gt; &lt;code&gt;target&lt;/code&gt; support. It includes static versions of several libraries:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The standard &lt;code&gt;musl-libc&lt;/code&gt; libraries.&lt;/li&gt; &#xA; &lt;li&gt;OpenSSL, which is needed by many Rust applications.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;libpq&lt;/code&gt;, which is needed for applications that use &lt;code&gt;diesel&lt;/code&gt; with PostgreSQL.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;libz&lt;/code&gt;, which is needed by &lt;code&gt;libpq&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;SQLite3. See &lt;a href=&#34;https://raw.githubusercontent.com/emk/rust-musl-builder/main/examples/using-diesel/&#34;&gt;examples/using-diesel&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This library also sets up the environment variables needed to compile popular Rust crates using these libraries.&lt;/p&gt; &#xA;&lt;h2&gt;Extras&lt;/h2&gt; &#xA;&lt;p&gt;This image also supports the following extra goodies:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Basic compilation for &lt;code&gt;armv7&lt;/code&gt; using &lt;code&gt;musl-libc&lt;/code&gt;. Not all libraries are supported at the moment, however.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rust-lang-nursery/mdBook&#34;&gt;&lt;code&gt;mdbook&lt;/code&gt;&lt;/a&gt; and &lt;code&gt;mdbook-graphviz&lt;/code&gt; for building searchable HTML documentation from Markdown files. Build manuals to use alongside your &lt;code&gt;cargo doc&lt;/code&gt; output!&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/EmbarkStudios/cargo-about&#34;&gt;&lt;code&gt;cargo about&lt;/code&gt;&lt;/a&gt; to collect licenses for your dependencies.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mmstick/cargo-deb&#34;&gt;&lt;code&gt;cargo deb&lt;/code&gt;&lt;/a&gt; to build Debian packages&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/EmbarkStudios/cargo-deny&#34;&gt;&lt;code&gt;cargo deny&lt;/code&gt;&lt;/a&gt; to check your Rust project for known security issues.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Making OpenSSL work&lt;/h2&gt; &#xA;&lt;p&gt;If your application uses OpenSSL, you will also need to take a few extra steps to make sure that it can find OpenSSL&#39;s list of trusted certificates, which is stored in different locations on different Linux distributions. You can do this using &lt;a href=&#34;https://crates.io/crates/openssl-probe&#34;&gt;&lt;code&gt;openssl-probe&lt;/code&gt;&lt;/a&gt; as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;fn main() {&#xA;    openssl_probe::init_ssl_cert_env_vars();&#xA;    //... your code&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Making Diesel work&lt;/h2&gt; &#xA;&lt;p&gt;In addition to setting up OpenSSL, you&#39;ll need to add the following lines to your &lt;code&gt;Cargo.toml&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[dependencies]&#xA;diesel = { version = &#34;1&#34;, features = [&#34;postgres&#34;, &#34;sqlite&#34;] }&#xA;&#xA;# Needed for sqlite.&#xA;libsqlite3-sys = { version = &#34;*&#34;, features = [&#34;bundled&#34;] }&#xA;&#xA;# Needed for Postgres.&#xA;openssl = &#34;*&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For PostgreSQL, you&#39;ll also need to include &lt;code&gt;diesel&lt;/code&gt; and &lt;code&gt;openssl&lt;/code&gt; in your &lt;code&gt;main.rs&lt;/code&gt; in the following order (in order to avoid linker errors):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;extern crate openssl;&#xA;#[macro_use]&#xA;extern crate diesel;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If this doesn&#39;t work, you &lt;em&gt;might&lt;/em&gt; be able to fix it by reversing the order. See &lt;a href=&#34;https://github.com/emk/rust-musl-builder/issues/69&#34;&gt;this PR&lt;/a&gt; for a discussion of the latest issues involved in linking to &lt;code&gt;diesel&lt;/code&gt;, &lt;code&gt;pq-sys&lt;/code&gt; and &lt;code&gt;openssl-sys&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Making static releases with Travis CI and GitHub&lt;/h2&gt; &#xA;&lt;p&gt;These instructions are inspired by &lt;a href=&#34;https://github.com/japaric/rust-cross&#34;&gt;rust-cross&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;First, read the &lt;a href=&#34;https://docs.travis-ci.com/user/deployment/releases&#34;&gt;Travis CI: GitHub Releases Uploading&lt;/a&gt; page, and run &lt;code&gt;travis setup releases&lt;/code&gt; as instructed. Then add the following lines to your existing &lt;code&gt;.travis.yml&lt;/code&gt; file, replacing &lt;code&gt;myapp&lt;/code&gt; with the name of your package:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;language: rust&#xA;sudo: required&#xA;os:&#xA;- linux&#xA;- osx&#xA;rust:&#xA;- stable&#xA;services:&#xA;- docker&#xA;before_deploy: &#34;./build-release myapp ${TRAVIS_TAG}-${TRAVIS_OS_NAME}&#34;&#xA;deploy:&#xA;  provider: releases&#xA;  api_key:&#xA;    secure: &#34;...&#34;&#xA;  file_glob: true&#xA;  file: &#34;myapp-${TRAVIS_TAG}-${TRAVIS_OS_NAME}.*&#34;&#xA;  skip_cleanup: true&#xA;  on:&#xA;    rust: stable&#xA;    tags: true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Next, copy &lt;a href=&#34;https://raw.githubusercontent.com/emk/rust-musl-builder/main/examples/build-release&#34;&gt;&lt;code&gt;build-release&lt;/code&gt;&lt;/a&gt; into your project and run &lt;code&gt;chmod +x build-release&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Finally, add a &lt;code&gt;Dockerfile&lt;/code&gt; to perform the actual build:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Dockerfile&#34;&gt;FROM ekidd/rust-musl-builder&#xA;&#xA;# We need to add the source code to the image because `rust-musl-builder`&#xA;# assumes a UID of 1000, but TravisCI has switched to 2000.&#xA;ADD --chown=rust:rust . ./&#xA;&#xA;CMD cargo build --release&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When you push a new tag to your project, &lt;code&gt;build-release&lt;/code&gt; will automatically build new Linux binaries using &lt;code&gt;rust-musl-builder&lt;/code&gt;, and new Mac binaries with Cargo, and it will upload both to the GitHub releases page for your repository.&lt;/p&gt; &#xA;&lt;p&gt;For a working example, see &lt;a href=&#34;https://github.com/faradayio/cage&#34;&gt;faradayio/cage&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Making tiny Docker images with Alpine Linux and Rust binaries&lt;/h2&gt; &#xA;&lt;p&gt;Docker now supports &lt;a href=&#34;https://docs.docker.com/engine/userguide/eng-image/multistage-build/&#34;&gt;multistage builds&lt;/a&gt;, which make it easy to build your Rust application with &lt;code&gt;rust-musl-builder&lt;/code&gt; and deploy it using &lt;a href=&#34;https://alpinelinux.org/&#34;&gt;Alpine Linux&lt;/a&gt;. For a working example, see &lt;a href=&#34;https://raw.githubusercontent.com/emk/rust-musl-builder/main/examples/using-diesel/Dockerfile&#34;&gt;&lt;code&gt;examples/using-diesel/Dockerfile&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Adding more C libraries&lt;/h2&gt; &#xA;&lt;p&gt;If you&#39;re using Docker crates which require specific C libraries to be installed, you can create a &lt;code&gt;Dockerfile&lt;/code&gt; based on this one, and use &lt;code&gt;musl-gcc&lt;/code&gt; to compile the libraries you need. For an example, see &lt;a href=&#34;https://raw.githubusercontent.com/emk/rust-musl-builder/main/examples/adding-a-library/Dockerfile&#34;&gt;&lt;code&gt;examples/adding-a-library/Dockerfile&lt;/code&gt;&lt;/a&gt;. This usually involves a bit of experimentation for each new library, but it seems to work well for most simple, standalone libraries.&lt;/p&gt; &#xA;&lt;p&gt;If you need an especially common library, please feel free to submit a pull request adding it to the main &lt;code&gt;Dockerfile&lt;/code&gt;! We&#39;d like to support popular Rust crates out of the box.&lt;/p&gt; &#xA;&lt;h2&gt;Development notes&lt;/h2&gt; &#xA;&lt;p&gt;After modifying the image, run &lt;code&gt;./test-image&lt;/code&gt; to make sure that everything works.&lt;/p&gt; &#xA;&lt;h2&gt;Other ways to build portable Rust binaries&lt;/h2&gt; &#xA;&lt;p&gt;If for some reason this image doesn&#39;t meet your needs, there&#39;s a variety of other people working on similar projects:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/messense/rust-musl-cross&#34;&gt;messense/rust-musl-cross&lt;/a&gt; shows how to build binaries for many different architectures.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/japaric/rust-cross&#34;&gt;japaric/rust-cross&lt;/a&gt; has extensive instructions on how to cross-compile Rust applications.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/clux/muslrust&#34;&gt;clux/muslrust&lt;/a&gt; also supports libcurl.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/golddranks/rust_musl_docker&#34;&gt;golddranks/rust_musl_docker&lt;/a&gt;. Another Docker image.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Either the &lt;a href=&#34;https://raw.githubusercontent.com/emk/rust-musl-builder/main/LICENSE-APACHE.txt&#34;&gt;Apache 2.0 license&lt;/a&gt;, or the &lt;a href=&#34;https://raw.githubusercontent.com/emk/rust-musl-builder/main/LICENSE-MIT.txt&#34;&gt;MIT license&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>openfaas/templates</title>
    <updated>2022-06-04T01:38:47Z</updated>
    <id>tag:github.com,2022-06-04:/openfaas/templates</id>
    <link href="https://github.com/openfaas/templates" rel="alternate"></link>
    <summary type="html">&lt;p&gt;OpenFaaS Classic templates&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;OpenFaaS Classic templates&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/openfaas/templates/actions&#34;&gt;&lt;img src=&#34;https://github.com/openfaas/templates/workflows/ci-only/badge.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;To find out more about the OpenFaaS templates see the &lt;a href=&#34;https://github.com/openfaas/faas-cli&#34;&gt;faas-cli&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note: The templates are completely customizable - so if you want to alter them please do fork them and use &lt;code&gt;faas template pull&lt;/code&gt; to make use of your updated versions.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Classic Templates&lt;/h3&gt; &#xA;&lt;p&gt;This repository contains the Classic OpenFaaS templates, but many more are available in the Template Store. Read above for more information.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Name&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Language&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Version&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Linux base&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Watchdog&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Link&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;dockerfile&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Dockerfile&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;N/A&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Alpine Linux&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;classic&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/openfaas/templates/tree/master/template/dockerfile&#34;&gt;Dockerfile template&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;go&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Go&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;1.15&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Alpine Linux&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;classic&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/openfaas/templates/tree/master/template/go&#34;&gt;Go template&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;node12&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;NodeJS&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;12&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Alpine Linux&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;of-watchdog&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/openfaas/templates/tree/master/template/node12&#34;&gt;NodeJS template&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;node14&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;NodeJS&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;14&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Alpine Linux&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;of-watchdog&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/openfaas/templates/tree/master/template/node14&#34;&gt;NodeJS template&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;node16&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;NodeJS&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;16&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Alpine Linux&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;of-watchdog&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/openfaas/templates/tree/master/template/node16&#34;&gt;NodeJS template&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;node17&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;NodeJS&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;17&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Alpine Linux&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;of-watchdog&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/openfaas/templates/tree/master/template/node17&#34;&gt;NodeJS template&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;node&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;NodeJS&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;12&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Alpine Linux&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;classic&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/openfaas/templates/tree/master/template/node&#34;&gt;NodeJS template&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;python3&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Python&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;3&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Alpine Linux&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;classic&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/openfaas/templates/tree/master/template/python3&#34;&gt;Python 3 template&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;python3-debian&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Python&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;3&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Debian Linux&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;classic&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/openfaas/templates/tree/master/template/python3-debian&#34;&gt;Python 3 Debian template&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;python&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Python&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;2.7&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Alpine Linux&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;classic&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/openfaas/templates/tree/master/template/python&#34;&gt;Python 2.7 template&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;java11-vert-x&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Java and &lt;a href=&#34;https://vertx.io/&#34;&gt;Vert.x&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;11&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Debian GNU/Linux&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;of-watchdog&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/openfaas/templates/tree/master/template/java11-vert-x&#34;&gt;Java LTS template&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;java11&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Java&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;11&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Debian GNU/Linux&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;of-watchdog&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/openfaas/templates/tree/master/template/java11&#34;&gt;Java LTS template&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;ruby&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Ruby&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;2.7&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Alpine Linux 3.11&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;classic&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/openfaas/templates/tree/master/template/ruby&#34;&gt;Ruby template&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;php7&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;PHP&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;7.4&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Alpine Linux&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;classic&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/openfaas/templates/tree/master/template/php7&#34;&gt;PHP 7 template&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;csharp&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;C#&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;N/A&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Debian GNU/Linux 9&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;classic&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/openfaas/templates/tree/master/template/csharp&#34;&gt;C# template&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;For more information on the templates check out the &lt;a href=&#34;https://docs.openfaas.com/cli/templates/&#34;&gt;docs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Classic vs of-watchdog templates&lt;/h3&gt; &#xA;&lt;p&gt;The current version of OpenFaaS templates use the original &lt;code&gt;watchdog&lt;/code&gt; which &lt;code&gt;forks&lt;/code&gt; processes - a bit like CGI. The newer watchdog &lt;a href=&#34;https://github.com/openfaas-incubator/of-watchdog&#34;&gt;of-watchdog&lt;/a&gt; is more similar to fastCGI/HTTP and should be used for any benchmarking or performance testing along with one of the newer templates. Contact the project for more information.&lt;/p&gt; &#xA;&lt;h3&gt;Submit your own template to the template store&lt;/h3&gt; &#xA;&lt;p&gt;This repository is for templates supported by the project maintainers, if you&#39;d like to submit your own template to the OpenFaaS Template Store then checkout the store:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/openfaas/store/&#34;&gt;OpenFaaS Store&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Contribute to this repository&lt;/h3&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/openfaas/templates/raw/master/CONTRIBUTING.md&#34;&gt;contributing guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;License&lt;/h3&gt; &#xA;&lt;p&gt;This project is part of the OpenFaaS project licensed under the MIT License.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>odoo/docker</title>
    <updated>2022-06-04T01:38:47Z</updated>
    <id>tag:github.com,2022-06-04:/odoo/docker</id>
    <link href="https://github.com/odoo/docker" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;About this Repo&lt;/h1&gt; &#xA;&lt;p&gt;This is the Git repo of the official Docker image for &lt;a href=&#34;https://registry.hub.docker.com/_/odoo/&#34;&gt;Odoo&lt;/a&gt;. See the Hub page for the full readme on how to use the Docker image and for information regarding contributing and issues.&lt;/p&gt; &#xA;&lt;p&gt;The full readme is generated over in &lt;a href=&#34;https://github.com/docker-library/docs&#34;&gt;docker-library/docs&lt;/a&gt;, specifically in &lt;a href=&#34;https://github.com/docker-library/docs/tree/master/odoo&#34;&gt;docker-library/docs/odoo&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>