<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dockerfile Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-09-20T01:33:53Z</updated>
  <subtitle>Daily Trending of Dockerfile in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>cloudnative-pg/postgres-containers</title>
    <updated>2022-09-20T01:33:53Z</updated>
    <id>tag:github.com,2022-09-20:/cloudnative-pg/postgres-containers</id>
    <link href="https://github.com/cloudnative-pg/postgres-containers" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Operand images for CloudNativePG containing all community supported version PostgreSQL&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;PostgreSQL Container Images&lt;/h1&gt; &#xA;&lt;p&gt;Maintenance scripts to generate Immutable Application Containers for all available PostgreSQL versions (10 to 14) to be used as operands with the &lt;a href=&#34;https://cloudnative-pg.io&#34;&gt;CloudNativePG operator&lt;/a&gt; for Kubernetes. PostgreSQL 15 beta images are also available for evaluation and testing.&lt;/p&gt; &#xA;&lt;p&gt;These images are built on top of the &lt;a href=&#34;https://hub.docker.com/_/postgres&#34;&gt;Official Postgres image&lt;/a&gt; maintained by the &lt;a href=&#34;https://github.com/docker-library/postgres&#34;&gt;PostgreSQL Docker Community&lt;/a&gt;, by adding the following software:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Barman Cloud&lt;/li&gt; &#xA; &lt;li&gt;PGAudit&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Barman Cloud is distributed by EnterpriseDB under the &lt;a href=&#34;https://github.com/2ndquadrant-it/barman/raw/master/LICENSE&#34;&gt;GNU GPL 3 License&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;PGAudit is distributed under the &lt;a href=&#34;https://github.com/pgaudit/pgaudit/raw/master/LICENSE&#34;&gt;PostgreSQL License&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Images are available via &lt;a href=&#34;https://github.com/cloudnative-pg/postgres-containers/pkgs/container/postgresql&#34;&gt;GitHub Container Registry&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License and copyright&lt;/h2&gt; &#xA;&lt;p&gt;This software is available under &lt;a href=&#34;https://raw.githubusercontent.com/cloudnative-pg/postgres-containers/main/LICENSE&#34;&gt;Apache License 2.0&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Copyright The CloudNativePG Contributors.&lt;/p&gt; &#xA;&lt;h2&gt;Trademarks&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;a href=&#34;https://www.postgresql.org/about/policies/trademarks/&#34;&gt;Postgres, PostgreSQL and the Slonik Logo&lt;/a&gt; are trademarks or registered trademarks of the PostgreSQL Community Association of Canada, and used with their permission.&lt;/em&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Azure-Samples/js-e2e-azure-function-graphql-hello</title>
    <updated>2022-09-20T01:33:53Z</updated>
    <id>tag:github.com,2022-09-20:/Azure-Samples/js-e2e-azure-function-graphql-hello</id>
    <link href="https://github.com/Azure-Samples/js-e2e-azure-function-graphql-hello" rel="alternate"></link>
    <summary type="html">&lt;p&gt;TypeScript Azure Function hosting hello world level graphql resolver.&lt;/p&gt;&lt;hr&gt;&lt;hr&gt; &#xA;&lt;p&gt;page_type: sample languages:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;javascript&lt;/li&gt; &#xA; &lt;li&gt;typescript&lt;/li&gt; &#xA; &lt;li&gt;nodejs name: &#34;Azure Function GraphQL TypeScript Hello World&#34; description: &#34;A simple hello world example using GraphQL TypeScript using Apollo server.&#34; products:&lt;/li&gt; &#xA; &lt;li&gt;azure&lt;/li&gt; &#xA; &lt;li&gt;azure-functions&lt;/li&gt; &#xA; &lt;li&gt;vs-code&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h1&gt;GraphQL TypeScript Hello World&lt;/h1&gt; &#xA;&lt;p&gt;A simple hello world example using GraphQL TypeScript using Apollo server.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;h3&gt;Installation and start function&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;npm install &amp;amp;&amp;amp; npm start&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This quickstart works with &lt;code&gt;apollo-server-azure-functions&lt;/code&gt; v2 only.&lt;/p&gt; &#xA;&lt;h3&gt;Quickstart using GraphQL Playground&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Open browser to &lt;code&gt;http://localhost:7071/api/graphql&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Enter query &lt;code&gt;{hello}&lt;/code&gt;&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Azure-Samples/js-e2e-azure-function-graphql-hello/main/media/graphql_playground.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;View response &lt;code&gt;{&#34;data&#34;:{&#34;hello&#34;:&#34;Hello from GraphQL backend&#34;}}&lt;/code&gt;&lt;/p&gt; &lt;p&gt;For a more comprehensive example, open the browser&#39;s development tools (F12) and re-enter the query in the playground.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Quickstart using cURL&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Open bash terminal.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Enter cURL command:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl &#39;http://localhost:7071/api/graphql&#39; \&#xA;    -H &#39;content-type: application/json&#39; \&#xA;    --data-raw &#39;{&#34;query&#34;:&#34;{hello}&#34;}&#39; &#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;View response &lt;code&gt;{&#34;data&#34;:{&#34;hello&#34;:&#34;Hello from GraphQL backend&#34;}}&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Deploy to Azure&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;In VS Code, create the Azure Function resource.&lt;/li&gt; &#xA; &lt;li&gt;Deploy the root folder to your resource. Do not select the &lt;code&gt;/dist&lt;/code&gt; folder. It will be created as part of the build process.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Use playground with deployed function&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Configure the &lt;strong&gt;CORS&lt;/strong&gt; setting for the Apollo playground: &lt;code&gt;https://studio.apollographql.com&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you still get &lt;strong&gt;CORS&lt;/strong&gt; errors when running the query in the playground, use the &lt;code&gt;diagnose-endpoint&lt;/code&gt; package to determine the issue:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;npx diagnose-endpoint@1.1.0 --endpoint=https://YOUR-FUNCTION-NAME.azurewebsites.net/api/graphql/&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Local development troubleshooting&lt;/h2&gt; &#xA;&lt;h3&gt;MacOS M1 in a container&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;See azure-functions-core-tools issue &lt;a href=&#34;https://github.com/Azure/azure-functions-core-tools/issues/2834&#34;&gt;2834&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>