<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dockerfile Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-10T01:39:18Z</updated>
  <subtitle>Daily Trending of Dockerfile in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>fluent/fluentd-docker-image</title>
    <updated>2022-07-10T01:39:18Z</updated>
    <id>tag:github.com,2022-07-10:/fluent/fluentd-docker-image</id>
    <link href="https://github.com/fluent/fluentd-docker-image" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Docker image for Fluentd&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Fluentd Docker Image&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/fluent/fluentd-docker-image&#34;&gt;&lt;img src=&#34;https://travis-ci.org/fluent/fluentd-docker-image.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/fluent/fluentd&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/stars/fluent/fluentd.svg?sanitize=true&#34; alt=&#34;Docker Stars&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/fluent/fluentd&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/pulls/fluent/fluentd.svg?sanitize=true&#34; alt=&#34;Docker Pulls&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/fluent/fluentd&#34;&gt;&lt;img src=&#34;https://img.shields.io/imagelayers/image-size/fluent/fluentd/latest.svg?sanitize=true&#34; alt=&#34;ImageLayers Size&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/fluent/fluentd&#34;&gt;&lt;img src=&#34;https://img.shields.io/imagelayers/layers/fluent/fluentd/latest.svg?sanitize=true&#34; alt=&#34;ImageLayers Layers&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;What is Fluentd?&lt;/h2&gt; &#xA;&lt;p&gt;Fluentd is an open source data collector, which lets you unify the data collection and consumption for a better use and understanding of data.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://www.fluentd.org/&#34;&gt;www.fluentd.org&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://www.fluentd.org/assets/img/miscellany/fluentd-logo.png&#34; alt=&#34;Fluentd Logo&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Supported tags and respective &lt;code&gt;Dockerfile&lt;/code&gt; links&lt;/h2&gt; &#xA;&lt;h3&gt;Current images (Edge)&lt;/h3&gt; &#xA;&lt;p&gt;These tags have image version postfix. This updates many places so we need feedback for improve/fix the images.&lt;/p&gt; &#xA;&lt;p&gt;Current images use fluentd v1 series.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;v1.15.0-1.0&lt;/code&gt;, &lt;code&gt;v1.15-1&lt;/code&gt;, &lt;code&gt;edge&lt;/code&gt; &lt;a href=&#34;https://github.com/fluent/fluentd-docker-image/raw/master/v1.15/alpine/Dockerfile&#34;&gt;(v1.15/alpine/Dockerfile)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;v1.15.0-debian-1.0&lt;/code&gt;, &lt;code&gt;v1.15-debian-1&lt;/code&gt;, &lt;code&gt;edge-debian&lt;/code&gt; (multiarch image for arm64(AArch64) and amd64(x86_64))&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;v1.15.0-debian-amd64-1.0&lt;/code&gt;, &lt;code&gt;v1.15-debian-amd64-1&lt;/code&gt;, &lt;code&gt;edge-debian-amd64&lt;/code&gt; &lt;a href=&#34;https://github.com/fluent/fluentd-docker-image/raw/master/v1.15/debian/Dockerfile&#34;&gt;(v1.15/debian/Dockerfile)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;v1.15.0-debian-arm64-1.0&lt;/code&gt;, &lt;code&gt;v1.15-debian-arm64-1&lt;/code&gt;, &lt;code&gt;edge-debian-arm64&lt;/code&gt; &lt;a href=&#34;https://github.com/fluent/fluentd-docker-image/raw/master/v1.15/arm64/debian/Dockerfile&#34;&gt;(v1.15/arm64/debian/Dockerfile)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;v1.15.0-debian-armhf-1.0&lt;/code&gt;, &lt;code&gt;v1.15-debian-armhf-1&lt;/code&gt;, &lt;code&gt;edge-debian-armhf&lt;/code&gt; &lt;a href=&#34;https://github.com/fluent/fluentd-docker-image/raw/master/v1.15/armhf/debian/Dockerfile&#34;&gt;(v1.15/armhf/debian/Dockerfile)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;v1.15.0-windows-ltsc2019-1.0&lt;/code&gt;, &lt;code&gt;v1.15-windows-ltsc2019-1&lt;/code&gt; &lt;a href=&#34;https://github.com/fluent/fluentd-docker-image/raw/master/v1.15/windows-ltsc2019/Dockerfile&#34;&gt;(v1.15/windows-ltsc2019/Dockerfile)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;v1.15.0-windows-20H2-1.0&lt;/code&gt;, &lt;code&gt;v1.15-windows-20H2-1&lt;/code&gt; &lt;a href=&#34;https://github.com/fluent/fluentd-docker-image/raw/master/v1.15/windows-20H2/Dockerfile&#34;&gt;(v1.15/windows-20H2/Dockerfile)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Old v1.4 images&lt;/h3&gt; &#xA;&lt;p&gt;This is for backward compatibility. Use &#34;Current images&#34; instead.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;v1.4.2-2.0&lt;/code&gt;, &lt;code&gt;v1.4-2&lt;/code&gt; &lt;a href=&#34;https://github.com/fluent/fluentd-docker-image/raw/master/v1.4/alpine/Dockerfile&#34;&gt;(v1.4/alpine/Dockerfile)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;v1.4.2-onbuild-2.0&lt;/code&gt;, &lt;code&gt;v1.4-onbuild-2&lt;/code&gt; &lt;a href=&#34;https://github.com/fluent/fluentd-docker-image/raw/master/v1.4/alpine-onbuild/Dockerfile&#34;&gt;(v1.4/alpine-onbuild/Dockerfile)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;v1.4.2-debian-2.0&lt;/code&gt;, &lt;code&gt;v1.4-debian-2&lt;/code&gt; &lt;a href=&#34;https://github.com/fluent/fluentd-docker-image/raw/master/v1.4/debian/Dockerfile&#34;&gt;(v1.4/debian/Dockerfile)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;v1.4.2-debian-onbuild-2.0&lt;/code&gt;, &lt;code&gt;v1.4-debian-onbuild-2&lt;/code&gt;, &lt;code&gt;edge-debian-onbuild&lt;/code&gt; &lt;a href=&#34;https://github.com/fluent/fluentd-docker-image/raw/master/v1.4/debian-onbuild/Dockerfile&#34;&gt;(v1.4/debian-onbuild/Dockerfile)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;v1.4.2-windows-2.0&lt;/code&gt;, &lt;code&gt;v1.4-windows-2&lt;/code&gt; &lt;a href=&#34;https://github.com/fluent/fluentd-docker-image/raw/master/v1.4/windows/Dockerfile&#34;&gt;(v1.4/windows/Dockerfile)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;v0.12 images&lt;/h3&gt; &#xA;&lt;p&gt;Support of fluentd v0.12 has ended in 2019. We don&#39;t recommend v0.12 for new deployment.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;v0.12.43-2.0&lt;/code&gt;, &lt;code&gt;v0.12-2&lt;/code&gt; &lt;a href=&#34;https://github.com/fluent/fluentd-docker-image/raw/master/v0.12/alpine/Dockerfile&#34;&gt;(v0.12/alpine/Dockerfile)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;v0.12.43-onbuild-2.0&lt;/code&gt;, &lt;code&gt;v0.12-onbuild-2&lt;/code&gt; &lt;a href=&#34;https://github.com/fluent/fluentd-docker-image/raw/master/v0.12/alpine-onbuild/Dockerfile&#34;&gt;(v0.12/alpine-onbuild/Dockerfile)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;v0.12.43-debian-2.0&lt;/code&gt;, &lt;code&gt;v0.12-debian-2&lt;/code&gt; &lt;a href=&#34;https://github.com/fluent/fluentd-docker-image/raw/master/v0.12/debian/Dockerfile&#34;&gt;(v0.12/debian/Dockerfile)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;v0.12.43-debian-onbuild-2.0&lt;/code&gt;, &lt;code&gt;v0.12-debian-onbuild-2&lt;/code&gt; &lt;a href=&#34;https://github.com/fluent/fluentd-docker-image/raw/master/v0.12/debian-onbuild/Dockerfile&#34;&gt;(v0.12/debian-onbuild/Dockerfile)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can use older versions via tag. See &lt;a href=&#34;https://hub.docker.com/r/fluent/fluentd/tags/&#34;&gt;tag page on Docker Hub&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;We recommend to use debian version for production because it uses jemalloc to mitigate memory fragmentation issue.&lt;/p&gt; &#xA;&lt;h3&gt;Using Kubernetes?&lt;/h3&gt; &#xA;&lt;p&gt;Check &lt;a href=&#34;https://github.com/fluent/fluentd-kubernetes-daemonset&#34;&gt;fluentd-kubernetes-daemonset&lt;/a&gt; images.&lt;/p&gt; &#xA;&lt;h2&gt;The detail of image tag&lt;/h2&gt; &#xA;&lt;p&gt;This image is based on the popular &lt;a href=&#34;http://alpinelinux.org&#34;&gt;Alpine Linux project&lt;/a&gt;, available in &lt;a href=&#34;https://hub.docker.com/_/alpine&#34;&gt;the alpine official image&lt;/a&gt;, and Debian images.&lt;/p&gt; &#xA;&lt;h3&gt;For current images&lt;/h3&gt; &#xA;&lt;h4&gt;&lt;code&gt;edge&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Latest released version of Fluentd. This tag is mainly for testing.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;vX.Y-A&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Latest version of &lt;code&gt;vX.Y&lt;/code&gt; Fluentd branch.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;A&lt;/code&gt; will be incremented when image has major changes.&lt;/p&gt; &#xA;&lt;p&gt;When fluentd version is updated, A is reset to &lt;code&gt;1&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;vX.Y.Z-A.B&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Concrete &lt;code&gt;vX.Y.Z&lt;/code&gt; version of Fluentd. This tag is recommeded for the production environment.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;A&lt;/code&gt; will be incremented when image has major changes. &lt;code&gt;B&lt;/code&gt; will be incremented when image has small changes, e.g. library update or bug fixes.&lt;/p&gt; &#xA;&lt;p&gt;When fluentd version is updated, &lt;code&gt;A.B&lt;/code&gt; is reset to &lt;code&gt;1.0&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;onbuild&lt;/code&gt; included tag&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;onbuild&lt;/code&gt; images are deprecated. Use non-&lt;code&gt;onbuild &lt;/code&gt; images instead to build your image. New images, v1.5 or later, don&#39;t provide &lt;code&gt;onbuild&lt;/code&gt; version.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;debian&lt;/code&gt; included tag&lt;/h4&gt; &#xA;&lt;p&gt;The image based on &lt;a href=&#34;https://hub.docker.com/_/debian&#34;&gt;Debian Linux image&lt;/a&gt;. You may use this image when you require plugins which cannot be installed on Alpine (like &lt;code&gt;fluent-plugin-systemd&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;armhf&lt;/code&gt; included tag&lt;/h4&gt; &#xA;&lt;p&gt;The &lt;code&gt;armhf&lt;/code&gt; images use ARM base images for use on devices such as Raspberry Pis.&lt;/p&gt; &#xA;&lt;p&gt;Furthermore, the base images enable support for cross-platform builds using the cross-build tools from &lt;a href=&#34;https://docs.resin.io/reference/base-images/resin-base-images/#resin-xbuild-qemu&#34;&gt;resin.io&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;In order to build these images natively on ARM devices, the &lt;code&gt;CROSS_BUILD_START&lt;/code&gt; and &lt;code&gt;CROSS_BUILD_END&lt;/code&gt; Docker build arguments must be set to the shell no-op (&lt;code&gt;:&lt;/code&gt;), for example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker build --build-arg CROSS_BUILD_START=&#34;:&#34; --build-arg CROSS_BUILD_END=&#34;:&#34; -t fluent/fluentd:v1.3-onbuild-1 v1.3/armhf/alpine-onbuild&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(assuming the command is run from the root of this repository).&lt;/p&gt; &#xA;&lt;h3&gt;For older images&lt;/h3&gt; &#xA;&lt;p&gt;These images/tags are kept for backward compatibility. No update anymore and don&#39;t use for new deployment. Use &#34;current images&#34; instead.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;stable&lt;/code&gt;, &lt;code&gt;latest&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Latest version of stable Fluentd branch (currently &lt;code&gt;v1.3-1&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;vX.Y&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Latest version of &lt;code&gt;vX.Y&lt;/code&gt; Fluentd branch.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;vX.Y.Z&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Concrete &lt;code&gt;vX.Y.Z&lt;/code&gt; version of Fluentd.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;onbuild&lt;/code&gt; included tag, &lt;code&gt;debian&lt;/code&gt; included tag, &lt;code&gt;armhf&lt;/code&gt; included tag&lt;/h4&gt; &#xA;&lt;p&gt;Same as current images.&lt;/p&gt; &#xA;&lt;h2&gt;How to use this image&lt;/h2&gt; &#xA;&lt;p&gt;To create endpoint that collects logs on your host just run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run -d -p 24224:24224 -p 24224:24224/udp -v /data:/fluentd/log fluent/fluentd:v1.3-debian-1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Default configurations are to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;listen port &lt;code&gt;24224&lt;/code&gt; for Fluentd forward protocol&lt;/li&gt; &#xA; &lt;li&gt;store logs with tag &lt;code&gt;docker.**&lt;/code&gt; into &lt;code&gt;/fluentd/log/docker.*.log&lt;/code&gt; (and symlink &lt;code&gt;docker.log&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;store all other logs into &lt;code&gt;/fluentd/log/data.*.log&lt;/code&gt; (and symlink &lt;code&gt;data.log&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Providing your own configuration file and additional options&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;fluentd&lt;/code&gt; arguments can be appended to the &lt;code&gt;docker run&lt;/code&gt; line&lt;/p&gt; &#xA;&lt;p&gt;For example, to provide a bespoke config and make &lt;code&gt;fluentd&lt;/code&gt; verbose, then:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;docker run -ti --rm -v /path/to/dir:/fluentd/etc fluent/fluentd -c /fluentd/etc/&amp;lt;conf&amp;gt; -v&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;The first &lt;code&gt;-v&lt;/code&gt; tells Docker to share &#39;/path/to/dir&#39; as a volume and mount it at /fluentd/etc The &lt;code&gt;-c&lt;/code&gt; after the container name (fluentd) tells &lt;code&gt;fluentd&lt;/code&gt; where to find the config file The second &lt;code&gt;-v&lt;/code&gt; is passed to &lt;code&gt;fluentd&lt;/code&gt; to tell it to be verbose&lt;/p&gt; &#xA;&lt;h2&gt;Change running user&lt;/h2&gt; &#xA;&lt;p&gt;Use &lt;code&gt;-u&lt;/code&gt; option with &lt;code&gt;docker run&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;docker run -p 24224:24224 -u foo -v ...&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;How to build your own image&lt;/h2&gt; &#xA;&lt;p&gt;You can build a customized image based on Fluentd&#39;s image. Customized image can include plugins and &lt;code&gt;fluent.conf&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;h3&gt;1. Create a working directory&lt;/h3&gt; &#xA;&lt;p&gt;We will use this directory to build a Docker image. Type following commands on a terminal to prepare a minimal project first:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Create project directory.&#xA;mkdir custom-fluentd&#xA;cd custom-fluentd&#xA;&#xA;# Download default fluent.conf and entrypoint.sh. This file will be copied to the new image.&#xA;# VERSION is v1.7 like fluentd version and OS is alpine or debian.&#xA;# Full example is https://raw.githubusercontent.com/fluent/fluentd-docker-image/master/v1.10/debian/fluent.conf&#xA;&#xA;curl https://raw.githubusercontent.com/fluent/fluentd-docker-image/master/VERSION/OS/fluent.conf &amp;gt; fluent.conf&#xA;&#xA;curl https://raw.githubusercontent.com/fluent/fluentd-docker-image/master/VERSION/OS/entrypoint.sh &amp;gt; entrypoint.sh&#xA;chmod +x entrypoint.sh&#xA;&#xA;# Create plugins directory. plugins scripts put here will be copied to the new image.&#xA;mkdir plugins&#xA;&#xA;curl https://raw.githubusercontent.com/fluent/fluentd-docker-image/master/Dockerfile.sample &amp;gt; Dockerfile&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;2. Customize &lt;code&gt;fluent.conf&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Documentation of &lt;code&gt;fluent.conf&lt;/code&gt; is available at &lt;a href=&#34;https://docs.fluentd.org&#34;&gt;docs.fluentd.org&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;3. Customize Dockerfile to install plugins (optional)&lt;/h3&gt; &#xA;&lt;p&gt;You can install &lt;a href=&#34;https://www.fluentd.org/plugins&#34;&gt;Fluentd plugins&lt;/a&gt; using Dockerfile. Sample Dockerfile installs &lt;code&gt;fluent-plugin-elasticsearch&lt;/code&gt;. To add plugins, edit &lt;code&gt;Dockerfile&lt;/code&gt; as following:&lt;/p&gt; &#xA;&lt;h3&gt;3.1 For current images&lt;/h3&gt; &#xA;&lt;h4&gt;Alpine version&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Dockerfile&#34;&gt;FROM fluent/fluentd:v1.15-1&#xA;&#xA;# Use root account to use apk&#xA;USER root&#xA;&#xA;# below RUN includes plugin as examples elasticsearch is not required&#xA;# you may customize including plugins as you wish&#xA;RUN apk add --no-cache --update --virtual .build-deps \&#xA;        sudo build-base ruby-dev \&#xA; &amp;amp;&amp;amp; sudo gem install fluent-plugin-elasticsearch \&#xA; &amp;amp;&amp;amp; sudo gem sources --clear-all \&#xA; &amp;amp;&amp;amp; apk del .build-deps \&#xA; &amp;amp;&amp;amp; rm -rf /tmp/* /var/tmp/* /usr/lib/ruby/gems/*/cache/*.gem&#xA;&#xA;COPY fluent.conf /fluentd/etc/&#xA;COPY entrypoint.sh /bin/&#xA;&#xA;USER fluent&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Debian version&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Dockerfile&#34;&gt;FROM fluent/fluentd:v1.15-debian-1&#xA;&#xA;# Use root account to use apt&#xA;USER root&#xA;&#xA;# below RUN includes plugin as examples elasticsearch is not required&#xA;# you may customize including plugins as you wish&#xA;RUN buildDeps=&#34;sudo make gcc g++ libc-dev&#34; \&#xA; &amp;amp;&amp;amp; apt-get update \&#xA; &amp;amp;&amp;amp; apt-get install -y --no-install-recommends $buildDeps \&#xA; &amp;amp;&amp;amp; sudo gem install fluent-plugin-elasticsearch \&#xA; &amp;amp;&amp;amp; sudo gem sources --clear-all \&#xA; &amp;amp;&amp;amp; SUDO_FORCE_REMOVE=yes \&#xA;    apt-get purge -y --auto-remove \&#xA;                  -o APT::AutoRemove::RecommendsImportant=false \&#xA;                  $buildDeps \&#xA; &amp;amp;&amp;amp; rm -rf /var/lib/apt/lists/* \&#xA; &amp;amp;&amp;amp; rm -rf /tmp/* /var/tmp/* /usr/lib/ruby/gems/*/cache/*.gem&#xA;&#xA;COPY fluent.conf /fluentd/etc/&#xA;COPY entrypoint.sh /bin/&#xA;&#xA;USER fluent&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Note&lt;/h4&gt; &#xA;&lt;p&gt;These example run &lt;code&gt;apk add&lt;/code&gt;/&lt;code&gt;apt-get install&lt;/code&gt; to be able to install Fluentd plugins which require native extensions (they are removed immediately after plugin installation). If you&#39;re sure that plugins don&#39;t include native extensions, you can omit it to make image build faster.&lt;/p&gt; &#xA;&lt;h3&gt;3.2 For older images&lt;/h3&gt; &#xA;&lt;p&gt;This section is for existing users. Don&#39;t recommend for new deployment.&lt;/p&gt; &#xA;&lt;h4&gt;Alpine version&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Dockerfile&#34;&gt;FROM fluent/fluentd:v1.3-onbuild-1&#xA;&#xA;# below RUN includes plugin as examples elasticsearch is not required&#xA;# you may customize including plugins as you wish&#xA;&#xA;RUN apk add --no-cache --update --virtual .build-deps \&#xA;        sudo build-base ruby-dev \&#xA; &amp;amp;&amp;amp; sudo gem install \&#xA;        fluent-plugin-elasticsearch \&#xA; &amp;amp;&amp;amp; sudo gem sources --clear-all \&#xA; &amp;amp;&amp;amp; apk del .build-deps \&#xA; &amp;amp;&amp;amp; rm -rf /tmp/* /var/tmp/* /usr/lib/ruby/gems/*/cache/*.gem&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Debian version&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Dockerfile&#34;&gt;FROM fluent/fluentd:v1.3-debian-onbuild-1&#xA;&#xA;# below RUN includes plugin as examples elasticsearch is not required&#xA;# you may customize including plugins as you wish&#xA;&#xA;RUN buildDeps=&#34;sudo make gcc g++ libc-dev ruby-dev&#34; \&#xA; &amp;amp;&amp;amp; apt-get update \&#xA; &amp;amp;&amp;amp; apt-get install -y --no-install-recommends $buildDeps \&#xA; &amp;amp;&amp;amp; sudo gem install \&#xA;        fluent-plugin-elasticsearch \&#xA; &amp;amp;&amp;amp; sudo gem sources --clear-all \&#xA; &amp;amp;&amp;amp; SUDO_FORCE_REMOVE=yes \&#xA;    apt-get purge -y --auto-remove \&#xA;                  -o APT::AutoRemove::RecommendsImportant=false \&#xA;                  $buildDeps \&#xA; &amp;amp;&amp;amp; rm -rf /var/lib/apt/lists/* \&#xA; &amp;amp;&amp;amp; rm -rf /tmp/* /var/tmp/* /usr/lib/ruby/gems/*/cache/*.gem&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;4. Build image&lt;/h3&gt; &#xA;&lt;p&gt;Use &lt;code&gt;docker build&lt;/code&gt; command to build the image. This example names the image as &lt;code&gt;custom-fluentd:latest&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker build -t custom-fluentd:latest ./&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;5. Test it&lt;/h3&gt; &#xA;&lt;p&gt;Once the image is built, it&#39;s ready to run. Following commands run Fluentd sharing &lt;code&gt;./log&lt;/code&gt; directory with the host machine:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mkdir -p log&#xA;docker run -it --rm --name custom-docker-fluent-logger -v $(pwd)/log:/fluentd/log custom-fluentd:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Open another terminal and type following command to inspect IP address. Fluentd is running on this IP address:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker inspect -f &#39;{{.NetworkSettings.IPAddress}}&#39; custom-docker-fluent-logger&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Let&#39;s try to use another docker container to send its logs to Fluentd.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run --log-driver=fluentd --log-opt tag=&#34;docker.{{.ID}}&#34; --log-opt fluentd-address=FLUENTD.ADD.RE.SS:24224 python:alpine echo Hello&#xA;# and force flush buffered logs&#xA;docker kill -s USR1 custom-docker-fluent-logger&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(replace &lt;code&gt;FLUENTD.ADD.RE.SS&lt;/code&gt; with actual IP address you inspected at the previous step)&lt;/p&gt; &#xA;&lt;p&gt;You will see some logs sent to Fluentd.&lt;/p&gt; &#xA;&lt;h3&gt;References&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.fluentd.org/guides/recipes/docker-logging&#34;&gt;Docker Logging | fluentd.org&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://docs.docker.com/engine/reference/logging/fluentd&#34;&gt;Fluentd logging driver - Docker Docs&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Issues&lt;/h2&gt; &#xA;&lt;p&gt;We can&#39;t notice comments in the DockerHub so don&#39;t use them for reporting issue or asking question.&lt;/p&gt; &#xA;&lt;p&gt;If you have any problems with or questions about this image, please contact us through a &lt;a href=&#34;https://github.com/fluent/fluentd-docker-image/issues&#34;&gt;GitHub issue&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>udacity/cd0157_Final_Pipeline</title>
    <updated>2022-07-10T01:39:18Z</updated>
    <id>tag:github.com,2022-07-10:/udacity/cd0157_Final_Pipeline</id>
    <link href="https://github.com/udacity/cd0157_Final_Pipeline" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Final Pipeline exercise for the cd0157-Server-Deployment-and-Containerization course.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Purpose of This Repo&lt;/h1&gt; &#xA;&lt;p&gt;This repos has a sample &#34;Hello World&#34; flask application that we will deploy on EKS cluster using the AWS Codebuild and Codepipeline services. Here is the purpose of each file present in this repo:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&#xA;├── app.py         # A sample &#34;Hello World&#34; flask application&#xA;├── ci-cd-codepipeline.cfn.yml # Cloudformation template to create the Codebuild, and Codepipeline, and related resources. &#xA;├── buildspec.yml  # Codebuild will execute the commands available here. &#xA;├── Dockerfile     # Codebuild will build an image using the Dockerfile, and push it to the Dockerhub/or AWS ECR. &#xA;├── deployment.yml # The deployment file for the Kubernetes cluster. Codebuild will apply this deployment using the one of the kubectl commands.   &#xA;├── iam-role-policy.json # The Policy for the IAM role that the Codebuild will assume&#xA;├── trust.json # The trusted entity details for the  IAM role that the COdebuild will assume&#xA;└── aws-auth-patch.yml  # This is an autogenerated file for your reference. &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Run the app on AWS Cloud&lt;/h2&gt; &#xA;&lt;p&gt;The steps you will follow are:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Create an EKS Cluster, IAM Role for CodeBuild, and Authenticate the CodeBuild&lt;/strong&gt;&lt;br&gt; You will start with creating an EKS cluster in your preferred region, using &lt;code&gt;eksctl&lt;/code&gt; command. Then, you will create an IAM role that the Codebuild will assume to access your k8s/EKS cluster. This IAM role will have the necessary access permissions (attached JSON policies), and you will also have to add this role to the k8s cluster&#39;s configMap. &lt;br&gt;&lt;br&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Deployment to Kubernetes using CodePipeline and CodeBuild&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Generate a Github access token&lt;/strong&gt;&lt;br&gt;Next, you will generate an access-token from your Github account so that whichever service has that token can access the repositories from your Github account. You will share this token with the AWS Codebuild service (programmatically) so that it can build and test your code. &lt;br&gt;&lt;br&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Create Codebuild and CodePipeline resources using CloudFormation template&lt;/strong&gt;&lt;br&gt;Create a pipeline watching for commits to your Github repository. You will create the necessary AWS resources using a script, Cloudformation template (.yaml) file, available to you. These resources collectively are called &lt;strong&gt;stack&lt;/strong&gt;. It will automatically create the Codebuild and Codepipeline projects for you. &lt;br&gt;&lt;br&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Build and deploy&lt;/strong&gt;&lt;br&gt;Finally, you will trigger the &lt;strong&gt;build&lt;/strong&gt; based on a Github commit.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>truecharts/pub</title>
    <updated>2022-07-10T01:39:18Z</updated>
    <id>tag:github.com,2022-07-10:/truecharts/pub</id>
    <link href="https://github.com/truecharts/pub" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Publications repository for website content, video&#39;s, grafics etc&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;pub&lt;/h1&gt; &#xA;&lt;p&gt;Publications repository for website content, video&#39;s, grafics etc&lt;/p&gt;</summary>
  </entry>
</feed>