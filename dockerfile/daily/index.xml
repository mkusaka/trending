<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dockerfile Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-03-04T01:26:37Z</updated>
  <subtitle>Daily Trending of Dockerfile in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>OneBusAway/onebusaway-docker</title>
    <updated>2024-03-04T01:26:37Z</updated>
    <id>tag:github.com,2024-03-04:/OneBusAway/onebusaway-docker</id>
    <link href="https://github.com/OneBusAway/onebusaway-docker" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Docker configuration for the OneBusAway Application Modules (https://github.com/OneBusAway/onebusaway-application-modules)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;OneBusAway v2 Docker Packaging&lt;/h1&gt; &#xA;&lt;p&gt;This repository contains scripts and configuration for building version 2 of the &lt;a href=&#34;https://github.com/OneBusAway/onebusaway-application-modules&#34;&gt;OneBusAway Application Suite&lt;/a&gt; for use with &lt;a href=&#34;https://www.docker.com/&#34;&gt;Docker&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Published Images&lt;/h2&gt; &#xA;&lt;p&gt;You can find the latest published Docker images on Docker Hub:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://hub.docker.com/r/opentransitsoftwarefoundation/onebusaway-bundle-builder&#34;&gt;onebusaway-bundle-builder&lt;/a&gt; - This image is built from the &lt;code&gt;bundler&lt;/code&gt; directory and contains the functionality needed to create a transit data bundle from a GTFS feed.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://hub.docker.com/r/opentransitsoftwarefoundation/onebusaway-api-webapp&#34;&gt;onebusaway-api-webapp&lt;/a&gt; - This image is built from the &lt;code&gt;oba&lt;/code&gt; directory and contains the functionality needed to run the OBA API webapp.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Running locally&lt;/h2&gt; &#xA;&lt;p&gt;To build bundles and run the webapp server with your own GTFS feed, use the &lt;a href=&#34;https://docs.docker.com/compose/&#34;&gt;Docker Compose&lt;/a&gt; services in this repository.&lt;/p&gt; &#xA;&lt;h3&gt;Building bundles&lt;/h3&gt; &#xA;&lt;p&gt;To build a bundle, use the &lt;code&gt;oba_bundler&lt;/code&gt; service:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;GTFS_URL=https://www.soundtransit.org/GTFS-rail/40_gtfs.zip docker-compose up oba_bundler&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This process will create all necessary bundle files and metadata, and all will be accessible in your local repo&#39;s &lt;code&gt;./bundle&lt;/code&gt; directory.&lt;/p&gt; &#xA;&lt;p&gt;When the GTFS_URL is unspecified, &lt;code&gt;oba_bundler&lt;/code&gt; will download and use the GTFS data for Davis, CA&#39;s Unitrans service. This can be used with the &lt;code&gt;bin/validate.sh&lt;/code&gt; script to verify that the stack is working correctly.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker-compose up oba_bundler&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Running the OneBusAway server&lt;/h3&gt; &#xA;&lt;p&gt;Once you have a built OBA bundle inside &lt;code&gt;./bundle&lt;/code&gt;, you can run the OBA server and make it accessible on your host machine with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker-compose up oba_app&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You will then have three webapps available:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;API, hosted at &lt;code&gt;http://localhost:8080/onebusaway-api-webapp/api?key=TEST&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;an example call could be to &lt;code&gt;http://localhost:8080/onebusaway-api-webapp/api/where/agencies-with-coverage.json?key=TEST&lt;/code&gt;, which should show metadata about the agency you loaded&lt;/li&gt; &#xA;   &lt;li&gt;the test/demo API key is set in &lt;code&gt;./oba/config/onebusaway-api-webapp-data-sources.xml&lt;/code&gt;; this can be changed as needed, and should be deleted before use in production&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;When done using this web server, you can use the shell-standard &lt;code&gt;^C&lt;/code&gt; to exit out and turn it off. If issues persist across runs, you can try using &lt;code&gt;docker-compose down -v&lt;/code&gt; and then &lt;code&gt;docker-compose up oba_app&lt;/code&gt; to refresh the Docker containers and services.&lt;/p&gt; &#xA;&lt;h3&gt;Inspecting the database&lt;/h3&gt; &#xA;&lt;p&gt;The MySQL database Docker Compose service should remain up after a call of &lt;code&gt;docker-compose up oba_app&lt;/code&gt;. Otherwise, you can always invoke it using &lt;code&gt;docker-compose up oba_database&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;A database port is open to your host machine, so you can connect to it programmatically using &lt;code&gt;mysql&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mysql -u oba_user -p -h localhost:3306&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Running in Kubernetes&lt;/h2&gt; &#xA;&lt;h3&gt;Creating the docker images&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Build the bundler image:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker build ./bundler -t oba/bundler:test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Build the app image:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker build ./oba -t oba/app:test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Creating the Kubernetes resources:&lt;/h3&gt; &#xA;&lt;p&gt;Apply the Kubernetes resources in oba.yaml&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;kubectl apply -f oba.yaml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The YAML file deploys the OneBusAway application and a MySQL database within a dedicated oba namespace in Kubernetes. It also sets up a secret for sensitive data and a ConfigMap for GTFS data URL, while exposing the database as a service for other pods to access.&lt;/p&gt; &#xA;&lt;p&gt;You can portforward the oba app to your localhost using:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;kubectl port-forward deploy/oba-app-deployment -n oba 8080:8080&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Inspecting the database&lt;/h3&gt; &#xA;&lt;p&gt;You can portforward the service to your localhost using:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;kubectl port-forward service/oba-database -n oba 3306:3306&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then you can connect to it programmatically using &lt;code&gt;mysql&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mysql -u oba_user -p -h localhost:3306&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>LLOneBot/llonebot-docker</title>
    <updated>2024-03-04T01:26:37Z</updated>
    <id>tag:github.com,2024-03-04:/LLOneBot/llonebot-docker</id>
    <link href="https://github.com/LLOneBot/llonebot-docker" rel="alternate"></link>
    <summary type="html">&lt;p&gt;一键部署基于NTQQ的OneBot协议的Bot容器&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;LLOneBot-Docker&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://hub.docker.com/r/mlikiowa/llonebot-docker&#34;&gt;DockerHub&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Information&lt;/h2&gt; &#xA;&lt;p&gt;请注意! 该项目使用应当遵守上游开源库协议与要求，遵守当地法律与规范。&lt;/p&gt; &#xA;&lt;p&gt;该项目适用于快速将NTQQ Bot托管容器，提供Vnc与NoVnc，以便连接图形界面。&lt;/p&gt; &#xA;&lt;h2&gt;Support Platform/Arch&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Linux/Amd64&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Linux/Arm64&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;安装参考已选方案一与方案二 启动&lt;/li&gt; &#xA; &lt;li&gt;启动后连接Vnc或者NoVnc 到设置配置Bot&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;使用方案（一）快速启动&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo docker run -d --name onebot-docker0 -e VNC_PASSWD=vncpasswd -p 3000:3000 -p 5900:5900 -p 6081:6081 -p 3001:3001 -v ${PWD}/LiteLoader/:/opt/QQ/LiteLoader/ mlikiowa/llonebot-docker&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;其中vncpasswd换成你的VNC密码 或者下载代码中的docker-compose.yml，然后执行&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo docker-compose up -d&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;使用方案（二）快速配置脚本 实验性&lt;/h2&gt; &#xA;&lt;p&gt;零配置脚本 快速启动&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl https://cdn.jsdelivr.net/gh/LLOneBot/llonebot-docker/fastboot.sh -o fastboot.sh &amp;amp; chmod +x fastboot.sh &amp;amp; sudo sh fastboot.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;wget -O fastboot.sh https://cdn.jsdelivr.net/gh/LLOneBot/llonebot-docker/fastboot.sh &amp;amp; chmod +x fastboot.sh &amp;amp; sudo sh fastboot.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Feat&lt;/h2&gt; &#xA;&lt;h3&gt;崩溃快速重启&lt;/h3&gt; &#xA;&lt;p&gt;你仅仅需要到设置配置自动登录，保证崩溃时手机QQ不在线即可，其余时间可以使用手机QQ&lt;/p&gt; &#xA;&lt;h3&gt;数据固化&lt;/h3&gt; &#xA;&lt;p&gt;暂时忽略 未实现QQ本体数据固化 仅实现LiteLoader包括其所有插件数据固化(按照以上流程启动无须考虑，已自动启用) 无需阅读该条目录&lt;/p&gt; &#xA;&lt;p&gt;先完成上面的&lt;code&gt;快速运行&lt;/code&gt;，保证容器在运行状态&lt;/p&gt; &#xA;&lt;p&gt;如果之前是docker run运行的，执行&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt; sudo docker run -d --name onebot-docker0 -e VNC_PASSWD=vncpasswd -p 3000:3000 -p 5900:5900 -p 6081:6081 -p 3001:3001 -v ${PWD}/LiteLoader/:/opt/QQ/LiteLoader/ mlikiowa/llonebot-docker&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;如果之前是docker-compose运行的&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker-compose up -d&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Server Login&lt;/h2&gt; &#xA;&lt;h3&gt;noVNC登陆&lt;/h3&gt; &#xA;&lt;p&gt;浏览器访问&lt;code&gt;http://服务器IP:6081&lt;/code&gt;，默认密码是&lt;code&gt;vncpasswd&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;VNC登陆&lt;/h3&gt; &#xA;&lt;p&gt;使用VNC软件登陆&lt;code&gt;服务器IP:5900&lt;/code&gt;，默认密码是&lt;code&gt;vncpasswd&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;修改VNC密码&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo docker exec onebot-docker0 sh -c &#34;x11vnc -storepasswd newpasswd /root/.vnc/passwd&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;其中newpasswd换成你的新密码，立即生效，无需重启容器&lt;/p&gt; &#xA;&lt;h2&gt;参考与基础&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/LLOneBot/LLOneBot&#34;&gt;LLOneBot/LLOneBot&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/yuuki-nya/chronocat-docker/raw/main/Dockerfile&#34;&gt;yuuki-nya/chronocat-docker&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;已知问题与提示&lt;/h2&gt; &#xA;&lt;h3&gt;1.快速闪退&lt;/h3&gt; &#xA;&lt;p&gt;如果连接反向ws后快速闪退 清空容器数据之后 再次配置先启用上报自身消息 在vnc窗口复制 之前触发机器人的消息 使用机器人账号发送 再正常使用bot&lt;/p&gt;</summary>
  </entry>
</feed>