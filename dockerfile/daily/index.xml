<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dockerfile Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-10-20T01:33:08Z</updated>
  <subtitle>Daily Trending of Dockerfile in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>pamelafox/python-project-template</title>
    <updated>2022-10-20T01:33:08Z</updated>
    <id>tag:github.com,2022-10-20:/pamelafox/python-project-template</id>
    <link href="https://github.com/pamelafox/python-project-template" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Github template repository for a Python project with support for Codespaces, devcontainer, and Github Actions.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Python project template&lt;/h1&gt; &#xA;&lt;p&gt;This is a template repository for any Python project that comes with the following dev tools:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;black&lt;/code&gt;: auto-formats code&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;isort&lt;/code&gt;: sorts the imports&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;flake8&lt;/code&gt;: looks for common errors&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;pyupgrade&lt;/code&gt;: upgrades Python syntax&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;All of those checks are run as pre-commit hooks using the &lt;code&gt;pre-commit&lt;/code&gt; library.&lt;/p&gt; &#xA;&lt;p&gt;It includes &lt;code&gt;pytest&lt;/code&gt; for testing plus the &lt;code&gt;pytest-cov&lt;/code&gt; plugin to measure coverage.&lt;/p&gt; &#xA;&lt;p&gt;The checks and tests are all run using Github actions on every pull request and merge to main.&lt;/p&gt; &#xA;&lt;p&gt;This repository is setup for Python 3.10. To customize that, change the &lt;code&gt;VARIANT&lt;/code&gt; argument in &lt;code&gt;.devcontainer/devcontainer.json&lt;/code&gt;, and change the flag passed into &lt;code&gt;pyupgrade&lt;/code&gt; in &lt;code&gt;.precommit-config.yaml&lt;/code&gt; and &lt;code&gt;.github/workflows/python.yaml&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Development instructions&lt;/h2&gt; &#xA;&lt;h2&gt;With devcontainer&lt;/h2&gt; &#xA;&lt;p&gt;This repository comes with a devcontainer (a Dockerized Python environment). If you open it in Codespaces, it should automatically initialize the devcontainer.&lt;/p&gt; &#xA;&lt;p&gt;Locally, you can open it in VS Code with the Dev Containers extension installed.&lt;/p&gt; &#xA;&lt;h2&gt;Without devcontainer&lt;/h2&gt; &#xA;&lt;p&gt;If you can&#39;t or don&#39;t want to use the devcontainer, then you should first create a virtual environment:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python3 -m venv .venv&#xA;source .venv/bin/activate&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then install the dev tools and pre-commit hooks:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pip3 install --user -r requirements-dev.txt&#xA;pre-commit install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Adding code and tests&lt;/h2&gt; &#xA;&lt;p&gt;This repository starts with a very simple &lt;code&gt;main.py&lt;/code&gt; and a test for it at &lt;code&gt;tests/main_test.py&lt;/code&gt;. You&#39;ll want to replace that with your own code, and you&#39;ll probably want to add additional files as your code grows in complexity.&lt;/p&gt; &#xA;&lt;p&gt;When you&#39;re ready to run tests, just run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pytest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;File breakdown&lt;/h1&gt; &#xA;&lt;p&gt;Here&#39;s a short explanation of each file/folder in this template:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;.devcontainer&lt;/code&gt;: Folder containing files used for setting up a devcontainer &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;devcontainer.json&lt;/code&gt;: File configuring the devcontainer, includes VS Code settings&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Dockerfile&lt;/code&gt;: File with commands to build the devcontainer&#39;s Docker image&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;.github&lt;/code&gt;: Folder for Github-specific files and folders &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;workflows&lt;/code&gt;: Folder containing Github actions config files &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;code&gt;python.yaml&lt;/code&gt;: File configuring Github action that runs tools and tests&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;tests&lt;/code&gt;: Folder containing Python tests &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;main_test.py&lt;/code&gt;: File with pytest-style tests of main.py&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;.flake8&lt;/code&gt;: File configuring the flake8 tool&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;.gitignore&lt;/code&gt;: File describing what file patterns Git should never track&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;.pre-commit-config.yaml&lt;/code&gt;: File listing all the pre-commit hooks and args&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;main.py&lt;/code&gt;: The main (and currently only) Python file for the program&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;pyproject.toml&lt;/code&gt;: File configuring most of the Python dev tools&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;README.md&lt;/code&gt;: You&#39;re reading it!&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;requirements-dev.txt&lt;/code&gt;: File listing all PyPi packages required for development&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;requirements.txt&lt;/code&gt;: File listing all PyPi packages required for production&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For a longer explanation, read &lt;a href=&#34;http://blog.pamelafox.org/2022/09/how-i-setup-python-project.html&#34;&gt;this blog post&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;ðŸ”Ž Found an issue or have an idea for improvement?&lt;/h1&gt; &#xA;&lt;p&gt;Help me make this template repository better by letting us know and opening an issue!&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>openwdl/workflow-template-wdl</title>
    <updated>2022-10-20T01:33:08Z</updated>
    <id>tag:github.com,2022-10-20:/openwdl/workflow-template-wdl</id>
    <link href="https://github.com/openwdl/workflow-template-wdl" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;workflow-template-wdl&lt;/h1&gt; &#xA;&lt;p&gt;This repo includes a devcontainer configuration which will create a GitHub Codespace for WDL development!&lt;/p&gt; &#xA;&lt;p&gt;Devcontainer specs:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openwdl/workflow-template-wdl/main/.devcontainer/devcontainer.json&#34;&gt;DevContainer config&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openwdl/workflow-template-wdl/main/.devcontainer/Dockerfile&#34;&gt;Dockerfile&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Getting started&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Create a new repo in GitHub using this &lt;a href=&#34;https://github.com/openwdl/workflow-template-wdl/generate&#34;&gt;template&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Open the repo in &lt;a href=&#34;https://raw.githubusercontent.com/openwdl/codespaces&#34;&gt;Codespaces&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Setup Verification&lt;/h2&gt; &#xA;&lt;h4&gt;Verify tools&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;verify miniwdl via &lt;code&gt;miniwdl --help&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;verify cromwell via &lt;code&gt;cromwell --help&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Test miniwdl installation&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;open a command prompt and run...&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;miniwdl run_self_test&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;â€¦30 second test of the installation with a built-in workflow&lt;/li&gt; &#xA; &lt;li&gt;should print numerous log messages, and conclude with...&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;miniwdl run_self_test OK&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>