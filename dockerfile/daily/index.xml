<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dockerfile Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-03T01:39:04Z</updated>
  <subtitle>Daily Trending of Dockerfile in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>RocketChat/Docker.Official.Image</title>
    <updated>2022-07-03T01:39:04Z</updated>
    <id>tag:github.com,2022-07-03:/RocketChat/Docker.Official.Image</id>
    <link href="https://github.com/RocketChat/Docker.Official.Image" rel="alternate"></link>
    <summary type="html">&lt;p&gt;OFFICIAL REPOSITORY rocket.chat&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Rocket.Chat&lt;/h1&gt; &#xA;&lt;p&gt;Rocket.Chat is a Web Chat Server, developed in JavaScript, using the Meteor fullstack framework.&lt;/p&gt; &#xA;&lt;p&gt;It is a great solution for communities and companies wanting to privately host their own chat service or for developers looking forward to build and evolve their own chat platforms.&lt;/p&gt; &#xA;&lt;p&gt;%%LOGO%%&lt;/p&gt; &#xA;&lt;h1&gt;How to use this image&lt;/h1&gt; &#xA;&lt;h3&gt;Docker Compose&lt;/h3&gt; &#xA;&lt;p&gt;If you need both the mongo and Rocket.Chat containers, use a docker compose one-liner:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker-compose up -d&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Which will run both containers, with Rocket.Chat listening on &lt;a href=&#34;http://localhost:3000&#34;&gt;http://localhost:3000&lt;/a&gt; Then, access it via &lt;code&gt;http://localhost:3000&lt;/code&gt; in a browser. Replace &lt;code&gt;localhost&lt;/code&gt; in &lt;code&gt;ROOT_URL&lt;/code&gt; with your own domain name if you are hosting at your own domain.&lt;/p&gt; &#xA;&lt;p&gt;Stop the containers with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker compose down&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Individual containers&lt;/h3&gt; &#xA;&lt;p&gt;First, start an instance of mongo:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run --name db -d mongo:4.0 mongod --smallfiles&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then start Rocket.Chat linked to this mongo instance:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run --name rocketchat --link db:db -d rocket.chat&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will start a Rocket.Chat instance listening on the default Meteor port of 3000 on the container.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;d like to be able to access the instance directly at standard port on the host machine:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run --name rocketchat -p 80:3000 --env ROOT_URL=http://localhost --link db:db -d rocket.chat&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, access it via &lt;code&gt;http://localhost&lt;/code&gt; in a browser. Replace &lt;code&gt;localhost&lt;/code&gt; in &lt;code&gt;ROOT_URL&lt;/code&gt; with your own domain name if you are hosting at your own domain.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re using a third party Mongo provider, or working with Kubernetes, you need to override the &lt;code&gt;MONGO_URL&lt;/code&gt; environment variable:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run --name rocketchat -p 80:3000 --env ROOT_URL=http://localhost --env MONGO_URL=mongodb://mymongourl/mydb -d rocket.chat&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>PacktPublishing/Modern-CMake-for-Cpp</title>
    <updated>2022-07-03T01:39:04Z</updated>
    <id>tag:github.com,2022-07-03:/PacktPublishing/Modern-CMake-for-Cpp</id>
    <link href="https://github.com/PacktPublishing/Modern-CMake-for-Cpp" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Modern CMake for C++, published by Packt&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Modern CMake for C++&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.packtpub.com/product/modern-cmake-for-c/9781801070058&#34;&gt;&lt;img src=&#34;https://static.packt-cdn.com/products/9781801070058/cover/smaller&#34; height=&#34;256px&#34; align=&#34;right&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This is the code repository for &lt;a href=&#34;https://www.packtpub.com/product/modern-cmake-for-c/9781801070058&#34;&gt;Modern CMake for C++&lt;/a&gt;, published by Packt.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Discover a better approach to building, testing, and packaging your software&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;What is this book about?&lt;/h2&gt; &#xA;&lt;p&gt;Creating top-notch software is an extremely difficult undertaking. Developers researching the subject have difficulty determining which advice is up-to-date and which approaches have already been replaced by easier, better practices. At the same time, most online resources offer limited explanation, while also lacking the proper context and structure.&lt;/p&gt; &#xA;&lt;p&gt;This book covers the following exciting features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Understand best practices for building C++ code&lt;/li&gt; &#xA; &lt;li&gt;Gain practical knowledge of the CMake language by focusing on the most useful aspects&lt;/li&gt; &#xA; &lt;li&gt;Use cutting-edge tooling to guarantee code quality with the help of tests and static and dynamic analysis&lt;/li&gt; &#xA; &lt;li&gt;Discover how to manage, discover, download, and link dependencies with CMake&lt;/li&gt; &#xA; &lt;li&gt;Build solutions that can be reused and maintained in the long term&lt;/li&gt; &#xA; &lt;li&gt;Understand how to optimize build artifacts and the build process itself&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you feel this book is for you, get your &lt;a href=&#34;https://www.amazon.com/Modern-CMake-Discover-approach-packaging/dp/1801070059&#34;&gt;copy&lt;/a&gt; today!&lt;/p&gt; &#xA;&lt;h2&gt;Instructions and Navigations&lt;/h2&gt; &#xA;&lt;p&gt;All of the code is organized into folders. For example, Chapter02.&lt;/p&gt; &#xA;&lt;p&gt;The code will look like the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;function(Inner)&#xA;  message(&#34;  &amp;gt; Inner: ${V}&#34;)&#xA;  set(V 3)&#xA;  message(&#34;  &amp;lt; Inner: ${V}&#34;)&#xA;endfunction()&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Following is what you need for this book:&lt;/strong&gt; The book is for build engineers and software developers with knowledge of C/C++ programming who are looking to learn CMake to automate the process of building small and large software solutions. If you are someone who&#39;s just getting started with CMake, a long-time GNU Make user, or simply looking to brush up on the latest best practices, this book is for you.&lt;/p&gt; &#xA;&lt;p&gt;With the following software and hardware list you can run all code files present in the book (Chapter 1-13).&lt;/p&gt; &#xA;&lt;h3&gt;Software and Hardware List&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Chapter&lt;/th&gt; &#xA;   &lt;th&gt;Software/Hardware required&lt;/th&gt; &#xA;   &lt;th&gt;OS required&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;1-13&lt;/td&gt; &#xA;   &lt;td&gt;Cmake 3.20&lt;/td&gt; &#xA;   &lt;td&gt;Windows, Mac OS X, and Linux&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;We also provide a PDF file that has color images of the screenshots/diagrams used in this book. &lt;a href=&#34;https://static.packt-cdn.com/downloads/9781801070058_ColorImages.pdf&#34;&gt;Click here to download it&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Related products&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;CMake Cookbook &lt;a href=&#34;https://www.packtpub.com/product/cmake-cookbook/9781788470711&#34;&gt;[Packt]&lt;/a&gt; &lt;a href=&#34;https://www.amazon.com/CMake-Cookbook-Building-packaging-software/dp/1788470710&#34;&gt;[Amazon]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The Art of Writing Efficient Programs &lt;a href=&#34;https://www.packtpub.com/product/the-art-of-writing-efficient-programs/9781800208117&#34;&gt;[Packt]&lt;/a&gt; &lt;a href=&#34;https://www.amazon.com/Art-Writing-Efficient-Programs-optimizations/dp/1800208111&#34;&gt;[Amazon]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Get to Know the Author&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Rafał Świdziński&lt;/strong&gt; works as a staff engineer at Google. With over 10 years of professional experience as a full stack developer, he has been able to experiment with a vast multitude of programming languages and technologies. During this time, he has been building software under his own company and for corporations including Cisco Meraki, Amazon, and Ericsson. Originally from Łódź, Poland, he now lives in London, UK, from where he runs a YouTube channel, “Smok,” discussing topics of software development. He tackles technical problems, including real-life and work-related challenges encountered by many people in the field. Throughout his work, he explains the technical concepts in detail and demystifies the art of being a software engineer. His primary focus is on high-quality code and the craftsmanship of programming.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>eugene-krivosheyev/docker</title>
    <updated>2022-07-03T01:39:04Z</updated>
    <id>tag:github.com,2022-07-03:/eugene-krivosheyev/docker</id>
    <link href="https://github.com/eugene-krivosheyev/docker" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Intro to Docker&lt;/h1&gt; &#xA;&lt;p&gt;Две части курса – вводная и основная: 8 + 8 ак. часов&lt;/p&gt; &#xA;&lt;h2&gt;Prerequisites&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; RAM ≥ 4Gb&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Права локального админа для аккаунта участника&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Доступен git repo с данным руководством {{ git-repo }} &lt;code&gt;https://github.com/eugene-krivosheyev/docker&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Доступен {{ registry-host }} &lt;code&gt;https://hub.docker.com&lt;/code&gt; (Docker Hub)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Зарегистрирована учетная запись {{ registry-account }} на {{ registry-host }}&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Установлен Docker CE или совместимый менеджер контейнеров (e.g. Podman)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo dnf install -y docker&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;!-- gh-md-toc --depth=1 --hide-header --hide-footer README.md | pbcopy --&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/eugene-krivosheyev/docker/main/#intro-to-docker&#34;&gt;Intro to Docker&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/eugene-krivosheyev/docker/main/#%D0%B2%D0%B2%D0%B5%D0%B4%D0%B5%D0%BD%D0%B8%D0%B5-%D0%B2-docker-45&#34;&gt;Введение в Docker &lt;sup&gt;45&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/eugene-krivosheyev/docker/main/#hands-on-practice-quest-00-prerequisites-sound-check-30--5&#34;&gt;Hands-on practice quest #00: prerequisites sound-check &lt;sup&gt;30 + 5&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/eugene-krivosheyev/docker/main/#%D0%B6%D0%B8%D0%B7%D0%BD%D0%B5%D0%BD%D0%BD%D1%8B%D0%B9-%D1%86%D0%B8%D0%BA%D0%BB-%D0%B3%D0%BE%D1%82%D0%BE%D0%B2%D0%BE%D0%B3%D0%BE-%D0%BE%D0%B1%D1%80%D0%B0%D0%B7%D0%B0-60&#34;&gt;Жизненный цикл готового образа &lt;sup&gt;60&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/eugene-krivosheyev/docker/main/#hands-on-practice-quest-01-pre-built-disk-image-lifecycle-30--5&#34;&gt;Hands-on practice quest #01: pre-built disk image lifecycle &lt;sup&gt;30 + 5&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/eugene-krivosheyev/docker/main/#%D0%B6%D0%B8%D0%B7%D0%BD%D0%B5%D0%BD%D0%BD%D1%8B%D0%B9-%D1%86%D0%B8%D0%BA%D0%BB-%D0%BA%D0%BE%D0%BD%D1%82%D0%B5%D0%B9%D0%BD%D0%B5%D1%80%D0%B0-45&#34;&gt;Жизненный цикл контейнера &lt;sup&gt;45&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/eugene-krivosheyev/docker/main/#hands-on-practice-quest-02-container-lifecycle-30--5&#34;&gt;Hands-on practice quest #02: container lifecycle &lt;sup&gt;30 + 5&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/eugene-krivosheyev/docker/main/#%D0%BA%D0%BE%D0%BD%D1%82%D0%B5%D0%B9%D0%BD%D0%B5%D1%80%D0%B8%D0%B7%D0%B0%D1%86%D0%B8%D1%8F-%D0%BF%D1%80%D0%BE%D1%81%D1%82%D0%BE%D0%B3%D0%BE-%D1%81%D0%B5%D1%80%D0%B2%D0%B8%D1%81%D0%B0-%D0%B0%D0%B2%D1%82%D0%BE%D0%BC%D0%B0%D1%82%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%B0%D1%8F-%D1%81%D0%B1%D0%BE%D1%80%D0%BA%D0%B0-%D0%BE%D0%B1%D1%80%D0%B0%D0%B7%D0%B0-%D1%81-%D0%BD%D1%83%D0%BB%D1%8F-45&#34;&gt;Контейнеризация простого сервиса: автоматическая сборка образа &#34;с нуля&#34; &lt;sup&gt;45&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/eugene-krivosheyev/docker/main/#hands-on-practice-quest-03-1-preparing-base-image-with-jre-25--5&#34;&gt;Hands-on practice quest #03-1: preparing base image with JRE &lt;sup&gt;25 + 5&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/eugene-krivosheyev/docker/main/#hands-on-practice-quest-03-2-simple-application-containerization-25--5&#34;&gt;Hands-on practice quest #03-2: &lt;em&gt;simple&lt;/em&gt; application containerization &lt;sup&gt;25 + 5&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/eugene-krivosheyev/docker/main/#%D0%B2%D0%B2%D0%B5%D0%B4%D0%B5%D0%BD%D0%B8%D0%B5-%D0%B2-%D0%BA%D0%BE%D0%BD%D1%82%D0%B5%D0%B9%D0%BD%D0%B5%D1%80%D0%B8%D0%B7%D0%B0%D1%86%D0%B8%D1%8E-%D1%81%D0%BE%D1%81%D1%82%D0%B0%D0%B2%D0%BD%D0%BE%D0%B3%D0%BE-%D0%BF%D1%80%D0%B8%D0%BB%D0%BE%D0%B6%D0%B5%D0%BD%D0%B8%D1%8F-20&#34;&gt;Введение в контейнеризацию составного приложения &lt;sup&gt;20&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/eugene-krivosheyev/docker/main/#hands-on-practice-quest-04-multi-component-application-containerization-15--5&#34;&gt;Hands-on practice quest #04: &lt;em&gt;multi-component&lt;/em&gt; application containerization &lt;sup&gt;15 + 5&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/eugene-krivosheyev/docker/main/#%D0%B2%D0%B8%D1%80%D1%82%D1%83%D0%B0%D0%BB%D0%B8%D0%B7%D0%B0%D1%86%D0%B8%D1%8F-%D1%81%D0%B5%D1%82%D0%B8-30&#34;&gt;Виртуализация сети &lt;sup&gt;30&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/eugene-krivosheyev/docker/main/#hands-on-practice-quest-05-networked-multi-component-application-containerization-15--5&#34;&gt;Hands-on practice quest #05: &lt;em&gt;networked&lt;/em&gt; multi-component application containerization &lt;sup&gt;15 + 5&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/eugene-krivosheyev/docker/main/#%D0%B8%D0%B7%D0%BE%D0%BB%D1%8F%D1%86%D0%B8%D1%8F-%D0%B4%D0%B0%D0%BD%D0%BD%D1%8B%D1%85-45&#34;&gt;Изоляция данных &lt;sup&gt;45&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/eugene-krivosheyev/docker/main/#hands-on-practice-quest-06-multi-component-stateful-application-containerization-15--5&#34;&gt;Hands-on practice quest #06: multi-component &lt;em&gt;stateful&lt;/em&gt; application containerization &lt;sup&gt;15 + 5&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/eugene-krivosheyev/docker/main/#%D0%B8%D0%B7%D0%BE%D0%BB%D1%8F%D1%86%D0%B8%D1%8F-%D1%85%D0%BE%D1%81%D1%82%D0%BE%D0%B2%D1%8B%D1%85-%D1%80%D0%B5%D1%81%D1%83%D1%80%D1%81%D0%BE%D0%B2-30&#34;&gt;Изоляция хостовых ресурсов &lt;sup&gt;30&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/eugene-krivosheyev/docker/main/#hands-on-practice-quest-07-networked-multi-component-stateful-app-resource-limited-containerization-15--5&#34;&gt;Hands-on practice quest #07: networked multi-component stateful app &lt;em&gt;resource-limited&lt;/em&gt; containerization &lt;sup&gt;15 + 5&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/eugene-krivosheyev/docker/main/#%D0%BE%D0%BF%D1%82%D0%B8%D0%BC%D0%B8%D0%B7%D0%B0%D1%86%D0%B8%D1%8F-%D1%81%D0%B1%D0%BE%D1%80%D0%BA%D0%B8-%D0%BE%D0%B1%D1%80%D0%B0%D0%B7%D0%BE%D0%B2-30&#34;&gt;Оптимизация сборки образов &lt;sup&gt;30&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/eugene-krivosheyev/docker/main/#hands-on-practice-quest-08-build-optimized-networked-multi-component-stateful-application-resource-limited-containerization-15--5&#34;&gt;Hands-on practice quest #08: &lt;em&gt;build-optimized&lt;/em&gt; networked multi-component stateful application resource-limited containerization &lt;sup&gt;15 + 5&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/eugene-krivosheyev/docker/main/#%D0%BE%D1%80%D0%BA%D0%B5%D1%81%D1%82%D1%80%D0%B0%D1%86%D0%B8%D1%8F-30&#34;&gt;Оркестрация &lt;sup&gt;30&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/eugene-krivosheyev/docker/main/#hands-on-practice-quest-09-orchestration-of-build-optimized-networked-multi-component-stateful-application-resource-limited-containerization-15--5&#34;&gt;Hands-on practice quest #09: orchestration of build-optimized networked multi-component stateful application resource-limited containerization &lt;sup&gt;15 + 5&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/eugene-krivosheyev/docker/main/#%D1%80%D0%B5%D0%BA%D0%BE%D0%BC%D0%B5%D0%BD%D0%B4%D1%83%D0%B5%D0%BC%D1%8B%D0%B5-%D0%BF%D1%80%D0%B0%D0%BA%D1%82%D0%B8%D0%BA%D0%B8-30&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://cloud\.google\.com/architecture/best\-practices\-for\-building\-containers&#34; rel=&#34;nofollow&#34;&gt;Рекомендуемые практики &lt;sup&gt;30&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/eugene-krivosheyev/docker/main/#hands-on-practice-quest-10-build-optimized-networked-multi-component-stateful-application-resource-limited-best-practice-based-containerization-15--5&#34;&gt;Hands-on practice quest #10: build-optimized networked multi-component stateful application resource-limited &lt;em&gt;best practice based&lt;/em&gt; containerization &lt;sup&gt;15 + 5&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/eugene-krivosheyev/docker/main/#docker--qa---30-optional&#34;&gt;Docker + QA = ♡ &lt;sup&gt;30&lt;/sup&gt; [optional]&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Введение в Docker &lt;sup&gt;45&lt;/sup&gt;&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;p&gt;Зачем нужен Docker? Метафора морского контейнера&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;p&gt;Каковы функции инструментов контейнеризации?&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;development environment?&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;testing environment?&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;production environment?&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;p&gt;Виртуализация (инфраструктуры) VS контейнеризация (приложения)?&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;место на диске для гостевой ОС&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;время запуска гостевой ОС&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;overhead операций гостевой ОС&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;p&gt;Контейнер – процесс ОС &#34;на стероидах&#34;: какие ресурсы необходимо изолировать и инкапсулировать?&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/eugene-krivosheyev/docker/main/img/container.png&#34;&gt;Схема контейнеризации&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://docs.docker.com/engine/reference/commandline/dockerd/&#34;&gt;dockerd&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://docs.docker.com/engine/reference/commandline/cli/&#34;&gt;docker cli&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;disk image provisioning tool (dockercli) and Dockerfile&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;disk image&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;disk image registries: &lt;a href=&#34;http://hub.docker.com&#34;&gt;docker hub&lt;/a&gt; and corporate registries&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;container = running process + container data (container layer)&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;puml&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-puml&#34;&gt;@startuml&#xA;node &#34;container\nregistry&#34; {&#xA;  database &#34;disk\nimage&#34; as disk_image&#xA;}&#xA;&#xA;node &#34;host&#34; {&#xA;  rectangle &#34;container&#34; {&#xA;    component &#34;application&#34;&#xA;    database &#34;container\nlayer&#34; as layer&#xA;  }&#xA;  database &#34;disk&#34; {&#xA;    database &#34;image&#34;&#xA;    file &#34;volume&#34;&#xA;    folder &#34;shared\nfolder&#34; as folder&#xA;    disk_image - image&#xA;  }&#xA;  image --layer&#xA;  volume -# container&#xA;  folder -# container&#xA;}&#xA;&#xA;container #--# host : &#34;port\nmapping&#34;&#xA;@enduml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;p&gt;Клиентский UI&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;docker cli&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;podman cli&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;GUI в дистрибутиве для MacOS&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;GUI в IDEA&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;...&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;p&gt;&lt;a href=&#34;https://nickjanetakis.com/blog/docker-tip-73-connecting-to-a-remote-docker-daemon&#34;&gt;dockerd может быть удаленный&lt;/a&gt; или в VM, а клиенты – локальные, в т.ч. windows&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;p&gt;Альтернативные сборщики OCI-образов без участия нативных инструментов docker: &lt;a href=&#34;https://github.com/GoogleContainerTools/jib&#34;&gt;jib&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;p&gt;Итого&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;Контейнер – это новый экзешник. Переносимый, безопасный и управляемый.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Hands-on practice quest #00: prerequisites sound-check &lt;sup&gt;30 + 5&lt;/sup&gt;&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;p&gt;Given&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;сделан форк данного руководства для собственных пометок&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;форк открыт в браузере для внесения пометок&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;для последующей удобной работы с copy+paste для ресурсов раздела &lt;a href=&#34;https://raw.githubusercontent.com/eugene-krivosheyev/docker/main/#Prerequisites&#34;&gt;Prerequisites&lt;/a&gt; плейсхолдеры заменены актуальными значениями&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;p&gt;Сформированы пары участников с чередованием ролей в паре&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Hint: синонимы команд docker cli&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Hint: &lt;code&gt;... --help&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Hint: &lt;a href=&#34;https://docs.docker.com/engine/reference/commandline/docker/&#34;&gt;docker cli reference&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Hint: при работе в терминале используйте &lt;code&gt;Tab&lt;/code&gt; и &lt;code&gt;↑&lt;/code&gt; для автоподстановки значений&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;p&gt;&#34;Как описать сценарий использования команд?&#34;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;В общем случае:&#xA;- предварительные команды подготовки системы к действию&#xA;- команды действия&#xA;- команды проверки успешности и корректности действия &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; When участники &lt;em&gt;именуют сценарии&lt;/em&gt;, выполняют команды и анализируют их вывод и поведение&lt;/li&gt; &#xA; &lt;li&gt;Сценарий &#34;Как ...?&#34;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker version # TODO: собственные пометки участников для будущего использования в проектах&#xA;docker system info&#xA;docker system df&#xA;&#xA;docker events&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Сценарий &#34;Как ...?&#34; (в новом ssh shell, чтобы параллельно видеть вывод &lt;code&gt;docker events&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker logout&#xA;open https://hub.docker.com/settings/security # to make Access Token&#xA;docker login -u {{ registry-account }} -p {{ access-token }} # login default hub.docker.com registry&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Сценарий &#34;Как ...?&#34;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker image pull alpine&#xA;docker system df&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Сценарий &#34;Как ...?&#34;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker container ls [--all]&#xA;docker container run --name demo -it alpine&#xA;/# cat /etc/os-release&#xA;/# exit &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Сценарий &#34;Как ...?&#34;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker container ls [--all]&#xA;docker container rm [--force] demo&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Then участники делятся проблемами и отвечают на вопросы&lt;/li&gt; &#xA; &lt;li&gt;Как назвали сценарии?&lt;/li&gt; &#xA; &lt;li&gt;Успешна ли сконфигурирована система для использования docker?&lt;/li&gt; &#xA; &lt;li&gt;Какая версия API?&lt;/li&gt; &#xA; &lt;li&gt;Откуда взялся образ диска?&lt;/li&gt; &#xA; &lt;li&gt;Сколько места занимает образ?&lt;/li&gt; &#xA; &lt;li&gt;Сколько места занимает контейнер?&lt;/li&gt; &#xA; &lt;li&gt;Какая версия образа скачивается по умолчанию?&lt;/li&gt; &#xA; &lt;li&gt;Какая гостевая команда запускается при запуске контейнера?&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Жизненный цикл готового образа &lt;sup&gt;60&lt;/sup&gt;&lt;/h1&gt; &#xA;&lt;h2&gt;Образ&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Задача среды исполнения контейнеров: изоляция диска&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Отображение диска контейнера на диск хостовой системы: &lt;em&gt;образ&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Что должно быть на диске для запуска и работы контейнеризованного приложения?&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Состав образа диска (от &lt;code&gt;scratch&lt;/code&gt; до prod-ready)&lt;/li&gt; &#xA; &lt;li&gt;OS libraries&lt;/li&gt; &#xA; &lt;li&gt;OS package manager (для удобной установки зависимостей, нужен на этапе сборки образа)&lt;/li&gt; &#xA; &lt;li&gt;OS commands (для отладки, мониторинга и траблшутинга контейнеров на этапе эксплуатации)&lt;/li&gt; &#xA; &lt;li&gt;Application libraries&lt;/li&gt; &#xA; &lt;li&gt;Application executables&lt;/li&gt; &#xA; &lt;li&gt;Config files&lt;/li&gt; &#xA; &lt;li&gt;Data files&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ docker run --rm -it alpine ls&#xA;bin    dev    etc    home   lib    media  mnt    opt    proc   root   run    sbin   srv    sys    tmp    usr    var&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;ЖЗЛ&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Идентификация образов:&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;id&lt;/code&gt; как хеш [слоя] образа&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;хост/репозиторий/имя:тег&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;хост/репозиторий/группа/имя:тег&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Жизненный цикл образа в репозитории и аналогии с git&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;docker container run&lt;/code&gt; + side effects &amp;gt; &lt;code&gt;docker container commit&lt;/code&gt; &amp;gt; &lt;code&gt;docker image push&lt;/code&gt; # редко используемый &#34;ручной&#34; ЖЦ&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;docker image build&lt;/code&gt; &amp;gt; &lt;code&gt;docker image push&lt;/code&gt; &amp;gt; &lt;code&gt;docker image pull&lt;/code&gt; | &lt;code&gt;docker container run&lt;/code&gt; # штатный автоматизированный ЖЦ&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Структура и хранение образа&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;a href=&#34;https://docs.docker.com/storage/storagedriver/select-storage-driver/&#34;&gt;Хранение образа на хостовой системе&lt;/a&gt;: OverlayFS&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;a href=&#34;https://docs.docker.com/storage/storagedriver/&#34;&gt;Прием copy-on-write в OverlayFS&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ docker image ls [--all]&#xA;REPOSITORY    TAG       IMAGE ID       CREATED         SIZE&#xA;alpine        latest    b0e47758dc53   6 weeks ago     5.33MB&#xA;hello-world   latest    a29f45ccde2a   19 months ago   9.14kB&#xA;&#xA;&#xA;$ docker image history ekr26/backend:1.0.0&#xA;IMAGE          CREATED      CREATED BY                                      SIZE      COMMENT&#xA;e96641ea7cdf   2 days ago   COPY dbo-1.0-SNAPSHOT.jar /dbo # buildkit       65.9MB    buildkit.dockerfile.v0&#xA;&amp;lt;missing&amp;gt;      2 days ago   ENTRYPOINT [&#34;java&#34; &#34;-jar&#34; &#34;dbo-1.0-SNAPSHOT.…   0B        buildkit.dockerfile.v0&#xA;&amp;lt;missing&amp;gt;      2 days ago   WORKDIR /dbo                                    0B        buildkit.dockerfile.v0&#xA;&amp;lt;missing&amp;gt;      2 days ago   RUN /bin/sh -c mkdir -p /dbo # buildkit         0B        buildkit.dockerfile.v0&#xA;&amp;lt;missing&amp;gt;      2 days ago   EXPOSE map[8080/tcp:{}]                         0B        buildkit.dockerfile.v0&#xA;&amp;lt;missing&amp;gt;      5 days ago   /bin/sh -c #(nop)  ENV JAVA_HOME=/opt/java/o…   0B        &#xA;&amp;lt;missing&amp;gt;      5 days ago   /bin/sh -c set -eux;     apk add --no-cache …   96.9MB    &#xA;&amp;lt;missing&amp;gt;      5 days ago   /bin/sh -c #(nop) COPY multi:b8938281d618ac3…   16.7kB    &#xA;&amp;lt;missing&amp;gt;      5 days ago   /bin/sh -c #(nop)  ENV JAVA_VERSION=jdk8u282…   0B        &#xA;&amp;lt;missing&amp;gt;      5 days ago   /bin/sh -c apk add --no-cache tzdata --virtu…   14.2MB    &#xA;&amp;lt;missing&amp;gt;      5 days ago   /bin/sh -c #(nop)  ENV LANG=en_US.UTF-8 LANG…   0B        &#xA;&amp;lt;missing&amp;gt;      6 days ago   /bin/sh -c #(nop)  CMD [&#34;/bin/sh&#34;]              0B        &#xA;&amp;lt;missing&amp;gt;      6 days ago   /bin/sh -c #(nop) ADD file:f77db8e5b937d8ebb…   5.58MB&#xA;&#xA;&#xA;$ docker run --rm -v /var/run/docker.sock:/var/run/docker.sock nate/dockviz images -t&#xA;├─&amp;lt;missing&amp;gt; Virtual Size: 5.6 MB&#xA;│ └─&amp;lt;missing&amp;gt; Virtual Size: 5.6 MB&#xA;│   └─&amp;lt;missing&amp;gt; Virtual Size: 5.6 MB&#xA;│     └─&amp;lt;missing&amp;gt; Virtual Size: 19.8 MB&#xA;│       └─&amp;lt;missing&amp;gt; Virtual Size: 19.8 MB&#xA;│         └─&amp;lt;missing&amp;gt; Virtual Size: 19.8 MB&#xA;│           └─&amp;lt;missing&amp;gt; Virtual Size: 116.7 MB&#xA;│             └─&amp;lt;missing&amp;gt; Virtual Size: 116.7 MB&#xA;│               ├─&amp;lt;missing&amp;gt; Virtual Size: 116.7 MB&#xA;│               │ └─&amp;lt;missing&amp;gt; Virtual Size: 116.7 MB&#xA;│               │   └─&amp;lt;missing&amp;gt; Virtual Size: 116.7 MB&#xA;│               │     └─&amp;lt;missing&amp;gt; Virtual Size: 136.7 MB&#xA;│               │       └─&amp;lt;missing&amp;gt; Virtual Size: 136.7 MB&#xA;│               │         └─3c1355b22f16 Virtual Size: 136.7 MB Tags: training-docker/ekr-stub:1.0.0&#xA;│               └─&amp;lt;missing&amp;gt; Virtual Size: 116.7 MB&#xA;│                 └─&amp;lt;missing&amp;gt; Virtual Size: 116.7 MB&#xA;│                   └─&amp;lt;missing&amp;gt; Virtual Size: 116.7 MB&#xA;│                     └─&amp;lt;missing&amp;gt; Virtual Size: 116.7 MB&#xA;│                       └─e96641ea7cdf Virtual Size: 182.6 MB Tags: training-docker/ekr-backend:1.0.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Ограничение количества слоев? &lt;a href=&#34;https://github.com/docker/docker.github.io/issues/8230&#34;&gt;127&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Как посмотреть слои&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;code&gt;docker image history&lt;/code&gt; + &lt;code&gt;docker image inspect&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Вспомогательные утилиты&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;docker run --rm -v /var/run/docker.sock:/var/run/docker.sock nate/dockviz images -t&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;docker run -v /var/run/docker.sock:/run/docker.sock -ti -e TERM tomastomecek/sen&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/wagoodman/dive&#34;&gt;dive&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Hands-on practice quest #01: pre-built disk image lifecycle &lt;sup&gt;30 + 5&lt;/sup&gt;&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;p&gt;Given пары участников&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;p&gt;When участники именуют сценарии, выполняют команды и анализируют их вывод и поведение&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Сценарий &#34;Как ...?&#34;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker image ls # TODO: собственные пометки участников для будущего использования в проектах&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Сценарий &#34;Как ...?&#34;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker image pull alpine&#xA;docker image ls&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Сценарий &#34;Как ...?&#34;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker image history alpine&#xA;&#xA;docker image inspect alpine&#xA;docker image inspect --format=&#39;{{.Id}} -&amp;gt; {{.Parent}}&#39; alpine&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Сценарий &#34;Как ...?&#34;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker container run --name demo -it alpine&#xA;/# touch side-effect.txt&#xA;/# exit&#xA;docker container diff demo&#xA;docker container commit demo {{ registry-account }}/demo&#xA;docker image ls&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Сценарий &#34;Как ...?&#34;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker image tag {{ registry-account }}/demo:latest {{ registry-account }}/demo:1.0.0&#xA;docker image ls&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Сценарий &#34;Как ...?&#34;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker image push {{ registry-account }}/demo:1.0.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Сценарий &#34;Как ...?&#34;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker image ls&#xA;docker container rm demo&#xA;docker image prune&#xA;docker image ls&#xA;docker image rm {{ registry-account }}/demo:1.0.0&#xA;docker image ls&#xA;docker image rm {{ registry-account }}/demo:latest&#xA;docker image ls&#xA;docker image prune --all&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Then участники делятся проблемами и отвечают на вопросы&lt;/li&gt; &#xA; &lt;li&gt;Как назвали сценарии?&lt;/li&gt; &#xA; &lt;li&gt;Какие способы идентификации образа?&lt;/li&gt; &#xA; &lt;li&gt;Какой тег у образа по умолчанию при создании коммитом?&lt;/li&gt; &#xA; &lt;li&gt;Какой тег у образа по умолчанию при операции &lt;code&gt;pull&lt;/code&gt;?&lt;/li&gt; &#xA; &lt;li&gt;В чем физический смысл удаления образа командой &lt;code&gt;rm&lt;/code&gt;?&lt;/li&gt; &#xA; &lt;li&gt;Всегда ли удаляется образ по команде &lt;code&gt;rm&lt;/code&gt;?&lt;/li&gt; &#xA; &lt;li&gt;Что делает prune?&lt;/li&gt; &#xA; &lt;li&gt;Что такое &lt;a href=&#34;https://docs.docker.com/config/pruning/#prune-images&#34;&gt;&lt;em&gt;dangling&lt;/em&gt;&lt;/a&gt; image?&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Жизненный цикл контейнера &lt;sup&gt;45&lt;/sup&gt;&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;p&gt;container = running process + container data (container layer)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;p&gt;Что значит &#34;запуск&#34; контейнера? Что именно там запускается?&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;p&gt;Как можно доопределить команду, запускаемую в контейнере?&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;p&gt;Что нужно определить для запуска контейнера?&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://docs.docker.com/engine/reference/commandline/run/#options&#34;&gt;Форвардинг портов&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;имя контейнера (+defaults)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;disk image&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;virtual network&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;folder | volume mapping&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;entry point (image &lt;code&gt;entrypoint&lt;/code&gt; override)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;guest environment variables&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;command line arguments (image &lt;code&gt;cmd&lt;/code&gt; override)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://docs.docker.com/engine/reference/run/#env-environment-variables&#34;&gt;Экстернализация&lt;/a&gt; конфигурации приложения при запуске контейнера&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/eugene-krivosheyev/docker/main/img/container-lifecycle.png&#34;&gt;Жизненный цикл контейнера&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;docker container create&lt;/code&gt; + &lt;code&gt;docker container start&lt;/code&gt; = &lt;code&gt;docker container run&lt;/code&gt; &lt;code&gt;[args]&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;docker container pause&lt;/code&gt;, &lt;code&gt;docker container unpause&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;docker container commit&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;просмотр работающих и остановленных контейнеров &lt;code&gt;docker container ls [--all]&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;подключение к рабочему контейнеру&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;просмотр лога контейнера&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;docker container stop&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;docker container rm&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;p&gt;&lt;a href=&#34;https://docs.docker.com/engine/reference/run/#detached--d&#34;&gt;Запуск контейнера в интерактивном и фоновом режимах&lt;/a&gt;: &lt;code&gt;-d&lt;/code&gt; &lt;a href=&#34;https://stackoverflow.com/a/46898038&#34;&gt;vs&lt;/a&gt; &lt;code&gt;-it&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;p&gt;Сколько по времени будет работать контейнер?&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;p&gt;Можно ли запускать несколько сервисов в одном контейнере?&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://stackoverflow.com/questions/25775266/how-to-keep-docker-container-running-after-starting-services&#34;&gt;отслеживается только один процесс&lt;/a&gt; c PID 1 (из директив ENTRYPOINT + CMD) и по его завершению контейнер завершается тоже, жестко останавливая остальные процессы&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;поэтому технически можно, но если &lt;a href=&#34;https://docs.docker.com/config/containers/multi-service_container/&#34;&gt;очень аккуратно&lt;/a&gt; запустить свой менеджер процессов и управлять дочерними процессами&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;в целом вся философия, инструментарий и паттерны Docker &lt;a href=&#34;https://devops.stackexchange.com/questions/447/why-it-is-recommended-to-run-only-one-process-in-a-container&#34;&gt;рекомендуют подход &#34;service per container&#34;&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;иначе сложно контейнеры отлаживать, мониторить, анализировать логи, разделять ресурсы и данные, обрабатывать падения сервисов&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;для управления группой контейнеров существуют оркестраторы&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Hands-on practice quest #02: container lifecycle &lt;sup&gt;30 + 5&lt;/sup&gt;&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;p&gt;Given пары участников&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[optional] &lt;code&gt;sudo yum install -y jq&lt;/code&gt; # json cli viewer&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;p&gt;When участники именуют сценарии, формируют свои команды и проверяют их вывод и поведение&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Сценарий &#34;Как посмотреть список работающих и остановленных контейнеров?&#34;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker container ls --all&#xA;docker container ls --format &#39;{{.ID}} | {{.Names}} | {{.Status}} | {{.Image}}&#39; &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Сценарий &#34;Как запустить &#39;одноразовый&#39; контейнер?&#34;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker container run --rm -it alpine # note `--rm`&#xA;/# exit&#xA;docker container ls&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Сценарий &#34;Как запустить контейнер в фоновом режиме?&#34;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker container run --detach --name proxy --publish 80:80 nginx:1.19.4 # note `--detach`&#xA;docker container ls&#xA;curl localhost:80&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Сценарий &#34;Как &#39;подключиться&#39; к работающему контейнеру?&#34;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker container logs&#xA;docker container attach --sig-proxy=false # otherwise detach key `ctrl-c` will stop container &#xA;docker container top&#xA;docker container exec -it /bin/sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Сценарий &#34;Как посмотреть свойства контейнера?&#34;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker container port&#xA;docker container inspect [| jq]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Сценарий &#34;Как поставить на паузу контейнер?&#34;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker container pause&#xA;docker container unpause&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Сценарий &#34;Как создать контейнер с сервисом без запуска?&#34;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker container create&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Сценарий &#34;Как запустить созданный контейнер?&#34;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker container start&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Сценарий &#34;Как остановить и запустить снова работающий контейнер?&#34;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker container start&#xA;docker container restart&#xA;docker container stop # send SIGTERM, and then SIGKILL after grace period&#xA;docker container kill # send SIGKILL, or specified signal&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Сценарий &#34;Как удалить работающий контейнер?&#34;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker container rm --force&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Сценарий &#34;Как удалить остановленный контейнер?&#34;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker container rm&#xA;docker container prune&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Сценарий &#34;Как узнать и сохранить container data (container layer)?&#34;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker container diff&#xA;docker container commit&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Опциональный сценарий &#34;Как обменяться файлами с контейнером?&#34;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker container cp&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Then участники делятся проблемами и отвечают на вопросы&lt;/li&gt; &#xA; &lt;li&gt;Как назвали сценарии?&lt;/li&gt; &#xA; &lt;li&gt;Какие способы идентификации контейнера?&lt;/li&gt; &#xA; &lt;li&gt;Какое имя у контейнера по умолчанию?&lt;/li&gt; &#xA; &lt;li&gt;В чем физический смысл удаления контейнера?&lt;/li&gt; &#xA; &lt;li&gt;Что делает &lt;code&gt;prune&lt;/code&gt;?&lt;/li&gt; &#xA; &lt;li&gt;Сколько новых layers добавила команда &lt;code&gt;commit&lt;/code&gt; к базовому образу?&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Контейнеризация простого сервиса: автоматическая сборка образа &#34;с нуля&#34; &lt;sup&gt;45&lt;/sup&gt;&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;p&gt;Автоматическая сборка – &#34;это другое!&#34;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;часть CI/CD pipeline:&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;требования к частоте сборок&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;требования к скорости сборок&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;требования к ресурсоемкости&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;p&gt;Какие действия необходимо совершить для подготовки образа в случае автоматической сборки?&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;p&gt;Экстернализация конфигурации приложения при сборке образа&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;p&gt;&lt;a href=&#34;https://docs.docker.com/engine/reference/commandline/build/#tag-an-image--t&#34;&gt;Команда сборки образа&lt;/a&gt; &lt;code&gt;docker [image] build&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;в Docker входят &lt;em&gt;два&lt;/em&gt; сборщика: классический &lt;code&gt;build&lt;/code&gt; и экспериментальный &lt;code&gt;buildx&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ docker image build .&#xA;Uploading context  6.76 MB&#xA;Step 1/2 : FROM busybox&#xA; ---&amp;gt; 769b9341d937&#xA;Step 2/2 : CMD echo Hello world&#xA; ---&amp;gt; 99cc1ad10469&#xA;Successfully built 99cc1ad10469&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Структура Dockerfile и декларативность директив&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Ключевые &lt;a href=&#34;https://docs.docker.com/engine/reference/builder&#34;&gt;директивы Dockerfile&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.docker.com/engine/reference/builder/#from&#34;&gt;&lt;code&gt;FROM&lt;/code&gt;&lt;/a&gt; + &lt;a href=&#34;https://www.docker.com/blog/faster-multi-platform-builds-dockerfile-cross-compilation-guide/&#34;&gt;&lt;code&gt;--platform=&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.docker.com/engine/reference/builder/#workdir&#34;&gt;&lt;code&gt;WORKDIR&lt;/code&gt;&lt;/a&gt; создаст папку при необходимости&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.docker.com/engine/reference/builder/#copy&#34;&gt;&lt;code&gt;COPY&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://stackoverflow.com/questions/24958140/what-is-the-difference-between-the-copy-and-add-commands-in-a-dockerfile/24958548#24958548&#34;&gt;and&lt;/a&gt; &lt;a href=&#34;https://docs.docker.com/engine/reference/builder/#add&#34;&gt;&lt;code&gt;ADD&lt;/code&gt;&lt;/a&gt; from build context (+ &lt;a href=&#34;https://docs.docker.com/engine/reference/builder/#dockerignore-file&#34;&gt;&lt;code&gt;.dockerignore&lt;/code&gt;&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.docker.com/engine/reference/builder/#run&#34;&gt;&lt;code&gt;RUN&lt;/code&gt;&lt;/a&gt; (+ &lt;code&gt;shell&lt;/code&gt; and preferred &lt;code&gt;exec&lt;/code&gt; forms) and &lt;a href=&#34;https://docs.docker.com/engine/reference/builder/#shell&#34;&gt;&lt;code&gt;SHELL&lt;/code&gt;&lt;/a&gt; for non-default shell&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.docker.com/engine/reference/builder/#environment-replacement&#34;&gt;&lt;code&gt;ENV&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.docker.com/engine/reference/builder/#arg&#34;&gt;&lt;code&gt;ARG&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.docker.com/engine/reference/builder/#expose&#34;&gt;&lt;code&gt;EXPOSE&lt;/code&gt;&lt;/a&gt; documentation&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.docker.com/engine/reference/builder/#volume&#34;&gt;&lt;code&gt;VOLUME&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.docker.com/engine/reference/builder/#entrypoint&#34;&gt;&lt;code&gt;ENTRYPOINT&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://docs.docker.com/engine/reference/builder/#understand-how-cmd-and-entrypoint-interact&#34;&gt;and&lt;/a&gt; &lt;a href=&#34;https://docs.docker.com/engine/reference/builder/#cmd&#34;&gt;&lt;code&gt;CMD&lt;/code&gt;&lt;/a&gt; (+ preferred &lt;code&gt;exec&lt;/code&gt; and similar &lt;code&gt;default parameters to ENTRYPOINT&lt;/code&gt;, &lt;code&gt;shell&lt;/code&gt; forms)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.docker.com/engine/reference/builder/#label&#34;&gt;&lt;code&gt;LABEL&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker container run [--entrypoint Dockerfile&#39;s ENTRYPOINT override] IMAGE [Dockerfile&#39;s CMD defaults override] &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;FROM alpine&#xA;ENTRYPOINT [&#34;echo&#34;, &#34;Hello&#34;]&#xA;CMD [&#34;World&#34;] # &#39;default parameters to ENTRYPOINT&#39; form&#xA;...&#xA;$ docker build --tag test .&#xA;...&#xA;$ docker run --rm test&#xA;Hello World&#xA;...&#xA;$ docker run --rm test Alpine&#xA;Hello Alpine&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;p&gt;Системные образы для базы VS прикладные образы с приложениями&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Dockerfile should specify at least one of &lt;code&gt;CMD&lt;/code&gt; or &lt;code&gt;ENTRYPOINT&lt;/code&gt; commands&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;ENTRYPOINT&lt;/code&gt; should be defined when using the container as an executable.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;CMD&lt;/code&gt; should be used as a way of defining default arguments for an &lt;code&gt;ENTRYPOINT&lt;/code&gt; command &lt;em&gt;or&lt;/em&gt; for executing an ad-hoc command in a container&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;CMD&lt;/code&gt; will be overridden when running the container with alternative arguments&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If &lt;code&gt;CMD&lt;/code&gt; is defined from the base image, setting &lt;code&gt;ENTRYPOINT&lt;/code&gt; will reset &lt;code&gt;CMD&lt;/code&gt; to an empty value&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;p&gt;Версионирование создаваемого образа через теги&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;опасность &lt;code&gt;:latest&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;semantic versioning&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;unique tags&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;p&gt;Кратко по оптимизации сборки: (подробнее в отдельном модуле)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Сборка &lt;code&gt;FROM scratch&lt;/code&gt;, &#34;пинцетный метод&#34;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Использование легковесных базовых образов&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;alpine 5.33MB&#xA;registry.access.redhat.com/ubi8/ubi-micro 51.6MB&#xA;ubuntu 65.6MB&#xA;debian:stable-slim 74.3MB&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Понятие build context&lt;/li&gt; &#xA; &lt;li&gt;Кеширование при сборке&lt;/li&gt; &#xA; &lt;li&gt;Изменение порядка директив в Dockerfile, чтобы максимально повторно использовать кеш Docker builder&lt;/li&gt; &#xA; &lt;li&gt;Объединение директив, чтобы снизить количество слоёв образа&lt;/li&gt; &#xA; &lt;li&gt;Multi-stage build, чтобы не тащить в итоговый образ инфраструктуру сборки&lt;/li&gt; &#xA; &lt;li&gt;Объединение слоёв образа в один слой&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Hands-on practice quest #03-1: preparing base image with JRE &lt;sup&gt;25 + 5&lt;/sup&gt;&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Given пары участников&lt;/li&gt; &#xA; &lt;li&gt;активная учетная запись на Docker Hub&lt;/li&gt; &#xA; &lt;li&gt;проведена аутентификация консольного Docker CLI на Docker Hub для будущих операций &lt;code&gt;push&lt;/code&gt;: &lt;code&gt;docker login&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Будущая структура папок, которую участники создадут в процессе этой и следующих практик&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;application&#xA;├── base&#xA;│   └── Dockerfile&#xA;├── backend&#xA;│   ├── Dockerfile&#xA;│   ├── dbo-1.0-SNAPSHOT-sources.zip&#xA;│   └── dbo-1.0-SNAPSHOT.jar&#xA;├── db&#xA;│   └── Dockerfile&#xA;├── proxy&#xA;│   ├── Dockerfile&#xA;│   └── nginx.conf.template&#xA;├── stub&#xA;│   ├── mappings&#xA;│   │   └── legacyAccountingSystemResponse.json&#xA;│   ├── Dockerfile&#xA;│   └── wiremock-standalone-2.27.2.jar&#xA;└── docker-compose.yml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Задана рабочая папка&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cd application&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; When участники именуют сценарии, формируют свои команды и проверяют их вывод и поведение&lt;/li&gt; &#xA; &lt;li&gt;Сценарий &#34;Как создать собственный образ на основе Dockerfile?&#34;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;mkdir base&#xA;nano base/Dockerfile &#xA;# TODO: update Dockerfile&#xA;# - describe image that based on Alpine _fixed_ fresh version available at your docker registry&#xA;# - update package manager cache with `apk update`&#xA;# - install package `openjdk11-jre-headless` with `apk add`&#xA;&#xA;docker image build \&#xA; --tag {{ registry-account }}/base:1.0.0 \ # -t&#xA; ./base # folder where Dockerfile located&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Сценарий &#34;Как опубликовать образ в репозитории?&#34;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker image push {{ registry-account }}/base:1.0.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Then&lt;/li&gt; &#xA; &lt;li&gt;Какой ENTRYPOINT и/или CMD у получившегося образа? То есть что запуститься при старте контейнера?&lt;/li&gt; &#xA; &lt;li&gt;Как протестировать полученный образ, что он соответствует решению задачи (базовый образ для будущих образов с упакованными java-приложениями)?&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Hands-on practice quest #03-2: &lt;em&gt;simple&lt;/em&gt; application containerization &lt;sup&gt;25 + 5&lt;/sup&gt;&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Given&lt;/li&gt; &#xA; &lt;li&gt;пары участников&lt;/li&gt; &#xA; &lt;li&gt;опубликованные базовые образы других команд&lt;/li&gt; &#xA; &lt;li&gt;Dockerfiles для основных сервисов приложения&lt;/li&gt; &#xA; &lt;li&gt;активная учетная запись на Docker Hub&lt;/li&gt; &#xA; &lt;li&gt;проведена аутентификация консольного Docker CLI на Docker Hub для будущих операций &lt;code&gt;push&lt;/code&gt;: &lt;code&gt;docker login&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Задана рабочая папка&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cd application&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; When участники именуют сценарии, формируют свои команды и проверяют их вывод и поведение&lt;/li&gt; &#xA; &lt;li&gt;Сценарий &#34;Как задать &#34;чужой&#34; образ как базовый для своих следующих образов?&#34;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;nano backend/Dockerfile # TODO fix FROM directive to new base image&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Сценарий &#34;Как собрать свой образ с приложением на базе Dockerfile?&#34;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker image build \&#xA; --tag {{ registry-account }}/backend:1.0.0 \ # -t&#xA; ./backend&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Сценарий &#34;Как опубликовать образ в репозитории?&#34;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker image push ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Сценарий &#34;Как запустить &#39;одноразовый&#39; контейнер на базе своего образа с приложением?&#34;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker container run \&#xA; --name backend \&#xA; --rm \ # одноразовый: удалится после остановки&#xA; --detach \ # -d&#xA; --publish 8080:8080 \ # -p [host address:]8080:8080&#xA; --env SPRING_PROFILES_ACTIVE=qa \ # -e: в контейнере действует переменная окружения&#xA; --volume $(pwd)/log:/dbo/log \ # -v: папка в конейнере /dbo/log отображена на папку на хосте /current-path/log. Windows caution for $()!&#xA; {{ registry-account }}/backend:1.0.0 \ #  репозиторий и тег&#xA; --spring.profiles.active=qa # параметры командной строки&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Сценарий &#34;Как протестировать запущенное в контейнере приложение&#34;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker container ls --all &#xA;&#xA;curl localhost:8080/dbo/actuator/health&#xA;open http://localhost:8080/dbo/swagger-ui.html&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Сценарий &#34;Как остановить приложение&#34;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;curl -X POST localhost:8080/dbo/actuator/shutdown&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Сценарий &#34;Как остановить контейнер&#34;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker container stop &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Then участники делятся проблемами и отвечают на вопросы&lt;/li&gt; &#xA; &lt;li&gt;В каком порядке выполнялись директивы Dockerfile?&lt;/li&gt; &#xA; &lt;li&gt;Сколько новых layers добавила сборка к базовому образу?&lt;/li&gt; &#xA; &lt;li&gt;Когда и по какой причине остановился контейнер?&lt;/li&gt; &#xA; &lt;li&gt;Что происходит с процессом приложения, когда останавливаем контейнер?&lt;/li&gt; &#xA; &lt;li&gt;Сколько раз вы столкнулись с настройкой экстернализированной конфигурации приложения?&lt;/li&gt; &#xA; &lt;li&gt;Какие приоритеты у этих точек конфигурации?&lt;/li&gt; &#xA; &lt;li&gt;Что случится при запуске контейнера с параметром командной строки &lt;code&gt;docker run ... --spring.profiles.active=preprod&lt;/code&gt; ?&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h1&gt;Введение в контейнеризацию составного приложения &lt;sup&gt;20&lt;/sup&gt;&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;p&gt;Какие ресурсы необходимо виртуализировать?&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;network&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;volumes/folders&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;cpu, memory&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;p&gt;Что нужно для целостной работы multi-container приложения?&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Целостная сборка образов (ответственность build pipeline)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Целостный запуск, работа и завершение (ответственность оркестратора)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;p&gt;Варианты &lt;a href=&#34;https://docs.docker.com/network/#network-drivers&#34;&gt;сетевой топологии&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;host network&lt;/code&gt; portability issue&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Default Bridge Network: &lt;img src=&#34;https://raw.githubusercontent.com/eugene-krivosheyev/docker/main/img/bridge-net-architecture.svg?sanitize=true&#34; alt=&#34;structure&#34;&gt;&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;puml&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-puml&#34;&gt;@startuml&#xA;actor User&#xA;&#xA;node host {&#xA;    rectangle &#34;host\nnetwork&#34; as host_net #line.dotted {&#xA;        [curl]&#xA;        [browser] &#xA;    }&#xA;&#xA;    rectangle &#34;virtual\nnetwork&#34; as virt_net_backend #line.dotted {&#xA;        [backend]&#xA;    }&#xA;  &#xA;    rectangle &#34;virtual\nnetwork&#34; as virt_net_db #line.dotted {&#xA;        database &#34;db&#34;&#xA;    }&#xA;&#xA;    rectangle &#34;virtual\nnetwork&#34; as virt_net_stub #line.dotted {&#xA;        component &#34;external\nservice&#34; as stub&#xA;    }&#xA;&#xA;    virt_net_backend #--# host_net : &#34;port mapping&#34;&#xA;    virt_net_db #-# host_net&#xA;    virt_net_stub #-# host_net&#xA;}&#xA;&#xA;User - browser&#xA;@enduml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h1&gt;Hands-on practice quest #04: &lt;em&gt;multi-component&lt;/em&gt; application containerization &lt;sup&gt;15 + 5&lt;/sup&gt;&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Given пары участников&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Задана дефолтная папка&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cd application&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; When участники именуют сценарии, формируют свои команды и проверяют их вывод и поведение&lt;/li&gt; &#xA; &lt;li&gt;Сценарий &#34;Как ...?&#34;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;nano backend/Dockerfile # TODO fix default Spring profile to `preprod` instead of `qa`&#xA;docker image build --tag {{ registry-account }}/backend:1.0.0 ./backend&#xA;&#xA;nano stub/Dockerfile # TODO fix FROM for new custom base image&#xA;docker image build --tag {{ registry-account }}/stub:1.0.0 ./stub&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Сценарий &#34;Как ...?&#34;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker container run \&#xA; --detach \&#xA; --name db \&#xA; --publish 5432:5432 \&#xA; --volume db:/var/lib/postgresql/data \ # volume created and mounted&#xA; --env POSTGRES_DB=dbo-db \ # postgres&#xA; --env POSTGRES_USER=dbo \ # postgres&#xA; --env POSTGRES_PASSWORD=dbo \ # required&#xA; postgres:11-alpine&#xA; &#xA;docker container run \&#xA; --detach \&#xA; --name stub \&#xA; --publish 8888:8888 \&#xA; {{ registry-account }}/stub:1.0.0&#xA;curl localhost:8888/api/account [| jq]&#xA;&#xA;docker container run \&#xA; --detach \&#xA; --name backend \&#xA; --publish 8080:8080 \&#xA; --env SPRING_PROFILES_ACTIVE=preprod \ # необязательно, установили как дефолт командной строки запуска в Dockerfile&#xA; --env SPRING_DATASOURCE_URL=&#34;jdbc:postgresql://$(hostname -i)/dbo-db&#34; \&#xA; --env SPRING_DATASOURCE_USERNAME=dbo \&#xA; --env SPRING_DATASOURCE_PASSWORD=dbo \&#xA; --env SPRING_INTEGRATION_LEGACYACCOUNTINGSYSTEM_BASEURL=&#34;http://$(hostname -i):8888/api&#34; \&#xA; {{ registry-account }}/backend:1.0.0 \&#xA;   --spring.profiles.active=preprod # необязательно, установили как дефолт командной строки запуска в Dockerfile&#xA;&#xA;curl -H &#34;X-API-VERSION:1&#34; localhost:8080/dbo/actuator/health [| jq]&#xA;curl -H &#34;X-API-VERSION:1&#34; localhost:8080/dbo/api/account [| jq]&#xA;open &#34;http://$(hostname -i):8080/dbo/swagger-ui.html&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Сценарий &#34;Как ...?&#34;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker container ls [--all]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Сценарий &#34;Как ...?&#34;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker container stop&#xA;docker container rm [--force]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Then участники делятся проблемами и отвечают на вопросы&lt;/li&gt; &#xA; &lt;li&gt;Как назвали сценарии?&lt;/li&gt; &#xA; &lt;li&gt;По какому URL получили доступ к веб-интерфейсу приложения для тестирования работоспособности?&lt;/li&gt; &#xA; &lt;li&gt;Система работоспособна?&lt;/li&gt; &#xA; &lt;li&gt;Исходя из экстернализированных настроек, как связаны компоненты системы?&lt;/li&gt; &#xA; &lt;li&gt;Какие ресурсы были виртуализированы?&lt;/li&gt; &#xA; &lt;li&gt;Какой оркестратор использовался?&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Виртуализация сети &lt;sup&gt;30&lt;/sup&gt;&lt;/h1&gt; &#xA;&lt;p&gt;Виртуальная сеть: &lt;img src=&#34;https://raw.githubusercontent.com/eugene-krivosheyev/docker/main/img/virt-net-architecture.svg?sanitize=true&#34; alt=&#34;structure&#34;&gt;&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;puml&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-puml&#34;&gt;@startuml&#xA;actor User&#xA;&#xA;node host {&#xA;    rectangle &#34;host\nnetwork&#34; as host_net #line.dotted {&#xA;        [curl]&#xA;        [browser]&#xA;    }&#xA;&#xA;    rectangle &#34;virtual\nnetwork&#34; as virt_net #line.dotted {&#xA;        component &#34;proxy&#34;    &#xA;        component &#34;backend&#34;&#xA;        component &#34;external\nservice&#34; as stub&#xA;        database &#34;db&#34;&#xA;    }&#xA;  &#xA;  &#xA;    proxy -# backend&#xA;    backend --# stub&#xA;    backend -# db&#xA;    host_net #--# proxy : &#34;port\nmapping&#34;&#xA;    browser -- host_net : &#34;localhost&#34;&#xA;}&#xA;&#xA;User - browser&#xA;@enduml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Отображение портов&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Разрешение адресов и имен в виртуальных сетях&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--name&lt;/code&gt; default hostname&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--hostname&lt;/code&gt; explicit hostname&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;a href=&#34;https://pythonspeed.com/articles/docker-connection-refused/&#34;&gt;&lt;code&gt;localhost&lt;/code&gt; issue&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;слушайте &lt;code&gt;0.0.0.0&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Hands-on practice quest #05: &lt;em&gt;networked&lt;/em&gt; multi-component application containerization &lt;sup&gt;15 + 5&lt;/sup&gt;&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Given пары участников&lt;/li&gt; &#xA; &lt;li&gt;В случае podman для работы символьных имен хостов в виртуальных сетях необходимо &lt;a href=&#34;https://github.com/containers/dnsname/raw/master/README_PODMAN.md&#34;&gt;собрать и сконфигурировать плагин &lt;code&gt;dnsname&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Задана дефолтная папка&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cd application&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; When участники именуют сценарии, формируют свои команды и проверяют их вывод и поведение&lt;/li&gt; &#xA; &lt;li&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Сценарий &#34;Как посмотреть сети?&#34;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker network ls&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Сценарий &#34;Как создать виртуальную сеть?&#34;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker network create [--help]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Сценарий &#34;Как запустить контейнеры в виртуальной сети?&#34;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Look ma, no port mappings!&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker container run \&#xA; --detach \&#xA; --network my_deployment \&#xA; --name db \&#xA; --volume db:/var/lib/postgresql/data \&#xA; --env POSTGRES_DB=dbo-db \&#xA; --env POSTGRES_USER=dbo \&#xA; --env POSTGRES_PASSWORD=dbo \&#xA; postgres:11-alpine&#xA; &#xA;docker container run \&#xA; --detach \&#xA; --network my_deployment \&#xA; --name stub \&#xA; {{ registry-account }}/stub:1.0.0&#xA; &#xA;docker container run \&#xA; --detach \&#xA; --network my_deployment \&#xA; --name backend \&#xA; --env SPRING_PROFILES_ACTIVE=preprod \ # необязательно, установили как параметр командной строки в Dockerfile&#xA; --env SPRING_DATASOURCE_URL=&#34;jdbc:postgresql://db/dbo-db&#34; \ # hostname instead of external ip is the result of virtualizing network&#xA; --env SPRING_DATASOURCE_USERNAME=dbo \&#xA; --env SPRING_DATASOURCE_PASSWORD=dbo \&#xA; --env SPRING_INTEGRATION_LEGACYACCOUNTINGSYSTEM_BASEURL=&#34;http://stub:8888/api&#34; \ # hostname instead of external ip is the result of virtualizing network&#xA; {{ registry-account }}/backend:1.0.0&#xA;   --spring.profiles.active=preprod&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;nano proxy/Dockerfile #TODOs&#xA;nano proxy/nginx.conf.template #TODOs&#xA;&#xA;docker image build --tag {{ registry-account }}/proxy:1.0.0 ./proxy&#xA;&#xA;docker container run \&#xA; --detach \&#xA; --network my_deployment \&#xA; --name proxy \&#xA; --publish 80:80 \ # Notice mandatory port mapping&#xA; {{ registry-account }}/proxy:1.0.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;open [http://localhost/dbo/actuator/health](http://localhost/dbo/actuator/health)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Сценарий &#34;Как подключить работающий контейнер к виртуальным сетям?&#34;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker network connect [--help]&#xA;docker network disconnect&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Сценарий &#34;Как посмотреть состояние виртуальных сетей?&#34;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker network ls &#xA;docker network inspect&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Сценарий &#34;Как удалить виртуальную сеть?&#34;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker network rm&#xA;docker network prune&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Сценарий &#34;Как управлять виртуальными сетями в docker-compose?&#34;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;nano docker-compose.yml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Then участники делятся проблемами и отвечают на вопросы&lt;/li&gt; &#xA; &lt;li&gt;Как назвали сценарии?&lt;/li&gt; &#xA; &lt;li&gt;Какая сетевая топология определяется по умолчанию?&lt;/li&gt; &#xA; &lt;li&gt;Для каких контейнеров мы определили меппинг портов? Почему не для всех?&lt;/li&gt; &#xA; &lt;li&gt;Как мы задаем хосты в экстернализированной конфигурации приложений? Почему не ip?&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Изоляция данных &lt;sup&gt;45&lt;/sup&gt;&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Что происходит с изменениями в образе при остановке контейнера?&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Как зафиксировать изменения в образе?&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Как откатить изменения в образе?&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Как можно сохранять изменения на диске &lt;em&gt;вне&lt;/em&gt; образа? (stateful containers)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.docker.com/storage/&#34;&gt;Управление данными на хостовой машине&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.docker.com/storage/tmpfs/&#34;&gt;tmpfs&lt;/a&gt;, Linux only feature&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.docker.com/storage/bind-mounts/#start-a-container-with-a-bind-mount&#34;&gt;Shared folders&lt;/a&gt; как подмонтированные FS&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker container run --volume &#34;$(pwd)&#34;/folder/file:/folder/file:ro # пути у folder абсолютные, начинаются с &#34;/&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.docker.com/storage/volumes/&#34;&gt;Volumes&lt;/a&gt; как &lt;a href=&#34;https://stackoverflow.com/a/41935728&#34;&gt;инкапсулированные хранилища данных&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker container run --volume my_volume:/folder/file:ro # имя volume не начинается с &#34;/&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://docs.docker.com/engine/extend/legacy_plugins/#volume-plugins&#34;&gt;Где может располагаться volume, кроме &lt;code&gt;local&lt;/code&gt;?&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://docs.docker.com/storage/volumes/#backup-restore-or-migrate-data-volumes&#34;&gt;Миграция volumes&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;p&gt;&lt;a href=&#34;https://docs.docker.com/engine/reference/commandline/logs/&#34;&gt;Логи&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;консольные логи: stdout/stderr&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;собираются и упаковываются в выбранный формат (&lt;a href=&#34;https://docs.docker.com/config/containers/logging/configure/&#34;&gt;драйвер&lt;/a&gt;)&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker logs [--until=10s] test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Hands-on practice quest #06: multi-component &lt;em&gt;stateful&lt;/em&gt; application containerization &lt;sup&gt;15 + 5&lt;/sup&gt;&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Given пары участников&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Задана дефолтная папка&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cd application&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; When участники именуют сценарии, формируют свои команды и проверяют их вывод и поведение&lt;/li&gt; &#xA; &lt;li&gt;Сценарий &#34;Как посмотреть все текущие volumes?&#34;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker volume ls&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Сценарий &#34;Как удалить неиспользуемую volume?&#34;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker volume rm ... [--help]&#xA;docker volume prune [--help]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Сценарий &#34;Как создать volume?&#34;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker volume create ... [--help] # TODO Создать volume `db` с драйвером `local` &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Сценарий &#34;Как пробросить volume в контейнер?&#34;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker container run # TODO Сделать контейнер с СУБД stateful: сохранять данные из папки `/var/lib/postgresql/data` на volume `db`  &#xA;  --name db \&#xA;  --volume \ # volume создастся автоматом, если не существует&#xA;  ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Сценарий &#34;Как вынести ненужные изменения на временную папку?&#34; [Linux host only]&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker container run &#xA; --name backend&#xA; --tmpfs /tmp&#xA; --tmpfs /var/log&#xA; --tmpfs /dbo/log &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Сценарий &#34;Как пробросить shared folder с хостовой системы в контейнер?&#34;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker container run # TODO Сделать proxy/Dockerfile ненужным: пробросить `$(pwd)/proxy/nginx.conf` как read-only файл `/etc/nginx/nginx.conf`&#xA;  --name proxy \&#xA;  --volume \ # в случае shared folder абсолютный хостовой путь&#xA;  nginx:1.21 # стоковый образ, не наш&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Сценарий &#34;Как посмотреть volumes/folders &lt;em&gt;контейнера&lt;/em&gt;?&#34;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker container inspect # | grep &#34;Mounts&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Сценарий &#34;Как посмотреть консольные логи процессов?&#34;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker logs ... [--help]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Сценарий &#34;Как посмотреть изменения, сделанные процессом на файловой системе?&#34;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker container diff ... [--help] # отслеживаются ли изменения на подмонтированных внешних folder/volume?&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Сценарий &#34;Как управлять volume и shared folder в docker-compose?&#34;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;nano docker-compose.yml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Then участники делятся проблемами и отвечают на вопросы&lt;/li&gt; &#xA; &lt;li&gt;Как назвали сценарии?&lt;/li&gt; &#xA; &lt;li&gt;Где физически храняться volume в нашем случае?&lt;/li&gt; &#xA; &lt;li&gt;Что такое &#34;неиспользуемые&#34; volume?&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Изоляция хостовых ресурсов &lt;sup&gt;30&lt;/sup&gt;&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Отображение портов&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Установка переменных окружения ОС для контейнера&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;a href=&#34;https://docs.docker.com/engine/reference/commandline/stats/&#34;&gt;Просмотр статистики потребления ресурсов&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;a href=&#34;https://docs.docker.com/config/containers/resource_constraints/&#34;&gt;Лимитирование памяти и CPU&lt;/a&gt; и &lt;a href=&#34;https://faun.pub/understanding-docker-container-memory-limit-behavior-41add155236c&#34;&gt;неочевидность поведения лимитирования памяти&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;a href=&#34;https://docs.docker.com/engine/reference/commandline/run/#set-storage-driver-options-per-container&#34;&gt;Лимитирование дискового объема контейнера&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;a href=&#34;https://stackoverflow.com/a/40499023&#34;&gt;Лимитирование объема volume&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Лимитирование ресурсов при &lt;a href=&#34;https://docs.docker.com/engine/reference/run/#runtime-constraints-on-resources&#34;&gt;запуске контейнера&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;a href=&#34;https://docs.docker.com/engine/reference/run/#restart-policies---restart&#34;&gt;Как ведет себя одиночный контейнер&lt;/a&gt; при ошибках контейнеризуемого приложения&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;a href=&#34;https://docs.docker.com/compose/compose-file/compose-file-v3/#deploy&#34;&gt;Как ведет себя контейнер в swarm&lt;/a&gt; при ошибках контейнеризуемого приложения&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Лимитирование ресурсов в &lt;a href=&#34;https://docs.docker.com/compose/compose-file/compose-file-v3/#deploy&#34;&gt;docker-compose&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Hands-on practice quest #07: networked multi-component stateful app &lt;em&gt;resource-limited&lt;/em&gt; containerization &lt;sup&gt;15 + 5&lt;/sup&gt;&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;p&gt;Given пары участников&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;p&gt;When участники именуют сценарии, формируют свои команды и проверяют их вывод и поведение&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Сценарий &#34;Как понять текущее потребление ресурсов?&#34;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker stats&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Сценарий &#34;Как лимитировать вычислительные ресурсы при запуске контейнера?&#34;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker container run # ограничить по памяти, чтобы получить OOME&#xA; --name backend&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Сценарий &#34;Как лимитировать ресурсы в docker-compose?&#34;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;nano docker-compose.yml # ограничить по CPU и по памяти&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Then участники делятся проблемами и отвечают на вопросы&lt;/li&gt; &#xA; &lt;li&gt;Как назвали сценарии?&lt;/li&gt; &#xA; &lt;li&gt;Какие лимиты на ресурсы устанавливаются Docker по умолчанию?&lt;/li&gt; &#xA; &lt;li&gt;Какое поведение отдельного контейнера при OOME по умолчанию?&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Оптимизация сборки образов &lt;sup&gt;30&lt;/sup&gt;&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;p&gt;Как уменьшить размер образа?&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Сборка &lt;code&gt;FROM scratch&lt;/code&gt;, &#34;пинцетный метод&#34;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;p&gt;Как ускорить сборку образа?&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Кеширование сборщиком результатов сборки = кеширование слоев&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Понятие build context&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;p&gt;Директивы Dockerfile как слои образа&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;каждая директива выполняется своим контейнером&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;RUN, COPY, ADD create layers&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Other instructions create temporary intermediate images, and do not increase the size of the build&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker image build --tag stub ./stub&#xA;[+] Building 2.2s (10/10) FINISHED                                                                                                                                                                                                                      &#xA; =&amp;gt; [internal] load build definition from Dockerfile                                                                                                                                                                                               0.0s&#xA; =&amp;gt; =&amp;gt; transferring dockerfile: 328B                                                                                                                                                                                                               0.0s&#xA; =&amp;gt; [internal] load .dockerignore                                                                                                                                                                                                                  0.0s&#xA; =&amp;gt; =&amp;gt; transferring context: 34B                                                                                                                                                                                                                   0.0s&#xA; =&amp;gt; [internal] load metadata for docker.io/library/openjdk:8-jre-slim                                                                                                                                                                              1.3s&#xA; =&amp;gt; [1/5] FROM docker.io/library/openjdk:8-jre-slim@sha256:0330883ffeb5e14c4c15271004cdf6a2df21e827420b71dca01c34e41a23690d                                                                                                                        0.1s&#xA; =&amp;gt; =&amp;gt; resolve docker.io/library/openjdk:8-jre-slim@sha256:0330883ffeb5e14c4c15271004cdf6a2df21e827420b71dca01c34e41a23690d                                                                                                                        0.0s&#xA; =&amp;gt; =&amp;gt; sha256:5563c7e505fa828bd868ae99f24c5a56bb0bd5488a10184f7175d10f167b0898 1.16kB / 1.16kB                                                                                                                                                     0.0s&#xA; =&amp;gt; =&amp;gt; sha256:a6c8e47b54ca34cb71f873f586aaac09f73ace9bffe1b5b62eb2b05f8c974deb 7.14kB / 7.14kB                                                                                                                                                     0.0s&#xA; =&amp;gt; =&amp;gt; sha256:0330883ffeb5e14c4c15271004cdf6a2df21e827420b71dca01c34e41a23690d 320B / 320B                                                                                                                                                         0.0s&#xA; =&amp;gt; [internal] load build context                                                                                                                                                                                                                  0.4s&#xA; =&amp;gt; =&amp;gt; transferring context: 20.00MB                                                                                                                                                                                                               0.4s&#xA; =&amp;gt; [2/5] RUN mkdir -p /stub/mappings                                                                                                                                                                                                              0.5s&#xA; =&amp;gt; [3/5] WORKDIR /stub                                                                                                                                                                                                                            0.0s&#xA; =&amp;gt; [4/5] COPY mappings/* mappings/                                                                                                                                                                                                                0.0s&#xA; =&amp;gt; [5/5] COPY wiremock-standalone-2.27.2.jar /stub                                                                                                                                                                                                0.1s&#xA; =&amp;gt; exporting to image                                                                                                                                                                                                                             0.1s&#xA; =&amp;gt; =&amp;gt; exporting layers                                                                                                                                                                                                                            0.1s&#xA; =&amp;gt; =&amp;gt; writing image sha256:0a8dfafa48b9c717b862532fe441e8f2db7146a6deb8380768e6a713c75a6da4                                                                                                                                                       0.0s&#xA; =&amp;gt; =&amp;gt; naming to docker.io/library/stub&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Кеширование включаемых файлов и результатов директив&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker image build --tag stub ./stub&#xA;[+] Building 1.9s (11/11) FINISHED                                                                                                                                                                                                                      &#xA; =&amp;gt; [internal] load build definition from Dockerfile                                                                                                                                                                                               0.0s&#xA; =&amp;gt; =&amp;gt; transferring dockerfile: 328B                                                                                                                                                                                                               0.0s&#xA; =&amp;gt; [internal] load .dockerignore                                                                                                                                                                                                                  0.0s&#xA; =&amp;gt; =&amp;gt; transferring context: 32B                                                                                                                                                                                                                   0.0s&#xA; =&amp;gt; [internal] load metadata for docker.io/library/openjdk:8-jre-slim                                                                                                                                                                              1.8s&#xA; =&amp;gt; [auth] library/openjdk:pull token for registry-1.docker.io                                                                                                                                                                                     0.0s&#xA; =&amp;gt; [1/5] FROM docker.io/library/openjdk:8-jre-slim@sha256:0330883ffeb5e14c4c15271004cdf6a2df21e827420b71dca01c34e41a23690d                                                                                                                        0.0s&#xA; =&amp;gt; [internal] load build context                                                                                                                                                                                                                  0.0s&#xA; =&amp;gt; =&amp;gt; transferring context: 689B                                                                                                                                                                                                                  0.0s&#xA; =&amp;gt; CACHED [2/5] RUN mkdir -p /stub/mappings                                                                                                                                                                                                       0.0s&#xA; =&amp;gt; CACHED [3/5] WORKDIR /stub                                                                                                                                                                                                                     0.0s&#xA; =&amp;gt; CACHED [4/5] COPY mappings/* mappings/                                                                                                                                                                                                         0.0s&#xA; =&amp;gt; CACHED [5/5] COPY wiremock-standalone-2.27.2.jar /stub                                                                                                                                                                                         0.0s&#xA; =&amp;gt; exporting to image                                                                                                                                                                                                                             0.0s&#xA; =&amp;gt; =&amp;gt; exporting layers                                                                                                                                                                                                                            0.0s&#xA; =&amp;gt; =&amp;gt; writing image sha256:1b7c6f374f61947cd1e96233307f4fa56dfc3c0e5fd6bf228b0e7e27803ca011                                                                                                                                                       0.0s&#xA; =&amp;gt; =&amp;gt; naming to docker.io/library/stub&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;p&gt;Оптимизации&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Выбор образа-предка: легковесные ОС, busybox и &lt;code&gt;scratch&lt;/code&gt;-образ&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://docs.docker.com/develop/develop-images/dockerfile_best-practices/#sort-multi-line-arguments&#34;&gt;Составные команды&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://docs.docker.com/develop/develop-images/dockerfile_best-practices/#leverage-build-cache&#34;&gt;Используйте build cache&lt;/a&gt;: порядок директив в Dockerfile&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;p&gt;Управление кешированием&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://docs.docker.com/engine/reference/commandline/build/#options&#34;&gt;&lt;code&gt;--pull&lt;/code&gt;, &lt;code&gt;--no-cache&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://docs.docker.com/engine/reference/commandline/builder_prune/&#34;&gt;docker builder prune&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;p&gt;Сквошинг&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker build --squash ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/qwertycody/Bash_Docker_Squash&#34;&gt;bash-docker-squash&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/goldmann/docker-squash&#34;&gt;docker-squash&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;p&gt;Multi-Stage Build&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://docs.docker.com/develop/develop-images/multistage-build/&#34;&gt;&#34;multi-stage build&#34;&lt;/a&gt; как реализация простого build pipeline&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Docker BuildKit (экспериментальный сборщик buildx) позволяет &lt;a href=&#34;https://github.com/moby/buildkit/raw/master/frontend/dockerfile/docs/syntax.md#run---mounttypebind-the-default-mount-type&#34;&gt;монтировать хостовые папки в слоевые build-time контейнеры&lt;/a&gt; для кеширования данных между сборками&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Hands-on practice quest #08: &lt;em&gt;build-optimized&lt;/em&gt; networked multi-component stateful application resource-limited containerization &lt;sup&gt;15 + 5&lt;/sup&gt;&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;p&gt;Given пары участников&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;p&gt;When участники именуют сценарии, формируют свои команды и проверяют их вывод и поведение&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Сценарий &#34;Как оптимизировать сборку?&#34;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;nano application/backend/Dockerfile # TODO оптимизировать сборку и убедиться в ускорении&#xA;nano application/proxy/Dockerfile&#xA;nano application/stub/Dockerfile&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Сценарий &#34;Как управлять кешем сборки?&#34;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker builder prune [--all]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Then участники делятся проблемами и отвечают на вопросы&lt;/li&gt; &#xA; &lt;li&gt;Как назвали сценарии?&lt;/li&gt; &#xA; &lt;li&gt;Насколько получилось оптимизировать сборки в измеряемых метриках?&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Оркестрация &lt;sup&gt;30&lt;/sup&gt;&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Простейшая &#34;оркестрация&#34; на &lt;a href=&#34;https://docs.docker.com/engine/reference/commandline/run/#restart-policies---restart&#34;&gt;политиках рестарта&lt;/a&gt; одиночного контейнера&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Оркестраторы: &lt;code&gt;compose&lt;/code&gt;, &lt;code&gt;swarm&lt;/code&gt;, &lt;code&gt;k8s (+minikube)&lt;/code&gt; и их ограничения&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Клиенты оркестраторов: Docker Compose (+build) и Docker Stack over &lt;a href=&#34;https://docs.docker.com/engine/swarm/&#34;&gt;Swarm&lt;/a&gt;/k8s/minikube (-build)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Демо &lt;code&gt;cat docker-compose.yml&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Понятие &lt;a href=&#34;https://docs.docker.com/engine/swarm/how-swarm-mode-works/services/&#34;&gt;сервиса&lt;/a&gt; в stack и реплики контейнера&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Docker в среде Kubernetes&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; k8s больше не поддерживает docker: &lt;a href=&#34;https://twitter.com/Dixie3Flatline/status/1334188913724850177&#34;&gt;все пропало&lt;/a&gt;?&lt;/li&gt; &#xA; &lt;li&gt;Как устроен Docker? &lt;a href=&#34;http://alexander.holbreich.org/docker-components-explained/&#34;&gt;Элементы&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Как устроены аналоги? &lt;a href=&#34;https://www.threatstack.com/blog/diving-deeper-into-runtimes-kubernetes-cri-and-shims&#34;&gt;Элементы&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Hands-on practice quest #09: orchestration of build-optimized networked multi-component stateful application resource-limited containerization &lt;sup&gt;15 + 5&lt;/sup&gt;&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;p&gt;Given пары участников&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;p&gt;Инициализация сервиса Swarm на хосте&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;p&gt;When участники именуют сценарии, формируют свои команды и проверяют их вывод и поведение&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Сценарий &#34;Как посмотреть список кластеров, управляемых оркестратором сервисов (подов), контейнеров в сервисе?&#34;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker stack ls &#xA;docker service ls&#xA;docker service ps ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Сценарий &#34;Как запустить кластер (stack API)?&#34;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker stack deploy --compose-file docker-compose.yml app_stack&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Сценарий &#34;Как посмотреть логи сервиса?&#34;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker service logs ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Сценарий &#34;Как убедиться в самовосстановлении контейнеров в сервисе?&#34;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker container ps -a&#xA;docker rm -f&#xA;docker container ps -a&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Сценарий &#34;Как остановить кластер (stack API)?&#34;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker stack rm&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Then участники делятся проблемами и отвечают на вопросы&lt;/li&gt; &#xA; &lt;li&gt;Как назвали сценарии?&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;&lt;a href=&#34;https://cloud.google.com/architecture/best-practices-for-building-containers&#34;&gt;Рекомендуемые практики &lt;sup&gt;30&lt;/sup&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Минимизировать &lt;a href=&#34;https://snyk.io/blog/10-docker-image-security-best-practices&#34;&gt;security риски&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Используйте минимальные образы: быстрее и меньше зависимостей + меньше рисков&lt;/li&gt; &#xA; &lt;li&gt;Запуск в &lt;a href=&#34;https://docs.docker.com/engine/security/rootless/&#34;&gt;rootless mode&lt;/a&gt; или от &lt;a href=&#34;https://docs.docker.com/engine/reference/run/#user&#34;&gt;пользователя с минимальными привилегиями&lt;/a&gt; с возможностью при запуске &lt;a href=&#34;https://docs.docker.com/engine/reference/run/#additional-groups&#34;&gt;добавить прав&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.docker.com/engine/security/trust/&#34;&gt;Подписывать образы и проверять подписи&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://techbeacon.com/security/10-top-open-source-tools-docker-security&#34;&gt;Сканеры уязвимостей&lt;/a&gt; для образов &lt;code&gt;docker scan --dependency-tree &amp;lt;image&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://medium.com/@renatomefi/writing-dockerfile-like-a-software-developer-linting-9fd8c620174&#34;&gt;Линтеры&lt;/a&gt; для Dockerfile&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nickjanetakis.com/blog/docker-tip-2-the-difference-between-copy-and-add-in-a-dockerile&#34;&gt;COPY вместо ADD&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Аккуратно с рекурсивным копированием + .dockerignore&lt;/li&gt; &#xA; &lt;li&gt;Фиксированные теги для идентификации образов (Semantic versioning or Unique tags)&lt;/li&gt; &#xA; &lt;li&gt;Multi-Stage Build в том числе для того, чтобы в итоговый образ не утекли чувствительные данные&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;p&gt;Хранение и передача конфигурации и чувствительных данных&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://blog.alexellis.io/mutli-stage-docker-builds/&#34;&gt;docker experimental buildkit secrets&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://docs.docker.com/compose/compose-file/compose-file-v3/#secrets&#34;&gt;docker compose secrets&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://docs.docker.com/engine/swarm/secrets/&#34;&gt;docker swarm secrets&lt;/a&gt; и &lt;a href=&#34;https://docs.docker.com/engine/swarm/configs/&#34;&gt;docker swarm configs&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;p&gt;Локальное журналирование и доступ к логам&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;docker &lt;a href=&#34;https://docs.docker.com/config/containers/logging/configure/&#34;&gt;logging drivers&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;dedicated logs shared folders/volumes&lt;/li&gt; &#xA; &lt;li&gt;remote log collectors&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Мониторинг &lt;a href=&#34;https://docs.docker.com/config/daemon/prometheus/&#34;&gt;метрик Docker как Prometheus target&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;a href=&#34;https://stackoverflow.com/a/33003273&#34;&gt;&#34;Docker-из-docker&#34;&lt;/a&gt;?&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;a href=&#34;https://medium.com/@renatomefi/unit-testing-writing-dockerfiles-like-a-software-developer-1759f416ce84&#34;&gt;Автотесты для Dockerfile&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Hands-on practice quest #10: build-optimized networked multi-component stateful application resource-limited &lt;em&gt;best practice based&lt;/em&gt; containerization &lt;sup&gt;15 + 5&lt;/sup&gt;&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;p&gt;Given пары участников&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;p&gt;When участники именуют сценарии, формируют свои команды и проверяют их вывод и поведение&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Сценарий &#34;Как ...?&#34;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker info --format &#39;{{.LoggingDriver}}&#39;&#xA;docker container run -it --log-driver local --log-opt mode=non-blocking --log-opt max-buffer-size=4m &#xA;docker inspect -f &#39;{{.HostConfig.LogConfig.Type}}&#39;&#xA;docker logs &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Сценарий &#34;Как осуществить multi-stage сборку образа?&#34;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cd application/backend&#xA;nano Dockerfile # TODO: BUILD stage with `mvn clean verify` and QA stage with `java -jar ... --spring.profiles.active=qa` &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Then участники делятся проблемами и отвечают на вопросы&lt;/li&gt; &#xA; &lt;li&gt;Как назвали сценарии?&lt;/li&gt; &#xA; &lt;li&gt;Какие интересные Вам метрики можно снимать?&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h1&gt;Docker + QA = ♡ &lt;sup&gt;30&lt;/sup&gt; [optional]&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Как Docker упрощает ручное тестирование&lt;/li&gt; &#xA; &lt;li&gt;Версионирование как дисциплина&lt;/li&gt; &#xA; &lt;li&gt;Образ для ручного тестирования с подготовленными тестовыми данными&lt;/li&gt; &#xA; &lt;li&gt;Легкий старт нужного окружения on demand&lt;/li&gt; &#xA; &lt;li&gt;Окружение тестирования больше не узкое место&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Как Docker упрощает автоматизированное тестирование&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.testcontainers.org&#34;&gt;TestContainers&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>