<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dockerfile Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-01-13T01:34:40Z</updated>
  <subtitle>Daily Trending of Dockerfile in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>timescale/timescaledb-docker</title>
    <updated>2023-01-13T01:34:40Z</updated>
    <id>tag:github.com,2023-01-13:/timescale/timescaledb-docker</id>
    <link href="https://github.com/timescale/timescaledb-docker" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Release Docker builds of TimescaleDB&lt;/p&gt;&lt;hr&gt;&lt;img src=&#34;http://www.timescale.com/img/timescale-wordmark-blue.svg?sanitize=true&#34; alt=&#34;Timescale&#34; width=&#34;300&#34;&gt; &#xA;&lt;h2&gt;What is TimescaleDB?&lt;/h2&gt; &#xA;&lt;p&gt;TimescaleDB is an open-source database designed to make SQL scalable for time-series data. For more information, see the &lt;a href=&#34;https://www.timescale.com&#34;&gt;Timescale website&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;How to use this image&lt;/h2&gt; &#xA;&lt;p&gt;This image is based on the official &lt;a href=&#34;https://store.docker.com/images/postgres&#34;&gt;Postgres docker image&lt;/a&gt; so the documentation for that image also applies here, including the environment variables one can set, extensibility, etc.&lt;/p&gt; &#xA;&lt;h3&gt;Starting a TimescaleDB instance&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ docker run -d --name some-timescaledb -p 5432:5432 timescale/timescaledb:latest-pg13&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then connect with an app or the &lt;code&gt;psql&lt;/code&gt; client:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ docker run -it --net=host --rm timescale/timescaledb:latest-pg13 psql -h localhost -U postgres&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also connect your app via port &lt;code&gt;5432&lt;/code&gt; on the host machine.&lt;/p&gt; &#xA;&lt;p&gt;If you are running your docker image for the first time, you can also set an environmental variable, &lt;code&gt;TIMESCALEDB_TELEMETRY&lt;/code&gt;, to set the level of &lt;a href=&#34;https://docs.timescale.com/using-timescaledb/telemetry&#34;&gt;telemetry&lt;/a&gt; in the Timescale docker instance. For example, to turn off telemetry, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ docker run -d --name some-timescaledb -p 5432:5432 --env TIMESCALEDB_TELEMETRY=off timescale/timescaledb:latest-pg13&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that if the cluster has previously been initialized, you should not use this environment variable to set the level of telemetry. Instead, follow the &lt;a href=&#34;https://docs.timescale.com/using-timescaledb/telemetry&#34;&gt;instructions&lt;/a&gt; in our docs to disable telemetry once a cluster is running.&lt;/p&gt; &#xA;&lt;p&gt;If you are interested in the latest development snapshot of timescaledb there is also a nightly build available under timescaledev/timescaledb:nightly-pg13 (for PG 12, 13 and 14).&lt;/p&gt; &#xA;&lt;h3&gt;Notes on timescaledb-tune&lt;/h3&gt; &#xA;&lt;p&gt;We run &lt;code&gt;timescaledb-tune&lt;/code&gt; automatically on container initialization. By default, &lt;code&gt;timescaledb-tune&lt;/code&gt; uses system calls to retrieve an instance&#39;s available CPU and memory. In docker images, these system calls reflect the available resources on the &lt;strong&gt;host&lt;/strong&gt;. For cases where a container is allocated all available resources on a host, this is fine. But many use cases involve limiting the amount of resources a container (or the docker daemon) can have on the host. Therefore, this image looks in the cgroups metadata to determine the docker-defined limit sizes then passes those values to &lt;code&gt;timescaledb-tune&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To specify your own limits, use the &lt;code&gt;TS_TUNE_MEMORY&lt;/code&gt; and &lt;code&gt;TS_TUNE_NUM_CPUS&lt;/code&gt; environment variables at runtime:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ docker run -d --name timescaledb -p 5432:5432 -e POSTGRES_PASSWORD=password -e TS_TUNE_MEMORY=4GB -e TS_TUNE_NUM_CPUS=4 timescale/timescaledb:latest-pg13&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To specify a maximum number of &lt;a href=&#34;https://docs.timescale.com/timescaledb/latest/how-to-guides/configuration/about-configuration/#workers&#34;&gt;background workers&lt;/a&gt;, use the &lt;code&gt;TS_TUNE_MAX_BG_WORKERS&lt;/code&gt; environment variable:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ docker run -d --name timescaledb -p 5432:5432 -e POSTGRES_PASSWORD=password -e TS_TUNE_MAX_BG_WORKERS=16 timescale/timescaledb:latest-pg13&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To specify a &lt;a href=&#34;https://www.postgresql.org/docs/current/runtime-config-connection.html&#34;&gt;maximum number of connections&lt;/a&gt;, use the &lt;code&gt;TS_TUNE_MAX_CONNS&lt;/code&gt; environment variable:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ docker run -d --name timescaledb -p 5432:5432 -e POSTGRES_PASSWORD=password -e TS_TUNE_MAX_CONNS=200 timescale/timescaledb:latest-pg13&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To not run &lt;code&gt;timescaledb-tune&lt;/code&gt; at all, use the &lt;code&gt;NO_TS_TUNE&lt;/code&gt; environment variable:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ docker run -d --name timescaledb -p 5432:5432 -e POSTGRES_PASSWORD=password -e NO_TS_TUNE=true timescale/timescaledb:latest-pg13&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>camunda/camunda-platform</title>
    <updated>2023-01-13T01:34:40Z</updated>
    <id>tag:github.com,2023-01-13:/camunda/camunda-platform</id>
    <link href="https://github.com/camunda/camunda-platform" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Camunda Platform 8&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Camunda Platform 8&lt;/h1&gt; &#xA;&lt;p&gt;This repository contains links to Camunda Platform 8 resources, the offical release artifacts and a &lt;a href=&#34;https://raw.githubusercontent.com/camunda/camunda-platform/main/docker-compose.yaml&#34;&gt;docker-compose.yaml&lt;/a&gt; file for local development. For production setups we recommend to use our &lt;a href=&#34;https://docs.camunda.io/docs/self-managed/platform-deployment/kubernetes-helm/&#34;&gt;helm charts&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.camunda.io&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://camunda.io&#34;&gt;Camunda Platform SaaS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/camunda/camunda-platform-get-started&#34;&gt;Getting Started Guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/camunda/camunda-platform/releases&#34;&gt;Releases&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://helm.camunda.io/&#34;&gt;Helm Charts&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/camunda/zeebe&#34;&gt;Zeebe Workflow Engine&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.camunda.io/contact/&#34;&gt;Contact&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Using docker-compose&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span&gt;ℹ&lt;/span&gt; The docker-compose file in this repository uses the latest &lt;a href=&#34;https://docs.docker.com/compose/compose-file/&#34;&gt;compose specification&lt;/a&gt;, which was introduced with docker-compose version 1.27.0+. Please make sure to use an up-to-date docker-compose version.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span&gt;ℹ&lt;/span&gt; The Docker required is 20.10.16+&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;To stand-up a complete Camunda Platform 8 Self-Managed environment locally the &lt;a href=&#34;https://raw.githubusercontent.com/camunda/camunda-platform/main/docker-compose.yaml&#34;&gt;docker-compose.yaml&lt;/a&gt; file in this repository can be used.&lt;/p&gt; &#xA;&lt;p&gt;The full enviornment contains these components:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Zeebe&lt;/li&gt; &#xA; &lt;li&gt;Operate&lt;/li&gt; &#xA; &lt;li&gt;Tasklist&lt;/li&gt; &#xA; &lt;li&gt;Connectors&lt;/li&gt; &#xA; &lt;li&gt;Optimize&lt;/li&gt; &#xA; &lt;li&gt;Identity&lt;/li&gt; &#xA; &lt;li&gt;Elasticsearch&lt;/li&gt; &#xA; &lt;li&gt;Keycloak&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Clone this repo and issue the following command to start your environment:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker-compose up -d&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Wait a few minutes for the environment to start up and settle down. Monitor the logs, especially the Keycloak container log, to ensure the components have started.&lt;/p&gt; &#xA;&lt;p&gt;Now you can navigate to the different web apps and log in with the user &lt;code&gt;demo&lt;/code&gt; and password &lt;code&gt;demo&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Operate: &lt;a href=&#34;http://localhost:8081&#34;&gt;http://localhost:8081&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Tasklist: &lt;a href=&#34;http://localhost:8082&#34;&gt;http://localhost:8082&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Optimize: &lt;a href=&#34;http://localhost:8083&#34;&gt;http://localhost:8083&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Identity: &lt;a href=&#34;http://localhost:8084&#34;&gt;http://localhost:8084&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Elasticsearch: &lt;a href=&#34;http://localhost:9200&#34;&gt;http://localhost:9200&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Keycloak is used to manage users. Here you can log in with the user &lt;code&gt;admin&lt;/code&gt; and password &lt;code&gt;admin&lt;/code&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Keycloak: &lt;a href=&#34;http://localhost:18080/auth/&#34;&gt;http://localhost:18080/auth/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The workflow engine Zeebe is available using gRPC at &lt;code&gt;localhost:26500&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To tear down the whole environment run the following command&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker-compose down -v&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If Optimize, Identity, and Keycloak are not needed you can use the &lt;a href=&#34;https://raw.githubusercontent.com/camunda/camunda-platform/main/docker-compose-core.yaml&#34;&gt;docker-compose-core.yaml&lt;/a&gt; instead which does not include these components:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker-compose -f docker-compose-core.yaml up -d&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Zeebe, Operate, Tasklist, along with Optimize require a separate network from Identity as you&#39;ll see in the docker-compose file.&lt;/p&gt; &#xA;&lt;p&gt;In addition to the local environment setup with docker-compose, you can download the &lt;a href=&#34;https://camunda.com/download/modeler/&#34;&gt;Camunda Desktop Modeler&lt;/a&gt; to locally model BPMN diagrams for execution and directly deploy them to your local environment.&lt;/p&gt; &#xA;&lt;p&gt;Feedback and updates are welcome!&lt;/p&gt; &#xA;&lt;h2&gt;Connectors&lt;/h2&gt; &#xA;&lt;p&gt;Both docker-compose files contain our &lt;a href=&#34;https://docs.camunda.io/docs/components/integration-framework/connectors/out-of-the-box-connectors/available-connectors-overview/&#34;&gt;out-of-the-box Connectors&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Refer to the &lt;a href=&#34;https://docs.camunda.io/docs/self-managed/connectors-deployment/install-and-start/&#34;&gt;Connector installation guide&lt;/a&gt; for details on how to provide the related Connector templates for modeling.&lt;/p&gt; &#xA;&lt;p&gt;To inject secrets into the Connector runtime they can be added to the &lt;a href=&#34;https://raw.githubusercontent.com/camunda/camunda-platform/main/connector-secrets.txt&#34;&gt;&lt;code&gt;connector-secrets.txt&lt;/code&gt;&lt;/a&gt; file inside the repository in the format &lt;code&gt;NAME=VALUE&lt;/code&gt; per line. The secrets will then be available in the Connector runtime with the format &lt;code&gt;secrets.NAME&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To add custom Connectors either create a new docker image bundling them as described &lt;a href=&#34;https://github.com/camunda/connectors-bundle/tree/main/runtime&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Alternatively, you can mount new Connector JARs as volumes into the &lt;code&gt;/opt/app&lt;/code&gt; folder by adding this to the docker-compose file. Keep in mind that the Connector JARs need to bring along all necessary dependencies inside the JAR.&lt;/p&gt; &#xA;&lt;h2&gt;Kibana&lt;/h2&gt; &#xA;&lt;p&gt;A &lt;code&gt;kibana&lt;/code&gt; profile is available in the provided docker compose files to support inspection and exploration of the Camunda Platform 8 data in Elasticsearch. It can be enabled by adding &lt;code&gt;--profile kibana&lt;/code&gt; to your docker compose command. In addition to the other components, this profile spins up &lt;a href=&#34;https://www.elastic.co/kibana/&#34;&gt;Kibana&lt;/a&gt;. Kibana can be used to explore the records exported by Zeebe into Elasticsearch, or to discover the data in Elasticsearch used by the other components (e.g. Operate).&lt;/p&gt; &#xA;&lt;p&gt;You can navigate to the Kibana web app and start exploring the data without login credentials:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Kibana: &lt;a href=&#34;http://localhost:5601&#34;&gt;http://localhost:5601&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; You need to configure the index patterns in Kibana before you can explore the data.&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Go to &lt;code&gt;Management &amp;gt; Stack Management &amp;gt; Kibana &amp;gt; Index Patterns&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;li&gt;Create a new index pattern. For example, &lt;code&gt;zeebe-record-*&lt;/code&gt; matches the exported records. &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;If you don&#39;t see any indexes then make sure to export some data first (e.g. deploy a process). The indexes of the records are created when the first record of this type is exported.&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt;Go to &lt;code&gt;Analytics &amp;gt; Discover&lt;/code&gt; and select the index pattern.&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Web Modeler Self-Managed Beta Release&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span&gt;⚠&lt;/span&gt; Web Modeler Self-Managed is currently offered as a &lt;a href=&#34;https://docs.camunda.io/docs/next/reference/early-access#beta&#34;&gt;beta release&lt;/a&gt; with limited availability for enterprise customers only. It is not recommended for production use, and there is no maintenance service guaranteed. Special &lt;a href=&#34;https://camunda.com/legal/terms/camunda-platform/camunda-platform-8-self-managed/&#34;&gt;terms &amp;amp; conditions&lt;/a&gt; apply. However, we encourage you to provide feedback via your designated support channel or the &lt;a href=&#34;https://forum.camunda.io/&#34;&gt;Camunda Forum&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;The Docker images for Web Modeler Beta are available in a private registry. Enterprise customers either already have credentials to this registry, or they can request access to this registry through their CSM contact at Camunda.&lt;/p&gt; &#xA;&lt;p&gt;To run Camunda Platform with Web Modeler Self-Managed clone this repo and issue the following commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ docker login registry.camunda.cloud&#xA;Username: your_username&#xA;Password: ******&#xA;Login Succeeded&#xA;$ docker-compose -f docker-compose.yaml -f docker-compose-web-modeler-beta.yaml up -d&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To tear down the whole environment run the following command&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ docker-compose -f docker-compose.yaml -f docker-compose-web-modeler-beta.yaml down -v&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to delete everything (including any data you created). Alternatively, if you want to keep the data run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ docker-compose -f docker-compose.yaml -f docker-compose-web-modeler-beta.yaml down&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Web Modeler&lt;/h3&gt; &#xA;&lt;p&gt;Now you can access Web Modeler Self-Managed and log in with the user &lt;code&gt;demo&lt;/code&gt; and password &lt;code&gt;demo&lt;/code&gt; at &lt;a href=&#34;http://localhost:8070&#34;&gt;http://localhost:8070&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Once you are ready to deploy or execute processes use these settings to deploy to the local Zeebe instance:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Authentication: None&lt;/li&gt; &#xA; &lt;li&gt;URL: &lt;code&gt;zeebe:26500&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Emails&lt;/h3&gt; &#xA;&lt;p&gt;The setup includes &lt;a href=&#34;https://github.com/mailhog/MailHog&#34;&gt;MailHog&lt;/a&gt; as a test SMTP server. It captures all emails sent by Web Modeler, but does not forward them to the actual recipients.&lt;/p&gt; &#xA;&lt;p&gt;You can access emails in MailHog&#39;s Web UI at &lt;a href=&#34;http://localhost:8075&#34;&gt;http://localhost:8075&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Camunda Platform 7&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.camunda.org/&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/camunda/camunda-bpm-platform&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Troubleshooting&lt;/h1&gt; &#xA;&lt;h2&gt;Running on arm64 based hardware&lt;/h2&gt; &#xA;&lt;p&gt;When using arm64-based hardware like a M1 or M2 Mac the Keycloak container might not start because Bitnami only provides amd64-based images. Until bitnami adds &lt;a href=&#34;https://github.com/bitnami/charts/issues/7305&#34;&gt;support for linux/arm64 images&lt;/a&gt;, you can build and tag an arm-based image locally using the following command. After building and tagging the image you can start the environment as described in &lt;a href=&#34;https://raw.githubusercontent.com/camunda/camunda-platform/main/#using-docker-compose&#34;&gt;Using docker-compose&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ DOCKER_BUILDKIT=0 docker build -t bitnami/keycloak:19.0.3 &#34;https://github.com/camunda/camunda-platform.git#main:.keycloak/&#34;&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>