<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dockerfile Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-07-17T01:33:49Z</updated>
  <subtitle>Daily Trending of Dockerfile in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>iam-veeramalla/aws-devops-zero-to-hero</title>
    <updated>2023-07-17T01:33:49Z</updated>
    <id>tag:github.com,2023-07-17:/iam-veeramalla/aws-devops-zero-to-hero</id>
    <link href="https://github.com/iam-veeramalla/aws-devops-zero-to-hero" rel="alternate"></link>
    <summary type="html">&lt;p&gt;AWS zero to hero repo for devops engineers to learn AWS in 30 Days. This repo includes projects, presentations, interview questions and real time examples.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;aws-devops-zero-to-hero&lt;/h1&gt; &#xA;&lt;p&gt;AWS zero to hero repo for devops engineers to learn AWS in 30 Days. This repo includes projects, presentations, interview questions and real time examples. Each day&#39;s class will provide real-time knowledge on AWS services, allowing you to apply what you&#39;ve learned and gain practical skills in working with AWS in a DevOps context.&lt;/p&gt; &#xA;&lt;h2&gt;Day 1: Introduction to AWS&lt;/h2&gt; &#xA;&lt;p&gt;You will learn what is private and public cloud. Why companies are moving to public cloud, what are the advantages of moving to cloud.&lt;/p&gt; &#xA;&lt;p&gt;Also, you will be introduced to the basics of AWS, including the core services and their significance in DevOps practices. Finally learn how to set up an AWS account and navigate the AWS Management Console.&lt;/p&gt; &#xA;&lt;h2&gt;Day 2: IAM (Identity and Access Management)&lt;/h2&gt; &#xA;&lt;p&gt;You will explore IAM, which is used for managing access to AWS resources. You&#39;ll learn how to create IAM users, groups, and roles, and how to apply permissions and security best practices to ensure proper access control.&lt;/p&gt; &#xA;&lt;h2&gt;Day 3: EC2 Instances&lt;/h2&gt; &#xA;&lt;p&gt;You&#39;ll dive into EC2, which provides virtual servers in the cloud. You&#39;ll learn how to launch EC2 instances, connect to them using SSH, and understand key concepts such as instance types, security groups, and key pairs.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Your First AWS Project&lt;/strong&gt;: Deploy a simple web application(such as jenkins) on the ec2 instance and access the application from outside AWS.&lt;/p&gt; &#xA;&lt;h2&gt;Day 4: AWS Networking (VPC)&lt;/h2&gt; &#xA;&lt;p&gt;You&#39;ll explore AWS networking concepts, with a specific focus on VPC (Virtual Private Cloud). You&#39;ll learn how to create and configure VPCs, subnets, and route tables, enabling you to design and manage the network infrastructure for your applications.&lt;/p&gt; &#xA;&lt;h2&gt;Day 5: AWS Security&lt;/h2&gt; &#xA;&lt;p&gt;This day emphasizes security best practices in AWS. You&#39;ll learn how to implement security measures such as security groups, network ACLs (Access Control Lists), and IAM policies to ensure the confidentiality, integrity, and availability of your AWS resources.&lt;/p&gt; &#xA;&lt;h2&gt;Day 6: AWS Route 53&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Project:&lt;/strong&gt; Configure and manage a domain name using Route 53. You&#39;ll register a domain, set up DNS records, and explore advanced features such as health checks, routing policies, and DNS-based failover.&lt;/p&gt; &#xA;&lt;h2&gt;Day 7: Secure VPC Setup with EC2 Instances&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Project:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Design and configure a VPC: Create a VPC with custom IP ranges. Set up public and private subnets. Configure route tables and associate subnets.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Implement network security: Set up network access control lists (ACLs) to control inbound and outbound traffic. Configure security groups for EC2 instances to allow specific ports and protocols.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Provision EC2 instances: Launch EC2 instances in both the public and private subnets. Configure security groups for the instances to allow necessary traffic. Create and assign IAM roles to the instances with appropriate permissions.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Networking and routing: Set up an internet gateway to allow internet access for instances in the public subnet. Configure NAT gateway or NAT instance to enable outbound internet access for instances in the private subnet. Create appropriate route tables and associate them with the subnets.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;SSH key pair and access control: Generate an SSH key pair and securely store the private key. Configure the instances to allow SSH access only with the generated key pair. Implement IAM policies and roles to control access and permissions to AWS resources.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Test and validate the setup: SSH into the EC2 instances using the private key and verify connectivity. Test network connectivity between instances in different subnets. Validate security group rules and network ACL settings.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;By implementing this project, you&#39;ll gain hands-on experience in setting up a secure VPC with EC2 instances, implementing networking and routing, configuring security groups and IAM roles, and ensuring proper access control. This project will provide a practical understanding of how these AWS services work together to create a secure and scalable infrastructure for your applications.&lt;/p&gt; &#xA;&lt;h2&gt;Day 8: AWS Interview Questions on EC2, IAM and VPC&lt;/h2&gt; &#xA;&lt;h2&gt;Day 9: Amazon S3&lt;/h2&gt; &#xA;&lt;p&gt;This day focuses on Amazon S3, a scalable object storage service. You&#39;ll learn how to create S3 buckets, upload and download objects, and organize data using S3 features like versioning, lifecycle policies, and access control.&lt;/p&gt; &#xA;&lt;h2&gt;Day 10: AWS CLI&lt;/h2&gt; &#xA;&lt;h2&gt;Day 11: AWS CloudFormation&lt;/h2&gt; &#xA;&lt;p&gt;This day introduces Infrastructure as Code (IaC) using AWS CloudFormation. You&#39;ll learn how to create CloudFormation templates to automate the provisioning of resources, manage stacks, and ensure consistent infrastructure across deployments.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Project:&lt;/strong&gt; You&#39;ll work on creating a CloudFormation template that provisions a fully configured application stack, including EC2 instances, networking components, and security groups.&lt;/p&gt; &#xA;&lt;h2&gt;Day 12: AWS CodeCommit&lt;/h2&gt; &#xA;&lt;p&gt;This day focuses on AWS CodeCommit, a managed source control service. You&#39;ll learn how to set up a Git repository in CodeCommit, collaborate with team members, and manage version control of your codebase.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Project:&lt;/strong&gt; You&#39;ll configure a CodeCommit repository for a team project, including setting up access control and collaboration workflows.&lt;/p&gt; &#xA;&lt;h2&gt;Day 13: AWS CodePipeline&lt;/h2&gt; &#xA;&lt;p&gt;You&#39;ll dive into AWS CodePipeline, a fully managed continuous delivery service. You&#39;ll learn how to build end-to-end CI/CD pipelines by configuring source, build, and deployment stages, automating the entire software release process.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Project:&lt;/strong&gt; You&#39;ll create a CI/CD pipeline using CodePipeline for an application deployment, including source code integration, build, and automatic deployment to a target environment.&lt;/p&gt; &#xA;&lt;h2&gt;Day 14: AWS CodeBuild&lt;/h2&gt; &#xA;&lt;p&gt;This day focuses on AWS CodeBuild, a fully managed build service. You&#39;ll learn how to configure build projects in CodeBuild, define build specifications, and perform build and testing processes.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Project:&lt;/strong&gt; You&#39;ll configure and run CodeBuild for a project, including defining build specifications and integrating with other AWS services.&lt;/p&gt; &#xA;&lt;h2&gt;Day 15: AWS CodeDeploy&lt;/h2&gt; &#xA;&lt;p&gt;You&#39;ll explore AWS CodeDeploy, a service for automating application deployments to various compute environments. You&#39;ll learn how to create deployment groups, configure deployment strategies, and perform automatic rollbacks if necessary.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Project:&lt;/strong&gt; You&#39;ll implement a Blue/Green deployment strategy for a sample application using CodeDeploy, ensuring zero-downtime deployments and easy rollback options.&lt;/p&gt; &#xA;&lt;h2&gt;Day 16: AWS CloudWatch&lt;/h2&gt; &#xA;&lt;p&gt;This day focuses on monitoring AWS resources using AWS CloudWatch. You&#39;ll learn how to create alarms, set up notifications, and collect metrics to gain insights into the health and performance of your applications and infrastructure.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Project:&lt;/strong&gt; You&#39;ll set up CloudWatch alarms for critical metrics of an application, define appropriate threshold conditions, and configure notification actions.&lt;/p&gt; &#xA;&lt;h2&gt;Day 17: AWS Lambda&lt;/h2&gt; &#xA;&lt;p&gt;This day introduces serverless computing with AWS Lambda. You&#39;ll learn how to create and deploy serverless functions, trigger them based on events, and leverage Lambda to build scalable and event-driven architectures.&lt;/p&gt; &#xA;&lt;h2&gt;Day 18: AWS CloudWatch Events and EventBridge&lt;/h2&gt; &#xA;&lt;p&gt;This day focuses on AWS CloudWatch Events and EventBridge, services for event-driven architectures. You&#39;ll learn how to create event rules, configure event targets, and build serverless event-driven workflows.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Project:&lt;/strong&gt; You&#39;ll build a serverless event-driven workflow using CloudWatch Events and EventBridge, demonstrating the integration and automation of different AWS services based on events.&lt;/p&gt; &#xA;&lt;h2&gt;Day 19: AWS CloudTrail and Config&lt;/h2&gt; &#xA;&lt;p&gt;You&#39;ll explore AWS CloudTrail and AWS Config, which provide auditing and compliance capabilities. You&#39;ll learn how to track API calls using CloudTrail and ensure compliance with AWS Config rules.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Project:&lt;/strong&gt; You&#39;ll configure CloudTrail to log API activities and set up AWS Config rules to enforce compliance policies for your AWS resources.&lt;/p&gt; &#xA;&lt;h2&gt;Day 20: AWS DynamoDB&lt;/h2&gt; &#xA;&lt;p&gt;You&#39;ll explore AWS DynamoDB, a NoSQL database service. You&#39;ll learn how to create and manage DynamoDB tables, perform CRUD operations, and leverage DynamoDB&#39;s scalability and performance capabilities.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Project:&lt;/strong&gt; You&#39;ll build a serverless API using DynamoDB as the backend storage, allowing data retrieval and modification operations.&lt;/p&gt; &#xA;&lt;h2&gt;Day 21: AWS ECS (Elastic Container Service)&lt;/h2&gt; &#xA;&lt;p&gt;This day focuses on AWS ECS, a fully managed container orchestration service. You&#39;ll learn how to run and manage containers using ECS, including creating task definitions, managing services, and scaling with auto-scaling capabilities.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Project:&lt;/strong&gt; You&#39;ll deploy a multi-container application using ECS, configure auto-scaling policies, and ensure high availability and efficient resource utilization.&lt;/p&gt; &#xA;&lt;h2&gt;Day 22: AWS ECR (Elastic Container Registry)&lt;/h2&gt; &#xA;&lt;p&gt;You&#39;ll explore AWS ECR, a fully managed container registry for storing and managing container images. You&#39;ll learn how to push and pull Docker images to and from ECR, enabling seamless integration with ECS and other container services.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Project:&lt;/strong&gt; You&#39;ll build a CI/CD pipeline that automatically builds, pushes, and deploys Docker images to ECR, ensuring streamlined container image management.&lt;/p&gt; &#xA;&lt;h2&gt;Day 23: AWS EKS (Elastic Kubernetes Service)&lt;/h2&gt; &#xA;&lt;p&gt;This day introduces AWS EKS, a fully managed Kubernetes service. You&#39;ll learn how to deploy and manage Kubernetes clusters using EKS, including launching worker nodes, configuring networking, and deploying applications using Kubernetes manifests.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Project:&lt;/strong&gt; You&#39;ll deploy a sample application on EKS using Kubernetes manifests, demonstrating the capabilities of running containerized applications on a managed Kubernetes service.&lt;/p&gt; &#xA;&lt;h2&gt;Day 24: AWS CloudWatch Logs&lt;/h2&gt; &#xA;&lt;p&gt;You&#39;ll explore AWS CloudWatch Logs, a service for collecting and analyzing log data. You&#39;ll learn how to configure log groups, streams, and filters to centralize log management and gain insights into application behavior and troubleshooting.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Project:&lt;/strong&gt; You&#39;ll set up CloudWatch Logs for a production application, configure log groups and streams, and create filters to extract relevant log data.&lt;/p&gt; &#xA;&lt;h2&gt;Day 25: AWS Secrets Manager&lt;/h2&gt; &#xA;&lt;p&gt;This day focuses on AWS Secrets Manager, a service for storing and managing secrets such as database credentials, API keys, and other sensitive information. You&#39;ll learn how to store, retrieve, and rotate secrets securely in your applications.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Project:&lt;/strong&gt; You&#39;ll configure Secrets Manager to store and manage secrets, integrate secret retrieval in an application, and implement secret rotation policies.&lt;/p&gt; &#xA;&lt;h2&gt;Day 26: AWS Auto Scaling&lt;/h2&gt; &#xA;&lt;p&gt;You&#39;ll dive into AWS Auto Scaling, a service for automatically adjusting the capacity of your AWS resources based on demand. You&#39;ll learn how to configure Auto Scaling groups, scaling policies, and scaling based on metrics.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Project:&lt;/strong&gt; You&#39;ll configure an Auto Scaling group for an application, define scaling policies based on metrics such as CPU utilization, and observe the dynamic scaling behavior.&lt;/p&gt; &#xA;&lt;h2&gt;Day 27: AWS RDS (Relational Database Service)&lt;/h2&gt; &#xA;&lt;p&gt;This day introduces AWS RDS, a managed database service for relational databases. You&#39;ll learn how to create and manage RDS instances, configure backups, snapshots, and replication to ensure high availability and data durability.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Project:&lt;/strong&gt; You&#39;ll provision an RDS instance, configure backups and snapshots, and test replication scenarios for a sample database.&lt;/p&gt; &#xA;&lt;h2&gt;Day 28: AWS Elastic Load Balancer&lt;/h2&gt; &#xA;&lt;p&gt;You&#39;ll explore AWS Elastic Load Balancer, a service for distributing incoming application traffic across multiple targets. You&#39;ll learn how to configure and manage load balancers to ensure high availability, fault tolerance, and scalability.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Project:&lt;/strong&gt; You&#39;ll configure an Elastic Load Balancer for an application, define target groups, and observe the load balancing behavior across instances.&lt;/p&gt; &#xA;&lt;h2&gt;Day 29: AWS Systems Manager&lt;/h2&gt; &#xA;&lt;p&gt;You&#39;ll explore AWS Systems Manager, a management service for AWS resources. You&#39;ll learn how to use Systems Manager to manage EC2 instances, perform patch management, automate administrative tasks, and configure resource compliance.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Project:&lt;/strong&gt; You&#39;ll leverage Systems Manager to manage EC2 instances, perform common administrative tasks, and ensure compliance with configuration policies.&lt;/p&gt; &#xA;&lt;h2&gt;Day 30: AWS Cloud Migration Strategies and Tools&lt;/h2&gt; &#xA;&lt;p&gt;This day focuses on learning how to migrate applications to AWS cloud. What are the most popular strategies and tools used to achieve the cloud migration.&lt;/p&gt; &#xA;&lt;h2&gt;Day 31: AWS Best Practices and Job Preparation&lt;/h2&gt; &#xA;&lt;p&gt;On the final day, you&#39;ll review best practices for AWS services, including security, cost optimization and performance.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>geerlingguy/docker-opensuseleap15-ansible</title>
    <updated>2023-07-17T01:33:49Z</updated>
    <id>tag:github.com,2023-07-17:/geerlingguy/docker-opensuseleap15-ansible</id>
    <link href="https://github.com/geerlingguy/docker-opensuseleap15-ansible" rel="alternate"></link>
    <summary type="html">&lt;p&gt;OpenSUSE Leap 15 Docker container for Ansible playbook and role testing.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;OpenSUSE Leap 15 Ansible Test Image&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/geerlingguy/docker-opensuseleap15-ansible/actions?query=workflow%3ABuild&#34;&gt;&lt;img src=&#34;https://github.com/geerlingguy/docker-opensuseleap15-ansible/workflows/Build/badge.svg?branch=master&amp;amp;event=push&#34; alt=&#34;CI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/geerlingguy/docker-opensuseleap15-ansible/&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/pulls/geerlingguy/docker-opensuseleap15-ansible&#34; alt=&#34;Docker pulls&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;OpenSUSE Leap 15 Docker container for Ansible playbook and role testing.&lt;/p&gt; &#xA;&lt;h2&gt;Tags&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;latest&lt;/code&gt;: Latest stable version of Ansible.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The latest tag is a lightweight image for basic validation of Ansible playbooks.&lt;/p&gt; &#xA;&lt;h2&gt;How to Build&lt;/h2&gt; &#xA;&lt;p&gt;This image is built on Docker Hub automatically any time the upstream OS container is rebuilt, and any time a commit is made or merged to the &lt;code&gt;master&lt;/code&gt; branch. But if you need to build the image on your own locally, do the following:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.docker.com/engine/installation/&#34;&gt;Install Docker&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cd&lt;/code&gt; into this directory.&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;docker build -t opensuseleap15-ansible .&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;How to Use&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.docker.com/engine/installation/&#34;&gt;Install Docker&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Pull this image from Docker Hub: &lt;code&gt;docker pull geerlingguy/docker-opensuseleap15-ansible:latest&lt;/code&gt; (or use the image you built earlier, e.g. &lt;code&gt;opensuseleap15-ansible:latest&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Run a container from the image: &lt;code&gt;docker run --detach --privileged --cgroupns=host --volume=/sys/fs/cgroup:/sys/fs/cgroup:rw geerlingguy/docker-opensuseleap15-ansible:latest&lt;/code&gt; (to test my Ansible roles, I add in a volume mounted from the current working directory with &lt;code&gt;--volume=`pwd`:/etc/ansible/roles/role_under_test:ro&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Use Ansible inside the container: a. &lt;code&gt;docker exec --tty [container_id] env TERM=xterm ansible --version&lt;/code&gt; b. &lt;code&gt;docker exec --tty [container_id] env TERM=xterm ansible-playbook /path/to/ansible/playbook.yml --syntax-check&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Notes&lt;/h2&gt; &#xA;&lt;p&gt;I use Docker to test my Ansible roles and playbooks on multiple OSes using CI tools like Jenkins and Travis. This container allows me to test roles and playbooks using Ansible running locally inside the container.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Important Note&lt;/strong&gt;: I use this image for testing in an isolated environment—not for production—and the settings and configuration used may not be suitable for a secure and performant production environment. Use on production servers/in the wild at your own risk!&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Author&lt;/h2&gt; &#xA;&lt;p&gt;Created in 2023 by &lt;a href=&#34;https://www.jeffgeerling.com/&#34;&gt;Jeff Geerling&lt;/a&gt;, author of &lt;a href=&#34;https://www.ansiblefordevops.com/&#34;&gt;Ansible for DevOps&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>ika-rwth-aachen/docker-ros</title>
    <updated>2023-07-17T01:33:49Z</updated>
    <id>tag:github.com,2023-07-17:/ika-rwth-aachen/docker-ros</id>
    <link href="https://github.com/ika-rwth-aachen/docker-ros" rel="alternate"></link>
    <summary type="html">&lt;p&gt;docker-ros automatically builds development and deployment Docker images for your ROS-based repositories&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;em&gt;docker-ros&lt;/em&gt; – Automated Containerization of ROS Apps&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/v/release/ika-rwth-aachen/docker-ros&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/license/ika-rwth-aachen/docker-ros&#34;&gt; &lt;a href=&#34;https://github.com/ika-rwth-aachen/docker-ros/actions/workflows/github.yml&#34;&gt;&lt;img src=&#34;https://github.com/ika-rwth-aachen/docker-ros/actions/workflows/github.yml/badge.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/ika-rwth-aachen/docker-ros/actions/workflows/gitlab.yml&#34;&gt;&lt;img src=&#34;https://github.com/ika-rwth-aachen/docker-ros/actions/workflows/gitlab.yml/badge.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;docker-ros&lt;/em&gt; automatically builds minimal container images of ROS applications.&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/ika-rwth-aachen/docker-ros/main/assets/logo.png&#34; height=&#34;130&#34; align=&#34;right&#34;&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ika-rwth-aachen/docker-ros/main/#about&#34;&gt;About&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ika-rwth-aachen/docker-ros/main/#prerequisites&#34;&gt;Prerequisites&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ika-rwth-aachen/docker-ros/main/#usage&#34;&gt;Usage&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ika-rwth-aachen/docker-ros/main/#build-a-minimal-image-for-deployment&#34;&gt;Build a minimal image for deployment&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ika-rwth-aachen/docker-ros/main/#build-development-and-deployment-images&#34;&gt;Build development and deployment images&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ika-rwth-aachen/docker-ros/main/#build-multi-arch-images&#34;&gt;Build multi-arch images&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ika-rwth-aachen/docker-ros/main/#build-deployment-image-with-additional-industrial_ci-check&#34;&gt;Build deployment image with additional industrial_ci check&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ika-rwth-aachen/docker-ros/main/#build-multi-arch-images-on-arch-specific-self-hosted-runners-in-parallel&#34;&gt;Build multi-arch images on arch-specific self-hosted runners in parallel&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ika-rwth-aachen/docker-ros/main/#build-images-locally&#34;&gt;Build images locally&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ika-rwth-aachen/docker-ros/main/#advanced-dependencies&#34;&gt;Advanced Dependencies&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ika-rwth-aachen/docker-ros/main/#extra-system-dependencies-apt&#34;&gt;Extra System Dependencies (&lt;em&gt;apt&lt;/em&gt;)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ika-rwth-aachen/docker-ros/main/#extra-system-dependencies-pip&#34;&gt;Extra System Dependencies (&lt;em&gt;pip&lt;/em&gt;)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ika-rwth-aachen/docker-ros/main/#custom-installation-script&#34;&gt;Custom Installation Script&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ika-rwth-aachen/docker-ros/main/#extra-image-files&#34;&gt;Extra Image Files&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ika-rwth-aachen/docker-ros/main/#configuration-variables&#34;&gt;Configuration Variables&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;We recommend to use &lt;em&gt;docker-ros&lt;/em&gt; in combination with our other tools for Docker and ROS.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ika-rwth-aachen/docker-ros-ml-images&#34;&gt;&lt;em&gt;docker-ros-ml-images&lt;/em&gt;&lt;/a&gt; provides machine learning-enabled ROS Docker images &lt;a href=&#34;https://github.com/ika-rwth-aachen/docker-ros-ml-images&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/ika-rwth-aachen/docker-ros-ml-images?style=social&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ika-rwth-aachen/docker-run&#34;&gt;&lt;em&gt;docker-run&lt;/em&gt;&lt;/a&gt; is a CLI tool for simplified interaction with Docker images &lt;a href=&#34;https://github.com/ika-rwth-aachen/docker-run&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/ika-rwth-aachen/docker-run?style=social&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;About&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;docker-ros&lt;/em&gt; provides a generic &lt;a href=&#34;https://raw.githubusercontent.com/ika-rwth-aachen/docker-ros/main/docker/Dockerfile&#34;&gt;Dockerfile&lt;/a&gt; that can be used to build development and deployment Docker images for arbitrary ROS packages or package stacks. Building such images can easily be automated by integrating &lt;em&gt;docker-ros&lt;/em&gt; into CI through the provided &lt;a href=&#34;https://raw.githubusercontent.com/ika-rwth-aachen/docker-ros/main/action.yml&#34;&gt;GitHub action&lt;/a&gt; or &lt;a href=&#34;https://raw.githubusercontent.com/ika-rwth-aachen/docker-ros/main/.gitlab-ci/docker-ros.yml&#34;&gt;GitLab CI template&lt;/a&gt;. The development image built by &lt;em&gt;docker-ros&lt;/em&gt; contains all required dependencies and the source code of your ROS-based repository. The deployment image only contains dependencies and the compiled binaries created by building the ROS packages in the repository. &lt;em&gt;docker-ros&lt;/em&gt; is also able to build multi-arch Docker images for &lt;em&gt;amd64&lt;/em&gt; and &lt;em&gt;arm64&lt;/em&gt; architectures.&lt;/p&gt; &#xA;&lt;p&gt;The Dockerfile performs the following steps to build these images:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;All dependency repositories that are defined in a &lt;code&gt;.repos&lt;/code&gt; file anywhere in the repository are cloned using &lt;a href=&#34;https://github.com/dirk-thomas/vcstool&#34;&gt;&lt;em&gt;vcstool&lt;/em&gt;&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;The ROS dependencies listed in each package&#39;s &lt;code&gt;package.xml&lt;/code&gt; are installed by &lt;a href=&#34;https://docs.ros.org/en/independent/api/rosdep/html/&#34;&gt;&lt;em&gt;rosdep&lt;/em&gt;&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;(optional)&lt;/em&gt; Additional apt dependencies from a special file &lt;code&gt;additional-debs.txt&lt;/code&gt; are installed, if needed (see &lt;a href=&#34;https://raw.githubusercontent.com/ika-rwth-aachen/docker-ros/main/#extra-system-dependencies-apt&#34;&gt;&lt;em&gt;Advanced Dependencies&lt;/em&gt;&lt;/a&gt;).&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;(optional)&lt;/em&gt; Additional pip requirements from a special file &lt;code&gt;additional-pip-requirements.txt&lt;/code&gt; are installed, if needed (see &lt;a href=&#34;https://raw.githubusercontent.com/ika-rwth-aachen/docker-ros/main/#extra-system-dependencies-pip&#34;&gt;&lt;em&gt;Advanced Dependencies&lt;/em&gt;&lt;/a&gt;).&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;(optional)&lt;/em&gt; A special folder &lt;code&gt;additional-files/&lt;/code&gt; is copied into the images, if needed (see &lt;a href=&#34;https://raw.githubusercontent.com/ika-rwth-aachen/docker-ros/main/#extra-image-files&#34;&gt;&lt;em&gt;Advanced Dependencies&lt;/em&gt;&lt;/a&gt;).&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;(optional)&lt;/em&gt; A special script &lt;code&gt;custom.sh&lt;/code&gt; is executed to perform further arbitrary installation commands, if needed (see &lt;a href=&#34;https://raw.githubusercontent.com/ika-rwth-aachen/docker-ros/main/#custom-installation-script&#34;&gt;&lt;em&gt;Advanced Dependencies&lt;/em&gt;&lt;/a&gt;).&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;(deployment)&lt;/em&gt; All ROS packages are built using &lt;code&gt;catkin&lt;/code&gt; (ROS) or &lt;code&gt;colcon&lt;/code&gt; (ROS2).&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;(deployment)&lt;/em&gt; A custom launch command is configured to run on container start.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Prerequisites&lt;/h3&gt; &#xA;&lt;p&gt;&lt;em&gt;docker-ros&lt;/em&gt; is made for automated execution in GitHub or GitLab CI pipelines. For local execution, see &lt;a href=&#34;https://raw.githubusercontent.com/ika-rwth-aachen/docker-ros/main/#build-images-locally&#34;&gt;&lt;em&gt;Build images locally&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;GitHub&lt;/summary&gt; &#xA; &lt;p&gt;GitHub offers free minutes on GitHub-hosted runners executing GitHub Actions, &lt;a href=&#34;https://docs.github.com/en/billing/managing-billing-for-github-actions/about-billing-for-github-actions&#34;&gt;see here&lt;/a&gt;. No further setup is required other than integrating &lt;em&gt;docker-ros&lt;/em&gt; into your repository, see &lt;a href=&#34;https://raw.githubusercontent.com/ika-rwth-aachen/docker-ros/main/#usage&#34;&gt;&lt;em&gt;Usage&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt; &#xA; &lt;p&gt;Note that GitHub is currently only offering Linux runners based on the &lt;em&gt;amd64&lt;/em&gt; architecture. &lt;em&gt;docker-ros&lt;/em&gt; can also build multi-arch Docker images solely on the &lt;em&gt;amd64&lt;/em&gt; platform through emulation, but performance can be improved greatly by deploying &lt;a href=&#34;https://docs.github.com/en/actions/hosting-your-own-runners/managing-self-hosted-runners/about-self-hosted-runners&#34;&gt;self-hosted runners&lt;/a&gt; for the &lt;em&gt;arm64&lt;/em&gt; platform.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;GitLab&lt;/summary&gt; &#xA; &lt;blockquote&gt; &#xA;  &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;GitLab runners must be based on the Docker executor, &lt;a href=&#34;https://docs.gitlab.com/runner/executors/docker.html&#34;&gt;see here&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;GitLab runners must run in privileged mode for Docker-in-Docker, &lt;a href=&#34;https://docs.gitlab.com/runner/executors/docker.html#use-docker-in-docker-with-privileged-mode&#34;&gt;see here&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;GitLab runners must be tagged with tags &lt;code&gt;privileged&lt;/code&gt; and either &lt;code&gt;amd64&lt;/code&gt; or &lt;code&gt;arm64&lt;/code&gt; depending on their architecture&lt;/li&gt; &#xA;  &lt;/ul&gt; &#xA; &lt;/blockquote&gt; &#xA; &lt;p&gt;GitLab offers free minutes on GitLab-hosted runners executing GitLab CI pipelines on &lt;a href=&#34;https://gitlab.com&#34;&gt;gitlab.com&lt;/a&gt;, &lt;a href=&#34;https://docs.gitlab.com/runner/#use-gitlabcom-saas-runners&#34;&gt;see here&lt;/a&gt;. On self-hosted GitLab instances, you can set up self-hosted runners, &lt;a href=&#34;https://docs.gitlab.com/runner/#use-self-managed-runners&#34;&gt;see here&lt;/a&gt;.&lt;/p&gt; &#xA; &lt;p&gt;Note that GitLab is currently only offering Linux runners based on the &lt;em&gt;amd64&lt;/em&gt; architecture. &lt;em&gt;docker-ros&lt;/em&gt; can also build multi-arch Docker images solely on the &lt;em&gt;amd64&lt;/em&gt; platform through emulation, but performance can be improved greatly by deploying &lt;a href=&#34;https://docs.gitlab.com/runner/#use-self-managed-runners&#34;&gt;self-hosted runners&lt;/a&gt; for the &lt;em&gt;arm64&lt;/em&gt; platform.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;docker-ros&lt;/em&gt; can easily be integrated into any GitHub or GitLab repository containing ROS packages. Example integrations can be found in the following sections. Configuration options can be found &lt;a href=&#34;https://raw.githubusercontent.com/ika-rwth-aachen/docker-ros/main/#configuration-variables&#34;&gt;here&lt;/a&gt;. For local execution, see &lt;a href=&#34;https://raw.githubusercontent.com/ika-rwth-aachen/docker-ros/main/#build-images-locally&#34;&gt;&lt;em&gt;Build images locally&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;details open&gt;&#xA; &lt;summary&gt;GitHub&lt;/summary&gt; &#xA; &lt;p&gt;&lt;em&gt;docker-ros&lt;/em&gt; provides a &lt;a href=&#34;https://raw.githubusercontent.com/ika-rwth-aachen/docker-ros/main/action.yml&#34;&gt;GitHub action&lt;/a&gt; that can simply be added to a job via the &lt;a href=&#34;https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsuses&#34;&gt;&lt;code&gt;jobs.&amp;lt;job_id&amp;gt;.steps[*].uses&lt;/code&gt; keyword&lt;/a&gt;. A quick start for GitHub Actions is found &lt;a href=&#34;https://docs.github.com/en/actions/quickstart&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details open&gt;&#xA; &lt;summary&gt;GitLab&lt;/summary&gt; &#xA; &lt;p&gt;&lt;em&gt;docker-ros&lt;/em&gt; provides a &lt;a href=&#34;https://raw.githubusercontent.com/ika-rwth-aachen/docker-ros/main/.gitlab-ci/docker-ros.yml&#34;&gt;GitLab CI template&lt;/a&gt; that can simply be included in a &lt;a href=&#34;https://docs.gitlab.com/ee/ci/yaml/gitlab_ci_yaml.html&#34;&gt;&lt;code&gt;.gitlab-ci.yml&lt;/code&gt;&lt;/a&gt; file. A quick start for GitLab CI is found &lt;a href=&#34;https://docs.gitlab.com/ee/ci/quick_start/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Build a minimal image for deployment&lt;/h3&gt; &#xA;&lt;details open&gt;&#xA; &lt;summary&gt;GitHub&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;on: push&#xA;jobs:&#xA;  docker-ros:&#xA;    runs-on: ubuntu-latest&#xA;    steps:&#xA;      - uses: ika-rwth-aachen/docker-ros@v1.2.3&#xA;        with:&#xA;          base-image: rwthika/ros2:humble&#xA;          command: ros2 run my_pkg my_node&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details open&gt;&#xA; &lt;summary&gt;GitLab&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;include:&#xA;  - remote: https://raw.githubusercontent.com/ika-rwth-aachen/docker-ros/v1.2.3/.gitlab-ci/docker-ros.yml&#xA;&#xA;variables:&#xA;  BASE_IMAGE: rwthika/ros2:humble&#xA;  COMMAND: ros2 run my_pkg my_node&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Build development and deployment images&lt;/h3&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;GitHub&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;on: push&#xA;jobs:&#xA;  docker-ros:&#xA;    runs-on: ubuntu-latest&#xA;    steps:&#xA;      - uses: ika-rwth-aachen/docker-ros@v1.2.3&#xA;        with:&#xA;          base-image: rwthika/ros2:humble&#xA;          command: ros2 run my_pkg my_node&#xA;          target: dev,run&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;GitLab&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;include:&#xA;  - remote: https://raw.githubusercontent.com/ika-rwth-aachen/docker-ros/v1.2.3/.gitlab-ci/docker-ros.yml&#xA;&#xA;variables:&#xA;  BASE_IMAGE: rwthika/ros2:humble&#xA;  COMMAND: ros2 run my_pkg my_node&#xA;  TARGET: dev,run&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Build multi-arch images&lt;/h3&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;GitHub&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;on: push&#xA;jobs:&#xA;  docker-ros:&#xA;    runs-on: ubuntu-latest&#xA;    steps:&#xA;      - uses: ika-rwth-aachen/docker-ros@v1.2.3&#xA;        with:&#xA;          base-image: rwthika/ros2:humble&#xA;          command: ros2 run my_pkg my_node&#xA;          target: dev,run&#xA;          platform: amd64,arm64&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;GitLab&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;include:&#xA;  - remote: https://raw.githubusercontent.com/ika-rwth-aachen/docker-ros/v1.2.3/.gitlab-ci/docker-ros.yml&#xA;&#xA;variables:&#xA;  BASE_IMAGE: rwthika/ros2:humble&#xA;  COMMAND: ros2 run my_pkg my_node&#xA;  TARGET: dev,run&#xA;  PLATFORM: amd64,arm64&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Build deployment image with additional industrial_ci check&lt;/h3&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;GitHub&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;on: push&#xA;jobs:&#xA;  docker-ros:&#xA;    runs-on: ubuntu-latest&#xA;    steps:&#xA;      - uses: ika-rwth-aachen/docker-ros@v1.2.3&#xA;        with:&#xA;          base-image: rwthika/ros2:humble&#xA;          command: ros2 run my_pkg my_node&#xA;          enable-industrial-ci: &#39;true&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;GitLab&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;include:&#xA;  - remote: https://raw.githubusercontent.com/ika-rwth-aachen/docker-ros/v1.2.3/.gitlab-ci/docker-ros.yml&#xA;&#xA;variables:&#xA;  BASE_IMAGE: rwthika/ros2:humble&#xA;  COMMAND: ros2 run my_pkg my_node&#xA;  ENABLE_INDUSTRIAL_CI: &#39;true&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Build multi-arch images on arch-specific self-hosted runners in parallel&lt;/h3&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;GitHub&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;on: push&#xA;jobs:&#xA;  docker-ros:&#xA;    strategy:&#xA;      matrix:&#xA;        target: [dev, run]&#xA;        platform: [amd64, arm64]  &#xA;    runs-on: [self-hosted, &#34;${{ matrix.platform }}&#34;]&#xA;    steps:&#xA;      - uses: ika-rwth-aachen/docker-ros@v1.2.3&#xA;        with:&#xA;          base-image: rwthika/ros2:humble&#xA;          command: ros2 run my_pkg my_node&#xA;          target: ${{ matrix.target }}&#xA;          platform: ${{ matrix.platform }}&#xA;          enable-singlearch-push: true&#xA;      # TODO: manifest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;GitLab&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;# TODO&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Build images locally&lt;/h3&gt; &#xA;&lt;p&gt;&lt;em&gt;docker-ros&lt;/em&gt; can build Docker images locally by executing the &lt;a href=&#34;https://raw.githubusercontent.com/ika-rwth-aachen/docker-ros/main/scripts/build.sh&#34;&gt;&lt;code&gt;build.sh&lt;/code&gt;&lt;/a&gt; script.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Clone &lt;em&gt;docker-ros&lt;/em&gt; as a Git submodule to &lt;code&gt;docker/docker-ros&lt;/code&gt; in your repository. &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# ros-repository/&#xA;mkdir -p docker&#xA;git submodule add https://github.com/ika-rwth-aachen/docker-ros.git docker/docker-ros&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Configure the build using the same &lt;a href=&#34;https://raw.githubusercontent.com/ika-rwth-aachen/docker-ros/main/#configuration-variables&#34;&gt;environment variables&lt;/a&gt; as used for GitLab CI and run &lt;a href=&#34;https://raw.githubusercontent.com/ika-rwth-aachen/docker-ros/main/scripts/build.sh&#34;&gt;&lt;code&gt;build.sh&lt;/code&gt;&lt;/a&gt;, e.g.: &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# ros-repository/&#xA;  BASE_IMAGE=&#34;rwthika/ros2:humble&#34; \&#xA;  COMMAND=&#34;ros2 run my_pkg my_node&#34; \&#xA;  IMAGE=&#34;my-image:latest&#34; \&#xA;./docker/docker-ros/scripts/build.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;&lt;br&gt; You can alternatively store your environment variable configuration in a &lt;code&gt;.env&lt;/code&gt; file:&lt;/p&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# .env&#xA;BASE_IMAGE=&#34;rwthika/ros2:humble&#34;&#xA;COMMAND=&#34;ros2 run my_pkg my_node&#34;&#xA;IMAGE=&#34;my-image:latest&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Advanced Dependencies&lt;/h2&gt; &#xA;&lt;p&gt;In order to keep things organized, we recommend to place all &lt;em&gt;docker-ros&lt;/em&gt; related files in a &lt;code&gt;docker&lt;/code&gt; folder on top repository level.&lt;/p&gt; &#xA;&lt;h3&gt;Extra System Dependencies (&lt;em&gt;apt&lt;/em&gt;)&lt;/h3&gt; &#xA;&lt;p&gt;If your ROS-based repository requires system dependencies that cannot be installed by specifying their &lt;a href=&#34;https://docs.ros.org/en/independent/api/rosdep/html/&#34;&gt;rosdep&lt;/a&gt; keys in a &lt;code&gt;package.xml&lt;/code&gt;, you can use a special &lt;code&gt;additional-debs.txt&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;p&gt;Create a file &lt;code&gt;additional-debs.txt&lt;/code&gt; in your &lt;code&gt;docker&lt;/code&gt; folder (or configure a different &lt;code&gt;ADDITIONAL_DEBS_FILE&lt;/code&gt;) and list any other dependencies that need to be installed via &lt;em&gt;apt&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Extra System Dependencies (&lt;em&gt;pip&lt;/em&gt;)&lt;/h3&gt; &#xA;&lt;p&gt;If your ROS-based repository requires Python dependencies that cannot be installed by specifying their &lt;a href=&#34;https://docs.ros.org/en/independent/api/rosdep/html/&#34;&gt;rosdep&lt;/a&gt; keys in a &lt;code&gt;package.xml&lt;/code&gt;, you can use a special &lt;code&gt;additional-pip-requirements.txt&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;p&gt;Create a file &lt;code&gt;additional-pip-requirements.txt&lt;/code&gt; in your &lt;code&gt;docker&lt;/code&gt; folder (or configure a different &lt;code&gt;ADDITIONAL_PIP_FILE&lt;/code&gt;) and list any other Python dependencies that need to be installed via &lt;em&gt;pip&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Custom Installation Script&lt;/h3&gt; &#xA;&lt;p&gt;If your ROS-based repository requires to execute any other installation or pre-/post-installation steps, you can use a special &lt;code&gt;custom.sh&lt;/code&gt; script.&lt;/p&gt; &#xA;&lt;p&gt;Create a script &lt;code&gt;custom.sh&lt;/code&gt; in your &lt;code&gt;docker&lt;/code&gt; folder (or configure a different &lt;code&gt;CUSTOM_SCRIPT_FILE&lt;/code&gt;) that executes arbitrary commands as part of the image building process.&lt;/p&gt; &#xA;&lt;h3&gt;Extra Image Files&lt;/h3&gt; &#xA;&lt;p&gt;If you need to have additional files present in the deployment image, you can use a special &lt;code&gt;additional-files&lt;/code&gt; folder. The folder contents will be copied into the container before the custom installation script &lt;code&gt;custom.sh&lt;/code&gt; is executed.&lt;/p&gt; &#xA;&lt;p&gt;Create a folder &lt;code&gt;additional-files&lt;/code&gt; in your &lt;code&gt;docker&lt;/code&gt; folder (or configure a different &lt;code&gt;ADDITIONAL_FILES_DIR&lt;/code&gt;) and place any files or directories in it. The contents will be copied to &lt;code&gt;/docker-ros/additional-files&lt;/code&gt; in the image.&lt;/p&gt; &#xA;&lt;h2&gt;Configuration Variables&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;&lt;br&gt; &lt;em&gt;GitHub Action input&lt;/em&gt; | &lt;em&gt;GitLab CI environment variable&lt;/em&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;additional-debs-file&lt;/code&gt; | &lt;code&gt;ADDITIONAL_DEBS_FILE&lt;/code&gt;&lt;/strong&gt;&lt;br&gt; Relative filepath to file containing additional apt deb packages to install&lt;br&gt; &lt;em&gt;default:&lt;/em&gt; &lt;code&gt;docker/additional-debs.txt&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;additional-files-dir&lt;/code&gt; | &lt;code&gt;ADDITIONAL_FILES_DIR&lt;/code&gt;&lt;/strong&gt;&lt;br&gt; Relative path to directory containing additional files to copy into image&lt;br&gt; &lt;em&gt;default:&lt;/em&gt; &lt;code&gt;docker/additional-files&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;additional-pip-file&lt;/code&gt; | &lt;code&gt;ADDITIONAL_PIP_FILE&lt;/code&gt;&lt;/strong&gt;&lt;br&gt; Relative filepath to file containing additional pip packages to install&lt;br&gt; &lt;em&gt;default:&lt;/em&gt; &lt;code&gt;docker/additional-pip-requirements.txt&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;base-image&lt;/code&gt; | &lt;code&gt;BASE_IMAGE&lt;/code&gt;&lt;/strong&gt;&lt;br&gt; Base image &lt;code&gt;name:tag&lt;/code&gt;&lt;br&gt; &lt;em&gt;required&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;build-context&lt;/code&gt; | &lt;code&gt;BUILD_CONTEXT&lt;/code&gt;&lt;/strong&gt;&lt;br&gt; Build context of Docker build process&lt;br&gt; &lt;em&gt;default:&lt;/em&gt; &lt;code&gt;${{ github.workspace }}&lt;/code&gt; | &lt;code&gt;.&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;command&lt;/code&gt; | &lt;code&gt;COMMAND&lt;/code&gt;&lt;/strong&gt;&lt;br&gt; Launch command of run image&lt;br&gt; &lt;em&gt;required if &lt;code&gt;target=run&lt;/code&gt;&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;custom-script-file&lt;/code&gt; | &lt;code&gt;CUSTOM_SCRIPT_FILE&lt;/code&gt;&lt;/strong&gt;&lt;br&gt; Relative filepath to script containing custom installation commands&lt;br&gt; &lt;em&gt;default:&lt;/em&gt; &lt;code&gt;docker/custom.sh&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;dev-image-name&lt;/code&gt; | &lt;code&gt;DEV_IMAGE_NAME&lt;/code&gt;&lt;/strong&gt;&lt;br&gt; Image name of dev image&lt;br&gt; &lt;em&gt;default:&lt;/em&gt; &lt;code&gt;&amp;lt;IMAGE_NAME&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;dev-image-tag&lt;/code&gt; | &lt;code&gt;DEV_IMAGE_TAG&lt;/code&gt;&lt;/strong&gt;&lt;br&gt; Image tag of dev image&lt;br&gt; &lt;em&gt;default:&lt;/em&gt; &lt;code&gt;&amp;lt;IMAGE_TAG&amp;gt;-dev&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;-&lt;/code&gt; | &lt;code&gt;DOCKER_ROS_GIT_REF&lt;/code&gt;&lt;/strong&gt;&lt;br&gt; Git reference of &lt;em&gt;docker-ros&lt;/em&gt; to run in CI&lt;br&gt; &lt;em&gt;default:&lt;/em&gt; &lt;code&gt;main&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;enable-industrial-ci&lt;/code&gt; | &lt;code&gt;ENABLE_INDUSTRIAL_CI&lt;/code&gt;&lt;/strong&gt;&lt;br&gt; Enable &lt;a href=&#34;https://github.com/ros-industrial/industrial_ci&#34;&gt;&lt;em&gt;industrial_ci&lt;/em&gt;&lt;/a&gt;&lt;br&gt; &lt;em&gt;default:&lt;/em&gt; &lt;code&gt;false&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;enable-push-as-latest&lt;/code&gt; | &lt;code&gt;ENABLE_PUSH_AS_LATEST&lt;/code&gt;&lt;/strong&gt;&lt;br&gt; Push images with tag &lt;code&gt;latest&lt;/code&gt;/&lt;code&gt;latest-dev&lt;/code&gt; in addition to the configured image names&lt;br&gt; &lt;em&gt;default:&lt;/em&gt; &lt;code&gt;false&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;enable-singlearch-push&lt;/code&gt; | &lt;code&gt;ENABLE_SINGLEARCH_PUSH&lt;/code&gt;&lt;/strong&gt;&lt;br&gt; Enable push of single arch images with &lt;code&gt;-amd64&lt;/code&gt;/&lt;code&gt;-arm64&lt;/code&gt; postfix&lt;br&gt; &lt;em&gt;default:&lt;/em&gt; &lt;code&gt;false&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;git-https-password&lt;/code&gt; | &lt;code&gt;GIT_HTTPS_PASSWORD&lt;/code&gt;&lt;/strong&gt;&lt;br&gt; Password for cloning private Git repositories via HTTPS&lt;br&gt; &lt;em&gt;default:&lt;/em&gt; &lt;code&gt;${{ github.token }}&lt;/code&gt; | &lt;code&gt;$CI_JOB_TOKEN&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;git-https-server&lt;/code&gt; | &lt;code&gt;GIT_HTTPS_SERVER&lt;/code&gt;&lt;/strong&gt;&lt;br&gt; Server URL (without protocol) for cloning private Git repositories via HTTPS&lt;br&gt; &lt;em&gt;default:&lt;/em&gt; &lt;code&gt;github.com&lt;/code&gt; | &lt;code&gt;$CI_SERVER_HOST:$CI_SERVER_PORT&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;git-https-user&lt;/code&gt; | &lt;code&gt;GIT_HTTPS_USER&lt;/code&gt;&lt;/strong&gt;&lt;br&gt; Username for cloning private Git repositories via HTTPS&lt;br&gt; &lt;em&gt;default:&lt;/em&gt; &lt;code&gt;${{ github.actor }}&lt;/code&gt; | &lt;code&gt;gitlab-ci-token&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;enable-recursive-additional-debs&lt;/code&gt; | &lt;code&gt;ENABLE_RECURSIVE_ADDITIONAL_DEBS&lt;/code&gt;&lt;/strong&gt;&lt;br&gt; Enable recursive discovery of files named &lt;code&gt;additional-debs-file&lt;/code&gt;&lt;br&gt; &lt;em&gt;default:&lt;/em&gt; &lt;code&gt;false&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;enable-recursive-additional-pip&lt;/code&gt; | &lt;code&gt;ENABLE_RECURSIVE_ADDITIONAL_PIP&lt;/code&gt;&lt;/strong&gt;&lt;br&gt; Enable recursive discovery of files named &lt;code&gt;additional-pip-file&lt;/code&gt;&lt;br&gt; &lt;em&gt;default:&lt;/em&gt; &lt;code&gt;false&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;enable-recursive-custom-script&lt;/code&gt; | &lt;code&gt;ENABLE_RECURSIVE_CUSTOM_SCRIPT&lt;/code&gt;&lt;/strong&gt;&lt;br&gt; Enable recursive discovery of files named &lt;code&gt;custom-script-file&lt;/code&gt;&lt;br&gt; &lt;em&gt;default:&lt;/em&gt; &lt;code&gt;false&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;git-ssh-known-host-keys&lt;/code&gt; | &lt;code&gt;GIT_SSH_KNOWN_HOST_KEYS&lt;/code&gt;&lt;/strong&gt;&lt;br&gt; Known SSH host keys for cloning private Git repositories via SSH (may be obtained using &lt;code&gt;ssh-keyscan&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;git-ssh-private-key&lt;/code&gt; | &lt;code&gt;GIT_SSH_PRIVATE_KEY&lt;/code&gt;&lt;/strong&gt;&lt;br&gt; SSH private key for cloning private Git repositories via SSH&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;image-name&lt;/code&gt; | &lt;code&gt;IMAGE_NAME&lt;/code&gt;&lt;/strong&gt;&lt;br&gt; Image name of run image&lt;br&gt; &lt;em&gt;default:&lt;/em&gt; &lt;code&gt;ghcr.io/${{ github.repository }}&lt;/code&gt; | &lt;code&gt;$CI_REGISTRY_IMAGE&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;image-tag&lt;/code&gt; | &lt;code&gt;IMAGE_TAG&lt;/code&gt;&lt;/strong&gt;&lt;br&gt; Image tag of run image &lt;em&gt;default:&lt;/em&gt; &lt;code&gt;latest&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;platform&lt;/code&gt; | &lt;code&gt;PLATFORM&lt;/code&gt;&lt;/strong&gt;&lt;br&gt; Target platform architecture (comma-separated list)&lt;br&gt; &lt;em&gt;default:&lt;/em&gt; runner architecture | &lt;code&gt;amd64&lt;/code&gt; &lt;em&gt;supported values:&lt;/em&gt; &lt;code&gt;amd64&lt;/code&gt;, &lt;code&gt;arm64&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;registry&lt;/code&gt; | &lt;code&gt;REGISTRY&lt;/code&gt;&lt;/strong&gt;&lt;br&gt; Docker registry to push images to&lt;br&gt; &lt;em&gt;default:&lt;/em&gt; &lt;code&gt;ghcr.io&lt;/code&gt; | &lt;code&gt;$CI_REGISTRY&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;registry-password&lt;/code&gt; | &lt;code&gt;REGISTRY_PASSWORD&lt;/code&gt;&lt;/strong&gt;&lt;br&gt; Docker registry password&lt;br&gt; &lt;em&gt;default:&lt;/em&gt; &lt;code&gt;${{ github.token }}&lt;/code&gt; | &lt;code&gt;$CI_REGISTRY_PASSWORD&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;registry-user&lt;/code&gt; | &lt;code&gt;REGISTRY_USER&lt;/code&gt;&lt;/strong&gt;&lt;br&gt; Docker registry username&lt;br&gt; &lt;em&gt;default:&lt;/em&gt; &lt;code&gt;${{ github.actor }}&lt;/code&gt; | &lt;code&gt;$CI_REGISTRY_USER&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;ros-distro&lt;/code&gt; | &lt;code&gt;ROS_DISTRO&lt;/code&gt;&lt;/strong&gt;&lt;br&gt; ROS Distro&lt;br&gt; &lt;em&gt;required if ROS is not installed in &lt;code&gt;base-image&lt;/code&gt;&lt;/em&gt;&lt;br&gt; &lt;em&gt;supported values:&lt;/em&gt; &lt;code&gt;rolling&lt;/code&gt;, ..., &lt;code&gt;noetic&lt;/code&gt;, ...&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;target&lt;/code&gt; | &lt;code&gt;TARGET&lt;/code&gt;&lt;/strong&gt;&lt;br&gt; Target stage of Dockerfile (comma-separated list)&lt;br&gt; &lt;em&gt;default:&lt;/em&gt; &lt;code&gt;run&lt;/code&gt; &lt;em&gt;supported values:&lt;/em&gt; &lt;code&gt;dev&lt;/code&gt;, &lt;code&gt;run&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>