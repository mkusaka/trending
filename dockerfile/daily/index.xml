<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dockerfile Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-03-17T01:33:03Z</updated>
  <subtitle>Daily Trending of Dockerfile in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>compose-spec/compose-spec</title>
    <updated>2023-03-17T01:33:03Z</updated>
    <id>tag:github.com,2023-03-17:/compose-spec/compose-spec</id>
    <link href="https://github.com/compose-spec/compose-spec" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The Compose specification&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Compose Specification&lt;/h1&gt; &#xA;&lt;p&gt;{:.no_toc}&lt;/p&gt; &#xA;&lt;p&gt;The Compose specification establishes a standard for the definition of multi-container platform-agnostic applications. The specification can be found &lt;a href=&#34;https://raw.githubusercontent.com/compose-spec/compose-spec/master/00-overview.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ToC {:toc}&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Use cases&lt;/h2&gt; &#xA;&lt;p&gt;To provide more context on the Compose specification the following section gives example use cases for each part of the specification.&lt;/p&gt; &#xA;&lt;h3&gt;Development tools&lt;/h3&gt; &#xA;&lt;p&gt;Developers can use a Compose file to specify a container-based application that will run as a set of containers on a local container engine. The Compose implementation in this scenario could offer some specific features (local volume binding, live-reload) to better address development needs. The application definition and Compose model is the same used as that used for other use cases. Platform features expected by the specification (like configs and secrets) can be mocked with local resources.&lt;/p&gt; &#xA;&lt;h3&gt;Kubernetes deployment&lt;/h3&gt; &#xA;&lt;p&gt;Kubernetes container orchestration relies on a set of abstract concepts and APIs to manage networking services, container deployments and their lifecycles. While this offers flexibility to address many operator use cases, it makes simple use cases, like the developer use case, more complicated to express than they need to be. Projects like &lt;a href=&#34;https://github.com/kubernetes/kompose&#34;&gt;Kompose&lt;/a&gt; or &lt;a href=&#34;https://okteto.com/docs/reference/stacks&#34;&gt;Okteto Stacks&lt;/a&gt; show how the simpler Compose model can be translated into Kubernetes API payloads and make the Compose file the source of truth for development and deployment.&lt;/p&gt; &#xA;&lt;h3&gt;Cloud providers&lt;/h3&gt; &#xA;&lt;p&gt;Some cloud providers offer proprietary container hosting solutions based on in-house orchestrators and custom APIs. The Compose specification offers a simple model that can be mapped to these hosting solutions so that users can reuse Compose files that they already have and so that they do not need to learn custom configuration file formats. Platform specific features can be added either using Compose extensions or a dedicated configuration file along side the Compose file.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Development happens on GitHub for the specification. Issues are used to track bugs and actionable items. Longer discussions can happen on the &lt;a href=&#34;https://groups.google.com/forum/#!forum/compose-spec&#34;&gt;mailing list&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The specification and code is licensed under the Apache 2.0 license found in the &lt;a href=&#34;https://raw.githubusercontent.com/compose-spec/compose-spec/master/LICENSE&#34;&gt;LICENSE&lt;/a&gt; file.&lt;/p&gt; &#xA;&lt;h2&gt;Implementations&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/docker/compose&#34;&gt;Docker Compose&lt;/a&gt; is the Reference Implementation of the Compose Specification.&lt;/p&gt; &#xA;&lt;p&gt;Compose Specification is also implemented by:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kubernetes/kompose&#34;&gt;Kompose&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/containerd/nerdctl&#34;&gt;Nerdctl&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://okteto.com/docs/reference/stacks&#34;&gt;Okteto Stacks&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/docker/compose-cli&#34;&gt;Docker Cloud Integrations&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Metadata&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Status&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;Work in progress&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Created&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;2020-01-02&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt;</summary>
  </entry>
</feed>