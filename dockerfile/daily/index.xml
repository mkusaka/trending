<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dockerfile Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-02-05T01:28:27Z</updated>
  <subtitle>Daily Trending of Dockerfile in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>lalizita/multi-streaming</title>
    <updated>2024-02-05T01:28:27Z</updated>
    <id>tag:github.com,2024-02-05:/lalizita/multi-streaming</id>
    <link href="https://github.com/lalizita/multi-streaming" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A broadcast for live streaming&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Servidor Multi Streaming&lt;/h1&gt; &#xA;&lt;p&gt;Um simples servidor para você fazer live e transmitir para mais de uma plataforma ao mesmo tempo ✨ &lt;strong&gt;Esse projeto só funciona com ingests que utilizam o protocolo RTMP&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Esse projeto foi desenvolvido durante a gravação de um vídeo para o meu canal. Acesse o vídeo aqui:  &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Requisitos&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Docker&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://obsproject.com/pt-br/download&#34;&gt;OBS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Conta no &lt;img src=&#34;https://www.youtube.com/&#34; alt=&#34;Youtube&#34;&gt;&lt;/li&gt; &#xA; &lt;li&gt;Conta na &lt;img src=&#34;https://www.twitch.tv/&#34; alt=&#34;Twitch&#34;&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Tecnologias&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Docker compose&lt;/li&gt; &#xA; &lt;li&gt;NGINX&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Protocolos&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;RTMP (Real Time Message Protocol)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Como executar&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Renomeie o arquivo &lt;code&gt;.env.example&lt;/code&gt; para &lt;code&gt;.env&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Vá ao seu canal do youtube e preencha as variáveis do arquivo &lt;code&gt;.env&lt;/code&gt; com a URL e a Chave de transmissão&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;YOUTUBE_STREAMING_URL=rtmp://youtube.com/xxxxxx&#xA;YOUTUBE_STREAMING_KEY=1234567890abcdefg&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Vá ao seu canal da twitch e preencha &lt;code&gt;.env&lt;/code&gt; com a Chave de transmissão e a &lt;img src=&#34;https://help.twitch.tv/s/twitch-ingest-recommendation?language=en_US&#34; alt=&#34;URL de transmissão busque nesse endereço aqui&#34;&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;TWITCH_STREAMING_URL=rtmp://sao03.contribute.live-video.net/app&#xA;TWITCH_STREAMING_KEY=1234567890abcdefg&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Suba o container com a aplucação utilizando docker compose&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker-compose up --build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Abra o &lt;a href=&#34;https://obsproject.com/pt-br/download&#34;&gt;OBS&lt;/a&gt; &amp;gt; Configurações &amp;gt; Transmissão &amp;gt; Servidor&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;rtmp://localhost:1935/live&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Clique em ok e depois clique em &lt;strong&gt;Iniciar transmissão&lt;/strong&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>EnterpriseDB/docker-postgresql</title>
    <updated>2024-02-05T01:28:27Z</updated>
    <id>tag:github.com,2024-02-05:/EnterpriseDB/docker-postgresql</id>
    <link href="https://github.com/EnterpriseDB/docker-postgresql" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Repo for PostgreSQL containers.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;PostgreSQL Container Images by EnterpriseDB&lt;/h1&gt; &#xA;&lt;p&gt;Maintenance scripts to generate Immutable Application Containers for all available PostgreSQL versions (12 to 16) based on Red Hat Universal Base Images (UBI) 8 and 9:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Standard minimal image - amd64/arm64 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;multilang version (all Locales installed) - amd64/arm64&lt;/li&gt; &#xA;   &lt;li&gt;multiarch version (all Locales installed) - ppc64le/s390x&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;with the PostGIS extension - amd64/arm64 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;PostGIS + multilang (all Locales installed) - amd64/arm64&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Images are available for amd64, arm64, ppc64le and s390x architectures. Multilang images (&lt;code&gt;-multilang&lt;/code&gt;) are container images enhanced with the full list of Locales. Available for all UBI based images.&lt;/p&gt; &#xA;&lt;p&gt;These images are customised to work with &lt;a href=&#34;https://www.enterprisedb.com/docs/postgres_for_kubernetes/latest/&#34;&gt;EDB Postgres for Kubernetes by EDB&lt;/a&gt; for Kubernetes and Red Hat Openshift.&lt;/p&gt; &#xA;&lt;p&gt;It is also possible to run them directly with Docker, for PostgreSQL evaluation and testing purposes only.&lt;/p&gt; &#xA;&lt;p&gt;The images include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;PostgreSQL&lt;/li&gt; &#xA; &lt;li&gt;Barman Cloud&lt;/li&gt; &#xA; &lt;li&gt;PostGIS 3 (optional)&lt;/li&gt; &#xA; &lt;li&gt;PGAudit&lt;/li&gt; &#xA; &lt;li&gt;pgRouting (on PostGIS images only)&lt;/li&gt; &#xA; &lt;li&gt;Postgres Failover Slots&lt;/li&gt; &#xA; &lt;li&gt;All language packs for glibc (optional)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;PostgreSQL is distributed by the PGDG under the &lt;a href=&#34;https://www.postgresql.org/about/licence/&#34;&gt;PostgreSQL License&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Barman Cloud is distributed by EnterpriseDB under the &lt;a href=&#34;https://github.com/2ndquadrant-it/barman/raw/master/LICENSE&#34;&gt;GNU GPL 3 License&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;PostGIS is distributed under the &lt;a href=&#34;https://git.osgeo.org/gitea/postgis/postgis/src/branch/master/COPYING&#34;&gt;GNU GPL 2 License&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;PGAudit is distributed under the &lt;a href=&#34;https://github.com/pgaudit/pgaudit/raw/master/LICENSE&#34;&gt;PostgreSQL License&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;pgRouting is distributed under the &lt;a href=&#34;https://github.com/pgRouting/pgrouting/raw/main/LICENSE&#34;&gt;GNU GPL 2 License&lt;/a&gt;, with the same Boost extensions available under &lt;a href=&#34;https://docs.pgrouting.org/latest/en/pgRouting-introduction.html#licensing&#34;&gt;Boost Software License&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Postgres Failover Slots is distributed by EnterpriseDB under the &lt;a href=&#34;https://github.com/EnterpriseDB/pg_failover_slots/raw/master/LICENSE&#34;&gt;PostgreSQL License&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The Docker entry point is based on &lt;a href=&#34;https://github.com/docker-library/postgres&#34;&gt;Docker Postgres&lt;/a&gt; distributed by the PostgreSQL Docker Community under MIT license.&lt;/p&gt; &#xA;&lt;h1&gt;Where to get them&lt;/h1&gt; &#xA;&lt;p&gt;Images are available via &lt;a href=&#34;https://github.com/EnterpriseDB/docker-postgresql/pkgs/container/postgresql&#34;&gt;GitHub Container Registry&lt;/a&gt; and &lt;a href=&#34;https://quay.io/repository/enterprisedb/postgresql&#34;&gt;Quay.io&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;How to pull the image&lt;/h1&gt; &#xA;&lt;p&gt;The image can be pulled with the &lt;code&gt;docker pull&lt;/code&gt; command, following the instructions you find in the GitHub Container Registy (GHCR) or Quay.io.&lt;/p&gt; &#xA;&lt;p&gt;For example you can pull the latest minor version of the latest major version of PostgreSQL based on RedHat UBI from GHCR with the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;docker pull ghcr.io/enterprisedb/postgresql&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: replace &lt;code&gt;ghcr.io&lt;/code&gt; with &lt;code&gt;quay.io&lt;/code&gt; to download from Quay.io.&lt;/p&gt; &#xA;&lt;p&gt;If you want to use the latest minor version of a particular major version of PostgreSQL, for example 15, on UBI you can type:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;docker pull ghcr.io/enterprisedb/postgresql:15&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;IMPORTANT:&lt;/strong&gt; in the examples below we assume that the latest minor of the latest major version is used.&lt;/p&gt; &#xA;&lt;h1&gt;How to use this image with Docker&lt;/h1&gt; &#xA;&lt;h2&gt;Start a PostgreSQL instance in background&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ docker run -d \&#xA;   --name some-postgres \&#xA;   -e POSTGRES_PASSWORD=mysecretpassword \&#xA;   ghcr.io/enterprisedb/postgresql&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The default &lt;code&gt;postgres&lt;/code&gt; user and database are created in the entrypoint with &lt;code&gt;initdb&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;The postgres database is a default database meant for use by users, utilities and third party applications.&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;http://www.postgresql.org/docs/current/interactive/app-initdb.html&#34;&gt;postgresql.org/docs&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Disposable environment to run SQL commands via psql&lt;/h2&gt; &#xA;&lt;p&gt;You can spin up a disposable PostgreSQL database and run queries using the psql command line client utility with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ docker run -it --rm \&#xA;   --network some-network \&#xA;   ghcr.io/enterprisedb/postgresql \&#xA;   psql -h some-postgres -U postgres&#xA;psql (15.1)&#xA;Type &#34;help&#34; for help.&#xA;&#xA;postgres=# SELECT 1;&#xA; ?column?&#xA;----------&#xA;        1&#xA;(1 row)&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/EnterpriseDB/docker-postgresql/workflows/Continuous%20Integration/badge.svg?branch=master&#34; alt=&#34;Continuous Integration&#34;&gt; &lt;img src=&#34;https://github.com/EnterpriseDB/docker-postgresql/workflows/Continuous%20Delivery/badge.svg?branch=master&#34; alt=&#34;Continuous Delivery&#34;&gt; &lt;img src=&#34;https://github.com/EnterpriseDB/docker-postgresql/workflows/Automatic%20Updates/badge.svg?branch=master&#34; alt=&#34;Automatic Updates&#34;&gt;&lt;/p&gt;</summary>
  </entry>
</feed>