<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dockerfile Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-08-16T01:25:43Z</updated>
  <subtitle>Daily Trending of Dockerfile in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>shipping-docker/php-app</title>
    <updated>2023-08-16T01:25:43Z</updated>
    <id>tag:github.com,2023-08-16:/shipping-docker/php-app</id>
    <link href="https://github.com/shipping-docker/php-app" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A containerized Laravel application&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Containerized PHP Application&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://shippingdocker.com&#34; title=&#34;learn how to use docker in dev and production&#34;&gt;&lt;img src=&#34;https://cloud.githubusercontent.com/assets/467411/18037593/12321512-6d4e-11e6-8514-e8454f4fd286.jpg&#34; alt=&#34;Shipping Docker video series&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;What is this?&lt;/h2&gt; &#xA;&lt;p&gt;This is an example of how you can quickly get up and running with Docker to develop a PHP application. This is a companion to the üê≥ &lt;a href=&#34;https://shippingdocker.com/&#34;&gt;Shipping Docker&lt;/a&gt; video series.&lt;/p&gt; &#xA;&lt;h2&gt;Teach me how to use it!&lt;/h2&gt; &#xA;&lt;p&gt;I have a mini-course that uses this example to show you how to get up and running in Docker for development!&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Sign up here to get an email with a link to the mini course to see how this works!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://shippingdocker.com/#signup&#34; title=&#34;see how to use Docker in development&#34;&gt;&lt;img src=&#34;https://cloud.githubusercontent.com/assets/467411/18333423/8ef22c66-7534-11e6-950d-850be40d9af0.png&#34; alt=&#34;Shipping Docker mini-course&#34; width=&#34;600&#34; height=&#34;200&#34; style=&#34;width: 600px; height: 200px;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;How to use&lt;/h2&gt; &#xA;&lt;h3&gt;1. Get the files and spin up containers&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Get shipping-docker files&#xA;git clone https://github.com/shipping-docker/php-app.git&#xA;cd php-app&#xA;&#xA;# Start the app, run containers&#xA;#   in the background&#xA;# This will download and build the images&#xA;#   the first time you run this&#xA;docker-compose up -d&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;At this point, we&#39;ve created containers and have them up and running. However, we didn&#39;t create a Laravel application to serve yet. We waited because we wanted a PHP image to get created so we can re-use it and run &lt;code&gt;composer&lt;/code&gt; commands.&lt;/p&gt; &#xA;&lt;h3&gt;2. Create a new Laravel application&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# From directory &#34;php-app&#34;&#xA;# Create a Laravel application&#xA;docker run -it --rm \&#xA;    -v $(pwd):/opt \&#xA;    -w /opt \&#xA;    --network=phpapp_appnet \&#xA;    shippingdocker/php \&#xA;    composer create-project laravel/laravel application&#xA;&#xA;docker run -it --rm \&#xA;    -v $(pwd)/application:/opt \&#xA;    -w /opt \&#xA;    --network=phpapp_appnet \&#xA;    shippingdocker/php \&#xA;    composer require predis/predis&#xA;&#xA;# Restart required to ensure&#xA;# app files shares correctly&#xA;docker-compose restart&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Edit the &lt;code&gt;application/.env&lt;/code&gt; file to have correct settings for our containers. Adjust the following as necessary:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;DB_CONNECTION=mysql&#xA;DB_HOST=db&#xA;DB_PORT=3306&#xA;DB_DATABASE=homestead&#xA;DB_USERNAME=homestead&#xA;DB_PASSWORD=secret&#xA;&#xA;BROADCAST_DRIVER=log&#xA;CACHE_DRIVER=redis&#xA;SESSION_DRIVER=redis&#xA;QUEUE_DRIVER=sync&#xA;&#xA;REDIS_HOST=redis&#xA;REDIS_PASSWORD=null&#xA;REDIS_PORT=6379&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;If you already have an application, you can move it to the &lt;code&gt;application&lt;/code&gt; directory here. Else, you can adjust the shared volume file paths within the &lt;code&gt;docker-compose.yml&lt;/code&gt; file.&lt;/p&gt; &#xA; &lt;p&gt;If you edit the &lt;code&gt;docker-compose.yml&lt;/code&gt; file, run &lt;code&gt;docker-compose down; docker-compose up -d&lt;/code&gt; to suck in the new Volume settings.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: If you&#39;re not running Docker Mac/Windows (which run Docker in a small virtualized layer), you may need to set permissions on the shared directories that Laravel needs to write to. The following will let Laravel write the storage and bootstrap directories:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# From directory php-app&#xA;chmod -R o+rw application/bootstrap application/storage&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;3. (Optionally) Add Auth Scaffolding:&lt;/h3&gt; &#xA;&lt;p&gt;If you&#39;d like, we can add Laravel&#39;s Auth scaffolding as well. To do that, we need to run some Artisan commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Scaffold authentication views/routes&#xA;docker run -it --rm \&#xA;    -v $(pwd)/application:/opt \&#xA;    -w /opt \&#xA;    --network=phpapp_appnet \&#xA;    shippingdocker/php \&#xA;    php artisan make:auth&#xA;&#xA;# Run migrations for auth scaffolding&#xA;docker run -it --rm \&#xA;    -v $(pwd)/application:/opt \&#xA;    -w /opt \&#xA;    --network=phpapp_appnet \&#xA;    shippingdocker/php \&#xA;    php artisan migrate&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now we can start using our application! Head to &lt;code&gt;http://localhost/register&lt;/code&gt; to see your Laravel application with auth scaffolding in place.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://cloud.githubusercontent.com/assets/467411/18038743/6ac84008-6d61-11e6-8aa6-30a776b59aaa.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;</summary>
  </entry>
</feed>