<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dockerfile Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-06T01:38:51Z</updated>
  <subtitle>Daily Trending of Dockerfile in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>izhangzhihao/Real-time-Data-Warehouse</title>
    <updated>2022-08-06T01:38:51Z</updated>
    <id>tag:github.com,2022-08-06:/izhangzhihao/Real-time-Data-Warehouse</id>
    <link href="https://github.com/izhangzhihao/Real-time-Data-Warehouse" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Real-time Data Warehouse with Apache Flink &amp; Apache Kafka &amp; Apache Hudi&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Real-time Data Warehouse&lt;/h2&gt; &#xA;&lt;p&gt;Real-time Data Warehouse using: &lt;a href=&#34;https://github.com/izhangzhihao/Real-time-Data-Warehouse/tree/kafka&#34;&gt;Flink &amp;amp; Kafka&lt;/a&gt; | &lt;a href=&#34;https://github.com/izhangzhihao/Real-time-Data-Warehouse/tree/hudi&#34;&gt;Flink &amp;amp; Hudi&lt;/a&gt; | &lt;a href=&#34;https://github.com/izhangzhihao/Real-time-Data-Warehouse/tree/spark&#34;&gt;Spark &amp;amp; Delta&lt;/a&gt; | &lt;a href=&#34;https://github.com/izhangzhihao/Real-time-Data-Warehouse/tree/e-commerce&#34;&gt;Flink &amp;amp; Hudi &amp;amp; E-commerce&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;700&#34; alt=&#34;demo_overview&#34; src=&#34;https://user-images.githubusercontent.com/12044174/125452701-2717d438-c2e5-43f9-94c9-aaa804774699.png&#34;&gt; &lt;/p&gt; &#xA;&lt;h4&gt;Getting the setup up and running&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;docker compose build&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;docker compose up -d&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Check everything really up and running&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;docker compose ps&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;You should be able to access the Flink Web UI (&lt;a href=&#34;http://localhost:8081&#34;&gt;http://localhost:8081&lt;/a&gt;), as well as Kibana (&lt;a href=&#34;http://localhost:5601&#34;&gt;http://localhost:5601&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;h2&gt;Postgres&lt;/h2&gt; &#xA;&lt;p&gt;Start the Postgres client to have a look at the source tables and run some DML statements later:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker compose exec postgres env PGOPTIONS=&#34;--search_path=claims&#34; bash -c &#39;psql -U $POSTGRES_USER postgres&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;What tables are we dealing with?&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;SELECT * FROM information_schema.tables WHERE table_schema = &#39;claims&#39;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Debezium&lt;/h2&gt; &#xA;&lt;p&gt;Start the &lt;a href=&#34;https://debezium.io/documentation/reference/1.2/connectors/postgresql.html&#34;&gt;Debezium Postgres connector&lt;/a&gt; using the configuration provided in the &lt;code&gt;register-postgres.json&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -i -X POST -H &#34;Accept:application/json&#34; -H  &#34;Content-Type:application/json&#34; http://localhost:8083/connectors/ -d @register-postgres.json&#xA;curl -i -X POST -H &#34;Accept:application/json&#34; -H  &#34;Content-Type:application/json&#34; http://localhost:8083/connectors/ -d @register-postgres-members.json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Check that the connector is running:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl http://localhost:8083/connectors/claims-connector/status # | jq&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The first time it connects to a Postgres server, Debezium takes a &lt;a href=&#34;https://debezium.io/documentation/reference/1.2/connectors/postgresql.html#postgresql-snapshots&#34;&gt;consistent snapshot&lt;/a&gt; of all database schemas; so, you should see that the pre-existing records in the &lt;code&gt;accident_claims&lt;/code&gt; table have already been pushed into your Kafka topic:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker compose exec kafka /kafka/bin/kafka-console-consumer.sh \&#xA;    --bootstrap-server kafka:9092 \&#xA;    --from-beginning \&#xA;    --property print.key=true \&#xA;    --topic pg_claims.claims.accident_claims&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;ℹ️ Have a quick read about the structure of these events in the &lt;a href=&#34;https://debezium.io/documentation/reference/1.2/connectors/postgresql.html#postgresql-change-events-value&#34;&gt;Debezium documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Is it working?&lt;/h3&gt; &#xA;&lt;p&gt;In the tab you used to start the Postgres client, you can now run some DML statements to see that the changes are propagated all the way to your Kafka topic:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;INSERT INTO accident_claims (claim_total, claim_total_receipt, claim_currency, member_id, accident_date, accident_type,accident_detail, claim_date, claim_status) VALUES (500, &#39;PharetraMagnaVestibulum.tiff&#39;, &#39;AUD&#39;, 321, &#39;2020-08-01 06:43:03&#39;, &#39;Collision&#39;, &#39;Blue Ringed Octopus&#39;,&#39;2020-08-10 09:39:31&#39;, &#39;INITIAL&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;UPDATE accident_claims&#xA;SET claim_total_receipt = &#39;CorrectReceipt.pdf&#39;&#xA;WHERE claim_id = 1001;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;DELETE&#xA;FROM accident_claims&#xA;WHERE claim_id = 1001;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In the output of your Kafka console consumer, you should now see three consecutive events with &lt;code&gt;op&lt;/code&gt; values equal to &lt;code&gt;c&lt;/code&gt; (an &lt;em&gt;insert&lt;/em&gt; event), &lt;code&gt;u&lt;/code&gt; (an &lt;em&gt;update&lt;/em&gt; event) and &lt;code&gt;d&lt;/code&gt; (a &lt;em&gt;delete&lt;/em&gt; event).&lt;/p&gt; &#xA;&lt;h2&gt;Flink connectors&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://ci.apache.org/projects/flink/flink-docs-release-1.13/docs/connectors/table/overview/&#34;&gt;https://ci.apache.org/projects/flink/flink-docs-release-1.13/docs/connectors/table/overview/&lt;/a&gt; &lt;a href=&#34;https://flink-packages.org/categories/connectors&#34;&gt;https://flink-packages.org/categories/connectors&lt;/a&gt; &lt;a href=&#34;https://github.com/knaufk/flink-faker/&#34;&gt;https://github.com/knaufk/flink-faker/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Datasource ingestion&lt;/h2&gt; &#xA;&lt;p&gt;Start the Flink SQL Client:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker compose exec sql-client ./sql-client.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;OR&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker compose exec sql-client ./sql-client-submit.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;test&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;CREATE TABLE t1(&#xA;  uuid VARCHAR(20), -- you can use &#39;PRIMARY KEY NOT ENFORCED&#39; syntax to mark the field as record key&#xA;  name VARCHAR(10),&#xA;  age INT,&#xA;  ts TIMESTAMP(3),&#xA;  `partition` VARCHAR(20)&#xA;)&#xA;PARTITIONED BY (`partition`)&#xA;WITH (&#xA;  &#39;connector&#39; = &#39;hudi&#39;,&#xA;  &#39;path&#39; = &#39;/data/t1&#39;,&#xA;  &#39;write.tasks&#39; = &#39;1&#39;, -- default is 4 ,required more resource&#xA;  &#39;compaction.tasks&#39; = &#39;1&#39;, -- default is 10 ,required more resource&#xA;  &#39;table.type&#39; = &#39;COPY_ON_WRITE&#39;, -- this creates a MERGE_ON_READ table, by default is COPY_ON_WRITE&#xA;  &#39;read.tasks&#39; = &#39;1&#39;, -- default is 4 ,required more resource&#xA;  &#39;read.streaming.enabled&#39; = &#39;true&#39;,  -- this option enable the streaming read&#xA;  &#39;read.streaming.start-commit&#39; = &#39;20210712134429&#39;, -- specifies the start commit instant time&#xA;  &#39;read.streaming.check-interval&#39; = &#39;4&#39; -- specifies the check interval for finding new source commits, default 60s.&#xA;);&#xA;&#xA;-- insert data using values&#xA;INSERT INTO t1 VALUES&#xA;  (&#39;id1&#39;,&#39;Danny&#39;,23,TIMESTAMP &#39;1970-01-01 00:00:01&#39;,&#39;par1&#39;),&#xA;  (&#39;id2&#39;,&#39;Stephen&#39;,33,TIMESTAMP &#39;1970-01-01 00:00:02&#39;,&#39;par1&#39;),&#xA;  (&#39;id3&#39;,&#39;Julian&#39;,53,TIMESTAMP &#39;1970-01-01 00:00:03&#39;,&#39;par2&#39;),&#xA;  (&#39;id4&#39;,&#39;Fabian&#39;,31,TIMESTAMP &#39;1970-01-01 00:00:04&#39;,&#39;par2&#39;),&#xA;  (&#39;id5&#39;,&#39;Sophia&#39;,18,TIMESTAMP &#39;1970-01-01 00:00:05&#39;,&#39;par3&#39;),&#xA;  (&#39;id6&#39;,&#39;Emma&#39;,20,TIMESTAMP &#39;1970-01-01 00:00:06&#39;,&#39;par3&#39;),&#xA;  (&#39;id7&#39;,&#39;Bob&#39;,44,TIMESTAMP &#39;1970-01-01 00:00:07&#39;,&#39;par4&#39;),&#xA;  (&#39;id8&#39;,&#39;Han&#39;,56,TIMESTAMP &#39;1970-01-01 00:00:08&#39;,&#39;par4&#39;);&#xA;&#xA;SELECT * FROM t1;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Register a &lt;a href=&#34;https://ci.apache.org/projects/flink/flink-docs-stable/dev/table/connectors/jdbc.html#postgres-database-as-a-catalog&#34;&gt;Postgres catalog&lt;/a&gt; , so you can access the metadata of the external tables over JDBC:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;CREATE CATALOG datasource WITH (&#xA;    &#39;type&#39;=&#39;jdbc&#39;,&#xA;    &#39;property-version&#39;=&#39;1&#39;,&#xA;    &#39;base-url&#39;=&#39;jdbc:postgresql://postgres:5432/&#39;,&#xA;    &#39;default-database&#39;=&#39;postgres&#39;,&#xA;    &#39;username&#39;=&#39;postgres&#39;,&#xA;    &#39;password&#39;=&#39;postgres&#39;&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;CREATE DATABASE IF NOT EXISTS datasource;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;CREATE TABLE datasource.accident_claims WITH (&#xA;                                            &#39;connector&#39; = &#39;kafka&#39;,&#xA;                                            &#39;topic&#39; = &#39;pg_claims.claims.accident_claims&#39;,&#xA;                                            &#39;properties.bootstrap.servers&#39; = &#39;kafka:9092&#39;,&#xA;                                            &#39;properties.group.id&#39; = &#39;accident_claims-consumer-group&#39;,&#xA;                                            &#39;format&#39; = &#39;debezium-json&#39;,&#xA;                                            &#39;scan.startup.mode&#39; = &#39;earliest-offset&#39;&#xA;                                            ) LIKE datasource.postgres.`claims.accident_claims` (EXCLUDING ALL);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;OR generate data from datagen connector:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;CREATE TABLE datasource.accident_claims(&#xA;    claim_id            BIGINT,&#xA;    claim_total         DOUBLE,&#xA;    claim_total_receipt VARCHAR(50),&#xA;    claim_currency      VARCHAR(3),&#xA;    member_id           INT,&#xA;    accident_date       DATE,&#xA;    accident_type       VARCHAR(20),&#xA;    accident_detail     VARCHAR(20),&#xA;    claim_date          DATE,&#xA;    claim_status        VARCHAR(10),&#xA;    ts_created          TIMESTAMP(3),&#xA;    ts_updated          TIMESTAMP(3)&#xA;                                          ) WITH (&#xA;                                            &#39;connector&#39; = &#39;datagen&#39;,&#xA;                                            &#39;rows-per-second&#39; = &#39;100&#39;&#xA;                                            );&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and &lt;code&gt;members&lt;/code&gt; table:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;CREATE TABLE datasource.members WITH (&#xA;                                    &#39;connector&#39; = &#39;kafka&#39;,&#xA;                                    &#39;topic&#39; = &#39;pg_claims.claims.members&#39;,&#xA;                                    &#39;properties.bootstrap.servers&#39; = &#39;kafka:9092&#39;,&#xA;                                    &#39;properties.group.id&#39; = &#39;members-consumer-group&#39;,&#xA;                                    &#39;format&#39; = &#39;debezium-json&#39;,&#xA;                                    &#39;scan.startup.mode&#39; = &#39;earliest-offset&#39;&#xA;                                    ) LIKE datasource.postgres.`claims.members` ( EXCLUDING OPTIONS);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;OR generate data from datagen connector:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;CREATE TABLE datasource.members(&#xA;    id                BIGINT,&#xA;    first_name        VARCHAR(50),&#xA;    last_name         VARCHAR(50),&#xA;    address           VARCHAR(50),&#xA;    address_city      VARCHAR(10),&#xA;    address_country   VARCHAR(10),&#xA;    insurance_company VARCHAR(25),&#xA;    insurance_number  VARCHAR(50),&#xA;    ts_created        TIMESTAMP(3),&#xA;    ts_updated        TIMESTAMP(3)&#xA;                                    ) WITH (&#xA;                                            &#39;connector&#39; = &#39;datagen&#39;,&#xA;                                            &#39;rows-per-second&#39; = &#39;100&#39;&#xA;                                            );&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Check data:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;SELECT * FROM datasource.accident_claims;&#xA;SELECT * FROM datasource.members;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;DWD&lt;/h2&gt; &#xA;&lt;p&gt;Create a database in DWD layer:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;CREATE DATABASE IF NOT EXISTS dwd;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;CREATE TABLE dwd.accident_claims&#xA;(&#xA;    claim_id            BIGINT,&#xA;    claim_total         DOUBLE,&#xA;    claim_total_receipt VARCHAR(50),&#xA;    claim_currency      VARCHAR(3),&#xA;    member_id           INT,&#xA;    accident_date       DATE,&#xA;    accident_type       VARCHAR(20),&#xA;    accident_detail     VARCHAR(20),&#xA;    claim_date          DATE,&#xA;    claim_status        VARCHAR(10),&#xA;    ts_created          TIMESTAMP(3),&#xA;    ts_updated          TIMESTAMP(3),&#xA;    ds                  DATE,&#xA;    PRIMARY KEY (claim_id) NOT ENFORCED&#xA;) PARTITIONED BY (ds) WITH (&#xA;  &#39;connector&#39;=&#39;hudi&#39;,&#xA;  &#39;path&#39; = &#39;/data/dwd/accident_claims&#39;,&#xA;  &#39;table.type&#39; = &#39;MERGE_ON_READ&#39;,&#xA;  &#39;read.streaming.enabled&#39; = &#39;true&#39;,&#xA;  &#39;write.batch.size&#39; = &#39;1&#39;,&#xA;  &#39;write.tasks&#39; = &#39;1&#39;,&#xA;  &#39;compaction.tasks&#39; = &#39;1&#39;,&#xA;  &#39;compaction.delta_seconds&#39; = &#39;60&#39;,&#xA;  &#39;write.precombine.field&#39; = &#39;ts_updated&#39;,&#xA;  &#39;read.tasks&#39; = &#39;1&#39;,&#xA;  &#39;read.streaming.check-interval&#39; = &#39;5&#39;,&#xA;  &#39;read.streaming.start-commit&#39; = &#39;20210712134429&#39;,&#xA;  &#39;index.bootstrap.enabled&#39; = &#39;true&#39;&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;CREATE TABLE dwd.members&#xA;(&#xA;    id                BIGINT,&#xA;    first_name        VARCHAR(50),&#xA;    last_name         VARCHAR(50),&#xA;    address           VARCHAR(50),&#xA;    address_city      VARCHAR(10),&#xA;    address_country   VARCHAR(10),&#xA;    insurance_company VARCHAR(25),&#xA;    insurance_number  VARCHAR(50),&#xA;    ts_created        TIMESTAMP(3),&#xA;    ts_updated        TIMESTAMP(3),&#xA;    ds                DATE,&#xA;    PRIMARY KEY (id) NOT ENFORCED&#xA;) PARTITIONED BY (ds) WITH (&#xA;      &#39;connector&#39;=&#39;hudi&#39;,&#xA;      &#39;path&#39;=&#39;/data/dwd/members&#39;,&#xA;      &#39;table.type&#39; = &#39;MERGE_ON_READ&#39;,&#xA;      &#39;read.streaming.enabled&#39; = &#39;true&#39;,&#xA;      &#39;write.batch.size&#39; = &#39;1&#39;,&#xA;      &#39;write.tasks&#39; = &#39;1&#39;,&#xA;      &#39;compaction.tasks&#39; = &#39;1&#39;,&#xA;      &#39;compaction.delta_seconds&#39; = &#39;60&#39;,&#xA;      &#39;write.precombine.field&#39; = &#39;ts_updated&#39;,&#xA;      &#39;read.tasks&#39; = &#39;1&#39;,&#xA;      &#39;read.streaming.check-interval&#39; = &#39;5&#39;,&#xA;      &#39;read.streaming.start-commit&#39; = &#39;20210712134429&#39;,&#xA;      &#39;index.bootstrap.enabled&#39; = &#39;true&#39;&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and submit a continuous query to the Flink cluster that will write the data from datasource into dwd table(ES):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;INSERT INTO dwd.accident_claims&#xA;SELECT claim_id,&#xA;       claim_total,&#xA;       claim_total_receipt,&#xA;       claim_currency,&#xA;       member_id,&#xA;       CAST (accident_date as DATE),&#xA;       accident_type,&#xA;       accident_detail,&#xA;       CAST (claim_date as DATE),&#xA;       claim_status,&#xA;       CAST (ts_created as TIMESTAMP),&#xA;       CAST (ts_updated as TIMESTAMP),&#xA;       claim_date&#xA;       --CAST (SUBSTRING(claim_date, 0, 9) as DATE)&#xA;FROM datasource.accident_claims;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;INSERT INTO dwd.members&#xA;SELECT id,&#xA;       first_name,&#xA;       last_name,&#xA;       address,&#xA;       address_city,&#xA;       address_country,&#xA;       insurance_company,&#xA;       insurance_number,&#xA;       CAST (ts_created as TIMESTAMP),&#xA;       CAST (ts_updated as TIMESTAMP),&#xA;       ts_created&#xA;       --CAST (SUBSTRING(ts_created, 0, 9) as DATE)&#xA;FROM datasource.members;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Check data:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;SELECT * FROM dwd.accident_claims;&#xA;SELECT * FROM dwd.members;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;DWB&lt;/h2&gt; &#xA;&lt;p&gt;Create a database in DWB layer:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;CREATE DATABASE IF NOT EXISTS dwb;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;CREATE TABLE dwb.accident_claims&#xA;(&#xA;    claim_id            BIGINT,&#xA;    claim_total         DOUBLE,&#xA;    claim_total_receipt VARCHAR(50),&#xA;    claim_currency      VARCHAR(3),&#xA;    member_id           INT,&#xA;    accident_date       DATE,&#xA;    accident_type       VARCHAR(20),&#xA;    accident_detail     VARCHAR(20),&#xA;    claim_date          DATE,&#xA;    claim_status        VARCHAR(10),&#xA;    ts_created          TIMESTAMP(3),&#xA;    ts_updated          TIMESTAMP(3),&#xA;    ds                  DATE,&#xA;    PRIMARY KEY (claim_id) NOT ENFORCED&#xA;) PARTITIONED BY (ds) WITH (&#xA;  &#39;connector&#39;=&#39;hudi&#39;,&#xA;  &#39;path&#39; = &#39;/data/dwb/accident_claims&#39;,&#xA;  &#39;table.type&#39; = &#39;MERGE_ON_READ&#39;,&#xA;  &#39;read.streaming.enabled&#39; = &#39;true&#39;,&#xA;  &#39;write.batch.size&#39; = &#39;1&#39;,&#xA;  &#39;write.tasks&#39; = &#39;1&#39;,&#xA;  &#39;compaction.tasks&#39; = &#39;1&#39;,&#xA;  &#39;compaction.delta_seconds&#39; = &#39;60&#39;,&#xA;  &#39;write.precombine.field&#39; = &#39;ts_updated&#39;,&#xA;  &#39;read.tasks&#39; = &#39;1&#39;,&#xA;  &#39;read.streaming.check-interval&#39; = &#39;5&#39;,&#xA;  &#39;read.streaming.start-commit&#39; = &#39;20210712134429&#39;,&#xA;  &#39;index.bootstrap.enabled&#39; = &#39;true&#39;&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;CREATE TABLE dwb.members&#xA;(&#xA;    id                BIGINT,&#xA;    first_name        VARCHAR(50),&#xA;    last_name         VARCHAR(50),&#xA;    address           VARCHAR(50),&#xA;    address_city      VARCHAR(10),&#xA;    address_country   VARCHAR(10),&#xA;    insurance_company VARCHAR(25),&#xA;    insurance_number  VARCHAR(50),&#xA;    ts_created        TIMESTAMP(3),&#xA;    ts_updated        TIMESTAMP(3),&#xA;    ds                DATE,&#xA;    PRIMARY KEY (id) NOT ENFORCED&#xA;) PARTITIONED BY (ds) WITH (&#xA;      &#39;connector&#39;=&#39;hudi&#39;,&#xA;      &#39;path&#39;=&#39;/data/dwb/members&#39;,&#xA;      &#39;table.type&#39; = &#39;MERGE_ON_READ&#39;,&#xA;      &#39;read.streaming.enabled&#39; = &#39;true&#39;,&#xA;      &#39;write.batch.size&#39; = &#39;1&#39;,&#xA;      &#39;write.tasks&#39; = &#39;1&#39;,&#xA;      &#39;compaction.tasks&#39; = &#39;1&#39;,&#xA;      &#39;compaction.delta_seconds&#39; = &#39;60&#39;,&#xA;      &#39;write.precombine.field&#39; = &#39;ts_updated&#39;,&#xA;      &#39;read.tasks&#39; = &#39;1&#39;,&#xA;      &#39;read.streaming.check-interval&#39; = &#39;5&#39;,&#xA;      &#39;read.streaming.start-commit&#39; = &#39;20210712134429&#39;,&#xA;      &#39;index.bootstrap.enabled&#39; = &#39;true&#39;&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;INSERT INTO dwb.accident_claims&#xA;SELECT claim_id,&#xA;       claim_total,&#xA;       claim_total_receipt,&#xA;       claim_currency,&#xA;       member_id,&#xA;       accident_date,&#xA;       accident_type,&#xA;       accident_detail,&#xA;       claim_date,&#xA;       claim_status,&#xA;       ts_created,&#xA;       ts_updated,&#xA;       ds&#xA;FROM dwd.accident_claims;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;INSERT INTO dwb.members&#xA;SELECT id,&#xA;       first_name,&#xA;       last_name,&#xA;       address,&#xA;       address_city,&#xA;       address_country,&#xA;       insurance_company,&#xA;       insurance_number,&#xA;       ts_created,&#xA;       ts_updated,&#xA;       ds&#xA;FROM dwd.members;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Check data:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;SELECT * FROM dwb.accident_claims;&#xA;SELECT * FROM dwb.members;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;DWS&lt;/h2&gt; &#xA;&lt;p&gt;Create a database in DWS layer:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;CREATE DATABASE IF NOT EXISTS dws;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;CREATE TABLE dws.insurance_costs&#xA;(&#xA;    es_key            STRING PRIMARY KEY NOT ENFORCED,&#xA;    insurance_company STRING,&#xA;    accident_detail   STRING,&#xA;    accident_agg_cost DOUBLE&#xA;) WITH (&#xA;      &#39;connector&#39; = &#39;elasticsearch-7&#39;, &#39;hosts&#39; = &#39;http://elasticsearch:9200&#39;, &#39;index&#39; = &#39;agg_insurance_costs&#39;&#xA;      );&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and submit a continuous query to the Flink cluster that will write the aggregated insurance costs per &lt;code&gt;insurance_company&lt;/code&gt;, bucketed by &lt;code&gt;accident_detail&lt;/code&gt; (or, what animals are causing the most harm in terms of costs):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;INSERT INTO dws.insurance_costs&#xA;SELECT UPPER(SUBSTRING(m.insurance_company, 0, 4) || &#39;_&#39; || SUBSTRING(ac.accident_detail, 0, 4)) es_key,&#xA;       m.insurance_company,&#xA;       ac.accident_detail,&#xA;       SUM(ac.claim_total) member_total&#xA;FROM dwb.accident_claims ac&#xA;         JOIN dwb.members m&#xA;              ON ac.member_id = m.id&#xA;WHERE ac.claim_status &amp;lt;&amp;gt; &#39;DENIED&#39;&#xA;GROUP BY m.insurance_company, ac.accident_detail;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Finally, create a simple &lt;a href=&#34;https://www.elastic.co/guide/en/kibana/current/dashboard-create-new-dashboard.html&#34;&gt;dashboard in Kibana&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;References&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.google.com/document/d/1TTP-GCC8wSsibJaSUyFZ_5NBAHYEB1FVmPpP7RgDGBA/edit&#34;&gt;Flink SQL DDL&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ci.apache.org/projects/flink/flink-docs-release-1.13/docs/dev/table/sqlclient/&#34;&gt;Flink SQL Client&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ververica/flink-sql-cookbook&#34;&gt;Flink SQL Cookbook&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://noti.st/morsapaes/liQzgs/change-data-capture-with-flink-sql-and-debezium&#34;&gt;Change Data Capture with Flink SQL and Debezium&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>omniedgeio/omniedge</title>
    <updated>2022-08-06T01:38:51Z</updated>
    <id>tag:github.com,2022-08-06:/omniedgeio/omniedge</id>
    <link href="https://github.com/omniedgeio/omniedge" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Bringing intranet on the internet with Zero-Config Mesh VPNs.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;/p&gt;&#xA;&lt;h1 align=&#34;center&#34;&gt; OmniEdge &lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt;What happens in intranet, stays in intranet.&lt;/p&gt; &#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://omniedge.io&#34;&gt; &lt;img alt=&#34;Website&#34; src=&#34;https://img.shields.io/website?label=omniedge.io&amp;amp;url=https%3A%2F%2Fomniedge.io&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/omniedgeio/omniedge&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/license/omniedgeio/omniedge&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/omniedgeio/omniedge&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/downloads/omniedgeio/app-release/total&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://twitter.com/intent/follow?screen_name=omniedgeio&#34;&gt; &lt;img src=&#34;https://img.shields.io/twitter/follow/omniedgeio?label=follows&amp;amp;style=social&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/omniedgeio/omniedge-cli&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/languages/top/omniedgeio/omniedge-cli&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/omniedgeio/omniedge-iOS&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/languages/top/omniedgeio/omniedge-iOS&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/omniedgeio/omniedge-macOS&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/languages/top/omniedgeio/omniedge-macOS&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/omniedgeio/omniedge-windows&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/languages/top/omniedgeio/omniedge-windows&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/omniedgeio/omniedge-android&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/languages/top/omniedgeio/omniedge-android&#34; &lt; a&gt; &lt;/a&gt;&lt;a href=&#34;https://github.com/omniedgeio/omniedge-synology&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/languages/top/omniedgeio/omniedge-synology&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/omniedgeio/omniedge/main/README.md&#34;&gt;【English】&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/omniedgeio/omniedge/main/README/README-zh-Hant.md&#34;&gt;【繁体中文】&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/omniedgeio/omniedge/main/README/README-zh-Hans.md&#34;&gt;【简体中文】&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/omniedgeio/omniedge/main/README/README-JP.md&#34;&gt;【日本语】&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/omniedgeio/omniedge/main/README/README-ES.md&#34;&gt;【Español】&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/omniedgeio/omniedge/main/README/README-IT.md&#34;&gt;【Italiano】&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/omniedgeio/omniedge/main/README/README-KR.md&#34;&gt;【한국어】&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/omniedgeio/omniedge/main/README/README-AR.md&#34;&gt;【العربي】&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/omniedgeio/omniedge/main/README/README-VN.md&#34;&gt;【Tiếng Việt】&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/omniedgeio/omniedge/main/README/README-TH.md&#34;&gt;【แบบไทย】&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;OmniEdge is an Open source p2p layer 2 VPN infrastructure based on &lt;a href=&#34;https://github.com/ntop/n2n&#34;&gt;n2n&lt;/a&gt; protocol, a traditional VPN alternative. No central server, easy to scale with less maintenance. What happens in intranet, stays in in intranet.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/omniedgeio/omniedge/main/OmniEdge-clients.png&#34; alt=&#34;OmniEdge-clients&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Key features:&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Dashboard administration management&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;🔥&lt;/span&gt; Mesh VPNs&lt;/td&gt; &#xA;   &lt;td&gt;Desktop GUI apps for MacOS(menubar) and Windows(systray)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;span&gt;🔥&lt;/span&gt; Multi virtual networks&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;🔥&lt;/span&gt; Site-to-Site VPNs&lt;/td&gt; &#xA;   &lt;td&gt;Command line cli apps for Linux,FreeBSD, Raspbian and MacOS&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Multi users&lt;/td&gt; &#xA;   &lt;td&gt;Unlimited data transfer&lt;/td&gt; &#xA;   &lt;td&gt;Command line cli apps for armv7,arm64,RISC-V64,x86_64 and amd64&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Multi devices&lt;/td&gt; &#xA;   &lt;td&gt;Encrypted peer-to-peer connection&lt;/td&gt; &#xA;   &lt;td&gt;Mobile apps for iOS and Android&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;span&gt;🔥&lt;/span&gt; Self-hosted Supernode&lt;/td&gt; &#xA;   &lt;td&gt;Encrypted connection relay&lt;/td&gt; &#xA;   &lt;td&gt;Tablet apps for iPad, Android Tablet and Android TV&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;span&gt;🔥&lt;/span&gt; Sharing virtual network&lt;/td&gt; &#xA;   &lt;td&gt;Hybrid-cloud support&lt;/td&gt; &#xA;   &lt;td&gt;NAS App for Synology&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Security Keys&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;🔥&lt;/span&gt; Zero-Config&lt;/td&gt; &#xA;   &lt;td&gt;Automatic public supernode allocation&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;span&gt;🔥&lt;/span&gt; &lt;a href=&#34;https://omniedge.io/docs/article/Cases/VNC&#34;&gt;Remote Device Control&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://omniedge.io/docs/article/Cases/landrop&#34;&gt;Drop Files remotely&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Automatic IP allocation&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;You can find more features in the &lt;a href=&#34;https://omniedge.io/pricing&#34;&gt;Pricing&lt;/a&gt; Page for Enterprise.&lt;/p&gt; &#xA;&lt;h2&gt;Get Started in 5 minutes&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Sign up your account: &lt;a href=&#34;https://omniedge.io/register&#34;&gt;Sign up&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://omniedge.io/download&#34;&gt;Download&lt;/a&gt; OmniEdge apps for your platform&lt;/li&gt; &#xA; &lt;li&gt;Or run the following command if you want to use cli version:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl https://omniedge.io/install/omniedge-install.sh | bash&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;Login with your Email and password, select your virtual network, connect!&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;You are all set!&lt;/p&gt; &#xA;&lt;p&gt;And if you want to login with &lt;strong&gt;security key&lt;/strong&gt;, or manage your devices, go and check &lt;a href=&#34;https://omniedge.io/docs&#34;&gt;Documenation&lt;/a&gt; for more.&lt;/p&gt; &#xA;&lt;p&gt;Or you can also run OmniEdge in Docker, with your &lt;strong&gt;OMNIEDGE_SECURITYKEY&lt;/strong&gt; and &lt;strong&gt;OMNIEDGE_VIRUTALNETWORK_ID&lt;/strong&gt;, both can be found from &lt;a href=&#34;https://omniedge.io/dashboard&#34;&gt;Dashboard&lt;/a&gt; :&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo docker run -d \&#xA;  -e OMNIEDGE_SECURITYKEY=OMNIEDGE_SECURITYKEY \&#xA;  -e OMNIEDGE_VIRUTALNETWORK_ID=&#34;OMNIEDGE_VIRUTALNETWORK_ID&#34; \&#xA;  --network host \&#xA;  --privileged \&#xA;  omniedge/omniedge:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Compile&lt;/h2&gt; &#xA;&lt;h3&gt;Linux&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Install golang for your distribution&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Follow the &lt;a href=&#34;https://go.dev/doc/install&#34;&gt;instruction&lt;/a&gt; to install golang, we use &lt;strong&gt;1.16.6&lt;/strong&gt;, or running the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;wget https://go.dev/dl/go1.16.6.linux-amd64.tar.gz&#xA;rm -rf /usr/local/go &amp;amp;&amp;amp; tar -C /usr/local -xzf go1.16.6.linux-amd64.tar.gz&#xA;export PATH=$PATH:/usr/local/go/bin&#xA;go version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Build for Ubuntu 18.04, 20.04, 22.04/Debian 10, 11&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo -E apt-get -y update&#xA;sudo -E apt-get install -y openssl&#xA;sudo -E apt-get install -y build-essential&#xA;sudo -E apt-get install -y libssl-dev&#xA;sudo -E apt-get install -y zip&#xA;git clone https://github.com/omniedgeio/omniedge-cli&#xA;cd omniedge-cli&#xA;go mod download&#xA;go generate&#xA;BUILD_ENV=prod make build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Build for Fedora 36, CentOS 8&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo yum update&#xA;sudo yum -y install gcc-c++ curl wget zip wget git openssl-devel net-tools automake autoconf make&#xA;git clone https://github.com/omniedgeio/omniedge-cli&#xA;cd omniedge-cli&#xA;go mod download&#xA;go generate&#xA;chmod +x internal/make&#xA;BUILD_ENV=prod make build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Build for Arch(Manjaro)&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo pacman -Syu --needed unzip git gcc curl wget zip make pkg-config openssl net-tools automake autoconf make&#xA;git clone https://github.com/omniedgeio/omniedge-cli&#xA;cd omniedge-cli&#xA;go mod download&#xA;go generate&#xA;chmod +x internal/make&#xA;BUILD_ENV=prod make build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Build for Opensuse&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo zypper update &#xA;sudo zypper install unzip git gcc curl wget zip make pkg-config openssl net-tools automake autoconf make tar&#xA;git clone https://github.com/omniedgeio/omniedge-cli&#xA;cd omniedge-cli&#xA;go mod download&#xA;go generate&#xA;chmod +x internal/make&#xA;BUILD_ENV=prod make build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The compiled omniedge-cli will be found in &lt;strong&gt;/out/&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;BSD&lt;/h3&gt; &#xA;&lt;h4&gt;FreeBSD&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;su&#xA;pkg update &amp;amp;&amp;amp; pkg install go gmake git openssl zip autoconf automake libtool&#xA;git clone https://github.com/omniedgeio/omniedge-cli&#xA;cd omniedge-cli&#xA;go mod download&#xA;go generate&#xA;BUILD_ENV=prod make build-freebsd&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The compiled omniedge-cli will be found in &lt;strong&gt;/out/&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Cross Compile&lt;/h3&gt; &#xA;&lt;h4&gt;Compile for RISCV64&lt;/h4&gt; &#xA;&lt;p&gt;Host OS: Ubuntu 20.04&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;apt-get update&#xA;apt-get install -y openssl autoconf build-essential libssl-dev zip wget g++-riscv64-linux-gnu gcc-riscv64-linux-gnu&#xA;&#xA;wget https://go.dev/dl/go1.18.4.linux-amd64.tar.gz&#xA;rm -rf /usr/local/go &amp;amp;&amp;amp; tar -C /usr/local -xzf go1.18.4.linux-amd64.tar.gz&#xA;export PATH=$PATH:/usr/local/go/bin&#xA;go version&#xA;export GOOS=linux&#xA;export GOARCH=riscv64&#xA;export CGO_ENABLED=1&#xA;export CC=riscv64-linux-gnu-gcc&#xA;git clone https://github.com/omniedgeio/omniedge-cli.git&#xA;cd omniedge-cli&#xA;go mod download&#xA;go generate&#xA;BUILD_ENV=prod make build-riscv64&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The compiled omniedge-cli will be found in &lt;strong&gt;/out/&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Android&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download Android Studio: &lt;a href=&#34;https://developer.android.com/studio&#34;&gt;https://developer.android.com/studio&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Get the repo and compile&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/omniedgeio/omniedge-android.git`&#xA;./gradlew test --stacktrace&#xA;./gradlew assembleDebug --stacktrace&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We have also prepared the CI for Github and Gitlab for building automatically.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Github: &lt;a href=&#34;https://github.com/omniedgeio/omniedge-android/raw/main/.github/workflows/build.yml&#34;&gt;https://github.com/omniedgeio/omniedge-android/blob/main/.github/workflows/build.yml&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;GitLab: &lt;a href=&#34;https://github.com/omniedgeio/omniedge-android/raw/main/.gitlab-ci.yml&#34;&gt;https://github.com/omniedgeio/omniedge-android/blob/main/.gitlab-ci.yml&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;iOS&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download and install Xcode&lt;/li&gt; &#xA; &lt;li&gt;Get the repo and compile&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/omniedgeio/omniedge-iOS.git&#xA;cd omniedge-iOS&#xA;open OmniEdgeNew/OmniEdgeNew.xcworkspace&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Xcode will open automatically, you have to set your developer account to start the compile. We recommend compiling the package on your devices separately, specially the &lt;strong&gt;Tunnel&lt;/strong&gt; package.&lt;/p&gt; &#xA;&lt;img width=&#34;902&#34; alt=&#34;image&#34; src=&#34;https://user-images.githubusercontent.com/93888/180374544-0ae0fbd8-3413-427f-8e9b-ec0c49249f0e.png&#34;&gt; &#xA;&lt;h3&gt;macOS&lt;/h3&gt; &#xA;&lt;h4&gt;macOS GUI&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download and install Xcode&lt;/li&gt; &#xA; &lt;li&gt;Get the repo and compile&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/omniedgeio/omniedge-macOS.git&#xA;cd omniedge-macOS&#xA;open Omniedge.xcodeproj&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Xcode will open automatically, you have to set your developer account to start the compile.&lt;/p&gt; &#xA;&lt;h4&gt;macOS Cli&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew install autoconf automake libtool&#xA;git clone https://github.com/omniedgeio/omniedge-cli&#xA;cd omniedge-cli&#xA;go mod download&#xA;go generate&#xA;BUILD_ENV=prod make build-darwin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The compiled omniedge-cli will be found in &lt;strong&gt;/out/&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Windows&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download &lt;a href=&#34;https://download.qt.io/official_releases/qt/5.12/5.12.12/&#34;&gt;QT 5.12.12 for windows&lt;/a&gt; and &lt;a href=&#34;https://jrsoftware.org/isdl.php#stable&#34;&gt;Inno Setup for windows&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Get the repo and compile&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/omniedgeio/omniedge-windows.git&#xA;cd omniedge-windows&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;open &lt;strong&gt;OmniEdge.pro&lt;/strong&gt; and &lt;strong&gt;QT Creator&lt;/strong&gt; will open automatically&lt;/li&gt; &#xA; &lt;li&gt;Set the Kits to &lt;strong&gt;Desktop Qt 5.12.12 MSVC2017 32bit&lt;/strong&gt;, select build with &lt;strong&gt;Release&lt;/strong&gt;, set the Build directory to: &lt;code&gt;.\build-package\build\&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/omniedgeio/omniedge/main/docs/compile/compile-windows-Kits.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/omniedgeio/omniedge/main/docs/compile/compile-windows-release.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;5&#34;&gt; &#xA; &lt;li&gt;Press &lt;code&gt;crtl+B&lt;/code&gt; to build, and you will find &lt;strong&gt;OmniEdge.exe&lt;/strong&gt; in the folder&lt;code&gt;.\build-package\build\release\&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;copy &lt;strong&gt;OmniEdge.exe&lt;/strong&gt; to &lt;code&gt;.\build-package\package\&lt;/code&gt;,open &lt;strong&gt;omniedge_withTAP_V02_bat.iss&lt;/strong&gt; with Inno Setup Compile, press &lt;code&gt;ctril+F9&lt;/code&gt; to compile and you will find the installer package in the folder &lt;code&gt;.\build-package\release&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://omniedge.io/docs/article/admin&#34;&gt;Virtual Network, Devices, Security Key, and Settings&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://omniedge.io/docs/article/Install/windows&#34;&gt;Windows 7,10,11 for Intel or Arm&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://omniedge.io/docs/article/Install/android&#34;&gt;Android&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://omniedge.io/docs/article/Install/cli&#34;&gt;Linux Cli for raspberry Pi, Nvidia Jeston,and more&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://omniedge.io/docs/article/Install/macoscli&#34;&gt;MacOS Cli&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://omniedge.io/docs/article/Install/synology&#34;&gt;Synology&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://omniedge.io/docs/article/Install/ios&#34;&gt;iOS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://omniedge.io/docs/article/Install/customize-supernode&#34;&gt;Setup custom supernode&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Use Cases&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Tell us your use-case, so we can share to others&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://omniedge.io/docs/article/Cases/RDP&#34;&gt;Remote connect windows without exposing public IP with Omniedge&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://omniedge.io/docs/article/Cases/VNC&#34;&gt;Display and control macOS, Linux and Windows &lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://omniedge.io/docs/article/Cases/jetson&#34;&gt;Keep connection with your AI based Project on Jetson&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://omniedge.io/docs/article/Cases/android-remote&#34;&gt;Display and control your Android device with Omniedge from anywhere on MacOS, Windows and Linux&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://omniedge.io/docs/article/Cases/lan-messenger&#34;&gt;Talk to your family and share photos in a LAN on the internet&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://omniedge.io/docs/article/Cases/landrop&#34;&gt;Air Drop Any Files between MacOS, Windows, Routers, Linux and Android with Omniedge from anywhere&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Compare&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://omniedge.io/docs/article/compare/vpn-vs-omniedge&#34;&gt;VPN vs. OmniEdge&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://omniedge.io/docs/article/compare/expressvpn-vs-omniedge&#34;&gt;Express VPN vs. OmniEdge&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://omniedge.io/docs/article/compare/frp-ngrok-vs-omniedge&#34;&gt;frp/ngrok vs. OmniEdge&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://omniedge.io/docs/article/compare/zerotier-vs-omniedge&#34;&gt;ZeroTier vs. OmniEdge&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://omniedge.io/docs/article/compare/n2n-vs-omniedge&#34;&gt;n2n vs. OmniEdge&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Who are talking about us&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://threat.technology/founded-by-a-single-tweet-startup-omniedges-effort-to-let-connect-without-concern/&#34;&gt;Founded by a Single Tweet Startup OmniEdge’s effort to let connect without concern&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://voonze.com/omniedge-to-access-your-intranet-from-the-internet-using-p2p/&#34;&gt;voonze: OmniEdge, to access your Intranet from the Internet using P2P&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://wwwhatsnew.com/2022/03/03/omniedge-para-acceder-a-tu-intranet-desde-internet-usando-p2p/&#34;&gt;wwwhatsnew: OMNIEDGE, PARA ACCEDER A TU INTRANET DESDE INTERNET USANDO P2P&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://lentrepreneur.co/style/technologie/omniedge-pour-acceder-a-votre-intranet-depuis-internet-en-p2p-04032022&#34;&gt;l&#39;Entrepreneur: OmniEdge, pour accéder à votre Intranet depuis Internet en P2P&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/RunaCapital/awesome-oss-alternatives&#34;&gt;RunaCapital: Awesome OSS alternatives&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://einverne.github.io/post/2021/11/omniedge-usage.html&#34;&gt;OmniEdge 虚拟组网工具使用及原理简介&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://imnks.com/5768.html&#34;&gt;群晖新套件：OmniEdge 轻松连接任何平台上的所有设备&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/535614999&#34;&gt;发了一条消息，我创建了一个服务全球26个国家用户的开源项目&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributors&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/orgs/omniedgeio/people/harri8807&#34;&gt;harri8807&lt;/a&gt; , &lt;a href=&#34;https://github.com/Tex-Tang&#34;&gt;Tex-Tang&lt;/a&gt;, &lt;a href=&#34;https://github.com/orgs/omniedgeio/people/ivyxjc&#34;&gt;ivyxjc&lt;/a&gt;, &lt;a href=&#34;https://github.com/kidylee&#34;&gt;kidylee&lt;/a&gt;, &lt;a href=&#34;https://github.com/orgs/omniedgeio/people/EbenDang&#34;&gt;EbenDang&lt;/a&gt; ,&lt;a href=&#34;https://github.com/zteshadow&#34;&gt;zteshadow&lt;/a&gt;, &lt;a href=&#34;https://github.com/orgs/omniedgeio/people/ChenYouping&#34;&gt;ChenYouping&lt;/a&gt;,&lt;a href=&#34;https://github.com/orgs/omniedgeio/people/ddrandy&#34;&gt;ddrandy&lt;/a&gt;, &lt;strong&gt;Tsingv&lt;/strong&gt;, &lt;a href=&#34;https://github.com/mtx2d&#34;&gt;mtx2d&lt;/a&gt;，&lt;a href=&#34;https://github.com/Blackrose&#34;&gt;Blackrose&lt;/a&gt;, &lt;a href=&#34;https://github.com/cheung-chifung&#34;&gt;cheung-chifung&lt;/a&gt;,&lt;a href=&#34;https://imnks.com/5768.html&#34;&gt;我不是矿神&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;feel free to tell us about any posts related us via issue or PR.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;If you have more questions, feel free to talk to us at &lt;a href=&#34;https://github.com/omniedgeio/omniedge/discussions&#34;&gt;Discussions&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Shopify/gh-action-hadolint</title>
    <updated>2022-08-06T01:38:51Z</updated>
    <id>tag:github.com,2022-08-06:/Shopify/gh-action-hadolint</id>
    <link href="https://github.com/Shopify/gh-action-hadolint" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Shopify/gh-action-hadolint&lt;/h1&gt; &#xA;&lt;p&gt;This describes the GitHub Action for running hadolint as a CI check.&lt;/p&gt;</summary>
  </entry>
</feed>