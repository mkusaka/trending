<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dockerfile Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-01-22T01:31:44Z</updated>
  <subtitle>Daily Trending of Dockerfile in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>AndreRH/hangover</title>
    <updated>2024-01-22T01:31:44Z</updated>
    <id>tag:github.com,2024-01-22:/AndreRH/hangover</id>
    <link href="https://github.com/AndreRH/hangover" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Hangover runs simple Win32 applications on arm64 Linux&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/github/stars/AndreRH/hangover?style=flat-square&#34; alt=&#34;stars&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/forks/AndreRH/hangover?style=flat-square&#34; alt=&#34;forks&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/v/release/AndreRH/hangover?style=flat-square&#34; alt=&#34;Release&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Make sure to leave a &lt;span&gt;⭐&lt;/span&gt; :)&lt;/p&gt; &#xA;&lt;h2&gt;Hangover&lt;/h2&gt; &#xA;&lt;p&gt;This is Hangover, a project started by André Zwing and Stefan Dösinger in 2016 that currently can run x86_32 Windows applications on aarch64 Wine.&lt;/p&gt; &#xA;&lt;h3&gt;1) How it works&lt;/h3&gt; &#xA;&lt;p&gt;Hangover uses various emulators as DLLs (pick one that suits your needs, e.g. works for you) to only emulate the application you want to run instead of emulating a complete Wine installation.&lt;/p&gt; &#xA;&lt;p&gt;As soon as the application does a Windows/Wine system call, say NtUserCreateWindowEx, it&#39;s executed outside the emulator (read non-emulated, fast, native). Even better, everything Unix related is never emulated.&lt;/p&gt; &#xA;&lt;p&gt;In short, we break out of emulation at the win32 syscall or wine unix call level for performance reasons, which is enabled by the WoW64 support in Wine.&lt;/p&gt; &#xA;&lt;h3&gt;2) Status&lt;/h3&gt; &#xA;&lt;p&gt;While the overall stability was improved, expect issues.&lt;/p&gt; &#xA;&lt;p&gt;For Benchmarks see &lt;a href=&#34;https://raw.githubusercontent.com/AndreRH/hangover/master/benchmarks/readme.md&#34;&gt;here&lt;/a&gt;. They show that the Hangover approach works as expected, as only emulating the application instead of a complete Wine installation has benefits. It&#39;s especially visible with box64cpu vs. Wine running under Box64.&lt;/p&gt; &#xA;&lt;p&gt;Current main focus is to run i386 Windows applications on ARM64 Linux, but it&#39;s also possible to run ARM32 Windows applications on x86_64 Linux. I also started working on RISC-V Linux &lt;a href=&#34;https://www.patreon.com/posts/risc-v-91365090&#34;&gt;support&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;PPC64le isn&#39;t supported anymore and won&#39;t be added back in the near future. Same for running x86_64 applications, though it might be added back as soon as the ARM64EC support in Wine is ready. If you need those features, have a look at older releases before 0.8.x.&lt;/p&gt; &#xA;&lt;p&gt;Emulator integrations:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gitlab.com/qemu-project/qemu&#34;&gt;QEMU&lt;/a&gt;: Has the most issues and is by far the &lt;a href=&#34;https://github.com/AndreRH/hangover/tree/master/benchmarks&#34;&gt;slowest&lt;/a&gt; option&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/FEX-Emu/FEX&#34;&gt;FEX&lt;/a&gt;: Available as Unix and PE&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ptitSeb/box64/&#34;&gt;Box64&lt;/a&gt;: Mostly done, but depends on the early 32-bit emulation of Box64&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jart/blink&#34;&gt;Blink&lt;/a&gt;: started, not part of this repository yet&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;3) Preview&lt;/h3&gt; &#xA;&lt;p&gt;A paid &lt;a href=&#34;https://www.patreon.com/posts/previews-82611984&#34;&gt;preview&lt;/a&gt; is available with currently the following features coming soon:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Updated Wine&lt;/li&gt; &#xA; &lt;li&gt;Updated FEX&lt;/li&gt; &#xA; &lt;li&gt;Updated Box64&lt;/li&gt; &#xA; &lt;li&gt;Updated Packages&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;4) Discord&lt;/h3&gt; &#xA;&lt;p&gt;A Discord Server is available for contributors and financial supporters (see point 8 below). It provides advanced user support, development discussions and more.&lt;/p&gt; &#xA;&lt;h3&gt;5) Packages&lt;/h3&gt; &#xA;&lt;p&gt;Debian 11 and Debian 12 (also usable for Raspbian, Armbian, Ubuntu, ...) can now be built with Github Actions and Gitlab CI.&lt;/p&gt; &#xA;&lt;h3&gt;6) How to build&lt;/h3&gt; &#xA;&lt;p&gt;For build instructions see &lt;a href=&#34;https://raw.githubusercontent.com/AndreRH/hangover/master/docs/COMPILE.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;7) Running&lt;/h3&gt; &#xA;&lt;p&gt;You can add the following environment variables:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;HODLL to select the emulator dll: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;wow64cpu.dll for &#34;native&#34; i386 mode on x86_64&lt;/li&gt; &#xA;   &lt;li&gt;wowarmhw.dll for ARM emulation (Qemu)&lt;/li&gt; &#xA;   &lt;li&gt;xtajit.dll for i386 emulation (Qemu)&lt;/li&gt; &#xA;   &lt;li&gt;fexcore.dll for i386 emulation (FEX, Unix)&lt;/li&gt; &#xA;   &lt;li&gt;libwow64fex.dll for i386 emulation (FEX, PE)&lt;/li&gt; &#xA;   &lt;li&gt;box64cpu.dll for i386 emulation (Box64)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;HOLIB to set full path of the library, e.g. HOLIB=/path/to/libqemu-i386.so&lt;/li&gt; &#xA; &lt;li&gt;QEMU_LOG to set QEMU log channels, find some options &lt;a href=&#34;https://github.com/AndreRH/qemu/raw/v5.2.0/util/log.c#L297&#34;&gt;here.&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;7.1) Box64&lt;/h4&gt; &#xA;&lt;p&gt;box64cpu.dll currently is the default for i386 emulation, so it&#39;s simply:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ wine your_x86_application.exe&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You might have better results with FEX for the moment.&lt;/p&gt; &#xA;&lt;h4&gt;7.2) QEMU&lt;/h4&gt; &#xA;&lt;p&gt;Until the critical section issue is solved it is highly recomended to limit execution to 1 core with &#34;taskset -c 1&#34; for Qemu emulation:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ HODLL=xtajit.dll   taskset -c 1 wine your_x86_application.exe&#xA;$ HODLL=wowarmhw.dll taskset -c 1 wine your_arm_application.exe&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;7.3) FEX, Unix&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ HODLL=fexcore.dll wine your_x86_application.exe&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;7.4) FEX, PE&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ HODLL=libwow64fex.dll wine your_x86_application.exe&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;8) Known issues&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;QEMU: CriticalSection doesn&#39;t work reliably and other instabilities&lt;/li&gt; &#xA; &lt;li&gt;FEX, PE: Doesn&#39;t support CLI applications, as it can&#39;t handle writing to the console&lt;/li&gt; &#xA; &lt;li&gt;FEX, Unix: Performance/Stability issues compared to the PE variant&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;9) Financial Contributors&lt;/h3&gt; &#xA;&lt;p&gt;Become a financial contributor and help me sustain this project:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.patreon.com/andre_opensource&#34;&gt;https://www.patreon.com/andre_opensource&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://liberapay.com/andre_opensource&#34;&gt;https://liberapay.com/andre_opensource&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://ko-fi.com/andre_opensource&#34;&gt;https://ko-fi.com/andre_opensource&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;10) Hardware Contributors&lt;/h3&gt; &#xA;&lt;p&gt;Become a hardware contributor and help me sustain this project:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://throne.com/andrerh&#34;&gt;https://throne.com/andrerh&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>render-examples/elasticsearch</title>
    <updated>2024-01-22T01:31:44Z</updated>
    <id>tag:github.com,2024-01-22:/render-examples/elasticsearch</id>
    <link href="https://github.com/render-examples/elasticsearch" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Run Elasticsearch on Render&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;README&lt;/h1&gt; &#xA;&lt;p&gt;This is a template repository for running Elasticsearch on Render.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;It uses &lt;a href=&#34;https://render.com/docs/disks&#34;&gt;Render Disks&lt;/a&gt; for persistent index storage.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Elasticsearch runs in your &lt;a href=&#34;https://render.com/docs/private-services&#34;&gt;Render private network&lt;/a&gt; so it isn&#39;t exposed to the public Internet.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;You can &lt;a href=&#34;https://www.elastic.co/guide/en/elasticsearch/reference/current/settings.html&#34;&gt;configure Elasticsearch&lt;/a&gt; using &lt;code&gt;config/elasticsearch.yml&lt;/code&gt; in your fork of this repository. Render will automatically redeploy Elasticsearch when you push your changes.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Deployment&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://render.com/deploy&#34;&gt;&lt;img src=&#34;https://render.com/images/deploy-to-render-button.svg?sanitize=true&#34; alt=&#34;Deploy to Render&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;For details and customization see &lt;a href=&#34;https://render.com/docs/deploy-elasticsearch&#34;&gt;https://render.com/docs/deploy-elasticsearch&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>