<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dockerfile Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-12-08T01:38:25Z</updated>
  <subtitle>Weekly Trending of Dockerfile in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>astral-sh/uv-docker-example</title>
    <updated>2024-12-08T01:38:25Z</updated>
    <id>tag:github.com,2024-12-08:/astral-sh/uv-docker-example</id>
    <link href="https://github.com/astral-sh/uv-docker-example" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An example of using uv in Docker images&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;uv-docker-example&lt;/h1&gt; &#xA;&lt;p&gt;An example project for using uv in Docker images, with a focus on best practices for developing with the project mounted in the local image.&lt;/p&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://docs.astral.sh/uv/guides/integration/docker/&#34;&gt;uv Docker integration guide&lt;/a&gt; for more background.&lt;/p&gt; &#xA;&lt;h2&gt;Trying it out&lt;/h2&gt; &#xA;&lt;p&gt;A &lt;a href=&#34;https://raw.githubusercontent.com/astral-sh/uv-docker-example/main/run.sh&#34;&gt;&lt;code&gt;run.sh&lt;/code&gt;&lt;/a&gt; utility is provided for quickly building the image and starting a container. This script demonstrates best practices for developing using the container, using bind mounts for the project and virtual environment directories.&lt;/p&gt; &#xA;&lt;p&gt;To build and run the web application in the container using &lt;code&gt;docker run&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ ./run.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, check out &lt;a href=&#34;http://localhost:8000&#34;&gt;&lt;code&gt;http://localhost:8000&lt;/code&gt;&lt;/a&gt; to see the website.&lt;/p&gt; &#xA;&lt;p&gt;A Docker compose configuration is also provided to demonstrate best practices for developing using the container with Docker compose. Docker compose is more complex than using &lt;code&gt;docker run&lt;/code&gt;, but has more robust support for various workflows.&lt;/p&gt; &#xA;&lt;p&gt;To build and run the web application using Docker compose:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker compose up --watch &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default, the image is set up to start the web application. However, a command-line interface is provided for demonstration purposes as well.&lt;/p&gt; &#xA;&lt;p&gt;To run the command-line entrypoint in the container:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ ./run.sh hello&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Project overview&lt;/h2&gt; &#xA;&lt;h3&gt;Dockerfile&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/astral-sh/uv-docker-example/main/Dockerfile&#34;&gt;&lt;code&gt;Dockerfile&lt;/code&gt;&lt;/a&gt; defines the image and includes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Installation of uv&lt;/li&gt; &#xA; &lt;li&gt;Installing the project dependencies and the project separately for optimal image build caching&lt;/li&gt; &#xA; &lt;li&gt;Placing environment executables on the &lt;code&gt;PATH&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Running the web application&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/astral-sh/uv-docker-example/main/multistage.Dockerfile&#34;&gt;&lt;code&gt;multistage.Dockerfile&lt;/code&gt;&lt;/a&gt; example extends the &lt;code&gt;Dockerfile&lt;/code&gt; example to use multistage builds to reduce the final size of the image.&lt;/p&gt; &#xA;&lt;h3&gt;Dockerignore file&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/astral-sh/uv-docker-example/main/.dockerignore&#34;&gt;&lt;code&gt;.dockerignore&lt;/code&gt;&lt;/a&gt; file includes an entry for the &lt;code&gt;.venv&lt;/code&gt; directory to ensure the &lt;code&gt;.venv&lt;/code&gt; is not included in image builds. Note that the &lt;code&gt;.dockerignore&lt;/code&gt; file is not applied to volume mounts during container runs.&lt;/p&gt; &#xA;&lt;h3&gt;Run script&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/astral-sh/uv-docker-example/main/run.sh&#34;&gt;&lt;code&gt;run.sh&lt;/code&gt;&lt;/a&gt; script includes an example of invoking &lt;code&gt;docker run&lt;/code&gt; for local development, mounting the source code for the project into the container so that edits are reflected immediately.&lt;/p&gt; &#xA;&lt;h3&gt;Docker compose file&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/astral-sh/uv-docker-example/main/compose.yml&#34;&gt;compose.yml&lt;/a&gt; file includes a Docker compose definition for the web application. It includes a &lt;a href=&#34;https://docs.docker.com/compose/file-watch/#compose-watch-versus-bind-mounts&#34;&gt;&lt;code&gt;watch&lt;/code&gt; directive&lt;/a&gt; for Docker compose, which is a best-practice method for updating the container on local changes.&lt;/p&gt; &#xA;&lt;h3&gt;Application code&lt;/h3&gt; &#xA;&lt;p&gt;The Python application code for the project is at &lt;a href=&#34;https://raw.githubusercontent.com/astral-sh/uv-docker-example/main/src/uv_docker_example/__init__.py&#34;&gt;&lt;code&gt;src/uv_docker_example/__init__.py&lt;/code&gt;&lt;/a&gt; — there&#39;s a command line entrypoint and a basic FastAPI application — both of which just display &#34;hello world&#34; output.&lt;/p&gt; &#xA;&lt;h3&gt;Project definition&lt;/h3&gt; &#xA;&lt;p&gt;The project at &lt;a href=&#34;https://raw.githubusercontent.com/astral-sh/uv-docker-example/main/pyproject.toml&#34;&gt;&lt;code&gt;pyproject.toml&lt;/code&gt;&lt;/a&gt; includes Ruff as an example development dependency, includes FastAPI as a dependency, and defines a &lt;code&gt;hello&lt;/code&gt; entrypoint for the application.&lt;/p&gt; &#xA;&lt;h2&gt;Useful commands&lt;/h2&gt; &#xA;&lt;p&gt;To check that the environment is up-to-date after image builds:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ ./run.sh uv sync --frozen&#xA;Audited 2 packages ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To enter a &lt;code&gt;bash&lt;/code&gt; shell in the container:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ ./run.sh /bin/bash&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To build the image without running anything:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ docker build .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To build the multistage image:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ docker build . --file multistage.Dockerfile&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>