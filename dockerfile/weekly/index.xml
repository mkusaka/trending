<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dockerfile Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-17T02:08:42Z</updated>
  <subtitle>Weekly Trending of Dockerfile in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>TrafeX/docker-php-nginx</title>
    <updated>2022-07-17T02:08:42Z</updated>
    <id>tag:github.com,2022-07-17:/TrafeX/docker-php-nginx</id>
    <link href="https://github.com/TrafeX/docker-php-nginx" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Docker image with PHP-FPM 8.1 &amp; Nginx 1.22 on Alpine Linux&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Docker PHP-FPM 8.1 &amp;amp; Nginx 1.22 on Alpine Linux&lt;/h1&gt; &#xA;&lt;p&gt;Example PHP-FPM 8.1 &amp;amp; Nginx 1.22 container image for Docker, built on &lt;a href=&#34;https://www.alpinelinux.org/&#34;&gt;Alpine Linux&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Repository: &lt;a href=&#34;https://github.com/TrafeX/docker-php-nginx&#34;&gt;https://github.com/TrafeX/docker-php-nginx&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Built on the lightweight and secure Alpine Linux distribution&lt;/li&gt; &#xA; &lt;li&gt;Multi-platform, supporting AMD4, ARMv6, ARMv7, ARM64&lt;/li&gt; &#xA; &lt;li&gt;Very small Docker image size (+/-40MB)&lt;/li&gt; &#xA; &lt;li&gt;Uses PHP 8.1 for better performance, lower CPU usage &amp;amp; memory footprint&lt;/li&gt; &#xA; &lt;li&gt;Optimized for 100 concurrent users&lt;/li&gt; &#xA; &lt;li&gt;Optimized to only use resources when there&#39;s traffic (by using PHP-FPM&#39;s &lt;code&gt;on-demand&lt;/code&gt; process manager)&lt;/li&gt; &#xA; &lt;li&gt;The services Nginx, PHP-FPM and supervisord run under a non-privileged user (nobody) to make it more secure&lt;/li&gt; &#xA; &lt;li&gt;The logs of all the services are redirected to the output of the Docker container (visible with &lt;code&gt;docker logs -f &amp;lt;container name&amp;gt;&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Follows the KISS principle (Keep It Simple, Stupid) to make it easy to understand and adjust the image to your needs&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://hub.docker.com/r/trafex/php-nginx/&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/pulls/trafex/php-nginx.svg?sanitize=true&#34; alt=&#34;Docker Pulls&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/badge/nginx-1.22-brightgreen.svg?sanitize=true&#34; alt=&#34;nginx 1.22&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/php-8.1-brightgreen.svg?sanitize=true&#34; alt=&#34;php 8.1&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/license-MIT-blue.svg?sanitize=true&#34; alt=&#34;License MIT&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://timdepater.com?mtm_campaign=github&#34;&gt;&lt;img src=&#34;https://timdepater.com/logo/mini-logo.png&#34; alt=&#34;Trafex Consultancy&#34;&gt;&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;I can help you with &lt;a href=&#34;https://timdepater.com/?mtm_campaign=github&#34;&gt;Containerization, Kubernetes, Monitoring, Infrastructure as Code and other DevOps challenges&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Goal of this project&lt;/h2&gt; &#xA;&lt;p&gt;The goal of this container image is to provide an example for running Nginx and PHP-FPM in a container which follows the best practices and is easy to understand and modify to your needs.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Start the Docker container:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run -p 80:8080 trafex/php-nginx&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See the PHP info on &lt;a href=&#34;http://localhost&#34;&gt;http://localhost&lt;/a&gt;, or the static html page on &lt;a href=&#34;http://localhost/test.html&#34;&gt;http://localhost/test.html&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Or mount your own code to be served by PHP-FPM &amp;amp; Nginx&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run -p 80:8080 -v ~/my-codebase:/var/www/html trafex/php-nginx&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Docker Hub repository name change&lt;/h3&gt; &#xA;&lt;p&gt;Since we switched to PHP8 the repository name &lt;a href=&#34;https://hub.docker.com/r/trafex/alpine-nginx-php7&#34;&gt;trafex/alpine-nginx-php7&lt;/a&gt; didn&#39;t make sense anymore. Because you can&#39;t change the name of the repository on Docker Hub I created a new one.&lt;/p&gt; &#xA;&lt;p&gt;From now on this image can be pulled from Docker Hub under the name &lt;a href=&#34;https://hub.docker.com/r/trafex/php-nginx&#34;&gt;trafex/php-nginx&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;In &lt;a href=&#34;https://raw.githubusercontent.com/TrafeX/docker-php-nginx/master/config/&#34;&gt;config/&lt;/a&gt; you&#39;ll find the default configuration files for Nginx, PHP and PHP-FPM. If you want to extend or customize that you can do so by mounting a configuration file in the correct folder;&lt;/p&gt; &#xA;&lt;p&gt;Nginx configuration:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run -v &#34;`pwd`/nginx-server.conf:/etc/nginx/conf.d/server.conf&#34; trafex/php-nginx&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;PHP configuration:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run -v &#34;`pwd`/php-setting.ini:/etc/php8/conf.d/settings.ini&#34; trafex/php-nginx&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;PHP-FPM configuration:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run -v &#34;`pwd`/php-fpm-settings.conf:/etc/php8/php-fpm.d/server.conf&#34; trafex/php-nginx&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;Note; Because &lt;code&gt;-v&lt;/code&gt; requires an absolute path I&#39;ve added &lt;code&gt;pwd&lt;/code&gt; in the example to return the absolute path to the current directory&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Adding composer&lt;/h2&gt; &#xA;&lt;p&gt;If you need &lt;a href=&#34;https://getcomposer.org/&#34;&gt;Composer&lt;/a&gt; in your project, here&#39;s an easy way to add it.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Dockerfile&#34;&gt;FROM trafex/php-nginx:latest&#xA;&#xA;# Install composer from the official image&#xA;COPY --from=composer /usr/bin/composer /usr/bin/composer&#xA;&#xA;# Run composer install to install the dependencies&#xA;RUN composer install --optimize-autoloader --no-interaction --no-progress&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Building with composer&lt;/h3&gt; &#xA;&lt;p&gt;If you are building an image with source code in it and dependencies managed by composer then the definition can be improved. The dependencies should be retrieved by the composer but the composer itself (&lt;code&gt;/usr/bin/composer&lt;/code&gt;) is not necessary to be included in the image.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Dockerfile&#34;&gt;FROM composer AS composer&#xA;&#xA;# copying the source directory and install the dependencies with composer&#xA;COPY &amp;lt;your_directory&amp;gt;/ /app&#xA;&#xA;# run composer install to install the dependencies&#xA;RUN composer install \&#xA;  --optimize-autoloader \&#xA;  --no-interaction \&#xA;  --no-progress&#xA;&#xA;# continue stage build with the desired image and copy the source including the&#xA;# dependencies downloaded by composer&#xA;FROM trafex/php-nginx&#xA;COPY --chown=nginx --from=composer /app /var/www/html&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>apache/apisix-docker</title>
    <updated>2022-07-17T02:08:42Z</updated>
    <id>tag:github.com,2022-07-17:/apache/apisix-docker</id>
    <link href="https://github.com/apache/apisix-docker" rel="alternate"></link>
    <summary type="html">&lt;p&gt;the docker for Apache APISIX&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;What is Apache APISIX API Gateway&lt;/h2&gt; &#xA;&lt;p&gt;Apache APISIX is a dynamic, real-time, high-performance API Gateway.&lt;/p&gt; &#xA;&lt;p&gt;APISIX API Gateway provides rich traffic management features such as load balancing, dynamic upstream, canary release, circuit breaking, authentication, observability, and more.&lt;/p&gt; &#xA;&lt;p&gt;You can use APISIX API Gateway to handle traditional north-south traffic, as well as east-west traffic between services. At present, APISIX has been used in various industries, including NASA, Tencent Cloud, EU Digital Factory, Airbus, Airwallex, iQIYI, etc.&lt;/p&gt; &#xA;&lt;h2&gt;How to run Apache APISIX&lt;/h2&gt; &#xA;&lt;p&gt;Apache APISIX supports stand-alone mode and also supports the use of etcd database as the configuration center.&lt;/p&gt; &#xA;&lt;h3&gt;How to run APISIX in stand-alone mode&lt;/h3&gt; &#xA;&lt;p&gt;In stand-alone mode, APISIX uses &lt;code&gt;apisix.yaml&lt;/code&gt; as the configuration center to store routing, upstream, consumer and other information. After APISIX is started, it will load the &lt;code&gt;apisix.yaml&lt;/code&gt; file regularly to update the corresponding configuration information.&lt;/p&gt; &#xA;&lt;p&gt;The following command creates a configuration file for APISIX, and enables stand-alone mode.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Create a APISIX configuration file in the current directory and use this file in the next step.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cat &amp;lt;&amp;lt; EOF &amp;gt; $(pwd)/config.yaml&#xA;apisix:&#xA;  enable_admin: false&#xA;  config_center: yaml&#xA;EOF&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Start APISIX.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ docker run -d \&#xA;   --name apache-apisix \&#xA;   -p 9080:9080 \&#xA;   -v $(pwd)/config.yaml:/usr/local/apisix/conf/config.yaml \&#xA;   apache/apisix&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Modify stand-alone mode configuration file&lt;/h4&gt; &#xA;&lt;p&gt;After completing the above steps, you can refer to the following example to write the Route and Plugin configuration to the &lt;code&gt;apisix.yaml&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cat &amp;lt;&amp;lt; EOF &amp;gt; apisix.yaml&#xA;routes:&#xA;  -&#xA;    uri: /*&#xA;    upstream:&#xA;      nodes:&#xA;        &#34;httpbin.org&#34;: 1&#xA;      type: roundrobin&#xA;    plugin_config_id: 1&#xA;&#xA;plugin_configs:&#xA;  -&#xA;    id: 1&#xA;    plugins:&#xA;      response-rewrite:&#xA;        body: &#34;Hello APISIX\n&#34;&#xA;    desc: &#34;response-rewrite&#34;&#xA;#END&#xA;EOF&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can use the following command to copy the &lt;code&gt;apisix.yaml&lt;/code&gt; file to the APISIX container, reload APISIX and test whether the configuration takes effect.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ docker cp apisix.yaml apache-apisix:/usr/local/apisix/conf &amp;amp;&amp;amp; \&#xA;docker exec -it apache-apisix apisix reload &amp;amp;&amp;amp; \&#xA;curl http://127.0.0.1:9080/anything&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The response indicates that APISIX is running successfully:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Hello APISIX&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to know more configuration examples, you can refer to &lt;a href=&#34;https://apisix.apache.org/docs/apisix/stand-alone&#34;&gt;stand-alone&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;How to run APISIX using etcd as configuration center&lt;/h3&gt; &#xA;&lt;h4&gt;Solution 1&lt;/h4&gt; &#xA;&lt;p&gt;The operation of APISIX also supports the use of etcd as the configuration center. Before starting the APISIX container, we need to start the etcd container with the following command, and specify the network used by the container as the host network. Make sure that all the required ports (default: &lt;code&gt;9080&lt;/code&gt;, &lt;code&gt;9443&lt;/code&gt; and &lt;code&gt;2379&lt;/code&gt;) are available and not used by other system processes.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Start etcd.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ docker run -d \&#xA;   --name etcd \&#xA;   --net host \&#xA;   -e ALLOW_NONE_AUTHENTICATION=yes \&#xA;   -e ETCD_ADVERTISE_CLIENT_URLS=http://127.0.0.1:2379 \&#xA;   bitnami/etcd:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Start APISIX.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ docker run -d \&#xA;   --name apache-apisix \&#xA;   --net host \&#xA;   apache/apisix&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Solution 2&lt;/h4&gt; &#xA;&lt;p&gt;Before starting the APISIX container, we need to create a Docker virtual network and start the etcd container.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Create a network and view the subnet address, then start etcd&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ docker network create apisix-network --driver bridge &amp;amp;&amp;amp; \&#xA;docker network inspect -v apisix-network &amp;amp;&amp;amp; \&#xA;docker run -d --name etcd \&#xA;  --network apisix-network \&#xA;  -p 2379:2379 \&#xA;  -p 2380:2380 \&#xA;  -e ALLOW_NONE_AUTHENTICATION=yes \&#xA;  -e ETCD_ADVERTISE_CLIENT_URLS=http://127.0.0.1:2379 \&#xA;  bitnami/etcd:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;View the return result of the previous step, we can see the &lt;code&gt;subnet&lt;/code&gt; address. Create a APISIX configuration file in the current directory. You need to set &lt;code&gt;allow_admin&lt;/code&gt; to the &lt;code&gt;subnet&lt;/code&gt; address obtained in step1.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cat &amp;lt;&amp;lt; EOF &amp;gt; $(pwd)/config.yaml&#xA;apisix:&#xA;  allow_admin:&#xA;    - 0.0.0.0/0  # Please set it to the subnet address you obtained.&#xA;                 # If not set, by default all IP access is allowed.&#xA;etcd:&#xA;  host:&#xA;    - &#34;http://etcd:2379&#34;&#xA;  prefix: &#34;/apisix&#34;&#xA;  timeout: 30&#xA;EOF&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Start APISIX and reference the file created in the previous step.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ docker run -d --name apache-apisix \&#xA;   --network apisix-network \&#xA;   -p 9080:9080 \&#xA;   -v $(pwd)/config.yaml:/usr/local/apisix/conf/config.yaml \&#xA;   apache/apisix&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Test example&lt;/h3&gt; &#xA;&lt;p&gt;Check that APISIX is running properly by running the following command on the host.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ curl &#34;http://127.0.0.1:9080/apisix/admin/services/&#34; \&#xA;-H &#39;X-API-KEY: edd1c9f034335f136f87ad84b625c8f1&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The response indicates that apisix is running successfully:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;{&#xA;  &#34;count&#34;:0,&#xA;  &#34;action&#34;:&#34;get&#34;,&#xA;  &#34;node&#34;:{&#xA;    &#34;key&#34;:&#34;/apisix/services&#34;,&#xA;    &#34;nodes&#34;:[],&#xA;    &#34;dir&#34;:true&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to modify the default configuration of APISIX, you can use the following command to enter the APISIX container and modify the configuration file &lt;code&gt;./conf/config.yaml&lt;/code&gt;, which will take effect after reloading APISIX. For details, please refer to &lt;code&gt;./conf/config-default.yaml&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ docker exec -it apache-apisix bash&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more information, you can refer to the &lt;a href=&#34;https://apisix.apache.org/&#34;&gt;APISIX Website&lt;/a&gt; and &lt;a href=&#34;https://apisix.apache.org/docs/apisix/getting-started&#34;&gt;APISIX Documentation&lt;/a&gt;. If you encounter problems during use, you can ask for help through &lt;a href=&#34;https://apisix.apache.org/docs/general/join/&#34;&gt;slack and the mailing list&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Reload APISIX in a running container&lt;/h2&gt; &#xA;&lt;p&gt;If you change your custom configuration, you can reload APISIX (without downtime) by issuing.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ docker exec -it apache-apisix apisix reload&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will run the &lt;code&gt;apisix reload&lt;/code&gt; command in your container.&lt;/p&gt; &#xA;&lt;h2&gt;Kubernetes Ingress&lt;/h2&gt; &#xA;&lt;p&gt;During the deployment process, in addition to the above operations, APISIX also derived the &lt;a href=&#34;https://github.com/apache/apisix-ingress-controller&#34;&gt;&lt;code&gt;apisix-ingress-controller&lt;/code&gt;&lt;/a&gt;, which can be deployed and used in the K8s environment more conveniently.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Licensed under the Apache License, Version 2.0: &lt;a href=&#34;http://www.apache.org/licenses/LICENSE-2.0&#34;&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>microsoft/dotnet-framework-docker</title>
    <updated>2022-07-17T02:08:42Z</updated>
    <id>tag:github.com,2022-07-17:/microsoft/dotnet-framework-docker</id>
    <link href="https://github.com/microsoft/dotnet-framework-docker" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The repo for the official docker images for .NET Framework on Windows Server Core.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Featured Repos&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://hub.docker.com/_/microsoft-dotnet-framework-sdk/&#34;&gt;dotnet/framework/sdk&lt;/a&gt;: .NET Framework SDK&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://hub.docker.com/_/microsoft-dotnet-framework-aspnet/&#34;&gt;dotnet/framework/aspnet&lt;/a&gt;: ASP.NET Web Forms and MVC&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://hub.docker.com/_/microsoft-dotnet-framework-runtime/&#34;&gt;dotnet/framework/runtime&lt;/a&gt;: .NET Framework Runtime&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://hub.docker.com/_/microsoft-dotnet-framework-wcf/&#34;&gt;dotnet/framework/wcf&lt;/a&gt;: Windows Communication Foundation (WCF)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://hub.docker.com/_/microsoft-dotnet-framework-samples/&#34;&gt;dotnet/framework/samples&lt;/a&gt;: .NET Framework, ASP.NET and WCF Samples&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;About&lt;/h1&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://www.microsoft.com/net/framework&#34;&gt;.NET Framework&lt;/a&gt; is a general purpose development platform maintained by Microsoft. It is the most popular way to build client and server applications for Windows and Windows Server. It is included with Windows, Windows Server and Windows Server Core. It includes server technologies such as ASP.NET Web Forms, ASP.NET MVC and Windows Communication Foundation (WCF) applications, which you can run in Docker containers.&lt;/p&gt; &#xA;&lt;p&gt;.NET has several capabilities that make development easier, including automatic memory management, (runtime) generic types, reflection, asynchrony, concurrency, and native interop. Millions of developers take advantage of these capabilities to efficiently build high-quality web and client applications.&lt;/p&gt; &#xA;&lt;p&gt;You can use C#, F# and VB to write .NET Framework apps. C# is simple, powerful, type-safe, and object-oriented while retaining the expressiveness and elegance of C-style languages. F# is a multi-paradigm programming language, enabling both functional and object-oriented patterns and practices. VB is a rapid development programming language with the deepest integration between the language and Visual Studio, providing the fastest path to a working app.&lt;/p&gt; &#xA;&lt;p&gt;The .NET Framework was first released by Microsoft in 2001. The latest version is &lt;a href=&#34;https://www.microsoft.com/net/framework&#34;&gt;.NET Framework 4.8&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://docs.microsoft.com/dotnet/framework/&#34;&gt;https://docs.microsoft.com/dotnet/framework/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Watch &lt;a href=&#34;https://github.com/microsoft/dotnet-framework-docker/discussions/categories/announcements&#34;&gt;discussions&lt;/a&gt; for Docker-related .NET announcements.&lt;/p&gt; &#xA;&lt;h1&gt;Usage&lt;/h1&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://github.com/microsoft/dotnet-framework-docker/raw/main/samples/README.md&#34;&gt;.NET Framework Docker samples&lt;/a&gt; show various ways to use .NET Framework and Docker together.&lt;/p&gt; &#xA;&lt;h2&gt;Container sample: Run a simple application&lt;/h2&gt; &#xA;&lt;p&gt;Type the following command to run a sample console application:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;docker run --rm mcr.microsoft.com/dotnet/framework/samples:dotnetapp&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Container sample: Run a web application&lt;/h2&gt; &#xA;&lt;p&gt;Type the following command to run a sample web application:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;docker run -it --rm -p 8000:80 --name aspnet_sample mcr.microsoft.com/dotnet/framework/samples:aspnetapp&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After the application starts, navigate to &lt;code&gt;http://localhost:8000&lt;/code&gt; in your web browser. You need to navigate to the application via IP address instead of &lt;code&gt;localhost&lt;/code&gt; for earlier Windows versions, which is demonstrated in &lt;a href=&#34;https://github.com/microsoft/dotnet-framework-docker/raw/main/samples/aspnetapp/README.md#view-the-aspnet-app-in-a-running-container-on-windows&#34;&gt;View the ASP.NET app in a running container on Windows&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Related Repos&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://hub.docker.com/_/microsoft-dotnet/&#34;&gt;dotnet&lt;/a&gt;: .NET&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://hub.docker.com/_/microsoft-dotnet-nightly/&#34;&gt;dotnet-nightly&lt;/a&gt;: .NET (Preview)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://hub.docker.com/_/microsoft-dotnet-samples/&#34;&gt;dotnet/samples&lt;/a&gt;: .NET Samples&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Support&lt;/h1&gt; &#xA;&lt;h2&gt;Lifecycle&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://support.microsoft.com/help/17455/lifecycle-faq-net-framework&#34;&gt;.NET Framework Lifecycle FAQ&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/microsoft/dotnet-framework-docker/raw/main/documentation/supported-tags.md&#34;&gt;Supported Tags Policy&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Image Update Policy&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;We update the supported .NET Framework images within 12 hours of any updates to their base images (e.g. windows/servercore:20H2, windows/servercore:ltsc2019, etc.).&lt;/li&gt; &#xA; &lt;li&gt;We publish .NET Framework images as part of releasing new versions of .NET Framework including major/minor and servicing.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Feedback&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/microsoft/dotnet-framework-docker/issues/new/choose&#34;&gt;File an issue&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://support.microsoft.com/contactus/&#34;&gt;Contact Microsoft Support&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://aka.ms/mcr/osslegalnotice&#34;&gt;Microsoft Container Images Legal Notice&lt;/a&gt;: applies to all &lt;a href=&#34;https://hub.docker.com/_/microsoft-dotnet-framework/&#34;&gt;.NET Framework container images&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://hub.docker.com/_/microsoft-windows-servercore/&#34;&gt;Microsoft Software Supplemental License for Windows Container Base Image&lt;/a&gt;: applies to all &lt;a href=&#34;https://hub.docker.com/_/microsoft-dotnet-framework/&#34;&gt;.NET Framework container images&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://visualstudio.microsoft.com/license-terms/mlt031519/&#34;&gt;Visual Studio Tools License&lt;/a&gt;: applies to all &lt;a href=&#34;https://hub.docker.com/_/microsoft-dotnet-framework-sdk/&#34;&gt;.NET Framework SDK container images&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>