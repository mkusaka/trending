<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dockerfile Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-04-28T01:37:45Z</updated>
  <subtitle>Weekly Trending of Dockerfile in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>freewil/bitcoin-testnet-box</title>
    <updated>2024-04-28T01:37:45Z</updated>
    <id>tag:github.com,2024-04-28:/freewil/bitcoin-testnet-box</id>
    <link href="https://github.com/freewil/bitcoin-testnet-box" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Create your own private bitcoin testnet&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;bitcoin-testnet-box&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://hub.docker.com/r/freewil/bitcoin-testnet-box/&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/pulls/freewil/bitcoin-testnet-box.svg?style=flat&#34; alt=&#34;docker pulls&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Create your own private bitcoin testnet&lt;/p&gt; &#xA;&lt;p&gt;You must have &lt;code&gt;bitcoind&lt;/code&gt; and &lt;code&gt;bitcoin-cli&lt;/code&gt; installed on your system and in the path unless running this within a &lt;a href=&#34;https://www.docker.com&#34;&gt;Docker&lt;/a&gt; container (see &lt;a href=&#34;https://raw.githubusercontent.com/freewil/bitcoin-testnet-box/master/#using-with-docker&#34;&gt;below&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;h2&gt;Large Git History&lt;/h2&gt; &#xA;&lt;p&gt;If you&#39;d like to clone this git repository locally and disk space or bandwidth usage is of concern, it&#39;s suggested to do a shallow clone, excluding some earlier history of the repo, where some testnet data was included.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Regular clone: &lt;code&gt;du -sh .&lt;/code&gt; 44M&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Shallow clone: &lt;code&gt;du -sh .&lt;/code&gt; 168K&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Regular Clone&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone git@github.com:freewil/bitcoin-testnet-box.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Shallow Clone&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone --shallow-since 2014-10-18 git@github.com:freewil/bitcoin-testnet-box.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Starting the testnet-box&lt;/h2&gt; &#xA;&lt;p&gt;This will start up two nodes using the two datadirs &lt;code&gt;1&lt;/code&gt; and &lt;code&gt;2&lt;/code&gt;. They will only connect to each other in order to remain an isolated private testnet. Two nodes are provided, as one is used to generate blocks and it&#39;s balance will be increased as this occurs (imitating a miner). You may want a second node where this behavior is not observed.&lt;/p&gt; &#xA;&lt;p&gt;Node &lt;code&gt;1&lt;/code&gt; will listen on port &lt;code&gt;19000&lt;/code&gt;, allowing node &lt;code&gt;2&lt;/code&gt; to connect to it.&lt;/p&gt; &#xA;&lt;p&gt;Node &lt;code&gt;1&lt;/code&gt; will listen on port &lt;code&gt;19001&lt;/code&gt; and node &lt;code&gt;2&lt;/code&gt; will listen on port &lt;code&gt;19011&lt;/code&gt; for the JSON-RPC server.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ make start&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Check the status of the nodes&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ make getinfo&#xA;bitcoin-cli -datadir=1  getinfo&#xA;{&#xA;    &#34;version&#34; : 90300,&#xA;    &#34;protocolversion&#34; : 70002,&#xA;    &#34;walletversion&#34; : 60000,&#xA;    &#34;balance&#34; : 0.00000000,&#xA;    &#34;blocks&#34; : 0,&#xA;    &#34;timeoffset&#34; : 0,&#xA;    &#34;connections&#34; : 1,&#xA;    &#34;proxy&#34; : &#34;&#34;,&#xA;    &#34;difficulty&#34; : 0.00000000,&#xA;    &#34;testnet&#34; : false,&#xA;    &#34;keypoololdest&#34; : 1413617762,&#xA;    &#34;keypoolsize&#34; : 101,&#xA;    &#34;paytxfee&#34; : 0.00000000,&#xA;    &#34;relayfee&#34; : 0.00001000,&#xA;    &#34;errors&#34; : &#34;&#34;&#xA;}&#xA;bitcoin-cli -datadir=2  getinfo&#xA;{&#xA;    &#34;version&#34; : 90300,&#xA;    &#34;protocolversion&#34; : 70002,&#xA;    &#34;walletversion&#34; : 60000,&#xA;    &#34;balance&#34; : 0.00000000,&#xA;    &#34;blocks&#34; : 0,&#xA;    &#34;timeoffset&#34; : 0,&#xA;    &#34;connections&#34; : 1,&#xA;    &#34;proxy&#34; : &#34;&#34;,&#xA;    &#34;difficulty&#34; : 0.00000000,&#xA;    &#34;testnet&#34; : false,&#xA;    &#34;keypoololdest&#34; : 1413617762,&#xA;    &#34;keypoolsize&#34; : 101,&#xA;    &#34;paytxfee&#34; : 0.00000000,&#xA;    &#34;relayfee&#34; : 0.00001000,&#xA;    &#34;errors&#34; : &#34;&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Creating wallets&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;bitcoin-cli -datadir=1 createwallet wallet1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;bitcoin-cli -datadir=2 createwallet wallet2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Generating blocks&lt;/h2&gt; &#xA;&lt;p&gt;Normally on the live, real, bitcoin network, blocks are generated, on average, every 10 minutes. Since this testnet-in-box uses Bitcoin Core&#39;s (bitcoind) regtest mode, we are able to generate a block on a private network instantly using a simple command.&lt;/p&gt; &#xA;&lt;p&gt;To generate a block:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ make generate&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To generate more than 1 block:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ make generate BLOCKS=10&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Need to generate at least 100 blocks before there will be a balance in the first wallet&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ make generate BLOCKS=200&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Verify that there is a balance on the first wallet&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ make getinfo&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Generate a wallet address for the second wallet&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ make address2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Sending bitcoins&lt;/h2&gt; &#xA;&lt;p&gt;To send bitcoins that you&#39;ve generated to the second wallet: (be sure to change the ADDRESS value below to wallet address generated in the prior command)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ make sendfrom1 ADDRESS=mxwPtt399zVrR62ebkTWL4zbnV1ASdZBQr AMOUNT=10&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Does the balance show up?&lt;/h2&gt; &#xA;&lt;p&gt;Run the getinfo command again. Does the balance show up? Why not?&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ make getinfo&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Generate another block&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ make generate&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Stopping the testnet-box&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ make stop&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To clean up any files created while running the testnet and restore to the original state:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ make clean&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Using with docker&lt;/h2&gt; &#xA;&lt;p&gt;This testnet-box can be used with &lt;a href=&#34;https://www.docker.com/&#34;&gt;Docker&lt;/a&gt; to run it in an isolated container.&lt;/p&gt; &#xA;&lt;h3&gt;Building docker image&lt;/h3&gt; &#xA;&lt;p&gt;Pull the image&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;docker pull freewil/bitcoin-testnet-box&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;or build it yourself from this directory&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;docker build -t bitcoin-testnet-box .&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Running docker container&lt;/h3&gt; &#xA;&lt;p&gt;The docker image will run two bitcoin nodes in the background and is meant to be attached to allow you to type in commands. The image also exposes the two JSON-RPC ports from the nodes if you want to be able to access them from outside the container.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;$ docker run -t -i -p 19001:19001 -p 19011:19011 freewil/bitcoin-testnet-box&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;or if you built the docker image yourself:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;$ docker run -t -i -p 19001:19001 -p 19011:19011 bitcoin-testnet-box&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Running without docker&lt;/h2&gt; &#xA;&lt;p&gt;To run without docker, one should download the supported Bitcoin core version. To find the supported version, search for the &lt;code&gt;BITCOIN_CORE_VERSION&lt;/code&gt; environment variable in the &lt;code&gt;Dockerfile&lt;/code&gt; file.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>iam-veeramalla/kubernetes-troubleshooting-zero-to-hero</title>
    <updated>2024-04-28T01:37:45Z</updated>
    <id>tag:github.com,2024-04-28:/iam-veeramalla/kubernetes-troubleshooting-zero-to-hero</id>
    <link href="https://github.com/iam-veeramalla/kubernetes-troubleshooting-zero-to-hero" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Learn how to troubleshoot the most common Kubernetes Issues&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;kubernetes-troubleshooting-zero-to-hero&lt;/h1&gt; &#xA;&lt;p&gt;Learn how to troubleshoot the most common Kubernetes Issues&lt;/p&gt; &#xA;&lt;h2&gt;Day-01&lt;/h2&gt; &#xA;&lt;h3&gt;ImagePullBackOff&lt;/h3&gt; &#xA;&lt;p&gt;Video Link - &lt;a href=&#34;https://youtu.be/vGab4v3RWEw&#34;&gt;https://youtu.be/vGab4v3RWEw&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;When a kubelet starts creating containers for a Pod using a container runtime, it might be possible the container is in Waiting state because of ImagePullBackOff.&lt;/p&gt; &#xA;&lt;p&gt;The status ImagePullBackOff means that a container could not start because Kubernetes could not pull a container image for reasons such as&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Invalid image name or&lt;/li&gt; &#xA; &lt;li&gt;Pulling from a private registry without imagePullSecret.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The BackOff part indicates that Kubernetes will keep trying to pull the image, with an increasing back-off delay.&lt;/p&gt; &#xA;&lt;p&gt;Kubernetes raises the delay between each attempt until it reaches a compiled-in limit, which is 300 seconds (5 minutes).&lt;/p&gt; &#xA;&lt;h2&gt;Day-02&lt;/h2&gt; &#xA;&lt;h3&gt;CrashLoopBackOff&lt;/h3&gt; &#xA;&lt;p&gt;When you see &#34;CrashLoopBackOff,&#34; it means that kubelet is trying to run the container, but it keeps failing and crashing. After crashing, Kubernetes tries to restart the container automatically, but if the container keeps failing repeatedly, you end up in a loop of crashes and restarts, thus the term &#34;CrashLoopBackOff.&#34;&lt;/p&gt; &#xA;&lt;p&gt;This situation indicates that something is wrong with the application or the configuration that needs to be fixed.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>spectrocloud/CanvOS</title>
    <updated>2024-04-28T01:37:45Z</updated>
    <id>tag:github.com,2024-04-28:/spectrocloud/CanvOS</id>
    <link href="https://github.com/spectrocloud/CanvOS" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A utility for creating Edge artifacts for deploying Palette Edge clusters.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;CanvOS&lt;/h1&gt; &#xA;&lt;p&gt;CanvOS is designed to leverage the Spectro Cloud Edge Forge architecture to build edge artifacts. These artifacts can then be used by Palette for building edge clusters with little to no touch by end users.&lt;/p&gt; &#xA;&lt;p&gt;With CanvOS, we leverage Earthly to build all of the artifacts required for edge deployments. From the installer iso to the Kubernetes Provider images, CanvOS makes it simple for you to build the images customized to your needs.&lt;/p&gt; &#xA;&lt;p&gt;The base image definitions reside in the Earthfile located in this repo. This defines all of the elements that are required for building the artifacts that can be used by Palette for edge deployments. If customized packages need to be added, simply add the reference to the Dockerfile as you would for any Docker image. When the build command is run, the Earthfile will merge those custom packages into the final image. For a quickstart tutorial see the Knowledgebase section of the Spectro Cloud Docs. There you will find a quickstart tutorial for building your first CanvOS artifacts.&lt;/p&gt; &#xA;&lt;h1 align=&#34;center&#34;&gt; &lt;br&gt; &lt;img alt=&#34;Edge Components&#34; src=&#34;https://raw.githubusercontent.com/spectrocloud/CanvOS/main/images/edge_components.png&#34;&gt; &lt;br&gt; &lt;br&gt; &lt;/h1&gt;&#xA;&lt;h2&gt;Image Build Architecture&lt;/h2&gt; &#xA;&lt;h3&gt;Base Image&lt;/h3&gt; &#xA;&lt;p&gt;From the Kairos project, this is derived from the operating system distribution chosen (currently Ubuntu and OpenSuse-Leap supported). It is pulled down as the base image and some adjustments are made to better support Palette. Those adjustments are used to clean and update the image as well as install some required packages.&lt;/p&gt; &#xA;&lt;h3&gt;Provider Image&lt;/h3&gt; &#xA;&lt;p&gt;From the Base Image, the provider image is used to package in the Kubernetes distribution and version(s) that are part of the build. This layer is required to initialize the system and prepare it for configuration to build the Kubernetes cluster.&lt;/p&gt; &#xA;&lt;h3&gt;Installer Image&lt;/h3&gt; &#xA;&lt;p&gt;From the base image, this image is used to provide the initial flashing of a device (bare-metal or virtual machine). This image contains the user-data configuration that has been provided in &lt;code&gt;user-data&lt;/code&gt;. It will also contain the contents of any content bundle for pre-staged builds. Pre-staged builds can be used to embed all of the artifacts that are required to build a cluster. These artifacts include Helm charts, manifests, and container images. These images are loaded into containerd when the cluster is initialized elminating the need for the initial download. For more information on how to build pre-loaded content checkout the Palette Docs at &lt;a href=&#34;https://docs.spectrocloud.com/clusters/edge/edgeforge-workflow/build-content-bundle&#34;&gt;Build your Own Content&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Custom Configuration&lt;/h3&gt; &#xA;&lt;p&gt;For advanced use cases, there may be a need to add additional packages not included in the &lt;a href=&#34;https://github.com/kairos-io/kairos/tree/master/images&#34;&gt;Base Images&lt;/a&gt;. If those packages or configuration elements need to be added, they can be included in the empty &lt;code&gt;Dockerfile&lt;/code&gt; located in this repo and they will be included in the build process and output artifacts.&lt;/p&gt; &#xA;&lt;h3&gt;Basic Usage&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Clone the repo at &lt;a href=&#34;https://github.com/spectrocloud/CanvOS.git&#34;&gt;CanvOS&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Note: If you are building the images behind a proxy server, you may need to configure your git to let it use your proxy server.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git config --global http.proxy &amp;lt;your-proxy-server&amp;gt;&#xA;git config --global https.proxy &amp;lt;your-proxy-server&amp;gt;&#xA;git config --global http.sslCAinfo &amp;lt;your-cert-path&amp;gt;&#xA;git config --global https.sslCAinfo &amp;lt;your-cert-path&amp;gt;&#xA;# git config --global http.sslVerify False&#xA;# git config --global https.sslVerify False&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git clone https://github.com/spectrocloud/CanvOS.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Sample Output&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;Cloning into &#39;CanvOS&#39;...&#xA;remote: Enumerating objects: 133, done.&#xA;remote: Counting objects: 100% (133/133), done.&#xA;remote: Compressing objects: 100% (88/88), done.&#xA;Receiving objects: 100% (133/133), 40.16 KiB | 5.02 MiB/s, done.&#xA;Resolving deltas: 100% (60/60), done.&#xA;remote: Total 133 (delta 60), reused 101 (delta 32), pack-reused 0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Change into the &lt;code&gt;CanvOS&lt;/code&gt; directory that was created.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cd CanvOS&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;View Available tags&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git tag&#xA;&#xA;v3.3.3&#xA;v3.4.0&#xA;v3.4.1&#xA;v3.4.3&#xA;&#xA;v4.1.0&#xA;v4.2.3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;Checkout the desired tag&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git checkout &amp;lt;tag version&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Sample Output&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git checkout v4.2.3&#xA;Note: switching to &#39;v4.2.3&#39;.&#xA;&#xA;You are in &#39;detached HEAD&#39; state. You can look around, make experimental&#xA;changes and commit them, and you can discard any commits you make in this&#xA;state without impacting any branches by switching back to a branch.&#xA;&#xA;If you want to create a new branch to retain commits you create, you may&#xA;do so (now or later) by using -c with the switch command. Example:&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;5&#34;&gt; &#xA; &lt;li&gt;Copy the .arg.template file to .arg&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cp .arg.template .arg&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;6&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;To build RHEL core, RHEL FIPS or Ubuntu fips, sles base images switch to respective directories and build the base image. The base image built can be passed as argument to build the installer and provider images. Follow the instructions in the respective sub-folders (rhel-fips, ubuntu-fips) to create base images. For ubuntu-fips, this image can be used as base image - &lt;code&gt;gcr.io/spectro-dev-public/ubuntu-focal-fips:v4.2_20231226&lt;/code&gt; Skip this step if your base image is ubuntu or opensuse-leap. If you are building ubuntu or opensuse-leap installer images, do not pass the BASE_IMAGE attribute as an arg to build command.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Modify the &lt;code&gt;.arg&lt;/code&gt; file as needed. Primarily, you must define the tag you want to use for your images. For example, if the operating system is &lt;code&gt;ubuntu&lt;/code&gt; and the tag is &lt;code&gt;demo&lt;/code&gt;, the image artefact will name as &lt;code&gt;ttl.sh/ubuntu:k3s-1.25.2-v3.4.3-demo&lt;/code&gt;. The &lt;strong&gt;.arg&lt;/strong&gt; file defines the following variables:&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Parameter&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Default Value&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;CUSTOM_TAG&lt;/td&gt; &#xA;   &lt;td&gt;Environment name for provider image tagging. The default value is &lt;code&gt;demo&lt;/code&gt;.&lt;/td&gt; &#xA;   &lt;td&gt;String&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;demo&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;IMAGE_REGISTRY&lt;/td&gt; &#xA;   &lt;td&gt;Image registry name that will store the image artifacts. The default value points to the &lt;em&gt;ttl.sh&lt;/em&gt; image registry, an anonymous and ephemeral Docker image registry where images live for a maximum of 24 hours by default. If you wish to make the images exist longer than 24 hours, you can use any other image registry to suit your needs.&lt;/td&gt; &#xA;   &lt;td&gt;String&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;ttl.sh&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;OS_DISTRIBUTION&lt;/td&gt; &#xA;   &lt;td&gt;OS distribution of your choice. For example, it can be &lt;code&gt;ubuntu&lt;/code&gt;, &lt;code&gt;opensuse-leap&lt;/code&gt;, &lt;code&gt;rhel&lt;/code&gt; or &lt;code&gt;sles&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;String&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;ubuntu&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;IMAGE_REPO&lt;/td&gt; &#xA;   &lt;td&gt;Image repository name in your chosen registry.&lt;/td&gt; &#xA;   &lt;td&gt;String&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;$OS_DISTRIBUTION&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;OS_VERSION&lt;/td&gt; &#xA;   &lt;td&gt;OS version. For Ubuntu, the possible values are &lt;code&gt;20&lt;/code&gt;, and &lt;code&gt;22&lt;/code&gt;. Whereas for openSUSE Leap, the possible value is &lt;code&gt;15.4&lt;/code&gt;. For sles, possible values are &lt;code&gt;5.4&lt;/code&gt;. This example uses &lt;code&gt;22&lt;/code&gt; for Ubuntu.&lt;/td&gt; &#xA;   &lt;td&gt;String&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;22&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;K8S_DISTRIBUTION&lt;/td&gt; &#xA;   &lt;td&gt;Kubernetes distribution name. It can be one of these: &lt;code&gt;k3s&lt;/code&gt;, &lt;code&gt;rke2&lt;/code&gt;, &lt;code&gt;kubeadm&lt;/code&gt;, or &lt;code&gt;kubeadm-fips&lt;/code&gt;.&lt;/td&gt; &#xA;   &lt;td&gt;String&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;k3s&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ISO_NAME&lt;/td&gt; &#xA;   &lt;td&gt;Name of the Edge installer ISO image. In this example, the name is &lt;em&gt;palette-edge-installer&lt;/em&gt;.&lt;/td&gt; &#xA;   &lt;td&gt;String&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;palette-edge-installer&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ARCH&lt;/td&gt; &#xA;   &lt;td&gt;Type of platform to use for the build. Used for Cross Platform Build (arm64 to amd64 as example).&lt;/td&gt; &#xA;   &lt;td&gt;string&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;amd64&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;BASE_IMAGE&lt;/td&gt; &#xA;   &lt;td&gt;Base image to be used for building installer and provider images.&lt;/td&gt; &#xA;   &lt;td&gt;String&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;FIPS_ENABLED&lt;/td&gt; &#xA;   &lt;td&gt;to generate FIPS compliant binaries. &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;string&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;HTTP_PROXY&lt;/td&gt; &#xA;   &lt;td&gt;URL of the HTTP Proxy server to be used if needed (Optional)&lt;/td&gt; &#xA;   &lt;td&gt;string&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;HTTPS_PROXY&lt;/td&gt; &#xA;   &lt;td&gt;URL of the HTTPS Proxy server to be used if needed (Optional)&lt;/td&gt; &#xA;   &lt;td&gt;string&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;NO_PROXY&lt;/td&gt; &#xA;   &lt;td&gt;URLS that should be excluded from proxying (Optional)&lt;/td&gt; &#xA;   &lt;td&gt;string&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;PROXY_CERT_PATH&lt;/td&gt; &#xA;   &lt;td&gt;Absolute path of the SSL Proxy certificate in PEM format if needed (Optional)&lt;/td&gt; &#xA;   &lt;td&gt;string&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;UPDATE_KERNEL&lt;/td&gt; &#xA;   &lt;td&gt;Determines whether to upgrade the Kernel version to the latest from the upstream OS provider&lt;/td&gt; &#xA;   &lt;td&gt;boolean&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;DISABLE_SELINUX&lt;/td&gt; &#xA;   &lt;td&gt;Disable selinux in the operating system. Some applications (like Kubevirt) do not like selinux&lt;/td&gt; &#xA;   &lt;td&gt;boolean&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;CLUSTERCONFIG&lt;/td&gt; &#xA;   &lt;td&gt;Path of the cluster config&lt;/td&gt; &#xA;   &lt;td&gt;string&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;ol start=&#34;8&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;(Optional) If you are building the images behind a proxy server, you may need to modify your docker daemon settings to let it use your proxy server. You can refer this &lt;a href=&#34;https://docs.docker.com/config/daemon/systemd/#httphttps-proxy&#34;&gt;tutorial&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Build the images with the following command. Use the &lt;code&gt;system.uri&lt;/code&gt; output when creating the cluster profile for the Edge host.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;./earthly.sh +build-all-images --ARCH=amd64&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To build FIPS complaint images or ARM images, specify the BASE_IMAGE and ARCH in the .arg file or as command line arguments. &lt;code&gt;k3s&lt;/code&gt; does not FIPS and rke2 is by default &lt;code&gt;FIPS&lt;/code&gt; compliant.&lt;/p&gt; &#xA;&lt;p&gt;To build just the installer image&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;./earthly.sh +iso --ARCH=amd64&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To build the provider images&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;./earthly.sh +build-provider-images --ARCH=amd64&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To build the fips enabled ubuntu installer image&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;./earthly.sh +iso --BASE_IMAGE=gcr.io/spectro-dev-public/ubuntu-focal-fips:v4.2_20231226 --FIPS_ENABLED=true --ARCH=amd64 --PE_VERSION=v4.2.3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Output&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;###################################################################################################&#xA;&#xA;PASTE THE CONTENTS BELOW INTO YOUR CLUSTER PROFILE IN PALETTE BELOW THE &#34;OPTIONS&#34; ATTRIBUTE&#xA;&#xA;###################################################################################################&#xA;&#xA;&#xA;system.uri: &#34;{{ .spectro.pack.edge-native-byoi.options.system.registry }}/{{ .spectro.pack.edge-native-byoi.options.system.repo }}:{{ .spectro.pack.edge-native-byoi.options.system.k8sDistribution }}-{{ .spectro.system.kubernetes.version }}-{{ .spectro.pack.edge-native-byoi.options.system.peVersion }}-{{ .spectro.pack.edge-native-byoi.options.system.customTag }}&#34;&#xA;&#xA;&#xA;system.registry: ttl.sh&#xA;system.repo: ubuntu&#xA;system.k8sDistribution: k3s&#xA;system.osName: ubuntu&#xA;system.peVersion: v4.2.3&#xA;system.customTag: demo&#xA;system.osVersion: 22&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;10&#34;&gt; &#xA; &lt;li&gt;Validate the expected artifacts are created, the ISO image and the provider OS images.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;ls build/ &amp;amp;&amp;amp; docker images&#xA;&#xA;palette-edge-installer.iso      &#xA;palette-edge-installer.iso.sha256  &#xA;&#xA;# Output&#xA;REPOSITORY                                     TAG                                  IMAGE ID       CREATED        SIZE&#xA;ttl.sh/ubuntu                                  k3s-1.24.6-v4.2.3-demo               cad8acdd2797   17 hours ago   4.62GB&#xA;ttl.sh/ubuntu                                  k3s-1.24.6-v4.2.3-demo_linux_amd64   cad8acdd2797   17 hours ago   4.62GB&#xA;ttl.sh/ubuntu                                  k3s-1.25.2-v4.2.3-demo               f6e490f53971   17 hours ago   4.62GB&#xA;ttl.sh/ubuntu                                  k3s-1.25.2-v4.2.3-demo_linux_amd64   f6e490f53971   17 hours ago   4.62GB&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Earthly is a multi-architecture build tool. In this example we are building images for AMD64 hardware which is reflected by the tags above. In the future we will support ARM64 builds and those tags will be included. We only need to push the image tag that DOES NOT have the architecture reference i.e &lt;code&gt;linux_amd64&lt;/code&gt; in the above example.&lt;/p&gt; &#xA;&lt;ol start=&#34;11&#34;&gt; &#xA; &lt;li&gt;The provider images are by default not pushed to a registry. You can push the images by using the &lt;code&gt;docker push&lt;/code&gt; command and reference the created images.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker push ttl.sh/ubuntu:k3s-1.25.2-v4.2.3-demo &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;⚠️ The default registry, &lt;a href=&#34;https://ttl.sh/&#34;&gt;ttl.sh&lt;/a&gt; is a short-lived registry. Images in the ttl.sh registry have a default time to live of 24 hours. Once the time limit is up, the images will automatically be removed. To use a permanent registry, set the &lt;code&gt;.arg&lt;/code&gt; file&#39;s &lt;code&gt;IMAGE_REGISTRY&lt;/code&gt; parameter with the URL of your image registry.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ol start=&#34;12&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;Create a cluster profile using the command output. Use the &lt;a href=&#34;https://docs.spectrocloud.com/clusters/edge/site-deployment/model-profile&#34;&gt;Model Edge Cluster Profile&lt;/a&gt; to help you complete this step.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Flash VM or Baremetal device with the generated ISO. Refer to the &lt;a href=&#34;https://docs.spectrocloud.com/clusters/edge/site-deployment/stage&#34;&gt;Prepare Edge Host for Installation&lt;/a&gt; guide for additonal guidance.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Register the Edge host with Palette. Checkout the &lt;a href=&#34;https://docs.spectrocloud.com/clusters/edge/site-deployment/site-installation/edge-host-registration&#34;&gt;Register Edge Host&lt;/a&gt; guide.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Build a cluster in &lt;a href=&#34;https://console.spectrocloud.com&#34;&gt;Palette&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;How-Tos&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/spectrocloud/CanvOS/main/%5Bhttps://docs.spectrocloud.com/clusters/edge/edgeforge-workflow/palette-canvos%5D(https://deploy-preview-1318--docs-spectrocloud.netlify.app/clusters/edge/edgeforge-workflow/palette-canvos)&#34;&gt;Building Edge Native Artifacts&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Building ARM64 Artifacts for Nvidia Jetson devices&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Your .arg file should contain these values&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;BASE_IMAGE=quay.io/kairos/ubuntu:20.04-core-arm64-nvidia-jetson-agx-orin-v2.4.3&#xA;ARCH=arm64&#xA;platform=linux/arm64&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;./earthly.sh +build-all-images&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
</feed>