<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dockerfile Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-10-22T01:50:04Z</updated>
  <subtitle>Weekly Trending of Dockerfile in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>fly-apps/dockerfile-rails</title>
    <updated>2023-10-22T01:50:04Z</updated>
    <id>tag:github.com,2023-10-22:/fly-apps/dockerfile-rails</id>
    <link href="https://github.com/fly-apps/dockerfile-rails" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Provides a Rails generator to produce Dockerfiles and related files.&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;Provides a Rails generator to produce Dockerfiles and related files. This is being proposed as the generator to be included in Rails 7.1, and a substantial number of pull requests along those lines have already been merged. This repository contains fixes and features beyond those pull requests. Highlights:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Supports all &lt;a href=&#34;https://guides.rubyonrails.org/maintenance_policy.html&#34;&gt;Rails supported releases&lt;/a&gt;, not just Rails 7.1, and likely works with a number of previous releases.&lt;/li&gt; &#xA; &lt;li&gt;Can be customized using flags on the &lt;code&gt;generate dockerfile&lt;/code&gt; command, and rerun to produce a custom tailored dockerfile based on detecting the actual features used by your application.&lt;/li&gt; &#xA; &lt;li&gt;Will set &lt;code&gt;.node_version&lt;/code&gt;, &lt;code&gt;packageManager&lt;/code&gt; and install gems if needed to deploy your application.&lt;/li&gt; &#xA; &lt;li&gt;Can produce a &lt;code&gt;docker-compose.yml&lt;/code&gt; file for locally testing your configuration before deploying.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For more background:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fly-apps/dockerfile-rails/main/MOTIVATION.md&#34;&gt;Motivation&lt;/a&gt; - why this generator was created and what problems it is meant to solve&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fly-apps/dockerfile-rails/main/DEMO.md&#34;&gt;Demos&lt;/a&gt; - scripts to copy and paste into an empty directory to launch demo apps&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fly-apps/dockerfile-rails/main/test/results&#34;&gt;Test Results&lt;/a&gt; - expected outputs for each test&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Install from the root of your Rails project by running the following.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;bundle add dockerfile-rails --optimistic --group development&#xA;bin/rails generate dockerfile&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;--optomistic&lt;/code&gt; flag will make sure you always get the latest &lt;code&gt;dockerfile-rails&lt;/code&gt; gem when you run &lt;code&gt;bundle update &amp;amp;&amp;amp; rails g dockerfile&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;General option:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;--force&lt;/code&gt; - overwrite existing files&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--skip&lt;/code&gt; - keep existing files&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If neither are specified, you will be prompted if a file exists with different contents. If both are specified, &lt;code&gt;--force&lt;/code&gt; takes precedence.&lt;/p&gt; &#xA;&lt;h3&gt;Runtime Optimizations:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;--fullstaq&lt;/code&gt; - use &lt;a href=&#34;https://fullstaqruby.org/&#34;&gt;fullstaq&lt;/a&gt; &lt;a href=&#34;https://github.com/evilmartians/fullstaq-ruby-docker&#34;&gt;images&lt;/a&gt; on &lt;a href=&#34;https://quay.io/repository/evl.ms/fullstaq-ruby?tab=tags&amp;amp;tag=latest&#34;&gt;quay.io&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--jemalloc&lt;/code&gt; - use &lt;a href=&#34;https://jemalloc.net/&#34;&gt;jemalloc&lt;/a&gt; memory allocator&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--swap=n&lt;/code&gt; - allocate swap space. See &lt;a href=&#34;https://man7.org/linux/man-pages/man1/fallocate.1.html#OPTIONS&#34;&gt;falloc options&lt;/a&gt; for suffixes&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--yjit&lt;/code&gt; - enable &lt;a href=&#34;https://github.com/ruby/ruby/raw/master/doc/yjit/yjit.md&#34;&gt;YJIT&lt;/a&gt; optimizing compiler&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Build optimizations:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;--cache&lt;/code&gt; - use build caching to speed up builds&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--parallel&lt;/code&gt; - use multi-stage builds to install gems and node modules in parallel&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Add/remove a Feature:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;--ci&lt;/code&gt; - include test gems in deployed image&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--compose&lt;/code&gt; - generate a &lt;code&gt;docker-compose.yml&lt;/code&gt; file&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--max-idle=n&lt;/code&gt; - exit afer &lt;em&gt;n&lt;/em&gt; seconds of inactivity. Supports &lt;a href=&#34;https://en.wikipedia.org/wiki/ISO_8601#Durations&#34;&gt;iso 8601&lt;/a&gt; and &lt;a href=&#34;https://man7.org/linux/man-pages/man1/sleep.1.html#DESCRIPTION&#34;&gt;sleep&lt;/a&gt; syntaxes. Uses passenger for now, awaiting &lt;a href=&#34;https://github.com/puma/puma/issues/2580&#34;&gt;puma&lt;/a&gt; support.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--nginx&lt;/code&gt; - serve static files via &lt;a href=&#34;https://www.nginx.com/&#34;&gt;nginx&lt;/a&gt;. May require &lt;code&gt;--root&lt;/code&gt; on some targets to access &lt;code&gt;/dev/stdout&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--no-link&lt;/code&gt; - don&#39;t add &lt;a href=&#34;https://docs.docker.com/engine/reference/builder/#copy---link&#34;&gt;--link&lt;/a&gt; to COPY statements. Some tools (like at the moment, &lt;a href=&#34;https://www.redhat.com/en/topics/containers/what-is-buildah&#34;&gt;buildah&lt;/a&gt;) don&#39;t yet support this feature.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--no-lock&lt;/code&gt; - don&#39;t add linux platforms, set &lt;code&gt;BUNDLE_DEPLOY&lt;/code&gt;, or &lt;code&gt;--frozen-lockfile&lt;/code&gt;. May be needed at times to work around a &lt;a href=&#34;https://github.com/rubygems/rubygems/issues/6082#issuecomment-1329756343&#34;&gt;rubygems bug&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--sudo&lt;/code&gt; - install and configure sudo to enable &lt;code&gt;sudo -iu rails&lt;/code&gt; access to full environment&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Error Tracking &amp;amp; Alerting:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;--rollbar&lt;/code&gt; - install gem and a default initializer for &lt;a href=&#34;https://rollbar.com/#&#34;&gt;Rollbar&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--sentry&lt;/code&gt; - install gems and a default initializer for &lt;a href=&#34;https://sentry.io/welcome/&#34;&gt;Sentry&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Add a Database:&lt;/h3&gt; &#xA;&lt;p&gt;Generally the dockerfile generator will be able to determine what dependencies you are actually using. But should you be using DATABASE_URL, for example, at runtime additional support may be needed:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;--litefs&lt;/code&gt; - use &lt;a href=&#34;https://fly.io/docs/litefs/&#34;&gt;LiteFS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--mysql&lt;/code&gt; - add mysql libraries&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--postgresql&lt;/code&gt; - add postgresql libraries&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--redis&lt;/code&gt; - add redis libraries&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--sqlite3&lt;/code&gt; - add sqlite3 libraries&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--sqlserver&lt;/code&gt; - add SQL Server libraries&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Add a package/environment variable/build argument:&lt;/h3&gt; &#xA;&lt;p&gt;Not all of your needs can be determined by scanning your application. For example, I like to add &lt;a href=&#34;https://www.vim.org/&#34;&gt;vim&lt;/a&gt; and &lt;a href=&#34;https://packages.debian.org/bullseye/procps&#34;&gt;procps&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;--add package...&lt;/code&gt; - add one or more debian packages&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--arg=name:value&lt;/code&gt; - add a &lt;a href=&#34;https://docs.docker.com/engine/reference/builder/#arg&#34;&gt;build argument&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--env=name:value&lt;/code&gt; - add an environment variable&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--remove package...&lt;/code&gt; - remove package from &#34;to be added&#34; list&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Args and environment variables can be tailored to a specific build phase by adding &lt;code&gt;-base&lt;/code&gt;, &lt;code&gt;-build&lt;/code&gt;, or &lt;code&gt;-deploy&lt;/code&gt; after the flag name (e.g &lt;code&gt;--add-build freetds-dev --add-deploy freetds-bin&lt;/code&gt;). If no such suffix is found, the default for arg is &lt;code&gt;-base&lt;/code&gt;, and the default for env is &lt;code&gt;-deploy&lt;/code&gt;. Removal of an arg or environment variable is done by leaving the value blank (e.g &lt;code&gt;--env-build=PORT:&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;h3&gt;Configuration:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;--bin-cd&lt;/code&gt; - adjust binstubs to set current working directory &lt;a href=&#34;https://git-scm.com/book/en/v2/Customizing-Git-Git-Configuration#_core_autocrlf&#34;&gt;autocrlf&lt;/a&gt; enabled or may not be able to set bin stubs as executable.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--label=name:value&lt;/code&gt; - specify docker label. Can be used multiple times. See &lt;a href=&#34;https://docs.docker.com/engine/reference/builder/#label&#34;&gt;LABEL&lt;/a&gt; for detail&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--no-prepare&lt;/code&gt; - omit &lt;code&gt;db:prepare&lt;/code&gt;. Useful for cloud platforms with &lt;a href=&#34;https://devcenter.heroku.com/articles/release-phase&#34;&gt;release&lt;/a&gt; phases&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--passenger&lt;/code&gt; - use &lt;a href=&#34;https://www.phusionpassenger.com/&#34;&gt;Phusion Passenger&lt;/a&gt; under &lt;a href=&#34;https://www.nginx.com/&#34;&gt;nginx&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--platform=s&lt;/code&gt; - specify target platform. See &lt;a href=&#34;https://docs.docker.com/engine/reference/builder/#from&#34;&gt;FROM&lt;/a&gt; for details&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--variant=s&lt;/code&gt; - dockerhub ruby variant, defaults to &lt;code&gt;slim&lt;/code&gt;. See &lt;a href=&#34;https://hub.docker.com/_/ruby&#34;&gt;docker official images&lt;/a&gt; for list.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--precompile=defer&lt;/code&gt; - may be needed when your configuration requires access to secrets that are not available at build time. Results in larger images and slower deployments.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--root&lt;/code&gt; - run application as root&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--windows&lt;/code&gt; - make Dockerfile work for Windows users that may have set &lt;code&gt;git config --global core.autocrlf true&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--private-gemserver-domain=gems.example.com&lt;/code&gt; - set the domain name of your private gemserver. This is used to tell bundler for what domain to use the credentials of a private gemserver provided via a docker secret&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Advanced Customization:&lt;/h3&gt; &#xA;&lt;p&gt;There may be times where feature detection plus flags just aren&#39;t enough. As an example, you may wish to configure and run multiple processes.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;--instructions=path&lt;/code&gt; - a dockerfile fragment to be inserted into the final document.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--migration=cmd&lt;/code&gt; - a replacement (generally a script) for &lt;code&gt;db:prepare&lt;/code&gt;/&lt;code&gt;db:migrate&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--procfile=path&lt;/code&gt; - a &lt;a href=&#34;https://github.com/ddollar/foreman#foreman&#34;&gt;Procfile&lt;/a&gt; to use in place of launching Rails directly.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Like with environment variables, packages, and build args, &lt;code&gt;--instructions&lt;/code&gt; can be tailored to a specific build phase by adding &lt;code&gt;-base&lt;/code&gt;, &lt;code&gt;-build&lt;/code&gt;, or &lt;code&gt;-deploy&lt;/code&gt; after the flag name, with the default being &lt;code&gt;-deploy&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Additionaly, if the instructions start with a &lt;a href=&#34;https://en.wikipedia.org/wiki/Shebang_(Unix)&#34;&gt;shebang&lt;/a&gt; instead the file being treated as a Dockerfile fragment, the file is treated as a script and a &lt;code&gt;RUN&lt;/code&gt; statement is added to your Dockerfile instead.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Options are saved between runs into &lt;code&gt;config/dockerfile.yml&lt;/code&gt;. To invert a boolean options, add or remove a &lt;code&gt;no-&lt;/code&gt; prefix from the option name.&lt;/p&gt; &#xA;&lt;h2&gt;Testing&lt;/h2&gt; &#xA;&lt;p&gt;A single invocation of &lt;code&gt;rake test:all&lt;/code&gt; will run all of the tests defined. dockerfile-rails has are three types of tests:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;rake test:rubocop&lt;/code&gt; runs &lt;a href=&#34;https://github.com/rubocop/rubocop&#34;&gt;rubocop&lt;/a&gt; using the same options as the Rails codebase.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;rake test:system&lt;/code&gt; creates a new esbuild application, generates a dockerfile, builds and runs it. As this is time consuming, only one application is tested this way at this time, and a &lt;code&gt;--javascript&lt;/code&gt; example was selected as it exercises a large portion of the features.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;rake test&lt;/code&gt; runs integration tests, as described below&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The current integration testing strategy is to run &lt;code&gt;rails new&lt;/code&gt; and &lt;code&gt;generate dockerfile&lt;/code&gt; with various configurations and compare the generated artifacts with expected results. &lt;code&gt;ARG&lt;/code&gt; values in &lt;code&gt;Dockerfiles&lt;/code&gt; are masked before comparison.&lt;/p&gt; &#xA;&lt;p&gt;Running all integration tests, or even a single individual test can be done as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;rake test&#xA;ruby test/test_minimal.rb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To assist with this process, outputs of tests can be captured automatically. This is useful when adding new tests and when making a change that affects many tests. Be sure to inspect the output (e.g., by using &lt;code&gt;git diff&lt;/code&gt;) before committing.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;rake test:capture&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you are running a single test, the following environment variables settings may be helpful:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;RAILS_ENV=TEST&lt;/code&gt; will match the environment used to produce the captured outputs.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;TEST_CAPTURE=1&lt;/code&gt; will capture test results.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;TEST_KEEP=1&lt;/code&gt; will leave the test app behind for inspection after the test completes.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Historical Links&lt;/h2&gt; &#xA;&lt;p&gt;The following links relate to the coordination between this package and Rails 7.1.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://community.fly.io/t/preparations-for-rails-7-1/9512&#34;&gt;Preparations for Rails 7.1&lt;/a&gt; - &lt;a href=&#34;https://fly.io/&#34;&gt;Fly.io&lt;/a&gt;&#39;s plans and initial discussions with DHH&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://discuss.rubyonrails.org/t/rails-dockerfile-futures/82091/1&#34;&gt;Rails Dockerfile futures&lt;/a&gt; - rationale for a generator&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://fly.io/docs/rails/cookbooks/&#34;&gt;Fly Cookbooks&lt;/a&gt; - deeper dive into Dockerfile design choices&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rails/rails/raw/main/railties/lib/rails/generators/rails/app/templates/Dockerfile.tt&#34;&gt;app/templates/Dockerfile.tt&lt;/a&gt; - current Rails 7.1 template&lt;/li&gt; &#xA; &lt;li&gt;Fly.io &lt;a href=&#34;https://community.fly.io/t/cut-over-to-rails-dockerfile-generator-on-sunday-29-jan-2023/10350&#34;&gt;Cut over to Rails Dockerfile Generator on Sunday 29 Jan 2023&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Fly.io &lt;a href=&#34;https://fly.io/docs/rails/getting-started/dockerfiles/&#34;&gt;FAQ&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;DDH&#39;s &lt;a href=&#34;https://github.com/rails/rails/pull/47372#issuecomment-1438971730&#34;&gt;target&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Parallel efforts for Hanami:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://discourse.hanamirb.org/t/dockerfile-hanami/816&#34;&gt;Proposal&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>danielbeach/data-engineering-practice</title>
    <updated>2023-10-22T01:50:04Z</updated>
    <id>tag:github.com,2023-10-22:/danielbeach/data-engineering-practice</id>
    <link href="https://github.com/danielbeach/data-engineering-practice" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Data Engineering Practice Problems&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Data Engineering Practice Problems&lt;/h2&gt; &#xA;&lt;p&gt;One of the main obstacles of Data Engineering is the large and varied technical skills that can be required on a day-to-day basis.&lt;/p&gt; &#xA;&lt;p&gt;*** Note - If you email a link to your GitHub repo with all the completed exercises, I will send you back a free copy of my ebook Introduction to Data Engineering. ***&lt;/p&gt; &#xA;&lt;p&gt;This aim of this repository is to help you develop and learn those skills. Generally, here are the high level topics that these practice problems will cover.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Python data processing.&lt;/li&gt; &#xA; &lt;li&gt;csv, flat-file, parquet, json, etc.&lt;/li&gt; &#xA; &lt;li&gt;SQL database table design.&lt;/li&gt; &#xA; &lt;li&gt;Python + Postgres, data ingestion and retrieval.&lt;/li&gt; &#xA; &lt;li&gt;PySpark&lt;/li&gt; &#xA; &lt;li&gt;Data cleansing / dirty data.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;How to work on the problems.&lt;/h3&gt; &#xA;&lt;p&gt;You will need two things to work effectively on most all of these problems.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Docker&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;docker-compose&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;All the tools and technologies you need will be packaged into the &lt;code&gt;dockerfile&lt;/code&gt; for each exercise.&lt;/p&gt; &#xA;&lt;p&gt;For each exercise you will need to &lt;code&gt;cd&lt;/code&gt; into that folder and run the &lt;code&gt;docker build&lt;/code&gt; command, that command will be listed in the &lt;code&gt;README&lt;/code&gt; for each exercise, follow those instructions.&lt;/p&gt; &#xA;&lt;h3&gt;Beginner Exercises&lt;/h3&gt; &#xA;&lt;h4&gt;Exercise 1 - Downloading files.&lt;/h4&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://github.com/danielbeach/data-engineering-practice/tree/main/Exercises/Exercise-1&#34;&gt;first exercise&lt;/a&gt; tests your ability to download a number of files from an &lt;code&gt;HTTP&lt;/code&gt; source and unzip them, storing them locally with &lt;code&gt;Python&lt;/code&gt;. &lt;code&gt;cd Exercises/Exercise-1&lt;/code&gt; and see &lt;code&gt;README&lt;/code&gt; in that location for instructions.&lt;/p&gt; &#xA;&lt;h4&gt;Exercise 2 - Web Scraping + Downloading + Pandas&lt;/h4&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://github.com/danielbeach/data-engineering-practice/tree/main/Exercises/Exercise-2&#34;&gt;second exercise&lt;/a&gt; tests your ability perform web scraping, build uris, download files, and use Pandas to do some simple cumulative actions. &lt;code&gt;cd Exercises/Exercise-2&lt;/code&gt; and see &lt;code&gt;README&lt;/code&gt; in that location for instructions.&lt;/p&gt; &#xA;&lt;h4&gt;Exercise 3 - Boto3 AWS + s3 + Python.&lt;/h4&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://github.com/danielbeach/data-engineering-practice/tree/main/Exercises/Exercise-3&#34;&gt;third exercise&lt;/a&gt; tests a few skills. This time we will be using a popular &lt;code&gt;aws&lt;/code&gt; package called &lt;code&gt;boto3&lt;/code&gt; to try to perform a multi-step actions to download some open source &lt;code&gt;s3&lt;/code&gt; data files. &lt;code&gt;cd Exercises/Exercise-3&lt;/code&gt; and see &lt;code&gt;README&lt;/code&gt; in that location for instructions.&lt;/p&gt; &#xA;&lt;h4&gt;Exercise 4 - Convert JSON to CSV + Ragged Directories.&lt;/h4&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://github.com/danielbeach/data-engineering-practice/tree/main/Exercises/Exercise-4&#34;&gt;fourth exercise&lt;/a&gt; focuses more file types &lt;code&gt;json&lt;/code&gt; and &lt;code&gt;csv&lt;/code&gt;, and working with them in &lt;code&gt;Python&lt;/code&gt;. You will have to traverse a ragged directory structure, finding any &lt;code&gt;json&lt;/code&gt; files and converting them to &lt;code&gt;csv&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Exercise 5 - Data Modeling for Postgres + Python.&lt;/h4&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://github.com/danielbeach/data-engineering-practice/tree/main/Exercises/Exercise-5&#34;&gt;fifth exercise&lt;/a&gt; is going to be a little different than the rest. In this problem you will be given a number of &lt;code&gt;csv&lt;/code&gt; files. You must create a data model / schema to hold these data sets, including indexes, then create all the tables inside &lt;code&gt;Postgres&lt;/code&gt; by connecting to the database with &lt;code&gt;Python&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Intermediate Exercises&lt;/h3&gt; &#xA;&lt;h4&gt;Exercise 6 - Ingestion and Aggregation with PySpark.&lt;/h4&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://github.com/danielbeach/data-engineering-practice/tree/main/Exercises/Exercise-6&#34;&gt;sixth exercise&lt;/a&gt; Is going to step it up a little and move onto more popular tools. In this exercise we are going to load some files using &lt;code&gt;PySpark&lt;/code&gt; and then be asked to do some basic aggregation. Best of luck!&lt;/p&gt; &#xA;&lt;h4&gt;Exercise 7 - Using Various PySpark Functions&lt;/h4&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://github.com/danielbeach/data-engineering-practice/tree/main/Exercises/Exercise-7&#34;&gt;seventh exercise&lt;/a&gt; Taking a page out of the previous exercise, this one is focus on using a few of the more common build in PySpark functions &lt;code&gt;pyspark.sql.functions&lt;/code&gt; and applying their usage to real-life problems.&lt;/p&gt; &#xA;&lt;p&gt;Many times to solve simple problems we have to find and use multiple functions available from libraries. This will test your ability to do that.&lt;/p&gt; &#xA;&lt;h4&gt;Exercise 8 - Using DuckDB for Analytics and Transforms.&lt;/h4&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://github.com/danielbeach/data-engineering-practice/tree/main/Exercises/Exercise-8&#34;&gt;eighth exercise&lt;/a&gt; Using new tools is imperative to growing as a Data Engineer. DuckDB is one of those new tools. In this exercise you will have to complete a number of analytical and transformation tasks using DuckDB. This will require an understanding of the functions and documenation of DuckDB.&lt;/p&gt; &#xA;&lt;h4&gt;Exercise 9 - Using Polars lazy computation.&lt;/h4&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://github.com/danielbeach/data-engineering-practice/tree/main/Exercises/Exercise-9&#34;&gt;ninth exercise&lt;/a&gt; Polars is a new Rust based tool with a wonderful Python package that has taken Data Engineering by storm. It&#39;s better than Pandas because it has both SQL Context and supports Lazy evalutation for larger than memory data sets! Show your Lazy skills!&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Field-Robotics-Lab/dockwater</title>
    <updated>2023-10-22T01:50:04Z</updated>
    <id>tag:github.com,2023-10-22:/Field-Robotics-Lab/dockwater</id>
    <link href="https://github.com/Field-Robotics-Lab/dockwater" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Docker images used across multiple repositories supporting simulation of water-related robotics&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;dockwater&lt;/h1&gt; &#xA;&lt;p&gt;Docker images used across multiple repositories supporting simulation of water-related robotics&lt;/p&gt; &#xA;&lt;h2&gt;Distributions&lt;/h2&gt; &#xA;&lt;p&gt;This repository supports baseline images for running Gazebo on the following ROS distributions:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Humble (Ubuntu 22.04 Jammy Jellyfish / ROS 2 Humble Hawksbill / Gazebo Garden)&lt;/li&gt; &#xA; &lt;li&gt;Galactic (Ubuntu 20.04 Focal Fossa / ROS 2 Galactic Geochelone / Ignition Fortress)&lt;/li&gt; &#xA; &lt;li&gt;Noetic (Ubuntu 20.04 Focal Fossa / ROS Noetic Ninjemys / Gazebo 11)&lt;/li&gt; &#xA; &lt;li&gt;Melodic (Ubuntu 18.04 Bionic Beaver / ROS Melodic Morenia / Gazebo 9)&lt;/li&gt; &#xA; &lt;li&gt;Kinetic (Ubuntu 18.04 Xenial Xerus / ROS Kinetic Kame / Gazebo 7)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Dockerhub&lt;/h2&gt; &#xA;&lt;p&gt;The latest images corresponding to each of the three distributions above are stored in the &lt;a href=&#34;https://hub.docker.com/r/npslearninglab/watery_robots&#34;&gt;&lt;code&gt;npslearninglab/watery_robots&lt;/code&gt; repository on Dockerhub&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Build Instructions&lt;/h2&gt; &#xA;&lt;p&gt;Build the base image with the &lt;code&gt;build.bash&lt;/code&gt; script.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;DIST=(noetic | melodic | kinetic)&#xA;./build.bash ${DIST}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run the image locally using the &lt;code&gt;run.bash&lt;/code&gt; script:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./run.bash ${DIST}:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Build for CI&lt;/h2&gt; &#xA;&lt;p&gt;To build an image for use in continuous integration pipelines, we need to use a slightly different &lt;code&gt;rocker&lt;/code&gt; command from the one that&#39;s called in the &lt;code&gt;run.bash&lt;/code&gt; script. The reason is to avoid pulling in local user information or mounting the local home directory.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;rocker --dev-helpers --nvidia --user --user-override-name=developer ${image_name}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: The &lt;code&gt;--user-override-name&lt;/code&gt; option is currently only available in the latest build (following the rocker &lt;a href=&#34;https://github.com/osrf/rocker#development&#34;&gt;Development installation instructions&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;h2&gt;Tag and push&lt;/h2&gt; &#xA;&lt;p&gt;The image resulting from the &lt;code&gt;rocker&lt;/code&gt; command will be unnamed. To push to a repository, look up the ID with &lt;code&gt;docker image ls&lt;/code&gt; and apply the appropriate tag:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker tag &amp;lt;ID&amp;gt; &amp;lt;repository_namespace&amp;gt;/&amp;lt;repository&amp;gt;:&amp;lt;tag&amp;gt;&#xA;docker push &amp;lt;repository_namespace&amp;gt;/&amp;lt;repository&amp;gt;:&amp;lt;tag&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>