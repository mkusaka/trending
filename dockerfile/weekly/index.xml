<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dockerfile Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-03-17T01:44:03Z</updated>
  <subtitle>Weekly Trending of Dockerfile in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>FoloToy/folotoy-server-self-hosting</title>
    <updated>2024-03-17T01:44:03Z</updated>
    <id>tag:github.com,2024-03-17:/FoloToy/folotoy-server-self-hosting</id>
    <link href="https://github.com/FoloToy/folotoy-server-self-hosting" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Config files for self-hosting the FoloToy Server. Documents: https://docs.folotoy.com&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;folotoy-server-self-hosting&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/FoloToy/folotoy-server-self-hosting/main/README.md&#34;&gt;English&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/FoloToy/folotoy-server-self-hosting/main/README.zh_CN.md&#34;&gt;简体中文&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A customized, self-hosted server for your Folotoys.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Speech in and voice out&lt;/li&gt; &#xA; &lt;li&gt;LLM(Large Language Model) supports OpenAI/Azure OpenAI/Google Gemini/Baidu Qianfan/Dify/Moonshot&lt;/li&gt; &#xA; &lt;li&gt;SST(Sound to Text) supoorts OpenAI Whisper/Azure Speech Service/Azure Whisper/Aliyun ASR/Dify&lt;/li&gt; &#xA; &lt;li&gt;TTS(Text to Sound) supports OpenAI TTS/Azure Speech Service/Elevenlabs/Edge TTS/Aliyun TTS/Netease EmotiVoice/OpenVoice&lt;/li&gt; &#xA; &lt;li&gt;AI Conversational data is published to a &lt;strong&gt;MQTT&lt;/strong&gt; Broker&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;The documentation is available at &lt;a href=&#34;https://docs.folotoy.com/&#34;&gt;docs.folotoy.com&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Quick Start&lt;/h2&gt; &#xA;&lt;p&gt;Copy-paste the below code and press enter&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/FoloToy/folotoy-server-self-hosting.git folotoy-server&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>imagegenius/docker-immich</title>
    <updated>2024-03-17T01:44:03Z</updated>
    <id>tag:github.com,2024-03-17:/imagegenius/docker-immich</id>
    <link href="https://github.com/imagegenius/docker-immich" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Monolithic (Single) Docker Container for Immich&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;a href=&#34;https://github.com/imagegenius/docker-immich&#34;&gt;imagegenius/immich&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/imagegenius/docker-immich/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/imagegenius/docker-immich.svg?color=007EC6&amp;amp;labelColor=555555&amp;amp;logoColor=ffffff&amp;amp;style=for-the-badge&amp;amp;logo=github&#34; alt=&#34;GitHub Release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/imagegenius/docker-immich/packages&#34;&gt;&lt;img src=&#34;https://shields.io/badge/GitHub%20Package-blue?logo=github&amp;amp;logoColor=ffffff&amp;amp;style=for-the-badge&#34; alt=&#34;GitHub Package Repository&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://ci.imagegenius.io/job/Docker-Pipeline-Builders/job/docker-immich/job/main/&#34;&gt;&lt;img src=&#34;https://img.shields.io/jenkins/build?labelColor=555555&amp;amp;logoColor=ffffff&amp;amp;style=for-the-badge&amp;amp;jobUrl=https%3A%2F%2Fci.imagegenius.io%2Fjob%2FDocker-Pipeline-Builders%2Fjob%2Fdocker-immich%2Fjob%2Fmain%2F&amp;amp;logo=jenkins&#34; alt=&#34;Jenkins Build&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://ci-tests.imagegenius.io/immich/latest-main/index.html&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/dynamic/yaml?color=007EC6&amp;amp;labelColor=555555&amp;amp;logoColor=ffffff&amp;amp;style=for-the-badge&amp;amp;label=CI&amp;amp;query=CI&amp;amp;url=https%3A%2F%2Fci-tests.imagegenius.io%2Fimmich%2Flatest-main%2Fci-status.yml&#34; alt=&#34;IG CI&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://immich.app/&#34;&gt;Immich&lt;/a&gt; is a high performance self-hosted photo and video backup solution.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://immich.app/&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/27055614/182044984-2ee6d1ed-c4a7-4331-8a4b-64fcde77fe1f.png&#34; alt=&#34;immich&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Supported Architectures&lt;/h2&gt; &#xA;&lt;p&gt;We use Docker manifest for cross-platform compatibility. More details can be found on &lt;a href=&#34;https://github.com/docker/distribution/raw/master/docs/spec/manifest-v2-2.md#manifest-list&#34;&gt;Docker&#39;s website&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To obtain the appropriate image for your architecture, simply pull &lt;code&gt;ghcr.io/imagegenius/immich:latest&lt;/code&gt;. Alternatively, you can also obtain specific architecture images by using tags.&lt;/p&gt; &#xA;&lt;p&gt;This image supports the following architectures:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Architecture&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Available&lt;/th&gt; &#xA;   &lt;th&gt;Tag&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;x86-64&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;amd64-&amp;lt;version tag&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;arm64&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;arm64v8-&amp;lt;version tag&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;armhf&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Version Tags&lt;/h2&gt; &#xA;&lt;p&gt;This image offers different versions via tags. Be cautious when using unstable or development tags, and read their descriptions carefully.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Tag&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Available&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;latest&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;Latest Immich release with an Ubuntu base.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;noml&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;Latest Immich release with an Ubuntu base. Machine-learning is completely removed, making it still compatible with hardware accelaration.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;alpine&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;Latest Immich release with an Alpine base. Machine-learning is completely removed, making it a very lightweight image (can have issues with RAW images).&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Application Setup&lt;/h2&gt; &#xA;&lt;p&gt;The WebUI can be accessed at &lt;code&gt;http://your-ip:8080&lt;/code&gt; Follow the wizard to set up Immich.&lt;/p&gt; &#xA;&lt;p&gt;To use Immich, you need to have PostgreSQL 14/15/16 server with &lt;a href=&#34;https://github.com/tensorchord/pgvecto.rs&#34;&gt;pgvecto.rs&lt;/a&gt; set up externally, and Redis set up externally or within the container using a docker mod.&lt;/p&gt; &#xA;&lt;p&gt;To set up redis using the docker mod, use the following:&lt;/p&gt; &#xA;&lt;p&gt;Set &lt;code&gt;DOCKER_MODS=imagegenius/mods:universal-redis&lt;/code&gt;, and &lt;code&gt;REDIS_HOSTNAME&lt;/code&gt; to &lt;code&gt;localhost&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To use a SSL connection to your PostgreSQL database, include a PostgreSQL URL in the &lt;code&gt;DB_URL&lt;/code&gt; environment variable.&lt;/p&gt; &#xA;&lt;h2&gt;Hardware Acceleration&lt;/h2&gt; &#xA;&lt;h3&gt;Intel Hardware Acceleration&lt;/h3&gt; &#xA;&lt;p&gt;To use Intel Quicksync hardware acceleration:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Ensure your container has access to the &lt;code&gt;/dev/dri&lt;/code&gt; video device.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Add the device to your container by including the following option in your Docker run command:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run --device=/dev/dri:/dev/dri ...&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!TIP] GPU acceleration for Intel via OpenVINO is not yet available.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Nvidia Hardware Acceleration&lt;/h3&gt; &#xA;&lt;p&gt;For Nvidia GPUs with Nvidia/CUDA hardware acceleration:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;First, install the Nvidia container runtime on your host machine. Follow the [installation instructions here](&lt;a href=&#34;https://github.com/NVIDIA/&#34;&gt;https://github.com/NVIDIA/&lt;/a&gt; nvidia-docker).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;After installing &lt;code&gt;nvidia-docker2&lt;/code&gt;, recreate or create a new Docker container using the Nvidia runtime. This can be done in two ways:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;Add both &lt;code&gt;--runtime=nvidia&lt;/code&gt; and &lt;code&gt;NVIDIA_VISIBLE_DEVICES=all&lt;/code&gt; to your Docker run command. Replace &lt;code&gt;all&lt;/code&gt; with a specific GPU&#39;s UUID if needed. Example:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run --runtime=nvidia -e NVIDIA_VISIBLE_DEVICES=all&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Alternatively, use &lt;code&gt;--gpus=all&lt;/code&gt; in your Docker run command. Example:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run --gpus=all ...&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you want to enable GPU acceleration for the machine-learning, add &lt;code&gt;MACHINE_LEARNING_GPU_ACCELERATION=cuda&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Import your existing libraries into Immich&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Mount your existing library folder to &lt;code&gt;/import&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;In your administration settings, include &lt;code&gt;/import&lt;/code&gt; as the external path for your user (if you have multiple users with existing libraries set the external path to &lt;code&gt;/import/&amp;lt;user&amp;gt;&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;In your account settings, add a new library and set the path to &lt;code&gt;/import&lt;/code&gt; or &lt;code&gt;/import/&amp;lt;user&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Example snippets to start creating a container:&lt;/p&gt; &#xA;&lt;h3&gt;Docker Compose&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;---&#xA;version: &#34;2.1&#34;&#xA;services:&#xA;  immich:&#xA;    image: ghcr.io/imagegenius/immich:latest&#xA;    container_name: immich&#xA;    environment:&#xA;      - PUID=1000&#xA;      - PGID=1000&#xA;      - TZ=Etc/UTC&#xA;      - DB_HOSTNAME=192.168.1.x&#xA;      - DB_USERNAME=postgres&#xA;      - DB_PASSWORD=postgres&#xA;      - DB_DATABASE_NAME=immich&#xA;      - REDIS_HOSTNAME=192.168.1.x&#xA;      - DB_PORT=5432 #optional&#xA;      - REDIS_PORT=6379 #optional&#xA;      - REDIS_PASSWORD= #optional&#xA;      - MACHINE_LEARNING_GPU_ACCELERATION= #optional&#xA;      - MACHINE_LEARNING_WORKERS=1 #optional&#xA;      - MACHINE_LEARNING_WORKER_TIMEOUT=120 #optional&#xA;    volumes:&#xA;      - path_to_appdata:/config&#xA;      - path_to_photos:/photos&#xA;      - path_to_imports:/import:ro #optional&#xA;    ports:&#xA;      - 8080:8080&#xA;    restart: unless-stopped&#xA;# This container requires an external application to be run separately to be run separately.&#xA;# By default, ports for the databases are opened, be careful when deploying it&#xA;# Redis:&#xA;  redis:&#xA;    image: redis&#xA;    ports:&#xA;      - 6379:6379&#xA;    container_name: redis&#xA;# PostgreSQL 14:&#xA;  postgres14:&#xA;    image: tensorchord/pgvecto-rs:pg14-v0.2.0&#xA;    ports:&#xA;      - 5432:5432&#xA;    container_name: postgres14&#xA;    environment:&#xA;      POSTGRES_USER: postgres&#xA;      POSTGRES_PASSWORD: postgres&#xA;      POSTGRES_DB: immich&#xA;    volumes:&#xA;      - path_to_postgres:/var/lib/postgresql/data&#xA;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Docker CLI (&lt;a href=&#34;https://docs.docker.com/engine/reference/commandline/cli/&#34;&gt;Click here for more info&lt;/a&gt;)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run -d \&#xA;  --name=immich \&#xA;  -e PUID=1000 \&#xA;  -e PGID=1000 \&#xA;  -e TZ=Etc/UTC \&#xA;  -e DB_HOSTNAME=192.168.1.x \&#xA;  -e DB_USERNAME=postgres \&#xA;  -e DB_PASSWORD=postgres \&#xA;  -e DB_DATABASE_NAME=immich \&#xA;  -e REDIS_HOSTNAME=192.168.1.x \&#xA;  -e DB_PORT=5432 `#optional` \&#xA;  -e REDIS_PORT=6379 `#optional` \&#xA;  -e REDIS_PASSWORD= `#optional` \&#xA;  -e MACHINE_LEARNING_GPU_ACCELERATION= `#optional` \&#xA;  -e MACHINE_LEARNING_WORKERS=1 `#optional` \&#xA;  -e MACHINE_LEARNING_WORKER_TIMEOUT=120 `#optional` \&#xA;  -p 8080:8080 \&#xA;  -v path_to_appdata:/config \&#xA;  -v path_to_photos:/photos \&#xA;  -v path_to_imports:/import:ro `#optional` \&#xA;  --restart unless-stopped \&#xA;  ghcr.io/imagegenius/immich:latest&#xA;&#xA;# This container requires an external application to be run separately.&#xA;# By default, ports for the databases are opened, be careful when deploying it&#xA;# Redis:&#xA;docker run -d \&#xA;  --name=redis \&#xA;  -p 6379:6379 \&#xA;  redis&#xA;&#xA;# PostgreSQL 14:&#xA;docker run -d \&#xA;  --name=postgres14 \&#xA;  -e POSTGRES_USER=postgres \&#xA;  -e POSTGRES_PASSWORD=postgres \&#xA;  -e POSTGRES_DB=immich \&#xA;  -v path_to_postgres:/var/lib/postgresql/data \&#xA;  -p 5432:5432 \&#xA;  tensorchord/pgvecto-rs:pg14-v0.2.0&#xA;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Variables&lt;/h2&gt; &#xA;&lt;p&gt;To configure the container, pass variables at runtime using the format &lt;code&gt;&amp;lt;external&amp;gt;:&amp;lt;internal&amp;gt;&lt;/code&gt;. For instance, &lt;code&gt;-p 8080:80&lt;/code&gt; exposes port &lt;code&gt;80&lt;/code&gt; inside the container, making it accessible outside the container via the host&#39;s IP on port &lt;code&gt;8080&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Variable&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;-p 8080&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;WebUI Port&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;-e PUID=1000&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;UID for permissions - see below for explanation&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;-e PGID=1000&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;GID for permissions - see below for explanation&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;-e TZ=Etc/UTC&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Specify a timezone to use, see this &lt;a href=&#34;https://en.wikipedia.org/wiki/List_of_tz_database_time_zones#List&#34;&gt;list&lt;/a&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;-e DB_HOSTNAME=192.168.1.x&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;PostgreSQL Host&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;-e DB_USERNAME=postgres&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;PostgreSQL Username&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;-e DB_PASSWORD=postgres&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;PostgreSQL Password&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;-e DB_DATABASE_NAME=immich&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;PostgreSQL Database Name&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;-e REDIS_HOSTNAME=192.168.1.x&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Redis Hostname&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;-e DB_PORT=5432&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;PostgreSQL Port&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;-e REDIS_PORT=6379&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Redis Port&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;-e REDIS_PASSWORD=&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Redis password&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;-e MACHINE_LEARNING_GPU_ACCELERATION=&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Enable cuda acceleration by setting the value to &#39;cuda&#39;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;-e MACHINE_LEARNING_WORKERS=1&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Machine learning workers&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;-e MACHINE_LEARNING_WORKER_TIMEOUT=120&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Machine learning worker timeout&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;-v /config&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Contains machine learning models (~1.5GB with default models)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;-v /photos&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Contains all the photos uploaded to Immich&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;-v /import:ro&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;This folder will be periodically scanned, contents will be automatically imported into Immich&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Umask for running applications&lt;/h2&gt; &#xA;&lt;p&gt;All of our images allow overriding the default umask setting for services started within the containers using the optional -e UMASK=022 option. Note that umask works differently than chmod and subtracts permissions based on its value, not adding. For more information, please refer to the Wikipedia article on umask &lt;a href=&#34;https://en.wikipedia.org/wiki/Umask&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;User / Group Identifiers&lt;/h2&gt; &#xA;&lt;p&gt;To avoid permissions issues when using volumes (&lt;code&gt;-v&lt;/code&gt; flags) between the host OS and the container, you can specify the user (&lt;code&gt;PUID&lt;/code&gt;) and group (&lt;code&gt;PGID&lt;/code&gt;). Make sure that the volume directories on the host are owned by the same user you specify, and the issues will disappear.&lt;/p&gt; &#xA;&lt;p&gt;Example: &lt;code&gt;PUID=1000&lt;/code&gt; and &lt;code&gt;PGID=1000&lt;/code&gt;. To find your PUID and PGID, run &lt;code&gt;id user&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  $ id username&#xA;    uid=1000(dockeruser) gid=1000(dockergroup) groups=1000(dockergroup)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Updating the Container&lt;/h2&gt; &#xA;&lt;p&gt;Most of our images are static, versioned, and require an image update and container recreation to update the app. We do not recommend or support updating apps inside the container. Check the &lt;a href=&#34;https://raw.githubusercontent.com/imagegenius/docker-immich/main/#application-setup&#34;&gt;Application Setup&lt;/a&gt; section for recommendations for the specific image.&lt;/p&gt; &#xA;&lt;p&gt;Instructions for updating containers:&lt;/p&gt; &#xA;&lt;h3&gt;Via Docker Compose&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Update all images: &lt;code&gt;docker-compose pull&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;or update a single image: &lt;code&gt;docker-compose pull immich&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Let compose update all containers as necessary: &lt;code&gt;docker-compose up -d&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;or update a single container: &lt;code&gt;docker-compose up -d immich&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;You can also remove the old dangling images: &lt;code&gt;docker image prune&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Via Docker Run&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Update the image: &lt;code&gt;docker pull ghcr.io/imagegenius/immich:latest&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Stop the running container: &lt;code&gt;docker stop immich&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Delete the container: &lt;code&gt;docker rm immich&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Recreate a new container with the same docker run parameters as instructed above (if mapped correctly to a host folder, your &lt;code&gt;/config&lt;/code&gt; folder and settings will be preserved)&lt;/li&gt; &#xA; &lt;li&gt;You can also remove the old dangling images: &lt;code&gt;docker image prune&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Versions&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;22.01.24:&lt;/strong&gt; - support GPU acceleration with CUDA for machine-learning&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;23.12.23:&lt;/strong&gt; - move to using seperate immich baseimage&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;07.12.23:&lt;/strong&gt; - rebase to ubuntu mantic&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;07.12.23:&lt;/strong&gt; - remove typesense (no longer needed)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;24.09.23:&lt;/strong&gt; - house cleaning&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;24.09.23:&lt;/strong&gt; - add vars for ml workers/timeout&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;29.07.23:&lt;/strong&gt; - remove cuda acceleration for machine-learning&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;23.05.23:&lt;/strong&gt; - rebase to ubuntu lunar and support cuda acceleration for machine-learning&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;22.05.23:&lt;/strong&gt; - deprecate postgresql docker mod&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;18.05.23:&lt;/strong&gt; - add support for facial recognition&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;07.05.23:&lt;/strong&gt; - remove unused &lt;code&gt;JWT_SECRET&lt;/code&gt; env&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;13.04.23:&lt;/strong&gt; - add variables to disable typesense and machine learning&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;10.04.23:&lt;/strong&gt; - fix gunicorn&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;04.04.23:&lt;/strong&gt; - use environment variables to set location of the photos folder&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;09.04.23:&lt;/strong&gt; - Cache is downloaded to the host (/config/transformers)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;01.04.23:&lt;/strong&gt; - remove unused Immich environment variables&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;21.03.23:&lt;/strong&gt; - Add service checks&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;05.03.23:&lt;/strong&gt; - add typesense&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;27.02.23:&lt;/strong&gt; - re-enable aarch64 with pre-release torch build&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;18.02.23:&lt;/strong&gt; - use machine-learning with python&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;11.02.23:&lt;/strong&gt; - use external app block&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;09.02.23:&lt;/strong&gt; - Use Immich environment variables for immich services instead of hosts file&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;09.02.23:&lt;/strong&gt; - execute CLI with the command immich&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;04.02.23:&lt;/strong&gt; - shrink image&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;26.01.23:&lt;/strong&gt; - add unraid migration to readme&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;26.01.23:&lt;/strong&gt; - use find to apply chown to /app, excluding node_modules&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;26.01.23:&lt;/strong&gt; - enable ci testing&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;24.01.23:&lt;/strong&gt; - fix services starting prematurely, causing permission errors.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;23.01.23:&lt;/strong&gt; - add noml image to readme and add aarch64 image to readme, make github release stable&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;21.01.23:&lt;/strong&gt; - BREAKING: Redis is removed. Update missing param_env_vars &amp;amp; opt_param_env_vars for redis &amp;amp; postgres&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;02.01.23:&lt;/strong&gt; - Initial Release.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>