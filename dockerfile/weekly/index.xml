<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dockerfile Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-11-05T01:50:17Z</updated>
  <subtitle>Weekly Trending of Dockerfile in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>inpyjama/c-ninja-listings</title>
    <updated>2023-11-05T01:50:17Z</updated>
    <id>tag:github.com,2023-11-05:/inpyjama/c-ninja-listings</id>
    <link href="https://github.com/inpyjama/c-ninja-listings" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Lower level assembly and C baremetal programming on RISC-V CPUs. Source code listings from the C-Ninja, in Pyjama! book.&lt;/p&gt;&lt;hr&gt;&lt;pre&gt;&lt;code&gt;The code provided as part of this repository is ONLY for learning purposes!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Code Listings for &#34;C-Ninja, in Pyjama!&#34;&lt;/h1&gt; &#xA;&lt;p&gt;This repository contains code listings cited as examples from the book &#34;&lt;strong&gt;C Ninja, in Pyjama!&lt;/strong&gt;&#34;. There is also supporting YouTube playlist that guides through the chapters and concepts.&lt;/p&gt; &#xA;&lt;figure&gt; &#xA; &lt;a href=&#34;https://www.youtube.com/playlist?list=PLFt5JBAXXlQow0PLTdqvaiIUMRa71VQHl&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/inpyjama/c-ninja-listings/main/imgs/youtube.png&#34; alt=&#34;Watch the video&#34;&gt; &#xA;  &lt;figcaption align=&#34;center&#34;&gt;&#xA;   Embedded Systems 101: C Ninja, in Pyjama! The right way to learn C...&#xA;  &lt;/figcaption&gt; &lt;/a&gt; &#xA;&lt;/figure&gt; &#xA;&lt;h1&gt;Environment Setup&lt;/h1&gt; &#xA;&lt;p&gt;All the examples are based on the RISC-V CPU implementing the &lt;strong&gt;rv32i&lt;/strong&gt; instruction set. To avoid having to procure/purchase new hardware, the examples are based on the QEMU emulator that emulates the intended CPU. This makes it easy to learn all the core concepts first before trying to execute them on a real hardware.&lt;/p&gt; &#xA;&lt;p&gt;To ensure that everyone has the same development environment, we create and use a docker container. Following steps guide on setting up the right docker container locally.&lt;/p&gt; &#xA;&lt;h2&gt;1. Setup Docker Container&lt;/h2&gt; &#xA;&lt;p&gt;You would need to have Docker engine/desktop installed and running. If you don&#39;t already have it, get a copy and install it for your Operating system by following steps here: &lt;a href=&#34;https://www.docker.com&#34;&gt;Docker&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;1.1. Mac OS&lt;/h3&gt; &#xA;&lt;p&gt;Execute the following to run the setup after &lt;a href=&#34;https://www.docker.com&#34;&gt;Docker&lt;/a&gt; is installed and actively running on your local machine.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bash setup.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;1.1.1. Testing the container&lt;/h4&gt; &#xA;&lt;figure&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/inpyjama/c-ninja-listings/main/imgs/c-ninja.png&#34;&gt; &#xA; &lt;figcaption align=&#34;center&#34;&gt;&#xA;  Example of correctly setup environment...&#xA; &lt;/figcaption&gt; &#xA;&lt;/figure&gt; &#xA;&lt;p&gt;Open a new terminal window. If you are using the &lt;code&gt;bash&lt;/code&gt; shell then simply execute the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;c-ninja&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;b style=&#34;color:red&#34;&gt;Important:&lt;/b&gt; If you are using some other shell, please change to the &lt;code&gt;bash&lt;/code&gt; shell first by executing the &lt;code&gt;bash&lt;/code&gt; command! Once you are in the bash shell is activated, execute the &lt;code&gt;c-ninja&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;p&gt;Once within the docker container, execute the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;c-ninja@c-ninja-linux ~/Documents&#xA;% cd test&#xA;c-ninja@c-ninja-linux ~/Documents/test&#xA;% make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You should see prints as below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;riscv64-unknown-elf-gcc  -O0 -ggdb -nostdlib -march=rv32i -mabi=ilp32 -Wl,-Tmain.ld main.s -o main.elf&#xA;riscv64-unknown-elf-objcopy -O binary main.elf main.bin&#xA;xxd -e -c 4 -g 4 main.bin&#xA;00000000: 00100093  ....&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;1.2. Linux&lt;/h2&gt; &#xA;&lt;p&gt;The installation of docker is described in detail on the official Docker website: &lt;a href=&#34;https://docs.docker.com/engine/install/ubuntu/#install-using-the-repository&#34;&gt;Docker installation on Linux&lt;/a&gt;. We cover the steps needed to enable Docker Desktop on Ubuntu Desktop.&lt;/p&gt; &#xA;&lt;h4&gt;1.2.1 Installing Docker Desktop&lt;/h4&gt; &#xA;&lt;p&gt;Installing docker Desktop on Linux is not straight forward when compared to Mac and Windows.&lt;/p&gt; &#xA;&lt;h4&gt;1.2.1.1 Update APT sources&lt;/h4&gt; &#xA;&lt;p&gt;Open a terminal and update the &lt;code&gt;apt&lt;/code&gt; sources by executing the following commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Add Docker&#39;s official GPG key:&#xA;sudo apt-get update&#xA;sudo apt-get install ca-certificates curl gnupg&#xA;sudo install -m 0755 -d /etc/apt/keyrings&#xA;curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg&#xA;sudo chmod a+r /etc/apt/keyrings/docker.gpg&#xA;&#xA;# Add the repository to Apt sources:&#xA;echo \&#xA;  &#34;deb [arch=&#34;$(dpkg --print-architecture)&#34; signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \&#xA;  &#34;$(. /etc/os-release &amp;amp;&amp;amp; echo &#34;$VERSION_CODENAME&#34;)&#34; stable&#34; | \&#xA;  sudo tee /etc/apt/sources.list.d/docker.list &amp;gt; /dev/null&#xA;sudo apt-get update&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;1.2.1.2 Install Docker CLI&lt;/h4&gt; &#xA;&lt;p&gt;Install the dependencies along with &lt;code&gt;docker-ce-cli&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin curl qemu-system-x86 pass uidmap&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;1.2.1.3 Install Docker Desktop&lt;/h4&gt; &#xA;&lt;p&gt;Download the &lt;a href=&#34;https://desktop.docker.com/linux/main/amd64/docker-desktop-4.24.0-amd64.deb?utm_source=docker&amp;amp;utm_medium=webreferral&amp;amp;utm_campaign=docs-driven-download-linux-amd64&#34;&gt;Docker Desktop Installer&lt;/a&gt;. This should download the &lt;code&gt;docker-desktop-4.24.0-amd64.deb&lt;/code&gt; file. From the location where this file is downloaded, execute the following command to install the Docker Desktop -&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo dpkg -i docker-desktop-4.24.0-amd64.deb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;1.2.1.4 Fix the launch of Docker Desktop&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo rm /etc/xdg/systemd/user/docker-desktop.service&#xA;systemctl --user enable docker-desktop&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;1.2.2 Create the Image and the Container&lt;/h3&gt; &#xA;&lt;p&gt;Ensure Docker Desktop is running and from within the directory for this current repository run the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bash setup.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will create the image and the container.&lt;/p&gt; &#xA;&lt;h4&gt;1.2.3 Testing Installation&lt;/h4&gt; &#xA;&lt;p&gt;Open a new terminal window. If you are using the &lt;code&gt;bash&lt;/code&gt; shell then simply execute the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;c-ninja&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;b style=&#34;color:red&#34;&gt;1.2.3.1. Linux Host Only: Change Ownership of the directory!&lt;/b&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Once within the docker container, you will need to change the ownership of the contents within &lt;code&gt;~/Documents/&lt;/code&gt; in the container. Execute the command as shown below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;c-ninja@c-ninja-linux ~/Documents&#xA;% sudo chown -R c-ninja .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will change the ownership of the files to the local user &lt;code&gt;c-ninja&lt;/code&gt; within the docker container. After this you should be able to issue &lt;code&gt;cd test; make&lt;/code&gt; as below -&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;c-ninja@c-ninja-linux ~/Documents&#xA;% cd test&#xA;c-ninja@c-ninja-linux ~/Documents/test&#xA;% make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This should result in prints as below, confirming that the environment is set correctly.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;riscv64-unknown-elf-gcc  -O0 -ggdb -nostdlib -march=rv32i -mabi=ilp32 -Wl,-Tmain.ld main.s -o main.elf&#xA;riscv64-unknown-elf-objcopy -O binary main.elf main.bin&#xA;xxd -e -c 4 -g 4 main.bin&#xA;00000000: 00100093  ....&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;1.3. Windows&lt;/h3&gt; &#xA;&lt;p&gt;Execute the following to run the setup after &lt;a href=&#34;https://www.docker.com&#34;&gt;Docker&lt;/a&gt; is installed and actively running on your local machine. You can either double-click this file or execute it from the &lt;code&gt;cmd&lt;/code&gt;/&lt;code&gt;power shell&lt;/code&gt; prompt. This command has been tested on Windows 11.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;setup.bat&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;These commands should download the required Linux image, create a container using it, install all the required packages, create the &lt;code&gt;c-ninja&lt;/code&gt; user, and map the current directory as the &lt;code&gt;~/Documents&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h4&gt;1.3.1. Testing the installation&lt;/h4&gt; &#xA;&lt;p&gt;You should see a new, &lt;code&gt;c-ninja.bat&lt;/code&gt; file generated in the current directory. You can double-click on the file to launch the terminal connected to the docker container.&lt;/p&gt; &#xA;&lt;h2&gt;2. Setup VScode&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://code.visualstudio.com/download&#34;&gt;Download and Install Vscode&lt;/a&gt; for your operating system.&lt;/li&gt; &#xA; &lt;li&gt;Launch VScode, open the terminal, and install the extensions -&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;code --install-extension ms-vscode-remote.remote-containers&#xA;code --install-extension ms-vscode-remote.remote-ssh&#xA;code --install-extension ms-vscode-remote.remote-ssh-edit&#xA;code --install-extension ms-vscode.remote-explorer&#xA;code --install-extension zhwu95.riscv&#xA;code --install-extension ZixuanWang.linkerscript&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Restart VSCode and from the Remote explorer connect to the container.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Copyright&lt;/h1&gt; &#xA;&lt;p&gt;Copyright © 2023 inpyjama.com. All Rights Reserved.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>eoovve/nodejs-argo</title>
    <updated>2023-11-05T01:50:17Z</updated>
    <id>tag:github.com,2023-11-05:/eoovve/nodejs-argo</id>
    <link href="https://github.com/eoovve/nodejs-argo" rel="alternate"></link>
    <summary type="html">&lt;p&gt;node环境通用项目&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;说明 （部署前请仔细阅读完）&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;本项目是针对node环境的paas平台和游戏玩具而生，采用Argo隧道部署节点，集成哪吒探针服务。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;node玩具平台只需上传index.js和package.json即可，paas平台需要docker部署的才上传Dockerfile。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;如需是链接github部署，请先删除README.md说明文件，安全起见，已混淆主代码部分，无任何日志输出。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;不填写ARGO_DOMAIN和ARGO_AUTH两个变量即启用临时隧道，反之则使用固定隧道。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;无需设置NEZHA_TLS,当哪吒端口为443时，自动开启--tls。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;PaaS 平台设置的环境变量，index.js中的1至12行中设置&lt;/p&gt; &#xA;  &lt;table&gt; &#xA;   &lt;thead&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;th&gt;变量名&lt;/th&gt; &#xA;     &lt;th&gt;是否必须&lt;/th&gt; &#xA;     &lt;th&gt;默认值&lt;/th&gt; &#xA;     &lt;th&gt;备注&lt;/th&gt; &#xA;    &lt;/tr&gt; &#xA;   &lt;/thead&gt; &#xA;   &lt;tbody&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;URL&lt;/td&gt; &#xA;     &lt;td&gt;否&lt;/td&gt; &#xA;     &lt;td&gt;&lt;a href=&#34;https://www.google.com&#34;&gt;https://www.google.com&lt;/a&gt;&lt;/td&gt; &#xA;     &lt;td&gt;项目域名&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;PORT&lt;/td&gt; &#xA;     &lt;td&gt;否&lt;/td&gt; &#xA;     &lt;td&gt;3000&lt;/td&gt; &#xA;     &lt;td&gt;监听端口&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;WEB_USERNAME&lt;/td&gt; &#xA;     &lt;td&gt;否&lt;/td&gt; &#xA;     &lt;td&gt;admin&lt;/td&gt; &#xA;     &lt;td&gt;访问list和sub的用户名&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;WEB_PASSWORD&lt;/td&gt; &#xA;     &lt;td&gt;否&lt;/td&gt; &#xA;     &lt;td&gt;password&lt;/td&gt; &#xA;     &lt;td&gt;访问list和sub的密码&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;UUID&lt;/td&gt; &#xA;     &lt;td&gt;否&lt;/td&gt; &#xA;     &lt;td&gt;de04add9-5c68-8bab-870c-08cd5320df00&lt;/td&gt; &#xA;     &lt;td&gt;&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;NEZHA_SERVER&lt;/td&gt; &#xA;     &lt;td&gt;否&lt;/td&gt; &#xA;     &lt;td&gt;&lt;/td&gt; &#xA;     &lt;td&gt;哪吒服务端域名，例如nz.aaa.com&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;NEZHA_PORT&lt;/td&gt; &#xA;     &lt;td&gt;否&lt;/td&gt; &#xA;     &lt;td&gt;5555&lt;/td&gt; &#xA;     &lt;td&gt;当哪吒端口为443时，自动开启tls&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;NEZHA_KEY&lt;/td&gt; &#xA;     &lt;td&gt;否&lt;/td&gt; &#xA;     &lt;td&gt;&lt;/td&gt; &#xA;     &lt;td&gt;哪吒客务端专用KEY&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;ARGO_DOMAIN&lt;/td&gt; &#xA;     &lt;td&gt;否&lt;/td&gt; &#xA;     &lt;td&gt;&lt;/td&gt; &#xA;     &lt;td&gt;argo固定隧道域名&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;ARGO_AUTH&lt;/td&gt; &#xA;     &lt;td&gt;否&lt;/td&gt; &#xA;     &lt;td&gt;&lt;/td&gt; &#xA;     &lt;td&gt;argo固定隧道json或token&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;CFIP&lt;/td&gt; &#xA;     &lt;td&gt;否&lt;/td&gt; &#xA;     &lt;td&gt;skk.moe&lt;/td&gt; &#xA;     &lt;td&gt;节点优选域名或ip&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;NAME&lt;/td&gt; &#xA;     &lt;td&gt;否&lt;/td&gt; &#xA;     &lt;td&gt;ABCD&lt;/td&gt; &#xA;     &lt;td&gt;节点名称前缀，例如：Glitch，Replit&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;   &lt;/tbody&gt; &#xA;  &lt;/table&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;节点信息&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;本项目采用Argo隧道，输出list和sub文件，list文件会在2分钟后自动删除，域名/list或域名/sub查看节点信息。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;其他&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;本项目已添加自动访问保活功能，仅支持不重启停机的平台，需在第2行中添加项目分配的域名。建议配合外部自动访问保活，保活项目地址：&lt;a href=&#34;https://github.com/eoovve/Auto-keep-online&#34;&gt;https://github.com/eoovve/Auto-keep-online&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Replit，Codesanbox，Glitch，Render，koyeb，Fly，Northfrank，back4app，Alwaysdate，Zeabur，Doprax及数十个游戏玩具平台均已测试ok。&lt;/li&gt; &#xA; &lt;li&gt;Render及其他比较严格的容器平台，请使用单docker image部署，单Dockerfile地址：&lt;a href=&#34;https://github.com/eoovve/nodejs-argo-image&#34;&gt;https://github.com/eoovve/nodejs-argo-image&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;免责声明&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;本程序仅供学习了解, 非盈利目的，请于下载后 24 小时内删除, 不得用作任何商业用途, 文字、数据及图片均有所属版权, 如转载须注明来源。&lt;/li&gt; &#xA; &lt;li&gt;使用本程序必循遵守部署免责声明，使用本程序必循遵守部署服务器所在地、所在国家和用户所在国家的法律法规, 程序作者不对使用者任何不当行为负责。&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>kahootali/docker-samples</title>
    <updated>2023-11-05T01:50:17Z</updated>
    <id>tag:github.com,2023-11-05:/kahootali/docker-samples</id>
    <link href="https://github.com/kahootali/docker-samples" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Repo containing dockerized samples of different language applications&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;docker-samples&lt;/h1&gt; &#xA;&lt;p&gt;Repo containing dockerized samples of different language applications&lt;/p&gt;</summary>
  </entry>
</feed>