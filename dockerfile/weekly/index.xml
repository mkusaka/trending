<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dockerfile Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-05-30T02:06:37Z</updated>
  <subtitle>Weekly Trending of Dockerfile in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>kelseyhightower/nocode</title>
    <updated>2022-05-30T02:06:37Z</updated>
    <id>tag:github.com,2022-05-30:/kelseyhightower/nocode</id>
    <link href="https://github.com/kelseyhightower/nocode" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The best way to write secure and reliable applications. Write nothing; deploy nowhere.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;No Code&lt;/h1&gt; &#xA;&lt;p&gt;No code is the best way to write secure and reliable applications. Write nothing; deploy nowhere.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;Start by not writing any code.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is just an example application, but imagine it doing anything you want. Adding new features is easy too:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The possibilities are endless.&lt;/p&gt; &#xA;&lt;h3&gt;Building the Application&lt;/h3&gt; &#xA;&lt;p&gt;Now that you have not done anything it&#39;s time to build your application:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Yep. That&#39;s it. You should see the following output:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Deploying&lt;/h3&gt; &#xA;&lt;p&gt;While you still have not done anything it&#39;s time to deploy your application. By running the following command you can deploy your application absolutely nowhere.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It&#39;s that simple. And when it comes time to scale the application, all you have to do is:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;I know right?&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;You don&#39;t.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>yankils/Simple-DevOps-Project</title>
    <updated>2022-05-30T02:06:37Z</updated>
    <id>tag:github.com,2022-05-30:/yankils/Simple-DevOps-Project</id>
    <link href="https://github.com/yankils/Simple-DevOps-Project" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Simple DevOps Project&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.udemy.com/course/valaxy-devops/?referralCode=8147A5CF4C8C7D9E253F&#34;&gt;&lt;img src=&#34;https://github.com/yankils/Simple-DevOps-Project/raw/master/Devops_course.PNG&#34; alt=&#34;Image&#34; title=&#34;DevOps Project - CI/CD with Jenkins Ansible Docker Kubernetes &#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This Repository is a collection of Implementation documents.&lt;/p&gt; &#xA;&lt;h3&gt;Purpose:&lt;/h3&gt; &#xA;&lt;p&gt;By following this repository you can able to setup a DevOps CI/CD Pipeline using&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;git&lt;/li&gt; &#xA; &lt;li&gt;Jenkins&lt;/li&gt; &#xA; &lt;li&gt;Maven&lt;/li&gt; &#xA; &lt;li&gt;Ansible&lt;/li&gt; &#xA; &lt;li&gt;Docker &amp;amp;&lt;/li&gt; &#xA; &lt;li&gt;Kubernetes&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>saha-rajdeep/kubernetescode</title>
    <updated>2022-05-30T02:06:37Z</updated>
    <id>tag:github.com,2022-05-30:/saha-rajdeep/kubernetescode</id>
    <link href="https://github.com/saha-rajdeep/kubernetescode" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;What this does?&lt;/h2&gt; &#xA;&lt;p&gt;This repo along with &lt;a href=&#34;https://github.com/saha-rajdeep/kubernetesmanifest&#34;&gt;https://github.com/saha-rajdeep/kubernetesmanifest&lt;/a&gt; creates a Jenkins pipeline with GitOps to deploy code into a Kubernetes cluster. CI part is done via Jenkins and CD part via ArgoCD (GitOps).&lt;/p&gt; &#xA;&lt;h2&gt;Jenkins installation&lt;/h2&gt; &#xA;&lt;p&gt;Jenkins is installed on EC2. Follow the instructions on &lt;a href=&#34;https://www.jenkins.io/doc/tutorials/tutorial-for-installing-jenkins-on-AWS/&#34;&gt;https://www.jenkins.io/doc/tutorials/tutorial-for-installing-jenkins-on-AWS/&lt;/a&gt; . You can skip &#34;Configure a Cloud&#34; part for this demo. Please note some commands from this link might give errors, below are the workarounds:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;If you get daemonize error while running the command &lt;code&gt;sudo yum install jenkins java-1.8.0-openjdk-devel -y&lt;/code&gt; then , run the commands from the answer of &lt;a href=&#34;https://stackoverflow.com/questions/68806741/how-to-fix-yum-update-of-jenkins&#34;&gt;https://stackoverflow.com/questions/68806741/how-to-fix-yum-update-of-jenkins&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Install Docker on the EC2 after Jenkins is installed by following the instructions on &lt;a href=&#34;https://serverfault.com/questions/836198/how-to-install-docker-on-aws-ec2-instance-with-ami-ce-ee-update&#34;&gt;https://serverfault.com/questions/836198/how-to-install-docker-on-aws-ec2-instance-with-ami-ce-ee-update&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run &lt;code&gt;sudo chmod 666 /var/run/docker.sock&lt;/code&gt; on the EC2 after Docker is installed.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Install Git on the EC2 by running &lt;code&gt;sudo yum install git&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Jenkins plugins&lt;/h3&gt; &#xA;&lt;p&gt;Install the following plugins for the demo.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Amazon EC2 plugin (No need to set up Configure Cloud after)&lt;/li&gt; &#xA; &lt;li&gt;Docker plugin&lt;/li&gt; &#xA; &lt;li&gt;Docker Pipeline&lt;/li&gt; &#xA; &lt;li&gt;GitHub Integration Plugin&lt;/li&gt; &#xA; &lt;li&gt;Parameterized trigger Plugin&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;ArgoCD installation&lt;/h2&gt; &#xA;&lt;p&gt;Install ArgoCD in your Kubernetes cluster following this link - &lt;a href=&#34;https://argo-cd.readthedocs.io/en/stable/getting_started/&#34;&gt;https://argo-cd.readthedocs.io/en/stable/getting_started/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;How to run!&lt;/h2&gt; &#xA;&lt;p&gt;Follow along with my Udemy Kubernetes course lectures (GitOps Chapter) to understand how it works, detailed setup instructions, with step by step demo. My highest rated Kubernetes EKS discounted Udemy course link in &lt;a href=&#34;http://www.cloudwithraj.com&#34;&gt;www.cloudwithraj.com&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>2398872109/cloudbaserun_app</title>
    <updated>2022-05-30T02:06:37Z</updated>
    <id>tag:github.com,2022-05-30:/2398872109/cloudbaserun_app</id>
    <link href="https://github.com/2398872109/cloudbaserun_app" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;云托管 弹性服务实例 应用汇总&lt;/h1&gt; &#xA;&lt;h2&gt;sockd：socks5 proxy&lt;/h2&gt; &#xA;&lt;p&gt;这个是一个socks5的代理端，通过在云托管的弹性服务实例上启动，可以获得一个socks5的代理服务端，可以适配海外游戏代理、电商店铺管理代理。具体使用说明可见文件夹内 readme 说明。&lt;/p&gt; &#xA;&lt;h2&gt;ssr：shadowsocsr proxy&lt;/h2&gt; &#xA;&lt;p&gt;这个是一个ssr的代理端，通过在云托管的弹性服务实例上启动，可以获得一个ssr的代理服务端，可以适配海外游戏代理、电商店铺管理代理。具体使用说明可见文件夹内 readme 说明。&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>dunglas/symfony-docker</title>
    <updated>2022-05-30T02:06:37Z</updated>
    <id>tag:github.com,2022-05-30:/dunglas/symfony-docker</id>
    <link href="https://github.com/dunglas/symfony-docker" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Docker-based installer and runtime for Symfony. Install: download and `docker-compose up`.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Symfony Docker&lt;/h1&gt; &#xA;&lt;p&gt;A &lt;a href=&#34;https://www.docker.com/&#34;&gt;Docker&lt;/a&gt;-based installer and runtime for the &lt;a href=&#34;https://symfony.com&#34;&gt;Symfony&lt;/a&gt; web framework, with full &lt;a href=&#34;https://symfony.com/doc/current/weblink.html&#34;&gt;HTTP/2&lt;/a&gt;, HTTP/3 and HTTPS support.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/dunglas/symfony-docker/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;If not already done, &lt;a href=&#34;https://docs.docker.com/compose/install/&#34;&gt;install Docker Compose&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;docker-compose build --pull --no-cache&lt;/code&gt; to build fresh images&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;docker-compose up&lt;/code&gt; (the logs will be displayed in the current shell)&lt;/li&gt; &#xA; &lt;li&gt;Open &lt;code&gt;https://localhost&lt;/code&gt; in your favorite web browser and &lt;a href=&#34;https://stackoverflow.com/a/15076602/1352334&#34;&gt;accept the auto-generated TLS certificate&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;docker-compose down --remove-orphans&lt;/code&gt; to stop the Docker containers.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Production, development and CI ready&lt;/li&gt; &#xA; &lt;li&gt;Automatic HTTPS (in dev and in prod!)&lt;/li&gt; &#xA; &lt;li&gt;HTTP/2, HTTP/3 and &lt;a href=&#34;https://symfony.com/doc/current/web_link.html&#34;&gt;Preload&lt;/a&gt; support&lt;/li&gt; &#xA; &lt;li&gt;Built-in &lt;a href=&#34;https://symfony.com/doc/current/mercure.html&#34;&gt;Mercure&lt;/a&gt; hub&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://vulcain.rocks&#34;&gt;Vulcain&lt;/a&gt; support&lt;/li&gt; &#xA; &lt;li&gt;Just 2 services (PHP FPM and Caddy server)&lt;/li&gt; &#xA; &lt;li&gt;Super-readable configuration&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Enjoy!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Docs&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dunglas/symfony-docker/main/docs/build.md&#34;&gt;Build options&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dunglas/symfony-docker/main/docs/existing-project.md&#34;&gt;Using Symfony Docker with an existing project&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dunglas/symfony-docker/main/docs/extra-services.md&#34;&gt;Support for extra services&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dunglas/symfony-docker/main/docs/production.md&#34;&gt;Deploying in production&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dunglas/symfony-docker/main/docs/xdebug.md&#34;&gt;Installing Xdebug&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dunglas/symfony-docker/main/docs/makefile.md&#34;&gt;Using a Makefile&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dunglas/symfony-docker/main/docs/troubleshooting.md&#34;&gt;Troubleshooting&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;p&gt;Created by &lt;a href=&#34;https://dunglas.fr&#34;&gt;Kévin Dunglas&lt;/a&gt;, co-maintained by &lt;a href=&#34;https://twitter.com/maxhelias&#34;&gt;Maxime Helias&lt;/a&gt; and sponsored by &lt;a href=&#34;https://les-tilleuls.coop&#34;&gt;Les-Tilleuls.coop&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>jenkinsci/docker</title>
    <updated>2022-05-30T02:06:37Z</updated>
    <id>tag:github.com,2022-05-30:/jenkinsci/docker</id>
    <link href="https://github.com/jenkinsci/docker" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Docker official jenkins repo&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Official Jenkins Docker image&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://hub.docker.com/r/jenkins/jenkins/&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/stars/jenkins/jenkins.svg?sanitize=true&#34; alt=&#34;Docker Stars&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/jenkins/jenkins/&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/pulls/jenkins/jenkins.svg?sanitize=true&#34; alt=&#34;Docker Pulls&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitter.im/jenkinsci/docker?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/jenkinsci/docker.svg?sanitize=true&#34; alt=&#34;Join the chat at https://gitter.im/jenkinsci/docker&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The Jenkins Continuous Integration and Delivery server &lt;a href=&#34;https://hub.docker.com/r/jenkins/jenkins&#34;&gt;available on Docker Hub&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This is a fully functional Jenkins server. &lt;a href=&#34;https://jenkins.io/&#34;&gt;https://jenkins.io/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;img src=&#34;https://jenkins.io/sites/default/files/jenkins_logo.png&#34;&gt; &#xA;&lt;h1&gt;Usage&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run -p 8080:8080 -p 50000:50000 --restart=on-failure jenkins/jenkins:lts-jdk11&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;NOTE: read the section &lt;a href=&#34;https://raw.githubusercontent.com/jenkinsci/docker/master/#connecting-agents&#34;&gt;&lt;em&gt;Connecting agents&lt;/em&gt;&lt;/a&gt; below for the role of the &lt;code&gt;50000&lt;/code&gt; port mapping.&lt;/p&gt; &#xA;&lt;p&gt;This will store the workspace in &lt;code&gt;/var/jenkins_home&lt;/code&gt;. All Jenkins data lives in there - including plugins and configuration. You will probably want to make that an explicit volume so you can manage it and attach to another container for upgrades :&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run -p 8080:8080 -p 50000:50000 --restart=on-failure -v jenkins_home:/var/jenkins_home jenkins/jenkins:lts-jdk11&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will automatically create a &#39;jenkins_home&#39; &lt;a href=&#34;https://docs.docker.com/storage/volumes/&#34;&gt;docker volume&lt;/a&gt; on the host machine. Docker volumes retain their content even when the container is stopped, started, or deleted.&lt;/p&gt; &#xA;&lt;p&gt;NOTE: Avoid using a &lt;a href=&#34;https://docs.docker.com/storage/bind-mounts/&#34;&gt;bind mount&lt;/a&gt; from a folder on the host machine into &lt;code&gt;/var/jenkins_home&lt;/code&gt;, as this might result in file permission issues (the user used inside the container might not have rights to the folder on the host machine). If you &lt;em&gt;really&lt;/em&gt; need to bind mount jenkins_home, ensure that the directory on the host is accessible by the jenkins user inside the container (jenkins user - uid 1000) or use &lt;code&gt;-u some_other_user&lt;/code&gt; parameter with &lt;code&gt;docker run&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run -d -v jenkins_home:/var/jenkins_home -p 8080:8080 -p 50000:50000 --restart=on-failure jenkins/jenkins:lts-jdk11&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;this will run Jenkins in detached mode with port forwarding and volume added. You can access logs with command &#39;docker logs CONTAINER_ID&#39; in order to check first login token. ID of container will be returned from output of command above.&lt;/p&gt; &#xA;&lt;h2&gt;Backing up data&lt;/h2&gt; &#xA;&lt;p&gt;If you bind mount in a volume - you can simply back up that directory (which is jenkins_home) at any time.&lt;/p&gt; &#xA;&lt;p&gt;This is highly recommended. Treat the jenkins_home directory as you would a database - in Docker you would generally put a database on a volume.&lt;/p&gt; &#xA;&lt;p&gt;If your volume is inside a container - you can use &lt;code&gt;docker cp $ID:/var/jenkins_home&lt;/code&gt; command to extract the data, or other options to find where the volume data is. Note that some symlinks on some OSes may be converted to copies (this can confuse jenkins with lastStableBuild links etc)&lt;/p&gt; &#xA;&lt;p&gt;For more info check Docker docs section on &lt;a href=&#34;https://docs.docker.com/storage/volumes/&#34;&gt;Use volumes&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Setting the number of executors&lt;/h1&gt; &#xA;&lt;p&gt;You can define the number of executors on the Jenkins built-in node using a groovy script. By default it is set to 2 executors, but you can extend the image and change it to your desired number of executors (recommended 0 executors on the built-in node) :&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;executors.groovy&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;import jenkins.model.*&#xA;Jenkins.instance.setNumExecutors(0) // Recommended to not run builds on the built-in node&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and &lt;code&gt;Dockerfile&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;FROM jenkins/jenkins:lts&#xA;COPY --chown=jenkins:jenkins executors.groovy /usr/share/jenkins/ref/init.groovy.d/executors.groovy&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Connecting agents&lt;/h1&gt; &#xA;&lt;p&gt;You can run builds on the controller out of the box. The Jenkins project recommends that no executors be enabled on the controller.&lt;/p&gt; &#xA;&lt;p&gt;In order to connect agents &lt;strong&gt;through an inbound TCP connection&lt;/strong&gt;, map the port: &lt;code&gt;-p 50000:50000&lt;/code&gt;. That port will be used when you connect agents to the controller.&lt;/p&gt; &#xA;&lt;p&gt;If you are only using &lt;a href=&#34;https://plugins.jenkins.io/ssh-slaves/&#34;&gt;SSH (outbound) build agents&lt;/a&gt;, this port is not required, as connections are established from the controller. If you connect agents using web sockets (since Jenkins 2.217), the TCP agent port is not used either.&lt;/p&gt; &#xA;&lt;h1&gt;Passing JVM parameters&lt;/h1&gt; &#xA;&lt;p&gt;You might need to customize the JVM running Jenkins, typically to adjust &lt;a href=&#34;https://www.jenkins.io/doc/book/managing/system-properties/&#34;&gt;system properties&lt;/a&gt; or tweak heap memory settings. Use the &lt;code&gt;JAVA_OPTS&lt;/code&gt; or &lt;code&gt;JENKINS_JAVA_OPTS&lt;/code&gt; environment variables for this purpose :&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run --name myjenkins -p 8080:8080 -p 50000:50000 --restart=on-failure --env JAVA_OPTS=-Dhudson.footerURL=http://mycompany.com jenkins/jenkins:lts-jdk11&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;JVM options specifically for the Jenkins controller should be set through &lt;code&gt;JENKINS_JAVA_OPTS&lt;/code&gt;, as other tools might also respond to the &lt;code&gt;JAVA_OPTS&lt;/code&gt; environment variable.&lt;/p&gt; &#xA;&lt;h1&gt;Configuring logging&lt;/h1&gt; &#xA;&lt;p&gt;Jenkins logging can be configured through a properties file and &lt;code&gt;java.util.logging.config.file&lt;/code&gt; Java property. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;mkdir data&#xA;cat &amp;gt; data/log.properties &amp;lt;&amp;lt;EOF&#xA;handlers=java.util.logging.ConsoleHandler&#xA;jenkins.level=FINEST&#xA;java.util.logging.ConsoleHandler.level=FINEST&#xA;EOF&#xA;docker run --name myjenkins -p 8080:8080 -p 50000:50000 --restart=on-failure --env JAVA_OPTS=&#34;-Djava.util.logging.config.file=/var/jenkins_home/log.properties&#34; -v `pwd`/data:/var/jenkins_home jenkins/jenkins:lts-jdk11&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Configuring reverse proxy&lt;/h1&gt; &#xA;&lt;p&gt;If you want to install Jenkins behind a reverse proxy with a prefix, example: mysite.com/jenkins, you need to add environment variable &lt;code&gt;JENKINS_OPTS=&#34;--prefix=/jenkins&#34;&lt;/code&gt; and then follow the below procedures to configure your reverse proxy, which will depend if you have Apache or Nginx:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.jenkins.io/doc/book/system-administration/reverse-proxy-configuration-apache/&#34;&gt;Apache&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.jenkins.io/doc/book/system-administration/reverse-proxy-configuration-nginx/&#34;&gt;Nginx&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Passing Jenkins launcher parameters&lt;/h1&gt; &#xA;&lt;p&gt;Arguments you pass to docker running the Jenkins image are passed to jenkins launcher, so for example you can run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run jenkins/jenkins:lts-jdk11 --version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will show the Jenkins version, the same as when you run Jenkins from an executable war.&lt;/p&gt; &#xA;&lt;p&gt;You can also define Jenkins arguments via &lt;code&gt;JENKINS_OPTS&lt;/code&gt;. This is useful for customizing arguments to the jenkins launcher in a derived Jenkins image. The following sample Dockerfile uses this option to force use of HTTPS with a certificate included in the image.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;FROM jenkins/jenkins:lts-jdk11&#xA;&#xA;COPY --chown=jenkins:jenkins https.pem /var/lib/jenkins/cert&#xA;COPY --chown=jenkins:jenkins https.key /var/lib/jenkins/pk&#xA;ENV JENKINS_OPTS --httpPort=-1 --httpsPort=8083 --httpsCertificate=/var/lib/jenkins/cert --httpsPrivateKey=/var/lib/jenkins/pk&#xA;EXPOSE 8083&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also change the default agent port for Jenkins by defining &lt;code&gt;JENKINS_SLAVE_AGENT_PORT&lt;/code&gt; in a sample Dockerfile.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;FROM jenkins/jenkins:lts-jdk11&#xA;ENV JENKINS_SLAVE_AGENT_PORT 50001&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or as a parameter to docker,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run --name myjenkins -p 8080:8080 -p 50001:50001 --restart=on-failure --env JENKINS_SLAVE_AGENT_PORT=50001 jenkins/jenkins:lts-jdk11&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: This environment variable will be used to set the &lt;a href=&#34;https://www.jenkins.io/doc/book/managing/system-properties/&#34;&gt;system property&lt;/a&gt; &lt;code&gt;jenkins.model.Jenkins.slaveAgentPort&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;If this property is already set in &lt;strong&gt;JAVA_OPTS&lt;/strong&gt; or &lt;strong&gt;JENKINS_JAVA_OPTS&lt;/strong&gt;, then the value of &lt;code&gt;JENKINS_SLAVE_AGENT_PORT&lt;/code&gt; will be ignored.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h1&gt;Installing more tools&lt;/h1&gt; &#xA;&lt;p&gt;You can run your container as root - and install via apt-get, install as part of build steps via jenkins tool installers, or you can create your own Dockerfile to customise, for example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;FROM jenkins/jenkins:lts-jdk11&#xA;# if we want to install via apt&#xA;USER root&#xA;RUN apt-get update &amp;amp;&amp;amp; apt-get install -y ruby make more-thing-here&#xA;# drop back to the regular jenkins user - good practice&#xA;USER jenkins&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In such a derived image, you can customize your jenkins instance with hook scripts or additional plugins. For this purpose, use &lt;code&gt;/usr/share/jenkins/ref&lt;/code&gt; as a place to define the default JENKINS_HOME content you wish the target installation to look like :&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;FROM jenkins/jenkins:lts-jdk11&#xA;COPY --chown=jenkins:jenkins custom.groovy /usr/share/jenkins/ref/init.groovy.d/custom.groovy&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Preinstalling plugins&lt;/h2&gt; &#xA;&lt;h3&gt;Install plugins script&lt;/h3&gt; &#xA;&lt;p&gt;You can rely on the plugin manager CLI to pass a set of plugins to download with their dependencies. This tool will perform downloads from update centers, and internet access is required for the default update centers.&lt;/p&gt; &#xA;&lt;h3&gt;Setting update centers&lt;/h3&gt; &#xA;&lt;p&gt;During the download, the script will use update centers defined by the following environment variables:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;JENKINS_UC&lt;/code&gt; - Main update center. This update center may offer plugin versions depending on the Jenkins LTS Core versions. Default value: &lt;a href=&#34;https://updates.jenkins.io&#34;&gt;https://updates.jenkins.io&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;JENKINS_UC_EXPERIMENTAL&lt;/code&gt; - &lt;a href=&#34;https://jenkins.io/blog/2013/09/23/experimental-plugins-update-center/&#34;&gt;Experimental Update Center&lt;/a&gt;. This center offers Alpha and Beta versions of plugins. Default value: &lt;a href=&#34;https://updates.jenkins.io/experimental&#34;&gt;https://updates.jenkins.io/experimental&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;JENKINS_INCREMENTALS_REPO_MIRROR&lt;/code&gt; - Defines Maven mirror to be used to download plugins from the &lt;a href=&#34;https://jenkins.io/blog/2018/05/15/incremental-deployment/&#34;&gt;Incrementals repo&lt;/a&gt;. Default value: &lt;a href=&#34;https://repo.jenkins-ci.org/incrementals&#34;&gt;https://repo.jenkins-ci.org/incrementals&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;JENKINS_UC_DOWNLOAD&lt;/code&gt; - Download url of the Update Center. Default value: &lt;code&gt;$JENKINS_UC/download&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;It is possible to override the environment variables in images.&lt;/p&gt; &#xA;&lt;p&gt;&lt;span&gt;❗&lt;/span&gt; Note that changing update center variables &lt;strong&gt;will not&lt;/strong&gt; change the Update Center being used by Jenkins runtime.&lt;/p&gt; &#xA;&lt;h3&gt;Installing Custom Plugins&lt;/h3&gt; &#xA;&lt;p&gt;Installing prebuilt, custom plugins can be accomplished by copying the plugin HPI file into &lt;code&gt;/usr/share/jenkins/ref/plugins/&lt;/code&gt; within the &lt;code&gt;Dockerfile&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;COPY --chown=jenkins:jenkins path/to/custom.hpi /usr/share/jenkins/ref/plugins/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Usage&lt;/h3&gt; &#xA;&lt;p&gt;You can run the CLI manually in Dockerfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Dockerfile&#34;&gt;FROM jenkins/jenkins:lts-jdk11&#xA;RUN jenkins-plugin-cli --plugins pipeline-model-definition github-branch-source:1.8&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Furthermore it is possible to pass a file that contains this set of plugins (with or without line breaks).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Dockerfile&#34;&gt;FROM jenkins/jenkins:lts-jdk11&#xA;COPY --chown=jenkins:jenkins plugins.txt /usr/share/jenkins/ref/plugins.txt&#xA;RUN jenkins-plugin-cli -f /usr/share/jenkins/ref/plugins.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When jenkins container starts, it will check &lt;code&gt;JENKINS_HOME&lt;/code&gt; has this reference content, and copy them there if required. It will not override such files, so if you upgraded some plugins from UI they won&#39;t be reverted on next start.&lt;/p&gt; &#xA;&lt;p&gt;In case you &lt;em&gt;do&lt;/em&gt; want to override, append &#39;.override&#39; to the name of the reference file. E.g. a file named &lt;code&gt;/usr/share/jenkins/ref/config.xml.override&lt;/code&gt; will overwrite an existing &lt;code&gt;config.xml&lt;/code&gt; file in JENKINS_HOME.&lt;/p&gt; &#xA;&lt;p&gt;Also see &lt;a href=&#34;https://issues.jenkins.io/browse/JENKINS-24986&#34;&gt;JENKINS-24986&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Here is an example to get the list of plugins from an existing server:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;JENKINS_HOST=username:password@myhost.com:port&#xA;curl -sSL &#34;http://$JENKINS_HOST/pluginManager/api/xml?depth=1&amp;amp;xpath=/*/*/shortName|/*/*/version&amp;amp;wrapper=plugins&#34; | perl -pe &#39;s/.*?&amp;lt;shortName&amp;gt;([\w-]+).*?&amp;lt;version&amp;gt;([^&amp;lt;]+)()(&amp;lt;\/\w+&amp;gt;)+/\1 \2\n/g&#39;|sed &#39;s/ /:/&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Example Output:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cucumber-testresult-plugin:0.8.2&#xA;pam-auth:1.1&#xA;matrix-project:1.4.1&#xA;script-security:1.13&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For 2.x-derived images, you may also want to&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;RUN echo 2.0 &amp;gt; /usr/share/jenkins/ref/jenkins.install.UpgradeWizard.state&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;to indicate that this Jenkins installation is fully configured. Otherwise a banner will appear prompting the user to install additional plugins, which may be inappropriate.&lt;/p&gt; &#xA;&lt;h3&gt;Updating plugins file&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://github.com/jenkinsci/plugin-installation-manager-tool&#34;&gt;plugin-installation-manager-tool&lt;/a&gt; supports updating the plugin file for you.&lt;/p&gt; &#xA;&lt;p&gt;Example command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-command&#34;&gt;JENKINS_IMAGE=jenkins/jenkins:lts-jdk11&#xA;docker run -it ${JENKINS_IMAGE} bash -c &#34;stty -onlcr &amp;amp;&amp;amp; jenkins-plugin-cli -f /usr/share/jenkins/ref/plugins.txt --available-updates --output txt&#34; &amp;gt;  plugins2.txt&#xA;mv plugins2.txt plugins.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Upgrading&lt;/h2&gt; &#xA;&lt;p&gt;All the data needed is in the /var/jenkins_home directory - so depending on how you manage that - depends on how you upgrade. Generally - you can copy it out - and then &#34;docker pull&#34; the image again - and you will have the latest LTS - you can then start up with -v pointing to that data (/var/jenkins_home) and everything will be as you left it.&lt;/p&gt; &#xA;&lt;p&gt;As always - please ensure that you know how to drive docker - especially volume handling!&lt;/p&gt; &#xA;&lt;h3&gt;Upgrading plugins&lt;/h3&gt; &#xA;&lt;p&gt;By default, plugins will be upgraded if they haven&#39;t been upgraded manually and if the version from the docker image is newer than the version in the container. Versions installed by the docker image are tracked through a marker file.&lt;/p&gt; &#xA;&lt;p&gt;To force upgrades of plugins that have been manually upgraded, run the docker image with &lt;code&gt;-e PLUGINS_FORCE_UPGRADE=true&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The default behaviour when upgrading from a docker image that didn&#39;t write marker files is to leave existing plugins in place. If you want to upgrade existing plugins without marker you may run the docker image with &lt;code&gt;-e TRY_UPGRADE_IF_NO_MARKER=true&lt;/code&gt;. Then plugins will be upgraded if the version provided by the docker image is newer.&lt;/p&gt; &#xA;&lt;h3&gt;Hacking&lt;/h3&gt; &#xA;&lt;p&gt;If you wish to contribute fixes to this repository, please refer to the &lt;a href=&#34;https://raw.githubusercontent.com/jenkinsci/docker/master/HACKING.adoc&#34;&gt;dedicated documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Questions?&lt;/h2&gt; &#xA;&lt;p&gt;We&#39;re on Gitter, &lt;a href=&#34;https://gitter.im/jenkinsci/docker&#34;&gt;https://gitter.im/jenkinsci/docker&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>microsoft/vscode-remote-try-python</title>
    <updated>2022-05-30T02:06:37Z</updated>
    <id>tag:github.com,2022-05-30:/microsoft/vscode-remote-try-python</id>
    <link href="https://github.com/microsoft/vscode-remote-try-python" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Python sample project for trying out the VS Code Remote - Containers extension&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Try Out Development Containers: Python&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://vscode.dev/redirect?url=vscode://ms-vscode-remote.remote-containers/cloneInVolume?url=https://github.com/microsoft/vscode-remote-try-python&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1?label=Remote%20-%20Containers&amp;amp;message=Open&amp;amp;color=blue&amp;amp;logo=visualstudiocode&#34; alt=&#34;Open in Remote - Containers&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A &lt;strong&gt;development container&lt;/strong&gt; is a running &lt;a href=&#34;https://www.docker.com&#34;&gt;Docker&lt;/a&gt; container with a well-defined tool/runtime stack and its prerequisites. You can try out development containers with &lt;strong&gt;&lt;a href=&#34;https://github.com/features/codespaces&#34;&gt;GitHub Codespaces&lt;/a&gt;&lt;/strong&gt; or &lt;strong&gt;&lt;a href=&#34;https://aka.ms/vscode-remote/containers&#34;&gt;Visual Studio Code Remote - Containers&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This is a sample project that lets you try out either option in a few easy steps. We have a variety of other &lt;a href=&#34;https://github.com/search?q=org%3Amicrosoft+vscode-remote-try-&amp;amp;type=Repositories&#34;&gt;vscode-remote-try-*&lt;/a&gt; sample projects, too.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If you already have a codespace or dev container, you can jump to the &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/vscode-remote-try-python/main/#things-to-try&#34;&gt;Things to try&lt;/a&gt; section.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Setting up the development container&lt;/h2&gt; &#xA;&lt;h3&gt;GitHub Codespaces&lt;/h3&gt; &#xA;&lt;p&gt;Follow these steps to open this sample in a Codespace:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Click the Code drop-down menu and select the &lt;strong&gt;Open with Codespaces&lt;/strong&gt; option.&lt;/li&gt; &#xA; &lt;li&gt;Select &lt;strong&gt;+ New codespace&lt;/strong&gt; at the bottom on the pane.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;For more information on creating your codespace, visit the &lt;a href=&#34;https://docs.github.com/en/free-pro-team@latest/github/developing-online-with-codespaces/creating-a-codespace#creating-a-codespace&#34;&gt;GitHub documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;VS Code Remote - Containers&lt;/h3&gt; &#xA;&lt;p&gt;If you already have VS Code and Docker installed, you can click the badge above or &lt;a href=&#34;https://vscode.dev/redirect?url=vscode://ms-vscode-remote.remote-containers/cloneInVolume?url=https://github.com/microsoft/vscode-remote-try-python&#34;&gt;here&lt;/a&gt; to get started. Clicking these links will cause VS Code to automatically install the Remote - Containers extension if needed, clone the source code into a container volume, and spin up a dev container for use.&lt;/p&gt; &#xA;&lt;p&gt;Follow these steps to open this sample in a container using the VS Code Remote - Containers extension:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;If this is your first time using a development container, please ensure your system meets the prerequisites (i.e. have Docker installed) in the &lt;a href=&#34;https://aka.ms/vscode-remote/containers/getting-started&#34;&gt;getting started steps&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To use this repository, you can either open the repository in an isolated Docker volume:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Press &lt;kbd&gt;F1&lt;/kbd&gt; and select the &lt;strong&gt;Remote-Containers: Try a Sample...&lt;/strong&gt; command.&lt;/li&gt; &#xA;   &lt;li&gt;Choose the &#34;Python&#34; sample, wait for the container to start, and try things out! &#xA;    &lt;blockquote&gt; &#xA;     &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Under the hood, this will use the &lt;strong&gt;Remote-Containers: Clone Repository in Container Volume...&lt;/strong&gt; command to clone the source code in a Docker volume instead of the local filesystem. &lt;a href=&#34;https://docs.docker.com/storage/volumes/&#34;&gt;Volumes&lt;/a&gt; are the preferred mechanism for persisting container data.&lt;/p&gt; &#xA;    &lt;/blockquote&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;p&gt;Or open a locally cloned copy of the code:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Clone this repository to your local filesystem.&lt;/li&gt; &#xA;   &lt;li&gt;Press &lt;kbd&gt;F1&lt;/kbd&gt; and select the &lt;strong&gt;Remote-Containers: Open Folder in Container...&lt;/strong&gt; command.&lt;/li&gt; &#xA;   &lt;li&gt;Select the cloned copy of this folder, wait for the container to start, and try things out!&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Things to try&lt;/h2&gt; &#xA;&lt;p&gt;Once you have this sample opened, you&#39;ll be able to work with it like you would locally.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This container runs as a non-root user with sudo access by default. Comment out &lt;code&gt;&#34;remoteUser&#34;: &#34;vscode&#34;&lt;/code&gt; in &lt;code&gt;.devcontainer/devcontainer.json&lt;/code&gt; if you&#39;d prefer to run as root.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Some things to try:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Edit:&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Open &lt;code&gt;app.py&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Try adding some code and check out the language features.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Terminal:&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;Press &lt;kbd&gt;ctrl&lt;/kbd&gt;+&lt;kbd&gt;shift&lt;/kbd&gt;+&lt;kbd&gt;`&lt;/kbd&gt; to open a terminal window.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Type &lt;code&gt;python -m flask run --port 9000 --no-debugger --no-reload&lt;/code&gt; to run the app.&lt;/p&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;The terminal will say your app is &lt;code&gt;Running on http://127.0.0.1:9000/&lt;/code&gt;. Click on the link in the terminal to view your app running in the browser.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Notice that the Python extension is already installed in the container since the &lt;code&gt;.devcontainer/devcontainer.json&lt;/code&gt; lists &lt;code&gt;&#34;ms-python.python&#34;&lt;/code&gt; as an extension to install automatically when the container is created.&lt;/p&gt; &#xA;    &lt;blockquote&gt; &#xA;     &lt;p&gt;&lt;strong&gt;Tip:&lt;/strong&gt; If you use this container outside of VS Code via &lt;code&gt;docker run&lt;/code&gt; with &lt;code&gt;-p 9000&lt;/code&gt;, you may need to append &lt;code&gt;--host 0.0.0.0&lt;/code&gt; to the command above. The &lt;code&gt;-p&lt;/code&gt; option &#34;publishes&#34; the port rather than forwarding it. It therefore will not work if the application only listens to localhost. The &lt;code&gt;forwardPorts&lt;/code&gt; property in &lt;code&gt;devcontainer.json&lt;/code&gt; does not have this limitation, but you can use &lt;code&gt;appPort&lt;/code&gt; property instead if you want to mirror the &lt;code&gt;docker run&lt;/code&gt; behavior.&lt;/p&gt; &#xA;    &lt;/blockquote&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Build, Run, and Debug:&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Open &lt;code&gt;app.py&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Add a breakpoint (e.g. on line 9).&lt;/li&gt; &#xA;   &lt;li&gt;Press &lt;kbd&gt;F5&lt;/kbd&gt; to launch the app in the container.&lt;/li&gt; &#xA;   &lt;li&gt;Once the breakpoint is hit, try hovering over variables (e.g. the app variable on line 7), examining locals, and more.&lt;/li&gt; &#xA;   &lt;li&gt;Continue (&lt;kbd&gt;F5&lt;/kbd&gt;). You can connect to the server in the container by either: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Clicking on &lt;code&gt;Open in Browser&lt;/code&gt; in the notification telling you: &lt;code&gt;Your service running on port 9000 is available&lt;/code&gt;.&lt;/li&gt; &#xA;     &lt;li&gt;Clicking the globe icon in the &#39;Ports&#39; view. The &#39;Ports&#39; view gives you an organized table of your forwarded ports, and you can access it with the command &lt;strong&gt;Ports: Focus on Ports View&lt;/strong&gt;.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Notice port 9000 in the &#39;Ports&#39; view is labeled &#34;Hello Remote World.&#34; In &lt;code&gt;devcontainer.json&lt;/code&gt;, you can set &lt;code&gt;&#34;portsAttributes&#34;&lt;/code&gt;, such as a label for your forwarded ports and the action to be taken when the port is autoforwarded.&lt;/li&gt; &#xA;  &lt;/ul&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; In Remote - Containers, you can access your app at &lt;code&gt;http://localhost:9000&lt;/code&gt; in a local browser. But in a browser-based Codespace, you must click the link from the notification or the &lt;code&gt;Ports&lt;/code&gt; view so that the service handles port forwarding in the browser and generates the correct URL.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Rebuild or update your container&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;You may want to make changes to your container, such as installing a different version of a software or forwarding a new port. You&#39;ll rebuild your container for your changes to take effect.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Open browser automatically:&lt;/strong&gt; As an example change, let&#39;s update the &lt;code&gt;portsAttributes&lt;/code&gt; in the &lt;code&gt;.devcontainer/devcontainer.json&lt;/code&gt; file to open a browser when our port is automatically forwarded.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Open the &lt;code&gt;.devcontainer/devcontainer.json&lt;/code&gt; file.&lt;/li&gt; &#xA;   &lt;li&gt;Modify the &lt;code&gt;&#34;onAutoForward&#34;&lt;/code&gt; attribute in your &lt;code&gt;portsAttributes&lt;/code&gt; from &lt;code&gt;&#34;notify&#34;&lt;/code&gt; to &lt;code&gt;&#34;openBrowser&#34;&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Press &lt;kbd&gt;F1&lt;/kbd&gt; and select the &lt;strong&gt;Remote-Containers: Rebuild Container&lt;/strong&gt; or &lt;strong&gt;Codespaces: Rebuild Container&lt;/strong&gt; command so the modifications are picked up.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;More samples&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Microsoft/python-sample-tweeterapp&#34;&gt;Tweeter App - Python and Django&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;This project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit &lt;a href=&#34;https://cla.microsoft.com&#34;&gt;https://cla.microsoft.com&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;When you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.&lt;/p&gt; &#xA;&lt;p&gt;This project has adopted the &lt;a href=&#34;https://opensource.microsoft.com/codeofconduct/&#34;&gt;Microsoft Open Source Code of Conduct&lt;/a&gt;. For more information see the &lt;a href=&#34;https://opensource.microsoft.com/codeofconduct/faq/&#34;&gt;Code of Conduct FAQ&lt;/a&gt; or contact &lt;a href=&#34;mailto:opencode@microsoft.com&#34;&gt;opencode@microsoft.com&lt;/a&gt; with any additional questions or comments.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Copyright © Microsoft Corporation All rights reserved.&lt;br&gt; Licensed under the MIT License. See LICENSE in the project root for license information.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>nodejs/docker-node</title>
    <updated>2022-05-30T02:06:37Z</updated>
    <id>tag:github.com,2022-05-30:/nodejs/docker-node</id>
    <link href="https://github.com/nodejs/docker-node" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Official Docker Image for Node.js 🐳 🐢 🚀&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Node.js&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://registry.hub.docker.com/_/node/&#34;&gt;&lt;img src=&#34;http://dockeri.co/image/_/node&#34; alt=&#34;dockeri.co&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/nodejs/docker-node&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/issues/nodejs/docker-node.svg?sanitize=true&#34; alt=&#34;GitHub issues&#34; title=&#34;GitHub issues&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/nodejs/docker-node&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/nodejs/docker-node.svg?sanitize=true&#34; alt=&#34;GitHub stars&#34; title=&#34;GitHub stars&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The official Node.js docker image, made with love by the node community.&lt;/p&gt; &#xA;&lt;!-- START doctoc generated TOC please keep comment here to allow auto update --&gt; &#xA;&lt;!-- DON&#39;T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE --&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nodejs/docker-node/main/#what-is-nodejs&#34;&gt;What is Node.js?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nodejs/docker-node/main/#how-to-use-this-image&#34;&gt;How to use this image&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nodejs/docker-node/main/#create-a-dockerfile-in-your-nodejs-app-project&#34;&gt;Create a &lt;code&gt;Dockerfile&lt;/code&gt; in your Node.js app project&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nodejs/docker-node/main/#best-practices&#34;&gt;Best Practices&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nodejs/docker-node/main/#run-a-single-nodejs-script&#34;&gt;Run a single Node.js script&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nodejs/docker-node/main/#verbosity&#34;&gt;Verbosity&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nodejs/docker-node/main/#dockerfile&#34;&gt;Dockerfile&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nodejs/docker-node/main/#docker-run&#34;&gt;Docker Run&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nodejs/docker-node/main/#npm-run&#34;&gt;NPM run&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nodejs/docker-node/main/#image-variants&#34;&gt;Image Variants&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nodejs/docker-node/main/#nodeversion&#34;&gt;&lt;code&gt;node:&amp;lt;version&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nodejs/docker-node/main/#nodealpine&#34;&gt;&lt;code&gt;node:alpine&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nodejs/docker-node/main/#nodebuster&#34;&gt;&lt;code&gt;node:buster&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nodejs/docker-node/main/#nodestretch&#34;&gt;&lt;code&gt;node:stretch&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nodejs/docker-node/main/#nodeslim&#34;&gt;&lt;code&gt;node:slim&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nodejs/docker-node/main/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nodejs/docker-node/main/#supported-docker-versions&#34;&gt;Supported Docker versions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nodejs/docker-node/main/#supported-nodejs-versions&#34;&gt;Supported Node.js versions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nodejs/docker-node/main/#governance-and-current-members&#34;&gt;Governance and Current Members&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nodejs/docker-node/main/#docker-working-group-members&#34;&gt;Docker Working Group Members&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nodejs/docker-node/main/#docker-working-group-collaborators&#34;&gt;Docker Working Group Collaborators&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nodejs/docker-node/main/#emeritus&#34;&gt;Emeritus&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nodejs/docker-node/main/#docker-working-group-members-1&#34;&gt;Docker Working Group Members&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- END doctoc generated TOC please keep comment here to allow auto update --&gt; &#xA;&lt;h2&gt;What is Node.js?&lt;/h2&gt; &#xA;&lt;p&gt;Node.js is a platform built on Chrome&#39;s JavaScript runtime for easily building fast, scalable network applications. Node.js uses an event-driven, non-blocking I/O model that makes it lightweight and efficient, perfect for data-intensive real-time applications that run across distributed devices.&lt;/p&gt; &#xA;&lt;p&gt;See: &lt;a href=&#34;http://nodejs.org&#34;&gt;http://nodejs.org&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;How to use this image&lt;/h2&gt; &#xA;&lt;h3&gt;Create a &lt;code&gt;Dockerfile&lt;/code&gt; in your Node.js app project&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dockerfile&#34;&gt;# specify the node base image with your desired version node:&amp;lt;version&amp;gt;&#xA;FROM node:16&#xA;# replace this with your application&#39;s default port&#xA;EXPOSE 8888&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can then build and run the Docker image:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ docker build -t my-nodejs-app .&#xA;$ docker run -it --rm --name my-running-app my-nodejs-app&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you prefer Docker Compose:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;version: &#34;2&#34;&#xA;services:&#xA;  node:&#xA;    image: &#34;node:8&#34;&#xA;    user: &#34;node&#34;&#xA;    working_dir: /home/node/app&#xA;    environment:&#xA;      - NODE_ENV=production&#xA;    volumes:&#xA;      - ./:/home/node/app&#xA;    expose:&#xA;      - &#34;8081&#34;&#xA;    command: &#34;npm start&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can then run using Docker Compose:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ docker-compose up -d&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Docker Compose example copies your current directory (including node_modules) to the container. It assumes that your application has a file named &lt;a href=&#34;https://docs.npmjs.com/files/package.json&#34;&gt;&lt;code&gt;package.json&lt;/code&gt;&lt;/a&gt; defining &lt;a href=&#34;https://docs.npmjs.com/misc/scripts#default-values&#34;&gt;start script&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Best Practices&lt;/h3&gt; &#xA;&lt;p&gt;We have assembled a &lt;a href=&#34;https://raw.githubusercontent.com/nodejs/docker-node/main/docs/BestPractices.md&#34;&gt;Best Practices Guide&lt;/a&gt; for those using these images on a daily basis.&lt;/p&gt; &#xA;&lt;h3&gt;Run a single Node.js script&lt;/h3&gt; &#xA;&lt;p&gt;For many simple, single file projects, you may find it inconvenient to write a complete &lt;code&gt;Dockerfile&lt;/code&gt;. In such cases, you can run a Node.js script by using the Node.js Docker image directly:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ docker run -it --rm --name my-running-script -v &#34;$PWD&#34;:/usr/src/app -w /usr/src/app node:8 node your-daemon-or-script.js&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Verbosity&lt;/h3&gt; &#xA;&lt;p&gt;Prior to 8.7.0 and 6.11.4 the docker images overrode the default npm log level from &lt;code&gt;warn&lt;/code&gt; to &lt;code&gt;info&lt;/code&gt;. However due to improvements to npm and new Docker patterns (e.g. multi-stage builds) the working group reached a &lt;a href=&#34;https://github.com/nodejs/docker-node/issues/528&#34;&gt;consensus&lt;/a&gt; to revert the log level to npm defaults. If you need more verbose output, please use one of the following methods to change the verbosity level.&lt;/p&gt; &#xA;&lt;h4&gt;Dockerfile&lt;/h4&gt; &#xA;&lt;p&gt;If you create your own &lt;code&gt;Dockerfile&lt;/code&gt; which inherits from the &lt;code&gt;node&lt;/code&gt; image you can simply use &lt;code&gt;ENV&lt;/code&gt; to override &lt;code&gt;NPM_CONFIG_LOGLEVEL&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dockerfile&#34;&gt;FROM node&#xA;ENV NPM_CONFIG_LOGLEVEL info&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Docker Run&lt;/h4&gt; &#xA;&lt;p&gt;If you run the node image using &lt;code&gt;docker run&lt;/code&gt; you can use the &lt;code&gt;-e&lt;/code&gt; flag to override &lt;code&gt;NPM_CONFIG_LOGLEVEL&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ docker run -e NPM_CONFIG_LOGLEVEL=info node ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;NPM run&lt;/h4&gt; &#xA;&lt;p&gt;If you are running npm commands you can use &lt;code&gt;--loglevel&lt;/code&gt; to control the verbosity of the output.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ docker run node npm --loglevel=warn ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Image Variants&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;node&lt;/code&gt; images come in many flavors, each designed for a specific use case. All of the images contain pre-installed versions of &lt;code&gt;node&lt;/code&gt;, &lt;a href=&#34;https://www.npmjs.com/&#34;&gt;&lt;code&gt;npm&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&#34;https://yarnpkg.com&#34;&gt;&lt;code&gt;yarn&lt;/code&gt;&lt;/a&gt;. For each supported architecture, the supported variants are different. In the file: &lt;a href=&#34;https://raw.githubusercontent.com/nodejs/docker-node/main/versions.json&#34;&gt;versions.json&lt;/a&gt;, it lists all supported variants for all of the architectures that we support now.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;node:&amp;lt;version&amp;gt;&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;This is the defacto image. If you are unsure about what your needs are, you probably want to use this one. It is designed to be used both as a throw away container (mount your source code and start the container to start your app), as well as the base to build other images off of. This tag is based off of &lt;a href=&#34;https://registry.hub.docker.com/_/buildpack-deps/&#34;&gt;&lt;code&gt;buildpack-deps&lt;/code&gt;&lt;/a&gt;. &lt;code&gt;buildpack-deps&lt;/code&gt; is designed for the average user of docker who has many images on their system. It, by design, has a large number of extremely common Debian packages. This reduces the number of packages that images that derive from it need to install, thus reducing the overall size of all images on your system.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;node:alpine&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;This image is based on the popular &lt;a href=&#34;http://alpinelinux.org&#34;&gt;Alpine Linux project&lt;/a&gt;, available in &lt;a href=&#34;https://hub.docker.com/_/alpine&#34;&gt;the &lt;code&gt;alpine&lt;/code&gt; official image&lt;/a&gt;. Alpine Linux is much smaller than most distribution base images (~5MB), and thus leads to much slimmer images in general.&lt;/p&gt; &#xA;&lt;p&gt;This variant is highly recommended when final image size being as small as possible is desired. The main caveat to note is that it does use &lt;a href=&#34;http://www.musl-libc.org&#34;&gt;musl libc&lt;/a&gt; instead of &lt;a href=&#34;http://www.etalabs.net/compare_libcs.html&#34;&gt;glibc and friends&lt;/a&gt;, so certain software might run into issues depending on the depth of their libc requirements. However, most software doesn&#39;t have an issue with this, so this variant is usually a very safe choice. See &lt;a href=&#34;https://news.ycombinator.com/item?id=10782897&#34;&gt;this Hacker News comment thread&lt;/a&gt; for more discussion of the issues that might arise and some pro/con comparisons of using Alpine-based images. One common issue that may arise is a missing shared library required for use of &lt;code&gt;process.dlopen&lt;/code&gt;. To add the missing shared libraries to your image, adding the &lt;a href=&#34;https://pkgs.alpinelinux.org/package/edge/main/x86/libc6-compat&#34;&gt;&lt;code&gt;libc6-compat&lt;/code&gt;&lt;/a&gt; package in your Dockerfile is recommended: &lt;code&gt;apk add --no-cache libc6-compat&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;To minimize image size, it&#39;s uncommon for additional related tools (such as &lt;code&gt;git&lt;/code&gt; or &lt;code&gt;bash&lt;/code&gt;) to be included in Alpine-based images. Using this image as a base, add the things you need in your own Dockerfile (see the &lt;a href=&#34;https://hub.docker.com/_/alpine/&#34;&gt;&lt;code&gt;alpine&lt;/code&gt; image description&lt;/a&gt; for examples of how to install packages if you are unfamiliar).&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;node:buster&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;This image is based on version 10 of &lt;a href=&#34;http://debian.org&#34;&gt;Debian&lt;/a&gt;, available in &lt;a href=&#34;https://hub.docker.com/_/debian&#34;&gt;the &lt;code&gt;debian&lt;/code&gt; official image&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;node:stretch&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;This image is based on version 9 of &lt;a href=&#34;http://debian.org&#34;&gt;Debian&lt;/a&gt;, available in &lt;a href=&#34;https://hub.docker.com/_/debian&#34;&gt;the &lt;code&gt;debian&lt;/code&gt; official image&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;node:slim&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;This image does not contain the common packages contained in the default tag and only contains the minimal packages needed to run &lt;code&gt;node&lt;/code&gt;. Unless you are working in an environment where &lt;em&gt;only&lt;/em&gt; the Node.js image will be deployed and you have space constraints, we highly recommend using the default image of this repository.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/nodejs/node/raw/master/LICENSE&#34;&gt;License information&lt;/a&gt; for the software contained in this image. &lt;a href=&#34;https://raw.githubusercontent.com/nodejs/docker-node/main/LICENSE&#34;&gt;License information&lt;/a&gt; for the Node.js Docker project.&lt;/p&gt; &#xA;&lt;h2&gt;Supported Docker versions&lt;/h2&gt; &#xA;&lt;p&gt;This image is officially supported on Docker version 1.9.1.&lt;/p&gt; &#xA;&lt;p&gt;Support for older versions (down to 1.6) is provided on a best-effort basis.&lt;/p&gt; &#xA;&lt;p&gt;Please see &lt;a href=&#34;https://docs.docker.com/installation/&#34;&gt;the Docker installation documentation&lt;/a&gt; for details on how to upgrade your Docker daemon.&lt;/p&gt; &#xA;&lt;h2&gt;Supported Node.js versions&lt;/h2&gt; &#xA;&lt;p&gt;This project will support Node.js versions as still under active support as per the &lt;a href=&#34;https://github.com/nodejs/Release&#34;&gt;Node.js release schedule&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Governance and Current Members&lt;/h2&gt; &#xA;&lt;p&gt;The Node.js Docker Image is governed by the Docker Working Group. See &lt;a href=&#34;https://raw.githubusercontent.com/nodejs/docker-node/main/GOVERNANCE.md&#34;&gt;GOVERNANCE.md&lt;/a&gt; to learn more about the group&#39;s structure and &lt;a href=&#34;https://raw.githubusercontent.com/nodejs/docker-node/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; for guidance about the expectations for all contributors to this project.&lt;/p&gt; &#xA;&lt;h3&gt;Docker Working Group Members&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Hans Kristian Flaatten (&lt;a href=&#34;https://github.com/starefossen&#34;&gt;starefossen&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Hugues Malphettes (&lt;a href=&#34;https://github.com/hmalphettes&#34;&gt;hmalphettes&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;John Mitchell (&lt;a href=&#34;https://github.com/jlmitch5&#34;&gt;jlmitch5&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Docker Working Group Collaborators&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Mikeal Rogers (&lt;a href=&#34;https://github.com/mikeal&#34;&gt;mikeal&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Laurent Goderre (&lt;a href=&#34;https://github.com/LaurentGoderre&#34;&gt;LaurentGoderre&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Simen Bekkhus (&lt;a href=&#34;https://github.com/SimenB&#34;&gt;SimenB&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Peter Dave Hello (&lt;a href=&#34;https://github.com/PeterDaveHello&#34;&gt;PeterDaveHello&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Emeritus&lt;/h3&gt; &#xA;&lt;h4&gt;Docker Working Group Members&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Christopher Horrell (&lt;a href=&#34;https://github.com/chorrell&#34;&gt;chorrell&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Peter Petrov (&lt;a href=&#34;https://github.com/pesho&#34;&gt;pesho&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>microsoft/vscode-remote-try-node</title>
    <updated>2022-05-30T02:06:37Z</updated>
    <id>tag:github.com,2022-05-30:/microsoft/vscode-remote-try-node</id>
    <link href="https://github.com/microsoft/vscode-remote-try-node" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Node.js sample project for trying out the VS Code Remote - Containers extension&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Try Out Development Containers: Node.js&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://vscode.dev/redirect?url=vscode://ms-vscode-remote.remote-containers/cloneInVolume?url=https://github.com/microsoft/vscode-remote-try-node&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1?label=Remote%20-%20Containers&amp;amp;message=Open&amp;amp;color=blue&amp;amp;logo=visualstudiocode&#34; alt=&#34;Open in Remote - Containers&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A &lt;strong&gt;development container&lt;/strong&gt; is a running &lt;a href=&#34;https://www.docker.com&#34;&gt;Docker&lt;/a&gt; container with a well-defined tool/runtime stack and its prerequisites. You can try out development containers with &lt;strong&gt;&lt;a href=&#34;https://github.com/features/codespaces&#34;&gt;GitHub Codespaces&lt;/a&gt;&lt;/strong&gt; or &lt;strong&gt;&lt;a href=&#34;https://aka.ms/vscode-remote/containers&#34;&gt;Visual Studio Code Remote - Containers&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This is a sample project that lets you try out either option in a few easy steps. We have a variety of other &lt;a href=&#34;https://github.com/search?q=org%3Amicrosoft+vscode-remote-try-&amp;amp;type=Repositories&#34;&gt;vscode-remote-try-*&lt;/a&gt; sample projects, too.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If you already have a Codespace or dev container, you can jump to the &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/vscode-remote-try-node/main/#things-to-try&#34;&gt;Things to try&lt;/a&gt; section.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Setting up the development container&lt;/h2&gt; &#xA;&lt;h3&gt;GitHub Codespaces&lt;/h3&gt; &#xA;&lt;p&gt;Follow these steps to open this sample in a Codespace:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Click the Code drop-down menu and select the &lt;strong&gt;Open with Codespaces&lt;/strong&gt; option.&lt;/li&gt; &#xA; &lt;li&gt;Select &lt;strong&gt;+ New codespace&lt;/strong&gt; at the bottom on the pane.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;For more info, check out the &lt;a href=&#34;https://docs.github.com/en/free-pro-team@latest/github/developing-online-with-codespaces/creating-a-codespace#creating-a-codespace&#34;&gt;GitHub documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;VS Code Remote - Containers&lt;/h3&gt; &#xA;&lt;p&gt;If you already have VS Code and Docker installed, you can click the badge above or &lt;a href=&#34;https://vscode.dev/redirect?url=vscode://ms-vscode-remote.remote-containers/cloneInVolume?url=https://github.com/microsoft/vscode-remote-try-node&#34;&gt;here&lt;/a&gt; to get started. Clicking these links will cause VS Code to automatically install the Remote - Containers extension if needed, clone the source code into a container volume, and spin up a dev container for use.&lt;/p&gt; &#xA;&lt;p&gt;Follow these steps to open this sample in a container using the VS Code Remote - Containers extension:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;If this is your first time using a development container, please ensure your system meets the pre-reqs (i.e. have Docker installed) in the &lt;a href=&#34;https://aka.ms/vscode-remote/containers/getting-started&#34;&gt;getting started steps&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To use this repository, you can either open the repository in an isolated Docker volume:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Press &lt;kbd&gt;F1&lt;/kbd&gt; and select the &lt;strong&gt;Remote-Containers: Try a Sample...&lt;/strong&gt; command.&lt;/li&gt; &#xA;   &lt;li&gt;Choose the &#34;Node&#34; sample, wait for the container to start, and try things out! &#xA;    &lt;blockquote&gt; &#xA;     &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Under the hood, this will use the &lt;strong&gt;Remote-Containers: Clone Repository in Container Volume...&lt;/strong&gt; command to clone the source code in a Docker volume instead of the local filesystem. &lt;a href=&#34;https://docs.docker.com/storage/volumes/&#34;&gt;Volumes&lt;/a&gt; are the preferred mechanism for persisting container data.&lt;/p&gt; &#xA;    &lt;/blockquote&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;p&gt;Or open a locally cloned copy of the code:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Clone this repository to your local filesystem.&lt;/li&gt; &#xA;   &lt;li&gt;Press &lt;kbd&gt;F1&lt;/kbd&gt; and select the &lt;strong&gt;Remote-Containers: Open Folder in Container...&lt;/strong&gt; command.&lt;/li&gt; &#xA;   &lt;li&gt;Select the cloned copy of this folder, wait for the container to start, and try things out!&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Things to try&lt;/h2&gt; &#xA;&lt;p&gt;Once you have this sample opened, you&#39;ll be able to work with it like you would locally.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This container runs as a non-root user with sudo access by default. Comment out &lt;code&gt;&#34;remoteUser&#34;: &#34;node&#34;&lt;/code&gt; in &lt;code&gt;.devcontainer/devcontainer.json&lt;/code&gt; if you&#39;d prefer to run as root.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Some things to try:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Edit:&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Open &lt;code&gt;server.js&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Try adding some code and check out the language features.&lt;/li&gt; &#xA;   &lt;li&gt;Notice that &lt;code&gt;eslint&lt;/code&gt; and the &lt;code&gt;vscode-eslint&lt;/code&gt; extension are already installed in the container since the &lt;code&gt;.devcontainer/devcontainer.json&lt;/code&gt; lists &lt;code&gt;&#34;dbaeumer.vscode-eslint&#34;&lt;/code&gt; as an extension to install automatically when the container is created.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Terminal:&lt;/strong&gt; Press &lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;Shift&lt;/kbd&gt;+&lt;kbd&gt;`&lt;/kbd&gt; and type &lt;code&gt;uname&lt;/code&gt; and other Linux commands from the terminal window.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Build, Run, and Debug:&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Open &lt;code&gt;server.js&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Add a breakpoint (e.g. on line 20).&lt;/li&gt; &#xA;   &lt;li&gt;Press &lt;kbd&gt;F5&lt;/kbd&gt; to launch the app in the container.&lt;/li&gt; &#xA;   &lt;li&gt;Once the breakpoint is hit, try hovering over variables, examining locals, and more.&lt;/li&gt; &#xA;   &lt;li&gt;Continue (&lt;kbd&gt;F5&lt;/kbd&gt;). You can connect to the server in the container by either: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Clicking on &lt;code&gt;Open in Browser&lt;/code&gt; in the notification telling you: &lt;code&gt;Your service running on port 3000 is available&lt;/code&gt;.&lt;/li&gt; &#xA;     &lt;li&gt;Clicking the globe icon in the &#39;Ports&#39; view. The &#39;Ports&#39; view gives you an organized table of your forwarded ports, and you can access it with the command &lt;strong&gt;Ports: Focus on Ports View&lt;/strong&gt;.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Notice port 3000 in the &#39;Ports&#39; view is labeled &#34;Hello Remote World.&#34; In &lt;code&gt;devcontainer.json&lt;/code&gt;, you can set &lt;code&gt;&#34;portsAttributes&#34;&lt;/code&gt;, such as a label for your forwarded ports and the action to be taken when the port is autoforwarded. &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;If we didn&#39;t know the port was 3000, we could&#39;ve used a regex instead of &#34;3000&#34; in the &lt;code&gt;&#34;portsAttributes&#34;&lt;/code&gt;, such as &#34;.+/server.js&#34;.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; In Remote - Containers, you can access your app at &lt;code&gt;http://localhost:3000&lt;/code&gt; in a local browser. But in a browser-based Codespace, you must click the link from the notification or the &lt;code&gt;Ports&lt;/code&gt; view so that the service handles port forwarding in the browser and generates the correct URL.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Rebuild or update your container&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;You may want to make changes to your container, such as installing a different version of a software or forwarding a new port. You&#39;ll rebuild your container for your changes to take effect.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Open browser automatically:&lt;/strong&gt; As an example change, let&#39;s update the &lt;code&gt;portsAttributes&lt;/code&gt; in the &lt;code&gt;.devcontainer/devcontainer.json&lt;/code&gt; file to open a browser when our port is automatically forwarded.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Open the &lt;code&gt;.devcontainer/devcontainer.json&lt;/code&gt; file.&lt;/li&gt; &#xA;   &lt;li&gt;Modify the &lt;code&gt;&#34;onAutoForward&#34;&lt;/code&gt; attribute in your &lt;code&gt;portsAttributes&lt;/code&gt; from &lt;code&gt;&#34;notify&#34;&lt;/code&gt; to &lt;code&gt;&#34;openBrowser&#34;&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Press &lt;kbd&gt;F1&lt;/kbd&gt; and select the &lt;strong&gt;Remote-Containers: Rebuild Container&lt;/strong&gt; or &lt;strong&gt;Codespaces: Rebuild Container&lt;/strong&gt; command so the modifications are picked up.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;This project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit &lt;a href=&#34;https://cla.microsoft.com&#34;&gt;https://cla.microsoft.com&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;When you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.&lt;/p&gt; &#xA;&lt;p&gt;This project has adopted the &lt;a href=&#34;https://opensource.microsoft.com/codeofconduct/&#34;&gt;Microsoft Open Source Code of Conduct&lt;/a&gt;. For more information see the &lt;a href=&#34;https://opensource.microsoft.com/codeofconduct/faq/&#34;&gt;Code of Conduct FAQ&lt;/a&gt; or contact &lt;a href=&#34;mailto:opencode@microsoft.com&#34;&gt;opencode@microsoft.com&lt;/a&gt; with any additional questions or comments.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Copyright © Microsoft Corporation All rights reserved.&lt;br&gt; Licensed under the MIT License. See LICENSE in the project root for license information.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>sprintcube/docker-compose-lamp</title>
    <updated>2022-05-30T02:06:37Z</updated>
    <id>tag:github.com,2022-05-30:/sprintcube/docker-compose-lamp</id>
    <link href="https://github.com/sprintcube/docker-compose-lamp" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A basic LAMP stack environment built using Docker Compose.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;LAMP stack built with Docker Compose&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/43859895/141092846-905eae39-0169-4fd7-911f-9ff32c48b7e8.png&#34; alt=&#34;Landing Page&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;A basic LAMP stack environment built using Docker Compose. It consists of the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;PHP&lt;/li&gt; &#xA; &lt;li&gt;Apache&lt;/li&gt; &#xA; &lt;li&gt;MySQL&lt;/li&gt; &#xA; &lt;li&gt;phpMyAdmin&lt;/li&gt; &#xA; &lt;li&gt;Redis&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;As of now, we have several different PHP versions. Use appropriate php version as needed:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;5.4.x&lt;/li&gt; &#xA; &lt;li&gt;5.6.x&lt;/li&gt; &#xA; &lt;li&gt;7.1.x&lt;/li&gt; &#xA; &lt;li&gt;7.2.x&lt;/li&gt; &#xA; &lt;li&gt;7.3.x&lt;/li&gt; &#xA; &lt;li&gt;7.4.x&lt;/li&gt; &#xA; &lt;li&gt;8.0.x&lt;/li&gt; &#xA; &lt;li&gt;8.1.x&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Clone this repository on your local computer&lt;/li&gt; &#xA; &lt;li&gt;configure .env as needed&lt;/li&gt; &#xA; &lt;li&gt;Run the &lt;code&gt;docker-compose up -d&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git clone https://github.com/sprintcube/docker-compose-lamp.git&#xA;cd docker-compose-lamp/&#xA;cp sample.env .env&#xA;// modify sample.env as needed&#xA;docker-compose up -d&#xA;// visit localhost&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Your LAMP stack is now ready!! You can access it via &lt;code&gt;http://localhost&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Configuration and Usage&lt;/h2&gt; &#xA;&lt;h3&gt;General Information&lt;/h3&gt; &#xA;&lt;p&gt;This Docker Stack is build for local development and not for production usage.&lt;/p&gt; &#xA;&lt;h3&gt;Configuration&lt;/h3&gt; &#xA;&lt;p&gt;This package comes with default configuration options. You can modify them by creating &lt;code&gt;.env&lt;/code&gt; file in your root directory. To make it easy, just copy the content from &lt;code&gt;sample.env&lt;/code&gt; file and update the environment variable values as per your need.&lt;/p&gt; &#xA;&lt;h3&gt;Configuration Variables&lt;/h3&gt; &#xA;&lt;p&gt;There are following configuration variables available and you can customize them by overwritting in your own &lt;code&gt;.env&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;PHP&lt;/h4&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;PHPVERSION&lt;/strong&gt;&lt;/em&gt; Is used to specify which PHP Version you want to use. Defaults always to latest PHP Version.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;PHP_INI&lt;/strong&gt;&lt;/em&gt; Define your custom &lt;code&gt;php.ini&lt;/code&gt; modification to meet your requirments.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;Apache&lt;/h4&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;DOCUMENT_ROOT&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;It is a document root for Apache server. The default value for this is &lt;code&gt;./www&lt;/code&gt;. All your sites will go here and will be synced automatically.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;APACHE_DOCUMENT_ROOT&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Apache config file value. The default value for this is /var/www/html.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;VHOSTS_DIR&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;This is for virtual hosts. The default value for this is &lt;code&gt;./config/vhosts&lt;/code&gt;. You can place your virtual hosts conf files here.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Make sure you add an entry to your system&#39;s &lt;code&gt;hosts&lt;/code&gt; file for each virtual host.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;APACHE_LOG_DIR&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;This will be used to store Apache logs. The default value for this is &lt;code&gt;./logs/apache2&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;Database&lt;/h4&gt; &#xA;&lt;hr&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;For Apple Silicon Users: Please select Mariadb as Database. Oracle doesn&#39;t build their SQL Containers for the arm Architecure&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;DATABASE&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Define which MySQL or MariaDB Version you would like to use.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;MYSQL_INITDB_DIR&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;When a container is started for the first time files in this directory with the extensions &lt;code&gt;.sh&lt;/code&gt;, &lt;code&gt;.sql&lt;/code&gt;, &lt;code&gt;.sql.gz&lt;/code&gt; and &lt;code&gt;.sql.xz&lt;/code&gt; will be executed in alphabetical order. &lt;code&gt;.sh&lt;/code&gt; files without file execute permission are sourced rather than executed. The default value for this is &lt;code&gt;./config/initdb&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;MYSQL_DATA_DIR&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;This is MySQL data directory. The default value for this is &lt;code&gt;./data/mysql&lt;/code&gt;. All your MySQL data files will be stored here.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;MYSQL_LOG_DIR&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;This will be used to store Apache logs. The default value for this is &lt;code&gt;./logs/mysql&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Web Server&lt;/h2&gt; &#xA;&lt;p&gt;Apache is configured to run on port 80. So, you can access it via &lt;code&gt;http://localhost&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Apache Modules&lt;/h4&gt; &#xA;&lt;p&gt;By default following modules are enabled.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;rewrite&lt;/li&gt; &#xA; &lt;li&gt;headers&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;If you want to enable more modules, just update &lt;code&gt;./bin/phpX/Dockerfile&lt;/code&gt;. You can also generate a PR and we will merge if seems good for general purpose. You have to rebuild the docker image by running &lt;code&gt;docker-compose build&lt;/code&gt; and restart the docker containers.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;Connect via SSH&lt;/h4&gt; &#xA;&lt;p&gt;You can connect to web server using &lt;code&gt;docker-compose exec&lt;/code&gt; command to perform various operation on it. Use below command to login to container via ssh.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker-compose exec webserver bash&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;PHP&lt;/h2&gt; &#xA;&lt;p&gt;The installed version of php depends on your &lt;code&gt;.env&lt;/code&gt;file.&lt;/p&gt; &#xA;&lt;h4&gt;Extensions&lt;/h4&gt; &#xA;&lt;p&gt;By default following extensions are installed. May differ for PHP Versions &amp;lt;7.x.x&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;mysqli&lt;/li&gt; &#xA; &lt;li&gt;pdo_sqlite&lt;/li&gt; &#xA; &lt;li&gt;pdo_mysql&lt;/li&gt; &#xA; &lt;li&gt;mbstring&lt;/li&gt; &#xA; &lt;li&gt;zip&lt;/li&gt; &#xA; &lt;li&gt;intl&lt;/li&gt; &#xA; &lt;li&gt;mcrypt&lt;/li&gt; &#xA; &lt;li&gt;curl&lt;/li&gt; &#xA; &lt;li&gt;json&lt;/li&gt; &#xA; &lt;li&gt;iconv&lt;/li&gt; &#xA; &lt;li&gt;xml&lt;/li&gt; &#xA; &lt;li&gt;xmlrpc&lt;/li&gt; &#xA; &lt;li&gt;gd&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;If you want to install more extension, just update &lt;code&gt;./bin/webserver/Dockerfile&lt;/code&gt;. You can also generate a PR and we will merge if it seems good for general purpose. You have to rebuild the docker image by running &lt;code&gt;docker-compose build&lt;/code&gt; and restart the docker containers.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;phpMyAdmin&lt;/h2&gt; &#xA;&lt;p&gt;phpMyAdmin is configured to run on port 8080. Use following default credentials.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://localhost:8080/&#34;&gt;http://localhost:8080/&lt;/a&gt;&lt;br&gt; username: root&lt;br&gt; password: tiger&lt;/p&gt; &#xA;&lt;h2&gt;Xdebug&lt;/h2&gt; &#xA;&lt;p&gt;Xdebug comes installed by default and it&#39;s version depends on the PHP version chosen in the &lt;code&gt;&#34;.env&#34;&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Xdebug versions:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;PHP &amp;lt;= 7.3: Xdebug 2.X.X&lt;/p&gt; &#xA;&lt;p&gt;PHP &amp;gt;= 7.4: Xdebug 3.X.X&lt;/p&gt; &#xA;&lt;p&gt;To use Xdebug you need to enable the settings in the &lt;code&gt;./config/php/php.ini&lt;/code&gt; file according to the chosen version PHP.&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Xdebug 2&#xA;#xdebug.remote_enable=1&#xA;#xdebug.remote_autostart=1&#xA;#xdebug.remote_connect_back=1&#xA;#xdebug.remote_host = host.docker.internal&#xA;#xdebug.remote_port=9000&#xA;&#xA;# Xdebug 3&#xA;#xdebug.mode=debug&#xA;#xdebug.start_with_request=yes&#xA;#xdebug.client_host=host.docker.internal&#xA;#xdebug.client_port=9003&#xA;#xdebug.idekey=VSCODE&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Xdebug VS Code: you have to install the Xdebug extension &#34;PHP Debug&#34;. After installed, go to Debug and create the launch file so that your IDE can listen and work properly.&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;VERY IMPORTANT:&lt;/strong&gt; the &lt;code&gt;pathMappings&lt;/code&gt; depends on how you have opened the folder in VS Code. Each folder has your own configurations launch, that you can view in &lt;code&gt;.vscode/launch.json&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;    &#34;version&#34;: &#34;0.2.0&#34;,&#xA;    &#34;configurations&#34;: [&#xA;        {&#xA;            &#34;name&#34;: &#34;Listen for Xdebug&#34;,&#xA;            &#34;type&#34;: &#34;php&#34;,&#xA;            &#34;request&#34;: &#34;launch&#34;,&#xA;            // &#34;port&#34;: 9000, // Xdebug 2&#xA;            &#34;port&#34;: 9003, // Xdebug 3&#xA;            &#34;pathMappings&#34;: {&#xA;                // &#34;/var/www/html&#34;: &#34;${workspaceFolder}/www&#34; // if you have opened VSCODE in root folder&#xA;                &#34;/var/www/html&#34;: &#34;${workspaceFolder}&#34; // if you have opened VSCODE in ./www folder&#xA;            }&#xA;        }&#xA;    ]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now, make a breakpoint and run debug.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Tip!&lt;/strong&gt; After theses configurations, you may need to restart container.&lt;/p&gt; &#xA;&lt;h2&gt;Redis&lt;/h2&gt; &#xA;&lt;p&gt;It comes with Redis. It runs on default port &lt;code&gt;6379&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;We are happy if you want to create a pull request or help people with their issues. If you want to create a PR, please remember that this stack is not built for production usage, and changes should be good for general purpose and not overspecialized.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Please note that we simplified the project structure from several branches for each php version, to one centralized master branch. Please create your PR against master branch.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Thank you!&lt;/p&gt; &#xA;&lt;h2&gt;Why you shouldn&#39;t use this stack unmodified in production&lt;/h2&gt; &#xA;&lt;p&gt;We want to empower developers to quickly create creative Applications. Therefore we are providing an easy to set up a local development environment for several different Frameworks and PHP Versions. In Production you should modify at a minimum the following subjects:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;php handler: mod_php=&amp;gt; php-fpm&lt;/li&gt; &#xA; &lt;li&gt;secure mysql users with proper source IP limitations&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>Misaka-blog/HX</title>
    <updated>2022-05-30T02:06:37Z</updated>
    <id>tag:github.com,2022-05-30:/Misaka-blog/HX</id>
    <link href="https://github.com/Misaka-blog/HX" rel="alternate"></link>
    <summary type="html">&lt;p&gt;dddd&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://dashboard.heroku.com/new?template=https://github.com/Misaka-blog/HX&#34;&gt;&lt;img src=&#34;https://www.herokucdn.com/deploy/button.png&#34; alt=&#34;Deploy&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>vulhub/vulhub</title>
    <updated>2022-05-30T02:06:37Z</updated>
    <id>tag:github.com,2022-05-30:/vulhub/vulhub</id>
    <link href="https://github.com/vulhub/vulhub" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Pre-Built Vulnerable Environments Based on Docker-Compose&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/vulhub/vulhub/master/.github/assets/logo.svg?sanitize=true&#34; alt=&#34;Vulhub&#34; height=&#34;300&#34;&gt; &lt;/p&gt;&#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/vulhub/vulhub/raw/master/LICENSE&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/license/vulhub/vulhub.svg?sanitize=true&#34; alt=&#34;GitHub&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://www.wangan.com/vulhub&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Official-Community-blue.svg?sanitize=true&#34; alt=&#34;Official Community&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://discord.gg/GhMB3Z&#34;&gt; &lt;img src=&#34;https://img.shields.io/discord/485505185167179778.svg?sanitize=true&#34; alt=&#34;Chat on Discord&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://www.patreon.com/phith0n&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/sponsor-patreon-73d6a1.svg?sanitize=true&#34; alt=&#34;Backers and sponors on Patreon&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://opencollective.com/vulhub#backer&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/backer-opencollective-f89a76.svg?sanitize=true&#34; alt=&#34;Backers and sponors on Opencollective&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;p&gt;Vulhub is an open-source collection of pre-built vulnerable docker environments. No pre-existing knowledge of docker is required, just execute two simple commands and you have a vulnerable environment.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/vulhub/vulhub/master/README.zh-cn.md&#34;&gt;中文版本(Chinese version)&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Install the docker/docker-compose on Ubuntu 20.04:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Install pip&#xA;curl -s https://bootstrap.pypa.io/get-pip.py | python3&#xA;&#xA;# Install the latest version docker&#xA;curl -s https://get.docker.com/ | sh&#xA;&#xA;# Run docker service&#xA;systemctl start docker&#xA;&#xA;# Install docker compose&#xA;pip install docker-compose&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The installation steps of docker and docker-compose for other operating systems might be slightly different, please refer to the &lt;a href=&#34;https://docs.docker.com/&#34;&gt;docker documentation&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Download project&#xA;wget https://github.com/vulhub/vulhub/archive/master.zip -O vulhub-master.zip&#xA;unzip vulhub-master.zip&#xA;cd vulhub-master&#xA;&#xA;# Enter the directory of vulnerability/environment&#xA;cd flask/ssti&#xA;&#xA;# Compile environment&#xA;docker-compose build&#xA;&#xA;# Run environment&#xA;docker-compose up -d&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There is a &lt;strong&gt;README&lt;/strong&gt; document in each environment directory, please read this file for vulnerability/environment testing and usage.&lt;/p&gt; &#xA;&lt;p&gt;After the test, delete the environment with the following command.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker-compose down -v&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It is recommended to use a VPS of at least 1GB memory to build a vulnerability environment. The &lt;code&gt;your-ip&lt;/code&gt; mentioned in the documentation refers to the IP address of your VPS. If you are using a virtual machine, it refers to your virtual machine IP, not the IP inside the docker container.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;All environments in this project are for testing purposes only and should not be used as a production environment!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Notice&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;To prevent permission errors, it is best to use the root user to execute the docker and docker-compose commands.&lt;/li&gt; &#xA; &lt;li&gt;Some docker images do not support running on ARM machines.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Contribution&lt;/h2&gt; &#xA;&lt;p&gt;This project relies on docker. So any error during compilation and running are thrown by docker and related programs. Please find the cause of the error by yourself first. If it is determined that the dockerfile is written incorrectly (or the code is wrong in vulhub), then submit the issue. More details please 👉&lt;a href=&#34;https://github.com/phith0n/vulhub/wiki/%E7%BC%96%E8%AF%91%E5%A4%B1%E8%B4%A5%E7%9A%84%E5%8E%9F%E5%9B%A0&#34;&gt;Common reasons for compilation failure&lt;/a&gt;, hope it can help you.&lt;/p&gt; &#xA;&lt;p&gt;For more question, please contact:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.wangan.com/vulhub&#34;&gt;Chinese Community&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://discord.gg/GhMB3Z&#34;&gt;Discord&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/vulhub&#34;&gt;Twitter&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Thanks for the following contributors:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/vulhub/vulhub/graphs/contributors&#34;&gt;&lt;img src=&#34;https://opencollective.com/vulhub/contributors.svg?width=890&amp;amp;button=false&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;More contributors：&lt;a href=&#34;https://raw.githubusercontent.com/vulhub/vulhub/master/contributors.md&#34;&gt;Contributors List&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Partner&lt;/h2&gt; &#xA;&lt;p&gt;Our Partners and users:&lt;/p&gt; &#xA;&lt;p&gt; &lt;a href=&#34;https://www.wangan.com/vulhub&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://vulhub.org/img/sponsor/wangan.png&#34; width=&#34;200&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.cvebase.com&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://vulhub.org/img/sponsor/cvebase.png&#34; width=&#34;200&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.huoxian.cn&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://vulhub.org/img/sponsor/huoxian.png&#34; width=&#34;200&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.chaitin.cn&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://vulhub.org/img/sponsor/chaitin.png&#34; width=&#34;200&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://xianzhi.aliyun.com/&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://vulhub.org/img/sponsor/aliyun.svg?sanitize=true&#34; width=&#34;200&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;Sponsor vulhub on patreon 🙏&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.patreon.com/bePatron?u=12677520&#34;&gt;&lt;img src=&#34;https://vulhub.org/img/sponsor/patreon.png&#34; width=&#34;150&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Sponsor vulhub on opencollective 🙏&lt;/p&gt; &#xA;&lt;p&gt; &lt;a href=&#34;https://opencollective.com/vulhub#backer&#34;&gt;&lt;img src=&#34;https://opencollective.com/vulhub/backers.svg?width=138&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/vulhub#sponsor&#34;&gt;&lt;img src=&#34;https://opencollective.com/vulhub/sponsors.svg?width=138&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;More &lt;a href=&#34;http://vulhub.org/#/docs/donate/&#34;&gt;Donate&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Vulhub is licensed under the MIT License. See &lt;a href=&#34;https://raw.githubusercontent.com/vulhub/vulhub/master/LICENSE&#34;&gt;LICENSE&lt;/a&gt; for the full license text.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>linuxserver/docker-code-server</title>
    <updated>2022-05-30T02:06:37Z</updated>
    <id>tag:github.com,2022-05-30:/linuxserver/docker-code-server</id>
    <link href="https://github.com/linuxserver/docker-code-server" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://linuxserver.io&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/linuxserver/docker-templates/master/linuxserver.io/img/linuxserver_medium.png&#34; alt=&#34;linuxserver.io&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://blog.linuxserver.io&#34; title=&#34;all the things you can do with our containers including How-To guides, opinions and much more!&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1.svg?color=94398d&amp;amp;labelColor=555555&amp;amp;logoColor=ffffff&amp;amp;style=for-the-badge&amp;amp;label=linuxserver.io&amp;amp;message=Blog&#34; alt=&#34;Blog&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/YWrKVTn&#34; title=&#34;realtime support / chat with the community and the team.&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/354974912613449730.svg?color=94398d&amp;amp;labelColor=555555&amp;amp;logoColor=ffffff&amp;amp;style=for-the-badge&amp;amp;label=Discord&amp;amp;logo=discord&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discourse.linuxserver.io&#34; title=&#34;post on our community forum.&#34;&gt;&lt;img src=&#34;https://img.shields.io/discourse/https/discourse.linuxserver.io/topics.svg?color=94398d&amp;amp;labelColor=555555&amp;amp;logoColor=ffffff&amp;amp;style=for-the-badge&amp;amp;logo=discourse&#34; alt=&#34;Discourse&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://fleet.linuxserver.io&#34; title=&#34;an online web interface which displays all of our maintained images.&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1.svg?color=94398d&amp;amp;labelColor=555555&amp;amp;logoColor=ffffff&amp;amp;style=for-the-badge&amp;amp;label=linuxserver.io&amp;amp;message=Fleet&#34; alt=&#34;Fleet&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/linuxserver&#34; title=&#34;view the source for all of our repositories.&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1.svg?color=94398d&amp;amp;labelColor=555555&amp;amp;logoColor=ffffff&amp;amp;style=for-the-badge&amp;amp;label=linuxserver.io&amp;amp;message=GitHub&amp;amp;logo=github&#34; alt=&#34;GitHub&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/linuxserver&#34; title=&#34;please consider helping us by either donating or contributing to our budget&#34;&gt;&lt;img src=&#34;https://img.shields.io/opencollective/all/linuxserver.svg?color=94398d&amp;amp;labelColor=555555&amp;amp;logoColor=ffffff&amp;amp;style=for-the-badge&amp;amp;label=Supporters&amp;amp;logo=open%20collective&#34; alt=&#34;Open Collective&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://linuxserver.io&#34;&gt;LinuxServer.io&lt;/a&gt; team brings you another container release featuring:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;regular and timely application updates&lt;/li&gt; &#xA; &lt;li&gt;easy user mappings (PGID, PUID)&lt;/li&gt; &#xA; &lt;li&gt;custom base image with s6 overlay&lt;/li&gt; &#xA; &lt;li&gt;weekly base OS updates with common layers across the entire LinuxServer.io ecosystem to minimise space usage, down time and bandwidth&lt;/li&gt; &#xA; &lt;li&gt;regular security updates&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Find us at:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.linuxserver.io&#34;&gt;Blog&lt;/a&gt; - all the things you can do with our containers including How-To guides, opinions and much more!&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://discord.gg/YWrKVTn&#34;&gt;Discord&lt;/a&gt; - realtime support / chat with the community and the team.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://discourse.linuxserver.io&#34;&gt;Discourse&lt;/a&gt; - post on our community forum.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://fleet.linuxserver.io&#34;&gt;Fleet&lt;/a&gt; - an online web interface which displays all of our maintained images.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/linuxserver&#34;&gt;GitHub&lt;/a&gt; - view the source for all of our repositories.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://opencollective.com/linuxserver&#34;&gt;Open Collective&lt;/a&gt; - please consider helping us by either donating or contributing to our budget&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;&lt;a href=&#34;https://github.com/linuxserver/docker-code-server&#34;&gt;linuxserver/code-server&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://scarf.sh/gateway/linuxserver-ci/docker/linuxserver%2Fcode-server&#34;&gt;&lt;img src=&#34;https://scarf.sh/installs-badge/linuxserver-ci/linuxserver%2Fcode-server?color=94398d&amp;amp;label-color=555555&amp;amp;logo-color=ffffff&amp;amp;style=for-the-badge&amp;amp;package-type=docker&#34; alt=&#34;Scarf.io pulls&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/linuxserver/docker-code-server&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/linuxserver/docker-code-server.svg?color=94398d&amp;amp;labelColor=555555&amp;amp;logoColor=ffffff&amp;amp;style=for-the-badge&amp;amp;logo=github&#34; alt=&#34;GitHub Stars&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/linuxserver/docker-code-server/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/linuxserver/docker-code-server.svg?color=94398d&amp;amp;labelColor=555555&amp;amp;logoColor=ffffff&amp;amp;style=for-the-badge&amp;amp;logo=github&#34; alt=&#34;GitHub Release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/linuxserver/docker-code-server/packages&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1.svg?color=94398d&amp;amp;labelColor=555555&amp;amp;logoColor=ffffff&amp;amp;style=for-the-badge&amp;amp;label=linuxserver.io&amp;amp;message=GitHub%20Package&amp;amp;logo=github&#34; alt=&#34;GitHub Package Repository&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitlab.com/linuxserver.io/docker-code-server/container_registry&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1.svg?color=94398d&amp;amp;labelColor=555555&amp;amp;logoColor=ffffff&amp;amp;style=for-the-badge&amp;amp;label=linuxserver.io&amp;amp;message=GitLab%20Registry&amp;amp;logo=gitlab&#34; alt=&#34;GitLab Container Registry&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://quay.io/repository/linuxserver.io/code-server&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1.svg?color=94398d&amp;amp;labelColor=555555&amp;amp;logoColor=ffffff&amp;amp;style=for-the-badge&amp;amp;label=linuxserver.io&amp;amp;message=Quay.io&#34; alt=&#34;Quay.io&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/linuxserver/code-server&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/pulls/linuxserver/code-server.svg?color=94398d&amp;amp;labelColor=555555&amp;amp;logoColor=ffffff&amp;amp;style=for-the-badge&amp;amp;label=pulls&amp;amp;logo=docker&#34; alt=&#34;Docker Pulls&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/linuxserver/code-server&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/stars/linuxserver/code-server.svg?color=94398d&amp;amp;labelColor=555555&amp;amp;logoColor=ffffff&amp;amp;style=for-the-badge&amp;amp;label=stars&amp;amp;logo=docker&#34; alt=&#34;Docker Stars&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://ci.linuxserver.io/job/Docker-Pipeline-Builders/job/docker-code-server/job/master/&#34;&gt;&lt;img src=&#34;https://img.shields.io/jenkins/build?labelColor=555555&amp;amp;logoColor=ffffff&amp;amp;style=for-the-badge&amp;amp;jobUrl=https%3A%2F%2Fci.linuxserver.io%2Fjob%2FDocker-Pipeline-Builders%2Fjob%2Fdocker-code-server%2Fjob%2Fmaster%2F&amp;amp;logo=jenkins&#34; alt=&#34;Jenkins Build&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://ci-tests.linuxserver.io/linuxserver/code-server/latest/index.html&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/dynamic/yaml?color=94398d&amp;amp;labelColor=555555&amp;amp;logoColor=ffffff&amp;amp;style=for-the-badge&amp;amp;label=CI&amp;amp;query=CI&amp;amp;url=https%3A%2F%2Fci-tests.linuxserver.io%2Flinuxserver%2Fcode-server%2Flatest%2Fci-status.yml&#34; alt=&#34;LSIO CI&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://coder.com&#34;&gt;Code-server&lt;/a&gt; is VS Code running on a remote server, accessible through the browser.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Code on your Chromebook, tablet, and laptop with a consistent dev environment.&lt;/li&gt; &#xA; &lt;li&gt;If you have a Windows or Mac workstation, more easily develop for Linux.&lt;/li&gt; &#xA; &lt;li&gt;Take advantage of large cloud servers to speed up tests, compilations, downloads, and more.&lt;/li&gt; &#xA; &lt;li&gt;Preserve battery life when you&#39;re on the go.&lt;/li&gt; &#xA; &lt;li&gt;All intensive computation runs on your server.&lt;/li&gt; &#xA; &lt;li&gt;You&#39;re no longer running excess instances of Chrome.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://coder.com&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/linuxserver/docker-templates/master/linuxserver.io/img/code-server-banner.png&#34; alt=&#34;code-server&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Supported Architectures&lt;/h2&gt; &#xA;&lt;p&gt;We utilise the docker manifest for multi-platform awareness. More information is available from docker &lt;a href=&#34;https://github.com/docker/distribution/raw/master/docs/spec/manifest-v2-2.md#manifest-list&#34;&gt;here&lt;/a&gt; and our announcement &lt;a href=&#34;https://blog.linuxserver.io/2019/02/21/the-lsio-pipeline-project/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Simply pulling &lt;code&gt;lscr.io/linuxserver/code-server:latest&lt;/code&gt; should retrieve the correct image for your arch, but you can also pull specific arch images via tags.&lt;/p&gt; &#xA;&lt;p&gt;The architectures supported by this image are:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Architecture&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Available&lt;/th&gt; &#xA;   &lt;th&gt;Tag&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;x86-64&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;amd64-&amp;lt;version tag&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;arm64&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;arm64v8-&amp;lt;version tag&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;armhf&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;arm32v7-&amp;lt;version tag&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Version Tags&lt;/h2&gt; &#xA;&lt;p&gt;This image provides various versions that are available via tags. Please read the descriptions carefully and exercise caution when using unstable or development tags.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Tag&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Available&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;latest&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;Stable releases&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;focal&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;DEPRECATED (no longer updated, &lt;code&gt;latest&lt;/code&gt; is rebased on focal) - Stable releases, based on Ubuntu Focal&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;development&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;DEPRECATED (no longer updated) - Prereleases from their GitHub&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Application Setup&lt;/h2&gt; &#xA;&lt;p&gt;Access the webui at &lt;code&gt;http://&amp;lt;your-ip&amp;gt;:8443&lt;/code&gt;. For github integration, drop your ssh key in to &lt;code&gt;/config/.ssh&lt;/code&gt;. Then open a terminal from the top menu and set your github username and email via the following commands&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git config --global user.name &#34;username&#34;&#xA;git config --global user.email &#34;email address&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Hashed code-server password&lt;/h3&gt; &#xA;&lt;p&gt;How to create the &lt;a href=&#34;https://github.com/cdr/code-server/raw/master/docs/FAQ.md#can-i-store-my-password-hashed&#34;&gt;hashed password&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Here are some example snippets to help you get started creating a container.&lt;/p&gt; &#xA;&lt;h3&gt;docker-compose (recommended, &lt;a href=&#34;https://docs.linuxserver.io/general/docker-compose&#34;&gt;click here for more info&lt;/a&gt;)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;---&#xA;version: &#34;2.1&#34;&#xA;services:&#xA;  code-server:&#xA;    image: lscr.io/linuxserver/code-server:latest&#xA;    container_name: code-server&#xA;    environment:&#xA;      - PUID=1000&#xA;      - PGID=1000&#xA;      - TZ=Europe/London&#xA;      - PASSWORD=password #optional&#xA;      - HASHED_PASSWORD= #optional&#xA;      - SUDO_PASSWORD=password #optional&#xA;      - SUDO_PASSWORD_HASH= #optional&#xA;      - PROXY_DOMAIN=code-server.my.domain #optional&#xA;      - DEFAULT_WORKSPACE=/config/workspace #optional&#xA;    volumes:&#xA;      - /path/to/appdata/config:/config&#xA;    ports:&#xA;      - 8443:8443&#xA;    restart: unless-stopped&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;docker cli (&lt;a href=&#34;https://docs.docker.com/engine/reference/commandline/cli/&#34;&gt;click here for more info&lt;/a&gt;)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run -d \&#xA;  --name=code-server \&#xA;  -e PUID=1000 \&#xA;  -e PGID=1000 \&#xA;  -e TZ=Europe/London \&#xA;  -e PASSWORD=password `#optional` \&#xA;  -e HASHED_PASSWORD= `#optional` \&#xA;  -e SUDO_PASSWORD=password `#optional` \&#xA;  -e SUDO_PASSWORD_HASH= `#optional` \&#xA;  -e PROXY_DOMAIN=code-server.my.domain `#optional` \&#xA;  -e DEFAULT_WORKSPACE=/config/workspace `#optional` \&#xA;  -p 8443:8443 \&#xA;  -v /path/to/appdata/config:/config \&#xA;  --restart unless-stopped \&#xA;  lscr.io/linuxserver/code-server:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Parameters&lt;/h2&gt; &#xA;&lt;p&gt;Container images are configured using parameters passed at runtime (such as those above). These parameters are separated by a colon and indicate &lt;code&gt;&amp;lt;external&amp;gt;:&amp;lt;internal&amp;gt;&lt;/code&gt; respectively. For example, &lt;code&gt;-p 8080:80&lt;/code&gt; would expose port &lt;code&gt;80&lt;/code&gt; from inside the container to be accessible from the host&#39;s IP on port &lt;code&gt;8080&lt;/code&gt; outside the container.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Parameter&lt;/th&gt; &#xA;   &lt;th&gt;Function&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;-p 8443&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;web gui&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;-e PUID=1000&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;for UserID - see below for explanation&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;-e PGID=1000&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;for GroupID - see below for explanation&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;-e TZ=Europe/London&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Specify a timezone to use EG Europe/London&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;-e PASSWORD=password&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Optional web gui password, if &lt;code&gt;PASSWORD&lt;/code&gt; or &lt;code&gt;HASHED_PASSWORD&lt;/code&gt; is not provided, there will be no auth.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;-e HASHED_PASSWORD=&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Optional web gui password, overrides &lt;code&gt;PASSWORD&lt;/code&gt;, instructions on how to create it is below.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;-e SUDO_PASSWORD=password&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;If this optional variable is set, user will have sudo access in the code-server terminal with the specified password.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;-e SUDO_PASSWORD_HASH=&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Optionally set sudo password via hash (takes priority over &lt;code&gt;SUDO_PASSWORD&lt;/code&gt; var). Format is &lt;code&gt;$type$salt$hashed&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;-e PROXY_DOMAIN=code-server.my.domain&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;If this optional variable is set, this domain will be proxied for subdomain proxying. See &lt;a href=&#34;https://github.com/cdr/code-server/raw/master/docs/FAQ.md#sub-domains&#34;&gt;Documentation&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;-e DEFAULT_WORKSPACE=/config/workspace&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;If this optional variable is set, code-server will open this directory by default&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;-v /config&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Contains all relevant configuration files.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Environment variables from files (Docker secrets)&lt;/h2&gt; &#xA;&lt;p&gt;You can set any environment variable from a file by using a special prepend &lt;code&gt;FILE__&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;As an example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;-e FILE__PASSWORD=/run/secrets/mysecretpassword&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Will set the environment variable &lt;code&gt;PASSWORD&lt;/code&gt; based on the contents of the &lt;code&gt;/run/secrets/mysecretpassword&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;h2&gt;Umask for running applications&lt;/h2&gt; &#xA;&lt;p&gt;For all of our images we provide the ability to override the default umask settings for services started within the containers using the optional &lt;code&gt;-e UMASK=022&lt;/code&gt; setting. Keep in mind umask is not chmod it subtracts from permissions based on it&#39;s value it does not add. Please read up &lt;a href=&#34;https://en.wikipedia.org/wiki/Umask&#34;&gt;here&lt;/a&gt; before asking for support.&lt;/p&gt; &#xA;&lt;h2&gt;User / Group Identifiers&lt;/h2&gt; &#xA;&lt;p&gt;When using volumes (&lt;code&gt;-v&lt;/code&gt; flags) permissions issues can arise between the host OS and the container, we avoid this issue by allowing you to specify the user &lt;code&gt;PUID&lt;/code&gt; and group &lt;code&gt;PGID&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Ensure any volume directories on the host are owned by the same user you specify and any permissions issues will vanish like magic.&lt;/p&gt; &#xA;&lt;p&gt;In this instance &lt;code&gt;PUID=1000&lt;/code&gt; and &lt;code&gt;PGID=1000&lt;/code&gt;, to find yours use &lt;code&gt;id user&lt;/code&gt; as below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  $ id username&#xA;    uid=1000(dockeruser) gid=1000(dockergroup) groups=1000(dockergroup)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Docker Mods&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://mods.linuxserver.io/?mod=code-server&#34; title=&#34;view available mods for this container.&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/dynamic/yaml?color=94398d&amp;amp;labelColor=555555&amp;amp;logoColor=ffffff&amp;amp;style=for-the-badge&amp;amp;label=code-server&amp;amp;query=%24.mods%5B%27code-server%27%5D.mod_count&amp;amp;url=https%3A%2F%2Fraw.githubusercontent.com%2Flinuxserver%2Fdocker-mods%2Fmaster%2Fmod-list.yml&#34; alt=&#34;Docker Mods&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://mods.linuxserver.io/?mod=universal&#34; title=&#34;view available universal mods.&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/dynamic/yaml?color=94398d&amp;amp;labelColor=555555&amp;amp;logoColor=ffffff&amp;amp;style=for-the-badge&amp;amp;label=universal&amp;amp;query=%24.mods%5B%27universal%27%5D.mod_count&amp;amp;url=https%3A%2F%2Fraw.githubusercontent.com%2Flinuxserver%2Fdocker-mods%2Fmaster%2Fmod-list.yml&#34; alt=&#34;Docker Universal Mods&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;We publish various &lt;a href=&#34;https://github.com/linuxserver/docker-mods&#34;&gt;Docker Mods&lt;/a&gt; to enable additional functionality within the containers. The list of Mods available for this image (if any) as well as universal mods that can be applied to any one of our images can be accessed via the dynamic badges above.&lt;/p&gt; &#xA;&lt;h2&gt;Support Info&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Shell access whilst the container is running: &lt;code&gt;docker exec -it code-server /bin/bash&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;To monitor the logs of the container in realtime: &lt;code&gt;docker logs -f code-server&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;container version number &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;docker inspect -f &#39;{{ index .Config.Labels &#34;build_version&#34; }}&#39; code-server&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;image version number &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;docker inspect -f &#39;{{ index .Config.Labels &#34;build_version&#34; }}&#39; lscr.io/linuxserver/code-server:latest&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Updating Info&lt;/h2&gt; &#xA;&lt;p&gt;Most of our images are static, versioned, and require an image update and container recreation to update the app inside. With some exceptions (ie. nextcloud, plex), we do not recommend or support updating apps inside the container. Please consult the &lt;a href=&#34;https://raw.githubusercontent.com/linuxserver/docker-code-server/master/#application-setup&#34;&gt;Application Setup&lt;/a&gt; section above to see if it is recommended for the image.&lt;/p&gt; &#xA;&lt;p&gt;Below are the instructions for updating containers:&lt;/p&gt; &#xA;&lt;h3&gt;Via Docker Compose&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Update all images: &lt;code&gt;docker-compose pull&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;or update a single image: &lt;code&gt;docker-compose pull code-server&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Let compose update all containers as necessary: &lt;code&gt;docker-compose up -d&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;or update a single container: &lt;code&gt;docker-compose up -d code-server&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;You can also remove the old dangling images: &lt;code&gt;docker image prune&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Via Docker Run&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Update the image: &lt;code&gt;docker pull lscr.io/linuxserver/code-server:latest&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Stop the running container: &lt;code&gt;docker stop code-server&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Delete the container: &lt;code&gt;docker rm code-server&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Recreate a new container with the same docker run parameters as instructed above (if mapped correctly to a host folder, your &lt;code&gt;/config&lt;/code&gt; folder and settings will be preserved)&lt;/li&gt; &#xA; &lt;li&gt;You can also remove the old dangling images: &lt;code&gt;docker image prune&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Via Watchtower auto-updater (only use if you don&#39;t remember the original parameters)&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Pull the latest image at its tag and replace it with the same env variables in one run:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run --rm \&#xA;-v /var/run/docker.sock:/var/run/docker.sock \&#xA;containrrr/watchtower \&#xA;--run-once code-server&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;You can also remove the old dangling images: &lt;code&gt;docker image prune&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; We do not endorse the use of Watchtower as a solution to automated updates of existing Docker containers. In fact we generally discourage automated updates. However, this is a useful tool for one-time manual updates of containers where you have forgotten the original parameters. In the long term, we highly recommend using &lt;a href=&#34;https://docs.linuxserver.io/general/docker-compose&#34;&gt;Docker Compose&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Image Update Notifications - Diun (Docker Image Update Notifier)&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;We recommend &lt;a href=&#34;https://crazymax.dev/diun/&#34;&gt;Diun&lt;/a&gt; for update notifications. Other tools that automatically update containers unattended are not recommended or supported.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Building locally&lt;/h2&gt; &#xA;&lt;p&gt;If you want to make local modifications to these images for development purposes or just to customize the logic:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/linuxserver/docker-code-server.git&#xA;cd docker-code-server&#xA;docker build \&#xA;  --no-cache \&#xA;  --pull \&#xA;  -t lscr.io/linuxserver/code-server:latest .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The ARM variants can be built on x86_64 hardware using &lt;code&gt;multiarch/qemu-user-static&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run --rm --privileged multiarch/qemu-user-static:register --reset&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once registered you can define the dockerfile to use with &lt;code&gt;-f Dockerfile.aarch64&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Versions&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;20.02.22:&lt;/strong&gt; - Install using the official tarballs.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;29.12.21:&lt;/strong&gt; - Add &lt;code&gt;install-extension&lt;/code&gt; as a helper for mods to install extensions.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;06.12.21:&lt;/strong&gt; - Add &lt;code&gt;DEFAULT_WORKSPACE&lt;/code&gt; env var.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;29.11.21:&lt;/strong&gt; - Rebase to Ubuntu focal.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;16.09.21:&lt;/strong&gt; - Fix slow &lt;code&gt;chown&lt;/code&gt; on large workspace (contents of workspace folder no longer chowned).&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;11.07.21:&lt;/strong&gt; - Bump node to 14 to fix builds&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;08.05.21:&lt;/strong&gt; - Fix doc link&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;04.02.20:&lt;/strong&gt; - Allow setting gui password via hash using env var &lt;code&gt;HASHED_PASSWORD&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;23.12.20:&lt;/strong&gt; - Allow setting sudo password via hash using env var &lt;code&gt;SUDO_PASSWORD_HASH&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;29.05.20:&lt;/strong&gt; - Add --domain-proxy support.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;21.05.20:&lt;/strong&gt; - Shrink images, install via yarn, fix arm32v7 build.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;18.05.20:&lt;/strong&gt; - Switch to multi-arch images, install via npm.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;29.04.20:&lt;/strong&gt; - Update start arguments.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;01.04.20:&lt;/strong&gt; - Structural changes required for v3.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;17.01.20:&lt;/strong&gt; - Fix artifact url retrieval from github.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;24.10.19:&lt;/strong&gt; - Upgrade to v2 builds.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;28.09.19:&lt;/strong&gt; - Update project logo.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;21.09.19:&lt;/strong&gt; - Add development builds/tag.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;09.07.19:&lt;/strong&gt; - Add optional sudo access.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;01.07.19:&lt;/strong&gt; - Add nano.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;24.06.19:&lt;/strong&gt; - Initial Release.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>remote-android/redroid-doc</title>
    <updated>2022-05-30T02:06:37Z</updated>
    <id>tag:github.com,2022-05-30:/remote-android/redroid-doc</id>
    <link href="https://github.com/remote-android/redroid-doc" rel="alternate"></link>
    <summary type="html">&lt;p&gt;ReDroid (Remote-Android) is a multi-arch, GPU enabled, Android in Container solution. Track issues / docs here&lt;/p&gt;&lt;hr&gt;&lt;p&gt;English | &lt;a href=&#34;https://raw.githubusercontent.com/remote-android/redroid-doc/master/README.zh-cn.md&#34;&gt;简体中文&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Table of contents&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/remote-android/redroid-doc/master/#overview&#34;&gt;Overview&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/remote-android/redroid-doc/master/#getting-started&#34;&gt;Getting Started&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/remote-android/redroid-doc/master/#configuration&#34;&gt;Configuration&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/remote-android/redroid-doc/master/#native-bridge-support&#34;&gt;Native Bridge Support&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/remote-android/redroid-doc/master/#gms-support&#34;&gt;GMS Support&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/remote-android/redroid-doc/master/#webrtc-streaming&#34;&gt;WebRTC Streaming&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/remote-android/redroid-doc/master/#how-to-build&#34;&gt;How To Build&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/remote-android/redroid-doc/master/#troubleshooting&#34;&gt;Troubleshooting&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/remote-android/redroid-doc/master/#note&#34;&gt;Note&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/remote-android/redroid-doc/master/#contact-me&#34;&gt;Contact Me&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/remote-android/redroid-doc/master/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;ReDroid&lt;/strong&gt; (&lt;em&gt;Re&lt;/em&gt;mote an&lt;em&gt;Droid&lt;/em&gt;) is a GPU accelerated AIC (Android In Container) solution. You can boot many instances in Linux host (&lt;code&gt;Docker&lt;/code&gt;, &lt;code&gt;podman&lt;/code&gt;, &lt;code&gt;k8s&lt;/code&gt; etc.). &lt;em&gt;ReDroid&lt;/em&gt; supports both &lt;code&gt;arm64&lt;/code&gt; and &lt;code&gt;amd64&lt;/code&gt; architectures. &lt;em&gt;ReDroid&lt;/em&gt; is suitable for Cloud Gaming, VMI (Virtual Mobile Infrastructure), Automation Test and more.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/remote-android/redroid-doc/master/assets/redroid11.png&#34; alt=&#34;Screenshot of ReDroid 11&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Currently supported:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Android 13 Preview (&lt;code&gt;redroid/redroid:13.0.0-latest&lt;/code&gt;, &lt;code&gt;redroid/redroid:13.0.0-amd64&lt;/code&gt;, &lt;code&gt;redroid/redroid:13.0.0-arm64&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Android 12 (&lt;code&gt;redroid/redroid:12.0.0-latest&lt;/code&gt;, &lt;code&gt;redroid/redroid:12.0.0-amd64&lt;/code&gt;, &lt;code&gt;redroid/redroid:12.0.0-arm64&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Android 12 64bit only (&lt;code&gt;redroid/redroid:12.0.0_64only-latest&lt;/code&gt;, &lt;code&gt;redroid/redroid:12.0.0_64only-amd64&lt;/code&gt;, &lt;code&gt;redroid/redroid:12.0.0_64only-arm64&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Android 11 (&lt;code&gt;redroid/redroid:11.0.0-latest&lt;/code&gt;, &lt;code&gt;redroid/redroid:11.0.0-amd64&lt;/code&gt;, &lt;code&gt;redroid/redroid:11.0.0-arm64&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Android 10 (&lt;code&gt;redroid/redroid:10.0.0-latest&lt;/code&gt;, &lt;code&gt;redroid/redroid:10.0.0-amd64&lt;/code&gt;, &lt;code&gt;redroid/redroid:10.0.0-arm64&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Android 9 (&lt;code&gt;redroid/redroid:9.0.0-latest&lt;/code&gt;, &lt;code&gt;redroid/redroid:9.0.0-amd64&lt;/code&gt;, &lt;code&gt;redroid/redroid:9.0.0-arm64&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Android 8.1 (&lt;code&gt;redroid/redroid:8.1.0-latest&lt;/code&gt;, &lt;code&gt;redroid/redroid:8.1.0-amd64&lt;/code&gt;, &lt;code&gt;redroid/redroid:8.1.0-arm64&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Tested Platforms:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Ubuntu 16.04 / 18.04 / 20.04 (amd64 / arm64)&lt;/li&gt; &#xA; &lt;li&gt;Amazon Linux 2 (amd64 / arm64)&lt;/li&gt; &#xA; &lt;li&gt;Alibaba Cloud Linux 2 (amd64)&lt;/li&gt; &#xA; &lt;li&gt;Alibaba Cloud Linux 3 (amd64 / arm64)&lt;/li&gt; &#xA; &lt;li&gt;WSL 2 (Ubuntu) (amd64)&lt;/li&gt; &#xA; &lt;li&gt;CentOS (amd64*, arm64*)&lt;/li&gt; &#xA; &lt;li&gt;OpenEuler 20.03 (amd64, arm64*)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;* customized kernel required&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;ReDroid&lt;/em&gt; requires some kernel modules (&lt;code&gt;binderfs&lt;/code&gt;, &lt;code&gt;ashmem&lt;/code&gt; etc.). &lt;strong&gt;Check &lt;a href=&#34;https://github.com/remote-android/redroid-modules&#34;&gt;kernel modules&lt;/a&gt; to install these modules.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# start and connect via `scrcpy`&#xA;docker run -itd --rm --memory-swappiness=0 --privileged \&#xA;    --pull always \&#xA;    -v ~/data:/data \&#xA;    -p 5555:5555 \&#xA;    redroid/redroid:11.0.0-latest&#xA;&#xA;adb connect &amp;lt;IP&amp;gt;:5555&#xA;scrcpy --serial &amp;lt;IP&amp;gt;:5555&#xA;&#xA;## Explanation:&#xA;##   --pull always    -- be sure to use the latest image&#xA;##   -v ~/data:/data  -- mount data partition&#xA;##   -p 5555:5555     -- expose adb port, you can connect via `adb connect &amp;lt;HOST-IP&amp;gt;`&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;required params (already added in docker image)&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;qemu=1&lt;/li&gt; &#xA; &lt;li&gt;androidboot.hardware=redroid&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;display params&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;redroid.width=720&lt;/li&gt; &#xA; &lt;li&gt;redroid.height=1280&lt;/li&gt; &#xA; &lt;li&gt;redroid.fps=15&lt;/li&gt; &#xA; &lt;li&gt;ro.sf.lcd_density=320&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Network:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;net.eth0.dns1=&#xA;  &lt;ip&gt;&lt;/ip&gt;&lt;/li&gt; &#xA; &lt;li&gt;net.eth0.proxy.type=[static|pac|none|unassigned]&lt;/li&gt; &#xA; &lt;li&gt;net.eth0.proxy.host=&#xA;  &lt;ip&gt;&lt;/ip&gt;&lt;/li&gt; &#xA; &lt;li&gt;net.eth0.proxy.port=&#xA;  &lt;port&gt;&lt;/port&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;GPU accelerating &lt;em&gt;ReDroid&lt;/em&gt; use mesa3d to accelerate 3D rendering. Currently tested platforms:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;AMD (arm64, amd64 with &lt;code&gt;amdgpu&lt;/code&gt; driver)&lt;/li&gt; &#xA; &lt;li&gt;Intel (amd64 with &lt;code&gt;i915&lt;/code&gt; driver)&lt;/li&gt; &#xA; &lt;li&gt;virtio-gpu (vendor agnostic, arm64 and amd64)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;params:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;redroid.gpu.mode=[auto|host|guest]&lt;/li&gt; &#xA; &lt;li&gt;redroid.gpu.node=[/dev/dri/renderDxxx]&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;NOTE: you can override system props prefixed with &lt;code&gt;qemu.&lt;/code&gt; or &lt;code&gt;ro.&lt;/code&gt;. for example, you can set &lt;code&gt;ro.secure=0&lt;/code&gt;, then you can get root adb shell by default.&lt;/p&gt; &#xA;&lt;h2&gt;Native Bridge Support&lt;/h2&gt; &#xA;&lt;p&gt;It&#39;s possible to run &lt;code&gt;arm&lt;/code&gt; Apps in &lt;code&gt;x86&lt;/code&gt; &lt;em&gt;ReDroid&lt;/em&gt; instance via &lt;code&gt;libhoudini&lt;/code&gt;, &lt;code&gt;libndk_translator&lt;/code&gt; or &lt;code&gt;QEMU translator&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Take &lt;code&gt;libndk_translator&lt;/code&gt; as an example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# grab libndk_translator libs from Android 11 Emulator&#xA;find /system \( -name &#39;libndk_translation*&#39; -o -name &#39;*arm*&#39; -o -name &#39;ndk_translation*&#39; \) | tar -cf native-bridge.tar -T -&#xA;&#xA;# example structure, be careful the file owner and mode&#xA;&#xA;system/&#xA;├── bin&#xA;│&amp;nbsp;&amp;nbsp; ├── arm&#xA;│&amp;nbsp;&amp;nbsp; └── arm64&#xA;├── etc&#xA;│&amp;nbsp;&amp;nbsp; ├── binfmt_misc&#xA;│&amp;nbsp;&amp;nbsp; └── init&#xA;├── lib&#xA;│&amp;nbsp;&amp;nbsp; ├── arm&#xA;│&amp;nbsp;&amp;nbsp; └── libnb.so&#xA;└── lib64&#xA;    ├── arm64&#xA;    └── libnb.so&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dockerfile&#34;&gt;# Dockerfile&#xA;FROM redroid/redroid:11.0.0-amd64&#xA;&#xA;ADD native-bridge.tar /&#xA;&#xA;COPY factory.prop /factory/factory.prop&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;# factory.prop&#xA;ro.product.cpu.abilist=x86_64,arm64-v8a,x86,armeabi-v7a,armeabi&#xA;ro.product.cpu.abilist64=x86_64,arm64-v8a&#xA;ro.product.cpu.abilist32=x86,armeabi-v7a,armeabi&#xA;ro.dalvik.vm.isa.arm=x86&#xA;ro.dalvik.vm.isa.arm64=x86_64&#xA;ro.enable.native.bridge.exec=1&#xA;ro.dalvik.vm.native.bridge=libndk_translation.so&#xA;ro.ndk_translation.version=0.2.2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# build docker image&#xA;docker build . -t redroid:11.0.0-amd64-nb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Take a look at &lt;a href=&#34;https://gitlab.com/android-generic/android_vendor_google_emu-x86&#34;&gt;https://gitlab.com/android-generic/android_vendor_google_emu-x86&lt;/a&gt; to extract automatically libndk_translator from the Android 11 emulator images.&lt;/p&gt; &#xA;&lt;p&gt;After following the guide on &#34;Building&#34; section, you will get native-bridge.tar under vendor/google/emu-x86/proprietary.&lt;/p&gt; &#xA;&lt;p&gt;If you find errors in using libndk_translator, please try the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;YOU MUST HAVE binfmt_misc kernel module loaded for supporting other binaries formats! If you have not loaded it already:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo modprobe binfmt_misc&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;or add binfmt_misc to /etc/modules to autoload it at boot (for example in Ubuntu).&lt;/p&gt; &lt;p&gt;Check your specific distribution wiki/docs if you don&#39;t have binfmt_misc module and you want to install it, or how to autoload the module at boot.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Extract the native bridge archive, preserving the permissions, set specific permissions for allowing init file to be executed and traverse of important dirs:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mkdir native-bridge&#xA;cd native-bridge&#xA;sudo tar -xpf ../native-bridge.tar `#or path to your actual native bridge tarball`&#xA;sudo chmod 0644 system/etc/init/ndk_translation_arm64.rc&#xA;sudo chmod 0755 system/bin/arm&#xA;sudo chmod 0755 system/bin/arm64&#xA;sudo chmod 0755 system/lib/arm&#xA;sudo chmod 0755 system/lib64/arm64&#xA;sudo chmod 0644 system/etc/binfmt_misc/*&#xA;sudo tar -cpf native-bridge.tar system&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Move or copy your new native-bridge.tar into the dir where you have written your Dockerfile, and rebuild again the new image with native bridge support.&lt;/p&gt; &lt;p&gt;You must use sudo or a root shell to preserve the permissions and owners of the files.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;GMS Support&lt;/h2&gt; &#xA;&lt;p&gt;It&#39;s possible to add GMS (Google Mobile Service) support in &lt;em&gt;ReDroid&lt;/em&gt; via &lt;a href=&#34;https://opengapps.org/&#34;&gt;Open GApps&lt;/a&gt;, &lt;a href=&#34;https://microg.org/&#34;&gt;MicroG&lt;/a&gt; or &lt;a href=&#34;https://gitlab.com/MindTheGapps/vendor_gapps&#34;&gt;MindTheGapps&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;WebRTC Streaming&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;CALL FOR HELP&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Plan to port &lt;code&gt;WebRTC&lt;/code&gt; solutions from &lt;code&gt;cuttlefish&lt;/code&gt;, including frontend (HTML5), backend and many virtual HALs.&lt;/p&gt; &#xA;&lt;h2&gt;How To Build&lt;/h2&gt; &#xA;&lt;p&gt;It&#39;s Same as AOSP building process. But I suggest to use &lt;code&gt;docker&lt;/code&gt; to build.&lt;/p&gt; &#xA;&lt;p&gt;Check &lt;a href=&#34;https://raw.githubusercontent.com/remote-android/redroid-doc/master/android-builder-docker&#34;&gt;android-builder-docker&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;h2&gt;Troubleshooting&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Container disappeared immediately&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;make sure the required kernel modules are installed; run &lt;code&gt;dmesg -T&lt;/code&gt; for detailed logs&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Container running, but adb cannot connect (device offline etc.)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;run &lt;code&gt;docker exec -it &amp;lt;container&amp;gt; sh&lt;/code&gt;, then check &lt;code&gt;ps -A&lt;/code&gt; and &lt;code&gt;logcat&lt;/code&gt;&lt;/p&gt; &#xA; &lt;p&gt;try &lt;code&gt;dmesg -T&lt;/code&gt; if cannot get a container shell&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Note&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Kernel 5.7+, need enable &lt;code&gt;binderfs&lt;/code&gt; / &lt;code&gt;ashmem&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;redroid&lt;/code&gt; require &lt;code&gt;pid_max&lt;/code&gt; less than 65535, or else may run into problems. Change in host OS, or add &lt;code&gt;pid_max&lt;/code&gt; separation support in PID namespace&lt;/li&gt; &#xA; &lt;li&gt;SElinux is disabled in &lt;em&gt;ReDroid&lt;/em&gt;; possible enabled with &lt;a href=&#34;http://namei.org/presentations/selinux_namespacing_lca2018.pdf&#34;&gt;selinuxns POC&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;sdcardfs&lt;/code&gt; currently not implemented, use &lt;code&gt;fuse&lt;/code&gt; instead; may need run &lt;code&gt;modprobe fuse&lt;/code&gt; first in some OS (AmazonLinux2 ?)&lt;/li&gt; &#xA; &lt;li&gt;CGroups errors ignored; some (&lt;code&gt;stune&lt;/code&gt; for example) not supported in generic linux.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;procfs&lt;/code&gt; not fully seperated with host OS; Community use &lt;code&gt;lxcfs&lt;/code&gt; and some cloud vendor (&lt;a href=&#34;https://github.com/Tencent/TencentOS-kernel&#34;&gt;TencentOS&lt;/a&gt;) enhanced in their own kernel.&lt;/li&gt; &#xA; &lt;li&gt;vintf verify disabled (since no kernel)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contact Me&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;mailto:ziyang.zhou@outlook.com&#34;&gt;ziyang.zhou@outlook.com&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;remote-android.slack.com (invite link: &lt;a href=&#34;https://join.slack.com/t/remote-android/shared_invite/zt-q40byk2o-YHUgWXmNIUC1nweQj0L9gA&#34;&gt;https://join.slack.com/t/remote-android/shared_invite/zt-q40byk2o-YHUgWXmNIUC1nweQj0L9gA&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;ReDroid&lt;/em&gt; itself is under &lt;a href=&#34;https://www.apache.org/licenses/LICENSE-2.0&#34;&gt;Apache License&lt;/a&gt;, since &lt;em&gt;ReDroid&lt;/em&gt; includes many 3rd party modules, you may need to examine license carefully.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;ReDroid&lt;/em&gt; kernel modules are under &lt;a href=&#34;https://www.gnu.org/licenses/old-licenses/gpl-2.0.en.html&#34;&gt;GPL v2&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>aschmelyun/docker-compose-laravel</title>
    <updated>2022-05-30T02:06:37Z</updated>
    <id>tag:github.com,2022-05-30:/aschmelyun/docker-compose-laravel</id>
    <link href="https://github.com/aschmelyun/docker-compose-laravel" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A docker-compose workflow for local Laravel development&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;docker-compose-laravel&lt;/h1&gt; &#xA;&lt;p&gt;A pretty simplified Docker Compose workflow that sets up a LEMP network of containers for local Laravel development. You can view the full article that inspired this repo &lt;a href=&#34;https://dev.to/aschmelyun/the-beauty-of-docker-for-local-laravel-development-13c0&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gitnft.quine.sh/app/commits/list/repo/docker-compose-laravel&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/%F0%9F%94%AE-Open%20in%20GitNFT-darkviolet?style=flat&#34; alt=&#34;GitNFT&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;To get started, make sure you have &lt;a href=&#34;https://docs.docker.com/docker-for-mac/install/&#34;&gt;Docker installed&lt;/a&gt; on your system, and then clone this repository.&lt;/p&gt; &#xA;&lt;p&gt;Next, navigate in your terminal to the directory you cloned this, and spin up the containers for the web server by running &lt;code&gt;docker-compose up -d --build site&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;After that completes, follow the steps from the &lt;a href=&#34;https://raw.githubusercontent.com/aschmelyun/docker-compose-laravel/main/src/README.md&#34;&gt;src/README.md&lt;/a&gt; file to get your Laravel project added in (or create a new blank one).&lt;/p&gt; &#xA;&lt;p&gt;Bringing up the Docker Compose network with &lt;code&gt;site&lt;/code&gt; instead of just using &lt;code&gt;up&lt;/code&gt;, ensures that only our site&#39;s containers are brought up at the start, instead of all of the command containers as well. The following are built for our web server, with their exposed ports detailed:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;nginx&lt;/strong&gt; - &lt;code&gt;:80&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;mysql&lt;/strong&gt; - &lt;code&gt;:3306&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;php&lt;/strong&gt; - &lt;code&gt;:9000&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;redis&lt;/strong&gt; - &lt;code&gt;:6379&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;mailhog&lt;/strong&gt; - &lt;code&gt;:8025&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Three additional containers are included that handle Composer, NPM, and Artisan commands &lt;em&gt;without&lt;/em&gt; having to have these platforms installed on your local computer. Use the following command examples from your project root, modifying them to fit your particular use case.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;docker-compose run --rm composer update&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;docker-compose run --rm npm run dev&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;docker-compose run --rm artisan migrate&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Permissions Issues&lt;/h2&gt; &#xA;&lt;p&gt;If you encounter any issues with filesystem permissions while visiting your application or running a container command, try completing one of the sets of steps below.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;If you are using your server or local environment as the root user:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Bring any container(s) down with &lt;code&gt;docker-compose down&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Rename &lt;code&gt;docker-compose.root.yml&lt;/code&gt; file to &lt;code&gt;docker-compose.root.yml&lt;/code&gt;, replacing the previous one&lt;/li&gt; &#xA; &lt;li&gt;Re-build the containers by running &lt;code&gt;docker-compose build --no-cache&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;If you are using your server or local environment as a user that is not root:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Bring any container(s) down with &lt;code&gt;docker-compose down&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;In your terminal, run &lt;code&gt;export UID=$(id -u)&lt;/code&gt; and then &lt;code&gt;export GID=$(id -g)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;If you see any errors about readonly variables from the above step, you can ignore them and continue&lt;/li&gt; &#xA; &lt;li&gt;Re-build the containers by running &lt;code&gt;docker-compose build --no-cache&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Then, either bring back up your container network or re-run the command you were trying before, and see if that fixes it.&lt;/p&gt; &#xA;&lt;h2&gt;Persistent MySQL Storage&lt;/h2&gt; &#xA;&lt;p&gt;By default, whenever you bring down the Docker network, your MySQL data will be removed after the containers are destroyed. If you would like to have persistent data that remains after bringing containers down and back up, do the following:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Create a &lt;code&gt;mysql&lt;/code&gt; folder in the project root, alongside the &lt;code&gt;nginx&lt;/code&gt; and &lt;code&gt;src&lt;/code&gt; folders.&lt;/li&gt; &#xA; &lt;li&gt;Under the mysql service in your &lt;code&gt;docker-compose.yml&lt;/code&gt; file, add the following lines:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;volumes:&#xA;  - ./mysql:/var/lib/mysql&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Using BrowserSync with Laravel Mix&lt;/h2&gt; &#xA;&lt;p&gt;If you want to enable the hot-reloading that comes with Laravel Mix&#39;s BrowserSync option, you&#39;ll have to follow a few small steps. First, ensure that you&#39;re using the updated &lt;code&gt;docker-compose.yml&lt;/code&gt; with the &lt;code&gt;:3000&lt;/code&gt; and &lt;code&gt;:3001&lt;/code&gt; ports open on the npm service. Then, add the following to the end of your Laravel project&#39;s &lt;code&gt;webpack.mix.js&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;.browserSync({&#xA;    proxy: &#39;site&#39;,&#xA;    open: false,&#xA;    port: 3000,&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;From your terminal window at the project root, run the following command to start watching for changes with the npm container and its mapped ports:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker-compose run --rm --service-ports npm run watch&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;That should keep a small info pane open in your terminal (which you can exit with Ctrl + C). Visiting &lt;a href=&#34;http://localhost:3000&#34;&gt;localhost:3000&lt;/a&gt; in your browser should then load up your Laravel application with BrowserSync enabled and hot-reloading active.&lt;/p&gt; &#xA;&lt;h2&gt;MailHog&lt;/h2&gt; &#xA;&lt;p&gt;The current version of Laravel (8 as of today) uses MailHog as the default application for testing email sending and general SMTP work during local development. Using the provided Docker Hub image, getting an instance set up and ready is simple and straight-forward. The service is included in the &lt;code&gt;docker-compose.yml&lt;/code&gt; file, and spins up alongside the webserver and database services.&lt;/p&gt; &#xA;&lt;p&gt;To see the dashboard and view any emails coming through the system, visit &lt;a href=&#34;http://localhost:8025&#34;&gt;localhost:8025&lt;/a&gt; after running &lt;code&gt;docker-compose up -d site&lt;/code&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>hongyonghan/Docker_Microsoft365_E5_Renew_X</title>
    <updated>2022-05-30T02:06:37Z</updated>
    <id>tag:github.com,2022-05-30:/hongyonghan/Docker_Microsoft365_E5_Renew_X</id>
    <link href="https://github.com/hongyonghan/Docker_Microsoft365_E5_Renew_X" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Docker版本的E5调用API续订服务：Microsoft 365 E5 Renew X&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;strong&gt;制作不易，欢迎Star!!!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;切记不要浪费公共资源，如果不需要或者不使用，请一定不要搭建该服务！请一定要做好资料备份工作！&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;本文是基于作者SundayRX提出的E5 调用API续订服务：Microsoft 365 E5 Renew X的基础上提出的Docker版本的E5调用API续订服务。&lt;/p&gt; &#xA;&lt;p&gt;基础的账号注册等过程见SundayRX的博客：&lt;a href=&#34;https://blog.csdn.net/qq_33212020/article/details/119747634&#34;&gt;https://blog.csdn.net/qq_33212020/article/details/119747634&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;本文主要是让小白轻松部署自己的E5续订服务。&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;优点：&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;镜像小，仅仅225M，可以轻松部署在任何配置的服务器上，占用资源小&lt;/li&gt; &#xA; &lt;li&gt;部署方便，仅仅使用一行命令即可完成部署。&lt;/li&gt; &#xA; &lt;li&gt;等等。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;你需要有：&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;有Docker的环境，了解Docker的基本命令（没有也没有关系，可以很快学会）。&lt;/li&gt; &#xA; &lt;li&gt;有一个服务器/群晖NAS等。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;一些Docker环境安装的教程：&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Docker环境搭建：&lt;a href=&#34;https://www.jianshu.com/p/996e08b7976d&#34;&gt;https://www.jianshu.com/p/996e08b7976d&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;史上最全Docker环境安装指南：&lt;a href=&#34;https://zhuanlan.zhihu.com/p/82269806&#34;&gt;https://zhuanlan.zhihu.com/p/82269806&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;为了使得容器更加稳定且好用（小白专用），latest版本中添加了vim等软件，并且更换了基础镜像，会有点大。如果介意，请使用slim版本&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker pull hanhongyong/ms365-e5-renew-x:slim&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;下面部署命令时版本也改为slim版本即可。slim版本仅为225M。 建议使用latest版本，这个版本持续修改完善下去，slim版本仅为资源受限的主机使用。&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;部署步骤&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;安装Docker环境后，下载MS365 E5 Renew X镜像。&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hongyonghan/Docker_Microsoft365_E5_Renew_X/main/README.assets/image-20220211202818966.png&#34; alt=&#34;image-20220211202818966&#34;&gt;&lt;/p&gt; &lt;pre&gt;&lt;code&gt;docker pull hanhongyong/ms365-e5-renew-x:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;运行MS365 E5 Renew X镜像，得到容器。&lt;/p&gt; &lt;pre&gt;&lt;code&gt;docker run -d -p 1066:1066 -e TZ=Asia/Shanghai --name ms365  hanhongyong/ms365-e5-renew-x:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;默认管理员密码为：123456&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;进入容器内部，修改登录密码。 进入容器命令：&lt;/p&gt; &lt;pre&gt;&lt;code&gt;docker exec -it ms365 /bin/bash&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;进入Deploy文件夹：&lt;/p&gt; &lt;pre&gt;&lt;code&gt;cd Deploy&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;修改密码：&lt;/p&gt; &lt;pre&gt;&lt;code&gt;vim Config.xml&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;键盘敲入i键，移动上下左右光标，将123456修改为你想修改的密码。键盘敲入esc键，退出编辑模式，输入:wq!键退出编辑模式。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;服务访问：输入ip:1066.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hongyonghan/Docker_Microsoft365_E5_Renew_X/main/README.assets/image-20220211205438949.png&#34; alt=&#34;image-20220211205438949&#34;&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;5&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;以上就完成了部署。&lt;/p&gt; &lt;p&gt;&lt;strong&gt;定制版&lt;/strong&gt;（定制版为高级操作，主要是为了高级用户分享自己的站点给别人、方便迁移等操作。小白无需使用。）：&lt;/p&gt; &lt;pre&gt;&lt;code&gt;docker run -d -p 1066:1066 -v /root/Docker_Microsoft365_E5_Renew_X/Microsoft365_E5_Renew_X/Deploy:/app/Deploy  hanhongyong/ms365-e5-renew-x:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;其中-p为暴露服务器的端口（前面的1066，可以自行修改）和暴露容器的端口（后面的1066，可以自行修改，这个端口是在Config.xml中指定的开放的端口）；-v为数据卷的挂载，前面的Deploy指的是服务器中的Deploy文件夹（可以修改，但是必须是绝对路径），/app/Deploy指的是容器内的文件夹（不能修改）；--name为容器的名字。&lt;/p&gt; &#xA;&lt;p&gt;备份和迁移：&lt;/p&gt; &#xA;&lt;p&gt;所有的配置文件都放在/app文件路径下，如果您以后有迁移的需要可以用命令将容器中/app路径下的文件复制出来。或者在一开始的时候就可以挂载数据卷到您的之前的全部文件中。如：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run -d -p 1066:1066 -v /root/Docker_Microsoft365_E5_Renew_X/Microsoft365_E5_Renew_X/:/app/ hanhongyong/ms365-e5-renew-x:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;如此便可以实现您所要求的配置文件备份的功能，且您的容器中的文件和服务器主机中文件是一样的。&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;ARM64版本镜像&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker pull hanhongyong/ms365-e5-renew-x:arm&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run -d -p 1066:1066 -e TZ=Asia/Shanghai --name ms365  hanhongyong/ms365-e5-renew-x:arm&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Serverless部署&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;没有服务器的同学们，可以使用koyeb进行部署。点击下面按钮一键部署:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://app.koyeb.com/deploy?type=docker&amp;amp;image=docker.io/hanhongyong/ms365-e5-renew-x&amp;amp;name=web-renew&amp;amp;ports=1066;http;/&#34;&gt;&lt;img src=&#34;https://www.koyeb.com/static/images/deploy/button.svg?sanitize=true&#34; alt=&#34;Deploy to Koyeb&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;koyeb部署:感谢&lt;a href=&#34;https://github.com/hongyonghan/Docker_Microsoft365_E5_Renew_X/issues/5&#34;&gt;gd1214b&lt;/a&gt;提出的解决方案。 具体见文件: &lt;a href=&#34;https://raw.githubusercontent.com/hongyonghan/Docker_Microsoft365_E5_Renew_X/main/ReadMe_Serverless.md&#34;&gt;ReadMe_Serverless.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;注意：类似于heroku和koyeb等云容器平台，都会有重启实例的现象，不过heroku是每天强制重启，koyeb是隔几天重启一次。每次重启都会丢失实例在部署后的所有更改，造成数据丢失。请大家注意。感谢&lt;a href=&#34;https://github.com/hongyonghan/Docker_Microsoft365_E5_Renew_X/issues/15&#34;&gt;ChirmyRam&lt;/a&gt;给出的提醒。&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;开发相关的命令（与部署无关）：&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;##构建镜像&#xA;docker build -t ms365-e5-renew-x .&#xA;docker tag ms365-e5-renew-x:latest hanhongyong/ms365-e5-renew-x:latest&#xA;&#xA;#上传镜像&#xA;docker push hanhongyong/ms365-e5-renew-x:latest&#xA;#登录dockerhub&#xA;docker login&#xA;#使用buildx编译arm架构的镜像&#xA;docker buildx build --push --tag hanhongyong/ms365-e5-renew-x:arm --platform linux/arm64/v8 -f Dockerfile_arm .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;制作不易，欢迎Star!!!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;GitHub:&lt;a href=&#34;https://github.com/hongyonghan/Docker_Microsoft365_E5_Renew_X&#34;&gt;https://github.com/hongyonghan/Docker_Microsoft365_E5_Renew_X&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Dockerhub:&lt;a href=&#34;https://hub.docker.com/r/hanhongyong/ms365-e5-renew-x&#34;&gt;https://hub.docker.com/r/hanhongyong/ms365-e5-renew-x&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;CSDN:&lt;a href=&#34;https://blog.csdn.net/qq_40605167/article/details/122888580&#34;&gt;https://blog.csdn.net/qq_40605167/article/details/122888580&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>aws-amplify/amplify-hosting</title>
    <updated>2022-05-30T02:06:37Z</updated>
    <id>tag:github.com,2022-05-30:/aws-amplify/amplify-hosting</id>
    <link href="https://github.com/aws-amplify/amplify-hosting" rel="alternate"></link>
    <summary type="html">&lt;p&gt;AWS Amplify Hosting provides a Git-based workflow for deploying and hosting fullstack serverless web applications.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://aws.amazon.com/amplify/hosting/&#34;&gt; &lt;img alt=&#34;Amplify&#34; src=&#34;https://github.com/aws-amplify/community/raw/master/src/assets/images/logo-dark.png&#34; width=&#34;60&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;h1 align=&#34;center&#34;&gt; Amplify Hosting &lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://discord.gg/jWVbPfC&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/308323056592486420?logo=discord%22&#34; alt=&#34;DiscordChat&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;AWS Amplify Hosting provides a Git-based workflow for deploying and hosting fullstack serverless web applications. This repository provides:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A &lt;a href=&#34;https://github.com/aws-amplify/amplify-hosting/raw/master/FAQ.md&#34;&gt;FAQ&lt;/a&gt; for common issues&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/aws-amplify/amplify-hosting/raw/master/CHANGELOG.md&#34;&gt;Release history&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Tools and &lt;a href=&#34;https://github.com/aws-amplify/amplify-hosting/tree/master/images&#34;&gt;build images&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;RFCs for new feature launches&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/aws-amplify/amplify-hosting/issues&#34;&gt;Issue tracking&lt;/a&gt; - we also maintain an &lt;a href=&#34;https://forums.aws.amazon.com/forum.jspa?forumID=314&#34;&gt;AWS Forum&lt;/a&gt; but use this GitHub repository as our primary issue tracker.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Report a bug 🐛or feature request 💡&lt;a href=&#34;https://github.com/aws-amplify/amplify-hosting/issues/new/choose&#34;&gt;here&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;h3&gt;Bookmarks&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://console.amplify.aws&#34;&gt;Connect your app&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.aws.amazon.com/amplify/latest/userguide/welcome.html&#34;&gt;Official documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://aws.amazon.com/amplify/console/getting-started/&#34;&gt;Example projects&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://amplify.aws/community/posts&#34;&gt;Community posts&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Other Amplify projects&lt;/h3&gt; &#xA;&lt;p&gt;Looking for one of our other projects?&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/aws-amplify/amplify-adminui&#34;&gt;Amplify Admin UI&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/aws-amplify/amplify-js/issues&#34;&gt;Amplify JS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/aws-amplify/amplify-ios/issues&#34;&gt;Amplify iOS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/aws-amplify/amplify-android/issues&#34;&gt;Amplify Android&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/aws-amplify/amplify-cli/issues&#34;&gt;Amplify CLI&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://amplify.aws/community&#34;&gt;Amplify Community&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>aws/aws-codebuild-docker-images</title>
    <updated>2022-05-30T02:06:37Z</updated>
    <id>tag:github.com,2022-05-30:/aws/aws-codebuild-docker-images</id>
    <link href="https://github.com/aws/aws-codebuild-docker-images" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Official AWS CodeBuild repository for managed Docker images http://docs.aws.amazon.com/codebuild/latest/userguide/build-env-ref.html&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;AWS CodeBuild curated Docker images&lt;/h1&gt; &#xA;&lt;p&gt;This repository holds Dockerfiles of official AWS CodeBuild curated Docker images. Please refer to &lt;a href=&#34;http://docs.aws.amazon.com/codebuild/latest/userguide/build-env-ref.html&#34;&gt;the AWS CodeBuild User Guide&lt;/a&gt; for list of environments supported by AWS CodeBuild.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://codebuild.us-west-2.amazonaws.com/badges?uuid=eyJlbmNyeXB0ZWREYXRhIjoiSkJibVVQVEpvUms1cmw3YVlnU1hSdkpBQ0c5SFgyTkJXMFBFdEU2SWtySHREcUlUVlRhbW4zMEd3NlhsOWIzUWgvRkxhUWVSSTFPZGNNakNHRVNLalY0PSIsIml2UGFyYW1ldGVyU3BlYyI6IlV0QjBRZXRvS0F5dE5vbTciLCJtYXRlcmlhbFNldFNlcmlhbCI6MX0%3D&amp;amp;branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The master branch will sometimes have changes that are still in the process of being released in AWS CodeBuild. See the latest released versions of the Dockerfiles &lt;a href=&#34;https://github.com/aws/aws-codebuild-docker-images/releases&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;How to build Docker images&lt;/h3&gt; &#xA;&lt;p&gt;Steps to build Standard 5.0 image&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Run &lt;code&gt;git clone https://github.com/aws/aws-codebuild-docker-images.git&lt;/code&gt; to download this repository to your local machine&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;cd ubuntu/standard/5.0&lt;/code&gt; to change the directory in your local workspace. This is the location of the Standard 5.0 Dockerfile with Ubuntu base.&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;docker build -t aws/codebuild/standard:5.0 .&lt;/code&gt; to build Docker image locally&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To poke around in the image interactively, build it and run: &lt;code&gt;docker run -it --entrypoint sh aws/codebuild/standard:5.0 -c bash&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;To let the Docker daemon start up in the container, build it and run: &lt;code&gt;docker run -it --privileged aws/codebuild/standard:5.0 bash&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ git clone https://github.com/aws/aws-codebuild-docker-images.git&#xA;$ cd aws-codebuild-docker-images&#xA;$ cd ubuntu/standard/5.0&#xA;$ docker build -t aws/codebuild/standard:5.0 .&#xA;$ docker run -it --entrypoint sh aws/codebuild/standard:5.0 -c bash&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Image maintenance&lt;/h3&gt; &#xA;&lt;p&gt;Some of the images in this repository are no longer actively maintained by AWS CodeBuild and may no longer build successfully. These images will not receive any further updates. They remain in this repository as a reference for the contents of these images that were previously released by CodeBuild.&lt;/p&gt; &#xA;&lt;p&gt;The following images are actively maintained by AWS CodeBuild, and are listed in the CodeBuild console.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aws/aws-codebuild-docker-images/master/ubuntu/standard/3.0&#34;&gt;standard 3.0&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aws/aws-codebuild-docker-images/master/ubuntu/standard/4.0&#34;&gt;standard 4.0&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aws/aws-codebuild-docker-images/master/ubuntu/standard/5.0&#34;&gt;standard 5.0&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aws/aws-codebuild-docker-images/master/al2/x86_64/standard/2.0&#34;&gt;amazonlinux2-x86_64-standard:2.0&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aws/aws-codebuild-docker-images/master/al2/x86_64/standard/3.0&#34;&gt;amazonlinux2-x86_64-standard:3.0&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aws/aws-codebuild-docker-images/master/al2/aarch64/standard/1.0&#34;&gt;amazonlinux2-aarch64-standard:1.0&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aws/aws-codebuild-docker-images/master/al2/aarch64/standard/2.0&#34;&gt;amazonlinux2-aarch64-standard:2.0&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>techno-tim/launchpad</title>
    <updated>2022-05-30T02:06:37Z</updated>
    <id>tag:github.com,2022-05-30:/techno-tim/launchpad</id>
    <link href="https://github.com/techno-tim/launchpad" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A collection of quick starters for ansible, kubernetes, docker, linux, windows, and more. Great for HomeLabs!&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;launchpad 🚀&lt;/h1&gt; &#xA;&lt;h2&gt;Info&lt;/h2&gt; &#xA;&lt;p&gt;A collection of quick starters for ansible, kubernetes, docker, linux, windows, and more. Great for HomeLabs, learning, and automation!&lt;/p&gt; &#xA;&lt;p&gt;Don&#39;t forget to ⭐ this repo and fork it too! 👆&lt;/p&gt; &#xA;&lt;p&gt;See each folder for details 📁&lt;/p&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;p&gt;Created by &lt;a href=&#34;https://technotim.live&#34;&gt;TechnoTim&lt;/a&gt; and updated by the community with 💛&lt;/p&gt; &#xA;&lt;p&gt;► YouTube &lt;a href=&#34;https://www.youtube.com/technotimlive&#34;&gt;https://www.youtube.com/technotimlive&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;► Twitch &lt;a href=&#34;https://www.twitch.tv/TechnoTim&#34;&gt;https://www.twitch.tv/TechnoTim&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;► Twitter &lt;a href=&#34;https://twitter.com/TechnoTimLive&#34;&gt;https://twitter.com/TechnoTimLive&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;► Discord &lt;a href=&#34;https://l.technotim.live/discord&#34;&gt;https://l.technotim.live/discord&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;► GitHub &lt;a href=&#34;https://github.com/timothystewart6&#34;&gt;https://github.com/timothystewart6&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>developeranaz/Ubuntu-Desktop-noVNC-Heroku-VPS</title>
    <updated>2022-05-30T02:06:37Z</updated>
    <id>tag:github.com,2022-05-30:/developeranaz/Ubuntu-Desktop-noVNC-Heroku-VPS</id>
    <link href="https://github.com/developeranaz/Ubuntu-Desktop-noVNC-Heroku-VPS" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Ubuntu-Desktop-noVNC-Heroku-VPS serves docker VPS via heroku web and noVNC&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Ubuntu-Desktop-noVNC-Heroku-VPS (EXPERIMENTAL)&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://developeranaz.github.io/Ubuntu-Desktop-noVNC-Heroku-VPS/random.html&#34;&gt;&lt;img src=&#34;https://www.herokucdn.com/deploy/button.svg?sanitize=true&#34; alt=&#34;Deploy&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Ubuntu-Desktop-noVNC-Heroku-VPS serves docker VPS via heroku web and noVNC&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/developeranaz/Ubuntu-Desktop-noVNC-Heroku-VPS/raw/main/vncimgs/Screenshot_20210519-094834.jpg&#34; alt=&#34;1&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/developeranaz/Ubuntu-Desktop-noVNC-Heroku-VPS/raw/main/vncimgs/Screenshot_20210519_104452_com.brave.browser_nightly.jpg&#34; alt=&#34;2&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/developeranaz/Ubuntu-Desktop-noVNC-Heroku-VPS/raw/main/vncimgs/Screenshot_20210519-094825.jpg&#34; alt=&#34;3&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;What&#39;s New&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Modern novnc.&lt;/li&gt; &#xA; &lt;li&gt;Mobile Browser compatability.&lt;/li&gt; &#xA; &lt;li&gt;Remote scaling and local scaling available.&lt;/li&gt; &#xA; &lt;li&gt;Mouse&lt;/li&gt; &#xA; &lt;li&gt;Keyboard&lt;/li&gt; &#xA; &lt;li&gt;Browser installed (FALKON BROWSER)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This is Just a recreated version Now added with Mordern VNC&lt;/p&gt; &#xA;&lt;p&gt;NOTE : Heroku can&#39;t handle a full machine&#39;s workload.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Don&#39;t post issues this repository is full of issues i can&#39;t fix them.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://developeranaz.github.io/Ubuntu-Desktop-noVNC-Heroku-VPS/random.html&#34;&gt;&lt;img src=&#34;https://www.herokucdn.com/deploy/button.svg?sanitize=true&#34; alt=&#34;Deploy&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Gusto/aptible-cli-docker</title>
    <updated>2022-05-30T02:06:37Z</updated>
    <id>tag:github.com,2022-05-30:/Gusto/aptible-cli-docker</id>
    <link href="https://github.com/Gusto/aptible-cli-docker" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Simple container containing the aptible cli&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://buildkite.com/gusto/aptible-cli&#34;&gt;&lt;img src=&#34;https://badge.buildkite.com/3636ee445e2b22471da318cfc17d25534c30adb687ec5d54fb.svg?sanitize=true&#34; alt=&#34;Build status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;aptible-cli-docker&lt;/h1&gt; &#xA;&lt;p&gt;Simple container containing the aptible cli&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>sou6av/raganork-md-deploy</title>
    <updated>2022-05-30T02:06:37Z</updated>
    <id>tag:github.com,2022-05-30:/sou6av/raganork-md-deploy</id>
    <link href="https://github.com/sou6av/raganork-md-deploy" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Just fork this. No need of editing files :)&lt;/h1&gt;</summary>
  </entry>
  <entry>
    <title>nocodb/nocodb-seed-heroku</title>
    <updated>2022-05-30T02:06:37Z</updated>
    <id>tag:github.com,2022-05-30:/nocodb/nocodb-seed-heroku</id>
    <link href="https://github.com/nocodb/nocodb-seed-heroku" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;heroku&lt;/h1&gt; &#xA;&lt;h2&gt;1-Click Deploy&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://heroku.com/deploy&#34;&gt;&lt;img src=&#34;https://www.herokucdn.com/deploy/button.svg?sanitize=true&#34; width=&#34;250px&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://render.com/deploy?repo=https://github.com/nocodb/nocodb-seed-heroku&#34;&gt;&lt;img src=&#34;https://render.com/images/deploy-to-render-button.svg?sanitize=true&#34; alt=&#34;Deploy to Render&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://app.runx.dev/deploy-with-aws?url=https%3A%2F%2Fgithub.com%2Fnocodb%2Fnocodb-seed-heroku%2Fblob%2Fmain%2Fopta.yaml&amp;amp;name=NocoDB&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/run-x/opta/main/assets/deploy-to-aws-using-opta.svg?sanitize=true&#34; alt=&#34;Deploy&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>xuiv/v2ray-heroku</title>
    <updated>2022-05-30T02:06:37Z</updated>
    <id>tag:github.com,2022-05-30:/xuiv/v2ray-heroku</id>
    <link href="https://github.com/xuiv/v2ray-heroku" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;v2ray-heroku&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;部署&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h1&gt;点击 &lt;a href=&#34;https://heroku.com/deploy?template=https://github.com/xuiv/v2ray-heroku&#34;&gt;&lt;img src=&#34;https://www.herokucdn.com/deploy/button.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;，&lt;a href=&#34;https://heroku.com/deploy?template=https://github.com/xuiv/v2ray-heroku&#34;&gt;一键部署到heroku&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;客户端config.json设置如下：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;{&#xA;  &#34;log&#34;: {&#xA;    &#34;loglevel&#34;: &#34;warning&#34;&#xA;  },&#xA;  &#34;inbound&#34;: {&#xA;    &#34;port&#34;: 1080,&#xA;    &#34;listen&#34;: &#34;127.0.0.1&#34;,&#xA;    &#34;protocol&#34;: &#34;socks&#34;,&#xA;    &#34;domainOverride&#34;: [&#34;tls&#34;,&#34;http&#34;],&#xA;    &#34;settings&#34;: {&#xA;      &#34;auth&#34;: &#34;noauth&#34;,&#xA;      &#34;udp&#34;: true&#xA;    }&#xA;  },&#xA;  &#34;outbound&#34;: {&#xA;    &#34;protocol&#34;: &#34;vmess&#34;,&#xA;    &#34;settings&#34;: {&#xA;      &#34;vnext&#34;: [{&#xA;        &#34;address&#34;: &#34;xxxx.herokuapp.com&#34;,&#xA;        &#34;port&#34;: 443,&#xA;        &#34;users&#34;: [{&#xA;          &#34;id&#34;: &#34;b831381d-6324-4d53-ad4f-8cda48b30811&#34;,&#xA;          &#34;alterId&#34;: 64&#xA;        }]&#xA;      }]&#xA;    },&#xA;    &#34;streamSettings&#34;: {&#xA;      &#34;network&#34;: &#34;ws&#34;,&#xA;      &#34;security&#34;: &#34;tls&#34;,&#xA;      &#34;tlsSettings&#34;: {&#xA;        &#34;allowInsecure&#34;: true,&#xA;        &#34;serverName&#34;: null&#xA;      }&#xA;    },&#xA;    &#34;mux&#34;: {&#xA;      &#34;enabled&#34;: true,&#xA;      &#34;concurrency&#34;: 8&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>Gusto/ruby</title>
    <updated>2022-05-30T02:06:37Z</updated>
    <id>tag:github.com,2022-05-30:/Gusto/ruby</id>
    <link href="https://github.com/Gusto/ruby" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Docker images for ruby (and ubuntu)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ruby&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/docker-library/ruby&#34;&gt;Docker Library&lt;/a&gt; doesn&#39;t &lt;a href=&#34;https://github.com/docker-library/ruby/issues/258&#34;&gt;support&lt;/a&gt; ruby + ubuntu, so we will build them for Gusto here&lt;/p&gt; &#xA;&lt;h1&gt;Details&lt;/h1&gt; &#xA;&lt;p&gt;You can find additional details in the &lt;a href=&#34;https://github.com/Gusto/ruby/raw/master/DESCRIPTION.md&#34;&gt;DESCRIPTION.md&lt;/a&gt; file&lt;/p&gt;</summary>
  </entry>
</feed>