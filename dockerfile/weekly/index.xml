<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dockerfile Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-31T02:09:27Z</updated>
  <subtitle>Weekly Trending of Dockerfile in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>aschmelyun/docker-compose-laravel</title>
    <updated>2022-07-31T02:09:27Z</updated>
    <id>tag:github.com,2022-07-31:/aschmelyun/docker-compose-laravel</id>
    <link href="https://github.com/aschmelyun/docker-compose-laravel" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A docker-compose workflow for local Laravel development&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;docker-compose-laravel&lt;/h1&gt; &#xA;&lt;p&gt;A pretty simplified Docker Compose workflow that sets up a LEMP network of containers for local Laravel development. You can view the full article that inspired this repo &lt;a href=&#34;https://dev.to/aschmelyun/the-beauty-of-docker-for-local-laravel-development-13c0&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;To get started, make sure you have &lt;a href=&#34;https://docs.docker.com/docker-for-mac/install/&#34;&gt;Docker installed&lt;/a&gt; on your system, and then clone this repository.&lt;/p&gt; &#xA;&lt;p&gt;Next, navigate in your terminal to the directory you cloned this, and spin up the containers for the web server by running &lt;code&gt;docker-compose up -d --build site&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;After that completes, follow the steps from the &lt;a href=&#34;https://raw.githubusercontent.com/aschmelyun/docker-compose-laravel/main/src/README.md&#34;&gt;src/README.md&lt;/a&gt; file to get your Laravel project added in (or create a new blank one).&lt;/p&gt; &#xA;&lt;p&gt;Bringing up the Docker Compose network with &lt;code&gt;site&lt;/code&gt; instead of just using &lt;code&gt;up&lt;/code&gt;, ensures that only our site&#39;s containers are brought up at the start, instead of all of the command containers as well. The following are built for our web server, with their exposed ports detailed:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;nginx&lt;/strong&gt; - &lt;code&gt;:80&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;mysql&lt;/strong&gt; - &lt;code&gt;:3306&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;php&lt;/strong&gt; - &lt;code&gt;:9000&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;redis&lt;/strong&gt; - &lt;code&gt;:6379&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;mailhog&lt;/strong&gt; - &lt;code&gt;:8025&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Three additional containers are included that handle Composer, NPM, and Artisan commands &lt;em&gt;without&lt;/em&gt; having to have these platforms installed on your local computer. Use the following command examples from your project root, modifying them to fit your particular use case.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;docker-compose run --rm composer update&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;docker-compose run --rm npm run dev&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;docker-compose run --rm artisan migrate&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Permissions Issues&lt;/h2&gt; &#xA;&lt;p&gt;If you encounter any issues with filesystem permissions while visiting your application or running a container command, try completing one of the sets of steps below.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;If you are using your server or local environment as the root user:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Bring any container(s) down with &lt;code&gt;docker-compose down&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Rename &lt;code&gt;docker-compose.root.yml&lt;/code&gt; file to &lt;code&gt;docker-compose.root.yml&lt;/code&gt;, replacing the previous one&lt;/li&gt; &#xA; &lt;li&gt;Re-build the containers by running &lt;code&gt;docker-compose build --no-cache&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;If you are using your server or local environment as a user that is not root:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Bring any container(s) down with &lt;code&gt;docker-compose down&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;In your terminal, run &lt;code&gt;export UID=$(id -u)&lt;/code&gt; and then &lt;code&gt;export GID=$(id -g)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;If you see any errors about readonly variables from the above step, you can ignore them and continue&lt;/li&gt; &#xA; &lt;li&gt;Re-build the containers by running &lt;code&gt;docker-compose build --no-cache&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Then, either bring back up your container network or re-run the command you were trying before, and see if that fixes it.&lt;/p&gt; &#xA;&lt;h2&gt;Persistent MySQL Storage&lt;/h2&gt; &#xA;&lt;p&gt;By default, whenever you bring down the Docker network, your MySQL data will be removed after the containers are destroyed. If you would like to have persistent data that remains after bringing containers down and back up, do the following:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Create a &lt;code&gt;mysql&lt;/code&gt; folder in the project root, alongside the &lt;code&gt;nginx&lt;/code&gt; and &lt;code&gt;src&lt;/code&gt; folders.&lt;/li&gt; &#xA; &lt;li&gt;Under the mysql service in your &lt;code&gt;docker-compose.yml&lt;/code&gt; file, add the following lines:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;volumes:&#xA;  - ./mysql:/var/lib/mysql&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Using BrowserSync with Laravel Mix&lt;/h2&gt; &#xA;&lt;p&gt;If you want to enable the hot-reloading that comes with Laravel Mix&#39;s BrowserSync option, you&#39;ll have to follow a few small steps. First, ensure that you&#39;re using the updated &lt;code&gt;docker-compose.yml&lt;/code&gt; with the &lt;code&gt;:3000&lt;/code&gt; and &lt;code&gt;:3001&lt;/code&gt; ports open on the npm service. Then, add the following to the end of your Laravel project&#39;s &lt;code&gt;webpack.mix.js&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;.browserSync({&#xA;    proxy: &#39;site&#39;,&#xA;    open: false,&#xA;    port: 3000,&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;From your terminal window at the project root, run the following command to start watching for changes with the npm container and its mapped ports:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker-compose run --rm --service-ports npm run watch&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;That should keep a small info pane open in your terminal (which you can exit with Ctrl + C). Visiting &lt;a href=&#34;http://localhost:3000&#34;&gt;localhost:3000&lt;/a&gt; in your browser should then load up your Laravel application with BrowserSync enabled and hot-reloading active.&lt;/p&gt; &#xA;&lt;h2&gt;MailHog&lt;/h2&gt; &#xA;&lt;p&gt;The current version of Laravel (8 as of today) uses MailHog as the default application for testing email sending and general SMTP work during local development. Using the provided Docker Hub image, getting an instance set up and ready is simple and straight-forward. The service is included in the &lt;code&gt;docker-compose.yml&lt;/code&gt; file, and spins up alongside the webserver and database services.&lt;/p&gt; &#xA;&lt;p&gt;To see the dashboard and view any emails coming through the system, visit &lt;a href=&#34;http://localhost:8025&#34;&gt;localhost:8025&lt;/a&gt; after running &lt;code&gt;docker-compose up -d site&lt;/code&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>dotnet/docs</title>
    <updated>2022-07-31T02:09:27Z</updated>
    <id>tag:github.com,2022-07-31:/dotnet/docs</id>
    <link href="https://github.com/dotnet/docs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;This repository contains .NET Documentation.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;.NET Docs&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/dotnet/docs/workflows/Markdownlint/badge.svg?sanitize=true&#34; alt=&#34;Markdownlint&#34;&gt; &lt;a href=&#34;https://github.com/dotnet/docs/actions/workflows/version-sweep.yml&#34;&gt;&lt;img src=&#34;https://github.com/dotnet/docs/actions/workflows/version-sweep.yml/badge.svg?sanitize=true&#34; alt=&#34;target supported version&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This repository contains the conceptual documentation for .NET. The &lt;a href=&#34;https://docs.microsoft.com/dotnet&#34;&gt;.NET documentation site&lt;/a&gt; is built from multiple repositories in addition to this one:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dotnet/dotnet-api-docs&#34;&gt;API reference&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dotnet/roslyn-api-docs&#34;&gt;.NET Compiler Platform SDK reference&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Issues and tasks for all but the API reference repository are tracked here. We have a large community using these resources. We make our best effort to respond to issues in a timely fashion. You can read more about our procedures for classifying and resolving issues in our &lt;a href=&#34;https://raw.githubusercontent.com/dotnet/docs/main/issues-policy.md&#34;&gt;Issues policy&lt;/a&gt; topic.&lt;/p&gt; &#xA;&lt;p&gt;We welcome contributions to help us improve and complete the .NET docs. This is a very large repo, covering a large area. If this is your first visit, see our &lt;a href=&#34;https://raw.githubusercontent.com/dotnet/docs/main/styleguide/labels-projects.md&#34;&gt;labels and projects roadmap&lt;/a&gt; for help navigating the issues and projects in this repository.&lt;/p&gt; &#xA;&lt;p&gt;To contribute, see:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/dotnet/docs/main/CONTRIBUTING.md&#34;&gt;Contributing Guide&lt;/a&gt; for instructions on procedures we use.&lt;/li&gt; &#xA; &lt;li&gt;Issues labeled &lt;a href=&#34;https://github.com/dotnet/docs/issues?q=is%3Aopen+is%3Aissue+label%3Aup-for-grabs&#34;&gt;&lt;code&gt;up-for-grabs&lt;/code&gt;&lt;/a&gt; for ideas.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/contribute/hacktoberfest&#34;&gt;#Hacktoberfest and Microsoft Docs&lt;/a&gt; for details on our participation in the annual event.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you&#39;re interested in helping migrate existing code that targets the .NET Framework from the &lt;a href=&#34;https://docs.microsoft.com/teamblog/msdn-code-gallery-retired&#34;&gt;retired Code Gallery&lt;/a&gt; site to .NET Core applications stored in our &lt;a href=&#34;https://github.com/dotnet/samples&#34;&gt;samples repository&lt;/a&gt; and downloadable from the &lt;a href=&#34;https://docs.microsoft.com/samples/browse&#34;&gt;Samples Browser&lt;/a&gt;, see the &lt;a href=&#34;https://github.com/dotnet/docs/projects/88&#34;&gt;Code Gallery migration&lt;/a&gt; project. The code gallery samples were moved to the &lt;a href=&#34;https://github.com/microsoftarchive?q=msdn-code-gallery&#34;&gt;Microsoft Archive&lt;/a&gt; organization.&lt;/p&gt; &#xA;&lt;p&gt;This project has adopted the code of conduct defined by the Contributor Covenant to clarify expected behavior in our community. For more information, see the &lt;a href=&#34;https://dotnetfoundation.org/code-of-conduct&#34;&gt;.NET Foundation Code of Conduct&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>appleboy/ssh-action</title>
    <updated>2022-07-31T02:09:27Z</updated>
    <id>tag:github.com,2022-07-31:/appleboy/ssh-action</id>
    <link href="https://github.com/appleboy/ssh-action" rel="alternate"></link>
    <summary type="html">&lt;p&gt;GitHub Actions for executing remote ssh commands.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;🚀 SSH for GitHub Actions&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/features/actions&#34;&gt;GitHub Action&lt;/a&gt; for executing remote ssh commands.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/appleboy/ssh-action/master/images/ssh-workflow.png&#34; alt=&#34;ssh workflow&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/appleboy/ssh-action/actions&#34;&gt;&lt;img src=&#34;https://github.com/appleboy/ssh-action/workflows/remote%20ssh%20command/badge.svg?sanitize=true&#34; alt=&#34;Actions Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Important&lt;/strong&gt;: Only support &lt;strong&gt;Linux&lt;/strong&gt; &lt;a href=&#34;https://www.docker.com/&#34;&gt;docker&lt;/a&gt; container.&lt;/p&gt; &#xA;&lt;h2&gt;Input variables&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/appleboy/ssh-action/master/action.yml&#34;&gt;action.yml&lt;/a&gt; for more detailed information.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;host&lt;/code&gt; - ssh host&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;port&lt;/code&gt; - ssh port, default is &lt;code&gt;22&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;username&lt;/code&gt; - ssh username&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;password&lt;/code&gt; - ssh password&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;passphrase&lt;/code&gt; - the passphrase is usually to encrypt the private key&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;sync&lt;/code&gt; - synchronous execution if multiple hosts, default is false&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;timeout&lt;/code&gt; - timeout for ssh to remote host, default is &lt;code&gt;30s&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;command_timeout&lt;/code&gt; - timeout for ssh command, default is &lt;code&gt;10m&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;key&lt;/code&gt; - content of ssh private key. ex raw content of ~/.ssh/id_rsa&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;key_path&lt;/code&gt; - path of ssh private key&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;fingerprint&lt;/code&gt; - fingerprint SHA256 of the host public key, default is to skip verification&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;script&lt;/code&gt; - execute commands&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;script_stop&lt;/code&gt; - stop script after first failure&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;envs&lt;/code&gt; - pass environment variable to shell script&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;debug&lt;/code&gt; - enable debug mode&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;use_insecure_cipher&lt;/code&gt; - include more ciphers with use_insecure_cipher (see &lt;a href=&#34;https://github.com/appleboy/ssh-action/issues/56&#34;&gt;#56&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cipher&lt;/code&gt; - the allowed cipher algorithms. If unspecified then a sensible&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;SSH Proxy Setting:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;proxy_host&lt;/code&gt; - proxy host&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;proxy_port&lt;/code&gt; - proxy port, default is &lt;code&gt;22&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;proxy_username&lt;/code&gt; - proxy username&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;proxy_password&lt;/code&gt; - proxy password&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;proxy_passphrase&lt;/code&gt; - the passphrase is usually to encrypt the private key&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;proxy_timeout&lt;/code&gt; - timeout for ssh to proxy host, default is &lt;code&gt;30s&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;proxy_key&lt;/code&gt; - content of ssh proxy private key.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;proxy_key_path&lt;/code&gt; - path of ssh proxy private key&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;proxy_fingerprint&lt;/code&gt; - fingerprint SHA256 of the proxy host public key, default is to skip verification&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;proxy_use_insecure_cipher&lt;/code&gt; - include more ciphers with use_insecure_cipher (see &lt;a href=&#34;https://github.com/appleboy/ssh-action/issues/56&#34;&gt;#56&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;proxy_cipher&lt;/code&gt; - the allowed cipher algorithms. If unspecified then a sensible&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Executing remote ssh commands.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;name: remote ssh command&#xA;on: [push]&#xA;jobs:&#xA;&#xA;  build:&#xA;    name: Build&#xA;    runs-on: ubuntu-latest&#xA;    steps:&#xA;    - name: executing remote ssh commands using password&#xA;      uses: appleboy/ssh-action@master&#xA;      with:&#xA;        host: ${{ secrets.HOST }}&#xA;        username: ${{ secrets.USERNAME }}&#xA;        password: ${{ secrets.PASSWORD }}&#xA;        port: ${{ secrets.PORT }}&#xA;        script: whoami&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;output:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;======CMD======&#xA;whoami&#xA;======END======&#xA;out: ***&#xA;==============================================&#xA;✅ Successfully executed commands to all host.&#xA;==============================================&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Setting up a SSH Key&lt;/h3&gt; &#xA;&lt;p&gt;Make sure to follow the below steps while creating SSH Keys and using them. The best practice is create the SSH Keys on local machine not remote machine. Login with username specified in Github Secrets. Generate a RSA Key-Pair:&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;rsa&lt;/summary&gt; &#xA; &lt;p&gt; &lt;/p&gt;&#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ssh-keygen -t rsa -b 4096 -C &#34;your_email@example.com&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;ed25519&lt;/summary&gt; &#xA; &lt;p&gt; &lt;/p&gt;&#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ssh-keygen -t ed25519 -a 200 -C &#34;your_email@example.com&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;Add newly generated key into Authorized keys. Read more about authorized keys &lt;a href=&#34;https://www.ssh.com/ssh/authorized_keys/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;rsa&lt;/summary&gt; &#xA; &lt;p&gt; &lt;/p&gt;&#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cat .ssh/id_rsa.pub | ssh b@B &#39;cat &amp;gt;&amp;gt; .ssh/authorized_keys&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;ed25519&lt;/summary&gt; &#xA; &lt;p&gt; &lt;/p&gt;&#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cat .ssh/id_ed25519.pub | ssh b@B &#39;cat &amp;gt;&amp;gt; .ssh/authorized_keys&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;Copy Private Key content and paste in Github Secrets.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;rsa&lt;/summary&gt; &#xA; &lt;p&gt; &lt;/p&gt;&#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;clip &amp;lt; ~/.ssh/id_rsa&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;ed25519&lt;/summary&gt; &#xA; &lt;p&gt; &lt;/p&gt;&#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;clip &amp;lt; ~/.ssh/id_ed25519&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;See the detail information about &lt;a href=&#34;http://www.linuxproblem.org/art_9.html&#34;&gt;SSH login without password&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;A note&lt;/strong&gt; from one of our readers: Depending on your version of SSH you might also have to do the following changes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Put the public key in &lt;code&gt;.ssh/authorized_keys2&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Change the permissions of &lt;code&gt;.ssh&lt;/code&gt; to 700&lt;/li&gt; &#xA; &lt;li&gt;Change the permissions of &lt;code&gt;.ssh/authorized_keys2&lt;/code&gt; to 640&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;If you are using OpenSSH&lt;/h3&gt; &#xA;&lt;p&gt;If you are currently using OpenSSH and are getting the following error:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ssh: handshake failed: ssh: unable to authenticate, attempted methods [none publickey]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Make sure that your key algorithm of choice is supported. On Ubuntu 20.04 or later you must explicitly allow the use of the ssh-rsa algorithm. Add the following line to your OpenSSH daemon file (which is either &lt;code&gt;/etc/ssh/sshd_config&lt;/code&gt; or a drop-in file under &lt;code&gt;/etc/ssh/sshd_config.d/&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;CASignatureAlgorithms +ssh-rsa&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, &lt;code&gt;ed25519&lt;/code&gt; keys are accepted by default in OpenSSH. You could use this instead of rsa if needed:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ssh-keygen -t ed25519 -a 200 -C &#34;your_email@example.com&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Example&lt;/h3&gt; &#xA;&lt;h4&gt;Executing remote ssh commands using password&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;- name: executing remote ssh commands using password&#xA;  uses: appleboy/ssh-action@master&#xA;  with:&#xA;    host: ${{ secrets.HOST }}&#xA;    username: ${{ secrets.USERNAME }}&#xA;    password: ${{ secrets.PASSWORD }}&#xA;    port: ${{ secrets.PORT }}&#xA;    script: whoami&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Using private key&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;- name: executing remote ssh commands using ssh key&#xA;  uses: appleboy/ssh-action@master&#xA;  with:&#xA;    host: ${{ secrets.HOST }}&#xA;    username: ${{ secrets.USERNAME }}&#xA;    key: ${{ secrets.KEY }}&#xA;    port: ${{ secrets.PORT }}&#xA;    script: whoami&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Multiple Commands&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;- name: multiple command&#xA;  uses: appleboy/ssh-action@master&#xA;  with:&#xA;    host: ${{ secrets.HOST }}&#xA;    username: ${{ secrets.USERNAME }}&#xA;    key: ${{ secrets.KEY }}&#xA;    port: ${{ secrets.PORT }}&#xA;    script: |&#xA;      whoami&#xA;      ls -al&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/appleboy/ssh-action/master/images/output-result.png&#34; alt=&#34;result&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Multiple Hosts&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;  - name: multiple host&#xA;    uses: appleboy/ssh-action@master&#xA;    with:&#xA;-     host: &#34;foo.com&#34;&#xA;+     host: &#34;foo.com,bar.com&#34;&#xA;      username: ${{ secrets.USERNAME }}&#xA;      key: ${{ secrets.KEY }}&#xA;      port: ${{ secrets.PORT }}&#xA;      script: |&#xA;        whoami&#xA;        ls -al&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Multiple hosts with different port&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;  - name: multiple host&#xA;    uses: appleboy/ssh-action@master&#xA;    with:&#xA;-     host: &#34;foo.com&#34;&#xA;+     host: &#34;foo.com:1234,bar.com:5678&#34;&#xA;      username: ${{ secrets.USERNAME }}&#xA;      key: ${{ secrets.KEY }}&#xA;      script: |&#xA;        whoami&#xA;        ls -al&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Synchronous execution on multiple hosts&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;  - name: multiple host&#xA;    uses: appleboy/ssh-action@master&#xA;    with:&#xA;      host: &#34;foo.com,bar.com&#34;&#xA;+     sync: true&#xA;      username: ${{ secrets.USERNAME }}&#xA;      key: ${{ secrets.KEY }}&#xA;      port: ${{ secrets.PORT }}&#xA;      script: |&#xA;        whoami&#xA;        ls -al&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Pass environment variable to shell script&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;  - name: pass environment&#xA;    uses: appleboy/ssh-action@master&#xA;+   env:&#xA;+     FOO: &#34;BAR&#34;&#xA;+     BAR: &#34;FOO&#34;&#xA;+     SHA: ${{ github.sha }}&#xA;    with:&#xA;      host: ${{ secrets.HOST }}&#xA;      username: ${{ secrets.USERNAME }}&#xA;      key: ${{ secrets.KEY }}&#xA;      port: ${{ secrets.PORT }}&#xA;+     envs: FOO,BAR,SHA&#xA;      script: |&#xA;        echo &#34;I am $FOO&#34;&#xA;        echo &#34;I am $BAR&#34;&#xA;        echo &#34;sha: $SHA&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;Inside &lt;code&gt;env&lt;/code&gt; object, you need to pass every environment variable as a string, passing &lt;code&gt;Integer&lt;/code&gt; data type or any other may output unexpected results.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Stop script after first failure&lt;/h4&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;ex: missing &lt;code&gt;abc&lt;/code&gt; folder&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;  - name: stop script if command error&#xA;    uses: appleboy/ssh-action@master&#xA;    with:&#xA;      host: ${{ secrets.HOST }}&#xA;      username: ${{ secrets.USERNAME }}&#xA;      key: ${{ secrets.KEY }}&#xA;      port: ${{ secrets.PORT }}&#xA;+     script_stop: true&#xA;      script: |&#xA;        mkdir abc/def&#xA;        ls -al&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;output:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;======CMD======&#xA;mkdir abc/def&#xA;ls -al&#xA;&#xA;======END======&#xA;2019/11/21 01:16:21 Process exited with status 1&#xA;err: mkdir: cannot create directory ‘abc/def’: No such file or directory&#xA;##[error]Docker run failed with exit code 1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;How to connect remote server using &lt;code&gt;ProxyCommand&lt;/code&gt;?&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;+--------+       +----------+      +-----------+&#xA;| Laptop | &amp;lt;--&amp;gt;  | Jumphost | &amp;lt;--&amp;gt; | FooServer |&#xA;+--------+       +----------+      +-----------+&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;in your &lt;code&gt;~/.ssh/config&lt;/code&gt;, you will see the following.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Host Jumphost&#xA;  HostName Jumphost&#xA;  User ubuntu&#xA;  Port 22&#xA;  IdentityFile ~/.ssh/keys/jump_host.pem&#xA;&#xA;Host FooServer&#xA;  HostName FooServer&#xA;  User ubuntu&#xA;  Port 22&#xA;  ProxyCommand ssh -q -W %h:%p Jumphost&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;How to convert to YAML format of GitHubActions&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;  - name: ssh proxy command&#xA;    uses: appleboy/ssh-action@master&#xA;    with:&#xA;      host: ${{ secrets.HOST }}&#xA;      username: ${{ secrets.USERNAME }}&#xA;      key: ${{ secrets.KEY }}&#xA;      port: ${{ secrets.PORT }}&#xA;+     proxy_host: ${{ secrets.PROXY_HOST }}&#xA;+     proxy_username: ${{ secrets.PROXY_USERNAME }}&#xA;+     proxy_key: ${{ secrets.PROXY_KEY }}&#xA;+     proxy_port: ${{ secrets.PROXY_PORT }}&#xA;      script: |&#xA;        mkdir abc/def&#xA;        ls -al&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Protecting a Private Key&lt;/h4&gt; &#xA;&lt;p&gt;The purpose of the passphrase is usually to encrypt the private key. This makes the key file by itself useless to an attacker. It is not uncommon for files to leak from backups or decommissioned hardware, and hackers commonly exfiltrate files from compromised systems.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;  - name: ssh key passphrase&#xA;    uses: appleboy/ssh-action@master&#xA;    with:&#xA;      host: ${{ secrets.HOST }}&#xA;      username: ${{ secrets.USERNAME }}&#xA;      key: ${{ secrets.KEY }}&#xA;      port: ${{ secrets.PORT }}&#xA;+     passphrase: ${{ secrets.PASSPHRASE }}&#xA;      script: |&#xA;        whoami&#xA;        ls -al&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Using host fingerprint verification&lt;/h4&gt; &#xA;&lt;p&gt;Setting up SSH host fingerprint verification can help to prevent Person-in-the-Middle attacks. Before setting this up, run the command below to get your SSH host fingerprint. Remember to replace &lt;code&gt;ed25519&lt;/code&gt; with your appropriate key type (&lt;code&gt;rsa&lt;/code&gt;, &lt;code&gt;dsa&lt;/code&gt;, etc.) that your server is using and &lt;code&gt;example.com&lt;/code&gt; with your host.&lt;/p&gt; &#xA;&lt;p&gt;In modern OpenSSH releases, the &lt;em&gt;default&lt;/em&gt; key types to be fetched are &lt;code&gt;rsa&lt;/code&gt; (since version 5.1), &lt;code&gt;ecdsa&lt;/code&gt; (since version 6.0), and &lt;code&gt;ed25519&lt;/code&gt; (since version 6.7).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;ssh example.com ssh-keygen -l -f /etc/ssh/ssh_host_ed25519_key.pub | cut -d &#39; &#39; -f2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now you can adjust you config:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;  - name: ssh key passphrase&#xA;    uses: appleboy/ssh-action@master&#xA;    with:&#xA;      host: ${{ secrets.HOST }}&#xA;      username: ${{ secrets.USERNAME }}&#xA;      key: ${{ secrets.KEY }}&#xA;      port: ${{ secrets.PORT }}&#xA;+     fingerprint: ${{ secrets.FINGERPRINT }}&#xA;      script: |&#xA;        whoami&#xA;        ls -al&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;We would love for you to contribute to &lt;code&gt;appleboy/ssh-action&lt;/code&gt;, pull requests are welcome!&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The scripts and documentation in this project are released under the &lt;a href=&#34;https://raw.githubusercontent.com/appleboy/ssh-action/master/LICENSE&#34;&gt;MIT License&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>