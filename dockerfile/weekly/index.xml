<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dockerfile Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-10-09T01:41:50Z</updated>
  <subtitle>Weekly Trending of Dockerfile in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>cypress-io/cypress-docker-images</title>
    <updated>2022-10-09T01:41:50Z</updated>
    <id>tag:github.com,2022-10-09:/cypress-io/cypress-docker-images</id>
    <link href="https://github.com/cypress-io/cypress-docker-images" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Docker images with Cypress dependencies and browsers&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Cypress Docker Images &lt;a href=&#34;https://circleci.com/gh/cypress-io/cypress-docker-images/tree/master&#34;&gt;&lt;img src=&#34;https://circleci.com/gh/cypress-io/cypress-docker-images/tree/master.svg?style=svg&#34; alt=&#34;CircleCI&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;These images provide all of the required dependencies for running Cypress in Docker.&lt;/p&gt; &#xA;&lt;p&gt;We build three main images, click on the image name to see the available tags and versions.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Image&lt;/th&gt; &#xA;   &lt;th&gt;Default&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;th&gt;Monthly pulls&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/cypress-io/cypress-docker-images/master/base&#34;&gt;cypress/base&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;cypress/base:16.13.0&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;All operating system dependencies, no Cypress, and no browsers.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://hub.docker.com/r/cypress/base/&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/pulls/cypress/base.svg?maxAge=604800&#34; alt=&#34;Docker Pulls&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/cypress-io/cypress-docker-images/master/browsers&#34;&gt;cypress/browsers&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;cypress/browsers:chrome69&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;All operating system dependencies and some browsers.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://hub.docker.com/r/cypress/browsers/&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/pulls/cypress/browsers.svg?maxAge=604800&#34; alt=&#34;Docker Pulls&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/cypress-io/cypress-docker-images/master/included&#34;&gt;cypress/included&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;cypress/included:9.4.1&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;All operating system dependencies, Cypress, and some browsers installed globally.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://hub.docker.com/r/cypress/included/&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/pulls/cypress/included.svg?maxAge=604800&#34; alt=&#34;Docker Pulls&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Of these images, we provide multiple tags for various operating systems and specific browser versions. These allow you to target specific combinations you need.&lt;/p&gt; &#xA;&lt;h2&gt;Best practice&lt;/h2&gt; &#xA;&lt;p&gt;It is recommended to use a specific image tag, and not rely on the &lt;code&gt;default&lt;/code&gt; tag. For example, it is better to use &lt;code&gt;cypress/base:12&lt;/code&gt; than &lt;code&gt;cypress/base&lt;/code&gt;. Even better it is to use full version of the image, like &lt;code&gt;cypress/base:12.18.0&lt;/code&gt; - we will never overwrite the existing Docker images to prevent accidental changes.&lt;/p&gt; &#xA;&lt;h2&gt;DockerHub&lt;/h2&gt; &#xA;&lt;p&gt;All of the images and tags are published to DockerHub under&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://hub.docker.com/r/cypress/base&#34;&gt;https://hub.docker.com/r/cypress/base&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://hub.docker.com/r/cypress/browsers&#34;&gt;https://hub.docker.com/r/cypress/browsers&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://hub.docker.com/r/cypress/included&#34;&gt;https://hub.docker.com/r/cypress/included&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;p&gt;These images have all dependencies necessary to install and run Cypress. Just install your NPM dependencies (including Cypress) and run the tests. We utilize many of these docker images in our own projects, with different CI providers.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://on.cypress.io/docker&#34;&gt;Check out our docs for examples.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you want to use the &lt;code&gt;cypress/included&lt;/code&gt; image, read &lt;a href=&#34;https://www.cypress.io/blog/2019/05/02/run-cypress-with-a-single-docker-command/&#34;&gt;Run Cypress with a single Docker command&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/cypress-io/cypress-docker-images/master/examples/included-as-non-root&#34;&gt;examples/included-as-non-root&lt;/a&gt; shows how to build a new Docker image on top of &lt;code&gt;cypress/included&lt;/code&gt; image and run the tests as non-root user &lt;code&gt;node&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/cypress-io/cypress-docker-images/master/examples/included-as-non-root-alternative&#34;&gt;examples/included-as-non-root-alternative&lt;/a&gt; shows another approach to allow built-in non-root user &lt;code&gt;node&lt;/code&gt; to run tests using &lt;code&gt;cypress/included&lt;/code&gt; image.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/cypress-io/cypress-docker-images/master/examples/included-as-non-root-mapped&#34;&gt;examples/included-as-non-root-mapped&lt;/a&gt; shows how to build a Docker image on top of &lt;code&gt;cypress/included&lt;/code&gt; that runs with a non-root user that matches the id of the user on the host machine. This way, the permissions on any files created during the test run match the user&#39;s permissions on the host machine.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/cypress-io/cypress-docker-images/master/examples/included-with-plugins&#34;&gt;examples/included-with-plugins&lt;/a&gt; shows how to use locally installed &lt;a href=&#34;https://on.cypress.io/plugins&#34;&gt;Cypress plugins&lt;/a&gt; while running &lt;code&gt;cypress/included&lt;/code&gt; image.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Common problems&lt;/h2&gt; &#xA;&lt;h3&gt;Cannot run post-install hook&lt;/h3&gt; &#xA;&lt;p&gt;Some versions of Node restrict running the &lt;code&gt;postinstall&lt;/code&gt; hook with the following error message:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;lifecycle realworld@1.0.0~postinstall: cannot run in wd realworld@1.0.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In that case run install with &lt;code&gt;npm install --unsafe-perm&lt;/code&gt; flag, or set an environment variable in the container&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;npm_config_unsafe_perm: true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Blank screen in Chrome&lt;/h3&gt; &#xA;&lt;p&gt;When running headed tests with X11 forwarding in Cypress v4 you might see a blank Chrome screen. Try disabling memory sharing by setting the following environment variables:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;export QT_X11_NO_MITSHM=1&#xA;export _X11_NO_MITSHM=1&#xA;export _MITSHM=0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/cypress-io/cypress-docker-images/issues/270&#34;&gt;issue #270&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/cypress-io/cypress-docker-images/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/cypress-io/cypress-docker-images/master/LICENSE&#34;&gt;LICENSE&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>microsoft/vscode-remote-try-python</title>
    <updated>2022-10-09T01:41:50Z</updated>
    <id>tag:github.com,2022-10-09:/microsoft/vscode-remote-try-python</id>
    <link href="https://github.com/microsoft/vscode-remote-try-python" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Python sample project for trying out the VS Code Dev Containers extension&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Try Out Development Containers: Python&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://vscode.dev/redirect?url=vscode://ms-vscode-remote.remote-containers/cloneInVolume?url=https://github.com/microsoft/vscode-remote-try-python&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1?label=Dev%20Containers&amp;amp;message=Open&amp;amp;color=blue&amp;amp;logo=visualstudiocode&#34; alt=&#34;Open in Dev Containers&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A &lt;strong&gt;development container&lt;/strong&gt; is a running &lt;a href=&#34;https://www.docker.com&#34;&gt;Docker&lt;/a&gt; container with a well-defined tool/runtime stack and its prerequisites. You can try out development containers with &lt;strong&gt;&lt;a href=&#34;https://github.com/features/codespaces&#34;&gt;GitHub Codespaces&lt;/a&gt;&lt;/strong&gt; or &lt;strong&gt;&lt;a href=&#34;https://aka.ms/vscode-remote/containers&#34;&gt;Visual Studio Code Dev Containers&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This is a sample project that lets you try out either option in a few easy steps. We have a variety of other &lt;a href=&#34;https://github.com/search?q=org%3Amicrosoft+vscode-remote-try-&amp;amp;type=Repositories&#34;&gt;vscode-remote-try-*&lt;/a&gt; sample projects, too.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If you already have a codespace or dev container, you can jump to the &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/vscode-remote-try-python/main/#things-to-try&#34;&gt;Things to try&lt;/a&gt; section.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Setting up the development container&lt;/h2&gt; &#xA;&lt;h3&gt;GitHub Codespaces&lt;/h3&gt; &#xA;&lt;p&gt;Follow these steps to open this sample in a Codespace:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Click the Code drop-down menu and select the &lt;strong&gt;Open with Codespaces&lt;/strong&gt; option.&lt;/li&gt; &#xA; &lt;li&gt;Select &lt;strong&gt;+ New codespace&lt;/strong&gt; at the bottom on the pane.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;For more information on creating your codespace, visit the &lt;a href=&#34;https://docs.github.com/en/free-pro-team@latest/github/developing-online-with-codespaces/creating-a-codespace#creating-a-codespace&#34;&gt;GitHub documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;VS Code Dev Containers&lt;/h3&gt; &#xA;&lt;p&gt;If you already have VS Code and Docker installed, you can click the badge above or &lt;a href=&#34;https://vscode.dev/redirect?url=vscode://ms-vscode-remote.remote-containers/cloneInVolume?url=https://github.com/microsoft/vscode-remote-try-python&#34;&gt;here&lt;/a&gt; to get started. Clicking these links will cause VS Code to automatically install the Dev Containers extension if needed, clone the source code into a container volume, and spin up a dev container for use.&lt;/p&gt; &#xA;&lt;p&gt;Follow these steps to open this sample in a container using the VS Code Dev Containers extension:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;If this is your first time using a development container, please ensure your system meets the prerequisites (i.e. have Docker installed) in the &lt;a href=&#34;https://aka.ms/vscode-remote/containers/getting-started&#34;&gt;getting started steps&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To use this repository, you can either open the repository in an isolated Docker volume:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Press &lt;kbd&gt;F1&lt;/kbd&gt; and select the &lt;strong&gt;Dev Containers: Try a Sample...&lt;/strong&gt; command.&lt;/li&gt; &#xA;   &lt;li&gt;Choose the &#34;Python&#34; sample, wait for the container to start, and try things out! &#xA;    &lt;blockquote&gt; &#xA;     &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Under the hood, this will use the &lt;strong&gt;Dev Containers: Clone Repository in Container Volume...&lt;/strong&gt; command to clone the source code in a Docker volume instead of the local filesystem. &lt;a href=&#34;https://docs.docker.com/storage/volumes/&#34;&gt;Volumes&lt;/a&gt; are the preferred mechanism for persisting container data.&lt;/p&gt; &#xA;    &lt;/blockquote&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;p&gt;Or open a locally cloned copy of the code:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Clone this repository to your local filesystem.&lt;/li&gt; &#xA;   &lt;li&gt;Press &lt;kbd&gt;F1&lt;/kbd&gt; and select the &lt;strong&gt;Dev Containers: Open Folder in Container...&lt;/strong&gt; command.&lt;/li&gt; &#xA;   &lt;li&gt;Select the cloned copy of this folder, wait for the container to start, and try things out!&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Things to try&lt;/h2&gt; &#xA;&lt;p&gt;Once you have this sample opened, you&#39;ll be able to work with it like you would locally.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This container runs as a non-root user with sudo access by default. Comment out &lt;code&gt;&#34;remoteUser&#34;: &#34;vscode&#34;&lt;/code&gt; in &lt;code&gt;.devcontainer/devcontainer.json&lt;/code&gt; if you&#39;d prefer to run as root.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Some things to try:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Edit:&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Open &lt;code&gt;app.py&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Try adding some code and check out the language features.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Terminal:&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;Press &lt;kbd&gt;ctrl&lt;/kbd&gt;+&lt;kbd&gt;shift&lt;/kbd&gt;+&lt;kbd&gt;`&lt;/kbd&gt; to open a terminal window.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Type &lt;code&gt;python -m flask run --port 9000 --no-debugger --no-reload&lt;/code&gt; to run the app.&lt;/p&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;The terminal will say your app is &lt;code&gt;Running on http://127.0.0.1:9000/&lt;/code&gt;. Click on the link in the terminal to view your app running in the browser.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Notice that the Python extension is already installed in the container since the &lt;code&gt;.devcontainer/devcontainer.json&lt;/code&gt; lists &lt;code&gt;&#34;ms-python.python&#34;&lt;/code&gt; as an extension to install automatically when the container is created.&lt;/p&gt; &#xA;    &lt;blockquote&gt; &#xA;     &lt;p&gt;&lt;strong&gt;Tip:&lt;/strong&gt; If you use this container outside of VS Code via &lt;code&gt;docker run&lt;/code&gt; with &lt;code&gt;-p 9000&lt;/code&gt;, you may need to append &lt;code&gt;--host 0.0.0.0&lt;/code&gt; to the command above. The &lt;code&gt;-p&lt;/code&gt; option &#34;publishes&#34; the port rather than forwarding it. It therefore will not work if the application only listens to localhost. The &lt;code&gt;forwardPorts&lt;/code&gt; property in &lt;code&gt;devcontainer.json&lt;/code&gt; does not have this limitation, but you can use &lt;code&gt;appPort&lt;/code&gt; property instead if you want to mirror the &lt;code&gt;docker run&lt;/code&gt; behavior.&lt;/p&gt; &#xA;    &lt;/blockquote&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Build, Run, and Debug:&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Open &lt;code&gt;app.py&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Add a breakpoint (e.g. on line 9).&lt;/li&gt; &#xA;   &lt;li&gt;Press &lt;kbd&gt;F5&lt;/kbd&gt; to launch the app in the container.&lt;/li&gt; &#xA;   &lt;li&gt;Once the breakpoint is hit, try hovering over variables (e.g. the app variable on line 7), examining locals, and more.&lt;/li&gt; &#xA;   &lt;li&gt;Continue (&lt;kbd&gt;F5&lt;/kbd&gt;). You can connect to the server in the container by either: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Clicking on &lt;code&gt;Open in Browser&lt;/code&gt; in the notification telling you: &lt;code&gt;Your service running on port 9000 is available&lt;/code&gt;.&lt;/li&gt; &#xA;     &lt;li&gt;Clicking the globe icon in the &#39;Ports&#39; view. The &#39;Ports&#39; view gives you an organized table of your forwarded ports, and you can access it with the command &lt;strong&gt;Ports: Focus on Ports View&lt;/strong&gt;.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Notice port 9000 in the &#39;Ports&#39; view is labeled &#34;Hello Remote World.&#34; In &lt;code&gt;devcontainer.json&lt;/code&gt;, you can set &lt;code&gt;&#34;portsAttributes&#34;&lt;/code&gt;, such as a label for your forwarded ports and the action to be taken when the port is autoforwarded.&lt;/li&gt; &#xA;  &lt;/ul&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; In Dev Containers, you can access your app at &lt;code&gt;http://localhost:9000&lt;/code&gt; in a local browser. But in a browser-based Codespace, you must click the link from the notification or the &lt;code&gt;Ports&lt;/code&gt; view so that the service handles port forwarding in the browser and generates the correct URL.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Rebuild or update your container&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;You may want to make changes to your container, such as installing a different version of a software or forwarding a new port. You&#39;ll rebuild your container for your changes to take effect.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Open browser automatically:&lt;/strong&gt; As an example change, let&#39;s update the &lt;code&gt;portsAttributes&lt;/code&gt; in the &lt;code&gt;.devcontainer/devcontainer.json&lt;/code&gt; file to open a browser when our port is automatically forwarded.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Open the &lt;code&gt;.devcontainer/devcontainer.json&lt;/code&gt; file.&lt;/li&gt; &#xA;   &lt;li&gt;Modify the &lt;code&gt;&#34;onAutoForward&#34;&lt;/code&gt; attribute in your &lt;code&gt;portsAttributes&lt;/code&gt; from &lt;code&gt;&#34;notify&#34;&lt;/code&gt; to &lt;code&gt;&#34;openBrowser&#34;&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Press &lt;kbd&gt;F1&lt;/kbd&gt; and select the &lt;strong&gt;Dev Containers: Rebuild Container&lt;/strong&gt; or &lt;strong&gt;Codespaces: Rebuild Container&lt;/strong&gt; command so the modifications are picked up.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;More samples&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Microsoft/python-sample-tweeterapp&#34;&gt;Tweeter App - Python and Django&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;This project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit &lt;a href=&#34;https://cla.microsoft.com&#34;&gt;https://cla.microsoft.com&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;When you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.&lt;/p&gt; &#xA;&lt;p&gt;This project has adopted the &lt;a href=&#34;https://opensource.microsoft.com/codeofconduct/&#34;&gt;Microsoft Open Source Code of Conduct&lt;/a&gt;. For more information see the &lt;a href=&#34;https://opensource.microsoft.com/codeofconduct/faq/&#34;&gt;Code of Conduct FAQ&lt;/a&gt; or contact &lt;a href=&#34;mailto:opencode@microsoft.com&#34;&gt;opencode@microsoft.com&lt;/a&gt; with any additional questions or comments.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Copyright © Microsoft Corporation All rights reserved.&lt;br&gt; Licensed under the MIT License. See LICENSE in the project root for license information.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>udacity/cd0157_Final_Pipeline</title>
    <updated>2022-10-09T01:41:50Z</updated>
    <id>tag:github.com,2022-10-09:/udacity/cd0157_Final_Pipeline</id>
    <link href="https://github.com/udacity/cd0157_Final_Pipeline" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Final Pipeline exercise for the cd0157-Server-Deployment-and-Containerization course.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Purpose of This Repo&lt;/h1&gt; &#xA;&lt;p&gt;This repos has a sample &#34;Hello World&#34; flask application that we will deploy on EKS cluster using the AWS Codebuild and Codepipeline services. Here is the purpose of each file present in this repo:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&#xA;├── app.py         # A sample &#34;Hello World&#34; flask application&#xA;├── ci-cd-codepipeline.cfn.yml # Cloudformation template to create the Codebuild, and Codepipeline, and related resources. &#xA;├── buildspec.yml  # Codebuild will execute the commands available here. &#xA;├── Dockerfile     # Codebuild will build an image using the Dockerfile, and push it to the Dockerhub/or AWS ECR. &#xA;├── deployment.yml # The deployment file for the Kubernetes cluster. Codebuild will apply this deployment using the one of the kubectl commands.   &#xA;├── iam-role-policy.json # The Policy for the IAM role that the Codebuild will assume&#xA;├── trust.json # The trusted entity details for the  IAM role that the COdebuild will assume&#xA;└── aws-auth-patch.yml  # This is an autogenerated file for your reference. &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Run the app on AWS Cloud&lt;/h2&gt; &#xA;&lt;p&gt;The steps you will follow are:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Create an EKS Cluster, IAM Role for CodeBuild, and Authenticate the CodeBuild&lt;/strong&gt;&lt;br&gt; You will start with creating an EKS cluster in your preferred region, using &lt;code&gt;eksctl&lt;/code&gt; command. Then, you will create an IAM role that the Codebuild will assume to access your k8s/EKS cluster. This IAM role will have the necessary access permissions (attached JSON policies), and you will also have to add this role to the k8s cluster&#39;s configMap. &lt;br&gt;&lt;br&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Deployment to Kubernetes using CodePipeline and CodeBuild&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Generate a Github access token&lt;/strong&gt;&lt;br&gt;Next, you will generate an access-token from your Github account so that whichever service has that token can access the repositories from your Github account. You will share this token with the AWS Codebuild service (programmatically) so that it can build and test your code. &lt;br&gt;&lt;br&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Create Codebuild and CodePipeline resources using CloudFormation template&lt;/strong&gt;&lt;br&gt;Create a pipeline watching for commits to your Github repository. You will create the necessary AWS resources using a script, Cloudformation template (.yaml) file, available to you. These resources collectively are called &lt;strong&gt;stack&lt;/strong&gt;. It will automatically create the Codebuild and Codepipeline projects for you. &lt;br&gt;&lt;br&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Build and deploy&lt;/strong&gt;&lt;br&gt;Finally, you will trigger the &lt;strong&gt;build&lt;/strong&gt; based on a Github commit.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>