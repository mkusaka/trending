<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dockerfile Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-06-02T01:46:48Z</updated>
  <subtitle>Weekly Trending of Dockerfile in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>linuxserver/docker-bookstack</title>
    <updated>2024-06-02T01:46:48Z</updated>
    <id>tag:github.com,2024-06-02:/linuxserver/docker-bookstack</id>
    <link href="https://github.com/linuxserver/docker-bookstack" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Docker container for the BookStack documentation wiki&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://linuxserver.io&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/linuxserver/docker-templates/master/linuxserver.io/img/linuxserver_medium.png&#34; alt=&#34;linuxserver.io&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://blog.linuxserver.io&#34; title=&#34;all the things you can do with our containers including How-To guides, opinions and much more!&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1.svg?color=94398d&amp;amp;labelColor=555555&amp;amp;logoColor=ffffff&amp;amp;style=for-the-badge&amp;amp;label=linuxserver.io&amp;amp;message=Blog&#34; alt=&#34;Blog&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/YWrKVTn&#34; title=&#34;realtime support / chat with the community and the team.&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/354974912613449730.svg?color=94398d&amp;amp;labelColor=555555&amp;amp;logoColor=ffffff&amp;amp;style=for-the-badge&amp;amp;label=Discord&amp;amp;logo=discord&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discourse.linuxserver.io&#34; title=&#34;post on our community forum.&#34;&gt;&lt;img src=&#34;https://img.shields.io/discourse/https/discourse.linuxserver.io/topics.svg?color=94398d&amp;amp;labelColor=555555&amp;amp;logoColor=ffffff&amp;amp;style=for-the-badge&amp;amp;logo=discourse&#34; alt=&#34;Discourse&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://fleet.linuxserver.io&#34; title=&#34;an online web interface which displays all of our maintained images.&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1.svg?color=94398d&amp;amp;labelColor=555555&amp;amp;logoColor=ffffff&amp;amp;style=for-the-badge&amp;amp;label=linuxserver.io&amp;amp;message=Fleet&#34; alt=&#34;Fleet&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/linuxserver&#34; title=&#34;view the source for all of our repositories.&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1.svg?color=94398d&amp;amp;labelColor=555555&amp;amp;logoColor=ffffff&amp;amp;style=for-the-badge&amp;amp;label=linuxserver.io&amp;amp;message=GitHub&amp;amp;logo=github&#34; alt=&#34;GitHub&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/linuxserver&#34; title=&#34;please consider helping us by either donating or contributing to our budget&#34;&gt;&lt;img src=&#34;https://img.shields.io/opencollective/all/linuxserver.svg?color=94398d&amp;amp;labelColor=555555&amp;amp;logoColor=ffffff&amp;amp;style=for-the-badge&amp;amp;label=Supporters&amp;amp;logo=open%20collective&#34; alt=&#34;Open Collective&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://linuxserver.io&#34;&gt;LinuxServer.io&lt;/a&gt; team brings you another container release featuring:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;regular and timely application updates&lt;/li&gt; &#xA; &lt;li&gt;easy user mappings (PGID, PUID)&lt;/li&gt; &#xA; &lt;li&gt;custom base image with s6 overlay&lt;/li&gt; &#xA; &lt;li&gt;weekly base OS updates with common layers across the entire LinuxServer.io ecosystem to minimise space usage, down time and bandwidth&lt;/li&gt; &#xA; &lt;li&gt;regular security updates&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Find us at:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.linuxserver.io&#34;&gt;Blog&lt;/a&gt; - all the things you can do with our containers including How-To guides, opinions and much more!&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://discord.gg/YWrKVTn&#34;&gt;Discord&lt;/a&gt; - realtime support / chat with the community and the team.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://discourse.linuxserver.io&#34;&gt;Discourse&lt;/a&gt; - post on our community forum.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://fleet.linuxserver.io&#34;&gt;Fleet&lt;/a&gt; - an online web interface which displays all of our maintained images.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/linuxserver&#34;&gt;GitHub&lt;/a&gt; - view the source for all of our repositories.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://opencollective.com/linuxserver&#34;&gt;Open Collective&lt;/a&gt; - please consider helping us by either donating or contributing to our budget&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;&lt;a href=&#34;https://github.com/linuxserver/docker-bookstack&#34;&gt;linuxserver/bookstack&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://scarf.sh&#34;&gt;&lt;img src=&#34;https://scarf.sh/installs-badge/linuxserver-ci/linuxserver%2Fbookstack?color=94398d&amp;amp;label-color=555555&amp;amp;logo-color=ffffff&amp;amp;style=for-the-badge&amp;amp;package-type=docker&#34; alt=&#34;Scarf.io pulls&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/linuxserver/docker-bookstack&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/linuxserver/docker-bookstack.svg?color=94398d&amp;amp;labelColor=555555&amp;amp;logoColor=ffffff&amp;amp;style=for-the-badge&amp;amp;logo=github&#34; alt=&#34;GitHub Stars&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/linuxserver/docker-bookstack/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/linuxserver/docker-bookstack.svg?color=94398d&amp;amp;labelColor=555555&amp;amp;logoColor=ffffff&amp;amp;style=for-the-badge&amp;amp;logo=github&#34; alt=&#34;GitHub Release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/linuxserver/docker-bookstack/packages&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1.svg?color=94398d&amp;amp;labelColor=555555&amp;amp;logoColor=ffffff&amp;amp;style=for-the-badge&amp;amp;label=linuxserver.io&amp;amp;message=GitHub%20Package&amp;amp;logo=github&#34; alt=&#34;GitHub Package Repository&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitlab.com/linuxserver.io/docker-bookstack/container_registry&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1.svg?color=94398d&amp;amp;labelColor=555555&amp;amp;logoColor=ffffff&amp;amp;style=for-the-badge&amp;amp;label=linuxserver.io&amp;amp;message=GitLab%20Registry&amp;amp;logo=gitlab&#34; alt=&#34;GitLab Container Registry&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://quay.io/repository/linuxserver.io/bookstack&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1.svg?color=94398d&amp;amp;labelColor=555555&amp;amp;logoColor=ffffff&amp;amp;style=for-the-badge&amp;amp;label=linuxserver.io&amp;amp;message=Quay.io&#34; alt=&#34;Quay.io&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/linuxserver/bookstack&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/pulls/linuxserver/bookstack.svg?color=94398d&amp;amp;labelColor=555555&amp;amp;logoColor=ffffff&amp;amp;style=for-the-badge&amp;amp;label=pulls&amp;amp;logo=docker&#34; alt=&#34;Docker Pulls&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/linuxserver/bookstack&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/stars/linuxserver/bookstack.svg?color=94398d&amp;amp;labelColor=555555&amp;amp;logoColor=ffffff&amp;amp;style=for-the-badge&amp;amp;label=stars&amp;amp;logo=docker&#34; alt=&#34;Docker Stars&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://ci.linuxserver.io/job/Docker-Pipeline-Builders/job/docker-bookstack/job/master/&#34;&gt;&lt;img src=&#34;https://img.shields.io/jenkins/build?labelColor=555555&amp;amp;logoColor=ffffff&amp;amp;style=for-the-badge&amp;amp;jobUrl=https%3A%2F%2Fci.linuxserver.io%2Fjob%2FDocker-Pipeline-Builders%2Fjob%2Fdocker-bookstack%2Fjob%2Fmaster%2F&amp;amp;logo=jenkins&#34; alt=&#34;Jenkins Build&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://ci-tests.linuxserver.io/linuxserver/bookstack/latest/index.html&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/dynamic/yaml?color=94398d&amp;amp;labelColor=555555&amp;amp;logoColor=ffffff&amp;amp;style=for-the-badge&amp;amp;label=CI&amp;amp;query=CI&amp;amp;url=https%3A%2F%2Fci-tests.linuxserver.io%2Flinuxserver%2Fbookstack%2Flatest%2Fci-status.yml&#34; alt=&#34;LSIO CI&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/BookStackApp/BookStack&#34;&gt;Bookstack&lt;/a&gt; is a free and open source Wiki designed for creating beautiful documentation. Featuring a simple, but powerful WYSIWYG editor it allows for teams to create detailed and useful documentation with ease.&lt;/p&gt; &#xA;&lt;p&gt;Powered by SQL and including a Markdown editor for those who prefer it, BookStack is geared towards making documentation more of a pleasure than a chore.&lt;/p&gt; &#xA;&lt;p&gt;For more information on BookStack visit their website and check it out: &lt;a href=&#34;https://www.bookstackapp.com&#34;&gt;https://www.bookstackapp.com&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/BookStackApp/BookStack&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/linuxserver/docker-templates/master/linuxserver.io/img/bookstack-logo.png&#34; alt=&#34;bookstack&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Supported Architectures&lt;/h2&gt; &#xA;&lt;p&gt;We utilise the docker manifest for multi-platform awareness. More information is available from docker &lt;a href=&#34;https://distribution.github.io/distribution/spec/manifest-v2-2/#manifest-list&#34;&gt;here&lt;/a&gt; and our announcement &lt;a href=&#34;https://blog.linuxserver.io/2019/02/21/the-lsio-pipeline-project/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Simply pulling &lt;code&gt;lscr.io/linuxserver/bookstack:latest&lt;/code&gt; should retrieve the correct image for your arch, but you can also pull specific arch images via tags.&lt;/p&gt; &#xA;&lt;p&gt;The architectures supported by this image are:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Architecture&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Available&lt;/th&gt; &#xA;   &lt;th&gt;Tag&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;x86-64&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;amd64-&amp;lt;version tag&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;arm64&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;arm64v8-&amp;lt;version tag&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;armhf&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Application Setup&lt;/h2&gt; &#xA;&lt;p&gt;The default username is &lt;a href=&#34;mailto:admin@admin.com&#34;&gt;admin@admin.com&lt;/a&gt; with the password of &lt;strong&gt;password&lt;/strong&gt;, access the container at &lt;a href=&#34;http://dockerhost:6875&#34;&gt;http://dockerhost:6875&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This application is dependent on a MySQL database be it one you already have or a new one. If you do not already have one, set up our MariaDB container here &lt;a href=&#34;https://hub.docker.com/r/linuxserver/mariadb/&#34;&gt;https://hub.docker.com/r/linuxserver/mariadb/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you intend to use this application behind a subfolder reverse proxy, such as our SWAG container or Traefik you will need to make sure that the &lt;code&gt;APP_URL&lt;/code&gt; environment variable is set to your external domain, or it will not work.&lt;/p&gt; &#xA;&lt;p&gt;Documentation for BookStack can be found at &lt;a href=&#34;https://www.bookstackapp.com/docs/&#34;&gt;https://www.bookstackapp.com/docs/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;BookStack File &amp;amp; Directory Paths&lt;/h3&gt; &#xA;&lt;p&gt;This container ensures certain BookStack application files &amp;amp; folders, such as user file upload folders, are retained within the &lt;code&gt;/config&lt;/code&gt; folder so that they are persistent &amp;amp; accessible when the &lt;code&gt;/config&lt;/code&gt; container path is bound as a volume. There may be cases, when following the BookStack documentation, that you&#39;ll need to know how these files and folders are used relative to a non-container BookStack installation.&lt;/p&gt; &#xA;&lt;p&gt;Below is a mapping of container &lt;code&gt;/config&lt;/code&gt; paths to those relative within a BookStack install directory:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;/config container path&lt;/strong&gt; =&amp;gt; &lt;strong&gt;BookStack relative path&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;/config/www/.env&lt;/code&gt; =&amp;gt; &lt;code&gt;.env&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;/config/www/laravel.log&lt;/code&gt; =&amp;gt; &lt;code&gt;storage/logs/laravel.log&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;/config/www/backups/&lt;/code&gt; =&amp;gt; &lt;code&gt;storage/backups/&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;/config/www/files/&lt;/code&gt; =&amp;gt; &lt;code&gt;storage/uploads/files/&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;/config/www/images/&lt;/code&gt; =&amp;gt; &lt;code&gt;storage/uploads/images/&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;/config/www/themes/&lt;/code&gt; =&amp;gt; &lt;code&gt;themes/&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;/config/www/uploads/&lt;/code&gt; =&amp;gt; &lt;code&gt;public/uploads/&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Advanced Users (full control over the .env file)&lt;/h3&gt; &#xA;&lt;p&gt;If you wish to use the extra functionality of BookStack such as email, Memcache, LDAP and so on you will need to make your own .env file with guidance from the BookStack documentation.&lt;/p&gt; &#xA;&lt;p&gt;When you create the container, do not set any arguments for any SQL settings. The container will copy an exemplary .env file to /config/www/.env on your host system for you to edit.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;To help you get started creating a container from this image you can either use docker-compose or the docker cli.&lt;/p&gt; &#xA;&lt;h3&gt;docker-compose (recommended, &lt;a href=&#34;https://docs.linuxserver.io/general/docker-compose&#34;&gt;click here for more info&lt;/a&gt;)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;---&#xA;services:&#xA;  bookstack:&#xA;    image: lscr.io/linuxserver/bookstack&#xA;    container_name: bookstack&#xA;    environment:&#xA;      - PUID=1000&#xA;      - PGID=1000&#xA;      - TZ=Europe/London&#xA;      - APP_URL=https://bookstack.example.com&#xA;      - DB_HOST=bookstack_db&#xA;      - DB_PORT=3306&#xA;      - DB_USER=bookstack&#xA;      - DB_PASS=&amp;lt;yourdbpass&amp;gt;&#xA;      - DB_DATABASE=bookstackapp&#xA;    volumes:&#xA;      - /path/to/bookstack_app_data:/config&#xA;    ports:&#xA;      - 6875:80&#xA;    restart: unless-stopped&#xA;    depends_on:&#xA;      - bookstack_db&#xA;&#xA;  bookstack_db:&#xA;    image: lscr.io/linuxserver/mariadb&#xA;    container_name: bookstack_db&#xA;    environment:&#xA;      - PUID=1000&#xA;      - PGID=1000&#xA;      - TZ=Europe/London&#xA;      - MYSQL_ROOT_PASSWORD=&amp;lt;yourdbpass&amp;gt;&#xA;      - MYSQL_DATABASE=bookstackapp&#xA;      - MYSQL_USER=bookstack&#xA;      - MYSQL_PASSWORD=&amp;lt;yourdbpass&amp;gt;&#xA;    volumes:&#xA;      - /path/to/bookstack_db_data:/config&#xA;    restart: unless-stopped&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;docker cli (&lt;a href=&#34;https://docs.docker.com/engine/reference/commandline/cli/&#34;&gt;click here for more info&lt;/a&gt;)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run -d \&#xA;  --name=bookstack \&#xA;  -e PUID=1000 \&#xA;  -e PGID=1000 \&#xA;  -e TZ=Etc/UTC \&#xA;  -e APP_URL=yourbaseurl \&#xA;  -e DB_HOST=yourdbhost \&#xA;  -e DB_PORT=yourdbport \&#xA;  -e DB_USER=yourdbuser \&#xA;  -e DB_PASS=yourdbpass \&#xA;  -e DB_DATABASE=bookstackapp \&#xA;  -e QUEUE_CONNECTION= `#optional` \&#xA;  -p 6875:80 \&#xA;  -v /path/to/bookstack/config:/config \&#xA;  --restart unless-stopped \&#xA;  lscr.io/linuxserver/bookstack:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Parameters&lt;/h2&gt; &#xA;&lt;p&gt;Containers are configured using parameters passed at runtime (such as those above). These parameters are separated by a colon and indicate &lt;code&gt;&amp;lt;external&amp;gt;:&amp;lt;internal&amp;gt;&lt;/code&gt; respectively. For example, &lt;code&gt;-p 8080:80&lt;/code&gt; would expose port &lt;code&gt;80&lt;/code&gt; from inside the container to be accessible from the host&#39;s IP on port &lt;code&gt;8080&lt;/code&gt; outside the container.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Parameter&lt;/th&gt; &#xA;   &lt;th&gt;Function&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;-p 80&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;will map the container&#39;s port 80 to port 6875 on the host&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;-e PUID=1000&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;for UserID - see below for explanation&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;-e PGID=1000&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;for GroupID - see below for explanation&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;-e TZ=Etc/UTC&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;specify a timezone to use, see this &lt;a href=&#34;https://en.wikipedia.org/wiki/List_of_tz_database_time_zones#List&#34;&gt;list&lt;/a&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;-e APP_URL=yourbaseurl&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;for specifying the IP:port or URL your application will be accessed on (ie. &lt;code&gt;http://192.168.1.1:6875&lt;/code&gt; or &lt;code&gt;https://bookstack.mydomain.com&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;-e DB_HOST=yourdbhost&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;for specifying the database host&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;-e DB_PORT=yourdbport&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;for specifying the database port if not default 3306&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;-e DB_USER=yourdbuser&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;for specifying the database user&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;-e DB_PASS=yourdbpass&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;for specifying the database password (minimum 4 characters &amp;amp; non-alphanumeric passwords must be properly escaped.)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;-e DB_DATABASE=bookstackapp&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;for specifying the database to be used&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;-e QUEUE_CONNECTION=&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Set to &lt;code&gt;database&lt;/code&gt; to enable async actions like sending email or triggering webhooks. See &lt;a href=&#34;https://www.bookstackapp.com/docs/admin/email-webhooks/#async-action-handling&#34;&gt;documentation&lt;/a&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;-v /config&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Persistent config files&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Environment variables from files (Docker secrets)&lt;/h2&gt; &#xA;&lt;p&gt;You can set any environment variable from a file by using a special prepend &lt;code&gt;FILE__&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;As an example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;-e FILE__MYVAR=/run/secrets/mysecretvariable&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Will set the environment variable &lt;code&gt;MYVAR&lt;/code&gt; based on the contents of the &lt;code&gt;/run/secrets/mysecretvariable&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;h2&gt;Umask for running applications&lt;/h2&gt; &#xA;&lt;p&gt;For all of our images we provide the ability to override the default umask settings for services started within the containers using the optional &lt;code&gt;-e UMASK=022&lt;/code&gt; setting. Keep in mind umask is not chmod it subtracts from permissions based on it&#39;s value it does not add. Please read up &lt;a href=&#34;https://en.wikipedia.org/wiki/Umask&#34;&gt;here&lt;/a&gt; before asking for support.&lt;/p&gt; &#xA;&lt;h2&gt;User / Group Identifiers&lt;/h2&gt; &#xA;&lt;p&gt;When using volumes (&lt;code&gt;-v&lt;/code&gt; flags), permissions issues can arise between the host OS and the container, we avoid this issue by allowing you to specify the user &lt;code&gt;PUID&lt;/code&gt; and group &lt;code&gt;PGID&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Ensure any volume directories on the host are owned by the same user you specify and any permissions issues will vanish like magic.&lt;/p&gt; &#xA;&lt;p&gt;In this instance &lt;code&gt;PUID=1000&lt;/code&gt; and &lt;code&gt;PGID=1000&lt;/code&gt;, to find yours use &lt;code&gt;id your_user&lt;/code&gt; as below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;id your_user&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Example output:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;uid=1000(your_user) gid=1000(your_user) groups=1000(your_user)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Docker Mods&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://mods.linuxserver.io/?mod=bookstack&#34; title=&#34;view available mods for this container.&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/dynamic/yaml?color=94398d&amp;amp;labelColor=555555&amp;amp;logoColor=ffffff&amp;amp;style=for-the-badge&amp;amp;label=bookstack&amp;amp;query=%24.mods%5B%27bookstack%27%5D.mod_count&amp;amp;url=https%3A%2F%2Fraw.githubusercontent.com%2Flinuxserver%2Fdocker-mods%2Fmaster%2Fmod-list.yml&#34; alt=&#34;Docker Mods&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://mods.linuxserver.io/?mod=universal&#34; title=&#34;view available universal mods.&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/dynamic/yaml?color=94398d&amp;amp;labelColor=555555&amp;amp;logoColor=ffffff&amp;amp;style=for-the-badge&amp;amp;label=universal&amp;amp;query=%24.mods%5B%27universal%27%5D.mod_count&amp;amp;url=https%3A%2F%2Fraw.githubusercontent.com%2Flinuxserver%2Fdocker-mods%2Fmaster%2Fmod-list.yml&#34; alt=&#34;Docker Universal Mods&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;We publish various &lt;a href=&#34;https://github.com/linuxserver/docker-mods&#34;&gt;Docker Mods&lt;/a&gt; to enable additional functionality within the containers. The list of Mods available for this image (if any) as well as universal mods that can be applied to any one of our images can be accessed via the dynamic badges above.&lt;/p&gt; &#xA;&lt;h2&gt;Support Info&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Shell access whilst the container is running:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker exec -it bookstack /bin/bash&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To monitor the logs of the container in realtime:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker logs -f bookstack&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Container version number:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker inspect -f &#39;{{ index .Config.Labels &#34;build_version&#34; }}&#39; bookstack&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Image version number:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker inspect -f &#39;{{ index .Config.Labels &#34;build_version&#34; }}&#39; lscr.io/linuxserver/bookstack:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Updating Info&lt;/h2&gt; &#xA;&lt;p&gt;Most of our images are static, versioned, and require an image update and container recreation to update the app inside. With some exceptions (noted in the relevant readme.md), we do not recommend or support updating apps inside the container. Please consult the &lt;a href=&#34;https://raw.githubusercontent.com/linuxserver/docker-bookstack/master/#application-setup&#34;&gt;Application Setup&lt;/a&gt; section above to see if it is recommended for the image.&lt;/p&gt; &#xA;&lt;p&gt;Below are the instructions for updating containers:&lt;/p&gt; &#xA;&lt;h3&gt;Via Docker Compose&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Update images:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;All images:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker-compose pull&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Single image:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker-compose pull bookstack&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Update containers:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;All containers:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker-compose up -d&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Single container:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker-compose up -d bookstack&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;You can also remove the old dangling images:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker image prune&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Via Docker Run&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Update the image:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker pull lscr.io/linuxserver/bookstack:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Stop the running container:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker stop bookstack&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Delete the container:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker rm bookstack&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Recreate a new container with the same docker run parameters as instructed above (if mapped correctly to a host folder, your &lt;code&gt;/config&lt;/code&gt; folder and settings will be preserved)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;You can also remove the old dangling images:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker image prune&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Image Update Notifications - Diun (Docker Image Update Notifier)&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;tip&lt;/strong&gt;: We recommend &lt;a href=&#34;https://crazymax.dev/diun/&#34;&gt;Diun&lt;/a&gt; for update notifications. Other tools that automatically update containers unattended are not recommended or supported.&lt;/p&gt; &#xA;&lt;h2&gt;Building locally&lt;/h2&gt; &#xA;&lt;p&gt;If you want to make local modifications to these images for development purposes or just to customize the logic:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/linuxserver/docker-bookstack.git&#xA;cd docker-bookstack&#xA;docker build \&#xA;  --no-cache \&#xA;  --pull \&#xA;  -t lscr.io/linuxserver/bookstack:latest .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The ARM variants can be built on x86_64 hardware using &lt;code&gt;multiarch/qemu-user-static&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run --rm --privileged multiarch/qemu-user-static:register --reset&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once registered you can define the dockerfile to use with &lt;code&gt;-f Dockerfile.aarch64&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Versions&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;27.05.24:&lt;/strong&gt; - Rebase to Alpine 3.20. Existing users should update their nginx confs to avoid http2 deprecation warnings.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;25.01.24:&lt;/strong&gt; - Existing users should update: site-confs/default.conf - Cleanup default site conf.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;23.12.23:&lt;/strong&gt; - Rebase to Alpine 3.19 with php 8.3.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;31.10.23:&lt;/strong&gt; - Further sanitize sed replace.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;07.06.23:&lt;/strong&gt; - Add mariadb-client for bookstack-system-cli support.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;25.05.23:&lt;/strong&gt; - Rebase to Alpine 3.18, deprecate armhf.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;13.04.23:&lt;/strong&gt; - Move ssl.conf include to default.conf.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;01.03.23:&lt;/strong&gt; - Add php iconv.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;19.01.23:&lt;/strong&gt; - Rebase to alpine 3.17 with php8.1.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;16.01.23:&lt;/strong&gt; - Wrap &lt;code&gt;.env&lt;/code&gt; values in quotes.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;05.01.23:&lt;/strong&gt; - Fix db password setting (sed escape &lt;code&gt;&amp;amp;&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;21.12.22:&lt;/strong&gt; - Update db info in .env file when env vars are updated.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;10.10.22:&lt;/strong&gt; - Remove password escape logic which caused problems for a small subset of users.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;20.08.22:&lt;/strong&gt; - Rebasing to alpine 3.15 with php8. Restructure nginx configs (&lt;a href=&#34;https://info.linuxserver.io/issues/2022-08-20-nginx-base&#34;&gt;see changes announcement&lt;/a&gt;).&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;14.03.22:&lt;/strong&gt; - Add symlinks for theme support.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;11.07.21:&lt;/strong&gt; - Rebase to Alpine 3.14.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;12.01.21:&lt;/strong&gt; - Remove unused requirement, as of release 0.31.0.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;17.12.20:&lt;/strong&gt; - Make APP_URL var required (upstream changes).&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;17.09.20:&lt;/strong&gt; - Rebase to alpine 3.12. Fix APP_URL setting. Bump php post max and upload max filesizes to 100MB by default.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;19.12.19:&lt;/strong&gt; - Rebasing to alpine 3.11.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;26.07.19:&lt;/strong&gt; - Use old version of tidyhtml pending upstream fixes.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;28.06.19:&lt;/strong&gt; - Rebasing to alpine 3.10.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;14.06.19:&lt;/strong&gt; - Add wkhtmltopdf to image for PDF rendering.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;20.04.19:&lt;/strong&gt; - Rebase to Alpine 3.9, add MySQL init logic.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;22.03.19:&lt;/strong&gt; - Switching to new Base images, shift to arm32v7 tag.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;20.01.19:&lt;/strong&gt; - Added php7-curl&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;04.11.18:&lt;/strong&gt; - Added php7-ldap&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;15.10.18:&lt;/strong&gt; - Changed functionality for advanced users&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;08.10.18:&lt;/strong&gt; - Advanced mode, symlink changes, sed fixing, docs updated, added some composer files&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;23.09.28:&lt;/strong&gt; - Updates pre-release&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;02.07.18:&lt;/strong&gt; - Initial Release.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>confluentinc/learn-flink-sql-exercises</title>
    <updated>2024-06-02T01:46:48Z</updated>
    <id>tag:github.com,2024-06-02:/confluentinc/learn-flink-sql-exercises</id>
    <link href="https://github.com/confluentinc/learn-flink-sql-exercises" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Apache Flink® SQL Course Exercises&lt;/h1&gt; &#xA;&lt;p&gt;This repository is part of the &lt;strong&gt;Flink SQL&lt;/strong&gt; course on &lt;a href=&#34;https://developer.confluent.io/&#34;&gt;Confluent Developer&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;What this does&lt;/h2&gt; &#xA;&lt;p&gt;The code in this repo uses Docker Compose to start up a Flink cluster, a Kafka cluster, a Schema Registry, and the Flink SQL Client. &lt;a href=&#34;https://github.com/knaufk/flink-faker&#34;&gt;flink-faker&lt;/a&gt; is used to generate some sample data streams.&lt;/p&gt; &#xA;&lt;h2&gt;How to get it running&lt;/h2&gt; &#xA;&lt;p&gt;First build the image and start all of the containers:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker compose up --build -d&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once the containers are running,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker compose run sql-client&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;will drop you into the Flink SQL Client, where you can interact with Flink SQL.&lt;/p&gt; &#xA;&lt;h2&gt;How to shut it down&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker compose down -v&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>YanWenKun/ComfyUI-Docker</title>
    <updated>2024-06-02T01:46:48Z</updated>
    <id>tag:github.com,2024-06-02:/YanWenKun/ComfyUI-Docker</id>
    <link href="https://github.com/YanWenKun/ComfyUI-Docker" rel="alternate"></link>
    <summary type="html">&lt;p&gt;🐳Dockerfile for 🎨ComfyUI. | 容器镜像与启动脚本&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Docker image for ComfyUI&lt;/h1&gt; &#xA;&lt;div id=&#34;preamble&#34;&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;&lt;span class=&#34;image&#34;&gt;&lt;a class=&#34;image&#34; href=&#34;https://github.com/YanWenKun/ComfyUI-Docker/actions&#34;&gt;&lt;img src=&#34;https://github.com/YanWenKun/ComfyUI-Docker/actions/workflows/build-latest.yml/badge.svg?sanitize=true&#34; alt=&#34;GitHub Workflow Status&#34;&gt;&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;image&#34;&gt;&lt;a class=&#34;image&#34; href=&#34;https://github.com/YanWenKun/ComfyUI-Docker/tree/main/rocm&#34;&gt;&lt;img src=&#34;https://github.com/YanWenKun/ComfyUI-Docker/actions/workflows/build-rocm.yml/badge.svg?sanitize=true&#34; alt=&#34;GitHub Workflow Status&#34;&gt;&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;image&#34;&gt;&lt;a class=&#34;image&#34; href=&#34;https://github.com/YanWenKun/ComfyUI-Docker/tree/main/megapak&#34;&gt;&lt;img src=&#34;https://github.com/YanWenKun/ComfyUI-Docker/actions/workflows/build-megapak.yml/badge.svg?sanitize=true&#34; alt=&#34;GitHub Workflow Status&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/YanWenKun/ComfyUI-Docker/main/README.zh.adoc&#34;&gt;＞💡中文说明点我💡＜&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;imageblock&#34;&gt; &#xA;   &lt;div class=&#34;content&#34;&gt; &#xA;    &lt;img src=&#34;https://raw.githubusercontent.com/YanWenKun/ComfyUI-Docker/main/docs/chart-concept.svg?sanitize=true&#34; alt=&#34;Concept Design&#34;&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;This repo is for &lt;a href=&#34;https://hub.docker.com/r/yanwk/comfyui-boot&#34;&gt;Docker images&lt;/a&gt; that runs &lt;a href=&#34;https://github.com/comfyanonymous/ComfyUI&#34;&gt;ComfyUI&lt;/a&gt; - a Stable Diffusion GUI powering node-based workflow.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;_how_it_works&#34;&gt;How it works&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;olist arabic&#34;&gt; &#xA;   &lt;ol class=&#34;arabic&#34;&gt; &#xA;    &lt;li&gt; &lt;p&gt;At first start, a script will download latest ComfyUI, ComfyUI-Manager and some models.&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;The whole ComfyUI will be stored in a local folder (&lt;code&gt;./storage/ComfyUI&lt;/code&gt;).&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;If you already have a ComfyUI bundle, put it there and make an empty file (&lt;code&gt;./storage/.download-complete&lt;/code&gt;) so the start script will skip downloading.&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;Use ComfyUI-Manager (in ComfyUI web page) to update ComfyUI, manage custom nodes, and download models.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;/ol&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;_prerequisites&#34;&gt;Prerequisites&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;ulist&#34;&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt; &lt;p&gt;NVIDIA GPU with ≥6GB VRAM&lt;/p&gt; &#xA;     &lt;div class=&#34;ulist&#34;&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt; &lt;p&gt;For 4GB see &lt;a href=&#34;https://raw.githubusercontent.com/YanWenKun/ComfyUI-Docker/main/#q-n-a&#34;&gt;Q &amp;amp; A&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;       &lt;li&gt; &lt;p&gt;For AMD GPU see &lt;a href=&#34;https://raw.githubusercontent.com/YanWenKun/ComfyUI-Docker/main/rocm/README.adoc&#34;&gt;ROCm&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;/ul&gt; &#xA;     &lt;/div&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;Latest NVIDIA GPU driver&lt;/p&gt; &#xA;     &lt;div class=&#34;ulist&#34;&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt; &lt;p&gt;Either Game or Studio edition will work.&lt;/p&gt; &lt;/li&gt; &#xA;       &lt;li&gt; &lt;p&gt;You don’t need to install drivers inside containers. Just make sure it’s working on your host OS.&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;/ul&gt; &#xA;     &lt;/div&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;Docker Installed&lt;/p&gt; &#xA;     &lt;div class=&#34;ulist&#34;&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt; &lt;p&gt;Linux user may need to install &lt;a href=&#34;https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/latest/install-guide.html&#34;&gt;NVIDIA Container Toolkit&lt;/a&gt; (only on host OS). It will enable containers&#39; GPU access.&lt;/p&gt; &lt;/li&gt; &#xA;       &lt;li&gt; &lt;p&gt;Windows user could use &lt;a href=&#34;https://www.docker.com/products/docker-desktop/&#34;&gt;Docker Desktop&lt;/a&gt; with WSL2 enabled.&lt;/p&gt; &lt;/li&gt; &#xA;       &lt;li&gt; &lt;p&gt;For Podman users see: &lt;a href=&#34;https://raw.githubusercontent.com/YanWenKun/ComfyUI-Docker/main/#podman&#34;&gt;Run with Podman&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;/ul&gt; &#xA;     &lt;/div&gt; &lt;/li&gt; &#xA;   &lt;/ul&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;_usage_nvidia_gpu&#34;&gt;Usage - NVIDIA GPU&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;listingblock&#34;&gt; &#xA;   &lt;div class=&#34;title&#34;&gt;&#xA;    A. Using &#xA;    &lt;code&gt;docker run&lt;/code&gt;&#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;content&#34;&gt; &#xA;    &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;mkdir -p storage&#xA;&#xA;docker run -it   --name comfyui   --gpus all   -p 8188:8188   -v &#34;$(pwd)&#34;/storage:/home/runner   -e CLI_ARGS=&#34;&#34;   yanwk/comfyui-boot:latest&lt;/code&gt;&lt;/pre&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;listingblock&#34;&gt; &#xA;   &lt;div class=&#34;content&#34;&gt; &#xA;    &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;# Update image (only when Python components are outdated)&#xA;docker rm comfyui&#xA;docker pull yanwk/comfyui-boot:latest&#xA;# Then re-run above &#39;docker run&#39; again&lt;/code&gt;&lt;/pre&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;listingblock&#34;&gt; &#xA;   &lt;div class=&#34;title&#34;&gt;&#xA;    B. Using &#xA;    &lt;code&gt;docker compose&lt;/code&gt;&#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;content&#34;&gt; &#xA;    &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;git clone https://github.com/YanWenKun/ComfyUI-Docker.git&#xA;&#xA;cd ComfyUI-Docker&#xA;&#xA;docker compose up --detach&lt;/code&gt;&lt;/pre&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;listingblock&#34;&gt; &#xA;   &lt;div class=&#34;content&#34;&gt; &#xA;    &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;# Update image (only when Python components are outdated)&#xA;git pull&#xA;docker compose pull&#xA;docker compose up --detach --remove-orphans&#xA;docker image prune&lt;/code&gt;&lt;/pre&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;Once the app is loaded, visit &lt;a href=&#34;http://localhost:8188/&#34; class=&#34;bare&#34;&gt;http://localhost:8188/&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;_usage_amd_gpu&#34;&gt;Usage - AMD GPU&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/YanWenKun/ComfyUI-Docker/main/rocm/README.adoc&#34;&gt;ROCm&lt;/a&gt;.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;q-n-a&#34;&gt;Q &amp;amp; A&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;Q: My GPU has only 4GB VRAM&lt;br&gt; A: Add &lt;code&gt;--lowvram&lt;/code&gt; to &lt;strong&gt;CLI_ARGS&lt;/strong&gt;.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;Q: Adding &lt;em&gt;--lowvram&lt;/em&gt; still out-of-memory&lt;br&gt; A: Use &lt;code&gt;--novram&lt;/code&gt; instead. It will use CPU RAM.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;Q: How to run on CPU?&lt;br&gt; A: Add &lt;code&gt;--cpu&lt;/code&gt; to &lt;strong&gt;CLI_ARGS&lt;/strong&gt;. It’s pretty slow.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;Q: I don’t want to use xFormers, how to use PyTorch’s Cross Attention?&lt;br&gt; A: Add &lt;code&gt;--use-pytorch-cross-attention&lt;/code&gt; to &lt;strong&gt;CLI_ARGS&lt;/strong&gt;. It may perform well on WSL2, but significantly slower on Linux hosts.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;More &lt;code&gt;CLI_ARGS&lt;/code&gt; available at &lt;a href=&#34;https://github.com/comfyanonymous/ComfyUI/raw/master/comfy/cli_args.py&#34;&gt;ComfyUI&lt;/a&gt;.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;_add_some_custom_nodes&#34;&gt;Add some custom nodes&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;details&gt; &#xA;   &lt;summary class=&#34;title&#34;&gt;Install a bunch of custom nodes that may save your time&lt;/summary&gt; &#xA;   &lt;div class=&#34;content&#34;&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;Note that most dependencies are bundled in the image, you don’t need to manually install them.&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;listingblock&#34;&gt; &#xA;     &lt;div class=&#34;content&#34;&gt; &#xA;      &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;cd ComfyUI/custom_nodes/&#xA;&#xA;gcs=&#39;git clone --depth=1 --no-tags --recurse-submodules --shallow-submodules&#39;&#xA;&#xA;# Workspace&#xA;$gcs https://github.com/11cafe/comfyui-workspace-manager.git&#xA;$gcs https://github.com/AIGODLIKE/AIGODLIKE-ComfyUI-Translation.git&#xA;$gcs https://github.com/crystian/ComfyUI-Crystools-save.git&#xA;$gcs https://github.com/crystian/ComfyUI-Crystools.git&#xA;&#xA;# General&#xA;$gcs https://github.com/bash-j/mikey_nodes.git&#xA;$gcs https://github.com/chrisgoringe/cg-use-everywhere.git&#xA;$gcs https://github.com/cubiq/ComfyUI_essentials.git&#xA;$gcs https://github.com/Derfuu/Derfuu_ComfyUI_ModdedNodes.git&#xA;$gcs https://github.com/jags111/efficiency-nodes-comfyui.git&#xA;$gcs https://github.com/kijai/ComfyUI-KJNodes.git&#xA;$gcs https://github.com/pythongosssss/ComfyUI-Custom-Scripts.git&#xA;$gcs https://github.com/rgthree/rgthree-comfy.git&#xA;$gcs https://github.com/shiimizu/ComfyUI_smZNodes.git&#xA;$gcs https://github.com/Suzie1/ComfyUI_Comfyroll_CustomNodes.git&#xA;&#xA;# Control&#xA;$gcs https://github.com/cubiq/ComfyUI_InstantID.git&#xA;$gcs https://github.com/cubiq/ComfyUI_IPAdapter_plus.git&#xA;$gcs https://github.com/Fannovel16/comfyui_controlnet_aux.git&#xA;$gcs https://github.com/florestefano1975/comfyui-portrait-master.git&#xA;$gcs https://github.com/Gourieff/comfyui-reactor-node.git&#xA;$gcs https://github.com/huchenlei/ComfyUI-layerdiffuse.git&#xA;$gcs https://github.com/Kosinkadink/ComfyUI-Advanced-ControlNet.git&#xA;$gcs https://github.com/ltdrdata/ComfyUI-Impact-Pack.git&#xA;$gcs https://github.com/ltdrdata/ComfyUI-Inspire-Pack.git&#xA;$gcs https://github.com/mcmonkeyprojects/sd-dynamic-thresholding.git&#xA;$gcs https://github.com/storyicon/comfyui_segment_anything.git&#xA;$gcs https://github.com/twri/sdxl_prompt_styler.git&#xA;&#xA;# Video&#xA;$gcs https://github.com/Fannovel16/ComfyUI-Frame-Interpolation.git&#xA;$gcs https://github.com/FizzleDorf/ComfyUI_FizzNodes.git&#xA;$gcs https://github.com/Kosinkadink/ComfyUI-AnimateDiff-Evolved.git&#xA;$gcs https://github.com/Kosinkadink/ComfyUI-VideoHelperSuite.git&#xA;$gcs https://github.com/melMass/comfy_mtb.git&#xA;$gcs https://github.com/MrForExample/ComfyUI-AnimateAnyone-Evolved.git&#xA;&#xA;# More&#xA;$gcs https://github.com/cubiq/ComfyUI_FaceAnalysis.git&#xA;$gcs https://github.com/MrForExample/ComfyUI-3D-Pack.git&#xA;$gcs https://github.com/pythongosssss/ComfyUI-WD14-Tagger.git&#xA;$gcs https://github.com/SLAPaper/ComfyUI-Image-Selector.git&#xA;$gcs https://github.com/ssitu/ComfyUI_UltimateSDUpscale.git&lt;/code&gt;&lt;/pre&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;Another note is this image doesn’t bundled deps for &lt;a href=&#34;https://github.com/WASasquatch/was-node-suite-comfyui&#34;&gt;WAS Node Suite&lt;/a&gt;, because it has some deps version &lt;a href=&#34;https://github.com/WASasquatch/was-node-suite-comfyui/raw/main/requirements.txt&#34;&gt;fixed&lt;/a&gt;, and is not under active development.&lt;br&gt; However, the image’s script only install one custom node (ComfyUI-Manager). You can safely install WAS NS via ComfyUI-Manager in a new deployment.&lt;br&gt; If anything conflicts, just delete unwanted custom nodes and &lt;code&gt;.local&lt;/code&gt; (or &lt;code&gt;local&lt;/code&gt;) folder, and update/try-fix/reinstall custom nodes in ComfyUI-Manager.&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/details&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;_pre_start_scripts&#34;&gt;Pre-start scripts&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;You can create your own pre-start script at&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;listingblock&#34;&gt; &#xA;   &lt;div class=&#34;content&#34;&gt; &#xA;    &lt;pre&gt;./storage/scripts/pre-start.sh&lt;/pre&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;It will run before ComfyUI starts, handy for debugging.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;Also, if you need to setup proxy, this script will start before &lt;code&gt;pre-start&lt;/code&gt; and &lt;code&gt;download&lt;/code&gt; :&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;listingblock&#34;&gt; &#xA;   &lt;div class=&#34;content&#34;&gt; &#xA;    &lt;pre&gt;./storage/scripts/set-proxy.sh&lt;/pre&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;podman&#34;&gt;Run with Podman&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;Podman is root-less by default. And &lt;a href=&#34;https://www.tutorialworks.com/podman-rootless-volumes/&#34;&gt;it’s tricky&lt;/a&gt; to bind-mount volume as non-root user inside rootless container. &lt;a href=&#34;https://docs.podman.io/en/latest/markdown/podman-run.1.html#mount-type-type-type-specific-option&#34;&gt;Options&lt;/a&gt; provided by Podman will chown files on host space, which probably is undesirable.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;Recommend three different ways to workaround:&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;_1_go_root_ful_just_like_docker&#34;&gt;1. Go &#34;root-ful&#34; just like Docker&lt;/h3&gt; &#xA;   &lt;details&gt; &#xA;    &lt;summary class=&#34;title&#34;&gt;Expand details&lt;/summary&gt; &#xA;    &lt;div class=&#34;content&#34;&gt; &#xA;     &lt;div class=&#34;paragraph&#34;&gt; &#xA;      &lt;p&gt;The straightforward way. By adding &lt;code&gt;sudo&lt;/code&gt; you go from rootless to rootful. And everything else would be the same as using Docker.&lt;br&gt; Note that sudo Podman will download images to root space. If you already downloaded the image in current user, you can local-copy it:&lt;br&gt; &lt;code&gt;sudo podman image scp username@localhost::docker.io/yanwk/comfyui-boot:latest&lt;/code&gt;&lt;/p&gt; &#xA;     &lt;/div&gt; &#xA;     &lt;div class=&#34;listingblock&#34;&gt; &#xA;      &lt;div class=&#34;content&#34;&gt; &#xA;       &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;mkdir -p storage&#xA;&#xA;sudo podman run -it --rm   --name comfyui-rootful   --device nvidia.com/gpu=all   --security-opt label=disable   -p 8188:8188   -v &#34;$(pwd)&#34;/storage:/home/runner   -e CLI_ARGS=&#34;&#34;   docker.io/yanwk/comfyui-boot&lt;/code&gt;&lt;/pre&gt; &#xA;      &lt;/div&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/details&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;_2_run_as_root_inside_container&#34;&gt;2. Run as root inside container&lt;/h3&gt; &#xA;   &lt;details&gt; &#xA;    &lt;summary class=&#34;title&#34;&gt;Expand details&lt;/summary&gt; &#xA;    &lt;div class=&#34;content&#34;&gt; &#xA;     &lt;div class=&#34;paragraph&#34;&gt; &#xA;      &lt;p&gt;The rootless way, no sudo needed. Inside the pod, Podman will mount volume as root, scripts will run as root. And from the host side, we see files keep their original ownership.&lt;/p&gt; &#xA;     &lt;/div&gt; &#xA;     &lt;div class=&#34;listingblock&#34;&gt; &#xA;      &lt;div class=&#34;content&#34;&gt; &#xA;       &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;mkdir -p storage&#xA;&#xA;podman run -it --rm   --name comfyui-rootless   --device nvidia.com/gpu=all   --security-opt label=disable   -p 8188:8188   -v &#34;$(pwd)&#34;/storage:/root   --user root   --workdir /root   -e CLI_ARGS=&#34;&#34;   docker.io/yanwk/comfyui-boot:latest   /bin/bash /home/scripts/root-wrapper.sh&lt;/code&gt;&lt;/pre&gt; &#xA;      &lt;/div&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/details&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;_3_use_megapak_image&#34;&gt;3. Use &lt;a href=&#34;https://raw.githubusercontent.com/YanWenKun/ComfyUI-Docker/main/megapak/README.adoc&#34;&gt;megapak&lt;/a&gt; image&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;This image was built for rootless.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;_some_commands_for_debugging&#34;&gt;Some commands for debugging&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;listingblock&#34;&gt; &#xA;   &lt;div class=&#34;title&#34;&gt;&#xA;    Build the image, print all logs to STDOUT&#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;content&#34;&gt; &#xA;    &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;docker build . --progress=plain -f Dockerfile -t yanwk/comfyui-boot:latest&lt;/code&gt;&lt;/pre&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;listingblock&#34;&gt; &#xA;   &lt;div class=&#34;title&#34;&gt;&#xA;    Run a one-time container&#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;content&#34;&gt; &#xA;    &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;docker run -it --rm   --gpus all -p 8188:8188   --volume &#34;$(pwd)&#34;/storage:/home/runner   --env CLI_ARGS=&#34;&#34;   yanwk/comfyui-boot:latest&lt;/code&gt;&lt;/pre&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;listingblock&#34;&gt; &#xA;   &lt;div class=&#34;title&#34;&gt;&#xA;    Run into a root bash&#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;content&#34;&gt; &#xA;    &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;docker run -it --rm   --gpus all -p 8188:8188   --volume &#34;$(pwd)&#34;/storage:/home/runner   --env CLI_ARGS=&#34;&#34;   --user root   yanwk/comfyui-boot:latest /bin/bash&lt;/code&gt;&lt;/pre&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;div class=&#34;title&#34;&gt;&#xA;    Clean up cache files&#xA;   &lt;/div&gt; &#xA;   &lt;p&gt;Usually this is not needed. Some custom nodes will use &lt;code&gt;huggingface_hub&lt;/code&gt; to download models and store them in &lt;code&gt;.cache&lt;/code&gt;. You may need to download them again after cleaning cache.&lt;br&gt; But if having issues when updating, it may worth a try:&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;listingblock&#34;&gt; &#xA;   &lt;div class=&#34;content&#34;&gt; &#xA;    &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;docker exec -it --workdir /home/runner  comfyui   rm -rf .cache/ .config/ .local/ .nv/ bin/ include/ lib/ lib64 pyvenv.cfg&#xA;&#xA;docker restart comfyui&lt;/code&gt;&lt;/pre&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;_license&#34;&gt;License&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/YanWenKun/ComfyUI-Docker/main/LICENSE&#34;&gt;Mulan Public License，Version 2&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;This open source license is written and valid both in Chinese and English, how good is that!&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt;</summary>
  </entry>
</feed>