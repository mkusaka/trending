<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dockerfile Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-02-19T01:50:37Z</updated>
  <subtitle>Weekly Trending of Dockerfile in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>sickcodes/dock-droid</title>
    <updated>2023-02-19T01:50:37Z</updated>
    <id>tag:github.com,2023-02-19:/sickcodes/dock-droid</id>
    <link href="https://github.com/sickcodes/dock-droid" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Docker Android - Run QEMU Android in a Docker! X11 Forwarding! CI/CD for Android!&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Dock-Droid Â· &lt;a href=&#34;https://twitter.com/sickcodes&#34;&gt;Follow @sickcodes on Twitter&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/sickcodes/dock-droid/master/dock-droid-docker-android.png?raw=true&#34; alt=&#34;Running Android x86 &amp;amp; Android ARM in a Docker container&#34; title=&#34;ANDROID KVM IN DOCKER CONTAINER&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Docker Android - Run QEMU Android x86 and Android ARM in a Docker! X11 Forwarding! CI/CD for Android!&lt;/p&gt; &#xA;&lt;h2&gt;Capabilities&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Security Research of ARM apps on x86!&lt;/li&gt; &#xA; &lt;li&gt;ADB on port &lt;code&gt;:5555&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Magisk, riru, LSPosed on Android x86&lt;/li&gt; &#xA; &lt;li&gt;SSH enabled (&lt;code&gt;localhost:50922&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;SCRCPY enabled (&lt;code&gt;localhost:5555&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;WebCam forwarding enabled (&lt;code&gt;/dev/video0&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Audio forwarding enabled (&lt;code&gt;/dev/snd&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;GPU passthrough (&lt;code&gt;/dev/dri&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;X11 forwarding is enabled&lt;/li&gt; &#xA; &lt;li&gt;runs on top of QEMU + KVM&lt;/li&gt; &#xA; &lt;li&gt;supports BlissOS, custom images, VDI files, any Android x86 image, Xvfb headless mode&lt;/li&gt; &#xA; &lt;li&gt;you can clone your container with &lt;code&gt;docker commit&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Author&lt;/h2&gt; &#xA;&lt;p&gt;This project is maintained by @sickcodes &lt;a href=&#34;https://sick.codes/&#34;&gt;Sick.Codes&lt;/a&gt;. &lt;a href=&#34;https://twitter.com/sickcodes&#34;&gt;(Twitter)&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Additional credits can be found here: &lt;a href=&#34;https://github.com/sickcodes/dock-droid/raw/master/CREDITS.md&#34;&gt;https://github.com/sickcodes/dock-droid/blob/master/CREDITS.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Epic thanks to &lt;a href=&#34;https://github.com/BlissRoms&#34;&gt;@BlissRoms&lt;/a&gt; who maintain absolutely incredible Android x86 images. If you love their images, consider donating to the project: &lt;a href=&#34;https://blissos.org/&#34;&gt;https://blissos.org/&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;p&gt;Special thanks to &lt;a href=&#34;https://github.com/zhouziyang&#34;&gt;@zhouziyang&lt;/a&gt; who maintains an even more native fork &lt;a href=&#34;https://github.com/remote-android/redroid-doc&#34;&gt;Redroid&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;p&gt;This project is heavily based on Docker-OSX: &lt;a href=&#34;https://github.com/sickcodes/Docker-OSX&#34;&gt;https://github.com/sickcodes/Docker-OSX&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://hub.docker.com/r/sickcodes/dock-droid&#34;&gt;&lt;img src=&#34;https://dockeri.co/image/sickcodes/dock-droid&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Related:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Next Generation Anbox Style LXC:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/sickcodes/droid-native&#34;&gt;https://github.com/sickcodes/droid-native&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Android in a Docker using &lt;a href=&#34;https://blissos.org/&#34;&gt;BlissOS&lt;/a&gt;:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/sickcodes/dock-droid&#34;&gt;https://github.com/sickcodes/dock-droid&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;binder(fs) and ashmem for use in anbox related 5.7+ Kernel distribuitons (soon to be all):&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/sickcodes/anbox-modules-dkms&#34;&gt;https://github.com/sickcodes/anbox-modules-dkms&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Requirements&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;4GB disk space for bare minimum installation&lt;/li&gt; &#xA; &lt;li&gt;virtualization should be enabled in your BIOS settings&lt;/li&gt; &#xA; &lt;li&gt;a kvm-capable host (not required, but slow otherwise)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Initial setup&lt;/h2&gt; &#xA;&lt;p&gt;Before you do anything else, you will need to turn on hardware virtualization in your BIOS. Precisely how will depend on your particular machine (and BIOS), but it should be straightforward.&lt;/p&gt; &#xA;&lt;p&gt;Then, you&#39;ll need QEMU and some other dependencies on your host:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# ARCH&#xA;sudo pacman -S qemu libvirt dnsmasq virt-manager bridge-utils flex bison iptables-nft edk2-ovmf&#xA;&#xA;# UBUNTU DEBIAN&#xA;sudo apt install qemu qemu-kvm libvirt-clients libvirt-daemon-system bridge-utils virt-manager&#xA;&#xA;# CENTOS RHEL FEDORA&#xA;sudo yum install libvirt qemu-kvm&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, enable libvirt and load the KVM kernel module:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo systemctl enable --now libvirtd&#xA;sudo systemctl enable --now virtlogd&#xA;&#xA;echo 1 | sudo tee /sys/module/kvm/parameters/ignore_msrs&#xA;&#xA;sudo modprobe kvm&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Quick Start Dock-Droid&lt;/h2&gt; &#xA;&lt;p&gt;You can run the Live OS image, or install to disk.&lt;/p&gt; &#xA;&lt;p&gt;Connect to the WiFi network called &lt;code&gt;VirtWifi&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;BlissOS x86 Image &lt;a href=&#34;https://hub.docker.com/r/sickcodes/dock-droid/tags?page=1&amp;amp;ordering=last_updated&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/image-size/sickcodes/dock-droid/latest?label=sickcodes%2Fdock-droid%3Alatest&#34; alt=&#34;https://img.shields.io/docker/image-size/sickcodes/dock-droid/latest?label=sickcodes%2Fdock-droid%3Alatest&#34;&gt;&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run -it \&#xA;    --device /dev/kvm \&#xA;    -v /tmp/.X11-unix:/tmp/.X11-unix \&#xA;    -e &#34;DISPLAY=${DISPLAY:-:0.0}&#34; \&#xA;    -p 5555:5555 \&#xA;    sickcodes/dock-droid:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Headlessly (on a server, or locally)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run -it \&#xA;    --device /dev/kvm \&#xA;    -e EXTRA=&#34;-display none -vnc 0.0.0.0:99,password=on&#34; \&#xA;    -p 5555:5555 \&#xA;    -p 5999:5999 \&#xA;    sickcodes/dock-droid:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For headless, in the QEMU console, type &lt;code&gt;change vnc password user&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;And then connect on &lt;code&gt;localhost:5999&lt;/code&gt;, or the server IP, or Docker IP.&lt;/p&gt; &#xA;&lt;h3&gt;No Image (:naked) &lt;a href=&#34;https://hub.docker.com/r/sickcodes/dock-droid/tags?page=1&amp;amp;ordering=last_updated&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/image-size/sickcodes/dock-droid/naked?label=sickcodes%2Fdock-droid%3Anaked&#34; alt=&#34;https://img.shields.io/docker/image-size/sickcodes/dock-droid/naked?label=sickcodes%2Fdock-droid%3Anaked&#34;&gt;&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run -it \&#xA;    --device /dev/kvm \&#xA;    -v /tmp/.X11-unix:/tmp/.X11-unix \&#xA;    -e &#34;DISPLAY=${DISPLAY:-:0.0}&#34; \&#xA;    -v &#34;${PWD}/android.qcow2:/home/arch/dock-droid/android.qcow2&#34; \&#xA;    -p 5555:5555 \&#xA;    sickcodes/dock-droid:naked&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Run without KVM (Work in Progress)&lt;/h3&gt; &#xA;&lt;p&gt;This will boot, but currently does not &#34;work&#34;.&lt;/p&gt; &#xA;&lt;p&gt;Change &lt;code&gt;CPU&lt;/code&gt; to &lt;code&gt;Penryn&lt;/code&gt;, which is normally &lt;code&gt;host&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Change &lt;code&gt;ENABLE_KVM&lt;/code&gt;, which is normally &lt;code&gt;-enable-kvm&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Change &lt;code&gt;KVM&lt;/code&gt;, which is normally &lt;code&gt;accel=kvm:tcg&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Change &lt;code&gt;CPUID_FLAGS&lt;/code&gt;, which is normally very long.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# use a spacebar in quotes&#xA;-e CPU=qemu64 \&#xA;-e ENABLE_KVM=&#39; &#39; \&#xA;-e KVM=&#39; &#39; \&#xA;-e CPUID_FLAGS=&#39; &#39; \&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For example &lt;strong&gt;(Work in Progress)&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run -it \&#xA;    -e CPU=Penryn \&#xA;    -e ENABLE_KVM=&#39; &#39; \&#xA;    -e KVM=&#39; &#39; \&#xA;    -e CPUID_FLAGS=&#39; &#39; \&#xA;    -v /tmp/.X11-unix:/tmp/.X11-unix \&#xA;    -e &#34;DISPLAY=${DISPLAY:-:0.0}&#34; \&#xA;    -p 5555:5555 \&#xA;    sickcodes/dock-droid:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Increase RAM&lt;/h3&gt; &#xA;&lt;p&gt;Increase RAM by adding this line: &lt;code&gt;-e RAM=10 \&lt;/code&gt; for 10GB.&lt;/p&gt; &#xA;&lt;h2&gt;Docker Virtual Machine WebCam&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/sickcodes/dock-droid/master/Android-WebCam-Passthrough-QEMU-Android-x86.png?raw=true&#34; alt=&#34;Android WebCam Passthrough SPICE USBREDIR QEMU Android x86&#34; title=&#34;Android WebCam Passthrough SPICE USBREDIR QEMU Android x86&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Want to use your Laptop/USB WebCam and Audio too?&lt;/p&gt; &#xA;&lt;p&gt;There are two options: &lt;strong&gt;usb passthrough&lt;/strong&gt;, or &lt;strong&gt;usb redirect (network)&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;v4l2-ctl --list-devices&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;lsusb&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Find the &lt;code&gt;hostbus&lt;/code&gt; and &lt;code&gt;hostaddr&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;Bus 003 Device 003: ID 13d3:56a2 IMC Networks USB2.0 HD UVC WebCam&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Would be &lt;code&gt;-device usb-host,hostbus=3,hostaddr=3&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Passthrough Android Camera over USB&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run -it \&#xA;    --device /dev/kvm \&#xA;    -v /tmp/.X11-unix:/tmp/.X11-unix \&#xA;    -e &#34;DISPLAY=${DISPLAY:-:0.0}&#34; \&#xA;    -p 5555:5555 \&#xA;    -e EXTRA=&#39;-device usb-host,hostbus=3,hostaddr=3&#39; \&#xA;    sickcodes/dock-droid:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Passthrough Android WebCam Camera over the Network!&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;lsusb&#xA;# Bus 003 Device 003: ID 13d3:56a2 IMC Networks USB2.0 HD UVC WebCam&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Vendor ID is &lt;code&gt;13d3&lt;/code&gt; Product ID is &lt;code&gt;56a2&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;In one Terminal on host:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo usbredirserver -p 7700 13d3:56a2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In another Terminal on host:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# 172.17.0.1 is the IP of the Docker Bridge, usually the host, but you can change this to anything.&#xA;PORT=7700&#xA;IP_ADDRESS=172.17.0.1&#xA;&#xA;docker run -it \&#xA;    --device /dev/kvm \&#xA;    -v /tmp/.X11-unix:/tmp/.X11-unix \&#xA;    -e &#34;DISPLAY=${DISPLAY:-:0.0}&#34; \&#xA;    -p 5555:5555 \&#xA;    -e EXTRA=&#34;-chardev socket,id=usbredirchardev1,port=${PORT},host=${IP_ADDRESS} -device usb-redir,chardev=usbredirchardev1,id=usbredirdev1,bus=ehci.0,debug=4&#34; \&#xA;    sickcodes/dock-droid:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Android x86 Docker GPU &amp;amp; Hardware Acceleration&lt;/h3&gt; &#xA;&lt;p&gt;Currently in development by BlissOS team: mesa graphics card + OpenGL3.2.&lt;/p&gt; &#xA;&lt;p&gt;Want to use SwiftShader acceleration?&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run -it \&#xA;    --privileged \&#xA;    --device /dev/kvm \&#xA;    -v /tmp/.X11-unix:/tmp/.X11-unix \&#xA;    -e &#34;DISPLAY=${DISPLAY:-:0.0}&#34; \&#xA;    -p 5555:5555 \&#xA;    -p 50922:10022 \&#xA;    --device=/dev/dri \&#xA;    --group-add video \&#xA;    -e EXTRA=&#39;-display sdl,gl=on&#39; \&#xA;    sickcodes/dock-droid:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Use your own image/naked version&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&#xA;# get container name from &#xA;docker ps -a&#xA;&#xA;# copy out the image&#xA;docker cp container_name:/home/arch/dock-droid/android.qcow2 .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use any generic ISO or use your own Android AOSP raw image or qcow2&lt;/p&gt; &#xA;&lt;p&gt;Where, &lt;code&gt;&#34;${PWD}/disk.qcow2&#34;&lt;/code&gt; is your image in the host system.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run -it \&#xA;    -v &#34;${PWD}/android.qcow2:/home/arch/dock-droid/android.qcow2&#34; \&#xA;    --privileged \&#xA;    --device /dev/kvm \&#xA;    --device /dev/video0 \&#xA;    -v /tmp/.X11-unix:/tmp/.X11-unix \&#xA;    -e &#34;DISPLAY=${DISPLAY:-:0.0}&#34; \&#xA;    -p 5555:5555 \&#xA;    -p 50922:10022 \&#xA;    -e EXTRA=&#39;-device usb-host,hostbus=3,hostaddr=3&#39; \&#xA;    sickcodes/dock-droid:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;UEFI BOOT&lt;/h3&gt; &#xA;&lt;p&gt;Add the following: &lt;code&gt;-bios /usr/share/OVMF/x64/OVMF.fd \&lt;/code&gt; to Launch.sh&lt;/p&gt; &#xA;&lt;p&gt;Or as a &lt;code&gt;docker run&lt;/code&gt; argument:&lt;/p&gt; &#xA;&lt;p&gt;UEFI Boot&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run -it \&#xA;    --device /dev/kvm \&#xA;    -v /tmp/.X11-unix:/tmp/.X11-unix \&#xA;    -e &#34;DISPLAY=${DISPLAY:-:0.0}&#34; \&#xA;    -p 5555:5555 \&#xA;    -e EXTRA=&#39;-bios /usr/share/OVMF/x64/OVMF.fd&#39; \&#xA;    sickcodes/dock-droid:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Custom Build&lt;/h3&gt; &#xA;&lt;p&gt;To use an alternative &lt;code&gt;CDROM&lt;/code&gt;, you have two choices: runtime or buildtime.&lt;/p&gt; &#xA;&lt;p&gt;You can add your image to the Dockerfile during the build:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&#xA;CDROM_IMAGE_URL=&#39;https://sourceforge.net/projects/blissos-x86/files/Official/bleeding_edge/Generic%20builds%20-%20Pie/11.13/Bliss-v11.13--OFFICIAL-20201113-1525_x86_64_k-k4.19.122-ax86-ga-rmi_m-20.1.0-llvm90_dgc-t3_gms_intelhd.iso&#39;&#xA;&#xA;docker build \&#xA;    -t dock-droid-custom \&#xA;    -e CDROM_IMAGE_URL=&#34;${CDROM_IMAGE_URL}&#34; .&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;OR&lt;/strong&gt; you can add it during runtime to the docker hub images as follows.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;    -v &#34;${CDROM}:/cdrom&#34; \&#xA;    -e CDROM=/cdrom \&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# full path to your image on the host&#xA;CDROM=&#34;${HOME}/Downloads/image.iso&#34;&#xA;&#xA;docker run -it \&#xA;    --device /dev/kvm \&#xA;    -v /tmp/.X11-unix:/tmp/.X11-unix \&#xA;    -e &#34;DISPLAY=${DISPLAY:-:0.0}&#34; \&#xA;    -p 5555:5555 \&#xA;    -v &#34;${CDROM}:/cdrom&#34; \&#xA;    -e CDROM=/cdrom \&#xA;    sickcodes/dock-droid:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Force Boot CDROM QEMU&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;-boot d &lt;/code&gt; will force QEMU to boot from the CDROM.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;-e EXTRA=&#39;-boot d &#39; \&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Naked Container&lt;/h3&gt; &#xA;&lt;p&gt;Reduces the image size by 600Mb if you are using a local directory disk image:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker cp  image_name /home/arch/dock-droid/android.qcow2 .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Modifying the Android filesystem.&lt;/h1&gt; &#xA;&lt;p&gt;The following groups of commands is for editing &lt;code&gt;android.qcow2&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;First, we will mount the main &lt;code&gt;qcow2&lt;/code&gt; file using &lt;code&gt;libguestfstools&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Then, inside that qcow2 image, there are: &lt;code&gt;system.img&lt;/code&gt; &lt;code&gt;ramdisk.img&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;GRUB is also in there.&lt;/p&gt; &#xA;&lt;p&gt;Mount the qcow2 using:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# on the host&#xA;# enable qemu-nbd for network device mounting&#xA;# wget -O android.qcow2 https://image.sick.codes/android.BlissOS_Stable.qcow2&#xA;&#xA;sudo modprobe nbd&#xA;sudo qemu-nbd --connect=/dev/nbd0 android.qcow2 -f qcow2&#xA;sudo fdisk /dev/nbd0 -l&#xA;mkdir -p /tmp/image&#xA;sudo mount /dev/nbd0p1 /tmp/image&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now you can mount the internal disks in other places...&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# make a folder to mount the whole resizable image &#xA;# make another to mount the raw Android image within that resizable image.&#xA;mkdir -p /tmp/system&#xA;sudo mount /tmp/image/bliss-x86-11.13/system.img /tmp/system&#xA;&#xA;ls /tmp/system&#xA;ls /tmp/image/bliss-x86-11.13&#xA;# don&#39;t forget to unmount&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Swap from Houdini to &lt;code&gt;ndk_translation&lt;/code&gt; Android x86&lt;/h3&gt; &#xA;&lt;p&gt;Extract the native-bridge using the following: &lt;a href=&#34;https://github.com/sickcodes/Droid-NDK-Extractor&#34;&gt;https://github.com/sickcodes/Droid-NDK-Extractor&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Thanks to &lt;a href=&#34;https://github.com/zhouziyang&#34;&gt;Frank from Redroid&lt;/a&gt; for the idea!&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/remote-android/redroid-doc/tree/master/native_bridge&#34;&gt;https://github.com/remote-android/redroid-doc/tree/master/native_bridge&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# warning, this will extract overwriting /etc/system/... so make sure you&#39;re in /tmp&#xA;cd /tmp \&#xA;    &amp;amp;&amp;amp; sudo wget https://github.com/sickcodes/dock-droid/raw/master/native-bridge.tar.gz \&#xA;    &amp;amp;&amp;amp; sudo tar -xzvf native-bridge.tar.gz \&#xA;    &amp;amp;&amp;amp; sudo rm native-bridge.tar.gz&#xA;&#xA;sudo touch /tmp/system/vendor/etc/init/nativebridge.rc&#xA;sudo tee /tmp/system/vendor/etc/init/nativebridge.rc &amp;lt;&amp;lt;EOF&#xA;on early-init&#xA;    setprop ro.product.cpu.abilist x86_64,arm64-v8a,x86,armeabi-v7a,armeabi&#xA;    setprop ro.product.cpu.abilist64 x86_64,arm64-v8a&#xA;    setprop ro.product.cpu.abilist32 x86,armeabi-v7a,armeabi&#xA;    setprop ro.dalvik.vm.isa.arm x86&#xA;    setprop ro.dalvik.vm.isa.arm64 x86_64&#xA;    setprop ro.enable.native.bridge.exec 1&#xA;    setprop ro.dalvik.vm.native.bridge libndk_translation.so&#xA;    setprop ro.ndk_translation.version 0.2.2&#xA;EOF&#xA;&#xA;&#xA;# # Enable native bridge for target executables&#xA;# on early-init&#xA;#     mount binfmt_misc binfmt_misc /proc/sys/fs/binfmt_misc&#xA;&#xA;# on property:ro.enable.native.bridge.exec=1&#xA;#     copy /system/etc/binfmt_misc/arm_exe /proc/sys/fs/binfmt_misc/register&#xA;#     copy /system/etc/binfmt_misc/arm_dyn /proc/sys/fs/binfmt_misc/register&#xA;&#xA;# on property:ro.enable.native.bridge.exec64=1&#xA;#     copy /system/etc/binfmt_misc/arm64_exe /proc/sys/fs/binfmt_misc/register&#xA;#     copy /system/etc/binfmt_misc/arm64_dyn /proc/sys/fs/binfmt_misc/register&#xA;&#xA;&#xA;# add armeabi&#xA;sudo sed -i -e &#39;s/abilist32\=x86\,armeabi\-v7a/abilist32\=x86\,armeabi\-v7a\,armeabi/g&#39; /tmp/system/vendor/build.prop&#xA;sudo sed -i -e &#39;s/abilist\=x86_64\,x86\,arm64\-v8a\,armeabi\-v7a/abilist\=x86_64\,x86\,arm64\-v8a\,armeabi\-v7a\,armeabi/g&#39; /tmp/system/vendor/build.prop&#xA;&#xA;sudo rm /tmp/system/bin/enable_nativebridge \&#xA;    /tmp/system/etc/binfmt_misc/arm_exe \&#xA;    /tmp/system/etc/binfmt_misc/arm64_dyn \&#xA;    /tmp/system/etc/binfmt_misc/arm_dyn \&#xA;    /tmp/system/etc/binfmt_misc/arm64_exe&#xA;&#xA;sudo rm /tmp/system/vendor/etc/binfmt_misc/*&#xA;&#xA;sudo rm /tmp/system/etc/init/houdini.rc&#xA;&#xA;sudo tee -a /tmp/system/product/build.prop \&#xA;    -a /tmp/system/vendor/build.prop \&#xA;    -a /tmp/system/build.prop &amp;lt;&amp;lt;EOF&#xA;ro.product.cpu.abilist64=x86_64,arm64-v8a&#xA;ro.product.cpu.abilist32=x86,armeabi-v7a,armeabi&#xA;ro.dalvik.vm.isa.arm=x86&#xA;ro.dalvik.vm.isa.arm64=x86_64&#xA;ro.enable.native.bridge.exec=1&#xA;ro.dalvik.vm.native.bridge=libndk_translation.so&#xA;ro.secure=0&#xA;ro.debuggable=1&#xA;ro.adb.secure=0&#xA;service.adb.root=1&#xA;EOF&#xA;&#xA;# also swap libhoudini to libndk_translation in the ramdisk&#xA;mkdir -p /tmp/ramdisk&#xA;sudo /bin/bash -c &#34;cd /tmp/ramdisk \&#xA;    &amp;amp;&amp;amp; zcat /tmp/image/bliss-x86-11.13/ramdisk.img \&#xA;    | cpio -iud&#34;&#xA;&#xA;sed -i -e &#39;s/libhoudini/libndk_translation/g&#39; /tmp/ramdisk/default.prop&#xA;touch /tmp/image/bliss-x86-11.13/ramdisk.img&#xA;find . | cpio -o -H newc | gzip &amp;gt; /tmp/ramdisk.img.new&#xA;mv /tmp/ramdisk.img.new /tmp/image/bliss-x86-11.13/ramdisk.img&#xA;&#xA;# sudo tee -a /tmp/system/build.prop &amp;lt;&amp;lt;&#39;EOF&#39;&#xA;# ro.dalvik.vm.native.bridge=libndk_translation.so&#xA;# ro.product.cpu.abilist=x86_64,arm64-v8a,x86,armeabi-v7a,armeabi&#xA;# ro.product.cpu.abilist32=x86,armeabi-v7a,armeabi&#xA;# ro.ndk_translation.version=0.2.2&#xA;# EOF&#xA;&#xA;# don&#39;t forget to unmount&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Install Magisk using &lt;a href=&#34;https://raw.githubusercontent.com/sickcodes/dock-droid/master/rusty-magisk&#34;&gt;https://github.com/axonasif/rusty-magisk&lt;/a&gt; by &lt;a href=&#34;https://github.com/axonasif&#34;&gt;@axonasif&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;Inside the &lt;code&gt;ramdisk.img&lt;/code&gt;, we would like to overwrite &lt;code&gt;init&lt;/code&gt; with &lt;code&gt;rusty-magisk&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mkdir -p /tmp/ramdisk&#xA;&#xA;sudo /bin/bash -c &#34;&#xA;cd /tmp/ramdisk&#xA;zcat /tmp/image/bliss-x86-11.13/ramdisk.img | cpio -iud &amp;amp;&amp;amp; mv /tmp/ramdisk/init /tmp/ramdisk/init.real&#xA;&#xA;wget -O /tmp/ramdisk/init https://github.com/axonasif/rusty-magisk/releases/download/v0.1.7/rusty-magisk_x86_64 &#xA;&#xA;chmod a+x /tmp/ramdisk/init&#xA;touch /tmp/image/bliss-x86-11.13/ramdisk.img&#xA;/bin/bash -c &#39;find . | cpio -o -H newc | sudo gzip &amp;gt; /tmp/image/bliss-x86-11.13/ramdisk.img&#39;&#xA;&#34;&#xA;sudo rm -rf /tmp/ramdisk&#xA;# don&#39;t forget to unmount&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;During the next boot you will have Magisk installed.&lt;/p&gt; &#xA;&lt;h3&gt;Add secure ADB keys.&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# generate keys if you don&#39;t have already&#xA;KEYNAME=adbkey&#xA;adb keygen ~/.android/&#34;${KEYNAME}&#34;&#xA;touch ~/.android/&#34;${KEYNAME}.pub&#34;&#xA;adb pubkey ~/.android/&#34;${KEYNAME}&#34; &amp;gt; ~/.android/&#34;${KEYNAME}.pub&#34;&#xA;&#xA;# put some keys in the box and copy to your host ~/.android folder&#xA;mkdir -p /tmp/image/bliss-x86-11.13/data/.android&#xA;mkdir -p /tmp/image/bliss-x86-11.13/data/misc/adb&#xA;tee /tmp/image/bliss-x86-11.13/data/misc/adb/adb_keys &amp;lt; ~/.android/&#34;${KEYNAME}.pub&#34;&#xA;# don&#39;t forget to unmount&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Unmount when finished&lt;/h1&gt; &#xA;&lt;p&gt;After completing any of the above automation, you need to unmount the disk.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# sudo mount /tmp/image/bliss-x86-11.13/ramdisk.img /tmp/ramdisk&#xA;# unmount both disks when you&#39;re done&#xA;sudo umount /tmp/ramdisk&#xA;sudo umount /tmp/system&#xA;sudo umount /tmp/image&#xA;sudo qemu-nbd -d /dev/nbd0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Use Frida (latest)&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# choose a version from https://github.com/frida/frida/releases/&#xA;# use arm if you&#39;re debugging arm apps, via houdini or native bridge (ndk)&#xA;HOST_ARCH=x86_64&#xA;# HOST_ARCH=arm&#xA;GUEST_SYS=android&#xA;FRIDA_RELEASE=frida-server&#xA;&#xA;FRIDA_RELEASES=($(curl https://github.com/frida/frida/releases | grep -Po &#34;(?&amp;lt;=\&amp;lt;a\ href\=\&#34;)(\/frida\/frida\/releases\/download\/\d+\.\d.\d+\/${FRIDA_RELEASE}-\d+\.\d+.\d+-${GUEST_SYS}-${HOST_ARCH}.xz)(?=\&#34;\ )&#34;))&#xA;&#xA;RELEASE_LINK=&#34;https://github.com${FRIDA_RELEASES[0]}&#34;&#xA;# RELEASE_LINK=&#39;https://github.com/frida/frida/releases/download/15.0.8/frida-server-15.0.8-android-x86_64.xz&#39;&#xA;&#xA;&#xA;mkdir -p ./frida&#xA;cd ./frida&#xA;&#xA;wget &#34;${RELEASE_LINK}&#34;&#xA;unxz -d &#34;$(basename &#34;${RELEASE_LINK}&#34;)&#34;&#xA;find -name &#34;${FRIDA_RELEASE}-*.*.*-${GUEST_SYS}-${HOST_ARCH}&#34; | xargs -i mv &#34;{}&#34; frida-server&#xA;&#xA;adb -s localhost:5555 push frida-server /data/local/tmp/frida-server&#xA;adb -s localhost:5555 shell &#34;su -c chmod 755 /data/local/tmp/frida-server&#34;&#xA;adb -s localhost:5555 shell &#34;/data/local/tmp/frida-server&#34;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Misc Optimizations&lt;/h1&gt; &#xA;&lt;p&gt;Great list by &lt;a href=&#34;https://github.com/eladkarako&#34;&gt;@eladkarako&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gist.github.com/eladkarako/5694eada31277fdc75cee4043461372e&#34;&gt;https://gist.github.com/eladkarako/5694eada31277fdc75cee4043461372e&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Run adb/start adbd&lt;/h2&gt; &#xA;&lt;p&gt;Boot the container.&lt;/p&gt; &#xA;&lt;p&gt;Open &lt;code&gt;Terminal Emulator&lt;/code&gt; in the Android:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# on android&#xA;su&#xA;start adbd&#xA;&#xA;# setprop persist.adb.tcp.port 5555&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Connect to the virtual WiFi inside Android!&lt;/p&gt; &#xA;&lt;p&gt;Now, from the host, use the new key to &lt;code&gt;adb&lt;/code&gt; into the guest:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# on the host&#xA;export ADB_VENDOR_KEYS=~/.android/adbkey&#xA;adb kill-server&#xA;adb connect localhost&#xA;adb -s localhost:5555 root&#xA;adb -s localhost:5555 shell&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In the Android terminal emulator, run &lt;code&gt;adbd&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Then from the host, you can can connect using either: &lt;code&gt;adb connect localhost:5555&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;adb connect 172.17.0.2:5555&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you have more than &#34;one emulator&#34; you may have to use:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;adb -s localhost:5555 shell&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;adb -s 172.17.0.2:5555 shell&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;E.g.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;su&#xA;sed -i -e &#39;s/ro\.adb\.secure\=1/ro\.adb\.secure\=0/&#39; /default.prop&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In the Android terminal emulator, run &lt;code&gt;adbd&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Then from the host, you can can connect using either: &lt;code&gt;adb connect localhost:5555&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;adb connect 172.17.0.2:5555&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Professional support&lt;/h3&gt; &#xA;&lt;p&gt;For more sophisticated endeavours, we offer the following support services:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Enterprise support, business support, or casual support.&lt;/li&gt; &#xA; &lt;li&gt;Custom images, custom scripts, consulting (per hour available!)&lt;/li&gt; &#xA; &lt;li&gt;One-on-one conversations with you or your development team.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In case you&#39;re interested, contact &lt;a href=&#34;https://twitter.com/sickcodes&#34;&gt;@sickcodes on Twitter&lt;/a&gt; or submit a contact form &lt;a href=&#34;https://sick.codes/contact&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/sickcodes/dock-droid/master/bliss_os_installation_instructions_docker.gif?raw=true&#34; alt=&#34;How to Install Bliss OS&#34; title=&#34;How to Install Bliss OS&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License/Contributing&lt;/h2&gt; &#xA;&lt;p&gt;dock-droid is licensed under the &lt;a href=&#34;https://raw.githubusercontent.com/sickcodes/dock-droid/master/LICENSE&#34;&gt;GPL v3+&lt;/a&gt;, also known as the GPL v3 or later License. Contributions are welcomed and immensely appreciated.&lt;/p&gt; &#xA;&lt;p&gt;Don&#39;t be shy, &lt;a href=&#34;https://www.gnu.org/licenses/quick-guide-gplv3.html&#34;&gt;the GPLv3+&lt;/a&gt; allows you to use Dock-Droid as a tool to create proprietary software, as long as you follow any other license within the software.&lt;/p&gt; &#xA;&lt;h2&gt;Disclaimer&lt;/h2&gt; &#xA;&lt;p&gt;This is a Dockerized Android setup/tutorial for conducting Android Security Research.&lt;/p&gt; &#xA;&lt;p&gt;Product names, logos, brands and other trademarks referred to within this project are the property of their respective trademark holders. These trademark holders are not affiliated with our repository in any capacity. They do not sponsor or endorse this project in any way.&lt;/p&gt; &#xA;&lt;h3&gt;Other cool Docker/QEMU based projects&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sickcodes/Docker-OSX&#34;&gt;Run macOS in a Docker container with Docker-OSX&lt;/a&gt; - &lt;a href=&#34;https://github.com/sickcodes/Docker-OSX&#34;&gt;https://github.com/sickcodes/Docker-OSX&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sickcodes/Docker-eyeOS&#34;&gt;Run iOS in a Docker container with Docker-eyeOS&lt;/a&gt; - &lt;a href=&#34;https://github.com/sickcodes/Docker-eyeOS&#34;&gt;https://github.com/sickcodes/Docker-eyeOS&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Passthrough your WebCam to the Android container.&lt;/h1&gt; &#xA;&lt;p&gt;Identify your webcam:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;lsusb | grep -i cam&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;Bus 003 Device 003: ID 13d3:56a2 IMC Networks USB2.0 HD UVC WebCam&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Using &lt;code&gt;Bus&lt;/code&gt; and &lt;code&gt;Device&lt;/code&gt; as &lt;code&gt;hostbus&lt;/code&gt; and &lt;code&gt;hostaddr&lt;/code&gt;, include the following docker command:&lt;/p&gt; &#xA;&lt;h2&gt;VFIO Passthrough&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;Waiting for public &lt;code&gt;mesa&lt;/code&gt; builds: &lt;a href=&#34;https://blissos.org/&#34;&gt;https://blissos.org/&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;When these hardware accelerated images are released, you can follow the Issue opened by: &lt;a href=&#34;https://github.com/M1cha&#34;&gt;@M1cha&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/sickcodes/dock-droid/issues/2&#34;&gt;https://github.com/sickcodes/dock-droid/issues/2&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;the online documentation for that is very bad and mostly outdated(due to kernel and qemu updates). But here&#39;s some references that helped me set it up several times:&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://wiki.archlinux.org/title/PCI_passthrough_via_OVMF#Plain_QEMU_without_libvirt&#34;&gt;https://wiki.archlinux.org/title/PCI_passthrough_via_OVMF#Plain_QEMU_without_libvirt&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.kernel.org/doc/Documentation/vfio.txt&#34;&gt;https://www.kernel.org/doc/Documentation/vfio.txt&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;the general summary:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code&gt;* make sure your hardware supports VT-d/AMD-VI and UEFI and linux have it enabled&#xA;&#xA;* figure out which devices are in the same iommu group&#xA;&#xA;* detach all drivers from those devices&#xA;&#xA;* attach vfio-pci to those devices&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Add the following lines when you are ready:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;    --privileged \&#xA;    -e EXTRA=&#34;-device vfio-pci,host=04:00.0&#39; \&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;GPU Sharing&lt;/h2&gt; &#xA;&lt;p&gt;Work in progress&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&#xA;sudo tee -a /etc/libvirt/qemu.conf &amp;lt;&amp;lt;&#39;EOF&#39;&#xA;cgroup_device_acl = [&#xA;    &#34;/dev/null&#34;, &#34;/dev/full&#34;, &#34;/dev/zero&#34;,&#xA;    &#34;/dev/random&#34;, &#34;/dev/urandom&#34;,&#xA;    &#34;/dev/ptmx&#34;, &#34;/dev/kvm&#34;,&#xA;    &#34;/dev/vfio/vfio&#34;,&#xA;    &#34;/dev/dri/card0&#34;,&#xA;    &#34;/dev/dri/card1&#34;,&#xA;    &#34;/dev/dri/renderD128&#34;&#xA;]&#xA;EOF&#xA;&#xA;# --device /dev/video0 \&#xA;# --device /dev/video1 \&#xA;&#xA;grep &#34;video\|render&#34; /etc/group&#xA;&#xA;# render&lt;span&gt;â&lt;/span&gt;989:&#xA;# video&lt;span&gt;â&lt;/span&gt;986:sddm&#xA;&#xA;sudo usermod -aG video &#34;${USER}&#34;&#xA;&#xA;sudo systemctl restart libvirtd&#xA;&#xA;docker run -it \&#xA;    -v &#34;${PWD}/android.qcow2:/home/arch/dock-droid/android.qcow2&#34; \&#xA;    --privileged \&#xA;    --device /dev/kvm \&#xA;    --device /dev/video1 \&#xA;    -v /tmp/.X11-unix:/tmp/.X11-unix \&#xA;    -e &#34;DISPLAY=${DISPLAY:-:0.0}&#34; \&#xA;    -p 5555:5555 \&#xA;    -p 50922:10022 \&#xA;    --user 1000:1000 \&#xA;    --group-add=966 \&#xA;    --group-add=989 \&#xA;    --device /dev/dri/renderD128:/dev/dri/renderD128 \&#xA;    --device /dev/dri/card0:/dev/dri/card0 \&#xA;    --device /dev/dri/card1:/dev/dri/card1 \&#xA;    sickcodes/dock-droid:naked&#xA;&#xA;# pick which graphics card&#xA;# --device /dev/dri/card0:/dev/dri/card0 \&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Convert BlissOS Virtual Box to Dock-Droid&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;qemu-img convert -f vdi -O qcow2 BlissOS.vdi android.qcow2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Building a headless container to run remotely with secure VNC&lt;/h2&gt; &#xA;&lt;p&gt;Add the following line:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;-e EXTRA=&#34;-display none -vnc 0.0.0.0:99,password=on&#34;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;In the Docker terminal, press &lt;code&gt;enter&lt;/code&gt; until you see &lt;code&gt;(qemu)&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Type &lt;code&gt;change vnc password someusername&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Enter a password for your new vnc username^.&lt;/p&gt; &#xA;&lt;p&gt;You also need the container IP: &lt;code&gt;docker inspect &amp;lt;containerid&amp;gt; | jq -r &#39;.[0].NetworkSettings.IPAddress&#39;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Or &lt;code&gt;ip n&lt;/code&gt; will usually show the container IP first.&lt;/p&gt; &#xA;&lt;p&gt;Now VNC connect using the Docker container IP, for example &lt;code&gt;172.17.0.2:5999&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Remote VNC over SSH: &lt;code&gt;ssh -N root@1.1.1.1 -L 5999:172.17.0.2:5999&lt;/code&gt;, where &lt;code&gt;1.1.1.1&lt;/code&gt; is your remote server IP and &lt;code&gt;172.17.0.2&lt;/code&gt; is your LAN container IP.&lt;/p&gt; &#xA;&lt;p&gt;Now you can direct connect VNC to any container built with this command!&lt;/p&gt; &#xA;&lt;h1&gt;BlissOS Image Builder Using Platform Manifests&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;This requires 250GB of REAL space.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;This was previously at &lt;code&gt;./build&lt;/code&gt;, but due to Docker Hub using the wrong README.md file, I have added these instructions below:&lt;/p&gt; &#xA;&lt;p&gt;Make and add a non-root user&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&#xA;USERADD=user&#xA;useradd &#34;${USERADD}&#34; -p &#34;${USERADD}&#34;&#xA;tee -a /etc/sudoers &amp;lt;&amp;lt;&amp;lt; &#34;${USERADD} ALL=(ALL) NOPASSWD: ALL&#34;&#xA;mkdir -p &#34;/home/${USERADD}&#34;&#xA;chown &#34;${USERADD}:${USERADD}&#34; &#34;/home/${USERADD}&#34;&#xA;&#xA;# passwd user &amp;lt;&amp;lt;EOF&#xA;# 1000&#xA;# 1000&#xA;# EOF&#xA;&#xA;chsh -s /bin/bash &#34;${USERADD}&#34;&#xA;&#xA;usermod -aG docker &#34;${USERADD}&#34;&#xA;&#xA;su user&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&#xA;BUILD_DIRECTORY=/mnt/volume_nyc3_01&#xA;&#xA;# create a persistent folder on the host for building stuff&#xA;mkdir &#34;${BUILD_DIRECTORY}/blissos-r36&#34;&#xA;&#xA;cd &#34;${BUILD_DIRECTORY}/blissos-r36&#34;&#xA;&#xA;wget https://raw.githubusercontent.com/sickcodes/dock-droid/master/Dockerfile.build&#xA;&#xA;docker build -t blissos-builder .&#xA;&#xA;docker run -it \&#xA;    -e REVISION=r11-r36 \&#xA;    -e MANIFEST_REPO=https://github.com/BlissRoms-x86/manifest.git \&#xA;    -v &#34;${BUILD_DIRECTORY}/blissos-r36:/blissos-r36&#34; \&#xA;    blissos-builder&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>LinkedInLearning/training-neural-networks-in-python-3215347</title>
    <updated>2023-02-19T01:50:37Z</updated>
    <id>tag:github.com,2023-02-19:/LinkedInLearning/training-neural-networks-in-python-3215347</id>
    <link href="https://github.com/LinkedInLearning/training-neural-networks-in-python-3215347" rel="alternate"></link>
    <summary type="html">&lt;p&gt;This is a LinkedIn Learning repo for Training Neural Networks in Python.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Training Neural Networks in Python&lt;/h1&gt; &#xA;&lt;p&gt;This is the repository for the LinkedIn Learning course Training Neural Networks in Python. The full course is available from &lt;a href=&#34;https://www.linkedin.com/learning/training-neural-networks-in-python-17058600&#34;&gt;LinkedIn Learning&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://cdn.lynda.com/course/3215347/3215347-1667864479246-16x9.jpg&#34; alt=&#34;Training Neural Networks in Python &#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Having a variety of great tools at your disposal isnât helpful if you donât know which one you really need, what each tool is useful for, and how they all work. In this course learn the inner workings of neural networks, so that you&#39;re able to work more effectively with machine learning tools. Instructor Eduardo CorpeÃ±o helps you learn by example by providing a series of exercises in Python to help you to grasp whatâs going on inside. Discover how to relate parts of a biological neuron to Python elements, which allows you to make a model of the brain. Then, learn how to build and train a network, as well as create a neural network that recognizes numbers coming from a seven-segment display. Even though you&#39;ll probably work with neural networks from a software suite rather than by writing your own code, the knowledge youâll acquire in this course can help you choose the right neural network architecture and training method for each problem you face. &lt;br&gt;&lt;br&gt; This course is integrated with GitHub Codespaces, an instant cloud developer environment that offers all the functionality of your favorite IDE without the need for any local machine setup. With GitHub Codespaces, you can get hands-on practice from any machine, at any timeâall while using a tool that youâll likely encounter in the workplace. Check out the &lt;a href=&#34;https://www.linkedin.com/learning/training-neural-networks-in-python-17058600/using-github-codespaces-with-this-course&#34;&gt;Using GitHub Codespaces with this course&lt;/a&gt; video to learn how to get started.&lt;/p&gt; &#xA;&lt;h2&gt;Instructions&lt;/h2&gt; &#xA;&lt;p&gt;This repository has branches for each of the videos in the course. You can use the branch pop up menu in github to switch to a specific branch and take a look at the course at that stage, or you can add &lt;code&gt;/tree/BRANCH_NAME&lt;/code&gt; to the URL to go to the branch you want to access.&lt;/p&gt; &#xA;&lt;h2&gt;Branches&lt;/h2&gt; &#xA;&lt;p&gt;The branches are structured to correspond to the videos in the course. The naming convention is &lt;code&gt;CHAPTER#_MOVIE#&lt;/code&gt;. As an example, the branch named &lt;code&gt;02_03&lt;/code&gt; corresponds to the second chapter and the third video in that chapter. Some branches will have a beginning and an end state. These are marked with the letters &lt;code&gt;b&lt;/code&gt; for &#34;beginning&#34; and &lt;code&gt;e&lt;/code&gt; for &#34;end&#34;. The &lt;code&gt;b&lt;/code&gt; branch contains the code as it is at the beginning of the movie. The &lt;code&gt;e&lt;/code&gt; branch contains the code as it is at the end of the movie. The &lt;code&gt;main&lt;/code&gt; branch holds the final state of the code when in the course.&lt;/p&gt; &#xA;&lt;p&gt;When switching from one exercise files branch to the next after making changes to the files, you may get a message like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;error: Your local changes to the following files would be overwritten by checkout:        [files]&#xA;Please commit your changes or stash them before you switch branches.&#xA;Aborting&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To resolve this issue:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Add changes to git using this command: git add .&#xA;Commit changes using this command: git commit -m &#34;some message&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Instructor&lt;/h3&gt; &#xA;&lt;p&gt;Eduardo Corpeno&lt;/p&gt; &#xA;&lt;p&gt;Check out my other courses on &lt;a href=&#34;https://www.linkedin.com/learning/instructors/eduardo-corpeno?u=104&#34;&gt;LinkedIn Learning&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>TiendaNube/services-multi-inventory-mocks</title>
    <updated>2023-02-19T01:50:37Z</updated>
    <id>tag:github.com,2023-02-19:/TiendaNube/services-multi-inventory-mocks</id>
    <link href="https://github.com/TiendaNube/services-multi-inventory-mocks" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Description&lt;/h2&gt; &#xA;&lt;p&gt;HTTP server used for mocking Multi CD APIs.&lt;/p&gt; &#xA;&lt;p&gt;It can be used for development and for stress testing.&lt;/p&gt; &#xA;&lt;p&gt;Implemented using &lt;a href=&#34;https://wiremock.org/&#34;&gt;WireMock&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Running locally&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run -it --rm -p 3001:8080 --name wiremock -v $PWD:/home/wiremock wiremock/wiremock:2.35.0 -v --global-response-templating&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Fulfillment Orders API&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl --request GET --url http://localhost:3001/v1/123/orders/456/fulfillment-orders/ -H &#34;Authentication: Bearer ABC&#34;&#xA;curl --request GET --url http://localhost:3001/v1/123/orders/456/fulfillment-orders/123/ -H &#34;Authentication: Bearer ABC&#34;&#xA;curl --request DELETE --url http://localhost:3001/v1/123/orders/456/fulfillment-orders/123/ -H &#34;Authentication: Bearer ABC&#34;&#xA;curl --request POST --url http://localhost:3001/v1/123/orders/456/fulfillment-orders/ -H &#34;Authentication: Bearer ABC&#34; -H &#34;Content-Type: application/json&#34; -d &#39;&#xA;{&#xA;  &#34;location&#34;: {&#xA;    &#34;id&#34;: 01GRKDFX9QMNRBE3X5DAV21MGA&#xA;  },&#xA;  &#34;order&#34;: {&#xA;    &#34;id&#34;: 456&#xA;  },&#xA;  &#34;line_items&#34;: [&#xA;    {}&#xA;  ],&#xA;  &#34;recipient&#34;: {&#xA;    &#34;name&#34;: &#34;Recipient name&#34;&#xA;  },&#xA;  &#34;shipping&#34;: {&#xA;    &#34;type&#34;: &#34;ship&#34;&#xA;  },&#xA;  &#34;destination&#34;: {&#xA;    &#34;zipcode&#34;: &#34;12910802&#34;&#xA;  }&#xA;}&#xA;&#39;&#xA;curl --request PATCH --url http://localhost:3001/v1/123/orders/123/fulfillment-orders/01GRKDJKZ5RH81593CVGXWN2W5/ -H &#34;Authentication: Bearer ABC&#34; -H &#34;Content-Type: application/json&#34; -d &#39;&#xA;{&#xA;  &#34;status&#34;: &#34;FULFILLED&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Orders API&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl --request GET --url http://localhost:3001/v1/123/orders/456/ -H &#34;Authentication: Bearer ABC&#34;&#xA;curl --request GET --url http://localhost:3001/v1/123/orders/456/\?aggregates\=fulfillments -H &#34;Authentication: Bearer ABC&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To replicate real world performance it&#39;s possible to add delays to every call. For example, we could simulate a 250ms average response time using:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl --request POST \&#xA;  --url http://localhost:3001/__admin/settings \&#xA;  --header &#39;Content-Type: application/json&#39; \&#xA;  --data &#39;{    &#xA;&#x9;&#34;delayDistribution&#34;: {&#xA;  &#x9;&#34;type&#34;: &#34;lognormal&#34;,&#xA;    &#34;median&#34;: 250,&#xA;    &#34;sigma&#34;: 0.1&#xA;&#x9;}&#xA;}&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;p&gt;Add new mocks in &lt;code&gt;mappings&lt;/code&gt; folder. To avoid URL conflicts between different services, please include a prefix (i.e: &lt;code&gt;/dLocal/&lt;/code&gt;) in every URL.&lt;/p&gt; &#xA;&lt;h2&gt;Build&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker build . -t multicd-mocks&#xA;docker run --rm -p 3001:8080 multicd-mocks&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>