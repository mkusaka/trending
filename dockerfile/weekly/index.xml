<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dockerfile Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-01-12T01:38:58Z</updated>
  <subtitle>Weekly Trending of Dockerfile in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>AndreRH/hangover</title>
    <updated>2025-01-12T01:38:58Z</updated>
    <id>tag:github.com,2025-01-12:/AndreRH/hangover</id>
    <link href="https://github.com/AndreRH/hangover" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Hangover runs simple Win64 and Win32 applications on arm64 Linux&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/github/stars/AndreRH/hangover?style=flat-square&#34; alt=&#34;stars&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/forks/AndreRH/hangover?style=flat-square&#34; alt=&#34;forks&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/v/release/AndreRH/hangover?style=flat-square&#34; alt=&#34;Release&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Make sure to leave a &lt;span&gt;⭐&lt;/span&gt; :)&lt;/p&gt; &#xA;&lt;h2&gt;Hangover&lt;/h2&gt; &#xA;&lt;p&gt;This is Hangover, a project started by André Zwing and Stefan Dösinger in 2016 that can run x86_64 and x86_32 Windows applications on aarch64 Wine.&lt;/p&gt; &#xA;&lt;h3&gt;How it works&lt;/h3&gt; &#xA;&lt;p&gt;Hangover uses various emulators as DLLs (pick one that suits your needs, e.g. works for you) to only emulate the application you want to run instead of emulating a complete Wine installation.&lt;/p&gt; &#xA;&lt;p&gt;As soon as the application does a Windows/Wine system call, say NtUserCreateWindowEx, it&#39;s executed outside the emulator (read non-emulated, fast, native). Even better, everything Unix related is never emulated.&lt;/p&gt; &#xA;&lt;p&gt;In short, we break out of emulation at the win32 syscall or wine unix call level for performance reasons, which is enabled by the WoW64 support in Wine.&lt;/p&gt; &#xA;&lt;p&gt;For 64-Bit we&#39;re using the ARM64EC ABI combined with an emulator (FEX).&lt;/p&gt; &#xA;&lt;h3&gt;Benchmarks&lt;/h3&gt; &#xA;&lt;p&gt;For Benchmarks see &lt;a href=&#34;https://raw.githubusercontent.com/AndreRH/hangover/master/benchmarks/readme.md&#34;&gt;here&lt;/a&gt;. They show that the Hangover approach works as expected, as only emulating the application instead of a complete Wine installation has benefits. It&#39;s especially visible with box64cpu vs. Wine running under Box64.&lt;/p&gt; &#xA;&lt;h3&gt;Interesting Branches&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/AndreRH/hangover/tree/riscv64&#34;&gt;RISC-V 64-bit Linux support&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/AndreRH/hangover/tree/wow&#34;&gt;Hangover-WOW64&lt;/a&gt; (Hangover 0.8.1 - 9.19)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/AndreRH/hangover/tree/hangover-classic&#34;&gt;Hangover-Classic&lt;/a&gt; (Hangover 0.4.0 - 0.6.5)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Status&lt;/h3&gt; &#xA;&lt;p&gt;Current main focus is to run x86_64 and i386 Windows applications on ARM64 Linux, but it&#39;s also possible to run ARM32 Windows applications on x86_64 Linux.&lt;/p&gt; &#xA;&lt;p&gt;PPC64le isn&#39;t supported anymore and won&#39;t be added back in the near future. If you need that feature, have a look at older releases before 0.8.x.&lt;/p&gt; &#xA;&lt;p&gt;Emulator integrations:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gitlab.com/qemu-project/qemu&#34;&gt;QEMU&lt;/a&gt;: Has the most issues and is by far the &lt;a href=&#34;https://github.com/AndreRH/hangover/tree/master/benchmarks&#34;&gt;slowest&lt;/a&gt; option&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/FEX-Emu/FEX&#34;&gt;FEX&lt;/a&gt;: Upstream PE version plus some conveniences&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ptitSeb/box64/&#34;&gt;Box64&lt;/a&gt;: Mostly done&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jart/blink&#34;&gt;Blink&lt;/a&gt;: started, not part of this repository yet&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Discord&lt;/h3&gt; &#xA;&lt;p&gt;A Discord Server is available for contributors and previous financial supporters (see &#34;Financial Contributiors&#34; below). It provides advanced user support, development discussions and more.&lt;/p&gt; &#xA;&lt;h3&gt;Packages&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Debian&lt;/strong&gt; 11 &amp;amp; 12 &amp;amp; 13 (also usable for Raspbian, Armbian, ...) and &lt;strong&gt;Ubuntu&lt;/strong&gt; 20.04 &amp;amp; 22.04 &amp;amp; 24.04 &amp;amp; 24.10 are attached to the Github Release.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Termux&lt;/strong&gt; packages can be found in the &lt;a href=&#34;https://github.com/termux-user-repository/tur&#34;&gt;Termux User Repository&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Alpine&lt;/strong&gt; package can be found in the &lt;a href=&#34;https://gitlab.alpinelinux.org/alpine/aports/-/tree/master/testing/hangover-wine&#34;&gt;Alpine Testing Repository&lt;/a&gt;. It&#39;s only hangover-wine without box64cpu.dll for now, but you can copy over box64cpu.dll and/or libwow64fex.dll from extracted debian packages or compile them yourself.&lt;/p&gt; &#xA;&lt;h3&gt;How to build&lt;/h3&gt; &#xA;&lt;p&gt;For build instructions see &lt;a href=&#34;https://raw.githubusercontent.com/AndreRH/hangover/master/docs/COMPILE.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Running&lt;/h3&gt; &#xA;&lt;p&gt;You can add the following environment variables:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;HODLL64 to select the 64-bit emulator dll: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;libarm64ecfex.dll for x86_64 emulation (FEX)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;HODLL to select the 32-bit emulator dll: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;wow64cpu.dll for &#34;native&#34; i386 mode on x86_64&lt;/li&gt; &#xA;   &lt;li&gt;wowarmhw.dll for ARM emulation (Qemu)&lt;/li&gt; &#xA;   &lt;li&gt;xtajit.dll for i386 emulation (Qemu)&lt;/li&gt; &#xA;   &lt;li&gt;libwow64fex.dll for i386 emulation (FEX)&lt;/li&gt; &#xA;   &lt;li&gt;box64cpu.dll for i386 emulation (Box64)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;HOLIB to set full path of the library, e.g. HOLIB=/path/to/libqemu-i386.so&lt;/li&gt; &#xA; &lt;li&gt;QEMU_LOG to set QEMU log channels, find some options &lt;a href=&#34;https://github.com/AndreRH/qemu/raw/v5.2.0/util/log.c#L297&#34;&gt;here.&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;FEX&lt;/h4&gt; &#xA;&lt;p&gt;libarm64ecfex.dll currently is the default for x86_64 emulation, so it&#39;s simply:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ wine your_x86_64_application.exe&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;libwow64fex.dll is not the default for i386 emulation, so you need:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ HODLL=libwow64fex.dll wine your_x86_application.exe&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Box64&lt;/h4&gt; &#xA;&lt;p&gt;box64cpu.dll currently is the default for i386 emulation, so it&#39;s simply:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ wine your_x86_application.exe&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you have issues with the default, please try one of the other emulators below.&lt;/p&gt; &#xA;&lt;h4&gt;QEMU&lt;/h4&gt; &#xA;&lt;p&gt;Until the critical section issue is solved it is highly recomended to limit execution to 1 core with &#34;taskset -c 1&#34; for Qemu emulation:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ HODLL=xtajit.dll   taskset -c 1 wine your_x86_application.exe&#xA;$ HODLL=wowarmhw.dll taskset -c 1 wine your_arm_application.exe&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Enabling Wayland&lt;/h4&gt; &#xA;&lt;p&gt;Wayland isn&#39;t used by default or automatically, but if you want to use it instead of X11 do:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ wine reg.exe add HKCU\\Software\\Wine\\Drivers /v Graphics /d wayland,x11&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;DXVK&lt;/h4&gt; &#xA;&lt;p&gt;Copy the x32 binaries to $WINEPREFIX/drive_c/windows/syswow64&lt;/p&gt; &#xA;&lt;p&gt;Copy the arm64ec, aarch64 or x64 binaries to $WINEPREFIX/drive_c/windows/system32, depending on your use case. For x86_64 applications first try arm64ec, it should perform best. In case it doesn&#39;t work, try x64. For aarch64 applications use aarch64. Then open &lt;code&gt;winecfg&lt;/code&gt;, switch to the Libraries tab and add &lt;code&gt;native&lt;/code&gt; DLL overrides for &lt;code&gt;d3d8&lt;/code&gt;, &lt;code&gt;d3d9&lt;/code&gt;, &lt;code&gt;d3d10core&lt;/code&gt;, &lt;code&gt;d3d11&lt;/code&gt; and &lt;code&gt;dxgi&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Note that DXVK requires a Vulkan 1.3 driver with certain features and that might not be the case for a lot of ARM64 hardware.&lt;/p&gt; &#xA;&lt;h3&gt;Known issues&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;QEMU: CriticalSection doesn&#39;t work reliably and other instabilities&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Financial Contributors&lt;/h3&gt; &#xA;&lt;p&gt;I have decided to end my activities on Patreon and other platforms. It won&#39;t be the end of the project, my plan is to keep working on it, delivering new releases and updates. However, I will probably invest less time, except for the RISC-V port.&lt;/p&gt;</summary>
  </entry>
</feed>