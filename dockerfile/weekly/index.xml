<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dockerfile Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-04-23T01:52:15Z</updated>
  <subtitle>Weekly Trending of Dockerfile in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>render-examples/mysql</title>
    <updated>2023-04-23T01:52:15Z</updated>
    <id>tag:github.com,2023-04-23:/render-examples/mysql</id>
    <link href="https://github.com/render-examples/mysql" rel="alternate"></link>
    <summary type="html">&lt;p&gt;MySQL 8.0 and 5.7 on Render&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;MySQL on Render&lt;/h1&gt; &#xA;&lt;p&gt;This is a template repository for running &lt;a href=&#34;https://www.mysql.com&#34;&gt;MySQL&lt;/a&gt; on Render.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;It uses the &lt;a href=&#34;https://hub.docker.com/r/mysql/mysql-server&#34;&gt;official&lt;/a&gt; MySQL Docker image.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://render.com/docs/disks&#34;&gt;Render Disks&lt;/a&gt; provide fast, persistent SSD storage for your database.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;MySQL runs in your &lt;a href=&#34;https://render.com/docs/private-services&#34;&gt;private network&lt;/a&gt; and isn&#39;t exposed to the public Internet.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;MySQL Versions&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;master&lt;/code&gt; branch runs MySQL 8. You can use the &lt;code&gt;mysql-5&lt;/code&gt; branch to run MySQL 5 instead.&lt;/p&gt; &#xA;&lt;h2&gt;Deployment&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://render.com/deploy?repo=https://github.com/render-examples/mysql&#34;&gt;&lt;img src=&#34;https://render.com/images/deploy-to-render-button.svg?sanitize=true&#34; alt=&#34;Deploy to Render&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://render.com/docs/deploy-mysql&#34;&gt;https://render.com/docs/deploy-mysql&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>RocketChat/Docker.Official.Image</title>
    <updated>2023-04-23T01:52:15Z</updated>
    <id>tag:github.com,2023-04-23:/RocketChat/Docker.Official.Image</id>
    <link href="https://github.com/RocketChat/Docker.Official.Image" rel="alternate"></link>
    <summary type="html">&lt;p&gt;OFFICIAL REPOSITORY rocket.chat&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Rocket.Chat&lt;/h1&gt; &#xA;&lt;p&gt;Rocket.Chat is a Web Chat Server, developed in JavaScript, using the Meteor fullstack framework.&lt;/p&gt; &#xA;&lt;p&gt;It is a great solution for communities and companies wanting to privately host their own chat service or for developers looking forward to build and evolve their own chat platforms.&lt;/p&gt; &#xA;&lt;p&gt;%%LOGO%%&lt;/p&gt; &#xA;&lt;h1&gt;How to use this image&lt;/h1&gt; &#xA;&lt;h3&gt;Docker Compose&lt;/h3&gt; &#xA;&lt;p&gt;If you need both the mongo and Rocket.Chat containers, use a docker compose one-liner:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker-compose up -d&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Which will run both containers, with Rocket.Chat listening on &lt;a href=&#34;http://localhost:3000&#34;&gt;http://localhost:3000&lt;/a&gt; Then, access it via &lt;code&gt;http://localhost:3000&lt;/code&gt; in a browser. Replace &lt;code&gt;localhost&lt;/code&gt; in &lt;code&gt;ROOT_URL&lt;/code&gt; with your own domain name if you are hosting at your own domain.&lt;/p&gt; &#xA;&lt;p&gt;Stop the containers with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker compose down&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Individual containers&lt;/h3&gt; &#xA;&lt;p&gt;First, start an instance of mongo:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run --name db -d mongo:4.0 mongod --smallfiles&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then start Rocket.Chat linked to this mongo instance:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run --name rocketchat --link db:db -d rocket.chat&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will start a Rocket.Chat instance listening on the default Meteor port of 3000 on the container.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;d like to be able to access the instance directly at standard port on the host machine:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run --name rocketchat -p 80:3000 --env ROOT_URL=http://localhost --link db:db -d rocket.chat&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, access it via &lt;code&gt;http://localhost&lt;/code&gt; in a browser. Replace &lt;code&gt;localhost&lt;/code&gt; in &lt;code&gt;ROOT_URL&lt;/code&gt; with your own domain name if you are hosting at your own domain.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re using a third party Mongo provider, or working with Kubernetes, you need to override the &lt;code&gt;MONGO_URL&lt;/code&gt; environment variable:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run --name rocketchat -p 80:3000 --env ROOT_URL=http://localhost --env MONGO_URL=mongodb://mymongourl/mydb -d rocket.chat&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>pagopa/opex-dashboard-azure-action</title>
    <updated>2023-04-23T01:52:15Z</updated>
    <id>tag:github.com,2023-04-23:/pagopa/opex-dashboard-azure-action</id>
    <link href="https://github.com/pagopa/opex-dashboard-azure-action" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;OpEx Dashboard Azure action&lt;/h1&gt; &#xA;&lt;p&gt;This action generate a template with &lt;a href=&#34;https://github.com/pagopa/opex-dashboard&#34;&gt;OpEx Dashboard tool&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Inputs&lt;/h2&gt; &#xA;&lt;h2&gt;&lt;code&gt;config&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Required&lt;/strong&gt; The path to the configuration file.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;code&gt;api-name&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Required&lt;/strong&gt; Api name&lt;/p&gt; &#xA;&lt;h2&gt;&lt;code&gt;environment&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Required&lt;/strong&gt; Azure environment&lt;/p&gt; &#xA;&lt;h2&gt;&lt;code&gt;client-id&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Required&lt;/strong&gt; Azure client-id&lt;/p&gt; &#xA;&lt;h2&gt;&lt;code&gt;tenant-id&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Required&lt;/strong&gt; Azure tenant-id&lt;/p&gt; &#xA;&lt;h2&gt;&lt;code&gt;subscription-id&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Required&lt;/strong&gt; Azure subscription-id&lt;/p&gt; &#xA;&lt;h2&gt;&lt;code&gt;docker-version&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Required&lt;/strong&gt; docker sha version from &lt;a href=&#34;https://github.com/pagopa/opex-dashboard-azure-action/pkgs/container/opex-dashboard-azure-action&#34;&gt;https://github.com/pagopa/opex-dashboard-azure-action/pkgs/container/opex-dashboard-azure-action&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Outputs&lt;/h2&gt; &#xA;&lt;p&gt;None.&lt;/p&gt; &#xA;&lt;h2&gt;Example usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;      # from https://github.com/pagopa/opex-dashboard-azure-action/&#xA;      - uses: pagopa/opex-dashboard-azure-action@v1.0.3&#xA;        with:&#xA;          environment: ${{ matrix.environment }}&#xA;          api-name: ${{ env.API_NAME }}&#xA;          config: .opex/${{ env.API_NAME }}/env/${{ matrix.environment }}/config.yaml&#xA;          client-id: ${{ env.CLIENT_ID }}&#xA;          tenant-id: ${{ env.TENANT_ID }}&#xA;          subscription-id: ${{ env.SUBSCRIPTION_ID }}&#xA;          # from https://github.com/pagopa/opex-dashboard-azure-action/pkgs/container/opex-dashboard-azure-action&#xA;          docker-version: sha256:d9465f04e469c8f65bb1fb21cb9688508c64fda75495f552e858fb5a9580be90&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See a &lt;a href=&#34;https://raw.githubusercontent.com/pagopa/opex-dashboard-azure-action/main/.github/workflows/reflect.yml&#34;&gt;complete example&lt;/a&gt; in this repository.&lt;/p&gt; &#xA;&lt;h2&gt;Features that may be useful for this project&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/orgs/community/discussions/25241&#34;&gt;Build args support in Docker container actions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/actions/runner/issues/1282&#34;&gt;Docker actions create files and directories with root:root ownership, breaking later steps&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.github.com/en/actions/using-jobs/running-jobs-in-a-container&#34;&gt;Running jobs in a container&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>