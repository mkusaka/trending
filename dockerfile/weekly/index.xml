<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dockerfile Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-09-03T01:48:28Z</updated>
  <subtitle>Weekly Trending of Dockerfile in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>BretFisher/php-docker-good-defaults</title>
    <updated>2023-09-03T01:48:28Z</updated>
    <id>tag:github.com,2023-09-03:/BretFisher/php-docker-good-defaults</id>
    <link href="https://github.com/BretFisher/php-docker-good-defaults" rel="alternate"></link>
    <summary type="html">&lt;p&gt;*WORK IN PROGRESS* sample PHP/Laravel app for Docker examples&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;PHP (Laravel) + Docker Hello World, for Showing Good Defaults for Using A PHP Stack in Docker&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;This tries to be a &#34;good defaults&#34; example of using PHP, Nginx, PHP-FPM, Laravel, and Composer in Docker for local development and shipping to production with all the bells, whistles, and best practices. Issues/PR welcome.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; This is not a full PHP sample project. It&#39;s a collection of the Docker and Nginx related things you&#39;ll need to have this sort of setup fully in Docker. I&#39;m not a PHP/Laravel developer, but rather an ops guy working with many smart PHP dev&#39;s. I continue to refine this repo as I work with teams to dev with, test on, and deploy production containers on PHP.&lt;/p&gt; &#xA;&lt;p&gt;Also Note &lt;a href=&#34;https://www.bretfisher.com/docker&#34;&gt;I have courses on Docker, Swarm, and upcoming Docker for Node.js here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Official Laravel Docker Environment&lt;/h3&gt; &#xA;&lt;p&gt;As of version 8 of Laravel there is an offically supported Docker development environment called &#39;Sail&#39;. If you are specifically doing Laravel development you may want to check it out at &lt;a href=&#34;https://laravel.com/docs/sail&#34;&gt;the Laravel website&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Contribuitions&lt;/h3&gt; &#xA;&lt;p&gt;This project was made possible in part with support and development from &lt;a href=&#34;https://www.printerlogic.com/&#34;&gt;PrinterLogic&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Local Development Features&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Dev as close to prod as you can&lt;/strong&gt;. docker-compose builds a local development image that is just like production image except for the below dev-only features needed in image. Goal is to have dev env be as close to test and prod as possible while still giving all the nice tools to make you a happy dev.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Prevent needing node/npm on host&lt;/strong&gt;. Installs &lt;code&gt;node_modules&lt;/code&gt; outside app root in container so local development won&#39;t run into a problem of bind-mounting over it with local source code. This means it will run &lt;code&gt;npm install&lt;/code&gt; once on container build and you don&#39;t need to run npm on host or on each docker run. It will re-run on build if you change &lt;code&gt;package.json&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;One line startup&lt;/strong&gt;. Uses &lt;code&gt;docker-compose up&lt;/code&gt; for single-line build and run of local development server.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Edit locally while code runs in container&lt;/strong&gt;. docker-compose uses proper bind-mounts of host source code into container so you can edit locally while running code in Linux container.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Enable debug from host to container&lt;/strong&gt;. opens the legacy debug port 5858 and new inspect port 9229 for using host-based debugging like chrome tools or VS Code. Nodemon enables &lt;code&gt;--inspect&lt;/code&gt; by default in docker-compose, but you can change to &lt;code&gt;--debug&lt;/code&gt; for &amp;lt; 6.3 debugging.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Quick re-builds&lt;/strong&gt;. &lt;code&gt;COPY&lt;/code&gt; in &lt;code&gt;package.json&lt;/code&gt; and run &lt;code&gt;npm install &amp;amp;&amp;amp; npm cache clean&lt;/code&gt; &lt;strong&gt;before&lt;/strong&gt; &lt;code&gt;COPY&lt;/code&gt; in your source code. This saves big on build time and keep container lean. Same for Composer and Bower.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Production-minded Features&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Use Docker build-in healthchecks&lt;/strong&gt;. uses Dockerfile &lt;code&gt;HEALTHCHECK&lt;/code&gt; with php-fpm &lt;code&gt;/ping&lt;/code&gt; route to help Docker know if your container is running properly.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Nginx + PHP-FPM in one container&lt;/strong&gt;. Supervisor is used to combine the two services, Nginx and PHP-FPM in a single container. Those two services have to work together to give you a webserver and PHP processor. Unlike Apache + mod_php, which runs under the Apache process and only needs to start one process on container startup, the combo of Nginx + PHP-FPM have to be started separately. Docker is designed to run a single process with CMD in the Dockerfile, so the simple Supervisor program is used to manage them with a simple config file. Having them both in one container makes the app easier to manage in my real-world experience. &lt;a href=&#34;https://docs.docker.com/engine/admin/multi-service_container/&#34;&gt;Docker has a Docs page on various ways to start multi-service containers&lt;/a&gt;, showing a Supervisor example. So far, the Nginx + PHP-FPM combo is the &lt;em&gt;only&lt;/em&gt; scenario that I recommend using multi-service containers for. It&#39;s a rather unique problem that doesn&#39;t always fit well in the model of &#34;one container, one service&#34;. You &lt;em&gt;could&lt;/em&gt; use two separate containers, one with &lt;code&gt;nginx&lt;/code&gt; and one with &lt;code&gt;php:fpm&lt;/code&gt; but I&#39;ve tried that in production, and there are lots of downsides. A copy of the PHP code has to be in each container, they have to communicate over TCP which is much slower than Linux sockets used in a single container, and since you usually have a 1-to-1 relationship between them, the argument of individual service control is rather moot.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Assumptions&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You have Docker and Docker-Compose installed (Docker for Mac, Docker for Windows, get.docker.com and manual Compose installed for Linux).&lt;/li&gt; &#xA; &lt;li&gt;You want to use Docker for local development (i.e. never need to install php or npm on host) and have dev and prod Docker images be as close as possible.&lt;/li&gt; &#xA; &lt;li&gt;You don&#39;t want to lose fidelity in your dev workflow. You want a easy environment setup, using local editors, debug/inspect, local code repo, while web server runs in a container.&lt;/li&gt; &#xA; &lt;li&gt;You use &lt;code&gt;docker-compose&lt;/code&gt; for local development only (docker-compose was never intended to be a production deployment tool anyway).&lt;/li&gt; &#xA; &lt;li&gt;The &lt;code&gt;docker-compose.yml&lt;/code&gt; is not meant for &lt;code&gt;docker stack deploy&lt;/code&gt; in Docker Swarm, it&#39;s meant for happy local development.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Getting Started&lt;/h3&gt; &#xA;&lt;p&gt;If this was your app, to start local development you would:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Running &lt;code&gt;docker-compose up&lt;/code&gt; is all you need. It will:&lt;/li&gt; &#xA; &lt;li&gt;Build custom local image enabled for development.&lt;/li&gt; &#xA; &lt;li&gt;Start container from that image with ports 80, 443, 9000, and 9001 open (on localhost or docker-machine).&lt;/li&gt; &#xA; &lt;li&gt;Mount the pwd to the app dir in container.&lt;/li&gt; &#xA; &lt;li&gt;If you need other services like databases, just add to compose file and they&#39;ll be added to the custom Docker network for this app on &lt;code&gt;up&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;If you need to add packages to Composer, npm, bower, etc. then stop docker-compose and run &lt;code&gt;docker-compose up --build&lt;/code&gt; to ensure image is updated.&lt;/li&gt; &#xA; &lt;li&gt;Be sure to use &lt;code&gt;docker-compose down&lt;/code&gt; to cleanup after your done dev&#39;ing.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;MIT License,&lt;/p&gt; &#xA;&lt;p&gt;Copyright (c) Bret Fisher&lt;/p&gt; &#xA;&lt;p&gt;Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the &#34;Software&#34;), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:&lt;/p&gt; &#xA;&lt;p&gt;The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.&lt;/p&gt; &#xA;&lt;p&gt;THE SOFTWARE IS PROVIDED &#34;AS IS&#34;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>linuxserver/docker-mods</title>
    <updated>2023-09-03T01:48:28Z</updated>
    <id>tag:github.com,2023-09-03:/linuxserver/docker-mods</id>
    <link href="https://github.com/linuxserver/docker-mods" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Documentation and Examples of base container modifications&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Intro&lt;/h1&gt; &#xA;&lt;p&gt;The purpose of the repository is to provide examples and guidance in creating and storing a user consumable modification layer for the Library of Linuxserver.io Containers. At it&#39;s core a Docker Mod is a tarball of files stored on Dockerhub and/or GitHub Container Registry that is downloaded and extracted on container boot before any init logic is run. This allows:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Developers and community users to modify base containers to suit their needs without the need to maintain a fork of the main docker repository&lt;/li&gt; &#xA; &lt;li&gt;Mods to be shared with the Linuxserver.io userbase as individual independent projects with their own support channels and development ideologies&lt;/li&gt; &#xA; &lt;li&gt;Zero cost hosting and build pipelines for these modifications leveraging GitHub Container Registry and Dockerhub&lt;/li&gt; &#xA; &lt;li&gt;Full custom configuration management layers for hooking containers into each other using environment variables contained in a compose file&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;It is important to note to end users of this system that there are not only extreme security implications to consuming files from souces outside of our control, but by leveraging community Mods you essentially lose direct support from the core LinuxServer team. Our first and foremost troubleshooting step will be to remove the &lt;code&gt;DOCKER_MODS&lt;/code&gt; environment variable when running into issues and replace the container with a clean LSIO one.&lt;/p&gt; &#xA;&lt;p&gt;Again, when pulling in logic from external sources practice caution and trust the sources/community you get them from.&lt;/p&gt; &#xA;&lt;h2&gt;LinuxServer.io Hosted Mods&lt;/h2&gt; &#xA;&lt;p&gt;We host and publish official Mods at the &lt;a href=&#34;https://github.com/orgs/linuxserver/packages/container/mods/versions&#34;&gt;linuxserver/mods&lt;/a&gt; endpoint as separate tags. Each tag is in the format of &lt;code&gt;&amp;lt;imagename&amp;gt;-&amp;lt;modname&amp;gt;&lt;/code&gt; for the latest versions, and &lt;code&gt;&amp;lt;imagename&amp;gt;-&amp;lt;modname&amp;gt;-&amp;lt;commitsha&amp;gt;&lt;/code&gt; for the specific versions.&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s a list of the official Mods we host: &lt;a href=&#34;https://mods.linuxserver.io/&#34;&gt;https://mods.linuxserver.io/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Using a Docker Mod&lt;/h2&gt; &#xA;&lt;p&gt;Before consuming a Docker Mod ensure that the source code for it is publicly posted along with it&#39;s build pipeline pushing to Dockerhub.&lt;/p&gt; &#xA;&lt;p&gt;Consumption of a Docker Mod is intended to be as user friendly as possible and can be achieved with the following environment variables being passed to the container:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;DOCKER_MODS- This can be a single endpoint &lt;code&gt;user/endpoint:tag&lt;/code&gt; or an array of endpoints separated by &lt;code&gt;|&lt;/code&gt; &lt;code&gt;user/endpoint:tag|user2/endpoint2:tag&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;RUN_BANNED_MODS- If this is set to any value you will bypass our centralized filter of banned Dockerhub users and run Mods regardless of a ban&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Full example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker create \&#xA;  --name=nzbget \&#xA;  -e DOCKER_MODS=taisun/nzbget-mod:latest \&#xA;  -e PUID=1000 \&#xA;  -e PGID=1000 \&#xA;  -e TZ=Europe/London \&#xA;  -p 6789:6789 \&#xA;  -v &amp;lt;path to data&amp;gt;:/config \&#xA;  -v &amp;lt;path/to/downloads&amp;gt;:/downloads \&#xA;  --restart unless-stopped \&#xA;  linuxserver/nzbget&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will spinup an nzbget container and apply the custom logic found in the following repository:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Taisun-Docker/Linuxserver-Mod-Demo&#34;&gt;https://github.com/Taisun-Docker/Linuxserver-Mod-Demo&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This basic demo installs Pip and a couple dependencies for plugins some users leverage with nzbget.&lt;/p&gt; &#xA;&lt;h2&gt;Creating and maintaining a Docker Mod&lt;/h2&gt; &#xA;&lt;p&gt;We will always recommend to our users consuming Mods that they leverage ones from active community members or projects so transparency is key here. We understand that image layers can be pushed on the back end behind these pipelines, but every little bit helps. In this repository we will be going over two basic methods of making a Mod along with an example of the GitHub Actions build logic to get this into a Dockerhub and/or GitHub Container Registry endpoint. Though we are not officially endorsing GitHub Actions here it is built in to GitHub repositories and forks making it very easy to get started. If you prefer others feel free to use them as long as build jobs are transparent.&lt;/p&gt; &#xA;&lt;p&gt;One of the core ideas to remember when creating a Mod is that it can only contain a single image layer, the examples below will show you how to add files standardly and how to run complex logic to assemble the files in a build layer to copy them over into this single layer.&lt;/p&gt; &#xA;&lt;h3&gt;Mod Types&lt;/h3&gt; &#xA;&lt;p&gt;We now only support s6 v3 mods. All currently supported Linuxserver base images are using s6 v3, however, older pinned images, forked versions, etc. may still be using v2. New mods will not work with older s6 v2 based images.&lt;/p&gt; &#xA;&lt;h3&gt;Docker Mod Simple - just add scripts&lt;/h3&gt; &#xA;&lt;p&gt;In this repository you will find the &lt;code&gt;Dockerfile&lt;/code&gt; containing:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Dockerfile&#34;&gt;FROM scratch&#xA;&#xA;# copy local files&#xA;COPY root/ /&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For most users this will suffice and anything in the root/ folder of the repository will be added to the end users Docker container / path.&lt;/p&gt; &#xA;&lt;h4&gt;New (v3) mods&lt;/h4&gt; &#xA;&lt;p&gt;The most common paths to leverage for Linuxserver images are as follows. Assuming a mod name of &lt;code&gt;universal-mymod&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;.&#xA;└── root&#xA;  ├── defaults                                -- Any default config files you need to copy as part of the mod can be placed here&#xA;  └── etc&#xA;    └── s6-overlay&#xA;      └── s6-rc.d&#xA;        ├── init-mods-end&#xA;        │  └── dependencies.d&#xA;        │     └── init-mod-universal-mymod    -- If your mod does not need to install packages it should be a dependency of init-mods-end&#xA;        ├── init-mods-package-install&#xA;        │  └── dependencies.d&#xA;        │     └── init-mod-universal-mymod    -- If your mod needs to install packages it should be a dependency of init-mods-package-install&#xA;        ├── init-mod-universal-mymod&#xA;        │  ├── dependencies.d&#xA;        │  │  └── init-mods&#xA;        │  ├── run                            -- This is the init logic script that runs before the services in the container. It needs to be `chmod +x`.&#xA;        │  ├── type                           -- This should contain the string `oneshot`.&#xA;        │  └── up                             -- This should contain the absolute path to `run` e.g. `/etc/s6-overlay/s6-rc.d/init-mod-universal-mymod/run`.&#xA;        ├── svc-mod-universal-mymod&#xA;        │  ├── dependencies.d&#xA;        │  │  └── init-services&#xA;        │  ├── run                            -- This is the script that runs in the foreground for persistent services. It needs to be `chmod +x`.&#xA;        │  └── type                           -- This should contain the string `longrun`.&#xA;        └── user&#xA;          └── contents.d&#xA;            ├── init-mod-universal-mymod&#xA;            └── svc-mod-universal-mymod&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: For &lt;code&gt;oneshot&lt;/code&gt; scripts you can alternatively omit the &lt;code&gt;run&lt;/code&gt; file entirely and use the &lt;a href=&#34;https://skarnet.org/software/execline/execlineb.html&#34;&gt;execlineb&lt;/a&gt; syntax in &lt;code&gt;up&lt;/code&gt; if your requirements are simple enough.&lt;/p&gt; &#xA;&lt;h4&gt;Installing Packages&lt;/h4&gt; &#xA;&lt;p&gt;v3 mods make use of a single package install process for all mods to minimise the amount of calls to external endpoints and speed up the mod init process. If you need to install repo packages you should append them to &lt;code&gt;/mod-repo-packages-to-install.list&lt;/code&gt; for repo packages or &lt;code&gt;/mod-pip-packages-to-install.list&lt;/code&gt; for pip packages and the mod handler will install them for you. Make sure to handle both Ubuntu and Alpine package names if your mod needs to support both e.g.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/usr/bin/with-contenv bash&#xA;&#xA;## Ubuntu&#xA;if [ -f /usr/bin/apt ]; then&#xA;    echo &#34;\&#xA;        dnsutils \&#xA;        net-tools \&#xA;        iputils-ping \&#xA;        traceroute&#34; &amp;gt;&amp;gt; /mod-repo-packages-to-install.list&#xA;&#xA;fi&#xA;# Alpine&#xA;if [ -f /sbin/apk ]; then&#xA;    echo &#34;\&#xA;        bind-tools \&#xA;        net-tools&#34; &amp;gt;&amp;gt; /mod-repo-packages-to-install.list&#xA;fi&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If your mod needs to take additional config steps &lt;em&gt;after&lt;/em&gt; the packages have been installed, add a second &lt;code&gt;oneshot&lt;/code&gt; script and make it depend on &lt;code&gt;init-mods-package-install&lt;/code&gt;, add it as a dependency of &lt;code&gt;init-mods-end&lt;/code&gt;, and add it to the content bundle e.g.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;.&#xA;└── root&#xA;  └── etc&#xA;    └── s6-overlay&#xA;      └── s6-rc.d&#xA;        ├── init-mods-end&#xA;        │  └── dependencies.d&#xA;        │     └── init-mod-universal-mymod-postinstall&#xA;        ├── init-mod-universal-mymod-postinstall&#xA;        │  ├── dependencies.d&#xA;        │  │  └── init-mods-package-install&#xA;        │  ├── run&#xA;        │  ├── type&#xA;        │  └── up&#xA;        └── user&#xA;          └── contents.d&#xA;            └── init-mod-universal-mymod-postinstall&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Services will always run last, controlled by their dependency on &lt;code&gt;init-services&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Docker Mod Complex - Sky is the limit&lt;/h3&gt; &#xA;&lt;p&gt;In this repository you will find the &lt;code&gt;Dockerfile.complex&lt;/code&gt; containing:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Dockerfile&#34;&gt;## Buildstage ##&#xA;FROM ghcr.io/linuxserver/baseimage-alpine:3.12 as buildstage&#xA;&#xA;RUN \&#xA;  echo &#34;**** install packages ****&#34; &amp;amp;&amp;amp; \&#xA;  apk add --no-cache \&#xA;    curl &amp;amp;&amp;amp; \&#xA;  echo &#34;**** grab rclone ****&#34; &amp;amp;&amp;amp; \&#xA;  mkdir -p /root-layer &amp;amp;&amp;amp; \&#xA;  curl -o \&#xA;    /root-layer/rclone.deb -L \&#xA;    &#34;https://downloads.rclone.org/v1.47.0/rclone-v1.47.0-linux-amd64.deb&#34;&#xA;&#xA;# copy local files&#xA;COPY root/ /root-layer/&#xA;&#xA;## Single layer deployed image ##&#xA;FROM scratch&#xA;&#xA;# Add files from buildstage&#xA;COPY --from=buildstage /root-layer/ /&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here we are leveraging a multi stage DockerFile to run custom logic and pull down an Rclone deb from the Internet to include in our image layer for distribution. Any amount of logic can be run in this build stage or even multiple build stages as long as the files in the end are combined into a single folder for the COPY command in the final output.&lt;/p&gt; &#xA;&lt;h2&gt;Getting a Mod to Dockerhub&lt;/h2&gt; &#xA;&lt;p&gt;To publish a Mod to DockerHub you will need the following accounts:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Github- &lt;a href=&#34;https://github.com/join&#34;&gt;https://github.com/join&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;DockerHub- &lt;a href=&#34;https://hub.docker.com/signup&#34;&gt;https://hub.docker.com/signup&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;We recommend using this repository as a template for your first Mod, so in this section we assume the code is finished and we will only concentrate on plugging into GitHub Actions/Dockerhub.&lt;/p&gt; &#xA;&lt;p&gt;The only code change you need to make to the build logic file &lt;code&gt;.github/workflows/BuildImage.yml&lt;/code&gt; will be to modify the ENDPOINT to your own image:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;  ENDPOINT: &#34;user/endpoint&#34;&#xA;  BRANCH: &#34;master&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;User is your Dockerhub user and endpoint is your own custom name (typically the name of the repository where your mod is). You do not need to create this endpoint beforehand, the build logic will push it and create it on first run.&lt;/p&gt; &#xA;&lt;p&gt;Head over to &lt;code&gt;https://github.com/user/endpoint/settings/secrets&lt;/code&gt; and click on &lt;code&gt;New secret&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Add &lt;code&gt;DOCKERUSER&lt;/code&gt; (your DockerHub username) and &lt;code&gt;DOCKERPASS&lt;/code&gt; (your DockerHub password or token).&lt;/p&gt; &#xA;&lt;p&gt;You can create a token by visiting &lt;a href=&#34;https://hub.docker.com/settings/security&#34;&gt;https://hub.docker.com/settings/security&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;GitHub Actions will trigger a build off of your repo when you commit. The image will be pushed to Dockerhub on success. This Dockerhub endpoint is the Mod variable you can use to customize your container now.&lt;/p&gt; &#xA;&lt;h2&gt;Getting a Mod to GitHub Container Registry&lt;/h2&gt; &#xA;&lt;p&gt;To publish a Mod to GitHub Container Registry you will need the following accounts:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Github- &lt;a href=&#34;https://github.com/join&#34;&gt;https://github.com/join&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;We recommend using this repository as a template for your first Mod, so in this section we assume the code is finished and we will only concentrate on plugging into GitHub Actions/GitHub Container Registry.&lt;/p&gt; &#xA;&lt;p&gt;The only code change you need to make to the build logic file &lt;code&gt;.github/workflows/BuildImage.yml&lt;/code&gt; will be to modify the ENDPOINT to your own image:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;  ENDPOINT: &#34;user/endpoint&#34;&#xA;  BRANCH: &#34;master&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;User is your GitHub user and endpoint is your own custom name (typically the name of the repository where your mod is). You do not need to create this endpoint beforehand, the build logic will push it and create it on first run.&lt;/p&gt; &#xA;&lt;p&gt;Head over to &lt;code&gt;https://github.com/user/endpoint/settings/secrets&lt;/code&gt; and click on &lt;code&gt;New secret&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Add &lt;code&gt;CR_USER&lt;/code&gt; (your GitHub username) and &lt;code&gt;CR_PAT&lt;/code&gt; (a personal access token with &lt;code&gt;read:packages&lt;/code&gt; and &lt;code&gt;write:packages&lt;/code&gt; scopes).&lt;/p&gt; &#xA;&lt;p&gt;You can create a personal access token by visiting &lt;a href=&#34;https://github.com/settings/tokens&#34;&gt;https://github.com/settings/tokens&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;GitHub Actions will trigger a build off of your repo when you commit. The image will be pushed to GitHub Container Registry on success. This GitHub Container Registry endpoint is the Mod variable you can use to customize your container now.&lt;/p&gt; &#xA;&lt;h2&gt;Submitting a PR for a Mod to be added to the official LinuxServer.io repo&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fork this repo, checkout the &lt;code&gt;template&lt;/code&gt; branch.&lt;/li&gt; &#xA; &lt;li&gt;Edit the &lt;code&gt;Dockerfile&lt;/code&gt; for the mod. &lt;code&gt;Dockerfile.complex&lt;/code&gt; is only an example and included for reference; it should be deleted when done.&lt;/li&gt; &#xA; &lt;li&gt;Inspect the &lt;code&gt;root&lt;/code&gt; folder contents. Edit, add and remove as necessary.&lt;/li&gt; &#xA; &lt;li&gt;After all init scripts and services are created, run &lt;code&gt;find ./ -path &#34;./.git&#34; -prune -o ( -name &#34;run&#34; -o -name &#34;finish&#34; -o -name &#34;check&#34; ) -not -perm -u=x,g=x,o=x -print -exec chmod +x {} +&lt;/code&gt; to fix permissions.&lt;/li&gt; &#xA; &lt;li&gt;Edit the readme with pertinent info.&lt;/li&gt; &#xA; &lt;li&gt;Finally edit the &lt;code&gt;.github/workflows/BuildImage.yml&lt;/code&gt;. Customize the vars for &lt;code&gt;BASEIMAGE&lt;/code&gt; and &lt;code&gt;MODNAME&lt;/code&gt;. Set the versioning logic if needed.&lt;/li&gt; &#xA; &lt;li&gt;Ask the team to create a new branch named &lt;code&gt;&amp;lt;baseimagename&amp;gt;-&amp;lt;modname&amp;gt;&lt;/code&gt; in this repo. Baseimage should be the name of the image the mod will be applied to. The new branch will be based on the &lt;a href=&#34;https://github.com/linuxserver/docker-mods/tree/template&#34;&gt;template branch&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Submit PR against the branch created by the team.&lt;/li&gt; &#xA; &lt;li&gt;Make sure that the commits in the PR are squashed.&lt;/li&gt; &#xA; &lt;li&gt;Also make sure that the commit and PR titles are in the format of &lt;code&gt;&amp;lt;imagename&amp;gt;: &amp;lt;modname&amp;gt; &amp;lt;very brief description like &#34;initial release&#34; or &#34;update&#34;&amp;gt;&lt;/code&gt;. Detailed description and further info should be provided in the body (ie. &lt;code&gt;code-server: python2 add python-pip&lt;/code&gt;).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Appendix&lt;/h2&gt; &#xA;&lt;h3&gt;Inspecting mods&lt;/h3&gt; &#xA;&lt;p&gt;To inspect the file contents of external Mods dive is a great CLI tool:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/wagoodman/dive&#34;&gt;https://github.com/wagoodman/dive&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Basic usage:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run --rm -it \&#xA;    -v /var/run/docker.sock:/var/run/docker.sock \&#xA;    wagoodman/dive:latest &amp;lt;Image Name&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>SuhailTechInfo/Secktor-bot</title>
    <updated>2023-09-03T01:48:28Z</updated>
    <id>tag:github.com,2023-09-03:/SuhailTechInfo/Secktor-bot</id>
    <link href="https://github.com/SuhailTechInfo/Secktor-bot" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt;❌ Repository Closed ❌ &lt;/h1&gt; &#xA;&lt;h3 align=&#34;center&#34;&gt;This repository is Depricated&lt;/h3&gt; &#xA;&lt;h1 align=&#34;center&#34;&gt; Deploy Suhail Md From &lt;a href=&#34;https://github.com/SuhailTechInfo/Suhail-Md&#34;&gt; Here. &lt;/a&gt; &lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a aria-label=&#34;Suhail_Md&#34; href=&#34;https://github.com/SuhailTechInfo/Suhail-Md&#34; target=&#34;_blank&#34;&gt; &lt;img alt=&#34;click me&#34; src=&#34;https://img.shields.io/badge/click me Suhail_md here-8A2BE2&#34; target=&#34;_blank&#34;&gt; &lt;/a&gt; &lt;a aria-label=&#34;Suhail Ser&#34; href=&#34;https://wa.me/923184474176&#34; target=&#34;_blank&#34;&gt; &lt;img alt=&#34;click me&#34; src=&#34;https://img.shields.io/badge/Suhail&#39;s Whatsapp-77A2BE3&#34; target=&#34;_blank&#34;&gt; &lt;/a&gt; &lt;a aria-label=&#34;Suhail_Md is free to use&#34; href=&#34;https://youtube.com/@suhailtechinfo&#34; target=&#34;_blank&#34;&gt; &lt;img alt=&#34;SuhailTechInfo Yt&#34; src=&#34;https://img.shields.io/youtube/channel/subscribers/UCU071AMRqcd5mfTdCgJFwPg&#34; target=&#34;_blank&#34;&gt; &lt;/a&gt; &lt;/p&gt;</summary>
  </entry>
</feed>