<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dockerfile Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-12-03T01:47:45Z</updated>
  <subtitle>Weekly Trending of Dockerfile in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>drum-grammer/docker-pro-2312</title>
    <updated>2023-12-03T01:47:45Z</updated>
    <id>tag:github.com,2023-12-03:/drum-grammer/docker-pro-2312</id>
    <link href="https://github.com/drum-grammer/docker-pro-2312" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Docker : 나만의 도커 이미지 만들기 부터, 클라우드 배포까지!&lt;/h1&gt; &#xA;&lt;p&gt;12월 원티드 프리 온보딩 챌린지 - docker 뽀개기&lt;/p&gt; &#xA;&lt;h2&gt;I. 사전 미션하는 법&lt;/h2&gt; &#xA;&lt;h3&gt;방법 1&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;해당 repository를 fork 하세요.&lt;/li&gt; &#xA; &lt;li&gt;아래 사전 미션 내용을 보고 답안을 마크다운 형식으로 작성하시고, &lt;code&gt;./mission/{nickName}&lt;/code&gt; 디렉토리 저장해주세요.&lt;/li&gt; &#xA; &lt;li&gt;로컬에서 작업한 커밋을 fork한 repository에 push 하세요.&lt;/li&gt; &#xA; &lt;li&gt;Pull Request를 생성하여, 사전 미션을 제출해주세요.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;방법 2&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;해당 repository를 clone 하세요:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone git@github.com:drum-grammer/docker-pro-wanted.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;별도의 브랜치를 생성하세요:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;git checkout -b my-branch-xx&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;아래 사전 미션 내용을 보고 답안을 마크다운 형식으로 작성하시고, &lt;code&gt;./mission/{nickName}&lt;/code&gt; 디렉토리 저장해주세요.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;해당 브랜치를 푸쉬해주세요.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;해당 레파지토리에 직접 푸쉬할 권한은 &lt;a href=&#34;https://github.com/drum-grammer/docker-pro-2312/issues/1&#34;&gt;Issues&lt;/a&gt;에 댓글로 아이디 남겨주시면 권한 부여해드립니다. 🙌&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;git push -u origin my-branch-xx&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;5&#34;&gt; &#xA; &lt;li&gt;Pull Request를 생성하여, 사전 미션을 제출해주세요.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;[공통] PR 생성 시, PR 화면 우측의 &lt;code&gt;Reviewers&lt;/code&gt;, &lt;code&gt;Assignees&lt;/code&gt;, &lt;code&gt;Labels&lt;/code&gt;를 아래와 같이 등록해주세요&lt;/h3&gt; &#xA;&lt;p&gt;✅ 지정하는 방법은 오른쪽의 톱니바퀴 아이콘을 클릭하시면 설정할 수 있습니다. &lt;br&gt; ⚙️ 만약 톱니바퀴 설정 아이콘이 보이지 않으면 권한 이슈이니 &lt;a href=&#34;https://github.com/drum-grammer/docker-pro-2312/issues/1&#34;&gt;Issues&lt;/a&gt;에 댓글로 아이디 남겨주시면 권한 부여 해드리겠습니다.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Reviewers: drum-grammer [멘토 계정]&lt;/li&gt; &#xA; &lt;li&gt;Assignees: 본인 계정&lt;/li&gt; &#xA; &lt;li&gt;Labels: 사전 미션 과제&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/drum-grammer/docker-pro-2312/assets/48014144/2b580a8b-8f6e-4448-9ea0-083d8544100c&#34; alt=&#34;PR 이미지&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;II. 사전 미션&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;컨테이너 기술이란 무엇입니까? (100자 이내로 요약)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;도커란 무엇입니까? (100자 이내로 요약)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;도커 파일, 도커 이미지, 도커 컨테이너의 개념은 무엇이고, 서로 어떤 관계입니까?&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[실전 미션] 도커 설치하기 (참조: &lt;a href=&#34;https://docs.docker.com/engine/install/&#34;&gt;도커 공식 설치 페이지&lt;/a&gt;)&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;아래 &lt;code&gt;도커 설치부터 실행 튜토리얼&lt;/code&gt;을 참조하여 도커를 설치하고, 도커 컨테이너를 실행한 화면을 캡쳐해서 Pull Request에 올리세요.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;III. 도커 설치부터 실행 튜토리얼&lt;/h2&gt; &#xA;&lt;h3&gt;도커 설치&lt;/h3&gt; &#xA;&lt;h4&gt;1. 도커 공식 웹사이트에서 &#34;&lt;a href=&#34;https://www.docker.com/get-started&#34;&gt;Get Started&lt;/a&gt;&#34;를 클릭합니다.&lt;/h4&gt; &#xA;&lt;h4&gt;2. OS에 맞는 설치 파일을 다운로드 받습니다.&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;MacOS의 경우 &#34;Download for Mac&#34;을 클릭합니다.&lt;/li&gt; &#xA; &lt;li&gt;Window 일 경우 &#34;Download for Windows&#34;를 클릭합니다.&lt;/li&gt; &#xA; &lt;li&gt;다운로드한 설치 파일을 실행합니다.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;도커 컨테이너 실행 시키기&lt;/h3&gt; &#xA;&lt;h4&gt;1. &lt;code&gt;나의 사전 미션 폴더&lt;/code&gt;를 만들고 해당 폴더로 이동합니다.&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cd path/to/docker-pro-wanted/mission&#xA;mkdir my-name&#xA;cd my-name&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;2. &#34;Hello, World!&#34;를 출력하는 도커 파일을 만듭니다.&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;vim Dockerfile&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;i&lt;/code&gt;를 눌러 편집모드로 전환 후 아래 내용을 작성합니다:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Dockerfile&#34;&gt;FROM alpine:latest&#xA;CMD [&#34;echo&#34;, &#34;Hello, World&#34;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;ESC&lt;/code&gt;를 눌러 명령모드로 전환 후, &lt;code&gt;:wq&lt;/code&gt; 입력, &lt;code&gt;enter&lt;/code&gt;키를 눌러 &lt;code&gt;Dockerfile&lt;/code&gt;을 생성합니다.&lt;/p&gt; &#xA;&lt;h4&gt;3. 도커 파일로 도커 이미지를 빌드합니다.&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker build -t hello-world .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(위 명령어의 의미는 &#34;현재 디렉토리에서 &lt;code&gt;Dockerfile&lt;/code&gt;을 읽어 도커 이미지를 만들고, 해당 이미지에 &lt;code&gt;hello-world&lt;/code&gt;라는 &lt;code&gt;tag&lt;/code&gt; 를 붙혀라&#34; 입니다.)&lt;/p&gt; &#xA;&lt;h4&gt;4. 빌드한 도커 이미지를 실행합니다.&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker run hello-world&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;이 명령어는 hello-world라는 이름의 도커 이미지를 실행시켜 &#34;Hello, World!&#34;를 출력합니다.&lt;/p&gt; &#xA;&lt;h2&gt;IV. 도커 커맨드 라인 명령어 정리&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.docker.com/engine/reference/run/&#34;&gt;공식 문서&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/drum-grammer/docker-pro-2312/main/lecture/1st/cli.md&#34;&gt;cheat sheet&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>Next-DAO/atomicals-electrumx-proxy-docker</title>
    <updated>2023-12-03T01:47:45Z</updated>
    <id>tag:github.com,2023-12-03:/Next-DAO/atomicals-electrumx-proxy-docker</id>
    <link href="https://github.com/Next-DAO/atomicals-electrumx-proxy-docker" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Atomicals RPC Server&lt;/h1&gt; &#xA;&lt;p&gt;Aim to provide a simple and easy way to run &lt;a href=&#34;https://github.com/atomicals/electrumx-proxy&#34;&gt;atomicals-electrumx-proxy&lt;/a&gt; server with &lt;a href=&#34;https://github.com/atomicals/atomicals-electrumx&#34;&gt;atomicals-electrumx&lt;/a&gt; service.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Next-DAO/atomicals-electrumx-proxy-docker/raw/main/README.zh-CN.md&#34;&gt;中文说明&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;h3&gt;1. Bitcoin Full Node with &lt;code&gt;txindex=1&lt;/code&gt; and enable rpc. A example of &lt;code&gt;bitcoin.conf&lt;/code&gt;:&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;server=1&#xA;txindex=1&#xA;&#xA;# genearate with [rpcauth.py](https://github.com/bitcoin/bitcoin/blob/master/share/rpcauth/rpcauth.py)&#xA;# equals to `rpcuser=nextdao` and `rpcpassword=nextdao`&#xA;rpcauth=nextdao:cca838b4b19bdc6093f4e0312550361c$213834a29e8488804946c196781059a7ee0ac2b48dbf896b4c6852060d9d83dd&#xA;&#xA;rpcallowip=127.0.0.1&#xA;rpcallowip=172.0.0.0/8&#xA;rpcallowip=192.168.0.0/16&#xA;&#xA;rpcbind=0.0.0.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;2. Install Docker with docker-compose.&lt;/h3&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;1. Download &lt;a href=&#34;https://github.com/Next-DAO/atomicals-electrumx-proxy-docker/raw/main/docker-compose.yml&#34;&gt;docker-compose.yml&lt;/a&gt; to a folder.&lt;/h3&gt; &#xA;&lt;p&gt;The folder&#39;s Disk should have at least &lt;strong&gt;100G&lt;/strong&gt; spaces.&lt;/p&gt; &#xA;&lt;p&gt;Edit &lt;code&gt;${IP:?}&lt;/code&gt; in &lt;code&gt;docker-compose.yml&lt;/code&gt; to your computer&#39;s ip address.&lt;/p&gt; &#xA;&lt;h3&gt;2. Run the RPC server:&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker-compose pull &amp;amp;&amp;amp; docker-compose up -d&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;the electrumx indexes stored in &lt;code&gt;./electrumx-data&lt;/code&gt; directory.&lt;/li&gt; &#xA; &lt;li&gt;use &lt;code&gt;docker-compose logs -f&lt;/code&gt; to check the logs.&lt;/li&gt; &#xA; &lt;li&gt;use &lt;code&gt;docker-compose down&lt;/code&gt; to stop the server.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;3. Used in &lt;a href=&#34;https://github.com/atomicals/atomicals-js&#34;&gt;atomicals-js&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Edit .env with &lt;code&gt;ELECTRUMX_PROXY_BASE_URL=http://localhost:8080/proxy&lt;/code&gt;, then use all commands as usual.&lt;/p&gt; &#xA;&lt;p&gt;If you run atomicals cli in anthoer host, change &lt;code&gt;localhost&lt;/code&gt; to the &lt;code&gt;ip&lt;/code&gt; of the &lt;code&gt;proxy&lt;/code&gt; server.&lt;/p&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;h3&gt;1. How to check if the server is ready?&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker-compose ps&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you see &lt;code&gt;electrumx&lt;/code&gt; is &lt;code&gt;healthy&lt;/code&gt;, then the server is ready.&lt;/p&gt; &#xA;&lt;h3&gt;2. Why &lt;code&gt;electrumx&lt;/code&gt; can&#39;t connect to &lt;code&gt;bitcoind&lt;/code&gt;?&lt;/h3&gt; &#xA;&lt;p&gt;Double check your &lt;code&gt;bitcoin.conf&lt;/code&gt; and &lt;code&gt;docker-compose.yml&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;If your &lt;code&gt;ip&lt;/code&gt; included in &lt;code&gt;rpcallowip&lt;/code&gt; of &lt;code&gt;bitcoin.conf&lt;/code&gt;?&lt;/li&gt; &#xA; &lt;li&gt;If &lt;code&gt;bitcoind&lt;/code&gt; listen on &lt;code&gt;8332&lt;/code&gt; port?&lt;/li&gt; &#xA; &lt;li&gt;If &lt;code&gt;bitcoind&lt;/code&gt; rpc username and password is correct?&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;3. Why the sync is so slow?&lt;/h3&gt; &#xA;&lt;p&gt;One guess is your disk is slow. You can try to use a SSD disk.&lt;/p&gt; &#xA;&lt;p&gt;I can&#39;t find any other reason. If you know, please tell me.&lt;/p&gt; &#xA;&lt;p&gt;Or you can download the &lt;code&gt;electrumx-data&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;magnet:?xt=urn:btih:7KW5OXSWUQ2EFF57URE42GBRL2XCN5AI&amp;amp;dn=ElectrumX-Data-20231114&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When your download is finished:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Stop the server: &lt;code&gt;docker-compose down&lt;/code&gt; if it is running.&lt;/li&gt; &#xA; &lt;li&gt;Delete &lt;code&gt;electrumx-data&lt;/code&gt; directory in the folder which contains &lt;code&gt;docker-compose.yml&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Unzip (use &lt;a href=&#34;https://www.7-zip.org/&#34;&gt;7zip&lt;/a&gt;) zip files in &lt;code&gt;ElectrumX-Data-20231114&lt;/code&gt;, you will get a &lt;code&gt;electrumx-data&lt;/code&gt; directory.&lt;/li&gt; &#xA; &lt;li&gt;Move &lt;code&gt;electrumx-data&lt;/code&gt; to the folder which contains &lt;code&gt;docker-compose.yml&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Start the server: &lt;code&gt;docker-compose up -d&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Abount 30 minutes later, the server will be ready. (Tested on a 4 cores 8G memory computer)&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
  <entry>
    <title>osrf/docker_images</title>
    <updated>2023-12-03T01:47:45Z</updated>
    <id>tag:github.com,2023-12-03:/osrf/docker_images</id>
    <link href="https://github.com/osrf/docker_images" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A repository to hold definitions of docker images maintained by OSRF&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;OSRF Docker Images&lt;/h1&gt; &#xA;&lt;p&gt;This repo hosts Dockerfiles and scaffolding for images in the Official Library and OSRF Organization on Docker Hub.&lt;/p&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/osrf/docker_images/raw/master/README.md#official-library&#34;&gt;Official docker library&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://github.com/osrf/docker_images/raw/master/README.md#ros--&#34;&gt;Official ROS (1 and 2) images&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://github.com/osrf/docker_images/raw/master/README.md#gazebo--&#34;&gt;Official Gazebo images&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://github.com/osrf/docker_images/raw/master/README.md#ros---1&#34;&gt;OSRF ROS (1 and 2) overlay images&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://github.com/osrf/docker_images/raw/master/README.md#ros2--&#34;&gt;OSRF ROS 2 development images&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://github.com/osrf/docker_images/raw/master/README.md#gazebo---1&#34;&gt;OSRF Gazebo overlay images&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://github.com/osrf/docker_images/raw/master/README.md#ros-legacy--&#34;&gt;OSRF ROS Legacy images&lt;/a&gt;&lt;br&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;CI&lt;/th&gt; &#xA;   &lt;th&gt;Status&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ROS&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/osrf/docker_images/actions?query=workflow%3A%22CI+ROS+images%22+event%3Aschedule&#34;&gt;&lt;img src=&#34;https://github.com/osrf/docker_images/workflows/CI%20ROS%20images/badge.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ROS 2&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/osrf/docker_images&#34;&gt;&lt;img src=&#34;https://github.com/osrf/docker_images/workflows/CI%20ROS%202%20images/badge.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Gazebo&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/osrf/docker_images/actions?query=workflow%3A%22CI+Gazebo+images%22+event%3Aschedule&#34;&gt;&lt;img src=&#34;https://github.com/osrf/docker_images/workflows/CI%20Gazebo%20images/badge.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://docs.docker.com/docker-hub/official_images&#34;&gt;Official Library&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;The following repos are hosted under the Official Library on Docker Hub. These images are tagged for production and general downstream use. If you’re targeting released versions of respective projects, then these are recommended.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://hub.docker.com/_/ros&#34;&gt;ROS &lt;img src=&#34;https://img.shields.io/docker/pulls/_/ros.svg?label=pulls&#34; alt=&#34;Docker Pulls&#34;&gt; &lt;img src=&#34;https://img.shields.io/docker/stars/_/ros.svg?label=stars&#34; alt=&#34;Docker Stars&#34;&gt;&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;This repo contains images available for ROS, both ROS 1 and ROS 2. For more documentation on using these images, view the Docker Hub repo link above. Images are tagged by distribution name, meta package, as well as code name for supported OS base images. For complete listing of tag, view the Repo Info link below.&lt;/p&gt; &#xA;&lt;p&gt;This repo also contain images for the &lt;a href=&#34;https://www.ros.org/reps/rep-2002.html&#34;&gt;ROS 2 Rolling Ridley distribution&lt;/a&gt;, this distribution is a rolling release providing the latest bleeding edge packages available via apt. Note that these will be updated regularly and may jump base image without notice. It sits nicely between the official ROS distributions and the &lt;a href=&#34;https://github.com/osrf/docker_images#repo-info-3&#34;&gt;nightly images&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://github.com/docker-library/repo-info/tree/master/repos/ros&#34;&gt;Repo Info&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;h4&gt;Architectures&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Status&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://hub.docker.com/r/amd64/ros/tags&#34;&gt;amd64&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://doi-janky.infosiftr.net/job/multiarch/job/amd64/job/ros/&#34;&gt;&lt;img src=&#34;https://doi-janky.infosiftr.net/buildStatus/icon?job=multiarch/amd64/ros&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://hub.docker.com/r/arm32v7/ros/tags&#34;&gt;arm32v7&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://doi-janky.infosiftr.net/job/multiarch/job/arm32v7/job/ros/&#34;&gt;&lt;img src=&#34;https://doi-janky.infosiftr.net/buildStatus/icon?job=multiarch/arm32v7/ros&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://hub.docker.com/r/arm64v8/ros/tags&#34;&gt;arm64v8&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://doi-janky.infosiftr.net/job/multiarch/job/arm64v8/job/ros/&#34;&gt;&lt;img src=&#34;https://doi-janky.infosiftr.net/buildStatus/icon?job=multiarch/arm64v8/ros&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://hub.docker.com/_/gazebo&#34;&gt;Gazebo &lt;img src=&#34;https://img.shields.io/docker/pulls/_/gazebo.svg?label=pulls&#34; alt=&#34;Docker Pulls&#34;&gt; &lt;img src=&#34;https://img.shields.io/docker/stars/_/gazebo.svg?label=stars&#34; alt=&#34;Docker Stars&#34;&gt;&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;This repo contains images available for Gazebo. For more documentation on using these images, view the Docker Hub repo link above. Images are tagged by releases version, meta package, as well as code name for supported OS base images. For complete listing of tag, view the Repo Info link below.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://github.com/docker-library/repo-info/tree/master/repos/gazebo&#34;&gt;Repo Info&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;h4&gt;Architectures&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Status&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://hub.docker.com/r/amd64/gazebo/tags&#34;&gt;amd64&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://doi-janky.infosiftr.net/job/multiarch/job/amd64/job/gazebo/&#34;&gt;&lt;img src=&#34;https://doi-janky.infosiftr.net/buildStatus/icon?job=multiarch/amd64/gazebo&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;!--&#xA;| [arm32v7](https://hub.docker.com/r/arm32v7/gazebo/tags) | [![Build Status](https://doi-janky.infosiftr.net/buildStatus/icon?job=multiarch/arm32v7/gazebo)](https://doi-janky.infosiftr.net/job/multiarch/job/arm32v7/job/gazebo/) |&#xA;| [arm64v8](https://hub.docker.com/r/arm64v8/gazebo/tags) | [![Build Status](https://doi-janky.infosiftr.net/buildStatus/icon?job=multiarch/arm64v8/gazebo)](https://doi-janky.infosiftr.net/job/multiarch/job/arm64v8/job/gazebo/) |&#xA;--&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://hub.docker.com/u/osrf/&#34;&gt;OSRF Profile&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;The following repos are hosted under the OSRF Organization on Docker Hub. These images are tagged for development and advanced use cases. If you require extra dependencies not available from the Official Library images above, then using these images may help save you build time during continuous integration or local development.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://hub.docker.com/r/osrf/ros/&#34;&gt;ROS &lt;img src=&#34;https://img.shields.io/docker/pulls/osrf/ros.svg?label=pulls&#34; alt=&#34;Docker Pulls&#34;&gt; &lt;img src=&#34;https://img.shields.io/docker/stars/osrf/ros.svg?label=stars&#34; alt=&#34;Docker Stars&#34;&gt;&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;This repo builds ROS (both ROS 1 and ROS 2) images &lt;code&gt;FROM&lt;/code&gt; the Official Library by including additional meta-packages such for desktop installations. These images may be helpful using containers for development or when display forwarding when using GUIs.&lt;br&gt; Images must be pulled using an explicit tag e.g:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker pull osrf/ros:&amp;lt;tag_name&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;List of tags available at &lt;a href=&#34;https://hub.docker.com/r/osrf/ros/tags&#34;&gt;https://hub.docker.com/r/osrf/ros/tags&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Repo Info&lt;/h4&gt; &#xA;&lt;h4&gt;Architectures&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Status&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://hub.docker.com/r/osrf/ros/tags&#34;&gt;amd64&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://hub.docker.com/r/osrf/ros/builds/&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/build/osrf/ros.svg?label=build&#34; alt=&#34;Docker Build Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://hub.docker.com/r/osrf/ros2/&#34;&gt;ROS2 &lt;img src=&#34;https://img.shields.io/docker/pulls/osrf/ros2.svg?label=pulls&#34; alt=&#34;Docker Pulls&#34;&gt; &lt;img src=&#34;https://img.shields.io/docker/stars/osrf/ros2.svg?label=stars&#34; alt=&#34;Docker Stars&#34;&gt;&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;This repo contains images specific to ROS 2, and are particularly for development and continuous integration. These may contain experimental features or unstable interfaces for testing the latest ROS 2 branches.&lt;br&gt; Images must be pulled using an explicit tag e.g:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker pull osrf/ros2:&amp;lt;tag_name&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;List of tags available at &lt;a href=&#34;https://hub.docker.com/r/osrf/ros2/tags&#34;&gt;https://hub.docker.com/r/osrf/ros2/tags&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Repo Info&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/osrf/docker_images/master/ros2/testing/testing&#34;&gt;&lt;code&gt;testing&lt;/code&gt;&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;em&gt;Description:&lt;/em&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;closely mimics the Official Library images but sources testing apt repo&lt;/li&gt; &#xA;     &lt;li&gt;minimal size with no &lt;code&gt;ros-rolling-*&lt;/code&gt; packages pre-installed&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;em&gt;Purpose:&lt;/em&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;intended for Continuous Integration and testing package syncs&lt;/li&gt; &#xA;     &lt;li&gt;small image size and kept fresh by rebuilding upon package updates&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/osrf/docker_images/master/ros2/nightly/nightly&#34;&gt;&lt;code&gt;nightly&lt;/code&gt;&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;em&gt;Description:&lt;/em&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;includes pre-installed environment from nightly job on the ci.ros2.org and pre-installed DDS implementations: &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;Fast-RTPS (default)&lt;/li&gt; &#xA;       &lt;li&gt;CycloneDDS&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;closely mimics the Official Library images as be interchangeable&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;em&gt;Purpose:&lt;/em&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;intended for CI and testing against the latest nightly builds&lt;/li&gt; &#xA;     &lt;li&gt;early detection of regressions or deprecation from upstream&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/osrf/docker_images/master/ros2/nightly/nightly-rmw&#34;&gt;&lt;code&gt;nightly-rmw&lt;/code&gt;&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;em&gt;Description:&lt;/em&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;builds &lt;code&gt;FROM&lt;/code&gt; &lt;code&gt;nightly&lt;/code&gt; and installs open source libraries&lt;/li&gt; &#xA;     &lt;li&gt;currently identical to &lt;code&gt;nightly&lt;/code&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;em&gt;Purpose:&lt;/em&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;intended for CI and testing against more rmw implementations&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/osrf/docker_images/master/ros2/nightly/nightly-rmw-nonfree&#34;&gt;&lt;code&gt;nightly-rmw-nonfree&lt;/code&gt;&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;em&gt;Description:&lt;/em&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;builds &lt;code&gt;FROM&lt;/code&gt; &lt;code&gt;nightly-rmw&lt;/code&gt; and installs closed source libraries&lt;/li&gt; &#xA;     &lt;li&gt;including non free vendors: &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;Connext&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Notice:&lt;/strong&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;includes third party license agreements for non free software&lt;/li&gt; &#xA;     &lt;li&gt;including the &lt;a href=&#34;https://www.rti.com/products/pricing/compare&#34;&gt;&lt;code&gt;Open Community Source&lt;/code&gt;&lt;/a&gt; license from RTI&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/osrf/docker_images/master/ros2/source/devel&#34;&gt;&lt;code&gt;devel&lt;/code&gt;&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;em&gt;Description:&lt;/em&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;includes pre-installed dependencies for building from source&lt;/li&gt; &#xA;     &lt;li&gt;closely mimics the source install setup instructions&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;em&gt;Purpose:&lt;/em&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;intended for development and bootstrapping source builds&lt;/li&gt; &#xA;     &lt;li&gt;small image size and kept fresh by rebuilding every day&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/osrf/docker_images/master/ros2/source/source&#34;&gt;&lt;code&gt;source&lt;/code&gt;&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;em&gt;Description:&lt;/em&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;builds &lt;code&gt;FROM&lt;/code&gt; &lt;code&gt;devel&lt;/code&gt; and compiles ros2 from source&lt;/li&gt; &#xA;     &lt;li&gt;closely mimics the Official Library images as be interchangeable&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;em&gt;Purpose:&lt;/em&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;intended for development and bootstrapping source builds&lt;/li&gt; &#xA;     &lt;li&gt;when an isolated workspace is needed for dependency checking&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Notice:&lt;/strong&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;no pre-built image hosted on Docker Hub&lt;/li&gt; &#xA;     &lt;li&gt;provides many &lt;code&gt;ARG&lt;/code&gt; options, like running tests&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Note: only core packages are available via these images. An alternative for development is to use the &lt;a href=&#34;https://github.com/osrf/docker_images#ros--&#34;&gt;rolling distribution images&lt;/a&gt;, while less recent than the nightly they allow you to install many ROS packages from deb.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Architectures&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Status&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;amd64&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://hub.docker.com/r/osrf/ros2/builds/&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/build/osrf/ros2.svg?label=build&#34; alt=&#34;Docker Build Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://hub.docker.com/r/osrf/gazebo/&#34;&gt;Gazebo &lt;img src=&#34;https://img.shields.io/docker/pulls/osrf/gazebo.svg?label=pulls&#34; alt=&#34;Docker Pulls&#34;&gt; &lt;img src=&#34;https://img.shields.io/docker/stars/osrf/gazebo.svg?label=stars&#34; alt=&#34;Docker Stars&#34;&gt;&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;This repo builds &lt;code&gt;FROM&lt;/code&gt; the Official Library by including additional meta-packages such for desktop installations. These images may be helpful using containers for development or when display forwarding when using GUIs.&lt;br&gt; Images must be pulled using an explicit tag e.g:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker pull osrf/gazebo:&amp;lt;tag_name&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;List of tags available at &lt;a href=&#34;https://hub.docker.com/r/osrf/gazebo/tags&#34;&gt;https://hub.docker.com/r/osrf/gazebo/tags&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Repo Info&lt;/h4&gt; &#xA;&lt;h4&gt;Architectures&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Status&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;amd64&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://hub.docker.com/r/osrf/gazebo/builds/&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/build/osrf/gazebo.svg?label=build&#34; alt=&#34;Docker Build Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://hub.docker.com/r/osrf/ros_legacy/&#34;&gt;ROS Legacy &lt;img src=&#34;https://img.shields.io/docker/pulls/osrf/ros_legacy.svg?label=pulls&#34; alt=&#34;Docker Pulls&#34;&gt; &lt;img src=&#34;https://img.shields.io/docker/stars/osrf/ros_legacy.svg?label=stars&#34; alt=&#34;Docker Stars&#34;&gt;&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;This repo contains legacy images for ROS 1, specifically for releases predating the Official Library. This is intended as a complementary repo only for older releases of ROS that were not archived in the Official Library. Images must be pulled using an explicit tag e.g:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker pull osrf/ros_legacy:&amp;lt;tag_name&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;List of tags available at &lt;a href=&#34;https://hub.docker.com/r/osrf/ros_legacy/tags&#34;&gt;https://hub.docker.com/r/osrf/ros_legacy/tags&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Repo Info&lt;/h4&gt; &#xA;&lt;h4&gt;Architectures&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Status&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;amd64&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://hub.docker.com/r/osrf/ros_legacy/builds/&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/build/osrf/ros_legacy.svg?label=build&#34; alt=&#34;Docker Build Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt;</summary>
  </entry>
</feed>