<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dockerfile Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-28T01:44:39Z</updated>
  <subtitle>Weekly Trending of Dockerfile in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>mtremsal/pihole-fly-tailscale</title>
    <updated>2022-08-28T01:44:39Z</updated>
    <id>tag:github.com,2022-08-28:/mtremsal/pihole-fly-tailscale</id>
    <link href="https://github.com/mtremsal/pihole-fly-tailscale" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Pi-hole deployed at the edge on Fly.io and accessed via TailScale&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;pihole-fly-tailscale&lt;/h1&gt; &#xA;&lt;p&gt;Pi-hole deployed at the edge on Fly.io and accessed via TailScale&lt;/p&gt; &#xA;&lt;h2&gt;Goals and Constraints&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Pi-hole is usable as a DNS resolver by trusted laptops and mobile devices&lt;/li&gt; &#xA; &lt;li&gt;Pi-hole is deployed at the edge, for low latency while traveling anywhere&lt;/li&gt; &#xA; &lt;li&gt;Pi-hole is NOT accessible from the public internet, to avoid making it available to bad actors&lt;/li&gt; &#xA; &lt;li&gt;Pi-hole is accessible from trusted devices only, via wireguard, courtesy of TailScale&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;h3&gt;Setup Pi-hole as a private Fly.io app connected by TailScale&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Deploy and configure the app on Fly.io: &lt;code&gt;fly launch --no-deploy&lt;/code&gt;, including: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Y - Copy the toml configuration app to the new app&lt;/li&gt; &#xA;   &lt;li&gt;enter - Leave the app name blank or provide your own&lt;/li&gt; &#xA;   &lt;li&gt;enter - Pick the &lt;a href=&#34;https://fly.io/docs/reference/regions/&#34;&gt;region&lt;/a&gt; closest to your location&lt;/li&gt; &#xA;   &lt;li&gt;enter - Use the provided Dockerfile to build an image&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Set the password on Pi-Hole&#39;s web interface via the &lt;code&gt;WEBPASSWORD&lt;/code&gt; environment variable: &lt;code&gt;fly secrets set WEBPASSWORD=&#34;&amp;lt;password&amp;gt;&#34;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Generate an ephemeral and reusable auth key in tailscale&#39;s &lt;a href=&#34;https://login.tailscale.com/admin/settings/keys&#34;&gt;admin portal&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Store the auth key as a secret in fly.io: &lt;code&gt;fly secrets set TAILSCALE_AUTHKEY=&#34;tskey-&amp;lt;key&amp;gt;&#34;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Deploy to fly.io: &lt;code&gt;fly deploy&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;(optional) &lt;a href=&#34;https://fly.io/docs/reference/scaling/#scaling-virtual-machines&#34;&gt;Scale the VM&lt;/a&gt; to a dedicated CPU and 2 GB of RAM: &lt;code&gt;fly scale vm dedicated-cpu-1x&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;(optional) Troubleshoot the Pi-hole configuration via its web interface: &lt;code&gt;&amp;lt;tailscale IP&amp;gt;/admin&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Configure all devices to use Pi-hole for DNS when connecting to the TailScale network&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Open the &lt;a href=&#34;https://login.tailscale.com/admin/dns&#34;&gt;DNS configuration&lt;/a&gt; page&lt;/li&gt; &#xA; &lt;li&gt;Add nameserver &amp;gt; custom &amp;gt; enter the TailScale private IP for the Pi-hole&lt;/li&gt; &#xA; &lt;li&gt;Turn on &lt;code&gt;Override local DNS&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Connect a new device&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://tailscale.com/download&#34;&gt;Download&lt;/a&gt; and install tailscale on the device, then authenticate&lt;/li&gt; &#xA; &lt;li&gt;There&#39;s no step 2! ðŸ¤¯&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Known Limitations&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The Pi-hole currently starts before TailScale, resulting in a warning message in the Pi-hole diagnosis page that &lt;code&gt;interface tailscale0 does not currently exist&lt;/code&gt;. Still, the Pi-hole properly resolves queries via its TailScale private IP, so this is not a real issue, merely a bit messy.&lt;/li&gt; &#xA; &lt;li&gt;When Fly rolls out a new version, it relies on a rolling or blue-green deployment approach by default, which means that Tailscale will display more than one machine for a certain period of time. Thankfully, being &#34;ephemeral&#34;, they&#39;re cleaned up after some amount of time being inactive.&lt;/li&gt; &#xA; &lt;li&gt;Configuring a backup public &lt;a href=&#34;https://login.tailscale.com/admin/dns&#34;&gt;DNS nameserver in Tailscale&lt;/a&gt; breaks the setup as TailScale seems to respond with whatever DNS resolver is faster, rather than trying them in order. This turns out to be a pretty big issue if the Pi-hole goes offline, as DNS resolution fails completely across the network. I&#39;ve opened a &lt;a href=&#34;https://github.com/tailscale/tailscale/issues/5397&#34;&gt;feature request&lt;/a&gt; but this is a pretty niche use case so don&#39;t hold your breath. Workarounds include: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Configure DNS Resolution on each device with Pi-hole as primary and public DNS resolvers as backup&lt;/li&gt; &#xA;   &lt;li&gt;Disconnect a device entirely from TailScale when DNS misbehaves, so as to revert to its default DNS configuration.&lt;/li&gt; &#xA;   &lt;li&gt;Scale to two Fly.io regions for redundancy and add both TailScale IPs as DNS nameservers. This only works if relying on the essentially stateless OOTB setup for Pi-hole.; It also breaks unified reporting.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Redeploying or upgrading Pi-hole leads to a new Fly.io instance, with a new TailScale private IP, thus requiring an update to the &lt;a href=&#34;https://login.tailscale.com/admin/dns&#34;&gt;DNS configuration&lt;/a&gt;. This is rare enough for me as to be a non-issue, but it might be quite annoying for very frequent travelers. As a workaround, &lt;code&gt;mdeeks&lt;/code&gt; &lt;a href=&#34;https://news.ycombinator.com/item?id=32517060&#34;&gt;points out on HN&lt;/a&gt; that it should be possible to persist the &#34;machine key&#34; stored in &lt;code&gt;tailscaled.state&lt;/code&gt; across restarts.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Open Questions&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;What&#39;s a less messy way to keep Docker running after it executes its &lt;code&gt;CMD&lt;/code&gt; than running &lt;code&gt;tail -f /dev/null&lt;/code&gt;? I&#39;ve looked into using &lt;a href=&#34;https://community.fly.io/t/how-can-i-use-the-processes-section-to-avoid-cmd-start-sh-in-my-dockerfile/6454&#34;&gt;Fly&#39;s processes&lt;/a&gt; but I don&#39;t think it buys me much.&lt;/li&gt; &#xA; &lt;li&gt;Is there a need to &lt;a href=&#34;https://login.tailscale.com/admin/machines&#34;&gt;disable TailScale key expiry&lt;/a&gt; for the Pi-hole machine? Probably not, given that the auth key can be reused.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Alternatives&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Deploy Pi-hole in a home lab&lt;/li&gt; &#xA; &lt;li&gt;Use &lt;a href=&#34;https://nextdns.io/&#34;&gt;NextDNS&lt;/a&gt; instead&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;References&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://news.ycombinator.com/item?id=32512576&#34;&gt;HN discussion thread - news.ycombinator.com&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://fly.io/blog/stuff-your-pi-hole-from-anywhere/&#34;&gt;Stuff Your Pi-Hole From Anywhere - fly.io&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://tailscale.com/kb/1114/pi-hole/&#34;&gt;Access a Pi-hole from anywhere - tailscale.com&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://tailscale.com/kb/1132/flydotio/&#34;&gt;Tailscale on Fly.io - tailscale.com&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pi-hole/docker-pi-hole#readme&#34;&gt;Docker container for Pi-hole - pi-hole.net&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://shotor.com/blog/run-your-own-mesh-vpn-and-dns-with-tailscale-and-pihole/&#34;&gt;Run your own mesh VPN and DNS with Tailscale and PiHole - shotor.com&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>udacity/cd0354-monolith-to-microservices-exercises</title>
    <updated>2022-08-28T01:44:39Z</updated>
    <id>tag:github.com,2022-08-28:/udacity/cd0354-monolith-to-microservices-exercises</id>
    <link href="https://github.com/udacity/cd0354-monolith-to-microservices-exercises" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Exercise code for cd0354 Monolith to Microservices at Scale course taught by Justin Lee&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Monolith to Microservices Exercise and Demo Code&lt;/h1&gt; &#xA;&lt;p&gt;This repo contains code for all of the exercises in the Monolith to Microservices at Scale&lt;/p&gt; &#xA;&lt;h2&gt;Lesson 1: Introduction to Microservices&lt;/h2&gt; &#xA;&lt;p&gt;No exercise or demos code&lt;/p&gt; &#xA;&lt;h2&gt;Lesson 2: Microservices Design Principles and Best Practices&lt;/h2&gt; &#xA;&lt;p&gt;No exercise or demos code&lt;/p&gt; &#xA;&lt;h2&gt;Lesson 3: Containers Using Docker&lt;/h2&gt; &#xA;&lt;h3&gt;Exercise Code&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/udacity/cd0354-monolith-to-microservices-exercises/main/lesson-3-containers/exercises/docker-app-exercise/README.md&#34;&gt;Create a Docker App&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/udacity/cd0354-monolith-to-microservices-exercises/main/lesson-3-containers/exercises/debugging-exercise/README.md&#34;&gt;Debugging&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/udacity/cd0354-monolith-to-microservices-exercises/main/lesson-3-containers/exercises/base-images-exercise/README.md&#34;&gt;Base Images&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>dotnet/dotnet-docker</title>
    <updated>2022-08-28T01:44:39Z</updated>
    <id>tag:github.com,2022-08-28:/dotnet/dotnet-docker</id>
    <link href="https://github.com/dotnet/dotnet-docker" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Docker images for .NET and the .NET Tools.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Featured Repos&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://hub.docker.com/_/microsoft-dotnet-sdk/&#34;&gt;dotnet/sdk&lt;/a&gt;: .NET SDK&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://hub.docker.com/_/microsoft-dotnet-aspnet/&#34;&gt;dotnet/aspnet&lt;/a&gt;: ASP.NET Core Runtime&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://hub.docker.com/_/microsoft-dotnet-runtime/&#34;&gt;dotnet/runtime&lt;/a&gt;: .NET Runtime&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://hub.docker.com/_/microsoft-dotnet-runtime-deps/&#34;&gt;dotnet/runtime-deps&lt;/a&gt;: .NET Runtime Dependencies&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://hub.docker.com/_/microsoft-dotnet-monitor/&#34;&gt;dotnet/monitor&lt;/a&gt;: .NET Monitor Tool&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://hub.docker.com/_/microsoft-dotnet-samples/&#34;&gt;dotnet/samples&lt;/a&gt;: .NET Samples&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;About&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://docs.microsoft.com/dotnet/core/&#34;&gt;.NET&lt;/a&gt; is a general purpose development platform maintained by Microsoft and the .NET community on &lt;a href=&#34;https://github.com/dotnet/core&#34;&gt;GitHub&lt;/a&gt;. It is cross-platform, supporting Windows, macOS and Linux, and can be used in device, cloud, and embedded/IoT scenarios.&lt;/p&gt; &#xA;&lt;p&gt;.NET has several capabilities that make development easier, including automatic memory management, (runtime) generic types, reflection, asynchrony, concurrency, and native interop. Millions of developers take advantage of these capabilities to efficiently build high-quality applications.&lt;/p&gt; &#xA;&lt;p&gt;You can use C# or F# to write .NET apps.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/dotnet/csharp/&#34;&gt;C#&lt;/a&gt; is simple, powerful, type-safe, and object-oriented while retaining the expressiveness and elegance of C-style languages. Anyone familiar with C and similar languages will find it straightforward to write in C#.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/dotnet/fsharp/&#34;&gt;F#&lt;/a&gt; is a cross-platform, open-source, functional programming language for .NET. It also includes object-oriented and imperative programming.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/dotnet/core&#34;&gt;.NET&lt;/a&gt; is open source (MIT and Apache 2 licenses) and was contributed to the &lt;a href=&#34;http://dotnetfoundation.org&#34;&gt;.NET Foundation&lt;/a&gt; by Microsoft in 2014. It can be freely adopted by individuals and companies, including for personal, academic or commercial purposes. Multiple companies use .NET as part of apps, tools, new platforms and hosting services.&lt;/p&gt; &#xA;&lt;p&gt;You are invited to &lt;a href=&#34;https://github.com/dotnet/core/raw/master/CONTRIBUTING.md&#34;&gt;contribute new features&lt;/a&gt;, fixes, or updates, large or small; we are always thrilled to receive pull requests, and do our best to process them as fast as we can.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://docs.microsoft.com/dotnet/core/&#34;&gt;https://docs.microsoft.com/dotnet/core/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Watch &lt;a href=&#34;https://github.com/dotnet/dotnet-docker/discussions/categories/announcements&#34;&gt;discussions&lt;/a&gt; for Docker-related .NET announcements.&lt;/p&gt; &#xA;&lt;h1&gt;Usage&lt;/h1&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://github.com/dotnet/dotnet-docker/raw/main/samples/README.md&#34;&gt;.NET Docker samples&lt;/a&gt; show various ways to use .NET and Docker together. See &lt;a href=&#34;https://docs.microsoft.com/dotnet/core/docker/building-net-docker-images&#34;&gt;Building Docker Images for .NET Applications&lt;/a&gt; to learn more.&lt;/p&gt; &#xA;&lt;h2&gt;Container sample: Run a simple application&lt;/h2&gt; &#xA;&lt;p&gt;You can quickly run a container with a pre-built &lt;a href=&#34;https://hub.docker.com/_/microsoft-dotnet-samples/&#34;&gt;.NET Docker image&lt;/a&gt;, based on the &lt;a href=&#34;https://github.com/dotnet/dotnet-docker/raw/main/samples/dotnetapp/README.md&#34;&gt;.NET console sample&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Type the following command to run a sample console application:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;docker run --rm mcr.microsoft.com/dotnet/samples&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Container sample: Run a web application&lt;/h2&gt; &#xA;&lt;p&gt;You can quickly run a container with a pre-built &lt;a href=&#34;https://hub.docker.com/_/microsoft-dotnet-samples/&#34;&gt;.NET Docker image&lt;/a&gt;, based on the &lt;a href=&#34;https://github.com/dotnet/dotnet-docker/raw/main/samples/aspnetapp/README.md&#34;&gt;ASP.NET Core sample&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Type the following command to run a sample web application:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;docker run -it --rm -p 8000:80 --name aspnetcore_sample mcr.microsoft.com/dotnet/samples:aspnetapp&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After the application starts, navigate to &lt;code&gt;http://localhost:8000&lt;/code&gt; in your web browser.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/dotnet/dotnet-docker/raw/main/samples/host-aspnetcore-https.md&#34;&gt;Hosting ASP.NET Core Images with Docker over HTTPS&lt;/a&gt; to use HTTPS with this image.&lt;/p&gt; &#xA;&lt;h1&gt;Related Repos&lt;/h1&gt; &#xA;&lt;p&gt;.NET:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://hub.docker.com/_/microsoft-dotnet-nightly-sdk/&#34;&gt;dotnet/nightly/sdk&lt;/a&gt;: .NET SDK (Preview)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://hub.docker.com/_/microsoft-dotnet-nightly-aspnet/&#34;&gt;dotnet/nightly/aspnet&lt;/a&gt;: ASP.NET Core Runtime (Preview)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://hub.docker.com/_/microsoft-dotnet-nightly-runtime/&#34;&gt;dotnet/nightly/runtime&lt;/a&gt;: .NET Runtime (Preview)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://hub.docker.com/_/microsoft-dotnet-nightly-runtime-deps/&#34;&gt;dotnet/nightly/runtime-deps&lt;/a&gt;: .NET Runtime Dependencies (Preview)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://hub.docker.com/_/microsoft-dotnet-nightly-monitor/&#34;&gt;dotnet/nightly/monitor&lt;/a&gt;: .NET Monitor Tool (Preview)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;.NET Framework:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://hub.docker.com/_/microsoft-dotnet-framework/&#34;&gt;dotnet/framework&lt;/a&gt;: .NET Framework, ASP.NET and WCF&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://hub.docker.com/_/microsoft-dotnet-framework-samples/&#34;&gt;dotnet/framework/samples&lt;/a&gt;: .NET Framework, ASP.NET and WCF Samples&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Support&lt;/h1&gt; &#xA;&lt;h2&gt;Lifecycle&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dotnet/core/raw/main/microsoft-support.md&#34;&gt;Microsoft Support for .NET&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dotnet/dotnet-docker/raw/main/documentation/supported-platforms.md&#34;&gt;Supported Container Platforms Policy&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dotnet/dotnet-docker/raw/main/documentation/supported-tags.md&#34;&gt;Supported Tags Policy&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Image Update Policy&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;We update the supported .NET images within 12 hours of any updates to their base images (e.g. debian:buster-slim, windows/nanoserver:ltsc2022, buildpack-deps:bionic-scm, etc.).&lt;/li&gt; &#xA; &lt;li&gt;We publish .NET images as part of releasing new versions of .NET including major/minor and servicing.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Feedback&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dotnet/dotnet-docker/issues/new/choose&#34;&gt;File an issue&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://support.microsoft.com/contactus/&#34;&gt;Contact Microsoft Support&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Legal Notice: &lt;a href=&#34;https://aka.ms/mcr/osslegalnotice&#34;&gt;Container License Information&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dotnet/dotnet-docker/raw/main/LICENSE&#34;&gt;.NET license&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dotnet/dotnet-docker/raw/main/documentation/image-artifact-details.md&#34;&gt;Discover licensing for Linux image contents&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/virtualization/windowscontainers/images-eula&#34;&gt;Windows base image license&lt;/a&gt; (only applies to Windows containers)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.microsoft.com/cloud-platform/windows-server-pricing&#34;&gt;Pricing and licensing for Windows Server 2019&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>