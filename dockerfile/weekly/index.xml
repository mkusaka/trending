<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dockerfile Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-05-23T01:36:01Z</updated>
  <subtitle>Weekly Trending of Dockerfile in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>vagnercardosoweb/docker-php8</title>
    <updated>2024-05-23T01:36:01Z</updated>
    <id>tag:github.com,2024-05-23:/vagnercardosoweb/docker-php8</id>
    <link href="https://github.com/vagnercardosoweb/docker-php8" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Docker with php8.2+, apache, mysql, postgresql, phpmyadmin, redis, nginx and pgadmin&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Docker with PHP 8.3.4&lt;/h1&gt; &#xA;&lt;p&gt;This repository aims to facilitate the creation of a development environment with php 8.3.4&lt;/p&gt; &#xA;&lt;h2&gt;What&#39;s in the environment:&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.nginx.com/&#34;&gt;Nginx&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://php.net/&#34;&gt;PhpFpm&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://httpd.apache.org/&#34;&gt;Apache2&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.mysql.com/&#34;&gt;MySQL&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mariadb.com/&#34;&gt;MariaDB&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.phpmyadmin.net/&#34;&gt;PhpMyAdmin&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.pgadmin.org/&#34;&gt;PgAdmin&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.postgresql.org/&#34;&gt;PostgreSQL&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://redis.io/&#34;&gt;Redis&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Prerequisites:&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.docker.com/install/&#34;&gt;Install Docker&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.docker.com/compose/install/&#34;&gt;Install Docker Compose&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How to use:&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Clone the repository&lt;/li&gt; &#xA; &lt;li&gt;Enter the repository folder&lt;/li&gt; &#xA; &lt;li&gt;Run the &lt;code&gt;docker-compose up&lt;/code&gt; command &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;if you want to run in background mode, run the command &lt;code&gt;docker-compose up -d&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Access the address &lt;code&gt;http://localhost:8080&lt;/code&gt; to access phpmyadmin &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;user access &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;user: mysql&lt;/li&gt; &#xA;     &lt;li&gt;password: mysql&lt;/li&gt; &#xA;     &lt;li&gt;host: mysql&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;root access &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;user: root&lt;/li&gt; &#xA;     &lt;li&gt;password: root&lt;/li&gt; &#xA;     &lt;li&gt;host: mysql&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Access the address &lt;code&gt;http://localhost:8081&lt;/code&gt; to access pgadmin &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;user: &lt;a href=&#34;mailto:admin@localhost.com&#34;&gt;admin@localhost.com&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;password: admin&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Access the address &lt;code&gt;http://localhost&lt;/code&gt; to access the project&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Persistent data:&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;mysql data: &lt;code&gt;./docker/mysql/dbdata&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;postgresql data: &lt;code&gt;./docker/postgresql/dbdata&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;redis data: &lt;code&gt;./docker/redis&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;PHP INI Config:&lt;/h2&gt; &#xA;&lt;p&gt;Local php.ini configuration is located in the &lt;code&gt;./docker/php/php.ini&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;[PHP]&#xA;log_errors=On&#xA;xmlrpc_errors=On&#xA;html_errors=On&#xA;display_errors=On&#xA;display_startup_errors=On&#xA;report_memleaks=On&#xA;error_reporting=E_ALL&#xA;file_uploads=On&#xA;max_execution_time=120&#xA;max_input_time=120&#xA;session.gc_maxlifetime=1440&#xA;post_max_size=50M&#xA;upload_max_filesize=45M&#xA;max_file_uploads=20&#xA;variables_order=&#34;EGPCS&#34;&#xA;max_input_vars=10000&#xA;max_input_nesting_level=64&#xA;date.timezone=UTC&#xA;memory_limit=512M&#xA;expose_php=On&#xA;&#xA;[opcache]&#xA;opcache.enable=true&#xA;opcache.enable_cli=true&#xA;opcache.jit=tracing&#xA;&#xA;[intl]&#xA;intl.default_locale=en_utf8&#xA;&#xA;[xdebug]&#xA;xdebug.client_host=host.docker.internal&#xA;xdebug.client_port=9003&#xA;xdebug.discover_client_host=0&#xA;xdebug.start_with_request=yes&#xA;xdebug.remote_handler=dbgp&#xA;xdebug.idekey=PHPSTORM&#xA;xdebug.mode=debug,develop&#xA;xdebug.cli_color=1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;PHP Modules:&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;[PHP Modules]&#xA;  apcu&#xA;  bcmath&#xA;  Core&#xA;  ctype&#xA;  curl&#xA;  date&#xA;  dom&#xA;  exif&#xA;  fileinfo&#xA;  filter&#xA;  gd&#xA;  gmp&#xA;  hash&#xA;  iconv&#xA;  imap&#xA;  intl&#xA;  json&#xA;  libxml&#xA;  mbstring&#xA;  mongodb&#xA;  mysqli&#xA;  mysqlnd&#xA;  openssl&#xA;  pcntl&#xA;  pcre&#xA;  PDO&#xA;  pdo_mysql&#xA;  pdo_pgsql&#xA;  pdo_sqlite&#xA;  pgsql&#xA;  Phar&#xA;  posix&#xA;  random&#xA;  readline&#xA;  redis&#xA;  Reflection&#xA;  session&#xA;  SimpleXML&#xA;  soap&#xA;  sockets&#xA;  sodium&#xA;  SPL&#xA;  sqlite3&#xA;  ssh2&#xA;  standard&#xA;  sysvmsg&#xA;  sysvsem&#xA;  sysvshm&#xA;  tokenizer&#xA;  xdebug&#xA;  xml&#xA;  xmlreader&#xA;  xmlwriter&#xA;  xsl&#xA;  yaml&#xA;  Zend OPcache&#xA;  zip&#xA;  zlib&#xA;&#xA;[Zend Modules]&#xA;  Xdebug&#xA;  Zend OPcache&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Comments:&lt;/h2&gt; &#xA;&lt;p&gt;The project starts the services of &lt;code&gt;nginx&lt;/code&gt;, &lt;code&gt;php&lt;/code&gt;, &lt;code&gt;mysql&lt;/code&gt;, &lt;code&gt;postgresql&lt;/code&gt;, &lt;code&gt;phpmyadmin&lt;/code&gt;, &lt;code&gt;pgadmin&lt;/code&gt; and &lt;code&gt;redis&lt;/code&gt; by default, if you want to use &lt;code&gt;apache2&lt;/code&gt;, &lt;code&gt;mariadb&lt;/code&gt; you need to comment the services that are being used and enable the services you want to use on the &lt;code&gt;docker-compose.yml&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;h2&gt;License:&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;MIT&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>launchdarkly/find-code-references</title>
    <updated>2024-05-23T01:36:01Z</updated>
    <id>tag:github.com,2024-05-23:/launchdarkly/find-code-references</id>
    <link href="https://github.com/launchdarkly/find-code-references" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Find references to feature flags in your code&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;LaunchDarkly Code References with GitHub Actions&lt;/h1&gt; &#xA;&lt;p&gt;This GitHub Action is a utility that automatically populates code references in LaunchDarkly. This is useful for finding references to feature flags in your code, both for reference and for code cleanup.&lt;/p&gt; &#xA;&lt;p&gt;To find code references in pull requests, use &lt;a href=&#34;https://github.com/launchdarkly/find-code-references-in-pull-request&#34;&gt;launchdarkly/find-code-references-in-pull-request&lt;/a&gt; instead.&lt;/p&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;Once you&#39;ve &lt;a href=&#34;https://docs.launchdarkly.com/home/code/github-actions#prerequisites&#34;&gt;created a LaunchDarkly access token&lt;/a&gt;, store the newly created access token as a repository secret titled &lt;code&gt;LD_ACCESS_TOKEN&lt;/code&gt;. Under Settings &amp;gt; Secrets in your GitHub repo, you&#39;ll see a link to &#34;Add a new secret&#34;. Click that and paste in your access token and click &#34;Save secret&#34;.&lt;/p&gt; &#xA;&lt;p&gt;(For help storing this see the &lt;a href=&#34;https://help.github.com/en/articles/creating-a-github-action&#34;&gt;GitHub docs&lt;/a&gt;.)&lt;/p&gt; &#xA;&lt;p&gt;Next, create a new Actions workflow in your selected GitHub repository (e.g. &lt;code&gt;code-references.yml&lt;/code&gt;) in the &lt;code&gt;.github/workflows&lt;/code&gt; directory of your repository. Under &#34;Edit new file&#34;, paste the following code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;on: push&#xA;name: Find LaunchDarkly flag code references&#xA;concurrency:&#xA;  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}&#xA;  cancel-in-progress: true&#xA;&#xA;jobs:&#xA;  launchDarklyCodeReferences:&#xA;    name: LaunchDarkly Code References&#xA;    runs-on: ubuntu-latest&#xA;    steps:&#xA;    - uses: actions/checkout@v4&#xA;      with:&#xA;        fetch-depth: 11 # This value must be set if the lookback configuration option is not disabled for find-code-references. Read more: https://github.com/launchdarkly/ld-find-code-refs#searching-for-unused-flags-extinctions&#xA;    - name: LaunchDarkly Code References&#xA;      uses: launchdarkly/find-code-references@v2.12.0&#xA;      with:&#xA;        accessToken: ${{ secrets.LD_ACCESS_TOKEN }}&#xA;        projKey: LD_PROJECT_KEY&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We strongly recommend that you update the second &lt;code&gt;uses&lt;/code&gt; attribute value to reference the latest tag in the &lt;a href=&#34;https://github.com/launchdarkly/find-code-references&#34;&gt;launchdarkly/find-code-references repository&lt;/a&gt;. This will pin your workflow to a particular version of the &lt;code&gt;launchdarkly/find-code-references&lt;/code&gt; action. Also, make sure to change &lt;code&gt;projKey&lt;/code&gt; to the key of the LaunchDarkly project associated with this repository.&lt;/p&gt; &#xA;&lt;p&gt;Commit this file under a new branch. Submit as a PR to your code reviewers to be merged into your default branch. You do not need to have this new branch merged into the default branch for code references to appear in the LaunchDarkly UI for your flags. Code references appear for this new branch as soon as it is published.&lt;/p&gt; &#xA;&lt;p&gt;As shown in the above example, the workflow should run on the &lt;code&gt;push&lt;/code&gt; event, and contain an action provided by the &lt;a href=&#34;https://github.com/launchdarkly/find-code-references&#34;&gt;launchdarkly/find-code-references repository&lt;/a&gt;. The &lt;code&gt;LD_ACCESS_TOKEN&lt;/code&gt; configured in the previous step should be included as a secret, as well as a new environment variable containing your LaunchDarkly project key.&lt;/p&gt; &#xA;&lt;h2&gt;Additional configuration&lt;/h2&gt; &#xA;&lt;p&gt;To customize additional configuration not referenced in &lt;a href=&#34;https://raw.githubusercontent.com/launchdarkly/find-code-references/main/#inputs&#34;&gt;Inputs&lt;/a&gt;, you may use a configuration file located at &lt;code&gt;.launchdarkly/coderefs.yml&lt;/code&gt;. The following links provide more inforation about configurable options:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/launchdarkly/ld-find-code-refs/raw/main/docs/CONFIGURATION.md&#34;&gt;All configuration options&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/launchdarkly/ld-find-code-refs/raw/main/docs/CONFIGURATION.md#projects&#34;&gt;Monorepo configuration&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/launchdarkly/ld-find-code-refs/raw/main/docs/ALIASES.md&#34;&gt;Alias configuration&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Additional Examples&lt;/h2&gt; &#xA;&lt;p&gt;The example below is the same as first, but it also excludes any &lt;code&gt;dependabot&lt;/code&gt; branches. We suggest excluding any automatically generated branches where flags do not change.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;on:&#xA;  push:&#xA;    branches-ignore:&#xA;      - &#39;dependabot/**&#39;&#xA;&#xA;name: Find LaunchDarkly flag code references&#xA;concurrency:&#xA;  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}&#xA;  cancel-in-progress: true&#xA;&#xA;jobs:&#xA;  launchDarklyCodeReferences:&#xA;    name: LaunchDarkly Code References&#xA;    runs-on: ubuntu-latest&#xA;    steps:&#xA;    - uses: actions/checkout@v4&#xA;      with:&#xA;        fetch-depth: 11 # This value must be set if the lookback configuration option is not disabled for find-code-references. Read more: https://github.com/launchdarkly/ld-find-code-refs#searching-for-unused-flags-extinctions&#xA;    - name: LaunchDarkly Code References&#xA;      uses: launchdarkly/find-code-references@v2.12.0&#xA;      with:&#xA;        accessToken: ${{ secrets.LD_ACCESS_TOKEN }}&#xA;        projKey: LD_PROJECT_KEY&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Troubleshooting&lt;/h2&gt; &#xA;&lt;p&gt;Once your workflow has been created, the best way to confirm that the workflow is executing correctly is to create a new pull request with the workflow file and verify that the newly created action succeeds.&lt;/p&gt; &#xA;&lt;p&gt;If the action fails, there may be a problem with your configuration. To investigate, dig into the action&#39;s logs to view any error messages.&lt;/p&gt; &#xA;&lt;!-- action-docs-inputs --&gt; &#xA;&lt;h2&gt;Inputs&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;parameter&lt;/th&gt; &#xA;   &lt;th&gt;description&lt;/th&gt; &#xA;   &lt;th&gt;required&lt;/th&gt; &#xA;   &lt;th&gt;default&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;accessToken&lt;/td&gt; &#xA;   &lt;td&gt;A token with write access to the LaunchDarkly project.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;allowTags&lt;/td&gt; &#xA;   &lt;td&gt;Enable storing references for tags. Lists the tag as a branch.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;false&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;baseUri&lt;/td&gt; &#xA;   &lt;td&gt;The base URL of the LaunchDarkly server for this configuration.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://app.launchdarkly.com&#34;&gt;https://app.launchdarkly.com&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;contextLines&lt;/td&gt; &#xA;   &lt;td&gt;The number of context lines above and below a code reference for the job to send to LaunchDarkly. By default, the flag finder will not send any context lines to LaunchDarkly. If &amp;lt; 0, it will send no source code to LaunchDarkly. If 0, it will send only the lines containing flag references. If &amp;gt; 0, it will send that number of context lines above and below the flag reference. You may provide a maximum of 5 context lines.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;2&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;debug&lt;/td&gt; &#xA;   &lt;td&gt;Enable verbose debug logging.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;false&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ignoreServiceErrors&lt;/td&gt; &#xA;   &lt;td&gt;If enabled, the scanner will terminate with exit code 0 when the LaunchDarkly API is unreachable or returns an unexpected response.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;false&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;lookback&lt;/td&gt; &#xA;   &lt;td&gt;Set the number of commits to search in history for whether you removed a feature flag from code. You may set to 0 to disable this feature. Setting this option to a high value will increase search time.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;10&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;projKey&lt;/td&gt; &#xA;   &lt;td&gt;Key of the LaunchDarkly project associated with this repository. Found under Account Settings -&amp;gt; Projects in the LaunchDarkly dashboard. Cannot be combined with &lt;code&gt;projects&lt;/code&gt; block in configuration file.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;repoName&lt;/td&gt; &#xA;   &lt;td&gt;The repository name. Defaults to the current GitHub repository.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;prune&lt;/td&gt; &#xA;   &lt;td&gt;There is a known issue where the GitHub Action will not prune deleted branch data in private repos. Only enable this if you are running the action in a public repo.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;false&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;!-- action-docs-inputs --&gt;</summary>
  </entry>
  <entry>
    <title>avinash-chauhan-mu/jenkins</title>
    <updated>2024-05-23T01:36:01Z</updated>
    <id>tag:github.com,2024-05-23:/avinash-chauhan-mu/jenkins</id>
    <link href="https://github.com/avinash-chauhan-mu/jenkins" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Files needed for Jenkins class&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;h2&gt;Build the Jenkins BlueOcean Docker Image&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker build -t myjenkins-blueocean:lts-jdk11 .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Create the network &#39;jenkins&#39;&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker network create jenkins&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Run the Container&lt;/h2&gt; &#xA;&lt;h3&gt;MacOS / Linux&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run --name jenkins-blueocean --restart=on-failure --detach \&#xA;  --network jenkins --env DOCKER_HOST=tcp://docker:2376 \&#xA;  --env DOCKER_CERT_PATH=/certs/client --env DOCKER_TLS_VERIFY=1 \&#xA;  --publish 8080:8080 --publish 50000:50000 \&#xA;  --volume jenkins-data:/var/jenkins_home \&#xA;  --volume jenkins-docker-certs:/certs/client:ro \&#xA;  myjenkins-blueocean:lts-jdk11&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Windows&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run --name jenkins-blueocean --restart=on-failure --detach `&#xA;  --network jenkins --env DOCKER_HOST=tcp://docker:2376 `&#xA;  --env DOCKER_CERT_PATH=/certs/client --env DOCKER_TLS_VERIFY=1 `&#xA;  --volume jenkins-data:/var/jenkins_home `&#xA;  --volume jenkins-docker-certs:/certs/client:ro `&#xA;  --publish 8080:8080 --publish 50000:50000 myjenkins-blueocean:lts-jdk11&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Get the Password for Admin&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker exec jenkins-blueocean cat /var/jenkins_home/secrets/initialAdminPassword&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Connect to the Jenkins&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;https://localhost:8080/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Installation Reference:&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.jenkins.io/doc/book/installing/docker/&#34;&gt;https://www.jenkins.io/doc/book/installing/docker/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;alpine/socat container to forward traffic from Jenkins to Docker Desktop on Host Machine&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://stackoverflow.com/questions/47709208/how-to-find-docker-host-uri-to-be-used-in-jenkins-docker-plugin&#34;&gt;https://stackoverflow.com/questions/47709208/how-to-find-docker-host-uri-to-be-used-in-jenkins-docker-plugin&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run -d --restart=always -p 127.0.0.1:2376:2375 --network jenkins -v /var/run/docker.sock:/var/run/docker.sock alpine/socat tcp-listen:2375,fork,reuseaddr unix-connect:/var/run/docker.sock&#xA;docker inspect &amp;lt;container_id&amp;gt; | grep IPAddress&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>