<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dockerfile Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-03-24T01:44:25Z</updated>
  <subtitle>Weekly Trending of Dockerfile in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>grafana/docker-otel-lgtm</title>
    <updated>2024-03-24T01:44:25Z</updated>
    <id>tag:github.com,2024-03-24:/grafana/docker-otel-lgtm</id>
    <link href="https://github.com/grafana/docker-otel-lgtm" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;docker-otel-lgtm&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://hub.docker.com/r/grafana/otel-lgtm&#34;&gt;grafana/otel-lgtm&lt;/a&gt; bundles Grafana&#39;s open source stack for OpenTelemetry monitoring in a single Docker image.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/grafana/docker-otel-lgtm/main/img/overview.png&#34; alt=&#34;alt&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Intended Usage&lt;/h2&gt; &#xA;&lt;p&gt;The intended usage is:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Quick way to try OSS Grafana with OpenTelemetry.&lt;/li&gt; &#xA; &lt;li&gt;Demos, presentations.&lt;/li&gt; &#xA; &lt;li&gt;Integration tests for OpenTelemetry instrumentation: Run automated queries against the databases to check if expected metrics/traces/logs are present.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The Docker image is not intended for production monitoring.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://grafana.com/static/img/menu/application-observability.svg?sanitize=true&#34; alt=&#34;&#34;&gt; If you are looking for an production-ready out-of-the box solution to monitor applications and minimize MTTR (mean time to resolution) with OpenTelemetry and Prometheus try &lt;a href=&#34;https://grafana.com/products/cloud/application-observability/&#34;&gt;Grafana Cloud Application Observability&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Get the Docker image&lt;/h2&gt; &#xA;&lt;p&gt;The Docker image is available on Docker hub: &lt;a href=&#34;https://hub.docker.com/r/grafana/otel-lgtm&#34;&gt;https://hub.docker.com/r/grafana/otel-lgtm&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Run the Docker image&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./run-lgtm.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Send OpenTelemetry Data&lt;/h2&gt; &#xA;&lt;p&gt;There&#39;s no need to configure anything: The Docker image works with OpenTelemetry&#39;s defaults.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Not needed as these are the defaults in OpenTelemetry:&#xA;export OTEL_EXPORTER_OTLP_PROTOCOL=grpc&#xA;export OTEL_EXPORTER_OTLP_ENDPOINT=http://localhost:4317&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;View Grafana&lt;/h2&gt; &#xA;&lt;p&gt;Log in to &lt;a href=&#34;http://localhost:3000&#34;&gt;http://localhost:3000&lt;/a&gt; with user &lt;em&gt;admin&lt;/em&gt; and password &lt;em&gt;admin&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Build the Docker image from scratch&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cd docker/&#xA;docker build . -t grafana/otel-lgtm&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Build and run the example app&lt;/h2&gt; &#xA;&lt;p&gt;Run the example REST service:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./run-example.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Generate traffic:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./generate-traffic.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Run example apps in different languages&lt;/h2&gt; &#xA;&lt;p&gt;The example apps are in the &lt;code&gt;examples/&lt;/code&gt; directory. Each example has a &lt;code&gt;run.sh&lt;/code&gt; script to start the app.&lt;/p&gt; &#xA;&lt;p&gt;Every example implements a rolldice service, which returns a random number between 1 and 6.&lt;/p&gt; &#xA;&lt;p&gt;Each example uses a different application port (to be able to run all applications at the same time).&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Example&lt;/th&gt; &#xA;   &lt;th&gt;Service URL&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Java&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;curl http://localhost:8080/rolldice&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Go&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;curl http://localhost:8081/rolldice&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Python&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;curl http://localhost:8082/rolldice&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt;</summary>
  </entry>
  <entry>
    <title>heroku/alpinehelloworld</title>
    <updated>2024-03-24T01:44:25Z</updated>
    <id>tag:github.com,2024-03-24:/heroku/alpinehelloworld</id>
    <link href="https://github.com/heroku/alpinehelloworld" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An Alpine-based Docker example&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>EdenKim-dev/krampoline_step4_v2</title>
    <updated>2024-03-24T01:44:25Z</updated>
    <id>tag:github.com,2024-03-24:/EdenKim-dev/krampoline_step4_v2</id>
    <link href="https://github.com/EdenKim-dev/krampoline_step4_v2" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;krampoline-step4&lt;/h1&gt; &#xA;&lt;h2&gt;소개&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;krampoline-step4&lt;/code&gt;는 krampoline으로 여러가지 앱들을 하나의 구성으로 배포하는 시나리오를 담고 있습니다. 이 저장소에서는 아주 간단한 mariaDB 이미지 생성과 여러가지 쿠버네티스 설정들을 담고 있습니다.&lt;/p&gt; &#xA;&lt;p&gt;프론트엔드(React) 저장소와 백엔드(Spring) 저장소를 등록하여 도커 이미지를 만듭니다. 그리고 nginx 이미지를 가지고 와서 프론트엔드와 백엔드를 위한 프록시 서버 역활을 합니다.&lt;/p&gt; &#xA;&lt;p&gt;현재 저장소에서는 nginx와 데이터베이스의 초기 데이터를 위한 config 파일이 있습니다. 쿠버네티스를 통해서 해당 설정들을 어떻게 하는지를 확인할 수 있습니다.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/MonoKim01/krampoline-step4/assets/85483855/1421cd44-8c34-4b6d-ab5e-222c9a63e4d7&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;</summary>
  </entry>
</feed>