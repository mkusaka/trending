<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dockerfile Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-09-17T01:48:05Z</updated>
  <subtitle>Weekly Trending of Dockerfile in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>shinsenter/php</title>
    <updated>2023-09-17T01:48:05Z</updated>
    <id>tag:github.com,2023-09-17:/shinsenter/php</id>
    <link href="https://github.com/shinsenter/php" rel="alternate"></link>
    <summary type="html">&lt;p&gt;📦 (PHP) Ubuntu + PHP-FPM + Nginx/Apache2 Docker images with plenty of common and useful extensions.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;shinsenter/php&lt;/h1&gt; &#xA;&lt;p&gt;📦 (PHP) Ubuntu + PHP-FPM + Nginx/Apache2 Docker images with plenty of common and useful extensions.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;🔗 &lt;a href=&#34;https://docker.shin.company/php&#34;&gt;https://docker.shin.company/php&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://docker.shin.company/php&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/pulls/shinsenter/php&#34; alt=&#34;Docker Pulls&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://docker.shin.company/php/tags&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/image-size/shinsenter/php/latest?label=shinsenter%2Fphp&#34; alt=&#34;Docker Image Size&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://code.shin.company/php/actions/workflows/build-v2.yml&#34;&gt;&lt;img src=&#34;https://code.shin.company/php/actions/workflows/build-v2.yml/badge.svg?branch=main&#34; alt=&#34;Publish Images (shinsenter/php)&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://docker.shin.company/php&#34;&gt;&lt;img src=&#34;https://repository-images.githubusercontent.com/458053748/24e848e1-c0fc-4893-b2b9-f7dbfad263f3&#34; alt=&#34;shinsenter/php&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;About this project&lt;/h2&gt; &#xA;&lt;p&gt;Are you tired of the tedious and time-consuming process of building environments for your PHP applications? I know I was.&lt;/p&gt; &#xA;&lt;p&gt;From waiting for Docker images to build, to customizing modules on official Docker PHP images and dealing with bloated images after installing more modules, to installing web servers like Apache or Nginx on top of PHP just to run an application on a browser - it&#39;s all too much.&lt;/p&gt; &#xA;&lt;p&gt;With my many years of experience in the field, I&#39;ve created this project to help you easily and quickly set up an environment for your PHP applications, whether it&#39;s for production or development. Say goodbye to the tedious tasks and hello to a streamlined process.&lt;/p&gt; &#xA;&lt;p&gt;I hope you find this project helpful. If you do, please consider supporting my work by visiting &lt;a href=&#34;https://code.shin.company/php/blob/main/SPONSOR.md&#34;&gt;this section&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;h3&gt;Thanks&lt;/h3&gt; &#xA; &lt;p&gt;This project was inspired by the &lt;a href=&#34;https://github.com/serversideup/docker-php&#34;&gt;serversideup/docker-php&lt;/a&gt; project, which I appreciate.&lt;/p&gt; &#xA; &lt;p&gt;However, as the original authors seemed to be occupied with other updates, I decided to create our own version.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Container OS&lt;/h2&gt; &#xA;&lt;p&gt;These Docker images include the latest version of Ubuntu 22.04 (Jammy) and are packed with powerful tools such as &lt;a href=&#34;https://docker.shin.company/s6-overlay&#34;&gt;s6-overlay v3&lt;/a&gt; and OpenSSL.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;The s6-overlay, designed specifically for the lifecycle of containers, provides a more accurate way of bringing them down and monitoring their health, while OpenSSL adds an extra layer of security to your containers.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Learn more:&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://docker.shin.company/s6-overlay&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/image-size/shinsenter/s6-overlay/latest?label=shinsenter%2Fs6-overlay&#34; alt=&#34;shinsenter/s6-overlay&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://docker.shin.company/s6-ubuntu&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/image-size/shinsenter/s6-ubuntu/latest?label=shinsenter%2Fs6-ubuntu&#34; alt=&#34;shinsenter/s6-ubuntu&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Available images&lt;/h2&gt; &#xA;&lt;p&gt;These Docker images are continuously updated to provide you with the most cutting-edge technology in the container world.&lt;/p&gt; &#xA;&lt;p&gt;Let&#39;s check it out!&lt;/p&gt; &#xA;&lt;h3&gt;PHP versions&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docker.shin.company/php/tags?page=1&amp;amp;name=7.3&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/image-size/shinsenter/php/7.3?label=shinsenter%2Fphp%3A7.3&#34; alt=&#34;shinsenter/php:7.3&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docker.shin.company/php/tags?page=1&amp;amp;name=7.4&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/image-size/shinsenter/php/7.4?label=shinsenter%2Fphp%3A7.4&#34; alt=&#34;shinsenter/php:7.4&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docker.shin.company/php/tags?page=1&amp;amp;name=8.0&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/image-size/shinsenter/php/8.0?label=shinsenter%2Fphp%3A8.0&#34; alt=&#34;shinsenter/php:8.0&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docker.shin.company/php/tags?page=1&amp;amp;name=8.1&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/image-size/shinsenter/php/8.1?label=shinsenter%2Fphp%3A8.1&#34; alt=&#34;shinsenter/php:8.1&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docker.shin.company/php/tags?page=1&amp;amp;name=8.2&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/image-size/shinsenter/php/8.2?label=shinsenter%2Fphp%3A8.2&#34; alt=&#34;shinsenter/php:8.2&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;PHP-CLI&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docker.shin.company/php/tags?page=1&amp;amp;name=cli&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/image-size/shinsenter/php/cli?label=shinsenter%2Fphp%3Acli&#34; alt=&#34;shinsenter/php:${PHP_VERSION}-cli&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;PHP-FPM&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docker.shin.company/php/tags?page=1&amp;amp;name=fpm&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/image-size/shinsenter/php/fpm?label=shinsenter%2Fphp%3Afpm&#34; alt=&#34;shinsenter/php:${PHP_VERSION}-fpm&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;PHP-FPM + Apache&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docker.shin.company/phpfpm-apache&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/image-size/shinsenter/phpfpm-apache/latest?label=shinsenter%2Fphpfpm-apache&#34; alt=&#34;shinsenter/phpfpm-apache&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;PHP-FPM + Nginx&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docker.shin.company/phpfpm-nginx&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/image-size/shinsenter/phpfpm-nginx/latest?label=shinsenter%2Fphpfpm-nginx&#34; alt=&#34;shinsenter/phpfpm-nginx&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Popular PHP open source projects&lt;/h3&gt; &#xA;&lt;p&gt;I also added more popular PHP open source projects:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docker.shin.company/cakephp4&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/image-size/shinsenter/cakephp4/latest?label=shinsenter%2Fcakephp4&#34; alt=&#34;shinsenter/cakephp4&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docker.shin.company/codeigniter4&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/image-size/shinsenter/codeigniter4/latest?label=shinsenter%2Fcodeigniter4&#34; alt=&#34;shinsenter/codeigniter4&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docker.shin.company/crater&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/image-size/shinsenter/crater/latest?label=shinsenter%2Fcrater&#34; alt=&#34;shinsenter/crater&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docker.shin.company/flarum&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/image-size/shinsenter/flarum/latest?label=shinsenter%2Fflarum&#34; alt=&#34;shinsenter/flarum&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docker.shin.company/fuelphp&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/image-size/shinsenter/fuelphp/latest?label=shinsenter%2Ffuelphp&#34; alt=&#34;shinsenter/fuelphp&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docker.shin.company/grav&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/image-size/shinsenter/grav/latest?label=shinsenter%2Fgrav&#34; alt=&#34;shinsenter/grav&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docker.shin.company/hyperf&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/image-size/shinsenter/hyperf/latest?label=shinsenter%2Fhyperf&#34; alt=&#34;shinsenter/hyperf&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docker.shin.company/kirby&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/image-size/shinsenter/kirby/latest?label=shinsenter%2Fkirby&#34; alt=&#34;shinsenter/kirby&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docker.shin.company/laminas&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/image-size/shinsenter/laminas/latest?label=shinsenter%2Flaminas&#34; alt=&#34;shinsenter/laminas&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docker.shin.company/laravel&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/image-size/shinsenter/laravel/latest?label=shinsenter%2Flaravel&#34; alt=&#34;shinsenter/laravel&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docker.shin.company/mautic&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/image-size/shinsenter/mautic/latest?label=shinsenter%2Fmautic&#34; alt=&#34;shinsenter/mautic&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docker.shin.company/phpmyadmin&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/image-size/shinsenter/phpmyadmin/latest?label=shinsenter%2Fphpmyadmin&#34; alt=&#34;shinsenter/phpmyadmin&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docker.shin.company/symfony&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/image-size/shinsenter/symfony/latest?label=shinsenter%2Fsymfony&#34; alt=&#34;shinsenter/symfony&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docker.shin.company/slim&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/image-size/shinsenter/slim/latest?label=shinsenter%2Fslim&#34; alt=&#34;shinsenter/slim&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docker.shin.company/statamic&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/image-size/shinsenter/statamic/latest?label=shinsenter%2Fstatamic&#34; alt=&#34;shinsenter/statamic&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docker.shin.company/wordpress&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/image-size/shinsenter/wordpress/latest?label=shinsenter%2Fwordpress&#34; alt=&#34;shinsenter/wordpress&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docker.shin.company/yii&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/image-size/shinsenter/yii/latest?label=shinsenter%2Fyii&#34; alt=&#34;shinsenter/yii&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Pre-installed PHP modules&lt;/h2&gt; &#xA;&lt;p&gt;The following PHP extensions are pre-installed in every docker image.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;apcu            json            shmop         zip&#xA;bcmath          libxml          simple_xml    zlib&#xA;calendar        mbstring        simplexml&#xA;core            memcached       soap&#xA;ctype           msgpack         sockets&#xA;curl            mysqli          sodium&#xA;date            mysqlnd         spl&#xA;dom             opcache         sqlite3&#xA;exif            openssl         standard&#xA;ffi             pcntl           sysvmsg&#xA;fileinfo        pcre            sysvsem&#xA;filter          pdo             sysvshm&#xA;ftp             pdo_mysql       tidy&#xA;gd              pdo_sqlite      tokenizer&#xA;gettext         phar            uuid&#xA;gmp             posix           xml&#xA;hash            readline        xmlreader&#xA;iconv           redis           xmlwriter&#xA;igbinary        reflection      xsl&#xA;intl            session         yaml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also easily &lt;a href=&#34;https://raw.githubusercontent.com/shinsenter/php/main/#enabling-or-disabling-php-modules&#34;&gt;add more PHP modules&lt;/a&gt; or &lt;a href=&#34;https://raw.githubusercontent.com/shinsenter/php/main/#installing-linux-packages&#34;&gt;install Ubuntu packages&lt;/a&gt; by &lt;a href=&#34;https://raw.githubusercontent.com/shinsenter/php/main/#customize-docker-image&#34;&gt;customizing your Docker image&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Docker Pull command&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker pull shinsenter/php:${PHP_VERSION}-${PHP_VARIATION}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;View more image tags at &lt;a href=&#34;https://docker.shin.company/php/tags&#34;&gt;shinsenter/php/tags&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;The document root&lt;/h3&gt; &#xA;&lt;p&gt;By default, your application will be placed in the &lt;code&gt;/var/www/html&lt;/code&gt; directory of the Docker container, also known as the document root. However, if you want to change the location of your application, you can simply adjust the &lt;code&gt;WEBHOME&lt;/code&gt; environment variable.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Dockerfile&#34;&gt;ENV WEBHOME=&#34;/var/www/html&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;But don&#39;t forget, after changing this variable, you&#39;ll also need to update your default working directory in the Dockerfile. No worries, it&#39;s easy to do! Just add a couple of lines to the bottom of your Dockerfile and you&#39;re good to go:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# sets the working directory&#xA;WORKDIR $WEBHOME&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Composer&lt;/h3&gt; &#xA;&lt;p&gt;The latest version of Composer is installed and ready to use.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Composer is a tool for dependency management in PHP, written in PHP. It allows you to declare the libraries your project depends on and it will manage (install/update) them for you. You can read more about Composer in our &lt;a href=&#34;https://getcomposer.org/doc&#34;&gt;official documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Access to your container&lt;/h3&gt; &#xA;&lt;p&gt;Just open a terminal and run below command to access to your container:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker exec -it &amp;lt;container_id&amp;gt; /bin/bash&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Enabling or disabling PHP modules&lt;/h3&gt; &#xA;&lt;p&gt;There are many &lt;a href=&#34;https://raw.githubusercontent.com/shinsenter/php/main/#pre-installed-php-modules&#34;&gt;pre-installed PHP modules&lt;/a&gt; in the &lt;code&gt;shinsenter/php&lt;/code&gt; Docker images, and I think it is quite enough for different PHP projects. If you want to add/remove these modules here is the guide.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;shinsenter/php&lt;/code&gt; Docker images provide some helper scripts to more easily install/remove or enable/disable PHP extensions.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;phpaddmod&lt;/code&gt; (or &lt;code&gt;docker-php-ext-install&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;phpdelmod&lt;/code&gt; (or &lt;code&gt;docker-php-ext-remove&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;phpenmod&lt;/code&gt; (or &lt;code&gt;docker-php-ext-enable&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;phpdismod&lt;/code&gt; (or &lt;code&gt;docker-php-ext-disable&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Installing PHP modules:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker exec -it &amp;lt;container_id&amp;gt; phpaddmod &amp;lt;module names, space-delimited list&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;E.g.: &lt;code&gt;docker exec -it my-container phpaddmod imagick pgsql solr&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Removing PHP modules:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker exec -it &amp;lt;container_id&amp;gt; phpdelmod &amp;lt;module names, space-delimited list&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;E.g.: &lt;code&gt;docker exec -it my-container phpdelmod imagick pgsql solr&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Composer command&lt;/h3&gt; &#xA;&lt;p&gt;Running a Composer command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker exec -it &amp;lt;container_id&amp;gt; composer &amp;lt;arguments&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;E.g.: &lt;code&gt;docker exec -it my-container composer install&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Installing linux packages&lt;/h3&gt; &#xA;&lt;p&gt;Access to your container by running &lt;code&gt;bash&lt;/code&gt; inside the container:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker exec -it &amp;lt;container_id&amp;gt; /bin/bash&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run following Ubuntu&#39;s &lt;code&gt;apt&lt;/code&gt; commands to install packages and any dependency needed.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;apt-get update -y&#xA;apt-get install -y &amp;lt;package_name&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Docker Run command&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run --rm [run options] shinsenter/php:${PHP_VERSION}-${PHP_VARIATION} &amp;lt;your_command&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run --rm -v $(pwd):/var/www/html -e PUID=$(id -u) -e PGID=$(id -g) shinsenter/php:8.2-cli composer create-project laravel/laravel /var/www/html&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Customize Your Docker Image&lt;/h2&gt; &#xA;&lt;p&gt;Easily change container configurations and tailor your image to your specific needs by utilizing pre-defined Docker environment variables.&lt;/p&gt; &#xA;&lt;p&gt;Look no further than this &lt;code&gt;Dockerfile&lt;/code&gt; sample for building your own custom image by extending the base image provided here.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Want to learn more about how to create the ultimate custom image? Check out the &lt;a href=&#34;https://docs.docker.com/engine/reference/builder&#34;&gt;Dockerfile documentation&lt;/a&gt; and start building today.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;But that&#39;s not all - you can also add more &lt;a href=&#34;https://code.shin.company/php#customize-docker-image&#34;&gt;pre-defined Docker environment variables&lt;/a&gt; to change PHP-FPM behavior without copying configuration files to your containers.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Dockerfile&#34;&gt;# change the PHP_VERSION and PHP_VARIATION as your need&#xA;ARG PHP_VERSION=8.2&#xA;ARG PHP_VARIATION=fpm-nginx&#xA;&#xA;# extends from base image&#xA;FROM shinsenter/php:${PHP_VERSION}-${PHP_VARIATION}&#xA;&#xA;# ==========================================================&#xA;&#xA;# you may want to install some PHP modules&#xA;# e.g: the following line will install imagick, pgsql, solr modules&#xA;RUN phpaddmod imagick pgsql solr&#xA;&#xA;# ==========================================================&#xA;&#xA;# Control your timezone&#xA;ENV TZ=&#34;UTC&#34;&#xA;&#xA;# sets GID and UID&#xA;ENV PUID=9999&#xA;ENV PGID=9999&#xA;&#xA;# sets web server root path&#xA;ENV WEBHOME=&#34;/var/www/html&#34;&#xA;&#xA;# set ENABLE_CRONTAB=true to enable crontab&#xA;ENV ENABLE_CRONTAB=false&#xA;&#xA;# ==========================================================&#xA;&#xA;# Server that should relay emails for MSMTP&#xA;ENV MSMTP_RELAY_SERVER_HOSTNAME=&#34;mailhog&#34;&#xA;&#xA;# Port the SMTP server is listening on&#xA;ENV MSMTP_RELAY_SERVER_PORT=&#34;1025&#34;&#xA;&#xA;# ==========================================================&#xA;&#xA;# Default charset&#xA;ENV PHP_DEFAULT_CHARSET=&#34;UTF-8&#34;&#xA;&#xA;# Show PHP errors on screen&#xA;ENV PHP_DISPLAY_ERRORS=&#34;1&#34;&#xA;&#xA;# Show PHP startup errors on screen&#xA;ENV PHP_DISPLAY_STARTUP_ERRORS=&#34;0&#34;&#xA;&#xA;# Path to error log file&#xA;ENV PHP_ERROR_LOG=&#34;/var/log/php-fpm/error.log&#34;&#xA;&#xA;# Set PHP error reporting level&#xA;# Default: 22527 (E_ALL &amp;amp; ~E_DEPRECATED &amp;amp; ~E_STRICT &amp;amp; ~E_WARNING)&#xA;ENV PHP_ERROR_REPORTING=&#34;22527&#34;&#xA;&#xA;# Set the maximum time in seconds a script is allowed&#xA;# to run before it is terminated by the parser&#xA;ENV PHP_MAX_EXECUTION_TIME=&#34;99&#34;&#xA;&#xA;# Set the maximum amount of memory in bytes that a script is allowed to allocate&#xA;ENV PHP_MEMORY_LIMIT=&#34;256M&#34;&#xA;&#xA;# Limit the files that can be accessed by PHP to the specified directory-tree&#xA;# Default: PHP_OPEN_BASEDIR=&#34;$WEBHOME&#34;&#xA;# Example: PHP_OPEN_BASEDIR=&#34;$WEBHOME:/data/uploads&#34;&#xA;ENV PHP_OPEN_BASEDIR=&#34;$WEBHOME&#34;&#xA;&#xA;# Sets max size of post data allowed&#xA;ENV PHP_POST_MAX_SIZE=&#34;100M&#34;&#xA;&#xA;# The maximum size of an uploaded file&#xA;ENV PHP_UPLOAD_MAX_FILE_SIZE=&#34;100M&#34;&#xA;&#xA;# The maximum amount of input variables accepted&#xA;ENV PHP_UPLOAD_MAX_INPUT_VARS=&#34;1000&#34;&#xA;&#xA;# Set the name of your PHP-FPM pool&#xA;# (helpful when running multiple sites on a single server)&#xA;ENV PHP_POOL_NAME=&#34;www&#34;&#xA;&#xA;# ==========================================================&#xA;&#xA;# Choose how the process manager will control the number of child processes&#xA;ENV PHP_PM_CONTROL=&#34;ondemand&#34;&#xA;&#xA;# The number of child processes to be created when pm is set to static&#xA;# and the maximum number of child processes to be created when pm is set to dynamic&#xA;ENV PHP_PM_MAX_CHILDREN=&#34;5&#34;&#xA;&#xA;# The desired maximum number of idle server processes&#xA;ENV PHP_PM_MAX_SPARE_SERVERS=&#34;3&#34;&#xA;&#xA;# The desired minimum number of idle server processes&#xA;ENV PHP_PM_MIN_SPARE_SERVERS=&#34;1&#34;&#xA;&#xA;# The number of child processes created on startup&#xA;ENV PHP_PM_START_SERVERS=&#34;2&#34;&#xA;&#xA;# ==========================================================&#xA;&#xA;# The amount of memory used to store interned strings, in megabytes.&#xA;ENV PHP_OPCACHE_INTERNED_STRINGS_BUFFER=&#34;64&#34;&#xA;&#xA;# The maximum number of keys (and therefore scripts) in the OPcache hash table&#xA;ENV PHP_OPCACHE_MAX_ACCELERATED_FILES=&#34;130987&#34;&#xA;&#xA;# The maximum percentage of wasted memory that is allowed before a restart is scheduled&#xA;ENV PHP_OPCACHE_MAX_WASTED_PERCENTAGE=&#34;15&#34;&#xA;&#xA;# The size of the shared memory storage used by OPcache, in megabytes&#xA;ENV PHP_OPCACHE_MEMORY_CONSUMPTION=&#34;256&#34;&#xA;&#xA;# This directive facilitates to let the preloading to be run as another user&#xA;ENV PHP_OPCACHE_PRELOAD_USER=&#34;$WEBUSER&#34;&#xA;&#xA;# Specifies a PHP script that is going to be compiled and executed at start-up&#xA;ENV PHP_OPCACHE_PRELOAD=&#xA;&#xA;# How often to check script timestamps for updates, in seconds&#xA;ENV PHP_OPCACHE_REVALIDATE_FREQ=&#34;5&#34;&#xA;&#xA;# If disabled, existing cached files using the same include_path will be reused&#xA;ENV PHP_OPCACHE_REVALIDATE_PATH=&#34;0&#34;&#xA;&#xA;# If disabled, all documentation comments will be discarded&#xA;# from the opcode cache to reduce the size of the optimised code&#xA;ENV PHP_OPCACHE_SAVE_COMMENTS=&#34;1&#34;&#xA;&#xA;# If enabled, OPcache will check for updated scripts&#xA;# every opcache.revalidate_freq seconds&#xA;ENV PHP_OPCACHE_VALIDATE_TIMESTAMPS=&#34;1&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then run below command to build your Docker image.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker build [build options] - &amp;lt; Dockerfile&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Docker Compose example&lt;/h2&gt; &#xA;&lt;p&gt;Create an empty directory for a new project and place in the directory a &lt;code&gt;docker-compose.yml&lt;/code&gt; file with below content.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Learn more about &lt;a href=&#34;https://docs.docker.com/compose&#34;&gt;Docker Compose&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;version: &#39;3&#39;&#xA;services:&#xA;  my-container:&#xA;    image: shinsenter/php:${PHP_VERSION}-${PHP_VARIATION}&#xA;    volumes:&#xA;      - ./myapp:/var/www/html&#xA;    environment:&#xA;      TZ: UTC&#xA;      PUID: ${UID:-9999}&#xA;      PGID: ${GID:-9999}&#xA;    links:&#xA;      - db&#xA;      - redis&#xA;&#xA;  ## OTHER CONTAINERS SUCH AS REDIS OR DATABASE ###################################&#xA;  db:&#xA;    image: mariadb:latest&#xA;    environment:&#xA;      TZ: UTC&#xA;      MYSQL_ROOT_PASSWORD: mydb_p@ssw0rd&#xA;      MYSQL_DATABASE: my_database&#xA;    volumes:&#xA;      - &#34;./db/data:/var/lib/mysql&#34;&#xA;      - &#34;./db/dump:/docker-entrypoint-initdb.d&#34;&#xA;    ports:&#xA;      - &#34;3306:3306&#34;&#xA;  redis:&#xA;    image: redis:latest&#xA;    ports:&#xA;      - &#34;6379:6379&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then run below command to start containers.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker-compose up -d&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Supported platforms&lt;/h2&gt; &#xA;&lt;p&gt;Currently, the supported architectures are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;linux/amd64&lt;/li&gt; &#xA; &lt;li&gt;linux/arm/v7&lt;/li&gt; &#xA; &lt;li&gt;linux/arm64&lt;/li&gt; &#xA; &lt;li&gt;linux/ppc64le&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;You do not need to use a platform-specific tag (although you can), Docker will automatically choose the appropriate architecture.&lt;/p&gt; &#xA;&lt;/blockquote&gt;</summary>
  </entry>
  <entry>
    <title>dsadsadsss/choreo-notejs</title>
    <updated>2023-09-17T01:48:05Z</updated>
    <id>tag:github.com,2023-09-17:/dsadsadsss/choreo-notejs</id>
    <link href="https://github.com/dsadsadsss/choreo-notejs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;p&gt;自用项目，简单记录设置，防止忘掉&lt;/p&gt; &#xA;&lt;p&gt;ARGO_DOMAIN/CF_IP/NEZHA_KEY/NEZHA_SERVER/PSWD/SUB_NAME/SUB_URL/UUID/VPATH&lt;/p&gt; &#xA;&lt;p&gt;变量添加有2种方式&lt;/p&gt; &#xA;&lt;p&gt;1、可以直接在Dockerfile里面添加，比如我添加的ENV PW，可以类似添加别的&lt;/p&gt; &#xA;&lt;p&gt;2、直接在choreo网站部署时设置变量即可，这个基本所有docker容器通用&lt;/p&gt; &#xA;&lt;h1&gt;免责声明:&lt;/h1&gt; &#xA;&lt;p&gt;本仓库仅为自用备份，非开源项目，因为需要外链必须公开，但是任何人不得私自下载, 如果下载了，请于下载后 24 小时内删除, 不得用作任何商业用途, 文字、数据及图片均有所属版权。&lt;/p&gt; &#xA;&lt;p&gt;如果你使用本仓库文件，造成的任何责任与本人无关, 本人不对使用者任何不当行为负责。&lt;/p&gt;</summary>
  </entry>
</feed>