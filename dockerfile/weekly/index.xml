<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dockerfile Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-03-10T01:49:42Z</updated>
  <subtitle>Weekly Trending of Dockerfile in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>LinkedInLearning/rust-for-java-developers-2484214</title>
    <updated>2024-03-10T01:49:42Z</updated>
    <id>tag:github.com,2024-03-10:/LinkedInLearning/rust-for-java-developers-2484214</id>
    <link href="https://github.com/LinkedInLearning/rust-for-java-developers-2484214" rel="alternate"></link>
    <summary type="html">&lt;p&gt;This is a code repository for the LinkedIn Learning course Rust for Java Developers.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Rust for Java Developers&lt;/h1&gt; &#xA;&lt;p&gt;This is the repository for the LinkedIn Learning course Rust for Java Developers. The full course is available from &lt;a href=&#34;https://www.linkedin.com/learning/rust-for-java-developers?dApp=59033956&amp;amp;leis=LAA&#34;&gt;LinkedIn Learning&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://media.licdn.com/dms/image/D4E0DAQE0-vq_Sz6nhg/learning-public-crop_675_1200/0/1699567936080?e=2147483647&amp;amp;v=beta&amp;amp;t=yB9YvmT4wZM7bqm8gRDw-RMQHPQ_mSC6HKpWLXkSJng&#34; alt=&#34;Rust for Java Developers&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Are you a Java programmer looking to move into Rust? While both are popular languages, Rust has a number of performance and security advantages—programs use less memory, are easier to develop, and there’s no garbage collector to fight with. In this course, instructor Tim McNamara shows you how to use your Java experience as a springboard for learning Rust. Tim gives you a tour of Rust’s type system, examines its safety features, and describes how error handling works without exceptions.&lt;/p&gt; &#xA;&lt;h2&gt;Instructions&lt;/h2&gt; &#xA;&lt;p&gt;This repository has branches for each of the videos in the course. You can use the branch pop up menu in github to switch to a specific branch and take a look at the course at that stage, or you can add &lt;code&gt;/tree/BRANCH_NAME&lt;/code&gt; to the URL to go to the branch you want to access.&lt;/p&gt; &#xA;&lt;h2&gt;Branches&lt;/h2&gt; &#xA;&lt;p&gt;The branches are structured to correspond to the videos in the course. The naming convention is &lt;code&gt;CHAPTER#_MOVIE#&lt;/code&gt;, followed by either &lt;code&gt;b&lt;/code&gt; or &lt;code&gt;e&lt;/code&gt; to indicate &#34;beginning&#34; and &#34;end&#34;, respectively. For example, the branch named &lt;code&gt;02_03e&lt;/code&gt; corresponds to the solution video for the challenge presented in the second chapter as the third video in that chapter.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Chapter&lt;/th&gt; &#xA;   &lt;th&gt;Branch&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Challenge: Data Processing&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/LinkedInLearning/rust-for-java-developers-2484214/tree/01_06b&#34;&gt;&lt;code&gt;01_06b&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Solution: Data Processing&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/LinkedInLearning/rust-for-java-developers-2484214/tree/01_06e&#34;&gt;&lt;code&gt;01_06e&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Challenge: Linked List&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/LinkedInLearning/rust-for-java-developers-2484214/tree/02_05b&#34;&gt;&lt;code&gt;02_05b&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Solution: Linked List&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/LinkedInLearning/rust-for-java-developers-2484214/tree/02_05e&#34;&gt;&lt;code&gt;02_05e&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Challenge: Analyze a messy CSV file&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/LinkedInLearning/rust-for-java-developers-2484214/tree/03_03b&#34;&gt;&lt;code&gt;03_03b&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Solution: Analyze a messy CSV file&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/LinkedInLearning/rust-for-java-developers-2484214/tree/03_03e&#34;&gt;&lt;code&gt;03_03e&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Challenge: Count words with map/reduce&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/LinkedInLearning/rust-for-java-developers-2484214/tree/04_04b&#34;&gt;&lt;code&gt;04_04b&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Solution: Count words with map/reduce&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/LinkedInLearning/rust-for-java-developers-2484214/tree/04_04e&#34;&gt;&lt;code&gt;04_04e&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;The &lt;code&gt;b&lt;/code&gt; branch contains the code as it is at the beginning of the movie. The &lt;code&gt;e&lt;/code&gt; branch contains the code as it is at the end of the movie. The &lt;code&gt;main&lt;/code&gt; branch holds the final state of the code when in the course.&lt;/p&gt; &#xA;&lt;p&gt;When switching from one exercise files branch to the next after making changes to the files, you may get a message like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;error: Your local changes to the following files would be overwritten by checkout:        [files]&#xA;Please commit your changes or stash them before you switch branches.&#xA;Aborting&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To resolve this issue:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Add changes to git using this command: git add .&#xA;Commit changes using this command: git commit -m &#34;some message&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Installing&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;To use these exercise files, you must have the following installed: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Rust (version 1.70 or later) and cargo, available from &lt;a href=&#34;https://rustup.org&#34;&gt;https://rustup.org&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Clone this repository into your local machine using the terminal (Mac), CMD (Windows), or a GUI tool like SourceTree.&lt;/li&gt; &#xA; &lt;li&gt;Use a standard Rust workflow, e.g. &lt;code&gt;cargo build&lt;/code&gt; and &lt;code&gt;cargo run&lt;/code&gt; to compile and run programs.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Instructor&lt;/h3&gt; &#xA;&lt;p&gt;Tim McNamara&lt;/p&gt; &#xA;&lt;p&gt;Author, Software Architect&lt;/p&gt; &#xA;&lt;p&gt;Check out my other courses on &lt;a href=&#34;https://www.linkedin.com/learning/instructors/tim-mcnamara&#34;&gt;LinkedIn Learning&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>esp-rs/esp-template</title>
    <updated>2024-03-10T01:49:42Z</updated>
    <id>tag:github.com,2024-03-10:/esp-rs/esp-template</id>
    <link href="https://github.com/esp-rs/esp-template" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A minimal esp-hal application template for use with cargo-generate&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;esp-template&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/esp-rs/esp-template/actions/workflows/ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/esp-rs/esp-template/actions/workflows/ci.yml/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/esp-rs/esp-template/actions/workflows/ci_docker.yml&#34;&gt;&lt;img src=&#34;https://github.com/esp-rs/esp-template/actions/workflows/ci_docker.yml/badge.svg?sanitize=true&#34; alt=&#34;Container CI&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A minimalist template for use with &lt;a href=&#34;https://github.com/cargo-generate/cargo-generate&#34;&gt;cargo-generate&lt;/a&gt; to create &lt;code&gt;no_std&lt;/code&gt; applications targeting Espressif&#39;s line of SoCs and modules. At present, this template supports the &lt;strong&gt;ESP32&lt;/strong&gt;, &lt;strong&gt;ESP32-C2&lt;/strong&gt;, &lt;strong&gt;ESP32-C3&lt;/strong&gt;,&lt;strong&gt;ESP32-C6&lt;/strong&gt;, &lt;strong&gt;ESP32-H2&lt;/strong&gt;, &lt;strong&gt;ESP32-S2&lt;/strong&gt;, and &lt;strong&gt;ESP32-S3&lt;/strong&gt;; additional devices will be added as they become available.&lt;/p&gt; &#xA;&lt;p&gt;To generate a project using this template:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cargo generate esp-rs/esp-template&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After running the command, there will be a few prompts:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;Project Name&lt;/code&gt;: Name of the crate.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;Which MCU to target?&lt;/code&gt;: SoC model.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;Configure advanced template options?&lt;/code&gt;: If &lt;code&gt;false&lt;/code&gt;, skips the rest of the prompts and uses their default value. If &lt;code&gt;true&lt;/code&gt;, you will be prompted with:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;Enable allocations via the esp-alloc crate?&lt;/code&gt;: Adds &lt;a href=&#34;https://github.com/esp-rs/esp-alloc&#34;&gt;&lt;code&gt;esp-alloc&lt;/code&gt;&lt;/a&gt; dependency, and initializes the heap.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Configure project to support Wokwi simulation with Wokwi VS Code extension?&lt;/code&gt;: Adds support for Wokwi simulation using &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=wokwi.wokwi-vscode&#34;&gt;VS Code Wokwi extension&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Setup logging using the log crate?&lt;/code&gt;: Adds &lt;a href=&#34;https://docs.rs/log/latest/log/&#34;&gt;&lt;code&gt;log&lt;/code&gt;&lt;/a&gt; dependency and initializes logging.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Configure project to use Dev Containers (VS Code and GitHub Codespaces)?&lt;/code&gt;: Adds support for: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://code.visualstudio.com/docs/remote/containers#_quick-start-open-an-existing-folder-in-a-container&#34;&gt;VS Code Dev Containers&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://docs.github.com/en/codespaces/developing-in-codespaces/creating-a-codespace&#34;&gt;GitHub Codespaces&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;p&gt;Dev Containers also allow flashing from the container using &lt;a href=&#34;https://github.com/bjoernQ/esp-web-flash-server&#34;&gt;web flash&lt;/a&gt; and have the &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=wokwi.wokwi-vscode&#34;&gt;VS Code Wokwi extension&lt;/a&gt; already installed.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For a more detailed explanation of the template, see &lt;a href=&#34;https://esp-rs.github.io/book/writing-your-own-application/generate-project/esp-template.html&#34;&gt;Understanding esp-template&lt;/a&gt; chapter of &lt;a href=&#34;https://esp-rs.github.io/book/&#34;&gt;The Rust on ESP Book&lt;/a&gt;. If you&#39;re seeking a beginner&#39;s guide for utilizing &lt;code&gt;no_std&lt;/code&gt; (bare metal), consult the &lt;a href=&#34;https://esp-rs.github.io/no_std-training/&#34;&gt;Embedded Rust (no_std) on Espressif&lt;/a&gt; training.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Licensed under either of:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Apache License, Version 2.0 (&lt;a href=&#34;https://raw.githubusercontent.com/esp-rs/esp-template/main/LICENSE-APACHE&#34;&gt;LICENSE-APACHE&lt;/a&gt; or &lt;a href=&#34;http://www.apache.org/licenses/LICENSE-2.0&#34;&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;MIT license (&lt;a href=&#34;https://raw.githubusercontent.com/esp-rs/esp-template/main/LICENSE-MIT&#34;&gt;LICENSE-MIT&lt;/a&gt; or &lt;a href=&#34;http://opensource.org/licenses/MIT&#34;&gt;http://opensource.org/licenses/MIT&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;at your option.&lt;/p&gt; &#xA;&lt;h3&gt;Contribution&lt;/h3&gt; &#xA;&lt;p&gt;Unless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>ublue-os/cosmic</title>
    <updated>2024-03-10T01:49:42Z</updated>
    <id>tag:github.com,2024-03-10:/ublue-os/cosmic</id>
    <link href="https://github.com/ublue-os/cosmic" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Fedora Atomic based OSTree Image with the COSMIC desktop environment. Thanks to Drakulix for initial image.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Fedora Cosmic Atomic&lt;/h1&gt; &#xA;&lt;h3&gt;Fedora Silverblue-based Atomic Desktop with the Pre-Alpha Cosmic Desktop Environment Included!&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;NOTE: These images are not associated with System76! If you have issues, please understand they might be COSMIC related, OR they might be related to this image.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Like Fedora? Want to try the latest from the work in progress Cosmic Desktop Environment? Want to help find bugs and/or contribute to Cosmic development, but don&#39;t want to work in a VM or install Pop!_OS? None of the above things but something else??!?&lt;/p&gt; &#xA;&lt;p&gt;Go ahead and try one of the ostree images I&#39;ve created here!&lt;/p&gt; &#xA;&lt;h3&gt;Quick Installation&lt;/h3&gt; &#xA;&lt;p&gt;Install an rpm-ostree based desktop, like &lt;a href=&#34;https://fedoraproject.org/atomic-desktops/silverblue/&#34;&gt;Fedora Silverblue&lt;/a&gt; (aka atomic desktops)&lt;/p&gt; &#xA;&lt;h4&gt;Warning&lt;/h4&gt; &#xA;&lt;p&gt;This image requires disabling SELinux. This is NOT recommended for production and is a temporary situation until this work is finished in upstream Fedora.&lt;/p&gt; &#xA;&lt;p&gt;Edit &lt;code&gt;/etc/selinux/config&lt;/code&gt;, set from &lt;code&gt;enforcing&lt;/code&gt; to &lt;code&gt;permissive&lt;/code&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note: Rebase to an unsigned image before rebasing to the signed cosmic images below!&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ sudo rpm-ostree rebase ostree-unverified-registry:ghcr.io/ublue-os/cosmic-base:40-amd64&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run this command to rebase onto the signed image:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ sudo rpm-ostree rebase ostree-image-signed:docker://ghcr.io/ublue-os/cosmic-base:40-amd64&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or this command if you&#39;re running an arm device:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ sudo rpm-ostree rebase ostree-image-signed:docker://ghcr.io/ublue-os/cosmic-base:40-arm64&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Reboot&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;systemctl reboot&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Enabling the display manager&lt;/h3&gt; &#xA;&lt;p&gt;Log in with your username and password, then run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo systemctl enable cosmic-greeter.service&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Neofetch&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ublue-os/cosmic/main/screenshot/cosmic-neofetch.png&#34; alt=&#34;Neofetch of COSMIC desktop in Fedora&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Issues&lt;/h3&gt; &#xA;&lt;p&gt;For issues with the containers, feel free to submit an issue on this repo. For COSMIC related issues, please see &lt;a href=&#34;https://github.com/pop-os/cosmic-epoch&#34;&gt;https://github.com/pop-os/cosmic-epoch&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note: The COSMIC Desktop Environment is still PRE ALPHA. Do not daily drive this image on your main workstation unless you know what you&#39;re doing.&lt;/p&gt; &#xA;&lt;/blockquote&gt;</summary>
  </entry>
</feed>