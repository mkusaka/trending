<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dockerfile Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-10-06T01:42:38Z</updated>
  <subtitle>Weekly Trending of Dockerfile in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ublue-os/image-template</title>
    <updated>2024-10-06T01:42:38Z</updated>
    <id>tag:github.com,2024-10-06:/ublue-os/image-template</id>
    <link href="https://github.com/ublue-os/image-template" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Build your own custom Universal Blue Image!&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;image-template&lt;/h1&gt; &#xA;&lt;h1&gt;Purpose&lt;/h1&gt; &#xA;&lt;p&gt;This repository is meant to be a template for building your own custom Universal Blue image. This template is the recommended way to make customizations to any image published by the Universal Blue Project:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://getaurora.dev/&#34;&gt;Aurora&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://bazzite.gg/&#34;&gt;Bazzite&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://projectbluefin.io/&#34;&gt;Bluefin&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://projectucore.io/&#34;&gt;uCore&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ublue-os/main/&#34;&gt;main&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ublue-os/hwe/&#34;&gt;hwe&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This template includes a Containerfile and a Github workflow for building the container image. As soon as the workflow is enabled in your repository, it will build the container image and push it to the Github Container Registry.&lt;/p&gt; &#xA;&lt;h1&gt;Prerequisites&lt;/h1&gt; &#xA;&lt;p&gt;Working knowledge in the following topics:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Containers &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=SnSH8Ht3MIc&#34;&gt;https://www.youtube.com/watch?v=SnSH8Ht3MIc&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.mankier.com/5/Containerfile&#34;&gt;https://www.mankier.com/5/Containerfile&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;rpm-ostree &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://coreos.github.io/rpm-ostree/container/&#34;&gt;https://coreos.github.io/rpm-ostree/container/&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Fedora Silverblue (and other Fedora Atomic variants) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://docs.fedoraproject.org/en-US/fedora-silverblue/&#34;&gt;https://docs.fedoraproject.org/en-US/fedora-silverblue/&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Github Workflows &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://docs.github.com/en/actions/using-workflows&#34;&gt;https://docs.github.com/en/actions/using-workflows&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;How to Use&lt;/h1&gt; &#xA;&lt;h2&gt;Template&lt;/h2&gt; &#xA;&lt;p&gt;Select &lt;code&gt;Use this Template&lt;/code&gt; and create a new repository from it. To enable the workflows, you may need to go the &lt;code&gt;Actions&lt;/code&gt; tab of the new repository and click to enable workflows.&lt;/p&gt; &#xA;&lt;h2&gt;Containerfile&lt;/h2&gt; &#xA;&lt;p&gt;This file defines the operations used to customize the selected image. It contains examples of possible modifications, including how to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;change the upstream from which the custom image is derived&lt;/li&gt; &#xA; &lt;li&gt;add additional RPM packages&lt;/li&gt; &#xA; &lt;li&gt;add binaries as a layer from other images&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Workflows&lt;/h2&gt; &#xA;&lt;h3&gt;build.yml&lt;/h3&gt; &#xA;&lt;p&gt;This workflow creates your custom OCI image and publishes it to the Github Container Registry (GHCR). By default, the image name will match the Github repository name.&lt;/p&gt; &#xA;&lt;h4&gt;Container Signing&lt;/h4&gt; &#xA;&lt;p&gt;Container signing is important for end-user security and is enabled on all Universal Blue images. It is recommended you set this up, and by default the image builds &lt;em&gt;will fail&lt;/em&gt; if you don&#39;t.&lt;/p&gt; &#xA;&lt;p&gt;This provides users a method of verifying the image.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Install the &lt;a href=&#34;https://edu.chainguard.dev/open-source/sigstore/cosign/how-to-install-cosign/#installing-cosign-with-the-cosign-binary&#34;&gt;cosign CLI tool&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run inside your repo folder:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cosign generate-key-pair&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Do NOT put in a password when it asks you to, just press enter. The signing key will be used in GitHub Actions and will not work if it is encrypted.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!WARNING] Be careful to &lt;em&gt;never&lt;/em&gt; accidentally commit &lt;code&gt;cosign.key&lt;/code&gt; into your git repo.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;Add the private key to GitHub&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;This can also be done manually. Go to your repository settings, under Secrets and Variables -&amp;gt; Actions &lt;img src=&#34;https://user-images.githubusercontent.com/1264109/216735595-0ecf1b66-b9ee-439e-87d7-c8cc43c2110a.png&#34; alt=&#34;image&#34;&gt; Add a new secret and name it &lt;code&gt;SIGNING_SECRET&lt;/code&gt;, then paste the contents of &lt;code&gt;cosign.key&lt;/code&gt; into the secret and save it. Make sure it&#39;s the .key file and not the .pub file. Once done, it should look like this: &lt;img src=&#34;https://user-images.githubusercontent.com/1264109/216735690-2d19271f-cee2-45ac-a039-23e6a4c16b34.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;(CLI instructions) If you have the &lt;code&gt;github-cli&lt;/code&gt; installed, run:&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gh secret set SIGNING_SECRET &amp;lt; cosign.key&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Commit the &lt;code&gt;cosign.pub&lt;/code&gt; file into your git repository&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
  <entry>
    <title>lukechilds/dockerpi</title>
    <updated>2024-10-06T01:42:38Z</updated>
    <id>tag:github.com,2024-10-06:/lukechilds/dockerpi</id>
    <link href="https://github.com/lukechilds/dockerpi" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Virtualised Raspberry Pi inside a Docker image&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img width=&#34;256&#34; src=&#34;https://raw.githubusercontent.com/lukechilds/dockerpi/master/media/logo.svg?sanitize=true&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;h1&gt;dockerpi&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://hub.docker.com/r/lukechilds/dockerpi/&#34;&gt;&lt;img src=&#34;https://badgen.net/docker/pulls/lukechilds/dockerpi?icon=docker&amp;amp;label=Docker%20pulls&#34; alt=&#34;Docker Pulls&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/lukechilds/dockerpi/tags&#34;&gt;&lt;img src=&#34;https://badgen.net/docker/size/lukechilds/dockerpi/latest/amd64?icon=docker&amp;amp;label=lukechilds/dockerpi&#34; alt=&#34;Docker Image Size&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/sponsors/lukechilds&#34;&gt;&lt;img src=&#34;https://badgen.net/badge/GitHub/Sponsor/D959A7?icon=github&#34; alt=&#34;GitHub Donate&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://lu.ke/tip/bitcoin&#34;&gt;&lt;img src=&#34;https://badgen.net/badge/Bitcoin/Donate/F19537?icon=bitcoin&#34; alt=&#34;Bitcoin Donate&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://lu.ke/tip/lightning&#34;&gt;&lt;img src=&#34;https://badgen.net/badge/Lightning/Donate/F6BC41?icon=bitcoin-lightning&#34; alt=&#34;Lightning Donate&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;A Virtualised Raspberry Pi inside a Docker image&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Gives you access to a virtualised ARM based Raspberry Pi machine running the Raspian operating system.&lt;/p&gt; &#xA;&lt;p&gt;This is not just a Raspian Docker image, it&#39;s a full ARM based Raspberry Pi virtual machine environment.&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/lukechilds/dockerpi/master/media/demo.svg?sanitize=true&#34; width=&#34;720&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run -it lukechilds/dockerpi&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default all filesystem changes will be lost on shutdown. You can persist filesystem changes between reboots by mounting the &lt;code&gt;/sdcard&lt;/code&gt; volume on your host:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run -it -v $HOME/.dockerpi:/sdcard lukechilds/dockerpi&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you have a specific image you want to mount you can mount it at &lt;code&gt;/sdcard/filesystem.img&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run -it -v /2019-09-26-raspbian-buster-lite.img:/sdcard/filesystem.img lukechilds/dockerpi&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you only want to mount your own image, you can download a much slimmer VM only Docker container that doesn&#39;t contain the Raspbian filesystem image:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://hub.docker.com/r/lukechilds/dockerpi/tags?name=latest&#34;&gt;&lt;img src=&#34;https://badgen.net/docker/size/lukechilds/dockerpi/latest/amd64?icon=docker&amp;amp;label=lukechilds/dockerpi:latest&#34; alt=&#34;Docker Image Size&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/lukechilds/dockerpi/tags?name=vm&#34;&gt;&lt;img src=&#34;https://badgen.net/docker/size/lukechilds/dockerpi/vm/amd64?icon=docker&amp;amp;label=lukechilds/dockerpi:vm&#34; alt=&#34;Docker Image Size&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run -it -v /2019-09-26-raspbian-buster-lite.img:/sdcard/filesystem.img lukechilds/dockerpi:vm&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Which machines are supported?&lt;/h2&gt; &#xA;&lt;p&gt;By default a Raspberry Pi 1 is virtualised, however experimental support has been added for Pi 2 and Pi 3 machines.&lt;/p&gt; &#xA;&lt;p&gt;You can specify a machine by passing the name as a CLI argument:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run -it lukechilds/dockerpi pi1&#xA;docker run -it lukechilds/dockerpi pi2&#xA;docker run -it lukechilds/dockerpi pi3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; In the Pi 2 and Pi 3 machines, QEMU hangs once the machines are powered down requiring you to &lt;code&gt;docker kill&lt;/code&gt; the container. See &lt;a href=&#34;https://github.com/lukechilds/dockerpi/pull/4&#34;&gt;#4&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Wait, what?&lt;/h2&gt; &#xA;&lt;p&gt;A full ARM environment is created by using Docker to bootstrap a QEMU virtual machine. The Docker QEMU process virtualises a machine with a single core ARM11 CPU and 256MB RAM, just like the Raspberry Pi. The official Raspbian image is mounted and booted along with a modified QEMU compatible kernel.&lt;/p&gt; &#xA;&lt;p&gt;You&#39;ll see the entire boot process logged to your TTY until you&#39;re prompted to log in with the username/password pi/raspberry.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pi@raspberrypi:~$ uname -a&#xA;Linux raspberrypi 4.19.50+ #1 Tue Nov 26 01:49:16 CET 2019 armv6l GNU/Linux&#xA;pi@raspberrypi:~$ cat /etc/os-release | head -n 1&#xA;PRETTY_NAME=&#34;Raspbian GNU/Linux 10 (buster)&#34;&#xA;pi@raspberrypi:~$ cat /proc/cpuinfo&#xA;processor       : 0&#xA;model name      : ARMv6-compatible processor rev 7 (v6l)&#xA;BogoMIPS        : 798.31&#xA;Features        : half thumb fastmult vfp edsp java tls&#xA;CPU implementer : 0x41&#xA;CPU architecture: 7&#xA;CPU variant     : 0x0&#xA;CPU part        : 0xb76&#xA;CPU revision    : 7&#xA;&#xA;Hardware        : ARM-Versatile (Device Tree Support)&#xA;Revision        : 0000&#xA;Serial          : 0000000000000000&#xA;pi@raspberrypi:~$ free -h&#xA;              total        used        free      shared  buff/cache   available&#xA;Mem:          246Mi        20Mi       181Mi       1.0Mi        44Mi       179Mi&#xA;Swap:          99Mi          0B        99Mi&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Build&lt;/h2&gt; &#xA;&lt;p&gt;Build this image yourself by checking out this repo, &lt;code&gt;cd&lt;/code&gt; ing into it and running:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker build -t lukechilds/dockerpi .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Build the VM only image with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker build -t lukechilds/dockerpi:vm --target dockerpi-vm .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Credit&lt;/h2&gt; &#xA;&lt;p&gt;Thanks to &lt;a href=&#34;https://github.com/dhruvvyas90&#34;&gt;@dhruvvyas90&lt;/a&gt; for his &lt;a href=&#34;https://github.com/dhruvvyas90/qemu-rpi-kernel&#34;&gt;dhruvvyas90/qemu-rpi-kernel&lt;/a&gt; repo.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;MIT © Luke Childs&lt;/p&gt;</summary>
  </entry>
</feed>