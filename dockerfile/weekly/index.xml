<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dockerfile Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-04T02:09:44Z</updated>
  <subtitle>Weekly Trending of Dockerfile in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>apache/apisix-docker</title>
    <updated>2022-06-04T02:09:44Z</updated>
    <id>tag:github.com,2022-06-04:/apache/apisix-docker</id>
    <link href="https://github.com/apache/apisix-docker" rel="alternate"></link>
    <summary type="html">&lt;p&gt;the docker for Apache APISIX&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;What is APISIX&lt;/h2&gt; &#xA;&lt;p&gt;Apache APISIX is a dynamic, real-time, high-performance API gateway. APISIX provides rich traffic management features such as load balancing, dynamic upstream, canary release, circuit breaking, authentication, observability, and more.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://apisix.apache.org/&#34;&gt;the APISIX website&lt;/a&gt; for more info.&lt;/p&gt; &#xA;&lt;h2&gt;How to run APISIX&lt;/h2&gt; &#xA;&lt;p&gt;APISIX can be run using docker compose or using the &lt;code&gt;all-in-one&lt;/code&gt; image. It is recommended to use docker compose to run APISIX, as &lt;code&gt;all-in-one&lt;/code&gt; deploys all dependencies in a single container and should be used for quick testing. If you want to manually deploy services, please refer to &lt;a href=&#34;https://github.com/apache/apisix-docker/raw/master/docs/en/latest/manual.md&#34;&gt;this guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Run APISIX with docker-compose&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/apache/apisix-docker/raw/master/example&#34;&gt;The apisix-docker repo&lt;/a&gt; contains an example docker-compose file and config files that show how to start APISIX using docker compose. For the sake of completeness, this docker-compose file also starts &lt;a href=&#34;https://hub.docker.com/r/apache/apisix-dashboard&#34;&gt;APISIX dashboard&lt;/a&gt;, which is a frontend interface that makes it easy for users to interact with APISIX, along with Prometheus and Grafana.&lt;/p&gt; &#xA;&lt;p&gt;To try out this example:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Clone the &lt;a href=&#34;https://github.com/apache/apisix-docker&#34;&gt;repo&lt;/a&gt; and cd into the root folder.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;git clone &#39;https://github.com/apache/apisix-docker&#39;&#xA;cd apisix-docker&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Start APISIX.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;cd example&#xA;&#xA;docker-compose -p docker-apisix up -d&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Check if APISIX is running properly by running this command and checking the response.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;curl &#34;http://127.0.0.1:9080/apisix/admin/services/&#34; -H &#39;X-API-KEY: edd1c9f034335f136f87ad84b625c8f1&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The response indicates that apisix is running successfully:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;{&#xA;  &#34;count&#34;:0,&#xA;  &#34;action&#34;:&#34;get&#34;,&#xA;  &#34;node&#34;:{&#xA;    &#34;key&#34;:&#34;/apisix/services&#34;,&#xA;    &#34;nodes&#34;:[],&#xA;    &#34;dir&#34;:true&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://github.com/apache/apisix-docker/raw/master/example/docker-compose.yml&#34;&gt;example docker compose file&lt;/a&gt; defines several services: &lt;code&gt;apisix-dashboard, apisix, etcd, web1, web2, prometheus, and grafana&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;apisix-dashboard, apisix, etcd&lt;/code&gt; are the essential services required for starting apisix-dashboard, apisix, and etcd.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;web1, web2&lt;/code&gt; are sample backend services used for testing purposes. They use nginx-alpine image.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;prometheus, grafana&lt;/code&gt; are services used for exposing metrics of the running services.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;All the services are configured by mounting external configuration files onto the containers: &lt;a href=&#34;https://github.com/apache/apisix-docker/raw/master/example/apisix_conf/config.yaml&#34;&gt;/apisix_conf/conf.yaml&lt;/a&gt; defines the configs for apisix. Similarly, configs for etcd, prometheus, and grafana are located in &lt;a href=&#34;https://github.com/apache/apisix-docker/raw/master/example/etcd_conf/etcd.conf.yml&#34;&gt;/etcd_conf/etcd.conf.yml&lt;/a&gt;, &lt;a href=&#34;https://github.com/apache/apisix-docker/raw/master/example/prometheus_conf/prometheus.yml&#34;&gt;/prometheus_conf/prometheus.yml&lt;/a&gt;, and &lt;a href=&#34;https://github.com/apache/apisix-docker/tree/master/example/grafana_conf/config&#34;&gt;/grafana_conf/config&lt;/a&gt; respectively.&lt;/p&gt; &#xA;&lt;p&gt;If you want to use a config file located at a different path, you need to modify the local config file path in the &lt;code&gt;volumes&lt;/code&gt; entry under the corresponding service.&lt;/p&gt; &#xA;&lt;h3&gt;Run APISIX with all-in-one command&lt;/h3&gt; &#xA;&lt;p&gt;A quick way to get APISIX running on alpine is to use the &lt;code&gt;all-in-one&lt;/code&gt; docker image, which deploys all dependencies in one Docker container. You can find the dockerfile &lt;a href=&#34;https://github.com/apache/apisix-docker/raw/master/all-in-one/apisix/Dockerfile&#34;&gt;here&lt;/a&gt;. The image utilizes &lt;a href=&#34;https://docs.docker.com/develop/develop-images/multistage-build/&#34;&gt;multi-stage build&lt;/a&gt;, building APISIX layer and etcd layer first, then copying the nesessary artifacts to the alpine layer.&lt;/p&gt; &#xA;&lt;p&gt;To try out this example:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Make sure that you are in the root folder of apisix-docker.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;make build-all-in-one&lt;/code&gt; to build the &lt;code&gt;all-in-one&lt;/code&gt; image.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Launch the APISIX container:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker run -d \&#xA;-p 9080:9080 -p 9091:9091 -p 2379:2379 \&#xA;-v `pwd`/all-in-one/apisix/config.yaml:/usr/local/apisix/conf/config.yaml \&#xA;apache/apisix:whole&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Check if APISIX is running properly by running this command and checking the response.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;curl &#34;http://127.0.0.1:9080/apisix/admin/services/&#34; -H &#39;X-API-KEY: edd1c9f034335f136f87ad84b625c8f1&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The response indicates that apisix is running successfully:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;{&#xA;  &#34;count&#34;:0,&#xA;  &#34;action&#34;:&#34;get&#34;,&#xA;  &#34;node&#34;:{&#xA;    &#34;key&#34;:&#34;/apisix/services&#34;,&#xA;    &#34;nodes&#34;:[],&#xA;    &#34;dir&#34;:true&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;The configuration file for the service is located at &lt;a href=&#34;https://github.com/apache/apisix-docker/raw/master/all-in-one/apisix/config.yaml&#34;&gt;/all-in-one/apisix/config.yaml&lt;/a&gt;. It is mounted onto the container at runtime.&lt;/p&gt; &#xA;&lt;h2&gt;How To Build this Image&lt;/h2&gt; &#xA;&lt;p&gt;The apisix-docker repo contains a list of makefile commands which makes it easy to build images. To use these commands, clone &lt;a href=&#34;https://github.com/apache/apisix-docker&#34;&gt;the repo&lt;/a&gt; and cd into its root folder.&lt;/p&gt; &#xA;&lt;p&gt;There are two build arguments that can be set: &lt;code&gt;APISIX_VERSION&lt;/code&gt;: To build the APISIX image, specify the version of APISIX by setting &lt;code&gt;APISIX_VERSION&lt;/code&gt;. The latest. release version can be found here &lt;a href=&#34;https://github.com/apache/apisix/releases&#34;&gt;apisix/releases&lt;/a&gt;. &lt;code&gt;ENABLE_PROXY&lt;/code&gt;: Set &lt;code&gt;ENABLE_PROXY=true&lt;/code&gt; to enable the proxy to accelerate the build process.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# make sure that you are in the root folder of https://github.com/apache/apisix-docker&#xA;# The latest release version can be find at `https://github.com/apache/apisix/releases`, for example: 2.9&#xA;export APISIX_VERSION=2.9&#xA;&#xA;# build alpine based image&#xA;make build-on-alpine&#xA;&#xA;# build centos based image&#xA;make build-on-centos&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, you can build APISIX from your local code.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# To copy the local apisix into image, we need to include it in build context&#xA;cp -r &amp;lt;APISIX-PATH&amp;gt; ./apisix&#xA;&#xA;export APISIX_PATH=./apisix&#xA;make build-on-alpine-local&#xA;&#xA;# Might need root privilege if encounter &#34;error checking context: &#39;can&#39;t start&#39;&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; For Chinese, the following command is always recommended. The additional build argument &lt;code&gt;ENABLE_PROXY=true&lt;/code&gt; will enable proxy to definitely accelerate the progress.&lt;/p&gt; &#xA;&lt;h3&gt;Note&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Prometheus&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Apache APISIX expose prometheus metrics port on 9091, and you need to expose it to &lt;code&gt;0.0.0.0&lt;/code&gt; instead of the default &lt;code&gt;127.0.0.1&lt;/code&gt; to make it accessible outside docker. You could achieve it with adding the following to your &lt;code&gt;config.yaml&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;plugin_attr:&#xA;  prometheus:&#xA;    export_addr:&#xA;      ip: &#34;0.0.0.0&#34;&#xA;      port: 9091&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;APISIX-Dev Image&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;At &lt;code&gt;0:00 UTC&lt;/code&gt; every day, the APISIX &lt;code&gt;master&lt;/code&gt; code will be automatically built and synchronized to the Docker Hub repository. You can pull the latest master branch image in the following ways.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker pull apache/apisix:dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Image variants&lt;/h2&gt; &#xA;&lt;p&gt;The APISIX image comes in many flavors, each designed for a specific use case.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;apisix:&amp;lt;version&amp;gt;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;This is the default image. If you are unsure about what your needs are, this is your go-to option.you can use it as a throw away container (mount your source code and start the container to start your applications), as well as the base to build other images of.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;apisix:&amp;lt;version&amp;gt;-alpine&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;This image is based on the popular Alpine Linux project. Since Alpine Linux is much smaller than most distribution Linux images (~5MB), you can build smaller images with it.&lt;/p&gt; &#xA;&lt;p&gt;This variant is useful when storage compatibility is your primary concern. The main caveat to note is that it does use &lt;code&gt;musl libc&lt;/code&gt; instead of &lt;code&gt;glibc&lt;/code&gt; and friends, so software will often run into issues depending on the depth of their &lt;code&gt;libc requirements/assumptions&lt;/code&gt;. See this &lt;a href=&#34;https://news.ycombinator.com/item?id=10782897&#34;&gt;Hacker News comment thread&lt;/a&gt; for more discussion of the issues that might arise and some advantages and disadvantages comparisons of using Alpine-based images.&lt;/p&gt; &#xA;&lt;p&gt;To minimize the image size, additional tools, such as git and bash, are not included in Alpine-based images. Using this image as a base, add the things you need in your own Dockerfile (see the &lt;a href=&#34;https://hub.docker.com/_/alpine/&#34;&gt;alpine image description&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;apisix:&amp;lt;version&amp;gt;-centos&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;This image is based on the CentOS Linux project, available in the centos official image. CentOS is derived from the sources of Red Hat Enterprise Linux (RHEL). It is considered to be a more stable distribution compared to Ubuntu, mainly because package updates are less frequent.&lt;/p&gt; &#xA;&lt;p&gt;The variant is useful when your primary concern is stability and want to minimize the number of image updates. The applications running on CentOS don&#39;t need to be updated as often owing to the lesser frequency of its updates, and the cost is also very less than compared with other Linux essentials.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>MithunTechnologiesDevOps/metrics-server</title>
    <updated>2022-06-04T02:09:44Z</updated>
    <id>tag:github.com,2022-06-04:/MithunTechnologiesDevOps/metrics-server</id>
    <link href="https://github.com/MithunTechnologiesDevOps/metrics-server" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Kubernetes Metrics Server&lt;/h1&gt; &#xA;&lt;p&gt;Metrics-server aggregates resource consumption data like CPU and memory usage for Kubernetes nodes, pods and containers. These metrics are collected from the API exposed by the Kubelet on each node.&lt;/p&gt; &#xA;&lt;p&gt;The metrics server is commonly used by other Kubernetes add ons, such as the Horizontal Pod Autoscaler or the Kubernetes Dashboard.&lt;/p&gt; &#xA;&lt;p&gt;It is not deployed by default.&lt;/p&gt; &#xA;&lt;h2&gt;Deployment&lt;/h2&gt; &#xA;&lt;p&gt;In order to deploy metrics-server in your kubernetes master machine clone &lt;a href=&#34;https://github.com/MithunTechnologiesDevOps/metrics-server.git&#34;&gt;https://github.com/MithunTechnologiesDevOps/metrics-server.git&lt;/a&gt; and run the following command from the top-level directory(metrics-server) of this repository:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ kubectl apply -f deploy/1.8+/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;# Display node metrics&#xA;$ kubectl top nodes&#xA;&#xA;# Display pod metrics&#xA;$ kubectl top pods&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;User guide&lt;/h2&gt; &#xA;&lt;p&gt;You can find the user guide in &lt;a href=&#34;https://kubernetes.io/docs/tasks/debug-application-cluster/resource-metrics-pipeline/&#34;&gt;the official Kubernetes documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Design&lt;/h2&gt; &#xA;&lt;p&gt;The detailed design of the project can be found in the following docs:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/kubernetes/community/raw/master/contributors/design-proposals/instrumentation/resource-metrics-api.md&#34;&gt;Metrics API&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/kubernetes/community/raw/master/contributors/design-proposals/instrumentation/metrics-server.md&#34;&gt;Metrics Server&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/kubernetes-sigs/metrics-server.git&#34;&gt;Metrics Server Git Hub&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For the broader view of monitoring in Kubernetes take a look into &lt;a href=&#34;https://github.com/kubernetes/community/raw/master/contributors/design-proposals/instrumentation/monitoring_architecture.md&#34;&gt;Monitoring architecture&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>aws/aws-codebuild-docker-images</title>
    <updated>2022-06-04T02:09:44Z</updated>
    <id>tag:github.com,2022-06-04:/aws/aws-codebuild-docker-images</id>
    <link href="https://github.com/aws/aws-codebuild-docker-images" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Official AWS CodeBuild repository for managed Docker images http://docs.aws.amazon.com/codebuild/latest/userguide/build-env-ref.html&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;AWS CodeBuild curated Docker images&lt;/h1&gt; &#xA;&lt;p&gt;This repository holds Dockerfiles of official AWS CodeBuild curated Docker images. Please refer to &lt;a href=&#34;http://docs.aws.amazon.com/codebuild/latest/userguide/build-env-ref.html&#34;&gt;the AWS CodeBuild User Guide&lt;/a&gt; for list of environments supported by AWS CodeBuild.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://codebuild.us-west-2.amazonaws.com/badges?uuid=eyJlbmNyeXB0ZWREYXRhIjoiSkJibVVQVEpvUms1cmw3YVlnU1hSdkpBQ0c5SFgyTkJXMFBFdEU2SWtySHREcUlUVlRhbW4zMEd3NlhsOWIzUWgvRkxhUWVSSTFPZGNNakNHRVNLalY0PSIsIml2UGFyYW1ldGVyU3BlYyI6IlV0QjBRZXRvS0F5dE5vbTciLCJtYXRlcmlhbFNldFNlcmlhbCI6MX0%3D&amp;amp;branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The master branch will sometimes have changes that are still in the process of being released in AWS CodeBuild. See the latest released versions of the Dockerfiles &lt;a href=&#34;https://github.com/aws/aws-codebuild-docker-images/releases&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;How to build Docker images&lt;/h3&gt; &#xA;&lt;p&gt;Steps to build Standard 5.0 image&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Run &lt;code&gt;git clone https://github.com/aws/aws-codebuild-docker-images.git&lt;/code&gt; to download this repository to your local machine&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;cd ubuntu/standard/5.0&lt;/code&gt; to change the directory in your local workspace. This is the location of the Standard 5.0 Dockerfile with Ubuntu base.&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;docker build -t aws/codebuild/standard:5.0 .&lt;/code&gt; to build Docker image locally&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To poke around in the image interactively, build it and run: &lt;code&gt;docker run -it --entrypoint sh aws/codebuild/standard:5.0 -c bash&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;To let the Docker daemon start up in the container, build it and run: &lt;code&gt;docker run -it --privileged aws/codebuild/standard:5.0 bash&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ git clone https://github.com/aws/aws-codebuild-docker-images.git&#xA;$ cd aws-codebuild-docker-images&#xA;$ cd ubuntu/standard/5.0&#xA;$ docker build -t aws/codebuild/standard:5.0 .&#xA;$ docker run -it --entrypoint sh aws/codebuild/standard:5.0 -c bash&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Image maintenance&lt;/h3&gt; &#xA;&lt;p&gt;Some of the images in this repository are no longer actively maintained by AWS CodeBuild and may no longer build successfully. These images will not receive any further updates. They remain in this repository as a reference for the contents of these images that were previously released by CodeBuild.&lt;/p&gt; &#xA;&lt;p&gt;The following images are actively maintained by AWS CodeBuild, and are listed in the CodeBuild console.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aws/aws-codebuild-docker-images/master/ubuntu/standard/3.0&#34;&gt;standard 3.0&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aws/aws-codebuild-docker-images/master/ubuntu/standard/4.0&#34;&gt;standard 4.0&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aws/aws-codebuild-docker-images/master/ubuntu/standard/5.0&#34;&gt;standard 5.0&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aws/aws-codebuild-docker-images/master/al2/x86_64/standard/2.0&#34;&gt;amazonlinux2-x86_64-standard:2.0&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aws/aws-codebuild-docker-images/master/al2/x86_64/standard/3.0&#34;&gt;amazonlinux2-x86_64-standard:3.0&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aws/aws-codebuild-docker-images/master/al2/aarch64/standard/1.0&#34;&gt;amazonlinux2-aarch64-standard:1.0&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aws/aws-codebuild-docker-images/master/al2/aarch64/standard/2.0&#34;&gt;amazonlinux2-aarch64-standard:2.0&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>