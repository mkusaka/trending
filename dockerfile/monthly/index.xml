<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dockerfile Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-03-01T02:02:00Z</updated>
  <subtitle>Monthly Trending of Dockerfile in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>LinkedInLearning/data-engineering-with-data-build-tool-dbt-4458303</title>
    <updated>2024-03-01T02:02:00Z</updated>
    <id>tag:github.com,2024-03-01:/LinkedInLearning/data-engineering-with-data-build-tool-dbt-4458303</id>
    <link href="https://github.com/LinkedInLearning/data-engineering-with-data-build-tool-dbt-4458303" rel="alternate"></link>
    <summary type="html">&lt;p&gt;This is a code repository for the course Data Engineering with Data Build Tool (DBT).&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Data Engineering with Data Build Tool (DBT)&lt;/h1&gt; &#xA;&lt;p&gt;This is the repository for the LinkedIn Learning course &lt;code&gt;Data Engineering with Data Build Tool (DBT)&lt;/code&gt;. The full course is available from &lt;a href=&#34;https://www.linkedin.com/learning/data-engineering-with-dbt&#34;&gt;LinkedIn Learning&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://media.licdn.com/dms/image/D560DAQHnrbGtKKAabg/learning-public-crop_675_1200/0/1703199806902?e=2147483647&amp;amp;v=beta&amp;amp;t=Q6jKFTslSvhl3bYTkd0PuIEVnIx26lCa-XWVE5hCmm0&#34; alt=&#34;course-name-alt-text&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Data Build Tool (dbt) has quickly become an essential tool in many data stacks ranging from startups to big tech for managing data transformations. In this course, data engineer Mark Freeman helps you get started with setting up, running, and managing a dbt project via the open-source offering dbt Core. Learn how to install dbt Core, configure an environment for dbt, create and manage a dbt project, and deploy a dbt project in production. If youâ€™re a data professional tasked with implementing dbt within your organization, recently joined a team utilizing dbt and need to upskill, or just want to learn about dbt to increase your competitiveness within the data job market, check out this course.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;See the readme file in the main branch for updated instructions and information.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Instructions&lt;/h2&gt; &#xA;&lt;p&gt;This repository has branches for each of the videos in the course. You can use the branch pop up menu in github to switch to a specific branch and take a look at the course at that stage, or you can add &lt;code&gt;/tree/BRANCH_NAME&lt;/code&gt; to the URL to go to the branch you want to access.&lt;/p&gt; &#xA;&lt;h2&gt;Branches&lt;/h2&gt; &#xA;&lt;p&gt;The branches are structured to correspond to the videos in the course. The naming convention is &lt;code&gt;CHAPTER#_MOVIE#&lt;/code&gt;. As an example, the branch named &lt;code&gt;02_03&lt;/code&gt; corresponds to the second chapter and the third video in that chapter. Some branches will have a beginning and an end state. These are marked with the letters &lt;code&gt;b&lt;/code&gt; for &#34;beginning&#34; and &lt;code&gt;e&lt;/code&gt; for &#34;end&#34;. The &lt;code&gt;b&lt;/code&gt; branch contains the code as it is at the beginning of the movie. The &lt;code&gt;e&lt;/code&gt; branch contains the code as it is at the end of the movie. The &lt;code&gt;main&lt;/code&gt; branch holds the final state of the code when in the course.&lt;/p&gt; &#xA;&lt;p&gt;When switching from one exercise files branch to the next after making changes to the files, you may get a message like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;error: Your local changes to the following files would be overwritten by checkout:        [files]&#xA;Please commit your changes or stash them before you switch branches.&#xA;Aborting&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To resolve this issue:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Add changes to git using this command: git add .&#xA;Commit changes using this command: git commit -m &#34;some message&#34;&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>sprintcube/docker-compose-lamp</title>
    <updated>2024-03-01T02:02:00Z</updated>
    <id>tag:github.com,2024-03-01:/sprintcube/docker-compose-lamp</id>
    <link href="https://github.com/sprintcube/docker-compose-lamp" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A basic LAMP stack environment built using Docker Compose.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;LAMP stack built with Docker Compose&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/43859895/141092846-905eae39-0169-4fd7-911f-9ff32c48b7e8.png&#34; alt=&#34;Landing Page&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;A basic LAMP stack environment built using Docker Compose. It consists of the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;PHP&lt;/li&gt; &#xA; &lt;li&gt;Apache&lt;/li&gt; &#xA; &lt;li&gt;MySQL&lt;/li&gt; &#xA; &lt;li&gt;phpMyAdmin&lt;/li&gt; &#xA; &lt;li&gt;Redis&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;As of now, we have several different PHP versions. Use appropriate php version as needed:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;5.4.x&lt;/li&gt; &#xA; &lt;li&gt;5.6.x&lt;/li&gt; &#xA; &lt;li&gt;7.1.x&lt;/li&gt; &#xA; &lt;li&gt;7.2.x&lt;/li&gt; &#xA; &lt;li&gt;7.3.x&lt;/li&gt; &#xA; &lt;li&gt;7.4.x&lt;/li&gt; &#xA; &lt;li&gt;8.0.x&lt;/li&gt; &#xA; &lt;li&gt;8.1.x&lt;/li&gt; &#xA; &lt;li&gt;8.2.x&lt;/li&gt; &#xA; &lt;li&gt;8.3.x&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Clone this repository on your local computer&lt;/li&gt; &#xA; &lt;li&gt;configure .env as needed&lt;/li&gt; &#xA; &lt;li&gt;Run the &lt;code&gt;docker compose up -d&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git clone https://github.com/sprintcube/docker-compose-lamp.git&#xA;cd docker-compose-lamp/&#xA;cp sample.env .env&#xA;// modify sample.env as needed&#xA;docker compose up -d&#xA;// visit localhost&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Your LAMP stack is now ready!! You can access it via &lt;code&gt;http://localhost&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Configuration and Usage&lt;/h2&gt; &#xA;&lt;h3&gt;General Information&lt;/h3&gt; &#xA;&lt;p&gt;This Docker Stack is build for local development and not for production usage.&lt;/p&gt; &#xA;&lt;h3&gt;Configuration&lt;/h3&gt; &#xA;&lt;p&gt;This package comes with default configuration options. You can modify them by creating &lt;code&gt;.env&lt;/code&gt; file in your root directory. To make it easy, just copy the content from &lt;code&gt;sample.env&lt;/code&gt; file and update the environment variable values as per your need.&lt;/p&gt; &#xA;&lt;h3&gt;Configuration Variables&lt;/h3&gt; &#xA;&lt;p&gt;There are following configuration variables available and you can customize them by overwritting in your own &lt;code&gt;.env&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;PHP&lt;/h4&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;PHPVERSION&lt;/strong&gt;&lt;/em&gt; Is used to specify which PHP Version you want to use. Defaults always to latest PHP Version.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;PHP_INI&lt;/strong&gt;&lt;/em&gt; Define your custom &lt;code&gt;php.ini&lt;/code&gt; modification to meet your requirments.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;Apache&lt;/h4&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;DOCUMENT_ROOT&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;It is a document root for Apache server. The default value for this is &lt;code&gt;./www&lt;/code&gt;. All your sites will go here and will be synced automatically.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;APACHE_DOCUMENT_ROOT&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Apache config file value. The default value for this is /var/www/html.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;VHOSTS_DIR&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;This is for virtual hosts. The default value for this is &lt;code&gt;./config/vhosts&lt;/code&gt;. You can place your virtual hosts conf files here.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Make sure you add an entry to your system&#39;s &lt;code&gt;hosts&lt;/code&gt; file for each virtual host.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;APACHE_LOG_DIR&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;This will be used to store Apache logs. The default value for this is &lt;code&gt;./logs/apache2&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;Database&lt;/h4&gt; &#xA;&lt;hr&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;For Apple Silicon Users: Please select Mariadb as Database. Oracle doesn&#39;t build their SQL Containers for the arm Architecture&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;DATABASE&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Define which MySQL or MariaDB Version you would like to use.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;MYSQL_INITDB_DIR&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;When a container is started for the first time files in this directory with the extensions &lt;code&gt;.sh&lt;/code&gt;, &lt;code&gt;.sql&lt;/code&gt;, &lt;code&gt;.sql.gz&lt;/code&gt; and &lt;code&gt;.sql.xz&lt;/code&gt; will be executed in alphabetical order. &lt;code&gt;.sh&lt;/code&gt; files without file execute permission are sourced rather than executed. The default value for this is &lt;code&gt;./config/initdb&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;MYSQL_DATA_DIR&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;This is MySQL data directory. The default value for this is &lt;code&gt;./data/mysql&lt;/code&gt;. All your MySQL data files will be stored here.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;MYSQL_LOG_DIR&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;This will be used to store Apache logs. The default value for this is &lt;code&gt;./logs/mysql&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Web Server&lt;/h2&gt; &#xA;&lt;p&gt;Apache is configured to run on port 80. So, you can access it via &lt;code&gt;http://localhost&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Apache Modules&lt;/h4&gt; &#xA;&lt;p&gt;By default following modules are enabled.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;rewrite&lt;/li&gt; &#xA; &lt;li&gt;headers&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;If you want to enable more modules, just update &lt;code&gt;./bin/phpX/Dockerfile&lt;/code&gt;. You can also generate a PR and we will merge if seems good for general purpose. You have to rebuild the docker image by running &lt;code&gt;docker compose build&lt;/code&gt; and restart the docker containers.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;Connect via SSH&lt;/h4&gt; &#xA;&lt;p&gt;You can connect to web server using &lt;code&gt;docker compose exec&lt;/code&gt; command to perform various operation on it. Use below command to login to container via ssh.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker compose exec webserver bash&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;PHP&lt;/h2&gt; &#xA;&lt;p&gt;The installed version of php depends on your &lt;code&gt;.env&lt;/code&gt;file.&lt;/p&gt; &#xA;&lt;h4&gt;Extensions&lt;/h4&gt; &#xA;&lt;p&gt;By default following extensions are installed. May differ for PHP Versions &amp;lt;7.x.x&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;mysqli&lt;/li&gt; &#xA; &lt;li&gt;pdo_sqlite&lt;/li&gt; &#xA; &lt;li&gt;pdo_mysql&lt;/li&gt; &#xA; &lt;li&gt;mbstring&lt;/li&gt; &#xA; &lt;li&gt;zip&lt;/li&gt; &#xA; &lt;li&gt;intl&lt;/li&gt; &#xA; &lt;li&gt;mcrypt&lt;/li&gt; &#xA; &lt;li&gt;curl&lt;/li&gt; &#xA; &lt;li&gt;json&lt;/li&gt; &#xA; &lt;li&gt;iconv&lt;/li&gt; &#xA; &lt;li&gt;xml&lt;/li&gt; &#xA; &lt;li&gt;xmlrpc&lt;/li&gt; &#xA; &lt;li&gt;gd&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;If you want to install more extension, just update &lt;code&gt;./bin/webserver/Dockerfile&lt;/code&gt;. You can also generate a PR and we will merge if it seems good for general purpose. You have to rebuild the docker image by running &lt;code&gt;docker compose build&lt;/code&gt; and restart the docker containers.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;phpMyAdmin&lt;/h2&gt; &#xA;&lt;p&gt;phpMyAdmin is configured to run on port 8080. Use following default credentials.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://localhost:8080/&#34;&gt;http://localhost:8080/&lt;/a&gt;&lt;br&gt; username: root&lt;br&gt; password: tiger&lt;/p&gt; &#xA;&lt;h2&gt;Xdebug&lt;/h2&gt; &#xA;&lt;p&gt;Xdebug comes installed by default and it&#39;s version depends on the PHP version chosen in the &lt;code&gt;&#34;.env&#34;&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Xdebug versions:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;PHP &amp;lt;= 7.3: Xdebug 2.X.X&lt;/p&gt; &#xA;&lt;p&gt;PHP &amp;gt;= 7.4: Xdebug 3.X.X&lt;/p&gt; &#xA;&lt;p&gt;To use Xdebug you need to enable the settings in the &lt;code&gt;./config/php/php.ini&lt;/code&gt; file according to the chosen version PHP.&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Xdebug 2&#xA;#xdebug.remote_enable=1&#xA;#xdebug.remote_autostart=1&#xA;#xdebug.remote_connect_back=1&#xA;#xdebug.remote_host = host.docker.internal&#xA;#xdebug.remote_port=9000&#xA;&#xA;# Xdebug 3&#xA;#xdebug.mode=debug&#xA;#xdebug.start_with_request=yes&#xA;#xdebug.client_host=host.docker.internal&#xA;#xdebug.client_port=9003&#xA;#xdebug.idekey=VSCODE&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Xdebug VS Code: you have to install the Xdebug extension &#34;PHP Debug&#34;. After installed, go to Debug and create the launch file so that your IDE can listen and work properly.&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;VERY IMPORTANT:&lt;/strong&gt; the &lt;code&gt;pathMappings&lt;/code&gt; depends on how you have opened the folder in VS Code. Each folder has your own configurations launch, that you can view in &lt;code&gt;.vscode/launch.json&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;version&#34;: &#34;0.2.0&#34;,&#xA;  &#34;configurations&#34;: [&#xA;    {&#xA;      &#34;name&#34;: &#34;Listen for Xdebug&#34;,&#xA;      &#34;type&#34;: &#34;php&#34;,&#xA;      &#34;request&#34;: &#34;launch&#34;,&#xA;      // &#34;port&#34;: 9000, // Xdebug 2&#xA;      &#34;port&#34;: 9003, // Xdebug 3&#xA;      &#34;pathMappings&#34;: {&#xA;        // &#34;/var/www/html&#34;: &#34;${workspaceFolder}/www&#34; // if you have opened VSCODE in root folder&#xA;        &#34;/var/www/html&#34;: &#34;${workspaceFolder}&#34; // if you have opened VSCODE in ./www folder&#xA;      }&#xA;    }&#xA;  ]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now, make a breakpoint and run debug.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Tip!&lt;/strong&gt; After theses configurations, you may need to restart container.&lt;/p&gt; &#xA;&lt;h2&gt;Redis&lt;/h2&gt; &#xA;&lt;p&gt;It comes with Redis. It runs on default port &lt;code&gt;6379&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;SSL (HTTPS)&lt;/h2&gt; &#xA;&lt;p&gt;Support for &lt;code&gt;https&lt;/code&gt; domains is built-in but disabled by default. There are 3 ways you can enable and configure SSL; &lt;code&gt;https&lt;/code&gt; on &lt;code&gt;localhost&lt;/code&gt; being the easiest. If you are trying to recreating a testing environment as close as possible to a production environment, any domain name can be supported with more configuration.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Notice:&lt;/strong&gt; For every non-localhost domain name you wish to use &lt;code&gt;https&lt;/code&gt; on, you will need to modify your computers &lt;a href=&#34;https://en.wikipedia.org/wiki/Hosts_%28file%29&#34;&gt;hosts file&lt;/a&gt; and point the domain name to &lt;code&gt;127.0.0.1&lt;/code&gt;. If you fail to do this SSL will not work and you will be routed to the internet every time you try to visit that domain name locally.&lt;/p&gt; &#xA;&lt;h3&gt;1) HTTPS on Localhost&lt;/h3&gt; &#xA;&lt;p&gt;To enable &lt;code&gt;https&lt;/code&gt; on &lt;code&gt;localhost&lt;/code&gt; (&lt;a href=&#34;https://localhost&#34;&gt;https://localhost&lt;/a&gt;) you will need to:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Use a tool like &lt;a href=&#34;https://github.com/FiloSottile/mkcert#installation&#34;&gt;mkcert&lt;/a&gt; to create an SSL certificate for &lt;code&gt;localhost&lt;/code&gt;: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;With &lt;code&gt;mkcert&lt;/code&gt;, in the terminal run &lt;code&gt;mkcert localhost 127.0.0.1 ::1&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Rename the files that were generated &lt;code&gt;cert.pem&lt;/code&gt; and &lt;code&gt;cert-key.pem&lt;/code&gt; respectively.&lt;/li&gt; &#xA;   &lt;li&gt;Move these files into your docker setup by placing them in &lt;code&gt;config/ssl&lt;/code&gt; directory.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Uncomment the &lt;code&gt;443&lt;/code&gt; vhost in &lt;code&gt;config/vhosts/default.conf&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Done. Now any time you turn on your LAMP container &lt;code&gt;https&lt;/code&gt; will work on &lt;code&gt;localhost&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;2) HTTPS on many Domains with a Single Certificate&lt;/h3&gt; &#xA;&lt;p&gt;If you would like to use normal domain names for local testing, and need &lt;code&gt;https&lt;/code&gt; support, the simplest solution is an SSL certificate that covers all the domain names:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Use a tool like &lt;a href=&#34;https://github.com/FiloSottile/mkcert#installation&#34;&gt;mkcert&lt;/a&gt; to create an SSL certificate that covers all the domain names you want: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;With &lt;code&gt;mkcert&lt;/code&gt;, in the terminal run &lt;code&gt;mkcert example.com &#34;*.example.org&#34; myapp.dev localhost 127.0.0.1 ::1&lt;/code&gt; where you replace all the domain names and IP addresses to the ones you wish to support.&lt;/li&gt; &#xA;   &lt;li&gt;Rename the files that were generated &lt;code&gt;cert.pem&lt;/code&gt; and &lt;code&gt;cert-key.pem&lt;/code&gt; respectively.&lt;/li&gt; &#xA;   &lt;li&gt;Move these files into your docker setup by placing them in &lt;code&gt;config/ssl&lt;/code&gt; directory.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Uncomment the &lt;code&gt;443&lt;/code&gt; vhost in &lt;code&gt;config/vhosts/default.conf&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Done. Since you combined all the domain names into a single certificate, the vhost file will support your setup without needing to modify it further. You could add domain specific rules if you wish however. Now any time you turn on your LAMP container &lt;code&gt;https&lt;/code&gt; will work on all the domains you specified.&lt;/p&gt; &#xA;&lt;h3&gt;3) HTTPS on many Domain with Multiple Certificates&lt;/h3&gt; &#xA;&lt;p&gt;If you would like your local testing environment to exactly match your production, and need &lt;code&gt;https&lt;/code&gt; support, you could create an SSL certificate for every domain you wish to support:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Use a tool like &lt;a href=&#34;https://github.com/FiloSottile/mkcert#installation&#34;&gt;mkcert&lt;/a&gt; to create an SSL certificate that covers the domain name you want: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;With &lt;code&gt;mkcert&lt;/code&gt;, in the terminal run &lt;code&gt;mkcert [your-domain-name(s)-here]&lt;/code&gt; replacing the bracket part with your domain name.&lt;/li&gt; &#xA;   &lt;li&gt;Rename the files that were generated to something unique like &lt;code&gt;[name]-cert.pem&lt;/code&gt; and &lt;code&gt;[name]-cert-key.pem&lt;/code&gt; replacing the bracket part with a unique name.&lt;/li&gt; &#xA;   &lt;li&gt;Move these files into your docker setup by placing them in &lt;code&gt;config/ssl&lt;/code&gt; directory.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Using the &lt;code&gt;443&lt;/code&gt; example from the vhost file (&lt;code&gt;config/vhosts/default.conf&lt;/code&gt;), make new rules that match your domain name and certificate file names.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Done. The LAMP container will auto pull in any SSL certificates in &lt;code&gt;config/ssl&lt;/code&gt; when it starts. As long as you configure the vhosts file correctly and place the SSL certificates in &lt;code&gt;config/ssl&lt;/code&gt;, any time you turn on your LAMP container &lt;code&gt;https&lt;/code&gt; will work on your specified domains.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;We are happy if you want to create a pull request or help people with their issues. If you want to create a PR, please remember that this stack is not built for production usage, and changes should be good for general purpose and not overspecialized.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Please note that we simplified the project structure from several branches for each php version, to one centralized master branch. Please create your PR against master branch.&lt;/p&gt; &#xA; &lt;p&gt;Thank you!&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Why you shouldn&#39;t use this stack unmodified in production&lt;/h2&gt; &#xA;&lt;p&gt;We want to empower developers to quickly create creative Applications. Therefore we are providing an easy to set up a local development environment for several different Frameworks and PHP Versions. In Production you should modify at a minimum the following subjects:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;php handler: mod_php=&amp;gt; php-fpm&lt;/li&gt; &#xA; &lt;li&gt;secure mysql users with proper source IP limitations&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>CloudBytes-Academy/web-apis-with-python</title>
    <updated>2024-03-01T02:02:00Z</updated>
    <id>tag:github.com,2024-03-01:/CloudBytes-Academy/web-apis-with-python</id>
    <link href="https://github.com/CloudBytes-Academy/web-apis-with-python" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Code repository for exercises in the eBook WebAPI Development with Python&lt;/p&gt;&lt;hr&gt;&lt;blockquote&gt; &#xA; &lt;p&gt;For help and support open a topic in &lt;a href=&#34;https://github.com/CloudBytesDotDev/web-apis-with-python/discussions&#34;&gt;Discussions&lt;/a&gt; above.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h1&gt;Starter Kit: Web APIs with Python&lt;/h1&gt; &#xA;&lt;p&gt;This is the starter kit associate with &#34;Building Web APIs with Python&#34; which the following version available&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Kindle Edition: &lt;a href=&#34;https://kdp.amazon.com/amazon-dp-action/us/dualbookshelf.marketplacelink/B09BJLKM6F&#34;&gt;Get it here&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Usage Instructions&lt;/h2&gt; &#xA;&lt;p&gt;This repository contains the starter kit for each exercise in a separate branch.&lt;/p&gt; &#xA;&lt;p&gt;If you are unfamiliar with Git and GitHub, please read the instructions on usage below carefully and follow the steps.&lt;/p&gt; &#xA;&lt;h3&gt;1. Fork to create your own copy of the repository&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Step 1&lt;/strong&gt;: Login to &lt;a href=&#34;https://github.com&#34;&gt;GitHub&lt;/a&gt; and navigate to &lt;a href=&#34;https://github.com/CloudBytesDotDev/web-apis-with-python&#34;&gt;this repository&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-http&#34;&gt;https://github.com/CloudBytesDotDev/web-apis-with-python&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Step 2&lt;/strong&gt;: Create a Fork of the repository by clicking on the fork button on top right side of the webpage as shown below&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/4152163/120856800-f96ade80-c59d-11eb-9f8a-7a217dd98767.png&#34; alt=&#34;image-20210604203326830&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;This will create a copy of the repository in your account.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Step 3&lt;/strong&gt;: Clone this new repository in your account. To Copy the Git URL press on the Green &#34;Code&#34; button and then click on the clipboard icon as shown below&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/4152163/120856928-27502300-c59e-11eb-9826-eb7777efe3f2.png&#34; alt=&#34;image-20210604204305086&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Or you can run the following command from your terminal with Git installed, replacing &#34;&#xA; &lt;myusername&gt;&#xA;  &#34; with our actual GitHub username&#xA; &lt;/myusername&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/&amp;lt;myUserName&amp;gt;/web-apis-with-python.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;2. Navigate to the starter kit&lt;/h3&gt; &#xA;&lt;p&gt;From the terminal, run the below command to navigate to a particular branch, replace &#34;&#xA; &lt;branch-name&gt;&#xA;  &#34; with the name of the branch (typically provided in the exercise)&#xA; &lt;/branch-name&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git checkout &amp;lt;branch-name&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &#34;branch-name&#34; should match exactly to the branch specified in the exercises.&lt;/p&gt; &#xA;&lt;p&gt;You should also set the upstream (online) branch by running&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git push --set-upstream origin &amp;lt;branch-name&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;3. Track the changes and push it to your repository on GitHub&lt;/h3&gt; &#xA;&lt;p&gt;This involves 4 steps.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Step 1&lt;/strong&gt;: Check the changes you have made by running&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git status&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will highlight the files that been added, deleted or changed.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Step 2&lt;/strong&gt;: Add the changes to the working tree&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git add &amp;lt;file-name&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;git status&lt;/code&gt; will provide you will list of files, you will need to do this with each file that has been added or changed.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Step 3&lt;/strong&gt;: Record and commit the changes&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git commit -m &#34;&amp;lt;What changes have you done?&amp;gt;&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Step 4&lt;/strong&gt;: Push your changes to GitHub (origin)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git push&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This requires the &lt;code&gt;git push --set-upstream origin &amp;lt;branch-name&amp;gt;&lt;/code&gt; completed as specified in section 2 above&lt;/p&gt;</summary>
  </entry>
</feed>