<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dockerfile Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-07-01T01:49:13Z</updated>
  <subtitle>Monthly Trending of Dockerfile in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>hyperliquid-dex/node</title>
    <updated>2025-07-01T01:49:13Z</updated>
    <id>tag:github.com,2025-07-01:/hyperliquid-dex/node</id>
    <link href="https://github.com/hyperliquid-dex/node" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Running a node&lt;/h1&gt; &#xA;&lt;h2&gt;Machine Specs&lt;/h2&gt; &#xA;&lt;p&gt;Recommended minimum hardware: 4 CPU cores, 32 GB RAM, 200 GB disk.&lt;/p&gt; &#xA;&lt;p&gt;Currently only Ubuntu 24.04 is supported.&lt;/p&gt; &#xA;&lt;p&gt;Ports 4001 and 4002 are used for gossip and must be open to the public. Otherwise, the node IP address will be deprioritized by peers in the p2p network.&lt;/p&gt; &#xA;&lt;p&gt;For lowest latency, run the node in Tokyo, Japan.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;h3&gt;Configure Chain&lt;/h3&gt; &#xA;&lt;p&gt;For testing, configure your chain as follows:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Testnet&lt;/strong&gt;: &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;echo &#39;{&#34;chain&#34;: &#34;Testnet&#34;}&#39; &amp;gt; ~/visor.json&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Mainnet&lt;/strong&gt;: &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;echo &#39;{&#34;chain&#34;: &#34;Mainnet&#34;}&#39; &amp;gt; ~/visor.json&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Download the Visor Binary&lt;/h3&gt; &#xA;&lt;p&gt;The visor binary spawns and manages the child node process.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Testnet&lt;/strong&gt;: &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl https://binaries.hyperliquid-testnet.xyz/Testnet/hl-visor &amp;gt; ~/hl-visor &amp;amp;&amp;amp; chmod a+x ~/hl-visor&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Mainnet&lt;/strong&gt;: &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl https://binaries.hyperliquid.xyz/Mainnet/hl-visor &amp;gt; ~/hl-visor &amp;amp;&amp;amp; chmod a+x ~/hl-visor&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Verify Signed Binaries&lt;/h2&gt; &#xA;&lt;p&gt;Binaries are signed for extra security. The public key is found at &lt;code&gt;pub_key.asc&lt;/code&gt; in this repo.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Import the Key:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gpg --import pub_key.asc&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Verify the Binary:&lt;/strong&gt; Signatures are located at &lt;code&gt;{binary}.asc&lt;/code&gt;.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Testnet&lt;/strong&gt;: &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl https://binaries.hyperliquid-testnet.xyz/Testnet/hl-visor.asc &amp;gt; hl-visor.asc&#xA;gpg --verify hl-visor.asc hl-visor&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Mainnet&lt;/strong&gt;: &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl https://binaries.hyperliquid.xyz/Mainnet/hl-visor.asc &amp;gt; hl-visor.asc&#xA;gpg --verify hl-visor.asc hl-visor&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;code&gt;hl-visor&lt;/code&gt; will also verify &lt;code&gt;hl-node&lt;/code&gt; automatically and will not upgrade on verification failure. &lt;strong&gt;Important:&lt;/strong&gt; The public key must be imported as shown above. Optionally, sign the key using &lt;code&gt;gpg --sign-key&lt;/code&gt; to avoid warnings when verifying its signatures.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Running Non-Validator&lt;/h2&gt; &#xA;&lt;p&gt;To start a non-validator node:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;~/hl-visor run-non-validator&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It may take a while as the node navigates the network to find an appropriate peer to stream from. Logs such as &lt;code&gt;applied block X&lt;/code&gt; indicate that the node is streaming live data.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The same command is used regardless of whether your chain is set to Testnet or Mainnet (as configured in &lt;code&gt;~/visor.json&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Reading L1 Data&lt;/h2&gt; &#xA;&lt;p&gt;The node writes data to &lt;code&gt;~/hl/data&lt;/code&gt;. With default settings, the network will generate around 100 GB of logs per day, so it is recommended to archive or delete old files.&lt;/p&gt; &#xA;&lt;p&gt;For more information about examples and all the data types that can be written, refer to &lt;a href=&#34;https://hyperliquid.gitbook.io/hyperliquid-docs/for-developers/nodes/reading-l1-data&#34;&gt;docs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Transaction Blocks:&lt;/strong&gt; Blocks parsed as transactions are streamed to:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;~/hl/data/replica_cmds/{start_time}/{date}/{height}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;State Snapshots:&lt;/strong&gt; State snapshots are saved every 10,000 blocks to:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;~/hl/data/periodic_abci_states/{date}/{height}.rmp&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;To translate the state to JSON for examination:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Testnet&lt;/strong&gt;: &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./hl-node --chain Testnet translate-abci-state ~/hl/data/periodic_abci_states/{date}/{height}.rmp /tmp/out.json&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Mainnet&lt;/strong&gt;: &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./hl-node --chain Mainnet translate-abci-state ~/hl/data/periodic_abci_states/{date}/{height}.rmp /tmp/out.json&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;p&gt;To compute L4 book snapshots (full onchain order information) from a state snapshot file:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./hl-node --chain &amp;lt;chain&amp;gt; compute-l4-snapshots &amp;lt;abci-state-path&amp;gt; &amp;lt;out-path&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Flags&lt;/h2&gt; &#xA;&lt;p&gt;When running validators or non-validators, you can use the following flags. The data schemas for the output data are documented &lt;a href=&#34;https://hyperliquid.gitbook.io/hyperliquid-docs/for-developers/nodes/l1-data-schemas&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;--write-trades&lt;/code&gt;: Streams trades to &lt;code&gt;~/hl/data/node_trades/hourly/{date}/{hour}&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--write-fills&lt;/code&gt;: Streams fills in the API fills format to &lt;code&gt;~/hl/data/node_fills/hourly/{date}/{hour}&lt;/code&gt;. Also streams TWAP statuses to &lt;code&gt;~/hl/data/node_twap_statuses/{date}/{hour}&lt;/code&gt;. This overrides &lt;code&gt;--write-trades&lt;/code&gt; if both are set.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--write-order-statuses&lt;/code&gt;: Writes every L1 order status to &lt;code&gt;~/hl/data/node_order_statuses/hourly/{date}/{hour}&lt;/code&gt;. Note that orders can be a substantial amount of data.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--write-misc-events&lt;/code&gt;: Writes miscellaneous event data to &lt;code&gt;~/hl/data/misc_events/hourly/{date}/{hour}&lt;/code&gt;. See &lt;a href=&#34;https://hyperliquid.gitbook.io/hyperliquid-docs/for-developers/nodes/reading-l1-data#miscellaneous-events&#34;&gt;docs&lt;/a&gt; for more details.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--batch-by-block&lt;/code&gt;: Writes the above files with one block per line instead of one event per line. The batched data schema is &lt;code&gt;{local_time, block_time, block_number, events}&lt;/code&gt;, where &lt;code&gt;events&lt;/code&gt; is a list.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--replica-cmds-style&lt;/code&gt;: Configures what is written to &lt;code&gt;~/hl/data/replica_cmds/{start_time}/{date}/{height}&lt;/code&gt;. Options: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;actions&lt;/code&gt; (default) – only actions&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;actions-and-responses&lt;/code&gt; – both actions and responses&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;recent-actions&lt;/code&gt; – only preserves the two latest height files&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--disable-output-file-buffering&lt;/code&gt;: Flush each line immediately when writing output files. This reduces latency but leads to more disk IO operations.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--serve-eth-rpc&lt;/code&gt;: Enables the EVM RPC (see next section).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--serve-info&lt;/code&gt;: Enables local HTTP server to handle info requests (see next section).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For example, to run a non-validator with all flags enabled:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;~/hl-visor run-non-validator --write-trades --write-order-statuses --serve-eth-rpc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; These flags work independently of the chain setting. Just ensure that your &lt;code&gt;~/visor.json&lt;/code&gt; is configured for Testnet or Mainnet as needed.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;EVM and Info servers&lt;/h2&gt; &#xA;&lt;p&gt;Enable the EVM JSON-RPC by adding the &lt;code&gt;--serve-eth-rpc&lt;/code&gt; flag:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;~/hl-visor run-non-validator --serve-eth-rpc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once running, you can send RPC requests. For example, to retrieve the latest block:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -X POST --header &#39;Content-Type: application/json&#39; --data &#39;{&#34;jsonrpc&#34;:&#34;2.0&#34;,&#34;method&#34;:&#34;eth_getBlockByNumber&#34;,&#34;params&#34;:[&#34;latest&#34;,false],&#34;id&#34;:1}&#39; http://localhost:3001/evm&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Similarly, &lt;code&gt;--serve-info&lt;/code&gt; enables a local server at &lt;code&gt;http://localhost:3001/info&lt;/code&gt; to handle info requests with the API request/response format. See &lt;a href=&#34;https://hyperliquid.gitbook.io/hyperliquid-docs/for-developers/api/info-endpoint&#34;&gt;docs&lt;/a&gt; for more details. Running a local info server can help with rate limits and reduces trust assumptions on external operators. Currently the local server only supports a subset of requests that are entirely a function of local state. In particular, historical time series queries and websockets are not currently supported. The &lt;code&gt;--write-*&lt;/code&gt; flags on the node can be used for historical and streaming purposes.&lt;/p&gt; &#xA;&lt;p&gt;The currently supported info requests on the local server are&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    meta&#xA;    spotMeta&#xA;    clearinghouseState&#xA;    spotClearinghouseState&#xA;    openOrders&#xA;    exchangeStatus&#xA;    frontendOpenOrders&#xA;    liquidatable&#xA;    activeAssetData&#xA;    maxMarketOrderNtls&#xA;    vaultSummaries&#xA;    userVaultEquities&#xA;    leadingVaults&#xA;    extraAgents&#xA;    subAccounts&#xA;    userFees&#xA;    userRateLimit&#xA;    spotDeployState&#xA;    perpDeployAuctionStatus&#xA;    delegations&#xA;    delegatorSummary&#xA;    maxBuilderFee&#xA;    userToMultiSigSigners&#xA;    userRole&#xA;    perpsAtOpenInterestCap&#xA;    validatorL1Votes&#xA;    marginTable&#xA;    perpDexs&#xA;    webData2 (does not compute assetCtxs, which do not depend on the user)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Some info requests such as &lt;code&gt;l2Book&lt;/code&gt; are not currently supported, as they are only indexed by a small number of assets and can be easily polled or subscribed to within the standard rate limits.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;This applies for both Testnet and Mainnet.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Delegation&lt;/h2&gt; &#xA;&lt;p&gt;The native token on Testnet is &lt;strong&gt;HYPE&lt;/strong&gt; with token address:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;0x7317beb7cceed72ef0b346074cc8e7ab&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Delegation Process (applies to both chains):&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Staking Deposit:&lt;/strong&gt; Transfer tokens from your spot balance into the staking balance:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Testnet:&lt;/strong&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./hl-node --chain Testnet --key &amp;lt;delegator-wallet-key&amp;gt; staking-deposit &amp;lt;wei&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Mainnet:&lt;/strong&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./hl-node --chain Mainnet --key &amp;lt;delegator-wallet-key&amp;gt; staking-deposit &amp;lt;wei&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Delegate Tokens:&lt;/strong&gt; Delegate tokens to a validator:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Testnet:&lt;/strong&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./hl-node --chain Testnet --key &amp;lt;delegator-wallet-key&amp;gt; delegate &amp;lt;validator-address&amp;gt; &amp;lt;amount-in-wei&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Mainnet:&lt;/strong&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./hl-node --chain Mainnet --key &amp;lt;delegator-wallet-key&amp;gt; delegate &amp;lt;validator-address&amp;gt; &amp;lt;amount-in-wei&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;p&gt;Optionally, add &lt;code&gt;--undelegate&lt;/code&gt; to undelegate from the validator.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;View Delegations:&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Testnet:&lt;/strong&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -X POST --header &#34;Content-Type: application/json&#34; --data &#39;{ &#34;type&#34;: &#34;delegations&#34;, &#34;user&#34;: &amp;lt;delegator-address&amp;gt;}&#39; https://api.hyperliquid-testnet.xyz/info&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Mainnet:&lt;/strong&gt; Use the corresponding API endpoint for mainnet (if available).&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Staking Withdrawal:&lt;/strong&gt; Initiate a staking withdrawal (subject to a 5-minute unbonding period):&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Testnet:&lt;/strong&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./hl-node --chain Testnet --key &amp;lt;delegator-wallet-key&amp;gt; staking-withdrawal &amp;lt;wei&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Mainnet:&lt;/strong&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./hl-node --chain Mainnet --key &amp;lt;delegator-wallet-key&amp;gt; staking-withdrawal &amp;lt;wei&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;p&gt;The withdrawal will reflect in the exchange balance automatically once the unbonding period ends.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Running a Validating Node&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;Note: The non-validating node setup above is a prerequisite for running a validating node.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Generate Config&lt;/h3&gt; &#xA;&lt;p&gt;Generate two wallets:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Validator wallet:&lt;/strong&gt; Holds funds and receives delegation rewards (cold wallet).&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Signer wallet:&lt;/strong&gt; Used solely for signing consensus messages (hot wallet).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;They can be the same wallet for simplicity.&lt;/p&gt; &#xA;&lt;p&gt;Create a config file for the signer wallet:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;echo &#39;{&#34;key&#34;: &#34;&amp;lt;signer-key&amp;gt;&#34;}&#39; &amp;gt; ~/hl/hyperliquid_data/node_config.json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Keep both &lt;code&gt;&amp;lt;signer-key&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;validator-key&amp;gt;&lt;/code&gt; secure.&lt;/p&gt; &#xA;&lt;h3&gt;Ensure Validator User Exists&lt;/h3&gt; &#xA;&lt;p&gt;Both the signer and validator addresses must have a non-zero perps USDC balance to be able to send signed actions. Print the addresses:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Testnet:&lt;/strong&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;~/hl-node --chain Testnet --key &amp;lt;signer-key&amp;gt; print-address&#xA;~/hl-node --chain Testnet --key &amp;lt;validator-key&amp;gt; print-address&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Mainnet:&lt;/strong&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;~/hl-node --chain Mainnet --key &amp;lt;signer-key&amp;gt; print-address&#xA;~/hl-node --chain Mainnet --key &amp;lt;validator-key&amp;gt; print-address&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Join Network&lt;/h3&gt; &#xA;&lt;p&gt;The validator set on Testnet is entirely permissionless.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Register and Self-Delegate:&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;On &lt;strong&gt;Testnet&lt;/strong&gt; (self-delegate 10_000, i.e. 1000000000000 wei):&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;~/hl-node --chain Testnet --key &amp;lt;validator-key&amp;gt; send-signed-action &#39;{&#34;type&#34;: &#34;CValidatorAction&#34;, &#34;register&#34;: {&#34;profile&#34;: {&#34;node_ip&#34;: {&#34;Ip&#34;: &#34;1.2.3.4&#34;}, &#34;signer&#34;: &#34;&amp;lt;signer-address&amp;gt;&#34;, &#34;name&#34;: &#34;...&#34;, &#34;description&#34;: &#34;...&#34; }, &#34;initial_wei&#34;: 1000000000000}}&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;On &lt;strong&gt;Mainnet&lt;/strong&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;~/hl-node --chain Mainnet --key &amp;lt;validator-key&amp;gt; send-signed-action &#39;{&#34;type&#34;: &#34;CValidatorAction&#34;, &#34;register&#34;: {&#34;profile&#34;: {&#34;node_ip&#34;: {&#34;Ip&#34;: &#34;1.2.3.4&#34;}, &#34;signer&#34;: &#34;&amp;lt;signer-address&amp;gt;&#34;, &#34;name&#34;: &#34;...&#34;, &#34;description&#34;: &#34;...&#34; }, &#34;initial_wei&#34;: 1000000000000}}&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Make sure ports 4000-4010 are open to other validators. (Currently, only ports 4001-4006 are used, but additional ports in this range may be used in the future.) Either open the ports publicly or configure your firewall to allow validators (which can be found in &lt;code&gt;c_staking&lt;/code&gt; in the state snapshots). Note that the validator set and IPs are dynamic.&lt;/p&gt; &#xA;&lt;h3&gt;Run the Validator&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Testnet:&lt;/strong&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl https://binaries.hyperliquid-testnet.xyz/Testnet/hl-visor &amp;gt; hl-visor &amp;amp;&amp;amp; ./hl-visor run-validator&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Mainnet:&lt;/strong&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl https://binaries.hyperliquid.xyz/Mainnet/hl-visor &amp;gt; hl-visor &amp;amp;&amp;amp; ./hl-visor run-validator&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Debugging Tip:&lt;/strong&gt; To see stderr immediately and disable restarts, run:&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;strong&gt;Testnet:&lt;/strong&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./hl-node --chain Testnet run-validator&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;Mainnet:&lt;/strong&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./hl-node --chain Mainnet run-validator&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;For faster bootstrapping, use a known reliable peer. &lt;code&gt;reserved_peer_ips&lt;/code&gt; can be set by the peer to always allow incoming connections from specific IPs.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Testnet:&lt;/strong&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;echo &#39;{ &#34;root_node_ips&#34;: [{&#34;Ip&#34;: &#34;1.2.3.4&#34;}], &#34;try_new_peers&#34;: false, &#34;chain&#34;: &#34;Testnet&#34;, &#34;reserved_peer_ips&#34;: [] }&#39; &amp;gt; ~/override_gossip_config.json&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Mainnet:&lt;/strong&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;echo &#39;{ &#34;root_node_ips&#34;: [{&#34;Ip&#34;: &#34;1.2.3.4&#34;}], &#34;try_new_peers&#34;: false, &#34;chain&#34;: &#34;Mainnet&#34;, &#34;reserved_peer_ips&#34;: [&#34;5.6.7.8&#34;] }&#39; &amp;gt; ~/override_gossip_config.json&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Begin Validating&lt;/h3&gt; &#xA;&lt;p&gt;When first registered or after changing your IP, the validator is automatically jailed (i.e. it does not participate in consensus initially). Once you see the expected outputs streaming to:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;~/hl/data/node_logs/consensus/hourly/{date}/{hour}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;send the following action to begin participating in consensus:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Testnet:&lt;/strong&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;~/hl-node --chain Testnet --key &amp;lt;signer-key&amp;gt; send-signed-action &#39;{&#34;type&#34;: &#34;CSignerAction&#34;, &#34;unjailSelf&#34;: null}&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Mainnet:&lt;/strong&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;~/hl-node --chain Mainnet --key &amp;lt;signer-key&amp;gt; send-signed-action &#39;{&#34;type&#34;: &#34;CSignerAction&#34;, &#34;unjailSelf&#34;: null}&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To exit consensus (i.e. “self jail”) and wait for the validator to leave the active set before shutting down:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Testnet:&lt;/strong&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;~/hl-node --chain Testnet --key &amp;lt;signer-key&amp;gt; send-signed-action &#39;{&#34;type&#34;: &#34;CSignerAction&#34;, &#34;jailSelf&#34;: null}&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Mainnet:&lt;/strong&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;~/hl-node --chain Mainnet --key &amp;lt;signer-key&amp;gt; send-signed-action &#39;{&#34;type&#34;: &#34;CSignerAction&#34;, &#34;jailSelf&#34;: null}&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Jailing&lt;/h3&gt; &#xA;&lt;p&gt;Performance and uptime are critical for the mainnet L1. To achieve this, a key feature of HyperBFT consensus is &#34;jailing.&#34; When a validator is jailed, it can still participate in the consensus network by forwarding messages to peers, but does not vote on or propose blocks. To avoid jailing, it is recommended to achieve 200ms two-way latency to at least one‑third of validators by stake.&lt;/p&gt; &#xA;&lt;p&gt;Once jailed, a validator can only be unjailed through the &lt;code&gt;unjailSelf&lt;/code&gt; action (which will succeed only after the L1 time exceeds the &#34;jailed until&#34; time). Self‑jailing does not extend the jailing duration.&lt;/p&gt; &#xA;&lt;p&gt;If a validator repeatedly gets jailed, check stdout for signs of crashing or other unusual logs. Also, logs in &lt;code&gt;~/hl/data/node_logs/status/&lt;/code&gt; may help diagnose latency or connectivity issues.&lt;/p&gt; &#xA;&lt;h3&gt;Alerting&lt;/h3&gt; &#xA;&lt;p&gt;It is recommended that validators set up an alerting system to maintain optimal uptime.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Testnet Example (Slack Alerts):&lt;/strong&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;echo &#39;{&#34;testnet_slack_channel&#34;: &#34;C000...&#34;, &#34;slack_key&#34;: &#34;Bearer xoxb-...&#34;}&#39; &amp;gt; ~/hl/api_secrets.json&#xA;&lt;/code&gt;&lt;/pre&gt; Test the Slack alert configuration: &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;~/hl-node --chain Testnet send-slack-alert &#34;hello hyperliquid&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For &lt;strong&gt;Mainnet&lt;/strong&gt;, use a similar configuration (with keys/channels specific to Mainnet if needed).&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Logs&lt;/h2&gt; &#xA;&lt;p&gt;The directory &lt;code&gt;node_logs/consensus&lt;/code&gt; contains most messages sent and received by the consensus algorithm, which is often useful for debugging.&lt;/p&gt; &#xA;&lt;p&gt;For example, to check whether Vote messages were sent to validator &lt;code&gt;0x5ac9...&lt;/code&gt; around &lt;code&gt;2024-12-10T09:25&lt;/code&gt;, you can run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;grep destination...0x5ac9 ~/hl/data/node_logs/consensus/hourly/20241210/9 | grep T09:25 | grep Vote&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Validators with issues may experience timeouts on rounds when they do not propose a block. Searching for &lt;code&gt;suspect&lt;/code&gt; in the consensus logs can help pinpoint the cause, which is often correlated with jailing.&lt;/p&gt; &#xA;&lt;p&gt;Crash logs from the child process are written to:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;~/hl/data/visor_child_stderr/{date}/{node_binary_index}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Validator Endpoints&lt;/h2&gt; &#xA;&lt;p&gt;To view current validator information:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Testnet:&lt;/strong&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -X POST --header &#34;Content-Type: application/json&#34; --data &#39;{ &#34;type&#34;: &#34;validatorSummaries&#34;}&#39; https://api.hyperliquid-testnet.xyz/info&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Mainnet:&lt;/strong&gt; Use the corresponding Mainnet endpoint if available.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To change your validator profile (for example, updating your IP address):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Testnet:&lt;/strong&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;~/hl-node --chain Testnet --key &amp;lt;validator-key&amp;gt; send-signed-action &#39;{&#34;type&#34;: &#34;CValidatorAction&#34;, &#34;changeProfile&#34;: {&#34;node_ip&#34;: {&#34;Ip&#34;: &#34;1.2.3.4&#34;}, &#34;name&#34;: &#34;...&#34;}}&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Mainnet:&lt;/strong&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;~/hl-node --chain Mainnet --key &amp;lt;validator-key&amp;gt; send-signed-action &#39;{&#34;type&#34;: &#34;CValidatorAction&#34;, &#34;changeProfile&#34;: {&#34;node_ip&#34;: {&#34;Ip&#34;: &#34;1.2.3.4&#34;}, &#34;name&#34;: &#34;...&#34;}}&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Other validator profile options include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;disable_delegations&lt;/code&gt;: Disables delegations when set to true.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;commission_bps&lt;/code&gt;: Sets the percentage of staking rewards the validator takes before the remainder is distributed proportionally to stake delegated (defaults to 10000, meaning all rewards go to the validator, and is not allowed to increase).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;signer&lt;/code&gt;: Allows the validator to set a hot address for signing consensus messages.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Mainnet Non-Validator Seed Peers&lt;/h2&gt; &#xA;&lt;p&gt;The community runs several independent root peers for non-validators to connect to on Mainnet. To run a non-validator on Mainnet, add at least one of these IP addresses to your &lt;code&gt;~/override_gossip_config.json&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;operator_name,root_ips&#xA;NodeOps,148.113.176.170&#xA;ASXN,20.188.6.225&#xA;ASXN,74.226.182.22&#xA;B-Harvest,180.189.55.18&#xA;B-Harvest,180.189.55.19&#xA;Nansen x HypurrCollective,46.105.222.166&#xA;Nansen x HypurrCollective,91.134.41.52&#xA;Hypurrscan,57.180.50.253&#xA;Hypurrscan,54.248.41.39&#xA;Infinite Field,52.68.71.160&#xA;Infinite Field,13.114.116.44&#xA;LiquidSpirit x Rekt Gang,199.254.199.190&#xA;LiquidSpirit x Rekt Gang,199.254.199.247&#xA;Imperator.co,45.32.32.21&#xA;Imperator.co,157.90.207.92&#xA;Enigma,148.251.76.7&#xA;Enigma,109.123.230.189&#xA;TMNT,31.223.196.172&#xA;TMNT,31.223.196.238&#xA;HyperStake,91.134.71.237&#xA;HyperStake,57.129.140.247&#xA;ValiDAO,160.202.131.51&#xA;ValiDAO,72.46.87.141&#xA;Hyperbeat x P2P.org x Hypio,199.254.199.12&#xA;Hyperbeat x P2P.org x Hypio,199.254.199.54&#xA;Luganodes,45.250.255.111&#xA;Luganodes,109.94.99.131&#xA;HypurrCorea: SKYGG x DeSpread,47.74.39.46&#xA;HypurrCorea: SKYGG x DeSpread,8.211.133.129&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Troubleshooting&lt;/h2&gt; &#xA;&lt;p&gt;Crash logs from the child process are written to:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;~/hl/data/visor_child_stderr/{date}/{node_binary_index}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>dotnet/dotnet-buildtools-prereqs-docker</title>
    <updated>2025-07-01T01:49:13Z</updated>
    <id>tag:github.com,2025-07-01:/dotnet/dotnet-buildtools-prereqs-docker</id>
    <link href="https://github.com/dotnet/dotnet-buildtools-prereqs-docker" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Used to maintain the Docker images hosted at the mcr.microsoft.com/dotnet-buildtools/prereqs image repository&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Dockerfiles for Building and Testing the .NET Product&lt;/h1&gt; &#xA;&lt;p&gt;The Dockerfiles in this repository are used for building and testing the .NET product. They are intended for the use of the .NET engineering team and not supported. Feel free to use or contribute to these Dockerfiles if they are useful to you.&lt;/p&gt; &#xA;&lt;p&gt;The Dockerfiles establish build and test environments for supported Linux and Windows distributions. Teams reference these images from their build and test pipelines.&lt;/p&gt; &#xA;&lt;p&gt;The images are provided and removed according to &lt;a href=&#34;https://raw.githubusercontent.com/dotnet/dotnet-buildtools-prereqs-docker/main/lifecycle.md&#34;&gt;Prereq container image lifecycle&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For any questions, please feel free to open an &lt;a href=&#34;https://github.com/dotnet/dotnet-buildtools-prereqs-docker/issues&#34;&gt;issue&lt;/a&gt; and mention &lt;a href=&#34;https://github.com/orgs/dotnet/teams/dotnet-docker-reviewers&#34;&gt;@dotnet/dotnet-docker-reviewers&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Where are the published images&lt;/h2&gt; &#xA;&lt;p&gt;The images produced from the Dockerfiles in this repository are published to the &lt;code&gt;mcr.microsoft.com/dotnet-buildtools/prereqs&lt;/code&gt; container repository.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dotnet/versions/raw/main/build-info/docker/image-info.dotnet-dotnet-buildtools-prereqs-docker-main.json&#34;&gt;Latest tags&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mcr.microsoft.com/v2/dotnet-buildtools/prereqs/tags/list&#34;&gt;Full list of tags&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How to identify an image&lt;/h2&gt; &#xA;&lt;p&gt;There are two tag formats used by the images from this repository. Most of the images follow the format &lt;code&gt;mcr.microsoft.com/dotnet-buildtools/prereqs:&amp;lt;os-name&amp;gt;-&amp;lt;os-version&amp;gt;-&amp;lt;variant&amp;gt;-&amp;lt;architecture&amp;gt;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;os-name&amp;gt;&lt;/code&gt; - Name of the Linux distribution or Windows OS the image is based on&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;os-version&amp;gt;&lt;/code&gt; - Version of the OS&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;variant&amp;gt;&lt;/code&gt; - Name describing the specialization purpose of the image. Often special dependencies are needed for certain parts of the product. It can be beneficial to separate these dependencies into a separate Dockerfile/image.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;architecture&amp;gt;&lt;/code&gt; - Architecture of the OS.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Examples:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;mcr.microsoft.com/dotnet-buildtools/prereqs:alpine-3.20-amd64&lt;/li&gt; &#xA; &lt;li&gt;mcr.microsoft.com/dotnet-buildtools/prereqs:azurelinux-3.0-helix-arm64v8&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The cross-compilation images follow the format &lt;code&gt;mcr.microsoft.com/dotnet-buildtools/prereqs:&amp;lt;os-name&amp;gt;-&amp;lt;os-version&amp;gt;-&amp;lt;variant&amp;gt;-cross-&amp;lt;target&amp;gt;&lt;/code&gt;. These are all implicitly amd64 images.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;target&amp;gt;&lt;/code&gt; - Specifies the target for cross-compilation, including the targeted architecture and libc variant (glibc if not specified, or musl).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Examples:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;mcr.microsoft.com/dotnet-buildtools/prereqs:azurelinux-3.0-net8.0-cross-arm64&lt;/li&gt; &#xA; &lt;li&gt;mcr.microsoft.com/dotnet-buildtools/prereqs:azurelinux-3.0-net9.0-cross-amd64-musl&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How to modify or create a new image&lt;/h2&gt; &#xA;&lt;p&gt;There will be a need for modifying existing Dockerfiles or creating new ones. For example, when a new Linux distribution/version needs to be supported, a corresponding Dockerfile will need to be created. The following steps are a guideline for modifying/creating Dockerfiles.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Edit Dockerfiles&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Add/Update the Dockerfile(s)&lt;/li&gt; &#xA;   &lt;li&gt;If new Dockerfile(s) were added: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Place each Dockerfile in the &lt;a href=&#34;https://raw.githubusercontent.com/dotnet/dotnet-buildtools-prereqs-docker/main/#source-folder-structure&#34;&gt;appropriate src folder&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;Update the &lt;a href=&#34;https://raw.githubusercontent.com/dotnet/dotnet-buildtools-prereqs-docker/main/#manifest&#34;&gt;manifest&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;Update the &lt;a href=&#34;https://raw.githubusercontent.com/dotnet/dotnet-buildtools-prereqs-docker/main/CODEOWNERS&#34;&gt;CODEOWNERS&lt;/a&gt; with the respective team code owner(s) (not individual users) for the Dockerfile(s) and list &lt;code&gt;@dotnet/dotnet-docker-reviewers&lt;/code&gt; as a secondary owner. Team code owners must be assigned to each Dockerfile. To learn about the expectations of the code owners, see the &lt;a href=&#34;https://raw.githubusercontent.com/dotnet/dotnet-buildtools-prereqs-docker/main/#code-owner-responsibilities&#34;&gt;Code Owner Responsibilities&lt;/a&gt;.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Validate the changes locally by running &lt;a href=&#34;https://raw.githubusercontent.com/dotnet/dotnet-buildtools-prereqs-docker/main/build.ps1&#34;&gt;build.ps1&lt;/a&gt;. It is strongly suggested to specify the &lt;code&gt;-Paths&lt;/code&gt; option to avoid the overhead of building all the images.&lt;/p&gt; &lt;p&gt;For example, if editing the &lt;a href=&#34;https://raw.githubusercontent.com/dotnet/dotnet-buildtools-prereqs-docker/main/src/fedora/40/amd64/Dockerfile&#34;&gt;Fedora 40 Dockerfile&lt;/a&gt;, then run the following command to build just that Dockerfile.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;.\build.ps1 -Paths &#34;*fedora/40/amd64*&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;It is a good practice to use &lt;code&gt;--dry-run&lt;/code&gt; option on the first attempt to verify what commands will get run.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;.\build.ps1 -Paths &#34;*fedora/40/amd64*&#34; -OptionalImageBuilderArgs &#34;--dry-run&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Partial paths and wildcards in the &lt;code&gt;-Paths&lt;/code&gt; option are also supported. The following example will build all the Fedora Dockerfiles.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;.\build.ps1 -Paths &#34;*fedora/*&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;To build a dependency graph when there are dependent images, multiple paths can be specified.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;.\build.ps1 -Paths &#34;*alpine/3.20/amd64*&#34;,&#34;*alpine/3.20/withnode/amd64*&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Alternatively, wildcards can by utilized to specify everything under a shared directory. Using wildcards can sometimes cause extra images to be built outside of the dependency graph which may be undersirable. In this case, it is recommended to utilize the multiple &lt;code&gt;paths&lt;/code&gt; approach.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;.\build.ps1 -Paths &#34;*alpine/3.20*&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Prepare a PR&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;When do images get built&lt;/h2&gt; &#xA;&lt;p&gt;The images from this repository get built and published whenever one of the following occurs:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The corresponding Dockerfile is modified.&lt;/li&gt; &#xA; &lt;li&gt;The base image is updated (a new version of the image referred to by the &lt;a href=&#34;https://docs.docker.com/engine/reference/builder/#from&#34;&gt;&lt;code&gt;FROM&lt;/code&gt;&lt;/a&gt; statement).&lt;/li&gt; &#xA; &lt;li&gt;According to the schedule defined in the &lt;a href=&#34;https://raw.githubusercontent.com/dotnet/dotnet-buildtools-prereqs-docker/main/eng/pipelines/dotnet-buildtools-prereqs-all.yml&#34;&gt;pipeline yaml&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How to identify the image digest&lt;/h2&gt; &#xA;&lt;p&gt;The images from this repo are being &lt;a href=&#34;https://raw.githubusercontent.com/dotnet/dotnet-buildtools-prereqs-docker/main/#when-do-images-get-built&#34;&gt;rebuilt continuously&lt;/a&gt;. As such, in order to diagnose issues/regressions, it is sometimes necessary to be able to identity the specific image used in CI/Helix test runs. This is useful when needing to examine a previously working version of the image. The image tag will always reference the latest image version. To examine an older image, you&#39;ll need to retrieve it via its digest which uniquely identifies that specific version of the image. To retrieve the digest, identify the logic that pulls the image and inspect the output. For example, to find the image digest of a containerized AzDO job, look at the output of the &lt;code&gt;Initialize containers&lt;/code&gt; step.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;...&#xA;/usr/bin/docker pull mcr.microsoft.com/dotnet-buildtools/prereqs:cbl-mariner-2.0-fpm&#xA;cbl-mariner-2.0-fpm: Pulling from dotnet-buildtools/prereqs&#xA;63567fa8bd47: Pulling fs layer&#xA;a0bbb2e1d432: Pulling fs layer&#xA;a8b51056c91c: Pulling fs layer&#xA;a0bbb2e1d432: Verifying Checksum&#xA;a0bbb2e1d432: Download complete&#xA;63567fa8bd47: Verifying Checksum&#xA;63567fa8bd47: Download complete&#xA;63567fa8bd47: Pull complete&#xA;a8b51056c91c: Verifying Checksum&#xA;a8b51056c91c: Download complete&#xA;a0bbb2e1d432: Pull complete&#xA;a8b51056c91c: Pull complete&#xA;Digest: sha256:4dccac3bd646c9edd1f4645cc52828c8d24d66cfe7d8e8191e3c365d37a1c501&#xA;Status: Downloaded newer image for mcr.microsoft.com/dotnet-buildtools/prereqs:cbl-mariner-2.0-fpm&#xA;mcr.microsoft.com/dotnet-buildtools/prereqs:cbl-mariner-2.0-fpm&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In this case the digest of the &lt;code&gt;mcr.microsoft.com/dotnet-buildtools/prereqs:cbl-mariner-2.0-fpm&lt;/code&gt; image at the time of this build run is &lt;code&gt;sha256:4dccac3bd646c9edd1f4645cc52828c8d24d66cfe7d8e8191e3c365d37a1c501&lt;/code&gt;. You can pull this image by its digest via &lt;code&gt;docker pull mcr.microsoft.com/dotnet-buildtools/prereqs@sha256:4dccac3bd646c9edd1f4645cc52828c8d24d66cfe7d8e8191e3c365d37a1c501&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;How to identity the Dockerfile an image was built from&lt;/h3&gt; &#xA;&lt;p&gt;The Dockerfile that an image was built from can be found given the &lt;a href=&#34;https://raw.githubusercontent.com/dotnet/dotnet-buildtools-prereqs-docker/main/#how-to-identify-the-image-digest&#34;&gt;image digest&lt;/a&gt;. This is possible by searching &lt;a href=&#34;https://github.com/dotnet/versions/raw/main/build-info/docker/image-info.dotnet-dotnet-buildtools-prereqs-docker-main.json&#34;&gt;version info&lt;/a&gt; for this repository.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git log -S&#34;mcr.microsoft.com/dotnet-buildtools/prereqs@sha256:4dccac3bd646c9edd1f4645cc52828c8d24d66cfe7d8e8191e3c365d37a1c501&#34; -- .\build-info\docker\image-info.dotnet-dotnet-buildtools-prereqs-docker-main.json&#xA;commit 199e0e1206404362c3aac6ba1bef15fa7cc290cc&#xA;Author: dotnet-docker-bot &amp;lt;dotnet-docker-bot@microsoft.com&amp;gt;&#xA;Date:   Mon Aug 5 21:43:41 2024 +0000&#xA;&#xA;    Merging Docker image info updates from build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;From this commit of the &lt;code&gt;image-info.dotnet-dotnet-buildtools-prereqs-docker-main.json&lt;/code&gt;, you can retrieve the Dockerfile&#39;s &lt;code&gt;commitUrl&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&#34;platforms&#34;: [&#xA;  {&#xA;    &#34;dockerfile&#34;: &#34;src/cbl-mariner/2.0/fpm/amd64/Dockerfile&#34;,&#xA;    &#34;simpleTags&#34;: [&#xA;      &#34;cbl-mariner-2.0-fpm&#34;,&#xA;      &#34;cbl-mariner-2.0-fpm-20240805132320-2525e15&#34;&#xA;    ],&#xA;    &#34;digest&#34;: &#34;mcr.microsoft.com/dotnet-buildtools/prereqs@sha256:4dccac3bd646c9edd1f4645cc52828c8d24d66cfe7d8e8191e3c365d37a1c501&#34;,&#xA;    &#34;baseImageDigest&#34;: &#34;mcr.microsoft.com/cbl-mariner/base/core@sha256:a490e0b0869dc570ae29782c2bc17643aaaad1be102aca83ce0b96e0d0d2d328&#34;,&#xA;    &#34;osType&#34;: &#34;Linux&#34;,&#xA;    &#34;osVersion&#34;: &#34;cbl-mariner2.0&#34;,&#xA;    &#34;architecture&#34;: &#34;amd64&#34;,&#xA;    &#34;created&#34;: &#34;2024-08-05T13:25:28.1215548Z&#34;,&#xA;    &#34;commitUrl&#34;: &#34;https://github.com/dotnet/dotnet-buildtools-prereqs-docker/blob/2525e157e2c2abdd6aab2f0e5b511eb959a2b583/src/cbl-mariner/2.0/fpm/amd64/Dockerfile&#34;,&#xA;    &#34;layers&#34;: [&#xA;      &#34;sha256:a8b51056c91ca838379088fa3521b54d111c800dbe9870f2b4ad7ef57a70ce99&#34;,&#xA;      &#34;sha256:a0bbb2e1d432eb6e6dd939d2108dd21f4ed4ee27bd60c1c7e3d0edc1fc7ca833&#34;,&#xA;      &#34;sha256:63567fa8bd47def3e649849841c5f3be407237a44d8c9b6019ecb21cb0009348&#34;&#xA;    ]&#xA;  }&#xA;]&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Additional Info&lt;/h2&gt; &#xA;&lt;h3&gt;Source Folder Structure&lt;/h3&gt; &#xA;&lt;p&gt;The folder structure used in &lt;a href=&#34;https://raw.githubusercontent.com/dotnet/dotnet-buildtools-prereqs-docker/main/src&#34;&gt;src&lt;/a&gt; aligns with the tagging convention - &lt;code&gt;&amp;lt;os-name&amp;gt;-&amp;lt;os-version&amp;gt;-&amp;lt;variant&amp;gt;-&amp;lt;architecture&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;os-name&amp;gt;-&amp;lt;os-version&amp;gt;-&amp;lt;variant&amp;gt;-cross-&amp;lt;target&amp;gt;&lt;/code&gt;. For example, the Dockerfile used to produce the &lt;code&gt;mcr.microsoft.com/dotnet-buildtools/prereqs:alpine-3.20-amd64&lt;/code&gt; image is stored in the &lt;a href=&#34;https://raw.githubusercontent.com/dotnet/dotnet-buildtools-prereqs-docker/main/src/alpine/3.20/amd64&#34;&gt;src/alpine/3.20/amd64&lt;/a&gt; folder. The Dockerfile used to produce the &lt;code&gt;mcr.microsoft.com/dotnet-buildtools/prereqs:azurelinux-3.0-net8.0-cross-arm64&lt;/code&gt; image is stored in the &lt;a href=&#34;https://raw.githubusercontent.com/dotnet/dotnet-buildtools-prereqs-docker/main/src/azurelinux/3.0/net8.0/cross/arm64&#34;&gt;src/azurelinux/3.0/net8.0/cross/arm64&lt;/a&gt; folder.&lt;/p&gt; &#xA;&lt;p&gt;If a Dockerfile is shared across multiple architectures, then the &lt;code&gt;&amp;lt;architecture&amp;gt;&lt;/code&gt; folder should be omitted. For example, the &lt;a href=&#34;https://raw.githubusercontent.com/dotnet/dotnet-buildtools-prereqs-docker/main/src/alpine/3.20/helix/Dockerfile&#34;&gt;src\alpine\3.20\helix\Dockerfile&lt;/a&gt; is built for all supported architectures (amd64, arm64 and arm) therefore there is no architecture folder in its path.&lt;/p&gt; &#xA;&lt;h3&gt;Manifest&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/dotnet/dotnet-buildtools-prereqs-docker/main/manifest.json&#34;&gt;manifest.json&lt;/a&gt; contains metadata used by the build infrastructure to produce the container images. The metadata describes which Dockerfiles to build, what tags to produce, where to publish the images, etc. It is critical that the manifest gets updated appropriately when Dockerfiles are added/removed. The manifest at the root of the repo represents the global manifest. It has references to sub-manifests within each of the OS folders (e.g. &lt;a href=&#34;https://raw.githubusercontent.com/dotnet/dotnet-buildtools-prereqs-docker/main/src/alpine/manifest.json&#34;&gt;src/alpine/manifest.json&lt;/a&gt;). When adding or modifying entries for Dockerfiles, those changes should be made to the appropriate OS-specific sub-manifest file. Each Dockerfile will have an entry that looks like the following.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;platforms&#34;: [&#xA;    {&#xA;      &#34;dockerfile&#34;: &#34;src/alpine/3.20/amd64&#34;,&#xA;      &#34;os&#34;: &#34;linux&#34;,&#xA;      &#34;osVersion&#34;: &#34;alpine3.20&#34;,&#xA;      &#34;tags&#34;: {&#xA;        &#34;alpine-3.20-amd64&#34;: {}&#xA;      }&#xA;    }&#xA;  ]&#xA;},&#xA;{&#xA;  &#34;platforms&#34;: [&#xA;    {&#xA;      &#34;architecture&#34;: &#34;arm64&#34;,&#xA;      &#34;dockerfile&#34;: &#34;src/debian/12/helix/arm64v8&#34;,&#xA;      &#34;os&#34;: &#34;linux&#34;,&#xA;      &#34;osVersion&#34;: &#34;bookworm&#34;,&#xA;      &#34;tags&#34;: {&#xA;        &#34;debian-12-helix-arm64v8&#34;: {}&#xA;      },&#xA;      &#34;variant&#34;: &#34;v8&#34;&#xA;    }&#xA;  ]&#xA;},&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;architecture&lt;/code&gt; - Architecture of the image: amd64 (default), arm, arm64&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;dockerfile&lt;/code&gt; - Relative path to the Dockerfile to build&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;os&lt;/code&gt; - OS the image is based on: linux, windows&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;osVersion&lt;/code&gt; - Version of the &lt;code&gt;os&lt;/code&gt; the image is based on&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;tags&lt;/code&gt; - Collection of tags to create for the image&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;variant&lt;/code&gt; - Architecture variant of the image&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!Note] The position in manifest determines the sequence in which the image will be built.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Code Owner Responsibilities&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Code reviews&lt;/strong&gt; - Code review all changes made to the owned Dockerfiles.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Respond to build breaks&lt;/strong&gt; - It is possible for a Dockerfile to regress and cause a build break. When this occurs, the code owner is responsible for addressing the break. See &lt;a href=&#34;https://raw.githubusercontent.com/dotnet/dotnet-buildtools-prereqs-docker/main/#responding-to-build-breaks&#34;&gt;Responding to Build Breaks&lt;/a&gt; for additional details.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Address CVEs&lt;/strong&gt; - When fixable CVEs are reported that require Dockerfiles changes, the code owner is responsible for mitigating the CVE.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Remove EOL distros&lt;/strong&gt; - Remove or update Dockerfiles based on EOL distros.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Whenever a Dockerfile change is required:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;An issue will be opened and the CODEOWNER will be mentioned.&lt;/li&gt; &#xA; &lt;li&gt;The CODEOWNER is responsible for implementing a fix in a timely fashion.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Image-Builder&lt;/h3&gt; &#xA;&lt;p&gt;The underlying tool used to build the Dockerfiles is called Image-Builder. Its source is located at &lt;a href=&#34;https://github.com/dotnet/docker-tools&#34;&gt;dotnet/docker-tools&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Repo Maintainer Procedures&lt;/h2&gt; &#xA;&lt;h3&gt;Responding to Build Breaks&lt;/h3&gt; &#xA;&lt;p&gt;When a Dockerfile build break occurs the following steps are to be taken:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Create a new issue detailing the break. @mention the appropriate &lt;a href=&#34;https://raw.githubusercontent.com/dotnet/dotnet-buildtools-prereqs-docker/main/CODEOWNERS&#34;&gt;CODEOWNER&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;If the break is blocking automatic rebuilds or blocking the development/release of new changes (judgement decision), then remove the Dockerfile from the build by deleting the &lt;a href=&#34;https://raw.githubusercontent.com/dotnet/dotnet-buildtools-prereqs-docker/main/#manifest&#34;&gt;manifest entry&lt;/a&gt;. Note the build disablement in the build break issue.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;p&gt;This repo is unsupported.&lt;/p&gt;</summary>
  </entry>
</feed>