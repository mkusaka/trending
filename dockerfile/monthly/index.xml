<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dockerfile Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-12-01T02:17:15Z</updated>
  <subtitle>Monthly Trending of Dockerfile in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>aschmelyun/docker-compose-laravel</title>
    <updated>2023-12-01T02:17:15Z</updated>
    <id>tag:github.com,2023-12-01:/aschmelyun/docker-compose-laravel</id>
    <link href="https://github.com/aschmelyun/docker-compose-laravel" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A docker-compose workflow for local Laravel development&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;docker-compose-laravel&lt;/h1&gt; &#xA;&lt;p&gt;A pretty simplified Docker Compose workflow that sets up a LEMP network of containers for local Laravel development. You can view the full article that inspired this repo &lt;a href=&#34;https://dev.to/aschmelyun/the-beauty-of-docker-for-local-laravel-development-13c0&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;To get started, make sure you have &lt;a href=&#34;https://docs.docker.com/docker-for-mac/install/&#34;&gt;Docker installed&lt;/a&gt; on your system, and then clone this repository.&lt;/p&gt; &#xA;&lt;p&gt;Next, navigate in your terminal to the directory you cloned this, and spin up the containers for the web server by running &lt;code&gt;docker-compose up -d --build app&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;After that completes, follow the steps from the &lt;a href=&#34;https://raw.githubusercontent.com/aschmelyun/docker-compose-laravel/main/src/README.md&#34;&gt;src/README.md&lt;/a&gt; file to get your Laravel project added in (or create a new blank one).&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Your MySQL database host name should be &lt;code&gt;mysql&lt;/code&gt;, &lt;strong&gt;not&lt;/strong&gt; &lt;code&gt;localhost&lt;/code&gt;. The username and database should both be &lt;code&gt;homestead&lt;/code&gt; with a password of &lt;code&gt;secret&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Bringing up the Docker Compose network with &lt;code&gt;app&lt;/code&gt; instead of just using &lt;code&gt;up&lt;/code&gt;, ensures that only our site&#39;s containers are brought up at the start, instead of all of the command containers as well. The following are built for our web server, with their exposed ports detailed:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;nginx&lt;/strong&gt; - &lt;code&gt;:80&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;mysql&lt;/strong&gt; - &lt;code&gt;:3306&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;php&lt;/strong&gt; - &lt;code&gt;:9000&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;redis&lt;/strong&gt; - &lt;code&gt;:6379&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;mailhog&lt;/strong&gt; - &lt;code&gt;:8025&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Three additional containers are included that handle Composer, NPM, and Artisan commands &lt;em&gt;without&lt;/em&gt; having to have these platforms installed on your local computer. Use the following command examples from your project root, modifying them to fit your particular use case.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;docker-compose run --rm composer update&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;docker-compose run --rm npm run dev&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;docker-compose run --rm artisan migrate&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Permissions Issues&lt;/h2&gt; &#xA;&lt;p&gt;If you encounter any issues with filesystem permissions while visiting your application or running a container command, try completing one of the sets of steps below.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;If you are using your server or local environment as the root user:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Bring any container(s) down with &lt;code&gt;docker-compose down&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Replace any instance of &lt;code&gt;php.dockerfile&lt;/code&gt; in the docker-compose.yml file with &lt;code&gt;php.root.dockerfile&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Re-build the containers by running &lt;code&gt;docker-compose build --no-cache&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;If you are using your server or local environment as a user that is not root:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Bring any container(s) down with &lt;code&gt;docker-compose down&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;In your terminal, run &lt;code&gt;export UID=$(id -u)&lt;/code&gt; and then &lt;code&gt;export GID=$(id -g)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;If you see any errors about readonly variables from the above step, you can ignore them and continue&lt;/li&gt; &#xA; &lt;li&gt;Re-build the containers by running &lt;code&gt;docker-compose build --no-cache&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Then, either bring back up your container network or re-run the command you were trying before, and see if that fixes it.&lt;/p&gt; &#xA;&lt;h2&gt;Persistent MySQL Storage&lt;/h2&gt; &#xA;&lt;p&gt;By default, whenever you bring down the Docker network, your MySQL data will be removed after the containers are destroyed. If you would like to have persistent data that remains after bringing containers down and back up, do the following:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Create a &lt;code&gt;mysql&lt;/code&gt; folder in the project root, alongside the &lt;code&gt;nginx&lt;/code&gt; and &lt;code&gt;src&lt;/code&gt; folders.&lt;/li&gt; &#xA; &lt;li&gt;Under the mysql service in your &lt;code&gt;docker-compose.yml&lt;/code&gt; file, add the following lines:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;volumes:&#xA;  - ./mysql:/var/lib/mysql&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage in Production&lt;/h2&gt; &#xA;&lt;p&gt;While I originally created this template for local development, it&#39;s robust enough to be used in basic Laravel application deployments. The biggest recommendation would be to ensure that HTTPS is enabled by making additions to the &lt;code&gt;nginx/default.conf&lt;/code&gt; file and utilizing something like &lt;a href=&#34;https://hub.docker.com/r/linuxserver/letsencrypt&#34;&gt;Let&#39;s Encrypt&lt;/a&gt; to produce an SSL certificate.&lt;/p&gt; &#xA;&lt;h2&gt;Compiling Assets&lt;/h2&gt; &#xA;&lt;p&gt;This configuration should be able to compile assets with both &lt;a href=&#34;https://laravel-mix.com/&#34;&gt;laravel mix&lt;/a&gt; and &lt;a href=&#34;https://vitejs.dev/&#34;&gt;vite&lt;/a&gt;. In order to get started, you first need to add &lt;code&gt; --host 0.0.0.0&lt;/code&gt; after the end of your relevant dev command in &lt;code&gt;package.json&lt;/code&gt;. So for example, with a Laravel project using Vite, you should see:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&#34;scripts&#34;: {&#xA;  &#34;dev&#34;: &#34;vite --host 0.0.0.0&#34;,&#xA;  &#34;build&#34;: &#34;vite build&#34;&#xA;},&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, run the following commands to install your dependencies and start the dev server:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;docker-compose run --rm npm install&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;docker-compose run --rm --service-ports npm run dev&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;After that, you should be able to use &lt;code&gt;@vite&lt;/code&gt; directives to enable hot-module reloading on your local Laravel application.&lt;/p&gt; &#xA;&lt;p&gt;Want to build for production? Simply run &lt;code&gt;docker-compose run --rm npm run build&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;MailHog&lt;/h2&gt; &#xA;&lt;p&gt;The current version of Laravel (9 as of today) uses MailHog as the default application for testing email sending and general SMTP work during local development. Using the provided Docker Hub image, getting an instance set up and ready is simple and straight-forward. The service is included in the &lt;code&gt;docker-compose.yml&lt;/code&gt; file, and spins up alongside the webserver and database services.&lt;/p&gt; &#xA;&lt;p&gt;To see the dashboard and view any emails coming through the system, visit &lt;a href=&#34;http://localhost:8025&#34;&gt;localhost:8025&lt;/a&gt; after running &lt;code&gt;docker-compose up -d site&lt;/code&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>apache/apisix-docker</title>
    <updated>2023-12-01T02:17:15Z</updated>
    <id>tag:github.com,2023-12-01:/apache/apisix-docker</id>
    <link href="https://github.com/apache/apisix-docker" rel="alternate"></link>
    <summary type="html">&lt;p&gt;the docker for Apache APISIX&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;What is Apache APISIX API Gateway&lt;/h2&gt; &#xA;&lt;p&gt;Apache APISIX is a dynamic, real-time, high-performance API Gateway.&lt;/p&gt; &#xA;&lt;p&gt;APISIX API Gateway provides rich traffic management features such as load balancing, dynamic upstream, canary release, circuit breaking, authentication, observability, and more.&lt;/p&gt; &#xA;&lt;p&gt;You can use APISIX API Gateway to handle traditional north-south traffic, as well as east-west traffic between services. At present, APISIX has been used in various industries, including NASA, Tencent Cloud, EU Digital Factory, Airbus, Airwallex, iQIYI, etc.&lt;/p&gt; &#xA;&lt;h2&gt;How to run Apache APISIX&lt;/h2&gt; &#xA;&lt;p&gt;Apache APISIX supports stand-alone mode and also supports the use of etcd database as the configuration center.&lt;/p&gt; &#xA;&lt;h3&gt;How to run APISIX in stand-alone mode&lt;/h3&gt; &#xA;&lt;p&gt;In stand-alone mode, APISIX uses &lt;code&gt;apisix.yaml&lt;/code&gt; as the configuration center to store routing, upstream, consumer and other information. After APISIX is started, it will load the &lt;code&gt;apisix.yaml&lt;/code&gt; file regularly to update the corresponding configuration information.&lt;/p&gt; &#xA;&lt;p&gt;You can start an APISIX container with stand-alone mode by the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker run -d --name apache-apisix \&#xA;  -p 9080:9080 \&#xA;  -e APISIX_STAND_ALONE=true \&#xA;  apache/apisix&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Add Route and Plugin configuration to the running APISIX container:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker exec -i apache-apisix sh -c &#39;cat &amp;gt; /usr/local/apisix/conf/apisix.yaml &amp;lt;&amp;lt;_EOC_&#xA;routes:&#xA;  -&#xA;    id: httpbin&#xA;    uri: /*&#xA;    upstream:&#xA;      nodes:&#xA;        &#34;httpbin.org&#34;: 1&#xA;      type: roundrobin&#xA;    plugin_config_id: 1&#xA;&#xA;plugin_configs:&#xA;  -&#xA;    id: 1&#xA;    plugins:&#xA;      response-rewrite:&#xA;        body: &#34;Hello APISIX\n&#34;&#xA;    desc: &#34;response-rewrite&#34;&#xA;#END&#xA;_EOC_&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Test example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;curl http://127.0.0.1:9080/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;Hello APISIX&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to know more configuration examples, you can refer to &lt;a href=&#34;https://apisix.apache.org/docs/apisix/deployment-modes/#standalone&#34;&gt;stand-alone&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;How to run APISIX using etcd as configuration center&lt;/h3&gt; &#xA;&lt;h4&gt;Solution 1&lt;/h4&gt; &#xA;&lt;p&gt;The operation of APISIX also supports the use of etcd as the configuration center. Before starting the APISIX container, we need to start the etcd container with the following command, and specify the network used by the container as the host network. Make sure that all the required ports (default: &lt;code&gt;9080&lt;/code&gt;, &lt;code&gt;9443&lt;/code&gt; and &lt;code&gt;2379&lt;/code&gt;) are available and not used by other system processes.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Start etcd.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker run -d \&#xA;  --name etcd \&#xA;  --net host \&#xA;  -e ALLOW_NONE_AUTHENTICATION=yes \&#xA;  -e ETCD_ADVERTISE_CLIENT_URLS=http://127.0.0.1:2379 \&#xA;  bitnami/etcd:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Start APISIX.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker run -d \&#xA;  --name apache-apisix \&#xA;  --net host \&#xA;  apache/apisix&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Solution 2&lt;/h4&gt; &#xA;&lt;p&gt;Before starting the APISIX container, we need to create a Docker virtual network and start the etcd container.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Create a network and view the subnet address, then start etcd&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker network create apisix-network --driver bridge &amp;amp;&amp;amp; \&#xA;docker network inspect -v apisix-network &amp;amp;&amp;amp; \&#xA;docker run -d --name etcd \&#xA;  --network apisix-network \&#xA;  -p 2379:2379 \&#xA;  -p 2380:2380 \&#xA;  -e ALLOW_NONE_AUTHENTICATION=yes \&#xA;  -e ETCD_ADVERTISE_CLIENT_URLS=http://127.0.0.1:2379 \&#xA;  bitnami/etcd:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;View the return result of the previous step, we can see the &lt;code&gt;subnet&lt;/code&gt; address. Create a APISIX configuration file in the current directory. You need to set &lt;code&gt;allow_admin&lt;/code&gt; to the &lt;code&gt;subnet&lt;/code&gt; address obtained in step1.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cat &amp;lt;&amp;lt; EOF &amp;gt; $(pwd)/config.yaml&#xA;deployment:&#xA;  role: traditional&#xA;  role_traditional:&#xA;    config_provider: etcd&#xA;  admin:&#xA;    allow_admin:&#xA;      - 0.0.0.0/0  # Please set it to the subnet address you obtained.&#xA;                  # If not set, by default all IP access is allowed.&#xA;  etcd:&#xA;    host:&#xA;      - &#34;http://etcd:2379&#34;&#xA;    prefix: &#34;/apisix&#34;&#xA;    timeout: 30&#xA;EOF&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Start APISIX and reference the file created in the previous step.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt; docker run -d --name apache-apisix \&#xA;  --network apisix-network \&#xA;  -p 9080:9080 \&#xA;  -p 9180:9180 \&#xA;  -v $(pwd)/config.yaml:/usr/local/apisix/conf/config.yaml \&#xA;  apache/apisix&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Test example&lt;/h4&gt; &#xA;&lt;p&gt;Check that APISIX is running properly by running the following command on the host.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;curl &#34;http://127.0.0.1:9180/apisix/admin/services/&#34; \&#xA;-H &#39;X-API-KEY: edd1c9f034335f136f87ad84b625c8f1&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The response indicates that apisix is running successfully:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;total&#34;: 0,&#xA;  &#34;list&#34;: []&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to modify the default configuration of APISIX, you can use the following command to enter the APISIX container and modify the configuration file &lt;code&gt;./conf/config.yaml&lt;/code&gt;, which will take effect after reloading APISIX. For details, please refer to &lt;code&gt;./conf/config-default.yaml&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker exec -it apache-apisix bash&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more information, you can refer to the &lt;a href=&#34;https://apisix.apache.org/&#34;&gt;APISIX Website&lt;/a&gt; and &lt;a href=&#34;https://apisix.apache.org/docs/apisix/getting-started&#34;&gt;APISIX Documentation&lt;/a&gt;. If you encounter problems during use, you can ask for help through &lt;a href=&#34;https://apisix.apache.org/docs/general/join/&#34;&gt;slack and the mailing list&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Reload APISIX in a running container&lt;/h2&gt; &#xA;&lt;p&gt;If you change your custom configuration, you can reload APISIX (without downtime) by issuing.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker exec -it apache-apisix apisix reload&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will run the &lt;code&gt;apisix reload&lt;/code&gt; command in your container.&lt;/p&gt; &#xA;&lt;h2&gt;Kubernetes Ingress&lt;/h2&gt; &#xA;&lt;p&gt;During the deployment process, in addition to the above operations, APISIX also derived the &lt;a href=&#34;https://github.com/apache/apisix-ingress-controller&#34;&gt;&lt;code&gt;apisix-ingress-controller&lt;/code&gt;&lt;/a&gt;, which can be deployed and used in the K8s environment more conveniently.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Licensed under the Apache License, Version 2.0: &lt;a href=&#34;http://www.apache.org/licenses/LICENSE-2.0&#34;&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>linuxserver/docker-qbittorrent</title>
    <updated>2023-12-01T02:17:15Z</updated>
    <id>tag:github.com,2023-12-01:/linuxserver/docker-qbittorrent</id>
    <link href="https://github.com/linuxserver/docker-qbittorrent" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://linuxserver.io&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/linuxserver/docker-templates/master/linuxserver.io/img/linuxserver_medium.png&#34; alt=&#34;linuxserver.io&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://blog.linuxserver.io&#34; title=&#34;all the things you can do with our containers including How-To guides, opinions and much more!&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1.svg?color=94398d&amp;amp;labelColor=555555&amp;amp;logoColor=ffffff&amp;amp;style=for-the-badge&amp;amp;label=linuxserver.io&amp;amp;message=Blog&#34; alt=&#34;Blog&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/YWrKVTn&#34; title=&#34;realtime support / chat with the community and the team.&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/354974912613449730.svg?color=94398d&amp;amp;labelColor=555555&amp;amp;logoColor=ffffff&amp;amp;style=for-the-badge&amp;amp;label=Discord&amp;amp;logo=discord&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discourse.linuxserver.io&#34; title=&#34;post on our community forum.&#34;&gt;&lt;img src=&#34;https://img.shields.io/discourse/https/discourse.linuxserver.io/topics.svg?color=94398d&amp;amp;labelColor=555555&amp;amp;logoColor=ffffff&amp;amp;style=for-the-badge&amp;amp;logo=discourse&#34; alt=&#34;Discourse&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://fleet.linuxserver.io&#34; title=&#34;an online web interface which displays all of our maintained images.&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1.svg?color=94398d&amp;amp;labelColor=555555&amp;amp;logoColor=ffffff&amp;amp;style=for-the-badge&amp;amp;label=linuxserver.io&amp;amp;message=Fleet&#34; alt=&#34;Fleet&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/linuxserver&#34; title=&#34;view the source for all of our repositories.&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1.svg?color=94398d&amp;amp;labelColor=555555&amp;amp;logoColor=ffffff&amp;amp;style=for-the-badge&amp;amp;label=linuxserver.io&amp;amp;message=GitHub&amp;amp;logo=github&#34; alt=&#34;GitHub&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/linuxserver&#34; title=&#34;please consider helping us by either donating or contributing to our budget&#34;&gt;&lt;img src=&#34;https://img.shields.io/opencollective/all/linuxserver.svg?color=94398d&amp;amp;labelColor=555555&amp;amp;logoColor=ffffff&amp;amp;style=for-the-badge&amp;amp;label=Supporters&amp;amp;logo=open%20collective&#34; alt=&#34;Open Collective&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://linuxserver.io&#34;&gt;LinuxServer.io&lt;/a&gt; team brings you another container release featuring:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;regular and timely application updates&lt;/li&gt; &#xA; &lt;li&gt;easy user mappings (PGID, PUID)&lt;/li&gt; &#xA; &lt;li&gt;custom base image with s6 overlay&lt;/li&gt; &#xA; &lt;li&gt;weekly base OS updates with common layers across the entire LinuxServer.io ecosystem to minimise space usage, down time and bandwidth&lt;/li&gt; &#xA; &lt;li&gt;regular security updates&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Find us at:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.linuxserver.io&#34;&gt;Blog&lt;/a&gt; - all the things you can do with our containers including How-To guides, opinions and much more!&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://discord.gg/YWrKVTn&#34;&gt;Discord&lt;/a&gt; - realtime support / chat with the community and the team.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://discourse.linuxserver.io&#34;&gt;Discourse&lt;/a&gt; - post on our community forum.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://fleet.linuxserver.io&#34;&gt;Fleet&lt;/a&gt; - an online web interface which displays all of our maintained images.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/linuxserver&#34;&gt;GitHub&lt;/a&gt; - view the source for all of our repositories.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://opencollective.com/linuxserver&#34;&gt;Open Collective&lt;/a&gt; - please consider helping us by either donating or contributing to our budget&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;&lt;a href=&#34;https://github.com/linuxserver/docker-qbittorrent&#34;&gt;linuxserver/qbittorrent&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://scarf.sh/gateway/linuxserver-ci/docker/linuxserver%2Fqbittorrent&#34;&gt;&lt;img src=&#34;https://scarf.sh/installs-badge/linuxserver-ci/linuxserver%2Fqbittorrent?color=94398d&amp;amp;label-color=555555&amp;amp;logo-color=ffffff&amp;amp;style=for-the-badge&amp;amp;package-type=docker&#34; alt=&#34;Scarf.io pulls&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/linuxserver/docker-qbittorrent&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/linuxserver/docker-qbittorrent.svg?color=94398d&amp;amp;labelColor=555555&amp;amp;logoColor=ffffff&amp;amp;style=for-the-badge&amp;amp;logo=github&#34; alt=&#34;GitHub Stars&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/linuxserver/docker-qbittorrent/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/linuxserver/docker-qbittorrent.svg?color=94398d&amp;amp;labelColor=555555&amp;amp;logoColor=ffffff&amp;amp;style=for-the-badge&amp;amp;logo=github&#34; alt=&#34;GitHub Release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/linuxserver/docker-qbittorrent/packages&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1.svg?color=94398d&amp;amp;labelColor=555555&amp;amp;logoColor=ffffff&amp;amp;style=for-the-badge&amp;amp;label=linuxserver.io&amp;amp;message=GitHub%20Package&amp;amp;logo=github&#34; alt=&#34;GitHub Package Repository&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitlab.com/linuxserver.io/docker-qbittorrent/container_registry&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1.svg?color=94398d&amp;amp;labelColor=555555&amp;amp;logoColor=ffffff&amp;amp;style=for-the-badge&amp;amp;label=linuxserver.io&amp;amp;message=GitLab%20Registry&amp;amp;logo=gitlab&#34; alt=&#34;GitLab Container Registry&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://quay.io/repository/linuxserver.io/qbittorrent&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1.svg?color=94398d&amp;amp;labelColor=555555&amp;amp;logoColor=ffffff&amp;amp;style=for-the-badge&amp;amp;label=linuxserver.io&amp;amp;message=Quay.io&#34; alt=&#34;Quay.io&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/linuxserver/qbittorrent&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/pulls/linuxserver/qbittorrent.svg?color=94398d&amp;amp;labelColor=555555&amp;amp;logoColor=ffffff&amp;amp;style=for-the-badge&amp;amp;label=pulls&amp;amp;logo=docker&#34; alt=&#34;Docker Pulls&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/linuxserver/qbittorrent&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/stars/linuxserver/qbittorrent.svg?color=94398d&amp;amp;labelColor=555555&amp;amp;logoColor=ffffff&amp;amp;style=for-the-badge&amp;amp;label=stars&amp;amp;logo=docker&#34; alt=&#34;Docker Stars&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://ci.linuxserver.io/job/Docker-Pipeline-Builders/job/docker-qbittorrent/job/master/&#34;&gt;&lt;img src=&#34;https://img.shields.io/jenkins/build?labelColor=555555&amp;amp;logoColor=ffffff&amp;amp;style=for-the-badge&amp;amp;jobUrl=https%3A%2F%2Fci.linuxserver.io%2Fjob%2FDocker-Pipeline-Builders%2Fjob%2Fdocker-qbittorrent%2Fjob%2Fmaster%2F&amp;amp;logo=jenkins&#34; alt=&#34;Jenkins Build&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://ci-tests.linuxserver.io/linuxserver/qbittorrent/latest/index.html&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/dynamic/yaml?color=94398d&amp;amp;labelColor=555555&amp;amp;logoColor=ffffff&amp;amp;style=for-the-badge&amp;amp;label=CI&amp;amp;query=CI&amp;amp;url=https%3A%2F%2Fci-tests.linuxserver.io%2Flinuxserver%2Fqbittorrent%2Flatest%2Fci-status.yml&#34; alt=&#34;LSIO CI&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://www.qbittorrent.org/&#34;&gt;Qbittorrent&lt;/a&gt; project aims to provide an open-source software alternative to µTorrent. qBittorrent is based on the Qt toolkit and libtorrent-rasterbar library.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.qbittorrent.org/&#34;&gt;&lt;img src=&#34;https://github.com/linuxserver/docker-templates/raw/master/linuxserver.io/img/qbittorrent-icon.png&#34; alt=&#34;qbittorrent&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Supported Architectures&lt;/h2&gt; &#xA;&lt;p&gt;We utilise the docker manifest for multi-platform awareness. More information is available from docker &lt;a href=&#34;https://distribution.github.io/distribution/spec/manifest-v2-2/#manifest-list&#34;&gt;here&lt;/a&gt; and our announcement &lt;a href=&#34;https://blog.linuxserver.io/2019/02/21/the-lsio-pipeline-project/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Simply pulling &lt;code&gt;lscr.io/linuxserver/qbittorrent:latest&lt;/code&gt; should retrieve the correct image for your arch, but you can also pull specific arch images via tags.&lt;/p&gt; &#xA;&lt;p&gt;The architectures supported by this image are:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Architecture&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Available&lt;/th&gt; &#xA;   &lt;th&gt;Tag&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;x86-64&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;amd64-&amp;lt;version tag&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;arm64&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;arm64v8-&amp;lt;version tag&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;armhf&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Version Tags&lt;/h2&gt; &#xA;&lt;p&gt;This image provides various versions that are available via tags. Please read the descriptions carefully and exercise caution when using unstable or development tags.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Tag&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Available&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;latest&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;Stable qbittorrent releases&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;libtorrentv1&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;Static qbittorrent builds using libtorrent v1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Application Setup&lt;/h2&gt; &#xA;&lt;p&gt;The web UI is at &lt;code&gt;&amp;lt;your-ip&amp;gt;:8080&lt;/code&gt; and a temporary password for the &lt;code&gt;admin&lt;/code&gt; user will be printed to the container log on startup.&lt;/p&gt; &#xA;&lt;p&gt;You must then change username/password in the web UI section of settings. If you do not change the password a new one will be generated every time the container starts.&lt;/p&gt; &#xA;&lt;p&gt;If you are running a very old (3.x) kernel you may run into &lt;a href=&#34;https://github.com/linuxserver/docker-qbittorrent/issues/103&#34;&gt;this issue&lt;/a&gt; which can be worked around using &lt;a href=&#34;https://github.com/linuxserver/docker-qbittorrent/issues/103#issuecomment-831238484&#34;&gt;this method&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;WEBUI_PORT variable&lt;/h3&gt; &#xA;&lt;p&gt;Due to issues with CSRF and port mapping, should you require to alter the port for the web UI you need to change both sides of the -p 8080 switch AND set the WEBUI_PORT variable to the new port.&lt;/p&gt; &#xA;&lt;p&gt;For example, to set the port to 8090 you need to set -p 8090:8090 and -e WEBUI_PORT=8090&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;To help you get started creating a container from this image you can either use docker-compose or the docker cli.&lt;/p&gt; &#xA;&lt;h3&gt;docker-compose (recommended, &lt;a href=&#34;https://docs.linuxserver.io/general/docker-compose&#34;&gt;click here for more info&lt;/a&gt;)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;---&#xA;version: &#34;2.1&#34;&#xA;services:&#xA;  qbittorrent:&#xA;    image: lscr.io/linuxserver/qbittorrent:latest&#xA;    container_name: qbittorrent&#xA;    environment:&#xA;      - PUID=1000&#xA;      - PGID=1000&#xA;      - TZ=Etc/UTC&#xA;      - WEBUI_PORT=8080&#xA;    volumes:&#xA;      - /path/to/appdata/config:/config&#xA;      - /path/to/downloads:/downloads&#xA;    ports:&#xA;      - 8080:8080&#xA;      - 6881:6881&#xA;      - 6881:6881/udp&#xA;    restart: unless-stopped&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;docker cli (&lt;a href=&#34;https://docs.docker.com/engine/reference/commandline/cli/&#34;&gt;click here for more info&lt;/a&gt;)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run -d \&#xA;  --name=qbittorrent \&#xA;  -e PUID=1000 \&#xA;  -e PGID=1000 \&#xA;  -e TZ=Etc/UTC \&#xA;  -e WEBUI_PORT=8080 \&#xA;  -p 8080:8080 \&#xA;  -p 6881:6881 \&#xA;  -p 6881:6881/udp \&#xA;  -v /path/to/appdata/config:/config \&#xA;  -v /path/to/downloads:/downloads \&#xA;  --restart unless-stopped \&#xA;  lscr.io/linuxserver/qbittorrent:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Parameters&lt;/h2&gt; &#xA;&lt;p&gt;Containers are configured using parameters passed at runtime (such as those above). These parameters are separated by a colon and indicate &lt;code&gt;&amp;lt;external&amp;gt;:&amp;lt;internal&amp;gt;&lt;/code&gt; respectively. For example, &lt;code&gt;-p 8080:80&lt;/code&gt; would expose port &lt;code&gt;80&lt;/code&gt; from inside the container to be accessible from the host&#39;s IP on port &lt;code&gt;8080&lt;/code&gt; outside the container.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Parameter&lt;/th&gt; &#xA;   &lt;th&gt;Function&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;-p 8080&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;WebUI&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;-p 6881&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;tcp connection port&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;-p 6881/udp&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;udp connection port&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;-e PUID=1000&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;for UserID - see below for explanation&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;-e PGID=1000&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;for GroupID - see below for explanation&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;-e TZ=Etc/UTC&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;specify a timezone to use, see this &lt;a href=&#34;https://en.wikipedia.org/wiki/List_of_tz_database_time_zones#List&#34;&gt;list&lt;/a&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;-e WEBUI_PORT=8080&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;for changing the port of the web UI, see below for explanation&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;-v /config&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Contains all relevant configuration files.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;-v /downloads&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Location of downloads on disk.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Environment variables from files (Docker secrets)&lt;/h2&gt; &#xA;&lt;p&gt;You can set any environment variable from a file by using a special prepend &lt;code&gt;FILE__&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;As an example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;-e FILE__MYVAR=/run/secrets/mysecretvariable&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Will set the environment variable &lt;code&gt;MYVAR&lt;/code&gt; based on the contents of the &lt;code&gt;/run/secrets/mysecretvariable&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;h2&gt;Umask for running applications&lt;/h2&gt; &#xA;&lt;p&gt;For all of our images we provide the ability to override the default umask settings for services started within the containers using the optional &lt;code&gt;-e UMASK=022&lt;/code&gt; setting. Keep in mind umask is not chmod it subtracts from permissions based on it&#39;s value it does not add. Please read up &lt;a href=&#34;https://en.wikipedia.org/wiki/Umask&#34;&gt;here&lt;/a&gt; before asking for support.&lt;/p&gt; &#xA;&lt;h2&gt;User / Group Identifiers&lt;/h2&gt; &#xA;&lt;p&gt;When using volumes (&lt;code&gt;-v&lt;/code&gt; flags), permissions issues can arise between the host OS and the container, we avoid this issue by allowing you to specify the user &lt;code&gt;PUID&lt;/code&gt; and group &lt;code&gt;PGID&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Ensure any volume directories on the host are owned by the same user you specify and any permissions issues will vanish like magic.&lt;/p&gt; &#xA;&lt;p&gt;In this instance &lt;code&gt;PUID=1000&lt;/code&gt; and &lt;code&gt;PGID=1000&lt;/code&gt;, to find yours use &lt;code&gt;id your_user&lt;/code&gt; as below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;id your_user&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Example output:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;uid=1000(your_user) gid=1000(your_user) groups=1000(your_user)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Docker Mods&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://mods.linuxserver.io/?mod=qbittorrent&#34; title=&#34;view available mods for this container.&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/dynamic/yaml?color=94398d&amp;amp;labelColor=555555&amp;amp;logoColor=ffffff&amp;amp;style=for-the-badge&amp;amp;label=qbittorrent&amp;amp;query=%24.mods%5B%27qbittorrent%27%5D.mod_count&amp;amp;url=https%3A%2F%2Fraw.githubusercontent.com%2Flinuxserver%2Fdocker-mods%2Fmaster%2Fmod-list.yml&#34; alt=&#34;Docker Mods&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://mods.linuxserver.io/?mod=universal&#34; title=&#34;view available universal mods.&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/dynamic/yaml?color=94398d&amp;amp;labelColor=555555&amp;amp;logoColor=ffffff&amp;amp;style=for-the-badge&amp;amp;label=universal&amp;amp;query=%24.mods%5B%27universal%27%5D.mod_count&amp;amp;url=https%3A%2F%2Fraw.githubusercontent.com%2Flinuxserver%2Fdocker-mods%2Fmaster%2Fmod-list.yml&#34; alt=&#34;Docker Universal Mods&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;We publish various &lt;a href=&#34;https://github.com/linuxserver/docker-mods&#34;&gt;Docker Mods&lt;/a&gt; to enable additional functionality within the containers. The list of Mods available for this image (if any) as well as universal mods that can be applied to any one of our images can be accessed via the dynamic badges above.&lt;/p&gt; &#xA;&lt;h2&gt;Support Info&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Shell access whilst the container is running:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker exec -it qbittorrent /bin/bash&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To monitor the logs of the container in realtime:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker logs -f qbittorrent&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Container version number:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker inspect -f &#39;{{ index .Config.Labels &#34;build_version&#34; }}&#39; qbittorrent&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Image version number:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker inspect -f &#39;{{ index .Config.Labels &#34;build_version&#34; }}&#39; lscr.io/linuxserver/qbittorrent:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Updating Info&lt;/h2&gt; &#xA;&lt;p&gt;Most of our images are static, versioned, and require an image update and container recreation to update the app inside. With some exceptions (ie. nextcloud, plex), we do not recommend or support updating apps inside the container. Please consult the &lt;a href=&#34;https://raw.githubusercontent.com/linuxserver/docker-qbittorrent/master/#application-setup&#34;&gt;Application Setup&lt;/a&gt; section above to see if it is recommended for the image.&lt;/p&gt; &#xA;&lt;p&gt;Below are the instructions for updating containers:&lt;/p&gt; &#xA;&lt;h3&gt;Via Docker Compose&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Update images:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;All images:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker-compose pull&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Single image:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker-compose pull qbittorrent&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Update containers:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;All containers:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker-compose up -d&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Single container:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker-compose up -d qbittorrent&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;You can also remove the old dangling images:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker image prune&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Via Docker Run&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Update the image:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker pull lscr.io/linuxserver/qbittorrent:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Stop the running container:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker stop qbittorrent&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Delete the container:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker rm qbittorrent&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Recreate a new container with the same docker run parameters as instructed above (if mapped correctly to a host folder, your &lt;code&gt;/config&lt;/code&gt; folder and settings will be preserved)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;You can also remove the old dangling images:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker image prune&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Via Watchtower auto-updater (only use if you don&#39;t remember the original parameters)&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Pull the latest image at its tag and replace it with the same env variables in one run:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run --rm \&#xA;  -v /var/run/docker.sock:/var/run/docker.sock \&#xA;  containrrr/watchtower \&#xA;  --run-once qbittorrent&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;You can also remove the old dangling images: &lt;code&gt;docker image prune&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;warning&lt;/strong&gt;: We do not endorse the use of Watchtower as a solution to automated updates of existing Docker containers. In fact we generally discourage automated updates. However, this is a useful tool for one-time manual updates of containers where you have forgotten the original parameters. In the long term, we highly recommend using &lt;a href=&#34;https://docs.linuxserver.io/general/docker-compose&#34;&gt;Docker Compose&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Image Update Notifications - Diun (Docker Image Update Notifier)&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;tip&lt;/strong&gt;: We recommend &lt;a href=&#34;https://crazymax.dev/diun/&#34;&gt;Diun&lt;/a&gt; for update notifications. Other tools that automatically update containers unattended are not recommended or supported.&lt;/p&gt; &#xA;&lt;h2&gt;Building locally&lt;/h2&gt; &#xA;&lt;p&gt;If you want to make local modifications to these images for development purposes or just to customize the logic:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/linuxserver/docker-qbittorrent.git&#xA;cd docker-qbittorrent&#xA;docker build \&#xA;  --no-cache \&#xA;  --pull \&#xA;  -t lscr.io/linuxserver/qbittorrent:latest .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The ARM variants can be built on x86_64 hardware using &lt;code&gt;multiarch/qemu-user-static&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run --rm --privileged multiarch/qemu-user-static:register --reset&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once registered you can define the dockerfile to use with &lt;code&gt;-f Dockerfile.aarch64&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Versions&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;07.10.23:&lt;/strong&gt; - Install unrar from &lt;a href=&#34;https://github.com/linuxserver/docker-unrar&#34;&gt;linuxserver repo&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;10.08.23:&lt;/strong&gt; - Bump unrar to 6.2.10.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;17.06.23:&lt;/strong&gt; - Deprecate armhf as per &lt;a href=&#34;https://www.linuxserver.io/armhf&#34;&gt;https://www.linuxserver.io/armhf&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;10.06.23:&lt;/strong&gt; - Bump unrar to 6.2.8.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;23.02.23:&lt;/strong&gt; - Add qt6-qtbase-sqlite to support SQLite database for resume files.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;29.11.22:&lt;/strong&gt; - Add openssl1.1-compat for qbittorrent-cli.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;31.10.22:&lt;/strong&gt; - Add libtorrentv1 branch.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;31.08.22:&lt;/strong&gt; - Rebase to Alpine Edge again to follow latest releases.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;12.08.22:&lt;/strong&gt; - Bump unrar to 6.1.7.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;16.06.22:&lt;/strong&gt; - Rebase to Alpine 3.16 from edge.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;25.05.22:&lt;/strong&gt; - Fetch qbitorrent-cli from upstream repo.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;02.03.22:&lt;/strong&gt; - Add unrar, 7zip, and qbitorrent-cli.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;01.03.22:&lt;/strong&gt; - Add python for search plugin support.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;23.02.22:&lt;/strong&gt; - Rebase to Alpine Edge, install from Alpine repos.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;19.02.22:&lt;/strong&gt; - Add jq to build-stage&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;07.01.22:&lt;/strong&gt; - Rebase to Alpine, build from source.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;06.01.22:&lt;/strong&gt; - Deprecate unstable branch.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;10.02.21:&lt;/strong&gt; - Rebase to focal.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;20.01.21:&lt;/strong&gt; - Deprecate &lt;code&gt;UMASK_SET&lt;/code&gt; in favor of UMASK in baseimage, see above for more information.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;12.11.20:&lt;/strong&gt; - Stop creating /config/data directory on startup&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;03.04.20:&lt;/strong&gt; - Fix adding search engine plugin&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;02.08.19:&lt;/strong&gt; - Add qbitorrent-cli for processing scripts.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;23.03.19:&lt;/strong&gt; - Switching to new Base images, shift to arm32v7 tag.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;14.01.19:&lt;/strong&gt; - Rebase to Ubuntu, add multi arch and pipeline logic.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;25.09.18:&lt;/strong&gt; - Use buildstage type build, bump qbitorrent to 4.1.3.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;14.08.18:&lt;/strong&gt; - Rebase to alpine 3.8, bump libtorrent to 1.1.9 and qbitorrent to 4.1.2.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;08.06.18:&lt;/strong&gt; - Bump qbitorrent to 4.1.1.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;26.04.18:&lt;/strong&gt; - Bump libtorrent to 1.1.7.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;02.03.18:&lt;/strong&gt; - Bump qbitorrent to 4.0.4 and libtorrent to 1.1.6.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;02.01.18:&lt;/strong&gt; - Deprecate cpu_core routine lack of scaling.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;19.12.17:&lt;/strong&gt; - Update to v4.0.3.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;09.02.17:&lt;/strong&gt; - Rebase to alpine 3.7&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;01.12.17:&lt;/strong&gt; - Update to v4.0.2.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;27.11.17:&lt;/strong&gt; - Update to v4 and use cpu_core routine to speed up builds.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;16.09.17:&lt;/strong&gt; - Bump to 3.3.16, Add WEBUI_PORT variable and notes to README to allow changing port of webui.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;01.08.17:&lt;/strong&gt; - Initial Release.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;12.02.18:&lt;/strong&gt; - Initial Release.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>