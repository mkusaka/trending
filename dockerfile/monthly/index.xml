<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dockerfile Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-04-01T02:02:39Z</updated>
  <subtitle>Monthly Trending of Dockerfile in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>jenkins-docs/quickstart-tutorials</title>
    <updated>2024-04-01T02:02:39Z</updated>
    <id>tag:github.com,2024-04-01:/jenkins-docs/quickstart-tutorials</id>
    <link href="https://github.com/jenkins-docs/quickstart-tutorials" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Jenkins tutorial files&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Jenkins Tutorial Files&lt;/h1&gt; &#xA;&lt;p&gt;This repository includes the files necessary for transitioning from &lt;code&gt;docker&lt;/code&gt; to &lt;code&gt;docker compose&lt;/code&gt; in our Jenkins tutorials and installation guides.&lt;/p&gt; &#xA;&lt;h3&gt;How to Set Up the Repository in Gitpod?&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;To initialize your Gitpod workspace, prepend &lt;code&gt;gitpod.io/#&lt;/code&gt; to any GitHub, GitLab, or Bitbucket repository URL.&lt;/li&gt; &#xA; &lt;li&gt;Access our Gitpod workspace &lt;a href=&#34;https://gitpod.io/#https://github.com/jenkins-docs/quickstart-tutorials&#34;&gt;here&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;If you plan to use Gitpod regularly, we recommend installing the Gitpod extension. This extension adds a Gitpod button to every GitHub repository you visit, making it easy to launch a workspace. You can find the extension &lt;a href=&#34;https://chrome.google.com/webstore/detail/gitpod-online-ide/dodmmooeoklaejobgleioelladacbeki&#34;&gt;here&lt;/a&gt; for Chromium and &lt;a href=&#34;https://addons.mozilla.org/firefox/addon/gitpod/&#34;&gt;here&lt;/a&gt; for Firefox.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Gitpod&lt;/h2&gt; &#xA;&lt;p&gt;Gitpod is a cloud-based development environment designed for teams. It supports various IDEs, including VScode, IntelliJ, and many more, enabling efficient and secure software development.&lt;/p&gt; &#xA;&lt;h3&gt;Steps to Run Examples from the Repository&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Use &lt;code&gt;docker compose up&lt;/code&gt; to run examples from this project. Currently, we have four working examples:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;maven&lt;/li&gt; &#xA;   &lt;li&gt;node&lt;/li&gt; &#xA;   &lt;li&gt;python&lt;/li&gt; &#xA;   &lt;li&gt;multibranch pipeline&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To run different examples with &lt;code&gt;docker compose up -d&lt;/code&gt;, append the example name to the command, like so:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;maven&lt;/code&gt; =&amp;gt; &lt;code&gt;docker compose up -d maven&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;python&lt;/code&gt; =&amp;gt; &lt;code&gt;docker compose up -d python&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;node&lt;/code&gt; =&amp;gt; &lt;code&gt;docker compose up -d node&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;multi&lt;/code&gt; =&amp;gt; &lt;code&gt;docker compose up -d multi&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If no argument is used (i.e., &lt;code&gt;docker compose up -d&lt;/code&gt;), the command runs the latest default example.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you prefer to build images yourself, append &lt;code&gt;-f build-docker-compose.yaml&lt;/code&gt; after &lt;code&gt;docker compose&lt;/code&gt;. For example, to build the &lt;code&gt;node&lt;/code&gt; tutorial Jenkins instance, use: &lt;code&gt;docker compose -f build-docker-compose.yaml up -d node&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;How to Verify Jenkins Installation&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Check the status of the container with the &lt;code&gt;docker ps&lt;/code&gt; or &lt;code&gt;docker compose ps&lt;/code&gt; commands.&lt;/li&gt; &#xA; &lt;li&gt;Access your running Jenkins instance at &lt;a href=&#34;http://127.0.0.1:8080&#34;&gt;http://127.0.0.1:8080&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;On Gitpod, if containers are running successfully after entering &lt;code&gt;docker compose up &amp;lt;tutorial-name&amp;gt;&lt;/code&gt;, a pop-up titled &lt;code&gt;A service is available on port 8080&lt;/code&gt; should appear. If it doesn&#39;t, you can view the running service in the &lt;code&gt;PORTS&lt;/code&gt; section on the right side of the terminal.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Clean Up Instructions&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;To stop and remove running containers, use &lt;code&gt;docker compose down&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;If you encounter a &lt;code&gt;Resource is still in use&lt;/code&gt; warning, use the &lt;code&gt;--remove-orphans&lt;/code&gt; option which would give &lt;code&gt;docker compose down --remove-orphans&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;To remove the created volumes (should you need to restart from scratch), add the &lt;code&gt;-v&lt;/code&gt; option which would give &lt;code&gt;docker compose down -v&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Suppressing Jenkins Warning using JCASC&lt;/h3&gt; &#xA;&lt;p&gt;To improve the Gitpod experience with Jenkins, we&#39;ve suppressed a reverse proxy setup warning in Jenkins that was causing issues in the Gitpod environment. We achieved this using Jenkins Configuration as Code (&lt;a href=&#34;https://www.jenkins.io/projects/jcasc/&#34;&gt;JCASC&lt;/a&gt;) and added the following property to the JCASC YAML file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;jenkins:&#xA;  disabledAdministrativeMonitors:&#xA;    - &#34;hudson.diagnosis.ReverseProxySetupMonitor&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more detailed information about this configuration and the context behind it, please refer to the &lt;a href=&#34;https://github.com/ash-sxn/GSoC-2023-docker-based-quickstart/issues/61&#34;&gt;corresponding issue&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>compose-spec/compose-spec</title>
    <updated>2024-04-01T02:02:39Z</updated>
    <id>tag:github.com,2024-04-01:/compose-spec/compose-spec</id>
    <link href="https://github.com/compose-spec/compose-spec" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The Compose specification&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Compose Specification&lt;/h1&gt; &#xA;&lt;p&gt;{:.no_toc}&lt;/p&gt; &#xA;&lt;p&gt;The Compose specification establishes a standard for the definition of multi-container platform-agnostic applications. The specification can be found &lt;a href=&#34;https://raw.githubusercontent.com/compose-spec/compose-spec/master/00-overview.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ToC {:toc}&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Use cases&lt;/h2&gt; &#xA;&lt;p&gt;To provide more context on the Compose specification the following section gives example use cases for each part of the specification.&lt;/p&gt; &#xA;&lt;h3&gt;Development tools&lt;/h3&gt; &#xA;&lt;p&gt;Developers can use a Compose file to specify a container-based application that will run as a set of containers on a local container engine. The Compose implementation in this scenario could offer some specific features (local volume binding, live-reload) to better address development needs. The application definition and Compose model is the same used as that used for other use cases. Platform features expected by the specification (like configs and secrets) can be mocked with local resources.&lt;/p&gt; &#xA;&lt;h3&gt;Kubernetes deployment&lt;/h3&gt; &#xA;&lt;p&gt;Kubernetes container orchestration relies on a set of abstract concepts and APIs to manage networking services, container deployments and their lifecycles. While this offers flexibility to address many operator use cases, it makes simple use cases, like the developer use case, more complicated to express than they need to be. Projects like &lt;a href=&#34;https://github.com/kubernetes/kompose&#34;&gt;Kompose&lt;/a&gt; or &lt;a href=&#34;https://okteto.com/docs/reference/stacks&#34;&gt;Okteto Stacks&lt;/a&gt; show how the simpler Compose model can be translated into Kubernetes API payloads and make the Compose file the source of truth for development and deployment.&lt;/p&gt; &#xA;&lt;h3&gt;Cloud providers&lt;/h3&gt; &#xA;&lt;p&gt;Some cloud providers offer proprietary container hosting solutions based on in-house orchestrators and custom APIs. The Compose specification offers a simple model that can be mapped to these hosting solutions so that users can reuse Compose files that they already have and so that they do not need to learn custom configuration file formats. Platform specific features can be added either using Compose extensions or a dedicated configuration file along side the Compose file.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Development happens on GitHub for the specification. Issues are used to track bugs and actionable items. Longer discussions can happen on the &lt;a href=&#34;https://groups.google.com/forum/#!forum/compose-spec&#34;&gt;mailing list&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The specification and code is licensed under the Apache 2.0 license found in the &lt;a href=&#34;https://raw.githubusercontent.com/compose-spec/compose-spec/master/LICENSE&#34;&gt;LICENSE&lt;/a&gt; file.&lt;/p&gt; &#xA;&lt;h2&gt;Implementations&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/docker/compose&#34;&gt;Docker Compose&lt;/a&gt; is the Reference Implementation of the Compose Specification.&lt;/p&gt; &#xA;&lt;p&gt;Compose Specification is also implemented by:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kubernetes/kompose&#34;&gt;Kompose&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/containerd/nerdctl&#34;&gt;Nerdctl&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://okteto.com/docs/reference/stacks&#34;&gt;Okteto Stacks&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/docker/compose-cli&#34;&gt;Docker Cloud Integrations&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/containers/podman-compose&#34;&gt;Podman Compose&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Metadata&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Status&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;Work in progress&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Created&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;2020-01-02&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt;</summary>
  </entry>
  <entry>
    <title>kubernetes-sigs/contributor-playground</title>
    <updated>2024-04-01T02:02:39Z</updated>
    <id>tag:github.com,2024-04-01:/kubernetes-sigs/contributor-playground</id>
    <link href="https://github.com/kubernetes-sigs/contributor-playground" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Kubernetes Contributor Playground&lt;/h1&gt; &#xA;&lt;p&gt;Hello new contributors!&lt;/p&gt; &#xA;&lt;p&gt;This repository will be used as a safe space for participants in the New Contributor Onboarding Track to familiarize themselves with (some of) the Kubernetes Project&#39;s review and pull request processes.&lt;/p&gt; &#xA;&lt;p&gt;A &lt;a href=&#34;https://www.youtube.com/playlist?list=PL69nYSiGNLP3M5X7stuD7N4r3uP2PZQUx&#34;&gt;Youtube playlist&lt;/a&gt; of the New Contributor workshop has been posted, and an outline of content to videos can be found &lt;a href=&#34;http://git.k8s.io/community/events/2018/05-contributor-summit&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;If you want to practice submitting your Pull Request, do so in the &lt;code&gt;remote&lt;/code&gt; directory, or in the directory for each area or event. Do not edit files in the root directory.&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Community, discussion, contribution, and support&lt;/h2&gt; &#xA;&lt;p&gt;Learn how to engage with the Kubernetes community on the &lt;a href=&#34;http://kubernetes.io/community/&#34;&gt;community page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can reach the maintainers of this project at:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://slack.k8s.io/&#34;&gt;Slack&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://groups.google.com/forum/#!forum/kubernetes-dev&#34;&gt;Mailing List&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Code of conduct&lt;/h3&gt; &#xA;&lt;p&gt;Participation in the Kubernetes community is governed by the &lt;a href=&#34;https://raw.githubusercontent.com/kubernetes-sigs/contributor-playground/master/code-of-conduct.md&#34;&gt;Kubernetes Code of Conduct&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>