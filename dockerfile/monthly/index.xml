<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dockerfile Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-04-01T02:10:58Z</updated>
  <subtitle>Monthly Trending of Dockerfile in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>creativecommons/cc-resource-archive</title>
    <updated>2023-04-01T02:10:58Z</updated>
    <id>tag:github.com,2023-04-01:/creativecommons/cc-resource-archive</id>
    <link href="https://github.com/creativecommons/cc-resource-archive" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Collection of resources on Creative Commons (CC) tools and other open topics&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;cc-resource-archive&lt;/h1&gt; &#xA;&lt;p&gt;Collection of resources on Creative Commons (CC) tools and other open topics&lt;/p&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;Welcome to the CC Resources Archive. The idea of this project is to have a simple, easy-to-update area for keeping track of all of the useful resources that people make about Creative Commons licenses and open content topics in general. The live site is at &lt;a href=&#34;https://resources.creativecommons.org/&#34;&gt;resources.creativecommons.org&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;How it works&lt;/h2&gt; &#xA;&lt;p&gt;The website is built using &lt;a href=&#34;http://jekyllrb.com/docs/home/&#34;&gt;Jekyll&lt;/a&gt;, a simple templating system that&#39;s built into GitHub. All of the site pages are in the &lt;code&gt;docs/&lt;/code&gt; directory. This readme file and the resource template are in the main branch.&lt;/p&gt; &#xA;&lt;p&gt;You don&#39;t need to install Jekyll on your machine in order to submit a resource to the archive, but the benefit of installing is that you&#39;ll be able to see exactly what your submission will look like on the live site and correct any bugs.&lt;/p&gt; &#xA;&lt;p&gt;To submit a resource, make a copy of &lt;strong&gt;&lt;a href=&#34;https://github.com/creativecommons/cc-resource-archive/raw/main/resourcetemplate.md&#34;&gt;&lt;code&gt;resourcetemplate.md&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt; and change the values for each field accordingly. The space below the front matter is freeform, for providing additional information or links. The resource template also includes explanations of each of the fields.&lt;/p&gt; &#xA;&lt;p&gt;You can create a resource page in html, markdown, or textile, using the extensions &lt;code&gt;.html&lt;/code&gt;, &lt;code&gt;.md&lt;/code&gt;, or &lt;code&gt;.textile&lt;/code&gt;. For consistency and understandability use entire title as the filename and permalink, i.e.:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Title: Creative Commons Kiwi&lt;/strong&gt; permalink: /creative-commons-kiwi/ File: creative-commons-kiwi.textile&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Title: Six licenses for sharing your work&lt;/strong&gt; permalink: /six-licenses-for-sharing-your-work/ File: six-licenses-for-sharing-your-work.html&lt;/p&gt; &#xA;&lt;h3&gt;Category URLs&lt;/h3&gt; &#xA;&lt;p&gt;You can format the &lt;code&gt;resources.creativecommons.org/all?&lt;/code&gt; URL to show any category or combination of categories you want. For example, videos available in English about licenses:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://resources.creativecommons.org/all/?&amp;amp;topic=licenses&amp;amp;medium=video&amp;amp;language=en&#34;&gt;http://resources.creativecommons.org/all/?&amp;amp;topic=licenses&amp;amp;medium=video&amp;amp;language=en&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can use any category that&#39;s listed in one or more resources pages, not just the ones available in the menu on &#34;all.&#34; For example, resources about music:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://resources.creativecommons.org/all/?&amp;amp;topic=music&#34;&gt;http://resources.creativecommons.org/all/?&amp;amp;topic=music&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;It will also be trivial to create an RSS feed for any category or combination of categories - for example, to create a feed of all resources available in Spanish for embedding in an affiliate site. If you need one, submit an issue through GitHub.&lt;/p&gt; &#xA;&lt;h3&gt;The index page&lt;/h3&gt; &#xA;&lt;p&gt;The index page pulls up to 16 featured items. Each featured page has a &#34;featured&#34; variable. The number is the order in which they should appear.&lt;/p&gt; &#xA;&lt;h3&gt;Menu categories&lt;/h3&gt; &#xA;&lt;p&gt;The list of topics, media, and languages on the homepage is dictated by the three respective &lt;code&gt;.yml&lt;/code&gt; files in the &lt;code&gt;_data/&lt;/code&gt; folder. For each category, we provide a capitalized name and a lowercase string with no punctuation. For example:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;name: Licenses string: licenses&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;name: Public Domain string: publicdomain&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;name: Open Educational Resources string: oer&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The reason for setting it up this way is that the &#34;string&#34; value is what&#39;s used in the URLs and CSS classes. It&#39;s also what you use in the resource page itself to identify the category. So these should be relatively short, but still sensical.&lt;/p&gt; &#xA;&lt;h2&gt;Local Development&lt;/h2&gt; &#xA;&lt;p&gt;Local development can be previewed by installing Jekyll or by using Docker. We think the latter experience is easier to setup with more consistent behavior.&lt;/p&gt; &#xA;&lt;h3&gt;Docker Compose setup&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.docker.com/engine/install/&#34;&gt;Install Docker Engine&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;In your terminal, change the directory to where you have cloned this repository (or a fork of it)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Run the container:&lt;/strong&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker compose up&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;This should result in the container being built if it&#39;s the first time&lt;/li&gt; &#xA;   &lt;li&gt;The docker container may be slow &lt;span&gt;‚è≥&lt;/span&gt;&lt;span&gt;üò£&lt;/span&gt; When it is ready you should see: &lt;pre&gt;&lt;code&gt;jekyll-cc-resource-archive  |     Server address: http://0.0.0.0:4000&#xA;jekyll-cc-resource-archive  |   Server running... press ctrl-c to stop.&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Once running successfully, you can access the site in your browser at &lt;a href=&#34;http://localhost:4000/&#34;&gt;localhost:4000&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Stop the container:&lt;/strong&gt; To stop the app from running, simply open another instance of the terminal and type &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker compose down&#xA;&lt;/code&gt;&lt;/pre&gt; or you can simply revisit the existing terminal which is running the container and type &lt;code&gt;CTRL + C&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;h3&gt;Code&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/creativecommons/cc-resource-archive/main/LICENSE&#34;&gt;&lt;code&gt;LICENSE&lt;/code&gt;&lt;/a&gt;: the code within this repository is licensed under the Expat/&lt;a href=&#34;http://www.opensource.org/licenses/MIT&#34; title=&#34;The MIT License | Open Source Initiative&#34;&gt;MIT&lt;/a&gt; license.&lt;/p&gt; &#xA;&lt;h3&gt;Content/Text&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://creativecommons.org/licenses/by/4.0/&#34; title=&#34;Creative Commons Attribution 4.0 International License&#34;&gt;&lt;img src=&#34;https://licensebuttons.net/l/by/4.0/88x31.png#floatleft&#34; alt=&#34;CC BY 4.0 license button&#34; title=&#34;CC BY 4.0 license button&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;All the content within this repository is licensed under a &lt;a href=&#34;https://creativecommons.org/licenses/by/4.0/&#34; title=&#34;Creative Commons Attribution 4.0 International License&#34;&gt;Creative Commons Attribution 4.0 International License&lt;/a&gt; unless otherwise specified.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>camunda/camunda-platform</title>
    <updated>2023-04-01T02:10:58Z</updated>
    <id>tag:github.com,2023-04-01:/camunda/camunda-platform</id>
    <link href="https://github.com/camunda/camunda-platform" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Camunda Platform 8&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Camunda Platform 8&lt;/h1&gt; &#xA;&lt;p&gt;This repository contains links to Camunda Platform 8 resources, the offical release artifacts (binaries), and supporting config files for running Docker Compose as a local development option.&lt;/p&gt; &#xA;&lt;p&gt;&lt;span&gt;‚ö†&lt;/span&gt; &lt;strong&gt;Docker Compose is only recommended for local development.&lt;/strong&gt; &lt;span&gt;‚ö†&lt;/span&gt;&lt;/p&gt; &#xA;&lt;p&gt;We recommend using &lt;a href=&#34;https://camunda.com/get-started/&#34;&gt;SaaS&lt;/a&gt; or &lt;a href=&#34;https://docs.camunda.io/docs/next/self-managed/platform-deployment/helm-kubernetes/overview/&#34;&gt;Helm/Kubernetes&lt;/a&gt; for development.&lt;/p&gt; &#xA;&lt;p&gt;For more information about Self-Managed, including additional &lt;a href=&#34;https://docs.camunda.io/docs/next/self-managed/platform-deployment/overview/#development&#34;&gt;development installation options&lt;/a&gt;, see our &lt;a href=&#34;https://docs.camunda.io/docs/next/self-managed/about-self-managed/&#34;&gt;documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For production setups we recommend using &lt;a href=&#34;https://docs.camunda.io/docs/self-managed/platform-deployment/kubernetes-helm/&#34;&gt;Helm charts&lt;/a&gt; which can be found at &lt;a href=&#34;https://helm.camunda.io/&#34;&gt;helm.camunda.io&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Links to additional Camunda Platform 8 repos and assets&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.camunda.io&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://camunda.io&#34;&gt;Camunda Platform SaaS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/camunda/camunda-platform-get-started&#34;&gt;Getting Started Guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/camunda/camunda-platform/releases&#34;&gt;Releases&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://helm.camunda.io/&#34;&gt;Helm Charts&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/camunda/zeebe&#34;&gt;Zeebe Workflow Engine&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.camunda.io/contact/&#34;&gt;Contact&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Using docker-compose&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span&gt;‚Ñπ&lt;/span&gt; The docker-compose file in this repository uses the latest &lt;a href=&#34;https://docs.docker.com/compose/compose-file/&#34;&gt;compose specification&lt;/a&gt;, which was introduced with docker-compose version 1.27.0+. Please make sure to use an up-to-date docker-compose version.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span&gt;‚Ñπ&lt;/span&gt; Docker 20.10.16+ is required.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;To stand-up a complete Camunda Platform 8 Self-Managed environment locally the &lt;a href=&#34;https://raw.githubusercontent.com/camunda/camunda-platform/main/docker-compose.yaml&#34;&gt;docker-compose.yaml&lt;/a&gt; file in this repository can be used.&lt;/p&gt; &#xA;&lt;p&gt;The full environment contains these components:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Zeebe&lt;/li&gt; &#xA; &lt;li&gt;Operate&lt;/li&gt; &#xA; &lt;li&gt;Tasklist&lt;/li&gt; &#xA; &lt;li&gt;Connectors&lt;/li&gt; &#xA; &lt;li&gt;Optimize&lt;/li&gt; &#xA; &lt;li&gt;Identity&lt;/li&gt; &#xA; &lt;li&gt;Elasticsearch&lt;/li&gt; &#xA; &lt;li&gt;Keycloak&lt;/li&gt; &#xA; &lt;li&gt;PostgreSQL&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Clone this repo and issue the following command to start your environment:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker-compose up -d&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Wait a few minutes for the environment to start up and settle down. Monitor the logs, especially the Keycloak container log, to ensure the components have started.&lt;/p&gt; &#xA;&lt;p&gt;Now you can navigate to the different web apps and log in with the user &lt;code&gt;demo&lt;/code&gt; and password &lt;code&gt;demo&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Operate: &lt;a href=&#34;http://localhost:8081&#34;&gt;http://localhost:8081&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Tasklist: &lt;a href=&#34;http://localhost:8082&#34;&gt;http://localhost:8082&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Optimize: &lt;a href=&#34;http://localhost:8083&#34;&gt;http://localhost:8083&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Identity: &lt;a href=&#34;http://localhost:8084&#34;&gt;http://localhost:8084&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Elasticsearch: &lt;a href=&#34;http://localhost:9200&#34;&gt;http://localhost:9200&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Keycloak is used to manage users. Here you can log in with the user &lt;code&gt;admin&lt;/code&gt; and password &lt;code&gt;admin&lt;/code&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Keycloak: &lt;a href=&#34;http://localhost:18080/auth/&#34;&gt;http://localhost:18080/auth/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The workflow engine Zeebe is available using gRPC at &lt;code&gt;localhost:26500&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To tear down the whole environment run the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker-compose down -v&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If Optimize, Identity, and Keycloak are not needed you can use the &lt;a href=&#34;https://raw.githubusercontent.com/camunda/camunda-platform/main/docker-compose-core.yaml&#34;&gt;docker-compose-core.yaml&lt;/a&gt; instead which does not include these components:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker-compose -f docker-compose-core.yaml up -d&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Zeebe, Operate, Tasklist, along with Optimize require a separate network from Identity as you&#39;ll see in the docker-compose file.&lt;/p&gt; &#xA;&lt;p&gt;In addition to the local environment setup with docker-compose, you can download the &lt;a href=&#34;https://camunda.com/download/modeler/&#34;&gt;Camunda Desktop Modeler&lt;/a&gt; to locally model BPMN diagrams for execution and directly deploy them to your local environment.&lt;/p&gt; &#xA;&lt;p&gt;Feedback and updates are welcome!&lt;/p&gt; &#xA;&lt;h2&gt;Connectors&lt;/h2&gt; &#xA;&lt;p&gt;Both docker-compose files contain our &lt;a href=&#34;https://docs.camunda.io/docs/components/integration-framework/connectors/out-of-the-box-connectors/available-connectors-overview/&#34;&gt;out-of-the-box Connectors&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Refer to the &lt;a href=&#34;https://docs.camunda.io/docs/self-managed/connectors-deployment/install-and-start/&#34;&gt;Connector installation guide&lt;/a&gt; for details on how to provide the related Connector templates for modeling.&lt;/p&gt; &#xA;&lt;p&gt;To inject secrets into the Connector runtime they can be added to the &lt;a href=&#34;https://raw.githubusercontent.com/camunda/camunda-platform/main/connector-secrets.txt&#34;&gt;&lt;code&gt;connector-secrets.txt&lt;/code&gt;&lt;/a&gt; file inside the repository in the format &lt;code&gt;NAME=VALUE&lt;/code&gt; per line. The secrets will then be available in the Connector runtime with the format &lt;code&gt;secrets.NAME&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To add custom Connectors either create a new docker image bundling them as described &lt;a href=&#34;https://github.com/camunda/connectors-bundle/tree/main/runtime&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Alternatively, you can mount new Connector JARs as volumes into the &lt;code&gt;/opt/app&lt;/code&gt; folder by adding this to the docker-compose file. Keep in mind that the Connector JARs need to bring along all necessary dependencies inside the JAR.&lt;/p&gt; &#xA;&lt;h2&gt;Kibana&lt;/h2&gt; &#xA;&lt;p&gt;A &lt;code&gt;kibana&lt;/code&gt; profile is available in the provided docker compose files to support inspection and exploration of the Camunda Platform 8 data in Elasticsearch. It can be enabled by adding &lt;code&gt;--profile kibana&lt;/code&gt; to your docker compose command. In addition to the other components, this profile spins up &lt;a href=&#34;https://www.elastic.co/kibana/&#34;&gt;Kibana&lt;/a&gt;. Kibana can be used to explore the records exported by Zeebe into Elasticsearch, or to discover the data in Elasticsearch used by the other components (e.g. Operate).&lt;/p&gt; &#xA;&lt;p&gt;You can navigate to the Kibana web app and start exploring the data without login credentials:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Kibana: &lt;a href=&#34;http://localhost:5601&#34;&gt;http://localhost:5601&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; You need to configure the index patterns in Kibana before you can explore the data.&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Go to &lt;code&gt;Management &amp;gt; Stack Management &amp;gt; Kibana &amp;gt; Index Patterns&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;li&gt;Create a new index pattern. For example, &lt;code&gt;zeebe-record-*&lt;/code&gt; matches the exported records. &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;If you don&#39;t see any indexes then make sure to export some data first (e.g. deploy a process). The indexes of the records are created when the first record of this type is exported.&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt;Go to &lt;code&gt;Analytics &amp;gt; Discover&lt;/code&gt; and select the index pattern.&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Web Modeler Self-Managed Beta Release&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span&gt;‚ö†&lt;/span&gt; Web Modeler Self-Managed is currently offered as a &lt;a href=&#34;https://docs.camunda.io/docs/next/reference/early-access#beta&#34;&gt;beta release&lt;/a&gt; with limited availability for enterprise customers only. It is not recommended for production use, and there is no maintenance service guaranteed. Special &lt;a href=&#34;https://camunda.com/legal/terms/camunda-platform/camunda-platform-8-self-managed/&#34;&gt;terms &amp;amp; conditions&lt;/a&gt; apply. However, we encourage you to provide feedback via your designated support channel or the &lt;a href=&#34;https://forum.camunda.io/&#34;&gt;Camunda Forum&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;The Docker images for Web Modeler Beta are available in a private registry. Enterprise customers either already have credentials to this registry, or they can request access to this registry through their CSM contact at Camunda.&lt;/p&gt; &#xA;&lt;p&gt;To run Camunda Platform with Web Modeler Self-Managed clone this repo and issue the following commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ docker login registry.camunda.cloud&#xA;Username: your_username&#xA;Password: ******&#xA;Login Succeeded&#xA;$ docker-compose -f docker-compose.yaml -f docker-compose-web-modeler-beta.yaml up -d&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To tear down the whole environment run the following command&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ docker-compose -f docker-compose.yaml -f docker-compose-web-modeler-beta.yaml down -v&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to delete everything (including any data you created). Alternatively, if you want to keep the data run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ docker-compose -f docker-compose.yaml -f docker-compose-web-modeler-beta.yaml down&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Web Modeler&lt;/h3&gt; &#xA;&lt;p&gt;Now you can access Web Modeler Self-Managed and log in with the user &lt;code&gt;demo&lt;/code&gt; and password &lt;code&gt;demo&lt;/code&gt; at &lt;a href=&#34;http://localhost:8070&#34;&gt;http://localhost:8070&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Once you are ready to deploy or execute processes use these settings to deploy to the local Zeebe instance:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Authentication: None&lt;/li&gt; &#xA; &lt;li&gt;URL: &lt;code&gt;zeebe:26500&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Emails&lt;/h3&gt; &#xA;&lt;p&gt;The setup includes &lt;a href=&#34;https://github.com/mailhog/MailHog&#34;&gt;MailHog&lt;/a&gt; as a test SMTP server. It captures all emails sent by Web Modeler, but does not forward them to the actual recipients.&lt;/p&gt; &#xA;&lt;p&gt;You can access emails in MailHog&#39;s Web UI at &lt;a href=&#34;http://localhost:8075&#34;&gt;http://localhost:8075&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Troubleshooting&lt;/h2&gt; &#xA;&lt;h3&gt;Running on arm64 based hardware&lt;/h3&gt; &#xA;&lt;p&gt;When using arm64-based hardware like a M1 or M2 Mac the Keycloak container might not start because Bitnami only provides amd64-based images. Until bitnami adds &lt;a href=&#34;https://github.com/bitnami/charts/issues/7305&#34;&gt;support for linux/arm64 images&lt;/a&gt;, you can build and tag an arm-based image locally using the following command. After building and tagging the image you can start the environment as described in &lt;a href=&#34;https://raw.githubusercontent.com/camunda/camunda-platform/main/#using-docker-compose&#34;&gt;Using docker-compose&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ DOCKER_BUILDKIT=0 docker build -t bitnami/keycloak:19.0.3 &#34;https://github.com/camunda/camunda-platform.git#main:.keycloak/&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Camunda Platform 7&lt;/h2&gt; &#xA;&lt;p&gt;Looking for information on Camunda Platform 7? Check out the links below:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.camunda.org/&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/camunda/camunda-bpm-platform&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>ITZ-ZAID/Doprax</title>
    <updated>2023-04-01T02:10:58Z</updated>
    <id>tag:github.com,2023-04-01:/ITZ-ZAID/Doprax</id>
    <link href="https://github.com/ITZ-ZAID/Doprax" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Doprax&lt;/h1&gt;</summary>
  </entry>
</feed>