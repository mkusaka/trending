<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-31T02:12:20Z</updated>
  <subtitle>Weekly Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>DataDog/datadog-agent</title>
    <updated>2022-07-31T02:12:20Z</updated>
    <id>tag:github.com,2022-07-31:/DataDog/datadog-agent</id>
    <link href="https://github.com/DataDog/datadog-agent" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Datadog Agent&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Datadog Agent&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://circleci.com/gh/DataDog/datadog-agent/tree/main&#34;&gt;&lt;img src=&#34;https://circleci.com/gh/DataDog/datadog-agent/tree/main.svg?style=svg&amp;amp;circle-token=dbcee3f02b9c3fe5f142bfc5ecb735fdec34b643&#34; alt=&#34;CircleCI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/DataDog/datadog-agent/actions/workflows/windows-unittests.yml&#34;&gt;&lt;img src=&#34;https://github.com/DataDog/datadog-agent/actions/workflows/windows-unittests.yml/badge.svg?sanitize=true&#34; alt=&#34;Windows unit tests&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/github/DataDog/datadog-agent?branch=main&#34;&gt;&lt;img src=&#34;https://codecov.io/github/DataDog/datadog-agent/coverage.svg?branch=main&#34; alt=&#34;Coverage status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://godoc.org/github.com/DataDog/datadog-agent&#34;&gt;&lt;img src=&#34;https://godoc.org/github.com/DataDog/datadog-agent?status.svg?sanitize=true&#34; alt=&#34;GoDoc&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/DataDog/datadog-agent&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/DataDog/datadog-agent&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The present repository contains the source code of the Datadog Agent version 7 and version 6. Please refer to the &lt;a href=&#34;https://raw.githubusercontent.com/DataDog/datadog-agent/main/docs/agent&#34;&gt;Agent user documentation&lt;/a&gt; for information about differences between Agent v5, Agent v6 and Agent v7. Additionally, we provide a list of prepackaged binaries for an easy install process &lt;a href=&#34;https://app.datadoghq.com/account/settings#agent&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; the source code of Datadog Agent v5 is located in the &lt;a href=&#34;https://github.com/DataDog/dd-agent&#34;&gt;dd-agent&lt;/a&gt; repository.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;The general documentation of the project, including instructions for installation and development, is located under &lt;a href=&#34;https://raw.githubusercontent.com/DataDog/datadog-agent/main/docs&#34;&gt;the docs directory&lt;/a&gt; of the present repo.&lt;/p&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;p&gt;To build the Agent you need:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://golang.org/doc/install&#34;&gt;Go&lt;/a&gt; 1.17 or later. You&#39;ll also need to set your &lt;code&gt;$GOPATH&lt;/code&gt; and have &lt;code&gt;$GOPATH/bin&lt;/code&gt; in your path.&lt;/li&gt; &#xA; &lt;li&gt;Python 3.7+ along with development libraries for tooling. You will also need Python 2.7 if you are building the Agent with Python 2 support.&lt;/li&gt; &#xA; &lt;li&gt;Python dependencies. You may install these with &lt;code&gt;pip install -r requirements.txt&lt;/code&gt; This will also pull in &lt;a href=&#34;http://www.pyinvoke.org&#34;&gt;Invoke&lt;/a&gt; if not yet installed.&lt;/li&gt; &#xA; &lt;li&gt;CMake version 3.12 or later and a C++ compiler&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; you may want to use a python virtual environment to avoid polluting your system-wide python environment with the agent build/dev dependencies. You can create a virtual environment using &lt;code&gt;virtualenv&lt;/code&gt; and then use the &lt;code&gt;invoke agent.build&lt;/code&gt; parameters &lt;code&gt;--python-home-2=&amp;lt;venv_path&amp;gt;&lt;/code&gt; and/or &lt;code&gt;--python-home-3=&amp;lt;venv_path&amp;gt;&lt;/code&gt; (depending on the python versions you are using) to use the virtual environment&#39;s interpreter and libraries. By default, this environment is only used for dev dependencies listed in &lt;code&gt;requirements.txt&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; You may have previously installed &lt;code&gt;invoke&lt;/code&gt; via brew on MacOS, or &lt;code&gt;pip&lt;/code&gt; in any other platform. We recommend you use the version pinned in the requirements file for a smooth development/build experience.&lt;/p&gt; &#xA;&lt;p&gt;Builds and tests are orchestrated with &lt;code&gt;invoke&lt;/code&gt;, type &lt;code&gt;invoke --list&lt;/code&gt; on a shell to see the available tasks.&lt;/p&gt; &#xA;&lt;p&gt;To start working on the Agent, you can build the &lt;code&gt;main&lt;/code&gt; branch:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Checkout the repo: &lt;code&gt;git clone https://github.com/DataDog/datadog-agent.git $GOPATH/src/github.com/DataDog/datadog-agent&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;cd into the project folder: &lt;code&gt;cd $GOPATH/src/github.com/DataDog/datadog-agent&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Install go tools: &lt;code&gt;invoke install-tools&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Create a development &lt;code&gt;datadog.yaml&lt;/code&gt; configuration file in &lt;code&gt;dev/dist/datadog.yaml&lt;/code&gt;, containing a valid API key: &lt;code&gt;api_key: &amp;lt;API_KEY&amp;gt;&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Build the agent with &lt;code&gt;invoke agent.build --build-exclude=systemd&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;By default, the Agent will be built to use Python 3 but you can select which Python version you want to use:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;invoke agent.build --python-runtimes 2&lt;/code&gt; for Python2 only&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;invoke agent.build --python-runtimes 3&lt;/code&gt; for Python3 only&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;invoke agent.build --python-runtimes 2,3&lt;/code&gt; for both Python2 and Python3&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;p&gt;You can specify a custom Python location for the agent (useful when using virtualenvs):&lt;/p&gt; &lt;pre&gt;&lt;code&gt;invoke agent.build \&#xA;  --python-runtimes 2,3 \&#xA;  --python-home-2=$GOPATH/src/github.com/DataDog/datadog-agent/venv2 \&#xA;  --python-home-3=$GOPATH/src/github.com/DataDog/datadog-agent/venv3 .&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Running &lt;code&gt;invoke agent.build&lt;/code&gt;:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Discards any changes done in &lt;code&gt;bin/agent/dist&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Builds the Agent and writes the binary to &lt;code&gt;bin/agent/agent&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Copies files from &lt;code&gt;dev/dist&lt;/code&gt; to &lt;code&gt;bin/agent/dist&lt;/code&gt;. See &lt;code&gt;https://github.com/DataDog/datadog-agent/blob/main/dev/dist/README.md&lt;/code&gt; for more information.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;p&gt;If you built an older version of the agent, you may have the error &lt;code&gt;make: *** No targets specified and no makefile found. Stop.&lt;/code&gt;. To solve the issue, you should remove &lt;code&gt;CMakeCache.txt&lt;/code&gt; from &lt;code&gt;rtloader&lt;/code&gt; folder with &lt;code&gt;rm rtloader/CMakeCache.txt&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Please refer to the &lt;a href=&#34;https://raw.githubusercontent.com/DataDog/datadog-agent/main/docs/dev/README.md&#34;&gt;Agent Developer Guide&lt;/a&gt; for more details. For instructions on setting up a windows dev environment, refer to &lt;a href=&#34;https://raw.githubusercontent.com/DataDog/datadog-agent/main/devenv&#34;&gt;Windows Dev Env&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Testing&lt;/h2&gt; &#xA;&lt;p&gt;Run tests using &lt;code&gt;invoke test&lt;/code&gt;. During development, add the &lt;code&gt;--skip-linters&lt;/code&gt; option to skip straight to the tests.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;invoke test --targets=./pkg/aggregator/... --skip-linters&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When testing code that depends on &lt;a href=&#34;https://raw.githubusercontent.com/DataDog/datadog-agent/main/rtloader&#34;&gt;rtloader&lt;/a&gt;, build and install it first.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;invoke rtloader.make &amp;amp;&amp;amp; invoke rtloader.install&#xA;invoke test --targets=./pkg/collector/python --skip-linters&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Run&lt;/h2&gt; &#xA;&lt;p&gt;You can run the agent with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./bin/agent/agent run -c bin/agent/dist/datadog.yaml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The file &lt;code&gt;bin/agent/dist/datadog.yaml&lt;/code&gt; is copied from &lt;code&gt;dev/dist/datadog.yaml&lt;/code&gt; by &lt;code&gt;invoke agent.build&lt;/code&gt; and must contain a valid api key.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing code&lt;/h2&gt; &#xA;&lt;p&gt;You&#39;ll find information and help on how to contribute code to this project under &lt;a href=&#34;https://raw.githubusercontent.com/DataDog/datadog-agent/main/docs/dev&#34;&gt;the &lt;code&gt;docs/dev&lt;/code&gt; directory&lt;/a&gt; of the present repo.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The Datadog agent user space components are licensed under the &lt;a href=&#34;https://raw.githubusercontent.com/DataDog/datadog-agent/main/LICENSE&#34;&gt;Apache License, Version 2.0&lt;/a&gt;. The BPF code is licensed under the &lt;a href=&#34;https://raw.githubusercontent.com/DataDog/datadog-agent/main/pkg/ebpf/c/COPYING&#34;&gt;General Public License, Version 2.0&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>isyscore/isc-gobase</title>
    <updated>2022-07-31T02:12:20Z</updated>
    <id>tag:github.com,2022-07-31:/isyscore/isc-gobase</id>
    <link href="https://github.com/isyscore/isc-gobase" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;isc-gobase&lt;/h1&gt; &#xA;&lt;p&gt;isc-gobase 框架是杭州指令集智能科技有限公司在java转go的实践中沉淀总结的一套至简化工具框架。遵从大道至简原则，让开发者在开发go的项目方面使用更简单&lt;/p&gt; &#xA;&lt;h2&gt;下载&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;go get github.com/isyscore/isc-gobase&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;提示：更新相关依赖&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;go mod tidy&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;快速入门&lt;/h2&gt; &#xA;&lt;p&gt;isc-gobase定位是工具框架，包含各种各样的工具，并对开发中的各种常用的方法进行封装。也包括web方面的工具&lt;/p&gt; &#xA;&lt;h3&gt;web项目&lt;/h3&gt; &#xA;&lt;p&gt;创建&lt;code&gt;main.go&lt;/code&gt;文件和同目录的&lt;code&gt;application.yml&lt;/code&gt; 文件&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;├── application.yaml&#xA;├── go.mod&#xA;└── main.go&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;# application.yml 内容&#xA;base:&#xA;  server:&#xA;    # 是否启用，默认：false&#xA;    enable: true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// main.go 文件&#xA;package main&#xA;&#xA;import (&#xA;    &#34;github.com/gin-gonic/gin&#34;&#xA;    &#34;github.com/isyscore/isc-gobase/server&#34;&#xA;    &#34;github.com/isyscore/isc-gobase/server/rsp&#34;&#xA;)&#xA;&#xA;func main() {&#xA;    server.Get(&#34;api/get&#34;, GetData)&#xA;    server.Run()&#xA;}&#xA;&#xA;func GetData(c *gin.Context) {&#xA;    rsp.SuccessOfStandard(c, &#34;value&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;运行如下&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;root@user ~&amp;gt; curl http://localhost:8080/api/get&#xA;{&#34;code&#34;:0,&#34;data&#34;:&#34;value&#34;,&#34;message&#34;:&#34;success&#34;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;包列表&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;包名&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;简介&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/isyscore/isc-gobase/main/isc&#34;&gt;isc&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;基础工具（更新中）&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/isyscore/isc-gobase/main/config&#34;&gt;config&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;配置文件管理&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/isyscore/isc-gobase/main/validate&#34;&gt;validate&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;校验核查&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/isyscore/isc-gobase/main/logger&#34;&gt;logger&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;日志&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/isyscore/isc-gobase/main/database&#34;&gt;database&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;数据库处理（待更新）&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/isyscore/isc-gobase/main/server&#34;&gt;server&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;服务处理&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/isyscore/isc-gobase/main/goid&#34;&gt;goid&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;局部id传递处理（theadlocal）&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/isyscore/isc-gobase/main/json&#34;&gt;json&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;json字符串处理工具&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/isyscore/isc-gobase/main/redis&#34;&gt;redis&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;go-redis的封装&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/isyscore/isc-gobase/main/cache&#34;&gt;cache&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;缓存工具&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/isyscore/isc-gobase/main/time&#34;&gt;time&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;时间管理工具&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/isyscore/isc-gobase/main/file&#34;&gt;file&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;文件管理工具&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/isyscore/isc-gobase/main/coder&#34;&gt;coder&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;编解码加解密工具&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/isyscore/isc-gobase/main/http&#34;&gt;http&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;http的辅助工具&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/isyscore/isc-gobase/main/listener&#34;&gt;listener&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;事件监听机制&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/isyscore/isc-gobase/main/bean&#34;&gt;bean&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;对象管理工具&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/isyscore/isc-gobase/main/debug&#34;&gt;debug&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;线上调试工具统一介绍文档&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;isc-gobase 项目测试&lt;/h3&gt; &#xA;&lt;p&gt;根目录提供go_test.sh文件，统一执行所有gobase中包的测试模块&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sh go_test.sh&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>tylertreat/comcast</title>
    <updated>2022-07-31T02:12:20Z</updated>
    <id>tag:github.com,2022-07-31:/tylertreat/comcast</id>
    <link href="https://github.com/tylertreat/comcast" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Simulating shitty network connections so you can build better systems.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Comcast&lt;/h1&gt; &#xA;&lt;p&gt;Testing distributed systems under hard failures like network partitions and instance termination is critical, but it&#39;s also important we test them under &lt;a href=&#34;http://www.bravenewgeek.com/sometimes-kill-9-isnt-enough/&#34;&gt;less catastrophic conditions&lt;/a&gt; because this is what they most often experience. Comcast is a tool designed to simulate common network problems like latency, bandwidth restrictions, and dropped/reordered/corrupted packets.&lt;/p&gt; &#xA;&lt;p&gt;It works by wrapping up some system tools in a portable(ish) way. On BSD-derived systems such as OSX, we use tools like &lt;code&gt;ipfw&lt;/code&gt; and &lt;code&gt;pfctl&lt;/code&gt; to inject failure. On Linux, we use &lt;code&gt;iptables&lt;/code&gt; and &lt;code&gt;tc&lt;/code&gt;. Comcast is merely a thin wrapper around these controls. Windows support may be possible with &lt;code&gt;wipfw&lt;/code&gt; or even the native network stack, but this has not yet been implemented in Comcast and may be at a later date.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ go install github.com/tylertreat/comcast@latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;On Linux, Comcast supports several options: device, latency, target/default bandwidth, packet loss, protocol, and port number.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ comcast --device=eth0 --latency=250 --target-bw=1000 --default-bw=1000000 --packet-loss=10% --target-addr=8.8.8.8,10.0.0.0/24 --target-proto=tcp,udp,icmp --target-port=80,22,1000:2000&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On OSX, Comcast will check for &lt;code&gt;pfctl&lt;/code&gt; support (as of Yosemite), which supports the same options as above. If &lt;code&gt;pfctl&lt;/code&gt; is not available, it will use &lt;code&gt;ipfw&lt;/code&gt; instead, which supports device, latency, target bandwidth, and packet-loss options.&lt;/p&gt; &#xA;&lt;p&gt;On BSD (with &lt;code&gt;ipfw&lt;/code&gt;), Comcast currently supports only: device, latency, target bandwidth, and packet loss.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ comcast --device=eth0 --latency=250 --target-bw=1000 --packet-loss=10%&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will add 250ms of latency, limit bandwidth to 1Mbps, and drop 10% of packets to the targetted (on Linux) destination addresses using the specified protocols on the specified port numbers (slow lane). The default bandwidth specified will apply to all egress traffic (fast lane). To turn this off, run the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ comcast --stop&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default, comcast will determine the system commands to execute, log them to stdout, and execute them. The &lt;code&gt;--dry-run&lt;/code&gt; flag will skip execution.&lt;/p&gt; &#xA;&lt;h2&gt;I don&#39;t trust you, this code sucks, I hate Go, etc.&lt;/h2&gt; &#xA;&lt;p&gt;If you don&#39;t like running code that executes shell commands for you (despite it being open source, so you can read it and change the code) or want finer-grained control, you can run them directly instead. Read the man pages on these things for more details.&lt;/p&gt; &#xA;&lt;h3&gt;Linux&lt;/h3&gt; &#xA;&lt;p&gt;On Linux, you can use &lt;code&gt;iptables&lt;/code&gt; to drop incoming and outgoing packets.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ iptables -A INPUT -m statistic --mode random --probability 0.1 -j DROP&#xA;$ iptables -A OUTPUT -m statistic --mode random --probability 0.1 -j DROP&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, you can use &lt;code&gt;tc&lt;/code&gt; which supports some additional options.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ tc qdisc add dev eth0 root netem delay 50ms 20ms distribution normal&#xA;$ tc qdisc change dev eth0 root netem reorder 0.02 duplicate 0.05 corrupt 0.01&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To reset:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ tc qdisc del dev eth0 root netem&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;BSD/OSX&lt;/h3&gt; &#xA;&lt;p&gt;To shape traffic in BSD-derived systems, create an &lt;code&gt;ipfw&lt;/code&gt; pipe and configure it. You can control incoming and outgoing traffic separately for any specific host or network.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ipfw add 1 pipe 1 ip from me to any&#xA;$ ipfw add 2 pipe 1 ip from any to me&#xA;$ ipfw pipe 1 config delay 500ms bw 1Mbit/s plr 0.1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To reset:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ipfw delete 1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;Note: &lt;code&gt;ipfw&lt;/code&gt; was removed in OSX Yosemite in favor of &lt;code&gt;pfctl&lt;/code&gt;.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Network Condition Profiles&lt;/h2&gt; &#xA;&lt;p&gt;Here&#39;s a list of network conditions with values that you can plug into Comcast. Please add any more that you may come across.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Name&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;Latency&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;Bandwidth&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;Packet-loss&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;GPRS (good)&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;500&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;50&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;2&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;EDGE (good)&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;300&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;250&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;1.5&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;3G/HSDPA (good)&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;250&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;750&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;1.5&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;DIAL-UP (good)&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;185&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;40&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;2&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;DSL (poor)&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;70&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;2000&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;2&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;DSL (good)&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;40&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;8000&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;0.5&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;WIFI (good)&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;40&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;30000&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;0.2&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Starlink&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;20&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;-&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;2.5&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt;</summary>
  </entry>
</feed>