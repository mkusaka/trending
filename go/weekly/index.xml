<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-12-01T01:42:51Z</updated>
  <subtitle>Weekly Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>sirupsen/logrus</title>
    <updated>2024-12-01T01:42:51Z</updated>
    <id>tag:github.com,2024-12-01:/sirupsen/logrus</id>
    <link href="https://github.com/sirupsen/logrus" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Structured, pluggable logging for Go.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Logrus &lt;img src=&#34;http://i.imgur.com/hTeVwmJ.png&#34; width=&#34;40&#34; height=&#34;40&#34; alt=&#34;:walrus:&#34; class=&#34;emoji&#34; title=&#34;:walrus:&#34;&gt; &lt;a href=&#34;https://github.com/sirupsen/logrus/actions?query=workflow%3ACI&#34;&gt;&lt;img src=&#34;https://github.com/sirupsen/logrus/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://travis-ci.org/sirupsen/logrus&#34;&gt;&lt;img src=&#34;https://travis-ci.org/sirupsen/logrus.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pkg.go.dev/github.com/sirupsen/logrus&#34;&gt;&lt;img src=&#34;https://pkg.go.dev/badge/github.com/sirupsen/logrus.svg?sanitize=true&#34; alt=&#34;Go Reference&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;Logrus is a structured logger for Go (golang), completely API compatible with the standard library logger.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Logrus is in maintenance-mode.&lt;/strong&gt; We will not be introducing new features. It&#39;s simply too hard to do in a way that won&#39;t break many people&#39;s projects, which is the last thing you want from your Logging library (again...).&lt;/p&gt; &#xA;&lt;p&gt;This does not mean Logrus is dead. Logrus will continue to be maintained for security, (backwards compatible) bug fixes, and performance (where we are limited by the interface).&lt;/p&gt; &#xA;&lt;p&gt;I believe Logrus&#39; biggest contribution is to have played a part in today&#39;s widespread use of structured logging in Golang. There doesn&#39;t seem to be a reason to do a major, breaking iteration into Logrus V2, since the fantastic Go community has built those independently. Many fantastic alternatives have sprung up. Logrus would look like those, had it been re-designed with what we know about structured logging in Go today. Check out, for example, &lt;a href=&#34;https://github.com/rs/zerolog&#34;&gt;Zerolog&lt;/a&gt;, &lt;a href=&#34;https://github.com/uber-go/zap&#34;&gt;Zap&lt;/a&gt;, and &lt;a href=&#34;https://github.com/apex/log&#34;&gt;Apex&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Seeing weird case-sensitive problems?&lt;/strong&gt; It&#39;s in the past been possible to import Logrus as both upper- and lower-case. Due to the Go package environment, this caused issues in the community and we needed a standard. Some environments experienced problems with the upper-case variant, so the lower-case was decided. Everything using &lt;code&gt;logrus&lt;/code&gt; will need to use the lower-case: &lt;code&gt;github.com/sirupsen/logrus&lt;/code&gt;. Any package that isn&#39;t, should be changed.&lt;/p&gt; &#xA;&lt;p&gt;To fix Glide, see &lt;a href=&#34;https://github.com/sirupsen/logrus/issues/553#issuecomment-306591437&#34;&gt;these comments&lt;/a&gt;. For an in-depth explanation of the casing issue, see &lt;a href=&#34;https://github.com/sirupsen/logrus/issues/570#issuecomment-313933276&#34;&gt;this comment&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Nicely color-coded in development (when a TTY is attached, otherwise just plain text):&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://i.imgur.com/PY7qMwd.png&#34; alt=&#34;Colored&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;With &lt;code&gt;log.SetFormatter(&amp;amp;log.JSONFormatter{})&lt;/code&gt;, for easy parsing by logstash or Splunk:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;{&#34;animal&#34;:&#34;walrus&#34;,&#34;level&#34;:&#34;info&#34;,&#34;msg&#34;:&#34;A group of walrus emerges from the&#xA;ocean&#34;,&#34;size&#34;:10,&#34;time&#34;:&#34;2014-03-10 19:57:38.562264131 -0400 EDT&#34;}&#xA;&#xA;{&#34;level&#34;:&#34;warning&#34;,&#34;msg&#34;:&#34;The group&#39;s number increased tremendously!&#34;,&#xA;&#34;number&#34;:122,&#34;omg&#34;:true,&#34;time&#34;:&#34;2014-03-10 19:57:38.562471297 -0400 EDT&#34;}&#xA;&#xA;{&#34;animal&#34;:&#34;walrus&#34;,&#34;level&#34;:&#34;info&#34;,&#34;msg&#34;:&#34;A giant walrus appears!&#34;,&#xA;&#34;size&#34;:10,&#34;time&#34;:&#34;2014-03-10 19:57:38.562500591 -0400 EDT&#34;}&#xA;&#xA;{&#34;animal&#34;:&#34;walrus&#34;,&#34;level&#34;:&#34;info&#34;,&#34;msg&#34;:&#34;Tremendously sized cow enters the ocean.&#34;,&#xA;&#34;size&#34;:9,&#34;time&#34;:&#34;2014-03-10 19:57:38.562527896 -0400 EDT&#34;}&#xA;&#xA;{&#34;level&#34;:&#34;fatal&#34;,&#34;msg&#34;:&#34;The ice breaks!&#34;,&#34;number&#34;:100,&#34;omg&#34;:true,&#xA;&#34;time&#34;:&#34;2014-03-10 19:57:38.562543128 -0400 EDT&#34;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With the default &lt;code&gt;log.SetFormatter(&amp;amp;log.TextFormatter{})&lt;/code&gt; when a TTY is not attached, the output is compatible with the &lt;a href=&#34;http://godoc.org/github.com/kr/logfmt&#34;&gt;logfmt&lt;/a&gt; format:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;time=&#34;2015-03-26T01:27:38-04:00&#34; level=debug msg=&#34;Started observing beach&#34; animal=walrus number=8&#xA;time=&#34;2015-03-26T01:27:38-04:00&#34; level=info msg=&#34;A group of walrus emerges from the ocean&#34; animal=walrus size=10&#xA;time=&#34;2015-03-26T01:27:38-04:00&#34; level=warning msg=&#34;The group&#39;s number increased tremendously!&#34; number=122 omg=true&#xA;time=&#34;2015-03-26T01:27:38-04:00&#34; level=debug msg=&#34;Temperature changes&#34; temperature=-4&#xA;time=&#34;2015-03-26T01:27:38-04:00&#34; level=panic msg=&#34;It&#39;s over 9000!&#34; animal=orca size=9009&#xA;time=&#34;2015-03-26T01:27:38-04:00&#34; level=fatal msg=&#34;The ice breaks!&#34; err=&amp;amp;{0x2082280c0 map[animal:orca size:9009] 2015-03-26 01:27:38.441574009 -0400 EDT panic It&#39;s over 9000!} number=100 omg=true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To ensure this behaviour even if a TTY is attached, set your formatter as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;&#x9;log.SetFormatter(&amp;amp;log.TextFormatter{&#xA;&#x9;&#x9;DisableColors: true,&#xA;&#x9;&#x9;FullTimestamp: true,&#xA;&#x9;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Logging Method Name&lt;/h4&gt; &#xA;&lt;p&gt;If you wish to add the calling method as a field, instruct the logger via:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;log.SetReportCaller(true)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This adds the caller as &#39;method&#39; like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#34;animal&#34;:&#34;penguin&#34;,&#34;level&#34;:&#34;fatal&#34;,&#34;method&#34;:&#34;github.com/sirupsen/arcticcreatures.migrate&#34;,&#34;msg&#34;:&#34;a penguin swims by&#34;,&#xA;&#34;time&#34;:&#34;2014-03-10 19:57:38.562543129 -0400 EDT&#34;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;time=&#34;2015-03-26T01:27:38-04:00&#34; level=fatal method=github.com/sirupsen/arcticcreatures.migrate msg=&#34;a penguin swims by&#34; animal=penguin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that this does add measurable overhead - the cost will depend on the version of Go, but is between 20 and 40% in recent tests with 1.6 and 1.7. You can validate this in your environment via benchmarks:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;go test -bench=.*CallerTracing&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Case-sensitivity&lt;/h4&gt; &#xA;&lt;p&gt;The organization&#39;s name was changed to lower-case--and this will not be changed back. If you are getting import conflicts due to case sensitivity, please use the lower-case import: &lt;code&gt;github.com/sirupsen/logrus&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Example&lt;/h4&gt; &#xA;&lt;p&gt;The simplest way to use Logrus is simply the package-level exported logger:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;  log &#34;github.com/sirupsen/logrus&#34;&#xA;)&#xA;&#xA;func main() {&#xA;  log.WithFields(log.Fields{&#xA;    &#34;animal&#34;: &#34;walrus&#34;,&#xA;  }).Info(&#34;A walrus appears&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that it&#39;s completely api-compatible with the stdlib logger, so you can replace your &lt;code&gt;log&lt;/code&gt; imports everywhere with &lt;code&gt;log &#34;github.com/sirupsen/logrus&#34;&lt;/code&gt; and you&#39;ll now have the flexibility of Logrus. You can customize it all you want:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;  &#34;os&#34;&#xA;  log &#34;github.com/sirupsen/logrus&#34;&#xA;)&#xA;&#xA;func init() {&#xA;  // Log as JSON instead of the default ASCII formatter.&#xA;  log.SetFormatter(&amp;amp;log.JSONFormatter{})&#xA;&#xA;  // Output to stdout instead of the default stderr&#xA;  // Can be any io.Writer, see below for File example&#xA;  log.SetOutput(os.Stdout)&#xA;&#xA;  // Only log the warning severity or above.&#xA;  log.SetLevel(log.WarnLevel)&#xA;}&#xA;&#xA;func main() {&#xA;  log.WithFields(log.Fields{&#xA;    &#34;animal&#34;: &#34;walrus&#34;,&#xA;    &#34;size&#34;:   10,&#xA;  }).Info(&#34;A group of walrus emerges from the ocean&#34;)&#xA;&#xA;  log.WithFields(log.Fields{&#xA;    &#34;omg&#34;:    true,&#xA;    &#34;number&#34;: 122,&#xA;  }).Warn(&#34;The group&#39;s number increased tremendously!&#34;)&#xA;&#xA;  log.WithFields(log.Fields{&#xA;    &#34;omg&#34;:    true,&#xA;    &#34;number&#34;: 100,&#xA;  }).Fatal(&#34;The ice breaks!&#34;)&#xA;&#xA;  // A common pattern is to re-use fields between logging statements by re-using&#xA;  // the logrus.Entry returned from WithFields()&#xA;  contextLogger := log.WithFields(log.Fields{&#xA;    &#34;common&#34;: &#34;this is a common field&#34;,&#xA;    &#34;other&#34;: &#34;I also should be logged always&#34;,&#xA;  })&#xA;&#xA;  contextLogger.Info(&#34;I&#39;ll be logged with common and other field&#34;)&#xA;  contextLogger.Info(&#34;Me too&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more advanced usage such as logging to multiple locations from the same application, you can also create an instance of the &lt;code&gt;logrus&lt;/code&gt; Logger:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;  &#34;os&#34;&#xA;  &#34;github.com/sirupsen/logrus&#34;&#xA;)&#xA;&#xA;// Create a new instance of the logger. You can have any number of instances.&#xA;var log = logrus.New()&#xA;&#xA;func main() {&#xA;  // The API for setting attributes is a little different than the package level&#xA;  // exported logger. See Godoc.&#xA;  log.Out = os.Stdout&#xA;&#xA;  // You could set this to any `io.Writer` such as a file&#xA;  // file, err := os.OpenFile(&#34;logrus.log&#34;, os.O_CREATE|os.O_WRONLY|os.O_APPEND, 0666)&#xA;  // if err == nil {&#xA;  //  log.Out = file&#xA;  // } else {&#xA;  //  log.Info(&#34;Failed to log to file, using default stderr&#34;)&#xA;  // }&#xA;&#xA;  log.WithFields(logrus.Fields{&#xA;    &#34;animal&#34;: &#34;walrus&#34;,&#xA;    &#34;size&#34;:   10,&#xA;  }).Info(&#34;A group of walrus emerges from the ocean&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Fields&lt;/h4&gt; &#xA;&lt;p&gt;Logrus encourages careful, structured logging through logging fields instead of long, unparseable error messages. For example, instead of: &lt;code&gt;log.Fatalf(&#34;Failed to send event %s to topic %s with key %d&#34;)&lt;/code&gt;, you should log the much more discoverable:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;log.WithFields(log.Fields{&#xA;  &#34;event&#34;: event,&#xA;  &#34;topic&#34;: topic,&#xA;  &#34;key&#34;: key,&#xA;}).Fatal(&#34;Failed to send event&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We&#39;ve found this API forces you to think about logging in a way that produces much more useful logging messages. We&#39;ve been in countless situations where just a single added field to a log statement that was already there would&#39;ve saved us hours. The &lt;code&gt;WithFields&lt;/code&gt; call is optional.&lt;/p&gt; &#xA;&lt;p&gt;In general, with Logrus using any of the &lt;code&gt;printf&lt;/code&gt;-family functions should be seen as a hint you should add a field, however, you can still use the &lt;code&gt;printf&lt;/code&gt;-family functions with Logrus.&lt;/p&gt; &#xA;&lt;h4&gt;Default Fields&lt;/h4&gt; &#xA;&lt;p&gt;Often it&#39;s helpful to have fields &lt;em&gt;always&lt;/em&gt; attached to log statements in an application or parts of one. For example, you may want to always log the &lt;code&gt;request_id&lt;/code&gt; and &lt;code&gt;user_ip&lt;/code&gt; in the context of a request. Instead of writing &lt;code&gt;log.WithFields(log.Fields{&#34;request_id&#34;: request_id, &#34;user_ip&#34;: user_ip})&lt;/code&gt; on every line, you can create a &lt;code&gt;logrus.Entry&lt;/code&gt; to pass around instead:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;requestLogger := log.WithFields(log.Fields{&#34;request_id&#34;: request_id, &#34;user_ip&#34;: user_ip})&#xA;requestLogger.Info(&#34;something happened on that request&#34;) # will log request_id and user_ip&#xA;requestLogger.Warn(&#34;something not great happened&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Hooks&lt;/h4&gt; &#xA;&lt;p&gt;You can add hooks for logging levels. For example to send errors to an exception tracking service on &lt;code&gt;Error&lt;/code&gt;, &lt;code&gt;Fatal&lt;/code&gt; and &lt;code&gt;Panic&lt;/code&gt;, info to StatsD or log to multiple places simultaneously, e.g. syslog.&lt;/p&gt; &#xA;&lt;p&gt;Logrus comes with &lt;a href=&#34;https://raw.githubusercontent.com/sirupsen/logrus/master/hooks/&#34;&gt;built-in hooks&lt;/a&gt;. Add those, or your custom hook, in &lt;code&gt;init&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;import (&#xA;  log &#34;github.com/sirupsen/logrus&#34;&#xA;  &#34;gopkg.in/gemnasium/logrus-airbrake-hook.v2&#34; // the package is named &#34;airbrake&#34;&#xA;  logrus_syslog &#34;github.com/sirupsen/logrus/hooks/syslog&#34;&#xA;  &#34;log/syslog&#34;&#xA;)&#xA;&#xA;func init() {&#xA;&#xA;  // Use the Airbrake hook to report errors that have Error severity or above to&#xA;  // an exception tracker. You can create custom hooks, see the Hooks section.&#xA;  log.AddHook(airbrake.NewHook(123, &#34;xyz&#34;, &#34;production&#34;))&#xA;&#xA;  hook, err := logrus_syslog.NewSyslogHook(&#34;udp&#34;, &#34;localhost:514&#34;, syslog.LOG_INFO, &#34;&#34;)&#xA;  if err != nil {&#xA;    log.Error(&#34;Unable to connect to local syslog daemon&#34;)&#xA;  } else {&#xA;    log.AddHook(hook)&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: Syslog hook also support connecting to local syslog (Ex. &#34;/dev/log&#34; or &#34;/var/run/syslog&#34; or &#34;/var/run/log&#34;). For the detail, please check the &lt;a href=&#34;https://raw.githubusercontent.com/sirupsen/logrus/master/hooks/syslog/README.md&#34;&gt;syslog hook README&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;A list of currently known service hooks can be found in this wiki &lt;a href=&#34;https://github.com/sirupsen/logrus/wiki/Hooks&#34;&gt;page&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Level logging&lt;/h4&gt; &#xA;&lt;p&gt;Logrus has seven logging levels: Trace, Debug, Info, Warning, Error, Fatal and Panic.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;log.Trace(&#34;Something very low level.&#34;)&#xA;log.Debug(&#34;Useful debugging information.&#34;)&#xA;log.Info(&#34;Something noteworthy happened!&#34;)&#xA;log.Warn(&#34;You should probably take a look at this.&#34;)&#xA;log.Error(&#34;Something failed but I&#39;m not quitting.&#34;)&#xA;// Calls os.Exit(1) after logging&#xA;log.Fatal(&#34;Bye.&#34;)&#xA;// Calls panic() after logging&#xA;log.Panic(&#34;I&#39;m bailing.&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can set the logging level on a &lt;code&gt;Logger&lt;/code&gt;, then it will only log entries with that severity or anything above it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Will log anything that is info or above (warn, error, fatal, panic). Default.&#xA;log.SetLevel(log.InfoLevel)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It may be useful to set &lt;code&gt;log.Level = logrus.DebugLevel&lt;/code&gt; in a debug or verbose environment if your application has that.&lt;/p&gt; &#xA;&lt;p&gt;Note: If you want different log levels for global (&lt;code&gt;log.SetLevel(...)&lt;/code&gt;) and syslog logging, please check the &lt;a href=&#34;https://raw.githubusercontent.com/sirupsen/logrus/master/hooks/syslog/README.md#different-log-levels-for-local-and-remote-logging&#34;&gt;syslog hook README&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Entries&lt;/h4&gt; &#xA;&lt;p&gt;Besides the fields added with &lt;code&gt;WithField&lt;/code&gt; or &lt;code&gt;WithFields&lt;/code&gt; some fields are automatically added to all logging events:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;time&lt;/code&gt;. The timestamp when the entry was created.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;msg&lt;/code&gt;. The logging message passed to &lt;code&gt;{Info,Warn,Error,Fatal,Panic}&lt;/code&gt; after the &lt;code&gt;AddFields&lt;/code&gt; call. E.g. &lt;code&gt;Failed to send event.&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;level&lt;/code&gt;. The logging level. E.g. &lt;code&gt;info&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Environments&lt;/h4&gt; &#xA;&lt;p&gt;Logrus has no notion of environment.&lt;/p&gt; &#xA;&lt;p&gt;If you wish for hooks and formatters to only be used in specific environments, you should handle that yourself. For example, if your application has a global variable &lt;code&gt;Environment&lt;/code&gt;, which is a string representation of the environment you could do:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;import (&#xA;  log &#34;github.com/sirupsen/logrus&#34;&#xA;)&#xA;&#xA;func init() {&#xA;  // do something here to set environment depending on an environment variable&#xA;  // or command-line flag&#xA;  if Environment == &#34;production&#34; {&#xA;    log.SetFormatter(&amp;amp;log.JSONFormatter{})&#xA;  } else {&#xA;    // The TextFormatter is default, you don&#39;t actually have to do this.&#xA;    log.SetFormatter(&amp;amp;log.TextFormatter{})&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This configuration is how &lt;code&gt;logrus&lt;/code&gt; was intended to be used, but JSON in production is mostly only useful if you do log aggregation with tools like Splunk or Logstash.&lt;/p&gt; &#xA;&lt;h4&gt;Formatters&lt;/h4&gt; &#xA;&lt;p&gt;The built-in logging formatters are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;logrus.TextFormatter&lt;/code&gt;. Logs the event in colors if stdout is a tty, otherwise without colors. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;em&gt;Note:&lt;/em&gt; to force colored output when there is no TTY, set the &lt;code&gt;ForceColors&lt;/code&gt; field to &lt;code&gt;true&lt;/code&gt;. To force no colored output even if there is a TTY set the &lt;code&gt;DisableColors&lt;/code&gt; field to &lt;code&gt;true&lt;/code&gt;. For Windows, see &lt;a href=&#34;https://github.com/mattn/go-colorable&#34;&gt;github.com/mattn/go-colorable&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;When colors are enabled, levels are truncated to 4 characters by default. To disable truncation set the &lt;code&gt;DisableLevelTruncation&lt;/code&gt; field to &lt;code&gt;true&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;When outputting to a TTY, it&#39;s often helpful to visually scan down a column where all the levels are the same width. Setting the &lt;code&gt;PadLevelText&lt;/code&gt; field to &lt;code&gt;true&lt;/code&gt; enables this behavior, by adding padding to the level text.&lt;/li&gt; &#xA;   &lt;li&gt;All options are listed in the &lt;a href=&#34;https://godoc.org/github.com/sirupsen/logrus#TextFormatter&#34;&gt;generated docs&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;logrus.JSONFormatter&lt;/code&gt;. Logs fields as JSON. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;All options are listed in the &lt;a href=&#34;https://godoc.org/github.com/sirupsen/logrus#JSONFormatter&#34;&gt;generated docs&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Third party logging formatters:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/joonix/log&#34;&gt;&lt;code&gt;FluentdFormatter&lt;/code&gt;&lt;/a&gt;. Formats entries that can be parsed by Kubernetes and Google Container Engine.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/fabienm/go-logrus-formatters&#34;&gt;&lt;code&gt;GELF&lt;/code&gt;&lt;/a&gt;. Formats entries so they comply to Graylog&#39;s &lt;a href=&#34;http://docs.graylog.org/en/2.4/pages/gelf.html&#34;&gt;GELF 1.1 specification&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bshuster-repo/logrus-logstash-hook&#34;&gt;&lt;code&gt;logstash&lt;/code&gt;&lt;/a&gt;. Logs fields as &lt;a href=&#34;http://logstash.net&#34;&gt;Logstash&lt;/a&gt; Events.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/x-cray/logrus-prefixed-formatter&#34;&gt;&lt;code&gt;prefixed&lt;/code&gt;&lt;/a&gt;. Displays log entry source along with alternative layout.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/aybabtme/logzalgo&#34;&gt;&lt;code&gt;zalgo&lt;/code&gt;&lt;/a&gt;. Invoking the Power of Zalgo.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/antonfisher/nested-logrus-formatter&#34;&gt;&lt;code&gt;nested-logrus-formatter&lt;/code&gt;&lt;/a&gt;. Converts logrus fields to a nested structure.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/zput/zxcTool&#34;&gt;&lt;code&gt;powerful-logrus-formatter&lt;/code&gt;&lt;/a&gt;. get fileName, log&#39;s line number and the latest function&#39;s name when print log; Save log to files.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nolleh/caption_json_formatter&#34;&gt;&lt;code&gt;caption-json-formatter&lt;/code&gt;&lt;/a&gt;. logrus&#39;s message json formatter with human-readable caption added.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can define your formatter by implementing the &lt;code&gt;Formatter&lt;/code&gt; interface, requiring a &lt;code&gt;Format&lt;/code&gt; method. &lt;code&gt;Format&lt;/code&gt; takes an &lt;code&gt;*Entry&lt;/code&gt;. &lt;code&gt;entry.Data&lt;/code&gt; is a &lt;code&gt;Fields&lt;/code&gt; type (&lt;code&gt;map[string]interface{}&lt;/code&gt;) with all your fields as well as the default ones (see Entries section above):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type MyJSONFormatter struct {&#xA;}&#xA;&#xA;log.SetFormatter(new(MyJSONFormatter))&#xA;&#xA;func (f *MyJSONFormatter) Format(entry *Entry) ([]byte, error) {&#xA;  // Note this doesn&#39;t include Time, Level and Message which are available on&#xA;  // the Entry. Consult `godoc` on information about those fields or read the&#xA;  // source of the official loggers.&#xA;  serialized, err := json.Marshal(entry.Data)&#xA;    if err != nil {&#xA;      return nil, fmt.Errorf(&#34;Failed to marshal fields to JSON, %w&#34;, err)&#xA;    }&#xA;  return append(serialized, &#39;\n&#39;), nil&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Logger as an &lt;code&gt;io.Writer&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Logrus can be transformed into an &lt;code&gt;io.Writer&lt;/code&gt;. That writer is the end of an &lt;code&gt;io.Pipe&lt;/code&gt; and it is your responsibility to close it.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;w := logger.Writer()&#xA;defer w.Close()&#xA;&#xA;srv := http.Server{&#xA;    // create a stdlib log.Logger that writes to&#xA;    // logrus.Logger.&#xA;    ErrorLog: log.New(w, &#34;&#34;, 0),&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Each line written to that writer will be printed the usual way, using formatters and hooks. The level for those entries is &lt;code&gt;info&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This means that we can override the standard library logger easily:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;logger := logrus.New()&#xA;logger.Formatter = &amp;amp;logrus.JSONFormatter{}&#xA;&#xA;// Use logrus for standard log output&#xA;// Note that `log` here references stdlib&#39;s log&#xA;// Not logrus imported under the name `log`.&#xA;log.SetOutput(logger.Writer())&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Rotation&lt;/h4&gt; &#xA;&lt;p&gt;Log rotation is not provided with Logrus. Log rotation should be done by an external program (like &lt;code&gt;logrotate(8)&lt;/code&gt;) that can compress and delete old log entries. It should not be a feature of the application-level logger.&lt;/p&gt; &#xA;&lt;h4&gt;Tools&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Tool&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/gogap/logrus_mate&#34;&gt;Logrus Mate&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Logrus mate is a tool for Logrus to manage loggers, you can initial logger&#39;s level, hook and formatter by config file, the logger will be generated with different configs in different environments.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/heirko/go-contrib/tree/master/logrusHelper&#34;&gt;Logrus Viper Helper&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;An Helper around Logrus to wrap with spf13/Viper to load configuration with fangs! And to simplify Logrus configuration use some behavior of &lt;a href=&#34;https://github.com/gogap/logrus_mate&#34;&gt;Logrus Mate&lt;/a&gt;. &lt;a href=&#34;https://github.com/heirko/iris-contrib/raw/master/middleware/logrus-logger/example&#34;&gt;sample&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;Testing&lt;/h4&gt; &#xA;&lt;p&gt;Logrus has a built in facility for asserting the presence of log messages. This is implemented through the &lt;code&gt;test&lt;/code&gt; hook and provides:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;decorators for existing logger (&lt;code&gt;test.NewLocal&lt;/code&gt; and &lt;code&gt;test.NewGlobal&lt;/code&gt;) which basically just adds the &lt;code&gt;test&lt;/code&gt; hook&lt;/li&gt; &#xA; &lt;li&gt;a test logger (&lt;code&gt;test.NewNullLogger&lt;/code&gt;) that just records log messages (and does not output any):&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;import(&#xA;  &#34;github.com/sirupsen/logrus&#34;&#xA;  &#34;github.com/sirupsen/logrus/hooks/test&#34;&#xA;  &#34;github.com/stretchr/testify/assert&#34;&#xA;  &#34;testing&#34;&#xA;)&#xA;&#xA;func TestSomething(t*testing.T){&#xA;  logger, hook := test.NewNullLogger()&#xA;  logger.Error(&#34;Helloerror&#34;)&#xA;&#xA;  assert.Equal(t, 1, len(hook.Entries))&#xA;  assert.Equal(t, logrus.ErrorLevel, hook.LastEntry().Level)&#xA;  assert.Equal(t, &#34;Helloerror&#34;, hook.LastEntry().Message)&#xA;&#xA;  hook.Reset()&#xA;  assert.Nil(t, hook.LastEntry())&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Fatal handlers&lt;/h4&gt; &#xA;&lt;p&gt;Logrus can register one or more functions that will be called when any &lt;code&gt;fatal&lt;/code&gt; level message is logged. The registered handlers will be executed before logrus performs an &lt;code&gt;os.Exit(1)&lt;/code&gt;. This behavior may be helpful if callers need to gracefully shutdown. Unlike a &lt;code&gt;panic(&#34;Something went wrong...&#34;)&lt;/code&gt; call which can be intercepted with a deferred &lt;code&gt;recover&lt;/code&gt; a call to &lt;code&gt;os.Exit(1)&lt;/code&gt; can not be intercepted.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;...&#xA;handler := func() {&#xA;  // gracefully shutdown something...&#xA;}&#xA;logrus.RegisterExitHandler(handler)&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Thread safety&lt;/h4&gt; &#xA;&lt;p&gt;By default, Logger is protected by a mutex for concurrent writes. The mutex is held when calling hooks and writing logs. If you are sure such locking is not needed, you can call logger.SetNoLock() to disable the locking.&lt;/p&gt; &#xA;&lt;p&gt;Situation when locking is not needed includes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;You have no hooks registered, or hooks calling is already thread-safe.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Writing to logger.Out is already thread-safe, for example:&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt; &lt;p&gt;logger.Out is protected by locks.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;logger.Out is an os.File handler opened with &lt;code&gt;O_APPEND&lt;/code&gt; flag, and every write is smaller than 4k. (This allows multi-thread/multi-process writing)&lt;/p&gt; &lt;p&gt;(Refer to &lt;a href=&#34;http://www.notthewizard.com/2014/06/17/are-files-appends-really-atomic/&#34;&gt;http://www.notthewizard.com/2014/06/17/are-files-appends-really-atomic/&lt;/a&gt;)&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>VictoriaMetrics/VictoriaMetrics</title>
    <updated>2024-12-01T01:42:51Z</updated>
    <id>tag:github.com,2024-12-01:/VictoriaMetrics/VictoriaMetrics</id>
    <link href="https://github.com/VictoriaMetrics/VictoriaMetrics" rel="alternate"></link>
    <summary type="html">&lt;p&gt;VictoriaMetrics: fast, cost-effective monitoring solution and time series database&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;VictoriaMetrics&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/VictoriaMetrics/VictoriaMetrics/releases/latest&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/VictoriaMetrics/VictoriaMetrics.svg?style=flat-square&#34; alt=&#34;Latest Release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/victoriametrics/victoria-metrics&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/pulls/victoriametrics/victoria-metrics.svg?maxAge=604800&#34; alt=&#34;Docker Pulls&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://slack.victoriametrics.com/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/join%20slack-%23victoriametrics-brightgreen.svg?sanitize=true&#34; alt=&#34;Slack&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/VictoriaMetrics/VictoriaMetrics/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/VictoriaMetrics/VictoriaMetrics.svg?sanitize=true&#34; alt=&#34;GitHub license&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/VictoriaMetrics/VictoriaMetrics&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/VictoriaMetrics/VictoriaMetrics&#34; alt=&#34;Go Report&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/VictoriaMetrics/VictoriaMetrics/actions&#34;&gt;&lt;img src=&#34;https://github.com/VictoriaMetrics/VictoriaMetrics/workflows/main/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/VictoriaMetrics/VictoriaMetrics&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/VictoriaMetrics/VictoriaMetrics/branch/master/graph/badge.svg?sanitize=true&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;picture&gt; &#xA; &lt;source srcset=&#34;docs/logo_white.webp&#34; media=&#34;(prefers-color-scheme: dark)&#34;&gt; &#xA; &lt;source srcset=&#34;docs/logo.webp&#34; media=&#34;(prefers-color-scheme: light)&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/VictoriaMetrics/VictoriaMetrics/master/docs/logo.webp&#34; width=&#34;300&#34; alt=&#34;VictoriaMetrics logo&#34;&gt; &#xA;&lt;/picture&gt; &#xA;&lt;p&gt;VictoriaMetrics is a fast, cost-saving, and scalable solution for monitoring and managing time series data. It delivers high performance and reliability, making it an ideal choice for businesses of all sizes.&lt;/p&gt; &#xA;&lt;p&gt;Here are some resources and information about VictoriaMetrics:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Documentation: &lt;a href=&#34;https://docs.victoriametrics.com&#34;&gt;docs.victoriametrics.com&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Case studies: &lt;a href=&#34;https://docs.victoriametrics.com/casestudies/&#34;&gt;Grammarly, Roblox, Wix,...&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Available: &lt;a href=&#34;https://github.com/VictoriaMetrics/VictoriaMetrics/releases/latest&#34;&gt;Binary releases&lt;/a&gt;, &lt;a href=&#34;https://hub.docker.com/r/victoriametrics/victoria-metrics/&#34;&gt;Docker images&lt;/a&gt;, &lt;a href=&#34;https://github.com/VictoriaMetrics/VictoriaMetrics&#34;&gt;Source code&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Deployment types: &lt;a href=&#34;https://docs.victoriametrics.com/&#34;&gt;Single-node version&lt;/a&gt;, &lt;a href=&#34;https://docs.victoriametrics.com/cluster-victoriametrics/&#34;&gt;Cluster version&lt;/a&gt;, and &lt;a href=&#34;https://docs.victoriametrics.com/enterprise/&#34;&gt;Enterprise version&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Changelog: &lt;a href=&#34;https://docs.victoriametrics.com/changelog/&#34;&gt;CHANGELOG&lt;/a&gt;, and &lt;a href=&#34;https://docs.victoriametrics.com/#how-to-upgrade-victoriametrics&#34;&gt;How to upgrade&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Community: &lt;a href=&#34;https://slack.victoriametrics.com/&#34;&gt;Slack&lt;/a&gt;, &lt;a href=&#34;https://x.com/VictoriaMetrics&#34;&gt;X (Twitter)&lt;/a&gt;, &lt;a href=&#34;https://www.linkedin.com/company/victoriametrics/&#34;&gt;LinkedIn&lt;/a&gt;, &lt;a href=&#34;https://www.youtube.com/@VictoriaMetrics&#34;&gt;YouTube&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Yes, we open-source both the single-node VictoriaMetrics and the cluster version.&lt;/p&gt; &#xA;&lt;h2&gt;Prominent features&lt;/h2&gt; &#xA;&lt;p&gt;VictoriaMetrics is optimized for timeseries data, even when old time series are constantly replaced by new ones at a high rate, it offers a lot of features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Long-term storage for Prometheus&lt;/strong&gt; or as a drop-in replacement for Prometheus and Graphite in Grafana.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Powerful stream aggregation&lt;/strong&gt;: Can be used as a StatsD alternative.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Ideal for big data&lt;/strong&gt;: Works well with large amounts of time series data from APM, Kubernetes, IoT sensors, connected cars, industrial telemetry, financial data and various &lt;a href=&#34;https://docs.victoriametrics.com/enterprise/&#34;&gt;Enterprise workloads&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Query language&lt;/strong&gt;: Supports both PromQL and the more performant MetricsQL.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Easy to setup&lt;/strong&gt;: No dependencies, single &lt;a href=&#34;https://medium.com/@valyala/stripping-dependency-bloat-in-victoriametrics-docker-image-983fb5912b0d&#34;&gt;small binary&lt;/a&gt;, configuration through command-line flags, but the default is also fine-tuned; backup and restore with &lt;a href=&#34;https://medium.com/@valyala/how-victoriametrics-makes-instant-snapshots-for-multi-terabyte-time-series-data-e1f3fb0e0282&#34;&gt;instant snapshots&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Global query view&lt;/strong&gt;: Multiple Prometheus instances or any other data sources may ingest data into VictoriaMetrics and queried via a single query.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Various Protocols&lt;/strong&gt;: Support metric scraping, ingestion and backfilling in various protocol. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://docs.victoriametrics.com/#how-to-scrape-prometheus-exporters-such-as-node-exporter&#34;&gt;Prometheus exporters&lt;/a&gt;, &lt;a href=&#34;https://docs.victoriametrics.com/#prometheus-setup&#34;&gt;Prometheus remote write API&lt;/a&gt;, &lt;a href=&#34;https://docs.victoriametrics.com/#how-to-import-data-in-prometheus-exposition-format&#34;&gt;Prometheus exposition format&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://docs.victoriametrics.com/#how-to-send-data-from-influxdb-compatible-agents-such-as-telegraf&#34;&gt;InfluxDB line protocol&lt;/a&gt; over HTTP, TCP and UDP.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://docs.victoriametrics.com/#how-to-send-data-from-graphite-compatible-agents-such-as-statsd&#34;&gt;Graphite plaintext protocol&lt;/a&gt; with &lt;a href=&#34;https://graphite.readthedocs.io/en/latest/tags.html#carbon&#34;&gt;tags&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://docs.victoriametrics.com/#sending-data-via-telnet-put-protocol&#34;&gt;OpenTSDB put message&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://docs.victoriametrics.com/#sending-opentsdb-data-via-http-apiput-requests&#34;&gt;HTTP OpenTSDB /api/put requests&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://docs.victoriametrics.com/#how-to-import-data-in-json-line-format&#34;&gt;JSON line format&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://docs.victoriametrics.com/#how-to-import-csv-data&#34;&gt;Arbitrary CSV data&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://docs.victoriametrics.com/#how-to-import-data-in-native-format&#34;&gt;Native binary format&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://docs.victoriametrics.com/#how-to-send-data-from-datadog-agent&#34;&gt;DataDog agent or DogStatsD&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://docs.victoriametrics.com/#how-to-send-data-from-newrelic-agent&#34;&gt;NewRelic infrastructure agent&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://docs.victoriametrics.com/#sending-data-via-opentelemetry&#34;&gt;OpenTelemetry metrics format&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;NFS-based storages&lt;/strong&gt;: Supports storing data on NFS-based storages such as Amazon EFS, Google Filestore.&lt;/li&gt; &#xA; &lt;li&gt;And many other features such as metrics relabeling, cardinality limiter, etc.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Enterprise version&lt;/h2&gt; &#xA;&lt;p&gt;In addition, the Enterprise version includes extra features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Anomaly detection&lt;/strong&gt;: Automation and simplification of your alerting rules, covering complex anomalies found in metrics data.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Backup automation&lt;/strong&gt;: Automates regular backup procedures.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Multiple retentions&lt;/strong&gt;: Reducing storage costs by specifying different retentions for different datasets.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Downsampling&lt;/strong&gt;: Reducing storage costs and increasing performance for queries over historical data.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Stable releases&lt;/strong&gt; with long-term support lines (&lt;a href=&#34;https://docs.victoriametrics.com/lts-releases/&#34;&gt;LTS&lt;/a&gt;).&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Comprehensive support&lt;/strong&gt;: First-class consulting, feature requests and technical support provided by the core VictoriaMetrics dev team.&lt;/li&gt; &#xA; &lt;li&gt;Many other features, which you can read about on &lt;a href=&#34;https://docs.victoriametrics.com/enterprise/&#34;&gt;the Enterprise page&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;mailto:info@victoriametrics.com&#34;&gt;Contact us&lt;/a&gt; if you need enterprise support for VictoriaMetrics. Or you can request a free trial license &lt;a href=&#34;https://victoriametrics.com/products/enterprise/trial/&#34;&gt;here&lt;/a&gt;, downloaded Enterprise binaries are available at &lt;a href=&#34;https://github.com/VictoriaMetrics/VictoriaMetrics/releases/latest&#34;&gt;Github Releases&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;We strictly apply security measures in everything we do. VictoriaMetrics has achieved security certifications for Database Software Development and Software-Based Monitoring Services. See &lt;a href=&#34;https://victoriametrics.com/security/&#34;&gt;Security page&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;h2&gt;Benchmarks&lt;/h2&gt; &#xA;&lt;p&gt;Some good benchmarks VictoriaMetrics achieved:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Minimal memory footprint&lt;/strong&gt;: handling millions of unique timeseries with &lt;a href=&#34;https://medium.com/@valyala/insert-benchmarks-with-inch-influxdb-vs-victoriametrics-e31a41ae2893&#34;&gt;10x less RAM&lt;/a&gt; than InfluxDB, up to &lt;a href=&#34;https://valyala.medium.com/prometheus-vs-victoriametrics-benchmark-on-node-exporter-metrics-4ca29c75590f&#34;&gt;7x less RAM&lt;/a&gt; than Prometheus, Thanos or Cortex.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Highly scalable and performance&lt;/strong&gt; for &lt;a href=&#34;https://medium.com/@valyala/high-cardinality-tsdb-benchmarks-victoriametrics-vs-timescaledb-vs-influxdb-13e6ee64dd6b&#34;&gt;data ingestion&lt;/a&gt; and &lt;a href=&#34;https://medium.com/@valyala/when-size-matters-benchmarking-victoriametrics-vs-timescale-and-influxdb-6035811952d4&#34;&gt;querying&lt;/a&gt;, &lt;a href=&#34;https://medium.com/@valyala/insert-benchmarks-with-inch-influxdb-vs-victoriametrics-e31a41ae2893&#34;&gt;20x outperforms&lt;/a&gt; InfluxDB and TimescaleDB.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;High data compression&lt;/strong&gt;: &lt;a href=&#34;https://medium.com/@valyala/when-size-matters-benchmarking-victoriametrics-vs-timescale-and-influxdb-6035811952d4&#34;&gt;70x more data points&lt;/a&gt; may be stored into limited storage than TimescaleDB, &lt;a href=&#34;https://valyala.medium.com/prometheus-vs-victoriametrics-benchmark-on-node-exporter-metrics-4ca29c75590f&#34;&gt;7x less storage&lt;/a&gt; space is required than Prometheus, Thanos or Cortex.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Reducing storage costs&lt;/strong&gt;: &lt;a href=&#34;https://docs.victoriametrics.com/casestudies/#grammarly&#34;&gt;10x more effective&lt;/a&gt; than Graphite according to the Grammarly case study.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;A single-node VictoriaMetrics&lt;/strong&gt; can replace medium-sized clusters built with competing solutions such as Thanos, M3DB, Cortex, InfluxDB or TimescaleDB. See &lt;a href=&#34;https://medium.com/@valyala/comparing-thanos-to-victoriametrics-cluster-b193bea1683&#34;&gt;VictoriaMetrics vs Thanos&lt;/a&gt;, &lt;a href=&#34;https://medium.com/@valyala/measuring-vertical-scalability-for-time-series-databases-in-google-cloud-92550d78d8ae&#34;&gt;Measuring vertical scalability&lt;/a&gt;, &lt;a href=&#34;https://promcon.io/2019-munich/talks/remote-write-storage-wars/&#34;&gt;Remote write storage wars - PromCon 2019&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Optimized for storage&lt;/strong&gt;: &lt;a href=&#34;https://medium.com/@valyala/high-cardinality-tsdb-benchmarks-victoriametrics-vs-timescaledb-vs-influxdb-13e6ee64dd6b&#34;&gt;Works well with high-latency IO&lt;/a&gt; and low IOPS (HDD and network storage in AWS, Google Cloud, Microsoft Azure, etc.).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Community and contributions&lt;/h2&gt; &#xA;&lt;p&gt;Feel free asking any questions regarding VictoriaMetrics:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://slack.victoriametrics.com/&#34;&gt;Slack Inviter&lt;/a&gt; and &lt;a href=&#34;https://victoriametrics.slack.com/&#34;&gt;Slack channel&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://x.com/VictoriaMetrics/&#34;&gt;X (Twitter)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/company/victoriametrics/&#34;&gt;Linkedin&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.reddit.com/r/VictoriaMetrics/&#34;&gt;Reddit&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://t.me/VictoriaMetrics_en&#34;&gt;Telegram-en&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://t.me/VictoriaMetrics_ru1&#34;&gt;Telegram-ru&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mastodon.social/@victoriametrics/&#34;&gt;Mastodon&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you like VictoriaMetrics and want to contribute, then please &lt;a href=&#34;https://docs.victoriametrics.com/contributing/&#34;&gt;read these docs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;VictoriaMetrics Logo&lt;/h2&gt; &#xA;&lt;p&gt;The provided &lt;a href=&#34;https://github.com/VictoriaMetrics/VictoriaMetrics/raw/master/VM_logo.zip&#34;&gt;ZIP file&lt;/a&gt; contains three folders with different logo orientations. Each folder includes the following file types:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;JPEG: Preview files&lt;/li&gt; &#xA; &lt;li&gt;PNG: Preview files with transparent background&lt;/li&gt; &#xA; &lt;li&gt;AI: Adobe Illustrator files&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;VictoriaMetrics Logo Usage Guidelines&lt;/h3&gt; &#xA;&lt;h4&gt;Font&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Font Used: Lato Black&lt;/li&gt; &#xA; &lt;li&gt;Download here: &lt;a href=&#34;https://fonts.google.com/specimen/Lato&#34;&gt;Lato Font&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Color Palette&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Black &lt;a href=&#34;https://www.color-hex.com/color/000000&#34;&gt;#000000&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Purple &lt;a href=&#34;https://www.color-hex.com/color/4d0e82&#34;&gt;#4d0e82&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Orange &lt;a href=&#34;https://www.color-hex.com/color/ff2e00&#34;&gt;#ff2e00&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;White &lt;a href=&#34;https://www.color-hex.com/color/ffffff&#34;&gt;#ffffff&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Logo Usage Rules&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Only use the Lato Black font as specified.&lt;/li&gt; &#xA; &lt;li&gt;Maintain sufficient clear space around the logo for visibility.&lt;/li&gt; &#xA; &lt;li&gt;Do not modify the spacing, alignment, or positioning of design elements.&lt;/li&gt; &#xA; &lt;li&gt;You may resize the logo as needed, but ensure all proportions remain intact.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Thank you for your cooperation!&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>semaphoreui/semaphore</title>
    <updated>2024-12-01T01:42:51Z</updated>
    <id>tag:github.com,2024-12-01:/semaphoreui/semaphore</id>
    <link href="https://github.com/semaphoreui/semaphore" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Modern UI and powerful API for Ansible, Terraform, OpenTofu, PowerShell and other DevOps tools.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Semaphore UI&lt;/h1&gt; &#xA;&lt;p&gt;Modern UI for Ansible, Terraform, OpenTofu, PowerShell and other DevOps tools.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://discord.gg/5R6k7hNGcH&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/discord_community-510b80?style=for-the-badge&amp;amp;logo=discord&#34; alt=&#34;telegram&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.youtube.com/@semaphoreui&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/youtube_channel-red?style=for-the-badge&amp;amp;logo=youtube&#34; alt=&#34;youtube&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- [![devcontainer](https://img.shields.io/badge/dev_container-gray?style=for-the-badge&amp;logo=github)](https://codespaces.new/semaphoreui/semaphore) --&gt; &#xA;&lt;!-- [![docker](https://img.shields.io/badge/container_configurator-white?style=for-the-badge&amp;logo=docker)](https://semaphoreui.com/install/docker/) --&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/914224/134777345-8789d9e4-ff0d-439c-b80e-ddc56b74fcee.png&#34; alt=&#34;responsive-ui-phone1&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;If your project has grown and deploying from the terminal is no longer feasible, then Semaphore UI is the tool you need.&lt;/p&gt; &#xA;&lt;h2&gt;Live Demo&lt;/h2&gt; &#xA;&lt;p&gt;Try the latest version of Semaphore at &lt;a href=&#34;https://cloud.semaphoreui.com&#34;&gt;https://cloud.semaphoreui.com&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;What is Semaphore UI?&lt;/h2&gt; &#xA;&lt;p&gt;Semaphore UI is a modern web interface for managing popular DevOps tools.&lt;/p&gt; &#xA;&lt;p&gt;Semaphore UI allows you to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Easily run Ansible playbooks, Terraform and OpenTofu code, as well as Bash and PowerShell scripts.&lt;/li&gt; &#xA; &lt;li&gt;Receive notifications about failed tasks.&lt;/li&gt; &#xA; &lt;li&gt;Control access to your deployment system.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Key Concepts&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;Projects&lt;/strong&gt; is a collection of related resources, configurations, and tasks. Each project allows you to organize and manage your automation efforts in one place, defining the scope of tasks such as deploying applications, running scripts, or orchestrating cloud resources. Projects help group resources, inventories, task templates, and environments for streamlined automation workflows.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Task Templates&lt;/strong&gt; are reusable definitions of tasks that can be executed on demand or scheduled. A template specifies what actions should be performed, such as running Ansible playbooks, Terraform configurations, or other automation tasks. By using templates, you can standardize tasks and easily re-execute them with minimal effort, ensuring consistent results across different environments.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Task&lt;/strong&gt; is a specific instance of a job or operation executed by Semaphore. It refers to running a predefined action (like an Ansible playbook or a script) using a task template. Tasks can be initiated manually or automatically through schedules and are tracked to give you detailed feedback on the execution, including success, failure, and logs.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Schedules&lt;/strong&gt; allow you to automate task execution at specified times or intervals. This feature is useful for running periodic maintenance tasks, backups, or deployments without manual intervention. You can configure recurring schedules to ensure important automation tasks are performed regularly and on time.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Inventory&lt;/strong&gt; is a collection of target hosts (servers, virtual machines, containers, etc.) on which tasks will be executed. The inventory includes details about the managed nodes such as IP addresses, SSH credentials, and grouping information. It allows for dynamic control over which environments and hosts your automation will interact with.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Environment&lt;/strong&gt; refers to a configuration context that holds sensitive information such as environment variables and secrets used by tasks during execution. It separates sensitive data from task templates and allows you to switch between different setups while running the same task template across different environments securely.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;You can install Semaphore using the following methods:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Docker&lt;/li&gt; &#xA; &lt;li&gt;SaaS (&lt;a href=&#34;https://cloud.semaphoreui.com&#34;&gt;Semaphore Cloud&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Deploy a VM from a marketplace (AWS, DigitalOcean, etc.)&lt;/li&gt; &#xA; &lt;li&gt;Snap&lt;/li&gt; &#xA; &lt;li&gt;Binary file&lt;/li&gt; &#xA; &lt;li&gt;Debian or RPM package&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Docker&lt;/h3&gt; &#xA;&lt;p&gt;The most popular way to install Semaphore is via Docker.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run -p 3000:3000 --name semaphore \&#xA;&#x9;-e SEMAPHORE_DB_DIALECT=bolt \&#xA;&#x9;-e SEMAPHORE_ADMIN=admin \&#xA;&#x9;-e SEMAPHORE_ADMIN_PASSWORD=changeme \&#xA;&#x9;-e SEMAPHORE_ADMIN_NAME=Admin \&#xA;&#x9;-e SEMAPHORE_ADMIN_EMAIL=admin@localhost \&#xA;&#x9;-d semaphoreui/semaphore:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We recommend using the &lt;a href=&#34;https://semaphoreui.com/install/docker/&#34;&gt;Container Configurator&lt;/a&gt; to get the ideal Docker configuration for Semaphore.&lt;/p&gt; &#xA;&lt;h3&gt;SaaS&lt;/h3&gt; &#xA;&lt;p&gt;We offer a SaaS solution for using Semaphore UI without installation. Check it out at &lt;a href=&#34;https://cloud.semaphoreui.com&#34;&gt;Semaphore Cloud&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Deploy VM from Marketplace&lt;/h3&gt; &#xA;&lt;p&gt;Supported cloud providers:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cloud.semaphore.run/servers/new/semaphore&#34;&gt;Semaphore Run&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://aws.amazon.com/marketplace/pp/prodview-5noeat2jipwca&#34;&gt;AWS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://yandex.cloud/en-ru/marketplace/products/fastlix/semaphore&#34;&gt;Yandex Cloud&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;DigitalOcean (coming soon)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Other Installation Methods&lt;/h3&gt; &#xA;&lt;p&gt;For more installation options, visit our &lt;a href=&#34;https://semaphoreui.com/install&#34;&gt;Installation page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.semaphoreui.com&#34;&gt;User Guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://semaphoreui.com/api-docs&#34;&gt;API Reference&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contribution&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/semaphoreui/semaphore/raw/develop/CONTRIBUTING.md&#34;&gt;Contribution Guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://codespaces.new/semaphoreui/semaphore&#34;&gt;Dev Container&lt;/a&gt; (default user &lt;code&gt;admin&lt;/code&gt; / &lt;code&gt;changeme&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;MIT © &lt;a href=&#34;https://github.com/fiftin&#34;&gt;Denis Gukov&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/sponsors/semaphoreui&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/become_a_sponsor-d9c7ff?style=for-the-badge&amp;amp;logo=github-sponsors&#34; alt=&#34;sponsor&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://ko-fi.com/fiftin&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/buy_me_a_coffee-0ba0e0?style=for-the-badge&amp;amp;logo=kofi&#34; alt=&#34;ko-fi&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.patreon.com/semaphoreui&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/become_a_patreon-teal?style=for-the-badge&amp;amp;logo=patreon&#34; alt=&#34;patreon&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>