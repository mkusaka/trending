<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-02-02T01:41:49Z</updated>
  <subtitle>Weekly Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>yusing/go-proxy</title>
    <updated>2025-02-02T01:41:49Z</updated>
    <id>tag:github.com,2025-02-02:/yusing/go-proxy</id>
    <link href="https://github.com/yusing/go-proxy" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Easy to use reverse proxy with docker integration&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;GoDoxy&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://sonarcloud.io/summary/new_code?id=yusing_go-proxy&#34;&gt;&lt;img src=&#34;https://sonarcloud.io/api/project_badges/measure?project=yusing_go-proxy&amp;amp;metric=alert_status&#34; alt=&#34;Quality Gate Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://sonarcloud.io/summary/new_code?id=yusing_go-proxy&#34;&gt;&lt;img src=&#34;https://sonarcloud.io/api/project_badges/measure?project=yusing_go-proxy&amp;amp;metric=ncloc&#34; alt=&#34;Lines of Code&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://sonarcloud.io/summary/new_code?id=yusing_go-proxy&#34;&gt;&lt;img src=&#34;https://sonarcloud.io/api/project_badges/measure?project=yusing_go-proxy&amp;amp;metric=security_rating&#34; alt=&#34;Security Rating&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://sonarcloud.io/summary/new_code?id=yusing_go-proxy&#34;&gt;&lt;img src=&#34;https://sonarcloud.io/api/project_badges/measure?project=yusing_go-proxy&amp;amp;metric=sqale_rating&#34; alt=&#34;Maintainability Rating&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://sonarcloud.io/summary/new_code?id=yusing_go-proxy&#34;&gt;&lt;img src=&#34;https://sonarcloud.io/api/project_badges/measure?project=yusing_go-proxy&amp;amp;metric=vulnerabilities&#34; alt=&#34;Vulnerabilities&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/umReR62nRd&#34;&gt;&lt;img src=&#34;https://dcbadge.limes.pink/api/server/umReR62nRd&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yusing/go-proxy/v0.9/README_CHT.md&#34;&gt;ÁπÅÈ´î‰∏≠ÊñáÊñáÊ™îË´ãÁúãÊ≠§&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A lightweight, easy-to-use, and &lt;a href=&#34;https://github.com/yusing/go-proxy/wiki/Benchmarks&#34;&gt;performant&lt;/a&gt; reverse proxy with a Web UI and dashboard.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/user-attachments/assets/4bb371f4-6e4c-425c-89b2-b9e962bdd46f&#34; alt=&#34;Screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Join our &lt;a href=&#34;https://discord.gg/umReR62nRd&#34;&gt;Discord&lt;/a&gt; for help and discussions&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Table of content&lt;/h2&gt; &#xA;&lt;!-- TOC --&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yusing/go-proxy/v0.9/#godoxy&#34;&gt;GoDoxy&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yusing/go-proxy/v0.9/#table-of-content&#34;&gt;Table of content&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yusing/go-proxy/v0.9/#key-features&#34;&gt;Key Features&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yusing/go-proxy/v0.9/#getting-started&#34;&gt;Getting Started&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yusing/go-proxy/v0.9/#prerequisites&#34;&gt;Prerequisites&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yusing/go-proxy/v0.9/#setup&#34;&gt;Setup&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yusing/go-proxy/v0.9/#manual-setup&#34;&gt;Manual Setup&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yusing/go-proxy/v0.9/#folder-structrue&#34;&gt;Folder structrue&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yusing/go-proxy/v0.9/#use-json-schema-in-vscode&#34;&gt;Use JSON Schema in VSCode&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yusing/go-proxy/v0.9/#screenshots&#34;&gt;Screenshots&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yusing/go-proxy/v0.9/#idlesleeper&#34;&gt;idlesleeper&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yusing/go-proxy/v0.9/#build-it-yourself&#34;&gt;Build it yourself&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Key Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Easy to use &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Effortless configuration&lt;/li&gt; &#xA;   &lt;li&gt;Simple multi-node setup&lt;/li&gt; &#xA;   &lt;li&gt;Error messages is clear and detailed, easy troubleshooting&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Auto SSL cert management (See &lt;a href=&#34;https://github.com/yusing/go-proxy/wiki/Supported-DNS%E2%80%9001-Providers&#34;&gt;Supported DNS-01 Challenge Providers&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Auto configuration for docker containers&lt;/li&gt; &#xA; &lt;li&gt;Auto hot-reload on container state / config file changes&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;idlesleeper&lt;/strong&gt;: stop containers on idle, wake it up on traffic &lt;em&gt;(optional, see &lt;a href=&#34;https://raw.githubusercontent.com/yusing/go-proxy/v0.9/#idlesleeper&#34;&gt;screenshots&lt;/a&gt;)&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;HTTP(s) reserve proxy&lt;/li&gt; &#xA; &lt;li&gt;OpenID Connect support&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yusing/go-proxy/wiki/Middlewares&#34;&gt;HTTP middleware support&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yusing/go-proxy/wiki/Middlewares#custom-error-pages&#34;&gt;Custom error pages support&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;TCP and UDP port forwarding&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Web UI with App dashboard and config editor&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Supports linux/amd64, linux/arm64&lt;/li&gt; &#xA; &lt;li&gt;Written in &lt;strong&gt;&lt;a href=&#34;https://go.dev&#34;&gt;Go&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yusing/go-proxy/v0.9/#table-of-content&#34;&gt;üîºBack to top&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;For full documentation, &lt;strong&gt;&lt;a href=&#34;https://github.com/yusing/go-proxy/wiki&#34;&gt;See Wiki&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Prerequisites&lt;/h3&gt; &#xA;&lt;p&gt;Setup DNS Records point to machine which runs &lt;code&gt;GoDoxy&lt;/code&gt;, e.g.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A Record: &lt;code&gt;*.y.z&lt;/code&gt; -&amp;gt; &lt;code&gt;10.0.10.1&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;AAAA Record: &lt;code&gt;*.y.z&lt;/code&gt; -&amp;gt; &lt;code&gt;::ffff:a00:a01&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Setup&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Pull the latest docker images&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker pull ghcr.io/yusing/go-proxy:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Create new directory, &lt;code&gt;cd&lt;/code&gt; into it, then run setup, or &lt;a href=&#34;https://raw.githubusercontent.com/yusing/go-proxy/v0.9/#manual-setup&#34;&gt;set up manually&lt;/a&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker run --rm -v .:/setup ghcr.io/yusing/go-proxy /app/godoxy setup&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;em&gt;(Optional)&lt;/em&gt; setup WebUI login (skip if you use OIDC)&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;set random JWT secret&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sed -i &#34;s|API_JWT_SECRET=.*|API_JWT_SECRET=$(openssl rand -base64 32)|g&#34; .env&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;change username and password for WebUI authentication&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;USERNAME=admin&#xA;PASSWORD=some-password&#xA;sed -i &#34;s|API_USERNAME=.*|API_USERNAME=${USERNAME}|g&#34; .env&#xA;sed -i &#34;s|API_PASSWORD=.*|API_PASSWORD=${PASSWORD}|g&#34; .env&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;em&gt;(Optional)&lt;/em&gt; setup &lt;code&gt;docker-socket-proxy&lt;/code&gt; other docker nodes (see &lt;a href=&#34;https://github.com/yusing/go-proxy/wiki/Configurations#multi-docker-nodes-setup&#34;&gt;Multi docker nodes setup&lt;/a&gt;) then add them inside &lt;code&gt;config.yml&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Start the container &lt;code&gt;docker compose up -d&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;You may now do some extra configuration on WebUI &lt;code&gt;https://gp.y.z&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yusing/go-proxy/v0.9/#table-of-content&#34;&gt;üîºBack to top&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Manual Setup&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Make &lt;code&gt;config&lt;/code&gt; directory then grab &lt;code&gt;config.example.yml&lt;/code&gt; into &lt;code&gt;config/config.yml&lt;/code&gt;&lt;/p&gt; &lt;p&gt;&lt;code&gt;mkdir -p config &amp;amp;&amp;amp; wget https://raw.githubusercontent.com/yusing/go-proxy/v0.9/config.example.yml -O config/config.yml&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Grab &lt;code&gt;.env.example&lt;/code&gt; into &lt;code&gt;.env&lt;/code&gt;&lt;/p&gt; &lt;p&gt;&lt;code&gt;wget https://raw.githubusercontent.com/yusing/go-proxy/v0.9/.env.example -O .env&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Grab &lt;code&gt;compose.example.yml&lt;/code&gt; into &lt;code&gt;compose.yml&lt;/code&gt;&lt;/p&gt; &lt;p&gt;&lt;code&gt;wget https://raw.githubusercontent.com/yusing/go-proxy/v0.9/compose.example.yml -O compose.yml&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Folder structrue&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;‚îú‚îÄ‚îÄ certs&#xA;‚îÇ   ‚îú‚îÄ‚îÄ cert.crt&#xA;‚îÇ   ‚îî‚îÄ‚îÄ priv.key&#xA;‚îú‚îÄ‚îÄ compose.yml&#xA;‚îú‚îÄ‚îÄ config&#xA;‚îÇ   ‚îú‚îÄ‚îÄ config.yml&#xA;‚îÇ   ‚îú‚îÄ‚îÄ middlewares&#xA;‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ middleware1.yml&#xA;‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ middleware2.yml&#xA;‚îÇ   ‚îú‚îÄ‚îÄ provider1.yml&#xA;‚îÇ   ‚îî‚îÄ‚îÄ provider2.yml&#xA;‚îî‚îÄ‚îÄ .env&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Use JSON Schema in VSCode&lt;/h3&gt; &#xA;&lt;p&gt;Copy &lt;a href=&#34;https://raw.githubusercontent.com/yusing/go-proxy/v0.9/.vscode/settings.example.json&#34;&gt;&lt;code&gt;.vscode/settings.example.json&lt;/code&gt;&lt;/a&gt; to &lt;code&gt;.vscode/settings.json&lt;/code&gt; and modify it to fit your needs&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yusing/go-proxy/v0.9/#table-of-content&#34;&gt;üîºBack to top&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Screenshots&lt;/h2&gt; &#xA;&lt;h3&gt;idlesleeper&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yusing/go-proxy/v0.9/screenshots/idlesleeper.webp&#34; alt=&#34;idlesleeper&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yusing/go-proxy/v0.9/#table-of-content&#34;&gt;üîºBack to top&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Build it yourself&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Clone the repository &lt;code&gt;git clone https://github.com/yusing/go-proxy --depth=1&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Install / Upgrade &lt;a href=&#34;https://go.dev/doc/install&#34;&gt;go (&amp;gt;=1.22)&lt;/a&gt; and &lt;code&gt;make&lt;/code&gt; if not already&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Clear cache if you have built this before (go &amp;lt; 1.22) with &lt;code&gt;go clean -cache&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;get dependencies with &lt;code&gt;make get&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;build binary with &lt;code&gt;make build&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yusing/go-proxy/v0.9/#table-of-content&#34;&gt;üîºBack to top&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>chainflag/eth-faucet</title>
    <updated>2025-02-02T01:41:49Z</updated>
    <id>tag:github.com,2025-02-02:/chainflag/eth-faucet</id>
    <link href="https://github.com/chainflag/eth-faucet" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Ether faucet server built with Go and Svelte.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;eth-faucet&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/chainflag/eth-faucet/actions/workflows/build.yml&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/chainflag/eth-faucet/build.yml?branch=main&#34; alt=&#34;Build&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/chainflag/eth-faucet/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/chainflag/eth-faucet&#34; alt=&#34;Release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/chainflag/eth-faucet&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/chainflag/eth-faucet&#34; alt=&#34;Report&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://go.dev/&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/go-mod/go-version/chainflag/eth-faucet&#34; alt=&#34;Go&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/chainflag/eth-faucet/raw/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/chainflag/eth-faucet&#34; alt=&#34;License&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The faucet is a web application with the goal of distributing small amounts of Ether in private and test networks.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Configure the funding account using a private key or keystore&lt;/li&gt; &#xA; &lt;li&gt;Implement CAPTCHA verification to prevent abuse&lt;/li&gt; &#xA; &lt;li&gt;Rate-limit requests by ETH address and IP address to prevent spam&lt;/li&gt; &#xA; &lt;li&gt;Prevent X-Forwarded-For spoofing by specifying the number of reverse proxies&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Get started&lt;/h2&gt; &#xA;&lt;h3&gt;Prerequisites&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Go (version 1.17 or later)&lt;/li&gt; &#xA; &lt;li&gt;Node.js&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Clone the repository and navigate to the app‚Äôs directory&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/chainflag/eth-faucet.git&#xA;cd eth-faucet&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Bundle frontend with Vite&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;go generate&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Build Go project&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;go build -o eth-faucet&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Use a private key&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./eth-faucet -httpport 8080 -wallet.provider http://localhost:8545 -wallet.privkey privkey&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Use a keystore&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./eth-faucet -httpport 8080 -wallet.provider http://localhost:8545 -wallet.keyjson keystore -wallet.keypass password.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Configuration&lt;/h3&gt; &#xA;&lt;p&gt;You can configure the funding account by using environment variables instead of command-line flags:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;export WEB3_PROVIDER=rpc_endpoint&#xA;export PRIVATE_KEY=hex_private_key&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;export WEB3_PROVIDER=rpc_endpoint&#xA;export KEYSTORE=keystore_path&#xA;echo &#34;your_keystore_password&#34; &amp;gt; `pwd`/password.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then run the faucet application without the wallet command-line flags:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./eth-faucet -httpport 8080&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Optional Flags&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;The following are the available command-line flags(excluding above wallet flags):&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Flag&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;th&gt;Default Value&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;-httpport&lt;/td&gt; &#xA;   &lt;td&gt;Listener port to serve HTTP connection&lt;/td&gt; &#xA;   &lt;td&gt;8080&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;-proxycount&lt;/td&gt; &#xA;   &lt;td&gt;Count of reverse proxies in front of the server&lt;/td&gt; &#xA;   &lt;td&gt;0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;-faucet.amount&lt;/td&gt; &#xA;   &lt;td&gt;Number of Ethers to transfer per user request&lt;/td&gt; &#xA;   &lt;td&gt;1.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;-faucet.minutes&lt;/td&gt; &#xA;   &lt;td&gt;Number of minutes to wait between funding rounds&lt;/td&gt; &#xA;   &lt;td&gt;1440&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;-faucet.name&lt;/td&gt; &#xA;   &lt;td&gt;Network name to display on the frontend&lt;/td&gt; &#xA;   &lt;td&gt;testnet&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;-faucet.symbol&lt;/td&gt; &#xA;   &lt;td&gt;Token symbol to display on the frontend&lt;/td&gt; &#xA;   &lt;td&gt;ETH&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;-hcaptcha.sitekey&lt;/td&gt; &#xA;   &lt;td&gt;hCaptcha sitekey&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;-hcaptcha.secret&lt;/td&gt; &#xA;   &lt;td&gt;hCaptcha secret&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Docker deployment&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run -d -p 8080:8080 -e WEB3_PROVIDER=rpc_endpoint -e PRIVATE_KEY=hex_private_key chainflag/eth-faucet:1.2.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run -d -p 8080:8080 -e WEB3_PROVIDER=rpc_endpoint -e KEYSTORE=keystore_path -v `pwd`/keystore:/app/keystore -v `pwd`/password.txt:/app/password.txt chainflag/eth-faucet:1.2.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Distributed under the MIT License. See LICENSE for more information.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>lightningnetwork/lnd</title>
    <updated>2025-02-02T01:41:49Z</updated>
    <id>tag:github.com,2025-02-02:/lightningnetwork/lnd</id>
    <link href="https://github.com/lightningnetwork/lnd" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Lightning Network Daemon ‚ö°Ô∏è&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Lightning Network Daemon&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/lightningnetwork/lnd/actions/workflows/release.yaml&#34;&gt;&lt;img src=&#34;https://github.com/lightningnetwork/lnd/actions/workflows/release.yaml/badge.svg?sanitize=true&#34; alt=&#34;Release build&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/lightningnetwork/lnd/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-MIT-blue.svg?sanitize=true&#34; alt=&#34;MIT licensed&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://web.libera.chat/#lnd&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/chat-on%20libera-brightgreen.svg?sanitize=true&#34; alt=&#34;Irc&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://godoc.org/github.com/lightningnetwork/lnd&#34;&gt;&lt;img src=&#34;https://godoc.org/github.com/lightningnetwork/lnd?status.svg?sanitize=true&#34; alt=&#34;Godoc&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/lightningnetwork/lnd&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/lightningnetwork/lnd&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/lightningnetwork/lnd/master/logo.png&#34;&gt; &#xA;&lt;p&gt;The Lightning Network Daemon (&lt;code&gt;lnd&lt;/code&gt;) - is a complete implementation of a &lt;a href=&#34;https://lightning.network&#34;&gt;Lightning Network&lt;/a&gt; node. &lt;code&gt;lnd&lt;/code&gt; has several pluggable back-end chain services including &lt;a href=&#34;https://github.com/btcsuite/btcd&#34;&gt;&lt;code&gt;btcd&lt;/code&gt;&lt;/a&gt; (a full-node), &lt;a href=&#34;https://github.com/bitcoin/bitcoin&#34;&gt;&lt;code&gt;bitcoind&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&#34;https://github.com/lightninglabs/neutrino&#34;&gt;&lt;code&gt;neutrino&lt;/code&gt;&lt;/a&gt; (a new experimental light client). The project&#39;s codebase uses the &lt;a href=&#34;https://github.com/btcsuite/&#34;&gt;btcsuite&lt;/a&gt; set of Bitcoin libraries, and also exports a large set of isolated re-usable Lightning Network related libraries within it. In the current state &lt;code&gt;lnd&lt;/code&gt; is capable of:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Creating channels.&lt;/li&gt; &#xA; &lt;li&gt;Closing channels.&lt;/li&gt; &#xA; &lt;li&gt;Completely managing all channel states (including the exceptional ones!).&lt;/li&gt; &#xA; &lt;li&gt;Maintaining a fully authenticated+validated channel graph.&lt;/li&gt; &#xA; &lt;li&gt;Performing path finding within the network, passively forwarding incoming payments.&lt;/li&gt; &#xA; &lt;li&gt;Sending outgoing &lt;a href=&#34;https://github.com/lightningnetwork/lightning-onion&#34;&gt;onion-encrypted payments&lt;/a&gt; through the network.&lt;/li&gt; &#xA; &lt;li&gt;Updating advertised fee schedules.&lt;/li&gt; &#xA; &lt;li&gt;Automatic channel management (&lt;a href=&#34;https://github.com/lightningnetwork/lnd/tree/master/autopilot&#34;&gt;&lt;code&gt;autopilot&lt;/code&gt;&lt;/a&gt;).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Lightning Network Specification Compliance&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;lnd&lt;/code&gt; &lt;em&gt;fully&lt;/em&gt; conforms to the &lt;a href=&#34;https://github.com/lightningnetwork/lightning-rfc&#34;&gt;Lightning Network specification (BOLTs)&lt;/a&gt;. BOLT stands for: Basis of Lightning Technology. The specifications are currently being drafted by several groups of implementers based around the world including the developers of &lt;code&gt;lnd&lt;/code&gt;. The set of specification documents as well as our implementation of the specification are still a work-in-progress. With that said, the current status of &lt;code&gt;lnd&lt;/code&gt;&#39;s BOLT compliance is:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; BOLT 1: Base Protocol&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; BOLT 2: Peer Protocol for Channel Management&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; BOLT 3: Bitcoin Transaction and Script Formats&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; BOLT 4: Onion Routing Protocol&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; BOLT 5: Recommendations for On-chain Transaction Handling&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; BOLT 7: P2P Node and Channel Discovery&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; BOLT 8: Encrypted and Authenticated Transport&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; BOLT 9: Assigned Feature Flags&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; BOLT 10: DNS Bootstrap and Assisted Node Location&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; BOLT 11: Invoice Protocol for Lightning Payments&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Developer Resources&lt;/h2&gt; &#xA;&lt;p&gt;The daemon has been designed to be as developer friendly as possible in order to facilitate application development on top of &lt;code&gt;lnd&lt;/code&gt;. Two primary RPC interfaces are exported: an HTTP REST API, and a &lt;a href=&#34;https://grpc.io/&#34;&gt;gRPC&lt;/a&gt; service. The exported APIs are not yet stable, so be warned: they may change drastically in the near future.&lt;/p&gt; &#xA;&lt;p&gt;An automatically generated set of documentation for the RPC APIs can be found at &lt;a href=&#34;https://api.lightning.community&#34;&gt;api.lightning.community&lt;/a&gt;. A set of developer resources including guides, articles, example applications and community resources can be found at: &lt;a href=&#34;https://docs.lightning.engineering&#34;&gt;docs.lightning.engineering&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Finally, we also have an active &lt;a href=&#34;https://lightning.engineering/slack.html&#34;&gt;Slack&lt;/a&gt; where protocol developers, application developers, testers and users gather to discuss various aspects of &lt;code&gt;lnd&lt;/code&gt; and also Lightning in general.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;In order to build from source, please see &lt;a href=&#34;https://raw.githubusercontent.com/lightningnetwork/lnd/master/docs/INSTALL.md&#34;&gt;the installation instructions&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Docker&lt;/h2&gt; &#xA;&lt;p&gt;To run lnd from Docker, please see the main &lt;a href=&#34;https://raw.githubusercontent.com/lightningnetwork/lnd/master/docs/DOCKER.md&#34;&gt;Docker instructions&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;IRC&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;irc.libera.chat&lt;/li&gt; &#xA; &lt;li&gt;channel #lnd&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://web.libera.chat/#lnd&#34;&gt;webchat&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Safety&lt;/h2&gt; &#xA;&lt;p&gt;When operating a mainnet &lt;code&gt;lnd&lt;/code&gt; node, please refer to our &lt;a href=&#34;https://raw.githubusercontent.com/lightningnetwork/lnd/master/docs/safety.md&#34;&gt;operational safety guidelines&lt;/a&gt;. It is important to note that &lt;code&gt;lnd&lt;/code&gt; is still &lt;strong&gt;beta&lt;/strong&gt; software and that ignoring these operational guidelines can lead to loss of funds.&lt;/p&gt; &#xA;&lt;h2&gt;Security&lt;/h2&gt; &#xA;&lt;p&gt;The developers of &lt;code&gt;lnd&lt;/code&gt; take security &lt;em&gt;very&lt;/em&gt; seriously. The disclosure of security vulnerabilities helps us secure the health of &lt;code&gt;lnd&lt;/code&gt;, privacy of our users, and also the health of the Lightning Network as a whole. If you find any issues regarding security or privacy, please disclose the information responsibly by sending an email to security at lightning dot engineering, preferably encrypted using our designated PGP key (&lt;code&gt;91FE464CD75101DA6B6BAB60555C6465E5BCB3AF&lt;/code&gt;) which can be found &lt;a href=&#34;https://gist.githubusercontent.com/Roasbeef/6fb5b52886183239e4aa558f83d085d3/raw/5fa96010af201628bcfa61e9309d9b13d23d220f/security@lightning.engineering&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Further reading&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lightningnetwork/lnd/tree/master/docker&#34;&gt;Step-by-step send payment guide with docker&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lightningnetwork/lnd/raw/master/docs/code_contribution_guidelines.md&#34;&gt;Contribution guide&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>