<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-04-06T01:41:07Z</updated>
  <subtitle>Weekly Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>SpecterOps/BloodHound</title>
    <updated>2025-04-06T01:41:07Z</updated>
    <id>tag:github.com,2025-04-06:/SpecterOps/BloodHound</id>
    <link href="https://github.com/SpecterOps/BloodHound" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Six Degrees of Domain Admin&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &#xA; &lt;picture&gt; &#xA;  &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;cmd/ui/public/img/logo-secondary-transparent-full.svg&#34;&gt; &#xA;  &lt;img src=&#34;https://raw.githubusercontent.com/SpecterOps/BloodHound/main/cmd/ui/public/img/logo-transparent-full.svg?sanitize=true&#34; alt=&#34;BloodHound Community Edition&#34; width=&#34;400&#34;&gt; &#xA; &lt;/picture&gt; &lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;BloodHound is a monolithic web application composed of an embedded React frontend with &lt;a href=&#34;https://www.sigmajs.org/&#34;&gt;Sigma.js&lt;/a&gt; and a &lt;a href=&#34;https://go.dev/&#34;&gt;Go&lt;/a&gt; based REST API backend. It is deployed with a &lt;a href=&#34;https://www.postgresql.org/&#34;&gt;Postgresql&lt;/a&gt; application database and a &lt;a href=&#34;https://neo4j.com/&#34;&gt;Neo4j&lt;/a&gt; graph database, and is fed by the &lt;a href=&#34;https://github.com/SpecterOps/SharpHound&#34;&gt;SharpHound&lt;/a&gt; and &lt;a href=&#34;https://github.com/SpecterOps/AzureHound&#34;&gt;AzureHound&lt;/a&gt; data collectors.&lt;/p&gt; &#xA;&lt;p&gt;BloodHound uses graph theory to reveal the hidden and often unintended relationships within an Active Directory or Azure environment. Attackers can use BloodHound to quickly identify highly complex attack paths that would otherwise be impossible to find. Defenders can use BloodHound to identify and eliminate those same attack paths. Both red and blue teams can use BloodHound to better understand privileged relationships in an Active Directory or Azure environment.&lt;/p&gt; &#xA;&lt;p&gt;BloodHound CE is created and maintained by the &lt;a href=&#34;https://bloodhoundenterprise.io&#34;&gt;BloodHound Enterprise Team&lt;/a&gt;. The original BloodHound was created by &lt;a href=&#34;https://www.twitter.com/_wald0&#34;&gt;@_wald0&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/CptJesus&#34;&gt;@CptJesus&lt;/a&gt;, and &lt;a href=&#34;https://twitter.com/harmj0y&#34;&gt;@harmj0y&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Running BloodHound Community Edition&lt;/h2&gt; &#xA;&lt;p&gt;Docker Compose is the easiest way to get up and running with BloodHound CE. Instructions below describe how to install and upgrade your deployment.&lt;/p&gt; &#xA;&lt;h3&gt;System Requirements&lt;/h3&gt; &#xA;&lt;p&gt;BloodHound CE deploys in a traditional multi-tier container architecture consisting of databases, application, and UI layers.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Minimum specifications:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;4GB of RAM&lt;/li&gt; &#xA; &lt;li&gt;4 processor cores&lt;/li&gt; &#xA; &lt;li&gt;10GB hard disk space&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;For large environments (&amp;gt;50,000 users):&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;96GB of RAM&lt;/li&gt; &#xA; &lt;li&gt;12 processor cores&lt;/li&gt; &#xA; &lt;li&gt;50GB hard disk space&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Deploy BloodHound CE&lt;/h3&gt; &#xA;&lt;p&gt;Deploying BloodHound CE quickly with the following steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install &lt;a href=&#34;https://www.docker.com/products/docker-desktop/&#34;&gt;Docker Desktop&lt;/a&gt;. Docker Desktop includes Docker Compose as part of the installation.&lt;/li&gt; &#xA; &lt;li&gt;Download the &lt;a href=&#34;https://raw.githubusercontent.com/SpecterOps/BloodHound/main/examples/docker-compose/docker-compose.yml&#34;&gt;Docker Compose YAML file&lt;/a&gt; and save it to a directory where you&#39;d like to run BloodHound. You can do this from a terminal application with &lt;code&gt;curl -L https://ghst.ly/getbhce&lt;/code&gt;. &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;On Windows: Execute the command in CMD, or use &lt;code&gt;curl.exe&lt;/code&gt; instead of &lt;code&gt;curl&lt;/code&gt; in PowerShell.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt;Navigate to the folder with the saved &lt;code&gt;docker-compose.yml&lt;/code&gt; file and run &lt;code&gt;docker compose pull &amp;amp;&amp;amp; docker compose up&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Locate the randomly generated password in the terminal output of Docker Compose.&lt;/li&gt; &#xA; &lt;li&gt;In a browser, navigate to &lt;code&gt;http://localhost:8080/ui/login&lt;/code&gt;. Login with a username of &lt;code&gt;admin&lt;/code&gt; and the randomly generated password from the logs.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;em&gt;NOTE: The default &lt;code&gt;docker-compose.yml&lt;/code&gt; example binds only to localhost (127.0.0.1). If you want to access BloodHound outside of localhost, you&#39;ll need to follow the instructions in &lt;a href=&#34;https://raw.githubusercontent.com/SpecterOps/BloodHound/main/examples/docker-compose/README.md&#34;&gt;examples/docker-compose/README.md&lt;/a&gt; to configure the host binding for the container.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Upgrade BloodHound CE&lt;/h3&gt; &#xA;&lt;p&gt;Once installed, upgrade BloodHound CE to the latest version with the following steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Navigate to the folder with the saved &lt;code&gt;docker-compose.yml&lt;/code&gt; file and run &lt;code&gt;docker compose pull &amp;amp;&amp;amp; docker compose up&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;In a browser, navigate to &lt;code&gt;http://localhost:8080/ui/login&lt;/code&gt; and log in with your previously configured username and password.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Importing sample data&lt;/h3&gt; &#xA;&lt;p&gt;The BloodHound team has provided some sample data for testing BloodHound without performing a SharpHound or AzureHound collection. That data may be found &lt;a href=&#34;https://github.com/SpecterOps/BloodHound/wiki/Example-Data&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation Error Handling&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If you encounter a &#34;failed to get console mode for stdin: The handle is invalid.&#34; ensure Docker Desktop (and associated Engine is running). Docker Desktop does not automatically register as a startup entry.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;302&#34; alt=&#34;Docker Engine Running&#34; src=&#34;https://raw.githubusercontent.com/SpecterOps/BloodHound/main/cmd/ui/public/img/Docker-Engine-Running.png&#34;&gt; &lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If you encounter an &#34;Error response from daemon: Ports are not available: exposing port TCP 127.0.0.1:7474 -&amp;gt; 0.0.0.0:0: listen tcp 127.0.0.1:7474: bind: Only one usage of each socket address (protocol/network address/port) is normally permitted.&#34; this is normally attributed to the &#34;Neo4J Graph Database - neo4j&#34; service already running on your local system. Please stop or delete the service to continue.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Verify if Docker Engine is Running&#xA;docker info&#xA;&#xA;# Attempt to stop Neo4j Service if running (on Windows)&#xA;Stop-Service &#34;Neo4j&#34; -ErrorAction SilentlyContinue&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A successful installation of BloodHound CE would look like the below:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/SpecterOps/BloodHound/assets/12970156/ea9dc042-1866-4ccb-9839-933140cc38b9&#34;&gt;https://github.com/SpecterOps/BloodHound/assets/12970156/ea9dc042-1866-4ccb-9839-933140cc38b9&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Useful Links&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ghst.ly/BHSlack&#34;&gt;BloodHound Slack&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/SpecterOps/BloodHound/wiki&#34;&gt;Wiki&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SpecterOps/BloodHound/main/CONTRIBUTORS.md&#34;&gt;Contributors&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SpecterOps/BloodHound/main/examples/docker-compose/README.md&#34;&gt;Docker Compose Example&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://bloodhound.specterops.io/&#34;&gt;BloodHound Docs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/SpecterOps/BloodHound/wiki/Development&#34;&gt;Developer Quick Start Guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/SpecterOps/BloodHound/wiki/Contributing&#34;&gt;Contributing Guide&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contact&lt;/h2&gt; &#xA;&lt;p&gt;Please check out the &lt;a href=&#34;https://github.com/SpecterOps/BloodHound/wiki/Contact&#34;&gt;Contact page&lt;/a&gt; in our wiki for details on how to reach out with questions and suggestions.&lt;/p&gt; &#xA;&lt;h2&gt;Licensing&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;Copyright 2023 Specter Ops, Inc.&#xA;&#xA;Licensed under the Apache License, Version 2.0&#xA;you may not use this file except in compliance with the License.&#xA;You may obtain a copy of the License at&#xA;&#xA;    http://www.apache.org/licenses/LICENSE-2.0&#xA;&#xA;Unless required by applicable law or agreed to in writing, software&#xA;distributed under the License is distributed on an &#34;AS IS&#34; BASIS,&#xA;WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#xA;See the License for the specific language governing permissions and&#xA;limitations under the License.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Unless otherwise annotated by a lower-level LICENSE file or license header, all files in this repository are released under the &lt;code&gt;Apache-2.0&lt;/code&gt; license. A full copy of the license may be found in the top-level &lt;a href=&#34;https://raw.githubusercontent.com/SpecterOps/BloodHound/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt; file.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>99designs/gqlgen</title>
    <updated>2025-04-06T01:41:07Z</updated>
    <id>tag:github.com,2025-04-06:/99designs/gqlgen</id>
    <link href="https://github.com/99designs/gqlgen" rel="alternate"></link>
    <summary type="html">&lt;p&gt;go generate based graphql server library&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/980499/133180111-d064b38c-6eb9-444b-a60f-7005a6e68222.png&#34; alt=&#34;gqlgen&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;gqlgen &lt;a href=&#34;https://github.com/99designs/gqlgen/actions&#34;&gt;&lt;img src=&#34;https://github.com/99designs/gqlgen/actions/workflows/integration.yml/badge.svg?sanitize=true&#34; alt=&#34;Integration&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://coveralls.io/github/99designs/gqlgen?branch=master&#34;&gt;&lt;img src=&#34;https://coveralls.io/repos/github/99designs/gqlgen/badge.svg?branch=master&#34; alt=&#34;Coverage Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/99designs/gqlgen&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/99designs/gqlgen&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pkg.go.dev/github.com/99designs/gqlgen&#34;&gt;&lt;img src=&#34;https://pkg.go.dev/badge/github.com/99designs/gqlgen.svg?sanitize=true&#34; alt=&#34;Go Reference&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://gqlgen.com/&#34;&gt;&lt;img src=&#34;https://badgen.net/badge/docs/available/green&#34; alt=&#34;Read the Docs&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;h2&gt;What is gqlgen?&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/99designs/gqlgen&#34;&gt;gqlgen&lt;/a&gt; is a Go library for building GraphQL servers without any fuss.&lt;br&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;gqlgen is based on a Schema first approach&lt;/strong&gt; — You get to Define your API using the GraphQL &lt;a href=&#34;http://graphql.org/learn/schema/&#34;&gt;Schema Definition Language&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;gqlgen prioritizes Type safety&lt;/strong&gt; — You should never see &lt;code&gt;map[string]interface{}&lt;/code&gt; here.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;gqlgen enables Codegen&lt;/strong&gt; — We generate the boring bits, so you can focus on building your app quickly.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Still not convinced enough to use &lt;strong&gt;gqlgen&lt;/strong&gt;? Compare &lt;strong&gt;gqlgen&lt;/strong&gt; with other Go graphql &lt;a href=&#34;https://gqlgen.com/feature-comparison/&#34;&gt;implementations&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Quick start&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://golang.org/doc/tutorial/create-module&#34;&gt;Initialise a new go module&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;mkdir example&#xA;cd example&#xA;go mod init example&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Add &lt;code&gt;github.com/99designs/gqlgen&lt;/code&gt; to your &lt;a href=&#34;https://go.dev/wiki/Modules#how-can-i-track-tool-dependencies-for-a-module&#34;&gt;project&#39;s tools.go&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;printf &#39;//go:build tools\npackage tools\nimport (_ &#34;github.com/99designs/gqlgen&#34;\n _ &#34;github.com/99designs/gqlgen/graphql/introspection&#34;)&#39; | gofmt &amp;gt; tools.go&#xA;go mod tidy&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Initialise gqlgen config and generate models&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;go run github.com/99designs/gqlgen init&#xA;go mod tidy&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;Start the graphql server&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;go run server.go&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;More help to get started:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gqlgen.com/getting-started/&#34;&gt;Getting started tutorial&lt;/a&gt; - a comprehensive guide to help you get started&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/99designs/gqlgen/tree/master/_examples&#34;&gt;Real-world examples&lt;/a&gt; show how to create GraphQL applications&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/99designs/gqlgen&#34;&gt;Reference docs&lt;/a&gt; for the APIs&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Reporting Issues&lt;/h2&gt; &#xA;&lt;p&gt;If you think you&#39;ve found a bug, or something isn&#39;t behaving the way you think it should, please raise an &lt;a href=&#34;https://github.com/99designs/gqlgen/issues&#34;&gt;issue&lt;/a&gt; on GitHub.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;We welcome contributions, Read our &lt;a href=&#34;https://github.com/99designs/gqlgen/raw/master/CONTRIBUTING.md&#34;&gt;Contribution Guidelines&lt;/a&gt; to learn more about contributing to &lt;strong&gt;gqlgen&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Frequently asked questions&lt;/h2&gt; &#xA;&lt;h3&gt;How do I prevent fetching child objects that might not be used?&lt;/h3&gt; &#xA;&lt;p&gt;When you have nested or recursive schema like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-graphql&#34;&gt;type User {&#xA;&#x9;id: ID!&#xA;&#x9;name: String!&#xA;&#x9;friends: [User!]!&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You need to tell gqlgen that it should only fetch friends if the user requested it. There are two ways to do this:&lt;/p&gt; &#xA;&lt;h3&gt;Using Custom Models&lt;/h3&gt; &#xA;&lt;p&gt;Write a custom model that omits the friends field:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type User struct {&#xA;  ID int&#xA;  Name string&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And reference the model in &lt;code&gt;gqlgen.yml&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;# gqlgen.yml&#xA;models:&#xA;  User:&#xA;    model: github.com/you/pkg/model.User # go import path to the User struct above&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using Explicit Resolvers&lt;/h3&gt; &#xA;&lt;p&gt;If you want to keep using the generated model, mark the field as requiring a resolver explicitly in &lt;code&gt;gqlgen.yml&lt;/code&gt; like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;# gqlgen.yml&#xA;models:&#xA;  User:&#xA;    fields:&#xA;      friends:&#xA;        resolver: true # force a resolver to be generated&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After doing either of the above and running generate we will need to provide a resolver for friends:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (r *userResolver) Friends(ctx context.Context, obj *User) ([]*User, error) {&#xA;  // select * from user where friendid = obj.ID&#xA;  return friends,  nil&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also use inline config with directives to achieve the same result&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-graphql&#34;&gt;directive @goModel(&#xA;&#x9;model: String&#xA;&#x9;models: [String!]&#xA;) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION&#xA;&#xA;directive @goField(&#xA;&#x9;forceResolver: Boolean&#xA;&#x9;name: String&#xA;&#x9;omittable: Boolean&#xA;&#x9;type: String&#xA;) on INPUT_FIELD_DEFINITION | FIELD_DEFINITION&#xA;&#xA;type User @goModel(model: &#34;github.com/you/pkg/model.User&#34;) {&#xA;&#x9;id: ID! @goField(name: &#34;todoId&#34;)&#xA;&#x9;friends: [User!]! @goField(forceResolver: true)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Can I change the type of the ID from type String to Type Int?&lt;/h3&gt; &#xA;&lt;p&gt;Yes! You can by remapping it in config as seen below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;models:&#xA;  ID: # The GraphQL type ID is backed by&#xA;    model:&#xA;      - github.com/99designs/gqlgen/graphql.IntID # a go integer&#xA;      - github.com/99designs/gqlgen/graphql.ID # or a go string&#xA;      - github.com/99designs/gqlgen/graphql.UintID # or a go uint&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This means gqlgen will be able to automatically bind to strings or ints for models you have written yourself, but the first model in this list is used as the default type and it will always be used when:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Generating models based on schema&lt;/li&gt; &#xA; &lt;li&gt;As arguments in resolvers&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;There isn&#39;t any way around this, gqlgen has no way to know what you want in a given context.&lt;/p&gt; &#xA;&lt;h3&gt;Why do my interfaces have getters? Can I disable these?&lt;/h3&gt; &#xA;&lt;p&gt;These were added in v0.17.14 to allow accessing common interface fields without casting to a concrete type. However, certain fields, like Relay-style Connections, cannot be implemented with simple getters.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;d prefer to not have getters generated in your interfaces, you can add the following in your &lt;code&gt;gqlgen.yml&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;# gqlgen.yml&#xA;omit_getters: true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Other Resources&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/FdURVezcdcw&#34;&gt;Christopher Biscardi @ Gophercon UK 2018&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://99designs.com.au/blog/engineering/gqlgen-a-graphql-server-generator-for-go/&#34;&gt;Introducing gqlgen: a GraphQL Server Generator for Go&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://medium.com/@ivan.corrales.solera/dive-into-graphql-9bfedf22e1a&#34;&gt;Dive into GraphQL by Iván Corrales Solera&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/oshalygin/gqlgen-pg-todo-example&#34;&gt;Sample Project built on gqlgen with Postgres by Oleg Shalygin&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.howtographql.com/graphql-go/0-introduction/&#34;&gt;Hackernews GraphQL Server with gqlgen by Shayegan Hooshyari&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>