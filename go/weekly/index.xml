<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-05-07T01:55:34Z</updated>
  <subtitle>Weekly Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>go-skynet/LocalAI</title>
    <updated>2023-05-07T01:55:34Z</updated>
    <id>tag:github.com,2023-05-07:/go-skynet/LocalAI</id>
    <link href="https://github.com/go-skynet/LocalAI" rel="alternate"></link>
    <summary type="html">&lt;p&gt;🤖 Self-hosted, community-driven, local OpenAI-compatible API. Can be used as a drop-in replacement for OpenAI, running on CPU with consumer-grade hardware. API for ggml compatible models, for instance: llama.cpp, alpaca.cpp, gpt4all.cpp, rwkv.cpp, vicuna, koala, gpt4all-j, cerebras&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt; &lt;br&gt; &lt;img height=&#34;300&#34; src=&#34;https://user-images.githubusercontent.com/2420543/233147843-88697415-6dbf-4368-a862-ab217f9f7342.jpeg&#34;&gt; &lt;br&gt; LocalAI &lt;br&gt; &lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/go-skynet/LocalAI/actions/workflows/test.yml&#34;&gt;&lt;img src=&#34;https://github.com/go-skynet/LocalAI/actions/workflows/test.yml/badge.svg?sanitize=true&#34; alt=&#34;tests&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/go-skynet/LocalAI/actions/workflows/image.yml&#34;&gt;&lt;img src=&#34;https://github.com/go-skynet/LocalAI/actions/workflows/image.yml/badge.svg?sanitize=true&#34; alt=&#34;build container images&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://discord.gg/uJAeKSAGDy&#34;&gt;&lt;img src=&#34;https://dcbadge.vercel.app/api/server/uJAeKSAGDy?style=flat-square&amp;amp;theme=default-inverted&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;LocalAI&lt;/strong&gt; is a drop-in replacement REST API compatible with OpenAI for local CPU inferencing. It allows to run models locally or on-prem with consumer grade hardware. It is based on &lt;a href=&#34;https://github.com/ggerganov/llama.cpp&#34;&gt;llama.cpp&lt;/a&gt;, &lt;a href=&#34;https://github.com/nomic-ai/gpt4all&#34;&gt;gpt4all&lt;/a&gt;, &lt;a href=&#34;https://github.com/saharNooby/rwkv.cpp&#34;&gt;rwkv.cpp&lt;/a&gt; and &lt;a href=&#34;https://github.com/ggerganov/ggml&#34;&gt;ggml&lt;/a&gt;, including support GPT4ALL-J which is licensed under Apache 2.0.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;OpenAI compatible API&lt;/li&gt; &#xA; &lt;li&gt;Supports multiple models&lt;/li&gt; &#xA; &lt;li&gt;Once loaded the first time, it keep models loaded in memory for faster inference&lt;/li&gt; &#xA; &lt;li&gt;Support for prompt templates&lt;/li&gt; &#xA; &lt;li&gt;Doesn&#39;t shell-out, but uses C bindings for a faster inference and better performance.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;LocalAI is a community-driven project, focused on making the AI accessible to anyone. Any contribution, feedback and PR is welcome! It was initially created by &lt;a href=&#34;https://github.com/mudler/&#34;&gt;mudler&lt;/a&gt; at the &lt;a href=&#34;https://github.com/spectrocloud&#34;&gt;SpectroCloud OSS Office&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/go-skynet/LocalAI/tree/master/examples/&#34;&gt;examples on how to integrate LocalAI&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;News&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;02-05-2023: Support for &lt;code&gt;rwkv.cpp&lt;/code&gt; models ( &lt;a href=&#34;https://github.com/go-skynet/LocalAI/pull/158&#34;&gt;https://github.com/go-skynet/LocalAI/pull/158&lt;/a&gt; ) and for &lt;code&gt;/edits&lt;/code&gt; endpoint&lt;/li&gt; &#xA; &lt;li&gt;01-05-2023: Support for SSE stream of tokens in &lt;code&gt;llama.cpp&lt;/code&gt; backends ( &lt;a href=&#34;https://github.com/go-skynet/LocalAI/pull/152&#34;&gt;https://github.com/go-skynet/LocalAI/pull/152&lt;/a&gt; )&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Twitter: &lt;a href=&#34;https://twitter.com/LocalAI_API&#34;&gt;@LocalAI_API&lt;/a&gt; and &lt;a href=&#34;https://twitter.com/mudler_it&#34;&gt;@mudler_it&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Blogs and articles&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://medium.com/@tyler_97636/k8sgpt-localai-unlock-kubernetes-superpowers-for-free-584790de9b65&#34;&gt;Tutorial to use k8sgpt with LocalAI&lt;/a&gt; - excellent usecase for localAI, using AI to analyse Kubernetes clusters.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contribute and help&lt;/h2&gt; &#xA;&lt;p&gt;To help the project you can:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Upvote the &lt;a href=&#34;https://www.reddit.com/r/selfhosted/comments/12w4p2f/localai_openai_compatible_api_to_run_llm_models/&#34;&gt;Reddit post&lt;/a&gt; about LocalAI.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://news.ycombinator.com/item?id=35726934&#34;&gt;Hacker news post&lt;/a&gt; - help us out by voting if you like this project.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you have technological skills and want to contribute to development, have a look at the open issues. If you are new you can have a look at the &lt;a href=&#34;https://github.com/go-skynet/LocalAI/issues?q=is%3Aissue+is%3Aopen+label%3A%22good+first+issue%22&#34;&gt;good-first-issue&lt;/a&gt; and &lt;a href=&#34;https://github.com/go-skynet/LocalAI/issues?q=is%3Aissue+is%3Aopen+label%3A%22help+wanted%22&#34;&gt;help-wanted&lt;/a&gt; labels.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you don&#39;t have technological skills you can still help improving documentation or add examples or share your user-stories with our community, any help and contribution is welcome!&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Model compatibility&lt;/h2&gt; &#xA;&lt;p&gt;It is compatible with the models supported by &lt;a href=&#34;https://github.com/ggerganov/llama.cpp&#34;&gt;llama.cpp&lt;/a&gt; supports also &lt;a href=&#34;https://github.com/nomic-ai/gpt4all&#34;&gt;GPT4ALL-J&lt;/a&gt; and &lt;a href=&#34;https://huggingface.co/lxe/Cerebras-GPT-2.7B-Alpaca-SP-ggml&#34;&gt;cerebras-GPT with ggml&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Tested with:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Vicuna&lt;/li&gt; &#xA; &lt;li&gt;Alpaca&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nomic-ai/gpt4all&#34;&gt;GPT4ALL&lt;/a&gt; (changes required, see below)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gpt4all.io/models/ggml-gpt4all-j.bin&#34;&gt;GPT4ALL-J&lt;/a&gt; (no changes required)&lt;/li&gt; &#xA; &lt;li&gt;Koala&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://huggingface.co/lxe/Cerebras-GPT-2.7B-Alpaca-SP-ggml&#34;&gt;cerebras-GPT with ggml&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;WizardLM&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/BlinkDL/RWKV-LM&#34;&gt;RWKV&lt;/a&gt; models with &lt;a href=&#34;https://github.com/saharNooby/rwkv.cpp&#34;&gt;rwkv.cpp&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;GPT4ALL&lt;/h3&gt; &#xA;&lt;p&gt;Note: You might need to convert older models to the new format, see &lt;a href=&#34;https://github.com/ggerganov/llama.cpp#using-gpt4all&#34;&gt;here&lt;/a&gt; for instance to run &lt;code&gt;gpt4all&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;RWKV&lt;/h3&gt; &#xA;&lt;details&gt; &#xA; &lt;p&gt;A full example on how to run a rwkv model is in the &lt;a href=&#34;https://github.com/go-skynet/LocalAI/tree/master/examples/rwkv&#34;&gt;examples&lt;/a&gt;.&lt;/p&gt; &#xA; &lt;p&gt;Note: rwkv models have an associated tokenizer along that needs to be provided with it:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code&gt;36464540 -rw-r--r--  1 mudler mudler 1.2G May  3 10:51 rwkv_small&#xA;36464543 -rw-r--r--  1 mudler mudler 2.4M May  3 10:51 rwkv_small.tokenizer.json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Others&lt;/h3&gt; &#xA;&lt;p&gt;It should also be compatible with StableLM and GPTNeoX ggml models (untested).&lt;/p&gt; &#xA;&lt;h3&gt;Hardware requirements&lt;/h3&gt; &#xA;&lt;p&gt;Depending on the model you are attempting to run might need more RAM or CPU resources. Check out also &lt;a href=&#34;https://github.com/ggerganov/llama.cpp#memorydisk-requirements&#34;&gt;here&lt;/a&gt; for &lt;code&gt;ggml&lt;/code&gt; based backends. &lt;code&gt;rwkv&lt;/code&gt; is less expensive on resources.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;code&gt;LocalAI&lt;/code&gt; comes by default as a container image. You can check out all the available images with corresponding tags &lt;a href=&#34;https://quay.io/repository/go-skynet/local-ai?tab=tags&amp;amp;tag=latest&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;The easiest way to run LocalAI is by using &lt;code&gt;docker-compose&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&#xA;git clone https://github.com/go-skynet/LocalAI&#xA;&#xA;cd LocalAI&#xA;&#xA;# (optional) Checkout a specific LocalAI tag&#xA;# git checkout -b build &amp;lt;TAG&amp;gt;&#xA;&#xA;# copy your models to models/&#xA;cp your-model.bin models/&#xA;&#xA;# (optional) Edit the .env file to set things like context size and threads&#xA;# vim .env&#xA;&#xA;# start with docker-compose&#xA;docker-compose up -d --build&#xA;&#xA;# Now API is accessible at localhost:8080&#xA;curl http://localhost:8080/v1/models&#xA;# {&#34;object&#34;:&#34;list&#34;,&#34;data&#34;:[{&#34;id&#34;:&#34;your-model.bin&#34;,&#34;object&#34;:&#34;model&#34;}]}&#xA;&#xA;curl http://localhost:8080/v1/completions -H &#34;Content-Type: application/json&#34; -d &#39;{&#xA;     &#34;model&#34;: &#34;your-model.bin&#34;,            &#xA;     &#34;prompt&#34;: &#34;A long time ago in a galaxy far, far away&#34;,&#xA;     &#34;temperature&#34;: 0.7&#xA;   }&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Example: Use GPT4ALL-J model&lt;/h3&gt; &#xA;&lt;details&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Clone LocalAI&#xA;git clone https://github.com/go-skynet/LocalAI&#xA;&#xA;cd LocalAI&#xA;&#xA;# (optional) Checkout a specific LocalAI tag&#xA;# git checkout -b build &amp;lt;TAG&amp;gt;&#xA;&#xA;# Download gpt4all-j to models/&#xA;wget https://gpt4all.io/models/ggml-gpt4all-j.bin -O models/ggml-gpt4all-j&#xA;&#xA;# Use a template from the examples&#xA;cp -rf prompt-templates/ggml-gpt4all-j.tmpl models/&#xA;&#xA;# (optional) Edit the .env file to set things like context size and threads&#xA;# vim .env&#xA;&#xA;# start with docker-compose&#xA;docker-compose up -d --build&#xA;&#xA;# Now API is accessible at localhost:8080&#xA;curl http://localhost:8080/v1/models&#xA;# {&#34;object&#34;:&#34;list&#34;,&#34;data&#34;:[{&#34;id&#34;:&#34;ggml-gpt4all-j&#34;,&#34;object&#34;:&#34;model&#34;}]}&#xA;&#xA;curl http://localhost:8080/v1/chat/completions -H &#34;Content-Type: application/json&#34; -d &#39;{&#xA;     &#34;model&#34;: &#34;ggml-gpt4all-j&#34;,&#xA;     &#34;messages&#34;: [{&#34;role&#34;: &#34;user&#34;, &#34;content&#34;: &#34;How are you?&#34;}],&#xA;     &#34;temperature&#34;: 0.9 &#xA;   }&#39;&#xA;&#xA;# {&#34;model&#34;:&#34;ggml-gpt4all-j&#34;,&#34;choices&#34;:[{&#34;message&#34;:{&#34;role&#34;:&#34;assistant&#34;,&#34;content&#34;:&#34;I&#39;m doing well, thanks. How about you?&#34;}}]}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;To build locally, run &lt;code&gt;make build&lt;/code&gt; (see below).&lt;/p&gt; &#xA;&lt;h3&gt;Other examples&lt;/h3&gt; &#xA;&lt;p&gt;To see other examples on how to integrate with other projects for instance for question answering or for using it with chatbot-ui, see: &lt;a href=&#34;https://github.com/go-skynet/LocalAI/tree/master/examples/&#34;&gt;examples&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Advanced configuration&lt;/h3&gt; &#xA;&lt;p&gt;LocalAI can be configured to serve user-defined models with a set of default parameters and templates.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;p&gt;You can create multiple &lt;code&gt;yaml&lt;/code&gt; files in the models path or either specify a single YAML configuration file. Consider the following &lt;code&gt;models&lt;/code&gt; folder in the &lt;code&gt;example/chatbot-ui&lt;/code&gt;:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code&gt;base ❯ ls -liah examples/chatbot-ui/models &#xA;36487587 drwxr-xr-x 2 mudler mudler 4.0K May  3 12:27 .&#xA;36487586 drwxr-xr-x 3 mudler mudler 4.0K May  3 10:42 ..&#xA;36465214 -rw-r--r-- 1 mudler mudler   10 Apr 27 07:46 completion.tmpl&#xA;36464855 -rw-r--r-- 1 mudler mudler 3.6G Apr 27 00:08 ggml-gpt4all-j&#xA;36464537 -rw-r--r-- 1 mudler mudler  245 May  3 10:42 gpt-3.5-turbo.yaml&#xA;36467388 -rw-r--r-- 1 mudler mudler  180 Apr 27 07:46 gpt4all.tmpl&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;In the &lt;code&gt;gpt-3.5-turbo.yaml&lt;/code&gt; file it is defined the &lt;code&gt;gpt-3.5-turbo&lt;/code&gt; model which is an alias to use &lt;code&gt;gpt4all-j&lt;/code&gt; with pre-defined options.&lt;/p&gt; &#xA; &lt;p&gt;For instance, consider the following that declares &lt;code&gt;gpt-3.5-turbo&lt;/code&gt; backed by the &lt;code&gt;ggml-gpt4all-j&lt;/code&gt; model:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;name: gpt-3.5-turbo&#xA;# Default model parameters&#xA;parameters:&#xA;  # Relative to the models path&#xA;  model: ggml-gpt4all-j&#xA;  # temperature&#xA;  temperature: 0.3&#xA;  # all the OpenAI request options here..&#xA;&#xA;# Default context size&#xA;context_size: 512&#xA;threads: 10&#xA;# Define a backend (optional). By default it will try to guess the backend the first time the model is interacted with.&#xA;backend: gptj # available: llama, stablelm, gpt2, gptj rwkv&#xA;# stopwords (if supported by the backend)&#xA;stopwords:&#xA;- &#34;HUMAN:&#34;&#xA;- &#34;### Response:&#34;&#xA;# define chat roles&#xA;roles:&#xA;  user: &#34;HUMAN:&#34;&#xA;  system: &#34;GPT:&#34;&#xA;template:&#xA;  # template file &#34;.tmpl&#34; with the prompt template to use by default on the endpoint call. Note there is no extension in the files&#xA;  completion: completion&#xA;  chat: ggml-gpt4all-j&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Specifying a &lt;code&gt;config-file&lt;/code&gt; via CLI allows to declare models in a single file as a list, for instance:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;- name: list1&#xA;  parameters:&#xA;    model: testmodel&#xA;  context_size: 512&#xA;  threads: 10&#xA;  stopwords:&#xA;  - &#34;HUMAN:&#34;&#xA;  - &#34;### Response:&#34;&#xA;  roles:&#xA;    user: &#34;HUMAN:&#34;&#xA;    system: &#34;GPT:&#34;&#xA;  template:&#xA;    completion: completion&#xA;    chat: ggml-gpt4all-j&#xA;- name: list2&#xA;  parameters:&#xA;    model: testmodel&#xA;  context_size: 512&#xA;  threads: 10&#xA;  stopwords:&#xA;  - &#34;HUMAN:&#34;&#xA;  - &#34;### Response:&#34;&#xA;  roles:&#xA;    user: &#34;HUMAN:&#34;&#xA;    system: &#34;GPT:&#34;&#xA;  template:&#xA;    completion: completion&#xA;   chat: ggml-gpt4all-j&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;See also &lt;a href=&#34;https://github.com/go-skynet/LocalAI/tree/master/examples/chatbot-ui&#34;&gt;chatbot-ui&lt;/a&gt; as an example on how to use config files.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Prompt templates&lt;/h3&gt; &#xA;&lt;p&gt;The API doesn&#39;t inject a default prompt for talking to the model. You have to use a prompt similar to what&#39;s described in the standford-alpaca docs: &lt;a href=&#34;https://github.com/tatsu-lab/stanford_alpaca#data-release&#34;&gt;https://github.com/tatsu-lab/stanford_alpaca#data-release&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;details&gt;&#xA;  You can use a default template for every model present in your model path, by creating a corresponding file with the `.tmpl` suffix next to your model. For instance, if the model is called `foo.bin`, you can create a sibling file, `foo.bin.tmpl` which will be used as a default prompt and can be used with alpaca: &#xA; &lt;pre&gt;&lt;code&gt;The below instruction describes a task. Write a response that appropriately completes the request.&#xA;&#xA;### Instruction:&#xA;{{.Input}}&#xA;&#xA;### Response:&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;See the &lt;a href=&#34;https://github.com/go-skynet/LocalAI/tree/master/prompt-templates&#34;&gt;prompt-templates&lt;/a&gt; directory in this repository for templates for some of the most popular models.&lt;/p&gt; &#xA; &lt;p&gt;For the edit endpoint, an example template for alpaca-based models can be:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.&#xA;&#xA;### Instruction:&#xA;{{.Instruction}}&#xA;&#xA;### Input:&#xA;{{.Input}}&#xA;&#xA;### Response:&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;CLI&lt;/h3&gt; &#xA;&lt;p&gt;You can control LocalAI with command line arguments, to specify a binding address, or the number of threads.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;p&gt;Usage:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code&gt;local-ai --models-path &amp;lt;model_path&amp;gt; [--address &amp;lt;address&amp;gt;] [--threads &amp;lt;num_threads&amp;gt;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th&gt;Parameter&lt;/th&gt; &#xA;    &lt;th&gt;Environment Variable&lt;/th&gt; &#xA;    &lt;th&gt;Default Value&lt;/th&gt; &#xA;    &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;models-path&lt;/td&gt; &#xA;    &lt;td&gt;MODELS_PATH&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;The path where you have models (ending with &lt;code&gt;.bin&lt;/code&gt;).&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;threads&lt;/td&gt; &#xA;    &lt;td&gt;THREADS&lt;/td&gt; &#xA;    &lt;td&gt;Number of Physical cores&lt;/td&gt; &#xA;    &lt;td&gt;The number of threads to use for text generation.&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;address&lt;/td&gt; &#xA;    &lt;td&gt;ADDRESS&lt;/td&gt; &#xA;    &lt;td&gt;:8080&lt;/td&gt; &#xA;    &lt;td&gt;The address and port to listen on.&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;context-size&lt;/td&gt; &#xA;    &lt;td&gt;CONTEXT_SIZE&lt;/td&gt; &#xA;    &lt;td&gt;512&lt;/td&gt; &#xA;    &lt;td&gt;Default token context size.&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;debug&lt;/td&gt; &#xA;    &lt;td&gt;DEBUG&lt;/td&gt; &#xA;    &lt;td&gt;false&lt;/td&gt; &#xA;    &lt;td&gt;Enable debug mode.&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;config-file&lt;/td&gt; &#xA;    &lt;td&gt;CONFIG_FILE&lt;/td&gt; &#xA;    &lt;td&gt;empty&lt;/td&gt; &#xA;    &lt;td&gt;Path to a LocalAI config file.&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;p&gt;Currently LocalAI comes as a container image and can be used with docker or a container engine of choice. You can check out all the available images with corresponding tags &lt;a href=&#34;https://quay.io/repository/go-skynet/local-ai?tab=tags&amp;amp;tag=latest&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Docker&lt;/h3&gt; &#xA;&lt;details&gt;&#xA;  Example of starting the API with `docker`: &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run -p 8080:8080 -ti --rm quay.io/go-skynet/local-ai:latest --models-path /path/to/models --context-size 700 --threads 4&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;You should see:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code&gt;┌───────────────────────────────────────────────────┐ &#xA;│                   Fiber v2.42.0                   │ &#xA;│               http://127.0.0.1:8080               │ &#xA;│       (bound on host 0.0.0.0 and port 8080)       │ &#xA;│                                                   │ &#xA;│ Handlers ............. 1  Processes ........... 1 │ &#xA;│ Prefork ....... Disabled  PID ................. 1 │ &#xA;└───────────────────────────────────────────────────┘ &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Build locally&lt;/h3&gt; &#xA;&lt;details&gt; &#xA; &lt;p&gt;In order to build the &lt;code&gt;LocalAI&lt;/code&gt; container image locally you can use &lt;code&gt;docker&lt;/code&gt;:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code&gt;# build the image&#xA;docker build -t LocalAI .&#xA;docker run LocalAI&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Or you can build the binary with &lt;code&gt;make&lt;/code&gt;:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code&gt;make build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Build on mac&lt;/h3&gt; &#xA;&lt;p&gt;Building on Mac (M1 or M2) works, but you may need to install some prerequisites using &lt;code&gt;brew&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;p&gt;The below has been tested by one mac user and found to work. Note that this doesn&#39;t use docker to run the server:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code&gt;# install build dependencies&#xA;brew install cmake&#xA;brew install go&#xA;&#xA;# clone the repo&#xA;git clone https://github.com/go-skynet/LocalAI.git&#xA;&#xA;cd LocalAI&#xA;&#xA;# build the binary&#xA;make build&#xA;&#xA;# Download gpt4all-j to models/&#xA;wget https://gpt4all.io/models/ggml-gpt4all-j.bin -O models/ggml-gpt4all-j&#xA;&#xA;# Use a template from the examples&#xA;cp -rf prompt-templates/ggml-gpt4all-j.tmpl models/&#xA;&#xA;# Run LocalAI&#xA;./local-ai --models-path ./models/ --debug&#xA;&#xA;# Now API is accessible at localhost:8080&#xA;curl http://localhost:8080/v1/models&#xA;&#xA;curl http://localhost:8080/v1/chat/completions -H &#34;Content-Type: application/json&#34; -d &#39;{&#xA;     &#34;model&#34;: &#34;ggml-gpt4all-j&#34;,&#xA;     &#34;messages&#34;: [{&#34;role&#34;: &#34;user&#34;, &#34;content&#34;: &#34;How are you?&#34;}],&#xA;     &#34;temperature&#34;: 0.9 &#xA;   }&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Windows compatibility&lt;/h3&gt; &#xA;&lt;p&gt;It should work, however you need to make sure you give enough resources to the container. See &lt;a href=&#34;https://github.com/go-skynet/LocalAI/issues/2&#34;&gt;https://github.com/go-skynet/LocalAI/issues/2&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Run LocalAI in Kubernetes&lt;/h3&gt; &#xA;&lt;p&gt;LocalAI can be installed inside Kubernetes with helm.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;Add the helm repo &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;helm repo add go-skynet https://go-skynet.github.io/helm-charts/&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;li&gt;Create a values files with your settings:&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cat &amp;lt;&amp;lt;EOF &amp;gt; values.yaml&#xA;deployment:&#xA;  image: quay.io/go-skynet/local-ai:latest&#xA;  env:&#xA;    threads: 4&#xA;    contextSize: 1024&#xA;    modelsPath: &#34;/models&#34;&#xA;# Optionally create a PVC, mount the PV to the LocalAI Deployment,&#xA;# and download a model to prepopulate the models directory&#xA;modelsVolume:&#xA;  enabled: true&#xA;  url: &#34;https://gpt4all.io/models/ggml-gpt4all-j.bin&#34;&#xA;  pvc:&#xA;    size: 6Gi&#xA;    accessModes:&#xA;    - ReadWriteOnce&#xA;  auth:&#xA;    # Optional value for HTTP basic access authentication header&#xA;    basic: &#34;&#34; # &#39;username:password&#39; base64 encoded&#xA;service:&#xA;  type: ClusterIP&#xA;  annotations: {}&#xA;  # If using an AWS load balancer, you&#39;ll need to override the default 60s load balancer idle timeout&#xA;  # service.beta.kubernetes.io/aws-load-balancer-connection-idle-timeout: &#34;1200&#34;&#xA;EOF&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;ol start=&#34;3&#34;&gt; &#xA;  &lt;li&gt;Install the helm chart:&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;helm repo update&#xA;helm install local-ai go-skynet/local-ai -f values.yaml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Check out also the &lt;a href=&#34;https://github.com/go-skynet/helm-charts&#34;&gt;helm chart repository on GitHub&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Supported OpenAI API endpoints&lt;/h2&gt; &#xA;&lt;p&gt;You can check out the &lt;a href=&#34;https://platform.openai.com/docs/api-reference/chat/create&#34;&gt;OpenAI API reference&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Following the list of endpoints/parameters supported.&lt;/p&gt; &#xA;&lt;p&gt;Note:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You can also specify the model as part of the OpenAI token.&lt;/li&gt; &#xA; &lt;li&gt;If only one model is available, the API will use it for all the requests.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Chat completions&lt;/h3&gt; &#xA;&lt;details&gt;&#xA;  For example, to generate a chat completion, you can send a POST request to the `/v1/chat/completions` endpoint with the instruction as the request body: &#xA; &lt;pre&gt;&lt;code&gt;curl http://localhost:8080/v1/chat/completions -H &#34;Content-Type: application/json&#34; -d &#39;{&#xA;     &#34;model&#34;: &#34;ggml-koala-7b-model-q4_0-r2.bin&#34;,&#xA;     &#34;messages&#34;: [{&#34;role&#34;: &#34;user&#34;, &#34;content&#34;: &#34;Say this is a test!&#34;}],&#xA;     &#34;temperature&#34;: 0.7&#xA;   }&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Available additional parameters: &lt;code&gt;top_p&lt;/code&gt;, &lt;code&gt;top_k&lt;/code&gt;, &lt;code&gt;max_tokens&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Edit completions&lt;/h3&gt; &#xA;&lt;details&gt;&#xA;  To generate an edit completion you can send a POST request to the `/v1/edits` endpoint with the instruction as the request body: &#xA; &lt;pre&gt;&lt;code&gt;curl http://localhost:8080/v1/edits -H &#34;Content-Type: application/json&#34; -d &#39;{&#xA;     &#34;model&#34;: &#34;ggml-koala-7b-model-q4_0-r2.bin&#34;,&#xA;     &#34;instruction&#34;: &#34;rephrase&#34;,&#xA;     &#34;input&#34;: &#34;Black cat jumped out of the window&#34;,&#xA;     &#34;temperature&#34;: 0.7&#xA;   }&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Available additional parameters: &lt;code&gt;top_p&lt;/code&gt;, &lt;code&gt;top_k&lt;/code&gt;, &lt;code&gt;max_tokens&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Completions&lt;/h3&gt; &#xA;&lt;details&gt; &#xA; &lt;p&gt;To generate a completion, you can send a POST request to the &lt;code&gt;/v1/completions&lt;/code&gt; endpoint with the instruction as per the request body:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code&gt;curl http://localhost:8080/v1/completions -H &#34;Content-Type: application/json&#34; -d &#39;{&#xA;     &#34;model&#34;: &#34;ggml-koala-7b-model-q4_0-r2.bin&#34;,&#xA;     &#34;prompt&#34;: &#34;A long time ago in a galaxy far, far away&#34;,&#xA;     &#34;temperature&#34;: 0.7&#xA;   }&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Available additional parameters: &lt;code&gt;top_p&lt;/code&gt;, &lt;code&gt;top_k&lt;/code&gt;, &lt;code&gt;max_tokens&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;List models&lt;/h3&gt; &#xA;&lt;details&gt;&#xA;  You can list all the models available with: &#xA; &lt;pre&gt;&lt;code&gt;curl http://localhost:8080/v1/models&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Frequently asked questions&lt;/h2&gt; &#xA;&lt;p&gt;Here are answers to some of the most common questions.&lt;/p&gt; &#xA;&lt;h3&gt;How do I get models?&lt;/h3&gt; &#xA;&lt;details&gt; &#xA; &lt;p&gt;Most ggml-based models should work, but newer models may require additions to the API. If a model doesn&#39;t work, please feel free to open up issues. However, be cautious about downloading models from the internet and directly onto your machine, as there may be security vulnerabilities in lama.cpp or ggml that could be maliciously exploited. Some models can be found on Hugging Face: &lt;a href=&#34;https://huggingface.co/models?search=ggml&#34;&gt;https://huggingface.co/models?search=ggml&lt;/a&gt;, or models from gpt4all should also work: &lt;a href=&#34;https://github.com/nomic-ai/gpt4all&#34;&gt;https://github.com/nomic-ai/gpt4all&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;What&#39;s the difference with Serge, or XXX?&lt;/h3&gt; &#xA;&lt;details&gt; &#xA; &lt;p&gt;LocalAI is a multi-model solution that doesn&#39;t focus on a specific model type (e.g., llama.cpp or alpaca.cpp), and it handles all of these internally for faster inference, easy to set up locally and deploy to Kubernetes.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Can I use it with a Discord bot, or XXX?&lt;/h3&gt; &#xA;&lt;details&gt; &#xA; &lt;p&gt;Yes! If the client uses OpenAI and supports setting a different base URL to send requests to, you can use the LocalAI endpoint. This allows to use this with every application that was supposed to work with OpenAI, but without changing the application!&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Can this leverage GPUs?&lt;/h3&gt; &#xA;&lt;details&gt; &#xA; &lt;p&gt;Not currently, as ggml doesn&#39;t support GPUs yet: &lt;a href=&#34;https://github.com/ggerganov/llama.cpp/discussions/915&#34;&gt;https://github.com/ggerganov/llama.cpp/discussions/915&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Where is the webUI?&lt;/h3&gt; &#xA;&lt;details&gt;&#xA;  There is the availability of localai-webui and chatbot-ui in the examples section and can be setup as per the instructions. However as LocalAI is an API you can already plug it into existing projects that provides are UI interfaces to OpenAI&#39;s APIs. There are several already on github, and should be compatible with LocalAI already (as it mimics the OpenAI API) &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Does it work with AutoGPT?&lt;/h3&gt; &#xA;&lt;details&gt; &#xA; &lt;p&gt;AutoGPT currently doesn&#39;t allow to set a different API URL, but there is a PR open for it, so this should be possible soon!&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Projects already using LocalAI to run local models&lt;/h2&gt; &#xA;&lt;p&gt;Feel free to open up a PR to get your project listed!&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kairos-io/kairos&#34;&gt;Kairos&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/k8sgpt-ai/k8sgpt#running-local-models&#34;&gt;k8sgpt&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Blog posts and other articles&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://medium.com/@tyler_97636/k8sgpt-localai-unlock-kubernetes-superpowers-for-free-584790de9b65&#34;&gt;https://medium.com/@tyler_97636/k8sgpt-localai-unlock-kubernetes-superpowers-for-free-584790de9b65&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://kairos.io/docs/examples/localai/&#34;&gt;https://kairos.io/docs/examples/localai/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Short-term roadmap&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Mimic OpenAI API (&lt;a href=&#34;https://github.com/go-skynet/LocalAI/issues/10&#34;&gt;https://github.com/go-skynet/LocalAI/issues/10&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Binary releases (&lt;a href=&#34;https://github.com/go-skynet/LocalAI/issues/6&#34;&gt;https://github.com/go-skynet/LocalAI/issues/6&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Upstream our golang bindings to llama.cpp (&lt;a href=&#34;https://github.com/ggerganov/llama.cpp/issues/351&#34;&gt;https://github.com/ggerganov/llama.cpp/issues/351&lt;/a&gt;) and &lt;a href=&#34;https://github.com/go-skynet/LocalAI/issues/85&#34;&gt;gpt4all&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Multi-model support&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Have a webUI!&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Allow configuration of defaults for models.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Enable automatic downloading of models from a curated gallery, with only free-licensed models, directly from the webui.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Star history&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://star-history.com/#go-skynet/LocalAI&amp;amp;Date&#34;&gt;&lt;img src=&#34;https://api.star-history.com/svg?repos=go-skynet/LocalAI&amp;amp;type=Date&#34; alt=&#34;LocalAI Star history Chart&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;LocalAI is a community-driven project. It was initially created by &lt;a href=&#34;https://github.com/mudler/&#34;&gt;Ettore Di Giacinto&lt;/a&gt; at the &lt;a href=&#34;https://github.com/spectrocloud&#34;&gt;SpectroCloud OSS Office&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;MIT&lt;/p&gt; &#xA;&lt;h2&gt;Golang bindings used&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/go-skynet/go-llama.cpp&#34;&gt;go-skynet/go-llama.cpp&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/go-skynet/go-gpt4all-j.cpp&#34;&gt;go-skynet/go-gpt4all-j.cpp&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/go-skynet/go-gpt2.cpp&#34;&gt;go-skynet/go-gpt2.cpp&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/donomii/go-rwkv.cpp&#34;&gt;donomii/go-rwkv.cpp&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Acknowledgements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ggerganov/llama.cpp&#34;&gt;llama.cpp&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tatsu-lab/stanford_alpaca&#34;&gt;https://github.com/tatsu-lab/stanford_alpaca&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/cornelk/llama-go&#34;&gt;https://github.com/cornelk/llama-go&lt;/a&gt; for the initial ideas&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/antimatter15/alpaca.cpp&#34;&gt;https://github.com/antimatter15/alpaca.cpp&lt;/a&gt; for the light model version (this is compatible and tested only with that checkpoint model!)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributors&lt;/h2&gt; &#xA;&lt;a href=&#34;https://github.com/go-skynet/LocalAI/graphs/contributors&#34;&gt; &lt;img src=&#34;https://contrib.rocks/image?repo=go-skynet/LocalAI&#34;&gt; &lt;/a&gt;</summary>
  </entry>
  <entry>
    <title>navidrome/navidrome</title>
    <updated>2023-05-07T01:55:34Z</updated>
    <id>tag:github.com,2023-05-07:/navidrome/navidrome</id>
    <link href="https://github.com/navidrome/navidrome" rel="alternate"></link>
    <summary type="html">&lt;p&gt;🎧☁️ Modern Music Server and Streamer compatible with Subsonic/Airsonic&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://www.navidrome.org&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/navidrome/navidrome/master/resources/logo-192x192.png&#34; alt=&#34;Navidrome logo&#34; title=&#34;navidrome&#34; align=&#34;right&#34; height=&#34;60px&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Navidrome Music Server &amp;nbsp;&lt;a href=&#34;https://twitter.com/intent/tweet?text=Tired%20of%20paying%20for%20music%20subscriptions%2C%20and%20not%20finding%20what%20you%20really%20like%3F%20Roll%20your%20own%20streaming%20service%21&amp;amp;url=https://navidrome.org&amp;amp;via=navidrome&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/url/http/shields.io.svg?style=social&#34; alt=&#34;Tweet&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/navidrome/navidrome/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/navidrome/navidrome?logo=github&amp;amp;label=latest&amp;amp;style=flat-square&#34; alt=&#34;Last Release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://nightly.link/navidrome/navidrome/workflows/pipeline/master&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/navidrome/navidrome/pipeline.yml?branch=master&amp;amp;logo=github&amp;amp;style=flat-square&#34; alt=&#34;Build&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/navidrome/navidrome/releases/latest&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/downloads/navidrome/navidrome/total?logo=github&amp;amp;style=flat-square&#34; alt=&#34;Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/deluan/navidrome&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/pulls/deluan/navidrome?logo=docker&amp;amp;label=pulls&amp;amp;style=flat-square&#34; alt=&#34;Docker Pulls&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/xh7j7yF&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/671335427726114836?logo=discord&amp;amp;label=discord&amp;amp;style=flat-square&#34; alt=&#34;Dev Chat&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.reddit.com/r/navidrome/&#34;&gt;&lt;img src=&#34;https://img.shields.io/reddit/subreddit-subscribers/navidrome?logo=reddit&amp;amp;label=/r/navidrome&amp;amp;style=flat-square&#34; alt=&#34;Subreddit&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/navidrome/navidrome/master/CODE_OF_CONDUCT.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Contributor%20Covenant-v2.0-ff69b4.svg?style=flat-square&#34; alt=&#34;Contributor Covenant&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Navidrome is an open source web-based music collection server and streamer. It gives you freedom to listen to your music collection from any browser or mobile device. It&#39;s like your personal Spotify!&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: The &lt;code&gt;master&lt;/code&gt; branch may be in an unstable or even broken state during development. Please use &lt;a href=&#34;https://github.com/navidrome/navidrome/releases&#34;&gt;releases&lt;/a&gt; instead of the &lt;code&gt;master&lt;/code&gt; branch in order to get a stable set of binaries.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://www.navidrome.org/demo/&#34;&gt;Check out our Live Demo!&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Any feedback is welcome!&lt;/strong&gt; If you need/want a new feature, find a bug or think of any way to improve Navidrome, please file a &lt;a href=&#34;https://github.com/navidrome/navidrome/issues&#34;&gt;GitHub issue&lt;/a&gt; or join the discussion in our &lt;a href=&#34;https://www.reddit.com/r/navidrome/&#34;&gt;Subreddit&lt;/a&gt;. If you want to contribute to the project in any other way (&lt;a href=&#34;https://www.navidrome.org/docs/developers/&#34;&gt;ui/backend dev&lt;/a&gt;, &lt;a href=&#34;https://www.navidrome.org/docs/developers/translations/&#34;&gt;translations&lt;/a&gt;, &lt;a href=&#34;https://www.navidrome.org/docs/developers/creating-themes&#34;&gt;themes&lt;/a&gt;), please join the chat in our &lt;a href=&#34;https://discord.gg/xh7j7yF&#34;&gt;Discord server&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;See instructions on the &lt;a href=&#34;https://www.navidrome.org/docs/installation/&#34;&gt;project&#39;s website&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Cloud Hosting&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.pikapods.com&#34;&gt;PikaPods&lt;/a&gt; has partnered with us to offer you an &lt;a href=&#34;https://www.navidrome.org/docs/installation/managed/#pikapods&#34;&gt;officially supported, cloud-hosted solution&lt;/a&gt;. A share of the revenue helps fund the development of Navidrome at no additional cost for you.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.pikapods.com/pods?run=navidrome&#34;&gt;&lt;img src=&#34;https://www.pikapods.com/static/run-button.svg?sanitize=true&#34; alt=&#34;PikaPods&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Handles very &lt;strong&gt;large music collections&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Streams virtually &lt;strong&gt;any audio format&lt;/strong&gt; available&lt;/li&gt; &#xA; &lt;li&gt;Reads and uses all your beautifully curated &lt;strong&gt;metadata&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Great support for &lt;strong&gt;compilations&lt;/strong&gt; (Various Artists albums) and &lt;strong&gt;box sets&lt;/strong&gt; (multi-disc albums)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Multi-user&lt;/strong&gt;, each user has their own play counts, playlists, favourites, etc...&lt;/li&gt; &#xA; &lt;li&gt;Very &lt;strong&gt;low resource usage&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Multi-platform&lt;/strong&gt;, runs on macOS, Linux and Windows. &lt;strong&gt;Docker&lt;/strong&gt; images are also provided&lt;/li&gt; &#xA; &lt;li&gt;Ready to use binaries for all major platforms, including &lt;strong&gt;Raspberry Pi&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Automatically &lt;strong&gt;monitors your library&lt;/strong&gt; for changes, importing new files and reloading new metadata&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Themeable&lt;/strong&gt;, modern and responsive &lt;strong&gt;Web interface&lt;/strong&gt; based on &lt;a href=&#34;https://material-ui.com&#34;&gt;Material UI&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Compatible&lt;/strong&gt; with all Subsonic/Madsonic/Airsonic &lt;a href=&#34;https://www.navidrome.org/docs/overview/#apps&#34;&gt;clients&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Transcoding&lt;/strong&gt; on the fly. Can be set per user/player. &lt;strong&gt;Opus encoding is supported&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Translated to &lt;strong&gt;various languages&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;All documentation can be found in the project&#39;s website: &lt;a href=&#34;https://www.navidrome.org/docs&#34;&gt;https://www.navidrome.org/docs&lt;/a&gt;. Here are some useful direct links:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.navidrome.org/docs/overview/&#34;&gt;Overview&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.navidrome.org/docs/installation/&#34;&gt;Installation&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.navidrome.org/docs/installation/docker/&#34;&gt;Docker&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.navidrome.org/docs/installation/pre-built-binaries/&#34;&gt;Binaries&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.navidrome.org/docs/installation/build-from-source/&#34;&gt;Build from source&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.navidrome.org/docs/developers/&#34;&gt;Development&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.navidrome.org/docs/developers/subsonic-api/&#34;&gt;Subsonic API Compatibility&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Screenshots&lt;/h2&gt; &#xA;&lt;p align=&#34;left&#34;&gt; &lt;img height=&#34;550&#34; src=&#34;https://raw.githubusercontent.com/navidrome/navidrome/master/.github/screenshots/ss-mobile-login.png&#34;&gt; &lt;img height=&#34;550&#34; src=&#34;https://raw.githubusercontent.com/navidrome/navidrome/master/.github/screenshots/ss-mobile-player.png&#34;&gt; &lt;img height=&#34;550&#34; src=&#34;https://raw.githubusercontent.com/navidrome/navidrome/master/.github/screenshots/ss-mobile-album-view.png&#34;&gt; &lt;img width=&#34;550&#34; src=&#34;https://raw.githubusercontent.com/navidrome/navidrome/master/.github/screenshots/ss-desktop-player.png&#34;&gt; &lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>bluesky-social/indigo</title>
    <updated>2023-05-07T01:55:34Z</updated>
    <id>tag:github.com,2023-05-07:/bluesky-social/indigo</id>
    <link href="https://github.com/bluesky-social/indigo" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Go source code for Bluesky&#39;s atproto services. NOT STABLE (yet)&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://static.bnewbold.net/tmp/indigo_serac.jpeg&#34; alt=&#34;photo&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;indigo: golang code for Bluesky&#39;s atproto services&lt;/h1&gt; &#xA;&lt;p&gt;Some Bluesky software is developed in Typescript, and lives in the &lt;a href=&#34;https://github.com/bluesky-social/atproto&#34;&gt;bluesky-social/atproto&lt;/a&gt; repository. Some is developed in Go, and lives here.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://static.bnewbold.net/tmp/under_construction_bar.gif&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Everything in this repository is an work in progress. Features and &#34;Lexicons&#34; may be removed or updated, software interfaces broken, etc.&lt;/p&gt; &#xA;&lt;p&gt;We are developing in the open, but not ready to accept or review significant contributions. Keep checking back!&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://static.bnewbold.net/tmp/under_construction_bar.gif&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;What is atproto?&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;not to be confused with the &lt;a href=&#34;https://en.wikipedia.org/wiki/Hayes_command_set&#34;&gt;AT command set&lt;/a&gt; or &lt;a href=&#34;https://en.wikipedia.org/wiki/Adenosine_triphosphate&#34;&gt;Adenosine triphosphate&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;The Authenticated Transfer Protocol (&#34;ATP&#34; or &#34;atproto&#34;) is a decentralized social media protocol, developed by &lt;a href=&#34;https://blueskyweb.xyz&#34;&gt;Bluesky PBLLC&lt;/a&gt;. Learn more at:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://atproto.com/docs&#34;&gt;Protocol Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://atproto.com/guides/overview&#34;&gt;Overview Guide&lt;/a&gt; 👈 Good place to start&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blueskyweb.xyz/blog/3-6-2022-a-self-authenticating-social-protocol&#34;&gt;Blogpost on self-authenticating data structures&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;p&gt;First, you will need the Go toolchain installed. We develop using the latest stable version of the language.&lt;/p&gt; &#xA;&lt;p&gt;The Makefile provides wrapper commands for basic development:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make build&#xA;make test&#xA;make fmt&#xA;make lint&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Individual commands can be run like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;go run ./cmd/bigsky&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>