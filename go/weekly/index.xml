<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-01-22T01:53:27Z</updated>
  <subtitle>Weekly Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>panjf2000/gnet</title>
    <updated>2023-01-22T01:53:27Z</updated>
    <id>tag:github.com,2023-01-22:/panjf2000/gnet</id>
    <link href="https://github.com/panjf2000/gnet" rel="alternate"></link>
    <summary type="html">&lt;p&gt;üöÄ gnet is a high-performance, lightweight, non-blocking, event-driven networking framework written in pure Go./ gnet ÊòØ‰∏Ä‰∏™È´òÊÄßËÉΩ„ÄÅËΩªÈáèÁ∫ß„ÄÅÈùûÈòªÂ°ûÁöÑ‰∫ã‰ª∂È©±Âä® Go ÁΩëÁªúÊ°ÜÊû∂„ÄÇ&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/panjf2000/logos/master/gnet/logo.png&#34; alt=&#34;gnet&#34;&gt; &lt;br&gt; &lt;a title=&#34;Build Status&#34; target=&#34;_blank&#34; href=&#34;https://github.com/panjf2000/gnet/actions?query=workflow%3ATests&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/panjf2000/gnet/test.yml?branch=dev&amp;amp;style=flat-square&amp;amp;logo=github-actions&#34;&gt;&lt;/a&gt; &lt;a title=&#34;Codecov&#34; target=&#34;_blank&#34; href=&#34;https://codecov.io/gh/panjf2000/gnet&#34;&gt;&lt;img src=&#34;https://img.shields.io/codecov/c/github/panjf2000/gnet?style=flat-square&amp;amp;logo=codecov&#34;&gt;&lt;/a&gt; &lt;a title=&#34;Supported Platforms&#34; target=&#34;_blank&#34; href=&#34;https://github.com/panjf2000/gnet&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/platform-Linux%20%7C%20FreeBSD%20%7C%20DragonFly%20%7C%20Darwin-549688?style=flat-square&amp;amp;logo=launchpad&#34;&gt;&lt;/a&gt; &lt;a title=&#34;Require Go Version&#34; target=&#34;_blank&#34; href=&#34;https://github.com/panjf2000/gnet&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/go-%3E%3D1.9-30dff3?style=flat-square&amp;amp;logo=go&#34;&gt;&lt;/a&gt; &lt;br&gt; &lt;a title=&#34;Chat Room&#34; target=&#34;_blank&#34; href=&#34;https://gitter.im/gnet-io/gnet?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=body_badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/gnet-io/gnet.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a title=&#34;Go Report Card&#34; target=&#34;_blank&#34; href=&#34;https://goreportcard.com/report/github.com/panjf2000/gnet&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/panjf2000/gnet?style=flat-square&#34;&gt;&lt;/a&gt; &lt;a title=&#34;Doc for gnet&#34; target=&#34;_blank&#34; href=&#34;https://pkg.go.dev/github.com/panjf2000/gnet/v2#section-documentation&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/go.dev-doc-007d9c?style=flat-square&amp;amp;logo=read-the-docs&#34;&gt;&lt;/a&gt; &lt;a title=&#34;Mentioned in Awesome Go&#34; target=&#34;_blank&#34; href=&#34;https://github.com/avelino/awesome-go#networking&#34;&gt;&lt;img src=&#34;https://awesome.re/mentioned-badge-flat.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a title=&#34;Release&#34; target=&#34;_blank&#34; href=&#34;https://github.com/panjf2000/gnet/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/panjf2000/gnet.svg?color=161823&amp;amp;style=flat-square&amp;amp;logo=smartthings&#34;&gt;&lt;/a&gt; &lt;a title=&#34;Tag&#34; target=&#34;_blank&#34; href=&#34;https://github.com/panjf2000/gnet/tags&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/tag/panjf2000/gnet?color=%23ff8936&amp;amp;logo=fitbit&amp;amp;style=flat-square&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;English | &lt;a href=&#34;https://raw.githubusercontent.com/panjf2000/gnet/dev/README_ZH.md&#34;&gt;‰∏≠Êñá&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;üìñ Introduction&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;gnet&lt;/code&gt; is an event-driven networking framework that is fast and lightweight. It makes direct &lt;a href=&#34;https://en.wikipedia.org/wiki/Epoll&#34;&gt;epoll&lt;/a&gt; and &lt;a href=&#34;https://en.wikipedia.org/wiki/Kqueue&#34;&gt;kqueue&lt;/a&gt; syscalls rather than using the standard Go &lt;a href=&#34;https://golang.org/pkg/net/&#34;&gt;net&lt;/a&gt; package and works in a similar manner as &lt;a href=&#34;https://github.com/netty/netty&#34;&gt;netty&lt;/a&gt; and &lt;a href=&#34;https://github.com/libuv/libuv&#34;&gt;libuv&lt;/a&gt;, which makes &lt;code&gt;gnet&lt;/code&gt; achieve a much higher performance than Go &lt;a href=&#34;https://golang.org/pkg/net/&#34;&gt;net&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;gnet&lt;/code&gt; is not designed to displace the standard Go &lt;a href=&#34;https://golang.org/pkg/net/&#34;&gt;net&lt;/a&gt; package, but to create a networking client/server framework for Go that performs on par with &lt;a href=&#34;http://redis.io&#34;&gt;Redis&lt;/a&gt; and &lt;a href=&#34;http://www.haproxy.org&#34;&gt;Haproxy&lt;/a&gt; for networking packets handling (although it does not limit itself to these areas), therefore, &lt;code&gt;gnet&lt;/code&gt; is not as comprehensive as Go &lt;a href=&#34;https://golang.org/pkg/net/&#34;&gt;net&lt;/a&gt;, it only provides the core functionalities (by a concise API set) of a networking application and it is not planned on being a full-featured networking framework, as I think &lt;a href=&#34;https://golang.org/pkg/net/&#34;&gt;net&lt;/a&gt; has done a good enough job in this area.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;gnet&lt;/code&gt; sells itself as a high-performance, lightweight, non-blocking, event-driven networking framework written in pure Go which works on transport layer with TCP/UDP protocols and Unix Domain Socket , so it allows developers to implement their own protocols(HTTP, RPC, WebSocket, Redis, etc.) of application layer upon &lt;code&gt;gnet&lt;/code&gt; for building diversified network applications, for instance, you get an HTTP Server or Web Framework if you implement HTTP protocol upon &lt;code&gt;gnet&lt;/code&gt; while you have a Redis Server done with the implementation of Redis protocol upon &lt;code&gt;gnet&lt;/code&gt; and so on.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;gnet&lt;/code&gt; derives from the project: &lt;code&gt;evio&lt;/code&gt; while having a much higher performance and more features.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h1&gt;üöÄ Features&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://raw.githubusercontent.com/panjf2000/gnet/dev/#-performance&#34;&gt;High-performance&lt;/a&gt; event-loop under networking model of multiple threads/goroutines&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Built-in goroutine pool powered by the library &lt;a href=&#34;https://github.com/panjf2000/ants&#34;&gt;ants&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Lock-free during the entire runtime&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Concise and easy-to-use APIs&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Efficient, reusable and elastic memory buffer: (Elastic-)Ring-Buffer, Linked-List-Buffer and Elastic-Mixed-Buffer&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Supporting multiple protocols/IPC mechanism: &lt;code&gt;TCP&lt;/code&gt;, &lt;code&gt;UDP&lt;/code&gt; and &lt;code&gt;Unix Domain Socket&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Supporting multiple load-balancing algorithms: &lt;code&gt;Round-Robin&lt;/code&gt;, &lt;code&gt;Source-Addr-Hash&lt;/code&gt; and &lt;code&gt;Least-Connections&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Supporting two event-driven mechanisms: &lt;code&gt;epoll&lt;/code&gt; on &lt;strong&gt;Linux&lt;/strong&gt; and &lt;code&gt;kqueue&lt;/code&gt; on &lt;strong&gt;FreeBSD/DragonFly/Darwin&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Flexible ticker event&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Implementation of &lt;code&gt;gnet&lt;/code&gt; Client&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;strong&gt;Windows&lt;/strong&gt; platform support (&lt;a href=&#34;https://github.com/panjf2000/gnet/tree/1.x&#34;&gt;gnet v1&lt;/a&gt; is available on Windows, v2 not yet)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;strong&gt;TLS&lt;/strong&gt; support&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;a href=&#34;https://kernel.dk/io_uring.pdf&#34;&gt;io_uring&lt;/a&gt; support&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;üé¨ Getting started&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;gnet&lt;/code&gt; is available as a Go module and we highly recommend that you use &lt;code&gt;gnet&lt;/code&gt; via &lt;a href=&#34;https://go.dev/blog/using-go-modules&#34;&gt;Go Modules&lt;/a&gt;, with Go 1.11 Modules enabled (Go 1.11+), you can just simply add &lt;code&gt;import &#34;github.com/panjf2000/gnet&#34;&lt;/code&gt; to the codebase and run &lt;code&gt;go mod download/go mod tidy&lt;/code&gt; or &lt;code&gt;go [build|run|test]&lt;/code&gt; to download the necessary dependencies automatically.&lt;/p&gt; &#xA;&lt;h2&gt;With v2&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;go get -u github.com/panjf2000/gnet/v2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;With v1&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;go get -u github.com/panjf2000/gnet&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;üé° Use cases&lt;/h1&gt; &#xA;&lt;p&gt;The following companies/organizations use &lt;code&gt;gnet&lt;/code&gt; as the underlying network service in production.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.tencent.com&#34;&gt;&lt;img src=&#34;http://img.taohuawu.club/gallery/tencent_logo.png&#34; width=&#34;250&#34; align=&#34;middle&#34;&gt;&lt;/a&gt;&amp;nbsp;&amp;nbsp;&lt;a href=&#34;https://www.iqiyi.com&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;http://img.taohuawu.club/gallery/iqiyi-logo.png&#34; width=&#34;200&#34; align=&#34;middle&#34;&gt;&lt;/a&gt;&amp;nbsp;&amp;nbsp;&lt;a href=&#34;https://www.mi.com&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;http://img.taohuawu.club/gallery/mi-logo.png&#34; width=&#34;150&#34; align=&#34;middle&#34;&gt;&lt;/a&gt;&amp;nbsp;&amp;nbsp;&lt;a href=&#34;https://www.360.com&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;http://img.taohuawu.club/gallery/360-logo.png&#34; width=&#34;200&#34; align=&#34;middle&#34;&gt;&lt;/a&gt;&amp;nbsp;&amp;nbsp;&lt;a href=&#34;https://tieba.baidu.com/&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;http://img.taohuawu.club/gallery/baidu-tieba-logo.png&#34; width=&#34;200&#34; align=&#34;middle&#34;&gt;&lt;/a&gt;&amp;nbsp;&amp;nbsp;&lt;a href=&#34;https://game.qq.com/&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;http://img.taohuawu.club/gallery/tencent-games-logo.jpeg&#34; width=&#34;200&#34; align=&#34;middle&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you have &lt;code&gt;gnet&lt;/code&gt; integrated into projects, feel free to open a pull request refreshing this list.&lt;/p&gt; &#xA;&lt;h1&gt;üìä Performance&lt;/h1&gt; &#xA;&lt;h2&gt;Benchmarks on TechEmpower&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;# Hardware Environment&#xA;CPU: 28 HT Cores Intel(R) Xeon(R) Gold 5120 CPU @ 2.20GHz&#xA;Mem: 32GB RAM&#xA;OS : Ubuntu 18.04.3 4.15.0-88-generic #88-Ubuntu&#xA;Net: Switched 10-gigabit ethernet&#xA;Go : go1.14.x linux/amd64&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/panjf2000/illustrations/master/benchmark/techempower-all.jpg&#34; alt=&#34;All language&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;This is the &lt;em&gt;&lt;strong&gt;top 50&lt;/strong&gt;&lt;/em&gt; on the framework ranking of all programming languages consists of a total of &lt;em&gt;&lt;strong&gt;422 frameworks&lt;/strong&gt;&lt;/em&gt; from all over the world where &lt;code&gt;gnet&lt;/code&gt; is the &lt;em&gt;&lt;strong&gt;runner-up&lt;/strong&gt;&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/panjf2000/illustrations/master/benchmark/techempower-go.png&#34; alt=&#34;Golang&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;This is the full framework ranking of Go and &lt;code&gt;gnet&lt;/code&gt; tops all the other frameworks, which makes &lt;code&gt;gnet&lt;/code&gt; the &lt;em&gt;&lt;strong&gt;fastest&lt;/strong&gt;&lt;/em&gt; networking framework in Go.&lt;/p&gt; &#xA;&lt;p&gt;To see the full ranking list, visit &lt;a href=&#34;https://www.techempower.com/benchmarks/#section=test&amp;amp;runid=53c6220a-e110-466c-a333-2e879fea21ad&amp;amp;hw=ph&amp;amp;test=plaintext&#34;&gt;TechEmpower Plaintext Benchmark&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contrasts to the similar networking libraries&lt;/h2&gt; &#xA;&lt;h2&gt;On Linux (epoll)&lt;/h2&gt; &#xA;&lt;h3&gt;Test Environment&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;# Machine information&#xA;        OS : Ubuntu 20.04/x86_64&#xA;       CPU : 8 CPU cores, AMD EPYC 7K62 48-Core Processor&#xA;    Memory : 16.0 GiB&#xA;&#xA;# Go version and settings&#xA;Go Version : go1.17.2 linux/amd64&#xA;GOMAXPROCS : 8&#xA;&#xA;# Benchmark parameters&#xA;TCP connections : 1000/2000/5000/10000&#xA;Packet size     : 512/1024/2048/4096/8192/16384/32768/65536 bytes&#xA;Test duration   : 15s&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://github.com/gnet-io/gnet-benchmarks&#34;&gt;Echo benchmark&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/panjf2000/gnet_benchmarks/raw/master/results/echo_conn_linux.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/panjf2000/gnet_benchmarks/raw/master/results/echo_packet_linux.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;On MacOS (kqueue)&lt;/h2&gt; &#xA;&lt;h3&gt;Test Environment&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;# Machine information&#xA;        OS : MacOS Big Sur/x86_64&#xA;       CPU : 6 CPU cores, Intel(R) Core(TM) i7-9750H CPU @ 2.60GHz&#xA;    Memory : 16.0 GiB&#xA;&#xA;# Go version and settings&#xA;Go Version : go1.16.5 darwin/amd64&#xA;GOMAXPROCS : 12&#xA;&#xA;# Benchmark parameters&#xA;TCP connections : 300/400/500/600/700&#xA;Packet size     : 512/1024/2048/4096/8192 bytes&#xA;Test duration   : 15s&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://github.com/gnet-io/gnet-benchmarks&#34;&gt;Echo benchmark&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/panjf2000/gnet_benchmarks/raw/master/results/echo_conn_macos.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/panjf2000/gnet_benchmarks/raw/master/results/echo_packet_macos.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;‚ö†Ô∏è License&lt;/h1&gt; &#xA;&lt;p&gt;Source code of &lt;code&gt;gnet&lt;/code&gt; should be distributed under the Apache-2.0 license.&lt;/p&gt; &#xA;&lt;h1&gt;üëè Contributors&lt;/h1&gt; &#xA;&lt;p&gt;Please read the &lt;a href=&#34;https://raw.githubusercontent.com/panjf2000/gnet/dev/CONTRIBUTING.md&#34;&gt;Contributing Guidelines&lt;/a&gt; before opening a PR and thank you to all the developers who already made contributions to &lt;code&gt;gnet&lt;/code&gt;!&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/panjf2000/gnet/graphs/contributors&#34;&gt;&lt;img src=&#34;https://opencollective.com/gnet/contributors.svg?width=890&amp;amp;button=false&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;‚öì Relevant Articles&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.freecodecamp.org/news/million-websockets-and-go-cc58418460bb/&#34;&gt;A Million WebSockets and Go&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://speakerdeck.com/eranyanay/going-infinite-handling-1m-websockets-connections-in-go&#34;&gt;Going Infinite, handling 1M websockets connections in Go&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://strikefreedom.top/go-netpoll-io-multiplexing-reactor&#34;&gt;Go netpoller ÂéüÁîüÁΩëÁªúÊ®°Âûã‰πãÊ∫êÁ†ÅÂÖ®Èù¢Êè≠Áßò&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://strikefreedom.top/go-event-loop-networking-library-gnet&#34;&gt;gnet: ‰∏Ä‰∏™ËΩªÈáèÁ∫ß‰∏îÈ´òÊÄßËÉΩÁöÑ Golang ÁΩëÁªúÂ∫ì&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://strikefreedom.top/releasing-gnet-v1-with-techempower&#34;&gt;ÊúÄÂø´ÁöÑ Go ÁΩëÁªúÊ°ÜÊû∂ gnet Êù•Âï¶ÔºÅ&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;üí∞ Backers&lt;/h1&gt; &#xA;&lt;p&gt;Support us with a monthly donation and help us continue our activities.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opencollective.com/gnet#backers&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/gnet/backers.svg?sanitize=true&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;üíé Sponsors&lt;/h1&gt; &#xA;&lt;p&gt;Become a bronze sponsor with a monthly donation of $10 and get your logo on our README on Github.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opencollective.com/gnet#sponsors&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/gnet/sponsors.svg?sanitize=true&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;‚òïÔ∏è Buy me a coffee&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Please be sure to leave your name, Github account or other social media accounts when you donate by the following means so that I can add it to the list of donors as a token of my appreciation.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/panjf2000/illustrations/master/payments/WeChatPay.JPG&#34; width=&#34;250&#34; align=&#34;middle&#34;&gt;&amp;nbsp;&amp;nbsp; &lt;img src=&#34;https://raw.githubusercontent.com/panjf2000/illustrations/master/payments/AliPay.JPG&#34; width=&#34;250&#34; align=&#34;middle&#34;&gt;&amp;nbsp;&amp;nbsp; &lt;a href=&#34;https://www.paypal.me/R136a1X&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/panjf2000/illustrations/master/payments/PayPal.JPG&#34; width=&#34;250&#34; align=&#34;middle&#34;&gt;&lt;/a&gt;&amp;nbsp;&amp;nbsp;&lt;/p&gt; &#xA;&lt;h1&gt;üí¥ Patrons&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a target=&#34;_blank&#34; href=&#34;https://github.com/patrick-othmer&#34;&gt;&lt;img src=&#34;https://avatars1.githubusercontent.com/u/8964313&#34; width=&#34;100&#34; alt=&#34;Patrick Othmer&#34;&gt;&lt;/a&gt;&amp;nbsp;&lt;a target=&#34;_blank&#34; href=&#34;https://github.com/panjf2000/gnet&#34;&gt;&lt;img src=&#34;https://avatars2.githubusercontent.com/u/50285334&#34; width=&#34;100&#34; alt=&#34;Jimmy&#34;&gt;&lt;/a&gt;&amp;nbsp;&lt;a target=&#34;_blank&#34; href=&#34;https://github.com/cafra&#34;&gt;&lt;img src=&#34;https://avatars0.githubusercontent.com/u/13758306&#34; width=&#34;100&#34; alt=&#34;ChenZhen&#34;&gt;&lt;/a&gt;&amp;nbsp;&lt;a target=&#34;_blank&#34; href=&#34;https://github.com/yangwenmai&#34;&gt;&lt;img src=&#34;https://avatars0.githubusercontent.com/u/1710912&#34; width=&#34;100&#34; alt=&#34;Mai Yang&#34;&gt;&lt;/a&gt;&amp;nbsp;&lt;a target=&#34;_blank&#34; href=&#34;https://github.com/BeijingWks&#34;&gt;&lt;img src=&#34;https://avatars3.githubusercontent.com/u/33656339&#34; width=&#34;100&#34; alt=&#34;ÁéãÂºÄÂ∏Ö&#34;&gt;&lt;/a&gt;&amp;nbsp;&lt;a target=&#34;_blank&#34; href=&#34;https://github.com/refs&#34;&gt;&lt;img src=&#34;https://avatars3.githubusercontent.com/u/6905948&#34; width=&#34;100&#34; alt=&#34;Unger Alejandro&#34;&gt;&lt;/a&gt;&amp;nbsp;&lt;a target=&#34;_blank&#34; href=&#34;https://github.com/Swaggadan&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/137142&#34; width=&#34;100&#34; alt=&#34;Swaggadan&#34;&gt;&lt;/a&gt;&amp;nbsp;&lt;a target=&#34;_blank&#34; href=&#34;https://github.com/Wuvist&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/657796&#34; width=&#34;100&#34; alt=&#34;Weng Wei&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;üîë JetBrains OS licenses&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;gnet&lt;/code&gt; had been being developed with &lt;code&gt;GoLand&lt;/code&gt; IDE under the &lt;strong&gt;free JetBrains Open Source license(s)&lt;/strong&gt; granted by JetBrains s.r.o., hence I would like to express my thanks here.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.jetbrains.com/?from=gnet&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/panjf2000/illustrations/master/jetbrains/jetbrains-variant-4.png&#34; width=&#34;250&#34; align=&#34;middle&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;üîã Sponsorship&lt;/h1&gt; &#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;h3&gt;This project is supported by:&lt;/h3&gt; &#xA;&lt;a href=&#34;https://www.digitalocean.com/&#34;&gt;&lt;img src=&#34;https://opensource.nyc3.cdn.digitaloceanspaces.com/attribution/assets/SVG/DO_Logo_horizontal_blue.svg?sanitize=true&#34; width=&#34;201px&#34;&gt; &lt;/a&gt; &#xA;&lt;p&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>jpillora/chisel</title>
    <updated>2023-01-22T01:53:27Z</updated>
    <id>tag:github.com,2023-01-22:/jpillora/chisel</id>
    <link href="https://github.com/jpillora/chisel" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A fast TCP/UDP tunnel over HTTP&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Chisel&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://godoc.org/github.com/jpillora/chisel&#34;&gt;&lt;img src=&#34;https://godoc.org/github.com/jpillora/chisel?status.svg?sanitize=true&#34; alt=&#34;GoDoc&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/jpillora/chisel/actions?workflow=CI&#34;&gt;&lt;img src=&#34;https://github.com/jpillora/chisel/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Chisel is a fast TCP/UDP tunnel, transported over HTTP, secured via SSH. Single executable including both client and server. Written in Go (golang). Chisel is mainly useful for passing through firewalls, though it can also be used to provide a secure endpoint into your network.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://docs.google.com/drawings/d/1p53VWxzGNfy8rjr-mW8pvisJmhkoLl82vAgctO_6f1w/pub?w=960&amp;amp;h=720&#34; alt=&#34;overview&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jpillora/chisel/master/#features&#34;&gt;Features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jpillora/chisel/master/#install&#34;&gt;Install&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jpillora/chisel/master/#demo&#34;&gt;Demo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jpillora/chisel/master/#usage&#34;&gt;Usage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jpillora/chisel/master/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jpillora/chisel/master/#changelog&#34;&gt;Changelog&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jpillora/chisel/master/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Easy to use&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jpillora/chisel/master/test/bench/perf.md&#34;&gt;Performant&lt;/a&gt;*&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jpillora/chisel/master/#security&#34;&gt;Encrypted connections&lt;/a&gt; using the SSH protocol (via &lt;code&gt;crypto/ssh&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jpillora/chisel/master/#authentication&#34;&gt;Authenticated connections&lt;/a&gt;; authenticated client connections with a users config file, authenticated server connections with fingerprint matching.&lt;/li&gt; &#xA; &lt;li&gt;Client auto-reconnects with &lt;a href=&#34;https://github.com/jpillora/backoff&#34;&gt;exponential backoff&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Clients can create multiple tunnel endpoints over one TCP connection&lt;/li&gt; &#xA; &lt;li&gt;Clients can optionally pass through SOCKS or HTTP CONNECT proxies&lt;/li&gt; &#xA; &lt;li&gt;Reverse port forwarding (Connections go through the server and out the client)&lt;/li&gt; &#xA; &lt;li&gt;Server optionally doubles as a &lt;a href=&#34;http://golang.org/pkg/net/http/httputil/#NewSingleHostReverseProxy&#34;&gt;reverse proxy&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Server optionally allows &lt;a href=&#34;https://en.wikipedia.org/wiki/SOCKS&#34;&gt;SOCKS5&lt;/a&gt; connections (See &lt;a href=&#34;https://raw.githubusercontent.com/jpillora/chisel/master/#socks5-guide&#34;&gt;guide below&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Clients optionally allow &lt;a href=&#34;https://en.wikipedia.org/wiki/SOCKS&#34;&gt;SOCKS5&lt;/a&gt; connections from a reversed port forward&lt;/li&gt; &#xA; &lt;li&gt;Client connections over stdio which supports &lt;code&gt;ssh -o ProxyCommand&lt;/code&gt; providing SSH over HTTP&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;h3&gt;Binaries&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/jpillora/chisel/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/jpillora/chisel.svg?sanitize=true&#34; alt=&#34;Releases&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/jpillora/chisel/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/downloads/jpillora/chisel/total.svg?sanitize=true&#34; alt=&#34;Releases&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/jpillora/chisel/releases/latest&#34;&gt;the latest release&lt;/a&gt; or download and install it now with &lt;code&gt;curl https://i.jpillora.com/chisel! | bash&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Docker&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://hub.docker.com/r/jpillora/chisel/&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/pulls/jpillora/chisel.svg?sanitize=true&#34; alt=&#34;Docker Pulls&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://microbadger.com/images/jpillora/chisel&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/image-size/jpillora/chisel/latest&#34; alt=&#34;Image Size&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker run --rm -it jpillora/chisel --help&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Fedora&lt;/h3&gt; &#xA;&lt;p&gt;The package is maintained by the Fedora community. If you encounter issues related to the usage of the RPM, please use this &lt;a href=&#34;https://bugzilla.redhat.com/buglist.cgi?bug_status=NEW&amp;amp;bug_status=ASSIGNED&amp;amp;classification=Fedora&amp;amp;component=chisel&amp;amp;list_id=11614537&amp;amp;product=Fedora&amp;amp;product=Fedora%20EPEL&#34;&gt;issue tracker&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo dnf -y install chisel&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Source&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ go install github.com/jpillora/chisel@latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Demo&lt;/h2&gt; &#xA;&lt;p&gt;A &lt;a href=&#34;https://chisel-demo.herokuapp.com&#34;&gt;demo app&lt;/a&gt; on Heroku is running this &lt;code&gt;chisel server&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ chisel server --port $PORT --proxy http://example.com&#xA;# listens on $PORT, proxy web requests to http://example.com&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This demo app is also running a &lt;a href=&#34;https://www.npmjs.com/package/serve&#34;&gt;simple file server&lt;/a&gt; on &lt;code&gt;:3000&lt;/code&gt;, which is normally inaccessible due to Heroku&#39;s firewall. However, if we tunnel in with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ chisel client https://chisel-demo.herokuapp.com 3000&#xA;# connects to chisel server at https://chisel-demo.herokuapp.com,&#xA;# tunnels your localhost:3000 to the server&#39;s localhost:3000&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and then visit &lt;a href=&#34;http://localhost:3000/&#34;&gt;localhost:3000&lt;/a&gt;, we should see a directory listing. Also, if we visit the &lt;a href=&#34;https://chisel-demo.herokuapp.com&#34;&gt;demo app&lt;/a&gt; in the browser we should hit the server&#39;s default proxy and see a copy of &lt;a href=&#34;http://example.com&#34;&gt;example.com&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;!-- render these help texts by hand,&#xA;  or use https://github.com/jpillora/md-tmpl&#xA;    with $ md-tmpl -w README.md --&gt; &#xA;&lt;!--tmpl,code=plain:echo &#34;$ chisel --help&#34; &amp;&amp; go run main.go --help | sed &#39;s#0.0.0-src (go1\..*)#X.Y.Z#&#39; --&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-plain&#34;&gt;$ chisel --help&#xA;&#xA;  Usage: chisel [command] [--help]&#xA;&#xA;  Version: X.Y.Z&#xA;&#xA;  Commands:&#xA;    server - runs chisel in server mode&#xA;    client - runs chisel in client mode&#xA;&#xA;  Read more:&#xA;    https://github.com/jpillora/chisel&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;!--/tmpl--&gt; &#xA;&lt;!--tmpl,code=plain:echo &#34;$ chisel server --help&#34; &amp;&amp; go run main.go server --help | cat | sed &#39;s#0.0.0-src (go1\..*)#X.Y.Z#&#39; --&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-plain&#34;&gt;$ chisel server --help&#xA;&#xA;  Usage: chisel server [options]&#xA;&#xA;  Options:&#xA;&#xA;    --host, Defines the HTTP listening host ‚Äì the network interface&#xA;    (defaults the environment variable HOST and falls back to 0.0.0.0).&#xA;&#xA;    --port, -p, Defines the HTTP listening port (defaults to the environment&#xA;    variable PORT and fallsback to port 8080).&#xA;&#xA;    --key, An optional string to seed the generation of a ECDSA public&#xA;    and private key pair. All communications will be secured using this&#xA;    key pair. Share the subsequent fingerprint with clients to enable detection&#xA;    of man-in-the-middle attacks (defaults to the CHISEL_KEY environment&#xA;    variable, otherwise a new key is generate each run).&#xA;&#xA;    --authfile, An optional path to a users.json file. This file should&#xA;    be an object with users defined like:&#xA;      {&#xA;        &#34;&amp;lt;user:pass&amp;gt;&#34;: [&#34;&amp;lt;addr-regex&amp;gt;&#34;,&#34;&amp;lt;addr-regex&amp;gt;&#34;]&#xA;      }&#xA;    when &amp;lt;user&amp;gt; connects, their &amp;lt;pass&amp;gt; will be verified and then&#xA;    each of the remote addresses will be compared against the list&#xA;    of address regular expressions for a match. Addresses will&#xA;    always come in the form &#34;&amp;lt;remote-host&amp;gt;:&amp;lt;remote-port&amp;gt;&#34; for normal remotes&#xA;    and &#34;R:&amp;lt;local-interface&amp;gt;:&amp;lt;local-port&amp;gt;&#34; for reverse port forwarding&#xA;    remotes. This file will be automatically reloaded on change.&#xA;&#xA;    --auth, An optional string representing a single user with full&#xA;    access, in the form of &amp;lt;user:pass&amp;gt;. It is equivalent to creating an&#xA;    authfile with {&#34;&amp;lt;user:pass&amp;gt;&#34;: [&#34;&#34;]}. If unset, it will use the&#xA;    environment variable AUTH.&#xA;&#xA;    --keepalive, An optional keepalive interval. Since the underlying&#xA;    transport is HTTP, in many instances we&#39;ll be traversing through&#xA;    proxies, often these proxies will close idle connections. You must&#xA;    specify a time with a unit, for example &#39;5s&#39; or &#39;2m&#39;. Defaults&#xA;    to &#39;25s&#39; (set to 0s to disable).&#xA;&#xA;    --backend, Specifies another HTTP server to proxy requests to when&#xA;    chisel receives a normal HTTP request. Useful for hiding chisel in&#xA;    plain sight.&#xA;&#xA;    --socks5, Allow clients to access the internal SOCKS5 proxy. See&#xA;    chisel client --help for more information.&#xA;&#xA;    --reverse, Allow clients to specify reverse port forwarding remotes&#xA;    in addition to normal remotes.&#xA;&#xA;    --tls-key, Enables TLS and provides optional path to a PEM-encoded&#xA;    TLS private key. When this flag is set, you must also set --tls-cert,&#xA;    and you cannot set --tls-domain.&#xA;&#xA;    --tls-cert, Enables TLS and provides optional path to a PEM-encoded&#xA;    TLS certificate. When this flag is set, you must also set --tls-key,&#xA;    and you cannot set --tls-domain.&#xA;&#xA;    --tls-domain, Enables TLS and automatically acquires a TLS key and&#xA;    certificate using LetsEncrypt. Setting --tls-domain requires port 443.&#xA;    You may specify multiple --tls-domain flags to serve multiple domains.&#xA;    The resulting files are cached in the &#34;$HOME/.cache/chisel&#34; directory.&#xA;    You can modify this path by setting the CHISEL_LE_CACHE variable,&#xA;    or disable caching by setting this variable to &#34;-&#34;. You can optionally&#xA;    provide a certificate notification email by setting CHISEL_LE_EMAIL.&#xA;&#xA;    --tls-ca, a path to a PEM encoded CA certificate bundle or a directory&#xA;    holding multiple PEM encode CA certificate bundle files, which is used to &#xA;    validate client connections. The provided CA certificates will be used &#xA;    instead of the system roots. This is commonly used to implement mutual-TLS. &#xA;&#xA;    --pid Generate pid file in current working directory&#xA;&#xA;    -v, Enable verbose logging&#xA;&#xA;    --help, This help text&#xA;&#xA;  Signals:&#xA;    The chisel process is listening for:&#xA;      a SIGUSR2 to print process stats, and&#xA;      a SIGHUP to short-circuit the client reconnect timer&#xA;&#xA;  Version:&#xA;    X.Y.Z&#xA;&#xA;  Read more:&#xA;    https://github.com/jpillora/chisel&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;!--/tmpl--&gt; &#xA;&lt;!--tmpl,code=plain:echo &#34;$ chisel client --help&#34; &amp;&amp; go run main.go client --help | sed &#39;s#0.0.0-src (go1\..*)#X.Y.Z#&#39; --&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-plain&#34;&gt;$ chisel client --help&#xA;&#xA;  Usage: chisel client [options] &amp;lt;server&amp;gt; &amp;lt;remote&amp;gt; [remote] [remote] ...&#xA;&#xA;  &amp;lt;server&amp;gt; is the URL to the chisel server.&#xA;&#xA;  &amp;lt;remote&amp;gt;s are remote connections tunneled through the server, each of&#xA;  which come in the form:&#xA;&#xA;    &amp;lt;local-host&amp;gt;:&amp;lt;local-port&amp;gt;:&amp;lt;remote-host&amp;gt;:&amp;lt;remote-port&amp;gt;/&amp;lt;protocol&amp;gt;&#xA;&#xA;    ‚ñ† local-host defaults to 0.0.0.0 (all interfaces).&#xA;    ‚ñ† local-port defaults to remote-port.&#xA;    ‚ñ† remote-port is required*.&#xA;    ‚ñ† remote-host defaults to 0.0.0.0 (server localhost).&#xA;    ‚ñ† protocol defaults to tcp.&#xA;&#xA;  which shares &amp;lt;remote-host&amp;gt;:&amp;lt;remote-port&amp;gt; from the server to the client&#xA;  as &amp;lt;local-host&amp;gt;:&amp;lt;local-port&amp;gt;, or:&#xA;&#xA;    R:&amp;lt;local-interface&amp;gt;:&amp;lt;local-port&amp;gt;:&amp;lt;remote-host&amp;gt;:&amp;lt;remote-port&amp;gt;/&amp;lt;protocol&amp;gt;&#xA;&#xA;  which does reverse port forwarding, sharing &amp;lt;remote-host&amp;gt;:&amp;lt;remote-port&amp;gt;&#xA;  from the client to the server&#39;s &amp;lt;local-interface&amp;gt;:&amp;lt;local-port&amp;gt;.&#xA;&#xA;    example remotes&#xA;&#xA;      3000&#xA;      example.com:3000&#xA;      3000:google.com:80&#xA;      192.168.0.5:3000:google.com:80&#xA;      socks&#xA;      5000:socks&#xA;      R:2222:localhost:22&#xA;      R:socks&#xA;      R:5000:socks&#xA;      stdio:example.com:22&#xA;      1.1.1.1:53/udp&#xA;&#xA;    When the chisel server has --socks5 enabled, remotes can&#xA;    specify &#34;socks&#34; in place of remote-host and remote-port.&#xA;    The default local host and port for a &#34;socks&#34; remote is&#xA;    127.0.0.1:1080. Connections to this remote will terminate&#xA;    at the server&#39;s internal SOCKS5 proxy.&#xA;&#xA;    When the chisel server has --reverse enabled, remotes can&#xA;    be prefixed with R to denote that they are reversed. That&#xA;    is, the server will listen and accept connections, and they&#xA;    will be proxied through the client which specified the remote.&#xA;    Reverse remotes specifying &#34;R:socks&#34; will listen on the server&#39;s&#xA;    default socks port (1080) and terminate the connection at the&#xA;    client&#39;s internal SOCKS5 proxy.&#xA;&#xA;    When stdio is used as local-host, the tunnel will connect standard&#xA;    input/output of this program with the remote. This is useful when &#xA;    combined with ssh ProxyCommand. You can use&#xA;      ssh -o ProxyCommand=&#39;chisel client chiselserver stdio:%h:%p&#39; \&#xA;          user@example.com&#xA;    to connect to an SSH server through the tunnel.&#xA;&#xA;  Options:&#xA;&#xA;    --fingerprint, A *strongly recommended* fingerprint string&#xA;    to perform host-key validation against the server&#39;s public key.&#xA;&#x9;Fingerprint mismatches will close the connection.&#xA;&#x9;Fingerprints are generated by hashing the ECDSA public key using&#xA;&#x9;SHA256 and encoding the result in base64.&#xA;&#x9;Fingerprints must be 44 characters containing a trailing equals (=).&#xA;&#xA;    --auth, An optional username and password (client authentication)&#xA;    in the form: &#34;&amp;lt;user&amp;gt;:&amp;lt;pass&amp;gt;&#34;. These credentials are compared to&#xA;    the credentials inside the server&#39;s --authfile. defaults to the&#xA;    AUTH environment variable.&#xA;&#xA;    --keepalive, An optional keepalive interval. Since the underlying&#xA;    transport is HTTP, in many instances we&#39;ll be traversing through&#xA;    proxies, often these proxies will close idle connections. You must&#xA;    specify a time with a unit, for example &#39;5s&#39; or &#39;2m&#39;. Defaults&#xA;    to &#39;25s&#39; (set to 0s to disable).&#xA;&#xA;    --max-retry-count, Maximum number of times to retry before exiting.&#xA;    Defaults to unlimited.&#xA;&#xA;    --max-retry-interval, Maximum wait time before retrying after a&#xA;    disconnection. Defaults to 5 minutes.&#xA;&#xA;    --proxy, An optional HTTP CONNECT or SOCKS5 proxy which will be&#xA;    used to reach the chisel server. Authentication can be specified&#xA;    inside the URL.&#xA;    For example, http://admin:password@my-server.com:8081&#xA;            or: socks://admin:password@my-server.com:1080&#xA;&#xA;    --header, Set a custom header in the form &#34;HeaderName: HeaderContent&#34;.&#xA;    Can be used multiple times. (e.g --header &#34;Foo: Bar&#34; --header &#34;Hello: World&#34;)&#xA;&#xA;    --hostname, Optionally set the &#39;Host&#39; header (defaults to the host&#xA;    found in the server url).&#xA;&#xA;    --tls-ca, An optional root certificate bundle used to verify the&#xA;    chisel server. Only valid when connecting to the server with&#xA;    &#34;https&#34; or &#34;wss&#34;. By default, the operating system CAs will be used.&#xA;&#xA;    --tls-skip-verify, Skip server TLS certificate verification of&#xA;    chain and host name (if TLS is used for transport connections to&#xA;    server). If set, client accepts any TLS certificate presented by&#xA;    the server and any host name in that certificate. This only affects&#xA;    transport https (wss) connection. Chisel server&#39;s public key&#xA;    may be still verified (see --fingerprint) after inner connection&#xA;    is established.&#xA;&#xA;    --tls-key, a path to a PEM encoded private key used for client &#xA;    authentication (mutual-TLS).&#xA;&#xA;    --tls-cert, a path to a PEM encoded certificate matching the provided &#xA;    private key. The certificate must have client authentication &#xA;    enabled (mutual-TLS).&#xA;&#xA;    --pid Generate pid file in current working directory&#xA;&#xA;    -v, Enable verbose logging&#xA;&#xA;    --help, This help text&#xA;&#xA;  Signals:&#xA;    The chisel process is listening for:&#xA;      a SIGUSR2 to print process stats, and&#xA;      a SIGHUP to short-circuit the client reconnect timer&#xA;&#xA;  Version:&#xA;    X.Y.Z&#xA;&#xA;  Read more:&#xA;    https://github.com/jpillora/chisel&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;!--/tmpl--&gt; &#xA;&lt;h3&gt;Security&lt;/h3&gt; &#xA;&lt;p&gt;Encryption is always enabled. When you start up a chisel server, it will generate an in-memory ECDSA public/private key pair. The public key fingerprint (base64 encoded SHA256) will be displayed as the server starts. Instead of generating a random key, the server may optionally specify a key seed, using the &lt;code&gt;--key&lt;/code&gt; option, which will be used to seed the key generation. When clients connect, they will also display the server&#39;s public key fingerprint. The client can force a particular fingerprint using the &lt;code&gt;--fingerprint&lt;/code&gt; option. See the &lt;code&gt;--help&lt;/code&gt; above for more information.&lt;/p&gt; &#xA;&lt;h3&gt;Authentication&lt;/h3&gt; &#xA;&lt;p&gt;Using the &lt;code&gt;--authfile&lt;/code&gt; option, the server may optionally provide a &lt;code&gt;user.json&lt;/code&gt; configuration file to create a list of accepted users. The client then authenticates using the &lt;code&gt;--auth&lt;/code&gt; option. See &lt;a href=&#34;https://raw.githubusercontent.com/jpillora/chisel/master/example/users.json&#34;&gt;users.json&lt;/a&gt; for an example authentication configuration file. See the &lt;code&gt;--help&lt;/code&gt; above for more information.&lt;/p&gt; &#xA;&lt;p&gt;Internally, this is done using the &lt;em&gt;Password&lt;/em&gt; authentication method provided by SSH. Learn more about &lt;code&gt;crypto/ssh&lt;/code&gt; here &lt;a href=&#34;http://blog.gopheracademy.com/go-and-ssh/&#34;&gt;http://blog.gopheracademy.com/go-and-ssh/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;SOCKS5 Guide&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Start your chisel server&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker run \&#xA;  --name chisel -p 9312:9312 \&#xA;  -d --restart always \&#xA;  jpillora/chisel server -p 9312 --socks5 --key supersecret&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Connect your chisel client (using server&#39;s fingerprint)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;chisel client --fingerprint &#39;rHb55mcxf6vSckL2AezFV09rLs7pfPpavVu++MF7AhQ=&#39; &amp;lt;server-address&amp;gt;:9312 socks&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Point your SOCKS5 clients (e.g. OS/Browser) to:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;client-address&amp;gt;:1080&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;Now you have an encrypted, authenticated SOCKS5 connection over HTTP&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Caveats&lt;/h4&gt; &#xA;&lt;p&gt;Since WebSockets support is required:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;IaaS providers all will support WebSockets (unless an unsupporting HTTP proxy has been forced in front of you, in which case I&#39;d argue that you&#39;ve been downgraded to PaaS)&lt;/li&gt; &#xA; &lt;li&gt;PaaS providers vary in their support for WebSockets &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Heroku has full support&lt;/li&gt; &#xA;   &lt;li&gt;Openshift has full support though connections are only accepted on ports 8443 and 8080&lt;/li&gt; &#xA;   &lt;li&gt;Google App Engine has &lt;strong&gt;no&lt;/strong&gt; support (Track this on &lt;a href=&#34;https://code.google.com/p/googleappengine/issues/detail?id=2535&#34;&gt;their repo&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://golang.org/doc/code.html&#34;&gt;http://golang.org/doc/code.html&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://golang.org/doc/effective_go.html&#34;&gt;http://golang.org/doc/effective_go.html&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;github.com/jpillora/chisel/share&lt;/code&gt; contains the shared package&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;github.com/jpillora/chisel/server&lt;/code&gt; contains the server package&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;github.com/jpillora/chisel/client&lt;/code&gt; contains the client package&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Changelog&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;1.0&lt;/code&gt; - Initial release&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;1.1&lt;/code&gt; - Replaced simple symmetric encryption for ECDSA SSH&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;1.2&lt;/code&gt; - Added SOCKS5 (server) and HTTP CONNECT (client) support&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;1.3&lt;/code&gt; - Added reverse tunnelling support&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;1.4&lt;/code&gt; - Added arbitrary HTTP header support&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;1.5&lt;/code&gt; - Added reverse SOCKS support (by @aus)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;1.6&lt;/code&gt; - Added client stdio support (by @BoleynSu)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;1.7&lt;/code&gt; - Added UDP support&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/jpillora/chisel/raw/master/LICENSE&#34;&gt;MIT&lt;/a&gt; ¬© Jaime Pillora&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>dagger/dagger</title>
    <updated>2023-01-22T01:53:27Z</updated>
    <id>tag:github.com,2023-01-22:/dagger/dagger</id>
    <link href="https://github.com/dagger/dagger" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A programmable CI/CD engine that runs your pipelines in containers&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;What is Dagger?&lt;/h2&gt; &#xA;&lt;p&gt;Dagger is a programmable CI/CD engine that runs your pipelines in containers.&lt;/p&gt; &#xA;&lt;h3&gt;Programmable&lt;/h3&gt; &#xA;&lt;p&gt;Develop your CI/CD pipelines as code, in the same programming language as your application.&lt;/p&gt; &#xA;&lt;h3&gt;Runs your pipelines in containers&lt;/h3&gt; &#xA;&lt;p&gt;Dagger executes your pipelines entirely as&amp;nbsp;&lt;a href=&#34;https://opencontainers.org/&#34;&gt;standard OCI containers&lt;/a&gt;. This has several benefits:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Instant local testing&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Portability&lt;/strong&gt;: the same pipeline can run on your local machine, a CI runner, a dedicated server, or any container hosting service.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Superior caching&lt;/strong&gt;: every operation is cached by default, and caching works the same everywhere&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Compatibility&lt;/strong&gt; with the Docker ecosystem: if it runs in a container, you can add it to your pipeline.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Cross-language instrumentation&lt;/strong&gt;: teams can use each other&#39;s tools without learning each other&#39;s language.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Who is it for?&lt;/h2&gt; &#xA;&lt;p&gt;Dagger may be a good fit if you are...&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A developer wishing your CI pipelines were code instead of YAML&lt;/li&gt; &#xA; &lt;li&gt;Your team&#39;s &#34;designated devops person&#34;, hoping to replace a pile of artisanal scripts with something more powerful&lt;/li&gt; &#xA; &lt;li&gt;A platform engineer writing custom tooling, with the goal of unifying continuous delivery across organizational silos&lt;/li&gt; &#xA; &lt;li&gt;A cloud-native developer advocate or solutions engineer, looking to demonstrate a complex integration on short notice&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Learn more&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.dagger.io/#how-does-it-work&#34;&gt;How does it work?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.dagger.io/#getting-started&#34;&gt;Getting started&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dagger/examples&#34;&gt;Examples&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://discord.gg/ufnyBtc8uY&#34;&gt;Join the Dagger community server&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/dagger_io&#34;&gt;Follow us on Twitter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Join a &lt;a href=&#34;https://dagger.io/events&#34;&gt;Dagger community call&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>