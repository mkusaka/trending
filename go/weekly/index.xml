<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-07-30T01:55:52Z</updated>
  <subtitle>Weekly Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>containerd/containerd</title>
    <updated>2023-07-30T01:55:52Z</updated>
    <id>tag:github.com,2023-07-30:/containerd/containerd</id>
    <link href="https://github.com/containerd/containerd" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An open and reliable container runtime&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/cncf/artwork/master/projects/containerd/horizontal/color/containerd-horizontal-color.png#gh-light-mode-only&#34; alt=&#34;containerd banner light mode&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/cncf/artwork/master/projects/containerd/horizontal/white/containerd-horizontal-white.png#gh-dark-mode-only&#34; alt=&#34;containerd banner dark mode&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/containerd/containerd&#34;&gt;&lt;img src=&#34;https://pkg.go.dev/badge/github.com/containerd/containerd&#34; alt=&#34;PkgGoDev&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/containerd/containerd/actions?query=workflow%3ACI&#34;&gt;&lt;img src=&#34;https://github.com/containerd/containerd/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/containerd/containerd/actions?query=workflow%3ANightly&#34;&gt;&lt;img src=&#34;https://github.com/containerd/containerd/workflows/Nightly/badge.svg?sanitize=true&#34; alt=&#34;Nightlies&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/containerd/containerd&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/containerd/containerd&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://bestpractices.coreinfrastructure.org/projects/1271&#34;&gt;&lt;img src=&#34;https://bestpractices.coreinfrastructure.org/projects/1271/badge&#34; alt=&#34;CII Best Practices&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;containerd is an industry-standard container runtime with an emphasis on simplicity, robustness, and portability. It is available as a daemon for Linux and Windows, which can manage the complete container lifecycle of its host system: image transfer and storage, container execution and supervision, low-level storage and network attachments, etc.&lt;/p&gt; &#xA;&lt;p&gt;containerd is a member of CNCF with &lt;a href=&#34;https://landscape.cncf.io/?selected=containerd&#34;&gt;&#39;graduated&#39;&lt;/a&gt; status.&lt;/p&gt; &#xA;&lt;p&gt;containerd is designed to be embedded into a larger system, rather than being used directly by developers or end-users.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/containerd/containerd/main/docs/historical/design/architecture.png&#34; alt=&#34;architecture&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Announcements&lt;/h2&gt; &#xA;&lt;h3&gt;Hello Kubernetes v1.24!&lt;/h3&gt; &#xA;&lt;p&gt;The containerd project would like to announce containerd &lt;a href=&#34;https://github.com/containerd/containerd/releases/tag/v1.6.4&#34;&gt;v1.6.4&lt;/a&gt;. While other prior releases are supported, this latest release and the containerd &lt;a href=&#34;https://github.com/containerd/containerd/releases/tag/v1.5.11&#34;&gt;v1.5.11&lt;/a&gt; release are recommended for Kubernetes v1.24.&lt;/p&gt; &#xA;&lt;p&gt;We felt it important to announce this, particularly in view of &lt;a href=&#34;https://kubernetes.io/blog/2022/05/03/dockershim-historical-context/&#34;&gt;the dockershim removal from this release of Kubernetes&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;It should be noted here that moving to CRI integrations has been in the plan for many years. &lt;code&gt;containerd&lt;/code&gt; began as part of &lt;code&gt;Docker&lt;/code&gt; and was donated to &lt;code&gt;CNCF&lt;/code&gt;. &lt;code&gt;containerd&lt;/code&gt; remains in use today by Docker/moby/buildkit etc., and has many other &lt;a href=&#34;https://github.com/containerd/containerd/raw/main/ADOPTERS.md&#34;&gt;adopters&lt;/a&gt;. &lt;code&gt;containerd&lt;/code&gt; has a namespace that isolates use of &lt;code&gt;containerd&lt;/code&gt; from various clients/adopters. The Kubernetes namespace is appropriately named &lt;code&gt;k8s.io&lt;/code&gt;. The CRI API and &lt;code&gt;containerd&lt;/code&gt; CRI plugin project has, from the start, been an effort to reduce the impact surface for Kubernetes container runtime integration. If you can&#39;t tell, we are excited to see this come to fruition.&lt;/p&gt; &#xA;&lt;p&gt;If you have any concerns or questions, we will be here to answer them in &lt;a href=&#34;https://raw.githubusercontent.com/containerd/containerd/main/#communication&#34;&gt;issues, discussions, and/or on slack&lt;/a&gt;. Below you will find information/detail about our &lt;a href=&#34;https://raw.githubusercontent.com/containerd/containerd/main/#cri&#34;&gt;CRI Integration&lt;/a&gt; implementation.&lt;/p&gt; &#xA;&lt;p&gt;For containerd users already on v1.6.0-v1.6.3, there are known issues addressed by &lt;a href=&#34;https://github.com/containerd/containerd/releases/tag/v1.6.4&#34;&gt;v1.6.4&lt;/a&gt;. The issues are primarily related to &lt;a href=&#34;https://github.com/kubernetes/website/raw/dev-1.24/content/en/docs/tasks/administer-cluster/migrating-from-dockershim/troubleshooting-cni-plugin-related-errors.md&#34;&gt;CNI setup&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Now Recruiting&lt;/h3&gt; &#xA;&lt;p&gt;We are a large inclusive OSS project that is welcoming help of any kind shape or form:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Documentation help is needed to make the product easier to consume and extend.&lt;/li&gt; &#xA; &lt;li&gt;We need OSS community outreach/organizing help to get the word out; manage and create messaging and educational content; and help with social media, community forums/groups, and google groups.&lt;/li&gt; &#xA; &lt;li&gt;We are actively inviting new &lt;a href=&#34;https://github.com/containerd/project/raw/main/GOVERNANCE.md#security-advisors&#34;&gt;security advisors&lt;/a&gt; to join the team.&lt;/li&gt; &#xA; &lt;li&gt;New subprojects are being created, core and non-core that could use additional development help.&lt;/li&gt; &#xA; &lt;li&gt;Each of the &lt;a href=&#34;https://github.com/containerd&#34;&gt;containerd projects&lt;/a&gt; has a list of issues currently being worked on or that need help resolving. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;If the issue has not already been assigned to someone or has not made recent progress, and you are interested, please inquire.&lt;/li&gt; &#xA;   &lt;li&gt;If you are interested in starting with a smaller/beginner-level issue, look for issues with an &lt;code&gt;exp/beginner&lt;/code&gt; tag, for example &lt;a href=&#34;https://github.com/containerd/containerd/issues?q=is%3Aissue+is%3Aopen+label%3Aexp%2Fbeginner&#34;&gt;containerd/containerd beginner issues.&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;See our documentation on &lt;a href=&#34;https://containerd.io&#34;&gt;containerd.io&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/containerd/containerd/main/docs/ops.md&#34;&gt;for ops and admins&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/containerd/containerd/main/docs/namespaces.md&#34;&gt;namespaces&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/containerd/containerd/main/docs/client-opts.md&#34;&gt;client options&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See how to build containerd from source at &lt;a href=&#34;https://raw.githubusercontent.com/containerd/containerd/main/BUILDING.md&#34;&gt;BUILDING&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you are interested in trying out containerd see our example at &lt;a href=&#34;https://raw.githubusercontent.com/containerd/containerd/main/docs/getting-started.md&#34;&gt;Getting Started&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Nightly builds&lt;/h2&gt; &#xA;&lt;p&gt;There are nightly builds available for download &lt;a href=&#34;https://github.com/containerd/containerd/actions?query=workflow%3ANightly&#34;&gt;here&lt;/a&gt;. Binaries are generated from &lt;code&gt;main&lt;/code&gt; branch every night for &lt;code&gt;Linux&lt;/code&gt; and &lt;code&gt;Windows&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Please be aware: nightly builds might have critical bugs, it&#39;s not recommended for use in production and no support provided.&lt;/p&gt; &#xA;&lt;h2&gt;Kubernetes (k8s) CI Dashboard Group&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://testgrid.k8s.io/containerd&#34;&gt;k8s CI dashboard group for containerd&lt;/a&gt; contains test results regarding the health of kubernetes when run against main and a number of containerd release branches.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://testgrid.k8s.io/containerd-periodic&#34;&gt;containerd-periodics&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Runtime Requirements&lt;/h2&gt; &#xA;&lt;p&gt;Runtime requirements for containerd are very minimal. Most interactions with the Linux and Windows container feature sets are handled via &lt;a href=&#34;https://github.com/opencontainers/runc&#34;&gt;runc&lt;/a&gt; and/or OS-specific libraries (e.g. &lt;a href=&#34;https://github.com/Microsoft/hcsshim&#34;&gt;hcsshim&lt;/a&gt; for Microsoft). The current required version of &lt;code&gt;runc&lt;/code&gt; is described in &lt;a href=&#34;https://raw.githubusercontent.com/containerd/containerd/main/docs/RUNC.md&#34;&gt;RUNC.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;There are specific features used by containerd core code and snapshotters that will require a minimum kernel version on Linux. With the understood caveat of distro kernel versioning, a reasonable starting point for Linux is a minimum 4.x kernel version.&lt;/p&gt; &#xA;&lt;p&gt;The overlay filesystem snapshotter, used by default, uses features that were finalized in the 4.x kernel series. If you choose to use btrfs, there may be more flexibility in kernel version (minimum recommended is 3.18), but will require the btrfs kernel module and btrfs tools to be installed on your Linux distribution.&lt;/p&gt; &#xA;&lt;p&gt;To use Linux checkpoint and restore features, you will need &lt;code&gt;criu&lt;/code&gt; installed on your system. See more details in &lt;a href=&#34;https://raw.githubusercontent.com/containerd/containerd/main/#checkpoint-and-restore&#34;&gt;Checkpoint and Restore&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Build requirements for developers are listed in &lt;a href=&#34;https://raw.githubusercontent.com/containerd/containerd/main/BUILDING.md&#34;&gt;BUILDING&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Supported Registries&lt;/h2&gt; &#xA;&lt;p&gt;Any registry which is compliant with the &lt;a href=&#34;https://github.com/opencontainers/distribution-spec&#34;&gt;OCI Distribution Specification&lt;/a&gt; is supported by containerd.&lt;/p&gt; &#xA;&lt;p&gt;For configuring registries, see &lt;a href=&#34;https://raw.githubusercontent.com/containerd/containerd/main/docs/hosts.md&#34;&gt;registry host configuration documentation&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;h3&gt;Client&lt;/h3&gt; &#xA;&lt;p&gt;containerd offers a full client package to help you integrate containerd into your platform.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;&#xA;import (&#xA;  &#34;context&#34;&#xA;&#xA;  &#34;github.com/containerd/containerd&#34;&#xA;  &#34;github.com/containerd/containerd/cio&#34;&#xA;  &#34;github.com/containerd/containerd/namespaces&#34;&#xA;)&#xA;&#xA;&#xA;func main() {&#xA;&#x9;client, err := containerd.New(&#34;/run/containerd/containerd.sock&#34;)&#xA;&#x9;defer client.Close()&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Namespaces&lt;/h3&gt; &#xA;&lt;p&gt;Namespaces allow multiple consumers to use the same containerd without conflicting with each other. It has the benefit of sharing content while maintaining separation with containers and images.&lt;/p&gt; &#xA;&lt;p&gt;To set a namespace for requests to the API:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;context = context.Background()&#xA;// create a context for docker&#xA;docker = namespaces.WithNamespace(context, &#34;docker&#34;)&#xA;&#xA;containerd, err := client.NewContainer(docker, &#34;id&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To set a default namespace on the client:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;client, err := containerd.New(address, containerd.WithDefaultNamespace(&#34;docker&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Distribution&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// pull an image&#xA;image, err := client.Pull(context, &#34;docker.io/library/redis:latest&#34;)&#xA;&#xA;// push an image&#xA;err := client.Push(context, &#34;docker.io/library/redis:latest&#34;, image.Target())&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Containers&lt;/h3&gt; &#xA;&lt;p&gt;In containerd, a container is a metadata object. Resources such as an OCI runtime specification, image, root filesystem, and other metadata can be attached to a container.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;redis, err := client.NewContainer(context, &#34;redis-master&#34;)&#xA;defer redis.Delete(context)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;OCI Runtime Specification&lt;/h3&gt; &#xA;&lt;p&gt;containerd fully supports the OCI runtime specification for running containers. We have built-in functions to help you generate runtime specifications based on images as well as custom parameters.&lt;/p&gt; &#xA;&lt;p&gt;You can specify options when creating a container about how to modify the specification.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;redis, err := client.NewContainer(context, &#34;redis-master&#34;, containerd.WithNewSpec(oci.WithImageConfig(image)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Root Filesystems&lt;/h3&gt; &#xA;&lt;p&gt;containerd allows you to use overlay or snapshot filesystems with your containers. It comes with built-in support for overlayfs and btrfs.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// pull an image and unpack it into the configured snapshotter&#xA;image, err := client.Pull(context, &#34;docker.io/library/redis:latest&#34;, containerd.WithPullUnpack)&#xA;&#xA;// allocate a new RW root filesystem for a container based on the image&#xA;redis, err := client.NewContainer(context, &#34;redis-master&#34;,&#xA;&#x9;containerd.WithNewSnapshot(&#34;redis-rootfs&#34;, image),&#xA;&#x9;containerd.WithNewSpec(oci.WithImageConfig(image)),&#xA;)&#xA;&#xA;// use a readonly filesystem with multiple containers&#xA;for i := 0; i &amp;lt; 10; i++ {&#xA;&#x9;id := fmt.Sprintf(&#34;id-%s&#34;, i)&#xA;&#x9;container, err := client.NewContainer(ctx, id,&#xA;&#x9;&#x9;containerd.WithNewSnapshotView(id, image),&#xA;&#x9;&#x9;containerd.WithNewSpec(oci.WithImageConfig(image)),&#xA;&#x9;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Tasks&lt;/h3&gt; &#xA;&lt;p&gt;Taking a container object and turning it into a runnable process on a system is done by creating a new &lt;code&gt;Task&lt;/code&gt; from the container. A task represents the runnable object within containerd.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// create a new task&#xA;task, err := redis.NewTask(context, cio.NewCreator(cio.WithStdio))&#xA;defer task.Delete(context)&#xA;&#xA;// the task is now running and has a pid that can be used to setup networking&#xA;// or other runtime settings outside of containerd&#xA;pid := task.Pid()&#xA;&#xA;// start the redis-server process inside the container&#xA;err := task.Start(context)&#xA;&#xA;// wait for the task to exit and get the exit status&#xA;status, err := task.Wait(context)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Checkpoint and Restore&lt;/h3&gt; &#xA;&lt;p&gt;If you have &lt;a href=&#34;https://criu.org/Main_Page&#34;&gt;criu&lt;/a&gt; installed on your machine you can checkpoint and restore containers and their tasks. This allows you to clone and/or live migrate containers to other machines.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// checkpoint the task then push it to a registry&#xA;checkpoint, err := task.Checkpoint(context)&#xA;&#xA;err := client.Push(context, &#34;myregistry/checkpoints/redis:master&#34;, checkpoint)&#xA;&#xA;// on a new machine pull the checkpoint and restore the redis container&#xA;checkpoint, err := client.Pull(context, &#34;myregistry/checkpoints/redis:master&#34;)&#xA;&#xA;redis, err = client.NewContainer(context, &#34;redis-master&#34;, containerd.WithNewSnapshot(&#34;redis-rootfs&#34;, checkpoint))&#xA;defer container.Delete(context)&#xA;&#xA;task, err = redis.NewTask(context, cio.NewCreator(cio.WithStdio), containerd.WithTaskCheckpoint(checkpoint))&#xA;defer task.Delete(context)&#xA;&#xA;err := task.Start(context)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Snapshot Plugins&lt;/h3&gt; &#xA;&lt;p&gt;In addition to the built-in Snapshot plugins in containerd, additional external plugins can be configured using GRPC. An external plugin is made available using the configured name and appears as a plugin alongside the built-in ones.&lt;/p&gt; &#xA;&lt;p&gt;To add an external snapshot plugin, add the plugin to containerd&#39;s config file (by default at &lt;code&gt;/etc/containerd/config.toml&lt;/code&gt;). The string following &lt;code&gt;proxy_plugin.&lt;/code&gt; will be used as the name of the snapshotter and the address should refer to a socket with a GRPC listener serving containerd&#39;s Snapshot GRPC API. Remember to restart containerd for any configuration changes to take effect.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;[proxy_plugins]&#xA;  [proxy_plugins.customsnapshot]&#xA;    type = &#34;snapshot&#34;&#xA;    address =  &#34;/var/run/mysnapshotter.sock&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/containerd/containerd/main/docs/PLUGINS.md&#34;&gt;PLUGINS.md&lt;/a&gt; for how to create plugins&lt;/p&gt; &#xA;&lt;h3&gt;Releases and API Stability&lt;/h3&gt; &#xA;&lt;p&gt;Please see &lt;a href=&#34;https://raw.githubusercontent.com/containerd/containerd/main/RELEASES.md&#34;&gt;RELEASES.md&lt;/a&gt; for details on versioning and stability of containerd components.&lt;/p&gt; &#xA;&lt;p&gt;Downloadable 64-bit Intel/AMD binaries of all official releases are available on our &lt;a href=&#34;https://github.com/containerd/containerd/releases&#34;&gt;releases page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For other architectures and distribution support, you will find that many Linux distributions package their own containerd and provide it across several architectures, such as &lt;a href=&#34;https://launchpad.net/ubuntu/bionic/+package/containerd&#34;&gt;Canonical&#39;s Ubuntu packaging&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Enabling command auto-completion&lt;/h4&gt; &#xA;&lt;p&gt;Starting with containerd 1.4, the urfave client feature for auto-creation of bash and zsh autocompletion data is enabled. To use the autocomplete feature in a bash shell for example, source the autocomplete/ctr file in your &lt;code&gt;.bashrc&lt;/code&gt;, or manually like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ source ./contrib/autocomplete/ctr&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Distribution of &lt;code&gt;ctr&lt;/code&gt; autocomplete for bash and zsh&lt;/h4&gt; &#xA;&lt;p&gt;For bash, copy the &lt;code&gt;contrib/autocomplete/ctr&lt;/code&gt; script into &lt;code&gt;/etc/bash_completion.d/&lt;/code&gt; and rename it to &lt;code&gt;ctr&lt;/code&gt;. The &lt;code&gt;zsh_autocomplete&lt;/code&gt; file is also available and can be used similarly for zsh users.&lt;/p&gt; &#xA;&lt;p&gt;Provide documentation to users to &lt;code&gt;source&lt;/code&gt; this file into their shell if you don&#39;t place the autocomplete file in a location where it is automatically loaded for the user&#39;s shell environment.&lt;/p&gt; &#xA;&lt;h3&gt;CRI&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;cri&lt;/code&gt; is a &lt;a href=&#34;https://containerd.io/&#34;&gt;containerd&lt;/a&gt; plugin implementation of the Kubernetes &lt;a href=&#34;https://github.com/kubernetes/cri-api/raw/master/pkg/apis/runtime/v1/api.proto&#34;&gt;container runtime interface (CRI)&lt;/a&gt;. With it, you are able to use containerd as the container runtime for a Kubernetes cluster.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/containerd/containerd/main/docs/cri/cri.png&#34; alt=&#34;cri&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;CRI Status&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;cri&lt;/code&gt; is a native plugin of containerd. Since containerd 1.1, the cri plugin is built into the release binaries and enabled by default.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; As of containerd 1.5, the &lt;code&gt;cri&lt;/code&gt; plugin is merged into the containerd/containerd repo. For example, the source code previously stored under &lt;a href=&#34;https://github.com/containerd/cri/tree/release/1.4/pkg&#34;&gt;&lt;code&gt;containerd/cri/pkg&lt;/code&gt;&lt;/a&gt; was moved to &lt;a href=&#34;https://github.com/containerd/containerd/tree/main/pkg/cri&#34;&gt;&lt;code&gt;containerd/containerd/pkg/cri&lt;/code&gt; package&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;The &lt;code&gt;cri&lt;/code&gt; plugin has reached GA status, representing that it is:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Feature complete&lt;/li&gt; &#xA; &lt;li&gt;Works with Kubernetes 1.10 and above&lt;/li&gt; &#xA; &lt;li&gt;Passes all &lt;a href=&#34;https://github.com/kubernetes/community/raw/master/contributors/devel/sig-node/cri-validation.md&#34;&gt;CRI validation tests&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Passes all &lt;a href=&#34;https://github.com/kubernetes/community/raw/master/contributors/devel/sig-node/e2e-node-tests.md&#34;&gt;node e2e tests&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Passes all &lt;a href=&#34;https://github.com/kubernetes/community/raw/master/contributors/devel/sig-testing/e2e-tests.md&#34;&gt;e2e tests&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See results on the containerd k8s &lt;a href=&#34;https://k8s-testgrid.appspot.com/sig-node-containerd&#34;&gt;test dashboard&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Validating Your &lt;code&gt;cri&lt;/code&gt; Setup&lt;/h4&gt; &#xA;&lt;p&gt;A Kubernetes incubator project, &lt;a href=&#34;https://github.com/kubernetes-sigs/cri-tools&#34;&gt;cri-tools&lt;/a&gt;, includes programs for exercising CRI implementations. More importantly, cri-tools includes the program &lt;code&gt;critest&lt;/code&gt; which is used for running &lt;a href=&#34;https://github.com/kubernetes/community/raw/master/contributors/devel/sig-node/cri-validation.md&#34;&gt;CRI Validation Testing&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;CRI Guides&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/containerd/containerd/main/contrib/ansible/README.md&#34;&gt;Installing with Ansible and Kubeadm&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/containerd/containerd/main/docs/getting-started.md&#34;&gt;For Non-Ansible Users, Preforming a Custom Installation Using the Release Tarball and Kubeadm&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/containerd/containerd/main/docs/cri/testing.md&#34;&gt;CRI Plugin Testing Guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/containerd/containerd/main/docs/cri/crictl.md&#34;&gt;Debugging Pods, Containers, and Images with &lt;code&gt;crictl&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/containerd/containerd/main/docs/cri/config.md&#34;&gt;Configuring &lt;code&gt;cri&lt;/code&gt; Plugins&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/containerd/containerd/raw/main/docs/man/containerd-config.8.md&#34;&gt;Configuring containerd&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Communication&lt;/h3&gt; &#xA;&lt;p&gt;For async communication and long-running discussions please use issues and pull requests on the GitHub repo. This will be the best place to discuss design and implementation.&lt;/p&gt; &#xA;&lt;p&gt;For sync communication catch us in the &lt;code&gt;#containerd&lt;/code&gt; and &lt;code&gt;#containerd-dev&lt;/code&gt; Slack channels on Cloud Native Computing Foundation&#39;s (CNCF) Slack - &lt;code&gt;cloud-native.slack.com&lt;/code&gt;. Everyone is welcome to join and chat. &lt;a href=&#34;https://slack.cncf.io&#34;&gt;Get Invite to CNCF Slack.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Security audit&lt;/h3&gt; &#xA;&lt;p&gt;Security audits for the containerd project are hosted on our website. Please see the &lt;a href=&#34;https://containerd.io/security/&#34;&gt;security page at containerd.io&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h3&gt;Reporting security issues&lt;/h3&gt; &#xA;&lt;p&gt;Please follow the instructions at &lt;a href=&#34;https://github.com/containerd/project/raw/main/SECURITY.md#reporting-a-vulnerability&#34;&gt;containerd/project&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Licenses&lt;/h2&gt; &#xA;&lt;p&gt;The containerd codebase is released under the &lt;a href=&#34;https://raw.githubusercontent.com/containerd/containerd/main/LICENSE&#34;&gt;Apache 2.0 license&lt;/a&gt;. The README.md file and files in the &#34;docs&#34; folder are licensed under the Creative Commons Attribution 4.0 International License. You may obtain a copy of the license, titled CC-BY-4.0, at &lt;a href=&#34;http://creativecommons.org/licenses/by/4.0/&#34;&gt;http://creativecommons.org/licenses/by/4.0/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Project details&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;containerd&lt;/strong&gt; is the primary open source project within the broader containerd GitHub organization. However, all projects within the repo have common maintainership, governance, and contributing guidelines which are stored in a &lt;code&gt;project&lt;/code&gt; repository commonly for all containerd projects.&lt;/p&gt; &#xA;&lt;p&gt;Please find all these core project documents, including the:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/containerd/project/raw/main/GOVERNANCE.md&#34;&gt;Project governance&lt;/a&gt;,&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/containerd/project/raw/main/MAINTAINERS&#34;&gt;Maintainers&lt;/a&gt;,&lt;/li&gt; &#xA; &lt;li&gt;and &lt;a href=&#34;https://github.com/containerd/project/raw/main/CONTRIBUTING.md&#34;&gt;Contributing guidelines&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;information in our &lt;a href=&#34;https://github.com/containerd/project&#34;&gt;&lt;code&gt;containerd/project&lt;/code&gt;&lt;/a&gt; repository.&lt;/p&gt; &#xA;&lt;h2&gt;Adoption&lt;/h2&gt; &#xA;&lt;p&gt;Interested to see who is using containerd? Are you using containerd in a project? Please add yourself via pull request to our &lt;a href=&#34;https://raw.githubusercontent.com/containerd/containerd/main/ADOPTERS.md&#34;&gt;ADOPTERS.md&lt;/a&gt; file.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>spf13/cobra</title>
    <updated>2023-07-30T01:55:52Z</updated>
    <id>tag:github.com,2023-07-30:/spf13/cobra</id>
    <link href="https://github.com/spf13/cobra" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Commander for modern Go CLI interactions&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/spf13/cobra/main/assets/CobraMain.png&#34; alt=&#34;cobra logo&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Cobra is a library for creating powerful modern CLI applications.&lt;/p&gt; &#xA;&lt;p&gt;Cobra is used in many Go projects such as &lt;a href=&#34;https://kubernetes.io/&#34;&gt;Kubernetes&lt;/a&gt;, &lt;a href=&#34;https://gohugo.io&#34;&gt;Hugo&lt;/a&gt;, and &lt;a href=&#34;https://github.com/cli/cli&#34;&gt;GitHub CLI&lt;/a&gt; to name a few. &lt;a href=&#34;https://raw.githubusercontent.com/spf13/cobra/main/site/content/projects_using_cobra.md&#34;&gt;This list&lt;/a&gt; contains a more extensive list of projects using Cobra.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/spf13/cobra/actions?query=workflow%3ATest&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/spf13/cobra/test.yml?branch=main&amp;amp;longCache=true&amp;amp;label=Test&amp;amp;logo=github%20actions&amp;amp;logoColor=fff&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pkg.go.dev/github.com/spf13/cobra&#34;&gt;&lt;img src=&#34;https://pkg.go.dev/badge/github.com/spf13/cobra.svg?sanitize=true&#34; alt=&#34;Go Reference&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/spf13/cobra&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/spf13/cobra&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gophers.slack.com/archives/CD3LP1199&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Slack-cobra-brightgreen&#34; alt=&#34;Slack&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Overview&lt;/h1&gt; &#xA;&lt;p&gt;Cobra is a library providing a simple interface to create powerful modern CLI interfaces similar to git &amp;amp; go tools.&lt;/p&gt; &#xA;&lt;p&gt;Cobra provides:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Easy subcommand-based CLIs: &lt;code&gt;app server&lt;/code&gt;, &lt;code&gt;app fetch&lt;/code&gt;, etc.&lt;/li&gt; &#xA; &lt;li&gt;Fully POSIX-compliant flags (including short &amp;amp; long versions)&lt;/li&gt; &#xA; &lt;li&gt;Nested subcommands&lt;/li&gt; &#xA; &lt;li&gt;Global, local and cascading flags&lt;/li&gt; &#xA; &lt;li&gt;Intelligent suggestions (&lt;code&gt;app srver&lt;/code&gt;... did you mean &lt;code&gt;app server&lt;/code&gt;?)&lt;/li&gt; &#xA; &lt;li&gt;Automatic help generation for commands and flags&lt;/li&gt; &#xA; &lt;li&gt;Grouping help for subcommands&lt;/li&gt; &#xA; &lt;li&gt;Automatic help flag recognition of &lt;code&gt;-h&lt;/code&gt;, &lt;code&gt;--help&lt;/code&gt;, etc.&lt;/li&gt; &#xA; &lt;li&gt;Automatically generated shell autocomplete for your application (bash, zsh, fish, powershell)&lt;/li&gt; &#xA; &lt;li&gt;Automatically generated man pages for your application&lt;/li&gt; &#xA; &lt;li&gt;Command aliases so you can change things without breaking them&lt;/li&gt; &#xA; &lt;li&gt;The flexibility to define your own help, usage, etc.&lt;/li&gt; &#xA; &lt;li&gt;Optional seamless integration with &lt;a href=&#34;https://github.com/spf13/viper&#34;&gt;viper&lt;/a&gt; for 12-factor apps&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Concepts&lt;/h1&gt; &#xA;&lt;p&gt;Cobra is built on a structure of commands, arguments &amp;amp; flags.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Commands&lt;/strong&gt; represent actions, &lt;strong&gt;Args&lt;/strong&gt; are things and &lt;strong&gt;Flags&lt;/strong&gt; are modifiers for those actions.&lt;/p&gt; &#xA;&lt;p&gt;The best applications read like sentences when used, and as a result, users intuitively know how to interact with them.&lt;/p&gt; &#xA;&lt;p&gt;The pattern to follow is &lt;code&gt;APPNAME VERB NOUN --ADJECTIVE&lt;/code&gt; or &lt;code&gt;APPNAME COMMAND ARG --FLAG&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;A few good real world examples may better illustrate this point.&lt;/p&gt; &#xA;&lt;p&gt;In the following example, &#39;server&#39; is a command, and &#39;port&#39; is a flag:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;hugo server --port=1313&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In this command we are telling Git to clone the url bare.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone URL --bare&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Commands&lt;/h2&gt; &#xA;&lt;p&gt;Command is the central point of the application. Each interaction that the application supports will be contained in a Command. A command can have children commands and optionally run an action.&lt;/p&gt; &#xA;&lt;p&gt;In the example above, &#39;server&#39; is the command.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/spf13/cobra#Command&#34;&gt;More about cobra.Command&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Flags&lt;/h2&gt; &#xA;&lt;p&gt;A flag is a way to modify the behavior of a command. Cobra supports fully POSIX-compliant flags as well as the Go &lt;a href=&#34;https://golang.org/pkg/flag/&#34;&gt;flag package&lt;/a&gt;. A Cobra command can define flags that persist through to children commands and flags that are only available to that command.&lt;/p&gt; &#xA;&lt;p&gt;In the example above, &#39;port&#39; is the flag.&lt;/p&gt; &#xA;&lt;p&gt;Flag functionality is provided by the &lt;a href=&#34;https://github.com/spf13/pflag&#34;&gt;pflag library&lt;/a&gt;, a fork of the flag standard library which maintains the same interface while adding POSIX compliance.&lt;/p&gt; &#xA;&lt;h1&gt;Installing&lt;/h1&gt; &#xA;&lt;p&gt;Using Cobra is easy. First, use &lt;code&gt;go get&lt;/code&gt; to install the latest version of the library.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;go get -u github.com/spf13/cobra@latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Next, include Cobra in your application:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;import &#34;github.com/spf13/cobra&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Usage&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;cobra-cli&lt;/code&gt; is a command line program to generate cobra applications and command files. It will bootstrap your application scaffolding to rapidly develop a Cobra-based application. It is the easiest way to incorporate Cobra into your application.&lt;/p&gt; &#xA;&lt;p&gt;It can be installed by running:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;go install github.com/spf13/cobra-cli@latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For complete details on using the Cobra-CLI generator, please read &lt;a href=&#34;https://github.com/spf13/cobra-cli/raw/main/README.md&#34;&gt;The Cobra Generator README&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;For complete details on using the Cobra library, please read the &lt;a href=&#34;https://raw.githubusercontent.com/spf13/cobra/main/site/content/user_guide.md&#34;&gt;The Cobra User Guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;Cobra is released under the Apache 2.0 license. See &lt;a href=&#34;https://raw.githubusercontent.com/spf13/cobra/main/LICENSE.txt&#34;&gt;LICENSE.txt&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>smartcontractkit/chainlink</title>
    <updated>2023-07-30T01:55:52Z</updated>
    <id>tag:github.com,2023-07-30:/smartcontractkit/chainlink</id>
    <link href="https://github.com/smartcontractkit/chainlink" rel="alternate"></link>
    <summary type="html">&lt;p&gt;node of the decentralized oracle network, bridging on and off-chain computation&lt;/p&gt;&lt;hr&gt;&lt;br&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://chain.link&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/smartcontractkit/chainlink/develop/docs/logo-chainlink-blue.svg?sanitize=true&#34; width=&#34;225&#34; alt=&#34;Chainlink logo&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://hub.docker.com/r/smartcontract/chainlink/tags&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/tag/smartcontractkit/chainlink?style=flat-square&#34; alt=&#34;GitHub tag (latest SemVer)&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/smartcontractkit/chainlink/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/smartcontractkit/chainlink?style=flat-square&#34; alt=&#34;GitHub license&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/smartcontractkit/chainlink/actions?query=workflow%3AChangelog&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/workflow/status/smartcontractkit/chainlink/Changelog?style=flat-square&amp;amp;label=github-actions&#34; alt=&#34;GitHub workflow changelog&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/smartcontractkit/chainlink/graphs/contributors&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/contributors-anon/smartcontractkit/chainlink?style=flat-square&#34; alt=&#34;GitHub contributors&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/smartcontractkit/chainlink/commits/master&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/commit-activity/y/smartcontractkit/chainlink?style=flat-square&#34; alt=&#34;GitHub commit activity&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://docs.chain.link/&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1?label=docs&amp;amp;message=latest&amp;amp;color=blue&#34; alt=&#34;Official documentation&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://chain.link/&#34;&gt;Chainlink&lt;/a&gt; expands the capabilities of smart contracts by enabling access to real-world data and off-chain computation while maintaining the security and reliability guarantees inherent to blockchain technology.&lt;/p&gt; &#xA;&lt;p&gt;This repo contains the Chainlink core node and contracts. The core node is the bundled binary available to be run by node operators participating in a &lt;a href=&#34;https://link.smartcontract.com/whitepaper&#34;&gt;decentralized oracle network&lt;/a&gt;. All major release versions have pre-built docker images available for download from the &lt;a href=&#34;https://hub.docker.com/r/smartcontract/chainlink/tags&#34;&gt;Chainlink dockerhub&lt;/a&gt;. If you are interested in contributing please see our &lt;a href=&#34;https://raw.githubusercontent.com/smartcontractkit/chainlink/develop/docs/CONTRIBUTING.md&#34;&gt;contribution guidelines&lt;/a&gt;. If you are here to report a bug or request a feature, please &lt;a href=&#34;https://github.com/smartcontractkit/chainlink/issues&#34;&gt;check currently open Issues&lt;/a&gt;. For more information about how to get started with Chainlink, check our &lt;a href=&#34;https://docs.chain.link/&#34;&gt;official documentation&lt;/a&gt;. Resources for Solidity developers can be found in the &lt;a href=&#34;https://github.com/smartcontractkit/hardhat-starter-kit&#34;&gt;Chainlink Hardhat Box&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Community&lt;/h2&gt; &#xA;&lt;p&gt;Chainlink has an active and ever growing community. &lt;a href=&#34;https://discordapp.com/invite/aSK4zew&#34;&gt;Discord&lt;/a&gt; is the primary communication channel used for day to day communication, answering development questions, and aggregating Chainlink related content. Take a look at the &lt;a href=&#34;https://raw.githubusercontent.com/smartcontractkit/chainlink/develop/docs/COMMUNITY.md&#34;&gt;community docs&lt;/a&gt; for more information regarding Chainlink social accounts, news, and networking.&lt;/p&gt; &#xA;&lt;h2&gt;Build Chainlink&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://golang.org/doc/install&#34;&gt;Install Go 1.20&lt;/a&gt;, and add your GOPATH&#39;s &lt;a href=&#34;https://golang.org/doc/code.html#GOPATH&#34;&gt;bin directory to your PATH&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Example Path for macOS &lt;code&gt;export PATH=$GOPATH/bin:$PATH&lt;/code&gt; &amp;amp; &lt;code&gt;export GOPATH=/Users/$USER/go&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Install &lt;a href=&#34;https://nodejs.org/en/download/package-manager/&#34;&gt;NodeJS v16&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://pnpm.io/installation#using-npm&#34;&gt;pnpm via npm&lt;/a&gt;. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;It might be easier long term to use &lt;a href=&#34;https://nodejs.org/en/download/package-manager/#nvm&#34;&gt;nvm&lt;/a&gt; to switch between node versions for different projects. For example, assuming $NODE_VERSION was set to a valid version of NodeJS, you could run: &lt;code&gt;nvm install $NODE_VERSION &amp;amp;&amp;amp; nvm use $NODE_VERSION&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Install &lt;a href=&#34;https://wiki.postgresql.org/wiki/Detailed_installation_guides&#34;&gt;Postgres (&amp;gt;= 11.x and &amp;lt;= 15.x)&lt;/a&gt;. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;You should &lt;a href=&#34;https://www.postgresql.org/docs/12/ssl-tcp.html&#34;&gt;configure Postgres&lt;/a&gt; to use SSL connection (or for testing you can set &lt;code&gt;?sslmode=disable&lt;/code&gt; in your Postgres query string).&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Ensure you have Python 3 installed (this is required by &lt;a href=&#34;https://github.com/crytic/solc-select&#34;&gt;solc-select&lt;/a&gt; which is needed to compile solidity contracts)&lt;/li&gt; &#xA; &lt;li&gt;Download Chainlink: &lt;code&gt;git clone https://github.com/smartcontractkit/chainlink &amp;amp;&amp;amp; cd chainlink&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Build and install Chainlink: &lt;code&gt;make install&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run the node: &lt;code&gt;chainlink help&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;For the latest information on setting up a development environment, see the &lt;a href=&#34;https://github.com/smartcontractkit/chainlink/wiki/Development-Setup-Guide&#34;&gt;Development Setup Guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Apple Silicon - ARM64&lt;/h3&gt; &#xA;&lt;p&gt;Native builds on the Apple Silicon should work out of the box, but the Docker image requires more consideration.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker build . -t chainlink-develop:latest -f ./core/chainlink.Dockerfile&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Ethereum Execution Client Requirements&lt;/h3&gt; &#xA;&lt;p&gt;In order to run the Chainlink node you must have access to a running Ethereum node with an open websocket connection. Any Ethereum based network will work once you&#39;ve &lt;a href=&#34;https://github.com/smartcontractkit/chainlink#configure&#34;&gt;configured&lt;/a&gt; the chain ID. Ethereum node versions currently tested and supported:&lt;/p&gt; &#xA;&lt;p&gt;[Officially supported]&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/openethereum/openethereum&#34;&gt;Parity/Openethereum&lt;/a&gt; (NOTE: Parity is deprecated and support for this client may be removed in future)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ethereum/go-ethereum/releases&#34;&gt;Geth&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;[Supported but broken] These clients are supported by Chainlink, but have bugs that prevent Chainlink from working reliably on these execution clients.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/NethermindEth/nethermind&#34;&gt;Nethermind&lt;/a&gt; Blocking issues: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;del&gt;&lt;a href=&#34;https://github.com/NethermindEth/nethermind/issues/4384&#34;&gt;https://github.com/NethermindEth/nethermind/issues/4384&lt;/a&gt;&lt;/del&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hyperledger/besu&#34;&gt;Besu&lt;/a&gt; Blocking issues: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/hyperledger/besu/issues/4212&#34;&gt;https://github.com/hyperledger/besu/issues/4212&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;del&gt;&lt;a href=&#34;https://github.com/hyperledger/besu/issues/4192&#34;&gt;https://github.com/hyperledger/besu/issues/4192&lt;/a&gt;&lt;/del&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;del&gt;&lt;a href=&#34;https://github.com/hyperledger/besu/issues/4114&#34;&gt;https://github.com/hyperledger/besu/issues/4114&lt;/a&gt;&lt;/del&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ledgerwatch/erigon&#34;&gt;Erigon&lt;/a&gt; Blocking issues: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/ledgerwatch/erigon/discussions/4946&#34;&gt;https://github.com/ledgerwatch/erigon/discussions/4946&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/ledgerwatch/erigon/issues/4030#issuecomment-1113964017&#34;&gt;https://github.com/ledgerwatch/erigon/issues/4030#issuecomment-1113964017&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;We cannot recommend specific version numbers for ethereum nodes since the software is being continually updated, but you should usually try to run the latest version available.&lt;/p&gt; &#xA;&lt;h2&gt;Running a local Chainlink node&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: By default, chainlink will run in TLS mode. For local development you can disable this by using a &lt;code&gt;dev build&lt;/code&gt; using &lt;code&gt;make chainlink-dev&lt;/code&gt; and setting the TOML fields:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[WebServer]&#xA;SecureCookies = false&#xA;TLS.HTTPSPort = 0&#xA;&#xA;[Insecure]&#xA;DevWebServer = true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, you can generate self signed certificates using &lt;code&gt;tools/bin/self-signed-certs&lt;/code&gt; or &lt;a href=&#34;https://github.com/smartcontractkit/chainlink/wiki/Creating-Self-Signed-Certificates&#34;&gt;manually&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To start your Chainlink node, simply run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;chainlink node start&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default this will start on port 6688. You should be able to access the UI at &lt;a href=&#34;http://localhost:6688/&#34;&gt;http://localhost:6688/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Chainlink provides a remote CLI client as well as a UI. Once your node has started, you can open a new terminal window to use the CLI. You will need to log in to authorize the client first:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;chainlink admin login&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(You can also set &lt;code&gt;ADMIN_CREDENTIALS_FILE=/path/to/credentials/file&lt;/code&gt; in future if you like, to avoid having to login again).&lt;/p&gt; &#xA;&lt;p&gt;Now you can view your current jobs with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;chainlink jobs list&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To find out more about the Chainlink CLI, you can always run &lt;code&gt;chainlink help&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Check out the &lt;a href=&#34;https://docs.chain.link/&#34;&gt;doc&lt;/a&gt; pages on &lt;a href=&#34;https://docs.chain.link/docs/jobs/&#34;&gt;Jobs&lt;/a&gt; to learn more about how to create Jobs.&lt;/p&gt; &#xA;&lt;h3&gt;Configuration&lt;/h3&gt; &#xA;&lt;p&gt;Node configuration is managed by a combination of environment variables and direct setting via API/UI/CLI.&lt;/p&gt; &#xA;&lt;p&gt;Check the &lt;a href=&#34;https://docs.chain.link/docs/configuration-variables&#34;&gt;official documentation&lt;/a&gt; for more information on how to configure your node.&lt;/p&gt; &#xA;&lt;h3&gt;External Adapters&lt;/h3&gt; &#xA;&lt;p&gt;External adapters are what make Chainlink easily extensible, providing simple integration of custom computations and specialized APIs. A Chainlink node communicates with external adapters via a simple REST API.&lt;/p&gt; &#xA;&lt;p&gt;For more information on creating and using external adapters, please see our &lt;a href=&#34;https://docs.chain.link/docs/external-adapters&#34;&gt;external adapters page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;h3&gt;Running tests&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://pnpm.io/installation#using-npm&#34;&gt;Install pnpm via npm&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Install &lt;a href=&#34;https://github.com/fjl/gencodec&#34;&gt;gencodec&lt;/a&gt; and &lt;a href=&#34;https://stedolan.github.io/jq/download/&#34;&gt;jq&lt;/a&gt; to be able to run &lt;code&gt;go generate ./...&lt;/code&gt; and &lt;code&gt;make abigen&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Install mockery&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;code&gt;make mockery&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Using the &lt;code&gt;make&lt;/code&gt; command will install the correct version.&lt;/p&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;Build contracts:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pushd contracts&#xA;pnpm i&#xA;pnpm compile:native&#xA;popd&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;Generate and compile static assets:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;go generate ./...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;5&#34;&gt; &#xA; &lt;li&gt;Prepare your development environment:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;export CL_DATABASE_URL=postgresql://127.0.0.1:5432/chainlink_test?sslmode=disable&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: Other environment variables should not be set for all tests to pass&lt;/p&gt; &#xA;&lt;ol start=&#34;6&#34;&gt; &#xA; &lt;li&gt;Drop/Create test database and run migrations:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;make testdb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you do end up modifying the migrations for the database, you will need to rerun&lt;/p&gt; &#xA;&lt;ol start=&#34;7&#34;&gt; &#xA; &lt;li&gt;Run tests:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;go test -tags test ./...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Notes&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The &lt;code&gt;parallel&lt;/code&gt; flag can be used to limit CPU usage, for running tests in the background (&lt;code&gt;-parallel=4&lt;/code&gt;) - the default is &lt;code&gt;GOMAXPROCS&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;The &lt;code&gt;p&lt;/code&gt; flag can be used to limit the number of &lt;em&gt;packages&lt;/em&gt; tested concurrently, if they are interferring with one another (&lt;code&gt;-p=1&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;The &lt;code&gt;-short&lt;/code&gt; flag skips tests which depend on the database, for quickly spot checking simpler tests in around one minute&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Race Detector&lt;/h4&gt; &#xA;&lt;p&gt;As of Go 1.1, the runtime includes a data race detector, enabled with the &lt;code&gt;-race&lt;/code&gt; flag. This is used in CI via the &lt;code&gt;tools/bin/go_core_race_tests&lt;/code&gt; script. If the action detects a race, the artifact on the summary page will include &lt;code&gt;race.*&lt;/code&gt; files with detailed stack traces.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;em&gt;&lt;strong&gt;It will not issue false positives, so take its warnings seriously.&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;For local, targeted race detection, you can run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;GORACE=&#34;log_path=$PWD/race&#34; go test -race ./core/path/to/pkg -count 10&#xA;GORACE=&#34;log_path=$PWD/race&#34; go test -race ./core/path/to/pkg -count 100 -run TestFooBar/sub_test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://go.dev/doc/articles/race_detector&#34;&gt;https://go.dev/doc/articles/race_detector&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Fuzz tests&lt;/h4&gt; &#xA;&lt;p&gt;As of Go 1.18, fuzz tests &lt;code&gt;func FuzzXXX(*testing.F)&lt;/code&gt; are included as part of the normal test suite, so existing cases are executed with &lt;code&gt;go test&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Additionally, you can run active fuzzing to search for new cases:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;go test ./pkg/path -run=XXX -fuzz=FuzzTestName&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://go.dev/doc/fuzz/&#34;&gt;https://go.dev/doc/fuzz/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Go Modules&lt;/h3&gt; &#xA;&lt;p&gt;This repository contains three Go modules:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;flowchart RL&#xA;    github.com/smartcontractkit/chainlink/v2&#xA;    github.com/smartcontractkit/chainlink/integration-tests --&amp;gt; github.com/smartcontractkit/chainlink/v2&#xA;    github.com/smartcontractkit/chainlink/core/scripts --&amp;gt; github.com/smartcontractkit/chainlink/v2&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;integration-tests&lt;/code&gt; and &lt;code&gt;core/scripts&lt;/code&gt; modules import the root module using a relative replace in their &lt;code&gt;go.mod&lt;/code&gt; files, so dependency changes in the root &lt;code&gt;go.mod&lt;/code&gt; often require changes in those modules as well. After making a change, &lt;code&gt;go mod tidy&lt;/code&gt; can be run on all three modules using:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make gomodtidy&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Solidity&lt;/h3&gt; &#xA;&lt;p&gt;Inside the &lt;code&gt;contracts/&lt;/code&gt; directory:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install dependencies:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pnpm i&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Run tests:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pnpm test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;NOTE: Chainlink is currently in the process of migrating to Foundry and contains both Foundry and Hardhat tests in some versions. More information can be found here: &lt;a href=&#34;https://github.com/smartcontractkit/chainlink/raw/develop/contracts/foundry.md&#34;&gt;Chainlink Foundry Documentation&lt;/a&gt;. Any &#39;t.sol&#39; files associated with Foundry tests, contained within the src directories will be ignored by Hardhat.&lt;/p&gt; &#xA;&lt;h3&gt;Code Generation&lt;/h3&gt; &#xA;&lt;p&gt;Go generate is used to generate mocks in this project. Mocks are generated with &lt;a href=&#34;https://github.com/vektra/mockery&#34;&gt;mockery&lt;/a&gt; and live in core/internal/mocks.&lt;/p&gt; &#xA;&lt;h3&gt;Nix&lt;/h3&gt; &#xA;&lt;p&gt;A &lt;a href=&#34;https://nixos.wiki/wiki/Development_environment_with_nix-shell&#34;&gt;shell.nix&lt;/a&gt; is provided for use with the &lt;a href=&#34;https://nixos.org/&#34;&gt;Nix package manager&lt;/a&gt;, with optional &lt;a href=&#34;https://nixos.wiki/wiki/Flakes&#34;&gt;flakes&lt;/a&gt; support. It defines a declarative, reproducible development environment. Flakes version use deterministic, frozen (&lt;code&gt;flake.lock&lt;/code&gt;) dependencies, while non-flakes shell will use your channel&#39;s packages versions.&lt;/p&gt; &#xA;&lt;p&gt;To use it:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install &lt;a href=&#34;https://nixos.org/download.html&#34;&gt;nix package manager&lt;/a&gt; in your system.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Optionally, enable &lt;a href=&#34;https://nixos.wiki/wiki/Flakes#Enable_flakes&#34;&gt;flakes support&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Run &lt;code&gt;nix-shell&lt;/code&gt;. You will be put in shell containing all the dependencies.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;To use the flakes version, run &lt;code&gt;nix develop&lt;/code&gt; instead of &lt;code&gt;nix-shell&lt;/code&gt;. Optionally, &lt;code&gt;nix develop --command $SHELL&lt;/code&gt; will make use of your current shell instead of the default (bash).&lt;/li&gt; &#xA; &lt;li&gt;You can use &lt;code&gt;direnv&lt;/code&gt; to enable it automatically when &lt;code&gt;cd&lt;/code&gt;-ing into the folder; for that, enable &lt;a href=&#34;https://github.com/nix-community/nix-direnv&#34;&gt;nix-direnv&lt;/a&gt; and &lt;code&gt;use nix&lt;/code&gt; or &lt;code&gt;use flake&lt;/code&gt; on it.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Create a local postgres database:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;mkdir -p $PGDATA &amp;amp;&amp;amp; cd $PGDATA/&#xA;initdb&#xA;pg_ctl -l postgres.log -o &#34;--unix_socket_directories=&#39;$PWD&#39;&#34; start&#xA;createdb chainlink_test -h localhost&#xA;createuser --superuser --password chainlink -h localhost&#xA;# then type a test password, e.g.: chainlink, and set it in shell.nix CL_DATABASE_URL&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;When re-entering project, you can restart postgres: &lt;code&gt;cd $PGDATA; pg_ctl -l postgres.log -o &#34;--unix_socket_directories=&#39;$PWD&#39;&#34; start&lt;/code&gt; Now you can run tests or compile code as usual.&lt;/li&gt; &#xA; &lt;li&gt;When you&#39;re done, stop it: &lt;code&gt;cd $PGDATA; pg_ctl -o &#34;--unix_socket_directories=&#39;$PWD&#39;&#34; stop&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Tips&lt;/h3&gt; &#xA;&lt;p&gt;For more tips on how to build and test Chainlink, see our &lt;a href=&#34;https://github.com/smartcontractkit/chainlink/wiki/Development-Tips&#34;&gt;development tips page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Contributing&lt;/h3&gt; &#xA;&lt;p&gt;Chainlink&#39;s source code is &lt;a href=&#34;https://raw.githubusercontent.com/smartcontractkit/chainlink/develop/LICENSE&#34;&gt;licensed under the MIT License&lt;/a&gt;, and contributions are welcome.&lt;/p&gt; &#xA;&lt;p&gt;Please check out our &lt;a href=&#34;https://raw.githubusercontent.com/smartcontractkit/chainlink/develop/docs/CONTRIBUTING.md&#34;&gt;contributing guidelines&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;p&gt;Thank you!&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://choosealicense.com/licenses/mit/&#34;&gt;MIT&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>