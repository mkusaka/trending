<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-06-09T01:40:58Z</updated>
  <subtitle>Weekly Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Melkeydev/go-blueprint</title>
    <updated>2024-06-09T01:40:58Z</updated>
    <id>tag:github.com,2024-06-09:/Melkeydev/go-blueprint</id>
    <link href="https://github.com/Melkeydev/go-blueprint" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Go-blueprint allows users to spin up a quick Go project using a popular framework&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Melkeydev/go-blueprint/main/public/logo.png&#34; alt=&#34;logo&#34;&gt;&lt;/p&gt; &#xA;&lt;div style=&#34;text-align: center;&#34;&gt; &#xA; &lt;h1&gt; Introducing the Ultimate Golang Blueprint Library &lt;/h1&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;Go Blueprint is a CLI tool that allows users to spin up a Go project with the corresponding structure seamlessly. It also gives the option to integrate with one of the more popular Go frameworks (and the list is growing with new features)!&lt;/p&gt; &#xA;&lt;h3&gt;Why Would I use this?&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Easy to set up and install&lt;/li&gt; &#xA; &lt;li&gt;Have the entire Go structure already established&lt;/li&gt; &#xA; &lt;li&gt;Setting up a Go HTTP server (or Fasthttp with Fiber)&lt;/li&gt; &#xA; &lt;li&gt;Integrate with a popular frameworks&lt;/li&gt; &#xA; &lt;li&gt;Focus on the actual code of your application&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Melkeydev/go-blueprint/main/#install&#34;&gt;Install&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Melkeydev/go-blueprint/main/#frameworks-supported&#34;&gt;Frameworks Supported&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Melkeydev/go-blueprint/main/#database-support&#34;&gt;Database Support&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Melkeydev/go-blueprint/main/#advanced-features&#34;&gt;Advanced Features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Melkeydev/go-blueprint/main/#blueprint-ui&#34;&gt;Blueprint UI&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Melkeydev/go-blueprint/main/#usage-example&#34;&gt;Usage Example&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Melkeydev/go-blueprint/main/#github-stats&#34;&gt;GitHub Stats&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Melkeydev/go-blueprint/main/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a id=&#34;install&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt; &#xA; &lt;picture&gt; &#xA;  &lt;img src=&#34;https://raw.githubusercontent.com/Melkeydev/go-blueprint/main/public/install.gif?raw=true&#34; width=&#34;60px&#34; style=&#34;margin-right: 1px;&#34;&gt; &#xA; &lt;/picture&gt; Install &lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;go install github.com/melkeydev/go-blueprint@latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This installs a go binary that will automatically bind to your $GOPATH&lt;/p&gt; &#xA;&lt;p&gt;Then in a new terminal run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;go-blueprint create&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also use the provided flags to set up a project without interacting with the UI.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;go-blueprint create --name my-project --framework gin --driver postgres&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;code&gt;go-blueprint create -h&lt;/code&gt; for all the options and shorthands.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a id=&#34;frameworks-supported&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt; &#xA; &lt;picture&gt; &#xA;  &lt;img src=&#34;https://raw.githubusercontent.com/Melkeydev/go-blueprint/main/public/frameworks.gif?raw=true&#34; width=&#34;60px&#34; style=&#34;margin-right: 1px;&#34;&gt; &#xA; &lt;/picture&gt; Frameworks Supported &lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/go-chi/chi&#34;&gt;Chi&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/gin-gonic/gin&#34;&gt;Gin&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/gofiber/fiber&#34;&gt;Fiber&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/julienschmidt/httprouter&#34;&gt;HttpRouter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/gorilla/mux&#34;&gt;Gorilla/mux&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/labstack/echo&#34;&gt;Echo&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a id=&#34;database-support&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt; &#xA; &lt;picture&gt; &#xA;  &lt;img src=&#34;https://raw.githubusercontent.com/Melkeydev/go-blueprint/main/public/database.gif?raw=true&#34; width=&#34;45px&#34; style=&#34;margin-right: 15px;&#34;&gt; &#xA; &lt;/picture&gt; Database Support &lt;/h2&gt; &#xA;&lt;p&gt;Go Blueprint now offers enhanced database support, allowing you to choose your preferred database driver during project setup. Use the &lt;code&gt;--driver&lt;/code&gt; or &lt;code&gt;-d&lt;/code&gt; flag to specify the database driver you want to integrate into your project.&lt;/p&gt; &#xA;&lt;h3&gt;Supported Database Drivers&lt;/h3&gt; &#xA;&lt;p&gt;Choose from a variety of supported database drivers:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/go-sql-driver/mysql&#34;&gt;Mysql&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jackc/pgx/&#34;&gt;Postgres&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mattn/go-sqlite3&#34;&gt;Sqlite&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://go.mongodb.org/mongo-driver&#34;&gt;Mongo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/redis/go-redis&#34;&gt;Redis&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a id=&#34;advanced-features&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt; &#xA; &lt;picture&gt; &#xA;  &lt;img src=&#34;https://raw.githubusercontent.com/Melkeydev/go-blueprint/main/public/advanced.gif?raw=true&#34; width=&#34;70px&#34; style=&#34;margin-right: 1px;&#34;&gt; &#xA; &lt;/picture&gt; Advanced Features &lt;/h2&gt; &#xA;&lt;p&gt;Blueprint is focused on being as minimalistic as possible. That being said, we wanted to offer the ability to add other features people may want without bloating the overall experience.&lt;/p&gt; &#xA;&lt;p&gt;You can now use the &lt;code&gt;--advanced&lt;/code&gt; flag when running the &lt;code&gt;create&lt;/code&gt; command to get access to the following features. This is a multi-option prompt; one or more features can be used at the same time:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://htmx.org/&#34;&gt;HTMX&lt;/a&gt; support using &lt;a href=&#34;https://templ.guide/&#34;&gt;Templ&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;CI/CD workflow setup using &lt;a href=&#34;https://docs.github.com/en/actions&#34;&gt;Github Actions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pkg.go.dev/nhooyr.io/websocket&#34;&gt;Websocket&lt;/a&gt; sets up a websocket endpoint&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a id=&#34;blueprint-ui&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt; &#xA; &lt;picture&gt; &#xA;  &lt;img src=&#34;https://raw.githubusercontent.com/Melkeydev/go-blueprint/main/public/ui.gif?raw=true&#34; width=&#34;100px&#34; style=&#34;margin-right: 1px;&#34;&gt; &#xA; &lt;/picture&gt; Blueprint UI &lt;/h2&gt; &#xA;&lt;p&gt;Blueprint UI is a web application that allows you to create commands for the CLI and preview the structure of your project. You will be able to see directories and files that will be created upon command execution. Check it out at &lt;a href=&#34;https://go-blueprint.dev&#34;&gt;go-blueprint.dev&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a id=&#34;usage-example&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt; &#xA; &lt;picture&gt; &#xA;  &lt;img src=&#34;https://raw.githubusercontent.com/Melkeydev/go-blueprint/main/public/example.gif?raw=true&#34; width=&#34;60px&#34; style=&#34;margin-right: 1px;&#34;&gt; &#xA; &lt;/picture&gt; Usage Example &lt;/h2&gt; &#xA;&lt;p&gt;Here&#39;s an example of setting up a project with a specific database driver:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;go-blueprint create --name my-project --framework gin --driver postgres&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/Melkeydev/go-blueprint/main/public/blueprint_1.png&#34; alt=&#34;Starter Image&#34; width=&#34;800&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;Advanced features are accessible with the --advanced flag&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;go-blueprint create --advanced&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Advanced features can be enabled using the &lt;code&gt;--feature&lt;/code&gt; flag along with the &lt;code&gt;--advanced&lt;/code&gt; flag.&lt;/p&gt; &#xA;&lt;p&gt;For HTMX:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;go-blueprint create --advanced --feature htmx&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For the CI/CD workflow:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;go-blueprint create --advanced --feature githubaction&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For the websocket:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;go-blueprint create --advanced --feature websocket&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or all features at once:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;go-blueprint create --name my-project --framework chi --driver mysql --advanced --feature htmx --feature githubaction --feature websocket&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/Melkeydev/go-blueprint/main/public/blueprint_advanced.png&#34; alt=&#34;Advanced Options&#34; width=&#34;800&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Visit &lt;a href=&#34;https://docs.go-blueprint.dev&#34;&gt;documentation&lt;/a&gt; to learn more about blueprint and its features.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a id=&#34;github-stats&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt; &#xA; &lt;picture&gt; &#xA;  &lt;img src=&#34;https://raw.githubusercontent.com/Melkeydev/go-blueprint/main/public/stats.gif?raw=true&#34; width=&#34;45px&#34; style=&#34;margin-right: 10px;&#34;&gt; &#xA; &lt;/picture&gt; Github Stats &lt;/h2&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img alt=&#34;Alt&#34; src=&#34;https://repobeats.axiom.co/api/embed/7c4be18864d441f961be61186ce49b5471a9e7bf.svg?sanitize=true&#34; title=&#34;Repobeats analytics image&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;a id=&#34;license&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt; &#xA; &lt;picture&gt; &#xA;  &lt;img src=&#34;https://raw.githubusercontent.com/Melkeydev/go-blueprint/main/public/license.gif?raw=true&#34; width=&#34;50px&#34; style=&#34;margin-right: 1px;&#34;&gt; &#xA; &lt;/picture&gt; License &lt;/h2&gt; &#xA;&lt;p&gt;Licensed under &lt;a href=&#34;https://raw.githubusercontent.com/Melkeydev/go-blueprint/main/LICENSE&#34;&gt;MIT License&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>go-chi/chi</title>
    <updated>2024-06-09T01:40:58Z</updated>
    <id>tag:github.com,2024-06-09:/go-chi/chi</id>
    <link href="https://github.com/go-chi/chi" rel="alternate"></link>
    <summary type="html">&lt;p&gt;lightweight, idiomatic and composable router for building Go HTTP services&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;img alt=&#34;chi&#34; src=&#34;https://cdn.rawgit.com/go-chi/chi/master/_examples/chi.svg?sanitize=true&#34; width=&#34;220&#34;&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/go-chi/chi/v5&#34;&gt;&lt;img src=&#34;https://godoc.org/github.com/go-chi/chi?status.svg?sanitize=true&#34; alt=&#34;GoDoc Widget&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;chi&lt;/code&gt; is a lightweight, idiomatic and composable router for building Go HTTP services. It&#39;s especially good at helping you write large REST API services that are kept maintainable as your project grows and changes. &lt;code&gt;chi&lt;/code&gt; is built on the new &lt;code&gt;context&lt;/code&gt; package introduced in Go 1.7 to handle signaling, cancelation and request-scoped values across a handler chain.&lt;/p&gt; &#xA;&lt;p&gt;The focus of the project has been to seek out an elegant and comfortable design for writing REST API servers, written during the development of the Pressly API service that powers our public API service, which in turn powers all of our client-side applications.&lt;/p&gt; &#xA;&lt;p&gt;The key considerations of chi&#39;s design are: project structure, maintainability, standard http handlers (stdlib-only), developer productivity, and deconstructing a large system into many small parts. The core router &lt;code&gt;github.com/go-chi/chi&lt;/code&gt; is quite small (less than 1000 LOC), but we&#39;ve also included some useful/optional subpackages: &lt;a href=&#34;https://raw.githubusercontent.com/go-chi/chi/master/middleware&#34;&gt;middleware&lt;/a&gt;, &lt;a href=&#34;https://github.com/go-chi/render&#34;&gt;render&lt;/a&gt; and &lt;a href=&#34;https://github.com/go-chi/docgen&#34;&gt;docgen&lt;/a&gt;. We hope you enjoy it too!&lt;/p&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;go get -u github.com/go-chi/chi/v5&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Lightweight&lt;/strong&gt; - cloc&#39;d in ~1000 LOC for the chi router&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Fast&lt;/strong&gt; - yes, see &lt;a href=&#34;https://raw.githubusercontent.com/go-chi/chi/master/#benchmarks&#34;&gt;benchmarks&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;100% compatible with net/http&lt;/strong&gt; - use any http or middleware pkg in the ecosystem that is also compatible with &lt;code&gt;net/http&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Designed for modular/composable APIs&lt;/strong&gt; - middlewares, inline middlewares, route groups and sub-router mounting&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Context control&lt;/strong&gt; - built on new &lt;code&gt;context&lt;/code&gt; package, providing value chaining, cancellations and timeouts&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Robust&lt;/strong&gt; - in production at Pressly, Cloudflare, Heroku, 99Designs, and many others (see &lt;a href=&#34;https://github.com/go-chi/chi/issues/91&#34;&gt;discussion&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Doc generation&lt;/strong&gt; - &lt;code&gt;docgen&lt;/code&gt; auto-generates routing documentation from your source to JSON or Markdown&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Go.mod support&lt;/strong&gt; - as of v5, go.mod support (see &lt;a href=&#34;https://github.com/go-chi/chi/raw/master/CHANGELOG.md&#34;&gt;CHANGELOG&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;No external dependencies&lt;/strong&gt; - plain ol&#39; Go stdlib + net/http&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/go-chi/chi/raw/master/_examples/&#34;&gt;_examples/&lt;/a&gt; for a variety of examples.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;As easy as:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;net/http&#34;&#xA;&#xA;&#x9;&#34;github.com/go-chi/chi/v5&#34;&#xA;&#x9;&#34;github.com/go-chi/chi/v5/middleware&#34;&#xA;)&#xA;&#xA;func main() {&#xA;&#x9;r := chi.NewRouter()&#xA;&#x9;r.Use(middleware.Logger)&#xA;&#x9;r.Get(&#34;/&#34;, func(w http.ResponseWriter, r *http.Request) {&#xA;&#x9;&#x9;w.Write([]byte(&#34;welcome&#34;))&#xA;&#x9;})&#xA;&#x9;http.ListenAndServe(&#34;:3000&#34;, r)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;REST Preview:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Here is a little preview of how routing looks like with chi. Also take a look at the generated routing docs in JSON (&lt;a href=&#34;https://github.com/go-chi/chi/raw/master/_examples/rest/routes.json&#34;&gt;routes.json&lt;/a&gt;) and in Markdown (&lt;a href=&#34;https://github.com/go-chi/chi/raw/master/_examples/rest/routes.md&#34;&gt;routes.md&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;I highly recommend reading the source of the &lt;a href=&#34;https://github.com/go-chi/chi/raw/master/_examples/&#34;&gt;examples&lt;/a&gt; listed above, they will show you all the features of chi and serve as a good form of documentation.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;import (&#xA;  //...&#xA;  &#34;context&#34;&#xA;  &#34;github.com/go-chi/chi/v5&#34;&#xA;  &#34;github.com/go-chi/chi/v5/middleware&#34;&#xA;)&#xA;&#xA;func main() {&#xA;  r := chi.NewRouter()&#xA;&#xA;  // A good base middleware stack&#xA;  r.Use(middleware.RequestID)&#xA;  r.Use(middleware.RealIP)&#xA;  r.Use(middleware.Logger)&#xA;  r.Use(middleware.Recoverer)&#xA;&#xA;  // Set a timeout value on the request context (ctx), that will signal&#xA;  // through ctx.Done() that the request has timed out and further&#xA;  // processing should be stopped.&#xA;  r.Use(middleware.Timeout(60 * time.Second))&#xA;&#xA;  r.Get(&#34;/&#34;, func(w http.ResponseWriter, r *http.Request) {&#xA;    w.Write([]byte(&#34;hi&#34;))&#xA;  })&#xA;&#xA;  // RESTy routes for &#34;articles&#34; resource&#xA;  r.Route(&#34;/articles&#34;, func(r chi.Router) {&#xA;    r.With(paginate).Get(&#34;/&#34;, listArticles)                           // GET /articles&#xA;    r.With(paginate).Get(&#34;/{month}-{day}-{year}&#34;, listArticlesByDate) // GET /articles/01-16-2017&#xA;&#xA;    r.Post(&#34;/&#34;, createArticle)                                        // POST /articles&#xA;    r.Get(&#34;/search&#34;, searchArticles)                                  // GET /articles/search&#xA;&#xA;    // Regexp url parameters:&#xA;    r.Get(&#34;/{articleSlug:[a-z-]+}&#34;, getArticleBySlug)                // GET /articles/home-is-toronto&#xA;&#xA;    // Subrouters:&#xA;    r.Route(&#34;/{articleID}&#34;, func(r chi.Router) {&#xA;      r.Use(ArticleCtx)&#xA;      r.Get(&#34;/&#34;, getArticle)                                          // GET /articles/123&#xA;      r.Put(&#34;/&#34;, updateArticle)                                       // PUT /articles/123&#xA;      r.Delete(&#34;/&#34;, deleteArticle)                                    // DELETE /articles/123&#xA;    })&#xA;  })&#xA;&#xA;  // Mount the admin sub-router&#xA;  r.Mount(&#34;/admin&#34;, adminRouter())&#xA;&#xA;  http.ListenAndServe(&#34;:3333&#34;, r)&#xA;}&#xA;&#xA;func ArticleCtx(next http.Handler) http.Handler {&#xA;  return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {&#xA;    articleID := chi.URLParam(r, &#34;articleID&#34;)&#xA;    article, err := dbGetArticle(articleID)&#xA;    if err != nil {&#xA;      http.Error(w, http.StatusText(404), 404)&#xA;      return&#xA;    }&#xA;    ctx := context.WithValue(r.Context(), &#34;article&#34;, article)&#xA;    next.ServeHTTP(w, r.WithContext(ctx))&#xA;  })&#xA;}&#xA;&#xA;func getArticle(w http.ResponseWriter, r *http.Request) {&#xA;  ctx := r.Context()&#xA;  article, ok := ctx.Value(&#34;article&#34;).(*Article)&#xA;  if !ok {&#xA;    http.Error(w, http.StatusText(422), 422)&#xA;    return&#xA;  }&#xA;  w.Write([]byte(fmt.Sprintf(&#34;title:%s&#34;, article.Title)))&#xA;}&#xA;&#xA;// A completely separate router for administrator routes&#xA;func adminRouter() http.Handler {&#xA;  r := chi.NewRouter()&#xA;  r.Use(AdminOnly)&#xA;  r.Get(&#34;/&#34;, adminIndex)&#xA;  r.Get(&#34;/accounts&#34;, adminListAccounts)&#xA;  return r&#xA;}&#xA;&#xA;func AdminOnly(next http.Handler) http.Handler {&#xA;  return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {&#xA;    ctx := r.Context()&#xA;    perm, ok := ctx.Value(&#34;acl.permission&#34;).(YourPermissionType)&#xA;    if !ok || !perm.IsAdmin() {&#xA;      http.Error(w, http.StatusText(403), 403)&#xA;      return&#xA;    }&#xA;    next.ServeHTTP(w, r)&#xA;  })&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Router interface&lt;/h2&gt; &#xA;&lt;p&gt;chi&#39;s router is based on a kind of &lt;a href=&#34;https://en.wikipedia.org/wiki/Radix_tree&#34;&gt;Patricia Radix trie&lt;/a&gt;. The router is fully compatible with &lt;code&gt;net/http&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Built on top of the tree is the &lt;code&gt;Router&lt;/code&gt; interface:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Router consisting of the core routing methods used by chi&#39;s Mux,&#xA;// using only the standard net/http.&#xA;type Router interface {&#xA;&#x9;http.Handler&#xA;&#x9;Routes&#xA;&#xA;&#x9;// Use appends one or more middlewares onto the Router stack.&#xA;&#x9;Use(middlewares ...func(http.Handler) http.Handler)&#xA;&#xA;&#x9;// With adds inline middlewares for an endpoint handler.&#xA;&#x9;With(middlewares ...func(http.Handler) http.Handler) Router&#xA;&#xA;&#x9;// Group adds a new inline-Router along the current routing&#xA;&#x9;// path, with a fresh middleware stack for the inline-Router.&#xA;&#x9;Group(fn func(r Router)) Router&#xA;&#xA;&#x9;// Route mounts a sub-Router along a `pattern`` string.&#xA;&#x9;Route(pattern string, fn func(r Router)) Router&#xA;&#xA;&#x9;// Mount attaches another http.Handler along ./pattern/*&#xA;&#x9;Mount(pattern string, h http.Handler)&#xA;&#xA;&#x9;// Handle and HandleFunc adds routes for `pattern` that matches&#xA;&#x9;// all HTTP methods.&#xA;&#x9;Handle(pattern string, h http.Handler)&#xA;&#x9;HandleFunc(pattern string, h http.HandlerFunc)&#xA;&#xA;&#x9;// Method and MethodFunc adds routes for `pattern` that matches&#xA;&#x9;// the `method` HTTP method.&#xA;&#x9;Method(method, pattern string, h http.Handler)&#xA;&#x9;MethodFunc(method, pattern string, h http.HandlerFunc)&#xA;&#xA;&#x9;// HTTP-method routing along `pattern`&#xA;&#x9;Connect(pattern string, h http.HandlerFunc)&#xA;&#x9;Delete(pattern string, h http.HandlerFunc)&#xA;&#x9;Get(pattern string, h http.HandlerFunc)&#xA;&#x9;Head(pattern string, h http.HandlerFunc)&#xA;&#x9;Options(pattern string, h http.HandlerFunc)&#xA;&#x9;Patch(pattern string, h http.HandlerFunc)&#xA;&#x9;Post(pattern string, h http.HandlerFunc)&#xA;&#x9;Put(pattern string, h http.HandlerFunc)&#xA;&#x9;Trace(pattern string, h http.HandlerFunc)&#xA;&#xA;&#x9;// NotFound defines a handler to respond whenever a route could&#xA;&#x9;// not be found.&#xA;&#x9;NotFound(h http.HandlerFunc)&#xA;&#xA;&#x9;// MethodNotAllowed defines a handler to respond whenever a method is&#xA;&#x9;// not allowed.&#xA;&#x9;MethodNotAllowed(h http.HandlerFunc)&#xA;}&#xA;&#xA;// Routes interface adds two methods for router traversal, which is also&#xA;// used by the github.com/go-chi/docgen package to generate documentation for Routers.&#xA;type Routes interface {&#xA;&#x9;// Routes returns the routing tree in an easily traversable structure.&#xA;&#x9;Routes() []Route&#xA;&#xA;&#x9;// Middlewares returns the list of middlewares in use by the router.&#xA;&#x9;Middlewares() Middlewares&#xA;&#xA;&#x9;// Match searches the routing tree for a handler that matches&#xA;&#x9;// the method/path - similar to routing a http request, but without&#xA;&#x9;// executing the handler thereafter.&#xA;&#x9;Match(rctx *Context, method, path string) bool&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Each routing method accepts a URL &lt;code&gt;pattern&lt;/code&gt; and chain of &lt;code&gt;handlers&lt;/code&gt;. The URL pattern supports named params (ie. &lt;code&gt;/users/{userID}&lt;/code&gt;) and wildcards (ie. &lt;code&gt;/admin/*&lt;/code&gt;). URL parameters can be fetched at runtime by calling &lt;code&gt;chi.URLParam(r, &#34;userID&#34;)&lt;/code&gt; for named parameters and &lt;code&gt;chi.URLParam(r, &#34;*&#34;)&lt;/code&gt; for a wildcard parameter.&lt;/p&gt; &#xA;&lt;h3&gt;Middleware handlers&lt;/h3&gt; &#xA;&lt;p&gt;chi&#39;s middlewares are just stdlib net/http middleware handlers. There is nothing special about them, which means the router and all the tooling is designed to be compatible and friendly with any middleware in the community. This offers much better extensibility and reuse of packages and is at the heart of chi&#39;s purpose.&lt;/p&gt; &#xA;&lt;p&gt;Here is an example of a standard net/http middleware where we assign a context key &lt;code&gt;&#34;user&#34;&lt;/code&gt; the value of &lt;code&gt;&#34;123&#34;&lt;/code&gt;. This middleware sets a hypothetical user identifier on the request context and calls the next handler in the chain.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// HTTP middleware setting a value on the request context&#xA;func MyMiddleware(next http.Handler) http.Handler {&#xA;  return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {&#xA;    // create new context from `r` request context, and assign key `&#34;user&#34;`&#xA;    // to value of `&#34;123&#34;`&#xA;    ctx := context.WithValue(r.Context(), &#34;user&#34;, &#34;123&#34;)&#xA;&#xA;    // call the next handler in the chain, passing the response writer and&#xA;    // the updated request object with the new context value.&#xA;    //&#xA;    // note: context.Context values are nested, so any previously set&#xA;    // values will be accessible as well, and the new `&#34;user&#34;` key&#xA;    // will be accessible from this point forward.&#xA;    next.ServeHTTP(w, r.WithContext(ctx))&#xA;  })&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Request handlers&lt;/h3&gt; &#xA;&lt;p&gt;chi uses standard net/http request handlers. This little snippet is an example of a http.Handler func that reads a user identifier from the request context - hypothetically, identifying the user sending an authenticated request, validated+set by a previous middleware handler.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// HTTP handler accessing data from the request context.&#xA;func MyRequestHandler(w http.ResponseWriter, r *http.Request) {&#xA;  // here we read from the request context and fetch out `&#34;user&#34;` key set in&#xA;  // the MyMiddleware example above.&#xA;  user := r.Context().Value(&#34;user&#34;).(string)&#xA;&#xA;  // respond to the client&#xA;  w.Write([]byte(fmt.Sprintf(&#34;hi %s&#34;, user)))&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;URL parameters&lt;/h3&gt; &#xA;&lt;p&gt;chi&#39;s router parses and stores URL parameters right onto the request context. Here is an example of how to access URL params in your net/http handlers. And of course, middlewares are able to access the same information.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// HTTP handler accessing the url routing parameters.&#xA;func MyRequestHandler(w http.ResponseWriter, r *http.Request) {&#xA;  // fetch the url parameter `&#34;userID&#34;` from the request of a matching&#xA;  // routing pattern. An example routing pattern could be: /users/{userID}&#xA;  userID := chi.URLParam(r, &#34;userID&#34;)&#xA;&#xA;  // fetch `&#34;key&#34;` from the request context&#xA;  ctx := r.Context()&#xA;  key := ctx.Value(&#34;key&#34;).(string)&#xA;&#xA;  // respond to the client&#xA;  w.Write([]byte(fmt.Sprintf(&#34;hi %v, %v&#34;, userID, key)))&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Middlewares&lt;/h2&gt; &#xA;&lt;p&gt;chi comes equipped with an optional &lt;code&gt;middleware&lt;/code&gt; package, providing a suite of standard &lt;code&gt;net/http&lt;/code&gt; middlewares. Please note, any middleware in the ecosystem that is also compatible with &lt;code&gt;net/http&lt;/code&gt; can be used with chi&#39;s mux.&lt;/p&gt; &#xA;&lt;h3&gt;Core middlewares&lt;/h3&gt; &#xA;&lt;hr&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;chi/middleware Handler&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/go-chi/chi/middleware#AllowContentEncoding&#34;&gt;AllowContentEncoding&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Enforces a whitelist of request Content-Encoding headers&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/go-chi/chi/middleware#AllowContentType&#34;&gt;AllowContentType&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Explicit whitelist of accepted request Content-Types&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/go-chi/chi/middleware#BasicAuth&#34;&gt;BasicAuth&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Basic HTTP authentication&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/go-chi/chi/middleware#Compress&#34;&gt;Compress&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Gzip compression for clients that accept compressed responses&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/go-chi/chi/middleware#ContentCharset&#34;&gt;ContentCharset&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Ensure charset for Content-Type request headers&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/go-chi/chi/middleware#CleanPath&#34;&gt;CleanPath&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Clean double slashes from request path&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/go-chi/chi/middleware#GetHead&#34;&gt;GetHead&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Automatically route undefined HEAD requests to GET handlers&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/go-chi/chi/middleware#Heartbeat&#34;&gt;Heartbeat&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Monitoring endpoint to check the servers pulse&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/go-chi/chi/middleware#Logger&#34;&gt;Logger&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Logs the start and end of each request with the elapsed processing time&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/go-chi/chi/middleware#NoCache&#34;&gt;NoCache&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Sets response headers to prevent clients from caching&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/go-chi/chi/middleware#Profiler&#34;&gt;Profiler&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Easily attach net/http/pprof to your routers&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/go-chi/chi/middleware#RealIP&#34;&gt;RealIP&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Sets a http.Request&#39;s RemoteAddr to either X-Real-IP or X-Forwarded-For&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/go-chi/chi/middleware#Recoverer&#34;&gt;Recoverer&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Gracefully absorb panics and prints the stack trace&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/go-chi/chi/middleware#RequestID&#34;&gt;RequestID&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Injects a request ID into the context of each request&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/go-chi/chi/middleware#RedirectSlashes&#34;&gt;RedirectSlashes&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Redirect slashes on routing paths&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/go-chi/chi/middleware#RouteHeaders&#34;&gt;RouteHeaders&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Route handling for request headers&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/go-chi/chi/middleware#SetHeader&#34;&gt;SetHeader&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Short-hand middleware to set a response header key/value&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/go-chi/chi/middleware#StripSlashes&#34;&gt;StripSlashes&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Strip slashes on routing paths&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/go-chi/chi/v5/middleware#Sunset&#34;&gt;Sunset&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Sunset set Deprecation/Sunset header to response&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/go-chi/chi/middleware#Throttle&#34;&gt;Throttle&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Puts a ceiling on the number of concurrent requests&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/go-chi/chi/middleware#Timeout&#34;&gt;Timeout&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Signals to the request context when the timeout deadline is reached&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/go-chi/chi/middleware#URLFormat&#34;&gt;URLFormat&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Parse extension from url and put it on request context&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/go-chi/chi/middleware#WithValue&#34;&gt;WithValue&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Short-hand middleware to set a key/value on the request context&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Extra middlewares &amp;amp; packages&lt;/h3&gt; &#xA;&lt;p&gt;Please see &lt;a href=&#34;https://github.com/go-chi&#34;&gt;https://github.com/go-chi&lt;/a&gt; for additional packages.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;package&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/go-chi/cors&#34;&gt;cors&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Cross-origin resource sharing (CORS)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/go-chi/docgen&#34;&gt;docgen&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Print chi.Router routes at runtime&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/go-chi/jwtauth&#34;&gt;jwtauth&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;JWT authentication&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/go-chi/hostrouter&#34;&gt;hostrouter&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Domain/host based request routing&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/go-chi/httplog&#34;&gt;httplog&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Small but powerful structured HTTP request logging&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/go-chi/httprate&#34;&gt;httprate&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;HTTP request rate limiter&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/go-chi/httptracer&#34;&gt;httptracer&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;HTTP request performance tracing library&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/go-chi/httpvcr&#34;&gt;httpvcr&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Write deterministic tests for external sources&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/go-chi/stampede&#34;&gt;stampede&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;HTTP request coalescer&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;context?&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;context&lt;/code&gt; is a tiny pkg that provides simple interface to signal context across call stacks and goroutines. It was originally written by &lt;a href=&#34;https://github.com/Sajmani&#34;&gt;Sameer Ajmani&lt;/a&gt; and is available in stdlib since go1.7.&lt;/p&gt; &#xA;&lt;p&gt;Learn more at &lt;a href=&#34;https://blog.golang.org/context&#34;&gt;https://blog.golang.org/context&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;and..&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Docs: &lt;a href=&#34;https://golang.org/pkg/context&#34;&gt;https://golang.org/pkg/context&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Source: &lt;a href=&#34;https://github.com/golang/go/tree/master/src/context&#34;&gt;https://github.com/golang/go/tree/master/src/context&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Benchmarks&lt;/h2&gt; &#xA;&lt;p&gt;The benchmark suite: &lt;a href=&#34;https://github.com/pkieltyka/go-http-routing-benchmark&#34;&gt;https://github.com/pkieltyka/go-http-routing-benchmark&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Results as of Nov 29, 2020 with Go 1.15.5 on Linux AMD 3950x&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;BenchmarkChi_Param          &#x9;3075895&#x9;        384 ns/op&#x9;      400 B/op      2 allocs/op&#xA;BenchmarkChi_Param5         &#x9;2116603&#x9;        566 ns/op&#x9;      400 B/op      2 allocs/op&#xA;BenchmarkChi_Param20        &#x9; 964117&#x9;       1227 ns/op&#x9;      400 B/op      2 allocs/op&#xA;BenchmarkChi_ParamWrite     &#x9;2863413&#x9;        420 ns/op&#x9;      400 B/op      2 allocs/op&#xA;BenchmarkChi_GithubStatic   &#x9;3045488&#x9;        395 ns/op&#x9;      400 B/op      2 allocs/op&#xA;BenchmarkChi_GithubParam    &#x9;2204115&#x9;        540 ns/op&#x9;      400 B/op      2 allocs/op&#xA;BenchmarkChi_GithubAll      &#x9;  10000&#x9;     113811 ns/op&#x9;    81203 B/op    406 allocs/op&#xA;BenchmarkChi_GPlusStatic    &#x9;3337485&#x9;        359 ns/op&#x9;      400 B/op      2 allocs/op&#xA;BenchmarkChi_GPlusParam     &#x9;2825853&#x9;        423 ns/op&#x9;      400 B/op      2 allocs/op&#xA;BenchmarkChi_GPlus2Params   &#x9;2471697&#x9;        483 ns/op&#x9;      400 B/op      2 allocs/op&#xA;BenchmarkChi_GPlusAll       &#x9; 194220&#x9;       5950 ns/op&#x9;     5200 B/op     26 allocs/op&#xA;BenchmarkChi_ParseStatic    &#x9;3365324&#x9;        356 ns/op&#x9;      400 B/op      2 allocs/op&#xA;BenchmarkChi_ParseParam     &#x9;2976614&#x9;        404 ns/op&#x9;      400 B/op      2 allocs/op&#xA;BenchmarkChi_Parse2Params   &#x9;2638084&#x9;        439 ns/op&#x9;      400 B/op      2 allocs/op&#xA;BenchmarkChi_ParseAll       &#x9; 109567&#x9;      11295 ns/op&#x9;    10400 B/op     52 allocs/op&#xA;BenchmarkChi_StaticAll      &#x9;  16846&#x9;      71308 ns/op&#x9;    62802 B/op    314 allocs/op&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Comparison with other routers: &lt;a href=&#34;https://gist.github.com/pkieltyka/123032f12052520aaccab752bd3e78cc&#34;&gt;https://gist.github.com/pkieltyka/123032f12052520aaccab752bd3e78cc&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;NOTE: the allocs in the benchmark above are from the calls to http.Request&#39;s &lt;code&gt;WithContext(context.Context)&lt;/code&gt; method that clones the http.Request, sets the &lt;code&gt;Context()&lt;/code&gt; on the duplicated (alloc&#39;d) request and returns it the new request object. This is just how setting context on a request in Go works.&lt;/p&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Carl Jackson for &lt;a href=&#34;https://github.com/zenazn/goji&#34;&gt;https://github.com/zenazn/goji&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Parts of chi&#39;s thinking comes from goji, and chi&#39;s middleware package sources from goji.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Armon Dadgar for &lt;a href=&#34;https://github.com/armon/go-radix&#34;&gt;https://github.com/armon/go-radix&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Contributions: &lt;a href=&#34;https://github.com/VojtechVitek&#34;&gt;@VojtechVitek&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;We&#39;ll be more than happy to see &lt;a href=&#34;https://raw.githubusercontent.com/go-chi/chi/master/CONTRIBUTING.md&#34;&gt;your contributions&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;h2&gt;Beyond REST&lt;/h2&gt; &#xA;&lt;p&gt;chi is just a http router that lets you decompose request handling into many smaller layers. Many companies use chi to write REST services for their public APIs. But, REST is just a convention for managing state via HTTP, and there&#39;s a lot of other pieces required to write a complete client-server system or network of microservices.&lt;/p&gt; &#xA;&lt;p&gt;Looking beyond REST, I also recommend some newer works in the field:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/webrpc/webrpc&#34;&gt;webrpc&lt;/a&gt; - Web-focused RPC client+server framework with code-gen&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/grpc/grpc-go&#34;&gt;gRPC&lt;/a&gt; - Google&#39;s RPC framework via protobufs&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/99designs/gqlgen&#34;&gt;graphql&lt;/a&gt; - Declarative query language&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nats.io&#34;&gt;NATS&lt;/a&gt; - lightweight pub-sub&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Copyright (c) 2015-present &lt;a href=&#34;https://github.com/pkieltyka&#34;&gt;Peter Kieltyka&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Licensed under &lt;a href=&#34;https://raw.githubusercontent.com/go-chi/chi/master/LICENSE&#34;&gt;MIT License&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>ory/kratos</title>
    <updated>2024-06-09T01:40:58Z</updated>
    <id>tag:github.com,2024-06-09:/ory/kratos</id>
    <link href="https://github.com/ory/kratos" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Next-gen identity server replacing your Auth0, Okta, Firebase with hardened security and PassKeys, SMS, OIDC, Social Sign In, MFA, FIDO, TOTP and OTP, WebAuthn, passwordless and much more. Golang, headless, API-first. Available as a worry-free SaaS with the fairest pricing on the market!&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ory/meta/master/static/banners/kratos.svg?sanitize=true&#34; alt=&#34;Ory Kratos - Cloud native Identity and User Management&#34;&gt;&lt;/h1&gt; &#xA;&lt;h4 align=&#34;center&#34;&gt; &lt;a href=&#34;https://www.ory.sh/chat&#34;&gt;Chat&lt;/a&gt; | &lt;a href=&#34;https://github.com/ory/kratos/discussions&#34;&gt;Discussions&lt;/a&gt; | &lt;a href=&#34;http://eepurl.com/di390P&#34;&gt;Newsletter&lt;/a&gt;&lt;br&gt;&lt;br&gt; &lt;a href=&#34;https://www.ory.sh/kratos/docs/&#34;&gt;Guide&lt;/a&gt; | &lt;a href=&#34;https://www.ory.sh/kratos/docs/sdk/api&#34;&gt;API Docs&lt;/a&gt; | &lt;a href=&#34;https://godoc.org/github.com/ory/kratos&#34;&gt;Code Docs&lt;/a&gt;&lt;br&gt;&lt;br&gt; &lt;a href=&#34;https://opencollective.com/ory&#34;&gt;Support this project!&lt;/a&gt;&lt;br&gt;&lt;br&gt; &lt;a href=&#34;https://www.ory.sh/jobs/&#34;&gt;Work in Open Source, Ory is hiring!&lt;/a&gt; &lt;/h4&gt; &#xA;&lt;hr&gt; &#xA;&lt;p align=&#34;left&#34;&gt; &lt;a href=&#34;https://github.com/ory/kratos/actions/workflows/ci.yaml&#34;&gt;&lt;img src=&#34;https://github.com/ory/kratos/actions/workflows/ci.yaml/badge.svg?branch=master&amp;amp;event=push&#34; alt=&#34;CI Tasks for Ory Kratos&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/ory/kratos&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/ory/kratos/branch/master/graph/badge.svg?token=6t0QqOdurR&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://bestpractices.coreinfrastructure.org/projects/4979&#34;&gt;&lt;img src=&#34;https://bestpractices.coreinfrastructure.org/projects/4979/badge&#34; alt=&#34;CII Best Practices&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/ory&#34; alt=&#34;sponsors on Open Collective&#34;&gt;&lt;img src=&#34;https://opencollective.com/ory/backers/badge.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/ory&#34; alt=&#34;Sponsors on Open Collective&#34;&gt;&lt;img src=&#34;https://opencollective.com/ory/sponsors/badge.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/ory/kratos/raw/master/CODE_OF_CONDUCT.md&#34; alt=&#34;Ory Code of Conduct&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/ory-code%20of%20conduct-green&#34;&gt;&lt;/a&gt; &lt;/p&gt;&#xA;&lt;p&gt;Ory Kratos is &lt;em&gt;the&lt;/em&gt; developer-friendly, security-hardened and battle-tested Identity, User Management and Authentication system for the Cloud. Finally, it is no longer necessary to implement User Login for the umpteenth time!&lt;/p&gt; &#xA;&lt;h2&gt;Ory Kratos on the Ory Network&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://www.ory.sh/cloud&#34;&gt;Ory Network&lt;/a&gt; is the fastest, most secure and worry-free way to use Ory&#39;s Services. &lt;strong&gt;Ory Identities&lt;/strong&gt; is powered by the Ory Kratos open source identity server, and it&#39;s fully API-compatible.&lt;/p&gt; &#xA;&lt;p&gt;The Ory Network provides the infrastructure for modern end-to-end security:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Identity &amp;amp; credential management scaling to billions of users and devices&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Registration, Login and Account management flows for passkey, biometric, social, SSO and multi-factor authentication&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Pre-built login, registration and account management pages and components&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;OAuth2 and OpenID provider for single sign on, API access and machine-to-machine authorization&lt;/li&gt; &#xA; &lt;li&gt;Low-latency permission checks based on Google&#39;s Zanzibar model and with built-in support for the Ory Permission Language&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;It&#39;s fully managed, highly available, developer &amp;amp; compliance-friendly!&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;GDPR-friendly secure storage with data locality&lt;/li&gt; &#xA; &lt;li&gt;Cloud-native APIs, compatible with Ory&#39;s Open Source servers&lt;/li&gt; &#xA; &lt;li&gt;Comprehensive admin tools with the web-based Ory Console and the Ory Command Line Interface (CLI)&lt;/li&gt; &#xA; &lt;li&gt;Extensive documentation, straightforward examples and easy-to-follow guides&lt;/li&gt; &#xA; &lt;li&gt;Fair, usage-based &lt;a href=&#34;https://www.ory.sh/pricing&#34;&gt;pricing&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Sign up for a &lt;a href=&#34;https://console.ory.sh/registration?utm_source=github&amp;amp;utm_medium=banner&amp;amp;utm_campaign=kratos-readme&#34;&gt;&lt;strong&gt;free developer account&lt;/strong&gt;&lt;/a&gt; today!&lt;/p&gt; &#xA;&lt;h2&gt;Ory Network Hybrid Support Plan&lt;/h2&gt; &#xA;&lt;p&gt;Ory offers a support plan for Ory Network Hybrid, including Ory on private cloud deployments. If you have a self-hosted solution and would like help, consider a support plan! The team at Ory has years of experience in cloud computing. Ory&#39;s offering is the only official program for qualified support from the maintainers. For more information see the &lt;strong&gt;&lt;a href=&#34;https://www.ory.sh/support/&#34;&gt;website&lt;/a&gt;&lt;/strong&gt; or &lt;strong&gt;&lt;a href=&#34;https://www.ory.sh/contact/&#34;&gt;book a meeting&lt;/a&gt;&lt;/strong&gt;!&lt;/p&gt; &#xA;&lt;h3&gt;Quickstart&lt;/h3&gt; &#xA;&lt;p&gt;Install the &lt;a href=&#34;https://www.ory.sh/docs/guides/cli/installation&#34;&gt;Ory CLI&lt;/a&gt; and create a new project to get started with Ory Identities right away:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# If you don&#39;t have Ory CLI installed yet:&#xA;bash &amp;lt;(curl https://raw.githubusercontent.com/ory/meta/master/install.sh) -b . ory&#xA;sudo mv ./ory /usr/local/bin/&#xA;&#xA;# Sign up&#xA;ory auth&#xA;&#xA;# Create project&#xA;ory create project&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;!-- START doctoc generated TOC please keep comment here to allow auto update --&gt; &#xA;&lt;!-- DON&#39;T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE --&gt; &#xA;&lt;p&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ory/kratos/master/#ory-kratos-on-the-ory-network&#34;&gt;Ory Kratos on the Ory Network&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ory/kratos/master/#quickstart&#34;&gt;Quickstart&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ory/kratos/master/#what-is-ory-kratos&#34;&gt;What is Ory Kratos?&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ory/kratos/master/#who-is-using-it&#34;&gt;Who is using it?&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ory/kratos/master/#getting-started&#34;&gt;Getting Started&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ory/kratos/master/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ory/kratos/master/#ecosystem&#34;&gt;Ecosystem&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ory/kratos/master/#ory-kratos-identity-and-user-infrastructure-and-management&#34;&gt;Ory Kratos: Identity and User Infrastructure and Management&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ory/kratos/master/#ory-hydra-oauth2--openid-connect-server&#34;&gt;Ory Hydra: OAuth2 &amp;amp; OpenID Connect Server&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ory/kratos/master/#ory-oathkeeper-identity--access-proxy&#34;&gt;Ory Oathkeeper: Identity &amp;amp; Access Proxy&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ory/kratos/master/#ory-keto-access-control-policies-as-a-server&#34;&gt;Ory Keto: Access Control Policies as a Server&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ory/kratos/master/#security&#34;&gt;Security&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ory/kratos/master/#disclosing-vulnerabilities&#34;&gt;Disclosing vulnerabilities&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ory/kratos/master/#telemetry&#34;&gt;Telemetry&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ory/kratos/master/#documentation&#34;&gt;Documentation&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ory/kratos/master/#guide&#34;&gt;Guide&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ory/kratos/master/#http-api-documentation&#34;&gt;HTTP API documentation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ory/kratos/master/#upgrading-and-changelog&#34;&gt;Upgrading and Changelog&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ory/kratos/master/#command-line-documentation&#34;&gt;Command line documentation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ory/kratos/master/#develop&#34;&gt;Develop&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ory/kratos/master/#dependencies&#34;&gt;Dependencies&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ory/kratos/master/#install-from-source&#34;&gt;Install from source&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ory/kratos/master/#formatting-code&#34;&gt;Formatting Code&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ory/kratos/master/#running-tests&#34;&gt;Running Tests&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ory/kratos/master/#short-tests&#34;&gt;Short Tests&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ory/kratos/master/#regular-tests&#34;&gt;Regular Tests&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ory/kratos/master/#updating-test-fixtures&#34;&gt;Updating Test Fixtures&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ory/kratos/master/#end-to-end-tests&#34;&gt;End-to-End Tests&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ory/kratos/master/#build-docker&#34;&gt;Build Docker&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ory/kratos/master/#documentation-tests&#34;&gt;Documentation Tests&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ory/kratos/master/#preview-api-documentation&#34;&gt;Preview API documentation&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- END doctoc generated TOC please keep comment here to allow auto update --&gt; &#xA;&lt;h2&gt;What is Ory Kratos?&lt;/h2&gt; &#xA;&lt;p&gt;Ory Kratos is an API-first Identity and User Management system that is built according to &lt;a href=&#34;https://www.ory.sh/docs/ecosystem/software-architecture-philosophy&#34;&gt;cloud architecture best practices&lt;/a&gt;. It implements core use cases that almost every software application needs to deal with:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Self-service Login and Registration&lt;/strong&gt;: Allow end-users to create and sign into accounts (we call them &lt;strong&gt;identities&lt;/strong&gt;) using Username / Email and password combinations, Social Sign In (&#34;Sign in with Google, GitHub&#34;), Passwordless flows, and others.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Multi-Factor Authentication (MFA/2FA)&lt;/strong&gt;: Support protocols such as TOTP (&lt;a href=&#34;https://tools.ietf.org/html/rfc6238&#34;&gt;RFC 6238&lt;/a&gt; and &lt;a href=&#34;https://tools.ietf.org/html/rfc4226&#34;&gt;IETF RFC 4226&lt;/a&gt; - better known as &lt;a href=&#34;https://en.wikipedia.org/wiki/Google_Authenticator&#34;&gt;Google Authenticator&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Account Verification&lt;/strong&gt;: Verify that an E-Mail address, phone number, or physical address actually belong to that identity.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Account Recovery&lt;/strong&gt;: Recover access using &#34;Forgot Password&#34; flows, Security Codes (in case of MFA device loss), and others.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Profile and Account Management&lt;/strong&gt;: Update passwords, personal details, email addresses, linked social profiles using secure flows.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Admin APIs&lt;/strong&gt;: Import, update, delete identities.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;We highly recommend reading the &lt;a href=&#34;https://www.ory.sh/kratos/docs/&#34;&gt;Ory Kratos introduction docs&lt;/a&gt; to learn more about Ory Krato&#39;s background, feature set, and differentiation from other products.&lt;/p&gt; &#xA;&lt;h3&gt;Who is using it?&lt;/h3&gt; &#xA;&lt;!--BEGIN ADOPTERS--&gt; &#xA;&lt;p&gt;The Ory community stands on the shoulders of individuals, companies, and maintainers. The Ory team thanks everyone involved - from submitting bug reports and feature requests, to contributing patches and documentation. The Ory community counts more than 33.000 members and is growing rapidly. The Ory stack protects 60.000.000.000+ API requests every month with over 400.000+ active service nodes. None of this would have been possible without each and everyone of you!&lt;/p&gt; &#xA;&lt;p&gt;The following list represents companies that have accompanied us along the way and that have made outstanding contributions to our ecosystem. &lt;em&gt;If you think that your company deserves a spot here, reach out to &lt;a href=&#34;mailto:office@ory.sh&#34;&gt;&lt;/a&gt;&lt;a href=&#34;mailto:office@ory.sh&#34;&gt;office@ory.sh&lt;/a&gt; now&lt;/em&gt;!&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Name&lt;/th&gt; &#xA;   &lt;th&gt;Logo&lt;/th&gt; &#xA;   &lt;th&gt;Website&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Adopter *&lt;/td&gt; &#xA;   &lt;td&gt;Raspberry PI Foundation&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &#xA;    &lt;picture&gt; &#xA;     &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;https://raw.githubusercontent.com/ory/meta/master/static/adopters/light/raspi.svg&#34;&gt; &#xA;     &lt;img height=&#34;32px&#34; src=&#34;https://raw.githubusercontent.com/ory/meta/master/static/adopters/dark/raspi.svg?sanitize=true&#34; alt=&#34;Raspberry PI Foundation&#34;&gt; &#xA;    &lt;/picture&gt; &lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.raspberrypi.org/&#34;&gt;raspberrypi.org&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Adopter *&lt;/td&gt; &#xA;   &lt;td&gt;Kyma Project&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &#xA;    &lt;picture&gt; &#xA;     &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;https://raw.githubusercontent.com/ory/meta/master/static/adopters/light/kyma.svg&#34;&gt; &#xA;     &lt;img height=&#34;32px&#34; src=&#34;https://raw.githubusercontent.com/ory/meta/master/static/adopters/dark/kyma.svg?sanitize=true&#34; alt=&#34;Kyma Project&#34;&gt; &#xA;    &lt;/picture&gt; &lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://kyma-project.io&#34;&gt;kyma-project.io&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Adopter *&lt;/td&gt; &#xA;   &lt;td&gt;Tulip&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &#xA;    &lt;picture&gt; &#xA;     &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;https://raw.githubusercontent.com/ory/meta/master/static/adopters/light/tulip.svg&#34;&gt; &#xA;     &lt;img height=&#34;32px&#34; src=&#34;https://raw.githubusercontent.com/ory/meta/master/static/adopters/dark/tulip.svg?sanitize=true&#34; alt=&#34;Tulip Retail&#34;&gt; &#xA;    &lt;/picture&gt; &lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://tulip.com/&#34;&gt;tulip.com&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Adopter *&lt;/td&gt; &#xA;   &lt;td&gt;Cashdeck / All My Funds&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &#xA;    &lt;picture&gt; &#xA;     &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;https://raw.githubusercontent.com/ory/meta/master/static/adopters/light/allmyfunds.svg&#34;&gt; &#xA;     &lt;img height=&#34;32px&#34; src=&#34;https://raw.githubusercontent.com/ory/meta/master/static/adopters/dark/allmyfunds.svg?sanitize=true&#34; alt=&#34;All My Funds&#34;&gt; &#xA;    &lt;/picture&gt; &lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://cashdeck.com.au/&#34;&gt;cashdeck.com.au&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Adopter *&lt;/td&gt; &#xA;   &lt;td&gt;Hootsuite&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &#xA;    &lt;picture&gt; &#xA;     &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;https://raw.githubusercontent.com/ory/meta/master/static/adopters/light/hootsuite.svg&#34;&gt; &#xA;     &lt;img height=&#34;32px&#34; src=&#34;https://raw.githubusercontent.com/ory/meta/master/static/adopters/dark/hootsuite.svg?sanitize=true&#34; alt=&#34;Hootsuite&#34;&gt; &#xA;    &lt;/picture&gt; &lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://hootsuite.com/&#34;&gt;hootsuite.com&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Adopter *&lt;/td&gt; &#xA;   &lt;td&gt;Segment&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &#xA;    &lt;picture&gt; &#xA;     &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;https://raw.githubusercontent.com/ory/meta/master/static/adopters/light/segment.svg&#34;&gt; &#xA;     &lt;img height=&#34;32px&#34; src=&#34;https://raw.githubusercontent.com/ory/meta/master/static/adopters/dark/segment.svg?sanitize=true&#34; alt=&#34;Segment&#34;&gt; &#xA;    &lt;/picture&gt; &lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://segment.com/&#34;&gt;segment.com&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Adopter *&lt;/td&gt; &#xA;   &lt;td&gt;Arduino&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &#xA;    &lt;picture&gt; &#xA;     &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;https://raw.githubusercontent.com/ory/meta/master/static/adopters/light/arduino.svg&#34;&gt; &#xA;     &lt;img height=&#34;32px&#34; src=&#34;https://raw.githubusercontent.com/ory/meta/master/static/adopters/dark/arduino.svg?sanitize=true&#34; alt=&#34;Arduino&#34;&gt; &#xA;    &lt;/picture&gt; &lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.arduino.cc/&#34;&gt;arduino.cc&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Adopter *&lt;/td&gt; &#xA;   &lt;td&gt;DataDetect&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &#xA;    &lt;picture&gt; &#xA;     &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;https://raw.githubusercontent.com/ory/meta/master/static/adopters/light/datadetect.svg&#34;&gt; &#xA;     &lt;img height=&#34;32px&#34; src=&#34;https://raw.githubusercontent.com/ory/meta/master/static/adopters/dark/datadetect.svg?sanitize=true&#34; alt=&#34;Datadetect&#34;&gt; &#xA;    &lt;/picture&gt; &lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://unifiedglobalarchiving.com/data-detect/&#34;&gt;unifiedglobalarchiving.com/data-detect/&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Adopter *&lt;/td&gt; &#xA;   &lt;td&gt;Sainsbury&#39;s&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &#xA;    &lt;picture&gt; &#xA;     &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;https://raw.githubusercontent.com/ory/meta/master/static/adopters/light/sainsburys.svg&#34;&gt; &#xA;     &lt;img height=&#34;32px&#34; src=&#34;https://raw.githubusercontent.com/ory/meta/master/static/adopters/dark/sainsburys.svg?sanitize=true&#34; alt=&#34;Sainsbury&#39;s&#34;&gt; &#xA;    &lt;/picture&gt; &lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.sainsburys.co.uk/&#34;&gt;sainsburys.co.uk&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Adopter *&lt;/td&gt; &#xA;   &lt;td&gt;Contraste&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &#xA;    &lt;picture&gt; &#xA;     &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;https://raw.githubusercontent.com/ory/meta/master/static/adopters/light/contraste.svg&#34;&gt; &#xA;     &lt;img height=&#34;32px&#34; src=&#34;https://raw.githubusercontent.com/ory/meta/master/static/adopters/dark/contraste.svg?sanitize=true&#34; alt=&#34;Contraste&#34;&gt; &#xA;    &lt;/picture&gt; &lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.contraste.com/en&#34;&gt;contraste.com&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Adopter *&lt;/td&gt; &#xA;   &lt;td&gt;Reyah&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &#xA;    &lt;picture&gt; &#xA;     &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;https://raw.githubusercontent.com/ory/meta/master/static/adopters/light/reyah.svg&#34;&gt; &#xA;     &lt;img height=&#34;32px&#34; src=&#34;https://raw.githubusercontent.com/ory/meta/master/static/adopters/dark/reyah.svg?sanitize=true&#34; alt=&#34;Reyah&#34;&gt; &#xA;    &lt;/picture&gt; &lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://reyah.eu/&#34;&gt;reyah.eu&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Adopter *&lt;/td&gt; &#xA;   &lt;td&gt;Zero&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &#xA;    &lt;picture&gt; &#xA;     &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;https://raw.githubusercontent.com/ory/meta/master/static/adopters/light/commitzero.svg&#34;&gt; &#xA;     &lt;img height=&#34;32px&#34; src=&#34;https://raw.githubusercontent.com/ory/meta/master/static/adopters/dark/commitzero.svg?sanitize=true&#34; alt=&#34;Project Zero by Commit&#34;&gt; &#xA;    &lt;/picture&gt; &lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://getzero.dev/&#34;&gt;getzero.dev&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Adopter *&lt;/td&gt; &#xA;   &lt;td&gt;Padis&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &#xA;    &lt;picture&gt; &#xA;     &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;https://raw.githubusercontent.com/ory/meta/master/static/adopters/light/padis.svg&#34;&gt; &#xA;     &lt;img height=&#34;32px&#34; src=&#34;https://raw.githubusercontent.com/ory/meta/master/static/adopters/dark/padis.svg?sanitize=true&#34; alt=&#34;Padis&#34;&gt; &#xA;    &lt;/picture&gt; &lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://padis.io/&#34;&gt;padis.io&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Adopter *&lt;/td&gt; &#xA;   &lt;td&gt;Cloudbear&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &#xA;    &lt;picture&gt; &#xA;     &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;https://raw.githubusercontent.com/ory/meta/master/static/adopters/light/cloudbear.svg&#34;&gt; &#xA;     &lt;img height=&#34;32px&#34; src=&#34;https://raw.githubusercontent.com/ory/meta/master/static/adopters/dark/cloudbear.svg?sanitize=true&#34; alt=&#34;Cloudbear&#34;&gt; &#xA;    &lt;/picture&gt; &lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://cloudbear.eu/&#34;&gt;cloudbear.eu&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Adopter *&lt;/td&gt; &#xA;   &lt;td&gt;Security Onion Solutions&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &#xA;    &lt;picture&gt; &#xA;     &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;https://raw.githubusercontent.com/ory/meta/master/static/adopters/light/securityonion.svg&#34;&gt; &#xA;     &lt;img height=&#34;32px&#34; src=&#34;https://raw.githubusercontent.com/ory/meta/master/static/adopters/dark/securityonion.svg?sanitize=true&#34; alt=&#34;Security Onion Solutions&#34;&gt; &#xA;    &lt;/picture&gt; &lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://securityonionsolutions.com/&#34;&gt;securityonionsolutions.com&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Adopter *&lt;/td&gt; &#xA;   &lt;td&gt;Factly&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &#xA;    &lt;picture&gt; &#xA;     &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;https://raw.githubusercontent.com/ory/meta/master/static/adopters/light/factly.svg&#34;&gt; &#xA;     &lt;img height=&#34;32px&#34; src=&#34;https://raw.githubusercontent.com/ory/meta/master/static/adopters/dark/factly.svg?sanitize=true&#34; alt=&#34;Factly&#34;&gt; &#xA;    &lt;/picture&gt; &lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://factlylabs.com/&#34;&gt;factlylabs.com&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Adopter *&lt;/td&gt; &#xA;   &lt;td&gt;Nortal&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &#xA;    &lt;picture&gt; &#xA;     &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;https://raw.githubusercontent.com/ory/meta/master/static/adopters/light/nortal.svg&#34;&gt; &#xA;     &lt;img height=&#34;32px&#34; src=&#34;https://raw.githubusercontent.com/ory/meta/master/static/adopters/dark/nortal.svg?sanitize=true&#34; alt=&#34;Nortal&#34;&gt; &#xA;    &lt;/picture&gt; &lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://nortal.com/&#34;&gt;nortal.com&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Adopter *&lt;/td&gt; &#xA;   &lt;td&gt;OrderMyGear&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &#xA;    &lt;picture&gt; &#xA;     &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;https://raw.githubusercontent.com/ory/meta/master/static/adopters/light/ordermygear.svg&#34;&gt; &#xA;     &lt;img height=&#34;32px&#34; src=&#34;https://raw.githubusercontent.com/ory/meta/master/static/adopters/dark/ordermygear.svg?sanitize=true&#34; alt=&#34;OrderMyGear&#34;&gt; &#xA;    &lt;/picture&gt; &lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.ordermygear.com/&#34;&gt;ordermygear.com&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Adopter *&lt;/td&gt; &#xA;   &lt;td&gt;Spiri.bo&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &#xA;    &lt;picture&gt; &#xA;     &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;https://raw.githubusercontent.com/ory/meta/master/static/adopters/light/spiribo.svg&#34;&gt; &#xA;     &lt;img height=&#34;32px&#34; src=&#34;https://raw.githubusercontent.com/ory/meta/master/static/adopters/dark/spiribo.svg?sanitize=true&#34; alt=&#34;Spiri.bo&#34;&gt; &#xA;    &lt;/picture&gt; &lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://spiri.bo/&#34;&gt;spiri.bo&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Adopter *&lt;/td&gt; &#xA;   &lt;td&gt;Strivacity&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &#xA;    &lt;picture&gt; &#xA;     &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;https://raw.githubusercontent.com/ory/meta/master/static/adopters/light/strivacity.svg&#34;&gt; &#xA;     &lt;img height=&#34;16px&#34; src=&#34;https://raw.githubusercontent.com/ory/meta/master/static/adopters/dark/strivacity.svg?sanitize=true&#34; alt=&#34;Spiri.bo&#34;&gt; &#xA;    &lt;/picture&gt; &lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://strivacity.com/&#34;&gt;strivacity.com&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Adopter *&lt;/td&gt; &#xA;   &lt;td&gt;Hanko&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &#xA;    &lt;picture&gt; &#xA;     &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;https://raw.githubusercontent.com/ory/meta/master/static/adopters/light/hanko.svg&#34;&gt; &#xA;     &lt;img height=&#34;32px&#34; src=&#34;https://raw.githubusercontent.com/ory/meta/master/static/adopters/dark/hanko.svg?sanitize=true&#34; alt=&#34;Hanko&#34;&gt; &#xA;    &lt;/picture&gt; &lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://hanko.io/&#34;&gt;hanko.io&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Adopter *&lt;/td&gt; &#xA;   &lt;td&gt;Rabbit&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &#xA;    &lt;picture&gt; &#xA;     &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;https://raw.githubusercontent.com/ory/meta/master/static/adopters/light/rabbit.svg&#34;&gt; &#xA;     &lt;img height=&#34;32px&#34; src=&#34;https://raw.githubusercontent.com/ory/meta/master/static/adopters/dark/rabbit.svg?sanitize=true&#34; alt=&#34;Rabbit&#34;&gt; &#xA;    &lt;/picture&gt; &lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://rabbit.co.th/&#34;&gt;rabbit.co.th&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Adopter *&lt;/td&gt; &#xA;   &lt;td&gt;inMusic&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &#xA;    &lt;picture&gt; &#xA;     &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;https://raw.githubusercontent.com/ory/meta/master/static/adopters/light/inmusic.svg&#34;&gt; &#xA;     &lt;img height=&#34;32px&#34; src=&#34;https://raw.githubusercontent.com/ory/meta/master/static/adopters/dark/inmusic.svg?sanitize=true&#34; alt=&#34;InMusic&#34;&gt; &#xA;    &lt;/picture&gt; &lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://inmusicbrands.com/&#34;&gt;inmusicbrands.com&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Adopter *&lt;/td&gt; &#xA;   &lt;td&gt;Buhta&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &#xA;    &lt;picture&gt; &#xA;     &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;https://raw.githubusercontent.com/ory/meta/master/static/adopters/light/buhta.svg&#34;&gt; &#xA;     &lt;img height=&#34;32px&#34; src=&#34;https://raw.githubusercontent.com/ory/meta/master/static/adopters/dark/buhta.svg?sanitize=true&#34; alt=&#34;Buhta&#34;&gt; &#xA;    &lt;/picture&gt; &lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://buhta.com/&#34;&gt;buhta.com&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Adopter *&lt;/td&gt; &#xA;   &lt;td&gt;Connctd&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &#xA;    &lt;picture&gt; &#xA;     &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;https://raw.githubusercontent.com/ory/meta/master/static/adopters/light/connctd.svg&#34;&gt; &#xA;     &lt;img height=&#34;32px&#34; src=&#34;https://raw.githubusercontent.com/ory/meta/master/static/adopters/dark/connctd.svg?sanitize=true&#34; alt=&#34;Connctd&#34;&gt; &#xA;    &lt;/picture&gt; &lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://connctd.com/&#34;&gt;connctd.com&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Adopter *&lt;/td&gt; &#xA;   &lt;td&gt;Paralus&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &#xA;    &lt;picture&gt; &#xA;     &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;https://raw.githubusercontent.com/ory/meta/master/static/adopters/light/paralus.svg&#34;&gt; &#xA;     &lt;img height=&#34;32px&#34; src=&#34;https://raw.githubusercontent.com/ory/meta/master/static/adopters/dark/paralus.svg?sanitize=true&#34; alt=&#34;Paralus&#34;&gt; &#xA;    &lt;/picture&gt; &lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.paralus.io/&#34;&gt;paralus.io&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Adopter *&lt;/td&gt; &#xA;   &lt;td&gt;TIER IV&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &#xA;    &lt;picture&gt; &#xA;     &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;https://raw.githubusercontent.com/ory/meta/master/static/adopters/light/tieriv.svg&#34;&gt; &#xA;     &lt;img height=&#34;32px&#34; src=&#34;https://raw.githubusercontent.com/ory/meta/master/static/adopters/dark/tieriv.svg?sanitize=true&#34; alt=&#34;TIER IV&#34;&gt; &#xA;    &lt;/picture&gt; &lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://tier4.jp/en/&#34;&gt;tier4.jp&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Adopter *&lt;/td&gt; &#xA;   &lt;td&gt;R2Devops&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &#xA;    &lt;picture&gt; &#xA;     &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;https://raw.githubusercontent.com/ory/meta/master/static/adopters/light/r2devops.svg&#34;&gt; &#xA;     &lt;img height=&#34;32px&#34; src=&#34;https://raw.githubusercontent.com/ory/meta/master/static/adopters/dark/r2devops.svg?sanitize=true&#34; alt=&#34;R2Devops&#34;&gt; &#xA;    &lt;/picture&gt; &lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://r2devops.io/&#34;&gt;r2devops.io&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Adopter *&lt;/td&gt; &#xA;   &lt;td&gt;LunaSec&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &#xA;    &lt;picture&gt; &#xA;     &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;https://raw.githubusercontent.com/ory/meta/master/static/adopters/light/lunasec.svg&#34;&gt; &#xA;     &lt;img height=&#34;32px&#34; src=&#34;https://raw.githubusercontent.com/ory/meta/master/static/adopters/dark/lunasec.svg?sanitize=true&#34; alt=&#34;LunaSec&#34;&gt; &#xA;    &lt;/picture&gt; &lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.lunasec.io/&#34;&gt;lunasec.io&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Adopter *&lt;/td&gt; &#xA;   &lt;td&gt;Serlo&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &#xA;    &lt;picture&gt; &#xA;     &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;https://raw.githubusercontent.com/ory/meta/master/static/adopters/light/serlo.svg&#34;&gt; &#xA;     &lt;img height=&#34;32px&#34; src=&#34;https://raw.githubusercontent.com/ory/meta/master/static/adopters/dark/serlo.svg?sanitize=true&#34; alt=&#34;Serlo&#34;&gt; &#xA;    &lt;/picture&gt; &lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://serlo.org/&#34;&gt;serlo.org&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt;  &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Adopter *&lt;/td&gt; &#xA;   &lt;td&gt;dyrector.io&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &#xA;    &lt;picture&gt; &#xA;     &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;https://raw.githubusercontent.com/ory/meta/master/static/adopters/light/dyrector_io.svg&#34;&gt; &#xA;     &lt;img height=&#34;32px&#34; src=&#34;https://raw.githubusercontent.com/ory/meta/master/static/adopters/dark/dyrector_io.svg?sanitize=true&#34; alt=&#34;dyrector.io&#34;&gt; &#xA;    &lt;/picture&gt; &lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://dyrector.io/&#34;&gt;dyrector.io&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt;  &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Adopter *&lt;/td&gt; &#xA;   &lt;td&gt;Stackspin&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &#xA;    &lt;picture&gt; &#xA;     &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;https://raw.githubusercontent.com/ory/meta/master/static/adopters/light/stackspin.svg&#34;&gt; &#xA;     &lt;img height=&#34;32px&#34; src=&#34;https://raw.githubusercontent.com/ory/meta/master/static/adopters/dark/stackspin.svg?sanitize=true&#34; alt=&#34;stackspin.net&#34;&gt; &#xA;    &lt;/picture&gt; &lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.stackspin.net/&#34;&gt;stackspin.net&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt;  &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Adopter *&lt;/td&gt; &#xA;   &lt;td&gt;Amplitude&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &#xA;    &lt;picture&gt; &#xA;     &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;https://raw.githubusercontent.com/ory/meta/master/static/adopters/light/amplitude.svg&#34;&gt; &#xA;     &lt;img height=&#34;32px&#34; src=&#34;https://raw.githubusercontent.com/ory/meta/master/static/adopters/dark/amplitude.svg?sanitize=true&#34; alt=&#34;amplitude.com&#34;&gt; &#xA;    &lt;/picture&gt; &lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://amplitude.com/&#34;&gt;amplitude.com&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Adopter *&lt;/td&gt; &#xA;   &lt;td&gt;Pinniped&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &#xA;    &lt;picture&gt; &#xA;     &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;https://raw.githubusercontent.com/ory/meta/master/static/adopters/light/pinniped.svg&#34;&gt; &#xA;     &lt;img height=&#34;32px&#34; src=&#34;https://raw.githubusercontent.com/ory/meta/master/static/adopters/dark/pinniped.svg?sanitize=true&#34; alt=&#34;pinniped.dev&#34;&gt; &#xA;    &lt;/picture&gt; &lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://pinniped.dev/&#34;&gt;pinniped.dev&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Adopter *&lt;/td&gt; &#xA;   &lt;td&gt;Pvotal&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &#xA;    &lt;picture&gt; &#xA;     &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;https://raw.githubusercontent.com/ory/meta/master/static/adopters/light/pvotal.svg&#34;&gt; &#xA;     &lt;img height=&#34;32px&#34; src=&#34;https://raw.githubusercontent.com/ory/meta/master/static/adopters/dark/pvotal.svg?sanitize=true&#34; alt=&#34;pvotal.tech&#34;&gt; &#xA;    &lt;/picture&gt; &lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://pvotal.tech/&#34;&gt;pvotal.tech&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Many thanks to all individual contributors&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opencollective.com/ory&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/ory/contributors.svg?width=890&amp;amp;limit=714&amp;amp;button=false&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;* Uses one of Ory&#39;s major projects in production.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;!--END ADOPTERS--&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;To get started with some easy examples, head over to the &lt;a href=&#34;https://www.ory.sh/docs/guides/protect-page-login/&#34;&gt;Get Started Documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;p&gt;Head over to the &lt;a href=&#34;https://www.ory.sh/kratos/docs/install&#34;&gt;Ory Developer Documentation&lt;/a&gt; to learn how to install Ory Kratos on Linux, macOS, Windows, and Docker and how to build Ory Kratos from source.&lt;/p&gt; &#xA;&lt;h2&gt;Ecosystem&lt;/h2&gt; &#xA;&lt;!--BEGIN ECOSYSTEM--&gt; &#xA;&lt;p&gt;We build Ory on several guiding principles when it comes to our architecture design:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Minimal dependencies&lt;/li&gt; &#xA; &lt;li&gt;Runs everywhere&lt;/li&gt; &#xA; &lt;li&gt;Scales without effort&lt;/li&gt; &#xA; &lt;li&gt;Minimize room for human and network errors&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Ory&#39;s architecture is designed to run best on a Container Orchestration system such as Kubernetes, CloudFoundry, OpenShift, and similar projects. Binaries are small (5-15MB) and available for all popular processor types (ARM, AMD64, i386) and operating systems (FreeBSD, Linux, macOS, Windows) without system dependencies (Java, Node, Ruby, libxml, ...).&lt;/p&gt; &#xA;&lt;h3&gt;Ory Kratos: Identity and User Infrastructure and Management&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/ory/kratos&#34;&gt;Ory Kratos&lt;/a&gt; is an API-first Identity and User Management system that is built according to &lt;a href=&#34;https://www.ory.sh/docs/next/ecosystem/software-architecture-philosophy&#34;&gt;cloud architecture best practices&lt;/a&gt;. It implements core use cases that almost every software application needs to deal with: Self-service Login and Registration, Multi-Factor Authentication (MFA/2FA), Account Recovery and Verification, Profile, and Account Management.&lt;/p&gt; &#xA;&lt;h3&gt;Ory Hydra: OAuth2 &amp;amp; OpenID Connect Server&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/ory/hydra&#34;&gt;Ory Hydra&lt;/a&gt; is an OpenID Certified™ OAuth2 and OpenID Connect Provider which easily connects to any existing identity system by writing a tiny &#34;bridge&#34; application. It gives absolute control over the user interface and user experience flows.&lt;/p&gt; &#xA;&lt;h3&gt;Ory Oathkeeper: Identity &amp;amp; Access Proxy&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/ory/oathkeeper&#34;&gt;Ory Oathkeeper&lt;/a&gt; is a BeyondCorp/Zero Trust Identity &amp;amp; Access Proxy (IAP) with configurable authentication, authorization, and request mutation rules for your web services: Authenticate JWT, Access Tokens, API Keys, mTLS; Check if the contained subject is allowed to perform the request; Encode resulting content into custom headers (&lt;code&gt;X-User-ID&lt;/code&gt;), JSON Web Tokens and more!&lt;/p&gt; &#xA;&lt;h3&gt;Ory Keto: Access Control Policies as a Server&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/ory/keto&#34;&gt;Ory Keto&lt;/a&gt; is a policy decision point. It uses a set of access control policies, similar to AWS IAM Policies, in order to determine whether a subject (user, application, service, car, ...) is authorized to perform a certain action on a resource.&lt;/p&gt; &#xA;&lt;!--END ECOSYSTEM--&gt; &#xA;&lt;h2&gt;Security&lt;/h2&gt; &#xA;&lt;p&gt;Running identity infrastructure requires &lt;a href=&#34;https://www.ory.sh/kratos/docs/concepts/security&#34;&gt;attention and knowledge of threat models&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Disclosing vulnerabilities&lt;/h3&gt; &#xA;&lt;p&gt;If you think you found a security vulnerability, please refrain from posting it publicly on the forums, the chat, or GitHub. You can find all info for responsible disclosure in our &lt;a href=&#34;https://www.ory.sh/.well-known/security.txt&#34;&gt;security.txt&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Telemetry&lt;/h2&gt; &#xA;&lt;p&gt;Ory&#39;s services collect summarized, anonymized data that can optionally be turned off. Click &lt;a href=&#34;https://www.ory.sh/docs/ecosystem/sqa&#34;&gt;here&lt;/a&gt; to learn more.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;h3&gt;Guide&lt;/h3&gt; &#xA;&lt;p&gt;The Guide is available &lt;a href=&#34;https://www.ory.sh/kratos/docs&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;HTTP API documentation&lt;/h3&gt; &#xA;&lt;p&gt;The HTTP API is documented &lt;a href=&#34;https://www.ory.sh/kratos/docs/sdk/api&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Upgrading and Changelog&lt;/h3&gt; &#xA;&lt;p&gt;New releases might introduce breaking changes. To help you identify and incorporate those changes, we document these changes in the &lt;a href=&#34;https://raw.githubusercontent.com/ory/kratos/master/CHANGELOG.md&#34;&gt;CHANGELOG.md&lt;/a&gt;. For upgrading, please visit the &lt;a href=&#34;https://www.ory.sh/kratos/docs/guides/upgrade&#34;&gt;upgrade guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Command line documentation&lt;/h3&gt; &#xA;&lt;p&gt;Run &lt;code type=&#34;shell/command&#34;&gt;kratos -h&lt;/code&gt; or &lt;code type=&#34;shell/command&#34;&gt;kratos help&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Develop&lt;/h3&gt; &#xA;&lt;p&gt;We encourage all contributions and encourage you to read our &lt;a href=&#34;https://raw.githubusercontent.com/ory/kratos/master/CONTRIBUTING.md&#34;&gt;contribution guidelines&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Dependencies&lt;/h4&gt; &#xA;&lt;p&gt;You need Go 1.16+ and (for the test suites):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Docker and Docker Compose&lt;/li&gt; &#xA; &lt;li&gt;Makefile&lt;/li&gt; &#xA; &lt;li&gt;NodeJS / npm&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;It is possible to develop Ory Kratos on Windows, but please be aware that all guides assume a Unix shell like bash or zsh.&lt;/p&gt; &#xA;&lt;h4&gt;Install from source&lt;/h4&gt; &#xA;&lt;pre type=&#34;make/command&#34;&gt;&#xA;make install&#xA;&lt;/pre&gt; &#xA;&lt;h4&gt;Formatting Code&lt;/h4&gt; &#xA;&lt;p&gt;You can format all code using &lt;code type=&#34;make/command&#34;&gt;make format&lt;/code&gt;. Our CI checks if your code is properly formatted.&lt;/p&gt; &#xA;&lt;h4&gt;Running Tests&lt;/h4&gt; &#xA;&lt;p&gt;There are three types of tests you can run:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Short tests (do not require a SQL database like PostgreSQL)&lt;/li&gt; &#xA; &lt;li&gt;Regular tests (do require PostgreSQL, MySQL, CockroachDB)&lt;/li&gt; &#xA; &lt;li&gt;End to end tests (do require databases and will use a test browser)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h5&gt;Short Tests&lt;/h5&gt; &#xA;&lt;p&gt;Short tests run fairly quickly. You can either test all of the code at once&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;go test -short -tags sqlite ./...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or test just a specific module:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cd client; go test -tags sqlite -short .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Regular Tests&lt;/h5&gt; &#xA;&lt;p&gt;Regular tests require a database set up. Our test suite is able to work with docker directly (using &lt;a href=&#34;https://github.com/ory/dockertest&#34;&gt;ory/dockertest&lt;/a&gt;) but we encourage to use the Makefile instead. Using dockertest can bloat the number of Docker Images on your system and are quite slow. Instead we recommend doing:&lt;/p&gt; &#xA;&lt;pre type=&#34;make/command&#34;&gt;&#xA;make test&#xA;&lt;/pre&gt; &#xA;&lt;p&gt;Please be aware that &lt;code type=&#34;make/command&#34;&gt;make test&lt;/code&gt; recreates the databases every time you run &lt;code type=&#34;make/command&#34;&gt;make test&lt;/code&gt;. This can be annoying if you are trying to fix something very specific and need the database tests all the time. In that case we suggest that you initialize the databases with:&lt;/p&gt; &#xA;&lt;a type=&#34;make/command&#34;&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;make test-resetdb&#xA;export TEST_DATABASE_MYSQL=&#39;mysql://root:secret@(127.0.0.1:3444)/mysql?parseTime=true&#39;&#xA;export TEST_DATABASE_POSTGRESQL=&#39;postgres://postgres:secret@127.0.0.1:3445/kratos?sslmode=disable&#39;&#xA;export TEST_DATABASE_COCKROACHDB=&#39;cockroach://root@127.0.0.1:3446/defaultdb?sslmode=disable&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/a&gt; &#xA;&lt;p&gt;Then you can run &lt;code&gt;go test&lt;/code&gt; as often as you&#39;d like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;go test -tags sqlite ./...&#xA;&#xA;# or in a module:&#xA;cd client; go test  -tags sqlite  .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Updating Test Fixtures&lt;/h5&gt; &#xA;&lt;p&gt;Some tests use fixtures. If payloads change, you can update them with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make test-update-snapshots&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will only update the snapshots of the short tests. To update all snapshots, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;UPDATE_SNAPSHOTS=true go test -p 4 -tags sqlite ./...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also run this command from a sub folder.&lt;/p&gt; &#xA;&lt;h5&gt;End-to-End Tests&lt;/h5&gt; &#xA;&lt;p&gt;We use &lt;a href=&#34;https://www.cypress.io&#34;&gt;Cypress&lt;/a&gt; to run our e2e tests.&lt;/p&gt; &#xA;&lt;p&gt;⚠️ To run Cypress on ARM based Mac&#39;s, at the moment it is &lt;a href=&#34;https://www.cypress.io/blog/2021/01/20/running-cypress-on-the-apple-m1-silicon-arm-architecture-using-rosetta-2/&#34;&gt;necessary to install Rosetta 2&lt;/a&gt;. To install, use the command - &lt;code&gt;softwareupdate --install-rosetta --agree-to-license&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;The simplest way to develop e2e tests is:&lt;/p&gt; &#xA;&lt;pre type=&#34;repo/executable&#34;&gt;&#xA;./test/e2e/run.sh --dev sqlite&#xA;&lt;/pre&gt; &#xA;&lt;p&gt;You can run all tests (with databases) using:&lt;/p&gt; &#xA;&lt;pre type=&#34;make/command&#34;&gt;&#xA;make test-e2e&#xA;&lt;/pre&gt; &#xA;&lt;p&gt;For more details, run:&lt;/p&gt; &#xA;&lt;pre type=&#34;repo/executable&#34;&gt;&#xA;./test/e2e/run.sh&#xA;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Run only a singular test&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Add &lt;code&gt;.only&lt;/code&gt; to the test you would like to run.&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;it.only(&#39;invalid remote recovery email template&#39;, () =&amp;gt; {&#xA;    ...&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Run a subset of tests&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;This will require editing the &lt;code&gt;cypress.json&lt;/code&gt; file located in the &lt;code&gt;test/e2e/&lt;/code&gt; folder.&lt;/p&gt; &#xA;&lt;p&gt;Add the &lt;code&gt;testFiles&lt;/code&gt; option and specify the test to run inside the &lt;code&gt;cypress/integration&lt;/code&gt; folder. As an example we will add only the &lt;code&gt;network&lt;/code&gt; tests.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&#34;testFiles&#34;: [&#34;profiles/network/*&#34;],&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now start the tests again using the run script or makefile.&lt;/p&gt; &#xA;&lt;h4&gt;Build Docker&lt;/h4&gt; &#xA;&lt;p&gt;You can build a development Docker Image using:&lt;/p&gt; &#xA;&lt;pre type=&#34;make/command&#34;&gt;&#xA;make docker&#xA;&lt;/pre&gt; &#xA;&lt;h4&gt;Preview API documentation&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;update the SDK including the OpenAPI specification: &lt;code type=&#34;make/command&#34;&gt;make sdk&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;run preview server for API documentation: &lt;code type=&#34;make/command&#34;&gt;make docs/api&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;run preview server for swagger documentation: &lt;code type=&#34;make/command&#34;&gt;make docs/swagger&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>