<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-12-22T01:41:54Z</updated>
  <subtitle>Weekly Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>golang/crypto</title>
    <updated>2024-12-22T01:41:54Z</updated>
    <id>tag:github.com,2024-12-22:/golang/crypto</id>
    <link href="https://github.com/golang/crypto" rel="alternate"></link>
    <summary type="html">&lt;p&gt;[mirror] Go supplementary cryptography libraries&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Go Cryptography&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://pkg.go.dev/golang.org/x/crypto&#34;&gt;&lt;img src=&#34;https://pkg.go.dev/badge/golang.org/x/crypto.svg?sanitize=true&#34; alt=&#34;Go Reference&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This repository holds supplementary Go cryptography packages.&lt;/p&gt; &#xA;&lt;h2&gt;Report Issues / Send Patches&lt;/h2&gt; &#xA;&lt;p&gt;This repository uses Gerrit for code changes. To learn how to submit changes to this repository, see &lt;a href=&#34;https://go.dev/doc/contribute&#34;&gt;https://go.dev/doc/contribute&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The git repository is &lt;a href=&#34;https://go.googlesource.com/crypto&#34;&gt;https://go.googlesource.com/crypto&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The main issue tracker for the crypto repository is located at &lt;a href=&#34;https://go.dev/issues&#34;&gt;https://go.dev/issues&lt;/a&gt;. Prefix your issue with &#34;x/crypto:&#34; in the subject line, so it is easy to find.&lt;/p&gt; &#xA;&lt;p&gt;Note that contributions to the cryptography package receive additional scrutiny due to their sensitive nature. Patches may take longer than normal to receive feedback.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>anchore/grype</title>
    <updated>2024-12-22T01:41:54Z</updated>
    <id>tag:github.com,2024-12-22:/anchore/grype</id>
    <link href="https://github.com/anchore/grype" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A vulnerability scanner for container images and filesystems&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img alt=&#34;Grype logo&#34; src=&#34;https://user-images.githubusercontent.com/5199289/136855393-d0a9eef9-ccf1-4e2b-9d7c-7aad16a567e5.png&#34; width=&#34;234&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &amp;nbsp;&lt;a href=&#34;https://github.com/anchore/grype/actions?query=workflow%3A%22Static+Analysis+%2B+Unit+%2B+Integration%22&#34;&gt;&lt;img src=&#34;https://github.com/anchore/grype/workflows/Static%20Analysis%20+%20Unit%20+%20Integration/badge.svg?sanitize=true&#34; alt=&#34;Static Analysis + Unit + Integration&#34;&gt;&lt;/a&gt;&amp;nbsp; &amp;nbsp;&lt;a href=&#34;https://github.com/anchore/grype/actions/workflows/validations.yaml&#34;&gt;&lt;img src=&#34;https://github.com/anchore/grype/workflows/Validations/badge.svg?sanitize=true&#34; alt=&#34;Validations&#34;&gt;&lt;/a&gt;&amp;nbsp; &amp;nbsp;&lt;a href=&#34;https://goreportcard.com/report/github.com/anchore/grype&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/anchore/grype&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt;&amp;nbsp; &amp;nbsp;&lt;a href=&#34;https://github.com/anchore/grype/releases/latest&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/anchore/grype.svg?sanitize=true&#34; alt=&#34;GitHub release&#34;&gt;&lt;/a&gt;&amp;nbsp; &amp;nbsp;&lt;a href=&#34;https://github.com/anchore/grype&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/go-mod/go-version/anchore/grype.svg?sanitize=true&#34; alt=&#34;GitHub go.mod Go version&#34;&gt;&lt;/a&gt;&amp;nbsp; &lt;br&gt; &amp;nbsp;&lt;a href=&#34;https://github.com/anchore/grype/raw/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-Apache%202.0-blue.svg?sanitize=true&#34; alt=&#34;License: Apache-2.0&#34;&gt;&lt;/a&gt;&amp;nbsp; &amp;nbsp;&lt;a href=&#34;https://anchore.com/discourse&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Discourse-Join-blue?logo=discourse&#34; alt=&#34;Join our Discourse&#34;&gt;&lt;/a&gt;&amp;nbsp; &amp;nbsp;&lt;a rel=&#34;me&#34; href=&#34;https://fosstodon.org/@grype&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Mastodon-Follow-blue?logoColor=white&amp;amp;logo=mastodon&#34; alt=&#34;Follow on Mastodon&#34;&gt;&lt;/a&gt;&amp;nbsp; &amp;nbsp;&lt;a href=&#34;https://scorecard.dev/viewer/?uri=github.com/anchore/grype&#34;&gt;&lt;img src=&#34;https://api.securityscorecards.dev/projects/github.com/anchore/grype/badge&#34; alt=&#34;OpenSSF Scorecard&#34;&gt;&lt;/a&gt;&amp;nbsp; &amp;nbsp;&lt;a href=&#34;https://www.bestpractices.dev/projects/6708&#34;&gt;&lt;img src=&#34;https://www.bestpractices.dev/projects/6708/badge&#34; alt=&#34;OpenSSF Best Practices&#34;&gt;&lt;/a&gt;&amp;nbsp; &lt;/p&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;p&gt;A vulnerability scanner for container images and filesystems. Easily &lt;a href=&#34;https://raw.githubusercontent.com/anchore/grype/main/#installation&#34;&gt;install the binary&lt;/a&gt; to try it out. Works with &lt;a href=&#34;https://github.com/anchore/syft&#34;&gt;Syft&lt;/a&gt;, the powerful SBOM (software bill of materials) tool for container images and filesystems.&lt;/p&gt; &#xA;&lt;h3&gt;Join our community meetings!&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Calendar: &lt;a href=&#34;https://calendar.google.com/calendar/u/0/r?cid=Y182OTM4dGt0MjRtajI0NnNzOThiaGtnM29qNEBncm91cC5jYWxlbmRhci5nb29nbGUuY29t&#34;&gt;https://calendar.google.com/calendar/u/0/r?cid=Y182OTM4dGt0MjRtajI0NnNzOThiaGtnM29qNEBncm91cC5jYWxlbmRhci5nb29nbGUuY29t&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Agenda: &lt;a href=&#34;https://docs.google.com/document/d/1ZtSAa6fj2a6KRWviTn3WoJm09edvrNUp4Iz_dOjjyY8/edit?usp=sharing&#34;&gt;https://docs.google.com/document/d/1ZtSAa6fj2a6KRWviTn3WoJm09edvrNUp4Iz_dOjjyY8/edit?usp=sharing&lt;/a&gt; (join &lt;a href=&#34;https://groups.google.com/g/anchore-oss-community&#34;&gt;this group&lt;/a&gt; for write access)&lt;/li&gt; &#xA; &lt;li&gt;All are welcome!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For commercial support options with Syft or Grype, please &lt;a href=&#34;https://get.anchore.com/contact/&#34;&gt;contact Anchore&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/590471/90276236-9868f300-de31-11ea-8068-4268b6b68529.gif&#34; alt=&#34;grype-demo&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Scan the contents of a container image or filesystem to find known vulnerabilities.&lt;/li&gt; &#xA; &lt;li&gt;Find vulnerabilities for major operating system packages: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Alpine&lt;/li&gt; &#xA;   &lt;li&gt;Amazon Linux&lt;/li&gt; &#xA;   &lt;li&gt;BusyBox&lt;/li&gt; &#xA;   &lt;li&gt;CentOS&lt;/li&gt; &#xA;   &lt;li&gt;CBL-Mariner&lt;/li&gt; &#xA;   &lt;li&gt;Debian&lt;/li&gt; &#xA;   &lt;li&gt;Distroless&lt;/li&gt; &#xA;   &lt;li&gt;Oracle Linux&lt;/li&gt; &#xA;   &lt;li&gt;Red Hat (RHEL)&lt;/li&gt; &#xA;   &lt;li&gt;Ubuntu&lt;/li&gt; &#xA;   &lt;li&gt;Wolfi&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Find vulnerabilities for language-specific packages: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Ruby (Gems)&lt;/li&gt; &#xA;   &lt;li&gt;Java (JAR, WAR, EAR, JPI, HPI)&lt;/li&gt; &#xA;   &lt;li&gt;JavaScript (NPM, Yarn)&lt;/li&gt; &#xA;   &lt;li&gt;Python (Egg, Wheel, Poetry, requirements.txt/setup.py files)&lt;/li&gt; &#xA;   &lt;li&gt;Dotnet (deps.json)&lt;/li&gt; &#xA;   &lt;li&gt;Golang (go.mod)&lt;/li&gt; &#xA;   &lt;li&gt;PHP (Composer)&lt;/li&gt; &#xA;   &lt;li&gt;Rust (Cargo)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Supports Docker, OCI and &lt;a href=&#34;https://github.com/sylabs/singularity&#34;&gt;Singularity&lt;/a&gt; image formats.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/openvex&#34;&gt;OpenVEX&lt;/a&gt; support for filtering and augmenting scanning results.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you encounter an issue, please &lt;a href=&#34;https://github.com/anchore/grype/issues&#34;&gt;let us know using the issue tracker&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Recommended&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b /usr/local/bin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Install script options:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;-b&lt;/code&gt;: Specify a custom installation directory (defaults to &lt;code&gt;./bin&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-d&lt;/code&gt;: More verbose logging levels (&lt;code&gt;-d&lt;/code&gt; for debug, &lt;code&gt;-dd&lt;/code&gt; for trace)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-v&lt;/code&gt;: Verify the signature of the downloaded artifact before installation (requires &lt;a href=&#34;https://github.com/sigstore/cosign&#34;&gt;&lt;code&gt;cosign&lt;/code&gt;&lt;/a&gt; to be installed)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Chocolatey&lt;/h3&gt; &#xA;&lt;p&gt;The chocolatey distribution of grype is community-maintained and not distributed by the anchore team.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;choco install grype -y&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Homebrew&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew tap anchore/grype&#xA;brew install grype&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;MacPorts&lt;/h3&gt; &#xA;&lt;p&gt;On macOS, Grype can additionally be installed from the &lt;a href=&#34;https://ports.macports.org/port/grype/&#34;&gt;community-maintained port&lt;/a&gt; via MacPorts:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo port install grype&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Currently, Grype is built only for macOS and Linux.&lt;/p&gt; &#xA;&lt;h3&gt;From source&lt;/h3&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/anchore/grype/main/DEVELOPING.md#native-development&#34;&gt;DEVELOPING.md&lt;/a&gt; for instructions to build and run from source.&lt;/p&gt; &#xA;&lt;h3&gt;GitHub Actions&lt;/h3&gt; &#xA;&lt;p&gt;If you&#39;re using GitHub Actions, you can use our &lt;a href=&#34;https://github.com/marketplace/actions/anchore-container-scan&#34;&gt;Grype-based action&lt;/a&gt; to run vulnerability scans on your code or container images during your CI workflows.&lt;/p&gt; &#xA;&lt;h2&gt;Verifying the artifacts&lt;/h2&gt; &#xA;&lt;p&gt;Checksums are applied to all artifacts, and the resulting checksum file is signed using cosign.&lt;/p&gt; &#xA;&lt;p&gt;You need the following tool to verify signature:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.sigstore.dev/cosign/system_config/installation/&#34;&gt;Cosign&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Verification steps are as follow:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Download the files you want, and the checksums.txt, checksums.txt.pem and checksums.txt.sig files from the &lt;a href=&#34;https://github.com/anchore/grype/releases&#34;&gt;releases&lt;/a&gt; page:&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Verify the signature:&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cosign verify-blob &amp;lt;path to checksum.txt&amp;gt; \&#xA;--certificate &amp;lt;path to checksums.txt.pem&amp;gt; \&#xA;--signature &amp;lt;path to checksums.txt.sig&amp;gt; \&#xA;--certificate-identity-regexp &#39;https://github\.com/anchore/grype/\.github/workflows/.+&#39; \&#xA;--certificate-oidc-issuer &#34;https://token.actions.githubusercontent.com&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Once the signature is confirmed as valid, you can proceed to validate that the SHA256 sums align with the downloaded artifact:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sha256sum --ignore-missing -c checksums.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/anchore/grype/main/#installation&#34;&gt;Install the binary&lt;/a&gt;, and make sure that &lt;code&gt;grype&lt;/code&gt; is available in your path. To scan for vulnerabilities in an image:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;grype &amp;lt;image&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The above command scans for vulnerabilities visible in the container (i.e., the squashed representation of the image). To include software from all image layers in the vulnerability scan, regardless of its presence in the final image, provide &lt;code&gt;--scope all-layers&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;grype &amp;lt;image&amp;gt; --scope all-layers&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To run grype from a Docker container so it can scan a running container, use the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;docker run --rm \&#xA;--volume /var/run/docker.sock:/var/run/docker.sock \&#xA;--name Grype anchore/grype:latest \&#xA;$(ImageName):$(ImageTag)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Supported sources&lt;/h3&gt; &#xA;&lt;p&gt;Grype can scan a variety of sources beyond those found in Docker.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# scan a container image archive (from the result of `docker image save ...`, `podman save ...`, or `skopeo copy` commands)&#xA;grype path/to/image.tar&#xA;&#xA;# scan a Singularity Image Format (SIF) container&#xA;grype path/to/image.sif&#xA;&#xA;# scan a directory&#xA;grype dir:path/to/dir&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Sources can be explicitly provided with a scheme:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;podman:yourrepo/yourimage:tag          use images from the Podman daemon&#xA;docker:yourrepo/yourimage:tag          use images from the Docker daemon&#xA;docker-archive:path/to/yourimage.tar   use a tarball from disk for archives created from &#34;docker save&#34;&#xA;oci-archive:path/to/yourimage.tar      use a tarball from disk for OCI archives (from Skopeo or otherwise)&#xA;oci-dir:path/to/yourimage              read directly from a path on disk for OCI layout directories (from Skopeo or otherwise)&#xA;singularity:path/to/yourimage.sif      read directly from a Singularity Image Format (SIF) container on disk&#xA;dir:path/to/yourproject                read directly from a path on disk (any directory)&#xA;file:path/to/yourfile                  read directly from a file on disk&#xA;sbom:path/to/syft.json                 read Syft JSON from path on disk&#xA;registry:yourrepo/yourimage:tag        pull image directly from a registry (no container runtime required)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If an image source is not provided and cannot be detected from the given reference it is assumed the image should be pulled from the Docker daemon. If docker is not present, then the Podman daemon is attempted next, followed by reaching out directly to the image registry last.&lt;/p&gt; &#xA;&lt;p&gt;This default behavior can be overridden with the &lt;code&gt;default-image-pull-source&lt;/code&gt; configuration option (See &lt;a href=&#34;https://github.com/anchore/grype#configuration&#34;&gt;Configuration&lt;/a&gt; for more details).&lt;/p&gt; &#xA;&lt;p&gt;Use SBOMs for even faster vulnerability scanning in Grype:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Then scan for new vulnerabilities as frequently as needed&#xA;grype sbom:./sbom.json&#xA;&#xA;# (You can also pipe the SBOM into Grype)&#xA;cat ./sbom.json | grype&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Grype supports input of &lt;a href=&#34;https://github.com/anchore/syft&#34;&gt;Syft&lt;/a&gt;, &lt;a href=&#34;https://spdx.dev/&#34;&gt;SPDX&lt;/a&gt;, and &lt;a href=&#34;https://cyclonedx.org/&#34;&gt;CycloneDX&lt;/a&gt; SBOM formats. If Syft has generated any of these file types, they should have the appropriate information to work properly with Grype. It is also possible to use SBOMs generated by other tools with varying degrees of success. Two things that make Grype matching more successful are the inclusion of CPE and Linux distribution information. If an SBOM does not include any CPE information, it is possible to generate these based on package information using the &lt;code&gt;--add-cpes-if-none&lt;/code&gt; flag. To specify a distribution, use the &lt;code&gt;--distro &amp;lt;distro&amp;gt;:&amp;lt;version&amp;gt;&lt;/code&gt; flag. A full example is:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;grype --add-cpes-if-none --distro alpine:3.10 sbom:some-alpine-3.10.spdx.json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Supported versions&lt;/h3&gt; &#xA;&lt;p&gt;Any version of Grype before v0.51.0 (Oct 2022) is not supported. Unsupported releases will not receive any software updates or vulnerability database updates. You can still build vulnerability databases for unsupported Grype releases by using previous releases of &lt;a href=&#34;https://github.com/anchore/vunnel&#34;&gt;vunnel&lt;/a&gt; to gather the upstream data and &lt;a href=&#34;https://github.com/anchore/grype-db&#34;&gt;grype-db&lt;/a&gt; to build databases for unsupported schemas.&lt;/p&gt; &#xA;&lt;h3&gt;Working with attestations&lt;/h3&gt; &#xA;&lt;p&gt;Grype supports scanning SBOMs as input via stdin. Users can use &lt;a href=&#34;https://github.com/sigstore/cosign&#34;&gt;cosign&lt;/a&gt; to verify attestations with an SBOM as its content to scan an image for vulnerabilities:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;COSIGN_EXPERIMENTAL=1 cosign verify-attestation caphill4/java-spdx-tools:latest \&#xA;| jq -r .payload \&#xA;| base64 --decode \&#xA;| jq -r .predicate.Data \&#xA;| grype&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Vulnerability Summary&lt;/h3&gt; &#xA;&lt;h4&gt;Basic Grype Vulnerability Data Shape&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt; {&#xA;  &#34;vulnerability&#34;: {&#xA;    ...&#xA;  },&#xA;  &#34;relatedVulnerabilities&#34;: [&#xA;    ...&#xA;  ],&#xA;  &#34;matchDetails&#34;: [&#xA;    ...&#xA;  ],&#xA;  &#34;artifact&#34;: {&#xA;    ...&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Vulnerability&lt;/strong&gt;: All information on the specific vulnerability that was directly matched on (e.g. ID, severity, CVSS score, fix information, links for more information)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;RelatedVulnerabilities&lt;/strong&gt;: Information pertaining to vulnerabilities found to be related to the main reported vulnerability. Maybe the vulnerability we matched on was a GitHub Security Advisory, which has an upstream CVE (in the authoritative national vulnerability database). In these cases we list the upstream vulnerabilities here.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;MatchDetails&lt;/strong&gt;: This section tries to explain what we searched for while looking for a match and exactly what details on the package and vulnerability that lead to a match.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Artifact&lt;/strong&gt;: This is a subset of the information that we know about the package (when compared to the &lt;a href=&#34;https://github.com/anchore/syft&#34;&gt;Syft&lt;/a&gt; json output, we summarize the metadata section). This has information about where within the container image or directory we found the package, what kind of package it is, licensing info, pURLs, CPEs, etc.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Excluding file paths&lt;/h3&gt; &#xA;&lt;p&gt;Grype can exclude files and paths from being scanned within a source by using glob expressions with one or more &lt;code&gt;--exclude&lt;/code&gt; parameters:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;grype &amp;lt;source&amp;gt; --exclude &#39;./out/**/*.json&#39; --exclude /etc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; in the case of &lt;em&gt;image scanning&lt;/em&gt;, since the entire filesystem is scanned it is possible to use absolute paths like &lt;code&gt;/etc&lt;/code&gt; or &lt;code&gt;/usr/**/*.txt&lt;/code&gt; whereas &lt;em&gt;directory scans&lt;/em&gt; exclude files &lt;em&gt;relative to the specified directory&lt;/em&gt;. For example: scanning &lt;code&gt;/usr/foo&lt;/code&gt; with &lt;code&gt;--exclude ./package.json&lt;/code&gt; would exclude &lt;code&gt;/usr/foo/package.json&lt;/code&gt; and &lt;code&gt;--exclude &#39;**/package.json&#39;&lt;/code&gt; would exclude all &lt;code&gt;package.json&lt;/code&gt; files under &lt;code&gt;/usr/foo&lt;/code&gt;. For &lt;em&gt;directory scans&lt;/em&gt;, it is required to begin path expressions with &lt;code&gt;./&lt;/code&gt;, &lt;code&gt;*/&lt;/code&gt;, or &lt;code&gt;**/&lt;/code&gt;, all of which will be resolved &lt;em&gt;relative to the specified scan directory&lt;/em&gt;. Keep in mind, your shell may attempt to expand wildcards, so put those parameters in single quotes, like: &lt;code&gt;&#39;**/*.json&#39;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;External Sources&lt;/h3&gt; &#xA;&lt;p&gt;Grype can be configured to incorporate external data sources for added fidelity in vulnerability matching. This feature is currently disabled by default. To enable this feature add the following to the grype config:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;external-sources:&#xA;  enable: true&#xA;  maven:&#xA;    search-upstream-by-sha1: true&#xA;    base-url: https://repo1.maven.org/maven2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also configure the base-url if you&#39;re using another registry as your maven endpoint.&lt;/p&gt; &#xA;&lt;h3&gt;Output formats&lt;/h3&gt; &#xA;&lt;p&gt;The output format for Grype is configurable as well:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;grype &amp;lt;image&amp;gt; -o &amp;lt;format&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Where the formats available are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;table&lt;/code&gt;: A columnar summary (default).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cyclonedx&lt;/code&gt;: An XML report conforming to the &lt;a href=&#34;https://cyclonedx.org/specification/overview/&#34;&gt;CycloneDX 1.6 specification&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cyclonedx-json&lt;/code&gt;: A JSON report conforming to the &lt;a href=&#34;https://cyclonedx.org/specification/overview/&#34;&gt;CycloneDX 1.6 specification&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;json&lt;/code&gt;: Use this to get as much information out of Grype as possible!&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;sarif&lt;/code&gt;: Use this option to get a &lt;a href=&#34;https://docs.oasis-open.org/sarif/sarif/v2.1.0/sarif-v2.1.0.html&#34;&gt;SARIF&lt;/a&gt; report (Static Analysis Results Interchange Format)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;template&lt;/code&gt;: Lets the user specify the output format. See &lt;a href=&#34;https://raw.githubusercontent.com/anchore/grype/main/#using-templates&#34;&gt;&#34;Using templates&#34;&lt;/a&gt; below.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Using templates&lt;/h3&gt; &#xA;&lt;p&gt;Grype lets you define custom output formats, using &lt;a href=&#34;https://golang.org/pkg/text/template/&#34;&gt;Go templates&lt;/a&gt;. Here&#39;s how it works:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Define your format as a Go template, and save this template as a file.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Set the output format to &#34;template&#34; (&lt;code&gt;-o template&lt;/code&gt;).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Specify the path to the template file (&lt;code&gt;-t ./path/to/custom.template&lt;/code&gt;).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Grype&#39;s template processing uses the same data models as the &lt;code&gt;json&lt;/code&gt; output format — so if you&#39;re wondering what data is available as you author a template, you can use the output from &lt;code&gt;grype &amp;lt;image&amp;gt; -o json&lt;/code&gt; as a reference.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Please note:&lt;/strong&gt; Templates can access information about the system they are running on, such as environment variables. You should never run untrusted templates.&lt;/p&gt; &#xA;&lt;p&gt;There are several example templates in the &lt;a href=&#34;https://github.com/anchore/grype/tree/main/templates&#34;&gt;templates&lt;/a&gt; directory in the Grype source which can serve as a starting point for a custom output format. For example, &lt;a href=&#34;https://github.com/anchore/grype/raw/main/templates/csv.tmpl&#34;&gt;csv.tmpl&lt;/a&gt; produces a vulnerability report in CSV (comma separated value) format:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;&#34;Package&#34;,&#34;Version Installed&#34;,&#34;Vulnerability ID&#34;,&#34;Severity&#34;&#xA;&#34;coreutils&#34;,&#34;8.30-3ubuntu2&#34;,&#34;CVE-2016-2781&#34;,&#34;Low&#34;&#xA;&#34;libc-bin&#34;,&#34;2.31-0ubuntu9&#34;,&#34;CVE-2016-10228&#34;,&#34;Negligible&#34;&#xA;&#34;libc-bin&#34;,&#34;2.31-0ubuntu9&#34;,&#34;CVE-2020-6096&#34;,&#34;Low&#34;&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also find the template for the default &#34;table&#34; output format in the same place.&lt;/p&gt; &#xA;&lt;p&gt;Grype also includes a vast array of utility templating functions from &lt;a href=&#34;http://masterminds.github.io/sprig/&#34;&gt;sprig&lt;/a&gt; apart from the default golang &lt;a href=&#34;https://pkg.go.dev/text/template#hdr-Functions&#34;&gt;text/template&lt;/a&gt; to allow users to customize the output from Grype.&lt;/p&gt; &#xA;&lt;h3&gt;Gating on severity of vulnerabilities&lt;/h3&gt; &#xA;&lt;p&gt;You can have Grype exit with an error if any vulnerabilities are reported at or above the specified severity level. This comes in handy when using Grype within a script or CI pipeline. To do this, use the &lt;code&gt;--fail-on &amp;lt;severity&amp;gt;&lt;/code&gt; CLI flag.&lt;/p&gt; &#xA;&lt;p&gt;For example, here&#39;s how you could trigger a CI pipeline failure if any vulnerabilities are found in the &lt;code&gt;ubuntu:latest&lt;/code&gt; image with a severity of &#34;medium&#34; or higher:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;grype ubuntu:latest --fail-on medium&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Specifying matches to ignore&lt;/h3&gt; &#xA;&lt;p&gt;If you&#39;re seeing Grype report &lt;strong&gt;false positives&lt;/strong&gt; or any other vulnerability matches that you just don&#39;t want to see, you can tell Grype to &lt;strong&gt;ignore&lt;/strong&gt; matches by specifying one or more &lt;em&gt;&#34;ignore rules&#34;&lt;/em&gt; in your Grype configuration file (e.g. &lt;code&gt;~/.grype.yaml&lt;/code&gt;). This causes Grype not to report any vulnerability matches that meet the criteria specified by any of your ignore rules.&lt;/p&gt; &#xA;&lt;p&gt;Each rule can specify any combination of the following criteria:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;vulnerability ID (e.g. &lt;code&gt;&#34;CVE-2008-4318&#34;&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;namespace (e.g. &lt;code&gt;&#34;nvd&#34;&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;fix state (allowed values: &lt;code&gt;&#34;fixed&#34;&lt;/code&gt;, &lt;code&gt;&#34;not-fixed&#34;&lt;/code&gt;, &lt;code&gt;&#34;wont-fix&#34;&lt;/code&gt;, or &lt;code&gt;&#34;unknown&#34;&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;package name (e.g. &lt;code&gt;&#34;libcurl&#34;&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;package version (e.g. &lt;code&gt;&#34;1.5.1&#34;&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;package language (e.g. &lt;code&gt;&#34;python&#34;&lt;/code&gt;; these values are defined &lt;a href=&#34;https://github.com/anchore/syft/raw/main/syft/pkg/language.go#L14-L23&#34;&gt;here&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;package type (e.g. &lt;code&gt;&#34;npm&#34;&lt;/code&gt;; these values are defined &lt;a href=&#34;https://github.com/anchore/syft/raw/main/syft/pkg/type.go#L10-L24&#34;&gt;here&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;package location (e.g. &lt;code&gt;&#34;/usr/local/lib/node_modules/**&#34;&lt;/code&gt;; supports glob patterns)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Here&#39;s an example &lt;code&gt;~/.grype.yaml&lt;/code&gt; that demonstrates the expected format for ignore rules:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;ignore:&#xA;  # This is the full set of supported rule fields:&#xA;  - vulnerability: CVE-2008-4318&#xA;    fix-state: unknown&#xA;    # VEX fields apply when Grype reads vex data:&#xA;    vex-status: not_affected&#xA;    vex-justification: vulnerable_code_not_present&#xA;    package:&#xA;      name: libcurl&#xA;      version: 1.5.1&#xA;      type: npm&#xA;      location: &#34;/usr/local/lib/node_modules/**&#34;&#xA;&#xA;  # We can make rules to match just by vulnerability ID:&#xA;  - vulnerability: CVE-2014-54321&#xA;&#xA;  # ...or just by a single package field:&#xA;  - package:&#xA;      type: gem&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Vulnerability matches will be ignored if &lt;strong&gt;any&lt;/strong&gt; rules apply to the match. A rule is considered to apply to a given vulnerability match only if &lt;strong&gt;all&lt;/strong&gt; fields specified in the rule apply to the vulnerability match.&lt;/p&gt; &#xA;&lt;p&gt;When you run Grype while specifying ignore rules, the following happens to the vulnerability matches that are &#34;ignored&#34;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Ignored matches are &lt;strong&gt;completely hidden&lt;/strong&gt; from Grype&#39;s output, except for when using the &lt;code&gt;json&lt;/code&gt; or &lt;code&gt;template&lt;/code&gt; output formats; however, in these two formats, the ignored matches are &lt;strong&gt;removed&lt;/strong&gt; from the existing &lt;code&gt;matches&lt;/code&gt; array field, and they are placed in a new &lt;code&gt;ignoredMatches&lt;/code&gt; array field. Each listed ignored match also has an additional field, &lt;code&gt;appliedIgnoreRules&lt;/code&gt;, which is an array of any rules that caused Grype to ignore this vulnerability match.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Ignored matches &lt;strong&gt;do not&lt;/strong&gt; factor into Grype&#39;s exit status decision when using &lt;code&gt;--fail-on &amp;lt;severity&amp;gt;&lt;/code&gt;. For instance, if a user specifies &lt;code&gt;--fail-on critical&lt;/code&gt;, and all of the vulnerability matches found with a &#34;critical&#34; severity have been &lt;em&gt;ignored&lt;/em&gt;, Grype will exit zero.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Please continue to &lt;strong&gt;&lt;a href=&#34;https://github.com/anchore/grype/issues/new/choose&#34;&gt;report&lt;/a&gt;&lt;/strong&gt; any false positives you see! Even if you can reliably filter out false positives using ignore rules, it&#39;s very helpful to the Grype community if we have as much knowledge about Grype&#39;s false positives as possible. This helps us continuously improve Grype!&lt;/p&gt; &#xA;&lt;h3&gt;Showing only &#34;fixed&#34; vulnerabilities&lt;/h3&gt; &#xA;&lt;p&gt;If you only want Grype to report vulnerabilities &lt;strong&gt;that have a confirmed fix&lt;/strong&gt;, you can use the &lt;code&gt;--only-fixed&lt;/code&gt; flag. (This automatically adds &lt;a href=&#34;https://raw.githubusercontent.com/anchore/grype/main/#specifying-matches-to-ignore&#34;&gt;ignore rules&lt;/a&gt; into Grype&#39;s configuration, such that vulnerabilities that aren&#39;t fixed will be ignored.)&lt;/p&gt; &#xA;&lt;p&gt;For example, here&#39;s a scan of Alpine 3.10:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;NAME          INSTALLED  FIXED-IN   VULNERABILITY   SEVERITY&#xA;apk-tools     2.10.6-r0  2.10.7-r0  CVE-2021-36159  Critical&#xA;libcrypto1.1  1.1.1k-r0             CVE-2021-3711   Critical&#xA;libcrypto1.1  1.1.1k-r0             CVE-2021-3712   High&#xA;libssl1.1     1.1.1k-r0             CVE-2021-3712   High&#xA;libssl1.1     1.1.1k-r0             CVE-2021-3711   Critical&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;...and here&#39;s the same scan, but adding the flag &lt;code&gt;--only-fixed&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;NAME       INSTALLED  FIXED-IN   VULNERABILITY   SEVERITY&#xA;apk-tools  2.10.6-r0  2.10.7-r0  CVE-2021-36159  Critical&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want Grype to only report vulnerabilities &lt;strong&gt;that do not have a confirmed fix&lt;/strong&gt;, you can use the &lt;code&gt;--only-notfixed&lt;/code&gt; flag. Alternatively, you can use the &lt;code&gt;--ignore-states&lt;/code&gt; flag to filter results for vulnerabilities with specific states such as &lt;code&gt;wont-fix&lt;/code&gt; (see &lt;code&gt;--help&lt;/code&gt; for a list of valid fix states). These flags automatically add &lt;a href=&#34;https://raw.githubusercontent.com/anchore/grype/main/#specifying-matches-to-ignore&#34;&gt;ignore rules&lt;/a&gt; into Grype&#39;s configuration, such that vulnerabilities which are fixed, or will not be fixed, will be ignored.&lt;/p&gt; &#xA;&lt;h2&gt;VEX Support&lt;/h2&gt; &#xA;&lt;p&gt;Grype can use VEX (Vulnerability Exploitability Exchange) data to filter false positives or provide additional context, augmenting matches. When scanning a container image, you can use the &lt;code&gt;--vex&lt;/code&gt; flag to point to one or more &lt;a href=&#34;https://github.com/openvex&#34;&gt;OpenVEX&lt;/a&gt; documents.&lt;/p&gt; &#xA;&lt;p&gt;VEX statements relate a product (a container image), a vulnerability, and a VEX status to express an assertion of the vulnerability&#39;s impact. There are four &lt;a href=&#34;https://github.com/openvex/spec/raw/main/OPENVEX-SPEC.md#status-labels&#34;&gt;VEX statuses&lt;/a&gt;: &lt;code&gt;not_affected&lt;/code&gt;, &lt;code&gt;affected&lt;/code&gt;, &lt;code&gt;fixed&lt;/code&gt; and &lt;code&gt;under_investigation&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Here is an example of a simple OpenVEX document. (tip: use &lt;a href=&#34;https://github.com/openvex/vexctl&#34;&gt;&lt;code&gt;vexctl&lt;/code&gt;&lt;/a&gt; to generate your own documents).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;@context&#34;: &#34;https://openvex.dev/ns/v0.2.0&#34;,&#xA;  &#34;@id&#34;: &#34;https://openvex.dev/docs/public/vex-d4e9020b6d0d26f131d535e055902dd6ccf3e2088bce3079a8cd3588a4b14c78&#34;,&#xA;  &#34;author&#34;: &#34;A Grype User &amp;lt;jdoe@example.com&amp;gt;&#34;,&#xA;  &#34;timestamp&#34;: &#34;2023-07-17T18:28:47.696004345-06:00&#34;,&#xA;  &#34;version&#34;: 1,&#xA;  &#34;statements&#34;: [&#xA;    {&#xA;      &#34;vulnerability&#34;: {&#xA;        &#34;name&#34;: &#34;CVE-2023-1255&#34;&#xA;      },&#xA;      &#34;products&#34;: [&#xA;        {&#xA;          &#34;@id&#34;: &#34;pkg:oci/alpine@sha256%3A124c7d2707904eea7431fffe91522a01e5a861a624ee31d03372cc1d138a3126&#34;,&#xA;          &#34;subcomponents&#34;: [&#xA;            { &#34;@id&#34;: &#34;pkg:apk/alpine/libssl3@3.0.8-r3&#34; },&#xA;            { &#34;@id&#34;: &#34;pkg:apk/alpine/libcrypto3@3.0.8-r3&#34; }&#xA;          ]&#xA;        }&#xA;      ],&#xA;      &#34;status&#34;: &#34;fixed&#34;&#xA;    }&#xA;  ]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default, Grype will use any statements in specified VEX documents with a status of &lt;code&gt;not_affected&lt;/code&gt; or &lt;code&gt;fixed&lt;/code&gt; to move matches to the ignore set.&lt;/p&gt; &#xA;&lt;p&gt;Any matches ignored as a result of VEX statements are flagged when using &lt;code&gt;--show-suppressed&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;libcrypto3  3.0.8-r3   3.0.8-r4   apk   CVE-2023-1255  Medium (suppressed by VEX)  &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Statements with an &lt;code&gt;affected&lt;/code&gt; or &lt;code&gt;under_investigation&lt;/code&gt; status will only be considered to augment the result set when specifically requested using the &lt;code&gt;GRYPE_VEX_ADD&lt;/code&gt; environment variable or in a configuration file.&lt;/p&gt; &#xA;&lt;h3&gt;VEX Ignore Rules&lt;/h3&gt; &#xA;&lt;p&gt;Ignore rules can be written to control how Grype honors VEX statements. For example, to configure Grype to only act on VEX statements when the justification is &lt;code&gt;vulnerable_code_not_present&lt;/code&gt;, you can write a rule like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;---&#xA;ignore:&#xA;  - vex-status: not_affected&#xA;    vex-justification: vulnerable_code_not_present&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://github.com/openvex/spec/raw/main/OPENVEX-SPEC.md#status-justifications&#34;&gt;list of justifications&lt;/a&gt; for details. You can mix &lt;code&gt;vex-status&lt;/code&gt; and &lt;code&gt;vex-justification&lt;/code&gt; with other ignore rule parameters.&lt;/p&gt; &#xA;&lt;h2&gt;Grype&#39;s database&lt;/h2&gt; &#xA;&lt;p&gt;When Grype performs a scan for vulnerabilities, it does so using a vulnerability database that&#39;s stored on your local filesystem, which is constructed by pulling data from a variety of publicly available vulnerability data sources. These sources include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Alpine Linux SecDB: &lt;a href=&#34;https://secdb.alpinelinux.org/&#34;&gt;https://secdb.alpinelinux.org/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Amazon Linux ALAS: &lt;a href=&#34;https://alas.aws.amazon.com/AL2/alas.rss&#34;&gt;https://alas.aws.amazon.com/AL2/alas.rss&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Chainguard SecDB: &lt;a href=&#34;https://packages.cgr.dev/chainguard/security.json&#34;&gt;https://packages.cgr.dev/chainguard/security.json&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Debian Linux CVE Tracker: &lt;a href=&#34;https://security-tracker.debian.org/tracker/data/json&#34;&gt;https://security-tracker.debian.org/tracker/data/json&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;GitHub Security Advisories (GHSAs): &lt;a href=&#34;https://github.com/advisories&#34;&gt;https://github.com/advisories&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;National Vulnerability Database (NVD): &lt;a href=&#34;https://nvd.nist.gov/vuln/data-feeds&#34;&gt;https://nvd.nist.gov/vuln/data-feeds&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Oracle Linux OVAL: &lt;a href=&#34;https://linux.oracle.com/security/oval/&#34;&gt;https://linux.oracle.com/security/oval/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;RedHat Linux Security Data: &lt;a href=&#34;https://access.redhat.com/hydra/rest/securitydata/&#34;&gt;https://access.redhat.com/hydra/rest/securitydata/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;RedHat RHSAs: &lt;a href=&#34;https://www.redhat.com/security/data/oval/&#34;&gt;https://www.redhat.com/security/data/oval/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;SUSE Linux OVAL: &lt;a href=&#34;https://ftp.suse.com/pub/projects/security/oval/&#34;&gt;https://ftp.suse.com/pub/projects/security/oval/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Ubuntu Linux Security: &lt;a href=&#34;https://people.canonical.com/~ubuntu-security/&#34;&gt;https://people.canonical.com/~ubuntu-security/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Wolfi SecDB: &lt;a href=&#34;https://packages.wolfi.dev/os/security.json&#34;&gt;https://packages.wolfi.dev/os/security.json&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;By default, Grype automatically manages this database for you. Grype checks for new updates to the vulnerability database to make sure that every scan uses up-to-date vulnerability information. This behavior is configurable. For more information, see the &lt;a href=&#34;https://raw.githubusercontent.com/anchore/grype/main/#managing-grypes-database&#34;&gt;Managing Grype&#39;s database&lt;/a&gt; section.&lt;/p&gt; &#xA;&lt;h3&gt;How database updates work&lt;/h3&gt; &#xA;&lt;p&gt;Grype&#39;s vulnerability database is a SQLite file, named &lt;code&gt;vulnerability.db&lt;/code&gt;. Updates to the database are atomic: the entire database is replaced and then treated as &#34;readonly&#34; by Grype.&lt;/p&gt; &#xA;&lt;p&gt;Grype&#39;s first step in a database update is discovering databases that are available for retrieval. Grype does this by requesting a &#34;listing file&#34; from a public endpoint:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;https://toolbox-data.anchore.io/grype/databases/listing.json&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;The listing file contains entries for every database that&#39;s available for download.&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s an example of an entry in the listing file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;built&#34;: &#34;2021-10-21T08:13:41Z&#34;,&#xA;  &#34;version&#34;: 3,&#xA;  &#34;url&#34;: &#34;https://toolbox-data.anchore.io/grype/databases/vulnerability-db_v3_2021-10-21T08:13:41Z.tar.gz&#34;,&#xA;  &#34;checksum&#34;: &#34;sha256:8c99fb4e516f10b304f026267c2a73a474e2df878a59bf688cfb0f094bfe7a91&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With this information, Grype can select the correct database (the most recently built database with the current schema version), download the database, and verify the database&#39;s integrity using the listed &lt;code&gt;checksum&lt;/code&gt; value.&lt;/p&gt; &#xA;&lt;h3&gt;Managing Grype&#39;s database&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; During normal usage, &lt;em&gt;there is no need for users to manage Grype&#39;s database!&lt;/em&gt; Grype manages its database behind the scenes. However, for users that need more control, Grype provides options to manage the database more explicitly.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;Local database cache directory&lt;/h4&gt; &#xA;&lt;p&gt;By default, the database is cached on the local filesystem in the directory &lt;code&gt;$XDG_CACHE_HOME/grype/db/&amp;lt;SCHEMA-VERSION&amp;gt;/&lt;/code&gt;. For example, on macOS, the database would be stored in &lt;code&gt;~/Library/Caches/grype/db/3/&lt;/code&gt;. (For more information on XDG paths, refer to the &lt;a href=&#34;https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html&#34;&gt;XDG Base Directory Specification&lt;/a&gt;.)&lt;/p&gt; &#xA;&lt;p&gt;You can set the cache directory path using the environment variable &lt;code&gt;GRYPE_DB_CACHE_DIR&lt;/code&gt;. If setting that variable alone does not work, then the &lt;code&gt;TMPDIR&lt;/code&gt; environment variable might also need to be set.&lt;/p&gt; &#xA;&lt;h4&gt;Data staleness&lt;/h4&gt; &#xA;&lt;p&gt;Grype needs up-to-date vulnerability information to provide accurate matches. By default, it will fail execution if the local database was not built in the last 5 days. The data staleness check is configurable via the environment variable &lt;code&gt;GRYPE_DB_MAX_ALLOWED_BUILT_AGE&lt;/code&gt; and &lt;code&gt;GRYPE_DB_VALIDATE_AGE&lt;/code&gt; or the field &lt;code&gt;max-allowed-built-age&lt;/code&gt; and &lt;code&gt;validate-age&lt;/code&gt;, under &lt;code&gt;db&lt;/code&gt;. It uses &lt;a href=&#34;https://pkg.go.dev/time#ParseDuration&#34;&gt;golang&#39;s time duration syntax&lt;/a&gt;. Set &lt;code&gt;GRYPE_DB_VALIDATE_AGE&lt;/code&gt; or &lt;code&gt;validate-age&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt; to disable staleness check.&lt;/p&gt; &#xA;&lt;h4&gt;Offline and air-gapped environments&lt;/h4&gt; &#xA;&lt;p&gt;By default, Grype checks for a new database on every run, by making a network call over the Internet. You can tell Grype not to perform this check by setting the environment variable &lt;code&gt;GRYPE_DB_AUTO_UPDATE&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;As long as you place Grype&#39;s &lt;code&gt;vulnerability.db&lt;/code&gt; and &lt;code&gt;metadata.json&lt;/code&gt; files in the cache directory for the expected schema version, Grype has no need to access the network. Additionally, you can get a listing of the database archives available for download from the &lt;code&gt;grype db list&lt;/code&gt; command in an online environment, download the database archive, transfer it to your offline environment, and use &lt;code&gt;grype db import &amp;lt;db-archive-path&amp;gt;&lt;/code&gt; to use the given database in an offline capacity.&lt;/p&gt; &#xA;&lt;p&gt;If you would like to distribute your own Grype databases internally without needing to use &lt;code&gt;db import&lt;/code&gt; manually you can leverage Grype&#39;s DB update mechanism. To do this you can craft your own &lt;code&gt;listing.json&lt;/code&gt; file similar to the one found publically (see &lt;code&gt;grype db list -o raw&lt;/code&gt; for an example of our public &lt;code&gt;listing.json&lt;/code&gt; file) and change the download URL to point to an internal endpoint (e.g. a private S3 bucket, an internal file server, etc). Any internal installation of Grype can receive database updates automatically by configuring the &lt;code&gt;db.update-url&lt;/code&gt; (same as the &lt;code&gt;GRYPE_DB_UPDATE_URL&lt;/code&gt; environment variable) to point to the hosted &lt;code&gt;listing.json&lt;/code&gt; file you&#39;ve crafted.&lt;/p&gt; &#xA;&lt;h4&gt;CLI commands for database management&lt;/h4&gt; &#xA;&lt;p&gt;Grype provides database-specific CLI commands for users that want to control the database from the command line. Here are some of the useful commands provided:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;grype db status&lt;/code&gt; — report the current status of Grype&#39;s database (such as its location, build date, and checksum)&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;grype db check&lt;/code&gt; — see if updates are available for the database&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;grype db update&lt;/code&gt; — ensure the latest database has been downloaded to the cache directory (Grype performs this operation at the beginning of every scan by default)&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;grype db list&lt;/code&gt; — download the listing file configured at &lt;code&gt;db.update-url&lt;/code&gt; and show databases that are available for download&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;grype db import&lt;/code&gt; — provide grype with a database archive to explicitly use (useful for offline DB updates)&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;grype db providers&lt;/code&gt; - provides a detailed list of database providers&lt;/p&gt; &#xA;&lt;p&gt;Find complete information on Grype&#39;s database commands by running &lt;code&gt;grype db --help&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Shell completion&lt;/h2&gt; &#xA;&lt;p&gt;Grype supplies shell completion through its CLI implementation (&lt;a href=&#34;https://github.com/spf13/cobra/raw/master/shell_completions.md&#34;&gt;cobra&lt;/a&gt;). Generate the completion code for your shell by running one of the following commands:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;grype completion &amp;lt;bash|zsh|fish&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;go run ./cmd/grype completion &amp;lt;bash|zsh|fish&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This will output a shell script to STDOUT, which can then be used as a completion script for Grype. Running one of the above commands with the &lt;code&gt;-h&lt;/code&gt; or &lt;code&gt;--help&lt;/code&gt; flags will provide instructions on how to do that for your chosen shell.&lt;/p&gt; &#xA;&lt;h2&gt;Private Registry Authentication&lt;/h2&gt; &#xA;&lt;h3&gt;Local Docker Credentials&lt;/h3&gt; &#xA;&lt;p&gt;When a container runtime is not present, grype can still utilize credentials configured in common credential sources (such as &lt;code&gt;~/.docker/config.json&lt;/code&gt;). It will pull images from private registries using these credentials. The config file is where your credentials are stored when authenticating with private registries via some command like &lt;code&gt;docker login&lt;/code&gt;. For more information see the &lt;code&gt;go-containerregistry&lt;/code&gt; &lt;a href=&#34;https://github.com/google/go-containerregistry/tree/main/pkg/authn&#34;&gt;documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;An example &lt;code&gt;config.json&lt;/code&gt; looks something like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;// config.json&#xA;{&#xA;  &#34;auths&#34;: {&#xA;    &#34;registry.example.com&#34;: {&#xA;      &#34;username&#34;: &#34;AzureDiamond&#34;,&#xA;      &#34;password&#34;: &#34;hunter2&#34;&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can run the following command as an example. It details the mount/environment configuration a container needs to access a private registry:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;docker run -v ./config.json:/config/config.json -e &#34;DOCKER_CONFIG=/config&#34; anchore/grype:latest &amp;lt;private_image&amp;gt;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Docker Credentials in Kubernetes&lt;/h3&gt; &#xA;&lt;p&gt;The below section shows a simple workflow on how to mount this config file as a secret into a container on kubernetes.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Create a secret. The value of &lt;code&gt;config.json&lt;/code&gt; is important. It refers to the specification detailed &lt;a href=&#34;https://github.com/google/go-containerregistry/tree/main/pkg/authn#the-config-file&#34;&gt;here&lt;/a&gt;. Below this section is the &lt;code&gt;secret.yaml&lt;/code&gt; file that the pod configuration will consume as a volume. The key &lt;code&gt;config.json&lt;/code&gt; is important. It will end up being the name of the file when mounted into the pod. &lt;pre&gt;&lt;code class=&#34;language-#&#34;&gt;&#xA;    apiVersion: v1&#xA;    kind: Secret&#xA;    metadata:&#xA;      name: registry-config&#xA;      namespace: grype&#xA;    data:&#xA;      config.json: &amp;lt;base64 encoded config.json&amp;gt;&#xA;    ```&#xA;&#xA;    `kubectl apply -f secret.yaml`&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Create your pod running grype. The env &lt;code&gt;DOCKER_CONFIG&lt;/code&gt; is important because it advertises where to look for the credential file. In the below example, setting &lt;code&gt;DOCKER_CONFIG=/config&lt;/code&gt; informs grype that credentials can be found at &lt;code&gt;/config/config.json&lt;/code&gt;. This is why we used &lt;code&gt;config.json&lt;/code&gt; as the key for our secret. When mounted into containers the secrets&#39; key is used as the filename. The &lt;code&gt;volumeMounts&lt;/code&gt; section mounts our secret to &lt;code&gt;/config&lt;/code&gt;. The &lt;code&gt;volumes&lt;/code&gt; section names our volume and leverages the secret we created in step one. &lt;pre&gt;&lt;code class=&#34;language-#&#34;&gt;&#xA;    apiVersion: v1&#xA;    kind: Pod&#xA;    spec:&#xA;      containers:&#xA;        - image: anchore/grype:latest&#xA;          name: grype-private-registry-demo&#xA;          env:&#xA;            - name: DOCKER_CONFIG&#xA;              value: /config&#xA;          volumeMounts:&#xA;          - mountPath: /config&#xA;            name: registry-config&#xA;            readOnly: true&#xA;          args:&#xA;            - &amp;lt;private_image&amp;gt;&#xA;      volumes:&#xA;      - name: registry-config&#xA;        secret:&#xA;          secretName: registry-config&#xA;    ```&#xA;&#xA;    `kubectl apply -f pod.yaml`&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;The user can now run &lt;code&gt;kubectl logs grype-private-registry-demo&lt;/code&gt;. The logs should show the grype analysis for the &lt;code&gt;&amp;lt;private_image&amp;gt;&lt;/code&gt; provided in the pod configuration.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Using the above information, users should be able to configure private registry access without having to do so in the &lt;code&gt;grype&lt;/code&gt; or &lt;code&gt;syft&lt;/code&gt; configuration files. They will also not be dependent on a docker daemon, (or some other runtime software) for registry configuration and access.&lt;/p&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;Default configuration search paths (see all with &lt;code&gt;grype config locations&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;.grype.yaml&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;.grype/config.yaml&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;~/.grype.yaml&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;XDG_CONFIG_HOME&amp;gt;/grype/config.yaml&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Use &lt;code&gt;grype config&lt;/code&gt; to print a sample config file to stdout. Use &lt;code&gt;grype config --load&lt;/code&gt; to print the current config after loading all values to stdout.&lt;/p&gt; &#xA;&lt;p&gt;You can specify files directly using the &lt;code&gt;--config&lt;/code&gt; / &lt;code&gt;-c&lt;/code&gt; flags to provide your own configuration files/paths:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;grype &amp;lt;image&amp;gt; -c /path/to/config.yaml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Configuration options (example values are the default):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;# enable/disable checking for application updates on startup&#xA;# same as GRYPE_CHECK_FOR_APP_UPDATE env var&#xA;check-for-app-update: true&#xA;&#xA;# allows users to specify which image source should be used to generate the sbom&#xA;# valid values are: registry, docker, podman&#xA;# same as GRYPE_DEFAULT_IMAGE_PULL_SOURCE env var&#xA;default-image-pull-source: &#34;&#34;&#xA;&#xA;# same as --name; set the name of the target being analyzed&#xA;name: &#34;&#34;&#xA;&#xA;# upon scanning, if a severity is found at or above the given severity then the return code will be 1&#xA;# default is unset which will skip this validation (options: negligible, low, medium, high, critical)&#xA;# same as --fail-on ; GRYPE_FAIL_ON_SEVERITY env var&#xA;fail-on-severity: &#34;&#34;&#xA;&#xA;# the output format of the vulnerability report (options: table, template, json, cyclonedx)&#xA;# when using template as the output type, you must also provide a value for &#39;output-template-file&#39;&#xA;# same as -o ; GRYPE_OUTPUT env var&#xA;output: &#34;table&#34;&#xA;&#xA;# if using template output, you must provide a path to a Go template file&#xA;# see https://github.com/anchore/grype#using-templates for more information on template output&#xA;# the default path to the template file is the current working directory&#xA;# output-template-file: .grype/html.tmpl&#xA;&#xA;# write output report to a file (default is to write to stdout)&#xA;# same as --file; GRYPE_FILE env var&#xA;file: &#34;&#34;&#xA;&#xA;# a list of globs to exclude from scanning, for example:&#xA;# exclude:&#xA;#   - &#39;/etc/**&#39;&#xA;#   - &#39;./out/**/*.json&#39;&#xA;# same as --exclude ; GRYPE_EXCLUDE env var&#xA;exclude: []&#xA;&#xA;# include matches on kernel-headers packages that are matched against upstream kernel package&#xA;# if &#39;false&#39; any such matches are marked as ignored&#xA;match-upstream-kernel-headers: false&#xA;&#xA;# os and/or architecture to use when referencing container images (e.g. &#34;windows/armv6&#34; or &#34;arm64&#34;)&#xA;# same as --platform; GRYPE_PLATFORM env var&#xA;platform: &#34;&#34;&#xA;&#xA;# If using SBOM input, automatically generate CPEs when packages have none&#xA;add-cpes-if-none: false&#xA;&#xA;# Explicitly specify a linux distribution to use as &amp;lt;distro&amp;gt;:&amp;lt;version&amp;gt; like alpine:3.10&#xA;distro:&#xA;&#xA;external-sources:&#xA;  enable: false&#xA;  maven:&#xA;    search-upstream-by-sha1: true&#xA;    base-url: https://repo1.maven.org/maven2&#xA;&#xA;db:&#xA;  # check for database updates on execution&#xA;  # same as GRYPE_DB_AUTO_UPDATE env var&#xA;  auto-update: true&#xA;&#xA;  # location to write the vulnerability database cache; defaults to $XDG_CACHE_HOME/grype/db&#xA;  # same as GRYPE_DB_CACHE_DIR env var&#xA;  cache-dir: &#34;&#34;&#xA;&#xA;  # URL of the vulnerability database&#xA;  # same as GRYPE_DB_UPDATE_URL env var&#xA;  update-url: &#34;https://toolbox-data.anchore.io/grype/databases/listing.json&#34;&#xA;&#xA;  # it ensures db build is no older than the max-allowed-built-age&#xA;  # set to false to disable check&#xA;  validate-age: true&#xA;&#xA;  # Max allowed age for vulnerability database,&#xA;  # age being the time since it was built&#xA;  # Default max age is 120h (or five days)&#xA;  max-allowed-built-age: &#34;120h&#34;&#xA;&#xA;  # Timeout for downloading GRYPE_DB_UPDATE_URL to see if the database needs to be downloaded&#xA;  # This file is ~156KiB as of 2024-04-17 so the download should be quick; adjust as needed&#xA;  update-available-timeout: &#34;30s&#34;&#xA;&#xA;  # Timeout for downloading actual vulnerability DB&#xA;  # The DB is ~156MB as of 2024-04-17 so slower connections may exceed the default timeout; adjust as needed&#xA;  update-download-timeout: &#34;120s&#34;&#xA;&#xA;search:&#xA;  # the search space to look for packages (options: all-layers, squashed)&#xA;  # same as -s ; GRYPE_SEARCH_SCOPE env var&#xA;  scope: &#34;squashed&#34;&#xA;&#xA;  # search within archives that do contain a file index to search against (zip)&#xA;  # note: for now this only applies to the java package cataloger&#xA;  # same as GRYPE_PACKAGE_SEARCH_INDEXED_ARCHIVES env var&#xA;  indexed-archives: true&#xA;&#xA;  # search within archives that do not contain a file index to search against (tar, tar.gz, tar.bz2, etc)&#xA;  # note: enabling this may result in a performance impact since all discovered compressed tars will be decompressed&#xA;  # note: for now this only applies to the java package cataloger&#xA;  # same as GRYPE_PACKAGE_SEARCH_UNINDEXED_ARCHIVES env var&#xA;  unindexed-archives: false&#xA;&#xA;# options when pulling directly from a registry via the &#34;registry:&#34; scheme&#xA;registry:&#xA;  # skip TLS verification when communicating with the registry&#xA;  # same as GRYPE_REGISTRY_INSECURE_SKIP_TLS_VERIFY env var&#xA;  insecure-skip-tls-verify: false&#xA;&#xA;  # use http instead of https when connecting to the registry&#xA;  # same as GRYPE_REGISTRY_INSECURE_USE_HTTP env var&#xA;  insecure-use-http: false&#xA;&#xA;  # filepath to a CA certificate (or directory containing *.crt, *.cert, *.pem) used to generate the client certificate&#xA;  # GRYPE_REGISTRY_CA_CERT env var&#xA;  ca-cert: &#34;&#34;&#xA;&#xA;  # credentials for specific registries&#xA;  auth:&#xA;    # the URL to the registry (e.g. &#34;docker.io&#34;, &#34;localhost:5000&#34;, etc.)&#xA;    # GRYPE_REGISTRY_AUTH_AUTHORITY env var&#xA;    - authority: &#34;&#34;&#xA;&#xA;      # GRYPE_REGISTRY_AUTH_USERNAME env var&#xA;      username: &#34;&#34;&#xA;&#xA;      # GRYPE_REGISTRY_AUTH_PASSWORD env var&#xA;      password: &#34;&#34;&#xA;&#xA;      # note: token and username/password are mutually exclusive&#xA;      # GRYPE_REGISTRY_AUTH_TOKEN env var&#xA;      token: &#34;&#34;&#xA;&#xA;      # filepath to the client certificate used for TLS authentication to the registry&#xA;      # GRYPE_REGISTRY_AUTH_TLS_CERT env var&#xA;      tls-cert: &#34;&#34;&#xA;&#xA;      # filepath to the client key used for TLS authentication to the registry&#xA;      # GRYPE_REGISTRY_AUTH_TLS_KEY env var&#xA;      tls-key: &#34;&#34;&#xA;&#xA;    # - ... # note, more credentials can be provided via config file only (not env vars)&#xA;&#xA;&#xA;log:&#xA;  # suppress all output (except for the vulnerability list)&#xA;  # same as -q ; GRYPE_LOG_QUIET env var&#xA;  quiet: false&#xA;&#xA;  # increase verbosity&#xA;  # same as GRYPE_LOG_VERBOSITY env var&#xA;  verbosity: 0&#xA;&#xA;  # the log level; note: detailed logging suppress the ETUI&#xA;  # same as GRYPE_LOG_LEVEL env var&#xA;  # Uses logrus logging levels: https://github.com/sirupsen/logrus#level-logging&#xA;  level: &#34;error&#34;&#xA;&#xA;  # location to write the log file (default is not to have a log file)&#xA;  # same as GRYPE_LOG_FILE env var&#xA;  file: &#34;&#34;&#xA;&#xA;match:&#xA;  # sets the matchers below to use cpes when trying to find &#xA;  # vulnerability matches. The stock matcher is the default&#xA;  # when no primary matcher can be identified.&#xA;  java:&#xA;    using-cpes: false&#xA;  python:&#xA;    using-cpes: false&#xA;  javascript:&#xA;    using-cpes: false&#xA;  ruby:&#xA;    using-cpes: false&#xA;  dotnet:&#xA;    using-cpes: false&#xA;  golang:&#xA;    using-cpes: false&#xA;    # even if CPE matching is disabled, make an exception when scanning for &#34;stdlib&#34;.&#xA;    always-use-cpe-for-stdlib: true&#xA;    # allow main module pseudo versions, which may have only been &#34;guessed at&#34; by Syft, to be used in vulnerability matching&#xA;    allow-main-module-pseudo-version-comparison: false&#xA;  stock:&#xA;    using-cpes: true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Future plans&lt;/h2&gt; &#xA;&lt;p&gt;The following areas of potential development are currently being investigated:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Support for allowlist, package mapping&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Grype Logo&lt;/h2&gt; &#xA;&lt;p xmlns:cc=&#34;http://creativecommons.org/ns#&#34; xmlns:dct=&#34;http://purl.org/dc/terms/&#34;&gt;&lt;a property=&#34;dct:title&#34; rel=&#34;cc:attributionURL&#34; href=&#34;https://anchore.com/wp-content/uploads/2024/11/grype-logo.svg&#34;&gt;Grype Logo&lt;/a&gt; by &lt;a rel=&#34;cc:attributionURL dct:creator&#34; property=&#34;cc:attributionName&#34; href=&#34;https://anchore.com/&#34;&gt;Anchore&lt;/a&gt; is licensed under &lt;a href=&#34;https://creativecommons.org/licenses/by/4.0/&#34; target=&#34;_blank&#34; rel=&#34;license noopener noreferrer&#34; style=&#34;display:inline-block;&#34;&gt;CC BY 4.0&lt;img style=&#34;height:22px!important;margin-left:3px;vertical-align:text-bottom;&#34; src=&#34;https://mirrors.creativecommons.org/presskit/icons/cc.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;img style=&#34;height:22px!important;margin-left:3px;vertical-align:text-bottom;&#34; src=&#34;https://mirrors.creativecommons.org/presskit/icons/by.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>swaggo/swag</title>
    <updated>2024-12-22T01:41:54Z</updated>
    <id>tag:github.com,2024-12-22:/swaggo/swag</id>
    <link href="https://github.com/swaggo/swag" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Automatically generate RESTful API documentation with Swagger 2.0 for Go.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;swag&lt;/h1&gt; &#xA;&lt;p&gt;🌍 &lt;em&gt;&lt;a href=&#34;https://raw.githubusercontent.com/swaggo/swag/master/README.md&#34;&gt;English&lt;/a&gt; ∙ &lt;a href=&#34;https://raw.githubusercontent.com/swaggo/swag/master/README_zh-CN.md&#34;&gt;简体中文&lt;/a&gt; ∙ &lt;a href=&#34;https://raw.githubusercontent.com/swaggo/swag/master/README_pt.md&#34;&gt;Português&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;img align=&#34;right&#34; width=&#34;180px&#34; src=&#34;https://raw.githubusercontent.com/swaggo/swag/master/assets/swaggo.png&#34;&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/features/actions&#34;&gt;&lt;img src=&#34;https://github.com/swaggo/swag/actions/workflows/ci.yml/badge.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/swaggo/swag&#34;&gt;&lt;img src=&#34;https://img.shields.io/codecov/c/github/swaggo/swag/master.svg?sanitize=true&#34; alt=&#34;Coverage Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/swaggo/swag&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/swaggo/swag&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codebeat.co/projects/github-com-swaggo-swag-master&#34;&gt;&lt;img src=&#34;https://codebeat.co/badges/71e2f5e5-9e6b-405d-baf9-7cc8b5037330&#34; alt=&#34;codebeat badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://godoc.org/github.com/swaggo/swag&#34;&gt;&lt;img src=&#34;https://godoc.org/github.com/swaggo/swagg?status.svg?sanitize=true&#34; alt=&#34;Go Doc&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/swaggo/swag/master/#backers&#34;&gt;&lt;img src=&#34;https://opencollective.com/swag/backers/badge.svg?sanitize=true&#34; alt=&#34;Backers on Open Collective&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/swaggo/swag/master/#sponsors&#34;&gt;&lt;img src=&#34;https://opencollective.com/swag/sponsors/badge.svg?sanitize=true&#34; alt=&#34;Sponsors on Open Collective&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://app.fossa.io/projects/git%2Bgithub.com%2Fswaggo%2Fswag?ref=badge_shield&#34;&gt;&lt;img src=&#34;https://app.fossa.io/api/projects/git%2Bgithub.com%2Fswaggo%2Fswag.svg?type=shield&#34; alt=&#34;FOSSA Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/swaggo/swag/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/swaggo/swag.svg?style=flat-square&#34; alt=&#34;Release&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Swag converts Go annotations to Swagger Documentation 2.0. We&#39;ve created a variety of plugins for popular &lt;a href=&#34;https://raw.githubusercontent.com/swaggo/swag/master/#supported-web-frameworks&#34;&gt;Go web frameworks&lt;/a&gt;. This allows you to quickly integrate with an existing Go project (using Swagger UI).&lt;/p&gt; &#xA;&lt;h2&gt;Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/swaggo/swag/master/#getting-started&#34;&gt;Getting started&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/swaggo/swag/master/#supported-web-frameworks&#34;&gt;Supported Web Frameworks&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/swaggo/swag/master/#how-to-use-it-with-gin&#34;&gt;How to use it with Gin&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/swaggo/swag/master/#the-swag-formatter&#34;&gt;The swag formatter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/swaggo/swag/master/#implementation-status&#34;&gt;Implementation Status&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/swaggo/swag/master/#declarative-comments-format&#34;&gt;Declarative Comments Format&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/swaggo/swag/master/#general-api-info&#34;&gt;General API Info&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/swaggo/swag/master/#api-operation&#34;&gt;API Operation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/swaggo/swag/master/#security&#34;&gt;Security&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/swaggo/swag/master/#examples&#34;&gt;Examples&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/swaggo/swag/master/#descriptions-over-multiple-lines&#34;&gt;Descriptions over multiple lines&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/swaggo/swag/master/#user-defined-structure-with-an-array-type&#34;&gt;User defined structure with an array type&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/swaggo/swag/master/#function-scoped-struct-declaration&#34;&gt;Function scoped struct declaration&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/swaggo/swag/master/#model-composition-in-response&#34;&gt;Model composition in response&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/swaggo/swag/master/#add-request-headers&#34;&gt;Add request headers&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/swaggo/swag/master/#add-response-headers&#34;&gt;Add response headers&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/swaggo/swag/master/#use-multiple-path-params&#34;&gt;Use multiple path params&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/swaggo/swag/master/#example-value-of-struct&#34;&gt;Example value of struct&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/swaggo/swag/master/#schemaexample-of-body&#34;&gt;SchemaExample of body&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/swaggo/swag/master/#description-of-struct&#34;&gt;Description of struct&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/swaggo/swag/master/#use-swaggertype-tag-to-supported-custom-type&#34;&gt;Use swaggertype tag to supported custom type&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/swaggo/swag/master/#use-global-overrides-to-support-a-custom-type&#34;&gt;Use global overrides to support a custom type&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/swaggo/swag/master/#use-swaggerignore-tag-to-exclude-a-field&#34;&gt;Use swaggerignore tag to exclude a field&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/swaggo/swag/master/#add-extension-info-to-struct-field&#34;&gt;Add extension info to struct field&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/swaggo/swag/master/#rename-model-to-display&#34;&gt;Rename model to display&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/swaggo/swag/master/#how-to-use-security-annotations&#34;&gt;How to use security annotations&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/swaggo/swag/master/#add-a-description-for-enum-items&#34;&gt;Add a description for enum items&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/swaggo/swag/master/#generate-only-specific-docs-file-types&#34;&gt;Generate only specific docs file types&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/swaggo/swag/master/#how-to-use-generics&#34;&gt;How to use Go generic types&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/swaggo/swag/master/#about-the-project&#34;&gt;About the Project&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Add comments to your API source code, See &lt;a href=&#34;https://raw.githubusercontent.com/swaggo/swag/master/#declarative-comments-format&#34;&gt;Declarative Comments Format&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Install swag by using:&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;go install github.com/swaggo/swag/cmd/swag@latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To build from source you need &lt;a href=&#34;https://golang.org/dl/&#34;&gt;Go&lt;/a&gt; (1.19 or newer).&lt;/p&gt; &#xA;&lt;p&gt;Alternatively you can run the docker image:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker run --rm -v $(pwd):/code ghcr.io/swaggo/swag:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or download a pre-compiled binary from the &lt;a href=&#34;https://github.com/swaggo/swag/releases&#34;&gt;release page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Run &lt;code&gt;swag init&lt;/code&gt; in the project&#39;s root folder which contains the &lt;code&gt;main.go&lt;/code&gt; file. This will parse your comments and generate the required files (&lt;code&gt;docs&lt;/code&gt; folder and &lt;code&gt;docs/docs.go&lt;/code&gt;).&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;swag init&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Make sure to import the generated &lt;code&gt;docs/docs.go&lt;/code&gt; so that your specific configuration gets &lt;code&gt;init&lt;/code&gt;&#39;ed. If your General API annotations do not live in &lt;code&gt;main.go&lt;/code&gt;, you can let swag know with &lt;code&gt;-g&lt;/code&gt; flag.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;import _ &#34;example-module-name/docs&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;swag init -g http/api.go&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;(optional) Use &lt;code&gt;swag fmt&lt;/code&gt; format the SWAG comment. (Please upgrade to the latest version)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;swag fmt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;swag cli&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;swag init -h&#xA;NAME:&#xA;   swag init - Create docs.go&#xA;&#xA;USAGE:&#xA;   swag init [command options] [arguments...]&#xA;&#xA;OPTIONS:&#xA;   --quiet, -q                            Make the logger quiet. (default: false)&#xA;   --generalInfo value, -g value          Go file path in which &#39;swagger general API Info&#39; is written (default: &#34;main.go&#34;)&#xA;   --dir value, -d value                  Directories you want to parse,comma separated and general-info file must be in the first one (default: &#34;./&#34;)&#xA;   --exclude value                        Exclude directories and files when searching, comma separated&#xA;   --propertyStrategy value, -p value     Property Naming Strategy like snakecase,camelcase,pascalcase (default: &#34;camelcase&#34;)&#xA;   --output value, -o value               Output directory for all the generated files(swagger.json, swagger.yaml and docs.go) (default: &#34;./docs&#34;)&#xA;   --outputTypes value, --ot value        Output types of generated files (docs.go, swagger.json, swagger.yaml) like go,json,yaml (default: &#34;go,json,yaml&#34;)&#xA;   --parseVendor                          Parse go files in &#39;vendor&#39; folder, disabled by default (default: false)&#xA;   --parseDependency, --pd                Parse go files inside dependency folder, disabled by default (default: false)&#xA;   --parseDependencyLevel, --pdl          Enhancement of &#39;--parseDependency&#39;, parse go files inside dependency folder, 0 disabled, 1 only parse models, 2 only parse operations, 3 parse all (default: 0)&#xA;   --markdownFiles value, --md value      Parse folder containing markdown files to use as description, disabled by default&#xA;   --codeExampleFiles value, --cef value  Parse folder containing code example files to use for the x-codeSamples extension, disabled by default&#xA;   --parseInternal                        Parse go files in internal packages, disabled by default (default: false)&#xA;   --generatedTime                        Generate timestamp at the top of docs.go, disabled by default (default: false)&#xA;   --parseDepth value                     Dependency parse depth (default: 100)&#xA;   --requiredByDefault                    Set validation required for all fields by default (default: false)&#xA;   --instanceName value                   This parameter can be used to name different swagger document instances. It is optional.&#xA;   --overridesFile value                  File to read global type overrides from. (default: &#34;.swaggo&#34;)&#xA;   --parseGoList                          Parse dependency via &#39;go list&#39; (default: true)&#xA;   --tags value, -t value                 A comma-separated list of tags to filter the APIs for which the documentation is generated.Special case if the tag is prefixed with the &#39;!&#39; character then the APIs with that tag will be excluded&#xA;   --templateDelims value, --td value     Provide custom delimiters for Go template generation. The format is leftDelim,rightDelim. For example: &#34;[[,]]&#34;&#xA;   --collectionFormat value, --cf value   Set default collection format (default: &#34;csv&#34;)&#xA;   --state value                          Initial state for the state machine (default: &#34;&#34;), @HostState in root file, @State in other files&#xA;   --parseFuncBody                        Parse API info within body of functions in go files, disabled by default (default: false)&#xA;   --help, -h                             show help (default: false)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;swag fmt -h&#xA;NAME:&#xA;   swag fmt - format swag comments&#xA;&#xA;USAGE:&#xA;   swag fmt [command options] [arguments...]&#xA;&#xA;OPTIONS:&#xA;   --dir value, -d value          Directories you want to parse,comma separated and general-info file must be in the first one (default: &#34;./&#34;)&#xA;   --exclude value                Exclude directories and files when searching, comma separated&#xA;   --generalInfo value, -g value  Go file path in which &#39;swagger general API Info&#39; is written (default: &#34;main.go&#34;)&#xA;   --help, -h                     show help (default: false)&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Supported Web Frameworks&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://github.com/swaggo/gin-swagger&#34;&gt;gin&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://github.com/swaggo/echo-swagger&#34;&gt;echo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/swaggo/buffalo-swagger&#34;&gt;buffalo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/swaggo/http-swagger&#34;&gt;net/http&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/swaggo/http-swagger&#34;&gt;gorilla/mux&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/swaggo/http-swagger&#34;&gt;go-chi/chi&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/i-love-flamingo/swagger&#34;&gt;flamingo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/gofiber/swagger&#34;&gt;fiber&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Nerzal/atreugo-swagger&#34;&gt;atreugo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hertz-contrib/swagger&#34;&gt;hertz&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How to use it with Gin&lt;/h2&gt; &#xA;&lt;p&gt;Find the example source code &lt;a href=&#34;https://github.com/swaggo/swag/tree/master/example/celler&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Finish the steps in &lt;a href=&#34;https://raw.githubusercontent.com/swaggo/swag/master/#getting-started&#34;&gt;Getting started&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;After using &lt;code&gt;swag init&lt;/code&gt; to generate Swagger 2.0 docs, import the following packages:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;import &#34;github.com/swaggo/gin-swagger&#34; // gin-swagger middleware&#xA;import &#34;github.com/swaggo/files&#34; // swagger embed files&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Add &lt;a href=&#34;https://raw.githubusercontent.com/swaggo/swag/master/#general-api-info&#34;&gt;General API&lt;/a&gt; annotations in &lt;code&gt;main.go&lt;/code&gt; code:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// @title           Swagger Example API&#xA;// @version         1.0&#xA;// @description     This is a sample server celler server.&#xA;// @termsOfService  http://swagger.io/terms/&#xA;&#xA;// @contact.name   API Support&#xA;// @contact.url    http://www.swagger.io/support&#xA;// @contact.email  support@swagger.io&#xA;&#xA;// @license.name  Apache 2.0&#xA;// @license.url   http://www.apache.org/licenses/LICENSE-2.0.html&#xA;&#xA;// @host      localhost:8080&#xA;// @BasePath  /api/v1&#xA;&#xA;// @securityDefinitions.basic  BasicAuth&#xA;&#xA;// @externalDocs.description  OpenAPI&#xA;// @externalDocs.url          https://swagger.io/resources/open-api/&#xA;func main() {&#xA;&#x9;r := gin.Default()&#xA;&#xA;&#x9;c := controller.NewController()&#xA;&#xA;&#x9;v1 := r.Group(&#34;/api/v1&#34;)&#xA;&#x9;{&#xA;&#x9;&#x9;accounts := v1.Group(&#34;/accounts&#34;)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;accounts.GET(&#34;:id&#34;, c.ShowAccount)&#xA;&#x9;&#x9;&#x9;accounts.GET(&#34;&#34;, c.ListAccounts)&#xA;&#x9;&#x9;&#x9;accounts.POST(&#34;&#34;, c.AddAccount)&#xA;&#x9;&#x9;&#x9;accounts.DELETE(&#34;:id&#34;, c.DeleteAccount)&#xA;&#x9;&#x9;&#x9;accounts.PATCH(&#34;:id&#34;, c.UpdateAccount)&#xA;&#x9;&#x9;&#x9;accounts.POST(&#34;:id/images&#34;, c.UploadAccountImage)&#xA;&#x9;&#x9;}&#xA;    //...&#xA;&#x9;}&#xA;&#x9;r.GET(&#34;/swagger/*any&#34;, ginSwagger.WrapHandler(swaggerFiles.Handler))&#xA;&#x9;r.Run(&#34;:8080&#34;)&#xA;}&#xA;//...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Additionally some general API info can be set dynamically. The generated code package &lt;code&gt;docs&lt;/code&gt; exports &lt;code&gt;SwaggerInfo&lt;/code&gt; variable which we can use to set the title, description, version, host and base path programmatically. Example using Gin:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;github.com/gin-gonic/gin&#34;&#xA;&#x9;&#34;github.com/swaggo/files&#34;&#xA;&#x9;&#34;github.com/swaggo/gin-swagger&#34;&#xA;&#xA;&#x9;&#34;./docs&#34; // docs is generated by Swag CLI, you have to import it.&#xA;)&#xA;&#xA;// @contact.name   API Support&#xA;// @contact.url    http://www.swagger.io/support&#xA;// @contact.email  support@swagger.io&#xA;&#xA;// @license.name  Apache 2.0&#xA;// @license.url   http://www.apache.org/licenses/LICENSE-2.0.html&#xA;func main() {&#xA;&#xA;&#x9;// programmatically set swagger info&#xA;&#x9;docs.SwaggerInfo.Title = &#34;Swagger Example API&#34;&#xA;&#x9;docs.SwaggerInfo.Description = &#34;This is a sample server Petstore server.&#34;&#xA;&#x9;docs.SwaggerInfo.Version = &#34;1.0&#34;&#xA;&#x9;docs.SwaggerInfo.Host = &#34;petstore.swagger.io&#34;&#xA;&#x9;docs.SwaggerInfo.BasePath = &#34;/v2&#34;&#xA;&#x9;docs.SwaggerInfo.Schemes = []string{&#34;http&#34;, &#34;https&#34;}&#xA;&#xA;&#x9;r := gin.New()&#xA;&#xA;&#x9;// use ginSwagger middleware to serve the API docs&#xA;&#x9;r.GET(&#34;/swagger/*any&#34;, ginSwagger.WrapHandler(swaggerFiles.Handler))&#xA;&#xA;&#x9;r.Run()&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Add &lt;a href=&#34;https://raw.githubusercontent.com/swaggo/swag/master/#api-operation&#34;&gt;API Operation&lt;/a&gt; annotations in &lt;code&gt;controller&lt;/code&gt; code&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package controller&#xA;&#xA;import (&#xA;    &#34;fmt&#34;&#xA;    &#34;net/http&#34;&#xA;    &#34;strconv&#34;&#xA;&#xA;    &#34;github.com/gin-gonic/gin&#34;&#xA;    &#34;github.com/swaggo/swag/example/celler/httputil&#34;&#xA;    &#34;github.com/swaggo/swag/example/celler/model&#34;&#xA;)&#xA;&#xA;// ShowAccount godoc&#xA;// @Summary      Show an account&#xA;// @Description  get string by ID&#xA;// @Tags         accounts&#xA;// @Accept       json&#xA;// @Produce      json&#xA;// @Param        id   path      int  true  &#34;Account ID&#34;&#xA;// @Success      200  {object}  model.Account&#xA;// @Failure      400  {object}  httputil.HTTPError&#xA;// @Failure      404  {object}  httputil.HTTPError&#xA;// @Failure      500  {object}  httputil.HTTPError&#xA;// @Router       /accounts/{id} [get]&#xA;func (c *Controller) ShowAccount(ctx *gin.Context) {&#xA;  id := ctx.Param(&#34;id&#34;)&#xA;  aid, err := strconv.Atoi(id)&#xA;  if err != nil {&#xA;    httputil.NewError(ctx, http.StatusBadRequest, err)&#xA;    return&#xA;  }&#xA;  account, err := model.AccountOne(aid)&#xA;  if err != nil {&#xA;    httputil.NewError(ctx, http.StatusNotFound, err)&#xA;    return&#xA;  }&#xA;  ctx.JSON(http.StatusOK, account)&#xA;}&#xA;&#xA;// ListAccounts godoc&#xA;// @Summary      List accounts&#xA;// @Description  get accounts&#xA;// @Tags         accounts&#xA;// @Accept       json&#xA;// @Produce      json&#xA;// @Param        q    query     string  false  &#34;name search by q&#34;  Format(email)&#xA;// @Success      200  {array}   model.Account&#xA;// @Failure      400  {object}  httputil.HTTPError&#xA;// @Failure      404  {object}  httputil.HTTPError&#xA;// @Failure      500  {object}  httputil.HTTPError&#xA;// @Router       /accounts [get]&#xA;func (c *Controller) ListAccounts(ctx *gin.Context) {&#xA;  q := ctx.Request.URL.Query().Get(&#34;q&#34;)&#xA;  accounts, err := model.AccountsAll(q)&#xA;  if err != nil {&#xA;    httputil.NewError(ctx, http.StatusNotFound, err)&#xA;    return&#xA;  }&#xA;  ctx.JSON(http.StatusOK, accounts)&#xA;}&#xA;//...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;swag init&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;Run your app, and browse to &lt;a href=&#34;http://localhost:8080/swagger/index.html&#34;&gt;http://localhost:8080/swagger/index.html&lt;/a&gt;. You will see Swagger 2.0 Api documents as shown below:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/swaggo/swag/master/assets/swagger-image.png&#34; alt=&#34;swagger_index.html&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;The swag formatter&lt;/h2&gt; &#xA;&lt;p&gt;The Swag Comments can be automatically formatted, just like &#39;go fmt&#39;. Find the result of formatting &lt;a href=&#34;https://github.com/swaggo/swag/tree/master/example/celler&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Usage:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;swag fmt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Exclude folder：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;swag fmt -d ./ --exclude ./internal&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When using &lt;code&gt;swag fmt&lt;/code&gt;, you need to ensure that you have a doc comment for the function to ensure correct formatting. This is due to &lt;code&gt;swag fmt&lt;/code&gt; indenting swag comments with tabs, which is only allowed &lt;em&gt;after&lt;/em&gt; a standard doc comment.&lt;/p&gt; &#xA;&lt;p&gt;For example, use&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// ListAccounts lists all existing accounts&#xA;//&#xA;//  @Summary      List accounts&#xA;//  @Description  get accounts&#xA;//  @Tags         accounts&#xA;//  @Accept       json&#xA;//  @Produce      json&#xA;//  @Param        q    query     string  false  &#34;name search by q&#34;  Format(email)&#xA;//  @Success      200  {array}   model.Account&#xA;//  @Failure      400  {object}  httputil.HTTPError&#xA;//  @Failure      404  {object}  httputil.HTTPError&#xA;//  @Failure      500  {object}  httputil.HTTPError&#xA;//  @Router       /accounts [get]&#xA;func (c *Controller) ListAccounts(ctx *gin.Context) {&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Implementation Status&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://swagger.io/docs/specification/2-0/basic-structure/&#34;&gt;Swagger 2.0 document&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Basic Structure&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; API Host and Base Path&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Paths and Operations&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Describing Parameters&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Describing Request Body&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Describing Responses&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; MIME Types&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Authentication &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Basic Authentication&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; API Keys&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Adding Examples&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; File Upload&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Enums&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Grouping Operations With Tags&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Swagger Extensions&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Declarative Comments Format&lt;/h1&gt; &#xA;&lt;h2&gt;General API Info&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt; &lt;a href=&#34;https://github.com/swaggo/swag/raw/master/example/celler/main.go&#34;&gt;celler/main.go&lt;/a&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;annotation&lt;/th&gt; &#xA;   &lt;th&gt;description&lt;/th&gt; &#xA;   &lt;th&gt;example&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;title&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Required.&lt;/strong&gt; The title of the application.&lt;/td&gt; &#xA;   &lt;td&gt;// @title Swagger Example API&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;version&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Required.&lt;/strong&gt; Provides the version of the application API.&lt;/td&gt; &#xA;   &lt;td&gt;// @version 1.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;description&lt;/td&gt; &#xA;   &lt;td&gt;A short description of the application.&lt;/td&gt; &#xA;   &lt;td&gt;// @description This is a sample server celler server.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;tag.name&lt;/td&gt; &#xA;   &lt;td&gt;Name of a tag.&lt;/td&gt; &#xA;   &lt;td&gt;// @tag.name This is the name of the tag&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;tag.description&lt;/td&gt; &#xA;   &lt;td&gt;Description of the tag&lt;/td&gt; &#xA;   &lt;td&gt;// @tag.description Cool Description&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;tag.docs.url&lt;/td&gt; &#xA;   &lt;td&gt;Url of the external Documentation of the tag&lt;/td&gt; &#xA;   &lt;td&gt;// @tag.docs.url &lt;a href=&#34;https://example.com&#34;&gt;https://example.com&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;tag.docs.description&lt;/td&gt; &#xA;   &lt;td&gt;Description of the external Documentation of the tag&lt;/td&gt; &#xA;   &lt;td&gt;// @tag.docs.description Best example documentation&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;termsOfService&lt;/td&gt; &#xA;   &lt;td&gt;The Terms of Service for the API.&lt;/td&gt; &#xA;   &lt;td&gt;// @termsOfService &lt;a href=&#34;http://swagger.io/terms/&#34;&gt;http://swagger.io/terms/&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;contact.name&lt;/td&gt; &#xA;   &lt;td&gt;The contact information for the exposed API.&lt;/td&gt; &#xA;   &lt;td&gt;// @contact.name API Support&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;contact.url&lt;/td&gt; &#xA;   &lt;td&gt;The URL pointing to the contact information. MUST be in the format of a URL.&lt;/td&gt; &#xA;   &lt;td&gt;// @contact.url &lt;a href=&#34;http://www.swagger.io/support&#34;&gt;http://www.swagger.io/support&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;contact.email&lt;/td&gt; &#xA;   &lt;td&gt;The email address of the contact person/organization. MUST be in the format of an email address.&lt;/td&gt; &#xA;   &lt;td&gt;// @contact.email &lt;a href=&#34;mailto:support@swagger.io&#34;&gt;support@swagger.io&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;license.name&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Required.&lt;/strong&gt; The license name used for the API.&lt;/td&gt; &#xA;   &lt;td&gt;// @license.name Apache 2.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;license.url&lt;/td&gt; &#xA;   &lt;td&gt;A URL to the license used for the API. MUST be in the format of a URL.&lt;/td&gt; &#xA;   &lt;td&gt;// @license.url &lt;a href=&#34;http://www.apache.org/licenses/LICENSE-2.0.html&#34;&gt;http://www.apache.org/licenses/LICENSE-2.0.html&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;host&lt;/td&gt; &#xA;   &lt;td&gt;The host (name or ip) serving the API.&lt;/td&gt; &#xA;   &lt;td&gt;// @host localhost:8080&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;BasePath&lt;/td&gt; &#xA;   &lt;td&gt;The base path on which the API is served.&lt;/td&gt; &#xA;   &lt;td&gt;// @BasePath /api/v1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;accept&lt;/td&gt; &#xA;   &lt;td&gt;A list of MIME types the APIs can consume. Note that Accept only affects operations with a request body, such as POST, PUT and PATCH. Value MUST be as described under &lt;a href=&#34;https://raw.githubusercontent.com/swaggo/swag/master/#mime-types&#34;&gt;Mime Types&lt;/a&gt;.&lt;/td&gt; &#xA;   &lt;td&gt;// @accept json&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;produce&lt;/td&gt; &#xA;   &lt;td&gt;A list of MIME types the APIs can produce. Value MUST be as described under &lt;a href=&#34;https://raw.githubusercontent.com/swaggo/swag/master/#mime-types&#34;&gt;Mime Types&lt;/a&gt;.&lt;/td&gt; &#xA;   &lt;td&gt;// @produce json&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;query.collection.format&lt;/td&gt; &#xA;   &lt;td&gt;The default collection(array) param format in query,enums:csv,multi,pipes,tsv,ssv. If not set, csv is the default.&lt;/td&gt; &#xA;   &lt;td&gt;// @query.collection.format multi&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;schemes&lt;/td&gt; &#xA;   &lt;td&gt;The transfer protocol for the operation that separated by spaces.&lt;/td&gt; &#xA;   &lt;td&gt;// @schemes http https&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;externalDocs.description&lt;/td&gt; &#xA;   &lt;td&gt;Description of the external document.&lt;/td&gt; &#xA;   &lt;td&gt;// @externalDocs.description OpenAPI&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;externalDocs.url&lt;/td&gt; &#xA;   &lt;td&gt;URL of the external document.&lt;/td&gt; &#xA;   &lt;td&gt;// @externalDocs.url &lt;a href=&#34;https://swagger.io/resources/open-api/&#34;&gt;https://swagger.io/resources/open-api/&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;x-name&lt;/td&gt; &#xA;   &lt;td&gt;The extension key, must be start by x- and take only json value&lt;/td&gt; &#xA;   &lt;td&gt;// @x-example-key {&#34;key&#34;: &#34;value&#34;}&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Using markdown descriptions&lt;/h3&gt; &#xA;&lt;p&gt;When a short string in your documentation is insufficient, or you need images, code examples and things like that you may want to use markdown descriptions. In order to use markdown descriptions use the following annotations.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;annotation&lt;/th&gt; &#xA;   &lt;th&gt;description&lt;/th&gt; &#xA;   &lt;th&gt;example&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;title&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Required.&lt;/strong&gt; The title of the application.&lt;/td&gt; &#xA;   &lt;td&gt;// @title Swagger Example API&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;version&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Required.&lt;/strong&gt; Provides the version of the application API.&lt;/td&gt; &#xA;   &lt;td&gt;// @version 1.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;description.markdown&lt;/td&gt; &#xA;   &lt;td&gt;A short description of the application. Parsed from the api.md file. This is an alternative to @description&lt;/td&gt; &#xA;   &lt;td&gt;// @description.markdown No value needed, this parses the description from api.md&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;tag.name&lt;/td&gt; &#xA;   &lt;td&gt;Name of a tag.&lt;/td&gt; &#xA;   &lt;td&gt;// @tag.name This is the name of the tag&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;tag.description.markdown&lt;/td&gt; &#xA;   &lt;td&gt;Description of the tag this is an alternative to tag.description. The description will be read from a file named like tagname.md&lt;/td&gt; &#xA;   &lt;td&gt;// @tag.description.markdown&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;tag.x-name&lt;/td&gt; &#xA;   &lt;td&gt;The extension key, must be start by x- and take only string value&lt;/td&gt; &#xA;   &lt;td&gt;// @x-example-key value&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;API Operation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt; &lt;a href=&#34;https://github.com/swaggo/swag/tree/master/example/celler/controller&#34;&gt;celler/controller&lt;/a&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;annotation&lt;/th&gt; &#xA;   &lt;th&gt;description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;description&lt;/td&gt; &#xA;   &lt;td&gt;A verbose explanation of the operation behavior.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;description.markdown&lt;/td&gt; &#xA;   &lt;td&gt;A short description of the application. The description will be read from a file. E.g. &lt;code&gt;@description.markdown details&lt;/code&gt; will load &lt;code&gt;details.md&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;id&lt;/td&gt; &#xA;   &lt;td&gt;A unique string used to identify the operation. Must be unique among all API operations.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;tags&lt;/td&gt; &#xA;   &lt;td&gt;A list of tags to each API operation that separated by commas.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;summary&lt;/td&gt; &#xA;   &lt;td&gt;A short summary of what the operation does.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;accept&lt;/td&gt; &#xA;   &lt;td&gt;A list of MIME types the APIs can consume. Note that Accept only affects operations with a request body, such as POST, PUT and PATCH. Value MUST be as described under &lt;a href=&#34;https://raw.githubusercontent.com/swaggo/swag/master/#mime-types&#34;&gt;Mime Types&lt;/a&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;produce&lt;/td&gt; &#xA;   &lt;td&gt;A list of MIME types the APIs can produce. Value MUST be as described under &lt;a href=&#34;https://raw.githubusercontent.com/swaggo/swag/master/#mime-types&#34;&gt;Mime Types&lt;/a&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;param&lt;/td&gt; &#xA;   &lt;td&gt;Parameters that separated by spaces. &lt;code&gt;param name&lt;/code&gt;,&lt;code&gt;param type&lt;/code&gt;,&lt;code&gt;data type&lt;/code&gt;,&lt;code&gt;is mandatory?&lt;/code&gt;,&lt;code&gt;comment&lt;/code&gt; &lt;code&gt;attribute(optional)&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;security&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/swaggo/swag/master/#security&#34;&gt;Security&lt;/a&gt; to each API operation.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;success&lt;/td&gt; &#xA;   &lt;td&gt;Success response that separated by spaces. &lt;code&gt;return code or default&lt;/code&gt;,&lt;code&gt;{param type}&lt;/code&gt;,&lt;code&gt;data type&lt;/code&gt;,&lt;code&gt;comment&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;failure&lt;/td&gt; &#xA;   &lt;td&gt;Failure response that separated by spaces. &lt;code&gt;return code or default&lt;/code&gt;,&lt;code&gt;{param type}&lt;/code&gt;,&lt;code&gt;data type&lt;/code&gt;,&lt;code&gt;comment&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;response&lt;/td&gt; &#xA;   &lt;td&gt;As same as &lt;code&gt;success&lt;/code&gt; and &lt;code&gt;failure&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;header&lt;/td&gt; &#xA;   &lt;td&gt;Header in response that separated by spaces. &lt;code&gt;return code&lt;/code&gt;,&lt;code&gt;{param type}&lt;/code&gt;,&lt;code&gt;data type&lt;/code&gt;,&lt;code&gt;comment&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;router&lt;/td&gt; &#xA;   &lt;td&gt;Path definition that separated by spaces. &lt;code&gt;path&lt;/code&gt;,&lt;code&gt;[httpMethod]&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;deprecatedrouter&lt;/td&gt; &#xA;   &lt;td&gt;As same as router, but deprecated.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;x-name&lt;/td&gt; &#xA;   &lt;td&gt;The extension key, must be start by x- and take only json value.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;x-codeSample&lt;/td&gt; &#xA;   &lt;td&gt;Optional Markdown usage. take &lt;code&gt;file&lt;/code&gt; as parameter. This will then search for a file named like the summary in the given folder.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;deprecated&lt;/td&gt; &#xA;   &lt;td&gt;Mark endpoint as deprecated.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Mime Types&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;swag&lt;/code&gt; accepts all MIME Types which are in the correct format, that is, match &lt;code&gt;*/*&lt;/code&gt;. Besides that, &lt;code&gt;swag&lt;/code&gt; also accepts aliases for some MIME Types as follows:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Alias&lt;/th&gt; &#xA;   &lt;th&gt;MIME Type&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;json&lt;/td&gt; &#xA;   &lt;td&gt;application/json&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;xml&lt;/td&gt; &#xA;   &lt;td&gt;text/xml&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;plain&lt;/td&gt; &#xA;   &lt;td&gt;text/plain&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;html&lt;/td&gt; &#xA;   &lt;td&gt;text/html&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;mpfd&lt;/td&gt; &#xA;   &lt;td&gt;multipart/form-data&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;x-www-form-urlencoded&lt;/td&gt; &#xA;   &lt;td&gt;application/x-www-form-urlencoded&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;json-api&lt;/td&gt; &#xA;   &lt;td&gt;application/vnd.api+json&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;json-stream&lt;/td&gt; &#xA;   &lt;td&gt;application/x-json-stream&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;octet-stream&lt;/td&gt; &#xA;   &lt;td&gt;application/octet-stream&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;png&lt;/td&gt; &#xA;   &lt;td&gt;image/png&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;jpeg&lt;/td&gt; &#xA;   &lt;td&gt;image/jpeg&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;gif&lt;/td&gt; &#xA;   &lt;td&gt;image/gif&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Param Type&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;query&lt;/li&gt; &#xA; &lt;li&gt;path&lt;/li&gt; &#xA; &lt;li&gt;header&lt;/li&gt; &#xA; &lt;li&gt;body&lt;/li&gt; &#xA; &lt;li&gt;formData&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Data Type&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;string (string)&lt;/li&gt; &#xA; &lt;li&gt;integer (int, uint, uint32, uint64)&lt;/li&gt; &#xA; &lt;li&gt;number (float32)&lt;/li&gt; &#xA; &lt;li&gt;boolean (bool)&lt;/li&gt; &#xA; &lt;li&gt;file (param data type when uploading)&lt;/li&gt; &#xA; &lt;li&gt;user defined struct&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Security&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;annotation&lt;/th&gt; &#xA;   &lt;th&gt;description&lt;/th&gt; &#xA;   &lt;th&gt;parameters&lt;/th&gt; &#xA;   &lt;th&gt;example&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;securitydefinitions.basic&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://swagger.io/docs/specification/2-0/authentication/basic-authentication/&#34;&gt;Basic&lt;/a&gt; auth.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;// @securityDefinitions.basic BasicAuth&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;securitydefinitions.apikey&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://swagger.io/docs/specification/2-0/authentication/api-keys/&#34;&gt;API key&lt;/a&gt; auth.&lt;/td&gt; &#xA;   &lt;td&gt;in, name, description&lt;/td&gt; &#xA;   &lt;td&gt;// @securityDefinitions.apikey ApiKeyAuth&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;securitydefinitions.oauth2.application&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://swagger.io/docs/specification/authentication/oauth2/&#34;&gt;OAuth2 application&lt;/a&gt; auth.&lt;/td&gt; &#xA;   &lt;td&gt;tokenUrl, scope, description&lt;/td&gt; &#xA;   &lt;td&gt;// @securitydefinitions.oauth2.application OAuth2Application&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;securitydefinitions.oauth2.implicit&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://swagger.io/docs/specification/authentication/oauth2/&#34;&gt;OAuth2 implicit&lt;/a&gt; auth.&lt;/td&gt; &#xA;   &lt;td&gt;authorizationUrl, scope, description&lt;/td&gt; &#xA;   &lt;td&gt;// @securitydefinitions.oauth2.implicit OAuth2Implicit&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;securitydefinitions.oauth2.password&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://swagger.io/docs/specification/authentication/oauth2/&#34;&gt;OAuth2 password&lt;/a&gt; auth.&lt;/td&gt; &#xA;   &lt;td&gt;tokenUrl, scope, description&lt;/td&gt; &#xA;   &lt;td&gt;// @securitydefinitions.oauth2.password OAuth2Password&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;securitydefinitions.oauth2.accessCode&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://swagger.io/docs/specification/authentication/oauth2/&#34;&gt;OAuth2 access code&lt;/a&gt; auth.&lt;/td&gt; &#xA;   &lt;td&gt;tokenUrl, authorizationUrl, scope, description&lt;/td&gt; &#xA;   &lt;td&gt;// @securitydefinitions.oauth2.accessCode OAuth2AccessCode&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;parameters annotation&lt;/th&gt; &#xA;   &lt;th&gt;example&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;in&lt;/td&gt; &#xA;   &lt;td&gt;// @in header&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;name&lt;/td&gt; &#xA;   &lt;td&gt;// @name Authorization&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;tokenUrl&lt;/td&gt; &#xA;   &lt;td&gt;// @tokenUrl &lt;a href=&#34;https://example.com/oauth/token&#34;&gt;https://example.com/oauth/token&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;authorizationurl&lt;/td&gt; &#xA;   &lt;td&gt;// @authorizationurl &lt;a href=&#34;https://example.com/oauth/authorize&#34;&gt;https://example.com/oauth/authorize&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;scope.hoge&lt;/td&gt; &#xA;   &lt;td&gt;// @scope.write Grants write access&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;description&lt;/td&gt; &#xA;   &lt;td&gt;// @description OAuth protects our entity endpoints&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Attribute&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// @Param   enumstring  query     string     false  &#34;string enums&#34;       Enums(A, B, C)&#xA;// @Param   enumint     query     int        false  &#34;int enums&#34;          Enums(1, 2, 3)&#xA;// @Param   enumnumber  query     number     false  &#34;int enums&#34;          Enums(1.1, 1.2, 1.3)&#xA;// @Param   string      query     string     false  &#34;string valid&#34;       minlength(5)  maxlength(10)&#xA;// @Param   int         query     int        false  &#34;int valid&#34;          minimum(1)    maximum(10)&#xA;// @Param   default     query     string     false  &#34;string default&#34;     default(A)&#xA;// @Param   example     query     string     false  &#34;string example&#34;     example(string)&#xA;// @Param   collection  query     []string   false  &#34;string collection&#34;  collectionFormat(multi)&#xA;// @Param   extensions  query     []string   false  &#34;string collection&#34;  extensions(x-example=test,x-nullable)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It also works for the struct fields:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type Foo struct {&#xA;    Bar string `minLength:&#34;4&#34; maxLength:&#34;16&#34; example:&#34;random string&#34;`&#xA;    Baz int `minimum:&#34;10&#34; maximum:&#34;20&#34; default:&#34;15&#34;`&#xA;    Qux []string `enums:&#34;foo,bar,baz&#34;`&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Available&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Field Name&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a name=&#34;validate&#34;&gt;&lt;/a&gt;validate&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Determines the validation for the parameter. Possible values are: &lt;code&gt;required,optional&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a name=&#34;parameterDefault&#34;&gt;&lt;/a&gt;default&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;*&lt;/td&gt; &#xA;   &lt;td&gt;Declares the value of the parameter that the server will use if none is provided, for example a &#34;count&#34; to control the number of results per page might default to 100 if not supplied by the client in the request. (Note: &#34;default&#34; has no meaning for required parameters.) See &lt;a href=&#34;https://tools.ietf.org/html/draft-fge-json-schema-validation-00#section-6.2&#34;&gt;https://tools.ietf.org/html/draft-fge-json-schema-validation-00#section-6.2&lt;/a&gt;. Unlike JSON Schema this value MUST conform to the defined &lt;a href=&#34;https://raw.githubusercontent.com/swaggo/swag/master/#parameterType&#34;&gt;&lt;code&gt;type&lt;/code&gt;&lt;/a&gt; for this parameter.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a name=&#34;parameterMaximum&#34;&gt;&lt;/a&gt;maximum&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;number&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;See &lt;a href=&#34;https://tools.ietf.org/html/draft-fge-json-schema-validation-00#section-5.1.2&#34;&gt;https://tools.ietf.org/html/draft-fge-json-schema-validation-00#section-5.1.2&lt;/a&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a name=&#34;parameterMinimum&#34;&gt;&lt;/a&gt;minimum&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;number&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;See &lt;a href=&#34;https://tools.ietf.org/html/draft-fge-json-schema-validation-00#section-5.1.3&#34;&gt;https://tools.ietf.org/html/draft-fge-json-schema-validation-00#section-5.1.3&lt;/a&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a name=&#34;parameterMultipleOf&#34;&gt;&lt;/a&gt;multipleOf&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;number&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;See &lt;a href=&#34;https://tools.ietf.org/html/draft-fge-json-schema-validation-00#section-5.1.1&#34;&gt;https://tools.ietf.org/html/draft-fge-json-schema-validation-00#section-5.1.1&lt;/a&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a name=&#34;parameterMaxLength&#34;&gt;&lt;/a&gt;maxLength&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;integer&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;See &lt;a href=&#34;https://tools.ietf.org/html/draft-fge-json-schema-validation-00#section-5.2.1&#34;&gt;https://tools.ietf.org/html/draft-fge-json-schema-validation-00#section-5.2.1&lt;/a&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a name=&#34;parameterMinLength&#34;&gt;&lt;/a&gt;minLength&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;integer&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;See &lt;a href=&#34;https://tools.ietf.org/html/draft-fge-json-schema-validation-00#section-5.2.2&#34;&gt;https://tools.ietf.org/html/draft-fge-json-schema-validation-00#section-5.2.2&lt;/a&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a name=&#34;parameterEnums&#34;&gt;&lt;/a&gt;enums&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;[*]&lt;/td&gt; &#xA;   &lt;td&gt;See &lt;a href=&#34;https://tools.ietf.org/html/draft-fge-json-schema-validation-00#section-5.5.1&#34;&gt;https://tools.ietf.org/html/draft-fge-json-schema-validation-00#section-5.5.1&lt;/a&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a name=&#34;parameterFormat&#34;&gt;&lt;/a&gt;format&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The extending format for the previously mentioned &lt;a href=&#34;https://raw.githubusercontent.com/swaggo/swag/master/#parameterType&#34;&gt;&lt;code&gt;type&lt;/code&gt;&lt;/a&gt;. See &lt;a href=&#34;https://swagger.io/specification/v2/#dataTypeFormat&#34;&gt;Data Type Formats&lt;/a&gt; for further details.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a name=&#34;parameterCollectionFormat&#34;&gt;&lt;/a&gt;collectionFormat&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Determines the format of the array if type array is used. Possible values are: &#xA;    &lt;ul&gt;&#xA;     &lt;li&gt;&lt;code&gt;csv&lt;/code&gt; - comma separated values &lt;code&gt;foo,bar&lt;/code&gt;. &lt;/li&gt;&#xA;     &lt;li&gt;&lt;code&gt;ssv&lt;/code&gt; - space separated values &lt;code&gt;foo bar&lt;/code&gt;. &lt;/li&gt;&#xA;     &lt;li&gt;&lt;code&gt;tsv&lt;/code&gt; - tab separated values &lt;code&gt;foo\tbar&lt;/code&gt;. &lt;/li&gt;&#xA;     &lt;li&gt;&lt;code&gt;pipes&lt;/code&gt; - pipe separated values &lt;code&gt;foo|bar&lt;/code&gt;. &lt;/li&gt;&#xA;     &lt;li&gt;&lt;code&gt;multi&lt;/code&gt; - corresponds to multiple parameter instances instead of multiple values for a single instance &lt;code&gt;foo=bar&amp;amp;foo=baz&lt;/code&gt;. This is valid only for parameters &lt;a href=&#34;https://raw.githubusercontent.com/swaggo/swag/master/#parameterIn&#34;&gt;&lt;code&gt;in&lt;/code&gt;&lt;/a&gt; &#34;query&#34; or &#34;formData&#34;. &lt;/li&gt;&#xA;    &lt;/ul&gt; Default value is &lt;code&gt;csv&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a name=&#34;parameterExample&#34;&gt;&lt;/a&gt;example&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;*&lt;/td&gt; &#xA;   &lt;td&gt;Declares the example for the parameter value&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a name=&#34;parameterExtensions&#34;&gt;&lt;/a&gt;extensions&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Add extension to parameters.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Future&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Field Name&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a name=&#34;parameterPattern&#34;&gt;&lt;/a&gt;pattern&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;See &lt;a href=&#34;https://tools.ietf.org/html/draft-fge-json-schema-validation-00#section-5.2.3&#34;&gt;https://tools.ietf.org/html/draft-fge-json-schema-validation-00#section-5.2.3&lt;/a&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a name=&#34;parameterMaxItems&#34;&gt;&lt;/a&gt;maxItems&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;integer&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;See &lt;a href=&#34;https://tools.ietf.org/html/draft-fge-json-schema-validation-00#section-5.3.2&#34;&gt;https://tools.ietf.org/html/draft-fge-json-schema-validation-00#section-5.3.2&lt;/a&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a name=&#34;parameterMinItems&#34;&gt;&lt;/a&gt;minItems&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;integer&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;See &lt;a href=&#34;https://tools.ietf.org/html/draft-fge-json-schema-validation-00#section-5.3.3&#34;&gt;https://tools.ietf.org/html/draft-fge-json-schema-validation-00#section-5.3.3&lt;/a&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a name=&#34;parameterUniqueItems&#34;&gt;&lt;/a&gt;uniqueItems&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;boolean&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;See &lt;a href=&#34;https://tools.ietf.org/html/draft-fge-json-schema-validation-00#section-5.3.4&#34;&gt;https://tools.ietf.org/html/draft-fge-json-schema-validation-00#section-5.3.4&lt;/a&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;h3&gt;Descriptions over multiple lines&lt;/h3&gt; &#xA;&lt;p&gt;You can add descriptions spanning multiple lines in either the general api description or routes definitions like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// @description This is the first line&#xA;// @description This is the second line&#xA;// @description And so forth.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;User defined structure with an array type&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// @Success 200 {array} model.Account &amp;lt;-- This is a user defined struct.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package model&#xA;&#xA;type Account struct {&#xA;    ID   int    `json:&#34;id&#34; example:&#34;1&#34;`&#xA;    Name string `json:&#34;name&#34; example:&#34;account name&#34;`&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Function scoped struct declaration&lt;/h3&gt; &#xA;&lt;p&gt;You can declare your request response structs inside a function body. You must have to follow the naming convention &lt;code&gt;&amp;lt;package-name&amp;gt;.&amp;lt;function-name&amp;gt;.&amp;lt;struct-name&amp;gt; &lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;// @Param request body main.MyHandler.request true &#34;query params&#34;&#xA;// @Success 200 {object} main.MyHandler.response&#xA;// @Router /test [post]&#xA;func MyHandler() {&#xA;&#x9;type request struct {&#xA;&#x9;&#x9;RequestField string&#xA;&#x9;}&#xA;&#xA;&#x9;type response struct {&#xA;&#x9;&#x9;ResponseField string&#xA;&#x9;}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Model composition in response&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// JSONResult&#39;s data field will be overridden by the specific type proto.Order&#xA;@success 200 {object} jsonresult.JSONResult{data=proto.Order} &#34;desc&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type JSONResult struct {&#xA;    Code    int          `json:&#34;code&#34; `&#xA;    Message string       `json:&#34;message&#34;`&#xA;    Data    interface{}  `json:&#34;data&#34;`&#xA;}&#xA;&#xA;type Order struct { //in `proto` package&#xA;    Id  uint            `json:&#34;id&#34;`&#xA;    Data  interface{}   `json:&#34;data&#34;`&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;also support array of objects and primitive types as nested response&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;@success 200 {object} jsonresult.JSONResult{data=[]proto.Order} &#34;desc&#34;&#xA;@success 200 {object} jsonresult.JSONResult{data=string} &#34;desc&#34;&#xA;@success 200 {object} jsonresult.JSONResult{data=[]string} &#34;desc&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;overriding multiple fields. field will be added if not exists&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;@success 200 {object} jsonresult.JSONResult{data1=string,data2=[]string,data3=proto.Order,data4=[]proto.Order} &#34;desc&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;overriding deep-level fields&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type DeepObject struct { //in `proto` package&#xA;&#x9;...&#xA;}&#xA;@success 200 {object} jsonresult.JSONResult{data1=proto.Order{data=proto.DeepObject},data2=[]proto.Order{data=[]proto.DeepObject}} &#34;desc&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Add response request&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// @Param        X-MyHeader&#x9;  header    string    true   &#x9;&#34;MyHeader must be set for valid response&#34;&#xA;// @Param        X-API-VERSION    header    string    true   &#x9;&#34;API version eg.: 1.0&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Add response headers&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// @Success      200              {string}  string    &#34;ok&#34;&#xA;// @failure      400              {string}  string    &#34;error&#34;&#xA;// @response     default          {string}  string    &#34;other error&#34;&#xA;// @Header       200              {string}  Location  &#34;/entity/1&#34;&#xA;// @Header       200,400,default  {string}  Token     &#34;token&#34;&#xA;// @Header       all              {string}  Token2    &#34;token2&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Use multiple path params&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;/// ...&#xA;// @Param group_id   path int true &#34;Group ID&#34;&#xA;// @Param account_id path int true &#34;Account ID&#34;&#xA;// ...&#xA;// @Router /examples/groups/{group_id}/accounts/{account_id} [get]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Add multiple paths&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;/// ...&#xA;// @Param group_id path int true &#34;Group ID&#34;&#xA;// @Param user_id  path int true &#34;User ID&#34;&#xA;// ...&#xA;// @Router /examples/groups/{group_id}/user/{user_id}/address [put]&#xA;// @Router /examples/user/{user_id}/address [put]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Example value of struct&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type Account struct {&#xA;    ID   int    `json:&#34;id&#34; example:&#34;1&#34;`&#xA;    Name string `json:&#34;name&#34; example:&#34;account name&#34;`&#xA;    PhotoUrls []string `json:&#34;photo_urls&#34; example:&#34;http://test/image/1.jpg,http://test/image/2.jpg&#34;`&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;SchemaExample of body&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// @Param email body string true &#34;message/rfc822&#34; SchemaExample(Subject: Testmail\r\n\r\nBody Message\r\n)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Description of struct&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Account model info&#xA;// @Description User account information&#xA;// @Description with user id and username&#xA;type Account struct {&#xA;&#x9;// ID this is userid&#xA;&#x9;ID   int    `json:&#34;id&#34;`&#xA;&#x9;Name string `json:&#34;name&#34;` // This is Name&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/swaggo/swag/issues/708&#34;&gt;#708&lt;/a&gt; The parser handles only struct comments starting with &lt;code&gt;@Description&lt;/code&gt; attribute. But it writes all struct field comments as is.&lt;/p&gt; &#xA;&lt;p&gt;So, generated swagger doc as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&#34;Account&#34;: {&#xA;  &#34;type&#34;:&#34;object&#34;,&#xA;  &#34;description&#34;: &#34;User account information with user id and username&#34;&#xA;  &#34;properties&#34;: {&#xA;    &#34;id&#34;: {&#xA;      &#34;type&#34;: &#34;integer&#34;,&#xA;      &#34;description&#34;: &#34;ID this is userid&#34;&#xA;    },&#xA;    &#34;name&#34;: {&#xA;      &#34;type&#34;:&#34;string&#34;,&#xA;      &#34;description&#34;: &#34;This is Name&#34;&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Use swaggertype tag to supported custom type&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/swaggo/swag/issues/201#issuecomment-475479409&#34;&gt;#201&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type TimestampTime struct {&#xA;    time.Time&#xA;}&#xA;&#xA;///implement encoding.JSON.Marshaler interface&#xA;func (t *TimestampTime) MarshalJSON() ([]byte, error) {&#xA;    bin := make([]byte, 16)&#xA;    bin = strconv.AppendInt(bin[:0], t.Time.Unix(), 10)&#xA;    return bin, nil&#xA;}&#xA;&#xA;func (t *TimestampTime) UnmarshalJSON(bin []byte) error {&#xA;    v, err := strconv.ParseInt(string(bin), 10, 64)&#xA;    if err != nil {&#xA;        return err&#xA;    }&#xA;    t.Time = time.Unix(v, 0)&#xA;    return nil&#xA;}&#xA;///&#xA;&#xA;type Account struct {&#xA;    // Override primitive type by simply specifying it via `swaggertype` tag&#xA;    ID     sql.NullInt64 `json:&#34;id&#34; swaggertype:&#34;integer&#34;`&#xA;&#xA;    // Override struct type to a primitive type &#39;integer&#39; by specifying it via `swaggertype` tag&#xA;    RegisterTime TimestampTime `json:&#34;register_time&#34; swaggertype:&#34;primitive,integer&#34;`&#xA;&#xA;    // Array types can be overridden using &#34;array,&amp;lt;prim_type&amp;gt;&#34; format&#xA;    Coeffs []big.Float `json:&#34;coeffs&#34; swaggertype:&#34;array,number&#34;`&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/swaggo/swag/issues/379&#34;&gt;#379&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type CerticateKeyPair struct {&#xA;&#x9;Crt []byte `json:&#34;crt&#34; swaggertype:&#34;string&#34; format:&#34;base64&#34; example:&#34;U3dhZ2dlciByb2Nrcw==&#34;`&#xA;&#x9;Key []byte `json:&#34;key&#34; swaggertype:&#34;string&#34; format:&#34;base64&#34; example:&#34;U3dhZ2dlciByb2Nrcw==&#34;`&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;generated swagger doc as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;&#34;api.MyBinding&#34;: {&#xA;  &#34;type&#34;:&#34;object&#34;,&#xA;  &#34;properties&#34;:{&#xA;    &#34;crt&#34;:{&#xA;      &#34;type&#34;:&#34;string&#34;,&#xA;      &#34;format&#34;:&#34;base64&#34;,&#xA;      &#34;example&#34;:&#34;U3dhZ2dlciByb2Nrcw==&#34;&#xA;    },&#xA;    &#34;key&#34;:{&#xA;      &#34;type&#34;:&#34;string&#34;,&#xA;      &#34;format&#34;:&#34;base64&#34;,&#xA;      &#34;example&#34;:&#34;U3dhZ2dlciByb2Nrcw==&#34;&#xA;    }&#xA;  }&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Use global overrides to support a custom type&lt;/h3&gt; &#xA;&lt;p&gt;If you are using generated files, the &lt;a href=&#34;https://raw.githubusercontent.com/swaggo/swag/master/#use-swaggertype-tag-to-supported-custom-type&#34;&gt;&lt;code&gt;swaggertype&lt;/code&gt;&lt;/a&gt; or &lt;code&gt;swaggerignore&lt;/code&gt; tags may not be possible.&lt;/p&gt; &#xA;&lt;p&gt;By passing a mapping to swag with &lt;code&gt;--overridesFile&lt;/code&gt; you can tell swag to use one type in place of another wherever it appears. By default, if a &lt;code&gt;.swaggo&lt;/code&gt; file is present in the current directory it will be used.&lt;/p&gt; &#xA;&lt;p&gt;Go code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type MyStruct struct {&#xA;  ID     sql.NullInt64 `json:&#34;id&#34;`&#xA;  Name   sql.NullString `json:&#34;name&#34;`&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;.swaggo&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;// Replace all NullInt64 with int&#xA;replace database/sql.NullInt64 int&#xA;&#xA;// Don&#39;t include any fields of type database/sql.NullString in the swagger docs&#xA;skip    database/sql.NullString&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Possible directives are comments (beginning with &lt;code&gt;//&lt;/code&gt;), &lt;code&gt;replace path/to/a.type path/to/b.type&lt;/code&gt;, and &lt;code&gt;skip path/to/a.type&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;(Note that the full paths to any named types must be provided to prevent problems when multiple packages define a type with the same name)&lt;/p&gt; &#xA;&lt;p&gt;Rendered:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;&#34;types.MyStruct&#34;: {&#xA;  &#34;id&#34;: &#34;integer&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Use swaggerignore tag to exclude a field&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type Account struct {&#xA;    ID   string    `json:&#34;id&#34;`&#xA;    Name string     `json:&#34;name&#34;`&#xA;    Ignored int     `swaggerignore:&#34;true&#34;`&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Add extension info to struct field&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type Account struct {&#xA;    ID   string    `json:&#34;id&#34;   extensions:&#34;x-nullable,x-abc=def,!x-omitempty&#34;` // extensions fields must start with &#34;x-&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;generate swagger doc as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;&#34;Account&#34;: {&#xA;    &#34;type&#34;: &#34;object&#34;,&#xA;    &#34;properties&#34;: {&#xA;        &#34;id&#34;: {&#xA;            &#34;type&#34;: &#34;string&#34;,&#xA;            &#34;x-nullable&#34;: true,&#xA;            &#34;x-abc&#34;: &#34;def&#34;,&#xA;            &#34;x-omitempty&#34;: false&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Rename model to display&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-golang&#34;&gt;type Resp struct {&#xA;&#x9;Code int&#xA;}//@name Response&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;How to use security annotations&lt;/h3&gt; &#xA;&lt;p&gt;General API info.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// @securityDefinitions.basic BasicAuth&#xA;&#xA;// @securitydefinitions.oauth2.application OAuth2Application&#xA;// @tokenUrl https://example.com/oauth/token&#xA;// @scope.write Grants write access&#xA;// @scope.admin Grants read and write access to administrative information&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Each API operation.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// @Security ApiKeyAuth&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Make it OR condition&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// @Security ApiKeyAuth&#xA;// @Security OAuth2Application[write, admin]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Make it AND condition&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// @Security ApiKeyAuth &amp;amp;&amp;amp; firebase&#xA;// @Security OAuth2Application[write, admin] &amp;amp;&amp;amp; APIKeyAuth&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Add a description for enum items&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type Example struct {&#xA;&#x9;// Sort order:&#xA;&#x9;// * asc - Ascending, from A to Z.&#xA;&#x9;// * desc - Descending, from Z to A.&#xA;&#x9;Order string `enums:&#34;asc,desc&#34;`&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Generate only specific docs file types&lt;/h3&gt; &#xA;&lt;p&gt;By default &lt;code&gt;swag&lt;/code&gt; command generates Swagger specification in three different files/file types:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;docs.go&lt;/li&gt; &#xA; &lt;li&gt;swagger.json&lt;/li&gt; &#xA; &lt;li&gt;swagger.yaml&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you would like to limit a set of file types which should be generated you can use &lt;code&gt;--outputTypes&lt;/code&gt; (short &lt;code&gt;-ot&lt;/code&gt;) flag. Default value is &lt;code&gt;go,json,yaml&lt;/code&gt; - output types separated with comma. To limit output only to &lt;code&gt;go&lt;/code&gt; and &lt;code&gt;yaml&lt;/code&gt; files, you would write &lt;code&gt;go,yaml&lt;/code&gt;. With complete command that would be &lt;code&gt;swag init --outputTypes go,yaml&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;How to use Generics&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// @Success 200 {object} web.GenericNestedResponse[types.Post]&#xA;// @Success 204 {object} web.GenericNestedResponse[types.Post, Types.AnotherOne]&#xA;// @Success 201 {object} web.GenericNestedResponse[web.GenericInnerType[types.Post]]&#xA;func GetPosts(w http.ResponseWriter, r *http.Request) {&#xA;&#x9;_ = web.GenericNestedResponse[types.Post]{}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/swaggo/swag/raw/master/testdata/generics_nested/api/api.go&#34;&gt;this file&lt;/a&gt; for more details and other examples.&lt;/p&gt; &#xA;&lt;h3&gt;Change the default Go Template action delimiters&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/swaggo/swag/issues/980&#34;&gt;#980&lt;/a&gt; &lt;a href=&#34;https://github.com/swaggo/swag/issues/1177&#34;&gt;#1177&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;If your swagger annotations or struct fields contain &#34;{{&#34; or &#34;}}&#34;, the template generation will most likely fail, as these are the default delimiters for &lt;a href=&#34;https://pkg.go.dev/text/template#Template.Delims&#34;&gt;go templates&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To make the generation work properly, you can change the default delimiters with &lt;code&gt;-td&lt;/code&gt;. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;swag init -g http/api.go -td &#34;[[,]]&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The new delimiter is a string with the format &#34;&lt;code&gt;&amp;lt;left delimiter&amp;gt;&lt;/code&gt;,&lt;code&gt;&amp;lt;right delimiter&amp;gt;&lt;/code&gt;&#34;.&lt;/p&gt; &#xA;&lt;h3&gt;Parse Internal and Dependency Packages&lt;/h3&gt; &#xA;&lt;p&gt;If the struct is defined in a dependency package, use &lt;code&gt;--parseDependency&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If the struct is defined in your main project, use &lt;code&gt;--parseInternal&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;if you want to include both internal and from dependencies use both flags&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;swag init --parseDependency --parseInternal&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;About the Project&lt;/h2&gt; &#xA;&lt;p&gt;This project was inspired by &lt;a href=&#34;https://github.com/yvasiyarov/swagger&#34;&gt;yvasiyarov/swagger&lt;/a&gt; but we simplified the usage and added support a variety of &lt;a href=&#34;https://raw.githubusercontent.com/swaggo/swag/master/#supported-web-frameworks&#34;&gt;web frameworks&lt;/a&gt;. Gopher image source is &lt;a href=&#34;https://github.com/tenntenn/gopher-stickers&#34;&gt;tenntenn/gopher-stickers&lt;/a&gt;. It has licenses &lt;a href=&#34;http://creativecommons.org/licenses/by/3.0/deed.en&#34;&gt;creative commons licensing&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributors&lt;/h2&gt; &#xA;&lt;p&gt;This project exists thanks to all the people who contribute. [&lt;a href=&#34;https://raw.githubusercontent.com/swaggo/swag/master/CONTRIBUTING.md&#34;&gt;Contribute&lt;/a&gt;]. &lt;a href=&#34;https://github.com/swaggo/swag/graphs/contributors&#34;&gt;&lt;img src=&#34;https://opencollective.com/swag/contributors.svg?width=890&amp;amp;button=false&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Backers&lt;/h2&gt; &#xA;&lt;p&gt;Thank you to all our backers! 🙏 [&lt;a href=&#34;https://opencollective.com/swag#backer&#34;&gt;Become a backer&lt;/a&gt;]&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opencollective.com/swag#backers&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/swag/backers.svg?width=890&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Sponsors&lt;/h2&gt; &#xA;&lt;p&gt;Support this project by becoming a sponsor. Your logo will show up here with a link to your website. [&lt;a href=&#34;https://opencollective.com/swag#sponsor&#34;&gt;Become a sponsor&lt;/a&gt;]&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opencollective.com/swag/sponsor/0/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/swag/sponsor/0/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/swag/sponsor/1/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/swag/sponsor/1/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/swag/sponsor/2/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/swag/sponsor/2/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/swag/sponsor/3/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/swag/sponsor/3/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/swag/sponsor/4/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/swag/sponsor/4/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/swag/sponsor/5/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/swag/sponsor/5/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/swag/sponsor/6/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/swag/sponsor/6/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/swag/sponsor/7/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/swag/sponsor/7/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/swag/sponsor/8/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/swag/sponsor/8/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/swag/sponsor/9/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/swag/sponsor/9/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://app.fossa.io/projects/git%2Bgithub.com%2Fswaggo%2Fswag?ref=badge_large&#34;&gt;&lt;img src=&#34;https://app.fossa.io/api/projects/git%2Bgithub.com%2Fswaggo%2Fswag.svg?type=large&#34; alt=&#34;FOSSA Status&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>