<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-09-10T01:54:17Z</updated>
  <subtitle>Weekly Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>kubernetes/minikube</title>
    <updated>2023-09-10T01:54:17Z</updated>
    <id>tag:github.com,2023-09-10:/kubernetes/minikube</id>
    <link href="https://github.com/kubernetes/minikube" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Run Kubernetes locally&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;minikube&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/kubernetes/minikube/actions&#34;&gt;&lt;img src=&#34;https://github.com/kubernetes/minikube/workflows/build/badge.svg?sanitize=true&#34; alt=&#34;Actions Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/kubernetes/minikube&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/kubernetes/minikube&#34; alt=&#34;GoReport Widget&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/kubernetes/minikube/releases/latest&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/downloads/kubernetes/minikube/total.svg?sanitize=true&#34; alt=&#34;GitHub All Releases&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/kubernetes/minikube/releases/latest&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/kubernetes/minikube?include_prereleases&#34; alt=&#34;Latest Release&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;img src=&#34;https://github.com/kubernetes/minikube/raw/master/images/logo/logo.png&#34; width=&#34;100&#34; alt=&#34;minikube logo&#34;&gt; &#xA;&lt;p&gt;minikube implements a local Kubernetes cluster on macOS, Linux, and Windows. minikube&#39;s &lt;a href=&#34;https://minikube.sigs.k8s.io/docs/concepts/principles/&#34;&gt;primary goals&lt;/a&gt; are to be the best tool for local Kubernetes application development and to support all Kubernetes features that fit.&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/kubernetes/minikube/master/site/static/images/screenshot.png&#34; width=&#34;575&#34; height=&#34;322&#34; alt=&#34;screenshot&#34;&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;p&gt;minikube runs the latest stable release of Kubernetes, with support for standard Kubernetes features like:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://minikube.sigs.k8s.io/docs/handbook/accessing/#loadbalancer-access&#34;&gt;LoadBalancer&lt;/a&gt; - using &lt;code&gt;minikube tunnel&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Multi-cluster - using &lt;code&gt;minikube start -p &amp;lt;name&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://minikube.sigs.k8s.io/docs/handbook/accessing/#nodeport-access&#34;&gt;NodePorts&lt;/a&gt; - using &lt;code&gt;minikube service&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://minikube.sigs.k8s.io/docs/handbook/persistent_volumes/&#34;&gt;Persistent Volumes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://kubernetes.io/docs/tasks/access-application-cluster/ingress-minikube/&#34;&gt;Ingress&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://minikube.sigs.k8s.io/docs/handbook/dashboard/&#34;&gt;Dashboard&lt;/a&gt; - &lt;code&gt;minikube dashboard&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://minikube.sigs.k8s.io/docs/handbook/config/#runtime-configuration&#34;&gt;Container runtimes&lt;/a&gt; - &lt;code&gt;minikube start --container-runtime&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://minikube.sigs.k8s.io/docs/handbook/config/#modifying-kubernetes-defaults&#34;&gt;Configure apiserver and kubelet options&lt;/a&gt; via command-line flags&lt;/li&gt; &#xA; &lt;li&gt;Supports common &lt;a href=&#34;https://github.com/minikube-ci/examples&#34;&gt;CI environments&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;As well as developer-friendly features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://minikube.sigs.k8s.io/docs/handbook/deploying/#addons&#34;&gt;Addons&lt;/a&gt; - a marketplace for developers to share configurations for running services on minikube&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://minikube.sigs.k8s.io/docs/handbook/addons/nvidia/&#34;&gt;NVIDIA GPU support&lt;/a&gt; - for machine learning&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://minikube.sigs.k8s.io/docs/handbook/mount/&#34;&gt;Filesystem mounts&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;For more information, see the official &lt;a href=&#34;https://minikube.sigs.k8s.io&#34;&gt;minikube website&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://minikube.sigs.k8s.io/docs/start/&#34;&gt;Getting Started Guide&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;span&gt;ðŸ“£&lt;/span&gt; &lt;strong&gt;Please fill out our &lt;a href=&#34;https://forms.gle/Gg3hG5ZySw8c1C24A&#34;&gt;fast 5-question survey&lt;/a&gt;&lt;/strong&gt; so that we can learn how &amp;amp; why you use minikube, and what improvements we should make. Thank you! &lt;span&gt;ðŸ‘¯&lt;/span&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://minikube.sigs.k8s.io/docs/&#34;&gt;https://minikube.sigs.k8s.io/docs/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;More Examples&lt;/h2&gt; &#xA;&lt;p&gt;See minikube in action &lt;a href=&#34;https://minikube.sigs.k8s.io/docs/handbook/controls/&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Community&lt;/h2&gt; &#xA;&lt;p&gt;minikube is a Kubernetes &lt;a href=&#34;https://github.com/kubernetes/community/tree/master/sig-cluster-lifecycle&#34;&gt;#sig-cluster-lifecycle&lt;/a&gt; project.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://kubernetes.slack.com/messages/minikube&#34;&gt;&lt;strong&gt;#minikube on Kubernetes Slack&lt;/strong&gt;&lt;/a&gt; - Live chat with minikube developers!&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://groups.google.com/g/minikube-users&#34;&gt;minikube-users mailing list&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://groups.google.com/g/minikube-dev&#34;&gt;minikube-dev mailing list&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://minikube.sigs.k8s.io/docs/contrib/&#34;&gt;Contributing&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://minikube.sigs.k8s.io/docs/contrib/roadmap/&#34;&gt;Development Roadmap&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Join our meetings:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://tinyurl.com/minikube-oh&#34;&gt;Bi-weekly office hours, Mondays @ 11am PST&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://minikube.sigs.k8s.io/docs/contrib/triage/&#34;&gt;Triage Party&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>emirpasic/gods</title>
    <updated>2023-09-10T01:54:17Z</updated>
    <id>tag:github.com,2023-09-10:/emirpasic/gods</id>
    <link href="https://github.com/emirpasic/gods" rel="alternate"></link>
    <summary type="html">&lt;p&gt;GoDS (Go Data Structures) - Sets, Lists, Stacks, Maps, Trees, Queues, and much more&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://godoc.org/github.com/emirpasic/gods&#34;&gt;&lt;img src=&#34;https://godoc.org/github.com/emirpasic/gods?status.svg?sanitize=true&#34; alt=&#34;GoDoc&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://circleci.com/gh/emirpasic/gods?branch=master&#34;&gt;&lt;img src=&#34;https://circleci.com/gh/emirpasic/gods/tree/master.svg?style=shield&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/emirpasic/gods&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/emirpasic/gods&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/emirpasic/gods&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/emirpasic/gods/branch/master/graph/badge.svg?sanitize=true&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://sourcegraph.com/github.com/emirpasic/gods?badge&#34;&gt;&lt;img src=&#34;https://sourcegraph.com/github.com/emirpasic/gods/-/badge.svg?sanitize=true&#34; alt=&#34;Sourcegraph&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/emirpasic/gods/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/emirpasic/gods.svg?style=flat-square&#34; alt=&#34;Release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://sonarcloud.io/summary/new_code?id=gods&#34;&gt;&lt;img src=&#34;https://sonarcloud.io/api/project_badges/measure?project=gods&amp;amp;metric=alert_status&#34; alt=&#34;Quality Gate Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/emirpasic/gods/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-BSD_2--Clause-green.svg?sanitize=true&#34; alt=&#34;PyPI&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;GoDS (Go Data Structures)&lt;/h1&gt; &#xA;&lt;p&gt;Implementation of various data structures and algorithms in Go.&lt;/p&gt; &#xA;&lt;h2&gt;Data Structures&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#containers&#34;&gt;Containers&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#lists&#34;&gt;Lists&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#arraylist&#34;&gt;ArrayList&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#singlylinkedlist&#34;&gt;SinglyLinkedList&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#doublylinkedlist&#34;&gt;DoublyLinkedList&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#sets&#34;&gt;Sets&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#hashset&#34;&gt;HashSet&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#treeset&#34;&gt;TreeSet&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#linkedhashset&#34;&gt;LinkedHashSet&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#stacks&#34;&gt;Stacks&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#linkedliststack&#34;&gt;LinkedListStack&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#arraystack&#34;&gt;ArrayStack&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#maps&#34;&gt;Maps&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#hashmap&#34;&gt;HashMap&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#treemap&#34;&gt;TreeMap&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#linkedhashmap&#34;&gt;LinkedHashMap&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#hashbidimap&#34;&gt;HashBidiMap&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#treebidimap&#34;&gt;TreeBidiMap&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#trees&#34;&gt;Trees&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#redblacktree&#34;&gt;RedBlackTree&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#avltree&#34;&gt;AVLTree&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#btree&#34;&gt;BTree&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#binaryheap&#34;&gt;BinaryHeap&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#queues&#34;&gt;Queues&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#linkedlistqueue&#34;&gt;LinkedListQueue&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#arrayqueue&#34;&gt;ArrayQueue&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#circularbuffer&#34;&gt;CircularBuffer&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#priorityqueue&#34;&gt;PriorityQueue&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#functions&#34;&gt;Functions&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#comparator&#34;&gt;Comparator&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#iterator&#34;&gt;Iterator&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#iteratorwithindex&#34;&gt;IteratorWithIndex&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#iteratorwithkey&#34;&gt;IteratorWithKey&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#reverseiteratorwithindex&#34;&gt;ReverseIteratorWithIndex&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#reverseiteratorwithkey&#34;&gt;ReverseIteratorWithKey&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#enumerable&#34;&gt;Enumerable&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#enumerablewithindex&#34;&gt;EnumerableWithIndex&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#enumerablewithkey&#34;&gt;EnumerableWithKey&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#serialization&#34;&gt;Serialization&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#jsonserializer&#34;&gt;JSONSerializer&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#jsondeserializer&#34;&gt;JSONDeserializer&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#sort&#34;&gt;Sort&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#container&#34;&gt;Container&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#appendix&#34;&gt;Appendix&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Containers&lt;/h2&gt; &#xA;&lt;p&gt;All data structures implement the container interface with the following methods:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type Container interface {&#xA;&#x9;Empty() bool&#xA;&#x9;Size() int&#xA;&#x9;Clear()&#xA;&#x9;Values() []interface{}&#xA;&#x9;String() string&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Containers are either ordered or unordered. All ordered containers provide &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#iterator&#34;&gt;stateful iterators&lt;/a&gt; and some of them allow &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#enumerable&#34;&gt;enumerable functions&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;&lt;strong&gt;Data&lt;/strong&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;&lt;strong&gt;Structure&lt;/strong&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;strong&gt;Ordered&lt;/strong&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#iterator&#34;&gt;Iterator&lt;/a&gt;&lt;/strong&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#enumerable&#34;&gt;Enumerable&lt;/a&gt;&lt;/strong&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;strong&gt;Referenced by&lt;/strong&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#lists&#34;&gt;Lists&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#arraylist&#34;&gt;ArrayList&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;yes&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;yes*&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;yes&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;index&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#singlylinkedlist&#34;&gt;SinglyLinkedList&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;yes&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;yes&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;yes&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;index&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#doublylinkedlist&#34;&gt;DoublyLinkedList&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;yes&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;yes*&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;yes&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;index&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#sets&#34;&gt;Sets&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#hashset&#34;&gt;HashSet&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;no&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;no&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;no&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;index&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#treeset&#34;&gt;TreeSet&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;yes&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;yes*&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;yes&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;index&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#linkedhashset&#34;&gt;LinkedHashSet&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;yes&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;yes*&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;yes&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;index&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#stacks&#34;&gt;Stacks&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#linkedliststack&#34;&gt;LinkedListStack&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;yes&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;yes&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;no&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;index&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#arraystack&#34;&gt;ArrayStack&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;yes&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;yes*&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;no&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;index&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#maps&#34;&gt;Maps&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#hashmap&#34;&gt;HashMap&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;no&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;no&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;no&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;key&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#treemap&#34;&gt;TreeMap&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;yes&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;yes*&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;yes&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;key&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#linkedhashmap&#34;&gt;LinkedHashMap&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;yes&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;yes*&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;yes&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;key&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#hashbidimap&#34;&gt;HashBidiMap&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;no&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;no&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;no&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;key*&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#treebidimap&#34;&gt;TreeBidiMap&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;yes&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;yes*&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;yes&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;key*&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#trees&#34;&gt;Trees&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#redblacktree&#34;&gt;RedBlackTree&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;yes&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;yes*&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;no&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;key&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#avltree&#34;&gt;AVLTree&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;yes&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;yes*&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;no&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;key&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#btree&#34;&gt;BTree&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;yes&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;yes*&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;no&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;key&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#binaryheap&#34;&gt;BinaryHeap&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;yes&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;yes*&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;no&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;index&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#queues&#34;&gt;Queues&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#linkedlistqueue&#34;&gt;LinkedListQueue&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;yes&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;yes&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;no&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;index&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#arrayqueue&#34;&gt;ArrayQueue&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;yes&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;yes*&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;no&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;index&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#circularbuffer&#34;&gt;CircularBuffer&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;yes&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;yes*&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;no&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;index&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#priorityqueue&#34;&gt;PriorityQueue&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;yes&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;yes*&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;no&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;index&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;sub&gt;&lt;sup&gt;*reversible&lt;/sup&gt;&lt;/sub&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;sub&gt;&lt;sup&gt;*bidirectional&lt;/sup&gt;&lt;/sub&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Lists&lt;/h3&gt; &#xA;&lt;p&gt;A list is a data structure that stores values and may have repeated values.&lt;/p&gt; &#xA;&lt;p&gt;Implements &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#containers&#34;&gt;Container&lt;/a&gt; interface.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type List interface {&#xA;&#x9;Get(index int) (interface{}, bool)&#xA;&#x9;Remove(index int)&#xA;&#x9;Add(values ...interface{})&#xA;&#x9;Contains(values ...interface{}) bool&#xA;&#x9;Sort(comparator utils.Comparator)&#xA;&#x9;Swap(index1, index2 int)&#xA;&#x9;Insert(index int, values ...interface{})&#xA;&#x9;Set(index int, value interface{})&#xA;&#xA;&#x9;containers.Container&#xA;&#x9;// Empty() bool&#xA;&#x9;// Size() int&#xA;&#x9;// Clear()&#xA;&#x9;// Values() []interface{}&#xA;    // String() string&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;ArrayList&lt;/h4&gt; &#xA;&lt;p&gt;A &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#lists&#34;&gt;list&lt;/a&gt; backed by a dynamic array that grows and shrinks implicitly.&lt;/p&gt; &#xA;&lt;p&gt;Implements &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#lists&#34;&gt;List&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#reverseiteratorwithindex&#34;&gt;ReverseIteratorWithIndex&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#enumerablewithindex&#34;&gt;EnumerableWithIndex&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#jsonserializer&#34;&gt;JSONSerializer&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#jsondeserializer&#34;&gt;JSONDeserializer&lt;/a&gt; interfaces.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;github.com/emirpasic/gods/lists/arraylist&#34;&#xA;&#x9;&#34;github.com/emirpasic/gods/utils&#34;&#xA;)&#xA;&#xA;func main() {&#xA;&#x9;list := arraylist.New()&#xA;&#x9;list.Add(&#34;a&#34;)                         // [&#34;a&#34;]&#xA;&#x9;list.Add(&#34;c&#34;, &#34;b&#34;)                    // [&#34;a&#34;,&#34;c&#34;,&#34;b&#34;]&#xA;&#x9;list.Sort(utils.StringComparator)     // [&#34;a&#34;,&#34;b&#34;,&#34;c&#34;]&#xA;&#x9;_, _ = list.Get(0)                    // &#34;a&#34;,true&#xA;&#x9;_, _ = list.Get(100)                  // nil,false&#xA;&#x9;_ = list.Contains(&#34;a&#34;, &#34;b&#34;, &#34;c&#34;)      // true&#xA;&#x9;_ = list.Contains(&#34;a&#34;, &#34;b&#34;, &#34;c&#34;, &#34;d&#34;) // false&#xA;&#x9;list.Swap(0, 1)                       // [&#34;b&#34;,&#34;a&#34;,c&#34;]&#xA;&#x9;list.Remove(2)                        // [&#34;b&#34;,&#34;a&#34;]&#xA;&#x9;list.Remove(1)                        // [&#34;b&#34;]&#xA;&#x9;list.Remove(0)                        // []&#xA;&#x9;list.Remove(0)                        // [] (ignored)&#xA;&#x9;_ = list.Empty()                      // true&#xA;&#x9;_ = list.Size()                       // 0&#xA;&#x9;list.Add(&#34;a&#34;)                         // [&#34;a&#34;]&#xA;&#x9;list.Clear()                          // []&#xA;&#x9;list.Insert(0, &#34;b&#34;)                   // [&#34;b&#34;]&#xA;&#x9;list.Insert(0, &#34;a&#34;)                   // [&#34;a&#34;,&#34;b&#34;]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;SinglyLinkedList&lt;/h4&gt; &#xA;&lt;p&gt;A &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#lists&#34;&gt;list&lt;/a&gt; where each element points to the next element in the list.&lt;/p&gt; &#xA;&lt;p&gt;Implements &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#lists&#34;&gt;List&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#iteratorwithindex&#34;&gt;IteratorWithIndex&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#enumerablewithindex&#34;&gt;EnumerableWithIndex&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#jsonserializer&#34;&gt;JSONSerializer&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#jsondeserializer&#34;&gt;JSONDeserializer&lt;/a&gt; interfaces.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;sll &#34;github.com/emirpasic/gods/lists/singlylinkedlist&#34;&#xA;&#x9;&#34;github.com/emirpasic/gods/utils&#34;&#xA;)&#xA;&#xA;func main() {&#xA;&#x9;list := sll.New()&#xA;&#x9;list.Add(&#34;a&#34;)                         // [&#34;a&#34;]&#xA;&#x9;list.Add(&#34;c&#34;, &#34;b&#34;)                    // [&#34;a&#34;,&#34;c&#34;,&#34;b&#34;]&#xA;&#x9;list.Sort(utils.StringComparator)     // [&#34;a&#34;,&#34;b&#34;,&#34;c&#34;]&#xA;&#x9;_, _ = list.Get(0)                    // &#34;a&#34;,true&#xA;&#x9;_, _ = list.Get(100)                  // nil,false&#xA;&#x9;_ = list.Contains(&#34;a&#34;, &#34;b&#34;, &#34;c&#34;)      // true&#xA;&#x9;_ = list.Contains(&#34;a&#34;, &#34;b&#34;, &#34;c&#34;, &#34;d&#34;) // false&#xA;&#x9;list.Swap(0, 1)                       // [&#34;b&#34;,&#34;a&#34;,c&#34;]&#xA;&#x9;list.Remove(2)                        // [&#34;b&#34;,&#34;a&#34;]&#xA;&#x9;list.Remove(1)                        // [&#34;b&#34;]&#xA;&#x9;list.Remove(0)                        // []&#xA;&#x9;list.Remove(0)                        // [] (ignored)&#xA;&#x9;_ = list.Empty()                      // true&#xA;&#x9;_ = list.Size()                       // 0&#xA;&#x9;list.Add(&#34;a&#34;)                         // [&#34;a&#34;]&#xA;&#x9;list.Clear()                          // []&#xA;&#x9;list.Insert(0, &#34;b&#34;)                   // [&#34;b&#34;]&#xA;&#x9;list.Insert(0, &#34;a&#34;)                   // [&#34;a&#34;,&#34;b&#34;]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;DoublyLinkedList&lt;/h4&gt; &#xA;&lt;p&gt;A &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#lists&#34;&gt;list&lt;/a&gt; where each element points to the next and previous elements in the list.&lt;/p&gt; &#xA;&lt;p&gt;Implements &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#lists&#34;&gt;List&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#reverseiteratorwithindex&#34;&gt;ReverseIteratorWithIndex&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#enumerablewithindex&#34;&gt;EnumerableWithIndex&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#jsonserializer&#34;&gt;JSONSerializer&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#jsondeserializer&#34;&gt;JSONDeserializer&lt;/a&gt; interfaces.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;dll &#34;github.com/emirpasic/gods/lists/doublylinkedlist&#34;&#xA;&#x9;&#34;github.com/emirpasic/gods/utils&#34;&#xA;)&#xA;&#xA;func main() {&#xA;&#x9;list := dll.New()&#xA;&#x9;list.Add(&#34;a&#34;)                         // [&#34;a&#34;]&#xA;&#x9;list.Add(&#34;c&#34;, &#34;b&#34;)                    // [&#34;a&#34;,&#34;c&#34;,&#34;b&#34;]&#xA;&#x9;list.Sort(utils.StringComparator)     // [&#34;a&#34;,&#34;b&#34;,&#34;c&#34;]&#xA;&#x9;_, _ = list.Get(0)                    // &#34;a&#34;,true&#xA;&#x9;_, _ = list.Get(100)                  // nil,false&#xA;&#x9;_ = list.Contains(&#34;a&#34;, &#34;b&#34;, &#34;c&#34;)      // true&#xA;&#x9;_ = list.Contains(&#34;a&#34;, &#34;b&#34;, &#34;c&#34;, &#34;d&#34;) // false&#xA;&#x9;list.Swap(0, 1)                       // [&#34;b&#34;,&#34;a&#34;,c&#34;]&#xA;&#x9;list.Remove(2)                        // [&#34;b&#34;,&#34;a&#34;]&#xA;&#x9;list.Remove(1)                        // [&#34;b&#34;]&#xA;&#x9;list.Remove(0)                        // []&#xA;&#x9;list.Remove(0)                        // [] (ignored)&#xA;&#x9;_ = list.Empty()                      // true&#xA;&#x9;_ = list.Size()                       // 0&#xA;&#x9;list.Add(&#34;a&#34;)                         // [&#34;a&#34;]&#xA;&#x9;list.Clear()                          // []&#xA;&#x9;list.Insert(0, &#34;b&#34;)                   // [&#34;b&#34;]&#xA;&#x9;list.Insert(0, &#34;a&#34;)                   // [&#34;a&#34;,&#34;b&#34;]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Sets&lt;/h3&gt; &#xA;&lt;p&gt;A set is a data structure that can store elements and has no repeated values. It is a computer implementation of the mathematical concept of a finite set. Unlike most other collection types, rather than retrieving a specific element from a set, one typically tests an element for membership in a set. This structure is often used to ensure that no duplicates are present in a container.&lt;/p&gt; &#xA;&lt;p&gt;Set additionally allow set operations such as &lt;a href=&#34;https://en.wikipedia.org/wiki/Intersection_(set_theory)&#34;&gt;intersection&lt;/a&gt;, &lt;a href=&#34;https://en.wikipedia.org/wiki/Union_(set_theory)&#34;&gt;union&lt;/a&gt;, &lt;a href=&#34;https://proofwiki.org/wiki/Definition:Set_Difference&#34;&gt;difference&lt;/a&gt;, etc.&lt;/p&gt; &#xA;&lt;p&gt;Implements &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#containers&#34;&gt;Container&lt;/a&gt; interface.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type Set interface {&#xA;&#x9;Add(elements ...interface{})&#xA;&#x9;Remove(elements ...interface{})&#xA;&#x9;Contains(elements ...interface{}) bool&#xA;    // Intersection(another *Set) *Set&#xA;    // Union(another *Set) *Set&#xA;    // Difference(another *Set) *Set&#xA;&#x9;&#xA;&#x9;containers.Container&#xA;&#x9;// Empty() bool&#xA;&#x9;// Size() int&#xA;&#x9;// Clear()&#xA;&#x9;// Values() []interface{}&#xA;&#x9;// String() string&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;HashSet&lt;/h4&gt; &#xA;&lt;p&gt;A &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#sets&#34;&gt;set&lt;/a&gt; backed by a hash table (actually a Go&#39;s map). It makes no guarantees as to the iteration order of the set.&lt;/p&gt; &#xA;&lt;p&gt;Implements &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#sets&#34;&gt;Set&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#jsonserializer&#34;&gt;JSONSerializer&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#jsondeserializer&#34;&gt;JSONDeserializer&lt;/a&gt; interfaces.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import &#34;github.com/emirpasic/gods/sets/hashset&#34;&#xA;&#xA;func main() {&#xA;&#x9;set := hashset.New()   // empty&#xA;&#x9;set.Add(1)             // 1&#xA;&#x9;set.Add(2, 2, 3, 4, 5) // 3, 1, 2, 4, 5 (random order, duplicates ignored)&#xA;&#x9;set.Remove(4)          // 5, 3, 2, 1 (random order)&#xA;&#x9;set.Remove(2, 3)       // 1, 5 (random order)&#xA;&#x9;set.Contains(1)        // true&#xA;&#x9;set.Contains(1, 5)     // true&#xA;&#x9;set.Contains(1, 6)     // false&#xA;&#x9;_ = set.Values()       // []int{5,1} (random order)&#xA;&#x9;set.Clear()            // empty&#xA;&#x9;set.Empty()            // true&#xA;&#x9;set.Size()             // 0&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;TreeSet&lt;/h4&gt; &#xA;&lt;p&gt;A &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#sets&#34;&gt;set&lt;/a&gt; backed by a &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#redblacktree&#34;&gt;red-black tree&lt;/a&gt; to keep the elements ordered with respect to the &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#comparator&#34;&gt;comparator&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Implements &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#sets&#34;&gt;Set&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#reverseiteratorwithindex&#34;&gt;ReverseIteratorWithIndex&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#enumerablewithindex&#34;&gt;EnumerableWithIndex&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#jsonserializer&#34;&gt;JSONSerializer&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#jsondeserializer&#34;&gt;JSONDeserializer&lt;/a&gt; interfaces.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import &#34;github.com/emirpasic/gods/sets/treeset&#34;&#xA;&#xA;func main() {&#xA;&#x9;set := treeset.NewWithIntComparator() // empty (keys are of type int)&#xA;&#x9;set.Add(1)                            // 1&#xA;&#x9;set.Add(2, 2, 3, 4, 5)                // 1, 2, 3, 4, 5 (in order, duplicates ignored)&#xA;&#x9;set.Remove(4)                         // 1, 2, 3, 5 (in order)&#xA;&#x9;set.Remove(2, 3)                      // 1, 5 (in order)&#xA;&#x9;set.Contains(1)                       // true&#xA;&#x9;set.Contains(1, 5)                    // true&#xA;&#x9;set.Contains(1, 6)                    // false&#xA;&#x9;_ = set.Values()                      // []int{1,5} (in order)&#xA;&#x9;set.Clear()                           // empty&#xA;&#x9;set.Empty()                           // true&#xA;&#x9;set.Size()                            // 0&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;LinkedHashSet&lt;/h4&gt; &#xA;&lt;p&gt;A &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#sets&#34;&gt;set&lt;/a&gt; that preserves insertion-order. Data structure is backed by a hash table to store values and &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#doublylinkedlist&#34;&gt;doubly-linked list&lt;/a&gt; to store insertion ordering.&lt;/p&gt; &#xA;&lt;p&gt;Implements &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#sets&#34;&gt;Set&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#reverseiteratorwithindex&#34;&gt;ReverseIteratorWithIndex&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#enumerablewithindex&#34;&gt;EnumerableWithIndex&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#jsonserializer&#34;&gt;JSONSerializer&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#jsondeserializer&#34;&gt;JSONDeserializer&lt;/a&gt; interfaces.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import &#34;github.com/emirpasic/gods/sets/linkedhashset&#34;&#xA;&#xA;func main() {&#xA;&#x9;set := linkedhashset.New() // empty&#xA;&#x9;set.Add(5)                 // 5&#xA;&#x9;set.Add(4, 4, 3, 2, 1)     // 5, 4, 3, 2, 1 (in insertion-order, duplicates ignored)&#xA;&#x9;set.Add(4)                 // 5, 4, 3, 2, 1 (duplicates ignored, insertion-order unchanged)&#xA;&#x9;set.Remove(4)              // 5, 3, 2, 1 (in insertion-order)&#xA;&#x9;set.Remove(2, 3)           // 5, 1 (in insertion-order)&#xA;&#x9;set.Contains(1)            // true&#xA;&#x9;set.Contains(1, 5)         // true&#xA;&#x9;set.Contains(1, 6)         // false&#xA;&#x9;_ = set.Values()           // []int{5, 1} (in insertion-order)&#xA;&#x9;set.Clear()                // empty&#xA;&#x9;set.Empty()                // true&#xA;&#x9;set.Size()                 // 0&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Stacks&lt;/h3&gt; &#xA;&lt;p&gt;A stack that represents a last-in-first-out (LIFO) data structure. The usual push and pop operations are provided, as well as a method to peek at the top item on the stack.&lt;/p&gt; &#xA;&lt;p&gt;Implements &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#containers&#34;&gt;Container&lt;/a&gt; interface.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type Stack interface {&#xA;&#x9;Push(value interface{})&#xA;&#x9;Pop() (value interface{}, ok bool)&#xA;&#x9;Peek() (value interface{}, ok bool)&#xA;&#xA;&#x9;containers.Container&#xA;&#x9;// Empty() bool&#xA;&#x9;// Size() int&#xA;&#x9;// Clear()&#xA;&#x9;// Values() []interface{}&#xA;&#x9;// String() string&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;LinkedListStack&lt;/h4&gt; &#xA;&lt;p&gt;A &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#stacks&#34;&gt;stack&lt;/a&gt; based on a &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#singlylinkedlist&#34;&gt;linked list&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Implements &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#stacks&#34;&gt;Stack&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#iteratorwithindex&#34;&gt;IteratorWithIndex&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#jsonserializer&#34;&gt;JSONSerializer&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#jsondeserializer&#34;&gt;JSONDeserializer&lt;/a&gt; interfaces.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import lls &#34;github.com/emirpasic/gods/stacks/linkedliststack&#34;&#xA;&#xA;func main() {&#xA;&#x9;stack := lls.New()  // empty&#xA;&#x9;stack.Push(1)       // 1&#xA;&#x9;stack.Push(2)       // 1, 2&#xA;&#x9;stack.Values()      // 2, 1 (LIFO order)&#xA;&#x9;_, _ = stack.Peek() // 2,true&#xA;&#x9;_, _ = stack.Pop()  // 2, true&#xA;&#x9;_, _ = stack.Pop()  // 1, true&#xA;&#x9;_, _ = stack.Pop()  // nil, false (nothing to pop)&#xA;&#x9;stack.Push(1)       // 1&#xA;&#x9;stack.Clear()       // empty&#xA;&#x9;stack.Empty()       // true&#xA;&#x9;stack.Size()        // 0&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;ArrayStack&lt;/h4&gt; &#xA;&lt;p&gt;A &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#stacks&#34;&gt;stack&lt;/a&gt; based on a &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#arraylist&#34;&gt;array list&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Implements &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#stacks&#34;&gt;Stack&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#iteratorwithindex&#34;&gt;IteratorWithIndex&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#jsonserializer&#34;&gt;JSONSerializer&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#jsondeserializer&#34;&gt;JSONDeserializer&lt;/a&gt; interfaces.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import &#34;github.com/emirpasic/gods/stacks/arraystack&#34;&#xA;&#xA;func main() {&#xA;&#x9;stack := arraystack.New() // empty&#xA;&#x9;stack.Push(1)             // 1&#xA;&#x9;stack.Push(2)             // 1, 2&#xA;&#x9;stack.Values()            // 2, 1 (LIFO order)&#xA;&#x9;_, _ = stack.Peek()       // 2,true&#xA;&#x9;_, _ = stack.Pop()        // 2, true&#xA;&#x9;_, _ = stack.Pop()        // 1, true&#xA;&#x9;_, _ = stack.Pop()        // nil, false (nothing to pop)&#xA;&#x9;stack.Push(1)             // 1&#xA;&#x9;stack.Clear()             // empty&#xA;&#x9;stack.Empty()             // true&#xA;&#x9;stack.Size()              // 0&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Maps&lt;/h3&gt; &#xA;&lt;p&gt;A Map is a data structure that maps keys to values. A map cannot contain duplicate keys and each key can map to at most one value.&lt;/p&gt; &#xA;&lt;p&gt;Implements &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#containers&#34;&gt;Container&lt;/a&gt; interface.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type Map interface {&#xA;&#x9;Put(key interface{}, value interface{})&#xA;&#x9;Get(key interface{}) (value interface{}, found bool)&#xA;&#x9;Remove(key interface{})&#xA;&#x9;Keys() []interface{}&#xA;&#xA;&#x9;containers.Container&#xA;&#x9;// Empty() bool&#xA;&#x9;// Size() int&#xA;&#x9;// Clear()&#xA;&#x9;// Values() []interface{}&#xA;&#x9;// String() string&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A BidiMap is an extension to the Map. A bidirectional map (BidiMap), also called a hash bag, is an associative data structure in which the key-value pairs form a one-to-one relation. This relation works in both directions by allow the value to also act as a key to key, e.g. a pair (a,b) thus provides a coupling between &#39;a&#39; and &#39;b&#39; so that &#39;b&#39; can be found when &#39;a&#39; is used as a key and &#39;a&#39; can be found when &#39;b&#39; is used as a key.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type BidiMap interface {&#xA;&#x9;GetKey(value interface{}) (key interface{}, found bool)&#xA;&#xA;&#x9;Map&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;HashMap&lt;/h4&gt; &#xA;&lt;p&gt;A &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#maps&#34;&gt;map&lt;/a&gt; based on hash tables. Keys are unordered.&lt;/p&gt; &#xA;&lt;p&gt;Implements &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#maps&#34;&gt;Map&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#jsonserializer&#34;&gt;JSONSerializer&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#jsondeserializer&#34;&gt;JSONDeserializer&lt;/a&gt; interfaces.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import &#34;github.com/emirpasic/gods/maps/hashmap&#34;&#xA;&#xA;func main() {&#xA;&#x9;m := hashmap.New() // empty&#xA;&#x9;m.Put(1, &#34;x&#34;)      // 1-&amp;gt;x&#xA;&#x9;m.Put(2, &#34;b&#34;)      // 2-&amp;gt;b, 1-&amp;gt;x (random order)&#xA;&#x9;m.Put(1, &#34;a&#34;)      // 2-&amp;gt;b, 1-&amp;gt;a (random order)&#xA;&#x9;_, _ = m.Get(2)    // b, true&#xA;&#x9;_, _ = m.Get(3)    // nil, false&#xA;&#x9;_ = m.Values()     // []interface {}{&#34;b&#34;, &#34;a&#34;} (random order)&#xA;&#x9;_ = m.Keys()       // []interface {}{1, 2} (random order)&#xA;&#x9;m.Remove(1)        // 2-&amp;gt;b&#xA;&#x9;m.Clear()          // empty&#xA;&#x9;m.Empty()          // true&#xA;&#x9;m.Size()           // 0&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;TreeMap&lt;/h4&gt; &#xA;&lt;p&gt;A &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#maps&#34;&gt;map&lt;/a&gt; based on &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#redblacktree&#34;&gt;red-black tree&lt;/a&gt;. Keys are ordered with respect to the &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#comparator&#34;&gt;comparator&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Implements &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#maps&#34;&gt;Map&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#reverseiteratorwithindex&#34;&gt;ReverseIteratorWithIndex&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#enumerablewithkey&#34;&gt;EnumerableWithKey&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#jsonserializer&#34;&gt;JSONSerializer&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#jsondeserializer&#34;&gt;JSONDeserializer&lt;/a&gt; interfaces.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import &#34;github.com/emirpasic/gods/maps/treemap&#34;&#xA;&#xA;func main() {&#xA;&#x9;m := treemap.NewWithIntComparator() // empty (keys are of type int)&#xA;&#x9;m.Put(1, &#34;x&#34;)                       // 1-&amp;gt;x&#xA;&#x9;m.Put(2, &#34;b&#34;)                       // 1-&amp;gt;x, 2-&amp;gt;b (in order)&#xA;&#x9;m.Put(1, &#34;a&#34;)                       // 1-&amp;gt;a, 2-&amp;gt;b (in order)&#xA;&#x9;_, _ = m.Get(2)                     // b, true&#xA;&#x9;_, _ = m.Get(3)                     // nil, false&#xA;&#x9;_ = m.Values()                      // []interface {}{&#34;a&#34;, &#34;b&#34;} (in order)&#xA;&#x9;_ = m.Keys()                        // []interface {}{1, 2} (in order)&#xA;&#x9;m.Remove(1)                         // 2-&amp;gt;b&#xA;&#x9;m.Clear()                           // empty&#xA;&#x9;m.Empty()                           // true&#xA;&#x9;m.Size()                            // 0&#xA;&#xA;&#x9;// Other:&#xA;&#x9;m.Min() // Returns the minimum key and its value from map.&#xA;&#x9;m.Max() // Returns the maximum key and its value from map.&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;LinkedHashMap&lt;/h4&gt; &#xA;&lt;p&gt;A &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#maps&#34;&gt;map&lt;/a&gt; that preserves insertion-order. It is backed by a hash table to store values and &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/doublylinkedlist&#34;&gt;doubly-linked list&lt;/a&gt; to store ordering.&lt;/p&gt; &#xA;&lt;p&gt;Implements &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#maps&#34;&gt;Map&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#reverseiteratorwithindex&#34;&gt;ReverseIteratorWithIndex&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#enumerablewithkey&#34;&gt;EnumerableWithKey&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#jsonserializer&#34;&gt;JSONSerializer&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#jsondeserializer&#34;&gt;JSONDeserializer&lt;/a&gt; interfaces.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import &#34;github.com/emirpasic/gods/maps/linkedhashmap&#34;&#xA;&#xA;func main() {&#xA;&#x9;m := linkedhashmap.New() // empty (keys are of type int)&#xA;&#x9;m.Put(2, &#34;b&#34;)            // 2-&amp;gt;b&#xA;&#x9;m.Put(1, &#34;x&#34;)            // 2-&amp;gt;b, 1-&amp;gt;x (insertion-order)&#xA;&#x9;m.Put(1, &#34;a&#34;)            // 2-&amp;gt;b, 1-&amp;gt;a (insertion-order)&#xA;&#x9;_, _ = m.Get(2)          // b, true&#xA;&#x9;_, _ = m.Get(3)          // nil, false&#xA;&#x9;_ = m.Values()           // []interface {}{&#34;b&#34;, &#34;a&#34;} (insertion-order)&#xA;&#x9;_ = m.Keys()             // []interface {}{2, 1} (insertion-order)&#xA;&#x9;m.Remove(1)              // 2-&amp;gt;b&#xA;&#x9;m.Clear()                // empty&#xA;&#x9;m.Empty()                // true&#xA;&#x9;m.Size()                 // 0&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;HashBidiMap&lt;/h4&gt; &#xA;&lt;p&gt;A &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#maps&#34;&gt;map&lt;/a&gt; based on two hashmaps. Keys are unordered.&lt;/p&gt; &#xA;&lt;p&gt;Implements &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#maps&#34;&gt;BidiMap&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#jsonserializer&#34;&gt;JSONSerializer&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#jsondeserializer&#34;&gt;JSONDeserializer&lt;/a&gt; interfaces.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import &#34;github.com/emirpasic/gods/maps/hashbidimap&#34;&#xA;&#xA;func main() {&#xA;&#x9;m := hashbidimap.New() // empty&#xA;&#x9;m.Put(1, &#34;x&#34;)          // 1-&amp;gt;x&#xA;&#x9;m.Put(3, &#34;b&#34;)          // 1-&amp;gt;x, 3-&amp;gt;b (random order)&#xA;&#x9;m.Put(1, &#34;a&#34;)          // 1-&amp;gt;a, 3-&amp;gt;b (random order)&#xA;&#x9;m.Put(2, &#34;b&#34;)          // 1-&amp;gt;a, 2-&amp;gt;b (random order)&#xA;&#x9;_, _ = m.GetKey(&#34;a&#34;)   // 1, true&#xA;&#x9;_, _ = m.Get(2)        // b, true&#xA;&#x9;_, _ = m.Get(3)        // nil, false&#xA;&#x9;_ = m.Values()         // []interface {}{&#34;a&#34;, &#34;b&#34;} (random order)&#xA;&#x9;_ = m.Keys()           // []interface {}{1, 2} (random order)&#xA;&#x9;m.Remove(1)            // 2-&amp;gt;b&#xA;&#x9;m.Clear()              // empty&#xA;&#x9;m.Empty()              // true&#xA;&#x9;m.Size()               // 0&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;TreeBidiMap&lt;/h4&gt; &#xA;&lt;p&gt;A &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#maps&#34;&gt;map&lt;/a&gt; based on red-black tree. This map guarantees that the map will be in both ascending key and value order. Other than key and value ordering, the goal with this structure is to avoid duplication of elements (unlike in &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#hashbidimap&#34;&gt;HashBidiMap&lt;/a&gt;), which can be significant if contained elements are large.&lt;/p&gt; &#xA;&lt;p&gt;Implements &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#maps&#34;&gt;BidiMap&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#reverseiteratorwithindex&#34;&gt;ReverseIteratorWithIndex&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#enumerablewithkey&#34;&gt;EnumerableWithKey&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#jsonserializer&#34;&gt;JSONSerializer&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#jsondeserializer&#34;&gt;JSONDeserializer&lt;/a&gt; interfaces.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;github.com/emirpasic/gods/maps/treebidimap&#34;&#xA;&#x9;&#34;github.com/emirpasic/gods/utils&#34;&#xA;)&#xA;&#xA;func main() {&#xA;&#x9;m := treebidimap.NewWith(utils.IntComparator, utils.StringComparator)&#xA;&#x9;m.Put(1, &#34;x&#34;)        // 1-&amp;gt;x&#xA;&#x9;m.Put(3, &#34;b&#34;)        // 1-&amp;gt;x, 3-&amp;gt;b (ordered)&#xA;&#x9;m.Put(1, &#34;a&#34;)        // 1-&amp;gt;a, 3-&amp;gt;b (ordered)&#xA;&#x9;m.Put(2, &#34;b&#34;)        // 1-&amp;gt;a, 2-&amp;gt;b (ordered)&#xA;&#x9;_, _ = m.GetKey(&#34;a&#34;) // 1, true&#xA;&#x9;_, _ = m.Get(2)      // b, true&#xA;&#x9;_, _ = m.Get(3)      // nil, false&#xA;&#x9;_ = m.Values()       // []interface {}{&#34;a&#34;, &#34;b&#34;} (ordered)&#xA;&#x9;_ = m.Keys()         // []interface {}{1, 2} (ordered)&#xA;&#x9;m.Remove(1)          // 2-&amp;gt;b&#xA;&#x9;m.Clear()            // empty&#xA;&#x9;m.Empty()            // true&#xA;&#x9;m.Size()             // 0&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Trees&lt;/h3&gt; &#xA;&lt;p&gt;A tree is a widely used data data structure that simulates a hierarchical tree structure, with a root value and subtrees of children, represented as a set of linked nodes; thus no cyclic links.&lt;/p&gt; &#xA;&lt;p&gt;Implements &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#containers&#34;&gt;Container&lt;/a&gt; interface.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type Tree interface {&#xA;&#x9;containers.Container&#xA;&#x9;// Empty() bool&#xA;&#x9;// Size() int&#xA;&#x9;// Clear()&#xA;&#x9;// Values() []interface{}&#xA;&#x9;// String() string&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;RedBlackTree&lt;/h4&gt; &#xA;&lt;p&gt;A redâ€“black &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#trees&#34;&gt;tree&lt;/a&gt; is a binary search tree with an extra bit of data per node, its color, which can be either red or black. The extra bit of storage ensures an approximately balanced tree by constraining how nodes are colored from any path from the root to the leaf. Thus, it is a data structure which is a type of self-balancing binary search tree.&lt;/p&gt; &#xA;&lt;p&gt;The balancing of the tree is not perfect but it is good enough to allow it to guarantee searching in O(log n) time, where n is the total number of elements in the tree. The insertion and deletion operations, along with the tree rearrangement and recoloring, are also performed in O(log n) time. &lt;sub&gt;&lt;sup&gt;&lt;a href=&#34;http://en.wikipedia.org/wiki/Red%E2%80%93black_tree&#34;&gt;Wikipedia&lt;/a&gt;&lt;/sup&gt;&lt;/sub&gt;&lt;/p&gt; &#xA;&lt;p&gt;Implements &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#trees&#34;&gt;Tree&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#reverseiteratorwithkey&#34;&gt;ReverseIteratorWithKey&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#jsonserializer&#34;&gt;JSONSerializer&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#jsondeserializer&#34;&gt;JSONDeserializer&lt;/a&gt; interfaces.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;http://upload.wikimedia.org/wikipedia/commons/thumb/6/66/Red-black_tree_example.svg/500px-Red-black_tree_example.svg.png&#34; width=&#34;400px&#34; height=&#34;200px&#34;&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;fmt&#34;&#xA;&#x9;rbt &#34;github.com/emirpasic/gods/trees/redblacktree&#34;&#xA;)&#xA;&#xA;func main() {&#xA;&#x9;tree := rbt.NewWithIntComparator() // empty (keys are of type int)&#xA;&#xA;&#x9;tree.Put(1, &#34;x&#34;) // 1-&amp;gt;x&#xA;&#x9;tree.Put(2, &#34;b&#34;) // 1-&amp;gt;x, 2-&amp;gt;b (in order)&#xA;&#x9;tree.Put(1, &#34;a&#34;) // 1-&amp;gt;a, 2-&amp;gt;b (in order, replacement)&#xA;&#x9;tree.Put(3, &#34;c&#34;) // 1-&amp;gt;a, 2-&amp;gt;b, 3-&amp;gt;c (in order)&#xA;&#x9;tree.Put(4, &#34;d&#34;) // 1-&amp;gt;a, 2-&amp;gt;b, 3-&amp;gt;c, 4-&amp;gt;d (in order)&#xA;&#x9;tree.Put(5, &#34;e&#34;) // 1-&amp;gt;a, 2-&amp;gt;b, 3-&amp;gt;c, 4-&amp;gt;d, 5-&amp;gt;e (in order)&#xA;&#x9;tree.Put(6, &#34;f&#34;) // 1-&amp;gt;a, 2-&amp;gt;b, 3-&amp;gt;c, 4-&amp;gt;d, 5-&amp;gt;e, 6-&amp;gt;f (in order)&#xA;&#xA;&#x9;fmt.Println(tree)&#xA;&#x9;//&#xA;&#x9;//  RedBlackTree&#xA;&#x9;//  â”‚           â”Œâ”€â”€ 6&#xA;&#x9;//&#x9;â”‚       â”Œâ”€â”€ 5&#xA;&#x9;//&#x9;â”‚   â”Œâ”€â”€ 4&#xA;&#x9;//&#x9;â”‚   â”‚   â””â”€â”€ 3&#xA;&#x9;//&#x9;â””â”€â”€ 2&#xA;&#x9;//&#x9;&#x9;â””â”€â”€ 1&#xA;&#xA;&#x9;_ = tree.Values() // []interface {}{&#34;a&#34;, &#34;b&#34;, &#34;c&#34;, &#34;d&#34;, &#34;e&#34;, &#34;f&#34;} (in order)&#xA;&#x9;_ = tree.Keys()   // []interface {}{1, 2, 3, 4, 5, 6} (in order)&#xA;&#xA;&#x9;tree.Remove(2) // 1-&amp;gt;a, 3-&amp;gt;c, 4-&amp;gt;d, 5-&amp;gt;e, 6-&amp;gt;f (in order)&#xA;&#x9;fmt.Println(tree)&#xA;&#x9;//&#xA;&#x9;//  RedBlackTree&#xA;&#x9;//  â”‚       â”Œâ”€â”€ 6&#xA;&#x9;//  â”‚   â”Œâ”€â”€ 5&#xA;&#x9;//  â””â”€â”€ 4&#xA;&#x9;//      â”‚   â”Œâ”€â”€ 3&#xA;&#x9;//      â””â”€â”€ 1&#xA;&#xA;&#x9;tree.Clear() // empty&#xA;&#x9;tree.Empty() // true&#xA;&#x9;tree.Size()  // 0&#xA;&#xA;&#x9;// Other:&#xA;&#x9;tree.Left() // gets the left-most (min) node&#xA;&#x9;tree.Right() // get the right-most (max) node&#xA;&#x9;tree.Floor(1) // get the floor node&#xA;&#x9;tree.Ceiling(1) // get the ceiling node&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Extending the red-black tree&#39;s functionality has been demonstrated in the following &lt;a href=&#34;https://github.com/emirpasic/gods/raw/master/examples/redblacktreeextended/redblacktreeextended.go&#34;&gt;example&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;AVLTree&lt;/h4&gt; &#xA;&lt;p&gt;AVL &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#trees&#34;&gt;tree&lt;/a&gt; is a self-balancing binary search tree. In an AVL tree, the heights of the two child subtrees of any node differ by at most one; if at any time they differ by more than one, rebalancing is done to restore this property. Lookup, insertion, and deletion all take O(log n) time in both the average and worst cases, where n is the number of nodes in the tree prior to the operation. Insertions and deletions may require the tree to be rebalanced by one or more tree rotations.&lt;/p&gt; &#xA;&lt;p&gt;AVL trees are often compared with redâ€“black trees because both support the same set of operations and take O(log n) time for the basic operations. For lookup-intensive applications, AVL trees are faster than redâ€“black trees because they are more strictly balanced. &lt;sub&gt;&lt;sup&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/AVL_tree&#34;&gt;Wikipedia&lt;/a&gt;&lt;/sup&gt;&lt;/sub&gt;&lt;/p&gt; &#xA;&lt;p&gt;Implements &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#trees&#34;&gt;Tree&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#reverseiteratorwithkey&#34;&gt;ReverseIteratorWithKey&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#jsonserializer&#34;&gt;JSONSerializer&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#jsondeserializer&#34;&gt;JSONDeserializer&lt;/a&gt; interfaces.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://upload.wikimedia.org/wikipedia/commons/thumb/a/ad/AVL-tree-wBalance_K.svg/262px-AVL-tree-wBalance_K.svg.png&#34; width=&#34;300px&#34; height=&#34;180px&#34;&gt;&lt;br&gt;&lt;sub&gt;AVL tree with balance factors (green)&lt;/sub&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;fmt&#34;&#xA;&#x9;avl &#34;github.com/emirpasic/gods/trees/avltree&#34;&#xA;)&#xA;&#xA;func main() {&#xA;&#x9;tree := avl.NewWithIntComparator() // empty(keys are of type int)&#xA;&#xA;&#x9;tree.Put(1, &#34;x&#34;) // 1-&amp;gt;x&#xA;&#x9;tree.Put(2, &#34;b&#34;) // 1-&amp;gt;x, 2-&amp;gt;b (in order)&#xA;&#x9;tree.Put(1, &#34;a&#34;) // 1-&amp;gt;a, 2-&amp;gt;b (in order, replacement)&#xA;&#x9;tree.Put(3, &#34;c&#34;) // 1-&amp;gt;a, 2-&amp;gt;b, 3-&amp;gt;c (in order)&#xA;&#x9;tree.Put(4, &#34;d&#34;) // 1-&amp;gt;a, 2-&amp;gt;b, 3-&amp;gt;c, 4-&amp;gt;d (in order)&#xA;&#x9;tree.Put(5, &#34;e&#34;) // 1-&amp;gt;a, 2-&amp;gt;b, 3-&amp;gt;c, 4-&amp;gt;d, 5-&amp;gt;e (in order)&#xA;&#x9;tree.Put(6, &#34;f&#34;) // 1-&amp;gt;a, 2-&amp;gt;b, 3-&amp;gt;c, 4-&amp;gt;d, 5-&amp;gt;e, 6-&amp;gt;f (in order)&#xA;&#xA;&#x9;fmt.Println(tree)&#xA;&#x9;//&#xA;&#x9;//  AVLTree&#xA;&#x9;//  â”‚       â”Œâ”€â”€ 6&#xA;&#x9;//  â”‚   â”Œâ”€â”€ 5&#xA;&#x9;//  â””â”€â”€ 4&#xA;&#x9;//      â”‚   â”Œâ”€â”€ 3&#xA;&#x9;//      â””â”€â”€ 2&#xA;&#x9;//          â””â”€â”€ 1&#xA;&#xA;&#xA;&#x9;_ = tree.Values() // []interface {}{&#34;a&#34;, &#34;b&#34;, &#34;c&#34;, &#34;d&#34;, &#34;e&#34;, &#34;f&#34;} (in order)&#xA;&#x9;_ = tree.Keys()   // []interface {}{1, 2, 3, 4, 5, 6} (in order)&#xA;&#xA;&#x9;tree.Remove(2) // 1-&amp;gt;a, 3-&amp;gt;c, 4-&amp;gt;d, 5-&amp;gt;e, 6-&amp;gt;f (in order)&#xA;&#x9;fmt.Println(tree)&#xA;&#x9;//&#xA;&#x9;//  AVLTree&#xA;&#x9;//  â”‚       â”Œâ”€â”€ 6&#xA;&#x9;//  â”‚   â”Œâ”€â”€ 5&#xA;&#x9;//  â””â”€â”€ 4&#xA;&#x9;//      â””â”€â”€ 3&#xA;&#x9;//          â””â”€â”€ 1&#xA;&#xA;&#x9;tree.Clear() // empty&#xA;&#x9;tree.Empty() // true&#xA;&#x9;tree.Size()  // 0&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;BTree&lt;/h4&gt; &#xA;&lt;p&gt;B-tree is a self-balancing tree data structure that keeps data sorted and allows searches, sequential access, insertions, and deletions in logarithmic time. The B-tree is a generalization of a binary search tree in that a node can have more than two children.&lt;/p&gt; &#xA;&lt;p&gt;According to Knuth&#39;s definition, a B-tree of order m is a tree which satisfies the following properties:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Every node has at most m children.&lt;/li&gt; &#xA; &lt;li&gt;Every non-leaf node (except root) has at least âŒˆm/2âŒ‰ children.&lt;/li&gt; &#xA; &lt;li&gt;The root has at least two children if it is not a leaf node.&lt;/li&gt; &#xA; &lt;li&gt;A non-leaf node with k children contains kâˆ’1 keys.&lt;/li&gt; &#xA; &lt;li&gt;All leaves appear in the same level&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Each internal nodeâ€™s keys act as separation values which divide its subtrees. For example, if an internal node has 3 child nodes (or subtrees) then it must have 2 keys: a1 and a2. All values in the leftmost subtree will be less than a1, all values in the middle subtree will be between a1 and a2, and all values in the rightmost subtree will be greater than a2.&lt;sub&gt;&lt;sup&gt;&lt;a href=&#34;http://en.wikipedia.org/wiki/Red%E2%80%93black_tree&#34;&gt;Wikipedia&lt;/a&gt;&lt;/sup&gt;&lt;/sub&gt;&lt;/p&gt; &#xA;&lt;p&gt;Implements &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#trees&#34;&gt;Tree&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#reverseiteratorwithkey&#34;&gt;ReverseIteratorWithKey&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#jsonserializer&#34;&gt;JSONSerializer&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#jsondeserializer&#34;&gt;JSONDeserializer&lt;/a&gt; interfaces.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://upload.wikimedia.org/wikipedia/commons/thumb/6/65/B-tree.svg/831px-B-tree.svg.png&#34; width=&#34;400px&#34; height=&#34;111px&#34;&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;fmt&#34;&#xA;&#x9;&#34;github.com/emirpasic/gods/trees/btree&#34;&#xA;)&#xA;&#xA;func main() {&#xA;&#x9;tree := btree.NewWithIntComparator(3) // empty (keys are of type int)&#xA;&#xA;&#x9;tree.Put(1, &#34;x&#34;) // 1-&amp;gt;x&#xA;&#x9;tree.Put(2, &#34;b&#34;) // 1-&amp;gt;x, 2-&amp;gt;b (in order)&#xA;&#x9;tree.Put(1, &#34;a&#34;) // 1-&amp;gt;a, 2-&amp;gt;b (in order, replacement)&#xA;&#x9;tree.Put(3, &#34;c&#34;) // 1-&amp;gt;a, 2-&amp;gt;b, 3-&amp;gt;c (in order)&#xA;&#x9;tree.Put(4, &#34;d&#34;) // 1-&amp;gt;a, 2-&amp;gt;b, 3-&amp;gt;c, 4-&amp;gt;d (in order)&#xA;&#x9;tree.Put(5, &#34;e&#34;) // 1-&amp;gt;a, 2-&amp;gt;b, 3-&amp;gt;c, 4-&amp;gt;d, 5-&amp;gt;e (in order)&#xA;&#x9;tree.Put(6, &#34;f&#34;) // 1-&amp;gt;a, 2-&amp;gt;b, 3-&amp;gt;c, 4-&amp;gt;d, 5-&amp;gt;e, 6-&amp;gt;f (in order)&#xA;&#x9;tree.Put(7, &#34;g&#34;) // 1-&amp;gt;a, 2-&amp;gt;b, 3-&amp;gt;c, 4-&amp;gt;d, 5-&amp;gt;e, 6-&amp;gt;f, 7-&amp;gt;g (in order)&#xA;&#xA;&#x9;fmt.Println(tree)&#xA;&#x9;// BTree&#xA;&#x9;//         1&#xA;&#x9;//     2&#xA;&#x9;//         3&#xA;&#x9;// 4&#xA;&#x9;//         5&#xA;&#x9;//     6&#xA;&#x9;//         7&#xA;&#xA;&#x9;_ = tree.Values() // []interface {}{&#34;a&#34;, &#34;b&#34;, &#34;c&#34;, &#34;d&#34;, &#34;e&#34;, &#34;f&#34;, &#34;g&#34;} (in order)&#xA;&#x9;_ = tree.Keys()   // []interface {}{1, 2, 3, 4, 5, 6, 7} (in order)&#xA;&#xA;&#x9;tree.Remove(2) // 1-&amp;gt;a, 3-&amp;gt;c, 4-&amp;gt;d, 5-&amp;gt;e, 6-&amp;gt;f, 7-&amp;gt;g (in order)&#xA;&#x9;fmt.Println(tree)&#xA;&#x9;// BTree&#xA;&#x9;//     1&#xA;&#x9;//     3&#xA;&#x9;// 4&#xA;&#x9;//     5&#xA;&#x9;// 6&#xA;&#x9;//     7&#xA;&#xA;&#x9;tree.Clear() // empty&#xA;&#x9;tree.Empty() // true&#xA;&#x9;tree.Size()  // 0&#xA;&#xA;&#x9;// Other:&#xA;&#x9;tree.Height() // gets the height of the tree&#xA;&#x9;tree.Left() // gets the left-most (min) node&#xA;&#x9;tree.LeftKey() // get the left-most (min) node&#39;s key&#xA;&#x9;tree.LeftValue() // get the left-most (min) node&#39;s value&#xA;&#x9;tree.Right() // get the right-most (max) node&#xA;&#x9;tree.RightKey() // get the right-most (max) node&#39;s key&#xA;&#x9;tree.RightValue() // get the right-most (max) node&#39;s value&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;BinaryHeap&lt;/h4&gt; &#xA;&lt;p&gt;A binary heap is a &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#trees&#34;&gt;tree&lt;/a&gt; created using a binary tree. It can be seen as a binary tree with two additional constraints:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Shape property:&lt;/p&gt; &lt;p&gt;A binary heap is a complete binary tree; that is, all levels of the tree, except possibly the last one (deepest) are fully filled, and, if the last level of the tree is not complete, the nodes of that level are filled from left to right.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Heap property:&lt;/p&gt; &lt;p&gt;All nodes are either greater than or equal to or less than or equal to each of its children, according to a comparison predicate defined for the heap. &lt;sub&gt;&lt;sup&gt;&lt;a href=&#34;http://en.wikipedia.org/wiki/Binary_heap&#34;&gt;Wikipedia&lt;/a&gt;&lt;/sup&gt;&lt;/sub&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Implements &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#trees&#34;&gt;Tree&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#reverseiteratorwithindex&#34;&gt;ReverseIteratorWithIndex&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#jsonserializer&#34;&gt;JSONSerializer&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#jsondeserializer&#34;&gt;JSONDeserializer&lt;/a&gt; interfaces.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;http://upload.wikimedia.org/wikipedia/commons/thumb/3/38/Max-Heap.svg/501px-Max-Heap.svg.png&#34; width=&#34;300px&#34; height=&#34;200px&#34;&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;github.com/emirpasic/gods/trees/binaryheap&#34;&#xA;&#x9;&#34;github.com/emirpasic/gods/utils&#34;&#xA;)&#xA;&#xA;func main() {&#xA;&#xA;&#x9;// Min-heap&#xA;&#x9;heap := binaryheap.NewWithIntComparator() // empty (min-heap)&#xA;&#x9;heap.Push(2)                              // 2&#xA;&#x9;heap.Push(3)                              // 2, 3&#xA;&#x9;heap.Push(1)                              // 1, 3, 2&#xA;&#x9;heap.Values()                             // 1, 3, 2&#xA;&#x9;_, _ = heap.Peek()                        // 1,true&#xA;&#x9;_, _ = heap.Pop()                         // 1, true&#xA;&#x9;_, _ = heap.Pop()                         // 2, true&#xA;&#x9;_, _ = heap.Pop()                         // 3, true&#xA;&#x9;_, _ = heap.Pop()                         // nil, false (nothing to pop)&#xA;&#x9;heap.Push(1)                              // 1&#xA;&#x9;heap.Clear()                              // empty&#xA;&#x9;heap.Empty()                              // true&#xA;&#x9;heap.Size()                               // 0&#xA;&#xA;&#x9;// Max-heap&#xA;&#x9;inverseIntComparator := func(a, b interface{}) int {&#xA;&#x9;&#x9;return -utils.IntComparator(a, b)&#xA;&#x9;}&#xA;&#x9;heap = binaryheap.NewWith(inverseIntComparator) // empty (min-heap)&#xA;&#x9;heap.Push(2, 3, 1)                              // 3, 2, 1 (bulk optimized)&#xA;&#x9;heap.Values()                                   // 3, 2, 1&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Queues&lt;/h3&gt; &#xA;&lt;p&gt;A queue that represents a first-in-first-out (FIFO) data structure. The usual enqueue and dequeue operations are provided, as well as a method to peek at the first item in the queue.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://upload.wikimedia.org/wikipedia/commons/thumb/5/52/Data_Queue.svg/300px-Data_Queue.svg.png&#34; width=&#34;200px&#34; height=&#34;120px&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Implements &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#containers&#34;&gt;Container&lt;/a&gt; interface.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type Queue interface {&#xA;&#x9;Enqueue(value interface{})&#xA;&#x9;Dequeue() (value interface{}, ok bool)&#xA;&#x9;Peek() (value interface{}, ok bool)&#xA;&#xA;&#x9;containers.Container&#xA;&#x9;// Empty() bool&#xA;&#x9;// Size() int&#xA;&#x9;// Clear()&#xA;&#x9;// Values() []interface{}&#xA;&#x9;// String() string&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;LinkedListQueue&lt;/h4&gt; &#xA;&lt;p&gt;A &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#queues&#34;&gt;queue&lt;/a&gt; based on a &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#singlylinkedlist&#34;&gt;linked list&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Implements &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#queues&#34;&gt;Queue&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#iteratorwithindex&#34;&gt;IteratorWithIndex&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#jsonserializer&#34;&gt;JSONSerializer&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#jsondeserializer&#34;&gt;JSONDeserializer&lt;/a&gt; interfaces.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import llq &#34;github.com/emirpasic/gods/queues/linkedlistqueue&#34;&#xA;&#xA;// LinkedListQueueExample to demonstrate basic usage of LinkedListQueue&#xA;func main() {&#xA;    queue := llq.New()     // empty&#xA;    queue.Enqueue(1)       // 1&#xA;    queue.Enqueue(2)       // 1, 2&#xA;    _ = queue.Values()     // 1, 2 (FIFO order)&#xA;    _, _ = queue.Peek()    // 1,true&#xA;    _, _ = queue.Dequeue() // 1, true&#xA;    _, _ = queue.Dequeue() // 2, true&#xA;    _, _ = queue.Dequeue() // nil, false (nothing to deque)&#xA;    queue.Enqueue(1)       // 1&#xA;    queue.Clear()          // empty&#xA;    queue.Empty()          // true&#xA;    _ = queue.Size()       // 0&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;ArrayQueue&lt;/h4&gt; &#xA;&lt;p&gt;A &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#queues&#34;&gt;queue&lt;/a&gt; based on a &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#arraylist&#34;&gt;array list&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Implements &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#queues&#34;&gt;Queue&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#iteratorwithindex&#34;&gt;ReverseIteratorWithIndex&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#jsonserializer&#34;&gt;JSONSerializer&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#jsondeserializer&#34;&gt;JSONDeserializer&lt;/a&gt; interfaces.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import aq &#34;github.com/emirpasic/gods/queues/arrayqueue&#34;&#xA;&#xA;// ArrayQueueExample to demonstrate basic usage of ArrayQueue&#xA;func main() {&#xA;    queue := aq.New()      // empty&#xA;    queue.Enqueue(1)       // 1&#xA;    queue.Enqueue(2)       // 1, 2&#xA;    _ = queue.Values()     // 1, 2 (FIFO order)&#xA;    _, _ = queue.Peek()    // 1,true&#xA;    _, _ = queue.Dequeue() // 1, true&#xA;    _, _ = queue.Dequeue() // 2, true&#xA;    _, _ = queue.Dequeue() // nil, false (nothing to deque)&#xA;    queue.Enqueue(1)       // 1&#xA;    queue.Clear()          // empty&#xA;    queue.Empty()          // true&#xA;    _ = queue.Size()       // 0&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;CircularBuffer&lt;/h4&gt; &#xA;&lt;p&gt;A circular buffer, circular &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#queues&#34;&gt;queue&lt;/a&gt;, cyclic buffer or ring buffer is a data structure that uses a single, fixed-size buffer as if it were connected end-to-end. This structure lends itself easily to buffering data streams.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://upload.wikimedia.org/wikipedia/commons/thumb/f/fd/Circular_Buffer_Animation.gif/400px-Circular_Buffer_Animation.gif&#34; width=&#34;300px&#34; height=&#34;300px&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Implements &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#queues&#34;&gt;Queue&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#iteratorwithindex&#34;&gt;ReverseIteratorWithIndex&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#jsonserializer&#34;&gt;JSONSerializer&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#jsondeserializer&#34;&gt;JSONDeserializer&lt;/a&gt; interfaces.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import cb &#34;github.com/emirpasic/gods/queues/circularbuffer&#34;&#xA;&#xA;// CircularBufferExample to demonstrate basic usage of CircularBuffer&#xA;func main() {&#xA;    queue := cb.New(3)     // empty (max size is 3)&#xA;    queue.Enqueue(1)       // 1&#xA;    queue.Enqueue(2)       // 1, 2&#xA;    queue.Enqueue(3)       // 1, 2, 3&#xA;    _ = queue.Values()     // 1, 2, 3&#xA;    queue.Enqueue(3)       // 4, 2, 3&#xA;    _, _ = queue.Peek()    // 4,true&#xA;    _, _ = queue.Dequeue() // 4, true&#xA;    _, _ = queue.Dequeue() // 2, true&#xA;    _, _ = queue.Dequeue() // 3, true&#xA;    _, _ = queue.Dequeue() // nil, false (nothing to deque)&#xA;    queue.Enqueue(1)       // 1&#xA;    queue.Clear()          // empty&#xA;    queue.Empty()          // true&#xA;    _ = queue.Size()       // 0&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;PriorityQueue&lt;/h4&gt; &#xA;&lt;p&gt;A priority queue is a special type of &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#queues&#34;&gt;queue&lt;/a&gt; in which each element is associated with a priority value. And, elements are served on the basis of their priority. That is, higher priority elements are served first. However, if elements with the same priority occur, they are served according to their order in the queue.&lt;/p&gt; &#xA;&lt;p&gt;Implements &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#queues&#34;&gt;Queue&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#iteratorwithindex&#34;&gt;ReverseIteratorWithIndex&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#jsonserializer&#34;&gt;JSONSerializer&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#jsondeserializer&#34;&gt;JSONDeserializer&lt;/a&gt; interfaces.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;  pq &#34;github.com/emirpasic/gods/queues/priorityqueue&#34;&#xA;  &#34;github.com/emirpasic/gods/utils&#34;&#xA;)&#xA;&#xA;// Element is an entry in the priority queue&#xA;type Element struct {&#xA;    name     string&#xA;    priority int&#xA;}&#xA;&#xA;// Comparator function (sort by element&#39;s priority value in descending order)&#xA;func byPriority(a, b interface{}) int {&#xA;    priorityA := a.(Element).priority&#xA;    priorityB := b.(Element).priority&#xA;    return -utils.IntComparator(priorityA, priorityB) // &#34;-&#34; descending order&#xA;}&#xA;&#xA;// PriorityQueueExample to demonstrate basic usage of BinaryHeap&#xA;func main() {&#xA;    a := Element{name: &#34;a&#34;, priority: 1}&#xA;    b := Element{name: &#34;b&#34;, priority: 2}&#xA;    c := Element{name: &#34;c&#34;, priority: 3}&#xA;    &#xA;    queue := pq.NewWith(byPriority) // empty&#xA;    queue.Enqueue(a)                // {a 1}&#xA;    queue.Enqueue(c)                // {c 3}, {a 1}&#xA;    queue.Enqueue(b)                // {c 3}, {b 2}, {a 1}&#xA;    _ = queue.Values()              // [{c 3} {b 2} {a 1}]&#xA;    _, _ = queue.Peek()             // {c 3} true&#xA;    _, _ = queue.Dequeue()          // {c 3} true&#xA;    _, _ = queue.Dequeue()          // {b 2} true&#xA;    _, _ = queue.Dequeue()          // {a 1} true&#xA;    _, _ = queue.Dequeue()          // &amp;lt;nil&amp;gt; false (nothing to dequeue)&#xA;    queue.Clear()                   // empty&#xA;    _ = queue.Empty()               // true&#xA;    _ = queue.Size()                // 0&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Functions&lt;/h2&gt; &#xA;&lt;p&gt;Various helper functions used throughout the library.&lt;/p&gt; &#xA;&lt;h3&gt;Comparator&lt;/h3&gt; &#xA;&lt;p&gt;Some data structures (e.g. TreeMap, TreeSet) require a comparator function to automatically keep their elements sorted upon insertion. This comparator is necessary during the initalization.&lt;/p&gt; &#xA;&lt;p&gt;Comparator is defined as:&lt;/p&gt; &#xA;&lt;p&gt;Return values (int):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;negative , if a &amp;lt; b&#xA;zero     , if a == b&#xA;positive , if a &amp;gt; b&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Comparator signature:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type Comparator func(a, b interface{}) int&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;All common comparators for builtin types are included in the library:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func StringComparator(a, b interface{}) int&#xA;&#xA;func IntComparator(a, b interface{}) int&#xA;&#xA;func Int8Comparator(a, b interface{}) int&#xA;&#xA;func Int16Comparator(a, b interface{}) int&#xA;&#xA;func Int32Comparator(a, b interface{}) int&#xA;&#xA;func Int64Comparator(a, b interface{}) int&#xA;&#xA;func UIntComparator(a, b interface{}) int&#xA;&#xA;func UInt8Comparator(a, b interface{}) int&#xA;&#xA;func UInt16Comparator(a, b interface{}) int&#xA;&#xA;func UInt32Comparator(a, b interface{}) int&#xA;&#xA;func UInt64Comparator(a, b interface{}) int&#xA;&#xA;func Float32Comparator(a, b interface{}) int&#xA;&#xA;func Float64Comparator(a, b interface{}) int&#xA;&#xA;func ByteComparator(a, b interface{}) int&#xA;&#xA;func RuneComparator(a, b interface{}) int&#xA;&#xA;func TimeComparator(a, b interface{}) int&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Writing custom comparators is easy:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;fmt&#34;&#xA;&#x9;&#34;github.com/emirpasic/gods/sets/treeset&#34;&#xA;)&#xA;&#xA;type User struct {&#xA;&#x9;id   int&#xA;&#x9;name string&#xA;}&#xA;&#xA;// Custom comparator (sort by IDs)&#xA;func byID(a, b interface{}) int {&#xA;&#xA;&#x9;// Type assertion, program will panic if this is not respected&#xA;&#x9;c1 := a.(User)&#xA;&#x9;c2 := b.(User)&#xA;&#xA;&#x9;switch {&#xA;&#x9;case c1.id &amp;gt; c2.id:&#xA;&#x9;&#x9;return 1&#xA;&#x9;case c1.id &amp;lt; c2.id:&#xA;&#x9;&#x9;return -1&#xA;&#x9;default:&#xA;&#x9;&#x9;return 0&#xA;&#x9;}&#xA;}&#xA;&#xA;func main() {&#xA;&#x9;set := treeset.NewWith(byID)&#xA;&#xA;&#x9;set.Add(User{2, &#34;Second&#34;})&#xA;&#x9;set.Add(User{3, &#34;Third&#34;})&#xA;&#x9;set.Add(User{1, &#34;First&#34;})&#xA;&#x9;set.Add(User{4, &#34;Fourth&#34;})&#xA;&#xA;&#x9;fmt.Println(set) // {1 First}, {2 Second}, {3 Third}, {4 Fourth}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Iterator&lt;/h3&gt; &#xA;&lt;p&gt;All ordered containers have stateful iterators. Typically an iterator is obtained by &lt;em&gt;Iterator()&lt;/em&gt; function of an ordered container. Once obtained, iterator&#39;s &lt;em&gt;Next()&lt;/em&gt; function moves the iterator to the next element and returns true if there was a next element. If there was an element, then element&#39;s can be obtained by iterator&#39;s &lt;em&gt;Value()&lt;/em&gt; function. Depending on the ordering type, it&#39;s position can be obtained by iterator&#39;s &lt;em&gt;Index()&lt;/em&gt; or &lt;em&gt;Key()&lt;/em&gt; functions. Some containers even provide reversible iterators, essentially the same, but provide another extra &lt;em&gt;Prev()&lt;/em&gt; function that moves the iterator to the previous element and returns true if there was a previous element.&lt;/p&gt; &#xA;&lt;p&gt;Note: it is unsafe to remove elements from container while iterating.&lt;/p&gt; &#xA;&lt;h4&gt;IteratorWithIndex&lt;/h4&gt; &#xA;&lt;p&gt;An &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#iterator&#34;&gt;iterator&lt;/a&gt; whose elements are referenced by an index.&lt;/p&gt; &#xA;&lt;p&gt;Typical usage:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;it := list.Iterator()&#xA;for it.Next() {&#xA;&#x9;index, value := it.Index(), it.Value()&#xA;&#x9;...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Other usages:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;if it.First() {&#xA;&#x9;firstIndex, firstValue := it.Index(), it.Value()&#xA;&#x9;...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;for it.Begin(); it.Next(); {&#xA;&#x9;...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Seeking to a specific element:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Seek function, i.e. find element starting with &#34;b&#34;&#xA;seek := func(index int, value interface{}) bool {&#xA;    return strings.HasSuffix(value.(string), &#34;b&#34;)&#xA;}&#xA;&#xA;// Seek to the condition and continue traversal from that point (forward).&#xA;// assumes it.Begin() was called.&#xA;for found := it.NextTo(seek); found; found = it.Next() {&#xA;    index, value := it.Index(), it.Value()&#xA;    ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;IteratorWithKey&lt;/h4&gt; &#xA;&lt;p&gt;An &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#iterator&#34;&gt;iterator&lt;/a&gt; whose elements are referenced by a key.&lt;/p&gt; &#xA;&lt;p&gt;Typical usage:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;it := tree.Iterator()&#xA;for it.Next() {&#xA;&#x9;key, value := it.Key(), it.Value()&#xA;&#x9;...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Other usages:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;if it.First() {&#xA;&#x9;firstKey, firstValue := it.Key(), it.Value()&#xA;&#x9;...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;for it.Begin(); it.Next(); {&#xA;&#x9;...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Seeking to a specific element from the current iterator position:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Seek function, i.e. find element starting with &#34;b&#34;&#xA;seek := func(key interface{}, value interface{}) bool {&#xA;    return strings.HasSuffix(value.(string), &#34;b&#34;)&#xA;}&#xA;&#xA;// Seek to the condition and continue traversal from that point (forward).&#xA;// assumes it.Begin() was called.&#xA;for found := it.NextTo(seek); found; found = it.Next() {&#xA;    key, value := it.Key(), it.Value()&#xA;    ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;ReverseIteratorWithIndex&lt;/h4&gt; &#xA;&lt;p&gt;An &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#iterator&#34;&gt;iterator&lt;/a&gt; whose elements are referenced by an index. Provides all functions as &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#iteratorwithindex&#34;&gt;IteratorWithIndex&lt;/a&gt;, but can also be used for reverse iteration.&lt;/p&gt; &#xA;&lt;p&gt;Typical usage of iteration in reverse:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;it := list.Iterator()&#xA;for it.End(); it.Prev(); {&#xA;&#x9;index, value := it.Index(), it.Value()&#xA;&#x9;...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Other usages:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;if it.Last() {&#xA;&#x9;lastIndex, lastValue := it.Index(), it.Value()&#xA;&#x9;...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Seeking to a specific element:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Seek function, i.e. find element starting with &#34;b&#34;&#xA;seek := func(index int, value interface{}) bool {&#xA;    return strings.HasSuffix(value.(string), &#34;b&#34;)&#xA;}&#xA;&#xA;// Seek to the condition and continue traversal from that point (in reverse).&#xA;// assumes it.End() was called.&#xA;for found := it.PrevTo(seek); found; found = it.Prev() {&#xA;    index, value := it.Index(), it.Value()&#xA;&#x9;...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;ReverseIteratorWithKey&lt;/h4&gt; &#xA;&lt;p&gt;An &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#iterator&#34;&gt;iterator&lt;/a&gt; whose elements are referenced by a key. Provides all functions as &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#iteratorwithkey&#34;&gt;IteratorWithKey&lt;/a&gt;, but can also be used for reverse iteration.&lt;/p&gt; &#xA;&lt;p&gt;Typical usage of iteration in reverse:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;it := tree.Iterator()&#xA;for it.End(); it.Prev(); {&#xA;&#x9;key, value := it.Key(), it.Value()&#xA;&#x9;...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Other usages:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;if it.Last() {&#xA;&#x9;lastKey, lastValue := it.Key(), it.Value()&#xA;&#x9;...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Seek function, i.e. find element starting with &#34;b&#34;&#xA;seek := func(key interface{}, value interface{}) bool {&#xA;    return strings.HasSuffix(value.(string), &#34;b&#34;)&#xA;}&#xA;&#xA;// Seek to the condition and continue traversal from that point (in reverse).&#xA;// assumes it.End() was called.&#xA;for found := it.PrevTo(seek); found; found = it.Prev() {&#xA;    key, value := it.Key(), it.Value()&#xA;&#x9;...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Enumerable&lt;/h3&gt; &#xA;&lt;p&gt;Enumerable functions for ordered containers that implement &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#enumerablewithindex&#34;&gt;EnumerableWithIndex&lt;/a&gt; or &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#enumerablewithkey&#34;&gt;EnumerableWithKey&lt;/a&gt; interfaces.&lt;/p&gt; &#xA;&lt;h4&gt;EnumerableWithIndex&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#enumerable&#34;&gt;Enumerable&lt;/a&gt; functions for ordered containers whose values can be fetched by an index.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Each&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Calls the given function once for each element, passing that element&#39;s index and value.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;Each(func(index int, value interface{}))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Map&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Invokes the given function once for each element and returns a container containing the values returned by the given function.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;Map(func(index int, value interface{}) interface{}) Container&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Select&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Returns a new container containing all elements for which the given function returns a true value.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;Select(func(index int, value interface{}) bool) Container&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Any&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Passes each element of the container to the given function and returns true if the function ever returns true for any element.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;Any(func(index int, value interface{}) bool) bool&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;All&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Passes each element of the container to the given function and returns true if the function returns true for all elements.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;All(func(index int, value interface{}) bool) bool&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Find&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Passes each element of the container to the given function and returns the first (index,value) for which the function is true or -1,nil otherwise if no element matches the criteria.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;Find(func(index int, value interface{}) bool) (int, interface{})}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;fmt&#34;&#xA;&#x9;&#34;github.com/emirpasic/gods/sets/treeset&#34;&#xA;)&#xA;&#xA;func printSet(txt string, set *treeset.Set) {&#xA;&#x9;fmt.Print(txt, &#34;[ &#34;)&#xA;&#x9;set.Each(func(index int, value interface{}) {&#xA;&#x9;&#x9;fmt.Print(value, &#34; &#34;)&#xA;&#x9;})&#xA;&#x9;fmt.Println(&#34;]&#34;)&#xA;}&#xA;&#xA;func main() {&#xA;&#x9;set := treeset.NewWithIntComparator()&#xA;&#x9;set.Add(2, 3, 4, 2, 5, 6, 7, 8)&#xA;&#x9;printSet(&#34;Initial&#34;, set) // [ 2 3 4 5 6 7 8 ]&#xA;&#xA;&#x9;even := set.Select(func(index int, value interface{}) bool {&#xA;&#x9;&#x9;return value.(int)%2 == 0&#xA;&#x9;})&#xA;&#x9;printSet(&#34;Even numbers&#34;, even) // [ 2 4 6 8 ]&#xA;&#xA;&#x9;foundIndex, foundValue := set.Find(func(index int, value interface{}) bool {&#xA;&#x9;&#x9;return value.(int)%2 == 0 &amp;amp;&amp;amp; value.(int)%3 == 0&#xA;&#x9;})&#xA;&#x9;if foundIndex != -1 {&#xA;&#x9;&#x9;fmt.Println(&#34;Number divisible by 2 and 3 found is&#34;, foundValue, &#34;at index&#34;, foundIndex) // value: 6, index: 4&#xA;&#x9;}&#xA;&#xA;&#x9;square := set.Map(func(index int, value interface{}) interface{} {&#xA;&#x9;&#x9;return value.(int) * value.(int)&#xA;&#x9;})&#xA;&#x9;printSet(&#34;Numbers squared&#34;, square) // [ 4 9 16 25 36 49 64 ]&#xA;&#xA;&#x9;bigger := set.Any(func(index int, value interface{}) bool {&#xA;&#x9;&#x9;return value.(int) &amp;gt; 5&#xA;&#x9;})&#xA;&#x9;fmt.Println(&#34;Set contains a number bigger than 5 is &#34;, bigger) // true&#xA;&#xA;&#x9;positive := set.All(func(index int, value interface{}) bool {&#xA;&#x9;&#x9;return value.(int) &amp;gt; 0&#xA;&#x9;})&#xA;&#x9;fmt.Println(&#34;All numbers are positive is&#34;, positive) // true&#xA;&#xA;&#x9;evenNumbersSquared := set.Select(func(index int, value interface{}) bool {&#xA;&#x9;&#x9;return value.(int)%2 == 0&#xA;&#x9;}).Map(func(index int, value interface{}) interface{} {&#xA;&#x9;&#x9;return value.(int) * value.(int)&#xA;&#x9;})&#xA;&#x9;printSet(&#34;Chaining&#34;, evenNumbersSquared) // [ 4 16 36 64 ]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;EnumerableWithKey&lt;/h4&gt; &#xA;&lt;p&gt;Enumerable functions for ordered containers whose values whose elements are key/value pairs.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Each&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Calls the given function once for each element, passing that element&#39;s key and value.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;Each(func(key interface{}, value interface{}))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Map&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Invokes the given function once for each element and returns a container containing the values returned by the given function as key/value pairs.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;Map(func(key interface{}, value interface{}) (interface{}, interface{})) Container&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Select&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Returns a new container containing all elements for which the given function returns a true value.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;Select(func(key interface{}, value interface{}) bool) Container&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Any&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Passes each element of the container to the given function and returns true if the function ever returns true for any element.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;Any(func(key interface{}, value interface{}) bool) bool&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;All&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Passes each element of the container to the given function and returns true if the function returns true for all elements.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;All(func(key interface{}, value interface{}) bool) bool&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Find&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Passes each element of the container to the given function and returns the first (key,value) for which the function is true or nil,nil otherwise if no element matches the criteria.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;Find(func(key interface{}, value interface{}) bool) (interface{}, interface{})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;fmt&#34;&#xA;&#x9;&#34;github.com/emirpasic/gods/maps/treemap&#34;&#xA;)&#xA;&#xA;func printMap(txt string, m *treemap.Map) {&#xA;&#x9;fmt.Print(txt, &#34; { &#34;)&#xA;&#x9;m.Each(func(key interface{}, value interface{}) {&#xA;&#x9;&#x9;fmt.Print(key, &#34;:&#34;, value, &#34; &#34;)&#xA;&#x9;})&#xA;&#x9;fmt.Println(&#34;}&#34;)&#xA;}&#xA;&#xA;func main() {&#xA;&#x9;m := treemap.NewWithStringComparator()&#xA;&#x9;m.Put(&#34;g&#34;, 7)&#xA;&#x9;m.Put(&#34;f&#34;, 6)&#xA;&#x9;m.Put(&#34;e&#34;, 5)&#xA;&#x9;m.Put(&#34;d&#34;, 4)&#xA;&#x9;m.Put(&#34;c&#34;, 3)&#xA;&#x9;m.Put(&#34;b&#34;, 2)&#xA;&#x9;m.Put(&#34;a&#34;, 1)&#xA;&#x9;printMap(&#34;Initial&#34;, m) // { a:1 b:2 c:3 d:4 e:5 f:6 g:7 }&#xA;&#xA;&#x9;even := m.Select(func(key interface{}, value interface{}) bool {&#xA;&#x9;&#x9;return value.(int) % 2 == 0&#xA;&#x9;})&#xA;&#x9;printMap(&#34;Elements with even values&#34;, even) // { b:2 d:4 f:6 }&#xA;&#xA;&#x9;foundKey, foundValue := m.Find(func(key interface{}, value interface{}) bool {&#xA;&#x9;&#x9;return value.(int) % 2 == 0 &amp;amp;&amp;amp; value.(int) % 3 == 0&#xA;&#x9;})&#xA;&#x9;if foundKey != nil {&#xA;&#x9;&#x9;fmt.Println(&#34;Element with value divisible by 2 and 3 found is&#34;, foundValue, &#34;with key&#34;, foundKey) // value: 6, index: 4&#xA;&#x9;}&#xA;&#xA;&#x9;square := m.Map(func(key interface{}, value interface{}) (interface{}, interface{}) {&#xA;&#x9;&#x9;return key.(string) + key.(string), value.(int) * value.(int)&#xA;&#x9;})&#xA;&#x9;printMap(&#34;Elements&#39; values squared and letters duplicated&#34;, square) // { aa:1 bb:4 cc:9 dd:16 ee:25 ff:36 gg:49 }&#xA;&#xA;&#x9;bigger := m.Any(func(key interface{}, value interface{}) bool {&#xA;&#x9;&#x9;return value.(int) &amp;gt; 5&#xA;&#x9;})&#xA;&#x9;fmt.Println(&#34;Map contains element whose value is bigger than 5 is&#34;, bigger) // true&#xA;&#xA;&#x9;positive := m.All(func(key interface{}, value interface{}) bool {&#xA;&#x9;&#x9;return value.(int) &amp;gt; 0&#xA;&#x9;})&#xA;&#x9;fmt.Println(&#34;All map&#39;s elements have positive values is&#34;, positive) // true&#xA;&#xA;&#x9;evenNumbersSquared := m.Select(func(key interface{}, value interface{}) bool {&#xA;&#x9;&#x9;return value.(int) % 2 == 0&#xA;&#x9;}).Map(func(key interface{}, value interface{}) (interface{}, interface{}) {&#xA;&#x9;&#x9;return key, value.(int) * value.(int)&#xA;&#x9;})&#xA;&#x9;printMap(&#34;Chaining&#34;, evenNumbersSquared) // { b:4 d:16 f:36 }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Serialization&lt;/h3&gt; &#xA;&lt;p&gt;All data structures can be serialized (marshalled) and deserialized (unmarshalled). Currently, only JSON support is available.&lt;/p&gt; &#xA;&lt;h4&gt;JSONSerializer&lt;/h4&gt; &#xA;&lt;p&gt;Outputs the container into its JSON representation.&lt;/p&gt; &#xA;&lt;p&gt;Typical usage for key-value structures:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;encoding/json&#34;&#xA;&#x9;&#34;fmt&#34;&#xA;&#x9;&#34;github.com/emirpasic/gods/maps/hashmap&#34;&#xA;)&#xA;&#xA;func main() {&#xA;&#x9;m := hashmap.New()&#xA;&#x9;m.Put(&#34;a&#34;, &#34;1&#34;)&#xA;&#x9;m.Put(&#34;b&#34;, &#34;2&#34;)&#xA;&#x9;m.Put(&#34;c&#34;, &#34;3&#34;)&#xA;&#xA;&#x9;bytes, err := json.Marshal(m) // Same as &#34;m.ToJSON(m)&#34;&#xA;&#x9;if err != nil {&#xA;&#x9;&#x9;fmt.Println(err)&#xA;&#x9;}&#xA;&#x9;fmt.Println(string(bytes)) // {&#34;a&#34;:&#34;1&#34;,&#34;b&#34;:&#34;2&#34;,&#34;c&#34;:&#34;3&#34;}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Typical usage for value-only structures:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;encoding/json&#34;&#xA;&#x9;&#34;fmt&#34;&#xA;&#x9;&#34;github.com/emirpasic/gods/lists/arraylist&#34;&#xA;)&#xA;&#xA;func main() {&#xA;&#x9;list := arraylist.New()&#xA;&#x9;list.Add(&#34;a&#34;, &#34;b&#34;, &#34;c&#34;)&#xA;&#xA;&#x9;bytes, err := json.Marshal(list) // Same as &#34;list.ToJSON(list)&#34;&#xA;&#x9;if err != nil {&#xA;&#x9;&#x9;fmt.Println(err)&#xA;&#x9;}&#xA;&#x9;fmt.Println(string(bytes)) // [&#34;a&#34;,&#34;b&#34;,&#34;c&#34;]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;JSONDeserializer&lt;/h4&gt; &#xA;&lt;p&gt;Populates the container with elements from the input JSON representation.&lt;/p&gt; &#xA;&lt;p&gt;Typical usage for key-value structures:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;encoding/json&#34;&#xA;&#x9;&#34;fmt&#34;&#xA;&#x9;&#34;github.com/emirpasic/gods/maps/hashmap&#34;&#xA;)&#xA;&#xA;func main() {&#xA;&#x9;hm := hashmap.New()&#xA;&#xA;&#x9;bytes := []byte(`{&#34;a&#34;:&#34;1&#34;,&#34;b&#34;:&#34;2&#34;}`)&#xA;&#x9;err := json.Unmarshal(bytes, &amp;amp;hm) // Same as &#34;hm.FromJSON(bytes)&#34;&#xA;&#x9;if err != nil {&#xA;&#x9;&#x9;fmt.Println(err)&#xA;&#x9;}&#xA;&#x9;fmt.Println(hm) // HashMap map[b:2 a:1]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Typical usage for value-only structures:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;encoding/json&#34;&#xA;&#x9;&#34;fmt&#34;&#xA;&#x9;&#34;github.com/emirpasic/gods/lists/arraylist&#34;&#xA;)&#xA;&#xA;func main() {&#xA;&#x9;list := arraylist.New()&#xA;&#xA;&#x9;bytes := []byte(`[&#34;a&#34;,&#34;b&#34;]`)&#xA;&#x9;err := json.Unmarshal(bytes, &amp;amp;list) // Same as &#34;list.FromJSON(bytes)&#34;&#xA;&#x9;if err != nil {&#xA;&#x9;&#x9;fmt.Println(err)&#xA;&#x9;}&#xA;&#x9;fmt.Println(list) // ArrayList [&#34;a&#34;,&#34;b&#34;]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Sort&lt;/h3&gt; &#xA;&lt;p&gt;Sort is a general purpose sort function.&lt;/p&gt; &#xA;&lt;p&gt;Lists have an in-place &lt;em&gt;Sort()&lt;/em&gt; function and all containers can return their sorted elements via &lt;em&gt;containers.GetSortedValues()&lt;/em&gt; function.&lt;/p&gt; &#xA;&lt;p&gt;Internally these all use the &lt;em&gt;utils.Sort()&lt;/em&gt; method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import &#34;github.com/emirpasic/gods/utils&#34;&#xA;&#xA;func main() {&#xA;&#x9;strings := []interface{}{}                  // []&#xA;&#x9;strings = append(strings, &#34;d&#34;)              // [&#34;d&#34;]&#xA;&#x9;strings = append(strings, &#34;a&#34;)              // [&#34;d&#34;,&#34;a&#34;]&#xA;&#x9;strings = append(strings, &#34;b&#34;)              // [&#34;d&#34;,&#34;a&#34;,b&#34;&#xA;&#x9;strings = append(strings, &#34;c&#34;)              // [&#34;d&#34;,&#34;a&#34;,b&#34;,&#34;c&#34;]&#xA;&#x9;utils.Sort(strings, utils.StringComparator) // [&#34;a&#34;,&#34;b&#34;,&#34;c&#34;,&#34;d&#34;]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Container&lt;/h3&gt; &#xA;&lt;p&gt;Container specific operations:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Returns sorted container&#39;&#39;s elements with respect to the passed comparator.&#xA;// Does not affect the ordering of elements within the container.&#xA;func GetSortedValues(container Container, comparator utils.Comparator) []interface{}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Usage:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;github.com/emirpasic/gods/lists/arraylist&#34;&#xA;&#x9;&#34;github.com/emirpasic/gods/utils&#34;&#xA;)&#xA;&#xA;func main() {&#xA;&#x9;list := arraylist.New()&#xA;&#x9;list.Add(2, 1, 3)&#xA;&#x9;values := GetSortedValues(container, utils.StringComparator) // [1, 2, 3]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Appendix&lt;/h2&gt; &#xA;&lt;h3&gt;Motivation&lt;/h3&gt; &#xA;&lt;p&gt;Collections and data structures found in other languages: Java Collections, C++ Standard Template Library (STL) containers, Qt Containers, Ruby Enumerable etc.&lt;/p&gt; &#xA;&lt;h3&gt;Goals&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Fast algorithms&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Based on decades of knowledge and experiences of other libraries mentioned above.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Memory efficient algorithms&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Avoiding to consume memory by using optimal algorithms and data structures for the given set of problems, e.g. red-black tree in case of TreeMap to avoid keeping redundant sorted array of keys in memory.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Easy to use library&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Well-structured library with minimalistic set of atomic operations from which more complex operations can be crafted.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Stable library&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Only additions are permitted keeping the library backward compatible.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Solid documentation and examples&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Learning by example.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Production ready&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Used in production.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;No dependencies&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;No external imports.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;There is often a tug of war between speed and memory when crafting algorithms. We choose to optimize for speed in most cases within reasonable limits on memory consumption.&lt;/p&gt; &#xA;&lt;p&gt;Thread safety is not a concern of this project, this should be handled at a higher level.&lt;/p&gt; &#xA;&lt;h3&gt;Testing and Benchmarking&lt;/h3&gt; &#xA;&lt;p&gt;This takes a while, so test within sub-packages:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;go test -run=NO_TEST -bench . -benchmem -benchtime 1s ./...&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://cloud.githubusercontent.com/assets/3115942/16892979/5e698d46-4b27-11e6-864b-cb2b865327b6.png&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Contributing&lt;/h3&gt; &#xA;&lt;p&gt;Biggest contribution towards this library is to use it and give us feedback for further improvements and additions.&lt;/p&gt; &#xA;&lt;p&gt;For direct contributions, &lt;em&gt;pull request&lt;/em&gt; into master branch or ask to become a contributor.&lt;/p&gt; &#xA;&lt;p&gt;Coding style:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# Install tooling and set path:&#xA;go install gotest.tools/gotestsum@latest&#xA;go install golang.org/x/lint/golint@latest&#xA;go install github.com/kisielk/errcheck@latest&#xA;export PATH=$PATH:$GOPATH/bin&#xA;&#xA;# Fix errors and warnings:&#xA;go fmt ./... &amp;amp;&amp;amp;&#xA;go test -v ./... &amp;amp;&amp;amp; &#xA;golint -set_exit_status ./... &amp;amp;&amp;amp; &#xA;! go fmt ./... 2&amp;gt;&amp;amp;1 | read &amp;amp;&amp;amp;&#xA;go vet -v ./... &amp;amp;&amp;amp;&#xA;gocyclo -avg -over 15 ../gods &amp;amp;&amp;amp;&#xA;errcheck ./...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;License&lt;/h3&gt; &#xA;&lt;p&gt;This library is distributed under the BSD-style license found in the &lt;a href=&#34;https://github.com/emirpasic/gods/raw/master/LICENSE&#34;&gt;LICENSE&lt;/a&gt; file.&lt;/p&gt; &#xA;&lt;h3&gt;Sponsors&lt;/h3&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://www.browserstack.com/?ref=gods&#34;&gt;&lt;img src=&#34;http://www.hajdarevic.net/browserstack.svg?sanitize=true&#34; alt=&#34;BrowserStack&#34; width=&#34;250&#34;&gt;&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.browserstack.com/?ref=webhook&#34;&gt;BrowserStack&lt;/a&gt; is a cloud-based cross-browser testing tool that enables developers to test their websites across various browsers on different operating systems and mobile devices, without requiring users to install virtual machines, devices or emulators.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>argoproj/argo-cd</title>
    <updated>2023-09-10T01:54:17Z</updated>
    <id>tag:github.com,2023-09-10:/argoproj/argo-cd</id>
    <link href="https://github.com/argoproj/argo-cd" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Declarative continuous deployment for Kubernetes.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;strong&gt;Releases:&lt;/strong&gt; &lt;a href=&#34;https://github.com/argoproj/argo-cd/releases/latest&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/argoproj/argo-cd?label=argo-cd&#34; alt=&#34;Release Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://artifacthub.io/packages/helm/argo/argo-cd&#34;&gt;&lt;img src=&#34;https://img.shields.io/endpoint?url=https://artifacthub.io/badge/repository/argo-cd&#34; alt=&#34;Artifact HUB&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://slsa.dev&#34;&gt;&lt;img src=&#34;https://slsa.dev/images/gh-badge-level3.svg?sanitize=true&#34; alt=&#34;SLSA 3&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Code:&lt;/strong&gt; &lt;a href=&#34;https://github.com/argoproj/argo-cd/actions?query=workflow%3A%22Integration+tests%22&#34;&gt;&lt;img src=&#34;https://github.com/argoproj/argo-cd/workflows/Integration%20tests/badge.svg?branch=master&#34; alt=&#34;Integration tests&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/argoproj/argo-cd&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/argoproj/argo-cd/branch/master/graph/badge.svg?sanitize=true&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://bestpractices.coreinfrastructure.org/projects/4486&#34;&gt;&lt;img src=&#34;https://bestpractices.coreinfrastructure.org/projects/4486/badge&#34; alt=&#34;CII Best Practices&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://api.securityscorecards.dev/projects/github.com/argoproj/argo-cd&#34;&gt;&lt;img src=&#34;https://api.securityscorecards.dev/projects/github.com/argoproj/argo-cd/badge&#34; alt=&#34;OpenSSF Scorecard&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://app.fossa.com/projects/git%2Bgithub.com%2Fargoproj%2Fargo-cd?ref=badge_shield&#34;&gt;&lt;img src=&#34;https://app.fossa.com/api/projects/git%2Bgithub.com%2Fargoproj%2Fargo-cd.svg?type=shield&#34; alt=&#34;FOSSA Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Social:&lt;/strong&gt; &lt;a href=&#34;https://twitter.com/argoproj&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/follow/argoproj?style=social&#34; alt=&#34;Twitter Follow&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://argoproj.github.io/community/join-slack&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/slack-argoproj-brightgreen.svg?logo=slack&#34; alt=&#34;Slack&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Argo CD - Declarative Continuous Delivery for Kubernetes&lt;/h1&gt; &#xA;&lt;h2&gt;What is Argo CD?&lt;/h2&gt; &#xA;&lt;p&gt;Argo CD is a declarative, GitOps continuous delivery tool for Kubernetes.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/argoproj/argo-cd/master/docs/assets/argocd-ui.gif&#34; alt=&#34;Argo CD UI&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://youtu.be/0WAm0y2vLIo&#34;&gt;&lt;img src=&#34;https://img.youtube.com/vi/0WAm0y2vLIo/0.jpg&#34; alt=&#34;Argo CD Demo&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Why Argo CD?&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Application definitions, configurations, and environments should be declarative and version controlled.&lt;/li&gt; &#xA; &lt;li&gt;Application deployment and lifecycle management should be automated, auditable, and easy to understand.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Who uses Argo CD?&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/argoproj/argo-cd/master/USERS.md&#34;&gt;Official Argo CD user list&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;To learn more about Argo CD &lt;a href=&#34;https://argo-cd.readthedocs.io/&#34;&gt;go to the complete documentation&lt;/a&gt;. Check live demo at &lt;a href=&#34;https://cd.apps.argoproj.io/&#34;&gt;https://cd.apps.argoproj.io/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Community&lt;/h2&gt; &#xA;&lt;h3&gt;Contribution, Discussion and Support&lt;/h3&gt; &#xA;&lt;p&gt;You can reach the Argo CD community and developers via the following channels:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Q &amp;amp; A : &lt;a href=&#34;https://github.com/argoproj/argo-cd/discussions&#34;&gt;Github Discussions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Chat : &lt;a href=&#34;https://argoproj.github.io/community/join-slack&#34;&gt;The #argo-cd Slack channel&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Contributors Office Hours: &lt;a href=&#34;https://calendar.google.com/calendar/u/0/embed?src=argoproj@gmail.com&#34;&gt;Every Thursday&lt;/a&gt; | &lt;a href=&#34;https://docs.google.com/document/d/1xkoFkVviB70YBzSEa4bDnu-rUZ1sIFtwKKG1Uw8XsY8&#34;&gt;Agenda&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;User Community meeting: &lt;a href=&#34;https://calendar.google.com/calendar/u/0/embed?src=argoproj@gmail.com&#34;&gt;First Wednesday of the month&lt;/a&gt; | &lt;a href=&#34;https://docs.google.com/document/d/1ttgw98MO45Dq7ZUHpIiOIEfbyeitKHNfMjbY5dLLMKQ&#34;&gt;Agenda&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Participation in the Argo CD project is governed by the &lt;a href=&#34;https://github.com/cncf/foundation/raw/master/code-of-conduct.md&#34;&gt;CNCF Code of Conduct&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Blogs and Presentations&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/terrytangyuan/awesome-argo&#34;&gt;Awesome-Argo: A Curated List of Awesome Projects and Resources Related to Argo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://akuity.io/blog/unveil-the-secret-ingredients-of-continuous-delivery-at-enterprise-scale-with-argocd-kubecon-china-2021/&#34;&gt;Unveil the Secret Ingredients of Continuous Delivery at Enterprise Scale with Argo CD&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/avPUQin9kzU&#34;&gt;GitOps Without Pipelines With ArgoCD Image Updater&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/eEcgn_gU3SM&#34;&gt;Combining Argo CD (GitOps), Crossplane (Control Plane), And KubeVela (OAM)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/yrj4lmScKHQ&#34;&gt;How to Apply GitOps to Everything - Combining Argo CD and Crossplane&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/nkPoPaVzExY&#34;&gt;Couchbase - How To Run a Database Cluster in Kubernetes Using Argo CD&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/XNXJtxkUKeY&#34;&gt;Automation of Everything - How To Combine Argo Events, Workflows &amp;amp; Pipelines, CD, and Rollouts&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/cpAaI8p4R60&#34;&gt;Environments Based On Pull Requests (PRs): Using Argo CD To Apply GitOps Principles On Previews&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/vpWQeoaiRM4&#34;&gt;Argo CD: Applying GitOps Principles To Manage Production Environment In Kubernetes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://codefresh.io/continuous-deployment/creating-temporary-preview-environments-based-pull-requests-argo-cd-codefresh/&#34;&gt;Creating Temporary Preview Environments Based On Pull Requests With Argo CD And Codefresh&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=r50tRQjisxw&#34;&gt;Tutorial: Everything You Need To Become A GitOps Ninja&lt;/a&gt; 90m tutorial on GitOps and Argo CD.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.inovex.de/blog/spinnaker-vs-argo-cd-vs-tekton-vs-jenkins-x/&#34;&gt;Comparison of Argo CD, Spinnaker, Jenkins X, and Tekton&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.ibm.com/cloud/blog/simplify-and-automate-deployments-using-gitops-with-ibm-multicloud-manager-3-1-2&#34;&gt;Simplify and Automate Deployments Using GitOps with IBM Multicloud Manager 3.1.2&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://v0-6.kubeflow.org/docs/use-cases/gitops-for-kubeflow/&#34;&gt;GitOps for Kubeflow using Argo CD&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.digitalocean.com/community/tutorials/webinar-series-gitops-tool-sets-on-kubernetes-with-circleci-and-argo-cd&#34;&gt;GitOps Toolsets on Kubernetes with CircleCI and Argo CD&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=OdzH82VpMwI&amp;amp;feature=youtu.be&#34;&gt;CI/CD in Light Speed with K8s and Argo CD&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=VXrGp5er1ZE&amp;amp;t=0s&amp;amp;index=135&amp;amp;list=PLj6h78yzYM2PZf9eA7bhWnIh_mK1vyOfU&#34;&gt;Machine Learning as Code&lt;/a&gt;. Among other things, describes how Kubeflow uses Argo CD to implement GitOPs for ML&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=aWDIQMbp1cc&amp;amp;feature=youtu.be&amp;amp;t=1m4s&#34;&gt;Argo CD - GitOps Continuous Delivery for Kubernetes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=2WSJF7d8dUg&amp;amp;feature=youtu.be&#34;&gt;Introduction to Argo CD : Kubernetes DevOps CI/CD&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://medium.com/riskified-technology/gitops-deployment-and-kubernetes-f1ab289efa4b&#34;&gt;GitOps Deployment and Kubernetes - using Argo CD&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://itnext.io/deploy-argo-cd-with-ingress-and-tls-in-three-steps-no-yaml-yak-shaving-required-bc536d401491&#34;&gt;Deploy Argo CD with Ingress and TLS in Three Steps: No YAML Yak Shaving Required&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://codefresh.io/events/cncf-member-webinar-gitops-continuous-delivery-argo-codefresh/&#34;&gt;GitOps Continuous Delivery with Argo and Codefresh&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mjpitz.com/blog/2020/12/03/renovate-your-gitops/&#34;&gt;Stay up to date with Argo CD and Renovate&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.arthurkoziel.com/setting-up-argocd-with-helm/&#34;&gt;Setting up Argo CD with Helm&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://thenewstack.io/applied-gitops-with-argocd/&#34;&gt;Applied GitOps with Argo CD&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.cncf.io/blog/2020/12/17/solving-configuration-drift-using-gitops-with-argo-cd/&#34;&gt;Solving configuration drift using GitOps with Argo CD&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blogs.sap.com/2021/05/06/decentralized-gitops-over-environments/&#34;&gt;Decentralized GitOps over environments&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/AvLuplh1skA&#34;&gt;Getting Started with ArgoCD for GitOps Deployments&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/17894DTru2Y&#34;&gt;Using Argo CD &amp;amp; Datree for Stable Kubernetes CI/CD Deployments&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://amralaayassen.medium.com/how-to-create-argocd-applications-automatically-using-applicationset-automation-of-the-gitops-59455eaf4f72&#34;&gt;How to create Argo CD Applications Automatically using ApplicationSet? &#34;Automation of GitOps&#34;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
</feed>