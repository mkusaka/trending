<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-03-31T01:47:20Z</updated>
  <subtitle>Weekly Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>tmrts/go-patterns</title>
    <updated>2024-03-31T01:47:20Z</updated>
    <id>tag:github.com,2024-03-31:/tmrts/go-patterns</id>
    <link href="https://github.com/tmrts/go-patterns" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Curated list of Go design patterns, recipes and idioms&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/tmrts/go-patterns/master/gopher.png&#34; height=&#34;400&#34;&gt; &lt;/p&gt;&#xA;&lt;h1 align=&#34;center&#34;&gt; Go Patterns &lt;br&gt; &lt;a href=&#34;http://travis-ci.org/tmrts/go-patterns&#34;&gt;&lt;img alt=&#34;build-status&#34; src=&#34;https://img.shields.io/badge/build-passing-brightgreen.svg?style=flat-square&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/sindresorhus/awesome&#34;&gt;&lt;img alt=&#34;awesome&#34; src=&#34;https://img.shields.io/badge/awesome-%E2%9C%93-ff69b4.svg?style=flat-square&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/tmrts/go-patterns/raw/master/LICENSE&#34;&gt;&lt;img alt=&#34;license&#34; src=&#34;https://img.shields.io/badge/license-Apache%20License%202.0-E91E63.svg?style=flat-square&#34;&gt;&lt;/a&gt; &lt;/h1&gt; &#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;p&gt;A curated collection of idiomatic design &amp;amp; application patterns for Go language.&lt;/p&gt; &#xA;&lt;h2&gt;Creational Patterns&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Pattern&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Status&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tmrts/go-patterns/master/creational/abstract_factory.md&#34;&gt;Abstract Factory&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Provides an interface for creating families of releated objects&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✘&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tmrts/go-patterns/master/creational/builder.md&#34;&gt;Builder&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Builds a complex object using simple objects&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✔&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tmrts/go-patterns/master/creational/factory.md&#34;&gt;Factory Method&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Defers instantiation of an object to a specialized function for creating instances&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✔&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tmrts/go-patterns/master/creational/object-pool.md&#34;&gt;Object Pool&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Instantiates and maintains a group of objects instances of the same type&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✔&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tmrts/go-patterns/master/creational/singleton.md&#34;&gt;Singleton&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Restricts instantiation of a type to one object&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✔&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Structural Patterns&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Pattern&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Status&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tmrts/go-patterns/master/structural/bridge.md&#34;&gt;Bridge&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Decouples an interface from its implementation so that the two can vary independently&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✘&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tmrts/go-patterns/master/structural/composite.md&#34;&gt;Composite&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Encapsulates and provides access to a number of different objects&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✘&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tmrts/go-patterns/master/structural/decorator.md&#34;&gt;Decorator&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Adds behavior to an object, statically or dynamically&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✔&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tmrts/go-patterns/master/structural/facade.md&#34;&gt;Facade&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Uses one type as an API to a number of others&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✘&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tmrts/go-patterns/master/structural/flyweight.md&#34;&gt;Flyweight&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Reuses existing instances of objects with similar/identical state to minimize resource usage&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✘&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tmrts/go-patterns/master/structural/proxy.md&#34;&gt;Proxy&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Provides a surrogate for an object to control it&#39;s actions&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✔&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Behavioral Patterns&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Pattern&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Status&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tmrts/go-patterns/master/behavioral/chain_of_responsibility.md&#34;&gt;Chain of Responsibility&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Avoids coupling a sender to receiver by giving more than object a chance to handle the request&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✘&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tmrts/go-patterns/master/behavioral/command.md&#34;&gt;Command&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Bundles a command and arguments to call later&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✘&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tmrts/go-patterns/master/behavioral/mediator.md&#34;&gt;Mediator&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Connects objects and acts as a proxy&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✘&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tmrts/go-patterns/master/behavioral/memento.md&#34;&gt;Memento&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Generate an opaque token that can be used to go back to a previous state&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✘&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tmrts/go-patterns/master/behavioral/observer.md&#34;&gt;Observer&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Provide a callback for notification of events/changes to data&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✔&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tmrts/go-patterns/master/behavioral/registry.md&#34;&gt;Registry&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Keep track of all subclasses of a given class&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✘&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tmrts/go-patterns/master/behavioral/state.md&#34;&gt;State&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Encapsulates varying behavior for the same object based on its internal state&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✘&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tmrts/go-patterns/master/behavioral/strategy.md&#34;&gt;Strategy&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Enables an algorithm&#39;s behavior to be selected at runtime&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✔&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tmrts/go-patterns/master/behavioral/template.md&#34;&gt;Template&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Defines a skeleton class which defers some methods to subclasses&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✘&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tmrts/go-patterns/master/behavioral/visitor.md&#34;&gt;Visitor&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Separates an algorithm from an object on which it operates&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✘&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Synchronization Patterns&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Pattern&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Status&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tmrts/go-patterns/master/synchronization/condition_variable.md&#34;&gt;Condition Variable&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Provides a mechanism for threads to temporarily give up access in order to wait for some condition&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✘&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tmrts/go-patterns/master/synchronization/mutex.md&#34;&gt;Lock/Mutex&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Enforces mutual exclusion limit on a resource to gain exclusive access&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✘&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tmrts/go-patterns/master/synchronization/monitor.md&#34;&gt;Monitor&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Combination of mutex and condition variable patterns&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✘&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tmrts/go-patterns/master/synchronization/read_write_lock.md&#34;&gt;Read-Write Lock&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Allows parallel read access, but only exclusive access on write operations to a resource&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✘&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tmrts/go-patterns/master/synchronization/semaphore.md&#34;&gt;Semaphore&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Allows controlling access to a common resource&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✔&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Concurrency Patterns&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Pattern&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Status&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tmrts/go-patterns/master/concurrency/barrier.md&#34;&gt;N-Barrier&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Prevents a process from proceeding until all N processes reach to the barrier&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✘&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tmrts/go-patterns/master/concurrency/bounded_parallelism.md&#34;&gt;Bounded Parallelism&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Completes large number of independent tasks with resource limits&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✔&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tmrts/go-patterns/master/concurrency/broadcast.md&#34;&gt;Broadcast&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Transfers a message to all recipients simultaneously&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✘&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tmrts/go-patterns/master/concurrency/coroutine.md&#34;&gt;Coroutines&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Subroutines that allow suspending and resuming execution at certain locations&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✘&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tmrts/go-patterns/master/concurrency/generator.md&#34;&gt;Generators&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Yields a sequence of values one at a time&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✔&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tmrts/go-patterns/master/concurrency/reactor.md&#34;&gt;Reactor&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Demultiplexes service requests delivered concurrently to a service handler and dispatches them syncronously to the associated request handlers&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✘&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tmrts/go-patterns/master/concurrency/parallelism.md&#34;&gt;Parallelism&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Completes large number of independent tasks&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✔&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tmrts/go-patterns/master/concurrency/producer_consumer.md&#34;&gt;Producer Consumer&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Separates tasks from task executions&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✘&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Messaging Patterns&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Pattern&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Status&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tmrts/go-patterns/master/messaging/fan_in.md&#34;&gt;Fan-In&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Funnels tasks to a work sink (e.g. server)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✔&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tmrts/go-patterns/master/messaging/fan_out.md&#34;&gt;Fan-Out&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Distributes tasks among workers (e.g. producer)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✔&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tmrts/go-patterns/master/messaging/futures_promises.md&#34;&gt;Futures &amp;amp; Promises&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Acts as a place-holder of a result that is initially unknown for synchronization purposes&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✘&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tmrts/go-patterns/master/messaging/publish_subscribe.md&#34;&gt;Publish/Subscribe&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Passes information to a collection of recipients who subscribed to a topic&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✔&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tmrts/go-patterns/master/messaging/push_pull.md&#34;&gt;Push &amp;amp; Pull&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Distributes messages to multiple workers, arranged in a pipeline&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✘&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Stability Patterns&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Pattern&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Status&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tmrts/go-patterns/master/stability/bulkhead.md&#34;&gt;Bulkheads&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Enforces a principle of failure containment (i.e. prevents cascading failures)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✘&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tmrts/go-patterns/master/stability/circuit-breaker.md&#34;&gt;Circuit-Breaker&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Stops the flow of the requests when requests are likely to fail&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✔&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tmrts/go-patterns/master/stability/deadline.md&#34;&gt;Deadline&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Allows clients to stop waiting for a response once the probability of response becomes low (e.g. after waiting 10 seconds for a page refresh)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✘&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tmrts/go-patterns/master/stability/fail_fast.md&#34;&gt;Fail-Fast&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Checks the availability of required resources at the start of a request and fails if the requirements are not satisfied&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✘&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tmrts/go-patterns/master/stability/handshaking.md&#34;&gt;Handshaking&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Asks a component if it can take any more load, if it can&#39;t, the request is declined&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✘&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tmrts/go-patterns/master/stability/steady_state.md&#34;&gt;Steady-State&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;For every service that accumulates a resource, some other service must recycle that resource&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✘&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Profiling Patterns&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Pattern&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Status&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tmrts/go-patterns/master/profiling/timing.md&#34;&gt;Timing Functions&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Wraps a function and logs the execution&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✔&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Idioms&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Pattern&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Status&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tmrts/go-patterns/master/idiom/functional-options.md&#34;&gt;Functional Options&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Allows creating clean APIs with sane defaults and idiomatic overrides&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✔&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Anti-Patterns&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Pattern&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Status&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tmrts/go-patterns/master/anti-patterns/cascading_failures.md&#34;&gt;Cascading Failures&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;A failure in a system of interconnected parts in which the failure of a part causes a domino effect&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✘&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt;</summary>
  </entry>
  <entry>
    <title>spf13/viper</title>
    <updated>2024-03-31T01:47:20Z</updated>
    <id>tag:github.com,2024-03-31:/spf13/viper</id>
    <link href="https://github.com/spf13/viper" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Go configuration with fangs&lt;/p&gt;&lt;hr&gt;&lt;blockquote&gt; &#xA; &lt;h2&gt;Viper v2 feedback&lt;/h2&gt; &#xA; &lt;p&gt;Viper is heading towards v2 and we would love to hear what &lt;em&gt;&lt;strong&gt;you&lt;/strong&gt;&lt;/em&gt; would like to see in it. Share your thoughts here: &lt;a href=&#34;https://forms.gle/R6faU74qPRPAzchZ9&#34;&gt;https://forms.gle/R6faU74qPRPAzchZ9&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;Thank you!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/spf13/viper/master/.github/logo.png?raw=true&#34; alt=&#34;Viper&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/avelino/awesome-go#configuration&#34;&gt;&lt;img src=&#34;https://awesome.re/mentioned-badge-flat.svg?sanitize=true&#34; alt=&#34;Mentioned in Awesome Go&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://repl.it/@sagikazarmark/Viper-example#main.go&#34;&gt;&lt;img src=&#34;https://repl.it/badge/github/sagikazarmark/Viper-example&#34; alt=&#34;run on repl.it&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/spf13/viper/actions?query=workflow%3ACI&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/spf13/viper/ci.yaml?branch=master&amp;amp;style=flat-square&#34; alt=&#34;GitHub Workflow Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitter.im/spf13/viper?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/Join%20Chat.svg?sanitize=true&#34; alt=&#34;Join the chat at https://gitter.im/spf13/viper&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/spf13/viper&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/spf13/viper?style=flat-square&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/badge/go%20version-%3E=1.20-61CFDD.svg?style=flat-square&#34; alt=&#34;Go Version&#34;&gt; &lt;a href=&#34;https://pkg.go.dev/mod/github.com/spf13/viper&#34;&gt;&lt;img src=&#34;https://pkg.go.dev/badge/mod/github.com/spf13/viper&#34; alt=&#34;PkgGoDev&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Go configuration with fangs!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Many Go projects are built using Viper including:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://gohugo.io&#34;&gt;Hugo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://rexray.readthedocs.org/en/stable/&#34;&gt;EMC RexRay&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Imgur/incus&#34;&gt;Imgur’s Incus&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nanobox-io/nanobox&#34;&gt;Nanobox&lt;/a&gt;/&lt;a href=&#34;https://github.com/nanopack&#34;&gt;Nanopack&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/docker/Notary&#34;&gt;Docker Notary&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.bloomapi.com/&#34;&gt;BloomApi&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/digitalocean/doctl&#34;&gt;doctl&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jgsqware/clairctl&#34;&gt;Clairctl&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mercure.rocks&#34;&gt;Mercure&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/meshery/meshery&#34;&gt;Meshery&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bearer/bearer&#34;&gt;Bearer&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/coder/coder&#34;&gt;Coder&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://vitess.io/&#34;&gt;Vitess&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;go get github.com/spf13/viper&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Viper uses &lt;a href=&#34;https://go.dev/wiki/Modules&#34;&gt;Go Modules&lt;/a&gt; to manage dependencies.&lt;/p&gt; &#xA;&lt;h2&gt;What is Viper?&lt;/h2&gt; &#xA;&lt;p&gt;Viper is a complete configuration solution for Go applications including &lt;a href=&#34;https://12factor.net/#the_twelve_factors&#34;&gt;12-Factor apps&lt;/a&gt;. It is designed to work within an application, and can handle all types of configuration needs and formats. It supports:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;setting defaults&lt;/li&gt; &#xA; &lt;li&gt;reading from JSON, TOML, YAML, HCL, envfile and Java properties config files&lt;/li&gt; &#xA; &lt;li&gt;live watching and re-reading of config files (optional)&lt;/li&gt; &#xA; &lt;li&gt;reading from environment variables&lt;/li&gt; &#xA; &lt;li&gt;reading from remote config systems (etcd or Consul), and watching changes&lt;/li&gt; &#xA; &lt;li&gt;reading from command line flags&lt;/li&gt; &#xA; &lt;li&gt;reading from buffer&lt;/li&gt; &#xA; &lt;li&gt;setting explicit values&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Viper can be thought of as a registry for all of your applications configuration needs.&lt;/p&gt; &#xA;&lt;h2&gt;Why Viper?&lt;/h2&gt; &#xA;&lt;p&gt;When building a modern application, you don’t want to worry about configuration file formats; you want to focus on building awesome software. Viper is here to help with that.&lt;/p&gt; &#xA;&lt;p&gt;Viper does the following for you:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Find, load, and unmarshal a configuration file in JSON, TOML, YAML, HCL, INI, envfile or Java properties formats.&lt;/li&gt; &#xA; &lt;li&gt;Provide a mechanism to set default values for your different configuration options.&lt;/li&gt; &#xA; &lt;li&gt;Provide a mechanism to set override values for options specified through command line flags.&lt;/li&gt; &#xA; &lt;li&gt;Provide an alias system to easily rename parameters without breaking existing code.&lt;/li&gt; &#xA; &lt;li&gt;Make it easy to tell the difference between when a user has provided a command line or config file which is the same as the default.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Viper uses the following precedence order. Each item takes precedence over the item below it:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;explicit call to &lt;code&gt;Set&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;flag&lt;/li&gt; &#xA; &lt;li&gt;env&lt;/li&gt; &#xA; &lt;li&gt;config&lt;/li&gt; &#xA; &lt;li&gt;key/value store&lt;/li&gt; &#xA; &lt;li&gt;default&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Important:&lt;/strong&gt; Viper configuration keys are case insensitive. There are ongoing discussions about making that optional.&lt;/p&gt; &#xA;&lt;h2&gt;Putting Values into Viper&lt;/h2&gt; &#xA;&lt;h3&gt;Establishing Defaults&lt;/h3&gt; &#xA;&lt;p&gt;A good configuration system will support default values. A default value is not required for a key, but it’s useful in the event that a key hasn&#39;t been set via config file, environment variable, remote configuration or flag.&lt;/p&gt; &#xA;&lt;p&gt;Examples:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;viper.SetDefault(&#34;ContentDir&#34;, &#34;content&#34;)&#xA;viper.SetDefault(&#34;LayoutDir&#34;, &#34;layouts&#34;)&#xA;viper.SetDefault(&#34;Taxonomies&#34;, map[string]string{&#34;tag&#34;: &#34;tags&#34;, &#34;category&#34;: &#34;categories&#34;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Reading Config Files&lt;/h3&gt; &#xA;&lt;p&gt;Viper requires minimal configuration so it knows where to look for config files. Viper supports JSON, TOML, YAML, HCL, INI, envfile and Java Properties files. Viper can search multiple paths, but currently a single Viper instance only supports a single configuration file. Viper does not default to any configuration search paths leaving defaults decision to an application.&lt;/p&gt; &#xA;&lt;p&gt;Here is an example of how to use Viper to search for and read a configuration file. None of the specific paths are required, but at least one path should be provided where a configuration file is expected.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;viper.SetConfigName(&#34;config&#34;) // name of config file (without extension)&#xA;viper.SetConfigType(&#34;yaml&#34;) // REQUIRED if the config file does not have the extension in the name&#xA;viper.AddConfigPath(&#34;/etc/appname/&#34;)   // path to look for the config file in&#xA;viper.AddConfigPath(&#34;$HOME/.appname&#34;)  // call multiple times to add many search paths&#xA;viper.AddConfigPath(&#34;.&#34;)               // optionally look for config in the working directory&#xA;err := viper.ReadInConfig() // Find and read the config file&#xA;if err != nil { // Handle errors reading the config file&#xA;&#x9;panic(fmt.Errorf(&#34;fatal error config file: %w&#34;, err))&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can handle the specific case where no config file is found like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;if err := viper.ReadInConfig(); err != nil {&#xA;&#x9;if _, ok := err.(viper.ConfigFileNotFoundError); ok {&#xA;&#x9;&#x9;// Config file not found; ignore error if desired&#xA;&#x9;} else {&#xA;&#x9;&#x9;// Config file was found but another error was produced&#xA;&#x9;}&#xA;}&#xA;&#xA;// Config file found and successfully parsed&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;NOTE [since 1.6]:&lt;/em&gt; You can also have a file without an extension and specify the format programmatically. For those configuration files that lie in the home of the user without any extension like &lt;code&gt;.bashrc&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Writing Config Files&lt;/h3&gt; &#xA;&lt;p&gt;Reading from config files is useful, but at times you want to store all modifications made at run time. For that, a bunch of commands are available, each with its own purpose:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;WriteConfig - writes the current viper configuration to the predefined path, if exists. Errors if no predefined path. Will overwrite the current config file, if it exists.&lt;/li&gt; &#xA; &lt;li&gt;SafeWriteConfig - writes the current viper configuration to the predefined path. Errors if no predefined path. Will not overwrite the current config file, if it exists.&lt;/li&gt; &#xA; &lt;li&gt;WriteConfigAs - writes the current viper configuration to the given filepath. Will overwrite the given file, if it exists.&lt;/li&gt; &#xA; &lt;li&gt;SafeWriteConfigAs - writes the current viper configuration to the given filepath. Will not overwrite the given file, if it exists.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;As a rule of the thumb, everything marked with safe won&#39;t overwrite any file, but just create if not existent, whilst the default behavior is to create or truncate.&lt;/p&gt; &#xA;&lt;p&gt;A small examples section:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;viper.WriteConfig() // writes current config to predefined path set by &#39;viper.AddConfigPath()&#39; and &#39;viper.SetConfigName&#39;&#xA;viper.SafeWriteConfig()&#xA;viper.WriteConfigAs(&#34;/path/to/my/.config&#34;)&#xA;viper.SafeWriteConfigAs(&#34;/path/to/my/.config&#34;) // will error since it has already been written&#xA;viper.SafeWriteConfigAs(&#34;/path/to/my/.other_config&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Watching and re-reading config files&lt;/h3&gt; &#xA;&lt;p&gt;Viper supports the ability to have your application live read a config file while running.&lt;/p&gt; &#xA;&lt;p&gt;Gone are the days of needing to restart a server to have a config take effect, viper powered applications can read an update to a config file while running and not miss a beat.&lt;/p&gt; &#xA;&lt;p&gt;Simply tell the viper instance to watchConfig. Optionally you can provide a function for Viper to run each time a change occurs.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Make sure you add all of the configPaths prior to calling &lt;code&gt;WatchConfig()&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;viper.OnConfigChange(func(e fsnotify.Event) {&#xA;&#x9;fmt.Println(&#34;Config file changed:&#34;, e.Name)&#xA;})&#xA;viper.WatchConfig()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Reading Config from io.Reader&lt;/h3&gt; &#xA;&lt;p&gt;Viper predefines many configuration sources such as files, environment variables, flags, and remote K/V store, but you are not bound to them. You can also implement your own required configuration source and feed it to viper.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;viper.SetConfigType(&#34;yaml&#34;) // or viper.SetConfigType(&#34;YAML&#34;)&#xA;&#xA;// any approach to require this configuration into your program.&#xA;var yamlExample = []byte(`&#xA;Hacker: true&#xA;name: steve&#xA;hobbies:&#xA;- skateboarding&#xA;- snowboarding&#xA;- go&#xA;clothing:&#xA;  jacket: leather&#xA;  trousers: denim&#xA;age: 35&#xA;eyes : brown&#xA;beard: true&#xA;`)&#xA;&#xA;viper.ReadConfig(bytes.NewBuffer(yamlExample))&#xA;&#xA;viper.Get(&#34;name&#34;) // this would be &#34;steve&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Setting Overrides&lt;/h3&gt; &#xA;&lt;p&gt;These could be from a command line flag, or from your own application logic.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;viper.Set(&#34;Verbose&#34;, true)&#xA;viper.Set(&#34;LogFile&#34;, LogFile)&#xA;viper.Set(&#34;host.port&#34;, 5899)   // set subset&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Registering and Using Aliases&lt;/h3&gt; &#xA;&lt;p&gt;Aliases permit a single value to be referenced by multiple keys&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;viper.RegisterAlias(&#34;loud&#34;, &#34;Verbose&#34;)&#xA;&#xA;viper.Set(&#34;verbose&#34;, true) // same result as next line&#xA;viper.Set(&#34;loud&#34;, true)   // same result as prior line&#xA;&#xA;viper.GetBool(&#34;loud&#34;) // true&#xA;viper.GetBool(&#34;verbose&#34;) // true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Working with Environment Variables&lt;/h3&gt; &#xA;&lt;p&gt;Viper has full support for environment variables. This enables 12 factor applications out of the box. There are five methods that exist to aid working with ENV:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;AutomaticEnv()&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;BindEnv(string...) : error&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;SetEnvPrefix(string)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;SetEnvKeyReplacer(string...) *strings.Replacer&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;AllowEmptyEnv(bool)&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;When working with ENV variables, it’s important to recognize that Viper treats ENV variables as case sensitive.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Viper provides a mechanism to try to ensure that ENV variables are unique. By using &lt;code&gt;SetEnvPrefix&lt;/code&gt;, you can tell Viper to use a prefix while reading from the environment variables. Both &lt;code&gt;BindEnv&lt;/code&gt; and &lt;code&gt;AutomaticEnv&lt;/code&gt; will use this prefix.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;BindEnv&lt;/code&gt; takes one or more parameters. The first parameter is the key name, the rest are the name of the environment variables to bind to this key. If more than one are provided, they will take precedence in the specified order. The name of the environment variable is case sensitive. If the ENV variable name is not provided, then Viper will automatically assume that the ENV variable matches the following format: prefix + &#34;_&#34; + the key name in ALL CAPS. When you explicitly provide the ENV variable name (the second parameter), it &lt;strong&gt;does not&lt;/strong&gt; automatically add the prefix. For example if the second parameter is &#34;id&#34;, Viper will look for the ENV variable &#34;ID&#34;.&lt;/p&gt; &#xA;&lt;p&gt;One important thing to recognize when working with ENV variables is that the value will be read each time it is accessed. Viper does not fix the value when the &lt;code&gt;BindEnv&lt;/code&gt; is called.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;AutomaticEnv&lt;/code&gt; is a powerful helper especially when combined with &lt;code&gt;SetEnvPrefix&lt;/code&gt;. When called, Viper will check for an environment variable any time a &lt;code&gt;viper.Get&lt;/code&gt; request is made. It will apply the following rules. It will check for an environment variable with a name matching the key uppercased and prefixed with the &lt;code&gt;EnvPrefix&lt;/code&gt; if set.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;SetEnvKeyReplacer&lt;/code&gt; allows you to use a &lt;code&gt;strings.Replacer&lt;/code&gt; object to rewrite Env keys to an extent. This is useful if you want to use &lt;code&gt;-&lt;/code&gt; or something in your &lt;code&gt;Get()&lt;/code&gt; calls, but want your environmental variables to use &lt;code&gt;_&lt;/code&gt; delimiters. An example of using it can be found in &lt;code&gt;viper_test.go&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Alternatively, you can use &lt;code&gt;EnvKeyReplacer&lt;/code&gt; with &lt;code&gt;NewWithOptions&lt;/code&gt; factory function. Unlike &lt;code&gt;SetEnvKeyReplacer&lt;/code&gt;, it accepts a &lt;code&gt;StringReplacer&lt;/code&gt; interface allowing you to write custom string replacing logic.&lt;/p&gt; &#xA;&lt;p&gt;By default empty environment variables are considered unset and will fall back to the next configuration source. To treat empty environment variables as set, use the &lt;code&gt;AllowEmptyEnv&lt;/code&gt; method.&lt;/p&gt; &#xA;&lt;h4&gt;Env example&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;SetEnvPrefix(&#34;spf&#34;) // will be uppercased automatically&#xA;BindEnv(&#34;id&#34;)&#xA;&#xA;os.Setenv(&#34;SPF_ID&#34;, &#34;13&#34;) // typically done outside of the app&#xA;&#xA;id := Get(&#34;id&#34;) // 13&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Working with Flags&lt;/h3&gt; &#xA;&lt;p&gt;Viper has the ability to bind to flags. Specifically, Viper supports &lt;code&gt;Pflags&lt;/code&gt; as used in the &lt;a href=&#34;https://github.com/spf13/cobra&#34;&gt;Cobra&lt;/a&gt; library.&lt;/p&gt; &#xA;&lt;p&gt;Like &lt;code&gt;BindEnv&lt;/code&gt;, the value is not set when the binding method is called, but when it is accessed. This means you can bind as early as you want, even in an &lt;code&gt;init()&lt;/code&gt; function.&lt;/p&gt; &#xA;&lt;p&gt;For individual flags, the &lt;code&gt;BindPFlag()&lt;/code&gt; method provides this functionality.&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;serverCmd.Flags().Int(&#34;port&#34;, 1138, &#34;Port to run Application server on&#34;)&#xA;viper.BindPFlag(&#34;port&#34;, serverCmd.Flags().Lookup(&#34;port&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also bind an existing set of pflags (pflag.FlagSet):&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;pflag.Int(&#34;flagname&#34;, 1234, &#34;help message for flagname&#34;)&#xA;&#xA;pflag.Parse()&#xA;viper.BindPFlags(pflag.CommandLine)&#xA;&#xA;i := viper.GetInt(&#34;flagname&#34;) // retrieve values from viper instead of pflag&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The use of &lt;a href=&#34;https://github.com/spf13/pflag/&#34;&gt;pflag&lt;/a&gt; in Viper does not preclude the use of other packages that use the &lt;a href=&#34;https://golang.org/pkg/flag/&#34;&gt;flag&lt;/a&gt; package from the standard library. The pflag package can handle the flags defined for the flag package by importing these flags. This is accomplished by a calling a convenience function provided by the pflag package called AddGoFlagSet().&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;flag&#34;&#xA;&#x9;&#34;github.com/spf13/pflag&#34;&#xA;)&#xA;&#xA;func main() {&#xA;&#xA;&#x9;// using standard library &#34;flag&#34; package&#xA;&#x9;flag.Int(&#34;flagname&#34;, 1234, &#34;help message for flagname&#34;)&#xA;&#xA;&#x9;pflag.CommandLine.AddGoFlagSet(flag.CommandLine)&#xA;&#x9;pflag.Parse()&#xA;&#x9;viper.BindPFlags(pflag.CommandLine)&#xA;&#xA;&#x9;i := viper.GetInt(&#34;flagname&#34;) // retrieve value from viper&#xA;&#xA;&#x9;// ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Flag interfaces&lt;/h4&gt; &#xA;&lt;p&gt;Viper provides two Go interfaces to bind other flag systems if you don’t use &lt;code&gt;Pflags&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;FlagValue&lt;/code&gt; represents a single flag. This is a very simple example on how to implement this interface:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type myFlag struct {}&#xA;func (f myFlag) HasChanged() bool { return false }&#xA;func (f myFlag) Name() string { return &#34;my-flag-name&#34; }&#xA;func (f myFlag) ValueString() string { return &#34;my-flag-value&#34; }&#xA;func (f myFlag) ValueType() string { return &#34;string&#34; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once your flag implements this interface, you can simply tell Viper to bind it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;viper.BindFlagValue(&#34;my-flag-name&#34;, myFlag{})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;FlagValueSet&lt;/code&gt; represents a group of flags. This is a very simple example on how to implement this interface:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type myFlagSet struct {&#xA;&#x9;flags []myFlag&#xA;}&#xA;&#xA;func (f myFlagSet) VisitAll(fn func(FlagValue)) {&#xA;&#x9;for _, flag := range flags {&#xA;&#x9;&#x9;fn(flag)&#xA;&#x9;}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once your flag set implements this interface, you can simply tell Viper to bind it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;fSet := myFlagSet{&#xA;&#x9;flags: []myFlag{myFlag{}, myFlag{}},&#xA;}&#xA;viper.BindFlagValues(&#34;my-flags&#34;, fSet)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Remote Key/Value Store Support&lt;/h3&gt; &#xA;&lt;p&gt;To enable remote support in Viper, do a blank import of the &lt;code&gt;viper/remote&lt;/code&gt; package:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;import _ &#34;github.com/spf13/viper/remote&#34;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Viper will read a config string (as JSON, TOML, YAML, HCL or envfile) retrieved from a path in a Key/Value store such as etcd or Consul. These values take precedence over default values, but are overridden by configuration values retrieved from disk, flags, or environment variables.&lt;/p&gt; &#xA;&lt;p&gt;Viper supports multiple hosts. To use, pass a list of endpoints separated by &lt;code&gt;;&lt;/code&gt;. For example &lt;code&gt;http://127.0.0.1:4001;http://127.0.0.1:4002&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Viper uses &lt;a href=&#34;https://github.com/bketelsen/crypt&#34;&gt;crypt&lt;/a&gt; to retrieve configuration from the K/V store, which means that you can store your configuration values encrypted and have them automatically decrypted if you have the correct gpg keyring. Encryption is optional.&lt;/p&gt; &#xA;&lt;p&gt;You can use remote configuration in conjunction with local configuration, or independently of it.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;crypt&lt;/code&gt; has a command-line helper that you can use to put configurations in your K/V store. &lt;code&gt;crypt&lt;/code&gt; defaults to etcd on &lt;a href=&#34;http://127.0.0.1:4001&#34;&gt;http://127.0.0.1:4001&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ go get github.com/bketelsen/crypt/bin/crypt&#xA;$ crypt set -plaintext /config/hugo.json /Users/hugo/settings/config.json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Confirm that your value was set:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ crypt get -plaintext /config/hugo.json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See the &lt;code&gt;crypt&lt;/code&gt; documentation for examples of how to set encrypted values, or how to use Consul.&lt;/p&gt; &#xA;&lt;h3&gt;Remote Key/Value Store Example - Unencrypted&lt;/h3&gt; &#xA;&lt;h4&gt;etcd&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;viper.AddRemoteProvider(&#34;etcd&#34;, &#34;http://127.0.0.1:4001&#34;,&#34;/config/hugo.json&#34;)&#xA;viper.SetConfigType(&#34;json&#34;) // because there is no file extension in a stream of bytes, supported extensions are &#34;json&#34;, &#34;toml&#34;, &#34;yaml&#34;, &#34;yml&#34;, &#34;properties&#34;, &#34;props&#34;, &#34;prop&#34;, &#34;env&#34;, &#34;dotenv&#34;&#xA;err := viper.ReadRemoteConfig()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;etcd3&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;viper.AddRemoteProvider(&#34;etcd3&#34;, &#34;http://127.0.0.1:4001&#34;,&#34;/config/hugo.json&#34;)&#xA;viper.SetConfigType(&#34;json&#34;) // because there is no file extension in a stream of bytes, supported extensions are &#34;json&#34;, &#34;toml&#34;, &#34;yaml&#34;, &#34;yml&#34;, &#34;properties&#34;, &#34;props&#34;, &#34;prop&#34;, &#34;env&#34;, &#34;dotenv&#34;&#xA;err := viper.ReadRemoteConfig()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Consul&lt;/h4&gt; &#xA;&lt;p&gt;You need to set a key to Consul key/value storage with JSON value containing your desired config. For example, create a Consul key/value store key &lt;code&gt;MY_CONSUL_KEY&lt;/code&gt; with value:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;    &#34;port&#34;: 8080,&#xA;    &#34;hostname&#34;: &#34;myhostname.com&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;viper.AddRemoteProvider(&#34;consul&#34;, &#34;localhost:8500&#34;, &#34;MY_CONSUL_KEY&#34;)&#xA;viper.SetConfigType(&#34;json&#34;) // Need to explicitly set this to json&#xA;err := viper.ReadRemoteConfig()&#xA;&#xA;fmt.Println(viper.Get(&#34;port&#34;)) // 8080&#xA;fmt.Println(viper.Get(&#34;hostname&#34;)) // myhostname.com&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Firestore&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;viper.AddRemoteProvider(&#34;firestore&#34;, &#34;google-cloud-project-id&#34;, &#34;collection/document&#34;)&#xA;viper.SetConfigType(&#34;json&#34;) // Config&#39;s format: &#34;json&#34;, &#34;toml&#34;, &#34;yaml&#34;, &#34;yml&#34;&#xA;err := viper.ReadRemoteConfig()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Of course, you&#39;re allowed to use &lt;code&gt;SecureRemoteProvider&lt;/code&gt; also&lt;/p&gt; &#xA;&lt;h4&gt;NATS&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;viper.AddRemoteProvider(&#34;nats&#34;, &#34;nats://127.0.0.1:4222&#34;, &#34;myapp.config&#34;)&#xA;viper.SetConfigType(&#34;json&#34;)&#xA;err := viper.ReadRemoteConfig()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Remote Key/Value Store Example - Encrypted&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;viper.AddSecureRemoteProvider(&#34;etcd&#34;,&#34;http://127.0.0.1:4001&#34;,&#34;/config/hugo.json&#34;,&#34;/etc/secrets/mykeyring.gpg&#34;)&#xA;viper.SetConfigType(&#34;json&#34;) // because there is no file extension in a stream of bytes,  supported extensions are &#34;json&#34;, &#34;toml&#34;, &#34;yaml&#34;, &#34;yml&#34;, &#34;properties&#34;, &#34;props&#34;, &#34;prop&#34;, &#34;env&#34;, &#34;dotenv&#34;&#xA;err := viper.ReadRemoteConfig()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Watching Changes in etcd - Unencrypted&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// alternatively, you can create a new viper instance.&#xA;var runtime_viper = viper.New()&#xA;&#xA;runtime_viper.AddRemoteProvider(&#34;etcd&#34;, &#34;http://127.0.0.1:4001&#34;, &#34;/config/hugo.yml&#34;)&#xA;runtime_viper.SetConfigType(&#34;yaml&#34;) // because there is no file extension in a stream of bytes, supported extensions are &#34;json&#34;, &#34;toml&#34;, &#34;yaml&#34;, &#34;yml&#34;, &#34;properties&#34;, &#34;props&#34;, &#34;prop&#34;, &#34;env&#34;, &#34;dotenv&#34;&#xA;&#xA;// read from remote config the first time.&#xA;err := runtime_viper.ReadRemoteConfig()&#xA;&#xA;// unmarshal config&#xA;runtime_viper.Unmarshal(&amp;amp;runtime_conf)&#xA;&#xA;// open a goroutine to watch remote changes forever&#xA;go func(){&#xA;&#x9;for {&#xA;&#x9;&#x9;time.Sleep(time.Second * 5) // delay after each request&#xA;&#xA;&#x9;&#x9;// currently, only tested with etcd support&#xA;&#x9;&#x9;err := runtime_viper.WatchRemoteConfig()&#xA;&#x9;&#x9;if err != nil {&#xA;&#x9;&#x9;&#x9;log.Errorf(&#34;unable to read remote config: %v&#34;, err)&#xA;&#x9;&#x9;&#x9;continue&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;// unmarshal new config into our runtime config struct. you can also use channel&#xA;&#x9;&#x9;// to implement a signal to notify the system of the changes&#xA;&#x9;&#x9;runtime_viper.Unmarshal(&amp;amp;runtime_conf)&#xA;&#x9;}&#xA;}()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Getting Values From Viper&lt;/h2&gt; &#xA;&lt;p&gt;In Viper, there are a few ways to get a value depending on the value’s type. The following functions and methods exist:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Get(key string) : any&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;GetBool(key string) : bool&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;GetFloat64(key string) : float64&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;GetInt(key string) : int&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;GetIntSlice(key string) : []int&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;GetString(key string) : string&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;GetStringMap(key string) : map[string]any&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;GetStringMapString(key string) : map[string]string&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;GetStringSlice(key string) : []string&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;GetTime(key string) : time.Time&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;GetDuration(key string) : time.Duration&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;IsSet(key string) : bool&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;AllSettings() : map[string]any&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;One important thing to recognize is that each Get function will return a zero value if it’s not found. To check if a given key exists, the &lt;code&gt;IsSet()&lt;/code&gt; method has been provided.&lt;/p&gt; &#xA;&lt;p&gt;The zero value will also be returned if the value is set, but fails to parse as the requested type.&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;viper.GetString(&#34;logfile&#34;) // case-insensitive Setting &amp;amp; Getting&#xA;if viper.GetBool(&#34;verbose&#34;) {&#xA;&#x9;fmt.Println(&#34;verbose enabled&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Accessing nested keys&lt;/h3&gt; &#xA;&lt;p&gt;The accessor methods also accept formatted paths to deeply nested keys. For example, if the following JSON file is loaded:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;    &#34;host&#34;: {&#xA;        &#34;address&#34;: &#34;localhost&#34;,&#xA;        &#34;port&#34;: 5799&#xA;    },&#xA;    &#34;datastore&#34;: {&#xA;        &#34;metric&#34;: {&#xA;            &#34;host&#34;: &#34;127.0.0.1&#34;,&#xA;            &#34;port&#34;: 3099&#xA;        },&#xA;        &#34;warehouse&#34;: {&#xA;            &#34;host&#34;: &#34;198.0.0.1&#34;,&#xA;            &#34;port&#34;: 2112&#xA;        }&#xA;    }&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Viper can access a nested field by passing a &lt;code&gt;.&lt;/code&gt; delimited path of keys:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;GetString(&#34;datastore.metric.host&#34;) // (returns &#34;127.0.0.1&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This obeys the precedence rules established above; the search for the path will cascade through the remaining configuration registries until found.&lt;/p&gt; &#xA;&lt;p&gt;For example, given this configuration file, both &lt;code&gt;datastore.metric.host&lt;/code&gt; and &lt;code&gt;datastore.metric.port&lt;/code&gt; are already defined (and may be overridden). If in addition &lt;code&gt;datastore.metric.protocol&lt;/code&gt; was defined in the defaults, Viper would also find it.&lt;/p&gt; &#xA;&lt;p&gt;However, if &lt;code&gt;datastore.metric&lt;/code&gt; was overridden (by a flag, an environment variable, the &lt;code&gt;Set()&lt;/code&gt; method, …) with an immediate value, then all sub-keys of &lt;code&gt;datastore.metric&lt;/code&gt; become undefined, they are “shadowed” by the higher-priority configuration level.&lt;/p&gt; &#xA;&lt;p&gt;Viper can access array indices by using numbers in the path. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsonc&#34;&gt;{&#xA;    &#34;host&#34;: {&#xA;        &#34;address&#34;: &#34;localhost&#34;,&#xA;        &#34;ports&#34;: [&#xA;            5799,&#xA;            6029&#xA;        ]&#xA;    },&#xA;    &#34;datastore&#34;: {&#xA;        &#34;metric&#34;: {&#xA;            &#34;host&#34;: &#34;127.0.0.1&#34;,&#xA;            &#34;port&#34;: 3099&#xA;        },&#xA;        &#34;warehouse&#34;: {&#xA;            &#34;host&#34;: &#34;198.0.0.1&#34;,&#xA;            &#34;port&#34;: 2112&#xA;        }&#xA;    }&#xA;}&#xA;&#xA;GetInt(&#34;host.ports.1&#34;) // returns 6029&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Lastly, if there exists a key that matches the delimited key path, its value will be returned instead. E.g.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsonc&#34;&gt;{&#xA;    &#34;datastore.metric.host&#34;: &#34;0.0.0.0&#34;,&#xA;    &#34;host&#34;: {&#xA;        &#34;address&#34;: &#34;localhost&#34;,&#xA;        &#34;port&#34;: 5799&#xA;    },&#xA;    &#34;datastore&#34;: {&#xA;        &#34;metric&#34;: {&#xA;            &#34;host&#34;: &#34;127.0.0.1&#34;,&#xA;            &#34;port&#34;: 3099&#xA;        },&#xA;        &#34;warehouse&#34;: {&#xA;            &#34;host&#34;: &#34;198.0.0.1&#34;,&#xA;            &#34;port&#34;: 2112&#xA;        }&#xA;    }&#xA;}&#xA;&#xA;GetString(&#34;datastore.metric.host&#34;) // returns &#34;0.0.0.0&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Extracting a sub-tree&lt;/h3&gt; &#xA;&lt;p&gt;When developing reusable modules, it&#39;s often useful to extract a subset of the configuration and pass it to a module. This way the module can be instantiated more than once, with different configurations.&lt;/p&gt; &#xA;&lt;p&gt;For example, an application might use multiple different cache stores for different purposes:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;cache:&#xA;  cache1:&#xA;    max-items: 100&#xA;    item-size: 64&#xA;  cache2:&#xA;    max-items: 200&#xA;    item-size: 80&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We could pass the cache name to a module (eg. &lt;code&gt;NewCache(&#34;cache1&#34;)&lt;/code&gt;), but it would require weird concatenation for accessing config keys and would be less separated from the global config.&lt;/p&gt; &#xA;&lt;p&gt;So instead of doing that let&#39;s pass a Viper instance to the constructor that represents a subset of the configuration:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;cache1Config := viper.Sub(&#34;cache.cache1&#34;)&#xA;if cache1Config == nil { // Sub returns nil if the key cannot be found&#xA;&#x9;panic(&#34;cache configuration not found&#34;)&#xA;}&#xA;&#xA;cache1 := NewCache(cache1Config)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Always check the return value of &lt;code&gt;Sub&lt;/code&gt;. It returns &lt;code&gt;nil&lt;/code&gt; if a key cannot be found.&lt;/p&gt; &#xA;&lt;p&gt;Internally, the &lt;code&gt;NewCache&lt;/code&gt; function can address &lt;code&gt;max-items&lt;/code&gt; and &lt;code&gt;item-size&lt;/code&gt; keys directly:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func NewCache(v *Viper) *Cache {&#xA;&#x9;return &amp;amp;Cache{&#xA;&#x9;&#x9;MaxItems: v.GetInt(&#34;max-items&#34;),&#xA;&#x9;&#x9;ItemSize: v.GetInt(&#34;item-size&#34;),&#xA;&#x9;}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The resulting code is easy to test, since it&#39;s decoupled from the main config structure, and easier to reuse (for the same reason).&lt;/p&gt; &#xA;&lt;h3&gt;Unmarshaling&lt;/h3&gt; &#xA;&lt;p&gt;You also have the option of Unmarshaling all or a specific value to a struct, map, etc.&lt;/p&gt; &#xA;&lt;p&gt;There are two methods to do this:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Unmarshal(rawVal any) : error&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;UnmarshalKey(key string, rawVal any) : error&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type config struct {&#xA;&#x9;Port int&#xA;&#x9;Name string&#xA;&#x9;PathMap string `mapstructure:&#34;path_map&#34;`&#xA;}&#xA;&#xA;var C config&#xA;&#xA;err := viper.Unmarshal(&amp;amp;C)&#xA;if err != nil {&#xA;&#x9;t.Fatalf(&#34;unable to decode into struct, %v&#34;, err)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to unmarshal configuration where the keys themselves contain dot (the default key delimiter), you have to change the delimiter:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;v := viper.NewWithOptions(viper.KeyDelimiter(&#34;::&#34;))&#xA;&#xA;v.SetDefault(&#34;chart::values&#34;, map[string]any{&#xA;&#x9;&#34;ingress&#34;: map[string]any{&#xA;&#x9;&#x9;&#34;annotations&#34;: map[string]any{&#xA;&#x9;&#x9;&#x9;&#34;traefik.frontend.rule.type&#34;:                 &#34;PathPrefix&#34;,&#xA;&#x9;&#x9;&#x9;&#34;traefik.ingress.kubernetes.io/ssl-redirect&#34;: &#34;true&#34;,&#xA;&#x9;&#x9;},&#xA;&#x9;},&#xA;})&#xA;&#xA;type config struct {&#xA;&#x9;Chart struct{&#xA;&#x9;&#x9;Values map[string]any&#xA;&#x9;}&#xA;}&#xA;&#xA;var C config&#xA;&#xA;v.Unmarshal(&amp;amp;C)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Viper also supports unmarshaling into embedded structs:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;/*&#xA;Example config:&#xA;&#xA;module:&#xA;    enabled: true&#xA;    token: 89h3f98hbwf987h3f98wenf89ehf&#xA;*/&#xA;type config struct {&#xA;&#x9;Module struct {&#xA;&#x9;&#x9;Enabled bool&#xA;&#xA;&#x9;&#x9;moduleConfig `mapstructure:&#34;,squash&#34;`&#xA;&#x9;}&#xA;}&#xA;&#xA;// moduleConfig could be in a module specific package&#xA;type moduleConfig struct {&#xA;&#x9;Token string&#xA;}&#xA;&#xA;var C config&#xA;&#xA;err := viper.Unmarshal(&amp;amp;C)&#xA;if err != nil {&#xA;&#x9;t.Fatalf(&#34;unable to decode into struct, %v&#34;, err)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Viper uses &lt;a href=&#34;https://github.com/mitchellh/mapstructure&#34;&gt;github.com/mitchellh/mapstructure&lt;/a&gt; under the hood for unmarshaling values which uses &lt;code&gt;mapstructure&lt;/code&gt; tags by default.&lt;/p&gt; &#xA;&lt;h3&gt;Decoding custom formats&lt;/h3&gt; &#xA;&lt;p&gt;A frequently requested feature for Viper is adding more value formats and decoders. For example, parsing character (dot, comma, semicolon, etc) separated strings into slices.&lt;/p&gt; &#xA;&lt;p&gt;This is already available in Viper using mapstructure decode hooks.&lt;/p&gt; &#xA;&lt;p&gt;Read more about the details in &lt;a href=&#34;https://sagikazarmark.hu/blog/decoding-custom-formats-with-viper/&#34;&gt;this blog post&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Marshalling to string&lt;/h3&gt; &#xA;&lt;p&gt;You may need to marshal all the settings held in viper into a string rather than write them to a file. You can use your favorite format&#39;s marshaller with the config returned by &lt;code&gt;AllSettings()&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;import (&#xA;&#x9;yaml &#34;gopkg.in/yaml.v2&#34;&#xA;&#x9;// ...&#xA;)&#xA;&#xA;func yamlStringSettings() string {&#xA;&#x9;c := viper.AllSettings()&#xA;&#x9;bs, err := yaml.Marshal(c)&#xA;&#x9;if err != nil {&#xA;&#x9;&#x9;log.Fatalf(&#34;unable to marshal config to YAML: %v&#34;, err)&#xA;&#x9;}&#xA;&#x9;return string(bs)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Viper or Vipers?&lt;/h2&gt; &#xA;&lt;p&gt;Viper comes ready to use out of the box. There is no configuration or initialization needed to begin using Viper. Since most applications will want to use a single central repository for their configuration, the viper package provides this. It is similar to a singleton.&lt;/p&gt; &#xA;&lt;p&gt;In all of the examples above, they demonstrate using viper in its singleton style approach.&lt;/p&gt; &#xA;&lt;h3&gt;Working with multiple vipers&lt;/h3&gt; &#xA;&lt;p&gt;You can also create many different vipers for use in your application. Each will have its own unique set of configurations and values. Each can read from a different config file, key value store, etc. All of the functions that viper package supports are mirrored as methods on a viper.&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;x := viper.New()&#xA;y := viper.New()&#xA;&#xA;x.SetDefault(&#34;ContentDir&#34;, &#34;content&#34;)&#xA;y.SetDefault(&#34;ContentDir&#34;, &#34;foobar&#34;)&#xA;&#xA;//...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When working with multiple vipers, it is up to the user to keep track of the different vipers.&lt;/p&gt; &#xA;&lt;h2&gt;Q &amp;amp; A&lt;/h2&gt; &#xA;&lt;h3&gt;Why is it called “Viper”?&lt;/h3&gt; &#xA;&lt;p&gt;A: Viper is designed to be a &lt;a href=&#34;http://en.wikipedia.org/wiki/Viper_(G.I._Joe)&#34;&gt;companion&lt;/a&gt; to &lt;a href=&#34;https://github.com/spf13/cobra&#34;&gt;Cobra&lt;/a&gt;. While both can operate completely independently, together they make a powerful pair to handle much of your application foundation needs.&lt;/p&gt; &#xA;&lt;h3&gt;Why is it called “Cobra”?&lt;/h3&gt; &#xA;&lt;p&gt;Is there a better name for a &lt;a href=&#34;http://en.wikipedia.org/wiki/Cobra_Commander&#34;&gt;commander&lt;/a&gt;?&lt;/p&gt; &#xA;&lt;h3&gt;Does Viper support case sensitive keys?&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;tl;dr:&lt;/strong&gt; No.&lt;/p&gt; &#xA;&lt;p&gt;Viper merges configuration from various sources, many of which are either case insensitive or uses different casing than the rest of the sources (eg. env vars). In order to provide the best experience when using multiple sources, the decision has been made to make all keys case insensitive.&lt;/p&gt; &#xA;&lt;p&gt;There has been several attempts to implement case sensitivity, but unfortunately it&#39;s not that trivial. We might take a stab at implementing it in &lt;a href=&#34;https://github.com/spf13/viper/issues/772&#34;&gt;Viper v2&lt;/a&gt;, but despite the initial noise, it does not seem to be requested that much.&lt;/p&gt; &#xA;&lt;p&gt;You can vote for case sensitivity by filling out this feedback form: &lt;a href=&#34;https://forms.gle/R6faU74qPRPAzchZ9&#34;&gt;https://forms.gle/R6faU74qPRPAzchZ9&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Is it safe to concurrently read and write to a viper?&lt;/h3&gt; &#xA;&lt;p&gt;No, you will need to synchronize access to the viper yourself (for example by using the &lt;code&gt;sync&lt;/code&gt; package). Concurrent reads and writes can cause a panic.&lt;/p&gt; &#xA;&lt;h2&gt;Troubleshooting&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/spf13/viper/master/TROUBLESHOOTING.md&#34;&gt;TROUBLESHOOTING.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;For an optimal developer experience, it is recommended to install &lt;a href=&#34;https://nixos.org/download.html&#34;&gt;Nix&lt;/a&gt; and &lt;a href=&#34;https://direnv.net/docs/installation.html&#34;&gt;direnv&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Alternatively, install &lt;a href=&#34;https://go.dev/dl/&#34;&gt;Go&lt;/a&gt; on your computer then run &lt;code&gt;make deps&lt;/code&gt; to install the rest of the dependencies.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Run the test suite:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;make test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run linters:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;make lint # pass -j option to run them in parallel&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Some linter violations can automatically be fixed:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;make fmt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The project is licensed under the &lt;a href=&#34;https://raw.githubusercontent.com/spf13/viper/master/LICENSE&#34;&gt;MIT License&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>hajimehoshi/ebiten</title>
    <updated>2024-03-31T01:47:20Z</updated>
    <id>tag:github.com,2024-03-31:/hajimehoshi/ebiten</id>
    <link href="https://github.com/hajimehoshi/ebiten" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Ebitengine - A dead simple 2D game engine for Go&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Ebitengine (v2)&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/hajimehoshi/ebiten/v2&#34;&gt;&lt;img src=&#34;https://pkg.go.dev/badge/github.com/hajimehoshi/ebiten/v2.svg?sanitize=true&#34; alt=&#34;Go Reference&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/hajimehoshi/ebiten/actions?query=workflow%3Atest&#34;&gt;&lt;img src=&#34;https://github.com/hajimehoshi/ebiten/actions/workflows/test.yml/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;A dead simple 2D game engine for Go&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Ebitengine (formerly known as Ebiten) is an open source game engine for the Go programming language. Ebitengine&#39;s simple API allows you to quickly and easily develop 2D games that can be deployed across multiple platforms.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ebitengine.org&#34;&gt;Website (ebitengine.org)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/hajimehoshi/ebiten/v2&#34;&gt;API Reference&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ebitengine.org/en/documents/cheatsheet.html&#34;&gt;Cheat Sheet&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sedyh/awesome-ebitengine&#34;&gt;Awesome Ebitengine&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://ebitengine.org/images/overview2.png&#34; alt=&#34;Overview&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Platforms&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ebitengine.org/en/documents/install.html?os=windows&#34;&gt;Windows&lt;/a&gt; (No Cgo required!)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ebitengine.org/en/documents/install.html?os=darwin&#34;&gt;macOS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ebitengine.org/en/documents/install.html?os=linux&#34;&gt;Linux&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ebitengine.org/en/documents/install.html?os=freebsd&#34;&gt;FreeBSD&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ebitengine.org/en/documents/mobile.html&#34;&gt;Android&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ebitengine.org/en/documents/mobile.html&#34;&gt;iOS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ebitengine.org/en/documents/webassembly.html&#34;&gt;WebAssembly&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Nintendo Switch&lt;/li&gt; &#xA; &lt;li&gt;Xbox&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For installation on desktops, see &lt;a href=&#34;https://ebitengine.org/en/documents/install.html&#34;&gt;the installation instruction&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;2D Graphics (Geometry and color transformation by matrices, Various composition modes, Offscreen rendering, Text rendering, Automatic batches, Automatic texture atlas, Custom shaders)&lt;/li&gt; &#xA; &lt;li&gt;Input (Mouse, Keyboard, Gamepads, Touches)&lt;/li&gt; &#xA; &lt;li&gt;Audio (Ogg/Vorbis, MP3, WAV, PCM)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Packages&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/hajimehoshi/ebiten/v2&#34;&gt;ebiten&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/hajimehoshi/ebiten/v2/audio&#34;&gt;audio&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/hajimehoshi/ebiten/v2/audio/mp3&#34;&gt;mp3&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/hajimehoshi/ebiten/v2/audio/vorbis&#34;&gt;vorbis&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/hajimehoshi/ebiten/v2/audio/wav&#34;&gt;wav&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/hajimehoshi/ebiten/v2/colorm&#34;&gt;colorm&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/hajimehoshi/ebiten/v2/ebitenutil&#34;&gt;ebitenutil&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/hajimehoshi/ebiten/v2/inpututil&#34;&gt;inpututil&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/hajimehoshi/ebiten/v2/mobile&#34;&gt;mobile&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/hajimehoshi/ebiten/v2/text/v2&#34;&gt;text/v2&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/hajimehoshi/ebiten/v2/vector&#34;&gt;vector&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/hajimehoshi/ebiten/v2/exp/textinput&#34;&gt;exp/textinput&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Community&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://discord.gg/3tVdM5H8cC&#34;&gt;Discord&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;#ebitengine&lt;/code&gt; channel in &lt;a href=&#34;https://blog.gopheracademy.com/gophers-slack-community/&#34;&gt;Gophers Slack&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hajimehoshi/ebiten/discussions&#34;&gt;GitHub Discussion&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.reddit.com/r/ebitengine/&#34;&gt;&lt;code&gt;r/ebitengine&lt;/code&gt; in Reddit&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Ebitengine is licensed under Apache license version 2.0. See &lt;a href=&#34;https://raw.githubusercontent.com/hajimehoshi/ebiten/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt; file.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://ebitengine.org/images/logo.png&#34;&gt;The Ebitengine logo&lt;/a&gt; by Hajime Hoshi is licensed under &lt;a href=&#34;https://creativecommons.org/licenses/by-nd/4.0/&#34;&gt;the Creative Commons Attribution-NoDerivatives 4.0&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>