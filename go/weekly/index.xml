<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-11-26T01:51:12Z</updated>
  <subtitle>Weekly Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>everywall/ladder</title>
    <updated>2023-11-26T01:51:12Z</updated>
    <id>tag:github.com,2023-11-26:/everywall/ladder</id>
    <link href="https://github.com/everywall/ladder" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Selfhosted alternative to 12ft.io. and 1ft.io bypass paywalls with a proxy ladder and remove CORS headers from any URL&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/everywall/ladder/main/assets/pigeon.svg?sanitize=true&#34; width=&#34;100px&#34;&gt; &lt;/p&gt; &#xA;&lt;h1 align=&#34;center&#34;&gt;Ladder&lt;/h1&gt; &#xA;&lt;div&gt;&#xA; &lt;img alt=&#34;License&#34; src=&#34;https://img.shields.io/github/license/everywall/ladder&#34;&gt; &#xA; &lt;img alt=&#34;go.mod Go version &#34; src=&#34;https://img.shields.io/github/go-mod/go-version/everywall/ladder&#34;&gt; &#xA; &lt;img alt=&#34;GitHub tag (with filter)&#34; src=&#34;https://img.shields.io/github/v/tag/everywall/ladder&#34;&gt; &#xA; &lt;img alt=&#34;GitHub (Pre-)Release Date&#34; src=&#34;https://img.shields.io/github/release-date-pre/everywall/ladder&#34;&gt; &#xA; &lt;img alt=&#34;GitHub Downloads all releases&#34; src=&#34;https://img.shields.io/github/downloads/everywall/ladder/total&#34;&gt; &#xA; &lt;img alt=&#34;GitHub Build Status (with event)&#34; src=&#34;https://img.shields.io/github/actions/workflow/status/everywall/ladder/release-binaries.yaml&#34;&gt;&#xA;&lt;/div&gt; &#xA;&lt;p&gt;&lt;em&gt;Ladder is a web proxy to help bypass paywalls.&lt;/em&gt; This is a selfhosted version of &lt;a href=&#34;https://1ft.io&#34;&gt;1ft.io&lt;/a&gt; and &lt;a href=&#34;https://12ft.io&#34;&gt;12ft.io&lt;/a&gt;. It is inspired by &lt;a href=&#34;https://github.com/wasi-master/13ft&#34;&gt;13ft&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Why&lt;/h3&gt; &#xA;&lt;p&gt;Freedom of information is an essential pillar of democracy and informed decision-making. While media organizations have legitimate financial interests, it is crucial to strike a balance between profitability and the public&#39;s right to access information. The proliferation of paywalls raises concerns about the erosion of this fundamental freedom, and it is imperative for society to find innovative ways to preserve access to vital information without compromising the sustainability of journalism. In a world where knowledge should be shared and not commodified, paywalls should be critically examined to ensure that they do not undermine the principles of an open and informed society.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Disclaimer:&lt;/strong&gt; This project is intended for educational purposes only. The author does not endorse or encourage any unethical or illegal activity. Use this tool at your own risk.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;How it works&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;sequenceDiagram&#xA;    client-&amp;gt;&amp;gt;+ladder: GET&#xA;    ladder--&amp;gt;&amp;gt;ladder: apply RequestModifications&#xA;    ladder-&amp;gt;&amp;gt;+website: GET&#xA;    website-&amp;gt;&amp;gt;-ladder: 200 OK&#xA;    ladder--&amp;gt;&amp;gt;ladder: apply ResultModifications&#xA;    ladder-&amp;gt;&amp;gt;-client: 200 OK&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Features&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Bypass Paywalls&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Remove CORS headers from responses, assets, and images ...&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Apply domain based ruleset/code to modify response / requested URL&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Keep site browsable&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; API&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Fetch RAW HTML&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Custom User Agent&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Custom X-Forwarded-For IP&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/everywall/ladder/pkgs/container/ladder&#34;&gt;Docker container&lt;/a&gt; (amd64, arm64)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Linux binary&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Mac OS binary&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Windows binary (untested)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Removes most of the ads (unexpected side effect ¯\_(ツ)_/¯ )&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Basic Auth&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Disable logs&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; No Tracking&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Limit the proxy to a list of domains&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Expose Ruleset to other ladders&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Fetch from Google Cache&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Optional TOR proxy&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; A key to share only one URL&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Limitations&lt;/h3&gt; &#xA;&lt;p&gt;Some sites do not expose their content to search engines, which means that the proxy cannot access the content. A future version will try to fetch the content from Google Cache.&lt;/p&gt; &#xA;&lt;p&gt;Certain sites may display missing images or encounter formatting issues. This can be attributed to the site&#39;s reliance on JavaScript or CSS for image and resource loading, which presents a limitation when accessed through this proxy. If you prefer a full experience, please consider buying a subscription for the site.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Warning:&lt;/strong&gt; If your instance will be publicly accessible, make sure to enable Basic Auth. This will prevent unauthorized users from using your proxy. If you do not enable Basic Auth, anyone can use your proxy to browse nasty/illegal stuff. And you will be responsible for it.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Binary&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download binary &lt;a href=&#34;https://github.com/everywall/ladder/releases/latest&#34;&gt;here&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Unpack and run the binary &lt;code&gt;./ladder -r https://t.ly/14PSf&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Open Browser (Default: &lt;a href=&#34;http://localhost:8080&#34;&gt;http://localhost:8080&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Docker&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run -p 8080:8080 -d --env RULESET=https://t.ly/14PSf --name ladder ghcr.io/everywall/ladder:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Docker Compose&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl https://raw.githubusercontent.com/everywall/ladder/main/docker-compose.yaml --output docker-compose.yaml&#xA;docker-compose up -d&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Helm&lt;/h3&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/everywall/ladder/main/helm-chart/README.md&#34;&gt;README.md&lt;/a&gt; in helm-chart sub-directory for more information.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Browser&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Open Browser (Default: &lt;a href=&#34;http://localhost:8080&#34;&gt;http://localhost:8080&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Enter URL&lt;/li&gt; &#xA; &lt;li&gt;Press Enter&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Or direct by appending the URL to the end of the proxy URL: &lt;a href=&#34;http://localhost:8080/https://www.example.com&#34;&gt;http://localhost:8080/https://www.example.com&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Or create a bookmark with the following URL:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;javascript:window.location.href=&#34;http://localhost:8080/&#34;+location.href&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;API&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -X GET &#34;http://localhost:8080/api/https://www.example.com&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;RAW&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://localhost:8080/raw/https://www.example.com&#34;&gt;http://localhost:8080/raw/https://www.example.com&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Running Ruleset&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://localhost:8080/ruleset&#34;&gt;http://localhost:8080/ruleset&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;h3&gt;Environment Variables&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Variable&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;th&gt;Value&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;PORT&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Port to listen on&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;8080&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;PREFORK&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Spawn multiple server instances&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;USER_AGENT&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;User agent to emulate&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Mozilla/5.0 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;X_FORWARDED_FOR&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;IP forwarder address&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;66.249.66.1&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;USERPASS&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Enables Basic Auth, format &lt;code&gt;admin:123456&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;``&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;LOG_URLS&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Log fetched URL&#39;s&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;DISABLE_FORM&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Disables URL Form Frontpage&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;FORM_PATH&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Path to custom Form HTML&lt;/td&gt; &#xA;   &lt;td&gt;``&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;RULESET&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Path or URL to a ruleset file, accepts local directories&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;https://raw.githubusercontent.com/everywall/ladder-rules/main/ruleset.yaml&lt;/code&gt; or &lt;code&gt;/path/to/my/rules.yaml&lt;/code&gt; or &lt;code&gt;/path/to/my/rules/&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;EXPOSE_RULESET&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Make your Ruleset available to other ladders&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;ALLOWED_DOMAINS&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Comma separated list of allowed domains. Empty = no limitations&lt;/td&gt; &#xA;   &lt;td&gt;``&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;ALLOWED_DOMAINS_RULESET&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Allow Domains from Ruleset. false = no limitations&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;code&gt;ALLOWED_DOMAINS&lt;/code&gt; and &lt;code&gt;ALLOWED_DOMAINS_RULESET&lt;/code&gt; are joined together. If both are empty, no limitations are applied.&lt;/p&gt; &#xA;&lt;h3&gt;Ruleset&lt;/h3&gt; &#xA;&lt;p&gt;It is possible to apply custom rules to modify the response or the requested URL. This can be used to remove unwanted or modify elements from the page. The ruleset is a YAML file, a directory with YAML Files, or an URL to a YAML file that contains a list of rules for each domain. These rules are loaded on startup.&lt;/p&gt; &#xA;&lt;p&gt;There is a basic ruleset available in a separate repository &lt;a href=&#34;https://raw.githubusercontent.com/everywall/ladder-rules/main/ruleset.yaml&#34;&gt;ruleset.yaml&lt;/a&gt;. Feel free to add your own rules and create a pull request.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;- domain: example.com          # Includes all subdomains&#xA;  domains:                     # Additional domains to apply the rule&#xA;    - www.example.de&#xA;    - www.beispiel.de&#xA;  headers:&#xA;    x-forwarded-for: none      # override X-Forwarded-For header or delete with none&#xA;    referer: none              # override Referer header or delete with none&#xA;    user-agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36&#xA;    content-security-policy: script-src &#39;self&#39;; # override response header&#xA;    cookie: privacy=1&#xA;  regexRules:&#xA;    - match: &amp;lt;script\s+([^&amp;gt;]*\s+)?src=&#34;(/)([^&#34;]*)&#34;&#xA;      replace: &amp;lt;script $1 script=&#34;/https://www.example.com/$3&#34;&#xA;  injections:&#xA;    - position: head # Position where to inject the code&#xA;      append: |      # possible keys: append, prepend, replace&#xA;        &amp;lt;script&amp;gt;&#xA;          window.localStorage.clear();&#xA;          console.log(&#34;test&#34;);&#xA;          alert(&#34;Hello!&#34;);&#xA;        &amp;lt;/script&amp;gt;&#xA;- domain: www.anotherdomain.com # Domain where the rule applies&#xA;  paths:                        # Paths where the rule applies&#xA;    - /article&#xA;  googleCache: false            # Use Google Cache to fetch the content&#xA;  regexRules:                   # Regex rules to apply&#xA;    - match: &amp;lt;script\s+([^&amp;gt;]*\s+)?src=&#34;(/)([^&#34;]*)&#34;&#xA;      replace: &amp;lt;script $1 script=&#34;/https://www.example.com/$3&#34;&#xA;  injections:&#xA;    - position: .left-content article .post-title # Position where to inject the code into DOM&#xA;      replace: | &#xA;        &amp;lt;h1&amp;gt;My Custom Title&amp;lt;/h1&amp;gt;&#xA;    - position: .left-content article # Position where to inject the code into DOM&#xA;      prepend: | &#xA;        &amp;lt;h2&amp;gt;Subtitle&amp;lt;/h2&amp;gt;&#xA;- domain: demo.com&#xA;  headers:&#xA;    content-security-policy: script-src &#39;self&#39;;&#xA;    user-agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36&#xA;  urlMods:              # Modify the URL&#xA;    query:              &#xA;      - key: amp        # (this will append ?amp=1 to the URL)&#xA;        value: 1 &#xA;    domain:             &#xA;      - match: www      # regex to match part of domain&#xA;        replace: amp    # (this would modify the domain from www.demo.de to amp.demo.de)&#xA;    path:               &#xA;      - match: ^        # regex to match part of path&#xA;        replace: /amp/  # (modify the url from https://www.demo.com/article/ to https://www.demo.de/amp/article/)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;p&gt;To run a development server at &lt;a href=&#34;http://localhost:8080&#34;&gt;http://localhost:8080&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;echo &#34;dev&#34; &amp;gt; handlers/VERSION&#xA;RULESET=&#34;./ruleset.yaml&#34; go run cmd/main.go&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Optional: Live reloading development server with &lt;a href=&#34;https://github.com/cosmtrek/air&#34;&gt;cosmtrek/air&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Install air according to the &lt;a href=&#34;https://github.com/cosmtrek/air#installation&#34;&gt;installation instructions&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Run a development server at &lt;a href=&#34;http://localhost:8080&#34;&gt;http://localhost:8080&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;air # or the path to air if you haven&#39;t added a path alias to your .bashrc or .zshrc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This project uses &lt;a href=&#34;https://pnpm.io/&#34;&gt;pnpm&lt;/a&gt; to build a stylesheet with the &lt;a href=&#34;https://tailwindcss.com/&#34;&gt;Tailwind CSS&lt;/a&gt; classes. For local development, if you modify styles in &lt;code&gt;form.html&lt;/code&gt;, run &lt;code&gt;pnpm build&lt;/code&gt; to generate a new stylesheet.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>gitleaks/gitleaks</title>
    <updated>2023-11-26T01:51:12Z</updated>
    <id>tag:github.com,2023-11-26:/gitleaks/gitleaks</id>
    <link href="https://github.com/gitleaks/gitleaks" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Protect and discover secrets using Gitleaks 🔑&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Gitleaks&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code&gt;┌─○───┐&#xA;│ │╲  │&#xA;│ │ ○ │&#xA;│ ○ ░ │&#xA;└─░───┘&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p align=&#34;left&#34;&gt; &lt;/p&gt;&#xA;&lt;p align=&#34;left&#34;&gt; &lt;a href=&#34;https://github.com/zricethezav/gitleaks/actions/workflows/test.yml&#34;&gt; &lt;img alt=&#34;Github Test&#34; src=&#34;https://github.com/zricethezav/gitleaks/actions/workflows/test.yml/badge.svg?sanitize=true&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/zricethezav/gitleaks&#34;&gt; &lt;img src=&#34;https://img.shields.io/docker/pulls/zricethezav/gitleaks.svg?sanitize=true&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/zricethezav/gitleaks-action&#34;&gt; &lt;img alt=&#34;gitleaks badge&#34; src=&#34;https://img.shields.io/badge/protected%20by-gitleaks-blue&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://twitter.com/intent/follow?screen_name=zricethezav&#34;&gt; &lt;img src=&#34;https://img.shields.io/twitter/follow/zricethezav?label=Follow%20zricethezav&amp;amp;style=social&amp;amp;color=blue&#34; alt=&#34;Follow @zricethezav&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Join our Discord! &lt;a href=&#34;https://discord.gg/8Hzbrnkr7E&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/1102689410522284044.svg?label=&amp;amp;logo=discord&amp;amp;logoColor=ffffff&amp;amp;color=7389D8&amp;amp;labelColor=6A7EC2&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Gitleaks is a SAST tool for &lt;strong&gt;detecting&lt;/strong&gt; and &lt;strong&gt;preventing&lt;/strong&gt; hardcoded secrets like passwords, api keys, and tokens in git repos. Gitleaks is an &lt;strong&gt;easy-to-use, all-in-one solution&lt;/strong&gt; for detecting secrets, past or present, in your code.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;➜  ~/code(master) gitleaks detect --source . -v&#xA;&#xA;    ○&#xA;    │╲&#xA;    │ ○&#xA;    ○ ░&#xA;    ░    gitleaks&#xA;&#xA;&#xA;Finding:     &#34;export BUNDLE_ENTERPRISE__CONTRIBSYS__COM=cafebabe:deadbeef&#34;,&#xA;Secret:      cafebabe:deadbeef&#xA;RuleID:      sidekiq-secret&#xA;Entropy:     2.609850&#xA;File:        cmd/generate/config/rules/sidekiq.go&#xA;Line:        23&#xA;Commit:      cd5226711335c68be1e720b318b7bc3135a30eb2&#xA;Author:      John&#xA;Email:       john@users.noreply.github.com&#xA;Date:        2022-08-03T12:31:40Z&#xA;Fingerprint: cd5226711335c68be1e720b318b7bc3135a30eb2:cmd/generate/config/rules/sidekiq.go:sidekiq-secret:23&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;Gitleaks can be installed using Homebrew, Docker, or Go. Gitleaks is also available in binary form for many popular platforms and OS types on the &lt;a href=&#34;https://github.com/zricethezav/gitleaks/releases&#34;&gt;releases page&lt;/a&gt;. In addition, Gitleaks can be implemented as a pre-commit hook directly in your repo or as a GitHub action using &lt;a href=&#34;https://github.com/gitleaks/gitleaks-action&#34;&gt;Gitleaks-Action&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Installing&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# MacOS&#xA;brew install gitleaks&#xA;&#xA;# Docker (DockerHub)&#xA;docker pull zricethezav/gitleaks:latest&#xA;docker run -v ${path_to_host_folder_to_scan}:/path zricethezav/gitleaks:latest [COMMAND] --source=&#34;/path&#34; [OPTIONS]&#xA;&#xA;# Docker (ghcr.io)&#xA;docker pull ghcr.io/gitleaks/gitleaks:latest&#xA;docker run -v ${path_to_host_folder_to_scan}:/path ghcr.io/gitleaks/gitleaks:latest [COMMAND] --source=&#34;/path&#34; [OPTIONS]&#xA;&#xA;# From Source&#xA;git clone https://github.com/gitleaks/gitleaks.git&#xA;cd gitleaks&#xA;make build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;GitHub Action&lt;/h3&gt; &#xA;&lt;p&gt;Check out the official &lt;a href=&#34;https://github.com/gitleaks/gitleaks-action&#34;&gt;Gitleaks GitHub Action&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;name: gitleaks&#xA;on: [pull_request, push, workflow_dispatch]&#xA;jobs:&#xA;  scan:&#xA;    name: gitleaks&#xA;    runs-on: ubuntu-latest&#xA;    steps:&#xA;      - uses: actions/checkout@v3&#xA;        with:&#xA;          fetch-depth: 0&#xA;      - uses: gitleaks/gitleaks-action@v2&#xA;        env:&#xA;          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}&#xA;          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE}} # Only required for Organizations, not personal accounts.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Pre-Commit&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Install pre-commit from &lt;a href=&#34;https://pre-commit.com/#install&#34;&gt;https://pre-commit.com/#install&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Create a &lt;code&gt;.pre-commit-config.yaml&lt;/code&gt; file at the root of your repository with the following content:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;repos:&#xA;  - repo: https://github.com/gitleaks/gitleaks&#xA;    rev: v8.16.1&#xA;    hooks:&#xA;      - id: gitleaks&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;for a &lt;a href=&#34;https://github.com/zricethezav/gitleaks/releases&#34;&gt;native execution of GitLeaks&lt;/a&gt; or use the &lt;a href=&#34;https://github.com/zricethezav/gitleaks/raw/master/.pre-commit-hooks.yaml&#34;&gt;&lt;code&gt;gitleaks-docker&lt;/code&gt; pre-commit ID&lt;/a&gt; for executing GitLeaks using the &lt;a href=&#34;https://raw.githubusercontent.com/gitleaks/gitleaks/master/#docker&#34;&gt;official Docker images&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Auto-update the config to the latest repos&#39; versions by executing &lt;code&gt;pre-commit autoupdate&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Install with &lt;code&gt;pre-commit install&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Now you&#39;re all set!&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;➜ git commit -m &#34;this commit contains a secret&#34;&#xA;Detect hardcoded secrets.................................................Failed&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: to disable the gitleaks pre-commit hook you can prepend &lt;code&gt;SKIP=gitleaks&lt;/code&gt; to the commit command and it will skip running gitleaks&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;➜ SKIP=gitleaks git commit -m &#34;skip gitleaks check&#34;&#xA;Detect hardcoded secrets................................................Skipped&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;Usage:&#xA;  gitleaks [command]&#xA;&#xA;Available Commands:&#xA;  completion  generate the autocompletion script for the specified shell&#xA;  detect      detect secrets in code&#xA;  help        Help about any command&#xA;  protect     protect secrets in code&#xA;  version     display gitleaks version&#xA;&#xA;Flags:&#xA;  -b, --baseline-path string       path to baseline with issues that can be ignored&#xA;  -c, --config string              config file path&#xA;                                   order of precedence:&#xA;                                   1. --config/-c&#xA;                                   2. env var GITLEAKS_CONFIG&#xA;                                   3. (--source/-s)/.gitleaks.toml&#xA;                                   If none of the three options are used, then gitleaks will use the default config&#xA;      --exit-code int              exit code when leaks have been encountered (default 1)&#xA;  -h, --help                       help for gitleaks&#xA;  -l, --log-level string           log level (trace, debug, info, warn, error, fatal) (default &#34;info&#34;)&#xA;      --max-target-megabytes int   files larger than this will be skipped&#xA;      --no-color                   turn off color for verbose output&#xA;      --no-banner                  suppress banner&#xA;      --redact                     redact secrets from logs and stdout&#xA;  -f, --report-format string       output format (json, csv, junit, sarif) (default &#34;json&#34;)&#xA;  -r, --report-path string         report file&#xA;  -s, --source string              path to source (default &#34;.&#34;)&#xA;  -v, --verbose                    show verbose output from scan&#xA;&#xA;Use &#34;gitleaks [command] --help&#34; for more information about a command.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Commands&lt;/h3&gt; &#xA;&lt;p&gt;There are two commands you will use to detect secrets; &lt;code&gt;detect&lt;/code&gt; and &lt;code&gt;protect&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Detect&lt;/h4&gt; &#xA;&lt;p&gt;The &lt;code&gt;detect&lt;/code&gt; command is used to scan repos, directories, and files. This command can be used on developer machines and in CI environments.&lt;/p&gt; &#xA;&lt;p&gt;When running &lt;code&gt;detect&lt;/code&gt; on a git repository, gitleaks will parse the output of a &lt;code&gt;git log -p&lt;/code&gt; command (you can see how this executed &lt;a href=&#34;https://github.com/zricethezav/gitleaks/raw/7240e16769b92d2a1b137c17d6bf9d55a8562899/git/git.go#L17-L25&#34;&gt;here&lt;/a&gt;). &lt;a href=&#34;https://git-scm.com/docs/git-log#_generating_patch_text_with_p&#34;&gt;&lt;code&gt;git log -p&lt;/code&gt; generates patches&lt;/a&gt; which gitleaks will use to detect secrets. You can configure what commits &lt;code&gt;git log&lt;/code&gt; will range over by using the &lt;code&gt;--log-opts&lt;/code&gt; flag. &lt;code&gt;--log-opts&lt;/code&gt; accepts any option for &lt;code&gt;git log -p&lt;/code&gt;. For example, if you wanted to run gitleaks on a range of commits you could use the following command: &lt;code&gt;gitleaks detect --source . --log-opts=&#34;--all commitA..commitB&#34;&lt;/code&gt;. See the &lt;code&gt;git log&lt;/code&gt; &lt;a href=&#34;https://git-scm.com/docs/git-log&#34;&gt;documentation&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;p&gt;You can scan files and directories by using the &lt;code&gt;--no-git&lt;/code&gt; option.&lt;/p&gt; &#xA;&lt;p&gt;If you want to run only specific rules you can do so by using the &lt;code&gt;--enable-rule&lt;/code&gt; option (with a rule ID as a parameter), this flag can be used multiple times. For example: &lt;code&gt;--enable-rule=atlassian-api-token&lt;/code&gt; will only apply that rule. You can find a list of rules &lt;a href=&#34;https://raw.githubusercontent.com/gitleaks/gitleaks/master/config/gitleaks.toml&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Protect&lt;/h4&gt; &#xA;&lt;p&gt;The &lt;code&gt;protect&lt;/code&gt; command is used to scan uncommitted changes in a git repo. This command should be used on developer machines in accordance with &lt;a href=&#34;https://cloud.google.com/architecture/devops/devops-tech-shifting-left-on-security&#34;&gt;shifting left on security&lt;/a&gt;. When running &lt;code&gt;protect&lt;/code&gt; on a git repository, gitleaks will parse the output of a &lt;code&gt;git diff&lt;/code&gt; command (you can see how this executed &lt;a href=&#34;https://github.com/zricethezav/gitleaks/raw/7240e16769b92d2a1b137c17d6bf9d55a8562899/git/git.go#L48-L49&#34;&gt;here&lt;/a&gt;). You can set the &lt;code&gt;--staged&lt;/code&gt; flag to check for changes in commits that have been &lt;code&gt;git add&lt;/code&gt;ed. The &lt;code&gt;--staged&lt;/code&gt; flag should be used when running Gitleaks as a pre-commit.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: the &lt;code&gt;protect&lt;/code&gt; command can only be used on git repos, running &lt;code&gt;protect&lt;/code&gt; on files or directories will result in an error message.&lt;/p&gt; &#xA;&lt;h3&gt;Creating a baseline&lt;/h3&gt; &#xA;&lt;p&gt;When scanning large repositories or repositories with a long history, it can be convenient to use a baseline. When using a baseline, gitleaks will ignore any old findings that are present in the baseline. A baseline can be any gitleaks report. To create a gitleaks report, run gitleaks with the &lt;code&gt;--report-path&lt;/code&gt; parameter.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;gitleaks detect --report-path gitleaks-report.json # This will save the report in a file called gitleaks-report.json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once as baseline is created it can be applied when running the detect command again:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;gitleaks detect --baseline-path gitleaks-report.json --report-path findings.json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After running the detect command with the --baseline-path parameter, report output (findings.json) will only contain new issues.&lt;/p&gt; &#xA;&lt;h3&gt;Verify Findings&lt;/h3&gt; &#xA;&lt;p&gt;You can verify a finding found by gitleaks using a &lt;code&gt;git log&lt;/code&gt; command. Example output:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Finding:     aws_secret=&#34;AKIAIMNOJVGFDXXXE4OA&#34;&#xA;RuleID:      aws-access-token&#xA;Secret       AKIAIMNOJVGFDXXXE4OA&#xA;Entropy:     3.65&#xA;File:        checks_test.go&#xA;Line:        37&#xA;Commit:      ec2fc9d6cb0954fb3b57201cf6133c48d8ca0d29&#xA;Author:      Zachary Rice&#xA;Email:       z@email.com&#xA;Date:        2018-01-28T17:39:00Z&#xA;Fingerprint: ec2fc9d6cb0954fb3b57201cf6133c48d8ca0d29:checks_test.go:aws-access-token:37&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We can use the following format to verify the leak:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git log -L {StartLine,EndLine}:{File} {Commit}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;So in this example it would look like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git log -L 37,37:checks_test.go ec2fc9d6cb0954fb3b57201cf6133c48d8ca0d29&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Which gives us:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;commit ec2fc9d6cb0954fb3b57201cf6133c48d8ca0d29&#xA;Author: zricethezav &amp;lt;thisispublicanyways@gmail.com&amp;gt;&#xA;Date:   Sun Jan 28 17:39:00 2018 -0500&#xA;&#xA;    [update] entropy check&#xA;&#xA;diff --git a/checks_test.go b/checks_test.go&#xA;--- a/checks_test.go&#xA;+++ b/checks_test.go&#xA;@@ -28,0 +37,1 @@&#xA;+               &#34;aws_secret= \&#34;AKIAIMNOJVGFDXXXE4OA\&#34;&#34;:          true,&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Pre-Commit hook&lt;/h2&gt; &#xA;&lt;p&gt;You can run Gitleaks as a pre-commit hook by copying the example &lt;code&gt;pre-commit.py&lt;/code&gt; script into your &lt;code&gt;.git/hooks/&lt;/code&gt; directory.&lt;/p&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;Gitleaks offers a configuration format you can follow to write your own secret detection rules:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;# Title for the gitleaks configuration file.&#xA;title = &#34;Gitleaks title&#34;&#xA;&#xA;# Extend the base (this) configuration. When you extend a configuration&#xA;# the base rules take precedence over the extended rules. I.e., if there are&#xA;# duplicate rules in both the base configuration and the extended configuration&#xA;# the base rules will override the extended rules.&#xA;# Another thing to know with extending configurations is you can chain together&#xA;# multiple configuration files to a depth of 2. Allowlist arrays are appended&#xA;# and can contain duplicates.&#xA;# useDefault and path can NOT be used at the same time. Choose one.&#xA;[extend]&#xA;# useDefault will extend the base configuration with the default gitleaks config:&#xA;# https://github.com/zricethezav/gitleaks/blob/master/config/gitleaks.toml&#xA;useDefault = true&#xA;# or you can supply a path to a configuration. Path is relative to where gitleaks&#xA;# was invoked, not the location of the base config.&#xA;path = &#34;common_config.toml&#34;&#xA;&#xA;# An array of tables that contain information that define instructions&#xA;# on how to detect secrets&#xA;[[rules]]&#xA;&#xA;# Unique identifier for this rule&#xA;id = &#34;awesome-rule-1&#34;&#xA;&#xA;# Short human readable description of the rule.&#xA;description = &#34;awesome rule 1&#34;&#xA;&#xA;# Golang regular expression used to detect secrets. Note Golang&#39;s regex engine&#xA;# does not support lookaheads.&#xA;regex = &#39;&#39;&#39;one-go-style-regex-for-this-rule&#39;&#39;&#39;&#xA;&#xA;# Golang regular expression used to match paths. This can be used as a standalone rule or it can be used&#xA;# in conjunction with a valid `regex` entry.&#xA;path = &#39;&#39;&#39;a-file-path-regex&#39;&#39;&#39;&#xA;&#xA;# Array of strings used for metadata and reporting purposes.&#xA;tags = [&#34;tag&#34;,&#34;another tag&#34;]&#xA;&#xA;# Int used to extract secret from regex match and used as the group that will have&#xA;# its entropy checked if `entropy` is set.&#xA;secretGroup = 3&#xA;&#xA;# Float representing the minimum shannon entropy a regex group must have to be considered a secret.&#xA;entropy = 3.5&#xA;&#xA;# Keywords are used for pre-regex check filtering. Rules that contain&#xA;# keywords will perform a quick string compare check to make sure the&#xA;# keyword(s) are in the content being scanned. Ideally these values should&#xA;# either be part of the idenitifer or unique strings specific to the rule&#39;s regex&#xA;# (introduced in v8.6.0)&#xA;keywords = [&#xA;  &#34;auth&#34;,&#xA;  &#34;password&#34;,&#xA;  &#34;token&#34;,&#xA;]&#xA;&#xA;# You can include an allowlist table for a single rule to reduce false positives or ignore commits&#xA;# with known/rotated secrets&#xA;[rules.allowlist]&#xA;description = &#34;ignore commit A&#34;&#xA;commits = [ &#34;commit-A&#34;, &#34;commit-B&#34;]&#xA;paths = [&#xA;  &#39;&#39;&#39;go\.mod&#39;&#39;&#39;,&#xA;  &#39;&#39;&#39;go\.sum&#39;&#39;&#39;&#xA;]&#xA;# note: (rule) regexTarget defaults to check the _Secret_ in the finding.&#xA;# if regexTarget is not specified then _Secret_ will be used.&#xA;# Acceptable values for regexTarget are &#34;match&#34; and &#34;line&#34;&#xA;regexTarget = &#34;match&#34;&#xA;regexes = [&#xA;  &#39;&#39;&#39;process&#39;&#39;&#39;,&#xA;  &#39;&#39;&#39;getenv&#39;&#39;&#39;,&#xA;]&#xA;# note: stopwords targets the extracted secret, not the entire regex match&#xA;# like &#39;regexes&#39; does. (stopwords introduced in 8.8.0)&#xA;stopwords = [&#xA;  &#39;&#39;&#39;client&#39;&#39;&#39;,&#xA;  &#39;&#39;&#39;endpoint&#39;&#39;&#39;,&#xA;]&#xA;&#xA;&#xA;# This is a global allowlist which has a higher order of precedence than rule-specific allowlists.&#xA;# If a commit listed in the `commits` field below is encountered then that commit will be skipped and no&#xA;# secrets will be detected for said commit. The same logic applies for regexes and paths.&#xA;[allowlist]&#xA;description = &#34;global allow list&#34;&#xA;commits = [ &#34;commit-A&#34;, &#34;commit-B&#34;, &#34;commit-C&#34;]&#xA;paths = [&#xA;  &#39;&#39;&#39;gitleaks\.toml&#39;&#39;&#39;,&#xA;  &#39;&#39;&#39;(.*?)(jpg|gif|doc)&#39;&#39;&#39;&#xA;]&#xA;&#xA;# note: (global) regexTarget defaults to check the _Secret_ in the finding.&#xA;# if regexTarget is not specified then _Secret_ will be used.&#xA;# Acceptable values for regexTarget are &#34;match&#34; and &#34;line&#34;&#xA;regexTarget = &#34;match&#34;&#xA;&#xA;regexes = [&#xA;  &#39;&#39;&#39;219-09-9999&#39;&#39;&#39;,&#xA;  &#39;&#39;&#39;078-05-1120&#39;&#39;&#39;,&#xA;  &#39;&#39;&#39;(9[0-9]{2}|666)-\d{2}-\d{4}&#39;&#39;&#39;,&#xA;]&#xA;# note: stopwords targets the extracted secret, not the entire regex match&#xA;# like &#39;regexes&#39; does. (stopwords introduced in 8.8.0)&#xA;stopwords = [&#xA;  &#39;&#39;&#39;client&#39;&#39;&#39;,&#xA;  &#39;&#39;&#39;endpoint&#39;&#39;&#39;,&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Refer to the default &lt;a href=&#34;https://github.com/zricethezav/gitleaks/raw/master/config/gitleaks.toml&#34;&gt;gitleaks config&lt;/a&gt; for examples or follow the &lt;a href=&#34;https://github.com/zricethezav/gitleaks/raw/master/README.md&#34;&gt;contributing guidelines&lt;/a&gt; if you would like to contribute to the default configuration. Additionally, you can check out &lt;a href=&#34;https://blog.gitleaks.io/stop-leaking-secrets-configuration-2-3-aeed293b1fbf&#34;&gt;this gitleaks blog post&lt;/a&gt; which covers advanced configuration setups.&lt;/p&gt; &#xA;&lt;h3&gt;Additional Configuration&lt;/h3&gt; &#xA;&lt;h4&gt;gitleaks:allow&lt;/h4&gt; &#xA;&lt;p&gt;If you are knowingly committing a test secret that gitleaks will catch you can add a &lt;code&gt;gitleaks:allow&lt;/code&gt; comment to that line which will instruct gitleaks to ignore that secret. Ex:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;class CustomClass:&#xA;    discord_client_secret = &#39;8dyfuiRyq=vVc3RRr_edRk-fK__JItpZ&#39;  #gitleaks:allow&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;.gitleaksignore&lt;/h4&gt; &#xA;&lt;p&gt;You can ignore specific findings by creating a &lt;code&gt;.gitleaksignore&lt;/code&gt; file at the root of your repo. In release v8.10.0 Gitleaks added a &lt;code&gt;Fingerprint&lt;/code&gt; value to the Gitleaks report. Each leak, or finding, has a Fingerprint that uniquely identifies a secret. Add this fingerprint to the &lt;code&gt;.gitleaksignore&lt;/code&gt; file to ignore that specific secret. See Gitleaks&#39; &lt;a href=&#34;https://github.com/zricethezav/gitleaks/raw/master/.gitleaksignore&#34;&gt;.gitleaksignore&lt;/a&gt; for an example. Note: this feature is experimental and is subject to change in the future.&lt;/p&gt; &#xA;&lt;h2&gt;Sponsorships&lt;/h2&gt; &#xA;&lt;p align=&#34;left&#34;&gt; &lt;a href=&#34;https://www.tines.com/?utm_source=oss&amp;amp;utm_medium=sponsorship&amp;amp;utm_campaign=gitleaks&#34;&gt; &lt;img alt=&#34;Tines Sponsorship&#34; src=&#34;https://user-images.githubusercontent.com/15034943/146411864-4878f936-b4f7-49a0-b625-f9f40c704bfa.png&#34; width=&#34;200&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Exit Codes&lt;/h2&gt; &#xA;&lt;p&gt;You can always set the exit code when leaks are encountered with the --exit-code flag. Default exit codes below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;0 - no leaks present&#xA;1 - leaks or error encountered&#xA;126 - unknown flag&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>MerlinKodo/clash-rev</title>
    <updated>2023-11-26T01:51:12Z</updated>
    <id>tag:github.com,2023-11-26:/MerlinKodo/clash-rev</id>
    <link href="https://github.com/MerlinKodo/clash-rev" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Continuation of Clash core project&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;This repository is archived to avoid competition. Use the latest version of &lt;a href=&#34;https://wiki.metacubex.one/&#34;&gt;虚空终端&lt;/a&gt;，you can download it from &lt;a href=&#34;https://github.com/MerlinKodo/akasha-terminal-bin/releases&#34;&gt;https://github.com/MerlinKodo/akasha-terminal-bin/releases&lt;/a&gt;&lt;/h1&gt;</summary>
  </entry>
</feed>