<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-04-27T01:44:33Z</updated>
  <subtitle>Weekly Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>golang/tools</title>
    <updated>2025-04-27T01:44:33Z</updated>
    <id>tag:github.com,2025-04-27:/golang/tools</id>
    <link href="https://github.com/golang/tools" rel="alternate"></link>
    <summary type="html">&lt;p&gt;[mirror] Go Tools&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Go Tools&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://pkg.go.dev/golang.org/x/tools&#34;&gt;&lt;img src=&#34;https://pkg.go.dev/badge/golang.org/x/tools&#34; alt=&#34;PkgGoDev&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This repository provides the &lt;code&gt;golang.org/x/tools&lt;/code&gt; module, comprising various tools and packages mostly for static analysis of Go programs, some of which are listed below. Use the &#34;Go reference&#34; link above for more information about any package.&lt;/p&gt; &#xA;&lt;p&gt;It also contains the &lt;a href=&#34;https://pkg.go.dev/golang.org/x/tools/gopls&#34;&gt;&lt;code&gt;golang.org/x/tools/gopls&lt;/code&gt;&lt;/a&gt; module, whose root package is a language-server protocol (LSP) server for Go. An LSP server analyses the source code of a project and responds to requests from a wide range of editors such as VSCode and Vim, allowing them to support IDE-like functionality.&lt;/p&gt; &#xA;&lt;!-- List only packages of general interest below. --&gt; &#xA;&lt;p&gt;Selected commands:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;cmd/goimports&lt;/code&gt; formats a Go program like &lt;code&gt;go fmt&lt;/code&gt; and additionally inserts import statements for any packages required by the file after it is edited.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cmd/callgraph&lt;/code&gt; prints the call graph of a Go program.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cmd/digraph&lt;/code&gt; is a utility for manipulating directed graphs in textual notation.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cmd/stringer&lt;/code&gt; generates declarations (including a &lt;code&gt;String&lt;/code&gt; method) for &#34;enum&#34; types.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cmd/toolstash&lt;/code&gt; is a utility to simplify working with multiple versions of the Go toolchain.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;These commands may be fetched with a command such as&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;go install golang.org/x/tools/cmd/goimports@latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Selected packages:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;go/ssa&lt;/code&gt; provides a static single-assignment form (SSA) intermediate representation (IR) for Go programs, similar to a typical compiler, for use by analysis tools.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;go/packages&lt;/code&gt; provides a simple interface for loading, parsing, and type checking a complete Go program from source code.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;go/analysis&lt;/code&gt; provides a framework for modular static analysis of Go programs.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;go/callgraph&lt;/code&gt; provides call graphs of Go programs using a variety of algorithms with different trade-offs.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;go/ast/inspector&lt;/code&gt; provides an optimized means of traversing a Go parse tree for use in analysis tools.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;go/cfg&lt;/code&gt; provides a simple control-flow graph (CFG) for a Go function.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;go/gcexportdata&lt;/code&gt; and &lt;code&gt;go/gccgoexportdata&lt;/code&gt; read and write the binary files containing type information used by the standard and &lt;code&gt;gccgo&lt;/code&gt; compilers.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;go/types/objectpath&lt;/code&gt; provides a stable naming scheme for named entities (&#34;objects&#34;) in the &lt;code&gt;go/types&lt;/code&gt; API.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Numerous other packages provide more esoteric functionality.&lt;/p&gt; &#xA;&lt;!-- Some that didn&#39;t make the cut:&#xA;&#xA;golang.org/x/tools/benchmark/parse&#xA;golang.org/x/tools/go/ast/astutil&#xA;golang.org/x/tools/go/types/typeutil&#xA;golang.org/x/tools/playground&#xA;golang.org/x/tools/present&#xA;golang.org/x/tools/refactor/importgraph&#xA;golang.org/x/tools/refactor/rename&#xA;golang.org/x/tools/refactor/satisfy&#xA;golang.org/x/tools/txtar&#xA;&#xA;--&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;This repository uses Gerrit for code changes. To learn how to submit changes, see &lt;a href=&#34;https://go.dev/doc/contribute&#34;&gt;https://go.dev/doc/contribute&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The git repository is &lt;a href=&#34;https://go.googlesource.com/tools&#34;&gt;https://go.googlesource.com/tools&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The main issue tracker for the tools repository is located at &lt;a href=&#34;https://go.dev/issues&#34;&gt;https://go.dev/issues&lt;/a&gt;. Prefix your issue with &#34;x/tools/(your subdir):&#34; in the subject line, so it is easy to find.&lt;/p&gt; &#xA;&lt;h3&gt;JavaScript and CSS Formatting&lt;/h3&gt; &#xA;&lt;p&gt;This repository uses &lt;a href=&#34;https://prettier.io/&#34;&gt;prettier&lt;/a&gt; to format JS and CSS files.&lt;/p&gt; &#xA;&lt;p&gt;The version of &lt;code&gt;prettier&lt;/code&gt; used is 1.18.2.&lt;/p&gt; &#xA;&lt;p&gt;It is encouraged that all JS and CSS code be run through this before submitting a change. However, it is not a strict requirement enforced by CI.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>cloudwego/eino</title>
    <updated>2025-04-27T01:44:33Z</updated>
    <id>tag:github.com,2025-04-27:/cloudwego/eino</id>
    <link href="https://github.com/cloudwego/eino" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The ultimate LLM/AI application development framework in Golang.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Eino&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/cloudwego/eino/badges/.badges/main/coverage.svg?sanitize=true&#34; alt=&#34;coverage&#34;&gt; &lt;a href=&#34;https://github.com/cloudwego/eino/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/cloudwego/eino&#34; alt=&#34;Release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.cloudwego.io/&#34;&gt;&lt;img src=&#34;https://img.shields.io/website?up_message=cloudwego&amp;amp;url=https%3A%2F%2Fwww.cloudwego.io%2F&#34; alt=&#34;WebSite&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/cloudwego/eino/raw/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/cloudwego/eino&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/cloudwego/eino&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/cloudwego/eino&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/cloudwego/kitex/eino&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/issues/cloudwego/eino&#34; alt=&#34;OpenIssue&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/cloudwego/eino/issues?q=is%3Aissue+is%3Aclosed&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/issues-closed/cloudwego/eino&#34; alt=&#34;ClosedIssue&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/stars/cloudwego/eino&#34; alt=&#34;Stars&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/forks/cloudwego/eino&#34; alt=&#34;Forks&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;English | &lt;a href=&#34;https://raw.githubusercontent.com/cloudwego/eino/main/README.zh_CN.md&#34;&gt;中文&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Overview&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;Eino[&#39;aino]&lt;/strong&gt; (pronounced similarly to &#34;I know&#34;) aims to be the ultimate LLM application development framework in Golang. Drawing inspirations from many excellent LLM application development frameworks in the open-source community such as LangChain &amp;amp; LlamaIndex, etc., as well as learning from cutting-edge research and real world applications, Eino offers an LLM application development framework that emphasizes on simplicity, scalability, reliability and effectiveness that better aligns with Golang programming conventions.&lt;/p&gt; &#xA;&lt;p&gt;What Eino provides are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;a carefully curated list of &lt;strong&gt;component&lt;/strong&gt; abstractions and implementations that can be easily reused and combined to build LLM applications&lt;/li&gt; &#xA; &lt;li&gt;a powerful &lt;strong&gt;composition&lt;/strong&gt; framework that does the heavy lifting of strong type checking, stream processing, concurrency management, aspect injection, option assignment, etc. for the user.&lt;/li&gt; &#xA; &lt;li&gt;a set of meticulously designed &lt;strong&gt;API&lt;/strong&gt; that obsesses on simplicity and clarity.&lt;/li&gt; &#xA; &lt;li&gt;an ever-growing collection of best practices in the form of bundled &lt;strong&gt;flows&lt;/strong&gt; and &lt;strong&gt;examples&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;a useful set of tools that covers the entire development cycle, from visualized development and debugging to online tracing and evaluation.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;With the above arsenal, Eino can standardize, simplify, and improve efficiency at different stages of the AI application development cycle: &lt;img src=&#34;https://raw.githubusercontent.com/cloudwego/eino/main/.github/static/img/eino/eino_concept.jpeg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;A quick walkthrough&lt;/h1&gt; &#xA;&lt;p&gt;Use a component directly:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Go&#34;&gt;model, _ := openai.NewChatModel(ctx, config) // create an invokable LLM instance&#xA;message, _ := model.Generate(ctx, []*Message{&#xA;    SystemMessage(&#34;you are a helpful assistant.&#34;),&#xA;    UserMessage(&#34;what does the future AI App look like?&#34;)})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Of course, you can do that, Eino provides lots of useful components to use out of the box. But you can do more by using orchestration, for three reasons:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;orchestration encapsulates common patterns of LLM application.&lt;/li&gt; &#xA; &lt;li&gt;orchestration solves the difficult problem of processing stream response by the LLM.&lt;/li&gt; &#xA; &lt;li&gt;orchestration handles type safety, concurrency management, aspect injection and option assignment for you.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Eino provides two set of APIs for orchestration&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;API&lt;/th&gt; &#xA;   &lt;th&gt;Characteristics and usage&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Chain&lt;/td&gt; &#xA;   &lt;td&gt;Simple chained directed graph that can only go forward.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Graph&lt;/td&gt; &#xA;   &lt;td&gt;Cyclic or Acyclic directed graph. Powerful and flexible.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Let&#39;s create a simple chain: a ChatTemplate followed by a ChatModel.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/cloudwego/eino/main/.github/static/img/eino/simple_chain.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Go&#34;&gt;chain, _ := NewChain[map[string]any, *Message]().&#xA;           AppendChatTemplate(prompt).&#xA;           AppendChatModel(model).&#xA;           Compile(ctx)&#xA;&#xA;chain.Invoke(ctx, map[string]any{&#34;query&#34;: &#34;what&#39;s your name?&#34;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now let&#39;s create a graph that uses a ChatModel to generate answer or tool calls, then uses a ToolsNode to execute those tools if needed.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/cloudwego/eino/main/.github/static/img/eino/tool_call_graph.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Go&#34;&gt;graph := NewGraph[map[string]any, *schema.Message]()&#xA;&#xA;_ = graph.AddChatTemplateNode(&#34;node_template&#34;, chatTpl)&#xA;_ = graph.AddChatModelNode(&#34;node_model&#34;, chatModel)&#xA;_ = graph.AddToolsNode(&#34;node_tools&#34;, toolsNode)&#xA;_ = graph.AddLambdaNode(&#34;node_converter&#34;, takeOne)&#xA;&#xA;_ = graph.AddEdge(START, &#34;node_template&#34;)&#xA;_ = graph.AddEdge(&#34;node_template&#34;, &#34;node_model&#34;)&#xA;_ = graph.AddBranch(&#34;node_model&#34;, branch)&#xA;_ = graph.AddEdge(&#34;node_tools&#34;, &#34;node_converter&#34;)&#xA;_ = graph.AddEdge(&#34;node_converter&#34;, END)&#xA;&#xA;compiledGraph, err := graph.Compile(ctx)&#xA;if err != nil {&#xA;return err&#xA;}&#xA;out, err := r.Invoke(ctx, map[string]any{&#34;query&#34;:&#34;Beijing&#39;s weather this weekend&#34;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now let&#39;s create a &#39;ReAct&#39; agent: A ChatModel binds to Tools. It receives input Messages and decides independently whether to call the Tool or output the final result. The execution result of the Tool will again become the input Message for the ChatModel and serve as the context for the next round of independent judgment.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/cloudwego/eino/main/.github/static/img/eino/react.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;We provide a complete implementation for ReAct Agent out of the box in the &lt;code&gt;flow&lt;/code&gt; package. Check out the code here: &lt;a href=&#34;https://github.com/cloudwego/eino/raw/main/flow/agent/react/react.go&#34;&gt;flow/agent/react&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Our implementation of ReAct Agent uses Eino&#39;s &lt;strong&gt;graph orchestration&lt;/strong&gt; exclusively, which provides the following benefits out of the box:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Type checking: it makes sure the two nodes&#39; input and output types match at compile time.&lt;/li&gt; &#xA; &lt;li&gt;Stream processing: concatenates message stream before passing to chatModel and toolsNode if needed, and copies the stream into callback handlers.&lt;/li&gt; &#xA; &lt;li&gt;Concurrency management: the shared state can be safely read and written because the StatePreHandler is concurrency safe.&lt;/li&gt; &#xA; &lt;li&gt;Aspect injection: injects callback aspects before and after the execution of ChatModel if the specified ChatModel implementation hasn&#39;t injected itself.&lt;/li&gt; &#xA; &lt;li&gt;Option assignment: call options are assigned either globally, to specific component type or to specific node.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For example, you could easily extend the compiled graph with callbacks:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Go&#34;&gt;handler := NewHandlerBuilder().&#xA;  OnStartFn(&#xA;    func(ctx context.Context, info *RunInfo, input CallbackInput) context.Context) {&#xA;        log.Infof(&#34;onStart, runInfo: %v, input: %v&#34;, info, input)&#xA;    }).&#xA;  OnEndFn(&#xA;    func(ctx context.Context, info *RunInfo, output CallbackOutput) context.Context) {&#xA;        log.Infof(&#34;onEnd, runInfo: %v, out: %v&#34;, info, output)&#xA;    }).&#xA;  Build()&#xA;  &#xA;compiledGraph.Invoke(ctx, input, WithCallbacks(handler))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or you could easily assign options to different nodes:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Go&#34;&gt;// assign to All nodes&#xA;compiledGraph.Invoke(ctx, input, WithCallbacks(handler))&#xA;&#xA;// assign only to ChatModel nodes&#xA;compiledGraph.Invoke(ctx, input, WithChatModelOption(WithTemperature(0.5))&#xA;&#xA;// assign only to node_1&#xA;compiledGraph.Invoke(ctx, input, WithCallbacks(handler).DesignateNode(&#34;node_1&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Key Features&lt;/h1&gt; &#xA;&lt;h2&gt;Rich Components&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Encapsulates common building blocks into &lt;strong&gt;component abstractions&lt;/strong&gt;, each have multiple &lt;strong&gt;component implementations&lt;/strong&gt; that are ready to be used out of the box.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;component abstractions such as ChatModel, Tool, ChatTemplate, Retriever, Document Loader, Lambda, etc.&lt;/li&gt; &#xA;   &lt;li&gt;each component type has an interface of its own: defined Input &amp;amp; Output Type, defined Option type, and streaming paradigms that make sense.&lt;/li&gt; &#xA;   &lt;li&gt;implementations are transparent. Abstractions are all you care about when orchestrating components together.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Implementations can be nested and captures complex business logic.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;ReAct Agent, MultiQueryRetriever, Host MultiAgent, etc. They consist of multiple components and non-trivial business logic.&lt;/li&gt; &#xA;   &lt;li&gt;They are still transparent from the outside. A MultiQueryRetriever can be used anywhere that accepts a Retriever.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Powerful Orchestration&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Data flows from Retriever / Document Loaders / ChatTemplate to ChatModel, then flows to Tools and parsed as Final Answer. This directed, controlled flow of data through multiple components can be implemented through &lt;strong&gt;graph orchestration&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Component instances are graph nodes, and edges are data flow channels.&lt;/li&gt; &#xA; &lt;li&gt;Graph orchestration is powerful and flexible enough to implement complex business logic: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;type checking, stream processing, concurrency management, aspect injection and option assignment are handled by the framework.&lt;/li&gt; &#xA;   &lt;li&gt;branch out execution at runtime, read and write global state, or do field level data mapping using workflow(currently in alpha stage).&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Complete Stream Processing&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Stream processing is important because ChatModel outputs chunks of messages in real time as it generates them. It&#39;s especially important with orchestration because more components need to handle streaming data.&lt;/li&gt; &#xA; &lt;li&gt;Eino automatically &lt;strong&gt;concatenates&lt;/strong&gt; stream chunks for downstream nodes that only accepts non-stream input, such as ToolsNode.&lt;/li&gt; &#xA; &lt;li&gt;Eino automatically &lt;strong&gt;boxes&lt;/strong&gt; non stream into stream when stream is needed during graph execution.&lt;/li&gt; &#xA; &lt;li&gt;Eino automatically &lt;strong&gt;merges&lt;/strong&gt; multiple streams as they converge into a single downward node.&lt;/li&gt; &#xA; &lt;li&gt;Eino automatically &lt;strong&gt;copies&lt;/strong&gt; stream as they fan out to different downward node, or is passed to callback handlers.&lt;/li&gt; &#xA; &lt;li&gt;Orchestration elements such as &lt;strong&gt;branch&lt;/strong&gt; and &lt;strong&gt;state handlers&lt;/strong&gt; are also stream aware.&lt;/li&gt; &#xA; &lt;li&gt;With these streaming processing abilities, the streaming paradigms of components themselves become transparent to the user.&lt;/li&gt; &#xA; &lt;li&gt;A compiled Graph can run with 4 different streaming paradigms:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Streaming Paradigm&lt;/th&gt; &#xA;   &lt;th&gt;Explanation&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Invoke&lt;/td&gt; &#xA;   &lt;td&gt;Accepts non-stream type I and returns non-stream type O&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Stream&lt;/td&gt; &#xA;   &lt;td&gt;Accepts non-stream type I and returns stream type StreamReader[O]&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Collect&lt;/td&gt; &#xA;   &lt;td&gt;Accepts stream type StreamReader[I] and returns non-stream type O&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Transform&lt;/td&gt; &#xA;   &lt;td&gt;Accepts stream type StreamReader[I] and returns stream type StreamReader[O]&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Highly Extensible Aspects (Callbacks)&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Aspects handle cross-cutting concerns such as logging, tracing, metrics, etc., as well as exposing internal details of component implementations.&lt;/li&gt; &#xA; &lt;li&gt;Five aspects are supported: &lt;strong&gt;OnStart, OnEnd, OnError, OnStartWithStreamInput, OnEndWithStreamOutput&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Developers can easily create custom callback handlers, add them during graph run via options, and they will be invoked during graph run.&lt;/li&gt; &#xA; &lt;li&gt;Graph can also inject aspects to those component implementations that do not support callbacks on their own.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Eino Framework Structure&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/cloudwego/eino/main/.github/static/img/eino/eino_framework.jpeg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The Eino framework consists of several parts:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Eino(this repo): Contains Eino&#39;s type definitions, streaming mechanism, component abstractions, orchestration capabilities, aspect mechanisms, etc.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/cloudwego/eino-ext&#34;&gt;EinoExt&lt;/a&gt;: Component implementations, callback handlers implementations, component usage examples, and various tools such as evaluators, prompt optimizers.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/cloudwego/eino-ext/tree/main/devops&#34;&gt;Eino Devops&lt;/a&gt;: visualized developing, visualized debugging etc.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/cloudwego/eino-examples&#34;&gt;EinoExamples&lt;/a&gt; is the repo containing example applications and best practices for Eino.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Detailed Documentation&lt;/h2&gt; &#xA;&lt;p&gt;For learning and using Eino, we provide a comprehensive Eino User Manual to help you quickly understand the concepts in Eino and master the skills of developing AI applications based on Eino. Start exploring through the &lt;a href=&#34;https://www.cloudwego.io/zh/docs/eino/&#34;&gt;Eino User Manual&lt;/a&gt; now!&lt;/p&gt; &#xA;&lt;p&gt;For a quick introduction to building AI applications with Eino, we recommend starting with &lt;a href=&#34;https://www.cloudwego.io/zh/docs/eino/quick_start/&#34;&gt;Eino: Quick Start&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Dependencies&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Go 1.18 and above.&lt;/li&gt; &#xA; &lt;li&gt;Eino relies on &lt;a href=&#34;https://github.com/getkin/kin-openapi&#34;&gt;kin-openapi&lt;/a&gt; &#39;s OpenAPI JSONSchema implementation. In order to remain compatible with Go 1.18, we have fixed kin-openapi&#39;s version to be v0.118.0.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Security&lt;/h2&gt; &#xA;&lt;p&gt;If you discover a potential security issue in this project, or think you may have discovered a security issue, we ask that you notify Bytedance Security via our &lt;a href=&#34;https://security.bytedance.com/src&#34;&gt;security center&lt;/a&gt; or &lt;a href=&#34;https://raw.githubusercontent.com/cloudwego/eino/main/sec@bytedance.com&#34;&gt;vulnerability reporting email&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Please do &lt;strong&gt;not&lt;/strong&gt; create a public GitHub issue.&lt;/p&gt; &#xA;&lt;h2&gt;Contact US&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;How to become a member: &lt;a href=&#34;https://github.com/cloudwego/community/raw/main/COMMUNITY_MEMBERSHIP.md&#34;&gt;COMMUNITY MEMBERSHIP&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Issues: &lt;a href=&#34;https://github.com/cloudwego/eino/issues&#34;&gt;Issues&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Lark: Scan the QR code below with &lt;a href=&#34;https://www.feishu.cn/en/&#34;&gt;Register Feishu&lt;/a&gt; to join our CloudWeGo/eino user group.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;    &lt;img src=&#34;https://raw.githubusercontent.com/cloudwego/eino/main/.github/static/img/eino/lark_group_zh.png&#34; alt=&#34;LarkGroup&#34; width=&#34;200&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This project is licensed under the &lt;a href=&#34;https://raw.githubusercontent.com/cloudwego/eino/main/LICENSE-APACHE&#34;&gt;Apache-2.0 License&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>googleapis/genai-toolbox</title>
    <updated>2025-04-27T01:44:33Z</updated>
    <id>tag:github.com,2025-04-27:/googleapis/genai-toolbox</id>
    <link href="https://github.com/googleapis/genai-toolbox" rel="alternate"></link>
    <summary type="html">&lt;p&gt;MCP Toolbox for Databases is an open source MCP server for databases, designed and built with enterprise-quality and production-grade use in mind.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/googleapis/genai-toolbox/main/logo.png&#34; alt=&#34;logo&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;MCP Toolbox for Databases&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] MCP Toolbox for Databases is currently in beta, and may see breaking changes until the first stable release (v1.0).&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;MCP Toolbox for Databases is an open source MCP server for databases It was designed with enterprise-grade and production-quality in mind. It enables you to develop tools easier, faster, and more securely by handling the complexities such as connection pooling, authentication, and more.&lt;/p&gt; &#xA;&lt;p&gt;This README provides a brief overview. For comprehensive details, see the &lt;a href=&#34;https://googleapis.github.io/genai-toolbox/&#34;&gt;full documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] This product was originally named “Gen AI Toolbox for Databases” as its initial development predated MCP, but was renamed to align with recently added MCP compatibility.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;!-- TOC ignore:true --&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;!-- TOC --&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/googleapis/genai-toolbox/main/#why-toolbox&#34;&gt;Why Toolbox?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/googleapis/genai-toolbox/main/#general-architecture&#34;&gt;General Architecture&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/googleapis/genai-toolbox/main/#getting-started&#34;&gt;Getting Started&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/googleapis/genai-toolbox/main/#installing-the-server&#34;&gt;Installing the server&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/googleapis/genai-toolbox/main/#running-the-server&#34;&gt;Running the server&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/googleapis/genai-toolbox/main/#integrating-your-application&#34;&gt;Integrating your application&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/googleapis/genai-toolbox/main/#configuration&#34;&gt;Configuration&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/googleapis/genai-toolbox/main/#sources&#34;&gt;Sources&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/googleapis/genai-toolbox/main/#tools&#34;&gt;Tools&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/googleapis/genai-toolbox/main/#toolsets&#34;&gt;Toolsets&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/googleapis/genai-toolbox/main/#versioning&#34;&gt;Versioning&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/googleapis/genai-toolbox/main/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- /TOC --&gt; &#xA;&lt;h2&gt;Why Toolbox?&lt;/h2&gt; &#xA;&lt;p&gt;Toolbox helps you build Gen AI tools that let your agents access data in your database. Toolbox provides:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Simplified development&lt;/strong&gt;: Integrate tools to your agent in less than 10 lines of code, reuse tools between multiple agents or frameworks, and deploy new versions of tools more easily.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Better performance&lt;/strong&gt;: Best practices such as connection pooling, authentication, and more.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Enhanced security&lt;/strong&gt;: Integrated auth for more secure access to your data&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;End-to-end observability&lt;/strong&gt;: Out of the box metrics and tracing with built-in support for OpenTelemetry.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;General Architecture&lt;/h2&gt; &#xA;&lt;p&gt;Toolbox sits between your application&#39;s orchestration framework and your database, providing a control plane that is used to modify, distribute, or invoke tools. It simplifies the management of your tools by providing you with a centralized location to store and update tools, allowing you to share tools between agents and applications and update those tools without necessarily redeploying your application.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/googleapis/genai-toolbox/main/docs/en/getting-started/introduction/architecture.png&#34; alt=&#34;architecture&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;h3&gt;Installing the server&lt;/h3&gt; &#xA;&lt;p&gt;For the latest version, check the &lt;a href=&#34;https://github.com/googleapis/genai-toolbox/releases&#34;&gt;releases page&lt;/a&gt; and use the following instructions for your OS and CPU architecture.&lt;/p&gt; &#xA;&lt;details open&gt; &#xA; &lt;summary&gt;Binary&lt;/summary&gt; &#xA; &lt;p&gt;To install Toolbox as a binary:&lt;/p&gt; &#xA; &lt;!-- {x-release-please-start-version} --&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# see releases page for other versions&#xA;export VERSION=0.4.0&#xA;curl -O https://storage.googleapis.com/genai-toolbox/v$VERSION/linux/amd64/toolbox&#xA;chmod +x toolbox&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Container image&lt;/summary&gt; You can also install Toolbox as a container: &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# see releases page for other versions&#xA;export VERSION=0.4.0&#xA;docker pull us-central1-docker.pkg.dev/database-toolbox/toolbox/toolbox:$VERSION&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Compile from source&lt;/summary&gt; &#xA; &lt;p&gt;To install from source, ensure you have the latest version of &lt;a href=&#34;https://go.dev/doc/install&#34;&gt;Go installed&lt;/a&gt;, and then run the following command:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;go install github.com/googleapis/genai-toolbox@v0.4.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;!-- {x-release-please-end} --&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Running the server&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/googleapis/genai-toolbox/main/#configuration&#34;&gt;Configure&lt;/a&gt; a &lt;code&gt;tools.yaml&lt;/code&gt; to define your tools, and then execute &lt;code&gt;toolbox&lt;/code&gt; to start the server:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./toolbox --tools_file &#34;tools.yaml&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can use &lt;code&gt;toolbox help&lt;/code&gt; for a full list of flags! To stop the server, send a terminate signal (&lt;code&gt;ctrl+c&lt;/code&gt; on most platforms).&lt;/p&gt; &#xA;&lt;p&gt;For more detailed documentation on deploying to different environments, check out the resources in the &lt;a href=&#34;https://googleapis.github.io/genai-toolbox/how-to/&#34;&gt;How-to section&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Integrating your application&lt;/h3&gt; &#xA;&lt;p&gt;Once your server is up and running, you can load the tools into your application. See below the list of Client SDKs for using various frameworks:&lt;/p&gt; &#xA;&lt;details open&gt; &#xA; &lt;summary&gt;Core&lt;/summary&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;Install &lt;a href=&#34;https://pypi.org/project/toolbox-core/&#34;&gt;Toolbox Core SDK&lt;/a&gt;: &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install toolbox-core&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;li&gt;Load tools: &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from toolbox_core import ToolboxClient&#xA;&#xA;# update the url to point to your server&#xA;client = ToolboxClient(&#34;http://127.0.0.1:5000&#34;)&#xA;&#xA;# these tools can be passed to your application! &#xA;tools = await client.load_toolset(&#34;toolset_name&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;p&gt;For more detailed instructions on using the Toolbox Core SDK, see the &lt;a href=&#34;https://github.com/googleapis/mcp-toolbox-sdk-python/tree/main/packages/toolbox-core/README.md&#34;&gt;project&#39;s README&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;LangChain / LangGraph&lt;/summary&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;Install &lt;a href=&#34;https://pypi.org/project/toolbox-langchain/&#34;&gt;Toolbox LangChain SDK&lt;/a&gt;: &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install toolbox-langchain&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;li&gt;Load tools: &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from toolbox_langchain import ToolboxClient&#xA;&#xA;# update the url to point to your server&#xA;client = ToolboxClient(&#34;http://127.0.0.1:5000&#34;)&#xA;&#xA;# these tools can be passed to your application! &#xA;tools = client.load_toolset()&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;p&gt;For more detailed instructions on using the Toolbox LangChain SDK, see the &lt;a href=&#34;https://github.com/googleapis/mcp-toolbox-sdk-python/raw/main/packages/toolbox-langchain/README.md&#34;&gt;project&#39;s README&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;LlamaIndex&lt;/summary&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;Install &lt;a href=&#34;https://pypi.org/project/toolbox-llamaindex/&#34;&gt;Toolbox Llamaindex SDK&lt;/a&gt;: &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install toolbox-llamaindex&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;li&gt;Load tools: &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from toolbox_llamaindex import ToolboxClient&#xA;&#xA;# update the url to point to your server&#xA;client = ToolboxClient(&#34;http://127.0.0.1:5000&#34;)&#xA;&#xA;# these tools can be passed to your application! &#xA;tools = client.load_toolset()&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;p&gt;For more detailed instructions on using the Toolbox Llamaindex SDK, see the &lt;a href=&#34;https://github.com/googleapis/genai-toolbox-llamaindex-python/raw/main/README.md&#34;&gt;project&#39;s README&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;The primary way to configure Toolbox is through the &lt;code&gt;tools.yaml&lt;/code&gt; file. If you have multiple files, you can tell toolbox which to load with the &lt;code&gt;--tools_file tools.yaml&lt;/code&gt; flag.&lt;/p&gt; &#xA;&lt;p&gt;You can find more detailed reference documentation to all resource types in the &lt;a href=&#34;https://googleapis.github.io/genai-toolbox/resources/&#34;&gt;Resources&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Sources&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;sources&lt;/code&gt; section of your &lt;code&gt;tools.yaml&lt;/code&gt; defines what data sources your Toolbox should have access to. Most tools will have at least one source to execute against.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;sources:&#xA;  my-pg-source:&#xA;    kind: postgres&#xA;    host: 127.0.0.1&#xA;    port: 5432&#xA;    database: toolbox_db&#xA;    user: toolbox_user&#xA;    password: my-password&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more details on configuring different types of sources, see the &lt;a href=&#34;https://googleapis.github.io/genai-toolbox/resources/sources&#34;&gt;Sources&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Tools&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;tools&lt;/code&gt; section of a &lt;code&gt;tools.yaml&lt;/code&gt; define the actions an agent can take: what kind of tool it is, which source(s) it affects, what parameters it uses, etc.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;tools:&#xA;  search-hotels-by-name:&#xA;    kind: postgres-sql&#xA;    source: my-pg-source&#xA;    description: Search for hotels based on name.&#xA;    parameters:&#xA;      - name: name&#xA;        type: string&#xA;        description: The name of the hotel.&#xA;    statement: SELECT * FROM hotels WHERE name ILIKE &#39;%&#39; || $1 || &#39;%&#39;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more details on configuring different types of tools, see the &lt;a href=&#34;https://googleapis.github.io/genai-toolbox/resources/tools&#34;&gt;Tools&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Toolsets&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;toolsets&lt;/code&gt; section of your &lt;code&gt;tools.yaml&lt;/code&gt; allows you to define groups of tools that you want to be able to load together. This can be useful for defining different groups based on agent or application.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;toolsets:&#xA;    my_first_toolset:&#xA;        - my_first_tool&#xA;        - my_second_tool&#xA;    my_second_toolset:&#xA;        - my_second_tool&#xA;        - my_third_tool&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can load toolsets by name:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# This will load all tools&#xA;all_tools = client.load_toolset()&#xA;&#xA;# This will only load the tools listed in &#39;my_second_toolset&#39;&#xA;my_second_toolset = client.load_toolset(&#34;my_second_toolset&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Versioning&lt;/h2&gt; &#xA;&lt;p&gt;This project uses &lt;a href=&#34;https://semver.org/&#34;&gt;semantic versioning&lt;/a&gt;, including a &lt;code&gt;MAJOR.MINOR.PATCH&lt;/code&gt; version number that increments with:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;MAJOR version when we make incompatible API changes&lt;/li&gt; &#xA; &lt;li&gt;MINOR version when we add functionality in a backward compatible manner&lt;/li&gt; &#xA; &lt;li&gt;PATCH version when we make backward compatible bug fixes&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The public API that this applies to is the CLI associated with Toolbox, the interactions with official SDKs, and the definitions in the &lt;code&gt;tools.yaml&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Contributions are welcome. Please, see the &lt;a href=&#34;https://raw.githubusercontent.com/googleapis/genai-toolbox/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTING&lt;/a&gt; to get started.&lt;/p&gt; &#xA;&lt;p&gt;Please note that this project is released with a Contributor Code of Conduct. By participating in this project you agree to abide by its terms. See &lt;a href=&#34;https://raw.githubusercontent.com/googleapis/genai-toolbox/main/CODE_OF_CONDUCT.md&#34;&gt;Contributor Code of Conduct&lt;/a&gt; for more information.&lt;/p&gt;</summary>
  </entry>
</feed>