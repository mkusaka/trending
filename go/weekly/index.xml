<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-08-11T01:37:58Z</updated>
  <subtitle>Weekly Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>golang-jwt/jwt</title>
    <updated>2024-08-11T01:37:58Z</updated>
    <id>tag:github.com,2024-08-11:/golang-jwt/jwt</id>
    <link href="https://github.com/golang-jwt/jwt" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Community maintained clone of https://github.com/dgrijalva/jwt-go&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;jwt-go&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/golang-jwt/jwt/actions/workflows/build.yml&#34;&gt;&lt;img src=&#34;https://github.com/golang-jwt/jwt/actions/workflows/build.yml/badge.svg?sanitize=true&#34; alt=&#34;build&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pkg.go.dev/github.com/golang-jwt/jwt/v5&#34;&gt;&lt;img src=&#34;https://pkg.go.dev/badge/github.com/golang-jwt/jwt/v5.svg?sanitize=true&#34; alt=&#34;Go Reference&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://coveralls.io/github/golang-jwt/jwt?branch=main&#34;&gt;&lt;img src=&#34;https://coveralls.io/repos/github/golang-jwt/jwt/badge.svg?branch=main&#34; alt=&#34;Coverage Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A &lt;a href=&#34;http://www.golang.org&#34;&gt;go&lt;/a&gt; (or &#39;golang&#39; for search engine friendliness) implementation of &lt;a href=&#34;https://datatracker.ietf.org/doc/html/rfc7519&#34;&gt;JSON Web Tokens&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Starting with &lt;a href=&#34;https://github.com/golang-jwt/jwt/releases/tag/v4.0.0&#34;&gt;v4.0.0&lt;/a&gt; this project adds Go module support, but maintains backward compatibility with older &lt;code&gt;v3.x.y&lt;/code&gt; tags and upstream &lt;code&gt;github.com/dgrijalva/jwt-go&lt;/code&gt;. See the &lt;a href=&#34;https://raw.githubusercontent.com/golang-jwt/jwt/main/MIGRATION_GUIDE.md&#34;&gt;&lt;code&gt;MIGRATION_GUIDE.md&lt;/code&gt;&lt;/a&gt; for more information. Version v5.0.0 introduces major improvements to the validation of tokens, but is not entirely backward compatible.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;After the original author of the library suggested migrating the maintenance of &lt;code&gt;jwt-go&lt;/code&gt;, a dedicated team of open source maintainers decided to clone the existing library into this repository. See &lt;a href=&#34;https://github.com/dgrijalva/jwt-go/issues/462&#34;&gt;dgrijalva/jwt-go#462&lt;/a&gt; for a detailed discussion on this topic.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;strong&gt;SECURITY NOTICE:&lt;/strong&gt; Some older versions of Go have a security issue in the crypto/elliptic. The recommendation is to upgrade to at least 1.15 See issue &lt;a href=&#34;https://github.com/dgrijalva/jwt-go/issues/216&#34;&gt;dgrijalva/jwt-go#216&lt;/a&gt; for more detail.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;SECURITY NOTICE:&lt;/strong&gt; It&#39;s important that you &lt;a href=&#34;https://auth0.com/blog/critical-vulnerabilities-in-json-web-token-libraries/&#34;&gt;validate the &lt;code&gt;alg&lt;/code&gt; presented is what you expect&lt;/a&gt;. This library attempts to make it easy to do the right thing by requiring key types to match the expected alg, but you should take the extra step to verify it in your usage. See the examples provided.&lt;/p&gt; &#xA;&lt;h3&gt;Supported Go versions&lt;/h3&gt; &#xA;&lt;p&gt;Our support of Go versions is aligned with Go&#39;s &lt;a href=&#34;https://golang.org/doc/devel/release#policy&#34;&gt;version release policy&lt;/a&gt;. So we will support a major version of Go until there are two newer major releases. We no longer support building jwt-go with unsupported Go versions, as these contain security vulnerabilities that will not be fixed.&lt;/p&gt; &#xA;&lt;h2&gt;What the heck is a JWT?&lt;/h2&gt; &#xA;&lt;p&gt;JWT.io has &lt;a href=&#34;https://jwt.io/introduction&#34;&gt;a great introduction&lt;/a&gt; to JSON Web Tokens.&lt;/p&gt; &#xA;&lt;p&gt;In short, it&#39;s a signed JSON object that does something useful (for example, authentication). It&#39;s commonly used for &lt;code&gt;Bearer&lt;/code&gt; tokens in Oauth 2. A token is made of three parts, separated by &lt;code&gt;.&lt;/code&gt;&#39;s. The first two parts are JSON objects, that have been &lt;a href=&#34;https://datatracker.ietf.org/doc/html/rfc4648&#34;&gt;base64url&lt;/a&gt; encoded. The last part is the signature, encoded the same way.&lt;/p&gt; &#xA;&lt;p&gt;The first part is called the header. It contains the necessary information for verifying the last part, the signature. For example, which encryption method was used for signing and what key was used.&lt;/p&gt; &#xA;&lt;p&gt;The part in the middle is the interesting bit. It&#39;s called the Claims and contains the actual stuff you care about. Refer to &lt;a href=&#34;https://datatracker.ietf.org/doc/html/rfc7519&#34;&gt;RFC 7519&lt;/a&gt; for information about reserved keys and the proper way to add your own.&lt;/p&gt; &#xA;&lt;h2&gt;What&#39;s in the box?&lt;/h2&gt; &#xA;&lt;p&gt;This library supports the parsing and verification as well as the generation and signing of JWTs. Current supported signing algorithms are HMAC SHA, RSA, RSA-PSS, and ECDSA, though hooks are present for adding your own.&lt;/p&gt; &#xA;&lt;h2&gt;Installation Guidelines&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;To install the jwt package, you first need to have &lt;a href=&#34;https://go.dev/doc/install&#34;&gt;Go&lt;/a&gt; installed, then you can use the command below to add &lt;code&gt;jwt-go&lt;/code&gt; as a dependency in your Go program.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;go get -u github.com/golang-jwt/jwt/v5&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Import it in your code:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;import &#34;github.com/golang-jwt/jwt/v5&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;A detailed usage guide, including how to sign and verify tokens can be found on our &lt;a href=&#34;https://golang-jwt.github.io/jwt/usage/create/&#34;&gt;documentation website&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://pkg.go.dev/github.com/golang-jwt/jwt/v5&#34;&gt;the project documentation&lt;/a&gt; for examples of usage:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/golang-jwt/jwt/v5#example-Parse-Hmac&#34;&gt;Simple example of parsing and validating a token&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/golang-jwt/jwt/v5#example-New-Hmac&#34;&gt;Simple example of building and signing a token&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/golang-jwt/jwt/v5#pkg-examples&#34;&gt;Directory of Examples&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Compliance&lt;/h2&gt; &#xA;&lt;p&gt;This library was last reviewed to comply with &lt;a href=&#34;https://datatracker.ietf.org/doc/html/rfc7519&#34;&gt;RFC 7519&lt;/a&gt; dated May 2015 with a few notable differences:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;In order to protect against accidental use of &lt;a href=&#34;https://datatracker.ietf.org/doc/html/rfc7519#section-6&#34;&gt;Unsecured JWTs&lt;/a&gt;, tokens using &lt;code&gt;alg=none&lt;/code&gt; will only be accepted if the constant &lt;code&gt;jwt.UnsafeAllowNoneSignatureType&lt;/code&gt; is provided as the key.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Project Status &amp;amp; Versioning&lt;/h2&gt; &#xA;&lt;p&gt;This library is considered production ready. Feedback and feature requests are appreciated. The API should be considered stable. There should be very few backward-incompatible changes outside of major version updates (and only with good reason).&lt;/p&gt; &#xA;&lt;p&gt;This project uses &lt;a href=&#34;http://semver.org&#34;&gt;Semantic Versioning 2.0.0&lt;/a&gt;. Accepted pull requests will land on &lt;code&gt;main&lt;/code&gt;. Periodically, versions will be tagged from &lt;code&gt;main&lt;/code&gt;. You can find all the releases on &lt;a href=&#34;https://github.com/golang-jwt/jwt/releases&#34;&gt;the project releases page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;BREAKING CHANGES:&lt;/strong&gt; A full list of breaking changes is available in &lt;code&gt;VERSION_HISTORY.md&lt;/code&gt;. See &lt;a href=&#34;https://raw.githubusercontent.com/golang-jwt/jwt/main/MIGRATION_GUIDE.md&#34;&gt;&lt;code&gt;MIGRATION_GUIDE.md&lt;/code&gt;&lt;/a&gt; for more information on updating your code.&lt;/p&gt; &#xA;&lt;h2&gt;Extensions&lt;/h2&gt; &#xA;&lt;p&gt;This library publishes all the necessary components for adding your own signing methods or key functions. Simply implement the &lt;code&gt;SigningMethod&lt;/code&gt; interface and register a factory method using &lt;code&gt;RegisterSigningMethod&lt;/code&gt; or provide a &lt;code&gt;jwt.Keyfunc&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;A common use case would be integrating with different 3rd party signature providers, like key management services from various cloud providers or Hardware Security Modules (HSMs) or to implement additional standards.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Extension&lt;/th&gt; &#xA;   &lt;th&gt;Purpose&lt;/th&gt; &#xA;   &lt;th&gt;Repo&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GCP&lt;/td&gt; &#xA;   &lt;td&gt;Integrates with multiple Google Cloud Platform signing tools (AppEngine, IAM API, Cloud KMS)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/someone1/gcp-jwt-go&#34;&gt;https://github.com/someone1/gcp-jwt-go&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;AWS&lt;/td&gt; &#xA;   &lt;td&gt;Integrates with AWS Key Management Service, KMS&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/matelang/jwt-go-aws-kms&#34;&gt;https://github.com/matelang/jwt-go-aws-kms&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;JWKS&lt;/td&gt; &#xA;   &lt;td&gt;Provides support for JWKS (&lt;a href=&#34;https://datatracker.ietf.org/doc/html/rfc7517&#34;&gt;RFC 7517&lt;/a&gt;) as a &lt;code&gt;jwt.Keyfunc&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/MicahParks/keyfunc&#34;&gt;https://github.com/MicahParks/keyfunc&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;em&gt;Disclaimer&lt;/em&gt;: Unless otherwise specified, these integrations are maintained by third parties and should not be considered as a primary offer by any of the mentioned cloud providers&lt;/p&gt; &#xA;&lt;h2&gt;More&lt;/h2&gt; &#xA;&lt;p&gt;Go package documentation can be found &lt;a href=&#34;https://pkg.go.dev/github.com/golang-jwt/jwt/v5&#34;&gt;on pkg.go.dev&lt;/a&gt;. Additional documentation can be found on &lt;a href=&#34;https://golang-jwt.github.io/jwt/&#34;&gt;our project page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The command line utility included in this project (cmd/jwt) provides a straightforward example of token creation and parsing as well as a useful tool for debugging your own integration. You&#39;ll also find several implementation examples in the documentation.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/orgs/golang-jwt&#34;&gt;golang-jwt&lt;/a&gt; incorporates a modified version of the JWT logo, which is distributed under the terms of the &lt;a href=&#34;https://github.com/jsonwebtoken/jsonwebtoken.github.io/raw/master/LICENSE.txt&#34;&gt;MIT License&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>xvzc/SpoofDPI</title>
    <updated>2024-08-11T01:37:58Z</updated>
    <id>tag:github.com,2024-08-11:/xvzc/SpoofDPI</id>
    <link href="https://github.com/xvzc/SpoofDPI" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A simple and fast anti-censorship tool written in Go&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;strong&gt;⭐PRs or any form of contribution will be appreciated⭐&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h1&gt;SpoofDPI&lt;/h1&gt; &#xA;&lt;p&gt;Read in other Languages: &lt;a href=&#34;https://github.com/xvzc/SpoofDPI&#34;&gt;🇬🇧English&lt;/a&gt;, &lt;a href=&#34;https://github.com/xvzc/SpoofDPI/raw/main/_docs/readme_ko.md&#34;&gt;🇰🇷한국어&lt;/a&gt;, &lt;a href=&#34;https://github.com/xvzc/SpoofDPI/raw/main/_docs/readme_zh-cn.md&#34;&gt;🇨🇳简体中文&lt;/a&gt;, &lt;a href=&#34;https://github.com/xvzc/SpoofDPI/raw/main/_docs/readme_ru.md&#34;&gt;🇷🇺Русский&lt;/a&gt;, &lt;a href=&#34;https://github.com/xvzc/SpoofDPI/raw/main/_docs/readme_ja.md&#34;&gt;🇯🇵日本語&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A simple and fast software designed to bypass &lt;strong&gt;Deep Packet Inspection&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/45588457/148035986-8b0076cc-fefb-48a1-9939-a8d9ab1d6322.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;h2&gt;Binary&lt;/h2&gt; &#xA;&lt;p&gt;SpoofDPI will be installed in &lt;code&gt;~/.spoof-dpi/bin&lt;/code&gt;. To run SpoofDPI in any directory, add the line below to your &lt;code&gt;~/.bashrc || ~/.zshrc || ...&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;export PATH=$PATH:~/.spoof-dpi/bin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# macOS Intel&#xA;curl -fsSL https://raw.githubusercontent.com/xvzc/SpoofDPI/main/install.sh | bash -s darwin-amd64&#xA;&#xA;# macOS Apple Silicon&#xA;curl -fsSL https://raw.githubusercontent.com/xvzc/SpoofDPI/main/install.sh | bash -s darwin-arm64&#xA;&#xA;# linux-amd64&#xA;curl -fsSL https://raw.githubusercontent.com/xvzc/SpoofDPI/main/install.sh | bash -s linux-amd64&#xA;&#xA;# linux-arm&#xA;curl -fsSL https://raw.githubusercontent.com/xvzc/SpoofDPI/main/install.sh | bash -s linux-arm&#xA;&#xA;# linux-arm64&#xA;curl -fsSL https://raw.githubusercontent.com/xvzc/SpoofDPI/main/install.sh | bash -s linux-arm64&#xA;&#xA;# linux-mips&#xA;curl -fsSL https://raw.githubusercontent.com/xvzc/SpoofDPI/main/install.sh | bash -s linux-mips&#xA;&#xA;# linux-mipsle&#xA;curl -fsSL https://raw.githubusercontent.com/xvzc/SpoofDPI/main/install.sh | bash -s linux-mipsle&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Go&lt;/h2&gt; &#xA;&lt;p&gt;You can also install SpoofDPI with &lt;code&gt;go install&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ go install github.com/xvzc/SpoofDPI/cmd/spoof-dpi@latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Git&lt;/h2&gt; &#xA;&lt;p&gt;You can also build your own&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git clone https://github.com/xvzc/SpoofDPI.git&#xA;$ cd SpoofDPI&#xA;$ go build ./cmd/...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Usage&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code&gt;Usage: spoof-dpi [options...]&#xA;  -addr string&#xA;        listen address (default &#34;127.0.0.1&#34;)&#xA;  -debug&#xA;        enable debug output&#xA;  -dns-addr string&#xA;        dns address (default &#34;8.8.8.8&#34;)&#xA;  -dns-port int&#xA;        port number for dns (default 53)&#xA;  -enable-doh&#xA;        enable &#39;dns-over-https&#39;&#xA;  -no-banner&#xA;        disable banner&#xA;  -pattern value&#xA;        bypass DPI only on packets matching this regex pattern; can be given multiple times&#xA;  -port int&#xA;        port (default 8080)&#xA;  -system-proxy&#xA;        enable system-wide proxy (default true)&#xA;  -timeout int&#xA;        timeout in milliseconds; no timeout when not given&#xA;  -v    print spoof-dpi&#39;s version; this may contain some other relevant information&#xA;  -window-size int&#xA;        chunk size, in number of bytes, for fragmented client hello,&#xA;        try lower values if the default value doesn&#39;t bypass the DPI;&#xA;        when not given, the client hello packet will be sent in two parts:&#xA;        fragmentation for the first data packet and the rest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;If you are using any vpn extensions such as Hotspot Shield in Chrome browser, go to Settings &amp;gt; Extensions, and disable them.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;OSX&lt;/h3&gt; &#xA;&lt;p&gt;Run &lt;code&gt;spoof-dpi&lt;/code&gt; and it will automatically set your proxy&lt;/p&gt; &#xA;&lt;h3&gt;Linux&lt;/h3&gt; &#xA;&lt;p&gt;Run &lt;code&gt;spoof-dpi&lt;/code&gt; and open your favorite browser with proxy option&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;google-chrome --proxy-server=&#34;http://127.0.0.1:8080&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;How it works&lt;/h1&gt; &#xA;&lt;h3&gt;HTTP&lt;/h3&gt; &#xA;&lt;p&gt;Since most of websites in the world now support HTTPS, SpoofDPI doesn&#39;t bypass Deep Packet Inspections for HTTP requets, However It still serves proxy connection for all HTTP requests.&lt;/p&gt; &#xA;&lt;h3&gt;HTTPS&lt;/h3&gt; &#xA;&lt;p&gt;Although TLS encrypts every handshake process, the domain names are still shown as plaintext in the Client hello packet. In other words, when someone else looks on the packet, they can easily guess where the packet is headed to. The domain name can offer a significant information while DPI is being processed, and we can actually see that the connection is blocked right after sending Client hello packet. I had tried some ways to bypass this, and found out that it seemed like only the first chunk gets inspected when we send the Client hello packet splited in chunks. What SpoofDPI does to bypass this is to send the first 1 byte of a request to the server, and then send the rest.&lt;/p&gt; &#xA;&lt;h1&gt;Inspirations&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/SadeghHayeri/GreenTunnel&#34;&gt;Green Tunnel&lt;/a&gt; by @SadeghHayeri &lt;a href=&#34;https://github.com/ValdikSS/GoodbyeDPI&#34;&gt;GoodbyeDPI&lt;/a&gt; by @ValdikSS&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>KindlingProject/kindling</title>
    <updated>2024-08-11T01:37:58Z</updated>
    <id>tag:github.com,2024-08-11:/KindlingProject/kindling</id>
    <link href="https://github.com/KindlingProject/kindling" rel="alternate"></link>
    <summary type="html">&lt;p&gt;eBPF-based Cloud Native Monitoring Tool&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Kindling&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/KindlingProject/kindling/raw/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-Apache2.0-blue.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://kindling.harmonycloud.cn/docs/overview-and-concepts/overview/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/docs-latest-green.svg?sanitize=true&#34; alt=&#34;Doc&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/KindlingProject/kindling/collector&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/KindlingProject/kindling/collector&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Visit our &lt;a href=&#34;http://kindling.harmonycloud.cn/&#34;&gt;Kindling website&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h2&gt;What is Kindling&lt;/h2&gt; &#xA;&lt;p&gt;Kindling is an eBPF-based cloud native monitoring tool, which aims to help users understand the app behavior from kernel to code stack. With &lt;strong&gt;trace profiling&lt;/strong&gt;, we hope the user can understand the application&#39;s behavior easily and find the root cause in seconds. Besides trace profiling, Kindling provides an easy way to get an overview of network flows in the Kubernetes environment, and many built-in network monitor dashboards like TCP retransmit, DNS, throughput, and TPS. Not only as a network monitor, but Kindling is also trying to analyze one detail RPC call and get the following information, which can be found in network explore in chrome. And the usage is the same as network exploration in chrome, with which users can tell which part to dig into to find the root cause of the problem in the production environment.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://cdn.nlark.com/yuque/0/2021/png/749988/1633767195234-af2913c4-75d7-447d-99bb-bd1d815883ae.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;What is Kindling Trace-profiling&lt;/h2&gt; &#xA;&lt;p&gt;With traces, metrics, and logs, many issues still can’t be understood easily. Trace-profiling is trying to integrate the OnCPU and OffCPU events within the traces and collect the logs output during the trace execution timeframe.&lt;/p&gt; &#xA;&lt;p&gt;OnCPU events are just like the flame graph, but the code has been collected at the thread level instead of the process level. And the trace was executed by one thread, so users can understand how the trace was executing on the CPU.&lt;/p&gt; &#xA;&lt;p&gt;OffCPU events are the opposite of OnCPU events. As for the trace analysis, most traces spend a lifetime waiting for the locks, database query, remote process call, file reading, or file writing. All of these events cause the thread in waiting status, and they are considered as OffCPU events.&lt;/p&gt; &#xA;&lt;p&gt;So for trace profiling, how all threads were executed is recorded and can be replayed.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The exact thread which executed the trace span is highlighted.&lt;/li&gt; &#xA; &lt;li&gt;The logs printed by each thread are collected and correlated to the relative thread with its timestamp.&lt;/li&gt; &#xA; &lt;li&gt;The code execution flame graph is correlated to the time series where the CPU is busy.&lt;/li&gt; &#xA; &lt;li&gt;The network-related metrics are correlated to the time series where the network syscalls are executing.&lt;/li&gt; &#xA; &lt;li&gt;The file-related metrics are correlated to the time series where the file syscalls are executing.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Architecture&lt;/h2&gt; &#xA;&lt;p&gt;From a high-level view, the agent runs as DeamonSet in Kubernetes. It collects all syscalls and some other tracepoints. We use different exporters for different distributions. For example, we build a Prometheus exporter to export the data which can be stored in Prometheus and displayed in Grafana Plugin. But for the trace profiling module, the UI is different, that&#39;s a standalone module.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/KindlingProject/kindling/main/docs/imgs/architecture.png&#34; alt=&#34;image.png&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Linux kernel version support&lt;/h2&gt; &#xA;&lt;p&gt;The Kindling eBPF module depends on the kernel version which is newer than 4.14. But for trace-profiling, the kernel version has to be newer than 4.17, hoping with more work, the trace-profiling can work on older kernel versions. As an eBPF constraint, the eBPF module can&#39;t work for older kernel versions. But for the users who want to try the functionality with the old kernel, we use the kernel module from Sysdig open-source project with enhancement and verification. Basically, the idea is to use a kernel module for tracking the kernel tracepoints. Thanks to Sysdig open-source project, it provides a tracepoint instrument framework for older kernel versions.&lt;/p&gt; &#xA;&lt;p&gt;For now, the kernel module works as expected as the eBPF module during our test except for trace-profiling, but it is recommended to use the eBPF module in the production environment as it is safer than the kernel module. In order to help the older kernel version user experience the eBPF magic, we also support the kernel model. And you are welcome to report issues with the kernel module. For functionality, the kernel module and eBPF module capture the same data and behave exactly the same.&lt;/p&gt; &#xA;&lt;h2&gt;Why do we build Kindling?&lt;/h2&gt; &#xA;&lt;p&gt;When we talk about observability, we already have plenty of tools to use, like Skywalking for tracing, ELK for logging, and Prometheus for metrics. Why do we need to build an eBPF-based monitoring tool?&lt;/p&gt; &#xA;&lt;p&gt;The majority issue for user adoption of k8s is the complexity. For the applications on Kubernetes, we don&#39;t know the network flows between the services until we can instrument the apps. We can&#39;t tell which part to blame when there is a product issue arise. Do we configure Kubernetes correctly? Are there any bugs in the virtual network like Calico or Flannel that caused this problem? Does the application code cause this issue?&lt;/p&gt; &#xA;&lt;p&gt;We are a company based in Hangzhou, China, and used to provide Kubernetes distribution for our customers. Our customers used to have those questions, and we don&#39;t have proper solutions to answer those questions.&lt;/p&gt; &#xA;&lt;p&gt;APM(Application Performance Monitoring) is good for those applications in Java which can be instrumented automatically, while for the Go programs, the code has to be rewritten for instrumenting. And even if we adopt the APM solution, we still can&#39;t tell whether an issue is caused by network problems, and many issues can’t be pinpoint the root cause easily.&lt;/p&gt; &#xA;&lt;p&gt;We found it may be helpful that we triage the issue first by checking the issue from the network view to identify issues roughly like &#34;oh, it&#39;s a network problem, the code works fine, and we should dig into the configuration of calico&#34; or &#34;the infrastructure works fine, so the app code should be blamed, let&#39;s dig into the logs or the APM dashboard for further information&#34;.&lt;/p&gt; &#xA;&lt;p&gt;After we triage the issue, we need to pinpoint the root cause of the issue. That&#39;s why we need the trace-profiling module.&lt;/p&gt; &#xA;&lt;h3&gt;Why eBPF?&lt;/h3&gt; &#xA;&lt;p&gt;The libpcap way of analyzing the flows in the Kubernetes environment is too expensive for the CPU and network. The eBPF way of data capture cost much less than libpcap. eBPF is the most popular technology to track the Linux kernel where the virtual network, built by veth-pair and iptables, works. So eBPF is a proper technique to be used for tracking how the kernel responds to application requests.&lt;/p&gt; &#xA;&lt;h2&gt;Core Features&lt;/h2&gt; &#xA;&lt;p&gt;With the trace-profiling module, we can understand how ElasticSearch works easily. The following image shows how ElasticSearch is executing the &lt;code&gt;bulk insert&lt;/code&gt; operation.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/KindlingProject/kindling/main/docs/imgs/traceprofiling.png&#34; alt=&#34;trace-profiling&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The next image shows a dependency map in Kubernetes.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://cdn.nlark.com/yuque/0/2022/png/749988/1642572876088-c26396ac-e7bb-44e7-ae0c-cc96f3344cd8.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Kindling can be easily integrated with Prometheus, and we uses PromQL to query the data in the frontend, so it should be adopted easily. But due to the cardinality constraint of Prometheus, we group the detailed data into buckets which throw away the detailed information.&lt;/p&gt; &#xA;&lt;h2&gt;Get started&lt;/h2&gt; &#xA;&lt;p&gt;You can deploy Kindling easily, check out the &lt;a href=&#34;http://kindling.harmonycloud.cn/docs/installation/kindling-agent/requirements/&#34;&gt;Installation Guide&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;The Kindling documentation is available on our &lt;a href=&#34;http://kindling.harmonycloud.cn/docs/overview-and-concepts/overview/&#34;&gt;Kindling website&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Contributions are welcome, you can contribute in many ways: report issues, help us reproduce issues, fix bugs, add features, give us advice on GitHub discussion, and so on. If you are interested in joining us to unveil the eBPF in the Kubernetes area, you can start by reading the &lt;a href=&#34;https://github.com/KindlingProject/kindling/raw/main/CONTRIBUTING.md&#34;&gt;Contributing Guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contact&lt;/h2&gt; &#xA;&lt;p&gt;If you have questions or ideas, please feel free to reach out to us in the following ways:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Check out the &lt;a href=&#34;https://github.com/KindlingProject/kindling/discussions&#34;&gt;discussions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Join the Kindling &lt;a href=&#34;https://join.slack.com/t/kindling-world/shared_invite/zt-1rmki34l0-JiFpWFR7YhqlXG~mSQQAtg&#34;&gt;Slack channel&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Join the WeChat Group (in Chinese)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/KindlingProject/kindling/main/docs/imgs/wechat-code.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Kindling is distributed under &lt;a href=&#34;https://github.com/KindlingProject/kindling/raw/main/LICENSE&#34;&gt;Apache License, Version2.0&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>