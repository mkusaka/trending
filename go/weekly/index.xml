<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-07-28T01:38:13Z</updated>
  <subtitle>Weekly Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>trufflesecurity/trufflehog</title>
    <updated>2024-07-28T01:38:13Z</updated>
    <id>tag:github.com,2024-07-28:/trufflesecurity/trufflehog</id>
    <link href="https://github.com/trufflesecurity/trufflehog" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Find and verify secrets&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img alt=&#34;GoReleaser Logo&#34; src=&#34;https://storage.googleapis.com/trufflehog-static-sources/pixel_pig.png&#34; height=&#34;140&#34;&gt; &lt;/p&gt;&#xA;&lt;h2 align=&#34;center&#34;&gt;TruffleHog&lt;/h2&gt; &#xA;&lt;p align=&#34;center&#34;&gt;Find leaked credentials.&lt;/p&gt; &#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://goreportcard.com/report/github.com/trufflesecurity/trufflehog/v3&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/trufflesecurity/trufflehog/v3&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trufflesecurity/trufflehog/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-AGPL--3.0-brightgreen&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trufflesecurity/trufflehog/main/pkg/detectors&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/directory-file-count/trufflesecurity/truffleHog/pkg/detectors?label=Total%20Detectors&amp;amp;type=dir&#34; alt=&#34;Total Detectors&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;hr&gt; &#xA;&lt;h1&gt;&lt;span&gt;üîé&lt;/span&gt; &lt;em&gt;Now Scanning&lt;/em&gt;&lt;/h1&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/trufflesecurity/trufflehog/main/assets/scanning_logos.svg?sanitize=true&#34;&gt; &#xA; &lt;p&gt;&lt;strong&gt;...and more&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;To learn more about about TruffleHog and its features and capabilities, visit our &lt;a href=&#34;https://trufflesecurity.com/trufflehog?gclid=CjwKCAjwouexBhAuEiwAtW_Zx5IW87JNj97Ci7heFnA5ar6-DuNzT2Y5nIl9DuZ-FOUqx0Qg3vb9nxoClcEQAvD_BwE&#34;&gt;product page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;h1&gt;&lt;span&gt;üåê&lt;/span&gt; TruffleHog Enterprise&lt;/h1&gt; &#xA;&lt;p&gt;Are you interested in continuously monitoring &lt;strong&gt;Git, Jira, Slack, Confluence, Microsoft Teams, Sharepoint, and more..&lt;/strong&gt; for credentials? We have an enterprise product that can help! Learn more at &lt;a href=&#34;https://trufflesecurity.com/trufflehog-enterprise&#34;&gt;https://trufflesecurity.com/trufflehog-enterprise&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;We take the revenue from the enterprise product to fund more awesome open source projects that the whole community can benefit from.&lt;/p&gt;  &#xA;&lt;h1&gt;&lt;span&gt;üì¢&lt;/span&gt; Join Our Community&lt;/h1&gt; &#xA;&lt;p&gt;Have questions? Feedback? Jump in slack or discord and hang out with us&lt;/p&gt; &#xA;&lt;p&gt;Join our &lt;a href=&#34;https://join.slack.com/t/trufflehog-community/shared_invite/zt-pw2qbi43-Aa86hkiimstfdKH9UCpPzQ&#34;&gt;Slack Community&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Join the &lt;a href=&#34;https://discord.gg/8Hzbrnkr7E&#34;&gt;Secret Scanning Discord&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;&lt;span&gt;üì∫&lt;/span&gt; Demo&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://storage.googleapis.com/truffle-demos/non-interactive.svg?sanitize=true&#34; alt=&#34;GitHub scanning demo&#34;&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run --rm -it -v &#34;$PWD:/pwd&#34; trufflesecurity/trufflehog:latest github --org=trufflesecurity&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;&lt;span&gt;üíæ&lt;/span&gt; Installation&lt;/h1&gt; &#xA;&lt;p&gt;Several options available for you:&lt;/p&gt; &#xA;&lt;h3&gt;MacOS users&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew install trufflehog&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Docker:&lt;/h3&gt; &#xA;&lt;p&gt;&lt;sub&gt;&lt;i&gt;&lt;em&gt;Ensure Docker engine is running before executing the following commands:&lt;/em&gt;&lt;/i&gt;&lt;/sub&gt;&lt;/p&gt; &#xA;&lt;h4&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Unix&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run --rm -it -v &#34;$PWD:/pwd&#34; trufflesecurity/trufflehog:latest github --repo https://github.com/trufflesecurity/test_keys&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Windows Command Prompt&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run --rm -it -v &#34;%cd:/=\%:/pwd&#34; trufflesecurity/trufflehog:latest github --repo https://github.com/trufflesecurity/test_keys&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Windows PowerShell&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run --rm -it -v &#34;${PWD}:/pwd&#34; trufflesecurity/trufflehog github --repo https://github.com/trufflesecurity/test_keys&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;M1 and M2 Mac&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run --platform linux/arm64 --rm -it -v &#34;$PWD:/pwd&#34; trufflesecurity/trufflehog:latest github --repo https://github.com/trufflesecurity/test_keys&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Binary releases&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Download and unpack from https://github.com/trufflesecurity/trufflehog/releases&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Compile from source&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/trufflesecurity/trufflehog.git&#xA;cd trufflehog; go install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using installation script&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -sSfL https://raw.githubusercontent.com/trufflesecurity/trufflehog/main/scripts/install.sh | sh -s -- -b /usr/local/bin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using installation script, verify checksum signature (requires cosign to be installed)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -sSfL https://raw.githubusercontent.com/trufflesecurity/trufflehog/main/scripts/install.sh | sh -s -- -v -b /usr/local/bin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using installation script to install a specific version&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -sSfL https://raw.githubusercontent.com/trufflesecurity/trufflehog/main/scripts/install.sh | sh -s -- -b /usr/local/bin &amp;lt;ReleaseTag like v3.56.0&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;&lt;span&gt;üîê&lt;/span&gt; Verifying the artifacts&lt;/h1&gt; &#xA;&lt;p&gt;Checksums are applied to all artifacts, and the resulting checksum file is signed using cosign.&lt;/p&gt; &#xA;&lt;p&gt;You need the following tool to verify signature:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.sigstore.dev/cosign/installation/&#34;&gt;Cosign&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Verification steps are as follow:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Download the artifact files you want, and the following files from the &lt;a href=&#34;https://github.com/trufflesecurity/trufflehog/releases&#34;&gt;releases&lt;/a&gt; page.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;trufflehog_{version}_checksums.txt&lt;/li&gt; &#xA;   &lt;li&gt;trufflehog_{version}_checksums.txt.pem&lt;/li&gt; &#xA;   &lt;li&gt;trufflehog_{version}_checksums.txt.sig&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Verify the signature:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cosign verify-blob &amp;lt;path to trufflehog_{version}_checksums.txt&amp;gt; \&#xA;--certificate &amp;lt;path to trufflehog_{version}_checksums.txt.pem&amp;gt; \&#xA;--signature &amp;lt;path to trufflehog_{version}_checksums.txt.sig&amp;gt; \&#xA;--certificate-identity-regexp &#39;https://github\.com/trufflesecurity/trufflehog/\.github/workflows/.+&#39; \&#xA;--certificate-oidc-issuer &#34;https://token.actions.githubusercontent.com&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Once the signature is confirmed as valid, you can proceed to validate that the SHA256 sums align with the downloaded artifact:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sha256sum --ignore-missing -c trufflehog_{version}_checksums.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Replace &lt;code&gt;{version}&lt;/code&gt; with the downloaded files version&lt;/p&gt; &#xA;&lt;p&gt;Alternatively, if you are using installation script, pass &lt;code&gt;-v&lt;/code&gt; option to perform signature verification. This required Cosign binary to be installed prior to running installation script.&lt;/p&gt; &#xA;&lt;h1&gt;&lt;span&gt;üöÄ&lt;/span&gt; Quick Start&lt;/h1&gt; &#xA;&lt;h2&gt;1: Scan a repo for only verified secrets&lt;/h2&gt; &#xA;&lt;p&gt;Command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;trufflehog git https://github.com/trufflesecurity/test_keys --only-verified&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Expected output:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;üê∑üîëüê∑  TruffleHog. Unearth your secrets. üê∑üîëüê∑&#xA;&#xA;Found verified result üê∑üîë&#xA;Detector Type: AWS&#xA;Decoder Type: PLAIN&#xA;Raw result: AKIAYVP4CIPPERUVIFXG&#xA;Line: 4&#xA;Commit: fbc14303ffbf8fb1c2c1914e8dda7d0121633aca&#xA;File: keys&#xA;Email: counter &amp;lt;counter@counters-MacBook-Air.local&amp;gt;&#xA;Repository: https://github.com/trufflesecurity/test_keys&#xA;Timestamp: 2022-06-16 10:17:40 -0700 PDT&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;2: Scan a GitHub Org for only verified secrets&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;trufflehog github --org=trufflesecurity --only-verified&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;3: Scan a GitHub Repo for only verified keys and get JSON output&lt;/h2&gt; &#xA;&lt;p&gt;Command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;trufflehog git https://github.com/trufflesecurity/test_keys --only-verified --json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Expected output:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;{&#34;SourceMetadata&#34;:{&#34;Data&#34;:{&#34;Git&#34;:{&#34;commit&#34;:&#34;fbc14303ffbf8fb1c2c1914e8dda7d0121633aca&#34;,&#34;file&#34;:&#34;keys&#34;,&#34;email&#34;:&#34;counter \u003ccounter@counters-MacBook-Air.local\u003e&#34;,&#34;repository&#34;:&#34;https://github.com/trufflesecurity/test_keys&#34;,&#34;timestamp&#34;:&#34;2022-06-16 10:17:40 -0700 PDT&#34;,&#34;line&#34;:4}}},&#34;SourceID&#34;:0,&#34;SourceType&#34;:16,&#34;SourceName&#34;:&#34;trufflehog - git&#34;,&#34;DetectorType&#34;:2,&#34;DetectorName&#34;:&#34;AWS&#34;,&#34;DecoderName&#34;:&#34;PLAIN&#34;,&#34;Verified&#34;:true,&#34;Raw&#34;:&#34;AKIAYVP4CIPPERUVIFXG&#34;,&#34;Redacted&#34;:&#34;AKIAYVP4CIPPERUVIFXG&#34;,&#34;ExtraData&#34;:{&#34;account&#34;:&#34;595918472158&#34;,&#34;arn&#34;:&#34;arn:aws:iam::595918472158:user/canarytokens.com@@mirux23ppyky6hx3l6vclmhnj&#34;,&#34;user_id&#34;:&#34;AIDAYVP4CIPPJ5M54LRCY&#34;},&#34;StructuredData&#34;:null}&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;4: Scan a GitHub Repo + its Issues and Pull Requests&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;trufflehog github --repo=https://github.com/trufflesecurity/test_keys --issue-comments --pr-comments&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;5: Scan an S3 bucket for verified keys&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;trufflehog s3 --bucket=&amp;lt;bucket name&amp;gt; --only-verified&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;6: Scan S3 buckets using IAM Roles&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;trufflehog s3 --role-arn=&amp;lt;iam role arn&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;7: Scan a Github Repo using SSH authentication in docker&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run --rm -v &#34;$HOME/.ssh:/root/.ssh:ro&#34; trufflesecurity/trufflehog:latest git ssh://github.com/trufflesecurity/test_keys&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;8: Scan individual files or directories&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;trufflehog filesystem path/to/file1.txt path/to/file2.txt path/to/dir&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;9: Scan GCS buckets for verified secrets&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;trufflehog gcs --project-id=&amp;lt;project-ID&amp;gt; --cloud-environment --only-verified&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;10: Scan a Docker image for verified secrets&lt;/h2&gt; &#xA;&lt;p&gt;Use the &lt;code&gt;--image&lt;/code&gt; flag multiple times to scan multiple images.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;trufflehog docker --image trufflesecurity/secrets --only-verified&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;11: Scan in CI&lt;/h2&gt; &#xA;&lt;p&gt;Set the &lt;code&gt;--since-commit&lt;/code&gt; flag to your default branch that people merge into (ex: &#34;main&#34;). Set the &lt;code&gt;--branch&lt;/code&gt; flag to your PR&#39;s branch name (ex: &#34;feature-1&#34;). Depending on the CI/CD platform you use, this value can be pulled in dynamically (ex: &lt;a href=&#34;https://circleci.com/docs/variables/&#34;&gt;CIRCLE_BRANCH in Circle CI&lt;/a&gt; and &lt;a href=&#34;https://docs.travis-ci.com/user/environment-variables/&#34;&gt;TRAVIS_PULL_REQUEST_BRANCH in Travis CI&lt;/a&gt;). If the repo is cloned and the target branch is already checked out during the CI/CD workflow, then &lt;code&gt;--branch HEAD&lt;/code&gt; should be sufficient. The &lt;code&gt;--fail&lt;/code&gt; flag will return an 183 error code if valid credentials are found.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;trufflehog git file://. --since-commit main --branch feature-1 --only-verified --fail&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;12: Scan a Postman workspace&lt;/h2&gt; &#xA;&lt;p&gt;Use the &lt;code&gt;--workspace-id&lt;/code&gt;, &lt;code&gt;--collection-id&lt;/code&gt;, &lt;code&gt;--environment&lt;/code&gt; flags multiple times to scan multiple targets.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;trufflehog postman --token=&amp;lt;postman api token&amp;gt; --workspace-id=&amp;lt;workspace id&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;13: Scan a Jenkins server&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;trufflehog jenkins --url https://jenkins.example.com --username admin --password admin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;14: Scan an Elasticsearch server&lt;/h2&gt; &#xA;&lt;h3&gt;Scan a Local Cluster&lt;/h3&gt; &#xA;&lt;p&gt;There are two ways to authenticate to a local cluster with TruffleHog: (1) username and password, (2) service token.&lt;/p&gt; &#xA;&lt;h4&gt;Connect to a local cluster with username and password&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;trufflehog elasticsearch --nodes 192.168.14.3 192.168.14.4 --username truffle --password hog&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Connect to a local cluster with a service token&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;trufflehog elasticsearch --nodes 192.168.14.3 192.168.14.4 --service-token ‚ÄòAAEWVaWM...Rva2VuaSDZ‚Äô&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Scan an Elastic Cloud Cluster&lt;/h3&gt; &#xA;&lt;p&gt;To scan a cluster on Elastic Cloud, you‚Äôll need a Cloud ID and API key.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;trufflehog elasticsearch \&#xA;  --cloud-id &#39;search-prod:dXMtY2Vx...YjM1ODNlOWFiZGRlNjI0NA==&#39; \&#xA;  --api-key &#39;MlVtVjBZ...ZSYlduYnF1djh3NG5FQQ==&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;&lt;span&gt;‚ùì&lt;/span&gt; FAQ&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;All I see is &lt;code&gt;üê∑üîëüê∑ TruffleHog. Unearth your secrets. üê∑üîëüê∑&lt;/code&gt; and the program exits, what gives? &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;That means no secrets were detected&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Why is the scan taking a long time when I scan a GitHub org &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Unauthenticated GitHub scans have rate limits. To improve your rate limits, include the &lt;code&gt;--token&lt;/code&gt; flag with a personal access token&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;It says a private key was verified, what does that mean? &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Check out our Driftwood blog post to learn how to do this, in short we&#39;ve confirmed the key can be used live for SSH or SSL &lt;a href=&#34;https://trufflesecurity.com/blog/driftwood-know-if-private-keys-are-sensitive/&#34;&gt;Blog post&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Is there an easy way to ignore specific secrets? &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;If the scanned source &lt;a href=&#34;https://github.com/trufflesecurity/trufflehog/raw/d6375ba92172fd830abb4247cca15e3176448c5d/pkg/engine/engine.go#L358-L365&#34;&gt;supports line numbers&lt;/a&gt;, then you can add a &lt;code&gt;trufflehog:ignore&lt;/code&gt; comment on the line containing the secret to ignore that secrets.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;&lt;span&gt;üì∞&lt;/span&gt; What&#39;s new in v3?&lt;/h1&gt; &#xA;&lt;p&gt;TruffleHog v3 is a complete rewrite in Go with many new powerful features.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;We&#39;ve &lt;strong&gt;added over 700 credential detectors that support active verification against their respective APIs&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;We&#39;ve also added native &lt;strong&gt;support for scanning GitHub, GitLab, Docker, filesystems, S3, GCS, Circle CI and Travis CI&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Instantly verify private keys&lt;/strong&gt; against millions of github users and &lt;strong&gt;billions&lt;/strong&gt; of TLS certificates using our &lt;a href=&#34;https://trufflesecurity.com/blog/driftwood&#34;&gt;Driftwood&lt;/a&gt; technology.&lt;/li&gt; &#xA; &lt;li&gt;Scan binaries, documents, and other file formats&lt;/li&gt; &#xA; &lt;li&gt;Available as a GitHub Action and a pre-commit hook&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;What is credential verification?&lt;/h2&gt; &#xA;&lt;p&gt;For every potential credential that is detected, we&#39;ve painstakingly implemented programmatic verification against the API that we think it belongs to. Verification eliminates false positives. For example, the &lt;a href=&#34;https://raw.githubusercontent.com/trufflesecurity/trufflehog/main/pkg/detectors/aws/aws.go&#34;&gt;AWS credential detector&lt;/a&gt; performs a &lt;code&gt;GetCallerIdentity&lt;/code&gt; API call against the AWS API to verify if an AWS credential is active.&lt;/p&gt; &#xA;&lt;h1&gt;&lt;span&gt;üìù&lt;/span&gt; Usage&lt;/h1&gt; &#xA;&lt;p&gt;TruffleHog has a sub-command for each source of data that you may want to scan:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;git&lt;/li&gt; &#xA; &lt;li&gt;github&lt;/li&gt; &#xA; &lt;li&gt;gitlab&lt;/li&gt; &#xA; &lt;li&gt;docker&lt;/li&gt; &#xA; &lt;li&gt;s3&lt;/li&gt; &#xA; &lt;li&gt;filesystem (files and directories)&lt;/li&gt; &#xA; &lt;li&gt;syslog&lt;/li&gt; &#xA; &lt;li&gt;circleci&lt;/li&gt; &#xA; &lt;li&gt;travisci&lt;/li&gt; &#xA; &lt;li&gt;gcs (Google Cloud Storage)&lt;/li&gt; &#xA; &lt;li&gt;postman&lt;/li&gt; &#xA; &lt;li&gt;jenkins&lt;/li&gt; &#xA; &lt;li&gt;elasticsearch&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Each subcommand can have options that you can see with the &lt;code&gt;--help&lt;/code&gt; flag provided to the sub command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ trufflehog git --help&#xA;usage: TruffleHog git [&amp;lt;flags&amp;gt;] &amp;lt;uri&amp;gt;&#xA;&#xA;Find credentials in git repositories.&#xA;&#xA;Flags:&#xA;  -h, --help                Show context-sensitive help (also try --help-long and --help-man).&#xA;      --debug               Run in debug mode.&#xA;      --trace               Run in trace mode.&#xA;      --profile             Enables profiling and sets a pprof and fgprof server on :18066.&#xA;  -j, --json                Output in JSON format.&#xA;      --json-legacy         Use the pre-v3.0 JSON format. Only works with git, gitlab, and github sources.&#xA;      --github-actions      Output in GitHub Actions format.&#xA;      --concurrency=20           Number of concurrent workers.&#xA;      --no-verification     Don&#39;t verify the results.&#xA;      --only-verified       Only output verified results.&#xA;      --allow-verification-overlap&#xA;                                 Allow verification of similar credentials across detectors&#xA;      --filter-unverified   Only output first unverified result per chunk per detector if there are more than one results.&#xA;      --filter-entropy=FILTER-ENTROPY&#xA;                                 Filter unverified results with Shannon entropy. Start with 3.0.&#xA;      --config=CONFIG            Path to configuration file.&#xA;      --print-avg-detector-time&#xA;                                 Print the average time spent on each detector.&#xA;      --no-update           Don&#39;t check for updates.&#xA;      --fail                Exit with code 183 if results are found.&#xA;      --verifier=VERIFIER ...    Set custom verification endpoints.&#xA;      --custom-verifiers-only   Only use custom verification endpoints.&#xA;      --archive-max-size=ARCHIVE-MAX-SIZE&#xA;                                 Maximum size of archive to scan. (Byte units eg. 512B, 2KB, 4MB)&#xA;      --archive-max-depth=ARCHIVE-MAX-DEPTH&#xA;                                 Maximum depth of archive to scan.&#xA;      --archive-timeout=ARCHIVE-TIMEOUT&#xA;                                 Maximum time to spend extracting an archive.&#xA;      --include-detectors=&#34;all&#34;  Comma separated list of detector types to include. Protobuf name or IDs may be used, as well as ranges.&#xA;      --exclude-detectors=EXCLUDE-DETECTORS&#xA;                                 Comma separated list of detector types to exclude. Protobuf name or IDs may be used, as well as ranges. IDs defined here take precedence over the include list.&#xA;      --version             Show application version.&#xA;  -i, --include-paths=INCLUDE-PATHS&#xA;                                 Path to file with newline separated regexes for files to include in scan.&#xA;  -x, --exclude-paths=EXCLUDE-PATHS&#xA;                                 Path to file with newline separated regexes for files to exclude in scan.&#xA;      --exclude-globs=EXCLUDE-GLOBS&#xA;                                 Comma separated list of globs to exclude in scan. This option filters at the `git log` level, resulting in faster scans.&#xA;      --since-commit=SINCE-COMMIT&#xA;                                 Commit to start scan from.&#xA;      --branch=BRANCH            Branch to scan.&#xA;      --max-depth=MAX-DEPTH      Maximum depth of commits to scan.&#xA;      --bare                Scan bare repository (e.g. useful while using in pre-receive hooks)&#xA;&#xA;Args:&#xA;  &amp;lt;uri&amp;gt;  Git repository URL. https://, file://, or ssh:// schema expected.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For example, to scan a &lt;code&gt;git&lt;/code&gt; repository, start with&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;trufflehog git https://github.com/trufflesecurity/trufflehog.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;S3&lt;/h2&gt; &#xA;&lt;p&gt;The S3 source supports assuming IAM roles for scanning in addition to IAM users. This makes it easier for users to scan multiple AWS accounts without needing to rely on hardcoded credentials for each account.&lt;/p&gt; &#xA;&lt;p&gt;The IAM identity that TruffleHog uses initially will need to have &lt;code&gt;AssumeRole&lt;/code&gt; privileges as a principal in the &lt;a href=&#34;https://aws.amazon.com/blogs/security/how-to-use-trust-policies-with-iam-roles/&#34;&gt;trust policy&lt;/a&gt; of each IAM role to assume.&lt;/p&gt; &#xA;&lt;p&gt;To scan a specific bucket using locally set credentials or instance metadata if on an EC2 instance:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;trufflehog s3 --bucket=&amp;lt;bucket-name&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To scan a specific bucket using an assumed role:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;trufflehog s3 --bucket=&amp;lt;bucket-name&amp;gt; --role-arn=&amp;lt;iam-role-arn&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Multiple roles can be passed as separate arguments. The following command will attempt to scan every bucket each role has permissions to list in the S3 API:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;trufflehog s3 --role-arn=&amp;lt;iam-role-arn-1&amp;gt; --role-arn=&amp;lt;iam-role-arn-2&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Exit Codes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;0: No errors and no results were found.&lt;/li&gt; &#xA; &lt;li&gt;1: An error was encountered. Sources may not have completed scans.&lt;/li&gt; &#xA; &lt;li&gt;183: No errors were encountered, but results were found. Will only be returned if &lt;code&gt;--fail&lt;/code&gt; flag is used.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;img alt=&#34;octocat&#34; src=&#34;https://github.githubassets.com/images/icons/emoji/octocat.png?v8&#34;&gt;) TruffleHog Github Action&lt;/h2&gt; &#xA;&lt;h3&gt;General Usage&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;on:&#xA;  push:&#xA;    branches:&#xA;      - main&#xA;  pull_request:&#xA;&#xA;jobs:&#xA;  test:&#xA;    runs-on: ubuntu-latest&#xA;    steps:&#xA;    - name: Checkout code&#xA;      uses: actions/checkout@v4&#xA;      with:&#xA;        fetch-depth: 0&#xA;    - name: Secret Scanning&#xA;      uses: trufflesecurity/trufflehog@main&#xA;      with:&#xA;        extra_args: --only-verified&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In the example config above, we&#39;re scanning for live secrets in all PRs and Pushes to &lt;code&gt;main&lt;/code&gt;. Only code changes in the referenced commits are scanned. If you&#39;d like to scan an entire branch, please see the &#34;Advanced Usage&#34; section below.&lt;/p&gt; &#xA;&lt;h3&gt;Shallow Cloning&lt;/h3&gt; &#xA;&lt;p&gt;If you&#39;re incorporating TruffleHog into a standalone workflow and aren&#39;t running any other CI/CD tooling alongside TruffleHog, then we recommend using &lt;a href=&#34;https://git-scm.com/docs/git-clone#Documentation/git-clone.txt---depthltdepthgt&#34;&gt;Shallow Cloning&lt;/a&gt; to speed up your workflow. Here&#39;s an example for how to do it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;...&#xA;      - shell: bash&#xA;        run: |&#xA;          if [ &#34;${{ github.event_name }}&#34; == &#34;push&#34; ]; then&#xA;            echo &#34;depth=$(($(jq length &amp;lt;&amp;lt;&amp;lt; &#39;${{ toJson(github.event.commits) }}&#39;) + 2))&#34; &amp;gt;&amp;gt; $GITHUB_ENV&#xA;            echo &#34;branch=${{ github.ref_name }}&#34; &amp;gt;&amp;gt; $GITHUB_ENV&#xA;          fi&#xA;          if [ &#34;${{ github.event_name }}&#34; == &#34;pull_request&#34; ]; then&#xA;            echo &#34;depth=$((${{ github.event.pull_request.commits }}+2))&#34; &amp;gt;&amp;gt; $GITHUB_ENV&#xA;            echo &#34;branch=${{ github.event.pull_request.head.ref }}&#34; &amp;gt;&amp;gt; $GITHUB_ENV&#xA;          fi&#xA;      - uses: actions/checkout@v3&#xA;        with:&#xA;          ref: ${{env.branch}}&#xA;          fetch-depth: ${{env.depth}}&#xA;      - uses: trufflesecurity/trufflehog@main&#xA;        with:&#xA;          extra_args: --only-verified&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Depending on the event type (push or PR), we calculate the number of commits present. Then we add 2, so that we can reference a base commit before our code changes. We pass that integer value to the &lt;code&gt;fetch-depth&lt;/code&gt; flag in the checkout action in addition to the relevant branch. Now our checkout process should be much shorter.&lt;/p&gt; &#xA;&lt;h3&gt;Canary detection&lt;/h3&gt; &#xA;&lt;p&gt;TruffleHog statically detects &lt;a href=&#34;https://canarytokens.org/&#34;&gt;https://canarytokens.org/&lt;/a&gt; and lets you know when they&#39;re present without setting them off. You can learn more here: &lt;a href=&#34;https://trufflesecurity.com/canaries&#34;&gt;https://trufflesecurity.com/canaries&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/trufflesecurity/trufflehog/assets/52866392/74ace530-08c5-4eaf-a169-84a73e328f6f&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Advanced Usage&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;- name: TruffleHog&#xA;  uses: trufflesecurity/trufflehog@main&#xA;  with:&#xA;    # Repository path&#xA;    path:&#xA;    # Start scanning from here (usually main branch).&#xA;    base:&#xA;    # Scan commits until here (usually dev branch).&#xA;    head: # optional&#xA;    # Extra args to be passed to the trufflehog cli.&#xA;    extra_args: --debug --only-verified&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you&#39;d like to specify specific &lt;code&gt;base&lt;/code&gt; and &lt;code&gt;head&lt;/code&gt; refs, you can use the &lt;code&gt;base&lt;/code&gt; argument (&lt;code&gt;--since-commit&lt;/code&gt; flag in TruffleHog CLI) and the &lt;code&gt;head&lt;/code&gt; argument (&lt;code&gt;--branch&lt;/code&gt; flag in the TruffleHog CLI). We only recommend using these arguments for very specific use cases, where the default behavior does not work.&lt;/p&gt; &#xA;&lt;h4&gt;Advanced Usage: Scan entire branch&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;- name: scan-push&#xA;        uses: trufflesecurity/trufflehog@main&#xA;        with:&#xA;          base: &#34;&#34;&#xA;          head: ${{ github.ref_name }}&#xA;          extra_args: --only-verified&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;TruffleHog GitLab CI&lt;/h2&gt; &#xA;&lt;h3&gt;Example Usage&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;stages:&#xA;  - security&#xA;&#xA;security-secrets:&#xA;  stage: security&#xA;  allow_failure: false&#xA;  image: alpine:latest&#xA;  variables:&#xA;    SCAN_PATH: &#34;.&#34; # Set the relative path in the repo to scan&#xA;  before_script:&#xA;    - apk add --no-cache git curl jq&#xA;    - curl -sSfL https://raw.githubusercontent.com/trufflesecurity/trufflehog/main/scripts/install.sh | sh -s -- -b /usr/local/bin&#xA;  script:&#xA;    - trufflehog filesystem &#34;$SCAN_PATH&#34; --only-verified --fail --json | jq&#xA;  rules:&#xA;    - if: &#39;$CI_PIPELINE_SOURCE == &#34;merge_request_event&#34;&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In the example pipeline above, we&#39;re scanning for live secrets in all repository directories and files. This job runs only when the pipeline source is a merge request event, meaning it&#39;s triggered when a new merge request is created.&lt;/p&gt; &#xA;&lt;h2&gt;Pre-commit Hook&lt;/h2&gt; &#xA;&lt;p&gt;TruffleHog can be used in a pre-commit hook to prevent credentials from leaking before they ever leave your computer.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Key Usage Note:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;For optimal hook efficacy, execute &lt;code&gt;git add&lt;/code&gt; followed by &lt;code&gt;git commit&lt;/code&gt; separately.&lt;/strong&gt; This ensures TruffleHog analyzes all intended changes.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Avoid using &lt;code&gt;git commit -am&lt;/code&gt;, as it might bypass pre-commit hook execution for unstaged modifications.&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;An example &lt;code&gt;.pre-commit-config.yaml&lt;/code&gt; is provided (see &lt;a href=&#34;https://pre-commit.com/&#34;&gt;pre-commit.com&lt;/a&gt; for installation).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;repos:&#xA;  - repo: local&#xA;    hooks:&#xA;      - id: trufflehog&#xA;        name: TruffleHog&#xA;        description: Detect secrets in your data.&#xA;        entry: bash -c &#39;trufflehog git file://. --since-commit HEAD --only-verified --fail&#39;&#xA;        # For running trufflehog in docker, use the following entry instead:&#xA;        # entry: bash -c &#39;docker run --rm -v &#34;$(pwd):/workdir&#34; -i --rm trufflesecurity/trufflehog:latest git file:///workdir --since-commit HEAD --only-verified --fail&#39;&#xA;        language: system&#xA;        stages: [&#34;commit&#34;, &#34;push&#34;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Regex Detector (alpha)&lt;/h2&gt; &#xA;&lt;p&gt;TruffleHog supports detection and verification of custom regular expressions. For detection, at least one &lt;strong&gt;regular expression&lt;/strong&gt; and &lt;strong&gt;keyword&lt;/strong&gt; is required. A &lt;strong&gt;keyword&lt;/strong&gt; is a fixed literal string identifier that appears in or around the regex to be detected. To allow maximum flexibility for verification, a webhook is used containing the regular expression matches.&lt;/p&gt; &#xA;&lt;p&gt;TruffleHog will send a JSON POST request containing the regex matches to a configured webhook endpoint. If the endpoint responds with a &lt;code&gt;200 OK&lt;/code&gt; response status code, the secret is considered verified.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;NB:&lt;/strong&gt; This feature is alpha and subject to change.&lt;/p&gt; &#xA;&lt;h2&gt;Regex Detector Example&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;# config.yaml&#xA;detectors:&#xA;  - name: HogTokenDetector&#xA;    keywords:&#xA;      - hog&#xA;    regex:&#xA;      hogID: &#39;\b(HOG[0-9A-Z]{17})\b&#39;&#xA;      hogToken: &#39;[^A-Za-z0-9+\/]{0,1}([A-Za-z0-9+\/]{40})[^A-Za-z0-9+\/]{0,1}&#39;&#xA;    verify:&#xA;      - endpoint: http://localhost:8000/&#xA;        # unsafe must be set if the endpoint is HTTP&#xA;        unsafe: true&#xA;        headers:&#xA;          - &#34;Authorization: super secret authorization header&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ trufflehog filesystem /tmp --config config.yaml --only-verified&#xA;üê∑üîëüê∑  TruffleHog. Unearth your secrets. üê∑üîëüê∑&#xA;&#xA;Found verified result üê∑üîë&#xA;Detector Type: CustomRegex&#xA;Decoder Type: PLAIN&#xA;Raw result: HOGAAIUNNWHAHJJWUQYR&#xA;File: /tmp/hog-facts.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Data structure sent to the custom verification server:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;{&#xA;    &#34;HogTokenDetector&#34;: {&#xA;        &#34;HogID&#34;: [&#34;HOGAAIUNNWHAHJJWUQYR&#34;],&#xA;        &#34;HogSecret&#34;: [&#34;sD9vzqdSsAOxntjAJ/qZ9sw+8PvEYg0r7D1Hhh0C&#34;],&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Verification Server Example (Python)&lt;/h2&gt; &#xA;&lt;p&gt;Unless you run a verification server, secrets found by the custom regex detector will be unverified. Here is an example Python implementation of a verification server for the above &lt;code&gt;config.yaml&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import json&#xA;from http.server import BaseHTTPRequestHandler, HTTPServer&#xA;&#xA;AUTH_HEADER = &#39;super secret authorization header&#39;&#xA;&#xA;&#xA;class Verifier(BaseHTTPRequestHandler):&#xA;    def do_GET(self):&#xA;        self.send_response(405)&#xA;        self.end_headers()&#xA;&#xA;    def do_POST(self):&#xA;        try:&#xA;            if self.headers[&#39;Authorization&#39;] != AUTH_HEADER:&#xA;                self.send_response(401)&#xA;                self.end_headers()&#xA;                return&#xA;&#xA;            # read the body&#xA;            length = int(self.headers[&#39;Content-Length&#39;])&#xA;            request = json.loads(self.rfile.read(length))&#xA;            self.log_message(&#34;%s&#34;, request)&#xA;&#xA;            # check the match, you&#39;ll need to implement validateToken, which takes an array of ID&#39;s and Secrets&#xA;            if not validateTokens(request[&#39;HogTokenDetector&#39;][&#39;hogID&#39;], request[&#39;HogTokenDetector&#39;][&#39;hogSecret&#39;]):&#xA;                self.send_response(200)&#xA;                self.end_headers()&#xA;            else:&#xA;                # any other response besides 200&#xA;                self.send_response(406)&#xA;                self.end_headers()&#xA;        except Exception:&#xA;            self.send_response(400)&#xA;            self.end_headers()&#xA;&#xA;&#xA;with HTTPServer((&#39;&#39;, 8000), Verifier) as server:&#xA;    try:&#xA;        server.serve_forever()&#xA;    except KeyboardInterrupt:&#xA;        pass&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;&lt;span&gt;‚ù§Ô∏è&lt;/span&gt; Contributors&lt;/h1&gt; &#xA;&lt;p&gt;This project exists thanks to all the people who contribute. [&lt;a href=&#34;https://raw.githubusercontent.com/trufflesecurity/trufflehog/main/CONTRIBUTING.md&#34;&gt;Contribute&lt;/a&gt;].&lt;/p&gt; &#xA;&lt;a href=&#34;https://github.com/trufflesecurity/trufflehog/graphs/contributors&#34;&gt; &lt;img src=&#34;https://contrib.rocks/image?repo=trufflesecurity/trufflehog&#34;&gt; &lt;/a&gt; &#xA;&lt;h1&gt;&lt;span&gt;üíª&lt;/span&gt; Contributing&lt;/h1&gt; &#xA;&lt;p&gt;Contributions are very welcome! Please see our &lt;a href=&#34;https://raw.githubusercontent.com/trufflesecurity/trufflehog/main/CONTRIBUTING.md&#34;&gt;contribution guidelines first&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;We no longer accept contributions to TruffleHog v2, but that code is available in the &lt;code&gt;v2&lt;/code&gt; branch.&lt;/p&gt; &#xA;&lt;h2&gt;Adding new secret detectors&lt;/h2&gt; &#xA;&lt;p&gt;We have published some &lt;a href=&#34;https://raw.githubusercontent.com/trufflesecurity/trufflehog/main/hack/docs/Adding_Detectors_external.md&#34;&gt;documentation and tooling to get started on adding new secret detectors&lt;/a&gt;. Let&#39;s improve detection together!&lt;/p&gt; &#xA;&lt;h1&gt;Use as a library&lt;/h1&gt; &#xA;&lt;p&gt;Currently, trufflehog is in heavy development and no guarantees can be made on the stability of the public APIs at this time.&lt;/p&gt; &#xA;&lt;h1&gt;License Change&lt;/h1&gt; &#xA;&lt;p&gt;Since v3.0, TruffleHog is released under a AGPL 3 license, included in &lt;a href=&#34;https://raw.githubusercontent.com/trufflesecurity/trufflehog/main/LICENSE&#34;&gt;&lt;code&gt;LICENSE&lt;/code&gt;&lt;/a&gt;. TruffleHog v3.0 uses none of the previous codebase, but care was taken to preserve backwards compatibility on the command line interface. The work previous to this release is still available licensed under GPL 2.0 in the history of this repository and the previous package releases and tags. A completed CLA is required for us to accept contributions going forward.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>gruntwork-io/terragrunt</title>
    <updated>2024-07-28T01:38:13Z</updated>
    <id>tag:github.com,2024-07-28:/gruntwork-io/terragrunt</id>
    <link href="https://github.com/gruntwork-io/terragrunt" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Terragrunt is a flexible orchestration tool that allows Infrastructure as Code written in OpenTofu/Terraform to scale.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Terragrunt&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gruntwork.io/?ref=repo_terragrunt&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/maintained%20by-gruntwork.io-%235849a6.svg?sanitize=true&#34; alt=&#34;Maintained by Gruntwork.io&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/gruntwork-io/terragrunt&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/gruntwork-io/terragrunt&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://godoc.org/github.com/gruntwork-io/terragrunt&#34;&gt;&lt;img src=&#34;https://godoc.org/github.com/gruntwork-io/terragrunt?status.svg?sanitize=true&#34; alt=&#34;GoDoc&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/badge/tofu-%3E%3D1.6.0-blue.svg?sanitize=true&#34; alt=&#34;OpenTofu Version&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/tf-%3E%3D0.12.0-blue.svg?sanitize=true&#34; alt=&#34;Terraform Version&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Terragrunt is a flexible orchestration tool that allows Infrastructure as Code written in &lt;a href=&#34;https://opentofu.org&#34;&gt;OpenTofu&lt;/a&gt;/&lt;a href=&#34;https://www.terraform.io&#34;&gt;Terraform&lt;/a&gt; to scale.&lt;/p&gt; &#xA;&lt;p&gt;Please see the following for more info, including install instructions and complete documentation:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://terragrunt.gruntwork.io&#34;&gt;Terragrunt Website&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://terragrunt.gruntwork.io/docs/getting-started/quick-start/&#34;&gt;Getting started with Terragrunt&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://terragrunt.gruntwork.io/docs&#34;&gt;Terragrunt Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://terragrunt.gruntwork.io/docs/community/contributing&#34;&gt;Contributing to Terragrunt&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gruntwork.io/support/&#34;&gt;Commercial Support&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This code is released under the MIT License. See &lt;a href=&#34;https://raw.githubusercontent.com/gruntwork-io/terragrunt/master/LICENSE.txt&#34;&gt;LICENSE.txt&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>siderolabs/talos</title>
    <updated>2024-07-28T01:38:13Z</updated>
    <id>tag:github.com,2024-07-28:/siderolabs/talos</id>
    <link href="https://github.com/siderolabs/talos" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Talos Linux is a modern Linux distribution built for Kubernetes.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;/p&gt;&#xA;&lt;h1 align=&#34;center&#34;&gt;Talos Linux&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt;A modern OS for Kubernetes.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/talos-systems/talos/releases/latest&#34;&gt; &lt;img alt=&#34;Release&#34; src=&#34;https://img.shields.io/github/release/talos-systems/talos.svg?logo=github&amp;amp;logoColor=white&amp;amp;style=flat-square&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/talos-systems/talos/releases/latest&#34;&gt; &lt;img alt=&#34;Pre-release&#34; src=&#34;https://img.shields.io/github/release-pre/talos-systems/talos.svg?label=pre-release&amp;amp;logo=GitHub&amp;amp;logoColor=white&amp;amp;style=flat-square&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;strong&gt;Talos&lt;/strong&gt; is a modern OS for running Kubernetes: secure, immutable, and minimal. Talos is fully open source, production-ready, and supported by the people at &lt;a href=&#34;https://www.SideroLabs.com/&#34;&gt;Sidero Labs&lt;/a&gt; All system management is done via an API - there is no shell or interactive console. Benefits include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Security&lt;/strong&gt;: Talos reduces your attack surface: It&#39;s minimal, hardened, and immutable. All API access is secured with mutual TLS (mTLS) authentication.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Predictability&lt;/strong&gt;: Talos eliminates configuration drift, reduces unknown factors by employing immutable infrastructure ideology, and delivers atomic updates.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Evolvability&lt;/strong&gt;: Talos simplifies your architecture, increases your agility, and always delivers current stable Kubernetes and Linux versions.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;For instructions on deploying and managing Talos, see the &lt;a href=&#34;https://www.talos.dev/docs/latest/&#34;&gt;Documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Community&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Slack: Join our &lt;a href=&#34;https://slack.dev.talos-systems.io&#34;&gt;slack channel&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Support: Questions, bugs, feature requests &lt;a href=&#34;https://github.com/talos-systems/talos/discussions&#34;&gt;GitHub Discussions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Forum: &lt;a href=&#34;https://groups.google.com/a/SideroLabs.com/forum/#!forum/community&#34;&gt;community&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Twitter: &lt;a href=&#34;https://twitter.com/SideroLabs&#34;&gt;@SideroLabs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Email: &lt;a href=&#34;mailto:info@SideroLabs.com&#34;&gt;info@SideroLabs.com&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you&#39;re interested in this project and would like to help in engineering efforts or have general usage questions, we are happy to have you! We hold a weekly meeting that all audiences are welcome to attend.&lt;/p&gt; &#xA;&lt;p&gt;We would appreciate your feedback so that we can make Talos even better! To do so, you can take our &lt;a href=&#34;https://docs.google.com/forms/d/1TUna5YTYGCKot68Y9YN_CLobY6z9JzLVCq1G7DoyNjA/edit&#34;&gt;survey&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Office Hours&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;When: Second Monday of every month at 16:30 UTC.&lt;/li&gt; &#xA; &lt;li&gt;Where: &lt;a href=&#34;https://meet.google.com/ivb-kjfm-jfc&#34;&gt;Google Meet&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can subscribe to this meeting by joining the community forum above.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note: You can convert the meeting hours to your &lt;a href=&#34;https://everytimezone.com/s/599e61d6&#34;&gt;local time&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Contributions are welcomed and appreciated! See &lt;a href=&#34;https://raw.githubusercontent.com/siderolabs/talos/main/CONTRIBUTING.md&#34;&gt;Contributing&lt;/a&gt; for our guidelines.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;a href=&#34;https://github.com/talos-systems/talos/raw/master/LICENSE&#34;&gt; &lt;img alt=&#34;GitHub&#34; src=&#34;https://img.shields.io/github/license/talos-systems/talos?style=flat-square&#34;&gt; &lt;/a&gt; &#xA;&lt;p&gt;Some software we distribute is under the General Public License family of licenses or other licenses that require we provide you with the source code. If you would like a copy of the source code for this software, please contact us via email: info at SideroLabs.com.&lt;/p&gt;</summary>
  </entry>
</feed>