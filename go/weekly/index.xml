<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-03-26T01:53:22Z</updated>
  <subtitle>Weekly Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>acheong08/ChatGPT-Proxy-V4</title>
    <updated>2023-03-26T01:53:22Z</updated>
    <id>tag:github.com,2023-03-26:/acheong08/ChatGPT-Proxy-V4</id>
    <link href="https://github.com/acheong08/ChatGPT-Proxy-V4" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Cloudflare Bypass for OpenAI based on `puid`&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ChatGPT-Proxy-V4&lt;/h1&gt; &#xA;&lt;p&gt;Cloudflare Bypass for OpenAI based on &lt;code&gt;puid&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ChatGPT plus account&lt;/li&gt; &#xA; &lt;li&gt;Access to chat.openai.com&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;go install github.com/acheong08/ChatGPT-Proxy-V4@latest&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Environment variables&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;ACCESS_TOKEN&lt;/code&gt; - For automatic refresh of &lt;code&gt;_puid&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;PUID&lt;/code&gt; - Preset &lt;code&gt;_puid&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Choose one or both.&lt;/p&gt; &#xA;&lt;h3&gt;Running&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;ChatGPT-Proxy-V4&lt;/code&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>eryajf/chatgpt-dingtalk</title>
    <updated>2023-03-26T01:53:22Z</updated>
    <id>tag:github.com,2023-03-26:/eryajf/chatgpt-dingtalk</id>
    <link href="https://github.com/eryajf/chatgpt-dingtalk" rel="alternate"></link>
    <summary type="html">&lt;p&gt;🔔 钉钉 &amp; 🤖 GPT-3.5 让你的工作效率直接起飞 🚀 私聊群聊方式、单聊串聊模式、角色扮演、图片创作 🚀&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h1&gt;ChatGPT Dingtalk&lt;/h1&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/eryajf&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Auth-eryajf-ff69b4&#34; alt=&#34;Auth&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/eryajf/chatgpt-dingtalk&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/go-mod/go-version/eryajf/chatgpt-dingtalk&#34; alt=&#34;Go Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/eryajf/chatgpt-dingtalk/pulls&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/issues-pr/eryajf/chatgpt-dingtalk&#34; alt=&#34;GitHub Pull Requests&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/eryajf/chatgpt-dingtalk/stargazers&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/eryajf/chatgpt-dingtalk&#34; alt=&#34;GitHub Pull Requests&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/eryajf/chatgpt-dingtalk&#34;&gt;&lt;img src=&#34;https://views.whatilearened.today/views/github/eryajf/chatgpt-dingtalk.svg?sanitize=true&#34; alt=&#34;HitCount&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/eryajf/chatgpt-dingtalk&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/image-size/eryajf/chatgpt-dingtalk&#34; alt=&#34;Docker Image Size (latest by date)&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/eryajf/chatgpt-dingtalk&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/pulls/eryajf/chatgpt-dingtalk&#34; alt=&#34;Docker Pulls&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/eryajf/chatgpt-dingtalk/raw/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/eryajf/chatgpt-dingtalk&#34; alt=&#34;GitHub license&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt; 🌉 基于GO语言实现的钉钉集成ChatGPT机器人 🌉&lt;/p&gt; &#xA; &lt;img src=&#34;https://camo.githubusercontent.com/82291b0fe831bfc6781e07fc5090cbd0a8b912bb8b8d4fec0696c881834f81ac/68747470733a2f2f70726f626f742e6d656469612f394575424971676170492e676966&#34; width=&#34;800&#34; height=&#34;3&#34;&gt; &#xA;&lt;/div&gt;&#xA;&lt;br&gt; &#xA;&lt;!-- START doctoc generated TOC please keep comment here to allow auto update --&gt; &#xA;&lt;!-- DON&#39;T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE --&gt; &#xA;&lt;p&gt;&lt;strong&gt;目录&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/eryajf/chatgpt-dingtalk/main/#%E5%89%8D%E8%A8%80&#34;&gt;前言&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/eryajf/chatgpt-dingtalk/main/#%E5%8A%9F%E8%83%BD%E4%BB%8B%E7%BB%8D&#34;&gt;功能介绍&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/eryajf/chatgpt-dingtalk/main/#%E4%BD%BF%E7%94%A8%E5%89%8D%E6%8F%90&#34;&gt;使用前提&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/eryajf/chatgpt-dingtalk/main/#%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B&#34;&gt;使用教程&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/eryajf/chatgpt-dingtalk/main/#%E7%AC%AC%E4%B8%80%E6%AD%A5%E5%88%9B%E5%BB%BA%E6%9C%BA%E5%99%A8%E4%BA%BA&#34;&gt;第一步，创建机器人&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/eryajf/chatgpt-dingtalk/main/#%E6%96%B9%E6%A1%88%E4%B8%80outgoing%E7%B1%BB%E5%9E%8B%E6%9C%BA%E5%99%A8%E4%BA%BA&#34;&gt;方案一：outgoing类型机器人&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/eryajf/chatgpt-dingtalk/main/#%E6%96%B9%E6%A1%88%E4%BA%8C%E4%BC%81%E4%B8%9A%E5%86%85%E9%83%A8%E5%BA%94%E7%94%A8&#34;&gt;方案二：企业内部应用&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/eryajf/chatgpt-dingtalk/main/#%E7%AC%AC%E4%BA%8C%E6%AD%A5%E9%83%A8%E7%BD%B2%E5%BA%94%E7%94%A8&#34;&gt;第二步，部署应用&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/eryajf/chatgpt-dingtalk/main/#docker%E9%83%A8%E7%BD%B2&#34;&gt;docker部署&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/eryajf/chatgpt-dingtalk/main/#%E4%BA%8C%E8%BF%9B%E5%88%B6%E9%83%A8%E7%BD%B2&#34;&gt;二进制部署&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/eryajf/chatgpt-dingtalk/main/#%E4%BA%AE%E7%82%B9%E7%89%B9%E8%89%B2&#34;&gt;亮点特色&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/eryajf/chatgpt-dingtalk/main/#%E4%B8%8E%E6%9C%BA%E5%99%A8%E4%BA%BA%E7%A7%81%E8%81%8A&#34;&gt;与机器人私聊&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/eryajf/chatgpt-dingtalk/main/#%E5%B8%AE%E5%8A%A9%E5%88%97%E8%A1%A8&#34;&gt;帮助列表&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/eryajf/chatgpt-dingtalk/main/#%E5%88%87%E6%8D%A2%E6%A8%A1%E5%BC%8F&#34;&gt;切换模式&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/eryajf/chatgpt-dingtalk/main/#%E6%9F%A5%E8%AF%A2%E4%BD%99%E9%A2%9D&#34;&gt;查询余额&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/eryajf/chatgpt-dingtalk/main/#%E6%97%A5%E5%B8%B8%E9%97%AE%E9%A2%98&#34;&gt;日常问题&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/eryajf/chatgpt-dingtalk/main/#%E9%80%9A%E8%BF%87%E5%86%85%E7%BD%AEprompt%E8%81%8A%E5%A4%A9&#34;&gt;通过内置prompt聊天&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/eryajf/chatgpt-dingtalk/main/#%E7%94%9F%E6%88%90%E5%9B%BE%E7%89%87&#34;&gt;生成图片&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/eryajf/chatgpt-dingtalk/main/#%E6%9C%AC%E5%9C%B0%E5%BC%80%E5%8F%91&#34;&gt;本地开发&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/eryajf/chatgpt-dingtalk/main/#%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%AF%B4%E6%98%8E&#34;&gt;配置文件说明&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/eryajf/chatgpt-dingtalk/main/#%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98&#34;&gt;常见问题&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/eryajf/chatgpt-dingtalk/main/#%E9%AB%98%E5%85%89%E6%97%B6%E5%88%BB&#34;&gt;高光时刻&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/eryajf/chatgpt-dingtalk/main/#%E6%84%9F%E8%B0%A2&#34;&gt;感谢&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/eryajf/chatgpt-dingtalk/main/#%E8%B5%9E%E8%B5%8F&#34;&gt;赞赏&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- END doctoc generated TOC please keep comment here to allow auto update --&gt; &#xA;&lt;h2&gt;前言&lt;/h2&gt; &#xA;&lt;p&gt;本项目可以助你将GPT机器人集成到钉钉群聊当中。当前默认模型为 gpt-3.5。&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;🥳 &lt;strong&gt;欢迎关注我的其他开源项目：&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/eryajf/go-ldap-admin&#34;&gt;Go-Ldap-Admin&lt;/a&gt;：🌉 基于Go+Vue实现的openLDAP后台管理项目。&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/eryajf/learning-weekly&#34;&gt;learning-weekly&lt;/a&gt;：📝 周刊内容以运维技术和Go语言周边为主，辅以GitHub上优秀项目或他人优秀经验。&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/eryajf/HowToStartOpenSource&#34;&gt;HowToStartOpenSource&lt;/a&gt;：🌈 GitHub开源项目维护协同指南。&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/eryajf/read-list&#34;&gt;read-list&lt;/a&gt;：📖 优质内容订阅，阅读方为根本&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/eryajf/awesome-github-profile-readme-chinese&#34;&gt;awesome-github-profile-readme-chinese&lt;/a&gt;：🦩 优秀的中文区个人主页搜集&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;🚜 我还创建了一个项目&lt;a href=&#34;https://github.com/eryajf/awesome-chatgpt-answer&#34;&gt;awesome-chatgpt-answer&lt;/a&gt;：记录那些问得好，答得妙的时刻，欢迎提交你与ChatGPT交互过程中遇到的那些精妙对话。&lt;/p&gt; &#xA;&lt;p&gt;⚗️ openai官方提供了一个&lt;a href=&#34;https://status.openai.com/&#34;&gt;状态页&lt;/a&gt;来呈现当前openAI服务的状态，同时如果有问题发布公告也会在这个页面，如果你感觉它有问题了，可以在这个页面看看。&lt;/p&gt; &#xA;&lt;h2&gt;功能介绍&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;🚀 帮助菜单：通过发送 &lt;code&gt;帮助&lt;/code&gt; 将看到帮助列表，&lt;a href=&#34;https://raw.githubusercontent.com/eryajf/chatgpt-dingtalk/main/#%E5%B8%AE%E5%8A%A9%E5%88%97%E8%A1%A8&#34;&gt;🖼 查看示例&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🥷 私聊：支持与机器人单独私聊(无需艾特)，&lt;a href=&#34;https://raw.githubusercontent.com/eryajf/chatgpt-dingtalk/main/#%E4%B8%8E%E6%9C%BA%E5%99%A8%E4%BA%BA%E7%A7%81%E8%81%8A&#34;&gt;🖼 查看示例&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;💬 群聊：支持在群里艾特机器人进行对话&lt;/li&gt; &#xA; &lt;li&gt;🙋 单聊模式：每次对话都是一次新的对话，没有历史聊天上下文联系&lt;/li&gt; &#xA; &lt;li&gt;🗣 串聊模式：带上下文理解的对话模式&lt;/li&gt; &#xA; &lt;li&gt;🎨 图片生成：通过发送 &lt;code&gt;#图片&lt;/code&gt;关键字开头的内容进行生成图片，&lt;a href=&#34;https://raw.githubusercontent.com/eryajf/chatgpt-dingtalk/main/#%E7%94%9F%E6%88%90%E5%9B%BE%E7%89%87&#34;&gt;🖼 查看示例&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎭 角色扮演：支持场景模式，通过 &lt;code&gt;#周报&lt;/code&gt; 的方式触发内置prompt模板 &lt;a href=&#34;https://raw.githubusercontent.com/eryajf/chatgpt-dingtalk/main/#%E9%80%9A%E8%BF%87%E5%86%85%E7%BD%AEprompt%E8%81%8A%E5%A4%A9&#34;&gt;🖼 查看示例&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🧑‍💻 频率限制：通过配置指定，自定义单个用户单日最大对话次数&lt;/li&gt; &#xA; &lt;li&gt;💵 余额查询：通过发送 &lt;code&gt;余额&lt;/code&gt; 关键字查询当前key所剩额度，&lt;a href=&#34;https://raw.githubusercontent.com/eryajf/chatgpt-dingtalk/main/#%E6%9F%A5%E8%AF%A2%E4%BD%99%E9%A2%9D&#34;&gt;🖼 查看示例&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🔗 自定义api域名：通过配置指定，解决国内服务器无法直接访问openai的问题&lt;/li&gt; &#xA; &lt;li&gt;🪜 添加代理：通过配置指定，通过给应用注入代理解决国内服务器无法访问的问题&lt;/li&gt; &#xA; &lt;li&gt;👐 默认模式：支持自定义默认的聊天模式，通过配置化指定&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;使用前提&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;有Openai账号，并且创建好&lt;code&gt;api_key&lt;/code&gt;，注册相关事项可以参考&lt;a href=&#34;https://juejin.cn/post/7173447848292253704&#34;&gt;此文章&lt;/a&gt; 。访问&lt;a href=&#34;https://beta.openai.com/account/api-keys&#34;&gt;这里&lt;/a&gt;，申请个人秘钥。&lt;/li&gt; &#xA; &lt;li&gt;在钉钉开发者后台创建机器人，配置应用程序回调。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;使用教程&lt;/h2&gt; &#xA;&lt;h3&gt;第一步，创建机器人&lt;/h3&gt; &#xA;&lt;h4&gt;方案一：outgoing类型机器人&lt;/h4&gt; &#xA;&lt;p&gt;钉钉群内的机器人有一个outgoing模式，当你创建机器人的时候，可以选择启用这个模式，然后直接配置回调地址，免去在管理后台创建应用的步骤，就可以直接投入使用。&lt;/p&gt; &#xA;&lt;p&gt;官方文档：&lt;a href=&#34;https://open.dingtalk.com/document/orgapp/custom-robot-access&#34;&gt;自定义机器人接入&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;但是这个模式貌似是部分开放的(目前来看貌似是部分人有创建这个类型的白名单)，所以如果你在钉钉群聊中添加&lt;code&gt;自定义机器人&lt;/code&gt;的时候，看到和我一样的信息，则说明无法使用这种方式：&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://cdn.staticaly.com/gh/eryajf/tu/main/img/image_20230325_162017.jpg&#34; alt=&#34;image_20230325_162017&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;📢 注意&lt;/code&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;如果你的和我一样，那么就只能放弃这种方案，往下看第二种对接方案。&lt;/li&gt; &#xA; &lt;li&gt;如果使用这种方案，那么就不能与机器人私聊对话，只能局限在群聊当中艾特机器人聊天。&lt;/li&gt; &#xA; &lt;li&gt;如果使用这种方案，则在群聊当中并不能达到真正的艾特发消息人的效果，因为这种机器人回调过来的关键信息为空。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;方案二：企业内部应用&lt;/h4&gt; &#xA;&lt;p&gt;创建步骤参考文档：&lt;a href=&#34;https://open.dingtalk.com/document/robots/enterprise-created-chatbot&#34;&gt;企业内部开发机器人&lt;/a&gt;，或者根据如下步骤进行配置。&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;创建机器人。 &lt;img src=&#34;https://cdn.staticaly.com/gh/eryajf/tu/main/img/image_20221209_163616.png&#34; alt=&#34;image_20221209_163616&#34;&gt;&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;&lt;code&gt;📢 注意1：&lt;/code&gt;可能现在创建机器人的时候名字为&lt;code&gt;chatgpt&lt;/code&gt;会被钉钉限制，请用其他名字命名。 &lt;code&gt;📢 注意2：&lt;/code&gt;第四步骤点击创建应用的时候，务必选择使用旧版，从而创建旧版机器人。&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;p&gt;步骤比较简单，这里就不赘述了。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;配置机器人回调接口。 &lt;img src=&#34;https://cdn.staticaly.com/gh/eryajf/tu/main/img/image_20221209_163652.png&#34; alt=&#34;image_20221209_163652&#34;&gt;&lt;/p&gt; &lt;p&gt;创建完毕之后，点击机器人开发管理，然后配置将要部署的服务所在服务器的出口IP，以及将要给服务配置的域名。&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;code&gt; 如果提示：&lt;/code&gt; 消息接收地址校验失败（请确保公网可访问该地址，如无有效SSL证书，可选择禁用证书校验），那么可以先输入一个&lt;code&gt;https://&lt;/code&gt;，然后就能看到&lt;code&gt;禁用https&lt;/code&gt;的选项了，选择禁用，然后再把地址改成&lt;code&gt;http&lt;/code&gt;就好了。&lt;/p&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;发布机器人。 &lt;img src=&#34;https://cdn.staticaly.com/gh/eryajf/tu/main/img/image_20221209_163709.png&#34; alt=&#34;image_20221209_163709&#34;&gt;&lt;/p&gt; &lt;p&gt;点击版本管理与发布，然后点击上线，这个时候就能在钉钉的群里中添加这个机器人了。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;群聊添加机器人。&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://cdn.staticaly.com/gh/eryajf/tu/main/img/image_20221209_163724.png&#34; alt=&#34;image_20221209_163724&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;第二步，部署应用&lt;/h3&gt; &#xA;&lt;h4&gt;docker部署&lt;/h4&gt; &#xA;&lt;p&gt;你可以使用docker快速运行本项目。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;第一种：基于环境变量运行&#xA;# 运行项目&#xA;$ docker run -itd --name chatgpt -p 8090:8090 --add-host=&#34;host.docker.internal:host-gateway&#34; -e APIKEY=换成你的key -e BASE_URL=&#34;&#34; -e MODEL=&#34;gpt-3.5-turbo&#34; -e SESSION_TIMEOUT=600 -e HTTP_PROXY=&#34;http://host.docker.internal:15732&#34; -e DEFAULT_MODE=&#34;单聊&#34; -e MAX_REQUEST=0 -e PORT=8090 -e SERVICE_URL=&#34;你当前服务外网可访问的URL&#34; --restart=always  dockerproxy.com/eryajf/chatgpt-dingtalk:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;📢 注意：&lt;/code&gt;如果使用docker部署，那么PORT参数不需要进行任何调整。 &lt;code&gt;📢 注意：&lt;/code&gt;如果服务器节点本身就在国外或者自定义了&lt;code&gt;BASE_URL&lt;/code&gt;，那么就把&lt;code&gt;HTTP_PROXY&lt;/code&gt;参数留空即可。 &lt;code&gt;📢 注意：&lt;/code&gt;如果使用docker部署，那么proxy地址可以直接使用如上方式部署，&lt;code&gt;host.docker.internal&lt;/code&gt;会指向容器所在宿主机的IP，只需要更改端口为你的代理端口即可。参见：&lt;a href=&#34;https://wiki.eryajf.net/pages/674f53/&#34;&gt;Docker容器如何优雅地访问宿主机网络&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;运行命令中映射的配置文件参考下边的配置文件说明。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;第二种：基于配置文件挂载运行&#xA;# 复制配置文件，根据自己实际情况，调整配置里的内容&#xA;$ cp config.dev.json config.json  # 其中 config.dev.json 从项目的根目录获取&#xA;&#xA;# 运行项目&#xA;$ docker run -itd --name chatgpt -p 8090:8090  -v `pwd`/config.json:/app/config.json --restart=always  dockerproxy.com/eryajf/chatgpt-dingtalk:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;其中配置文件参考下边的配置文件说明。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;第三种：使用 docker compose 运行&#xA;$ wget https://raw.githubusercontent.com/eryajf/chatgpt-dingtalk/main/docker-compose.yml&#xA;&#xA;$ nano docker-compose.yml # 编辑 APIKEY 等信息&#xA;&#xA;$ docker compose up -d&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;注意，不论通过上边哪种docker方式部署，都需要配置Nginx代理，当然你直接通过服务器外网IP也可以。&lt;/p&gt; &#xA;&lt;p&gt;部署完成之后，通过Nginx代理本服务：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nginx&#34;&gt;server {&#xA;    listen       80;&#xA;    server_name  chat.eryajf.net;&#xA;&#xA;    client_header_timeout 120s;&#xA;    client_body_timeout 120s;&#xA;&#xA;    location / {&#xA;        proxy_set_header Host $host;&#xA;        proxy_set_header X-Real-IP $remote_addr;&#xA;        proxy_set_header X-Forwarded-Proto $scheme;&#xA;        proxy_set_header X-Forwarded-For $remote_addr;&#xA;        proxy_pass http://localhost:8090;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;部署完成之后，就可以在群里艾特机器人进行体验了。&lt;/p&gt; &#xA;&lt;p&gt;Nginx配置完毕之后，可以先手动请求一下，通过服务日志输出判断服务是否正常可用：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ curl --location --request POST &#39;http://chat.eryajf.net/&#39; \&#xA;  --header &#39;Content-type: application/json&#39; \&#xA;  --data-raw &#39;{&#xA;    &#34;conversationId&#34;: &#34;xxx&#34;,&#xA;    &#34;atUsers&#34;: [&#xA;        {&#xA;            &#34;dingtalkId&#34;: &#34;xxx&#34;,&#xA;            &#34;staffId&#34;:&#34;xxx&#34;&#xA;        }&#xA;    ],&#xA;    &#34;chatbotCorpId&#34;: &#34;dinge8a565xxxx&#34;,&#xA;    &#34;chatbotUserId&#34;: &#34;$:LWCP_v1:$Cxxxxx&#34;,&#xA;    &#34;msgId&#34;: &#34;msg0xxxxx&#34;,&#xA;    &#34;senderNick&#34;: &#34;eryajf&#34;,&#xA;    &#34;isAdmin&#34;: true,&#xA;    &#34;senderStaffId&#34;: &#34;user123&#34;,&#xA;    &#34;sessionWebhookExpiredTime&#34;: 1613635652738,&#xA;    &#34;createAt&#34;: 1613630252678,&#xA;    &#34;senderCorpId&#34;: &#34;dinge8a565xxxx&#34;,&#xA;    &#34;conversationType&#34;: &#34;2&#34;,&#xA;    &#34;senderId&#34;: &#34;$:LWCP_v1:$Ff09GIxxxxx&#34;,&#xA;    &#34;conversationTitle&#34;: &#34;机器人测试-TEST&#34;,&#xA;    &#34;isInAtList&#34;: true,&#xA;    &#34;sessionWebhook&#34;: &#34;https://oapi.dingtalk.com/robot/sendBySession?session=xxxxx&#34;,&#xA;    &#34;text&#34;: {&#xA;        &#34;content&#34;: &#34; 你好&#34;&#xA;    },&#xA;    &#34;msgtype&#34;: &#34;text&#34;&#xA;}&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;如果手动请求没有问题，那么就可以在钉钉群里与机器人进行对话了。&lt;/p&gt; &#xA;&lt;h4&gt;二进制部署&lt;/h4&gt; &#xA;&lt;p&gt;如果你想通过命令行直接部署，可以直接下载release中的&lt;a href=&#34;https://github.com/eryajf/chatgpt-dingtalk/releases&#34;&gt;压缩包&lt;/a&gt; ，请根据自己系统以及架构选择合适的压缩包，下载之后直接解压运行。&lt;/p&gt; &#xA;&lt;p&gt;下载之后，在本地解压，即可看到可执行程序，与配置文件：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ tar xf chatgpt-dingtalk-v0.0.4-darwin-arm64.tar.gz&#xA;$ cd chatgpt-dingtalk-v0.0.4-darwin-arm64&#xA;$ cp config.dev.json  config.json # 然后根据情况调整配置文件内容,宿主机如遇端口冲突,可通过调整config.json中的port参数自定义服务端口&#xA;$ ./chatgpt-dingtalk  # 直接运行&#xA;&#xA;# 如果要守护在后台运行&#xA;$ nohup ./chatgpt-dingtalk &amp;amp;&amp;gt; run.log &amp;amp;&#xA;$ tail -f run.log&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;亮点特色&lt;/h2&gt; &#xA;&lt;h3&gt;与机器人私聊&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;2023-03-08&lt;/code&gt;补充，我发现也可以不在群里艾特机器人聊天，还可点击机器人，然后点击发消息，通过与机器人直接对话进行聊天：&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;由 &lt;a href=&#34;https://github.com/Raytow&#34;&gt;@Raytow&lt;/a&gt; 同学发现，在机器人自动生成的测试群里无法直接私聊机器人，在其他群里单独添加这个机器人，然后再点击就可以跟它私聊了。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/33259379/223607306-2ac836a2-7ce5-4a12-a16e-bec40b22d8d6.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;帮助列表&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;艾特机器人发送空内容或者帮助，会返回帮助列表。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://cdn.staticaly.com/gh/eryajf/tu/main/img/image_20230216_221253.png&#34; alt=&#34;image_20230216_221253&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;切换模式&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;发送指定关键字，可以切换不同的模式。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://cdn.staticaly.com/gh/eryajf/tu/main/img/image_20230215_184655.png&#34; alt=&#34;image_20230215_184655&#34;&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;📢 注意：串聊模式下，群里每个人的聊天上下文是独立的。 📢 注意：默认对话模式为单聊，因此不必发送单聊即可进入单聊模式，而要进入串聊，则需要发送串聊关键字进行切换，当串聊内容超过最大限制的时候，你可以发送重置，然后再次进入串聊模式。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;查询余额&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;艾特机器人发送 &lt;code&gt;余额&lt;/code&gt; 二字，会返回当前key对应的账号的剩余额度以及可用日期。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://cdn.staticaly.com/gh/eryajf/tu/main/img/image_20230304_222522.jpg&#34; alt=&#34;image_20230304_222522&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;日常问题&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://cdn.staticaly.com/gh/eryajf/tu/main/img/image_20221209_163739.png&#34; alt=&#34;image_20221209_163739&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;通过内置prompt聊天&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;发送模板两个字，会返回当前内置支持的prompt列表。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://cdn.staticaly.com/gh/eryajf/tu/main/img/image_20230323_152703.jpg&#34; alt=&#34;image_20230323_152703&#34;&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;如果你发现有比较优秀的prompt，欢迎PR。注意：一些与钉钉使用场景不是很匹配的，就不要提交了。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;生成图片&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;发送以 &lt;code&gt;#图片&lt;/code&gt;开头的内容，将会触发绘画能力，图片生成之后，将会保存在程序根目录下的&lt;code&gt;images目录&lt;/code&gt;下。&lt;/p&gt; &#xA; &lt;p&gt;如果你绘图没有思路，可以在&lt;a href=&#34;https://www.clickprompt.org/zh-CN/&#34;&gt;这里 https://www.clickprompt.org/zh-CN/&lt;/a&gt;以及&lt;a href=&#34;https://lexica.art/&#34;&gt;这里 https://lexica.art/&lt;/a&gt;找到一些不错的prompt。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://cdn.staticaly.com/gh/eryajf/tu/main/img/image_20230323_150547.jpg&#34; alt=&#34;image_20230323_150547&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;本地开发&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# 获取项目&#xA;$ git clone https://github.com/eryajf/chatgpt-dingtalk.git&#xA;&#xA;# 进入项目目录&#xA;$ cd chatgpt-dingtalk&#xA;&#xA;# 复制配置文件，根据个人实际情况进行配置&#xA;$ cp config.dev.json config.json&#xA;&#xA;# 启动项目&#xA;$ go run main.go&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;配置文件说明&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;    &#34;api_key&#34;: &#34;xxxxxxxxx&#34;,   // openai api_key&#xA;    &#34;base_url&#34;: &#34;api.openai.com&#34;, //  如果你想指定请求url的地址，可通过这个参数进行配置，默认为官方地址，不需要再添加 /v1&#xA;    &#34;model&#34;: &#34;gpt-3.5-turbo&#34;, // 指定模型，默认为 gpt-3.5-turbo , 可选参数有： &#34;gpt-4-32k-0314&#34;, &#34;gpt-4-32k&#34;, &#34;gpt-4-0314&#34;, &#34;gpt-4&#34;, &#34;gpt-3.5-turbo-0301&#34;, &#34;gpt-3.5-turbo&#34;, &#34;text-davinci-003&#34;, &#34;text-davinci-002&#34;, &#34;text-curie-001&#34;, &#34;text-babbage-001&#34;, &#34;text-ada-001&#34;, &#34;text-davinci-001&#34;, &#34;davinci-instruct-beta&#34;, &#34;davinci&#34;, &#34;curie-instruct-beta&#34;, &#34;curie&#34;, &#34;ada&#34;, &#34;babbage&#34;&#xA;    &#34;session_timeout&#34;: 600,   // 会话超时时间,默认600秒,在会话时间内所有发送给机器人的信息会作为上下文&#xA;    &#34;http_proxy&#34;: &#34;&#34;,         // 指定请求时使用的代理，如果为空，则不使用代理&#xA;    &#34;default_mode&#34;: &#34;单聊&#34;,    // 默认对话模式，可根据实际场景自定义，如果不设置，默认为单聊&#xA;    &#34;max_request&#34;: 0,    // 单人单日请求次数限制，默认为0，即不限制&#xA;    &#34;port&#34;: &#34;8090&#34;,     // 指定服务启动端口，默认为 8090，一般在二进制宿主机部署时，遇到端口冲突时使用。&#xA;    &#34;service_url&#34;: &#34;&#34; // 指定服务的地址，就是当前服务可供外网访问的地址，用于生成图片时给钉钉渲染&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;常见问题&lt;/h2&gt; &#xA;&lt;p&gt;如何更好地使用ChatGPT：这里有&lt;a href=&#34;https://github.com/f/awesome-chatgpt-prompts&#34;&gt;许多案例&lt;/a&gt;可供参考。&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;🗣 重要重要&lt;/code&gt; 一些常见的问题，我单独开issue放在这里：&lt;a href=&#34;https://github.com/eryajf/chatgpt-dingtalk/issues/44&#34;&gt;👉点我👈&lt;/a&gt;，可以查看这里辅助你解决问题，如果里边没有，请对历史issue进行搜索(不要提交重复的issue)，也欢迎大家补充。&lt;/p&gt; &#xA;&lt;h2&gt;高光时刻&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;本项目曾在 | &lt;a href=&#34;https://github.com/bonfy/github-trending/raw/master/2022/2022-12-12.md#go&#34;&gt;2022-12-12&lt;/a&gt; | &lt;a href=&#34;https://github.com/bonfy/github-trending/raw/master/2022/2022-12-18.md#go&#34;&gt;2022-12-18&lt;/a&gt; | &lt;a href=&#34;https://github.com/bonfy/github-trending/raw/master/2022/2022-12-19.md#go&#34;&gt;2022-12-19&lt;/a&gt; | &lt;a href=&#34;https://github.com/bonfy/github-trending/raw/master/2022/2022-12-20.md#go&#34;&gt;2022-12-20&lt;/a&gt; | &lt;a href=&#34;https://github.com/bonfy/github-trending/raw/master/2023-02-09.md#go&#34;&gt;2023-02-09&lt;/a&gt; | &lt;a href=&#34;https://github.com/bonfy/github-trending/raw/master/2023-02-10.md#go&#34;&gt;2023-02-10&lt;/a&gt; | &lt;a href=&#34;https://github.com/bonfy/github-trending/raw/master/2023-02-11.md#go&#34;&gt;2023-02-11&lt;/a&gt; | &lt;a href=&#34;https://github.com/bonfy/github-trending/raw/master/2023-02-12.md#go&#34;&gt;2023-02-12&lt;/a&gt; | &lt;a href=&#34;https://github.com/bonfy/github-trending/raw/master/2023-02-13.md#go&#34;&gt;2023-02-13&lt;/a&gt; | &lt;a href=&#34;https://github.com/bonfy/github-trending/raw/master/2023-02-14.md#go&#34;&gt;2023-02-14&lt;/a&gt; | &lt;a href=&#34;https://github.com/bonfy/github-trending/raw/master/2023-02-15.md#go&#34;&gt;2023-02-15&lt;/a&gt; | &lt;a href=&#34;https://github.com/bonfy/github-trending/raw/master/2023-03-04.md#go&#34;&gt;2023-03-04&lt;/a&gt; | &lt;a href=&#34;https://github.com/bonfy/github-trending/raw/master/2023-03-05.md#go&#34;&gt;2023-03-05&lt;/a&gt; | &lt;a href=&#34;https://github.com/bonfy/github-trending/raw/master/2023-03-19.md#go&#34;&gt;2023-03-19&lt;/a&gt; | &lt;a href=&#34;https://github.com/bonfy/github-trending/raw/master/2023-03-22.md#go&#34;&gt;2023-03-22&lt;/a&gt;, 这些天里，登上GitHub Trending。而且还在持续登榜中，可见最近openai的热度。 &lt;img src=&#34;https://cdn.staticaly.com/gh/eryajf/tu/main/img/image_20230316_114915.jpg&#34; alt=&#34;image_20230316_114915&#34;&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;感谢&lt;/h2&gt; &#xA;&lt;p&gt;这个项目能够成立，离不开这些开源项目：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/go-resty/resty&#34;&gt;go-resty/resty&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/patrickmn/go-cache&#34;&gt;patrickmn/go-cache&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/solywsh/chatgpt&#34;&gt;solywsh/chatgpt&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/xgfone/ship&#34;&gt;xgfone/ship&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/avast/retry-go&#34;&gt;avast/retry-go&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sashabaranov/go-openai&#34;&gt;sashabaranov/go-openapi&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;赞赏&lt;/h2&gt; &#xA;&lt;p&gt;如果觉得这个项目对你有帮助，你可以请作者&lt;a href=&#34;https://wiki.eryajf.net/reward/&#34;&gt;喝杯咖啡 ☕️&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>k3s-io/k3s</title>
    <updated>2023-03-26T01:53:22Z</updated>
    <id>tag:github.com,2023-03-26:/k3s-io/k3s</id>
    <link href="https://github.com/k3s-io/k3s" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Lightweight Kubernetes&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;K3s - Lightweight Kubernetes&lt;/h1&gt; &#xA;&lt;p&gt;Lightweight Kubernetes. Production ready, easy to install, half the memory, all in a binary less than 100 MB.&lt;/p&gt; &#xA;&lt;p&gt;Great for:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Edge&lt;/li&gt; &#xA; &lt;li&gt;IoT&lt;/li&gt; &#xA; &lt;li&gt;CI&lt;/li&gt; &#xA; &lt;li&gt;Development&lt;/li&gt; &#xA; &lt;li&gt;ARM&lt;/li&gt; &#xA; &lt;li&gt;Embedding k8s&lt;/li&gt; &#xA; &lt;li&gt;Situations where a PhD in k8s clusterology is infeasible&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;What is this?&lt;/h2&gt; &#xA;&lt;p&gt;K3s is a &lt;a href=&#34;https://github.com/cncf/k8s-conformance/pulls?q=is%3Apr+k3s&#34;&gt;fully conformant&lt;/a&gt; production-ready Kubernetes distribution with the following changes:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;It is packaged as a single binary.&lt;/li&gt; &#xA; &lt;li&gt;It adds support for sqlite3 as the default storage backend. Etcd3, MySQL, and Postgres are also supported.&lt;/li&gt; &#xA; &lt;li&gt;It wraps Kubernetes and other components in a single, simple launcher.&lt;/li&gt; &#xA; &lt;li&gt;It is secure by default with reasonable defaults for lightweight environments.&lt;/li&gt; &#xA; &lt;li&gt;It has minimal to no OS dependencies (just a sane kernel and cgroup mounts needed).&lt;/li&gt; &#xA; &lt;li&gt;It eliminates the need to expose a port on Kubernetes worker nodes for the kubelet API by exposing this API to the Kubernetes control plane nodes over a websocket tunnel.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;K3s bundles the following technologies together into a single cohesive distribution:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://containerd.io/&#34;&gt;Containerd&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://github.com/opencontainers/runc&#34;&gt;runc&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/coreos/flannel&#34;&gt;Flannel&lt;/a&gt; for CNI&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://coredns.io/&#34;&gt;CoreDNS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kubernetes-sigs/metrics-server&#34;&gt;Metrics Server&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://containo.us/traefik/&#34;&gt;Traefik&lt;/a&gt; for ingress&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/k3s-io/klipper-lb&#34;&gt;Klipper-lb&lt;/a&gt; as an embedded service load balancer provider&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.kube-router.io/&#34;&gt;Kube-router&lt;/a&gt; netpol controller for network policy&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/k3s-io/helm-controller&#34;&gt;Helm-controller&lt;/a&gt; to allow for CRD-driven deployment of helm manifests&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/k3s-io/kine&#34;&gt;Kine&lt;/a&gt; as a datastore shim that allows etcd to be replaced with other databases&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rancher/local-path-provisioner&#34;&gt;Local-path-provisioner&lt;/a&gt; for provisioning volumes using local storage&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/k3s-io/k3s-root&#34;&gt;Host utilities&lt;/a&gt; such as iptables/nftables, ebtables, ethtool, &amp;amp; socat&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;These technologies can be disabled or swapped out for technologies of your choice.&lt;/p&gt; &#xA;&lt;p&gt;Additionally, K3s simplifies Kubernetes operations by maintaining functionality for:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Managing the TLS certificates of Kubernetes components&lt;/li&gt; &#xA; &lt;li&gt;Managing the connection between worker and server nodes&lt;/li&gt; &#xA; &lt;li&gt;Auto-deploying Kubernetes resources from local manifests in realtime as they are changed.&lt;/li&gt; &#xA; &lt;li&gt;Managing an embedded etcd cluster (work in progress)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Current Status&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://app.fossa.com/projects/custom%2B25850%2Fgithub.com%2Fk3s-io%2Fk3s?ref=badge_shield&#34;&gt;&lt;img src=&#34;https://app.fossa.com/api/projects/custom%2B25850%2Fgithub.com%2Fk3s-io%2Fk3s.svg?type=shield&#34; alt=&#34;FOSSA Status&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://github.com/k3s-io/k3s/actions/workflows/nightly-install.yaml/badge.svg?sanitize=true&#34; alt=&#34;Nightly CI&#34;&gt; &lt;a href=&#34;https://drone-publish.k3s.io/k3s-io/k3s&#34;&gt;&lt;img src=&#34;https://drone-publish.k3s.io/api/badges/k3s-io/k3s/status.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/k3s-io/k3s/actions/workflows/integration.yaml&#34;&gt;&lt;img src=&#34;https://github.com/k3s-io/k3s/actions/workflows/integration.yaml/badge.svg?sanitize=true&#34; alt=&#34;Integration Test Coverage&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/k3s-io/k3s/actions/workflows/unitcoverage.yaml&#34;&gt;&lt;img src=&#34;https://github.com/k3s-io/k3s/actions/workflows/unitcoverage.yaml/badge.svg?sanitize=true&#34; alt=&#34;Unit Test Coverage&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;What&#39;s with the name?&lt;/h2&gt; &#xA;&lt;p&gt;We wanted an installation of Kubernetes that was half the size in terms of memory footprint. Kubernetes is a 10 letter word stylized as k8s. So something half as big as Kubernetes would be a 5 letter word stylized as K3s. There is neither a long-form of K3s nor official pronunciation.&lt;/p&gt; &#xA;&lt;h2&gt;Is this a fork?&lt;/h2&gt; &#xA;&lt;p&gt;No, it&#39;s a distribution. A fork implies continued divergence from the original. This is not K3s&#39;s goal or practice. K3s explicitly intends not to change any core Kubernetes functionality. We seek to remain as close to upstream Kubernetes as possible. However, we maintain a small set of patches (well under 1000 lines) important to K3s&#39;s use case and deployment model. We maintain patches for other components as well. When possible, we contribute these changes back to the upstream projects, for example, with &lt;a href=&#34;https://github.com/containerd/cri/pull/1487/commits/24209b91bf361e131478d15cfea1ab05694dc3eb&#34;&gt;SELinux support in containerd&lt;/a&gt;. This is a common practice amongst software distributions.&lt;/p&gt; &#xA;&lt;p&gt;K3s is a distribution because it packages additional components and services necessary for a fully functional cluster that go beyond vanilla Kubernetes. These are opinionated choices on technologies for components like ingress, storage class, network policy, service load balancer, and even container runtime. These choices and technologies are touched on in more detail in the &lt;a href=&#34;https://raw.githubusercontent.com/k3s-io/k3s/master/#what-is-this&#34;&gt;What is this?&lt;/a&gt; section.&lt;/p&gt; &#xA;&lt;h2&gt;How is this lightweight or smaller than upstream Kubernetes?&lt;/h2&gt; &#xA;&lt;p&gt;There are two major ways that K3s is lighter weight than upstream Kubernetes:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;The memory footprint to run it is smaller&lt;/li&gt; &#xA; &lt;li&gt;The binary, which contains all the non-containerized components needed to run a cluster, is smaller&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;The memory footprint is reduced primarily by running many components inside of a single process. This eliminates significant overhead that would otherwise be duplicated for each component.&lt;/p&gt; &#xA;&lt;p&gt;The binary is smaller by removing third-party storage drivers and cloud providers, explained in more detail below.&lt;/p&gt; &#xA;&lt;h2&gt;What have you removed from upstream Kubernetes?&lt;/h2&gt; &#xA;&lt;p&gt;This is a common point of confusion because it has changed over time. Early versions of K3s had much more removed than the current version. K3s currently removes two things:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;In-tree storage drivers&lt;/li&gt; &#xA; &lt;li&gt;In-tree cloud provider&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Both of these have out-of-tree alternatives in the form of &lt;a href=&#34;https://github.com/container-storage-interface/spec/raw/master/spec.md&#34;&gt;CSI&lt;/a&gt; and &lt;a href=&#34;https://kubernetes.io/docs/tasks/administer-cluster/running-cloud-controller/&#34;&gt;CCM&lt;/a&gt;, which work in K3s and which upstream is moving towards.&lt;/p&gt; &#xA;&lt;p&gt;We remove these to achieve a smaller binary size. They can be removed while remaining conformant because neither affects core Kubernetes functionality. They are also dependent on third-party cloud or data center technologies/services, which may not be available in many K3s&#39; use cases.&lt;/p&gt; &#xA;&lt;h2&gt;What&#39;s next?&lt;/h2&gt; &#xA;&lt;p&gt;Check out our &lt;a href=&#34;https://raw.githubusercontent.com/k3s-io/k3s/master/ROADMAP.md&#34;&gt;roadmap&lt;/a&gt; to see what we have planned moving forward.&lt;/p&gt; &#xA;&lt;h2&gt;Release cadence&lt;/h2&gt; &#xA;&lt;p&gt;K3s maintains pace with upstream Kubernetes releases. Our goal is to release patch releases within one week, and new minors within 30 days.&lt;/p&gt; &#xA;&lt;p&gt;Our release versioning reflects the version of upstream Kubernetes that is being released. For example, the K3s release &lt;a href=&#34;https://github.com/k3s-io/k3s/releases/tag/v1.18.6%2Bk3s1&#34;&gt;v1.18.6+k3s1&lt;/a&gt; maps to the &lt;code&gt;v1.18.6&lt;/code&gt; Kubernetes release. We add a postfix in the form of &lt;code&gt;+k3s&amp;lt;number&amp;gt;&lt;/code&gt; to allow us to make additional releases using the same version of upstream Kubernetes while remaining &lt;a href=&#34;https://semver.org/&#34;&gt;semver&lt;/a&gt; compliant. For example, if we discovered a high severity bug in &lt;code&gt;v1.18.6+k3s1&lt;/code&gt; and needed to release an immediate fix for it, we would release &lt;code&gt;v1.18.6+k3s2&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Please see &lt;a href=&#34;https://rancher.com/docs/k3s/latest/en/&#34;&gt;the official docs site&lt;/a&gt; for complete documentation.&lt;/p&gt; &#xA;&lt;h2&gt;Quick-Start - Install Script&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;install.sh&lt;/code&gt; script provides a convenient way to download K3s and add a service to systemd or openrc.&lt;/p&gt; &#xA;&lt;p&gt;To install k3s as a service, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -sfL https://get.k3s.io | sh -&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A kubeconfig file is written to &lt;code&gt;/etc/rancher/k3s/k3s.yaml&lt;/code&gt; and the service is automatically started or restarted. The install script will install K3s and additional utilities, such as &lt;code&gt;kubectl&lt;/code&gt;, &lt;code&gt;crictl&lt;/code&gt;, &lt;code&gt;k3s-killall.sh&lt;/code&gt;, and &lt;code&gt;k3s-uninstall.sh&lt;/code&gt;, for example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo kubectl get nodes&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;K3S_TOKEN&lt;/code&gt; is created at &lt;code&gt;/var/lib/rancher/k3s/server/node-token&lt;/code&gt; on your server. To install on worker nodes, pass &lt;code&gt;K3S_URL&lt;/code&gt; along with &lt;code&gt;K3S_TOKEN&lt;/code&gt; environment variables, for example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -sfL https://get.k3s.io | K3S_URL=https://myserver:6443 K3S_TOKEN=XXX sh -&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Manual Download&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download &lt;code&gt;k3s&lt;/code&gt; from latest &lt;a href=&#34;https://github.com/k3s-io/k3s/releases/latest&#34;&gt;release&lt;/a&gt;, x86_64, armhf, arm64 and s390x are supported.&lt;/li&gt; &#xA; &lt;li&gt;Run the server.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo k3s server &amp;amp;&#xA;# Kubeconfig is written to /etc/rancher/k3s/k3s.yaml&#xA;sudo k3s kubectl get nodes&#xA;&#xA;# On a different node run the below. NODE_TOKEN comes from&#xA;# /var/lib/rancher/k3s/server/node-token on your server&#xA;sudo k3s agent --server https://myserver:6443 --token ${NODE_TOKEN}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Please check out our &lt;a href=&#34;https://raw.githubusercontent.com/k3s-io/k3s/master/CONTRIBUTING.md&#34;&gt;contributing guide&lt;/a&gt; if you&#39;re interested in contributing to K3s.&lt;/p&gt; &#xA;&lt;h2&gt;Security&lt;/h2&gt; &#xA;&lt;p&gt;Security issues in K3s can be reported by sending an email to &lt;a href=&#34;mailto:security@k3s.io&#34;&gt;security@k3s.io&lt;/a&gt;. Please do not file issues about security issues.&lt;/p&gt;</summary>
  </entry>
</feed>