<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-10-09T01:42:30Z</updated>
  <subtitle>Weekly Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>HavocFramework/Havoc</title>
    <updated>2022-10-09T01:42:30Z</updated>
    <id>tag:github.com,2022-10-09:/HavocFramework/Havoc</id>
    <link href="https://github.com/HavocFramework/Havoc" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The Havoc Framework&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img width=&#34;125px&#34; src=&#34;https://raw.githubusercontent.com/HavocFramework/Havoc/main/Assets/Havoc.png&#34;&gt; &#xA; &lt;h1&gt;Havoc&lt;/h1&gt; &#xA; &lt;br&gt; &#xA; &lt;p&gt;&lt;i&gt;Havoc is a modern and malleable post-exploitation command and control framework, created by &lt;a href=&#34;https://twitter.com/C5pider&#34;&gt;@C5pider&lt;/a&gt;.&lt;/i&gt;&lt;/p&gt; &#xA; &lt;br&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/HavocFramework/Havoc/main/Assets/Screenshots/SessionGraphSmbEkko.png&#34; width=&#34;90%&#34;&gt;&lt;br&gt;&lt;br&gt; &lt;img src=&#34;https://raw.githubusercontent.com/HavocFramework/Havoc/main/Assets/Screenshots/MultiUserAgentControl.png&#34; width=&#34;90%&#34;&gt;&lt;br&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span&gt;⚠&lt;/span&gt; Havoc is in an early state of release. Breaking changes may be made to APIs/core structures as the framework matures.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Quick Start&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Please see the &lt;a href=&#34;https://github.com/HavocFramework/Havoc/wiki&#34;&gt;Wiki&lt;/a&gt; for complete documentation.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Havoc works well on Debian 10/11, Ubuntu 20.04/22.04 and Kali Linux. It&#39;s recommended to use the latest versions possible to avoid issues. You&#39;ll need a modern version of Qt and Python 3.10.x to avoid build issues.&lt;/p&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://github.com/HavocFramework/Havoc/wiki#installation&#34;&gt;Installation&lt;/a&gt; guide in the Wiki for instructions. If you run into issues, check the &lt;a href=&#34;https://github.com/HavocFramework/Havoc/wiki#known-issues&#34;&gt;Known Issues&lt;/a&gt; page as well as the open/closed &lt;a href=&#34;https://github.com/HavocFramework/Havoc/issues&#34;&gt;Issues&lt;/a&gt; list.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Features&lt;/h3&gt; &#xA;&lt;h4&gt;Client&lt;/h4&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Cross-platform UI written in C++ and Qt&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Modern, dark theme based on &lt;a href=&#34;https://draculatheme.com/&#34;&gt;Dracula&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Teamserver&lt;/h4&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Written in Golang&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Multiplayer&lt;/li&gt; &#xA; &lt;li&gt;Payload generation (exe/shellcode/dll)&lt;/li&gt; &#xA; &lt;li&gt;HTTP/HTTPS listeners&lt;/li&gt; &#xA; &lt;li&gt;Customizable C2 profiles&lt;/li&gt; &#xA; &lt;li&gt;External C2&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Demon&lt;/h4&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Havoc&#39;s flagship agent written in C and ASM&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Sleep Obfuscation via &lt;a href=&#34;https://github.com/Cracked5pider/Ekko&#34;&gt;Ekko&lt;/a&gt; or &lt;a href=&#34;https://github.com/SecIdiot/FOLIAGE&#34;&gt;FOLIAGE&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;x64 return address spoofing&lt;/li&gt; &#xA; &lt;li&gt;Indirect Syscalls for Nt* APIs&lt;/li&gt; &#xA; &lt;li&gt;SMB support&lt;/li&gt; &#xA; &lt;li&gt;Token vault&lt;/li&gt; &#xA; &lt;li&gt;Variety of built-in post-exploitation commands&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/HavocFramework/Havoc/main/Assets/Screenshots/SessionConsoleHelp.png&#34; width=&#34;90%&#34;&gt;&#xA; &lt;br&gt; &#xA;&lt;/div&gt; &#xA;&lt;h4&gt;Extensibility&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/HavocFramework/Havoc/wiki#external-c2&#34;&gt;External C2&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Custom Agent Support &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/HavocFramework/Talon&#34;&gt;Talon&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/HavocFramework/havoc-py&#34;&gt;Python API&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/HavocFramework/Modules&#34;&gt;Modules&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Support&lt;/h3&gt; &#xA;&lt;p&gt;Consider supporting C5pider on &lt;a href=&#34;https://www.patreon.com/5pider&#34;&gt;Patreon&lt;/a&gt;/&lt;a href=&#34;https://github.com/sponsors/Cracked5pider&#34;&gt;Github Sponsors&lt;/a&gt;. Additional features are planned for supporters in the future, such as custom agents/plugins/commands/etc.&lt;/p&gt; &#xA;&lt;h3&gt;Community&lt;/h3&gt; &#xA;&lt;p&gt;You can join the official &lt;a href=&#34;https://discord.gg/z3PF3NRDE5&#34;&gt;Havoc Discord&lt;/a&gt; to chat with the community!&lt;/p&gt; &#xA;&lt;h3&gt;Contributing&lt;/h3&gt; &#xA;&lt;p&gt;To contribute to the Havoc Framework, please review the guidelines in &lt;a href=&#34;https://github.com/HavocFramework/Havoc/raw/main/CONTRIBUTING.MD&#34;&gt;Contributing.md&lt;/a&gt; and then open a pull-request!&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>traefik/traefik</title>
    <updated>2022-10-09T01:42:30Z</updated>
    <id>tag:github.com,2022-10-09:/traefik/traefik</id>
    <link href="https://github.com/traefik/traefik" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The Cloud Native Application Proxy&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/traefik/traefik/master/docs/content/assets/img/traefik.logo.png&#34; alt=&#34;Traefik&#34; title=&#34;Traefik&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://semaphoreci.com/containous/traefik&#34;&gt;&lt;img src=&#34;https://semaphoreci.com/api/v1/containous/traefik/branches/master/shields_badge.svg?sanitize=true&#34; alt=&#34;Build Status SemaphoreCI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://doc.traefik.io/traefik&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/docs-current-brightgreen.svg?sanitize=true&#34; alt=&#34;Docs&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/report/traefik/traefik&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/traefik/traefik&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/traefik/traefik/raw/master/LICENSE.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-MIT-blue.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://community.traefik.io/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/style-register-green.svg?style=social&amp;amp;label=Discourse&#34; alt=&#34;Join the community support forum at https://community.traefik.io/&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/intent/follow?screen_name=traefik&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/follow/traefik.svg?style=social&#34; alt=&#34;Twitter&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Traefik (pronounced &lt;em&gt;traffic&lt;/em&gt;) is a modern HTTP reverse proxy and load balancer that makes deploying microservices easy. Traefik integrates with your existing infrastructure components (&lt;a href=&#34;https://www.docker.com/&#34;&gt;Docker&lt;/a&gt;, &lt;a href=&#34;https://docs.docker.com/engine/swarm/&#34;&gt;Swarm mode&lt;/a&gt;, &lt;a href=&#34;https://kubernetes.io&#34;&gt;Kubernetes&lt;/a&gt;, &lt;a href=&#34;https://mesosphere.github.io/marathon/&#34;&gt;Marathon&lt;/a&gt;, &lt;a href=&#34;https://www.consul.io/&#34;&gt;Consul&lt;/a&gt;, &lt;a href=&#34;https://coreos.com/etcd/&#34;&gt;Etcd&lt;/a&gt;, &lt;a href=&#34;https://rancher.com&#34;&gt;Rancher&lt;/a&gt;, &lt;a href=&#34;https://aws.amazon.com/ecs&#34;&gt;Amazon ECS&lt;/a&gt;, ...) and configures itself automatically and dynamically. Pointing Traefik at your orchestrator should be the &lt;em&gt;only&lt;/em&gt; configuration step you need.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;. &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/traefik/traefik/master/#overview&#34;&gt;Overview&lt;/a&gt;&lt;/strong&gt; . &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/traefik/traefik/master/#features&#34;&gt;Features&lt;/a&gt;&lt;/strong&gt; . &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/traefik/traefik/master/#supported-backends&#34;&gt;Supported backends&lt;/a&gt;&lt;/strong&gt; . &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/traefik/traefik/master/#quickstart&#34;&gt;Quickstart&lt;/a&gt;&lt;/strong&gt; . &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/traefik/traefik/master/#web-ui&#34;&gt;Web UI&lt;/a&gt;&lt;/strong&gt; . &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/traefik/traefik/master/#documentation&#34;&gt;Documentation&lt;/a&gt;&lt;/strong&gt; .&lt;/p&gt; &#xA;&lt;p&gt;. &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/traefik/traefik/master/#support&#34;&gt;Support&lt;/a&gt;&lt;/strong&gt; . &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/traefik/traefik/master/#release-cycle&#34;&gt;Release cycle&lt;/a&gt;&lt;/strong&gt; . &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/traefik/traefik/master/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/strong&gt; . &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/traefik/traefik/master/#maintainers&#34;&gt;Maintainers&lt;/a&gt;&lt;/strong&gt; . &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/traefik/traefik/master/#credits&#34;&gt;Credits&lt;/a&gt;&lt;/strong&gt; .&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;span&gt;⚠&lt;/span&gt; Please be aware that the old configurations for Traefik v1.x are NOT compatible with the v2.x config as of now. If you&#39;re running v2, please ensure you are using a &lt;a href=&#34;https://doc.traefik.io/traefik/&#34;&gt;v2 configuration&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;Imagine that you have deployed a bunch of microservices with the help of an orchestrator (like Swarm or Kubernetes) or a service registry (like etcd or consul). Now you want users to access these microservices, and you need a reverse proxy.&lt;/p&gt; &#xA;&lt;p&gt;Traditional reverse-proxies require that you configure &lt;em&gt;each&lt;/em&gt; route that will connect paths and subdomains to &lt;em&gt;each&lt;/em&gt; microservice. In an environment where you add, remove, kill, upgrade, or scale your services &lt;em&gt;many&lt;/em&gt; times a day, the task of keeping the routes up to date becomes tedious.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;This is when Traefik can help you!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Traefik listens to your service registry/orchestrator API and instantly generates the routes so your microservices are connected to the outside world -- without further intervention from your part.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Run Traefik and let it do the work for you!&lt;/strong&gt; &lt;em&gt;(But if you&#39;d rather configure some of your routes manually, Traefik supports that too!)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/traefik/traefik/master/docs/content/assets/img/traefik-architecture.png&#34; alt=&#34;Architecture&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Continuously updates its configuration (No restarts!)&lt;/li&gt; &#xA; &lt;li&gt;Supports multiple load balancing algorithms&lt;/li&gt; &#xA; &lt;li&gt;Provides HTTPS to your microservices by leveraging &lt;a href=&#34;https://letsencrypt.org&#34;&gt;Let&#39;s Encrypt&lt;/a&gt; (wildcard certificates support)&lt;/li&gt; &#xA; &lt;li&gt;Circuit breakers, retry&lt;/li&gt; &#xA; &lt;li&gt;See the magic through its clean web UI&lt;/li&gt; &#xA; &lt;li&gt;Websocket, HTTP/2, GRPC ready&lt;/li&gt; &#xA; &lt;li&gt;Provides metrics (Rest, Prometheus, Datadog, Statsd, InfluxDB)&lt;/li&gt; &#xA; &lt;li&gt;Keeps access logs (JSON, CLF)&lt;/li&gt; &#xA; &lt;li&gt;Fast&lt;/li&gt; &#xA; &lt;li&gt;Exposes a Rest API&lt;/li&gt; &#xA; &lt;li&gt;Packaged as a single binary file (made with &lt;span&gt;❤️&lt;/span&gt; with go) and available as an &lt;a href=&#34;https://hub.docker.com/r/_/traefik/&#34;&gt;official&lt;/a&gt; docker image&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Supported Backends&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://doc.traefik.io/traefik/providers/docker/&#34;&gt;Docker&lt;/a&gt; / &lt;a href=&#34;https://doc.traefik.io/traefik/providers/docker/&#34;&gt;Swarm mode&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://doc.traefik.io/traefik/providers/kubernetes-crd/&#34;&gt;Kubernetes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://doc.traefik.io/traefik/providers/marathon/&#34;&gt;Marathon&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://doc.traefik.io/traefik/providers/rancher/&#34;&gt;Rancher&lt;/a&gt; (Metadata)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://doc.traefik.io/traefik/providers/file/&#34;&gt;File&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Quickstart&lt;/h2&gt; &#xA;&lt;p&gt;To get your hands on Traefik, you can use the &lt;a href=&#34;https://doc.traefik.io/traefik/getting-started/quick-start/&#34;&gt;5-Minute Quickstart&lt;/a&gt; in our documentation (you will need Docker).&lt;/p&gt; &#xA;&lt;h2&gt;Web UI&lt;/h2&gt; &#xA;&lt;p&gt;You can access the simple HTML frontend of Traefik.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/traefik/traefik/master/docs/content/assets/img/webui-dashboard.png&#34; alt=&#34;Web UI Providers&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;You can find the complete documentation of Traefik v2 at &lt;a href=&#34;https://doc.traefik.io/traefik/&#34;&gt;https://doc.traefik.io/traefik/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;A collection of contributions around Traefik can be found at &lt;a href=&#34;https://awesome.traefik.io&#34;&gt;https://awesome.traefik.io&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;p&gt;To get community support, you can:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;join the Traefik community forum: &lt;a href=&#34;https://community.traefik.io/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/style-register-green.svg?style=social&amp;amp;label=Discourse&#34; alt=&#34;Join the chat at https://community.traefik.io/&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you need commercial support, please contact &lt;a href=&#34;https://traefik.io&#34;&gt;Traefik.io&lt;/a&gt; by mail: &lt;a href=&#34;mailto:support@traefik.io&#34;&gt;mailto:support@traefik.io&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Download&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Grab the latest binary from the &lt;a href=&#34;https://github.com/traefik/traefik/releases&#34;&gt;releases&lt;/a&gt; page and run it with the &lt;a href=&#34;https://raw.githubusercontent.com/traefik/traefik/master/traefik.sample.toml&#34;&gt;sample configuration file&lt;/a&gt;:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;./traefik --configFile=traefik.toml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Or use the official tiny Docker image and run it with the &lt;a href=&#34;https://raw.githubusercontent.com/traefik/traefik/master/traefik.sample.toml&#34;&gt;sample configuration file&lt;/a&gt;:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker run -d -p 8080:8080 -p 80:80 -v $PWD/traefik.toml:/etc/traefik/traefik.toml traefik&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Or get the sources:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git clone https://github.com/traefik/traefik&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Introductory Videos&lt;/h2&gt; &#xA;&lt;p&gt;You can find high level and deep dive videos on &lt;a href=&#34;https://videos.traefik.io&#34;&gt;videos.traefik.io&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Maintainers&lt;/h2&gt; &#xA;&lt;p&gt;We are strongly promoting a philosophy of openness and sharing, and firmly standing against the elitist closed approach. Being part of the core team should be accessible to anyone who is motivated and want to be part of that journey! This &lt;a href=&#34;https://raw.githubusercontent.com/traefik/traefik/master/docs/content/contributing/maintainers-guidelines.md&#34;&gt;document&lt;/a&gt; describes how to be part of the core team as well as various responsibilities and guidelines for Traefik maintainers. You can also find more information on our process to review pull requests and manage issues &lt;a href=&#34;https://raw.githubusercontent.com/traefik/traefik/master/docs/content/contributing/maintainers.md&#34;&gt;in this document&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;If you&#39;d like to contribute to the project, refer to the &lt;a href=&#34;https://raw.githubusercontent.com/traefik/traefik/master/CONTRIBUTING.md&#34;&gt;contributing documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Please note that this project is released with a &lt;a href=&#34;https://raw.githubusercontent.com/traefik/traefik/master/CODE_OF_CONDUCT.md&#34;&gt;Contributor Code of Conduct&lt;/a&gt;. By participating in this project, you agree to abide by its terms.&lt;/p&gt; &#xA;&lt;h2&gt;Release Cycle&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;We usually release 3/4 new versions (e.g. 1.1.0, 1.2.0, 1.3.0) per year.&lt;/li&gt; &#xA; &lt;li&gt;Release Candidates are available before the release (e.g. 1.1.0-rc1, 1.1.0-rc2, 1.1.0-rc3, 1.1.0-rc4, before 1.1.0).&lt;/li&gt; &#xA; &lt;li&gt;Bug-fixes (e.g. 1.1.1, 1.1.2, 1.2.1, 1.2.3) are released as needed (no additional features are delivered in those versions, bug-fixes only).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Each version is supported until the next one is released (e.g. 1.1.x will be supported until 1.2.0 is out).&lt;/p&gt; &#xA;&lt;p&gt;We use &lt;a href=&#34;https://semver.org/&#34;&gt;Semantic Versioning&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Mailing Lists&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;General announcements, new releases: mail at &lt;a href=&#34;mailto:news+subscribe@traefik.io&#34;&gt;news+subscribe@traefik.io&lt;/a&gt; or on &lt;a href=&#34;https://groups.google.com/a/traefik.io/forum/#!forum/news&#34;&gt;the online viewer&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Security announcements: mail at &lt;a href=&#34;mailto:security+subscribe@traefik.io&#34;&gt;security+subscribe@traefik.io&lt;/a&gt; or on &lt;a href=&#34;https://groups.google.com/a/traefik.io/forum/#!forum/security&#34;&gt;the online viewer&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;p&gt;Kudos to &lt;a href=&#34;http://peka.byethost11.com/photoblog/&#34;&gt;Peka&lt;/a&gt; for his awesome work on the gopher&#39;s logo!.&lt;/p&gt; &#xA;&lt;p&gt;The gopher&#39;s logo of Traefik is licensed under the Creative Commons 3.0 Attributions license.&lt;/p&gt; &#xA;&lt;p&gt;The gopher&#39;s logo of Traefik was inspired by the gopher stickers made by &lt;a href=&#34;https://twitter.com/tenntenn&#34;&gt;Takuya Ueda&lt;/a&gt;. The original Go gopher was designed by &lt;a href=&#34;https://reneefrench.blogspot.com/&#34;&gt;Renee French&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>optiv/Freeze</title>
    <updated>2022-10-09T01:42:30Z</updated>
    <id>tag:github.com,2022-10-09:/optiv/Freeze</id>
    <link href="https://github.com/optiv/Freeze" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Freeze is a payload toolkit for bypassing EDRs using suspended processes, direct syscalls, and alternative execution methods&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt; &lt;br&gt; &lt;img src=&#34;https://raw.githubusercontent.com/optiv/Freeze/main/Screenshots/Freeze.jpg&#34; height=&#34;310&#34; border=&#34;2px solid #555&#34;&gt; &lt;br&gt; Freeze &lt;/h1&gt; &#xA;&lt;h3&gt;More Information&lt;/h3&gt; &#xA;&lt;p&gt;If you want to learn more about the techniques utilized in this framework, please take a look at &lt;a href=&#34;https://www.optiv.com/insights/source-zero/blog/sacrificing-suspended-processes&#34;&gt;SourceZero Blog&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;&lt;/h1&gt; &#xA;&lt;h2&gt;Description&lt;/h2&gt; &#xA;&lt;p&gt;Freeze is a payload creation tool used for circumventing EDR security controls to execute shellcode in a stealthy manner. Freeze utilizes multiple techniques to not only remove Userland EDR hooks, but to also execute shellcode in such a way that it circumvents other endpoint monitoring controls.&lt;/p&gt; &#xA;&lt;h3&gt;Creating A Suspended Process&lt;/h3&gt; &#xA;&lt;p&gt;When a process is created, Ntdll.dll is the first DLL that is loaded. This happens before any EDR DLLs are loaded. This means that there is a bit of a delay before an EDR can be loaded and start hooking and modifying the assembly of system DLLs. In looking at Windows syscalls in Ntdll.dll, we can see that nothing is hooked yet. If we create a process in a suspend state (one that is frozen in time), we can see that no other DLLs are loaded, except for Ntdll.dll. You can also see that no EDR DLLs are loaded, meaning that the syscalls located in Ntdll.dll are unmodified.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/optiv/Freeze/main/Screenshots/Suspended_Process.png&#34; border=&#34;2px solid #555&#34;&gt; &lt;/p&gt;&#xA;&lt;h3&gt;Address Space Layout Randomization&lt;/h3&gt; &#xA;&lt;p&gt;In order to use this clean suspended process to remove hooks from Freeze loader, we need a way to programmatically find and read the clean suspended process&#39; memory. This is where address space layout randomization (ASLR) comes into play. ASLR is a security mechanism to prevent stack memory corruption-based vulnerabilities. ASLR randomizes the address space inside of a process, to ensure that all memory-mapped objects, the stack, the heap, and the executable program itself, are unique. Now, this is where it gets interesting because while ASLR works, it does not work for position-independent code such as DLLs. What happens with DLLs, (specifically known system DLLs) is that the address space is randomized once at boot time. This means that we don&#39;t need to enumerate a remote process information to find the base address of its ntdll.dll because it is the same in all processes including the one that we control. Since the address of every DLL is the same place per boot, we can pull this information from our own process and never have to enumerate the suspended process to find the address.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/optiv/Freeze/main/Screenshots/Base_Address.png&#34; border=&#34;2px solid #555&#34;&gt; &lt;/p&gt;&#xA;&lt;p&gt;With this information, we can use the API ReadProcessMemory to read a process&#39; memory. This API call is commonly associated with the reading of LSASS as part of any credential-based attack; however, on its own it is inherently not malicious, especially if we are just reading an arbitrary section of memory. The only time ReadProcessMemory will be flagged as part of something suspicious is if you are reading something you shouldn&#39;t (like the contents of LSASS). EDR products should never flag the fact that ReadProcessMemory was called, as there are legitimate operational uses for this function and would result in many false positives.&lt;/p&gt; &#xA;&lt;p&gt;We can take this a step further by only reading a section of Ntdll.dll where all syscalls are stored - its .text section, rather than reading the entire DLL.&lt;/p&gt; &#xA;&lt;p&gt;Combining these elements, we can programmatically get a copy of the .text section of Ntdll.dll to overwrite our existing hooked .text section prior to executing shellcode.&lt;/p&gt; &#xA;&lt;h3&gt;ETW Patching&lt;/h3&gt; &#xA;&lt;p&gt;ETW utilizes built-in syscalls to generate this telemetry. Since ETW is also a native feature built into Windows, security products do not need to &#34;hook&#34; the ETW syscalls to access the information. As a result, to prevent ETW, Freeze patches numerous ETW syscalls, flushing out the registers and returning the execution flow to the next instruction. Patching ETW is now default in all loaders.&lt;/p&gt; &#xA;&lt;h3&gt;Shellcode&lt;/h3&gt; &#xA;&lt;p&gt;Since only Ntdll.dll is restored, all subsequent calls to execute shellcode need to reside in Ntdll.dll. Using Go (note you can do this in other languages but in Go, its quite easy to implement) we can define and call the NT syscalls needed to allocate, write, and protect the shellcode, effectively skipping the standard calls that are located in kernel32d.dll, and Kernelbase.dll, as these may still be hooked.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/optiv/Freeze/main/Screenshots/Syscalls.png&#34; border=&#34;2px solid #555&#34;&gt; &lt;/p&gt;&#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/optiv/Freeze/main/Screenshots/Userland_EDR.png&#34; border=&#34;2px solid #555&#34;&gt; &lt;/p&gt;&#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/optiv/Freeze/main/Screenshots/Kernel_EDR.png&#34; border=&#34;2px solid #555&#34;&gt; &lt;/p&gt;&#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Freeze was developed in Golang.&lt;/p&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;p&gt;To install Freeze, run the following commands, or use the compiled binary:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;go build Freeze.go&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Help&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;        ___________                                    &#xA;        \_   _____/______   ____   ____ ________ ____  &#xA;         |    __) \_  __ \_/ __ \_/ __ \\___   // __ \ &#xA;         |     \   |  | \/\  ___/\  ___/ /    /\  ___/ &#xA;         \___  /   |__|    \___  &amp;gt;\___  &amp;gt;_____ \\___  &amp;gt;&#xA;             \/                \/     \/      \/    \/ &#xA;                                        (@Tyl0us)&#xA;        Soon they will learn that revenge is a dish... best served COLD...&#xA;                 &#xA;Usage of ./Freeze:&#xA;  -I string&#xA;        Path to the raw 64-bit shellcode.&#xA;  -O string&#xA;        Name of output file (e.g. loader.exe or loader.dll). Depending on what file extension defined will determine if Freeze makes a dll or exe.&#xA;  -console&#xA;        Only for Binary Payloads - Generates verbose console information when the payload is executed. This will disable the hidden window feature.&#xA;  -encrypt&#xA;        Encrypts the shellcode using AES 256 encryption&#xA;  -export string&#xA;        For DLL Loaders Only - Specify a specific Export function for a loader to have.&#xA;  -process string&#xA;        The name of process to spawn. This process has to exist in C:\Windows\System32\. Example &#39;notepad.exe&#39; (default &#34;notepad.exe&#34;)&#xA;  -sandbox&#xA;        Enables sandbox evasion by checking:&#xA;                Is Endpoint joined to a domain?&#xA;                Does the Endpoint have more than 2 CPUs?&#xA;                Does the Endpoint have more than 4 gigs of RAM?&#xA;  -sha256&#xA;        Provides the SHA256 value of the loaders (This is useful for tracking)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Binary vs DLL&lt;/h2&gt; &#xA;&lt;p&gt;Freeze can generate either a &lt;code&gt;.exe&lt;/code&gt; or &lt;code&gt;.dll&lt;/code&gt; file. In order to specify this, ensure that the &lt;code&gt;-O&lt;/code&gt; command line option ends with either a &lt;code&gt;.exe&lt;/code&gt; for binaries or &lt;code&gt;.dll&lt;/code&gt; for dlls. No other file types are currently supported. In the case of DLL files, Freeze can also add additional export functionality. To do this use the &lt;code&gt;-export&lt;/code&gt; with specific export function name.&lt;/p&gt; &#xA;&lt;h2&gt;Console&lt;/h2&gt; &#xA;&lt;p&gt;Freeze utilizes a technique to first create the process and then move it into the background. This does two things - first it helps keep the process hidden, and second, avoids being detected by any EDR product. Spawning a process right away in the background can be very suspicious and an indicator of maliciousness. Freeze does this by calling the ‘GetConsoleWindow’ and ‘ShowWindow’ Windows function after the process is created and the EDR’s hooks are loaded, and then changes the windows attributes to hidden. Freeze utilizes these APIs rather than using the traditional -ldflags -H=windowsgui, as this is highly signatured and classified in most security products as an Indicator of Compromise.&lt;/p&gt; &#xA;&lt;p&gt;If the &lt;code&gt;-console&lt;/code&gt; command-line option is selected, Freeze will not hide the process in the background. Instead, Freeze will add several debug messages displaying what the loader is doing.&lt;/p&gt; &#xA;&lt;h2&gt;Credit&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Special thanks to aahmad097 for developing &lt;a href=&#34;https://github.com/aahmad097/AlternativeShellcodeExec&#34;&gt;AlternativeShellcodeExec&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Special thanks to mvdan for developing &lt;a href=&#34;https://github.com/burrowers/garble&#34;&gt;Garble&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>