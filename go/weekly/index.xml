<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-02-18T01:47:03Z</updated>
  <subtitle>Weekly Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>hyperledger/fabric</title>
    <updated>2024-02-18T01:47:03Z</updated>
    <id>tag:github.com,2024-02-18:/hyperledger/fabric</id>
    <link href="https://github.com/hyperledger/fabric" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Hyperledger Fabric is an enterprise-grade permissioned distributed ledger framework for developing solutions and applications. Its modular and versatile design satisfies a broad range of industry use cases. It offers a unique approach to consensus that enables performance at scale while preserving privacy.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Hyperledger Fabric&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://dev.azure.com/Hyperledger/Fabric/_build/latest?definitionId=51&amp;amp;branchName=main&#34;&gt;&lt;img src=&#34;https://dev.azure.com/Hyperledger/Fabric/_apis/build/status/Merge?branchName=main&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://bestpractices.coreinfrastructure.org/projects/955&#34;&gt;&lt;img src=&#34;https://bestpractices.coreinfrastructure.org/projects/955/badge&#34; alt=&#34;CII Best Practices&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/hyperledger/fabric&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/hyperledger/fabric&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://godoc.org/github.com/hyperledger/fabric&#34;&gt;&lt;img src=&#34;https://godoc.org/github.com/hyperledger/fabric?status.svg?sanitize=true&#34; alt=&#34;GoDoc&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://hyperledger-fabric.readthedocs.io/en/latest&#34;&gt;&lt;img src=&#34;https://readthedocs.org/projects/hyperledger-fabric/badge/?version=latest&#34; alt=&#34;Documentation Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This project is a &lt;em&gt;Graduated&lt;/em&gt; Hyperledger project. For more information on the history of this project, see the &lt;a href=&#34;https://wiki.hyperledger.org/display/fabric&#34;&gt;Fabric wiki page&lt;/a&gt;. Information on what &lt;em&gt;Graduated&lt;/em&gt; entails can be found in the &lt;a href=&#34;https://tsc.hyperledger.org/project-lifecycle.html&#34;&gt;Hyperledger Project Lifecycle document&lt;/a&gt;. Hyperledger Fabric is a platform for distributed ledger solutions underpinned by a modular architecture delivering high degrees of confidentiality, resiliency, flexibility, and scalability. It is designed to support pluggable implementations of different components and accommodate the complexity and intricacies that exist across the economic ecosystem.&lt;/p&gt; &#xA;&lt;p&gt;Hyperledger Fabric delivers a uniquely elastic and extensible architecture, distinguishing it from alternative blockchain solutions. Planning for the future of enterprise blockchain requires building on top of a fully-vetted, open-source architecture; Hyperledger Fabric is your starting point.&lt;/p&gt; &#xA;&lt;h2&gt;Releases&lt;/h2&gt; &#xA;&lt;p&gt;Fabric provides periodic releases with new features and improvements. Additionally, certain releases are designated as long-term support (LTS) releases. Important fixes will be backported to the most recent LTS release, and to the prior LTS release during periods of LTS release overlap. For more details see the &lt;a href=&#34;https://github.com/hyperledger/fabric-rfcs/raw/main/text/0005-lts-release-strategy.md&#34;&gt;LTS strategy&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Current LTS release:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://hyperledger-fabric.readthedocs.io/en/release-2.5/whatsnew.html&#34;&gt;v2.5.x&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Prior LTS release:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://hyperledger-fabric.readthedocs.io/en/release-2.2/whatsnew.html&#34;&gt;v2.2.x&lt;/a&gt; (maintained through December 2023)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Historic LTS releases:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://hyperledger-fabric.readthedocs.io/en/release-1.4/whatsnew.html&#34;&gt;v1.4.x&lt;/a&gt; (maintenance ended in April 2021 with the delivery of v1.4.12)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Unless specified otherwise, all releases will be upgradable from the prior minor release. Additionally, each LTS release is upgradable to the next LTS release.&lt;/p&gt; &#xA;&lt;p&gt;Fabric releases and release notes can be found on the &lt;a href=&#34;https://github.com/hyperledger/fabric/releases&#34;&gt;GitHub releases page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Please visit the &lt;a href=&#34;https://github.com/hyperledger/fabric/labels/Epic&#34;&gt;GitHub issues with Epic label&lt;/a&gt; for our release roadmap.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation, Getting Started and Developer Guides&lt;/h2&gt; &#xA;&lt;p&gt;Please visit our online documentation for information on getting started using and developing with the fabric, SDK and chaincode:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://hyperledger-fabric.readthedocs.io/en/release-2.5/&#34;&gt;v2.5&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://hyperledger-fabric.readthedocs.io/en/release-2.4/&#34;&gt;v2.4&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://hyperledger-fabric.readthedocs.io/en/release-2.3/&#34;&gt;v2.3&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://hyperledger-fabric.readthedocs.io/en/release-2.2/&#34;&gt;v2.2&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://hyperledger-fabric.readthedocs.io/en/release-2.1/&#34;&gt;v2.1&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://hyperledger-fabric.readthedocs.io/en/release-2.0/&#34;&gt;v2.0&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://hyperledger-fabric.readthedocs.io/en/release-1.4/&#34;&gt;v1.4&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://hyperledger-fabric.readthedocs.io/en/release-1.3/&#34;&gt;v1.3&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://hyperledger-fabric.readthedocs.io/en/release-1.2/&#34;&gt;v1.2&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://hyperledger-fabric.readthedocs.io/en/release-1.1/&#34;&gt;v1.1&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://hyperledger-fabric.readthedocs.io/en/latest/&#34;&gt;main branch (development)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;It&#39;s recommended for first-time users to begin by going through the Getting Started section of the documentation in order to gain familiarity with the Hyperledger Fabric components and the basic transaction flow.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;We welcome contributions to the Hyperledger Fabric project in many forms. There’s always plenty to do! Check &lt;a href=&#34;http://hyperledger-fabric.readthedocs.io/en/latest/CONTRIBUTING.html&#34;&gt;the documentation on how to contribute to this project&lt;/a&gt; for the full details.&lt;/p&gt; &#xA;&lt;h2&gt;Community&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.meetup.com/pro/hyperledger/&#34;&gt;Hyperledger Community&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://lists.hyperledger.org/&#34;&gt;Hyperledger mailing lists and archives&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://discord.com/invite/hyperledger&#34;&gt;Hyperledger Discord Chat&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/hyperledger/fabric/issues&#34;&gt;Hyperledger Fabric Issue Tracking (GitHub Issues)&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://wiki.hyperledger.org/display/Fabric&#34;&gt;Hyperledger Fabric Wiki&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://wiki.hyperledger.org/&#34;&gt;Hyperledger Wiki&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://wiki.hyperledger.org/display/HYP/Hyperledger+Code+of+Conduct&#34;&gt;Hyperledger Code of Conduct&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://wiki.hyperledger.org/display/HYP/Calendar+of+Public+Meetings&#34;&gt;Community Calendar&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License &lt;a name=&#34;license&#34;&gt;&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Hyperledger Project source code files are made available under the Apache License, Version 2.0 (Apache-2.0), located in the &lt;a href=&#34;https://raw.githubusercontent.com/hyperledger/fabric/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt; file. Hyperledger Project documentation files are made available under the Creative Commons Attribution 4.0 International License (CC-BY-4.0), available at &lt;a href=&#34;http://creativecommons.org/licenses/by/4.0/&#34;&gt;http://creativecommons.org/licenses/by/4.0/&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>junegunn/fzf</title>
    <updated>2024-02-18T01:47:03Z</updated>
    <id>tag:github.com,2024-02-18:/junegunn/fzf</id>
    <link href="https://github.com/junegunn/fzf" rel="alternate"></link>
    <summary type="html">&lt;p&gt;🌸 A command-line fuzzy finder&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;sup&gt;Special thanks to:&lt;/sup&gt; &#xA; &lt;br&gt; &#xA; &lt;br&gt; &#xA; &lt;a href=&#34;https://warp.dev/?utm_source=github&amp;amp;utm_medium=referral&amp;amp;utm_campaign=fzf_20240209&#34;&gt; &#xA;  &lt;div&gt; &#xA;   &lt;img src=&#34;https://raw.githubusercontent.com/junegunn/i/master/warp.png&#34; width=&#34;300&#34; alt=&#34;Warp&#34;&gt; &#xA;  &lt;/div&gt; &lt;b&gt;Warp is a modern, Rust-based terminal with AI built in so you and your team can build great software, faster.&lt;/b&gt; &#xA;  &lt;div&gt; &#xA;   &lt;sup&gt;Visit warp.dev to learn more.&lt;/sup&gt; &#xA;  &lt;/div&gt; &lt;/a&gt; &#xA; &lt;br&gt; &#xA; &lt;hr&gt; &#xA;&lt;/div&gt; &#xA;&lt;br&gt; &#xA;&lt;h1&gt;&lt;img src=&#34;https://raw.githubusercontent.com/junegunn/i/master/fzf.png&#34; height=&#34;170&#34; alt=&#34;fzf - a command-line fuzzy finder&#34;&gt; &lt;a href=&#34;https://github.com/junegunn/fzf/actions&#34;&gt;&lt;img src=&#34;https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg?sanitize=true&#34; alt=&#34;github-actions&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;fzf is a general-purpose command-line fuzzy finder.&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/junegunn/i/master/fzf-preview.png&#34; width=&#34;640&#34;&gt; &#xA;&lt;p&gt;It&#39;s an interactive Unix filter for command-line that can be used with any list; files, command history, processes, hostnames, bookmarks, git commits, etc.&lt;/p&gt; &#xA;&lt;h2&gt;Pros&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Portable, no dependencies&lt;/li&gt; &#xA; &lt;li&gt;Blazingly fast&lt;/li&gt; &#xA; &lt;li&gt;The most comprehensive feature set&lt;/li&gt; &#xA; &lt;li&gt;Flexible layout&lt;/li&gt; &#xA; &lt;li&gt;Batteries included &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Vim/Neovim plugin, key bindings, and fuzzy auto-completion&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Sponsors ❤️&lt;/h2&gt; &#xA;&lt;p&gt;I would like to thank all the sponsors of this project who make it possible for me to continue to improve fzf.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;d like to sponsor this project, please visit &lt;a href=&#34;https://github.com/sponsors/junegunn&#34;&gt;https://github.com/sponsors/junegunn&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;!-- sponsors --&gt;&#xA;&lt;a href=&#34;https://github.com/miyanokomiya&#34;&gt;&lt;img src=&#34;https://github.com/miyanokomiya.png&#34; width=&#34;60px&#34; alt=&#34;miyanokomiya&#34;&gt;&lt;/a&gt;&#xA;&lt;a href=&#34;https://github.com/jonhoo&#34;&gt;&lt;img src=&#34;https://github.com/jonhoo.png&#34; width=&#34;60px&#34; alt=&#34;Jon Gjengset&#34;&gt;&lt;/a&gt;&#xA;&lt;a href=&#34;https://github.com/AceofSpades5757&#34;&gt;&lt;img src=&#34;https://github.com/AceofSpades5757.png&#34; width=&#34;60px&#34; alt=&#34;Kyle L. Davis&#34;&gt;&lt;/a&gt;&#xA;&lt;a href=&#34;https://github.com/Frederick888&#34;&gt;&lt;img src=&#34;https://github.com/Frederick888.png&#34; width=&#34;60px&#34; alt=&#34;Frederick Zhang&#34;&gt;&lt;/a&gt;&#xA;&lt;a href=&#34;https://github.com/moritzdietz&#34;&gt;&lt;img src=&#34;https://github.com/moritzdietz.png&#34; width=&#34;60px&#34; alt=&#34;Moritz Dietz&#34;&gt;&lt;/a&gt;&#xA;&lt;a href=&#34;https://github.com/mikker&#34;&gt;&lt;img src=&#34;https://github.com/mikker.png&#34; width=&#34;60px&#34; alt=&#34;Mikkel Malmberg&#34;&gt;&lt;/a&gt;&#xA;&lt;a href=&#34;https://github.com/pldubouilh&#34;&gt;&lt;img src=&#34;https://github.com/pldubouilh.png&#34; width=&#34;60px&#34; alt=&#34;Pierre Dubouilh&#34;&gt;&lt;/a&gt;&#xA;&lt;a href=&#34;https://github.com/rcorre&#34;&gt;&lt;img src=&#34;https://github.com/rcorre.png&#34; width=&#34;60px&#34; alt=&#34;Ryan Roden-Corrent&#34;&gt;&lt;/a&gt;&#xA;&lt;a href=&#34;https://github.com/blissdev&#34;&gt;&lt;img src=&#34;https://github.com/blissdev.png&#34; width=&#34;60px&#34; alt=&#34;Jordan Arentsen&#34;&gt;&lt;/a&gt;&#xA;&lt;a href=&#34;https://github.com/mislav&#34;&gt;&lt;img src=&#34;https://github.com/mislav.png&#34; width=&#34;60px&#34; alt=&#34;Mislav Marohnić&#34;&gt;&lt;/a&gt;&#xA;&lt;a href=&#34;https://github.com/aexvir&#34;&gt;&lt;img src=&#34;https://github.com/aexvir.png&#34; width=&#34;60px&#34; alt=&#34;Alex Viscreanu&#34;&gt;&lt;/a&gt;&#xA;&lt;a href=&#34;https://github.com/dbalatero&#34;&gt;&lt;img src=&#34;https://github.com/dbalatero.png&#34; width=&#34;60px&#34; alt=&#34;David Balatero&#34;&gt;&lt;/a&gt;&#xA;&lt;a href=&#34;https://github.com/comatory&#34;&gt;&lt;img src=&#34;https://github.com/comatory.png&#34; width=&#34;60px&#34; alt=&#34;Ondrej Synacek&#34;&gt;&lt;/a&gt;&#xA;&lt;a href=&#34;https://github.com/moobar&#34;&gt;&lt;img src=&#34;https://github.com/moobar.png&#34; width=&#34;60px&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&#xA;&lt;a href=&#34;https://github.com/majjoha&#34;&gt;&lt;img src=&#34;https://github.com/majjoha.png&#34; width=&#34;60px&#34; alt=&#34;Mathias Jean Johansen&#34;&gt;&lt;/a&gt;&#xA;&lt;a href=&#34;https://github.com/benelan&#34;&gt;&lt;img src=&#34;https://github.com/benelan.png&#34; width=&#34;60px&#34; alt=&#34;Ben Elan&#34;&gt;&lt;/a&gt;&#xA;&lt;a href=&#34;https://github.com/pawelduda&#34;&gt;&lt;img src=&#34;https://github.com/pawelduda.png&#34; width=&#34;60px&#34; alt=&#34;Paweł Duda&#34;&gt;&lt;/a&gt;&#xA;&lt;a href=&#34;https://github.com/slezica&#34;&gt;&lt;img src=&#34;https://github.com/slezica.png&#34; width=&#34;60px&#34; alt=&#34;Santiago Lezica&#34;&gt;&lt;/a&gt;&#xA;&lt;a href=&#34;https://github.com/pbwn&#34;&gt;&lt;img src=&#34;https://github.com/pbwn.png&#34; width=&#34;60px&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&#xA;&lt;a href=&#34;https://github.com/timgluz&#34;&gt;&lt;img src=&#34;https://github.com/timgluz.png&#34; width=&#34;60px&#34; alt=&#34;Timo Sulg&#34;&gt;&lt;/a&gt;&#xA;&lt;a href=&#34;https://github.com/pyrho&#34;&gt;&lt;img src=&#34;https://github.com/pyrho.png&#34; width=&#34;60px&#34; alt=&#34;Damien Rajon&#34;&gt;&lt;/a&gt;&#xA;&lt;a href=&#34;https://github.com/ArtBIT&#34;&gt;&lt;img src=&#34;https://github.com/ArtBIT.png&#34; width=&#34;60px&#34; alt=&#34;ArtBIT&#34;&gt;&lt;/a&gt;&#xA;&lt;a href=&#34;https://github.com/da-moon&#34;&gt;&lt;img src=&#34;https://github.com/da-moon.png&#34; width=&#34;60px&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&#xA;&lt;a href=&#34;https://github.com/hovissimo&#34;&gt;&lt;img src=&#34;https://github.com/hovissimo.png&#34; width=&#34;60px&#34; alt=&#34;Hovis&#34;&gt;&lt;/a&gt;&#xA;&lt;a href=&#34;https://github.com/dariusjonda&#34;&gt;&lt;img src=&#34;https://github.com/dariusjonda.png&#34; width=&#34;60px&#34; alt=&#34;Darius Jonda&#34;&gt;&lt;/a&gt;&#xA;&lt;a href=&#34;https://github.com/mortymacs&#34;&gt;&lt;img src=&#34;https://github.com/mortymacs.png&#34; width=&#34;60px&#34; alt=&#34;Morteza NourelahiAlamdari&#34;&gt;&lt;/a&gt;&#xA;&lt;a href=&#34;https://github.com/cristiand391&#34;&gt;&lt;img src=&#34;https://github.com/cristiand391.png&#34; width=&#34;60px&#34; alt=&#34;Cristian Dominguez&#34;&gt;&lt;/a&gt;&#xA;&lt;a href=&#34;https://github.com/eliangcs&#34;&gt;&lt;img src=&#34;https://github.com/eliangcs.png&#34; width=&#34;60px&#34; alt=&#34;Chang-Hung Liang&#34;&gt;&lt;/a&gt;&#xA;&lt;a href=&#34;https://github.com/asphaltbuffet&#34;&gt;&lt;img src=&#34;https://github.com/asphaltbuffet.png&#34; width=&#34;60px&#34; alt=&#34;Ben Lechlitner&#34;&gt;&lt;/a&gt;&#xA;&lt;a href=&#34;https://github.com/yash1th&#34;&gt;&lt;img src=&#34;https://github.com/yash1th.png&#34; width=&#34;60px&#34; alt=&#34;yash&#34;&gt;&lt;/a&gt;&#xA;&lt;a href=&#34;https://github.com/looshch&#34;&gt;&lt;img src=&#34;https://github.com/looshch.png&#34; width=&#34;60px&#34; alt=&#34;george looshch&#34;&gt;&lt;/a&gt;&#xA;&lt;a href=&#34;https://github.com/kg8m&#34;&gt;&lt;img src=&#34;https://github.com/kg8m.png&#34; width=&#34;60px&#34; alt=&#34;Takumi KAGIYAMA&#34;&gt;&lt;/a&gt;&#xA;&lt;a href=&#34;https://github.com/polm&#34;&gt;&lt;img src=&#34;https://github.com/polm.png&#34; width=&#34;60px&#34; alt=&#34;Paul O&#39;Leary McCann&#34;&gt;&lt;/a&gt;&#xA;&lt;a href=&#34;https://github.com/rbeeger&#34;&gt;&lt;img src=&#34;https://github.com/rbeeger.png&#34; width=&#34;60px&#34; alt=&#34;Robert Beeger&#34;&gt;&lt;/a&gt;&#xA;&lt;a href=&#34;https://github.com/veebch&#34;&gt;&lt;img src=&#34;https://github.com/veebch.png&#34; width=&#34;60px&#34; alt=&#34;gmail&#34;&gt;&lt;/a&gt;&#xA;&lt;a href=&#34;https://github.com/khuedoan&#34;&gt;&lt;img src=&#34;https://github.com/khuedoan.png&#34; width=&#34;60px&#34; alt=&#34;Khue Doan&#34;&gt;&lt;/a&gt;&#xA;&lt;a href=&#34;https://github.com/yowayb&#34;&gt;&lt;img src=&#34;https://github.com/yowayb.png&#34; width=&#34;60px&#34; alt=&#34;Yoway Buorn&#34;&gt;&lt;/a&gt;&#xA;&lt;a href=&#34;https://github.com/scalisi&#34;&gt;&lt;img src=&#34;https://github.com/scalisi.png&#34; width=&#34;60px&#34; alt=&#34;Josh Scalisi&#34;&gt;&lt;/a&gt;&#xA;&lt;a href=&#34;https://github.com/alecbcs&#34;&gt;&lt;img src=&#34;https://github.com/alecbcs.png&#34; width=&#34;60px&#34; alt=&#34;Alec Scott&#34;&gt;&lt;/a&gt;&#xA;&lt;a href=&#34;https://github.com/thnxdev&#34;&gt;&lt;img src=&#34;https://github.com/thnxdev.png&#34; width=&#34;60px&#34; alt=&#34;thanks.dev&#34;&gt;&lt;/a&gt;&#xA;&lt;a href=&#34;https://github.com/artursapek&#34;&gt;&lt;img src=&#34;https://github.com/artursapek.png&#34; width=&#34;60px&#34; alt=&#34;Artur Sapek&#34;&gt;&lt;/a&gt;&#xA;&lt;a href=&#34;https://github.com/ramnes&#34;&gt;&lt;img src=&#34;https://github.com/ramnes.png&#34; width=&#34;60px&#34; alt=&#34;Guillaume Gelin&#34;&gt;&lt;/a&gt;&#xA;&lt;a href=&#34;https://github.com/mikkifr&#34;&gt;&lt;img src=&#34;https://github.com/mikkifr.png&#34; width=&#34;60px&#34; alt=&#34;Mikki Freeman&#34;&gt;&lt;/a&gt;&#xA;&lt;a href=&#34;https://github.com/jyc&#34;&gt;&lt;img src=&#34;https://github.com/jyc.png&#34; width=&#34;60px&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&#xA;&lt;a href=&#34;https://github.com/mrcnski&#34;&gt;&lt;img src=&#34;https://github.com/mrcnski.png&#34; width=&#34;60px&#34; alt=&#34;Marcin S.&#34;&gt;&lt;/a&gt;&#xA;&lt;a href=&#34;https://github.com/roblevy&#34;&gt;&lt;img src=&#34;https://github.com/roblevy.png&#34; width=&#34;60px&#34; alt=&#34;Rob Levy&#34;&gt;&lt;/a&gt;&#xA;&lt;a href=&#34;https://github.com/michael-dwan&#34;&gt;&lt;img src=&#34;https://github.com/michael-dwan.png&#34; width=&#34;60px&#34; alt=&#34;Michael Dwan&#34;&gt;&lt;/a&gt;&#xA;&lt;a href=&#34;https://github.com/warpdotdev&#34;&gt;&lt;img src=&#34;https://github.com/warpdotdev.png&#34; width=&#34;60px&#34; alt=&#34;Warp&#34;&gt;&lt;/a&gt;&#xA;&lt;a href=&#34;https://github.com/glozow&#34;&gt;&lt;img src=&#34;https://github.com/glozow.png&#34; width=&#34;60px&#34; alt=&#34;Gloria Zhao&#34;&gt;&lt;/a&gt;&#xA;&lt;!-- sponsors --&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;!-- vim-markdown-toc GFM --&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/junegunn/fzf/master/#installation&#34;&gt;Installation&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/junegunn/fzf/master/#using-homebrew&#34;&gt;Using Homebrew&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/junegunn/fzf/master/#using-git&#34;&gt;Using git&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/junegunn/fzf/master/#using-linux-package-managers&#34;&gt;Using Linux package managers&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/junegunn/fzf/master/#windows&#34;&gt;Windows&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/junegunn/fzf/master/#as-vim-plugin&#34;&gt;As Vim plugin&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/junegunn/fzf/master/#upgrading-fzf&#34;&gt;Upgrading fzf&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/junegunn/fzf/master/#building-fzf&#34;&gt;Building fzf&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/junegunn/fzf/master/#usage&#34;&gt;Usage&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/junegunn/fzf/master/#using-the-finder&#34;&gt;Using the finder&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/junegunn/fzf/master/#layout&#34;&gt;Layout&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/junegunn/fzf/master/#search-syntax&#34;&gt;Search syntax&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/junegunn/fzf/master/#environment-variables&#34;&gt;Environment variables&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/junegunn/fzf/master/#options&#34;&gt;Options&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/junegunn/fzf/master/#demo&#34;&gt;Demo&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/junegunn/fzf/master/#examples&#34;&gt;Examples&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/junegunn/fzf/master/#fzf-tmux-script&#34;&gt;&lt;code&gt;fzf-tmux&lt;/code&gt; script&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/junegunn/fzf/master/#key-bindings-for-command-line&#34;&gt;Key bindings for command-line&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/junegunn/fzf/master/#fuzzy-completion-for-bash-and-zsh&#34;&gt;Fuzzy completion for bash and zsh&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/junegunn/fzf/master/#files-and-directories&#34;&gt;Files and directories&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/junegunn/fzf/master/#process-ids&#34;&gt;Process IDs&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/junegunn/fzf/master/#host-names&#34;&gt;Host names&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/junegunn/fzf/master/#environment-variables--aliases&#34;&gt;Environment variables / Aliases&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/junegunn/fzf/master/#settings&#34;&gt;Settings&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/junegunn/fzf/master/#supported-commands&#34;&gt;Supported commands&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/junegunn/fzf/master/#custom-fuzzy-completion&#34;&gt;Custom fuzzy completion&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/junegunn/fzf/master/#vim-plugin&#34;&gt;Vim plugin&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/junegunn/fzf/master/#advanced-topics&#34;&gt;Advanced topics&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/junegunn/fzf/master/#performance&#34;&gt;Performance&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/junegunn/fzf/master/#executing-external-programs&#34;&gt;Executing external programs&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/junegunn/fzf/master/#turning-into-a-different-process&#34;&gt;Turning into a different process&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/junegunn/fzf/master/#reloading-the-candidate-list&#34;&gt;Reloading the candidate list&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/junegunn/fzf/master/#1-update-the-list-of-processes-by-pressing-ctrl-r&#34;&gt;1. Update the list of processes by pressing CTRL-R&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/junegunn/fzf/master/#2-switch-between-sources-by-pressing-ctrl-d-or-ctrl-f&#34;&gt;2. Switch between sources by pressing CTRL-D or CTRL-F&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/junegunn/fzf/master/#3-interactive-ripgrep-integration&#34;&gt;3. Interactive ripgrep integration&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/junegunn/fzf/master/#preview-window&#34;&gt;Preview window&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/junegunn/fzf/master/#previewing-an-image&#34;&gt;Previewing an image&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/junegunn/fzf/master/#tips&#34;&gt;Tips&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/junegunn/fzf/master/#respecting-gitignore&#34;&gt;Respecting &lt;code&gt;.gitignore&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/junegunn/fzf/master/#fish-shell&#34;&gt;Fish shell&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/junegunn/fzf/master/#fzf-theme-playground&#34;&gt;fzf Theme Playground&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/junegunn/fzf/master/#related-projects&#34;&gt;Related projects&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/junegunn/fzf/master/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- vim-markdown-toc --&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;fzf project consists of the following components:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;fzf&lt;/code&gt; executable&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;fzf-tmux&lt;/code&gt; script for launching fzf in a tmux pane&lt;/li&gt; &#xA; &lt;li&gt;Shell extensions &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Key bindings (&lt;code&gt;CTRL-T&lt;/code&gt;, &lt;code&gt;CTRL-R&lt;/code&gt;, and &lt;code&gt;ALT-C&lt;/code&gt;) (bash, zsh, fish)&lt;/li&gt; &#xA;   &lt;li&gt;Fuzzy auto-completion (bash, zsh)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Vim/Neovim plugin&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can &lt;a href=&#34;https://github.com/junegunn/fzf/releases&#34;&gt;download fzf executable&lt;/a&gt; alone if you don&#39;t need the extra stuff.&lt;/p&gt; &#xA;&lt;h3&gt;Using Homebrew&lt;/h3&gt; &#xA;&lt;p&gt;You can use &lt;a href=&#34;https://brew.sh/&#34;&gt;Homebrew&lt;/a&gt; (on macOS or Linux) to install fzf.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;brew install fzf&#xA;&#xA;# To install useful key bindings and fuzzy completion:&#xA;$(brew --prefix)/opt/fzf/install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;fzf is also available &lt;a href=&#34;https://github.com/macports/macports-ports/raw/master/sysutils/fzf/Portfile&#34;&gt;via MacPorts&lt;/a&gt;: &lt;code&gt;sudo port install fzf&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Using git&lt;/h3&gt; &#xA;&lt;p&gt;Alternatively, you can &#34;git clone&#34; this repository to any directory and run &lt;a href=&#34;https://github.com/junegunn/fzf/raw/master/install&#34;&gt;install&lt;/a&gt; script.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone --depth 1 https://github.com/junegunn/fzf.git ~/.fzf&#xA;~/.fzf/install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using Linux package managers&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Package Manager&lt;/th&gt; &#xA;   &lt;th&gt;Linux Distribution&lt;/th&gt; &#xA;   &lt;th&gt;Command&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;APK&lt;/td&gt; &#xA;   &lt;td&gt;Alpine Linux&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;sudo apk add fzf&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;APT&lt;/td&gt; &#xA;   &lt;td&gt;Debian 9+/Ubuntu 19.10+&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;sudo apt install fzf&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Conda&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;conda install -c conda-forge fzf&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;DNF&lt;/td&gt; &#xA;   &lt;td&gt;Fedora&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;sudo dnf install fzf&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Nix&lt;/td&gt; &#xA;   &lt;td&gt;NixOS, etc.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;nix-env -iA nixpkgs.fzf&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Pacman&lt;/td&gt; &#xA;   &lt;td&gt;Arch Linux&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;sudo pacman -S fzf&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;pkg&lt;/td&gt; &#xA;   &lt;td&gt;FreeBSD&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;pkg install fzf&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;pkgin&lt;/td&gt; &#xA;   &lt;td&gt;NetBSD&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;pkgin install fzf&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;pkg_add&lt;/td&gt; &#xA;   &lt;td&gt;OpenBSD&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;pkg_add fzf&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Portage&lt;/td&gt; &#xA;   &lt;td&gt;Gentoo&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;emerge --ask app-shells/fzf&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Spack&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;spack install fzf&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;XBPS&lt;/td&gt; &#xA;   &lt;td&gt;Void Linux&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;sudo xbps-install -S fzf&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Zypper&lt;/td&gt; &#xA;   &lt;td&gt;openSUSE&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;sudo zypper install fzf&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span&gt;⚠&lt;/span&gt; &lt;strong&gt;Key bindings (CTRL-T / CTRL-R / ALT-C) and fuzzy auto-completion may not be enabled by default.&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;Refer to the package documentation for more information. (e.g. &lt;code&gt;apt show fzf&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://repology.org/project/fzf/versions&#34;&gt;&lt;img src=&#34;https://repology.org/badge/vertical-allrepos/fzf.svg?sanitize=true&#34; alt=&#34;Packaging status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Windows&lt;/h3&gt; &#xA;&lt;p&gt;Pre-built binaries for Windows can be downloaded &lt;a href=&#34;https://github.com/junegunn/fzf/releases&#34;&gt;here&lt;/a&gt;. fzf is also available via &lt;a href=&#34;https://chocolatey.org/packages/fzf&#34;&gt;Chocolatey&lt;/a&gt;, &lt;a href=&#34;https://github.com/ScoopInstaller/Main/raw/master/bucket/fzf.json&#34;&gt;Scoop&lt;/a&gt;, &lt;a href=&#34;https://github.com/microsoft/winget-pkgs/tree/master/manifests/j/junegunn/fzf&#34;&gt;Winget&lt;/a&gt;, and &lt;a href=&#34;https://packages.msys2.org/base/mingw-w64-fzf&#34;&gt;MSYS2&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Package manager&lt;/th&gt; &#xA;   &lt;th&gt;Command&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Chocolatey&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;choco install fzf&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Scoop&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;scoop install fzf&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Winget&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;winget install fzf&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;MSYS2 (pacman)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;pacman -S $MINGW_PACKAGE_PREFIX-fzf&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Known issues and limitations on Windows can be found on &lt;a href=&#34;https://github.com/junegunn/fzf/wiki/Windows&#34;&gt;the wiki page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;As Vim plugin&lt;/h3&gt; &#xA;&lt;p&gt;If you use &lt;a href=&#34;https://github.com/junegunn/vim-plug&#34;&gt;vim-plug&lt;/a&gt;, add this line to your Vim configuration file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;Plug &#39;junegunn/fzf&#39;, { &#39;do&#39;: { -&amp;gt; fzf#install() } }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;fzf#install()&lt;/code&gt; makes sure that you have the latest binary, but it&#39;s optional, so you can omit it if you use a plugin manager that doesn&#39;t support hooks.&lt;/p&gt; &#xA;&lt;p&gt;For more installation options, see &lt;a href=&#34;https://raw.githubusercontent.com/junegunn/fzf/master/README-VIM.md&#34;&gt;README-VIM.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Upgrading fzf&lt;/h2&gt; &#xA;&lt;p&gt;fzf is being actively developed, and you might want to upgrade it once in a while. Please follow the instruction below depending on the installation method used.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;git: &lt;code&gt;cd ~/.fzf &amp;amp;&amp;amp; git pull &amp;amp;&amp;amp; ./install&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;brew: &lt;code&gt;brew update; brew upgrade fzf&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;macports: &lt;code&gt;sudo port upgrade fzf&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;chocolatey: &lt;code&gt;choco upgrade fzf&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;vim-plug: &lt;code&gt;:PlugUpdate fzf&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Building fzf&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/junegunn/fzf/master/BUILD.md&#34;&gt;BUILD.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;fzf will launch interactive finder, read the list from STDIN, and write the selected item to STDOUT.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;find * -type f | fzf &amp;gt; selected&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Without STDIN pipe, fzf will traverse the file system under the current directory to get the list of files, skipping hidden directories. (You can override the default behavior with &lt;code&gt;FZF_DEFAULT_COMMAND&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;vim $(fzf)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;em&gt;&lt;span&gt;💡&lt;/span&gt; A more robust solution would be to use &lt;code&gt;xargs&lt;/code&gt; but we&#39;ve presented the above as it&#39;s easier to grasp&lt;/em&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;fzf --print0 | xargs -0 -o vim&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;em&gt;&lt;span&gt;💡&lt;/span&gt; fzf also has the ability to turn itself into a different process.&lt;/em&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;fzf --bind &#39;enter:become(vim {})&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;em&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/junegunn/fzf/master/#turning-into-a-different-process&#34;&gt;Turning into a different process&lt;/a&gt; for more information.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Using the finder&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;CTRL-K&lt;/code&gt; / &lt;code&gt;CTRL-J&lt;/code&gt; (or &lt;code&gt;CTRL-P&lt;/code&gt; / &lt;code&gt;CTRL-N&lt;/code&gt;) to move cursor up and down&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Enter&lt;/code&gt; key to select the item, &lt;code&gt;CTRL-C&lt;/code&gt; / &lt;code&gt;CTRL-G&lt;/code&gt; / &lt;code&gt;ESC&lt;/code&gt; to exit&lt;/li&gt; &#xA; &lt;li&gt;On multi-select mode (&lt;code&gt;-m&lt;/code&gt;), &lt;code&gt;TAB&lt;/code&gt; and &lt;code&gt;Shift-TAB&lt;/code&gt; to mark multiple items&lt;/li&gt; &#xA; &lt;li&gt;Emacs style key bindings&lt;/li&gt; &#xA; &lt;li&gt;Mouse: scroll, click, double-click; shift-click and shift-scroll on multi-select mode&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Layout&lt;/h3&gt; &#xA;&lt;p&gt;fzf by default starts in fullscreen mode, but you can make it start below the cursor with &lt;code&gt;--height&lt;/code&gt; option.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;vim $(fzf --height 40%)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Also, check out &lt;code&gt;--reverse&lt;/code&gt; and &lt;code&gt;--layout&lt;/code&gt; options if you prefer &#34;top-down&#34; layout instead of the default &#34;bottom-up&#34; layout.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;vim $(fzf --height 40% --reverse)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can add these options to &lt;code&gt;$FZF_DEFAULT_OPTS&lt;/code&gt; so that they&#39;re applied by default. For example,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;export FZF_DEFAULT_OPTS=&#39;--height 40% --layout=reverse --border&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Search syntax&lt;/h3&gt; &#xA;&lt;p&gt;Unless otherwise specified, fzf starts in &#34;extended-search mode&#34; where you can type in multiple search terms delimited by spaces. e.g. &lt;code&gt;^music .mp3$ sbtrkt !fire&lt;/code&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Token&lt;/th&gt; &#xA;   &lt;th&gt;Match type&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;sbtrkt&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;fuzzy-match&lt;/td&gt; &#xA;   &lt;td&gt;Items that match &lt;code&gt;sbtrkt&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;&#39;wild&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;exact-match (quoted)&lt;/td&gt; &#xA;   &lt;td&gt;Items that include &lt;code&gt;wild&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;^music&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;prefix-exact-match&lt;/td&gt; &#xA;   &lt;td&gt;Items that start with &lt;code&gt;music&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;.mp3$&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;suffix-exact-match&lt;/td&gt; &#xA;   &lt;td&gt;Items that end with &lt;code&gt;.mp3&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;!fire&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;inverse-exact-match&lt;/td&gt; &#xA;   &lt;td&gt;Items that do not include &lt;code&gt;fire&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;!^music&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;inverse-prefix-exact-match&lt;/td&gt; &#xA;   &lt;td&gt;Items that do not start with &lt;code&gt;music&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;!.mp3$&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;inverse-suffix-exact-match&lt;/td&gt; &#xA;   &lt;td&gt;Items that do not end with &lt;code&gt;.mp3&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;If you don&#39;t prefer fuzzy matching and do not wish to &#34;quote&#34; every word, start fzf with &lt;code&gt;-e&lt;/code&gt; or &lt;code&gt;--exact&lt;/code&gt; option. Note that when &lt;code&gt;--exact&lt;/code&gt; is set, &lt;code&gt;&#39;&lt;/code&gt;-prefix &#34;unquotes&#34; the term.&lt;/p&gt; &#xA;&lt;p&gt;A single bar character term acts as an OR operator. For example, the following query matches entries that start with &lt;code&gt;core&lt;/code&gt; and end with either &lt;code&gt;go&lt;/code&gt;, &lt;code&gt;rb&lt;/code&gt;, or &lt;code&gt;py&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;^core go$ | rb$ | py$&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Environment variables&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;FZF_DEFAULT_COMMAND&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Default command to use when input is tty&lt;/li&gt; &#xA;   &lt;li&gt;e.g. &lt;code&gt;export FZF_DEFAULT_COMMAND=&#39;fd --type f&#39;&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt; &#xA;    &lt;blockquote&gt; &#xA;     &lt;p&gt;&lt;span&gt;⚠&lt;/span&gt; This variable is not used by shell extensions due to the slight difference in requirements.&lt;/p&gt; &#xA;     &lt;p&gt;(e.g. &lt;code&gt;CTRL-T&lt;/code&gt; runs &lt;code&gt;$FZF_CTRL_T_COMMAND&lt;/code&gt; instead, &lt;code&gt;vim **&amp;lt;tab&amp;gt;&lt;/code&gt; runs &lt;code&gt;_fzf_compgen_path()&lt;/code&gt;, and &lt;code&gt;cd **&amp;lt;tab&amp;gt;&lt;/code&gt; runs &lt;code&gt;_fzf_compgen_dir()&lt;/code&gt;)&lt;/p&gt; &#xA;     &lt;p&gt;The available options are described later in this document.&lt;/p&gt; &#xA;    &lt;/blockquote&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;FZF_DEFAULT_OPTS&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Default options&lt;/li&gt; &#xA;   &lt;li&gt;e.g. &lt;code&gt;export FZF_DEFAULT_OPTS=&#34;--layout=reverse --inline-info&#34;&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Options&lt;/h3&gt; &#xA;&lt;p&gt;See the man page (&lt;code&gt;man fzf&lt;/code&gt;) for the full list of options.&lt;/p&gt; &#xA;&lt;h3&gt;Demo&lt;/h3&gt; &#xA;&lt;p&gt;If you learn by watching videos, check out this screencast by &lt;a href=&#34;https://github.com/samoshkin&#34;&gt;@samoshkin&lt;/a&gt; to explore &lt;code&gt;fzf&lt;/code&gt; features.&lt;/p&gt; &#xA;&lt;a title=&#34;fzf - command-line fuzzy finder&#34; href=&#34;https://www.youtube.com/watch?v=qgG5Jhi_Els&#34;&gt; &lt;img src=&#34;https://i.imgur.com/vtG8olE.png&#34; width=&#34;640&#34;&gt; &lt;/a&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/junegunn/fzf/wiki/examples&#34;&gt;Wiki page of examples&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;em&gt;Disclaimer: The examples on this page are maintained by the community and are not thoroughly tested&lt;/em&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/junegunn/fzf/raw/master/ADVANCED.md&#34;&gt;Advanced fzf examples&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;code&gt;fzf-tmux&lt;/code&gt; script&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/junegunn/fzf/master/bin/fzf-tmux&#34;&gt;fzf-tmux&lt;/a&gt; is a bash script that opens fzf in a tmux pane.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# usage: fzf-tmux [LAYOUT OPTIONS] [--] [FZF OPTIONS]&#xA;&#xA;# See available options&#xA;fzf-tmux --help&#xA;&#xA;# select git branches in horizontal split below (15 lines)&#xA;git branch | fzf-tmux -d 15&#xA;&#xA;# select multiple words in vertical split on the left (20% of screen width)&#xA;cat /usr/share/dict/words | fzf-tmux -l 20% --multi --reverse&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It will still work even when you&#39;re not on tmux, silently ignoring &lt;code&gt;-[pudlr]&lt;/code&gt; options, so you can invariably use &lt;code&gt;fzf-tmux&lt;/code&gt; in your scripts.&lt;/p&gt; &#xA;&lt;p&gt;Alternatively, you can use &lt;code&gt;--height HEIGHT[%]&lt;/code&gt; option not to start fzf in fullscreen mode.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;fzf --height 40%&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Key bindings for command-line&lt;/h2&gt; &#xA;&lt;p&gt;The install script will setup the following key bindings for bash, zsh, and fish.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;CTRL-T&lt;/code&gt; - Paste the selected files and directories onto the command-line &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Set &lt;code&gt;FZF_CTRL_T_COMMAND&lt;/code&gt; to override the default command&lt;/li&gt; &#xA;   &lt;li&gt;Set &lt;code&gt;FZF_CTRL_T_OPTS&lt;/code&gt; to pass additional options to fzf &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Preview file content using bat (https://github.com/sharkdp/bat)&#xA;export FZF_CTRL_T_OPTS=&#34;&#xA;  --preview &#39;bat -n --color=always {}&#39;&#xA;  --bind &#39;ctrl-/:change-preview-window(down|hidden|)&#39;&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;CTRL-R&lt;/code&gt; - Paste the selected command from history onto the command-line &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;If you want to see the commands in chronological order, press &lt;code&gt;CTRL-R&lt;/code&gt; again which toggles sorting by relevance&lt;/li&gt; &#xA;   &lt;li&gt;Set &lt;code&gt;FZF_CTRL_R_OPTS&lt;/code&gt; to pass additional options to fzf &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# CTRL-/ to toggle small preview window to see the full command&#xA;# CTRL-Y to copy the command into clipboard using pbcopy&#xA;export FZF_CTRL_R_OPTS=&#34;&#xA;  --preview &#39;echo {}&#39; --preview-window up:3:hidden:wrap&#xA;  --bind &#39;ctrl-/:toggle-preview&#39;&#xA;  --bind &#39;ctrl-y:execute-silent(echo -n {2..} | pbcopy)+abort&#39;&#xA;  --color header:italic&#xA;  --header &#39;Press CTRL-Y to copy command into clipboard&#39;&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ALT-C&lt;/code&gt; - cd into the selected directory &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Set &lt;code&gt;FZF_ALT_C_COMMAND&lt;/code&gt; to override the default command&lt;/li&gt; &#xA;   &lt;li&gt;Set &lt;code&gt;FZF_ALT_C_OPTS&lt;/code&gt; to pass additional options to fzf &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Print tree structure in the preview window&#xA;export FZF_ALT_C_OPTS=&#34;--preview &#39;tree -C {}&#39;&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you&#39;re on a tmux session, you can start fzf in a tmux split-pane or in a tmux popup window by setting &lt;code&gt;FZF_TMUX_OPTS&lt;/code&gt; (e.g. &lt;code&gt;export FZF_TMUX_OPTS=&#39;-p80%,60%&#39;&lt;/code&gt;). See &lt;code&gt;fzf-tmux --help&lt;/code&gt; for available options.&lt;/p&gt; &#xA;&lt;p&gt;More tips can be found on &lt;a href=&#34;https://github.com/junegunn/fzf/wiki/Configuring-shell-key-bindings&#34;&gt;the wiki page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Fuzzy completion for bash and zsh&lt;/h2&gt; &#xA;&lt;h3&gt;Files and directories&lt;/h3&gt; &#xA;&lt;p&gt;Fuzzy completion for files and directories can be triggered if the word before the cursor ends with the trigger sequence, which is by default &lt;code&gt;**&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;COMMAND [DIRECTORY/][FUZZY_PATTERN]**&amp;lt;TAB&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Files under the current directory&#xA;# - You can select multiple items with TAB key&#xA;vim **&amp;lt;TAB&amp;gt;&#xA;&#xA;# Files under parent directory&#xA;vim ../**&amp;lt;TAB&amp;gt;&#xA;&#xA;# Files under parent directory that match `fzf`&#xA;vim ../fzf**&amp;lt;TAB&amp;gt;&#xA;&#xA;# Files under your home directory&#xA;vim ~/**&amp;lt;TAB&amp;gt;&#xA;&#xA;&#xA;# Directories under current directory (single-selection)&#xA;cd **&amp;lt;TAB&amp;gt;&#xA;&#xA;# Directories under ~/github that match `fzf`&#xA;cd ~/github/fzf**&amp;lt;TAB&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Process IDs&lt;/h3&gt; &#xA;&lt;p&gt;Fuzzy completion for PIDs is provided for kill command.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Can select multiple processes with &amp;lt;TAB&amp;gt; or &amp;lt;Shift-TAB&amp;gt; keys&#xA;kill -9 **&amp;lt;TAB&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Host names&lt;/h3&gt; &#xA;&lt;p&gt;For ssh and telnet commands, fuzzy completion for hostnames is provided. The names are extracted from /etc/hosts and ~/.ssh/config.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;ssh **&amp;lt;TAB&amp;gt;&#xA;telnet **&amp;lt;TAB&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Environment variables / Aliases&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;unset **&amp;lt;TAB&amp;gt;&#xA;export **&amp;lt;TAB&amp;gt;&#xA;unalias **&amp;lt;TAB&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Settings&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Use ~~ as the trigger sequence instead of the default **&#xA;export FZF_COMPLETION_TRIGGER=&#39;~~&#39;&#xA;&#xA;# Options to fzf command&#xA;export FZF_COMPLETION_OPTS=&#39;--border --info=inline&#39;&#xA;&#xA;# Use fd (https://github.com/sharkdp/fd) for listing path candidates.&#xA;# - The first argument to the function ($1) is the base path to start traversal&#xA;# - See the source code (completion.{bash,zsh}) for the details.&#xA;_fzf_compgen_path() {&#xA;  fd --hidden --follow --exclude &#34;.git&#34; . &#34;$1&#34;&#xA;}&#xA;&#xA;# Use fd to generate the list for directory completion&#xA;_fzf_compgen_dir() {&#xA;  fd --type d --hidden --follow --exclude &#34;.git&#34; . &#34;$1&#34;&#xA;}&#xA;&#xA;# Advanced customization of fzf options via _fzf_comprun function&#xA;# - The first argument to the function is the name of the command.&#xA;# - You should make sure to pass the rest of the arguments to fzf.&#xA;_fzf_comprun() {&#xA;  local command=$1&#xA;  shift&#xA;&#xA;  case &#34;$command&#34; in&#xA;    cd)           fzf --preview &#39;tree -C {} | head -200&#39;   &#34;$@&#34; ;;&#xA;    export|unset) fzf --preview &#34;eval &#39;echo \$&#39;{}&#34;         &#34;$@&#34; ;;&#xA;    ssh)          fzf --preview &#39;dig {}&#39;                   &#34;$@&#34; ;;&#xA;    *)            fzf --preview &#39;bat -n --color=always {}&#39; &#34;$@&#34; ;;&#xA;  esac&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Supported commands&lt;/h3&gt; &#xA;&lt;p&gt;On bash, fuzzy completion is enabled only for a predefined set of commands (&lt;code&gt;complete | grep _fzf&lt;/code&gt; to see the list). But you can enable it for other commands as well by using &lt;code&gt;_fzf_setup_completion&lt;/code&gt; helper function.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# usage: _fzf_setup_completion path|dir|var|alias|host COMMANDS...&#xA;_fzf_setup_completion path ag git kubectl&#xA;_fzf_setup_completion dir tree&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Custom fuzzy completion&lt;/h3&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;(Custom completion API is experimental and subject to change)&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;For a command named &lt;em&gt;&#34;COMMAND&#34;&lt;/em&gt;, define &lt;code&gt;_fzf_complete_COMMAND&lt;/code&gt; function using &lt;code&gt;_fzf_complete&lt;/code&gt; helper.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Custom fuzzy completion for &#34;doge&#34; command&#xA;#   e.g. doge **&amp;lt;TAB&amp;gt;&#xA;_fzf_complete_doge() {&#xA;  _fzf_complete --multi --reverse --prompt=&#34;doge&amp;gt; &#34; -- &#34;$@&#34; &amp;lt; &amp;lt;(&#xA;    echo very&#xA;    echo wow&#xA;    echo such&#xA;    echo doge&#xA;  )&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The arguments before &lt;code&gt;--&lt;/code&gt; are the options to fzf.&lt;/li&gt; &#xA; &lt;li&gt;After &lt;code&gt;--&lt;/code&gt;, simply pass the original completion arguments unchanged (&lt;code&gt;&#34;$@&#34;&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Then, write a set of commands that generates the completion candidates and feed its output to the function using process substitution (&lt;code&gt;&amp;lt; &amp;lt;(...)&lt;/code&gt;).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;zsh will automatically pick up the function using the naming convention but in bash you have to manually associate the function with the command using the &lt;code&gt;complete&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;[ -n &#34;$BASH&#34; ] &amp;amp;&amp;amp; complete -F _fzf_complete_doge -o default -o bashdefault doge&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you need to post-process the output from fzf, define &lt;code&gt;_fzf_complete_COMMAND_post&lt;/code&gt; as follows.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;_fzf_complete_foo() {&#xA;  _fzf_complete --multi --reverse --header-lines=3 -- &#34;$@&#34; &amp;lt; &amp;lt;(&#xA;    ls -al&#xA;  )&#xA;}&#xA;&#xA;_fzf_complete_foo_post() {&#xA;  awk &#39;{print $NF}&#39;&#xA;}&#xA;&#xA;[ -n &#34;$BASH&#34; ] &amp;amp;&amp;amp; complete -F _fzf_complete_foo -o default -o bashdefault foo&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Vim plugin&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/junegunn/fzf/master/README-VIM.md&#34;&gt;README-VIM.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Advanced topics&lt;/h2&gt; &#xA;&lt;h3&gt;Performance&lt;/h3&gt; &#xA;&lt;p&gt;fzf is fast. Performance should not be a problem in most use cases. However, you might want to be aware of the options that can affect performance.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;--ansi&lt;/code&gt; tells fzf to extract and parse ANSI color codes in the input, and it makes the initial scanning slower. So it&#39;s not recommended that you add it to your &lt;code&gt;$FZF_DEFAULT_OPTS&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--nth&lt;/code&gt; makes fzf slower because it has to tokenize each line.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--with-nth&lt;/code&gt; makes fzf slower as fzf has to tokenize and reassemble each line.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Executing external programs&lt;/h3&gt; &#xA;&lt;p&gt;You can set up key bindings for starting external processes without leaving fzf (&lt;code&gt;execute&lt;/code&gt;, &lt;code&gt;execute-silent&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Press F1 to open the file with less without leaving fzf&#xA;# Press CTRL-Y to copy the line to clipboard and aborts fzf (requires pbcopy)&#xA;fzf --bind &#39;f1:execute(less -f {}),ctrl-y:execute-silent(echo {} | pbcopy)+abort&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;em&gt;KEY BINDINGS&lt;/em&gt; section of the man page for details.&lt;/p&gt; &#xA;&lt;h3&gt;Turning into a different process&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;become(...)&lt;/code&gt; is similar to &lt;code&gt;execute(...)&lt;/code&gt;/&lt;code&gt;execute-silent(...)&lt;/code&gt; described above, but instead of executing the command and coming back to fzf on complete, it turns fzf into a new process for the command.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;fzf --bind &#39;enter:become(vim {})&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Compared to the seemingly equivalent command substitution &lt;code&gt;vim &#34;$(fzf)&#34;&lt;/code&gt;, this approach has several advantages:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Vim will not open an empty file when you terminate fzf with &lt;kbd&gt;CTRL-C&lt;/kbd&gt;&lt;/li&gt; &#xA; &lt;li&gt;Vim will not open an empty file when you press &lt;kbd&gt;ENTER&lt;/kbd&gt; on an empty result&lt;/li&gt; &#xA; &lt;li&gt;Can handle multiple selections even when they have whitespaces &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;fzf --multi --bind &#39;enter:become(vim {+})&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To be fair, running &lt;code&gt;fzf --print0 | xargs -0 -o vim&lt;/code&gt; instead of &lt;code&gt;vim &#34;$(fzf)&#34;&lt;/code&gt; resolves all of the issues mentioned. Nonetheless, &lt;code&gt;become(...)&lt;/code&gt; still offers additional benefits in different scenarios.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You can set up multiple bindings to handle the result in different ways without any wrapping script &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;fzf --bind &#39;enter:become(vim {}),ctrl-e:become(emacs {})&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Previously, you would have to use &lt;code&gt;--expect=ctrl-e&lt;/code&gt; and check the first line of the output of fzf&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;You can easily build the subsequent command using the field index expressions of fzf &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Open the file in Vim and go to the line&#xA;git grep --line-number . |&#xA;    fzf --delimiter : --nth 3.. --bind &#39;enter:become(vim {1} +{2})&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Reloading the candidate list&lt;/h3&gt; &#xA;&lt;p&gt;By binding &lt;code&gt;reload&lt;/code&gt; action to a key or an event, you can make fzf dynamically reload the candidate list. See &lt;a href=&#34;https://github.com/junegunn/fzf/issues/1750&#34;&gt;https://github.com/junegunn/fzf/issues/1750&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;h4&gt;1. Update the list of processes by pressing CTRL-R&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;ps -ef |&#xA;  fzf --bind &#39;ctrl-r:reload(ps -ef)&#39; \&#xA;      --header &#39;Press CTRL-R to reload&#39; --header-lines=1 \&#xA;      --height=50% --layout=reverse&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;2. Switch between sources by pressing CTRL-D or CTRL-F&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;FZF_DEFAULT_COMMAND=&#39;find . -type f&#39; \&#xA;  fzf --bind &#39;ctrl-d:reload(find . -type d),ctrl-f:reload(eval &#34;$FZF_DEFAULT_COMMAND&#34;)&#39; \&#xA;      --height=50% --layout=reverse&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;3. Interactive ripgrep integration&lt;/h4&gt; &#xA;&lt;p&gt;The following example uses fzf as the selector interface for ripgrep. We bound &lt;code&gt;reload&lt;/code&gt; action to &lt;code&gt;change&lt;/code&gt; event, so every time you type on fzf, the ripgrep process will restart with the updated query string denoted by the placeholder expression &lt;code&gt;{q}&lt;/code&gt;. Also, note that we used &lt;code&gt;--disabled&lt;/code&gt; option so that fzf doesn&#39;t perform any secondary filtering.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;: | rg_prefix=&#39;rg --column --line-number --no-heading --color=always --smart-case&#39; \&#xA;    fzf --bind &#39;start:reload:$rg_prefix &#34;&#34;&#39; \&#xA;        --bind &#39;change:reload:$rg_prefix {q} || true&#39; \&#xA;        --bind &#39;enter:become(vim {1} +{2})&#39; \&#xA;        --ansi --disabled \&#xA;        --height=50% --layout=reverse&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If ripgrep doesn&#39;t find any matches, it will exit with a non-zero exit status, and fzf will warn you about it. To suppress the warning message, we added &lt;code&gt;|| true&lt;/code&gt; to the command, so that it always exits with 0.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/junegunn/fzf/raw/master/ADVANCED.md#using-fzf-as-interactive-ripgrep-launcher&#34;&gt;&#34;Using fzf as interactive Ripgrep launcher&#34;&lt;/a&gt; for more sophisticated examples.&lt;/p&gt; &#xA;&lt;h3&gt;Preview window&lt;/h3&gt; &#xA;&lt;p&gt;When the &lt;code&gt;--preview&lt;/code&gt; option is set, fzf automatically starts an external process with the current line as the argument and shows the result in the split window. Your &lt;code&gt;$SHELL&lt;/code&gt; is used to execute the command with &lt;code&gt;$SHELL -c COMMAND&lt;/code&gt;. The window can be scrolled using the mouse or custom key bindings.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# {} is replaced with the single-quoted string of the focused line&#xA;fzf --preview &#39;cat {}&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Preview window supports ANSI colors, so you can use any program that syntax-highlights the content of a file, such as &lt;a href=&#34;https://github.com/sharkdp/bat&#34;&gt;Bat&lt;/a&gt; or &lt;a href=&#34;http://www.andre-simon.de/doku/highlight/en/highlight.php&#34;&gt;Highlight&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;fzf --preview &#39;bat --color=always {}&#39; --preview-window &#39;~3&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can customize the size, position, and border of the preview window using &lt;code&gt;--preview-window&lt;/code&gt; option, and the foreground and background color of it with &lt;code&gt;--color&lt;/code&gt; option. For example,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;fzf --height 40% --layout reverse --info inline --border \&#xA;    --preview &#39;file {}&#39; --preview-window up,1,border-horizontal \&#xA;    --bind &#39;ctrl-/:change-preview-window(50%|hidden|)&#39; \&#xA;    --color &#39;fg:#bbccdd,fg+:#ddeeff,bg:#334455,preview-bg:#223344,border:#778899&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See the man page (&lt;code&gt;man fzf&lt;/code&gt;) for the full list of options.&lt;/p&gt; &#xA;&lt;p&gt;More advanced examples can be found &lt;a href=&#34;https://github.com/junegunn/fzf/raw/master/ADVANCED.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Since fzf is a general-purpose text filter rather than a file finder, &lt;strong&gt;it is not a good idea to add &lt;code&gt;--preview&lt;/code&gt; option to your &lt;code&gt;$FZF_DEFAULT_OPTS&lt;/code&gt;&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# *********************&#xA;# ** DO NOT DO THIS! **&#xA;# *********************&#xA;export FZF_DEFAULT_OPTS=&#39;--preview &#34;bat --style=numbers --color=always --line-range :500 {}&#34;&#39;&#xA;&#xA;# bat doesn&#39;t work with any input other than the list of files&#xA;ps -ef | fzf&#xA;seq 100 | fzf&#xA;history | fzf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Previewing an image&lt;/h3&gt; &#xA;&lt;p&gt;fzf can display images in the preview window using one of the following protocols:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://sw.kovidgoyal.net/kitty/graphics-protocol/&#34;&gt;Kitty graphics protocol&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://iterm2.com/documentation-images.html&#34;&gt;iTerm2 inline images protocol&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Sixel&#34;&gt;Sixel&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/junegunn/fzf/master/bin/fzf-preview.sh&#34;&gt;bin/fzf-preview.sh&lt;/a&gt; script for more information.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;fzf --preview &#39;fzf-preview.sh {}&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Tips&lt;/h2&gt; &#xA;&lt;h3&gt;Respecting &lt;code&gt;.gitignore&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;You can use &lt;a href=&#34;https://github.com/sharkdp/fd&#34;&gt;fd&lt;/a&gt;, &lt;a href=&#34;https://github.com/BurntSushi/ripgrep&#34;&gt;ripgrep&lt;/a&gt;, or &lt;a href=&#34;https://github.com/ggreer/the_silver_searcher&#34;&gt;the silver searcher&lt;/a&gt; to traverse the file system while respecting &lt;code&gt;.gitignore&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Feed the output of fd into fzf&#xA;fd --type f --strip-cwd-prefix | fzf&#xA;&#xA;# Setting fd as the default source for fzf&#xA;export FZF_DEFAULT_COMMAND=&#39;fd --type f --strip-cwd-prefix&#39;&#xA;&#xA;# Now fzf (w/o pipe) will use fd instead of find&#xA;fzf&#xA;&#xA;# To apply the command to CTRL-T as well&#xA;export FZF_CTRL_T_COMMAND=&#34;$FZF_DEFAULT_COMMAND&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want the command to follow symbolic links and don&#39;t want it to exclude hidden files, use the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;export FZF_DEFAULT_COMMAND=&#39;fd --type f --strip-cwd-prefix --hidden --follow --exclude .git&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Fish shell&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;CTRL-T&lt;/code&gt; key binding of fish, unlike those of bash and zsh, will use the last token on the command-line as the root directory for the recursive search. For instance, hitting &lt;code&gt;CTRL-T&lt;/code&gt; at the end of the following command-line&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;ls /var/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;will list all files and directories under &lt;code&gt;/var/&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;When using a custom &lt;code&gt;FZF_CTRL_T_COMMAND&lt;/code&gt;, use the unexpanded &lt;code&gt;$dir&lt;/code&gt; variable to make use of this feature. &lt;code&gt;$dir&lt;/code&gt; defaults to &lt;code&gt;.&lt;/code&gt; when the last token is not a valid directory. Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;set -g FZF_CTRL_T_COMMAND &#34;command find -L \$dir -type f 2&amp;gt; /dev/null | sed &#39;1d; s#^\./##&#39;&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;fzf Theme Playground&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://vitormv.github.io/fzf-themes/&#34;&gt;fzf Theme Playground&lt;/a&gt; created by &lt;a href=&#34;https://github.com/vitormv&#34;&gt;Vitor Mello&lt;/a&gt; is a webpage where you can interactively create fzf themes.&lt;/p&gt; &#xA;&lt;h2&gt;Related projects&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/junegunn/fzf/wiki/Related-projects&#34;&gt;https://github.com/junegunn/fzf/wiki/Related-projects&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://raw.githubusercontent.com/junegunn/fzf/master/LICENSE&#34;&gt;License&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;The MIT License (MIT)&lt;/p&gt; &#xA;&lt;p&gt;Copyright (c) 2013-2024 Junegunn Choi&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>k8sgpt-ai/k8sgpt</title>
    <updated>2024-02-18T01:47:03Z</updated>
    <id>tag:github.com,2024-02-18:/k8sgpt-ai/k8sgpt</id>
    <link href="https://github.com/k8sgpt-ai/k8sgpt" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Giving Kubernetes Superpowers to everyone&lt;/p&gt;&lt;hr&gt;&lt;picture&gt; &#xA; &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;./images/banner-white.png&#34; width=&#34;600px;&#34;&gt; &#xA; &lt;img alt=&#34;Text changing depending on mode. Light: &#39;So light!&#39; Dark: &#39;So dark!&#39;&#34; src=&#34;https://raw.githubusercontent.com/k8sgpt-ai/k8sgpt/main/images/banner-black.png&#34; width=&#34;600px;&#34;&gt; &#xA;&lt;/picture&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/github/languages/code-size/k8sgpt-ai/k8sgpt&#34; alt=&#34;GitHub code size in bytes&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/k8sgpt-ai/k8sgpt/release.yaml&#34; alt=&#34;GitHub Workflow Status&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/v/release/k8sgpt-ai/k8sgpt&#34; alt=&#34;GitHub release (latest by date)&#34;&gt; &lt;a href=&#34;https://bestpractices.coreinfrastructure.org/projects/7272&#34;&gt;&lt;img src=&#34;https://bestpractices.coreinfrastructure.org/projects/7272/badge&#34; alt=&#34;OpenSSF Best Practices&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://docs.k8sgpt.ai/&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1?label=%F0%9F%93%96&amp;amp;message=Documentation&amp;amp;color=blue&#34; alt=&#34;Link to documentation&#34;&gt;&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://app.fossa.com/projects/git%2Bgithub.com%2Fk8sgpt-ai%2Fk8sgpt?ref=badge_shield&#34;&gt;&lt;img src=&#34;https://app.fossa.com/api/projects/git%2Bgithub.com%2Fk8sgpt-ai%2Fk8sgpt.svg?type=shield&#34; alt=&#34;FOSSA Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opensource.org/licenses/Apache-2.0&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-Apache_2.0-blue.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/k8sgpt-ai/k8sgpt&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/go-mod/go-version/k8sgpt-ai/k8sgpt.svg?sanitize=true&#34; alt=&#34;Go version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/github/k8sgpt-ai/k8sgpt&#34;&gt;&lt;img src=&#34;https://codecov.io/github/k8sgpt-ai/k8sgpt/graph/badge.svg?token=ZLR7NG8URE&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/last-commit/k8sgpt-ai/k8sgpt/main&#34; alt=&#34;GitHub last commit (branch)&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;k8sgpt&lt;/code&gt; is a tool for scanning your Kubernetes clusters, diagnosing, and triaging issues in simple English.&lt;/p&gt; &#xA;&lt;p&gt;It has SRE experience codified into its analyzers and helps to pull out the most relevant information to enrich it with AI.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Out of the box integration with OpenAI, Azure, Cohere, Amazon Bedrock and local models.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.producthunt.com/posts/k8sgpt?utm_source=badge-featured&amp;amp;utm_medium=badge&amp;amp;utm_souce=badge-k8sgpt&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://api.producthunt.com/widgets/embed-image/v1/featured.svg?post_id=389489&amp;amp;theme=light&#34; alt=&#34;K8sGPT - K8sGPT gives Kubernetes Superpowers to everyone | Product Hunt&#34; style=&#34;width: 250px; height: 54px;&#34; width=&#34;250&#34; height=&#34;54&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/k8sgpt-ai/k8sgpt/main/images/demo4.gif&#34; width=&#34;650px;&#34;&gt; &#xA;&lt;h1&gt;CLI Installation&lt;/h1&gt; &#xA;&lt;h3&gt;Linux/Mac via brew&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;brew tap k8sgpt-ai/k8sgpt&#xA;brew install k8sgpt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;RPM-based installation (RedHat/CentOS/Fedora)&lt;/summary&gt; &#xA; &lt;p&gt;&lt;strong&gt;32 bit:&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;!--x-release-please-start-version--&gt; &#xA; &lt;pre&gt;&lt;code&gt;curl -LO https://github.com/k8sgpt-ai/k8sgpt/releases/download/v0.3.27/k8sgpt_386.rpm&#xA;sudo rpm -ivh k8sgpt_386.rpm&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;!--x-release-please-end--&gt; &#xA; &lt;p&gt;&lt;strong&gt;64 bit:&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;!--x-release-please-start-version--&gt; &#xA; &lt;pre&gt;&lt;code&gt;curl -LO https://github.com/k8sgpt-ai/k8sgpt/releases/download/v0.3.27/k8sgpt_amd64.rpm&#xA;sudo rpm -ivh -i k8sgpt_amd64.rpm&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;!--x-release-please-end--&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;DEB-based installation (Ubuntu/Debian)&lt;/summary&gt; &#xA; &lt;p&gt;&lt;strong&gt;32 bit:&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;!--x-release-please-start-version--&gt; &#xA; &lt;pre&gt;&lt;code&gt;curl -LO https://github.com/k8sgpt-ai/k8sgpt/releases/download/v0.3.27/k8sgpt_386.deb&#xA;sudo dpkg -i k8sgpt_386.deb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;!--x-release-please-end--&gt; &#xA; &lt;p&gt;&lt;strong&gt;64 bit:&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;!--x-release-please-start-version--&gt; &#xA; &lt;pre&gt;&lt;code&gt;curl -LO https://github.com/k8sgpt-ai/k8sgpt/releases/download/v0.3.27/k8sgpt_amd64.deb&#xA;sudo dpkg -i k8sgpt_amd64.deb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;!--x-release-please-end--&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;APK-based installation (Alpine)&lt;/summary&gt; &#xA; &lt;p&gt;&lt;strong&gt;32 bit:&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;!--x-release-please-start-version--&gt; &#xA; &lt;pre&gt;&lt;code&gt;curl -LO https://github.com/k8sgpt-ai/k8sgpt/releases/download/v0.3.27/k8sgpt_386.apk&#xA;apk add k8sgpt_386.apk&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;!--x-release-please-end--&gt; &#xA; &lt;p&gt;&lt;strong&gt;64 bit:&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;!--x-release-please-start-version--&gt; &#xA; &lt;pre&gt;&lt;code&gt;curl -LO https://github.com/k8sgpt-ai/k8sgpt/releases/download/v0.3.27/k8sgpt_amd64.apk&#xA;apk add k8sgpt_amd64.apk&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;!--x-release-please-end--&gt;x &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Failing Installation on WSL or Linux (missing gcc)&lt;/summary&gt; When installing Homebrew on WSL or Linux, you may encounter the following error: &#xA; &lt;pre&gt;&lt;code&gt;==&amp;gt; Installing k8sgpt from k8sgpt-ai/k8sgpt Error: The following formula cannot be installed from a bottle and must be&#xA;built from the source. k8sgpt Install Clang or run brew install gcc.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;If you install gcc as suggested, the problem will persist. Therefore, you need to install the build-essential package.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code&gt;   sudo apt-get update&#xA;   sudo apt-get install build-essential&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Windows&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Download the latest Windows binaries of &lt;strong&gt;k8sgpt&lt;/strong&gt; from the &lt;a href=&#34;https://github.com/k8sgpt-ai/k8sgpt/releases&#34;&gt;Release&lt;/a&gt; tab based on your system architecture.&lt;/li&gt; &#xA; &lt;li&gt;Extract the downloaded package to your desired location. Configure the system &lt;em&gt;path&lt;/em&gt; variable with the binary location&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Operator Installation&lt;/h2&gt; &#xA;&lt;p&gt;To install within a Kubernetes cluster please use our &lt;code&gt;k8sgpt-operator&lt;/code&gt; with installation instructions available &lt;a href=&#34;https://github.com/k8sgpt-ai/k8sgpt-operator&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;This mode of operation is ideal for continuous monitoring of your cluster and can integrate with your existing monitoring such as Prometheus and Alertmanager.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Quick Start&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Currently, the default AI provider is OpenAI, you will need to generate an API key from &lt;a href=&#34;https://openai.com&#34;&gt;OpenAI&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;You can do this by running &lt;code&gt;k8sgpt generate&lt;/code&gt; to open a browser link to generate it&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;k8sgpt auth add&lt;/code&gt; to set it in k8sgpt. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;You can provide the password directly using the &lt;code&gt;--password&lt;/code&gt; flag.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;k8sgpt filters&lt;/code&gt; to manage the active filters used by the analyzer. By default, all filters are executed during analysis.&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;k8sgpt analyze&lt;/code&gt; to run a scan.&lt;/li&gt; &#xA; &lt;li&gt;And use &lt;code&gt;k8sgpt analyze --explain&lt;/code&gt; to get a more detailed explanation of the issues.&lt;/li&gt; &#xA; &lt;li&gt;You also run &lt;code&gt;k8sgpt analyze --with-doc&lt;/code&gt; (with or without the explain flag) to get the official documentation from Kubernetes.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Analyzers&lt;/h2&gt; &#xA;&lt;p&gt;K8sGPT uses analyzers to triage and diagnose issues in your cluster. It has a set of analyzers that are built in, but you will be able to write your own analyzers.&lt;/p&gt; &#xA;&lt;h3&gt;Built in analyzers&lt;/h3&gt; &#xA;&lt;h4&gt;Enabled by default&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; podAnalyzer&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; pvcAnalyzer&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; rsAnalyzer&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; serviceAnalyzer&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; eventAnalyzer&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; ingressAnalyzer&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; statefulSetAnalyzer&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; deploymentAnalyzer&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; cronJobAnalyzer&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; nodeAnalyzer&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; mutatingWebhookAnalyzer&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; validatingWebhookAnalyzer&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Optional&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; hpaAnalyzer&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; pdbAnalyzer&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; networkPolicyAnalyzer&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; gatewayClass&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; gateway&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; httproute&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;Run a scan with the default analyzers&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;k8sgpt generate&#xA;k8sgpt auth add&#xA;k8sgpt analyze --explain&#xA;k8sgpt analyze --explain --with-doc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;Filter on resource&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;k8sgpt analyze --explain --filter=Service&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;Filter by namespace&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;k8sgpt analyze --explain --filter=Pod --namespace=default&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;Output to JSON&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;k8sgpt analyze --explain --filter=Service --output=json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;Anonymize during explain&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;k8sgpt analyze --explain --filter=Service --output=json --anonymize&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; Using filters &lt;/summary&gt; &#xA; &lt;p&gt;&lt;em&gt;List filters&lt;/em&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code&gt;k8sgpt filters list&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;em&gt;Add default filters&lt;/em&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code&gt;k8sgpt filters add [filter(s)]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h3&gt;Examples :&lt;/h3&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Simple filter : &lt;code&gt;k8sgpt filters add Service&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Multiple filters : &lt;code&gt;k8sgpt filters add Ingress,Pod&lt;/code&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;p&gt;&lt;em&gt;Remove default filters&lt;/em&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code&gt;k8sgpt filters remove [filter(s)]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h3&gt;Examples :&lt;/h3&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Simple filter : &lt;code&gt;k8sgpt filters remove Service&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Multiple filters : &lt;code&gt;k8sgpt filters remove Ingress,Pod&lt;/code&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; Additional commands &lt;/summary&gt; &#xA; &lt;p&gt;&lt;em&gt;List configured backends&lt;/em&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code&gt;k8sgpt auth list&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;em&gt;Update configured backends&lt;/em&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code&gt;k8sgpt auth update $MY_BACKEND1,$MY_BACKEND2..&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;em&gt;Remove configured backends&lt;/em&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code&gt;k8sgpt auth remove -b $MY_BACKEND1,$MY_BACKEND2..&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;em&gt;List integrations&lt;/em&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code&gt;k8sgpt integrations list&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;em&gt;Activate integrations&lt;/em&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code&gt;k8sgpt integrations activate [integration(s)]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;em&gt;Use integration&lt;/em&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code&gt;k8sgpt analyze --filter=[integration(s)]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;em&gt;Deactivate integrations&lt;/em&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code&gt;k8sgpt integrations deactivate [integration(s)]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;em&gt;Serve mode&lt;/em&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code&gt;k8sgpt serve&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;em&gt;Analysis with serve mode&lt;/em&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code&gt;grpcurl -plaintext -d &#39;{&#34;namespace&#34;: &#34;k8sgpt&#34;, &#34;explain&#34;: false}&#39; localhost:8080 schema.v1.ServerService/Analyze&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;LLM AI Backends&lt;/h2&gt; &#xA;&lt;p&gt;K8sGPT uses the chosen LLM, generative AI provider when you want to explain the analysis results using --explain flag e.g. &lt;code&gt;k8sgpt analyze --explain&lt;/code&gt;. You can use &lt;code&gt;--backend&lt;/code&gt; flag to specify a configured provider (it&#39;s &lt;code&gt;openai&lt;/code&gt; by default).&lt;/p&gt; &#xA;&lt;p&gt;You can list available providers using &lt;code&gt;k8sgpt auth list&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Default: &#xA;&amp;gt; openai&#xA;Active: &#xA;Unused: &#xA;&amp;gt; openai&#xA;&amp;gt; localai&#xA;&amp;gt; azureopenai&#xA;&amp;gt; cohere&#xA;&amp;gt; amazonbedrock&#xA;&amp;gt; amazonsagemaker&#xA;&amp;gt; google&#xA;&amp;gt; huggingface&#xA;&amp;gt; noopai&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For detailed documentation on how to configure and use each provider see &lt;a href=&#34;https://docs.k8sgpt.ai/reference/providers/backend/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;To set a new default provider&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;k8sgpt auth default -p azureopenai&#xA;Default provider set to azureopenai&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Key Features&lt;/h2&gt; &#xA;&lt;details&gt; &#xA; &lt;p&gt;With this option, the data is anonymized before being sent to the AI Backend. During the analysis execution, &lt;code&gt;k8sgpt&lt;/code&gt; retrieves sensitive data (Kubernetes object names, labels, etc.). This data is masked when sent to the AI backend and replaced by a key that can be used to de-anonymize the data when the solution is returned to the user.&lt;/p&gt; &#xA; &lt;summary&gt; Anonymization &lt;/summary&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;Error reported during analysis:&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Error: HorizontalPodAutoscaler uses StatefulSet/fake-deployment as ScaleTargetRef which does not exist.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;ol start=&#34;2&#34;&gt; &#xA;  &lt;li&gt;Payload sent to the AI backend:&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Error: HorizontalPodAutoscaler uses StatefulSet/tGLcCRcHa1Ce5Rs as ScaleTargetRef which does not exist.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;ol start=&#34;3&#34;&gt; &#xA;  &lt;li&gt;Payload returned by the AI:&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;The Kubernetes system is trying to scale a StatefulSet named tGLcCRcHa1Ce5Rs using the HorizontalPodAutoscaler, but it cannot find the StatefulSet. The solution is to verify that the StatefulSet name is spelled correctly and exists in the same namespace as the HorizontalPodAutoscaler.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;ol start=&#34;4&#34;&gt; &#xA;  &lt;li&gt;Payload returned to the user:&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;The Kubernetes system is trying to scale a StatefulSet named fake-deployment using the HorizontalPodAutoscaler, but it cannot find the StatefulSet. The solution is to verify that the StatefulSet name is spelled correctly and exists in the same namespace as the HorizontalPodAutoscaler.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Note: &lt;strong&gt;Anonymization does not currently apply to events.&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;h3&gt;Further Details&lt;/h3&gt; &#xA; &lt;p&gt;&lt;strong&gt;Anonymization does not currently apply to events.&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;em&gt;In a few analysers like Pod, we feed to the AI backend the event messages which are not known beforehand thus we are not masking them for the &lt;strong&gt;time being&lt;/strong&gt;.&lt;/em&gt;&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt; &lt;p&gt;The following is the list of analysers in which data is &lt;strong&gt;being masked&lt;/strong&gt;:-&lt;/p&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;Statefulset&lt;/li&gt; &#xA;    &lt;li&gt;Service&lt;/li&gt; &#xA;    &lt;li&gt;PodDisruptionBudget&lt;/li&gt; &#xA;    &lt;li&gt;Node&lt;/li&gt; &#xA;    &lt;li&gt;NetworkPolicy&lt;/li&gt; &#xA;    &lt;li&gt;Ingress&lt;/li&gt; &#xA;    &lt;li&gt;HPA&lt;/li&gt; &#xA;    &lt;li&gt;Deployment&lt;/li&gt; &#xA;    &lt;li&gt;Cronjob&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;The following is the list of analysers in which data is &lt;strong&gt;not being masked&lt;/strong&gt;:-&lt;/p&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;RepicaSet&lt;/li&gt; &#xA;    &lt;li&gt;PersistentVolumeClaim&lt;/li&gt; &#xA;    &lt;li&gt;Pod&lt;/li&gt; &#xA;    &lt;li&gt;&lt;strong&gt;&lt;em&gt;*Events&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;p&gt;*&lt;strong&gt;Note&lt;/strong&gt;:&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt; &lt;p&gt;k8gpt will not mask the above analysers because they do not send any identifying information except &lt;strong&gt;Events&lt;/strong&gt; analyser.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;Masking for &lt;strong&gt;Events&lt;/strong&gt; analyzer is scheduled in the near future as seen in this &lt;a href=&#34;https://github.com/k8sgpt-ai/k8sgpt/issues/560&#34;&gt;issue&lt;/a&gt;. &lt;em&gt;Further research has to be made to understand the patterns and be able to mask the sensitive parts of an event like pod name, namespace etc.&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;The following is the list of fields which are not &lt;strong&gt;being masked&lt;/strong&gt;:-&lt;/p&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;Describe&lt;/li&gt; &#xA;    &lt;li&gt;ObjectStatus&lt;/li&gt; &#xA;    &lt;li&gt;Replicas&lt;/li&gt; &#xA;    &lt;li&gt;ContainerStatus&lt;/li&gt; &#xA;    &lt;li&gt;&lt;strong&gt;&lt;em&gt;*Event Message&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt; &#xA;    &lt;li&gt;ReplicaStatus&lt;/li&gt; &#xA;    &lt;li&gt;Count (Pod)&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;p&gt;*&lt;strong&gt;Note&lt;/strong&gt;:&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;It is quite possible the payload of the event message might have something like &#34;super-secret-project-pod-X crashed&#34; which we don&#39;t currently redact &lt;em&gt;(scheduled in the near future as seen in this &lt;a href=&#34;https://github.com/k8sgpt-ai/k8sgpt/issues/560&#34;&gt;issue&lt;/a&gt;)&lt;/em&gt;.&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;h3&gt;Proceed with care&lt;/h3&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;The K8gpt team recommends using an entirely different backend &lt;strong&gt;(a local model) in critical production environments&lt;/strong&gt;. By using a local model, you can rest assured that everything stays within your DMZ, and nothing is leaked.&lt;/li&gt; &#xA;  &lt;li&gt;If there is any uncertainty about the possibility of sending data to a public LLM (open AI, Azure AI) and it poses a risk to business-critical operations, then, in such cases, the use of public LLM should be avoided based on personal assessment and the jurisdiction of risks involved.&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; Configuration management&lt;/summary&gt; &#xA; &lt;p&gt;&lt;code&gt;k8sgpt&lt;/code&gt; stores config data in the &lt;code&gt;$XDG_CONFIG_HOME/k8sgpt/k8sgpt.yaml&lt;/code&gt; file. The data is stored in plain text, including your OpenAI key.&lt;/p&gt; &#xA; &lt;p&gt;Config file locations:&lt;/p&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th&gt;OS&lt;/th&gt; &#xA;    &lt;th&gt;Path&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;MacOS&lt;/td&gt; &#xA;    &lt;td&gt;~/Library/Application Support/k8sgpt/k8sgpt.yaml&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;Linux&lt;/td&gt; &#xA;    &lt;td&gt;~/.config/k8sgpt/k8sgpt.yaml&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;Windows&lt;/td&gt; &#xA;    &lt;td&gt;%LOCALAPPDATA%/k8sgpt/k8sgpt.yaml&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt;&#xA;  There may be scenarios where caching remotely is preferred. In these scenarios K8sGPT supports AWS S3 or Azure Blob storage Integration. &#xA; &lt;summary&gt; Remote caching &lt;/summary&gt; &#xA; &lt;em&gt;Note: You can only configure and use only one remote cache at a time&lt;/em&gt; &#xA; &lt;p&gt;&lt;em&gt;Adding a remote cache&lt;/em&gt;&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;AWS S3 &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;&lt;em&gt;As a prerequisite &lt;code&gt;AWS_ACCESS_KEY_ID&lt;/code&gt; and &lt;code&gt;AWS_SECRET_ACCESS_KEY&lt;/code&gt; are required as environmental variables.&lt;/em&gt;&lt;/li&gt; &#xA;    &lt;li&gt;Configuration, &lt;code&gt;k8sgpt cache add s3 --region &amp;lt;aws region&amp;gt; --bucket &amp;lt;name&amp;gt;&lt;/code&gt; &#xA;     &lt;ul&gt; &#xA;      &lt;li&gt;K8sGPT will create the bucket if it does not exist&lt;/li&gt; &#xA;     &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt;Azure Storage &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;We support a number of &lt;a href=&#34;https://learn.microsoft.com/en-us/azure/developer/go/azure-sdk-authentication?tabs=bash#2-authenticate-with-azure&#34;&gt;techniques&lt;/a&gt; to authenticate against Azure&lt;/li&gt; &#xA;    &lt;li&gt;Configuration, &lt;code&gt;k8sgpt cache add azure --storageacc &amp;lt;storage account name&amp;gt; --container &amp;lt;container name&amp;gt;&lt;/code&gt; &#xA;     &lt;ul&gt; &#xA;      &lt;li&gt;K8sGPT assumes that the storage account already exist and it will create the container if it does not exist&lt;/li&gt; &#xA;      &lt;li&gt;It is the &lt;strong&gt;user&lt;/strong&gt; responsibility have to grant specific permissions to their identity in order to be able to upload blob files and create SA containers (e.g Storage Blob Data Contributor)&lt;/li&gt; &#xA;     &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt;Google Cloud Storage &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;&lt;em&gt;As a prerequisite &lt;code&gt;GOOGLE_APPLICATION_CREDENTIALS&lt;/code&gt; are required as environmental variables.&lt;/em&gt;&lt;/li&gt; &#xA;    &lt;li&gt;Configuration, &lt;code&gt; k8sgpt cache add gcs --region &amp;lt;gcp region&amp;gt; --bucket &amp;lt;name&amp;gt; --projectid &amp;lt;project id&amp;gt;&lt;/code&gt; &#xA;     &lt;ul&gt; &#xA;      &lt;li&gt;K8sGPT will create the bucket if it does not exist&lt;/li&gt; &#xA;     &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;p&gt;&lt;em&gt;Listing cache items&lt;/em&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code&gt;k8sgpt cache list&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;em&gt;Purging an object from the cache&lt;/em&gt; Note: purging an object using this command will delete upstream files, so it requires appropriate permissions.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code&gt;k8sgpt cache purge $OBJECT_NAME&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;em&gt;Removing the remote cache&lt;/em&gt; Note: this will not delete the upstream S3 bucket or Azure storage container&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code&gt;k8sgpt cache remove&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; Custom Analyzers&lt;/summary&gt; &#xA; &lt;p&gt;There may be scenarios where you wish to write your own analyzer in a language of your choice. K8sGPT now supports the ability to do so by abiding by the &lt;a href=&#34;https://github.com/k8sgpt-ai/schemas/raw/main/protobuf/schema/v1/analyzer.proto&#34;&gt;schema&lt;/a&gt; and serving the analyzer for consumption. To do so, define the analyzer within the K8sGPT configuration and it will add it into the scanning process. In addition to this you will need to enable the following flag on analysis:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code&gt;k8sgpt analyze --custom-analysis&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Here is an example local host analyzer in &lt;a href=&#34;https://github.com/k8sgpt-ai/host-analyzer&#34;&gt;Rust&lt;/a&gt; When this is run on &lt;code&gt;localhost:8080&lt;/code&gt; the K8sGPT config can pick it up with the following additions:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code&gt;custom_analyzers:&#xA;  - name: host-analyzer&#xA;    connection:&#xA;      url: localhost&#xA;      port: 8080&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;This now gives the ability to pass through hostOS information ( from this analyzer example ) to K8sGPT to use as context with normal analysis.&lt;/p&gt; &#xA; &lt;p&gt;&lt;em&gt;See the docs on how to write a custom analyzer&lt;/em&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Find our official documentation available &lt;a href=&#34;https://docs.k8sgpt.ai&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Please read our &lt;a href=&#34;https://raw.githubusercontent.com/k8sgpt-ai/k8sgpt/main/CONTRIBUTING.md&#34;&gt;contributing guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Community&lt;/h2&gt; &#xA;&lt;p&gt;Find us on &lt;a href=&#34;https://join.slack.com/t/k8sgpt/shared_invite/zt-276pa9uyq-pxAUr4TCVHubFxEvLZuT1Q&#34;&gt;Slack&lt;/a&gt;&lt;/p&gt; &#xA;&lt;a href=&#34;https://github.com/k8sgpt-ai/k8sgpt/graphs/contributors&#34;&gt; &lt;img src=&#34;https://contrib.rocks/image?repo=k8sgpt-ai/k8sgpt&#34;&gt; &lt;/a&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://app.fossa.com/projects/git%2Bgithub.com%2Fk8sgpt-ai%2Fk8sgpt?ref=badge_large&#34;&gt;&lt;img src=&#34;https://app.fossa.com/api/projects/git%2Bgithub.com%2Fk8sgpt-ai%2Fk8sgpt.svg?type=large&#34; alt=&#34;FOSSA Status&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>