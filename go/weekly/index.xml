<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-04-13T02:00:21Z</updated>
  <subtitle>Weekly Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>mikefarah/yq</title>
    <updated>2025-04-13T02:00:21Z</updated>
    <id>tag:github.com,2025-04-13:/mikefarah/yq</id>
    <link href="https://github.com/mikefarah/yq" rel="alternate"></link>
    <summary type="html">&lt;p&gt;yq is a portable command-line YAML, JSON, XML, CSV, TOML and properties processor&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;yq&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/mikefarah/yq/workflows/Build/badge.svg?sanitize=true&#34; alt=&#34;Build&#34;&gt; &lt;img src=&#34;https://img.shields.io/docker/pulls/mikefarah/yq.svg?sanitize=true&#34; alt=&#34;Docker Pulls&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/downloads/mikefarah/yq/total.svg?sanitize=true&#34; alt=&#34;Github Releases (by Release)&#34;&gt; &lt;img src=&#34;https://goreportcard.com/badge/github.com/mikefarah/yq&#34; alt=&#34;Go Report&#34;&gt; &lt;img src=&#34;https://github.com/mikefarah/yq/workflows/CodeQL/badge.svg?sanitize=true&#34; alt=&#34;CodeQL&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;a lightweight and portable command-line YAML, JSON and XML processor. &lt;code&gt;yq&lt;/code&gt; uses &lt;a href=&#34;https://github.com/stedolan/jq&#34;&gt;jq&lt;/a&gt; like syntax but works with yaml files as well as json, xml, properties, csv and tsv. It doesn&#39;t yet support everything &lt;code&gt;jq&lt;/code&gt; does - but it does support the most common operations and functions, and more is being added continuously.&lt;/p&gt; &#xA;&lt;p&gt;yq is written in go - so you can download a dependency free binary for your platform and you are good to go! If you prefer there are a variety of package managers that can be used as well as Docker and Podman, all listed below.&lt;/p&gt; &#xA;&lt;h2&gt;Quick Usage Guide&lt;/h2&gt; &#xA;&lt;p&gt;Read a value:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;yq &#39;.a.b[0].c&#39; file.yaml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Pipe from STDIN:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;yq &#39;.a.b[0].c&#39; &amp;lt; file.yaml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Update a yaml file, in place&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;yq -i &#39;.a.b[0].c = &#34;cool&#34;&#39; file.yaml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Update using environment variables&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;NAME=mike yq -i &#39;.a.b[0].c = strenv(NAME)&#39; file.yaml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Merge multiple files&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# merge two files&#xA;yq -n &#39;load(&#34;file1.yaml&#34;) * load(&#34;file2.yaml&#34;)&#39;&#xA;&#xA;# merge using globs:&#xA;# note the use of `ea` to evaluate all the files at once&#xA;# instead of in sequence&#xA;yq ea &#39;. as $item ireduce ({}; . * $item )&#39; path/to/*.yml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Multiple updates to a yaml file&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;yq -i &#39;&#xA;  .a.b[0].c = &#34;cool&#34; |&#xA;  .x.y.z = &#34;foobar&#34; |&#xA;  .person.name = strenv(NAME)&#xA;&#39; file.yaml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Find and update an item in an array:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;yq &#39;(.[] | select(.name == &#34;foo&#34;) | .address) = &#34;12 cat st&#34;&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Convert JSON to YAML&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;yq -Poy sample.json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://mikefarah.gitbook.io/yq/recipes&#34;&gt;recipes&lt;/a&gt; for more examples and the &lt;a href=&#34;https://mikefarah.gitbook.io/yq/&#34;&gt;documentation&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;p&gt;Take a look at the discussions for &lt;a href=&#34;https://github.com/mikefarah/yq/discussions/categories/q-a&#34;&gt;common questions&lt;/a&gt;, and &lt;a href=&#34;https://github.com/mikefarah/yq/discussions/categories/show-and-tell&#34;&gt;cool ideas&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/mikefarah/yq/releases/latest&#34;&gt;Download the latest binary&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;h3&gt;wget&lt;/h3&gt; &#xA;&lt;p&gt;Use wget to download, gzipped pre-compiled binaries:&lt;/p&gt; &#xA;&lt;p&gt;For instance, VERSION=v4.2.0 and BINARY=yq_linux_amd64&lt;/p&gt; &#xA;&lt;h4&gt;Compressed via tar.gz&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;wget https://github.com/mikefarah/yq/releases/download/${VERSION}/${BINARY}.tar.gz -O - |\&#xA;  tar xz &amp;amp;&amp;amp; mv ${BINARY} /usr/bin/yq&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Plain binary&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;wget https://github.com/mikefarah/yq/releases/download/${VERSION}/${BINARY} -O /usr/bin/yq &amp;amp;&amp;amp;\&#xA;    chmod +x /usr/bin/yq&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Latest version&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/bin/yq &amp;amp;&amp;amp;\&#xA;    chmod +x /usr/bin/yq&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;MacOS / Linux via Homebrew:&lt;/h3&gt; &#xA;&lt;p&gt;Using &lt;a href=&#34;https://brew.sh/&#34;&gt;Homebrew&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;brew install yq&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Linux via snap:&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;snap install yq&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Snap notes&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;yq&lt;/code&gt; installs with &lt;a href=&#34;https://docs.snapcraft.io/snap-confinement/6233&#34;&gt;&lt;em&gt;strict confinement&lt;/em&gt;&lt;/a&gt; in snap, this means it doesn&#39;t have direct access to root files. To read root files you can:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo cat /etc/myfile | yq &#39;.a.path&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And to write to a root file you can either use &lt;a href=&#34;https://linux.die.net/man/1/sponge&#34;&gt;sponge&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo cat /etc/myfile | yq &#39;.a.path = &#34;value&#34;&#39; | sudo sponge /etc/myfile&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or write to a temporary file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo cat /etc/myfile | yq &#39;.a.path = &#34;value&#34;&#39; | sudo tee /etc/myfile.tmp&#xA;sudo mv /etc/myfile.tmp /etc/myfile&#xA;rm /etc/myfile.tmp&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Run with Docker or Podman&lt;/h3&gt; &#xA;&lt;h4&gt;Oneshot use:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run --rm -v &#34;${PWD}&#34;:/workdir mikefarah/yq [command] [flags] [expression ]FILE...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that you can run &lt;code&gt;yq&lt;/code&gt; in docker without network access and other privileges if you desire, namely &lt;code&gt;--security-opt=no-new-privileges --cap-drop all --network none&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;podman run --rm -v &#34;${PWD}&#34;:/workdir mikefarah/yq [command] [flags] [expression ]FILE...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Pipe in via STDIN:&lt;/h4&gt; &#xA;&lt;p&gt;You&#39;ll need to pass the &lt;code&gt;-i\--interactive&lt;/code&gt; flag to docker:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run -i --rm mikefarah/yq &#39;.this.thing&#39; &amp;lt; myfile.yml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;podman run -i --rm mikefarah/yq &#39;.this.thing&#39; &amp;lt; myfile.yml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Run commands interactively:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run --rm -it -v &#34;${PWD}&#34;:/workdir --entrypoint sh mikefarah/yq&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;podman run --rm -it -v &#34;${PWD}&#34;:/workdir --entrypoint sh mikefarah/yq&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It can be useful to have a bash function to avoid typing the whole docker command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;yq() {&#xA;  docker run --rm -i -v &#34;${PWD}&#34;:/workdir mikefarah/yq &#34;$@&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;yq() {&#xA;  podman run --rm -i -v &#34;${PWD}&#34;:/workdir mikefarah/yq &#34;$@&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Running as root:&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;yq&lt;/code&gt;&#39;s container image no longer runs under root (&lt;a href=&#34;https://github.com/mikefarah/yq/pull/860&#34;&gt;https://github.com/mikefarah/yq/pull/860&lt;/a&gt;). If you&#39;d like to install more things in the container image, or you&#39;re having permissions issues when attempting to read/write files you&#39;ll need to either:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run --user=&#34;root&#34; -it --entrypoint sh mikefarah/yq&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;podman run --user=&#34;root&#34; -it --entrypoint sh mikefarah/yq&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or, in your Dockerfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;FROM mikefarah/yq&#xA;&#xA;USER root&#xA;RUN apk add --no-cache bash&#xA;USER yq&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Missing timezone data&lt;/h4&gt; &#xA;&lt;p&gt;By default, the alpine image yq uses does not include timezone data. If you&#39;d like to use the &lt;code&gt;tz&lt;/code&gt; operator, you&#39;ll need to include this data:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;FROM mikefarah/yq&#xA;&#xA;USER root&#xA;RUN apk add --no-cache tzdata&#xA;USER yq&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Podman with SELinux&lt;/h4&gt; &#xA;&lt;p&gt;If you are using podman with SELinux, you will need to set the shared volume flag &lt;code&gt;:z&lt;/code&gt; on the volume mount:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;-v &#34;${PWD}&#34;:/workdir:z&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;GitHub Action&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;  - name: Set foobar to cool&#xA;    uses: mikefarah/yq@master&#xA;    with:&#xA;      cmd: yq -i &#39;.foo.bar = &#34;cool&#34;&#39; &#39;config.yml&#39;&#xA;  - name: Get an entry with a variable that might contain dots or spaces&#xA;    id: get_username&#xA;    uses: mikefarah/yq@master&#xA;    with:&#xA;      cmd: yq &#39;.all.children.[&#34;${{ matrix.ip_address }}&#34;].username&#39; ops/inventories/production.yml&#xA;  - name: Reuse a variable obtained in another step&#xA;    run: echo ${{ steps.get_username.outputs.result }}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://mikefarah.gitbook.io/yq/usage/github-action&#34;&gt;https://mikefarah.gitbook.io/yq/usage/github-action&lt;/a&gt; for more.&lt;/p&gt; &#xA;&lt;h3&gt;Go Install:&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;go install github.com/mikefarah/yq/v4@latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Community Supported Installation methods&lt;/h2&gt; &#xA;&lt;p&gt;As these are supported by the community &lt;span&gt;❤️&lt;/span&gt; - however, they may be out of date with the officially supported releases.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Please note that the Debian package (previously supported by @rmescandon) is no longer maintained. Please use an alternative installation method.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h3&gt;X-CMD&lt;/h3&gt; &#xA;&lt;p&gt;Checkout &lt;code&gt;yq&lt;/code&gt; on x-cmd: &lt;a href=&#34;https://x-cmd.com/mod/yq&#34;&gt;https://x-cmd.com/mod/yq&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Instant Results: See the output of your yq filter in real-time.&lt;/li&gt; &#xA; &lt;li&gt;Error Handling: Encounter a syntax error? It will display the error message and the results of the closest valid filter&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Thanks @edwinjhlee!&lt;/p&gt; &#xA;&lt;h3&gt;Nix&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;nix profile install nixpkgs#yq-go&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://search.nixos.org/packages?channel=unstable&amp;amp;show=yq-go&amp;amp;from=0&amp;amp;size=50&amp;amp;sort=relevance&amp;amp;type=packages&amp;amp;query=yq-go&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Webi&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;webi yq&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://webinstall.dev/&#34;&gt;webi&lt;/a&gt; Supported by @adithyasunil26 (&lt;a href=&#34;https://github.com/webinstall/webi-installers/tree/master/yq&#34;&gt;https://github.com/webinstall/webi-installers/tree/master/yq&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;h3&gt;Arch Linux&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;pacman -S go-yq&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Windows:&lt;/h3&gt; &#xA;&lt;p&gt;Using &lt;a href=&#34;https://chocolatey.org&#34;&gt;Chocolatey&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://chocolatey.org/packages/yq&#34;&gt;&lt;img src=&#34;https://img.shields.io/chocolatey/v/yq.svg?sanitize=true&#34; alt=&#34;Chocolatey&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://chocolatey.org/packages/yq&#34;&gt;&lt;img src=&#34;https://img.shields.io/chocolatey/dt/yq.svg?sanitize=true&#34; alt=&#34;Chocolatey&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;choco install yq&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Supported by @chillum (&lt;a href=&#34;https://chocolatey.org/packages/yq&#34;&gt;https://chocolatey.org/packages/yq&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;p&gt;Using &lt;a href=&#34;https://scoop.sh/&#34;&gt;scoop&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;scoop install main/yq&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Using &lt;a href=&#34;https://learn.microsoft.com/en-us/windows/package-manager/&#34;&gt;winget&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;winget install --id MikeFarah.yq&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Mac:&lt;/h3&gt; &#xA;&lt;p&gt;Using &lt;a href=&#34;https://www.macports.org/&#34;&gt;MacPorts&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo port selfupdate&#xA;sudo port install yq&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Supported by @herbygillot (&lt;a href=&#34;https://ports.macports.org/maintainer/github/herbygillot&#34;&gt;https://ports.macports.org/maintainer/github/herbygillot&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;h3&gt;Alpine Linux&lt;/h3&gt; &#xA;&lt;p&gt;Alpine Linux v3.20+ (and Edge):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;apk add yq-go&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alpine Linux up to v3.19:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;apk add yq&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Supported by Tuan Hoang (&lt;a href=&#34;https://pkgs.alpinelinux.org/packages?name=yq-go&#34;&gt;https://pkgs.alpinelinux.org/packages?name=yq-go&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;h3&gt;Flox:&lt;/h3&gt; &#xA;&lt;p&gt;Flox can be used to install yq on Linux, MacOS, and Windows through WSL.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;flox install yq&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mikefarah.gitbook.io/yq/&#34;&gt;Detailed documentation with many examples&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Written in portable go, so you can download a lovely dependency free binary&lt;/li&gt; &#xA; &lt;li&gt;Uses similar syntax as &lt;code&gt;jq&lt;/code&gt; but works with YAML, &lt;a href=&#34;https://mikefarah.gitbook.io/yq/usage/convert&#34;&gt;JSON&lt;/a&gt; and &lt;a href=&#34;https://mikefarah.gitbook.io/yq/usage/xml&#34;&gt;XML&lt;/a&gt; files&lt;/li&gt; &#xA; &lt;li&gt;Fully supports multi document yaml files&lt;/li&gt; &#xA; &lt;li&gt;Supports yaml &lt;a href=&#34;https://mikefarah.gitbook.io/yq/usage/front-matter&#34;&gt;front matter&lt;/a&gt; blocks (e.g. jekyll/assemble)&lt;/li&gt; &#xA; &lt;li&gt;Colorized yaml output&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mikefarah.gitbook.io/yq/operators/datetime&#34;&gt;Date/Time manipulation and formatting with TZ&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mikefarah.gitbook.io/yq/operators/traverse-read&#34;&gt;Deeply data structures&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mikefarah.gitbook.io/yq/operators/sort-keys&#34;&gt;Sort keys&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Manipulate yaml &lt;a href=&#34;https://mikefarah.gitbook.io/yq/operators/comment-operators&#34;&gt;comments&lt;/a&gt;, &lt;a href=&#34;https://mikefarah.gitbook.io/yq/operators/style&#34;&gt;styling&lt;/a&gt;, &lt;a href=&#34;https://mikefarah.gitbook.io/yq/operators/tag&#34;&gt;tags&lt;/a&gt; and &lt;a href=&#34;https://mikefarah.gitbook.io/yq/operators/anchor-and-alias-operators&#34;&gt;anchors and aliases&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mikefarah.gitbook.io/yq/v/v4.x/commands/evaluate#flags&#34;&gt;Update in place&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mikefarah.gitbook.io/yq/operators/select#select-and-update-matching-values-in-map&#34;&gt;Complex expressions to select and update&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Keeps yaml formatting and comments when updating (though there are issues with whitespace)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mikefarah.gitbook.io/yq/operators/encode-decode&#34;&gt;Decode/Encode base64 data&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mikefarah.gitbook.io/yq/operators/load&#34;&gt;Load content from other files&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mikefarah.gitbook.io/yq/v/v4.x/usage/convert&#34;&gt;Convert to/from json/ndjson&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mikefarah.gitbook.io/yq/v/v4.x/usage/xml&#34;&gt;Convert to/from xml&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mikefarah.gitbook.io/yq/v/v4.x/usage/properties&#34;&gt;Convert to/from properties&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mikefarah.gitbook.io/yq/usage/csv-tsv&#34;&gt;Convert to/from csv/tsv&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mikefarah.gitbook.io/yq/v/v4.x/commands/shell-completion&#34;&gt;General shell completion scripts (bash/zsh/fish/powershell)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mikefarah.gitbook.io/yq/operators/reduce&#34;&gt;Reduce&lt;/a&gt; to merge multiple files or sum an array or other fancy things.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mikefarah.gitbook.io/yq/usage/github-action&#34;&gt;Github Action&lt;/a&gt; to use in your automated pipeline (thanks @devorbitus)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://mikefarah.gitbook.io/yq/&#34;&gt;Usage&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Check out the &lt;a href=&#34;https://mikefarah.gitbook.io/yq/&#34;&gt;documentation&lt;/a&gt; for more detailed and advanced usage.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Usage:&#xA;  yq [flags]&#xA;  yq [command]&#xA;&#xA;Examples:&#xA;&#xA;# yq defaults to &#39;eval&#39; command if no command is specified. See &#34;yq eval --help&#34; for more examples.&#xA;yq &#39;.stuff&#39; &amp;lt; myfile.yml # outputs the data at the &#34;stuff&#34; node from &#34;myfile.yml&#34;&#xA;&#xA;yq -i &#39;.stuff = &#34;foo&#34;&#39; myfile.yml # update myfile.yml in place&#xA;&#xA;&#xA;Available Commands:&#xA;  completion       Generate the autocompletion script for the specified shell&#xA;  eval             (default) Apply the expression to each document in each yaml file in sequence&#xA;  eval-all         Loads _all_ yaml documents of _all_ yaml files and runs expression once&#xA;  help             Help about any command&#xA;&#xA;Flags:&#xA;  -C, --colors                        force print with colors&#xA;  -e, --exit-status                   set exit status if there are no matches or null or false is returned&#xA;  -f, --front-matter string           (extract|process) first input as yaml front-matter. Extract will pull out the yaml content, process will run the expression against the yaml content, leaving the remaining data intact&#xA;      --header-preprocess             Slurp any header comments and separators before processing expression. (default true)&#xA;  -h, --help                          help for yq&#xA;  -I, --indent int                    sets indent level for output (default 2)&#xA;  -i, --inplace                       update the file in place of first file given.&#xA;  -p, --input-format string           [yaml|y|xml|x] parse format for input. Note that json is a subset of yaml. (default &#34;yaml&#34;)&#xA;  -M, --no-colors                     force print with no colors&#xA;  -N, --no-doc                        Don&#39;t print document separators (---)&#xA;  -n, --null-input                    Don&#39;t read input, simply evaluate the expression given. Useful for creating docs from scratch.&#xA;  -o, --output-format string          [yaml|y|json|j|props|p|xml|x] output format type. (default &#34;yaml&#34;)&#xA;  -P, --prettyPrint                   pretty print, shorthand for &#39;... style = &#34;&#34;&#39;&#xA;  -s, --split-exp string              print each result (or doc) into a file named (exp). [exp] argument must return a string. You can use $index in the expression as the result counter.&#xA;      --unwrapScalar                  unwrap scalar, print the value with no quotes, colors or comments (default true)&#xA;  -v, --verbose                       verbose mode&#xA;  -V, --version                       Print version information and quit&#xA;      --xml-attribute-prefix string   prefix for xml attributes (default &#34;+&#34;)&#xA;      --xml-content-name string       name for xml content (if no attribute name is present). (default &#34;+content&#34;)&#xA;&#xA;Use &#34;yq [command] --help&#34; for more information about a command.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Known Issues / Missing Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;yq&lt;/code&gt; attempts to preserve comment positions and whitespace as much as possible, but it does not handle all scenarios (see &lt;a href=&#34;https://github.com/go-yaml/yaml/tree/v3&#34;&gt;https://github.com/go-yaml/yaml/tree/v3&lt;/a&gt; for details)&lt;/li&gt; &#xA; &lt;li&gt;Powershell has its own...&lt;a href=&#34;https://mikefarah.gitbook.io/yq/usage/tips-and-tricks#quotes-in-windows-powershell&#34;&gt;opinions on quoting yq&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&#34;yes&#34;, &#34;no&#34; were dropped as boolean values in the yaml 1.2 standard - which is the standard yq assumes.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://mikefarah.gitbook.io/yq/usage/tips-and-tricks&#34;&gt;tips and tricks&lt;/a&gt; for more common problems and solutions.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>gofr-dev/gofr</title>
    <updated>2025-04-13T02:00:21Z</updated>
    <id>tag:github.com,2025-04-13:/gofr-dev/gofr</id>
    <link href="https://github.com/gofr-dev/gofr" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An opinionated GoLang framework for accelerated microservice development. Built in support for databases and observability.&lt;/p&gt;&lt;hr&gt;&lt;h1 style=&#34;text-align: center; font-size: 100px; font-weight: 500;&#34;&gt; &lt;i&gt;Go&lt;/i&gt;Fr &lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img align=&#34;center&#34; width=&#34;300&#34; alt=&#34;logo&#34; src=&#34;https://github.com/gofr-dev/gofr/assets/44036979/916fe7b1-42fb-4af1-9e0b-4a7a064c243c&#34;&gt; &lt;/p&gt; &#xA;&lt;h2 align=&#34;center&#34; style=&#34;font-size: 28px;&#34;&gt;&lt;b&gt;GoFr: An Opinionated Microservice Development Framework&lt;/b&gt;&lt;/h2&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a href=&#34;https://pkg.go.dev/gofr.dev&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/GoDoc-Read%20Documentation-blue?style=for-the-badge&#34; alt=&#34;godoc&#34;&gt;&lt;/a&gt; &#xA; &lt;a href=&#34;https://gofr.dev/docs&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/GoFr-Docs-orange?style=for-the-badge&#34; alt=&#34;gofr-docs&#34;&gt;&lt;/a&gt; &#xA; &lt;a href=&#34;https://codeclimate.com/github/gofr-dev/gofr/maintainability&#34;&gt;&lt;img src=&#34;https://img.shields.io/codeclimate/maintainability/gofr-dev/gofr?style=for-the-badge&#34; alt=&#34;maintainability&#34;&gt;&lt;/a&gt; &#xA; &lt;a href=&#34;https://codeclimate.com/github/gofr-dev/gofr/test_coverage&#34;&gt;&lt;img src=&#34;https://img.shields.io/codeclimate/coverage/gofr-dev/gofr?style=for-the-badge&#34; alt=&#34;test-coverage&#34;&gt;&lt;/a&gt; &#xA; &lt;a href=&#34;https://goreportcard.com/report/gofr.dev&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/gofr.dev?style=for-the-badge&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt; &#xA; &lt;a href=&#34;https://opensource.org/licenses/Apache-2.0&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-Apache_2.0-blue?style=for-the-badge&#34; alt=&#34;Apache 2.0 License&#34;&gt;&lt;/a&gt; &#xA; &lt;a href=&#34;https://discord.gg/wsaSkQTdgq&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/discord-join-us?style=for-the-badge&amp;amp;logo=discord&amp;amp;color=7289DA&#34; alt=&#34;discord&#34;&gt;&lt;/a&gt; &#xA; &lt;a href=&#34;https://gurubase.io/g/gofr&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Gurubase-Ask%20GoFr%20Guru-006BFF?style=for-the-badge&#34;&gt;&lt;/a&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2 align=&#34;center&#34;&gt;Listed in the &lt;a href=&#34;https://landscape.cncf.io/?selected=go-fr&#34;&gt;CNCF Landscape&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;h2&gt;🎯 &lt;strong&gt;Goal&lt;/strong&gt;&lt;/h2&gt; &#xA;&lt;p&gt;GoFr is designed to &lt;strong&gt;simplify microservice development&lt;/strong&gt;, with key focuses on &lt;strong&gt;Kubernetes deployment&lt;/strong&gt; and &lt;strong&gt;out-of-the-box observability&lt;/strong&gt;. While capable of building generic applications, &lt;strong&gt;microservices&lt;/strong&gt; remain at its core.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;💡 &lt;strong&gt;Key Features&lt;/strong&gt;&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;Simple API Syntax&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;REST Standards by Default&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Configuration Management&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://gofr.dev/docs/quick-start/observability&#34;&gt;Observability&lt;/a&gt;&lt;/strong&gt; (Logs, Traces, Metrics)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Inbuilt &lt;a href=&#34;https://gofr.dev/docs/advanced-guide/http-authentication&#34;&gt;Auth Middleware&lt;/a&gt;&lt;/strong&gt; &amp;amp; Custom Middleware Support&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://gofr.dev/docs/advanced-guide/grpc&#34;&gt;gRPC Support&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://gofr.dev/docs/advanced-guide/http-communication&#34;&gt;HTTP Service&lt;/a&gt;&lt;/strong&gt; with Circuit Breaker Support&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://gofr.dev/docs/advanced-guide/using-publisher-subscriber&#34;&gt;Pub/Sub&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://gofr.dev/docs/advanced-guide/monitoring-service-health&#34;&gt;Health Check&lt;/a&gt;&lt;/strong&gt; for All Datasources&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://gofr.dev/docs/advanced-guide/handling-data-migrations&#34;&gt;Database Migration&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://gofr.dev/docs/advanced-guide/using-cron&#34;&gt;Cron Jobs&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Support for &lt;a href=&#34;https://gofr.dev/docs/advanced-guide/remote-log-level-change&#34;&gt;Changing Log Level&lt;/a&gt; Without Restarting&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://gofr.dev/docs/advanced-guide/swagger-documentation&#34;&gt;Swagger Rendering&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://gofr.dev/docs/advanced-guide/handling-file&#34;&gt;Abstracted File Systems&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://gofr.dev/docs/advanced-guide/handling-file&#34;&gt;Websockets&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;🚀 &lt;strong&gt;Getting Started&lt;/strong&gt;&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;strong&gt;Prerequisites&lt;/strong&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;GoFr requires &lt;strong&gt;&lt;a href=&#34;https://go.dev/&#34;&gt;Go&lt;/a&gt;&lt;/strong&gt; version &lt;strong&gt;&lt;a href=&#34;https://go.dev/doc/devel/release#go1.21.0&#34;&gt;1.21&lt;/a&gt;&lt;/strong&gt; or above.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;strong&gt;Installation&lt;/strong&gt;&lt;/h3&gt; &#xA;&lt;p&gt;To get started with GoFr, add the following import to your code and use Go’s module support to automatically fetch dependencies:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;import &#34;gofr.dev/pkg/gofr&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, use the command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;go get -u gofr.dev/pkg/gofr&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;🏃 &lt;strong&gt;Running GoFr&lt;/strong&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Here&#39;s a simple example to get a GoFr application up and running:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import &#34;gofr.dev/pkg/gofr&#34;&#xA;&#xA;func main() {&#xA;&#x9;app := gofr.New()&#xA;&#xA;&#x9;app.GET(&#34;/greet&#34;, func(ctx *gofr.Context) (any, error) {&#xA;&#x9;&#x9;return &#34;Hello World!&#34;, nil&#xA;&#x9;})&#xA;&#xA;&#x9;app.Run() // listens and serves on localhost:8000&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To run this code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ go run main.go&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Visit &lt;a href=&#34;http://localhost:8000/greet&#34;&gt;&lt;code&gt;localhost:8000/greet&lt;/code&gt;&lt;/a&gt; to see the result.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;📂 &lt;strong&gt;More Examples&lt;/strong&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Explore a variety of ready-to-run examples in the &lt;a href=&#34;https://github.com/gofr-dev/gofr/tree/development/examples&#34;&gt;GoFr examples directory&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;👩‍💻 &lt;strong&gt;Documentation&lt;/strong&gt;&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://pkg.go.dev/gofr.dev&#34;&gt;GoDoc&lt;/a&gt;&lt;/strong&gt;: Official API documentation.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://gofr.dev/docs&#34;&gt;GoFr Documentation&lt;/a&gt;&lt;/strong&gt;: Comprehensive guides and resources.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;👍 &lt;strong&gt;Contribute&lt;/strong&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Help us make GoFr even better:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;Star&lt;/strong&gt; this repo on GitHub! 🌟&lt;/li&gt; &#xA; &lt;li&gt;Write a review or tutorial on &lt;strong&gt;&lt;a href=&#34;https://medium.com/&#34;&gt;Medium&lt;/a&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;a href=&#34;https://dev.to/&#34;&gt;Dev.to&lt;/a&gt;&lt;/strong&gt;, or your blog.&lt;/li&gt; &#xA; &lt;li&gt;Review the &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gofr-dev/gofr/development/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt;&lt;/strong&gt; guide to learn how to contribute to the project.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;🔒 &lt;strong&gt;Secure Cloning&lt;/strong&gt;&lt;/h2&gt; &#xA;&lt;p&gt;To securely clone the GoFr repository, you can use HTTPS or SSH:&lt;/p&gt; &#xA;&lt;h3&gt;Cloning with HTTPS&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/gofr-dev/gofr.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Cloning with SSH&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone git@github.com:gofr-dev/gofr.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;🎁 &lt;strong&gt;Get a GoFr T-Shirt &amp;amp; Stickers!&lt;/strong&gt;&lt;/h3&gt; &#xA;&lt;p&gt;If your PR is merged, or if you contribute by writing articles or promoting GoFr, we invite you to fill out &lt;a href=&#34;https://forms.gle/R1Yz7ZzY3U5WWTgy5&#34;&gt;this form&lt;/a&gt; to claim your GoFr merchandise as a token of our appreciation!&lt;/p&gt; &#xA;&lt;h3&gt;Partners&lt;/h3&gt; &#xA;&lt;img src=&#34;https://resources.jetbrains.com/storage/products/company/brand/logos/jetbrains.png&#34; alt=&#34;JetBrains logo&#34; width=&#34;200&#34;&gt;</summary>
  </entry>
  <entry>
    <title>fsnotify/fsnotify</title>
    <updated>2025-04-13T02:00:21Z</updated>
    <id>tag:github.com,2025-04-13:/fsnotify/fsnotify</id>
    <link href="https://github.com/fsnotify/fsnotify" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Cross-platform filesystem notifications for Go.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;fsnotify is a Go library to provide cross-platform filesystem notifications on Windows, Linux, macOS, BSD, and illumos.&lt;/p&gt; &#xA;&lt;p&gt;Go 1.17 or newer is required; the full documentation is at &lt;a href=&#34;https://pkg.go.dev/github.com/fsnotify/fsnotify&#34;&gt;https://pkg.go.dev/github.com/fsnotify/fsnotify&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Platform support:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Backend&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;OS&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Status&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;inotify&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Linux&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Supported&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;kqueue&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;BSD, macOS&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Supported&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;ReadDirectoryChangesW&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Windows&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Supported&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;FEN&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;illumos&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Supported&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;fanotify&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Linux 5.9+&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/fsnotify/fsnotify/issues/114&#34;&gt;Not yet&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;FSEvents&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;macOS&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/fsnotify/fsnotify/issues/11#issuecomment-1279133120&#34;&gt;Needs support in x/sys/unix&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;USN Journals&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Windows&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/fsnotify/fsnotify/issues/53#issuecomment-1279829847&#34;&gt;Needs support in x/sys/windows&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Polling&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;em&gt;All&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/fsnotify/fsnotify/issues/9&#34;&gt;Not yet&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Linux and illumos should include Android and Solaris, but these are currently untested.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;A basic example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;    &#34;log&#34;&#xA;&#xA;    &#34;github.com/fsnotify/fsnotify&#34;&#xA;)&#xA;&#xA;func main() {&#xA;    // Create new watcher.&#xA;    watcher, err := fsnotify.NewWatcher()&#xA;    if err != nil {&#xA;        log.Fatal(err)&#xA;    }&#xA;    defer watcher.Close()&#xA;&#xA;    // Start listening for events.&#xA;    go func() {&#xA;        for {&#xA;            select {&#xA;            case event, ok := &amp;lt;-watcher.Events:&#xA;                if !ok {&#xA;                    return&#xA;                }&#xA;                log.Println(&#34;event:&#34;, event)&#xA;                if event.Has(fsnotify.Write) {&#xA;                    log.Println(&#34;modified file:&#34;, event.Name)&#xA;                }&#xA;            case err, ok := &amp;lt;-watcher.Errors:&#xA;                if !ok {&#xA;                    return&#xA;                }&#xA;                log.Println(&#34;error:&#34;, err)&#xA;            }&#xA;        }&#xA;    }()&#xA;&#xA;    // Add a path.&#xA;    err = watcher.Add(&#34;/tmp&#34;)&#xA;    if err != nil {&#xA;        log.Fatal(err)&#xA;    }&#xA;&#xA;    // Block main goroutine forever.&#xA;    &amp;lt;-make(chan struct{})&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Some more examples can be found in &lt;a href=&#34;https://raw.githubusercontent.com/fsnotify/fsnotify/main/cmd/fsnotify&#34;&gt;cmd/fsnotify&lt;/a&gt;, which can be run with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;% go run ./cmd/fsnotify&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Further detailed documentation can be found in godoc: &lt;a href=&#34;https://pkg.go.dev/github.com/fsnotify/fsnotify&#34;&gt;https://pkg.go.dev/github.com/fsnotify/fsnotify&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;h3&gt;Will a file still be watched when it&#39;s moved to another directory?&lt;/h3&gt; &#xA;&lt;p&gt;No, not unless you are watching the location it was moved to.&lt;/p&gt; &#xA;&lt;h3&gt;Are subdirectories watched?&lt;/h3&gt; &#xA;&lt;p&gt;No, you must add watches for any directory you want to watch (a recursive watcher is on the roadmap: &lt;a href=&#34;https://github.com/fsnotify/fsnotify/issues/18&#34;&gt;#18&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;h3&gt;Do I have to watch the Error and Event channels in a goroutine?&lt;/h3&gt; &#xA;&lt;p&gt;Yes. You can read both channels in the same goroutine using &lt;code&gt;select&lt;/code&gt; (you don&#39;t need a separate goroutine for both channels; see the example).&lt;/p&gt; &#xA;&lt;h3&gt;Why don&#39;t notifications work with NFS, SMB, FUSE, /proc, or /sys?&lt;/h3&gt; &#xA;&lt;p&gt;fsnotify requires support from underlying OS to work. The current NFS and SMB protocols does not provide network level support for file notifications, and neither do the /proc and /sys virtual filesystems.&lt;/p&gt; &#xA;&lt;p&gt;This could be fixed with a polling watcher (&lt;a href=&#34;https://github.com/fsnotify/fsnotify/issues/9&#34;&gt;#9&lt;/a&gt;), but it&#39;s not yet implemented.&lt;/p&gt; &#xA;&lt;h3&gt;Why do I get many Chmod events?&lt;/h3&gt; &#xA;&lt;p&gt;Some programs may generate a lot of attribute changes; for example Spotlight on macOS, anti-virus programs, backup applications, and some others are known to do this. As a rule, it&#39;s typically best to ignore Chmod events. They&#39;re often not useful, and tend to cause problems.&lt;/p&gt; &#xA;&lt;p&gt;Spotlight indexing on macOS can result in multiple events (see &lt;a href=&#34;https://github.com/fsnotify/fsnotify/issues/15&#34;&gt;#15&lt;/a&gt;). A temporary workaround is to add your folder(s) to the &lt;em&gt;Spotlight Privacy settings&lt;/em&gt; until we have a native FSEvents implementation (see &lt;a href=&#34;https://github.com/fsnotify/fsnotify/issues/11&#34;&gt;#11&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;h3&gt;Watching a file doesn&#39;t work well&lt;/h3&gt; &#xA;&lt;p&gt;Watching individual files (rather than directories) is generally not recommended as many programs (especially editors) update files atomically: it will write to a temporary file which is then moved to to destination, overwriting the original (or some variant thereof). The watcher on the original file is now lost, as that no longer exists.&lt;/p&gt; &#xA;&lt;p&gt;The upshot of this is that a power failure or crash won&#39;t leave a half-written file.&lt;/p&gt; &#xA;&lt;p&gt;Watch the parent directory and use &lt;code&gt;Event.Name&lt;/code&gt; to filter out files you&#39;re not interested in. There is an example of this in &lt;code&gt;cmd/fsnotify/file.go&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Platform-specific notes&lt;/h2&gt; &#xA;&lt;h3&gt;Linux&lt;/h3&gt; &#xA;&lt;p&gt;When a file is removed a REMOVE event won&#39;t be emitted until all file descriptors are closed; it will emit a CHMOD instead:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;fp := os.Open(&#34;file&#34;)&#xA;os.Remove(&#34;file&#34;)        // CHMOD&#xA;fp.Close()               // REMOVE&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is the event that inotify sends, so not much can be changed about this.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;fs.inotify.max_user_watches&lt;/code&gt; sysctl variable specifies the upper limit for the number of watches per user, and &lt;code&gt;fs.inotify.max_user_instances&lt;/code&gt; specifies the maximum number of inotify instances per user. Every Watcher you create is an &#34;instance&#34;, and every path you add is a &#34;watch&#34;.&lt;/p&gt; &#xA;&lt;p&gt;These are also exposed in &lt;code&gt;/proc&lt;/code&gt; as &lt;code&gt;/proc/sys/fs/inotify/max_user_watches&lt;/code&gt; and &lt;code&gt;/proc/sys/fs/inotify/max_user_instances&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;To increase them you can use &lt;code&gt;sysctl&lt;/code&gt; or write the value to proc file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# The default values on Linux 5.18&#xA;sysctl fs.inotify.max_user_watches=124983&#xA;sysctl fs.inotify.max_user_instances=128&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To make the changes persist on reboot edit &lt;code&gt;/etc/sysctl.conf&lt;/code&gt; or &lt;code&gt;/usr/lib/sysctl.d/50-default.conf&lt;/code&gt; (details differ per Linux distro; check your distro&#39;s documentation):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;fs.inotify.max_user_watches=124983&#xA;fs.inotify.max_user_instances=128&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Reaching the limit will result in a &#34;no space left on device&#34; or &#34;too many open files&#34; error.&lt;/p&gt; &#xA;&lt;h3&gt;kqueue (macOS, all BSD systems)&lt;/h3&gt; &#xA;&lt;p&gt;kqueue requires opening a file descriptor for every file that&#39;s being watched; so if you&#39;re watching a directory with five files then that&#39;s six file descriptors. You will run in to your system&#39;s &#34;max open files&#34; limit faster on these platforms.&lt;/p&gt; &#xA;&lt;p&gt;The sysctl variables &lt;code&gt;kern.maxfiles&lt;/code&gt; and &lt;code&gt;kern.maxfilesperproc&lt;/code&gt; can be used to control the maximum number of open files.&lt;/p&gt;</summary>
  </entry>
</feed>