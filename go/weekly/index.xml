<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-12-04T01:42:18Z</updated>
  <subtitle>Weekly Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>runfinch/finch</title>
    <updated>2022-12-04T01:42:18Z</updated>
    <id>tag:github.com,2022-12-04:/runfinch/finch</id>
    <link href="https://github.com/runfinch/finch" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The Finch CLI an open source client for container development&lt;/p&gt;&lt;hr&gt;&lt;picture&gt; &#xA; &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;https://raw.githubusercontent.com/runfinch/finch/main/contrib/logo/Finch_Horizontal_White.svg&#34;&gt; &#xA; &lt;source media=&#34;(prefers-color-scheme: light)&#34; srcset=&#34;https://raw.githubusercontent.com/runfinch/finch/main/contrib/logo/Finch_Horizontal_Black.svg&#34;&gt; &#xA; &lt;img alt=&#34;Finch logo&#34; width=&#34;40%&#34; height=&#34;auto&#34; src=&#34;https://raw.githubusercontent.com/runfinch/finch/main/contrib/logo/Finch_Horizontal_Black.svg?sanitize=true&#34;&gt; &#xA;&lt;/picture&gt; &#xA;&lt;h3&gt;Hello, Finch&lt;/h3&gt; &#xA;&lt;p&gt;Finch is an open source client for container development. Its simple installer provides a minimal native client along with an opinionated distribution of other open source components. Rather than creating even more options to reason about and choose from, Finch aims to help promote other projects by making it easy to install and use them, while offering a simple native client to tie it all together.&lt;/p&gt; &#xA;&lt;p&gt;Finch provides a simple client which is integrated with &lt;a href=&#34;https://github.com/containerd/nerdctl&#34;&gt;nerdctl&lt;/a&gt;. For the core build/run/push/pull commands, Finch depends upon nerdctl to handle the heavy lifting. It works with &lt;a href=&#34;https://containerd.io&#34;&gt;containerd&lt;/a&gt; for container management, and with &lt;a href=&#34;https://github.com/moby/buildkit&#34;&gt;BuildKit&lt;/a&gt; to handle Open Container Initiative (OCI) image builds. These components are all pulled together and run within a virtual machine managed by &lt;a href=&#34;https://github.com/lima-vm/lima&#34;&gt;Lima&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;With Finch, you can leverage these existing projects without chasing down all the details. Just install and start running and building your containers!&lt;/p&gt; &#xA;&lt;h3&gt;Getting Started with Finch on macOS&lt;/h3&gt; &#xA;&lt;p&gt;The project will in the near future have a more full set of documentation and tutorials. For now let&#39;s get started here. As mentioned above, &lt;code&gt;finch&lt;/code&gt; integrates with &lt;code&gt;nerdctl&lt;/code&gt;. While Finch doesn&#39;t implement 100% of the upstream commands, the most common commands are in place and working. The &lt;a href=&#34;https://github.com/containerd/nerdctl#command-reference&#34;&gt;nerdctl Command Reference&lt;/a&gt; can be relied upon as a starting point for documentation.&lt;/p&gt; &#xA;&lt;h4&gt;Installing Finch&lt;/h4&gt; &#xA;&lt;p&gt;To get started with Finch on macOS, the prerequisites are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;macOS catalina (10.15) or higher, newer versions are tested on a best-effort basis&lt;/li&gt; &#xA; &lt;li&gt;Intel or Apple Silicon M1 system for macOS&lt;/li&gt; &#xA; &lt;li&gt;Recommended minimum configuration is 2 CPU, 4 GB memory&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Download a release package for your architecture from the &lt;a href=&#34;https://github.com/runfinch/finch/releases&#34;&gt;project&#39;s GitHub releases&lt;/a&gt; page, and once downloaded double click and follow the directions.&lt;/p&gt; &#xA;&lt;h4&gt;Installing Finch via &lt;a href=&#34;https://brew.sh/&#34;&gt;brew&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ brew install --cask finch&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once the installation is complete, &lt;code&gt;finch vm init&lt;/code&gt; is required once to set up the underlying system. This initial setup usually takes about a minute.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;finch vm init&#xA;INFO[0000] Initializing and starting Finch virtual machine...&#xA;..&#xA;INFO[0067] Finch virtual machine started successfully&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Running containers and building images&lt;/h4&gt; &#xA;&lt;p&gt;You can now run a test container. If you&#39;re familiar with container development, you can use the &lt;code&gt;run&lt;/code&gt; command as you&#39;d expect.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;finch run --rm public.ecr.aws/finch/hello-finch&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you&#39;re new to containers, that is so exciting! Give the command above a try after you&#39;ve installed and initialized Finch. The &lt;code&gt;run&lt;/code&gt; command pulls an image locally if it&#39;s not already present, and then creates and runs a container for you. Note the handy &lt;code&gt;--rm&lt;/code&gt; option will delete the container instance once it&#39;s done executing.&lt;/p&gt; &#xA;&lt;p&gt;To build an image, try a quick example from the finch client repository.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone git@github.com:runfinch/finch.git&#xA;cd finch/contrib/hello-finch&#xA;finch build . -t hello-finch&#xA;..&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Again if you&#39;re new to containers, you just built a container image. Nice!&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;build&lt;/code&gt; command will work with the build system (the Moby Project&#39;s BuildKit in Finch&#39;s case) to create an OCI image from a Dockerfile, which is a special sort of recipe for creating an image. This image can then be used to create containers. You can see your locally pulled and built images with the &lt;code&gt;finch images&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;p&gt;Finch makes it easy to build and run containers across architectures with the &lt;code&gt;--platform&lt;/code&gt; option. When used with the &lt;code&gt;run&lt;/code&gt; command, it will create a container using the specified architecture. For example, on an Apple Silicon M1 system, &lt;code&gt;--platform=amd64&lt;/code&gt; will create a container and run processes within it using an x86-64 architecture.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;uname -ms&#xA;Darwin arm64&#xA;&#xA;finch run --rm --platform=amd64 public.ecr.aws/amazonlinux/amazonlinux uname -ms&#xA;Linux x86_64&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also use the &lt;code&gt;--platform&lt;/code&gt; option with builds, making it easy to create multiplatform images.&lt;/p&gt; &#xA;&lt;h3&gt;Working with Finch&lt;/h3&gt; &#xA;&lt;p&gt;We have plans to create some more documentation and tutorials here geared toward users who are new to containers, as well as some tips and tricks for more advanced users. For now, if you&#39;re ready to kick the tires, please do! You&#39;ll find most commands and options you&#39;re familiar with from other tools to present, and as you&#39;d expect (or, as they are &lt;a href=&#34;https://github.com/containerd/nerdctl#command-reference&#34;&gt;documented upstream with nerdctl&lt;/a&gt;). Most of the commands we use every day are covered, including volume and network management as well as Compose support. If Finch doesn&#39;t do something you want it to, please consider opening an Issue or a Pull Request.&lt;/p&gt; &#xA;&lt;h4&gt;Finch and other tools&lt;/h4&gt; &#xA;&lt;p&gt;The installer will install Finch and its dependencies in its own area of your system, and it can happily coexist with other container development tools. Finch is a new project and not meant to be a direct drop-in replacement for other tools. Therefore, we don&#39;t recommend aliasing or linking other command names to &lt;code&gt;finch&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;A note on volume mounts&lt;/h4&gt; &#xA;&lt;p&gt;The &lt;code&gt;run&lt;/code&gt; command has a &lt;code&gt;-v&lt;/code&gt; option for volume mounts. See &lt;code&gt;Volume flags&lt;/code&gt; under &lt;a href=&#34;https://github.com/containerd/nerdctl#whale-blue_square-nerdctl-run&#34;&gt;nerdctl run&lt;/a&gt; for more details, if you&#39;re not familiar. This allows you to mount directories from your local host into your container. One thing to note with Finch: currently, only locations within &lt;code&gt;$HOME&lt;/code&gt; are supported by the volume mount &lt;code&gt;-v&lt;/code&gt; option. Specifying directories outside &lt;code&gt;$HOME&lt;/code&gt; may cause unexpected behavior. Support for other mount locations will be added soon.&lt;/p&gt; &#xA;&lt;h4&gt;Configuration&lt;/h4&gt; &#xA;&lt;p&gt;Finch has a simple and extensible configuration. A configuration file at &lt;code&gt;${HOME}/.finch/finch.yaml&lt;/code&gt; will be generated on first run. Currently, this config file has options for system resource limits for the underlying virtual machine. These default limits are generated dynamically based on the resources available on the host system, but can be changed by manually editing the config file.&lt;/p&gt; &#xA;&lt;p&gt;Currently, the options are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;CPUs [int]: the amount of vCPU to dedicate to the virtual machine&lt;/li&gt; &#xA; &lt;li&gt;Memory [string]: the amount of memory to dedicate to the virtual machine&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For a full list of configuration options, check &lt;a href=&#34;https://raw.githubusercontent.com/runfinch/finch/main/pkg/config/config.go#L25&#34;&gt;the struct here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;An example &lt;code&gt;finch.yaml&lt;/code&gt; looks like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;cpus: 4&#xA;memory: 4GiB&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;What&#39;s next?&lt;/h3&gt; &#xA;&lt;p&gt;We are excited to start this project in the open, and we&#39;d love to hear from you. If you have ideas or find bugs please open an issue. Please feel free to start a discussion if you have something you&#39;d like to propose or brainstorm. Pull requests are welcome, as well! See the &lt;a href=&#34;https://raw.githubusercontent.com/runfinch/finch/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTING&lt;/a&gt; doc for more info on contributing, and the path to reviewer and maintainer roles for those interested.&lt;/p&gt; &#xA;&lt;p&gt;As the project gets a bit of momentum, maintainers will start creating milestones and look to establish a regular release cadence. In time, we&#39;ll also start to curate a public roadmap from the community ideas and issues that roll in. We already have some ideas, including:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;More minimal guest OS footprint&lt;/li&gt; &#xA; &lt;li&gt;Windows client support&lt;/li&gt; &#xA; &lt;li&gt;Linux client support&lt;/li&gt; &#xA; &lt;li&gt;Formal extensibility&lt;/li&gt; &#xA; &lt;li&gt;Continued performance improvement, ongoing&lt;/li&gt; &#xA; &lt;li&gt;Stability and usability improvement, ongoing&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you&#39;d like to chat with us, please find us in the &lt;code&gt;#finch&lt;/code&gt; channel on the &lt;a href=&#34;https://cloud-native.slack.com&#34;&gt;CNCF slack&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>lima-vm/lima</title>
    <updated>2022-12-04T01:42:18Z</updated>
    <id>tag:github.com,2022-12-04:/lima-vm/lima</id>
    <link href="https://github.com/lima-vm/lima" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Linux virtual machines, typically on macOS, for running containerd&lt;/p&gt;&lt;hr&gt;&lt;p&gt;Translations: &lt;a href=&#34;https://raw.githubusercontent.com/lima-vm/lima/master/README.ja.md&#34;&gt;日本語(Japanese)&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lima-vm/lima/master/#getting-started&#34;&gt;[📖&lt;strong&gt;Getting started&lt;/strong&gt;]&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/lima-vm/lima/master/#faqs--troubleshooting&#34;&gt;[❓&lt;strong&gt;FAQs &amp;amp; Troubleshooting]&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/lima-vm/lima/master/docs/images/lima-logo-01.svg?sanitize=true&#34; alt=&#34;Lima logo&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Lima: Linux virtual machines (on macOS, in most cases)&lt;/h1&gt; &#xA;&lt;p&gt;Lima launches Linux virtual machines with automatic file sharing and port forwarding (similar to WSL2), and &lt;a href=&#34;https://containerd.io&#34;&gt;containerd&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Lima can be considered as a some sort of unofficial &#34;containerd for Mac&#34;.&lt;/p&gt; &#xA;&lt;p&gt;Lima is expected to be used on macOS hosts, but can be used on Linux hosts as well.&lt;/p&gt; &#xA;&lt;p&gt;✅ Automatic file sharing&lt;/p&gt; &#xA;&lt;p&gt;✅ Automatic port forwarding&lt;/p&gt; &#xA;&lt;p&gt;✅ Built-in support for &lt;a href=&#34;https://containerd.io&#34;&gt;containerd&lt;/a&gt; (&lt;a href=&#34;https://raw.githubusercontent.com/lima-vm/lima/master/examples&#34;&gt;Other container engines can be used too&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;p&gt;✅ Intel on Intel&lt;/p&gt; &#xA;&lt;p&gt;✅ &lt;a href=&#34;https://raw.githubusercontent.com/lima-vm/lima/master/docs/multi-arch.md&#34;&gt;ARM on Intel&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;✅ ARM on ARM&lt;/p&gt; &#xA;&lt;p&gt;✅ &lt;a href=&#34;https://raw.githubusercontent.com/lima-vm/lima/master/docs/multi-arch.md&#34;&gt;Intel on ARM&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;✅ Various guest Linux distributions: &lt;a href=&#34;https://raw.githubusercontent.com/lima-vm/lima/master/examples/almalinux.yaml&#34;&gt;AlmaLinux&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/lima-vm/lima/master/examples/alpine.yaml&#34;&gt;Alpine&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/lima-vm/lima/master/examples/archlinux.yaml&#34;&gt;Arch Linux&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/lima-vm/lima/master/examples/debian.yaml&#34;&gt;Debian&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/lima-vm/lima/master/examples/fedora.yaml&#34;&gt;Fedora&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/lima-vm/lima/master/examples/opensuse.yaml&#34;&gt;openSUSE&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/lima-vm/lima/master/examples/oraclelinux.yaml&#34;&gt;Oracle Linux&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/lima-vm/lima/master/examples/rocky.yaml&#34;&gt;Rocky&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/lima-vm/lima/master/examples/ubuntu.yaml&#34;&gt;Ubuntu&lt;/a&gt; (default), ...&lt;/p&gt; &#xA;&lt;p&gt;Related project: &lt;a href=&#34;https://github.com/lima-vm/sshocker&#34;&gt;sshocker (ssh with file sharing and port forwarding)&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This project is unrelated to &lt;a href=&#34;https://gitlab.freedesktop.org/lima&#34;&gt;The Lima driver project (driver for ARM Mali GPUs)&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/lima-vm/lima/master/docs/talks.md&#34;&gt;talks&lt;/a&gt; page contains links to slides and video from conference presentations about Lima.&lt;/p&gt; &#xA;&lt;h2&gt;Motivation&lt;/h2&gt; &#xA;&lt;p&gt;The goal of Lima is to promote &lt;a href=&#34;https://containerd.io&#34;&gt;containerd&lt;/a&gt; including &lt;a href=&#34;https://github.com/containerd/nerdctl&#34;&gt;nerdctl (contaiNERD ctl)&lt;/a&gt; to Mac users, but Lima can be used for non-container applications as well.&lt;/p&gt; &#xA;&lt;h2&gt;Community&lt;/h2&gt; &#xA;&lt;h3&gt;Adopters&lt;/h3&gt; &#xA;&lt;p&gt;Container environments:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://rancherdesktop.io/&#34;&gt;Rancher Desktop&lt;/a&gt;: Kubernetes and container management to the desktop&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/abiosoft/colima&#34;&gt;Colima&lt;/a&gt;: Docker (and Kubernetes) on macOS with minimal setup&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/runfinch/finch&#34;&gt;Finch&lt;/a&gt;: Finch is a command line client for local container development&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;GUI:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/unixorn/lima-xbar-plugin&#34;&gt;Lima xbar plugin&lt;/a&gt;: &lt;a href=&#34;https://xbarapp.com/&#34;&gt;xbar&lt;/a&gt; plugin to start/stop VMs from the menu bar and see their running status.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/afbjorklund/lima-gui&#34;&gt;lima-gui&lt;/a&gt;: Qt GUI for Lima&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Communication channels&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lima-vm/lima/discussions&#34;&gt;GitHub Discussions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;#lima&lt;/code&gt; channel in the CNCF Slack &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;New account: &lt;a href=&#34;https://slack.cncf.io/&#34;&gt;https://slack.cncf.io/&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Login: &lt;a href=&#34;https://cloud-native.slack.com/&#34;&gt;https://cloud-native.slack.com/&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Code of Conduct&lt;/h3&gt; &#xA;&lt;p&gt;Lima follows the &lt;a href=&#34;https://github.com/cncf/foundation/raw/master/code-of-conduct.md&#34;&gt;CNCF Code of Conduct&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;h3&gt;uname&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ uname -a&#xA;Darwin macbook.local 20.4.0 Darwin Kernel Version 20.4.0: Thu Apr 22 21:46:47 PDT 2021; root:xnu-7195.101.2~1/RELEASE_X86_64 x86_64&#xA;&#xA;$ lima uname -a&#xA;Linux lima-default 5.11.0-16-generic #17-Ubuntu SMP Wed Apr 14 20:12:43 UTC 2021 x86_64 x86_64 x86_64 GNU/Linux&#xA;&#xA;$ LIMA_INSTANCE=arm lima uname -a&#xA;Linux lima-arm 5.11.0-16-generic #17-Ubuntu SMP Wed Apr 14 20:10:16 UTC 2021 aarch64 aarch64 aarch64 GNU/Linux&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/lima-vm/lima/master/docs/multi-arch.md&#34;&gt;&lt;code&gt;./docs/multi-arch.md&lt;/code&gt;&lt;/a&gt; for Intel-on-ARM and ARM-on-Intel .&lt;/p&gt; &#xA;&lt;h3&gt;Sharing files across macOS and Linux&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ echo &#34;files under /Users on macOS filesystem are readable from Linux&#34; &amp;gt; some-file&#xA;&#xA;$ lima cat some-file&#xA;files under /Users on macOS filesystem are readable from Linux&#xA;&#xA;$ lima sh -c &#39;echo &#34;/tmp/lima is writable from both macOS and Linux&#34; &amp;gt; /tmp/lima/another-file&#39;&#xA;&#xA;$ cat /tmp/lima/another-file&#xA;/tmp/lima is writable from both macOS and Linux&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Running containerd containers (compatible with Docker containers)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ lima nerdctl run -d --name nginx -p 127.0.0.1:8080:80 nginx:alpine&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;You don&#39;t need to run &#34;lima nerdctl&#34; everytime, instead you can use special shortcut called &#34;nerdctl.lima&#34; to do the same thing. By default, it&#39;ll be installed along with the lima, so, you don&#39;t need to do anything extra. There will be a symlink called nerdctl pointing to nerdctl.lima. This is only created when there is no nerdctl entry in the directory already though. It worths to mention that this is created only via make install. Not included in Homebrew/MacPorts/nix packages.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://127.0.0.1:8080&#34;&gt;http://127.0.0.1:8080&lt;/a&gt; is accessible from both macOS and Linux.&lt;/p&gt; &#xA;&lt;p&gt;For the usage of containerd and nerdctl (contaiNERD ctl), visit &lt;a href=&#34;https://github.com/containerd/containerd&#34;&gt;https://github.com/containerd/containerd&lt;/a&gt; and &lt;a href=&#34;https://github.com/containerd/nerdctl&#34;&gt;https://github.com/containerd/nerdctl&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Homebrew/homebrew-core/raw/master/Formula/lima.rb&#34;&gt;Homebrew package&lt;/a&gt; is available.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;brew install lima&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Manual installation steps&lt;/summary&gt; &#xA; &lt;p&gt; &lt;/p&gt;&#xA; &lt;h4&gt;Install QEMU&lt;/h4&gt; &#xA; &lt;p&gt;Install recent version of QEMU.&lt;/p&gt; &#xA; &lt;p&gt;On M1 macOS, &lt;a href=&#34;https://github.com/Homebrew/homebrew-core/pull/96743&#34;&gt;Homebrew&#39;s QEMU &lt;code&gt;6.2.0_1&lt;/code&gt;&lt;/a&gt; or later is recommended.&lt;/p&gt; &#xA; &lt;p&gt;If you are not using Homebrew, make sure to include the following commits to boot recent Linux guests:&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/qemu/qemu/commit/ad99f64f&#34;&gt;https://github.com/qemu/qemu/commit/ad99f64f&lt;/a&gt; &lt;code&gt;hvf: arm: Use macros for sysreg shift/masking&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/qemu/qemu/commit/7f6c295c&#34;&gt;https://github.com/qemu/qemu/commit/7f6c295c&lt;/a&gt; &lt;code&gt;hvf: arm: Handle unknown ID registers as RES0&lt;/code&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;p&gt;These commits are also included in the QEMU 7.0, however, &lt;a href=&#34;https://github.com/lima-vm/lima/pull/796&#34;&gt;it should be noted that QEMU 7.0 needs macOS 12.4 or later to use more than 3 GiB memory on M1&lt;/a&gt;.&lt;/p&gt; &#xA; &lt;h4&gt;Install Lima&lt;/h4&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Download the binary archive of Lima from &lt;a href=&#34;https://github.com/lima-vm/lima/releases&#34;&gt;https://github.com/lima-vm/lima/releases&lt;/a&gt; , and extract it under &lt;code&gt;/usr/local&lt;/code&gt; (or somewhere else). For instance:&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew install jq&#xA;VERSION=$(curl -fsSL https://api.github.com/repos/lima-vm/lima/releases/latest | jq -r .tag_name)&#xA;curl -fsSL &#34;https://github.com/lima-vm/lima/releases/download/${VERSION}/lima-${VERSION:1}-$(uname -s)-$(uname -m).tar.gz&#34; | tar Cxzvm /usr/local&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;To install Lima from the source, run &lt;code&gt;make &amp;amp;&amp;amp; make install&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;blockquote&gt; &#xA;  &lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt; Lima is not regularly tested on ARM Mac (due to lack of CI).&lt;/p&gt; &#xA; &lt;/blockquote&gt; &#xA; &lt;p&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Usage&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;[macOS]$ limactl start&#xA;...&#xA;INFO[0029] READY. Run `lima` to open the shell.&#xA;&#xA;[macOS]$ lima uname&#xA;Linux&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Command reference&lt;/h3&gt; &#xA;&lt;h4&gt;&lt;code&gt;limactl start&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;limactl start [--name=NAME] [--tty=false] &amp;lt;template://TEMPLATE&amp;gt;&lt;/code&gt;: start the Linux instance&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ limactl start&#xA;? Creating an instance &#34;default&#34;  [Use arrows to move, type to filter]&#xA;&amp;gt; Proceed with the current configuration&#xA;  Open an editor to review or modify the current configuration&#xA;  Choose another example (docker, podman, archlinux, fedora, ...)&#xA;  Exit&#xA;...&#xA;INFO[0029] READY. Run `lima` to open the shell.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Choose &lt;code&gt;Proceed with the current configuration&lt;/code&gt;, and wait until &#34;READY&#34; to be printed on the host terminal. For automation, &lt;code&gt;--tty=false&lt;/code&gt; flag can be used for disabling the interactive user interface.&lt;/p&gt; &#xA;&lt;h5&gt;Advanced usage&lt;/h5&gt; &#xA;&lt;p&gt;To create an instance &#34;default&#34; from a template &#34;docker&#34;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ limactl start --name=default template://docker&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;NOTE: &lt;code&gt;limactl start template://TEMPLATE&lt;/code&gt; requires Lima v0.9.0 or later. Older releases require &lt;code&gt;limactl start /usr/local/share/doc/lima/examples/TEMPLATE.yaml&lt;/code&gt; instead.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;To see the template list:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ limactl start --list-templates&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To create an instance &#34;default&#34; from a local file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ limactl start --name=default /usr/local/share/lima/examples/fedora.yaml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To create an instance &#34;default&#34; from a remote URL (use carefully, with a trustable source):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ limactl start --name=default https://raw.githubusercontent.com/lima-vm/lima/master/examples/alpine.yaml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;limactl shell&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;limactl shell &amp;lt;INSTANCE&amp;gt; &amp;lt;COMMAND&amp;gt;&lt;/code&gt;: launch &lt;code&gt;&amp;lt;COMMAND&amp;gt;&lt;/code&gt; on Linux.&lt;/p&gt; &#xA;&lt;p&gt;For the &#34;default&#34; instance, this command can be shortened as &lt;code&gt;lima &amp;lt;COMMAND&amp;gt;&lt;/code&gt;. The &lt;code&gt;lima&lt;/code&gt; command also accepts the instance name as the environment variable &lt;code&gt;$LIMA_INSTANCE&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;limactl copy&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;limactl copy &amp;lt;SOURCE&amp;gt; ... &amp;lt;TARGET&amp;gt;&lt;/code&gt;: copy files between instances, or between instances and the host&lt;/p&gt; &#xA;&lt;p&gt;Use &lt;code&gt;&amp;lt;INSTANCE&amp;gt;:&amp;lt;FILENAME&amp;gt;&lt;/code&gt; to specify a source or target inside an instance.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;limactl list&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;limactl list [--json]&lt;/code&gt;: show the instances&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;limactl stop&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;limactl stop [--force] &amp;lt;INSTANCE&amp;gt;&lt;/code&gt;: stop the instance&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;limactl delete&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;limactl delete [--force] &amp;lt;INSTANCE&amp;gt;&lt;/code&gt;: delete the instance&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;limactl factory-reset&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;limactl factory-reset &amp;lt;INSTANCE&amp;gt;&lt;/code&gt;: factory reset the instance&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;limactl edit&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;limactl edit &amp;lt;INSTANCE&amp;gt;&lt;/code&gt;: edit the instance&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;limactl disk&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;limactl disk create &amp;lt;DISK&amp;gt; --size &amp;lt;SIZE&amp;gt;&lt;/code&gt;: create a new external disk to attach to an instance&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;limactl disk delete &amp;lt;DISK&amp;gt;&lt;/code&gt;: delete an existing disk&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;limactl disk list&lt;/code&gt;: list all existing disks&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;limactl completion&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;To enable bash completion, add &lt;code&gt;source &amp;lt;(limactl completion bash)&lt;/code&gt; to &lt;code&gt;~/.bash_profile&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To enable zsh completion, see &lt;code&gt;limactl completion zsh --help&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;span&gt;⚠&lt;/span&gt; CAUTION: make sure to back up your data&lt;/h3&gt; &#xA;&lt;p&gt;Lima may have bugs that result in loss of data.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Make sure to back up your data before running Lima.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Especially, the following data might be easily lost:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Data in the shared writable directories (&lt;code&gt;/tmp/lima&lt;/code&gt; by default), probably after hibernation of the host machine (e.g., after closing and reopening the laptop lid)&lt;/li&gt; &#xA; &lt;li&gt;Data in the VM image, mostly when upgrading the version of lima&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Configuration&lt;/h3&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/lima-vm/lima/master/examples/default.yaml&#34;&gt;&lt;code&gt;./examples/default.yaml&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The current default spec:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;OS: Ubuntu 22.10 (Kinetic Kudu)&lt;/li&gt; &#xA; &lt;li&gt;CPU: 4 cores&lt;/li&gt; &#xA; &lt;li&gt;Memory: 4 GiB&lt;/li&gt; &#xA; &lt;li&gt;Disk: 100 GiB&lt;/li&gt; &#xA; &lt;li&gt;Mounts: &lt;code&gt;~&lt;/code&gt; (read-only), &lt;code&gt;/tmp/lima&lt;/code&gt; (writable)&lt;/li&gt; &#xA; &lt;li&gt;SSH: 127.0.0.1:60022&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How it works&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Hypervisor: QEMU with HVF accelerator&lt;/li&gt; &#xA; &lt;li&gt;Filesystem sharing: &lt;a href=&#34;https://raw.githubusercontent.com/lima-vm/lima/master/docs/mount.md&#34;&gt;Reverse SSHFS (default), or virtio-9p-pci aka virtfs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Port forwarding: &lt;code&gt;ssh -L&lt;/code&gt;, automated by watching &lt;code&gt;/proc/net/tcp&lt;/code&gt; and &lt;code&gt;iptables&lt;/code&gt; events in the guest&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Developer guide&lt;/h2&gt; &#xA;&lt;h3&gt;Contributing to Lima&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Please certify your &lt;a href=&#34;https://developercertificate.org/&#34;&gt;Developer Certificate of Origin (DCO)&lt;/a&gt;, by signing off your commit with &lt;code&gt;git commit -s&lt;/code&gt; and with your real name.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Please squash commits.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Help wanted&lt;/h3&gt; &#xA;&lt;p&gt;&lt;span&gt;🙏&lt;/span&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Performance optimization&lt;/li&gt; &#xA; &lt;li&gt;More guest distros&lt;/li&gt; &#xA; &lt;li&gt;Windows hosts&lt;/li&gt; &#xA; &lt;li&gt;virtio-fs to replace virtio-9p-pci aka virtfs (work has to be done on QEMU repo)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apple/darwin-xnu/raw/xnu-7195.81.3/bsd/man/man4/vsock.4&#34;&gt;vsock&lt;/a&gt; to replace SSH (work has to be done on QEMU repo)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;FAQs &amp;amp; Troubleshooting&lt;/h2&gt; &#xA;&lt;!-- doctoc: https://github.com/thlorenz/doctoc --&gt; &#xA;&lt;!-- START doctoc generated TOC please keep comment here to allow auto update --&gt; &#xA;&lt;!-- DON&#39;T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE --&gt; &#xA;&lt;h3&gt;Generic&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lima-vm/lima/master/#generic&#34;&gt;Generic&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lima-vm/lima/master/#whats-my-login-password&#34;&gt;&#34;What&#39;s my login password?&#34;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lima-vm/lima/master/#does-lima-work-on-arm-mac&#34;&gt;&#34;Does Lima work on ARM Mac?&#34;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lima-vm/lima/master/#can-i-run-non-ubuntu-guests&#34;&gt;&#34;Can I run non-Ubuntu guests?&#34;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lima-vm/lima/master/#can-i-run-other-container-engines-such-as-docker-and-podman-what-about-kubernetes&#34;&gt;&#34;Can I run other container engines such as Docker and Podman? What about Kubernetes?&#34;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lima-vm/lima/master/#can-i-run-lima-with-a-remote-linux-machine&#34;&gt;&#34;Can I run Lima with a remote Linux machine?&#34;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lima-vm/lima/master/#advantages-compared-to-docker-for-mac&#34;&gt;&#34;Advantages compared to Docker for Mac?&#34;&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lima-vm/lima/master/#qemu&#34;&gt;QEMU&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lima-vm/lima/master/#qemu-crashes-with-hv_error&#34;&gt;&#34;QEMU crashes with &lt;code&gt;HV_ERROR&lt;/code&gt;&#34;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lima-vm/lima/master/#qemu-is-slow&#34;&gt;&#34;QEMU is slow&#34;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lima-vm/lima/master/#error-killed--9&#34;&gt;error &#34;killed -9&#34;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lima-vm/lima/master/#qemu-crashes-with-vmx_write_mem-mmu_gva_to_gpa-xxxxxxxxxxxxxxxx-failed&#34;&gt;&#34;QEMU crashes with &lt;code&gt;vmx_write_mem: mmu_gva_to_gpa XXXXXXXXXXXXXXXX failed&lt;/code&gt;&#34;&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lima-vm/lima/master/#ssh&#34;&gt;SSH&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lima-vm/lima/master/#port-forwarding-does-not-work&#34;&gt;&#34;Port forwarding does not work&#34;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lima-vm/lima/master/#stuck-on-waiting-for-the-essential-requirement-1-of-x-ssh&#34;&gt;stuck on &#34;Waiting for the essential requirement 1 of X: &#34;ssh&#34;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lima-vm/lima/master/#permission-denied-for-limactl-cp-command&#34;&gt;&#34;permission denied&#34; for &lt;code&gt;limactl cp&lt;/code&gt; command&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lima-vm/lima/master/#networking&#34;&gt;Networking&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lima-vm/lima/master/#cannot-access-the-guest-ip-192168515-from-the-host&#34;&gt;&#34;Cannot access the guest IP 192.168.5.15 from the host&#34;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lima-vm/lima/master/#ping-shows-duplicate-packets-and-massive-response-times&#34;&gt;Ping shows duplicate packets and massive response times&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lima-vm/lima/master/#external-projects&#34;&gt;External projects&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lima-vm/lima/master/#i-am-using-rancher-desktop-how-to-deal-with-the-underlying-lima&#34;&gt;&#34;I am using Rancher Desktop. How to deal with the underlying Lima?&#34;&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lima-vm/lima/master/#hints-for-debugging-other-problems&#34;&gt;&#34;Hints for debugging other problems?&#34;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- END doctoc generated TOC please keep comment here to allow auto update --&gt; &#xA;&lt;h3&gt;Generic&lt;/h3&gt; &#xA;&lt;h4&gt;&#34;What&#39;s my login password?&#34;&lt;/h4&gt; &#xA;&lt;p&gt;Password is disabled and locked by default. You have to use &lt;code&gt;limactl shell bash&lt;/code&gt; (or &lt;code&gt;lima bash&lt;/code&gt;) to open a shell.&lt;/p&gt; &#xA;&lt;p&gt;Alternatively, you may also directly ssh into the guest: &lt;code&gt;ssh -p 60022 -i ~/.lima/_config/user -o NoHostAuthenticationForLocalhost=yes 127.0.0.1&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;&#34;Does Lima work on ARM Mac?&#34;&lt;/h4&gt; &#xA;&lt;p&gt;Yes, it should work, but not regularly tested on ARM (due to lack of CI).&lt;/p&gt; &#xA;&lt;h4&gt;&#34;Can I run non-Ubuntu guests?&#34;&lt;/h4&gt; &#xA;&lt;p&gt;AlmaLinux, Alpine, Arch Linux, Debian, Fedora, openSUSE, Oracle Linux, and Rocky are also known to work. See &lt;a href=&#34;https://raw.githubusercontent.com/lima-vm/lima/master/examples/&#34;&gt;&lt;code&gt;./examples/&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;An image has to satisfy the following requirements:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;systemd or OpenRC&lt;/li&gt; &#xA; &lt;li&gt;cloud-init&lt;/li&gt; &#xA; &lt;li&gt;The following binaries to be preinstalled: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;sudo&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;The following binaries to be preinstalled, or installable via the package manager: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;sshfs&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;newuidmap&lt;/code&gt; and &lt;code&gt;newgidmap&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;apt-get&lt;/code&gt;, &lt;code&gt;dnf&lt;/code&gt;, &lt;code&gt;apk&lt;/code&gt;, &lt;code&gt;pacman&lt;/code&gt;, or &lt;code&gt;zypper&lt;/code&gt; (if you want to contribute support for another package manager, run &lt;code&gt;git grep apt-get&lt;/code&gt; to find out where to modify)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&#34;Can I run other container engines such as Docker and Podman? What about Kubernetes?&#34;&lt;/h4&gt; &#xA;&lt;p&gt;Yes, any container engine should work with Lima.&lt;/p&gt; &#xA;&lt;p&gt;Container runtime examples:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lima-vm/lima/master/examples/docker.yaml&#34;&gt;&lt;code&gt;./examples/docker.yaml&lt;/code&gt;&lt;/a&gt;: Docker&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lima-vm/lima/master/examples/podman.yaml&#34;&gt;&lt;code&gt;./examples/podman.yaml&lt;/code&gt;&lt;/a&gt;: Podman&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lima-vm/lima/master/examples/apptainer.yaml&#34;&gt;&lt;code&gt;./examples/apptainer.yaml&lt;/code&gt;&lt;/a&gt;: Apptainer&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Container image builder examples:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lima-vm/lima/master/examples/buildkit.yaml&#34;&gt;&lt;code&gt;./examples/buildkit.yaml&lt;/code&gt;&lt;/a&gt;: BuildKit&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Container orchestrator examples:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lima-vm/lima/master/examples/k3s.yaml&#34;&gt;&lt;code&gt;./examples/k3s.yaml&lt;/code&gt;&lt;/a&gt;: Kubernetes (k3s)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lima-vm/lima/master/examples/k8s.yaml&#34;&gt;&lt;code&gt;./examples/k8s.yaml&lt;/code&gt;&lt;/a&gt;: Kubernetes (kubeadm)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lima-vm/lima/master/examples/nomad.yaml&#34;&gt;&lt;code&gt;./examples/nomad.yaml&lt;/code&gt;&lt;/a&gt;: Nomad&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The default Ubuntu image also contains LXD. Run&lt;code&gt;lima sudo lxc init&lt;/code&gt; to set up LXD.&lt;/p&gt; &#xA;&lt;p&gt;See also third party containerd projects based on Lima:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://rancherdesktop.io/&#34;&gt;Rancher Desktop&lt;/a&gt;: Kubernetes and container management to the desktop&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/abiosoft/colima&#34;&gt;Colima&lt;/a&gt;: Docker (and Kubernetes) on macOS with minimal setup&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&#34;Can I run Lima with a remote Linux machine?&#34;&lt;/h4&gt; &#xA;&lt;p&gt;Lima itself does not support connecting to a remote Linux machine, but &lt;a href=&#34;https://github.com/lima-vm/sshocker&#34;&gt;sshocker&lt;/a&gt;, the predecessor or Lima, provides similar features for remote Linux machines.&lt;/p&gt; &#xA;&lt;p&gt;e.g., run &lt;code&gt;sshocker -v /Users/foo:/home/foo/mnt -p 8080:80 &amp;lt;USER&amp;gt;@&amp;lt;HOST&amp;gt;&lt;/code&gt; to expose &lt;code&gt;/Users/foo&lt;/code&gt; to the remote machine as &lt;code&gt;/home/foo/mnt&lt;/code&gt;, and forward &lt;code&gt;localhost:8080&lt;/code&gt; to the port 80 of the remote machine.&lt;/p&gt; &#xA;&lt;h4&gt;&#34;Advantages compared to Docker for Mac?&#34;&lt;/h4&gt; &#xA;&lt;p&gt;Lima is free software (Apache License 2.0), while Docker for Mac is not. Their &lt;a href=&#34;https://www.docker.com/legal/docker-software-end-user-license-agreement&#34;&gt;EULA&lt;/a&gt; even prohibits disclosure of benchmarking result.&lt;/p&gt; &#xA;&lt;p&gt;On the other hand, &lt;a href=&#34;https://github.com/moby/moby&#34;&gt;Moby&lt;/a&gt;, aka Docker for Linux, is free software, but Moby/Docker lacks several novel features of containerd, such as:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/containerd/nerdctl/raw/master/docs/stargz.md&#34;&gt;On-demand image pulling (aka lazy-pulling, eStargz)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/containerd/nerdctl/raw/master/docs/ocicrypt.md&#34;&gt;Running an encrypted container&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Importing and exporting &lt;a href=&#34;https://github.com/opencontainers/image-spec/raw/master/image-layout.md&#34;&gt;local OCI archives&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;QEMU&lt;/h3&gt; &#xA;&lt;h4&gt;&#34;QEMU crashes with &lt;code&gt;HV_ERROR&lt;/code&gt;&#34;&lt;/h4&gt; &#xA;&lt;p&gt;If you have installed QEMU v6.0.0 or later on macOS 11 via homebrew, your QEMU binary should have been already automatically signed to enable HVF acceleration.&lt;/p&gt; &#xA;&lt;p&gt;However, if you see &lt;code&gt;HV_ERROR&lt;/code&gt;, you might need to sign the binary manually.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cat &amp;gt;entitlements.xml &amp;lt;&amp;lt;EOF&#xA;&amp;lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&amp;gt;&#xA;&amp;lt;!DOCTYPE plist PUBLIC &#34;-//Apple//DTD PLIST 1.0//EN&#34; &#34;http://www.apple.com/DTDs/PropertyList-1.0.dtd&#34;&amp;gt;&#xA;&amp;lt;plist version=&#34;1.0&#34;&amp;gt;&#xA;&amp;lt;dict&amp;gt;&#xA;    &amp;lt;key&amp;gt;com.apple.security.hypervisor&amp;lt;/key&amp;gt;&#xA;    &amp;lt;true/&amp;gt;&#xA;&amp;lt;/dict&amp;gt;&#xA;&amp;lt;/plist&amp;gt;&#xA;EOF&#xA;&#xA;codesign -s - --entitlements entitlements.xml --force /usr/local/bin/qemu-system-x86_64&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: &lt;strong&gt;Only&lt;/strong&gt; on macOS versions &lt;strong&gt;before&lt;/strong&gt; 10.15.7 you might need to add this entitlement in addition:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    &amp;lt;key&amp;gt;com.apple.vm.hypervisor&amp;lt;/key&amp;gt;&#xA;    &amp;lt;true/&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&#34;QEMU is slow&#34;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Make sure that HVF is enabled with &lt;code&gt;com.apple.security.hypervisor&lt;/code&gt; entitlement. See &lt;a href=&#34;https://raw.githubusercontent.com/lima-vm/lima/master/#qemu-crashes-with-hv_error&#34;&gt;&#34;QEMU crashes with &lt;code&gt;HV_ERROR&lt;/code&gt;&#34;&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Emulating non-native machines (ARM-on-Intel, Intel-on-ARM) is slow by design. See &lt;a href=&#34;https://raw.githubusercontent.com/lima-vm/lima/master/docs/multi-arch.md&#34;&gt;&lt;code&gt;docs/multi-arch.md&lt;/code&gt;&lt;/a&gt; for a workaround.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;error &#34;killed -9&#34;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;make sure qemu is codesigned, See &lt;a href=&#34;https://raw.githubusercontent.com/lima-vm/lima/master/#qemu-crashes-with-hv_error&#34;&gt;&#34;QEMU crashes with &lt;code&gt;HV_ERROR&lt;/code&gt;&#34;&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;if you are on macOS 10.15.7 or 11.0 or later make sure the entitlement &lt;code&gt;com.apple.vm.hypervisor&lt;/code&gt; is &lt;strong&gt;not&lt;/strong&gt; added. It only works on older macOS versions. You can clear the codesigning with &lt;code&gt;codesign --remove-signature /usr/local/bin/qemu-system-x86_64&lt;/code&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/lima-vm/lima/master/#getting-started&#34;&gt;start over&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&#34;QEMU crashes with &lt;code&gt;vmx_write_mem: mmu_gva_to_gpa XXXXXXXXXXXXXXXX failed&lt;/code&gt;&#34;&lt;/h4&gt; &#xA;&lt;p&gt;This error is known to happen when running an image of RHEL8-compatible distribution such as Rocky Linux 8.x on Intel Mac. A workaround is to set environment variable &lt;code&gt;QEMU_SYSTEM_X86_64=&#34;qemu-system-x86_64 -cpu Haswell-v4&#34;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://bugs.launchpad.net/qemu/+bug/1838390&#34;&gt;https://bugs.launchpad.net/qemu/+bug/1838390&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;SSH&lt;/h3&gt; &#xA;&lt;h4&gt;&#34;Port forwarding does not work&#34;&lt;/h4&gt; &#xA;&lt;p&gt;Prior to Lima v0.7.0, Lima did not support forwarding privileged ports (1-1023). e.g., you had to use 8080, not 80.&lt;/p&gt; &#xA;&lt;p&gt;Lima v0.7.0 and later supports forwarding privileged ports on macOS hosts.&lt;/p&gt; &#xA;&lt;p&gt;On Linux hosts, you might have to set sysctl value &lt;code&gt;net.ipv4.ip_unprivileged_port_start=0&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;stuck on &#34;Waiting for the essential requirement 1 of X: &#34;ssh&#34;&lt;/h4&gt; &#xA;&lt;p&gt;On M1 macOS, QEMU needs to be &lt;a href=&#34;https://github.com/Homebrew/homebrew-core/pull/96743&#34;&gt;Homebrew&#39;s QEMU &lt;code&gt;6.2.0_1&lt;/code&gt;&lt;/a&gt; or later to run recent Linux guests. Run &lt;code&gt;brew upgrade&lt;/code&gt; to upgrade QEMU.&lt;/p&gt; &#xA;&lt;p&gt;If you are not using Homebrew, see the &#34;Manual installation steps&#34; in the &lt;a href=&#34;https://raw.githubusercontent.com/lima-vm/lima/master/#installation&#34;&gt;Installation&lt;/a&gt; section.&lt;/p&gt; &#xA;&lt;p&gt;See also &lt;code&gt;serial.log&lt;/code&gt; in &lt;code&gt;~/.lima/&amp;lt;INSTANCE&amp;gt;&lt;/code&gt; for debugging.&lt;/p&gt; &#xA;&lt;h4&gt;&#34;permission denied&#34; for &lt;code&gt;limactl cp&lt;/code&gt; command&lt;/h4&gt; &#xA;&lt;p&gt;The &lt;code&gt;copy&lt;/code&gt; command only works for instances that have been created by lima 0.5.0 or later. You can manually install the required identity on older instances with (replace &lt;code&gt;INSTANCE&lt;/code&gt; with actual instance name):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;&amp;lt; ~/.lima/_config/user.pub limactl shell INSTANCE sh -c &#39;tee -a ~/.ssh/authorized_keys&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Networking&lt;/h3&gt; &#xA;&lt;h4&gt;&#34;Cannot access the guest IP 192.168.5.15 from the host&#34;&lt;/h4&gt; &#xA;&lt;p&gt;The default guest IP 192.168.5.15 is not accessible from the host and other guests.&lt;/p&gt; &#xA;&lt;p&gt;To add another IP address that is accessible from the host and other virtual machines, enable &lt;a href=&#34;https://github.com/lima-vm/socket_vmnet&#34;&gt;&lt;code&gt;socket_vmnet&lt;/code&gt;&lt;/a&gt; (since Lima v0.12) or &lt;a href=&#34;https://github.com/lima-vm/vde_vmnet&#34;&gt;&lt;code&gt;vde_vmnet&lt;/code&gt;&lt;/a&gt; (Deprecated).&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/lima-vm/lima/master/docs/network.md&#34;&gt;&lt;code&gt;./docs/network.md&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Ping shows duplicate packets and massive response times&lt;/h4&gt; &#xA;&lt;p&gt;Lima uses QEMU&#39;s SLIRP networking which does not support &lt;code&gt;ping&lt;/code&gt; out of the box:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ping google.com&#xA;PING google.com (172.217.165.14): 56 data bytes&#xA;64 bytes from 172.217.165.14: seq=0 ttl=42 time=2395159.646 ms&#xA;64 bytes from 172.217.165.14: seq=0 ttl=42 time=2396160.798 ms (DUP!)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more details, see &lt;a href=&#34;https://wiki.qemu.org/Documentation/Networking#User_Networking_.28SLIRP.29&#34;&gt;Documentation/Networking&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;External projects&lt;/h3&gt; &#xA;&lt;h4&gt;&#34;I am using Rancher Desktop. How to deal with the underlying Lima?&#34;&lt;/h4&gt; &#xA;&lt;p&gt;On macOS hosts, Rancher Desktop (as of v1.0) launches Lima with the following configuration:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;$LIMA_HOME&lt;/code&gt; directory: &lt;code&gt;$HOME/Library/Application Support/rancher-desktop/lima&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;limactl&lt;/code&gt; binary: &lt;code&gt;/Applications/Rancher Desktop.app/Contents/Resources/resources/darwin/lima/bin/limactl&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Lima instance name: &lt;code&gt;0&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To open a shell, run the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;LIMA_HOME=&#34;$HOME/Library/Application Support/rancher-desktop/lima&#34; &#34;/Applications/Rancher Desktop.app/Contents/Resources/resources/darwin/lima/bin/limactl&#34; shell 0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On Linux hosts, try the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;LIMA_HOME=&#34;$HOME/.local/share/rancher-desktop/lima&#34; /opt/rancher-desktop/resources/resources/linux/lima/bin/limactl shell 0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you have installed Rancher Desktop as an AppImage:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;LIMA_HOME=&#34;$HOME/.local/share/rancher-desktop/lima&#34; &#34;$(ls -d /tmp/.mount_ranche*/opt/rancher-desktop/resources/resources/linux/lima/bin)/limactl&#34; shell 0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&#34;Hints for debugging other problems?&#34;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Inspect logs: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;limactl --debug start&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;$HOME/.lima/&amp;lt;INSTANCE&amp;gt;/serial.log&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;/var/log/cloud-init-output.log&lt;/code&gt; (inside the guest)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;/var/log/cloud-init.log&lt;/code&gt; (inside the guest)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Make sure that you aren&#39;t mixing up tabs and spaces in the YAML.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;strong&gt;We are a &lt;a href=&#34;https://cncf.io/&#34;&gt;Cloud Native Computing Foundation&lt;/a&gt; sandbox project.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;img src=&#34;https://www.cncf.io/wp-content/uploads/2022/07/cncf-color-bg.svg?sanitize=true&#34; width=&#34;300&#34;&gt; &#xA;&lt;p&gt;The Linux Foundation® (TLF) has registered trademarks and uses trademarks. For a list of TLF trademarks, see &lt;a href=&#34;https://www.linuxfoundation.org/trademark-usage/&#34;&gt;Trademark Usage&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>hashicorp/vault</title>
    <updated>2022-12-04T01:42:18Z</updated>
    <id>tag:github.com,2022-12-04:/hashicorp/vault</id>
    <link href="https://github.com/hashicorp/vault" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A tool for secrets management, encryption as a service, and privileged access management&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Vault &lt;a href=&#34;https://circleci.com/gh/hashicorp/vault&#34;&gt;&lt;img src=&#34;https://circleci.com/gh/hashicorp/vault.svg?style=svg&#34; alt=&#34;CircleCI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.hashicorp.com/products/vault/?utm_source=github&amp;amp;utm_medium=banner&amp;amp;utm_campaign=github-vault-enterprise&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/vault-enterprise-yellow.svg?colorB=7c8797&amp;amp;colorA=000000&#34; alt=&#34;vault enterprise&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;strong&gt;Please note&lt;/strong&gt;: We take Vault&#39;s security and our users&#39; trust very seriously. If you believe you have found a security issue in Vault, &lt;em&gt;please responsibly disclose&lt;/em&gt; by contacting us at &lt;a href=&#34;mailto:security@hashicorp.com&#34;&gt;security@hashicorp.com&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Website: &lt;a href=&#34;https://www.vaultproject.io&#34;&gt;https://www.vaultproject.io&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Announcement list: &lt;a href=&#34;https://groups.google.com/group/hashicorp-announce&#34;&gt;Google Groups&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Discussion forum: &lt;a href=&#34;https://discuss.hashicorp.com/c/vault&#34;&gt;Discuss&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Documentation: &lt;a href=&#34;https://www.vaultproject.io/docs/&#34;&gt;https://www.vaultproject.io/docs/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Tutorials: &lt;a href=&#34;https://learn.hashicorp.com/vault&#34;&gt;HashiCorp&#39;s Learn Platform&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Certification Exam: &lt;a href=&#34;https://www.hashicorp.com/certification/#hashicorp-certified-vault-associate&#34;&gt;Vault Associate&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;img width=&#34;300&#34; alt=&#34;Vault Logo&#34; src=&#34;https://github.com/hashicorp/vault/raw/f22d202cde2018f9455dec755118a9b84586e082/Vault_PrimaryLogo_Black.png&#34;&gt; &#xA;&lt;p&gt;Vault is a tool for securely accessing secrets. A secret is anything that you want to tightly control access to, such as API keys, passwords, certificates, and more. Vault provides a unified interface to any secret, while providing tight access control and recording a detailed audit log.&lt;/p&gt; &#xA;&lt;p&gt;A modern system requires access to a multitude of secrets: database credentials, API keys for external services, credentials for service-oriented architecture communication, etc. Understanding who is accessing what secrets is already very difficult and platform-specific. Adding on key rolling, secure storage, and detailed audit logs is almost impossible without a custom solution. This is where Vault steps in.&lt;/p&gt; &#xA;&lt;p&gt;The key features of Vault are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Secure Secret Storage&lt;/strong&gt;: Arbitrary key/value secrets can be stored in Vault. Vault encrypts these secrets prior to writing them to persistent storage, so gaining access to the raw storage isn&#39;t enough to access your secrets. Vault can write to disk, &lt;a href=&#34;https://www.consul.io&#34;&gt;Consul&lt;/a&gt;, and more.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Dynamic Secrets&lt;/strong&gt;: Vault can generate secrets on-demand for some systems, such as AWS or SQL databases. For example, when an application needs to access an S3 bucket, it asks Vault for credentials, and Vault will generate an AWS keypair with valid permissions on demand. After creating these dynamic secrets, Vault will also automatically revoke them after the lease is up.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Data Encryption&lt;/strong&gt;: Vault can encrypt and decrypt data without storing it. This allows security teams to define encryption parameters and developers to store encrypted data in a location such as a SQL database without having to design their own encryption methods.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Leasing and Renewal&lt;/strong&gt;: All secrets in Vault have a &lt;em&gt;lease&lt;/em&gt; associated with them. At the end of the lease, Vault will automatically revoke that secret. Clients are able to renew leases via built-in renew APIs.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Revocation&lt;/strong&gt;: Vault has built-in support for secret revocation. Vault can revoke not only single secrets, but a tree of secrets, for example, all secrets read by a specific user, or all secrets of a particular type. Revocation assists in key rolling as well as locking down systems in the case of an intrusion.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Documentation, Getting Started, and Certification Exams&lt;/h2&gt; &#xA;&lt;p&gt;Documentation is available on the &lt;a href=&#34;https://www.vaultproject.io/docs/&#34;&gt;Vault website&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re new to Vault and want to get started with security automation, please check out our &lt;a href=&#34;https://learn.hashicorp.com/collections/vault/getting-started&#34;&gt;Getting Started guides&lt;/a&gt; on HashiCorp&#39;s learning platform. There are also &lt;a href=&#34;https://learn.hashicorp.com/vault&#34;&gt;additional guides&lt;/a&gt; to continue your learning.&lt;/p&gt; &#xA;&lt;p&gt;For examples of how to interact with Vault from inside your application in different programming languages, see the &lt;a href=&#34;https://github.com/hashicorp/vault-examples&#34;&gt;vault-examples&lt;/a&gt; repo. An out-of-the-box &lt;a href=&#34;https://github.com/hashicorp/hello-vault-go&#34;&gt;sample application&lt;/a&gt; is also available.&lt;/p&gt; &#xA;&lt;p&gt;Show off your Vault knowledge by passing a certification exam. Visit the &lt;a href=&#34;https://www.hashicorp.com/certification/#hashicorp-certified-vault-associate&#34;&gt;certification page&lt;/a&gt; for information about exams and find &lt;a href=&#34;https://learn.hashicorp.com/collections/vault/certification&#34;&gt;study materials&lt;/a&gt; on HashiCorp&#39;s learning platform.&lt;/p&gt; &#xA;&lt;h2&gt;Developing Vault&lt;/h2&gt; &#xA;&lt;p&gt;If you wish to work on Vault itself or any of its built-in systems, you&#39;ll first need &lt;a href=&#34;https://www.golang.org&#34;&gt;Go&lt;/a&gt; installed on your machine.&lt;/p&gt; &#xA;&lt;p&gt;For local dev first make sure Go is properly installed, including setting up a &lt;a href=&#34;https://golang.org/doc/code.html#GOPATH&#34;&gt;GOPATH&lt;/a&gt;. Ensure that &lt;code&gt;$GOPATH/bin&lt;/code&gt; is in your path as some distributions bundle the old version of build tools. Next, clone this repository. Vault uses &lt;a href=&#34;https://github.com/golang/go/wiki/Modules&#34;&gt;Go Modules&lt;/a&gt;, so it is recommended that you clone the repository &lt;em&gt;&lt;strong&gt;outside&lt;/strong&gt;&lt;/em&gt; of the GOPATH. You can then download any required build tools by bootstrapping your environment:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ make bootstrap&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To compile a development version of Vault, run &lt;code&gt;make&lt;/code&gt; or &lt;code&gt;make dev&lt;/code&gt;. This will put the Vault binary in the &lt;code&gt;bin&lt;/code&gt; and &lt;code&gt;$GOPATH/bin&lt;/code&gt; folders:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ make dev&#xA;...&#xA;$ bin/vault&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To compile a development version of Vault with the UI, run &lt;code&gt;make static-dist dev-ui&lt;/code&gt;. This will put the Vault binary in the &lt;code&gt;bin&lt;/code&gt; and &lt;code&gt;$GOPATH/bin&lt;/code&gt; folders:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ make static-dist dev-ui&#xA;...&#xA;$ bin/vault&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To run tests, type &lt;code&gt;make test&lt;/code&gt;. Note: this requires Docker to be installed. If this exits with exit status 0, then everything is working!&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ make test&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you&#39;re developing a specific package, you can run tests for just that package by specifying the &lt;code&gt;TEST&lt;/code&gt; variable. For example below, only &lt;code&gt;vault&lt;/code&gt; package tests will be run.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ make test TEST=./vault&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Importing Vault&lt;/h3&gt; &#xA;&lt;p&gt;This repository publishes two libraries that may be imported by other projects: &lt;code&gt;github.com/hashicorp/vault/api&lt;/code&gt; and &lt;code&gt;github.com/hashicorp/vault/sdk&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Note that this repository also contains Vault (the product), and as with most Go projects, Vault uses Go modules to manage its dependencies. The mechanism to do that is the &lt;a href=&#34;https://raw.githubusercontent.com/hashicorp/vault/main/go.mod&#34;&gt;go.mod&lt;/a&gt; file. As it happens, the presence of that file also makes it theoretically possible to import Vault as a dependency into other projects. Some other projects have made a practice of doing so in order to take advantage of testing tooling that was developed for testing Vault itself. This is not, and has never been, a supported way to use the Vault project. We aren&#39;t likely to fix bugs relating to failure to import &lt;code&gt;github.com/hashicorp/vault&lt;/code&gt; into your project.&lt;/p&gt; &#xA;&lt;h3&gt;Acceptance Tests&lt;/h3&gt; &#xA;&lt;p&gt;Vault has comprehensive &lt;a href=&#34;https://en.wikipedia.org/wiki/Acceptance_testing&#34;&gt;acceptance tests&lt;/a&gt; covering most of the features of the secret and auth methods.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re working on a feature of a secret or auth method and want to verify it is functioning (and also hasn&#39;t broken anything else), we recommend running the acceptance tests.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Warning:&lt;/strong&gt; The acceptance tests create/destroy/modify &lt;em&gt;real resources&lt;/em&gt;, which may incur real costs in some cases. In the presence of a bug, it is technically possible that broken backends could leave dangling data behind. Therefore, please run the acceptance tests at your own risk. At the very least, we recommend running them in their own private account for whatever backend you&#39;re testing.&lt;/p&gt; &#xA;&lt;p&gt;To run the acceptance tests, invoke &lt;code&gt;make testacc&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ make testacc TEST=./builtin/logical/consul&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;TEST&lt;/code&gt; variable is required, and you should specify the folder where the backend is. The &lt;code&gt;TESTARGS&lt;/code&gt; variable is recommended to filter down to a specific resource to test, since testing all of them at once can sometimes take a very long time.&lt;/p&gt; &#xA;&lt;p&gt;Acceptance tests typically require other environment variables to be set for things such as access keys. The test itself should error early and tell you what to set, so it is not documented here.&lt;/p&gt; &#xA;&lt;p&gt;For more information on Vault Enterprise features, visit the &lt;a href=&#34;https://www.hashicorp.com/products/vault/?utm_source=github&amp;amp;utm_medium=referral&amp;amp;utm_campaign=github-vault-enterprise&#34;&gt;Vault Enterprise site&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>