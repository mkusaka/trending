<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-10-02T01:42:36Z</updated>
  <subtitle>Weekly Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>alist-org/alist</title>
    <updated>2022-10-02T01:42:36Z</updated>
    <id>tag:github.com,2022-10-02:/alist-org/alist</id>
    <link href="https://github.com/alist-org/alist" rel="alternate"></link>
    <summary type="html">&lt;p&gt;🗂️A file list program that supports multiple storage, powered by Gin and Solidjs. / 一个支持多存储的文件列表程序，使用 Gin 和 Solidjs。&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a href=&#34;https://alist.nn.ci&#34;&gt;&lt;img height=&#34;100px&#34; alt=&#34;logo&#34; src=&#34;https://cdn.jsdelivr.net/gh/alist-org/logo@main/logo.svg?sanitize=true&#34;&gt;&lt;/a&gt; &#xA; &lt;p&gt;&lt;em&gt;🗂️A file list program that supports multiple storage, powered by Gin and Solidjs.&lt;/em&gt;&lt;/p&gt; &#xA; &lt;a href=&#34;https://goreportcard.com/report/github.com/alist-org/alist/v3&#34;&gt; &lt;img src=&#34;https://goreportcard.com/badge/github.com/alist-org/alist/v3&#34; alt=&#34;latest version&#34;&gt; &lt;/a&gt; &#xA; &lt;a href=&#34;https://github.com/Xhofe/alist/raw/main/LICENSE&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/license/Xhofe/alist&#34; alt=&#34;License&#34;&gt; &lt;/a&gt; &#xA; &lt;a href=&#34;https://github.com/Xhofe/alist/discussions&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/discussions/Xhofe/alist?color=%23ED8936&#34; alt=&#34;discussions&#34;&gt; &lt;/a&gt; &#xA; &lt;a href=&#34;https://github.com/Xhofe/alist/actions?query=workflow%3ABuild&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/workflow/status/Xhofe/alist/build&#34; alt=&#34;Build status&#34;&gt; &lt;/a&gt; &#xA; &lt;a href=&#34;https://github.com/Xhofe/alist/releases&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/release/Xhofe/alist&#34; alt=&#34;latest version&#34;&gt; &lt;/a&gt; &#xA; &lt;a href=&#34;https://github.com/Xhofe/alist/releases&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/downloads/Xhofe/alist/total?color=%239F7AEA&#34; alt=&#34;Downloads&#34;&gt; &lt;/a&gt; &#xA; &lt;a title=&#34;Crowdin&#34; target=&#34;_blank&#34; href=&#34;https://crwd.in/alist&#34;&gt; &lt;img src=&#34;https://badges.crowdin.net/alist/localized.svg?sanitize=true&#34;&gt; &lt;/a&gt; &#xA; &lt;a href=&#34;https://pay.xhofe.top&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/%24-sponsor-ff69b4.svg?sanitize=true&#34; alt=&#34;sponsor&#34;&gt; &lt;/a&gt; &#xA;&lt;/div&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;English | &lt;a href=&#34;https://raw.githubusercontent.com/alist-org/alist/main/README_cn.md&#34;&gt;中文&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/alist-org/alist/main/CONTRIBUTORS.md&#34;&gt;Contributors&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/alist-org/alist/main/CONTRIBUTING.md&#34;&gt;Contributing&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/alist-org/alist/main/CODE_OF_CONDUCT.md&#34;&gt;CODE_OF_CONDUCT&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Multiple storage &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Local storage&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://www.aliyundrive.com/&#34;&gt;Aliyundrive&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; OneDrive / Sharepoint (&lt;a href=&#34;https://www.office.com/&#34;&gt;global&lt;/a&gt;, &lt;a href=&#34;https://portal.partner.microsoftonline.cn&#34;&gt;cn&lt;/a&gt;,de,us)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://cloud.189.cn&#34;&gt;189cloud&lt;/a&gt; (Personal, Family)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://drive.google.com/&#34;&gt;GoogleDrive&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://www.123pan.com/&#34;&gt;123pan&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; FTP / SFTP&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://www.mypikpak.com/&#34;&gt;PikPak&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://aws.amazon.com/s3/&#34;&gt;S3&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://www.upyun.com/products/file-storage&#34;&gt;UPYUN Storage Service&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; WebDav(Support OneDrive/SharePoint without API)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Teambition(&lt;a href=&#34;https://www.teambition.com/&#34;&gt;China&lt;/a&gt;,&lt;a href=&#34;https://us.teambition.com/&#34;&gt;International&lt;/a&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://www.mediatrack.cn/&#34;&gt;Mediatrack&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://yun.139.com/&#34;&gt;139yun&lt;/a&gt; (Personal, Family)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://disk.yandex.com/&#34;&gt;YandexDisk&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;http://pan.baidu.com/&#34;&gt;BaiduNetdisk&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://pan.quark.cn&#34;&gt;Quark&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://pan.xunlei.com&#34;&gt;Thunder&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Easy to deploy and out-of-the-box&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; File preview (PDF, markdown, code, plain text, ...)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Image preview in gallery mode&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Video and audio preview, support lyrics and subtitles&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Office documents preview (docx, pptx, xlsx, ...)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;code&gt;README.md&lt;/code&gt; preview rendering&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; File permalink copy and direct file download&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Dark mode&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; I18n&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Protected routes (password protection and authentication)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; WebDav (see &lt;a href=&#34;https://alist.nn.ci/guide/webdav.html&#34;&gt;https://alist.nn.ci/guide/webdav.html&lt;/a&gt; for details)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://hub.docker.com/r/xhofe/alist&#34;&gt;Docker Deploy&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Cloudflare workers proxy&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; File/Folder package download&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Web upload(Can allow visitors to upload), delete, mkdir, rename, move and copy&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Offline download&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Copy files between two storage&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Document&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://alist.nn.ci/&#34;&gt;https://alist.nn.ci/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Demo&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://pan.nn.ci&#34;&gt;https://pan.nn.ci&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Discussion&lt;/h2&gt; &#xA;&lt;p&gt;Please go to our &lt;a href=&#34;https://github.com/Xhofe/alist/discussions&#34;&gt;discussion forum&lt;/a&gt; for general questions, &lt;strong&gt;issues are for bug reports and feature request only.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Special sponsors&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://zhaoziyuan.la/&#34;&gt;找资源 - 阿里云盘资源搜索引擎&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://kinhdown.com/?Type=Tutorials&#34;&gt;KinhDown 百度云盘不限速下载！永久免费！已稳定运行3年！非常可靠!&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.jetbrains.com/&#34;&gt;JetBrains: Essential tools for software developers and teams&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;AList&lt;/code&gt; is open-source software licensed under the AGPL-3.0 license.&lt;/p&gt; &#xA;&lt;h2&gt;Disclaimer&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;This program is a free and open source project. It is designed to share files on the network disk, which is convenient for downloading and learning golang. Please abide by relevant laws and regulations when using it, and do not abuse it;&lt;/li&gt; &#xA; &lt;li&gt;This program is implemented by calling the official sdk/interface, without destroying the official interface behavior;&lt;/li&gt; &#xA; &lt;li&gt;This program only does 302 redirect/traffic forwarding, and does not intercept, store, or tamper with any user data;&lt;/li&gt; &#xA; &lt;li&gt;Before using this program, you should understand and bear the corresponding risks, including but not limited to account ban, download speed limit, etc., which is none of this program&#39;s business;&lt;/li&gt; &#xA; &lt;li&gt;If there is any infringement, please contact me by &lt;a href=&#34;mailto:i@nn.ci&#34;&gt;email&lt;/a&gt;, and it will be dealt with in time.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://nn.ci/&#34;&gt;@Blog&lt;/a&gt; · &lt;a href=&#34;https://github.com/Xhofe&#34;&gt;@GitHub&lt;/a&gt; · &lt;a href=&#34;https://t.me/alist_chat&#34;&gt;@TelegramGroup&lt;/a&gt; · &lt;a href=&#34;https://jq.qq.com/?_wv=1027&amp;amp;k=YJJj2Gwb&#34;&gt;@QQGroup&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt;</summary>
  </entry>
  <entry>
    <title>FiloSottile/age</title>
    <updated>2022-10-02T01:42:36Z</updated>
    <id>tag:github.com,2022-10-02:/FiloSottile/age</id>
    <link href="https://github.com/FiloSottile/age" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A simple, modern and secure encryption tool (and Go library) with small explicit keys, no config options, and UNIX-style composability.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt;&lt;img alt=&#34;The age logo, an wireframe of St. Peters dome in Rome, with the text: age, file encryption&#34; width=&#34;600&#34; src=&#34;https://user-images.githubusercontent.com/1225294/132245842-fda4da6a-1cea-4738-a3da-2dc860861c98.png&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://pkg.go.dev/filippo.io/age&#34;&gt;&lt;img src=&#34;https://pkg.go.dev/badge/filippo.io/age.svg?sanitize=true&#34; alt=&#34;Go Reference&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://filippo.io/age/age.1&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/age(1)-man%20page-lightgrey&#34; alt=&#34;man page&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://age-encryption.org/v1&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/%C2%A7%23-specification-blueviolet&#34; alt=&#34;C2SP specification&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;age is a simple, modern and secure file encryption tool, format, and Go library.&lt;/p&gt; &#xA;&lt;p&gt;It features small explicit keys, no config options, and UNIX-style composability.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ age-keygen -o key.txt&#xA;Public key: age1ql3z7hjy54pw3hyww5ayyfg7zqgvc7w3j2elw8zmrj2kg5sfn9aqmcac8p&#xA;$ tar cvz ~/data | age -r age1ql3z7hjy54pw3hyww5ayyfg7zqgvc7w3j2elw8zmrj2kg5sfn9aqmcac8p &amp;gt; data.tar.gz.age&#xA;$ age --decrypt -i key.txt data.tar.gz.age &amp;gt; data.tar.gz&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;📜 The format specification is at &lt;a href=&#34;https://age-encryption.org/v1&#34;&gt;age-encryption.org/v1&lt;/a&gt;. age was designed by &lt;a href=&#34;https://twitter.com/Benjojo12&#34;&gt;@Benjojo12&lt;/a&gt; and &lt;a href=&#34;https://twitter.com/FiloSottile&#34;&gt;@FiloSottile&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;📬 Follow the maintenance of this project by subscribing to &lt;a href=&#34;https://filippo.io/newsletter&#34;&gt;Maintainer Dispatches&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;p&gt;🦀 An alternative interoperable Rust implementation is available at &lt;a href=&#34;https://github.com/str4d/rage&#34;&gt;github.com/str4d/rage&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;🔑 Hardware PIV tokens such as YubiKeys are supported through the &lt;a href=&#34;https://github.com/str4d/age-plugin-yubikey&#34;&gt;age-plugin-yubikey&lt;/a&gt; plugin.&lt;/p&gt; &#xA;&lt;p&gt;💬 The author pronounces it &lt;code&gt;[aɡe̞]&lt;/code&gt;, like the Italian &lt;a href=&#34;https://translate.google.com/?sl=it&amp;amp;text=aghe&#34;&gt;“aghe”&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Homebrew (macOS or Linux)&lt;/td&gt; &#xA;   &lt;td&gt; &lt;code&gt;brew install age&lt;/code&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;MacPorts&lt;/td&gt; &#xA;   &lt;td&gt; &lt;code&gt;port install age&lt;/code&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Alpine Linux v3.15+&lt;/td&gt; &#xA;   &lt;td&gt; &lt;code&gt;apk add age&lt;/code&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Arch Linux&lt;/td&gt; &#xA;   &lt;td&gt; &lt;code&gt;pacman -S age&lt;/code&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Debian 11+ (Bullseye)&lt;/td&gt; &#xA;   &lt;td&gt; &lt;code&gt;apt install age/bullseye-backports&lt;/code&gt; (&lt;a href=&#34;https://backports.debian.org/Instructions/#index2h2&#34;&gt;enable backports&lt;/a&gt; for age v1.0.0+) &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Fedora 33+&lt;/td&gt; &#xA;   &lt;td&gt; &lt;code&gt;dnf install age&lt;/code&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Gentoo Linux&lt;/td&gt; &#xA;   &lt;td&gt; &lt;code&gt;emerge app-crypt/age&lt;/code&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;NixOS / Nix&lt;/td&gt; &#xA;   &lt;td&gt; &lt;code&gt;nix-env -i age&lt;/code&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;openSUSE Tumbleweed&lt;/td&gt; &#xA;   &lt;td&gt; &lt;code&gt;zypper install age&lt;/code&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Ubuntu 22.04+&lt;/td&gt; &#xA;   &lt;td&gt; &lt;code&gt;apt install age&lt;/code&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Void Linux&lt;/td&gt; &#xA;   &lt;td&gt; &lt;code&gt;xbps-install age&lt;/code&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;FreeBSD&lt;/td&gt; &#xA;   &lt;td&gt; &lt;code&gt;pkg install age&lt;/code&gt; (security/age) &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;OpenBSD 6.7+&lt;/td&gt; &#xA;   &lt;td&gt; &lt;code&gt;pkg_add age&lt;/code&gt; (security/age) &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Chocolatey (Windows)&lt;/td&gt; &#xA;   &lt;td&gt; &lt;code&gt;choco install age.portable&lt;/code&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Scoop (Windows)&lt;/td&gt; &#xA;   &lt;td&gt; &lt;code&gt;scoop bucket add extras; scoop install age&lt;/code&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;p&gt;On Windows, Linux, macOS, and FreeBSD you can use the pre-built binaries.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;https://dl.filippo.io/age/latest?for=linux/amd64&#xA;https://dl.filippo.io/age/v1.0.0-rc.1?for=darwin/arm64&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If your system has &lt;a href=&#34;https://go.dev/dl/&#34;&gt;a supported version of Go&lt;/a&gt;, you can build from source.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;go install filippo.io/age/cmd/...@latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Help from new packagers is very welcome.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;For the full documentation, read &lt;a href=&#34;https://filippo.io/age/age.1&#34;&gt;the age(1) man page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Usage:&#xA;    age [--encrypt] (-r RECIPIENT | -R PATH)... [--armor] [-o OUTPUT] [INPUT]&#xA;    age [--encrypt] --passphrase [--armor] [-o OUTPUT] [INPUT]&#xA;    age --decrypt [-i PATH]... [-o OUTPUT] [INPUT]&#xA;&#xA;Options:&#xA;    -e, --encrypt               Encrypt the input to the output. Default if omitted.&#xA;    -d, --decrypt               Decrypt the input to the output.&#xA;    -o, --output OUTPUT         Write the result to the file at path OUTPUT.&#xA;    -a, --armor                 Encrypt to a PEM encoded format.&#xA;    -p, --passphrase            Encrypt with a passphrase.&#xA;    -r, --recipient RECIPIENT   Encrypt to the specified RECIPIENT. Can be repeated.&#xA;    -R, --recipients-file PATH  Encrypt to recipients listed at PATH. Can be repeated.&#xA;    -i, --identity PATH         Use the identity file at PATH. Can be repeated.&#xA;&#xA;INPUT defaults to standard input, and OUTPUT defaults to standard output.&#xA;If OUTPUT exists, it will be overwritten.&#xA;&#xA;RECIPIENT can be an age public key generated by age-keygen (&#34;age1...&#34;)&#xA;or an SSH public key (&#34;ssh-ed25519 AAAA...&#34;, &#34;ssh-rsa AAAA...&#34;).&#xA;&#xA;Recipient files contain one or more recipients, one per line. Empty lines&#xA;and lines starting with &#34;#&#34; are ignored as comments. &#34;-&#34; may be used to&#xA;read recipients from standard input.&#xA;&#xA;Identity files contain one or more secret keys (&#34;AGE-SECRET-KEY-1...&#34;),&#xA;one per line, or an SSH key. Empty lines and lines starting with &#34;#&#34; are&#xA;ignored as comments. Passphrase encrypted age files can be used as&#xA;identity files. Multiple key files can be provided, and any unused ones&#xA;will be ignored. &#34;-&#34; may be used to read identities from standard input.&#xA;&#xA;When --encrypt is specified explicitly, -i can also be used to encrypt to an&#xA;identity file symmetrically, instead or in addition to normal recipients.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Multiple recipients&lt;/h3&gt; &#xA;&lt;p&gt;Files can be encrypted to multiple recipients by repeating &lt;code&gt;-r/--recipient&lt;/code&gt;. Every recipient will be able to decrypt the file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ age -o example.jpg.age -r age1ql3z7hjy54pw3hyww5ayyfg7zqgvc7w3j2elw8zmrj2kg5sfn9aqmcac8p \&#xA;    -r age1lggyhqrw2nlhcxprm67z43rta597azn8gknawjehu9d9dl0jq3yqqvfafg example.jpg&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Recipient files&lt;/h4&gt; &#xA;&lt;p&gt;Multiple recipients can also be listed one per line in one or more files passed with the &lt;code&gt;-R/--recipients-file&lt;/code&gt; flag.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cat recipients.txt&#xA;# Alice&#xA;age1ql3z7hjy54pw3hyww5ayyfg7zqgvc7w3j2elw8zmrj2kg5sfn9aqmcac8p&#xA;# Bob&#xA;age1lggyhqrw2nlhcxprm67z43rta597azn8gknawjehu9d9dl0jq3yqqvfafg&#xA;$ age -R recipients.txt example.jpg &amp;gt; example.jpg.age&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If the argument to &lt;code&gt;-R&lt;/code&gt; (or &lt;code&gt;-i&lt;/code&gt;) is &lt;code&gt;-&lt;/code&gt;, the file is read from standard input.&lt;/p&gt; &#xA;&lt;h3&gt;Passphrases&lt;/h3&gt; &#xA;&lt;p&gt;Files can be encrypted with a passphrase by using &lt;code&gt;-p/--passphrase&lt;/code&gt;. By default age will automatically generate a secure passphrase. Passphrase protected files are automatically detected at decrypt time.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ age -p secrets.txt &amp;gt; secrets.txt.age&#xA;Enter passphrase (leave empty to autogenerate a secure one):&#xA;Using the autogenerated passphrase &#34;release-response-step-brand-wrap-ankle-pair-unusual-sword-train&#34;.&#xA;$ age -d secrets.txt.age &amp;gt; secrets.txt&#xA;Enter passphrase:&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Passphrase-protected key files&lt;/h3&gt; &#xA;&lt;p&gt;If an identity file passed to &lt;code&gt;-i&lt;/code&gt; is a passphrase encrypted age file, it will be automatically decrypted.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ age-keygen | age -p &amp;gt; key.age&#xA;Public key: age1yhm4gctwfmrpz87tdslm550wrx6m79y9f2hdzt0lndjnehwj0ukqrjpyx5&#xA;Enter passphrase (leave empty to autogenerate a secure one):&#xA;Using the autogenerated passphrase &#34;hip-roast-boring-snake-mention-east-wasp-honey-input-actress&#34;.&#xA;$ age -r age1yhm4gctwfmrpz87tdslm550wrx6m79y9f2hdzt0lndjnehwj0ukqrjpyx5 secrets.txt &amp;gt; secrets.txt.age&#xA;$ age -d -i key.age secrets.txt.age &amp;gt; secrets.txt&#xA;Enter passphrase for identity file &#34;key.age&#34;:&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Passphrase-protected identity files are not necessary for most use cases, where access to the encrypted identity file implies access to the whole system. However, they can be useful if the identity file is stored remotely.&lt;/p&gt; &#xA;&lt;h3&gt;SSH keys&lt;/h3&gt; &#xA;&lt;p&gt;As a convenience feature, age also supports encrypting to &lt;code&gt;ssh-rsa&lt;/code&gt; and &lt;code&gt;ssh-ed25519&lt;/code&gt; SSH public keys, and decrypting with the respective private key file. (&lt;code&gt;ssh-agent&lt;/code&gt; is not supported.)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ age -R ~/.ssh/id_ed25519.pub example.jpg &amp;gt; example.jpg.age&#xA;$ age -d -i ~/.ssh/id_ed25519 example.jpg.age &amp;gt; example.jpg&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that SSH key support employs more complex cryptography, and embeds a public key tag in the encrypted file, making it possible to track files that are encrypted to a specific public key.&lt;/p&gt; &#xA;&lt;h4&gt;Encrypting to a GitHub user&lt;/h4&gt; &#xA;&lt;p&gt;Combining SSH key support and &lt;code&gt;-R&lt;/code&gt;, you can easily encrypt a file to the SSH keys listed on a GitHub profile.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ curl https://github.com/benjojo.keys | age -R - example.jpg &amp;gt; example.jpg.age&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Keep in mind that people might not protect SSH keys long-term, since they are revokable when used only for authentication, and that SSH keys held on YubiKeys can&#39;t be used to decrypt files.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>TheAlgorithms/Go</title>
    <updated>2022-10-02T01:42:36Z</updated>
    <id>tag:github.com,2022-10-02:/TheAlgorithms/Go</id>
    <link href="https://github.com/TheAlgorithms/Go" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Algorithms implemented in Go for beginners, following best practices.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;The Algorithms - Go&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gitpod.io/#https://github.com/TheAlgorithms/Go&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Gitpod-Ready--to--Code-blue?logo=gitpod&amp;amp;style=flat-square&#34; alt=&#34;Gitpod Ready-to-Code&#34;&gt;&lt;/a&gt;&amp;nbsp; &lt;img src=&#34;https://github.com/TheAlgorithms/Go/workflows/golangci-lint/badge.svg?sanitize=true&#34; alt=&#34;golangci-lint&#34;&gt; &lt;img src=&#34;https://github.com/tjgurwara99/Go/workflows/godocmd/badge.svg?sanitize=true&#34; alt=&#34;godocmd&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/repo-size/TheAlgorithms/Go.svg?label=Repo%20size&amp;amp;style=flat-square&#34; alt=&#34;&#34;&gt;&amp;nbsp; &lt;img src=&#34;https://github.com/TheAlgorithms/Go/workflows/update_directory_md/badge.svg?sanitize=true&#34; alt=&#34;update_directory_md&#34;&gt; &lt;a href=&#34;https://discord.gg/c7MnfGFGa6&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/808045925556682782.svg?logo=discord&amp;amp;colorB=7289DA&amp;amp;style=flat-square&#34; alt=&#34;Discord chat&#34;&gt;&lt;/a&gt;&amp;nbsp;&lt;/p&gt; &#xA;&lt;h3&gt;Algorithms implemented in Go (for education)&lt;/h3&gt; &#xA;&lt;p&gt;The repository is a collection of open-source implementation of a variety of algorithms implemented in Go and licensed under &lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/LICENSE&#34;&gt;MIT License&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Read our &lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/CONTRIBUTING.md&#34;&gt;Contribution Guidelines&lt;/a&gt; before you contribute.&lt;/p&gt; &#xA;&lt;h2&gt;List of Algorithms&lt;/h2&gt; &#xA;&lt;!-- GODOCMD BEGIN ---&gt; &#xA;&lt;h1&gt;Packages:&lt;/h1&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;strong&gt; ahocorasick &lt;/strong&gt; &lt;/summary&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Functions:&lt;/h5&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/strings/ahocorasick/advancedahocorasick.go#L10&#34;&gt;&lt;code&gt;Advanced&lt;/code&gt;&lt;/a&gt;: Advanced Function performing the Advanced Aho-Corasick algorithm. Finds and prints occurrences of each pattern.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/strings/ahocorasick/ahocorasick.go#L15&#34;&gt;&lt;code&gt;AhoCorasick&lt;/code&gt;&lt;/a&gt;: AhoCorasick Function performing the Basic Aho-Corasick algorithm. Finds and prints occurrences of each pattern.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/strings/ahocorasick/shared.go#L86&#34;&gt;&lt;code&gt;ArrayUnion&lt;/code&gt;&lt;/a&gt;: ArrayUnion Concats two arrays of int&#39;s into one.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/strings/ahocorasick/shared.go#L78&#34;&gt;&lt;code&gt;BoolArrayCapUp&lt;/code&gt;&lt;/a&gt;: BoolArrayCapUp Dynamically increases an array size of bool&#39;s by 1.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/strings/ahocorasick/ahocorasick.go#L54&#34;&gt;&lt;code&gt;BuildAc&lt;/code&gt;&lt;/a&gt;: Functions that builds Aho Corasick automaton.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/strings/ahocorasick/advancedahocorasick.go#L46&#34;&gt;&lt;code&gt;BuildExtendedAc&lt;/code&gt;&lt;/a&gt;: BuildExtendedAc Functions that builds extended Aho Corasick automaton.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/strings/ahocorasick/shared.go#L61&#34;&gt;&lt;code&gt;ComputeAlphabet&lt;/code&gt;&lt;/a&gt;: ComputeAlphabet Function that returns string of all the possible characters in given patterns.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/strings/ahocorasick/shared.go#L4&#34;&gt;&lt;code&gt;ConstructTrie&lt;/code&gt;&lt;/a&gt;: ConstructTrie Function that constructs Trie as an automaton for a set of reversed &amp;amp; trimmed strings.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/strings/ahocorasick/shared.go#L39&#34;&gt;&lt;code&gt;Contains&lt;/code&gt;&lt;/a&gt;: Contains Returns &#39;true&#39; if array of int&#39;s &#39;s&#39; contains int &#39;e&#39;, &#39;false&#39; otherwise.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/strings/ahocorasick/shared.go#L111&#34;&gt;&lt;code&gt;CreateNewState&lt;/code&gt;&lt;/a&gt;: CreateNewState Automaton function for creating a new state &#39;state&#39;.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/strings/ahocorasick/shared.go#L116&#34;&gt;&lt;code&gt;CreateTransition&lt;/code&gt;&lt;/a&gt;: CreateTransition Creates a transition for function σ(state,letter) = end.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/strings/ahocorasick/shared.go#L99&#34;&gt;&lt;code&gt;GetParent&lt;/code&gt;&lt;/a&gt;: GetParent Function that finds the first previous state of a state and returns it. Used for trie where there is only one parent.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/strings/ahocorasick/shared.go#L121&#34;&gt;&lt;code&gt;GetTransition&lt;/code&gt;&lt;/a&gt;: GetTransition Returns ending state for transition σ(fromState,overChar), &#39;-1&#39; if there is none.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/strings/ahocorasick/shared.go#L49&#34;&gt;&lt;code&gt;GetWord&lt;/code&gt;&lt;/a&gt;: GetWord Function that returns word found in text &#39;t&#39; at position range &#39;begin&#39; to &#39;end&#39;.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/strings/ahocorasick/shared.go#L70&#34;&gt;&lt;code&gt;IntArrayCapUp&lt;/code&gt;&lt;/a&gt;: IntArrayCapUp Dynamically increases an array size of int&#39;s by 1.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/strings/ahocorasick/shared.go#L133&#34;&gt;&lt;code&gt;StateExists&lt;/code&gt;&lt;/a&gt;: StateExists Checks if state &#39;state&#39; exists. Returns &#39;true&#39; if it does, &#39;false&#39; otherwise.&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Types&lt;/h5&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/strings/ahocorasick/ahocorasick.go#L9&#34;&gt;&lt;code&gt;Result&lt;/code&gt;&lt;/a&gt;: No description provided.&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt;&#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;strong&gt; armstrong &lt;/strong&gt; &lt;/summary&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Functions:&lt;/h5&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/math/armstrong/isarmstrong.go#L14&#34;&gt;&lt;code&gt;IsArmstrong&lt;/code&gt;&lt;/a&gt;: No description provided.&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt;&#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;strong&gt; avl &lt;/strong&gt; &lt;/summary&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Package avl is a Adelson-Velskii and Landis tree implemnation avl is self-balancing tree, i.e for all node in a tree, height difference between its left and right child will not exceed 1 more information : &lt;a href=&#34;https://en.wikipedia.org/wiki/AVL_tree&#34;&gt;https://en.wikipedia.org/wiki/AVL_tree&lt;/a&gt;&lt;/h5&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Functions:&lt;/h5&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/structure/avl/avl.go#L72&#34;&gt;&lt;code&gt;Delete&lt;/code&gt;&lt;/a&gt;: Delete : remove given key from the tree&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/structure/avl/avl.go#L20&#34;&gt;&lt;code&gt;Get&lt;/code&gt;&lt;/a&gt;: Get : return node with given key&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/structure/avl/avl.go#L35&#34;&gt;&lt;code&gt;Insert&lt;/code&gt;&lt;/a&gt;: Insert a new item&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/structure/avl/avl.go#L15&#34;&gt;&lt;code&gt;NewTree&lt;/code&gt;&lt;/a&gt;: NewTree create a new AVL tree&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Types&lt;/h5&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/structure/avl/avl.go#L8&#34;&gt;&lt;code&gt;Node&lt;/code&gt;&lt;/a&gt;: No description provided.&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt;&#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;strong&gt; binary &lt;/strong&gt; &lt;/summary&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Package binary describes algorithms that use binary operations for different calculations.&lt;/h5&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Functions:&lt;/h5&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/math/binary/abs.go#L10&#34;&gt;&lt;code&gt;Abs&lt;/code&gt;&lt;/a&gt;: Abs returns absolute value using binary operation Principle of operation: 1) Get the mask by right shift by the base 2) Base is the size of an integer variable in bits, for example, for int32 it will be 32, for int64 it will be 64 3) For negative numbers, above step sets mask as 1 1 1 1 1 1 1 1 and 0 0 0 0 0 0 0 0 for positive numbers. 4) Add the mask to the given number. 5) XOR of mask + n and mask gives the absolute value.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/math/binary/bitcounter.go#L11&#34;&gt;&lt;code&gt;BitCounter&lt;/code&gt;&lt;/a&gt;: BitCounter - The function returns the number of set bits for an unsigned integer number&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/math/binary/checkisnumberpoweroftwo.go#L21&#34;&gt;&lt;code&gt;IsPowerOfTwo&lt;/code&gt;&lt;/a&gt;: IsPowerOfTwo This function uses the fact that powers of 2 are represented like 10...0 in binary, and numbers one less than the power of 2 are represented like 11...1. Therefore, using the and function: 10...0 &amp;amp; 01...1 00...0 -&amp;gt; 0 This is also true for 0, which is not a power of 2, for which we have to add and extra condition.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/math/binary/checkisnumberpoweroftwo.go#L28&#34;&gt;&lt;code&gt;IsPowerOfTwoLeftShift&lt;/code&gt;&lt;/a&gt;: IsPowerOfTwoLeftShift This function takes advantage of the fact that left shifting a number by 1 is equivalent to multiplying by 2. For example, binary 00000001 when shifted by 3 becomes 00001000, which in decimal system is 8 or = 2 * 2 * 2&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/math/binary/logarithm.go#L7&#34;&gt;&lt;code&gt;LogBase2&lt;/code&gt;&lt;/a&gt;: LogBase2 Finding the exponent of n = 2**x using bitwise operations (logarithm in base 2 of n) &lt;a href=&#34;https://en.wikipedia.org/wiki/Logarithm&#34;&gt;See more&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/math/binary/arithmeticmean.go#L12&#34;&gt;&lt;code&gt;MeanUsingAndXor&lt;/code&gt;&lt;/a&gt;: MeanUsingAndXor This function finds arithmetic mean using &#34;AND&#34; and &#34;XOR&#34; operations&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/math/binary/arithmeticmean.go#L17&#34;&gt;&lt;code&gt;MeanUsingRightShift&lt;/code&gt;&lt;/a&gt;: MeanUsingRightShift This function finds arithmetic mean using right shift&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/math/binary/reversebits.go#L14&#34;&gt;&lt;code&gt;ReverseBits&lt;/code&gt;&lt;/a&gt;: ReverseBits This function initialized the result by 0 (all bits 0) and process the given number starting from its least significant bit. If the current bit is 1, set the corresponding most significant bit in the result and finally move on to the next bit in the input number. Repeat this till all its bits are processed.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/math/binary/rbc.go#L11&#34;&gt;&lt;code&gt;SequenceGrayCode&lt;/code&gt;&lt;/a&gt;: SequenceGrayCode The function generates an &#34;Gray code&#34; sequence of length n&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/math/binary/sqrt.go#L16&#34;&gt;&lt;code&gt;Sqrt&lt;/code&gt;&lt;/a&gt;: No description provided.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/math/binary/xorsearch.go#L11&#34;&gt;&lt;code&gt;XorSearchMissingNumber&lt;/code&gt;&lt;/a&gt;: XorSearchMissingNumber This function finds a missing number in a sequence&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt;&#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;strong&gt; binarytree &lt;/strong&gt; &lt;/summary&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Functions:&lt;/h5&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/structure/binarysearchtree/bstree.go#L145&#34;&gt;&lt;code&gt;AccessNodesByLayer&lt;/code&gt;&lt;/a&gt;: AccessNodesByLayer Function that access nodes layer by layer instead of printing the results as one line.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/structure/binarysearchtree/bstree.go#L44&#34;&gt;&lt;code&gt;BstDelete&lt;/code&gt;&lt;/a&gt;: BstDelete removes the node&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/structure/binarysearchtree/bstree.go#L79&#34;&gt;&lt;code&gt;InOrder&lt;/code&gt;&lt;/a&gt;: Travers the tree in the following order left --&amp;gt; root --&amp;gt; right&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/structure/binarysearchtree/bstree.go#L35&#34;&gt;&lt;code&gt;InOrderSuccessor&lt;/code&gt;&lt;/a&gt;: InOrderSuccessor Goes to the left&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/structure/binarysearchtree/bstree.go#L17&#34;&gt;&lt;code&gt;Insert&lt;/code&gt;&lt;/a&gt;: Insert a value in the BSTree&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/structure/binarysearchtree/bstree.go#L138&#34;&gt;&lt;code&gt;LevelOrder&lt;/code&gt;&lt;/a&gt;: No description provided.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/structure/binarysearchtree/bstree.go#L174&#34;&gt;&lt;code&gt;Max&lt;/code&gt;&lt;/a&gt;: Max Function that returns max of two numbers - possibly already declared.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/structure/binarysearchtree/node.go#L11&#34;&gt;&lt;code&gt;NewNode&lt;/code&gt;&lt;/a&gt;: NewNode Returns a new pointer to an empty Node&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/structure/binarysearchtree/bstree.go#L113&#34;&gt;&lt;code&gt;PostOrder&lt;/code&gt;&lt;/a&gt;: Travers the tree in the following order left --&amp;gt; right --&amp;gt; root&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/structure/binarysearchtree/bstree.go#L96&#34;&gt;&lt;code&gt;PreOrder&lt;/code&gt;&lt;/a&gt;: Travers the tree in the following order root --&amp;gt; left --&amp;gt; right&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Types&lt;/h5&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/structure/binarysearchtree/bstree.go#L4&#34;&gt;&lt;code&gt;BSTree&lt;/code&gt;&lt;/a&gt;: No description provided.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/structure/binarysearchtree/node.go#L4&#34;&gt;&lt;code&gt;Node&lt;/code&gt;&lt;/a&gt;: No description provided.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt;&#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;strong&gt; caesar &lt;/strong&gt; &lt;/summary&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Package caesar is the shift cipher ref: &lt;a href=&#34;https://en.wikipedia.org/wiki/Caesar_cipher&#34;&gt;https://en.wikipedia.org/wiki/Caesar_cipher&lt;/a&gt;&lt;/h5&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Functions:&lt;/h5&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/cipher/caesar/caesar.go#L27&#34;&gt;&lt;code&gt;Decrypt&lt;/code&gt;&lt;/a&gt;: Decrypt decrypts by left shift of &#34;key&#34; each character of &#34;input&#34;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/cipher/caesar/caesar.go#L6&#34;&gt;&lt;code&gt;Encrypt&lt;/code&gt;&lt;/a&gt;: Encrypt encrypts by right shift of &#34;key&#34; each character of &#34;input&#34;&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt;&#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;strong&gt; catalan &lt;/strong&gt; &lt;/summary&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Functions:&lt;/h5&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/math/catalan/catalannumber.go#L16&#34;&gt;&lt;code&gt;CatalanNumber&lt;/code&gt;&lt;/a&gt;: CatalanNumber This function returns the &lt;code&gt;nth&lt;/code&gt; Catalan number&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt;&#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;strong&gt; checksum &lt;/strong&gt; &lt;/summary&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Package checksum describes algorithms for finding various checksums&lt;/h5&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Functions:&lt;/h5&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/checksum/crc8.go#L25&#34;&gt;&lt;code&gt;CRC8&lt;/code&gt;&lt;/a&gt;: CRC8 calculates CRC8 checksum of the given data.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/checksum/luhn.go#L11&#34;&gt;&lt;code&gt;Luhn&lt;/code&gt;&lt;/a&gt;: Luhn validates the provided data using the Luhn algorithm.&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Types&lt;/h5&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/checksum/crc8.go#L15&#34;&gt;&lt;code&gt;CRCModel&lt;/code&gt;&lt;/a&gt;: No description provided.&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt;&#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;strong&gt; coloring &lt;/strong&gt; &lt;/summary&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Package coloring provides implementation of different graph coloring algorithms, e.g. coloring using BFS, using Backtracking, using greedy approach. Author(s): &lt;a href=&#34;https://github.com/Shivam010&#34;&gt;Shivam&lt;/a&gt;&lt;/h5&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Functions:&lt;/h5&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/graph/coloring/bipartite.go#L40&#34;&gt;&lt;code&gt;BipartiteCheck&lt;/code&gt;&lt;/a&gt;: basically tries to color the graph in two colors if each edge connects 2 differently colored nodes the graph can be considered bipartite&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Types&lt;/h5&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/graph/coloring/graph.go#L14&#34;&gt;&lt;code&gt;Graph&lt;/code&gt;&lt;/a&gt;: No description provided.&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt;&#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;strong&gt; combination &lt;/strong&gt; &lt;/summary&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Package combination ...&lt;/h5&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Functions:&lt;/h5&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/strings/combination/combination.go#L13&#34;&gt;&lt;code&gt;Start&lt;/code&gt;&lt;/a&gt;: Start ...&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Types&lt;/h5&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/strings/combination/combination.go#L7&#34;&gt;&lt;code&gt;Combinations&lt;/code&gt;&lt;/a&gt;: No description provided.&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt;&#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;strong&gt; conversion &lt;/strong&gt; &lt;/summary&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Package conversion is a package of implementations which converts one data structure to another.&lt;/h5&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Functions:&lt;/h5&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/conversion/base64.go#L57&#34;&gt;&lt;code&gt;Base64Decode&lt;/code&gt;&lt;/a&gt;: Base64Decode decodes the received input base64 string into a byte slice. The implementation follows the RFC4648 standard, which is documented at &lt;a href=&#34;https://datatracker.ietf.org/doc/html/rfc4648#section-4&#34;&gt;https://datatracker.ietf.org/doc/html/rfc4648#section-4&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/conversion/base64.go#L19&#34;&gt;&lt;code&gt;Base64Encode&lt;/code&gt;&lt;/a&gt;: Base64Encode encodes the received input bytes slice into a base64 string. The implementation follows the RFC4648 standard, which is documented at &lt;a href=&#34;https://datatracker.ietf.org/doc/html/rfc4648#section-4&#34;&gt;https://datatracker.ietf.org/doc/html/rfc4648#section-4&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/conversion/binarytodecimal.go#L25&#34;&gt;&lt;code&gt;BinaryToDecimal&lt;/code&gt;&lt;/a&gt;: BinaryToDecimal() function that will take Binary number as string, and return it&#39;s Decimal equivalent as integer.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/conversion/decimaltobinary.go#L32&#34;&gt;&lt;code&gt;DecimalToBinary&lt;/code&gt;&lt;/a&gt;: DecimalToBinary() function that will take Decimal number as int, and return it&#39;s Binary equivalent as string.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/conversion/base64_test.go#L113&#34;&gt;&lt;code&gt;FuzzBase64Encode&lt;/code&gt;&lt;/a&gt;: No description provided.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/conversion/rgbhex.go#L10&#34;&gt;&lt;code&gt;HEXToRGB&lt;/code&gt;&lt;/a&gt;: HEXToRGB splits an RGB input (e.g. a color in hex format; 0x&#xA;   &lt;color-code&gt;&#xA;    ) into the individual components: red, green and blue&#xA;   &lt;/color-code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/conversion/integertoroman.go#L17&#34;&gt;&lt;code&gt;IntToRoman&lt;/code&gt;&lt;/a&gt;: IntToRoman converts an integer value to a roman numeral string. An error is returned if the integer is not between 1 and 3999.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/conversion/rgbhex.go#L41&#34;&gt;&lt;code&gt;RGBToHEX&lt;/code&gt;&lt;/a&gt;: RGBToHEX does exactly the opposite of HEXToRGB: it combines the three components red, green and blue to an RGB value, which can be converted to e.g. Hex&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/conversion/decimaltobinary.go#L22&#34;&gt;&lt;code&gt;Reverse&lt;/code&gt;&lt;/a&gt;: Reverse() function that will take string, and returns the reverse of that string.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/conversion/romantointeger.go#L40&#34;&gt;&lt;code&gt;RomanToInteger&lt;/code&gt;&lt;/a&gt;: RomanToInteger converts a roman numeral string to an integer. Roman numerals for numbers outside the range 1 to 3,999 will return an error. Nil or empty string return 0 with no error thrown.&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt;&#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;strong&gt; diffiehellman &lt;/strong&gt; &lt;/summary&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Package diffiehellman implements Diffie-Hellman Key Exchange Algorithm for more information watch : &lt;a href=&#34;https://www.youtube.com/watch?v=NmM9HA2MQGI&#34;&gt;https://www.youtube.com/watch?v=NmM9HA2MQGI&lt;/a&gt;&lt;/h5&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Functions:&lt;/h5&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/cipher/diffiehellman/diffiehellmankeyexchange.go#L19&#34;&gt;&lt;code&gt;GenerateMutualKey&lt;/code&gt;&lt;/a&gt;: GenerateMutualKey : generates a mutual key that can be used by only alice and bob mutualKey = (shareKey^prvKey)%primeNumber&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/cipher/diffiehellman/diffiehellmankeyexchange.go#L13&#34;&gt;&lt;code&gt;GenerateShareKey&lt;/code&gt;&lt;/a&gt;: GenerateShareKey : generates a key using client private key , generator and primeNumber this key can be made public shareKey = (g^key)%primeNumber&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt;&#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;strong&gt; dynamic &lt;/strong&gt; &lt;/summary&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Package dynamic is a package of certain implementations of dynamically run algorithms.&lt;/h5&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Functions:&lt;/h5&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/dynamic/abbreviation.go#L24&#34;&gt;&lt;code&gt;Abbreviation&lt;/code&gt;&lt;/a&gt;: Returns true if it is possible to make a equals b (if b is an abbreviation of a), returns false otherwise&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/dynamic/binomialcoefficient.go#L21&#34;&gt;&lt;code&gt;Bin2&lt;/code&gt;&lt;/a&gt;: Bin2 function&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/dynamic/coinchange.go#L5&#34;&gt;&lt;code&gt;CoinChange&lt;/code&gt;&lt;/a&gt;: CoinChange finds the number of possible combinations of coins of different values which can get to the target amount.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/dynamic/rodcutting.go#L21&#34;&gt;&lt;code&gt;CutRodDp&lt;/code&gt;&lt;/a&gt;: CutRodDp solve the same problem using dynamic programming&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/dynamic/rodcutting.go#L8&#34;&gt;&lt;code&gt;CutRodRec&lt;/code&gt;&lt;/a&gt;: CutRodRec solve the problem recursively: initial approach&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/dynamic/editdistance.go#L35&#34;&gt;&lt;code&gt;EditDistanceDP&lt;/code&gt;&lt;/a&gt;: EditDistanceDP is an optimised implementation which builds on the ideas of the recursive implementation. We use dynamic programming to compute the DP table where dp[i][j] denotes the edit distance value of first[0..i-1] and second[0..j-1]. Time complexity is O(m * n) where m and n are lengths of the strings, first and second respectively.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/dynamic/editdistance.go#L10&#34;&gt;&lt;code&gt;EditDistanceRecursive&lt;/code&gt;&lt;/a&gt;: EditDistanceRecursive is a naive implementation with exponential time complexity.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/dynamic/subsetsum.go#L14&#34;&gt;&lt;code&gt;IsSubsetSum&lt;/code&gt;&lt;/a&gt;: No description provided.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/dynamic/knapsack.go#L17&#34;&gt;&lt;code&gt;Knapsack&lt;/code&gt;&lt;/a&gt;: Knapsack solves knapsack problem return maxProfit&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/dynamic/longestcommonsubsequence.go#L8&#34;&gt;&lt;code&gt;LongestCommonSubsequence&lt;/code&gt;&lt;/a&gt;: LongestCommonSubsequence function&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/dynamic/longestincreasingsubsequence.go#L9&#34;&gt;&lt;code&gt;LongestIncreasingSubsequence&lt;/code&gt;&lt;/a&gt;: LongestIncreasingSubsequence returns the longest increasing subsequence where all elements of the subsequence are sorted in increasing order&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/dynamic/longestincreasingsubsequencegreedy.go#L9&#34;&gt;&lt;code&gt;LongestIncreasingSubsequenceGreedy&lt;/code&gt;&lt;/a&gt;: LongestIncreasingSubsequenceGreedy is a function to find the longest increasing subsequence in a given array using a greedy approach. The dynamic programming approach is implemented alongside this one. Worst Case Time Complexity: O(nlogn) Auxiliary Space: O(n), where n is the length of the array(slice). Reference: &lt;a href=&#34;https://www.geeksforgeeks.org/construction-of-longest-monotonically-increasing-subsequence-n-log-n/&#34;&gt;https://www.geeksforgeeks.org/construction-of-longest-monotonically-increasing-subsequence-n-log-n/&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/dynamic/longestpalindromicsubsequence.go#L21&#34;&gt;&lt;code&gt;LpsDp&lt;/code&gt;&lt;/a&gt;: LpsDp function&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/dynamic/longestpalindromicsubsequence.go#L7&#34;&gt;&lt;code&gt;LpsRec&lt;/code&gt;&lt;/a&gt;: LpsRec function&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/dynamic/matrixmultiplication.go#L24&#34;&gt;&lt;code&gt;MatrixChainDp&lt;/code&gt;&lt;/a&gt;: MatrixChainDp function&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/dynamic/matrixmultiplication.go#L10&#34;&gt;&lt;code&gt;MatrixChainRec&lt;/code&gt;&lt;/a&gt;: MatrixChainRec function&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/dynamic/knapsack.go#L11&#34;&gt;&lt;code&gt;Max&lt;/code&gt;&lt;/a&gt;: Max function - possible duplicate&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/dynamic/catalan.go#L13&#34;&gt;&lt;code&gt;NthCatalanNumber&lt;/code&gt;&lt;/a&gt;: NthCatalan returns the n-th Catalan Number Complexity: O(n²)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/dynamic/fibonacci.go#L6&#34;&gt;&lt;code&gt;NthFibonacci&lt;/code&gt;&lt;/a&gt;: NthFibonacci returns the nth Fibonacci Number&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt;&#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;strong&gt; dynamicarray &lt;/strong&gt; &lt;/summary&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Package dynamicarray A dynamic array is quite similar to a regular array, but its Size is modifiable during program runtime, very similar to how a slice in Go works. The implementation is for educational purposes and explains how one might go about implementing their own version of slices. For more details check out those links below here: GeeksForGeeks article : &lt;a href=&#34;https://www.geeksforgeeks.org/how-do-dynamic-arrays-work/&#34;&gt;https://www.geeksforgeeks.org/how-do-dynamic-arrays-work/&lt;/a&gt; Go blog: &lt;a href=&#34;https://blog.golang.org/slices-intro&#34;&gt;https://blog.golang.org/slices-intro&lt;/a&gt; Go blog: &lt;a href=&#34;https://blog.golang.org/slices&#34;&gt;https://blog.golang.org/slices&lt;/a&gt; authors &lt;a href=&#34;https://github.com/wesllhey&#34;&gt;Wesllhey Holanda&lt;/a&gt;, &lt;a href=&#34;https://github.com/miraddo&#34;&gt;Milad&lt;/a&gt; see dynamicarray.go, dynamicarray_test.go&lt;/h5&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Types&lt;/h5&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/structure/dynamicarray/dynamicarray.go#L21&#34;&gt;&lt;code&gt;DynamicArray&lt;/code&gt;&lt;/a&gt;: No description provided.&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt;&#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;strong&gt; factorial &lt;/strong&gt; &lt;/summary&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Package factorial describes algorithms Factorials calculations.&lt;/h5&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Functions:&lt;/h5&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/math/factorial/factorial.go#L12&#34;&gt;&lt;code&gt;Iterative&lt;/code&gt;&lt;/a&gt;: Iterative returns the iteratively brute forced factorial of n&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/math/factorial/factorial.go#L21&#34;&gt;&lt;code&gt;Recursive&lt;/code&gt;&lt;/a&gt;: Recursive This function recursively computes the factorial of a number&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/math/factorial/factorial.go#L30&#34;&gt;&lt;code&gt;UsingTree&lt;/code&gt;&lt;/a&gt;: UsingTree This function finds the factorial of a number using a binary tree&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt;&#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;strong&gt; fibonacci &lt;/strong&gt; &lt;/summary&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Functions:&lt;/h5&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/math/fibonacci/fibonacci.go#L42&#34;&gt;&lt;code&gt;Formula&lt;/code&gt;&lt;/a&gt;: Formula This function calculates the n-th fibonacci number using the &lt;a href=&#34;https://en.wikipedia.org/wiki/Fibonacci_number#Relation_to_the_golden_ratio&#34;&gt;formula&lt;/a&gt; Attention! Tests for large values fall due to rounding error of floating point numbers, works well, only on small numbers&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/math/fibonacci/fibonacci.go#L15&#34;&gt;&lt;code&gt;Matrix&lt;/code&gt;&lt;/a&gt;: Matrix This function calculates the n-th fibonacci number using the matrix method. &lt;a href=&#34;https://en.wikipedia.org/wiki/Fibonacci_number#Matrix_form&#34;&gt;See&lt;/a&gt;&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt;&#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;strong&gt; gcd &lt;/strong&gt; &lt;/summary&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Functions:&lt;/h5&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/math/gcd/extended.go#L12&#34;&gt;&lt;code&gt;Extended&lt;/code&gt;&lt;/a&gt;: Extended simple extended gcd&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/math/gcd/extendedgcditerative.go#L4&#34;&gt;&lt;code&gt;ExtendedIterative&lt;/code&gt;&lt;/a&gt;: ExtendedIterative finds and returns gcd(a, b), x, y satisfying a&lt;em&gt;x + b&lt;/em&gt;y = gcd(a, b).&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/math/gcd/extendedgcd.go#L4&#34;&gt;&lt;code&gt;ExtendedRecursive&lt;/code&gt;&lt;/a&gt;: ExtendedRecursive finds and returns gcd(a, b), x, y satisfying a&lt;em&gt;x + b&lt;/em&gt;y = gcd(a, b).&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/math/gcd/gcditerative.go#L4&#34;&gt;&lt;code&gt;Iterative&lt;/code&gt;&lt;/a&gt;: Iterative Faster iterative version of GcdRecursive without holding up too much of the stack&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/math/gcd/gcd.go#L4&#34;&gt;&lt;code&gt;Recursive&lt;/code&gt;&lt;/a&gt;: Recursive finds and returns the greatest common divisor of a given integer.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/math/gcd/extendedgcd_test.go#L44&#34;&gt;&lt;code&gt;TemplateBenchmarkExtendedGCD&lt;/code&gt;&lt;/a&gt;: No description provided.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/math/gcd/gcd_test.go#L37&#34;&gt;&lt;code&gt;TemplateBenchmarkGCD&lt;/code&gt;&lt;/a&gt;: No description provided.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/math/gcd/extendedgcd_test.go#L7&#34;&gt;&lt;code&gt;TemplateTestExtendedGCD&lt;/code&gt;&lt;/a&gt;: No description provided.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/math/gcd/gcd_test.go#L18&#34;&gt;&lt;code&gt;TemplateTestGCD&lt;/code&gt;&lt;/a&gt;: No description provided.&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt;&#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;strong&gt; generateparentheses &lt;/strong&gt; &lt;/summary&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Functions:&lt;/h5&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/strings/generateparentheses/generateparentheses.go#L12&#34;&gt;&lt;code&gt;GenerateParenthesis&lt;/code&gt;&lt;/a&gt;: No description provided.&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt;&#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;strong&gt; genetic &lt;/strong&gt; &lt;/summary&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Package genetic provides functions to work with strings using genetic algorithm. &lt;a href=&#34;https://en.wikipedia.org/wiki/Genetic_algorithm&#34;&gt;https://en.wikipedia.org/wiki/Genetic_algorithm&lt;/a&gt; Author: D4rkia&lt;/h5&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Functions:&lt;/h5&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/strings/genetic/genetic.go#L71&#34;&gt;&lt;code&gt;GeneticString&lt;/code&gt;&lt;/a&gt;: GeneticString generates PopultaionItem based on the imputed target string, and a set of possible runes to build a string with. In order to optimise string generation additional configurations can be provided with Conf instance. Empty instance of Conf (&amp;amp;Conf{}) can be provided, then default values would be set. Link to the same algorithm implemented in python: &lt;a href=&#34;https://github.com/TheAlgorithms/Python/raw/master/genetic_algorithm/basic_string.py&#34;&gt;https://github.com/TheAlgorithms/Python/blob/master/genetic_algorithm/basic_string.py&lt;/a&gt;&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Types&lt;/h5&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/strings/genetic/genetic.go#L32&#34;&gt;&lt;code&gt;Conf&lt;/code&gt;&lt;/a&gt;: No description provided.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/strings/genetic/genetic.go#L26&#34;&gt;&lt;code&gt;PopulationItem&lt;/code&gt;&lt;/a&gt;: No description provided.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/strings/genetic/genetic.go#L52&#34;&gt;&lt;code&gt;Result&lt;/code&gt;&lt;/a&gt;: No description provided.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt;&#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;strong&gt; geometry &lt;/strong&gt; &lt;/summary&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Package geometry contains geometric algorithms&lt;/h5&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Functions:&lt;/h5&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/math/geometry/straightlines.go#L18&#34;&gt;&lt;code&gt;Distance&lt;/code&gt;&lt;/a&gt;: Distance calculates the shortest distance between two points.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/math/geometry/straightlines.go#L42&#34;&gt;&lt;code&gt;IsParallel&lt;/code&gt;&lt;/a&gt;: IsParallel checks if two lines are parallel or not.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/math/geometry/straightlines.go#L47&#34;&gt;&lt;code&gt;IsPerpendicular&lt;/code&gt;&lt;/a&gt;: IsPerpendicular checks if two lines are perpendicular or not.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/math/geometry/straightlines.go#L53&#34;&gt;&lt;code&gt;PointDistance&lt;/code&gt;&lt;/a&gt;: PointDistance calculates the distance of a given Point from a given line. The slice should contain the coefficiet of x, the coefficient of y and the constant in the respective order.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/math/geometry/straightlines.go#L24&#34;&gt;&lt;code&gt;Section&lt;/code&gt;&lt;/a&gt;: Section calculates the Point that divides a line in specific ratio. DO NOT specify the ratio in the form m:n, specify it as r, where r = m / n.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/math/geometry/straightlines.go#L32&#34;&gt;&lt;code&gt;Slope&lt;/code&gt;&lt;/a&gt;: Slope calculates the slope (gradient) of a line.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/math/geometry/straightlines.go#L37&#34;&gt;&lt;code&gt;YIntercept&lt;/code&gt;&lt;/a&gt;: YIntercept calculates the Y-Intercept of a line from a specific Point.&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Types&lt;/h5&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/math/geometry/straightlines.go#L13&#34;&gt;&lt;code&gt;Line&lt;/code&gt;&lt;/a&gt;: No description provided.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/math/geometry/straightlines.go#L9&#34;&gt;&lt;code&gt;Point&lt;/code&gt;&lt;/a&gt;: No description provided.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt;&#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;strong&gt; graph &lt;/strong&gt; &lt;/summary&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Package graph demonstrates Graph search algorithms reference: &lt;a href=&#34;https://en.wikipedia.org/wiki/Tree_traversal&#34;&gt;https://en.wikipedia.org/wiki/Tree_traversal&lt;/a&gt;&lt;/h5&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Functions:&lt;/h5&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/graph/articulationpoints.go#L19&#34;&gt;&lt;code&gt;ArticulationPoint&lt;/code&gt;&lt;/a&gt;: ArticulationPoint is a function to identify articulation points in a graph. The function takes the graph as an argument and returns a boolean slice which indicates whether a vertex is an articulation point or not. Worst Case Time Complexity: O(|V| + |E|) Auxiliary Space: O(|V|) reference: &lt;a href=&#34;https://en.wikipedia.org/wiki/Biconnected_component&#34;&gt;https://en.wikipedia.org/wiki/Biconnected_component&lt;/a&gt; and &lt;a href=&#34;https://cptalks.quora.com/Cut-Vertex-Articulation-point&#34;&gt;https://cptalks.quora.com/Cut-Vertex-Articulation-point&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/graph/breadthfirstsearch.go#L9&#34;&gt;&lt;code&gt;BreadthFirstSearch&lt;/code&gt;&lt;/a&gt;: BreadthFirstSearch is an algorithm for traversing and searching graph data structures. It starts at an arbitrary node of a graph, and explores all of the neighbor nodes at the present depth prior to moving on to the nodes at the next depth level. Worst-case performance O(|V|+|E|)=O(b^{d})}O(|V|+|E|)=O(b^{d}) Worst-case space complexity O(|V|)=O(b^{d})}O(|V|)=O(b^{d}) reference: &lt;a href=&#34;https://en.wikipedia.org/wiki/Breadth-first_search&#34;&gt;https://en.wikipedia.org/wiki/Breadth-first_search&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/graph/depthfirstsearch.go#L53&#34;&gt;&lt;code&gt;DepthFirstSearch&lt;/code&gt;&lt;/a&gt;: No description provided.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/graph/depthfirstsearch.go#L21&#34;&gt;&lt;code&gt;DepthFirstSearchHelper&lt;/code&gt;&lt;/a&gt;: No description provided.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/graph/floydwarshall.go#L15&#34;&gt;&lt;code&gt;FloydWarshall&lt;/code&gt;&lt;/a&gt;: FloydWarshall Returns all pair&#39;s shortest path using Floyd Warshall algorithm&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/graph/depthfirstsearch.go#L3&#34;&gt;&lt;code&gt;GetIdx&lt;/code&gt;&lt;/a&gt;: No description provided.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/graph/kruskal.go#L87&#34;&gt;&lt;code&gt;KruskalMST&lt;/code&gt;&lt;/a&gt;: KruskalMST will return a minimum spanning tree along with its total cost to using Kruskal&#39;s algorithm. Time complexity is O(m * log (n)) where m is the number of edges in the graph and n is number of nodes in it.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/graph/lowestcommonancestor.go#L111&#34;&gt;&lt;code&gt;LowestCommonAncestor&lt;/code&gt;&lt;/a&gt;: For each node, we will precompute its ancestor above him, its ancestor two nodes above, its ancestor four nodes above, etc. Let&#39;s call &lt;code&gt;jump[j][u]&lt;/code&gt; is the &lt;code&gt;2^j&lt;/code&gt;-th ancestor above the node &lt;code&gt;u&lt;/code&gt; with &lt;code&gt;u&lt;/code&gt; in range &lt;code&gt;[0, numbersVertex)&lt;/code&gt;, &lt;code&gt;j&lt;/code&gt; in range &lt;code&gt;[0,MAXLOG)&lt;/code&gt;. These information allow us to jump from any node to any ancestor above it in &lt;code&gt;O(MAXLOG)&lt;/code&gt; time.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/graph/graph.go#L16&#34;&gt;&lt;code&gt;New&lt;/code&gt;&lt;/a&gt;: Constructor functions for graphs (undirected by default)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/graph/kruskal.go#L34&#34;&gt;&lt;code&gt;NewDSU&lt;/code&gt;&lt;/a&gt;: NewDSU will return an initialised DSU using the value of n which will be treated as the number of elements out of which the DSU is being made&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/graph/lowestcommonancestor.go#L84&#34;&gt;&lt;code&gt;NewTree&lt;/code&gt;&lt;/a&gt;: No description provided.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/graph/depthfirstsearch.go#L12&#34;&gt;&lt;code&gt;NotExist&lt;/code&gt;&lt;/a&gt;: No description provided.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/graph/topological.go#L7&#34;&gt;&lt;code&gt;Topological&lt;/code&gt;&lt;/a&gt;: Assumes that graph given is valid and possible to get a topo ordering. constraints are array of []int{a, b}, representing an edge going from a to b&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Types&lt;/h5&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/graph/kruskal.go#L29&#34;&gt;&lt;code&gt;DisjointSetUnion&lt;/code&gt;&lt;/a&gt;: No description provided.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/graph/kruskal.go#L21&#34;&gt;&lt;code&gt;DisjointSetUnionElement&lt;/code&gt;&lt;/a&gt;: No description provided.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/graph/kruskal.go#L14&#34;&gt;&lt;code&gt;Edge&lt;/code&gt;&lt;/a&gt;: No description provided.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/graph/graph.go#L9&#34;&gt;&lt;code&gt;Graph&lt;/code&gt;&lt;/a&gt;: No description provided.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/graph/dijkstra.go#L5&#34;&gt;&lt;code&gt;Item&lt;/code&gt;&lt;/a&gt;: No description provided.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/graph/lowestcommonancestor_test.go#L9&#34;&gt;&lt;code&gt;Query&lt;/code&gt;&lt;/a&gt;: No description provided.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/graph/lowestcommonancestor.go#L25&#34;&gt;&lt;code&gt;Tree&lt;/code&gt;&lt;/a&gt;: No description provided.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/graph/lowestcommonancestor.go#L12&#34;&gt;&lt;code&gt;TreeEdge&lt;/code&gt;&lt;/a&gt;: No description provided.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/graph/floydwarshall.go#L9&#34;&gt;&lt;code&gt;WeightedGraph&lt;/code&gt;&lt;/a&gt;: No description provided.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt;&#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;strong&gt; hashmap &lt;/strong&gt; &lt;/summary&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Functions:&lt;/h5&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/structure/hashmap/hashmap.go#L32&#34;&gt;&lt;code&gt;Make&lt;/code&gt;&lt;/a&gt;: Make creates a new HashMap instance with input size and capacity&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/structure/hashmap/hashmap.go#L24&#34;&gt;&lt;code&gt;New&lt;/code&gt;&lt;/a&gt;: New return new HashMap instance&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Types&lt;/h5&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/structure/hashmap/hashmap.go#L17&#34;&gt;&lt;code&gt;HashMap&lt;/code&gt;&lt;/a&gt;: No description provided.&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt;&#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;strong&gt; kmp &lt;/strong&gt; &lt;/summary&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Functions:&lt;/h5&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/strings/kmp/kmp.go#L70&#34;&gt;&lt;code&gt;Kmp&lt;/code&gt;&lt;/a&gt;: Kmp Function kmp performing the Knuth-Morris-Pratt algorithm. Prints whether the word/pattern was found and on what position in the text or not. m - current match in text, i - current character in w, c - amount of comparisons.&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Types&lt;/h5&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/strings/kmp/kmp.go#L15&#34;&gt;&lt;code&gt;Result&lt;/code&gt;&lt;/a&gt;: No description provided.&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt;&#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;strong&gt; lcm &lt;/strong&gt; &lt;/summary&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Functions:&lt;/h5&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/math/lcm/lcm.go#L10&#34;&gt;&lt;code&gt;Lcm&lt;/code&gt;&lt;/a&gt;: Lcm returns the lcm of two numbers using the fact that lcm(a,b) * gcd(a,b) = | a * b |&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt;&#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;strong&gt; levenshtein &lt;/strong&gt; &lt;/summary&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Functions:&lt;/h5&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/strings/levenshtein/levenshteindistance.go#L10&#34;&gt;&lt;code&gt;Distance&lt;/code&gt;&lt;/a&gt;: Distance Function that gives Levenshtein Distance&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt;&#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;strong&gt; linkedlist &lt;/strong&gt; &lt;/summary&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Package linkedlist demonstrates different implementations on linkedlists.&lt;/h5&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Functions:&lt;/h5&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/structure/linkedlist/cyclic.go#L120&#34;&gt;&lt;code&gt;JosephusProblem&lt;/code&gt;&lt;/a&gt;: &lt;a href=&#34;https://en.wikipedia.org/wiki/Josephus_problem&#34;&gt;https://en.wikipedia.org/wiki/Josephus_problem&lt;/a&gt; This is a struct-based solution for Josephus problem.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/structure/linkedlist/cyclic.go#L12&#34;&gt;&lt;code&gt;NewCyclic&lt;/code&gt;&lt;/a&gt;: Create new list.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/structure/linkedlist/doubly.go#L22&#34;&gt;&lt;code&gt;NewDoubly&lt;/code&gt;&lt;/a&gt;: No description provided.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/structure/linkedlist/shared.go#L12&#34;&gt;&lt;code&gt;NewNode&lt;/code&gt;&lt;/a&gt;: Create new node.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/structure/linkedlist/singlylinkedlist.go#L19&#34;&gt;&lt;code&gt;NewSingly&lt;/code&gt;&lt;/a&gt;: NewSingly returns a new instance of a linked list&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Types&lt;/h5&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/structure/linkedlist/cyclic.go#L6&#34;&gt;&lt;code&gt;Cyclic&lt;/code&gt;&lt;/a&gt;: No description provided.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/structure/linkedlist/doubly.go#L18&#34;&gt;&lt;code&gt;Doubly&lt;/code&gt;&lt;/a&gt;: No description provided.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/structure/linkedlist/shared.go#L5&#34;&gt;&lt;code&gt;Node&lt;/code&gt;&lt;/a&gt;: No description provided.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/structure/linkedlist/singlylinkedlist.go#L10&#34;&gt;&lt;code&gt;Singly&lt;/code&gt;&lt;/a&gt;: No description provided.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/structure/linkedlist/cyclic_test.go#L105&#34;&gt;&lt;code&gt;testCase&lt;/code&gt;&lt;/a&gt;: No description provided.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt;&#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;strong&gt; manacher &lt;/strong&gt; &lt;/summary&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Functions:&lt;/h5&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/strings/manacher/longestpalindrome.go#L37&#34;&gt;&lt;code&gt;LongestPalindrome&lt;/code&gt;&lt;/a&gt;: No description provided.&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt;&#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;strong&gt; math &lt;/strong&gt; &lt;/summary&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Package math is a package that contains mathematical algorithms and its different implementations.&lt;/h5&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Functions:&lt;/h5&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/math/abs.go#L11&#34;&gt;&lt;code&gt;Abs&lt;/code&gt;&lt;/a&gt;: Abs returns absolute value&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/math/binomialcoefficient.go#L20&#34;&gt;&lt;code&gt;Combinations&lt;/code&gt;&lt;/a&gt;: C is Binomial Coefficient function This function returns C(n, k) for given n and k&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/math/cos.go#L10&#34;&gt;&lt;code&gt;Cos&lt;/code&gt;&lt;/a&gt;: Cos returns the cosine of the radian argument x. &lt;a href=&#34;https://en.wikipedia.org/wiki/Sine_and_cosine&#34;&gt;See more&lt;/a&gt; &lt;a href=&#34;https://math.stackexchange.com/questions/3886552/bhaskara-approximation-of-cosx&#34;&gt;Based on the idea of Bhaskara approximation of cos(x)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/math/pollard.go#L16&#34;&gt;&lt;code&gt;DefaultPolynomial&lt;/code&gt;&lt;/a&gt;: DefaultPolynomial is the commonly used polynomial g(x) = (x^2 + 1) mod n&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/math/kthnumber.go#L11&#34;&gt;&lt;code&gt;FindKthMax&lt;/code&gt;&lt;/a&gt;: FindKthMax returns the kth large element given an integer slice with nil &lt;code&gt;error&lt;/code&gt; if found and returns -1 with &lt;code&gt;error&lt;/code&gt; &lt;code&gt;search.ErrNotFound&lt;/code&gt; if not found. NOTE: The &lt;code&gt;nums&lt;/code&gt; slice gets mutated in the process.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/math/kthnumber.go#L19&#34;&gt;&lt;code&gt;FindKthMin&lt;/code&gt;&lt;/a&gt;: FindKthMin returns kth small element given an integer slice with nil &lt;code&gt;error&lt;/code&gt; if found and returns -1 with &lt;code&gt;error&lt;/code&gt; &lt;code&gt;search.ErrNotFound&lt;/code&gt; if not found. NOTE: The &lt;code&gt;nums&lt;/code&gt; slice gets mutated in the process.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/math/checkisnumberpoweroftwo.go#L10&#34;&gt;&lt;code&gt;IsPowOfTwoUseLog&lt;/code&gt;&lt;/a&gt;: IsPowOfTwoUseLog This function checks if a number is a power of two using the logarithm. The limiting degree can be from 0 to 63. See alternatives in the binary package.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/math/liouville.go#L24&#34;&gt;&lt;code&gt;LiouvilleLambda&lt;/code&gt;&lt;/a&gt;: Lambda is the liouville function This function returns λ(n) for given number&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/math/mean.go#L7&#34;&gt;&lt;code&gt;Mean&lt;/code&gt;&lt;/a&gt;: No description provided.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/math/median.go#L12&#34;&gt;&lt;code&gt;Median&lt;/code&gt;&lt;/a&gt;: No description provided.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/math/mode.go#L19&#34;&gt;&lt;code&gt;Mode&lt;/code&gt;&lt;/a&gt;: No description provided.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/math/mobius.go#L21&#34;&gt;&lt;code&gt;Mu&lt;/code&gt;&lt;/a&gt;: Mu is the Mobius function This function returns μ(n) for given number&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/math/eulertotient.go#L5&#34;&gt;&lt;code&gt;Phi&lt;/code&gt;&lt;/a&gt;: Phi is the Euler totient function. This function computes the number of numbers less then n that are coprime with n.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/math/pollard.go#L29&#34;&gt;&lt;code&gt;PollardsRhoFactorization&lt;/code&gt;&lt;/a&gt;: PollardsRhoFactorization is an implementation of Pollard&#39;s rho factorization algorithm using the default parameters x = y = 2&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/math/sin.go#L9&#34;&gt;&lt;code&gt;Sin&lt;/code&gt;&lt;/a&gt;: Sin returns the sine of the radian argument x. &lt;a href=&#34;https://en.wikipedia.org/wiki/Sine_and_cosine&#34;&gt;See more&lt;/a&gt;&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt;&#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;strong&gt; max &lt;/strong&gt; &lt;/summary&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Functions:&lt;/h5&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/math/max/bitwisemax.go#L11&#34;&gt;&lt;code&gt;Bitwise&lt;/code&gt;&lt;/a&gt;: Bitwise computes using bitwise operator the maximum of all the integer input and returns it&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/math/max/max.go#L4&#34;&gt;&lt;code&gt;Int&lt;/code&gt;&lt;/a&gt;: Int is a function which returns the maximum of all the integers provided as arguments.&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt;&#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;strong&gt; maxsubarraysum &lt;/strong&gt; &lt;/summary&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Package maxsubarraysum is a package containing a solution to a common problem of finding max contiguous sum within a array of ints.&lt;/h5&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Functions:&lt;/h5&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/other/maxsubarraysum/maxsubarraysum.go#L13&#34;&gt;&lt;code&gt;MaxSubarraySum&lt;/code&gt;&lt;/a&gt;: MaxSubarraySum returns the maximum subarray sum&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt;&#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;strong&gt; min &lt;/strong&gt; &lt;/summary&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Functions:&lt;/h5&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/math/min/bitwisemin.go#L11&#34;&gt;&lt;code&gt;Bitwise&lt;/code&gt;&lt;/a&gt;: Bitwise This function returns the minimum integer using bit operations&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/math/min/min.go#L4&#34;&gt;&lt;code&gt;Int&lt;/code&gt;&lt;/a&gt;: Int is a function which returns the minimum of all the integers provided as arguments.&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt;&#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;strong&gt; modular &lt;/strong&gt; &lt;/summary&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Functions:&lt;/h5&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/math/modular/exponentiation.go#L22&#34;&gt;&lt;code&gt;Exponentiation&lt;/code&gt;&lt;/a&gt;: Exponentiation returns base^exponent % mod&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/math/modular/inverse.go#L20&#34;&gt;&lt;code&gt;Inverse&lt;/code&gt;&lt;/a&gt;: Inverse Modular function&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/math/modular/exponentiation.go#L51&#34;&gt;&lt;code&gt;Multiply64BitInt&lt;/code&gt;&lt;/a&gt;: Multiply64BitInt Checking if the integer multiplication overflows&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt;&#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;strong&gt; moserdebruijnsequence &lt;/strong&gt; &lt;/summary&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Functions:&lt;/h5&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/math/moserdebruijnsequence/sequence.go#L7&#34;&gt;&lt;code&gt;MoserDeBruijnSequence&lt;/code&gt;&lt;/a&gt;: No description provided.&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt;&#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;strong&gt; nested &lt;/strong&gt; &lt;/summary&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Package nested provides functions for testing strings proper brackets nesting.&lt;/h5&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Functions:&lt;/h5&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/other/nested/nestedbrackets.go#L20&#34;&gt;&lt;code&gt;IsBalanced&lt;/code&gt;&lt;/a&gt;: IsBalanced returns true if provided input string is properly nested. Input is a sequence of brackets: &#39;(&#39;, &#39;)&#39;, &#39;[&#39;, &#39;]&#39;, &#39;{&#39;, &#39;}&#39;. A sequence of brackets &lt;code&gt;s&lt;/code&gt; is considered properly nested if any of the following conditions are true: - &lt;code&gt;s&lt;/code&gt; is empty; - &lt;code&gt;s&lt;/code&gt; has the form (U) or [U] or {U} where U is a properly nested string; - &lt;code&gt;s&lt;/code&gt; has the form VW where V and W are properly nested strings. For example, the string &#34;()()[()]&#34; is properly nested but &#34;[(()]&#34; is not. &lt;strong&gt;Note&lt;/strong&gt; Providing characters other then brackets would return false, despite brackets sequence in the string. Make sure to filter input before usage.&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt;&#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;strong&gt; palindrome &lt;/strong&gt; &lt;/summary&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Functions:&lt;/h5&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/strings/palindrome/ispalindrome.go#L26&#34;&gt;&lt;code&gt;IsPalindrome&lt;/code&gt;&lt;/a&gt;: No description provided.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/strings/palindrome/ispalindrome.go#L39&#34;&gt;&lt;code&gt;IsPalindromeRecursive&lt;/code&gt;&lt;/a&gt;: No description provided.&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt;&#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;strong&gt; pangram &lt;/strong&gt; &lt;/summary&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Functions:&lt;/h5&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/strings/pangram/ispangram.go#L21&#34;&gt;&lt;code&gt;IsPangram&lt;/code&gt;&lt;/a&gt;: No description provided.&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt;&#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;strong&gt; parenthesis &lt;/strong&gt; &lt;/summary&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Functions:&lt;/h5&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/strings/parenthesis/parenthesis.go#L12&#34;&gt;&lt;code&gt;Parenthesis&lt;/code&gt;&lt;/a&gt;: parcounter will be 0 if all open parenthesis are closed correctly&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt;&#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;strong&gt; pascal &lt;/strong&gt; &lt;/summary&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Functions:&lt;/h5&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/math/pascal/pascaltriangle.go#L24&#34;&gt;&lt;code&gt;GenerateTriangle&lt;/code&gt;&lt;/a&gt;: GenerateTriangle This function generates a Pascal&#39;s triangle of n lines&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt;&#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;strong&gt; password &lt;/strong&gt; &lt;/summary&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Package password contains functions to help generate random passwords&lt;/h5&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Functions:&lt;/h5&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/other/password/generator.go#L15&#34;&gt;&lt;code&gt;Generate&lt;/code&gt;&lt;/a&gt;: Generate returns a newly generated password&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt;&#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;strong&gt; permutation &lt;/strong&gt; &lt;/summary&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Functions:&lt;/h5&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/math/permutation/heaps.go#L37&#34;&gt;&lt;code&gt;GenerateElementSet&lt;/code&gt;&lt;/a&gt;: No description provided.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/math/permutation/heaps.go#L8&#34;&gt;&lt;code&gt;Heaps&lt;/code&gt;&lt;/a&gt;: Heap&#39;s Algorithm for generating all permutations of n objects&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt;&#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;strong&gt; pi &lt;/strong&gt; &lt;/summary&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;spigotpi_test.go description: Test for Spigot Algorithm for the Digits of Pi author(s) &lt;a href=&#34;https://github.com/i-redbyte&#34;&gt;red_byte&lt;/a&gt; see spigotpi.go&lt;/h5&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Functions:&lt;/h5&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/math/pi/montecarlopi.go#L17&#34;&gt;&lt;code&gt;MonteCarloPi&lt;/code&gt;&lt;/a&gt;: No description provided.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/math/pi/montecarlopi.go#L36&#34;&gt;&lt;code&gt;MonteCarloPiConcurrent&lt;/code&gt;&lt;/a&gt;: MonteCarloPiConcurrent approximates the value of pi using the Monte Carlo method. Unlike the MonteCarloPi function (first version), this implementation uses goroutines and channels to parallelize the computation. More details on the Monte Carlo method available at &lt;a href=&#34;https://en.wikipedia.org/wiki/Monte_Carlo_method&#34;&gt;https://en.wikipedia.org/wiki/Monte_Carlo_method&lt;/a&gt;. More details on goroutines parallelization available at &lt;a href=&#34;https://go.dev/doc/effective_go#parallel&#34;&gt;https://go.dev/doc/effective_go#parallel&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/math/pi/spigotpi.go#L12&#34;&gt;&lt;code&gt;Spigot&lt;/code&gt;&lt;/a&gt;: No description provided.&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt;&#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;strong&gt; polybius &lt;/strong&gt; &lt;/summary&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Package polybius is encrypting method with polybius square ref: &lt;a href=&#34;https://en.wikipedia.org/wiki/Polybius_square#Hybrid_Polybius_Playfair_Cipher&#34;&gt;https://en.wikipedia.org/wiki/Polybius_square#Hybrid_Polybius_Playfair_Cipher&lt;/a&gt;&lt;/h5&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Functions:&lt;/h5&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/cipher/polybius/polybius.go#L21&#34;&gt;&lt;code&gt;NewPolybius&lt;/code&gt;&lt;/a&gt;: NewPolybius returns a pointer to object of Polybius. If the size of &#34;chars&#34; is longer than &#34;size&#34;, &#34;chars&#34; are truncated to &#34;size&#34;.&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Types&lt;/h5&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/cipher/polybius/polybius.go#L12&#34;&gt;&lt;code&gt;Polybius&lt;/code&gt;&lt;/a&gt;: No description provided.&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt;&#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;strong&gt; power &lt;/strong&gt; &lt;/summary&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Functions:&lt;/h5&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/math/power/fastexponent.go#L4&#34;&gt;&lt;code&gt;IterativePower&lt;/code&gt;&lt;/a&gt;: IterativePower is iterative O(logn) function for pow(x, y)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/math/power/fastexponent.go#L18&#34;&gt;&lt;code&gt;RecursivePower&lt;/code&gt;&lt;/a&gt;: RecursivePower is recursive O(logn) function for pow(x, y)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/math/power/fastexponent.go#L30&#34;&gt;&lt;code&gt;RecursivePower1&lt;/code&gt;&lt;/a&gt;: RecursivePower1 is recursive O(n) function for pow(x, y)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/math/power/powvialogarithm.go#L14&#34;&gt;&lt;code&gt;UsingLog&lt;/code&gt;&lt;/a&gt;: No description provided.&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt;&#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;strong&gt; prime &lt;/strong&gt; &lt;/summary&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Functions:&lt;/h5&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/math/prime/primefactorization.go#L5&#34;&gt;&lt;code&gt;Factorize&lt;/code&gt;&lt;/a&gt;: Factorize is a function that computes the exponents of each prime in the prime factorization of n&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/math/prime/sieve.go#L26&#34;&gt;&lt;code&gt;Generate&lt;/code&gt;&lt;/a&gt;: Generate returns a int slice of prime numbers up to the limit&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/math/prime/sieve.go#L9&#34;&gt;&lt;code&gt;GenerateChannel&lt;/code&gt;&lt;/a&gt;: Generate generates the sequence of integers starting at 2 and sends it to the channel &lt;code&gt;ch&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/math/prime/millerrabintest.go#L121&#34;&gt;&lt;code&gt;MillerRabinDeterministic&lt;/code&gt;&lt;/a&gt;: MillerRabinDeterministic is a Deterministic version of the Miller-Rabin test, which returns correct results for all valid int64 numbers.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/math/prime/millerrabintest.go#L101&#34;&gt;&lt;code&gt;MillerRabinProbabilistic&lt;/code&gt;&lt;/a&gt;: MillerRabinProbabilistic is a probabilistic test for primality of an integer based of the algorithm devised by Miller and Rabin.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/math/prime/millerrabintest.go#L77&#34;&gt;&lt;code&gt;MillerRandomTest&lt;/code&gt;&lt;/a&gt;: MillerRandomTest This is the intermediate step that repeats within the miller rabin primality test for better probabilitic chances of receiving the correct result with random witnesses.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/math/prime/millerrabintest.go#L49&#34;&gt;&lt;code&gt;MillerTest&lt;/code&gt;&lt;/a&gt;: MillerTest tests whether num is a strong probable prime to a witness. Formally: a^d ≡ 1 (mod n) or a^(2^r * d) ≡ -1 (mod n), 0 &amp;lt;= r &amp;lt;= s&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/math/prime/millerrabintest.go#L84&#34;&gt;&lt;code&gt;MillerTestMultiple&lt;/code&gt;&lt;/a&gt;: MillerTestMultiple is like MillerTest but runs the test for multiple witnesses.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/math/prime/primecheck.go#L26&#34;&gt;&lt;code&gt;OptimizedTrialDivision&lt;/code&gt;&lt;/a&gt;: OptimizedTrialDivision checks primality of an integer using an optimized trial division method. The optimizations include not checking divisibility by the even numbers and only checking up to the square root of the given number.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/math/prime/sieve.go#L16&#34;&gt;&lt;code&gt;Sieve&lt;/code&gt;&lt;/a&gt;: Sieve Sieving the numbers that are not prime from the channel - basically removing them from the channels&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/math/prime/primecheck.go#L9&#34;&gt;&lt;code&gt;TrialDivision&lt;/code&gt;&lt;/a&gt;: TrialDivision tests whether a number is prime by trying to divide it by the numbers less than it.&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt;&#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;strong&gt; pythagoras &lt;/strong&gt; &lt;/summary&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Functions:&lt;/h5&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/math/pythagoras/pythagoras.go#L15&#34;&gt;&lt;code&gt;Distance&lt;/code&gt;&lt;/a&gt;: Distance calculates the distance between to vectors with the Pythagoras theorem&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Types&lt;/h5&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/math/pythagoras/pythagoras.go#L8&#34;&gt;&lt;code&gt;Vector&lt;/code&gt;&lt;/a&gt;: No description provided.&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt;&#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;strong&gt; queue &lt;/strong&gt; &lt;/summary&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Functions:&lt;/h5&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/structure/queue/queuearray.go#L32&#34;&gt;&lt;code&gt;BackQueue&lt;/code&gt;&lt;/a&gt;: BackQueue return the Back value&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/structure/queue/queuearray.go#L20&#34;&gt;&lt;code&gt;DeQueue&lt;/code&gt;&lt;/a&gt;: DeQueue it will be removed the first value that added into the list&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/structure/queue/queuearray.go#L15&#34;&gt;&lt;code&gt;EnQueue&lt;/code&gt;&lt;/a&gt;: EnQueue it will be added new value into our list&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/structure/queue/queuearray.go#L27&#34;&gt;&lt;code&gt;FrontQueue&lt;/code&gt;&lt;/a&gt;: FrontQueue return the Front value&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/structure/queue/queuearray.go#L42&#34;&gt;&lt;code&gt;IsEmptyQueue&lt;/code&gt;&lt;/a&gt;: IsEmptyQueue check our list is empty or not&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/structure/queue/queuearray.go#L37&#34;&gt;&lt;code&gt;LenQueue&lt;/code&gt;&lt;/a&gt;: LenQueue will return the length of the queue list&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Types&lt;/h5&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/structure/queue/queuelinklistwithlist.go#L20&#34;&gt;&lt;code&gt;LQueue&lt;/code&gt;&lt;/a&gt;: No description provided.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/structure/queue/queuelinkedlist.go#L13&#34;&gt;&lt;code&gt;Node&lt;/code&gt;&lt;/a&gt;: No description provided.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/structure/queue/queuelinkedlist.go#L19&#34;&gt;&lt;code&gt;Queue&lt;/code&gt;&lt;/a&gt;: No description provided.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt;&#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;strong&gt; rsa &lt;/strong&gt; &lt;/summary&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Package rsa shows a simple implementation of RSA algorithm&lt;/h5&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Functions:&lt;/h5&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/cipher/rsa/rsa.go#L43&#34;&gt;&lt;code&gt;Decrypt&lt;/code&gt;&lt;/a&gt;: Decrypt decrypts encrypted rune slice based on the RSA algorithm&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/cipher/rsa/rsa.go#L28&#34;&gt;&lt;code&gt;Encrypt&lt;/code&gt;&lt;/a&gt;: Encrypt encrypts based on the RSA algorithm - uses modular exponentitation in math directory&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt;&#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;strong&gt; search &lt;/strong&gt; &lt;/summary&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Functions:&lt;/h5&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/strings/search/boyermoore.go#L5&#34;&gt;&lt;code&gt;BoyerMoore&lt;/code&gt;&lt;/a&gt;: Implementation of boyer moore string search O(l) where l=len(text)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/strings/search/naive.go#L5&#34;&gt;&lt;code&gt;Naive&lt;/code&gt;&lt;/a&gt;: Implementation of naive string search O(n*m) where n=len(txt) and m=len(pattern)&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt;&#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;strong&gt; segmenttree &lt;/strong&gt; &lt;/summary&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Functions:&lt;/h5&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/structure/segmenttree/segmenttree.go#L116&#34;&gt;&lt;code&gt;NewSegmentTree&lt;/code&gt;&lt;/a&gt;: No description provided.&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Types&lt;/h5&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/structure/segmenttree/segmenttree.go#L17&#34;&gt;&lt;code&gt;SegmentTree&lt;/code&gt;&lt;/a&gt;: No description provided.&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt;&#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;strong&gt; set &lt;/strong&gt; &lt;/summary&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;package set implements a Set using a golang map. This implies that only the types that are accepted as valid map keys can be used as set elements. For instance, do not try to Add a slice, or the program will panic.&lt;/h5&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Functions:&lt;/h5&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/structure/set/set.go#L7&#34;&gt;&lt;code&gt;New&lt;/code&gt;&lt;/a&gt;: New gives new set.&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt;&#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;strong&gt; sha256 &lt;/strong&gt; &lt;/summary&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Functions:&lt;/h5&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/hashing/sha256/sha256.go#L50&#34;&gt;&lt;code&gt;Hash&lt;/code&gt;&lt;/a&gt;: Hash hashes the input message using the sha256 hashing function, and return a 32 byte array. The implementation follows the RGC6234 standard, which is documented at &lt;a href=&#34;https://datatracker.ietf.org/doc/html/rfc6234&#34;&gt;https://datatracker.ietf.org/doc/html/rfc6234&lt;/a&gt;&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt;&#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;strong&gt; sort &lt;/strong&gt; &lt;/summary&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Package sort a package for demonstrating sorting algorithms in Go&lt;/h5&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Functions:&lt;/h5&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/sort/bubblesort.go#L9&#34;&gt;&lt;code&gt;Bubble&lt;/code&gt;&lt;/a&gt;: Bubble is a simple generic definition of Bubble sort algorithm.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/sort/combSort.go#L17&#34;&gt;&lt;code&gt;Comb&lt;/code&gt;&lt;/a&gt;: Comb is a simple sorting algorithm which is an improvement of the bubble sorting algorithm.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/sort/countingsort.go#L11&#34;&gt;&lt;code&gt;Count&lt;/code&gt;&lt;/a&gt;: No description provided.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/sort/exchangesort.go#L8&#34;&gt;&lt;code&gt;Exchange&lt;/code&gt;&lt;/a&gt;: No description provided.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/sort/heapsort.go#L121&#34;&gt;&lt;code&gt;HeapSort&lt;/code&gt;&lt;/a&gt;: No description provided.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/sort/simplesort.go#L27&#34;&gt;&lt;code&gt;ImprovedSimple&lt;/code&gt;&lt;/a&gt;: ImprovedSimple is a improve SimpleSort by skipping an unnecessary comparison of the first and last. This improved version is more similar to implementation of insertion sort&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/sort/insertionsort.go#L5&#34;&gt;&lt;code&gt;Insertion&lt;/code&gt;&lt;/a&gt;: No description provided.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/sort/mergesort.go#L40&#34;&gt;&lt;code&gt;Merge&lt;/code&gt;&lt;/a&gt;: Merge Perform merge sort on a slice&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/sort/mergesort.go#L54&#34;&gt;&lt;code&gt;MergeIter&lt;/code&gt;&lt;/a&gt;: No description provided.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/sort/quicksort.go#L12&#34;&gt;&lt;code&gt;Partition&lt;/code&gt;&lt;/a&gt;: No description provided.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/sort/patiencesort.go#L13&#34;&gt;&lt;code&gt;Patience&lt;/code&gt;&lt;/a&gt;: No description provided.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/sort/pigeonholesort.go#L12&#34;&gt;&lt;code&gt;Pigeonhole&lt;/code&gt;&lt;/a&gt;: Pigeonhole sorts a slice using pigeonhole sorting algorithm.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/sort/quicksort.go#L39&#34;&gt;&lt;code&gt;Quicksort&lt;/code&gt;&lt;/a&gt;: Quicksort Sorts the entire array&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/sort/quicksort.go#L26&#34;&gt;&lt;code&gt;QuicksortRange&lt;/code&gt;&lt;/a&gt;: QuicksortRange Sorts the specified range within the array&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/sort/radixsort.go#L35&#34;&gt;&lt;code&gt;RadixSort&lt;/code&gt;&lt;/a&gt;: No description provided.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/sort/selectionsort.go#L5&#34;&gt;&lt;code&gt;Selection&lt;/code&gt;&lt;/a&gt;: No description provided.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/sort/shellsort.go#L5&#34;&gt;&lt;code&gt;Shell&lt;/code&gt;&lt;/a&gt;: No description provided.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/sort/simplesort.go#L13&#34;&gt;&lt;code&gt;Simple&lt;/code&gt;&lt;/a&gt;: No description provided.&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Types&lt;/h5&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/#L0&#34;&gt;&lt;code&gt;Int&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt; &lt;p&gt;Methods:&lt;/p&gt; &#xA;   &lt;ol&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/sort/heapsort.go#L114&#34;&gt;&lt;code&gt;More&lt;/code&gt;&lt;/a&gt;: No description provided.&lt;/li&gt; &#xA;   &lt;/ol&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/sort/heapsort.go#L3&#34;&gt;&lt;code&gt;MaxHeap&lt;/code&gt;&lt;/a&gt;: No description provided.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt;&#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;strong&gt; stack &lt;/strong&gt; &lt;/summary&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Types&lt;/h5&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/structure/stack/stacklinkedlist.go#L13&#34;&gt;&lt;code&gt;Node&lt;/code&gt;&lt;/a&gt;: No description provided.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/structure/stack/stacklinkedlistwithlist.go#L18&#34;&gt;&lt;code&gt;SList&lt;/code&gt;&lt;/a&gt;: No description provided.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/structure/stack/stacklinkedlist.go#L19&#34;&gt;&lt;code&gt;Stack&lt;/code&gt;&lt;/a&gt;: No description provided.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt;&#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;strong&gt; strings &lt;/strong&gt; &lt;/summary&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Package strings is a package that contains all algorithms that are used to analyse and manipulate strings.&lt;/h5&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Functions:&lt;/h5&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/strings/charoccurrence.go#L12&#34;&gt;&lt;code&gt;CountChars&lt;/code&gt;&lt;/a&gt;: CountChars counts the number of a times a character has occurred in the provided string argument and returns a map with &lt;code&gt;rune&lt;/code&gt; as keys and the count as value.&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt;&#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;strong&gt; transposition &lt;/strong&gt; &lt;/summary&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Functions:&lt;/h5&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/cipher/transposition/transposition.go#L82&#34;&gt;&lt;code&gt;Decrypt&lt;/code&gt;&lt;/a&gt;: No description provided.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/cipher/transposition/transposition.go#L54&#34;&gt;&lt;code&gt;Encrypt&lt;/code&gt;&lt;/a&gt;: No description provided.&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Types&lt;/h5&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/cipher/transposition/transposition.go#L16&#34;&gt;&lt;code&gt;KeyMissingError&lt;/code&gt;&lt;/a&gt;: No description provided.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/cipher/transposition/transposition.go#L15&#34;&gt;&lt;code&gt;NoTextToEncryptError&lt;/code&gt;&lt;/a&gt;: No description provided.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt;&#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;strong&gt; trie &lt;/strong&gt; &lt;/summary&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Package trie provides Trie data structures in golang. Wikipedia: &lt;a href=&#34;https://en.wikipedia.org/wiki/Trie&#34;&gt;https://en.wikipedia.org/wiki/Trie&lt;/a&gt;&lt;/h5&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Functions:&lt;/h5&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/structure/trie/trie.go#L14&#34;&gt;&lt;code&gt;NewNode&lt;/code&gt;&lt;/a&gt;: NewNode creates a new Trie node with initialized children map.&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Types&lt;/h5&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/structure/trie/trie.go#L7&#34;&gt;&lt;code&gt;Node&lt;/code&gt;&lt;/a&gt;: No description provided.&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt;&#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;strong&gt; xor &lt;/strong&gt; &lt;/summary&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Package xor is an encryption algorithm that operates the exclusive disjunction(XOR) ref: &lt;a href=&#34;https://en.wikipedia.org/wiki/XOR_cipher&#34;&gt;https://en.wikipedia.org/wiki/XOR_cipher&lt;/a&gt;&lt;/h5&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Functions:&lt;/h5&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/cipher/xor/xor.go#L19&#34;&gt;&lt;code&gt;Decrypt&lt;/code&gt;&lt;/a&gt;: Decrypt decrypts with Xor encryption&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/cipher/xor/xor.go#L10&#34;&gt;&lt;code&gt;Encrypt&lt;/code&gt;&lt;/a&gt;: Encrypt encrypts with Xor encryption after converting each character to byte The returned value might not be readable because there is no guarantee which is within the ASCII range If using other type such as string, []int, or some other types, add the statements for converting the type to []byte.&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt; &#xA;&lt;!-- GODOCMD END ---&gt;</summary>
  </entry>
</feed>