<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-10-20T01:39:04Z</updated>
  <subtitle>Weekly Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>iam-veeramalla/observability-zero-to-hero</title>
    <updated>2024-10-20T01:39:04Z</updated>
    <id>tag:github.com,2024-10-20:/iam-veeramalla/observability-zero-to-hero</id>
    <link href="https://github.com/iam-veeramalla/observability-zero-to-hero" rel="alternate"></link>
    <summary type="html">&lt;p&gt;[WIP]: Repo for learning observability&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ðŸ“š 7-Day Observability Tutorial Series&lt;/h1&gt; &#xA;&lt;p&gt;Welcome to the 7-Day Observability Tutorial Series! This repository contains the code and detailed explanations for setting up and understanding observability in Kubernetes using Prometheus, Grafana, Elasticsearch Fluentbit, Kibana, Jaeger, groundcover(eBPF), opentelemetry e.t.c.,.&lt;/p&gt; &#xA;&lt;h2&gt;ðŸ“… Overview of Each Day&lt;/h2&gt; &#xA;&lt;h3&gt;Day 1: Introduction to Observability&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Concepts Covered&lt;/strong&gt;: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Introduction to Observability, Monitoring, Logging, and Tracing.&lt;/li&gt; &#xA;   &lt;li&gt;The difference between Monitoring and Observability.&lt;/li&gt; &#xA;   &lt;li&gt;Tools available for Monitoring and Observability.&lt;/li&gt; &#xA;   &lt;li&gt;Comparison between monitoring and observing in Bare-Metal Servers vs. Kubernetes.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Key Learning&lt;/strong&gt;: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Understand the fundamental concepts of observability.&lt;/li&gt; &#xA;   &lt;li&gt;Learn why monitoring and observability are crucial in modern IT environments.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Day 2: Prometheus - Setting Up Monitoring&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Concepts Covered&lt;/strong&gt;: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Introduction to Prometheus and its architecture.&lt;/li&gt; &#xA;   &lt;li&gt;Setup and configuration of Prometheus in an EKS cluster.&lt;/li&gt; &#xA;   &lt;li&gt;Installation of kube-prometheus-stack with Helm and integrating it with Grafana.&lt;/li&gt; &#xA;   &lt;li&gt;Basic queries and setup for monitoring with Prometheus and Grafana.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Key Learning&lt;/strong&gt;: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Get hands-on experience with Prometheus and Grafana.&lt;/li&gt; &#xA;   &lt;li&gt;Learn to install and configure Prometheus on Kubernetes.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Day 3: Metrics and PromQL in Prometheus&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Concepts Covered&lt;/strong&gt;: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Introduction to PromQL and basic querying techniques.&lt;/li&gt; &#xA;   &lt;li&gt;Aggregation and functions in PromQL to analyze metrics data.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Key Learning&lt;/strong&gt;: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Master the Prometheus Query Language (PromQL) for querying and analyzing metrics.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Day 4: Instrumentation and Custom Metrics&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Concepts Covered&lt;/strong&gt;: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Instrumentation for adding monitoring capabilities to applications.&lt;/li&gt; &#xA;   &lt;li&gt;Understanding different types of metrics in Prometheus: Counter, Gauge, Histogram, and Summary.&lt;/li&gt; &#xA;   &lt;li&gt;Writing custom metrics in a Node.js application using the &lt;code&gt;prom-client&lt;/code&gt; library.&lt;/li&gt; &#xA;   &lt;li&gt;Dockerizing the application and deploying it on Kubernetes.&lt;/li&gt; &#xA;   &lt;li&gt;Setting up Alertmanager for alerting based on custom metrics.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Key Learning&lt;/strong&gt;: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Learn how to instrument applications to expose custom metrics.&lt;/li&gt; &#xA;   &lt;li&gt;Configure alerts in Alertmanager to monitor application performance.&lt;/li&gt; &#xA;   &lt;li&gt;Understand how to work with different types of metrics in Prometheus.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Day 5: Logging with EFK Stack&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Concepts Covered&lt;/strong&gt;: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Introduction to logging in distributed systems and Kubernetes.&lt;/li&gt; &#xA;   &lt;li&gt;Setting up the EFK stack (Elasticsearch, Fluentbit, Kibana) on Kubernetes.&lt;/li&gt; &#xA;   &lt;li&gt;Detailed setup and configuration for collecting and visualizing logs.&lt;/li&gt; &#xA;   &lt;li&gt;Cleaning up the Kubernetes cluster and resources.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Key Learning&lt;/strong&gt;: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Understand the importance of logging and how to set up&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Day 6: Distributed Tracing with Jaeger&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Concepts Covered&lt;/strong&gt;: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Introduction to Jaeger and its architecture for distributed tracing.&lt;/li&gt; &#xA;   &lt;li&gt;Setting up Jaeger in a Kubernetes cluster using Helm.&lt;/li&gt; &#xA;   &lt;li&gt;Instrumenting services using OpenTelemetry to enable tracing.&lt;/li&gt; &#xA;   &lt;li&gt;Viewing and analyzing traces in the Jaeger UI.&lt;/li&gt; &#xA;   &lt;li&gt;Cleaning up the environment after setting up Jaeger.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Key Learning&lt;/strong&gt;: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Gain insights into distributed tracing and how it helps in debugging and performance optimization.&lt;/li&gt; &#xA;   &lt;li&gt;Learn how to set up and configure Jaeger for tracing in a microservices architecture.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Day 7: OpenTelemetry â€“ Setting Up Unified Observability&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Concepts Covered&lt;/strong&gt;: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Introduction to OpenTelemetry, a unified framework for observability.&lt;/li&gt; &#xA;   &lt;li&gt;Understanding how OpenTelemetry integrates tracing, metrics, and logging.&lt;/li&gt; &#xA;   &lt;li&gt;Comparison of OpenTelemetry with prior observability tools like Jaeger, Prometheus&lt;/li&gt; &#xA;   &lt;li&gt;Supported programming languages and multi-language support in OpenTelemetry.&lt;/li&gt; &#xA;   &lt;li&gt;Step-by-step setup of OpenTelemetry in Kubernetes.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Key Learning&lt;/strong&gt;: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Learn how OpenTelemetry simplifies the process of collecting and exporting telemetry data.&lt;/li&gt; &#xA;   &lt;li&gt;Understand the benefits of a unified observability approach using OpenTelemetry.&lt;/li&gt; &#xA;   &lt;li&gt;Gain hands-on experience with setting up OpenTelemetry Collector, Prometheus, Jaeger, and Elasticsearch to monitor a Golang microservice application.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>pion/webrtc</title>
    <updated>2024-10-20T01:39:04Z</updated>
    <id>tag:github.com,2024-10-20:/pion/webrtc</id>
    <link href="https://github.com/pion/webrtc" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Pure Go implementation of the WebRTC API&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt; &lt;a href=&#34;https://pion.ly&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/pion/webrtc/master/.github/pion-gopher-webrtc.png&#34; alt=&#34;Pion WebRTC&#34; height=&#34;250px&#34;&gt;&lt;/a&gt; &lt;br&gt; Pion WebRTC &lt;br&gt; &lt;/h1&gt; &#xA;&lt;h4 align=&#34;center&#34;&gt;A pure Go implementation of the WebRTC API&lt;/h4&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://pion.ly&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/pion-webrtc-gray.svg?longCache=true&amp;amp;colorB=brightgreen&#34; alt=&#34;Pion WebRTC&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://sourcegraph.com/github.com/pion/webrtc?badge&#34;&gt;&lt;img src=&#34;https://sourcegraph.com/github.com/pion/webrtc/-/badge.svg?sanitize=true&#34; alt=&#34;Sourcegraph Widget&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pion.ly/slack&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/join-us%20on%20slack-gray.svg?longCache=true&amp;amp;logo=slack&amp;amp;colorB=brightgreen&#34; alt=&#34;Slack Widget&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/_pion?ref_src=twsrc%5Etfw&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/url.svg?label=Follow%20%40_pion&amp;amp;style=social&amp;amp;url=https%3A%2F%2Ftwitter.com%2F_pion&#34; alt=&#34;Twitter Widget&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/pion/awesome-pion&#34; alt=&#34;Awesome Pion&#34;&gt;&lt;img src=&#34;https://cdn.rawgit.com/sindresorhus/awesome/d7305f38d29fed78fa85652e3a63e154dd8e8829/media/badge.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;br&gt; &lt;img alt=&#34;GitHub Workflow Status&#34; src=&#34;https://img.shields.io/github/actions/workflow/status/pion/webrtc/test.yaml&#34;&gt; &lt;a href=&#34;https://pkg.go.dev/github.com/pion/webrtc/v4&#34;&gt;&lt;img src=&#34;https://pkg.go.dev/badge/github.com/pion/webrtc/v4.svg?sanitize=true&#34; alt=&#34;Go Reference&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/pion/webrtc&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/pion/webrtc/branch/master/graph/badge.svg?sanitize=true&#34; alt=&#34;Coverage Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/pion/webrtc/v4&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/pion/webrtc/v4&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/pion/webrtc/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-MIT-yellow.svg?sanitize=true&#34; alt=&#34;License: MIT&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;h3&gt;New Release&lt;/h3&gt; &#xA;&lt;p&gt;Pion WebRTC v4.0.0 has been released! See the &lt;a href=&#34;https://github.com/pion/webrtc/wiki/Release-WebRTC@v4.0.0&#34;&gt;release notes&lt;/a&gt; to learn about new features and breaking changes.&lt;/p&gt; &#xA;&lt;p&gt;If you aren&#39;t able to upgrade yet check the &lt;a href=&#34;https://github.com/pion/webrtc/tags&#34;&gt;tags&lt;/a&gt; for the latest &lt;code&gt;v3&lt;/code&gt; release.&lt;/p&gt; &#xA;&lt;p&gt;We would love your feedback! Please create GitHub issues or join &lt;a href=&#34;https://pion.ly/slack&#34;&gt;the Slack channel&lt;/a&gt; to follow development and speak with the maintainers.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Usage&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://blog.golang.org/using-go-modules&#34;&gt;Go Modules&lt;/a&gt; are mandatory for using Pion WebRTC. So make sure you set &lt;code&gt;export GO111MODULE=on&lt;/code&gt;, and explicitly specify &lt;code&gt;/v4&lt;/code&gt; (or an earlier version) when importing.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pion/webrtc/master/examples/README.md&#34;&gt;example applications&lt;/a&gt;&lt;/strong&gt; contains code samples of common things people build with Pion WebRTC.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/pion/example-webrtc-applications&#34;&gt;example-webrtc-applications&lt;/a&gt;&lt;/strong&gt; contains more full featured examples that use 3rd party libraries.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/pion/awesome-pion&#34;&gt;awesome-pion&lt;/a&gt;&lt;/strong&gt; contains projects that have used Pion, and serve as real world examples of usage.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/pion/webrtc/v4&#34;&gt;GoDoc&lt;/a&gt;&lt;/strong&gt; is an auto generated API reference. All our Public APIs are commented.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/pion/webrtc/wiki/FAQ&#34;&gt;FAQ&lt;/a&gt;&lt;/strong&gt; has answers to common questions. If you have a question not covered please ask in &lt;a href=&#34;https://pion.ly/slack&#34;&gt;Slack&lt;/a&gt; we are always looking to expand it.&lt;/p&gt; &#xA;&lt;p&gt;Now go build something awesome! Here are some &lt;strong&gt;ideas&lt;/strong&gt; to get your creative juices flowing:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Send a video file to multiple browser in real time for perfectly synchronized movie watching.&lt;/li&gt; &#xA; &lt;li&gt;Send a webcam on an embedded device to your browser with no additional server required!&lt;/li&gt; &#xA; &lt;li&gt;Securely send data between two servers, without using pub/sub.&lt;/li&gt; &#xA; &lt;li&gt;Record your webcam and do special effects server side.&lt;/li&gt; &#xA; &lt;li&gt;Build a conferencing application that processes audio/video and make decisions off of it.&lt;/li&gt; &#xA; &lt;li&gt;Remotely control a robots and stream its cameras in realtime.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Need Help?&lt;/h3&gt; &#xA;&lt;p&gt;Check out &lt;a href=&#34;https://webrtcforthecurious.com&#34;&gt;WebRTC for the Curious&lt;/a&gt;. A book about WebRTC in depth, not just about the APIs. Learn the full details of ICE, SCTP, DTLS, SRTP, and how they work together to make up the WebRTC stack. This is also a great resource if you are trying to debug. Learn the tools of the trade and how to approach WebRTC issues. This book is vendor agnostic and will not have any Pion specific information.&lt;/p&gt; &#xA;&lt;p&gt;Pion has an active community on &lt;a href=&#34;https://pion.ly/slack&#34;&gt;Slack&lt;/a&gt;. Please ask for help about anything, questions don&#39;t have to be Pion specific! Come share your interesting project you are working on. We are here to support you.&lt;/p&gt; &#xA;&lt;p&gt;One of the maintainers of Pion &lt;a href=&#34;https://github.com/sean-der&#34;&gt;Sean-Der&lt;/a&gt; is available to help. Schedule at &lt;a href=&#34;https://siobud.com/meeting&#34;&gt;siobud.com/meeting&lt;/a&gt; He is available to talk about Pion or general WebRTC questions, feel free to reach out about anything!&lt;/p&gt; &#xA;&lt;h3&gt;Features&lt;/h3&gt; &#xA;&lt;h4&gt;PeerConnection API&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Go implementation of &lt;a href=&#34;https://w3c.github.io/webrtc-pc/&#34;&gt;webrtc-pc&lt;/a&gt; and &lt;a href=&#34;https://www.w3.org/TR/webrtc-stats/&#34;&gt;webrtc-stats&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;DataChannels&lt;/li&gt; &#xA; &lt;li&gt;Send/Receive audio and video&lt;/li&gt; &#xA; &lt;li&gt;Renegotiation&lt;/li&gt; &#xA; &lt;li&gt;Plan-B and Unified Plan&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/pion/webrtc/v4#SettingEngine&#34;&gt;SettingEngine&lt;/a&gt; for Pion specific extensions&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Connectivity&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Full ICE Agent&lt;/li&gt; &#xA; &lt;li&gt;ICE Restart&lt;/li&gt; &#xA; &lt;li&gt;Trickle ICE&lt;/li&gt; &#xA; &lt;li&gt;STUN&lt;/li&gt; &#xA; &lt;li&gt;TURN (UDP, TCP, DTLS and TLS)&lt;/li&gt; &#xA; &lt;li&gt;mDNS candidates&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;DataChannels&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Ordered/Unordered&lt;/li&gt; &#xA; &lt;li&gt;Lossy/Lossless&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Media&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;API with direct RTP/RTCP access&lt;/li&gt; &#xA; &lt;li&gt;Opus, PCM, H264, VP8 and VP9 packetizer&lt;/li&gt; &#xA; &lt;li&gt;API also allows developer to pass their own packetizer&lt;/li&gt; &#xA; &lt;li&gt;IVF, Ogg, H264 and Matroska provided for easy sending and saving&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pion/mediadevices&#34;&gt;getUserMedia&lt;/a&gt; implementation (Requires Cgo)&lt;/li&gt; &#xA; &lt;li&gt;Easy integration with x264, libvpx, GStreamer and ffmpeg.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pion/webrtc/tree/master/examples/simulcast&#34;&gt;Simulcast&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pion/rtp/raw/master/codecs/vp9_packet.go#L138&#34;&gt;SVC&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pion/interceptor/pull/4&#34;&gt;NACK&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pion/interceptor/tree/master/pkg/report&#34;&gt;Sender/Receiver Reports&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pion/interceptor/tree/master/pkg/twcc&#34;&gt;Transport Wide Congestion Control Feedback&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pion/webrtc/tree/master/examples/bandwidth-estimation-from-disk&#34;&gt;Bandwidth Estimation&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Security&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 and TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA for DTLS v1.2&lt;/li&gt; &#xA; &lt;li&gt;SRTP_AEAD_AES_256_GCM and SRTP_AES128_CM_HMAC_SHA1_80 for SRTP&lt;/li&gt; &#xA; &lt;li&gt;Hardware acceleration available for GCM suites&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Pure Go&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;No Cgo usage&lt;/li&gt; &#xA; &lt;li&gt;Wide platform support &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Windows, macOS, Linux, FreeBSD&lt;/li&gt; &#xA;   &lt;li&gt;iOS, Android&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/pion/webrtc/wiki/WebAssembly-Development-and-Testing&#34;&gt;WASM&lt;/a&gt; see &lt;a href=&#34;https://raw.githubusercontent.com/pion/webrtc/master/examples/README.md#webassembly&#34;&gt;examples&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;386, amd64, arm, mips, ppc64&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Easy to build &lt;em&gt;Numbers generated on Intel(R) Core(TM) i5-2520M CPU @ 2.50GHz&lt;/em&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Time to build examples/play-from-disk&lt;/strong&gt; - 0.66s user 0.20s system 306% cpu 0.279 total&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Time to run entire test suite&lt;/strong&gt; - 25.60s user 9.40s system 45% cpu 1:16.69 total&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Tools to measure performance &lt;a href=&#34;https://github.com/pion/rtsp-bench&#34;&gt;provided&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Roadmap&lt;/h3&gt; &#xA;&lt;p&gt;The library is in active development, please refer to the &lt;a href=&#34;https://github.com/pion/webrtc/issues/9&#34;&gt;roadmap&lt;/a&gt; to track our major milestones. We also maintain a list of &lt;a href=&#34;https://github.com/pion/webrtc/wiki/Big-Ideas&#34;&gt;Big Ideas&lt;/a&gt; these are things we want to build but don&#39;t have a clear plan or the resources yet. If you are looking to get involved this is a great place to get started! We would also love to hear your ideas! Even if you can&#39;t implement it yourself, it could inspire others.&lt;/p&gt; &#xA;&lt;h3&gt;Sponsoring&lt;/h3&gt; &#xA;&lt;p&gt;Work on Pion&#39;s congestion control and bandwidth estimation was funded through the &lt;a href=&#34;https://nlnet.nl/useroperated/&#34;&gt;User-Operated Internet&lt;/a&gt; fund, a fund established by &lt;a href=&#34;https://nlnet.nl/&#34;&gt;NLnet&lt;/a&gt; made possible by financial support from the &lt;a href=&#34;https://pkt.cash/&#34;&gt;PKT Community&lt;/a&gt;/&lt;a href=&#34;https://pkt.cash/network-steward&#34;&gt;The Network Steward&lt;/a&gt; and stichting &lt;a href=&#34;https://technologycommons.org/&#34;&gt;Technology Commons Trust&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Community&lt;/h3&gt; &#xA;&lt;p&gt;Pion has an active community on the &lt;a href=&#34;https://pion.ly/slack&#34;&gt;Slack&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Follow the &lt;a href=&#34;https://twitter.com/_pion&#34;&gt;Pion Twitter&lt;/a&gt; for project updates and important WebRTC news.&lt;/p&gt; &#xA;&lt;p&gt;We are always looking to support &lt;strong&gt;your projects&lt;/strong&gt;. Please reach out if you have something to build! If you need commercial support or don&#39;t want to use public methods you can contact us at &lt;a href=&#34;mailto:team@pion.ly&#34;&gt;team@pion.ly&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Contributing&lt;/h3&gt; &#xA;&lt;p&gt;Check out the &lt;a href=&#34;https://github.com/pion/webrtc/wiki/Contributing&#34;&gt;contributing wiki&lt;/a&gt; to join the group of amazing people making this project possible&lt;/p&gt; &#xA;&lt;h3&gt;License&lt;/h3&gt; &#xA;&lt;p&gt;MIT License - see &lt;a href=&#34;https://raw.githubusercontent.com/pion/webrtc/master/LICENSE&#34;&gt;LICENSE&lt;/a&gt; for full text&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>prometheus/client_golang</title>
    <updated>2024-10-20T01:39:04Z</updated>
    <id>tag:github.com,2024-10-20:/prometheus/client_golang</id>
    <link href="https://github.com/prometheus/client_golang" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Prometheus instrumentation library for Go applications&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Prometheus Go client library&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/prometheus/client_golang/actions/workflows/ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/prometheus/client_golang/actions/workflows/go.yml/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/prometheus/client_golang&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/prometheus/client_golang&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pkg.go.dev/github.com/prometheus/client_golang&#34;&gt;&lt;img src=&#34;https://pkg.go.dev/badge/github.com/prometheus/client_golang.svg?sanitize=true&#34; alt=&#34;Go Reference&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://slack.cncf.io/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/join%20slack-%23prometheus--client_golang-brightgreen.svg?sanitize=true&#34; alt=&#34;Slack&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This is the &lt;a href=&#34;http://golang.org&#34;&gt;Go&lt;/a&gt; client library for &lt;a href=&#34;http://prometheus.io&#34;&gt;Prometheus&lt;/a&gt;. It has two separate parts, one for instrumenting application code, and one for creating clients that talk to the Prometheus HTTP API.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;This library requires Go1.21 or later.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;The library mandates the use of Go1.21 or subsequent versions. While it has demonstrated functionality with versions as old as Go 1.17, our commitment remains to offer support and rectifications for only the most recent three major releases.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Important note about releases and stability&lt;/h2&gt; &#xA;&lt;p&gt;This repository generally follows &lt;a href=&#34;https://semver.org/&#34;&gt;Semantic Versioning&lt;/a&gt;. However, the API client in &lt;code&gt;prometheus/client_golang/api/â€¦&lt;/code&gt; is still considered experimental. Breaking changes of the API client will &lt;em&gt;not&lt;/em&gt; trigger a new major release. The same is true for selected other new features explicitly marked as &lt;strong&gt;EXPERIMENTAL&lt;/strong&gt; in CHANGELOG.md.&lt;/p&gt; &#xA;&lt;p&gt;Features that require breaking changes in the stable parts of the repository are being batched up and tracked in the &lt;a href=&#34;https://github.com/prometheus/client_golang/milestone/2&#34;&gt;v2 milestone&lt;/a&gt;, but plans for further development of v2 at the moment.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;NOTE: The initial v2 attempt is in a &lt;a href=&#34;https://github.com/prometheus/client_golang/tree/dev-v2&#34;&gt;separate branch&lt;/a&gt;. We also started experimenting on a new &lt;code&gt;prometheus.V2.*&lt;/code&gt; APIs in &lt;a href=&#34;https://github.com/prometheus/client_golang/raw/main/prometheus/vnext.go#L23&#34;&gt;the 1.x&#39;s V2 struct&lt;/a&gt;. Help wanted!&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Instrumenting applications&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/prometheus/client_golang/prometheus&#34;&gt;&lt;img src=&#34;https://pkg.go.dev/badge/github.com/prometheus/client_golang/prometheus.svg?sanitize=true&#34; alt=&#34;Go Reference&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://github.com/prometheus/client_golang/tree/main/prometheus&#34;&gt;&lt;code&gt;prometheus&lt;/code&gt; directory&lt;/a&gt; contains the instrumentation library. See the &lt;a href=&#34;https://prometheus.io/docs/guides/go-application/&#34;&gt;guide&lt;/a&gt; on the Prometheus website to learn more about instrumenting applications.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://github.com/prometheus/client_golang/tree/main/examples&#34;&gt;&lt;code&gt;examples&lt;/code&gt; directory&lt;/a&gt; contains simple examples of instrumented code.&lt;/p&gt; &#xA;&lt;h2&gt;Client for the Prometheus HTTP API&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/prometheus/client_golang/api&#34;&gt;&lt;img src=&#34;https://pkg.go.dev/badge/github.com/prometheus/client_golang/api.svg?sanitize=true&#34; alt=&#34;Go Reference&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://github.com/prometheus/client_golang/tree/main/api/prometheus&#34;&gt;&lt;code&gt;api/prometheus&lt;/code&gt; directory&lt;/a&gt; contains the client for the &lt;a href=&#34;http://prometheus.io/docs/querying/api/&#34;&gt;Prometheus HTTP API&lt;/a&gt;. It allows you to write Go applications that query time series data from a Prometheus server. It is still in alpha stage.&lt;/p&gt; &#xA;&lt;h2&gt;Where is &lt;code&gt;model&lt;/code&gt;, &lt;code&gt;extraction&lt;/code&gt;, and &lt;code&gt;text&lt;/code&gt;?&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;model&lt;/code&gt; packages has been moved to &lt;a href=&#34;https://github.com/prometheus/common/tree/main/model&#34;&gt;&lt;code&gt;prometheus/common/model&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;extraction&lt;/code&gt; and &lt;code&gt;text&lt;/code&gt; packages are now contained in &lt;a href=&#34;https://github.com/prometheus/common/tree/main/expfmt&#34;&gt;&lt;code&gt;prometheus/common/expfmt&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing and community&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/prometheus/client_golang/main/CONTRIBUTING.md&#34;&gt;contributing guidelines&lt;/a&gt; and the &lt;a href=&#34;http://prometheus.io/community/&#34;&gt;Community section&lt;/a&gt; of the homepage.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;client_golang&lt;/code&gt; community is also present on the CNCF Slack &lt;code&gt;#prometheus-client_golang&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;For Maintainers: Release Process&lt;/h3&gt; &#xA;&lt;p&gt;To cut a minor version:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Create a new branch &lt;code&gt;release-&amp;lt;major&amp;gt;.&amp;lt;minor&amp;gt;&lt;/code&gt; on top of the &lt;code&gt;main&lt;/code&gt; commit you want to cut the version from and push it.&lt;/li&gt; &#xA; &lt;li&gt;Create a new branch on top of the release branch, e.g. &lt;code&gt;&amp;lt;yourname&amp;gt;/cut-&amp;lt;major&amp;gt;.&amp;lt;minor&amp;gt;.&amp;lt;patch&amp;gt;&lt;/code&gt;,&lt;/li&gt; &#xA; &lt;li&gt;Change the &lt;code&gt;VERSION&lt;/code&gt; file.&lt;/li&gt; &#xA; &lt;li&gt;Update &lt;code&gt;CHANGELOG&lt;/code&gt; (only user-impacting changes to mention).&lt;/li&gt; &#xA; &lt;li&gt;Create PR, and get it reviewed.&lt;/li&gt; &#xA; &lt;li&gt;Once merged, create a release with the &lt;code&gt;release-&amp;lt;major&amp;gt;.&amp;lt;minor&amp;gt;&lt;/code&gt; tag on GitHub with the &lt;code&gt;&amp;lt;version&amp;gt;&lt;/code&gt; title.&lt;/li&gt; &#xA; &lt;li&gt;Announce on the prometheus-announce mailing list, slack and Twitter.&lt;/li&gt; &#xA; &lt;li&gt;Merge the release branch back to the &lt;code&gt;main&lt;/code&gt; using the &#34;merge without squashing&#34; approach (!).&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;NOTE: In case of merge conflicts, you can checkout the release branch in a new branch, e.g. &lt;code&gt;&amp;lt;yourname&amp;gt;/resolve-conflicts&lt;/code&gt;, fix the merge problems there, and then do a PR into main from the new branch. In that way, you still get all the commits in the release branch back into &lt;code&gt;main&lt;/code&gt;, but leave the release branch alone.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;To cut the patch version:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Create a branch on top of the release branch you want to use.&lt;/li&gt; &#xA; &lt;li&gt;Cherry-pick the fixes from the &lt;code&gt;main&lt;/code&gt; branch (or add new commits) to fix critical bugs for that patch release.&lt;/li&gt; &#xA; &lt;li&gt;Follow steps 3-8 as above.&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
</feed>