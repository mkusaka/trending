<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-12-03T01:49:28Z</updated>
  <subtitle>Weekly Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>grpc-ecosystem/grpc-gateway</title>
    <updated>2023-12-03T01:49:28Z</updated>
    <id>tag:github.com,2023-12-03:/grpc-ecosystem/grpc-gateway</id>
    <link href="https://github.com/grpc-ecosystem/grpc-gateway" rel="alternate"></link>
    <summary type="html">&lt;p&gt;gRPC to JSON proxy generator following the gRPC HTTP spec&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h1&gt;gRPC-Gateway&lt;/h1&gt; &#xA; &lt;p&gt; gRPC to JSON proxy generator following the gRPC HTTP spec &lt;/p&gt; &#xA; &lt;a href=&#34;https://github.com/grpc-ecosystem/grpc-gateway/actions/workflows/main.yml&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/workflow/status/grpc-ecosystem/grpc-gateway/main?color=379c9c&amp;amp;label=build&amp;amp;logo=github&amp;amp;logoColor=ffffff&amp;amp;style=flat-square&#34;&gt;&lt;/a&gt; &#xA; &lt;a href=&#34;https://app.slack.com/client/T029RQSE6/CBATURP1D&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/slack-grpc--gateway-379c9c?logo=slack&amp;amp;logoColor=ffffff&amp;amp;style=flat-square&#34;&gt;&lt;/a&gt; &#xA; &lt;a href=&#34;https://github.com/grpc-ecosystem/grpc-gateway/raw/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/grpc-ecosystem/grpc-gateway?color=379c9c&amp;amp;style=flat-square&#34;&gt;&lt;/a&gt; &#xA; &lt;a href=&#34;https://github.com/grpc-ecosystem/grpc-gateway/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/grpc-ecosystem/grpc-gateway?color=379c9c&amp;amp;logoColor=ffffff&amp;amp;style=flat-square&#34;&gt;&lt;/a&gt; &#xA; &lt;a href=&#34;https://github.com/grpc-ecosystem/grpc-gateway/stargazers&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/grpc-ecosystem/grpc-gateway?color=379c9c&amp;amp;style=flat-square&#34;&gt;&lt;/a&gt; &#xA; &lt;a href=&#34;https://slsa.dev/images/gh-badge-level3.svg&#34;&gt;&lt;img src=&#34;https://slsa.dev/images/gh-badge-level3.svg?sanitize=true&#34;&gt;&lt;/a&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;About&lt;/h2&gt; &#xA;&lt;p&gt;The gRPC-Gateway is a plugin of the Google protocol buffers compiler &lt;a href=&#34;https://github.com/protocolbuffers/protobuf&#34;&gt;protoc&lt;/a&gt;. It reads protobuf service definitions and generates a reverse-proxy server which translates a RESTful HTTP API into gRPC. This server is generated according to the &lt;a href=&#34;https://github.com/googleapis/googleapis/raw/master/google/api/http.proto#L46&#34;&gt;&lt;code&gt;google.api.http&lt;/code&gt;&lt;/a&gt; annotations in your service definitions.&lt;/p&gt; &#xA;&lt;p&gt;This helps you provide your APIs in both gRPC and RESTful style at the same time.&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/grpc-ecosystem/grpc-gateway/main/docs/assets/images/architecture_introduction_diagram.svg?sanitize=true&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Docs&lt;/h2&gt; &#xA;&lt;p&gt;You can read our docs at:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://grpc-ecosystem.github.io/grpc-gateway/&#34;&gt;https://grpc-ecosystem.github.io/grpc-gateway/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Testimonials&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;We use the gRPC-Gateway to serve millions of API requests per day, and have been since 2018 and through all of that, we have never had any issues with it.&lt;/p&gt; &#xA; &lt;p&gt;&lt;em&gt;- William Mill, &lt;a href=&#34;http://adhocteam.us/&#34;&gt;Ad Hoc&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Background&lt;/h2&gt; &#xA;&lt;p&gt;gRPC is great -- it generates API clients and server stubs in many programming languages, it is fast, easy-to-use, bandwidth-efficient and its design is combat-proven by Google. However, you might still want to provide a traditional RESTful JSON API as well. Reasons can range from maintaining backward-compatibility, supporting languages or clients that are not well supported by gRPC, to simply maintaining the aesthetics and tooling involved with a RESTful JSON architecture.&lt;/p&gt; &#xA;&lt;p&gt;This project aims to provide that HTTP+JSON interface to your gRPC service. A small amount of configuration in your service to attach HTTP semantics is all that&#39;s needed to generate a reverse-proxy with this library.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Compile from source&lt;/h3&gt; &#xA;&lt;p&gt;The following instructions assume you are using &lt;a href=&#34;https://github.com/golang/go/wiki/Modules&#34;&gt;Go Modules&lt;/a&gt; for dependency management. Use a &lt;a href=&#34;https://github.com/golang/go/wiki/Modules#how-can-i-track-tool-dependencies-for-a-module&#34;&gt;tool dependency&lt;/a&gt; to track the versions of the following executable packages:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// +build tools&#xA;&#xA;package tools&#xA;&#xA;import (&#xA;    _ &#34;github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-grpc-gateway&#34;&#xA;    _ &#34;github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2&#34;&#xA;    _ &#34;google.golang.org/grpc/cmd/protoc-gen-go-grpc&#34;&#xA;    _ &#34;google.golang.org/protobuf/cmd/protoc-gen-go&#34;&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run &lt;code&gt;go mod tidy&lt;/code&gt; to resolve the versions. Install by running&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ go install \&#xA;    github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-grpc-gateway \&#xA;    github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2 \&#xA;    google.golang.org/protobuf/cmd/protoc-gen-go \&#xA;    google.golang.org/grpc/cmd/protoc-gen-go-grpc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will place four binaries in your &lt;code&gt;$GOBIN&lt;/code&gt;;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;protoc-gen-grpc-gateway&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;protoc-gen-openapiv2&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;protoc-gen-go&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;protoc-gen-go-grpc&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Make sure that your &lt;code&gt;$GOBIN&lt;/code&gt; is in your &lt;code&gt;$PATH&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Download the binaries&lt;/h3&gt; &#xA;&lt;p&gt;You may alternatively download the binaries from the &lt;a href=&#34;https://github.com/grpc-ecosystem/grpc-gateway/releases/latest&#34;&gt;GitHub releases page&lt;/a&gt;. We generate &lt;a href=&#34;https://raw.githubusercontent.com/grpc-ecosystem/grpc-gateway/main/slsa.dev&#34;&gt;SLSA3 signatures&lt;/a&gt; using the OpenSSF&#39;s &lt;a href=&#34;https://github.com/slsa-framework/slsa-github-generator&#34;&gt;slsa-framework/slsa-github-generator&lt;/a&gt; during the release process. To verify a release binary:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install the verification tool from &lt;a href=&#34;https://github.com/slsa-framework/slsa-verifier#installation&#34;&gt;slsa-framework/slsa-verifier#installation&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Download the provenance file &lt;code&gt;attestation.intoto.jsonl&lt;/code&gt; from the &lt;a href=&#34;https://github.com/grpc-ecosystem/grpc-gateway/releases/latest&#34;&gt;GitHub releases page&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Run the verifier:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;slsa-verifier -artifact-path &amp;lt;the-binary&amp;gt; -provenance attestation.intoto.jsonl -source github.com/grpc-ecosystem/grpc-gateway -tag &amp;lt;the-tag&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, see the section on remotely managed plugin versions below.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;1.Define your &lt;a href=&#34;https://grpc.io/docs/&#34;&gt;gRPC&lt;/a&gt; service using protocol buffers&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;your_service.proto&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-protobuf&#34;&gt; syntax = &#34;proto3&#34;;&#xA; package your.service.v1;&#xA; option go_package = &#34;github.com/yourorg/yourprotos/gen/go/your/service/v1&#34;;&#xA;&#xA; message StringMessage {&#xA;   string value = 1;&#xA; }&#xA;&#xA; service YourService {&#xA;   rpc Echo(StringMessage) returns (StringMessage) {}&#xA; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;2. Generate gRPC stubs&lt;/h3&gt; &#xA;&lt;p&gt;This step generates the gRPC stubs that you can use to implement the service and consume from clients:&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s an example &lt;code&gt;buf.gen.yaml&lt;/code&gt; you can use to generate the stubs with &lt;a href=&#34;https://github.com/bufbuild/buf&#34;&gt;buf&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;version: v1&#xA;plugins:&#xA;  - plugin: go&#xA;    out: gen/go&#xA;    opt:&#xA;      - paths=source_relative&#xA;  - plugin: go-grpc&#xA;    out: gen/go&#xA;    opt:&#xA;      - paths=source_relative&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With this file in place, you can generate your files using &lt;code&gt;buf generate&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;For a complete example of using &lt;code&gt;buf generate&lt;/code&gt; to generate protobuf stubs, see &lt;a href=&#34;https://github.com/johanbrandhorst/grpc-gateway-boilerplate&#34;&gt;the boilerplate repo&lt;/a&gt;. For more information on generating the stubs with buf, see &lt;a href=&#34;https://docs.buf.build/generate-usage&#34;&gt;the official documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;If you are using &lt;code&gt;protoc&lt;/code&gt; to generate stubs, here&#39;s an example of what a command might look like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;protoc -I . \&#xA;    --go_out ./gen/go/ --go_opt paths=source_relative \&#xA;    --go-grpc_out ./gen/go/ --go-grpc_opt paths=source_relative \&#xA;    your/service/v1/your_service.proto&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;3. Implement your service in gRPC as usual.&lt;/h3&gt; &#xA;&lt;h3&gt;4. Generate reverse-proxy using &lt;code&gt;protoc-gen-grpc-gateway&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;At this point, you have 3 options:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;no further modifications, use the default mapping to HTTP semantics (method, path, etc.) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;this will work on any &lt;code&gt;.proto&lt;/code&gt; file, but will not allow setting HTTP paths, request parameters or similar&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;additional &lt;code&gt;.proto&lt;/code&gt; modifications to use a custom mapping &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;relies on parameters in the &lt;code&gt;.proto&lt;/code&gt; file to set custom HTTP mappings&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;no &lt;code&gt;.proto&lt;/code&gt; modifications, but use an external configuration file &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;relies on an external configuration file to set custom HTTP mappings&lt;/li&gt; &#xA;   &lt;li&gt;mostly useful when the source proto file isn&#39;t under your control&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;1. Using the default mapping&lt;/h4&gt; &#xA;&lt;p&gt;This requires no additional modification to the &lt;code&gt;.proto&lt;/code&gt; file but does require enabling a specific option when executing the plugin. The &lt;code&gt;generate_unbound_methods&lt;/code&gt; should be enabled.&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s what a &lt;code&gt;buf.gen.yaml&lt;/code&gt; file might look like with this option enabled:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;version: v1&#xA;plugins:&#xA;  - plugin: go&#xA;    out: gen/go&#xA;    opt:&#xA;      - paths=source_relative&#xA;  - plugin: go-grpc&#xA;    out: gen/go&#xA;    opt:&#xA;      - paths=source_relative&#xA;  - plugin: grpc-gateway&#xA;    out: gen/go&#xA;    opt:&#xA;      - paths=source_relative&#xA;      - generate_unbound_methods=true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With &lt;code&gt;protoc&lt;/code&gt; (just the grpc-gateway stubs):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;protoc -I . --grpc-gateway_out ./gen/go \&#xA;    --grpc-gateway_opt paths=source_relative \&#xA;    --grpc-gateway_opt generate_unbound_methods=true \&#xA;    your/service/v1/your_service.proto&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;2. With custom annotations&lt;/h4&gt; &#xA;&lt;p&gt;Add a &lt;a href=&#34;https://github.com/googleapis/googleapis/raw/master/google/api/http.proto#L46&#34;&gt;&lt;code&gt;google.api.http&lt;/code&gt;&lt;/a&gt; annotation to your .proto file&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;your_service.proto&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt; syntax = &#34;proto3&#34;;&#xA; package your.service.v1;&#xA; option go_package = &#34;github.com/yourorg/yourprotos/gen/go/your/service/v1&#34;;&#xA;+&#xA;+import &#34;google/api/annotations.proto&#34;;&#xA;+&#xA; message StringMessage {&#xA;   string value = 1;&#xA; }&#xA;&#xA; service YourService {&#xA;-  rpc Echo(StringMessage) returns (StringMessage) {}&#xA;+  rpc Echo(StringMessage) returns (StringMessage) {&#xA;+    option (google.api.http) = {&#xA;+      post: &#34;/v1/example/echo&#34;&#xA;+      body: &#34;*&#34;&#xA;+    };&#xA;+  }&#xA; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;You will need to provide the required third party protobuf files to the protobuf compiler. If you are using &lt;a href=&#34;https://github.com/bufbuild/buf&#34;&gt;buf&lt;/a&gt;, this dependency can be added to the &lt;code&gt;deps&lt;/code&gt; array in your &lt;code&gt;buf.yaml&lt;/code&gt; under the name &lt;code&gt;buf.build/googleapis/googleapis&lt;/code&gt;:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;version: v1&#xA;name: buf.build/yourorg/myprotos&#xA;deps:&#xA;  - buf.build/googleapis/googleapis&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Always run &lt;code&gt;buf mod update&lt;/code&gt; after adding a dependency to your &lt;code&gt;buf.yaml&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/grpc-ecosystem/grpc-gateway/main/examples/internal/proto/examplepb/a_bit_of_everything.proto&#34;&gt;a_bit_of_everything.proto&lt;/a&gt; for examples of more annotations you can add to customize gateway behavior and generated OpenAPI output.&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s what a &lt;code&gt;buf.gen.yaml&lt;/code&gt; file might look like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;version: v1&#xA;plugins:&#xA;  - plugin: go&#xA;    out: gen/go&#xA;    opt:&#xA;      - paths=source_relative&#xA;  - plugin: go-grpc&#xA;    out: gen/go&#xA;    opt:&#xA;      - paths=source_relative&#xA;  - plugin: grpc-gateway&#xA;    out: gen/go&#xA;    opt:&#xA;      - paths=source_relative&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you are using &lt;code&gt;protoc&lt;/code&gt; to generate stubs, you need to ensure the required dependencies are available to the compiler at compile time. These can be found by manually cloning and copying the relevant files from the &lt;a href=&#34;https://github.com/googleapis/googleapis&#34;&gt;googleapis repository&lt;/a&gt;, and providing them to &lt;code&gt;protoc&lt;/code&gt; when running. The files you will need are:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;google/api/annotations.proto&#xA;google/api/field_behavior.proto&#xA;google/api/http.proto&#xA;google/api/httpbody.proto&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here&#39;s what a &lt;code&gt;protoc&lt;/code&gt; execution might look like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;protoc -I . --grpc-gateway_out ./gen/go \&#xA;    --grpc-gateway_opt paths=source_relative \&#xA;    your/service/v1/your_service.proto&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;3. External configuration&lt;/h4&gt; &#xA;&lt;p&gt;If you do not want to (or cannot) modify the proto file for use with gRPC-Gateway you can alternatively use an external &lt;a href=&#34;https://cloud.google.com/endpoints/docs/grpc/grpc-service-config&#34;&gt;gRPC Service Configuration&lt;/a&gt; file. &lt;a href=&#34;https://grpc-ecosystem.github.io/grpc-gateway/docs/mapping/grpc_api_configuration/&#34;&gt;Check our documentation&lt;/a&gt; for more information. This is best combined with the &lt;code&gt;standalone=true&lt;/code&gt; option to generate a file that can live in its own package, separate from the files generated by the source protobuf file.&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s what a &lt;code&gt;buf.gen.yaml&lt;/code&gt; file might look like with this option enabled:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;version: v1&#xA;plugins:&#xA;  - plugin: go&#xA;    out: gen/go&#xA;    opt:&#xA;      - paths=source_relative&#xA;  - plugin: go-grpc&#xA;    out: gen/go&#xA;    opt:&#xA;      - paths=source_relative&#xA;  - plugin: grpc-gateway&#xA;    out: gen/go&#xA;    opt:&#xA;      - paths=source_relative&#xA;      - grpc_api_configuration=path/to/config.yaml&#xA;      - standalone=true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With &lt;code&gt;protoc&lt;/code&gt; (just the grpc-gateway stubs):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;protoc -I . --grpc-gateway_out ./gen/go \&#xA;    --grpc-gateway_opt paths=source_relative \&#xA;    --grpc-gateway_opt grpc_api_configuration=path/to/config.yaml \&#xA;    --grpc-gateway_opt standalone=true \&#xA;    your/service/v1/your_service.proto&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;5. Write an entrypoint for the HTTP reverse-proxy server&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;  &#34;context&#34;&#xA;  &#34;flag&#34;&#xA;  &#34;net/http&#34;&#xA;&#xA;  &#34;github.com/grpc-ecosystem/grpc-gateway/v2/runtime&#34;&#xA;  &#34;google.golang.org/grpc&#34;&#xA;  &#34;google.golang.org/grpc/credentials/insecure&#34;&#xA;  &#34;google.golang.org/grpc/grpclog&#34;&#xA;&#xA;  gw &#34;github.com/yourorg/yourrepo/proto/gen/go/your/service/v1/your_service&#34;  // Update&#xA;)&#xA;&#xA;var (&#xA;  // command-line options:&#xA;  // gRPC server endpoint&#xA;  grpcServerEndpoint = flag.String(&#34;grpc-server-endpoint&#34;,  &#34;localhost:9090&#34;, &#34;gRPC server endpoint&#34;)&#xA;)&#xA;&#xA;func run() error {&#xA;  ctx := context.Background()&#xA;  ctx, cancel := context.WithCancel(ctx)&#xA;  defer cancel()&#xA;&#xA;  // Register gRPC server endpoint&#xA;  // Note: Make sure the gRPC server is running properly and accessible&#xA;  mux := runtime.NewServeMux()&#xA;  opts := []grpc.DialOption{grpc.WithTransportCredentials(insecure.NewCredentials())}&#xA;  err := gw.RegisterYourServiceHandlerFromEndpoint(ctx, mux,  *grpcServerEndpoint, opts)&#xA;  if err != nil {&#xA;    return err&#xA;  }&#xA;&#xA;  // Start HTTP server (and proxy calls to gRPC server endpoint)&#xA;  return http.ListenAndServe(&#34;:8081&#34;, mux)&#xA;}&#xA;&#xA;func main() {&#xA;  flag.Parse()&#xA;&#xA;  if err := run(); err != nil {&#xA;    grpclog.Fatal(err)&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;6. (Optional) Generate OpenAPI definitions using &lt;code&gt;protoc-gen-openapiv2&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Here&#39;s what a &lt;code&gt;buf.gen.yaml&lt;/code&gt; file might look like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;version: v1&#xA;plugins:&#xA;  - plugin: go&#xA;    out: gen/go&#xA;    opt:&#xA;      - paths=source_relative&#xA;  - plugin: go-grpc&#xA;    out: gen/go&#xA;    opt:&#xA;      - paths=source_relative&#xA;  - plugin: grpc-gateway&#xA;    out: gen/go&#xA;    opt:&#xA;      - paths=source_relative&#xA;  - plugin: openapiv2&#xA;    out: gen/openapiv2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To use the custom protobuf annotations supported by &lt;code&gt;protoc-gen-openapiv2&lt;/code&gt;, we need another dependency added to our protobuf generation step. If you are using &lt;code&gt;buf&lt;/code&gt;, you can add the &lt;code&gt;buf.build/grpc-ecosystem/grpc-gateway&lt;/code&gt; dependency to your &lt;code&gt;deps&lt;/code&gt; array:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;version: v1&#xA;name: buf.build/yourorg/myprotos&#xA;deps:&#xA;  - buf.build/googleapis/googleapis&#xA;  - buf.build/grpc-ecosystem/grpc-gateway&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With &lt;code&gt;protoc&lt;/code&gt; (just the swagger file):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;protoc -I . --openapiv2_out ./gen/openapiv2 \&#xA;    your/service/v1/your_service.proto&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you are using &lt;code&gt;protoc&lt;/code&gt; to generate stubs, you will need to copy the protobuf files from the &lt;code&gt;protoc-gen-openapiv2/options&lt;/code&gt; directory of this repository, and providing them to &lt;code&gt;protoc&lt;/code&gt; when running.&lt;/p&gt; &#xA;&lt;p&gt;Note that this plugin also supports generating OpenAPI definitions for unannotated methods; use the &lt;code&gt;generate_unbound_methods&lt;/code&gt; option to enable this.&lt;/p&gt; &#xA;&lt;p&gt;It is possible with the HTTP mapping for a gRPC service method to create duplicate mappings with the only difference being constraints on the path parameter.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;/v1/{name=projects/*}&lt;/code&gt; and &lt;code&gt;/v1/{name=organizations/*}&lt;/code&gt; both become &lt;code&gt;/v1/{name}&lt;/code&gt;. When this occurs the plugin will rename the path parameter with a &#34;_1&#34; (or &#34;_2&#34; etc) suffix to differentiate the different operations. So in the above example, the 2nd path would become &lt;code&gt;/v1/{name_1=organizations/*}&lt;/code&gt;. This can also cause OpenAPI clients to URL encode the &#34;/&#34; that is part of the path parameter as that is what OpenAPI defines in the specification. To allow gRPC gateway to accept the URL encoded slash and still route the request, use the UnescapingModeAllCharacters or UnescapingModeLegacy (which is the default currently though may change in future versions). See &lt;a href=&#34;https://grpc-ecosystem.github.io/grpc-gateway/docs/mapping/customizing_your_gateway/&#34;&gt;Customizing Your Gateway&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h2&gt;Usage with remote plugins&lt;/h2&gt; &#xA;&lt;p&gt;As an alternative to all of the above, you can use &lt;code&gt;buf&lt;/code&gt; with &lt;a href=&#34;https://docs.buf.build/configuration/v1/buf-gen-yaml#name-or-remote&#34;&gt;remote plugins&lt;/a&gt; to manage plugin versions and generation. An example &lt;code&gt;buf.gen.yaml&lt;/code&gt; using remote plugin generation looks like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;version: v1&#xA;plugins:&#xA;  - plugin: buf.build/protocolbuffers/go:v1.31.0&#xA;    out: gen/go&#xA;    opt:&#xA;      - paths=source_relative&#xA;  - plugin: buf.build/grpc/go:v1.3.0&#xA;    out: gen/go&#xA;    opt:&#xA;      - paths=source_relative&#xA;  - plugin: buf.build/grpc-ecosystem/gateway:v2.16.2&#xA;    out: gen/go&#xA;    opt:&#xA;      - paths=source_relative&#xA;  - plugin: buf.build/grpc-ecosystem/openapiv2:v2.16.2&#xA;    out: gen/openapiv2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This requires no local installation of any plugins. Be careful to use the same version of the generator as the runtime library, i.e. if using &lt;code&gt;v2.16.2&lt;/code&gt;, run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ go get github.com/grpc-ecosystem/grpc-gateway/v2@v2.16.2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To get the same version of the runtime in your &lt;code&gt;go.mod&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Note that usage of remote plugins is incompatible with usage of external configuration files like &lt;a href=&#34;https://grpc-ecosystem.github.io/grpc-gateway/docs/mapping/grpc_api_configuration/#using-an-external-configuration-file&#34;&gt;grpc_api_configuration&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Video intro&lt;/h2&gt; &#xA;&lt;p&gt;This GopherCon UK 2019 presentation from our maintainer &lt;a href=&#34;https://github.com/johanbrandhorst&#34;&gt;@JohanBrandhorst&lt;/a&gt; provides a good intro to using the gRPC-Gateway. It uses the following boilerplate repo as a base: &lt;a href=&#34;https://github.com/johanbrandhorst/grpc-gateway-boilerplate&#34;&gt;https://github.com/johanbrandhorst/grpc-gateway-boilerplate&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a href=&#34;https://www.youtube.com/watch?v=Pq1paKC-fXk&#34;&gt; &lt;img src=&#34;https://img.youtube.com/vi/Pq1paKC-fXk/0.jpg&#34;&gt; &lt;/a&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Parameters and flags&lt;/h2&gt; &#xA;&lt;p&gt;When using &lt;code&gt;buf&lt;/code&gt; to generate stubs, flags and parameters are passed through the &lt;code&gt;opt&lt;/code&gt; field in your &lt;code&gt;buf.gen.yaml&lt;/code&gt; file, for example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;version: v1&#xA;plugins:&#xA;  - plugin: grpc-gateway&#xA;    out: gen/go&#xA;    opt:&#xA;      - paths=source_relative&#xA;      - grpc_api_configuration=path/to/config.yaml&#xA;      - standalone=true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;During code generation with &lt;code&gt;protoc&lt;/code&gt;, flags to gRPC-Gateway tools must be passed through &lt;code&gt;protoc&lt;/code&gt; using one of 2 patterns:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;as part of the &lt;code&gt;--&amp;lt;tool_suffix&amp;gt;_out&lt;/code&gt; &lt;code&gt;protoc&lt;/code&gt; parameter: &lt;code&gt;--&amp;lt;tool_suffix&amp;gt;_out=&amp;lt;flags&amp;gt;:&amp;lt;path&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;--grpc-gateway_out=repeated_path_param_separator=ssv:.&#xA;--openapiv2_out=repeated_path_param_separator=ssv:.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;using additional &lt;code&gt;--&amp;lt;tool_suffix&amp;gt;_opt&lt;/code&gt; parameters: &lt;code&gt;--&amp;lt;tool_suffix&amp;gt;_opt=&amp;lt;flag&amp;gt;[,&amp;lt;flag&amp;gt;]*&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;--grpc-gateway_opt repeated_path_param_separator=ssv&#xA;--openapiv2_opt repeated_path_param_separator=ssv&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;More examples&lt;/h2&gt; &#xA;&lt;p&gt;More examples are available under the &lt;code&gt;examples&lt;/code&gt; directory.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;proto/examplepb/echo_service.proto&lt;/code&gt;, &lt;code&gt;proto/examplepb/a_bit_of_everything.proto&lt;/code&gt;, &lt;code&gt;proto/examplepb/unannotated_echo_service.proto&lt;/code&gt;: service definition &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;proto/examplepb/echo_service.pb.go&lt;/code&gt;, &lt;code&gt;proto/examplepb/a_bit_of_everything.pb.go&lt;/code&gt;, &lt;code&gt;proto/examplepb/unannotated_echo_service.pb.go&lt;/code&gt;: [generated] stub of the service&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;proto/examplepb/echo_service.pb.gw.go&lt;/code&gt;, &lt;code&gt;proto/examplepb/a_bit_of_everything.pb.gw.go&lt;/code&gt;, &lt;code&gt;proto/examplepb/uannotated_echo_service.pb.gw.go&lt;/code&gt;: [generated] reverse proxy for the service&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;proto/examplepb/unannotated_echo_service.yaml&lt;/code&gt;: gRPC API Configuration for &lt;code&gt;unannotated_echo_service.proto&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;server/main.go&lt;/code&gt;: service implementation&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;main.go&lt;/code&gt;: entrypoint of the generated reverse proxy&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To use the same port for custom HTTP handlers (e.g. serving &lt;code&gt;swagger.json&lt;/code&gt;), gRPC-Gateway, and a gRPC server, see &lt;a href=&#34;https://github.com/philips/grpc-gateway-example/raw/master/cmd/serve.go&#34;&gt;this example by CoreOS&lt;/a&gt; (and its accompanying &lt;a href=&#34;https://web.archive.org/web/20201112010739/https://coreos.com/blog/grpc-protobufs-swagger.html&#34;&gt;blog post&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/mynalabsai/grpc_gateway_media_example&#34;&gt;This example by neiro.ai&lt;/a&gt; (and its accompanying &lt;a href=&#34;https://medium.com/neiro-ai/grpc-gateway-for-media-api-by-neiro-9033caab12c8&#34;&gt;blog post&lt;/a&gt;) shows how mediafiles using &lt;code&gt;multipart/form-data&lt;/code&gt; can be integrated into rpc messages using a middleware.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;h3&gt;Supported&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Generating JSON API handlers.&lt;/li&gt; &#xA; &lt;li&gt;Method parameters in the request body.&lt;/li&gt; &#xA; &lt;li&gt;Method parameters in the request path.&lt;/li&gt; &#xA; &lt;li&gt;Method parameters in the query string.&lt;/li&gt; &#xA; &lt;li&gt;Enum fields in the path parameter (including repeated enum fields).&lt;/li&gt; &#xA; &lt;li&gt;Mapping streaming APIs to newline-delimited JSON streams.&lt;/li&gt; &#xA; &lt;li&gt;Mapping HTTP headers with &lt;code&gt;Grpc-Metadata-&lt;/code&gt; prefix to gRPC metadata (prefixed with &lt;code&gt;grpcgateway-&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Optionally emitting API definitions for &lt;a href=&#34;https://swagger.io/docs/specification/2-0/basic-structure/&#34;&gt;OpenAPI (Swagger) v2&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Setting &lt;a href=&#34;https://github.com/grpc/grpc/raw/master/doc/PROTOCOL-HTTP2.md#requests&#34;&gt;gRPC timeouts&lt;/a&gt; through inbound HTTP &lt;code&gt;Grpc-Timeout&lt;/code&gt; header.&lt;/li&gt; &#xA; &lt;li&gt;Partial support for &lt;a href=&#34;https://cloud.google.com/endpoints/docs/grpc/grpc-service-config&#34;&gt;gRPC API Configuration&lt;/a&gt; files as an alternative to annotation.&lt;/li&gt; &#xA; &lt;li&gt;Automatically translating PATCH requests into Field Mask gRPC requests. See &lt;a href=&#34;https://grpc-ecosystem.github.io/grpc-gateway/docs/mapping/patch_feature/&#34;&gt;the docs&lt;/a&gt; for more information.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;No plan to support&lt;/h3&gt; &#xA;&lt;p&gt;But patches are welcome.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Method parameters in HTTP headers.&lt;/li&gt; &#xA; &lt;li&gt;Handling trailer metadata.&lt;/li&gt; &#xA; &lt;li&gt;Encoding request/response body in XML.&lt;/li&gt; &#xA; &lt;li&gt;True bi-directional streaming.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Mapping gRPC to HTTP&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/grpc-ecosystem/grpc-gateway/raw/main/runtime/errors.go#L15&#34;&gt;How gRPC error codes map to HTTP status codes in the response&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;HTTP request source IP is added as &lt;code&gt;X-Forwarded-For&lt;/code&gt; gRPC request header.&lt;/li&gt; &#xA; &lt;li&gt;HTTP request host is added as &lt;code&gt;X-Forwarded-Host&lt;/code&gt; gRPC request header.&lt;/li&gt; &#xA; &lt;li&gt;HTTP &lt;code&gt;Authorization&lt;/code&gt; header is added as &lt;code&gt;authorization&lt;/code&gt; gRPC request header.&lt;/li&gt; &#xA; &lt;li&gt;Remaining Permanent HTTP header keys (as specified by the IANA &lt;a href=&#34;http://www.iana.org/assignments/message-headers/message-headers.xhtml&#34;&gt;here&lt;/a&gt;) are prefixed with &lt;code&gt;grpcgateway-&lt;/code&gt; and added with their values to gRPC request header.&lt;/li&gt; &#xA; &lt;li&gt;HTTP headers that start with &#39;Grpc-Metadata-&#39; are mapped to gRPC metadata (prefixed with &lt;code&gt;grpcgateway-&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;While configurable, the default {un,}marshaling uses &lt;a href=&#34;https://pkg.go.dev/google.golang.org/protobuf/encoding/protojson&#34;&gt;protojson&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;The path template used to map gRPC service methods to HTTP endpoints supports the &lt;a href=&#34;https://github.com/googleapis/googleapis/raw/master/google/api/http.proto&#34;&gt;google.api.http&lt;/a&gt; path template syntax. For example, &lt;code&gt;/api/v1/{name=projects/*/topics/*}&lt;/code&gt; or &lt;code&gt;/prefix/{path=organizations/**}&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contribution&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;http://github.com/grpc-ecosystem/grpc-gateway/blob/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;gRPC-Gateway is licensed under the BSD 3-Clause License. See &lt;a href=&#34;https://github.com/grpc-ecosystem/grpc-gateway/raw/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt; for more details.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>riverqueue/river</title>
    <updated>2023-12-03T01:49:28Z</updated>
    <id>tag:github.com,2023-12-03:/riverqueue/river</id>
    <link href="https://github.com/riverqueue/river" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Fast and reliable background jobs in Go&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;River &lt;a href=&#34;https://github.com/riverqueue/river/actions&#34;&gt;&lt;img src=&#34;https://github.com/riverqueue/river/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pkg.go.dev/github.com/riverqueue/river&#34;&gt;&lt;img src=&#34;https://pkg.go.dev/badge/github.com/riverqueue/river.svg?sanitize=true&#34; alt=&#34;Go Reference&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;River is a robust high-performance job processing system for Go and Postgres.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://riverqueue.com&#34;&gt;homepage&lt;/a&gt;, &lt;a href=&#34;https://riverqueue.com/docs&#34;&gt;docs&lt;/a&gt;, and &lt;a href=&#34;https://pkg.go.dev/github.com/riverqueue/river&#34;&gt;godoc&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Being built for Postgres, River encourages the use of the same database for application data and job queue. By enqueueing jobs transactionally along with other database changes, whole classes of distributed systems problems are avoided. Jobs are guaranteed to be enqueued if their transaction commits, are removed if their transaction rolls back, and aren&#39;t visible for work &lt;em&gt;until&lt;/em&gt; commit. See &lt;a href=&#34;https://riverqueue.com/docs/transactional-enqueueing&#34;&gt;transactional enqueueing&lt;/a&gt; for more background on this philosophy.&lt;/p&gt; &#xA;&lt;h2&gt;Job args and workers&lt;/h2&gt; &#xA;&lt;p&gt;Jobs are defined in struct pairs, with an implementation of &lt;a href=&#34;https://pkg.go.dev/github.com/riverqueue/river#JobArgs&#34;&gt;&lt;code&gt;JobArgs&lt;/code&gt;&lt;/a&gt; and one of &lt;a href=&#34;https://pkg.go.dev/github.com/riverqueue/river#Worker&#34;&gt;&lt;code&gt;Worker&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Job args contain &lt;code&gt;json&lt;/code&gt; annotations and define how jobs are serialized to and from the database, along with a &#34;kind&#34;, a stable string that uniquely identifies the job.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type SortArgs struct {&#xA;    // Strings is a slice of strings to sort.&#xA;    Strings []string `json:&#34;strings&#34;`&#xA;}&#xA;&#xA;func (SortArgs) Kind() string { return &#34;sort&#34; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Workers expose a &lt;code&gt;Work&lt;/code&gt; function that dictates how jobs run.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type SortWorker struct {&#xA;    // An embedded WorkerDefaults sets up default methods to fulfill the rest of&#xA;    // the Worker interface:&#xA;    river.WorkerDefaults[SortArgs]&#xA;}&#xA;&#xA;func (w *SortWorker) Work(ctx context.Context, job *river.Job[SortArgs]) error {&#xA;    sort.Strings(job.Args.Strings)&#xA;    fmt.Printf(&#34;Sorted strings: %+v\n&#34;, job.Args.Strings)&#xA;    return nil&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Registering workers&lt;/h2&gt; &#xA;&lt;p&gt;Jobs are uniquely identified by their &#34;kind&#34; string. Workers are registered on start up so that River knows how to assign jobs to workers:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;workers := river.NewWorkers()&#xA;// AddWorker panics if the worker is already registered or invalid:&#xA;river.AddWorker(workers, &amp;amp;SortWorker{})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Starting a client&lt;/h2&gt; &#xA;&lt;p&gt;A River &lt;a href=&#34;https://pkg.go.dev/github.com/riverqueue/river#Client&#34;&gt;&lt;code&gt;Client&lt;/code&gt;&lt;/a&gt; provides an interface for job insertion and manages job processing and &lt;a href=&#34;https://riverqueue.com/docs/maintenance-services&#34;&gt;maintenance services&lt;/a&gt;. A client&#39;s created with a database pool, &lt;a href=&#34;https://riverqueue.com/docs/database-drivers&#34;&gt;driver&lt;/a&gt;, and config struct containing a &lt;code&gt;Workers&lt;/code&gt; bundle and other settings. Here&#39;s a client &lt;code&gt;Client&lt;/code&gt; working one queue (&lt;code&gt;&#34;default&#34;&lt;/code&gt;) with up to 100 worker goroutines at a time:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;riverClient, err := river.NewClient(riverpgxv5.New(dbPool), &amp;amp;river.Config{&#xA;    Queues: map[string]river.QueueConfig{&#xA;        river.DefaultQueue: {MaxWorkers: 100},&#xA;    },&#xA;    Workers: workers,&#xA;})&#xA;&#xA;if err != nil {&#xA;    panic(err)&#xA;}&#xA;&#xA;// Run the client inline. All executed jobs will inherit from ctx:&#xA;if err := riverClient.Start(ctx); err != nil {&#xA;    panic(err)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Stopping&lt;/h3&gt; &#xA;&lt;p&gt;The client should also be stopped on program shutdown:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Stop fetching new work and wait for active jobs to finish.&#xA;if err := riverClient.Stop(ctx); err != nil {&#xA;    panic(err)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There are some complexities around ensuring clients stop cleanly, but also in a timely manner. See &lt;a href=&#34;https://riverqueue.com/docs/graceful-shutdown&#34;&gt;graceful shutdown&lt;/a&gt; for more details on River&#39;s stop modes.&lt;/p&gt; &#xA;&lt;h2&gt;Inserting jobs&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/riverqueue/river#Client.InsertTx&#34;&gt;&lt;code&gt;Client.InsertTx&lt;/code&gt;&lt;/a&gt; is used in conjunction with an instance of job args to insert a job to work on a transaction:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;_, err = riverClient.InsertTx(ctx, tx, SortArgs{&#xA;    Strings: []string{&#xA;        &#34;whale&#34;, &#34;tiger&#34;, &#34;bear&#34;,&#xA;    },&#xA;}, nil)&#xA;&#xA;if err != nil {&#xA;    panic(err)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://pkg.go.dev/github.com/riverqueue/river#example-package-InsertAndWork&#34;&gt;&lt;code&gt;InsertAndWork&lt;/code&gt; example&lt;/a&gt; for complete code.&lt;/p&gt; &#xA;&lt;h2&gt;Other features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://riverqueue.com/docs/batch-job-insertion&#34;&gt;Batch job insertion&lt;/a&gt; for efficiently inserting many jobs at once using Postgres &lt;code&gt;COPY FROM&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://riverqueue.com/docs/cancelling-jobs&#34;&gt;Cancelling jobs&lt;/a&gt; from inside a work function.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://riverqueue.com/docs/error-handling&#34;&gt;Error and panic handling&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://riverqueue.com/docs/periodic-jobs&#34;&gt;Periodic and cron jobs&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://riverqueue.com/docs/scheduled-jobs&#34;&gt;Scheduled jobs&lt;/a&gt; that run automatically at their scheduled time in the future.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://riverqueue.com/docs/snoozing-jobs&#34;&gt;Snoozing jobs&lt;/a&gt; from inside a work function.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://riverqueue.com/docs/subscriptions&#34;&gt;Subscriptions&lt;/a&gt; to queue activity and statistics, providing easy hooks for telemetry like logging and metrics.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://riverqueue.com/docs/transactional-job-completion&#34;&gt;Transactional job completion&lt;/a&gt; to guarantee job completion commits with other changes in a transaction.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://riverqueue.com/docs/unique-jobs&#34;&gt;Unique jobs&lt;/a&gt; by args, period, queue, and state.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://riverqueue.com/docs/work-functions&#34;&gt;Work functions&lt;/a&gt; for simplified worker implementation.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/riverqueue/river/raw/master/docs/development.md&#34;&gt;developing River&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Thank you&lt;/h2&gt; &#xA;&lt;p&gt;River was in large part inspired by our experiences with other background job libaries over the years, most notably:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sorentwo/oban&#34;&gt;Oban&lt;/a&gt; in Elixir&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/que-rb/que&#34;&gt;que&lt;/a&gt;, &lt;a href=&#34;https://github.com/sidekiq/sidekiq&#34;&gt;sidekiq&lt;/a&gt;, &lt;a href=&#34;https://github.com/collectiveidea/delayed_job&#34;&gt;delayed_job&lt;/a&gt;, and &lt;a href=&#34;https://github.com/bensheldon/good_job&#34;&gt;GoodJob&lt;/a&gt; in Ruby&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.hangfire.io/&#34;&gt;Hangfire&lt;/a&gt; in .NET&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Thank you for driving the software ecosystem forward.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>prometheus/blackbox_exporter</title>
    <updated>2023-12-03T01:49:28Z</updated>
    <id>tag:github.com,2023-12-03:/prometheus/blackbox_exporter</id>
    <link href="https://github.com/prometheus/blackbox_exporter" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Blackbox prober exporter&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Blackbox exporter &lt;a href=&#34;https://travis-ci.org/prometheus/blackbox_exporter&#34;&gt;&lt;img src=&#34;https://travis-ci.org/prometheus/blackbox_exporter.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://circleci.com/gh/prometheus/blackbox_exporter&#34;&gt;&lt;img src=&#34;https://circleci.com/gh/prometheus/blackbox_exporter/tree/master.svg?style=shield&#34; alt=&#34;CircleCI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://quay.io/repository/prometheus/blackbox-exporter&#34;&gt;&lt;img src=&#34;https://quay.io/repository/prometheus/blackbox-exporter/status&#34; alt=&#34;Docker Repository on Quay&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/prom/blackbox-exporter/&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/pulls/prom/blackbox-exporter.svg?maxAge=604800&#34; alt=&#34;Docker Pulls&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The blackbox exporter allows blackbox probing of endpoints over HTTP, HTTPS, DNS, TCP, ICMP and gRPC.&lt;/p&gt; &#xA;&lt;h2&gt;Running this software&lt;/h2&gt; &#xA;&lt;h3&gt;From binaries&lt;/h3&gt; &#xA;&lt;p&gt;Download the most suitable binary from &lt;a href=&#34;https://github.com/prometheus/blackbox_exporter/releases&#34;&gt;the releases tab&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Then:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./blackbox_exporter &amp;lt;flags&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using the docker image&lt;/h3&gt; &#xA;&lt;p&gt;&lt;em&gt;Note: You may want to &lt;a href=&#34;https://docs.docker.com/v17.09/engine/userguide/networking/default_network/ipv6/&#34;&gt;enable ipv6 in your docker configuration&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run --rm \&#xA;  -p 9115/tcp \&#xA;  --name blackbox_exporter \&#xA;  -v $(pwd):/config \&#xA;  quay.io/prometheus/blackbox-exporter:latest --config.file=/config/blackbox.yml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Checking the results&lt;/h3&gt; &#xA;&lt;p&gt;Visiting &lt;a href=&#34;http://localhost:9115/probe?target=google.com&amp;amp;module=http_2xx&#34;&gt;http://localhost:9115/probe?target=google.com&amp;amp;module=http_2xx&lt;/a&gt; will return metrics for a HTTP probe against google.com. The &lt;code&gt;probe_success&lt;/code&gt; metric indicates if the probe succeeded. Adding a &lt;code&gt;debug=true&lt;/code&gt; parameter will return debug information for that probe.&lt;/p&gt; &#xA;&lt;p&gt;Metrics concerning the operation of the exporter itself are available at the endpoint &lt;a href=&#34;http://localhost:9115/metrics&#34;&gt;http://localhost:9115/metrics&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;TLS and basic authentication&lt;/h3&gt; &#xA;&lt;p&gt;The Blackbox Exporter supports TLS and basic authentication. This enables better control of the various HTTP endpoints.&lt;/p&gt; &#xA;&lt;p&gt;To use TLS and/or basic authentication, you need to pass a configuration file using the &lt;code&gt;--web.config.file&lt;/code&gt; parameter. The format of the file is described &lt;a href=&#34;https://github.com/prometheus/exporter-toolkit/raw/master/docs/web-configuration.md&#34;&gt;in the exporter-toolkit repository&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Note that the TLS and basic authentication settings affect all HTTP endpoints: /metrics for scraping, /probe for probing, and the web UI.&lt;/p&gt; &#xA;&lt;h2&gt;Building the software&lt;/h2&gt; &#xA;&lt;h3&gt;Local Build&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Building with Docker&lt;/h3&gt; &#xA;&lt;p&gt;After a successful local build:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker build -t blackbox_exporter .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://raw.githubusercontent.com/prometheus/blackbox_exporter/master/CONFIGURATION.md&#34;&gt;Configuration&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Blackbox exporter is configured via a &lt;a href=&#34;https://raw.githubusercontent.com/prometheus/blackbox_exporter/master/CONFIGURATION.md&#34;&gt;configuration file&lt;/a&gt; and command-line flags (such as what configuration file to load, what port to listen on, and the logging format and level).&lt;/p&gt; &#xA;&lt;p&gt;Blackbox exporter can reload its configuration file at runtime. If the new configuration is not well-formed, the changes will not be applied. A configuration reload is triggered by sending a &lt;code&gt;SIGHUP&lt;/code&gt; to the Blackbox exporter process or by sending a HTTP POST request to the &lt;code&gt;/-/reload&lt;/code&gt; endpoint.&lt;/p&gt; &#xA;&lt;p&gt;To view all available command-line flags, run &lt;code&gt;./blackbox_exporter -h&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To specify which &lt;a href=&#34;https://raw.githubusercontent.com/prometheus/blackbox_exporter/master/CONFIGURATION.md&#34;&gt;configuration file&lt;/a&gt; to load, use the &lt;code&gt;--config.file&lt;/code&gt; flag.&lt;/p&gt; &#xA;&lt;p&gt;Additionally, an &lt;a href=&#34;https://raw.githubusercontent.com/prometheus/blackbox_exporter/master/example.yml&#34;&gt;example configuration&lt;/a&gt; is also available.&lt;/p&gt; &#xA;&lt;p&gt;HTTP, HTTPS (via the &lt;code&gt;http&lt;/code&gt; prober), DNS, TCP socket, ICMP and gRPC (see permissions section) are currently supported. Additional modules can be defined to meet your needs.&lt;/p&gt; &#xA;&lt;p&gt;The timeout of each probe is automatically determined from the &lt;code&gt;scrape_timeout&lt;/code&gt; in the &lt;a href=&#34;https://prometheus.io/docs/operating/configuration/#configuration-file&#34;&gt;Prometheus config&lt;/a&gt;, slightly reduced to allow for network delays. This can be further limited by the &lt;code&gt;timeout&lt;/code&gt; in the Blackbox exporter config file. If neither is specified, it defaults to 120 seconds.&lt;/p&gt; &#xA;&lt;h2&gt;Prometheus Configuration&lt;/h2&gt; &#xA;&lt;p&gt;Blackbox exporter implements the multi-target exporter pattern, so we advice to read the guide &lt;a href=&#34;https://prometheus.io/docs/guides/multi-target-exporter/&#34;&gt;Understanding and using the multi-target exporter pattern &lt;/a&gt; to get the general idea about the configuration.&lt;/p&gt; &#xA;&lt;p&gt;The blackbox exporter needs to be passed the target as a parameter, this can be done with relabelling.&lt;/p&gt; &#xA;&lt;p&gt;Example config:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;scrape_configs:&#xA;  - job_name: &#39;blackbox&#39;&#xA;    metrics_path: /probe&#xA;    params:&#xA;      module: [http_2xx]  # Look for a HTTP 200 response.&#xA;    static_configs:&#xA;      - targets:&#xA;        - http://prometheus.io    # Target to probe with http.&#xA;        - https://prometheus.io   # Target to probe with https.&#xA;        - http://example.com:8080 # Target to probe with http on port 8080.&#xA;    relabel_configs:&#xA;      - source_labels: [__address__]&#xA;        target_label: __param_target&#xA;      - source_labels: [__param_target]&#xA;        target_label: instance&#xA;      - target_label: __address__&#xA;        replacement: 127.0.0.1:9115  # The blackbox exporter&#39;s real hostname:port.&#xA;  - job_name: &#39;blackbox_exporter&#39;  # collect blackbox exporter&#39;s operational metrics.&#xA;    static_configs:&#xA;      - targets: [&#39;127.0.0.1:9115&#39;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;HTTP probes can accept an additional &lt;code&gt;hostname&lt;/code&gt; parameter that will set &lt;code&gt;Host&lt;/code&gt; header and TLS SNI. This can be especially useful with &lt;code&gt;dns_sd_config&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;scrape_configs:&#xA;  - job_name: blackbox_all&#xA;    metrics_path: /probe&#xA;    params:&#xA;      module: [ http_2xx ]  # Look for a HTTP 200 response.&#xA;    dns_sd_configs:&#xA;      - names:&#xA;          - example.com&#xA;          - prometheus.io&#xA;        type: A&#xA;        port: 443&#xA;    relabel_configs:&#xA;      - source_labels: [__address__]&#xA;        target_label: __param_target&#xA;        replacement: https://$1/  # Make probe URL be like https://1.2.3.4:443/&#xA;      - source_labels: [__param_target]&#xA;        target_label: instance&#xA;      - target_label: __address__&#xA;        replacement: 127.0.0.1:9115  # The blackbox exporter&#39;s real hostname:port.&#xA;      - source_labels: [__meta_dns_name]&#xA;        target_label: __param_hostname  # Make domain name become &#39;Host&#39; header for probe requests&#xA;      - source_labels: [__meta_dns_name]&#xA;        target_label: vhost  # and store it in &#39;vhost&#39; label&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Permissions&lt;/h2&gt; &#xA;&lt;p&gt;The ICMP probe requires elevated privileges to function:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;em&gt;Windows&lt;/em&gt;: Administrator privileges are required.&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Linux&lt;/em&gt;: either a user with a group within &lt;code&gt;net.ipv4.ping_group_range&lt;/code&gt;, the &lt;code&gt;CAP_NET_RAW&lt;/code&gt; capability or the root user is required. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Your distribution may configure &lt;code&gt;net.ipv4.ping_group_range&lt;/code&gt; by default in &lt;code&gt;/etc/sysctl.conf&lt;/code&gt; or similar. If not you can set &lt;code&gt;net.ipv4.ping_group_range = 0 2147483647&lt;/code&gt; to allow any user the ability to use ping.&lt;/li&gt; &#xA;   &lt;li&gt;Alternatively the capability can be set by executing &lt;code&gt;setcap cap_net_raw+ep blackbox_exporter&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;BSD&lt;/em&gt;: root user is required.&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;OS X&lt;/em&gt;: No additional privileges are needed.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>