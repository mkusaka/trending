<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-09-24T01:51:02Z</updated>
  <subtitle>Weekly Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>opentofu/opentofu</title>
    <updated>2023-09-24T01:51:02Z</updated>
    <id>tag:github.com,2023-09-24:/opentofu/opentofu</id>
    <link href="https://github.com/opentofu/opentofu" rel="alternate"></link>
    <summary type="html">&lt;p&gt;OpenTofu lets you declaratively manage your cloud infrastructure.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;OpenTofu&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Manifesto: &lt;a href=&#34;https://opentofu.org/manifesto&#34;&gt;https://opentofu.org/manifesto&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;About the OpenTofu fork: &lt;a href=&#34;https://opentofu.org/fork&#34;&gt;https://opentofu.org/fork&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://join.slack.com/t/opentfcommunity/shared_invite/zt-237chyryd-mFULiefrbYGMYQoG72BUpQ&#34;&gt;Join our Slack community!&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/opentofu/brand-artifacts/main/full/transparent/SVG/on-dark.svg#gh-dark-mode-only&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/opentofu/brand-artifacts/main/full/transparent/SVG/on-light.svg#gh-light-mode-only&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Important Note: This repository is currently a work in progress while we&#39;re preparing it for the first alpha release and fine-tuning the community contribution process. Please read the &lt;a href=&#34;https://opentofu.org/fork&#34;&gt;announcement post&lt;/a&gt; for important context and the &lt;a href=&#34;https://raw.githubusercontent.com/opentofu/opentofu/main/CONTRIBUTING.md&#34;&gt;contributing docs&lt;/a&gt; for instructions on how to contribute. Additionally, please be mindful that building this repository in its current state and running it might put you in violation of the &lt;a href=&#34;https://web.archive.org/web/https://registry.terraform.io/terms&#34;&gt;Terraform Registry ToS&lt;/a&gt;, if that&#39;s where you fetch your providers or modules from.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;OpenTofu is an OSS tool for building, changing, and versioning infrastructure safely and efficiently. OpenTofu can manage existing and popular service providers as well as custom in-house solutions.&lt;/p&gt; &#xA;&lt;p&gt;The key features of OpenTofu are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Infrastructure as Code&lt;/strong&gt;: Infrastructure is described using a high-level configuration syntax. This allows a blueprint of your datacenter to be versioned and treated as you would any other code. Additionally, infrastructure can be shared and re-used.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Execution Plans&lt;/strong&gt;: OpenTofu has a &#34;planning&#34; step where it generates an execution plan. The execution plan shows what OpenTofu will do when you call apply. This lets you avoid any surprises when OpenTofu manipulates infrastructure.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Resource Graph&lt;/strong&gt;: OpenTofu builds a graph of all your resources, and parallelizes the creation and modification of any non-dependent resources. Because of this, OpenTofu builds infrastructure as efficiently as possible, and operators get insight into dependencies in their infrastructure.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Change Automation&lt;/strong&gt;: Complex changesets can be applied to your infrastructure with minimal human interaction. With the previously mentioned execution plan and resource graph, you know exactly what OpenTofu will change and in what order, avoiding many possible human errors.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Developing OpenTofu&lt;/h2&gt; &#xA;&lt;p&gt;This repository contains OpenTofu Core, which includes the command line interface and the main graph engine.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;To learn more about compiling OpenTofu and contributing suggested changes, refer to &lt;a href=&#34;https://raw.githubusercontent.com/opentofu/opentofu/main/CONTRIBUTING.md&#34;&gt;the contributing guide&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To submit bug reports or enhancement requests, refer to the &lt;a href=&#34;https://raw.githubusercontent.com/opentofu/opentofu/main/CONTRIBUTING.md&#34;&gt;contributing guide&lt;/a&gt; as well.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/opentofu/opentofu/raw/main/LICENSE&#34;&gt;Mozilla Public License v2.0&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>go-co-op/gocron</title>
    <updated>2023-09-24T01:51:02Z</updated>
    <id>tag:github.com,2023-09-24:/go-co-op/gocron</id>
    <link href="https://github.com/go-co-op/gocron" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Easy and fluent Go cron scheduling. This is a fork from https://github.com/jasonlvhit/gocron&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;gocron: A Golang Job Scheduling Package.&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/avelino/awesome-go#job-scheduler&#34;&gt;&lt;img src=&#34;https://awesome.re/mentioned-badge-flat.svg?sanitize=true&#34; alt=&#34;Mentioned in Awesome Go&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/go-co-op/gocron/actions&#34;&gt;&lt;img src=&#34;https://github.com/go-co-op/gocron/actions/workflows/go_test.yml/badge.svg?branch=main&amp;amp;event=push&#34; alt=&#34;CI State&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://goreportcard.com/badge/github.com/go-co-op/gocron&#34; alt=&#34;Go Report Card&#34;&gt; &lt;a href=&#34;https://pkg.go.dev/github.com/go-co-op/gocron&#34;&gt;&lt;img src=&#34;https://godoc.org/github.com/go-co-op/gocron?status.svg?sanitize=true&#34; alt=&#34;Go Doc&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;gocron is a job scheduling package which lets you run Go functions at pre-determined intervals using a simple, human-friendly syntax.&lt;/p&gt; &#xA;&lt;p&gt;gocron is a Golang scheduler implementation similar to the Ruby module &lt;a href=&#34;https://github.com/tomykaira/clockwork&#34;&gt;clockwork&lt;/a&gt; and the Python job scheduling package &lt;a href=&#34;https://github.com/dbader/schedule&#34;&gt;schedule&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;See also these two great articles that were used for design input:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://adam.herokuapp.com/past/2010/4/13/rethinking_cron/&#34;&gt;Rethinking Cron&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://adam.herokuapp.com/past/2010/6/30/replace_cron_with_clockwork/&#34;&gt;Replace Cron with Clockwork&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you want to chat, you can find us at Slack! &lt;a href=&#34;https://gophers.slack.com/archives/CQ7T0T1FW&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/gophers-gocron-brightgreen?logo=slack&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Concepts&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Scheduler&lt;/strong&gt;: The scheduler tracks all the jobs assigned to it and makes sure they are passed to the executor when ready to be run. The scheduler is able to manage overall aspects of job behavior like limiting how many jobs are running at one time.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Job&lt;/strong&gt;: The job is simply aware of the task (go function) it&#39;s provided and is therefore only able to perform actions related to that task like preventing itself from overruning a previous task that is taking a long time.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Executor&lt;/strong&gt;: The executor, as it&#39;s name suggests, is simply responsible for calling the task (go function) that the job hands to it when sent by the scheduler.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-golang&#34;&gt;s := gocron.NewScheduler(time.UTC)&#xA;&#xA;// Every starts the job immediately and then runs at the &#xA;// specified interval&#xA;job, err := s.Every(5).Seconds().Do(func(){ ... })&#xA;if err != nil {&#xA;&#x9;// handle the error related to setting up the job&#xA;}&#xA;&#xA;// to wait for the interval to pass before running the first job&#xA;// use WaitForSchedule or WaitForScheduleAll&#xA;s.Every(5).Second().WaitForSchedule().Do(func(){ ... })&#xA;&#xA;s.WaitForScheduleAll()&#xA;s.Every(5).Second().Do(func(){ ... }) // waits for schedule&#xA;s.Every(5).Second().Do(func(){ ... }) // waits for schedule&#xA;&#xA;// strings parse to duration&#xA;s.Every(&#34;5m&#34;).Do(func(){ ... })&#xA;&#xA;s.Every(5).Days().Do(func(){ ... })&#xA;&#xA;s.Every(1).Month(1, 2, 3).Do(func(){ ... })&#xA;&#xA;// set time&#xA;s.Every(1).Day().At(&#34;10:30&#34;).Do(func(){ ... })&#xA;&#xA;// set multiple times&#xA;s.Every(1).Day().At(&#34;10:30;08:00&#34;).Do(func(){ ... })&#xA;&#xA;s.Every(1).Day().At(&#34;10:30&#34;).At(&#34;08:00&#34;).Do(func(){ ... })&#xA;&#xA;// Schedule each last day of the month&#xA;s.Every(1).MonthLastDay().Do(func(){ ... })&#xA;&#xA;// Or each last day of every other month&#xA;s.Every(2).MonthLastDay().Do(func(){ ... })&#xA;&#xA;// cron expressions supported&#xA;s.Cron(&#34;*/1 * * * *&#34;).Do(task) // every minute&#xA;&#xA;// cron second-level expressions supported&#xA;s.CronWithSeconds(&#34;*/1 * * * * *&#34;).Do(task) // every second&#xA;&#xA;// you can start running the scheduler in two different ways:&#xA;// starts the scheduler asynchronously&#xA;s.StartAsync()&#xA;// starts the scheduler and blocks current execution path&#xA;s.StartBlocking()&#xA;&#xA;// stop the running scheduler in two different ways:&#xA;// stop the scheduler&#xA;s.Stop()&#xA;&#xA;// stop the scheduler and notify the `StartBlocking()` to exit&#xA;s.StopBlockingChan()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more examples, take a look in our &lt;a href=&#34;https://pkg.go.dev/github.com/go-co-op/gocron#pkg-examples&#34;&gt;go docs&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Options&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Interval&lt;/th&gt; &#xA;   &lt;th&gt;Supported schedule options&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;sub-second&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;StartAt()&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;milliseconds&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;StartAt()&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;seconds&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;StartAt()&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;minutes&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;StartAt()&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;hours&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;StartAt()&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;days&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;StartAt()&lt;/code&gt;, &lt;code&gt;At()&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;weeks&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;StartAt()&lt;/code&gt;, &lt;code&gt;At()&lt;/code&gt;, &lt;code&gt;Weekday()&lt;/code&gt; (and all week day named functions)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;months&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;StartAt()&lt;/code&gt;, &lt;code&gt;At()&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;There are several options available to restrict how jobs run:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Mode&lt;/th&gt; &#xA;   &lt;th&gt;Function&lt;/th&gt; &#xA;   &lt;th&gt;Behavior&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Default&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;jobs are rescheduled at every interval&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Job singleton&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;SingletonMode()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;a long running job will not be rescheduled until the current run is completed&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Scheduler limit&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;SetMaxConcurrentJobs()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;set a collective maximum number of concurrent jobs running across the scheduler&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Distributed locking&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;WithDistributedLocker()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;prevents the same job from being run more than once when running multiple instances of the scheduler&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Distributed elector&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;WithDistributedElector()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;multiple instances exist in a distributed scenario, only the leader instance can run jobs&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Distributed Locker Implementations&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Redis: &lt;a href=&#34;https://github.com/go-co-op/gocron-redis-lock&#34;&gt;redislock&lt;/a&gt; &lt;code&gt;go get github.com/go-co-op/gocron-redis-lock&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Tags&lt;/h2&gt; &#xA;&lt;p&gt;Jobs may have arbitrary tags added which can be useful when tracking many jobs. The scheduler supports both enforcing tags to be unique and when not unique, running all jobs with a given tag.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-golang&#34;&gt;s := gocron.NewScheduler(time.UTC)&#xA;s.TagsUnique()&#xA;&#xA;_, _ = s.Every(1).Week().Tag(&#34;foo&#34;).Do(task)&#xA;_, err := s.Every(1).Week().Tag(&#34;foo&#34;).Do(task)&#xA;// error!!!&#xA;&#xA;s := gocron.NewScheduler(time.UTC)&#xA;&#xA;s.Every(2).Day().Tag(&#34;tag&#34;).At(&#34;10:00&#34;).Do(task)&#xA;s.Every(1).Minute().Tag(&#34;tag&#34;).Do(task)&#xA;s.RunByTag(&#34;tag&#34;)&#xA;// both jobs will run&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Q: I&#39;m running multiple pods on a distributed environment. How can I make a job not run once per pod causing duplication?&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;We recommend using your own lock solution within the jobs themselves (you could use &lt;a href=&#34;https://redis.io/topics/distlock&#34;&gt;Redis&lt;/a&gt;, for example)&lt;/li&gt; &#xA;   &lt;li&gt;A2: Use the scheduler option &lt;code&gt;WithDistributedLocker&lt;/code&gt; and either use an implemented &lt;a href=&#34;https://raw.githubusercontent.com/go-co-op/gocron/main/#distributed-locker-implementations&#34;&gt;backend&lt;/a&gt; or implement your own and contribute it back in a PR!&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Q: I&#39;ve removed my job from the scheduler, but how can I stop a long-running job that has already been triggered?&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;A: We recommend using a means of canceling your job, e.g. a &lt;code&gt;context.WithCancel()&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;A2: You can listen to the job context Done channel to know when the job has been canceled &lt;pre&gt;&lt;code class=&#34;language-golang&#34;&gt;task := func(in string, job gocron.Job) {&#xA;    fmt.Printf(&#34;this job&#39;s last run: %s this job&#39;s next run: %s\n&#34;, job.LastRun(), job.NextRun())&#xA;    fmt.Printf(&#34;in argument is %s\n&#34;, in)&#xA;&#xA;    ticker := time.NewTicker(100 * time.Millisecond)&#xA;    defer ticker.Stop()&#xA;&#xA;    for {&#xA;        select {&#xA;        case &amp;lt;-job.Context().Done():&#xA;            fmt.Printf(&#34;function has been canceled, performing cleanup and exiting gracefully\n&#34;)&#xA;            return&#xA;        case &amp;lt;-ticker.C:&#xA;            fmt.Printf(&#34;performing a hard job that takes a long time that I want to kill whenever I want\n&#34;)&#xA;        }&#xA;    }&#xA;}&#xA;&#xA;var err error&#xA;s := gocron.NewScheduler(time.UTC)&#xA;s.SingletonModeAll()&#xA;j, err := s.Every(1).Hour().Tag(&#34;myJob&#34;).DoWithJobDetails(task, &#34;foo&#34;)&#xA;if err != nil {&#xA;    log.Fatalln(&#34;error scheduling job&#34;, err)&#xA;}&#xA;&#xA;s.StartAsync()&#xA;&#xA;// Simulate some more work&#xA;time.Sleep(time.Second)&#xA;&#xA;// I want to stop the job, together with the underlying goroutine&#xA;fmt.Printf(&#34;now I want to kill the job\n&#34;)&#xA;err = s.RemoveByTag(&#34;myJob&#34;)&#xA;if err != nil {&#xA;    log.Fatalln(&#34;error removing job by tag&#34;, err)&#xA;}&#xA;&#xA;// Wait a bit so that we can see that the job is exiting gracefully&#xA;time.Sleep(time.Second)&#xA;fmt.Printf(&#34;Job: %#v, Error: %#v&#34;, j, err)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Looking to contribute? Try to follow these guidelines:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Use issues for everything&lt;/li&gt; &#xA; &lt;li&gt;For a small change, just send a PR!&lt;/li&gt; &#xA; &lt;li&gt;For bigger changes, please open an issue for discussion before sending a PR.&lt;/li&gt; &#xA; &lt;li&gt;PRs should have: tests, documentation and examples (if it makes sense)&lt;/li&gt; &#xA; &lt;li&gt;You can also contribute by: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Reporting issues&lt;/li&gt; &#xA;   &lt;li&gt;Suggesting new features or enhancements&lt;/li&gt; &#xA;   &lt;li&gt;Improving/fixing documentation&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Design&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/19351306/110375142-2ba88680-8017-11eb-80c3-554cc746b165.png&#34; alt=&#34;design-diagram&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.jetbrains.com/?from=gocron&#34;&gt;Jetbrains&lt;/a&gt; supports this project with GoLand licenses. We appreciate their support for free and open source software!&lt;/p&gt; &#xA;&lt;h2&gt;Star History&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://star-history.com/#go-co-op/gocron&amp;amp;Date&#34;&gt;&lt;img src=&#34;https://api.star-history.com/svg?repos=go-co-op/gocron&amp;amp;type=Date&#34; alt=&#34;Star History Chart&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>argoproj/argo-workflows</title>
    <updated>2023-09-24T01:51:02Z</updated>
    <id>tag:github.com,2023-09-24:/argoproj/argo-workflows</id>
    <link href="https://github.com/argoproj/argo-workflows" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Workflow Engine for Kubernetes&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://argoproj.github.io/community/join-slack&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/slack-argoproj-brightgreen.svg?logo=slack&#34; alt=&#34;slack&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/argoproj/argo-workflows/actions?query=event%3Apush+branch%3Amaster&#34;&gt;&lt;img src=&#34;https://github.com/argoproj/argo-workflows/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://bestpractices.coreinfrastructure.org/projects/3830&#34;&gt;&lt;img src=&#34;https://bestpractices.coreinfrastructure.org/projects/3830/badge&#34; alt=&#34;CII Best Practices&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://artifacthub.io/packages/helm/argo/argo-workflows&#34;&gt;&lt;img src=&#34;https://img.shields.io/endpoint?url=https://artifacthub.io/badge/repository/argo-workflows&#34; alt=&#34;Artifact HUB&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/argoproj&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/follow/argoproj?style=social&#34; alt=&#34;Twitter Follow&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;What is Argo Workflows?&lt;/h2&gt; &#xA;&lt;p&gt;Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. Argo Workflows is implemented as a Kubernetes CRD (Custom Resource Definition).&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Define workflows where each step in the workflow is a container.&lt;/li&gt; &#xA; &lt;li&gt;Model multi-step workflows as a sequence of tasks or capture the dependencies between tasks using a directed acyclic graph (DAG).&lt;/li&gt; &#xA; &lt;li&gt;Easily run compute intensive jobs for machine learning or data processing in a fraction of the time using Argo Workflows on Kubernetes.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Argo is a &lt;a href=&#34;https://cncf.io/&#34;&gt;Cloud Native Computing Foundation (CNCF)&lt;/a&gt; graduated project.&lt;/p&gt; &#xA;&lt;h2&gt;Use Cases&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://argoproj.github.io/argo-workflows/use-cases/machine-learning/&#34;&gt;Machine Learning pipelines&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://argoproj.github.io/argo-workflows/use-cases/data-processing/&#34;&gt;Data and batch processing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://argoproj.github.io/argo-workflows/use-cases/infrastructure-automation/&#34;&gt;Infrastructure automation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://argoproj.github.io/argo-workflows/use-cases/ci-cd/&#34;&gt;CI/CD&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://argoproj.github.io/argo-workflows/use-cases/other/&#34;&gt;Other use cases&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Why Argo Workflows?&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Argo Workflows is the most popular workflow execution engine for Kubernetes.&lt;/li&gt; &#xA; &lt;li&gt;Light-weight, scalable, and easier to use.&lt;/li&gt; &#xA; &lt;li&gt;Designed from the ground up for containers without the overhead and limitations of legacy VM and server-based environments.&lt;/li&gt; &#xA; &lt;li&gt;Cloud agnostic and can run on any Kubernetes cluster.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://blog.argoproj.io/argo-workflows-events-2023-user-survey-results-82c53bc30543&#34;&gt;Read what people said in our latest survey&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Try Argo Workflows&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://workflows.apps.argoproj.io/workflows/argo&#34;&gt;Access the demo environment&lt;/a&gt; (login using Github)&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/argoproj/argo-workflows/master/docs/assets/screenshot.png&#34; alt=&#34;Screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Who uses Argo Workflows?&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/argoproj/argo-workflows/master/USERS.md&#34;&gt;About 200+ organizations are officially using Argo Workflows&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Ecosystem&lt;/h2&gt; &#xA;&lt;p&gt;Just some of the projects that use or rely on Argo Workflows (complete list &lt;a href=&#34;https://github.com/akuity/awesome-argo#ecosystem-projects&#34;&gt;here&lt;/a&gt;):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/argoproj/argo-events&#34;&gt;Argo Events&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/couler-proj/couler&#34;&gt;Couler&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/argoproj-labs/hera-workflows&#34;&gt;Hera&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kubeflow/katib&#34;&gt;Katib&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://kedro.readthedocs.io/en/stable/&#34;&gt;Kedro&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kubeflow/pipelines&#34;&gt;Kubeflow Pipelines&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://metaflow.org&#34;&gt;Netflix Metaflow&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.onepanel.ai/&#34;&gt;Onepanel&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/orchest/orchest/&#34;&gt;Orchest&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rookout/piper&#34;&gt;Piper&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ploomber/ploomber&#34;&gt;Ploomber&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/SeldonIO/seldon-core&#34;&gt;Seldon&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sql-machine-learning/sqlflow&#34;&gt;SQLFlow&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Client Libraries&lt;/h2&gt; &#xA;&lt;p&gt;Check out our &lt;a href=&#34;https://raw.githubusercontent.com/argoproj/argo-workflows/master/docs/client-libraries.md&#34;&gt;Java, Golang and Python clients&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Quickstart&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/argoproj/argo-workflows/master/docs/quick-start.md&#34;&gt;Get started here&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://argoproj.github.io/argo-workflows/walk-through/&#34;&gt;Walk-through examples&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://argoproj.github.io/argo-workflows/&#34;&gt;View the docs&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;p&gt;An incomplete list of features Argo Workflows provide:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;UI to visualize and manage Workflows&lt;/li&gt; &#xA; &lt;li&gt;Artifact support (S3, Artifactory, Alibaba Cloud OSS, Azure Blob Storage, HTTP, Git, GCS, raw)&lt;/li&gt; &#xA; &lt;li&gt;Workflow templating to store commonly used Workflows in the cluster&lt;/li&gt; &#xA; &lt;li&gt;Archiving Workflows after executing for later access&lt;/li&gt; &#xA; &lt;li&gt;Scheduled workflows using cron&lt;/li&gt; &#xA; &lt;li&gt;Server interface with REST API (HTTP and GRPC)&lt;/li&gt; &#xA; &lt;li&gt;DAG or Steps based declaration of workflows&lt;/li&gt; &#xA; &lt;li&gt;Step level input &amp;amp; outputs (artifacts/parameters)&lt;/li&gt; &#xA; &lt;li&gt;Loops&lt;/li&gt; &#xA; &lt;li&gt;Parameterization&lt;/li&gt; &#xA; &lt;li&gt;Conditionals&lt;/li&gt; &#xA; &lt;li&gt;Timeouts (step &amp;amp; workflow level)&lt;/li&gt; &#xA; &lt;li&gt;Retry (step &amp;amp; workflow level)&lt;/li&gt; &#xA; &lt;li&gt;Resubmit (memoized)&lt;/li&gt; &#xA; &lt;li&gt;Suspend &amp;amp; Resume&lt;/li&gt; &#xA; &lt;li&gt;Cancellation&lt;/li&gt; &#xA; &lt;li&gt;K8s resource orchestration&lt;/li&gt; &#xA; &lt;li&gt;Exit Hooks (notifications, cleanup)&lt;/li&gt; &#xA; &lt;li&gt;Garbage collection of completed workflow&lt;/li&gt; &#xA; &lt;li&gt;Scheduling (affinity/tolerations/node selectors)&lt;/li&gt; &#xA; &lt;li&gt;Volumes (ephemeral/existing)&lt;/li&gt; &#xA; &lt;li&gt;Parallelism limits&lt;/li&gt; &#xA; &lt;li&gt;Daemoned steps&lt;/li&gt; &#xA; &lt;li&gt;DinD (docker-in-docker)&lt;/li&gt; &#xA; &lt;li&gt;Script steps&lt;/li&gt; &#xA; &lt;li&gt;Event emission&lt;/li&gt; &#xA; &lt;li&gt;Prometheus metrics&lt;/li&gt; &#xA; &lt;li&gt;Multiple executors&lt;/li&gt; &#xA; &lt;li&gt;Multiple pod and workflow garbage collection strategies&lt;/li&gt; &#xA; &lt;li&gt;Automatically calculated resource usage per step&lt;/li&gt; &#xA; &lt;li&gt;Java/Golang/Python SDKs&lt;/li&gt; &#xA; &lt;li&gt;Pod Disruption Budget support&lt;/li&gt; &#xA; &lt;li&gt;Single-sign on (OAuth2/OIDC)&lt;/li&gt; &#xA; &lt;li&gt;Webhook triggering&lt;/li&gt; &#xA; &lt;li&gt;CLI&lt;/li&gt; &#xA; &lt;li&gt;Out-of-the box and custom Prometheus metrics&lt;/li&gt; &#xA; &lt;li&gt;Windows container support&lt;/li&gt; &#xA; &lt;li&gt;Embedded widgets&lt;/li&gt; &#xA; &lt;li&gt;Multiplex log viewer&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Community Meetings&lt;/h2&gt; &#xA;&lt;p&gt;We host monthly community meetings where we and the community showcase demos and discuss the current and future state of the project. Feel free to join us! For Community Meeting information, minutes and recordings please &lt;a href=&#34;https://bit.ly/argo-wf-cmty-mtng&#34;&gt;see here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Participation in the Argo Workflows project is governed by the &lt;a href=&#34;https://github.com/cncf/foundation/raw/master/code-of-conduct.md&#34;&gt;CNCF Code of Conduct&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Community Blogs and Presentations&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/terrytangyuan/awesome-argo&#34;&gt;Awesome-Argo: A Curated List of Awesome Projects and Resources Related to Argo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/XNXJtxkUKeY&#34;&gt;Automation of Everything - How To Combine Argo Events, Workflows &amp;amp; Pipelines, CD, and Rollouts&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/UMaivwrAyTA&#34;&gt;Argo Workflows and Pipelines - CI/CD, Machine Learning, and Other Kubernetes Workflows&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://medium.com/@marekermk/provisioning-argo-on-openshift-with-ansible-and-kustomize-340a1fda8b50&#34;&gt;Argo Ansible role: Provisioning Argo Workflows on OpenShift&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://bit.ly/30YNIvT&#34;&gt;Argo Workflows vs Apache Airflow&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://medium.com/@bouwe.ceunen/ci-cd-with-argo-on-kubernetes-28c1a99616a9&#34;&gt;CI/CD with Argo on Kubernetes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://haque-zubair.medium.com/define-your-ci-cd-pipeline-with-argo-workflows-25aefb02fa63&#34;&gt;Define Your CI/CD Pipeline with Argo Workflows&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://admiralty.io/blog/running-argo-workflows-across-multiple-kubernetes-clusters/&#34;&gt;Running Argo Workflows Across Multiple Kubernetes Clusters&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.anaconda.com/blog/developer-blog/open-source-model-management-roundup-polyaxon-argo-and-seldon/&#34;&gt;Open Source Model Management Roundup: Polyaxon, Argo, and Seldon&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.interline.io/blog/scaling-openstreetmap-data-workflows/&#34;&gt;Producing 200 OpenStreetMap extracts in 35 minutes using a scalable data workflow&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://dev.matt.hillsdon.net/2018/03/24/argo-integration-review.html&#34;&gt;Argo integration review&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;TGI Kubernetes with Joe Beda: &lt;a href=&#34;https://www.youtube.com/watch?v=M_rxPPLG8pU&amp;amp;start=859&#34;&gt;Argo workflow system&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Project Resources&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/argoproj&#34;&gt;Argo Project GitHub organization&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://argoproj.github.io/&#34;&gt;Argo Website&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://argoproj.github.io/community/join-slack&#34;&gt;Argo Slack&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Security&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/argoproj/argo-workflows/master/SECURITY.md&#34;&gt;SECURITY.md&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>