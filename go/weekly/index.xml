<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-04-16T01:55:42Z</updated>
  <subtitle>Weekly Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>appleboy/CodeGPT</title>
    <updated>2023-04-16T01:55:42Z</updated>
    <id>tag:github.com,2023-04-16:/appleboy/CodeGPT</id>
    <link href="https://github.com/appleboy/CodeGPT" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A CLI written in Go language that writes git commit messages or do a code review brief for you using ChatGPT AI (gpt-4, gpt-3.5-turbo model) and automatically installs a git prepare-commit-msg hook.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;CodeGPT&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/appleboy/CodeGPT/actions/workflows/testing.yml&#34;&gt;&lt;img src=&#34;https://github.com/appleboy/CodeGPT/actions/workflows/testing.yml/badge.svg?branch=main&#34; alt=&#34;Lint and Testing&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/appleboy/CodeGPT&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/appleboy/CodeGPT/branch/main/graph/badge.svg?sanitize=true&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/appleboy/CodeGPT&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/appleboy/CodeGPT&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/appleboy/CodeGPT/main/images/cover.png&#34; alt=&#34;cover&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;A CLI written in &lt;a href=&#34;https://go.dev&#34;&gt;Go&lt;/a&gt; language that writes git commit messages or do a code review brief for you using ChatGPT AI (gpt-3.5-turbo, gpt-4 model) and automatically installs a &lt;a href=&#34;https://git-scm.com/docs/githooks&#34;&gt;git prepare-commit-msg hook&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://blog.wu-boy.com/2023/03/writes-git-commit-messages-using-chatgpt/&#34;&gt;繁體中文介紹&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/appleboy/CodeGPT/main/images/flow.svg?sanitize=true&#34; alt=&#34;flow&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Feature&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Support &lt;a href=&#34;https://azure.microsoft.com/en-us/products/cognitive-services/openai-service&#34;&gt;Azure OpenAI Service&lt;/a&gt; or &lt;a href=&#34;https://platform.openai.com/docs/api-reference&#34;&gt;OpenAI API&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Support &lt;a href=&#34;https://www.conventionalcommits.org/en/v1.0.0/&#34;&gt;conventional commits specification&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Support Git prepare-commit-msg Hook, see the &lt;a href=&#34;https://git-scm.com/book/en/v2/Customizing-Git-Git-Hooks&#34;&gt;Git Hooks documentation&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Support customize generate diffs with n lines of context, the default is three.&lt;/li&gt; &#xA; &lt;li&gt;Support for excluding files from the git diff command.&lt;/li&gt; &#xA; &lt;li&gt;Support commit message translation into another language (support &lt;code&gt;en&lt;/code&gt;, &lt;code&gt;zh-tw&lt;/code&gt; or &lt;code&gt;zh-cn&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Support socks proxy or custom network HTTP proxy.&lt;/li&gt; &#xA; &lt;li&gt;Support &lt;a href=&#34;https://github.com/appleboy/CodeGPT/raw/bf28f000463cfc6dfa2572df61e1b160c5c680f7/openai/openai.go#L18-L38&#34;&gt;model lists&lt;/a&gt; like &lt;code&gt;gpt-4&lt;/code&gt;, &lt;code&gt;gpt-3.5-turbo&lt;/code&gt; ...etc.&lt;/li&gt; &#xA; &lt;li&gt;Support do a brief code review.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/appleboy/CodeGPT/main/images/code_review.png&#34; alt=&#34;code review&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Currently, the only supported method of installation on MacOS is &lt;a href=&#34;http://brew.sh/&#34;&gt;Homebrew&lt;/a&gt;. To install &lt;code&gt;codegpt&lt;/code&gt; via brew:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;brew tap appleboy/tap&#xA;brew install codegpt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The pre-compiled binaries can be downloaded from &lt;a href=&#34;https://github.com/appleboy/CodeGPT/releases&#34;&gt;release page&lt;/a&gt;.Change the binary permissions to &lt;code&gt;755&lt;/code&gt; and copy the binary to the system bin directory. Use the &lt;code&gt;codegpt&lt;/code&gt; command as shown below.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ codegpt version&#xA;version: v0.1.6 commit: xxxxxxx&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;p&gt;Please first create your OpenAI API Key. The &lt;a href=&#34;https://platform.openai.com/account/api-keys&#34;&gt;OpenAI Platform&lt;/a&gt; allows you to generate a new API Key.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/appleboy/CodeGPT/main/images/register.png&#34; alt=&#34;register&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;An environment variable is a variable that is set on your operating system, rather than within your application. It consists of a name and value.We recommend that you set the name of the variable to &lt;code&gt;OPENAI_API_KEY&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://help.openai.com/en/articles/5112595-best-practices-for-api-key-safety&#34;&gt;Best Practices for API Key Safety&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;export OPENAI_API_KEY=sk-xxxxxxx&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or store your API key in custom config file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;codegpt config set openai.api_key sk-xxxxxxx&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will create a &lt;code&gt;.codegpt.yaml&lt;/code&gt; file in your home directory ($HOME/.config/codegpt/.codegpt.yaml). The following options are available.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;openai.base_url&lt;/strong&gt;: replace the default base URL (&lt;code&gt;https://api.openai.com/v1&lt;/code&gt;). You can try &lt;code&gt;https://closeai.deno.dev/v1&lt;/code&gt;. See &lt;a href=&#34;https://github.com/justjavac/openai-proxy&#34;&gt;justjavac/openai-proxy&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;openai.api_key&lt;/strong&gt;: generate API key from &lt;a href=&#34;https://platform.openai.com/account/api-keys&#34;&gt;openai platform page&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;openai.org_id&lt;/strong&gt;: Identifier for this organization sometimes used in API requests. see &lt;a href=&#34;https://platform.openai.com/account/org-settings&#34;&gt;organization settings&lt;/a&gt;. only for &lt;code&gt;openai&lt;/code&gt; service.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;openai.model&lt;/strong&gt;: default model is &lt;code&gt;gpt-3.5-turbo&lt;/code&gt;, you can change to &lt;code&gt;gpt-4&lt;/code&gt; or &lt;a href=&#34;https://github.com/appleboy/CodeGPT/raw/bf28f000463cfc6dfa2572df61e1b160c5c680f7/openai/openai.go#L18-L38&#34;&gt;other available model list&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;openai.lang&lt;/strong&gt;: default language is &lt;code&gt;en&lt;/code&gt; and available languages &lt;code&gt;zh-tw&lt;/code&gt;, &lt;code&gt;zh-cn&lt;/code&gt;, &lt;code&gt;ja&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;openai.proxy&lt;/strong&gt;: http/https client proxy.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;openai.socks&lt;/strong&gt;: socks client proxy.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;openai.timeout&lt;/strong&gt;: default http timeout is &lt;code&gt;10s&lt;/code&gt; (ten seconds).&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;openai.max_tokens&lt;/strong&gt;: default max tokens is &lt;code&gt;300&lt;/code&gt;. see reference &lt;a href=&#34;https://platform.openai.com/docs/api-reference/completions/create#completions/create-max_tokens&#34;&gt;max_tokens&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;openai.temperature&lt;/strong&gt;: default temperature is &lt;code&gt;0.7&lt;/code&gt;. see reference &lt;a href=&#34;https://platform.openai.com/docs/api-reference/completions/create#completions/create-temperature&#34;&gt;temperature&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;git.diff_unified&lt;/strong&gt;: generate diffs with &lt;code&gt;&amp;lt;n&amp;gt;&lt;/code&gt; lines of context, default is &lt;code&gt;3&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;git.exclue_list&lt;/strong&gt;: exclude file from &lt;code&gt;git diff&lt;/code&gt; command.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;openai.provider&lt;/strong&gt;: default service provider is &lt;code&gt;openai&lt;/code&gt;, you can change to &lt;code&gt;azure&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;openai.model_name&lt;/strong&gt;: model deployment name (for azure).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;How to change to Azure OpenAI Service&lt;/h3&gt; &#xA;&lt;p&gt;Please get the &lt;code&gt;API key&lt;/code&gt;, &lt;code&gt;Endpoint&lt;/code&gt; and &lt;code&gt;Model deployments&lt;/code&gt; list from Azure Resource Management Portal on left menu.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/appleboy/CodeGPT/main/images/azure_01.png&#34; alt=&#34;azure01&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/appleboy/CodeGPT/main/images/azure_02.png&#34; alt=&#34;azure02&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Update your config file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;codegpt config set openai.provider azure&#xA;codegpt config set openai.base_url https://xxxxxxxxx.openai.azure.com/&#xA;codegpt config set openai.api_key xxxxxxxxxxxxxxxx&#xA;codegpt config set openai.model_name xxxxx-gpt-35-turbo&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;There are two methods for generating a commit message using the &lt;code&gt;codegpt&lt;/code&gt; command. The first is CLI mode, and the second is Git Hook.&lt;/p&gt; &#xA;&lt;h3&gt;CLI mode&lt;/h3&gt; &#xA;&lt;p&gt;You can call &lt;code&gt;codegpt&lt;/code&gt; directly to generate a commit message for your staged changes:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git add &amp;lt;files...&amp;gt;&#xA;codegpt commit --preview&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The commit message is shown below.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;Summarize the commit message use gpt-3.5-turbo model&#xA;We are trying to summarize a git diff&#xA;We are trying to summarize a title for pull request&#xA;================Commit Summary====================&#xA;&#xA;feat: Add preview flag and remove disableCommit flag in commit command and template file.&#xA;&#xA;- Add a `preview` flag to the `commit` command&#xA;- Remove the `disbaleCommit` flag from the `prepare-commit-msg` template file&#xA;&#xA;==================================================&#xA;Write the commit message to .git/COMMIT_EDITMSG file&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or translate all git commit messages into a different language (&lt;code&gt;Traditional Chinese&lt;/code&gt;, &lt;code&gt;Simplified Chinese&lt;/code&gt; or &lt;code&gt;Japanese&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;codegpt commit --lang zh-tw --preview&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Consider the following outcome:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;Summarize the commit message use gpt-3.5-turbo model&#xA;We are trying to summarize a git diff&#xA;We are trying to summarize a title for pull request&#xA;We are trying to translate a git commit message to Traditional Chinese language&#xA;================Commit Summary====================&#xA;&#xA;功能：重構 codegpt commit 命令標記&#xA;&#xA;- 將「codegpt commit」命令新增「預覽」標記&#xA;- 從「codegpt commit」命令中移除「--disableCommit」標記&#xA;&#xA;==================================================&#xA;Write the commit message to .git/COMMIT_EDITMSG file&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can replace the tip of the current branch by creating a new commit. just use &lt;code&gt;--amend&lt;/code&gt; flag&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;codegpt commit --amend&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Change commit message template&lt;/h2&gt; &#xA;&lt;p&gt;Default commit message template as following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-tmpl&#34;&gt;{{ .summarize_prefix }}: {{ .summarize_title }}&#xA;&#xA;{{ .summarize_message }}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;change format with template string using &lt;code&gt;--template_string&lt;/code&gt; paratemter:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;codegpt commit --preview --template_string \&#xA;  &#34;[{{ .summarize_prefix }}]: {{ .summarize_title }}&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;change format with template file using &lt;code&gt;--template_file&lt;/code&gt; parameter:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;codegpt commit --preview --template_file your_file_path&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Git hook&lt;/h3&gt; &#xA;&lt;p&gt;You can also use the prepare-commit-msg hook to integrate &lt;code&gt;codegpt&lt;/code&gt; with Git. This allows you to use Git normally and edit the commit message before committing.&lt;/p&gt; &#xA;&lt;h4&gt;Install&lt;/h4&gt; &#xA;&lt;p&gt;You want to install the hook in the Git repository:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;codegpt hook install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Uninstall&lt;/h4&gt; &#xA;&lt;p&gt;You want to remove the hook from the Git repository:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;codegpt hook uninstall&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Stage your files and commit after installation:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git add &amp;lt;files...&amp;gt;&#xA;git commit&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;codegpt&lt;/code&gt; will generate the commit message for you and pass it back to Git. Git will open it with the configured editor for you to review/edit it. Then, to commit, save and close the editor!&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ git commit&#xA;Summarize the commit message use gpt-3.5-turbo model&#xA;We are trying to summarize a git diff&#xA;We are trying to summarize a title for pull request&#xA;================Commit Summary====================&#xA;&#xA;Improve user experience and documentation for OpenAI tools&#xA;&#xA;- Add download links for pre-compiled binaries&#xA;- Include instructions for setting up OpenAI API key&#xA;- Add a CLI mode for generating commit messages&#xA;- Provide references for OpenAI Chat completions and ChatGPT/Whisper APIs&#xA;&#xA;==================================================&#xA;Write the commit message to .git/COMMIT_EDITMSG file&#xA;[main 6a9e879] Improve user experience and documentation for OpenAI tools&#xA; 1 file changed, 56 insertions(+)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Code Review&lt;/h3&gt; &#xA;&lt;p&gt;You can use &lt;code&gt;codegpt&lt;/code&gt; to generate a code review message for your staged changes:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;codegpt review&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or translate all code review messages into a different language (&lt;code&gt;Traditional Chinese&lt;/code&gt;, &lt;code&gt;Simplified Chinese&lt;/code&gt; or &lt;code&gt;Japanese&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;codegpt review --lang zh-tw&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See the following result:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;Code review your changes using gpt-3.5-turbo model&#xA;We are trying to review code changes&#xA;PromptTokens: 1021, CompletionTokens: 200, TotalTokens: 1221&#xA;We are trying to translate core review to Traditional Chinese language&#xA;PromptTokens: 287, CompletionTokens: 199, TotalTokens: 486&#xA;================Review Summary====================&#xA;&#xA;總體而言，此程式碼修補似乎在增加 Review 指令的功能，允許指定輸出語言並在必要時進行翻譯。以下是需要考慮的潛在問題：&#xA;&#xA;- 輸出語言沒有進行輸入驗證。如果指定了無效的語言代碼，程式可能會崩潰或產生意外結果。&#xA;- 此使用的翻譯 API 未指定，因此不清楚是否存在任何安全漏洞。&#xA;- 無法處理翻譯 API 調用的錯誤。如果翻譯服&#xA;&#xA;==================================================&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;another php example code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php&#xA;if( isset( $_POST[ &#39;Submit&#39; ]  ) ) {&#xA;  // Get input&#xA;  $target = $_REQUEST[ &#39;ip&#39; ];&#xA;  // Determine OS and execute the ping command.&#xA;  if( stristr( php_uname( &#39;s&#39; ), &#39;Windows NT&#39; ) ) {&#xA;    // Windows&#xA;    $cmd = shell_exec( &#39;ping  &#39; . $target );&#xA;  }&#xA;  else {&#xA;    // *nix&#xA;    $cmd = shell_exec( &#39;ping  -c 4 &#39; . $target );&#xA;  }&#xA;  // Feedback for the end user&#xA;  $html .= &#34;&amp;lt;pre&amp;gt;{$cmd}&amp;lt;/pre&amp;gt;&#34;;&#xA;}&#xA;?&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;code review result:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;================Review Summary====================&#xA;&#xA;Code review:&#xA;&#xA;1. Security: The code is vulnerable to command injection attacks as the user input is directly used in the shell_exec() function. An attacker can potentially execute malicious commands on the server by injecting them into the &#39;ip&#39; parameter.&#xA;2. Error handling: There is no error handling in the code. If the ping command fails, the error message is not displayed to the user.&#xA;3. Input validation: There is no input validation for the &#39;ip&#39; parameter. It should be validated to ensure that it is a valid IP address or domain name.&#xA;4. Cross-platform issues: The code assumes that the server is either running Windows or *nix operating systems. It may not work correctly on other platforms.&#xA;&#xA;Suggestions for improvement:&#xA;&#xA;1. Use escapeshellarg() function to sanitize the user input before passing it to shell_exec() function to prevent command injection.&#xA;2. Implement error handling to display error messages to the user if the ping command fails.&#xA;3. Use a regular expression to validate the &#39;ip&#39; parameter to ensure that it is a valid IP address or domain name.&#xA;4. Use a more robust method to determine the operating system, such as the PHP_OS constant, which can detect a wider range of operating systems.&#xA;&#xA;==================================================&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Reference&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://platform.openai.com/docs/guides/chat&#34;&gt;OpenAI Chat completions documentation&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://openai.com/blog/introducing-chatgpt-and-whisper-apis&#34;&gt;Introducing ChatGPT and Whisper APIs&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>ethereum/go-ethereum</title>
    <updated>2023-04-16T01:55:42Z</updated>
    <id>tag:github.com,2023-04-16:/ethereum/go-ethereum</id>
    <link href="https://github.com/ethereum/go-ethereum" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Official Go implementation of the Ethereum protocol&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Go Ethereum&lt;/h2&gt; &#xA;&lt;p&gt;Official Golang execution layer implementation of the Ethereum protocol.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/ethereum/go-ethereum?tab=doc&#34;&gt;&lt;img src=&#34;https://camo.githubusercontent.com/915b7be44ada53c290eb157634330494ebe3e30a/68747470733a2f2f676f646f632e6f72672f6769746875622e636f6d2f676f6c616e672f6764646f3f7374617475732e737667&#34; alt=&#34;API Reference&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/ethereum/go-ethereum&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/ethereum/go-ethereum&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://travis-ci.com/ethereum/go-ethereum&#34;&gt;&lt;img src=&#34;https://travis-ci.com/ethereum/go-ethereum.svg?branch=master&#34; alt=&#34;Travis&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/nthXNEv&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/discord-join%20chat-blue.svg?sanitize=true&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Automated builds are available for stable releases and the unstable master branch. Binary archives are published at &lt;a href=&#34;https://geth.ethereum.org/downloads/&#34;&gt;https://geth.ethereum.org/downloads/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Building the source&lt;/h2&gt; &#xA;&lt;p&gt;For prerequisites and detailed build instructions please read the &lt;a href=&#34;https://geth.ethereum.org/docs/getting-started/installing-geth&#34;&gt;Installation Instructions&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Building &lt;code&gt;geth&lt;/code&gt; requires both a Go (version 1.19 or later) and a C compiler. You can install them using your favourite package manager. Once the dependencies are installed, run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;make geth&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or, to build the full suite of utilities:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;make all&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Executables&lt;/h2&gt; &#xA;&lt;p&gt;The go-ethereum project comes with several wrappers/executables found in the &lt;code&gt;cmd&lt;/code&gt; directory.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Command&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;&lt;code&gt;geth&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Our main Ethereum CLI client. It is the entry point into the Ethereum network (main-, test- or private net), capable of running as a full node (default), archive node (retaining all historical state) or a light node (retrieving data live). It can be used by other processes as a gateway into the Ethereum network via JSON RPC endpoints exposed on top of HTTP, WebSocket and/or IPC transports. &lt;code&gt;geth --help&lt;/code&gt; and the &lt;a href=&#34;https://geth.ethereum.org/docs/fundamentals/command-line-options&#34;&gt;CLI page&lt;/a&gt; for command line options.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;clef&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Stand-alone signing tool, which can be used as a backend signer for &lt;code&gt;geth&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;devp2p&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Utilities to interact with nodes on the networking layer, without running a full blockchain.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;abigen&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Source code generator to convert Ethereum contract definitions into easy-to-use, compile-time type-safe Go packages. It operates on plain &lt;a href=&#34;https://docs.soliditylang.org/en/develop/abi-spec.html&#34;&gt;Ethereum contract ABIs&lt;/a&gt; with expanded functionality if the contract bytecode is also available. However, it also accepts Solidity source files, making development much more streamlined. Please see our &lt;a href=&#34;https://geth.ethereum.org/docs/developers/dapp-developer/native-bindings&#34;&gt;Native DApps&lt;/a&gt; page for details.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;bootnode&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Stripped down version of our Ethereum client implementation that only takes part in the network node discovery protocol, but does not run any of the higher level application protocols. It can be used as a lightweight bootstrap node to aid in finding peers in private networks.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;evm&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Developer utility version of the EVM (Ethereum Virtual Machine) that is capable of running bytecode snippets within a configurable environment and execution mode. Its purpose is to allow isolated, fine-grained debugging of EVM opcodes (e.g. &lt;code&gt;evm --code 60ff60ff --debug run&lt;/code&gt;).&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;rlpdump&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Developer utility tool to convert binary RLP (&lt;a href=&#34;https://ethereum.org/en/developers/docs/data-structures-and-encoding/rlp&#34;&gt;Recursive Length Prefix&lt;/a&gt;) dumps (data encoding used by the Ethereum protocol both network as well as consensus wise) to user-friendlier hierarchical representation (e.g. &lt;code&gt;rlpdump --hex CE0183FFFFFFC4C304050583616263&lt;/code&gt;).&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Running &lt;code&gt;geth&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Going through all the possible command line flags is out of scope here (please consult our &lt;a href=&#34;https://geth.ethereum.org/docs/fundamentals/command-line-options&#34;&gt;CLI Wiki page&lt;/a&gt;), but we&#39;ve enumerated a few common parameter combos to get you up to speed quickly on how you can run your own &lt;code&gt;geth&lt;/code&gt; instance.&lt;/p&gt; &#xA;&lt;h3&gt;Hardware Requirements&lt;/h3&gt; &#xA;&lt;p&gt;Minimum:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;CPU with 2+ cores&lt;/li&gt; &#xA; &lt;li&gt;4GB RAM&lt;/li&gt; &#xA; &lt;li&gt;1TB free storage space to sync the Mainnet&lt;/li&gt; &#xA; &lt;li&gt;8 MBit/sec download Internet service&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Recommended:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fast CPU with 4+ cores&lt;/li&gt; &#xA; &lt;li&gt;16GB+ RAM&lt;/li&gt; &#xA; &lt;li&gt;High-performance SSD with at least 1TB of free space&lt;/li&gt; &#xA; &lt;li&gt;25+ MBit/sec download Internet service&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Full node on the main Ethereum network&lt;/h3&gt; &#xA;&lt;p&gt;By far the most common scenario is people wanting to simply interact with the Ethereum network: create accounts; transfer funds; deploy and interact with contracts. For this particular use case, the user doesn&#39;t care about years-old historical data, so we can sync quickly to the current state of the network. To do so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ geth console&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This command will:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Start &lt;code&gt;geth&lt;/code&gt; in snap sync mode (default, can be changed with the &lt;code&gt;--syncmode&lt;/code&gt; flag), causing it to download more data in exchange for avoiding processing the entire history of the Ethereum network, which is very CPU intensive.&lt;/li&gt; &#xA; &lt;li&gt;Start the built-in interactive &lt;a href=&#34;https://geth.ethereum.org/docs/interacting-with-geth/javascript-console&#34;&gt;JavaScript console&lt;/a&gt;, (via the trailing &lt;code&gt;console&lt;/code&gt; subcommand) through which you can interact using &lt;a href=&#34;https://github.com/ChainSafe/web3.js/raw/0.20.7/DOCUMENTATION.md&#34;&gt;&lt;code&gt;web3&lt;/code&gt; methods&lt;/a&gt; (note: the &lt;code&gt;web3&lt;/code&gt; version bundled within &lt;code&gt;geth&lt;/code&gt; is very old, and not up to date with official docs), as well as &lt;code&gt;geth&lt;/code&gt;&#39;s own &lt;a href=&#34;https://geth.ethereum.org/docs/interacting-with-geth/rpc&#34;&gt;management APIs&lt;/a&gt;. This tool is optional and if you leave it out you can always attach it to an already running &lt;code&gt;geth&lt;/code&gt; instance with &lt;code&gt;geth attach&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;A Full node on the Görli test network&lt;/h3&gt; &#xA;&lt;p&gt;Transitioning towards developers, if you&#39;d like to play around with creating Ethereum contracts, you almost certainly would like to do that without any real money involved until you get the hang of the entire system. In other words, instead of attaching to the main network, you want to join the &lt;strong&gt;test&lt;/strong&gt; network with your node, which is fully equivalent to the main network, but with play-Ether only.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ geth --goerli console&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;console&lt;/code&gt; subcommand has the same meaning as above and is equally useful on the testnet too.&lt;/p&gt; &#xA;&lt;p&gt;Specifying the &lt;code&gt;--goerli&lt;/code&gt; flag, however, will reconfigure your &lt;code&gt;geth&lt;/code&gt; instance a bit:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Instead of connecting to the main Ethereum network, the client will connect to the Görli test network, which uses different P2P bootnodes, different network IDs and genesis states.&lt;/li&gt; &#xA; &lt;li&gt;Instead of using the default data directory (&lt;code&gt;~/.ethereum&lt;/code&gt; on Linux for example), &lt;code&gt;geth&lt;/code&gt; will nest itself one level deeper into a &lt;code&gt;goerli&lt;/code&gt; subfolder (&lt;code&gt;~/.ethereum/goerli&lt;/code&gt; on Linux). Note, on OSX and Linux this also means that attaching to a running testnet node requires the use of a custom endpoint since &lt;code&gt;geth attach&lt;/code&gt; will try to attach to a production node endpoint by default, e.g., &lt;code&gt;geth attach &amp;lt;datadir&amp;gt;/goerli/geth.ipc&lt;/code&gt;. Windows users are not affected by this.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;Note: Although some internal protective measures prevent transactions from crossing over between the main network and test network, you should always use separate accounts for play and real money. Unless you manually move accounts, &lt;code&gt;geth&lt;/code&gt; will by default correctly separate the two networks and will not make any accounts available between them.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Full node on the Rinkeby test network&lt;/h3&gt; &#xA;&lt;p&gt;Go Ethereum also supports connecting to the older proof-of-authority based test network called &lt;a href=&#34;https://www.rinkeby.io&#34;&gt;&lt;em&gt;Rinkeby&lt;/em&gt;&lt;/a&gt; which is operated by members of the community.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ geth --rinkeby console&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Configuration&lt;/h3&gt; &#xA;&lt;p&gt;As an alternative to passing the numerous flags to the &lt;code&gt;geth&lt;/code&gt; binary, you can also pass a configuration file via:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ geth --config /path/to/your_config.toml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To get an idea of how the file should look like you can use the &lt;code&gt;dumpconfig&lt;/code&gt; subcommand to export your existing configuration:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ geth --your-favourite-flags dumpconfig&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;Note: This works only with &lt;code&gt;geth&lt;/code&gt; v1.6.0 and above.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Docker quick start&lt;/h4&gt; &#xA;&lt;p&gt;One of the quickest ways to get Ethereum up and running on your machine is by using Docker:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker run -d --name ethereum-node -v /Users/alice/ethereum:/root \&#xA;           -p 8545:8545 -p 30303:30303 \&#xA;           ethereum/client-go&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will start &lt;code&gt;geth&lt;/code&gt; in snap-sync mode with a DB memory allowance of 1GB, as the above command does. It will also create a persistent volume in your home directory for saving your blockchain as well as map the default ports. There is also an &lt;code&gt;alpine&lt;/code&gt; tag available for a slim version of the image.&lt;/p&gt; &#xA;&lt;p&gt;Do not forget &lt;code&gt;--http.addr 0.0.0.0&lt;/code&gt;, if you want to access RPC from other containers and/or hosts. By default, &lt;code&gt;geth&lt;/code&gt; binds to the local interface and RPC endpoints are not accessible from the outside.&lt;/p&gt; &#xA;&lt;h3&gt;Programmatically interfacing &lt;code&gt;geth&lt;/code&gt; nodes&lt;/h3&gt; &#xA;&lt;p&gt;As a developer, sooner rather than later you&#39;ll want to start interacting with &lt;code&gt;geth&lt;/code&gt; and the Ethereum network via your own programs and not manually through the console. To aid this, &lt;code&gt;geth&lt;/code&gt; has built-in support for a JSON-RPC based APIs (&lt;a href=&#34;https://ethereum.github.io/execution-apis/api-documentation/&#34;&gt;standard APIs&lt;/a&gt; and &lt;a href=&#34;https://geth.ethereum.org/docs/interacting-with-geth/rpc&#34;&gt;&lt;code&gt;geth&lt;/code&gt; specific APIs&lt;/a&gt;). These can be exposed via HTTP, WebSockets and IPC (UNIX sockets on UNIX based platforms, and named pipes on Windows).&lt;/p&gt; &#xA;&lt;p&gt;The IPC interface is enabled by default and exposes all the APIs supported by &lt;code&gt;geth&lt;/code&gt;, whereas the HTTP and WS interfaces need to manually be enabled and only expose a subset of APIs due to security reasons. These can be turned on/off and configured as you&#39;d expect.&lt;/p&gt; &#xA;&lt;p&gt;HTTP based JSON-RPC API options:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;--http&lt;/code&gt; Enable the HTTP-RPC server&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--http.addr&lt;/code&gt; HTTP-RPC server listening interface (default: &lt;code&gt;localhost&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--http.port&lt;/code&gt; HTTP-RPC server listening port (default: &lt;code&gt;8545&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--http.api&lt;/code&gt; API&#39;s offered over the HTTP-RPC interface (default: &lt;code&gt;eth,net,web3&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--http.corsdomain&lt;/code&gt; Comma separated list of domains from which to accept cross origin requests (browser enforced)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--ws&lt;/code&gt; Enable the WS-RPC server&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--ws.addr&lt;/code&gt; WS-RPC server listening interface (default: &lt;code&gt;localhost&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--ws.port&lt;/code&gt; WS-RPC server listening port (default: &lt;code&gt;8546&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--ws.api&lt;/code&gt; API&#39;s offered over the WS-RPC interface (default: &lt;code&gt;eth,net,web3&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--ws.origins&lt;/code&gt; Origins from which to accept WebSocket requests&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--ipcdisable&lt;/code&gt; Disable the IPC-RPC server&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--ipcapi&lt;/code&gt; API&#39;s offered over the IPC-RPC interface (default: &lt;code&gt;admin,debug,eth,miner,net,personal,txpool,web3&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--ipcpath&lt;/code&gt; Filename for IPC socket/pipe within the datadir (explicit paths escape it)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You&#39;ll need to use your own programming environments&#39; capabilities (libraries, tools, etc) to connect via HTTP, WS or IPC to a &lt;code&gt;geth&lt;/code&gt; node configured with the above flags and you&#39;ll need to speak &lt;a href=&#34;https://www.jsonrpc.org/specification&#34;&gt;JSON-RPC&lt;/a&gt; on all transports. You can reuse the same connection for multiple requests!&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note: Please understand the security implications of opening up an HTTP/WS based transport before doing so! Hackers on the internet are actively trying to subvert Ethereum nodes with exposed APIs! Further, all browser tabs can access locally running web servers, so malicious web pages could try to subvert locally available APIs!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Operating a private network&lt;/h3&gt; &#xA;&lt;p&gt;Maintaining your own private network is more involved as a lot of configurations taken for granted in the official networks need to be manually set up.&lt;/p&gt; &#xA;&lt;h4&gt;Defining the private genesis state&lt;/h4&gt; &#xA;&lt;p&gt;First, you&#39;ll need to create the genesis state of your networks, which all nodes need to be aware of and agree upon. This consists of a small JSON file (e.g. call it &lt;code&gt;genesis.json&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;config&#34;: {&#xA;    &#34;chainId&#34;: &amp;lt;arbitrary positive integer&amp;gt;,&#xA;    &#34;homesteadBlock&#34;: 0,&#xA;    &#34;eip150Block&#34;: 0,&#xA;    &#34;eip155Block&#34;: 0,&#xA;    &#34;eip158Block&#34;: 0,&#xA;    &#34;byzantiumBlock&#34;: 0,&#xA;    &#34;constantinopleBlock&#34;: 0,&#xA;    &#34;petersburgBlock&#34;: 0,&#xA;    &#34;istanbulBlock&#34;: 0,&#xA;    &#34;berlinBlock&#34;: 0,&#xA;    &#34;londonBlock&#34;: 0&#xA;  },&#xA;  &#34;alloc&#34;: {},&#xA;  &#34;coinbase&#34;: &#34;0x0000000000000000000000000000000000000000&#34;,&#xA;  &#34;difficulty&#34;: &#34;0x20000&#34;,&#xA;  &#34;extraData&#34;: &#34;&#34;,&#xA;  &#34;gasLimit&#34;: &#34;0x2fefd8&#34;,&#xA;  &#34;nonce&#34;: &#34;0x0000000000000042&#34;,&#xA;  &#34;mixhash&#34;: &#34;0x0000000000000000000000000000000000000000000000000000000000000000&#34;,&#xA;  &#34;parentHash&#34;: &#34;0x0000000000000000000000000000000000000000000000000000000000000000&#34;,&#xA;  &#34;timestamp&#34;: &#34;0x00&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The above fields should be fine for most purposes, although we&#39;d recommend changing the &lt;code&gt;nonce&lt;/code&gt; to some random value so you prevent unknown remote nodes from being able to connect to you. If you&#39;d like to pre-fund some accounts for easier testing, create the accounts and populate the &lt;code&gt;alloc&lt;/code&gt; field with their addresses.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&#34;alloc&#34;: {&#xA;  &#34;0x0000000000000000000000000000000000000001&#34;: {&#xA;    &#34;balance&#34;: &#34;111111111&#34;&#xA;  },&#xA;  &#34;0x0000000000000000000000000000000000000002&#34;: {&#xA;    &#34;balance&#34;: &#34;222222222&#34;&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With the genesis state defined in the above JSON file, you&#39;ll need to initialize &lt;strong&gt;every&lt;/strong&gt; &lt;code&gt;geth&lt;/code&gt; node with it prior to starting it up to ensure all blockchain parameters are correctly set:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ geth init path/to/genesis.json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Creating the rendezvous point&lt;/h4&gt; &#xA;&lt;p&gt;With all nodes that you want to run initialized to the desired genesis state, you&#39;ll need to start a bootstrap node that others can use to find each other in your network and/or over the internet. The clean way is to configure and run a dedicated bootnode:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ bootnode --genkey=boot.key&#xA;$ bootnode --nodekey=boot.key&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With the bootnode online, it will display an &lt;a href=&#34;https://ethereum.org/en/developers/docs/networking-layer/network-addresses/#enode&#34;&gt;&lt;code&gt;enode&lt;/code&gt; URL&lt;/a&gt; that other nodes can use to connect to it and exchange peer information. Make sure to replace the displayed IP address information (most probably &lt;code&gt;[::]&lt;/code&gt;) with your externally accessible IP to get the actual &lt;code&gt;enode&lt;/code&gt; URL.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Note: You could also use a full-fledged &lt;code&gt;geth&lt;/code&gt; node as a bootnode, but it&#39;s the less recommended way.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Starting up your member nodes&lt;/h4&gt; &#xA;&lt;p&gt;With the bootnode operational and externally reachable (you can try &lt;code&gt;telnet &amp;lt;ip&amp;gt; &amp;lt;port&amp;gt;&lt;/code&gt; to ensure it&#39;s indeed reachable), start every subsequent &lt;code&gt;geth&lt;/code&gt; node pointed to the bootnode for peer discovery via the &lt;code&gt;--bootnodes&lt;/code&gt; flag. It will probably also be desirable to keep the data directory of your private network separated, so do also specify a custom &lt;code&gt;--datadir&lt;/code&gt; flag.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ geth --datadir=path/to/custom/data/folder --bootnodes=&amp;lt;bootnode-enode-url-from-above&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;Note: Since your network will be completely cut off from the main and test networks, you&#39;ll also need to configure a miner to process transactions and create new blocks for you.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Running a private miner&lt;/h4&gt; &#xA;&lt;p&gt;In a private network setting a single CPU miner instance is more than enough for practical purposes as it can produce a stable stream of blocks at the correct intervals without needing heavy resources (consider running on a single thread, no need for multiple ones either). To start a &lt;code&gt;geth&lt;/code&gt; instance for mining, run it with all your usual flags, extended by:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ geth &amp;lt;usual-flags&amp;gt; --mine --miner.threads=1 --miner.etherbase=0x0000000000000000000000000000000000000000&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Which will start mining blocks and transactions on a single CPU thread, crediting all proceedings to the account specified by &lt;code&gt;--miner.etherbase&lt;/code&gt;. You can further tune the mining by changing the default gas limit blocks converge to (&lt;code&gt;--miner.targetgaslimit&lt;/code&gt;) and the price transactions are accepted at (&lt;code&gt;--miner.gasprice&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;h2&gt;Contribution&lt;/h2&gt; &#xA;&lt;p&gt;Thank you for considering helping out with the source code! We welcome contributions from anyone on the internet, and are grateful for even the smallest of fixes!&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;d like to contribute to go-ethereum, please fork, fix, commit and send a pull request for the maintainers to review and merge into the main code base. If you wish to submit more complex changes though, please check up with the core devs first on &lt;a href=&#34;https://discord.gg/invite/nthXNEv&#34;&gt;our Discord Server&lt;/a&gt; to ensure those changes are in line with the general philosophy of the project and/or get some early feedback which can make both your efforts much lighter as well as our review and merge procedures quick and simple.&lt;/p&gt; &#xA;&lt;p&gt;Please make sure your contributions adhere to our coding guidelines:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Code must adhere to the official Go &lt;a href=&#34;https://golang.org/doc/effective_go.html#formatting&#34;&gt;formatting&lt;/a&gt; guidelines (i.e. uses &lt;a href=&#34;https://golang.org/cmd/gofmt/&#34;&gt;gofmt&lt;/a&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Code must be documented adhering to the official Go &lt;a href=&#34;https://golang.org/doc/effective_go.html#commentary&#34;&gt;commentary&lt;/a&gt; guidelines.&lt;/li&gt; &#xA; &lt;li&gt;Pull requests need to be based on and opened against the &lt;code&gt;master&lt;/code&gt; branch.&lt;/li&gt; &#xA; &lt;li&gt;Commit messages should be prefixed with the package(s) they modify. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;E.g. &#34;eth, rpc: make trace configs optional&#34;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Please see the &lt;a href=&#34;https://geth.ethereum.org/docs/developers/geth-developer/dev-guide&#34;&gt;Developers&#39; Guide&lt;/a&gt; for more details on configuring your environment, managing project dependencies, and testing procedures.&lt;/p&gt; &#xA;&lt;h3&gt;Contributing to geth.ethereum.org&lt;/h3&gt; &#xA;&lt;p&gt;For contributions to the &lt;a href=&#34;https://geth.ethereum.org&#34;&gt;go-ethereum website&lt;/a&gt;, please checkout and raise pull requests against the &lt;code&gt;website&lt;/code&gt; branch. For more detailed instructions please see the &lt;code&gt;website&lt;/code&gt; branch &lt;a href=&#34;https://github.com/ethereum/go-ethereum/tree/website#readme&#34;&gt;README&lt;/a&gt; or the &lt;a href=&#34;https://geth.ethereum.org/docs/developers/geth-developer/contributing&#34;&gt;contributing&lt;/a&gt; page of the website.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The go-ethereum library (i.e. all code outside of the &lt;code&gt;cmd&lt;/code&gt; directory) is licensed under the &lt;a href=&#34;https://www.gnu.org/licenses/lgpl-3.0.en.html&#34;&gt;GNU Lesser General Public License v3.0&lt;/a&gt;, also included in our repository in the &lt;code&gt;COPYING.LESSER&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;p&gt;The go-ethereum binaries (i.e. all code inside of the &lt;code&gt;cmd&lt;/code&gt; directory) are licensed under the &lt;a href=&#34;https://www.gnu.org/licenses/gpl-3.0.en.html&#34;&gt;GNU General Public License v3.0&lt;/a&gt;, also included in our repository in the &lt;code&gt;COPYING&lt;/code&gt; file.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>livekit/livekit</title>
    <updated>2023-04-16T01:55:42Z</updated>
    <id>tag:github.com,2023-04-16:/livekit/livekit</id>
    <link href="https://github.com/livekit/livekit" rel="alternate"></link>
    <summary type="html">&lt;p&gt;End-to-end stack for WebRTC. SFU media server and SDKs.&lt;/p&gt;&lt;hr&gt;&lt;picture&gt; &#xA; &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;/.github/banner_dark.png&#34;&gt; &#xA; &lt;source media=&#34;(prefers-color-scheme: light)&#34; srcset=&#34;/.github/banner_light.png&#34;&gt; &#xA; &lt;img style=&#34;width:100%;&#34; alt=&#34;The LiveKit icon, the name of the repository and some sample code in the background.&#34; src=&#34;https://raw.githubusercontent.com/livekit/livekit/master/.github/banner_light.png&#34;&gt; &#xA;&lt;/picture&gt; &#xA;&lt;!--END_BANNER_IMAGE--&gt; &#xA;&lt;h1&gt;LiveKit: Real-time video, audio and data for developers&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://livekit.io&#34;&gt;LiveKit&lt;/a&gt; is an open source project that provides scalable, multi-user conferencing based on WebRTC. It&#39;s designed to provide everything you need to build real-time video audio data capabilities in your applications.&lt;/p&gt; &#xA;&lt;p&gt;LiveKit&#39;s server is written in Go, using the awesome &lt;a href=&#34;https://github.com/pion/webrtc&#34;&gt;Pion WebRTC&lt;/a&gt; implementation.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/livekit/livekit/stargazers/&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/livekit/livekit?style=social&amp;amp;label=Star&amp;amp;maxAge=2592000&#34; alt=&#34;GitHub stars&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://livekit.io/join-slack&#34;&gt;&lt;img src=&#34;https://img.shields.io/endpoint?url=https%3A%2F%2Flivekit.io%2Fbadges%2Fslack&#34; alt=&#34;Slack community&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/livekitted&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/follow/livekitted&#34; alt=&#34;Twitter Follow&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/livekit/livekit/releases/latest&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/livekit/livekit&#34; alt=&#34;GitHub release (latest SemVer)&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/livekit/livekit/actions/workflows/buildtest.yaml&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/livekit/livekit/buildtest.yaml?branch=master&#34; alt=&#34;GitHub Workflow Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/livekit/livekit/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/livekit/livekit&#34; alt=&#34;License&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Scalable, distributed WebRTC SFU (Selective Forwarding Unit)&lt;/li&gt; &#xA; &lt;li&gt;Modern, full-featured client SDKs&lt;/li&gt; &#xA; &lt;li&gt;Built for production, supports JWT authentication&lt;/li&gt; &#xA; &lt;li&gt;Robust networking and connectivity, UDP/TCP/TURN&lt;/li&gt; &#xA; &lt;li&gt;Easy to deploy: single binary, Docker or Kubernetes&lt;/li&gt; &#xA; &lt;li&gt;Advanced features including: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://docs.livekit.io/guides/room/receive/#speaker-detection&#34;&gt;speaker detection&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://docs.livekit.io/guides/room/publish/#video-simulcast&#34;&gt;simulcast&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://blog.livekit.io/livekit-one-dot-zero/&#34;&gt;end-to-end optimizations&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://docs.livekit.io/guides/room/receive/#selective-subscription&#34;&gt;selective subscription&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://docs.livekit.io/guides/server-api/&#34;&gt;moderation APIs&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://docs.livekit.io/guides/webhooks/&#34;&gt;webhooks&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://docs.livekit.io/deploy/distributed/&#34;&gt;distributed and multi-region&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Documentation &amp;amp; Guides&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://docs.livekit.io&#34;&gt;https://docs.livekit.io&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Live Demos&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://meet.livekit.io&#34;&gt;LiveKit Meet&lt;/a&gt; (&lt;a href=&#34;https://github.com/livekit/meet&#34;&gt;source&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://spatial-audio-demo.livekit.io/&#34;&gt;Spatial Audio&lt;/a&gt; (&lt;a href=&#34;https://github.com/livekit-examples/spatial-audio&#34;&gt;source&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Livestreaming from OBS Studio (&lt;a href=&#34;https://github.com/livekit-examples/livestream&#34;&gt;source&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;SDKs &amp;amp; Tools&lt;/h2&gt; &#xA;&lt;h3&gt;Client SDKs&lt;/h3&gt; &#xA;&lt;p&gt;Client SDKs enable your frontend to include interactive, multi-user experiences.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Language&lt;/th&gt; &#xA;   &lt;th&gt;Repo&lt;/th&gt; &#xA;   &lt;th&gt; &lt;a href=&#34;https://docs.livekit.io/guides/room/events/#declarative-ui&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;Declarative UI&lt;/a&gt; &lt;/th&gt; &#xA;   &lt;th&gt;Links&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;!-- BEGIN Template&#xA;  &lt;tr&gt;&#xA;    &lt;td&gt;Language&lt;/td&gt;&#xA;    &lt;td&gt;&#xA;      &lt;a href=&#34;&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;&lt;/a&gt;&#xA;    &lt;/td&gt;&#xA;    &lt;td&gt;&lt;/td&gt;&#xA;    &lt;td&gt;&lt;/td&gt;&#xA;  &lt;/tr&gt;&#xA;  END --&gt; &#xA;  &lt;!-- JavaScript --&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;JavaScript (TypeScript)&lt;/td&gt; &#xA;   &lt;td&gt; &lt;a href=&#34;https://github.com/livekit/client-sdk-js&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;client-sdk-js&lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;a href=&#34;https://github.com/livekit/livekit-react&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;React&lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;a href=&#34;https://docs.livekit.io/client-sdk-js/&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;docs&lt;/a&gt; | &lt;a href=&#34;https://github.com/livekit/client-sdk-js/tree/main/example&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;JS example&lt;/a&gt; | &lt;a href=&#34;https://github.com/livekit/client-sdk-js/tree/main/example&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;React example&lt;/a&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;!-- Swift --&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Swift (iOS / MacOS)&lt;/td&gt; &#xA;   &lt;td&gt; &lt;a href=&#34;https://github.com/livekit/client-sdk-swift&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;client-sdk-swift&lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td&gt;Swift UI&lt;/td&gt; &#xA;   &lt;td&gt; &lt;a href=&#34;https://docs.livekit.io/client-sdk-swift/&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;docs&lt;/a&gt; | &lt;a href=&#34;https://github.com/livekit/client-example-swift&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;example&lt;/a&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;!-- Kotlin --&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Kotlin (Android)&lt;/td&gt; &#xA;   &lt;td&gt; &lt;a href=&#34;https://github.com/livekit/client-sdk-android&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;client-sdk-android&lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td&gt;Compose&lt;/td&gt; &#xA;   &lt;td&gt; &lt;a href=&#34;https://docs.livekit.io/client-sdk-android/index.html&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;docs&lt;/a&gt; | &lt;a href=&#34;https://github.com/livekit/client-sdk-android/tree/main/sample-app/src/main/java/io/livekit/android/sample&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;example&lt;/a&gt; | &lt;a href=&#34;https://github.com/livekit/client-sdk-android/tree/main/sample-app-compose/src/main/java/io/livekit/android/composesample&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;Compose example&lt;/a&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;!-- Flutter --&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Flutter (all platforms)&lt;/td&gt; &#xA;   &lt;td&gt; &lt;a href=&#34;https://github.com/livekit/client-sdk-flutter&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;client-sdk-flutter&lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td&gt;native&lt;/td&gt; &#xA;   &lt;td&gt; &lt;a href=&#34;https://docs.livekit.io/client-sdk-flutter/&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;docs&lt;/a&gt; | &lt;a href=&#34;https://github.com/livekit/client-sdk-flutter/tree/main/example&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;example&lt;/a&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;!-- Unity --&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Unity WebGL&lt;/td&gt; &#xA;   &lt;td&gt; &lt;a href=&#34;https://github.com/livekit/client-sdk-unity-web&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;client-sdk-unity-web&lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt; &lt;a href=&#34;https://livekit.github.io/client-sdk-unity-web/&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;docs&lt;/a&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;!-- React Native --&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;React Native (beta)&lt;/td&gt; &#xA;   &lt;td&gt; &lt;a href=&#34;https://github.com/livekit/client-sdk-react-native&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;client-sdk-react-native&lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td&gt;native&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;!-- Rust --&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Rust&lt;/td&gt; &#xA;   &lt;td&gt; &lt;a href=&#34;https://github.com/livekit/client-sdk-rust&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;client-sdk-rust&lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Server SDKs&lt;/h3&gt; &#xA;&lt;p&gt;Server SDKs enable your backend to generate &lt;a href=&#34;https://docs.livekit.io/guides/access-tokens/&#34;&gt;access tokens&lt;/a&gt;, call &lt;a href=&#34;https://docs.livekit.io/guides/server-api/&#34;&gt;server APIs&lt;/a&gt;, and receive &lt;a href=&#34;https://docs.livekit.io/guides/webhooks/&#34;&gt;webhooks&lt;/a&gt;. In addition, the Go SDK includes client capabilities, enabling you to build automations that behave like end-users.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Language&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Repo&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Docs&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Go&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/livekit/server-sdk-go&#34;&gt;server-sdk-go&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/livekit/server-sdk-go&#34;&gt;docs&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;JavaScript (TypeScript)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/livekit/server-sdk-js&#34;&gt;server-sdk-js&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://docs.livekit.io/server-sdk-js/&#34;&gt;docs&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Ruby&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/livekit/server-sdk-ruby&#34;&gt;server-sdk-ruby&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Java (Kotlin)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/livekit/server-sdk-kotlin&#34;&gt;server-sdk-kotlin&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Python (community)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/tradablebits/livekit-server-sdk-python&#34;&gt;tradablebits/livekit-server-sdk-python&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;PHP (community)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/agence104/livekit-server-sdk-php&#34;&gt;agence104/livekit-server-sdk-php&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Ecosystem &amp;amp; Tools&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/livekit/livekit-cli&#34;&gt;CLI&lt;/a&gt; - command line interface &amp;amp; load tester&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/livekit/egress&#34;&gt;Egress&lt;/a&gt; - export and record your rooms&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/livekit/ingress&#34;&gt;Ingress&lt;/a&gt; - ingest streams from RTMP / OBS Studio&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://hub.docker.com/r/livekit/livekit-server&#34;&gt;Docker image&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/livekit/livekit-helm&#34;&gt;Helm charts&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;p&gt;We recommend installing &lt;a href=&#34;https://github.com/livekit/livekit-cli&#34;&gt;livekit-cli&lt;/a&gt; along with the server. It lets you access server APIs, create tokens, and generate test traffic.&lt;/p&gt; &#xA;&lt;h3&gt;MacOS&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;brew install livekit&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Linux&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;curl -sSL https://get.livekit.io | bash&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Windows&lt;/h3&gt; &#xA;&lt;p&gt;Download the &lt;a href=&#34;https://github.com/livekit/livekit/releases/latest&#34;&gt;latest release here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;h3&gt;Starting LiveKit&lt;/h3&gt; &#xA;&lt;p&gt;Start LiveKit in development mode by running &lt;code&gt;livekit-server --dev&lt;/code&gt;. It&#39;ll use a placeholder API key/secret pair.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;API Key: devkey&#xA;API Secret: secret&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To customize your setup for production, refer to our &lt;a href=&#34;https://docs.livekit.io/deploy/&#34;&gt;deployment docs&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Creating access token&lt;/h3&gt; &#xA;&lt;p&gt;A user connecting to a LiveKit room requires an &lt;a href=&#34;https://docs.livekit.io/guides/access-tokens/&#34;&gt;access token&lt;/a&gt;. Access tokens (JWT) encode the user&#39;s identity and the room permissions they&#39;ve been granted. You can generate a token with our CLI:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;livekit-cli create-token \&#xA;    --api-key devkey --api-secret secret \&#xA;    --join --room my-first-room --identity user1 \&#xA;    --valid-for 24h&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Test with example app&lt;/h3&gt; &#xA;&lt;p&gt;Head over to our &lt;a href=&#34;https://example.livekit.io&#34;&gt;example app&lt;/a&gt; and enter a generated token to connect to your LiveKit server. This app is built with our &lt;a href=&#34;https://github.com/livekit/livekit-react&#34;&gt;React SDK&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Once connected, your video and audio are now being published to your new LiveKit instance!&lt;/p&gt; &#xA;&lt;h3&gt;Simulating a test publisher&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;livekit-cli join-room \&#xA;    --url ws://localhost:7880 \&#xA;    --api-key devkey --api-secret secret \&#xA;    --room my-first-room --identity bot-user1 \&#xA;    --publish-demo&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This command publishes a looped demo video to a room. Due to how the video clip was encoded (keyframes every 3s), there&#39;s a slight delay before the browser has sufficient data to begin rendering frames. This is an artifact of the simulation.&lt;/p&gt; &#xA;&lt;h2&gt;Deployment&lt;/h2&gt; &#xA;&lt;h3&gt;Use LiveKit Cloud&lt;/h3&gt; &#xA;&lt;p&gt;LiveKit Cloud is the fastest and most reliable way to run LiveKit. Every project gets free monthly bandwidth and transcoding credits.&lt;/p&gt; &#xA;&lt;p&gt;Sign up for &lt;a href=&#34;https://cloud.livekit.io/&#34;&gt;LiveKit Cloud&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Self-host&lt;/h3&gt; &#xA;&lt;p&gt;Read our &lt;a href=&#34;https://docs.livekit.io/deploy/&#34;&gt;deployment docs&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h2&gt;Building from source&lt;/h2&gt; &#xA;&lt;p&gt;Pre-requisites:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Go 1.18+ is installed&lt;/li&gt; &#xA; &lt;li&gt;GOPATH/bin is in your PATH&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Then run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git clone https://github.com/livekit/livekit&#xA;cd livekit&#xA;./bootstrap.sh&#xA;mage&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;We welcome your contributions toward improving LiveKit! Please join us &lt;a href=&#34;http://livekit.io/join-slack&#34;&gt;on Slack&lt;/a&gt; to discuss your ideas and/or PRs.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;LiveKit server is licensed under Apache License v2.0.&lt;/p&gt; &#xA;&lt;!--BEGIN_REPO_NAV--&gt; &#xA;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;/p&gt;&#xA;&lt;table&gt; &#xA; &lt;thead&gt;&#xA;  &lt;tr&gt;&#xA;   &lt;th colspan=&#34;2&#34;&gt;LiveKit Ecosystem&lt;/th&gt;&#xA;  &lt;/tr&gt;&#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt;&#xA;   &lt;td&gt;Core Infra&lt;/td&gt;&#xA;   &lt;td&gt;&lt;b&gt;livekit&lt;/b&gt; · &lt;a href=&#34;https://github.com/livekit/egress&#34;&gt;egress&lt;/a&gt; · &lt;a href=&#34;https://github.com/livekit/ingress&#34;&gt;ingress&lt;/a&gt; · &lt;a href=&#34;https://github.com/livekit/livekit-cli&#34;&gt;livekit-cli&lt;/a&gt;&lt;/td&gt;&#xA;  &lt;/tr&gt;&#xA;  &lt;tr&gt;&lt;/tr&gt; &#xA;  &lt;tr&gt;&#xA;   &lt;td&gt;Client SDKs&lt;/td&gt;&#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/livekit/components-js&#34;&gt;Components&lt;/a&gt; · &lt;a href=&#34;https://github.com/livekit/client-sdk-js&#34;&gt;JavaScript&lt;/a&gt; · &lt;a href=&#34;https://github.com/livekit/client-sdk-rust&#34;&gt;Rust&lt;/a&gt; · &lt;a href=&#34;https://github.com/livekit/client-sdk-swift&#34;&gt;iOS/macOS&lt;/a&gt; · &lt;a href=&#34;https://github.com/livekit/client-sdk-android&#34;&gt;Android&lt;/a&gt; · &lt;a href=&#34;https://github.com/livekit/client-sdk-flutter&#34;&gt;Flutter&lt;/a&gt; · &lt;a href=&#34;https://github.com/livekit/client-sdk-unity-web&#34;&gt;Unity (web)&lt;/a&gt; · &lt;a href=&#34;https://github.com/livekit/client-sdk-react-native&#34;&gt;React Native (beta)&lt;/a&gt;&lt;/td&gt;&#xA;  &lt;/tr&gt;&#xA;  &lt;tr&gt;&lt;/tr&gt; &#xA;  &lt;tr&gt;&#xA;   &lt;td&gt;Server SDKs&lt;/td&gt;&#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/livekit/server-sdk-js&#34;&gt;Node.js&lt;/a&gt; · &lt;a href=&#34;https://github.com/livekit/server-sdk-go&#34;&gt;Golang&lt;/a&gt; · &lt;a href=&#34;https://github.com/livekit/server-sdk-ruby&#34;&gt;Ruby&lt;/a&gt; · &lt;a href=&#34;https://github.com/livekit/server-sdk-kotlin&#34;&gt;Java/Kotlin&lt;/a&gt;&lt;/td&gt;&#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;!--END_REPO_NAV--&gt;</summary>
  </entry>
</feed>