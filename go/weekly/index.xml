<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-02-05T08:39:00Z</updated>
  <subtitle>Weekly Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>golang/go</title>
    <updated>2023-02-05T08:39:00Z</updated>
    <id>tag:github.com,2023-02-05:/golang/go</id>
    <link href="https://github.com/golang/go" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The Go programming language&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;The Go Programming Language&lt;/h1&gt; &#xA;&lt;p&gt;Go is an open source programming language that makes it easy to build simple, reliable, and efficient software.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://golang.org/doc/gopher/fiveyears.jpg&#34; alt=&#34;Gopher image&#34;&gt; &lt;em&gt;Gopher image by &lt;a href=&#34;https://reneefrench.blogspot.com/&#34;&gt;Renee French&lt;/a&gt;, licensed under &lt;a href=&#34;https://creativecommons.org/licenses/by/4.0/&#34;&gt;Creative Commons 4.0 Attributions license&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Our canonical Git repository is located at &lt;a href=&#34;https://go.googlesource.com/go&#34;&gt;https://go.googlesource.com/go&lt;/a&gt;. There is a mirror of the repository at &lt;a href=&#34;https://github.com/golang/go&#34;&gt;https://github.com/golang/go&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Unless otherwise noted, the Go source files are distributed under the BSD-style license found in the LICENSE file.&lt;/p&gt; &#xA;&lt;h3&gt;Download and Install&lt;/h3&gt; &#xA;&lt;h4&gt;Binary Distributions&lt;/h4&gt; &#xA;&lt;p&gt;Official binary distributions are available at &lt;a href=&#34;https://go.dev/dl/&#34;&gt;https://go.dev/dl/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;After downloading a binary release, visit &lt;a href=&#34;https://go.dev/doc/install&#34;&gt;https://go.dev/doc/install&lt;/a&gt; for installation instructions.&lt;/p&gt; &#xA;&lt;h4&gt;Install From Source&lt;/h4&gt; &#xA;&lt;p&gt;If a binary distribution is not available for your combination of operating system and architecture, visit &lt;a href=&#34;https://go.dev/doc/install/source&#34;&gt;https://go.dev/doc/install/source&lt;/a&gt; for source installation instructions.&lt;/p&gt; &#xA;&lt;h3&gt;Contributing&lt;/h3&gt; &#xA;&lt;p&gt;Go is the work of thousands of contributors. We appreciate your help!&lt;/p&gt; &#xA;&lt;p&gt;To contribute, please read the contribution guidelines at &lt;a href=&#34;https://go.dev/doc/contribute&#34;&gt;https://go.dev/doc/contribute&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Note that the Go project uses the issue tracker for bug reports and proposals only. See &lt;a href=&#34;https://go.dev/wiki/Questions&#34;&gt;https://go.dev/wiki/Questions&lt;/a&gt; for a list of places to ask questions about the Go language.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>redis/go-redis</title>
    <updated>2023-02-05T08:39:00Z</updated>
    <id>tag:github.com,2023-02-05:/redis/go-redis</id>
    <link href="https://github.com/redis/go-redis" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Type-safe Redis client for Golang&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Redis client for Go&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/redis/go-redis/actions&#34;&gt;&lt;img src=&#34;https://github.com/redis/go-redis/actions/workflows/build.yml/badge.svg?sanitize=true&#34; alt=&#34;build workflow&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pkg.go.dev/github.com/redis/go-redis/v9?tab=doc&#34;&gt;&lt;img src=&#34;https://pkg.go.dev/badge/github.com/redis/go-redis/v9&#34; alt=&#34;PkgGoDev&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://redis.uptrace.dev/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/redis-documentation-informational&#34; alt=&#34;Documentation&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/rWtp5Aj&#34;&gt;&lt;img src=&#34;https://discordapp.com/api/guilds/752070105847955518/widget.png&#34; alt=&#34;Chat&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;go-redis is brought to you by &lt;span&gt;‚≠ê&lt;/span&gt; &lt;a href=&#34;https://github.com/uptrace/uptrace&#34;&gt;&lt;strong&gt;uptrace/uptrace&lt;/strong&gt;&lt;/a&gt;. Uptrace is an open-source APM tool that supports distributed tracing, metrics, and logs. You can use it to monitor applications and set up automatic alerts to receive notifications via email, Slack, Telegram, and others.&lt;/p&gt; &#xA; &lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/redis/go-redis/master/example/otel&#34;&gt;OpenTelemetry&lt;/a&gt; example which demonstrates how you can use Uptrace to monitor go-redis.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Resources&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://redis.uptrace.dev&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/redis/go-redis/discussions&#34;&gt;Discussions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://discord.gg/rWtp5Aj&#34;&gt;Chat&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/redis/go-redis/v9&#34;&gt;Reference&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/redis/go-redis/v9#pkg-examples&#34;&gt;Examples&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Ecosystem&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/go-redis/redismock&#34;&gt;Redis Mock&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bsm/redislock&#34;&gt;Distributed Locks&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/go-redis/cache&#34;&gt;Redis Cache&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/go-redis/redis_rate&#34;&gt;Rate limiting&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This client also works with &lt;a href=&#34;https://github.com/apache/incubator-kvrocks&#34;&gt;Kvrocks&lt;/a&gt;, a distributed key value NoSQL database that uses RocksDB as storage engine and is compatible with Redis protocol.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Redis 3 commands except QUIT, MONITOR, and SYNC.&lt;/li&gt; &#xA; &lt;li&gt;Automatic connection pooling with&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://redis.uptrace.dev/guide/go-redis-pubsub.html&#34;&gt;Pub/Sub&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://redis.uptrace.dev/guide/go-redis-pipelines.html&#34;&gt;Pipelines and transactions&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://redis.uptrace.dev/guide/lua-scripting.html&#34;&gt;Scripting&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://redis.uptrace.dev/guide/go-redis-sentinel.html&#34;&gt;Redis Sentinel&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://redis.uptrace.dev/guide/go-redis-cluster.html&#34;&gt;Redis Cluster&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://redis.uptrace.dev/guide/ring.html&#34;&gt;Redis Ring&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://redis.uptrace.dev/guide/redis-performance-monitoring.html&#34;&gt;Redis Performance Monitoring&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;go-redis supports 2 last Go versions and requires a Go version with &lt;a href=&#34;https://github.com/golang/go/wiki/Modules&#34;&gt;modules&lt;/a&gt; support. So make sure to initialize a Go module:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;go mod init github.com/my/repo&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then install go-redis/&lt;strong&gt;v9&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;go get github.com/redis/go-redis/v9&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Quickstart&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;import (&#xA;    &#34;context&#34;&#xA;    &#34;github.com/redis/go-redis/v9&#34;&#xA;    &#34;fmt&#34;&#xA;)&#xA;&#xA;var ctx = context.Background()&#xA;&#xA;func ExampleClient() {&#xA;    rdb := redis.NewClient(&amp;amp;redis.Options{&#xA;        Addr:     &#34;localhost:6379&#34;,&#xA;        Password: &#34;&#34;, // no password set&#xA;        DB:       0,  // use default DB&#xA;    })&#xA;&#xA;    err := rdb.Set(ctx, &#34;key&#34;, &#34;value&#34;, 0).Err()&#xA;    if err != nil {&#xA;        panic(err)&#xA;    }&#xA;&#xA;    val, err := rdb.Get(ctx, &#34;key&#34;).Result()&#xA;    if err != nil {&#xA;        panic(err)&#xA;    }&#xA;    fmt.Println(&#34;key&#34;, val)&#xA;&#xA;    val2, err := rdb.Get(ctx, &#34;key2&#34;).Result()&#xA;    if err == redis.Nil {&#xA;        fmt.Println(&#34;key2 does not exist&#34;)&#xA;    } else if err != nil {&#xA;        panic(err)&#xA;    } else {&#xA;        fmt.Println(&#34;key2&#34;, val2)&#xA;    }&#xA;    // Output: key value&#xA;    // key2 does not exist&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Look and feel&lt;/h2&gt; &#xA;&lt;p&gt;Some corner cases:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// SET key value EX 10 NX&#xA;set, err := rdb.SetNX(ctx, &#34;key&#34;, &#34;value&#34;, 10*time.Second).Result()&#xA;&#xA;// SET key value keepttl NX&#xA;set, err := rdb.SetNX(ctx, &#34;key&#34;, &#34;value&#34;, redis.KeepTTL).Result()&#xA;&#xA;// SORT list LIMIT 0 2 ASC&#xA;vals, err := rdb.Sort(ctx, &#34;list&#34;, &amp;amp;redis.Sort{Offset: 0, Count: 2, Order: &#34;ASC&#34;}).Result()&#xA;&#xA;// ZRANGEBYSCORE zset -inf +inf WITHSCORES LIMIT 0 2&#xA;vals, err := rdb.ZRangeByScoreWithScores(ctx, &#34;zset&#34;, &amp;amp;redis.ZRangeBy{&#xA;    Min: &#34;-inf&#34;,&#xA;    Max: &#34;+inf&#34;,&#xA;    Offset: 0,&#xA;    Count: 2,&#xA;}).Result()&#xA;&#xA;// ZINTERSTORE out 2 zset1 zset2 WEIGHTS 2 3 AGGREGATE SUM&#xA;vals, err := rdb.ZInterStore(ctx, &#34;out&#34;, &amp;amp;redis.ZStore{&#xA;    Keys: []string{&#34;zset1&#34;, &#34;zset2&#34;},&#xA;    Weights: []int64{2, 3}&#xA;}).Result()&#xA;&#xA;// EVAL &#34;return {KEYS[1],ARGV[1]}&#34; 1 &#34;key&#34; &#34;hello&#34;&#xA;vals, err := rdb.Eval(ctx, &#34;return {KEYS[1],ARGV[1]}&#34;, []string{&#34;key&#34;}, &#34;hello&#34;).Result()&#xA;&#xA;// custom command&#xA;res, err := rdb.Do(ctx, &#34;set&#34;, &#34;key&#34;, &#34;value&#34;).Result()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Run the test&lt;/h2&gt; &#xA;&lt;p&gt;go-redis will start a redis-server and run the test cases.&lt;/p&gt; &#xA;&lt;p&gt;The paths of redis-server bin file and redis config file are defined in &lt;code&gt;main_test.go&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;var (&#xA;&#x9;redisServerBin, _  = filepath.Abs(filepath.Join(&#34;testdata&#34;, &#34;redis&#34;, &#34;src&#34;, &#34;redis-server&#34;))&#xA;&#x9;redisServerConf, _ = filepath.Abs(filepath.Join(&#34;testdata&#34;, &#34;redis&#34;, &#34;redis.conf&#34;))&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For local testing, you can change the variables to refer to your local files, or create a soft link to the corresponding folder for redis-server and copy the config file to &lt;code&gt;testdata/redis/&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;ln -s /usr/bin/redis-server ./go-redis/testdata/redis/src&#xA;cp ./go-redis/testdata/redis.conf ./go-redis/testdata/redis/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Lastly, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;go test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;See also&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://bun.uptrace.dev&#34;&gt;Golang ORM&lt;/a&gt; for PostgreSQL, MySQL, MSSQL, and SQLite&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://bun.uptrace.dev/postgres/&#34;&gt;Golang PostgreSQL&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://bunrouter.uptrace.dev/&#34;&gt;Golang HTTP router&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/uptrace/go-clickhouse&#34;&gt;Golang ClickHouse ORM&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributors&lt;/h2&gt; &#xA;&lt;p&gt;Thanks to all the people who already contributed!&lt;/p&gt; &#xA;&lt;a href=&#34;https://github.com/redis/go-redis/graphs/contributors&#34;&gt; &lt;img src=&#34;https://contributors-img.web.app/image?repo=redis/go-redis&#34;&gt; &lt;/a&gt;</summary>
  </entry>
  <entry>
    <title>opencontainers/image-spec</title>
    <updated>2023-02-05T08:39:00Z</updated>
    <id>tag:github.com,2023-02-05:/opencontainers/image-spec</id>
    <link href="https://github.com/opencontainers/image-spec" rel="alternate"></link>
    <summary type="html">&lt;p&gt;OCI Image Format&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;OCI Image Format Specification&lt;/h1&gt; &#xA;&lt;div&gt; &#xA; &lt;a href=&#34;https://travis-ci.org/opencontainers/image-spec&#34;&gt; &lt;img src=&#34;https://travis-ci.org/opencontainers/image-spec.svg?branch=master&#34;&gt; &lt;/a&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;The OCI Image Format project creates and maintains the software shipping container image format spec (OCI Image Format).&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/opencontainers/image-spec/main/spec.md&#34;&gt;The specification can be found here&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;This repository also provides &lt;a href=&#34;https://raw.githubusercontent.com/opencontainers/image-spec/main/specs-go&#34;&gt;Go types&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/opencontainers/image-spec/main/schema&#34;&gt;intra-blob validation tooling, and JSON Schema&lt;/a&gt;. The Go types and validation should be compatible with the current Go release; earlier Go releases are not supported.&lt;/p&gt; &#xA;&lt;p&gt;Additional documentation about how this group operates:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/opencontainers/org/raw/master/CODE_OF_CONDUCT.md&#34;&gt;Code of Conduct&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/opencontainers/image-spec/main/#roadmap&#34;&gt;Roadmap&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/opencontainers/image-spec/main/RELEASES.md&#34;&gt;Releases&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/opencontainers/image-spec/main/project.md&#34;&gt;Project Documentation&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Running an OCI Image&lt;/h2&gt; &#xA;&lt;p&gt;The OCI Image Format partner project is the &lt;a href=&#34;https://github.com/opencontainers/runtime-spec&#34;&gt;OCI Runtime Spec project&lt;/a&gt;. The Runtime Specification outlines how to run a &#34;&lt;a href=&#34;https://github.com/opencontainers/runtime-spec/raw/master/bundle.md&#34;&gt;filesystem bundle&lt;/a&gt;&#34; that is unpacked on disk. At a high-level an OCI implementation would download an OCI Image then unpack that image into an OCI Runtime filesystem bundle. At this point the OCI Runtime Bundle would be run by an OCI Runtime.&lt;/p&gt; &#xA;&lt;p&gt;This entire workflow supports the UX that users have come to expect from container engines like Docker and rkt: primarily, the ability to run an image with no additional arguments:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;docker run example.com/org/app:v1.0.0&lt;/li&gt; &#xA; &lt;li&gt;rkt run example.com/org/app,version=v1.0.0&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To support this UX the OCI Image Format contains sufficient information to launch the application on the target platform (e.g. command, arguments, environment variables, etc).&lt;/p&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Q: Why doesn&#39;t this project mention distribution?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;A: Distribution, for example using HTTP as both Docker v2.2 and AppC do today, is currently out of scope. There has been &lt;a href=&#34;https://groups.google.com/a/opencontainers.org/d/msg/tob/A3JnmI-D-6Y/tLuptPDHAgAJ&#34;&gt;some discussion on the TOB mailing list&lt;/a&gt; to make distribution an optional layer, but this topic is a work in progress.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Q: What happens to AppC or Docker Image Formats?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;A: Existing formats can continue to be a proving ground for technologies, as needed. The OCI Image Format project strives to provide a dependable open specification that can be shared between different tools and be evolved for years or decades of compatibility; as the deb and rpm format have.&lt;/p&gt; &#xA;&lt;p&gt;Find more &lt;a href=&#34;https://www.opencontainers.org/faq&#34;&gt;FAQ on the OCI site&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Roadmap&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://github.com/opencontainers/image-spec/milestones&#34;&gt;GitHub milestones&lt;/a&gt; lay out the path to the future improvements.&lt;/p&gt; &#xA;&lt;h1&gt;Contributing&lt;/h1&gt; &#xA;&lt;p&gt;Development happens on GitHub for the spec. Issues are used for bugs and actionable items and longer discussions can happen on the &lt;a href=&#34;https://raw.githubusercontent.com/opencontainers/image-spec/main/#mailing-list&#34;&gt;mailing list&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The specification and code is licensed under the Apache 2.0 license found in the &lt;code&gt;LICENSE&lt;/code&gt; file of this repository.&lt;/p&gt; &#xA;&lt;h2&gt;Discuss your design&lt;/h2&gt; &#xA;&lt;p&gt;The project welcomes submissions, but please let everyone know what you are working on.&lt;/p&gt; &#xA;&lt;p&gt;Before undertaking a nontrivial change to this specification, send mail to the &lt;a href=&#34;https://raw.githubusercontent.com/opencontainers/image-spec/main/#mailing-list&#34;&gt;mailing list&lt;/a&gt; to discuss what you plan to do. This gives everyone a chance to validate the design, helps prevent duplication of effort, and ensures that the idea fits. It also guarantees that the design is sound before code is written; a GitHub pull-request is not the place for high-level discussions.&lt;/p&gt; &#xA;&lt;p&gt;Typos and grammatical errors can go straight to a pull-request. When in doubt, start on the &lt;a href=&#34;https://raw.githubusercontent.com/opencontainers/image-spec/main/#mailing-list&#34;&gt;mailing-list&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Meetings&lt;/h2&gt; &#xA;&lt;p&gt;Please see the &lt;a href=&#34;https://github.com/opencontainers/org#meetings&#34;&gt;OCI org repository README&lt;/a&gt; for the most up-to-date information on OCI contributor and maintainer meeting schedules. You can also find links to meeting agendas and minutes for all prior meetings.&lt;/p&gt; &#xA;&lt;h2&gt;Mailing List&lt;/h2&gt; &#xA;&lt;p&gt;You can subscribe and join the mailing list on &lt;a href=&#34;https://groups.google.com/a/opencontainers.org/forum/#!forum/dev&#34;&gt;Google Groups&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;IRC&lt;/h2&gt; &#xA;&lt;p&gt;OCI discussion happens on #opencontainers on Freenode (&lt;a href=&#34;http://ircbot.wl.linuxfoundation.org/eavesdrop/%23opencontainers/&#34;&gt;logs&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;h2&gt;Markdown style&lt;/h2&gt; &#xA;&lt;p&gt;To keep consistency throughout the Markdown files in the Open Container spec all files should be formatted one sentence per line. This fixes two things: it makes diffing easier with git and it resolves fights about line wrapping length. For example, this paragraph will span three lines in the Markdown source.&lt;/p&gt; &#xA;&lt;h2&gt;Git commit&lt;/h2&gt; &#xA;&lt;h3&gt;Sign your work&lt;/h3&gt; &#xA;&lt;p&gt;The sign-off is a simple line at the end of the explanation for the patch, which certifies that you wrote it or otherwise have the right to pass it on as an open-source patch. The rules are pretty simple: if you can certify the below (from &lt;a href=&#34;https://developercertificate.org/&#34;&gt;developercertificate.org&lt;/a&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Developer Certificate of Origin&#xA;Version 1.1&#xA;&#xA;Copyright (C) 2004, 2006 The Linux Foundation and its contributors.&#xA;660 York Street, Suite 102,&#xA;San Francisco, CA 94110 USA&#xA;&#xA;Everyone is permitted to copy and distribute verbatim copies of this&#xA;license document, but changing it is not allowed.&#xA;&#xA;&#xA;Developer&#39;s Certificate of Origin 1.1&#xA;&#xA;By making a contribution to this project, I certify that:&#xA;&#xA;(a) The contribution was created in whole or in part by me and I&#xA;    have the right to submit it under the open source license&#xA;    indicated in the file; or&#xA;&#xA;(b) The contribution is based upon previous work that, to the best&#xA;    of my knowledge, is covered under an appropriate open source&#xA;    license and I have the right under that license to submit that&#xA;    work with modifications, whether created in whole or in part&#xA;    by me, under the same open source license (unless I am&#xA;    permitted to submit under a different license), as indicated&#xA;    in the file; or&#xA;&#xA;(c) The contribution was provided directly to me by some other&#xA;    person who certified (a), (b) or (c) and I have not modified&#xA;    it.&#xA;&#xA;(d) I understand and agree that this project and the contribution&#xA;    are public and that a record of the contribution (including all&#xA;    personal information I submit with it, including my sign-off) is&#xA;    maintained indefinitely and may be redistributed consistent with&#xA;    this project or the open source license(s) involved.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;then you just add a line to every git commit message:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Signed-off-by: Joe Smith &amp;lt;joe@gmail.com&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;using your real name (sorry, no pseudonyms or anonymous contributions.)&lt;/p&gt; &#xA;&lt;p&gt;You can add the sign off when creating the git commit via &lt;code&gt;git commit -s&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Commit Style&lt;/h3&gt; &#xA;&lt;p&gt;Simple house-keeping for clean git history. Read more on &lt;a href=&#34;https://chris.beams.io/posts/git-commit/&#34;&gt;How to Write a Git Commit Message&lt;/a&gt; or the Discussion section of &lt;a href=&#34;https://git-scm.com/docs/git-commit&#34;&gt;&lt;code&gt;git-commit(1)&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Separate the subject from body with a blank line&lt;/li&gt; &#xA; &lt;li&gt;Limit the subject line to 50 characters&lt;/li&gt; &#xA; &lt;li&gt;Capitalize the subject line&lt;/li&gt; &#xA; &lt;li&gt;Do not end the subject line with a period&lt;/li&gt; &#xA; &lt;li&gt;Use the imperative mood in the subject line&lt;/li&gt; &#xA; &lt;li&gt;Wrap the body at 72 characters&lt;/li&gt; &#xA; &lt;li&gt;Use the body to explain what and why vs. how&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If there was important/useful/essential conversation or information, copy or include a reference&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol start=&#34;8&#34;&gt; &#xA; &lt;li&gt;When possible, one keyword to scope the change in the subject (i.e. &#34;README: ...&#34;, &#34;runtime: ...&#34;)&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
</feed>