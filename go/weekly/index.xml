<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-03-05T01:52:06Z</updated>
  <subtitle>Weekly Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>869413421/chatgpt-web</title>
    <updated>2023-03-05T01:52:06Z</updated>
    <id>tag:github.com,2023-03-05:/869413421/chatgpt-web</id>
    <link href="https://github.com/869413421/chatgpt-web" rel="alternate"></link>
    <summary type="html">&lt;p&gt;基于ChatGPT3.5 API实现的私有化web程序&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;chatgpt-web&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/869413421/wechatbot/releases/tag/v1.1.3&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/869413421/chatgpt-web.svg?style=flat-square&#34; alt=&#34;Release&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/stars/869413421/chatgpt-web.svg?sanitize=true&#34; alt=&#34;Github stars&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/forks/869413421/chatgpt-web.svg?style=flat-square&#34; alt=&#34;Forks&#34;&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;本项目可以一键部署属于自己定制化的 chatgpt web 程序(兼容gpt3.5)， 只需下载release中对应平台的项目文件，修改配置后执行，打开 &lt;a href=&#34;http://127.0.0.1:8080&#34;&gt;http://127.0.0.1:8080&lt;/a&gt; ，便可以获得属于自己的chatgpt网站。&lt;/p&gt; &#xA; &lt;p&gt;参考项目：&lt;a href=&#34;https://github.com/git-cloner/codegen&#34;&gt;codegen&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;项目当前默认为示例中AI聊天机器人参数，可以根据自己需求定制化。&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;注意，每个参数都可能影响你得到不一样的聊天效果,改变一个参数你就可能得到另一种回答，所以请自己尝试去调试，不要上来就抱怨人工智障。文档中有二十多中参数示例，如AI聊天机器人 ，产品名称生成，python代码修复器等等等...&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;详情参考官方详细&lt;a href=&#34;https://beta.openai.com/examples&#34;&gt;参数示例&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h1&gt;更新记录&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;增加代理配置，解决国内无法使用。2023-03-04&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;项目功能&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;请求openai增加代理（防墙）&lt;/li&gt; &#xA; &lt;li&gt;AI性格设定&lt;/li&gt; &#xA; &lt;li&gt;兼容3.0和3.5API&lt;/li&gt; &#xA; &lt;li&gt;基本问答界面&lt;/li&gt; &#xA; &lt;li&gt;参数可配置&lt;/li&gt; &#xA; &lt;li&gt;markdown语法&lt;/li&gt; &#xA; &lt;li&gt;提问上下文&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;使用前提&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;有openai账号，并且创建好api_key，注册事项可以参考&lt;a href=&#34;https://juejin.cn/post/7173447848292253704&#34;&gt;此文章&lt;/a&gt; 。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h1&gt;项目初衷&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;自chatgpt流行以后，一直在使用其作为自己的编码工具。奈何官网时常在问题问到一半时短路，一些得到的答案就此丢失。 为了解决这个问题，我选择了更加稳定的API套上客户端来作为自己的工具。定制化地做了一些功能，如存储提问记录，统计提问信息等一些功能，同时做上内网穿透提供给没有办法体验chatgpt的朋友使用，由此大大降低了使用门槛。 当前项目是初始功能版本，开源出来给有需要的朋友使用。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h1&gt;快速开始&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;第一种：直接下载二进制(适合对编程不了解的同学)&lt;/code&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;非技术人员请直接下载release中的&lt;a href=&#34;https://github.com/869413421/chatgpt-web/releases&#34;&gt;压缩包&lt;/a&gt; ，请根据自己系统以及架构选择合适的压缩包，下载之后直接解压运行。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;下载之后，在本地解压，即可看到可执行程序，与配置文件：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# windows&#xA;1.下载压缩包解压&#xA;2.复制文件中config.dev.json更改为config.json&#xA;3.将config.json中的api_key替换为自己的&#xA;4.双击exe运行，启动服务&#xA;&#xA;# linux&#xA;$ tar xf chatgpt-web-v0.0.2-darwin-arm64.tar.gz # 解压&#xA;$ cd chatgpt-web-v0.0.2-darwin-arm64&#xA;$ cp config.dev.json # 根据情况调整配置文件内容&#xA;$ ./chatgpt-web  # 直接运行&#xA;&#xA;# 如果要守护在后台运行&#xA;$ nohup ./chatgpt-web &amp;amp;&amp;gt; run.log &amp;amp;&#xA;$ tail -f run.log&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;第二种：基于源码运行(适合了解go语言编程的同学)&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# 获取项目&#xA;$ git clone https://github.com/869413421/chatgpt-web.git&#xA;&#xA;# 进入项目目录&#xA;$ cd chatgpt-web&#xA;&#xA;# 复制配置文件&#xA;$ copy config.dev.json config.json&#xA;&#xA;# 启动项目&#xA;$ go run main.go&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;使用docker运行&lt;/h1&gt; &#xA;&lt;p&gt;你可以使用docker快速运行本项目。 &lt;code&gt;第一种：基于环境变量运行&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# 运行项目，环境变量参考下方配置说明&#xA;$ docker run -itd --name chatgpt-web --restart=always \&#xA; -e APIKEY=换成你的key \&#xA; -e MODEL=gpt-3.5-turbo-0301 \&#xA; -e BOT_DESC=你是一个AI助手,我需要你模拟一名温柔贴心的女朋友来回答我的问题. \&#xA; -e MAX_TOKENS=512 \&#xA; -e TEMPREATURE=0.9 \&#xA; -e TOP_P=1 \&#xA; -e FREQ=0.0 \&#xA; -e PRES=0.6 \&#xA; -e PROXY=http://host.docker.internal:10809 \&#xA; -p 8080:8080 \&#xA; qingshui869413421/chatgpt-web:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;运行命令中映射的配置文件参考下边的配置文件说明。&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;第二种：基于配置文件挂载运行&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# 复制配置文件，根据自己实际情况，调整配置里的内容&#xA;$ cp config.dev.json config.json  # 其中 config.dev.json 从项目的根目录获取&#xA;&#xA;# 运行项目&#xA;$ docker run -itd --name chatgpt-web -v `pwd`/config.json:/app/config.json -p 8080:8080 qingshui869413421/chatgpt-web:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;其中配置文件参考下边的配置文件说明。&lt;/p&gt; &#xA;&lt;h1&gt;配置文件说明&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code&gt;{&#xA;  &#34;api_key&#34;: &#34;your api key&#34;,&#xA;  &#34;port&#34;: 8080,&#xA;  &#34;bot_desc&#34;: &#34;你是一个AI助手，我需要你模拟一名温柔贴心的女朋友来回答我的问题。&#34;,&#xA;  &#34;proxy&#34;: &#34;http://host.docker.internal:10809&#34;,&#xA;  &#34;model&#34;: &#34;gpt-3.5-turbo-0301&#34;,&#xA;  &#34;max_tokens&#34;: 512,&#xA;  &#34;temperature&#34;: 0.9,&#xA;  &#34;top_p&#34;: 1,&#xA;  &#34;frequency_penalty&#34;: 0.0,&#xA;  &#34;presence_penalty&#34;: 0.6&#xA;}&#xA;&#xA;api_key：openai api_key&#xA;port: http服务端口&#xA;proxy: openai请求代理，防墙。&#xA;bot_desc：AI特征，非常重要，功能等同给与AI一个身份设定&#xA;max_tokens: GPT响应字符数，最大2048，默认值512。max_tokens会影响接口响应速度，字符越大响应越慢。&#xA;model: GPT选用模型，默认text-davinci-003，具体选项参考官网训练场&#xA;temperature: GPT热度，0到1，默认0.9。数字越大创造力越强，但更偏离训练事实，越低越接近训练事实&#xA;top_p: 使用温度采样的替代方法称为核心采样，其中模型考虑具有top_p概率质量的令牌的结果。因此，0.1 意味着只考虑包含前 10% 概率质量的代币。&#xA;frequency_penalty: &#xA;presence_penalty:&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;免责声明 Disclaimers&lt;/h1&gt; &#xA;&lt;p&gt;The code is for demo and testing only. 代码仅用于演示和测试。&lt;/p&gt; &#xA;&lt;p&gt;⚠⚠⚠请勿将本系统代码用于商业用途！&lt;/p&gt; &#xA;&lt;p&gt;仿冒或冒用ChatGPT、OpenAI名义开展经营活动，可能构成《商标法》、《反不正当竞争法》下的一系列侵权行为； 以之牟利造成消费者损失的，可能产生《商标法》、《反不正当竞争法》、《消费者权益保护法》下的民事或行政责任，情节严重并造成重大损失的，还有可能构成刑事犯罪； 如果提供这种跨境经营服务存在私自搭建国际信道的情形，还有可能违反《网络安全法》、《刑法》的相关规定，承担行政责任或构成刑事犯罪。&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>sashabaranov/go-openai</title>
    <updated>2023-03-05T01:52:06Z</updated>
    <id>tag:github.com,2023-03-05:/sashabaranov/go-openai</id>
    <link href="https://github.com/sashabaranov/go-openai" rel="alternate"></link>
    <summary type="html">&lt;p&gt;OpenAI ChatGPT, GPT-3, DALL·E, Whisper API wrapper for Go&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Go OpenAI&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://godoc.org/github.com/sashabaranov/go-openai&#34;&gt;&lt;img src=&#34;http://img.shields.io/badge/GoDoc-Reference-blue.svg?sanitize=true&#34; alt=&#34;GoDoc&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/sashabaranov/go-openai&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/sashabaranov/go-openai&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: the repository was recently renamed from &lt;code&gt;go-gpt3&lt;/code&gt; to &lt;code&gt;go-openai&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;This library provides Go clients for &lt;a href=&#34;https://platform.openai.com/&#34;&gt;OpenAI API&lt;/a&gt;. We support:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ChatGPT&lt;/li&gt; &#xA; &lt;li&gt;GPT-3&lt;/li&gt; &#xA; &lt;li&gt;DALL·E 2&lt;/li&gt; &#xA; &lt;li&gt;Whisper&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Installation:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;go get github.com/sashabaranov/go-openai&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;ChatGPT example usage:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;context&#34;&#xA;&#x9;&#34;fmt&#34;&#xA;&#x9;openai &#34;github.com/sashabaranov/go-openai&#34;&#xA;)&#xA;&#xA;func main() {&#xA;&#x9;client := openai.NewClient(&#34;your token&#34;)&#xA;&#x9;resp, err := client.CreateChatCompletion(&#xA;&#x9;&#x9;context.Background(),&#xA;&#x9;&#x9;openai.ChatCompletionRequest{&#xA;&#x9;&#x9;&#x9;Model: openai.GPT3Dot5Turbo,&#xA;&#x9;&#x9;&#x9;Messages: []openai.ChatCompletionMessage{&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Role:    openai.ChatMessageRoleUser,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Content: &#34;Hello!&#34;,&#xA;&#x9;&#x9;&#x9;&#x9;},&#xA;&#x9;&#x9;&#x9;},&#xA;&#x9;&#x9;},&#xA;&#x9;)&#xA;&#xA;&#x9;if err != nil {&#xA;&#x9;&#x9;return&#xA;&#x9;}&#xA;&#xA;&#x9;fmt.Println(resp.Choices[0].Message.Content)&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Other examples:&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;GPT-3 completion&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;context&#34;&#xA;&#x9;&#34;fmt&#34;&#xA;&#x9;openai &#34;github.com/sashabaranov/go-openai&#34;&#xA;)&#xA;&#xA;func main() {&#xA;&#x9;c := openai.NewClient(&#34;your token&#34;)&#xA;&#x9;ctx := context.Background()&#xA;&#xA;&#x9;req := openai.CompletionRequest{&#xA;&#x9;&#x9;Model:     openai.GPT3Ada,&#xA;&#x9;&#x9;MaxTokens: 5,&#xA;&#x9;&#x9;Prompt:    &#34;Lorem ipsum&#34;,&#xA;&#x9;}&#xA;&#x9;resp, err := c.CreateCompletion(ctx, req)&#xA;&#x9;if err != nil {&#xA;&#x9;&#x9;return&#xA;&#x9;}&#xA;&#x9;fmt.Println(resp.Choices[0].Text)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;GPT-3 streaming completion&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;errors&#34;&#xA;&#x9;&#34;context&#34;&#xA;&#x9;&#34;fmt&#34;&#xA;&#x9;&#34;io&#34;&#xA;&#x9;openai &#34;github.com/sashabaranov/go-openai&#34;&#xA;)&#xA;&#xA;func main() {&#xA;&#x9;c := openai.NewClient(&#34;your token&#34;)&#xA;&#x9;ctx := context.Background()&#xA;&#xA;&#x9;req := openai.CompletionRequest{&#xA;&#x9;&#x9;Model:     openai.GPT3Ada,&#xA;&#x9;&#x9;MaxTokens: 5,&#xA;&#x9;&#x9;Prompt:    &#34;Lorem ipsum&#34;,&#xA;&#x9;&#x9;Stream:    true,&#xA;&#x9;}&#xA;&#x9;stream, err := c.CreateCompletionStream(ctx, req)&#xA;&#x9;if err != nil {&#xA;&#x9;&#x9;return&#xA;&#x9;}&#xA;&#x9;defer stream.Close()&#xA;&#xA;&#x9;for {&#xA;&#x9;&#x9;response, err := stream.Recv()&#xA;&#x9;&#x9;if errors.Is(err, io.EOF) {&#xA;&#x9;&#x9;&#x9;fmt.Println(&#34;Stream finished&#34;)&#xA;&#x9;&#x9;&#x9;return&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;if err != nil {&#xA;&#x9;&#x9;&#x9;fmt.Printf(&#34;Stream error: %v\n&#34;, err)&#xA;&#x9;&#x9;&#x9;return&#xA;&#x9;&#x9;}&#xA;&#xA;&#xA;&#x9;&#x9;fmt.Printf(&#34;Stream response: %v\n&#34;, response)&#xA;&#x9;}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt;</summary>
  </entry>
  <entry>
    <title>amitshekhariitbhu/go-backend-clean-architecture</title>
    <updated>2023-03-05T01:52:06Z</updated>
    <id>tag:github.com,2023-03-05:/amitshekhariitbhu/go-backend-clean-architecture</id>
    <link href="https://github.com/amitshekhariitbhu/go-backend-clean-architecture" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Go (Golang) Backend Clean Architecture project with Gin, MongoDB, JWT Authentication Middleware, Test, and Docker.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Go Backend Clean Architecture&lt;/h1&gt; &#xA;&lt;p&gt;A Go (Golang) Backend Clean Architecture project with Gin, MongoDB, JWT Authentication Middleware, Test, and Docker.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/amitshekhariitbhu/go-backend-clean-architecture/raw/main/assets/go-backend-clean-architecture.png?raw=true&#34; alt=&#34;Go Backend Clean Architecture&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;You can use this project as a template to build your Backend project in the Go language on top of this project.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Before creating this project, I have gone through more than 20 projects related to the Go(Golang) Clean Architecture on GitHub.&lt;/p&gt; &#xA;&lt;p&gt;Thanks to all those projects, I learned a lot from all of those. As I keep saying:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;The best way to learn to code is to code. But, to write good code, you will also have to read good code. Make a habit of reading good code. You can find many open-source projects on GitHub and start reading.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Then for the implementation part, I combined all of my ideas, experiences, and learnings from those projects to create this project.&lt;/p&gt; &#xA;&lt;p&gt;And as always I would love to get feedback on my project. This helps everyone and most importantly me.&lt;/p&gt; &#xA;&lt;p&gt;Learn about this project architecture in detail from the blogs mentioned below:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://amitshekhar.me/blog/go-backend-clean-architecture&#34;&gt;Go Backend Clean Architecture&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://amitshekhar.me/blog/go-jwt-authentication-middleware&#34;&gt;Go JWT Authentication Middleware&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://amitshekhar.me/blog/configuration-with-viper-in-go&#34;&gt;Configuration with Viper in Go&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://amitshekhar.me/blog/test-with-testify-and-mockery-in-go&#34;&gt;Test with Testify and Mockery in Go&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Architecture Layers of the project&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Router&lt;/li&gt; &#xA; &lt;li&gt;Controller&lt;/li&gt; &#xA; &lt;li&gt;Usecase&lt;/li&gt; &#xA; &lt;li&gt;Repository&lt;/li&gt; &#xA; &lt;li&gt;Domain&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/amitshekhariitbhu/go-backend-clean-architecture/raw/main/assets/go-backend-arch-diagram.png?raw=true&#34; alt=&#34;Go Backend Clean Architecture Diagram&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;About me&lt;/h2&gt; &#xA;&lt;p&gt;Hi, I am &lt;a href=&#34;https://amitshekhar.me&#34;&gt;&lt;strong&gt;Amit Shekhar&lt;/strong&gt;&lt;/a&gt;, I have mentored many developers, and their efforts landed them high-paying tech jobs, helped many tech companies in solving their unique problems, and created many open-source libraries being used by top companies. I am passionate about sharing knowledge through open-source, blogs, and videos.&lt;/p&gt; &#xA;&lt;p&gt;You can connect with me on:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/amitiitbhu&#34;&gt;Twitter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/@amitshekhar&#34;&gt;YouTube&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/in/amit-shekhar-iitbhu&#34;&gt;LinkedIn&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/amitshekhariitbhu&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Major Packages used in this project&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;gin&lt;/strong&gt;: Gin is an HTTP web framework written in Go (Golang). It features a Martini-like API with much better performance -- up to 40 times faster. If you need a smashing performance, get yourself some Gin.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;mongo go driver&lt;/strong&gt;: The Official Golang driver for MongoDB.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;jwt&lt;/strong&gt;: JSON Web Tokens are an open, industry-standard RFC 7519 method for representing claims securely between two parties. Used for Access Token and Refresh Token.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;viper&lt;/strong&gt;: For loading configuration from the &lt;code&gt;.env&lt;/code&gt; file. Go configuration with fangs. Find, load, and unmarshal a configuration file in JSON, TOML, YAML, HCL, INI, envfile, or Java properties formats.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;bcrypt&lt;/strong&gt;: Package bcrypt implements Provos and Mazières&#39;s bcrypt adaptive hashing algorithm.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;testify&lt;/strong&gt;: A toolkit with common assertions and mocks that plays nicely with the standard library.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;mockery&lt;/strong&gt;: A mock code autogenerator for Golang used in testing.&lt;/li&gt; &#xA; &lt;li&gt;Check more packages in &lt;code&gt;go.mod&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Public API Request Flow without JWT Authentication Middleware&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/amitshekhariitbhu/go-backend-clean-architecture/raw/main/assets/go-arch-public-api-request-flow.png?raw=true&#34; alt=&#34;Public API Request Flow&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Private API Request Flow with JWT Authentication Middleware&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;JWT Authentication Middleware for Access Token Validation.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/amitshekhariitbhu/go-backend-clean-architecture/raw/main/assets/go-arch-private-api-request-flow.png?raw=true&#34; alt=&#34;Private API Request Flow&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;How to run this project?&lt;/h3&gt; &#xA;&lt;p&gt;We can run this Go Backend Clean Architecture project with or without Docker. Here, I am providing both ways to run this project.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Clone this project&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Move to your workspace&#xA;cd your-workspace&#xA;&#xA;# Clone this project into your workspace&#xA;git clone https://github.com/amitshekhariitbhu/go-backend-clean-architecture.git&#xA;&#xA;# Move to the project root directory&#xA;cd go-backend-clean-architecture&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Run without Docker&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Create a file &lt;code&gt;.env&lt;/code&gt; similar to &lt;code&gt;.env.example&lt;/code&gt; at the root directory with your configuration.&lt;/li&gt; &#xA; &lt;li&gt;Install &lt;code&gt;go&lt;/code&gt; if not installed on your machine.&lt;/li&gt; &#xA; &lt;li&gt;Install &lt;code&gt;MongoDB&lt;/code&gt; if not installed on your machine.&lt;/li&gt; &#xA; &lt;li&gt;Important: Change the &lt;code&gt;DB_HOST&lt;/code&gt; to &lt;code&gt;localhost&lt;/code&gt; (&lt;code&gt;DB_HOST=localhost&lt;/code&gt;) in &lt;code&gt;.env&lt;/code&gt; configuration file. &lt;code&gt;DB_HOST=mongodb&lt;/code&gt; is needed only when you run with Docker.&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;go run cmd/main.go&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Access API using &lt;code&gt;http://localhost:8080&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Run with Docker&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Create a file &lt;code&gt;.env&lt;/code&gt; similar to &lt;code&gt;.env.example&lt;/code&gt; at the root directory with your configuration.&lt;/li&gt; &#xA; &lt;li&gt;Install Docker and Docker Compose.&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;docker-compose up -d&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Access API using &lt;code&gt;http://localhost:8080&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;How to run the test?&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Run all tests&#xA;go test ./...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;How to generate the mock code?&lt;/h3&gt; &#xA;&lt;p&gt;In this project, to test, we need to generate mock code for the use-case, repository, and database.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Generate mock code for the usecase and repository&#xA;mockery --dir=domain --output=domain/mocks --outpkg=mocks --all&#xA;&#xA;# Generate mock code for the database&#xA;mockery --dir=mongo --output=mongo/mocks --outpkg=mocks --all&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Whenever you make changes in the interfaces of these use-cases, repositories, or databases, you need to run the corresponding command to regenerate the mock code for testing.&lt;/p&gt; &#xA;&lt;h3&gt;The Complete Project Folder Structure&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;.&#xA;├── Dockerfile&#xA;├── api&#xA;│   ├── controller&#xA;│   │   ├── login_controller.go&#xA;│   │   ├── profile_controller.go&#xA;│   │   ├── profile_controller_test.go&#xA;│   │   ├── refresh_token_controller.go&#xA;│   │   ├── signup_controller.go&#xA;│   │   └── task_controller.go&#xA;│   ├── middleware&#xA;│   │   └── jwt_auth_middleware.go&#xA;│   └── route&#xA;│       ├── login_route.go&#xA;│       ├── profile_route.go&#xA;│       ├── refresh_token_route.go&#xA;│       ├── route.go&#xA;│       ├── signup_route.go&#xA;│       └── task_route.go&#xA;├── bootstrap&#xA;│   ├── app.go&#xA;│   ├── database.go&#xA;│   └── env.go&#xA;├── cmd&#xA;│   └── main.go&#xA;├── docker-compose.yaml&#xA;├── domain&#xA;│   ├── error_response.go&#xA;│   ├── jwt_custom.go&#xA;│   ├── login.go&#xA;│   ├── profile.go&#xA;│   ├── refresh_token.go&#xA;│   ├── signup.go&#xA;│   ├── success_response.go&#xA;│   ├── task.go&#xA;│   └── user.go&#xA;├── go.mod&#xA;├── go.sum&#xA;├── internal&#xA;│   └── tokenutil&#xA;│       └── tokenutil.go&#xA;├── mongo&#xA;│   └── mongo.go&#xA;├── repository&#xA;│   ├── task_repository.go&#xA;│   ├── user_repository.go&#xA;│   └── user_repository_test.go&#xA;└── usecase&#xA;    ├── login_usecase.go&#xA;    ├── profile_usecase.go&#xA;    ├── refresh_token_usecase.go&#xA;    ├── signup_usecase.go&#xA;    ├── task_usecase.go&#xA;    └── task_usecase_test.go&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;API documentation of Go Backend Clean Architecture&lt;/h3&gt; &#xA;&lt;a href=&#34;https://documenter.getpostman.com/view/391588/2s8Z75S9xy&#34; target=&#34;_blank&#34;&gt; &lt;img alt=&#34;View API Doc Button&#34; src=&#34;https://github.com/amitshekhariitbhu/go-backend-clean-architecture/raw/main/assets/button-view-api-docs.png?raw=true&#34; width=&#34;200&#34; height=&#34;60&#34;&gt; &lt;/a&gt; &#xA;&lt;h3&gt;Example API Request and Response&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;signup&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Request&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;pre&gt;&lt;code&gt;curl --location --request POST &#39;http://localhost:8080/signup&#39; \&#xA;--data-urlencode &#39;email=test@gmail.com&#39; \&#xA;--data-urlencode &#39;password=test&#39; \&#xA;--data-urlencode &#39;name=Test Name&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Response&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;accessToken&#34;: &#34;access_token&#34;,&#xA;  &#34;refreshToken&#34;: &#34;refresh_token&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;login&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Request&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;pre&gt;&lt;code&gt;curl --location --request POST &#39;http://localhost:8080/login&#39; \&#xA;--data-urlencode &#39;email=test@gmail.com&#39; \&#xA;--data-urlencode &#39;password=test&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Response&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;accessToken&#34;: &#34;access_token&#34;,&#xA;  &#34;refreshToken&#34;: &#34;refresh_token&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;profile&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Request&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;pre&gt;&lt;code&gt;curl --location --request GET &#39;http://localhost:8080/profile&#39; \&#xA;--header &#39;Authorization: Bearer access_token&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Response&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;name&#34;: &#34;Test Name&#34;,&#xA;  &#34;email&#34;: &#34;test@gmail.com&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;task create&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Request&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;pre&gt;&lt;code&gt;curl --location --request POST &#39;http://localhost:8080/task&#39; \&#xA;--header &#39;Authorization: Bearer access_token&#39; \&#xA;--header &#39;Content-Type: application/x-www-form-urlencoded&#39; \&#xA;--data-urlencode &#39;title=Test Task&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Response&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;message&#34;: &#34;Task created successfully&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;task fetch&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Request&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;pre&gt;&lt;code&gt;curl --location --request GET &#39;http://localhost:8080/task&#39; \&#xA;--header &#39;Authorization: Bearer access_token&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Response&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;[&#xA;  {&#xA;    &#34;title&#34;: &#34;Test Task&#34;&#xA;  },&#xA;  {&#xA;    &#34;title&#34;: &#34;Test Another Task&#34;&#xA;  }&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;refresh token&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Request&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;pre&gt;&lt;code&gt;curl --location --request POST &#39;http://localhost:8080/refresh&#39; \&#xA;--header &#39;Content-Type: application/x-www-form-urlencoded&#39; \&#xA;--data-urlencode &#39;refreshToken=refresh_token&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Response&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;accessToken&#34;: &#34;access_token&#34;,&#xA;  &#34;refreshToken&#34;: &#34;refresh_token&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;TODO&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Improvement based on feedback.&lt;/li&gt; &#xA; &lt;li&gt;Add more test cases.&lt;/li&gt; &#xA; &lt;li&gt;Always try to update with the latest version of the packages used.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;If this project helps you in anyway, show your love ❤️ by putting a ⭐ on this project ✌️&lt;/h2&gt; &#xA;&lt;h3&gt;License&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;   Copyright (C) 2023 Amit Shekhar&#xA;&#xA;   Licensed under the Apache License, Version 2.0 (the &#34;License&#34;);&#xA;   you may not use this file except in compliance with the License.&#xA;   You may obtain a copy of the License at&#xA;&#xA;       http://www.apache.org/licenses/LICENSE-2.0&#xA;&#xA;   Unless required by applicable law or agreed to in writing, software&#xA;   distributed under the License is distributed on an &#34;AS IS&#34; BASIS,&#xA;   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#xA;   See the License for the specific language governing permissions and&#xA;   limitations under the License.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Contributing to Go Backend Clean Architecture&lt;/h3&gt; &#xA;&lt;p&gt;All pull requests are welcome.&lt;/p&gt;</summary>
  </entry>
</feed>