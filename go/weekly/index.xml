<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-05-14T01:55:35Z</updated>
  <subtitle>Weekly Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>1Panel-dev/1Panel</title>
    <updated>2023-05-14T01:55:35Z</updated>
    <id>tag:github.com,2023-05-14:/1Panel-dev/1Panel</id>
    <link href="https://github.com/1Panel-dev/1Panel" rel="alternate"></link>
    <summary type="html">&lt;p&gt;现代化、开源的 Linux 服务器运维管理面板。&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/1Panel-dev/1Panel/dev/README_EN.md&#34;&gt;README_EN.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;a href=&#34;https://1panel.cn&#34;&gt;&lt;img src=&#34;http://1panel.oss-cn-hangzhou.aliyuncs.com/img/1panel-logo.png&#34; alt=&#34;1Panel&#34; width=&#34;300&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;b&gt;现代化、开源的 Linux 服务器运维管理面板&lt;/b&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://www.gnu.org/licenses/gpl-3.0.html&#34;&gt;&lt;img src=&#34;https://shields.io/github/license/1Panel-dev/1Panel&#34; alt=&#34;License: GPL v3&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://app.codacy.com/gh/1Panel-dev/1Panel?utm_source=github.com&amp;amp;utm_medium=referral&amp;amp;utm_content=1Panel-dev/1Panel&amp;amp;utm_campaign=Badge_Grade_Dashboard&#34;&gt;&lt;img src=&#34;https://app.codacy.com/project/badge/Grade/da67574fd82b473992781d1386b937ef&#34; alt=&#34;Codacy&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/1Panel-dev/1Panel/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/1Panel-dev/1Panel&#34; alt=&#34;GitHub release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/1Panel-dev/1Panel&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/1Panel-dev/1Panel?color=%231890FF&amp;amp;style=flat-square&#34; alt=&#34;Stars&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://app.fossa.com/projects/git%2Bgithub.com%2F1Panel-dev%2F1Panel?ref=badge_shield&#34;&gt;&lt;img src=&#34;https://app.fossa.com/api/projects/git%2Bgithub.com%2F1Panel-dev%2F1Panel.svg?type=shield&#34; alt=&#34;FOSSA Status&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;1Panel 是一个现代化、开源的 Linux 服务器运维管理面板。1Panel 的功能和优势包括：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;快速建站&lt;/strong&gt;：深度集成 Wordpress 和 &lt;a href=&#34;https://github.com/halo-dev/halo/&#34;&gt;Halo&lt;/a&gt;，域名绑定、SSL 证书配置等一键搞定；&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;高效管理&lt;/strong&gt;：通过 Web 端轻松管理 Linux 服务器，包括主机监控、文件管理、数据库管理、容器管理等；&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;安全可靠&lt;/strong&gt;：基于容器来管理和部署应用，最小漏洞暴露面，提供防火墙和日志审计等功能；&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;一键备份&lt;/strong&gt;：支持一键备份和恢复，备份数据到各类云端存储，永不丢失。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;UI 展示&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://resource.fit2cloud.com/1panel/img/overview.png&#34; alt=&#34;UI展示&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;快速开始&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;在线体验&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;环境地址：&lt;a href=&#34;https://demo.1panel.cn/&#34;&gt;https://demo.1panel.cn/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;用户名：demo&lt;/li&gt; &#xA; &lt;li&gt;密码：1panel&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;一键安装&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;执行如下命令一键安装 1Panel:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;curl -sSL https://resource.fit2cloud.com/1panel/package/quick_start.sh -o quick_start.sh &amp;amp;&amp;amp; sudo bash quick_start.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;学习资料&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://1panel.cn/docs/&#34;&gt;在线文档&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://space.bilibili.com/510493147/channel/collectiondetail?sid=1199760&#34;&gt;教学视频&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://bbs.fit2cloud.com/c/1p/7&#34;&gt;社区论坛&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;加入微信交流群&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;img src=&#34;https://1panel.cn/img/wechat-group.jpg&#34; width=&#34;156&#34; height=&#34;156&#34;&gt; &#xA;&lt;h2&gt;安全说明&lt;/h2&gt; &#xA;&lt;p&gt;如果您在使用过程中发现任何安全问题，请通过以下方式直接联系我们：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;邮箱：&lt;a href=&#34;mailto:support@fit2cloud.com&#34;&gt;support@fit2cloud.com&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;电话：400-052-0755&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Star History&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://star-history.com/#1Panel-dev/1Panel&amp;amp;Date&#34;&gt;&lt;img src=&#34;https://api.star-history.com/svg?repos=1Panel-dev/1Panel&amp;amp;type=Date&#34; alt=&#34;Star History Chart&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;FOSSA Status&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://app.fossa.com/projects/git%2Bgithub.com%2F1Panel-dev%2F1Panel?ref=badge_large&#34;&gt;&lt;img src=&#34;https://app.fossa.com/api/projects/git%2Bgithub.com%2F1Panel-dev%2F1Panel.svg?type=large&#34; alt=&#34;FOSSA Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Copyright (c) 2014-2023 &lt;a href=&#34;https://fit2cloud.com/&#34;&gt;FIT2CLOUD 飞致云&lt;/a&gt;, All rights reserved.&lt;/p&gt; &#xA;&lt;p&gt;Licensed under The GNU General Public License version 3 (GPLv3) (the &#34;License&#34;); you may not use this file except in compliance with the License. You may obtain a copy of the License at&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.gnu.org/licenses/gpl-3.0.html&#34;&gt;https://www.gnu.org/licenses/gpl-3.0.html&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an &#34;AS IS&#34; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>schollz/croc</title>
    <updated>2023-05-14T01:55:35Z</updated>
    <id>tag:github.com,2023-05-14:/schollz/croc</id>
    <link href="https://github.com/schollz/croc" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Easily and securely send things from one computer to another 🐊 📦&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/6550035/46709024-9b23ad00-cbf6-11e8-9fb2-ca8b20b7dbec.jpg&#34; width=&#34;408px&#34; border=&#34;0&#34; alt=&#34;croc&#34;&gt; &lt;br&gt; &lt;a href=&#34;https://github.com/schollz/croc/releases/latest&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/version-v9.6.4-brightgreen.svg?style=flat-square&#34; alt=&#34;Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://coveralls.io/github/schollz/croc&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/coverage-81%25-green.svg?style=flat-square&#34; alt=&#34;Coverage&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://travis-ci.org/schollz/croc&#34;&gt;&lt;img src=&#34;https://img.shields.io/travis/schollz/croc.svg?style=flat-square&#34; alt=&#34;Build&#xA;Status&#34;&gt;&lt;/a&gt; &lt;/p&gt;&#xA;&lt;p align=&#34;center&#34;&gt;This project is supported by &lt;a href=&#34;https://github.com/sponsors/schollz&#34;&gt;Github sponsors&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;croc&lt;/code&gt; is a tool that allows any two computers to simply and securely transfer files and folders. AFAIK, &lt;em&gt;croc&lt;/em&gt; is the only CLI file-transfer tool that does &lt;strong&gt;all&lt;/strong&gt; of the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;allows &lt;strong&gt;any two computers&lt;/strong&gt; to transfer data (using a relay)&lt;/li&gt; &#xA; &lt;li&gt;provides &lt;strong&gt;end-to-end encryption&lt;/strong&gt; (using PAKE)&lt;/li&gt; &#xA; &lt;li&gt;enables easy &lt;strong&gt;cross-platform&lt;/strong&gt; transfers (Windows, Linux, Mac)&lt;/li&gt; &#xA; &lt;li&gt;allows &lt;strong&gt;multiple file&lt;/strong&gt; transfers&lt;/li&gt; &#xA; &lt;li&gt;allows &lt;strong&gt;resuming transfers&lt;/strong&gt; that are interrupted&lt;/li&gt; &#xA; &lt;li&gt;local server or port-forwarding &lt;strong&gt;not needed&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;ipv6-first&lt;/strong&gt; with ipv4 fallback&lt;/li&gt; &#xA; &lt;li&gt;can &lt;strong&gt;use proxy&lt;/strong&gt;, like tor&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For more information about &lt;code&gt;croc&lt;/code&gt;, see &lt;a href=&#34;https://schollz.com/software/croc6&#34;&gt;my blog post&lt;/a&gt; or read a &lt;a href=&#34;https://console.substack.com/p/console-91&#34;&gt;recent interview I did&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/schollz/croc/main/src/install/customization.gif&#34; alt=&#34;Example&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;p&gt;Download &lt;a href=&#34;https://github.com/schollz/croc/releases/latest&#34;&gt;the latest release for your system&lt;/a&gt;, or install a release from the command-line:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;curl https://getcroc.schollz.com | bash&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On macOS you can install the latest release with &lt;a href=&#34;https://brew.sh/&#34;&gt;Homebrew&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;brew install croc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On macOS you can also install the latest release with &lt;a href=&#34;https://macports.org/&#34;&gt;MacPorts&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo port selfupdate&#xA;sudo port install croc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On Windows you can install the latest release with &lt;a href=&#34;https://scoop.sh/&#34;&gt;Scoop&lt;/a&gt;, &lt;a href=&#34;https://chocolatey.org&#34;&gt;Chocolatey&lt;/a&gt;, or &lt;a href=&#34;https://learn.microsoft.com/en-us/windows/package-manager/&#34;&gt;Winget&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;scoop install croc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;choco install croc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;winget install schollz.croc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On Unix you can install the latest release with &lt;a href=&#34;https://nixos.org/nix&#34;&gt;Nix&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;nix-env -i croc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On Alpine Linux you have to install dependencies first:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;apk add bash coreutils&#xA;wget -qO- https://getcroc.schollz.com | bash&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On Arch Linux you can install the latest release with &lt;code&gt;pacman&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pacman -S croc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On Fedora you can install with &lt;code&gt;dnf&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;dnf install croc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On Gentoo you can install with &lt;code&gt;portage&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;emerge net-misc/croc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On Termux you can install with &lt;code&gt;pkg&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pkg install croc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On FreeBSD you can install with &lt;code&gt;pkg&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pkg install croc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or, you can &lt;a href=&#34;https://golang.org/dl/&#34;&gt;install Go&lt;/a&gt; and build from source (requires Go 1.17+):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;go install github.com/schollz/croc/v9@latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On Android there is a 3rd party F-Droid app &lt;a href=&#34;https://f-droid.org/en/packages/com.github.howeyc.crocgui/&#34;&gt;available to download&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;To send a file, simply do:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ croc send [file(s)-or-folder]&#xA;Sending &#39;file-or-folder&#39; (X MB)&#xA;Code is: code-phrase&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then to receive the file (or folder) on another computer, you can just do&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;croc code-phrase&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The code phrase is used to establish password-authenticated key agreement (&lt;a href=&#34;https://en.wikipedia.org/wiki/Password-authenticated_key_agreement&#34;&gt;PAKE&lt;/a&gt;) which generates a secret key for the sender and recipient to use for end-to-end encryption.&lt;/p&gt; &#xA;&lt;p&gt;There are a number of configurable options (see &lt;code&gt;--help&lt;/code&gt;). A set of options (like custom relay, ports, and code phrase) can be set using &lt;code&gt;--remember&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Custom code phrase&lt;/h3&gt; &#xA;&lt;p&gt;You can send with your own code phrase (must be more than 6 characters).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;croc send --code [code-phrase] [file(s)-or-folder]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Allow overwriting without prompt&lt;/h3&gt; &#xA;&lt;p&gt;By default, croc will prompt whether to overwrite a file. You can automatically overwrite files by using the &lt;code&gt;--overwrite&lt;/code&gt; flag (recipient only). For example, receive a file to automatically overwrite:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;croc --yes --overwrite &amp;lt;code&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Use pipes - stdin and stdout&lt;/h3&gt; &#xA;&lt;p&gt;You can pipe to &lt;code&gt;croc&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cat [filename] | croc send&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In this case &lt;code&gt;croc&lt;/code&gt; will automatically use the stdin data and send and assign a filename like &#34;croc-stdin-123456789&#34;. To receive to &lt;code&gt;stdout&lt;/code&gt; at you can always just use the &lt;code&gt;--yes&lt;/code&gt; will automatically approve the transfer and pipe it out to &lt;code&gt;stdout&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;croc --yes [code-phrase] &amp;gt; out&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;All of the other text printed to the console is going to &lt;code&gt;stderr&lt;/code&gt; so it will not interfere with the message going to &lt;code&gt;stdout&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Send text&lt;/h3&gt; &#xA;&lt;p&gt;Sometimes you want to send URLs or short text. In addition to piping, you can easily send text with &lt;code&gt;croc&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;croc send --text &#34;hello world&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will automatically tell the receiver to use &lt;code&gt;stdout&lt;/code&gt; when they receive the text so it will be displayed.&lt;/p&gt; &#xA;&lt;h3&gt;Use a proxy&lt;/h3&gt; &#xA;&lt;p&gt;You can use a proxy as your connection to the relay by adding a proxy address with &lt;code&gt;--socks5&lt;/code&gt;. For example, you can send via a tor relay:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;croc --socks5 &#34;127.0.0.1:9050&#34; send SOMEFILE&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Change encryption curve&lt;/h3&gt; &#xA;&lt;p&gt;You can choose from several different elliptic curves to use for encryption by using the &lt;code&gt;--curve&lt;/code&gt; flag. Only the recipient can choose the curve. For example, receive a file using the P-521 curve:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;croc --curve p521 &amp;lt;codephrase&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Available curves are P-256, P-348, P-521 and SIEC. P-256 is the default curve.&lt;/p&gt; &#xA;&lt;h3&gt;Change hash algorithm&lt;/h3&gt; &#xA;&lt;p&gt;You can choose from several different hash algorithms. The default is the &lt;code&gt;xxhash&lt;/code&gt; algorithm which is fast and thorough. If you want to optimize for speed you can use the &lt;code&gt;imohash&lt;/code&gt; algorithm which is even faster, but since it samples files (versus reading the whole file) it can mistakenly determine that a file is the same on the two computers transferring - though this is only a problem if you are syncing files versus sending a new file to a computer.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;croc send --hash imohash SOMEFILE&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Self-host relay&lt;/h3&gt; &#xA;&lt;p&gt;The relay is needed to staple the parallel incoming and outgoing connections. By default, &lt;code&gt;croc&lt;/code&gt; uses a public relay but you can also run your own relay:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;croc relay&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default it uses TCP ports 9009-9013. Make sure to open those up. You can customized the ports (e.g. &lt;code&gt;croc relay --ports 1111,1112&lt;/code&gt;), but you must have a minimum of &lt;strong&gt;2&lt;/strong&gt; ports for the relay. The first port is for communication and the subsequent ports are used for the multiplexed data transfer.&lt;/p&gt; &#xA;&lt;p&gt;You can send files using your relay by entering &lt;code&gt;--relay&lt;/code&gt; to change the relay that you are using if you want to custom host your own.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;croc --relay &#34;myrelay.example.com:9009&#34; send [filename]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note, when sending, you only need to include the first port (the communication port). The subsequent ports for data transfer will be transmitted back to the user from the relay.&lt;/p&gt; &#xA;&lt;h4&gt;Self-host relay (docker)&lt;/h4&gt; &#xA;&lt;p&gt;If it&#39;s easier you can also run a relay with Docker:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run -d -p 9009-9013:9009-9013 -e CROC_PASS=&#39;YOURPASSWORD&#39; schollz/croc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Be sure to include the password for the relay otherwise any requests will be rejected.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;croc --pass YOURPASSWORD --relay &#34;myreal.example.com:9009&#34; send [filename]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: when including &lt;code&gt;--pass YOURPASSWORD&lt;/code&gt; you can instead pass a file with the password, e.g. &lt;code&gt;--pass FILEWITHPASSWORD&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;MIT&lt;/p&gt; &#xA;&lt;h2&gt;Acknowledgements&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;croc&lt;/code&gt; has gone through many iterations, and I am awed by all the great contributions! If you feel like contributing, in any way, by all means you can send an Issue, a PR, or ask a question.&lt;/p&gt; &#xA;&lt;p&gt;Thanks &lt;a href=&#34;https://github.com/warner&#34;&gt;@warner&lt;/a&gt; for the &lt;a href=&#34;https://github.com/warner/magic-wormhole&#34;&gt;idea&lt;/a&gt;, &lt;a href=&#34;https://github.com/tscholl2&#34;&gt;@tscholl2&lt;/a&gt; for the &lt;a href=&#34;https://gist.github.com/tscholl2/dc7dc15dc132ea70a98e8542fefffa28&#34;&gt;encryption gists&lt;/a&gt;, &lt;a href=&#34;https://github.com/skorokithakis&#34;&gt;@skorokithakis&lt;/a&gt; for &lt;a href=&#34;https://www.stavros.io/posts/proxying-two-connections-go/&#34;&gt;code on proxying two connections&lt;/a&gt;. Finally thanks for making pull requests &lt;a href=&#34;https://github.com/maximbaz&#34;&gt;@maximbaz&lt;/a&gt;, &lt;a href=&#34;https://github.com/meyermarcel&#34;&gt;@meyermarcel&lt;/a&gt;, &lt;a href=&#34;https://github.com/Girbons&#34;&gt;@Girbons&lt;/a&gt;, &lt;a href=&#34;https://github.com/techtide&#34;&gt;@techtide&lt;/a&gt;, &lt;a href=&#34;https://github.com/heymatthew&#34;&gt;@heymatthew&lt;/a&gt;, &lt;a href=&#34;https://github.com/Lunsford94&#34;&gt;@Lunsford94&lt;/a&gt;, &lt;a href=&#34;https://github.com/lummie&#34;&gt;@lummie&lt;/a&gt;, &lt;a href=&#34;https://github.com/jesuiscamille&#34;&gt;@jesuiscamille&lt;/a&gt;, &lt;a href=&#34;https://github.com/threefjord&#34;&gt;@threefjord&lt;/a&gt;, &lt;a href=&#34;https://github.com/marcossegovia&#34;&gt;@marcossegovia&lt;/a&gt;, &lt;a href=&#34;https://github.com/csleong98&#34;&gt;@csleong98&lt;/a&gt;, &lt;a href=&#34;https://github.com/afotescu&#34;&gt;@afotescu&lt;/a&gt;, &lt;a href=&#34;https://github.com/callmefever&#34;&gt;@callmefever&lt;/a&gt;, &lt;a href=&#34;https://github.com/El-JojA&#34;&gt;@El-JojA&lt;/a&gt;, &lt;a href=&#34;https://github.com/anatolyyyyyy&#34;&gt;@anatolyyyyyy&lt;/a&gt;, &lt;a href=&#34;https://github.com/goggle&#34;&gt;@goggle&lt;/a&gt;, &lt;a href=&#34;https://github.com/smileboywtu&#34;&gt;@smileboywtu&lt;/a&gt;, &lt;a href=&#34;https://github.com/nicolashardy&#34;&gt;@nicolashardy&lt;/a&gt;, &lt;a href=&#34;https://github.com/fbartels&#34;&gt;@fbartels&lt;/a&gt;, &lt;a href=&#34;https://github.com/rkuprov&#34;&gt;@rkuprov&lt;/a&gt;, &lt;a href=&#34;https://github.com/hreese&#34;&gt;@hreese&lt;/a&gt;, &lt;a href=&#34;https://github.com/xenrox&#34;&gt;@xenrox&lt;/a&gt; and &lt;a href=&#34;https://github.com/lpar&#34;&gt;Ipar&lt;/a&gt;!&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>charmbracelet/bubbletea</title>
    <updated>2023-05-14T01:55:35Z</updated>
    <id>tag:github.com,2023-05-14:/charmbracelet/bubbletea</id>
    <link href="https://github.com/charmbracelet/bubbletea" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A powerful little TUI framework 🏗&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Bubble Tea&lt;/h1&gt; &#xA;&lt;p&gt; &lt;img src=&#34;https://stuff.charm.sh/bubbletea/bubbletea-github-header-simple.png&#34; width=&#34;313&#34; alt=&#34;Bubble Tea Title Treatment&#34;&gt;&lt;br&gt; &lt;a href=&#34;https://github.com/charmbracelet/bubbletea/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/charmbracelet/bubbletea.svg?sanitize=true&#34; alt=&#34;Latest Release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pkg.go.dev/github.com/charmbracelet/bubbletea?tab=doc&#34;&gt;&lt;img src=&#34;https://godoc.org/github.com/golang/gddo?status.svg?sanitize=true&#34; alt=&#34;GoDoc&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/charmbracelet/bubbletea/actions&#34;&gt;&lt;img src=&#34;https://github.com/charmbracelet/bubbletea/workflows/build/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;The fun, functional and stateful way to build terminal apps. A Go framework based on &lt;a href=&#34;https://guide.elm-lang.org/architecture/&#34;&gt;The Elm Architecture&lt;/a&gt;. Bubble Tea is well-suited for simple and complex terminal applications, either inline, full-window, or a mix of both.&lt;/p&gt; &#xA;&lt;p&gt; &lt;img src=&#34;https://stuff.charm.sh/bubbletea/bubbletea-example.gif&#34; width=&#34;100%&#34; alt=&#34;Bubble Tea Example&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;Bubble Tea is in use in production and includes a number of features and performance optimizations we’ve added along the way. Among those is a standard framerate-based renderer, a renderer for high-performance scrollable regions which works alongside the main renderer, and mouse support.&lt;/p&gt; &#xA;&lt;p&gt;To get started, see the tutorial below, the &lt;a href=&#34;http://github.com/charmbracelet/bubbletea/tree/master/examples&#34;&gt;examples&lt;/a&gt;, the &lt;a href=&#34;https://pkg.go.dev/github.com/charmbracelet/bubbletea?tab=doc&#34;&gt;docs&lt;/a&gt;, the &lt;a href=&#34;https://charm.sh/yt&#34;&gt;video tutorials&lt;/a&gt; and some common &lt;a href=&#34;https://raw.githubusercontent.com/charmbracelet/bubbletea/master/#libraries-we-use-with-bubble-tea&#34;&gt;resources&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;By the way&lt;/h2&gt; &#xA;&lt;p&gt;Be sure to check out &lt;a href=&#34;https://github.com/charmbracelet/bubbles&#34;&gt;Bubbles&lt;/a&gt;, a library of common UI components for Bubble Tea.&lt;/p&gt; &#xA;&lt;p&gt; &lt;a href=&#34;https://github.com/charmbracelet/bubbles&#34;&gt;&lt;img src=&#34;https://stuff.charm.sh/bubbles/bubbles-badge.png&#34; width=&#34;174&#34; alt=&#34;Bubbles Badge&#34;&gt;&lt;/a&gt;&amp;nbsp;&amp;nbsp; &lt;a href=&#34;https://github.com/charmbracelet/bubbles&#34;&gt;&lt;img src=&#34;https://stuff.charm.sh/bubbles-examples/textinput.gif&#34; width=&#34;400&#34; alt=&#34;Text Input Example from Bubbles&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Tutorial&lt;/h2&gt; &#xA;&lt;p&gt;Bubble Tea is based on the functional design paradigms of &lt;a href=&#34;https://guide.elm-lang.org/architecture/&#34;&gt;The Elm Architecture&lt;/a&gt;, which happens to work nicely with Go. It&#39;s a delightful way to build applications.&lt;/p&gt; &#xA;&lt;p&gt;This tutorial assumes you have a working knowledge of Go.&lt;/p&gt; &#xA;&lt;p&gt;By the way, the non-annotated source code for this program is available &lt;a href=&#34;https://github.com/charmbracelet/bubbletea/tree/master/tutorials/basics&#34;&gt;on GitHub&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Enough! Let&#39;s get to it.&lt;/h3&gt; &#xA;&lt;p&gt;For this tutorial, we&#39;re making a shopping list.&lt;/p&gt; &#xA;&lt;p&gt;To start we&#39;ll define our package and import some libraries. Our only external import will be the Bubble Tea library, which we&#39;ll call &lt;code&gt;tea&lt;/code&gt; for short.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;    &#34;fmt&#34;&#xA;    &#34;os&#34;&#xA;&#xA;    tea &#34;github.com/charmbracelet/bubbletea&#34;&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Bubble Tea programs are comprised of a &lt;strong&gt;model&lt;/strong&gt; that describes the application state and three simple methods on that model:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Init&lt;/strong&gt;, a function that returns an initial command for the application to run.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Update&lt;/strong&gt;, a function that handles incoming events and updates the model accordingly.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;View&lt;/strong&gt;, a function that renders the UI based on the data in the model.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;The Model&lt;/h3&gt; &#xA;&lt;p&gt;So let&#39;s start by defining our model which will store our application&#39;s state. It can be any type, but a &lt;code&gt;struct&lt;/code&gt; usually makes the most sense.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type model struct {&#xA;    choices  []string           // items on the to-do list&#xA;    cursor   int                // which to-do list item our cursor is pointing at&#xA;    selected map[int]struct{}   // which to-do items are selected&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Initialization&lt;/h3&gt; &#xA;&lt;p&gt;Next, we’ll define our application’s initial state. In this case, we’re defining a function to return our initial model, however, we could just as easily define the initial model as a variable elsewhere, too.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func initialModel() model {&#xA;&#x9;return model{&#xA;&#x9;&#x9;// Our to-do list is a grocery list&#xA;&#x9;&#x9;choices:  []string{&#34;Buy carrots&#34;, &#34;Buy celery&#34;, &#34;Buy kohlrabi&#34;},&#xA;&#xA;&#x9;&#x9;// A map which indicates which choices are selected. We&#39;re using&#xA;&#x9;&#x9;// the  map like a mathematical set. The keys refer to the indexes&#xA;&#x9;&#x9;// of the `choices` slice, above.&#xA;&#x9;&#x9;selected: make(map[int]struct{}),&#xA;&#x9;}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Next, we define the &lt;code&gt;Init&lt;/code&gt; method. &lt;code&gt;Init&lt;/code&gt; can return a &lt;code&gt;Cmd&lt;/code&gt; that could perform some initial I/O. For now, we don&#39;t need to do any I/O, so for the command, we&#39;ll just return &lt;code&gt;nil&lt;/code&gt;, which translates to &#34;no command.&#34;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (m model) Init() tea.Cmd {&#xA;    // Just return `nil`, which means &#34;no I/O right now, please.&#34;&#xA;    return nil&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;The Update Method&lt;/h3&gt; &#xA;&lt;p&gt;Next up is the update method. The update function is called when ”things happen.” Its job is to look at what has happened and return an updated model in response. It can also return a &lt;code&gt;Cmd&lt;/code&gt; to make more things happen, but for now don&#39;t worry about that part.&lt;/p&gt; &#xA;&lt;p&gt;In our case, when a user presses the down arrow, &lt;code&gt;Update&lt;/code&gt;’s job is to notice that the down arrow was pressed and move the cursor accordingly (or not).&lt;/p&gt; &#xA;&lt;p&gt;The “something happened” comes in the form of a &lt;code&gt;Msg&lt;/code&gt;, which can be any type. Messages are the result of some I/O that took place, such as a keypress, timer tick, or a response from a server.&lt;/p&gt; &#xA;&lt;p&gt;We usually figure out which type of &lt;code&gt;Msg&lt;/code&gt; we received with a type switch, but you could also use a type assertion.&lt;/p&gt; &#xA;&lt;p&gt;For now, we&#39;ll just deal with &lt;code&gt;tea.KeyMsg&lt;/code&gt; messages, which are automatically sent to the update function when keys are pressed.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (m model) Update(msg tea.Msg) (tea.Model, tea.Cmd) {&#xA;    switch msg := msg.(type) {&#xA;&#xA;    // Is it a key press?&#xA;    case tea.KeyMsg:&#xA;&#xA;        // Cool, what was the actual key pressed?&#xA;        switch msg.String() {&#xA;&#xA;        // These keys should exit the program.&#xA;        case &#34;ctrl+c&#34;, &#34;q&#34;:&#xA;            return m, tea.Quit&#xA;&#xA;        // The &#34;up&#34; and &#34;k&#34; keys move the cursor up&#xA;        case &#34;up&#34;, &#34;k&#34;:&#xA;            if m.cursor &amp;gt; 0 {&#xA;                m.cursor--&#xA;            }&#xA;&#xA;        // The &#34;down&#34; and &#34;j&#34; keys move the cursor down&#xA;        case &#34;down&#34;, &#34;j&#34;:&#xA;            if m.cursor &amp;lt; len(m.choices)-1 {&#xA;                m.cursor++&#xA;            }&#xA;&#xA;        // The &#34;enter&#34; key and the spacebar (a literal space) toggle&#xA;        // the selected state for the item that the cursor is pointing at.&#xA;        case &#34;enter&#34;, &#34; &#34;:&#xA;            _, ok := m.selected[m.cursor]&#xA;            if ok {&#xA;                delete(m.selected, m.cursor)&#xA;            } else {&#xA;                m.selected[m.cursor] = struct{}{}&#xA;            }&#xA;        }&#xA;    }&#xA;&#xA;    // Return the updated model to the Bubble Tea runtime for processing.&#xA;    // Note that we&#39;re not returning a command.&#xA;    return m, nil&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You may have noticed that &lt;kbd&gt;ctrl+c&lt;/kbd&gt; and &lt;kbd&gt;q&lt;/kbd&gt; above return a &lt;code&gt;tea.Quit&lt;/code&gt; command with the model. That’s a special command which instructs the Bubble Tea runtime to quit, exiting the program.&lt;/p&gt; &#xA;&lt;h3&gt;The View Method&lt;/h3&gt; &#xA;&lt;p&gt;At last, it’s time to render our UI. Of all the methods, the view is the simplest. We look at the model in its current state and use it to return a &lt;code&gt;string&lt;/code&gt;. That string is our UI!&lt;/p&gt; &#xA;&lt;p&gt;Because the view describes the entire UI of your application, you don’t have to worry about redrawing logic and stuff like that. Bubble Tea takes care of it for you.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (m model) View() string {&#xA;    // The header&#xA;    s := &#34;What should we buy at the market?\n\n&#34;&#xA;&#xA;    // Iterate over our choices&#xA;    for i, choice := range m.choices {&#xA;&#xA;        // Is the cursor pointing at this choice?&#xA;        cursor := &#34; &#34; // no cursor&#xA;        if m.cursor == i {&#xA;            cursor = &#34;&amp;gt;&#34; // cursor!&#xA;        }&#xA;&#xA;        // Is this choice selected?&#xA;        checked := &#34; &#34; // not selected&#xA;        if _, ok := m.selected[i]; ok {&#xA;            checked = &#34;x&#34; // selected!&#xA;        }&#xA;&#xA;        // Render the row&#xA;        s += fmt.Sprintf(&#34;%s [%s] %s\n&#34;, cursor, checked, choice)&#xA;    }&#xA;&#xA;    // The footer&#xA;    s += &#34;\nPress q to quit.\n&#34;&#xA;&#xA;    // Send the UI for rendering&#xA;    return s&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;All Together Now&lt;/h3&gt; &#xA;&lt;p&gt;The last step is to simply run our program. We pass our initial model to &lt;code&gt;tea.NewProgram&lt;/code&gt; and let it rip:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func main() {&#xA;    p := tea.NewProgram(initialModel())&#xA;    if _, err := p.Run(); err != nil {&#xA;        fmt.Printf(&#34;Alas, there&#39;s been an error: %v&#34;, err)&#xA;        os.Exit(1)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;What’s Next?&lt;/h2&gt; &#xA;&lt;p&gt;This tutorial covers the basics of building an interactive terminal UI, but in the real world you&#39;ll also need to perform I/O. To learn about that have a look at the &lt;a href=&#34;http://github.com/charmbracelet/bubbletea/tree/master/tutorials/commands/&#34;&gt;Command Tutorial&lt;/a&gt;. It&#39;s pretty simple.&lt;/p&gt; &#xA;&lt;p&gt;There are also several &lt;a href=&#34;http://github.com/charmbracelet/bubbletea/tree/master/examples&#34;&gt;Bubble Tea examples&lt;/a&gt; available and, of course, there are &lt;a href=&#34;https://pkg.go.dev/github.com/charmbracelet/bubbletea?tab=doc&#34;&gt;Go Docs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Debugging&lt;/h2&gt; &#xA;&lt;h3&gt;Debugging with Delve&lt;/h3&gt; &#xA;&lt;p&gt;Since Bubble Tea apps assume control of stdin and stdout, you’ll need to run delve in headless mode and then connect to it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Start the debugger&#xA;$ dlv debug --headless .&#xA;API server listening at: 127.0.0.1:34241&#xA;&#xA;# Connect to it from another terminal&#xA;$ dlv connect 127.0.0.1:34241&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that the default port used will vary on your system and per run, so actually watch out what address the first &lt;code&gt;dlv&lt;/code&gt; run tells you to connect to.&lt;/p&gt; &#xA;&lt;h3&gt;Logging Stuff&lt;/h3&gt; &#xA;&lt;p&gt;You can’t really log to stdout with Bubble Tea because your TUI is busy occupying that! You can, however, log to a file by including something like the following prior to starting your Bubble Tea program:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;if len(os.Getenv(&#34;DEBUG&#34;)) &amp;gt; 0 {&#xA;&#x9;f, err := tea.LogToFile(&#34;debug.log&#34;, &#34;debug&#34;)&#xA;&#x9;if err != nil {&#xA;&#x9;&#x9;fmt.Println(&#34;fatal:&#34;, err)&#xA;&#x9;&#x9;os.Exit(1)&#xA;&#x9;}&#xA;&#x9;defer f.Close()&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To see what’s being logged in real time, run &lt;code&gt;tail -f debug.log&lt;/code&gt; while you run your program in another window.&lt;/p&gt; &#xA;&lt;h2&gt;Libraries we use with Bubble Tea&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/charmbracelet/bubbles&#34;&gt;Bubbles&lt;/a&gt;: Common Bubble Tea components such as text inputs, viewports, spinners and so on&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/charmbracelet/lipgloss&#34;&gt;Lip Gloss&lt;/a&gt;: Style, format and layout tools for terminal applications&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/charmbracelet/harmonica&#34;&gt;Harmonica&lt;/a&gt;: A spring animation library for smooth, natural motion&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lrstanley/bubblezone&#34;&gt;BubbleZone&lt;/a&gt;: Easy mouse event tracking for Bubble Tea components&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/muesli/termenv&#34;&gt;Termenv&lt;/a&gt;: Advanced ANSI styling for terminal applications&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/muesli/reflow&#34;&gt;Reflow&lt;/a&gt;: Advanced ANSI-aware methods for working with text&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Bubble Tea in the Wild&lt;/h2&gt; &#xA;&lt;p&gt;For some Bubble Tea programs in production, see:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/daskycodes/at_cli&#34;&gt;AT CLI&lt;/a&gt;: execute AT Commands via serial port connections&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Azure/aztfy&#34;&gt;Aztify&lt;/a&gt;: bring Microsoft Azure resources under Terraform&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rubysolo/brows&#34;&gt;brows&lt;/a&gt;: a GitHub release browser&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mrusme/canard&#34;&gt;Canard&lt;/a&gt;: an RSS client&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/charmbracelet/charm&#34;&gt;charm&lt;/a&gt;: the official Charm user account manager&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/twpayne/chezmoi&#34;&gt;chezmoi&lt;/a&gt;: securely manage your dotfiles across multiple machines&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/chhetripradeep/chtop&#34;&gt;chtop&lt;/a&gt;: monitor your ClickHouse node without leaving terminal&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bensadeh/circumflex&#34;&gt;circumflex&lt;/a&gt;: read Hacker News in the terminal&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ajeetdsouza/clidle&#34;&gt;clidle&lt;/a&gt;: a Wordle clone&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/koki-develop/clive&#34;&gt;cLive&lt;/a&gt;: automate terminal operations and view them live in a browser&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/NVIDIA/container-canary&#34;&gt;container-canary&lt;/a&gt;: a container validator&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/aldernero/countdown&#34;&gt;countdown&lt;/a&gt;: a multi-event countdown timer&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/purpleclay/dns53&#34;&gt;dns53&lt;/a&gt;: dynamic DNS with Amazon Route53. Expose your EC2 quickly, securely and privately&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/awslabs/eks-node-viewer&#34;&gt;eks-node-viewer&lt;/a&gt;: a tool for visualizing dynamic node usage within an eks cluster&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sherlock-project/enola&#34;&gt;enola&lt;/a&gt;: hunt down social media accounts by username across social networks&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kbrgl/flapioca&#34;&gt;flapioca&lt;/a&gt;: Flappy Bird on the CLI!&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/knipferrc/fm&#34;&gt;fm&lt;/a&gt;: a terminal-based file manager&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/caarlos0/fork-cleaner&#34;&gt;fork-cleaner&lt;/a&gt;: clean up old and inactive forks in your GitHub account&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jon4hz/fztea&#34;&gt;fztea&lt;/a&gt;: a Flipper Zero TUI&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/maaslalani/gambit&#34;&gt;gambit&lt;/a&gt;: chess in the terminal&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://git.sr.ht/~rafael/gembro&#34;&gt;gembro&lt;/a&gt;: a mouse-driven Gemini browser&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/joaom00/gh-b&#34;&gt;gh-b&lt;/a&gt;: a GitHub CLI extension for managing branches&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.github.com/dlvhdr/gh-dash&#34;&gt;gh-dash&lt;/a&gt;: a GitHub CLI extension for PRs and issues&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mritd/gitflow-toolkit&#34;&gt;gitflow-toolkit&lt;/a&gt;: a GitFlow submission tool&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/charmbracelet/glow&#34;&gt;Glow&lt;/a&gt;: a markdown reader, browser, and online markdown stash&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/orlangure/gocovsh&#34;&gt;gocovsh&lt;/a&gt;: explore Go coverage reports from the CLI&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/fedeztk/got&#34;&gt;got&lt;/a&gt;: a simple translator and text-to-speech app build on top of simplytranslate&#39;s APIs&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/gonetx/httpit&#34;&gt;httpit&lt;/a&gt;: a rapid http(s) benchmark tool&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/r-darwish/idnt&#34;&gt;IDNT&lt;/a&gt;: a batch software uninstaller&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/CamiloGarciaLaRotta/kboard&#34;&gt;kboard&lt;/a&gt;: a typing game&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/MicheleFiladelfia/mandelbrot-cli&#34;&gt;mandelbrot-cli&lt;/a&gt;: a multiplatform terminal mandelbrot set explorer&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/minio/mc&#34;&gt;mc&lt;/a&gt;: the official &lt;a href=&#34;https://min.io&#34;&gt;MinIO&lt;/a&gt; client&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mergestat/mergestat&#34;&gt;mergestat&lt;/a&gt;: run SQL queries on git repositories&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mrusme/neonmodem&#34;&gt;Neon Modem Overdrive&lt;/a&gt;: a BBS-style TUI client for Discourse, Lemmy, Lobste.rs and Hacker News&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/torbratsberg/noted&#34;&gt;Noted&lt;/a&gt;: a note viewer and manager&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/chip/pathos&#34;&gt;pathos&lt;/a&gt;: a PATH env variable editor&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ZinoKader/portal&#34;&gt;portal&lt;/a&gt;: secure transfers between computers&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/SaltFishPr/redis-viewer&#34;&gt;redis-viewer&lt;/a&gt;: a Redis databases browser&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/fedeztk/sku&#34;&gt;sku&lt;/a&gt;: Sudoku on the CLI&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/maaslalani/slides&#34;&gt;Slides&lt;/a&gt;: a markdown-based presentation tool&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/CLIP-HPC/SlurmCommander&#34;&gt;SlurmCommander&lt;/a&gt;: a Slurm workload manager TUI&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/charmbracelet/soft-serve&#34;&gt;Soft Serve&lt;/a&gt;: a command-line-first Git server that runs a TUI over SSH&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/brianstrauch/solitaire-tui&#34;&gt;solitaire-tui&lt;/a&gt;: Klondike Solitaire for the terminal&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/thestormforge/optimize-controller&#34;&gt;StormForge Optimize Controller&lt;/a&gt;: a tool for experimenting with application configurations in Kubernetes&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/wille1101/sttg&#34;&gt;STTG&lt;/a&gt;: a teletext client for SVT, Sweden’s national public television station&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/abhimanyu003/sttr&#34;&gt;sttr&lt;/a&gt;: a general-purpose text transformer&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/caarlos0/tasktimer&#34;&gt;tasktimer&lt;/a&gt;: a dead-simple task timer&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mathaou/termdbms&#34;&gt;termdbms&lt;/a&gt;: a keyboard and mouse driven database browser&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/achannarasappa/ticker&#34;&gt;ticker&lt;/a&gt;: a terminal stock viewer and stock position tracker&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/abdfnx/tran&#34;&gt;tran&lt;/a&gt;: securely transfer stuff between computers (based on &lt;a href=&#34;https://github.com/ZinoKader/portal&#34;&gt;portal&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/maaslalani/typer&#34;&gt;Typer&lt;/a&gt;: a typing test&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/oz/tz&#34;&gt;tz&lt;/a&gt;: an aid for scheduling across multiple time zones&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ariasmn/ugm&#34;&gt;ugm&lt;/a&gt;: a unix user and group browser&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/robinovitch61/wander&#34;&gt;wander&lt;/a&gt;: a HashiCorp Nomad terminal client&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/AndrianBdn/wg-cmd&#34;&gt;WG Commander&lt;/a&gt;: a TUI for a simple WireGuard VPN setup&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/charmbracelet/wishlist&#34;&gt;wishlist&lt;/a&gt;: an SSH directory&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Feedback&lt;/h2&gt; &#xA;&lt;p&gt;We&#39;d love to hear your thoughts on this project. Feel free to drop us a note!&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/charmcli&#34;&gt;Twitter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mastodon.social/@charmcli&#34;&gt;The Fediverse&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://charm.sh/chat&#34;&gt;Discord&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Acknowledgments&lt;/h2&gt; &#xA;&lt;p&gt;Bubble Tea is based on the paradigms of &lt;a href=&#34;https://guide.elm-lang.org/architecture/&#34;&gt;The Elm Architecture&lt;/a&gt; by Evan Czaplicki et alia and the excellent &lt;a href=&#34;https://github.com/tj/go-tea&#34;&gt;go-tea&lt;/a&gt; by TJ Holowaychuk. It’s inspired by the many great &lt;a href=&#34;https://de.wikipedia.org/wiki/Zeichenorientierte_Benutzerschnittstelle&#34;&gt;&lt;em&gt;Zeichenorientierte Benutzerschnittstellen&lt;/em&gt;&lt;/a&gt; of days past.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/charmbracelet/bubbletea/raw/master/LICENSE&#34;&gt;MIT&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Part of &lt;a href=&#34;https://charm.sh&#34;&gt;Charm&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://charm.sh/&#34;&gt;&lt;img alt=&#34;The Charm logo&#34; src=&#34;https://stuff.charm.sh/charm-badge.jpg&#34; width=&#34;400&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Charm热爱开源 • Charm loves open source • نحنُ نحب المصادر المفتوحة&lt;/p&gt;</summary>
  </entry>
</feed>