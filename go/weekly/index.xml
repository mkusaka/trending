<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-08-10T06:05:19Z</updated>
  <subtitle>Weekly Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>hypermodeinc/dgraph</title>
    <updated>2025-08-10T06:05:19Z</updated>
    <id>tag:github.com,2025-08-10:/hypermodeinc/dgraph</id>
    <link href="https://github.com/hypermodeinc/dgraph" rel="alternate"></link>
    <summary type="html">&lt;p&gt;high-performance graph database for real-time use cases&lt;/p&gt;&lt;hr&gt;&lt;picture&gt; &#xA; &lt;source srcset=&#34;/logo-dark.png&#34; media=&#34;(prefers-color-scheme: dark)&#34; /&gt; &#xA; &lt;source srcset=&#34;/logo.png&#34; media=&#34;(prefers-color-scheme: light), (prefers-color-scheme: no-preference)&#34; /&gt; &#xA; &lt;img alt=&#34;Dgraph Logo&#34; src=&#34;https://raw.githubusercontent.com/hypermodeinc/dgraph/main/logo.png&#34; /&gt; &#xA;&lt;/picture&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://discord.hypermode.com&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/1267579648657850441&#34; alt=&#34;chat&#34; /&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/hypermodeinc/dgraph/stargazers&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/hypermodeinc/dgraph&#34; alt=&#34;GitHub Repo stars&#34; /&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/hypermodeinc/dgraph/commits/main/&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/commit-activity/m/hypermodeinc/dgraph&#34; alt=&#34;GitHub commit activity&#34; /&gt;&lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/dgraph-io/dgraph&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/dgraph-io/dgraph&#34; alt=&#34;Go Report Card&#34; /&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Dgraph is a horizontally scalable and distributed GraphQL database with a graph backend. It provides ACID transactions, consistent replication, and linearizable reads. It&#39;s built from the ground up to perform a rich set of queries. Being a native GraphQL database, it tightly controls how the data is arranged on disk to optimize for query performance and throughput, reducing disk seeks and network calls in a cluster.&lt;/p&gt; &#xA;&lt;p&gt;Dgraph&#39;s goal is to provide Google production-level scale and throughput, with low enough latency to serve real-time user queries over terabytes of structured data. Dgraph supports &lt;a href=&#34;https://docs.hypermode.com/dgraph/graphql/overview&#34;&gt;GraphQL query syntax&lt;/a&gt;, and responds in &lt;a href=&#34;http://www.json.org/&#34;&gt;JSON&lt;/a&gt; and &lt;a href=&#34;https://developers.google.com/protocol-buffers/&#34;&gt;Protocol Buffers&lt;/a&gt; over &lt;a href=&#34;http://www.grpc.io/&#34;&gt;GRPC&lt;/a&gt; and HTTP. Dgraph is written using the Go Programming Language.&lt;/p&gt; &#xA;&lt;h2&gt;Status&lt;/h2&gt; &#xA;&lt;p&gt;Dgraph is at &lt;a href=&#34;https://github.com/hypermodeinc/dgraph/releases/tag/v24.1.3&#34;&gt;version v24.1.3&lt;/a&gt; and is production-ready. Apart from the vast open source community, it is being used in production at multiple Fortune 500 companies, and by &lt;a href=&#34;https://github.com/intuit/katlas&#34;&gt;Intuit Katlas&lt;/a&gt; and &lt;a href=&#34;https://github.com/vmware/purser&#34;&gt;VMware Purser&lt;/a&gt;. A hosted version of Dgraph is available at &lt;a href=&#34;https://cloud.dgraph.io&#34;&gt;https://cloud.dgraph.io&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Supported Platforms&lt;/h2&gt; &#xA;&lt;p&gt;Dgraph officially supports the Linux/amd64 architecture. Support for Linux/arm64 is in development. In order to take advantage of memory performance gains and other architecture-specific advancements in Linux, we dropped official support Mac and Windows in 2021, see &lt;a href=&#34;https://discuss.hypermode.com/t/dropping-support-for-windows-and-mac/12913&#34;&gt;this blog post&lt;/a&gt; for more information. You can still build and use Dgraph on other platforms (for live or bulk loading for instance), but support for platforms other than Linux/amd64 is not available.&lt;/p&gt; &#xA;&lt;p&gt;Running Dgraph in a Docker environment is the recommended testing and deployment method.&lt;/p&gt; &#xA;&lt;h2&gt;Install with Docker&lt;/h2&gt; &#xA;&lt;p&gt;If you&#39;re using Docker, you can use the &lt;a href=&#34;https://hub.docker.com/r/dgraph/dgraph/&#34;&gt;official Dgraph image&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker pull dgraph/dgraph:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more information on a variety Docker deployment methods including Docker Compose and Kubernetes, see the &lt;a href=&#34;https://docs.hypermode.com/dgraph/self-managed/overview&#34;&gt;docs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Run a Quick Standalone Cluster&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run -it -p 8080:8080 -p 9080:9080 -v ~/dgraph:/dgraph dgraph/standalone:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Install from Source&lt;/h2&gt; &#xA;&lt;p&gt;If you want to install from source, install Go 1.19+ or later and the following dependencies:&lt;/p&gt; &#xA;&lt;h3&gt;Ubuntu&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt-get update&#xA;sudo apt-get install build-essential&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Build and Install&lt;/h3&gt; &#xA;&lt;p&gt;Then clone the Dgraph repository and use &lt;code&gt;make install&lt;/code&gt; to install the Dgraph binary in the directory named by the GOBIN environment variable, which defaults to $GOPATH/bin or $HOME/go/bin if the GOPATH environment variable is not set.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/hypermodeinc/dgraph.git&#xA;cd dgraph&#xA;make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Get Started&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;To get started with Dgraph, follow:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.hypermode.com/dgraph/quickstart&#34;&gt;Installation to queries in 3 steps&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Tutorial and presentation videos on &lt;a href=&#34;https://www.youtube.com/channel/UCghE41LR8nkKFlR3IFTRO4w/featured&#34;&gt;YouTube channel&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Is Dgraph the right choice for me?&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Do you have more than 10 SQL tables connected via foreign keys?&lt;/li&gt; &#xA; &lt;li&gt;Do you have sparse data, which doesn&#39;t elegantly fit into SQL tables?&lt;/li&gt; &#xA; &lt;li&gt;Do you want a simple and flexible schema, which is readable and maintainable over time?&lt;/li&gt; &#xA; &lt;li&gt;Do you care about speed and performance at scale?&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If the answers to the above are YES, then Dgraph would be a great fit for your application. Dgraph provides NoSQL like scalability while providing SQL like transactions and the ability to select, filter, and aggregate data points. It combines that with distributed joins, traversals, and graph operations, which makes it easy to build applications with it.&lt;/p&gt; &#xA;&lt;h2&gt;Dgraph compared to other graph DBs&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Features&lt;/th&gt; &#xA;   &lt;th&gt;Dgraph&lt;/th&gt; &#xA;   &lt;th&gt;Neo4j&lt;/th&gt; &#xA;   &lt;th&gt;Janus Graph&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Architecture&lt;/td&gt; &#xA;   &lt;td&gt;Sharded and Distributed&lt;/td&gt; &#xA;   &lt;td&gt;Single server (+ replicas in enterprise)&lt;/td&gt; &#xA;   &lt;td&gt;Layer on top of other distributed DBs&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Replication&lt;/td&gt; &#xA;   &lt;td&gt;Consistent&lt;/td&gt; &#xA;   &lt;td&gt;None in community edition (only available in enterprise)&lt;/td&gt; &#xA;   &lt;td&gt;Via underlying DB&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Data movement for shard rebalancing&lt;/td&gt; &#xA;   &lt;td&gt;Automatic&lt;/td&gt; &#xA;   &lt;td&gt;Not applicable (all data lies on each server)&lt;/td&gt; &#xA;   &lt;td&gt;Via underlying DB&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Language&lt;/td&gt; &#xA;   &lt;td&gt;GraphQL inspired&lt;/td&gt; &#xA;   &lt;td&gt;Cypher&lt;/td&gt; &#xA;   &lt;td&gt;Gremlin&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Protocols&lt;/td&gt; &#xA;   &lt;td&gt;Grpc / HTTP + JSON / RDF&lt;/td&gt; &#xA;   &lt;td&gt;Bolt + Cypher&lt;/td&gt; &#xA;   &lt;td&gt;Websocket / HTTP&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Transactions&lt;/td&gt; &#xA;   &lt;td&gt;Distributed ACID transactions&lt;/td&gt; &#xA;   &lt;td&gt;Single server ACID transactions&lt;/td&gt; &#xA;   &lt;td&gt;Not typically ACID&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Full-Text Search&lt;/td&gt; &#xA;   &lt;td&gt;Native support&lt;/td&gt; &#xA;   &lt;td&gt;Native support&lt;/td&gt; &#xA;   &lt;td&gt;Via External Indexing System&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Regular Expressions&lt;/td&gt; &#xA;   &lt;td&gt;Native support&lt;/td&gt; &#xA;   &lt;td&gt;Native support&lt;/td&gt; &#xA;   &lt;td&gt;Via External Indexing System&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Geo Search&lt;/td&gt; &#xA;   &lt;td&gt;Native support&lt;/td&gt; &#xA;   &lt;td&gt;External support only&lt;/td&gt; &#xA;   &lt;td&gt;Via External Indexing System&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;License&lt;/td&gt; &#xA;   &lt;td&gt;Apache 2.0&lt;/td&gt; &#xA;   &lt;td&gt;GPL v3&lt;/td&gt; &#xA;   &lt;td&gt;Apache 2.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Users&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Dgraph official documentation is present at &lt;a href=&#34;https://docs.hypermode.com/dgraph&#34;&gt;docs.hypermode.com/dgraph&lt;/a&gt;.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;For feature requests or questions, visit &lt;a href=&#34;https://discuss.hypermode.com&#34;&gt;https://discuss.hypermode.com&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Please see &lt;a href=&#34;https://github.com/hypermodeinc/dgraph/releases&#34;&gt;releases tab&lt;/a&gt; to find the latest release and corresponding release notes.&lt;/li&gt; &#xA; &lt;li&gt;Read about the latest updates from the Dgraph team &lt;a href=&#34;https://hypermode.com/blog&#34;&gt;on our blog&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Watch tech talks on our &lt;a href=&#34;https://www.youtube.com/channel/UCghE41LR8nkKFlR3IFTRO4w/featured&#34;&gt;YouTube channel&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Developers&lt;/h2&gt; &#xA;&lt;p&gt;Please see &lt;a href=&#34;https://github.com/hypermodeinc/dgraph/raw/main/CONTRIBUTING.md&#34;&gt;Contributing to Dgraph&lt;/a&gt; for guidelines on contributions.&lt;/p&gt; &#xA;&lt;h2&gt;Client Libraries&lt;/h2&gt; &#xA;&lt;p&gt;The Dgraph team maintains several &lt;a href=&#34;https://docs.hypermode.com/dgraph/sdks/overview&#34;&gt;officially supported client libraries&lt;/a&gt;. There are also libraries contributed by the community &lt;a href=&#34;https://docs.hypermode.com/dgraph/sdks/unofficial-clients#unofficial-dgraph-clients&#34;&gt;unofficial client libraries&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;/h2&gt; &#xA;&lt;h2&gt;Contact&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Please use &lt;a href=&#34;https://discuss.hypermode.com&#34;&gt;discuss.hypermode.com&lt;/a&gt; for documentation, questions, feature requests and discussions.&lt;/li&gt; &#xA; &lt;li&gt;Please use &lt;a href=&#34;https://github.com/hypermodeinc/dgraph/issues&#34;&gt;GitHub Issues&lt;/a&gt; for filing bugs or feature requests.&lt;/li&gt; &#xA; &lt;li&gt;Follow us on Twitter &lt;a href=&#34;https://twitter.com/dgraphlabs&#34;&gt;@dgraphlabs&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>microsoft/typescript-go</title>
    <updated>2025-08-10T06:05:19Z</updated>
    <id>tag:github.com,2025-08-10:/microsoft/typescript-go</id>
    <link href="https://github.com/microsoft/typescript-go" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Staging repo for development of native port of TypeScript&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;TypeScript 7&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://devblogs.microsoft.com/typescript/typescript-native-port/&#34;&gt;Not sure what this is? Read the announcement post!&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Preview&lt;/h2&gt; &#xA;&lt;p&gt;A preview build is available on npm as &lt;a href=&#34;https://www.npmjs.com/package/@typescript/native-preview&#34;&gt;&lt;code&gt;@typescript/native-preview&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;npm install @typescript/native-preview&#xA;npx tsgo # Use this as you would tsc.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A preview VS Code extension is &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=TypeScriptTeam.native-preview&#34;&gt;available on the VS Code marketplace&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To use this, set this in your VS Code settings:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;    &#34;typescript.experimental.useTsgo&#34;: true&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;How to Build and Run&lt;/h2&gt; &#xA;&lt;p&gt;This repo uses &lt;a href=&#34;https://go.dev/dl/&#34;&gt;Go 1.24 or higher&lt;/a&gt;, &lt;a href=&#34;https://www.rust-lang.org/tools/install&#34;&gt;Rust 1.85 or higher&lt;/a&gt;, &lt;a href=&#34;https://nodejs.org/&#34;&gt;Node.js with npm&lt;/a&gt;, and &lt;a href=&#34;https://www.npmjs.com/package/hereby&#34;&gt;&lt;code&gt;hereby&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For tests and code generation, this repo contains a git submodule to the main TypeScript repo pointing to the commit being ported. When cloning, you&#39;ll want to clone with submodules:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone --recurse-submodules https://github.com/microsoft/typescript-go.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you have already cloned the repo, you can initialize the submodule with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git submodule update --init --recursive&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With the submodule in place and &lt;code&gt;npm ci&lt;/code&gt;, you can run tasks via &lt;code&gt;hereby&lt;/code&gt;, similar to the TypeScript repo:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;hereby build          # Verify that the project builds&#xA;hereby test           # Run all tests&#xA;hereby install-tools  # Install additional tools such as linters&#xA;hereby lint           # Run all linters&#xA;hereby format         # Format all code&#xA;hereby generate       # Generate all Go code (e.g. diagnostics, committed to repo)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Additional tasks are a work in progress.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;hereby&lt;/code&gt; is not required to work on the repo; the regular &lt;code&gt;go&lt;/code&gt; tooling (e.g., &lt;code&gt;go build&lt;/code&gt;, &lt;code&gt;go test ./...&lt;/code&gt;) will work as expected. &lt;code&gt;hereby&lt;/code&gt; tasks are provided as a convenience for those familiar with the TypeScript repo.&lt;/p&gt; &#xA;&lt;h3&gt;Running &lt;code&gt;tsgo&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;After running &lt;code&gt;hereby build&lt;/code&gt;, you can run &lt;code&gt;built/local/tsgo&lt;/code&gt;, which behaves mostly the same as &lt;code&gt;tsc&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Running LSP Prototype&lt;/h3&gt; &#xA;&lt;p&gt;To debug and run the VS Code extension without installing it globally:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Run VS Code in the repo workspace (&lt;code&gt;code .&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Copy &lt;code&gt;.vscode/launch.template.json&lt;/code&gt; to &lt;code&gt;.vscode/launch.json&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;kbd&gt;F5&lt;/kbd&gt; (or &lt;code&gt;Debug: Start Debugging&lt;/code&gt; from the command palette)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This will launch a new VS Code instance which uses the Corsa LS as the backend. If correctly set up, you should see &#34;tsgo&#34; in the status bar when a TypeScript or JavaScript file is open:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/microsoft/typescript-go/main/.github/ls-screenshot.png&#34; alt=&#34;LSP Prototype Screenshot&#34; /&gt;&lt;/p&gt; &#xA;&lt;h2&gt;What Works So Far?&lt;/h2&gt; &#xA;&lt;p&gt;This is still a work in progress and is not yet at full feature parity with TypeScript. Bugs may exist. Please check this list carefully before logging a new issue or assuming an intentional change.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Feature&lt;/th&gt; &#xA;   &lt;th&gt;Status&lt;/th&gt; &#xA;   &lt;th&gt;Notes&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Program creation&lt;/td&gt; &#xA;   &lt;td&gt;done&lt;/td&gt; &#xA;   &lt;td&gt;Same files and module resolution as TS5.8. Not all resolution modes supported yet.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Parsing/scanning&lt;/td&gt; &#xA;   &lt;td&gt;done&lt;/td&gt; &#xA;   &lt;td&gt;Exact same syntax errors as TS5.8&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Commandline and &lt;code&gt;tsconfig.json&lt;/code&gt; parsing&lt;/td&gt; &#xA;   &lt;td&gt;mostly done&lt;/td&gt; &#xA;   &lt;td&gt;Entry point slightly different for now&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Type resolution&lt;/td&gt; &#xA;   &lt;td&gt;done&lt;/td&gt; &#xA;   &lt;td&gt;Same types as TS5.8&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Type checking&lt;/td&gt; &#xA;   &lt;td&gt;done&lt;/td&gt; &#xA;   &lt;td&gt;Same errors, locations, and messages as TS5.8. Types printback in errors may display differently (in progress)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;JavaScript-specific inference and JS Doc&lt;/td&gt; &#xA;   &lt;td&gt;not ready&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;JSX&lt;/td&gt; &#xA;   &lt;td&gt;done&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Declaration emit&lt;/td&gt; &#xA;   &lt;td&gt;in progress&lt;/td&gt; &#xA;   &lt;td&gt;Most common features are in place, but some edge cases and feature flags are still unhandled&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Emit (JS output)&lt;/td&gt; &#xA;   &lt;td&gt;in progress&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;target: esnext&lt;/code&gt; well-supported, other targets may have gaps&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Watch mode&lt;/td&gt; &#xA;   &lt;td&gt;prototype&lt;/td&gt; &#xA;   &lt;td&gt;Watches files and rebuilds, but no incremental rechecking&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Build mode / project references&lt;/td&gt; &#xA;   &lt;td&gt;not ready&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Incremental build&lt;/td&gt; &#xA;   &lt;td&gt;not ready&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Language service (LSP)&lt;/td&gt; &#xA;   &lt;td&gt;prototype&lt;/td&gt; &#xA;   &lt;td&gt;Minimal functionality (errors, hover, go to def). More features coming soon&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;API&lt;/td&gt; &#xA;   &lt;td&gt;not ready&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Definitions:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;done&lt;/strong&gt; aka &#34;believed done&#34;: We&#39;re not currently aware of any deficits or major left work to do. OK to log bugs&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;in progress&lt;/strong&gt;: currently being worked on; some features may work and some might not. OK to log panics, but nothing else please&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;prototype&lt;/strong&gt;: proof-of-concept only; do not log bugs&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;not ready&lt;/strong&gt;: either haven&#39;t even started yet, or far enough from ready that you shouldn&#39;t bother messing with it yet&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Other Notes&lt;/h2&gt; &#xA;&lt;p&gt;Long-term, we expect that this repo and its contents will be merged into &lt;code&gt;microsoft/TypeScript&lt;/code&gt;. As a result, the repo and issue tracker for typescript-go will eventually be closed, so treat discussions/issues accordingly.&lt;/p&gt; &#xA;&lt;p&gt;For a list of intentional changes with respect to TypeScript 5.7, see CHANGES.md.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;This project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit &lt;a href=&#34;https://cla.opensource.microsoft.com&#34;&gt;Contributor License Agreements&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;When you submit a pull request, a CLA bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., status check, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.&lt;/p&gt; &#xA;&lt;p&gt;This project has adopted the &lt;a href=&#34;https://opensource.microsoft.com/codeofconduct/&#34;&gt;Microsoft Open Source Code of Conduct&lt;/a&gt;. For more information see the &lt;a href=&#34;https://opensource.microsoft.com/codeofconduct/faq/&#34;&gt;Code of Conduct FAQ&lt;/a&gt; or contact &lt;a href=&#34;mailto:opencode@microsoft.com&#34;&gt;opencode@microsoft.com&lt;/a&gt; with any additional questions or comments.&lt;/p&gt; &#xA;&lt;h2&gt;Trademarks&lt;/h2&gt; &#xA;&lt;p&gt;This project may contain trademarks or logos for projects, products, or services. Authorized use of Microsoft trademarks or logos is subject to and must follow &lt;a href=&#34;https://www.microsoft.com/legal/intellectualproperty/trademarks/usage/general&#34;&gt;Microsoft&#39;s Trademark &amp;amp; Brand Guidelines&lt;/a&gt;. Use of Microsoft trademarks or logos in modified versions of this project must not cause confusion or imply Microsoft sponsorship. Any use of third-party trademarks or logos are subject to those third-party&#39;s policies.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>openai/openai-go</title>
    <updated>2025-08-10T06:05:19Z</updated>
    <id>tag:github.com,2025-08-10:/openai/openai-go</id>
    <link href="https://github.com/openai/openai-go" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The official Go library for the OpenAI API&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;OpenAI Go API Library&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/openai/openai-go/v2&#34;&gt;&lt;img src=&#34;https://pkg.go.dev/badge/github.com/openai/openai-go.svg?sanitize=true&#34; alt=&#34;Go Reference&#34; /&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The OpenAI Go library provides convenient access to the &lt;a href=&#34;https://platform.openai.com/docs&#34;&gt;OpenAI REST API&lt;/a&gt; from applications written in Go.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!WARNING] The latest version of this package has small and limited breaking changes. See the &lt;a href=&#34;https://raw.githubusercontent.com/openai/openai-go/main/CHANGELOG.md&#34;&gt;changelog&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;!-- x-release-please-start-version --&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;import (&#xA;&#x9;&#34;github.com/openai/openai-go/v2&#34; // imported as openai&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;!-- x-release-please-end --&gt; &#xA;&lt;p&gt;Or to pin the version:&lt;/p&gt; &#xA;&lt;!-- x-release-please-start-version --&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;go get -u &#39;github.com/openai/openai-go@v2.0.2&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;!-- x-release-please-end --&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;This library requires Go 1.21+.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;The full API of this library can be found in &lt;a href=&#34;https://raw.githubusercontent.com/openai/openai-go/main/api.md&#34;&gt;api.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;context&#34;&#xA;&#x9;&#34;fmt&#34;&#xA;&#xA;&#x9;&#34;github.com/openai/openai-go/v2&#34;&#xA;&#x9;&#34;github.com/openai/openai-go/v2/option&#34;&#xA;&#x9;&#34;github.com/openai/openai-go/v2/shared&#34;&#xA;)&#xA;&#xA;func main() {&#xA;&#x9;client := openai.NewClient(&#xA;&#x9;&#x9;option.WithAPIKey(&#34;My API Key&#34;), // defaults to os.LookupEnv(&#34;OPENAI_API_KEY&#34;)&#xA;&#x9;)&#xA;&#x9;chatCompletion, err := client.Chat.Completions.New(context.TODO(), openai.ChatCompletionNewParams{&#xA;&#x9;&#x9;Messages: []openai.ChatCompletionMessageParamUnion{&#xA;&#x9;&#x9;&#x9;openai.UserMessage(&#34;Say this is a test&#34;),&#xA;&#x9;&#x9;},&#xA;&#x9;&#x9;Model: openai.ChatModelGPT4o,&#xA;&#x9;})&#xA;&#x9;if err != nil {&#xA;&#x9;&#x9;panic(err.Error())&#xA;&#x9;}&#xA;&#x9;println(chatCompletion.Choices[0].Message.Content)&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Conversations&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;param := openai.ChatCompletionNewParams{&#xA;&#x9;Messages: []openai.ChatCompletionMessageParamUnion{&#xA;&#x9;&#x9;openai.UserMessage(&#34;What kind of houseplant is easy to take care of?&#34;),&#xA;&#x9;},&#xA;&#x9;Seed:     openai.Int(1),&#xA;&#x9;Model:    openai.ChatModelGPT4o,&#xA;}&#xA;&#xA;completion, err := client.Chat.Completions.New(ctx, param)&#xA;&#xA;param.Messages = append(param.Messages, completion.Choices[0].Message.ToParam())&#xA;param.Messages = append(param.Messages, openai.UserMessage(&#34;How big are those?&#34;))&#xA;&#xA;// continue the conversation&#xA;completion, err = client.Chat.Completions.New(ctx, param)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Streaming responses&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;question := &#34;Write an epic&#34;&#xA;&#xA;stream := client.Chat.Completions.NewStreaming(ctx, openai.ChatCompletionNewParams{&#xA;&#x9;Messages: []openai.ChatCompletionMessageParamUnion{&#xA;&#x9;&#x9;openai.UserMessage(question),&#xA;&#x9;},&#xA;&#x9;Seed:  openai.Int(0),&#xA;&#x9;Model: openai.ChatModelGPT4o,&#xA;})&#xA;&#xA;// optionally, an accumulator helper can be used&#xA;acc := openai.ChatCompletionAccumulator{}&#xA;&#xA;for stream.Next() {&#xA;&#x9;chunk := stream.Current()&#xA;&#x9;acc.AddChunk(chunk)&#xA;&#xA;&#x9;if content, ok := acc.JustFinishedContent(); ok {&#xA;&#x9;&#x9;println(&#34;Content stream finished:&#34;, content)&#xA;&#x9;}&#xA;&#xA;&#x9;// if using tool calls&#xA;&#x9;if tool, ok := acc.JustFinishedToolCall(); ok {&#xA;&#x9;&#x9;println(&#34;Tool call stream finished:&#34;, tool.Index, tool.Name, tool.Arguments)&#xA;&#x9;}&#xA;&#xA;&#x9;if refusal, ok := acc.JustFinishedRefusal(); ok {&#xA;&#x9;&#x9;println(&#34;Refusal stream finished:&#34;, refusal)&#xA;&#x9;}&#xA;&#xA;&#x9;// it&#39;s best to use chunks after handling JustFinished events&#xA;&#x9;if len(chunk.Choices) &amp;gt; 0 {&#xA;&#x9;&#x9;println(chunk.Choices[0].Delta.Content)&#xA;&#x9;}&#xA;}&#xA;&#xA;if stream.Err() != nil {&#xA;&#x9;panic(stream.Err())&#xA;}&#xA;&#xA;// After the stream is finished, acc can be used like a ChatCompletion&#xA;_ = acc.Choices[0].Message.Content&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;blockquote&gt; &#xA;  &lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/openai/openai-go/main/examples/chat-completion-accumulating/main.go&#34;&gt;full streaming and accumulation example&lt;/a&gt;&lt;/p&gt; &#xA; &lt;/blockquote&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Tool calling&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;import (&#xA;&#x9;&#34;encoding/json&#34;&#xA;&#x9;// ...&#xA;)&#xA;&#xA;// ...&#xA;&#xA;question := &#34;What is the weather in New York City?&#34;&#xA;&#xA;params := openai.ChatCompletionNewParams{&#xA;&#x9;Messages: []openai.ChatCompletionMessageParamUnion{&#xA;&#x9;&#x9;openai.UserMessage(question),&#xA;&#x9;},&#xA;&#x9;Tools: []openai.ChatCompletionToolParam{&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;Function: openai.FunctionDefinitionParam{&#xA;&#x9;&#x9;&#x9;&#x9;Name:        &#34;get_weather&#34;,&#xA;&#x9;&#x9;&#x9;&#x9;Description: openai.String(&#34;Get weather at the given location&#34;),&#xA;&#x9;&#x9;&#x9;&#x9;Parameters: openai.FunctionParameters{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;type&#34;: &#34;object&#34;,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;properties&#34;: map[string]interface{}{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;location&#34;: map[string]string{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;type&#34;: &#34;string&#34;,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;},&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;},&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;required&#34;: []string{&#34;location&#34;},&#xA;&#x9;&#x9;&#x9;&#x9;},&#xA;&#x9;&#x9;&#x9;},&#xA;&#x9;&#x9;},&#xA;&#x9;},&#xA;&#x9;Model: openai.ChatModelGPT4o,&#xA;}&#xA;&#xA;// If there is a was a function call, continue the conversation&#xA;params.Messages = append(params.Messages, completion.Choices[0].Message.ToParam())&#xA;for _, toolCall := range toolCalls {&#xA;&#x9;if toolCall.Function.Name == &#34;get_weather&#34; {&#xA;&#x9;&#x9;// Extract the location from the function call arguments&#xA;&#x9;&#x9;var args map[string]interface{}&#xA;&#x9;&#x9;err := json.Unmarshal([]byte(toolCall.Function.Arguments), &amp;amp;args)&#xA;&#x9;&#x9;if err != nil {&#xA;&#x9;&#x9;&#x9;panic(err)&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;location := args[&#34;location&#34;].(string)&#xA;&#xA;&#x9;&#x9;// Simulate getting weather data&#xA;&#x9;&#x9;weatherData := getWeather(location)&#xA;&#xA;&#x9;&#x9;// Print the weather data&#xA;&#x9;&#x9;fmt.Printf(&#34;Weather in %s: %s\n&#34;, location, weatherData)&#xA;&#xA;&#x9;&#x9;params.Messages = append(params.Messages, openai.ToolMessage(weatherData, toolCall.ID))&#xA;&#x9;}&#xA;}&#xA;&#xA;// ... continue the conversation with the information provided by the tool&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;blockquote&gt; &#xA;  &lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/openai/openai-go/main/examples/chat-completion-tool-calling/main.go&#34;&gt;full tool calling example&lt;/a&gt;&lt;/p&gt; &#xA; &lt;/blockquote&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Structured outputs&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;import (&#xA;&#x9;&#34;encoding/json&#34;&#xA;&#x9;&#34;github.com/invopop/jsonschema&#34;&#xA;&#x9;// ...&#xA;)&#xA;&#xA;// A struct that will be converted to a Structured Outputs response schema&#xA;type HistoricalComputer struct {&#xA;&#x9;Origin       Origin   `json:&#34;origin&#34; jsonschema_description:&#34;The origin of the computer&#34;`&#xA;&#x9;Name         string   `json:&#34;full_name&#34; jsonschema_description:&#34;The name of the device model&#34;`&#xA;&#x9;Legacy       string   `json:&#34;legacy&#34; jsonschema:&#34;enum=positive,enum=neutral,enum=negative&#34; jsonschema_description:&#34;Its influence on the field of computing&#34;`&#xA;&#x9;NotableFacts []string `json:&#34;notable_facts&#34; jsonschema_description:&#34;A few key facts about the computer&#34;`&#xA;}&#xA;&#xA;type Origin struct {&#xA;&#x9;YearBuilt    int64  `json:&#34;year_of_construction&#34; jsonschema_description:&#34;The year it was made&#34;`&#xA;&#x9;Organization string `json:&#34;organization&#34; jsonschema_description:&#34;The organization that was in charge of its development&#34;`&#xA;}&#xA;&#xA;func GenerateSchema[T any]() interface{} {&#xA;&#x9;// Structured Outputs uses a subset of JSON schema&#xA;&#x9;// These flags are necessary to comply with the subset&#xA;&#x9;reflector := jsonschema.Reflector{&#xA;&#x9;&#x9;AllowAdditionalProperties: false,&#xA;&#x9;&#x9;DoNotReference:            true,&#xA;&#x9;}&#xA;&#x9;var v T&#xA;&#x9;schema := reflector.Reflect(v)&#xA;&#x9;return schema&#xA;}&#xA;&#xA;// Generate the JSON schema at initialization time&#xA;var HistoricalComputerResponseSchema = GenerateSchema[HistoricalComputer]()&#xA;&#xA;func main() {&#xA;&#xA;&#x9;// ...&#xA;&#xA;&#x9;question := &#34;What computer ran the first neural network?&#34;&#xA;&#xA;&#x9;schemaParam := openai.ResponseFormatJSONSchemaJSONSchemaParam{&#xA;&#x9;&#x9;Name:        &#34;historical_computer&#34;,&#xA;&#x9;&#x9;Description: openai.String(&#34;Notable information about a computer&#34;),&#xA;&#x9;&#x9;Schema:      HistoricalComputerResponseSchema,&#xA;&#x9;&#x9;Strict:      openai.Bool(true),&#xA;&#x9;}&#xA;&#xA;&#x9;chat, _ := client.Chat.Completions.New(ctx, openai.ChatCompletionNewParams{&#xA;&#x9;&#x9;// ...&#xA;&#x9;&#x9;ResponseFormat: openai.ChatCompletionNewParamsResponseFormatUnion{&#xA;&#x9;&#x9;&#x9;OfJSONSchema: &amp;amp;openai.ResponseFormatJSONSchemaParam{&#xA;&#x9;&#x9;&#x9;&#x9;JSONSchema: schemaParam,&#xA;&#x9;&#x9;&#x9;},&#xA;&#x9;&#x9;},&#xA;&#x9;&#x9;// only certain models can perform structured outputs&#xA;&#x9;&#x9;Model: openai.ChatModelGPT4o2024_08_06,&#xA;&#x9;})&#xA;&#xA;&#x9;// extract into a well-typed struct&#xA;&#x9;var historicalComputer HistoricalComputer&#xA;&#x9;_ = json.Unmarshal([]byte(chat.Choices[0].Message.Content), &amp;amp;historicalComputer)&#xA;&#xA;&#x9;historicalComputer.Name&#xA;&#x9;historicalComputer.Origin.YearBuilt&#xA;&#x9;historicalComputer.Origin.Organization&#xA;&#x9;for i, fact := range historicalComputer.NotableFacts {&#xA;&#x9;&#x9;// ...&#xA;&#x9;}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;blockquote&gt; &#xA;  &lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/openai/openai-go/main/examples/structured-outputs/main.go&#34;&gt;full structured outputs example&lt;/a&gt;&lt;/p&gt; &#xA; &lt;/blockquote&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Request fields&lt;/h3&gt; &#xA;&lt;p&gt;The openai library uses the &lt;a href=&#34;https://tip.golang.org/doc/go1.24#encodingjsonpkgencodingjson&#34;&gt;&lt;code&gt;omitzero&lt;/code&gt;&lt;/a&gt; semantics from the Go 1.24+ &lt;code&gt;encoding/json&lt;/code&gt; release for request fields.&lt;/p&gt; &#xA;&lt;p&gt;Required primitive fields (&lt;code&gt;int64&lt;/code&gt;, &lt;code&gt;string&lt;/code&gt;, etc.) feature the tag &lt;code&gt;`json:&#34;...,required&#34;`&lt;/code&gt;. These fields are always serialized, even their zero values.&lt;/p&gt; &#xA;&lt;p&gt;Optional primitive types are wrapped in a &lt;code&gt;param.Opt[T]&lt;/code&gt;. These fields can be set with the provided constructors, &lt;code&gt;openai.String(string)&lt;/code&gt;, &lt;code&gt;openai.Int(int64)&lt;/code&gt;, etc.&lt;/p&gt; &#xA;&lt;p&gt;Any &lt;code&gt;param.Opt[T]&lt;/code&gt;, map, slice, struct or string enum uses the tag &lt;code&gt;`json:&#34;...,omitzero&#34;`&lt;/code&gt;. Its zero value is considered omitted.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;param.IsOmitted(any)&lt;/code&gt; function can confirm the presence of any &lt;code&gt;omitzero&lt;/code&gt; field.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;p := openai.ExampleParams{&#xA;&#x9;ID:   &#34;id_xxx&#34;,             // required property&#xA;&#x9;Name: openai.String(&#34;...&#34;), // optional property&#xA;&#xA;&#x9;Point: openai.Point{&#xA;&#x9;&#x9;X: 0,             // required field will serialize as 0&#xA;&#x9;&#x9;Y: openai.Int(1), // optional field will serialize as 1&#xA;&#x9;&#x9;// ... omitted non-required fields will not be serialized&#xA;&#x9;},&#xA;&#xA;&#x9;Origin: openai.Origin{}, // the zero value of [Origin] is considered omitted&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To send &lt;code&gt;null&lt;/code&gt; instead of a &lt;code&gt;param.Opt[T]&lt;/code&gt;, use &lt;code&gt;param.Null[T]()&lt;/code&gt;. To send &lt;code&gt;null&lt;/code&gt; instead of a struct &lt;code&gt;T&lt;/code&gt;, use &lt;code&gt;param.NullStruct[T]()&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;p.Name = param.Null[string]()       // &#39;null&#39; instead of string&#xA;p.Point = param.NullStruct[Point]() // &#39;null&#39; instead of struct&#xA;&#xA;param.IsNull(p.Name)  // true&#xA;param.IsNull(p.Point) // true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Request structs contain a &lt;code&gt;.SetExtraFields(map[string]any)&lt;/code&gt; method which can send non-conforming fields in the request body. Extra fields overwrite any struct fields with a matching key. For security reasons, only use &lt;code&gt;SetExtraFields&lt;/code&gt; with trusted data.&lt;/p&gt; &#xA;&lt;p&gt;To send a custom value instead of a struct, use &lt;code&gt;param.Override[T](value)&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// In cases where the API specifies a given type,&#xA;// but you want to send something else, use [SetExtraFields]:&#xA;p.SetExtraFields(map[string]any{&#xA;&#x9;&#34;x&#34;: 0.01, // send &#34;x&#34; as a float instead of int&#xA;})&#xA;&#xA;// Send a number instead of an object&#xA;custom := param.Override[openai.FooParams](12)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Request unions&lt;/h3&gt; &#xA;&lt;p&gt;Unions are represented as a struct with fields prefixed by &#34;Of&#34; for each of it&#39;s variants, only one field can be non-zero. The non-zero field will be serialized.&lt;/p&gt; &#xA;&lt;p&gt;Sub-properties of the union can be accessed via methods on the union struct. These methods return a mutable pointer to the underlying data, if present.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Only one field can be non-zero, use param.IsOmitted() to check if a field is set&#xA;type AnimalUnionParam struct {&#xA;&#x9;OfCat *Cat `json:&#34;,omitzero,inline`&#xA;&#x9;OfDog *Dog `json:&#34;,omitzero,inline`&#xA;}&#xA;&#xA;animal := AnimalUnionParam{&#xA;&#x9;OfCat: &amp;amp;Cat{&#xA;&#x9;&#x9;Name: &#34;Whiskers&#34;,&#xA;&#x9;&#x9;Owner: PersonParam{&#xA;&#x9;&#x9;&#x9;Address: AddressParam{Street: &#34;3333 Coyote Hill Rd&#34;, Zip: 0},&#xA;&#x9;&#x9;},&#xA;&#x9;},&#xA;}&#xA;&#xA;// Mutating a field&#xA;if address := animal.GetOwner().GetAddress(); address != nil {&#xA;&#x9;address.ZipCode = 94304&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Response objects&lt;/h3&gt; &#xA;&lt;p&gt;All fields in response structs are ordinary value types (not pointers or wrappers). Response structs also include a special &lt;code&gt;JSON&lt;/code&gt; field containing metadata about each property.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type Animal struct {&#xA;&#x9;Name   string `json:&#34;name,nullable&#34;`&#xA;&#x9;Owners int    `json:&#34;owners&#34;`&#xA;&#x9;Age    int    `json:&#34;age&#34;`&#xA;&#x9;JSON   struct {&#xA;&#x9;&#x9;Name        respjson.Field&#xA;&#x9;&#x9;Owner       respjson.Field&#xA;&#x9;&#x9;Age         respjson.Field&#xA;&#x9;&#x9;ExtraFields map[string]respjson.Field&#xA;&#x9;} `json:&#34;-&#34;`&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To handle optional data, use the &lt;code&gt;.Valid()&lt;/code&gt; method on the JSON field. &lt;code&gt;.Valid()&lt;/code&gt; returns true if a field is not &lt;code&gt;null&lt;/code&gt;, not present, or couldn&#39;t be marshaled.&lt;/p&gt; &#xA;&lt;p&gt;If &lt;code&gt;.Valid()&lt;/code&gt; is false, the corresponding field will simply be its zero value.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;raw := `{&#34;owners&#34;: 1, &#34;name&#34;: null}`&#xA;&#xA;var res Animal&#xA;json.Unmarshal([]byte(raw), &amp;amp;res)&#xA;&#xA;// Accessing regular fields&#xA;&#xA;res.Owners // 1&#xA;res.Name   // &#34;&#34;&#xA;res.Age    // 0&#xA;&#xA;// Optional field checks&#xA;&#xA;res.JSON.Owners.Valid() // true&#xA;res.JSON.Name.Valid()   // false&#xA;res.JSON.Age.Valid()    // false&#xA;&#xA;// Raw JSON values&#xA;&#xA;res.JSON.Owners.Raw()                  // &#34;1&#34;&#xA;res.JSON.Name.Raw() == &#34;null&#34;          // true&#xA;res.JSON.Name.Raw() == respjson.Null   // true&#xA;res.JSON.Age.Raw() == &#34;&#34;               // true&#xA;res.JSON.Age.Raw() == respjson.Omitted // true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;These &lt;code&gt;.JSON&lt;/code&gt; structs also include an &lt;code&gt;ExtraFields&lt;/code&gt; map containing any properties in the json response that were not specified in the struct. This can be useful for API features not yet present in the SDK.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;body := res.JSON.ExtraFields[&#34;my_unexpected_field&#34;].Raw()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Response Unions&lt;/h3&gt; &#xA;&lt;p&gt;In responses, unions are represented by a flattened struct containing all possible fields from each of the object variants. To convert it to a variant use the &lt;code&gt;.AsFooVariant()&lt;/code&gt; method or the &lt;code&gt;.AsAny()&lt;/code&gt; method if present.&lt;/p&gt; &#xA;&lt;p&gt;If a response value union contains primitive values, primitive fields will be alongside the properties but prefixed with &lt;code&gt;Of&lt;/code&gt; and feature the tag &lt;code&gt;json:&#34;...,inline&#34;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type AnimalUnion struct {&#xA;&#x9;// From variants [Dog], [Cat]&#xA;&#x9;Owner Person `json:&#34;owner&#34;`&#xA;&#x9;// From variant [Dog]&#xA;&#x9;DogBreed string `json:&#34;dog_breed&#34;`&#xA;&#x9;// From variant [Cat]&#xA;&#x9;CatBreed string `json:&#34;cat_breed&#34;`&#xA;&#x9;// ...&#xA;&#xA;&#x9;JSON struct {&#xA;&#x9;&#x9;Owner respjson.Field&#xA;&#x9;&#x9;// ...&#xA;&#x9;} `json:&#34;-&#34;`&#xA;}&#xA;&#xA;// If animal variant&#xA;if animal.Owner.Address.ZipCode == &#34;&#34; {&#xA;&#x9;panic(&#34;missing zip code&#34;)&#xA;}&#xA;&#xA;// Switch on the variant&#xA;switch variant := animal.AsAny().(type) {&#xA;case Dog:&#xA;case Cat:&#xA;default:&#xA;&#x9;panic(&#34;unexpected type&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;RequestOptions&lt;/h3&gt; &#xA;&lt;p&gt;This library uses the functional options pattern. Functions defined in the &lt;code&gt;option&lt;/code&gt; package return a &lt;code&gt;RequestOption&lt;/code&gt;, which is a closure that mutates a &lt;code&gt;RequestConfig&lt;/code&gt;. These options can be supplied to the client or at individual requests. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;client := openai.NewClient(&#xA;&#x9;// Adds a header to every request made by the client&#xA;&#x9;option.WithHeader(&#34;X-Some-Header&#34;, &#34;custom_header_info&#34;),&#xA;)&#xA;&#xA;client.Chat.Completions.New(context.TODO(), ...,&#xA;&#x9;// Override the header&#xA;&#x9;option.WithHeader(&#34;X-Some-Header&#34;, &#34;some_other_custom_header_info&#34;),&#xA;&#x9;// Add an undocumented field to the request body, using sjson syntax&#xA;&#x9;option.WithJSONSet(&#34;some.json.path&#34;, map[string]string{&#34;my&#34;: &#34;object&#34;}),&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The request option &lt;code&gt;option.WithDebugLog(nil)&lt;/code&gt; may be helpful while debugging.&lt;/p&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://pkg.go.dev/github.com/openai/openai-go/option&#34;&gt;full list of request options&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Pagination&lt;/h3&gt; &#xA;&lt;p&gt;This library provides some conveniences for working with paginated list endpoints.&lt;/p&gt; &#xA;&lt;p&gt;You can use &lt;code&gt;.ListAutoPaging()&lt;/code&gt; methods to iterate through items across all pages:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;iter := client.FineTuning.Jobs.ListAutoPaging(context.TODO(), openai.FineTuningJobListParams{&#xA;&#x9;Limit: openai.Int(20),&#xA;})&#xA;// Automatically fetches more pages as needed.&#xA;for iter.Next() {&#xA;&#x9;fineTuningJob := iter.Current()&#xA;&#x9;fmt.Printf(&#34;%+v\n&#34;, fineTuningJob)&#xA;}&#xA;if err := iter.Err(); err != nil {&#xA;&#x9;panic(err.Error())&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or you can use simple &lt;code&gt;.List()&lt;/code&gt; methods to fetch a single page and receive a standard response object with additional helper methods like &lt;code&gt;.GetNextPage()&lt;/code&gt;, e.g.:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;page, err := client.FineTuning.Jobs.List(context.TODO(), openai.FineTuningJobListParams{&#xA;&#x9;Limit: openai.Int(20),&#xA;})&#xA;for page != nil {&#xA;&#x9;for _, job := range page.Data {&#xA;&#x9;&#x9;fmt.Printf(&#34;%+v\n&#34;, job)&#xA;&#x9;}&#xA;&#x9;page, err = page.GetNextPage()&#xA;}&#xA;if err != nil {&#xA;&#x9;panic(err.Error())&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Errors&lt;/h3&gt; &#xA;&lt;p&gt;When the API returns a non-success status code, we return an error with type &lt;code&gt;*openai.Error&lt;/code&gt;. This contains the &lt;code&gt;StatusCode&lt;/code&gt;, &lt;code&gt;*http.Request&lt;/code&gt;, and &lt;code&gt;*http.Response&lt;/code&gt; values of the request, as well as the JSON of the error body (much like other response objects in the SDK).&lt;/p&gt; &#xA;&lt;p&gt;To handle errors, we recommend that you use the &lt;code&gt;errors.As&lt;/code&gt; pattern:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;_, err := client.FineTuning.Jobs.New(context.TODO(), openai.FineTuningJobNewParams{&#xA;&#x9;Model:        openai.FineTuningJobNewParamsModelBabbage002,&#xA;&#x9;TrainingFile: &#34;file-abc123&#34;,&#xA;})&#xA;if err != nil {&#xA;&#x9;var apierr *openai.Error&#xA;&#x9;if errors.As(err, &amp;amp;apierr) {&#xA;&#x9;&#x9;println(string(apierr.DumpRequest(true)))  // Prints the serialized HTTP request&#xA;&#x9;&#x9;println(string(apierr.DumpResponse(true))) // Prints the serialized HTTP response&#xA;&#x9;}&#xA;&#x9;panic(err.Error()) // GET &#34;/fine_tuning/jobs&#34;: 400 Bad Request { ... }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When other errors occur, they are returned unwrapped; for example, if HTTP transport fails, you might receive &lt;code&gt;*url.Error&lt;/code&gt; wrapping &lt;code&gt;*net.OpError&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Timeouts&lt;/h3&gt; &#xA;&lt;p&gt;Requests do not time out by default; use context to configure a timeout for a request lifecycle.&lt;/p&gt; &#xA;&lt;p&gt;Note that if a request is &lt;a href=&#34;https://raw.githubusercontent.com/openai/openai-go/main/#retries&#34;&gt;retried&lt;/a&gt;, the context timeout does not start over. To set a per-retry timeout, use &lt;code&gt;option.WithRequestTimeout()&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// This sets the timeout for the request, including all the retries.&#xA;ctx, cancel := context.WithTimeout(context.Background(), 5*time.Minute)&#xA;defer cancel()&#xA;client.Chat.Completions.New(&#xA;&#x9;ctx,&#xA;&#x9;openai.ChatCompletionNewParams{&#xA;&#x9;&#x9;Messages: []openai.ChatCompletionMessageParamUnion{{&#xA;&#x9;&#x9;&#x9;OfUser: &amp;amp;openai.ChatCompletionUserMessageParam{&#xA;&#x9;&#x9;&#x9;&#x9;Content: openai.ChatCompletionUserMessageParamContentUnion{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;OfString: openai.String(&#34;How can I list all files in a directory using Python?&#34;),&#xA;&#x9;&#x9;&#x9;&#x9;},&#xA;&#x9;&#x9;&#x9;},&#xA;&#x9;&#x9;}},&#xA;&#x9;&#x9;Model: shared.ChatModelGPT5,&#xA;&#x9;},&#xA;&#x9;// This sets the per-retry timeout&#xA;&#x9;option.WithRequestTimeout(20*time.Second),&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;File uploads&lt;/h3&gt; &#xA;&lt;p&gt;Request parameters that correspond to file uploads in multipart requests are typed as &lt;code&gt;io.Reader&lt;/code&gt;. The contents of the &lt;code&gt;io.Reader&lt;/code&gt; will by default be sent as a multipart form part with the file name of &#34;anonymous_file&#34; and content-type of &#34;application/octet-stream&#34;.&lt;/p&gt; &#xA;&lt;p&gt;The file name and content-type can be customized by implementing &lt;code&gt;Name() string&lt;/code&gt; or &lt;code&gt;ContentType() string&lt;/code&gt; on the run-time type of &lt;code&gt;io.Reader&lt;/code&gt;. Note that &lt;code&gt;os.File&lt;/code&gt; implements &lt;code&gt;Name() string&lt;/code&gt;, so a file returned by &lt;code&gt;os.Open&lt;/code&gt; will be sent with the file name on disk.&lt;/p&gt; &#xA;&lt;p&gt;We also provide a helper &lt;code&gt;openai.File(reader io.Reader, filename string, contentType string)&lt;/code&gt; which can be used to wrap any &lt;code&gt;io.Reader&lt;/code&gt; with the appropriate file name and content type.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// A file from the file system&#xA;file, err := os.Open(&#34;input.jsonl&#34;)&#xA;openai.FileNewParams{&#xA;&#x9;File:    file,&#xA;&#x9;Purpose: openai.FilePurposeFineTune,&#xA;}&#xA;&#xA;// A file from a string&#xA;openai.FileNewParams{&#xA;&#x9;File:    strings.NewReader(&#34;my file contents&#34;),&#xA;&#x9;Purpose: openai.FilePurposeFineTune,&#xA;}&#xA;&#xA;// With a custom filename and contentType&#xA;openai.FileNewParams{&#xA;&#x9;File:    openai.File(strings.NewReader(`{&#34;hello&#34;: &#34;foo&#34;}`), &#34;file.go&#34;, &#34;application/json&#34;),&#xA;&#x9;Purpose: openai.FilePurposeFineTune,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Webhook Verification&lt;/h2&gt; &#xA;&lt;p&gt;Verifying webhook signatures is &lt;em&gt;optional but encouraged&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For more information about webhooks, see &lt;a href=&#34;https://platform.openai.com/docs/guides/webhooks&#34;&gt;the API docs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Parsing webhook payloads&lt;/h3&gt; &#xA;&lt;p&gt;For most use cases, you will likely want to verify the webhook and parse the payload at the same time. To achieve this, we provide the method &lt;code&gt;client.Webhooks.Unwrap()&lt;/code&gt;, which parses a webhook request and verifies that it was sent by OpenAI. This method will return an error if the signature is invalid.&lt;/p&gt; &#xA;&lt;p&gt;Note that the &lt;code&gt;body&lt;/code&gt; parameter should be the raw JSON bytes sent from the server (do not parse it first). The &lt;code&gt;Unwrap()&lt;/code&gt; method will parse this JSON for you into an event object after verifying the webhook was sent from OpenAI.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;io&#34;&#xA;&#x9;&#34;log&#34;&#xA;&#x9;&#34;net/http&#34;&#xA;&#x9;&#34;os&#34;&#xA;&#xA;&#x9;&#34;github.com/gin-gonic/gin&#34;&#xA;&#x9;&#34;github.com/openai/openai-go/v2&#34;&#xA;&#x9;&#34;github.com/openai/openai-go/v2/option&#34;&#xA;&#x9;&#34;github.com/openai/openai-go/v2/webhooks&#34;&#xA;)&#xA;&#xA;func main() {&#xA;&#x9;client := openai.NewClient(&#xA;&#x9;&#x9;option.WithWebhookSecret(os.Getenv(&#34;OPENAI_WEBHOOK_SECRET&#34;)), // env var used by default; explicit here.&#xA;&#x9;)&#xA;&#xA;&#x9;r := gin.Default()&#xA;&#xA;&#x9;r.POST(&#34;/webhook&#34;, func(c *gin.Context) {&#xA;&#x9;&#x9;body, err := io.ReadAll(c.Request.Body)&#xA;&#x9;&#x9;if err != nil {&#xA;&#x9;&#x9;&#x9;c.JSON(http.StatusInternalServerError, gin.H{&#34;error&#34;: &#34;Error reading request body&#34;})&#xA;&#x9;&#x9;&#x9;return&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;defer c.Request.Body.Close()&#xA;&#xA;&#x9;&#x9;webhookEvent, err := client.Webhooks.Unwrap(body, c.Request.Header)&#xA;&#x9;&#x9;if err != nil {&#xA;&#x9;&#x9;&#x9;log.Printf(&#34;Invalid webhook signature: %v&#34;, err)&#xA;&#x9;&#x9;&#x9;c.JSON(http.StatusBadRequest, gin.H{&#34;error&#34;: &#34;invalid signature&#34;})&#xA;&#x9;&#x9;&#x9;return&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;switch event := webhookEvent.AsAny().(type) {&#xA;&#x9;&#x9;case webhooks.ResponseCompletedWebhookEvent:&#xA;&#x9;&#x9;&#x9;log.Printf(&#34;Response completed: %+v&#34;, event.Data)&#xA;&#x9;&#x9;case webhooks.ResponseFailedWebhookEvent:&#xA;&#x9;&#x9;&#x9;log.Printf(&#34;Response failed: %+v&#34;, event.Data)&#xA;&#x9;&#x9;default:&#xA;&#x9;&#x9;&#x9;log.Printf(&#34;Unhandled event type: %T&#34;, event)&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;c.JSON(http.StatusOK, gin.H{&#34;message&#34;: &#34;ok&#34;})&#xA;&#x9;})&#xA;&#xA;&#x9;r.Run(&#34;:8000&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Verifying webhook payloads directly&lt;/h3&gt; &#xA;&lt;p&gt;In some cases, you may want to verify the webhook separately from parsing the payload. If you prefer to handle these steps separately, we provide the method &lt;code&gt;client.Webhooks.VerifySignature()&lt;/code&gt; to &lt;em&gt;only verify&lt;/em&gt; the signature of a webhook request. Like &lt;code&gt;Unwrap()&lt;/code&gt;, this method will return an error if the signature is invalid.&lt;/p&gt; &#xA;&lt;p&gt;Note that the &lt;code&gt;body&lt;/code&gt; parameter should be the raw JSON bytes sent from the server (do not parse it first). You will then need to parse the body after verifying the signature.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;encoding/json&#34;&#xA;&#x9;&#34;io&#34;&#xA;&#x9;&#34;log&#34;&#xA;&#x9;&#34;net/http&#34;&#xA;&#x9;&#34;os&#34;&#xA;&#xA;&#x9;&#34;github.com/gin-gonic/gin&#34;&#xA;&#x9;&#34;github.com/openai/openai-go/v2&#34;&#xA;&#x9;&#34;github.com/openai/openai-go/v2/option&#34;&#xA;)&#xA;&#xA;func main() {&#xA;&#x9;client := openai.NewClient(&#xA;&#x9;&#x9;option.WithWebhookSecret(os.Getenv(&#34;OPENAI_WEBHOOK_SECRET&#34;)), // env var used by default; explicit here.&#xA;&#x9;)&#xA;&#xA;&#x9;r := gin.Default()&#xA;&#xA;&#x9;r.POST(&#34;/webhook&#34;, func(c *gin.Context) {&#xA;&#x9;&#x9;body, err := io.ReadAll(c.Request.Body)&#xA;&#x9;&#x9;if err != nil {&#xA;&#x9;&#x9;&#x9;c.JSON(http.StatusInternalServerError, gin.H{&#34;error&#34;: &#34;Error reading request body&#34;})&#xA;&#x9;&#x9;&#x9;return&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;defer c.Request.Body.Close()&#xA;&#xA;&#x9;&#x9;err = client.Webhooks.VerifySignature(body, c.Request.Header)&#xA;&#x9;&#x9;if err != nil {&#xA;&#x9;&#x9;&#x9;log.Printf(&#34;Invalid webhook signature: %v&#34;, err)&#xA;&#x9;&#x9;&#x9;c.JSON(http.StatusBadRequest, gin.H{&#34;error&#34;: &#34;invalid signature&#34;})&#xA;&#x9;&#x9;&#x9;return&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;c.JSON(http.StatusOK, gin.H{&#34;message&#34;: &#34;ok&#34;})&#xA;&#x9;})&#xA;&#xA;&#x9;r.Run(&#34;:8000&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Retries&lt;/h3&gt; &#xA;&lt;p&gt;Certain errors will be automatically retried 2 times by default, with a short exponential backoff. We retry by default all connection errors, 408 Request Timeout, 409 Conflict, 429 Rate Limit, and &amp;gt;=500 Internal errors.&lt;/p&gt; &#xA;&lt;p&gt;You can use the &lt;code&gt;WithMaxRetries&lt;/code&gt; option to configure or disable this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Configure the default for all requests:&#xA;client := openai.NewClient(&#xA;&#x9;option.WithMaxRetries(0), // default is 2&#xA;)&#xA;&#xA;// Override per-request:&#xA;client.Chat.Completions.New(&#xA;&#x9;context.TODO(),&#xA;&#x9;openai.ChatCompletionNewParams{&#xA;&#x9;&#x9;Messages: []openai.ChatCompletionMessageParamUnion{{&#xA;&#x9;&#x9;&#x9;OfUser: &amp;amp;openai.ChatCompletionUserMessageParam{&#xA;&#x9;&#x9;&#x9;&#x9;Content: openai.ChatCompletionUserMessageParamContentUnion{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;OfString: openai.String(&#34;How can I get the name of the current day in JavaScript?&#34;),&#xA;&#x9;&#x9;&#x9;&#x9;},&#xA;&#x9;&#x9;&#x9;},&#xA;&#x9;&#x9;}},&#xA;&#x9;&#x9;Model: shared.ChatModelGPT5,&#xA;&#x9;},&#xA;&#x9;option.WithMaxRetries(5),&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Accessing raw response data (e.g. response headers)&lt;/h3&gt; &#xA;&lt;p&gt;You can access the raw HTTP response data by using the &lt;code&gt;option.WithResponseInto()&lt;/code&gt; request option. This is useful when you need to examine response headers, status codes, or other details.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Create a variable to store the HTTP response&#xA;var response *http.Response&#xA;chatCompletion, err := client.Chat.Completions.New(&#xA;&#x9;context.TODO(),&#xA;&#x9;openai.ChatCompletionNewParams{&#xA;&#x9;&#x9;Messages: []openai.ChatCompletionMessageParamUnion{{&#xA;&#x9;&#x9;&#x9;OfUser: &amp;amp;openai.ChatCompletionUserMessageParam{&#xA;&#x9;&#x9;&#x9;&#x9;Content: openai.ChatCompletionUserMessageParamContentUnion{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;OfString: openai.String(&#34;Say this is a test&#34;),&#xA;&#x9;&#x9;&#x9;&#x9;},&#xA;&#x9;&#x9;&#x9;},&#xA;&#x9;&#x9;}},&#xA;&#x9;&#x9;Model: shared.ChatModelGPT5,&#xA;&#x9;},&#xA;&#x9;option.WithResponseInto(&amp;amp;response),&#xA;)&#xA;if err != nil {&#xA;&#x9;// handle error&#xA;}&#xA;fmt.Printf(&#34;%+v\n&#34;, chatCompletion)&#xA;&#xA;fmt.Printf(&#34;Status Code: %d\n&#34;, response.StatusCode)&#xA;fmt.Printf(&#34;Headers: %+#v\n&#34;, response.Header)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Making custom/undocumented requests&lt;/h3&gt; &#xA;&lt;p&gt;This library is typed for convenient access to the documented API. If you need to access undocumented endpoints, params, or response properties, the library can still be used.&lt;/p&gt; &#xA;&lt;h4&gt;Undocumented endpoints&lt;/h4&gt; &#xA;&lt;p&gt;To make requests to undocumented endpoints, you can use &lt;code&gt;client.Get&lt;/code&gt;, &lt;code&gt;client.Post&lt;/code&gt;, and other HTTP verbs. &lt;code&gt;RequestOptions&lt;/code&gt; on the client, such as retries, will be respected when making these requests.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;var (&#xA;    // params can be an io.Reader, a []byte, an encoding/json serializable object,&#xA;    // or a &#34;…Params&#34; struct defined in this library.&#xA;    params map[string]any&#xA;&#xA;    // result can be an []byte, *http.Response, a encoding/json deserializable object,&#xA;    // or a model defined in this library.&#xA;    result *http.Response&#xA;)&#xA;err := client.Post(context.Background(), &#34;/unspecified&#34;, params, &amp;amp;result)&#xA;if err != nil {&#xA;    …&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Undocumented request params&lt;/h4&gt; &#xA;&lt;p&gt;To make requests using undocumented parameters, you may use either the &lt;code&gt;option.WithQuerySet()&lt;/code&gt; or the &lt;code&gt;option.WithJSONSet()&lt;/code&gt; methods.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;params := FooNewParams{&#xA;    ID:   &#34;id_xxxx&#34;,&#xA;    Data: FooNewParamsData{&#xA;        FirstName: openai.String(&#34;John&#34;),&#xA;    },&#xA;}&#xA;client.Foo.New(context.Background(), params, option.WithJSONSet(&#34;data.last_name&#34;, &#34;Doe&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Undocumented response properties&lt;/h4&gt; &#xA;&lt;p&gt;To access undocumented response properties, you may either access the raw JSON of the response as a string with &lt;code&gt;result.JSON.RawJSON()&lt;/code&gt;, or get the raw JSON of a particular field on the result with &lt;code&gt;result.JSON.Foo.Raw()&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Any fields that are not present on the response struct will be saved and can be accessed by &lt;code&gt;result.JSON.ExtraFields()&lt;/code&gt; which returns the extra fields as a &lt;code&gt;map[string]Field&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Middleware&lt;/h3&gt; &#xA;&lt;p&gt;We provide &lt;code&gt;option.WithMiddleware&lt;/code&gt; which applies the given middleware to requests.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func Logger(req *http.Request, next option.MiddlewareNext) (res *http.Response, err error) {&#xA;&#x9;// Before the request&#xA;&#x9;start := time.Now()&#xA;&#x9;LogReq(req)&#xA;&#xA;&#x9;// Forward the request to the next handler&#xA;&#x9;res, err = next(req)&#xA;&#xA;&#x9;// Handle stuff after the request&#xA;&#x9;end := time.Now()&#xA;&#x9;LogRes(res, err, start - end)&#xA;&#xA;    return res, err&#xA;}&#xA;&#xA;client := openai.NewClient(&#xA;&#x9;option.WithMiddleware(Logger),&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When multiple middlewares are provided as variadic arguments, the middlewares are applied left to right. If &lt;code&gt;option.WithMiddleware&lt;/code&gt; is given multiple times, for example first in the client then the method, the middleware in the client will run first and the middleware given in the method will run next.&lt;/p&gt; &#xA;&lt;p&gt;You may also replace the default &lt;code&gt;http.Client&lt;/code&gt; with &lt;code&gt;option.WithHTTPClient(client)&lt;/code&gt;. Only one http client is accepted (this overwrites any previous client) and receives requests after any middleware has been applied.&lt;/p&gt; &#xA;&lt;h2&gt;Microsoft Azure OpenAI&lt;/h2&gt; &#xA;&lt;p&gt;To use this library with [Azure OpenAI]&lt;a href=&#34;https://learn.microsoft.com/azure/ai-services/openai/overview&#34;&gt;https://learn.microsoft.com/azure/ai-services/openai/overview&lt;/a&gt;), use the option.RequestOption functions in the &lt;code&gt;azure&lt;/code&gt; package.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;github.com/Azure/azure-sdk-for-go/sdk/azidentity&#34;&#xA;&#x9;&#34;github.com/openai/openai-go/v2&#34;&#xA;&#x9;&#34;github.com/openai/openai-go/v2/azure&#34;&#xA;)&#xA;&#xA;func main() {&#xA;&#x9;const azureOpenAIEndpoint = &#34;https://&amp;lt;azure-openai-resource&amp;gt;.openai.azure.com&#34;&#xA;&#xA;&#x9;// The latest API versions, including previews, can be found here:&#xA;&#x9;// ttps://learn.microsoft.com/en-us/azure/ai-services/openai/reference#rest-api-versionng&#xA;&#x9;const azureOpenAIAPIVersion = &#34;2024-06-01&#34;&#xA;&#xA;&#x9;tokenCredential, err := azidentity.NewDefaultAzureCredential(nil)&#xA;&#xA;&#x9;if err != nil {&#xA;&#x9;&#x9;fmt.Printf(&#34;Failed to create the DefaultAzureCredential: %s&#34;, err)&#xA;&#x9;&#x9;os.Exit(1)&#xA;&#x9;}&#xA;&#xA;&#x9;client := openai.NewClient(&#xA;&#x9;&#x9;azure.WithEndpoint(azureOpenAIEndpoint, azureOpenAIAPIVersion),&#xA;&#xA;&#x9;&#x9;// Choose between authenticating using a TokenCredential or an API Key&#xA;&#x9;&#x9;azure.WithTokenCredential(tokenCredential),&#xA;&#x9;&#x9;// or azure.WithAPIKey(azureOpenAIAPIKey),&#xA;&#x9;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Semantic versioning&lt;/h2&gt; &#xA;&lt;p&gt;This package generally follows &lt;a href=&#34;https://semver.org/spec/v2.0.0.html&#34;&gt;SemVer&lt;/a&gt; conventions, though certain backwards-incompatible changes may be released as minor versions:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Changes to library internals which are technically public but not intended or documented for external use. &lt;em&gt;(Please open a GitHub issue to let us know if you are relying on such internals.)&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;Changes that we do not expect to impact the vast majority of users in practice.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;We take backwards-compatibility seriously and work hard to ensure you can rely on a smooth upgrade experience.&lt;/p&gt; &#xA;&lt;p&gt;We are keen for your feedback; please open an &lt;a href=&#34;https://www.github.com/openai/openai-go/issues&#34;&gt;issue&lt;/a&gt; with questions, bugs, or suggestions.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/openai/openai-go/main/CONTRIBUTING.md&#34;&gt;the contributing documentation&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>