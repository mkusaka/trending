<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-08-24T01:46:12Z</updated>
  <subtitle>Weekly Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>isaacphi/mcp-language-server</title>
    <updated>2025-08-24T01:46:12Z</updated>
    <id>tag:github.com,2025-08-24:/isaacphi/mcp-language-server</id>
    <link href="https://github.com/isaacphi/mcp-language-server" rel="alternate"></link>
    <summary type="html">&lt;p&gt;mcp-language-server gives MCP enabled clients access semantic tools like get definition, references, rename, and diagnostics.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;MCP Language Server&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/isaacphi/mcp-language-server/actions/workflows/go.yml&#34;&gt;&lt;img src=&#34;https://github.com/isaacphi/mcp-language-server/actions/workflows/go.yml/badge.svg?sanitize=true&#34; alt=&#34;Go Tests&#34; /&gt;&lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/isaacphi/mcp-language-server&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/isaacphi/mcp-language-server&#34; alt=&#34;Go Report Card&#34; /&gt;&lt;/a&gt; &lt;a href=&#34;https://pkg.go.dev/github.com/isaacphi/mcp-language-server&#34;&gt;&lt;img src=&#34;https://pkg.go.dev/badge/github.com/isaacphi/mcp-language-server&#34; alt=&#34;GoDoc&#34; /&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/isaacphi/mcp-language-server/raw/main/go.mod&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/go-mod/go-version/isaacphi/mcp-language-server&#34; alt=&#34;Go Version&#34; /&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This is an &lt;a href=&#34;https://modelcontextprotocol.io/introduction&#34;&gt;MCP&lt;/a&gt; server that runs and exposes a &lt;a href=&#34;https://microsoft.github.io/language-server-protocol/&#34;&gt;language server&lt;/a&gt; to LLMs. Not a language server for MCP, whatever that would be.&lt;/p&gt; &#xA;&lt;h2&gt;Demo&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;mcp-language-server&lt;/code&gt; helps MCP enabled clients navigate codebases more easily by giving them access semantic tools like get definition, references, rename, and diagnostics.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/isaacphi/mcp-language-server/main/demo.gif&#34; alt=&#34;Demo&#34; /&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;Install Go&lt;/strong&gt;: Follow instructions at &lt;a href=&#34;https://golang.org/doc/install&#34;&gt;https://golang.org/doc/install&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Install or update this server&lt;/strong&gt;: &lt;code&gt;go install github.com/isaacphi/mcp-language-server@latest&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Install a language server&lt;/strong&gt;: &lt;em&gt;follow one of the guides below&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Configure your MCP client&lt;/strong&gt;: &lt;em&gt;follow one of the guides below&lt;/em&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Go (gopls)&lt;/summary&gt; &#xA; &lt;div&gt; &#xA;  &lt;p&gt;&lt;strong&gt;Install gopls&lt;/strong&gt;: &lt;code&gt;go install golang.org/x/tools/gopls@latest&lt;/code&gt;&lt;/p&gt; &#xA;  &lt;p&gt;&lt;strong&gt;Configure your MCP client&lt;/strong&gt;: This will be different but similar for each client. For Claude Desktop, add the following to &lt;code&gt;~/Library/Application\ Support/Claude/claude_desktop_config.json&lt;/code&gt;&lt;/p&gt; &#xA;  &lt;pre&gt;&#xA;{&#xA;  &#34;mcpServers&#34;: {&#xA;    &#34;language-server&#34;: {&#xA;      &#34;command&#34;: &#34;mcp-language-server&#34;,&#xA;      &#34;args&#34;: [&#34;--workspace&#34;, &#34;/Users/you/dev/yourproject/&#34;, &#34;--lsp&#34;, &#34;gopls&#34;],&#xA;      &#34;env&#34;: {&#xA;        &#34;PATH&#34;: &#34;/opt/homebrew/bin:/Users/you/go/bin&#34;,&#xA;        &#34;GOPATH&#34;: &#34;/users/you/go&#34;,&#xA;        &#34;GOCACHE&#34;: &#34;/users/you/Library/Caches/go-build&#34;,&#xA;        &#34;GOMODCACHE&#34;: &#34;/Users/you/go/pkg/mod&#34;&#xA;      }&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/pre&gt; &#xA;  &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Not all clients will need these environment variables. For Claude Desktop you will need to update the environment variables above based on your machine and username:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;PATH&lt;/code&gt; needs to contain the path to &lt;code&gt;go&lt;/code&gt; and to &lt;code&gt;gopls&lt;/code&gt;. Get this with &lt;code&gt;echo $(which go):$(which gopls)&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;GOPATH&lt;/code&gt;, &lt;code&gt;GOCACHE&lt;/code&gt;, and &lt;code&gt;GOMODCACHE&lt;/code&gt; may be different on your machine. These are the defaults.&lt;/li&gt; &#xA;  &lt;/ul&gt; &#xA; &lt;/div&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Rust (rust-analyzer)&lt;/summary&gt; &#xA; &lt;div&gt; &#xA;  &lt;p&gt;&lt;strong&gt;Install rust-analyzer&lt;/strong&gt;: &lt;code&gt;rustup component add rust-analyzer&lt;/code&gt;&lt;/p&gt; &#xA;  &lt;p&gt;&lt;strong&gt;Configure your MCP client&lt;/strong&gt;: This will be different but similar for each client. For Claude Desktop, add the following to &lt;code&gt;~/Library/Application\ Support/Claude/claude_desktop_config.json&lt;/code&gt;&lt;/p&gt; &#xA;  &lt;pre&gt;&#xA;{&#xA;  &#34;mcpServers&#34;: {&#xA;    &#34;language-server&#34;: {&#xA;      &#34;command&#34;: &#34;mcp-language-server&#34;,&#xA;      &#34;args&#34;: [&#xA;        &#34;--workspace&#34;,&#xA;        &#34;/Users/you/dev/yourproject/&#34;,&#xA;        &#34;--lsp&#34;,&#xA;        &#34;rust-analyzer&#34;&#xA;      ]&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/pre&gt; &#xA; &lt;/div&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Python (pyright)&lt;/summary&gt; &#xA; &lt;div&gt; &#xA;  &lt;p&gt;&lt;strong&gt;Install pyright&lt;/strong&gt;: &lt;code&gt;npm install -g pyright&lt;/code&gt;&lt;/p&gt; &#xA;  &lt;p&gt;&lt;strong&gt;Configure your MCP client&lt;/strong&gt;: This will be different but similar for each client. For Claude Desktop, add the following to &lt;code&gt;~/Library/Application\ Support/Claude/claude_desktop_config.json&lt;/code&gt;&lt;/p&gt; &#xA;  &lt;pre&gt;&#xA;{&#xA;  &#34;mcpServers&#34;: {&#xA;    &#34;language-server&#34;: {&#xA;      &#34;command&#34;: &#34;mcp-language-server&#34;,&#xA;      &#34;args&#34;: [&#xA;        &#34;--workspace&#34;,&#xA;        &#34;/Users/you/dev/yourproject/&#34;,&#xA;        &#34;--lsp&#34;,&#xA;        &#34;pyright-langserver&#34;,&#xA;        &#34;--&#34;,&#xA;        &#34;--stdio&#34;&#xA;      ]&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/pre&gt; &#xA; &lt;/div&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Typescript (typescript-language-server)&lt;/summary&gt; &#xA; &lt;div&gt; &#xA;  &lt;p&gt;&lt;strong&gt;Install typescript-language-server&lt;/strong&gt;: &lt;code&gt;npm install -g typescript typescript-language-server&lt;/code&gt;&lt;/p&gt; &#xA;  &lt;p&gt;&lt;strong&gt;Configure your MCP client&lt;/strong&gt;: This will be different but similar for each client. For Claude Desktop, add the following to &lt;code&gt;~/Library/Application\ Support/Claude/claude_desktop_config.json&lt;/code&gt;&lt;/p&gt; &#xA;  &lt;pre&gt;&#xA;{&#xA;  &#34;mcpServers&#34;: {&#xA;    &#34;language-server&#34;: {&#xA;      &#34;command&#34;: &#34;mcp-language-server&#34;,&#xA;      &#34;args&#34;: [&#xA;        &#34;--workspace&#34;,&#xA;        &#34;/Users/you/dev/yourproject/&#34;,&#xA;        &#34;--lsp&#34;,&#xA;        &#34;typescript-language-server&#34;,&#xA;        &#34;--&#34;,&#xA;        &#34;--stdio&#34;&#xA;      ]&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/pre&gt; &#xA; &lt;/div&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;C/C++ (clangd)&lt;/summary&gt; &#xA; &lt;div&gt; &#xA;  &lt;p&gt;&lt;strong&gt;Install clangd&lt;/strong&gt;: Download prebuilt binaries from the &lt;a href=&#34;https://github.com/clangd/clangd/releases&#34;&gt;official LLVM releases page&lt;/a&gt; or install via your system&#39;s package manager (e.g., &lt;code&gt;apt install clangd&lt;/code&gt;, &lt;code&gt;brew install clangd&lt;/code&gt;).&lt;/p&gt; &#xA;  &lt;p&gt;&lt;strong&gt;Configure your MCP client&lt;/strong&gt;: This will be different but similar for each client. For Claude Desktop, add the following to &lt;code&gt;~/Library/Application\\ Support/Claude/claude_desktop_config.json&lt;/code&gt;&lt;/p&gt; &#xA;  &lt;pre&gt;&#xA;{&#xA;  &#34;mcpServers&#34;: {&#xA;    &#34;language-server&#34;: {&#xA;      &#34;command&#34;: &#34;mcp-language-server&#34;,&#xA;      &#34;args&#34;: [&#xA;        &#34;--workspace&#34;,&#xA;        &#34;/Users/you/dev/yourproject/&#34;,&#xA;        &#34;--lsp&#34;,&#xA;        &#34;/path/to/your/clangd_binary&#34;,&#xA;        &#34;--&#34;,&#xA;        &#34;--compile-commands-dir=/path/to/yourproject/build_or_compile_commands_dir&#34;&#xA;      ]&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/pre&gt; &#xA;  &lt;pre&gt;&lt;code&gt;&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;Note&amp;lt;/strong&amp;gt;:&amp;lt;/p&amp;gt;&#xA;&amp;lt;ul&amp;gt;&#xA;  &amp;lt;li&amp;gt;Replace &amp;lt;code&amp;gt;/path/to/your/clangd_binary&amp;lt;/code&amp;gt; with the actual path to your clangd executable.&amp;lt;/li&amp;gt;&#xA;  &amp;lt;li&amp;gt;&amp;lt;code&amp;gt;--compile-commands-dir&amp;lt;/code&amp;gt; should point to the directory containing your &amp;lt;code&amp;gt;compile_commands.json&amp;lt;/code&amp;gt; file (e.g., &amp;lt;code&amp;gt;./build&amp;lt;/code&amp;gt;, &amp;lt;code&amp;gt;./cmake-build-debug&amp;lt;/code&amp;gt;).&amp;lt;/li&amp;gt;&#xA;  &amp;lt;li&amp;gt;Ensure &amp;lt;code&amp;gt;compile_commands.json&amp;lt;/code&amp;gt; is generated for your project for clangd to work effectively.&amp;lt;/li&amp;gt;&#xA;&amp;lt;/ul&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;/div&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Other&lt;/summary&gt; &#xA; &lt;div&gt; &#xA;  &lt;p&gt;I have only tested this repo with the servers above but it should be compatible with many more. Note:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;The language server must communicate over stdio.&lt;/li&gt; &#xA;   &lt;li&gt;Any aruments after &lt;code&gt;--&lt;/code&gt; are sent as arguments to the language server.&lt;/li&gt; &#xA;   &lt;li&gt;Any env variables are passed on to the language server.&lt;/li&gt; &#xA;  &lt;/ul&gt; &#xA; &lt;/div&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Tools&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;definition&lt;/code&gt;: Retrieves the complete source code definition of any symbol (function, type, constant, etc.) from your codebase.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;references&lt;/code&gt;: Locates all usages and references of a symbol throughout the codebase.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;diagnostics&lt;/code&gt;: Provides diagnostic information for a specific file, including warnings and errors.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;hover&lt;/code&gt;: Display documentation, type hints, or other hover information for a given location.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;rename_symbol&lt;/code&gt;: Rename a symbol across a project.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;edit_file&lt;/code&gt;: Allows making multiple text edits to a file based on line numbers. Provides a more reliable and context-economical way to edit files compared to search and replace based edit tools.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;About&lt;/h2&gt; &#xA;&lt;p&gt;This codebase makes use of edited code from &lt;a href=&#34;https://go.googlesource.com/tools/+/refs/heads/master/gopls/internal/protocol&#34;&gt;gopls&lt;/a&gt; to handle LSP communication. See ATTRIBUTION for details. Everything here is covered by a permissive BSD style license.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/mark3labs/mcp-go&#34;&gt;mcp-go&lt;/a&gt; is used for MCP communication. Thank you for your service.&lt;/p&gt; &#xA;&lt;p&gt;This is beta software. Please let me know by creating an issue if you run into any problems or have suggestions of any kind.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Please keep PRs small and open Issues first for anything substantial. AI slop O.K. as long as it is tested, passes checks, and doesn&#39;t smell too bad.&lt;/p&gt; &#xA;&lt;h3&gt;Setup&lt;/h3&gt; &#xA;&lt;p&gt;Clone the repo:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/isaacphi/mcp-language-server.git&#xA;cd mcp-language-server&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A &lt;a href=&#34;https://just.systems/man/en/&#34;&gt;justfile&lt;/a&gt; is included for convenience:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;just -l&#xA;Available recipes:&#xA;    build    # Build&#xA;    check    # Run code audit checks&#xA;    fmt      # Format code&#xA;    generate # Generate LSP types and methods&#xA;    help     # Help&#xA;    install  # Install locally&#xA;    snapshot # Update snapshot tests&#xA;    test     # Run tests&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Configure your Claude Desktop (or similar) to use the local binary:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;mcpServers&#34;: {&#xA;    &#34;language-server&#34;: {&#xA;      &#34;command&#34;: &#34;/full/path/to/your/clone/mcp-language-server/mcp-language-server&#34;,&#xA;      &#34;args&#34;: [&#xA;        &#34;--workspace&#34;,&#xA;        &#34;/path/to/workspace&#34;,&#xA;        &#34;--lsp&#34;,&#xA;        &#34;language-server-executable&#34;&#xA;      ],&#xA;      &#34;env&#34;: {&#xA;        &#34;LOG_LEVEL&#34;: &#34;DEBUG&#34;&#xA;      }&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Rebuild after making changes.&lt;/p&gt; &#xA;&lt;h3&gt;Logging&lt;/h3&gt; &#xA;&lt;p&gt;Setting the &lt;code&gt;LOG_LEVEL&lt;/code&gt; environment variable to DEBUG enables verbose logging to stderr for all components including messages to and from the language server and the language server&#39;s logs.&lt;/p&gt; &#xA;&lt;h3&gt;LSP interaction&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;internal/lsp/methods.go&lt;/code&gt; contains generated code to make calls to the connected language server.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;internal/protocol/tsprotocol.go&lt;/code&gt; contains generated code for LSP types. I borrowed this from &lt;code&gt;gopls&lt;/code&gt;&#39;s source code. Thank you for your service.&lt;/li&gt; &#xA; &lt;li&gt;LSP allows language servers to return different types for the same methods. Go doesn&#39;t like this so there are some ugly workarounds in &lt;code&gt;internal/protocol/interfaces.go&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Local Development and Snapshot Tests&lt;/h3&gt; &#xA;&lt;p&gt;There is a snapshot test suite that makes it a lot easier to try out changes to tools. These run actual language servers on mock workspaces and capture output and logs.&lt;/p&gt; &#xA;&lt;p&gt;You will need the language servers installed locally to run them. There are tests for go, rust, python, and typescript.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;integrationtests/&#xA;├── tests/        # Tests are in this folder&#xA;├── snapshots/    # Snapshots of tool outputs&#xA;├── test-output/  # Gitignored folder showing the final state of each workspace and logs after each test run&#xA;└── workspaces/   # Mock workspaces that the tools run on&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To update snapshots, run &lt;code&gt;UPDATE_SNAPSHOTS=true go test ./integrationtests/...&lt;/code&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>gophish/gophish</title>
    <updated>2025-08-24T01:46:12Z</updated>
    <id>tag:github.com,2025-08-24:/gophish/gophish</id>
    <link href="https://github.com/gophish/gophish" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Open-Source Phishing Toolkit&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.github.com/gophish/gophish/master/static/images/gophish_purple.png&#34; alt=&#34;gophish logo&#34; /&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Gophish&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/gophish/gophish/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34; /&gt; &lt;a href=&#34;https://godoc.org/github.com/gophish/gophish&#34;&gt;&lt;img src=&#34;https://godoc.org/github.com/gophish/gophish?status.svg?sanitize=true&#34; alt=&#34;GoDoc&#34; /&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Gophish: Open-Source Phishing Toolkit&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://getgophish.com&#34;&gt;Gophish&lt;/a&gt; is an open-source phishing toolkit designed for businesses and penetration testers. It provides the ability to quickly and easily setup and execute phishing engagements and security awareness training.&lt;/p&gt; &#xA;&lt;h3&gt;Install&lt;/h3&gt; &#xA;&lt;p&gt;Installation of Gophish is dead-simple - just download and extract the zip containing the &lt;a href=&#34;https://github.com/gophish/gophish/releases/&#34;&gt;release for your system&lt;/a&gt;, and run the binary. Gophish has binary releases for Windows, Mac, and Linux platforms.&lt;/p&gt; &#xA;&lt;h3&gt;Building From Source&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;If you are building from source, please note that Gophish requires Go v1.10 or above!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;To build Gophish from source, simply run &lt;code&gt;git clone https://github.com/gophish/gophish.git&lt;/code&gt; and &lt;code&gt;cd&lt;/code&gt; into the project source directory. Then, run &lt;code&gt;go build&lt;/code&gt;. After this, you should have a binary called &lt;code&gt;gophish&lt;/code&gt; in the current directory.&lt;/p&gt; &#xA;&lt;h3&gt;Docker&lt;/h3&gt; &#xA;&lt;p&gt;You can also use Gophish via the official Docker container &lt;a href=&#34;https://hub.docker.com/r/gophish/gophish/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Setup&lt;/h3&gt; &#xA;&lt;p&gt;After running the Gophish binary, open an Internet browser to &lt;a href=&#34;https://localhost:3333&#34;&gt;https://localhost:3333&lt;/a&gt; and login with the default username and password listed in the log output. e.g.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;time=&#34;2020-07-29T01:24:08Z&#34; level=info msg=&#34;Please login with the username admin and the password 4304d5255378177d&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Releases of Gophish prior to v0.10.1 have a default username of &lt;code&gt;admin&lt;/code&gt; and password of &lt;code&gt;gophish&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Documentation&lt;/h3&gt; &#xA;&lt;p&gt;Documentation can be found on our &lt;a href=&#34;http://getgophish.com/documentation&#34;&gt;site&lt;/a&gt;. Find something missing? Let us know by filing an issue!&lt;/p&gt; &#xA;&lt;h3&gt;Issues&lt;/h3&gt; &#xA;&lt;p&gt;Find a bug? Want more features? Find something missing in the documentation? Let us know! Please don&#39;t hesitate to &lt;a href=&#34;https://github.com/gophish/gophish/issues/new&#34;&gt;file an issue&lt;/a&gt; and we&#39;ll get right on it.&lt;/p&gt; &#xA;&lt;h3&gt;License&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;Gophish - Open-Source Phishing Framework&#xA;&#xA;The MIT License (MIT)&#xA;&#xA;Copyright (c) 2013 - 2020 Jordan Wright&#xA;&#xA;Permission is hereby granted, free of charge, to any person obtaining a copy&#xA;of this software (&#34;Gophish Community Edition&#34;) and associated documentation files (the &#34;Software&#34;), to deal&#xA;in the Software without restriction, including without limitation the rights&#xA;to use, copy, modify, merge, publish, distribute, sublicense, and/or sell&#xA;copies of the Software, and to permit persons to whom the Software is&#xA;furnished to do so, subject to the following conditions:&#xA;&#xA;The above copyright notice and this permission notice shall be included in&#xA;all copies or substantial portions of the Software.&#xA;&#xA;THE SOFTWARE IS PROVIDED &#34;AS IS&#34;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR&#xA;IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,&#xA;FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE&#xA;AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER&#xA;LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,&#xA;OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN&#xA;THE SOFTWARE.&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>google/osv-scanner</title>
    <updated>2025-08-24T01:46:12Z</updated>
    <id>tag:github.com,2025-08-24:/google/osv-scanner</id>
    <link href="https://github.com/google/osv-scanner" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Vulnerability scanner written in Go which uses the data provided by https://osv.dev&lt;/p&gt;&lt;hr&gt;&lt;picture&gt; &#xA; &lt;source srcset=&#34;/docs/images/osv-scanner-full-logo-darkmode.svg&#34; media=&#34;(prefers-color-scheme: dark)&#34; /&gt; &#xA; &lt;!-- markdown-link-check-disable-next-line --&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/google/osv-scanner/main/docs/images/osv-scanner-full-logo-lightmode.svg?sanitize=true&#34; /&gt; &#xA;&lt;/picture&gt; &#xA;&lt;hr /&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://scorecard.dev/viewer/?uri=github.com/google/osv-scanner&#34;&gt;&lt;img src=&#34;https://api.securityscorecards.dev/projects/github.com/google/osv-scanner/badge&#34; alt=&#34;OpenSSF Scorecard&#34; /&gt;&lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/google/osv-scanner&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/google/osv-scanner&#34; alt=&#34;Go Report Card&#34; /&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/google/osv-scanner&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/google/osv-scanner/graph/badge.svg?token=C8IDVX9LP5&#34; alt=&#34;codecov&#34; /&gt;&lt;/a&gt; &lt;a href=&#34;https://slsa.dev&#34;&gt;&lt;img src=&#34;https://slsa.dev/images/gh-badge-level3.svg?sanitize=true&#34; alt=&#34;SLSA 3&#34; /&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/google/osv-scanner/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/google/osv-scanner&#34; alt=&#34;GitHub Release&#34; /&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Use OSV-Scanner to find existing vulnerabilities affecting your project&#39;s dependencies. OSV-Scanner provides an officially supported frontend to the &lt;a href=&#34;https://osv.dev/&#34;&gt;OSV database&lt;/a&gt; and CLI interface to &lt;a href=&#34;https://github.com/google/osv-scalibr&#34;&gt;OSV-Scalibr&lt;/a&gt; that connects a project’s list of dependencies with the vulnerabilities that affect them.&lt;/p&gt; &#xA;&lt;p&gt;OSV-Scanner supports a wide range of project types, package managers and features, including but not limited to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Languages:&lt;/strong&gt; C/C++, Dart, Elixir, Go, Java, Javascript, PHP, Python, R, Ruby, Rust.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Package Managers:&lt;/strong&gt; npm, pip, yarn, maven, go modules, cargo, gem, composer, nuget and others.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Operating Systems:&lt;/strong&gt; Detects vulnerabilities in OS packages on Linux systems.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Containers:&lt;/strong&gt; Scans container images for vulnerabilities in their base images and included packages.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Guided Remediation:&lt;/strong&gt; Provides recommendations for package version upgrades based on criteria such as dependency depth, minimum severity, fix strategy, and return on investment.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;OSV-Scanner uses the extensible &lt;a href=&#34;https://github.com/google/osv-scalibr&#34;&gt;OSV-Scalibr&lt;/a&gt; library under the hood to provide this functionality. If a language or package manager is not supported currently, please file a &lt;a href=&#34;https://github.com/google/osv-scanner/issues&#34;&gt;feature request.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Underlying database&lt;/h4&gt; &#xA;&lt;p&gt;The underlying database, &lt;a href=&#34;https://osv.dev/&#34;&gt;OSV.dev&lt;/a&gt; has several benefits in comparison with closed source advisory databases and scanners:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Covering most open source language and OS ecosystems (including &lt;a href=&#34;https://osv.dev/list?q=&amp;amp;ecosystem=GIT&#34;&gt;Git&lt;/a&gt;), it’s comprehensive.&lt;/li&gt; &#xA; &lt;li&gt;Each advisory comes from an open and authoritative source (e.g. &lt;a href=&#34;https://github.com/github/advisory-database&#34;&gt;GitHub Security Advisories&lt;/a&gt;, &lt;a href=&#34;https://github.com/rustsec/advisory-db&#34;&gt;RustSec Advisory Database&lt;/a&gt;, &lt;a href=&#34;https://github.com/canonical/ubuntu-security-notices/tree/main/osv&#34;&gt;Ubuntu security notices&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Anyone can suggest improvements to advisories, resulting in a very high quality database.&lt;/li&gt; &#xA; &lt;li&gt;The OSV format unambiguously stores information about affected versions in a machine-readable format that precisely maps onto a developer’s list of packages&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The above all results in accurate and actionable vulnerability notifications, which reduces the time needed to resolve them. Check out &lt;a href=&#34;https://osv.dev/&#34;&gt;OSV.dev&lt;/a&gt; for more details!&lt;/p&gt; &#xA;&lt;h2&gt;Basic installation&lt;/h2&gt; &#xA;&lt;p&gt;To install OSV-Scanner, please refer to the &lt;a href=&#34;https://google.github.io/osv-scanner/installation&#34;&gt;installation section&lt;/a&gt; of our documentation. OSV-Scanner releases can be found on the &lt;a href=&#34;https://github.com/google/osv-scanner/releases&#34;&gt;releases page&lt;/a&gt; of the GitHub repository. The recommended method is to download a prebuilt binary for your platform. Alternatively, you can use &lt;code&gt;go install github.com/google/osv-scanner/v2/cmd/osv-scanner@latest&lt;/code&gt; to build it from source.&lt;/p&gt; &#xA;&lt;h2&gt;Key Features&lt;/h2&gt; &#xA;&lt;p&gt;For more information, please read our &lt;a href=&#34;https://google.github.io/osv-scanner&#34;&gt;detailed documentation&lt;/a&gt; to learn how to use OSV-Scanner. For detailed information about each feature, click their titles in this README.&lt;/p&gt; &#xA;&lt;p&gt;Please note: These are the instructions for the latest OSV-Scanner V2 beta. If you are using V1, checkout the V1 &lt;a href=&#34;https://github.com/google/osv-scanner-v1&#34;&gt;README&lt;/a&gt; and &lt;a href=&#34;https://google.github.io/osv-scanner-v1/&#34;&gt;documentation&lt;/a&gt; instead.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://google.github.io/osv-scanner/usage&#34;&gt;Scanning a source directory&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ osv-scanner scan source -r /path/to/your/dir&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This command will recursively scan the specified directory for any supported package files, such as &lt;code&gt;package.json&lt;/code&gt;, &lt;code&gt;go.mod&lt;/code&gt;, &lt;code&gt;pom.xml&lt;/code&gt;, etc. and output any discovered vulnerabilities.&lt;/p&gt; &#xA;&lt;p&gt;OSV-Scanner has the option of using call analysis to determine if a vulnerable function is actually being used in the project, resulting in fewer false positives, and actionable alerts.&lt;/p&gt; &#xA;&lt;p&gt;OSV-Scanner can also detect vendored C/C++ code for vulnerability scanning. See &lt;a href=&#34;https://google.github.io/osv-scanner/usage/#cc-scanning&#34;&gt;here&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;h4&gt;Supported Lockfiles&lt;/h4&gt; &#xA;&lt;p&gt;OSV-Scanner supports 11+ language ecosystems and 19+ lockfile types. To check if your ecosystem is covered, please check out our &lt;a href=&#34;https://google.github.io/osv-scanner/supported-languages-and-lockfiles/#supported-lockfiles&#34;&gt;detailed documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://google.github.io/osv-scanner/usage/scan-image&#34;&gt;Container Scanning&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;OSV-Scanner also supports comprehensive, layer-aware scanning for container images to detect vulnerabilities the following operating system packages and language-specific dependencies.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Distro Support&lt;/th&gt; &#xA;   &lt;th&gt;Language Artifacts Support&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Alpine OS&lt;/td&gt; &#xA;   &lt;td&gt;Go&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Debian&lt;/td&gt; &#xA;   &lt;td&gt;Java&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Ubuntu&lt;/td&gt; &#xA;   &lt;td&gt;Node&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Python&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://google.github.io/osv-scanner/supported-languages-and-lockfiles/#supported-artifacts&#34;&gt;full documentation&lt;/a&gt; for details on support.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Usage&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ osv-scanner scan image my-image-name:tag&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/user-attachments/assets/8bb95366-27ec-45d1-86ed-e42890f2fb46&#34; alt=&#34;screencast of html output of container scanning&#34; /&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://google.github.io/osv-scanner/usage/license-scanning/&#34;&gt;License Scanning&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Check your dependencies&#39; licenses using deps.dev data. For a summary:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;osv-scanner --licenses path/to/repository&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To check against an allowed license list (SPDX format):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;osv-scanner --licenses=&#34;MIT,Apache-2.0&#34; path/to/directory&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://google.github.io/osv-scanner/usage/offline-mode/&#34;&gt;Offline Scanning&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Scan your project against a local OSV database. No network connection is required after the initial database download. The database can also be manually downloaded.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;osv-scanner --offline --download-offline-databases ./path/to/your/dir&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://google.github.io/osv-scanner/experimental/guided-remediation/&#34;&gt;Guided Remediation&lt;/a&gt; (Experimental)&lt;/h3&gt; &#xA;&lt;p&gt;OSV-Scanner provides guided remediation, a feature that suggests package version upgrades based on criteria such as dependency depth, minimum severity, fix strategy, and return on investment. We currently support remediating vulnerabilities in the following files:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Ecosystem&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;File Format (Type)&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Supported Remediation Strategies&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;npm&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;package-lock.json&lt;/code&gt; (lockfile)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://google.github.io/osv-scanner/experimental/guided-remediation/#in-place-lockfile-remediation&#34;&gt;&lt;code&gt;in-place&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;npm&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;package.json&lt;/code&gt; (manifest)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://google.github.io/osv-scanner/experimental/guided-remediation/#in-place-lockfile-remediation&#34;&gt;&lt;code&gt;relock&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Maven&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;pom.xml&lt;/code&gt; (manifest)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://google.github.io/osv-scanner/experimental/guided-remediation/#override-dependency-versions&#34;&gt;&lt;code&gt;override&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;This is available as a headless CLI command, as well as an interactive mode.&lt;/p&gt; &#xA;&lt;h4&gt;Example (for npm)&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ osv-scanner fix \&#xA;    --max-depth=3 \&#xA;    --min-severity=5 \&#xA;    --ignore-dev  \&#xA;    --strategy=in-place \&#xA;    -L path/to/package-lock.json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Interactive mode (for npm)&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ osv-scanner fix \&#xA;    -M path/to/package.json \&#xA;    -L path/to/package-lock.json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img src=&#34;https://google.github.io/osv-scanner/images/guided-remediation-relock-patches.png&#34; alt=&#34;Screenshot of the interactive relock results screen with some relaxation patches selected&#34; /&gt; &#xA;&lt;h2&gt;Contribute&lt;/h2&gt; &#xA;&lt;h3&gt;Report Problems&lt;/h3&gt; &#xA;&lt;p&gt;If you have what looks like a bug, please use the &lt;a href=&#34;https://github.com/google/osv-scanner/issues&#34;&gt;GitHub issue tracking system&lt;/a&gt;. Before you file an issue, please search existing issues to see if your issue is already covered.&lt;/p&gt; &#xA;&lt;h3&gt;Contributing code to &lt;code&gt;osv-scanner&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/google/osv-scanner/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; for documentation on how to contribute code.&lt;/p&gt; &#xA;&lt;h2&gt;Star History&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://star-history.com/#google/osv-scanner&amp;amp;Date&#34;&gt;&lt;img src=&#34;https://api.star-history.com/svg?repos=google/osv-scanner&amp;amp;type=Date&#34; alt=&#34;Star History Chart&#34; /&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>