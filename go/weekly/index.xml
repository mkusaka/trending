<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-06-22T01:40:56Z</updated>
  <subtitle>Weekly Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>grafana/tempo</title>
    <updated>2025-06-22T01:40:56Z</updated>
    <id>tag:github.com,2025-06-22:/grafana/tempo</id>
    <link href="https://github.com/grafana/tempo" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Grafana Tempo is a high volume, minimal dependency distributed tracing backend.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/grafana/tempo/main/docs/sources/tempo/logo_and_name.png&#34; alt=&#34;Tempo Logo&#34;&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/grafana/tempo/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/grafana/tempo?display_name=tag&amp;amp;sort=semver&#34; alt=&#34;Latest Release&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/license/grafana/tempo&#34; alt=&#34;License&#34;&gt; &lt;a href=&#34;https://hub.docker.com/r/grafana/tempo/tags&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/pulls/grafana/tempo&#34; alt=&#34;Docker Pulls&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://grafana.slack.com/archives/C01D981PEE5&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/join%20slack-%23tempo-brightgreen.svg?sanitize=true&#34; alt=&#34;Slack&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://community.grafana.com/c/grafana-tempo/40&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/discuss-tempo%20forum-orange.svg?sanitize=true&#34; alt=&#34;Community Forum&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/grafana/tempo&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/grafana/tempo&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;Grafana Tempo is an open source, easy-to-use, and high-scale distributed tracing backend. Tempo is cost-efficient, requiring only object storage to operate, and is deeply integrated with Grafana, Prometheus, and Loki.&lt;/p&gt; &#xA;&lt;h2&gt;Business value of distributed tracing&lt;/h2&gt; &#xA;&lt;p&gt;Distributed tracing helps teams quickly pinpoint performance issues and understand the flow of requests across services. The Traces Drilldown UI simplifies this process by offering a user-friendly interface to view and analyze trace data, making it easier to identify and resolve issues without needing to write complex queries.&lt;/p&gt; &#xA;&lt;p&gt;Refer to &lt;a href=&#34;https://grafana.com/docs/tempo/latest/introduction/solutions-with-traces/&#34;&gt;Use traces to find solutions&lt;/a&gt; to learn more about how you can use distributed tracing to investigate and solve issues.&lt;/p&gt; &#xA;&lt;h2&gt;Traces Drilldown UI: A better way to get value from your tracing data&lt;/h2&gt; &#xA;&lt;p&gt;We are excited to introduce the &lt;a href=&#34;https://github.com/grafana/traces-drilldown&#34;&gt;Traces Drilldown&lt;/a&gt; (formerly Explore Traces) app as part of the Grafana Explore suite. This app provides a queryless and intuitive experience for analyzing tracing data, allowing teams to quickly identify performance issues, latency bottlenecks, and errors without needing to write complex queries or use TraceQL.&lt;/p&gt; &#xA;&lt;p&gt;Key Features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Intuitive Trace Analysis&lt;/strong&gt;: Spot slow or error-prone traces with easy, point-and-click interactions.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;RED Metrics Overview&lt;/strong&gt;: Use Rate, Errors, and Duration metrics to highlight performance issues.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Automated Comparison&lt;/strong&gt;: Identify problematic attributes with automatic trace comparison.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Simplified Visualizations&lt;/strong&gt;: Access rich visual data without needing to construct TraceQL queries.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/user-attachments/assets/991205df-1b27-489f-8ef0-1a05ee158996&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;To learn more see the following links:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/grafana/traces-drilldown&#34;&gt;Traces Drilldown repo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://grafana.com/docs/grafana/latest/explore/simplified-exploration/traces/&#34;&gt;Traces Drilldown documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=a3uB1C2oHA4&#34;&gt;Demo video&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;TraceQL&lt;/h2&gt; &#xA;&lt;p&gt;Tempo implements &lt;a href=&#34;https://grafana.com/docs/tempo/latest/traceql/&#34;&gt;TraceQL&lt;/a&gt;, a traces-first query language inspired by LogQL and PromQL, which enables targeted queries or rich UI-driven analyses.&lt;/p&gt; &#xA;&lt;h3&gt;TraceQL metrics&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://grafana.com/docs/tempo/latest/traceql/metrics-queries/&#34;&gt;TraceQL metrics&lt;/a&gt; is an experimental feature in Grafana Tempo that creates metrics from traces. Metric queries extend trace queries by applying a function to trace query results. This powerful feature allows for ad hoc aggregation of any existing TraceQL query by any dimension available in your traces, much in the same way that LogQL metric queries create metrics from logs.&lt;/p&gt; &#xA;&lt;p&gt;Tempo is Jaeger, Zipkin, Kafka, OpenCensus, and OpenTelemetry compatible. It ingests batches in any of the mentioned formats, buffers them, and then writes them to Azure, GCS, S3, or local disk. As such, it&#39;s robust, cheap, and easy to operate.&lt;/p&gt; &#xA;&lt;h2&gt;Getting started with Tempo&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://grafana.com/docs/tempo/latest/getting-started/&#34;&gt;Get started documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/grafana/tempo/main/example&#34;&gt;Deployment Examples&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/grafana/tempo/main/example/docker-compose&#34;&gt;Docker Compose&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/grafana/tempo/main/example/helm&#34;&gt;Helm&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/grafana/tempo/main/example/tk&#34;&gt;Jsonnet&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Further reading&lt;/h2&gt; &#xA;&lt;p&gt;To learn more about Tempo, consult the following documents &amp;amp; talks:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=zDrA7Ly3ovU&#34;&gt;How to get started with Tempo with Joe Elliott (video)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://grafana.com/tags/tempo/&#34;&gt;Grafana blog posts about Tempo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://grafana.com/blog/2023/02/01/new-in-grafana-tempo-2.0-apache-parquet-as-the-default-storage-format-support-for-traceql/&#34;&gt;New in Grafana Tempo 2.0: Apache Parquet as the default storage format, support for TraceQL&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://grafana.com/blog/2023/02/07/get-to-know-traceql-a-powerful-new-query-language-for-distributed-tracing/&#34;&gt;Get to know TraceQL: A powerful new query language for distributed tracing&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting help&lt;/h2&gt; &#xA;&lt;p&gt;If you have any questions or feedback regarding Tempo:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Grafana Labs hosts a &lt;a href=&#34;https://community.grafana.com/c/grafana-tempo/40&#34;&gt;forum&lt;/a&gt; for Tempo. This is a great place to post questions and search for answers.&lt;/li&gt; &#xA; &lt;li&gt;Ask a question on the &lt;a href=&#34;https://grafana.slack.com/archives/C01D981PEE5&#34;&gt;Tempo Slack channel&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/grafana/tempo/issues/new/choose&#34;&gt;File an issue&lt;/a&gt; for bugs, issues and feature suggestions.&lt;/li&gt; &#xA; &lt;li&gt;UI issues should be filed with &lt;a href=&#34;https://github.com/grafana/grafana/issues/new/choose&#34;&gt;Grafana&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;OpenTelemetry&lt;/h2&gt; &#xA;&lt;p&gt;Tempo&#39;s receiver layer, wire format and storage format are all based directly on &lt;a href=&#34;https://github.com/open-telemetry/opentelemetry-proto&#34;&gt;standards&lt;/a&gt; and &lt;a href=&#34;https://github.com/open-telemetry/opentelemetry-collector&#34;&gt;code&lt;/a&gt; established by &lt;a href=&#34;https://opentelemetry.io/&#34;&gt;OpenTelemetry&lt;/a&gt;. We support open standards at Grafana!&lt;/p&gt; &#xA;&lt;p&gt;Check out the &lt;a href=&#34;https://grafana.com/docs/tempo/latest/guides/instrumentation/&#34;&gt;Integration Guides&lt;/a&gt; to see examples of OpenTelemetry instrumentation with Tempo.&lt;/p&gt; &#xA;&lt;h2&gt;Other components&lt;/h2&gt; &#xA;&lt;h3&gt;tempo-vulture&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/grafana/tempo/tree/main/cmd/tempo-vulture&#34;&gt;tempo-vulture&lt;/a&gt; is Tempo&#39;s bird themed consistency checking tool. It writes traces to Tempo and then queries them back in a variety of ways.&lt;/p&gt; &#xA;&lt;h3&gt;tempo-cli&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/grafana/tempo/tree/main/cmd/tempo-cli&#34;&gt;tempo-cli&lt;/a&gt; is the place to put any utility functionality related to Tempo. See &lt;a href=&#34;https://grafana.com/docs/tempo/latest/operations/tempo_cli/&#34;&gt;Documentation&lt;/a&gt; for more info.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Grafana Tempo is distributed under &lt;a href=&#34;https://raw.githubusercontent.com/grafana/tempo/main/LICENSE&#34;&gt;AGPL-3.0-only&lt;/a&gt;. For Apache-2.0 exceptions, see &lt;a href=&#34;https://raw.githubusercontent.com/grafana/tempo/main/LICENSING.md&#34;&gt;LICENSING.md&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>moby/buildkit</title>
    <updated>2025-06-22T01:40:56Z</updated>
    <id>tag:github.com,2025-06-22:/moby/buildkit</id>
    <link href="https://github.com/moby/buildkit" rel="alternate"></link>
    <summary type="html">&lt;p&gt;concurrent, cache-efficient, and Dockerfile-agnostic builder toolkit&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://asciinema.org/a/gPEIEo1NzmDTUu2bEPsUboqmU&#34;&gt;&lt;img src=&#34;https://asciinema.org/a/gPEIEo1NzmDTUu2bEPsUboqmU.png&#34; alt=&#34;asciicinema example&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;BuildKit &#xA; &lt;!-- omit in toc --&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/moby/buildkit/releases/latest&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/moby/buildkit.svg?style=flat-square&#34; alt=&#34;GitHub Release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pkg.go.dev/github.com/moby/buildkit/client/llb&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/go.dev-docs-007d9c?style=flat-square&amp;amp;logo=go&amp;amp;logoColor=white&#34; alt=&#34;PkgGoDev&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/moby/buildkit/actions?query=workflow%3Abuildkit&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/moby/buildkit/buildkit.yml?label=buildkit&amp;amp;logo=github&amp;amp;style=flat-square&#34; alt=&#34;CI BuildKit Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/moby/buildkit/actions?query=workflow%3Afrontend&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/moby/buildkit/frontend.yml?label=frontend&amp;amp;logo=github&amp;amp;style=flat-square&#34; alt=&#34;CI Frontend Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/moby/buildkit&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/moby/buildkit?style=flat-square&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/moby/buildkit&#34;&gt;&lt;img src=&#34;https://img.shields.io/codecov/c/github/moby/buildkit?logo=codecov&amp;amp;style=flat-square&#34; alt=&#34;Codecov&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;BuildKit is a toolkit for converting source code to build artifacts in an efficient, expressive and repeatable manner.&lt;/p&gt; &#xA;&lt;p&gt;Key features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Automatic garbage collection&lt;/li&gt; &#xA; &lt;li&gt;Extendable frontend formats&lt;/li&gt; &#xA; &lt;li&gt;Concurrent dependency resolution&lt;/li&gt; &#xA; &lt;li&gt;Efficient instruction caching&lt;/li&gt; &#xA; &lt;li&gt;Build cache import/export&lt;/li&gt; &#xA; &lt;li&gt;Nested build job invocations&lt;/li&gt; &#xA; &lt;li&gt;Distributable workers&lt;/li&gt; &#xA; &lt;li&gt;Multiple output formats&lt;/li&gt; &#xA; &lt;li&gt;Pluggable architecture&lt;/li&gt; &#xA; &lt;li&gt;Execution without root privileges&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Read the proposal from &lt;a href=&#34;https://github.com/moby/moby/issues/32925&#34;&gt;https://github.com/moby/moby/issues/32925&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Introductory blog post &lt;a href=&#34;https://blog.mobyproject.org/introducing-buildkit-17e056cc5317&#34;&gt;https://blog.mobyproject.org/introducing-buildkit-17e056cc5317&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Join &lt;code&gt;#buildkit&lt;/code&gt; channel on &lt;a href=&#34;https://dockr.ly/comm-slack&#34;&gt;Docker Community Slack&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] If you are visiting this repo for the usage of BuildKit-only Dockerfile features like &lt;code&gt;RUN --mount=type=(bind|cache|tmpfs|secret|ssh)&lt;/code&gt;, please refer to the &lt;a href=&#34;https://docs.docker.com/engine/reference/builder/&#34;&gt;Dockerfile reference&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] &lt;code&gt;docker build&lt;/code&gt; &lt;a href=&#34;https://docs.docker.com/build/architecture/&#34;&gt;uses Buildx and BuildKit by default&lt;/a&gt; since Docker Engine 23.0. You don&#39;t need to read this document unless you want to use the full-featured standalone version of BuildKit.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;!-- START doctoc generated TOC please keep comment here to allow auto update --&gt; &#xA;&lt;!-- DON&#39;T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE --&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/moby/buildkit/master/#used-by&#34;&gt;Used by&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/moby/buildkit/master/#quick-start&#34;&gt;Quick start&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/moby/buildkit/master/#linux-setup&#34;&gt;Linux Setup&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/moby/buildkit/master/#windows-setup&#34;&gt;Windows Setup&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/moby/buildkit/master/#macos-setup&#34;&gt;macOS Setup&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/moby/buildkit/master/#build-from-source&#34;&gt;Build from source&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/moby/buildkit/master/#exploring-llb&#34;&gt;Exploring LLB&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/moby/buildkit/master/#exploring-dockerfiles&#34;&gt;Exploring Dockerfiles&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/moby/buildkit/master/#building-a-dockerfile-with-buildctl&#34;&gt;Building a Dockerfile with &lt;code&gt;buildctl&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/moby/buildkit/master/#building-a-dockerfile-using-external-frontend&#34;&gt;Building a Dockerfile using external frontend&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/moby/buildkit/master/#output&#34;&gt;Output&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/moby/buildkit/master/#imageregistry&#34;&gt;Image/Registry&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/moby/buildkit/master/#local-directory&#34;&gt;Local directory&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/moby/buildkit/master/#docker-tarball&#34;&gt;Docker tarball&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/moby/buildkit/master/#oci-tarball&#34;&gt;OCI tarball&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/moby/buildkit/master/#containerd-image-store&#34;&gt;containerd image store&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/moby/buildkit/master/#cache&#34;&gt;Cache&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/moby/buildkit/master/#garbage-collection&#34;&gt;Garbage collection&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/moby/buildkit/master/#export-cache&#34;&gt;Export cache&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/moby/buildkit/master/#inline-push-image-and-cache-together&#34;&gt;Inline (push image and cache together)&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/moby/buildkit/master/#registry-push-image-and-cache-separately&#34;&gt;Registry (push image and cache separately)&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/moby/buildkit/master/#local-directory-1&#34;&gt;Local directory&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/moby/buildkit/master/#github-actions-cache-experimental&#34;&gt;GitHub Actions cache (experimental)&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/moby/buildkit/master/#s3-cache-experimental&#34;&gt;S3 cache (experimental)&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/moby/buildkit/master/#azure-blob-storage-cache-experimental&#34;&gt;Azure Blob Storage cache (experimental)&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/moby/buildkit/master/#consistent-hashing&#34;&gt;Consistent hashing&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/moby/buildkit/master/#metadata&#34;&gt;Metadata&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/moby/buildkit/master/#systemd-socket-activation&#34;&gt;Systemd socket activation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/moby/buildkit/master/#expose-buildkit-as-a-tcp-service&#34;&gt;Expose BuildKit as a TCP service&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/moby/buildkit/master/#load-balancing&#34;&gt;Load balancing&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/moby/buildkit/master/#containerizing-buildkit&#34;&gt;Containerizing BuildKit&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/moby/buildkit/master/#podman&#34;&gt;Podman&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/moby/buildkit/master/#nerdctl&#34;&gt;Nerdctl&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/moby/buildkit/master/#kubernetes&#34;&gt;Kubernetes&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/moby/buildkit/master/#daemonless&#34;&gt;Daemonless&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/moby/buildkit/master/#opentelemetry-support&#34;&gt;OpenTelemetry support&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/moby/buildkit/master/#running-buildkit-without-root-privileges&#34;&gt;Running BuildKit without root privileges&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/moby/buildkit/master/#building-multi-platform-images&#34;&gt;Building multi-platform images&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/moby/buildkit/master/#configuring-buildctl&#34;&gt;Configuring &lt;code&gt;buildctl&lt;/code&gt;&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/moby/buildkit/master/#color-output-controls&#34;&gt;Color Output Controls&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/moby/buildkit/master/#number-of-log-lines-for-active-steps-in-tty-mode&#34;&gt;Number of log lines (for active steps in tty mode)&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/moby/buildkit/master/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- END doctoc generated TOC please keep comment here to allow auto update --&gt; &#xA;&lt;h2&gt;Used by&lt;/h2&gt; &#xA;&lt;p&gt;BuildKit is used by the following projects:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/moby/moby/pull/37151&#34;&gt;Moby &amp;amp; Docker&lt;/a&gt; (&lt;code&gt;DOCKER_BUILDKIT=1 docker build&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/genuinetools/img&#34;&gt;img&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/openfaas/openfaas-cloud&#34;&gt;OpenFaaS Cloud&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/containerbuilding/cbi&#34;&gt;container build interface&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tektoncd/catalog&#34;&gt;Tekton Pipelines&lt;/a&gt; (formerly &lt;a href=&#34;https://github.com/knative/build-templates&#34;&gt;Knative Build Templates&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/distributed-containers-inc/sanic&#34;&gt;the Sanic build tool&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/stellarproject/vab&#34;&gt;vab&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rancher/rio&#34;&gt;Rio&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rancher/kim&#34;&gt;kim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/alibaba/pouch&#34;&gt;PouchContainer&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/docker/buildx&#34;&gt;Docker buildx&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://okteto.com/&#34;&gt;Okteto Cloud&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/vladaionescu/earthly&#34;&gt;Earthly earthfiles&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/gitpod-io/gitpod&#34;&gt;Gitpod&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dagger.io&#34;&gt;Dagger&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tensorchord/envd/&#34;&gt;envd&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://depot.dev&#34;&gt;Depot&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://namespace.so&#34;&gt;Namespace&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://unikraft.org&#34;&gt;Unikraft&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://devzero.io&#34;&gt;DevZero&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/r2d4/dacc&#34;&gt;dacc&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Quick start&lt;/h2&gt; &#xA;&lt;p&gt;&lt;span&gt;ℹ&lt;/span&gt; For Kubernetes deployments, see &lt;a href=&#34;https://raw.githubusercontent.com/moby/buildkit/master/examples/kubernetes&#34;&gt;&lt;code&gt;examples/kubernetes&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;BuildKit is composed of the &lt;code&gt;buildkitd&lt;/code&gt; daemon and the &lt;code&gt;buildctl&lt;/code&gt; client. While the &lt;code&gt;buildctl&lt;/code&gt; client is available for Linux, macOS, and Windows, the &lt;code&gt;buildkitd&lt;/code&gt; daemon is only available for Linux and *Windows currently.&lt;/p&gt; &#xA;&lt;p&gt;The latest binaries of BuildKit are available &lt;a href=&#34;https://github.com/moby/buildkit/releases&#34;&gt;here&lt;/a&gt; for Linux, macOS, and Windows.&lt;/p&gt; &#xA;&lt;h3&gt;Linux Setup&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;buildkitd&lt;/code&gt; daemon requires the following components to be installed:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/opencontainers/runc&#34;&gt;runc&lt;/a&gt; or &lt;a href=&#34;https://github.com/containers/crun&#34;&gt;crun&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/containerd/containerd&#34;&gt;containerd&lt;/a&gt; (if you want to use containerd worker)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Starting the &lt;code&gt;buildkitd&lt;/code&gt; daemon:&lt;/strong&gt; You need to run &lt;code&gt;buildkitd&lt;/code&gt; as the root user on the host.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sudo buildkitd&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To run &lt;code&gt;buildkitd&lt;/code&gt; as a non-root user, see &lt;a href=&#34;https://raw.githubusercontent.com/moby/buildkit/master/docs/rootless.md&#34;&gt;&lt;code&gt;docs/rootless.md&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The buildkitd daemon supports two worker backends: OCI (runc) and containerd.&lt;/p&gt; &#xA;&lt;p&gt;By default, the OCI (runc) worker is used. You can set &lt;code&gt;--oci-worker=false --containerd-worker=true&lt;/code&gt; to use the containerd worker.&lt;/p&gt; &#xA;&lt;p&gt;We are open to adding more backends.&lt;/p&gt; &#xA;&lt;p&gt;To start the buildkitd daemon using systemd socket activation, you can install the buildkit systemd unit files. See &lt;a href=&#34;https://raw.githubusercontent.com/moby/buildkit/master/#systemd-socket-activation&#34;&gt;Systemd socket activation&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The buildkitd daemon listens gRPC API on &lt;code&gt;/run/buildkit/buildkitd.sock&lt;/code&gt; by default, but you can also use TCP sockets. See &lt;a href=&#34;https://raw.githubusercontent.com/moby/buildkit/master/#expose-buildkit-as-a-tcp-service&#34;&gt;Expose BuildKit as a TCP service&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Windows Setup&lt;/h3&gt; &#xA;&lt;p&gt;See instructions and notes at &lt;a href=&#34;https://raw.githubusercontent.com/moby/buildkit/master/docs/windows.md&#34;&gt;&lt;code&gt;docs/windows.md&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;macOS Setup&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://formulae.brew.sh/formula/buildkit&#34;&gt;Homebrew formula&lt;/a&gt; (unofficial) is available for macOS.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ brew install buildkit&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The Homebrew formula does not contain the daemon (&lt;code&gt;buildkitd&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;For example, &lt;a href=&#34;https://lima-vm.io&#34;&gt;Lima&lt;/a&gt; can be used for launching the daemon inside a Linux VM.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;brew install lima&#xA;limactl start template://buildkit&#xA;export BUILDKIT_HOST=&#34;unix://$HOME/.lima/buildkit/sock/buildkitd.sock&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Build from source&lt;/h3&gt; &#xA;&lt;p&gt;To build BuildKit from source, see &lt;a href=&#34;https://raw.githubusercontent.com/moby/buildkit/master/.github/CONTRIBUTING.md&#34;&gt;&lt;code&gt;.github/CONTRIBUTING.md&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For a &lt;code&gt;buildctl&lt;/code&gt; reference, see &lt;a href=&#34;https://raw.githubusercontent.com/moby/buildkit/master/docs/reference/buildctl.md&#34;&gt;this document&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Exploring LLB&lt;/h3&gt; &#xA;&lt;p&gt;BuildKit builds are based on a binary intermediate format called LLB that is used for defining the dependency graph for processes running part of your build. tl;dr: LLB is to Dockerfile what LLVM IR is to C.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Marshaled as Protobuf messages&lt;/li&gt; &#xA; &lt;li&gt;Concurrently executable&lt;/li&gt; &#xA; &lt;li&gt;Efficiently cacheable&lt;/li&gt; &#xA; &lt;li&gt;Vendor-neutral (i.e. non-Dockerfile languages can be easily implemented)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/moby/buildkit/master/solver/pb/ops.proto&#34;&gt;&lt;code&gt;solver/pb/ops.proto&lt;/code&gt;&lt;/a&gt; for the format definition, and see &lt;a href=&#34;https://raw.githubusercontent.com/moby/buildkit/master/examples/README.md&#34;&gt;&lt;code&gt;./examples/README.md&lt;/code&gt;&lt;/a&gt; for example LLB applications.&lt;/p&gt; &#xA;&lt;p&gt;Currently, the following high-level languages have been implemented for LLB:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Dockerfile (See &lt;a href=&#34;https://raw.githubusercontent.com/moby/buildkit/master/#exploring-dockerfiles&#34;&gt;Exploring Dockerfiles&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tonistiigi/buildkit-pack&#34;&gt;Buildpacks&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://matt-rickard.com/building-a-new-dockerfile-frontend/&#34;&gt;Mockerfile&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/po3rin/gockerfile&#34;&gt;Gockerfile&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/talos-systems/bldr/&#34;&gt;bldr (Pkgfile)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/openllb/hlb&#34;&gt;HLB&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/earthly/earthly&#34;&gt;Earthfile (Earthly)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/denzp/cargo-wharf&#34;&gt;Cargo Wharf (Rust)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/reproducible-containers/buildkit-nix&#34;&gt;Nix&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/cmdjulian/mopy&#34;&gt;mopy (Python)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tensorchord/envd/&#34;&gt;envd (starlark)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gitlab.wikimedia.org/repos/releng/blubber&#34;&gt;Blubber&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/vito/bass&#34;&gt;Bass&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/unikraft/kraftkit/tree/staging/tools/dockerfile-llb-frontend&#34;&gt;kraft.yaml (Unikraft)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/r2d4/llb&#34;&gt;r2d4/llb (JSON Gateway)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/marxarelli/masse&#34;&gt;Massé&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;(open a PR to add your own language)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Exploring Dockerfiles&lt;/h3&gt; &#xA;&lt;p&gt;Frontends are components that run inside BuildKit and convert any build definition to LLB. There is a special frontend called gateway (&lt;code&gt;gateway.v0&lt;/code&gt;) that allows using any image as a frontend.&lt;/p&gt; &#xA;&lt;p&gt;During development, Dockerfile frontend (&lt;code&gt;dockerfile.v0&lt;/code&gt;) is also part of the BuildKit repo. In the future, this will be moved out, and Dockerfiles can be built using an external image.&lt;/p&gt; &#xA;&lt;h4&gt;Building a Dockerfile with &lt;code&gt;buildctl&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;buildctl build \&#xA;    --frontend=dockerfile.v0 \&#xA;    --local context=. \&#xA;    --local dockerfile=.&#xA;# or&#xA;buildctl build \&#xA;    --frontend=dockerfile.v0 \&#xA;    --local context=. \&#xA;    --local dockerfile=. \&#xA;    --opt target=foo \&#xA;    --opt build-arg:foo=bar&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;--local&lt;/code&gt; exposes local source files from client to the builder. &lt;code&gt;context&lt;/code&gt; and &lt;code&gt;dockerfile&lt;/code&gt; are the names Dockerfile frontend looks for build context and Dockerfile location.&lt;/p&gt; &#xA;&lt;p&gt;If the Dockerfile has a different filename it can be specified with &lt;code&gt;--opt filename=./Dockerfile-alternative&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Building a Dockerfile using external frontend&lt;/h4&gt; &#xA;&lt;p&gt;External versions of the Dockerfile frontend are pushed to &lt;a href=&#34;https://hub.docker.com/r/docker/dockerfile-upstream&#34;&gt;https://hub.docker.com/r/docker/dockerfile-upstream&lt;/a&gt; and &lt;a href=&#34;https://hub.docker.com/r/docker/dockerfile&#34;&gt;https://hub.docker.com/r/docker/dockerfile&lt;/a&gt; and can be used with the gateway frontend. The source for the external frontend is currently located in &lt;code&gt;./frontend/dockerfile/cmd/dockerfile-frontend&lt;/code&gt; but will move out of this repository in the future (&lt;a href=&#34;https://github.com/moby/buildkit/issues/163&#34;&gt;#163&lt;/a&gt;). For automatic build from master branch of this repository &lt;code&gt;docker/dockerfile-upstream:master&lt;/code&gt; or &lt;code&gt;docker/dockerfile-upstream:master-labs&lt;/code&gt; image can be used.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;buildctl build \&#xA;    --frontend gateway.v0 \&#xA;    --opt source=docker/dockerfile \&#xA;    --local context=. \&#xA;    --local dockerfile=.&#xA;buildctl build \&#xA;    --frontend gateway.v0 \&#xA;    --opt source=docker/dockerfile \&#xA;    --opt context=https://github.com/moby/moby.git \&#xA;    --opt build-arg:APT_MIRROR=cdn-fastly.deb.debian.org&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Output&lt;/h3&gt; &#xA;&lt;p&gt;By default, the build result and intermediate cache will only remain internally in BuildKit. An output needs to be specified to retrieve the result.&lt;/p&gt; &#xA;&lt;h4&gt;Image/Registry&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;buildctl build ... --output type=image,name=docker.io/username/image,push=true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To export the image to multiple registries:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;buildctl build ... --output type=image,\&#34;name=docker.io/username/image,docker.io/username2/image2\&#34;,push=true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To export the cache embed with the image and pushing them to registry together, type &lt;code&gt;registry&lt;/code&gt; is required to import the cache, you should specify &lt;code&gt;--export-cache type=inline&lt;/code&gt; and &lt;code&gt;--import-cache type=registry,ref=...&lt;/code&gt;. To export the cache to a local directly, you should specify &lt;code&gt;--export-cache type=local&lt;/code&gt;. Details in &lt;a href=&#34;https://raw.githubusercontent.com/moby/buildkit/master/#export-cache&#34;&gt;Export cache&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;buildctl build ...\&#xA;  --output type=image,name=docker.io/username/image,push=true \&#xA;  --export-cache type=inline \&#xA;  --import-cache type=registry,ref=docker.io/username/image&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Keys supported by image output:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;name=&amp;lt;value&amp;gt;&lt;/code&gt;: specify image name(s)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;push=true&lt;/code&gt;: push after creating the image&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;push-by-digest=true&lt;/code&gt;: push unnamed image&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;registry.insecure=true&lt;/code&gt;: push to insecure HTTP registry&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;oci-mediatypes=true&lt;/code&gt;: use OCI mediatypes in configuration JSON instead of Docker&#39;s&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;oci-artifact=false&lt;/code&gt;: use OCI artifact format for attestations&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;unpack=true&lt;/code&gt;: unpack image after creation (for use with containerd)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;dangling-name-prefix=&amp;lt;value&amp;gt;&lt;/code&gt;: name image with &lt;code&gt;prefix@&amp;lt;digest&amp;gt;&lt;/code&gt;, used for anonymous images&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;name-canonical=true&lt;/code&gt;: add additional canonical name &lt;code&gt;name@&amp;lt;digest&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;compression=&amp;lt;uncompressed|gzip|estargz|zstd&amp;gt;&lt;/code&gt;: choose compression type for layers newly created and cached, gzip is default value. estargz should be used with &lt;code&gt;oci-mediatypes=true&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;compression-level=&amp;lt;value&amp;gt;&lt;/code&gt;: compression level for gzip, estargz (0-9) and zstd (0-22)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;rewrite-timestamp=true&lt;/code&gt;: rewrite the file timestamps to the &lt;code&gt;SOURCE_DATE_EPOCH&lt;/code&gt; value. See &lt;a href=&#34;https://raw.githubusercontent.com/moby/buildkit/master/docs/build-repro.md&#34;&gt;&lt;code&gt;docs/build-repro.md&lt;/code&gt;&lt;/a&gt; for how to specify the &lt;code&gt;SOURCE_DATE_EPOCH&lt;/code&gt; value.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;force-compression=true&lt;/code&gt;: forcefully apply &lt;code&gt;compression&lt;/code&gt; option to all layers (including already existing layers)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;store=true&lt;/code&gt;: store the result images to the worker&#39;s (e.g. containerd) image store as well as ensures that the image has all blobs in the content store (default &lt;code&gt;true&lt;/code&gt;). Ignored if the worker doesn&#39;t have image store (e.g. OCI worker).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;annotation.&amp;lt;key&amp;gt;=&amp;lt;value&amp;gt;&lt;/code&gt;: attach an annotation with the respective &lt;code&gt;key&lt;/code&gt; and &lt;code&gt;value&lt;/code&gt; to the built image &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Using the extended syntaxes, &lt;code&gt;annotation-&amp;lt;type&amp;gt;.&amp;lt;key&amp;gt;=&amp;lt;value&amp;gt;&lt;/code&gt;, &lt;code&gt;annotation[&amp;lt;platform&amp;gt;].&amp;lt;key&amp;gt;=&amp;lt;value&amp;gt;&lt;/code&gt; and both combined with &lt;code&gt;annotation-&amp;lt;type&amp;gt;[&amp;lt;platform&amp;gt;].&amp;lt;key&amp;gt;=&amp;lt;value&amp;gt;&lt;/code&gt;, allows configuring exactly where to attach the annotation.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;&amp;lt;type&amp;gt;&lt;/code&gt; specifies what object to attach to, and can be any of &lt;code&gt;manifest&lt;/code&gt; (the default), &lt;code&gt;manifest-descriptor&lt;/code&gt;, &lt;code&gt;index&lt;/code&gt; and &lt;code&gt;index-descriptor&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;&amp;lt;platform&amp;gt;&lt;/code&gt; specifies which objects to attach to (by default, all), and is the same key passed into the &lt;code&gt;platform&lt;/code&gt; opt, see &lt;a href=&#34;https://raw.githubusercontent.com/moby/buildkit/master/docs/multi-platform.md&#34;&gt;&lt;code&gt;docs/multi-platform.md&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/moby/buildkit/master/docs/annotations.md&#34;&gt;&lt;code&gt;docs/annotations.md&lt;/code&gt;&lt;/a&gt; for more details.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If credentials are required, &lt;code&gt;buildctl&lt;/code&gt; will attempt to read Docker configuration file &lt;code&gt;$DOCKER_CONFIG/config.json&lt;/code&gt;. &lt;code&gt;$DOCKER_CONFIG&lt;/code&gt; defaults to &lt;code&gt;~/.docker&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Local directory&lt;/h4&gt; &#xA;&lt;p&gt;The local client will copy the files directly to the client. This is useful if BuildKit is being used for building something else than container images.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;buildctl build ... --output type=local,dest=path/to/output-dir&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To export specific files use multi-stage builds with a scratch stage and copy the needed files into that stage with &lt;code&gt;COPY --from&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dockerfile&#34;&gt;...&#xA;FROM scratch as testresult&#xA;&#xA;COPY --from=builder /usr/src/app/testresult.xml .&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;buildctl build ... --opt target=testresult --output type=local,dest=path/to/output-dir&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With a &lt;a href=&#34;https://raw.githubusercontent.com/moby/buildkit/master/docs/multi-platform.md&#34;&gt;multi-platform build&lt;/a&gt;, a subfolder matching each target platform will be created in the destination directory:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dockerfile&#34;&gt;FROM busybox AS build&#xA;ARG TARGETOS&#xA;ARG TARGETARCH&#xA;RUN mkdir /out &amp;amp;&amp;amp; echo foo &amp;gt; /out/hello-$TARGETOS-$TARGETARCH&#xA;&#xA;FROM scratch&#xA;COPY --from=build /out /&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ buildctl build \&#xA;  --frontend dockerfile.v0 \&#xA;  --opt platform=linux/amd64,linux/arm64 \&#xA;  --output type=local,dest=./bin/release&#xA;&#xA;$ tree ./bin&#xA;./bin/&#xA;└── release&#xA;    ├── linux_amd64&#xA;    │   └── hello-linux-amd64&#xA;    └── linux_arm64&#xA;        └── hello-linux-arm64&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can set &lt;code&gt;platform-split=false&lt;/code&gt; to merge files from all platforms together into same directory:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ buildctl build \&#xA;  --frontend dockerfile.v0 \&#xA;  --opt platform=linux/amd64,linux/arm64 \&#xA;  --output type=local,dest=./bin/release,platform-split=false&#xA;&#xA;$ tree ./bin&#xA;./bin/&#xA;└── release&#xA;    ├── hello-linux-amd64&#xA;    └── hello-linux-arm64&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Tar exporter is similar to local exporter but transfers the files through a tarball.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;buildctl build ... --output type=tar,dest=out.tar&#xA;buildctl build ... --output type=tar &amp;gt; out.tar&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Docker tarball&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# exported tarball is also compatible with OCI spec&#xA;buildctl build ... --output type=docker,name=myimage | docker load&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;OCI tarball&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;buildctl build ... --output type=oci,dest=path/to/output.tar&#xA;buildctl build ... --output type=oci &amp;gt; output.tar&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;containerd image store&lt;/h4&gt; &#xA;&lt;p&gt;The containerd worker needs to be used&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;buildctl build ... --output type=image,name=docker.io/username/image&#xA;ctr --namespace=buildkit images ls&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To change the containerd namespace, you need to change &lt;code&gt;worker.containerd.namespace&lt;/code&gt; in &lt;a href=&#34;https://raw.githubusercontent.com/moby/buildkit/master/docs/buildkitd.toml.md&#34;&gt;&lt;code&gt;/etc/buildkit/buildkitd.toml&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Cache&lt;/h2&gt; &#xA;&lt;p&gt;To show local build cache (&lt;code&gt;/var/lib/buildkit&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;buildctl du -v&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To prune local build cache:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;buildctl prune&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Garbage collection&lt;/h3&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/moby/buildkit/master/docs/buildkitd.toml.md&#34;&gt;&lt;code&gt;./docs/buildkitd.toml.md&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Export cache&lt;/h3&gt; &#xA;&lt;p&gt;BuildKit supports the following cache exporters:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;inline&lt;/code&gt;: embed the cache into the image, and push them to the registry together&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;registry&lt;/code&gt;: push the image and the cache separately&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;local&lt;/code&gt;: export to a local directory&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;gha&lt;/code&gt;: export to GitHub Actions cache&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In most case you want to use the &lt;code&gt;inline&lt;/code&gt; cache exporter. However, note that the &lt;code&gt;inline&lt;/code&gt; cache exporter only supports &lt;code&gt;min&lt;/code&gt; cache mode. To enable &lt;code&gt;max&lt;/code&gt; cache mode, push the image and the cache separately by using &lt;code&gt;registry&lt;/code&gt; cache exporter.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;inline&lt;/code&gt; and &lt;code&gt;registry&lt;/code&gt; exporters both store the cache in the registry. For importing the cache, &lt;code&gt;type=registry&lt;/code&gt; is sufficient for both, as specifying the cache format is not necessary.&lt;/p&gt; &#xA;&lt;h4&gt;Inline (push image and cache together)&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;buildctl build ... \&#xA;  --output type=image,name=docker.io/username/image,push=true \&#xA;  --export-cache type=inline \&#xA;  --import-cache type=registry,ref=docker.io/username/image&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that the inline cache is not imported unless &lt;a href=&#34;https://raw.githubusercontent.com/moby/buildkit/master/#registry-push-image-and-cache-separately&#34;&gt;&lt;code&gt;--import-cache type=registry,ref=...&lt;/code&gt;&lt;/a&gt; is provided.&lt;/p&gt; &#xA;&lt;p&gt;Inline cache embeds cache metadata into the image config. The layers in the image will be left untouched compared to the image with no cache information.&lt;/p&gt; &#xA;&lt;p&gt;&lt;span&gt;ℹ&lt;/span&gt; Docker-integrated BuildKit (&lt;code&gt;DOCKER_BUILDKIT=1 docker build&lt;/code&gt;) and &lt;code&gt;docker buildx&lt;/code&gt;requires &lt;code&gt;--build-arg BUILDKIT_INLINE_CACHE=1&lt;/code&gt; to be specified to enable the &lt;code&gt;inline&lt;/code&gt; cache exporter. However, the standalone &lt;code&gt;buildctl&lt;/code&gt; does NOT require &lt;code&gt;--opt build-arg:BUILDKIT_INLINE_CACHE=1&lt;/code&gt; and the build-arg is simply ignored.&lt;/p&gt; &#xA;&lt;h4&gt;Registry (push image and cache separately)&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;buildctl build ... \&#xA;  --output type=image,name=localhost:5000/myrepo:image,push=true \&#xA;  --export-cache type=registry,ref=localhost:5000/myrepo:buildcache \&#xA;  --import-cache type=registry,ref=localhost:5000/myrepo:buildcache&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;--export-cache&lt;/code&gt; options:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;type=registry&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;mode=&amp;lt;min|max&amp;gt;&lt;/code&gt;: specify cache layers to export (default: &lt;code&gt;min&lt;/code&gt;) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;min&lt;/code&gt;: only export layers for the resulting image&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;max&lt;/code&gt;: export all the layers of all intermediate steps&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ref=&amp;lt;ref&amp;gt;&lt;/code&gt;: specify repository reference to store cache, e.g. &lt;code&gt;docker.io/user/image:tag&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;image-manifest=&amp;lt;true|false&amp;gt;&lt;/code&gt;: whether to export cache manifest as an OCI-compatible image manifest rather than a manifest list/index (default: &lt;code&gt;true&lt;/code&gt; since BuildKit &lt;code&gt;v0.21&lt;/code&gt;, must be used with &lt;code&gt;oci-mediatypes=true&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;oci-mediatypes=&amp;lt;true|false&amp;gt;&lt;/code&gt;: whether to use OCI mediatypes in exported manifests (default: &lt;code&gt;true&lt;/code&gt;, since BuildKit &lt;code&gt;v0.8&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;compression=&amp;lt;uncompressed|gzip|estargz|zstd&amp;gt;&lt;/code&gt;: choose compression type for layers newly created and cached, gzip is default value. estargz and zstd should be used with &lt;code&gt;oci-mediatypes=true&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;compression-level=&amp;lt;value&amp;gt;&lt;/code&gt;: choose compression level for gzip, estargz (0-9) and zstd (0-22)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;force-compression=true&lt;/code&gt;: forcibly apply &lt;code&gt;compression&lt;/code&gt; option to all layers&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ignore-error=&amp;lt;false|true&amp;gt;&lt;/code&gt;: specify if error is ignored in case cache export fails (default: &lt;code&gt;false&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;code&gt;--import-cache&lt;/code&gt; options:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;type=registry&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ref=&amp;lt;ref&amp;gt;&lt;/code&gt;: specify repository reference to retrieve cache from, e.g. &lt;code&gt;docker.io/user/image:tag&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Local directory&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;buildctl build ... --export-cache type=local,dest=path/to/output-dir&#xA;buildctl build ... --import-cache type=local,src=path/to/input-dir&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The directory layout conforms to OCI Image Spec v1.0.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;--export-cache&lt;/code&gt; options:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;type=local&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;mode=&amp;lt;min|max&amp;gt;&lt;/code&gt;: specify cache layers to export (default: &lt;code&gt;min&lt;/code&gt;) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;min&lt;/code&gt;: only export layers for the resulting image&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;max&lt;/code&gt;: export all the layers of all intermediate steps&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;dest=&amp;lt;path&amp;gt;&lt;/code&gt;: destination directory for cache exporter&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;tag=&amp;lt;tag&amp;gt;&lt;/code&gt;: specify custom tag of image to write to local index (default: &lt;code&gt;latest&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;image-manifest=&amp;lt;true|false&amp;gt;&lt;/code&gt;: whether to export cache manifest as an OCI-compatible image manifest rather than a manifest list/index (default: &lt;code&gt;true&lt;/code&gt; since BuildKit &lt;code&gt;v0.21&lt;/code&gt;, must be used with &lt;code&gt;oci-mediatypes=true&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;oci-mediatypes=&amp;lt;true|false&amp;gt;&lt;/code&gt;: whether to use OCI mediatypes in exported manifests (default &lt;code&gt;true&lt;/code&gt;, since BuildKit &lt;code&gt;v0.8&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;compression=&amp;lt;uncompressed|gzip|estargz|zstd&amp;gt;&lt;/code&gt;: choose compression type for layers newly created and cached, gzip is default value. estargz and zstd should be used with &lt;code&gt;oci-mediatypes=true&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;compression-level=&amp;lt;value&amp;gt;&lt;/code&gt;: compression level for gzip, estargz (0-9) and zstd (0-22)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;force-compression=true&lt;/code&gt;: forcibly apply &lt;code&gt;compression&lt;/code&gt; option to all layers&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ignore-error=&amp;lt;false|true&amp;gt;&lt;/code&gt;: specify if error is ignored in case cache export fails (default: &lt;code&gt;false&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;code&gt;--import-cache&lt;/code&gt; options:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;type=local&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;src=&amp;lt;path&amp;gt;&lt;/code&gt;: source directory for cache importer&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;tag=&amp;lt;tag&amp;gt;&lt;/code&gt;: specify custom tag of image to read from local index (default: &lt;code&gt;latest&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;digest=sha256:&amp;lt;sha256digest&amp;gt;&lt;/code&gt;: specify explicit digest of the manifest list to import&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;GitHub Actions cache (experimental)&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;buildctl build ... \&#xA;  --output type=image,name=docker.io/username/image,push=true \&#xA;  --export-cache type=gha \&#xA;  --import-cache type=gha&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;GitHub Actions cache saves both cache metadata and layers to GitHub&#39;s Cache service. This cache currently has a &lt;a href=&#34;https://docs.github.com/en/actions/advanced-guides/caching-dependencies-to-speed-up-workflows#usage-limits-and-eviction-policy&#34;&gt;size limit of 10GB&lt;/a&gt; that is shared across different caches in the repo. If you exceed this limit, GitHub will save your cache but will begin evicting caches until the total size is less than 10 GB. Recycling caches too often can result in slower runtimes overall.&lt;/p&gt; &#xA;&lt;p&gt;Similarly to using &lt;a href=&#34;https://github.com/actions/cache&#34;&gt;actions/cache&lt;/a&gt;, caches are &lt;a href=&#34;https://docs.github.com/en/actions/advanced-guides/caching-dependencies-to-speed-up-workflows#restrictions-for-accessing-a-cache&#34;&gt;scoped by branch&lt;/a&gt;, with the default and target branches being available to every branch.&lt;/p&gt; &#xA;&lt;p&gt;Following attributes are required to authenticate against the &lt;a href=&#34;https://github.com/tonistiigi/go-actions-cache/raw/master/api.md#authentication&#34;&gt;GitHub Actions Cache service API&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;url&lt;/code&gt;: Cache server URL (default &lt;code&gt;$ACTIONS_CACHE_URL&lt;/code&gt; or fallback to &lt;code&gt;$ACTIONS_RESULTS_URL&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;url_v2&lt;/code&gt;: Cache v2 server URL if &lt;code&gt;$ACTIONS_CACHE_SERVICE_V2&lt;/code&gt; set on the runner (default &lt;code&gt;$ACTIONS_RESULTS_URL&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;token&lt;/code&gt;: Access token (default &lt;code&gt;$ACTIONS_RUNTIME_TOKEN&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;span&gt;ℹ&lt;/span&gt; This type of cache can be used with &lt;a href=&#34;https://github.com/docker/build-push-action&#34;&gt;Docker Build Push Action&lt;/a&gt; where &lt;code&gt;url&lt;/code&gt; and &lt;code&gt;token&lt;/code&gt; will be automatically set. To use this backend in an inline &lt;code&gt;run&lt;/code&gt; step, you have to include &lt;a href=&#34;https://github.com/crazy-max/ghaction-github-runtime&#34;&gt;crazy-max/ghaction-github-runtime&lt;/a&gt; in your workflow to expose the runtime.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;--export-cache&lt;/code&gt; options:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;type=gha&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;mode=&amp;lt;min|max&amp;gt;&lt;/code&gt;: specify cache layers to export (default: &lt;code&gt;min&lt;/code&gt;) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;min&lt;/code&gt;: only export layers for the resulting image&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;max&lt;/code&gt;: export all the layers of all intermediate steps&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;scope=&amp;lt;scope&amp;gt;&lt;/code&gt;: which scope cache object belongs to (default &lt;code&gt;buildkit&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ignore-error=&amp;lt;false|true&amp;gt;&lt;/code&gt;: specify if error is ignored in case cache export fails (default: &lt;code&gt;false&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;timeout=&amp;lt;duration&amp;gt;&lt;/code&gt;: sets the timeout duration for cache export (default: &lt;code&gt;10m&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;code&gt;--import-cache&lt;/code&gt; options:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;type=gha&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;scope=&amp;lt;scope&amp;gt;&lt;/code&gt;: which scope cache object belongs to (default &lt;code&gt;buildkit&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;timeout=&amp;lt;duration&amp;gt;&lt;/code&gt;: sets the timeout duration for cache import (default: &lt;code&gt;10m&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;S3 cache (experimental)&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;buildctl build ... \&#xA;  --output type=image,name=docker.io/username/image,push=true \&#xA;  --export-cache type=s3,region=eu-west-1,bucket=my_bucket,name=my_image \&#xA;  --import-cache type=s3,region=eu-west-1,bucket=my_bucket,name=my_image&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The following attributes are required:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;bucket&lt;/code&gt;: AWS S3 bucket (default: &lt;code&gt;$AWS_BUCKET&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;region&lt;/code&gt;: AWS region (default: &lt;code&gt;$AWS_REGION&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Storage locations:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;blobs: &lt;code&gt;s3://&amp;lt;bucket&amp;gt;/&amp;lt;prefix&amp;gt;&amp;lt;blobs_prefix&amp;gt;/&amp;lt;sha256&amp;gt;&lt;/code&gt;, default: &lt;code&gt;s3://&amp;lt;bucket&amp;gt;/blobs/&amp;lt;sha256&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;manifests: &lt;code&gt;s3://&amp;lt;bucket&amp;gt;/&amp;lt;prefix&amp;gt;&amp;lt;manifests_prefix&amp;gt;/&amp;lt;name&amp;gt;&lt;/code&gt;, default: &lt;code&gt;s3://&amp;lt;bucket&amp;gt;/manifests/&amp;lt;name&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;S3 configuration:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;blobs_prefix&lt;/code&gt;: global prefix to store / read blobs on s3 (default: &lt;code&gt;blobs/&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;manifests_prefix&lt;/code&gt;: global prefix to store / read manifests on s3 (default: &lt;code&gt;manifests/&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;endpoint_url&lt;/code&gt;: specify a specific S3 endpoint (default: empty)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;use_path_style&lt;/code&gt;: if set to &lt;code&gt;true&lt;/code&gt;, put the bucket name in the URL instead of in the hostname (default: &lt;code&gt;false&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;AWS Authentication:&lt;/p&gt; &#xA;&lt;p&gt;BuildKit relies on the [AWS Go SDK](&lt;a href=&#34;https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html%5D(https://pkg.go.dev/github.com/aws/aws-sdk-go-v2/config#EnvConfig)&#34;&gt;https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html](https://pkg.go.dev/github.com/aws/aws-sdk-go-v2/config#EnvConfig)&lt;/a&gt;. This means that all standard authentication methods through environment variables or config files are supported. This is especially true for AWS EC2 IAM Profile and AWS Web Identity Token (IAM roles in Kubernetes).&lt;/p&gt; &#xA;&lt;p&gt;Beware, these configurations must be available at buildkit daemon level, not at client level.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The following attributes can be used to forward static credentials from a buildkit client to the daemon (buildx for example). &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;access_key_id&lt;/code&gt;: Access Key ID&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;secret_access_key&lt;/code&gt;: Secret Access Key&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;session_token&lt;/code&gt;: Session Token&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;code&gt;--export-cache&lt;/code&gt; options:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;type=s3&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;mode=&amp;lt;min|max&amp;gt;&lt;/code&gt;: specify cache layers to export (default: &lt;code&gt;min&lt;/code&gt;) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;min&lt;/code&gt;: only export layers for the resulting image&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;max&lt;/code&gt;: export all the layers of all intermediate steps&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;prefix=&amp;lt;prefix&amp;gt;&lt;/code&gt;: set global prefix to store / read files on s3 (default: empty)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;name=&amp;lt;manifest&amp;gt;&lt;/code&gt;: specify name of the manifest to use (default &lt;code&gt;buildkit&lt;/code&gt;) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Multiple manifest names can be specified at the same time, separated by &lt;code&gt;;&lt;/code&gt;. The standard use case is to use the git sha1 as name, and the branch name as duplicate, and load both with 2 &lt;code&gt;import-cache&lt;/code&gt; commands.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ignore-error=&amp;lt;false|true&amp;gt;&lt;/code&gt;: specify if error is ignored in case cache export fails (default: &lt;code&gt;false&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;touch_refresh=24h&lt;/code&gt;: Instead of being uploaded again when not changed, blobs files will be &#34;touched&#34; on s3 every &lt;code&gt;touch_refresh&lt;/code&gt;, default is 24h. Due to this, an expiration policy can be set on the S3 bucket to cleanup useless files automatically. Manifests files are systematically rewritten, there is no need to touch them.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;upload_parallelism=4&lt;/code&gt;: This parameter changes the number of layers uploaded to s3 in parallel. Each individual layer is uploaded with 5 threads, using the Upload manager provided by the AWS SDK.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;code&gt;--import-cache&lt;/code&gt; options:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;type=s3&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;prefix=&amp;lt;prefix&amp;gt;&lt;/code&gt;: set global prefix to store / read files on s3 (default: empty)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;blobs_prefix=&amp;lt;prefix&amp;gt;&lt;/code&gt;: set global prefix to store / read blobs on s3 (default: &lt;code&gt;blobs/&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;manifests_prefix=&amp;lt;prefix&amp;gt;&lt;/code&gt;: set global prefix to store / read manifests on s3 (default: &lt;code&gt;manifests/&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;name=&amp;lt;manifest&amp;gt;&lt;/code&gt;: name of the manifest to use (default &lt;code&gt;buildkit&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Azure Blob Storage cache (experimental)&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;buildctl build ... \&#xA;  --output type=image,name=docker.io/username/image,push=true \&#xA;  --export-cache type=azblob,account_url=https://myaccount.blob.core.windows.net,name=my_image \&#xA;  --import-cache type=azblob,account_url=https://myaccount.blob.core.windows.net,name=my_image&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The following attributes are required:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;account_url&lt;/code&gt;: The Azure Blob Storage account URL (default: &lt;code&gt;$BUILDKIT_AZURE_STORAGE_ACCOUNT_URL&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Storage locations:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;blobs: &lt;code&gt;&amp;lt;account_url&amp;gt;/&amp;lt;container&amp;gt;/&amp;lt;prefix&amp;gt;&amp;lt;blobs_prefix&amp;gt;/&amp;lt;sha256&amp;gt;&lt;/code&gt;, default: &lt;code&gt;&amp;lt;account_url&amp;gt;/&amp;lt;container&amp;gt;/blobs/&amp;lt;sha256&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;manifests: &lt;code&gt;&amp;lt;account_url&amp;gt;/&amp;lt;container&amp;gt;/&amp;lt;prefix&amp;gt;&amp;lt;manifests_prefix&amp;gt;/&amp;lt;name&amp;gt;&lt;/code&gt;, default: &lt;code&gt;&amp;lt;account_url&amp;gt;/&amp;lt;container&amp;gt;/manifests/&amp;lt;name&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Azure Blob Storage configuration:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;container&lt;/code&gt;: The Azure Blob Storage container name (default: &lt;code&gt;buildkit-cache&lt;/code&gt; or &lt;code&gt;$BUILDKIT_AZURE_STORAGE_CONTAINER&lt;/code&gt; if set)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;blobs_prefix&lt;/code&gt;: Global prefix to store / read blobs on the Azure Blob Storage container (&lt;code&gt;&amp;lt;container&amp;gt;&lt;/code&gt;) (default: &lt;code&gt;blobs/&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;manifests_prefix&lt;/code&gt;: Global prefix to store / read blobs on the Azure Blob Storage container (&lt;code&gt;&amp;lt;container&amp;gt;&lt;/code&gt;) (default: &lt;code&gt;manifests/&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Azure Blob Storage authentication:&lt;/p&gt; &#xA;&lt;p&gt;There are 2 options supported for Azure Blob Storage authentication:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Any system using environment variables supported by the &lt;a href=&#34;https://docs.microsoft.com/en-us/azure/developer/go/azure-sdk-authentication&#34;&gt;Azure SDK for Go&lt;/a&gt;. The configuration must be available for the buildkit daemon, not for the client.&lt;/li&gt; &#xA; &lt;li&gt;Secret Access Key, using the &lt;code&gt;secret_access_key&lt;/code&gt; attribute to specify the primary or secondary account key for your Azure Blob Storage account. &lt;a href=&#34;https://docs.microsoft.com/en-us/azure/storage/common/storage-account-keys-manage&#34;&gt;Azure Blob Storage account keys&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] Account name can also be specified with &lt;code&gt;account_name&lt;/code&gt; attribute (or &lt;code&gt;$BUILDKIT_AZURE_STORAGE_ACCOUNT_NAME&lt;/code&gt;) if it is not part of the account URL host.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;code&gt;--export-cache&lt;/code&gt; options:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;type=azblob&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;mode=&amp;lt;min|max&amp;gt;&lt;/code&gt;: specify cache layers to export (default: &lt;code&gt;min&lt;/code&gt;) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;min&lt;/code&gt;: only export layers for the resulting image&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;max&lt;/code&gt;: export all the layers of all intermediate steps&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;prefix=&amp;lt;prefix&amp;gt;&lt;/code&gt;: set global prefix to store / read files on the Azure Blob Storage container (&lt;code&gt;&amp;lt;container&amp;gt;&lt;/code&gt;) (default: empty)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;name=&amp;lt;manifest&amp;gt;&lt;/code&gt;: specify name of the manifest to use (default: &lt;code&gt;buildkit&lt;/code&gt;) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Multiple manifest names can be specified at the same time, separated by &lt;code&gt;;&lt;/code&gt;. The standard use case is to use the git sha1 as name, and the branch name as duplicate, and load both with 2 &lt;code&gt;import-cache&lt;/code&gt; commands.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ignore-error=&amp;lt;false|true&amp;gt;&lt;/code&gt;: specify if error is ignored in case cache export fails (default: &lt;code&gt;false&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;code&gt;--import-cache&lt;/code&gt; options:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;type=azblob&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;prefix=&amp;lt;prefix&amp;gt;&lt;/code&gt;: set global prefix to store / read files on the Azure Blob Storage container (&lt;code&gt;&amp;lt;container&amp;gt;&lt;/code&gt;) (default: empty)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;blobs_prefix=&amp;lt;prefix&amp;gt;&lt;/code&gt;: set global prefix to store / read blobs on the Azure Blob Storage container (&lt;code&gt;&amp;lt;container&amp;gt;&lt;/code&gt;) (default: &lt;code&gt;blobs/&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;manifests_prefix=&amp;lt;prefix&amp;gt;&lt;/code&gt;: set global prefix to store / read manifests on the Azure Blob Storage container (&lt;code&gt;&amp;lt;container&amp;gt;&lt;/code&gt;) (default: &lt;code&gt;manifests/&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;name=&amp;lt;manifest&amp;gt;&lt;/code&gt;: name of the manifest to use (default: &lt;code&gt;buildkit&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Consistent hashing&lt;/h3&gt; &#xA;&lt;p&gt;If you have multiple BuildKit daemon instances, but you don&#39;t want to use registry for sharing cache across the cluster, consider client-side load balancing using consistent hashing.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/moby/buildkit/master/examples/kubernetes/consistenthash&#34;&gt;&lt;code&gt;./examples/kubernetes/consistenthash&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Metadata&lt;/h2&gt; &#xA;&lt;p&gt;To output build metadata such as the image digest, pass the &lt;code&gt;--metadata-file&lt;/code&gt; flag. The metadata will be written as a JSON object to the specified file. The directory of the specified file must already exist and be writable.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;buildctl build ... --metadata-file metadata.json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;jq &#39;.&#39; metadata.json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;containerimage.config.digest&#34;: &#34;sha256:2937f66a9722f7f4a2df583de2f8cb97fc9196059a410e7f00072fc918930e66&#34;,&#xA;  &#34;containerimage.descriptor&#34;: {&#xA;    &#34;annotations&#34;: {&#xA;      &#34;config.digest&#34;: &#34;sha256:2937f66a9722f7f4a2df583de2f8cb97fc9196059a410e7f00072fc918930e66&#34;,&#xA;      &#34;org.opencontainers.image.created&#34;: &#34;2022-02-08T21:28:03Z&#34;&#xA;    },&#xA;    &#34;digest&#34;: &#34;sha256:19ffeab6f8bc9293ac2c3fdf94ebe28396254c993aea0b5a542cfb02e0883fa3&#34;,&#xA;    &#34;mediaType&#34;: &#34;application/vnd.oci.image.manifest.v1+json&#34;,&#xA;    &#34;size&#34;: 506&#xA;  },&#xA;  &#34;containerimage.digest&#34;: &#34;sha256:19ffeab6f8bc9293ac2c3fdf94ebe28396254c993aea0b5a542cfb02e0883fa3&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Systemd socket activation&lt;/h2&gt; &#xA;&lt;p&gt;On Systemd based systems, you can communicate with the daemon via &lt;a href=&#34;http://0pointer.de/blog/projects/socket-activation.html&#34;&gt;Systemd socket activation&lt;/a&gt;, use &lt;code&gt;buildkitd --addr fd://&lt;/code&gt;. You can find examples of using Systemd socket activation with BuildKit and Systemd in &lt;a href=&#34;https://raw.githubusercontent.com/moby/buildkit/master/examples/systemd&#34;&gt;&lt;code&gt;./examples/systemd&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Expose BuildKit as a TCP service&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;buildkitd&lt;/code&gt; daemon can listen the gRPC API on a TCP socket.&lt;/p&gt; &#xA;&lt;p&gt;It is highly recommended to create TLS certificates for both the daemon and the client (mTLS). Enabling TCP without mTLS is dangerous because the executor containers (aka Dockerfile &lt;code&gt;RUN&lt;/code&gt; containers) can call BuildKit API as well.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;buildkitd \&#xA;  --addr tcp://0.0.0.0:1234 \&#xA;  --tlscacert /path/to/ca.pem \&#xA;  --tlscert /path/to/cert.pem \&#xA;  --tlskey /path/to/key.pem&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;buildctl \&#xA;  --addr tcp://example.com:1234 \&#xA;  --tlscacert /path/to/ca.pem \&#xA;  --tlscert /path/to/clientcert.pem \&#xA;  --tlskey /path/to/clientkey.pem \&#xA;  build ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Load balancing&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;buildctl build&lt;/code&gt; can be called against randomly load balanced &lt;code&gt;buildkitd&lt;/code&gt; daemons.&lt;/p&gt; &#xA;&lt;p&gt;See also &lt;a href=&#34;https://raw.githubusercontent.com/moby/buildkit/master/#consistent-hashing&#34;&gt;Consistent hashing&lt;/a&gt; for client-side load balancing.&lt;/p&gt; &#xA;&lt;h2&gt;Containerizing BuildKit&lt;/h2&gt; &#xA;&lt;p&gt;BuildKit can also be used by running the &lt;code&gt;buildkitd&lt;/code&gt; daemon inside a Docker container and accessing it remotely.&lt;/p&gt; &#xA;&lt;p&gt;We provide the container images as &lt;a href=&#34;https://hub.docker.com/r/moby/buildkit/tags/&#34;&gt;&lt;code&gt;moby/buildkit&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;moby/buildkit:latest&lt;/code&gt;: built from the latest regular &lt;a href=&#34;https://github.com/moby/buildkit/releases&#34;&gt;release&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;moby/buildkit:rootless&lt;/code&gt;: same as &lt;code&gt;latest&lt;/code&gt; but runs as an unprivileged user, see &lt;a href=&#34;https://raw.githubusercontent.com/moby/buildkit/master/docs/rootless.md&#34;&gt;&lt;code&gt;docs/rootless.md&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;moby/buildkit:master&lt;/code&gt;: built from the master branch&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;moby/buildkit:master-rootless&lt;/code&gt;: same as master but runs as an unprivileged user, see &lt;a href=&#34;https://raw.githubusercontent.com/moby/buildkit/master/docs/rootless.md&#34;&gt;&lt;code&gt;docs/rootless.md&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To run daemon in a container:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run -d --name buildkitd --privileged moby/buildkit:latest&#xA;export BUILDKIT_HOST=docker-container://buildkitd&#xA;buildctl build --help&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Podman&lt;/h3&gt; &#xA;&lt;p&gt;To connect to a BuildKit daemon running in a Podman container, use &lt;code&gt;podman-container://&lt;/code&gt; instead of &lt;code&gt;docker-container://&lt;/code&gt; .&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;podman run -d --name buildkitd --privileged moby/buildkit:latest&#xA;buildctl --addr=podman-container://buildkitd build --frontend dockerfile.v0 --local context=. --local dockerfile=. --output type=oci | podman load foo&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;sudo&lt;/code&gt; is not required.&lt;/p&gt; &#xA;&lt;h3&gt;Nerdctl&lt;/h3&gt; &#xA;&lt;p&gt;To connect to a BuildKit daemon running in a Nerdctl container, use &lt;code&gt;nerdctl-container://&lt;/code&gt; instead of &lt;code&gt;docker-container://&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;nerdctl run -d --name buildkitd --privileged moby/buildkit:latest&#xA;buildctl --addr=nerdctl-container://buildkitd build --frontend dockerfile.v0 --local context=. --local dockerfile=. --output type=oci | nerdctl load&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;sudo&lt;/code&gt; is not required.&lt;/p&gt; &#xA;&lt;h3&gt;Kubernetes&lt;/h3&gt; &#xA;&lt;p&gt;For Kubernetes deployments, see &lt;a href=&#34;https://raw.githubusercontent.com/moby/buildkit/master/examples/kubernetes&#34;&gt;&lt;code&gt;examples/kubernetes&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Daemonless&lt;/h3&gt; &#xA;&lt;p&gt;To run the client and an ephemeral daemon in a single container (&#34;daemonless mode&#34;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run \&#xA;    -it \&#xA;    --rm \&#xA;    --privileged \&#xA;    -v /path/to/dir:/tmp/work \&#xA;    --entrypoint buildctl-daemonless.sh \&#xA;    moby/buildkit:master \&#xA;        build \&#xA;        --frontend dockerfile.v0 \&#xA;        --local context=/tmp/work \&#xA;        --local dockerfile=/tmp/work&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run \&#xA;    -it \&#xA;    --rm \&#xA;    --security-opt seccomp=unconfined \&#xA;    --security-opt apparmor=unconfined \&#xA;    -e BUILDKITD_FLAGS=--oci-worker-no-process-sandbox \&#xA;    -v /path/to/dir:/tmp/work \&#xA;    --entrypoint buildctl-daemonless.sh \&#xA;    moby/buildkit:master-rootless \&#xA;        build \&#xA;        --frontend \&#xA;        dockerfile.v0 \&#xA;        --local context=/tmp/work \&#xA;        --local dockerfile=/tmp/work&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;OpenTelemetry support&lt;/h2&gt; &#xA;&lt;p&gt;BuildKit supports &lt;a href=&#34;https://opentelemetry.io/&#34;&gt;OpenTelemetry&lt;/a&gt; for buildkitd gRPC API and buildctl commands. To capture the trace to &lt;a href=&#34;https://github.com/jaegertracing/jaeger&#34;&gt;Jaeger&lt;/a&gt;, set &lt;code&gt;JAEGER_TRACE&lt;/code&gt; environment variable to the collection address.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run -d -p6831:6831/udp -p16686:16686 jaegertracing/all-in-one:latest&#xA;export JAEGER_TRACE=0.0.0.0:6831&#xA;# restart buildkitd and buildctl so they know JAEGER_TRACE&#xA;# any buildctl command should be traced to http://127.0.0.1:16686/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;On Windows, if you are running Jaeger outside of a container, &lt;a href=&#34;https://www.jaegertracing.io/docs/1.57/getting-started/#all-in-one&#34;&gt;&lt;code&gt;jaeger-all-in-one.exe&lt;/code&gt;&lt;/a&gt;, set the environment variable &lt;code&gt;setx -m JAEGER_TRACE &#34;0.0.0.0:6831&#34;&lt;/code&gt;, restart &lt;code&gt;buildkitd&lt;/code&gt; in a new terminal and the traces will be collected automatically.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Running BuildKit without root privileges&lt;/h2&gt; &#xA;&lt;p&gt;Please refer to &lt;a href=&#34;https://raw.githubusercontent.com/moby/buildkit/master/docs/rootless.md&#34;&gt;&lt;code&gt;docs/rootless.md&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Building multi-platform images&lt;/h2&gt; &#xA;&lt;p&gt;Please refer to &lt;a href=&#34;https://raw.githubusercontent.com/moby/buildkit/master/docs/multi-platform.md&#34;&gt;&lt;code&gt;docs/multi-platform.md&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Configuring &lt;code&gt;buildctl&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;h4&gt;Color Output Controls&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;buildctl&lt;/code&gt; has support for modifying the colors that are used to output information to the terminal. You can set the environment variable &lt;code&gt;BUILDKIT_COLORS&lt;/code&gt; to something like &lt;code&gt;run=green:warning=yellow:error=red:cancel=255,165,0&lt;/code&gt; to set the colors that you would like to use. Setting &lt;code&gt;NO_COLOR&lt;/code&gt; to anything will disable any colorized output as recommended by &lt;a href=&#34;https://no-color.org/&#34;&gt;no-color.org&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Parsing errors will be reported but ignored. This will result in default color values being used where needed.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/moby/buildkit/raw/master/util/progress/progressui/colors.go&#34;&gt;The list of pre-defined colors&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Number of log lines (for active steps in tty mode)&lt;/h4&gt; &#xA;&lt;p&gt;You can change how many log lines are visible for active steps in tty mode by setting &lt;code&gt;BUILDKIT_TTY_LOG_LINES&lt;/code&gt; to a number (default: 6).&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Want to contribute to BuildKit? Awesome! You can find information about contributing to this project in the &lt;a href=&#34;https://raw.githubusercontent.com/moby/buildkit/master/.github/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>github/github-mcp-server</title>
    <updated>2025-06-22T01:40:56Z</updated>
    <id>tag:github.com,2025-06-22:/github/github-mcp-server</id>
    <link href="https://github.com/github/github-mcp-server" rel="alternate"></link>
    <summary type="html">&lt;p&gt;GitHub&#39;s official MCP Server&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;GitHub MCP Server&lt;/h1&gt; &#xA;&lt;p&gt;The GitHub MCP Server is a &lt;a href=&#34;https://modelcontextprotocol.io/introduction&#34;&gt;Model Context Protocol (MCP)&lt;/a&gt; server that provides seamless integration with GitHub APIs, enabling advanced automation and interaction capabilities for developers and tools.&lt;/p&gt; &#xA;&lt;h3&gt;Use Cases&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Automating GitHub workflows and processes.&lt;/li&gt; &#xA; &lt;li&gt;Extracting and analyzing data from GitHub repositories.&lt;/li&gt; &#xA; &lt;li&gt;Building AI powered tools and applications that interact with GitHub&#39;s ecosystem.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Remote GitHub MCP Server&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://insiders.vscode.dev/redirect/mcp/install?name=github&amp;amp;config=%7B%22type%22%3A%20%22http%22%2C%22url%22%3A%20%22https%3A%2F%2Fapi.githubcopilot.com%2Fmcp%2F%22%7D&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/VS_Code-Install_Server-0098FF?style=flat-square&amp;amp;logo=visualstudiocode&amp;amp;logoColor=white&#34; alt=&#34;Install in VS Code&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://insiders.vscode.dev/redirect/mcp/install?name=github&amp;amp;config=%7B%22type%22%3A%20%22http%22%2C%22url%22%3A%20%22https%3A%2F%2Fapi.githubcopilot.com%2Fmcp%2F%22%7D&amp;amp;quality=insiders&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/VS_Code_Insiders-Install_Server-24bfa5?style=flat-square&amp;amp;logo=visualstudiocode&amp;amp;logoColor=white&#34; alt=&#34;Install in VS Code Insiders&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The remote GitHub MCP Server is hosted by GitHub and provides the easiest method for getting up and running. If your MCP host does not support remote MCP servers, don&#39;t worry! You can use the &lt;a href=&#34;https://github.com/github/github-mcp-server?tab=readme-ov-file#local-github-mcp-server&#34;&gt;local version of the GitHub MCP Server&lt;/a&gt; instead.&lt;/p&gt; &#xA;&lt;h2&gt;Prerequisites&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;An MCP host that supports the latest MCP specification and remote servers, such as &lt;a href=&#34;https://code.visualstudio.com/&#34;&gt;VS Code&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Usage with VS Code&lt;/h3&gt; &#xA;&lt;p&gt;For quick installation, use one of the one-click install buttons above. Once you complete that flow, toggle Agent mode (located by the Copilot Chat text input) and the server will start. Make sure you&#39;re using &lt;a href=&#34;https://code.visualstudio.com/updates/v1_101&#34;&gt;VS Code 1.101&lt;/a&gt; or &lt;a href=&#34;https://code.visualstudio.com/updates&#34;&gt;later&lt;/a&gt; for remote MCP and OAuth support.&lt;/p&gt; &#xA;&lt;p&gt;Alternatively, to manually configure VS Code, choose the appropriate JSON block from the examples below and add it to your host configuration:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt;&#xA;   &lt;th&gt;Using OAuth&lt;/th&gt;&#xA;   &lt;th&gt;Using a GitHub PAT&lt;/th&gt;&#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt;&#xA;   &lt;th align=&#34;left&#34; colspan=&#34;2&#34;&gt;VS Code (version 1.101 or greater)&lt;/th&gt;&#xA;  &lt;/tr&gt; &#xA;  &lt;tr valign=&#34;top&#34;&gt; &#xA;   &lt;td&gt; &lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;servers&#34;: {&#xA;    &#34;github&#34;: {&#xA;      &#34;type&#34;: &#34;http&#34;,&#xA;      &#34;url&#34;: &#34;https://api.githubcopilot.com/mcp/&#34;&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;servers&#34;: {&#xA;    &#34;github&#34;: {&#xA;      &#34;type&#34;: &#34;http&#34;,&#xA;      &#34;url&#34;: &#34;https://api.githubcopilot.com/mcp/&#34;,&#xA;      &#34;headers&#34;: {&#xA;        &#34;Authorization&#34;: &#34;Bearer ${input:github_mcp_pat}&#34;&#xA;      }&#xA;    }&#xA;  },&#xA;  &#34;inputs&#34;: [&#xA;    {&#xA;      &#34;type&#34;: &#34;promptString&#34;,&#xA;      &#34;id&#34;: &#34;github_mcp_pat&#34;,&#xA;      &#34;description&#34;: &#34;GitHub Personal Access Token&#34;,&#xA;      &#34;password&#34;: true&#xA;    }&#xA;  ]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Usage in other MCP Hosts&lt;/h3&gt; &#xA;&lt;p&gt;For MCP Hosts that are &lt;a href=&#34;https://raw.githubusercontent.com/github/github-mcp-server/main/docs/host-integration.md&#34;&gt;Remote MCP-compatible&lt;/a&gt;, choose the appropriate JSON block from the examples below and add it to your host configuration:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt;&#xA;   &lt;th&gt;Using OAuth&lt;/th&gt;&#xA;   &lt;th&gt;Using a GitHub PAT&lt;/th&gt;&#xA;  &lt;/tr&gt; &#xA;  &lt;tr valign=&#34;top&#34;&gt; &#xA;   &lt;td&gt; &lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;mcpServers&#34;: {&#xA;    &#34;github&#34;: {&#xA;      &#34;url&#34;: &#34;https://api.githubcopilot.com/mcp/&#34;&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;mcpServers&#34;: {&#xA;    &#34;github&#34;: {&#xA;      &#34;url&#34;: &#34;https://api.githubcopilot.com/mcp/&#34;,&#xA;      &#34;authorization_token&#34;: &#34;Bearer &amp;lt;your GitHub PAT&amp;gt;&#34;&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The exact configuration format may vary by host. Refer to your host&#39;s documentation for the correct syntax and location for remote MCP server setup.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Configuration&lt;/h3&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/github/github-mcp-server/main/docs/remote-server.md&#34;&gt;Remote Server Documentation&lt;/a&gt; on how to pass additional configuration settings to the remote GitHub MCP Server.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Local GitHub MCP Server&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://insiders.vscode.dev/redirect/mcp/install?name=github&amp;amp;inputs=%5B%7B%22id%22%3A%22github_token%22%2C%22type%22%3A%22promptString%22%2C%22description%22%3A%22GitHub%20Personal%20Access%20Token%22%2C%22password%22%3Atrue%7D%5D&amp;amp;config=%7B%22command%22%3A%22docker%22%2C%22args%22%3A%5B%22run%22%2C%22-i%22%2C%22--rm%22%2C%22-e%22%2C%22GITHUB_PERSONAL_ACCESS_TOKEN%22%2C%22ghcr.io%2Fgithub%2Fgithub-mcp-server%22%5D%2C%22env%22%3A%7B%22GITHUB_PERSONAL_ACCESS_TOKEN%22%3A%22%24%7Binput%3Agithub_token%7D%22%7D%7D&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/VS_Code-Install_Server-0098FF?style=flat-square&amp;amp;logo=visualstudiocode&amp;amp;logoColor=white&#34; alt=&#34;Install with Docker in VS Code&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://insiders.vscode.dev/redirect/mcp/install?name=github&amp;amp;inputs=%5B%7B%22id%22%3A%22github_token%22%2C%22type%22%3A%22promptString%22%2C%22description%22%3A%22GitHub%20Personal%20Access%20Token%22%2C%22password%22%3Atrue%7D%5D&amp;amp;config=%7B%22command%22%3A%22docker%22%2C%22args%22%3A%5B%22run%22%2C%22-i%22%2C%22--rm%22%2C%22-e%22%2C%22GITHUB_PERSONAL_ACCESS_TOKEN%22%2C%22ghcr.io%2Fgithub%2Fgithub-mcp-server%22%5D%2C%22env%22%3A%7B%22GITHUB_PERSONAL_ACCESS_TOKEN%22%3A%22%24%7Binput%3Agithub_token%7D%22%7D%7D&amp;amp;quality=insiders&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/VS_Code_Insiders-Install_Server-24bfa5?style=flat-square&amp;amp;logo=visualstudiocode&amp;amp;logoColor=white&#34; alt=&#34;Install with Docker in VS Code Insiders&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Prerequisites&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;To run the server in a container, you will need to have &lt;a href=&#34;https://www.docker.com/&#34;&gt;Docker&lt;/a&gt; installed.&lt;/li&gt; &#xA; &lt;li&gt;Once Docker is installed, you will also need to ensure Docker is running. The image is public; if you get errors on pull, you may have an expired token and need to &lt;code&gt;docker logout ghcr.io&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Lastly you will need to &lt;a href=&#34;https://github.com/settings/personal-access-tokens/new&#34;&gt;Create a GitHub Personal Access Token&lt;/a&gt;. The MCP server can use many of the GitHub APIs, so enable the permissions that you feel comfortable granting your AI tools (to learn more about access tokens, please check out the &lt;a href=&#34;https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/managing-your-personal-access-tokens&#34;&gt;documentation&lt;/a&gt;).&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Usage with VS Code&lt;/h3&gt; &#xA;&lt;p&gt;For quick installation, use one of the one-click install buttons. Once you complete that flow, toggle Agent mode (located by the Copilot Chat text input) and the server will start.&lt;/p&gt; &#xA;&lt;h3&gt;Usage in other MCP Hosts&lt;/h3&gt; &#xA;&lt;p&gt;Add the following JSON block to your IDE MCP settings.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;mcp&#34;: {&#xA;    &#34;inputs&#34;: [&#xA;      {&#xA;        &#34;type&#34;: &#34;promptString&#34;,&#xA;        &#34;id&#34;: &#34;github_token&#34;,&#xA;        &#34;description&#34;: &#34;GitHub Personal Access Token&#34;,&#xA;        &#34;password&#34;: true&#xA;      }&#xA;    ],&#xA;    &#34;servers&#34;: {&#xA;      &#34;github&#34;: {&#xA;        &#34;command&#34;: &#34;docker&#34;,&#xA;        &#34;args&#34;: [&#xA;          &#34;run&#34;,&#xA;          &#34;-i&#34;,&#xA;          &#34;--rm&#34;,&#xA;          &#34;-e&#34;,&#xA;          &#34;GITHUB_PERSONAL_ACCESS_TOKEN&#34;,&#xA;          &#34;ghcr.io/github/github-mcp-server&#34;&#xA;        ],&#xA;        &#34;env&#34;: {&#xA;          &#34;GITHUB_PERSONAL_ACCESS_TOKEN&#34;: &#34;${input:github_token}&#34;&#xA;        }&#xA;      }&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Optionally, you can add a similar example (i.e. without the mcp key) to a file called &lt;code&gt;.vscode/mcp.json&lt;/code&gt; in your workspace. This will allow you to share the configuration with others.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;inputs&#34;: [&#xA;    {&#xA;      &#34;type&#34;: &#34;promptString&#34;,&#xA;      &#34;id&#34;: &#34;github_token&#34;,&#xA;      &#34;description&#34;: &#34;GitHub Personal Access Token&#34;,&#xA;      &#34;password&#34;: true&#xA;    }&#xA;  ],&#xA;  &#34;servers&#34;: {&#xA;    &#34;github&#34;: {&#xA;      &#34;command&#34;: &#34;docker&#34;,&#xA;      &#34;args&#34;: [&#xA;        &#34;run&#34;,&#xA;        &#34;-i&#34;,&#xA;        &#34;--rm&#34;,&#xA;        &#34;-e&#34;,&#xA;        &#34;GITHUB_PERSONAL_ACCESS_TOKEN&#34;,&#xA;        &#34;ghcr.io/github/github-mcp-server&#34;&#xA;      ],&#xA;      &#34;env&#34;: {&#xA;        &#34;GITHUB_PERSONAL_ACCESS_TOKEN&#34;: &#34;${input:github_token}&#34;&#xA;      }&#xA;    }&#xA;  }&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;More about using MCP server tools in VS Code&#39;s &lt;a href=&#34;https://code.visualstudio.com/docs/copilot/chat/mcp-servers&#34;&gt;agent mode documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Usage with Claude Desktop&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;mcpServers&#34;: {&#xA;    &#34;github&#34;: {&#xA;      &#34;command&#34;: &#34;docker&#34;,&#xA;      &#34;args&#34;: [&#xA;        &#34;run&#34;,&#xA;        &#34;-i&#34;,&#xA;        &#34;--rm&#34;,&#xA;        &#34;-e&#34;,&#xA;        &#34;GITHUB_PERSONAL_ACCESS_TOKEN&#34;,&#xA;        &#34;ghcr.io/github/github-mcp-server&#34;&#xA;      ],&#xA;      &#34;env&#34;: {&#xA;        &#34;GITHUB_PERSONAL_ACCESS_TOKEN&#34;: &#34;&amp;lt;YOUR_TOKEN&amp;gt;&#34;&#xA;      }&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Build from source&lt;/h3&gt; &#xA;&lt;p&gt;If you don&#39;t have Docker, you can use &lt;code&gt;go build&lt;/code&gt; to build the binary in the &lt;code&gt;cmd/github-mcp-server&lt;/code&gt; directory, and use the &lt;code&gt;github-mcp-server stdio&lt;/code&gt; command with the &lt;code&gt;GITHUB_PERSONAL_ACCESS_TOKEN&lt;/code&gt; environment variable set to your token. To specify the output location of the build, use the &lt;code&gt;-o&lt;/code&gt; flag. You should configure your server to use the built executable as its &lt;code&gt;command&lt;/code&gt;. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-JSON&#34;&gt;{&#xA;  &#34;mcp&#34;: {&#xA;    &#34;servers&#34;: {&#xA;      &#34;github&#34;: {&#xA;        &#34;command&#34;: &#34;/path/to/github-mcp-server&#34;,&#xA;        &#34;args&#34;: [&#34;stdio&#34;],&#xA;        &#34;env&#34;: {&#xA;          &#34;GITHUB_PERSONAL_ACCESS_TOKEN&#34;: &#34;&amp;lt;YOUR_TOKEN&amp;gt;&#34;&#xA;        }&#xA;      }&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Tool Configuration&lt;/h2&gt; &#xA;&lt;p&gt;The GitHub MCP Server supports enabling or disabling specific groups of functionalities via the &lt;code&gt;--toolsets&lt;/code&gt; flag. This allows you to control which GitHub API capabilities are available to your AI tools. Enabling only the toolsets that you need can help the LLM with tool choice and reduce the context size.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Toolsets are not limited to Tools. Relevant MCP Resources and Prompts are also included where applicable.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Available Toolsets&lt;/h3&gt; &#xA;&lt;p&gt;The following sets of tools are available (all are on by default):&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Toolset&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;actions&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;GitHub Actions workflows and CI/CD operations&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;context&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Strongly recommended&lt;/strong&gt;: Tools that provide context about the current user and GitHub context you are operating in&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;code_security&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Code scanning alerts and security features&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;issues&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Issue-related tools (create, read, update, comment)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;notifications&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;GitHub Notifications related tools&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;pull_requests&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Pull request operations (create, merge, review)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;repos&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Repository-related tools (file operations, branches, commits)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;secret_protection&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Secret protection related tools, such as GitHub Secret Scanning&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;users&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Anything relating to GitHub Users&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;experiments&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Experimental features (not considered stable)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;Specifying Toolsets&lt;/h4&gt; &#xA;&lt;p&gt;To specify toolsets you want available to the LLM, you can pass an allow-list in two ways:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Using Command Line Argument&lt;/strong&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;github-mcp-server --toolsets repos,issues,pull_requests,actions,code_security&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Using Environment Variable&lt;/strong&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;GITHUB_TOOLSETS=&#34;repos,issues,pull_requests,actions,code_security&#34; ./github-mcp-server&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;The environment variable &lt;code&gt;GITHUB_TOOLSETS&lt;/code&gt; takes precedence over the command line argument if both are provided.&lt;/p&gt; &#xA;&lt;h3&gt;Using Toolsets With Docker&lt;/h3&gt; &#xA;&lt;p&gt;When using Docker, you can pass the toolsets as environment variables:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run -i --rm \&#xA;  -e GITHUB_PERSONAL_ACCESS_TOKEN=&amp;lt;your-token&amp;gt; \&#xA;  -e GITHUB_TOOLSETS=&#34;repos,issues,pull_requests,actions,code_security,experiments&#34; \&#xA;  ghcr.io/github/github-mcp-server&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;The &#34;all&#34; Toolset&lt;/h3&gt; &#xA;&lt;p&gt;The special toolset &lt;code&gt;all&lt;/code&gt; can be provided to enable all available toolsets regardless of any other configuration:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./github-mcp-server --toolsets all&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or using the environment variable:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;GITHUB_TOOLSETS=&#34;all&#34; ./github-mcp-server&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Dynamic Tool Discovery&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: This feature is currently in beta and may not be available in all environments. Please test it out and let us know if you encounter any issues.&lt;/p&gt; &#xA;&lt;p&gt;Instead of starting with all tools enabled, you can turn on dynamic toolset discovery. Dynamic toolsets allow the MCP host to list and enable toolsets in response to a user prompt. This should help to avoid situations where the model gets confused by the sheer number of tools available.&lt;/p&gt; &#xA;&lt;h3&gt;Using Dynamic Tool Discovery&lt;/h3&gt; &#xA;&lt;p&gt;When using the binary, you can pass the &lt;code&gt;--dynamic-toolsets&lt;/code&gt; flag.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./github-mcp-server --dynamic-toolsets&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When using Docker, you can pass the toolsets as environment variables:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run -i --rm \&#xA;  -e GITHUB_PERSONAL_ACCESS_TOKEN=&amp;lt;your-token&amp;gt; \&#xA;  -e GITHUB_DYNAMIC_TOOLSETS=1 \&#xA;  ghcr.io/github/github-mcp-server&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Read-Only Mode&lt;/h2&gt; &#xA;&lt;p&gt;To run the server in read-only mode, you can use the &lt;code&gt;--read-only&lt;/code&gt; flag. This will only offer read-only tools, preventing any modifications to repositories, issues, pull requests, etc.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./github-mcp-server --read-only&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When using Docker, you can pass the read-only mode as an environment variable:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run -i --rm \&#xA;  -e GITHUB_PERSONAL_ACCESS_TOKEN=&amp;lt;your-token&amp;gt; \&#xA;  -e GITHUB_READ_ONLY=1 \&#xA;  ghcr.io/github/github-mcp-server&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;GitHub Enterprise Server and Enterprise Cloud with data residency (ghe.com)&lt;/h2&gt; &#xA;&lt;p&gt;The flag &lt;code&gt;--gh-host&lt;/code&gt; and the environment variable &lt;code&gt;GITHUB_HOST&lt;/code&gt; can be used to set the hostname for GitHub Enterprise Server or GitHub Enterprise Cloud with data residency.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;For GitHub Enterprise Server, prefix the hostname with the &lt;code&gt;https://&lt;/code&gt; URI scheme, as it otherwise defaults to &lt;code&gt;http://&lt;/code&gt;, which GitHub Enterprise Server does not support.&lt;/li&gt; &#xA; &lt;li&gt;For GitHub Enterprise Cloud with data residency, use &lt;code&gt;https://YOURSUBDOMAIN.ghe.com&lt;/code&gt; as the hostname.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&#34;github&#34;: {&#xA;    &#34;command&#34;: &#34;docker&#34;,&#xA;    &#34;args&#34;: [&#xA;    &#34;run&#34;,&#xA;    &#34;-i&#34;,&#xA;    &#34;--rm&#34;,&#xA;    &#34;-e&#34;,&#xA;    &#34;GITHUB_PERSONAL_ACCESS_TOKEN&#34;,&#xA;    &#34;-e&#34;,&#xA;    &#34;GITHUB_HOST&#34;,&#xA;    &#34;ghcr.io/github/github-mcp-server&#34;&#xA;    ],&#xA;    &#34;env&#34;: {&#xA;        &#34;GITHUB_PERSONAL_ACCESS_TOKEN&#34;: &#34;${input:github_token}&#34;,&#xA;        &#34;GITHUB_HOST&#34;: &#34;https://&amp;lt;your GHES or ghe.com domain name&amp;gt;&#34;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;i18n / Overriding Descriptions&lt;/h2&gt; &#xA;&lt;p&gt;The descriptions of the tools can be overridden by creating a &lt;code&gt;github-mcp-server-config.json&lt;/code&gt; file in the same directory as the binary.&lt;/p&gt; &#xA;&lt;p&gt;The file should contain a JSON object with the tool names as keys and the new descriptions as values. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;TOOL_ADD_ISSUE_COMMENT_DESCRIPTION&#34;: &#34;an alternative description&#34;,&#xA;  &#34;TOOL_CREATE_BRANCH_DESCRIPTION&#34;: &#34;Create a new branch in a GitHub repository&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can create an export of the current translations by running the binary with the &lt;code&gt;--export-translations&lt;/code&gt; flag.&lt;/p&gt; &#xA;&lt;p&gt;This flag will preserve any translations/overrides you have made, while adding any new translations that have been added to the binary since the last time you exported.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./github-mcp-server --export-translations&#xA;cat github-mcp-server-config.json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also use ENV vars to override the descriptions. The environment variable names are the same as the keys in the JSON file, prefixed with &lt;code&gt;GITHUB_MCP_&lt;/code&gt; and all uppercase.&lt;/p&gt; &#xA;&lt;p&gt;For example, to override the &lt;code&gt;TOOL_ADD_ISSUE_COMMENT_DESCRIPTION&lt;/code&gt; tool, you can set the following environment variable:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;export GITHUB_MCP_TOOL_ADD_ISSUE_COMMENT_DESCRIPTION=&#34;an alternative description&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Tools&lt;/h2&gt; &#xA;&lt;h3&gt;Users&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;get_me&lt;/strong&gt; - Get details of the authenticated user &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;No parameters required&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Issues&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;get_issue&lt;/strong&gt; - Gets the contents of an issue within a repository&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;issue_number&lt;/code&gt;: Issue number (number, required)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;get_issue_comments&lt;/strong&gt; - Get comments for a GitHub issue&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;issue_number&lt;/code&gt;: Issue number (number, required)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;create_issue&lt;/strong&gt; - Create a new issue in a GitHub repository&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;title&lt;/code&gt;: Issue title (string, required)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;body&lt;/code&gt;: Issue body content (string, optional)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;assignees&lt;/code&gt;: Usernames to assign to this issue (string[], optional)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;labels&lt;/code&gt;: Labels to apply to this issue (string[], optional)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;add_issue_comment&lt;/strong&gt; - Add a comment to an issue&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;issue_number&lt;/code&gt;: Issue number (number, required)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;body&lt;/code&gt;: Comment text (string, required)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;list_issues&lt;/strong&gt; - List and filter repository issues&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;state&lt;/code&gt;: Filter by state (&#39;open&#39;, &#39;closed&#39;, &#39;all&#39;) (string, optional)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;labels&lt;/code&gt;: Labels to filter by (string[], optional)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;sort&lt;/code&gt;: Sort by (&#39;created&#39;, &#39;updated&#39;, &#39;comments&#39;) (string, optional)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;direction&lt;/code&gt;: Sort direction (&#39;asc&#39;, &#39;desc&#39;) (string, optional)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;since&lt;/code&gt;: Filter by date (ISO 8601 timestamp) (string, optional)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;page&lt;/code&gt;: Page number (number, optional)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;perPage&lt;/code&gt;: Results per page (number, optional)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;update_issue&lt;/strong&gt; - Update an existing issue in a GitHub repository&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;issue_number&lt;/code&gt;: Issue number to update (number, required)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;title&lt;/code&gt;: New title (string, optional)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;body&lt;/code&gt;: New description (string, optional)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;state&lt;/code&gt;: New state (&#39;open&#39; or &#39;closed&#39;) (string, optional)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;labels&lt;/code&gt;: New labels (string[], optional)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;assignees&lt;/code&gt;: New assignees (string[], optional)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;milestone&lt;/code&gt;: New milestone number (number, optional)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;search_issues&lt;/strong&gt; - Search for issues and pull requests&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;query&lt;/code&gt;: Search query (string, required)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;sort&lt;/code&gt;: Sort field (string, optional)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;order&lt;/code&gt;: Sort order (string, optional)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;page&lt;/code&gt;: Page number (number, optional)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;perPage&lt;/code&gt;: Results per page (number, optional)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;assign_copilot_to_issue&lt;/strong&gt; - Assign Copilot to a specific issue in a GitHub repository&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;issueNumber&lt;/code&gt;: Issue number (number, required)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;em&gt;Note&lt;/em&gt;: This tool can help with creating a Pull Request with source code changes to resolve the issue. More information can be found at &lt;a href=&#34;https://docs.github.com/en/copilot/using-github-copilot/using-copilot-coding-agent-to-work-on-tasks/about-assigning-tasks-to-copilot&#34;&gt;GitHub Copilot documentation&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Pull Requests&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;get_pull_request&lt;/strong&gt; - Get details of a specific pull request&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;pullNumber&lt;/code&gt;: Pull request number (number, required)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;list_pull_requests&lt;/strong&gt; - List and filter repository pull requests&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;state&lt;/code&gt;: PR state (string, optional)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;sort&lt;/code&gt;: Sort field (string, optional)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;direction&lt;/code&gt;: Sort direction (string, optional)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;perPage&lt;/code&gt;: Results per page (number, optional)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;page&lt;/code&gt;: Page number (number, optional)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;merge_pull_request&lt;/strong&gt; - Merge a pull request&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;pullNumber&lt;/code&gt;: Pull request number (number, required)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;commit_title&lt;/code&gt;: Title for the merge commit (string, optional)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;commit_message&lt;/code&gt;: Message for the merge commit (string, optional)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;merge_method&lt;/code&gt;: Merge method (string, optional)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;get_pull_request_files&lt;/strong&gt; - Get the list of files changed in a pull request&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;pullNumber&lt;/code&gt;: Pull request number (number, required)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;get_pull_request_status&lt;/strong&gt; - Get the combined status of all status checks for a pull request&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;pullNumber&lt;/code&gt;: Pull request number (number, required)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;update_pull_request_branch&lt;/strong&gt; - Update a pull request branch with the latest changes from the base branch&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;pullNumber&lt;/code&gt;: Pull request number (number, required)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;expectedHeadSha&lt;/code&gt;: The expected SHA of the pull request&#39;s HEAD ref (string, optional)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;get_pull_request_comments&lt;/strong&gt; - Get the review comments on a pull request&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;pullNumber&lt;/code&gt;: Pull request number (number, required)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;get_pull_request_reviews&lt;/strong&gt; - Get the reviews on a pull request&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;pullNumber&lt;/code&gt;: Pull request number (number, required)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;get_pull_request_diff&lt;/strong&gt; - Get the diff of a pull request&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;pullNumber&lt;/code&gt;: Pull request number (number, required)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;create_pending_pull_request_review&lt;/strong&gt; - Create a pending review for a pull request that can be submitted later&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;pullNumber&lt;/code&gt;: Pull request number (number, required)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;commitID&lt;/code&gt;: SHA of commit to review (string, optional)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;add_pull_request_review_comment_to_pending_review&lt;/strong&gt; - Add a comment to the requester&#39;s latest pending pull request review&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;pullNumber&lt;/code&gt;: Pull request number (number, required)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;path&lt;/code&gt;: The relative path to the file that necessitates a comment (string, required)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;body&lt;/code&gt;: The text of the review comment (string, required)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;subjectType&lt;/code&gt;: The level at which the comment is targeted (string, required) &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Enum: &#34;FILE&#34;, &#34;LINE&#34;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;line&lt;/code&gt;: The line of the blob in the pull request diff that the comment applies to (number, optional)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;side&lt;/code&gt;: The side of the diff to comment on (string, optional) &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Enum: &#34;LEFT&#34;, &#34;RIGHT&#34;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;startLine&lt;/code&gt;: For multi-line comments, the first line of the range (number, optional)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;startSide&lt;/code&gt;: For multi-line comments, the starting side of the diff (string, optional) &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Enum: &#34;LEFT&#34;, &#34;RIGHT&#34;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;submit_pending_pull_request_review&lt;/strong&gt; - Submit the requester&#39;s latest pending pull request review&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;pullNumber&lt;/code&gt;: Pull request number (number, required)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;event&lt;/code&gt;: The event to perform (string, required) &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Enum: &#34;APPROVE&#34;, &#34;REQUEST_CHANGES&#34;, &#34;COMMENT&#34;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;body&lt;/code&gt;: The text of the review comment (string, optional)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;delete_pending_pull_request_review&lt;/strong&gt; - Delete the requester&#39;s latest pending pull request review&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;pullNumber&lt;/code&gt;: Pull request number (number, required)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;create_and_submit_pull_request_review&lt;/strong&gt; - Create and submit a review for a pull request without review comments&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;pullNumber&lt;/code&gt;: Pull request number (number, required)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;body&lt;/code&gt;: Review comment text (string, required)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;event&lt;/code&gt;: Review action (&#39;APPROVE&#39;, &#39;REQUEST_CHANGES&#39;, &#39;COMMENT&#39;) (string, required)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;commitID&lt;/code&gt;: SHA of commit to review (string, optional)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;create_pull_request&lt;/strong&gt; - Create a new pull request&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;title&lt;/code&gt;: PR title (string, required)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;body&lt;/code&gt;: PR description (string, optional)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;head&lt;/code&gt;: Branch containing changes (string, required)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;base&lt;/code&gt;: Branch to merge into (string, required)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;draft&lt;/code&gt;: Create as draft PR (boolean, optional)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;maintainer_can_modify&lt;/code&gt;: Allow maintainer edits (boolean, optional)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;update_pull_request&lt;/strong&gt; - Update an existing pull request in a GitHub repository&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;pullNumber&lt;/code&gt;: Pull request number to update (number, required)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;title&lt;/code&gt;: New title (string, optional)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;body&lt;/code&gt;: New description (string, optional)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;state&lt;/code&gt;: New state (&#39;open&#39; or &#39;closed&#39;) (string, optional)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;base&lt;/code&gt;: New base branch name (string, optional)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;maintainer_can_modify&lt;/code&gt;: Allow maintainer edits (boolean, optional)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;request_copilot_review&lt;/strong&gt; - Request a GitHub Copilot review for a pull request (experimental; subject to GitHub API support)&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;pullNumber&lt;/code&gt;: Pull request number (number, required)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;em&gt;Note&lt;/em&gt;: Currently, this tool will only work for github.com&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Repositories&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;create_or_update_file&lt;/strong&gt; - Create or update a single file in a repository&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;path&lt;/code&gt;: File path (string, required)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;message&lt;/code&gt;: Commit message (string, required)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;content&lt;/code&gt;: File content (string, required)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;branch&lt;/code&gt;: Branch name (string, optional)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;sha&lt;/code&gt;: File SHA if updating (string, optional)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;delete_file&lt;/strong&gt; - Delete a file from a GitHub repository&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;path&lt;/code&gt;: Path to the file to delete (string, required)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;message&lt;/code&gt;: Commit message (string, required)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;branch&lt;/code&gt;: Branch to delete the file from (string, required)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;list_branches&lt;/strong&gt; - List branches in a GitHub repository&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;page&lt;/code&gt;: Page number (number, optional)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;perPage&lt;/code&gt;: Results per page (number, optional)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;push_files&lt;/strong&gt; - Push multiple files in a single commit&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;branch&lt;/code&gt;: Branch to push to (string, required)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;files&lt;/code&gt;: Files to push, each with path and content (array, required)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;message&lt;/code&gt;: Commit message (string, required)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;search_repositories&lt;/strong&gt; - Search for GitHub repositories&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;query&lt;/code&gt;: Search query (string, required)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;sort&lt;/code&gt;: Sort field (string, optional)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;order&lt;/code&gt;: Sort order (string, optional)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;page&lt;/code&gt;: Page number (number, optional)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;perPage&lt;/code&gt;: Results per page (number, optional)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;create_repository&lt;/strong&gt; - Create a new GitHub repository&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;name&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;description&lt;/code&gt;: Repository description (string, optional)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;private&lt;/code&gt;: Whether the repository is private (boolean, optional)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;autoInit&lt;/code&gt;: Auto-initialize with README (boolean, optional)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;get_file_contents&lt;/strong&gt; - Get contents of a file or directory&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;path&lt;/code&gt;: File path (string, required)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;ref&lt;/code&gt;: Git reference (string, optional)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;fork_repository&lt;/strong&gt; - Fork a repository&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;organization&lt;/code&gt;: Target organization name (string, optional)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;create_branch&lt;/strong&gt; - Create a new branch&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;branch&lt;/code&gt;: New branch name (string, required)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;sha&lt;/code&gt;: SHA to create branch from (string, required)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;list_commits&lt;/strong&gt; - Get a list of commits of a branch in a repository&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;sha&lt;/code&gt;: Branch name, tag, or commit SHA (string, optional)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;path&lt;/code&gt;: Only commits containing this file path (string, optional)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;page&lt;/code&gt;: Page number (number, optional)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;perPage&lt;/code&gt;: Results per page (number, optional)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;get_commit&lt;/strong&gt; - Get details for a commit from a repository&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;sha&lt;/code&gt;: Commit SHA, branch name, or tag name (string, required)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;page&lt;/code&gt;: Page number, for files in the commit (number, optional)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;perPage&lt;/code&gt;: Results per page, for files in the commit (number, optional)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;get_tag&lt;/strong&gt; - Get details about a specific git tag in a GitHub repository&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;tag&lt;/code&gt;: Tag name (string, required)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;list_tags&lt;/strong&gt; - List git tags in a GitHub repository&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;page&lt;/code&gt;: Page number (number, optional)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;perPage&lt;/code&gt;: Results per page (number, optional)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;search_code&lt;/strong&gt; - Search for code across GitHub repositories&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;query&lt;/code&gt;: Search query (string, required)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;sort&lt;/code&gt;: Sort field (string, optional)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;order&lt;/code&gt;: Sort order (string, optional)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;page&lt;/code&gt;: Page number (number, optional)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;perPage&lt;/code&gt;: Results per page (number, optional)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Users&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;search_users&lt;/strong&gt; - Search for GitHub users &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;q&lt;/code&gt;: Search query (string, required)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;sort&lt;/code&gt;: Sort field (string, optional)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;order&lt;/code&gt;: Sort order (string, optional)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;page&lt;/code&gt;: Page number (number, optional)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;perPage&lt;/code&gt;: Results per page (number, optional)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Actions&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;list_workflows&lt;/strong&gt; - List workflows in a repository&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;page&lt;/code&gt;: Page number (number, optional)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;perPage&lt;/code&gt;: Results per page (number, optional)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;list_workflow_runs&lt;/strong&gt; - List workflow runs for a specific workflow&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;workflow_id&lt;/code&gt;: Workflow ID or filename (string, required)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;branch&lt;/code&gt;: Filter by branch name (string, optional)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;event&lt;/code&gt;: Filter by event type (string, optional)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;status&lt;/code&gt;: Filter by run status (string, optional)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;page&lt;/code&gt;: Page number (number, optional)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;perPage&lt;/code&gt;: Results per page (number, optional)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;run_workflow&lt;/strong&gt; - Trigger a workflow via workflow_dispatch event&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;workflow_id&lt;/code&gt;: Workflow ID or filename (string, required)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;ref&lt;/code&gt;: Git reference (branch, tag, or SHA) (string, required)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;inputs&lt;/code&gt;: Input parameters for the workflow (object, optional)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;get_workflow_run&lt;/strong&gt; - Get details of a specific workflow run&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;run_id&lt;/code&gt;: Workflow run ID (number, required)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;get_workflow_run_logs&lt;/strong&gt; - Download logs for a workflow run&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;run_id&lt;/code&gt;: Workflow run ID (number, required)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;list_workflow_jobs&lt;/strong&gt; - List jobs for a workflow run&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;run_id&lt;/code&gt;: Workflow run ID (number, required)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;filter&lt;/code&gt;: Filter by job status (string, optional)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;page&lt;/code&gt;: Page number (number, optional)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;perPage&lt;/code&gt;: Results per page (number, optional)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;get_job_logs&lt;/strong&gt; - Download logs for a specific workflow job or efficiently get all failed job logs for a workflow run&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;job_id&lt;/code&gt;: Job ID (number, required for single job logs)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;run_id&lt;/code&gt;: Workflow run ID (number, required when using failed_only)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;failed_only&lt;/code&gt;: When true, gets logs for all failed jobs in run_id (boolean, optional)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;return_content&lt;/code&gt;: Returns actual log content instead of URLs (boolean, optional)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;rerun_workflow_run&lt;/strong&gt; - Re-run an entire workflow&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;run_id&lt;/code&gt;: Workflow run ID (number, required)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;enable_debug_logging&lt;/code&gt;: Enable debug logging for the re-run (boolean, optional)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;rerun_failed_jobs&lt;/strong&gt; - Re-run only the failed jobs in a workflow run&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;run_id&lt;/code&gt;: Workflow run ID (number, required)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;enable_debug_logging&lt;/code&gt;: Enable debug logging for the re-run (boolean, optional)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;cancel_workflow_run&lt;/strong&gt; - Cancel a running workflow&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;run_id&lt;/code&gt;: Workflow run ID (number, required)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;list_workflow_run_artifacts&lt;/strong&gt; - List artifacts from a workflow run&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;run_id&lt;/code&gt;: Workflow run ID (number, required)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;page&lt;/code&gt;: Page number (number, optional)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;perPage&lt;/code&gt;: Results per page (number, optional)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;download_workflow_run_artifact&lt;/strong&gt; - Get download URL for a specific artifact&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;artifact_id&lt;/code&gt;: Artifact ID (number, required)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;delete_workflow_run_logs&lt;/strong&gt; - Delete logs for a workflow run&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;run_id&lt;/code&gt;: Workflow run ID (number, required)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;get_workflow_run_usage&lt;/strong&gt; - Get usage metrics for a workflow run&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;run_id&lt;/code&gt;: Workflow run ID (number, required)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Code Scanning&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;get_code_scanning_alert&lt;/strong&gt; - Get a code scanning alert&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;alertNumber&lt;/code&gt;: Alert number (number, required)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;list_code_scanning_alerts&lt;/strong&gt; - List code scanning alerts for a repository&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;ref&lt;/code&gt;: Git reference (string, optional)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;state&lt;/code&gt;: Alert state (string, optional)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;severity&lt;/code&gt;: Alert severity (string, optional)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;tool_name&lt;/code&gt;: The name of the tool used for code scanning (string, optional)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Secret Scanning&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;get_secret_scanning_alert&lt;/strong&gt; - Get a secret scanning alert&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;alertNumber&lt;/code&gt;: Alert number (number, required)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;list_secret_scanning_alerts&lt;/strong&gt; - List secret scanning alerts for a repository&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;state&lt;/code&gt;: Alert state (string, optional)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;secret_type&lt;/code&gt;: The secret types to be filtered for in a comma-separated list (string, optional)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;resolution&lt;/code&gt;: The resolution status (string, optional)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Notifications&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;list_notifications&lt;/strong&gt; – List notifications for a GitHub user&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;filter&lt;/code&gt;: Filter to apply to the response (&lt;code&gt;default&lt;/code&gt;, &lt;code&gt;include_read_notifications&lt;/code&gt;, &lt;code&gt;only_participating&lt;/code&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;since&lt;/code&gt;: Only show notifications updated after the given time (ISO 8601 format)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;before&lt;/code&gt;: Only show notifications updated before the given time (ISO 8601 format)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Optional repository owner (string)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Optional repository name (string)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;page&lt;/code&gt;: Page number (number, optional)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;perPage&lt;/code&gt;: Results per page (number, optional)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;get_notification_details&lt;/strong&gt; – Get detailed information for a specific GitHub notification&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;notificationID&lt;/code&gt;: The ID of the notification (string, required)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;dismiss_notification&lt;/strong&gt; – Dismiss a notification by marking it as read or done&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;threadID&lt;/code&gt;: The ID of the notification thread (string, required)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;state&lt;/code&gt;: The new state of the notification (&lt;code&gt;read&lt;/code&gt; or &lt;code&gt;done&lt;/code&gt;)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;mark_all_notifications_read&lt;/strong&gt; – Mark all notifications as read&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;lastReadAt&lt;/code&gt;: Describes the last point that notifications were checked (optional, RFC3339/ISO8601 string, default: now)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Optional repository owner (string)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Optional repository name (string)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;manage_notification_subscription&lt;/strong&gt; – Manage a notification subscription (ignore, watch, or delete) for a notification thread&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;notificationID&lt;/code&gt;: The ID of the notification thread (string, required)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;action&lt;/code&gt;: Action to perform: &lt;code&gt;ignore&lt;/code&gt;, &lt;code&gt;watch&lt;/code&gt;, or &lt;code&gt;delete&lt;/code&gt; (string, required)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;manage_repository_notification_subscription&lt;/strong&gt; – Manage a repository notification subscription (ignore, watch, or delete)&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: The account owner of the repository (string, required)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: The name of the repository (string, required)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;action&lt;/code&gt;: Action to perform: &lt;code&gt;ignore&lt;/code&gt;, &lt;code&gt;watch&lt;/code&gt;, or &lt;code&gt;delete&lt;/code&gt; (string, required)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Resources&lt;/h2&gt; &#xA;&lt;h3&gt;Repository Content&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Get Repository Content&lt;/strong&gt; Retrieves the content of a repository at a specific path.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Template&lt;/strong&gt;: &lt;code&gt;repo://{owner}/{repo}/contents{/path*}&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Parameters&lt;/strong&gt;: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;path&lt;/code&gt;: File or directory path (string, optional)&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Get Repository Content for a Specific Branch&lt;/strong&gt; Retrieves the content of a repository at a specific path for a given branch.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Template&lt;/strong&gt;: &lt;code&gt;repo://{owner}/{repo}/refs/heads/{branch}/contents{/path*}&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Parameters&lt;/strong&gt;: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;branch&lt;/code&gt;: Branch name (string, required)&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;path&lt;/code&gt;: File or directory path (string, optional)&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Get Repository Content for a Specific Commit&lt;/strong&gt; Retrieves the content of a repository at a specific path for a given commit.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Template&lt;/strong&gt;: &lt;code&gt;repo://{owner}/{repo}/sha/{sha}/contents{/path*}&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Parameters&lt;/strong&gt;: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;sha&lt;/code&gt;: Commit SHA (string, required)&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;path&lt;/code&gt;: File or directory path (string, optional)&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Get Repository Content for a Specific Tag&lt;/strong&gt; Retrieves the content of a repository at a specific path for a given tag.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Template&lt;/strong&gt;: &lt;code&gt;repo://{owner}/{repo}/refs/tags/{tag}/contents{/path*}&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Parameters&lt;/strong&gt;: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;tag&lt;/code&gt;: Tag name (string, required)&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;path&lt;/code&gt;: File or directory path (string, optional)&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Get Repository Content for a Specific Pull Request&lt;/strong&gt; Retrieves the content of a repository at a specific path for a given pull request.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Template&lt;/strong&gt;: &lt;code&gt;repo://{owner}/{repo}/refs/pull/{prNumber}/head/contents{/path*}&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Parameters&lt;/strong&gt;: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;code&gt;owner&lt;/code&gt;: Repository owner (string, required)&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: Repository name (string, required)&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;prNumber&lt;/code&gt;: Pull request number (string, required)&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;path&lt;/code&gt;: File or directory path (string, optional)&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Library Usage&lt;/h2&gt; &#xA;&lt;p&gt;The exported Go API of this module should currently be considered unstable, and subject to breaking changes. In the future, we may offer stability; please file an issue if there is a use case where this would be valuable.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This project is licensed under the terms of the MIT open source license. Please refer to &lt;a href=&#34;https://raw.githubusercontent.com/github/github-mcp-server/main/LICENSE&#34;&gt;MIT&lt;/a&gt; for the full terms.&lt;/p&gt;</summary>
  </entry>
</feed>