<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-04-20T01:39:42Z</updated>
  <subtitle>Weekly Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>krillinai/KrillinAI</title>
    <updated>2025-04-20T01:39:42Z</updated>
    <id>tag:github.com,2025-04-20:/krillinai/KrillinAI</id>
    <link href="https://github.com/krillinai/KrillinAI" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A video translation and dubbing tool powered by LLMs, offering professional-grade translations and one-click full-process deployment. It can generate content optimized for platforms like YouTube，TikTok, and Shorts. 基于AI大模型的视频翻译和配音工具，专业级翻译，一键部署全流程，可以生成适配抖音，小红书，哔哩哔哩，视频号，TikTok，Youtube Shorts等形态的内容&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/krillinai/KrillinAI/master/docs/images/logo.png&#34; alt=&#34;KrillinAI&#34; height=&#34;90&#34;&gt; &#xA; &lt;h1&gt;AI Audio&amp;amp;Video Translation and Dubbing Tool&lt;/h1&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://trendshift.io/repositories/13360&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://trendshift.io/api/badge/repositories/13360&#34; alt=&#34;krillinai%2FKrillinAI | Trendshift&#34; style=&#34;width: 250px; height: 55px;&#34; width=&#34;250&#34; height=&#34;55&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/krillinai/KrillinAI/master/README.md&#34;&gt;English&lt;/a&gt;｜&lt;a href=&#34;https://raw.githubusercontent.com/krillinai/KrillinAI/master/docs/README_zh.md&#34;&gt;简体中文&lt;/a&gt;｜&lt;a href=&#34;https://raw.githubusercontent.com/krillinai/KrillinAI/master/docs/README_jp.md&#34;&gt;日本語&lt;/a&gt;｜&lt;a href=&#34;https://raw.githubusercontent.com/krillinai/KrillinAI/master/docs/README_kr.md&#34;&gt;한국어&lt;/a&gt;｜&lt;a href=&#34;https://raw.githubusercontent.com/krillinai/KrillinAI/master/docs/README_vi.md&#34;&gt;Tiếng Việt&lt;/a&gt;｜&lt;a href=&#34;https://raw.githubusercontent.com/krillinai/KrillinAI/master/docs/README_fr.md&#34;&gt;Français&lt;/a&gt;｜&lt;a href=&#34;https://raw.githubusercontent.com/krillinai/KrillinAI/master/docs/README_de.md&#34;&gt;Deutsch&lt;/a&gt;｜&lt;a href=&#34;https://raw.githubusercontent.com/krillinai/KrillinAI/master/docs/README_es.md&#34;&gt;Español&lt;/a&gt;｜&lt;a href=&#34;https://raw.githubusercontent.com/krillinai/KrillinAI/master/docs/README_pt.md&#34;&gt;Português&lt;/a&gt;｜&lt;a href=&#34;https://raw.githubusercontent.com/krillinai/KrillinAI/master/docs/README_rus.md&#34;&gt;Русский&lt;/a&gt;｜&lt;a href=&#34;https://raw.githubusercontent.com/krillinai/KrillinAI/master/docs/README_ar.md&#34;&gt;اللغة العربية&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://x.com/KrillinAI&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Twitter-KrillinAI-orange?logo=twitter&#34; alt=&#34;Twitter&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://space.bilibili.com/242124650&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/dynamic/json?label=Bilibili&amp;amp;query=%24.data.follower&amp;amp;suffix=%20followers&amp;amp;url=https%3A%2F%2Fapi.bilibili.com%2Fx%2Frelation%2Fstat%3Fvmid%3D242124650&amp;amp;logo=bilibili&amp;amp;color=00A1D6&amp;amp;labelColor=FE7398&amp;amp;logoColor=FFFFFF&#34; alt=&#34;Bilibili&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://jq.qq.com/?_wv=1027&amp;amp;k=754069680&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/QQ%20%E7%BE%A4-754069680-green?logo=tencent-qq&#34; alt=&#34;QQ 群&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;h3&gt;📢 New Release for Win &amp;amp; Mac Desktop Version – Welcome to Test and Provide Feedback&lt;/h3&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;Krillin AI is an all-in-one solution for effortless video localization and enhancement. This minimalist yet powerful tool handles everything from translation, dubbing to voice cloning，formatting—seamlessly converting videos between landscape and portrait modes for optimal display across all content platforms(YouTube, TikTok, Bilibili, Douyin, WeChat Channel, RedNote, Kuaishou). With its end-to-end workflow, Krillin AI transforms raw footage into polished, platform-ready content in just a few clicks.&lt;/p&gt; &#xA;&lt;h2&gt;Key Features:&lt;/h2&gt; &#xA;&lt;p&gt;🎯 &lt;strong&gt;One-Click Start&lt;/strong&gt; - Launch your workflow instantly,New desktop version available—easier to use!&lt;/p&gt; &#xA;&lt;p&gt;📥 &lt;strong&gt;Video download&lt;/strong&gt; - yt-dlp and local file uploading supported&lt;/p&gt; &#xA;&lt;p&gt;📜 &lt;strong&gt;Precise Subtitles&lt;/strong&gt; - Whisper-powered high-accuracy recognition&lt;/p&gt; &#xA;&lt;p&gt;🧠 &lt;strong&gt;Smart Segmentation&lt;/strong&gt; - LLM-based subtitle chunking &amp;amp; alignment&lt;/p&gt; &#xA;&lt;p&gt;🌍 &lt;strong&gt;Professional Translation&lt;/strong&gt; - Paragraph-level translation for consistency&lt;/p&gt; &#xA;&lt;p&gt;🔄 &lt;strong&gt;Term Replacement&lt;/strong&gt; - One-click domain-specific vocabulary swap&lt;/p&gt; &#xA;&lt;p&gt;🎙️ &lt;strong&gt;Dubbing and Voice Cloning&lt;/strong&gt; - CosyVoice selected or cloning voices&lt;/p&gt; &#xA;&lt;p&gt;🎬 &lt;strong&gt;Video Composition&lt;/strong&gt; - Auto-formatting for horizontal/vertical layouts&lt;/p&gt; &#xA;&lt;h2&gt;Showcase&lt;/h2&gt; &#xA;&lt;p&gt;The following picture demonstrates the effect after the subtitle file, which was generated through a one-click operation after importing a 46-minute local video, was inserted into the track. There was no manual adjustment involved at all. There are no missing or overlapping subtitles, the sentence segmentation is natural, and the translation quality is also quite high. &lt;img src=&#34;https://raw.githubusercontent.com/krillinai/KrillinAI/master/docs/images/alignment.png&#34; alt=&#34;Alignment&#34;&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td width=&#34;33%&#34;&gt; &lt;h3&gt;Subtitle Translation&lt;/h3&gt; &#xA;    &lt;hr&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/user-attachments/assets/bba1ac0a-fe6b-4947-b58d-ba99306d0339&#34;&gt;https://github.com/user-attachments/assets/bba1ac0a-fe6b-4947-b58d-ba99306d0339&lt;/a&gt;&lt;/p&gt; &lt;/td&gt; &#xA;   &lt;td width=&#34;33%&#34;&gt; &lt;h3&gt;Dubbing&lt;/h3&gt; &#xA;    &lt;hr&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/user-attachments/assets/0b32fad3-c3ad-4b6a-abf0-0865f0dd2385&#34;&gt;https://github.com/user-attachments/assets/0b32fad3-c3ad-4b6a-abf0-0865f0dd2385&lt;/a&gt;&lt;/p&gt; &lt;/td&gt; &#xA;   &lt;td width=&#34;33%&#34;&gt; &lt;h3&gt;Portrait&lt;/h3&gt; &#xA;    &lt;hr&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/user-attachments/assets/c2c7b528-0ef8-4ba9-b8ac-f9f92f6d4e71&#34;&gt;https://github.com/user-attachments/assets/c2c7b528-0ef8-4ba9-b8ac-f9f92f6d4e71&lt;/a&gt;&lt;/p&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;h2&gt;🔍 Speech Recognition Support&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;All local models in the table below support automatic installation of executable files + model files. Just make your selection, and KrillinAI will handle everything else for you.&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Service&lt;/th&gt; &#xA;   &lt;th&gt;Supported Platforms&lt;/th&gt; &#xA;   &lt;th&gt;Model Options&lt;/th&gt; &#xA;   &lt;th&gt;Local/Cloud&lt;/th&gt; &#xA;   &lt;th&gt;Notes&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;OpenAI Whisper&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Cross-platform&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;Cloud&lt;/td&gt; &#xA;   &lt;td&gt;Fast with excellent results&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;FasterWhisper&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Windows/Linux&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;tiny&lt;/code&gt;/&lt;code&gt;medium&lt;/code&gt;/&lt;code&gt;large-v2&lt;/code&gt; (recommend medium+)&lt;/td&gt; &#xA;   &lt;td&gt;Local&lt;/td&gt; &#xA;   &lt;td&gt;Faster speed, no cloud service overhead&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;WhisperKit&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;macOS (Apple Silicon only)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;large-v2&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Local&lt;/td&gt; &#xA;   &lt;td&gt;Native optimization for Apple chips&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Alibaba Cloud ASR&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Cross-platform&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;Cloud&lt;/td&gt; &#xA;   &lt;td&gt;Bypasses China mainland network issues&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;🚀 Large Language Model Support&lt;/h2&gt; &#xA;&lt;p&gt;✅ Compatible with all &lt;strong&gt;OpenAI API-compatible&lt;/strong&gt; cloud/local LLM services including but not limited to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;OpenAI&lt;/li&gt; &#xA; &lt;li&gt;DeepSeek&lt;/li&gt; &#xA; &lt;li&gt;Qwen (Tongyi Qianwen)&lt;/li&gt; &#xA; &lt;li&gt;Self-hosted open-source models&lt;/li&gt; &#xA; &lt;li&gt;Other OpenAI-format compatible API services&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;🌍 Language Support&lt;/h2&gt; &#xA;&lt;p&gt;Input language support: Chinese, English, Japanese, German, Turkish, Korean, Russian, Malay (continuously expanding)&lt;/p&gt; &#xA;&lt;p&gt;Translation languages: 101 languages supported, including English, Chinese, Russian, Spanish, French, etc.&lt;/p&gt; &#xA;&lt;h2&gt;Interface Preview&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/krillinai/KrillinAI/master/docs/images/ui_desktop.png&#34; alt=&#34;ui preview&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;🚀 Quick Start&lt;/h2&gt; &#xA;&lt;h3&gt;Basic Steps&lt;/h3&gt; &#xA;&lt;p&gt;First, download the Release executable file that matches your device&#39;s system. Follow the instructions below to choose between the desktop or non-desktop version, then place the software in an empty folder. Running the program will generate some directories, so keeping it in an empty folder makes management easier.&lt;/p&gt; &#xA;&lt;p&gt;[For the desktop version (release files with &#34;desktop&#34; in the name), refer here]&lt;br&gt; &lt;em&gt;The desktop version is newly released to address the difficulty beginners face in editing configuration files correctly. It still has some bugs and is being continuously updated.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Double-click the file to start using it. (The desktop version also requires configuration, which is done within the software.)&lt;/p&gt; &#xA;&lt;p&gt;[For the non-desktop version (release files without &#34;desktop&#34; in the name), refer here]&lt;br&gt; &lt;em&gt;The non-desktop version is the original release, with more complex configuration but stable functionality. It is also suitable for server deployment, as it provides a web-based UI.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Create a &lt;code&gt;config&lt;/code&gt; folder in the directory, then create a &lt;code&gt;config.toml&lt;/code&gt; file inside it. Copy the contents of the &lt;code&gt;config-example.toml&lt;/code&gt; file from the source code&#39;s &lt;code&gt;config&lt;/code&gt; directory into your &lt;code&gt;config.toml&lt;/code&gt; and fill in your configuration details.&lt;/p&gt; &#xA;&lt;p&gt;Double-click the executable or run it in the terminal to start the service.&lt;/p&gt; &#xA;&lt;p&gt;Open your browser and enter &lt;a href=&#34;http://127.0.0.1:8888&#34;&gt;http://127.0.0.1:8888&lt;/a&gt; to begin using it. (Replace 8888 with the port number you specified in the config file.)&lt;/p&gt; &#xA;&lt;h3&gt;To: macOS Users&lt;/h3&gt; &#xA;&lt;p&gt;[For the desktop version, i.e., release files with &#34;desktop&#34; in the name, refer here]&lt;br&gt; The current packaging method for the desktop version cannot support direct double-click execution or DMG installation due to signing issues. Manual trust configuration is required as follows:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Open the directory containing the executable file (assuming the filename is KrillinAI_1.0.0_desktop_macOS_arm64) in Terminal&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Execute the following commands sequentially:&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo xattr -cr ./KrillinAI_1.0.0_desktop_macOS_arm64  &#xA;sudo chmod +x ./KrillinAI_1.0.0_desktop_macOS_arm64  &#xA;./KrillinAI_1.0.0_desktop_macOS_arm64  &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;[For the non-desktop version, i.e., release files without &#34;desktop&#34; in the name, refer here]&lt;br&gt; This software is not signed, so after completing the file configuration in the &#34;Basic Steps,&#34; you will need to manually trust the application on macOS. Follow these steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Open the terminal and navigate to the directory where the executable file (assuming the file name is &lt;code&gt;KrillinAI_1.0.0_macOS_arm64&lt;/code&gt;) is located.&lt;/li&gt; &#xA; &lt;li&gt;Execute the following commands in sequence:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo xattr -rd com.apple.quarantine ./KrillinAI_1.0.0_macOS_arm64&#xA;sudo chmod +x ./KrillinAI_1.0.0_macOS_arm64&#xA;./KrillinAI_1.0.0_macOS_arm64&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will start the service.&lt;/p&gt; &#xA;&lt;h3&gt;Docker Deployment&lt;/h3&gt; &#xA;&lt;p&gt;This project supports Docker deployment. Please refer to the &lt;a href=&#34;https://raw.githubusercontent.com/krillinai/KrillinAI/master/docs/docker.md&#34;&gt;Docker Deployment Instructions&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Cookie Configuration Instructions&lt;/h3&gt; &#xA;&lt;p&gt;If you encounter video download failures, please refer to the &lt;a href=&#34;https://raw.githubusercontent.com/krillinai/KrillinAI/master/docs/get_cookies.md&#34;&gt;Cookie Configuration Instructions&lt;/a&gt; to configure your cookie information.&lt;/p&gt; &#xA;&lt;h3&gt;Configuration Help&lt;/h3&gt; &#xA;&lt;p&gt;The quickest and most convenient configuration method:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Select &lt;code&gt;openai&lt;/code&gt; for both &lt;code&gt;transcription_provider&lt;/code&gt; and &lt;code&gt;llm_provider&lt;/code&gt;. In this way, you only need to fill in &lt;code&gt;openai.apikey&lt;/code&gt; in the following three major configuration item categories, namely &lt;code&gt;openai&lt;/code&gt;, &lt;code&gt;local_model&lt;/code&gt;, and &lt;code&gt;aliyun&lt;/code&gt;, and then you can conduct subtitle translation. (Fill in &lt;code&gt;app.proxy&lt;/code&gt;, &lt;code&gt;model&lt;/code&gt; and &lt;code&gt;openai.base_url&lt;/code&gt; as per your own situation.)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The configuration method for using the local speech recognition model (macOS is not supported for the time being) (a choice that takes into account cost, speed, and quality):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fill in &lt;code&gt;fasterwhisper&lt;/code&gt; for &lt;code&gt;transcription_provider&lt;/code&gt; and &lt;code&gt;openai&lt;/code&gt; for &lt;code&gt;llm_provider&lt;/code&gt;. In this way, you only need to fill in &lt;code&gt;openai.apikey&lt;/code&gt; and &lt;code&gt;local_model.faster_whisper&lt;/code&gt; in the following three major configuration item categories, namely &lt;code&gt;openai&lt;/code&gt; and &lt;code&gt;local_model&lt;/code&gt;, and then you can conduct subtitle translation. The local model will be downloaded automatically. (The same applies to &lt;code&gt;app.proxy&lt;/code&gt; and &lt;code&gt;openai.base_url&lt;/code&gt; as mentioned above.)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The following usage situations require the configuration of Alibaba Cloud:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If &lt;code&gt;llm_provider&lt;/code&gt; is filled with &lt;code&gt;aliyun&lt;/code&gt;, it indicates that the large model service of Alibaba Cloud will be used. Consequently, the configuration of the &lt;code&gt;aliyun.bailian&lt;/code&gt; item needs to be set up.&lt;/li&gt; &#xA; &lt;li&gt;If &lt;code&gt;transcription_provider&lt;/code&gt; is filled with &lt;code&gt;aliyun&lt;/code&gt;, or if the &#34;voice dubbing&#34; function is enabled when starting a task, the voice service of Alibaba Cloud will be utilized. Therefore, the configuration of the &lt;code&gt;aliyun.speech&lt;/code&gt; item needs to be filled in.&lt;/li&gt; &#xA; &lt;li&gt;If the &#34;voice dubbing&#34; function is enabled and local audio files are uploaded for voice timbre cloning at the same time, the OSS cloud storage service of Alibaba Cloud will also be used. Hence, the configuration of the &lt;code&gt;aliyun.oss&lt;/code&gt; item needs to be filled in. Configuration Guide: &lt;a href=&#34;https://raw.githubusercontent.com/krillinai/KrillinAI/master/docs/aliyun.md&#34;&gt;Alibaba Cloud Configuration Instructions&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Frequently Asked Questions&lt;/h2&gt; &#xA;&lt;p&gt;Please refer to &lt;a href=&#34;https://raw.githubusercontent.com/krillinai/KrillinAI/master/docs/faq.md&#34;&gt;Frequently Asked Questions&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contribution Guidelines&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Do not submit unnecessary files like &lt;code&gt;.vscode&lt;/code&gt;, &lt;code&gt;.idea&lt;/code&gt;, etc. Please make good use of &lt;code&gt;.gitignore&lt;/code&gt; to filter them.&lt;/li&gt; &#xA; &lt;li&gt;Do not submit &lt;code&gt;config.toml&lt;/code&gt;; instead, submit &lt;code&gt;config-example.toml&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Star History&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://star-history.com/#krillinai/KrillinAI&amp;amp;Date&#34;&gt;&lt;img src=&#34;https://api.star-history.com/svg?repos=krillinai/KrillinAI&amp;amp;type=Date&#34; alt=&#34;Star History Chart&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>vektra/mockery</title>
    <updated>2025-04-20T01:39:42Z</updated>
    <id>tag:github.com,2025-04-20:/vektra/mockery</id>
    <link href="https://github.com/vektra/mockery" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A mock code autogenerator for Go&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;mockery&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/vektra/mockery/v3/template&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/go.dev-reference-007d9c?logo=go&amp;amp;logoColor=white&amp;amp;style=flat-square&#34; alt=&#34;go.dev reference&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/go-mod/go-version/vektra/mockery&#34; alt=&#34;GitHub go.mod Go version&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/v/release/vektra/mockery&#34; alt=&#34;GitHub release (latest SemVer)&#34;&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/vektra/mockery&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/vektra/mockery&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/vektra/mockery&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/vektra/mockery/branch/master/graph/badge.svg?sanitize=true&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;mockery provides the ability to easily generate mocks for Golang interfaces using the &lt;a href=&#34;https://pkg.go.dev/github.com/stretchr/testify/mock?tab=doc&#34;&gt;stretchr/testify/mock&lt;/a&gt; package. It removes the boilerplate coding required to use mocks.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Documentation is found at our &lt;a href=&#34;https://vektra.github.io/mockery/&#34;&gt;GitHub Pages site&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;p&gt;taskfile.dev is used for build tasks. Initialize all go build tools:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;go mod download -x&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can run any of the steps listed in &lt;code&gt;Taskfile.yml&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ task test&#xA;task: [test] go test -v -coverprofile=coverage.txt ./...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Stargazers&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://starchart.cc/vektra/mockery&#34;&gt;&lt;img src=&#34;https://starchart.cc/vektra/mockery.svg?sanitize=true&#34; alt=&#34;Stargazers over time&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>projectdiscovery/httpx</title>
    <updated>2025-04-20T01:39:42Z</updated>
    <id>tag:github.com,2025-04-20:/projectdiscovery/httpx</id>
    <link href="https://github.com/projectdiscovery/httpx" rel="alternate"></link>
    <summary type="html">&lt;p&gt;httpx is a fast and multi-purpose HTTP toolkit that allows running multiple probes using the retryablehttp library.&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/projectdiscovery/httpx/main/static/httpx-logo.png&#34; alt=&#34;httpx&#34; width=&#34;200px&#34;&gt; &lt;br&gt; &lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-MIT-_red.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/badge/github.com/projectdiscovery/httpx&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/projectdiscovery/httpx&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/projectdiscovery/httpx/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/projectdiscovery/httpx&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/projectdiscovery/httpx&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/pulls/projectdiscovery/httpx.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/pdiscoveryio&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/follow/pdiscoveryio.svg?logo=twitter&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/projectdiscovery&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/695645237418131507.svg?logo=discord&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://raw.githubusercontent.com/projectdiscovery/httpx/main/#features&#34;&gt;Features&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/projectdiscovery/httpx/main/#installation-instructions&#34;&gt;Installation&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/projectdiscovery/httpx/main/#usage&#34;&gt;Usage&lt;/a&gt; • &lt;a href=&#34;https://docs.projectdiscovery.io/tools/httpx/&#34;&gt;Documentation&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/projectdiscovery/httpx/main/#notes&#34;&gt;Notes&lt;/a&gt; • &lt;a href=&#34;https://discord.gg/projectdiscovery&#34;&gt;Join Discord&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;httpx&lt;/code&gt; is a fast and multi-purpose HTTP toolkit that allows running multiple probes using the &lt;a href=&#34;https://github.com/projectdiscovery/retryablehttp-go&#34;&gt;retryablehttp&lt;/a&gt; library. It is designed to maintain result reliability with an increased number of threads.&lt;/p&gt; &#xA;&lt;h1&gt;Features&lt;/h1&gt; &#xA;&lt;h1 align=&#34;center&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/8293321/135731750-4c1d38b1-bd2a-40f9-88e9-3c4b9f6da378.png&#34; alt=&#34;httpx&#34; width=&#34;700px&#34;&gt; &lt;br&gt; &lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Simple and modular code base making it easy to contribute.&lt;/li&gt; &#xA; &lt;li&gt;Fast And fully configurable flags to probe multiple elements.&lt;/li&gt; &#xA; &lt;li&gt;Supports multiple HTTP based probings.&lt;/li&gt; &#xA; &lt;li&gt;Smart auto fallback from https to http as default.&lt;/li&gt; &#xA; &lt;li&gt;Supports hosts, URLs and CIDR as input.&lt;/li&gt; &#xA; &lt;li&gt;Handles edge cases doing retries, backoffs etc for handling WAFs.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Supported probes&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Probes&lt;/th&gt; &#xA;   &lt;th&gt;Default check&lt;/th&gt; &#xA;   &lt;th&gt;Probes&lt;/th&gt; &#xA;   &lt;th&gt;Default check&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;URL&lt;/td&gt; &#xA;   &lt;td&gt;true&lt;/td&gt; &#xA;   &lt;td&gt;IP&lt;/td&gt; &#xA;   &lt;td&gt;true&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Title&lt;/td&gt; &#xA;   &lt;td&gt;true&lt;/td&gt; &#xA;   &lt;td&gt;CNAME&lt;/td&gt; &#xA;   &lt;td&gt;true&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Status Code&lt;/td&gt; &#xA;   &lt;td&gt;true&lt;/td&gt; &#xA;   &lt;td&gt;Raw HTTP&lt;/td&gt; &#xA;   &lt;td&gt;false&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Content Length&lt;/td&gt; &#xA;   &lt;td&gt;true&lt;/td&gt; &#xA;   &lt;td&gt;HTTP2&lt;/td&gt; &#xA;   &lt;td&gt;false&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;TLS Certificate&lt;/td&gt; &#xA;   &lt;td&gt;true&lt;/td&gt; &#xA;   &lt;td&gt;HTTP Pipeline&lt;/td&gt; &#xA;   &lt;td&gt;false&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;CSP Header&lt;/td&gt; &#xA;   &lt;td&gt;true&lt;/td&gt; &#xA;   &lt;td&gt;Virtual host&lt;/td&gt; &#xA;   &lt;td&gt;false&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Line Count&lt;/td&gt; &#xA;   &lt;td&gt;true&lt;/td&gt; &#xA;   &lt;td&gt;Word Count&lt;/td&gt; &#xA;   &lt;td&gt;true&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Location Header&lt;/td&gt; &#xA;   &lt;td&gt;true&lt;/td&gt; &#xA;   &lt;td&gt;CDN&lt;/td&gt; &#xA;   &lt;td&gt;false&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Web Server&lt;/td&gt; &#xA;   &lt;td&gt;true&lt;/td&gt; &#xA;   &lt;td&gt;Paths&lt;/td&gt; &#xA;   &lt;td&gt;false&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Web Socket&lt;/td&gt; &#xA;   &lt;td&gt;true&lt;/td&gt; &#xA;   &lt;td&gt;Ports&lt;/td&gt; &#xA;   &lt;td&gt;false&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Response Time&lt;/td&gt; &#xA;   &lt;td&gt;true&lt;/td&gt; &#xA;   &lt;td&gt;Request Method&lt;/td&gt; &#xA;   &lt;td&gt;true&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Favicon Hash&lt;/td&gt; &#xA;   &lt;td&gt;false&lt;/td&gt; &#xA;   &lt;td&gt;Probe Status&lt;/td&gt; &#xA;   &lt;td&gt;false&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Body Hash&lt;/td&gt; &#xA;   &lt;td&gt;true&lt;/td&gt; &#xA;   &lt;td&gt;Header Hash&lt;/td&gt; &#xA;   &lt;td&gt;true&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Redirect chain&lt;/td&gt; &#xA;   &lt;td&gt;false&lt;/td&gt; &#xA;   &lt;td&gt;URL Scheme&lt;/td&gt; &#xA;   &lt;td&gt;true&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;JARM Hash&lt;/td&gt; &#xA;   &lt;td&gt;false&lt;/td&gt; &#xA;   &lt;td&gt;ASN&lt;/td&gt; &#xA;   &lt;td&gt;false&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h1&gt;Installation Instructions&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;httpx&lt;/code&gt; requires &lt;strong&gt;go1.21&lt;/strong&gt; to install successfully. Run the following command to get the repo:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;go install -v github.com/projectdiscovery/httpx/cmd/httpx@latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To learn more about installing httpx, see &lt;a href=&#34;https://docs.projectdiscovery.io/tools/httpx/install&#34;&gt;https://docs.projectdiscovery.io/tools/httpx/install&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;span&gt;❗&lt;/span&gt; &lt;strong&gt;Disclaimer&lt;/strong&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;This project is in active development&lt;/strong&gt;. Expect breaking changes with releases. Review the changelog before updating.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;This project was primarily built to be used as a standalone CLI tool. &lt;strong&gt;Running it as a service may pose security risks.&lt;/strong&gt; It&#39;s recommended to use with caution and additional security measures.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h1&gt;Usage&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;httpx -h&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will display help for the tool. Here are all the switches it supports.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;Usage:&#xA;  ./httpx [flags]&#xA;&#xA;Flags:&#xA;httpx is a fast and multi-purpose HTTP toolkit that allows running multiple probes using the retryablehttp library.&#xA;&#xA;Usage:&#xA;  ./httpx [flags]&#xA;&#xA;Flags:&#xA;INPUT:&#xA;   -l, -list string      input file containing list of hosts to process&#xA;   -rr, -request string  file containing raw request&#xA;   -u, -target string[]  input target host(s) to probe&#xA;&#xA;PROBES:&#xA;   -sc, -status-code      display response status-code&#xA;   -cl, -content-length   display response content-length&#xA;   -ct, -content-type     display response content-type&#xA;   -location              display response redirect location&#xA;   -favicon               display mmh3 hash for &#39;/favicon.ico&#39; file&#xA;   -hash string           display response body hash (supported: md5,mmh3,simhash,sha1,sha256,sha512)&#xA;   -jarm                  display jarm fingerprint hash&#xA;   -rt, -response-time    display response time&#xA;   -lc, -line-count       display response body line count&#xA;   -wc, -word-count       display response body word count&#xA;   -title                 display page title&#xA;   -bp, -body-preview     display first N characters of response body (default 100)&#xA;   -server, -web-server   display server name&#xA;   -td, -tech-detect      display technology in use based on wappalyzer dataset&#xA;   -method                display http request method&#xA;   -websocket             display server using websocket&#xA;   -ip                    display host ip&#xA;   -cname                 display host cname&#xA;   -extract-fqdn, -efqdn  get domain and subdomains from response body and header in jsonl/csv output&#xA;   -asn                   display host asn information&#xA;   -cdn                   display cdn/waf in use (default true)&#xA;   -probe                 display probe status&#xA;&#xA;HEADLESS:&#xA;   -ss, -screenshot                 enable saving screenshot of the page using headless browser&#xA;   -system-chrome                   enable using local installed chrome for screenshot&#xA;   -ho, -headless-options string[]  start headless chrome with additional options&#xA;   -esb, -exclude-screenshot-bytes  enable excluding screenshot bytes from json output&#xA;   -ehb, -exclude-headless-body     enable excluding headless header from json output&#xA;   -st, -screenshot-timeout value   set timeout for screenshot in seconds (default 10s)&#xA;   -sid, -screenshot-idle value     set idle time before taking screenshot in seconds (default 1s)&#xA;&#xA;MATCHERS:&#xA;   -mc, -match-code string            match response with specified status code (-mc 200,302)&#xA;   -ml, -match-length string          match response with specified content length (-ml 100,102)&#xA;   -mlc, -match-line-count string     match response body with specified line count (-mlc 423,532)&#xA;   -mwc, -match-word-count string     match response body with specified word count (-mwc 43,55)&#xA;   -mfc, -match-favicon string[]      match response with specified favicon hash (-mfc 1494302000)&#xA;   -ms, -match-string string[]        match response with specified string (-ms admin)&#xA;   -mr, -match-regex string[]         match response with specified regex (-mr admin)&#xA;   -mcdn, -match-cdn string[]         match host with specified cdn provider (cloudfront, fastly, google)&#xA;   -mrt, -match-response-time string  match response with specified response time in seconds (-mrt &#39;&amp;lt; 1&#39;)&#xA;   -mdc, -match-condition string      match response with dsl expression condition&#xA;&#xA;EXTRACTOR:&#xA;   -er, -extract-regex string[]   display response content with matched regex&#xA;   -ep, -extract-preset string[]  display response content matched by a pre-defined regex (url,ipv4,mail)&#xA;&#xA;FILTERS:&#xA;   -fc, -filter-code string            filter response with specified status code (-fc 403,401)&#xA;   -fep, -filter-error-page            filter response with ML based error page detection&#xA;   -fd, -filter-duplicates             filter out near-duplicate responses (only first response is retained)&#xA;   -fl, -filter-length string          filter response with specified content length (-fl 23,33)&#xA;   -flc, -filter-line-count string     filter response body with specified line count (-flc 423,532)&#xA;   -fwc, -filter-word-count string     filter response body with specified word count (-fwc 423,532)&#xA;   -ffc, -filter-favicon string[]      filter response with specified favicon hash (-ffc 1494302000)&#xA;   -fs, -filter-string string[]        filter response with specified string (-fs admin)&#xA;   -fe, -filter-regex string[]         filter response with specified regex (-fe admin)&#xA;   -fcdn, -filter-cdn string[]         filter host with specified cdn provider (cloudfront, fastly, google)&#xA;   -frt, -filter-response-time string  filter response with specified response time in seconds (-frt &#39;&amp;gt; 1&#39;)&#xA;   -fdc, -filter-condition string      filter response with dsl expression condition&#xA;   -strip                              strips all tags in response. supported formats: html,xml (default html)&#xA;&#xA;RATE-LIMIT:&#xA;   -t, -threads int              number of threads to use (default 50)&#xA;   -rl, -rate-limit int          maximum requests to send per second (default 150)&#xA;   -rlm, -rate-limit-minute int  maximum number of requests to send per minute&#xA;&#xA;MISCELLANEOUS:&#xA;   -pa, -probe-all-ips        probe all the ips associated with same host&#xA;   -p, -ports string[]        ports to probe (nmap syntax: eg http:1,2-10,11,https:80)&#xA;   -path string               path or list of paths to probe (comma-separated, file)&#xA;   -tls-probe                 send http probes on the extracted TLS domains (dns_name)&#xA;   -csp-probe                 send http probes on the extracted CSP domains&#xA;   -tls-grab                  perform TLS(SSL) data grabbing&#xA;   -pipeline                  probe and display server supporting HTTP1.1 pipeline&#xA;   -http2                     probe and display server supporting HTTP2&#xA;   -vhost                     probe and display server supporting VHOST&#xA;   -ldv, -list-dsl-variables  list json output field keys name that support dsl matcher/filter&#xA;&#xA;UPDATE:&#xA;   -up, -update                 update httpx to latest version&#xA;   -duc, -disable-update-check  disable automatic httpx update check&#xA;&#xA;OUTPUT:&#xA;   -o, -output string                     file to write output results&#xA;   -oa, -output-all                       filename to write output results in all formats&#xA;   -sr, -store-response                   store http response to output directory&#xA;   -srd, -store-response-dir string       store http response to custom directory&#xA;   -ob, -omit-body                        omit response body in output&#xA;   -csv                                   store output in csv format&#xA;   -csvo, -csv-output-encoding string     define output encoding&#xA;   -j, -json                              store output in JSONL(ines) format&#xA;   -irh, -include-response-header         include http response (headers) in JSON output (-json only)&#xA;   -irr, -include-response                include http request/response (headers + body) in JSON output (-json only)&#xA;   -irrb, -include-response-base64        include base64 encoded http request/response in JSON output (-json only)&#xA;   -include-chain                         include redirect http chain in JSON output (-json only)&#xA;   -store-chain                           include http redirect chain in responses (-sr only)&#xA;   -svrc, -store-vision-recon-cluster     include visual recon clusters (-ss and -sr only)&#xA;   -pr, -protocol string                  protocol to use (unknown, http11)&#xA;   -fepp, -filter-error-page-path string  path to store filtered error pages (default &#34;filtered_error_page.json&#34;)&#xA;&#xA;CONFIGURATIONS:&#xA;   -config string                   path to the httpx configuration file (default $HOME/.config/httpx/config.yaml)&#xA;   -r, -resolvers string[]          list of custom resolver (file or comma separated)&#xA;   -allow string[]                  allowed list of IP/CIDR&#39;s to process (file or comma separated)&#xA;   -deny string[]                   denied list of IP/CIDR&#39;s to process (file or comma separated)&#xA;   -sni, -sni-name string           custom TLS SNI name&#xA;   -random-agent                    enable Random User-Agent to use (default true)&#xA;   -H, -header string[]             custom http headers to send with request&#xA;   -http-proxy, -proxy string       http proxy to use (eg http://127.0.0.1:8080)&#xA;   -unsafe                          send raw requests skipping golang normalization&#xA;   -resume                          resume scan using resume.cfg&#xA;   -fr, -follow-redirects           follow http redirects&#xA;   -maxr, -max-redirects int        max number of redirects to follow per host (default 10)&#xA;   -fhr, -follow-host-redirects     follow redirects on the same host&#xA;   -rhsts, -respect-hsts            respect HSTS response headers for redirect requests&#xA;   -vhost-input                     get a list of vhosts as input&#xA;   -x string                        request methods to probe, use &#39;all&#39; to probe all HTTP methods&#xA;   -body string                     post body to include in http request&#xA;   -s, -stream                      stream mode - start elaborating input targets without sorting&#xA;   -sd, -skip-dedupe                disable dedupe input items (only used with stream mode)&#xA;   -ldp, -leave-default-ports       leave default http/https ports in host header (eg. http://host:80 - https://host:443&#xA;   -ztls                            use ztls library with autofallback to standard one for tls13&#xA;   -no-decode                       avoid decoding body&#xA;   -tlsi, -tls-impersonate          enable experimental client hello (ja3) tls randomization&#xA;   -no-stdin                        Disable Stdin processing&#xA;   -hae, -http-api-endpoint string  experimental http api endpoint&#xA;&#xA;DEBUG:&#xA;   -health-check, -hc        run diagnostic check up&#xA;   -debug                    display request/response content in cli&#xA;   -debug-req                display request content in cli&#xA;   -debug-resp               display response content in cli&#xA;   -version                  display httpx version&#xA;   -stats                    display scan statistic&#xA;   -profile-mem string       optional httpx memory profile dump file&#xA;   -silent                   silent mode&#xA;   -v, -verbose              verbose mode&#xA;   -si, -stats-interval int  number of seconds to wait between showing a statistics update (default: 5)&#xA;   -nc, -no-color            disable colors in cli output&#xA;   -tr, -trace               trace&#xA;&#xA;OPTIMIZATIONS:&#xA;   -nf, -no-fallback                  display both probed protocol (HTTPS and HTTP)&#xA;   -nfs, -no-fallback-scheme          probe with protocol scheme specified in input &#xA;   -maxhr, -max-host-error int        max error count per host before skipping remaining path/s (default 30)&#xA;   -e, -exclude string[]              exclude host matching specified filter (&#39;cdn&#39;, &#39;private-ips&#39;, cidr, ip, regex)&#xA;   -retries int                       number of retries&#xA;   -timeout int                       timeout in seconds (default 10)&#xA;   -delay value                       duration between each http request (eg: 200ms, 1s) (default -1ns)&#xA;   -rsts, -response-size-to-save int  max response size to save in bytes (default 2147483647)&#xA;   -rstr, -response-size-to-read int  max response size to read in bytes (default 2147483647)&#xA;&#xA;CLOUD:&#xA;   -auth                           configure projectdiscovery cloud (pdcp) api key (default true)&#xA;   -ac, -auth-config string        configure projectdiscovery cloud (pdcp) api key credential file&#xA;   -pd, -dashboard                 upload / view output in projectdiscovery cloud (pdcp) UI dashboard&#xA;   -tid, -team-id string           upload asset results to given team id (optional)&#xA;   -aid, -asset-id string          upload new assets to existing asset id (optional)&#xA;   -aname, -asset-name string      assets group name to set (optional)&#xA;   -pdu, -dashboard-upload string  upload httpx output file (jsonl) in projectdiscovery cloud (pdcp) UI dashboard&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Running httpx&lt;/h1&gt; &#xA;&lt;p&gt;For details about running httpx, see &lt;a href=&#34;https://docs.projectdiscovery.io/tools/httpx/running&#34;&gt;https://docs.projectdiscovery.io/tools/httpx/running&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Using &lt;code&gt;httpx&lt;/code&gt; as a library&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;httpx&lt;/code&gt; can be used as a library by creating an instance of the &lt;code&gt;Option&lt;/code&gt; struct and populating it with the same options that would be specified via CLI. Once validated, the struct should be passed to a runner instance (to be closed at the end of the program) and the &lt;code&gt;RunEnumeration&lt;/code&gt; method should be called. A minimal example of how to do it is in the &lt;a href=&#34;https://raw.githubusercontent.com/projectdiscovery/httpx/main/examples/&#34;&gt;examples&lt;/a&gt; folder&lt;/p&gt; &#xA;&lt;h1&gt;Notes&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;As default, &lt;code&gt;httpx&lt;/code&gt; probe with &lt;strong&gt;HTTPS&lt;/strong&gt; scheme and fall-back to &lt;strong&gt;HTTP&lt;/strong&gt; only if &lt;strong&gt;HTTPS&lt;/strong&gt; is not reachable.&lt;/li&gt; &#xA; &lt;li&gt;The &lt;code&gt;-no-fallback&lt;/code&gt; flag can be used to probe and display both &lt;strong&gt;HTTP&lt;/strong&gt; and &lt;strong&gt;HTTPS&lt;/strong&gt; result.&lt;/li&gt; &#xA; &lt;li&gt;Custom scheme for ports can be defined, for example &lt;code&gt;-ports http:443,http:80,https:8443&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Custom resolver supports multiple protocol (&lt;strong&gt;doh|tcp|udp&lt;/strong&gt;) in form of &lt;code&gt;protocol:resolver:port&lt;/code&gt; (e.g. &lt;code&gt;udp:127.0.0.1:53&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;The following flags should be used for specific use cases instead of running them as default with other probes: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;-ports&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;-path&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;-vhost&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;-screenshot&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;-csp-probe&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;-tls-probe&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;-favicon&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;-http2&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;-pipeline&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;-tls-impersonate&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Acknowledgement&lt;/h1&gt; &#xA;&lt;p&gt;Probing feature is inspired by &lt;a href=&#34;https://github.com/tomnomnom/httprobe&#34;&gt;@tomnomnom/httprobe&lt;/a&gt; work ❤️&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt;&lt;code&gt;httpx&lt;/code&gt; is made with 💙 by the &lt;a href=&#34;https://projectdiscovery.io&#34;&gt;projectdiscovery&lt;/a&gt; team and distributed under &lt;a href=&#34;https://raw.githubusercontent.com/projectdiscovery/httpx/main/LICENSE.md&#34;&gt;MIT License&lt;/a&gt;.&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://discord.gg/projectdiscovery&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/projectdiscovery/nuclei-burp-plugin/main/static/join-discord.png&#34; width=&#34;300&#34; alt=&#34;Join Discord&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt;</summary>
  </entry>
</feed>