<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-11-20T01:42:26Z</updated>
  <subtitle>Weekly Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>monkeyWie/gopeed</title>
    <updated>2022-11-20T01:42:26Z</updated>
    <id>tag:github.com,2022-11-20:/monkeyWie/gopeed</id>
    <link href="https://github.com/monkeyWie/gopeed" rel="alternate"></link>
    <summary type="html">&lt;p&gt;High speed downloader that supports all platforms.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/monkeyWie/gopeed/actions?query=workflow%3Atest&#34;&gt;&lt;img src=&#34;https://github.com/monkeyWie/gopeed/workflows/test/badge.svg?sanitize=true&#34; alt=&#34;Test Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/monkeyWie/gopeed&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/monkeyWie/gopeed/branch/main/graph/badge.svg?sanitize=true&#34; alt=&#34;Codecov&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/monkeyWie/gopeed/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/monkeyWie/gopeed.svg?style=flat-square&#34; alt=&#34;Release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/ZUJqJrwCGB&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/1037992631881449472?label=Discord&amp;amp;logo=discord&amp;amp;style=social&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/monkeyWie/gopeed/main/_docs/img/banner.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/monkeyWie/gopeed/main/README.md&#34;&gt;English&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/monkeyWie/gopeed/main/README_zh-CN.md&#34;&gt;中文&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;Gopeed is a high-speed downloader developed by &lt;code&gt;Golang&lt;/code&gt;+&lt;code&gt;Flutter&lt;/code&gt;, which supports (HTTP, BitTorrent, Magnet) protocol downloads and supports all platforms.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Supported platforms&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; windows&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; macos&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; linux&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; android&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; ios&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; web&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; docker&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/monkeyWie/gopeed/releases/latest&#34;&gt;To Release&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Tips: If the macos open failed, please execute the &lt;code&gt;xattr -d com.apple.quarantine /Applications/Gopeed.app&lt;/code&gt; command in the terminal&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Command tool&lt;/h3&gt; &#xA;&lt;p&gt;use &lt;code&gt;go install&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;go install github.com/monkeyWie/gopeed/cmd/gopeed&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Docker&lt;/h3&gt; &#xA;&lt;h4&gt;Start directly&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run -d -p 9999:9999 -v /path/to/download:/download liwei2633/gopeed&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Using Docker Compose&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;version: &#39;3&#39;&#xA;&#xA;services:&#xA;  gopeed:&#xA;    container_name: gopeed&#xA;    ports:&#xA;      - 9999:9999&#xA;    image: liwei2633/gopeed&#xA;    volumes:&#xA;      - ~/Downloads:/download&#xA;    restart: unless-stopped&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use the command below to start container:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker compose up -d&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Access Gopeed&lt;/h4&gt; &#xA;&lt;p&gt;When the docker container is running, you can access the web page through &lt;code&gt;http://localhost:9999&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Tip: Modify the download path to &lt;code&gt;/download&lt;/code&gt; on the setting page to access the downloaded files on the host.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Showcase&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/monkeyWie/gopeed/main/_docs/img/ui-demo.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;p&gt;This project is divided into two parts, the front end uses &lt;code&gt;flutter&lt;/code&gt;, the back end uses &lt;code&gt;Golang&lt;/code&gt;, and the two sides communicate through the &lt;code&gt;http&lt;/code&gt; protocol. On the unix system, &lt;code&gt;unix socket&lt;/code&gt; is used, and on the windows system, &lt;code&gt;tcp&lt;/code&gt; protocol is used.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;The front code is located in the &lt;code&gt;ui/flutter&lt;/code&gt; directory.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Environment&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Golang 1.19+&lt;/li&gt; &#xA; &lt;li&gt;Flutter 3.0+&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Clone&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone git@github.com:monkeyWie/gopeed.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Build&lt;/h3&gt; &#xA;&lt;h4&gt;Desktop&lt;/h4&gt; &#xA;&lt;p&gt;First, you need to configure the environment according to the &lt;a href=&#34;https://docs.flutter.dev/development/platform-integration/desktop&#34;&gt;flutter desktop official website document&lt;/a&gt;, and then you need to prepare the &lt;code&gt;cgo&lt;/code&gt; environment, which can be searched for yourself.&lt;/p&gt; &#xA;&lt;p&gt;command:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;windows&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;go build -tags nosqlite -ldflags=&#34;-w -s&#34; -buildmode=c-shared -o ui/flutter/windows/libgopeed.dll github.com/monkeyWie/gopeed/bind/desktop&#xA;cd ui/flutter&#xA;flutter build windows&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;macos&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;go build -tags nosqlite -ldflags=&#34;-w -s&#34; -buildmode=c-shared -o ui/flutter/macos/Frameworks/libgopeed.dylib github.com/monkeyWie/gopeed/bind/desktop&#xA;cd ui/flutter&#xA;flutter build macos&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;linux&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;go build -tags nosqlite -ldflags=&#34;-w -s&#34; -buildmode=c-shared -o ui/flutter/linux/bundle/lib/libgopeed.so github.com/monkeyWie/gopeed/bind/desktop&#xA;cd ui/flutter&#xA;flutter build linux&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Mobile&lt;/h4&gt; &#xA;&lt;p&gt;Same as before, you also need to prepare the &lt;code&gt;cgo&lt;/code&gt; environment, and then install &lt;code&gt;gomobile&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;go install golang.org/x/mobile/cmd/gomobile@latest&#xA;gomobile init&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;command:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;android&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gomobile bind -tags nosqlite -ldflags=&#34;-w -s&#34; -o ui/flutter/android/app/libs/libgopeed.aar -target=android -androidapi 19 -javapkg=com.gopeed github.com/monkeyWie/gopeed/bind/mobile&#xA;cd ui/flutter&#xA;flutter build apk&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Web&lt;/h4&gt; &#xA;&lt;p&gt;Web platform communicates directly with the backend http server, no additional environment is required.&lt;/p&gt; &#xA;&lt;p&gt;command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd ui/flutter&#xA;flutter build web&#xA;cd ../../&#xA;cp -r ui/flutter/build/web cmd/web/dist&#xA;go build -tags nosqlite,web -ldflags=&#34;-s -w&#34; -o bin/ github.com/monkeyWie/gopeed/cmd/web&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/monkeyWie/gopeed/main/LICENSE&#34;&gt;GPLv3&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>techschool/simplebank</title>
    <updated>2022-11-20T01:42:26Z</updated>
    <id>tag:github.com,2022-11-20:/techschool/simplebank</id>
    <link href="https://github.com/techschool/simplebank" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Backend master class: build a simple bank service in Go&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Simple Bank&lt;/h1&gt; &#xA;&lt;p&gt;This repository contains the codes of the &lt;a href=&#34;https://bit.ly/backendmaster&#34;&gt;Backend Master Class&lt;/a&gt; course by &lt;a href=&#34;https://dev.to/techschoolguru&#34;&gt;TECH SCHOOL&lt;/a&gt; on our &lt;a href=&#34;https://www.youtube.com/c/TECHSCHOOLGURU&#34;&gt;Youtube channel&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/techschool/simplebank/master/backend-master.png&#34; alt=&#34;Backend master class&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can also find it on Udemy at &lt;a href=&#34;https://www.udemy.com/course/backend-master-class-golang-postgresql-kubernetes/?referralCode=DD082CB0A39D22EC43EE&#34;&gt;this link&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;And don&#39;t hesitate to &lt;a href=&#34;https://bit.ly/techschooldc&#34;&gt;join Tech School&#39;s Discord group&lt;/a&gt; to chat directly with me and other students.&lt;/p&gt; &#xA;&lt;p&gt;In this course, you will learn step-by-step how to design, develop and deploy a backend web service from scratch. I believe the best way to learn programming is to build a real application. Therefore, throughout the course, you will learn how to build a backend web service for a simple bank. It will provide APIs for the frontend to do the following things:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Create and manage bank accounts.&lt;/li&gt; &#xA; &lt;li&gt;Record all balance changes to each of the accounts.&lt;/li&gt; &#xA; &lt;li&gt;Perform a money transfer between 2 accounts.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The programming language we will use to develop the service is Golang, but the course is not just about coding in Go. The course is divided into 4 main parts:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;In the first part, you will learn deeply about how to design the database, generate codes to talk to the DB in a consistent and reliable way using transactions, understand the DB isolation levels, and how to use it correctly in production. Besides the database, you will also learn how to use docker for local development, how to use Git to manage your codes, and how to use Github Action to run unit tests automatically.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;In the second part, you will learn how to build a set of RESTful HTTP APIs using Gin - one of the most popular Golang frameworks for building web services. This includes everything from loading app configs, mocking DB for more robust unit tests, handling errors, authenticating users, and securing the APIs with JWT and PASETO access tokens.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;In the third part, you will learn how to build your app with Docker and deploy it to a production Kubernetes cluster on AWS. The lectures are very detailed with a step-by-step guide, from how to build a minimal docker image, set up a free-tier AWS account, create a production database, store and retrieve production secrets, create a Kubernetes cluster with EKS, use Github Action to automatically build and deploy the image to the EKS cluster, buy a domain name and route the traffics to the service, secure the connection with HTTPs and auto-renew TLS certificate from Let&#39;s Encrypt.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The last part is a work-in-progress, where we discuss more advanced backend topics such as managing user sessions, building gRPC APIs, using gRPC gateway to serve both gRPC and HTTP with 1 single implementation of the handler, embedding Swagger documentation as part of the backend service, running asynchronous workers, gracefully shutdown servers, etc. We will keep making and uploading new videos, so please come back here to check them out from time to time.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;This course is designed with a lot of details, so that everyone, even with very little programming experience can understand and do it by themselves. I strongly believe that after the course, you would be able to work much more confidently and effectively on your projects.&lt;/p&gt; &#xA;&lt;h2&gt;Course videos&lt;/h2&gt; &#xA;&lt;h3&gt;Section 1: Working with database [Postgres]&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Lecture #1: &lt;a href=&#34;https://www.youtube.com/watch?v=rx6CPDK_5mU&amp;amp;list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&amp;amp;index=1&#34;&gt;Design DB schema and generate SQL code with dbdiagram.io&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Lecture #2: &lt;a href=&#34;https://www.youtube.com/watch?v=Q9ipbLeqmQo&amp;amp;list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&amp;amp;index=2&#34;&gt;Install &amp;amp; use Docker + Postgres + TablePlus to create DB schema&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Lecture #3: &lt;a href=&#34;https://www.youtube.com/watch?v=0CYkrGIJkpw&amp;amp;list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&amp;amp;index=3&#34;&gt;How to write &amp;amp; run database migration in Golang&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Lecture #4: &lt;a href=&#34;https://www.youtube.com/watch?v=prh0hTyI1sU&amp;amp;list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&amp;amp;index=4&#34;&gt;Generate CRUD Golang code from SQL | Compare db/sql, gorm, sqlx &amp;amp; sqlc&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Lecture #5: &lt;a href=&#34;https://www.youtube.com/watch?v=phHDfOHB2PU&amp;amp;list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&amp;amp;index=5&#34;&gt;Write unit tests for database CRUD with random data in Golang&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Lecture #6: &lt;a href=&#34;https://www.youtube.com/watch?v=gBh__1eFwVI&amp;amp;list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&amp;amp;index=6&#34;&gt;A clean way to implement database transaction in Golang&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Lecture #7: &lt;a href=&#34;https://www.youtube.com/watch?v=G2aggv_3Bbg&amp;amp;list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&amp;amp;index=7&#34;&gt;DB transaction lock &amp;amp; How to handle deadlock in Golang&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Lecture #8: &lt;a href=&#34;https://www.youtube.com/watch?v=qn3-5wdOfoA&amp;amp;list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&amp;amp;index=8&#34;&gt;How to avoid deadlock in DB transaction? Queries order matters!&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Lecture #9: &lt;a href=&#34;https://www.youtube.com/watch?v=4EajrPgJAk0&amp;amp;list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&amp;amp;index=9&#34;&gt;Deeply understand transaction isolation levels &amp;amp; read phenomena in MySQL &amp;amp; PostgreSQL&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Lecture #10: &lt;a href=&#34;https://www.youtube.com/watch?v=3mzQRJY1GVE&amp;amp;list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&amp;amp;index=10&#34;&gt;Setup Github Actions for Golang + Postgres to run automated tests&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Section 2: Building RESTful HTTP JSON API [Gin]&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Lecture #11: &lt;a href=&#34;https://www.youtube.com/watch?v=n_Y_YisgqTw&amp;amp;list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&amp;amp;index=11&#34;&gt;Implement RESTful HTTP API in Go using Gin&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Lecture #12: &lt;a href=&#34;https://www.youtube.com/watch?v=n5p8HkO6bnE&amp;amp;list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&amp;amp;index=12&#34;&gt;Load config from file &amp;amp; environment variables in Go with Viper&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Lecture #13: &lt;a href=&#34;https://www.youtube.com/watch?v=rL0aeMutoJ0&amp;amp;list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&amp;amp;index=13&#34;&gt;Mock DB for testing HTTP API in Go and achieve 100% coverage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Lecture #14: &lt;a href=&#34;https://www.youtube.com/watch?v=5q_wsashJZA&amp;amp;list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&amp;amp;index=14&#34;&gt;Implement transfer money API with a custom params validator&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Lecture #15: &lt;a href=&#34;https://www.youtube.com/watch?v=D4VtNC3vQUs&amp;amp;list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&amp;amp;index=15&#34;&gt;Add users table with unique &amp;amp; foreign key constraints in PostgreSQL&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Lecture #16: &lt;a href=&#34;https://www.youtube.com/watch?v=mJ8b5GcvoxQ&amp;amp;list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&amp;amp;index=16&#34;&gt;How to handle DB errors in Golang correctly&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Lecture #17: &lt;a href=&#34;https://www.youtube.com/watch?v=B3xnJI2lHmc&amp;amp;list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&amp;amp;index=17&#34;&gt;How to securely store passwords? Hash password in Go with Bcrypt!&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Lecture #18: &lt;a href=&#34;https://www.youtube.com/watch?v=DuzBE0jKOgE&amp;amp;list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&amp;amp;index=18&#34;&gt;How to write stronger unit tests with a custom gomock matcher&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Lecture #19: &lt;a href=&#34;https://www.youtube.com/watch?v=nBGx-q52KAY&amp;amp;list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&amp;amp;index=19&#34;&gt;Why PASETO is better than JWT for token-based authentication?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Lecture #20: &lt;a href=&#34;https://www.youtube.com/watch?v=Oi4FHDGILuY&amp;amp;list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&amp;amp;index=20&#34;&gt;How to create and verify JWT &amp;amp; PASETO token in Golang&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Lecture #21: &lt;a href=&#34;https://www.youtube.com/watch?v=lnHbZ9GOGAs&amp;amp;list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&amp;amp;index=21&#34;&gt;Implement login user API that returns PASETO or JWT access token in Go&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Lecture #22: &lt;a href=&#34;https://www.youtube.com/watch?v=Pw8fVBRS4jA&amp;amp;list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&amp;amp;index=22&#34;&gt;Implement authentication middleware and authorization rules in Golang using Gin&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Section 3: Deploying the application to production [Kubernetes + AWS]&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Lecture #23: &lt;a href=&#34;https://www.youtube.com/watch?v=p1dwLKAxUxA&amp;amp;list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&amp;amp;index=23&#34;&gt;Build a minimal Golang Docker image with a multistage Dockerfile&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Lecture #24: &lt;a href=&#34;https://www.youtube.com/watch?v=VcFnqQarpjI&amp;amp;list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&amp;amp;index=24&#34;&gt;How to use docker network to connect 2 stand-alone containers&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Lecture #25: &lt;a href=&#34;https://www.youtube.com/watch?v=jf6sQsz0M1M&amp;amp;list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&amp;amp;index=25&#34;&gt;How to write docker-compose file and control service start-up orders with wait-for.sh&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Lecture #26: &lt;a href=&#34;https://www.youtube.com/watch?v=4UqN1P8pIkM&amp;amp;list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&amp;amp;index=26&#34;&gt;How to create a free tier AWS account&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Lecture #27: &lt;a href=&#34;https://www.youtube.com/watch?v=3M4MPmSWt9E&amp;amp;list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&amp;amp;index=27&#34;&gt;Auto build &amp;amp; push docker image to AWS ECR with Github Actions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Lecture #28: &lt;a href=&#34;https://www.youtube.com/watch?v=0EaG3T4Q5fQ&amp;amp;list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&amp;amp;index=28&#34;&gt;How to create a production DB on AWS RDS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Lecture #29: &lt;a href=&#34;https://www.youtube.com/watch?v=3i1mQ_Ye8jE&amp;amp;list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&amp;amp;index=29&#34;&gt;Store &amp;amp; retrieve production secrets with AWS secrets manager&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Lecture #30: &lt;a href=&#34;https://www.youtube.com/watch?v=TxnCMhYhqRU&amp;amp;list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&amp;amp;index=30&#34;&gt;Kubernetes architecture &amp;amp; How to create an EKS cluster on AWS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Lecture #31: &lt;a href=&#34;https://www.youtube.com/watch?v=hwMevai3_wQ&amp;amp;list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&amp;amp;index=31&#34;&gt;How to use kubectl &amp;amp; k9s to connect to a kubernetes cluster on AWS EKS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Lecture #32: &lt;a href=&#34;https://www.youtube.com/watch?v=PH-Mcd0Rs1w&amp;amp;list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&amp;amp;index=32&#34;&gt;How to deploy a web app to Kubernetes cluster on AWS EKS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Lecture #33: &lt;a href=&#34;https://www.youtube.com/watch?v=-JF2ukmW3i8&amp;amp;list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&amp;amp;index=33&#34;&gt;Register a domain name &amp;amp; set up A-record using Route53&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Lecture #34: &lt;a href=&#34;https://www.youtube.com/watch?v=lBrqP6FkNsU&amp;amp;list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&amp;amp;index=34&#34;&gt;How to use Ingress to route traffics to different services in Kubernetes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Lecture #35: &lt;a href=&#34;https://www.youtube.com/watch?v=nU4FTjrgSKI&amp;amp;list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&amp;amp;index=35&#34;&gt;Automatic issue TLS certificates in Kubernetes with Let&#39;s Encrypt&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Lecture #36: &lt;a href=&#34;https://www.youtube.com/watch?v=GVY-zze0V_U&amp;amp;list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&amp;amp;index=36&#34;&gt;Automatic deploy to Kubernetes with Github Action&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Section 4: Advanced Backend Topics [gRPC]&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Lecture #37: &lt;a href=&#34;https://www.youtube.com/watch?v=rT20ylRLm5U&amp;amp;list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&amp;amp;index=37&#34;&gt;How to manage user session with refresh token - Golang&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Lecture #38: &lt;a href=&#34;https://www.youtube.com/watch?v=dGfVwsPr-IU&amp;amp;list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&amp;amp;index=38&#34;&gt;Generate DB documentation page and schema SQL dump from DBML&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Lecture #39: &lt;a href=&#34;https://www.youtube.com/watch?v=mRGnA3wPxMM&amp;amp;list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&amp;amp;index=39&#34;&gt;Introduction to gRPC&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Lecture #40: &lt;a href=&#34;https://www.youtube.com/watch?v=mVWgEmyAhvM&amp;amp;list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&amp;amp;index=40&#34;&gt;Define gRPC API and generate Go code with protobuf&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Lecture #41: &lt;a href=&#34;https://www.youtube.com/watch?v=BkfBJIS0_ro&amp;amp;list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&amp;amp;index=41&#34;&gt;How to run a golang gRPC server and call its API&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Lecture #42: &lt;a href=&#34;https://www.youtube.com/watch?v=7xiWqyZW9lE&amp;amp;list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&amp;amp;index=42&#34;&gt;Implement gRPC API to create and login users in Go&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Lecture #43: &lt;a href=&#34;https://www.youtube.com/watch?v=3FfDH3d0aHs&amp;amp;list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&amp;amp;index=43&#34;&gt;Write code once, serve both gRPC &amp;amp; HTTP requests&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Lecture #44: &lt;a href=&#34;https://www.youtube.com/watch?v=Sno10WQ21Zs&amp;amp;list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&amp;amp;index=44&#34;&gt;How to extract info from gRPC metadata&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Lecture #45: &lt;a href=&#34;https://www.youtube.com/watch?v=Uwkxxee7tvk&amp;amp;list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&amp;amp;index=45&#34;&gt;Automatic generate &amp;amp; serve Swagger docs from Go server&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Lecture #46: &lt;a href=&#34;https://www.youtube.com/watch?v=xNgOIm86N5Q&amp;amp;list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&amp;amp;index=46&#34;&gt;Embed static frontend files inside Golang backend server&#39;s binary&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Lecture #47: &lt;a href=&#34;https://www.youtube.com/watch?v=CxZ9hMtmZtc&amp;amp;list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&amp;amp;index=47&#34;&gt;Validate gRPC parameters and send human/machine friendly response&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Lecture #48: &lt;a href=&#34;https://www.youtube.com/watch?v=TG43cMpaxlI&amp;amp;list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&amp;amp;index=48&#34;&gt;Run DB migrations directly inside Golang code&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Lecture #49: &lt;a href=&#34;https://www.youtube.com/watch?v=I2sbw1PzzW0&amp;amp;list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&amp;amp;index=49&#34;&gt;Partial update DB record with SQLC nullable parameters&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Lecture #50: &lt;a href=&#34;https://www.youtube.com/watch?v=ygqSHIEc8sc&amp;amp;list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&amp;amp;index=50&#34;&gt;Build gRPC update API with optional parameters&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Lecture #51: &lt;a href=&#34;https://www.youtube.com/watch?v=_jqNs3d99ps&amp;amp;list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&amp;amp;index=51&#34;&gt;Add authorization to protect gRPC API&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Lecture #52: &lt;a href=&#34;https://www.youtube.com/watch?v=tTAxLGrDmPo&amp;amp;list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&amp;amp;index=52&#34;&gt;Write structured logs for gRPC APIs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Lecture #53: &lt;a href=&#34;https://www.youtube.com/watch?v=Lbiz-PZNiU0&amp;amp;list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&amp;amp;index=53&#34;&gt;How to write HTTP logger middleware in Go&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Simple bank service&lt;/h2&gt; &#xA;&lt;p&gt;The service that we’re going to build is a simple bank. It will provide APIs for the frontend to do following things:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Create and manage bank accounts, which are composed of owner’s name, balance, and currency.&lt;/li&gt; &#xA; &lt;li&gt;Record all balance changes to each of the account. So every time some money is added to or subtracted from the account, an account entry record will be created.&lt;/li&gt; &#xA; &lt;li&gt;Perform a money transfer between 2 accounts. This should happen within a transaction, so that either both accounts’ balance are updated successfully or none of them are.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Setup local development&lt;/h2&gt; &#xA;&lt;h3&gt;Install tools&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://www.docker.com/products/docker-desktop&#34;&gt;Docker desktop&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://tableplus.com/&#34;&gt;TablePlus&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://golang.org/&#34;&gt;Golang&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://brew.sh/&#34;&gt;Homebrew&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/golang-migrate/migrate/tree/master/cmd/migrate&#34;&gt;Migrate&lt;/a&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew install golang-migrate&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://dbdocs.io/docs&#34;&gt;DB Docs&lt;/a&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm install -g dbdocs&#xA;dbdocs login&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://www.dbml.org/cli/#installation&#34;&gt;DBML CLI&lt;/a&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm install -g @dbml/cli&#xA;dbml2sql --version&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/kyleconroy/sqlc#installation&#34;&gt;Sqlc&lt;/a&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew install sqlc&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/golang/mock&#34;&gt;Gomock&lt;/a&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;go install github.com/golang/mock/mockgen@v1.6.0&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Setup infrastructure&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Create the bank-network&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make network&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Start postgres container:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make postgres&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Create simple_bank database:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make createdb&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run db migration up all versions:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make migrateup&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run db migration up 1 version:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make migrateup1&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run db migration down all versions:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make migratedown&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run db migration down 1 version:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make migratedown1&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Documentation&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Generate DB documentation:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make db_docs&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Access the DB documentation at &lt;a href=&#34;https://dbdocs.io/techschool.guru/simple_bank&#34;&gt;this address&lt;/a&gt;. Password: &lt;code&gt;secret&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;How to generate code&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Generate schema SQL file with DBML:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make db_schema&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Generate SQL CRUD with sqlc:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make sqlc&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Generate DB mock with gomock:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make mock&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Create a new db migration:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;migrate create -ext sql -dir db/migration -seq &amp;lt;migration_name&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;How to run&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Run server:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make server&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run test:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make test&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Deploy to kubernetes cluster&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://kubernetes.github.io/ingress-nginx/deploy/#aws&#34;&gt;Install nginx ingress controller&lt;/a&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v0.48.1/deploy/static/provider/aws/deploy.yaml&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://cert-manager.io/docs/installation/kubernetes/&#34;&gt;Install cert-manager&lt;/a&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;kubectl apply -f https://github.com/jetstack/cert-manager/releases/download/v1.4.0/cert-manager.yaml&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>hashicorp/hcl</title>
    <updated>2022-11-20T01:42:26Z</updated>
    <id>tag:github.com,2022-11-20:/hashicorp/hcl</id>
    <link href="https://github.com/hashicorp/hcl" rel="alternate"></link>
    <summary type="html">&lt;p&gt;HCL is the HashiCorp configuration language.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;HCL&lt;/h1&gt; &#xA;&lt;p&gt;HCL is a toolkit for creating structured configuration languages that are both human- and machine-friendly, for use with command-line tools. Although intended to be generally useful, it is primarily targeted towards devops tools, servers, etc.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; This is major version 2 of HCL, whose Go API is incompatible with major version 1. Both versions are available for selection in Go Modules projects. HCL 2 &lt;em&gt;cannot&lt;/em&gt; be imported from Go projects that are not using Go Modules. For more information, see &lt;a href=&#34;https://github.com/hashicorp/hcl/wiki/Version-Selection&#34;&gt;our version selection guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;HCL has both a &lt;em&gt;native syntax&lt;/em&gt;, intended to be pleasant to read and write for humans, and a JSON-based variant that is easier for machines to generate and parse.&lt;/p&gt; &#xA;&lt;p&gt;The HCL native syntax is inspired by &lt;a href=&#34;https://github.com/vstakhov/libucl&#34;&gt;libucl&lt;/a&gt;, &lt;a href=&#34;http://nginx.org/en/docs/beginners_guide.html#conf_structure&#34;&gt;nginx configuration&lt;/a&gt;, and others.&lt;/p&gt; &#xA;&lt;p&gt;It includes an expression syntax that allows basic inline computation and, with support from the calling application, use of variables and functions for more dynamic configuration languages.&lt;/p&gt; &#xA;&lt;p&gt;HCL provides a set of constructs that can be used by a calling application to construct a configuration language. The application defines which attribute names and nested block types are expected, and HCL parses the configuration file, verifies that it conforms to the expected structure, and returns high-level objects that the application can use for further processing.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;log&#34;&#xA;&#xA;&#x9;&#34;github.com/hashicorp/hcl/v2/hclsimple&#34;&#xA;)&#xA;&#xA;type Config struct {&#xA;&#x9;IOMode  string        `hcl:&#34;io_mode&#34;`&#xA;&#x9;Service ServiceConfig `hcl:&#34;service,block&#34;`&#xA;}&#xA;&#xA;type ServiceConfig struct {&#xA;&#x9;Protocol   string          `hcl:&#34;protocol,label&#34;`&#xA;&#x9;Type       string          `hcl:&#34;type,label&#34;`&#xA;&#x9;ListenAddr string          `hcl:&#34;listen_addr&#34;`&#xA;&#x9;Processes  []ProcessConfig `hcl:&#34;process,block&#34;`&#xA;}&#xA;&#xA;type ProcessConfig struct {&#xA;&#x9;Type    string   `hcl:&#34;type,label&#34;`&#xA;&#x9;Command []string `hcl:&#34;command&#34;`&#xA;}&#xA;&#xA;func main() {&#xA;&#x9;var config Config&#xA;&#x9;err := hclsimple.DecodeFile(&#34;config.hcl&#34;, nil, &amp;amp;config)&#xA;&#x9;if err != nil {&#xA;&#x9;&#x9;log.Fatalf(&#34;Failed to load configuration: %s&#34;, err)&#xA;&#x9;}&#xA;&#x9;log.Printf(&#34;Configuration is %#v&#34;, config)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A lower-level API is available for applications that need more control over the parsing, decoding, and evaluation of configuration. For more information, see &lt;a href=&#34;https://pkg.go.dev/github.com/hashicorp/hcl/v2&#34;&gt;the package documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Why?&lt;/h2&gt; &#xA;&lt;p&gt;Newcomers to HCL often ask: why not JSON, YAML, etc?&lt;/p&gt; &#xA;&lt;p&gt;Whereas JSON and YAML are formats for serializing data structures, HCL is a syntax and API specifically designed for building structured configuration formats.&lt;/p&gt; &#xA;&lt;p&gt;HCL attempts to strike a compromise between generic serialization formats such as JSON and configuration formats built around full programming languages such as Ruby. HCL syntax is designed to be easily read and written by humans, and allows &lt;em&gt;declarative&lt;/em&gt; logic to permit its use in more complex applications.&lt;/p&gt; &#xA;&lt;p&gt;HCL is intended as a base syntax for configuration formats built around key-value pairs and hierarchical blocks whose structure is well-defined by the calling application, and this definition of the configuration structure allows for better error messages and more convenient definition within the calling application.&lt;/p&gt; &#xA;&lt;p&gt;It can&#39;t be denied that JSON is very convenient as a &lt;em&gt;lingua franca&lt;/em&gt; for interoperability between different pieces of software. Because of this, HCL defines a common configuration model that can be parsed from either its native syntax or from a well-defined equivalent JSON structure. This allows configuration to be provided as a mixture of human-authored configuration files in the native syntax and machine-generated files in JSON.&lt;/p&gt; &#xA;&lt;h2&gt;Information Model and Syntax&lt;/h2&gt; &#xA;&lt;p&gt;HCL is built around two primary concepts: &lt;em&gt;attributes&lt;/em&gt; and &lt;em&gt;blocks&lt;/em&gt;. In native syntax, a configuration file for a hypothetical application might look something like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-hcl&#34;&gt;io_mode = &#34;async&#34;&#xA;&#xA;service &#34;http&#34; &#34;web_proxy&#34; {&#xA;  listen_addr = &#34;127.0.0.1:8080&#34;&#xA;  &#xA;  process &#34;main&#34; {&#xA;    command = [&#34;/usr/local/bin/awesome-app&#34;, &#34;server&#34;]&#xA;  }&#xA;&#xA;  process &#34;mgmt&#34; {&#xA;    command = [&#34;/usr/local/bin/awesome-app&#34;, &#34;mgmt&#34;]&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The JSON equivalent of this configuration is the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;io_mode&#34;: &#34;async&#34;,&#xA;  &#34;service&#34;: {&#xA;    &#34;http&#34;: {&#xA;      &#34;web_proxy&#34;: {&#xA;        &#34;listen_addr&#34;: &#34;127.0.0.1:8080&#34;,&#xA;        &#34;process&#34;: {&#xA;          &#34;main&#34;: {&#xA;            &#34;command&#34;: [&#34;/usr/local/bin/awesome-app&#34;, &#34;server&#34;]&#xA;          },&#xA;          &#34;mgmt&#34;: {&#xA;            &#34;command&#34;: [&#34;/usr/local/bin/awesome-app&#34;, &#34;mgmt&#34;]&#xA;          },&#xA;        }&#xA;      }&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Regardless of which syntax is used, the API within the calling application is the same. It can either work directly with the low-level attributes and blocks, for more advanced use-cases, or it can use one of the &lt;em&gt;decoder&lt;/em&gt; packages to declaratively extract into either Go structs or dynamic value structures.&lt;/p&gt; &#xA;&lt;p&gt;Attribute values can be expressions as well as just literal values:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-hcl&#34;&gt;# Arithmetic with literals and application-provided variables&#xA;sum = 1 + addend&#xA;&#xA;# String interpolation and templates&#xA;message = &#34;Hello, ${name}!&#34;&#xA;&#xA;# Application-provided functions&#xA;shouty_message = upper(message)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Although JSON syntax doesn&#39;t permit direct use of expressions, the interpolation syntax allows use of arbitrary expressions within JSON strings:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;sum&#34;: &#34;${1 + addend}&#34;,&#xA;  &#34;message&#34;: &#34;Hello, ${name}!&#34;,&#xA;  &#34;shouty_message&#34;: &#34;${upper(message)}&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more information, see the detailed specifications:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hashicorp/hcl/main/spec.md&#34;&gt;Syntax-agnostic Information Model&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hashicorp/hcl/main/hclsyntax/spec.md&#34;&gt;HCL Native Syntax&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hashicorp/hcl/main/json/spec.md&#34;&gt;JSON Representation&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Changes in 2.0&lt;/h2&gt; &#xA;&lt;p&gt;Version 2.0 of HCL combines the features of HCL 1.0 with those of the interpolation language HIL to produce a single configuration language that supports arbitrary expressions.&lt;/p&gt; &#xA;&lt;p&gt;This new version has a completely new parser and Go API, with no direct migration path. Although the syntax is similar, the implementation takes some very different approaches to improve on some &#34;rough edges&#34; that existed with the original implementation and to allow for more robust error handling.&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s possible to import both HCL 1 and HCL 2 into the same program using Go&#39;s &lt;em&gt;semantic import versioning&lt;/em&gt; mechanism:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;import (&#xA;    hcl1 &#34;github.com/hashicorp/hcl&#34;&#xA;    hcl2 &#34;github.com/hashicorp/hcl/v2&#34;&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Acknowledgements&lt;/h2&gt; &#xA;&lt;p&gt;HCL was heavily inspired by &lt;a href=&#34;https://github.com/vstakhov/libucl&#34;&gt;libucl&lt;/a&gt;, by &lt;a href=&#34;https://github.com/vstakhov&#34;&gt;Vsevolod Stakhov&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;HCL and HIL originate in &lt;a href=&#34;https://terraform.io/&#34;&gt;HashiCorp Terraform&lt;/a&gt;, with the original parsers for each written by &lt;a href=&#34;https://github.com/mitchellh&#34;&gt;Mitchell Hashimoto&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The original HCL parser was ported to pure Go (from yacc) by &lt;a href=&#34;https://github.com/fatih&#34;&gt;Fatih Arslan&lt;/a&gt;. The structure-related portions of the new native syntax parser build on that work.&lt;/p&gt; &#xA;&lt;p&gt;The original HIL parser was ported to pure Go (from yacc) by &lt;a href=&#34;https://github.com/apparentlymart&#34;&gt;Martin Atkins&lt;/a&gt;. The expression-related portions of the new native syntax parser build on that work.&lt;/p&gt; &#xA;&lt;p&gt;HCL 2, which merged the original HCL and HIL languages into this single new language, builds on design and prototyping work by &lt;a href=&#34;https://github.com/apparentlymart&#34;&gt;Martin Atkins&lt;/a&gt; in &lt;a href=&#34;https://github.com/zclconf/go-zcl&#34;&gt;zcl&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>