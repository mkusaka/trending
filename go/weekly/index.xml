<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-03-03T01:44:15Z</updated>
  <subtitle>Weekly Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>apache/incubator-devlake</title>
    <updated>2024-03-03T01:44:15Z</updated>
    <id>tag:github.com,2024-03-03:/apache/incubator-devlake</id>
    <link href="https://github.com/apache/incubator-devlake" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Apache DevLake is an open-source dev data platform to ingest, analyze, and visualize the fragmented data from DevOps tools, extracting insights for engineering excellence, developer experience, and community growth.&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;br&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/apache/incubator-devlake/main/resources/img/logo.svg?sanitize=true&#34; width=&#34;120px&#34; alt=&#34;&#34;&gt; &#xA; &lt;br&gt; &#xA; &lt;h1&gt;Apache DevLake(Incubating)&lt;/h1&gt; &#xA; &lt;p&gt;&lt;a href=&#34;http://makeapullrequest.com&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=flat&amp;amp;logo=github&amp;amp;color=2370ff&amp;amp;labelColor=454545&#34; alt=&#34;PRs Welcome&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/apache/devlake&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/dynamic/json?url=https%3A%2F%2Fhub.docker.com%2Fv2%2Frepositories%2Fapache%2Fdevlake&amp;amp;query=%24.pull_count&amp;amp;label=Dockerhub%20pulls&#34; alt=&#34;Dockerhub pulls&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/apache/incubator-devlake/actions/workflows/test.yml&#34;&gt;&lt;img src=&#34;https://github.com/apache/incubator-devlake/actions/workflows/test.yml/badge.svg?sanitize=true&#34; alt=&#34;unit-test&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/apache/incubator-devlake&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/apache/incubator-devlake&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://join.slack.com/t/devlake-io/shared_invite/zt-18uayb6ut-cHOjiYcBwERQ8VVPZ9cQQw&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/slack-join_chat-success.svg?logo=slack&#34; alt=&#34;Slack&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/ApacheDevLake&#34;&gt;&lt;img src=&#34;https://badgen.net/badge/icon/twitter?icon=twitter&amp;amp;label&#34; alt=&#34;Twitter&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;br&gt; &#xA;&lt;div align=&#34;left&#34;&gt; &#xA; &lt;h2&gt;ü§î What is Apache DevLake?&lt;/h2&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://devlake.apache.org&#34;&gt;Apache DevLake&lt;/a&gt; is an open-source dev data platform that ingests, analyzes, and visualizes the fragmented data from DevOps tools to extract insights for engineering excellence, developer experience, and community growth.&lt;/p&gt; &#xA; &lt;p&gt;Apache DevLake is designed for developer teams looking to make better sense of their development process and to bring a more data-driven approach to their own practices. You can ask Apache DevLake many questions regarding your development process. Just connect and query.&lt;/p&gt; &#xA; &lt;h2&gt;üéØ What can be accomplished with Apache DevLake?&lt;/h2&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;Your Dev Data lives in many silos and tools. DevLake brings them all together to give you a complete view of your Software Development Life Cycle (SDLC).&lt;/li&gt; &#xA;  &lt;li&gt;From DORA to scrum retros, DevLake implements metrics effortlessly with prebuilt dashboards supporting common frameworks and goals.&lt;/li&gt; &#xA;  &lt;li&gt;DevLake fits teams of all shapes and sizes, and can be readily extended to support new data sources, metrics, and dashboards, with a flexible framework for data collection and transformation.&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;h2&gt;üëâ Live Demo&lt;/h2&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://grafana-lake.demo.devlake.io/grafana/d/qNo8_0M4z/dora?orgId=1&#34;&gt;DORA Dashboard&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://devlake.apache.org/livedemo/EngineeringLeads/DORA&#34;&gt;All Dashboards&lt;/a&gt;&lt;/p&gt; &#xA; &lt;h2&gt;üí™ Supported Data Sources&lt;/h2&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://devlake.apache.org/docs/Overview/SupportedDataSources&#34;&gt;Here&lt;/a&gt; you can find all data sources supported by DevLake, their scopes, supported versions and more!&lt;/p&gt; &#xA; &lt;h2&gt;üöÄ Getting Started&lt;/h2&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://devlake.apache.org/docs/GettingStarted/DockerComposeSetup&#34;&gt;Install via Docker Compose&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://devlake.apache.org/docs/GettingStarted/HelmSetup&#34;&gt;Install via Helm&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://devlake.apache.org/docs/DeveloperManuals/DeveloperSetup&#34;&gt;Install in Developer Mode&lt;/a&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;h2&gt;ü§ì How do I use DevLake?&lt;/h2&gt; &#xA; &lt;h3&gt;1. Set up DevLake&lt;/h3&gt; &#xA; &lt;p&gt;You can set up Apache DevLake by following our step-by-step instructions for &lt;a href=&#34;https://devlake.apache.org/docs/GettingStarted/DockerComposeSetup&#34;&gt;Install via Docker Compose&lt;/a&gt; or &lt;a href=&#34;https://devlake.apache.org/docs/GettingStarted/HelmSetup&#34;&gt;Install via Helm&lt;/a&gt;. Please see detailed instructions &lt;a href=&#34;https://devlake.apache.org/docs/Overview/Introduction#how-do-i-use-devlake&#34;&gt;here&lt;/a&gt;, and ask the community if you get stuck at any point.&lt;/p&gt; &#xA; &lt;h3&gt;2. Create a Blueprint&lt;/h3&gt; &#xA; &lt;p&gt;The DevLake Configuration UI will guide you through the process (a Blueprint) to define the data connections, data scope, transformation and sync frequency of the data you wish to collect.&lt;/p&gt; &#xA; &lt;h3&gt;3. Track the Blueprint&#39;s progress&lt;/h3&gt; &#xA; &lt;p&gt;You can track the progress of the Blueprint you have just set up.&lt;/p&gt; &#xA; &lt;h3&gt;4. View the pre-built dashboards&lt;/h3&gt; &#xA; &lt;p&gt;Once the first run of the Blueprint is completed, you can view the corresponding dashboards.&lt;/p&gt; &#xA; &lt;h3&gt;5. Customize the dashboards with SQL&lt;/h3&gt; &#xA; &lt;p&gt;If the pre-built dashboards are limited for your use cases, you can always customize or create your own metrics or dashboards with SQL.&lt;/p&gt; &#xA; &lt;h2&gt;üòç How to Contribute&lt;/h2&gt; &#xA; &lt;p&gt;Please read the &lt;a href=&#34;https://devlake.apache.org/community&#34;&gt;contribution guidelines&lt;/a&gt; before you make contribution. The following docs list the resources you might need to know after you decided to make contribution.&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://devlake.apache.org/community/MakingContributions/fix-or-create-issues&#34;&gt;Create an Issue&lt;/a&gt;: Report a bug or feature request to Apache DevLake&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://devlake.apache.org/community/MakingContributions/development-workflow&#34;&gt;Submit a PR&lt;/a&gt;: Start with &lt;a href=&#34;https://github.com/apache/incubator-devlake/issues?q=is%3Aissue+is%3Aopen+label%3A%22good+first+issue%22&#34;&gt;good first issues&lt;/a&gt; or &lt;a href=&#34;https://github.com/apache/incubator-devlake/issues?q=is%3Aissue+is%3Aopen+no%3Aassignee&#34;&gt;issues with no assignees&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://devlake.apache.org/community/subscribe&#34;&gt;Join Mailing list&lt;/a&gt;: Initiate or participate in project discussions on the mailing list&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://devlake.apache.org/community/MakingContributions/BlogSubmission&#34;&gt;Write a Blog&lt;/a&gt;: Write a blog to share your use cases about Apache DevLake&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/incubator-devlake/main/backend/DevelopmentSetup&#34;&gt;Develop a Plugin&lt;/a&gt;: &lt;a href=&#34;https://github.com/apache/incubator-devlake/issues?q=is%3Aissue+is%3Aopen+label%3Aadd-a-plugin+&#34;&gt;Add a plugin&lt;/a&gt; to integrate Apache DevLake with more data sources for the community&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;h2&gt;üìÑ Contributing to Documentation:&lt;/h2&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Apache DevLake&#39;s documentation is hosted at &lt;a href=&#34;https://devlake.apache.org/&#34;&gt;devlake.apache.org&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;We have a separate GitHub repository for Apache DevLake&#39;s documentation:&lt;/strong&gt; &lt;a href=&#34;https://github.com/apache/incubator-devlake-website&#34;&gt;github.com/apache/incubator-devlake-website&lt;/a&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;h2&gt;‚åö Roadmap&lt;/h2&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://devlake.apache.org/docs/Overview/Roadmap&#34; target=&#34;_blank&#34;&gt;Roadmap&lt;/a&gt;: Detailed roadmaps for DevLake.&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;h2&gt;üíô Community&lt;/h2&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Slack: Message us on &lt;a href=&#34;https://join.slack.com/t/devlake-io/shared_invite/zt-18uayb6ut-cHOjiYcBwERQ8VVPZ9cQQw&#34; target=&#34;_blank&#34;&gt;Slack&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Wechat Community: &lt;a href=&#34;https://raw.githubusercontent.com/apache/incubator-devlake/main/resources/img/wechat_community_barcode.png&#34;&gt;Check the barcode&lt;/a&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;h2&gt;üìÑ License&lt;a id=&#34;license&#34;&gt;&lt;/a&gt;&lt;/h2&gt; &#xA; &lt;p&gt;This project is licensed under Apache License 2.0 - see the &lt;a href=&#34;https://raw.githubusercontent.com/apache/incubator-devlake/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt; file for details.&lt;/p&gt; &#xA;&lt;/div&gt;</summary>
  </entry>
  <entry>
    <title>stefanprodan/podinfo</title>
    <updated>2024-03-03T01:44:15Z</updated>
    <id>tag:github.com,2024-03-03:/stefanprodan/podinfo</id>
    <link href="https://github.com/stefanprodan/podinfo" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Go microservice template for Kubernetes&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;podinfo&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/stefanprodan/podinfo/raw/master/.github/workflows/e2e.yml&#34;&gt;&lt;img src=&#34;https://github.com/stefanprodan/podinfo/workflows/e2e/badge.svg?sanitize=true&#34; alt=&#34;e2e&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/stefanprodan/podinfo/raw/master/.github/workflows/test.yml&#34;&gt;&lt;img src=&#34;https://github.com/stefanprodan/podinfo/workflows/test/badge.svg?sanitize=true&#34; alt=&#34;test&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/stefanprodan/podinfo/raw/master/.github/workflows/cve-scan.yml&#34;&gt;&lt;img src=&#34;https://github.com/stefanprodan/podinfo/workflows/cve-scan/badge.svg?sanitize=true&#34; alt=&#34;cve-scan&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/stefanprodan/podinfo&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/stefanprodan/podinfo&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/stefanprodan/podinfo&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/pulls/stefanprodan/podinfo&#34; alt=&#34;Docker Pulls&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Podinfo is a tiny web application made with Go that showcases best practices of running microservices in Kubernetes. Podinfo is used by CNCF projects like &lt;a href=&#34;https://github.com/fluxcd/flux2&#34;&gt;Flux&lt;/a&gt; and &lt;a href=&#34;https://github.com/fluxcd/flagger&#34;&gt;Flagger&lt;/a&gt; for end-to-end testing and workshops.&lt;/p&gt; &#xA;&lt;p&gt;Specifications:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Health checks (readiness and liveness)&lt;/li&gt; &#xA; &lt;li&gt;Graceful shutdown on interrupt signals&lt;/li&gt; &#xA; &lt;li&gt;File watcher for secrets and configmaps&lt;/li&gt; &#xA; &lt;li&gt;Instrumented with Prometheus and Open Telemetry&lt;/li&gt; &#xA; &lt;li&gt;Structured logging with zap&lt;/li&gt; &#xA; &lt;li&gt;12-factor app with viper&lt;/li&gt; &#xA; &lt;li&gt;Fault injection (random errors and latency)&lt;/li&gt; &#xA; &lt;li&gt;Swagger docs&lt;/li&gt; &#xA; &lt;li&gt;Timoni, Helm and Kustomize installers&lt;/li&gt; &#xA; &lt;li&gt;End-to-End testing with Kubernetes Kind and Helm&lt;/li&gt; &#xA; &lt;li&gt;Multi-arch container image with Docker buildx and Github Actions&lt;/li&gt; &#xA; &lt;li&gt;Container image signing with Sigstore cosign&lt;/li&gt; &#xA; &lt;li&gt;SBOMs and SLSA Provenance embedded in the container image&lt;/li&gt; &#xA; &lt;li&gt;CVE scanning with Trivy&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Web API:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;GET /&lt;/code&gt; prints runtime information&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;GET /version&lt;/code&gt; prints podinfo version and git commit hash&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;GET /metrics&lt;/code&gt; return HTTP requests duration and Go runtime metrics&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;GET /healthz&lt;/code&gt; used by Kubernetes liveness probe&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;GET /readyz&lt;/code&gt; used by Kubernetes readiness probe&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;POST /readyz/enable&lt;/code&gt; signals the Kubernetes LB that this instance is ready to receive traffic&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;POST /readyz/disable&lt;/code&gt; signals the Kubernetes LB to stop sending requests to this instance&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;GET /status/{code}&lt;/code&gt; returns the status code&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;GET /panic&lt;/code&gt; crashes the process with exit code 255&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;POST /echo&lt;/code&gt; forwards the call to the backend service and echos the posted content&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;GET /env&lt;/code&gt; returns the environment variables as a JSON array&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;GET /headers&lt;/code&gt; returns a JSON with the request HTTP headers&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;GET /delay/{seconds}&lt;/code&gt; waits for the specified period&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;POST /token&lt;/code&gt; issues a JWT token valid for one minute &lt;code&gt;JWT=$(curl -sd &#39;anon&#39; podinfo:9898/token | jq -r .token)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;GET /token/validate&lt;/code&gt; validates the JWT token &lt;code&gt;curl -H &#34;Authorization: Bearer $JWT&#34; podinfo:9898/token/validate&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;GET /configs&lt;/code&gt; returns a JSON with configmaps and/or secrets mounted in the &lt;code&gt;config&lt;/code&gt; volume&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;POST/PUT /cache/{key}&lt;/code&gt; saves the posted content to Redis&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;GET /cache/{key}&lt;/code&gt; returns the content from Redis if the key exists&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;DELETE /cache/{key}&lt;/code&gt; deletes the key from Redis if exists&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;POST /store&lt;/code&gt; writes the posted content to disk at /data/hash and returns the SHA1 hash of the content&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;GET /store/{hash}&lt;/code&gt; returns the content of the file /data/hash if exists&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;GET /ws/echo&lt;/code&gt; echos content via websockets &lt;code&gt;podcli ws ws://localhost:9898/ws/echo&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;GET /chunked/{seconds}&lt;/code&gt; uses &lt;code&gt;transfer-encoding&lt;/code&gt; type &lt;code&gt;chunked&lt;/code&gt; to give a partial response and then waits for the specified period&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;GET /swagger.json&lt;/code&gt; returns the API Swagger docs, used for Linkerd service profiling and Gloo routes discovery&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;gRPC API:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;/grpc.health.v1.Health/Check&lt;/code&gt; health checking&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;/grpc.EchoService/Echo&lt;/code&gt; echos the received content&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;/grpc.VersionService/Version&lt;/code&gt; returns podinfo version and Git commit hash&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Web UI:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/stefanprodan/podinfo/gh-pages/screens/podinfo-ui-v3.png&#34; alt=&#34;podinfo-ui&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;To access the Swagger UI open &lt;code&gt;&amp;lt;podinfo-host&amp;gt;/swagger/index.html&lt;/code&gt; in a browser.&lt;/p&gt; &#xA;&lt;h3&gt;Guides&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://timoni.sh/quickstart/&#34;&gt;Getting started with Timoni&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://fluxcd.io/flux/get-started/&#34;&gt;Getting started with Flux&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.flagger.app/tutorials/linkerd-progressive-delivery&#34;&gt;Progressive Deliver with Flagger and Linkerd&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.flagger.app/tutorials/gatewayapi-progressive-delivery&#34;&gt;Automated canary deployments with Kubernetes Gateway API&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Install&lt;/h3&gt; &#xA;&lt;p&gt;To install Podinfo on Kubernetes the minimum required version is &lt;strong&gt;Kubernetes v1.23&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Timoni&lt;/h4&gt; &#xA;&lt;p&gt;Install with &lt;a href=&#34;https://timoni.sh&#34;&gt;Timoni&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;timoni -n default apply podinfo oci://ghcr.io/stefanprodan/modules/podinfo&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Helm&lt;/h4&gt; &#xA;&lt;p&gt;Install from github.io:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;helm repo add podinfo https://stefanprodan.github.io/podinfo&#xA;&#xA;helm upgrade --install --wait frontend \&#xA;--namespace test \&#xA;--set replicaCount=2 \&#xA;--set backend=http://backend-podinfo:9898/echo \&#xA;podinfo/podinfo&#xA;&#xA;helm test frontend --namespace test&#xA;&#xA;helm upgrade --install --wait backend \&#xA;--namespace test \&#xA;--set redis.enabled=true \&#xA;podinfo/podinfo&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Install from ghcr.io:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;helm upgrade --install --wait podinfo --namespace default \&#xA;oci://ghcr.io/stefanprodan/charts/podinfo&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Kustomize&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;kubectl apply -k github.com/stefanprodan/podinfo//kustomize&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Docker&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run -dp 9898:9898 stefanprodan/podinfo&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Continuous Delivery&lt;/h3&gt; &#xA;&lt;p&gt;In order to install podinfo on a Kubernetes cluster and keep it up to date with the latest release in an automated manner, you can use &lt;a href=&#34;https://fluxcd.io&#34;&gt;Flux&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Install the Flux CLI on MacOS and Linux using Homebrew:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;brew install fluxcd/tap/flux&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Install the Flux controllers needed for Helm operations:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;flux install \&#xA;--namespace=flux-system \&#xA;--network-policy=false \&#xA;--components=source-controller,helm-controller&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Add podinfo&#39;s Helm repository to your cluster and configure Flux to check for new chart releases every ten minutes:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;flux create source helm podinfo \&#xA;--namespace=default \&#xA;--url=https://stefanprodan.github.io/podinfo \&#xA;--interval=10m&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Create a &lt;code&gt;podinfo-values.yaml&lt;/code&gt; file locally:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cat &amp;gt; podinfo-values.yaml &amp;lt;&amp;lt;EOL&#xA;replicaCount: 2&#xA;resources:&#xA;  limits:&#xA;    memory: 256Mi&#xA;  requests:&#xA;    cpu: 100m&#xA;    memory: 64Mi&#xA;EOL&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Create a Helm release for deploying podinfo in the default namespace:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;flux create helmrelease podinfo \&#xA;--namespace=default \&#xA;--source=HelmRepository/podinfo \&#xA;--release-name=podinfo \&#xA;--chart=podinfo \&#xA;--chart-version=&#34;&amp;gt;5.0.0&#34; \&#xA;--values=podinfo-values.yaml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Based on the above definition, Flux will upgrade the release automatically when a new version of podinfo is released. If the upgrade fails, Flux can &lt;a href=&#34;https://toolkit.fluxcd.io/components/helm/helmreleases/#configuring-failure-remediation&#34;&gt;rollback&lt;/a&gt; to the previous working version.&lt;/p&gt; &#xA;&lt;p&gt;You can check what version is currently deployed with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;flux get helmreleases -n default&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To delete podinfo&#39;s Helm repository and release from your cluster run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;flux -n default delete source helm podinfo&#xA;flux -n default delete helmrelease podinfo&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you wish to manage the lifecycle of your applications in a &lt;strong&gt;GitOps&lt;/strong&gt; manner, check out this &lt;a href=&#34;https://github.com/fluxcd/flux2-kustomize-helm-example&#34;&gt;workflow example&lt;/a&gt; for multi-env deployments with Flux, Kustomize and Helm.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>shopspring/decimal</title>
    <updated>2024-03-03T01:44:15Z</updated>
    <id>tag:github.com,2024-03-03:/shopspring/decimal</id>
    <link href="https://github.com/shopspring/decimal" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Arbitrary-precision fixed-point decimal numbers in go&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;decimal&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/shopspring/decimal/actions/workflows/ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/shopspring/decimal/actions/workflows/ci.yml/badge.svg?branch=master&#34; alt=&#34;ci&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://godoc.org/github.com/shopspring/decimal&#34;&gt;&lt;img src=&#34;https://godoc.org/github.com/shopspring/decimal?status.svg?sanitize=true&#34; alt=&#34;GoDoc&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/shopspring/decimal&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/shopspring/decimal&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Arbitrary-precision fixed-point decimal numbers in go.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; Decimal library can &#34;only&#34; represent numbers with a maximum of 2^31 digits after the decimal point.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The zero-value is 0, and is safe to use without initialization&lt;/li&gt; &#xA; &lt;li&gt;Addition, subtraction, multiplication with no loss of precision&lt;/li&gt; &#xA; &lt;li&gt;Division with specified precision&lt;/li&gt; &#xA; &lt;li&gt;Database/sql serialization/deserialization&lt;/li&gt; &#xA; &lt;li&gt;JSON and XML serialization/deserialization&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;p&gt;Run &lt;code&gt;go get github.com/shopspring/decimal&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;Decimal library requires Go version &lt;code&gt;&amp;gt;=1.7&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;fmt&#34;&#xA;&#x9;&#34;github.com/shopspring/decimal&#34;&#xA;)&#xA;&#xA;func main() {&#xA;&#x9;price, err := decimal.NewFromString(&#34;136.02&#34;)&#xA;&#x9;if err != nil {&#xA;&#x9;&#x9;panic(err)&#xA;&#x9;}&#xA;&#xA;&#x9;quantity := decimal.NewFromInt(3)&#xA;&#xA;&#x9;fee, _ := decimal.NewFromString(&#34;.035&#34;)&#xA;&#x9;taxRate, _ := decimal.NewFromString(&#34;.08875&#34;)&#xA;&#xA;&#x9;subtotal := price.Mul(quantity)&#xA;&#xA;&#x9;preTax := subtotal.Mul(fee.Add(decimal.NewFromFloat(1)))&#xA;&#xA;&#x9;total := preTax.Mul(taxRate.Add(decimal.NewFromFloat(1)))&#xA;&#xA;&#x9;fmt.Println(&#34;Subtotal:&#34;, subtotal)                      // Subtotal: 408.06&#xA;&#x9;fmt.Println(&#34;Pre-tax:&#34;, preTax)                         // Pre-tax: 422.3421&#xA;&#x9;fmt.Println(&#34;Taxes:&#34;, total.Sub(preTax))                // Taxes: 37.482861375&#xA;&#x9;fmt.Println(&#34;Total:&#34;, total)                            // Total: 459.824961375&#xA;&#x9;fmt.Println(&#34;Tax rate:&#34;, total.Sub(preTax).Div(preTax)) // Tax rate: 0.08875&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://godoc.org/github.com/shopspring/decimal&#34;&gt;http://godoc.org/github.com/shopspring/decimal&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Production Usage&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://shopspring.com/&#34;&gt;Spring&lt;/a&gt;, since August 14, 2014.&lt;/li&gt; &#xA; &lt;li&gt;If you are using this in production, please let us know!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;h4&gt;Why don&#39;t you just use float64?&lt;/h4&gt; &#xA;&lt;p&gt;Because float64 (or any binary floating point type, actually) can&#39;t represent numbers such as &lt;code&gt;0.1&lt;/code&gt; exactly.&lt;/p&gt; &#xA;&lt;p&gt;Consider this code: &lt;a href=&#34;http://play.golang.org/p/TQBd4yJe6B&#34;&gt;http://play.golang.org/p/TQBd4yJe6B&lt;/a&gt; You might expect that it prints out &lt;code&gt;10&lt;/code&gt;, but it actually prints &lt;code&gt;9.999999999999831&lt;/code&gt;. Over time, these small errors can really add up!&lt;/p&gt; &#xA;&lt;h4&gt;Why don&#39;t you just use big.Rat?&lt;/h4&gt; &#xA;&lt;p&gt;big.Rat is fine for representing rational numbers, but Decimal is better for representing money. Why? Here&#39;s a (contrived) example:&lt;/p&gt; &#xA;&lt;p&gt;Let&#39;s say you use big.Rat, and you have two numbers, x and y, both representing 1/3, and you have &lt;code&gt;z = 1 - x - y = 1/3&lt;/code&gt;. If you print each one out, the string output has to stop somewhere (let&#39;s say it stops at 3 decimal digits, for simplicity), so you&#39;ll get 0.333, 0.333, and 0.333. But where did the other 0.001 go?&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s the above example as code: &lt;a href=&#34;http://play.golang.org/p/lCZZs0w9KE&#34;&gt;http://play.golang.org/p/lCZZs0w9KE&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;With Decimal, the strings being printed out represent the number exactly. So, if you have &lt;code&gt;x = y = 1/3&lt;/code&gt; (with precision 3), they will actually be equal to 0.333, and when you do &lt;code&gt;z = 1 - x - y&lt;/code&gt;, &lt;code&gt;z&lt;/code&gt; will be equal to .334. No money is unaccounted for!&lt;/p&gt; &#xA;&lt;p&gt;You still have to be careful. If you want to split a number &lt;code&gt;N&lt;/code&gt; 3 ways, you can&#39;t just send &lt;code&gt;N/3&lt;/code&gt; to three different people. You have to pick one to send &lt;code&gt;N - (2/3*N)&lt;/code&gt; to. That person will receive the fraction of a penny remainder.&lt;/p&gt; &#xA;&lt;p&gt;But, it is much easier to be careful with Decimal than with big.Rat.&lt;/p&gt; &#xA;&lt;h4&gt;Why isn&#39;t the API similar to big.Int&#39;s?&lt;/h4&gt; &#xA;&lt;p&gt;big.Int&#39;s API is built to reduce the number of memory allocations for maximal performance. This makes sense for its use-case, but the trade-off is that the API is awkward and easy to misuse.&lt;/p&gt; &#xA;&lt;p&gt;For example, to add two big.Ints, you do: &lt;code&gt;z := new(big.Int).Add(x, y)&lt;/code&gt;. A developer unfamiliar with this API might try to do &lt;code&gt;z := a.Add(a, b)&lt;/code&gt;. This modifies &lt;code&gt;a&lt;/code&gt; and sets &lt;code&gt;z&lt;/code&gt; as an alias for &lt;code&gt;a&lt;/code&gt;, which they might not expect. It also modifies any other aliases to &lt;code&gt;a&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s an example of the subtle bugs you can introduce with big.Int&#39;s API: &lt;a href=&#34;https://play.golang.org/p/x2R_78pa8r&#34;&gt;https://play.golang.org/p/x2R_78pa8r&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;In contrast, it&#39;s difficult to make such mistakes with decimal. Decimals behave like other go numbers types: even though &lt;code&gt;a = b&lt;/code&gt; will not deep copy &lt;code&gt;b&lt;/code&gt; into &lt;code&gt;a&lt;/code&gt;, it is impossible to modify a Decimal, since all Decimal methods return new Decimals and do not modify the originals. The downside is that this causes extra allocations, so Decimal is less performant. My assumption is that if you&#39;re using Decimals, you probably care more about correctness than performance.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The MIT License (MIT)&lt;/p&gt; &#xA;&lt;p&gt;This is a heavily modified fork of &lt;a href=&#34;https://github.com/oguzbilgic/fpd&#34;&gt;fpd.Decimal&lt;/a&gt;, which was also released under the MIT License.&lt;/p&gt;</summary>
  </entry>
</feed>