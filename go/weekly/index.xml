<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-11-12T01:48:27Z</updated>
  <subtitle>Weekly Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>gorilla/websocket</title>
    <updated>2023-11-12T01:48:27Z</updated>
    <id>tag:github.com,2023-11-12:/gorilla/websocket</id>
    <link href="https://github.com/gorilla/websocket" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Package gorilla/websocket is a fast, well-tested and widely used WebSocket implementation for Go.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;gorilla/websocket&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/gorilla/websocket/actions/workflows/test.yml/badge.svg?sanitize=true&#34; alt=&#34;testing&#34;&gt; &lt;a href=&#34;https://codecov.io/github/gorilla/websocket&#34;&gt;&lt;img src=&#34;https://codecov.io/github/gorilla/websocket/branch/main/graph/badge.svg?sanitize=true&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://godoc.org/github.com/gorilla/websocket&#34;&gt;&lt;img src=&#34;https://godoc.org/github.com/gorilla/websocket?status.svg?sanitize=true&#34; alt=&#34;godoc&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://sourcegraph.com/github.com/gorilla/websocket?badge&#34;&gt;&lt;img src=&#34;https://sourcegraph.com/github.com/gorilla/websocket/-/badge.svg?sanitize=true&#34; alt=&#34;sourcegraph&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Gorilla WebSocket is a &lt;a href=&#34;http://golang.org/&#34;&gt;Go&lt;/a&gt; implementation of the &lt;a href=&#34;http://www.rfc-editor.org/rfc/rfc6455.txt&#34;&gt;WebSocket&lt;/a&gt; protocol.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/gorilla/.github/assets/53367916/d92caabf-98e0-473e-bfbf-ab554ba435e5&#34; alt=&#34;Gorilla Logo&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Documentation&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/gorilla/websocket?tab=doc&#34;&gt;API Reference&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/gorilla/websocket/tree/main/examples/chat&#34;&gt;Chat example&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/gorilla/websocket/tree/main/examples/command&#34;&gt;Command example&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/gorilla/websocket/tree/main/examples/echo&#34;&gt;Client and server example&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/gorilla/websocket/tree/main/examples/filewatch&#34;&gt;File watch example&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/gorilla/websocket/tree/main/examples/bufferpool&#34;&gt;Write buffer pool example&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Status&lt;/h3&gt; &#xA;&lt;p&gt;The Gorilla WebSocket package provides a complete and tested implementation of the &lt;a href=&#34;http://www.rfc-editor.org/rfc/rfc6455.txt&#34;&gt;WebSocket&lt;/a&gt; protocol. The package API is stable.&lt;/p&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;go get github.com/gorilla/websocket&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Protocol Compliance&lt;/h3&gt; &#xA;&lt;p&gt;The Gorilla WebSocket package passes the server tests in the &lt;a href=&#34;https://github.com/crossbario/autobahn-testsuite&#34;&gt;Autobahn Test Suite&lt;/a&gt; using the application in the &lt;a href=&#34;https://github.com/gorilla/websocket/tree/main/examples/autobahn&#34;&gt;examples/autobahn subdirectory&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>p4gefau1t/trojan-go</title>
    <updated>2023-11-12T01:48:27Z</updated>
    <id>tag:github.com,2023-11-12:/p4gefau1t/trojan-go</id>
    <link href="https://github.com/p4gefau1t/trojan-go" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Go实现的Trojan代理，支持多路复用/路由功能/CDN中转/Shadowsocks混淆插件，多平台，无依赖。A Trojan proxy written in Go. An unidentifiable mechanism that helps you bypass GFW. https://p4gefau1t.github.io/trojan-go/&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Trojan-Go &lt;a href=&#34;https://goreportcard.com/report/github.com/p4gefau1t/trojan-go&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/p4gefau1t/trojan-go&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://img.shields.io/github/downloads/p4gefau1t/trojan-go/total?label=downloads&amp;amp;logo=github&amp;amp;style=flat-square&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/downloads/p4gefau1t/trojan-go/total?label=downloads&amp;amp;logo=github&amp;amp;style=flat-square&#34; alt=&#34;Downloads&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;使用 Go 实现的完整 Trojan 代理，兼容原版 Trojan 协议及配置文件格式。安全、高效、轻巧、易用。&lt;/p&gt; &#xA;&lt;p&gt;Trojan-Go 支持&lt;a href=&#34;https://raw.githubusercontent.com/p4gefau1t/trojan-go/master/#%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8&#34;&gt;多路复用&lt;/a&gt;提升并发性能；使用&lt;a href=&#34;https://raw.githubusercontent.com/p4gefau1t/trojan-go/master/#%E8%B7%AF%E7%94%B1%E6%A8%A1%E5%9D%97&#34;&gt;路由模块&lt;/a&gt;实现国内外分流；支持 &lt;a href=&#34;https://raw.githubusercontent.com/p4gefau1t/trojan-go/master/#Websocket&#34;&gt;CDN 流量中转&lt;/a&gt;(基于 WebSocket over TLS)；支持使用 AEAD 对 Trojan 流量进行&lt;a href=&#34;https://raw.githubusercontent.com/p4gefau1t/trojan-go/master/#aead-%E5%8A%A0%E5%AF%86&#34;&gt;二次加密&lt;/a&gt;(基于 Shadowsocks AEAD)；支持可插拔的&lt;a href=&#34;https://raw.githubusercontent.com/p4gefau1t/trojan-go/master/#%E4%BC%A0%E8%BE%93%E5%B1%82%E6%8F%92%E4%BB%B6&#34;&gt;传输层插件&lt;/a&gt;，允许替换 TLS，使用其他加密隧道传输 Trojan 协议流量。&lt;/p&gt; &#xA;&lt;p&gt;预编译二进制可执行文件可在 &lt;a href=&#34;https://github.com/p4gefau1t/trojan-go/releases&#34;&gt;Release 页面&lt;/a&gt;下载。解压后即可直接运行，无其他组件依赖。&lt;/p&gt; &#xA;&lt;p&gt;如遇到配置和使用问题、发现 bug，或是有更好的想法，欢迎加入 &lt;a href=&#34;https://t.me/trojan_go_chat&#34;&gt;Telegram 交流反馈群&lt;/a&gt;。&lt;/p&gt; &#xA;&lt;h2&gt;简介&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;完整介绍和配置教程，参见 &lt;a href=&#34;https://p4gefau1t.github.io/trojan-go&#34;&gt;Trojan-Go 文档&lt;/a&gt;。&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Trojan-Go 兼容原版 Trojan 的绝大多数功能，包括但不限于：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;TLS 隧道传输&lt;/li&gt; &#xA; &lt;li&gt;UDP 代理&lt;/li&gt; &#xA; &lt;li&gt;透明代理 (NAT 模式，iptables 设置参考&lt;a href=&#34;https://github.com/shadowsocks/shadowsocks-libev/tree/v3.3.1#transparent-proxy&#34;&gt;这里&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;对抗 GFW 被动检测 / 主动检测的机制&lt;/li&gt; &#xA; &lt;li&gt;MySQL 数据持久化方案&lt;/li&gt; &#xA; &lt;li&gt;MySQL 用户权限认证&lt;/li&gt; &#xA; &lt;li&gt;用户流量统计和配额限制&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;同时，Trojan-Go 还扩展实现了更多高效易用的功能特性：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;便于快速部署的「简易模式」&lt;/li&gt; &#xA; &lt;li&gt;Socks5 / HTTP 代理自动适配&lt;/li&gt; &#xA; &lt;li&gt;基于 TProxy 的透明代理（TCP / UDP）&lt;/li&gt; &#xA; &lt;li&gt;全平台支持，无特殊依赖&lt;/li&gt; &#xA; &lt;li&gt;基于多路复用（smux）降低延迟，提升并发性能&lt;/li&gt; &#xA; &lt;li&gt;自定义路由模块，可实现国内外分流 / 广告屏蔽等功能&lt;/li&gt; &#xA; &lt;li&gt;Websocket 传输支持，以实现 CDN 流量中转（基于 WebSocket over TLS）和对抗 GFW 中间人攻击&lt;/li&gt; &#xA; &lt;li&gt;TLS 指纹伪造，以对抗 GFW 针对 TLS Client Hello 的特征识别&lt;/li&gt; &#xA; &lt;li&gt;基于 gRPC 的 API 支持，以实现用户管理和速度限制等&lt;/li&gt; &#xA; &lt;li&gt;可插拔传输层，可将 TLS 替换为其他协议或明文传输，同时有完整的 Shadowsocks 混淆插件支持&lt;/li&gt; &#xA; &lt;li&gt;支持对用户更友好的 YAML 配置文件格式&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;图形界面客户端&lt;/h2&gt; &#xA;&lt;p&gt;Trojan-Go 服务端兼容所有原 Trojan 客户端，如 Igniter、ShadowRocket 等。以下是支持 Trojan-Go 扩展特性（Websocket / Mux 等）的客户端：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Qv2ray/Qv2ray&#34;&gt;Qv2ray&lt;/a&gt;：跨平台客户端，支持 Windows / macOS / Linux，使用 Trojan-Go 核心，支持所有 Trojan-Go 扩展特性。&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/p4gefau1t/trojan-go-android&#34;&gt;Igniter-Go&lt;/a&gt;：Android 客户端，Fork 自 Igniter，将 Igniter 核心替换为 Trojan-Go 并做了一定修改，支持所有 Trojan-Go 扩展特性。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;使用方法&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;快速启动服务端和客户端（简易模式）&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;服务端&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo ./trojan-go -server -remote 127.0.0.1:80 -local 0.0.0.0:443 -key ./your_key.key -cert ./your_cert.crt -password your_password&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;客户端&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;./trojan-go -client -remote example.com:443 -local 127.0.0.1:1080 -password your_password&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;使用配置文件启动客户端 / 服务端 / 透明代理 / 中继（一般模式）&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;./trojan-go -config config.json&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;使用 URL 启动客户端（格式参见文档）&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;./trojan-go -url &#39;trojan-go://password@cloudflare.com/?type=ws&amp;amp;path=%2Fpath&amp;amp;host=your-site.com&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;使用 Docker 部署&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker run \&#xA;    --name trojan-go \&#xA;    -d \&#xA;    -v /etc/trojan-go/:/etc/trojan-go \&#xA;    --network host \&#xA;    p4gefau1t/trojan-go&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;或者&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker run \&#xA;    --name trojan-go \&#xA;    -d \&#xA;    -v /path/to/host/config:/path/in/container \&#xA;    --network host \&#xA;    p4gefau1t/trojan-go \&#xA;    /path/in/container/config.json&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;特性&lt;/h2&gt; &#xA;&lt;p&gt;一般情况下，Trojan-Go 和 Trojan 是互相兼容的，但一旦使用下面介绍的扩展特性（如多路复用、Websocket 等），则无法兼容。&lt;/p&gt; &#xA;&lt;h3&gt;移植性&lt;/h3&gt; &#xA;&lt;p&gt;编译得到的 Trojan-Go 单个可执行文件不依赖其他组件。同时，你可以很方便地编译（或交叉编译） Trojan-Go，然后在你的服务器、PC、树莓派，甚至路由器上部署；可以方便地使用 build tag 删减模块，以缩小可执行文件体积。&lt;/p&gt; &#xA;&lt;p&gt;例如，交叉编译一个可在 mips 处理器、Linux 操作系统上运行的、只有客户端功能的 Trojan-Go，只需执行下面的命令，得到的可执行文件可以直接在目标平台运行：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;CGO_ENABLED=0 GOOS=linux GOARCH=mips go build -tags &#34;client&#34; -trimpath -ldflags &#34;-s -w -buildid=&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;完整的 tag 说明参见 &lt;a href=&#34;https://p4gefau1t.github.io/trojan-go&#34;&gt;Trojan-Go 文档&lt;/a&gt;。&lt;/p&gt; &#xA;&lt;h3&gt;易用&lt;/h3&gt; &#xA;&lt;p&gt;配置文件格式与原版 Trojan 兼容，但做了大幅简化，未指定的字段会被赋予默认值，由此可以更方便地部署服务端和客户端。以下是一个简单例子，完整的配置文件可以参见&lt;a href=&#34;https://p4gefau1t.github.io/trojan-go&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt; &#xA;&lt;p&gt;服务端配置文件 &lt;code&gt;server.json&lt;/code&gt;：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;run_type&#34;: &#34;server&#34;,&#xA;  &#34;local_addr&#34;: &#34;0.0.0.0&#34;,&#xA;  &#34;local_port&#34;: 443,&#xA;  &#34;remote_addr&#34;: &#34;127.0.0.1&#34;,&#xA;  &#34;remote_port&#34;: 80,&#xA;  &#34;password&#34;: [&#34;your_awesome_password&#34;],&#xA;  &#34;ssl&#34;: {&#xA;    &#34;cert&#34;: &#34;your_cert.crt&#34;,&#xA;    &#34;key&#34;: &#34;your_key.key&#34;,&#xA;    &#34;sni&#34;: &#34;www.your-awesome-domain-name.com&#34;&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;客户端配置文件 &lt;code&gt;client.json&lt;/code&gt;：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;run_type&#34;: &#34;client&#34;,&#xA;  &#34;local_addr&#34;: &#34;127.0.0.1&#34;,&#xA;  &#34;local_port&#34;: 1080,&#xA;  &#34;remote_addr&#34;: &#34;www.your-awesome-domain-name.com&#34;,&#xA;  &#34;remote_port&#34;: 443,&#xA;  &#34;password&#34;: [&#34;your_awesome_password&#34;]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;可以使用更简明易读的 YAML 语法进行配置。以下是一个客户端的例子，与上面的 &lt;code&gt;client.json&lt;/code&gt; 等价：&lt;/p&gt; &#xA;&lt;p&gt;客户端配置文件 &lt;code&gt;client.yaml&lt;/code&gt;：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;run-type: client&#xA;local-addr: 127.0.0.1&#xA;local-port: 1080&#xA;remote-addr: www.your-awesome-domain_name.com&#xA;remote-port: 443&#xA;password:&#xA;  - your_awesome_password&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;WebSocket&lt;/h3&gt; &#xA;&lt;p&gt;Trojan-Go 支持使用 TLS + Websocket 承载 Trojan 协议，使得利用 CDN 进行流量中转成为可能。&lt;/p&gt; &#xA;&lt;p&gt;服务端和客户端配置文件中同时添加 &lt;code&gt;websocket&lt;/code&gt; 选项即可启用 Websocket 支持，例如&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&#34;websocket&#34;: {&#xA;    &#34;enabled&#34;: true,&#xA;    &#34;path&#34;: &#34;/your-websocket-path&#34;,&#xA;    &#34;hostname&#34;: &#34;www.your-awesome-domain-name.com&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;完整的选项说明参见 &lt;a href=&#34;https://p4gefau1t.github.io/trojan-go&#34;&gt;Trojan-Go 文档&lt;/a&gt;。&lt;/p&gt; &#xA;&lt;p&gt;可以省略 &lt;code&gt;hostname&lt;/code&gt;, 但服务端和客户端的 &lt;code&gt;path&lt;/code&gt; 必须一致。服务端开启 Websocket 支持后，可以同时支持 Websocket 和一般 Trojan 流量。未配置 Websocket 选项的客户端依然可以正常使用。&lt;/p&gt; &#xA;&lt;p&gt;由于 Trojan 并不支持 Websocket，因此，虽然开启了 Websocket 支持的 Trojan-Go 服务端可以兼容所有客户端，但如果要使用 Websocket 承载流量，请确保双方都使用 Trojan-Go。&lt;/p&gt; &#xA;&lt;h3&gt;多路复用&lt;/h3&gt; &#xA;&lt;p&gt;在很差的网络条件下，一次 TLS 握手可能会花费很多时间。Trojan-Go 支持多路复用（基于 &lt;a href=&#34;https://github.com/xtaci/smux&#34;&gt;smux&lt;/a&gt;），通过一条 TLS 隧道连接承载多条 TCP 连接的方式，减少 TCP 和 TLS 握手带来的延迟，以期提升高并发情景下的性能。&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;启用多路复用并不能提高测速得到的链路速度，但能降低延迟、提升大量并发请求时的网络体验，例如浏览含有大量图片的网页等。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;你可以通过设置客户端的 &lt;code&gt;mux&lt;/code&gt; 选项 &lt;code&gt;enabled&lt;/code&gt; 字段启用它：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&#34;mux&#34;: {&#xA;    &#34;enabled&#34;: true&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;只需开启客户端 mux 配置即可，服务端会自动检测是否启用多路复用并提供支持。完整的选项说明参见 &lt;a href=&#34;https://p4gefau1t.github.io/trojan-go&#34;&gt;Trojan-Go 文档&lt;/a&gt;。&lt;/p&gt; &#xA;&lt;h3&gt;路由模块&lt;/h3&gt; &#xA;&lt;p&gt;Trojan-Go 客户端内建一个简单实用的路由模块，以方便实现国内直连、海外代理等自定义路由功能。&lt;/p&gt; &#xA;&lt;p&gt;路由策略有三种：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Proxy&lt;/code&gt; 代理：将请求通过 TLS 隧道进行代理，由 Trojan 服务端与目的地址进行连接。&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Bypass&lt;/code&gt; 绕过：直接使用本地设备与目的地址进行连接。&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Block&lt;/code&gt; 封锁：不发送请求，直接关闭连接。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;要激活路由模块，请在配置文件中添加 &lt;code&gt;router&lt;/code&gt; 选项，并设置 &lt;code&gt;enabled&lt;/code&gt; 字段为 &lt;code&gt;true&lt;/code&gt;：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&#34;router&#34;: {&#xA;    &#34;enabled&#34;: true,&#xA;    &#34;bypass&#34;: [&#xA;        &#34;geoip:cn&#34;,&#xA;        &#34;geoip:private&#34;,&#xA;        &#34;full:localhost&#34;&#xA;    ],&#xA;    &#34;block&#34;: [&#xA;        &#34;cidr:192.168.1.1/24&#34;,&#xA;    ],&#xA;    &#34;proxy&#34;: [&#xA;        &#34;domain:google.com&#34;,&#xA;    ],&#xA;    &#34;default_policy&#34;: &#34;proxy&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;完整的选项说明参见 &lt;a href=&#34;https://p4gefau1t.github.io/trojan-go&#34;&gt;Trojan-Go 文档&lt;/a&gt;。&lt;/p&gt; &#xA;&lt;h3&gt;AEAD 加密&lt;/h3&gt; &#xA;&lt;p&gt;Trojan-Go 支持基于 Shadowsocks AEAD 对 Trojan 协议流量进行二次加密，以保证 Websocket 传输流量无法被不可信的 CDN 识别和审查：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&#34;shadowsocks&#34;: {&#xA;    &#34;enabled&#34;: true,&#xA;    &#34;password&#34;: &#34;my-password&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;如需开启，服务端和客户端必须同时开启并保证密码一致。&lt;/p&gt; &#xA;&lt;h3&gt;传输层插件&lt;/h3&gt; &#xA;&lt;p&gt;Trojan-Go 支持可插拔的传输层插件，并支持 Shadowsocks &lt;a href=&#34;https://shadowsocks.org/en/wiki/Plugin.html&#34;&gt;SIP003&lt;/a&gt; 标准的混淆插件。下面是使用 &lt;code&gt;v2ray-plugin&lt;/code&gt; 的一个例子：&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;此配置并不安全，仅作为演示&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;服务端配置：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&#34;transport_plugin&#34;: {&#xA;    &#34;enabled&#34;: true,&#xA;    &#34;type&#34;: &#34;shadowsocks&#34;,&#xA;    &#34;command&#34;: &#34;./v2ray-plugin&#34;,&#xA;    &#34;arg&#34;: [&#34;-server&#34;, &#34;-host&#34;, &#34;www.baidu.com&#34;]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;客户端配置：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&#34;transport_plugin&#34;: {&#xA;    &#34;enabled&#34;: true,&#xA;    &#34;type&#34;: &#34;shadowsocks&#34;,&#xA;    &#34;command&#34;: &#34;./v2ray-plugin&#34;,&#xA;    &#34;arg&#34;: [&#34;-host&#34;, &#34;www.baidu.com&#34;]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;完整的选项说明参见 &lt;a href=&#34;https://p4gefau1t.github.io/trojan-go&#34;&gt;Trojan-Go 文档&lt;/a&gt;。&lt;/p&gt; &#xA;&lt;h2&gt;构建&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;请确保 Go 版本 &amp;gt;= 1.14&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;使用 &lt;code&gt;make&lt;/code&gt; 进行编译：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git clone https://github.com/p4gefau1t/trojan-go.git&#xA;cd trojan-go&#xA;make&#xA;make install #安装systemd服务等，可选&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;或者使用 Go 自行编译：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;go build -tags &#34;full&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Go 支持通过设置环境变量进行交叉编译，例如：&lt;/p&gt; &#xA;&lt;p&gt;编译适用于 64 位 Windows 操作系统的可执行文件：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;CGO_ENABLED=0 GOOS=windows GOARCH=amd64 go build -tags &#34;full&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;编译适用于 Apple Silicon 的可执行文件：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;CGO_ENABLED=0 GOOS=macos GOARCH=arm64 go build -tags &#34;full&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;编译适用于 64 位 Linux 操作系统的可执行文件：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -tags &#34;full&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;致谢&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/trojan-gfw/trojan&#34;&gt;Trojan&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/v2fly&#34;&gt;V2Fly&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/refraction-networking/utls&#34;&gt;utls&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/xtaci/smux&#34;&gt;smux&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/LiamHaworth/go-tproxy&#34;&gt;go-tproxy&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Stargazers over time&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://starchart.cc/p4gefau1t/trojan-go&#34;&gt;&lt;img src=&#34;https://starchart.cc/p4gefau1t/trojan-go.svg?sanitize=true&#34; alt=&#34;Stargazers over time&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>v2fly/domain-list-community</title>
    <updated>2023-11-12T01:48:27Z</updated>
    <id>tag:github.com,2023-11-12:/v2fly/domain-list-community</id>
    <link href="https://github.com/v2fly/domain-list-community" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Community managed domain list. Generate geosite.dat for V2Ray.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Domain list community&lt;/h1&gt; &#xA;&lt;p&gt;This project manages a list of domains, to be used as geosites for routing purpose in Project V.&lt;/p&gt; &#xA;&lt;h2&gt;Purpose of this project&lt;/h2&gt; &#xA;&lt;p&gt;This project is not opinionated. In other words, it does NOT endorse, claim or imply that a domain should be blocked or proxied. It can be used to generate routing rules on demand.&lt;/p&gt; &#xA;&lt;h2&gt;Download links&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;dlc.dat&lt;/strong&gt;：&lt;a href=&#34;https://github.com/v2fly/domain-list-community/releases/latest/download/dlc.dat&#34;&gt;https://github.com/v2fly/domain-list-community/releases/latest/download/dlc.dat&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;dlc.dat.sha256sum&lt;/strong&gt;：&lt;a href=&#34;https://github.com/v2fly/domain-list-community/releases/latest/download/dlc.dat.sha256sum&#34;&gt;https://github.com/v2fly/domain-list-community/releases/latest/download/dlc.dat.sha256sum&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage example&lt;/h2&gt; &#xA;&lt;p&gt;Each file in the &lt;code&gt;data&lt;/code&gt; directory can be used as a rule in this format: &lt;code&gt;geosite:filename&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&#34;routing&#34;: {&#xA;  &#34;domainStrategy&#34;: &#34;IPIfNonMatch&#34;,&#xA;  &#34;rules&#34;: [&#xA;    {&#xA;      &#34;type&#34;: &#34;field&#34;,&#xA;      &#34;outboundTag&#34;: &#34;Reject&#34;,&#xA;      &#34;domain&#34;: [&#xA;        &#34;geosite:category-ads-all&#34;,&#xA;        &#34;geosite:category-porn&#34;&#xA;      ]&#xA;    },&#xA;    {&#xA;      &#34;type&#34;: &#34;field&#34;,&#xA;      &#34;outboundTag&#34;: &#34;Direct&#34;,&#xA;      &#34;domain&#34;: [&#xA;        &#34;domain:icloud.com&#34;,&#xA;        &#34;domain:icloud-content.com&#34;,&#xA;        &#34;domain:cdn-apple.com&#34;,&#xA;        &#34;geosite:cn&#34;,&#xA;        &#34;geosite:private&#34;&#xA;      ]&#xA;    },&#xA;    {&#xA;      &#34;type&#34;: &#34;field&#34;,&#xA;      &#34;outboundTag&#34;: &#34;Proxy-1&#34;,&#xA;      &#34;domain&#34;: [&#xA;        &#34;geosite:category-anticensorship&#34;,&#xA;        &#34;geosite:category-media&#34;,&#xA;        &#34;geosite:category-vpnservices&#34;&#xA;      ]&#xA;    },&#xA;    {&#xA;      &#34;type&#34;: &#34;field&#34;,&#xA;      &#34;outboundTag&#34;: &#34;Proxy-2&#34;,&#xA;      &#34;domain&#34;: [&#xA;        &#34;geosite:category-dev&#34;&#xA;      ]&#xA;    },&#xA;    {&#xA;      &#34;type&#34;: &#34;field&#34;,&#xA;      &#34;outboundTag&#34;: &#34;Proxy-3&#34;,&#xA;      &#34;domain&#34;: [&#xA;        &#34;geosite:geolocation-!cn&#34;&#xA;      ]&#xA;    }&#xA;  ]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Generate &lt;code&gt;dlc.dat&lt;/code&gt; manually&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install &lt;code&gt;golang&lt;/code&gt; and &lt;code&gt;git&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Clone project code: &lt;code&gt;git clone https://github.com/v2fly/domain-list-community.git&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Navigate to project root directory: &lt;code&gt;cd domain-list-community&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Install project dependencies: &lt;code&gt;go mod download&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Generate &lt;code&gt;dlc.dat&lt;/code&gt; (without &lt;code&gt;datapath&lt;/code&gt; option means to use domain lists in &lt;code&gt;data&lt;/code&gt; directory of current working directory): &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;go run ./&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;go run ./ --datapath=/path/to/your/custom/data/directory&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Run &lt;code&gt;go run ./ --help&lt;/code&gt; for more usage information.&lt;/p&gt; &#xA;&lt;h2&gt;Structure of data&lt;/h2&gt; &#xA;&lt;p&gt;All data are under &lt;code&gt;data&lt;/code&gt; directory. Each file in the directory represents a sub-list of domains, named by the file name. File content is in the following format.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# comments&#xA;include:another-file&#xA;domain:google.com @attr1 @attr2&#xA;keyword:google&#xA;regexp:www\.google\.com$&#xA;full:www.google.com&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Syntax:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;The following types of rules are &lt;strong&gt;NOT&lt;/strong&gt; fully compatible with the ones that defined by user in V2Ray config file. Do &lt;strong&gt;Not&lt;/strong&gt; copy and paste directly.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Comment begins with &lt;code&gt;#&lt;/code&gt;. It may begin anywhere in the file. The content in the line after &lt;code&gt;#&lt;/code&gt; is treated as comment and ignored in production.&lt;/li&gt; &#xA; &lt;li&gt;Inclusion begins with &lt;code&gt;include:&lt;/code&gt;, followed by the file name of an existing file in the same directory.&lt;/li&gt; &#xA; &lt;li&gt;Subdomain begins with &lt;code&gt;domain:&lt;/code&gt;, followed by a valid domain name. The prefix &lt;code&gt;domain:&lt;/code&gt; may be omitted.&lt;/li&gt; &#xA; &lt;li&gt;Keyword begins with &lt;code&gt;keyword:&lt;/code&gt;, followed by a string.&lt;/li&gt; &#xA; &lt;li&gt;Regular expression begins with &lt;code&gt;regexp:&lt;/code&gt;, followed by a valid regular expression (per Golang&#39;s standard).&lt;/li&gt; &#xA; &lt;li&gt;Full domain begins with &lt;code&gt;full:&lt;/code&gt;, followed by a complete and valid domain name.&lt;/li&gt; &#xA; &lt;li&gt;Domains (including &lt;code&gt;domain&lt;/code&gt;, &lt;code&gt;keyword&lt;/code&gt;, &lt;code&gt;regexp&lt;/code&gt; and &lt;code&gt;full&lt;/code&gt;) may have one or more attributes. Each attribute begins with &lt;code&gt;@&lt;/code&gt; and followed by the name of the attribute.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How it works&lt;/h2&gt; &#xA;&lt;p&gt;The entire &lt;code&gt;data&lt;/code&gt; directory will be built into an external &lt;code&gt;geosite&lt;/code&gt; file for Project V. Each file in the directory represents a section in the generated file.&lt;/p&gt; &#xA;&lt;p&gt;To generate a section:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Remove all the comments in the file.&lt;/li&gt; &#xA; &lt;li&gt;Replace &lt;code&gt;include:&lt;/code&gt; lines with the actual content of the file.&lt;/li&gt; &#xA; &lt;li&gt;Omit all empty lines.&lt;/li&gt; &#xA; &lt;li&gt;Generate each &lt;code&gt;domain:&lt;/code&gt; line into a &lt;a href=&#34;https://github.com/v2fly/v2ray-core/raw/master/app/router/config.proto#L21&#34;&gt;sub-domain routing rule&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Generate each &lt;code&gt;keyword:&lt;/code&gt; line into a &lt;a href=&#34;https://github.com/v2fly/v2ray-core/raw/master/app/router/config.proto#L17&#34;&gt;plain domain routing rule&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Generate each &lt;code&gt;regexp:&lt;/code&gt; line into a &lt;a href=&#34;https://github.com/v2fly/v2ray-core/raw/master/app/router/config.proto#L19&#34;&gt;regex domain routing rule&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Generate each &lt;code&gt;full:&lt;/code&gt; line into a &lt;a href=&#34;https://github.com/v2fly/v2ray-core/raw/master/app/router/config.proto#L23&#34;&gt;full domain routing rule&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;How to organize domains&lt;/h2&gt; &#xA;&lt;h3&gt;File name&lt;/h3&gt; &#xA;&lt;p&gt;Theoretically any string can be used as the name, as long as it is a valid file name. In practice, we prefer names for determinic group of domains, such as the owner (usually a company name) of the domains, e.g., &#34;google&#34;, &#34;netflix&#34;. Names with unclear scope are generally unrecommended, such as &#34;evil&#34;, or &#34;local&#34;.&lt;/p&gt; &#xA;&lt;h3&gt;Attributes&lt;/h3&gt; &#xA;&lt;p&gt;Attribute is useful for sub-group of domains, especially for filtering purpose. For example, the list of &lt;code&gt;google&lt;/code&gt; domains may contains its main domains, as well as domains that serve ads. The ads domains may be marked by attribute &lt;code&gt;@ads&lt;/code&gt;, and can be used as &lt;code&gt;geosite:google@ads&lt;/code&gt; in V2Ray routing.&lt;/p&gt; &#xA;&lt;h2&gt;Contribution guideline&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fork this repo, make modifications to your own repo, file a PR.&lt;/li&gt; &#xA; &lt;li&gt;Please begin with small size PRs, say modification in a single file.&lt;/li&gt; &#xA; &lt;li&gt;A PR must be reviewed and approved by another member.&lt;/li&gt; &#xA; &lt;li&gt;A script will verify your pull request to test whether your PR is correct or not every time you update the PR. Only the PR which passes the test will be merged. Please go to the Action label to get detailed information if you didn&#39;t pass it. We also provide the file which has been generated to make you test.&lt;/li&gt; &#xA; &lt;li&gt;After a few successful PRs, you may apply for manager access to this repository.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>