<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-03-16T01:44:08Z</updated>
  <subtitle>Weekly Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>usual2970/certimate</title>
    <updated>2025-03-16T01:44:08Z</updated>
    <id>tag:github.com,2025-03-16:/usual2970/certimate</id>
    <link href="https://github.com/usual2970/certimate" rel="alternate"></link>
    <summary type="html">&lt;p&gt;开源的SSL证书管理工具，可以帮助你自动申请、部署SSL证书，并在证书即将过期时自动续期。An open-source SSL certificate management tool that helps you automatically apply for and deploy SSL certificates, as well as automatically renew them when they are about to expire.&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt;🔒 Certimate&lt;/h1&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/usual2970/certimate&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/usual2970/certimate?style=flat&#34; alt=&#34;Stars&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/usual2970/certimate&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/forks/usual2970/certimate?style=flat&#34; alt=&#34;Forks&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/usual2970/certimate&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/pulls/usual2970/certimate?style=flat&#34; alt=&#34;Docker Pulls&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/usual2970/certimate/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/usual2970/certimate?sort=semver&#34; alt=&#34;Release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://mit-license.org/&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/usual2970/certimate&#34; alt=&#34;License&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt;中文 ｜ &lt;a href=&#34;https://raw.githubusercontent.com/usual2970/certimate/main/README_EN.md&#34;&gt;English&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;🚩 项目简介&lt;/h2&gt; &#xA;&lt;p&gt;做个人产品或者在中小企业里负责运维的同学，会遇到要管理多个域名的情况，需要给域名申请证书。但是手动申请证书有以下缺点：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;😱 麻烦：申请证书并部署到服务的流程虽不复杂，但也挺麻烦的，犹其是你有多个域名需要维护的时候。&lt;/li&gt; &#xA; &lt;li&gt;😭 易忘：另外当前免费证书的有效期只有 90 天，这就要求你定期的操作，增加了工作量的同时，你也很容易忘掉续期，从而导致网站访问不了。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Certimate 就是为了解决上述问题而产生的，它具有以下优势：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;本地部署&lt;/strong&gt;：一键安装，只需要下载二进制文件，然后直接运行即可。同时也支持 Docker 部署、源代码部署等方式。​&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;数据安全&lt;/strong&gt;：由于是私有部署，所有数据均存储在自己的服务器上，不会经过第三方，确保数据的隐私和安全。​&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;操作简单&lt;/strong&gt;：简单配置即可轻松申请 SSL 证书并部署到指定的目标上，在证书即将过期前自动续期，从申请证书到使用证书完全自动化，无需人工操作。​&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Certimate 旨在为用户提供一个安全、简便的 SSL 证书管理解决方案。&lt;/p&gt; &#xA;&lt;h2&gt;💡 功能特性&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;灵活的工作流编排方式，证书从申请到部署完全自动化；&lt;/li&gt; &#xA; &lt;li&gt;支持单域名、多域名、泛域名证书，可选 RSA、ECC 签名算法；&lt;/li&gt; &#xA; &lt;li&gt;支持 PEM、PFX、JKS 等多种格式输出证书；&lt;/li&gt; &#xA; &lt;li&gt;支持 20+ 域名托管商（如阿里云、腾讯云、Cloudflare 等，&lt;a href=&#34;https://docs.certimate.me/docs/reference/providers#supported-dns-providers&#34;&gt;点此查看&lt;/a&gt;完整提供商清单）；&lt;/li&gt; &#xA; &lt;li&gt;支持 60+ 部署目标（如 Kubernetes、CDN、WAF、负载均衡等，&lt;a href=&#34;https://docs.certimate.me/docs/reference/providers#supported-host-providers&#34;&gt;点此查看&lt;/a&gt;完整提供商清单）；&lt;/li&gt; &#xA; &lt;li&gt;支持邮件、钉钉、飞书、企业微信、Webhook 等多种通知渠道；&lt;/li&gt; &#xA; &lt;li&gt;支持 Let&#39;s Encrypt、ZeroSSL、Google Trust Services 等多种 ACME 证书颁发机构；&lt;/li&gt; &#xA; &lt;li&gt;更多特性等待探索。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;⏱️ 快速启动&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;5 分钟部署 Certimate！&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;以二进制部署为例，从 &lt;a href=&#34;https://github.com/usual2970/certimate/releases&#34;&gt;GitHub Releases&lt;/a&gt; 页面下载预先编译好的二进制可执行文件压缩包，解压缩后在终端中执行：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./certimate serve&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;浏览器中访问 &lt;code&gt;http://127.0.0.1:8090&lt;/code&gt;。&lt;/p&gt; &#xA;&lt;p&gt;初始的管理员账号及密码：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;账号：&lt;code&gt;admin@certimate.fun&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;密码：&lt;code&gt;1234567890&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;即刻使用 Certimate。&lt;/p&gt; &#xA;&lt;p&gt;如何使用 Docker 或其他部署方式请参考文档。&lt;/p&gt; &#xA;&lt;h2&gt;📄 使用手册&lt;/h2&gt; &#xA;&lt;p&gt;请访问文档站 &lt;a href=&#34;https://docs.certimate.me/&#34;&gt;docs.certimate.me&lt;/a&gt; 以阅读使用手册。&lt;/p&gt; &#xA;&lt;p&gt;相关文章：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.certimate.me/blog/cname&#34;&gt;使用 CNAME 实现 DNS-01 challenge&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.certimate.me/blog/v0.3.0&#34;&gt;v0.3.0：第二个不向后兼容的大版本&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.certimate.me/blog/v0.2.0&#34;&gt;v0.2.0：第一个不向后兼容的大版本&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.certimate.me/blog/why-certimate&#34;&gt;Why Certimate?&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;⭐ 运行界面&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV1xockeZEm2&#34;&gt;&lt;img src=&#34;https://i.imgur.com/4DAUKEE.gif&#34; alt=&#34;Screenshot&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;🤝 参与贡献&lt;/h2&gt; &#xA;&lt;p&gt;Certimate 是一个免费且开源的项目，采用 &lt;a href=&#34;https://raw.githubusercontent.com/usual2970/certimate/main/LICENSE.md&#34;&gt;MIT License&lt;/a&gt;。你可以使用它做任何你想做的事，甚至把它当作一个付费服务提供给用户。&lt;/p&gt; &#xA;&lt;p&gt;你可以通过以下方式来支持 Certimate 的开发：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;提交代码：如果你发现了 Bug 或有新的功能需求，而你又有相关经验，可以&lt;a href=&#34;https://raw.githubusercontent.com/usual2970/certimate/main/CONTRIBUTING.md&#34;&gt;提交代码&lt;/a&gt;给我们。&lt;/li&gt; &#xA; &lt;li&gt;提交 Issue：功能建议或者 Bug 可以&lt;a href=&#34;https://github.com/usual2970/certimate/issues&#34;&gt;提交 Issue&lt;/a&gt; 给我们。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;支持更多提供商、UI 的优化改进、Bug 修复、文档完善等，欢迎大家参与贡献。&lt;/p&gt; &#xA;&lt;h2&gt;⛔ 免责声明&lt;/h2&gt; &#xA;&lt;p&gt;Certimate 基于 &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;MIT License&lt;/a&gt; 发布，完全免费提供，旨在“按现状”供用户使用。作者及贡献者不对使用本软件所产生的任何直接或间接后果承担责任，包括但不限于性能下降、数据丢失、服务中断、或任何其他类型的损害。&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;无任何保证&lt;/strong&gt;：本软件不提供任何明示或暗示的保证，包括但不限于对特定用途的适用性、无侵权性、商用性及可靠性的保证。&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;用户责任&lt;/strong&gt;：使用本软件即表示您理解并同意承担由此产生的一切风险及责任。&lt;/p&gt; &#xA;&lt;h2&gt;🌐 加入社群&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://t.me/+ZXphsppxUg41YmVl&#34;&gt;Telegram&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;微信群聊（超 200 人需邀请入群，可先加作者好友）&lt;/p&gt; &lt;img src=&#34;https://i.imgur.com/8xwsLTA.png&#34; width=&#34;240&#34;&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;🚀 Star 趋势图&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://starchart.cc/usual2970/certimate&#34;&gt;&lt;img src=&#34;https://starchart.cc/usual2970/certimate.svg?variant=adaptive&#34; alt=&#34;Stargazers over time&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>evrone/go-clean-template</title>
    <updated>2025-03-16T01:44:08Z</updated>
    <id>tag:github.com,2025-03-16:/evrone/go-clean-template</id>
    <link href="https://github.com/evrone/go-clean-template" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Clean Architecture template for Golang services&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/evrone/go-clean-template/master/docs/img/logo.svg?sanitize=true&#34; alt=&#34;Go Clean Template&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Go Clean template&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/evrone/go-clean-template/master/README_CN.md&#34;&gt;🇨🇳 中文&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/evrone/go-clean-template/master/README_RU.md&#34;&gt;🇷🇺 RU&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Clean Architecture template for Golang services&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://goreportcard.com/report/github.com/evrone/go-clean-template&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/evrone/go-clean-template&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/evrone/go-clean-template/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/evrone/go-clean-template.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/evrone/go-clean-template/releases/&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/evrone/go-clean-template.svg?sanitize=true&#34; alt=&#34;Release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/evrone/go-clean-template&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/evrone/go-clean-template/branch/master/graph/badge.svg?token=XE3E0X3EVQ&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;The purpose of the template is to show:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;how to organize a project and prevent it from turning into spaghetti code&lt;/li&gt; &#xA; &lt;li&gt;where to store business logic so that it remains independent, clean, and extensible&lt;/li&gt; &#xA; &lt;li&gt;how not to lose control when a microservice grows&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Using the principles of Robert Martin (aka Uncle Bob).&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://evrone.com/go-clean-template?utm_source=github&amp;amp;utm_campaign=go-clean-template&#34;&gt;Go-clean-template&lt;/a&gt; is created &amp;amp; supported by &lt;a href=&#34;https://evrone.com/?utm_source=github&amp;amp;utm_campaign=go-clean-template&#34;&gt;Evrone&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Content&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/evrone/go-clean-template/master/#quick-start&#34;&gt;Quick start&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/evrone/go-clean-template/master/#project-structure&#34;&gt;Project structure&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/evrone/go-clean-template/master/#dependency-injection&#34;&gt;Dependency Injection&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/evrone/go-clean-template/master/#clean-architecture&#34;&gt;Clean Architecture&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Quick start&lt;/h2&gt; &#xA;&lt;h3&gt;Local development&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Postgres, RabbitMQ&#xA;make compose-up&#xA;# Run app with migrations&#xA;make run&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Integration tests (can be run in CI)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# DB, app + migrations, integration tests&#xA;make compose-up-integration-test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Full docker stack with reverse proxy&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;make compose-up-all &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Check URL&#39;s:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://app.lvh.me/healthz&#34;&gt;http://app.lvh.me/healthz&lt;/a&gt; | &lt;a href=&#34;http://app.lvh.me/metrics&#34;&gt;http://app.lvh.me/metrics&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://rabbitmq.lvh.me&#34;&gt;http://rabbitmq.lvh.me&lt;/a&gt; (&lt;code&gt;guest&lt;/code&gt;/&lt;code&gt;guest&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Project structure&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;code&gt;cmd/app/main.go&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Configuration and logger initialization. Then the main function &#34;continues&#34; in &lt;code&gt;internal/app/app.go&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;config&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;The twelve-factor app stores config in environment variables (often shortened to &lt;code&gt;env vars&lt;/code&gt; or &lt;code&gt;env&lt;/code&gt;). Env vars are easy to change between deploys without changing any code; unlike config files, there is little chance of them being checked into the code repo accidentally; and unlike custom config files, or other config mechanisms such as Java System Properties, they are a language- and OS-agnostic standard.&lt;/p&gt; &#xA;&lt;p&gt;Config: &lt;a href=&#34;https://raw.githubusercontent.com/evrone/go-clean-template/master/config/config.go&#34;&gt;config.go&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Example: &lt;a href=&#34;https://raw.githubusercontent.com/evrone/go-clean-template/master/.env.example&#34;&gt;.env.example&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/evrone/go-clean-template/master/docker-compose.yml&#34;&gt;docker-compose.yml&lt;/a&gt; uses &lt;code&gt;env&lt;/code&gt; variables to configure services.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;docs&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Swagger documentation. Auto-generated by &lt;a href=&#34;https://github.com/swaggo/swag&#34;&gt;swag&lt;/a&gt; library. You don&#39;t need to correct anything by yourself.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;integration-test&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Integration tests. They are launched as a separate container, next to the application container.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;internal/app&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;There is always one &lt;em&gt;Run&lt;/em&gt; function in the &lt;code&gt;app.go&lt;/code&gt; file, which &#34;continues&#34; the &lt;em&gt;main&lt;/em&gt; function.&lt;/p&gt; &#xA;&lt;p&gt;This is where all the main objects are created. Dependency injection occurs through the &#34;New ...&#34; constructors (see Dependency Injection). This technique allows us to layer the application using the &lt;a href=&#34;https://raw.githubusercontent.com/evrone/go-clean-template/master/#dependency-injection&#34;&gt;Dependency Injection&lt;/a&gt; principle. This makes the business logic independent from other layers.&lt;/p&gt; &#xA;&lt;p&gt;Next, we start the server and wait for signals in &lt;em&gt;select&lt;/em&gt; for graceful completion. If &lt;code&gt;app.go&lt;/code&gt; starts to grow, you can split it into multiple files.&lt;/p&gt; &#xA;&lt;p&gt;For a large number of injections, &lt;a href=&#34;https://github.com/google/wire&#34;&gt;wire&lt;/a&gt; can be used.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;migrate.go&lt;/code&gt; file is used for database auto migrations. It is included if an argument with the &lt;em&gt;migrate&lt;/em&gt; tag is specified. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;go run -tags migrate ./cmd/app&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;internal/controller&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Server handler layer (MVC controllers). The template shows 2 servers:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;RPC (RabbitMQ as transport)&lt;/li&gt; &#xA; &lt;li&gt;REST http (&lt;a href=&#34;https://github.com/gofiber/fiber&#34;&gt;Fiber&lt;/a&gt; framework)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Server routers are written in the same style:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Handlers are grouped by area of application (by a common basis)&lt;/li&gt; &#xA; &lt;li&gt;For each group, its own router structure is created, the methods of which process paths&lt;/li&gt; &#xA; &lt;li&gt;The structure of the business logic is injected into the router structure, which will be called by the handlers&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;code&gt;internal/controller/http&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Simple REST versioning. For v2, we will need to add the &lt;code&gt;http/v2&lt;/code&gt; folder with the same content. And in the file &lt;code&gt;internal/app&lt;/code&gt; add the line:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;apiV1Group := app.Group(&#34;/v1&#34;)&#xA;{&#xA;&#x9;v1.NewTranslationRoutes(apiV1Group, t, l)&#xA;}&#xA;apiV2Group := app.Group(&#34;/v2&#34;)&#xA;{&#xA;&#x9;v2.NewTranslationRoutes(apiV2Group, t, l)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Instead of &lt;a href=&#34;https://github.com/gofiber/fiber&#34;&gt;Fiber&lt;/a&gt;, you can use any other http framework.&lt;/p&gt; &#xA;&lt;p&gt;In &lt;code&gt;router.go&lt;/code&gt; and above the handler methods, there are comments for generating swagger documentation using &lt;a href=&#34;https://github.com/swaggo/swag&#34;&gt;swag&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;internal/entity&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Entities of business logic (models) can be used in any layer. There can also be methods, for example, for validation.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;internal/usecase&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Business logic.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Methods are grouped by area of application (on a common basis)&lt;/li&gt; &#xA; &lt;li&gt;Each group has its own structure&lt;/li&gt; &#xA; &lt;li&gt;One file - one structure&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Repositories, webapi, rpc, and other business logic structures are injected into business logic structures (see &lt;a href=&#34;https://raw.githubusercontent.com/evrone/go-clean-template/master/#dependency-injection&#34;&gt;Dependency Injection&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;internal/repo/persistent&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;A repository is an abstract storage (database) that business logic works with.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;internal/repo/webapi&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;It is an abstract web API that business logic works with. For example, it could be another microservice that business logic accesses via the REST API. The package name changes depending on the purpose.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;pkg/rabbitmq&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;RabbitMQ RPC pattern:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;There is no routing inside RabbitMQ&lt;/li&gt; &#xA; &lt;li&gt;Exchange fanout is used, to which 1 exclusive queue is bound, this is the most productive config&lt;/li&gt; &#xA; &lt;li&gt;Reconnect on the loss of connection&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Dependency Injection&lt;/h2&gt; &#xA;&lt;p&gt;In order to remove the dependence of business logic on external packages, dependency injection is used.&lt;/p&gt; &#xA;&lt;p&gt;For example, through the New constructor, we inject the dependency into the structure of the business logic. This makes the business logic independent (and portable). We can override the implementation of the interface without making changes to the &lt;code&gt;usecase&lt;/code&gt; package.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package usecase&#xA;&#xA;import (&#xA;// Nothing!&#xA;)&#xA;&#xA;type Repository interface {&#xA;&#x9;Get()&#xA;}&#xA;&#xA;type UseCase struct {&#xA;&#x9;repo Repository&#xA;}&#xA;&#xA;func New(r Repository) *UseCase {&#xA;&#x9;return &amp;amp;UseCase{&#xA;&#x9;&#x9;repo: r,&#xA;&#x9;}&#xA;}&#xA;&#xA;func (uc *UseCase) Do() {&#xA;&#x9;uc.repo.Get()&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It will also allow us to do auto-generation of mocks (for example with &lt;a href=&#34;https://github.com/vektra/mockery&#34;&gt;mockery&lt;/a&gt;) and easily write unit tests.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;We are not tied to specific implementations in order to always be able to change one component to another. If the new component implements the interface, nothing needs to be changed in the business logic.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Clean Architecture&lt;/h2&gt; &#xA;&lt;h3&gt;Key idea&lt;/h3&gt; &#xA;&lt;p&gt;Programmers realize the optimal architecture for an application after most of the code has been written.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;A good architecture allows decisions to be delayed to as late as possible.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;The main principle&lt;/h3&gt; &#xA;&lt;p&gt;Dependency Inversion (the same one from SOLID) is the principle of dependency injection. The direction of dependencies goes from the outer layer to the inner layer. Due to this, business logic and entities remain independent from other parts of the system.&lt;/p&gt; &#xA;&lt;p&gt;So, the application is divided into 2 layers, internal and external:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;Business logic&lt;/strong&gt; (Go standard library).&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Tools&lt;/strong&gt; (databases, servers, message brokers, any other packages and frameworks).&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/evrone/go-clean-template/master/docs/img/layers-1.png&#34; alt=&#34;Clean Architecture&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;The inner layer&lt;/strong&gt; with business logic should be clean. It should:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Not have package imports from the outer layer.&lt;/li&gt; &#xA; &lt;li&gt;Use only the capabilities of the standard library.&lt;/li&gt; &#xA; &lt;li&gt;Make calls to the outer layer through the interface (!).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The business logic doesn&#39;t know anything about Postgres or a specific web API. Business logic has an interface for working with an &lt;em&gt;abstract&lt;/em&gt; database or &lt;em&gt;abstract&lt;/em&gt; web API.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;The outer layer&lt;/strong&gt; has other limitations:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;All components of this layer are unaware of each other&#39;s existence. How to call another from one tool? Not directly, only through the inner layer of business logic.&lt;/li&gt; &#xA; &lt;li&gt;All calls to the inner layer are made through the interface (!).&lt;/li&gt; &#xA; &lt;li&gt;Data is transferred in a format that is convenient for business logic (&lt;code&gt;internal/entity&lt;/code&gt;).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For example, you need to access the database from HTTP (controller). Both HTTP and database are in the outer layer, which means they know nothing about each other. The communication between them is carried out through &lt;code&gt;usecase&lt;/code&gt; (business logic):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    HTTP &amp;gt; usecase&#xA;           usecase &amp;gt; repository (Postgres)&#xA;           usecase &amp;lt; repository (Postgres)&#xA;    HTTP &amp;lt; usecase&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The symbols &amp;gt; and &amp;lt; show the intersection of layer boundaries through Interfaces. The same is shown in the picture:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/evrone/go-clean-template/master/docs/img/example-http-db.png&#34; alt=&#34;Example&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Or more complex business logic:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    HTTP &amp;gt; usecase&#xA;           usecase &amp;gt; repository&#xA;           usecase &amp;lt; repository&#xA;           usecase &amp;gt; webapi&#xA;           usecase &amp;lt; webapi&#xA;           usecase &amp;gt; RPC&#xA;           usecase &amp;lt; RPC&#xA;           usecase &amp;gt; repository&#xA;           usecase &amp;lt; repository&#xA;    HTTP &amp;lt; usecase&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Layers&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/evrone/go-clean-template/master/docs/img/layers-2.png&#34; alt=&#34;Example&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Clean Architecture Terminology&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Entities&lt;/strong&gt; are structures that business logic operates on. They are located in the &lt;code&gt;internal/entity&lt;/code&gt; folder. In MVC terms, entities are models.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Use Cases&lt;/strong&gt; is business logic located in &lt;code&gt;internal/usecase&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The layer with which business logic directly interacts is usually called the &lt;em&gt;infrastructure&lt;/em&gt; layer. These can be repositories &lt;code&gt;internal/usecase/repo&lt;/code&gt;, external webapi &lt;code&gt;internal/usecase/webapi&lt;/code&gt;, any pkg, and other microservices. In the template, the &lt;em&gt;infrastructure&lt;/em&gt; packages are located inside &lt;code&gt;internal/usecase&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can choose how to call the entry points as you wish. The options are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;controller (in our case)&lt;/li&gt; &#xA; &lt;li&gt;delivery&lt;/li&gt; &#xA; &lt;li&gt;transport&lt;/li&gt; &#xA; &lt;li&gt;gateways&lt;/li&gt; &#xA; &lt;li&gt;entrypoints&lt;/li&gt; &#xA; &lt;li&gt;primary&lt;/li&gt; &#xA; &lt;li&gt;input&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Additional layers&lt;/h3&gt; &#xA;&lt;p&gt;The classic version of &lt;a href=&#34;https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html&#34;&gt;Clean Architecture&lt;/a&gt; was designed for building large monolithic applications and has 4 layers.&lt;/p&gt; &#xA;&lt;p&gt;In the original version, the outer layer is divided into two more, which also have an inversion of dependencies to each other (directed inward) and communicate through interfaces.&lt;/p&gt; &#xA;&lt;p&gt;The inner layer is also divided into two (with separation of interfaces), in the case of complex logic.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Complex tools can be divided into additional layers. However, you should add layers only if really necessary.&lt;/p&gt; &#xA;&lt;h3&gt;Alternative approaches&lt;/h3&gt; &#xA;&lt;p&gt;In addition to Clean architecture, &lt;em&gt;Onion architecture&lt;/em&gt; and &lt;em&gt;Hexagonal&lt;/em&gt; (&lt;em&gt;Ports and adapters&lt;/em&gt;) are similar to it. Both are based on the principle of Dependency Inversion. &lt;em&gt;Ports and adapters&lt;/em&gt; are very close to &lt;em&gt;Clean Architecture&lt;/em&gt;, the differences are mainly in terminology.&lt;/p&gt; &#xA;&lt;h2&gt;Similar projects&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bxcodec/go-clean-arch&#34;&gt;https://github.com/bxcodec/go-clean-arch&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/zhashkevych/courses-backend&#34;&gt;https://github.com/zhashkevych/courses-backend&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Useful links&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html&#34;&gt;The Clean Architecture article&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://12factor.net/ru/&#34;&gt;Twelve factors&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>langgenius/dify-sandbox</title>
    <updated>2025-03-16T01:44:08Z</updated>
    <id>tag:github.com,2025-03-16:/langgenius/dify-sandbox</id>
    <link href="https://github.com/langgenius/dify-sandbox" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A lightweight, fast, and secure code execution environment that supports multiple programming languages&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Dify-Sandbox&lt;/h1&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;Dify-Sandbox offers a simple way to run untrusted code in a secure environment. It is designed to be used in a multi-tenant environment, where multiple users can submit code to be executed. The code is executed in a sandboxed environment, which restricts the resources and system calls that the code can access.&lt;/p&gt; &#xA;&lt;h2&gt;Use&lt;/h2&gt; &#xA;&lt;h3&gt;Requirements&lt;/h3&gt; &#xA;&lt;p&gt;DifySandbox currently only supports Linux, as it&#39;s designed for docker containers. It requires the following dependencies:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;libseccomp&lt;/li&gt; &#xA; &lt;li&gt;pkg-config&lt;/li&gt; &#xA; &lt;li&gt;gcc&lt;/li&gt; &#xA; &lt;li&gt;golang 1.20.6&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Steps&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Clone the repository using &lt;code&gt;git clone https://github.com/langgenius/dify-sandbox&lt;/code&gt; and navigate to the project directory.&lt;/li&gt; &#xA; &lt;li&gt;Run ./install.sh to install the necessary dependencies.&lt;/li&gt; &#xA; &lt;li&gt;Run ./build/build_[amd64|arm64].sh to build the sandbox binary.&lt;/li&gt; &#xA; &lt;li&gt;Run ./main to start the server.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;If you want to debug the server, firstly use build script to build the sandbox library binaries, then debug as you want with your IDE.&lt;/p&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;p&gt;Refer to the &lt;a href=&#34;https://raw.githubusercontent.com/langgenius/dify-sandbox/main/FAQ.md&#34;&gt;FAQ document&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Workflow&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/langgenius/dify-sandbox/main/workflow.png&#34; alt=&#34;workflow&#34;&gt;&lt;/p&gt;</summary>
  </entry>
</feed>