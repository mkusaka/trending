<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-08-27T01:55:11Z</updated>
  <subtitle>Weekly Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>jesseduffield/lazydocker</title>
    <updated>2023-08-27T01:55:11Z</updated>
    <id>tag:github.com,2023-08-27:/jesseduffield/lazydocker</id>
    <link href="https://github.com/jesseduffield/lazydocker" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The lazier way to manage everything docker&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/8456633/59972109-8e9c8480-95cc-11e9-8350-38f7f86ba76d.png&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;A simple terminal UI for both docker and docker-compose, written in Go with the &lt;a href=&#34;https://github.com/jroimartin/gocui&#34; title=&#34;gocui&#34;&gt;gocui&lt;/a&gt; library.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/jesseduffield/lazygit/workflows/Continuous%20Integration/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/jesseduffield/lazydocker&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/jesseduffield/lazydocker&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://golangci.com&#34;&gt;&lt;img src=&#34;https://golangci.com/badges/github.com/jesseduffield/lazydocker.svg?sanitize=true&#34; alt=&#34;GolangCI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://godoc.org/github.com/jesseduffield/lazydocker&#34;&gt;&lt;img src=&#34;https://godoc.org/github.com/jesseduffield/lazydocker?status.svg?sanitize=true&#34; alt=&#34;GoDoc&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/repo-size/jesseduffield/lazydocker&#34; alt=&#34;GitHub repo size&#34;&gt; &lt;a href=&#34;https://github.com/jesseduffield/lazydocker/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/downloads/jesseduffield/lazydocker/total&#34; alt=&#34;GitHub Releases&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/jesseduffield/lazydocker/releases/latest&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/tag/jesseduffield/lazydocker.svg?sanitize=true&#34; alt=&#34;GitHub tag&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Homebrew/homebrew-core/raw/master/Formula/lazydocker.rb&#34;&gt;&lt;img src=&#34;https://img.shields.io/homebrew/v/lazydocker&#34; alt=&#34;homebrew&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jesseduffield/lazydocker/master/docs/resources/demo3.gif&#34; alt=&#34;Gif&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://youtu.be/NICqQPxwJWw&#34;&gt;Demo&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Sponsors&lt;/h2&gt; &#xA;&lt;p align=&#34;center&#34;&gt; Maintainence of this project is made possible by all the &lt;a href=&#34;https://github.com/jesseduffield/lazydocker/graphs/contributors&#34;&gt;contributors&lt;/a&gt; and &lt;a href=&#34;https://github.com/sponsors/jesseduffield&#34;&gt;sponsors&lt;/a&gt;. If you&#39;d like to sponsor this project and have your avatar or company logo appear below &lt;a href=&#34;https://github.com/sponsors/jesseduffield&#34;&gt;click here&lt;/a&gt;. 💙 &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &#xA; &lt;!-- sponsors --&gt;&lt;a href=&#34;https://github.com/intabulas&#34;&gt;&lt;img src=&#34;https://github.com/intabulas.png&#34; width=&#34;60px&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://github.com/piot&#34;&gt;&lt;img src=&#34;https://github.com/piot.png&#34; width=&#34;60px&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://github.com/rgwood&#34;&gt;&lt;img src=&#34;https://github.com/rgwood.png&#34; width=&#34;60px&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://github.com/oliverguenther&#34;&gt;&lt;img src=&#34;https://github.com/oliverguenther.png&#34; width=&#34;60px&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://github.com/pawanjay176&#34;&gt;&lt;img src=&#34;https://github.com/pawanjay176.png&#34; width=&#34;60px&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://github.com/bdach&#34;&gt;&lt;img src=&#34;https://github.com/bdach.png&#34; width=&#34;60px&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://github.com/davidklsn&#34;&gt;&lt;img src=&#34;https://github.com/davidklsn.png&#34; width=&#34;60px&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://github.com/naoey&#34;&gt;&lt;img src=&#34;https://github.com/naoey.png&#34; width=&#34;60px&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://github.com/jryom&#34;&gt;&lt;img src=&#34;https://github.com/jryom.png&#34; width=&#34;60px&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://github.com/carstengehling&#34;&gt;&lt;img src=&#34;https://github.com/carstengehling.png&#34; width=&#34;60px&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://github.com/ceuk&#34;&gt;&lt;img src=&#34;https://github.com/ceuk.png&#34; width=&#34;60px&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://github.com/akospwc&#34;&gt;&lt;img src=&#34;https://github.com/akospwc.png&#34; width=&#34;60px&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://github.com/Xetera&#34;&gt;&lt;img src=&#34;https://github.com/Xetera.png&#34; width=&#34;60px&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://github.com/HoldenLucas&#34;&gt;&lt;img src=&#34;https://github.com/HoldenLucas.png&#34; width=&#34;60px&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://github.com/barbados-clemens&#34;&gt;&lt;img src=&#34;https://github.com/barbados-clemens.png&#34; width=&#34;60px&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://github.com/nartc&#34;&gt;&lt;img src=&#34;https://github.com/nartc.png&#34; width=&#34;60px&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://github.com/matejcik&#34;&gt;&lt;img src=&#34;https://github.com/matejcik.png&#34; width=&#34;60px&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://github.com/lucatume&#34;&gt;&lt;img src=&#34;https://github.com/lucatume.png&#34; width=&#34;60px&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://github.com/zach-fuller&#34;&gt;&lt;img src=&#34;https://github.com/zach-fuller.png&#34; width=&#34;60px&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://github.com/KowalskiPiotr98&#34;&gt;&lt;img src=&#34;https://github.com/KowalskiPiotr98.png&#34; width=&#34;60px&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://github.com/nicholascloud&#34;&gt;&lt;img src=&#34;https://github.com/nicholascloud.png&#34; width=&#34;60px&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://github.com/PhotonQuantum&#34;&gt;&lt;img src=&#34;https://github.com/PhotonQuantum.png&#34; width=&#34;60px&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://github.com/GitSquared&#34;&gt;&lt;img src=&#34;https://github.com/GitSquared.png&#34; width=&#34;60px&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://github.com/ava1ar&#34;&gt;&lt;img src=&#34;https://github.com/ava1ar.png&#34; width=&#34;60px&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://github.com/pedropombeiro&#34;&gt;&lt;img src=&#34;https://github.com/pedropombeiro.png&#34; width=&#34;60px&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://github.com/minidfx&#34;&gt;&lt;img src=&#34;https://github.com/minidfx.png&#34; width=&#34;60px&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://github.com/JoeKlemmer&#34;&gt;&lt;img src=&#34;https://github.com/JoeKlemmer.png&#34; width=&#34;60px&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://github.com/ColonelBucket8&#34;&gt;&lt;img src=&#34;https://github.com/ColonelBucket8.png&#34; width=&#34;60px&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://github.com/tobi&#34;&gt;&lt;img src=&#34;https://github.com/tobi.png&#34; width=&#34;60px&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://github.com/benbfortis&#34;&gt;&lt;img src=&#34;https://github.com/benbfortis.png&#34; width=&#34;60px&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://github.com/jakewarren&#34;&gt;&lt;img src=&#34;https://github.com/jakewarren.png&#34; width=&#34;60px&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://github.com/tgpholly&#34;&gt;&lt;img src=&#34;https://github.com/tgpholly.png&#34; width=&#34;60px&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://github.com/jisantuc&#34;&gt;&lt;img src=&#34;https://github.com/jisantuc.png&#34; width=&#34;60px&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://github.com/bitprophet&#34;&gt;&lt;img src=&#34;https://github.com/bitprophet.png&#34; width=&#34;60px&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://github.com/tayleighr&#34;&gt;&lt;img src=&#34;https://github.com/tayleighr.png&#34; width=&#34;60px&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://github.com/Novakov&#34;&gt;&lt;img src=&#34;https://github.com/Novakov.png&#34; width=&#34;60px&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://github.com/mthuggett&#34;&gt;&lt;img src=&#34;https://github.com/mthuggett.png&#34; width=&#34;60px&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://github.com/portothree&#34;&gt;&lt;img src=&#34;https://github.com/portothree.png&#34; width=&#34;60px&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://github.com/farzadmf&#34;&gt;&lt;img src=&#34;https://github.com/farzadmf.png&#34; width=&#34;60px&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://github.com/nekhaevskiy&#34;&gt;&lt;img src=&#34;https://github.com/nekhaevskiy.png&#34; width=&#34;60px&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://github.com/reivilibre&#34;&gt;&lt;img src=&#34;https://github.com/reivilibre.png&#34; width=&#34;60px&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://github.com/andreaskurth&#34;&gt;&lt;img src=&#34;https://github.com/andreaskurth.png&#34; width=&#34;60px&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://github.com/BSteffaniak&#34;&gt;&lt;img src=&#34;https://github.com/BSteffaniak.png&#34; width=&#34;60px&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://github.com/jordan-gillard&#34;&gt;&lt;img src=&#34;https://github.com/jordan-gillard.png&#34; width=&#34;60px&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://github.com/smangels&#34;&gt;&lt;img src=&#34;https://github.com/smangels.png&#34; width=&#34;60px&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://github.com/George-Spanos&#34;&gt;&lt;img src=&#34;https://github.com/George-Spanos.png&#34; width=&#34;60px&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://github.com/BenGH28&#34;&gt;&lt;img src=&#34;https://github.com/BenGH28.png&#34; width=&#34;60px&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://github.com/abradner&#34;&gt;&lt;img src=&#34;https://github.com/abradner.png&#34; width=&#34;60px&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://github.com/Thalys&#34;&gt;&lt;img src=&#34;https://github.com/Thalys.png&#34; width=&#34;60px&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://github.com/wakywayne&#34;&gt;&lt;img src=&#34;https://github.com/wakywayne.png&#34; width=&#34;60px&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://github.com/sktzofrenic&#34;&gt;&lt;img src=&#34;https://github.com/sktzofrenic.png&#34; width=&#34;60px&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://github.com/voloshink&#34;&gt;&lt;img src=&#34;https://github.com/voloshink.png&#34; width=&#34;60px&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://github.com/frantisekstanko&#34;&gt;&lt;img src=&#34;https://github.com/frantisekstanko.png&#34; width=&#34;60px&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://github.com/vlad-psh&#34;&gt;&lt;img src=&#34;https://github.com/vlad-psh.png&#34; width=&#34;60px&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://github.com/atlj&#34;&gt;&lt;img src=&#34;https://github.com/atlj.png&#34; width=&#34;60px&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://github.com/robclancy&#34;&gt;&lt;img src=&#34;https://github.com/robclancy.png&#34; width=&#34;60px&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://github.com/Jaxwood&#34;&gt;&lt;img src=&#34;https://github.com/Jaxwood.png&#34; width=&#34;60px&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://github.com/orthodoX&#34;&gt;&lt;img src=&#34;https://github.com/orthodoX.png&#34; width=&#34;60px&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&#xA; &lt;!-- sponsors --&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Elevator Pitch&lt;/h2&gt; &#xA;&lt;p&gt;Minor rant incoming: Something&#39;s not working? Maybe a service is down. &lt;code&gt;docker-compose ps&lt;/code&gt;. Yep, it&#39;s that microservice that&#39;s still buggy. No issue, I&#39;ll just restart it: &lt;code&gt;docker-compose restart&lt;/code&gt;. Okay now let&#39;s try again. Oh wait the issue is still there. Hmm. &lt;code&gt;docker-compose ps&lt;/code&gt;. Right so the service must have just stopped immediately after starting. I probably would have known that if I was reading the log stream, but there is a lot of clutter in there from other services. I could get the logs for just that one service with &lt;code&gt;docker compose logs --follow myservice&lt;/code&gt; but that dies everytime the service dies so I&#39;d need to run that command every time I restart the service. I could alternatively run &lt;code&gt;docker-compose up myservice&lt;/code&gt; and in that terminal window if the service is down I could just &lt;code&gt;up&lt;/code&gt; it again, but now I&#39;ve got one service hogging a terminal window even after I no longer care about its logs. I guess when I want to reclaim the terminal realestate I can do &lt;code&gt;ctrl+P,Q&lt;/code&gt;, but... wait, that&#39;s not working for some reason. Should I use ctrl+C instead? I can&#39;t remember if that closes the foreground process or kills the actual service.&lt;/p&gt; &#xA;&lt;p&gt;What a headache!&lt;/p&gt; &#xA;&lt;p&gt;Memorising docker commands is hard. Memorising aliases is slightly less hard. Keeping track of your containers across multiple terminal windows is near impossible. What if you had all the information you needed in one terminal window with every common command living one keypress away (and the ability to add custom commands as well). Lazydocker&#39;s goal is to make that dream a reality.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jesseduffield/lazydocker#requirements&#34;&gt;Requirements&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jesseduffield/lazydocker#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jesseduffield/lazydocker#usage&#34;&gt;Usage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jesseduffield/lazydocker/master/docs/keybindings&#34;&gt;Keybindings&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jesseduffield/lazydocker#cool-features&#34;&gt;Cool Features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jesseduffield/lazydocker#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/NICqQPxwJWw&#34;&gt;Video Tutorial&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jesseduffield/lazydocker/master/docs/Config.md&#34;&gt;Config Docs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.twitch.tv/jesseduffield&#34;&gt;Twitch Stream&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jesseduffield/lazydocker#faq&#34;&gt;FAQ&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Docker &amp;gt;= &lt;strong&gt;1.13&lt;/strong&gt; (API &amp;gt;= &lt;strong&gt;1.25&lt;/strong&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Docker-Compose &amp;gt;= &lt;strong&gt;1.23.2&lt;/strong&gt; (optional)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Homebrew&lt;/h3&gt; &#xA;&lt;p&gt;Normally &lt;code&gt;lazydocker&lt;/code&gt; formula can be found in the Homebrew core but we suggest you to tap our formula to get frequently updated one. It works with Linux, too.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Tap&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;brew install jesseduffield/lazydocker/lazydocker&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Core&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;brew install lazydocker&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Scoop (Windows)&lt;/h3&gt; &#xA;&lt;p&gt;You can install &lt;code&gt;lazydocker&lt;/code&gt; using &lt;a href=&#34;https://scoop.sh/&#34;&gt;scoop&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;scoop install lazydocker&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Chocolatey (Windows)&lt;/h3&gt; &#xA;&lt;p&gt;You can install &lt;code&gt;lazydocker&lt;/code&gt; using &lt;a href=&#34;https://chocolatey.org/&#34;&gt;Chocolatey&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;choco install lazydocker&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;asdf-vm&lt;/h3&gt; &#xA;&lt;p&gt;You can install &lt;a href=&#34;https://github.com/comdotlinux/asdf-lazydocker&#34;&gt;asdf-lazydocker plugin&lt;/a&gt; using &lt;a href=&#34;https://asdf-vm.com/&#34;&gt;asdf-vm&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;h4&gt;Setup (Once)&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;asdf plugin add lazydocker https://github.com/comdotlinux/asdf-lazydocker.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;For Install / Upgrade&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;asdf list all lazydocker&#xA;asdf install lazydocker 0.12&#xA;asdf global lazydocker 0.12&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Binary Release (Linux/OSX/Windows)&lt;/h3&gt; &#xA;&lt;p&gt;You can manually download a binary release from &lt;a href=&#34;https://github.com/jesseduffield/lazydocker/releases&#34;&gt;the release page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Automated install/update, don&#39;t forget to always verify what you&#39;re piping into bash:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;curl https://raw.githubusercontent.com/jesseduffield/lazydocker/master/scripts/install_update_linux.sh | bash&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The script installs downloaded binary to &lt;code&gt;$HOME/.local/bin&lt;/code&gt; directory by default, but it can be changed by setting &lt;code&gt;DIR&lt;/code&gt; environment variable.&lt;/p&gt; &#xA;&lt;h3&gt;Go&lt;/h3&gt; &#xA;&lt;p&gt;Required Go Version &amp;gt;= &lt;strong&gt;1.16&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;go install github.com/jesseduffield/lazydocker@latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Required Go version &amp;gt;= &lt;strong&gt;1.8&lt;/strong&gt;, &amp;lt;= &lt;strong&gt;1.17&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;go get github.com/jesseduffield/lazydocker&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Arch Linux AUR&lt;/h3&gt; &#xA;&lt;p&gt;You can install lazydocker using the &lt;a href=&#34;https://aur.archlinux.org/packages/lazydocker&#34;&gt;AUR&lt;/a&gt; by running:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;yay -S lazydocker&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Docker&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://hub.docker.com/r/lazyteam/lazydocker&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/pulls/lazyteam/lazydocker.svg?sanitize=true&#34; alt=&#34;Docker Pulls&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/lazyteam/lazydocker&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/stars/lazyteam/lazydocker.svg?sanitize=true&#34; alt=&#34;Docker Stars&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/lazyteam/lazydocker&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/cloud/automated/lazyteam/lazydocker.svg?sanitize=true&#34; alt=&#34;Docker Automated&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &#xA;  &lt;details&gt;&#xA;   &lt;summary&gt;Click if you have an ARM device&lt;/summary&gt;&#xA;   &lt;p&gt; &lt;/p&gt;&#xA;   &lt;ul&gt; &#xA;    &lt;li&gt; &lt;p&gt;If you have a ARM 32 bit v6 architecture&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker build -t lazyteam/lazydocker \&#xA;--build-arg BASE_IMAGE_BUILDER=arm32v6/golang \&#xA;--build-arg GOARCH=arm \&#xA;--build-arg GOARM=6 \&#xA;https://github.com/jesseduffield/lazydocker.git&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;If you have a ARM 32 bit v7 architecture&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker build -t lazyteam/lazydocker \&#xA;--build-arg BASE_IMAGE_BUILDER=arm32v7/golang \&#xA;--build-arg GOARCH=arm \&#xA;--build-arg GOARM=7 \&#xA;https://github.com/jesseduffield/lazydocker.git&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;If you have a ARM 64 bit v8 architecture&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker build -t lazyteam/lazydocker \&#xA;--build-arg BASE_IMAGE_BUILDER=arm64v8/golang \&#xA;--build-arg GOARCH=arm64 \&#xA;https://github.com/jesseduffield/lazydocker.git&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;/ul&gt; &#xA;   &lt;p&gt;&lt;/p&gt;&#xA;  &lt;/details&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run the container&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker run --rm -it -v \&#xA;/var/run/docker.sock:/var/run/docker.sock \&#xA;-v /yourpath:/.config/jesseduffield/lazydocker \&#xA;lazyteam/lazydocker&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;Don&#39;t forget to change &lt;code&gt;/yourpath&lt;/code&gt; to an actual path you created to store lazydocker&#39;s config&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;You can also use this &lt;a href=&#34;https://github.com/jesseduffield/lazydocker/raw/master/docker-compose.yml&#34;&gt;docker-compose.yml&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;You might want to create an alias, for example:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;echo &#34;alias lzd=&#39;docker run --rm -it -v /var/run/docker.sock:/var/run/docker.sock -v /yourpath/config:/.config/jesseduffield/lazydocker lazyteam/lazydocker&#39;&#34; &amp;gt;&amp;gt; ~/.zshrc&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;For development, you can build the image using:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone https://github.com/jesseduffield/lazydocker.git&#xA;cd lazydocker&#xA;docker build -t lazyteam/lazydocker \&#xA;    --build-arg BUILD_DATE=`date -u +&#34;%Y-%m-%dT%H:%M:%SZ&#34;` \&#xA;    --build-arg VCS_REF=`git rev-parse --short HEAD` \&#xA;    --build-arg VERSION=`git describe --abbrev=0 --tag` \&#xA;    .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you encounter a compatibility issue with Docker bundled binary, try rebuilding the image with the build argument &lt;code&gt;--build-arg DOCKER_VERSION=&#34;v$(docker -v | cut -d&#34; &#34; -f3 | rev | cut -c 2- | rev)&#34;&lt;/code&gt; so that the bundled docker binary matches your host docker binary version.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Call &lt;code&gt;lazydocker&lt;/code&gt; in your terminal. I personally use this a lot so I&#39;ve made an alias for it like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;echo &#34;alias lzd=&#39;lazydocker&#39;&#34; &amp;gt;&amp;gt; ~/.zshrc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(you can substitute .zshrc for whatever rc file you&#39;re using)&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Basic video tutorial &lt;a href=&#34;https://youtu.be/NICqQPxwJWw&#34;&gt;here&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;List of keybindings &lt;a href=&#34;https://raw.githubusercontent.com/jesseduffield/lazydocker/master/docs/keybindings&#34;&gt;here&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Cool features&lt;/h2&gt; &#xA;&lt;p&gt;everything is one keypress away (or one click away! Mouse support FTW):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;viewing the state of your docker or docker-compose container environment at a glance&lt;/li&gt; &#xA; &lt;li&gt;viewing logs for a container/service&lt;/li&gt; &#xA; &lt;li&gt;viewing ascii graphs of your containers&#39; metrics so that you can not only feel but also look like a developer&lt;/li&gt; &#xA; &lt;li&gt;customising those graphs to measure nearly any metric you want&lt;/li&gt; &#xA; &lt;li&gt;attaching to a container/service&lt;/li&gt; &#xA; &lt;li&gt;restarting/removing/rebuilding containers/services&lt;/li&gt; &#xA; &lt;li&gt;viewing the ancestor layers of a given image&lt;/li&gt; &#xA; &lt;li&gt;pruning containers, images, or volumes that are hogging up disk space&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;There is still a lot of work to go! Please check out the &lt;a href=&#34;https://raw.githubusercontent.com/jesseduffield/lazydocker/master/CONTRIBUTING.md&#34;&gt;contributing guide&lt;/a&gt;. For contributor discussion about things not better discussed here in the repo, join the discord channel&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://discord.gg/ehwFt2t4wt&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jesseduffield/lazydocker/master/docs/resources/discord.png&#34; width=&#34;75&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Donate&lt;/h2&gt; &#xA;&lt;p&gt;If you would like to support the development of lazydocker, consider &lt;a href=&#34;https://github.com/sponsors/jesseduffield&#34;&gt;sponsoring me&lt;/a&gt; (github is matching all donations dollar-for-dollar for 12 months)&lt;/p&gt; &#xA;&lt;h2&gt;Social&lt;/h2&gt; &#xA;&lt;p&gt;If you want to see what I (Jesse) am up to in terms of development, follow me on &lt;a href=&#34;https://twitter.com/DuffieldJesse&#34;&gt;twitter&lt;/a&gt; or watch me program on &lt;a href=&#34;https://www.twitch.tv/jesseduffield&#34;&gt;twitch&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;h3&gt;How do I edit my config?&lt;/h3&gt; &#xA;&lt;p&gt;By opening lazydocker, clicking on the &#39;project&#39; panel in the top left, and pressing &#39;o&#39; (or &#39;e&#39; if your editor is vim). See &lt;a href=&#34;https://raw.githubusercontent.com/jesseduffield/lazydocker/master/docs/Config.md&#34;&gt;Config Docs&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;How do I get text to wrap in my main panel?&lt;/h3&gt; &#xA;&lt;p&gt;In the future I want to make this the default, but for now there are some CPU issues that arise with wrapping. If you want to enable wrapping, use &lt;code&gt;gui.wrapMainPanel: true&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;How do you select text?&lt;/h3&gt; &#xA;&lt;p&gt;Because we support mouse events, you will need to hold option while dragging the mouse to indicate you&#39;re trying to select text rather than click on something. Alternatively you can disable mouse events via the &lt;code&gt;gui.ignoreMouseEvents&lt;/code&gt; config value.&lt;/p&gt; &#xA;&lt;p&gt;Mac Users: See &lt;a href=&#34;https://github.com/jesseduffield/lazydocker/issues/190&#34;&gt;Issue #190&lt;/a&gt; for other options.&lt;/p&gt; &#xA;&lt;h3&gt;Why can&#39;t I see my container&#39;s logs?&lt;/h3&gt; &#xA;&lt;p&gt;By default we only show logs from the last hour, so that we&#39;re not putting too much strain on the machine. This may be why you can&#39;t see logs when you first start lazydocker. This can be overwritten in the config&#39;s &lt;code&gt;commandTemplates&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you are running lazydocker in Docker container, it is a know bug, that you can&#39;t see logs or CPU usage.&lt;/p&gt; &#xA;&lt;h3&gt;Why isn&#39;t my docker-compose environment being used?&lt;/h3&gt; &#xA;&lt;p&gt;By default Compose V1 (&lt;code&gt;docker-compose&lt;/code&gt; with the hyphen) is used as the docker-compose command. You will need to make sure you have the &lt;code&gt;docker-compose&lt;/code&gt; command available for lazydocker to be able to use.&lt;/p&gt; &#xA;&lt;p&gt;If you use Compose V2 (&lt;code&gt;docker compose&lt;/code&gt; without the hyphen), alternatively, you can change the docker-compose command used via the &lt;code&gt;commandTemplates.dockerCompose&lt;/code&gt; config value.&lt;/p&gt; &#xA;&lt;h2&gt;Alternatives&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/skanehira/docui&#34;&gt;docui&lt;/a&gt; - Skanehira beat me to the punch on making a docker terminal UI, so definitely check out that repo as well! I think the two repos can live in harmony though: lazydocker is more about managing existing containers/services, and docui is more about creating and configuring them.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/portainer/portainer&#34;&gt;Portainer&lt;/a&gt; - Portainer tries to solve the same problem but it&#39;s accessed via your browser rather than your terminal. It also supports docker swarm.&lt;/li&gt; &#xA; &lt;li&gt;See &lt;a href=&#34;https://github.com/veggiemonk/awesome-docker/raw/master/README.md#terminal&#34;&gt;Awesome Docker list&lt;/a&gt; for similar tools to work with Docker.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>projectdiscovery/katana</title>
    <updated>2023-08-27T01:55:11Z</updated>
    <id>tag:github.com,2023-08-27:/projectdiscovery/katana</id>
    <link href="https://github.com/projectdiscovery/katana" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A next-generation crawling and spidering framework.&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/8293321/196779266-421c79d4-643a-4f73-9b54-3da379bbac09.png&#34; alt=&#34;katana&#34; width=&#34;200px&#34;&gt; &lt;br&gt; &lt;/h1&gt; &#xA;&lt;h4 align=&#34;center&#34;&gt;A next-generation crawling and spidering framework&lt;/h4&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/projectdiscovery/katana&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/projectdiscovery/katana&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/projectdiscovery/katana/issues&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/contributions-welcome-brightgreen.svg?style=flat&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/projectdiscovery/katana/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/projectdiscovery/katana&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/pdiscoveryio&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/follow/pdiscoveryio.svg?logo=twitter&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/projectdiscovery&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/695645237418131507.svg?logo=discord&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://raw.githubusercontent.com/projectdiscovery/katana/main/#features&#34;&gt;Features&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/projectdiscovery/katana/main/#installation&#34;&gt;Installation&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/projectdiscovery/katana/main/#usage&#34;&gt;Usage&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/projectdiscovery/katana/main/#scope-control&#34;&gt;Scope&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/projectdiscovery/katana/main/#crawler-configuration&#34;&gt;Config&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/projectdiscovery/katana/main/#filters&#34;&gt;Filters&lt;/a&gt; • &lt;a href=&#34;https://discord.gg/projectdiscovery&#34;&gt;Join Discord&lt;/a&gt; &lt;/p&gt; &#xA;&lt;h1&gt;Features&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/8293321/199371558-daba03b6-bf9c-4883-8506-76497c6c3a44.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fast And fully configurable web crawling&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Standard&lt;/strong&gt; and &lt;strong&gt;Headless&lt;/strong&gt; mode support&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;JavaScript&lt;/strong&gt; parsing / crawling&lt;/li&gt; &#xA; &lt;li&gt;Customizable &lt;strong&gt;automatic form filling&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Scope control&lt;/strong&gt; - Preconfigured field / Regex&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Customizable output&lt;/strong&gt; - Preconfigured fields&lt;/li&gt; &#xA; &lt;li&gt;INPUT - &lt;strong&gt;STDIN&lt;/strong&gt;, &lt;strong&gt;URL&lt;/strong&gt; and &lt;strong&gt;LIST&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;OUTPUT - &lt;strong&gt;STDOUT&lt;/strong&gt;, &lt;strong&gt;FILE&lt;/strong&gt; and &lt;strong&gt;JSON&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;katana requires &lt;strong&gt;Go 1.18&lt;/strong&gt; to install successfully. To install, just run the below command or download pre-compiled binary from &lt;a href=&#34;https://github.com/projectdiscovery/katana/releases&#34;&gt;release page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;go install github.com/projectdiscovery/katana/cmd/katana@latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;More options to install / run katana-&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Docker&lt;/summary&gt; &#xA; &lt;blockquote&gt; &#xA;  &lt;p&gt;To install / update docker to latest tag -&lt;/p&gt; &#xA; &lt;/blockquote&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker pull projectdiscovery/katana:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;blockquote&gt; &#xA;  &lt;p&gt;To run katana in standard mode using docker -&lt;/p&gt; &#xA; &lt;/blockquote&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker run projectdiscovery/katana:latest -u https://tesla.com&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;blockquote&gt; &#xA;  &lt;p&gt;To run katana in headless mode using docker -&lt;/p&gt; &#xA; &lt;/blockquote&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker run projectdiscovery/katana:latest -u https://tesla.com -system-chrome -headless&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Ubuntu&lt;/summary&gt; &#xA; &lt;blockquote&gt; &#xA;  &lt;p&gt;It&#39;s recommended to install the following prerequisites -&lt;/p&gt; &#xA; &lt;/blockquote&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo apt update&#xA;sudo snap refresh&#xA;sudo apt install zip curl wget git&#xA;sudo snap install golang --classic&#xA;wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo apt-key add - &#xA;sudo sh -c &#39;echo &#34;deb http://dl.google.com/linux/chrome/deb/ stable main&#34; &amp;gt;&amp;gt; /etc/apt/sources.list.d/google.list&#39;&#xA;sudo apt update &#xA;sudo apt install google-chrome-stable&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;blockquote&gt; &#xA;  &lt;p&gt;install katana -&lt;/p&gt; &#xA; &lt;/blockquote&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;go install github.com/projectdiscovery/katana/cmd/katana@latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;katana -h&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will display help for the tool. Here are all the switches it supports.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;Katana is a fast crawler focused on execution in automation&#xA;pipelines offering both headless and non-headless crawling.&#xA;&#xA;Usage:&#xA;  ./katana [flags]&#xA;&#xA;Flags:&#xA;INPUT:&#xA;   -u, -list string[]  target url / list to crawl&#xA;&#xA;CONFIGURATION:&#xA;   -r, -resolvers string[]       list of custom resolver (file or comma separated)&#xA;   -d, -depth int                maximum depth to crawl (default 3)&#xA;   -jc, -js-crawl                enable endpoint parsing / crawling in javascript file&#xA;   -jsl, -jsluice                 enable jsluice parsing in javascript file (memory intensive)&#xA;   -ct, -crawl-duration value    maximum duration to crawl the target for (s, m, h, d) (default s)&#xA;   -kf, -known-files string      enable crawling of known files (all,robotstxt,sitemapxml)&#xA;   -mrs, -max-response-size int  maximum response size to read (default 9223372036854775807)&#xA;   -timeout int                  time to wait for request in seconds (default 10)&#xA;   -aff, -automatic-form-fill    enable automatic form filling (experimental)&#xA;   -fx, -form-extraction         extract form, input, textarea &amp;amp; select elements in jsonl output&#xA;   -retry int                    number of times to retry the request (default 1)&#xA;   -proxy string                 http/socks5 proxy to use&#xA;   -H, -headers string[]         custom header/cookie to include in all http request in header:value format (file)&#xA;   -config string                path to the katana configuration file&#xA;   -fc, -form-config string      path to custom form configuration file&#xA;   -flc, -field-config string    path to custom field configuration file&#xA;   -s, -strategy string          Visit strategy (depth-first, breadth-first) (default &#34;depth-first&#34;)&#xA;   -iqp, -ignore-query-params    Ignore crawling same path with different query-param values&#xA;   -tlsi, -tls-impersonate       enable experimental client hello (ja3) tls randomization&#xA;&#xA;DEBUG:&#xA;   -health-check, -hc        run diagnostic check up&#xA;   -elog, -error-log string  file to write sent requests error log&#xA;&#xA;HEADLESS:&#xA;   -hl, -headless                    enable headless hybrid crawling (experimental)&#xA;   -sc, -system-chrome               use local installed chrome browser instead of katana installed&#xA;   -sb, -show-browser                show the browser on the screen with headless mode&#xA;   -ho, -headless-options string[]   start headless chrome with additional options&#xA;   -nos, -no-sandbox                 start headless chrome in --no-sandbox mode&#xA;   -cdd, -chrome-data-dir string     path to store chrome browser data&#xA;   -scp, -system-chrome-path string  use specified chrome browser for headless crawling&#xA;   -noi, -no-incognito               start headless chrome without incognito mode&#xA;   -cwu, -chrome-ws-url string       use chrome browser instance launched elsewhere with the debugger listening at this URL&#xA;   -xhr, -xhr-extraction             extract xhr request url,method in jsonl output&#xA;&#xA;SCOPE:&#xA;   -cs, -crawl-scope string[]       in scope url regex to be followed by crawler&#xA;   -cos, -crawl-out-scope string[]  out of scope url regex to be excluded by crawler&#xA;   -fs, -field-scope string         pre-defined scope field (dn,rdn,fqdn) (default &#34;rdn&#34;)&#xA;   -ns, -no-scope                   disables host based default scope&#xA;   -do, -display-out-scope          display external endpoint from scoped crawling&#xA;&#xA;FILTER:&#xA;   -mr, -match-regex string[]       regex or list of regex to match on output url (cli, file)&#xA;   -fr, -filter-regex string[]      regex or list of regex to filter on output url (cli, file)&#xA;   -f, -field string                field to display in output (url,path,fqdn,rdn,rurl,qurl,qpath,file,ufile,key,value,kv,dir,udir)&#xA;   -sf, -store-field string         field to store in per-host output (url,path,fqdn,rdn,rurl,qurl,qpath,file,ufile,key,value,kv,dir,udir)&#xA;   -em, -extension-match string[]   match output for given extension (eg, -em php,html,js)&#xA;   -ef, -extension-filter string[]  filter output for given extension (eg, -ef png,css)&#xA;   -mdc, -match-condition string    match response with dsl based condition&#xA;   -fdc, -filter-condition string   filter response with dsl based condition&#xA;&#xA;RATE-LIMIT:&#xA;   -c, -concurrency int          number of concurrent fetchers to use (default 10)&#xA;   -p, -parallelism int          number of concurrent inputs to process (default 10)&#xA;   -rd, -delay int               request delay between each request in seconds&#xA;   -rl, -rate-limit int          maximum requests to send per second (default 150)&#xA;   -rlm, -rate-limit-minute int  maximum number of requests to send per minute&#xA;&#xA;UPDATE:&#xA;   -up, -update                 update katana to latest version&#xA;   -duc, -disable-update-check  disable automatic katana update check&#xA;&#xA;OUTPUT:&#xA;   -o, -output string                file to write output to&#xA;   -sr, -store-response              store http requests/responses&#xA;   -srd, -store-response-dir string  store http requests/responses to custom directory&#xA;   -or, -omit-raw                    omit raw requests/responses from jsonl output&#xA;   -ob, -omit-body                   omit response body from jsonl output&#xA;   -j, -jsonl                        write output in jsonl format&#xA;   -nc, -no-color                    disable output content coloring (ANSI escape codes)&#xA;   -silent                           display output only&#xA;   -v, -verbose                      display verbose output&#xA;   -debug                            display debug output&#xA;   -version                          display project version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Running Katana&lt;/h2&gt; &#xA;&lt;h3&gt;Input for katana&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;katana&lt;/strong&gt; requires &lt;strong&gt;url&lt;/strong&gt; or &lt;strong&gt;endpoint&lt;/strong&gt; to crawl and accepts single or multiple inputs.&lt;/p&gt; &#xA;&lt;p&gt;Input URL can be provided using &lt;code&gt;-u&lt;/code&gt; option, and multiple values can be provided using comma-separated input, similarly &lt;strong&gt;file&lt;/strong&gt; input is supported using &lt;code&gt;-list&lt;/code&gt; option and additionally piped input (stdin) is also supported.&lt;/p&gt; &#xA;&lt;h4&gt;URL Input&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;katana -u https://tesla.com&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Multiple URL Input (comma-separated)&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;katana -u https://tesla.com,https://google.com&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;List Input&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cat url_list.txt&#xA;&#xA;https://tesla.com&#xA;https://google.com&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;katana -list url_list.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;STDIN (piped) Input&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;echo https://tesla.com | katana&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cat domains | httpx | katana&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Example running katana -&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;katana -u https://youtube.com&#xA;&#xA;   __        __                &#xA;  / /_____ _/ /____ ____  ___ _&#xA; /  &#39;_/ _  / __/ _  / _ \/ _  /&#xA;/_/\_\\_,_/\__/\_,_/_//_/\_,_/ v0.0.1                     &#xA;&#xA;      projectdiscovery.io&#xA;&#xA;[WRN] Use with caution. You are responsible for your actions.&#xA;[WRN] Developers assume no liability and are not responsible for any misuse or damage.&#xA;https://www.youtube.com/&#xA;https://www.youtube.com/about/&#xA;https://www.youtube.com/about/press/&#xA;https://www.youtube.com/about/copyright/&#xA;https://www.youtube.com/t/contact_us/&#xA;https://www.youtube.com/creators/&#xA;https://www.youtube.com/ads/&#xA;https://www.youtube.com/t/terms&#xA;https://www.youtube.com/t/privacy&#xA;https://www.youtube.com/about/policies/&#xA;https://www.youtube.com/howyoutubeworks?utm_campaign=ytgen&amp;amp;utm_source=ythp&amp;amp;utm_medium=LeftNav&amp;amp;utm_content=txt&amp;amp;u=https%3A%2F%2Fwww.youtube.com%2Fhowyoutubeworks%3Futm_source%3Dythp%26utm_medium%3DLeftNav%26utm_campaign%3Dytgen&#xA;https://www.youtube.com/new&#xA;https://m.youtube.com/&#xA;https://www.youtube.com/s/desktop/4965577f/jsbin/desktop_polymer.vflset/desktop_polymer.js&#xA;https://www.youtube.com/s/desktop/4965577f/cssbin/www-main-desktop-home-page-skeleton.css&#xA;https://www.youtube.com/s/desktop/4965577f/cssbin/www-onepick.css&#xA;https://www.youtube.com/s/_/ytmainappweb/_/ss/k=ytmainappweb.kevlar_base.0Zo5FUcPkCg.L.B1.O/am=gAE/d=0/rs=AGKMywG5nh5Qp-BGPbOaI1evhF5BVGRZGA&#xA;https://www.youtube.com/opensearch?locale=en_GB&#xA;https://www.youtube.com/manifest.webmanifest&#xA;https://www.youtube.com/s/desktop/4965577f/cssbin/www-main-desktop-watch-page-skeleton.css&#xA;https://www.youtube.com/s/desktop/4965577f/jsbin/web-animations-next-lite.min.vflset/web-animations-next-lite.min.js&#xA;https://www.youtube.com/s/desktop/4965577f/jsbin/custom-elements-es5-adapter.vflset/custom-elements-es5-adapter.js&#xA;https://www.youtube.com/s/desktop/4965577f/jsbin/webcomponents-sd.vflset/webcomponents-sd.js&#xA;https://www.youtube.com/s/desktop/4965577f/jsbin/intersection-observer.min.vflset/intersection-observer.min.js&#xA;https://www.youtube.com/s/desktop/4965577f/jsbin/scheduler.vflset/scheduler.js&#xA;https://www.youtube.com/s/desktop/4965577f/jsbin/www-i18n-constants-en_GB.vflset/www-i18n-constants.js&#xA;https://www.youtube.com/s/desktop/4965577f/jsbin/www-tampering.vflset/www-tampering.js&#xA;https://www.youtube.com/s/desktop/4965577f/jsbin/spf.vflset/spf.js&#xA;https://www.youtube.com/s/desktop/4965577f/jsbin/network.vflset/network.js&#xA;https://www.youtube.com/howyoutubeworks/&#xA;https://www.youtube.com/trends/&#xA;https://www.youtube.com/jobs/&#xA;https://www.youtube.com/kids/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Crawling Mode&lt;/h2&gt; &#xA;&lt;h3&gt;Standard Mode&lt;/h3&gt; &#xA;&lt;p&gt;Standard crawling modality uses the standard go http library under the hood to handle HTTP requests/responses. This modality is much faster as it doesn&#39;t have the browser overhead. Still, it analyzes HTTP responses body as is, without any javascript or DOM rendering, potentially missing post-dom-rendered endpoints or asynchronous endpoint calls that might happen in complex web applications depending, for example, on browser-specific events.&lt;/p&gt; &#xA;&lt;h3&gt;Headless Mode&lt;/h3&gt; &#xA;&lt;p&gt;Headless mode hooks internal headless calls to handle HTTP requests/responses directly within the browser context. This offers two advantages:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The HTTP fingerprint (TLS and user agent) fully identify the client as a legitimate browser&lt;/li&gt; &#xA; &lt;li&gt;Better coverage since the endpoints are discovered analyzing the standard raw response, as in the previous modality, and also the browser-rendered one with javascript enabled.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Headless crawling is optional and can be enabled using &lt;code&gt;-headless&lt;/code&gt; option.&lt;/p&gt; &#xA;&lt;p&gt;Here are other headless CLI options -&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;katana -h headless&#xA;&#xA;Flags:&#xA;HEADLESS:&#xA;   -hl, -headless                    enable headless hybrid crawling (experimental)&#xA;   -sc, -system-chrome               use local installed chrome browser instead of katana installed&#xA;   -sb, -show-browser                show the browser on the screen with headless mode&#xA;   -ho, -headless-options string[]   start headless chrome with additional options&#xA;   -nos, -no-sandbox                 start headless chrome in --no-sandbox mode&#xA;   -cdd, -chrome-data-dir string     path to store chrome browser data&#xA;   -scp, -system-chrome-path string  use specified chrome browser for headless crawling&#xA;   -noi, -no-incognito               start headless chrome without incognito mode&#xA;   -cwu, -chrome-ws-url string       use chrome browser instance launched elsewhere with the debugger listening at this URL&#xA;   -xhr, -xhr-extraction             extract xhr requests&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;&lt;em&gt;&lt;code&gt;-no-sandbox&lt;/code&gt;&lt;/em&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Runs headless chrome browser with &lt;strong&gt;no-sandbox&lt;/strong&gt; option, useful when running as root user.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;katana -u https://tesla.com -headless -no-sandbox&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;&lt;em&gt;&lt;code&gt;-no-incognito&lt;/code&gt;&lt;/em&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Runs headless chrome browser without incognito mode, useful when using the local browser.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;katana -u https://tesla.com -headless -no-incognito&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;&lt;em&gt;&lt;code&gt;-headless-options&lt;/code&gt;&lt;/em&gt;&lt;/h2&gt; &#xA;&lt;p&gt;When crawling in headless mode, additional chrome options can be specified using &lt;code&gt;-headless-options&lt;/code&gt;, for example -&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;katana -u https://tesla.com -headless -system-chrome -headless-options --disable-gpu,proxy-server=http://127.0.0.1:8080&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Scope Control&lt;/h2&gt; &#xA;&lt;p&gt;Crawling can be endless if not scoped, as such katana comes with multiple support to define the crawl scope.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;em&gt;&lt;code&gt;-field-scope&lt;/code&gt;&lt;/em&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Most handy option to define scope with predefined field name, &lt;code&gt;rdn&lt;/code&gt; being default option for field scope.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;rdn&lt;/code&gt; - crawling scoped to root domain name and all subdomains (e.g. &lt;code&gt;*example.com&lt;/code&gt;) (default)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;fqdn&lt;/code&gt; - crawling scoped to given sub(domain) (e.g. &lt;code&gt;www.example.com&lt;/code&gt; or &lt;code&gt;api.example.com&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;dn&lt;/code&gt; - crawling scoped to domain name keyword (e.g. &lt;code&gt;example&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;katana -u https://tesla.com -fs dn&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;&lt;em&gt;&lt;code&gt;-crawl-scope&lt;/code&gt;&lt;/em&gt;&lt;/h2&gt; &#xA;&lt;p&gt;For advanced scope control, &lt;code&gt;-cs&lt;/code&gt; option can be used that comes with &lt;strong&gt;regex&lt;/strong&gt; support.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;katana -u https://tesla.com -cs login&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For multiple in scope rules, file input with multiline string / regex can be passed.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cat in_scope.txt&#xA;&#xA;login/&#xA;admin/&#xA;app/&#xA;wordpress/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;katana -u https://tesla.com -cs in_scope.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;&lt;em&gt;&lt;code&gt;-crawl-out-scope&lt;/code&gt;&lt;/em&gt;&lt;/h2&gt; &#xA;&lt;p&gt;For defining what not to crawl, &lt;code&gt;-cos&lt;/code&gt; option can be used and also support &lt;strong&gt;regex&lt;/strong&gt; input.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;katana -u https://tesla.com -cos logout&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For multiple out of scope rules, file input with multiline string / regex can be passed.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cat out_of_scope.txt&#xA;&#xA;/logout&#xA;/log_out&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;katana -u https://tesla.com -cos out_of_scope.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;&lt;em&gt;&lt;code&gt;-no-scope&lt;/code&gt;&lt;/em&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Katana is default to scope &lt;code&gt;*.domain&lt;/code&gt;, to disable this &lt;code&gt;-ns&lt;/code&gt; option can be used and also to crawl the internet.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;katana -u https://tesla.com -ns&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;&lt;em&gt;&lt;code&gt;-display-out-scope&lt;/code&gt;&lt;/em&gt;&lt;/h2&gt; &#xA;&lt;p&gt;As default, when scope option is used, it also applies for the links to display as output, as such &lt;strong&gt;external URLs are default to exclude&lt;/strong&gt; and to overwrite this behavior, &lt;code&gt;-do&lt;/code&gt; option can be used to display all the external URLs that exist in targets scoped URL / Endpoint.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;katana -u https://tesla.com -do&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here is all the CLI options for the scope control -&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;katana -h scope&#xA;&#xA;Flags:&#xA;SCOPE:&#xA;   -cs, -crawl-scope string[]       in scope url regex to be followed by crawler&#xA;   -cos, -crawl-out-scope string[]  out of scope url regex to be excluded by crawler&#xA;   -fs, -field-scope string         pre-defined scope field (dn,rdn,fqdn) (default &#34;rdn&#34;)&#xA;   -ns, -no-scope                   disables host based default scope&#xA;   -do, -display-out-scope          display external endpoint from scoped crawling&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Crawler Configuration&lt;/h2&gt; &#xA;&lt;p&gt;Katana comes with multiple options to configure and control the crawl as the way we want.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;em&gt;&lt;code&gt;-depth&lt;/code&gt;&lt;/em&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Option to define the &lt;code&gt;depth&lt;/code&gt; to follow the urls for crawling, the more depth the more number of endpoint being crawled + time for crawl.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;katana -u https://tesla.com -d 5&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;&lt;em&gt;&lt;code&gt;-js-crawl&lt;/code&gt;&lt;/em&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Option to enable JavaScript file parsing + crawling the endpoints discovered in JavaScript files, disabled as default.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;katana -u https://tesla.com -jc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;&lt;em&gt;&lt;code&gt;-crawl-duration&lt;/code&gt;&lt;/em&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Option to predefined crawl duration, disabled as default.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;katana -u https://tesla.com -ct 2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;&lt;em&gt;&lt;code&gt;-known-files&lt;/code&gt;&lt;/em&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Option to enable crawling &lt;code&gt;robots.txt&lt;/code&gt; and &lt;code&gt;sitemap.xml&lt;/code&gt; file, disabled as default.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;katana -u https://tesla.com -kf robotstxt,sitemapxml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;&lt;em&gt;&lt;code&gt;-automatic-form-fill&lt;/code&gt;&lt;/em&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Option to enable automatic form filling for known / unknown fields, known field values can be customized as needed by updating form config file at &lt;code&gt;$HOME/.config/katana/form-config.yaml&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Automatic form filling is experimental feature.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;katana -u https://tesla.com -aff&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Authenticated Crawling&lt;/h2&gt; &#xA;&lt;p&gt;Authenticated crawling involves including custom headers or cookies in HTTP requests to access protected resources. These headers provide authentication or authorization information, allowing you to crawl authenticated content / endpoint. You can specify headers directly in the command line or provide them as a file with katana to perfrom authenticated crawling.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: User needs to be manually perform the authentication and export the session cookie / header to file to use with katana.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;&lt;em&gt;&lt;code&gt;-headers&lt;/code&gt;&lt;/em&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Option to add a custom header or cookie to the request.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Syntax of &lt;a href=&#34;https://datatracker.ietf.org/doc/html/rfc7230#section-3.2&#34;&gt;headers&lt;/a&gt; in the HTTP specification&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Here is an example of adding a cookie to the request:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;katana -u https://tesla.com -H &#39;Cookie: usrsess=AmljNrESo&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It is also possible to supply headers or cookies as a file. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cat cookie.txt&#xA;&#xA;Cookie: PHPSESSIONID=XXXXXXXXX&#xA;X-API-KEY: XXXXX&#xA;TOKEN=XX&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;katana -u https://tesla.com -H cookie.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There are more options to configure when needed, here is all the config related CLI options -&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;katana -h config&#xA;&#xA;Flags:&#xA;CONFIGURATION:&#xA;   -r, -resolvers string[]       list of custom resolver (file or comma separated)&#xA;   -d, -depth int                maximum depth to crawl (default 3)&#xA;   -jc, -js-crawl                enable endpoint parsing / crawling in javascript file&#xA;   -ct, -crawl-duration int      maximum duration to crawl the target for&#xA;   -kf, -known-files string      enable crawling of known files (all,robotstxt,sitemapxml)&#xA;   -mrs, -max-response-size int  maximum response size to read (default 9223372036854775807)&#xA;   -timeout int                  time to wait for request in seconds (default 10)&#xA;   -aff, -automatic-form-fill    enable automatic form filling (experimental)&#xA;   -fx, -form-extraction         enable extraction of form, input, textarea &amp;amp; select elements&#xA;   -retry int                    number of times to retry the request (default 1)&#xA;   -proxy string                 http/socks5 proxy to use&#xA;   -H, -headers string[]         custom header/cookie to include in request&#xA;   -config string                path to the katana configuration file&#xA;   -fc, -form-config string      path to custom form configuration file&#xA;   -flc, -field-config string    path to custom field configuration file&#xA;   -s, -strategy string          Visit strategy (depth-first, breadth-first) (default &#34;depth-first&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Connecting to Active Browser Session&lt;/h3&gt; &#xA;&lt;p&gt;Katana can also connect to active browser session where user is already logged in and authenticated. and use it for crawling. The only requirement for this is to start browser with remote debugging enabled.&lt;/p&gt; &#xA;&lt;p&gt;Here is an example of starting chrome browser with remote debugging enabled and using it with katana -&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;step 1) First Locate path of chrome executable&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Operating System&lt;/th&gt; &#xA;   &lt;th&gt;Chromium Executable Location&lt;/th&gt; &#xA;   &lt;th&gt;Google Chrome Executable Location&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Windows (64-bit)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;C:\Program Files (x86)\Google\Chromium\Application\chrome.exe&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;C:\Program Files (x86)\Google\Chrome\Application\chrome.exe&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Windows (32-bit)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;C:\Program Files\Google\Chromium\Application\chrome.exe&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;C:\Program Files\Google\Chrome\Application\chrome.exe&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;macOS&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;/Applications/Chromium.app/Contents/MacOS/Chromium&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;/Applications/Google Chrome.app/Contents/MacOS/Google Chrome&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Linux&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;/usr/bin/chromium&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;/usr/bin/google-chrome&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;strong&gt;step 2) Start chrome with remote debugging enabled and it will return websocker url. For example, on MacOS, you can start chrome with remote debugging enabled using following command&lt;/strong&gt; -&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ /Applications/Google\ Chrome.app/Contents/MacOS/Google\ Chrome --remote-debugging-port=9222&#xA;&#xA;&#xA;DevTools listening on ws://127.0.0.1:9222/devtools/browser/c5316c9c-19d6-42dc-847a-41d1aeebf7d6&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Now login to the website you want to crawl and keep the browser open.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;strong&gt;step 3) Now use the websocket url with katana to connect to the active browser session and crawl the website&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;katana -headless -u https://tesla.com -cwu ws://127.0.0.1:9222/devtools/browser/c5316c9c-19d6-42dc-847a-41d1aeebf7d6 -no-incognito&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: you can use &lt;code&gt;-cdd&lt;/code&gt; option to specify custom chrome data directory to store browser data and cookies but that does not save session data if cookie is set to &lt;code&gt;Session&lt;/code&gt; only or expires after certain time.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Filters&lt;/h2&gt; &#xA;&lt;h2&gt;&lt;em&gt;&lt;code&gt;-field&lt;/code&gt;&lt;/em&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Katana comes with built in fields that can be used to filter the output for the desired information, &lt;code&gt;-f&lt;/code&gt; option can be used to specify any of the available fields.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;   -f, -field string  field to display in output (url,path,fqdn,rdn,rurl,qurl,qpath,file,key,value,kv,dir,udir)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here is a table with examples of each field and expected output when used -&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;FIELD&lt;/th&gt; &#xA;   &lt;th&gt;DESCRIPTION&lt;/th&gt; &#xA;   &lt;th&gt;EXAMPLE&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;url&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;URL Endpoint&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;https://admin.projectdiscovery.io/admin/login?user=admin&amp;amp;password=admin&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;qurl&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;URL including query param&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;https://admin.projectdiscovery.io/admin/login.php?user=admin&amp;amp;password=admin&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;qpath&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Path including query param&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;/login?user=admin&amp;amp;password=admin&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;path&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;URL Path&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;https://admin.projectdiscovery.io/admin/login&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;fqdn&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Fully Qualified Domain name&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;admin.projectdiscovery.io&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;rdn&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Root Domain name&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;projectdiscovery.io&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;rurl&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Root URL&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;https://admin.projectdiscovery.io&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;ufile&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;URL with File&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;https://admin.projectdiscovery.io/login.js&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;file&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Filename in URL&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;login.php&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;key&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Parameter keys in URL&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;user,password&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;value&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Parameter values in URL&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;admin,admin&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;kv&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Keys=Values in URL&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;user=admin&amp;amp;password=admin&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;dir&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;URL Directory name&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;/admin/&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;udir&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;URL with Directory&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;https://admin.projectdiscovery.io/admin/&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Here is an example of using field option to only display all the urls with query parameter in it -&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;katana -u https://tesla.com -f qurl -silent&#xA;&#xA;https://shop.tesla.com/en_au?redirect=no&#xA;https://shop.tesla.com/en_nz?redirect=no&#xA;https://shop.tesla.com/product/men_s-raven-lightweight-zip-up-bomber-jacket?sku=1740250-00-A&#xA;https://shop.tesla.com/product/tesla-shop-gift-card?sku=1767247-00-A&#xA;https://shop.tesla.com/product/men_s-chill-crew-neck-sweatshirt?sku=1740176-00-A&#xA;https://www.tesla.com/about?redirect=no&#xA;https://www.tesla.com/about/legal?redirect=no&#xA;https://www.tesla.com/findus/list?redirect=no&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Custom Fields&lt;/h3&gt; &#xA;&lt;p&gt;You can create custom fields to extract and store specific information from page responses using regex rules. These custom fields are defined using a YAML config file and are loaded from the default location at &lt;code&gt;$HOME/.config/katana/field-config.yaml&lt;/code&gt;. Alternatively, you can use the &lt;code&gt;-flc&lt;/code&gt; option to load a custom field config file from a different location. Here is example custom field.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;- name: email&#xA;  type: regex&#xA;  regex:&#xA;  - &#39;([a-zA-Z0-9._-]+@[a-zA-Z0-9._-]+\.[a-zA-Z0-9_-]+)&#39;&#xA;  - &#39;([a-zA-Z0-9+._-]+@[a-zA-Z0-9._-]+\.[a-zA-Z0-9_-]+)&#39;&#xA;&#xA;- name: phone&#xA;  type: regex&#xA;  regex:&#xA;  - &#39;\d{3}-\d{8}|\d{4}-\d{7}&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When defining custom fields, following attributes are supported:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;name&lt;/strong&gt; (required)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;The value of &lt;strong&gt;name&lt;/strong&gt; attribute is used as the &lt;code&gt;-field&lt;/code&gt; cli option value.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;type&lt;/strong&gt; (required)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;The type of custom attribute, currenly supported option - &lt;code&gt;regex&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;part&lt;/strong&gt; (optional)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;The part of the response to extract the information from. The default value is &lt;code&gt;response&lt;/code&gt;, which includes both the header and body. Other possible values are &lt;code&gt;header&lt;/code&gt; and &lt;code&gt;body&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;group (optional)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;You can use this attribute to select a specific matched group in regex, for example: &lt;code&gt;group: 1&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;Running katana using custom field:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;katana -u https://tesla.com -f email,phone&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;&lt;em&gt;&lt;code&gt;-store-field&lt;/code&gt;&lt;/em&gt;&lt;/h2&gt; &#xA;&lt;p&gt;To compliment &lt;code&gt;field&lt;/code&gt; option which is useful to filter output at run time, there is &lt;code&gt;-sf, -store-fields&lt;/code&gt; option which works exactly like field option except instead of filtering, it stores all the information on the disk under &lt;code&gt;katana_field&lt;/code&gt; directory sorted by target url.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;katana -u https://tesla.com -sf key,fqdn,qurl -silent&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ ls katana_field/&#xA;&#xA;https_www.tesla.com_fqdn.txt&#xA;https_www.tesla.com_key.txt&#xA;https_www.tesla.com_qurl.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;-store-field&lt;/code&gt; option can be useful for collecting information to build a targeted wordlist for various purposes, including but not limited to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Identifying the most commonly used parameters&lt;/li&gt; &#xA; &lt;li&gt;Discovering frequently used paths&lt;/li&gt; &#xA; &lt;li&gt;Finding commonly used files&lt;/li&gt; &#xA; &lt;li&gt;Identifying related or unknown subdomains&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Katana Filters&lt;/h3&gt; &#xA;&lt;h2&gt;&lt;em&gt;&lt;code&gt;-extension-match&lt;/code&gt;&lt;/em&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Crawl output can be easily matched for specific extension using &lt;code&gt;-em&lt;/code&gt; option to ensure to display only output containing given extension.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;katana -u https://tesla.com -silent -em js,jsp,json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;&lt;em&gt;&lt;code&gt;-extension-filter&lt;/code&gt;&lt;/em&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Crawl output can be easily filtered for specific extension using &lt;code&gt;-ef&lt;/code&gt; option which ensure to remove all the urls containing given extension.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;katana -u https://tesla.com -silent -ef css,txt,md&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;&lt;em&gt;&lt;code&gt;-match-regex&lt;/code&gt;&lt;/em&gt;&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;-match-regex&lt;/code&gt; or &lt;code&gt;-mr&lt;/code&gt; flag allows you to filter output URLs using regular expressions. When using this flag, only URLs that match the specified regular expression will be printed in the output.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;katana -u https://tesla.com -mr &#39;https://shop\.tesla\.com/*&#39; -silent&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;&lt;em&gt;&lt;code&gt;-filter-regex&lt;/code&gt;&lt;/em&gt;&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;-filter-regex&lt;/code&gt; or &lt;code&gt;-fr&lt;/code&gt; flag allows you to filter output URLs using regular expressions. When using this flag, it will skip the URLs that are match the specified regular expression.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;katana -u https://tesla.com -fr &#39;https://www\.tesla\.com/*&#39; -silent&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Advance Filtering&lt;/h3&gt; &#xA;&lt;p&gt;Katana supports DSL-based expressions for advanced matching and filtering capabilities:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;To match endpoints with a 200 status code:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;katana -u https://www.hackerone.com -mdc &#39;status_code == 200&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;To match endpoints that contain &#34;default&#34; and have a status code other than 403:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;katana -u https://www.hackerone.com -mdc &#39;contains(endpoint, &#34;default&#34;) &amp;amp;&amp;amp; status_code != 403&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;To match endpoints with PHP technologies:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;katana -u https://www.hackerone.com -mdc &#39;contains(to_lower(technologies), &#34;php&#34;)&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;To filter out endpoints running on Cloudflare:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;katana -u https://www.hackerone.com -fdc &#39;contains(to_lower(technologies), &#34;cloudflare&#34;)&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;DSL functions can be applied to any keys in the jsonl output. For more information on available DSL functions, please visit the &lt;a href=&#34;https://github.com/projectdiscovery/dsl&#34;&gt;dsl project&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Here are additional filter options -&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;katana -h filter&#xA;&#xA;Flags:&#xA;FILTER:&#xA;   -mr, -match-regex string[]       regex or list of regex to match on output url (cli, file)&#xA;   -fr, -filter-regex string[]      regex or list of regex to filter on output url (cli, file)&#xA;   -f, -field string                field to display in output (url,path,fqdn,rdn,rurl,qurl,qpath,file,ufile,key,value,kv,dir,udir)&#xA;   -sf, -store-field string         field to store in per-host output (url,path,fqdn,rdn,rurl,qurl,qpath,file,ufile,key,value,kv,dir,udir)&#xA;   -em, -extension-match string[]   match output for given extension (eg, -em php,html,js)&#xA;   -ef, -extension-filter string[]  filter output for given extension (eg, -ef png,css)&#xA;   -mdc, -match-condition string    match response with dsl based condition&#xA;   -fdc, -filter-condition string   filter response with dsl based condition&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Rate Limit&lt;/h2&gt; &#xA;&lt;p&gt;It&#39;s easy to get blocked / banned while crawling if not following target websites limits, katana comes with multiple option to tune the crawl to go as fast / slow we want.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;em&gt;&lt;code&gt;-delay&lt;/code&gt;&lt;/em&gt;&lt;/h2&gt; &#xA;&lt;p&gt;option to introduce a delay in seconds between each new request katana makes while crawling, disabled as default.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;katana -u https://tesla.com -delay 20&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;&lt;em&gt;&lt;code&gt;-concurrency&lt;/code&gt;&lt;/em&gt;&lt;/h2&gt; &#xA;&lt;p&gt;option to control the number of urls per target to fetch at the same time.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;katana -u https://tesla.com -c 20&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;&lt;em&gt;&lt;code&gt;-parallelism&lt;/code&gt;&lt;/em&gt;&lt;/h2&gt; &#xA;&lt;p&gt;option to define number of target to process at same time from list input.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;katana -u https://tesla.com -p 20&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;&lt;em&gt;&lt;code&gt;-rate-limit&lt;/code&gt;&lt;/em&gt;&lt;/h2&gt; &#xA;&lt;p&gt;option to use to define max number of request can go out per second.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;katana -u https://tesla.com -rl 100&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;&lt;em&gt;&lt;code&gt;-rate-limit-minute&lt;/code&gt;&lt;/em&gt;&lt;/h2&gt; &#xA;&lt;p&gt;option to use to define max number of request can go out per minute.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;katana -u https://tesla.com -rlm 500&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here is all long / short CLI options for rate limit control -&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;katana -h rate-limit&#xA;&#xA;Flags:&#xA;RATE-LIMIT:&#xA;   -c, -concurrency int          number of concurrent fetchers to use (default 10)&#xA;   -p, -parallelism int          number of concurrent inputs to process (default 10)&#xA;   -rd, -delay int               request delay between each request in seconds&#xA;   -rl, -rate-limit int          maximum requests to send per second (default 150)&#xA;   -rlm, -rate-limit-minute int  maximum number of requests to send per minute&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Output&lt;/h2&gt; &#xA;&lt;p&gt;Katana support both file output in plain text format as well as JSON which includes additional information like, &lt;code&gt;source&lt;/code&gt;, &lt;code&gt;tag&lt;/code&gt;, and &lt;code&gt;attribute&lt;/code&gt; name to co-related the discovered endpoint.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;code&gt;-output&lt;/code&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;By default, katana outputs the crawled endpoints in plain text format. The results can be written to a file by using the -output option.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;katana -u https://example.com -no-scope -output example_endpoints.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;&lt;em&gt;&lt;code&gt;-jsonl&lt;/code&gt;&lt;/em&gt;&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;katana -u https://example.com -jsonl | jq .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;timestamp&#34;: &#34;2023-03-20T16:23:58.027559+05:30&#34;,&#xA;  &#34;request&#34;: {&#xA;    &#34;method&#34;: &#34;GET&#34;,&#xA;    &#34;endpoint&#34;: &#34;https://example.com&#34;,&#xA;    &#34;raw&#34;: &#34;GET / HTTP/1.1\r\nHost: example.com\r\nUser-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 11_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36\r\nAccept-Encoding: gzip\r\n\r\n&#34;&#xA;  },&#xA;  &#34;response&#34;: {&#xA;    &#34;status_code&#34;: 200,&#xA;    &#34;headers&#34;: {&#xA;      &#34;accept_ranges&#34;: &#34;bytes&#34;,&#xA;      &#34;expires&#34;: &#34;Mon, 27 Mar 2023 10:53:58 GMT&#34;,&#xA;      &#34;last_modified&#34;: &#34;Thu, 17 Oct 2019 07:18:26 GMT&#34;,&#xA;      &#34;content_type&#34;: &#34;text/html; charset=UTF-8&#34;,&#xA;      &#34;server&#34;: &#34;ECS (dcb/7EA3)&#34;,&#xA;      &#34;vary&#34;: &#34;Accept-Encoding&#34;,&#xA;      &#34;etag&#34;: &#34;\&#34;3147526947\&#34;&#34;,&#xA;      &#34;cache_control&#34;: &#34;max-age=604800&#34;,&#xA;      &#34;x_cache&#34;: &#34;HIT&#34;,&#xA;      &#34;date&#34;: &#34;Mon, 20 Mar 2023 10:53:58 GMT&#34;,&#xA;      &#34;age&#34;: &#34;331239&#34;&#xA;    },&#xA;    &#34;body&#34;: &#34;&amp;lt;!doctype html&amp;gt;\n&amp;lt;html&amp;gt;\n&amp;lt;head&amp;gt;\n    &amp;lt;title&amp;gt;Example Domain&amp;lt;/title&amp;gt;\n\n    &amp;lt;meta charset=\&#34;utf-8\&#34; /&amp;gt;\n    &amp;lt;meta http-equiv=\&#34;Content-type\&#34; content=\&#34;text/html; charset=utf-8\&#34; /&amp;gt;\n    &amp;lt;meta name=\&#34;viewport\&#34; content=\&#34;width=device-width, initial-scale=1\&#34; /&amp;gt;\n    &amp;lt;style type=\&#34;text/css\&#34;&amp;gt;\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: -apple-system, system-ui, BlinkMacSystemFont, \&#34;Segoe UI\&#34;, \&#34;Open Sans\&#34;, \&#34;Helvetica Neue\&#34;, Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 2em;\n        background-color: #fdfdff;\n        border-radius: 0.5em;\n        box-shadow: 2px 3px 7px 2px rgba(0,0,0,0.02);\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        div {\n            margin: 0 auto;\n            width: auto;\n        }\n    }\n    &amp;lt;/style&amp;gt;    \n&amp;lt;/head&amp;gt;\n\n&amp;lt;body&amp;gt;\n&amp;lt;div&amp;gt;\n    &amp;lt;h1&amp;gt;Example Domain&amp;lt;/h1&amp;gt;\n    &amp;lt;p&amp;gt;This domain is for use in illustrative examples in documents. You may use this\n    domain in literature without prior coordination or asking for permission.&amp;lt;/p&amp;gt;\n    &amp;lt;p&amp;gt;&amp;lt;a href=\&#34;https://www.iana.org/domains/example\&#34;&amp;gt;More information...&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;\n&amp;lt;/div&amp;gt;\n&amp;lt;/body&amp;gt;\n&amp;lt;/html&amp;gt;\n&#34;,&#xA;    &#34;technologies&#34;: [&#xA;      &#34;Azure&#34;,&#xA;      &#34;Amazon ECS&#34;,&#xA;      &#34;Amazon Web Services&#34;,&#xA;      &#34;Docker&#34;,&#xA;      &#34;Azure CDN&#34;&#xA;    ],&#xA;    &#34;raw&#34;: &#34;HTTP/1.1 200 OK\r\nContent-Length: 1256\r\nAccept-Ranges: bytes\r\nAge: 331239\r\nCache-Control: max-age=604800\r\nContent-Type: text/html; charset=UTF-8\r\nDate: Mon, 20 Mar 2023 10:53:58 GMT\r\nEtag: \&#34;3147526947\&#34;\r\nExpires: Mon, 27 Mar 2023 10:53:58 GMT\r\nLast-Modified: Thu, 17 Oct 2019 07:18:26 GMT\r\nServer: ECS (dcb/7EA3)\r\nVary: Accept-Encoding\r\nX-Cache: HIT\r\n\r\n&amp;lt;!doctype html&amp;gt;\n&amp;lt;html&amp;gt;\n&amp;lt;head&amp;gt;\n    &amp;lt;title&amp;gt;Example Domain&amp;lt;/title&amp;gt;\n\n    &amp;lt;meta charset=\&#34;utf-8\&#34; /&amp;gt;\n    &amp;lt;meta http-equiv=\&#34;Content-type\&#34; content=\&#34;text/html; charset=utf-8\&#34; /&amp;gt;\n    &amp;lt;meta name=\&#34;viewport\&#34; content=\&#34;width=device-width, initial-scale=1\&#34; /&amp;gt;\n    &amp;lt;style type=\&#34;text/css\&#34;&amp;gt;\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: -apple-system, system-ui, BlinkMacSystemFont, \&#34;Segoe UI\&#34;, \&#34;Open Sans\&#34;, \&#34;Helvetica Neue\&#34;, Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 2em;\n        background-color: #fdfdff;\n        border-radius: 0.5em;\n        box-shadow: 2px 3px 7px 2px rgba(0,0,0,0.02);\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        div {\n            margin: 0 auto;\n            width: auto;\n        }\n    }\n    &amp;lt;/style&amp;gt;    \n&amp;lt;/head&amp;gt;\n\n&amp;lt;body&amp;gt;\n&amp;lt;div&amp;gt;\n    &amp;lt;h1&amp;gt;Example Domain&amp;lt;/h1&amp;gt;\n    &amp;lt;p&amp;gt;This domain is for use in illustrative examples in documents. You may use this\n    domain in literature without prior coordination or asking for permission.&amp;lt;/p&amp;gt;\n    &amp;lt;p&amp;gt;&amp;lt;a href=\&#34;https://www.iana.org/domains/example\&#34;&amp;gt;More information...&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;\n&amp;lt;/div&amp;gt;\n&amp;lt;/body&amp;gt;\n&amp;lt;/html&amp;gt;\n&#34;&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;&lt;em&gt;&lt;code&gt;-store-response&lt;/code&gt;&lt;/em&gt;&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;-store-response&lt;/code&gt; option allows for writing all crawled endpoint requests and responses to a text file. When this option is used, text files including the request and response will be written to the &lt;strong&gt;katana_response&lt;/strong&gt; directory. If you would like to specify a custom directory, you can use the &lt;code&gt;-store-response-dir&lt;/code&gt; option.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;katana -u https://example.com -no-scope -store-response&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cat katana_response/index.txt&#xA;&#xA;katana_response/example.com/327c3fda87ce286848a574982ddd0b7c7487f816.txt https://example.com (200 OK)&#xA;katana_response/www.iana.org/bfc096e6dd93b993ca8918bf4c08fdc707a70723.txt http://www.iana.org/domains/reserved (200 OK)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;code&gt;-store-response&lt;/code&gt; option is not supported in &lt;code&gt;-headless&lt;/code&gt; mode.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Here are additional CLI options related to output -&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;katana -h output&#xA;&#xA;OUTPUT:&#xA;   -o, -output string                file to write output to&#xA;   -sr, -store-response              store http requests/responses&#xA;   -srd, -store-response-dir string  store http requests/responses to custom directory&#xA;   -j, -json                         write output in JSONL(ines) format&#xA;   -nc, -no-color                    disable output content coloring (ANSI escape codes)&#xA;   -silent                           display output only&#xA;   -v, -verbose                      display verbose output&#xA;   -version                          display project version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Katana as a library&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;katana&lt;/code&gt; can be used as a library by creating an instance of the &lt;code&gt;Option&lt;/code&gt; struct and populating it with the same options that would be specified via CLI. Using the options you can create &lt;code&gt;crawlerOptions&lt;/code&gt; and so standard or hybrid &lt;code&gt;crawler&lt;/code&gt;. &lt;code&gt;crawler.Crawl&lt;/code&gt; method should be called to crawl the input.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;github.com/projectdiscovery/gologger&#34;&#xA;&#x9;&#34;github.com/projectdiscovery/katana/pkg/engine/standard&#34;&#xA;&#x9;&#34;github.com/projectdiscovery/katana/pkg/output&#34;&#xA;&#x9;&#34;github.com/projectdiscovery/katana/pkg/types&#34;&#xA;)&#xA;&#xA;func main() {&#xA;&#x9;options := &amp;amp;types.Options{&#xA;&#x9;&#x9;MaxDepth:     1,               // Maximum depth to crawl&#xA;&#x9;&#x9;FieldScope:   &#34;rdn&#34;,           // Crawling Scope Field&#xA;&#x9;&#x9;BodyReadSize: 2 * 1024 * 1024, // Maximum response size to read&#xA;&#x9;&#x9;RateLimit:    150,             // Maximum requests to send per second&#xA;&#x9;&#x9;Strategy:     &#34;depth-first&#34;,   // Visit strategy (depth-first, breadth-first)&#xA;&#x9;&#x9;OnResult: func(result output.Result) { // Callback function to execute for result&#xA;&#x9;&#x9;&#x9;gologger.Info().Msg(result.Request.URL)&#xA;&#x9;&#x9;},&#xA;&#x9;}&#xA;&#x9;crawlerOptions, err := types.NewCrawlerOptions(options)&#xA;&#x9;if err != nil {&#xA;&#x9;&#x9;gologger.Fatal().Msg(err.Error())&#xA;&#x9;}&#xA;&#x9;defer crawlerOptions.Close()&#xA;&#x9;crawler, err := standard.New(crawlerOptions)&#xA;&#x9;if err != nil {&#xA;&#x9;&#x9;gologger.Fatal().Msg(err.Error())&#xA;&#x9;}&#xA;&#x9;defer crawler.Close()&#xA;&#x9;var input = &#34;https://tesla.com&#34;&#xA;&#x9;err = crawler.Crawl(input)&#xA;&#x9;if err != nil {&#xA;&#x9;&#x9;gologger.Warning().Msgf(&#34;Could not crawl %s: %s&#34;, input, err.Error())&#xA;&#x9;}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt;katana is made with ❤️ by the &lt;a href=&#34;https://projectdiscovery.io&#34;&gt;projectdiscovery&lt;/a&gt; team and distributed under &lt;a href=&#34;https://raw.githubusercontent.com/projectdiscovery/katana/main/LICENSE.md&#34;&gt;MIT License&lt;/a&gt;.&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://discord.gg/projectdiscovery&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/projectdiscovery/nuclei-burp-plugin/main/static/join-discord.png&#34; width=&#34;300&#34; alt=&#34;Join Discord&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt;</summary>
  </entry>
  <entry>
    <title>projectdiscovery/naabu</title>
    <updated>2023-08-27T01:55:11Z</updated>
    <id>tag:github.com,2023-08-27:/projectdiscovery/naabu</id>
    <link href="https://github.com/projectdiscovery/naabu" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A fast port scanner written in go with a focus on reliability and simplicity. Designed to be used in combination with other tools for attack surface discovery in bug bounties and pentests&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/projectdiscovery/naabu/main/static/naabu-logo.png&#34; alt=&#34;naabu&#34; width=&#34;200px&#34;&gt; &lt;br&gt; &lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-MIT-_red.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/projectdiscovery/naabu/issues&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/contributions-welcome-brightgreen.svg?style=flat&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/badge/github.com/projectdiscovery/naabu&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/projectdiscovery/naabu&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/projectdiscovery/naabu/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/projectdiscovery/naabu&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/pdiscoveryio&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/follow/pdiscoveryio.svg?logo=twitter&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/projectdiscovery&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/695645237418131507.svg?logo=discord&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://raw.githubusercontent.com/projectdiscovery/naabu/main/#features&#34;&gt;Features&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/projectdiscovery/naabu/main/#installation-instructions&#34;&gt;Installation&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/projectdiscovery/naabu/main/#usage&#34;&gt;Usage&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/projectdiscovery/naabu/main/#running-naabu&#34;&gt;Running naabu&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/projectdiscovery/naabu/main/#configuration-file&#34;&gt;Config&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/projectdiscovery/naabu/main/#nmap-integration&#34;&gt;NMAP integration&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/projectdiscovery/naabu/main/#cdn-waf-exclusion&#34;&gt;CDN/WAF Exclusion&lt;/a&gt; • &lt;a href=&#34;https://discord.gg/projectdiscovery&#34;&gt;Discord&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;Naabu is a port scanning tool written in Go that allows you to enumerate valid ports for hosts in a fast and reliable manner. It is a really simple tool that does fast SYN/CONNECT/UDP scans on the host/list of hosts and lists all ports that return a reply.&lt;/p&gt; &#xA;&lt;h1&gt;Features&lt;/h1&gt; &#xA;&lt;h1 align=&#34;center&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/8293321/180417395-25b1b990-c032-4b5c-9b66-03b58db0789a.png&#34; alt=&#34;naabu&#34; width=&#34;700px&#34;&gt; &lt;br&gt; &lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fast And Simple &lt;strong&gt;SYN/CONNECT/UDP&lt;/strong&gt; probe based scanning&lt;/li&gt; &#xA; &lt;li&gt;Optimized for ease of use and &lt;strong&gt;lightweight&lt;/strong&gt; on resources&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;DNS&lt;/strong&gt; Port scan&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Automatic IP Deduplication&lt;/strong&gt; for DNS port scan&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;IPv4/IPv6&lt;/strong&gt; Port scan (&lt;strong&gt;experimental&lt;/strong&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Passive&lt;/strong&gt; Port enumeration using Shodan &lt;a href=&#34;https://internetdb.shodan.io&#34;&gt;Internetdb&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Host Discovery&lt;/strong&gt; scan (&lt;strong&gt;experimental&lt;/strong&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;NMAP&lt;/strong&gt; integration for service discovery&lt;/li&gt; &#xA; &lt;li&gt;Multiple input support - &lt;strong&gt;STDIN/HOST/IP/CIDR/ASN&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Multiple output format support - &lt;strong&gt;JSON/TXT/STDOUT&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Usage&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;naabu -h&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will display help for the tool. Here are all the switches it supports.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;Usage:&#xA;  ./naabu [flags]&#xA;&#xA;INPUT:&#xA;   -host string[]              hosts to scan ports for (comma-separated)&#xA;   -list, -l string            list of hosts to scan ports (file)&#xA;   -exclude-hosts, -eh string  hosts to exclude from the scan (comma-separated)&#xA;   -exclude-file, -ef string   list of hosts to exclude from scan (file)&#xA;&#xA;PORT:&#xA;   -port, -p string            ports to scan (80,443, 100-200)&#xA;   -top-ports, -tp string      top ports to scan (default 100) [full,100,1000]&#xA;   -exclude-ports, -ep string  ports to exclude from scan (comma-separated)&#xA;   -ports-file, -pf string     list of ports to scan (file)&#xA;   -port-threshold, -pts int   port threshold to skip port scan for the host&#xA;   -exclude-cdn, -ec           skip full port scans for CDN/WAF (only scan for port 80,443)&#xA;   -display-cdn, -cdn          display cdn in use&#xA;&#xA;RATE-LIMIT:&#xA;   -c int     general internal worker threads (default 25)&#xA;   -rate int  packets to send per second (default 1000)&#xA;&#xA;UPDATE:&#xA;   -up, -update                 update naabu to latest version&#xA;   -duc, -disable-update-check  disable automatic naabu update check&#xA;&#xA;OUTPUT:&#xA;   -o, -output string  file to write output to (optional)&#xA;   -json               write output in JSON lines format&#xA;   -csv                write output in csv format&#xA;&#xA;CONFIGURATION:&#xA;   -scan-all-ips, -sa               scan all the IP&#39;s associated with DNS record&#xA;   -ip-version, -iv string[]        ip version to scan of hostname (4,6) - (default 4)&#xA;   -scan-type, -s string            type of port scan (SYN/CONNECT) (default &#34;s&#34;)&#xA;   -source-ip string                source ip and port (x.x.x.x:yyy)&#xA;   -interface-list, -il             list available interfaces and public ip&#xA;   -interface, -i string            network Interface to use for port scan&#xA;   -nmap                            invoke nmap scan on targets (nmap must be installed) - Deprecated&#xA;   -nmap-cli string                 nmap command to run on found results (example: -nmap-cli &#39;nmap -sV&#39;)&#xA;   -r string                        list of custom resolver dns resolution (comma separated or from file)&#xA;   -proxy string                    socks5 proxy (ip[:port] / fqdn[:port]&#xA;   -proxy-auth string               socks5 proxy authentication (username:password)&#xA;   -resume                          resume scan using resume.cfg&#xA;   -stream                          stream mode (disables resume, nmap, verify, retries, shuffling, etc)&#xA;   -passive                         display passive open ports using shodan internetdb api&#xA;   -irt, -input-read-timeout value  timeout on input read (default 3m0s)&#xA;   -no-stdin                        Disable Stdin processing&#xA;&#xA;HOST-DISCOVERY:&#xA;   -sn, -host-discovery           Perform Only Host Discovery&#xA;   -Pn, -skip-host-discovery      Skip Host discovery&#xA;   -ps, -probe-tcp-syn string[]   TCP SYN Ping (host discovery needs to be enabled)&#xA;   -pa, -probe-tcp-ack string[]   TCP ACK Ping (host discovery needs to be enabled)&#xA;   -pe, -probe-icmp-echo          ICMP echo request Ping (host discovery needs to be enabled)&#xA;   -pp, -probe-icmp-timestamp     ICMP timestamp request Ping (host discovery needs to be enabled)&#xA;   -pm, -probe-icmp-address-mask  ICMP address mask request Ping (host discovery needs to be enabled)&#xA;   -arp, -arp-ping                ARP ping (host discovery needs to be enabled)&#xA;   -nd, -nd-ping                  IPv6 Neighbor Discovery (host discovery needs to be enabled)&#xA;   -rev-ptr                       Reverse PTR lookup for input ips&#xA;&#xA;OPTIMIZATION:&#xA;   -retries int       number of retries for the port scan (default 3)&#xA;   -timeout int       millisecond to wait before timing out (default 1000)&#xA;   -warm-up-time int  time in seconds between scan phases (default 2)&#xA;   -ping              ping probes for verification of host&#xA;   -verify            validate the ports again with TCP verification&#xA;&#xA;DEBUG:&#xA;   -health-check, -hc        run diagnostic check up&#xA;   -debug                    display debugging information&#xA;   -verbose, -v              display verbose output&#xA;   -no-color, -nc            disable colors in CLI output&#xA;   -silent                   display only results in output&#xA;   -version                  display version of naabu&#xA;   -stats                    display stats of the running scan (deprecated)&#xA;   -si, -stats-interval int  number of seconds to wait between showing a statistics update (deprecated) (default 5)&#xA;   -mp, -metrics-port int    port to expose nuclei metrics on (default 63636)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Installation Instructions&lt;/h1&gt; &#xA;&lt;p&gt;Download the ready to run &lt;a href=&#34;https://github.com/projectdiscovery/naabu/releases/&#34;&gt;binary&lt;/a&gt; / &lt;a href=&#34;https://hub.docker.com/r/projectdiscovery/naabu&#34;&gt;docker&lt;/a&gt; or install with GO&lt;/p&gt; &#xA;&lt;h2&gt;Prerequisite&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: before installing naabu, make sure to install &lt;code&gt;libpcap&lt;/code&gt; library for packet capturing.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;To install libcap on &lt;strong&gt;Linux&lt;/strong&gt;: &lt;code&gt;sudo apt install -y libpcap-dev&lt;/code&gt;, on &lt;strong&gt;Mac&lt;/strong&gt;: &lt;code&gt;brew install libpcap&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installing Naabu&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;go install -v github.com/projectdiscovery/naabu/v2/cmd/naabu@latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Running Naabu&lt;/h1&gt; &#xA;&lt;p&gt;To run the tool on a target, just use the following command.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;naabu -host hackerone.com&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will run the tool against hackerone.com. There are a number of configuration options that you can pass along with this command. The verbose switch &lt;code&gt;-v&lt;/code&gt; can be used to display verbose information.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;naabu -host hackerone.com&#xA;&#xA;                  __&#xA;  ___  ___  ___ _/ /  __ __&#xA; / _ \/ _ \/ _ \/ _ \/ // /&#xA;/_//_/\_,_/\_,_/_.__/\_,_/ v2.0.3&#xA;&#xA;    projectdiscovery.io&#xA;&#xA;[WRN] Use with caution. You are responsible for your actions&#xA;[WRN] Developers assume no liability and are not responsible for any misuse or damage.&#xA;[INF] Running SYN scan with root privileges&#xA;[INF] Found 4 ports on host hackerone.com (104.16.100.52)&#xA;&#xA;hackerone.com:80&#xA;hackerone.com:443&#xA;hackerone.com:8443&#xA;hackerone.com:8080&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The ports to scan for on the host can be specified via &lt;code&gt;-p&lt;/code&gt; parameter (udp ports must be expressed as &lt;code&gt;u:port&lt;/code&gt;). It takes nmap format ports and runs enumeration on them.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;naabu -p 80,443,21-23,u:53 -host hackerone.com&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default, the Naabu checks for nmap&#39;s &lt;code&gt;Top 100&lt;/code&gt; ports. It supports following in-built port lists -&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Flag&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;-top-ports 100&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Scan for nmap top &lt;strong&gt;100&lt;/strong&gt; port&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;-top-ports 1000&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Scan for nmap top &lt;strong&gt;1000&lt;/strong&gt; port&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;-p - &lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Scan for full ports from &lt;strong&gt;1-65535&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;You can also specify specific ports which you would like to exclude from the scan.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;naabu -p - -exclude-ports 80,443&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To run the naabu on a list of hosts, &lt;code&gt;-list&lt;/code&gt; option can be used.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;naabu -list hosts.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To run the naabu on a ASN, AS input can be used. It takes the IP address available for given ASN and runs the enumeration on them.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;echo AS14421 | naabu -p 80,443&#xA;&#xA;216.101.17.249:80&#xA;216.101.17.249:443&#xA;216.101.17.248:443&#xA;216.101.17.252:443&#xA;216.101.17.251:80&#xA;216.101.17.251:443&#xA;216.101.17.250:443&#xA;216.101.17.250:80&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also get output in json format using &lt;code&gt;-json&lt;/code&gt; switch. This switch saves the output in the JSON lines format.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;naabu -host 104.16.99.52 -json&#xA;&#xA;{&#34;ip&#34;:&#34;104.16.99.52&#34;,&#34;port&#34;:443}&#xA;{&#34;ip&#34;:&#34;104.16.99.52&#34;,&#34;port&#34;:80}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The ports discovered can be piped to other tools too. For example, you can pipe the ports discovered by naabu to &lt;a href=&#34;https://github.com/projectdiscovery/httpx&#34;&gt;httpx&lt;/a&gt; which will then find running http servers on the host.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;echo hackerone.com | naabu -silent | httpx -silent&#xA;&#xA;http://hackerone.com:8443&#xA;http://hackerone.com:443&#xA;http://hackerone.com:8080&#xA;http://hackerone.com:80&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The speed can be controlled by changing the value of &lt;code&gt;rate&lt;/code&gt; flag that represent the number of packets per second. Increasing it while processing hosts may lead to increased false-positive rates. So it is recommended to keep it to a reasonable amount.&lt;/p&gt; &#xA;&lt;h1&gt;IPv4 and IPv6&lt;/h1&gt; &#xA;&lt;p&gt;Naabu supports both IPv4 and IPv6. Both ranges can be piped together as input. If IPv6 is used, connectivity must be correctly configured, and the network interface must have an IPv6 address assigned (&lt;code&gt;inet6&lt;/code&gt;) and a default gateway.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;echo hackerone.com | dnsx -resp-only -a -aaaa -silent | naabu -p 80 -silent&#xA;&#xA;104.16.99.52:80&#xA;104.16.100.52:80&#xA;2606:4700::6810:6434:80&#xA;2606:4700::6810:6334:80&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The option &lt;code&gt;-ip-version 6&lt;/code&gt; makes the tool use IPv6 addresses while resolving domain names.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;echo hackerone.com | ./naabu -p 80 -ip-version 6&#xA;&#xA;                  __&#xA;  ___  ___  ___ _/ /  __ __&#xA; / _ \/ _ \/ _ \/ _ \/ // /&#xA;/_//_/\_,_/\_,_/_.__/\_,_/ v2.0.8&#xA;&#xA;      projectdiscovery.io&#xA;&#xA;Use with caution. You are responsible for your actions&#xA;Developers assume no liability and are not responsible for any misuse or damage.&#xA;[INF] Running CONNECT scan with non root privileges&#xA;[INF] Found 1 ports on host hackerone.com (2606:4700::6810:6334)&#xA;hackerone.com:80&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To scan all the IPs of both version, &lt;code&gt;ip-version 4,6&lt;/code&gt; can be used along with &lt;code&gt;-scan-all-ips&lt;/code&gt; flag.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;echo hackerone.com | ./naabu -iv 4,6 -sa -p 80 -silent&#xA;&#xA;[INF] Found 1 ports on host hackerone.com (104.16.100.52)&#xA;hackerone.com:80&#xA;[INF] Found 1 ports on host hackerone.com (104.16.99.52)&#xA;hackerone.com:80&#xA;[INF] Found 1 ports on host hackerone.com (2606:4700::6810:6334)&#xA;hackerone.com:80&#xA;[INF] Found 1 ports on host hackerone.com (2606:4700::6810:6434)&#xA;hackerone.com:80&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Host Discovery&lt;/h1&gt; &#xA;&lt;p&gt;Naabu optionally supports multiple options to perform host discovery, as outlined below. Host discovery is completed automatically before beginning a connect/syn scan if the process has enough privileges. &lt;code&gt;-sn&lt;/code&gt; flag instructs the toll to perform host discovery only. &lt;code&gt;-Pn&lt;/code&gt; flag skips the host discovery phase. Host discovery is completed using multiple internal methods; one can specify the desired approach to perform host discovery by setting available options.&lt;/p&gt; &#xA;&lt;p&gt;Available options to perform host discovery:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;ARP&lt;/strong&gt; ping (&lt;code&gt;-arp&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;TCP &lt;strong&gt;SYN&lt;/strong&gt; ping (&lt;code&gt;-ps 80&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;TCP &lt;strong&gt;ACK&lt;/strong&gt; ping (&lt;code&gt;-ps 443&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;ICMP &lt;strong&gt;echo&lt;/strong&gt; ping (&lt;code&gt;-pe&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;ICMP &lt;strong&gt;timestamp&lt;/strong&gt; ping (&lt;code&gt;-pp&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;ICMP &lt;strong&gt;address mask&lt;/strong&gt; ping (&lt;code&gt;-pm&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;IPv6 &lt;strong&gt;neighbor discovery&lt;/strong&gt; (&lt;code&gt;-nd&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Configuration file&lt;/h1&gt; &#xA;&lt;p&gt;Naabu supports config file as default located at &lt;code&gt;$HOME/.config/naabu/config.yaml&lt;/code&gt;, It allows you to define any flag in the config file and set default values to include for all scans.&lt;/p&gt; &#xA;&lt;h1&gt;Nmap integration&lt;/h1&gt; &#xA;&lt;p&gt;We have integrated nmap support for service discovery or any additional scans supported by nmap on the found results by Naabu, make sure you have &lt;code&gt;nmap&lt;/code&gt; installed to use this feature.&lt;/p&gt; &#xA;&lt;p&gt;To use,&lt;code&gt;nmap-cli&lt;/code&gt; flag can be used followed by nmap command, for example:-&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;echo hackerone.com | naabu -nmap-cli &#39;nmap -sV -oX nmap-output&#39;&#xA;                  __       &#xA;  ___  ___  ___ _/ /  __ __&#xA; / _ \/ _ \/ _ \/ _ \/ // /&#xA;/_//_/\_,_/\_,_/_.__/\_,_/ v2.0.0        &#xA;&#xA;    projectdiscovery.io&#xA;&#xA;[WRN] Use with caution. You are responsible for your actions&#xA;[WRN] Developers assume no liability and are not responsible for any misuse or damage.&#xA;[INF] Running TCP/ICMP/SYN scan with root privileges&#xA;[INF] Found 4 ports on host hackerone.com (104.16.99.52)&#xA;&#xA;hackerone.com:443&#xA;hackerone.com:80&#xA;hackerone.com:8443&#xA;hackerone.com:8080&#xA;&#xA;[INF] Running nmap command: nmap -sV -p 80,8443,8080,443 104.16.99.52&#xA;&#xA;Starting Nmap 7.01 ( https://nmap.org ) at 2020-09-23 05:02 UTC&#xA;Nmap scan report for 104.16.99.52&#xA;Host is up (0.0021s latency).&#xA;PORT     STATE SERVICE       VERSION&#xA;80/tcp   open  http          cloudflare&#xA;443/tcp  open  ssl/https     cloudflare&#xA;8080/tcp open  http-proxy    cloudflare&#xA;8443/tcp open  ssl/https-alt cloudflare&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;CDN/WAF Exclusion&lt;/h1&gt; &#xA;&lt;p&gt;Naabu also supports excluding CDN/WAF IPs being port scanned. If used, only &lt;code&gt;80&lt;/code&gt; and &lt;code&gt;443&lt;/code&gt; ports get scanned for those IPs. This feature can be enabled by using &lt;code&gt;exclude-cdn&lt;/code&gt; flag.&lt;/p&gt; &#xA;&lt;p&gt;Currently &lt;code&gt;cloudflare&lt;/code&gt;, &lt;code&gt;akamai&lt;/code&gt;, &lt;code&gt;incapsula&lt;/code&gt; and &lt;code&gt;sucuri&lt;/code&gt; IPs are supported for exclusions.&lt;/p&gt; &#xA;&lt;h1&gt;Scan Status&lt;/h1&gt; &#xA;&lt;p&gt;Naabu exposes json scan info on a local port bound to localhost at &lt;code&gt;http://localhost:63636&lt;/code&gt; (the port can be changed via the &lt;code&gt;-metrics-port&lt;/code&gt; flag)&lt;/p&gt; &#xA;&lt;h1&gt;Using naabu as library&lt;/h1&gt; &#xA;&lt;p&gt;The following sample program scan the port &lt;code&gt;80&lt;/code&gt; of &lt;code&gt;scanme.sh&lt;/code&gt;. The results are returned via the &lt;code&gt;OnResult&lt;/code&gt; callback:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;log&#34;&#xA;&#xA;&#x9;&#34;github.com/projectdiscovery/goflags&#34;&#xA;&#x9;&#34;github.com/projectdiscovery/naabu/v2/pkg/result&#34;&#xA;&#x9;&#34;github.com/projectdiscovery/naabu/v2/pkg/runner&#34;&#xA;)&#xA;&#xA;func main() {&#xA;&#x9;options := runner.Options{&#xA;&#x9;&#x9;Host:      goflags.StringSlice{&#34;scanme.sh&#34;},&#xA;&#x9;&#x9;ScanType: &#34;s&#34;,&#xA;&#x9;&#x9;OnResult: func(hr *result.HostResult) {&#xA;&#x9;&#x9;&#x9;log.Println(hr.Host, hr.Ports)&#xA;&#x9;&#x9;},&#xA;&#x9;&#x9;Ports: &#34;80&#34;,&#xA;&#x9;}&#xA;&#xA;&#x9;naabuRunner, err := runner.NewRunner(&amp;amp;options)&#xA;&#x9;if err != nil {&#xA;&#x9;&#x9;log.Fatal(err)&#xA;&#x9;}&#xA;&#x9;defer naabuRunner.Close()&#xA;&#xA;&#x9;naabuRunner.RunEnumeration()&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Notes&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Naabu allows arbitrary binary execution as a feature to support &lt;a href=&#34;https://github.com/projectdiscovery/naabu#nmap-integration&#34;&gt;nmap integration&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Naabu is designed to scan ports on multiple hosts / mass port scanning.&lt;/li&gt; &#xA; &lt;li&gt;As default naabu is configured with a assumption that you are running it from VPS.&lt;/li&gt; &#xA; &lt;li&gt;We suggest tuning the flags / rate if running naabu from local system.&lt;/li&gt; &#xA; &lt;li&gt;For best results, run naabu as &lt;strong&gt;root&lt;/strong&gt; user.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Naabu is made with 🖤 by the &lt;a href=&#34;https://projectdiscovery.io&#34;&gt;projectdiscovery&lt;/a&gt; team. Community contributions have made the project what it is.&lt;/p&gt; &#xA;&lt;p&gt;See the &lt;strong&gt;&lt;a href=&#34;https://github.com/projectdiscovery/naabu/raw/master/THANKS.md&#34;&gt;Thanks.md&lt;/a&gt;&lt;/strong&gt; file for more details.&lt;/p&gt;</summary>
  </entry>
</feed>