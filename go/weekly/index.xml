<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-02-26T01:55:04Z</updated>
  <subtitle>Weekly Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>go-admin-team/go-admin</title>
    <updated>2023-02-26T01:55:04Z</updated>
    <id>tag:github.com,2023-02-26:/go-admin-team/go-admin</id>
    <link href="https://github.com/go-admin-team/go-admin" rel="alternate"></link>
    <summary type="html">&lt;p&gt;基于Gin + Vue + Element UI &amp; Arco Design &amp; Ant Design 的前后端分离权限管理系统脚手架（包含了：多租户的支持，基础用户管理功能，jwt鉴权，代码生成器，RBAC资源控制，表单构建，定时任务等）3分钟构建自己的中后台项目；项目文档》：https://www.go-admin.pro V2 Demo： https://vue2.go-admin.dev V3 Demo： https://vue3.go-admin.dev Antd 订阅版：https://antd.go-admin.pro&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;go-admin&lt;/h1&gt; &#xA;&lt;img align=&#34;right&#34; width=&#34;320&#34; src=&#34;https://doc-image.zhangwj.com/img/go-admin.svg?sanitize=true&#34;&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/go-admin-team/go-admin&#34;&gt;&lt;img src=&#34;https://github.com/wenjianzhang/go-admin/workflows/build/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/go-admin-team/go-admin/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/go-admin-team/go-admin.svg?style=flat-square&#34; alt=&#34;Release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/go-admin-team/go-admin&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/mashape/apistatus.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;English | &lt;a href=&#34;https://github.com/go-admin-team/go-admin/raw/master/README.Zh-cn.md&#34;&gt;简体中文&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The front-end and back-end separation authority management system based on Gin + Vue + Element UI OR Arco Design is extremely simple to initialize the system. You only need to modify the database connection in the configuration file. The system supports multi-instruction operations. Migration instructions can make it easier to initialize database information. Service instructions It&#39;s easy to start the api service.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.go-admin.dev&#34;&gt;documentation&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/go-admin-team/go-admin-ui&#34;&gt;Front-end project&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://space.bilibili.com/565616721/channel/detail?cid=125737&#34;&gt;Video tutorial&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;🎬 Online Demo&lt;/h2&gt; &#xA;&lt;p&gt;Element UI vue demo：&lt;a href=&#34;https://vue2.go-admin.dev/#/login&#34;&gt;https://vue2.go-admin.dev&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;账号 / 密码： admin / 123456&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Arco Design vue3 demo：&lt;a href=&#34;https://vue3.go-admin.dev/#/login&#34;&gt;https://vue3.go-admin.dev&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;账号 / 密码： admin / 123456&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;antd demo：&lt;a href=&#34;https://antd.go-admin.pro/&#34;&gt;https://antd.go-admin.pro&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;账号 / 密码： admin / 123456&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;✨ Feature&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Follow RESTful API design specifications&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Based on the GIN WEB API framework, it provides rich middleware support (user authentication, cross-domain, access log, tracking ID, etc.)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;RBAC access control model based on Casbin&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;JWT authentication&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Support Swagger documents (based on swaggo)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Database storage based on GORM, which can expand multiple types of databases&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Simple model mapping of configuration files to quickly get the desired configuration&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Code generation tool&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Form builder&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Multi-command mode&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;TODO: unit test&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;🎁 Internal&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;User management: The user is the system operator, this function mainly completes the system user configuration.&lt;/li&gt; &#xA; &lt;li&gt;Department management: configure the system organization (company, department, group), and display the tree structure to support data permissions.&lt;/li&gt; &#xA; &lt;li&gt;Position management: configure the positions of system users.&lt;/li&gt; &#xA; &lt;li&gt;Menu management: configure the system menu, operation authority, button authority identification, interface authority, etc.&lt;/li&gt; &#xA; &lt;li&gt;Role management: Role menu permission assignment and role setting are divided into data scope permissions by organization.&lt;/li&gt; &#xA; &lt;li&gt;Dictionary management: Maintain some relatively fixed data frequently used in the system.&lt;/li&gt; &#xA; &lt;li&gt;Parameter management: dynamically configure common parameters for the system.&lt;/li&gt; &#xA; &lt;li&gt;Operation log: system normal operation log record and query; system abnormal information log record and query.&lt;/li&gt; &#xA; &lt;li&gt;Login log: The system login log record query contains login exceptions.&lt;/li&gt; &#xA; &lt;li&gt;Interface documentation: Automatically generate related api interface documents according to the business code.&lt;/li&gt; &#xA; &lt;li&gt;Code generation: According to the data table structure, generate the corresponding addition, deletion, modification, and check corresponding business, and the whole process of visual operation, so that the basic business can be implemented with zero code.&lt;/li&gt; &#xA; &lt;li&gt;Form construction: Customize the page style, drag and drop to realize the page layout.&lt;/li&gt; &#xA; &lt;li&gt;Service monitoring: View the basic information of some servers.&lt;/li&gt; &#xA; &lt;li&gt;Content management: demo function, including classification management and content management. You can refer to the easy to use quick start.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Ready to work&lt;/h2&gt; &#xA;&lt;p&gt;You need to install locally [go] [gin] &lt;a href=&#34;http://nodejs.org/&#34;&gt;node&lt;/a&gt; 和 &lt;a href=&#34;https://git-scm.com/&#34;&gt;git&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;At the same time, a series of tutorials including videos and documents are provided. How to complete the downloading to the proficient use, it is strongly recommended that you read these tutorials before you practice this project! ! !&lt;/p&gt; &#xA;&lt;h3&gt;Easily implement go-admin to write the first application-documentation tutorial&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://doc.zhangwj.com/guide/intro/tutorial01.html&#34;&gt;Step 1 - basic content introduction&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://doc.zhangwj.com/guide/intro/tutorial02.html&#34;&gt;Step 2 - Practical application - writing database operations&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Teach you from getting started to giving up-video tutorial&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV1z5411x7JG&#34;&gt;How to start go-admin&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV1Dg4y1i79D&#34;&gt;Easily implement business using build tools&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV1N54y1i71P&#34;&gt;v1.1.0 version code generation tool-free your hands&lt;/a&gt; [Advanced]&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV1Fg4y1q7ph&#34;&gt;Explanation of multi-command startup mode and IDE configuration&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV1Wp4y1D715&#34;&gt;Configuration instructions for go-admin menu&lt;/a&gt; [Must see]&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV1zv411B7nG&#34;&gt;How to configure menu information and interface information&lt;/a&gt; [Must see]&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV1rt4y197d3&#34;&gt;go-admin permission configuration instructions&lt;/a&gt; [Must see]&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV1LK4y1s71e&#34;&gt;Instructions for use of go-admin data permissions&lt;/a&gt; [Must see]&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;If you have any questions, please read the above-mentioned usage documents and articles first. If you are not satisfied, welcome to issue and pr. Video tutorials and documents are being updated continuously.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;📦 Local development&lt;/h2&gt; &#xA;&lt;h3&gt;Environmental requirements&lt;/h3&gt; &#xA;&lt;p&gt;go 1.18&lt;/p&gt; &#xA;&lt;p&gt;nodejs: v14.16.0&lt;/p&gt; &#xA;&lt;p&gt;npm: 6.14.11&lt;/p&gt; &#xA;&lt;h3&gt;Development directory creation&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&#xA;# Create a development directory&#xA;mkdir goadmin&#xA;cd goadmin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Get the code&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Important note: the two projects must be placed in the same folder;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Get backend code&#xA;git clone https://github.com/go-admin-team/go-admin.git&#xA;&#xA;# Get the front-end code&#xA;git clone https://github.com/go-admin-team/go-admin-ui.git&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Startup instructions&lt;/h3&gt; &#xA;&lt;h4&gt;Server startup instructions&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Enter the go-admin backend project&#xA;cd ./go-admin&#xA;&#xA;# Update dependencies&#xA;go mod tidy&#xA;&#xA;# Compile the project&#xA;go build&#xA;&#xA;# Change setting &#xA;# File path go-admin/config/settings.yml&#xA;vi ./config/setting.yml &#xA;&#xA;# 1. Modify the database information in the configuration file&#xA;# Note: The corresponding configuration data under settings.database&#xA;# 2. Confirm the log path&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;:::tip ⚠️Note that this problem will occur if CGO is not installed in the windows environment;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;E:\go-admin&amp;gt;go build&#xA;# github.com/mattn/go-sqlite3&#xA;cgo: exec /missing-cc: exec: &#34;/missing-cc&#34;: file does not exist&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;D:\Code\go-admin&amp;gt;go build&#xA;# github.com/mattn/go-sqlite3&#xA;cgo: exec gcc: exec: &#34;gcc&#34;: executable file not found in %PATH%&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://doc.go-admin.dev/guide/faq#cgo-%E7%9A%84%E9%97%AE%E9%A2%98&#34;&gt;Solve the cgo problem and enter&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;:::&lt;/p&gt; &#xA;&lt;h4&gt;Initialize the database, and start the service&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# The first configuration needs to initialize the database resource information&#xA;# Use under macOS or linux&#xA;$ ./go-admin migrate -c config/settings.dev.yml&#xA;&#xA;# ⚠️Note: Use under windows&#xA;$ go-admin.exe migrate -c config/settings.dev.yml&#xA;&#xA;# Start the project, you can also use the IDE for debugging&#xA;# Use under macOS or linux&#xA;$ ./go-admin server -c config/settings.yml&#xA;&#xA;# ⚠️Note: Use under windows&#xA;$ go-admin.exe server -c config/settings.yml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Use docker to compile and start&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# Compile the image&#xA;docker build -t go-admin .&#xA;&#xA;&#xA;# Start the container, the first go-admin is the container name, and the second go-admin is the image name&#xA;# -v Mapping configuration file Local path: container path&#xA;docker run --name go-admin -p 8000:8000 -v /config/settings.yml:/config/settings.yml -d go-admin-server&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Generation Document&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;go generate&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Cross compile&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# windows&#xA;env GOOS=windows GOARCH=amd64 go build main.go&#xA;&#xA;# or&#xA;# linux&#xA;env GOOS=linux GOARCH=amd64 go build main.go&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;UI interactive terminal startup instructions&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Installation dependencies&#xA;npm install   # or cnpm install&#xA;&#xA;# Start service&#xA;npm run dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;📨 Interactive&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/wenjianzhang/image/master/img/wx.png&#34; width=&#34;180px&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://doc-image.zhangwj.com/img/qrcode_for_gh_b798dc7db30c_258.jpg&#34; width=&#34;180px&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/wenjianzhang/image/master/img/qq2.png&#34; width=&#34;200px&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://space.bilibili.com/565616721&#34;&gt;wenjianzhang&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Wechat&lt;/td&gt; &#xA;   &lt;td&gt;Wechat公众号🔥🔥🔥&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a target=&#34;_blank&#34; href=&#34;https://shang.qq.com/wpa/qunwpa?idkey=0f2bf59f5f2edec6a4550c364242c0641f870aa328e468c4ee4b7dbfb392627b&#34;&gt;&lt;img border=&#34;0&#34; src=&#34;https://pub.idqqimg.com/wpa/images/group.png&#34; alt=&#34;go-admin技术交流乙号&#34; title=&#34;go-admin技术交流乙号&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;bilibili🔥🔥🔥&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;h2&gt;💎 Contributors&lt;/h2&gt; &#xA;&lt;p&gt;&lt;span style=&#34;margin: 0 5px;&#34;&gt;&lt;a href=&#34;https://github.com/wenjianzhang&#34;&gt;&lt;img src=&#34;https://images.weserv.nl/?url=avatars.githubusercontent.com/u/3890175?v=4&amp;amp;h=60&amp;amp;w=60&amp;amp;fit=cover&amp;amp;mask=circle&amp;amp;maxage=7d&#34;&gt;&lt;/a&gt;&lt;/span&gt; &lt;span style=&#34;margin: 0 5px;&#34;&gt;&lt;a href=&#34;https://github.com/G-Akiraka&#34;&gt;&lt;img src=&#34;https://images.weserv.nl/?url=avatars.githubusercontent.com/u/45746659?s=64&amp;amp;v=4&amp;amp;w=60&amp;amp;fit=cover&amp;amp;mask=circle&amp;amp;maxage=7d&#34;&gt;&lt;/a&gt;&lt;/span&gt; &lt;span style=&#34;margin: 0 5px;&#34;&gt;&lt;a href=&#34;https://github.com/lwnmengjing&#34;&gt;&lt;img src=&#34;https://images.weserv.nl/?url=avatars.githubusercontent.com/u/12806223?s=64&amp;amp;v=4&amp;amp;w=60&amp;amp;fit=cover&amp;amp;mask=circle&amp;amp;maxage=7d&#34;&gt;&lt;/a&gt;&lt;/span&gt; &lt;span style=&#34;margin: 0 5px;&#34;&gt;&lt;a href=&#34;https://github.com/bing127&#34;&gt;&lt;img src=&#34;https://images.weserv.nl/?url=avatars.githubusercontent.com/u/31166183?s=60&amp;amp;v=4&amp;amp;w=60&amp;amp;fit=cover&amp;amp;mask=circle&amp;amp;maxage=7d&#34;&gt;&lt;/a&gt;&lt;/span&gt; &lt;span style=&#34;margin: 0 5px;&#34;&gt;&lt;a href=&#34;https://github.com/chengxiao&#34;&gt;&lt;img src=&#34;https://images.weserv.nl/?url=avatars.githubusercontent.com/u/1379545?s=64&amp;amp;v=4&amp;amp;w=60&amp;amp;fit=cover&amp;amp;mask=circle&amp;amp;maxage=7d&#34;&gt;&lt;/a&gt;&lt;/span&gt; &lt;span style=&#34;margin: 0 5px;&#34;&gt;&lt;a href=&#34;https://github.com/NightFire0307&#34;&gt;&lt;img src=&#34;https://images.weserv.nl/?url=avatars.githubusercontent.com/u/19854086?v=4&amp;amp;w=60&amp;amp;fit=cover&amp;amp;mask=circle&amp;amp;maxage=7d&#34;&gt;&lt;/a&gt;&lt;/span&gt; &lt;span style=&#34;margin: 0 5px;&#34;&gt;&lt;a href=&#34;https://github.com/appleboy&#34;&gt;&lt;img src=&#34;https://images.weserv.nl/?url=avatars.githubusercontent.com/u/21979?s=64&amp;amp;v=4&amp;amp;w=60&amp;amp;fit=cover&amp;amp;mask=circle&amp;amp;maxage=7d&#34;&gt;&lt;/a&gt;&lt;/span&gt; &lt;span style=&#34;margin: 0 5px;&#34;&gt;&lt;a href=&#34;https://github.com/ninstein&#34;&gt;&lt;img src=&#34;https://images.weserv.nl/?url=avatars.githubusercontent.com/u/580303?v=4&amp;amp;h=60&amp;amp;w=60&amp;amp;fit=cover&amp;amp;mask=circle&amp;amp;maxage=7d&#34;&gt;&lt;/a&gt;&lt;/span&gt; &lt;span style=&#34;margin: 0 5px;&#34;&gt;&lt;a href=&#34;https://github.com/kikiyou&#34;&gt;&lt;img src=&#34;https://images.weserv.nl/?url=avatars.githubusercontent.com/u/17959053?s=64&amp;amp;v=4&amp;amp;w=60&amp;amp;fit=cover&amp;amp;mask=circle&amp;amp;maxage=7d&#34;&gt;&lt;/a&gt;&lt;/span&gt; &lt;span style=&#34;margin: 0 5px;&#34;&gt;&lt;a href=&#34;https://github.com/horizonzy&#34;&gt;&lt;img src=&#34;https://images.weserv.nl/?url=avatars.githubusercontent.com/u/22524871?s=64&amp;amp;v=4&amp;amp;w=60&amp;amp;fit=cover&amp;amp;mask=circle&amp;amp;maxage=7d&#34;&gt;&lt;/a&gt;&lt;/span&gt; &lt;span style=&#34;margin: 0 5px;&#34;&gt;&lt;a href=&#34;https://github.com/Cassuis&#34;&gt;&lt;img src=&#34;https://images.weserv.nl/?url=avatars.githubusercontent.com/u/48005724?s=64&amp;amp;v=4&amp;amp;w=60&amp;amp;fit=cover&amp;amp;mask=circle&amp;amp;maxage=7d&#34;&gt;&lt;/a&gt;&lt;/span&gt; &lt;span style=&#34;margin: 0 5px;&#34;&gt;&lt;a href=&#34;https://github.com/hqcchina&#34;&gt;&lt;img src=&#34;https://images.weserv.nl/?url=avatars.githubusercontent.com/u/5179057?s=60&amp;amp;v=4&amp;amp;w=60&amp;amp;fit=cover&amp;amp;mask=circle&amp;amp;maxage=7d&#34;&gt;&lt;/a&gt;&lt;/span&gt; &lt;span style=&#34;margin: 0 5px;&#34;&gt;&lt;a href=&#34;https://github.com/nodece&#34;&gt;&lt;img src=&#34;https://images.weserv.nl/?url=avatars.githubusercontent.com/u/16235121?s=60&amp;amp;v=4&amp;amp;w=60&amp;amp;fit=cover&amp;amp;mask=circle&amp;amp;maxage=7d&#34;&gt;&lt;/a&gt;&lt;/span&gt; &lt;span style=&#34;margin: 0 5px;&#34;&gt;&lt;a href=&#34;https://github.com/stephenzhang0713&#34;&gt;&lt;img src=&#34;https://images.weserv.nl/?url=avatars.githubusercontent.com/u/18169290?s=60&amp;amp;v=4&amp;amp;w=60&amp;amp;fit=cover&amp;amp;mask=circle&amp;amp;maxage=7d&#34;&gt;&lt;/a&gt;&lt;/span&gt; &lt;span style=&#34;margin: 0 5px;&#34;&gt;&lt;a href=&#34;https://github.com/zhouxixi-dev&#34;&gt;&lt;img src=&#34;https://images.weserv.nl/?url=avatars.githubusercontent.com/u/100399679?s=60&amp;amp;v=4&amp;amp;w=60&amp;amp;fit=cover&amp;amp;mask=circle&amp;amp;maxage=7d&#34;&gt;&lt;/a&gt;&lt;/span&gt; &lt;span style=&#34;margin: 0 5px;&#34;&gt;&lt;a href=&#34;https://github.com/Jalins&#34;&gt;&lt;img src=&#34;https://images.weserv.nl/?url=avatars.githubusercontent.com/u/31172582?s=60&amp;amp;v=4&amp;amp;w=60&amp;amp;fit=cover&amp;amp;mask=circle&amp;amp;maxage=7d&#34;&gt;&lt;/a&gt;&lt;/span&gt; &lt;span style=&#34;margin: 0 5px;&#34;&gt;&lt;a href=&#34;https://github.com/wkf928592&#34;&gt;&lt;img src=&#34;https://images.weserv.nl/?url=avatars.githubusercontent.com/u/6063351?s=60&amp;amp;v=4&amp;amp;w=60&amp;amp;fit=cover&amp;amp;mask=circle&amp;amp;maxage=7d&#34;&gt;&lt;/a&gt;&lt;/span&gt; &lt;span style=&#34;margin: 0 5px;&#34;&gt;&lt;a href=&#34;https://github.com/wxxiong6&#34;&gt;&lt;img src=&#34;https://images.weserv.nl/?url=avatars.githubusercontent.com/u/6983441?s=60&amp;amp;v=4&amp;amp;w=60&amp;amp;fit=cover&amp;amp;mask=circle&amp;amp;maxage=7d&#34;&gt;&lt;/a&gt;&lt;/span&gt; &lt;span style=&#34;margin: 0 5px;&#34;&gt;&lt;a href=&#34;https://github.com/Silicon-He&#34;&gt;&lt;img src=&#34;https://images.weserv.nl/?url=avatars.githubusercontent.com/u/52478309?s=60&amp;amp;v=4&amp;amp;w=60&amp;amp;fit=cover&amp;amp;mask=circle&amp;amp;maxage=7d&#34;&gt;&lt;/a&gt;&lt;/span&gt; &lt;span style=&#34;margin: 0 5px;&#34;&gt;&lt;a href=&#34;https://github.com/GizmoOAO&#34;&gt;&lt;img src=&#34;https://images.weserv.nl/?url=avatars.githubusercontent.com/u/20385106?s=60&amp;amp;v=4&amp;amp;w=60&amp;amp;fit=cover&amp;amp;mask=circle&amp;amp;maxage=7d&#34;&gt;&lt;/a&gt;&lt;/span&gt; &lt;span style=&#34;margin: 0 5px;&#34;&gt;&lt;a href=&#34;https://github.com/bestgopher&#34;&gt;&lt;img src=&#34;https://images.weserv.nl/?url=avatars.githubusercontent.com/u/36840497?s=60&amp;amp;v=4&amp;amp;w=60&amp;amp;fit=cover&amp;amp;mask=circle&amp;amp;maxage=7d&#34;&gt;&lt;/a&gt;&lt;/span&gt; &lt;span style=&#34;margin: 0 5px;&#34;&gt;&lt;a href=&#34;https://github.com/wxb1207&#34;&gt;&lt;img src=&#34;https://images.weserv.nl/?url=avatars.githubusercontent.com/u/20775558?s=60&amp;amp;v=4&amp;amp;w=60&amp;amp;fit=cover&amp;amp;mask=circle&amp;amp;maxage=7d&#34;&gt;&lt;/a&gt;&lt;/span&gt; &lt;span style=&#34;margin: 0 5px;&#34;&gt;&lt;a href=&#34;https://github.com/misakichan&#34;&gt;&lt;img src=&#34;https://images.weserv.nl/?url=avatars.githubusercontent.com/u/16569274?s=60&amp;amp;v=4&amp;amp;w=60&amp;amp;fit=cover&amp;amp;mask=circle&amp;amp;maxage=7d&#34;&gt;&lt;/a&gt;&lt;/span&gt; &lt;span style=&#34;margin: 0 5px;&#34;&gt;&lt;a href=&#34;https://github.com/zhuxuyang&#34;&gt;&lt;img src=&#34;https://images.weserv.nl/?url=avatars.githubusercontent.com/u/19301024?s=60&amp;amp;v=4&amp;amp;w=60&amp;amp;fit=cover&amp;amp;mask=circle&amp;amp;maxage=7d&#34;&gt;&lt;/a&gt;&lt;/span&gt; &lt;span style=&#34;margin: 0 5px;&#34;&gt;&lt;a href=&#34;https://github.com/mss-boot&#34;&gt;&lt;img src=&#34;https://images.weserv.nl/?url=avatars.githubusercontent.com/u/109259065?s=60&amp;amp;v=4&amp;amp;w=60&amp;amp;fit=cover&amp;amp;mask=circle&amp;amp;maxage=7d&#34;&gt;&lt;/a&gt;&lt;/span&gt; &lt;span style=&#34;margin: 0 5px;&#34;&gt;&lt;a href=&#34;https://github.com/AuroraV&#34;&gt;&lt;img src=&#34;https://images.weserv.nl/?url=avatars.githubusercontent.com/u/37330199?s=60&amp;amp;v=4&amp;amp;w=60&amp;amp;fit=cover&amp;amp;mask=circle&amp;amp;maxage=7d&#34;&gt;&lt;/a&gt;&lt;/span&gt; &lt;span style=&#34;margin: 0 5px;&#34;&gt;&lt;a href=&#34;https://github.com/Vingurzhou&#34;&gt;&lt;img src=&#34;https://images.weserv.nl/?url=avatars.githubusercontent.com/u/57127283?s=60&amp;amp;v=4&amp;amp;w=60&amp;amp;fit=cover&amp;amp;mask=circle&amp;amp;maxage=7d&#34;&gt;&lt;/a&gt;&lt;/span&gt; &lt;span style=&#34;margin: 0 5px;&#34;&gt;&lt;a href=&#34;https://github.com/haimait&#34;&gt;&lt;img src=&#34;https://images.weserv.nl/?url=avatars.githubusercontent.com/u/40926384?s=60&amp;amp;v=4&amp;amp;w=60&amp;amp;fit=cover&amp;amp;mask=circle&amp;amp;maxage=7d&#34;&gt;&lt;/a&gt;&lt;/span&gt; &lt;span style=&#34;margin: 0 5px;&#34;&gt;&lt;a href=&#34;https://github.com/zyd&#34;&gt;&lt;img src=&#34;https://images.weserv.nl/?url=avatars.githubusercontent.com/u/3446278?s=60&amp;amp;v=4&amp;amp;w=60&amp;amp;fit=cover&amp;amp;mask=circle&amp;amp;maxage=7d&#34;&gt;&lt;/a&gt;&lt;/span&gt; &lt;span style=&#34;margin: 0 5px;&#34;&gt;&lt;a href=&#34;https://github.com/infnan&#34;&gt;&lt;img src=&#34;https://images.weserv.nl/?url=avatars.githubusercontent.com/u/38274826?s=60&amp;amp;v=4&amp;amp;w=60&amp;amp;fit=cover&amp;amp;mask=circle&amp;amp;maxage=7d&#34;&gt;&lt;/a&gt;&lt;/span&gt; &lt;span style=&#34;margin: 0 5px;&#34;&gt;&lt;a href=&#34;https://github.com/d1y&#34;&gt;&lt;img src=&#34;https://images.weserv.nl/?url=avatars.githubusercontent.com/u/45585937?s=60&amp;amp;v=4&amp;amp;w=60&amp;amp;fit=cover&amp;amp;mask=circle&amp;amp;maxage=7d&#34;&gt;&lt;/a&gt;&lt;/span&gt; &lt;span style=&#34;margin: 0 5px;&#34;&gt;&lt;a href=&#34;https://github.com/qlijin&#34;&gt;&lt;img src=&#34;https://images.weserv.nl/?url=avatars.githubusercontent.com/u/515900?s=60&amp;amp;v=4&amp;amp;w=60&amp;amp;fit=cover&amp;amp;mask=circle&amp;amp;maxage=7d&#34;&gt;&lt;/a&gt;&lt;/span&gt; &lt;span style=&#34;margin: 0 5px;&#34;&gt;&lt;a href=&#34;https://github.com/logtous&#xA;&#34;&gt;&lt;img src=&#34;https://images.weserv.nl/?url=avatars.githubusercontent.com/u/88697234?s=60&amp;amp;v=4&amp;amp;w=60&amp;amp;fit=cover&amp;amp;mask=circle&amp;amp;maxage=7d&#34;&gt;&lt;/a&gt;&lt;/span&gt; &lt;span style=&#34;margin: 0 5px;&#34;&gt;&lt;a href=&#34;https://github.com/stepway&#xA;&#34;&gt;&lt;img src=&#34;https://images.weserv.nl/?url=avatars.githubusercontent.com/u/9927079?s=60&amp;amp;v=4&amp;amp;w=60&amp;amp;fit=cover&amp;amp;mask=circle&amp;amp;maxage=7d&#34;&gt;&lt;/a&gt;&lt;/span&gt; &lt;span style=&#34;margin: 0 5px;&#34;&gt;&lt;a href=&#34;https://github.com/NaturalGao&#xA;&#34;&gt;&lt;img src=&#34;https://images.weserv.nl/?url=avatars.githubusercontent.com/u/43291304?s=60&amp;amp;v=4&amp;amp;w=60&amp;amp;fit=cover&amp;amp;mask=circle&amp;amp;maxage=7d&#34;&gt;&lt;/a&gt;&lt;/span&gt; &lt;span style=&#34;margin: 0 5px;&#34;&gt;&lt;a href=&#34;https://github.com/DemoLiang&#xA;&#34;&gt;&lt;img src=&#34;https://images.weserv.nl/?url=avatars.githubusercontent.com/u/23476007?s=60&amp;amp;v=4&amp;amp;w=60&amp;amp;fit=cover&amp;amp;mask=circle&amp;amp;maxage=7d&#34;&gt;&lt;/a&gt;&lt;/span&gt; &lt;span style=&#34;margin: 0 5px;&#34;&gt;&lt;a href=&#34;https://github.com/jfcg&#xA;&#34;&gt;&lt;img src=&#34;https://images.weserv.nl/?url=avatars.githubusercontent.com/u/1410597?s=60&amp;amp;v=4&amp;amp;w=60&amp;amp;fit=cover&amp;amp;mask=circle&amp;amp;maxage=7d&#34;&gt;&lt;/a&gt;&lt;/span&gt; &lt;span style=&#34;margin: 0 5px;&#34;&gt;&lt;a href=&#34;https://github.com/Nicole0724&#xA;&#34;&gt;&lt;img src=&#34;https://images.weserv.nl/?url=avatars.githubusercontent.com/u/10487328?s=60&amp;amp;v=4&amp;amp;w=60&amp;amp;fit=cover&amp;amp;mask=circle&amp;amp;maxage=7d&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt; &#xA;&lt;h2&gt;JetBrains open source certificate support&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;go-admin&lt;/code&gt; project has always been developed in the GoLand integrated development environment under JetBrains, based on the &lt;strong&gt;free JetBrains Open Source license(s)&lt;/strong&gt; genuine free license. I would like to express my gratitude.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.jetbrains.com/?from=kubeadm-ha&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/panjf2000/illustrations/master/jetbrains/jetbrains-variant-4.png&#34; width=&#34;250&#34; align=&#34;middle&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;🤝 Thanks&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ant-design/ant-design&#34;&gt;ant-design&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ant-design/ant-design-pro&#34;&gt;ant-design-pro&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/arco-design/arco-design&#34;&gt;arco-design&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/arco-design/arco-design-pro&#34;&gt;arco-design-pro&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/gin-gonic/gin&#34;&gt;gin&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/casbin/casbin&#34;&gt;casbin&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/spf13/viper&#34;&gt;spf13/viper&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jinzhu/gorm&#34;&gt;gorm&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/swaggo/gin-swagger&#34;&gt;gin-swagger&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dgrijalva/jwt-go&#34;&gt;jwt-go&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/PanJiaChen/vue-element-admin&#34;&gt;vue-element-admin&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gitee.com/y_project/RuoYi-Vue&#34;&gt;ruoyi-vue&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/JakHuang/form-generator&#34;&gt;form-generator&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;🤟 Sponsor Us&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;If you think this project helped you, you can buy a glass of juice for the author to show encouragement &lt;span&gt;🍹&lt;/span&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;img class=&#34;no-margin&#34; src=&#34;https://raw.githubusercontent.com/wenjianzhang/image/master/img/pay.png&#34; height=&#34;200px&#34;&gt; &#xA;&lt;h2&gt;🤝 Link&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://www.golangroadmap.com/&#34;&gt;Go developer growth roadmap&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;🔑 License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/go-admin-team/go-admin/raw/master/LICENSE.md&#34;&gt;MIT&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Copyright (c) 2022 wenjianzhang&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>inqueryio/inquery</title>
    <updated>2023-02-26T01:55:04Z</updated>
    <id>tag:github.com,2023-02-26:/inqueryio/inquery</id>
    <link href="https://github.com/inqueryio/inquery" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Real-time events platform for Postgres&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a href=&#34;https://inquery.io&#34;&gt;&lt;img src=&#34;https://svgshare.com/i/qHg.svg?sanitize=true&#34; alt=&#34;Inquery&#34;&gt;&lt;/a&gt; &#xA; &lt;p&gt;&lt;em&gt;Real-time events platform for Postgres&lt;/em&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://twitter.com/inqueryio&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/url/https/twitter.com/inqueryio.svg?style=social&amp;amp;label=Follow%20%40inqueryio&#34; alt=&#34;Twitter&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/inqueryio/inquery&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/inqueryio/inquery?style=social&#34; alt=&#34;GitHub Repo stars&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;Inquery is a utility for Postgres that triggers webhooks when rows are inserted, updated, or deleted. It uses database triggers that send low-latency websocket messages to a Go application. This application then calls the configured webhook(s) with a JSON payload that includes specified values from the database row.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/BgR5lbo.png&#34; alt=&#34;Inquery Flow&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;How It Works&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Data is modified in Postgres table (INSERT, UPDATE, DELETE)&lt;/li&gt; &#xA; &lt;li&gt;Postgres trigger notifies the Inquery web server via a websocket message&lt;/li&gt; &#xA; &lt;li&gt;Inquery formats the data and sends the webhook(s)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/Nv7MfQV.gif&#34; alt=&#34;Inquery Create Slack Notification&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Use Cases&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Send notifications:&lt;/strong&gt; Slack, Email, Text Message, Push Notification&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Call serverless functions:&lt;/strong&gt; AWS Lambda, Google Cloud Functions, Azure Functions&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Trigger analytics events:&lt;/strong&gt; Segment, Mixpanel, Amplitude&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Stream data real-time:&lt;/strong&gt; Snowflake, BigQuery, Clickhouse, Redshift&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Get Started&lt;/h2&gt; &#xA;&lt;h3&gt;Run Inquery locally&lt;/h3&gt; &#xA;&lt;p&gt;You can run Inquery locally with Docker.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone --depth 1 https://github.com/inqueryio/inquery.git&#xA;cd inquery&#xA;docker-compose up -d&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then open &lt;a href=&#34;http://localhost:3000&#34;&gt;http://localhost:3000&lt;/a&gt; to access Inquery. &lt;br&gt; &lt;br&gt; &lt;strong&gt;Note&lt;/strong&gt;: When connecting your database, if your Postgres host is &lt;code&gt;localhost&lt;/code&gt;, you must use &lt;code&gt;host.docker.internal&lt;/code&gt; instead to access it when running with Docker.&lt;/p&gt; &#xA;&lt;h3&gt;Run Inquery on AWS (EC2)&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Make sure this instance is only accessible within your VPC.&lt;br&gt; &lt;strong&gt;Note&lt;/strong&gt;: These instructions are for Amazon Linux 2 AMI (HVM).&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;To install Docker, run the following command in your SSH session on the instance terminal:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo yum update -y&#xA;sudo yum install -y docker&#xA;sudo service docker start&#xA;sudo usermod -a -G docker $USER&#xA;logout # Needed to close the SSH session so Docker does not have to be run as root&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;To install &lt;code&gt;docker-compose&lt;/code&gt;, run the following command in your ssh session on the instance terminal:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo curl -L &#34;https://github.com/docker/compose/releases/download/v2.16.0/docker-compose-$(uname -s)-$(uname -m)&#34;  -o /usr/local/bin/docker-compose&#xA;sudo mv /usr/local/bin/docker-compose /usr/bin/docker-compose&#xA;sudo chmod +x /usr/bin/docker-compose&#xA;docker-compose version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Install and run Inquery&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mkdir inquery &amp;amp;&amp;amp; cd inquery&#xA;wget https://raw.githubusercontent.com/inqueryio/inquery/main/{.env,docker-compose.yml,.dockerignore,frontend.env}&#xA;docker-compose up -d&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Run Inquery Cloud (Beta)&lt;/h3&gt; &#xA;&lt;p&gt;Sign up for &lt;a href=&#34;https://www.inquery.io/sign-up&#34;&gt;Inquery Cloud&lt;/a&gt; early access and get a managed, cloud-hosted instance.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;h3&gt;Template Strings&lt;/h3&gt; &#xA;&lt;p&gt;When adding an action, you can insert data from the row into the response body of the POST request by using template strings. &lt;br&gt; For instance, if your table has a column called &lt;code&gt;email&lt;/code&gt;, you would put the value &lt;code&gt;${email}&lt;/code&gt; in the request body: &lt;code&gt;{&#34;text&#34;:&#34;User created: ${email}!&#34;}&lt;/code&gt; &lt;br&gt; &lt;br&gt; The prefixes &lt;code&gt;new.&lt;/code&gt; and &lt;code&gt;old.&lt;/code&gt; can be used if a new (INSERT, UPDATE) or old (UPDATE, DELETE) row is available. If a prefix is not specified, the new or old values will be used depending on the event. Example: &lt;code&gt;{&#34;text&#34;:&#34;User updated: ${old.email} is now ${new.email}!&#34;}&lt;/code&gt; &lt;br&gt; &lt;br&gt; The meta values &lt;code&gt;meta.table&lt;/code&gt; (table name), &lt;code&gt;meta.schema&lt;/code&gt; (schema name), &lt;code&gt;meta.event&lt;/code&gt; (INSERT, UPDATE, or DELETE) can also be used.&lt;/p&gt; &#xA;&lt;h2&gt;Roadmap&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Filters and mapping options for row data when sending a POST request&lt;/li&gt; &#xA; &lt;li&gt;Support for row sizes over 8000 bytes via chunking&lt;/li&gt; &#xA; &lt;li&gt;Persistent event queue&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Let us know your feedback or feature requests! You can submit a GitHub issue or contact us at &lt;a href=&#34;mailto:hey@inquery.io&#34;&gt;hey@inquery.io&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>rs/zerolog</title>
    <updated>2023-02-26T01:55:04Z</updated>
    <id>tag:github.com,2023-02-26:/rs/zerolog</id>
    <link href="https://github.com/rs/zerolog" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Zero Allocation JSON Logger&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Zero Allocation JSON Logger&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://godoc.org/github.com/rs/zerolog&#34;&gt;&lt;img src=&#34;http://img.shields.io/badge/godoc-reference-blue.svg?style=flat&#34; alt=&#34;godoc&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/rs/zerolog/master/LICENSE&#34;&gt;&lt;img src=&#34;http://img.shields.io/badge/license-MIT-red.svg?style=flat&#34; alt=&#34;license&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://travis-ci.org/rs/zerolog&#34;&gt;&lt;img src=&#34;https://travis-ci.org/rs/zerolog.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://gocover.io/github.com/rs/zerolog&#34;&gt;&lt;img src=&#34;http://gocover.io/_badge/github.com/rs/zerolog&#34; alt=&#34;Coverage&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The zerolog package provides a fast and simple logger dedicated to JSON output.&lt;/p&gt; &#xA;&lt;p&gt;Zerolog&#39;s API is designed to provide both a great developer experience and stunning &lt;a href=&#34;https://raw.githubusercontent.com/rs/zerolog/master/#benchmarks&#34;&gt;performance&lt;/a&gt;. Its unique chaining API allows zerolog to write JSON (or CBOR) log events by avoiding allocations and reflection.&lt;/p&gt; &#xA;&lt;p&gt;Uber&#39;s &lt;a href=&#34;https://godoc.org/go.uber.org/zap&#34;&gt;zap&lt;/a&gt; library pioneered this approach. Zerolog is taking this concept to the next level with a simpler to use API and even better performance.&lt;/p&gt; &#xA;&lt;p&gt;To keep the code base and the API simple, zerolog focuses on efficient structured logging only. Pretty logging on the console is made possible using the provided (but inefficient) &lt;a href=&#34;https://raw.githubusercontent.com/rs/zerolog/master/#pretty-logging&#34;&gt;&lt;code&gt;zerolog.ConsoleWriter&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/rs/zerolog/master/pretty.png&#34; alt=&#34;Pretty Logging Image&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Who uses zerolog&lt;/h2&gt; &#xA;&lt;p&gt;Find out &lt;a href=&#34;https://github.com/rs/zerolog/wiki/Who-uses-zerolog&#34;&gt;who uses zerolog&lt;/a&gt; and add your company / project to the list.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rs/zerolog/master/#benchmarks&#34;&gt;Blazing fast&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rs/zerolog/master/#benchmarks&#34;&gt;Low to zero allocation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rs/zerolog/master/#leveled-logging&#34;&gt;Leveled logging&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rs/zerolog/master/#log-sampling&#34;&gt;Sampling&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rs/zerolog/master/#hooks&#34;&gt;Hooks&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rs/zerolog/master/#contextual-logging&#34;&gt;Contextual fields&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;context.Context&lt;/code&gt; integration&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rs/zerolog/master/#integration-with-nethttp&#34;&gt;Integration with &lt;code&gt;net/http&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rs/zerolog/master/#binary-encoding&#34;&gt;JSON and CBOR encoding formats&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rs/zerolog/master/#pretty-logging&#34;&gt;Pretty logging for development&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rs/zerolog/master/#error-logging&#34;&gt;Error Logging (with optional Stacktrace)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;go get -u github.com/rs/zerolog/log&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;h3&gt;Simple Logging Example&lt;/h3&gt; &#xA;&lt;p&gt;For simple logging, import the global logger package &lt;strong&gt;github.com/rs/zerolog/log&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;    &#34;github.com/rs/zerolog&#34;&#xA;    &#34;github.com/rs/zerolog/log&#34;&#xA;)&#xA;&#xA;func main() {&#xA;    // UNIX Time is faster and smaller than most timestamps&#xA;    zerolog.TimeFieldFormat = zerolog.TimeFormatUnix&#xA;&#xA;    log.Print(&#34;hello world&#34;)&#xA;}&#xA;&#xA;// Output: {&#34;time&#34;:1516134303,&#34;level&#34;:&#34;debug&#34;,&#34;message&#34;:&#34;hello world&#34;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note: By default log writes to &lt;code&gt;os.Stderr&lt;/code&gt; Note: The default log level for &lt;code&gt;log.Print&lt;/code&gt; is &lt;em&gt;debug&lt;/em&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Contextual Logging&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;zerolog&lt;/strong&gt; allows data to be added to log messages in the form of key:value pairs. The data added to the message adds &#34;context&#34; about the log event that can be critical for debugging as well as myriad other purposes. An example of this is below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;    &#34;github.com/rs/zerolog&#34;&#xA;    &#34;github.com/rs/zerolog/log&#34;&#xA;)&#xA;&#xA;func main() {&#xA;    zerolog.TimeFieldFormat = zerolog.TimeFormatUnix&#xA;&#xA;    log.Debug().&#xA;        Str(&#34;Scale&#34;, &#34;833 cents&#34;).&#xA;        Float64(&#34;Interval&#34;, 833.09).&#xA;        Msg(&#34;Fibonacci is everywhere&#34;)&#xA;    &#xA;    log.Debug().&#xA;        Str(&#34;Name&#34;, &#34;Tom&#34;).&#xA;        Send()&#xA;}&#xA;&#xA;// Output: {&#34;level&#34;:&#34;debug&#34;,&#34;Scale&#34;:&#34;833 cents&#34;,&#34;Interval&#34;:833.09,&#34;time&#34;:1562212768,&#34;message&#34;:&#34;Fibonacci is everywhere&#34;}&#xA;// Output: {&#34;level&#34;:&#34;debug&#34;,&#34;Name&#34;:&#34;Tom&#34;,&#34;time&#34;:1562212768}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;You&#39;ll note in the above example that when adding contextual fields, the fields are strongly typed. You can find the full list of supported fields &lt;a href=&#34;https://raw.githubusercontent.com/rs/zerolog/master/#standard-types&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Leveled Logging&lt;/h3&gt; &#xA;&lt;h4&gt;Simple Leveled Logging Example&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;    &#34;github.com/rs/zerolog&#34;&#xA;    &#34;github.com/rs/zerolog/log&#34;&#xA;)&#xA;&#xA;func main() {&#xA;    zerolog.TimeFieldFormat = zerolog.TimeFormatUnix&#xA;&#xA;    log.Info().Msg(&#34;hello world&#34;)&#xA;}&#xA;&#xA;// Output: {&#34;time&#34;:1516134303,&#34;level&#34;:&#34;info&#34;,&#34;message&#34;:&#34;hello world&#34;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;It is very important to note that when using the &lt;strong&gt;zerolog&lt;/strong&gt; chaining API, as shown above (&lt;code&gt;log.Info().Msg(&#34;hello world&#34;&lt;/code&gt;), the chain must have either the &lt;code&gt;Msg&lt;/code&gt; or &lt;code&gt;Msgf&lt;/code&gt; method call. If you forget to add either of these, the log will not occur and there is no compile time error to alert you of this.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;strong&gt;zerolog&lt;/strong&gt; allows for logging at the following levels (from highest to lowest):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;panic (&lt;code&gt;zerolog.PanicLevel&lt;/code&gt;, 5)&lt;/li&gt; &#xA; &lt;li&gt;fatal (&lt;code&gt;zerolog.FatalLevel&lt;/code&gt;, 4)&lt;/li&gt; &#xA; &lt;li&gt;error (&lt;code&gt;zerolog.ErrorLevel&lt;/code&gt;, 3)&lt;/li&gt; &#xA; &lt;li&gt;warn (&lt;code&gt;zerolog.WarnLevel&lt;/code&gt;, 2)&lt;/li&gt; &#xA; &lt;li&gt;info (&lt;code&gt;zerolog.InfoLevel&lt;/code&gt;, 1)&lt;/li&gt; &#xA; &lt;li&gt;debug (&lt;code&gt;zerolog.DebugLevel&lt;/code&gt;, 0)&lt;/li&gt; &#xA; &lt;li&gt;trace (&lt;code&gt;zerolog.TraceLevel&lt;/code&gt;, -1)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can set the Global logging level to any of these options using the &lt;code&gt;SetGlobalLevel&lt;/code&gt; function in the zerolog package, passing in one of the given constants above, e.g. &lt;code&gt;zerolog.InfoLevel&lt;/code&gt; would be the &#34;info&#34; level. Whichever level is chosen, all logs with a level greater than or equal to that level will be written. To turn off logging entirely, pass the &lt;code&gt;zerolog.Disabled&lt;/code&gt; constant.&lt;/p&gt; &#xA;&lt;h4&gt;Setting Global Log Level&lt;/h4&gt; &#xA;&lt;p&gt;This example uses command-line flags to demonstrate various outputs depending on the chosen log level.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;    &#34;flag&#34;&#xA;&#xA;    &#34;github.com/rs/zerolog&#34;&#xA;    &#34;github.com/rs/zerolog/log&#34;&#xA;)&#xA;&#xA;func main() {&#xA;    zerolog.TimeFieldFormat = zerolog.TimeFormatUnix&#xA;    debug := flag.Bool(&#34;debug&#34;, false, &#34;sets log level to debug&#34;)&#xA;&#xA;    flag.Parse()&#xA;&#xA;    // Default level for this example is info, unless debug flag is present&#xA;    zerolog.SetGlobalLevel(zerolog.InfoLevel)&#xA;    if *debug {&#xA;        zerolog.SetGlobalLevel(zerolog.DebugLevel)&#xA;    }&#xA;&#xA;    log.Debug().Msg(&#34;This message appears only when log level set to Debug&#34;)&#xA;    log.Info().Msg(&#34;This message appears when log level set to Debug or Info&#34;)&#xA;&#xA;    if e := log.Debug(); e.Enabled() {&#xA;        // Compute log output only if enabled.&#xA;        value := &#34;bar&#34;&#xA;        e.Str(&#34;foo&#34;, value).Msg(&#34;some debug message&#34;)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Info Output (no flag)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ ./logLevelExample&#xA;{&#34;time&#34;:1516387492,&#34;level&#34;:&#34;info&#34;,&#34;message&#34;:&#34;This message appears when log level set to Debug or Info&#34;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Debug Output (debug flag set)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ ./logLevelExample -debug&#xA;{&#34;time&#34;:1516387573,&#34;level&#34;:&#34;debug&#34;,&#34;message&#34;:&#34;This message appears only when log level set to Debug&#34;}&#xA;{&#34;time&#34;:1516387573,&#34;level&#34;:&#34;info&#34;,&#34;message&#34;:&#34;This message appears when log level set to Debug or Info&#34;}&#xA;{&#34;time&#34;:1516387573,&#34;level&#34;:&#34;debug&#34;,&#34;foo&#34;:&#34;bar&#34;,&#34;message&#34;:&#34;some debug message&#34;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Logging without Level or Message&lt;/h4&gt; &#xA;&lt;p&gt;You may choose to log without a specific level by using the &lt;code&gt;Log&lt;/code&gt; method. You may also write without a message by setting an empty string in the &lt;code&gt;msg string&lt;/code&gt; parameter of the &lt;code&gt;Msg&lt;/code&gt; method. Both are demonstrated in the example below.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;    &#34;github.com/rs/zerolog&#34;&#xA;    &#34;github.com/rs/zerolog/log&#34;&#xA;)&#xA;&#xA;func main() {&#xA;    zerolog.TimeFieldFormat = zerolog.TimeFormatUnix&#xA;&#xA;    log.Log().&#xA;        Str(&#34;foo&#34;, &#34;bar&#34;).&#xA;        Msg(&#34;&#34;)&#xA;}&#xA;&#xA;// Output: {&#34;time&#34;:1494567715,&#34;foo&#34;:&#34;bar&#34;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Error Logging&lt;/h3&gt; &#xA;&lt;p&gt;You can log errors using the &lt;code&gt;Err&lt;/code&gt; method&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;errors&#34;&#xA;&#xA;&#x9;&#34;github.com/rs/zerolog&#34;&#xA;&#x9;&#34;github.com/rs/zerolog/log&#34;&#xA;)&#xA;&#xA;func main() {&#xA;&#x9;zerolog.TimeFieldFormat = zerolog.TimeFormatUnix&#xA;&#xA;&#x9;err := errors.New(&#34;seems we have an error here&#34;)&#xA;&#x9;log.Error().Err(err).Msg(&#34;&#34;)&#xA;}&#xA;&#xA;// Output: {&#34;level&#34;:&#34;error&#34;,&#34;error&#34;:&#34;seems we have an error here&#34;,&#34;time&#34;:1609085256}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;The default field name for errors is &lt;code&gt;error&lt;/code&gt;, you can change this by setting &lt;code&gt;zerolog.ErrorFieldName&lt;/code&gt; to meet your needs.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;Error Logging with Stacktrace&lt;/h4&gt; &#xA;&lt;p&gt;Using &lt;code&gt;github.com/pkg/errors&lt;/code&gt;, you can add a formatted stacktrace to your errors.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;github.com/pkg/errors&#34;&#xA;&#x9;&#34;github.com/rs/zerolog/pkgerrors&#34;&#xA;&#xA;&#x9;&#34;github.com/rs/zerolog&#34;&#xA;&#x9;&#34;github.com/rs/zerolog/log&#34;&#xA;)&#xA;&#xA;func main() {&#xA;&#x9;zerolog.TimeFieldFormat = zerolog.TimeFormatUnix&#xA;&#x9;zerolog.ErrorStackMarshaler = pkgerrors.MarshalStack&#xA;&#xA;&#x9;err := outer()&#xA;&#x9;log.Error().Stack().Err(err).Msg(&#34;&#34;)&#xA;}&#xA;&#xA;func inner() error {&#xA;&#x9;return errors.New(&#34;seems we have an error here&#34;)&#xA;}&#xA;&#xA;func middle() error {&#xA;&#x9;err := inner()&#xA;&#x9;if err != nil {&#xA;&#x9;&#x9;return err&#xA;&#x9;}&#xA;&#x9;return nil&#xA;}&#xA;&#xA;func outer() error {&#xA;&#x9;err := middle()&#xA;&#x9;if err != nil {&#xA;&#x9;&#x9;return err&#xA;&#x9;}&#xA;&#x9;return nil&#xA;}&#xA;&#xA;// Output: {&#34;level&#34;:&#34;error&#34;,&#34;stack&#34;:[{&#34;func&#34;:&#34;inner&#34;,&#34;line&#34;:&#34;20&#34;,&#34;source&#34;:&#34;errors.go&#34;},{&#34;func&#34;:&#34;middle&#34;,&#34;line&#34;:&#34;24&#34;,&#34;source&#34;:&#34;errors.go&#34;},{&#34;func&#34;:&#34;outer&#34;,&#34;line&#34;:&#34;32&#34;,&#34;source&#34;:&#34;errors.go&#34;},{&#34;func&#34;:&#34;main&#34;,&#34;line&#34;:&#34;15&#34;,&#34;source&#34;:&#34;errors.go&#34;},{&#34;func&#34;:&#34;main&#34;,&#34;line&#34;:&#34;204&#34;,&#34;source&#34;:&#34;proc.go&#34;},{&#34;func&#34;:&#34;goexit&#34;,&#34;line&#34;:&#34;1374&#34;,&#34;source&#34;:&#34;asm_amd64.s&#34;}],&#34;error&#34;:&#34;seems we have an error here&#34;,&#34;time&#34;:1609086683}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;zerolog.ErrorStackMarshaler must be set in order for the stack to output anything.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;Logging Fatal Messages&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;    &#34;errors&#34;&#xA;&#xA;    &#34;github.com/rs/zerolog&#34;&#xA;    &#34;github.com/rs/zerolog/log&#34;&#xA;)&#xA;&#xA;func main() {&#xA;    err := errors.New(&#34;A repo man spends his life getting into tense situations&#34;)&#xA;    service := &#34;myservice&#34;&#xA;&#xA;    zerolog.TimeFieldFormat = zerolog.TimeFormatUnix&#xA;&#xA;    log.Fatal().&#xA;        Err(err).&#xA;        Str(&#34;service&#34;, service).&#xA;        Msgf(&#34;Cannot start %s&#34;, service)&#xA;}&#xA;&#xA;// Output: {&#34;time&#34;:1516133263,&#34;level&#34;:&#34;fatal&#34;,&#34;error&#34;:&#34;A repo man spends his life getting into tense situations&#34;,&#34;service&#34;:&#34;myservice&#34;,&#34;message&#34;:&#34;Cannot start myservice&#34;}&#xA;//         exit status 1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;NOTE: Using &lt;code&gt;Msgf&lt;/code&gt; generates one allocation even when the logger is disabled.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Create logger instance to manage different outputs&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;logger := zerolog.New(os.Stderr).With().Timestamp().Logger()&#xA;&#xA;logger.Info().Str(&#34;foo&#34;, &#34;bar&#34;).Msg(&#34;hello world&#34;)&#xA;&#xA;// Output: {&#34;level&#34;:&#34;info&#34;,&#34;time&#34;:1494567715,&#34;message&#34;:&#34;hello world&#34;,&#34;foo&#34;:&#34;bar&#34;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Sub-loggers let you chain loggers with additional context&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;sublogger := log.With().&#xA;                 Str(&#34;component&#34;, &#34;foo&#34;).&#xA;                 Logger()&#xA;sublogger.Info().Msg(&#34;hello world&#34;)&#xA;&#xA;// Output: {&#34;level&#34;:&#34;info&#34;,&#34;time&#34;:1494567715,&#34;message&#34;:&#34;hello world&#34;,&#34;component&#34;:&#34;foo&#34;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Pretty logging&lt;/h3&gt; &#xA;&lt;p&gt;To log a human-friendly, colorized output, use &lt;code&gt;zerolog.ConsoleWriter&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;log.Logger = log.Output(zerolog.ConsoleWriter{Out: os.Stderr})&#xA;&#xA;log.Info().Str(&#34;foo&#34;, &#34;bar&#34;).Msg(&#34;Hello world&#34;)&#xA;&#xA;// Output: 3:04PM INF Hello World foo=bar&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To customize the configuration and formatting:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;output := zerolog.ConsoleWriter{Out: os.Stdout, TimeFormat: time.RFC3339}&#xA;output.FormatLevel = func(i interface{}) string {&#xA;    return strings.ToUpper(fmt.Sprintf(&#34;| %-6s|&#34;, i))&#xA;}&#xA;output.FormatMessage = func(i interface{}) string {&#xA;    return fmt.Sprintf(&#34;***%s****&#34;, i)&#xA;}&#xA;output.FormatFieldName = func(i interface{}) string {&#xA;    return fmt.Sprintf(&#34;%s:&#34;, i)&#xA;}&#xA;output.FormatFieldValue = func(i interface{}) string {&#xA;    return strings.ToUpper(fmt.Sprintf(&#34;%s&#34;, i))&#xA;}&#xA;&#xA;log := zerolog.New(output).With().Timestamp().Logger()&#xA;&#xA;log.Info().Str(&#34;foo&#34;, &#34;bar&#34;).Msg(&#34;Hello World&#34;)&#xA;&#xA;// Output: 2006-01-02T15:04:05Z07:00 | INFO  | ***Hello World**** foo:BAR&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Sub dictionary&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;log.Info().&#xA;    Str(&#34;foo&#34;, &#34;bar&#34;).&#xA;    Dict(&#34;dict&#34;, zerolog.Dict().&#xA;        Str(&#34;bar&#34;, &#34;baz&#34;).&#xA;        Int(&#34;n&#34;, 1),&#xA;    ).Msg(&#34;hello world&#34;)&#xA;&#xA;// Output: {&#34;level&#34;:&#34;info&#34;,&#34;time&#34;:1494567715,&#34;foo&#34;:&#34;bar&#34;,&#34;dict&#34;:{&#34;bar&#34;:&#34;baz&#34;,&#34;n&#34;:1},&#34;message&#34;:&#34;hello world&#34;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Customize automatic field names&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;zerolog.TimestampFieldName = &#34;t&#34;&#xA;zerolog.LevelFieldName = &#34;l&#34;&#xA;zerolog.MessageFieldName = &#34;m&#34;&#xA;&#xA;log.Info().Msg(&#34;hello world&#34;)&#xA;&#xA;// Output: {&#34;l&#34;:&#34;info&#34;,&#34;t&#34;:1494567715,&#34;m&#34;:&#34;hello world&#34;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Add contextual fields to the global logger&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;log.Logger = log.With().Str(&#34;foo&#34;, &#34;bar&#34;).Logger()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Add file and line number to log&lt;/h3&gt; &#xA;&lt;p&gt;Equivalent of &lt;code&gt;Llongfile&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;log.Logger = log.With().Caller().Logger()&#xA;log.Info().Msg(&#34;hello world&#34;)&#xA;&#xA;// Output: {&#34;level&#34;: &#34;info&#34;, &#34;message&#34;: &#34;hello world&#34;, &#34;caller&#34;: &#34;/go/src/your_project/some_file:21&#34;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Equivalent of &lt;code&gt;Lshortfile&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;zerolog.CallerMarshalFunc = func(pc uintptr, file string, line int) string {&#xA;    short := file&#xA;    for i := len(file) - 1; i &amp;gt; 0; i-- {&#xA;        if file[i] == &#39;/&#39; {&#xA;            short = file[i+1:]&#xA;            break&#xA;        }&#xA;    }&#xA;    file = short&#xA;    return file + &#34;:&#34; + strconv.Itoa(line)&#xA;}&#xA;log.Logger = log.With().Caller().Logger()&#xA;log.Info().Msg(&#34;hello world&#34;)&#xA;&#xA;// Output: {&#34;level&#34;: &#34;info&#34;, &#34;message&#34;: &#34;hello world&#34;, &#34;caller&#34;: &#34;some_file:21&#34;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Thread-safe, lock-free, non-blocking writer&lt;/h3&gt; &#xA;&lt;p&gt;If your writer might be slow or not thread-safe and you need your log producers to never get slowed down by a slow writer, you can use a &lt;code&gt;diode.Writer&lt;/code&gt; as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;wr := diode.NewWriter(os.Stdout, 1000, 10*time.Millisecond, func(missed int) {&#xA;&#x9;&#x9;fmt.Printf(&#34;Logger Dropped %d messages&#34;, missed)&#xA;&#x9;})&#xA;log := zerolog.New(wr)&#xA;log.Print(&#34;test&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You will need to install &lt;code&gt;code.cloudfoundry.org/go-diodes&lt;/code&gt; to use this feature.&lt;/p&gt; &#xA;&lt;h3&gt;Log Sampling&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;sampled := log.Sample(&amp;amp;zerolog.BasicSampler{N: 10})&#xA;sampled.Info().Msg(&#34;will be logged every 10 messages&#34;)&#xA;&#xA;// Output: {&#34;time&#34;:1494567715,&#34;level&#34;:&#34;info&#34;,&#34;message&#34;:&#34;will be logged every 10 messages&#34;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;More advanced sampling:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Will let 5 debug messages per period of 1 second.&#xA;// Over 5 debug message, 1 every 100 debug messages are logged.&#xA;// Other levels are not sampled.&#xA;sampled := log.Sample(zerolog.LevelSampler{&#xA;    DebugSampler: &amp;amp;zerolog.BurstSampler{&#xA;        Burst: 5,&#xA;        Period: 1*time.Second,&#xA;        NextSampler: &amp;amp;zerolog.BasicSampler{N: 100},&#xA;    },&#xA;})&#xA;sampled.Debug().Msg(&#34;hello world&#34;)&#xA;&#xA;// Output: {&#34;time&#34;:1494567715,&#34;level&#34;:&#34;debug&#34;,&#34;message&#34;:&#34;hello world&#34;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Hooks&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type SeverityHook struct{}&#xA;&#xA;func (h SeverityHook) Run(e *zerolog.Event, level zerolog.Level, msg string) {&#xA;    if level != zerolog.NoLevel {&#xA;        e.Str(&#34;severity&#34;, level.String())&#xA;    }&#xA;}&#xA;&#xA;hooked := log.Hook(SeverityHook{})&#xA;hooked.Warn().Msg(&#34;&#34;)&#xA;&#xA;// Output: {&#34;level&#34;:&#34;warn&#34;,&#34;severity&#34;:&#34;warn&#34;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Pass a sub-logger by context&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;ctx := log.With().Str(&#34;component&#34;, &#34;module&#34;).Logger().WithContext(ctx)&#xA;&#xA;log.Ctx(ctx).Info().Msg(&#34;hello world&#34;)&#xA;&#xA;// Output: {&#34;component&#34;:&#34;module&#34;,&#34;level&#34;:&#34;info&#34;,&#34;message&#34;:&#34;hello world&#34;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Set as standard logger output&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;log := zerolog.New(os.Stdout).With().&#xA;    Str(&#34;foo&#34;, &#34;bar&#34;).&#xA;    Logger()&#xA;&#xA;stdlog.SetFlags(0)&#xA;stdlog.SetOutput(log)&#xA;&#xA;stdlog.Print(&#34;hello world&#34;)&#xA;&#xA;// Output: {&#34;foo&#34;:&#34;bar&#34;,&#34;message&#34;:&#34;hello world&#34;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Integration with &lt;code&gt;net/http&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;github.com/rs/zerolog/hlog&lt;/code&gt; package provides some helpers to integrate zerolog with &lt;code&gt;http.Handler&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;In this example we use &lt;a href=&#34;https://github.com/justinas/alice&#34;&gt;alice&lt;/a&gt; to install logger for better readability.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;log := zerolog.New(os.Stdout).With().&#xA;    Timestamp().&#xA;    Str(&#34;role&#34;, &#34;my-service&#34;).&#xA;    Str(&#34;host&#34;, host).&#xA;    Logger()&#xA;&#xA;c := alice.New()&#xA;&#xA;// Install the logger handler with default output on the console&#xA;c = c.Append(hlog.NewHandler(log))&#xA;&#xA;// Install some provided extra handler to set some request&#39;s context fields.&#xA;// Thanks to that handler, all our logs will come with some prepopulated fields.&#xA;c = c.Append(hlog.AccessHandler(func(r *http.Request, status, size int, duration time.Duration) {&#xA;    hlog.FromRequest(r).Info().&#xA;        Str(&#34;method&#34;, r.Method).&#xA;        Stringer(&#34;url&#34;, r.URL).&#xA;        Int(&#34;status&#34;, status).&#xA;        Int(&#34;size&#34;, size).&#xA;        Dur(&#34;duration&#34;, duration).&#xA;        Msg(&#34;&#34;)&#xA;}))&#xA;c = c.Append(hlog.RemoteAddrHandler(&#34;ip&#34;))&#xA;c = c.Append(hlog.UserAgentHandler(&#34;user_agent&#34;))&#xA;c = c.Append(hlog.RefererHandler(&#34;referer&#34;))&#xA;c = c.Append(hlog.RequestIDHandler(&#34;req_id&#34;, &#34;Request-Id&#34;))&#xA;&#xA;// Here is your final handler&#xA;h := c.Then(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {&#xA;    // Get the logger from the request&#39;s context. You can safely assume it&#xA;    // will be always there: if the handler is removed, hlog.FromRequest&#xA;    // will return a no-op logger.&#xA;    hlog.FromRequest(r).Info().&#xA;        Str(&#34;user&#34;, &#34;current user&#34;).&#xA;        Str(&#34;status&#34;, &#34;ok&#34;).&#xA;        Msg(&#34;Something happened&#34;)&#xA;&#xA;    // Output: {&#34;level&#34;:&#34;info&#34;,&#34;time&#34;:&#34;2001-02-03T04:05:06Z&#34;,&#34;role&#34;:&#34;my-service&#34;,&#34;host&#34;:&#34;local-hostname&#34;,&#34;req_id&#34;:&#34;b4g0l5t6tfid6dtrapu0&#34;,&#34;user&#34;:&#34;current user&#34;,&#34;status&#34;:&#34;ok&#34;,&#34;message&#34;:&#34;Something happened&#34;}&#xA;}))&#xA;http.Handle(&#34;/&#34;, h)&#xA;&#xA;if err := http.ListenAndServe(&#34;:8080&#34;, nil); err != nil {&#xA;    log.Fatal().Err(err).Msg(&#34;Startup failed&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Multiple Log Output&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;zerolog.MultiLevelWriter&lt;/code&gt; may be used to send the log message to multiple outputs. In this example, we send the log message to both &lt;code&gt;os.Stdout&lt;/code&gt; and the in-built ConsoleWriter.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func main() {&#xA;&#x9;consoleWriter := zerolog.ConsoleWriter{Out: os.Stdout}&#xA;&#xA;&#x9;multi := zerolog.MultiLevelWriter(consoleWriter, os.Stdout)&#xA;&#xA;&#x9;logger := zerolog.New(multi).With().Timestamp().Logger()&#xA;&#xA;&#x9;logger.Info().Msg(&#34;Hello World!&#34;)&#xA;}&#xA;&#xA;// Output (Line 1: Console; Line 2: Stdout)&#xA;// 12:36PM INF Hello World!&#xA;// {&#34;level&#34;:&#34;info&#34;,&#34;time&#34;:&#34;2019-11-07T12:36:38+03:00&#34;,&#34;message&#34;:&#34;Hello World!&#34;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Global Settings&lt;/h2&gt; &#xA;&lt;p&gt;Some settings can be changed and will be applied to all loggers:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;log.Logger&lt;/code&gt;: You can set this value to customize the global logger (the one used by package level methods).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;zerolog.SetGlobalLevel&lt;/code&gt;: Can raise the minimum level of all loggers. Call this with &lt;code&gt;zerolog.Disabled&lt;/code&gt; to disable logging altogether (quiet mode).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;zerolog.DisableSampling&lt;/code&gt;: If argument is &lt;code&gt;true&lt;/code&gt;, all sampled loggers will stop sampling and issue 100% of their log events.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;zerolog.TimestampFieldName&lt;/code&gt;: Can be set to customize &lt;code&gt;Timestamp&lt;/code&gt; field name.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;zerolog.LevelFieldName&lt;/code&gt;: Can be set to customize level field name.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;zerolog.MessageFieldName&lt;/code&gt;: Can be set to customize message field name.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;zerolog.ErrorFieldName&lt;/code&gt;: Can be set to customize &lt;code&gt;Err&lt;/code&gt; field name.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;zerolog.TimeFieldFormat&lt;/code&gt;: Can be set to customize &lt;code&gt;Time&lt;/code&gt; field value formatting. If set with &lt;code&gt;zerolog.TimeFormatUnix&lt;/code&gt;, &lt;code&gt;zerolog.TimeFormatUnixMs&lt;/code&gt; or &lt;code&gt;zerolog.TimeFormatUnixMicro&lt;/code&gt;, times are formated as UNIX timestamp.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;zerolog.DurationFieldUnit&lt;/code&gt;: Can be set to customize the unit for time.Duration type fields added by &lt;code&gt;Dur&lt;/code&gt; (default: &lt;code&gt;time.Millisecond&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;zerolog.DurationFieldInteger&lt;/code&gt;: If set to &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;Dur&lt;/code&gt; fields are formatted as integers instead of floats (default: &lt;code&gt;false&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;zerolog.ErrorHandler&lt;/code&gt;: Called whenever zerolog fails to write an event on its output. If not set, an error is printed on the stderr. This handler must be thread safe and non-blocking.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Field Types&lt;/h2&gt; &#xA;&lt;h3&gt;Standard Types&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Str&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Bool&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Int&lt;/code&gt;, &lt;code&gt;Int8&lt;/code&gt;, &lt;code&gt;Int16&lt;/code&gt;, &lt;code&gt;Int32&lt;/code&gt;, &lt;code&gt;Int64&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Uint&lt;/code&gt;, &lt;code&gt;Uint8&lt;/code&gt;, &lt;code&gt;Uint16&lt;/code&gt;, &lt;code&gt;Uint32&lt;/code&gt;, &lt;code&gt;Uint64&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Float32&lt;/code&gt;, &lt;code&gt;Float64&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Advanced Fields&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Err&lt;/code&gt;: Takes an &lt;code&gt;error&lt;/code&gt; and renders it as a string using the &lt;code&gt;zerolog.ErrorFieldName&lt;/code&gt; field name.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Func&lt;/code&gt;: Run a &lt;code&gt;func&lt;/code&gt; only if the level is enabled.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Timestamp&lt;/code&gt;: Inserts a timestamp field with &lt;code&gt;zerolog.TimestampFieldName&lt;/code&gt; field name, formatted using &lt;code&gt;zerolog.TimeFieldFormat&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Time&lt;/code&gt;: Adds a field with time formatted with &lt;code&gt;zerolog.TimeFieldFormat&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Dur&lt;/code&gt;: Adds a field with &lt;code&gt;time.Duration&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Dict&lt;/code&gt;: Adds a sub-key/value as a field of the event.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;RawJSON&lt;/code&gt;: Adds a field with an already encoded JSON (&lt;code&gt;[]byte&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Hex&lt;/code&gt;: Adds a field with value formatted as a hexadecimal string (&lt;code&gt;[]byte&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Interface&lt;/code&gt;: Uses reflection to marshal the type.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Most fields are also available in the slice format (&lt;code&gt;Strs&lt;/code&gt; for &lt;code&gt;[]string&lt;/code&gt;, &lt;code&gt;Errs&lt;/code&gt; for &lt;code&gt;[]error&lt;/code&gt; etc.)&lt;/p&gt; &#xA;&lt;h2&gt;Binary Encoding&lt;/h2&gt; &#xA;&lt;p&gt;In addition to the default JSON encoding, &lt;code&gt;zerolog&lt;/code&gt; can produce binary logs using &lt;a href=&#34;https://cbor.io&#34;&gt;CBOR&lt;/a&gt; encoding. The choice of encoding can be decided at compile time using the build tag &lt;code&gt;binary_log&lt;/code&gt; as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;go build -tags binary_log .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To Decode binary encoded log files you can use any CBOR decoder. One has been tested to work with zerolog library is &lt;a href=&#34;https://github.com/toravir/csd/&#34;&gt;CSD&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Related Projects&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/cheapRoc/grpc-zerolog&#34;&gt;grpc-zerolog&lt;/a&gt;: Implementation of &lt;code&gt;grpclog.LoggerV2&lt;/code&gt; interface using &lt;code&gt;zerolog&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Trendyol/overlog&#34;&gt;overlog&lt;/a&gt;: Implementation of &lt;code&gt;Mapped Diagnostic Context&lt;/code&gt; interface using &lt;code&gt;zerolog&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/go-logr/zerologr&#34;&gt;zerologr&lt;/a&gt;: Implementation of &lt;code&gt;logr.LogSink&lt;/code&gt; interface using &lt;code&gt;zerolog&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Benchmarks&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;http://hackemist.com/logbench/&#34;&gt;logbench&lt;/a&gt; for more comprehensive and up-to-date benchmarks.&lt;/p&gt; &#xA;&lt;p&gt;All operations are allocation free (those numbers &lt;em&gt;include&lt;/em&gt; JSON encoding):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;BenchmarkLogEmpty-8        100000000    19.1 ns/op     0 B/op       0 allocs/op&#xA;BenchmarkDisabled-8        500000000    4.07 ns/op     0 B/op       0 allocs/op&#xA;BenchmarkInfo-8            30000000     42.5 ns/op     0 B/op       0 allocs/op&#xA;BenchmarkContextFields-8   30000000     44.9 ns/op     0 B/op       0 allocs/op&#xA;BenchmarkLogFields-8       10000000     184 ns/op      0 B/op       0 allocs/op&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There are a few Go logging benchmarks and comparisons that include zerolog.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/imkira/go-loggers-bench&#34;&gt;imkira/go-loggers-bench&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/uber-go/zap#performance&#34;&gt;uber-common/zap&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Using Uber&#39;s zap comparison benchmark:&lt;/p&gt; &#xA;&lt;p&gt;Log a message and 10 fields:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Library&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Time&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Bytes Allocated&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Objects Allocated&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;zerolog&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;767 ns/op&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;552 B/op&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;6 allocs/op&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;span&gt;⚡&lt;/span&gt; zap&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;848 ns/op&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;704 B/op&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;2 allocs/op&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;span&gt;⚡&lt;/span&gt; zap (sugared)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1363 ns/op&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1610 B/op&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;20 allocs/op&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;go-kit&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;3614 ns/op&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;2895 B/op&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;66 allocs/op&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;lion&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;5392 ns/op&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;5807 B/op&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;63 allocs/op&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;logrus&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;5661 ns/op&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;6092 B/op&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;78 allocs/op&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;apex/log&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;15332 ns/op&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;3832 B/op&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;65 allocs/op&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;log15&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;20657 ns/op&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;5632 B/op&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;93 allocs/op&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Log a message with a logger that already has 10 fields of context:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Library&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Time&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Bytes Allocated&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Objects Allocated&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;zerolog&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;52 ns/op&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;0 B/op&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;0 allocs/op&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;span&gt;⚡&lt;/span&gt; zap&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;283 ns/op&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;0 B/op&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;0 allocs/op&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;span&gt;⚡&lt;/span&gt; zap (sugared)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;337 ns/op&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;80 B/op&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;2 allocs/op&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;lion&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;2702 ns/op&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;4074 B/op&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;38 allocs/op&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;go-kit&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;3378 ns/op&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;3046 B/op&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;52 allocs/op&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;logrus&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;4309 ns/op&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;4564 B/op&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;63 allocs/op&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;apex/log&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;13456 ns/op&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;2898 B/op&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;51 allocs/op&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;log15&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;14179 ns/op&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;2642 B/op&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;44 allocs/op&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Log a static string, without any context or &lt;code&gt;printf&lt;/code&gt;-style templating:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Library&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Time&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Bytes Allocated&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Objects Allocated&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;zerolog&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;50 ns/op&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;0 B/op&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;0 allocs/op&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;span&gt;⚡&lt;/span&gt; zap&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;236 ns/op&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;0 B/op&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;0 allocs/op&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;standard library&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;453 ns/op&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;80 B/op&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;2 allocs/op&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;span&gt;⚡&lt;/span&gt; zap (sugared)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;337 ns/op&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;80 B/op&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;2 allocs/op&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;go-kit&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;508 ns/op&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;656 B/op&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;13 allocs/op&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;lion&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;771 ns/op&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1224 B/op&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;10 allocs/op&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;logrus&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1244 ns/op&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1505 B/op&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;27 allocs/op&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;apex/log&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;2751 ns/op&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;584 B/op&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;11 allocs/op&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;log15&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;5181 ns/op&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1592 B/op&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;26 allocs/op&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Caveats&lt;/h2&gt; &#xA;&lt;p&gt;Note that zerolog does no de-duplication of fields. Using the same key multiple times creates multiple keys in final JSON:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;logger := zerolog.New(os.Stderr).With().Timestamp().Logger()&#xA;logger.Info().&#xA;       Timestamp().&#xA;       Msg(&#34;dup&#34;)&#xA;// Output: {&#34;level&#34;:&#34;info&#34;,&#34;time&#34;:1494567715,&#34;time&#34;:1494567715,&#34;message&#34;:&#34;dup&#34;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In this case, many consumers will take the last value, but this is not guaranteed; check yours if in doubt.&lt;/p&gt;</summary>
  </entry>
</feed>