<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-06-29T01:40:22Z</updated>
  <subtitle>Weekly Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Musixal/Backhaul</title>
    <updated>2025-06-29T01:40:22Z</updated>
    <id>tag:github.com,2025-06-29:/Musixal/Backhaul</id>
    <link href="https://github.com/Musixal/Backhaul" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Lightning-fast reverse tunneling solution for NAT traversal, optimized for handling massive concurrent connections with tcp, tcpmux, udp, udp over tcp, ws, wsmux, wss and wssmux support.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Backhaul&lt;/h1&gt; &#xA;&lt;p&gt;Welcome to the &lt;strong&gt;&lt;code&gt;Backhaul&lt;/code&gt;&lt;/strong&gt; project! This project provides a high-performance reverse tunneling solution optimized for handling massive concurrent connections through NAT and firewalls. This README will guide you through setting up and configuring both server and client components, including details on different transport protocols.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Musixal/Backhaul/main/#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Musixal/Backhaul/main/#features&#34;&gt;Features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Musixal/Backhaul/main/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Musixal/Backhaul/main/#usage&#34;&gt;Usage&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Musixal/Backhaul/main/#configuration-options&#34;&gt;Configuration Options&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Musixal/Backhaul/main/#detailed-configuration&#34;&gt;Detailed Configuration&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Musixal/Backhaul/main/#tcp-configuration&#34;&gt;TCP Configuration&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Musixal/Backhaul/main/#tcp-multiplexing-configuration&#34;&gt;TCP Multiplexing Configuration&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Musixal/Backhaul/main/#udp-configuration&#34;&gt;UDP Configuration&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Musixal/Backhaul/main/#websocket-configuration&#34;&gt;WebSocket Configuration&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Musixal/Backhaul/main/#secure-websocket-configuration&#34;&gt;Secure WebSocket Configuration&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Musixal/Backhaul/main/#ws-multiplexing-configuration&#34;&gt;WS Multiplexing Configuration&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Musixal/Backhaul/main/#wss-multiplexing-configuration&#34;&gt;WSS Multiplexing Configuration&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Musixal/Backhaul/main/#generating-a-self-signed-tls-certificate-with-openssl&#34;&gt;Generating a Self-Signed TLS Certificate with OpenSSL&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Musixal/Backhaul/main/#running-backhaul-as-a-service&#34;&gt;Running backhaul as a service&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Musixal/Backhaul/main/#faq&#34;&gt;FAQ&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Musixal/Backhaul/main/#benchmark&#34;&gt;Benchmark&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Musixal/Backhaul/main/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Musixal/Backhaul/main/#donation&#34;&gt;Donation&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;This project offers a robust reverse tunneling solution to overcome NAT and firewall restrictions, supporting various transport protocols. It’s engineered for high efficiency and concurrency.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;High Performance&lt;/strong&gt;: Optimized for handling massive concurrent connections efficiently.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Protocol Flexibility&lt;/strong&gt;: Supports TCP, WebSocket (WS), and Secure WebSocket (WSS) transports.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;UDP over TCP&lt;/strong&gt;: Implements UDP traffic encapsulation and forwarding over a TCP connection for reliable delivery with built-in congestion control.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Multiplexing&lt;/strong&gt;: Enables multiple connections over a single transport with SMUX.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;NAT &amp;amp; Firewall Bypass&lt;/strong&gt;: Overcomes restrictions with reverse tunneling.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Traffic Sniffing&lt;/strong&gt;: Optional network traffic monitoring with logging support.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Configurable Keepalive&lt;/strong&gt;: Adjustable keep-alive and heartbeat intervals for stable connections.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;TLS Encryption&lt;/strong&gt;: Secure connections via WSS with support for custom TLS certificates.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Web Interface&lt;/strong&gt;: Real-time monitoring through a lightweight web interface.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Hot Reload Configuration&lt;/strong&gt;: Supports dynamic configuration reloading without server restarts.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Download&lt;/strong&gt; the latest release from the &lt;a href=&#34;https://github.com/musixal/backhaul/releases&#34;&gt;GitHub releases page&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Extract&lt;/strong&gt; the archive (adjust the &lt;code&gt;filename&lt;/code&gt; if needed):&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;tar -xzf backhaul_linux_amd64.tar.gz&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Run&lt;/strong&gt; the executable:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./backhaul&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;You can also build from source if preferred:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/musixal/backhaul.git&#xA;cd backhaul&#xA;go build&#xA;./backhaul&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;The main executable for this project is &lt;code&gt;backhaul&lt;/code&gt;. It requires a TOML configuration file for both the server and client components.&lt;/p&gt; &#xA;&lt;h3&gt;Configuration Options&lt;/h3&gt; &#xA;&lt;p&gt;To start using the solution, you&#39;ll need to configure both server and client components. Here’s how to set up basic configurations:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Server Configuration&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Create a configuration file named &lt;code&gt;config.toml&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[server]# Local, IRAN&#xA;bind_addr = &#34;0.0.0.0:3080&#34;    # Address and port for the server to listen on (mandatory).&#xA;transport = &#34;tcp&#34;             # Protocol to use (&#34;tcp&#34;, &#34;tcpmux&#34;, &#34;ws&#34;, &#34;wss&#34;, &#34;wsmux&#34;, &#34;wssmux&#34;. mandatory).&#xA;accept_udp = false             # Enable transferring UDP connections over TCP transport. (optional, default: false)&#xA;token = &#34;your_token&#34;          # Authentication token for secure communication (optional).&#xA;keepalive_period = 75         # Interval in seconds to send keep-alive packets.(optional, default: 75s)&#xA;nodelay = false               # Enable TCP_NODELAY (optional, default: false).&#xA;channel_size = 2048           # Tunnel and Local channel size. Excess connections are discarded. (optional, default: 2048).&#xA;heartbeat = 40                # In seconds. Ping interval for tunnel stability. Min: 1s. (Optional, default: 40s)&#xA;mux_con = 8                   # Mux concurrency. Number of connections that can be multiplexed into a single stream (optional, default: 8).&#xA;mux_version = 1               # SMUX protocol version (1 or 2). Version 2 may have extra features. (optional)&#xA;mux_framesize = 32768         # 32 KB. The maximum size of a frame that can be sent over a connection. (optional)&#xA;mux_recievebuffer = 4194304   # 4 MB. The maximum buffer size for incoming data per connection. (optional)&#xA;mux_streambuffer = 65536      # 256 KB. The maximum buffer size per individual stream within a connection. (optional)&#xA;sniffer = false               # Enable or disable network sniffing for monitoring data. (optional, default false)&#xA;web_port = 2060               # Port number for the web interface or monitoring interface. (optional, set to 0 to disable).&#xA;sniffer_log =&#34;/root/log.json&#34; # Filename used to store network traffic and usage data logs. (optional, default backhaul.json)&#xA;tls_cert = &#34;/root/server.crt&#34; # Path to the TLS certificate file for wss/wssmux. (mandatory).&#xA;tls_key = &#34;/root/server.key&#34;  # Path to the TLS private key file for wss/wssmux. (mandatory).&#xA;log_level = &#34;info&#34;            # Log level (&#34;panic&#34;, &#34;fatal&#34;, &#34;error&#34;, &#34;warn&#34;, &#34;info&#34;, &#34;debug&#34;, &#34;trace&#34;, optional, default: &#34;info&#34;).&#xA;&#xA;ports = [&#xA;&#34;443-600&#34;,                  # Listen on all ports in the range 443 to 600&#xA;&#34;443-600:5201&#34;,             # Listen on all ports in the range 443 to 600 and forward traffic to 5201&#xA;&#34;443-600=1.1.1.1:5201&#34;,     # Listen on all ports in the range 443 to 600 and forward traffic to 1.1.1.1:5201&#xA;&#34;443&#34;,                      # Listen on local port 443 and forward to remote port 443 (default forwarding).&#xA;&#34;4000=5000&#34;,                # Listen on local port 4000 (bind to all local IPs) and forward to remote port 5000.&#xA;&#34;127.0.0.2:443=5201&#34;,       # Bind to specific local IP (127.0.0.2), listen on port 443, and forward to remote port 5201.&#xA;&#34;443=1.1.1.1:5201&#34;,         # Listen on local port 443 and forward to a specific remote IP (1.1.1.1) on port 5201.&#xA;&#34;127.0.0.2:443=1.1.1.1:5201&#34;,  # Bind to specific local IP (127.0.0.2), listen on port 443, and forward to remote IP (1.1.1.1) on port 5201.&#xA;]&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;To start the &lt;code&gt;server&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./backhaul -c config.toml&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Client Configuration&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Create a configuration file named &lt;code&gt;config.toml&lt;/code&gt; for the client:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[client]  # Behind NAT, firewall-blocked&#xA;remote_addr = &#34;0.0.0.0:3080&#34;  # Server address and port (mandatory).&#xA;edge_ip = &#34;188.114.96.0&#34;      # Edge IP used for CDN connection, specifically for WebSocket-based transports.(Optional, default none)&#xA;transport = &#34;tcp&#34;             # Protocol to use (&#34;tcp&#34;, &#34;tcpmux&#34;, &#34;ws&#34;, &#34;wss&#34;, &#34;wsmux&#34;, &#34;wssmux&#34;. mandatory).&#xA;token = &#34;your_token&#34;          # Authentication token for secure communication (optional).&#xA;connection_pool = 8           # Number of pre-established connections.(optional, default: 8).&#xA;aggressive_pool = false       # Enables aggressive connection pool management.(optional, default: false).&#xA;keepalive_period = 75         # Interval in seconds to send keep-alive packets. (optional, default: 75s)&#xA;nodelay = false               # Use TCP_NODELAY (optional, default: false).&#xA;retry_interval = 3            # Retry interval in seconds (optional, default: 3s).&#xA;dial_timeout = 10             # Sets the max wait time for establishing a network connection. (optional, default: 10s)&#xA;mux_version = 1               # SMUX protocol version (1 or 2). Version 2 may have extra features. (optional)&#xA;mux_framesize = 32768         # 32 KB. The maximum size of a frame that can be sent over a connection. (optional)&#xA;mux_recievebuffer = 4194304   # 4 MB. The maximum buffer size for incoming data per connection. (optional)&#xA;mux_streambuffer = 65536      # 256 KB. The maximum buffer size per individual stream within a connection. (optional)&#xA;sniffer = false               # Enable or disable network sniffing for monitoring data. (optional, default false)&#xA;web_port = 2060               # Port number for the web interface or monitoring interface. (optional, set to 0 to disable).&#xA;sniffer_log =&#34;/root/log.json&#34; # Filename used to store network traffic and usage data logs. (optional, default backhaul.json)&#xA;log_level = &#34;info&#34;            # Log level (&#34;panic&#34;, &#34;fatal&#34;, &#34;error&#34;, &#34;warn&#34;, &#34;info&#34;, &#34;debug&#34;, &#34;trace&#34;, optional, default: &#34;info&#34;).&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;To start the &lt;code&gt;client&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./backhaul -c config.toml&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Detailed Configuration&lt;/h3&gt; &#xA;&lt;h4&gt;TCP Configuration&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Server&lt;/strong&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[server]&#xA;bind_addr = &#34;0.0.0.0:3080&#34;&#xA;transport = &#34;tcp&#34;&#xA;accept_udp = false &#xA;token = &#34;your_token&#34;&#xA;keepalive_period = 75  &#xA;nodelay = true &#xA;heartbeat = 40 &#xA;channel_size = 2048&#xA;sniffer = false &#xA;web_port = 2060&#xA;sniffer_log = &#34;/root/backhaul.json&#34;&#xA;log_level = &#34;info&#34;&#xA;ports = []&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Client&lt;/strong&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[client]&#xA;remote_addr = &#34;0.0.0.0:3080&#34;&#xA;transport = &#34;tcp&#34;&#xA;token = &#34;your_token&#34; &#xA;connection_pool = 8&#xA;aggressive_pool = false&#xA;keepalive_period = 75&#xA;dial_timeout = 10&#xA;nodelay = true &#xA;retry_interval = 3&#xA;sniffer = false&#xA;web_port = 2060 &#xA;sniffer_log = &#34;/root/backhaul.json&#34;&#xA;log_level = &#34;info&#34;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Details&lt;/strong&gt;:&lt;/p&gt; &lt;p&gt;&lt;code&gt;remote_addr&lt;/code&gt;: The IPv4, IPv6, or domain address of the server to which the client connects.&lt;/p&gt; &lt;p&gt;&lt;code&gt;token&lt;/code&gt;: An authentication token used to securely validate and authenticate the connection between the client and server within the tunnel.&lt;/p&gt; &lt;p&gt;&lt;code&gt;channel_size&lt;/code&gt;: The queue size for forwarding packets from server to the client. If the limit is exceeded, packets will be dropped.&lt;/p&gt; &lt;p&gt;&lt;code&gt;connection_pool&lt;/code&gt;: Set the number of pre-established connections for better latency.&lt;/p&gt; &lt;p&gt;&lt;code&gt;nodelay&lt;/code&gt;: Refers to a TCP socket option (TCP_NODELAY) that improve the latency but decrease the bandwidth&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;TCP Multiplexing Configuration&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Server&lt;/strong&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[server]&#xA;bind_addr = &#34;0.0.0.0:3080&#34;&#xA;transport = &#34;tcpmux&#34;&#xA;token = &#34;your_token&#34; &#xA;keepalive_period = 75&#xA;nodelay = true &#xA;heartbeat = 40 &#xA;channel_size = 2048&#xA;mux_con = 8&#xA;mux_version = 1&#xA;mux_framesize = 32768 &#xA;mux_recievebuffer = 4194304&#xA;mux_streambuffer = 65536 &#xA;sniffer = false &#xA;web_port = 2060&#xA;sniffer_log = &#34;/root/backhaul.json&#34;&#xA;log_level = &#34;info&#34;&#xA;ports = []&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Client&lt;/strong&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[client]&#xA;remote_addr = &#34;0.0.0.0:3080&#34;&#xA;transport = &#34;tcpmux&#34;&#xA;token = &#34;your_token&#34; &#xA;connection_pool = 8&#xA;aggressive_pool = false&#xA;keepalive_period = 75&#xA;dial_timeout = 10&#xA;retry_interval = 3&#xA;nodelay = true &#xA;mux_version = 1&#xA;mux_framesize = 32768 &#xA;mux_recievebuffer = 4194304&#xA;mux_streambuffer = 65536 &#xA;sniffer = false &#xA;web_port = 2060&#xA;sniffer_log = &#34;/root/backhaul.json&#34;&#xA;log_level = &#34;info&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Details&lt;/strong&gt;:&lt;/p&gt; &lt;p&gt;&lt;code&gt;mux_session&lt;/code&gt;: Number of multiplexed sessions. Increase this if you need to handle more simultaneous sessions over a single connection.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Refer to TCP configuration for more information.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;UDP Configuration&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Server&lt;/strong&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[server]&#xA;bind_addr = &#34;0.0.0.0:3080&#34;&#xA;transport = &#34;udp&#34;&#xA;token = &#34;your_token&#34;&#xA;heartbeat = 20 &#xA;channel_size = 2048&#xA;sniffer = false &#xA;web_port = 2060&#xA;sniffer_log = &#34;/root/backhaul.json&#34;&#xA;log_level = &#34;info&#34;&#xA;ports = []&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Client&lt;/strong&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[client]&#xA;remote_addr = &#34;0.0.0.0:3080&#34;&#xA;transport = &#34;udp&#34;&#xA;token = &#34;your_token&#34; &#xA;connection_pool = 8&#xA;aggressive_pool = false&#xA;retry_interval = 3&#xA;sniffer = false&#xA;web_port = 2060 &#xA;sniffer_log = &#34;/root/backhaul.json&#34;&#xA;log_level = &#34;info&#34;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;WebSocket Configuration&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Server&lt;/strong&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[server]&#xA;bind_addr = &#34;0.0.0.0:8080&#34;&#xA;transport = &#34;ws&#34;&#xA;token = &#34;your_token&#34; &#xA;channel_size = 2048&#xA;keepalive_period = 75 &#xA;heartbeat = 40&#xA;nodelay = true &#xA;sniffer = false &#xA;web_port = 2060&#xA;sniffer_log = &#34;/root/backhaul.json&#34;&#xA;log_level = &#34;info&#34;&#xA;ports = []&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Client&lt;/strong&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[client]&#xA;remote_addr = &#34;0.0.0.0:8080&#34;&#xA;edge_ip = &#34;&#34; &#xA;transport = &#34;ws&#34;&#xA;token = &#34;your_token&#34; &#xA;connection_pool = 8&#xA;aggressive_pool = false&#xA;keepalive_period = 75 &#xA;dial_timeout = 10&#xA;retry_interval = 3&#xA;nodelay = true &#xA;sniffer = false &#xA;web_port = 2060&#xA;sniffer_log = &#34;/root/backhaul.json&#34;&#xA;log_level = &#34;info&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Details&lt;/strong&gt;:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Refer to TCP configuration for more information.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Secure WebSocket Configuration&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Server&lt;/strong&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[server]&#xA;bind_addr = &#34;0.0.0.0:8443&#34;&#xA;transport = &#34;wss&#34;&#xA;token = &#34;your_token&#34; &#xA;channel_size = 2048&#xA;keepalive_period = 75 &#xA;nodelay = true &#xA;tls_cert = &#34;/root/server.crt&#34;      &#xA;tls_key = &#34;/root/server.key&#34;&#xA;sniffer = false &#xA;web_port = 2060&#xA;sniffer_log = &#34;/root/backhaul.json&#34;&#xA;log_level = &#34;info&#34;&#xA;ports = []&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Client&lt;/strong&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[client]&#xA;remote_addr = &#34;0.0.0.0:8443&#34;&#xA;edge_ip = &#34;&#34; &#xA;transport = &#34;wss&#34;&#xA;token = &#34;your_token&#34; &#xA;connection_pool = 8&#xA;aggressive_pool = false&#xA;keepalive_period = 75&#xA;dial_timeout = 10&#xA;retry_interval = 3  &#xA;nodelay = true &#xA;sniffer = false &#xA;web_port = 2060&#xA;sniffer_log = &#34;/root/backhaul.json&#34;&#xA;log_level = &#34;info&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Details&lt;/strong&gt;:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Refer to the next section for instructions on generating &lt;code&gt;tls_cert&lt;/code&gt; and &lt;code&gt;tls_key&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;WS Multiplexing Configuration&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Server&lt;/strong&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[server]&#xA;bind_addr = &#34;0.0.0.0:3080&#34;&#xA;transport = &#34;wsmux&#34;&#xA;token = &#34;your_token&#34; &#xA;keepalive_period = 75&#xA;nodelay = true &#xA;heartbeat = 40 &#xA;channel_size = 2048&#xA;mux_con = 8&#xA;mux_version = 1&#xA;mux_framesize = 32768 &#xA;mux_recievebuffer = 4194304&#xA;mux_streambuffer = 65536 &#xA;sniffer = false &#xA;web_port = 2060&#xA;sniffer_log = &#34;/root/backhaul.json&#34;&#xA;log_level = &#34;info&#34;&#xA;ports = []&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Client&lt;/strong&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[client]&#xA;remote_addr = &#34;0.0.0.0:3080&#34;&#xA;edge_ip = &#34;&#34; &#xA;transport = &#34;wsmux&#34;&#xA;token = &#34;your_token&#34; &#xA;connection_pool = 8&#xA;aggressive_pool = false&#xA;keepalive_period = 75&#xA;dial_timeout = 10&#xA;nodelay = true&#xA;retry_interval = 3&#xA;mux_version = 1&#xA;mux_framesize = 32768 &#xA;mux_recievebuffer = 4194304&#xA;mux_streambuffer = 65536 &#xA;sniffer = false &#xA;web_port = 2060&#xA;sniffer_log = &#34;/root/backhaul.json&#34;&#xA;log_level = &#34;info&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;WSS Multiplexing Configuration&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Server&lt;/strong&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[server]&#xA;bind_addr = &#34;0.0.0.0:443&#34;&#xA;transport = &#34;wssmux&#34;&#xA;token = &#34;your_token&#34; &#xA;keepalive_period = 75&#xA;nodelay = true &#xA;heartbeat = 40 &#xA;channel_size = 2048&#xA;mux_con = 8&#xA;mux_version = 1&#xA;mux_framesize = 32768 &#xA;mux_recievebuffer = 4194304&#xA;mux_streambuffer = 65536 &#xA;tls_cert = &#34;/root/server.crt&#34;      &#xA;tls_key = &#34;/root/server.key&#34;&#xA;sniffer = false &#xA;web_port = 2060&#xA;sniffer_log = &#34;/root/backhaul.json&#34;&#xA;log_level = &#34;info&#34;&#xA;ports = []&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Client&lt;/strong&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[client]&#xA;remote_addr = &#34;0.0.0.0:443&#34;&#xA;edge_ip = &#34;&#34; &#xA;transport = &#34;wssmux&#34;&#xA;token = &#34;your_token&#34; &#xA;keepalive_period = 75&#xA;dial_timeout = 10&#xA;nodelay = true&#xA;retry_interval = 3&#xA;connection_pool = 8&#xA;aggressive_pool = false&#xA;mux_version = 1&#xA;mux_framesize = 32768 &#xA;mux_recievebuffer = 4194304&#xA;mux_streambuffer = 65536  &#xA;sniffer = false &#xA;web_port = 2060&#xA;sniffer_log = &#34;/root/backhaul.json&#34;&#xA;log_level = &#34;info&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Generating a Self-Signed TLS Certificate with OpenSSL&lt;/h2&gt; &#xA;&lt;p&gt;To generate a TLS certificate and key, you can use tools like OpenSSL. Here’s a step-by-step guide on how to create a self-signed certificate and key using OpenSSL:&lt;/p&gt; &#xA;&lt;h3&gt;Step 1: Install OpenSSL&lt;/h3&gt; &#xA;&lt;p&gt;If you don&#39;t already have OpenSSL installed, you can install it using your system&#39;s package manager.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;On Ubuntu/Debian&lt;/strong&gt;: &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt-get install openssl&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Step 2: Generate a Private Key&lt;/h3&gt; &#xA;&lt;p&gt;To generate a 2048-bit RSA private key, run the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;openssl genpkey -algorithm RSA -out server.key -pkeyopt rsa_keygen_bits:2048&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will create a file named &lt;code&gt;server.key&lt;/code&gt;, which is your private key.&lt;/p&gt; &#xA;&lt;h3&gt;Step 3: Generate a Certificate Signing Request (CSR)&lt;/h3&gt; &#xA;&lt;p&gt;Create a Certificate Signing Request (CSR) using the private key. This CSR is used to generate the SSL certificate:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;openssl req -new -key server.key -out server.csr&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You will be prompted to enter information for the CSR. For the common name (CN), use the domain name or IP address where your server will be hosted. Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Country Name (2 letter code) [AU]:US&#xA;State or Province Name (full name) [Some-State]:California&#xA;Locality Name (eg, city) []:San Francisco&#xA;Organization Name (eg, company) [Internet Widgits Pty Ltd]:Your Company Name&#xA;Organizational Unit Name (eg, section) []:&#xA;Common Name (e.g. server FQDN or YOUR name) []:example.com&#xA;Email Address []:&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Step 4: Generate a Self-Signed Certificate&lt;/h3&gt; &#xA;&lt;p&gt;Use the CSR and private key to generate a self-signed certificate. Specify the validity period (in days):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;openssl x509 -req -in server.csr -signkey server.key -out server.crt -days 365&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will generate a certificate named &lt;code&gt;server.crt&lt;/code&gt;, valid for 365 days.&lt;/p&gt; &#xA;&lt;h3&gt;Recap of the Files Generated:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;server.key&lt;/code&gt;: Your private key.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;server.csr&lt;/code&gt;: The certificate signing request (used to generate the certificate).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;server.crt&lt;/code&gt;: Your self-signed TLS certificate.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Running backhaul as a service&lt;/h2&gt; &#xA;&lt;p&gt;To create a service file for your backhaul project that ensures the service restarts automatically, you can use the following template for a systemd service file. Assuming your project runs a reverse tunnel and the main executable file is located in a certain path, here&#39;s a basic example:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Create the service file &lt;code&gt;/etc/systemd/system/backhaul.service&lt;/code&gt;:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;[Unit]&#xA;Description=Backhaul Reverse Tunnel Service&#xA;After=network.target&#xA;&#xA;[Service]&#xA;Type=simple&#xA;ExecStart=/root/backhaul -c /root/config.toml&#xA;Restart=always&#xA;RestartSec=3&#xA;LimitNOFILE=1048576&#xA;&#xA;[Install]&#xA;WantedBy=multi-user.target&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;After creating the service file, enable and start the service:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo systemctl daemon-reload&#xA;sudo systemctl enable backhaul.service&#xA;sudo systemctl start backhaul.service&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;To verify if the service is running:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo systemctl status backhaul.service&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;View the most recent log entries for the backhaul.service unit:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;journalctl -u backhaul.service -e -f&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Q: How do I decide which transport protocol to use?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;tcp&lt;/code&gt;: Use if you need straightforward TCP connections.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;tcpmux&lt;/code&gt;: Use if you need to handle multiple sessions over a single connection.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ws&lt;/code&gt;: Use if you need to traverse HTTP-based firewalls or proxies.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;wss&lt;/code&gt;: Use this for secure WebSocket connections that need to traverse HTTP-based firewalls or proxies. It encrypts data for added security, similar to WS but with encryption.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Benchmark&lt;/h2&gt; &#xA;&lt;p&gt;For in-depth information, please visit the dedicated &lt;a href=&#34;https://raw.githubusercontent.com/Musixal/Backhaul/main/benchmark/&#34;&gt;Benchmark page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This project is licensed under the AGPL-3.0 license. See the LICENSE file for details.&lt;/p&gt; &#xA;&lt;h2&gt;Donation&lt;/h2&gt; &#xA;&lt;p&gt;Donate TRX (TRC-20) to support our project:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-wallet&#34;&gt;TMVBGzX4qpt12R1qWsJMpT1ttoKH1kus1H&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Thanks for your support!&lt;/p&gt; &#xA;&lt;h2&gt;Stargazers over time&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://starchart.cc/Musixal/Backhaul&#34;&gt;&lt;img src=&#34;https://starchart.cc/Musixal/Backhaul.svg?variant=light&#34; alt=&#34;Stargazers over time&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>kitops-ml/kitops</title>
    <updated>2025-06-29T01:40:22Z</updated>
    <id>tag:github.com,2025-06-29:/kitops-ml/kitops</id>
    <link href="https://github.com/kitops-ml/kitops" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An open source DevOps tool for packaging and versioning AI/ML models, datasets, code, and configuration into an OCI artifact.&lt;/p&gt;&lt;hr&gt;&lt;img width=&#34;1270&#34; alt=&#34;KitOps&#34; src=&#34;https://github.com/kitops-ml/kitops/assets/10517533/41295471-fe49-4011-adf6-a215f29890c2&#34; id=&#34;top&#34;&gt; &#xA;&lt;h2&gt;Standards-based packaging and versioning system for AI/ML projects.&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/myscale/myscaledb/raw/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-Apache%202.0-yellow.svg?sanitize=true&#34; alt=&#34;LICENSE&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://go.dev/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Language-go-blue.svg?sanitize=true&#34; alt=&#34;Language&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/Tapeh8agYy&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/1098133460310294528?logo=Discord&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/kit_ops&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/url/http/shields.io.svg?style=social&amp;amp;label=Twitter&#34; alt=&#34;Twitter&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hits.seeyoufarm.com&#34;&gt;&lt;img src=&#34;https://hits.seeyoufarm.com/api/count/incr/badge.svg?url=https%253A%252F%252Fgithub.com%25kitops-ml%252Fkitops&amp;amp;count_bg=%252379C83D&amp;amp;title_bg=%2523555555&amp;amp;icon=&amp;amp;icon_color=%2523E7E7E7&amp;amp;title=hits&amp;amp;edge_flat=false&#34; alt=&#34;Hits&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://kitops.org?utm_source=github&amp;amp;utm_medium=kitops-readme&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-Visit%20the%20Official%20Website%20%E2%86%92-rgb(255,175,82)?style=for-the-badge&#34; alt=&#34;Official Website&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://kitops.org/docs/get-started/?utm_source=github&amp;amp;utm_medium=kitops-readme&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-KitOps%20Quick%20Start%20%E2%86%92-rgb(122,140,225)?style=for-the-badge&#34; alt=&#34;Use Cases&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;What is KitOps?&lt;/h3&gt; &#xA;&lt;p&gt;KitOps is a packaging, versioning, and sharing system for AI/ML projects that uses open standards so it works with the AI/ML, development, and DevOps tools you are already using, and can be stored in your enterprise container registry. It&#39;s AI/ML platform engineering teams&#39; preferred solution for securely packaging and versioning assets.&lt;/p&gt; &#xA;&lt;p&gt;KitOps creates a ModelKit for your AI/ML project which includes everything you need to reproduce it locally or deploy it into production. You can even &lt;strong&gt;selectively unpack a ModelKit&lt;/strong&gt; so different team members can save time and storage space by only grabbing what they need for a task. Because ModelKits are immutable, signable, and live in your existing container registry they&#39;re easy for organizations to track, control, and audit.&lt;/p&gt; &#xA;&lt;p&gt;ModelKits &lt;a href=&#34;https://www.youtube.com/watch?v=j2qjHf2HzSQ&#34;&gt;simplify the handoffs between data scientists, application developers, and SREs&lt;/a&gt; working with LLMs and other AI/ML models. Teams and enterprises use KitOps as a secure storage throughout the AI/ML project lifecycle.&lt;/p&gt; &#xA;&lt;p&gt;Use KitOps to speed up and de-risk all types of AI/ML projects:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Predictive models&lt;/li&gt; &#xA; &lt;li&gt;Large language models&lt;/li&gt; &#xA; &lt;li&gt;Computer vision models&lt;/li&gt; &#xA; &lt;li&gt;Multi-modal models&lt;/li&gt; &#xA; &lt;li&gt;Audio models&lt;/li&gt; &#xA; &lt;li&gt;etc...&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;🇪🇺 EU AI Act Compliance 🔒&lt;/h3&gt; &#xA;&lt;p&gt;For our friends in the EU - ModelKits are the perfect way to create a library of model versions for EU AI Act compliance because they&#39;re tamper-proof, signable, and auditable.&lt;/p&gt; &#xA;&lt;h3&gt;😍 What&#39;s New? ✨&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;🚢 Create a &lt;strong&gt;&lt;a href=&#34;https://tinyurl.com/5b76p5u3&#34;&gt;runnable container from a ModelKit&lt;/a&gt;&lt;/strong&gt; with one command! Read &lt;a href=&#34;https://kitops.org/docs/deploy/&#34;&gt;KitOps deploy docs&lt;/a&gt; for details.&lt;/li&gt; &#xA; &lt;li&gt;🥂 Get the most out of KitOps&#39; ModelKits by using them with the &lt;strong&gt;&lt;a href=&#34;https://jozu.ml/&#34;&gt;Jozu Hub&lt;/a&gt;&lt;/strong&gt; repository. Or, continue using ModelKits with your existing OCI registry (even on-premises and air-gapped).&lt;/li&gt; &#xA; &lt;li&gt;🛠️ Use KitOps with Dagger pipelines using our modules from the &lt;a href=&#34;https://github.com/kitops-ml/daggerverse&#34;&gt;Daggerverse&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;⛑️ &lt;a href=&#34;https://developers.redhat.com/articles/2024/09/16/enhance-llms-instructlab-kitops&#34;&gt;KitOps works great with Red Hat&lt;/a&gt; InstructLab and Quay.io products.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Features&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;🎁 &lt;strong&gt;&lt;a href=&#34;https://kitops.org/docs/modelkit/intro/&#34;&gt;Unified packaging&lt;/a&gt;:&lt;/strong&gt; A ModelKit package includes models, datasets, configurations, and code. Add as much or as little as your project needs.&lt;/li&gt; &#xA; &lt;li&gt;🏭 &lt;strong&gt;&lt;a href=&#34;https://kitops.org/docs/cli/cli-reference/#kit-tag&#34;&gt;Versioning&lt;/a&gt;:&lt;/strong&gt; Each ModelKit is tagged so everyone knows which dataset and model work together.&lt;/li&gt; &#xA; &lt;li&gt;🔒 &lt;strong&gt;&lt;a href=&#34;https://kitops.org/docs/modelkit/spec/&#34;&gt;Tamper-proofing&lt;/a&gt;:&lt;/strong&gt; Each ModelKit package includes an SHA digest for itself, and every artifact it holds.&lt;/li&gt; &#xA; &lt;li&gt;🤩 &lt;strong&gt;&lt;a href=&#34;https://kitops.org/docs/cli/cli-reference/#kit-unpack&#34;&gt;Selective-unpacking&lt;/a&gt;:&lt;/strong&gt; Unpack only what you need from a ModelKit with the &lt;code&gt;kit unpack --filter&lt;/code&gt; command - just the model, just the dataset and code, or any other combination.&lt;/li&gt; &#xA; &lt;li&gt;🤖 &lt;strong&gt;&lt;a href=&#34;https://github.com/marketplace/actions/setup-kit-cli&#34;&gt;Automation&lt;/a&gt;:&lt;/strong&gt; Pack or unpack a ModelKit locally or as part of your CI/CD workflow for testing, integration, or deployment (e.g. &lt;a href=&#34;https://github.com/marketplace/actions/setup-kit-cli&#34;&gt;GitHub Actions&lt;/a&gt; or &lt;a href=&#34;https://github.com/kitops-ml/daggerverse&#34;&gt;Dagger&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;🐳 &lt;strong&gt;&lt;a href=&#34;https://kitops.org/docs/deploy/&#34;&gt;Deploy containers&lt;/a&gt;:&lt;/strong&gt; Generate a basic or custom docker container from any ModelKit.&lt;/li&gt; &#xA; &lt;li&gt;🚢 &lt;strong&gt;&lt;a href=&#34;https://kitops.org/docs/deploy/&#34;&gt;Kubernetes-ready&lt;/a&gt;:&lt;/strong&gt; Generate a Kubernetes / KServe deployment config from any ModelKit.&lt;/li&gt; &#xA; &lt;li&gt;🪛 &lt;strong&gt;&lt;a href=&#34;https://dev.to/kitops/fine-tune-your-first-large-language-model-llm-with-lora-llamacpp-and-kitops-in-5-easy-steps-1g7f&#34;&gt;LLM fine-tuning&lt;/a&gt;:&lt;/strong&gt; Use KitOps to fine-tune a large language model using LoRA.&lt;/li&gt; &#xA; &lt;li&gt;🎯 &lt;strong&gt;&lt;a href=&#34;https://www.codeproject.com/Articles/5384392/A-Step-by-Step-Guide-to-Building-and-Distributing&#34;&gt;RAG pipelines&lt;/a&gt;:&lt;/strong&gt; Create a RAG pipeline for tailoring an LLM with KitOps.&lt;/li&gt; &#xA; &lt;li&gt;📝 &lt;strong&gt;&lt;a href=&#34;https://kitops.org/docs/next-steps/&#34;&gt;Artifact signing&lt;/a&gt;:&lt;/strong&gt; ModelKits and their assets can be signed so you can be confident of their provenance.&lt;/li&gt; &#xA; &lt;li&gt;🌈 &lt;strong&gt;&lt;a href=&#34;https://kitops.org/docs/modelkit/compatibility/&#34;&gt;Standards-based&lt;/a&gt;:&lt;/strong&gt; Store ModelKits in any OCI 1.1-compliant container or artifact registry.&lt;/li&gt; &#xA; &lt;li&gt;🥧 &lt;strong&gt;&lt;a href=&#34;https://kitops.org/docs/kitfile/kf-overview/&#34;&gt;Simple syntax&lt;/a&gt;:&lt;/strong&gt; Kitfiles are easy to write and read, using a familiar YAML syntax.&lt;/li&gt; &#xA; &lt;li&gt;🩰 &lt;strong&gt;&lt;a href=&#34;https://kitops.org/docs/kitfile/format/#model&#34;&gt;Flexible&lt;/a&gt;:&lt;/strong&gt; Reference base models using &lt;code&gt;model parts&lt;/code&gt;, or store key-value pairs (or any YAML-compatible JSON data) in your Kitfile - use it to keep features, hyperparameters, links to MLOps tool experiments, or validation output.&lt;/li&gt; &#xA; &lt;li&gt;🏃‍♂️‍➡️ &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kitops-ml/kitops/main/docs/src/docs/deploy.md#running-llms-locally&#34;&gt;Run locally&lt;/a&gt;:&lt;/strong&gt; Kit&#39;s Dev Mode lets you run an LLM locally, configure it, and prompt/chat with it instantly.&lt;/li&gt; &#xA; &lt;li&gt;🤗 &lt;strong&gt;Universal:&lt;/strong&gt; ModelKits can be used with any AI, ML, or LLM project - even multi-modal models.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;See KitOps in Action&lt;/h3&gt; &#xA;&lt;p&gt;There&#39;s a video of KitOps in action on the &lt;a href=&#34;https://kitops.org/&#34;&gt;KitOps site&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;🚀 Try KitOps in under 15 Minutes&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://kitops.org/docs/cli/installation/&#34;&gt;Install the CLI&lt;/a&gt; for your platform.&lt;/li&gt; &#xA; &lt;li&gt;Follow the &lt;a href=&#34;https://kitops.org/docs/get-started/&#34;&gt;Getting Started&lt;/a&gt; docs to learn to pack, unpack, and share a ModelKit.&lt;/li&gt; &#xA; &lt;li&gt;Test drive one of our &lt;a href=&#34;https://jozu.ml/organization/jozu-quickstarts&#34;&gt;ModelKit Quick Starts&lt;/a&gt; that includes everything you need to run your model including a codebase, dataset, documentation, and of course the model.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;For those who prefer to build from the source, follow &lt;a href=&#34;https://kitops.org/docs/cli/installation/#%F0%9F%9B%A0%EF%B8%8F-install-from-source&#34;&gt;these steps&lt;/a&gt; to get the latest version from our repository.&lt;/p&gt; &#xA;&lt;h2&gt;What is in the box?&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://kitops.org/docs/modelkit/intro/&#34;&gt;ModelKit&lt;/a&gt;:&lt;/strong&gt; At the heart of KitOps is the ModelKit, an OCI-compliant packaging format for sharing all AI project artifacts: datasets, code, configurations, and models. By standardizing the way these components are packaged, versioned, and shared, ModelKits facilitate a more streamlined and collaborative development process that is compatible with any MLOps or DevOps tool.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://kitops.org/docs/kitfile/kf-overview/&#34;&gt;Kitfile&lt;/a&gt;:&lt;/strong&gt; A ModelKit is defined by a Kitfile - your AI/ML project&#39;s blueprint. It uses YAML to describe where to find each of the artifacts that will be packaged into the ModelKit. The Kitfile outlines what each part of the project is.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://kitops.org/docs/cli/cli-reference/&#34;&gt;Kit CLI&lt;/a&gt;:&lt;/strong&gt; The Kit CLI not only enables users to create, manage, run, and deploy ModelKits -- it lets you pull only the pieces you need. Just need the serialized model for deployment? Use &lt;code&gt;unpack --model&lt;/code&gt;, or maybe you just want the training datasets? &lt;code&gt;unpack --datasets&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Need Help?&lt;/h2&gt; &#xA;&lt;h3&gt;Join KitOps community&lt;/h3&gt; &#xA;&lt;p&gt;For support, release updates, and general KitOps discussion, please join the &lt;a href=&#34;https://discord.gg/Tapeh8agYy&#34;&gt;KitOps Discord&lt;/a&gt;. Follow &lt;a href=&#34;https://twitter.com/Kit_Ops&#34;&gt;KitOps on X&lt;/a&gt; for daily updates.&lt;/p&gt; &#xA;&lt;p&gt;If you need help there are several ways to reach our community and &lt;a href=&#34;https://raw.githubusercontent.com/kitops-ml/kitops/main/MAINTAINERS.md&#34;&gt;Maintainers&lt;/a&gt; outlined in our &lt;a href=&#34;https://raw.githubusercontent.com/kitops-ml/kitops/main/SUPPORT.md&#34;&gt;support doc&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Reporting Issues and Suggesting Features&lt;/h3&gt; &#xA;&lt;p&gt;Your insights help KitOps evolve as an open standard for AI/ML. We &lt;em&gt;deeply value&lt;/em&gt; the issues and feature requests we get from users in our community &lt;span&gt;💖&lt;/span&gt;. To contribute your thoughts,navigate to the &lt;strong&gt;Issues&lt;/strong&gt; tab and hitting the &lt;strong&gt;New Issue&lt;/strong&gt; green button. Our templates guide you in providing essential details to address your request effectively.&lt;/p&gt; &#xA;&lt;h3&gt;Joining the KitOps Contributors&lt;/h3&gt; &#xA;&lt;p&gt;We ❤️ our KitOps community and contributors. To learn more about the many ways you can contribute (you don&#39;t need to be a coder) and how to get started see our &lt;a href=&#34;https://raw.githubusercontent.com/kitops-ml/kitops/main/CONTRIBUTING.md&#34;&gt;Contributor&#39;s Guide&lt;/a&gt;. Please read our &lt;a href=&#34;https://raw.githubusercontent.com/kitops-ml/kitops/main/GOVERNANCE.md&#34;&gt;Governance&lt;/a&gt; and our &lt;a href=&#34;https://raw.githubusercontent.com/kitops-ml/kitops/main/CODE-OF-CONDUCT.md&#34;&gt;Code of Conduct&lt;/a&gt; before contributing.&lt;/p&gt; &#xA;&lt;h4&gt;📢 KitOps Community Calls (bi-weekly)&lt;/h4&gt; &#xA;&lt;p&gt;&lt;strong&gt;Wednesdays @ 13:30 – 14:00&lt;/strong&gt; &lt;strong&gt;Time zone&lt;/strong&gt;: America/Toronto &lt;strong&gt;Video call link&lt;/strong&gt;: &lt;a href=&#34;https://meet.google.com/zfq-uprp-csd&#34;&gt;Google Meet&lt;/a&gt; Or dial: (CA) +1 647-736-3184 PIN: 144 931 404# More phone numbers: &lt;a href=&#34;https://tel.meet/zfq-uprp-csd?pin=1283456375953&#34;&gt;Phone Numbers&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;A Community Built on Respect&lt;/h3&gt; &#xA;&lt;p&gt;At KitOps, inclusivity, empathy, and responsibility are at our core. Please read our &lt;a href=&#34;https://raw.githubusercontent.com/kitops-ml/kitops/main/CODE-OF-CONDUCT.md&#34;&gt;Code of Conduct&lt;/a&gt; to understand the values guiding our community.&lt;/p&gt; &#xA;&lt;h2&gt;Roadmap&lt;/h2&gt; &#xA;&lt;p&gt;We &lt;a href=&#34;https://raw.githubusercontent.com/kitops-ml/kitops/main/ROADMAP.md&#34;&gt;share our roadmap openly&lt;/a&gt; so anyone in the community can provide feedback and ideas. Let us know what you&#39;d like to see by pinging us on Discord or creating an issue.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;div align=&#34;center&#34; style=&#34;align-items: center;&#34;&gt; &#xA; &lt;a href=&#34;https://raw.githubusercontent.com/kitops-ml/kitops/main/#top&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Back_to_Top-black?style=for-the-badge&amp;amp;logo=github&amp;amp;logoColor=white&#34; alt=&#34;Back to Top&#34;&gt; &lt;/a&gt; &#xA;&lt;/div&gt;</summary>
  </entry>
</feed>