<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-09-01T01:38:51Z</updated>
  <subtitle>Weekly Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>evcc-io/evcc</title>
    <updated>2024-09-01T01:38:51Z</updated>
    <id>tag:github.com,2024-09-01:/evcc-io/evcc</id>
    <link href="https://github.com/evcc-io/evcc" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Sonne tanken ‚òÄÔ∏èüöò&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;evcc üöò‚òÄÔ∏è&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/evcc-io/evcc/actions/workflows/nightly.yml&#34;&gt;&lt;img src=&#34;https://github.com/evcc-io/evcc/actions/workflows/nightly.yml/badge.svg?sanitize=true&#34; alt=&#34;Build&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hosted.weblate.org/engage/evcc/&#34;&gt;&lt;img src=&#34;https://hosted.weblate.org/widgets/evcc/-/evcc/svg-badge.svg?sanitize=true&#34; alt=&#34;Translation&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://open.vscode.dev/evcc-io/evcc&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1?logo=visualstudiocode&amp;amp;label=&amp;amp;message=Open%20in%20VS%20Code&amp;amp;labelColor=2c2c32&amp;amp;color=007acc&amp;amp;logoColor=007acc&#34; alt=&#34;Open in Visual Studio Code&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cloudsmith.io/~evcc/packages/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/OSS%20hosting%20by-cloudsmith-blue?logo=cloudsmith&#34; alt=&#34;OSS hosting by cloudsmith&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/evcc-io/evcc/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/evcc-io/evcc.svg?sanitize=true&#34; alt=&#34;Latest Version&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;evcc is an extensible EV Charge Controller and home energy management system. Featured in &lt;a href=&#34;https://www.pv-magazine.de/2021/01/15/selbst-ist-der-groeoenlandhof-wallbox-ladesteuerung-selbst-gebaut/&#34;&gt;PV magazine&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/evcc-io/evcc/master/docs/screenshot.png&#34; alt=&#34;Screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;simple and clean user interface&lt;/li&gt; &#xA; &lt;li&gt;wide range of supported &lt;a href=&#34;https://docs.evcc.io/docs/devices/chargers&#34;&gt;chargers&lt;/a&gt;: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;ABL eMH1, Alfen (Eve), Bender (CC612/613), cFos (PowerBrain), Daheimladen, Ebee (Wallbox), Ensto (Chago Wallbox), &lt;a href=&#34;https://www.evse-wifi.de&#34;&gt;EVSEWifi/ smartWB&lt;/a&gt;, Garo (GLB, GLB+, LS4), go-eCharger, HardyBarth (eCB1, cPH1, cPH2), Heidelberg (Energy Control), Innogy (eBox), Juice (Charger Me), KEBA/BMW, Mennekes (Amedio, Amtron Premium/Xtra, Amtron ChargeConrol), older NRGkicks (before 2022/2023), NRGKick Gen2,&lt;a href=&#34;https://openwb.de/&#34;&gt;openWB (includes Pro)&lt;/a&gt;, Optec (Mobility One), PC Electric (includes Garo), Siemens, TechniSat (Technivolt), &lt;a href=&#34;https://www.warp-charger.com&#34;&gt;Tinkerforge Warp Charger&lt;/a&gt;, Ubitricity (Heinz), Vestel, Wallbe, Webasto (Live), Mobile Charger Connect and many more&lt;/li&gt; &#xA;   &lt;li&gt;EEBus support (Elli, PMCC)&lt;/li&gt; &#xA;   &lt;li&gt;experimental OCPP support&lt;/li&gt; &#xA;   &lt;li&gt;Build-your-own: Phoenix Contact (includes ESL Walli), &lt;a href=&#34;http://evracing.cz/simple-evse-wallbox&#34;&gt;EVSE DIN&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Smart-Home outlets: FritzDECT, Shelly, Tasmota, TP-Link&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;wide range of supported &lt;a href=&#34;https://docs.evcc.io/docs/devices/meters&#34;&gt;meters&lt;/a&gt; for grid, pv, battery and charger: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;ModBus: Eastron SDM, MPM3PM, ORNO WE, SBC ALE3 and many more, see &lt;a href=&#34;https://github.com/volkszaehler/mbmd#supported-devices&#34;&gt;https://github.com/volkszaehler/mbmd#supported-devices&lt;/a&gt; for a complete list&lt;/li&gt; &#xA;   &lt;li&gt;Integrated systems: SMA Sunny Home Manager and Energy Meter, KOSTAL Smart Energy Meter (KSEM, EMxx)&lt;/li&gt; &#xA;   &lt;li&gt;Sunspec-compatible inverter or home battery devices: Fronius, SMA, SolarEdge, KOSTAL, STECA, E3DC, ...&lt;/li&gt; &#xA;   &lt;li&gt;and various others: Discovergy, Tesla PowerWall, LG ESS HOME, OpenEMS (FENECON)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.evcc.io/docs/devices/vehicles&#34;&gt;vehicle&lt;/a&gt; integration (state of charge, remote charge, battery and preconditioning status): &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Audi, BMW, Citro√´n, Dacia, Fiat, Ford, Hyundai, Jaguar, Kia, Landrover, Mercedes-Benz, Mini, Nissan, Opel, Peugeot, Porsche, Renault, Seat, Smart, Skoda, Tesla, Volkswagen, Volvo, ...&lt;/li&gt; &#xA;   &lt;li&gt;Services: OVMS, Tronity&lt;/li&gt; &#xA;   &lt;li&gt;Scooters: Niu, &lt;del&gt;Silence&lt;/del&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.evcc.io/docs/reference/plugins&#34;&gt;plugins&lt;/a&gt; for integrating with any charger/ meter/ vehicle: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Modbus, HTTP, MQTT, Javascript, WebSockets and shell scripts&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;status &lt;a href=&#34;https://docs.evcc.io/docs/reference/configuration/messaging&#34;&gt;notifications&lt;/a&gt; using &lt;a href=&#34;https://telegram.org&#34;&gt;Telegram&lt;/a&gt;, &lt;a href=&#34;https://pushover.net&#34;&gt;PushOver&lt;/a&gt; and &lt;a href=&#34;https://containrrr.dev/shoutrrr/&#34;&gt;many more&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;logging using &lt;a href=&#34;https://www.influxdata.com&#34;&gt;InfluxDB&lt;/a&gt; and &lt;a href=&#34;https://grafana.com/grafana/&#34;&gt;Grafana&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;granular charge power control down to mA steps with supported chargers (labeled by e.g. smartWB as &lt;a href=&#34;https://board.evse-wifi.de/viewtopic.php?f=16&amp;amp;t=187&#34;&gt;OLC&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;REST and MQTT &lt;a href=&#34;https://docs.evcc.io/docs/reference/api&#34;&gt;APIs&lt;/a&gt; for integration with home automation systems&lt;/li&gt; &#xA; &lt;li&gt;Add-ons for &lt;a href=&#34;https://github.com/evcc-io/evcc-hassio-addon&#34;&gt;Home Assistant&lt;/a&gt; and &lt;a href=&#34;https://www.openhab.org/addons/bindings/evcc&#34;&gt;OpenHAB&lt;/a&gt; (not maintained by the evcc core team)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;You&#39;ll find everything you need in our &lt;a href=&#34;https://docs.evcc.io/&#34;&gt;documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Technical details on how to contribute, how to add translations and how to build evcc from source can be found &lt;a href=&#34;https://raw.githubusercontent.com/evcc-io/evcc/master/CONTRIBUTING.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://hosted.weblate.org/engage/evcc/&#34;&gt;&lt;img src=&#34;https://hosted.weblate.org/widgets/evcc/-/evcc/287x66-grey.png&#34; alt=&#34;Weblate Hosted&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Sponsorship&lt;/h2&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/evcc-io/evcc/master/docs/logo.png&#34; align=&#34;right&#34; width=&#34;150&#34;&gt; &#xA;&lt;p&gt;evcc believes in open source software. We&#39;re committed to provide best in class EV charging experience. Maintaining evcc consumes time and effort. With the vast amount of different devices to support, we depend on community and vendor support to keep evcc alive.&lt;/p&gt; &#xA;&lt;p&gt;While evcc is open source, we would also like to encourage vendors to provide open source hardware devices, public documentation and support open source projects like ours that provide additional value to otherwise closed hardware. Where this is not the case, evcc requires &#34;sponsor token&#34; to finance ongoing development and support of evcc.&lt;/p&gt; &#xA;&lt;p&gt;The personal sponsor token requires a &lt;a href=&#34;https://github.com/sponsors/evcc-io&#34;&gt;Github Sponsorship&lt;/a&gt; and can be requested at &lt;a href=&#34;https://sponsor.evcc.io/&#34;&gt;sponsor.evcc.io&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>go-resty/resty</title>
    <updated>2024-09-01T01:38:51Z</updated>
    <id>tag:github.com,2024-09-01:/go-resty/resty</id>
    <link href="https://github.com/go-resty/resty" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Simple HTTP and REST client library for Go&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;/p&gt;&#xA;&lt;h1 align=&#34;center&#34;&gt;Resty&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt;Simple HTTP and REST client library for Go (inspired by Ruby rest-client)&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/go-resty/resty/v2/#features&#34;&gt;Features&lt;/a&gt; section describes in detail about Resty capabilities&lt;/p&gt; &#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;/p&gt;&#xA;&lt;p align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/go-resty/resty/actions/workflows/ci.yml?query=branch%3Amaster&#34;&gt;&lt;img src=&#34;https://github.com/go-resty/resty/actions/workflows/ci.yml/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/go-resty/resty/branch/master&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/go-resty/resty/branch/master/graph/badge.svg?sanitize=true&#34; alt=&#34;Code Coverage&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/report/go-resty/resty&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/go-resty/resty&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/go-resty/resty/releases/latest&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/version-2.14.0-blue.svg?sanitize=true&#34; alt=&#34;Release Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pkg.go.dev/github.com/go-resty/resty/v2&#34;&gt;&lt;img src=&#34;https://pkg.go.dev/badge/github.com/go-resty/resty&#34; alt=&#34;GoDoc&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/go-resty/resty/v2/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/go-resty/resty.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/avelino/awesome-go&#34;&gt;&lt;img src=&#34;https://awesome.re/mentioned-badge.svg?sanitize=true&#34; alt=&#34;Mentioned in Awesome Go&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;/p&gt;&#xA;&lt;h4 align=&#34;center&#34;&gt;Resty Communication Channels&lt;/h4&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;a href=&#34;https://gitter.im/go_resty/community?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/go_resty/community.svg?sanitize=true&#34; alt=&#34;Chat on Gitter - Resty Community&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/go_resty&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/twitter-@go__resty-55acee.svg?sanitize=true&#34; alt=&#34;Twitter @go_resty&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;h2&gt;News&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;v2.14.0 &lt;a href=&#34;https://github.com/go-resty/resty/releases/tag/v2.14.0&#34;&gt;released&lt;/a&gt; and tagged on Aug 04, 2024.&lt;/li&gt; &#xA; &lt;li&gt;v2.0.0 &lt;a href=&#34;https://github.com/go-resty/resty/releases/tag/v2.0.0&#34;&gt;released&lt;/a&gt; and tagged on Jul 16, 2019.&lt;/li&gt; &#xA; &lt;li&gt;v1.12.0 &lt;a href=&#34;https://github.com/go-resty/resty/releases/tag/v1.12.0&#34;&gt;released&lt;/a&gt; and tagged on Feb 27, 2019.&lt;/li&gt; &#xA; &lt;li&gt;v1.0 released and tagged on Sep 25, 2017. - Resty&#39;s first version was released on Sep 15, 2015 then it grew gradually as a very handy and helpful library. Its been a two years since first release. I&#39;m very thankful to Resty users and its &lt;a href=&#34;https://github.com/go-resty/resty/graphs/contributors&#34;&gt;contributors&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;GET, POST, PUT, DELETE, HEAD, PATCH, OPTIONS, etc.&lt;/li&gt; &#xA; &lt;li&gt;Simple and chainable methods for settings and request&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/go-resty/resty/v2#Request&#34;&gt;Request&lt;/a&gt; Body can be &lt;code&gt;string&lt;/code&gt;, &lt;code&gt;[]byte&lt;/code&gt;, &lt;code&gt;struct&lt;/code&gt;, &lt;code&gt;map&lt;/code&gt;, &lt;code&gt;slice&lt;/code&gt; and &lt;code&gt;io.Reader&lt;/code&gt; too &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Auto detects &lt;code&gt;Content-Type&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Buffer less processing for &lt;code&gt;io.Reader&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Native &lt;code&gt;*http.Request&lt;/code&gt; instance may be accessed during middleware and request execution via &lt;code&gt;Request.RawRequest&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Request Body can be read multiple times via &lt;code&gt;Request.RawRequest.GetBody()&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/go-resty/resty/v2#Response&#34;&gt;Response&lt;/a&gt; object gives you more possibility &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Access as &lt;code&gt;[]byte&lt;/code&gt; array - &lt;code&gt;response.Body()&lt;/code&gt; OR Access as &lt;code&gt;string&lt;/code&gt; - &lt;code&gt;response.String()&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Know your &lt;code&gt;response.Time()&lt;/code&gt; and when we &lt;code&gt;response.ReceivedAt()&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Automatic marshal and unmarshal for &lt;code&gt;JSON&lt;/code&gt; and &lt;code&gt;XML&lt;/code&gt; content type &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Default is &lt;code&gt;JSON&lt;/code&gt;, if you supply &lt;code&gt;struct/map&lt;/code&gt; without header &lt;code&gt;Content-Type&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;For auto-unmarshal, refer to - &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Success scenario &lt;a href=&#34;https://pkg.go.dev/github.com/go-resty/resty/v2#Request.SetResult&#34;&gt;Request.SetResult()&lt;/a&gt; and &lt;a href=&#34;https://pkg.go.dev/github.com/go-resty/resty/v2#Response.Result&#34;&gt;Response.Result()&lt;/a&gt;.&lt;/li&gt; &#xA;     &lt;li&gt;Error scenario &lt;a href=&#34;https://pkg.go.dev/github.com/go-resty/resty/v2#Request.SetError&#34;&gt;Request.SetError()&lt;/a&gt; and &lt;a href=&#34;https://pkg.go.dev/github.com/go-resty/resty/v2#Response.Error&#34;&gt;Response.Error()&lt;/a&gt;.&lt;/li&gt; &#xA;     &lt;li&gt;Supports &lt;a href=&#34;https://tools.ietf.org/html/rfc7807&#34;&gt;RFC7807&lt;/a&gt; - &lt;code&gt;application/problem+json&lt;/code&gt; &amp;amp; &lt;code&gt;application/problem+xml&lt;/code&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Resty provides an option to override &lt;a href=&#34;https://raw.githubusercontent.com/go-resty/resty/v2/#override-json--xml-marshalunmarshal&#34;&gt;JSON Marshal/Unmarshal and XML Marshal/Unmarshal&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Easy to upload one or more file(s) via &lt;code&gt;multipart/form-data&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Auto detects file content type&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Request URL &lt;a href=&#34;https://pkg.go.dev/github.com/go-resty/resty/v2#Request.SetPathParams&#34;&gt;Path Params (aka URI Params)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Backoff Retry Mechanism with retry condition function &lt;a href=&#34;https://raw.githubusercontent.com/go-resty/resty/v2/retry_test.go&#34;&gt;reference&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Resty client HTTP &amp;amp; REST &lt;a href=&#34;https://pkg.go.dev/github.com/go-resty/resty/v2#Client.OnBeforeRequest&#34;&gt;Request&lt;/a&gt; and &lt;a href=&#34;https://pkg.go.dev/github.com/go-resty/resty/v2#Client.OnAfterResponse&#34;&gt;Response&lt;/a&gt; middlewares&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Request.SetContext&lt;/code&gt; supported&lt;/li&gt; &#xA; &lt;li&gt;Authorization option of &lt;code&gt;BasicAuth&lt;/code&gt; and &lt;code&gt;Bearer&lt;/code&gt; token&lt;/li&gt; &#xA; &lt;li&gt;Set request &lt;code&gt;ContentLength&lt;/code&gt; value for all request or particular request&lt;/li&gt; &#xA; &lt;li&gt;Custom &lt;a href=&#34;https://pkg.go.dev/github.com/go-resty/resty/v2#Client.SetRootCertificate&#34;&gt;Root Certificates&lt;/a&gt; and Client &lt;a href=&#34;https://pkg.go.dev/github.com/go-resty/resty/v2#Client.SetCertificates&#34;&gt;Certificates&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Download/Save HTTP response directly into File, like &lt;code&gt;curl -o&lt;/code&gt; flag. See &lt;a href=&#34;https://pkg.go.dev/github.com/go-resty/resty/v2#Client.SetOutputDirectory&#34;&gt;SetOutputDirectory&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://pkg.go.dev/github.com/go-resty/resty/v2#Request.SetOutput&#34;&gt;SetOutput&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Cookies for your request and CookieJar support&lt;/li&gt; &#xA; &lt;li&gt;SRV Record based request instead of Host URL&lt;/li&gt; &#xA; &lt;li&gt;Client settings like &lt;code&gt;Timeout&lt;/code&gt;, &lt;code&gt;RedirectPolicy&lt;/code&gt;, &lt;code&gt;Proxy&lt;/code&gt;, &lt;code&gt;TLSClientConfig&lt;/code&gt;, &lt;code&gt;Transport&lt;/code&gt;, etc.&lt;/li&gt; &#xA; &lt;li&gt;Optionally allows GET request with payload, see &lt;a href=&#34;https://pkg.go.dev/github.com/go-resty/resty/v2#Client.SetAllowGetMethodPayload&#34;&gt;SetAllowGetMethodPayload&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Supports registering external JSON library into resty, see &lt;a href=&#34;https://github.com/go-resty/resty/issues/76#issuecomment-314015250&#34;&gt;how to use&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Exposes Response reader without reading response (no auto-unmarshaling) if need be, see &lt;a href=&#34;https://github.com/go-resty/resty/issues/87#issuecomment-322100604&#34;&gt;how to use&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Option to specify expected &lt;code&gt;Content-Type&lt;/code&gt; when response &lt;code&gt;Content-Type&lt;/code&gt; header missing. Refer to &lt;a href=&#34;https://github.com/go-resty/resty/issues/92&#34;&gt;#92&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Resty design &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Have client level settings &amp;amp; options and also override at Request level if you want to&lt;/li&gt; &#xA;   &lt;li&gt;Request and Response middleware&lt;/li&gt; &#xA;   &lt;li&gt;Create Multiple clients if you want to &lt;code&gt;resty.New()&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Supports &lt;code&gt;http.RoundTripper&lt;/code&gt; implementation, see &lt;a href=&#34;https://pkg.go.dev/github.com/go-resty/resty/v2#Client.SetTransport&#34;&gt;SetTransport&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;goroutine concurrent safe&lt;/li&gt; &#xA;   &lt;li&gt;Resty Client trace, see &lt;a href=&#34;https://pkg.go.dev/github.com/go-resty/resty/v2#Client.EnableTrace&#34;&gt;Client.EnableTrace&lt;/a&gt; and &lt;a href=&#34;https://pkg.go.dev/github.com/go-resty/resty/v2#Request.EnableTrace&#34;&gt;Request.EnableTrace&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Since v2.4.0, trace info contains a &lt;code&gt;RequestAttempt&lt;/code&gt; value, and the &lt;code&gt;Request&lt;/code&gt; object contains an &lt;code&gt;Attempt&lt;/code&gt; attribute&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Supports &lt;code&gt;GenerateCurlCommand&lt;/code&gt;(&lt;strong&gt;You should turn on &lt;code&gt;EnableTrace&lt;/code&gt;&lt;/strong&gt;, otherwise the curl command will not contain the body)&lt;/li&gt; &#xA;   &lt;li&gt;Debug mode - clean and informative logging presentation&lt;/li&gt; &#xA;   &lt;li&gt;Gzip - Go does it automatically also resty has fallback handling too&lt;/li&gt; &#xA;   &lt;li&gt;Works fine with &lt;code&gt;HTTP/2&lt;/code&gt; and &lt;code&gt;HTTP/1.1&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/go-resty/resty/v2/#bazel-support&#34;&gt;Bazel support&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Easily mock Resty for testing, &lt;a href=&#34;https://raw.githubusercontent.com/go-resty/resty/v2/#mocking-http-requests-using-httpmock-library&#34;&gt;for e.g.&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Well tested client library&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Included Batteries&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Redirect Policies - see &lt;a href=&#34;https://raw.githubusercontent.com/go-resty/resty/v2/#redirect-policy&#34;&gt;how to use&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;NoRedirectPolicy&lt;/li&gt; &#xA;   &lt;li&gt;FlexibleRedirectPolicy&lt;/li&gt; &#xA;   &lt;li&gt;DomainCheckRedirectPolicy&lt;/li&gt; &#xA;   &lt;li&gt;etc. &lt;a href=&#34;https://raw.githubusercontent.com/go-resty/resty/v2/redirect.go&#34;&gt;more info&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Retry Mechanism &lt;a href=&#34;https://raw.githubusercontent.com/go-resty/resty/v2/#retries&#34;&gt;how to use&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Backoff Retry&lt;/li&gt; &#xA;   &lt;li&gt;Conditional Retry&lt;/li&gt; &#xA;   &lt;li&gt;Since v2.6.0, Retry Hooks - &lt;a href=&#34;https://pkg.go.dev/github.com/go-resty/resty/v2#Client.AddRetryHook&#34;&gt;Client&lt;/a&gt;, &lt;a href=&#34;https://pkg.go.dev/github.com/go-resty/resty/v2#Request.AddRetryHook&#34;&gt;Request&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;SRV Record based request instead of Host URL &lt;a href=&#34;https://raw.githubusercontent.com/go-resty/resty/v2/resty_test.go#L1412&#34;&gt;how to use&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;etc (upcoming - throw your idea&#39;s &lt;a href=&#34;https://github.com/go-resty/resty/issues&#34;&gt;here&lt;/a&gt;).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Supported Go Versions&lt;/h4&gt; &#xA;&lt;p&gt;Recommended to use &lt;code&gt;go1.16&lt;/code&gt; and above.&lt;/p&gt; &#xA;&lt;p&gt;Initially Resty started supporting &lt;code&gt;go modules&lt;/code&gt; since &lt;code&gt;v1.10.0&lt;/code&gt; release.&lt;/p&gt; &#xA;&lt;p&gt;Starting Resty v2 and higher versions, it fully embraces &lt;a href=&#34;https://github.com/golang/go/wiki/Modules&#34;&gt;go modules&lt;/a&gt; package release. It requires a Go version capable of understanding &lt;code&gt;/vN&lt;/code&gt; suffixed imports:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;1.9.7+&lt;/li&gt; &#xA; &lt;li&gt;1.10.3+&lt;/li&gt; &#xA; &lt;li&gt;1.11+&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;It might be beneficial for your project &lt;span&gt;üòÑ&lt;/span&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Resty author also published following projects for Go Community.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://aahframework.org&#34;&gt;aah framework&lt;/a&gt; - A secure, flexible, rapid Go web framework.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://thumbai.app&#34;&gt;THUMBAI&lt;/a&gt; - Go Mod Repository, Go Vanity Service and Simple Proxy Server.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jeevatkm/go-model&#34;&gt;go-model&lt;/a&gt; - Robust &amp;amp; Easy to use model mapper and utility methods for Go &lt;code&gt;struct&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Go Modules&#xA;require github.com/go-resty/resty/v2 v2.11.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;The following samples will assist you to become as comfortable as possible with resty library.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Import resty into your code and refer it as `resty`.&#xA;import &#34;github.com/go-resty/resty/v2&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Simple POST&lt;/h4&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Refer: &lt;a href=&#34;https://github.com/go-resty/resty/raw/v2/examples/debug_curl_test.go&#34;&gt;debug_curl_test.go&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Create a Resty Client&#xA;client := resty.New()&#xA;&#xA;resp, err := client.R().&#xA;    EnableTrace(). // You should turn on `EnableTrace`, otherwise the curl command will not contain the body&#xA;    SetBody(map[string]string{&#34;name&#34;: &#34;Alex&#34;}).&#xA;    Post(&#34;https://httpbin.org/post&#34;)&#xA;curlCmdExecuted := resp.Request.GenerateCurlCommand()&#xA;&#xA;// Explore curl command&#xA;fmt.Println(&#34;Curl Command:\n  &#34;, curlCmdExecuted+&#34;\n&#34;)&#xA;&#xA;// Explore response object&#xA;fmt.Println(&#34;Response Info:&#34;)&#xA;fmt.Println(&#34;  Error      :&#34;, err)&#xA;fmt.Println(&#34;  Status Code:&#34;, resp.StatusCode())&#xA;fmt.Println(&#34;  Status     :&#34;, resp.Status())&#xA;fmt.Println(&#34;  Proto      :&#34;, resp.Proto())&#xA;fmt.Println(&#34;  Time       :&#34;, resp.Time())&#xA;fmt.Println(&#34;  Received At:&#34;, resp.ReceivedAt())&#xA;fmt.Println(&#34;  Body       :\n&#34;, resp)&#xA;fmt.Println()&#xA;&#xA;// Explore trace info&#xA;fmt.Println(&#34;Request Trace Info:&#34;)&#xA;ti := resp.Request.TraceInfo()&#xA;fmt.Println(&#34;  DNSLookup     :&#34;, ti.DNSLookup)&#xA;fmt.Println(&#34;  ConnTime      :&#34;, ti.ConnTime)&#xA;fmt.Println(&#34;  TCPConnTime   :&#34;, ti.TCPConnTime)&#xA;fmt.Println(&#34;  TLSHandshake  :&#34;, ti.TLSHandshake)&#xA;fmt.Println(&#34;  ServerTime    :&#34;, ti.ServerTime)&#xA;fmt.Println(&#34;  ResponseTime  :&#34;, ti.ResponseTime)&#xA;fmt.Println(&#34;  TotalTime     :&#34;, ti.TotalTime)&#xA;fmt.Println(&#34;  IsConnReused  :&#34;, ti.IsConnReused)&#xA;fmt.Println(&#34;  IsConnWasIdle :&#34;, ti.IsConnWasIdle)&#xA;fmt.Println(&#34;  ConnIdleTime  :&#34;, ti.ConnIdleTime)&#xA;fmt.Println(&#34;  RequestAttempt:&#34;, ti.RequestAttempt)&#xA;fmt.Println(&#34;  RemoteAddr    :&#34;, ti.RemoteAddr.String())&#xA;&#xA;/* Output&#xA;Curl Command:&#xA;   curl -X POST -H &#39;Content-Type: application/json&#39; -H &#39;User-Agent: go-resty/2.14.0 (https://github.com/go-resty/resty)&#39; -d &#39;{&#34;name&#34;:&#34;Alex&#34;}&#39; https://httpbin.org/post&#xA;&#xA;Response Info:&#xA;  Error      : &amp;lt;nil&amp;gt;&#xA;  Status Code: 200&#xA;  Status     : 200 OK&#xA;  Proto      : HTTP/2.0&#xA;  Time       : 457.034718ms&#xA;  Received At: 2024-08-09 13:02:57.187544 +0800 CST m=+1.304888501&#xA;  Body       :&#xA; {&#xA;  &#34;args&#34;: {}, &#xA;  &#34;data&#34;: &#34;{\&#34;name\&#34;:\&#34;Alex\&#34;}&#34;, &#xA;  &#34;files&#34;: {}, &#xA;  &#34;form&#34;: {}, &#xA;  &#34;headers&#34;: {&#xA;    &#34;Accept-Encoding&#34;: &#34;gzip&#34;, &#xA;    &#34;Content-Length&#34;: &#34;15&#34;, &#xA;    &#34;Content-Type&#34;: &#34;application/json&#34;, &#xA;    &#34;Host&#34;: &#34;httpbin.org&#34;, &#xA;    &#34;User-Agent&#34;: &#34;go-resty/2.14.0 (https://github.com/go-resty/resty)&#34;, &#xA;    &#34;X-Amzn-Trace-Id&#34;: &#34;Root=1-66b5a301-567c83c86562abd3092f5e19&#34;&#xA;  }, &#xA;  &#34;json&#34;: {&#xA;    &#34;name&#34;: &#34;Alex&#34;&#xA;  }, &#xA;  &#34;origin&#34;: &#34;0.0.0.0&#34;,&#xA;  &#34;url&#34;: &#34;https://httpbin.org/post&#34;&#xA;}&#xA;&#xA;Request Trace Info:&#xA;  DNSLookup     : 4.074657ms&#xA;  ConnTime      : 381.709936ms&#xA;  TCPConnTime   : 77.428048ms&#xA;  TLSHandshake  : 299.623597ms&#xA;  ServerTime    : 75.414703ms&#xA;  ResponseTime  : 79.337¬µs&#xA;  TotalTime     : 457.034718ms&#xA;  IsConnReused  : false&#xA;  IsConnWasIdle : false&#xA;  ConnIdleTime  : 0s&#xA;  RequestAttempt: 1&#xA;  RemoteAddr    : 3.221.81.55:443&#xA;*/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Enhanced GET&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Create a Resty Client&#xA;client := resty.New()&#xA;&#xA;resp, err := client.R().&#xA;      SetQueryParams(map[string]string{&#xA;          &#34;page_no&#34;: &#34;1&#34;,&#xA;          &#34;limit&#34;: &#34;20&#34;,&#xA;          &#34;sort&#34;:&#34;name&#34;,&#xA;          &#34;order&#34;: &#34;asc&#34;,&#xA;          &#34;random&#34;:strconv.FormatInt(time.Now().Unix(), 10),&#xA;      }).&#xA;      SetHeader(&#34;Accept&#34;, &#34;application/json&#34;).&#xA;      SetAuthToken(&#34;BC594900518B4F7EAC75BD37F019E08FBC594900518B4F7EAC75BD37F019E08F&#34;).&#xA;      Get(&#34;/search_result&#34;)&#xA;&#xA;&#xA;// Sample of using Request.SetQueryString method&#xA;resp, err := client.R().&#xA;      SetQueryString(&#34;productId=232&amp;amp;template=fresh-sample&amp;amp;cat=resty&amp;amp;source=google&amp;amp;kw=buy a lot more&#34;).&#xA;      SetHeader(&#34;Accept&#34;, &#34;application/json&#34;).&#xA;      SetAuthToken(&#34;BC594900518B4F7EAC75BD37F019E08FBC594900518B4F7EAC75BD37F019E08F&#34;).&#xA;      Get(&#34;/show_product&#34;)&#xA;&#xA;&#xA;// If necessary, you can force response content type to tell Resty to parse a JSON response into your struct&#xA;resp, err := client.R().&#xA;      SetResult(result).&#xA;      ForceContentType(&#34;application/json&#34;).&#xA;      Get(&#34;v2/alpine/manifests/latest&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Various POST method combinations&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Create a Resty Client&#xA;client := resty.New()&#xA;&#xA;// POST JSON string&#xA;// No need to set content type, if you have client level setting&#xA;resp, err := client.R().&#xA;      SetHeader(&#34;Content-Type&#34;, &#34;application/json&#34;).&#xA;      SetBody(`{&#34;username&#34;:&#34;testuser&#34;, &#34;password&#34;:&#34;testpass&#34;}`).&#xA;      SetResult(&amp;amp;AuthSuccess{}).    // or SetResult(AuthSuccess{}).&#xA;      Post(&#34;https://myapp.com/login&#34;)&#xA;&#xA;// POST []byte array&#xA;// No need to set content type, if you have client level setting&#xA;resp, err := client.R().&#xA;      SetHeader(&#34;Content-Type&#34;, &#34;application/json&#34;).&#xA;      SetBody([]byte(`{&#34;username&#34;:&#34;testuser&#34;, &#34;password&#34;:&#34;testpass&#34;}`)).&#xA;      SetResult(&amp;amp;AuthSuccess{}).    // or SetResult(AuthSuccess{}).&#xA;      Post(&#34;https://myapp.com/login&#34;)&#xA;&#xA;// POST Struct, default is JSON content type. No need to set one&#xA;resp, err := client.R().&#xA;      SetBody(User{Username: &#34;testuser&#34;, Password: &#34;testpass&#34;}).&#xA;      SetResult(&amp;amp;AuthSuccess{}).    // or SetResult(AuthSuccess{}).&#xA;      SetError(&amp;amp;AuthError{}).       // or SetError(AuthError{}).&#xA;      Post(&#34;https://myapp.com/login&#34;)&#xA;&#xA;// POST Map, default is JSON content type. No need to set one&#xA;resp, err := client.R().&#xA;      SetBody(map[string]interface{}{&#34;username&#34;: &#34;testuser&#34;, &#34;password&#34;: &#34;testpass&#34;}).&#xA;      SetResult(&amp;amp;AuthSuccess{}).    // or SetResult(AuthSuccess{}).&#xA;      SetError(&amp;amp;AuthError{}).       // or SetError(AuthError{}).&#xA;      Post(&#34;https://myapp.com/login&#34;)&#xA;&#xA;// POST of raw bytes for file upload. For example: upload file to Dropbox&#xA;fileBytes, _ := os.ReadFile(&#34;/Users/jeeva/mydocument.pdf&#34;)&#xA;&#xA;// See we are not setting content-type header, since go-resty automatically detects Content-Type for you&#xA;resp, err := client.R().&#xA;      SetBody(fileBytes).&#xA;      SetContentLength(true).          // Dropbox expects this value&#xA;      SetAuthToken(&#34;&amp;lt;your-auth-token&amp;gt;&#34;).&#xA;      SetError(&amp;amp;DropboxError{}).       // or SetError(DropboxError{}).&#xA;      Post(&#34;https://content.dropboxapi.com/1/files_put/auto/resty/mydocument.pdf&#34;) // for upload Dropbox supports PUT too&#xA;&#xA;// Note: resty detects Content-Type for request body/payload if content type header is not set.&#xA;//   * For struct and map data type defaults to &#39;application/json&#39;&#xA;//   * Fallback is plain text content type&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Sample PUT&lt;/h4&gt; &#xA;&lt;p&gt;You can use various combinations of &lt;code&gt;PUT&lt;/code&gt; method call like demonstrated for &lt;code&gt;POST&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Note: This is one sample of PUT method usage, refer POST for more combination&#xA;&#xA;// Create a Resty Client&#xA;client := resty.New()&#xA;&#xA;// Request goes as JSON content type&#xA;// No need to set auth token, error, if you have client level settings&#xA;resp, err := client.R().&#xA;      SetBody(Article{&#xA;        Title: &#34;go-resty&#34;,&#xA;        Content: &#34;This is my article content, oh ya!&#34;,&#xA;        Author: &#34;Jeevanandam M&#34;,&#xA;        Tags: []string{&#34;article&#34;, &#34;sample&#34;, &#34;resty&#34;},&#xA;      }).&#xA;      SetAuthToken(&#34;C6A79608-782F-4ED0-A11D-BD82FAD829CD&#34;).&#xA;      SetError(&amp;amp;Error{}).       // or SetError(Error{}).&#xA;      Put(&#34;https://myapp.com/article/1234&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Sample PATCH&lt;/h4&gt; &#xA;&lt;p&gt;You can use various combinations of &lt;code&gt;PATCH&lt;/code&gt; method call like demonstrated for &lt;code&gt;POST&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Note: This is one sample of PUT method usage, refer POST for more combination&#xA;&#xA;// Create a Resty Client&#xA;client := resty.New()&#xA;&#xA;// Request goes as JSON content type&#xA;// No need to set auth token, error, if you have client level settings&#xA;resp, err := client.R().&#xA;      SetBody(Article{&#xA;        Tags: []string{&#34;new tag1&#34;, &#34;new tag2&#34;},&#xA;      }).&#xA;      SetAuthToken(&#34;C6A79608-782F-4ED0-A11D-BD82FAD829CD&#34;).&#xA;      SetError(&amp;amp;Error{}).       // or SetError(Error{}).&#xA;      Patch(&#34;https://myapp.com/articles/1234&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Sample DELETE, HEAD, OPTIONS&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Create a Resty Client&#xA;client := resty.New()&#xA;&#xA;// DELETE a article&#xA;// No need to set auth token, error, if you have client level settings&#xA;resp, err := client.R().&#xA;      SetAuthToken(&#34;C6A79608-782F-4ED0-A11D-BD82FAD829CD&#34;).&#xA;      SetError(&amp;amp;Error{}).       // or SetError(Error{}).&#xA;      Delete(&#34;https://myapp.com/articles/1234&#34;)&#xA;&#xA;// DELETE a articles with payload/body as a JSON string&#xA;// No need to set auth token, error, if you have client level settings&#xA;resp, err := client.R().&#xA;      SetAuthToken(&#34;C6A79608-782F-4ED0-A11D-BD82FAD829CD&#34;).&#xA;      SetError(&amp;amp;Error{}).       // or SetError(Error{}).&#xA;      SetHeader(&#34;Content-Type&#34;, &#34;application/json&#34;).&#xA;      SetBody(`{article_ids: [1002, 1006, 1007, 87683, 45432] }`).&#xA;      Delete(&#34;https://myapp.com/articles&#34;)&#xA;&#xA;// HEAD of resource&#xA;// No need to set auth token, if you have client level settings&#xA;resp, err := client.R().&#xA;      SetAuthToken(&#34;C6A79608-782F-4ED0-A11D-BD82FAD829CD&#34;).&#xA;      Head(&#34;https://myapp.com/videos/hi-res-video&#34;)&#xA;&#xA;// OPTIONS of resource&#xA;// No need to set auth token, if you have client level settings&#xA;resp, err := client.R().&#xA;      SetAuthToken(&#34;C6A79608-782F-4ED0-A11D-BD82FAD829CD&#34;).&#xA;      Options(&#34;https://myapp.com/servers/nyc-dc-01&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Override JSON &amp;amp; XML Marshal/Unmarshal&lt;/h4&gt; &#xA;&lt;p&gt;User could register choice of JSON/XML library into resty or write your own. By default resty registers standard &lt;code&gt;encoding/json&lt;/code&gt; and &lt;code&gt;encoding/xml&lt;/code&gt; respectively.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Example of registering json-iterator&#xA;import jsoniter &#34;github.com/json-iterator/go&#34;&#xA;&#xA;json := jsoniter.ConfigCompatibleWithStandardLibrary&#xA;&#xA;client := resty.New().&#xA;    SetJSONMarshaler(json.Marshal).&#xA;    SetJSONUnmarshaler(json.Unmarshal)&#xA;&#xA;// similarly user could do for XML too with -&#xA;client.SetXMLMarshaler(xml.Marshal).&#xA;    SetXMLUnmarshaler(xml.Unmarshal)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Multipart File(s) upload&lt;/h3&gt; &#xA;&lt;h4&gt;Using io.Reader&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;profileImgBytes, _ := os.ReadFile(&#34;/Users/jeeva/test-img.png&#34;)&#xA;notesBytes, _ := os.ReadFile(&#34;/Users/jeeva/text-file.txt&#34;)&#xA;&#xA;// Create a Resty Client&#xA;client := resty.New()&#xA;&#xA;resp, err := client.R().&#xA;      SetFileReader(&#34;profile_img&#34;, &#34;test-img.png&#34;, bytes.NewReader(profileImgBytes)).&#xA;      SetFileReader(&#34;notes&#34;, &#34;text-file.txt&#34;, bytes.NewReader(notesBytes)).&#xA;      SetFormData(map[string]string{&#xA;          &#34;first_name&#34;: &#34;Jeevanandam&#34;,&#xA;          &#34;last_name&#34;: &#34;M&#34;,&#xA;      }).&#xA;      Post(&#34;http://myapp.com/upload&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Using File directly from Path&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Create a Resty Client&#xA;client := resty.New()&#xA;&#xA;// Single file scenario&#xA;resp, err := client.R().&#xA;      SetFile(&#34;profile_img&#34;, &#34;/Users/jeeva/test-img.png&#34;).&#xA;      Post(&#34;http://myapp.com/upload&#34;)&#xA;&#xA;// Multiple files scenario&#xA;resp, err := client.R().&#xA;      SetFiles(map[string]string{&#xA;        &#34;profile_img&#34;: &#34;/Users/jeeva/test-img.png&#34;,&#xA;        &#34;notes&#34;: &#34;/Users/jeeva/text-file.txt&#34;,&#xA;      }).&#xA;      Post(&#34;http://myapp.com/upload&#34;)&#xA;&#xA;// Multipart of form fields and files&#xA;resp, err := client.R().&#xA;      SetFiles(map[string]string{&#xA;        &#34;profile_img&#34;: &#34;/Users/jeeva/test-img.png&#34;,&#xA;        &#34;notes&#34;: &#34;/Users/jeeva/text-file.txt&#34;,&#xA;      }).&#xA;      SetFormData(map[string]string{&#xA;        &#34;first_name&#34;: &#34;Jeevanandam&#34;,&#xA;        &#34;last_name&#34;: &#34;M&#34;,&#xA;        &#34;zip_code&#34;: &#34;00001&#34;,&#xA;        &#34;city&#34;: &#34;my city&#34;,&#xA;        &#34;access_token&#34;: &#34;C6A79608-782F-4ED0-A11D-BD82FAD829CD&#34;,&#xA;      }).&#xA;      Post(&#34;http://myapp.com/profile&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Sample Form submission&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Create a Resty Client&#xA;client := resty.New()&#xA;&#xA;// just mentioning about POST as an example with simple flow&#xA;// User Login&#xA;resp, err := client.R().&#xA;      SetFormData(map[string]string{&#xA;        &#34;username&#34;: &#34;jeeva&#34;,&#xA;        &#34;password&#34;: &#34;mypass&#34;,&#xA;      }).&#xA;      Post(&#34;http://myapp.com/login&#34;)&#xA;&#xA;// Followed by profile update&#xA;resp, err := client.R().&#xA;      SetFormData(map[string]string{&#xA;        &#34;first_name&#34;: &#34;Jeevanandam&#34;,&#xA;        &#34;last_name&#34;: &#34;M&#34;,&#xA;        &#34;zip_code&#34;: &#34;00001&#34;,&#xA;        &#34;city&#34;: &#34;new city update&#34;,&#xA;      }).&#xA;      Post(&#34;http://myapp.com/profile&#34;)&#xA;&#xA;// Multi value form data&#xA;criteria := url.Values{&#xA;  &#34;search_criteria&#34;: []string{&#34;book&#34;, &#34;glass&#34;, &#34;pencil&#34;},&#xA;}&#xA;resp, err := client.R().&#xA;      SetFormDataFromValues(criteria).&#xA;      Post(&#34;http://myapp.com/search&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Save HTTP Response into File&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Create a Resty Client&#xA;client := resty.New()&#xA;&#xA;// Setting output directory path, If directory not exists then resty creates one!&#xA;// This is optional one, if you&#39;re planning using absolute path in&#xA;// `Request.SetOutput` and can used together.&#xA;client.SetOutputDirectory(&#34;/Users/jeeva/Downloads&#34;)&#xA;&#xA;// HTTP response gets saved into file, similar to curl -o flag&#xA;_, err := client.R().&#xA;          SetOutput(&#34;plugin/ReplyWithHeader-v5.1-beta.zip&#34;).&#xA;          Get(&#34;http://bit.ly/1LouEKr&#34;)&#xA;&#xA;// OR using absolute path&#xA;// Note: output directory path is not used for absolute path&#xA;_, err := client.R().&#xA;          SetOutput(&#34;/MyDownloads/plugin/ReplyWithHeader-v5.1-beta.zip&#34;).&#xA;          Get(&#34;http://bit.ly/1LouEKr&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Request URL Path Params&lt;/h4&gt; &#xA;&lt;p&gt;Resty provides easy to use dynamic request URL path params. Params can be set at client and request level. Client level params value can be overridden at request level.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Create a Resty Client&#xA;client := resty.New()&#xA;&#xA;client.R().SetPathParams(map[string]string{&#xA;   &#34;userId&#34;: &#34;sample@sample.com&#34;,&#xA;   &#34;subAccountId&#34;: &#34;100002&#34;,&#xA;}).&#xA;Get(&#34;/v1/users/{userId}/{subAccountId}/details&#34;)&#xA;&#xA;// Result:&#xA;//   Composed URL - /v1/users/sample@sample.com/100002/details&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Request and Response Middleware&lt;/h4&gt; &#xA;&lt;p&gt;Resty provides middleware ability to manipulate for Request and Response. It is more flexible than callback approach.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Create a Resty Client&#xA;client := resty.New()&#xA;&#xA;// Registering Request Middleware&#xA;client.OnBeforeRequest(func(c *resty.Client, req *resty.Request) error {&#xA;    // Now you have access to Client and current Request object&#xA;    // manipulate it as per your need&#xA;&#xA;    return nil  // if its success otherwise return error&#xA;  })&#xA;&#xA;// Registering Response Middleware&#xA;client.OnAfterResponse(func(c *resty.Client, resp *resty.Response) error {&#xA;    // Now you have access to Client and current Response object&#xA;    // manipulate it as per your need&#xA;&#xA;    return nil  // if its success otherwise return error&#xA;  })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;OnError Hooks&lt;/h4&gt; &#xA;&lt;p&gt;Resty provides OnError hooks that may be called because:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The client failed to send the request due to connection timeout, TLS handshake failure, etc...&lt;/li&gt; &#xA; &lt;li&gt;The request was retried the maximum amount of times, and still failed.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If there was a response from the server, the original error will be wrapped in &lt;code&gt;*resty.ResponseError&lt;/code&gt; which contains the last response received.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Create a Resty Client&#xA;client := resty.New()&#xA;&#xA;client.OnError(func(req *resty.Request, err error) {&#xA;  if v, ok := err.(*resty.ResponseError); ok {&#xA;    // v.Response contains the last response from the server&#xA;    // v.Err contains the original error&#xA;  }&#xA;  // Log the error, increment a metric, etc...&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Redirect Policy&lt;/h4&gt; &#xA;&lt;p&gt;Resty provides few ready to use redirect policy(s) also it supports multiple policies together.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Create a Resty Client&#xA;client := resty.New()&#xA;&#xA;// Assign Client Redirect Policy. Create one as per you need&#xA;client.SetRedirectPolicy(resty.FlexibleRedirectPolicy(15))&#xA;&#xA;// Wanna multiple policies such as redirect count, domain name check, etc&#xA;client.SetRedirectPolicy(resty.FlexibleRedirectPolicy(20),&#xA;                        resty.DomainCheckRedirectPolicy(&#34;host1.com&#34;, &#34;host2.org&#34;, &#34;host3.net&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Custom Redirect Policy&lt;/h5&gt; &#xA;&lt;p&gt;Implement &lt;a href=&#34;https://raw.githubusercontent.com/go-resty/resty/v2/redirect.go#L20&#34;&gt;RedirectPolicy&lt;/a&gt; interface and register it with resty client. Have a look &lt;a href=&#34;https://raw.githubusercontent.com/go-resty/resty/v2/redirect.go&#34;&gt;redirect.go&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Create a Resty Client&#xA;client := resty.New()&#xA;&#xA;// Using raw func into resty.SetRedirectPolicy&#xA;client.SetRedirectPolicy(resty.RedirectPolicyFunc(func(req *http.Request, via []*http.Request) error {&#xA;  // Implement your logic here&#xA;&#xA;  // return nil for continue redirect otherwise return error to stop/prevent redirect&#xA;  return nil&#xA;}))&#xA;&#xA;//---------------------------------------------------&#xA;&#xA;// Using struct create more flexible redirect policy&#xA;type CustomRedirectPolicy struct {&#xA;  // variables goes here&#xA;}&#xA;&#xA;func (c *CustomRedirectPolicy) Apply(req *http.Request, via []*http.Request) error {&#xA;  // Implement your logic here&#xA;&#xA;  // return nil for continue redirect otherwise return error to stop/prevent redirect&#xA;  return nil&#xA;}&#xA;&#xA;// Registering in resty&#xA;client.SetRedirectPolicy(CustomRedirectPolicy{/* initialize variables */})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Custom Root Certificates and Client Certificates&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Create a Resty Client&#xA;client := resty.New()&#xA;&#xA;// Custom Root certificates, just supply .pem file.&#xA;// you can add one or more root certificates, its get appended&#xA;client.SetRootCertificate(&#34;/path/to/root/pemFile1.pem&#34;)&#xA;client.SetRootCertificate(&#34;/path/to/root/pemFile2.pem&#34;)&#xA;// ... and so on!&#xA;&#xA;// Adding Client Certificates, you add one or more certificates&#xA;// Sample for creating certificate object&#xA;// Parsing public/private key pair from a pair of files. The files must contain PEM encoded data.&#xA;cert1, err := tls.LoadX509KeyPair(&#34;certs/client.pem&#34;, &#34;certs/client.key&#34;)&#xA;if err != nil {&#xA;  log.Fatalf(&#34;ERROR client certificate: %s&#34;, err)&#xA;}&#xA;// ...&#xA;&#xA;// You add one or more certificates&#xA;client.SetCertificates(cert1, cert2, cert3)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Custom Root Certificates and Client Certificates from string&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Custom Root certificates from string&#xA;// You can pass you certificates through env variables as strings&#xA;// you can add one or more root certificates, its get appended&#xA;client.SetRootCertificateFromString(&#34;-----BEGIN CERTIFICATE-----content-----END CERTIFICATE-----&#34;)&#xA;client.SetRootCertificateFromString(&#34;-----BEGIN CERTIFICATE-----content-----END CERTIFICATE-----&#34;)&#xA;// ... and so on!&#xA;&#xA;// Adding Client Certificates, you add one or more certificates&#xA;// Sample for creating certificate object&#xA;// Parsing public/private key pair from a pair of files. The files must contain PEM encoded data.&#xA;cert1, err := tls.X509KeyPair([]byte(&#34;-----BEGIN CERTIFICATE-----content-----END CERTIFICATE-----&#34;), []byte(&#34;-----BEGIN CERTIFICATE-----content-----END CERTIFICATE-----&#34;))&#xA;if err != nil {&#xA;  log.Fatalf(&#34;ERROR client certificate: %s&#34;, err)&#xA;}&#xA;// ...&#xA;&#xA;// You add one or more certificates&#xA;client.SetCertificates(cert1, cert2, cert3)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Proxy Settings&lt;/h4&gt; &#xA;&lt;p&gt;Default &lt;code&gt;Go&lt;/code&gt; supports Proxy via environment variable &lt;code&gt;HTTP_PROXY&lt;/code&gt;. Resty provides support via &lt;code&gt;SetProxy&lt;/code&gt; &amp;amp; &lt;code&gt;RemoveProxy&lt;/code&gt;. Choose as per your need.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Client Level Proxy&lt;/strong&gt; settings applied to all the request&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Create a Resty Client&#xA;client := resty.New()&#xA;&#xA;// Setting a Proxy URL and Port&#xA;client.SetProxy(&#34;http://proxyserver:8888&#34;)&#xA;&#xA;// Want to remove proxy setting&#xA;client.RemoveProxy()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Retries&lt;/h4&gt; &#xA;&lt;p&gt;Resty uses &lt;a href=&#34;http://www.awsarchitectureblog.com/2015/03/backoff.html&#34;&gt;backoff&lt;/a&gt; to increase retry intervals after each attempt.&lt;/p&gt; &#xA;&lt;p&gt;Usage example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Create a Resty Client&#xA;client := resty.New()&#xA;&#xA;// Retries are configured per client&#xA;client.&#xA;    // Set retry count to non zero to enable retries&#xA;    SetRetryCount(3).&#xA;    // You can override initial retry wait time.&#xA;    // Default is 100 milliseconds.&#xA;    SetRetryWaitTime(5 * time.Second).&#xA;    // MaxWaitTime can be overridden as well.&#xA;    // Default is 2 seconds.&#xA;    SetRetryMaxWaitTime(20 * time.Second).&#xA;    // SetRetryAfter sets callback to calculate wait time between retries.&#xA;    // Default (nil) implies exponential backoff with jitter&#xA;    SetRetryAfter(func(client *resty.Client, resp *resty.Response) (time.Duration, error) {&#xA;        return 0, errors.New(&#34;quota exceeded&#34;)&#xA;    })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default, resty will retry requests that return a non-nil error during execution. Therefore, the above setup will result in resty retrying requests with non-nil errors up to 3 times, with the delay increasing after each attempt.&lt;/p&gt; &#xA;&lt;p&gt;You can optionally provide client with &lt;a href=&#34;https://pkg.go.dev/github.com/go-resty/resty/v2#RetryConditionFunc&#34;&gt;custom retry conditions&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Create a Resty Client&#xA;client := resty.New()&#xA;&#xA;client.AddRetryCondition(&#xA;    // RetryConditionFunc type is for retry condition function&#xA;    // input: non-nil Response OR request execution error&#xA;    func(r *resty.Response, err error) bool {&#xA;        return r.StatusCode() == http.StatusTooManyRequests&#xA;    },&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The above example will make resty retry requests that end with a &lt;code&gt;429 Too Many Requests&lt;/code&gt; status code. It&#39;s important to note that when you specify conditions using &lt;code&gt;AddRetryCondition&lt;/code&gt;, it will override the default retry behavior, which retries on errors encountered during the request. If you want to retry on errors encountered during the request, similar to the default behavior, you&#39;ll need to configure it as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Create a Resty Client&#xA;client := resty.New()&#xA;&#xA;client.AddRetryCondition(&#xA;    func(r *resty.Response, err error) bool {&#xA;        // Including &#34;err != nil&#34; emulates the default retry behavior for errors encountered during the request.&#xA;        return err != nil || r.StatusCode() == http.StatusTooManyRequests&#xA;    },&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Multiple retry conditions can be added. Note that if multiple conditions are specified, a retry will occur if any of the conditions are met.&lt;/p&gt; &#xA;&lt;p&gt;It is also possible to use &lt;code&gt;resty.Backoff(...)&lt;/code&gt; to get arbitrary retry scenarios implemented. &lt;a href=&#34;https://raw.githubusercontent.com/go-resty/resty/v2/retry_test.go&#34;&gt;Reference&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Allow GET request with Payload&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Create a Resty Client&#xA;client := resty.New()&#xA;&#xA;// Allow GET request with Payload. This is disabled by default.&#xA;client.SetAllowGetMethodPayload(true)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Wanna Multiple Clients&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Here you go!&#xA;// Client 1&#xA;client1 := resty.New()&#xA;client1.R().Get(&#34;http://httpbin.org&#34;)&#xA;// ...&#xA;&#xA;// Client 2&#xA;client2 := resty.New()&#xA;client2.R().Head(&#34;http://httpbin.org&#34;)&#xA;// ...&#xA;&#xA;// Bend it as per your need!!!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Remaining Client Settings &amp;amp; its Options&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Create a Resty Client&#xA;client := resty.New()&#xA;&#xA;// Unique settings at Client level&#xA;//--------------------------------&#xA;// Enable debug mode&#xA;client.SetDebug(true)&#xA;&#xA;// Assign Client TLSClientConfig&#xA;// One can set custom root-certificate. Refer: http://golang.org/pkg/crypto/tls/#example_Dial&#xA;client.SetTLSClientConfig(&amp;amp;tls.Config{ RootCAs: roots })&#xA;&#xA;// or One can disable security check (https)&#xA;client.SetTLSClientConfig(&amp;amp;tls.Config{ InsecureSkipVerify: true })&#xA;&#xA;// Set client timeout as per your need&#xA;client.SetTimeout(1 * time.Minute)&#xA;&#xA;&#xA;// You can override all below settings and options at request level if you want to&#xA;//--------------------------------------------------------------------------------&#xA;// Host URL for all request. So you can use relative URL in the request&#xA;client.SetBaseURL(&#34;http://httpbin.org&#34;)&#xA;&#xA;// Headers for all request&#xA;client.SetHeader(&#34;Accept&#34;, &#34;application/json&#34;)&#xA;client.SetHeaders(map[string]string{&#xA;        &#34;Content-Type&#34;: &#34;application/json&#34;,&#xA;        &#34;User-Agent&#34;: &#34;My custom User Agent String&#34;,&#xA;      })&#xA;&#xA;// Cookies for all request&#xA;client.SetCookie(&amp;amp;http.Cookie{&#xA;      Name:&#34;go-resty&#34;,&#xA;      Value:&#34;This is cookie value&#34;,&#xA;      Path: &#34;/&#34;,&#xA;      Domain: &#34;sample.com&#34;,&#xA;      MaxAge: 36000,&#xA;      HttpOnly: true,&#xA;      Secure: false,&#xA;    })&#xA;client.SetCookies(cookies)&#xA;&#xA;// URL query parameters for all request&#xA;client.SetQueryParam(&#34;user_id&#34;, &#34;00001&#34;)&#xA;client.SetQueryParams(map[string]string{ // sample of those who use this manner&#xA;      &#34;api_key&#34;: &#34;api-key-here&#34;,&#xA;      &#34;api_secret&#34;: &#34;api-secret&#34;,&#xA;    })&#xA;client.R().SetQueryString(&#34;productId=232&amp;amp;template=fresh-sample&amp;amp;cat=resty&amp;amp;source=google&amp;amp;kw=buy a lot more&#34;)&#xA;&#xA;// Form data for all request. Typically used with POST and PUT&#xA;client.SetFormData(map[string]string{&#xA;    &#34;access_token&#34;: &#34;BC594900-518B-4F7E-AC75-BD37F019E08F&#34;,&#xA;  })&#xA;&#xA;// Basic Auth for all request&#xA;client.SetBasicAuth(&#34;myuser&#34;, &#34;mypass&#34;)&#xA;&#xA;// Bearer Auth Token for all request&#xA;client.SetAuthToken(&#34;BC594900518B4F7EAC75BD37F019E08FBC594900518B4F7EAC75BD37F019E08F&#34;)&#xA;&#xA;// Enabling Content length value for all request&#xA;client.SetContentLength(true)&#xA;&#xA;// Registering global Error object structure for JSON/XML request&#xA;client.SetError(&amp;amp;Error{})    // or resty.SetError(Error{})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Unix Socket&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;unixSocket := &#34;/var/run/my_socket.sock&#34;&#xA;&#xA;// Create a Go&#39;s http.Transport so we can set it in resty.&#xA;transport := http.Transport{&#xA;&#x9;Dial: func(_, _ string) (net.Conn, error) {&#xA;&#x9;&#x9;return net.Dial(&#34;unix&#34;, unixSocket)&#xA;&#x9;},&#xA;}&#xA;&#xA;// Create a Resty Client&#xA;client := resty.New()&#xA;&#xA;// Set the previous transport that we created, set the scheme of the communication to the&#xA;// socket and set the unixSocket as the HostURL.&#xA;client.SetTransport(&amp;amp;transport).SetScheme(&#34;http&#34;).SetBaseURL(unixSocket)&#xA;&#xA;// No need to write the host&#39;s URL on the request, just the path.&#xA;client.R().Get(&#34;http://localhost/index.html&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Bazel Support&lt;/h4&gt; &#xA;&lt;p&gt;Resty can be built, tested and depended upon via &lt;a href=&#34;https://bazel.build&#34;&gt;Bazel&lt;/a&gt;. For example, to run all tests:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;bazel test :resty_test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Mocking http requests using &lt;a href=&#34;https://github.com/jarcoal/httpmock&#34;&gt;httpmock&lt;/a&gt; library&lt;/h4&gt; &#xA;&lt;p&gt;In order to mock the http requests when testing your application you could use the &lt;code&gt;httpmock&lt;/code&gt; library.&lt;/p&gt; &#xA;&lt;p&gt;When using the default resty client, you should pass the client to the library as follow:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Create a Resty Client&#xA;client := resty.New()&#xA;&#xA;// Get the underlying HTTP Client and set it to Mock&#xA;httpmock.ActivateNonDefault(client.GetClient())&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;More detailed example of mocking resty http requests using ginko could be found &lt;a href=&#34;https://github.com/jarcoal/httpmock#ginkgo--resty-example&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Versioning&lt;/h2&gt; &#xA;&lt;p&gt;Resty releases versions according to &lt;a href=&#34;http://semver.org&#34;&gt;Semantic Versioning&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Resty v2 does not use &lt;code&gt;gopkg.in&lt;/code&gt; service for library versioning.&lt;/li&gt; &#xA; &lt;li&gt;Resty fully adapted to &lt;code&gt;go mod&lt;/code&gt; capabilities since &lt;code&gt;v1.10.0&lt;/code&gt; release.&lt;/li&gt; &#xA; &lt;li&gt;Resty v1 series was using &lt;code&gt;gopkg.in&lt;/code&gt; to provide versioning. &lt;code&gt;gopkg.in/resty.vX&lt;/code&gt; points to appropriate tagged versions; &lt;code&gt;X&lt;/code&gt; denotes version series number and it&#39;s a stable release for production use. For e.g. &lt;code&gt;gopkg.in/resty.v0&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Development takes place at the master branch. Although the code in master should always compile and test successfully, it might break API&#39;s. I aim to maintain backwards compatibility, but sometimes API&#39;s and behavior might be changed to fix a bug.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contribution&lt;/h2&gt; &#xA;&lt;p&gt;I would welcome your contribution! If you find any improvement or issue you want to fix, feel free to send a pull request, I like pull requests that include test cases for fix/enhancement. I have done my best to bring pretty good code coverage. Feel free to write tests.&lt;/p&gt; &#xA;&lt;p&gt;BTW, I&#39;d like to know what you think about &lt;code&gt;Resty&lt;/code&gt;. Kindly open an issue or send me an email; it&#39;d mean a lot to me.&lt;/p&gt; &#xA;&lt;h2&gt;Creator&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/jeevatkm&#34;&gt;Jeevanandam M.&lt;/a&gt; (&lt;a href=&#34;mailto:jeeva@myjeeva.com&#34;&gt;jeeva@myjeeva.com&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;h2&gt;Core Team&lt;/h2&gt; &#xA;&lt;p&gt;Have a look on &lt;a href=&#34;https://github.com/orgs/go-resty/people&#34;&gt;Members&lt;/a&gt; page.&lt;/p&gt; &#xA;&lt;h2&gt;Contributors&lt;/h2&gt; &#xA;&lt;p&gt;Have a look on &lt;a href=&#34;https://github.com/go-resty/resty/graphs/contributors&#34;&gt;Contributors&lt;/a&gt; page.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Resty released under MIT license, refer &lt;a href=&#34;https://raw.githubusercontent.com/go-resty/resty/v2/LICENSE&#34;&gt;LICENSE&lt;/a&gt; file.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>external-secrets/external-secrets</title>
    <updated>2024-09-01T01:38:51Z</updated>
    <id>tag:github.com,2024-09-01:/external-secrets/external-secrets</id>
    <link href="https://github.com/external-secrets/external-secrets" rel="alternate"></link>
    <summary type="html">&lt;p&gt;External Secrets Operator reads information from a third-party service like AWS Secrets Manager and automatically injects the values as Kubernetes Secrets.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/external-secrets/external-secrets/main/assets/eso-logo-large.png&#34; width=&#34;30%&#34; align=&#34;center&#34; alt=&#34;external-secrets&#34;&gt; &lt;/p&gt; &#xA;&lt;h1&gt;External Secrets&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/external-secrets/external-secrets/actions/workflows/ci.yml/badge.svg?branch=main&#34; alt=&#34;ci&#34;&gt; &lt;a href=&#34;https://bestpractices.coreinfrastructure.org/projects/5947&#34;&gt;&lt;img src=&#34;https://bestpractices.coreinfrastructure.org/projects/5327/badge&#34; alt=&#34;CII Best Practices&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://securityscorecards.dev/viewer/?uri=github.com/external-secrets/external-secrets&#34;&gt;&lt;img src=&#34;https://api.securityscorecards.dev/projects/github.com/external-secrets/external-secrets/badge&#34; alt=&#34;OpenSSF Scorecard&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/external-secrets/external-secrets&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/external-secrets/external-secrets&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://app.fossa.com/projects/git%2Bgithub.com%2Fexternal-secrets%2Fexternal-secrets?ref=badge_shield&#34;&gt;&lt;img src=&#34;https://app.fossa.com/api/projects/git%2Bgithub.com%2Fexternal-secrets%2Fexternal-secrets.svg?type=shield&#34; alt=&#34;FOSSA Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://artifacthub.io/packages/helm/external-secrets-operator/external-secrets&#34;&gt;&lt;img alt=&#34;Artifact Hub&#34; src=&#34;https://img.shields.io/endpoint?url=https://artifacthub.io/badge/repository/external-secrets&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://operatorhub.io/operator/external-secrets-operator&#34;&gt;&lt;img alt=&#34;operatorhub.io&#34; src=&#34;https://img.shields.io/badge/operatorhub.io-external--secrets-brightgreen&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;External Secrets Operator&lt;/strong&gt; is a Kubernetes operator that integrates external secret management systems like &lt;a href=&#34;https://aws.amazon.com/secrets-manager/&#34;&gt;AWS Secrets Manager&lt;/a&gt;, &lt;a href=&#34;https://www.vaultproject.io/&#34;&gt;HashiCorp Vault&lt;/a&gt;, &lt;a href=&#34;https://cloud.google.com/secret-manager&#34;&gt;Google Secrets Manager&lt;/a&gt;, &lt;a href=&#34;https://azure.microsoft.com/en-us/services/key-vault/&#34;&gt;Azure Key Vault&lt;/a&gt;, &lt;a href=&#34;https://www.ibm.com/cloud/secrets-manager&#34;&gt;IBM Cloud Secrets Manager&lt;/a&gt;, &lt;a href=&#34;https://akeyless.io&#34;&gt;Akeyless&lt;/a&gt;, &lt;a href=&#34;https://www.conjur.org&#34;&gt;CyberArk Conjur&lt;/a&gt;, &lt;a href=&#34;https://www.pulumi.com/product/esc/&#34;&gt;Pulumi ESC&lt;/a&gt; and many more. The operator reads information from external APIs and automatically injects the values into a &lt;a href=&#34;https://kubernetes.io/docs/concepts/configuration/secret/&#34;&gt;Kubernetes Secret&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Multiple people and organizations are joining efforts to create a single External Secrets solution based on existing projects. If you are curious about the origins of this project, check out &lt;a href=&#34;https://github.com/external-secrets/kubernetes-external-secrets/issues/47&#34;&gt;this issue&lt;/a&gt; and &lt;a href=&#34;https://github.com/external-secrets/kubernetes-external-secrets/pull/477&#34;&gt;this PR&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;External Secrets Operator guides and reference documentation is available at &lt;a href=&#34;https://external-secrets.io&#34;&gt;external-secrets.io&lt;/a&gt;. Also see our &lt;a href=&#34;https://external-secrets.io/main/introduction/stability-support/&#34;&gt;stability and support&lt;/a&gt; policy.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;We welcome and encourage contributions to this project! Please read the &lt;a href=&#34;https://www.external-secrets.io/main/contributing/devguide/&#34;&gt;Developer&lt;/a&gt; and &lt;a href=&#34;https://www.external-secrets.io/main/contributing/process/&#34;&gt;Contribution process&lt;/a&gt; guides. Also make sure to check the &lt;a href=&#34;https://www.external-secrets.io/main/contributing/coc/&#34;&gt;Code of Conduct&lt;/a&gt; and adhere to its guidelines.&lt;/p&gt; &#xA;&lt;h3&gt;Sponsoring&lt;/h3&gt; &#xA;&lt;p&gt;Please consider sponsoring this project, there are many ways you can help us with: engineering time, providing infrastructure, donating money, etc. We are open to cooperations, feel free to approach as and we discuss how this could look like. We can keep your contribution anonymized if that&#39;s required (depending on the type of contribution), and anonymous donations are possible inside &lt;a href=&#34;https://opencollective.com/external-secrets-org&#34;&gt;Opencollective&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Bi-weekly Development Meeting&lt;/h2&gt; &#xA;&lt;p&gt;We host our development meeting every odd wednesday on &lt;a href=&#34;https://meet.jit.si/eso-community-meeting&#34;&gt;Jitsi&lt;/a&gt;. We run the meeting with alternating times &lt;a href=&#34;https://dateful.com/time-zone-converter?t=20:00&amp;amp;tz=Europe/Berlin&#34;&gt;8:00 PM Berlin Time&lt;/a&gt; and &lt;a href=&#34;https://dateful.com/time-zone-converter?t=13:00&amp;amp;tz=Europe/Berlin&#34;&gt;1:00 PM Berlin Time&lt;/a&gt;, we&#39;ll announce the time in our &lt;a href=&#34;https://kubernetes.slack.com/messages/external-secrets&#34;&gt;Kubernetes Slack channel&lt;/a&gt;. Meeting notes are recorded on &lt;a href=&#34;https://hackmd.io/GSGEpTVdRZCP6LDxV3FHJA&#34;&gt;hackmd&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Anyone is welcome to join. Feel free to ask questions, request feedback, raise awareness for an issue, or just say hi. ;)&lt;/p&gt; &#xA;&lt;h2&gt;Security&lt;/h2&gt; &#xA;&lt;p&gt;Please report vulnerabilities by email to &lt;a href=&#34;mailto:cncf-ExternalSecretsOp-maintainers@lists.cncf.io&#34;&gt;cncf-ExternalSecretsOp-maintainers@lists.cncf.io&lt;/a&gt;. Also see our &lt;a href=&#34;https://raw.githubusercontent.com/external-secrets/external-secrets/main/SECURITY.md&#34;&gt;SECURITY.md file&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;h2&gt;software bill of materials&lt;/h2&gt; &#xA;&lt;p&gt;We attach SBOM and provenance file to our GitHub release. Also, they are attached to container images.&lt;/p&gt; &#xA;&lt;h2&gt;Adopters&lt;/h2&gt; &#xA;&lt;p&gt;Please create a PR and add your company or project to our &lt;a href=&#34;https://raw.githubusercontent.com/external-secrets/external-secrets/main/ADOPTERS.md&#34;&gt;ADOPTERS.md file&lt;/a&gt; if you are using our project!&lt;/p&gt; &#xA;&lt;h2&gt;Roadmap&lt;/h2&gt; &#xA;&lt;p&gt;You can find the roadmap in our documentation: &lt;a href=&#34;https://external-secrets.io/main/contributing/roadmap/&#34;&gt;https://external-secrets.io/main/contributing/roadmap/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Kicked off by&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/external-secrets/external-secrets/main/assets/Godaddylogo_2020.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Sponsored by&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/external-secrets/external-secrets/main/assets/CS_logo_1.png&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/external-secrets/external-secrets/main/assets/form3_logo.png&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/external-secrets/external-secrets/main/assets/pento_logo.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://app.fossa.com/projects/git%2Bgithub.com%2Fexternal-secrets%2Fexternal-secrets?ref=badge_large&#34;&gt;&lt;img src=&#34;https://app.fossa.com/api/projects/git%2Bgithub.com%2Fexternal-secrets%2Fexternal-secrets.svg?type=large&#34; alt=&#34;FOSSA Status&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>