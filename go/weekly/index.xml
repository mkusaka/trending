<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-01-28T01:51:21Z</updated>
  <subtitle>Weekly Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>qax-os/excelize</title>
    <updated>2024-01-28T01:51:21Z</updated>
    <id>tag:github.com,2024-01-28:/qax-os/excelize</id>
    <link href="https://github.com/qax-os/excelize" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Go language library for reading and writing Microsoft Excel™ (XLAM / XLSM / XLSX / XLTM / XLTX) spreadsheets&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt;&lt;img width=&#34;650&#34; src=&#34;https://raw.githubusercontent.com/qax-os/excelize/master/excelize.svg?sanitize=true&#34; alt=&#34;Excelize logo&#34;&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/xuri/excelize/actions/workflows/go.yml&#34;&gt;&lt;img src=&#34;https://github.com/xuri/excelize/actions/workflows/go.yml/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/qax-os/excelize&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/qax-os/excelize/branch/master/graph/badge.svg?sanitize=true&#34; alt=&#34;Code Coverage&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/xuri/excelize/v2&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/xuri/excelize/v2&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pkg.go.dev/github.com/xuri/excelize/v2&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/go.dev-reference-007d9c?logo=go&amp;amp;logoColor=white&#34; alt=&#34;go.dev&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opensource.org/licenses/BSD-3-Clause&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-bsd-orange.svg?sanitize=true&#34; alt=&#34;Licenses&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.paypal.com/paypalme/xuri&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Donate-PayPal-green.svg?sanitize=true&#34; alt=&#34;Donate&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;h1&gt;Excelize&lt;/h1&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;Excelize is a library written in pure Go providing a set of functions that allow you to write to and read from XLAM / XLSM / XLSX / XLTM / XLTX files. Supports reading and writing spreadsheet documents generated by Microsoft Excel™ 2007 and later. Supports complex components by high compatibility, and provided streaming API for generating or reading data from a worksheet with huge amounts of data. This library needs Go version 1.18 or later. There are some &lt;a href=&#34;https://github.com/golang/go/issues/61881&#34;&gt;incompatible changes&lt;/a&gt; in the Go 1.21.0, the Excelize library can not working with that version normally, if you are using the Go 1.21.x, please upgrade to the Go 1.21.1 and later version. The full docs can be seen using go&#39;s built-in documentation tool, or online at &lt;a href=&#34;https://pkg.go.dev/github.com/xuri/excelize/v2&#34;&gt;go.dev&lt;/a&gt; and &lt;a href=&#34;https://xuri.me/excelize/&#34;&gt;docs reference&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Basic Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;go get github.com/xuri/excelize&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If your packages are managed using &lt;a href=&#34;https://go.dev/blog/using-go-modules&#34;&gt;Go Modules&lt;/a&gt;, please install with following command.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;go get github.com/xuri/excelize/v2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Create spreadsheet&lt;/h3&gt; &#xA;&lt;p&gt;Here is a minimal example usage that will create spreadsheet file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;    &#34;fmt&#34;&#xA;&#xA;    &#34;github.com/xuri/excelize/v2&#34;&#xA;)&#xA;&#xA;func main() {&#xA;    f := excelize.NewFile()&#xA;    defer func() {&#xA;        if err := f.Close(); err != nil {&#xA;            fmt.Println(err)&#xA;        }&#xA;    }()&#xA;    // Create a new sheet.&#xA;    index, err := f.NewSheet(&#34;Sheet2&#34;)&#xA;    if err != nil {&#xA;        fmt.Println(err)&#xA;        return&#xA;    }&#xA;    // Set value of a cell.&#xA;    f.SetCellValue(&#34;Sheet2&#34;, &#34;A2&#34;, &#34;Hello world.&#34;)&#xA;    f.SetCellValue(&#34;Sheet1&#34;, &#34;B2&#34;, 100)&#xA;    // Set active sheet of the workbook.&#xA;    f.SetActiveSheet(index)&#xA;    // Save spreadsheet by the given path.&#xA;    if err := f.SaveAs(&#34;Book1.xlsx&#34;); err != nil {&#xA;        fmt.Println(err)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Reading spreadsheet&lt;/h3&gt; &#xA;&lt;p&gt;The following constitutes the bare to read a spreadsheet document.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;    &#34;fmt&#34;&#xA;&#xA;    &#34;github.com/xuri/excelize/v2&#34;&#xA;)&#xA;&#xA;func main() {&#xA;    f, err := excelize.OpenFile(&#34;Book1.xlsx&#34;)&#xA;    if err != nil {&#xA;        fmt.Println(err)&#xA;        return&#xA;    }&#xA;    defer func() {&#xA;        // Close the spreadsheet.&#xA;        if err := f.Close(); err != nil {&#xA;            fmt.Println(err)&#xA;        }&#xA;    }()&#xA;    // Get value from cell by given worksheet name and cell reference.&#xA;    cell, err := f.GetCellValue(&#34;Sheet1&#34;, &#34;B2&#34;)&#xA;    if err != nil {&#xA;        fmt.Println(err)&#xA;        return&#xA;    }&#xA;    fmt.Println(cell)&#xA;    // Get all the rows in the Sheet1.&#xA;    rows, err := f.GetRows(&#34;Sheet1&#34;)&#xA;    if err != nil {&#xA;        fmt.Println(err)&#xA;        return&#xA;    }&#xA;    for _, row := range rows {&#xA;        for _, colCell := range row {&#xA;            fmt.Print(colCell, &#34;\t&#34;)&#xA;        }&#xA;        fmt.Println()&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Add chart to spreadsheet file&lt;/h3&gt; &#xA;&lt;p&gt;With Excelize chart generation and management is as easy as a few lines of code. You can build charts based on data in your worksheet or generate charts without any data in your worksheet at all.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;img width=&#34;650&#34; src=&#34;https://raw.githubusercontent.com/qax-os/excelize/master/test/images/chart.png&#34; alt=&#34;Excelize&#34;&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;    &#34;fmt&#34;&#xA;&#xA;    &#34;github.com/xuri/excelize/v2&#34;&#xA;)&#xA;&#xA;func main() {&#xA;    f := excelize.NewFile()&#xA;    defer func() {&#xA;        if err := f.Close(); err != nil {&#xA;            fmt.Println(err)&#xA;        }&#xA;    }()&#xA;    for idx, row := range [][]interface{}{&#xA;        {nil, &#34;Apple&#34;, &#34;Orange&#34;, &#34;Pear&#34;}, {&#34;Small&#34;, 2, 3, 3},&#xA;        {&#34;Normal&#34;, 5, 2, 4}, {&#34;Large&#34;, 6, 7, 8},&#xA;    } {&#xA;        cell, err := excelize.CoordinatesToCellName(1, idx+1)&#xA;        if err != nil {&#xA;            fmt.Println(err)&#xA;            return&#xA;        }&#xA;        f.SetSheetRow(&#34;Sheet1&#34;, cell, &amp;amp;row)&#xA;    }&#xA;    if err := f.AddChart(&#34;Sheet1&#34;, &#34;E1&#34;, &amp;amp;excelize.Chart{&#xA;        Type: excelize.Col3DClustered,&#xA;        Series: []excelize.ChartSeries{&#xA;            {&#xA;                Name:       &#34;Sheet1!$A$2&#34;,&#xA;                Categories: &#34;Sheet1!$B$1:$D$1&#34;,&#xA;                Values:     &#34;Sheet1!$B$2:$D$2&#34;,&#xA;            },&#xA;            {&#xA;                Name:       &#34;Sheet1!$A$3&#34;,&#xA;                Categories: &#34;Sheet1!$B$1:$D$1&#34;,&#xA;                Values:     &#34;Sheet1!$B$3:$D$3&#34;,&#xA;            },&#xA;            {&#xA;                Name:       &#34;Sheet1!$A$4&#34;,&#xA;                Categories: &#34;Sheet1!$B$1:$D$1&#34;,&#xA;                Values:     &#34;Sheet1!$B$4:$D$4&#34;,&#xA;            }},&#xA;        Title: []excelize.RichTextRun{&#xA;            {&#xA;                Text: &#34;Fruit 3D Clustered Column Chart&#34;,&#xA;            },&#xA;        },&#xA;    }); err != nil {&#xA;        fmt.Println(err)&#xA;        return&#xA;    }&#xA;    // Save spreadsheet by the given path.&#xA;    if err := f.SaveAs(&#34;Book1.xlsx&#34;); err != nil {&#xA;        fmt.Println(err)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Add picture to spreadsheet file&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;    &#34;fmt&#34;&#xA;    _ &#34;image/gif&#34;&#xA;    _ &#34;image/jpeg&#34;&#xA;    _ &#34;image/png&#34;&#xA;&#xA;    &#34;github.com/xuri/excelize/v2&#34;&#xA;)&#xA;&#xA;func main() {&#xA;    f, err := excelize.OpenFile(&#34;Book1.xlsx&#34;)&#xA;    if err != nil {&#xA;        fmt.Println(err)&#xA;        return&#xA;    }&#xA;    defer func() {&#xA;        // Close the spreadsheet.&#xA;        if err := f.Close(); err != nil {&#xA;            fmt.Println(err)&#xA;        }&#xA;    }()&#xA;    // Insert a picture.&#xA;    if err := f.AddPicture(&#34;Sheet1&#34;, &#34;A2&#34;, &#34;image.png&#34;, nil); err != nil {&#xA;        fmt.Println(err)&#xA;    }&#xA;    // Insert a picture to worksheet with scaling.&#xA;    if err := f.AddPicture(&#34;Sheet1&#34;, &#34;D2&#34;, &#34;image.jpg&#34;,&#xA;        &amp;amp;excelize.GraphicOptions{ScaleX: 0.5, ScaleY: 0.5}); err != nil {&#xA;        fmt.Println(err)&#xA;    }&#xA;    // Insert a picture offset in the cell with printing support.&#xA;    enable, disable := true, false&#xA;    if err := f.AddPicture(&#34;Sheet1&#34;, &#34;H2&#34;, &#34;image.gif&#34;,&#xA;        &amp;amp;excelize.GraphicOptions{&#xA;            PrintObject:     &amp;amp;enable,&#xA;            LockAspectRatio: false,&#xA;            OffsetX:         15,&#xA;            OffsetY:         10,&#xA;            Locked:          &amp;amp;disable,&#xA;        }); err != nil {&#xA;        fmt.Println(err)&#xA;    }&#xA;    // Save the spreadsheet with the origin path.&#xA;    if err = f.Save(); err != nil {&#xA;        fmt.Println(err)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Contributions are welcome! Open a pull request to fix a bug, or open an issue to discuss a new feature or change. XML is compliant with &lt;a href=&#34;https://www.ecma-international.org/publications-and-standards/standards/ecma-376/&#34;&gt;part 1 of the 5th edition of the ECMA-376 Standard for Office Open XML&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Licenses&lt;/h2&gt; &#xA;&lt;p&gt;This program is under the terms of the BSD 3-Clause License. See &lt;a href=&#34;https://opensource.org/licenses/BSD-3-Clause&#34;&gt;https://opensource.org/licenses/BSD-3-Clause&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The Excel logo is a trademark of &lt;a href=&#34;https://aka.ms/trademarks-usage&#34;&gt;Microsoft Corporation&lt;/a&gt;. This artwork is an adaptation.&lt;/p&gt; &#xA;&lt;p&gt;gopher.{ai,svg,png} was created by &lt;a href=&#34;https://twitter.com/tenntenn&#34;&gt;Takuya Ueda&lt;/a&gt;. Licensed under the &lt;a href=&#34;http://creativecommons.org/licenses/by/3.0/&#34;&gt;Creative Commons 3.0 Attributions license&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>docker/compose</title>
    <updated>2024-01-28T01:51:21Z</updated>
    <id>tag:github.com,2024-01-28:/docker/compose</id>
    <link href="https://github.com/docker/compose" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Define and run multi-container applications with Docker&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Table of Contents&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/docker/compose/main/#docker-compose-v2&#34;&gt;Docker Compose v2&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/docker/compose/main/#where-to-get-docker-compose&#34;&gt;Where to get Docker Compose&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/docker/compose/main/#windows-and-macos&#34;&gt;Windows and macOS&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/docker/compose/main/#linux&#34;&gt;Linux&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/docker/compose/main/#quick-start&#34;&gt;Quick Start&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/docker/compose/main/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/docker/compose/main/#legacy&#34;&gt;Legacy&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Docker Compose v2&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/docker/compose/releases/latest&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/docker/compose.svg?style=flat-square&#34; alt=&#34;GitHub release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pkg.go.dev/github.com/docker/compose/v2&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/go.dev-docs-007d9c?style=flat-square&amp;amp;logo=go&amp;amp;logoColor=white&#34; alt=&#34;PkgGoDev&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/docker/compose/actions?query=workflow%3Aci&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/docker/compose/ci.yml?label=ci&amp;amp;logo=github&amp;amp;style=flat-square&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/docker/compose/v2&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/docker/compose/v2?style=flat-square&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/docker/compose&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/docker/compose/branch/main/graph/badge.svg?token=HP3K4Y4ctu&#34; alt=&#34;Codecov&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://api.securityscorecards.dev/projects/github.com/docker/compose&#34;&gt;&lt;img src=&#34;https://api.securityscorecards.dev/projects/github.com/docker/compose/badge&#34; alt=&#34;OpenSSF Scorecard&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://raw.githubusercontent.com/docker/compose/main/logo.png?raw=true&#34; alt=&#34;Docker Compose&#34; title=&#34;Docker Compose Logo&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Docker Compose is a tool for running multi-container applications on Docker defined using the &lt;a href=&#34;https://compose-spec.io&#34;&gt;Compose file format&lt;/a&gt;. A Compose file is used to define how one or more containers that make up your application are configured. Once you have a Compose file, you can create and start your application with a single command: &lt;code&gt;docker compose up&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Where to get Docker Compose&lt;/h1&gt; &#xA;&lt;h3&gt;Windows and macOS&lt;/h3&gt; &#xA;&lt;p&gt;Docker Compose is included in &lt;a href=&#34;https://www.docker.com/products/docker-desktop&#34;&gt;Docker Desktop&lt;/a&gt; for Windows and macOS.&lt;/p&gt; &#xA;&lt;h3&gt;Linux&lt;/h3&gt; &#xA;&lt;p&gt;You can download Docker Compose binaries from the &lt;a href=&#34;https://github.com/docker/compose/releases&#34;&gt;release page&lt;/a&gt; on this repository.&lt;/p&gt; &#xA;&lt;p&gt;Rename the relevant binary for your OS to &lt;code&gt;docker-compose&lt;/code&gt; and copy it to &lt;code&gt;$HOME/.docker/cli-plugins&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Or copy it into one of these folders to install it system-wide:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;/usr/local/lib/docker/cli-plugins&lt;/code&gt; OR &lt;code&gt;/usr/local/libexec/docker/cli-plugins&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;/usr/lib/docker/cli-plugins&lt;/code&gt; OR &lt;code&gt;/usr/libexec/docker/cli-plugins&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;(might require making the downloaded file executable with &lt;code&gt;chmod +x&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;h2&gt;Quick Start&lt;/h2&gt; &#xA;&lt;p&gt;Using Docker Compose is a three-step process:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Define your app&#39;s environment with a &lt;code&gt;Dockerfile&lt;/code&gt; so it can be reproduced anywhere.&lt;/li&gt; &#xA; &lt;li&gt;Define the services that make up your app in &lt;code&gt;compose.yaml&lt;/code&gt; so they can be run together in an isolated environment.&lt;/li&gt; &#xA; &lt;li&gt;Lastly, run &lt;code&gt;docker compose up&lt;/code&gt; and Compose will start and run your entire app.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;A Compose file looks like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;services:&#xA;  web:&#xA;    build: .&#xA;    ports:&#xA;      - &#34;5000:5000&#34;&#xA;    volumes:&#xA;      - .:/code&#xA;  redis:&#xA;    image: redis&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Want to help develop Docker Compose? Check out our &lt;a href=&#34;https://raw.githubusercontent.com/docker/compose/main/CONTRIBUTING.md&#34;&gt;contributing documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you find an issue, please report it on the &lt;a href=&#34;https://github.com/docker/compose/issues/new/choose&#34;&gt;issue tracker&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Legacy&lt;/h2&gt; &#xA;&lt;p&gt;The Python version of Compose is available under the &lt;code&gt;v1&lt;/code&gt; &lt;a href=&#34;https://github.com/docker/compose/tree/v1&#34;&gt;branch&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>grpc/grpc-go</title>
    <updated>2024-01-28T01:51:21Z</updated>
    <id>tag:github.com,2024-01-28:/grpc/grpc-go</id>
    <link href="https://github.com/grpc/grpc-go" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The Go language implementation of gRPC. HTTP/2 based RPC&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;gRPC-Go&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://pkg.go.dev/google.golang.org/grpc&#34;&gt;&lt;img src=&#34;https://pkg.go.dev/badge/google.golang.org/grpc&#34; alt=&#34;GoDoc&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/grpc/grpc-go&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/grpc/grpc-go&#34; alt=&#34;GoReportCard&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/grpc/grpc-go&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/grpc/grpc-go/graph/badge.svg?sanitize=true&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://golang.org&#34;&gt;Go&lt;/a&gt; implementation of &lt;a href=&#34;https://grpc.io&#34;&gt;gRPC&lt;/a&gt;: A high performance, open source, general RPC framework that puts mobile and HTTP/2 first. For more information see the &lt;a href=&#34;https://grpc.io/docs/languages/go&#34;&gt;Go gRPC docs&lt;/a&gt;, or jump directly into the &lt;a href=&#34;https://grpc.io/docs/languages/go/quickstart&#34;&gt;quick start&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Prerequisites&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://golang.org&#34;&gt;Go&lt;/a&gt;&lt;/strong&gt;: any one of the &lt;strong&gt;three latest major&lt;/strong&gt; &lt;a href=&#34;https://golang.org/doc/devel/release.html&#34;&gt;releases&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Simply add the following import to your code, and then &lt;code&gt;go [build|run|test]&lt;/code&gt; will automatically fetch the necessary dependencies:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;import &#34;google.golang.org/grpc&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If you are trying to access &lt;code&gt;grpc-go&lt;/code&gt; from &lt;strong&gt;China&lt;/strong&gt;, see the &lt;a href=&#34;https://raw.githubusercontent.com/grpc/grpc-go/master/#FAQ&#34;&gt;FAQ&lt;/a&gt; below.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Learn more&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://grpc.io/docs/languages/go&#34;&gt;Go gRPC docs&lt;/a&gt;, which include a &lt;a href=&#34;https://grpc.io/docs/languages/go/quickstart&#34;&gt;quick start&lt;/a&gt; and &lt;a href=&#34;https://pkg.go.dev/google.golang.org/grpc&#34;&gt;API reference&lt;/a&gt; among other resources&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/grpc/grpc-go/master/Documentation&#34;&gt;Low-level technical docs&lt;/a&gt; from this repository&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://performance-dot-grpc-testing.appspot.com/explore?dashboard=5180705743044608&#34;&gt;Performance benchmark&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/grpc/grpc-go/master/examples&#34;&gt;Examples&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;h3&gt;I/O Timeout Errors&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;golang.org&lt;/code&gt; domain may be blocked from some countries. &lt;code&gt;go get&lt;/code&gt; usually produces an error like the following when this happens:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ go get -u google.golang.org/grpc&#xA;package google.golang.org/grpc: unrecognized import path &#34;google.golang.org/grpc&#34; (https fetch: Get https://google.golang.org/grpc?go-get=1: dial tcp 216.239.37.1:443: i/o timeout)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To build Go code, there are several options:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Set up a VPN and access google.golang.org through that.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;With Go module support: it is possible to use the &lt;code&gt;replace&lt;/code&gt; feature of &lt;code&gt;go mod&lt;/code&gt; to create aliases for golang.org packages. In your project&#39;s directory:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;go mod edit -replace=google.golang.org/grpc=github.com/grpc/grpc-go@latest&#xA;go mod tidy&#xA;go mod vendor&#xA;go build -mod=vendor&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Again, this will need to be done for all transitive dependencies hosted on golang.org as well. For details, refer to &lt;a href=&#34;https://github.com/golang/go/issues/28652&#34;&gt;golang/go issue #28652&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Compiling error, undefined: grpc.SupportPackageIsVersion&lt;/h3&gt; &#xA;&lt;p&gt;Please update to the latest version of gRPC-Go using &lt;code&gt;go get google.golang.org/grpc&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;How to turn on logging&lt;/h3&gt; &#xA;&lt;p&gt;The default logger is controlled by environment variables. Turn everything on like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ export GRPC_GO_LOG_VERBOSITY_LEVEL=99&#xA;$ export GRPC_GO_LOG_SEVERITY_LEVEL=info&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;The RPC failed with error &lt;code&gt;&#34;code = Unavailable desc = transport is closing&#34;&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;This error means the connection the RPC is using was closed, and there are many possible reasons, including:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;mis-configured transport credentials, connection failed on handshaking&lt;/li&gt; &#xA; &lt;li&gt;bytes disrupted, possibly by a proxy in between&lt;/li&gt; &#xA; &lt;li&gt;server shutdown&lt;/li&gt; &#xA; &lt;li&gt;Keepalive parameters caused connection shutdown, for example if you have configured your server to terminate connections regularly to &lt;a href=&#34;https://github.com/grpc/grpc-go/issues/3170#issuecomment-552517779&#34;&gt;trigger DNS lookups&lt;/a&gt;. If this is the case, you may want to increase your &lt;a href=&#34;https://pkg.go.dev/google.golang.org/grpc/keepalive?tab=doc#ServerParameters&#34;&gt;MaxConnectionAgeGrace&lt;/a&gt;, to allow longer RPC calls to finish.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;It can be tricky to debug this because the error happens on the client side but the root cause of the connection being closed is on the server side. Turn on logging on &lt;strong&gt;both client and server&lt;/strong&gt;, and see if there are any transport errors.&lt;/p&gt;</summary>
  </entry>
</feed>