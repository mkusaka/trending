<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-07-20T01:42:39Z</updated>
  <subtitle>Weekly Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>RezaSi/go-interview-practice</title>
    <updated>2025-07-20T01:42:39Z</updated>
    <id>tag:github.com,2025-07-20:/RezaSi/go-interview-practice</id>
    <link href="https://github.com/RezaSi/go-interview-practice" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Go Interview Practice is a series of coding challenges to help you prepare for technical interviews in Go. Solve problems, submit your solutions, and receive instant feedback with automated testing. Track your progress with per-challenge scoreboards and improve your coding skills step by step.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Go Interview Practice&lt;/h1&gt; &#xA;&lt;p&gt;Welcome to the &lt;strong&gt;Go Interview Practice&lt;/strong&gt; repository! Master Go programming and ace your technical interviews with our interactive coding challenges.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Visual Overview&lt;/h2&gt; &#xA;&lt;h3&gt;Interactive Challenge Platform&lt;/h3&gt; &#xA;&lt;p&gt;Our comprehensive web interface provides everything you need to practice and master Go programming:&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;video src=&#34;https://github.com/user-attachments/assets/23468aab-a032-4326-9d05-84de86c9128c&#34; controls width=&#34;90%&#34;&gt;&lt;/video&gt; &#xA; &lt;p&gt;&lt;em&gt;A brief introduction to the project&lt;/em&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Code &amp;amp; Test Experience&lt;/h3&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/RezaSi/go-interview-practice/main/images/challenge.png&#34; alt=&#34;Go Interview Practice Web UI - challenge&#34; width=&#34;48%&#34; style=&#34;margin-right: 2%;&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/RezaSi/go-interview-practice/main/images/result.png&#34; alt=&#34;Go Interview Practice Web UI - result&#34; width=&#34;48%&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;table&gt; &#xA;  &lt;tbody&gt;&#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;center&#34; width=&#34;48%&#34;&gt; &lt;strong&gt;Interactive Code Editor&lt;/strong&gt;&lt;br&gt; &lt;em&gt;Write, edit, and test your Go solutions&lt;br&gt;with syntax highlighting and real-time feedback&lt;/em&gt; &lt;/td&gt; &#xA;    &lt;td width=&#34;4%&#34;&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34; width=&#34;48%&#34;&gt; &lt;strong&gt;Instant Results &amp;amp; Analytics&lt;/strong&gt;&lt;br&gt; &lt;em&gt;Get immediate test results, performance metrics,&lt;br&gt;and detailed execution analysis&lt;/em&gt; &lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt;&#xA; &lt;/table&gt; &#xA;&lt;/div&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Competitive Leaderboard&lt;/h3&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/RezaSi/go-interview-practice/main/images/scoreboard.png&#34; alt=&#34;Go Interview Practice - Main Leaderboard&#34; width=&#34;90%&#34;&gt; &#xA; &lt;p&gt;&lt;em&gt;Beautiful leaderboard showcasing top developers with challenge completion indicators, rankings, and achievements&lt;/em&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;🏆 Top 10 Leaderboard&lt;/h2&gt; &#xA;&lt;p&gt;Our most accomplished Go developers, ranked by number of challenges completed:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: The data below is automatically updated by GitHub Actions when challenge scoreboards change.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;🏅&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Developer&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Solved&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Rate&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Achievement&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Progress&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;🥇&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://github.com/odelbos.png&#34; width=&#34;24&#34; height=&#34;24&#34; style=&#34;border-radius: 50%;&#34;&gt;&lt;br&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/odelbos&#34;&gt;odelbos&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;24&lt;/strong&gt;/30&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;80.0%&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Master&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✅✅✅✅✅✅✅✅✅✅⬜⬜✅✅⬜&lt;br&gt;✅✅✅✅✅✅✅✅⬜⬜✅✅✅⬜✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;🥈&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://github.com/mick4711.png&#34; width=&#34;24&#34; height=&#34;24&#34; style=&#34;border-radius: 50%;&#34;&gt;&lt;br&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/mick4711&#34;&gt;mick4711&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;17&lt;/strong&gt;/30&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;56.7%&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Expert&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✅✅✅✅✅✅✅⬜⬜✅⬜⬜⬜⬜⬜&lt;br&gt;✅✅✅✅⬜✅✅✅⬜⬜⬜✅⬜⬜✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;🥉&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://github.com/y1hao.png&#34; width=&#34;24&#34; height=&#34;24&#34; style=&#34;border-radius: 50%;&#34;&gt;&lt;br&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/y1hao&#34;&gt;y1hao&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;15&lt;/strong&gt;/30&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;50.0%&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Expert&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✅✅✅✅✅✅✅⬜⬜✅⬜⬜⬜⬜⬜&lt;br&gt;✅✅✅✅⬜✅✅⬜⬜⬜⬜✅⬜⬜⬜&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;4&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://github.com/RezaSi.png&#34; width=&#34;24&#34; height=&#34;24&#34; style=&#34;border-radius: 50%;&#34;&gt;&lt;br&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/RezaSi&#34;&gt;RezaSi&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;14&lt;/strong&gt;/30&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;46.7%&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Advanced&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✅✅✅✅✅✅⬜⬜⬜✅⬜⬜✅⬜⬜&lt;br&gt;⬜✅✅✅⬜✅✅✅⬜⬜⬜⬜⬜⬜⬜&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;5&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://github.com/KhaledMosaad.png&#34; width=&#34;24&#34; height=&#34;24&#34; style=&#34;border-radius: 50%;&#34;&gt;&lt;br&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/KhaledMosaad&#34;&gt;KhaledMosaad&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;13&lt;/strong&gt;/30&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;43.3%&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Advanced&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✅✅✅⬜⬜✅⬜⬜⬜⬜⬜⬜⬜⬜⬜&lt;br&gt;⬜✅✅✅⬜✅✅✅⬜⬜✅✅⬜⬜✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;6&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://github.com/Gandook.png&#34; width=&#34;24&#34; height=&#34;24&#34; style=&#34;border-radius: 50%;&#34;&gt;&lt;br&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/Gandook&#34;&gt;Gandook&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;12&lt;/strong&gt;/30&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;40.0%&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Advanced&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✅✅✅⬜⬜✅✅⬜⬜✅⬜⬜⬜⬜⬜&lt;br&gt;⬜✅✅✅⬜✅✅⬜⬜⬜⬜✅⬜⬜⬜&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;7&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://github.com/MYK12397.png&#34; width=&#34;24&#34; height=&#34;24&#34; style=&#34;border-radius: 50%;&#34;&gt;&lt;br&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/MYK12397&#34;&gt;MYK12397&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;11&lt;/strong&gt;/30&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;36.7%&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Advanced&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;⬜✅✅⬜✅✅✅⬜⬜⬜⬜⬜⬜⬜⬜&lt;br&gt;⬜✅✅✅⬜✅⬜⬜✅⬜⬜⬜⬜⬜✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;8&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://github.com/lanmanul.png&#34; width=&#34;24&#34; height=&#34;24&#34; style=&#34;border-radius: 50%;&#34;&gt;&lt;br&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/lanmanul&#34;&gt;lanmanul&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;10&lt;/strong&gt;/30&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;33.3%&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Advanced&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✅✅✅⬜⬜✅⬜⬜⬜⬜⬜⬜⬜⬜⬜&lt;br&gt;⬜✅✅✅⬜✅✅✅⬜⬜⬜⬜⬜⬜⬜&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;9&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://github.com/ashwinipatankar.png&#34; width=&#34;24&#34; height=&#34;24&#34; style=&#34;border-radius: 50%;&#34;&gt;&lt;br&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/ashwinipatankar&#34;&gt;ashwinipatankar&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;9&lt;/strong&gt;/30&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;30.0%&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Intermediate&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✅✅✅⬜⬜✅⬜⬜⬜⬜⬜⬜⬜⬜⬜&lt;br&gt;⬜✅✅✅⬜✅✅⬜⬜⬜⬜⬜⬜⬜⬜&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;10&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://github.com/JunLog.png&#34; width=&#34;24&#34; height=&#34;24&#34; style=&#34;border-radius: 50%;&#34;&gt;&lt;br&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/JunLog&#34;&gt;JunLog&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;7&lt;/strong&gt;/30&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;23.3%&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Intermediate&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;✅✅✅⬜⬜✅⬜⬜⬜⬜⬜⬜⬜⬜⬜&lt;br&gt;⬜⬜✅⬜⬜✅✅⬜⬜⬜⬜⬜⬜⬜⬜&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt;✅ Completed • ⬜ Not Completed&lt;/p&gt; &#xA; &lt;p&gt;&lt;em&gt;All 30 challenges shown in two rows&lt;/em&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;&lt;em&gt;Updated automatically based on 30 available challenges&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Challenge Progress Overview&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Total Challenges Available&lt;/strong&gt;: 30&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Active Developers&lt;/strong&gt;: 42&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Most Challenges Solved&lt;/strong&gt;: 24 by odelbos&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- END_CLASSIC_LEADERBOARD --&gt; &#xA;&lt;h2&gt;🚀 Package Challenges Leaderboard&lt;/h2&gt; &#xA;&lt;p&gt;Master Go packages through hands-on challenges! Each package offers a structured learning path with real-world scenarios.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: The data below is automatically updated by GitHub Actions when package challenge scoreboards change.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;🏅&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Developer&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Total Solved&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Packages&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Achievement&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Challenge Distribution&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;🥇&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://github.com/RezaSi.png&#34; width=&#34;24&#34; height=&#34;24&#34; style=&#34;border-radius: 50%;&#34;&gt;&lt;br&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/RezaSi&#34;&gt;RezaSi&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;2&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;2&lt;/strong&gt; pkgs&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;🌱 Package Beginner&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;strong&gt;cobra&lt;/strong&gt;: 1 • &lt;strong&gt;gin&lt;/strong&gt;: 1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt;🚀 &lt;strong&gt;Package Challenges&lt;/strong&gt; - Learn Go packages through practical, real-world scenarios&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;h3&gt;📦 Per-Package Progress&lt;/h3&gt; &#xA;&lt;h4&gt;Cobra Package&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Rank&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Developer&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Completed&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Progress&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;🥇&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/RezaSi&#34;&gt;RezaSi&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1/2&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;🟩🟩🟩🟩🟩⬜⬜⬜⬜⬜ 50%&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;Gin Package&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Rank&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Developer&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Completed&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Progress&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;🥇&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/RezaSi&#34;&gt;RezaSi&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1/4&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;🟩🟩⬜⬜⬜⬜⬜⬜⬜⬜ 25%&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;📊 Package Challenge Statistics&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Total Package Challenges Available&lt;/strong&gt;: 7&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Active Package Learners&lt;/strong&gt;: 1&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Available Packages&lt;/strong&gt;: 3 (cobra, gin, gorm)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Most Package Challenges Solved&lt;/strong&gt;: 2 by RezaSi&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- END_PACKAGE_LEADERBOARD --&gt; &#xA;&lt;h2&gt;Key Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Interactive Web UI&lt;/strong&gt; - Code, test, and submit solutions in your browser&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Automated Testing&lt;/strong&gt; - Get immediate feedback on your solutions&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Automated Scoreboards&lt;/strong&gt; - Solutions are automatically scored and ranked&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Performance Analytics&lt;/strong&gt; - Track execution time and memory usage for your solutions&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Comprehensive Learning&lt;/strong&gt; - Each challenge includes detailed explanations and resources&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Progressive Difficulty&lt;/strong&gt; - From beginner to advanced Go concepts&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Quick Start&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Important&lt;/strong&gt;: You must fork this repository first before cloning, otherwise you won&#39;t be able to push your solutions or create pull requests!&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Option 1: Web UI (Recommended)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# 1. First, fork this repository on GitHub&#xA;#    Go to https://github.com/RezaSi/go-interview-practice&#xA;#    Click the &#34;Fork&#34; button in the top-right corner&#xA;&#xA;# 2. Clone your forked repository (replace &#39;yourusername&#39; with your GitHub username)&#xA;git clone https://github.com/yourusername/go-interview-practice.git&#xA;cd go-interview-practice&#xA;&#xA;# 3. Start the web interface&#xA;cd web-ui&#xA;go run main.go&#xA;&#xA;# 4. Open http://localhost:8080 in your browser&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;After solving challenges and submitting solutions:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Your solutions will be automatically saved to your local repository&lt;/li&gt; &#xA; &lt;li&gt;Follow the provided Git commands to commit and push your changes&lt;/li&gt; &#xA; &lt;li&gt;Create a pull request to contribute your solutions back to the main project&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Option 2: GitHub Codespaces (Cloud Development + Web UI)&lt;/h3&gt; &#xA;&lt;p&gt;Want to get started instantly without setting up anything locally? Use GitHub Codespaces!&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;Fork this repository&lt;/strong&gt; (if you haven&#39;t already)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Open in Codespaces&lt;/strong&gt;: Click the green &#34;Code&#34; button on your forked repository, then select &#34;Codespaces&#34; tab&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Create Codespace&lt;/strong&gt;: Click &#34;Create codespace on main&#34;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Start the Web UI&lt;/strong&gt;: Once the codespace loads, open a terminal and run: &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd web-ui&#xA;go run main.go&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Access the Web UI&lt;/strong&gt;: Click on the &#34;Ports&#34; tab in the bottom panel, then click the &#34;Open in Browser&#34; button next to port 8080&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;Benefits of using Codespaces:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;No local setup required&lt;/li&gt; &#xA; &lt;li&gt;Pre-configured Go environment&lt;/li&gt; &#xA; &lt;li&gt;Full VS Code experience in the browser&lt;/li&gt; &#xA; &lt;li&gt;Automatic port forwarding for the web UI&lt;/li&gt; &#xA; &lt;li&gt;All dependencies pre-installed&lt;/li&gt; &#xA; &lt;li&gt;Works on any device with a browser&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Option 3: Command Line&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# 1. Fork the repository first (see step 1 above)&#xA;# 2. Clone your fork and set up a challenge workspace&#xA;git clone https://github.com/yourusername/go-interview-practice.git&#xA;cd go-interview-practice&#xA;./create_submission.sh 1  # For challenge #1&#xA;&#xA;# 3. Implement your solution in the editor of your choice&#xA;&#xA;# 4. Run tests&#xA;cd challenge-1&#xA;./run_tests.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Scoreboards&lt;/h2&gt; &#xA;&lt;p&gt;Each challenge has its own scoreboard that tracks:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Successful submissions by user&lt;/li&gt; &#xA; &lt;li&gt;Execution time rankings&lt;/li&gt; &#xA; &lt;li&gt;Code efficiency metrics&lt;/li&gt; &#xA; &lt;li&gt;Completion dates&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;View global and per-challenge scoreboards in the Web UI to compare your solutions with others.&lt;/p&gt; &#xA;&lt;h2&gt;Challenge Categories&lt;/h2&gt; &#xA;&lt;h3&gt;Beginner&lt;/h3&gt; &#xA;&lt;p&gt;Perfect for those new to Go or brushing up on fundamentals&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/RezaSi/go-interview-practice/main/challenge-1&#34;&gt;Challenge 1&lt;/a&gt;&lt;/strong&gt;: Sum of Two Numbers&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/RezaSi/go-interview-practice/main/challenge-2&#34;&gt;Challenge 2&lt;/a&gt;&lt;/strong&gt;: Reverse a String&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/RezaSi/go-interview-practice/main/challenge-3&#34;&gt;Challenge 3&lt;/a&gt;&lt;/strong&gt;: Employee Data Management&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/RezaSi/go-interview-practice/main/challenge-6&#34;&gt;Challenge 6&lt;/a&gt;&lt;/strong&gt;: Word Frequency Counter&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/RezaSi/go-interview-practice/main/challenge-18&#34;&gt;Challenge 18&lt;/a&gt;&lt;/strong&gt;: Temperature Converter&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/RezaSi/go-interview-practice/main/challenge-21&#34;&gt;Challenge 21&lt;/a&gt;&lt;/strong&gt;: Binary Search Implementation&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/RezaSi/go-interview-practice/main/challenge-22&#34;&gt;Challenge 22&lt;/a&gt;&lt;/strong&gt;: Greedy Coin Change&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Intermediate&lt;/h3&gt; &#xA;&lt;p&gt;For developers familiar with Go who want to deepen their knowledge&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/RezaSi/go-interview-practice/main/challenge-4&#34;&gt;Challenge 4&lt;/a&gt;&lt;/strong&gt;: Concurrent Graph BFS Queries&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/RezaSi/go-interview-practice/main/challenge-5&#34;&gt;Challenge 5&lt;/a&gt;&lt;/strong&gt;: HTTP Authentication Middleware&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/RezaSi/go-interview-practice/main/challenge-7&#34;&gt;Challenge 7&lt;/a&gt;&lt;/strong&gt;: Bank Account with Error Handling&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/RezaSi/go-interview-practice/main/challenge-10&#34;&gt;Challenge 10&lt;/a&gt;&lt;/strong&gt;: Polymorphic Shape Calculator&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/RezaSi/go-interview-practice/main/challenge-13&#34;&gt;Challenge 13&lt;/a&gt;&lt;/strong&gt;: SQL Database Operations&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/RezaSi/go-interview-practice/main/challenge-14&#34;&gt;Challenge 14&lt;/a&gt;&lt;/strong&gt;: Microservices with gRPC&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/RezaSi/go-interview-practice/main/challenge-16&#34;&gt;Challenge 16&lt;/a&gt;&lt;/strong&gt;: Performance Optimization&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/RezaSi/go-interview-practice/main/challenge-17&#34;&gt;Challenge 17&lt;/a&gt;&lt;/strong&gt;: Interactive Debugging Tutorial&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/RezaSi/go-interview-practice/main/challenge-19&#34;&gt;Challenge 19&lt;/a&gt;&lt;/strong&gt;: Slice Operations&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/RezaSi/go-interview-practice/main/challenge-20&#34;&gt;Challenge 20&lt;/a&gt;&lt;/strong&gt;: Circuit Breaker Pattern&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/RezaSi/go-interview-practice/main/challenge-23&#34;&gt;Challenge 23&lt;/a&gt;&lt;/strong&gt;: String Pattern Matching&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/RezaSi/go-interview-practice/main/challenge-27&#34;&gt;Challenge 27&lt;/a&gt;&lt;/strong&gt;: Go Generics Data Structures&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/RezaSi/go-interview-practice/main/challenge-30&#34;&gt;Challenge 30&lt;/a&gt;&lt;/strong&gt;: Context Management Implementation&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Advanced&lt;/h3&gt; &#xA;&lt;p&gt;Challenging problems that test mastery of Go and computer science concepts&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/RezaSi/go-interview-practice/main/challenge-8&#34;&gt;Challenge 8&lt;/a&gt;&lt;/strong&gt;: Chat Server with Channels&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/RezaSi/go-interview-practice/main/challenge-9&#34;&gt;Challenge 9&lt;/a&gt;&lt;/strong&gt;: RESTful Book Management API&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/RezaSi/go-interview-practice/main/challenge-11&#34;&gt;Challenge 11&lt;/a&gt;&lt;/strong&gt;: Concurrent Web Content Aggregator&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/RezaSi/go-interview-practice/main/challenge-12&#34;&gt;Challenge 12&lt;/a&gt;&lt;/strong&gt;: File Processing Pipeline&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/RezaSi/go-interview-practice/main/challenge-15&#34;&gt;Challenge 15&lt;/a&gt;&lt;/strong&gt;: OAuth2 Authentication&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/RezaSi/go-interview-practice/main/challenge-24&#34;&gt;Challenge 24&lt;/a&gt;&lt;/strong&gt;: Dynamic Programming - Longest Increasing Subsequence&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/RezaSi/go-interview-practice/main/challenge-25&#34;&gt;Challenge 25&lt;/a&gt;&lt;/strong&gt;: Graph Algorithms - Shortest Path&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/RezaSi/go-interview-practice/main/challenge-26&#34;&gt;Challenge 26&lt;/a&gt;&lt;/strong&gt;: Regular Expression Text Processor&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/RezaSi/go-interview-practice/main/challenge-28&#34;&gt;Challenge 28&lt;/a&gt;&lt;/strong&gt;: Cache Implementation with Multiple Eviction Policies&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/RezaSi/go-interview-practice/main/challenge-29&#34;&gt;Challenge 29&lt;/a&gt;&lt;/strong&gt;: Rate Limiter Implementation&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How to Use This Repository&lt;/h2&gt; &#xA;&lt;h3&gt;1. Explore Challenges&lt;/h3&gt; &#xA;&lt;p&gt;Browse challenges through the web UI or in the code repository. Each challenge includes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Detailed problem statement&lt;/li&gt; &#xA; &lt;li&gt;Function signature to implement&lt;/li&gt; &#xA; &lt;li&gt;Comprehensive test cases&lt;/li&gt; &#xA; &lt;li&gt;Learning resources&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;2. Implement Your Solution&lt;/h3&gt; &#xA;&lt;p&gt;Write code that solves the challenge requirements and passes all test cases.&lt;/p&gt; &#xA;&lt;h3&gt;3. Test &amp;amp; Refine&lt;/h3&gt; &#xA;&lt;p&gt;Use the built-in testing tools to validate your solution, then refine it for:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Correctness&lt;/li&gt; &#xA; &lt;li&gt;Efficiency&lt;/li&gt; &#xA; &lt;li&gt;Code quality&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;4. Submit &amp;amp; Compare&lt;/h3&gt; &#xA;&lt;p&gt;Submit your passing solution to be added to the scoreboard:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Your solution is automatically tested and scored&lt;/li&gt; &#xA; &lt;li&gt;Execution time and resource usage are recorded&lt;/li&gt; &#xA; &lt;li&gt;Your solution is ranked among other submissions&lt;/li&gt; &#xA; &lt;li&gt;Access detailed performance metrics to optimize further&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;5. Learn &amp;amp; Progress&lt;/h3&gt; &#xA;&lt;p&gt;Review the learning materials to deepen your understanding of the concepts used.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;We welcome contributions! You can contribute in several ways:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Submit Solutions:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Solve existing classic or package challenges&lt;/li&gt; &#xA; &lt;li&gt;Submit your solutions via pull request&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Add New Challenges:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Classic Challenges:&lt;/strong&gt; Algorithm and data structure problems&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Package Challenges:&lt;/strong&gt; Framework-specific practical applications (Gin, Cobra, GORM, etc.)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Quick Steps:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Fork the repository&lt;/li&gt; &#xA; &lt;li&gt;Choose challenge type (classic or package-based)&lt;/li&gt; &#xA; &lt;li&gt;Follow our template structure&lt;/li&gt; &#xA; &lt;li&gt;Submit a pull request&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/RezaSi/go-interview-practice/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; for detailed guidelines on both challenge types.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This project is licensed under the MIT License - see the &lt;a href=&#34;https://raw.githubusercontent.com/RezaSi/go-interview-practice/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt; file for details.&lt;/p&gt; &#xA;&lt;h2&gt;Star History&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.star-history.com/#RezaSi/go-interview-practice&amp;amp;Date&#34;&gt;&lt;img src=&#34;https://api.star-history.com/svg?repos=RezaSi/go-interview-practice&amp;amp;type=Date&#34; alt=&#34;Star History Chart&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;strong&gt;Happy Coding!&lt;/strong&gt; 💻&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>hypermodeinc/badger</title>
    <updated>2025-07-20T01:42:39Z</updated>
    <id>tag:github.com,2025-07-20:/hypermodeinc/badger</id>
    <link href="https://github.com/hypermodeinc/badger" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Fast key-value DB in Go.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;BadgerDB&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/dgraph-io/badger/v4&#34;&gt;&lt;img src=&#34;https://pkg.go.dev/badge/github.com/dgraph-io/badger/v4.svg?sanitize=true&#34; alt=&#34;Go Reference&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/dgraph-io/badger/v4&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/dgraph-io/badger/v4&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://sourcegraph.com/github.com/hypermodeinc/badger?badge&#34;&gt;&lt;img src=&#34;https://sourcegraph.com/github.com/hypermodeinc/badger/-/badge.svg?sanitize=true&#34; alt=&#34;Sourcegraph&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/hypermodeinc/badger/actions/workflows/ci-badger-tests.yml&#34;&gt;&lt;img src=&#34;https://github.com/hypermodeinc/badger/actions/workflows/ci-badger-tests.yml/badge.svg?sanitize=true&#34; alt=&#34;ci-badger-tests&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/hypermodeinc/badger/actions/workflows/ci-badger-bank-tests.yml&#34;&gt;&lt;img src=&#34;https://github.com/hypermodeinc/badger/actions/workflows/ci-badger-bank-tests.yml/badge.svg?sanitize=true&#34; alt=&#34;ci-badger-bank-tests&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/hypermodeinc/badger/actions/workflows/ci-badger-bank-tests-nightly.yml&#34;&gt;&lt;img src=&#34;https://github.com/hypermodeinc/badger/actions/workflows/ci-badger-bank-tests-nightly.yml/badge.svg?sanitize=true&#34; alt=&#34;ci-badger-bank-tests-nightly&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hypermodeinc/badger/main/images/diggy-shadow.png&#34; alt=&#34;Badger mascot&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;BadgerDB is an embeddable, persistent and fast key-value (KV) database written in pure Go. It is the underlying database for &lt;a href=&#34;https://github.com/hypermodeinc/dgraph&#34;&gt;Dgraph&lt;/a&gt;, a fast, distributed graph database. It&#39;s meant to be a performant alternative to non-Go-based key-value stores like RocksDB.&lt;/p&gt; &#xA;&lt;h2&gt;Project Status&lt;/h2&gt; &#xA;&lt;p&gt;Badger is stable and is being used to serve data sets worth hundreds of terabytes. Badger supports concurrent ACID transactions with serializable snapshot isolation (SSI) guarantees. A Jepsen-style bank test runs nightly for 8h, with &lt;code&gt;--race&lt;/code&gt; flag and ensures the maintenance of transactional guarantees. Badger has also been tested to work with filesystem level anomalies, to ensure persistence and consistency. Badger is being used by a number of projects which includes Dgraph, Jaeger Tracing, UsenetExpress, and many more.&lt;/p&gt; &#xA;&lt;p&gt;The list of projects using Badger can be found &lt;a href=&#34;https://raw.githubusercontent.com/hypermodeinc/badger/main/#projects-using-badger&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Please consult the &lt;a href=&#34;https://github.com/hypermodeinc/badger/raw/main/CHANGELOG.md&#34;&gt;Changelog&lt;/a&gt; for more detailed information on releases.&lt;/p&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hypermodeinc/badger/main/#badgerdb&#34;&gt;BadgerDB&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hypermodeinc/badger/main/#project-status&#34;&gt;Project Status&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hypermodeinc/badger/main/#table-of-contents&#34;&gt;Table of Contents&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hypermodeinc/badger/main/#getting-started&#34;&gt;Getting Started&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hypermodeinc/badger/main/#installing&#34;&gt;Installing&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hypermodeinc/badger/main/#installing-badger-command-line-tool&#34;&gt;Installing Badger Command Line Tool&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hypermodeinc/badger/main/#choosing-a-version&#34;&gt;Choosing a version&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hypermodeinc/badger/main/#badger-documentation&#34;&gt;Badger Documentation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hypermodeinc/badger/main/#resources&#34;&gt;Resources&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hypermodeinc/badger/main/#blog-posts&#34;&gt;Blog Posts&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hypermodeinc/badger/main/#design&#34;&gt;Design&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hypermodeinc/badger/main/#comparisons&#34;&gt;Comparisons&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hypermodeinc/badger/main/#benchmarks&#34;&gt;Benchmarks&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hypermodeinc/badger/main/#projects-using-badger&#34;&gt;Projects Using Badger&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hypermodeinc/badger/main/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hypermodeinc/badger/main/#contact&#34;&gt;Contact&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;h3&gt;Installing&lt;/h3&gt; &#xA;&lt;p&gt;To start using Badger, install Go 1.21 or above. Badger v3 and above needs go modules. From your project, run the following command&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;go get github.com/dgraph-io/badger/v4&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will retrieve the library.&lt;/p&gt; &#xA;&lt;h4&gt;Installing Badger Command Line Tool&lt;/h4&gt; &#xA;&lt;p&gt;Badger provides a CLI tool which can perform certain operations like offline backup/restore. To install the Badger CLI, retrieve the repository and checkout the desired version. Then run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cd badger&#xA;go install .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will install the badger command line utility into your $GOBIN path.&lt;/p&gt; &#xA;&lt;h2&gt;Badger Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Badger Documentation is available at &lt;a href=&#34;https://docs.hypermode.com/badger&#34;&gt;https://docs.hypermode.com/badger&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Resources&lt;/h2&gt; &#xA;&lt;h3&gt;Blog Posts&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://hypermode.com/blog/badger/&#34;&gt;Introducing Badger: A fast key-value store written natively in Go&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://hypermode.com/blog/alice/&#34;&gt;Make Badger crash resilient with ALICE&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://hypermode.com/blog/badger-lmdb-boltdb/&#34;&gt;Badger vs LMDB vs BoltDB: Benchmarking key-value databases in Go&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://hypermode.com/blog/badger-txn/&#34;&gt;Concurrent ACID Transactions in Badger&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Design&lt;/h2&gt; &#xA;&lt;p&gt;Badger was written with these design goals in mind:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Write a key-value database in pure Go.&lt;/li&gt; &#xA; &lt;li&gt;Use latest research to build the fastest KV database for data sets spanning terabytes.&lt;/li&gt; &#xA; &lt;li&gt;Optimize for SSDs.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Badger’s design is based on a paper titled &lt;em&gt;&lt;a href=&#34;https://www.usenix.org/system/files/conference/fast16/fast16-papers-lu.pdf&#34;&gt;WiscKey: Separating Keys from Values in SSD-conscious Storage&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Comparisons&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Feature&lt;/th&gt; &#xA;   &lt;th&gt;Badger&lt;/th&gt; &#xA;   &lt;th&gt;RocksDB&lt;/th&gt; &#xA;   &lt;th&gt;BoltDB&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Design&lt;/td&gt; &#xA;   &lt;td&gt;LSM tree with value log&lt;/td&gt; &#xA;   &lt;td&gt;LSM tree only&lt;/td&gt; &#xA;   &lt;td&gt;B+ tree&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;High Read throughput&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;High Write throughput&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Designed for SSDs&lt;/td&gt; &#xA;   &lt;td&gt;Yes (with latest research &lt;sup&gt;1&lt;/sup&gt;)&lt;/td&gt; &#xA;   &lt;td&gt;Not specifically &lt;sup&gt;2&lt;/sup&gt;&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Embeddable&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Sorted KV access&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Pure Go (no Cgo)&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Transactions&lt;/td&gt; &#xA;   &lt;td&gt;Yes, ACID, concurrent with SSI&lt;sup&gt;3&lt;/sup&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Yes (but non-ACID)&lt;/td&gt; &#xA;   &lt;td&gt;Yes, ACID&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Snapshots&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;TTL support&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;3D access (key-value-version)&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;sup&gt;4&lt;/sup&gt;&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;sup&gt;1&lt;/sup&gt; The &lt;a href=&#34;https://www.usenix.org/system/files/conference/fast16/fast16-papers-lu.pdf&#34;&gt;WISCKEY paper&lt;/a&gt; (on which Badger is based) saw big wins with separating values from keys, significantly reducing the write amplification compared to a typical LSM tree.&lt;/p&gt; &#xA;&lt;p&gt;&lt;sup&gt;2&lt;/sup&gt; RocksDB is an SSD optimized version of LevelDB, which was designed specifically for rotating disks. As such RocksDB&#39;s design isn&#39;t aimed at SSDs.&lt;/p&gt; &#xA;&lt;p&gt;&lt;sup&gt;3&lt;/sup&gt; SSI: Serializable Snapshot Isolation. For more details, see the blog post &lt;a href=&#34;https://hypermode.com/blog/badger-txn/&#34;&gt;Concurrent ACID Transactions in Badger&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;sup&gt;4&lt;/sup&gt; Badger provides direct access to value versions via its Iterator API. Users can also specify how many versions to keep per key via Options.&lt;/p&gt; &#xA;&lt;h3&gt;Benchmarks&lt;/h3&gt; &#xA;&lt;p&gt;We have run comprehensive benchmarks against RocksDB, Bolt and LMDB. The benchmarking code, and the detailed logs for the benchmarks can be found in the &lt;a href=&#34;https://github.com/dgraph-io/badger-bench&#34;&gt;badger-bench&lt;/a&gt; repo. More explanation, including graphs can be found the blog posts (linked above).&lt;/p&gt; &#xA;&lt;h2&gt;Projects Using Badger&lt;/h2&gt; &#xA;&lt;p&gt;Below is a list of known projects that use Badger:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hypermodeinc/dgraph&#34;&gt;Dgraph&lt;/a&gt; - Distributed graph database.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jaegertracing/jaeger&#34;&gt;Jaeger&lt;/a&gt; - Distributed tracing platform.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ipfs/go-ipfs&#34;&gt;go-ipfs&lt;/a&gt; - Go client for the InterPlanetary File System (IPFS), a new hypermedia distribution protocol.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/go-ego/riot&#34;&gt;Riot&lt;/a&gt; - An open-source, distributed search engine.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/emitter-io/emitter&#34;&gt;emitter&lt;/a&gt; - Scalable, low latency, distributed pub/sub broker with message storage, uses MQTT, gossip and badger.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/cube2222/octosql&#34;&gt;OctoSQL&lt;/a&gt; - Query tool that allows you to join, analyse and transform data from multiple databases using SQL.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dkron.io/&#34;&gt;Dkron&lt;/a&gt; - Distributed, fault tolerant job scheduling system.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/smallstep/certificates&#34;&gt;smallstep/certificates&lt;/a&gt; - Step-ca is an online certificate authority for secure, automated certificate management.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/celrenheit/sandglass&#34;&gt;Sandglass&lt;/a&gt; - distributed, horizontally scalable, persistent, time sorted message queue.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/grab/talaria&#34;&gt;TalariaDB&lt;/a&gt; - Grab&#39;s Distributed, low latency time-series database.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/salesforce/sloop&#34;&gt;Sloop&lt;/a&gt; - Salesforce&#39;s Kubernetes History Visualization Project.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://usenetexpress.com/&#34;&gt;Usenet Express&lt;/a&gt; - Serving over 300TB of data with Badger.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/appleboy/gorush&#34;&gt;gorush&lt;/a&gt; - A push notification server written in Go.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/zero-os/0-stor&#34;&gt;0-stor&lt;/a&gt; - Single device object store.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dispatchlabs/disgo&#34;&gt;Dispatch Protocol&lt;/a&gt; - Blockchain protocol for distributed application data analytics.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/valinurovam/garagemq&#34;&gt;GarageMQ&lt;/a&gt; - AMQP server written in Go.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://alash3al.github.io/redix/&#34;&gt;RedixDB&lt;/a&gt; - A real-time persistent key-value store with the same redis protocol.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/BBVA/raft-badger&#34;&gt;BBVA&lt;/a&gt; - Raft backend implementation using BadgerDB for Hashicorp raft.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Fantom-foundation/go-lachesis&#34;&gt;Fantom&lt;/a&gt; - aBFT Consensus platform for distributed applications.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/decred/dcrdata&#34;&gt;decred&lt;/a&gt; - An open, progressive, and self-funding cryptocurrency with a system of community-based governance integrated into its blockchain.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/opennetsys/c3-go&#34;&gt;OpenNetSys&lt;/a&gt; - Create useful dApps in any software language.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/honeytrap/honeytrap&#34;&gt;HoneyTrap&lt;/a&gt; - An extensible and opensource system for running, monitoring and managing honeypots.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/insolar/insolar&#34;&gt;Insolar&lt;/a&gt; - Enterprise-ready blockchain platform.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/iotexproject/iotex-core&#34;&gt;IoTeX&lt;/a&gt; - The next generation of the decentralized network for IoT powered by scalability- and privacy-centric blockchains.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kataras/go-sessions&#34;&gt;go-sessions&lt;/a&gt; - The sessions manager for Go net/http and fasthttp.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mosaicnetworks/babble&#34;&gt;Babble&lt;/a&gt; - BFT Consensus platform for distributed applications.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jpincas/tormenta&#34;&gt;Tormenta&lt;/a&gt; - Embedded object-persistence layer / simple JSON database for Go projects.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/timshannon/badgerhold&#34;&gt;BadgerHold&lt;/a&gt; - An embeddable NoSQL store for querying Go types built on Badger&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/didil/goblero&#34;&gt;Goblero&lt;/a&gt; - Pure Go embedded persistent job queue backed by BadgerDB&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.surfline.com&#34;&gt;Surfline&lt;/a&gt; - Serving global wave and weather forecast data with Badger.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mosuka/cete&#34;&gt;Cete&lt;/a&gt; - Simple and highly available distributed key-value store built on Badger. Makes it easy bringing up a cluster of Badger with Raft consensus algorithm by hashicorp/raft.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://volument.com/&#34;&gt;Volument&lt;/a&gt; - A new take on website analytics backed by Badger.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://kvdb.io/&#34;&gt;KVdb&lt;/a&gt; - Hosted key-value store and serverless platform built on top of Badger.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gitlab.com/asad-awadia/terminotes&#34;&gt;Terminotes&lt;/a&gt; - Self hosted notes storage and search server - storage powered by BadgerDB&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pyroscope-io/pyroscope&#34;&gt;Pyroscope&lt;/a&gt; - Open source continuous profiling platform built with BadgerDB&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bgokden/veri&#34;&gt;Veri&lt;/a&gt; - A distributed feature store optimized for Search and Recommendation tasks.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/MikkelHJuul/bIter&#34;&gt;bIter&lt;/a&gt; - A library and Iterator interface for working with the &lt;code&gt;badger.Iterator&lt;/code&gt;, simplifying from-to, and prefix mechanics.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/MikkelHJuul/ld&#34;&gt;ld&lt;/a&gt; - (Lean Database) A very simple gRPC-only key-value database, exposing BadgerDB with key-range scanning semantics.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/darkweak/Souin&#34;&gt;Souin&lt;/a&gt; - A RFC compliant HTTP cache with lot of other features based on Badger for the storage. Compatible with all existing reverse-proxies.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/xuperchain/xupercore&#34;&gt;Xuperchain&lt;/a&gt; - A highly flexible blockchain architecture with great transaction performance.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/qichengzx/m2&#34;&gt;m2&lt;/a&gt; - A simple http key/value store based on the raft protocol.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ChainSafe/chaindb&#34;&gt;chaindb&lt;/a&gt; - A blockchain storage layer used by &lt;a href=&#34;https://chainsafe.github.io/gossamer/&#34;&gt;Gossamer&lt;/a&gt;, a Go client for the &lt;a href=&#34;https://polkadot.network/&#34;&gt;Polkadot Network&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/vitalvas/vxdb&#34;&gt;vxdb&lt;/a&gt; - Simple schema-less Key-Value NoSQL database with simplest API interface.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/opacity/storage-node&#34;&gt;Opacity&lt;/a&gt; - Backend implementation for the Opacity storage project&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/vaccovecrana/vephar&#34;&gt;Vephar&lt;/a&gt; - A minimal key/value store using hashicorp-raft for cluster coordination and Badger for data storage.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nlnwa/gowarcserver&#34;&gt;gowarcserver&lt;/a&gt; - Open-source server for warc files. Can be used in conjunction with pywb&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/onflow/flow-go&#34;&gt;flow-go&lt;/a&gt; - A fast, secure, and developer-friendly blockchain built to support the next generation of games, apps and the digital assets that power them.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.wrgl.co&#34;&gt;Wrgl&lt;/a&gt; - A data version control system that works like Git but specialized to store and diff CSV.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/loggie-io/loggie&#34;&gt;Loggie&lt;/a&gt; - A lightweight, cloud-native data transfer agent and aggregator.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rfyiamcool/raft-badger&#34;&gt;raft-badger&lt;/a&gt; - raft-badger implements LogStore and StableStore Interface of hashcorp/raft. it is used to store raft log and metadata of hashcorp/raft.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/janelia-flyem/dvid&#34;&gt;DVID&lt;/a&gt; - A dataservice for branched versioning of a variety of data types. Originally created for large-scale brain reconstructions in Connectomics.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tauraamui/kvs&#34;&gt;KVS&lt;/a&gt; - A library for making it easy to persist, load and query full structs into BadgerDB, using an ownership hierarchy model.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Boc-chi-no/LLS&#34;&gt;LLS&lt;/a&gt; - LLS is an efficient URL Shortener that can be used to shorten links and track link usage. Support for BadgerDB and MongoDB. Improved performance by more than 30% when using BadgerDB&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/treeverse/lakeFS&#34;&gt;lakeFS&lt;/a&gt; - lakeFS is an open-source data version control that transforms your object storage to Git-like repositories. lakeFS uses BadgerDB for its underlying local metadata KV store implementation&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/smegg99/Goptivum&#34;&gt;Goptivum&lt;/a&gt; - Goptivum is a better frontend and API for the Vulcan Optivum schedule program&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mftlabs.io/actionmanager&#34;&gt;ActionManager&lt;/a&gt; - A dynamic entity manager based on rjsf schema and badger db&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/thisisdevelopment/mightymap&#34;&gt;MightyMap&lt;/a&gt; - Mightymap: Conveys both robustness and high capability, fitting for a powerful concurrent map.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/link-society/flowg&#34;&gt;FlowG&lt;/a&gt; - A low-code log processing facility&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/blinklabs-io/bluefin&#34;&gt;Bluefin&lt;/a&gt; - Bluefin is a TUNA Proof of Work miner for the Fortuna smart contract on the Cardano blockchain&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/blinklabs-io/cdnsd&#34;&gt;cDNSd&lt;/a&gt; - A Cardano blockchain backed DNS server daemon&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/blinklabs-io/dingo&#34;&gt;Dingo&lt;/a&gt; - A Cardano blockchain data node&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you are using Badger in a project please send a pull request to add it to the list.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;If you&#39;re interested in contributing to Badger see &lt;a href=&#34;https://raw.githubusercontent.com/hypermodeinc/badger/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTING&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contact&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Please use &lt;a href=&#34;https://github.com/hypermodeinc/badger/issues&#34;&gt;Github issues&lt;/a&gt; for filing bugs.&lt;/li&gt; &#xA; &lt;li&gt;Please use &lt;a href=&#34;https://discuss.hypermode.com&#34;&gt;discuss.hypermode.com&lt;/a&gt; for questions, discussions, and feature requests.&lt;/li&gt; &#xA; &lt;li&gt;Follow us on Twitter &lt;a href=&#34;https://twitter.com/hypermodeinc&#34;&gt;@hypermodeinc&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>