<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-03-09T01:41:19Z</updated>
  <subtitle>Weekly Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>stretchr/testify</title>
    <updated>2025-03-09T01:41:19Z</updated>
    <id>tag:github.com,2025-03-09:/stretchr/testify</id>
    <link href="https://github.com/stretchr/testify" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A toolkit with common assertions and mocks that plays nicely with the standard library&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Testify - Thou Shalt Write Tests&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] Testify is being maintained at v1, no breaking changes will be accepted in this repo.&lt;br&gt; &lt;a href=&#34;https://github.com/stretchr/testify/discussions/1560&#34;&gt;See discussion about v2&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/stretchr/testify/actions/workflows/main.yml&#34;&gt;&lt;img src=&#34;https://github.com/stretchr/testify/actions/workflows/main.yml/badge.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/stretchr/testify&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/stretchr/testify&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pkg.go.dev/github.com/stretchr/testify&#34;&gt;&lt;img src=&#34;https://pkg.go.dev/badge/github.com/stretchr/testify&#34; alt=&#34;PkgGoDev&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Go code (golang) set of packages that provide many tools for testifying that your code will behave as you intend.&lt;/p&gt; &#xA;&lt;p&gt;Features include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stretchr/testify/master/#assert-package&#34;&gt;Easy assertions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stretchr/testify/master/#mock-package&#34;&gt;Mocking&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stretchr/testify/master/#suite-package&#34;&gt;Testing suite interfaces and functions&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Get started:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install testify with &lt;a href=&#34;https://raw.githubusercontent.com/stretchr/testify/master/#installation&#34;&gt;one line of code&lt;/a&gt;, or &lt;a href=&#34;https://raw.githubusercontent.com/stretchr/testify/master/#staying-up-to-date&#34;&gt;update it with another&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;For an introduction to writing test code in Go, see &lt;a href=&#34;https://go.dev/doc/code#Testing&#34;&gt;https://go.dev/doc/code#Testing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Check out the API Documentation &lt;a href=&#34;https://pkg.go.dev/github.com/stretchr/testify&#34;&gt;https://pkg.go.dev/github.com/stretchr/testify&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Use &lt;a href=&#34;https://github.com/Antonboom/testifylint&#34;&gt;testifylint&lt;/a&gt; (via &lt;a href=&#34;https://golangci-lint.run/&#34;&gt;golangci-lint&lt;/a&gt;) to avoid common mistakes&lt;/li&gt; &#xA; &lt;li&gt;A little about &lt;a href=&#34;https://en.wikipedia.org/wiki/Test-driven_development&#34;&gt;Test-Driven Development (TDD)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/stretchr/testify/assert&#34; title=&#34;API documentation&#34;&gt;&lt;code&gt;assert&lt;/code&gt;&lt;/a&gt; package&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;assert&lt;/code&gt; package provides some helpful methods that allow you to write better test code in Go.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Prints friendly, easy to read failure descriptions&lt;/li&gt; &#xA; &lt;li&gt;Allows for very readable code&lt;/li&gt; &#xA; &lt;li&gt;Optionally annotate each assertion with a message&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See it in action:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package yours&#xA;&#xA;import (&#xA;  &#34;testing&#34;&#xA;  &#34;github.com/stretchr/testify/assert&#34;&#xA;)&#xA;&#xA;func TestSomething(t *testing.T) {&#xA;&#xA;  // assert equality&#xA;  assert.Equal(t, 123, 123, &#34;they should be equal&#34;)&#xA;&#xA;  // assert inequality&#xA;  assert.NotEqual(t, 123, 456, &#34;they should not be equal&#34;)&#xA;&#xA;  // assert for nil (good for errors)&#xA;  assert.Nil(t, object)&#xA;&#xA;  // assert for not nil (good when you expect something)&#xA;  if assert.NotNil(t, object) {&#xA;&#xA;    // now we know that object isn&#39;t nil, we are safe to make&#xA;    // further assertions without causing any errors&#xA;    assert.Equal(t, &#34;Something&#34;, object.Value)&#xA;&#xA;  }&#xA;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Every assert func takes the &lt;code&gt;testing.T&lt;/code&gt; object as the first argument. This is how it writes the errors out through the normal &lt;code&gt;go test&lt;/code&gt; capabilities.&lt;/li&gt; &#xA; &lt;li&gt;Every assert func returns a bool indicating whether the assertion was successful or not, this is useful for if you want to go on making further assertions under certain conditions.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;if you assert many times, use the below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package yours&#xA;&#xA;import (&#xA;  &#34;testing&#34;&#xA;  &#34;github.com/stretchr/testify/assert&#34;&#xA;)&#xA;&#xA;func TestSomething(t *testing.T) {&#xA;  assert := assert.New(t)&#xA;&#xA;  // assert equality&#xA;  assert.Equal(123, 123, &#34;they should be equal&#34;)&#xA;&#xA;  // assert inequality&#xA;  assert.NotEqual(123, 456, &#34;they should not be equal&#34;)&#xA;&#xA;  // assert for nil (good for errors)&#xA;  assert.Nil(object)&#xA;&#xA;  // assert for not nil (good when you expect something)&#xA;  if assert.NotNil(object) {&#xA;&#xA;    // now we know that object isn&#39;t nil, we are safe to make&#xA;    // further assertions without causing any errors&#xA;    assert.Equal(&#34;Something&#34;, object.Value)&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/stretchr/testify/require&#34; title=&#34;API documentation&#34;&gt;&lt;code&gt;require&lt;/code&gt;&lt;/a&gt; package&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;require&lt;/code&gt; package provides same global functions as the &lt;code&gt;assert&lt;/code&gt; package, but instead of returning a boolean result they terminate current test. These functions must be called from the goroutine running the test or benchmark function, not from other goroutines created during the test. Otherwise race conditions may occur.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://pkg.go.dev/testing#T.FailNow&#34;&gt;t.FailNow&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/stretchr/testify/mock&#34; title=&#34;API documentation&#34;&gt;&lt;code&gt;mock&lt;/code&gt;&lt;/a&gt; package&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;mock&lt;/code&gt; package provides a mechanism for easily writing mock objects that can be used in place of real objects when writing test code.&lt;/p&gt; &#xA;&lt;p&gt;An example test function that tests a piece of code that relies on an external object &lt;code&gt;testObj&lt;/code&gt;, can set up expectations (testify) and assert that they indeed happened:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package yours&#xA;&#xA;import (&#xA;  &#34;testing&#34;&#xA;  &#34;github.com/stretchr/testify/mock&#34;&#xA;)&#xA;&#xA;/*&#xA;  Test objects&#xA;*/&#xA;&#xA;// MyMockedObject is a mocked object that implements an interface&#xA;// that describes an object that the code I am testing relies on.&#xA;type MyMockedObject struct{&#xA;  mock.Mock&#xA;}&#xA;&#xA;// DoSomething is a method on MyMockedObject that implements some interface&#xA;// and just records the activity, and returns what the Mock object tells it to.&#xA;//&#xA;// In the real object, this method would do something useful, but since this&#xA;// is a mocked object - we&#39;re just going to stub it out.&#xA;//&#xA;// NOTE: This method is not being tested here, code that uses this object is.&#xA;func (m *MyMockedObject) DoSomething(number int) (bool, error) {&#xA;&#xA;  args := m.Called(number)&#xA;  return args.Bool(0), args.Error(1)&#xA;&#xA;}&#xA;&#xA;/*&#xA;  Actual test functions&#xA;*/&#xA;&#xA;// TestSomething is an example of how to use our test object to&#xA;// make assertions about some target code we are testing.&#xA;func TestSomething(t *testing.T) {&#xA;&#xA;  // create an instance of our test object&#xA;  testObj := new(MyMockedObject)&#xA;&#xA;  // set up expectations&#xA;  testObj.On(&#34;DoSomething&#34;, 123).Return(true, nil)&#xA;&#xA;  // call the code we are testing&#xA;  targetFuncThatDoesSomethingWithObj(testObj)&#xA;&#xA;  // assert that the expectations were met&#xA;  testObj.AssertExpectations(t)&#xA;&#xA;&#xA;}&#xA;&#xA;// TestSomethingWithPlaceholder is a second example of how to use our test object to&#xA;// make assertions about some target code we are testing.&#xA;// This time using a placeholder. Placeholders might be used when the&#xA;// data being passed in is normally dynamically generated and cannot be&#xA;// predicted beforehand (eg. containing hashes that are time sensitive)&#xA;func TestSomethingWithPlaceholder(t *testing.T) {&#xA;&#xA;  // create an instance of our test object&#xA;  testObj := new(MyMockedObject)&#xA;&#xA;  // set up expectations with a placeholder in the argument list&#xA;  testObj.On(&#34;DoSomething&#34;, mock.Anything).Return(true, nil)&#xA;&#xA;  // call the code we are testing&#xA;  targetFuncThatDoesSomethingWithObj(testObj)&#xA;&#xA;  // assert that the expectations were met&#xA;  testObj.AssertExpectations(t)&#xA;&#xA;&#xA;}&#xA;&#xA;// TestSomethingElse2 is a third example that shows how you can use&#xA;// the Unset method to cleanup handlers and then add new ones.&#xA;func TestSomethingElse2(t *testing.T) {&#xA;&#xA;  // create an instance of our test object&#xA;  testObj := new(MyMockedObject)&#xA;&#xA;  // set up expectations with a placeholder in the argument list&#xA;  mockCall := testObj.On(&#34;DoSomething&#34;, mock.Anything).Return(true, nil)&#xA;&#xA;  // call the code we are testing&#xA;  targetFuncThatDoesSomethingWithObj(testObj)&#xA;&#xA;  // assert that the expectations were met&#xA;  testObj.AssertExpectations(t)&#xA;&#xA;  // remove the handler now so we can add another one that takes precedence&#xA;  mockCall.Unset()&#xA;&#xA;  // return false now instead of true&#xA;  testObj.On(&#34;DoSomething&#34;, mock.Anything).Return(false, nil)&#xA;&#xA;  testObj.AssertExpectations(t)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more information on how to write mock code, check out the &lt;a href=&#34;https://pkg.go.dev/github.com/stretchr/testify/mock&#34;&gt;API documentation for the &lt;code&gt;mock&lt;/code&gt; package&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can use the &lt;a href=&#34;https://vektra.github.io/mockery/latest/&#34;&gt;mockery tool&lt;/a&gt; to autogenerate the mock code against an interface as well, making using mocks much quicker.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/stretchr/testify/suite&#34; title=&#34;API documentation&#34;&gt;&lt;code&gt;suite&lt;/code&gt;&lt;/a&gt; package&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!WARNING] The suite package does not support parallel tests. See &lt;a href=&#34;https://github.com/stretchr/testify/issues/934&#34;&gt;#934&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;The &lt;code&gt;suite&lt;/code&gt; package provides functionality that you might be used to from more common object-oriented languages. With it, you can build a testing suite as a struct, build setup/teardown methods and testing methods on your struct, and run them with &#39;go test&#39; as per normal.&lt;/p&gt; &#xA;&lt;p&gt;An example suite is shown below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Basic imports&#xA;import (&#xA;    &#34;testing&#34;&#xA;    &#34;github.com/stretchr/testify/assert&#34;&#xA;    &#34;github.com/stretchr/testify/suite&#34;&#xA;)&#xA;&#xA;// Define the suite, and absorb the built-in basic suite&#xA;// functionality from testify - including a T() method which&#xA;// returns the current testing context&#xA;type ExampleTestSuite struct {&#xA;    suite.Suite&#xA;    VariableThatShouldStartAtFive int&#xA;}&#xA;&#xA;// Make sure that VariableThatShouldStartAtFive is set to five&#xA;// before each test&#xA;func (suite *ExampleTestSuite) SetupTest() {&#xA;    suite.VariableThatShouldStartAtFive = 5&#xA;}&#xA;&#xA;// All methods that begin with &#34;Test&#34; are run as tests within a&#xA;// suite.&#xA;func (suite *ExampleTestSuite) TestExample() {&#xA;    assert.Equal(suite.T(), 5, suite.VariableThatShouldStartAtFive)&#xA;}&#xA;&#xA;// In order for &#39;go test&#39; to run this suite, we need to create&#xA;// a normal test function and pass our suite to suite.Run&#xA;func TestExampleTestSuite(t *testing.T) {&#xA;    suite.Run(t, new(ExampleTestSuite))&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For a more complete example, using all of the functionality provided by the suite package, look at our &lt;a href=&#34;https://github.com/stretchr/testify/raw/master/suite/suite_test.go&#34;&gt;example testing suite&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;For more information on writing suites, check out the &lt;a href=&#34;https://pkg.go.dev/github.com/stretchr/testify/suite&#34;&gt;API documentation for the &lt;code&gt;suite&lt;/code&gt; package&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Suite&lt;/code&gt; object has assertion methods:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Basic imports&#xA;import (&#xA;    &#34;testing&#34;&#xA;    &#34;github.com/stretchr/testify/suite&#34;&#xA;)&#xA;&#xA;// Define the suite, and absorb the built-in basic suite&#xA;// functionality from testify - including assertion methods.&#xA;type ExampleTestSuite struct {&#xA;    suite.Suite&#xA;    VariableThatShouldStartAtFive int&#xA;}&#xA;&#xA;// Make sure that VariableThatShouldStartAtFive is set to five&#xA;// before each test&#xA;func (suite *ExampleTestSuite) SetupTest() {&#xA;    suite.VariableThatShouldStartAtFive = 5&#xA;}&#xA;&#xA;// All methods that begin with &#34;Test&#34; are run as tests within a&#xA;// suite.&#xA;func (suite *ExampleTestSuite) TestExample() {&#xA;    suite.Equal(suite.VariableThatShouldStartAtFive, 5)&#xA;}&#xA;&#xA;// In order for &#39;go test&#39; to run this suite, we need to create&#xA;// a normal test function and pass our suite to suite.Run&#xA;func TestExampleTestSuite(t *testing.T) {&#xA;    suite.Run(t, new(ExampleTestSuite))&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;p&gt;To install Testify, use &lt;code&gt;go get&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;go get github.com/stretchr/testify&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will then make the following packages available to you:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;github.com/stretchr/testify/assert&#xA;github.com/stretchr/testify/require&#xA;github.com/stretchr/testify/mock&#xA;github.com/stretchr/testify/suite&#xA;github.com/stretchr/testify/http (deprecated)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Import the &lt;code&gt;testify/assert&lt;/code&gt; package into your code using this template:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package yours&#xA;&#xA;import (&#xA;  &#34;testing&#34;&#xA;  &#34;github.com/stretchr/testify/assert&#34;&#xA;)&#xA;&#xA;func TestSomething(t *testing.T) {&#xA;&#xA;  assert.True(t, true, &#34;True is true!&#34;)&#xA;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h1&gt;Staying up to date&lt;/h1&gt; &#xA;&lt;p&gt;To update Testify to the latest version, use &lt;code&gt;go get -u github.com/stretchr/testify&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h1&gt;Supported go versions&lt;/h1&gt; &#xA;&lt;p&gt;We currently support the most recent major Go versions from 1.19 onward.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h1&gt;Contributing&lt;/h1&gt; &#xA;&lt;p&gt;Please feel free to submit issues, fork the repository and send pull requests!&lt;/p&gt; &#xA;&lt;p&gt;When submitting an issue, we ask that you please include a complete test function that demonstrates the issue. Extra credit for those using Testify to write the test code that demonstrates it.&lt;/p&gt; &#xA;&lt;p&gt;Code generation is used. &lt;a href=&#34;https://github.com/search?q=repo%3Astretchr%2Ftestify%20%22Code%20generated%20with%22&amp;amp;type=code&#34;&gt;Look for &lt;code&gt;Code generated with&lt;/code&gt;&lt;/a&gt; at the top of some files. Run &lt;code&gt;go generate ./...&lt;/code&gt; to update generated files.&lt;/p&gt; &#xA;&lt;p&gt;We also chat on the &lt;a href=&#34;https://gophers.slack.com&#34;&gt;Gophers Slack&lt;/a&gt; group in the &lt;code&gt;#testify&lt;/code&gt; and &lt;code&gt;#testify-dev&lt;/code&gt; channels.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;This project is licensed under the terms of the MIT license.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>keploy/keploy</title>
    <updated>2025-03-09T01:41:19Z</updated>
    <id>tag:github.com,2025-03-09:/keploy/keploy</id>
    <link href="https://github.com/keploy/keploy" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Unit and Integration Test generation for Developers. Generate tests and stubs for your application that actually work!&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img align=&#34;center&#34; src=&#34;https://docs.keploy.io/img/keploy-logo-dark.svg?s=200&amp;amp;v=4&#34; height=&#34;40%&#34; width=&#34;40%&#34; alt=&#34;keploy logo&#34;&gt; &lt;/p&gt; &#xA;&lt;h3 align=&#34;center&#34;&gt; &lt;b&gt; ⚡️ API tests faster than unit tests, from user traffic ⚡️ &lt;/b&gt; &lt;/h3&gt; &#xA;&lt;p align=&#34;center&#34;&gt; 🌟 The must-have tool for developers in the AI-Gen era 🌟 &lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4 align=&#34;center&#34;&gt; &lt;a href=&#34;https://twitter.com/Keploy_io&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/follow-%40keployio-1DA1F2?logo=twitter&amp;amp;style=social&#34; alt=&#34;Keploy Twitter&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/Keploy/Keploy/issues&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/stars/keploy/keploy?color=%2523EAC54F&amp;amp;logo=github&amp;amp;label=Help%20us%20reach%2010K%20stars!%20Now%20at:&#34; alt=&#34;Help us reach 10k stars!&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://landscape.cncf.io/?item=app-definition-and-development--continuous-integration-delivery--keploy&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/CNCF%20Landscape-5699C6?logo=cncf&amp;amp;style=social&#34; alt=&#34;Keploy CNCF Landscape&#34;&gt; &lt;/a&gt; &lt;p&gt;&lt;a href=&#34;https://join.slack.com/t/keploy/shared_invite/zt-2poflru6f-_VAuvQfCBT8fDWv1WwSbkw&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Slack-4A154B?style=for-the-badge&amp;amp;logo=slack&amp;amp;logoColor=white&#34; alt=&#34;Slack&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.linkedin.com/company/keploy/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/linkedin-%230077B5.svg?style=for-the-badge&amp;amp;logo=linkedin&amp;amp;logoColor=white&#34; alt=&#34;LinkedIn&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.youtube.com/channel/UC6OTg7F4o0WkmNtSoob34lg&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/YouTube-%23FF0000.svg?style=for-the-badge&amp;amp;logo=YouTube&amp;amp;logoColor=white&#34; alt=&#34;YouTube&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/Keployio&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Twitter-%231DA1F2.svg?style=for-the-badge&amp;amp;logo=Twitter&amp;amp;logoColor=white&#34; alt=&#34;Twitter&#34;&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;a href=&#34;https://trendshift.io/repositories/3262&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://trendshift.io/api/badge/repositories/3262&#34; alt=&#34;keploy%2Fkeploy | Trendshift&#34; style=&#34;width: 250px; height: 55px;&#34; width=&#34;250&#34; height=&#34;55&#34;&gt;&lt;/a&gt;&lt;/p&gt; &lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://keploy.io&#34;&gt;Keploy&lt;/a&gt; is &lt;strong&gt;developer-centric&lt;/strong&gt; API testing tool that creates &lt;strong&gt;tests along with built-in-mocks&lt;/strong&gt;, faster than unit tests.&lt;/p&gt; &#xA;&lt;p&gt;Keploy not only records API calls, but also records database calls and replays them during testing, making it &lt;strong&gt;easy to use, powerful, and extensible&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/keploy/docs/main/static/gif/record-tc.gif&#34; width=&#34;60%&#34; alt=&#34;Convert API calls to test cases&#34;&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;🐰 &lt;strong&gt;Fun fact:&lt;/strong&gt; Keploy uses itself for testing! Check out our swanky coverage badge: &lt;a href=&#34;https://coveralls.io/github/keploy/keploy?branch=main&amp;amp;kill_cache=1&#34;&gt;&lt;img src=&#34;https://coveralls.io/repos/github/keploy/keploy/badge.svg?branch=main&amp;amp;kill_cache=1&#34; alt=&#34;Coverage Status&#34;&gt;&lt;/a&gt; &amp;nbsp;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;🚨 Here for &lt;a href=&#34;https://raw.githubusercontent.com/keploy/keploy/main/README-UnitGen.md&#34;&gt;Unit Test Generator&lt;/a&gt; (ut-gen)?&lt;/h2&gt; &#xA;&lt;p&gt;Keploy has newly launched the world&#39;s first unit test generator(ut-gen) implementation of &lt;a href=&#34;https://arxiv.org/pdf/2402.09171&#34;&gt;Meta LLM research paper&lt;/a&gt;, it understands code semantics and generates meaningful unit tests, aiming to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Automate unit test generation (UTG)&lt;/strong&gt;: Quickly generate comprehensive unit tests and reduce redundant manual effort.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Improve edge cases&lt;/strong&gt;: Extend and improve the scope of automated tests to cover more complex scenarios, often missed manually.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Boost test coverage&lt;/strong&gt;: As codebases grow, ensuring exhaustive coverage should become feasible, aligning with our mission.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;📜 Follow &lt;a href=&#34;https://raw.githubusercontent.com/keploy/keploy/main/README-UnitGen.md&#34;&gt;Unit Test Generator README&lt;/a&gt;! ✅&lt;/h3&gt; &#xA;&lt;h2&gt;📘 Documentation!&lt;/h2&gt; &#xA;&lt;p&gt;Become a Keploy pro with &lt;strong&gt;&lt;a href=&#34;https://keploy.io/docs/&#34;&gt;Keploy Documentation&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/keploy/docs/main/static/gif/record-replay.gif&#34; width=&#34;100%&#34; alt=&#34;Record Replay Testing&#34;&gt; &#xA;&lt;h1&gt;🚀 Quick Installation (API test generator)&lt;/h1&gt; &#xA;&lt;p&gt;Integrate Keploy by installing the agent locally. No code-changes required.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;curl --silent -O -L https://keploy.io/install.sh &amp;amp;&amp;amp; source install.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;🎬 Recording Testcases&lt;/h2&gt; &#xA;&lt;p&gt;Start your app with Keploy to convert API calls as Tests and Mocks/Stubs.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;keploy record -c &#34;CMD_TO_RUN_APP&#34; &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For example, if you&#39;re using a simple Python app the &lt;code&gt;CMD_TO_RUN_APP&lt;/code&gt; would resemble to &lt;code&gt;python main.py&lt;/code&gt;, for Golang &lt;code&gt;go run main.go&lt;/code&gt;, for java &lt;code&gt;java -jar xyz.jar&lt;/code&gt;, for node &lt;code&gt;npm start&lt;/code&gt;..&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;keploy record -c &#34;python main.py&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;🧪 Running Tests&lt;/h2&gt; &#xA;&lt;p&gt;Shut down the databases, redis, kafka or any other services your application uses. Keploy doesn&#39;t need those during test.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;keploy test -c &#34;CMD_TO_RUN_APP&#34; --delay 10&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;✅ Test Coverage Integration&lt;/h2&gt; &#xA;&lt;p&gt;To integrate with your unit-testing library and see combine test coverage, follow this &lt;a href=&#34;https://keploy.io/docs/server/sdk-installation/go/&#34;&gt;test-coverage guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;h4&gt;&lt;strong&gt;If You Had Fun:&lt;/strong&gt; Please leave a 🌟 star on this repo! It&#39;s free and will bring a smile. 😄 👏&lt;/h4&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;One-Click Setup 🚀&lt;/h2&gt; &#xA;&lt;p&gt;Setup and run keploy quickly, with no local machine installation required:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;%5Bhttps://github.dev/Sonichigo/mux-sql%5D(https://github.dev/Sonichigo/mux-sql)&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/GH%20codespace-3670A0?style=for-the-badge&amp;amp;logo=github&amp;amp;logoColor=fff&#34; alt=&#34;GitHub Codescape&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;🤔 Questions?&lt;/h2&gt; &#xA;&lt;p&gt;Reach out to us. We&#39;re here to help!&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://join.slack.com/t/keploy/shared_invite/zt-2poflru6f-_VAuvQfCBT8fDWv1WwSbkw&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Slack-4A154B?style=for-the-badge&amp;amp;logo=slack&amp;amp;logoColor=white&#34; alt=&#34;Slack&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.linkedin.com/company/keploy/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/linkedin-%230077B5.svg?style=for-the-badge&amp;amp;logo=linkedin&amp;amp;logoColor=white&#34; alt=&#34;LinkedIn&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.youtube.com/channel/UC6OTg7F4o0WkmNtSoob34lg&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/YouTube-%23FF0000.svg?style=for-the-badge&amp;amp;logo=YouTube&amp;amp;logoColor=white&#34; alt=&#34;YouTube&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/Keployio&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Twitter-%231DA1F2.svg?style=for-the-badge&amp;amp;logo=Twitter&amp;amp;logoColor=white&#34; alt=&#34;Twitter&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;🌐 Language Support&lt;/h2&gt; &#xA;&lt;p&gt;From Go&#39;s gopher 🐹 to Python&#39;s snake 🐍, we support:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/badge/go-%2300ADD8.svg?style=for-the-badge&amp;amp;logo=go&amp;amp;logoColor=white&#34; alt=&#34;Go&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/java-%23ED8B00.svg?style=for-the-badge&amp;amp;logo=java&amp;amp;logoColor=white&#34; alt=&#34;Java&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/node.js-6DA55F?style=for-the-badge&amp;amp;logo=node.js&amp;amp;logoColor=white&#34; alt=&#34;NodeJS&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Rust-darkred?style=for-the-badge&amp;amp;logo=rust&amp;amp;logoColor=white&#34; alt=&#34;Rust&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/csharp-purple?style=for-the-badge&amp;amp;logo=csharp&amp;amp;logoColor=white&#34; alt=&#34;C#&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/python-3670A0?style=for-the-badge&amp;amp;logo=python&amp;amp;logoColor=ffdd54&#34; alt=&#34;Python&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;🫰 Keploy Adopters 🧡&lt;/h2&gt; &#xA;&lt;p&gt;So you and your organisation are using Keploy? That’s great. Please add yourselves to &lt;a href=&#34;https://github.com/orgs/keploy/discussions/1765&#34;&gt;&lt;strong&gt;this list,&lt;/strong&gt;&lt;/a&gt; and we&#39;ll send you goodies! 💖&lt;/p&gt; &#xA;&lt;p&gt;We are happy and proud to have you all as part of our community! 💖&lt;/p&gt; &#xA;&lt;h2&gt;🎩 How&#39;s the Magic Happen?&lt;/h2&gt; &#xA;&lt;p&gt;Keploy proxy captures and replays &lt;strong&gt;ALL&lt;/strong&gt; (CRUD operations, including non-idempotent APIs) of your app&#39;s network interactions.&lt;/p&gt; &#xA;&lt;p&gt;Take a journey to &lt;strong&gt;&lt;a href=&#34;https://keploy.io/docs/keploy-explained/how-keploy-works/&#34;&gt;How Keploy Works?&lt;/a&gt;&lt;/strong&gt; to discover the tricks behind the curtain!&lt;/p&gt; &#xA;&lt;p&gt;Here are Keploy&#39;s core features: 🛠&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;♻️ &lt;strong&gt;Combined Test Coverage:&lt;/strong&gt; Merge your Keploy Tests with your fave testing libraries(JUnit, go-test, py-test, jest) to see a combined test coverage.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;🤖 &lt;strong&gt;EBPF Instrumentation:&lt;/strong&gt; Keploy uses EBPF like a secret sauce to make integration code-less, language-agnostic, and oh-so-lightweight.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;🌐 &lt;strong&gt;CI/CD Integration:&lt;/strong&gt; Run tests with mocks anywhere you like—locally on the CLI, in your CI pipeline (Jenkins, Github Actions..) , or even across a Kubernetes cluster.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;📽️ &lt;strong&gt;Record-Replay Complex Flows:&lt;/strong&gt; Keploy can record and replay complex, distributed API flows as mocks and stubs. It&#39;s like having a time machine for your tests—saving you tons of time!&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;🎭 &lt;strong&gt;Multi-Purpose Mocks:&lt;/strong&gt; You can also use keploy Mocks, as server Tests!&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;👨🏻‍💻 Let&#39;s Build Together! 👩🏻‍💻&lt;/h2&gt; &#xA;&lt;p&gt;Whether you&#39;re a newbie coder or a wizard 🧙‍♀️, your perspective is golden. Take a peek at our:&lt;/p&gt; &#xA;&lt;p&gt;📜 &lt;a href=&#34;https://github.com/keploy/keploy/raw/main/CONTRIBUTING.md&#34;&gt;Contribution Guidelines&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;❤️ &lt;a href=&#34;https://github.com/keploy/keploy/raw/main/CODE_OF_CONDUCT.md&#34;&gt;Code of Conduct&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;🐲 Current Limitations!&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Unit Testing:&lt;/strong&gt; While Keploy is designed to run alongside unit testing frameworks (Go test, JUnit..) and can add to the overall code coverage, it still generates integration tests.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Production Lands&lt;/strong&gt;: Keploy is currently focused on generating tests for developers. These tests can be captured from any environment, but we have not tested it on high volume production environments. This would need robust deduplication to avoid too many redundant tests being captured. We do have ideas on building a robust deduplication system &lt;a href=&#34;https://github.com/keploy/keploy/issues/27&#34;&gt;#27&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;✨ Resources!&lt;/h2&gt; &#xA;&lt;p&gt;🤔 &lt;a href=&#34;https://keploy.io/docs/keploy-explained/faq/&#34;&gt;FAQs&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;🕵️‍️ &lt;a href=&#34;https://keploy.io/docs/keploy-explained/why-keploy/&#34;&gt;Why Keploy&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;⚙️ &lt;a href=&#34;https://keploy.io/docs/application-development/&#34;&gt;Installation Guide&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;📖 &lt;a href=&#34;https://keploy.io/docs/keploy-explained/contribution-guide/&#34;&gt;Contribution Guide&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>mark3labs/mcp-go</title>
    <updated>2025-03-09T01:41:19Z</updated>
    <id>tag:github.com,2025-03-09:/mark3labs/mcp-go</id>
    <link href="https://github.com/mark3labs/mcp-go" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Go implementation of the Model Context Protocol (MCP), enabling seamless integration between LLM applications and external data sources and tools.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;MCP Go 🚀&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/mark3labs/mcp-go/actions/workflows/ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/mark3labs/mcp-go/actions/workflows/ci.yml/badge.svg?branch=main&#34; alt=&#34;Build&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/mark3labs/mcp-go&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/mark3labs/mcp-go?cache&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pkg.go.dev/github.com/mark3labs/mcp-go&#34;&gt;&lt;img src=&#34;https://pkg.go.dev/badge/github.com/mark3labs/mcp-go.svg?sanitize=true&#34; alt=&#34;GoDoc&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt;&lt;strong&gt;A Go implementation of the Model Context Protocol (MCP), enabling seamless integration between LLM applications and external data sources and tools.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;    &#34;context&#34;&#xA;    &#34;fmt&#34;&#xA;&#xA;    &#34;github.com/mark3labs/mcp-go/mcp&#34;&#xA;    &#34;github.com/mark3labs/mcp-go/server&#34;&#xA;)&#xA;&#xA;func main() {&#xA;    // Create MCP server&#xA;    s := server.NewMCPServer(&#xA;        &#34;Demo 🚀&#34;,&#xA;        &#34;1.0.0&#34;,&#xA;    )&#xA;&#xA;    // Add tool&#xA;    tool := mcp.NewTool(&#34;hello_world&#34;,&#xA;        mcp.WithDescription(&#34;Say hello to someone&#34;),&#xA;        mcp.WithString(&#34;name&#34;,&#xA;            mcp.Required(),&#xA;            mcp.Description(&#34;Name of the person to greet&#34;),&#xA;        ),&#xA;    )&#xA;&#xA;    // Add tool handler&#xA;    s.AddTool(tool, helloHandler)&#xA;&#xA;    // Start the stdio server&#xA;    if err := server.ServeStdio(s); err != nil {&#xA;        fmt.Printf(&#34;Server error: %v\n&#34;, err)&#xA;    }&#xA;}&#xA;&#xA;func helloHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {&#xA;    name, ok := request.Params.Arguments[&#34;name&#34;].(string)&#xA;    if !ok {&#xA;        return mcp.NewToolResultError(&#34;name must be a string&#34;), nil&#xA;    }&#xA;&#xA;    return mcp.NewToolResultText(fmt.Sprintf(&#34;Hello, %s!&#34;, name)), nil&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;That&#39;s it!&lt;/p&gt; &#xA;&lt;p&gt;MCP Go handles all the complex protocol details and server management, so you can focus on building great tools. It aims to be high-level and easy to use.&lt;/p&gt; &#xA;&lt;h3&gt;Key features:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Fast&lt;/strong&gt;: High-level interface means less code and faster development&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Simple&lt;/strong&gt;: Build MCP servers with minimal boilerplate&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Complete&lt;/strong&gt;*: MCP Go aims to provide a full implementation of the core MCP specification&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;(*emphasis on &lt;em&gt;aims&lt;/em&gt;)&lt;/p&gt; &#xA;&lt;p&gt;🚨 🚧 🏗️ &lt;em&gt;MCP Go is under active development, as is the MCP specification itself. Core features are working but some advanced capabilities are still in progress.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;!-- omit in toc --&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mark3labs/mcp-go/main/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mark3labs/mcp-go/main/#quickstart&#34;&gt;Quickstart&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mark3labs/mcp-go/main/#what-is-mcp&#34;&gt;What is MCP?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mark3labs/mcp-go/main/#core-concepts&#34;&gt;Core Concepts&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mark3labs/mcp-go/main/#server&#34;&gt;Server&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mark3labs/mcp-go/main/#resources&#34;&gt;Resources&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mark3labs/mcp-go/main/#tools&#34;&gt;Tools&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mark3labs/mcp-go/main/#prompts&#34;&gt;Prompts&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mark3labs/mcp-go/main/#examples&#34;&gt;Examples&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mark3labs/mcp-go/main/#contributing&#34;&gt;Contributing&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mark3labs/mcp-go/main/#prerequisites&#34;&gt;Prerequisites&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mark3labs/mcp-go/main/#installation-1&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mark3labs/mcp-go/main/#testing&#34;&gt;Testing&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mark3labs/mcp-go/main/#opening-a-pull-request&#34;&gt;Opening a Pull Request&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;go get github.com/mark3labs/mcp-go&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Quickstart&lt;/h2&gt; &#xA;&lt;p&gt;Let&#39;s create a simple MCP server that exposes a calculator tool and some data:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;    &#34;context&#34;&#xA;    &#34;fmt&#34;&#xA;&#xA;    &#34;github.com/mark3labs/mcp-go/mcp&#34;&#xA;    &#34;github.com/mark3labs/mcp-go/server&#34;&#xA;)&#xA;&#xA;func main() {&#xA;    // Create a new MCP server&#xA;    s := server.NewMCPServer(&#xA;        &#34;Calculator Demo&#34;,&#xA;        &#34;1.0.0&#34;,&#xA;        server.WithResourceCapabilities(true, true),&#xA;        server.WithLogging(),&#xA;    )&#xA;&#xA;    // Add a calculator tool&#xA;    calculatorTool := mcp.NewTool(&#34;calculate&#34;,&#xA;        mcp.WithDescription(&#34;Perform basic arithmetic operations&#34;),&#xA;        mcp.WithString(&#34;operation&#34;,&#xA;            mcp.Required(),&#xA;            mcp.Description(&#34;The operation to perform (add, subtract, multiply, divide)&#34;),&#xA;            mcp.Enum(&#34;add&#34;, &#34;subtract&#34;, &#34;multiply&#34;, &#34;divide&#34;),&#xA;        ),&#xA;        mcp.WithNumber(&#34;x&#34;,&#xA;            mcp.Required(),&#xA;            mcp.Description(&#34;First number&#34;),&#xA;        ),&#xA;        mcp.WithNumber(&#34;y&#34;,&#xA;            mcp.Required(),&#xA;            mcp.Description(&#34;Second number&#34;),&#xA;        ),&#xA;    )&#xA;&#xA;    // Add the calculator handler&#xA;    s.AddTool(calculatorTool, func(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {&#xA;        op := request.Params.Arguments[&#34;operation&#34;].(string)&#xA;        x := request.Params.Arguments[&#34;x&#34;].(float64)&#xA;        y := request.Params.Arguments[&#34;y&#34;].(float64)&#xA;&#xA;        var result float64&#xA;        switch op {&#xA;        case &#34;add&#34;:&#xA;            result = x + y&#xA;        case &#34;subtract&#34;:&#xA;            result = x - y&#xA;        case &#34;multiply&#34;:&#xA;            result = x * y&#xA;        case &#34;divide&#34;:&#xA;            if y == 0 {&#xA;                return mcp.NewToolResultError(&#34;Cannot divide by zero&#34;), nil&#xA;            }&#xA;            result = x / y&#xA;        }&#xA;&#xA;        return mcp.NewToolResultText(fmt.Sprintf(&#34;%.2f&#34;, result)), nil&#xA;    })&#xA;&#xA;    // Start the server&#xA;    if err := server.ServeStdio(s); err != nil {&#xA;        fmt.Printf(&#34;Server error: %v\n&#34;, err)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;What is MCP?&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://modelcontextprotocol.io&#34;&gt;Model Context Protocol (MCP)&lt;/a&gt; lets you build servers that expose data and functionality to LLM applications in a secure, standardized way. Think of it like a web API, but specifically designed for LLM interactions. MCP servers can:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Expose data through &lt;strong&gt;Resources&lt;/strong&gt; (think of these sort of like GET endpoints; they are used to load information into the LLM&#39;s context)&lt;/li&gt; &#xA; &lt;li&gt;Provide functionality through &lt;strong&gt;Tools&lt;/strong&gt; (sort of like POST endpoints; they are used to execute code or otherwise produce a side effect)&lt;/li&gt; &#xA; &lt;li&gt;Define interaction patterns through &lt;strong&gt;Prompts&lt;/strong&gt; (reusable templates for LLM interactions)&lt;/li&gt; &#xA; &lt;li&gt;And more!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Core Concepts&lt;/h2&gt; &#xA;&lt;h3&gt;Server&lt;/h3&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Show Server Examples&lt;/summary&gt; &#xA; &lt;p&gt;The server is your core interface to the MCP protocol. It handles connection management, protocol compliance, and message routing:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Create a basic server&#xA;s := server.NewMCPServer(&#xA;    &#34;My Server&#34;,  // Server name&#xA;    &#34;1.0.0&#34;,     // Version&#xA;)&#xA;&#xA;// Start the server using stdio&#xA;if err := server.ServeStdio(s); err != nil {&#xA;    log.Fatalf(&#34;Server error: %v&#34;, err)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Resources&lt;/h3&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Show Resource Examples&lt;/summary&gt; Resources are how you expose data to LLMs. They can be anything - files, API responses, database queries, system information, etc. Resources can be: &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Static (fixed URI)&lt;/li&gt; &#xA;  &lt;li&gt;Dynamic (using URI templates)&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;p&gt;Here&#39;s a simple example of a static resource:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Static resource example - exposing a README file&#xA;resource := mcp.NewResource(&#xA;    &#34;docs://readme&#34;,&#xA;    &#34;Project README&#34;,&#xA;    mcp.WithResourceDescription(&#34;The project&#39;s README file&#34;), &#xA;    mcp.WithMIMEType(&#34;text/markdown&#34;),&#xA;)&#xA;&#xA;// Add resource with its handler&#xA;s.AddResource(resource, func(ctx context.Context, request mcp.ReadResourceRequest) ([]mcp.ResourceContents, error) {&#xA;    content, err := os.ReadFile(&#34;README.md&#34;)&#xA;    if err != nil {&#xA;        return nil, err&#xA;    }&#xA;    &#xA;    return []mcp.ResourceContents{&#xA;        mcp.TextResourceContents{&#xA;            URI:      &#34;docs://readme&#34;,&#xA;            MIMEType: &#34;text/markdown&#34;,&#xA;            Text:     string(content),&#xA;        },&#xA;    }, nil&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;And here&#39;s an example of a dynamic resource using a template:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Dynamic resource example - user profiles by ID&#xA;template := mcp.NewResourceTemplate(&#xA;    &#34;users://{id}/profile&#34;,&#xA;    &#34;User Profile&#34;,&#xA;    mcp.WithTemplateDescription(&#34;Returns user profile information&#34;),&#xA;    mcp.WithTemplateMIMEType(&#34;application/json&#34;),&#xA;)&#xA;&#xA;// Add template with its handler&#xA;s.AddResourceTemplate(template, func(ctx context.Context, request mcp.ReadResourceRequest) ([]mcp.ResourceContents, error) {&#xA;    // Extract ID from the URI using regex matching&#xA;    // The server automatically matches URIs to templates&#xA;    userID := extractIDFromURI(request.Params.URI)&#xA;    &#xA;    profile, err := getUserProfile(userID)  // Your DB/API call here&#xA;    if err != nil {&#xA;        return nil, err&#xA;    }&#xA;    &#xA;    return []mcp.ResourceContents{&#xA;        mcp.TextResourceContents{&#xA;            URI:      request.Params.URI,&#xA;            MIMEType: &#34;application/json&#34;,&#xA;            Text:     profile,&#xA;        },&#xA;    }, nil&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;The examples are simple but demonstrate the core concepts. Resources can be much more sophisticated - serving multiple contents, integrating with databases or external APIs, etc.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Tools&lt;/h3&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Show Tool Examples&lt;/summary&gt; &#xA; &lt;p&gt;Tools let LLMs take actions through your server. Unlike resources, tools are expected to perform computation and have side effects. They&#39;re similar to POST endpoints in a REST API.&lt;/p&gt; &#xA; &lt;p&gt;Simple calculation example:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;calculatorTool := mcp.NewTool(&#34;calculate&#34;,&#xA;    mcp.WithDescription(&#34;Perform basic arithmetic calculations&#34;),&#xA;    mcp.WithString(&#34;operation&#34;,&#xA;        mcp.Required(),&#xA;        mcp.Description(&#34;The arithmetic operation to perform&#34;),&#xA;        mcp.Enum(&#34;add&#34;, &#34;subtract&#34;, &#34;multiply&#34;, &#34;divide&#34;),&#xA;    ),&#xA;    mcp.WithNumber(&#34;x&#34;,&#xA;        mcp.Required(),&#xA;        mcp.Description(&#34;First number&#34;),&#xA;    ),&#xA;    mcp.WithNumber(&#34;y&#34;,&#xA;        mcp.Required(),&#xA;        mcp.Description(&#34;Second number&#34;),&#xA;    ),&#xA;)&#xA;&#xA;s.AddTool(calculatorTool, func(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {&#xA;    op := request.Params.Arguments[&#34;operation&#34;].(string)&#xA;    x := request.Params.Arguments[&#34;x&#34;].(float64)&#xA;    y := request.Params.Arguments[&#34;y&#34;].(float64)&#xA;&#xA;    var result float64&#xA;    switch op {&#xA;    case &#34;add&#34;:&#xA;        result = x + y&#xA;    case &#34;subtract&#34;:&#xA;        result = x - y&#xA;    case &#34;multiply&#34;:&#xA;        result = x * y&#xA;    case &#34;divide&#34;:&#xA;        if y == 0 {&#xA;            return mcp.NewToolResultError(&#34;Division by zero is not allowed&#34;), nil&#xA;        }&#xA;        result = x / y&#xA;    }&#xA;    &#xA;    return mcp.FormatNumberResult(result), nil&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;HTTP request example:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;httpTool := mcp.NewTool(&#34;http_request&#34;,&#xA;    mcp.WithDescription(&#34;Make HTTP requests to external APIs&#34;),&#xA;    mcp.WithString(&#34;method&#34;,&#xA;        mcp.Required(),&#xA;        mcp.Description(&#34;HTTP method to use&#34;),&#xA;        mcp.Enum(&#34;GET&#34;, &#34;POST&#34;, &#34;PUT&#34;, &#34;DELETE&#34;),&#xA;    ),&#xA;    mcp.WithString(&#34;url&#34;,&#xA;        mcp.Required(),&#xA;        mcp.Description(&#34;URL to send the request to&#34;),&#xA;        mcp.Pattern(&#34;^https?://.*&#34;),&#xA;    ),&#xA;    mcp.WithString(&#34;body&#34;,&#xA;        mcp.Description(&#34;Request body (for POST/PUT)&#34;),&#xA;    ),&#xA;)&#xA;&#xA;s.AddTool(httpTool, func(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {&#xA;    method := request.Params.Arguments[&#34;method&#34;].(string)&#xA;    url := request.Params.Arguments[&#34;url&#34;].(string)&#xA;    body := &#34;&#34;&#xA;    if b, ok := request.Params.Arguments[&#34;body&#34;].(string); ok {&#xA;        body = b&#xA;    }&#xA;&#xA;    // Create and send request&#xA;    var req *http.Request&#xA;    var err error&#xA;    if body != &#34;&#34; {&#xA;        req, err = http.NewRequest(method, url, strings.NewReader(body))&#xA;    } else {&#xA;        req, err = http.NewRequest(method, url, nil)&#xA;    }&#xA;    if err != nil {&#xA;        return mcp.NewToolResultError(fmt.Sprintf(&#34;Failed to create request: %v&#34;, err)), nil&#xA;    }&#xA;&#xA;    client := &amp;amp;http.Client{}&#xA;    resp, err := client.Do(req)&#xA;    if err != nil {&#xA;        return mcp.NewToolResultError(fmt.Sprintf(&#34;Request failed: %v&#34;, err)), nil&#xA;    }&#xA;    defer resp.Body.Close()&#xA;&#xA;    // Return response&#xA;    respBody, err := io.ReadAll(resp.Body)&#xA;    if err != nil {&#xA;        return mcp.NewToolResultError(fmt.Sprintf(&#34;Failed to read response: %v&#34;, err)), nil&#xA;    }&#xA;&#xA;    return mcp.NewToolResultText(fmt.Sprintf(&#34;Status: %d\nBody: %s&#34;, resp.StatusCode, string(respBody))), nil&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Tools can be used for any kind of computation or side effect:&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Database queries&lt;/li&gt; &#xA;  &lt;li&gt;File operations&lt;/li&gt; &#xA;  &lt;li&gt;External API calls&lt;/li&gt; &#xA;  &lt;li&gt;Calculations&lt;/li&gt; &#xA;  &lt;li&gt;System operations&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;p&gt;Each tool should:&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Have a clear description&lt;/li&gt; &#xA;  &lt;li&gt;Validate inputs&lt;/li&gt; &#xA;  &lt;li&gt;Handle errors gracefully&lt;/li&gt; &#xA;  &lt;li&gt;Return structured responses&lt;/li&gt; &#xA;  &lt;li&gt;Use appropriate result types&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Prompts&lt;/h3&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Show Prompt Examples&lt;/summary&gt; &#xA; &lt;p&gt;Prompts are reusable templates that help LLMs interact with your server effectively. They&#39;re like &#34;best practices&#34; encoded into your server. Here are some examples:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Simple greeting prompt&#xA;s.AddPrompt(mcp.NewPrompt(&#34;greeting&#34;,&#xA;    mcp.WithPromptDescription(&#34;A friendly greeting prompt&#34;),&#xA;    mcp.WithArgument(&#34;name&#34;,&#xA;        mcp.ArgumentDescription(&#34;Name of the person to greet&#34;),&#xA;    ),&#xA;), func(ctx context.Context, request mcp.GetPromptRequest) (*mcp.GetPromptResult, error) {&#xA;    name := request.Params.Arguments[&#34;name&#34;].(string)&#xA;    if name == &#34;&#34; {&#xA;        name = &#34;friend&#34;&#xA;    }&#xA;    &#xA;    return mcp.NewGetPromptResult(&#xA;        &#34;A friendly greeting&#34;,&#xA;        []mcp.PromptMessage{&#xA;            mcp.NewPromptMessage(&#xA;                mcp.RoleAssistant,&#xA;                mcp.NewTextContent(fmt.Sprintf(&#34;Hello, %s! How can I help you today?&#34;, name)),&#xA;            ),&#xA;        },&#xA;    ), nil&#xA;})&#xA;&#xA;// Code review prompt with embedded resource&#xA;s.AddPrompt(mcp.NewPrompt(&#34;code_review&#34;,&#xA;    mcp.WithPromptDescription(&#34;Code review assistance&#34;),&#xA;    mcp.WithArgument(&#34;pr_number&#34;,&#xA;        mcp.ArgumentDescription(&#34;Pull request number to review&#34;),&#xA;        mcp.RequiredArgument(),&#xA;    ),&#xA;), func(ctx context.Context, request mcp.GetPromptRequest) (*mcp.GetPromptResult, error) {&#xA;    prNumber := request.Params.Arguments[&#34;pr_number&#34;].(string)&#xA;    if prNumber == &#34;&#34; {&#xA;        return nil, fmt.Errorf(&#34;pr_number is required&#34;)&#xA;    }&#xA;    &#xA;    return mcp.NewGetPromptResult(&#xA;        &#34;Code review assistance&#34;,&#xA;        []mcp.PromptMessage{&#xA;            mcp.NewPromptMessage(&#xA;                mcp.RoleSystem,&#xA;                mcp.NewTextContent(&#34;You are a helpful code reviewer. Review the changes and provide constructive feedback.&#34;),&#xA;            ),&#xA;            mcp.NewPromptMessage(&#xA;                mcp.RoleAssistant,&#xA;                mcp.NewEmbeddedResource(mcp.ResourceContents{&#xA;                    URI: fmt.Sprintf(&#34;git://pulls/%s/diff&#34;, prNumber),&#xA;                    MIMEType: &#34;text/x-diff&#34;,&#xA;                }),&#xA;            ),&#xA;        },&#xA;    ), nil&#xA;})&#xA;&#xA;// Database query builder prompt&#xA;s.AddPrompt(mcp.NewPrompt(&#34;query_builder&#34;,&#xA;    mcp.WithPromptDescription(&#34;SQL query builder assistance&#34;),&#xA;    mcp.WithArgument(&#34;table&#34;,&#xA;        mcp.ArgumentDescription(&#34;Name of the table to query&#34;),&#xA;        mcp.RequiredArgument(),&#xA;    ),&#xA;), func(ctx context.Context, request mcp.GetPromptRequest) (*mcp.GetPromptResult, error) {&#xA;    tableName := request.Params.Arguments[&#34;table&#34;].(string)&#xA;    if tableName == &#34;&#34; {&#xA;        return nil, fmt.Errorf(&#34;table name is required&#34;)&#xA;    }&#xA;    &#xA;    return mcp.NewGetPromptResult(&#xA;        &#34;SQL query builder assistance&#34;,&#xA;        []mcp.PromptMessage{&#xA;            mcp.NewPromptMessage(&#xA;                mcp.RoleSystem,&#xA;                mcp.NewTextContent(&#34;You are a SQL expert. Help construct efficient and safe queries.&#34;),&#xA;            ),&#xA;            mcp.NewPromptMessage(&#xA;                mcp.RoleAssistant,&#xA;                mcp.NewEmbeddedResource(mcp.ResourceContents{&#xA;                    URI: fmt.Sprintf(&#34;db://schema/%s&#34;, tableName),&#xA;                    MIMEType: &#34;application/json&#34;,&#xA;                }),&#xA;            ),&#xA;        },&#xA;    ), nil&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Prompts can include:&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;System instructions&lt;/li&gt; &#xA;  &lt;li&gt;Required arguments&lt;/li&gt; &#xA;  &lt;li&gt;Embedded resources&lt;/li&gt; &#xA;  &lt;li&gt;Multiple messages&lt;/li&gt; &#xA;  &lt;li&gt;Different content types (text, images, etc.)&lt;/li&gt; &#xA;  &lt;li&gt;Custom URI schemes&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;p&gt;For examples, see the &lt;code&gt;examples/&lt;/code&gt; directory.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;h3&gt;Open Developer Guide&lt;/h3&gt;&lt;/summary&gt; &#xA; &lt;h3&gt;Prerequisites&lt;/h3&gt; &#xA; &lt;p&gt;Go version &amp;gt;= 1.23&lt;/p&gt; &#xA; &lt;h3&gt;Installation&lt;/h3&gt; &#xA; &lt;p&gt;Create a fork of this repository, then clone it:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/mark3labs/mcp-go.git&#xA;cd mcp-go&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h3&gt;Testing&lt;/h3&gt; &#xA; &lt;p&gt;Please make sure to test any new functionality. Your tests should be simple and atomic and anticipate change rather than cement complex patterns.&lt;/p&gt; &#xA; &lt;p&gt;Run tests from the root directory:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;go test -v &#39;./...&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h3&gt;Opening a Pull Request&lt;/h3&gt; &#xA; &lt;p&gt;Fork the repository and create a new branch:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git checkout -b my-branch&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Make your changes and commit them:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git add . &amp;amp;&amp;amp; git commit -m &#34;My changes&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Push your changes to your fork:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git push origin my-branch&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Feel free to reach out in a GitHub issue or discussion if you have any questions!&lt;/p&gt; &#xA;&lt;/details&gt;</summary>
  </entry>
</feed>