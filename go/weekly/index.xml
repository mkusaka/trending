<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-12-18T01:44:40Z</updated>
  <subtitle>Weekly Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>awslabs/eks-node-viewer</title>
    <updated>2022-12-18T01:44:40Z</updated>
    <id>tag:github.com,2022-12-18:/awslabs/eks-node-viewer</id>
    <link href="https://github.com/awslabs/eks-node-viewer" rel="alternate"></link>
    <summary type="html">&lt;p&gt;EKS Node Viewer&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/awslabs/eks-node-viewer/raw/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-Apache%202.0-ff69b4.svg?sanitize=true&#34; alt=&#34;GitHub License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/awslabs/eks-node-viewer/issues&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/contributions-welcome-brightgreen.svg?style=flat&#34; alt=&#34;contributions welcome&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;eks-node-viewer&lt;/code&gt; is a tool for visualizing dynamic node usage within a cluster. It was originally developed as an internal tool at AWS for demonstrating consolidation with &lt;a href=&#34;https://karpenter.sh/&#34;&gt;Karpenter&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/awslabs/eks-node-viewer/main/.static/screenshot.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Talks Using eks-node-viewer&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=BnksdJ3oOEs&#34;&gt;Containers from the Couch: Workload Consolidation with Karpenter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=OB7IZolZk78&#34;&gt;AWS re:Invent 2022 - Kubernetes virtually anywhere, for everyone&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;go install github.com/awslabs/eks-node-viewer/cmd/eks-node-viewer@latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: This will install it to your &lt;code&gt;GOBIN&lt;/code&gt; directory, typically &lt;code&gt;~/go/bin&lt;/code&gt; if it is unconfigured.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;Usage of ./eks-node-viewer:&#xA;  -context string&#xA;    &#x9;Name of the kubernetes context to use&#xA;  -disable-pricing&#xA;    &#x9;Disable pricing lookups&#xA;  -extra-labels string&#xA;    &#x9;A comma separated set of extra node labels to display&#xA;  -kubeconfig string&#xA;    &#x9;Absolute path to the kubeconfig file (default &#34;~/.kube/config&#34;)&#xA;  -node-selector string&#xA;    &#x9;Node label selector used to filter nodes, if empty all nodes are selected&#xA;  -resources string&#xA;    &#x9;List of comma separated resources to monitor (default &#34;cpu&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Examples&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# Standard usage&#xA;eks-node-viewer&#xA;# Karenter nodes only&#xA;eks-node-viewer --node-selector &#34;karpenter.sh/provisioner-name&#34;&#xA;# Display both CPU and Memory Usage &#xA;eks-node-viewer --resources cpu,memory&#xA;# Specify a particular AWS profile and region &#xA;AWS_PROFILE=myprofile AWS_REGION=us-west-2 &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Default Options&lt;/h3&gt; &#xA;&lt;p&gt;You can supply default options to &lt;code&gt;eks-node-viewer&lt;/code&gt; by creating a file named &lt;code&gt;.eks-node-viewer&lt;/code&gt; in your home directory and specifying options there. The format is &lt;code&gt;option-name=value&lt;/code&gt; where the option names are the command line flags:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;# select only Karpenter managed nodes&#xA;node-selector=karpenter.sh/provisioner-name&#xA;&#xA;# display both CPU and memory&#xA;resources=cpu,memory&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Troubleshooting&lt;/h3&gt; &#xA;&lt;h4&gt;NoCredentialProviders: no valid providers in chain. Deprecated.&lt;/h4&gt; &#xA;&lt;p&gt;This CLI relies on AWS credentials to access pricing data if you don&#39;t use the &lt;code&gt;--disable-pricing&lt;/code&gt; option. You must have credentials configured via &lt;code&gt;~/aws/credentials&lt;/code&gt;, &lt;code&gt;~/.aws/config&lt;/code&gt;, environment variables, or some other credential provider chain.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://docs.aws.amazon.com/sdk-for-go/api/aws/session/&#34;&gt;credential provider documentation&lt;/a&gt; for more.&lt;/p&gt; &#xA;&lt;h4&gt;I get an error of &lt;code&gt;creating client, exec plugin: invalid apiVersion &#34;client.authentication.k8s.io/v1alpha1&#34;&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Updating your AWS cli to the latest version and &lt;a href=&#34;https://docs.aws.amazon.com/cli/latest/reference/eks/update-kubeconfig.html&#34;&gt;updating your kubeconfig&lt;/a&gt; should resolve this issue.&lt;/p&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;h3&gt;Building&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ make build&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>m1guelpf/chatgpt-telegram</title>
    <updated>2022-12-18T01:44:40Z</updated>
    <id>tag:github.com,2022-12-18:/m1guelpf/chatgpt-telegram</id>
    <link href="https://github.com/m1guelpf/chatgpt-telegram" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Run your own GPTChat Telegram bot, with a single command!&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ChatGPT-bot&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Interact with ChatGPT&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Go CLI to fuels a Telegram bot that lets you interact with &lt;a href=&#34;https://openai.com/blog/chatgpt/&#34;&gt;ChatGPT&lt;/a&gt;, a large language model trained by OpenAI.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Download the file corresponding to your OS in the &lt;a href=&#34;https://github.com/m1guelpf/chatgpt-telegram/releases/latest&#34;&gt;releases page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;chatgpt-telegram-Darwin-amd64&lt;/code&gt;: macOS (Intel)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;chatgpt-telegram-Darwin-arm64&lt;/code&gt;: macOS (M1)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;chatgpt-telegram-Linux-amd64&lt;/code&gt;: Linux&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;chatgpt-telegram-Linux-arm64&lt;/code&gt;: Linux (ARM)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;chatgpt-telegram-Win-amd64&lt;/code&gt;: Windows&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;After you download the file, extract it into a folder and open the &lt;code&gt;env.example&lt;/code&gt; file with a text editor and fill in your credentials.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;TELEGRAM_TOKEN&lt;/code&gt;: Your Telegram Bot token &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Follow &lt;a href=&#34;https://core.telegram.org/bots/tutorial#obtain-your-bot-token&#34;&gt;this guide&lt;/a&gt; to create a bot and get the token.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;TELEGRAM_ID&lt;/code&gt; (Optional): Your Telegram User ID &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;If you set this, only you will be able to interact with the bot.&lt;/li&gt; &#xA;   &lt;li&gt;To get your ID, message &lt;code&gt;@userinfobot&lt;/code&gt; on Telegram.&lt;/li&gt; &#xA;   &lt;li&gt;Multiple IDs can be provided, separated by commas.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;EDIT_WAIT_SECONDS&lt;/code&gt; (Optional): Amount of seconds to wait between edits &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;This is set to &lt;code&gt;1&lt;/code&gt; by default, but you can increase if you start getting a lot of &lt;code&gt;Too Many Requests&lt;/code&gt; errors.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Save the file, and rename it to &lt;code&gt;.env&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; Make sure you rename the file to &lt;em&gt;exactly&lt;/em&gt; &lt;code&gt;.env&lt;/code&gt;! The program won&#39;t work otherwise.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Finally, open the terminal in your computer (if you&#39;re on windows, look for &lt;code&gt;PowerShell&lt;/code&gt;), navigate to the path you extracted the above file (you can use &lt;code&gt;cd dirname&lt;/code&gt; to navigate to a directory, ask ChatGPT if you need more assistance ðŸ˜‰) and run &lt;code&gt;./chatgpt-telegram&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Running with Docker&lt;/h3&gt; &#xA;&lt;p&gt;If you&#39;re trying to run this on a server with an existing Docker setup, you might want to use our Docker image instead.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker pull ghcr.io/m1guelpf/chatgpt-telegram&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here&#39;s how you&#39;d set things up with &lt;code&gt;docker-compose&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;services:&#xA;  chatgpt-telegram:&#xA;    image: ghcr.io/m1guelpf/chatgpt-telegram&#xA;    container_name: chatgpt-telegram&#xA;    volumes:&#xA;      # your &#34;.config&#34; local folder must include a &#34;chatgpt.json&#34; file&#xA;      - .config/:/root/.config&#xA;    environment:&#xA;      - TELEGRAM_ID=&#xA;      - TELEGRAM_TOKEN=&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; The docker setup is optimized for the Browserless authentication mechanism, described below. Make sure you update the &lt;code&gt;.config/chatgpt.json&lt;/code&gt; file in this repo with your session token before running.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Authentication&lt;/h2&gt; &#xA;&lt;p&gt;By default, the program will launch a browser for you to sign into your account, and close it once you&#39;re signed in. If this setup doesn&#39;t work for you (there are issues with the browser starting, you want to run this in a computer with no screen, etc.), you can manually extract your session from your browser instead.&lt;/p&gt; &#xA;&lt;p&gt;To do this, first sign in to ChatGPT on your browser, then open the Developer Tools (right click anywhere in the page, then click &#34;Inspect&#34;), click on the Application tab and then on the Cookies section, and copy the value of the &lt;code&gt;__Secure-next-auth.session-token&lt;/code&gt; cookie.&lt;/p&gt; &#xA;&lt;p&gt;You will then have to create a config file in the following location depending on your OS (replace &lt;code&gt;YOUR_USERNAME_HERE&lt;/code&gt; with your username:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;~/.config/chatgpt.json&lt;/code&gt;: Linux&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;C:\Users\YOUR_USERNAME_HERE\AppData\Roaming\chatgpt.json&lt;/code&gt;: Windows&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;/Users/YOUR_USERNAME_HERE/Library/Application Support/chatgpt.json&lt;/code&gt;: macOS&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; If you have already run the program, the file should exist but be empty. If it doesn&#39;t exist yet, you can either run the program or manually create it.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Finally, add your cookie to the file and save it. It should look like this: &lt;code&gt;{ &#34;openaisession&#34;: &#34;YOUR_COOKIE_HERE&#34; }&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This repository is licensed under the &lt;a href=&#34;https://raw.githubusercontent.com/m1guelpf/chatgpt-telegram/main/LICENSE&#34;&gt;MIT License&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>ThreeDotsLabs/wild-workouts-go-ddd-example</title>
    <updated>2022-12-18T01:44:40Z</updated>
    <id>tag:github.com,2022-12-18:/ThreeDotsLabs/wild-workouts-go-ddd-example</id>
    <link href="https://github.com/ThreeDotsLabs/wild-workouts-go-ddd-example" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Go DDD example application. Complete project to show how to apply DDD, Clean Architecture, and CQRS by practical refactoring.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Wild Workouts&lt;/h1&gt; &#xA;&lt;p&gt;Wild Workouts is an &lt;strong&gt;example Go DDD&lt;/strong&gt; project that we created to show how to build Go applications that are&amp;nbsp;&lt;strong&gt;easy to develop, maintain, and fun to work with, especially in the long term!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;The idea for this series, is to apply DDD by refactoring. This process is in progress! Please check articles, to know the current progress.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;No application is perfect from the beginning. With over a dozen coming articles, we will uncover what issues you can find in the current implementation. We will also show how to fix these issues and achieve clean implementation by refactoring.&lt;/p&gt; &#xA;&lt;h3&gt;Articles&lt;/h3&gt; &#xA;&lt;h4&gt;&#34;Too modern&#34; application&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://threedots.tech/post/serverless-cloud-run-firebase-modern-go-application/?utm_source=github.com&#34;&gt;&lt;strong&gt;Too modern Go application? Building a serverless application with Google Cloud Run and Firebase&lt;/strong&gt;&lt;/a&gt; &lt;em&gt;&lt;a href=&#34;https://github.com/ThreeDotsLabs/wild-workouts-go-ddd-example/releases/tag/v1.0&#34;&gt;[v1.0]&lt;/a&gt;&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://threedots.tech/post/complete-setup-of-serverless-application/?utm_source=github.com&#34;&gt;&lt;strong&gt;A complete Terraform setup of a serverless application on Google Cloud Run and Firebase&lt;/strong&gt;&lt;/a&gt; &lt;em&gt;&lt;a href=&#34;https://github.com/ThreeDotsLabs/wild-workouts-go-ddd-example/releases/tag/v1.1&#34;&gt;[v1.1]&lt;/a&gt;&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://threedots.tech/post/robust-grpc-google-cloud-run/?utm_source=github.com&#34;&gt;&lt;strong&gt;Robust gRPC communication on Google Cloud Run (but not only!)&lt;/strong&gt;&lt;/a&gt; &lt;em&gt;&lt;a href=&#34;https://github.com/ThreeDotsLabs/wild-workouts-go-ddd-example/releases/tag/v1.2&#34;&gt;[v1.2]&lt;/a&gt;&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://threedots.tech/post/firebase-cloud-run-authentication/?utm_source=github.com&#34;&gt;&lt;strong&gt;You should not build your own authentication. Let Firebase do it for you.&lt;/strong&gt;&lt;/a&gt; &lt;em&gt;&lt;a href=&#34;https://github.com/ThreeDotsLabs/wild-workouts-go-ddd-example/releases/tag/v1.3&#34;&gt;[v1.3]&lt;/a&gt;&lt;/em&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Refactoring&lt;/h4&gt; &#xA;&lt;ol start=&#34;5&#34;&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://threedots.tech/post/things-to-know-about-dry/?utm_source=github.com&#34;&gt;&lt;strong&gt;Business Applications in Go: Things to know about DRY&lt;/strong&gt;&lt;/a&gt; &lt;em&gt;&lt;a href=&#34;https://github.com/ThreeDotsLabs/wild-workouts-go-ddd-example/releases/tag/v2.0&#34;&gt;[v2.0]&lt;/a&gt;&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://threedots.tech/post/ddd-lite-in-go-introduction/?utm_source=github.com&#34;&gt;&lt;strong&gt;When microservices in Go are not enough: introduction to DDD Lite&lt;/strong&gt;&lt;/a&gt; &lt;em&gt;&lt;a href=&#34;https://github.com/ThreeDotsLabs/wild-workouts-go-ddd-example/releases/tag/v2.1&#34;&gt;[v2.1]&lt;/a&gt;&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://threedots.tech/post/repository-pattern-in-go/?utm_source=github.com&#34;&gt;&lt;strong&gt;Repository pattern: painless way to simplify your Go service logic&lt;/strong&gt;&lt;/a&gt; &lt;em&gt;&lt;a href=&#34;https://github.com/ThreeDotsLabs/wild-workouts-go-ddd-example/releases/tag/v2.2&#34;&gt;[v2.2]&lt;/a&gt;&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://threedots.tech/post/database-integration-testing/?utm_source=github.com&#34;&gt;&lt;strong&gt;4 practical principles of high-quality database integration tests in Go&lt;/strong&gt;&lt;/a&gt; &lt;em&gt;&lt;a href=&#34;https://github.com/ThreeDotsLabs/wild-workouts-go-ddd-example/releases/tag/v2.3&#34;&gt;[v2.3]&lt;/a&gt;&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://threedots.tech/post/introducing-clean-architecture/?utm_source=github.com&#34;&gt;&lt;strong&gt;Introducing Clean Architecture by refactoring a Go project&lt;/strong&gt;&lt;/a&gt; &lt;em&gt;&lt;a href=&#34;https://github.com/ThreeDotsLabs/wild-workouts-go-ddd-example/releases/tag/v2.4&#34;&gt;[v2.4]&lt;/a&gt;&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://threedots.tech/post/basic-cqrs-in-go/?utm_source=github.com&#34;&gt;&lt;strong&gt;Introducing basic CQRS by refactoring&lt;/strong&gt;&lt;/a&gt; &lt;em&gt;&lt;a href=&#34;https://github.com/ThreeDotsLabs/wild-workouts-go-ddd-example/releases/tag/v2.5&#34;&gt;[v2.5]&lt;/a&gt;&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://threedots.tech/post/ddd-cqrs-clean-architecture-combined/?utm_source=github.com&#34;&gt;&lt;strong&gt;Combining DDD, CQRS, and Clean Architecture&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://threedots.tech/post/microservices-test-architecture/?utm_source=github.com&#34;&gt;&lt;strong&gt;Microservices test architecture. Can you sleep well without end-to-end tests?&lt;/strong&gt;&lt;/a&gt; &lt;em&gt;&lt;a href=&#34;https://github.com/ThreeDotsLabs/wild-workouts-go-ddd-example/releases/tag/v2.6&#34;&gt;[v2.6]&lt;/a&gt;&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://threedots.tech/post/repository-secure-by-design/?utm_source=github.com&#34;&gt;&lt;strong&gt;Repository secure by design: how to sleep better without fear of security vulnerabilities&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://threedots.tech/post/running-integration-tests-on-google-cloud-build/?utm_source=github.com&#34;&gt;&lt;strong&gt;Running integration tests on Google Cloud Build using docker-compose&lt;/strong&gt;&lt;/a&gt; &lt;em&gt;&lt;a href=&#34;https://github.com/ThreeDotsLabs/wild-workouts-go-ddd-example/releases/tag/v2.7&#34;&gt;[v2.7]&lt;/a&gt;&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;More articles are on the way!&lt;/em&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Community&lt;/h3&gt; &#xA;&lt;p&gt;We&#39;re building a Discord community focused on modern business applications. It&#39;s the place to discuss hard topics, request a review, or ask if something&#39;s not clear. &lt;a href=&#34;https://discord.gg/kTVsGjPYDn&#34;&gt;Come join us!&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Directories&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ThreeDotsLabs/wild-workouts-go-ddd-example/master/api/&#34;&gt;api&lt;/a&gt; OpenAPI and gRPC definitions&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ThreeDotsLabs/wild-workouts-go-ddd-example/master/docker/&#34;&gt;docker&lt;/a&gt; Dockerfiles&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ThreeDotsLabs/wild-workouts-go-ddd-example/master/internal/&#34;&gt;internal&lt;/a&gt; application code&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ThreeDotsLabs/wild-workouts-go-ddd-example/master/scripts/&#34;&gt;scripts&lt;/a&gt; deployment and development scripts&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ThreeDotsLabs/wild-workouts-go-ddd-example/master/terraform/&#34;&gt;terraform&lt;/a&gt; - infrastructure definition&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ThreeDotsLabs/wild-workouts-go-ddd-example/master/web/&#34;&gt;web&lt;/a&gt; - frontend JavaScript code&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Live Demo&lt;/h3&gt; &#xA;&lt;p&gt;The example application is available at &lt;a href=&#34;https://threedotslabs-wildworkouts.web.app/&#34;&gt;https://threedotslabs-wildworkouts.web.app/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Running locally&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;&amp;gt; docker-compose up&#xA;&#xA;# ...&#xA;&#xA;web_1             |  INFO  Starting development server...&#xA;web_1             |  DONE  Compiled successfully in 6315ms11:18:26 AM&#xA;web_1             |&#xA;web_1             |&#xA;web_1             |   App running at:&#xA;web_1             |   - Local:   http://localhost:8080/&#xA;web_1             |&#xA;web_1             |   It seems you are running Vue CLI inside a container.&#xA;web_1             |   Access the dev server via http://localhost:&amp;lt;your container&#39;s external mapped port&amp;gt;/&#xA;web_1             |&#xA;web_1             |   Note that the development build is not optimized.&#xA;web_1             |   To create a production build, run yarn build.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Google Cloud Deployment&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;&amp;gt; cd terraform/&#xA;&amp;gt; make&#xA;&#xA;Fill all required parameters:&#xA;&#x9;project [current: wild-workouts project]:       # &amp;lt;----- put your Wild Workouts Google Cloud project name here (it will be created) &#xA;&#x9;user [current: email@gmail.com]:                # &amp;lt;----- put your Google (Gmail, G-suite etc.) e-mail here&#xA;&#x9;billing_account [current: My billing account]:  # &amp;lt;----- your billing account name, can be found here https://console.cloud.google.com/billing&#xA;&#x9;region [current: europe-west1]: &#xA;&#x9;firebase_location [current: europe-west]: &#xA;&#xA;# it may take a couple of minutes...&#xA;&#xA;The setup is almost done!&#xA;&#xA;Now you need to enable Email/Password provider in the Firebase console.&#xA;To do this, visit https://console.firebase.google.com/u/0/project/[your-project]/authentication/providers&#xA;&#xA;You can also downgrade the subscription plan to Spark (it&#39;s set to Blaze by default).&#xA;The Spark plan is completely free and has all features needed for running this project.&#xA;&#xA;Congratulations! Your project should be available at: https://[your-project].web.app&#xA;&#xA;If it&#39;s not, check if the build finished successfully: https://console.cloud.google.com/cloud-build/builds?project=[your-project]&#xA;&#xA;If you need help, feel free to contact us at https://threedots.tech&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Screenshots&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://threedots.tech/media/serverless-cloud-run-firebase-modern-go-app/login.png&#34; alt=&#34;Wild Workouts login&#34; title=&#34;Logo Title Text 1&#34;&gt; &lt;img src=&#34;https://threedots.tech/media/serverless-cloud-run-firebase-modern-go-app/schedule.png&#34; alt=&#34;Wild Workouts trainer&#39;s schedule&#34; title=&#34;Logo Title Text 1&#34;&gt; &lt;img src=&#34;https://threedots.tech/media/serverless-cloud-run-firebase-modern-go-app/new-training.png&#34; alt=&#34;Wild Workouts schedule training&#34; title=&#34;Logo Title Text 1&#34;&gt;&lt;/p&gt;</summary>
  </entry>
</feed>