<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-10-15T01:45:56Z</updated>
  <subtitle>Weekly Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>zeromicro/go-zero</title>
    <updated>2023-10-15T01:45:56Z</updated>
    <id>tag:github.com,2023-10-15:/zeromicro/go-zero</id>
    <link href="https://github.com/zeromicro/go-zero" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A cloud-native Go microservices framework with cli tool for productivity.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;go-zero&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img align=&#34;center&#34; width=&#34;150px&#34; src=&#34;https://raw.githubusercontent.com/zeromicro/zero-doc/main/doc/images/go-zero.png&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;go-zero is a web and rpc framework with lots of builtin engineering practices. It‚Äôs born to ensure the stability of the busy services with resilience design and has been serving sites with tens of millions of users for years.&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/zeromicro/go-zero/actions&#34;&gt;&lt;img src=&#34;https://github.com/zeromicro/go-zero/workflows/Go/badge.svg?branch=master&#34; alt=&#34;Go&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/zeromicro/go-zero&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/zeromicro/go-zero/branch/master/graph/badge.svg?sanitize=true&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/zeromicro/go-zero&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/zeromicro/go-zero&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/zeromicro/go-zero&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/zeromicro/go-zero.svg?style=flat-square&#34; alt=&#34;Release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pkg.go.dev/github.com/zeromicro/go-zero&#34;&gt;&lt;img src=&#34;https://pkg.go.dev/badge/github.com/zeromicro/go-zero.svg?sanitize=true&#34; alt=&#34;Go Reference&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/avelino/awesome-go&#34;&gt;&lt;img src=&#34;https://cdn.rawgit.com/sindresorhus/awesome/d7305f38d29fed78fa85652e3a63e154dd8e8829/media/badge.svg?sanitize=true&#34; alt=&#34;Awesome Go&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-MIT-yellow.svg?sanitize=true&#34; alt=&#34;License: MIT&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/4JQvC5A4Fe&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/794530774463414292?label=chat&amp;amp;logo=discord&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;ü§∑‚Äç What is go-zero?&lt;/h2&gt; &#xA;&lt;p&gt;English | &lt;a href=&#34;https://raw.githubusercontent.com/zeromicro/go-zero/master/readme-cn.md&#34;&gt;ÁÆÄ‰Ωì‰∏≠Êñá&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.producthunt.com/posts/go-zero?utm_source=badge-featured&amp;amp;utm_medium=badge&amp;amp;utm_souce=badge-go-zero&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://api.producthunt.com/widgets/embed-image/v1/featured.svg?post_id=334030&amp;amp;theme=light&#34; alt=&#34;go-zero - A web &amp;amp; rpc framework written in Go. | Product Hunt&#34; style=&#34;width: 250px; height: 54px;&#34; width=&#34;250&#34; height=&#34;54&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;go-zero (listed in CNCF Landscape: &lt;a href=&#34;https://landscape.cncf.io/?selected=go-zero&#34;&gt;https://landscape.cncf.io/?selected=go-zero&lt;/a&gt;) is a web and rpc framework with lots of builtin engineering practices. It‚Äôs born to ensure the stability of the busy services with resilience design and has been serving sites with tens of millions of users for years.&lt;/p&gt; &#xA;&lt;p&gt;go-zero contains simple API description syntax and code generation tool called &lt;code&gt;goctl&lt;/code&gt;. You can generate Go, iOS, Android, Kotlin, Dart, TypeScript, JavaScript from .api files with &lt;code&gt;goctl&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Advantages of go-zero:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;improve the stability of the services with tens of millions of daily active users&lt;/li&gt; &#xA; &lt;li&gt;builtin chained timeout control, concurrency control, rate limit, adaptive circuit breaker, adaptive load shedding, even no configuration needed&lt;/li&gt; &#xA; &lt;li&gt;builtin middlewares also can be integrated into your frameworks&lt;/li&gt; &#xA; &lt;li&gt;simple API syntax, one command to generate a couple of different languages&lt;/li&gt; &#xA; &lt;li&gt;auto validate the request parameters from clients&lt;/li&gt; &#xA; &lt;li&gt;plenty of builtin microservice management and concurrent toolkits&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/zeromicro/zero-doc/main/doc/images/architecture-en.png&#34; alt=&#34;Architecture&#34; width=&#34;1500&#34;&gt; &#xA;&lt;h2&gt;Backgrounds of go-zero&lt;/h2&gt; &#xA;&lt;p&gt;At the beginning of 2018, we decided to re-design our system, from monolithic architecture with Java+MongoDB to microservice architecture. After research and comparison, we chose to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Golang based &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;great performance&lt;/li&gt; &#xA;   &lt;li&gt;simple syntax&lt;/li&gt; &#xA;   &lt;li&gt;proven engineering efficiency&lt;/li&gt; &#xA;   &lt;li&gt;extreme deployment experience&lt;/li&gt; &#xA;   &lt;li&gt;less server resource consumption&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Self-designed microservice architecture &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;I have rich experience in designing microservice architectures&lt;/li&gt; &#xA;   &lt;li&gt;easy to locate the problems&lt;/li&gt; &#xA;   &lt;li&gt;easy to extend the features&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Design considerations on go-zero&lt;/h2&gt; &#xA;&lt;p&gt;By designing the microservice architecture, we expected to ensure stability, as well as productivity. And from just the beginning, we have the following design principles:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;keep it simple&lt;/li&gt; &#xA; &lt;li&gt;high availability&lt;/li&gt; &#xA; &lt;li&gt;stable on high concurrency&lt;/li&gt; &#xA; &lt;li&gt;easy to extend&lt;/li&gt; &#xA; &lt;li&gt;resilience design, failure-oriented programming&lt;/li&gt; &#xA; &lt;li&gt;try best to be friendly to the business logic development, encapsulate the complexity&lt;/li&gt; &#xA; &lt;li&gt;one thing, one way&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;After almost half a year, we finished the transfer from a monolithic system to microservice system and deployed on August 2018. The new system guaranteed business growth and system stability.&lt;/p&gt; &#xA;&lt;h2&gt;The implementation and features of go-zero&lt;/h2&gt; &#xA;&lt;p&gt;go-zero is a web and rpc framework that integrates lots of engineering practices. The features are mainly listed below:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;powerful tool included, less code to write&lt;/li&gt; &#xA; &lt;li&gt;simple interfaces&lt;/li&gt; &#xA; &lt;li&gt;fully compatible with net/http&lt;/li&gt; &#xA; &lt;li&gt;middlewares are supported, easy to extend&lt;/li&gt; &#xA; &lt;li&gt;high performance&lt;/li&gt; &#xA; &lt;li&gt;failure-oriented programming, resilience design&lt;/li&gt; &#xA; &lt;li&gt;builtin service discovery, load balancing&lt;/li&gt; &#xA; &lt;li&gt;builtin concurrency control, adaptive circuit breaker, adaptive load shedding, auto-trigger, auto recover&lt;/li&gt; &#xA; &lt;li&gt;auto validation of API request parameters&lt;/li&gt; &#xA; &lt;li&gt;chained timeout control&lt;/li&gt; &#xA; &lt;li&gt;auto management of data caching&lt;/li&gt; &#xA; &lt;li&gt;call tracing, metrics, and monitoring&lt;/li&gt; &#xA; &lt;li&gt;high concurrency protected&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;As below, go-zero protects the system with a couple of layers and mechanisms:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/zeromicro/zero-doc/main/doc/images/resilience-en.png&#34; alt=&#34;Resilience&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;The simplified architecture that we use with go-zero&lt;/h2&gt; &#xA;&lt;img width=&#34;1067&#34; alt=&#34;image&#34; src=&#34;https://user-images.githubusercontent.com/1918356/171880372-5010d846-e8b1-4942-8fe2-e2bbb584f762.png&#34;&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Run the following command under your project:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;go get -u github.com/zeromicro/go-zero&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Quick Start&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;full examples can be checked out from below:&lt;/p&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/zeromicro/zero-doc/raw/main/doc/shorturl-en.md&#34;&gt;Rapid development of microservice systems&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/zeromicro/zero-doc/raw/main/docs/zero/bookstore-en.md&#34;&gt;Rapid development of microservice systems - multiple RPCs&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;install goctl&lt;/p&gt; &lt;p&gt;&lt;code&gt;goctl&lt;/code&gt;can be read as &lt;code&gt;go control&lt;/code&gt;. &lt;code&gt;goctl&lt;/code&gt; means not to be controlled by code, instead, we control it. The inside &lt;code&gt;go&lt;/code&gt; is not &lt;code&gt;golang&lt;/code&gt;. At the very beginning, I was expecting it to help us improve productivity, and make our lives easier.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# for Go&#xA;go install github.com/zeromicro/go-zero/tools/goctl@latest&#xA;&#xA;# For Mac&#xA;brew install goctl&#xA;&#xA;# docker for amd64 architecture&#xA;docker pull kevinwan/goctl&#xA;# run goctl like&#xA;docker run --rm -it -v `pwd`:/app kevinwan/goctl goctl --help&#xA;&#xA;# docker for arm64 (M1) architecture&#xA;docker pull kevinwan/goctl:latest-arm64&#xA;# run goctl like&#xA;docker run --rm -it -v `pwd`:/app kevinwan/goctl:latest-arm64 goctl --help&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;make sure goctl is executable.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;create the API file, like greet.api, you can install the plugin of goctl in vs code, api syntax is supported.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type (&#xA;  Request {&#xA;    Name string `path:&#34;name,options=[you,me]&#34;` // parameters are auto validated&#xA;  }&#xA;&#xA;  Response {&#xA;    Message string `json:&#34;message&#34;`&#xA;  }&#xA;)&#xA;&#xA;service greet-api {&#xA;  @handler GreetHandler&#xA;  get /greet/from/:name(Request) returns (Response)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;the .api files also can be generated by goctl, like below:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;goctl api -o greet.api&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;generate the go server-side code&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;goctl api go -api greet.api -dir greet&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;the generated files look like:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-Plain&#34;&gt;‚îú‚îÄ‚îÄ greet&#xA;‚îÇ&amp;nbsp;&amp;nbsp; ‚îú‚îÄ‚îÄ etc&#xA;‚îÇ&amp;nbsp;&amp;nbsp; ‚îÇ&amp;nbsp;&amp;nbsp; ‚îî‚îÄ‚îÄ greet-api.yaml        // configuration file&#xA;‚îÇ&amp;nbsp;&amp;nbsp; ‚îú‚îÄ‚îÄ greet.go                  // main file&#xA;‚îÇ&amp;nbsp;&amp;nbsp; ‚îî‚îÄ‚îÄ internal&#xA;‚îÇ&amp;nbsp;&amp;nbsp;     ‚îú‚îÄ‚îÄ config&#xA;‚îÇ&amp;nbsp;&amp;nbsp;     ‚îÇ&amp;nbsp;&amp;nbsp; ‚îî‚îÄ‚îÄ config.go         // configuration definition&#xA;‚îÇ&amp;nbsp;&amp;nbsp;     ‚îú‚îÄ‚îÄ handler&#xA;‚îÇ&amp;nbsp;&amp;nbsp;     ‚îÇ&amp;nbsp;&amp;nbsp; ‚îú‚îÄ‚îÄ greethandler.go   // get/put/post/delete routes are defined here&#xA;‚îÇ&amp;nbsp;&amp;nbsp;     ‚îÇ&amp;nbsp;&amp;nbsp; ‚îî‚îÄ‚îÄ routes.go         // routes list&#xA;‚îÇ&amp;nbsp;&amp;nbsp;     ‚îú‚îÄ‚îÄ logic&#xA;‚îÇ&amp;nbsp;&amp;nbsp;     ‚îÇ&amp;nbsp;&amp;nbsp; ‚îî‚îÄ‚îÄ greetlogic.go     // request logic can be written here&#xA;‚îÇ&amp;nbsp;&amp;nbsp;     ‚îú‚îÄ‚îÄ svc&#xA;‚îÇ&amp;nbsp;&amp;nbsp;     ‚îÇ&amp;nbsp;&amp;nbsp; ‚îî‚îÄ‚îÄ servicecontext.go // service context, mysql/redis can be passed in here&#xA;‚îÇ&amp;nbsp;&amp;nbsp;     ‚îî‚îÄ‚îÄ types&#xA;‚îÇ&amp;nbsp;&amp;nbsp;         ‚îî‚îÄ‚îÄ types.go          // request/response defined here&#xA;‚îî‚îÄ‚îÄ greet.api                     // api description file&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;the generated code can be run directly:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cd greet&#xA;go mod init&#xA;go mod tidy&#xA;go run greet.go -f etc/greet-api.yaml&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;by default, it‚Äôs listening on port 8888, while it can be changed in the configuration file.&lt;/p&gt; &lt;p&gt;you can check it by curl:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;curl -i http://localhost:8888/greet/from/you&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;the response looks like below:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-http&#34;&gt;HTTP/1.1 200 OK&#xA;Date: Sun, 30 Aug 2020 15:32:35 GMT&#xA;Content-Length: 0&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Write the business logic code&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;the dependencies can be passed into the logic within servicecontext.go, like mysql, reds, etc.&lt;/li&gt; &#xA;   &lt;li&gt;add the logic code in a logic package according to .api file&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Generate code like Java, TypeScript, Dart, JavaScript, etc. just from the api file&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;goctl api java -api greet.api -dir greet&#xA;goctl api dart -api greet.api -dir greet&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Benchmark&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/zeromicro/zero-doc/main/doc/images/benchmark.png&#34; alt=&#34;benchmark&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/smallnest/go-web-framework-benchmark&#34;&gt;Checkout the test code&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Documents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://go-zero.dev/&#34;&gt;Documents&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/zeromicro/zero-doc/raw/main/doc/shorturl-en.md&#34;&gt;Rapid development of microservice systems&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/zeromicro/zero-doc/raw/main/docs/zero/bookstore-en.md&#34;&gt;Rapid development of microservice systems - multiple RPCs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/zeromicro/zero-examples&#34;&gt;Examples&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Chat group&lt;/h2&gt; &#xA;&lt;p&gt;Join the chat via &lt;a href=&#34;https://discord.gg/4JQvC5A4Fe&#34;&gt;https://discord.gg/4JQvC5A4Fe&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Cloud Native Landscape&lt;/h2&gt; &#xA;&lt;p float=&#34;left&#34;&gt; &lt;img src=&#34;https://landscape.cncf.io/images/left-logo.svg?sanitize=true&#34; width=&#34;150&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;img src=&#34;https://landscape.cncf.io/images/right-logo.svg?sanitize=true&#34; width=&#34;200&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;go-zero enlisted in the &lt;a href=&#34;https://landscape.cncf.io/?selected=go-zero&#34;&gt;CNCF Cloud Native Landscape&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Give a Star! ‚≠ê&lt;/h2&gt; &#xA;&lt;p&gt;If you like or are using this project to learn or start your solution, please give it a star. Thanks!&lt;/p&gt; &#xA;&lt;h2&gt;Buy me a coffee&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.buymeacoffee.com/kevwan&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://cdn.buymeacoffee.com/buttons/v2/default-yellow.png&#34; alt=&#34;Buy Me A Coffee&#34; style=&#34;height: 60px !important;width: 217px !important;&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>bitmagnet-io/bitmagnet</title>
    <updated>2023-10-15T01:45:56Z</updated>
    <id>tag:github.com,2023-10-15:/bitmagnet-io/bitmagnet</id>
    <link href="https://github.com/bitmagnet-io/bitmagnet" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A self-hosted BitTorrent indexer, DHT crawler, content classifier and torrent search engine with web UI, GraphQL API and Servarr stack integration.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;bitmagnet&lt;/h1&gt; &#xA;&lt;p&gt;A self-hosted BitTorrent indexer, DHT crawler, content classifier and torrent search engine with web UI, GraphQL API and Servarr stack integration.&lt;/p&gt; &#xA;&lt;p&gt;Visit the website at &lt;a href=&#34;https://bitmagnet.io&#34;&gt;bitmagnet.io&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>ehang-io/nps</title>
    <updated>2023-10-15T01:45:56Z</updated>
    <id>tag:github.com,2023-10-15:/ehang-io/nps</id>
    <link href="https://github.com/ehang-io/nps" rel="alternate"></link>
    <summary type="html">&lt;p&gt;‰∏ÄÊ¨æËΩªÈáèÁ∫ß„ÄÅÈ´òÊÄßËÉΩ„ÄÅÂäüËÉΩÂº∫Â§ßÁöÑÂÜÖÁΩëÁ©øÈÄè‰ª£ÁêÜÊúçÂä°Âô®„ÄÇÊîØÊåÅtcp„ÄÅudp„ÄÅsocks5„ÄÅhttpÁ≠âÂá†‰πéÊâÄÊúâÊµÅÈáèËΩ¨ÂèëÔºåÂèØÁî®Êù•ËÆøÈóÆÂÜÖÁΩëÁΩëÁ´ô„ÄÅÊú¨Âú∞ÊîØ‰ªòÊé•Âè£Ë∞ÉËØï„ÄÅsshËÆøÈóÆ„ÄÅËøúÁ®ãÊ°åÈù¢ÔºåÂÜÖÁΩëdnsËß£Êûê„ÄÅÂÜÖÁΩësocks5‰ª£ÁêÜÁ≠âÁ≠â‚Ä¶‚Ä¶ÔºåÂπ∂Â∏¶ÊúâÂäüËÉΩÂº∫Â§ßÁöÑwebÁÆ°ÁêÜÁ´Ø„ÄÇa lightweight, high-performance, powerful intranet penetration proxy server, with a powerful web management terminal.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;NPS&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/github/stars/ehang-io/nps.svg?sanitize=true&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/forks/ehang-io/nps.svg?sanitize=true&#34; alt=&#34;&#34;&gt; &lt;a href=&#34;https://gitter.im/cnlh-nps/community?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/cnlh-nps/community.svg?sanitize=true&#34; alt=&#34;Gitter&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://github.com/ehang-io/nps/workflows/Release/badge.svg?sanitize=true&#34; alt=&#34;Release&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/downloads/ehang-io/nps/total&#34; alt=&#34;GitHub All Releases&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/ehang-io/nps/raw/master/README.md&#34;&gt;README&lt;/a&gt;|&lt;a href=&#34;https://github.com/ehang-io/nps/raw/master/README_zh.md&#34;&gt;‰∏≠ÊñáÊñáÊ°£&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;NPS is a lightweight, high-performance, powerful &lt;strong&gt;intranet penetration&lt;/strong&gt; proxy server, with a powerful web management terminal.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/ehang-io/nps/raw/master/image/web.png?raw=true&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Feature&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Comprehensive protocol support, compatible with almost all commonly used protocols, such as tcp, udp, http(s), socks5, p2p, http proxy ...&lt;/li&gt; &#xA; &lt;li&gt;Full platform compatibility (linux, windows, macos, Synology, etc.), support installation as a system service simply.&lt;/li&gt; &#xA; &lt;li&gt;Comprehensive control, both client and server control are allowed.&lt;/li&gt; &#xA; &lt;li&gt;Https integration, support to convert backend proxy and web services to https, and support multiple certificates.&lt;/li&gt; &#xA; &lt;li&gt;Just simple configuration on web ui can complete most requirements.&lt;/li&gt; &#xA; &lt;li&gt;Complete information display, such as traffic, system information, real-time bandwidth, client version, etc.&lt;/li&gt; &#xA; &lt;li&gt;Powerful extension functions, everything is available (cache, compression, encryption, traffic limit, bandwidth limit, port reuse, etc.)&lt;/li&gt; &#xA; &lt;li&gt;Domain name resolution has functions such as custom headers, 404 page configuration, host modification, site protection, URL routing, and pan-resolution.&lt;/li&gt; &#xA; &lt;li&gt;Multi-user and user registration support on server.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Didn&#39;t find the feature you want? It doesn&#39;t matter, click &lt;a href=&#34;https://ehang-io.github.io/nps/&#34;&gt;Enter the document&lt;/a&gt; to find it!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Quick start&lt;/h2&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/ehang-io/nps/releases&#34;&gt;releases&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Download the corresponding system version, the server and client are separate.&lt;/p&gt; &#xA;&lt;h3&gt;Server start&lt;/h3&gt; &#xA;&lt;p&gt;After downloading the server compressed package, unzip it, and then enter the unzipped folder.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;execute installation command&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For linux„ÄÅdarwin &lt;code&gt;sudo ./nps install&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;For windows, run cmd as administrator and enter the installation directory &lt;code&gt;nps.exe install&lt;/code&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;default ports&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The default configuration file of nps use 80Ôºå443Ôºå8080Ôºå8024 ports&lt;/p&gt; &#xA;&lt;p&gt;80 and 443 ports for host mode default ports&lt;/p&gt; &#xA;&lt;p&gt;8080 for web management access port&lt;/p&gt; &#xA;&lt;p&gt;8024 for net bridge port, to communicate between server and client&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;start up&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For linux„ÄÅdarwin &lt;code&gt;sudo nps start&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;For windows, run cmd as administrator and enter the program directory &lt;code&gt;nps.exe start&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;After installation, the windows configuration file is located at C:\Program Files\nps, linux or darwin is located at /etc/nps&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;If you don&#39;t find it started successfully, you can check the log (Windows log files are located in the current running directory, linux and darwin are located in /var/log/nps.log).&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Access server IP:web service port (default is 8080).&lt;/li&gt; &#xA; &lt;li&gt;Login with username and password (default is admin/123, must be modified when officially used).&lt;/li&gt; &#xA; &lt;li&gt;Create a client.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Client connection&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Click the + sign in front of the client in web management and copy the startup command.&lt;/li&gt; &#xA; &lt;li&gt;Execute the startup command, Linux can be executed directly, Windows will replace ./npc with npc.exe and execute it with cmd.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you need to register to the system service, you can check &lt;a href=&#34;https://ehang-io.github.io/nps/#/use?id=%E6%B3%A8%E5%86%8C%E5%88%B0%E7%B3%BB%E7%BB%9F%E6%9C%8D%E5%8A%A1&#34;&gt;Register to the system service&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Configuration&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;After the client connects, configure the corresponding penetration service in the web.&lt;/li&gt; &#xA; &lt;li&gt;For more advanced usage, see &lt;a href=&#34;https://ehang-io.github.io/nps/&#34;&gt;Complete Documentation&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contribution&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If you encounter a bug, you can submit it to the dev branch directly.&lt;/li&gt; &#xA; &lt;li&gt;If you encounter a problem, you can feedback through the issue.&lt;/li&gt; &#xA; &lt;li&gt;The project is under development, and there is still a lot of room for improvement. If you can contribute code, please submit PR to the dev branch.&lt;/li&gt; &#xA; &lt;li&gt;If there is feedback on new features, you can feedback via issues or qq group.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>