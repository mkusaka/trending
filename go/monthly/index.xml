<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-12-01T01:53:48Z</updated>
  <subtitle>Monthly Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>AlexxIT/go2rtc</title>
    <updated>2024-12-01T01:53:48Z</updated>
    <id>tag:github.com,2024-12-01:/AlexxIT/go2rtc</id>
    <link href="https://github.com/AlexxIT/go2rtc" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Ultimate camera streaming application with support RTSP, RTMP, HTTP-FLV, WebRTC, MSE, HLS, MP4, MJPEG, HomeKit, FFmpeg, etc.&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/assets/logo.gif&#34; alt=&#34;go2rtc&#34;&gt; &lt;br&gt; &lt;a href=&#34;https://github.com/AlexxIT/go2rtc/stargazers&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/AlexxIT/go2rtc?style=flat-square&amp;amp;logo=github&#34; alt=&#34;stars&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/alexxit/go2rtc&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/pulls/alexxit/go2rtc?style=flat-square&amp;amp;logo=docker&amp;amp;logoColor=white&amp;amp;label=pulls&#34; alt=&#34;docker pulls&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/AlexxIT/go2rtc/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/downloads/AlexxIT/go2rtc/total?color=blue&amp;amp;style=flat-square&amp;amp;logo=github&#34; alt=&#34;releases&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/AlexxIT/go2rtc&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/AlexxIT/go2rtc&#34; alt=&#34;goreport&#34;&gt;&lt;/a&gt;&lt;/p&gt; &lt;/h1&gt; &#xA;&lt;p&gt;Ultimate camera streaming application with support RTSP, WebRTC, HomeKit, FFmpeg, RTMP, etc.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/assets/go2rtc.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;zero-dependency and zero-config &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#go2rtc-binary&#34;&gt;small app&lt;/a&gt; for all OS (Windows, macOS, Linux, ARM)&lt;/li&gt; &#xA; &lt;li&gt;zero-delay for many supported protocols (lowest possible streaming latency)&lt;/li&gt; &#xA; &lt;li&gt;streaming from &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-rtsp&#34;&gt;RTSP&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-rtmp&#34;&gt;RTMP&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-dvrip&#34;&gt;DVRIP&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-http&#34;&gt;HTTP&lt;/a&gt; (FLV/MJPEG/JPEG/TS), &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-ffmpeg-device&#34;&gt;USB Cameras&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-streams&#34;&gt;other sources&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;streaming from any sources, supported by &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-ffmpeg&#34;&gt;FFmpeg&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;streaming to &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-rtsp&#34;&gt;RTSP&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-webrtc&#34;&gt;WebRTC&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-mp4&#34;&gt;MSE/MP4&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-homekit&#34;&gt;HomeKit&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-hls&#34;&gt;HLS&lt;/a&gt; or &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-mjpeg&#34;&gt;MJPEG&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#publish-stream&#34;&gt;publish&lt;/a&gt; any source to popular streaming services (YouTube, Telegram, etc.)&lt;/li&gt; &#xA; &lt;li&gt;first project in the World with support streaming from &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-homekit&#34;&gt;HomeKit Cameras&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;support H265 for WebRTC in browser (Safari only, &lt;a href=&#34;https://github.com/AlexxIT/Blog/issues/5&#34;&gt;read more&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;on the fly transcoding for unsupported codecs via &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-ffmpeg&#34;&gt;FFmpeg&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;play audio files and live streams on some cameras with &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#stream-to-camera&#34;&gt;speaker&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;multi-source 2-way &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#codecs-negotiation&#34;&gt;codecs negotiation&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;mixing tracks from different sources to single stream&lt;/li&gt; &#xA;   &lt;li&gt;auto match client supported codecs&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#two-way-audio&#34;&gt;2-way audio&lt;/a&gt; for some cameras&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;streaming from private networks via &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-ngrok&#34;&gt;ngrok&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;can be &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-api&#34;&gt;integrated to&lt;/a&gt; any smart home platform or be used as &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#go2rtc-binary&#34;&gt;standalone app&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Inspired by:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;series of streaming projects from &lt;a href=&#34;https://github.com/deepch&#34;&gt;@deepch&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pion/webrtc&#34;&gt;webrtc&lt;/a&gt; go library and whole &lt;a href=&#34;https://github.com/pion&#34;&gt;@pion&lt;/a&gt; team&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/aler9/rtsp-simple-server&#34;&gt;rtsp-simple-server&lt;/a&gt; idea from &lt;a href=&#34;https://github.com/aler9&#34;&gt;@aler9&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gstreamer.freedesktop.org/&#34;&gt;GStreamer&lt;/a&gt; framework pipeline idea&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mediasoup.org/&#34;&gt;MediaSoup&lt;/a&gt; framework routing idea&lt;/li&gt; &#xA; &lt;li&gt;HomeKit Accessory Protocol from &lt;a href=&#34;https://github.com/brutella/hap&#34;&gt;@brutella&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;creator of the project&#39;s logo &lt;a href=&#34;https://www.instagram.com/v_novoseltsev&#34;&gt;@v_novoseltsev&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#fast-start&#34;&gt;Fast start&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#go2rtc-binary&#34;&gt;go2rtc: Binary&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#go2rtc-docker&#34;&gt;go2rtc: Docker&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#go2rtc-home-assistant-add-on&#34;&gt;go2rtc: Home Assistant Add-on&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#go2rtc-home-assistant-integration&#34;&gt;go2rtc: Home Assistant Integration&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#go2rtc-dev-version&#34;&gt;go2rtc: Dev version&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#configuration&#34;&gt;Configuration&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-streams&#34;&gt;Module: Streams&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#two-way-audio&#34;&gt;Two way audio&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-rtsp&#34;&gt;Source: RTSP&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-rtmp&#34;&gt;Source: RTMP&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-http&#34;&gt;Source: HTTP&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-onvif&#34;&gt;Source: ONVIF&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-ffmpeg&#34;&gt;Source: FFmpeg&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-ffmpeg-device&#34;&gt;Source: FFmpeg Device&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-exec&#34;&gt;Source: Exec&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-echo&#34;&gt;Source: Echo&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-expr&#34;&gt;Source: Expr&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-homekit&#34;&gt;Source: HomeKit&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-bubble&#34;&gt;Source: Bubble&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-dvrip&#34;&gt;Source: DVRIP&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-tapo&#34;&gt;Source: Tapo&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-kasa&#34;&gt;Source: Kasa&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-gopro&#34;&gt;Source: GoPro&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-ivideon&#34;&gt;Source: Ivideon&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-hass&#34;&gt;Source: Hass&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-isapi&#34;&gt;Source: ISAPI&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-nest&#34;&gt;Source: Nest&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-roborock&#34;&gt;Source: Roborock&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-webrtc&#34;&gt;Source: WebRTC&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-webtorrent&#34;&gt;Source: WebTorrent&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#incoming-sources&#34;&gt;Incoming sources&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#stream-to-camera&#34;&gt;Stream to camera&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#publish-stream&#34;&gt;Publish stream&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-api&#34;&gt;Module: API&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-rtsp&#34;&gt;Module: RTSP&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-rtmp&#34;&gt;Module: RTMP&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-webrtc&#34;&gt;Module: WebRTC&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-homekit&#34;&gt;Module: HomeKit&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-webtorrent&#34;&gt;Module: WebTorrent&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-ngrok&#34;&gt;Module: ngrok&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-hass&#34;&gt;Module: Hass&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-mp4&#34;&gt;Module: MP4&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-hls&#34;&gt;Module: HLS&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-mjpeg&#34;&gt;Module: MJPEG&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-log&#34;&gt;Module: Log&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#security&#34;&gt;Security&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#codecs-filters&#34;&gt;Codecs filters&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#codecs-madness&#34;&gt;Codecs madness&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#codecs-negotiation&#34;&gt;Codecs negotiation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#projects-using-go2rtc&#34;&gt;Projects using go2rtc&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#cameras-experience&#34;&gt;Camera experience&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#tips&#34;&gt;TIPS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#faq&#34;&gt;FAQ&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Fast start&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#go2rtc-binary&#34;&gt;binary&lt;/a&gt; or use &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#go2rtc-docker&#34;&gt;Docker&lt;/a&gt; or Home Assistant &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#go2rtc-home-assistant-add-on&#34;&gt;Add-on&lt;/a&gt; or &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#go2rtc-home-assistant-integration&#34;&gt;Integration&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Open web interface: &lt;code&gt;http://localhost:1984/&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;Optionally:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;add your &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-streams&#34;&gt;streams&lt;/a&gt; to &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#configuration&#34;&gt;config&lt;/a&gt; file&lt;/li&gt; &#xA; &lt;li&gt;setup &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-webrtc&#34;&gt;external access&lt;/a&gt; to webrtc&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Developers:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;write your own &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-api&#34;&gt;web interface&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;integrate &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-api&#34;&gt;web api&lt;/a&gt; into your smart home platform&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;go2rtc: Binary&lt;/h3&gt; &#xA;&lt;p&gt;Download binary for your OS from &lt;a href=&#34;https://github.com/AlexxIT/go2rtc/releases/&#34;&gt;latest release&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;go2rtc_win64.zip&lt;/code&gt; - Windows 10+ 64-bit&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;go2rtc_win32.zip&lt;/code&gt; - Windows 7+ 32-bit&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;go2rtc_win_arm64.zip&lt;/code&gt; - Windows ARM 64-bit&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;go2rtc_linux_amd64&lt;/code&gt; - Linux 64-bit&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;go2rtc_linux_i386&lt;/code&gt; - Linux 32-bit&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;go2rtc_linux_arm64&lt;/code&gt; - Linux ARM 64-bit (ex. Raspberry 64-bit OS)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;go2rtc_linux_arm&lt;/code&gt; - Linux ARM 32-bit (ex. Raspberry 32-bit OS)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;go2rtc_linux_armv6&lt;/code&gt; - Linux ARMv6 (for old Raspberry 1 and Zero)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;go2rtc_linux_mipsel&lt;/code&gt; - Linux MIPS (ex. &lt;a href=&#34;https://github.com/AlexxIT/XiaomiGateway3&#34;&gt;Xiaomi Gateway 3&lt;/a&gt;, &lt;a href=&#34;https://github.com/gtxaspec/wz_mini_hacks&#34;&gt;Wyze cameras&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;go2rtc_mac_amd64.zip&lt;/code&gt; - macOS 10.13+ Intel 64-bit&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;go2rtc_mac_arm64.zip&lt;/code&gt; - macOS ARM 64-bit&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Don&#39;t forget to fix the rights &lt;code&gt;chmod +x go2rtc_xxx_xxx&lt;/code&gt; on Linux and Mac.&lt;/p&gt; &#xA;&lt;h3&gt;go2rtc: Docker&lt;/h3&gt; &#xA;&lt;p&gt;The Docker container &lt;a href=&#34;https://hub.docker.com/r/alexxit/go2rtc&#34;&gt;&lt;code&gt;alexxit/go2rtc&lt;/code&gt;&lt;/a&gt; supports multiple architectures including &lt;code&gt;amd64&lt;/code&gt;, &lt;code&gt;386&lt;/code&gt;, &lt;code&gt;arm64&lt;/code&gt;, and &lt;code&gt;arm&lt;/code&gt;. This container offers the same functionality as the &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#go2rtc-home-assistant-add-on&#34;&gt;Home Assistant Add-on&lt;/a&gt; but is designed to operate independently of Home Assistant. It comes preinstalled with &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-ffmpeg&#34;&gt;FFmpeg&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-ngrok&#34;&gt;ngrok&lt;/a&gt;, and &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-echo&#34;&gt;Python&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;go2rtc: Home Assistant Add-on&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://my.home-assistant.io/redirect/supervisor_addon/?addon=a889bffc_go2rtc&amp;amp;repository_url=https%3A%2F%2Fgithub.com%2FAlexxIT%2Fhassio-addons&#34;&gt;&lt;img src=&#34;https://my.home-assistant.io/badges/supervisor_addon.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install Add-On: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Settings &amp;gt; Add-ons &amp;gt; Plus &amp;gt; Repositories &amp;gt; Add &lt;code&gt;https://github.com/AlexxIT/hassio-addons&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;go2rtc &amp;gt; Install &amp;gt; Start&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Setup &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-hass&#34;&gt;Integration&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;go2rtc: Home Assistant Integration&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/AlexxIT/WebRTC&#34;&gt;WebRTC Camera&lt;/a&gt; custom component can be used on any &lt;a href=&#34;https://www.home-assistant.io/installation/&#34;&gt;Home Assistant installation&lt;/a&gt;, including &lt;a href=&#34;https://github.com/AlexxIT/HassWP&#34;&gt;HassWP&lt;/a&gt; on Windows. It can automatically download and use the latest version of go2rtc. Or it can connect to an existing version of go2rtc. Addon installation in this case is optional.&lt;/p&gt; &#xA;&lt;h3&gt;go2rtc: Dev version&lt;/h3&gt; &#xA;&lt;p&gt;Latest, but maybe unstable version:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Binary: &lt;a href=&#34;https://nightly.link/AlexxIT/go2rtc/workflows/build/master&#34;&gt;latest nightly release&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Docker: &lt;code&gt;alexxit/go2rtc:master&lt;/code&gt; or &lt;code&gt;alexxit/go2rtc:master-hardware&lt;/code&gt; versions&lt;/li&gt; &#xA; &lt;li&gt;Hass Add-on: &lt;code&gt;go2rtc master&lt;/code&gt; or &lt;code&gt;go2rtc master hardware&lt;/code&gt; versions&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;by default go2rtc will search &lt;code&gt;go2rtc.yaml&lt;/code&gt; in the current work directory&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;api&lt;/code&gt; server will start on default &lt;strong&gt;1984 port&lt;/strong&gt; (TCP)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;rtsp&lt;/code&gt; server will start on default &lt;strong&gt;8554 port&lt;/strong&gt; (TCP)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;webrtc&lt;/code&gt; will use port &lt;strong&gt;8555&lt;/strong&gt; (TCP/UDP) for connections&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ffmpeg&lt;/code&gt; will use default transcoding options&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Configuration options and a complete list of settings can be found in &lt;a href=&#34;https://github.com/AlexxIT/go2rtc/wiki/Configuration&#34;&gt;the wiki&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Available modules:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-streams&#34;&gt;streams&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-api&#34;&gt;api&lt;/a&gt; - HTTP API (important for WebRTC support)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-rtsp&#34;&gt;rtsp&lt;/a&gt; - RTSP Server (important for FFmpeg support)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-webrtc&#34;&gt;webrtc&lt;/a&gt; - WebRTC Server&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-mp4&#34;&gt;mp4&lt;/a&gt; - MSE, MP4 stream and MP4 snapshot Server&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-hls&#34;&gt;hls&lt;/a&gt; - HLS TS or fMP4 stream Server&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-mjpeg&#34;&gt;mjpeg&lt;/a&gt; - MJPEG Server&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-ffmpeg&#34;&gt;ffmpeg&lt;/a&gt; - FFmpeg integration&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-ngrok&#34;&gt;ngrok&lt;/a&gt; - ngrok integration (external access for private network)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-hass&#34;&gt;hass&lt;/a&gt; - Home Assistant integration&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-log&#34;&gt;log&lt;/a&gt; - logs config&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Module: Streams&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;go2rtc&lt;/strong&gt; support different stream source types. You can config one or multiple links of any type as stream source.&lt;/p&gt; &#xA;&lt;p&gt;Available source types:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-rtsp&#34;&gt;rtsp&lt;/a&gt; - &lt;code&gt;RTSP&lt;/code&gt; and &lt;code&gt;RTSPS&lt;/code&gt; cameras with &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#two-way-audio&#34;&gt;two way audio&lt;/a&gt; support&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-rtmp&#34;&gt;rtmp&lt;/a&gt; - &lt;code&gt;RTMP&lt;/code&gt; streams&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-http&#34;&gt;http&lt;/a&gt; - &lt;code&gt;HTTP-FLV&lt;/code&gt;, &lt;code&gt;MPEG-TS&lt;/code&gt;, &lt;code&gt;JPEG&lt;/code&gt; (snapshots), &lt;code&gt;MJPEG&lt;/code&gt; streams&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-onvif&#34;&gt;onvif&lt;/a&gt; - get camera &lt;code&gt;RTSP&lt;/code&gt; link and snapshot link using &lt;code&gt;ONVIF&lt;/code&gt; protocol&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-ffmpeg&#34;&gt;ffmpeg&lt;/a&gt; - FFmpeg integration (&lt;code&gt;HLS&lt;/code&gt;, &lt;code&gt;files&lt;/code&gt; and many others)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-ffmpeg-device&#34;&gt;ffmpeg:device&lt;/a&gt; - local USB Camera or Webcam&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-exec&#34;&gt;exec&lt;/a&gt; - get media from external app output&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-echo&#34;&gt;echo&lt;/a&gt; - get stream link from bash or python&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-expr&#34;&gt;expr&lt;/a&gt; - get stream link via built-in expression language&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-homekit&#34;&gt;homekit&lt;/a&gt; - streaming from HomeKit Camera&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-bubble&#34;&gt;bubble&lt;/a&gt; - streaming from ESeeCloud/dvr163 NVR&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-dvrip&#34;&gt;dvrip&lt;/a&gt; - streaming from DVR-IP NVR&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-tapo&#34;&gt;tapo&lt;/a&gt; - TP-Link Tapo cameras with &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#two-way-audio&#34;&gt;two way audio&lt;/a&gt; support&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-tapo&#34;&gt;kasa&lt;/a&gt; - TP-Link Kasa cameras&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-gopro&#34;&gt;gopro&lt;/a&gt; - GoPro cameras&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-ivideon&#34;&gt;ivideon&lt;/a&gt; - public cameras from &lt;a href=&#34;https://tv.ivideon.com/&#34;&gt;Ivideon&lt;/a&gt; service&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-hass&#34;&gt;hass&lt;/a&gt; - Home Assistant integration&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-isapi&#34;&gt;isapi&lt;/a&gt; - two way audio for Hikvision (ISAPI) cameras&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-roborock&#34;&gt;roborock&lt;/a&gt; - Roborock vacuums with cameras&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-webrtc&#34;&gt;webrtc&lt;/a&gt; - WebRTC/WHEP sources&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-webtorrent&#34;&gt;webtorrent&lt;/a&gt; - WebTorrent source from another go2rtc&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Read more about &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#incoming-sources&#34;&gt;incoming sources&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Two way audio&lt;/h4&gt; &#xA;&lt;p&gt;Supported for sources:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-rtsp&#34;&gt;RTSP cameras&lt;/a&gt; with &lt;a href=&#34;https://www.onvif.org/specs/stream/ONVIF-Streaming-Spec.pdf&#34;&gt;ONVIF Profile T&lt;/a&gt; (back channel connection)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-dvrip&#34;&gt;DVRIP&lt;/a&gt; cameras&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-tapo&#34;&gt;TP-Link Tapo&lt;/a&gt; cameras&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-isapi&#34;&gt;Hikvision ISAPI&lt;/a&gt; cameras&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-roborock&#34;&gt;Roborock vacuums&lt;/a&gt; models with cameras&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-exec&#34;&gt;Exec&lt;/a&gt; audio on server&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#incoming-browser&#34;&gt;Any Browser&lt;/a&gt; as IP-camera&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Two way audio can be used in browser with &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-webrtc&#34;&gt;WebRTC&lt;/a&gt; technology. The browser will give access to the microphone only for HTTPS sites (&lt;a href=&#34;https://stackoverflow.com/questions/52759992/how-to-access-camera-and-microphone-in-chrome-without-https&#34;&gt;read more&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;go2rtc also support &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#stream-to-camera&#34;&gt;play audio&lt;/a&gt; files and live streams on this cameras.&lt;/p&gt; &#xA;&lt;h4&gt;Source: RTSP&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;streams:&#xA;  sonoff_camera: rtsp://rtsp:12345678@192.168.1.123/av_stream/ch0&#xA;  dahua_camera:&#xA;    - rtsp://admin:password@192.168.1.123/cam/realmonitor?channel=1&amp;amp;subtype=0&amp;amp;unicast=true&amp;amp;proto=Onvif&#xA;    - rtsp://admin:password@192.168.1.123/cam/realmonitor?channel=1&amp;amp;subtype=1&#xA;  amcrest_doorbell:&#xA;    - rtsp://username:password@192.168.1.123:554/cam/realmonitor?channel=1&amp;amp;subtype=0#backchannel=0&#xA;  unifi_camera: rtspx://192.168.1.123:7441/fD6ouM72bWoFijxK&#xA;  glichy_camera: ffmpeg:rtsp://username:password@192.168.1.123/live/ch00_1 &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Recommendations&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Amcrest Doorbell&lt;/strong&gt; users may want to disable two way audio, because with an active stream you won&#39;t have a call button working. You need to add &lt;code&gt;#backchannel=0&lt;/code&gt; to the end of your RTSP link in YAML config file&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Dahua Doorbell&lt;/strong&gt; users may want to change backchannel &lt;a href=&#34;https://github.com/AlexxIT/go2rtc/issues/52&#34;&gt;audio codec&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Reolink&lt;/strong&gt; users may want NOT to use RTSP protocol at all, some camera models have a very awful unusable stream implementation&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Ubiquiti UniFi&lt;/strong&gt; users may want to disable HTTPS verification. Use &lt;code&gt;rtspx://&lt;/code&gt; prefix instead of &lt;code&gt;rtsps://&lt;/code&gt;. And don&#39;t use &lt;code&gt;?enableSrtp&lt;/code&gt; &lt;a href=&#34;https://github.com/AlexxIT/go2rtc/issues/81&#34;&gt;suffix&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;TP-Link Tapo&lt;/strong&gt; users may skip login and password, because go2rtc support login &lt;a href=&#34;https://drmnsamoliu.github.io/video.html&#34;&gt;without them&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;If your camera has two RTSP links - you can add both of them as sources. This is useful when streams has different codecs, as example AAC audio with main stream and PCMU/PCMA audio with second stream&lt;/li&gt; &#xA; &lt;li&gt;If the stream from your camera is glitchy, try using &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-ffmpeg&#34;&gt;ffmpeg source&lt;/a&gt;. It will not add CPU load if you won&#39;t use transcoding&lt;/li&gt; &#xA; &lt;li&gt;If the stream from your camera is very glitchy, try to use transcoding with &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-ffmpeg&#34;&gt;ffmpeg source&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Other options&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Format: &lt;code&gt;rtsp...#{param1}#{param2}#{param3}&lt;/code&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Add custom timeout &lt;code&gt;#timeout=30&lt;/code&gt; (in seconds)&lt;/li&gt; &#xA; &lt;li&gt;Ignore audio - &lt;code&gt;#media=video&lt;/code&gt; or ignore video - &lt;code&gt;#media=audio&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Ignore two way audio API &lt;code&gt;#backchannel=0&lt;/code&gt; - important for some glitchy cameras&lt;/li&gt; &#xA; &lt;li&gt;Use WebSocket transport &lt;code&gt;#transport=ws...&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;RTSP over WebSocket&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;streams:&#xA;  # WebSocket with authorization, RTSP - without&#xA;  axis-rtsp-ws:  rtsp://192.168.1.123:4567/axis-media/media.amp?overview=0&amp;amp;camera=1&amp;amp;resolution=1280x720&amp;amp;videoframeskipmode=empty&amp;amp;Axis-Orig-Sw=true#transport=ws://user:pass@192.168.1.123:4567/rtsp-over-websocket&#xA;  # WebSocket without authorization, RTSP - with&#xA;  dahua-rtsp-ws: rtsp://user:pass@192.168.1.123/cam/realmonitor?channel=1&amp;amp;subtype=1&amp;amp;proto=Private3#transport=ws://192.168.1.123/rtspoverwebsocket&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Source: RTMP&lt;/h4&gt; &#xA;&lt;p&gt;You can get stream from RTMP server, for example &lt;a href=&#34;https://github.com/arut/nginx-rtmp-module&#34;&gt;Nginx with nginx-rtmp-module&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;streams:&#xA;  rtmp_stream: rtmp://192.168.1.123/live/camera1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Source: HTTP&lt;/h4&gt; &#xA;&lt;p&gt;Support Content-Type:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;HTTP-FLV&lt;/strong&gt; (&lt;code&gt;video/x-flv&lt;/code&gt;) - same as RTMP, but over HTTP&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;HTTP-JPEG&lt;/strong&gt; (&lt;code&gt;image/jpeg&lt;/code&gt;) - camera snapshot link, can be converted by go2rtc to MJPEG stream&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;HTTP-MJPEG&lt;/strong&gt; (&lt;code&gt;multipart/x&lt;/code&gt;) - simple MJPEG stream over HTTP&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;MPEG-TS&lt;/strong&gt; (&lt;code&gt;video/mpeg&lt;/code&gt;) - legacy &lt;a href=&#34;https://en.wikipedia.org/wiki/MPEG_transport_stream&#34;&gt;streaming format&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Source also support HTTP and TCP streams with autodetection for different formats: &lt;strong&gt;MJPEG&lt;/strong&gt;, &lt;strong&gt;H.264/H.265 bitstream&lt;/strong&gt;, &lt;strong&gt;MPEG-TS&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;streams:&#xA;  # [HTTP-FLV] stream in video/x-flv format&#xA;  http_flv: http://192.168.1.123:20880/api/camera/stream/780900131155/657617&#xA;  &#xA;  # [JPEG] snapshots from Dahua camera, will be converted to MJPEG stream&#xA;  dahua_snap: http://admin:password@192.168.1.123/cgi-bin/snapshot.cgi?channel=1&#xA;&#xA;  # [MJPEG] stream will be proxied without modification&#xA;  http_mjpeg: https://mjpeg.sanford.io/count.mjpeg&#xA;&#xA;  # [MJPEG or H.264/H.265 bitstream or MPEG-TS]&#xA;  tcp_magic: tcp://192.168.1.123:12345&#xA;&#xA;  # Add custom header&#xA;  custom_header: &#34;https://mjpeg.sanford.io/count.mjpeg#header=Authorization: Bearer XXX&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;PS.&lt;/strong&gt; Dahua camera has bug: if you select MJPEG codec for RTSP second stream - snapshot won&#39;t work.&lt;/p&gt; &#xA;&lt;h4&gt;Source: ONVIF&lt;/h4&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;a href=&#34;https://github.com/AlexxIT/go2rtc/releases/tag/v1.5.0&#34;&gt;New in v1.5.0&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;The source is not very useful if you already know RTSP and snapshot links for your camera. But it can be useful if you don&#39;t.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;WebUI &amp;gt; Add&lt;/strong&gt; webpage support ONVIF autodiscovery. Your server must be on the same subnet as the camera. If you use docker, you must use &#34;network host&#34;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;streams:&#xA;  dahua1: onvif://admin:password@192.168.1.123&#xA;  reolink1: onvif://admin:password@192.168.1.123:8000&#xA;  tapo1: onvif://admin:password@192.168.1.123:2020&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Source: FFmpeg&lt;/h4&gt; &#xA;&lt;p&gt;You can get any stream or file or device via FFmpeg and push it to go2rtc. The app will automatically start FFmpeg with the proper arguments when someone starts watching the stream.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;FFmpeg preistalled for &lt;strong&gt;Docker&lt;/strong&gt; and &lt;strong&gt;Hass Add-on&lt;/strong&gt; users&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Hass Add-on&lt;/strong&gt; users can target files from &lt;a href=&#34;https://www.home-assistant.io/more-info/local-media/setup-media/&#34;&gt;/media&lt;/a&gt; folder&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Format: &lt;code&gt;ffmpeg:{input}#{param1}#{param2}#{param3}&lt;/code&gt;. Examples:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;streams:&#xA;  # [FILE] all tracks will be copied without transcoding codecs&#xA;  file1: ffmpeg:/media/BigBuckBunny.mp4&#xA;&#xA;  # [FILE] video will be transcoded to H264, audio will be skipped&#xA;  file2: ffmpeg:/media/BigBuckBunny.mp4#video=h264&#xA;&#xA;  # [FILE] video will be copied, audio will be transcoded to pcmu&#xA;  file3: ffmpeg:/media/BigBuckBunny.mp4#video=copy#audio=pcmu&#xA;&#xA;  # [HLS] video will be copied, audio will be skipped&#xA;  hls: ffmpeg:https://devstreaming-cdn.apple.com/videos/streaming/examples/bipbop_16x9/gear5/prog_index.m3u8#video=copy&#xA;&#xA;  # [MJPEG] video will be transcoded to H264&#xA;  mjpeg: ffmpeg:http://185.97.122.128/cgi-bin/faststream.jpg#video=h264&#xA;&#xA;  # [RTSP] video with rotation, should be transcoded, so select H264&#xA;  rotate: ffmpeg:rtsp://rtsp:12345678@192.168.1.123/av_stream/ch0#video=h264#rotate=90&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;All trascoding formats has &lt;a href=&#34;https://github.com/AlexxIT/go2rtc/raw/master/internal/ffmpeg/ffmpeg.go&#34;&gt;built-in templates&lt;/a&gt;: &lt;code&gt;h264&lt;/code&gt;, &lt;code&gt;h265&lt;/code&gt;, &lt;code&gt;opus&lt;/code&gt;, &lt;code&gt;pcmu&lt;/code&gt;, &lt;code&gt;pcmu/16000&lt;/code&gt;, &lt;code&gt;pcmu/48000&lt;/code&gt;, &lt;code&gt;pcma&lt;/code&gt;, &lt;code&gt;pcma/16000&lt;/code&gt;, &lt;code&gt;pcma/48000&lt;/code&gt;, &lt;code&gt;aac&lt;/code&gt;, &lt;code&gt;aac/16000&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;But you can override them via YAML config. You can also add your own formats to config and use them with source params.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;ffmpeg:&#xA;  bin: ffmpeg  # path to ffmpeg binary&#xA;  h264: &#34;-codec:v libx264 -g:v 30 -preset:v superfast -tune:v zerolatency -profile:v main -level:v 4.1&#34;&#xA;  mycodec: &#34;-any args that supported by ffmpeg...&#34;&#xA;  myinput: &#34;-fflags nobuffer -flags low_delay -timeout 5000000 -i {input}&#34;&#xA;  myraw: &#34;-ss 00:00:20&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You can use go2rtc stream name as ffmpeg input (ex. &lt;code&gt;ffmpeg:camera1#video=h264&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;You can use &lt;code&gt;video&lt;/code&gt; and &lt;code&gt;audio&lt;/code&gt; params multiple times (ex. &lt;code&gt;#video=copy#audio=copy#audio=pcmu&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;You can use &lt;code&gt;rotate&lt;/code&gt; param with &lt;code&gt;90&lt;/code&gt;, &lt;code&gt;180&lt;/code&gt;, &lt;code&gt;270&lt;/code&gt; or &lt;code&gt;-90&lt;/code&gt; values, important with transcoding (ex. &lt;code&gt;#video=h264#rotate=90&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;You can use &lt;code&gt;width&lt;/code&gt; and/or &lt;code&gt;height&lt;/code&gt; params, important with transcoding (ex. &lt;code&gt;#video=h264#width=1280&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;You can use &lt;code&gt;drawtext&lt;/code&gt; to add a timestamp (ex. &lt;code&gt;drawtext=x=2:y=2:fontsize=12:fontcolor=white:box=1:boxcolor=black&lt;/code&gt;) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;This will greatly increase the CPU of the server, even with hardware acceleration&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;You can use &lt;code&gt;raw&lt;/code&gt; param for any additional FFmpeg arguments (ex. &lt;code&gt;#raw=-vf transpose=1&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;You can use &lt;code&gt;input&lt;/code&gt; param to override default input template (ex. &lt;code&gt;#input=rtsp/udp&lt;/code&gt; will change RTSP transport from TCP to UDP+TCP) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;You can use raw input value (ex. &lt;code&gt;#input=-timeout 5000000 -i {input}&lt;/code&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;You can add your own input templates&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Read more about &lt;a href=&#34;https://github.com/AlexxIT/go2rtc/wiki/Hardware-acceleration&#34;&gt;hardware acceleration&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;PS.&lt;/strong&gt; It is recommended to check the available hardware in the WebUI add page.&lt;/p&gt; &#xA;&lt;h4&gt;Source: FFmpeg Device&lt;/h4&gt; &#xA;&lt;p&gt;You can get video from any USB-camera or Webcam as RTSP or WebRTC stream. This is part of FFmpeg integration.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;check available devices in Web interface&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;video_size&lt;/code&gt; and &lt;code&gt;framerate&lt;/code&gt; must be supported by your camera!&lt;/li&gt; &#xA; &lt;li&gt;for Linux supported only video for now&lt;/li&gt; &#xA; &lt;li&gt;for macOS you can stream Facetime camera or whole Desktop!&lt;/li&gt; &#xA; &lt;li&gt;for macOS important to set right framerate&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Format: &lt;code&gt;ffmpeg:device?{input-params}#{param1}#{param2}#{param3}&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;streams:&#xA;  linux_usbcam:   ffmpeg:device?video=0&amp;amp;video_size=1280x720#video=h264&#xA;  windows_webcam: ffmpeg:device?video=0#video=h264&#xA;  macos_facetime: ffmpeg:device?video=0&amp;amp;audio=1&amp;amp;video_size=1280x720&amp;amp;framerate=30#video=h264#audio=pcma&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;PS.&lt;/strong&gt; It is recommended to check the available devices in the WebUI add page.&lt;/p&gt; &#xA;&lt;h4&gt;Source: Exec&lt;/h4&gt; &#xA;&lt;p&gt;Exec source can run any external application and expect data from it. Two transports are supported - &lt;strong&gt;pipe&lt;/strong&gt; (&lt;em&gt;from &lt;a href=&#34;https://github.com/AlexxIT/go2rtc/releases/tag/v1.5.0&#34;&gt;v1.5.0&lt;/a&gt;&lt;/em&gt;) and &lt;strong&gt;RTSP&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you want to use &lt;strong&gt;RTSP&lt;/strong&gt; transport - the command must contain the &lt;code&gt;{output}&lt;/code&gt; argument in any place. On launch, it will be replaced by the local address of the RTSP server.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;pipe&lt;/strong&gt; reads data from app stdout in different formats: &lt;strong&gt;MJPEG&lt;/strong&gt;, &lt;strong&gt;H.264/H.265 bitstream&lt;/strong&gt;, &lt;strong&gt;MPEG-TS&lt;/strong&gt;. Also pipe can write data to app stdin in two formats: &lt;strong&gt;PCMA&lt;/strong&gt; and &lt;strong&gt;PCM/48000&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The source can be used with:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ffmpeg.org/&#34;&gt;FFmpeg&lt;/a&gt; - go2rtc ffmpeg source just a shortcut to exec source&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ffmpeg.org/ffplay.html&#34;&gt;FFplay&lt;/a&gt; - play audio on your server&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gstreamer.freedesktop.org/&#34;&gt;GStreamer&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.raspberrypi.com/documentation/computers/camera_software.html&#34;&gt;Raspberry Pi Cameras&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;any your own software&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Pipe commands support parameters (format: &lt;code&gt;exec:{command}#{param1}#{param2}&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;killsignal&lt;/code&gt; - signal which will be send to stop the process (numeric form)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;killtimeout&lt;/code&gt; - time in seconds for forced termination with sigkill&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;backchannel&lt;/code&gt; - enable backchannel for two-way audio&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;streams:&#xA;  stream: exec:ffmpeg -re -i /media/BigBuckBunny.mp4 -c copy -rtsp_transport tcp -f rtsp {output}&#xA;  picam_h264: exec:libcamera-vid -t 0 --inline -o -&#xA;  picam_mjpeg: exec:libcamera-vid -t 0 --codec mjpeg -o -&#xA;  pi5cam_h264: exec:libcamera-vid -t 0 --libav-format h264 -o -&#xA;  canon: exec:gphoto2 --capture-movie --stdout#killsignal=2#killtimeout=5&#xA;  play_pcma: exec:ffplay -fflags nobuffer -f alaw -ar 8000 -i -#backchannel=1&#xA;  play_pcm48k: exec:ffplay -fflags nobuffer -f s16be -ar 48000 -i -#backchannel=1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Source: Echo&lt;/h4&gt; &#xA;&lt;p&gt;Some sources may have a dynamic link. And you will need to get it using a bash or python script. Your script should echo a link to the source. RTSP, FFmpeg or any of the &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-streams&#34;&gt;supported sources&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Docker&lt;/strong&gt; and &lt;strong&gt;Hass Add-on&lt;/strong&gt; users has preinstalled &lt;code&gt;python3&lt;/code&gt;, &lt;code&gt;curl&lt;/code&gt;, &lt;code&gt;jq&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Check examples in &lt;a href=&#34;https://github.com/AlexxIT/go2rtc/wiki/Source-Echo-examples&#34;&gt;wiki&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;streams:&#xA;  apple_hls: echo:python3 hls.py https://developer.apple.com/streaming/examples/basic-stream-osx-ios5.html&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Source: Expr&lt;/h4&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;a href=&#34;https://github.com/AlexxIT/go2rtc/releases/tag/v1.8.2&#34;&gt;New in v1.8.2&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Like &lt;code&gt;echo&lt;/code&gt; source, but uses the built-in &lt;a href=&#34;https://github.com/antonmedv/expr&#34;&gt;expr&lt;/a&gt; expression language (&lt;a href=&#34;https://github.com/AlexxIT/go2rtc/raw/master/internal/expr/README.md&#34;&gt;read more&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;h4&gt;Source: HomeKit&lt;/h4&gt; &#xA;&lt;p&gt;&lt;strong&gt;Important:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You can use HomeKit Cameras &lt;strong&gt;without Apple devices&lt;/strong&gt; (iPhone, iPad, etc.), it&#39;s just a yet another protocol&lt;/li&gt; &#xA; &lt;li&gt;HomeKit device can be paired with only one ecosystem. So, if you have paired it to an iPhone (Apple Home) - you can&#39;t pair it with Home Assistant or go2rtc. Or if you have paired it to go2rtc - you can&#39;t pair it with iPhone&lt;/li&gt; &#xA; &lt;li&gt;HomeKit device should be in same network with working &lt;a href=&#34;https://en.wikipedia.org/wiki/Multicast_DNS&#34;&gt;mDNS&lt;/a&gt; between device and go2rtc&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;go2rtc support import paired HomeKit devices from &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-hass&#34;&gt;Home Assistant&lt;/a&gt;. So you can use HomeKit camera with Hass and go2rtc simultaneously. If you using Hass, I recommend pairing devices with it, it will give you more options.&lt;/p&gt; &#xA;&lt;p&gt;You can pair device with go2rtc on the HomeKit page. If you can&#39;t see your devices - reload the page. Also try reboot your HomeKit device (power off). If you still can&#39;t see it - you have a problems with mDNS.&lt;/p&gt; &#xA;&lt;p&gt;If you see a device but it does not have a pair button - it is paired to some ecosystem (Apple Home, Home Assistant, HomeBridge etc). You need to delete device from that ecosystem, and it will be available for pairing. If you cannot unpair device, you will have to reset it.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Important:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;HomeKit audio uses very non-standard &lt;strong&gt;AAC-ELD&lt;/strong&gt; codec with very non-standard params and specification violation&lt;/li&gt; &#xA; &lt;li&gt;Audio can&#39;t be played in &lt;code&gt;VLC&lt;/code&gt; and probably any other player&lt;/li&gt; &#xA; &lt;li&gt;Audio should be transcoded for using with MSE, WebRTC, etc.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Recommended settings for using HomeKit Camera with WebRTC, MSE, MP4, RTSP:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;streams:&#xA;  aqara_g3:&#xA;    - hass:Camera-Hub-G3-AB12&#xA;    - ffmpeg:aqara_g3#audio=aac#audio=opus&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;RTSP link with &#34;normal&#34; audio for any player: &lt;code&gt;rtsp://192.168.1.123:8554/aqara_g3?video&amp;amp;audio=aac&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;This source is in active development!&lt;/strong&gt; Tested only with &lt;a href=&#34;https://www.aqara.com/eu/product/camera-hub-g3&#34;&gt;Aqara Camera Hub G3&lt;/a&gt; (both EU and CN versions).&lt;/p&gt; &#xA;&lt;h4&gt;Source: Bubble&lt;/h4&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;a href=&#34;https://github.com/AlexxIT/go2rtc/releases/tag/v1.6.1&#34;&gt;New in v1.6.1&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Other names: &lt;a href=&#34;http://www.eseecloud.com/&#34;&gt;ESeeCloud&lt;/a&gt;, &lt;a href=&#34;http://help.dvr163.com/&#34;&gt;dvr163&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;you can skip &lt;code&gt;username&lt;/code&gt;, &lt;code&gt;password&lt;/code&gt;, &lt;code&gt;port&lt;/code&gt;, &lt;code&gt;ch&lt;/code&gt; and &lt;code&gt;stream&lt;/code&gt; if they are default&lt;/li&gt; &#xA; &lt;li&gt;setup separate streams for different channels and streams&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;streams:&#xA;  camera1: bubble://username:password@192.168.1.123:34567/bubble/live?ch=0&amp;amp;stream=0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Source: DVRIP&lt;/h4&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;a href=&#34;https://github.com/AlexxIT/go2rtc/releases/tag/v1.2.0&#34;&gt;New in v1.2.0&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Other names: DVR-IP, NetSurveillance, Sofia protocol (NETsurveillance ActiveX plugin XMeye SDK).&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;you can skip &lt;code&gt;username&lt;/code&gt;, &lt;code&gt;password&lt;/code&gt;, &lt;code&gt;port&lt;/code&gt;, &lt;code&gt;channel&lt;/code&gt; and &lt;code&gt;subtype&lt;/code&gt; if they are default&lt;/li&gt; &#xA; &lt;li&gt;setup separate streams for different channels&lt;/li&gt; &#xA; &lt;li&gt;use &lt;code&gt;subtype=0&lt;/code&gt; for Main stream, and &lt;code&gt;subtype=1&lt;/code&gt; for Extra1 stream&lt;/li&gt; &#xA; &lt;li&gt;only the TCP protocol is supported&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;streams:&#xA;  only_stream: dvrip://username:password@192.168.1.123:34567?channel=0&amp;amp;subtype=0&#xA;  only_tts: dvrip://username:password@192.168.1.123:34567?backchannel=1&#xA;  two_way_audio:&#xA;    - dvrip://username:password@192.168.1.123:34567?channel=0&amp;amp;subtype=0&#xA;    - dvrip://username:password@192.168.1.123:34567?backchannel=1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Source: Tapo&lt;/h4&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;a href=&#34;https://github.com/AlexxIT/go2rtc/releases/tag/v1.2.0&#34;&gt;New in v1.2.0&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.tapo.com/&#34;&gt;TP-Link Tapo&lt;/a&gt; proprietary camera protocol with &lt;strong&gt;two way audio&lt;/strong&gt; support.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;stream quality is the same as &lt;a href=&#34;https://www.tapo.com/en/faq/34/&#34;&gt;RTSP protocol&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;use the &lt;strong&gt;cloud password&lt;/strong&gt;, this is not the RTSP password! you do not need to add a login!&lt;/li&gt; &#xA; &lt;li&gt;you can also use UPPERCASE MD5 hash from your cloud password with &lt;code&gt;admin&lt;/code&gt; username&lt;/li&gt; &#xA; &lt;li&gt;some new camera firmwares requires SHA256 instead of MD5&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;streams:&#xA;  # cloud password without username&#xA;  camera1: tapo://cloud-password@192.168.1.123&#xA;  # admin username and UPPERCASE MD5 cloud-password hash&#xA;  camera2: tapo://admin:UPPERCASE-MD5@192.168.1.123&#xA;  # admin username and UPPERCASE SHA256 cloud-password hash&#xA;  camera3: tapo://admin:UPPERCASE-SHA256@192.168.1.123&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;echo -n &#34;cloud password&#34; | md5 | awk &#39;{print toupper($0)}&#39;&#xA;echo -n &#34;cloud password&#34; | shasum -a 256 | awk &#39;{print toupper($0)}&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Source: Kasa&lt;/h4&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;a href=&#34;https://github.com/AlexxIT/go2rtc/releases/tag/v1.7.0&#34;&gt;New in v1.7.0&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.kasasmart.com/&#34;&gt;TP-Link Kasa&lt;/a&gt; non-standard protocol &lt;a href=&#34;https://medium.com/@hu3vjeen/reverse-engineering-tp-link-kc100-bac4641bf1cd&#34;&gt;more info&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;username&lt;/code&gt; - urlsafe email, &lt;code&gt;alex@gmail.com&lt;/code&gt; -&amp;gt; &lt;code&gt;alex%40gmail.com&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;password&lt;/code&gt; - base64password, &lt;code&gt;secret1&lt;/code&gt; -&amp;gt; &lt;code&gt;c2VjcmV0MQ==&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;streams:&#xA;  kc401: kasa://username:password@192.168.1.123:19443/https/stream/mixed&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Tested: KD110, KC200, KC401, KC420WS, EC71.&lt;/p&gt; &#xA;&lt;h4&gt;Source: GoPro&lt;/h4&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;a href=&#34;https://github.com/AlexxIT/go2rtc/releases/tag/v1.8.3&#34;&gt;New in v1.8.3&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Support streaming from &lt;a href=&#34;https://gopro.com/&#34;&gt;GoPro&lt;/a&gt; cameras, connected via USB or Wi-Fi to Linux, Mac, Windows. &lt;a href=&#34;https://github.com/AlexxIT/go2rtc/tree/master/internal/gopro&#34;&gt;Read more&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Source: Ivideon&lt;/h4&gt; &#xA;&lt;p&gt;Support public cameras from service &lt;a href=&#34;https://tv.ivideon.com/&#34;&gt;Ivideon&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;streams:&#xA;  quailcam: ivideon:100-tu5dkUPct39cTp9oNEN2B6/0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Source: Hass&lt;/h4&gt; &#xA;&lt;p&gt;Support import camera links from &lt;a href=&#34;https://www.home-assistant.io/&#34;&gt;Home Assistant&lt;/a&gt; config files:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.home-assistant.io/integrations/generic/&#34;&gt;Generic Camera&lt;/a&gt;, setup via GUI&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.home-assistant.io/integrations/homekit_controller/&#34;&gt;HomeKit Camera&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.home-assistant.io/integrations/onvif/&#34;&gt;ONVIF&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/humbertogontijo/homeassistant-roborock&#34;&gt;Roborock&lt;/a&gt; vacuums with camera&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;hass:&#xA;  config: &#34;/config&#34;  # skip this setting if you Hass Add-on user&#xA;&#xA;streams:&#xA;  generic_camera: hass:Camera1  # Settings &amp;gt; Integrations &amp;gt; Integration Name&#xA;  aqara_g3: hass:Camera-Hub-G3-AB12&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;WebRTC Cameras&lt;/strong&gt; (&lt;em&gt;from &lt;a href=&#34;https://github.com/AlexxIT/go2rtc/releases/tag/v1.6.0&#34;&gt;v1.6.0&lt;/a&gt;&lt;/em&gt;)&lt;/p&gt; &#xA;&lt;p&gt;Any cameras in WebRTC format are supported. But at the moment Home Assistant only supports some &lt;a href=&#34;https://www.home-assistant.io/integrations/nest/&#34;&gt;Nest&lt;/a&gt; cameras in this fomat.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Important.&lt;/strong&gt; The Nest API only allows you to get a link to a stream for 5 minutes. Do not use this with Frigate! If the stream expires, Frigate will consume all available ram on your machine within seconds. It&#39;s recommended to use &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-nest&#34;&gt;Nest source&lt;/a&gt; - it supports extending the stream.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;streams:&#xA;  # link to Home Assistant Supervised&#xA;  hass-webrtc1: hass://supervisor?entity_id=camera.nest_doorbell&#xA;  # link to external Hass with Long-Lived Access Tokens&#xA;  hass-webrtc2: hass://192.168.1.123:8123?entity_id=camera.nest_doorbell&amp;amp;token=eyXYZ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;RTSP Cameras&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;By default, the Home Assistant API does not allow you to get dynamic RTSP link to a camera stream. So more cameras, like &lt;a href=&#34;https://www.home-assistant.io/integrations/tuya/&#34;&gt;Tuya&lt;/a&gt;, and possibly others can also be imported by using &lt;a href=&#34;https://github.com/felipecrs/hass-expose-camera-stream-source#importing-home-assistant-cameras-to-go2rtc-andor-frigate&#34;&gt;this method&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Source: ISAPI&lt;/h4&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;a href=&#34;https://github.com/AlexxIT/go2rtc/releases/tag/v1.3.0&#34;&gt;New in v1.3.0&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;This source type support only backchannel audio for Hikvision ISAPI protocol. So it should be used as second source in addition to the RTSP protocol.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;streams:&#xA;  hikvision1:&#xA;    - rtsp://admin:password@192.168.1.123:554/Streaming/Channels/101&#xA;    - isapi://admin:password@192.168.1.123:80/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Source: Nest&lt;/h4&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;a href=&#34;https://github.com/AlexxIT/go2rtc/releases/tag/v1.6.0&#34;&gt;New in v1.6.0&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Currently only WebRTC cameras are supported.&lt;/p&gt; &#xA;&lt;p&gt;For simplicity, it is recommended to connect the Nest/WebRTC camera to the &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-hass&#34;&gt;Home Assistant&lt;/a&gt;. But if you can somehow get the below parameters - Nest/WebRTC source will work without Hass.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;streams:&#xA;  nest-doorbell: nest:?client_id=***&amp;amp;client_secret=***&amp;amp;refresh_token=***&amp;amp;project_id=***&amp;amp;device_id=***&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Source: Roborock&lt;/h4&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;a href=&#34;https://github.com/AlexxIT/go2rtc/releases/tag/v1.3.0&#34;&gt;New in v1.3.0&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;This source type support Roborock vacuums with cameras. Known working models:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Roborock S6 MaxV - only video (the vacuum has no microphone)&lt;/li&gt; &#xA; &lt;li&gt;Roborock S7 MaxV - video and two way audio&lt;/li&gt; &#xA; &lt;li&gt;Roborock Qrevo MaxV - video and two way audio&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Source support load Roborock credentials from Home Assistant &lt;a href=&#34;https://github.com/humbertogontijo/homeassistant-roborock&#34;&gt;custom integration&lt;/a&gt; or the &lt;a href=&#34;https://www.home-assistant.io/integrations/roborock&#34;&gt;core integration&lt;/a&gt;. Otherwise, you need to log in to your Roborock account (MiHome account is not supported). Go to: go2rtc WebUI &amp;gt; Add webpage. Copy &lt;code&gt;roborock://...&lt;/code&gt; source for your vacuum and paste it to &lt;code&gt;go2rtc.yaml&lt;/code&gt; config.&lt;/p&gt; &#xA;&lt;p&gt;If you have graphic pin for your vacuum - add it as numeric pin (lines: 123, 456, 789) to the end of the roborock-link.&lt;/p&gt; &#xA;&lt;h4&gt;Source: WebRTC&lt;/h4&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;a href=&#34;https://github.com/AlexxIT/go2rtc/releases/tag/v1.3.0&#34;&gt;New in v1.3.0&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;This source type support four connection formats.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;whep&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://datatracker.ietf.org/doc/draft-murillo-whep/&#34;&gt;WebRTC/WHEP&lt;/a&gt; - is replaced by &lt;a href=&#34;https://datatracker.ietf.org/doc/charter-ietf-wish/02/&#34;&gt;WebRTC/WISH&lt;/a&gt; standard for WebRTC video/audio viewers. But it may already be supported in some third-party software. It is supported in go2rtc.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;go2rtc&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;This format is only supported in go2rtc. Unlike WHEP it supports asynchronous WebRTC connection and two way audio.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;openipc&lt;/strong&gt; (&lt;em&gt;from &lt;a href=&#34;https://github.com/AlexxIT/go2rtc/releases/tag/v1.7.0&#34;&gt;v1.7.0&lt;/a&gt;&lt;/em&gt;)&lt;/p&gt; &#xA;&lt;p&gt;Support connection to &lt;a href=&#34;https://openipc.org/&#34;&gt;OpenIPC&lt;/a&gt; cameras.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;wyze&lt;/strong&gt; (&lt;em&gt;from &lt;a href=&#34;https://github.com/AlexxIT/go2rtc/releases/tag/v1.6.1&#34;&gt;v1.6.1&lt;/a&gt;&lt;/em&gt;)&lt;/p&gt; &#xA;&lt;p&gt;Supports connection to &lt;a href=&#34;https://www.wyze.com/&#34;&gt;Wyze&lt;/a&gt; cameras, using WebRTC protocol. You can use &lt;a href=&#34;https://github.com/mrlt8/docker-wyze-bridge&#34;&gt;docker-wyze-bridge&lt;/a&gt; project to get connection credentials.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;kinesis&lt;/strong&gt; (&lt;em&gt;from &lt;a href=&#34;https://github.com/AlexxIT/go2rtc/releases/tag/v1.6.1&#34;&gt;v1.6.1&lt;/a&gt;&lt;/em&gt;)&lt;/p&gt; &#xA;&lt;p&gt;Supports &lt;a href=&#34;https://aws.amazon.com/kinesis/video-streams/&#34;&gt;Amazon Kinesis Video Streams&lt;/a&gt;, using WebRTC protocol. You need to specify signalling WebSocket URL with all credentials in query params, &lt;code&gt;client_id&lt;/code&gt; and &lt;code&gt;ice_servers&lt;/code&gt; list in &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/RTCIceServer&#34;&gt;JSON format&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;streams:&#xA;  webrtc-whep:    webrtc:http://192.168.1.123:1984/api/webrtc?src=camera1&#xA;  webrtc-go2rtc:  webrtc:ws://192.168.1.123:1984/api/ws?src=camera1&#xA;  webrtc-openipc: webrtc:ws://192.168.1.123/webrtc_ws#format=openipc#ice_servers=[{&#34;urls&#34;:&#34;stun:stun.kinesisvideo.eu-north-1.amazonaws.com:443&#34;}]&#xA;  webrtc-wyze:    webrtc:http://192.168.1.123:5000/signaling/camera1?kvs#format=wyze&#xA;  webrtc-kinesis: webrtc:wss://...amazonaws.com/?...#format=kinesis#client_id=...#ice_servers=[{...},{...}]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;PS.&lt;/strong&gt; For &lt;code&gt;kinesis&lt;/code&gt; sources you can use &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-echo&#34;&gt;echo&lt;/a&gt; to get connection params using &lt;code&gt;bash&lt;/code&gt;/&lt;code&gt;python&lt;/code&gt; or any other script language.&lt;/p&gt; &#xA;&lt;h4&gt;Source: WebTorrent&lt;/h4&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;a href=&#34;https://github.com/AlexxIT/go2rtc/releases/tag/v1.3.0&#34;&gt;New in v1.3.0&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;This source can get a stream from another go2rtc via &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-webtorrent&#34;&gt;WebTorrent&lt;/a&gt; protocol.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;streams:&#xA;  webtorrent1: webtorrent:?share=huofssuxaty00izc&amp;amp;pwd=k3l2j9djeg8v8r7e&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Incoming sources&lt;/h4&gt; &#xA;&lt;p&gt;By default, go2rtc establishes a connection to the source when any client requests it. Go2rtc drops the connection to the source when it has no clients left.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Go2rtc also can accepts incoming sources in &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-rtsp&#34;&gt;RTSP&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-rtmp&#34;&gt;RTMP&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-http&#34;&gt;HTTP&lt;/a&gt; and &lt;strong&gt;WebRTC/WHIP&lt;/strong&gt; formats&lt;/li&gt; &#xA; &lt;li&gt;Go2rtc won&#39;t stop such a source if it has no clients&lt;/li&gt; &#xA; &lt;li&gt;You can push data only to existing stream (create stream with empty source in config)&lt;/li&gt; &#xA; &lt;li&gt;You can push multiple incoming sources to same stream&lt;/li&gt; &#xA; &lt;li&gt;You can push data to non empty stream, so it will have additional codecs inside&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Examples&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;RTSP with any codec &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;ffmpeg -re -i BigBuckBunny.mp4 -c copy -rtsp_transport tcp -f rtsp rtsp://localhost:8554/camera1&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;HTTP-MJPEG with MJPEG codec &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;ffmpeg -re -i BigBuckBunny.mp4 -c mjpeg -f mpjpeg http://localhost:1984/api/stream.mjpeg?dst=camera1&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;HTTP-FLV with H264, AAC codecs &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;ffmpeg -re -i BigBuckBunny.mp4 -c copy -f flv http://localhost:1984/api/stream.flv?dst=camera1&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;MPEG-TS with H264 codec &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;ffmpeg -re -i BigBuckBunny.mp4 -c copy -f mpegts http://localhost:1984/api/stream.ts?dst=camera1&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Incoming: Browser&lt;/h4&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;a href=&#34;https://github.com/AlexxIT/go2rtc/releases/tag/v1.3.0&#34;&gt;New in v1.3.0&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can turn the browser of any PC or mobile into an IP-camera with support video and two way audio. Or even broadcast your PC screen:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Create empty stream in the &lt;code&gt;go2rtc.yaml&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Go to go2rtc WebUI&lt;/li&gt; &#xA; &lt;li&gt;Open &lt;code&gt;links&lt;/code&gt; page for you stream&lt;/li&gt; &#xA; &lt;li&gt;Select &lt;code&gt;camera+microphone&lt;/code&gt; or &lt;code&gt;display+speaker&lt;/code&gt; option&lt;/li&gt; &#xA; &lt;li&gt;Open &lt;code&gt;webrtc&lt;/code&gt; local page (your go2rtc &lt;strong&gt;should work over HTTPS!&lt;/strong&gt;) or &lt;code&gt;share link&lt;/code&gt; via &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-webtorrent&#34;&gt;WebTorrent&lt;/a&gt; technology (work over HTTPS by default)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Incoming: WebRTC/WHIP&lt;/h4&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;a href=&#34;https://github.com/AlexxIT/go2rtc/releases/tag/v1.3.0&#34;&gt;New in v1.3.0&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can use &lt;strong&gt;OBS Studio&lt;/strong&gt; or any other broadcast software with &lt;a href=&#34;https://www.ietf.org/archive/id/draft-ietf-wish-whip-01.html&#34;&gt;WHIP&lt;/a&gt; protocol support. This standard has not yet been approved. But you can download OBS Studio &lt;a href=&#34;https://github.com/obsproject/obs-studio/actions/runs/3969201209&#34;&gt;dev version&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Settings &amp;gt; Stream &amp;gt; Service: WHIP &amp;gt; &lt;a href=&#34;http://192.168.1.123:1984/api/webrtc?dst=camera1&#34;&gt;http://192.168.1.123:1984/api/webrtc?dst=camera1&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Stream to camera&lt;/h4&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;a href=&#34;https://github.com/AlexxIT/go2rtc/releases/tag/v1.3.0&#34;&gt;New in v1.3.0&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;go2rtc support play audio files (ex. music or &lt;a href=&#34;https://www.home-assistant.io/integrations/#text-to-speech&#34;&gt;TTS&lt;/a&gt;) and live streams (ex. radio) on cameras with &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#two-way-audio&#34;&gt;two way audio&lt;/a&gt; support (RTSP/ONVIF cameras, TP-Link Tapo, Hikvision ISAPI, Roborock vacuums, any Browser).&lt;/p&gt; &#xA;&lt;p&gt;API example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;POST http://localhost:1984/api/streams?dst=camera1&amp;amp;src=ffmpeg:http://example.com/song.mp3#audio=pcma#input=file&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;you can stream: local files, web files, live streams or any format, supported by FFmpeg&lt;/li&gt; &#xA; &lt;li&gt;you should use &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-ffmpeg&#34;&gt;ffmpeg source&lt;/a&gt; for transcoding audio to codec, that your camera supports&lt;/li&gt; &#xA; &lt;li&gt;you can check camera codecs on the go2rtc WebUI info page when the stream is active&lt;/li&gt; &#xA; &lt;li&gt;some cameras support only low quality &lt;code&gt;PCMA/8000&lt;/code&gt; codec (ex. &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-tapo&#34;&gt;Tapo&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;it is recommended to choose higher quality formats if your camera supports them (ex. &lt;code&gt;PCMA/48000&lt;/code&gt; for some Dahua cameras)&lt;/li&gt; &#xA; &lt;li&gt;if you play files over http-link, you need to add &lt;code&gt;#input=file&lt;/code&gt; params for transcoding, so file will be transcoded and played in real time&lt;/li&gt; &#xA; &lt;li&gt;if you play live streams, you should skip &lt;code&gt;#input&lt;/code&gt; param, because it is already in real time&lt;/li&gt; &#xA; &lt;li&gt;you can stop active playback by calling the API with the empty &lt;code&gt;src&lt;/code&gt; parameter&lt;/li&gt; &#xA; &lt;li&gt;you will see one active producer and one active consumer in go2rtc WebUI info page during streaming&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Publish stream&lt;/h3&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;a href=&#34;https://github.com/AlexxIT/go2rtc/releases/tag/v1.8.0&#34;&gt;New in v1.8.0&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can publish any stream to streaming services (YouTube, Telegram, etc.) via RTMP/RTMPS. Important:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Supported codecs: H264 for video and AAC for audio&lt;/li&gt; &#xA; &lt;li&gt;AAC audio is required for YouTube, videos without audio will not work&lt;/li&gt; &#xA; &lt;li&gt;You don&#39;t need to enable &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-rtmp&#34;&gt;RTMP module&lt;/a&gt; listening for this task&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can use API:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;POST http://localhost:1984/api/streams?src=camera1&amp;amp;dst=rtmps://...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or config file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;publish:&#xA;  # publish stream &#34;video_audio_transcode&#34; to Telegram&#xA;  video_audio_transcode:&#xA;    - rtmps://xxx-x.rtmp.t.me/s/xxxxxxxxxx:xxxxxxxxxxxxxxxxxxxxxx&#xA;  # publish stream &#34;audio_transcode&#34; to Telegram and YouTube&#xA;  audio_transcode:&#xA;    - rtmps://xxx-x.rtmp.t.me/s/xxxxxxxxxx:xxxxxxxxxxxxxxxxxxxxxx&#xA;    - rtmp://xxx.rtmp.youtube.com/live2/xxxx-xxxx-xxxx-xxxx-xxxx&#xA;&#xA;streams:&#xA;  video_audio_transcode:&#xA;    - ffmpeg:rtsp://user:pass@192.168.1.123/stream1#video=h264#hardware#audio=aac&#xA;  audio_transcode:&#xA;    - ffmpeg:rtsp://user:pass@192.168.1.123/stream1#video=copy#audio=aac&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Telegram Desktop App&lt;/strong&gt; &amp;gt; Any public or private channel or group (where you admin) &amp;gt; Live stream &amp;gt; Start with... &amp;gt; Start streaming.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;YouTube&lt;/strong&gt; &amp;gt; Create &amp;gt; Go live &amp;gt; Stream latency: Ultra low-latency &amp;gt; Copy: Stream URL + Stream key.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Module: API&lt;/h3&gt; &#xA;&lt;p&gt;The HTTP API is the main part for interacting with the application. Default address: &lt;code&gt;http://localhost:1984/&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Important!&lt;/strong&gt; go2rtc passes requests from localhost and from unix socket without HTTP authorisation, even if you have it configured! It is your responsibility to set up secure external access to API. If not properly configured, an attacker can gain access to your cameras and even your server.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/AlexxIT/go2rtc/tree/master/api&#34;&gt;API description&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Module config&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;you can disable HTTP API with &lt;code&gt;listen: &#34;&#34;&lt;/code&gt; and use, for example, only RTSP client/server protocol&lt;/li&gt; &#xA; &lt;li&gt;you can enable HTTP API only on localhost with &lt;code&gt;listen: &#34;127.0.0.1:1984&#34;&lt;/code&gt; setting&lt;/li&gt; &#xA; &lt;li&gt;you can change API &lt;code&gt;base_path&lt;/code&gt; and host go2rtc on your main app webserver suburl&lt;/li&gt; &#xA; &lt;li&gt;all files from &lt;code&gt;static_dir&lt;/code&gt; hosted on root path: &lt;code&gt;/&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;you can use raw TLS cert/key content or path to files&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;api:&#xA;  listen: &#34;:1984&#34;    # default &#34;:1984&#34;, HTTP API port (&#34;&#34; - disabled)&#xA;  username: &#34;admin&#34;  # default &#34;&#34;, Basic auth for WebUI&#xA;  password: &#34;pass&#34;   # default &#34;&#34;, Basic auth for WebUI&#xA;  base_path: &#34;/rtc&#34;  # default &#34;&#34;, API prefix for serve on suburl (/api =&amp;gt; /rtc/api)&#xA;  static_dir: &#34;www&#34;  # default &#34;&#34;, folder for static files (custom web interface)&#xA;  origin: &#34;*&#34;        # default &#34;&#34;, allow CORS requests (only * supported)&#xA;  tls_listen: &#34;:443&#34; # default &#34;&#34;, enable HTTPS server&#xA;  tls_cert: |        # default &#34;&#34;, PEM-encoded fullchain certificate for HTTPS&#xA;    -----BEGIN CERTIFICATE-----&#xA;    ...&#xA;    -----END CERTIFICATE-----&#xA;  tls_key: |         # default &#34;&#34;, PEM-encoded private key for HTTPS&#xA;    -----BEGIN PRIVATE KEY-----&#xA;    ...&#xA;    -----END PRIVATE KEY-----&#xA;  unix_listen: &#34;/tmp/go2rtc.sock&#34;  # default &#34;&#34;, unix socket listener for API&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;PS:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;MJPEG over WebSocket plays better than native MJPEG because Chrome &lt;a href=&#34;https://bugs.chromium.org/p/chromium/issues/detail?id=527446&#34;&gt;bug&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;MP4 over WebSocket was created only for Apple iOS because it doesn&#39;t support MSE and native MP4&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Module: RTSP&lt;/h3&gt; &#xA;&lt;p&gt;You can get any stream as RTSP-stream: &lt;code&gt;rtsp://192.168.1.123:8554/{stream_name}&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can enable external password protection for your RTSP streams. Password protection always disabled for localhost calls (ex. FFmpeg or Hass on same server).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;rtsp:&#xA;  listen: &#34;:8554&#34;    # RTSP Server TCP port, default - 8554&#xA;  username: &#34;admin&#34;  # optional, default - disabled&#xA;  password: &#34;pass&#34;   # optional, default - disabled&#xA;  default_query: &#34;video&amp;amp;audio&#34;  # optional, default codecs filters &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default go2rtc provide RTSP-stream with only one first video and only one first audio. You can change it with the &lt;code&gt;default_query&lt;/code&gt; setting:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;default_query: &#34;mp4&#34;&lt;/code&gt; - MP4 compatible codecs (H264, H265, AAC)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;default_query: &#34;video=all&amp;amp;audio=all&#34;&lt;/code&gt; - all tracks from all source (not all players can handle this)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;default_query: &#34;video=h264,h265&#34;&lt;/code&gt; - only one video track (H264 or H265)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;default_query: &#34;video&amp;amp;audio=all&#34;&lt;/code&gt; - only one first any video and all audio as separate tracks&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Read more about &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#codecs-filters&#34;&gt;codecs filters&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Module: RTMP&lt;/h3&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;a href=&#34;https://github.com/AlexxIT/go2rtc/releases/tag/v1.8.0&#34;&gt;New in v1.8.0&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can get any stream as RTMP-stream: &lt;code&gt;rtmp://192.168.1.123/{stream_name}&lt;/code&gt;. Only H264/AAC codecs supported right now.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#incoming-sources&#34;&gt;Incoming stream&lt;/a&gt; in RTMP-format tested only with &lt;a href=&#34;https://obsproject.com/&#34;&gt;OBS Studio&lt;/a&gt; and Dahua camera. Different FFmpeg versions has differnt problems with this format.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;rtmp:&#xA;  listen: &#34;:1935&#34;  # by default - disabled!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Module: WebRTC&lt;/h3&gt; &#xA;&lt;p&gt;In most cases &lt;a href=&#34;https://en.wikipedia.org/wiki/WebRTC&#34;&gt;WebRTC&lt;/a&gt; uses direct peer-to-peer connection from your browser to go2rtc and sends media data via UDP. It &lt;strong&gt;can&#39;t pass&lt;/strong&gt; media data through your Nginx or Cloudflare or &lt;a href=&#34;https://www.nabucasa.com/&#34;&gt;Nabu Casa&lt;/a&gt; HTTP TCP connection! It can automatically detects your external IP via public &lt;a href=&#34;https://en.wikipedia.org/wiki/STUN&#34;&gt;STUN&lt;/a&gt; server. It can establish a external direct connection via &lt;a href=&#34;https://en.wikipedia.org/wiki/UDP_hole_punching&#34;&gt;UDP hole punching&lt;/a&gt; technology even if you not open your server to the World.&lt;/p&gt; &#xA;&lt;p&gt;But about 10-20% of users may need to configure additional settings for external access if &lt;strong&gt;mobile phone&lt;/strong&gt; or &lt;strong&gt;go2rtc server&lt;/strong&gt; behing &lt;a href=&#34;https://tomchen.github.io/symmetric-nat-test/&#34;&gt;Symmetric NAT&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;by default, WebRTC uses both TCP and UDP on port 8555 for connections&lt;/li&gt; &#xA; &lt;li&gt;you can use this port for external access&lt;/li&gt; &#xA; &lt;li&gt;you can change the port in YAML config:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;webrtc:&#xA;  listen: &#34;:8555&#34;  # address of your local server and port (TCP/UDP)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Static public IP&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;forward the port 8555 on your router (you can use same 8555 port or any other as external port)&lt;/li&gt; &#xA; &lt;li&gt;add your external IP-address and external port to YAML config&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;webrtc:&#xA;  candidates:&#xA;    - 216.58.210.174:8555  # if you have static public IP-address&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Dynamic public IP&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;forward the port 8555 on your router (you can use same 8555 port or any other as the external port)&lt;/li&gt; &#xA; &lt;li&gt;add &lt;code&gt;stun&lt;/code&gt; word and external port to YAML config &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;go2rtc automatically detects your external address with STUN-server&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;webrtc:&#xA;  candidates:&#xA;    - stun:8555  # if you have dynamic public IP-address&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Private IP&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;setup integration with &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-ngrok&#34;&gt;ngrok service&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;ngrok:&#xA;  command: ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Hard tech way 1. Own TCP-tunnel&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you have personal &lt;a href=&#34;https://en.wikipedia.org/wiki/Virtual_private_server&#34;&gt;VPS&lt;/a&gt;, you can create TCP-tunnel and setup in the same way as &#34;Static public IP&#34;. But use your VPS IP-address in YAML config.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Hard tech way 2. Using TURN-server&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you have personal &lt;a href=&#34;https://en.wikipedia.org/wiki/Virtual_private_server&#34;&gt;VPS&lt;/a&gt;, you can install TURN server (e.g. &lt;a href=&#34;https://github.com/coturn/coturn&#34;&gt;coturn&lt;/a&gt;, config &lt;a href=&#34;https://github.com/AlexxIT/WebRTC/wiki/Coturn-Example&#34;&gt;example&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;webrtc:&#xA;  ice_servers:&#xA;    - urls: [stun:stun.l.google.com:19302]&#xA;    - urls: [turn:123.123.123.123:3478]&#xA;      username: your_user&#xA;      credential: your_pass&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Module: HomeKit&lt;/h3&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;a href=&#34;https://github.com/AlexxIT/go2rtc/releases/tag/v1.7.0&#34;&gt;New in v1.7.0&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;HomeKit module can work in two modes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;export any H264 camera to Apple HomeKit&lt;/li&gt; &#xA; &lt;li&gt;transparent proxy any Apple HomeKit camera (Aqara, Eve, Eufy, etc.) back to Apple HomeKit, so you will have all camera features in Apple Home and also will have RTSP/WebRTC/MP4/etc. from your HomeKit camera&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Important&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;HomeKit cameras supports only H264 video and OPUS audio&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Minimal config&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;streams:&#xA;  dahua1: rtsp://admin:password@192.168.1.123/cam/realmonitor?channel=1&amp;amp;subtype=0&#xA;homekit:&#xA;  dahua1:  # same stream ID from streams list, default PIN - 19550224&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Full config&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;streams:&#xA;  dahua1:&#xA;    - rtsp://admin:password@192.168.1.123/cam/realmonitor?channel=1&amp;amp;subtype=0&#xA;    - ffmpeg:dahua1#video=h264#hardware  # if your camera doesn&#39;t support H264, important for HomeKit&#xA;    - ffmpeg:dahua1#audio=opus           # only OPUS audio supported by HomeKit&#xA;&#xA;homekit:&#xA;  dahua1:                   # same stream ID from streams list&#xA;    pin: 12345678           # custom PIN, default: 19550224&#xA;    name: Dahua camera      # custom camera name, default: generated from stream ID&#xA;    device_id: dahua1       # custom ID, default: generated from stream ID&#xA;    device_private: dahua1  # custom key, default: generated from stream ID&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Proxy HomeKit camera&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Video stream from HomeKit camera to Apple device (iPhone, AppleTV) will be transmitted directly&lt;/li&gt; &#xA; &lt;li&gt;Video stream from HomeKit camera to RTSP/WebRTC/MP4/etc. will be transmitted via go2rtc&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;streams:&#xA;  aqara1:&#xA;    - homekit://...&#xA;    - ffmpeg:aqara1#audio=aac#audio=opus  # optional audio transcoding&#xA;&#xA;homekit:&#xA;  aqara1:  # same stream ID from streams list&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Module: WebTorrent&lt;/h3&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;a href=&#34;https://github.com/AlexxIT/go2rtc/releases/tag/v1.3.0&#34;&gt;New in v1.3.0&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;This module support:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Share any local stream via &lt;a href=&#34;https://webtorrent.io/&#34;&gt;WebTorrent&lt;/a&gt; technology&lt;/li&gt; &#xA; &lt;li&gt;Get any &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#incoming-browser&#34;&gt;incoming stream&lt;/a&gt; from PC or mobile via &lt;a href=&#34;https://webtorrent.io/&#34;&gt;WebTorrent&lt;/a&gt; technology&lt;/li&gt; &#xA; &lt;li&gt;Get any remote &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-webtorrent&#34;&gt;go2rtc source&lt;/a&gt; via &lt;a href=&#34;https://webtorrent.io/&#34;&gt;WebTorrent&lt;/a&gt; technology&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Securely and free. You do not need to open a public access to the go2rtc server. But in some cases (Symmetric NAT) you may need to set up external access to &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-webrtc&#34;&gt;WebRTC module&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To generate sharing link or incoming link - goto go2rtc WebUI (stream links page). This link is &lt;strong&gt;temporary&lt;/strong&gt; and will stop working after go2rtc is restarted!&lt;/p&gt; &#xA;&lt;p&gt;You can create permanent external links in go2rtc config:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;webtorrent:&#xA;  shares:&#xA;    super-secret-share:  # share name, should be unique among all go2rtc users!&#xA;      pwd: super-secret-password&#xA;      src: rtsp-dahua1   # stream name from streams section&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Link example: &lt;a href=&#34;https://alexxit.github.io/go2rtc/#share=02SNtgjKXY&amp;amp;pwd=wznEQqznxW&amp;amp;media=video+audio&#34;&gt;https://alexxit.github.io/go2rtc/#share=02SNtgjKXY&amp;amp;pwd=wznEQqznxW&amp;amp;media=video+audio&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;TODO: article how it works...&lt;/p&gt; &#xA;&lt;h3&gt;Module: ngrok&lt;/h3&gt; &#xA;&lt;p&gt;With ngrok integration you can get external access to your streams in situations when you have Internet with private IP-address.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ngrok is pre-installed for &lt;strong&gt;Docker&lt;/strong&gt; and &lt;strong&gt;Hass Add-on&lt;/strong&gt; users&lt;/li&gt; &#xA; &lt;li&gt;you may need external access for two different things: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;WebRTC stream, so you need tunnel WebRTC TCP port (ex. 8555)&lt;/li&gt; &#xA;   &lt;li&gt;go2rtc web interface, so you need tunnel API HTTP port (ex. 1984)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;ngrok support authorization for your web interface&lt;/li&gt; &#xA; &lt;li&gt;ngrok automatically adds HTTPS to your web interface&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The ngrok free subscription has the following limitations:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You can reserve a free domain for serving the web interface, but the TCP address you get will always be random and change with each restart of the ngrok agent (not a problem for webrtc stream)&lt;/li&gt; &#xA; &lt;li&gt;You can forward multiple ports from a single agent, but you can only run one ngrok agent on the free plan&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;go2rtc will automatically get your external TCP address (if you enable it in ngrok config) and use it with WebRTC connection (if you enable it in webrtc config).&lt;/p&gt; &#xA;&lt;p&gt;You need to manually download the &lt;a href=&#34;https://ngrok.com/download&#34;&gt;ngrok agent app&lt;/a&gt; for your OS and register with the &lt;a href=&#34;https://ngrok.com/signup&#34;&gt;ngrok service&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Tunnel for only WebRTC Stream&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;You need to add your &lt;a href=&#34;https://dashboard.ngrok.com/get-started/your-authtoken&#34;&gt;ngrok authtoken&lt;/a&gt; and WebRTC TCP port to YAML:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;ngrok:&#xA;  command: ngrok tcp 8555 --authtoken eW91IHNoYWxsIG5vdCBwYXNzCnlvdSBzaGFsbCBub3QgcGFzcw&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Tunnel for WebRTC and Web interface&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;You need to create &lt;code&gt;ngrok.yaml&lt;/code&gt; config file and add it to go2rtc config:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;ngrok:&#xA;  command: ngrok start --all --config ngrok.yaml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;ngrok config example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;version: &#34;2&#34;&#xA;authtoken: eW91IHNoYWxsIG5vdCBwYXNzCnlvdSBzaGFsbCBub3QgcGFzcw&#xA;tunnels:&#xA;  api:&#xA;    addr: 1984  # use the same port as in go2rtc config&#xA;    proto: http&#xA;    basic_auth:&#xA;      - admin:password  # you can set login/pass for your web interface&#xA;  webrtc:&#xA;    addr: 8555  # use the same port as in go2rtc config&#xA;    proto: tcp&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://ngrok.com/docs/agent/config/&#34;&gt;ngrok agent documentation&lt;/a&gt; for more details on the ngrok configuration file.&lt;/p&gt; &#xA;&lt;h3&gt;Module: Hass&lt;/h3&gt; &#xA;&lt;p&gt;The best and easiest way to use go2rtc inside the Home Assistant is to install the custom integration &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#go2rtc-home-assistant-integration&#34;&gt;WebRTC Camera&lt;/a&gt; and custom lovelace card.&lt;/p&gt; &#xA;&lt;p&gt;But go2rtc is also compatible and can be used with &lt;a href=&#34;https://www.home-assistant.io/integrations/rtsp_to_webrtc/&#34;&gt;RTSPtoWebRTC&lt;/a&gt; built-in integration.&lt;/p&gt; &#xA;&lt;p&gt;You have several options on how to add a camera to Home Assistant:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Camera RTSP source =&amp;gt; &lt;a href=&#34;https://www.home-assistant.io/integrations/generic/&#34;&gt;Generic Camera&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Camera &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-streams&#34;&gt;any source&lt;/a&gt; =&amp;gt; &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#configuration&#34;&gt;go2rtc config&lt;/a&gt; =&amp;gt; &lt;a href=&#34;https://www.home-assistant.io/integrations/generic/&#34;&gt;Generic Camera&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Install any &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#fast-start&#34;&gt;go2rtc&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Add your stream to &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#configuration&#34;&gt;go2rtc config&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Hass &amp;gt; Settings &amp;gt; Integrations &amp;gt; Add Integration &amp;gt; &lt;a href=&#34;https://my.home-assistant.io/redirect/config_flow_start/?domain=onvif&#34;&gt;ONVIF&lt;/a&gt; &amp;gt; Host: &lt;code&gt;127.0.0.1&lt;/code&gt;, Port: &lt;code&gt;1984&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Hass &amp;gt; Settings &amp;gt; Integrations &amp;gt; Add Integration &amp;gt; &lt;a href=&#34;https://my.home-assistant.io/redirect/config_flow_start/?domain=generic&#34;&gt;Generic Camera&lt;/a&gt; &amp;gt; Stream Source URL: &lt;code&gt;rtsp://127.0.0.1:8554/camera1&lt;/code&gt; (change to your stream name, leave everything else as is)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;You have several options on how to watch the stream from the cameras in Home Assistant:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;Camera Entity&lt;/code&gt; =&amp;gt; &lt;code&gt;Picture Entity Card&lt;/code&gt; =&amp;gt; Technology &lt;code&gt;HLS&lt;/code&gt;, codecs: &lt;code&gt;H264/H265/AAC&lt;/code&gt;, poor latency.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Camera Entity&lt;/code&gt; =&amp;gt; &lt;a href=&#34;https://www.home-assistant.io/integrations/rtsp_to_webrtc/&#34;&gt;RTSPtoWebRTC&lt;/a&gt; =&amp;gt; &lt;code&gt;Picture Entity Card&lt;/code&gt; =&amp;gt; Technology &lt;code&gt;WebRTC&lt;/code&gt;, codecs: &lt;code&gt;H264/PCMU/PCMA/OPUS&lt;/code&gt;, best latency. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Install any &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#fast-start&#34;&gt;go2rtc&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Hass &amp;gt; Settings &amp;gt; Integrations &amp;gt; Add Integration &amp;gt; &lt;a href=&#34;https://my.home-assistant.io/redirect/config_flow_start/?domain=rtsp_to_webrtc&#34;&gt;RTSPtoWebRTC&lt;/a&gt; &amp;gt; &lt;code&gt;http://127.0.0.1:1984/&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;RTSPtoWebRTC &amp;gt; Configure &amp;gt; STUN server: &lt;code&gt;stun.l.google.com:19302&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Use Picture Entity or Picture Glance lovelace card&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Camera Entity&lt;/code&gt; or &lt;code&gt;Camera URL&lt;/code&gt; =&amp;gt; &lt;a href=&#34;https://github.com/AlexxIT/WebRTC&#34;&gt;WebRTC Camera&lt;/a&gt; =&amp;gt; Technology: &lt;code&gt;WebRTC/MSE/MP4/MJPEG&lt;/code&gt;, codecs: &lt;code&gt;H264/H265/AAC/PCMU/PCMA/OPUS&lt;/code&gt;, best latency, best compatibility. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Install and add &lt;a href=&#34;https://github.com/AlexxIT/WebRTC&#34;&gt;WebRTC Camera&lt;/a&gt; custom integration&lt;/li&gt; &#xA;   &lt;li&gt;Use WebRTC Camera custom lovelace card&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;You can add camera &lt;code&gt;entity_id&lt;/code&gt; to &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#configuration&#34;&gt;go2rtc config&lt;/a&gt; if you need transcoding:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;streams:&#xA;  &#34;camera.hall&#34;: ffmpeg:{input}#video=copy#audio=opus&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;PS.&lt;/strong&gt; Default Home Assistant lovelace cards don&#39;t support 2-way audio. You can use 2-way audio from &lt;a href=&#34;https://my.home-assistant.io/redirect/supervisor_addon/?addon=a889bffc_go2rtc&amp;amp;repository_url=https%3A%2F%2Fgithub.com%2FAlexxIT%2Fhassio-addons&#34;&gt;Add-on Web UI&lt;/a&gt;. But you need use HTTPS to access the microphone. This is a browser restriction and cannot be avoided.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;PS.&lt;/strong&gt; There is also another nice card with go2rtc support - &lt;a href=&#34;https://github.com/dermotduffy/frigate-hass-card&#34;&gt;Frigate Lovelace Card&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Module: MP4&lt;/h3&gt; &#xA;&lt;p&gt;Provides several features:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;MSE stream (fMP4 over WebSocket)&lt;/li&gt; &#xA; &lt;li&gt;Camera snapshots in MP4 format (single frame), can be sent to &lt;a href=&#34;https://github.com/AlexxIT/go2rtc/wiki/Snapshot-to-Telegram&#34;&gt;Telegram&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;HTTP progressive streaming (MP4 file stream) - bad format for streaming because of high start delay. This format doesn&#39;t work in all Safari browsers, but go2rtc will automatically redirect it to HLS/fMP4 it this case.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;API examples:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;MP4 snapshot: &lt;code&gt;http://192.168.1.123:1984/api/frame.mp4?src=camera1&lt;/code&gt; (H264, H265)&lt;/li&gt; &#xA; &lt;li&gt;MP4 stream: &lt;code&gt;http://192.168.1.123:1984/api/stream.mp4?src=camera1&lt;/code&gt; (H264, H265, AAC)&lt;/li&gt; &#xA; &lt;li&gt;MP4 file: &lt;code&gt;http://192.168.1.123:1984/api/stream.mp4?src=camera1&lt;/code&gt; (H264, H265*, AAC, OPUS, MP3, PCMA, PCMU, PCM) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;You can use &lt;code&gt;mp4&lt;/code&gt;, &lt;code&gt;mp4=flac&lt;/code&gt; and &lt;code&gt;mp4=all&lt;/code&gt; param for codec filters&lt;/li&gt; &#xA;   &lt;li&gt;You can use &lt;code&gt;duration&lt;/code&gt; param in seconds (ex. &lt;code&gt;duration=15&lt;/code&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;You can use &lt;code&gt;filename&lt;/code&gt; param (ex. &lt;code&gt;filename=record.mp4&lt;/code&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;You can use &lt;code&gt;rotate&lt;/code&gt; param with &lt;code&gt;90&lt;/code&gt;, &lt;code&gt;180&lt;/code&gt; or &lt;code&gt;270&lt;/code&gt; values&lt;/li&gt; &#xA;   &lt;li&gt;You can use &lt;code&gt;scale&lt;/code&gt; param with positive integer values (ex. &lt;code&gt;scale=4:3&lt;/code&gt;)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Read more about &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#codecs-filters&#34;&gt;codecs filters&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;PS.&lt;/strong&gt; Rotate and scale params don&#39;t use transcoding and change video using metadata.&lt;/p&gt; &#xA;&lt;h3&gt;Module: HLS&lt;/h3&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;a href=&#34;https://github.com/AlexxIT/go2rtc/releases/tag/v1.1.0&#34;&gt;New in v1.1.0&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/HTTP_Live_Streaming&#34;&gt;HLS&lt;/a&gt; is the worst technology for real-time streaming. It can only be useful on devices that do not support more modern technology, like &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-webrtc&#34;&gt;WebRTC&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-mp4&#34;&gt;MSE/MP4&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The go2rtc implementation differs from the standards and may not work with all players.&lt;/p&gt; &#xA;&lt;p&gt;API examples:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;HLS/TS stream: &lt;code&gt;http://192.168.1.123:1984/api/stream.m3u8?src=camera1&lt;/code&gt; (H264)&lt;/li&gt; &#xA; &lt;li&gt;HLS/fMP4 stream: &lt;code&gt;http://192.168.1.123:1984/api/stream.m3u8?src=camera1&amp;amp;mp4&lt;/code&gt; (H264, H265, AAC)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Read more about &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#codecs-filters&#34;&gt;codecs filters&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Module: MJPEG&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Important.&lt;/strong&gt; For stream as MJPEG format, your source MUST contain the MJPEG codec. If your stream has a MJPEG codec - you can receive &lt;strong&gt;MJPEG stream&lt;/strong&gt; or &lt;strong&gt;JPEG snapshots&lt;/strong&gt; via API.&lt;/p&gt; &#xA;&lt;p&gt;You can receive an MJPEG stream in several ways:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;some cameras support MJPEG codec inside &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-rtsp&#34;&gt;RTSP stream&lt;/a&gt; (ex. second stream for Dahua cameras)&lt;/li&gt; &#xA; &lt;li&gt;some cameras has HTTP link with &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-http&#34;&gt;MJPEG stream&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;some cameras has HTTP link with snapshots - go2rtc can convert them to &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-http&#34;&gt;MJPEG stream&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;you can convert H264/H265 stream from your camera via &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-ffmpeg&#34;&gt;FFmpeg integraion&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;With this example, your stream will have both H264 and MJPEG codecs:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;streams:&#xA;  camera1:&#xA;    - rtsp://rtsp:12345678@192.168.1.123/av_stream/ch0&#xA;    - ffmpeg:camera1#video=mjpeg&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;API examples:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;MJPEG stream: &lt;code&gt;http://192.168.1.123:1984/api/stream.mjpeg?src=camera1&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;JPEG snapshots: &lt;code&gt;http://192.168.1.123:1984/api/frame.jpeg?src=camera1&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;You can use &lt;code&gt;width&lt;/code&gt;/&lt;code&gt;w&lt;/code&gt; and/or &lt;code&gt;height&lt;/code&gt;/&lt;code&gt;h&lt;/code&gt; params&lt;/li&gt; &#xA;   &lt;li&gt;You can use &lt;code&gt;rotate&lt;/code&gt; param with &lt;code&gt;90&lt;/code&gt;, &lt;code&gt;180&lt;/code&gt;, &lt;code&gt;270&lt;/code&gt; or &lt;code&gt;-90&lt;/code&gt; values&lt;/li&gt; &#xA;   &lt;li&gt;You can use &lt;code&gt;hardware&lt;/code&gt;/&lt;code&gt;hw&lt;/code&gt; param &lt;a href=&#34;https://github.com/AlexxIT/go2rtc/wiki/Hardware-acceleration&#34;&gt;read more&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;PS.&lt;/strong&gt; This module also supports streaming to the server console (terminal) in the &lt;strong&gt;animated ASCII art&lt;/strong&gt; format (&lt;a href=&#34;https://github.com/AlexxIT/go2rtc/raw/master/internal/mjpeg/README.md&#34;&gt;read more&lt;/a&gt;):&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=sHj_3h_sX7M&#34;&gt;&lt;img src=&#34;https://img.youtube.com/vi/sHj_3h_sX7M/mqdefault.jpg&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Module: Log&lt;/h3&gt; &#xA;&lt;p&gt;You can set different log levels for different modules.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;log:&#xA;  level: info  # default level&#xA;  api: trace&#xA;  exec: debug&#xA;  ngrok: info&#xA;  rtsp: warn&#xA;  streams: error&#xA;  webrtc: fatal&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Security&lt;/h2&gt; &#xA;&lt;p&gt;By default &lt;code&gt;go2rtc&lt;/code&gt; starts the Web interface on port &lt;code&gt;1984&lt;/code&gt; and RTSP on port &lt;code&gt;8554&lt;/code&gt;, as well as use port &lt;code&gt;8555&lt;/code&gt; for WebRTC connections. The three ports are accessible from your local network. So anyone on your local network can watch video from your cameras without authorization. The same rule applies to the Home Assistant Add-on.&lt;/p&gt; &#xA;&lt;p&gt;This is not a problem if you trust your local network as much as I do. But you can change this behaviour with a &lt;code&gt;go2rtc.yaml&lt;/code&gt; config:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;api:&#xA;  listen: &#34;127.0.0.1:1984&#34; # localhost&#xA;&#xA;rtsp:&#xA;  listen: &#34;127.0.0.1:8554&#34; # localhost&#xA;&#xA;webrtc:&#xA;  listen: &#34;:8555&#34; # external TCP/UDP port&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;local access to RTSP is not a problem for &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-ffmpeg&#34;&gt;FFmpeg&lt;/a&gt; integration, because it runs locally on your server&lt;/li&gt; &#xA; &lt;li&gt;local access to API is not a problem for &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#go2rtc-home-assistant-add-on&#34;&gt;Home Assistant Add-on&lt;/a&gt;, because Hass runs locally on same server and Add-on Web UI protected with Hass authorization (&lt;a href=&#34;https://www.home-assistant.io/blog/2019/04/15/hassio-ingress/&#34;&gt;Ingress feature&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;external access to WebRTC TCP port is not a problem, because it used only for transmit encrypted media data &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;anyway you need to open this port to your local network and to the Internet in order for WebRTC to work&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you need Web interface protection without Home Assistant Add-on - you need to use reverse proxy, like &lt;a href=&#34;https://nginx.org/&#34;&gt;Nginx&lt;/a&gt;, &lt;a href=&#34;https://caddyserver.com/&#34;&gt;Caddy&lt;/a&gt;, &lt;a href=&#34;https://ngrok.com/&#34;&gt;ngrok&lt;/a&gt;, etc.&lt;/p&gt; &#xA;&lt;p&gt;PS. Additionally WebRTC will try to use the 8555 UDP port for transmit encrypted media. It works without problems on the local network. And sometimes also works for external access, even if you haven&#39;t opened this port on your router (&lt;a href=&#34;https://en.wikipedia.org/wiki/UDP_hole_punching&#34;&gt;read more&lt;/a&gt;). But for stable external WebRTC access, you need to open the 8555 port on your router for both TCP and UDP.&lt;/p&gt; &#xA;&lt;h2&gt;Codecs filters&lt;/h2&gt; &#xA;&lt;p&gt;go2rtc can automatically detect which codecs your device supports for &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-webrtc&#34;&gt;WebRTC&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-mp4&#34;&gt;MSE&lt;/a&gt; technologies.&lt;/p&gt; &#xA;&lt;p&gt;But it cannot be done for &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-rtsp&#34;&gt;RTSP&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-mp4&#34;&gt;HTTP progressive streaming&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-hls&#34;&gt;HLS&lt;/a&gt; technologies. You can manually add a codec filter when you create a link to a stream. The filters work the same for all three technologies. Filters do not create a new codec. They only select the suitable codec from existing sources. You can add new codecs to the stream using the &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-ffmpeg&#34;&gt;FFmpeg transcoding&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Without filters:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;RTSP will provide only the first video and only the first audio (any codec)&lt;/li&gt; &#xA; &lt;li&gt;MP4 will include only compatible codecs (H264, H265, AAC)&lt;/li&gt; &#xA; &lt;li&gt;HLS will output in the legacy TS format (H264 without audio)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Some examples:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;rtsp://192.168.1.123:8554/camera1?mp4&lt;/code&gt; - useful for recording as MP4 files (e.g. Hass or Frigate)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;rtsp://192.168.1.123:8554/camera1?video=h264,h265&amp;amp;audio=aac&lt;/code&gt; - full version of the filter above&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;rtsp://192.168.1.123:8554/camera1?video=h264&amp;amp;audio=aac&amp;amp;audio=opus&lt;/code&gt; - H264 video codec and two separate audio tracks&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;rtsp://192.168.1.123:8554/camera1?video&amp;amp;audio=all&lt;/code&gt; - any video codec and all audio codecs as separate tracks&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;http://192.168.1.123:1984/api/stream.m3u8?src=camera1&amp;amp;mp4&lt;/code&gt; - HLS stream with MP4 compatible codecs (HLS/fMP4)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;http://192.168.1.123:1984/api/stream.m3u8?src=camera1&amp;amp;mp4=flac&lt;/code&gt; - HLS stream with PCMA/PCMU/PCM audio support (HLS/fMP4), won&#39;t work on old devices&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;http://192.168.1.123:1984/api/stream.mp4?src=camera1&amp;amp;mp4=flac&lt;/code&gt; - MP4 file with PCMA/PCMU/PCM audio support, won&#39;t work on old devices (ex. iOS 12)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;http://192.168.1.123:1984/api/stream.mp4?src=camera1&amp;amp;mp4=all&lt;/code&gt; - MP4 file with non standard audio codecs, won&#39;t work on some players&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Codecs madness&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;AVC/H.264&lt;/code&gt; video can be played almost anywhere. But &lt;code&gt;HEVC/H.265&lt;/code&gt; has a lot of limitations in supporting with different devices and browsers. It&#39;s all about patents and money, you can&#39;t do anything about it.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Device&lt;/th&gt; &#xA;   &lt;th&gt;WebRTC&lt;/th&gt; &#xA;   &lt;th&gt;MSE&lt;/th&gt; &#xA;   &lt;th&gt;HTTP*&lt;/th&gt; &#xA;   &lt;th&gt;HLS&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;em&gt;latency&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;best&lt;/td&gt; &#xA;   &lt;td&gt;medium&lt;/td&gt; &#xA;   &lt;td&gt;bad&lt;/td&gt; &#xA;   &lt;td&gt;bad&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;- Desktop Chrome 107+ &lt;br&gt; - Desktop Edge &lt;br&gt; - Android Chrome 107+&lt;/td&gt; &#xA;   &lt;td&gt;H264 &lt;br&gt; PCMU, PCMA &lt;br&gt; OPUS&lt;/td&gt; &#xA;   &lt;td&gt;H264, H265* &lt;br&gt; AAC, FLAC* &lt;br&gt; OPUS&lt;/td&gt; &#xA;   &lt;td&gt;H264, H265* &lt;br&gt; AAC, FLAC* &lt;br&gt; OPUS, MP3&lt;/td&gt; &#xA;   &lt;td&gt;no&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Desktop Firefox&lt;/td&gt; &#xA;   &lt;td&gt;H264 &lt;br&gt; PCMU, PCMA &lt;br&gt; OPUS&lt;/td&gt; &#xA;   &lt;td&gt;H264 &lt;br&gt; AAC, FLAC* &lt;br&gt; OPUS&lt;/td&gt; &#xA;   &lt;td&gt;H264 &lt;br&gt; AAC, FLAC* &lt;br&gt; OPUS&lt;/td&gt; &#xA;   &lt;td&gt;no&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;- Desktop Safari 14+ &lt;br&gt; - iPad Safari 14+ &lt;br&gt; - iPhone Safari 17.1+&lt;/td&gt; &#xA;   &lt;td&gt;H264, H265* &lt;br&gt; PCMU, PCMA &lt;br&gt; OPUS&lt;/td&gt; &#xA;   &lt;td&gt;H264, H265 &lt;br&gt; AAC, FLAC*&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;no!&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;H264, H265 &lt;br&gt; AAC, FLAC*&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;iPhone Safari 14+&lt;/td&gt; &#xA;   &lt;td&gt;H264, H265* &lt;br&gt; PCMU, PCMA &lt;br&gt; OPUS&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;no!&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;no!&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;H264, H265 &lt;br&gt; AAC, FLAC*&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;macOS &lt;a href=&#34;https://apps.apple.com/app/home-assistant/id1099568401&#34;&gt;Hass App&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;no&lt;/td&gt; &#xA;   &lt;td&gt;no&lt;/td&gt; &#xA;   &lt;td&gt;no&lt;/td&gt; &#xA;   &lt;td&gt;H264, H265 &lt;br&gt; AAC, FLAC*&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;code&gt;HTTP*&lt;/code&gt; - HTTP Progressive Streaming, not related with &lt;a href=&#34;https://en.wikipedia.org/wiki/Progressive_download&#34;&gt;Progressive download&lt;/a&gt;, because the file has no size and no end&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Chrome H265: &lt;a href=&#34;https://chromestatus.com/feature/5186511939567616&#34;&gt;read this&lt;/a&gt; and &lt;a href=&#34;https://github.com/StaZhu/enable-chromium-hevc-hardware-decoding&#34;&gt;read this&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Edge H265: &lt;a href=&#34;https://www.reddit.com/r/MicrosoftEdge/comments/v9iw8k/enable_hevc_support_in_edge/&#34;&gt;read this&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Desktop Safari H265: Menu &amp;gt; Develop &amp;gt; Experimental &amp;gt; WebRTC H265&lt;/li&gt; &#xA; &lt;li&gt;iOS Safari H265: Settings &amp;gt; Safari &amp;gt; Advanced &amp;gt; Experimental &amp;gt; WebRTC H265&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Audio&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Go2rtc support &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#built-in-transcoding&#34;&gt;automatic repack&lt;/a&gt; &lt;code&gt;PCMA/PCMU/PCM&lt;/code&gt; codecs to &lt;code&gt;FLAC&lt;/code&gt; for MSE/MP4/HLS so they will work almost anywhere&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;WebRTC&lt;/strong&gt; audio codecs: &lt;code&gt;PCMU/8000&lt;/code&gt;, &lt;code&gt;PCMA/8000&lt;/code&gt;, &lt;code&gt;OPUS/48000/2&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;OPUS&lt;/code&gt; and &lt;code&gt;MP3&lt;/code&gt; inside &lt;strong&gt;MP4&lt;/strong&gt; is part of the standard, but some players do not support them anyway (especially Apple)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Apple devices&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;all Apple devices don&#39;t support HTTP progressive streaming&lt;/li&gt; &#xA; &lt;li&gt;iPhones don&#39;t support MSE technology because it competes with the HTTP Live Streaming (HLS) technology, invented by Apple&lt;/li&gt; &#xA; &lt;li&gt;HLS is the worst technology for &lt;strong&gt;live&lt;/strong&gt; streaming, it still exists only because of iPhones&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Codec names&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;H264 = H.264 = AVC (Advanced Video Coding)&lt;/li&gt; &#xA; &lt;li&gt;H265 = H.265 = HEVC (High Efficiency Video Coding)&lt;/li&gt; &#xA; &lt;li&gt;PCMA = G.711 PCM (A-law) = PCM A-law (&lt;code&gt;alaw&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;PCMU = G.711 PCM (µ-law) = PCM mu-law (&lt;code&gt;mulaw&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;PCM = L16 = PCM signed 16-bit big-endian (&lt;code&gt;s16be&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;AAC = MPEG4-GENERIC&lt;/li&gt; &#xA; &lt;li&gt;MP3 = MPEG-1 Audio Layer III or MPEG-2 Audio Layer III&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Built-in transcoding&lt;/h2&gt; &#xA;&lt;p&gt;There are no plans to embed complex transcoding algorithms inside go2rtc. &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-ffmpeg&#34;&gt;FFmpeg source&lt;/a&gt; does a great job with this. Including &lt;a href=&#34;https://github.com/AlexxIT/go2rtc/wiki/Hardware-acceleration&#34;&gt;hardware acceleration&lt;/a&gt; support.&lt;/p&gt; &#xA;&lt;p&gt;But go2rtc has some simple algorithms. They are turned on automatically, you do not need to set them up additionally.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;PCM for MSE/MP4/HLS&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Go2rtc can pack &lt;code&gt;PCMA&lt;/code&gt;, &lt;code&gt;PCMU&lt;/code&gt; and &lt;code&gt;PCM&lt;/code&gt; codecs into an MP4 container so that they work in all browsers and all built-in players on modern devices. Including Apple QuickTime:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;PCMA/PCMU =&amp;gt; PCM =&amp;gt; FLAC =&amp;gt; MSE/MP4/HLS&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Resample PCMA/PCMU for WebRTC&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;By default WebRTC support only &lt;code&gt;PCMA/8000&lt;/code&gt; and &lt;code&gt;PCMU/8000&lt;/code&gt;. But go2rtc can automatically resample PCMA and PCMU codec with with a different sample rate. Also go2rtc can transcode &lt;code&gt;PCM&lt;/code&gt; codec to &lt;code&gt;PCMA/8000&lt;/code&gt;, so WebRTC can play it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;PCM/xxx =&amp;gt; PCMA/8000 =&amp;gt; WebRTC&#xA;PCMA/xxx =&amp;gt; PCMA/8000 =&amp;gt; WebRTC&#xA;PCMU/xxx =&amp;gt; PCMU/8000 =&amp;gt; WebRTC&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Important&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;FLAC codec not supported in a RTSP stream. If you using Frigate or Hass for recording MP4 files with PCMA/PCMU/PCM audio - you should setup transcoding to AAC codec.&lt;/li&gt; &#xA; &lt;li&gt;PCMA and PCMU are VERY low quality codecs. Them support only 256! different sounds. Use them only when you have no other options.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Codecs negotiation&lt;/h2&gt; &#xA;&lt;p&gt;For example, you want to watch RTSP-stream from &lt;a href=&#34;https://www.dahuasecurity.com/fr/products/All-Products/Network-Cameras/Wireless-Series/Wi-Fi-Series/4MP/IPC-K42&#34;&gt;Dahua IPC-K42&lt;/a&gt; camera in your Chrome browser.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;this camera support 2-way audio standard &lt;strong&gt;ONVIF Profile T&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;this camera support codecs &lt;strong&gt;H264, H265&lt;/strong&gt; for send video, and you select &lt;code&gt;H264&lt;/code&gt; in camera settings&lt;/li&gt; &#xA; &lt;li&gt;this camera support codecs &lt;strong&gt;AAC, PCMU, PCMA&lt;/strong&gt; for send audio (from mic), and you select &lt;code&gt;AAC/16000&lt;/code&gt; in camera settings&lt;/li&gt; &#xA; &lt;li&gt;this camera support codecs &lt;strong&gt;AAC, PCMU, PCMA&lt;/strong&gt; for receive audio (to speaker), you don&#39;t need to select them&lt;/li&gt; &#xA; &lt;li&gt;your browser support codecs &lt;strong&gt;H264, VP8, VP9, AV1&lt;/strong&gt; for receive video, you don&#39;t need to select them&lt;/li&gt; &#xA; &lt;li&gt;your browser support codecs &lt;strong&gt;OPUS, PCMU, PCMA&lt;/strong&gt; for send and receive audio, you don&#39;t need to select them&lt;/li&gt; &#xA; &lt;li&gt;you can&#39;t get camera audio directly, because its audio codecs doesn&#39;t match with your browser codecs &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;so you decide to use transcoding via FFmpeg and add this setting to config YAML file&lt;/li&gt; &#xA;   &lt;li&gt;you have chosen &lt;code&gt;OPUS/48000/2&lt;/code&gt; codec, because it is higher quality than the &lt;code&gt;PCMU/8000&lt;/code&gt; or &lt;code&gt;PCMA/8000&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Now you have stream with two sources - &lt;strong&gt;RTSP and FFmpeg&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;streams:&#xA;  dahua:&#xA;    - rtsp://admin:password@192.168.1.123/cam/realmonitor?channel=1&amp;amp;subtype=0&amp;amp;unicast=true&amp;amp;proto=Onvif&#xA;    - ffmpeg:rtsp://admin:password@192.168.1.123/cam/realmonitor?channel=1&amp;amp;subtype=0#audio=opus&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;go2rtc&lt;/strong&gt; automatically match codecs for you browser and all your stream sources. This called &lt;strong&gt;multi-source 2-way codecs negotiation&lt;/strong&gt;. And this is one of the main features of this app.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/assets/codecs.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;PS.&lt;/strong&gt; You can select &lt;code&gt;PCMU&lt;/code&gt; or &lt;code&gt;PCMA&lt;/code&gt; codec in camera setting and don&#39;t use transcoding at all. Or you can select &lt;code&gt;AAC&lt;/code&gt; codec for main stream and &lt;code&gt;PCMU&lt;/code&gt; codec for second stream and add both RTSP to YAML config, this also will work fine.&lt;/p&gt; &#xA;&lt;h2&gt;Projects using go2rtc&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://frigate.video/&#34;&gt;Frigate 12+&lt;/a&gt; - open source NVR built around real-time AI object detection&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dermotduffy/frigate-hass-card&#34;&gt;Frigate Lovelace Card&lt;/a&gt; - custom card for Home Assistant&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/OpenIPC/firmware/tree/master/general/package/go2rtc&#34;&gt;OpenIPC&lt;/a&gt; - Alternative IP Camera firmware from an open community&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/gtxaspec/wz_mini_hacks&#34;&gt;wz_mini_hacks&lt;/a&gt; - Custom firmware for Wyze cameras&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/oischinger/eufyp2pstream&#34;&gt;EufyP2PStream&lt;/a&gt; - A small project that provides a Video/Audio Stream from Eufy cameras that don&#39;t directly support RTSP&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bropat/ioBroker.eusec&#34;&gt;ioBroker.euSec&lt;/a&gt; - &lt;a href=&#34;https://www.iobroker.net/&#34;&gt;ioBroker&lt;/a&gt; adapter for control Eufy security devices&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Anonym-tsk/MMM-go2rtc&#34;&gt;MMM-go2rtc&lt;/a&gt; - MagicMirror² Module&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tsightler/ring-mqtt&#34;&gt;ring-mqtt&lt;/a&gt; - Ring devices to MQTT Bridge&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Distributions&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pkgs.alpinelinux.org/packages?name=go2rtc&#34;&gt;Alpine Linux&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://linux-packages.com/aur/package/go2rtc&#34;&gt;Arch User Repository&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/inode64/inode64-overlay/tree/main/media-video/go2rtc&#34;&gt;Gentoo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://search.nixos.org/packages?query=go2rtc&#34;&gt;NixOS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://tteck.github.io/Proxmox/&#34;&gt;Proxmox Helper Scripts&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.myqnap.org/product/go2rtc/&#34;&gt;QNAP&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://synocommunity.com/package/go2rtc&#34;&gt;Synology NAS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://unraid.net/community/apps?q=go2rtc&#34;&gt;Unraid&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Cameras experience&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.dahuasecurity.com/&#34;&gt;Dahua&lt;/a&gt; - reference implementation streaming protocols, a lot of settings, high stream quality, multiple streaming clients&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.ezviz.com/&#34;&gt;EZVIZ&lt;/a&gt; - awful RTSP protocol realisation, many bugs in SDP&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.hikvision.com/&#34;&gt;Hikvision&lt;/a&gt; - a lot of proprietary streaming technologies&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://reolink.com/&#34;&gt;Reolink&lt;/a&gt; - some models has awful unusable RTSP realisation and not best RTMP alternative (I recommend that you contact Reolink support for new firmware), few settings&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://sonoff.tech/&#34;&gt;Sonoff&lt;/a&gt; - very low stream quality, no settings, not best protocol implementation&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.tp-link.com/&#34;&gt;TP-Link&lt;/a&gt; - few streaming clients, packet loss?&lt;/li&gt; &#xA; &lt;li&gt;Chinese cheap noname cameras, Wyze Cams, Xiaomi cameras with hacks (usual has &lt;code&gt;/live/ch00_1&lt;/code&gt; in RTSP URL) - awful but usable RTSP protocol realisation, low stream quality, few settings, packet loss?&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;TIPS&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Using apps for low RTSP delay&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;ffplay -fflags nobuffer -flags low_delay &#34;rtsp://192.168.1.123:8554/camera1&#34;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;VLC &amp;gt; Preferences &amp;gt; Input / Codecs &amp;gt; Default Caching Level: Lowest Latency&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Snapshots to Telegram&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/AlexxIT/go2rtc/wiki/Snapshot-to-Telegram&#34;&gt;read more&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Q. What&#39;s the difference between go2rtc, WebRTC Camera and RTSPtoWebRTC?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;go2rtc&lt;/strong&gt; is a new version of the server-side &lt;a href=&#34;https://github.com/AlexxIT/WebRTC&#34;&gt;WebRTC Camera&lt;/a&gt; integration, completely rewritten from scratch, with a number of fixes and a huge number of new features. It is compatible with native Home Assistant &lt;a href=&#34;https://www.home-assistant.io/integrations/rtsp_to_webrtc/&#34;&gt;RTSPtoWebRTC&lt;/a&gt; integration. So you &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#module-hass&#34;&gt;can use&lt;/a&gt; default lovelace Picture Entity or Picture Glance.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Q. Should I use go2rtc addon or WebRTC Camera integration?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;go2rtc&lt;/strong&gt; is more than just viewing your stream online with WebRTC/MSE/HLS/etc. You can use it all the time for your various tasks. But every time the Hass is rebooted - all integrations are also rebooted. So your streams may be interrupted if you use them in additional tasks.&lt;/p&gt; &#xA;&lt;p&gt;Basic users can use &lt;strong&gt;WebRTC Camera&lt;/strong&gt; integration. Advanced users can use go2rtc addon or Frigate 12+ addon.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Q. Which RTSP link should I use inside Hass?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can use direct link to your cameras there (as you always do). &lt;strong&gt;go2rtc&lt;/strong&gt; support zero-config feature. You may leave &lt;code&gt;streams&lt;/code&gt; config section empty. And your streams will be created on the fly on first start from Hass. And your cameras will have multiple connections. Some from Hass directly and one from &lt;strong&gt;go2rtc&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Also you can specify your streams in &lt;strong&gt;go2rtc&lt;/strong&gt; &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#configuration&#34;&gt;config file&lt;/a&gt; and use RTSP links to this addon. With additional features: multi-source &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#codecs-negotiation&#34;&gt;codecs negotiation&lt;/a&gt; or FFmpeg &lt;a href=&#34;https://raw.githubusercontent.com/AlexxIT/go2rtc/master/#source-ffmpeg&#34;&gt;transcoding&lt;/a&gt; for unsupported codecs. Or use them as source for Frigate. And your cameras will have one connection from &lt;strong&gt;go2rtc&lt;/strong&gt;. And &lt;strong&gt;go2rtc&lt;/strong&gt; will have multiple connection - some from Hass via RTSP protocol, some from your browser via WebRTC/MSE/HLS protocols.&lt;/p&gt; &#xA;&lt;p&gt;Use any config what you like.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Q. What about lovelace card with support 2-way audio?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;At this moment I am focused on improving stability and adding new features to &lt;strong&gt;go2rtc&lt;/strong&gt;. Maybe someone could write such a card themselves. It&#39;s not difficult, I have &lt;a href=&#34;https://github.com/AlexxIT/go2rtc/raw/master/www/webrtc.html&#34;&gt;some sketches&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>TwiN/gatus</title>
    <updated>2024-12-01T01:53:48Z</updated>
    <id>tag:github.com,2024-12-01:/TwiN/gatus</id>
    <link href="https://github.com/TwiN/gatus" rel="alternate"></link>
    <summary type="html">&lt;p&gt;⛑ Automated developer-oriented status page&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://gatus.io&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/TwiN/gatus/master/.github/assets/logo-with-dark-text.png&#34; alt=&#34;Gatus&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/TwiN/gatus/workflows/test/badge.svg?branch=master&#34; alt=&#34;test&#34;&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/TwiN/gatus&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/TwiN/gatus?&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/TwiN/gatus&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/TwiN/gatus/branch/master/graph/badge.svg?sanitize=true&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/TwiN/gatus&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/go-mod/go-version/TwiN/gatus.svg?sanitize=true&#34; alt=&#34;Go version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cloud.docker.com/repository/docker/twinproduction/gatus&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/pulls/twinproduction/gatus.svg?sanitize=true&#34; alt=&#34;Docker pulls&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/TwiN&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/followers/TwiN?label=Follow&amp;amp;style=social&#34; alt=&#34;Follow TwiN&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Gatus is a developer-oriented health dashboard that gives you the ability to monitor your services using HTTP, ICMP, TCP, and even DNS queries as well as evaluate the result of said queries by using a list of conditions on values like the status code, the response time, the certificate expiration, the body and many others. The icing on top is that each of these health checks can be paired with alerting via Slack, Teams, PagerDuty, Discord, Twilio and many more.&lt;/p&gt; &#xA;&lt;p&gt;I personally deploy it in my Kubernetes cluster and let it monitor the status of my core applications: &lt;a href=&#34;https://status.twin.sh/&#34;&gt;https://status.twin.sh/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Looking for a managed solution? Check out &lt;a href=&#34;https://gatus.io&#34;&gt;Gatus.io&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;Quick start&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;docker run -p 8080:8080 --name gatus twinproduction/gatus&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;You can also use GitHub Container Registry if you prefer:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;docker run -p 8080:8080 --name gatus ghcr.io/twin/gatus&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;For more details, see &lt;a href=&#34;https://raw.githubusercontent.com/TwiN/gatus/master/#usage&#34;&gt;Usage&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;❤ Like this project? Please consider &lt;a href=&#34;https://github.com/sponsors/TwiN&#34;&gt;sponsoring me&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/TwiN/gatus/master/.github/assets/dashboard-dark.png&#34; alt=&#34;Gatus dashboard&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Have any feedback or questions? &lt;a href=&#34;https://github.com/TwiN/gatus/discussions/new&#34;&gt;Create a discussion&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TwiN/gatus/master/#table-of-contents&#34;&gt;Table of Contents&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TwiN/gatus/master/#why-gatus&#34;&gt;Why Gatus?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TwiN/gatus/master/#features&#34;&gt;Features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TwiN/gatus/master/#usage&#34;&gt;Usage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TwiN/gatus/master/#configuration&#34;&gt;Configuration&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TwiN/gatus/master/#endpoints&#34;&gt;Endpoints&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TwiN/gatus/master/#external-endpoints&#34;&gt;External Endpoints&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TwiN/gatus/master/#conditions&#34;&gt;Conditions&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TwiN/gatus/master/#placeholders&#34;&gt;Placeholders&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TwiN/gatus/master/#functions&#34;&gt;Functions&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TwiN/gatus/master/#storage&#34;&gt;Storage&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TwiN/gatus/master/#client-configuration&#34;&gt;Client configuration&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TwiN/gatus/master/#alerting&#34;&gt;Alerting&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TwiN/gatus/master/#configuring-discord-alerts&#34;&gt;Configuring Discord alerts&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TwiN/gatus/master/#configuring-email-alerts&#34;&gt;Configuring Email alerts&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TwiN/gatus/master/#configuring-gitea-alerts&#34;&gt;Configuring Gitea alerts&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TwiN/gatus/master/#configuring-github-alerts&#34;&gt;Configuring GitHub alerts&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TwiN/gatus/master/#configuring-gitlab-alerts&#34;&gt;Configuring GitLab alerts&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TwiN/gatus/master/#configuring-google-chat-alerts&#34;&gt;Configuring Google Chat alerts&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TwiN/gatus/master/#configuring-gotify-alerts&#34;&gt;Configuring Gotify alerts&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TwiN/gatus/master/#configuring-jetbrains-space-alerts&#34;&gt;Configuring JetBrains Space alerts&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TwiN/gatus/master/#configuring-matrix-alerts&#34;&gt;Configuring Matrix alerts&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TwiN/gatus/master/#configuring-mattermost-alerts&#34;&gt;Configuring Mattermost alerts&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TwiN/gatus/master/#configuring-messagebird-alerts&#34;&gt;Configuring Messagebird alerts&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TwiN/gatus/master/#configuring-ntfy-alerts&#34;&gt;Configuring Ntfy alerts&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TwiN/gatus/master/#configuring-opsgenie-alerts&#34;&gt;Configuring Opsgenie alerts&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TwiN/gatus/master/#configuring-pagerduty-alerts&#34;&gt;Configuring PagerDuty alerts&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TwiN/gatus/master/#configuring-pushover-alerts&#34;&gt;Configuring Pushover alerts&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TwiN/gatus/master/#configuring-slack-alerts&#34;&gt;Configuring Slack alerts&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TwiN/gatus/master/#configuring-teams-alerts-deprecated&#34;&gt;Configuring Teams alerts &lt;em&gt;(Deprecated)&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TwiN/gatus/master/#configuring-teams-workflow-alerts&#34;&gt;Configuring Teams Workflow alerts&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TwiN/gatus/master/#configuring-telegram-alerts&#34;&gt;Configuring Telegram alerts&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TwiN/gatus/master/#configuring-twilio-alerts&#34;&gt;Configuring Twilio alerts&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TwiN/gatus/master/#configuring-aws-ses-alerts&#34;&gt;Configuring AWS SES alerts&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TwiN/gatus/master/#configuring-custom-alerts&#34;&gt;Configuring custom alerts&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TwiN/gatus/master/#configuring-zulip-alerts&#34;&gt;Configuring Zulip alerts&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TwiN/gatus/master/#setting-a-default-alert&#34;&gt;Setting a default alert&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TwiN/gatus/master/#maintenance&#34;&gt;Maintenance&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TwiN/gatus/master/#security&#34;&gt;Security&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TwiN/gatus/master/#basic-authentication&#34;&gt;Basic Authentication&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TwiN/gatus/master/#oidc&#34;&gt;OIDC&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TwiN/gatus/master/#tls-encryption&#34;&gt;TLS Encryption&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TwiN/gatus/master/#metrics&#34;&gt;Metrics&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TwiN/gatus/master/#connectivity&#34;&gt;Connectivity&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TwiN/gatus/master/#remote-instances-experimental&#34;&gt;Remote instances (EXPERIMENTAL)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TwiN/gatus/master/#deployment&#34;&gt;Deployment&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TwiN/gatus/master/#docker&#34;&gt;Docker&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TwiN/gatus/master/#helm-chart&#34;&gt;Helm Chart&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TwiN/gatus/master/#terraform&#34;&gt;Terraform&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TwiN/gatus/master/#running-the-tests&#34;&gt;Running the tests&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TwiN/gatus/master/#using-in-production&#34;&gt;Using in Production&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TwiN/gatus/master/#faq&#34;&gt;FAQ&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TwiN/gatus/master/#sending-a-graphql-request&#34;&gt;Sending a GraphQL request&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TwiN/gatus/master/#recommended-interval&#34;&gt;Recommended interval&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TwiN/gatus/master/#default-timeouts&#34;&gt;Default timeouts&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TwiN/gatus/master/#monitoring-a-tcp-endpoint&#34;&gt;Monitoring a TCP endpoint&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TwiN/gatus/master/#monitoring-a-udp-endpoint&#34;&gt;Monitoring a UDP endpoint&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TwiN/gatus/master/#monitoring-a-sctp-endpoint&#34;&gt;Monitoring a SCTP endpoint&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TwiN/gatus/master/#monitoring-a-websocket-endpoint&#34;&gt;Monitoring a WebSocket endpoint&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TwiN/gatus/master/#monitoring-an-endpoint-using-icmp&#34;&gt;Monitoring an endpoint using ICMP&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TwiN/gatus/master/#monitoring-an-endpoint-using-dns-queries&#34;&gt;Monitoring an endpoint using DNS queries&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TwiN/gatus/master/#monitoring-an-endpoint-using-ssh&#34;&gt;Monitoring an endpoint using SSH&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TwiN/gatus/master/#monitoring-an-endpoint-using-starttls&#34;&gt;Monitoring an endpoint using STARTTLS&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TwiN/gatus/master/#monitoring-an-endpoint-using-tls&#34;&gt;Monitoring an endpoint using TLS&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TwiN/gatus/master/#monitoring-domain-expiration&#34;&gt;Monitoring domain expiration&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TwiN/gatus/master/#disable-monitoring-lock&#34;&gt;disable-monitoring-lock&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TwiN/gatus/master/#reloading-configuration-on-the-fly&#34;&gt;Reloading configuration on the fly&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TwiN/gatus/master/#endpoint-groups&#34;&gt;Endpoint groups&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TwiN/gatus/master/#exposing-gatus-on-a-custom-path&#34;&gt;Exposing Gatus on a custom path&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TwiN/gatus/master/#exposing-gatus-on-a-custom-port&#34;&gt;Exposing Gatus on a custom port&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TwiN/gatus/master/#configuring-a-startup-delay&#34;&gt;Configuring a startup delay&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TwiN/gatus/master/#keeping-your-configuration-small&#34;&gt;Keeping your configuration small&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TwiN/gatus/master/#proxy-client-configuration&#34;&gt;Proxy client configuration&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TwiN/gatus/master/#how-to-fix-431-request-header-fields-too-large-error&#34;&gt;How to fix 431 Request Header Fields Too Large error&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TwiN/gatus/master/#badges&#34;&gt;Badges&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TwiN/gatus/master/#uptime&#34;&gt;Uptime&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TwiN/gatus/master/#health&#34;&gt;Health&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TwiN/gatus/master/#health-shieldsio&#34;&gt;Health (Shields.io)&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TwiN/gatus/master/#response-time&#34;&gt;Response time&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TwiN/gatus/master/#how-to-change-the-color-thresholds-of-the-response-time-badge&#34;&gt;How to change the color thresholds of the response time badge&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TwiN/gatus/master/#api&#34;&gt;API&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TwiN/gatus/master/#installing-as-binary&#34;&gt;Installing as binary&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TwiN/gatus/master/#high-level-design-overview&#34;&gt;High level design overview&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Why Gatus?&lt;/h2&gt; &#xA;&lt;p&gt;Before getting into the specifics, I want to address the most common question:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Why would I use Gatus when I can just use Prometheus’ Alertmanager, Cloudwatch or even Splunk?&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Neither of these can tell you that there’s a problem if there are no clients actively calling the endpoint. In other words, it&#39;s because monitoring metrics mostly rely on existing traffic, which effectively means that unless your clients are already experiencing a problem, you won&#39;t be notified.&lt;/p&gt; &#xA;&lt;p&gt;Gatus, on the other hand, allows you to configure health checks for each of your features, which in turn allows it to monitor these features and potentially alert you before any clients are impacted.&lt;/p&gt; &#xA;&lt;p&gt;A sign you may want to look into Gatus is by simply asking yourself whether you&#39;d receive an alert if your load balancer was to go down right now. Will any of your existing alerts be triggered? Your metrics won’t report an increase in errors if no traffic makes it to your applications. This puts you in a situation where your clients are the ones that will notify you about the degradation of your services rather than you reassuring them that you&#39;re working on fixing the issue before they even know about it.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;p&gt;The main features of Gatus are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Highly flexible health check conditions&lt;/strong&gt;: While checking the response status may be enough for some use cases, Gatus goes much further and allows you to add conditions on the response time, the response body and even the IP address.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Ability to use Gatus for user acceptance tests&lt;/strong&gt;: Thanks to the point above, you can leverage this application to create automated user acceptance tests.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Very easy to configure&lt;/strong&gt;: Not only is the configuration designed to be as readable as possible, it&#39;s also extremely easy to add a new service or a new endpoint to monitor.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Alerting&lt;/strong&gt;: While having a pretty visual dashboard is useful to keep track of the state of your application(s), you probably don&#39;t want to stare at it all day. Thus, notifications via Slack, Mattermost, Messagebird, PagerDuty, Twilio, Google chat and Teams are supported out of the box with the ability to configure a custom alerting provider for any needs you might have, whether it be a different provider or a custom application that manages automated rollbacks.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Metrics&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Low resource consumption&lt;/strong&gt;: As with most Go applications, the resource footprint that this application requires is negligibly small.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TwiN/gatus/master/#badges&#34;&gt;Badges&lt;/a&gt;&lt;/strong&gt;: &lt;img src=&#34;https://status.twin.sh/api/v1/endpoints/core_blog-external/uptimes/7d/badge.svg?sanitize=true&#34; alt=&#34;Uptime 7d&#34;&gt; &lt;img src=&#34;https://status.twin.sh/api/v1/endpoints/core_blog-external/response-times/24h/badge.svg?sanitize=true&#34; alt=&#34;Response time 24h&#34;&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Dark mode&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/TwiN/gatus/master/.github/assets/dashboard-conditions.png&#34; alt=&#34;Gatus dashboard conditions&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;Quick start&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;docker run -p 8080:8080 --name gatus twinproduction/gatus&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;You can also use GitHub Container Registry if you prefer:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;docker run -p 8080:8080 --name gatus ghcr.io/twin/gatus&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;If you want to create your own configuration, see &lt;a href=&#34;https://raw.githubusercontent.com/TwiN/gatus/master/#docker&#34;&gt;Docker&lt;/a&gt; for information on how to mount a configuration file.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;Here&#39;s a simple example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;endpoints:&#xA;  - name: website                 # Name of your endpoint, can be anything&#xA;    url: &#34;https://twin.sh/health&#34;&#xA;    interval: 5m                  # Duration to wait between every status check (default: 60s)&#xA;    conditions:&#xA;      - &#34;[STATUS] == 200&#34;         # Status must be 200&#xA;      - &#34;[BODY].status == UP&#34;     # The json path &#34;$.status&#34; must be equal to UP&#xA;      - &#34;[RESPONSE_TIME] &amp;lt; 300&#34;   # Response time must be under 300ms&#xA;&#xA;  - name: make-sure-header-is-rendered&#xA;    url: &#34;https://example.org/&#34;&#xA;    interval: 60s&#xA;    conditions:&#xA;      - &#34;[STATUS] == 200&#34;                          # Status must be 200&#xA;      - &#34;[BODY] == pat(*&amp;lt;h1&amp;gt;Example Domain&amp;lt;/h1&amp;gt;*)&#34; # Body must contain the specified header&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This example would look similar to this:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/TwiN/gatus/master/.github/assets/example.png&#34; alt=&#34;Simple example&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;By default, the configuration file is expected to be at &lt;code&gt;config/config.yaml&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can specify a custom path by setting the &lt;code&gt;GATUS_CONFIG_PATH&lt;/code&gt; environment variable.&lt;/p&gt; &#xA;&lt;p&gt;If &lt;code&gt;GATUS_CONFIG_PATH&lt;/code&gt; points to a directory, all &lt;code&gt;*.yaml&lt;/code&gt; and &lt;code&gt;*.yml&lt;/code&gt; files inside said directory and its subdirectories are merged like so:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;All maps/objects are deep merged (i.e. you could define &lt;code&gt;alerting.slack&lt;/code&gt; in one file and &lt;code&gt;alerting.pagerduty&lt;/code&gt; in another file)&lt;/li&gt; &#xA; &lt;li&gt;All slices/arrays are appended (i.e. you can define &lt;code&gt;endpoints&lt;/code&gt; in multiple files and each endpoint will be added to the final list of endpoints)&lt;/li&gt; &#xA; &lt;li&gt;Parameters with a primitive value (e.g. &lt;code&gt;metrics&lt;/code&gt;, &lt;code&gt;alerting.slack.webhook-url&lt;/code&gt;, etc.) may only be defined once to forcefully avoid any ambiguity &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;To clarify, this also means that you could not define &lt;code&gt;alerting.slack.webhook-url&lt;/code&gt; in two files with different values. All files are merged into one before they are processed. This is by design.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;💡 You can also use environment variables in the configuration file (e.g. &lt;code&gt;$DOMAIN&lt;/code&gt;, &lt;code&gt;${DOMAIN}&lt;/code&gt;)&lt;/p&gt; &#xA; &lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/TwiN/gatus/master/.examples/docker-compose-postgres-storage/config/config.yaml&#34;&gt;examples/docker-compose-postgres-storage/config/config.yaml&lt;/a&gt; for an example.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;If you want to test it locally, see &lt;a href=&#34;https://raw.githubusercontent.com/TwiN/gatus/master/#docker&#34;&gt;Docker&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Parameter&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Default&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;metrics&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Whether to expose metrics at &lt;code&gt;/metrics&lt;/code&gt;.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;storage&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TwiN/gatus/master/#storage&#34;&gt;Storage configuration&lt;/a&gt;.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;{}&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TwiN/gatus/master/#alerting&#34;&gt;Alerting configuration&lt;/a&gt;.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;{}&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;endpoints&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TwiN/gatus/master/#endpoints&#34;&gt;Endpoints configuration&lt;/a&gt;.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Required &lt;code&gt;[]&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;external-endpoints&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TwiN/gatus/master/#external-endpoints&#34;&gt;External Endpoints configuration&lt;/a&gt;.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;[]&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;security&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TwiN/gatus/master/#security&#34;&gt;Security configuration&lt;/a&gt;.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;{}&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;disable-monitoring-lock&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Whether to &lt;a href=&#34;https://raw.githubusercontent.com/TwiN/gatus/master/#disable-monitoring-lock&#34;&gt;disable the monitoring lock&lt;/a&gt;.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;skip-invalid-config-update&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Whether to ignore invalid configuration update. &lt;br&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/TwiN/gatus/master/#reloading-configuration-on-the-fly&#34;&gt;Reloading configuration on the fly&lt;/a&gt;.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;web&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Web configuration.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;{}&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;web.address&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Address to listen on.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;0.0.0.0&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;web.port&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Port to listen on.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;8080&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;web.read-buffer-size&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Buffer size for reading requests from a connection. Also limit for the maximum header size.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;8192&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;web.tls.certificate-file&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Optional public certificate file for TLS in PEM format.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;``&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;web.tls.private-key-file&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Optional private key file for TLS in PEM format.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;``&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;ui&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;UI configuration.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;{}&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;ui.title&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/title&#34;&gt;Title of the document&lt;/a&gt;.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;Health Dashboard ǀ Gatus&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;ui.description&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Meta description for the page.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;Gatus is an advanced...&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;ui.header&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Header at the top of the dashboard.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;Health Status&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;ui.logo&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;URL to the logo to display.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;&#34;&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;ui.link&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Link to open when the logo is clicked.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;&#34;&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;ui.buttons&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;List of buttons to display below the header.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;[]&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;ui.buttons[].name&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Text to display on the button.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Required &lt;code&gt;&#34;&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;ui.buttons[].link&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Link to open when the button is clicked.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Required &lt;code&gt;&#34;&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;maintenance&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TwiN/gatus/master/#maintenance&#34;&gt;Maintenance configuration&lt;/a&gt;.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;{}&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;If you want more verbose logging, you may set the &lt;code&gt;GATUS_LOG_LEVEL&lt;/code&gt; environment variable to &lt;code&gt;DEBUG&lt;/code&gt;. Conversely, if you want less verbose logging, you can set the aforementioned environment variable to &lt;code&gt;WARN&lt;/code&gt;, &lt;code&gt;ERROR&lt;/code&gt; or &lt;code&gt;FATAL&lt;/code&gt;. The default value for &lt;code&gt;GATUS_LOG_LEVEL&lt;/code&gt; is &lt;code&gt;INFO&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Endpoints&lt;/h3&gt; &#xA;&lt;p&gt;Endpoints are URLs, applications, or services that you want to monitor. Each endpoint has a list of conditions that are evaluated on an interval that you define. If any condition fails, the endpoint is considered as unhealthy. You can then configure alerts to be triggered when an endpoint is unhealthy once a certain threshold is reached.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Parameter&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Default&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;endpoints&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;List of endpoints to monitor.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Required &lt;code&gt;[]&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;endpoints[].enabled&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Whether to monitor the endpoint.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;endpoints[].name&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Name of the endpoint. Can be anything.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Required &lt;code&gt;&#34;&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;endpoints[].group&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Group name. Used to group multiple endpoints together on the dashboard. &lt;br&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/TwiN/gatus/master/#endpoint-groups&#34;&gt;Endpoint groups&lt;/a&gt;.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;&#34;&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;endpoints[].url&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;URL to send the request to.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Required &lt;code&gt;&#34;&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;endpoints[].method&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Request method.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;GET&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;endpoints[].conditions&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Conditions used to determine the health of the endpoint. &lt;br&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/TwiN/gatus/master/#conditions&#34;&gt;Conditions&lt;/a&gt;.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;[]&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;endpoints[].interval&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Duration to wait between every status check.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;60s&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;endpoints[].graphql&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Whether to wrap the body in a query param (&lt;code&gt;{&#34;query&#34;:&#34;$body&#34;}&lt;/code&gt;).&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;endpoints[].body&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Request body.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;&#34;&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;endpoints[].headers&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Request headers.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;{}&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;endpoints[].dns&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Configuration for an endpoint of type DNS. &lt;br&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/TwiN/gatus/master/#monitoring-an-endpoint-using-dns-queries&#34;&gt;Monitoring an endpoint using DNS queries&lt;/a&gt;.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;&#34;&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;endpoints[].dns.query-type&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Query type (e.g. MX).&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;&#34;&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;endpoints[].dns.query-name&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Query name (e.g. example.com).&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;&#34;&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;endpoints[].ssh&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Configuration for an endpoint of type SSH. &lt;br&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/TwiN/gatus/master/#monitoring-an-endpoint-using-ssh&#34;&gt;Monitoring an endpoint using SSH&lt;/a&gt;.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;&#34;&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;endpoints[].ssh.username&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;SSH username (e.g. example).&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Required &lt;code&gt;&#34;&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;endpoints[].ssh.password&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;SSH password (e.g. password).&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Required &lt;code&gt;&#34;&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;endpoints[].alerts&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;List of all alerts for a given endpoint. &lt;br&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/TwiN/gatus/master/#alerting&#34;&gt;Alerting&lt;/a&gt;.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;[]&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;endpoints[].client&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TwiN/gatus/master/#client-configuration&#34;&gt;Client configuration&lt;/a&gt;.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;{}&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;endpoints[].ui&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;UI configuration at the endpoint level.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;{}&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;endpoints[].ui.hide-conditions&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Whether to hide conditions from the results. Note that this only hides conditions from results evaluated from the moment this was enabled.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;endpoints[].ui.hide-hostname&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Whether to hide the hostname in the result.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;endpoints[].ui.hide-url&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Whether to ensure the URL is not displayed in the results. Useful if the URL contains a token.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;endpoints[].ui.dont-resolve-failed-conditions&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Whether to resolve failed conditions for the UI.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;endpoints[].ui.badge.reponse-time&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;List of response time thresholds. Each time a threshold is reached, the badge has a different color.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;[50, 200, 300, 500, 750]&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;External Endpoints&lt;/h3&gt; &#xA;&lt;p&gt;Unlike regular endpoints, external endpoints are not monitored by Gatus, but they are instead pushed programmatically. This allows you to monitor anything you want, even when what you want to check lives in an environment that would not normally be accessible by Gatus.&lt;/p&gt; &#xA;&lt;p&gt;For instance:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You can create your own agent that lives in a private network and pushes the status of your services to a publicly-exposed Gatus instance&lt;/li&gt; &#xA; &lt;li&gt;You can monitor services that are not supported by Gatus&lt;/li&gt; &#xA; &lt;li&gt;You can implement your own monitoring system while using Gatus as the dashboard&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Parameter&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Default&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;external-endpoints&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;List of endpoints to monitor.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;[]&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;external-endpoints[].enabled&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Whether to monitor the endpoint.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;external-endpoints[].name&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Name of the endpoint. Can be anything.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Required &lt;code&gt;&#34;&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;external-endpoints[].group&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Group name. Used to group multiple endpoints together on the dashboard. &lt;br&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/TwiN/gatus/master/#endpoint-groups&#34;&gt;Endpoint groups&lt;/a&gt;.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;&#34;&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;external-endpoints[].token&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Bearer token required to push status to.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Required &lt;code&gt;&#34;&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;external-endpoints[].alerts&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;List of all alerts for a given endpoint. &lt;br&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/TwiN/gatus/master/#alerting&#34;&gt;Alerting&lt;/a&gt;.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;[]&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;external-endpoints:&#xA;  - name: ext-ep-test&#xA;    group: core&#xA;    token: &#34;potato&#34;&#xA;    alerts:&#xA;      - type: discord&#xA;        description: &#34;healthcheck failed&#34;&#xA;        send-on-resolved: true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To push the status of an external endpoint, the request would have to look like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;POST /api/v1/endpoints/{key}/external?success={success}&amp;amp;error={error}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Where:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;{key}&lt;/code&gt; has the pattern &lt;code&gt;&amp;lt;GROUP_NAME&amp;gt;_&amp;lt;ENDPOINT_NAME&amp;gt;&lt;/code&gt; in which both variables have &lt;code&gt; &lt;/code&gt;, &lt;code&gt;/&lt;/code&gt;, &lt;code&gt;_&lt;/code&gt;, &lt;code&gt;,&lt;/code&gt; and &lt;code&gt;.&lt;/code&gt; replaced by &lt;code&gt;-&lt;/code&gt;. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Using the example configuration above, the key would be &lt;code&gt;core_ext-ep-test&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;{success}&lt;/code&gt; is a boolean (&lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;) value indicating whether the health check was successful or not.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;{error}&lt;/code&gt;: a string describing the reason for a failed health check. If {success} is false, this should contain the error message; if the check is successful, it can be omitted or left empty.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You must also pass the token as a &lt;code&gt;Bearer&lt;/code&gt; token in the &lt;code&gt;Authorization&lt;/code&gt; header.&lt;/p&gt; &#xA;&lt;h3&gt;Conditions&lt;/h3&gt; &#xA;&lt;p&gt;Here are some examples of conditions you can use:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Condition&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Passing values&lt;/th&gt; &#xA;   &lt;th&gt;Failing values&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;[STATUS] == 200&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Status must be equal to 200&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;200&lt;/td&gt; &#xA;   &lt;td&gt;201, 404, ...&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;[STATUS] &amp;lt; 300&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Status must lower than 300&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;200, 201, 299&lt;/td&gt; &#xA;   &lt;td&gt;301, 302, ...&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;[STATUS] &amp;lt;= 299&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Status must be less than or equal to 299&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;200, 201, 299&lt;/td&gt; &#xA;   &lt;td&gt;301, 302, ...&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;[STATUS] &amp;gt; 400&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Status must be greater than 400&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;401, 402, 403, 404&lt;/td&gt; &#xA;   &lt;td&gt;400, 200, ...&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;[STATUS] == any(200, 429)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Status must be either 200 or 429&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;200, 429&lt;/td&gt; &#xA;   &lt;td&gt;201, 400, ...&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;[CONNECTED] == true&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Connection to host must&#39;ve been successful&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;true&lt;/td&gt; &#xA;   &lt;td&gt;false&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;[RESPONSE_TIME] &amp;lt; 500&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Response time must be below 500ms&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;100ms, 200ms, 300ms&lt;/td&gt; &#xA;   &lt;td&gt;500ms, 501ms&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;[IP] == 127.0.0.1&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Target IP must be 127.0.0.1&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;127.0.0.1&lt;/td&gt; &#xA;   &lt;td&gt;0.0.0.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;[BODY] == 1&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;The body must be equal to 1&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;{}&lt;/code&gt;, &lt;code&gt;2&lt;/code&gt;, ...&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;[BODY].user.name == john&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;JSONPath value of &lt;code&gt;$.user.name&lt;/code&gt; is equal to &lt;code&gt;john&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;{&#34;user&#34;:{&#34;name&#34;:&#34;john&#34;}}&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;[BODY].data[0].id == 1&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;JSONPath value of &lt;code&gt;$.data[0].id&lt;/code&gt; is equal to 1&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;{&#34;data&#34;:[{&#34;id&#34;:1}]}&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;[BODY].age == [BODY].id&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;JSONPath value of &lt;code&gt;$.age&lt;/code&gt; is equal JSONPath &lt;code&gt;$.id&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;{&#34;age&#34;:1,&#34;id&#34;:1}&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;len([BODY].data) &amp;lt; 5&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Array at JSONPath &lt;code&gt;$.data&lt;/code&gt; has less than 5 elements&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;{&#34;data&#34;:[{&#34;id&#34;:1}]}&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;len([BODY].name) == 8&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;String at JSONPath &lt;code&gt;$.name&lt;/code&gt; has a length of 8&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;{&#34;name&#34;:&#34;john.doe&#34;}&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;{&#34;name&#34;:&#34;bob&#34;}&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;has([BODY].errors) == false&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;JSONPath &lt;code&gt;$.errors&lt;/code&gt; does not exist&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;{&#34;name&#34;:&#34;john.doe&#34;}&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;{&#34;errors&#34;:[]}&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;has([BODY].users) == true&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;JSONPath &lt;code&gt;$.users&lt;/code&gt; exists&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;{&#34;users&#34;:[]}&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;{}&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;[BODY].name == pat(john*)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;String at JSONPath &lt;code&gt;$.name&lt;/code&gt; matches pattern &lt;code&gt;john*&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;{&#34;name&#34;:&#34;john.doe&#34;}&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;{&#34;name&#34;:&#34;bob&#34;}&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;[BODY].id == any(1, 2)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Value at JSONPath &lt;code&gt;$.id&lt;/code&gt; is equal to &lt;code&gt;1&lt;/code&gt; or &lt;code&gt;2&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;1, 2&lt;/td&gt; &#xA;   &lt;td&gt;3, 4, 5&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;[CERTIFICATE_EXPIRATION] &amp;gt; 48h&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Certificate expiration is more than 48h away&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;49h, 50h, 123h&lt;/td&gt; &#xA;   &lt;td&gt;1h, 24h, ...&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;[DOMAIN_EXPIRATION] &amp;gt; 720h&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;The domain must expire in more than 720h&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;4000h&lt;/td&gt; &#xA;   &lt;td&gt;1h, 24h, ...&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;Placeholders&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Placeholder&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Example of resolved value&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;[STATUS]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Resolves into the HTTP status of the request&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;404&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;[RESPONSE_TIME]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Resolves into the response time the request took, in ms&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;10&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;[IP]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Resolves into the IP of the target host&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;192.168.0.232&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;[BODY]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Resolves into the response body. Supports JSONPath.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;{&#34;name&#34;:&#34;john.doe&#34;}&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;[CONNECTED]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Resolves into whether a connection could be established&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;[CERTIFICATE_EXPIRATION]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Resolves into the duration before certificate expiration (valid units are &#34;s&#34;, &#34;m&#34;, &#34;h&#34;.)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;24h&lt;/code&gt;, &lt;code&gt;48h&lt;/code&gt;, 0 (if not protocol with certs)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;[DOMAIN_EXPIRATION]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Resolves into the duration before the domain expires (valid units are &#34;s&#34;, &#34;m&#34;, &#34;h&#34;.)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;24h&lt;/code&gt;, &lt;code&gt;48h&lt;/code&gt;, &lt;code&gt;1234h56m78s&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;[DNS_RCODE]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Resolves into the DNS status of the response&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;NOERROR&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;Functions&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Function&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Example&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;len&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;If the given path leads to an array, returns its length. Otherwise, the JSON at the given path is minified and converted to a string, and the resulting number of characters is returned. Works only with the &lt;code&gt;[BODY]&lt;/code&gt; placeholder.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;len([BODY].username) &amp;gt; 8&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;has&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Returns &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt; based on whether a given path is valid. Works only with the &lt;code&gt;[BODY]&lt;/code&gt; placeholder.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;has([BODY].errors) == false&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;pat&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Specifies that the string passed as parameter should be evaluated as a pattern. Works only with &lt;code&gt;==&lt;/code&gt; and &lt;code&gt;!=&lt;/code&gt;.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;[IP] == pat(192.168.*)&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;any&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Specifies that any one of the values passed as parameters is a valid value. Works only with &lt;code&gt;==&lt;/code&gt; and &lt;code&gt;!=&lt;/code&gt;.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;[BODY].ip == any(127.0.0.1, ::1)&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;💡 Use &lt;code&gt;pat&lt;/code&gt; only when you need to. &lt;code&gt;[STATUS] == pat(2*)&lt;/code&gt; is a lot more expensive than &lt;code&gt;[STATUS] &amp;lt; 300&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Storage&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Parameter&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Default&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;storage&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Storage configuration&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;{}&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;storage.path&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Path to persist the data in. Only supported for types &lt;code&gt;sqlite&lt;/code&gt; and &lt;code&gt;postgres&lt;/code&gt;.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;&#34;&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;storage.type&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Type of storage. Valid types: &lt;code&gt;memory&lt;/code&gt;, &lt;code&gt;sqlite&lt;/code&gt;, &lt;code&gt;postgres&lt;/code&gt;.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;&#34;memory&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;storage.caching&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Whether to use write-through caching. Improves loading time for large dashboards. &lt;br&gt;Only supported if &lt;code&gt;storage.type&lt;/code&gt; is &lt;code&gt;sqlite&lt;/code&gt; or &lt;code&gt;postgres&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;The results for each endpoint health check as well as the data for uptime and the past events must be persisted so that they can be displayed on the dashboard. These parameters allow you to configure the storage in question.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If &lt;code&gt;storage.type&lt;/code&gt; is &lt;code&gt;memory&lt;/code&gt; (default):&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;# Note that this is the default value, and you can omit the storage configuration altogether to achieve the same result.&#xA;# Because the data is stored in memory, the data will not survive a restart.&#xA;storage:&#xA;  type: memory&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If &lt;code&gt;storage.type&lt;/code&gt; is &lt;code&gt;sqlite&lt;/code&gt;, &lt;code&gt;storage.path&lt;/code&gt; must not be blank:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;storage:&#xA;  type: sqlite&#xA;  path: data.db&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/TwiN/gatus/master/.examples/docker-compose-sqlite-storage&#34;&gt;examples/docker-compose-sqlite-storage&lt;/a&gt; for an example.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If &lt;code&gt;storage.type&lt;/code&gt; is &lt;code&gt;postgres&lt;/code&gt;, &lt;code&gt;storage.path&lt;/code&gt; must be the connection URL:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;storage:&#xA;  type: postgres&#xA;  path: &#34;postgres://user:password@127.0.0.1:5432/gatus?sslmode=disable&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/TwiN/gatus/master/.examples/docker-compose-postgres-storage&#34;&gt;examples/docker-compose-postgres-storage&lt;/a&gt; for an example.&lt;/p&gt; &#xA;&lt;h3&gt;Client configuration&lt;/h3&gt; &#xA;&lt;p&gt;In order to support a wide range of environments, each monitored endpoint has a unique configuration for the client used to send the request.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Parameter&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Default&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;client.insecure&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Whether to skip verifying the server&#39;s certificate chain and host name.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;client.ignore-redirect&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Whether to ignore redirects (true) or follow them (false, default).&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;client.timeout&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Duration before timing out.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;10s&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;client.dns-resolver&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Override the DNS resolver using the format &lt;code&gt;{proto}://{host}:{port}&lt;/code&gt;.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;&#34;&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;client.oauth2&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;OAuth2 client configuration.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;{}&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;client.oauth2.token-url&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;The token endpoint URL&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;required &lt;code&gt;&#34;&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;client.oauth2.client-id&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;The client id which should be used for the &lt;code&gt;Client credentials flow&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;required &lt;code&gt;&#34;&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;client.oauth2.client-secret&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;The client secret which should be used for the &lt;code&gt;Client credentials flow&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;required &lt;code&gt;&#34;&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;client.oauth2.scopes[]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;A list of &lt;code&gt;scopes&lt;/code&gt; which should be used for the &lt;code&gt;Client credentials flow&lt;/code&gt;.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;required &lt;code&gt;[&#34;&#34;]&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;client.proxy-url&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;The URL of the proxy to use for the client&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;&#34;&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;client.identity-aware-proxy&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Google Identity-Aware-Proxy client configuration.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;{}&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;client.identity-aware-proxy.audience&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;The Identity-Aware-Proxy audience. (client-id of the IAP oauth2 credential)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;required &lt;code&gt;&#34;&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;client.tls.certificate-file&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Path to a client certificate (in PEM format) for mTLS configurations.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;&#34;&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;client.tls.private-key-file&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Path to a client private key (in PEM format) for mTLS configurations.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;&#34;&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;client.tls.renegotiation&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Type of renegotiation support to provide. (&lt;code&gt;never&lt;/code&gt;, &lt;code&gt;freely&lt;/code&gt;, &lt;code&gt;once&lt;/code&gt;).&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;&#34;never&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;client.network&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;The network to use for ICMP endpoint client (&lt;code&gt;ip&lt;/code&gt;, &lt;code&gt;ip4&lt;/code&gt; or &lt;code&gt;ip6&lt;/code&gt;).&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;&#34;ip&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;📝 Some of these parameters are ignored based on the type of endpoint. For instance, there&#39;s no certificate involved in ICMP requests (ping), therefore, setting &lt;code&gt;client.insecure&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; for an endpoint of that type will not do anything.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;This default configuration is as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;client:&#xA;  insecure: false&#xA;  ignore-redirect: false&#xA;  timeout: 10s&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that this configuration is only available under &lt;code&gt;endpoints[]&lt;/code&gt;, &lt;code&gt;alerting.mattermost&lt;/code&gt; and &lt;code&gt;alerting.custom&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s an example with the client configuration under &lt;code&gt;endpoints[]&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;endpoints:&#xA;  - name: website&#xA;    url: &#34;https://twin.sh/health&#34;&#xA;    client:&#xA;      insecure: false&#xA;      ignore-redirect: false&#xA;      timeout: 10s&#xA;    conditions:&#xA;      - &#34;[STATUS] == 200&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This example shows how you can specify a custom DNS resolver:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;endpoints:&#xA;  - name: with-custom-dns-resolver&#xA;    url: &#34;https://your.health.api/health&#34;&#xA;    client:&#xA;      dns-resolver: &#34;tcp://8.8.8.8:53&#34;&#xA;    conditions:&#xA;      - &#34;[STATUS] == 200&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This example shows how you can use the &lt;code&gt;client.oauth2&lt;/code&gt; configuration to query a backend API with &lt;code&gt;Bearer token&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;endpoints:&#xA;  - name: with-custom-oauth2&#xA;    url: &#34;https://your.health.api/health&#34;&#xA;    client:&#xA;      oauth2:&#xA;        token-url: https://your-token-server/token&#xA;        client-id: 00000000-0000-0000-0000-000000000000&#xA;        client-secret: your-client-secret&#xA;        scopes: [&#39;https://your.health.api/.default&#39;]&#xA;    conditions:&#xA;      - &#34;[STATUS] == 200&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This example shows how you can use the &lt;code&gt;client.identity-aware-proxy&lt;/code&gt; configuration to query a backend API with &lt;code&gt;Bearer token&lt;/code&gt; using Google Identity-Aware-Proxy:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;endpoints:&#xA;  - name: with-custom-iap&#xA;    url: &#34;https://my.iap.protected.app/health&#34;&#xA;    client:&#xA;      identity-aware-proxy:&#xA;        audience: &#34;XXXXXXXX-XXXXXXXXXXXX.apps.googleusercontent.com&#34;&#xA;    conditions:&#xA;      - &#34;[STATUS] == 200&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;📝 Note that Gatus will use the &lt;a href=&#34;https://cloud.google.com/docs/authentication/application-default-credentials&#34;&gt;gcloud default credentials&lt;/a&gt; within its environment to generate the token.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;This example shows you how you can use the &lt;code&gt;client.tls&lt;/code&gt; configuration to perform an mTLS query to a backend API:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;endpoints:&#xA;  - name: website&#xA;    url: &#34;https://your.mtls.protected.app/health&#34;&#xA;    client:&#xA;      tls:&#xA;        certificate-file: /path/to/user_cert.pem&#xA;        private-key-file: /path/to/user_key.pem&#xA;        renegotiation: once&#xA;    conditions:&#xA;      - &#34;[STATUS] == 200&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;📝 Note that if running in a container, you must volume mount the certificate and key into the container.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Alerting&lt;/h3&gt; &#xA;&lt;p&gt;Gatus supports multiple alerting providers, such as Slack and PagerDuty, and supports different alerts for each individual endpoints with configurable descriptions and thresholds.&lt;/p&gt; &#xA;&lt;p&gt;Alerts are configured at the endpoint level like so:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Parameter&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Default&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerts&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;List of all alerts for a given endpoint.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;[]&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerts[].type&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Type of alert. &lt;br&gt;See table below for all valid types.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Required &lt;code&gt;&#34;&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerts[].enabled&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Whether to enable the alert.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerts[].failure-threshold&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Number of failures in a row needed before triggering the alert.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;3&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerts[].success-threshold&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Number of successes in a row before an ongoing incident is marked as resolved.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;2&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerts[].send-on-resolved&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Whether to send a notification once a triggered alert is marked as resolved.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerts[].description&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Description of the alert. Will be included in the alert sent.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;&#34;&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Here&#39;s an example of what an alert configuration might look like at the endpoint level:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;endpoints:&#xA;  - name: example&#xA;    url: &#34;https://example.org&#34;&#xA;    conditions:&#xA;      - &#34;[STATUS] == 200&#34;&#xA;    alerts:&#xA;      - type: slack&#xA;        description: &#34;healthcheck failed&#34;&#xA;        send-on-resolved: true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;📝 If an alerting provider is not properly configured, all alerts configured with the provider&#39;s type will be ignored.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Parameter&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Default&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.custom&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Configuration for custom actions on failure or alerts. &lt;br&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/TwiN/gatus/master/#configuring-custom-alerts&#34;&gt;Configuring Custom alerts&lt;/a&gt;.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;{}&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.discord&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Configuration for alerts of type &lt;code&gt;discord&lt;/code&gt;. &lt;br&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/TwiN/gatus/master/#configuring-discord-alerts&#34;&gt;Configuring Discord alerts&lt;/a&gt;.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;{}&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.email&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Configuration for alerts of type &lt;code&gt;email&lt;/code&gt;. &lt;br&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/TwiN/gatus/master/#configuring-email-alerts&#34;&gt;Configuring Email alerts&lt;/a&gt;.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;{}&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.github&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Configuration for alerts of type &lt;code&gt;github&lt;/code&gt;. &lt;br&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/TwiN/gatus/master/#configuring-github-alerts&#34;&gt;Configuring GitHub alerts&lt;/a&gt;.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;{}&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.gitlab&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Configuration for alerts of type &lt;code&gt;gitlab&lt;/code&gt;. &lt;br&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/TwiN/gatus/master/#configuring-gitlab-alerts&#34;&gt;Configuring GitLab alerts&lt;/a&gt;.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;{}&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.googlechat&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Configuration for alerts of type &lt;code&gt;googlechat&lt;/code&gt;. &lt;br&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/TwiN/gatus/master/#configuring-google-chat-alerts&#34;&gt;Configuring Google Chat alerts&lt;/a&gt;.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;{}&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.gotify&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Configuration for alerts of type &lt;code&gt;gotify&lt;/code&gt;. &lt;br&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/TwiN/gatus/master/#configuring-gotify-alerts&#34;&gt;Configuring Gotify alerts&lt;/a&gt;.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;{}&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.jetbrainsspace&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Configuration for alerts of type &lt;code&gt;jetbrainsspace&lt;/code&gt;. &lt;br&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/TwiN/gatus/master/#configuring-jetbrains-space-alerts&#34;&gt;Configuring JetBrains Space alerts&lt;/a&gt;.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;{}&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.matrix&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Configuration for alerts of type &lt;code&gt;matrix&lt;/code&gt;. &lt;br&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/TwiN/gatus/master/#configuring-matrix-alerts&#34;&gt;Configuring Matrix alerts&lt;/a&gt;.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;{}&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.mattermost&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Configuration for alerts of type &lt;code&gt;mattermost&lt;/code&gt;. &lt;br&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/TwiN/gatus/master/#configuring-mattermost-alerts&#34;&gt;Configuring Mattermost alerts&lt;/a&gt;.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;{}&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.messagebird&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Configuration for alerts of type &lt;code&gt;messagebird&lt;/code&gt;. &lt;br&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/TwiN/gatus/master/#configuring-messagebird-alerts&#34;&gt;Configuring Messagebird alerts&lt;/a&gt;.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;{}&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.ntfy&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Configuration for alerts of type &lt;code&gt;ntfy&lt;/code&gt;. &lt;br&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/TwiN/gatus/master/#configuring-ntfy-alerts&#34;&gt;Configuring Ntfy alerts&lt;/a&gt;.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;{}&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.opsgenie&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Configuration for alerts of type &lt;code&gt;opsgenie&lt;/code&gt;. &lt;br&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/TwiN/gatus/master/#configuring-opsgenie-alerts&#34;&gt;Configuring Opsgenie alerts&lt;/a&gt;.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;{}&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.pagerduty&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Configuration for alerts of type &lt;code&gt;pagerduty&lt;/code&gt;. &lt;br&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/TwiN/gatus/master/#configuring-pagerduty-alerts&#34;&gt;Configuring PagerDuty alerts&lt;/a&gt;.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;{}&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.pushover&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Configuration for alerts of type &lt;code&gt;pushover&lt;/code&gt;. &lt;br&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/TwiN/gatus/master/#configuring-pushover-alerts&#34;&gt;Configuring Pushover alerts&lt;/a&gt;.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;{}&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.slack&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Configuration for alerts of type &lt;code&gt;slack&lt;/code&gt;. &lt;br&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/TwiN/gatus/master/#configuring-slack-alerts&#34;&gt;Configuring Slack alerts&lt;/a&gt;.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;{}&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.teams&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Configuration for alerts of type &lt;code&gt;teams&lt;/code&gt;. &lt;em&gt;(Deprecated)&lt;/em&gt; &lt;br&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/TwiN/gatus/master/#configuring-teams-alerts-deprecated&#34;&gt;Configuring Teams alerts&lt;/a&gt;.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;{}&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.teams-workflows&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Configuration for alerts of type &lt;code&gt;teams-workflows&lt;/code&gt;. &lt;br&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/TwiN/gatus/master/#configuring-teams-workflow-alerts&#34;&gt;Configuring Teams Workflow alerts&lt;/a&gt;.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;{}&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.telegram&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Configuration for alerts of type &lt;code&gt;telegram&lt;/code&gt;. &lt;br&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/TwiN/gatus/master/#configuring-telegram-alerts&#34;&gt;Configuring Telegram alerts&lt;/a&gt;.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;{}&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.twilio&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Settings for alerts of type &lt;code&gt;twilio&lt;/code&gt;. &lt;br&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/TwiN/gatus/master/#configuring-twilio-alerts&#34;&gt;Configuring Twilio alerts&lt;/a&gt;.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;{}&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;Configuring Discord alerts&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Parameter&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Default&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.discord&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Configuration for alerts of type &lt;code&gt;discord&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;{}&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.discord.webhook-url&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Discord Webhook URL&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Required &lt;code&gt;&#34;&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.discord.title&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Title of the notification&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;&#34;:helmet_with_white_cross: Gatus&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.discord.default-alert&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Default alert configuration. &lt;br&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/TwiN/gatus/master/#setting-a-default-alert&#34;&gt;Setting a default alert&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;N/A&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.discord.overrides&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;List of overrides that may be prioritized over the default configuration&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;[]&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.discord.overrides[].group&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Endpoint group for which the configuration will be overridden by this configuration&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;&#34;&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.discord.overrides[].webhook-url&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Discord Webhook URL&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;&#34;&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;alerting:&#xA;  discord:&#xA;    webhook-url: &#34;https://discord.com/api/webhooks/**********/**********&#34;&#xA;&#xA;endpoints:&#xA;  - name: website&#xA;    url: &#34;https://twin.sh/health&#34;&#xA;    interval: 5m&#xA;    conditions:&#xA;      - &#34;[STATUS] == 200&#34;&#xA;      - &#34;[BODY].status == UP&#34;&#xA;      - &#34;[RESPONSE_TIME] &amp;lt; 300&#34;&#xA;    alerts:&#xA;      - type: discord&#xA;        description: &#34;healthcheck failed&#34;&#xA;        send-on-resolved: true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Configuring Email alerts&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Parameter&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Default&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.email&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Configuration for alerts of type &lt;code&gt;email&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;{}&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.email.from&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Email used to send the alert&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Required &lt;code&gt;&#34;&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.email.username&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Username of the SMTP server used to send the alert. If empty, uses &lt;code&gt;alerting.email.from&lt;/code&gt;.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;&#34;&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.email.password&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Password of the SMTP server used to send the alert. If empty, no authentication is performed.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;&#34;&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.email.host&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Host of the mail server (e.g. &lt;code&gt;smtp.gmail.com&lt;/code&gt;)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Required &lt;code&gt;&#34;&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.email.port&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Port the mail server is listening to (e.g. &lt;code&gt;587&lt;/code&gt;)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Required &lt;code&gt;0&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.email.to&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Email(s) to send the alerts to&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Required &lt;code&gt;&#34;&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.email.default-alert&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Default alert configuration. &lt;br&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/TwiN/gatus/master/#setting-a-default-alert&#34;&gt;Setting a default alert&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;N/A&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.email.client.insecure&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Whether to skip TLS verification&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.email.overrides&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;List of overrides that may be prioritized over the default configuration&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;[]&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.email.overrides[].group&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Endpoint group for which the configuration will be overridden by this configuration&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;&#34;&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.email.overrides[].to&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Email(s) to send the alerts to&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;&#34;&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;alerting:&#xA;  email:&#xA;    from: &#34;from@example.com&#34;&#xA;    username: &#34;from@example.com&#34;&#xA;    password: &#34;hunter2&#34;&#xA;    host: &#34;mail.example.com&#34;&#xA;    port: 587&#xA;    to: &#34;recipient1@example.com,recipient2@example.com&#34;&#xA;    client:&#xA;      insecure: false&#xA;    # You can also add group-specific to keys, which will&#xA;    # override the to key above for the specified groups&#xA;    overrides:&#xA;      - group: &#34;core&#34;&#xA;        to: &#34;recipient3@example.com,recipient4@example.com&#34;&#xA;&#xA;endpoints:&#xA;  - name: website&#xA;    url: &#34;https://twin.sh/health&#34;&#xA;    interval: 5m&#xA;    conditions:&#xA;      - &#34;[STATUS] == 200&#34;&#xA;      - &#34;[BODY].status == UP&#34;&#xA;      - &#34;[RESPONSE_TIME] &amp;lt; 300&#34;&#xA;    alerts:&#xA;      - type: email&#xA;        description: &#34;healthcheck failed&#34;&#xA;        send-on-resolved: true&#xA;&#xA;  - name: back-end&#xA;    group: core&#xA;    url: &#34;https://example.org/&#34;&#xA;    interval: 5m&#xA;    conditions:&#xA;      - &#34;[STATUS] == 200&#34;&#xA;      - &#34;[CERTIFICATE_EXPIRATION] &amp;gt; 48h&#34;&#xA;    alerts:&#xA;      - type: email&#xA;        description: &#34;healthcheck failed&#34;&#xA;        send-on-resolved: true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;⚠ Some mail servers are painfully slow.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;Configuring Gitea alerts&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Parameter&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Default&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.gitea&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Configuration for alerts of type &lt;code&gt;gitea&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;{}&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.gitea.repository-url&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Gitea repository URL (e.g. &lt;code&gt;https://gitea.com/TwiN/example&lt;/code&gt;)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Required &lt;code&gt;&#34;&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.gitea.token&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Personal access token to use for authentication. &lt;br&gt;Must have at least RW on issues and RO on metadata.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Required &lt;code&gt;&#34;&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.github.default-alert&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Default alert configuration. &lt;br&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/TwiN/gatus/master/#setting-a-default-alert&#34;&gt;Setting a default alert&lt;/a&gt;.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;N/A&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;The Gitea alerting provider creates an issue prefixed with &lt;code&gt;alert(gatus):&lt;/code&gt; and suffixed with the endpoint&#39;s display name for each alert. If &lt;code&gt;send-on-resolved&lt;/code&gt; is set to &lt;code&gt;true&lt;/code&gt; on the endpoint alert, the issue will be automatically closed when the alert is resolved.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;alerting:&#xA;  gitea:&#xA;    repository-url: &#34;https://gitea.com/TwiN/test&#34;&#xA;    token: &#34;349d63f16......&#34;&#xA;&#xA;endpoints:&#xA;  - name: example&#xA;    url: &#34;https://twin.sh/health&#34;&#xA;    interval: 5m&#xA;    conditions:&#xA;      - &#34;[STATUS] == 200&#34;&#xA;      - &#34;[BODY].status == UP&#34;&#xA;      - &#34;[RESPONSE_TIME] &amp;lt; 75&#34;&#xA;    alerts:&#xA;      - type: gitea&#xA;        failure-threshold: 2&#xA;        success-threshold: 3&#xA;        send-on-resolved: true&#xA;        description: &#34;Everything&#39;s burning AAAAAHHHHHHHHHHHHHHH&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/TwiN/gatus/master/.github/assets/gitea-alerts.png&#34; alt=&#34;Gitea alert&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Configuring GitHub alerts&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Parameter&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Default&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.github&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Configuration for alerts of type &lt;code&gt;github&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;{}&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.github.repository-url&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;GitHub repository URL (e.g. &lt;code&gt;https://github.com/TwiN/example&lt;/code&gt;)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Required &lt;code&gt;&#34;&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.github.token&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Personal access token to use for authentication. &lt;br&gt;Must have at least RW on issues and RO on metadata.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Required &lt;code&gt;&#34;&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.github.default-alert&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Default alert configuration. &lt;br&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/TwiN/gatus/master/#setting-a-default-alert&#34;&gt;Setting a default alert&lt;/a&gt;.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;N/A&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;The GitHub alerting provider creates an issue prefixed with &lt;code&gt;alert(gatus):&lt;/code&gt; and suffixed with the endpoint&#39;s display name for each alert. If &lt;code&gt;send-on-resolved&lt;/code&gt; is set to &lt;code&gt;true&lt;/code&gt; on the endpoint alert, the issue will be automatically closed when the alert is resolved.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;alerting:&#xA;  github:&#xA;    repository-url: &#34;https://github.com/TwiN/test&#34;&#xA;    token: &#34;github_pat_12345...&#34;&#xA;&#xA;endpoints:&#xA;  - name: example&#xA;    url: &#34;https://twin.sh/health&#34;&#xA;    interval: 5m&#xA;    conditions:&#xA;      - &#34;[STATUS] == 200&#34;&#xA;      - &#34;[BODY].status == UP&#34;&#xA;      - &#34;[RESPONSE_TIME] &amp;lt; 75&#34;&#xA;    alerts:&#xA;      - type: github&#xA;        failure-threshold: 2&#xA;        success-threshold: 3&#xA;        send-on-resolved: true&#xA;        description: &#34;Everything&#39;s burning AAAAAHHHHHHHHHHHHHHH&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/TwiN/gatus/master/.github/assets/github-alerts.png&#34; alt=&#34;GitHub alert&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Configuring GitLab alerts&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Parameter&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Default&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.gitlab&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Configuration for alerts of type &lt;code&gt;gitlab&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;{}&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.gitlab.webhook-url&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;GitLab alert webhook URL (e.g. &lt;code&gt;https://gitlab.com/yourusername/example/alerts/notify/gatus/xxxxxxxxxxxxxxxx.json&lt;/code&gt;)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Required &lt;code&gt;&#34;&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.gitlab.authorization-key&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;GitLab alert authorization key.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Required &lt;code&gt;&#34;&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.gitlab.severity&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Override default severity (critical), can be one of &lt;code&gt;critical, high, medium, low, info, unknown&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;&#34;&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.gitlab.monitoring-tool&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Override the monitoring tool name (gatus)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;&#34;gatus&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.gitlab.environment-name&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Set gitlab environment&#39;s name. Required to display alerts on a dashboard.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;&#34;&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.gitlab.service&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Override endpoint display name&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;&#34;&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.gitlab.default-alert&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Default alert configuration. &lt;br&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/TwiN/gatus/master/#setting-a-default-alert&#34;&gt;Setting a default alert&lt;/a&gt;.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;N/A&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;The GitLab alerting provider creates an alert prefixed with &lt;code&gt;alert(gatus):&lt;/code&gt; and suffixed with the endpoint&#39;s display name for each alert. If &lt;code&gt;send-on-resolved&lt;/code&gt; is set to &lt;code&gt;true&lt;/code&gt; on the endpoint alert, the alert will be automatically closed when the alert is resolved. See &lt;a href=&#34;https://docs.gitlab.com/ee/operations/incident_management/integrations.html#configuration&#34;&gt;https://docs.gitlab.com/ee/operations/incident_management/integrations.html#configuration&lt;/a&gt; to configure the endpoint.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;alerting:&#xA;  gitlab:&#xA;    webhook-url: &#34;https://gitlab.com/hlidotbe/example/alerts/notify/gatus/xxxxxxxxxxxxxxxx.json&#34;&#xA;    authorization-key: &#34;12345&#34;&#xA;&#xA;endpoints:&#xA;  - name: example&#xA;    url: &#34;https://twin.sh/health&#34;&#xA;    interval: 5m&#xA;    conditions:&#xA;      - &#34;[STATUS] == 200&#34;&#xA;      - &#34;[BODY].status == UP&#34;&#xA;      - &#34;[RESPONSE_TIME] &amp;lt; 75&#34;&#xA;    alerts:&#xA;      - type: gitlab&#xA;        failure-threshold: 2&#xA;        success-threshold: 3&#xA;        send-on-resolved: true&#xA;        description: &#34;Everything&#39;s burning AAAAAHHHHHHHHHHHHHHH&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/TwiN/gatus/master/.github/assets/gitlab-alerts.png&#34; alt=&#34;GitLab alert&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Configuring Google Chat alerts&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Parameter&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Default&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.googlechat&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Configuration for alerts of type &lt;code&gt;googlechat&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;{}&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.googlechat.webhook-url&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Google Chat Webhook URL&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Required &lt;code&gt;&#34;&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.googlechat.client&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Client configuration. &lt;br&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/TwiN/gatus/master/#client-configuration&#34;&gt;Client configuration&lt;/a&gt;.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;{}&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.googlechat.default-alert&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Default alert configuration. &lt;br&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/TwiN/gatus/master/#setting-a-default-alert&#34;&gt;Setting a default alert&lt;/a&gt;.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;N/A&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.googlechat.overrides&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;List of overrides that may be prioritized over the default configuration&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;[]&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.googlechat.overrides[].group&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Endpoint group for which the configuration will be overridden by this configuration&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;&#34;&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.googlechat.overrides[].webhook-url&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Google Chat Webhook URL&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;&#34;&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;alerting:&#xA;  googlechat:&#xA;    webhook-url: &#34;https://chat.googleapis.com/v1/spaces/*******/messages?key=**********&amp;amp;token=********&#34;&#xA;&#xA;endpoints:&#xA;  - name: website&#xA;    url: &#34;https://twin.sh/health&#34;&#xA;    interval: 5m&#xA;    conditions:&#xA;      - &#34;[STATUS] == 200&#34;&#xA;      - &#34;[BODY].status == UP&#34;&#xA;      - &#34;[RESPONSE_TIME] &amp;lt; 300&#34;&#xA;    alerts:&#xA;      - type: googlechat&#xA;        description: &#34;healthcheck failed&#34;&#xA;        send-on-resolved: true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Configuring Gotify alerts&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Parameter&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Default&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.gotify&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Configuration for alerts of type &lt;code&gt;gotify&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;{}&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.gotify.server-url&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Gotify server URL&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Required &lt;code&gt;&#34;&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.gotify.token&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Token that is used for authentication.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Required &lt;code&gt;&#34;&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.gotify.priority&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Priority of the alert according to Gotify standards.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;5&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.gotify.title&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Title of the notification&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;&#34;Gatus: &amp;lt;endpoint&amp;gt;&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.gotify.default-alert&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Default alert configuration. &lt;br&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/TwiN/gatus/master/#setting-a-default-alert&#34;&gt;Setting a default alert&lt;/a&gt;.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;N/A&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;alerting:&#xA;  gotify:&#xA;    server-url: &#34;https://gotify.example&#34;&#xA;    token: &#34;**************&#34;&#xA;&#xA;endpoints:&#xA;  - name: website&#xA;    url: &#34;https://twin.sh/health&#34;&#xA;    interval: 5m&#xA;    conditions:&#xA;      - &#34;[STATUS] == 200&#34;&#xA;      - &#34;[BODY].status == UP&#34;&#xA;      - &#34;[RESPONSE_TIME] &amp;lt; 300&#34;&#xA;    alerts:&#xA;      - type: gotify&#xA;        description: &#34;healthcheck failed&#34;&#xA;        send-on-resolved: true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here&#39;s an example of what the notifications look like:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/TwiN/gatus/master/.github/assets/gotify-alerts.png&#34; alt=&#34;Gotify notifications&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Configuring JetBrains Space alerts&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Parameter&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Default&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.jetbrainsspace&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Configuration for alerts of type &lt;code&gt;jetbrainsspace&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;{}&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.jetbrainsspace.project&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;JetBrains Space project name&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Required &lt;code&gt;&#34;&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.jetbrainsspace.channel-id&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;JetBrains Space Chat Channel ID&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Required &lt;code&gt;&#34;&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.jetbrainsspace.token&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Token that is used for authentication.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Required &lt;code&gt;&#34;&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.jetbrainsspace.default-alert&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Default alert configuration. &lt;br&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/TwiN/gatus/master/#setting-a-default-alert&#34;&gt;Setting a default alert&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;N/A&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.jetbrainsspace.overrides&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;List of overrides that may be prioritized over the default configuration&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;[]&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.jetbrainsspace.overrides[].group&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Endpoint group for which the configuration will be overridden by this configuration&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;&#34;&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;alerting:&#xA;  jetbrainsspace:&#xA;    project: myproject&#xA;    channel-id: ABCDE12345&#xA;    token: &#34;**************&#34;&#xA;&#xA;endpoints:&#xA;  - name: website&#xA;    url: &#34;https://twin.sh/health&#34;&#xA;    interval: 5m&#xA;    conditions:&#xA;      - &#34;[STATUS] == 200&#34;&#xA;    alerts:&#xA;      - type: jetbrainsspace&#xA;        description: &#34;healthcheck failed&#34;&#xA;        send-on-resolved: true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here&#39;s an example of what the notifications look like:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/TwiN/gatus/master/.github/assets/jetbrains-space-alerts.png&#34; alt=&#34;JetBrains Space notifications&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Configuring Matrix alerts&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Parameter&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Default&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.matrix&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Configuration for alerts of type &lt;code&gt;matrix&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;{}&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.matrix.server-url&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Homeserver URL&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;https://matrix-client.matrix.org&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.matrix.access-token&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Bot user access token (see &lt;a href=&#34;https://webapps.stackexchange.com/q/131056&#34;&gt;https://webapps.stackexchange.com/q/131056&lt;/a&gt;)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Required &lt;code&gt;&#34;&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.matrix.internal-room-id&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Internal room ID of room to send alerts to (can be found in Room Settings &amp;gt; Advanced)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Required &lt;code&gt;&#34;&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.matrix.default-alert&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Default alert configuration. &lt;br&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/TwiN/gatus/master/#setting-a-default-alert&#34;&gt;Setting a default alert&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;N/A&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;alerting:&#xA;  matrix:&#xA;    server-url: &#34;https://matrix-client.matrix.org&#34;&#xA;    access-token: &#34;123456&#34;&#xA;    internal-room-id: &#34;!example:matrix.org&#34;&#xA;&#xA;endpoints:&#xA;  - name: website&#xA;    interval: 5m&#xA;    url: &#34;https://twin.sh/health&#34;&#xA;    conditions:&#xA;      - &#34;[STATUS] == 200&#34;&#xA;      - &#34;[BODY].status == UP&#34;&#xA;      - &#34;[RESPONSE_TIME] &amp;lt; 300&#34;&#xA;    alerts:&#xA;      - type: matrix&#xA;        send-on-resolved: true&#xA;        description: &#34;healthcheck failed&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Configuring Mattermost alerts&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Parameter&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Default&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.mattermost&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Configuration for alerts of type &lt;code&gt;mattermost&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;{}&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.mattermost.webhook-url&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Mattermost Webhook URL&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Required &lt;code&gt;&#34;&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.mattermost.channel&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Mattermost channel name override (optional)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;&#34;&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.mattermost.client&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Client configuration. &lt;br&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/TwiN/gatus/master/#client-configuration&#34;&gt;Client configuration&lt;/a&gt;.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;{}&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.mattermost.default-alert&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Default alert configuration. &lt;br&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/TwiN/gatus/master/#setting-a-default-alert&#34;&gt;Setting a default alert&lt;/a&gt;.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;N/A&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.mattermost.overrides&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;List of overrides that may be prioritized over the default configuration&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;[]&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.mattermost.overrides[].group&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Endpoint group for which the configuration will be overridden by this configuration&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;&#34;&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.mattermist.overrides[].webhook-url&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Mattermost Webhook URL&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;&#34;&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;alerting:&#xA;  mattermost:&#xA;    webhook-url: &#34;http://**********/hooks/**********&#34;&#xA;    client:&#xA;      insecure: true&#xA;&#xA;endpoints:&#xA;  - name: website&#xA;    url: &#34;https://twin.sh/health&#34;&#xA;    interval: 5m&#xA;    conditions:&#xA;      - &#34;[STATUS] == 200&#34;&#xA;      - &#34;[BODY].status == UP&#34;&#xA;      - &#34;[RESPONSE_TIME] &amp;lt; 300&#34;&#xA;    alerts:&#xA;      - type: mattermost&#xA;        description: &#34;healthcheck failed&#34;&#xA;        send-on-resolved: true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here&#39;s an example of what the notifications look like:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/TwiN/gatus/master/.github/assets/mattermost-alerts.png&#34; alt=&#34;Mattermost notifications&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Configuring Messagebird alerts&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Parameter&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Default&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.messagebird&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Configuration for alerts of type &lt;code&gt;messagebird&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;{}&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.messagebird.access-key&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Messagebird access key&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Required &lt;code&gt;&#34;&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.messagebird.originator&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;The sender of the message&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Required &lt;code&gt;&#34;&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.messagebird.recipients&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;The recipients of the message&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Required &lt;code&gt;&#34;&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.messagebird.default-alert&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Default alert configuration. &lt;br&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/TwiN/gatus/master/#setting-a-default-alert&#34;&gt;Setting a default alert&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;N/A&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Example of sending &lt;strong&gt;SMS&lt;/strong&gt; text message alert using Messagebird:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;alerting:&#xA;  messagebird:&#xA;    access-key: &#34;...&#34;&#xA;    originator: &#34;31619191918&#34;&#xA;    recipients: &#34;31619191919,31619191920&#34;&#xA;&#xA;endpoints:&#xA;  - name: website&#xA;    interval: 5m&#xA;    url: &#34;https://twin.sh/health&#34;&#xA;    conditions:&#xA;      - &#34;[STATUS] == 200&#34;&#xA;      - &#34;[BODY].status == UP&#34;&#xA;      - &#34;[RESPONSE_TIME] &amp;lt; 300&#34;&#xA;    alerts:&#xA;      - type: messagebird&#xA;        failure-threshold: 3&#xA;        send-on-resolved: true&#xA;        description: &#34;healthcheck failed&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Configuring Ntfy alerts&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Parameter&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Default&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.ntfy&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Configuration for alerts of type &lt;code&gt;ntfy&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;{}&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.ntfy.topic&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Topic at which the alert will be sent&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Required &lt;code&gt;&#34;&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.ntfy.url&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;The URL of the target server&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;https://ntfy.sh&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.ntfy.token&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://docs.ntfy.sh/publish/#access-tokens&#34;&gt;Access token&lt;/a&gt; for restricted topics&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;&#34;&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.ntfy.email&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;E-mail address for additional e-mail notifications&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;&#34;&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.ntfy.click&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Website opened when notification is clicked&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;&#34;&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.ntfy.priority&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;The priority of the alert&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;3&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.ntfy.disable-firebase&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Whether message push delivery via firebase should be disabled. &lt;a href=&#34;https://docs.ntfy.sh/publish/#disable-firebase&#34;&gt;ntfy.sh defaults to enabled&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.ntfy.disable-cache&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Whether server side message caching should be disabled. &lt;a href=&#34;https://docs.ntfy.sh/publish/#message-caching&#34;&gt;ntfy.sh defaults to enabled&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.ntfy.default-alert&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Default alert configuration. &lt;br&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/TwiN/gatus/master/#setting-a-default-alert&#34;&gt;Setting a default alert&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;N/A&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/binwiederhier/ntfy&#34;&gt;ntfy&lt;/a&gt; is an amazing project that allows you to subscribe to desktop and mobile notifications, making it an awesome addition to Gatus.&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;alerting:&#xA;  ntfy:&#xA;    topic: &#34;gatus-test-topic&#34;&#xA;    priority: 2&#xA;    token: faketoken&#xA;    default-alert:&#xA;      failure-threshold: 3&#xA;      send-on-resolved: true&#xA;&#xA;endpoints:&#xA;  - name: website&#xA;    interval: 5m&#xA;    url: &#34;https://twin.sh/health&#34;&#xA;    conditions:&#xA;      - &#34;[STATUS] == 200&#34;&#xA;      - &#34;[BODY].status == UP&#34;&#xA;      - &#34;[RESPONSE_TIME] &amp;lt; 300&#34;&#xA;    alerts:&#xA;      - type: ntfy&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Configuring Opsgenie alerts&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Parameter&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Default&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.opsgenie&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Configuration for alerts of type &lt;code&gt;opsgenie&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;{}&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.opsgenie.api-key&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Opsgenie API Key&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Required &lt;code&gt;&#34;&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.opsgenie.priority&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Priority level of the alert.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;P1&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.opsgenie.source&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Source field of the alert.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;gatus&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.opsgenie.entity-prefix&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Entity field prefix.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;gatus-&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.opsgenie.alias-prefix&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Alias field prefix.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;gatus-healthcheck-&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.opsgenie.tags&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Tags of alert.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;[]&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.opsgenie.default-alert&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Default alert configuration. &lt;br&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/TwiN/gatus/master/#setting-a-default-alert&#34;&gt;Setting a default alert&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;N/A&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Opsgenie provider will automatically open and close alerts.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;alerting:&#xA;  opsgenie:&#xA;    api-key: &#34;00000000-0000-0000-0000-000000000000&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Configuring PagerDuty alerts&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Parameter&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Default&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.pagerduty&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Configuration for alerts of type &lt;code&gt;pagerduty&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;{}&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.pagerduty.integration-key&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;PagerDuty Events API v2 integration key&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;&#34;&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.pagerduty.overrides&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;List of overrides that may be prioritized over the default configuration&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;[]&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.pagerduty.overrides[].group&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Endpoint group for which the configuration will be overridden by this configuration&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;&#34;&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.pagerduty.overrides[].integration-key&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;PagerDuty Events API v2 integration key&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;&#34;&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.pagerduty.default-alert&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Default alert configuration. &lt;br&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/TwiN/gatus/master/#setting-a-default-alert&#34;&gt;Setting a default alert&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;N/A&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;It is highly recommended to set &lt;code&gt;endpoints[].alerts[].send-on-resolved&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; for alerts of type &lt;code&gt;pagerduty&lt;/code&gt;, because unlike other alerts, the operation resulting from setting said parameter to &lt;code&gt;true&lt;/code&gt; will not create another incident but mark the incident as resolved on PagerDuty instead.&lt;/p&gt; &#xA;&lt;p&gt;Behavior:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;By default, &lt;code&gt;alerting.pagerduty.integration-key&lt;/code&gt; is used as the integration key&lt;/li&gt; &#xA; &lt;li&gt;If the endpoint being evaluated belongs to a group (&lt;code&gt;endpoints[].group&lt;/code&gt;) matching the value of &lt;code&gt;alerting.pagerduty.overrides[].group&lt;/code&gt;, the provider will use that override&#39;s integration key instead of &lt;code&gt;alerting.pagerduty.integration-key&lt;/code&gt;&#39;s&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;alerting:&#xA;  pagerduty:&#xA;    integration-key: &#34;********************************&#34;&#xA;    # You can also add group-specific integration keys, which will&#xA;    # override the integration key above for the specified groups&#xA;    overrides:&#xA;      - group: &#34;core&#34;&#xA;        integration-key: &#34;********************************&#34;&#xA;&#xA;endpoints:&#xA;  - name: website&#xA;    url: &#34;https://twin.sh/health&#34;&#xA;    interval: 30s&#xA;    conditions:&#xA;      - &#34;[STATUS] == 200&#34;&#xA;      - &#34;[BODY].status == UP&#34;&#xA;      - &#34;[RESPONSE_TIME] &amp;lt; 300&#34;&#xA;    alerts:&#xA;      - type: pagerduty&#xA;        failure-threshold: 3&#xA;        success-threshold: 5&#xA;        send-on-resolved: true&#xA;        description: &#34;healthcheck failed&#34;&#xA;&#xA;  - name: back-end&#xA;    group: core&#xA;    url: &#34;https://example.org/&#34;&#xA;    interval: 5m&#xA;    conditions:&#xA;      - &#34;[STATUS] == 200&#34;&#xA;      - &#34;[CERTIFICATE_EXPIRATION] &amp;gt; 48h&#34;&#xA;    alerts:&#xA;      - type: pagerduty&#xA;        failure-threshold: 3&#xA;        success-threshold: 5&#xA;        send-on-resolved: true&#xA;        description: &#34;healthcheck failed&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Configuring Pushover alerts&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Parameter&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Default&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.pushover&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Configuration for alerts of type &lt;code&gt;pushover&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;{}&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.pushover.application-token&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Pushover application token&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;&#34;&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.pushover.user-key&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;User or group key&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;&#34;&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.pushover.title&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Fixed title for all messages sent via Pushover&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Name of your App in Pushover&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.pushover.priority&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Priority of all messages, ranging from -2 (very low) to 2 (emergency)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;0&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.pushover.resolved-priority&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Override the priority of messages on resolved, ranging from -2 (very low) to 2 (emergency)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;0&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.pushover.sound&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Sound of all messages&lt;br&gt;See &lt;a href=&#34;https://pushover.net/api#sounds&#34;&gt;sounds&lt;/a&gt; for all valid choices.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;&#34;&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.pushover.default-alert&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Default alert configuration. &lt;br&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/TwiN/gatus/master/#setting-a-default-alert&#34;&gt;Setting a default alert&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;N/A&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;alerting:&#xA;  pushover:&#xA;    application-token: &#34;******************************&#34;&#xA;    user-key: &#34;******************************&#34;&#xA;&#xA;endpoints:&#xA;  - name: website&#xA;    url: &#34;https://twin.sh/health&#34;&#xA;    interval: 30s&#xA;    conditions:&#xA;      - &#34;[STATUS] == 200&#34;&#xA;      - &#34;[BODY].status == UP&#34;&#xA;      - &#34;[RESPONSE_TIME] &amp;lt; 300&#34;&#xA;    alerts:&#xA;      - type: pushover&#xA;        failure-threshold: 3&#xA;        success-threshold: 5&#xA;        send-on-resolved: true&#xA;        description: &#34;healthcheck failed&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Configuring Slack alerts&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Parameter&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Default&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.slack&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Configuration for alerts of type &lt;code&gt;slack&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;{}&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.slack.webhook-url&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Slack Webhook URL&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Required &lt;code&gt;&#34;&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.slack.default-alert&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Default alert configuration. &lt;br&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/TwiN/gatus/master/#setting-a-default-alert&#34;&gt;Setting a default alert&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;N/A&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.slack.overrides&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;List of overrides that may be prioritized over the default configuration&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;[]&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.slack.overrides[].group&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Endpoint group for which the configuration will be overridden by this configuration&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;&#34;&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.slack.overrides[].webhook-url&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Slack Webhook URL&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;&#34;&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;alerting:&#xA;  slack:&#xA;    webhook-url: &#34;https://hooks.slack.com/services/**********/**********/**********&#34;&#xA;&#xA;endpoints:&#xA;  - name: website&#xA;    url: &#34;https://twin.sh/health&#34;&#xA;    interval: 30s&#xA;    conditions:&#xA;      - &#34;[STATUS] == 200&#34;&#xA;      - &#34;[BODY].status == UP&#34;&#xA;      - &#34;[RESPONSE_TIME] &amp;lt; 300&#34;&#xA;    alerts:&#xA;      - type: slack&#xA;        description: &#34;healthcheck failed 3 times in a row&#34;&#xA;        send-on-resolved: true&#xA;      - type: slack&#xA;        failure-threshold: 5&#xA;        description: &#34;healthcheck failed 5 times in a row&#34;&#xA;        send-on-resolved: true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here&#39;s an example of what the notifications look like:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/TwiN/gatus/master/.github/assets/slack-alerts.png&#34; alt=&#34;Slack notifications&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Configuring Teams alerts &lt;em&gt;(Deprecated)&lt;/em&gt;&lt;/h4&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!CAUTION] &lt;strong&gt;Deprecated:&lt;/strong&gt; Office 365 Connectors within Microsoft Teams are being retired (&lt;a href=&#34;https://devblogs.microsoft.com/microsoft365dev/retirement-of-office-365-connectors-within-microsoft-teams/&#34;&gt;Source: Microsoft DevBlog&lt;/a&gt;). Existing connectors will continue to work until December 2025. The new &lt;a href=&#34;https://raw.githubusercontent.com/TwiN/gatus/master/#configuring-teams-workflow-alerts&#34;&gt;Teams Workflow Alerts&lt;/a&gt; should be used with Microsoft Workflows instead of this legacy configuration.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Parameter&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Default&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.teams&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Configuration for alerts of type &lt;code&gt;teams&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;{}&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.teams.webhook-url&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Teams Webhook URL&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Required &lt;code&gt;&#34;&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.teams.default-alert&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Default alert configuration. &lt;br&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/TwiN/gatus/master/#setting-a-default-alert&#34;&gt;Setting a default alert&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;N/A&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.teams.title&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Title of the notification&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;&#34;&amp;amp;#x1F6A8; Gatus&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.teams.overrides&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;List of overrides that may be prioritized over the default configuration&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;[]&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.teams.overrides[].group&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Endpoint group for which the configuration will be overridden by this configuration&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;&#34;&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.teams.overrides[].webhook-url&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Teams Webhook URL&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;&#34;&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.teams.client.insecure&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Whether to skip TLS verification&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;alerting:&#xA;  teams:&#xA;    webhook-url: &#34;https://********.webhook.office.com/webhookb2/************&#34;&#xA;    client:&#xA;      insecure: false&#xA;    # You can also add group-specific to keys, which will&#xA;    # override the to key above for the specified groups&#xA;    overrides:&#xA;      - group: &#34;core&#34;&#xA;        webhook-url: &#34;https://********.webhook.office.com/webhookb3/************&#34;&#xA;&#xA;endpoints:&#xA;  - name: website&#xA;    url: &#34;https://twin.sh/health&#34;&#xA;    interval: 30s&#xA;    conditions:&#xA;      - &#34;[STATUS] == 200&#34;&#xA;      - &#34;[BODY].status == UP&#34;&#xA;      - &#34;[RESPONSE_TIME] &amp;lt; 300&#34;&#xA;    alerts:&#xA;      - type: teams&#xA;        description: &#34;healthcheck failed&#34;&#xA;        send-on-resolved: true&#xA;&#xA;  - name: back-end&#xA;    group: core&#xA;    url: &#34;https://example.org/&#34;&#xA;    interval: 5m&#xA;    conditions:&#xA;      - &#34;[STATUS] == 200&#34;&#xA;      - &#34;[CERTIFICATE_EXPIRATION] &amp;gt; 48h&#34;&#xA;    alerts:&#xA;      - type: teams&#xA;        description: &#34;healthcheck failed&#34;&#xA;        send-on-resolved: true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here&#39;s an example of what the notifications look like:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/TwiN/gatus/master/.github/assets/teams-alerts.png&#34; alt=&#34;Teams notifications&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Configuring Teams Workflow alerts&lt;/h4&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] This alert is compatible with Workflows for Microsoft Teams. To setup the workflow and get the webhook URL, follow the &lt;a href=&#34;https://support.microsoft.com/en-us/office/create-incoming-webhooks-with-workflows-for-microsoft-teams-8ae491c7-0394-4861-ba59-055e33f75498&#34;&gt;Microsoft Documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Parameter&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Default&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.teams-workflows&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Configuration for alerts of type &lt;code&gt;teams&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;{}&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.teams-workflows.webhook-url&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Teams Webhook URL&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Required &lt;code&gt;&#34;&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.teams-workflows.title&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Title of the notification&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;&#34;&amp;amp;#x26D1; Gatus&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.teams-workflows.default-alert&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Default alert configuration. &lt;br&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/TwiN/gatus/master/#setting-a-default-alert&#34;&gt;Setting a default alert&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;N/A&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.teams-workflows.overrides&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;List of overrides that may be prioritized over the default configuration&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;[]&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.teams-workflows.overrides[].group&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Endpoint group for which the configuration will be overridden by this configuration&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;&#34;&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.teams-workflows.overrides[].webhook-url&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Teams WorkFlow Webhook URL&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;&#34;&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;alerting:&#xA;  teams-workflows:&#xA;    webhook-url: &#34;https://********.webhook.office.com/webhookb2/************&#34;&#xA;    # You can also add group-specific to keys, which will&#xA;    # override the to key above for the specified groups&#xA;    overrides:&#xA;      - group: &#34;core&#34;&#xA;        webhook-url: &#34;https://********.webhook.office.com/webhookb3/************&#34;&#xA;&#xA;endpoints:&#xA;  - name: website&#xA;    url: &#34;https://twin.sh/health&#34;&#xA;    interval: 30s&#xA;    conditions:&#xA;      - &#34;[STATUS] == 200&#34;&#xA;      - &#34;[BODY].status == UP&#34;&#xA;      - &#34;[RESPONSE_TIME] &amp;lt; 300&#34;&#xA;    alerts:&#xA;      - type: teams-workflows&#xA;        description: &#34;healthcheck failed&#34;&#xA;        send-on-resolved: true&#xA;&#xA;  - name: back-end&#xA;    group: core&#xA;    url: &#34;https://example.org/&#34;&#xA;    interval: 5m&#xA;    conditions:&#xA;      - &#34;[STATUS] == 200&#34;&#xA;      - &#34;[CERTIFICATE_EXPIRATION] &amp;gt; 48h&#34;&#xA;    alerts:&#xA;      - type: teams-workflows&#xA;        description: &#34;healthcheck failed&#34;&#xA;        send-on-resolved: true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here&#39;s an example of what the notifications look like:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/TwiN/gatus/master/.github/assets/teams-workflows-alerts.png&#34; alt=&#34;Teams Workflow notifications&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Configuring Telegram alerts&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Parameter&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Default&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.telegram&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Configuration for alerts of type &lt;code&gt;telegram&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;{}&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.telegram.token&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Telegram Bot Token&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Required &lt;code&gt;&#34;&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.telegram.id&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Telegram User ID&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Required &lt;code&gt;&#34;&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.telegram.api-url&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Telegram API URL&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;https://api.telegram.org&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.telegram.client&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Client configuration. &lt;br&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/TwiN/gatus/master/#client-configuration&#34;&gt;Client configuration&lt;/a&gt;.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;{}&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.telegram.default-alert&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Default alert configuration. &lt;br&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/TwiN/gatus/master/#setting-a-default-alert&#34;&gt;Setting a default alert&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;N/A&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.telegram.overrides&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;List of overrides that may be prioritized over the default configuration&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;[]&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.telegram.overrides[].group&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Endpoint group for which the configuration will be overridden by this configuration&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;&#34;&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.telegram.overrides[].token&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Telegram Bot Token for override default value&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;&#34;&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.telegram.overrides[].id&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Telegram User ID for override default value&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;&#34;&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;alerting:&#xA;  telegram:&#xA;    token: &#34;123456:ABC-DEF1234ghIkl-zyx57W2v1u123ew11&#34;&#xA;    id: &#34;0123456789&#34;&#xA;&#xA;endpoints:&#xA;  - name: website&#xA;    url: &#34;https://twin.sh/health&#34;&#xA;    interval: 30s&#xA;    conditions:&#xA;      - &#34;[STATUS] == 200&#34;&#xA;      - &#34;[BODY].status == UP&#34;&#xA;    alerts:&#xA;      - type: telegram&#xA;        send-on-resolved: true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here&#39;s an example of what the notifications look like:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/TwiN/gatus/master/.github/assets/telegram-alerts.png&#34; alt=&#34;Telegram notifications&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Configuring Twilio alerts&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Parameter&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Default&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.twilio&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Settings for alerts of type &lt;code&gt;twilio&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;{}&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.twilio.sid&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Twilio account SID&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Required &lt;code&gt;&#34;&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.twilio.token&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Twilio auth token&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Required &lt;code&gt;&#34;&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.twilio.from&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Number to send Twilio alerts from&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Required &lt;code&gt;&#34;&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.twilio.to&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Number to send twilio alerts to&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Required &lt;code&gt;&#34;&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.twilio.default-alert&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Default alert configuration. &lt;br&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/TwiN/gatus/master/#setting-a-default-alert&#34;&gt;Setting a default alert&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;N/A&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;alerting:&#xA;  twilio:&#xA;    sid: &#34;...&#34;&#xA;    token: &#34;...&#34;&#xA;    from: &#34;+1-234-567-8901&#34;&#xA;    to: &#34;+1-234-567-8901&#34;&#xA;&#xA;endpoints:&#xA;  - name: website&#xA;    interval: 30s&#xA;    url: &#34;https://twin.sh/health&#34;&#xA;    conditions:&#xA;      - &#34;[STATUS] == 200&#34;&#xA;      - &#34;[BODY].status == UP&#34;&#xA;      - &#34;[RESPONSE_TIME] &amp;lt; 300&#34;&#xA;    alerts:&#xA;      - type: twilio&#xA;        failure-threshold: 5&#xA;        send-on-resolved: true&#xA;        description: &#34;healthcheck failed&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Configuring AWS SES alerts&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Parameter&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Default&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.aws-ses&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Settings for alerts of type &lt;code&gt;aws-ses&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;{}&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.aws-ses.access-key-id&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;AWS Access Key ID&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Optional &lt;code&gt;&#34;&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.aws-ses.secret-access-key&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;AWS Secret Access Key&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Optional &lt;code&gt;&#34;&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.aws-ses.region&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;AWS Region&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Required &lt;code&gt;&#34;&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.aws-ses.from&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;The Email address to send the emails from (should be registered in SES)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Required &lt;code&gt;&#34;&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.aws-ses.to&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Comma separated list of email address to notify&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Required &lt;code&gt;&#34;&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.aws-ses.default-alert&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Default alert configuration. &lt;br&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/TwiN/gatus/master/#setting-a-default-alert&#34;&gt;Setting a default alert&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;N/A&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;alerting:&#xA;  aws-ses:&#xA;    access-key-id: &#34;...&#34;&#xA;    secret-access-key: &#34;...&#34;&#xA;    region: &#34;us-east-1&#34;&#xA;    from: &#34;status@example.com&#34;&#xA;    to: &#34;user@example.com&#34;&#xA;&#xA;endpoints:&#xA;  - name: website&#xA;    interval: 30s&#xA;    url: &#34;https://twin.sh/health&#34;&#xA;    conditions:&#xA;      - &#34;[STATUS] == 200&#34;&#xA;      - &#34;[BODY].status == UP&#34;&#xA;      - &#34;[RESPONSE_TIME] &amp;lt; 300&#34;&#xA;    alerts:&#xA;      - type: aws-ses&#xA;        failure-threshold: 5&#xA;        send-on-resolved: true&#xA;        description: &#34;healthcheck failed&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If the &lt;code&gt;access-key-id&lt;/code&gt; and &lt;code&gt;secret-access-key&lt;/code&gt; are not defined Gatus will fall back to IAM authentication.&lt;/p&gt; &#xA;&lt;p&gt;Make sure you have the ability to use &lt;code&gt;ses:SendEmail&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Configuring custom alerts&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Parameter&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Default&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.custom&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Configuration for custom actions on failure or alerts&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;{}&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.custom.url&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Custom alerting request url&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Required &lt;code&gt;&#34;&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.custom.method&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Request method&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;GET&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.custom.body&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Custom alerting request body.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;&#34;&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.custom.headers&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Custom alerting request headers&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;{}&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.custom.client&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Client configuration. &lt;br&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/TwiN/gatus/master/#client-configuration&#34;&gt;Client configuration&lt;/a&gt;.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;{}&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.custom.default-alert&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Default alert configuration. &lt;br&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/TwiN/gatus/master/#setting-a-default-alert&#34;&gt;Setting a default alert&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;N/A&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;While they&#39;re called alerts, you can use this feature to call anything.&lt;/p&gt; &#xA;&lt;p&gt;For instance, you could automate rollbacks by having an application that keeps tracks of new deployments, and by leveraging Gatus, you could have Gatus call that application endpoint when an endpoint starts failing. Your application would then check if the endpoint that started failing was part of the recently deployed application, and if it was, then automatically roll it back.&lt;/p&gt; &#xA;&lt;p&gt;Furthermore, you may use the following placeholders in the body (&lt;code&gt;alerting.custom.body&lt;/code&gt;) and in the url (&lt;code&gt;alerting.custom.url&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;[ALERT_DESCRIPTION]&lt;/code&gt; (resolved from &lt;code&gt;endpoints[].alerts[].description&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;[ENDPOINT_NAME]&lt;/code&gt; (resolved from &lt;code&gt;endpoints[].name&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;[ENDPOINT_GROUP]&lt;/code&gt; (resolved from &lt;code&gt;endpoints[].group&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;[ENDPOINT_URL]&lt;/code&gt; (resolved from &lt;code&gt;endpoints[].url&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;[RESULT_ERRORS]&lt;/code&gt; (resolved from the health evaluation of a given health check)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you have an alert using the &lt;code&gt;custom&lt;/code&gt; provider with &lt;code&gt;send-on-resolved&lt;/code&gt; set to &lt;code&gt;true&lt;/code&gt;, you can use the &lt;code&gt;[ALERT_TRIGGERED_OR_RESOLVED]&lt;/code&gt; placeholder to differentiate the notifications. The aforementioned placeholder will be replaced by &lt;code&gt;TRIGGERED&lt;/code&gt; or &lt;code&gt;RESOLVED&lt;/code&gt; accordingly, though it can be modified (details at the end of this section).&lt;/p&gt; &#xA;&lt;p&gt;For all intents and purposes, we&#39;ll configure the custom alert with a Slack webhook, but you can call anything you want.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;alerting:&#xA;  custom:&#xA;    url: &#34;https://hooks.slack.com/services/**********/**********/**********&#34;&#xA;    method: &#34;POST&#34;&#xA;    body: |&#xA;      {&#xA;        &#34;text&#34;: &#34;[ALERT_TRIGGERED_OR_RESOLVED]: [ENDPOINT_GROUP] - [ENDPOINT_NAME] - [ALERT_DESCRIPTION] - [RESULT_ERRORS]&#34;&#xA;      }&#xA;endpoints:&#xA;  - name: website&#xA;    url: &#34;https://twin.sh/health&#34;&#xA;    interval: 30s&#xA;    conditions:&#xA;      - &#34;[STATUS] == 200&#34;&#xA;      - &#34;[BODY].status == UP&#34;&#xA;      - &#34;[RESPONSE_TIME] &amp;lt; 300&#34;&#xA;    alerts:&#xA;      - type: custom&#xA;        failure-threshold: 10&#xA;        success-threshold: 3&#xA;        send-on-resolved: true&#xA;        description: &#34;health check failed&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that you can customize the resolved values for the &lt;code&gt;[ALERT_TRIGGERED_OR_RESOLVED]&lt;/code&gt; placeholder like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;alerting:&#xA;  custom:&#xA;    placeholders:&#xA;      ALERT_TRIGGERED_OR_RESOLVED:&#xA;        TRIGGERED: &#34;partial_outage&#34;&#xA;        RESOLVED: &#34;operational&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;As a result, the &lt;code&gt;[ALERT_TRIGGERED_OR_RESOLVED]&lt;/code&gt; in the body of first example of this section would be replaced by &lt;code&gt;partial_outage&lt;/code&gt; when an alert is triggered and &lt;code&gt;operational&lt;/code&gt; when an alert is resolved.&lt;/p&gt; &#xA;&lt;h4&gt;Setting a default alert&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Parameter&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Default&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.*.default-alert.enabled&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Whether to enable the alert&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;N/A&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.*.default-alert.failure-threshold&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Number of failures in a row needed before triggering the alert&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;N/A&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.*.default-alert.success-threshold&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Number of successes in a row before an ongoing incident is marked as resolved&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;N/A&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.*.default-alert.send-on-resolved&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Whether to send a notification once a triggered alert is marked as resolved&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;N/A&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.*.default-alert.description&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Description of the alert. Will be included in the alert sent&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;N/A&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;⚠ You must still specify the &lt;code&gt;type&lt;/code&gt; of the alert in the endpoint configuration even if you set the default alert of a provider.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;While you can specify the alert configuration directly in the endpoint definition, it&#39;s tedious and may lead to a very long configuration file.&lt;/p&gt; &#xA;&lt;p&gt;To avoid such problem, you can use the &lt;code&gt;default-alert&lt;/code&gt; parameter present in each provider configuration:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;alerting:&#xA;  slack:&#xA;    webhook-url: &#34;https://hooks.slack.com/services/**********/**********/**********&#34;&#xA;    default-alert:&#xA;      description: &#34;health check failed&#34;&#xA;      send-on-resolved: true&#xA;      failure-threshold: 5&#xA;      success-threshold: 5&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;As a result, your Gatus configuration looks a lot tidier:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;endpoints:&#xA;  - name: example&#xA;    url: &#34;https://example.org&#34;&#xA;    conditions:&#xA;      - &#34;[STATUS] == 200&#34;&#xA;    alerts:&#xA;      - type: slack&#xA;&#xA;  - name: other-example&#xA;    url: &#34;https://example.com&#34;&#xA;    conditions:&#xA;      - &#34;[STATUS] == 200&#34;&#xA;    alerts:&#xA;      - type: slack&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It also allows you to do things like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;endpoints:&#xA;  - name: example&#xA;    url: &#34;https://example.org&#34;&#xA;    conditions:&#xA;      - &#34;[STATUS] == 200&#34;&#xA;    alerts:&#xA;      - type: slack&#xA;        failure-threshold: 5&#xA;      - type: slack&#xA;        failure-threshold: 10&#xA;      - type: slack&#xA;        failure-threshold: 15&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Of course, you can also mix alert types:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;alerting:&#xA;  slack:&#xA;    webhook-url: &#34;https://hooks.slack.com/services/**********/**********/**********&#34;&#xA;    default-alert:&#xA;      failure-threshold: 3&#xA;  pagerduty:&#xA;    integration-key: &#34;********************************&#34;&#xA;    default-alert:&#xA;      failure-threshold: 5&#xA;&#xA;endpoints:&#xA;  - name: endpoint-1&#xA;    url: &#34;https://example.org&#34;&#xA;    conditions:&#xA;      - &#34;[STATUS] == 200&#34;&#xA;    alerts:&#xA;      - type: slack&#xA;      - type: pagerduty&#xA;&#xA;  - name: endpoint-2&#xA;    url: &#34;https://example.org&#34;&#xA;    conditions:&#xA;      - &#34;[STATUS] == 200&#34;&#xA;    alerts:&#xA;      - type: slack&#xA;      - type: pagerduty&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Configuring Zulip alerts&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Parameter&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Default&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.zulip&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Configuration for alerts of type &lt;code&gt;discord&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;{}&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.zulip.bot-email&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Bot Email&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Required &lt;code&gt;&#34;&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.zulip.bot-api-key&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Bot API key&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Required &lt;code&gt;&#34;&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.zulip.domain&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Full organization domain (e.g.: yourZulipDomain.zulipchat.com)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Required &lt;code&gt;&#34;&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.zulip.channel-id&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;The channel ID where Gatus will send the alerts&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Required &lt;code&gt;&#34;&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.zulip.overrides[].group&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Endpoint group for which the configuration will be overridden by this configuration&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;&#34;&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.zulip.overrides[].bot-email&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;&#34;&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.zulip.overrides[].bot-api-key&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;&#34;&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.zulip.overrides[].domain&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;&#34;&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;alerting.zulip.overrides[].channel-id&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;&#34;&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;alerting:&#xA;  zulip:&#xA;    bot-email: gatus-bot@some.zulip.org&#xA;    bot-api-key: &#34;********************************&#34;&#xA;    domain: some.zulip.org&#xA;    channel-id: 123456&#xA;&#xA;endpoints:&#xA;  - name: website&#xA;    url: &#34;https://twin.sh/health&#34;&#xA;    interval: 5m&#xA;    conditions:&#xA;      - &#34;[STATUS] == 200&#34;&#xA;      - &#34;[BODY].status == UP&#34;&#xA;      - &#34;[RESPONSE_TIME] &amp;lt; 300&#34;&#xA;    alerts:&#xA;      - type: zulip&#xA;        description: &#34;healthcheck failed&#34;&#xA;        send-on-resolved: true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Maintenance&lt;/h3&gt; &#xA;&lt;p&gt;If you have maintenance windows, you may not want to be annoyed by alerts. To do that, you&#39;ll have to use the maintenance configuration:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Parameter&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Default&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;maintenance.enabled&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Whether the maintenance period is enabled&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;maintenance.start&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Time at which the maintenance window starts in &lt;code&gt;hh:mm&lt;/code&gt; format (e.g. &lt;code&gt;23:00&lt;/code&gt;)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Required &lt;code&gt;&#34;&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;maintenance.duration&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Duration of the maintenance window (e.g. &lt;code&gt;1h&lt;/code&gt;, &lt;code&gt;30m&lt;/code&gt;)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Required &lt;code&gt;&#34;&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;maintenance.timezone&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Timezone of the maintenance window format (e.g. &lt;code&gt;Europe/Amsterdam&lt;/code&gt;).&lt;br&gt;See &lt;a href=&#34;https://en.wikipedia.org/wiki/List_of_tz_database_time_zones&#34;&gt;List of tz database time zones&lt;/a&gt; for more info&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;UTC&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;maintenance.every&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Days on which the maintenance period applies (e.g. &lt;code&gt;[Monday, Thursday]&lt;/code&gt;).&lt;br&gt;If left empty, the maintenance window applies every day&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;[]&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Here&#39;s an example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;maintenance:&#xA;  start: 23:00&#xA;  duration: 1h&#xA;  timezone: &#34;Europe/Amsterdam&#34;&#xA;  every: [Monday, Thursday]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that you can also specify each day on separate lines:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;maintenance:&#xA;  start: 23:00&#xA;  duration: 1h&#xA;  timezone: &#34;Europe/Amsterdam&#34;&#xA;  every:&#xA;    - Monday&#xA;    - Thursday&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Security&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Parameter&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Default&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;security&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Security configuration&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;{}&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;security.basic&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;HTTP Basic configuration&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;{}&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;security.oidc&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;OpenID Connect configuration&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;{}&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;Basic Authentication&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Parameter&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Default&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;security.basic&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;HTTP Basic configuration&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;{}&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;security.basic.username&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Username for Basic authentication.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Required &lt;code&gt;&#34;&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;security.basic.password-bcrypt-base64&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Password hashed with Bcrypt and then encoded with base64 for Basic authentication.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Required &lt;code&gt;&#34;&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;The example below will require that you authenticate with the username &lt;code&gt;john.doe&lt;/code&gt; and the password &lt;code&gt;hunter2&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;security:&#xA;  basic:&#xA;    username: &#34;john.doe&#34;&#xA;    password-bcrypt-base64: &#34;JDJhJDEwJHRiMnRFakxWazZLdXBzRERQazB1TE8vckRLY05Yb1hSdnoxWU0yQ1FaYXZRSW1McmladDYu&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;⚠ Make sure to carefully select to cost of the bcrypt hash. The higher the cost, the longer it takes to compute the hash, and basic auth verifies the password against the hash on every request. As of 2023-01-06, I suggest a cost of 9.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;OIDC&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Parameter&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Default&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;security.oidc&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;OpenID Connect configuration&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;{}&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;security.oidc.issuer-url&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Issuer URL&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Required &lt;code&gt;&#34;&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;security.oidc.redirect-url&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Redirect URL. Must end with &lt;code&gt;/authorization-code/callback&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Required &lt;code&gt;&#34;&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;security.oidc.client-id&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Client id&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Required &lt;code&gt;&#34;&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;security.oidc.client-secret&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Client secret&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Required &lt;code&gt;&#34;&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;security.oidc.scopes&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Scopes to request. The only scope you need is &lt;code&gt;openid&lt;/code&gt;.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Required &lt;code&gt;[]&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;security.oidc.allowed-subjects&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;List of subjects to allow. If empty, all subjects are allowed.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;[]&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;security:&#xA;  oidc:&#xA;    issuer-url: &#34;https://example.okta.com&#34;&#xA;    redirect-url: &#34;https://status.example.com/authorization-code/callback&#34;&#xA;    client-id: &#34;123456789&#34;&#xA;    client-secret: &#34;abcdefghijk&#34;&#xA;    scopes: [&#34;openid&#34;]&#xA;    # You may optionally specify a list of allowed subjects. If this is not specified, all subjects will be allowed.&#xA;    #allowed-subjects: [&#34;johndoe@example.com&#34;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Confused? Read &lt;a href=&#34;https://twin.sh/articles/56/securing-gatus-with-oidc-using-auth0&#34;&gt;Securing Gatus with OIDC using Auth0&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;TLS Encryption&lt;/h3&gt; &#xA;&lt;p&gt;Gatus supports basic encryption with TLS. To enable this, certificate files in PEM format have to be provided.&lt;/p&gt; &#xA;&lt;p&gt;The example below shows an example configuration which makes gatus respond on port 4443 to HTTPS requests:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;web:&#xA;  port: 4443&#xA;  tls:&#xA;    certificate-file: &#34;certificate.crt&#34;&#xA;    private-key-file: &#34;private.key&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Metrics&lt;/h3&gt; &#xA;&lt;p&gt;To enable metrics, you must set &lt;code&gt;metrics&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt;. Doing so will expose Prometheus-friendly metrics at the &lt;code&gt;/metrics&lt;/code&gt; endpoint on the same port your application is configured to run on (&lt;code&gt;web.port&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Metric name&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Type&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Labels&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Relevant endpoint types&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;gatus_results_total&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;counter&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Number of results per endpoint&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;key, group, name, type, success&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;All&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;gatus_results_code_total&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;counter&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Total number of results by code&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;key, group, name, type, code&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;DNS, HTTP&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;gatus_results_connected_total&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;counter&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Total number of results in which a connection was successfully established&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;key, group, name, type&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;All&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;gatus_results_duration_seconds&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;gauge&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Duration of the request in seconds&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;key, group, name, type&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;All&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;gatus_results_certificate_expiration_seconds&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;gauge&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Number of seconds until the certificate expires&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;key, group, name, type&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;HTTP, STARTTLS&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/TwiN/gatus/master/.examples/docker-compose-grafana-prometheus&#34;&gt;examples/docker-compose-grafana-prometheus&lt;/a&gt; for further documentation as well as an example.&lt;/p&gt; &#xA;&lt;h3&gt;Connectivity&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Parameter&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Default&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;connectivity&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Connectivity configuration&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;{}&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;connectivity.checker&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Connectivity checker configuration&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Required &lt;code&gt;{}&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;connectivity.checker.target&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Host to use for validating connectivity&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Required &lt;code&gt;&#34;&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;connectivity.checker.interval&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Interval at which to validate connectivity&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;1m&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;While Gatus is used to monitor other services, it is possible for Gatus itself to lose connectivity to the internet. In order to prevent Gatus from reporting endpoints as unhealthy when Gatus itself is unhealthy, you may configure Gatus to periodically check for internet connectivity.&lt;/p&gt; &#xA;&lt;p&gt;All endpoint executions are skipped while the connectivity checker deems connectivity to be down.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;connectivity:&#xA;  checker:&#xA;    target: 1.1.1.1:53&#xA;    interval: 60s&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Remote instances (EXPERIMENTAL)&lt;/h3&gt; &#xA;&lt;p&gt;This feature allows you to retrieve endpoint statuses from a remote Gatus instance.&lt;/p&gt; &#xA;&lt;p&gt;There are two main use cases for this:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You have multiple Gatus instances running on different machines, and you wish to visually expose the statuses through a single dashboard&lt;/li&gt; &#xA; &lt;li&gt;You have one or more Gatus instances that are not publicly accessible (e.g. behind a firewall), and you wish to retrieve&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This is an experimental feature. It may be removed or updated in a breaking manner at any time. Furthermore, there are known issues with this feature. If you&#39;d like to provide some feedback, please write a comment in &lt;a href=&#34;https://github.com/TwiN/gatus/issues/64&#34;&gt;#64&lt;/a&gt;. Use at your own risk.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Parameter&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Default&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;remote&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Remote configuration&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;{}&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;remote.instances&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;List of remote instances&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Required &lt;code&gt;[]&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;remote.instances.endpoint-prefix&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;String to prefix all endpoint names with&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;&#34;&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;remote.instances.url&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;URL from which to retrieve endpoint statuses&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Required &lt;code&gt;&#34;&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;remote:&#xA;  instances:&#xA;    - endpoint-prefix: &#34;status.example.org-&#34;&#xA;      url: &#34;https://status.example.org/api/v1/endpoints/statuses&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Deployment&lt;/h2&gt; &#xA;&lt;p&gt;Many examples can be found in the &lt;a href=&#34;https://raw.githubusercontent.com/TwiN/gatus/master/.examples&#34;&gt;.examples&lt;/a&gt; folder, but this section will focus on the most popular ways of deploying Gatus.&lt;/p&gt; &#xA;&lt;h3&gt;Docker&lt;/h3&gt; &#xA;&lt;p&gt;To run Gatus locally with Docker:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;docker run -p 8080:8080 --name gatus twinproduction/gatus&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Other than using one of the examples provided in the &lt;a href=&#34;https://raw.githubusercontent.com/TwiN/gatus/master/.examples&#34;&gt;.examples&lt;/a&gt; folder, you can also try it out locally by creating a configuration file, we&#39;ll call it &lt;code&gt;config.yaml&lt;/code&gt; for this example, and running the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;docker run -p 8080:8080 --mount type=bind,source=&#34;$(pwd)&#34;/config.yaml,target=/config/config.yaml --name gatus twinproduction/gatus&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you&#39;re on Windows, replace &lt;code&gt;&#34;$(pwd)&#34;&lt;/code&gt; by the absolute path to your current directory, e.g.:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;docker run -p 8080:8080 --mount type=bind,source=C:/Users/Chris/Desktop/config.yaml,target=/config/config.yaml --name gatus twinproduction/gatus&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To build the image locally:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;docker build . -t twinproduction/gatus&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Helm Chart&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://helm.sh&#34;&gt;Helm&lt;/a&gt; must be installed to use the chart. Please refer to Helm&#39;s &lt;a href=&#34;https://helm.sh/docs/&#34;&gt;documentation&lt;/a&gt; to get started.&lt;/p&gt; &#xA;&lt;p&gt;Once Helm is set up properly, add the repository as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;helm repo add twin https://twin.github.io/helm-charts&#xA;helm repo update&#xA;helm install gatus twin/gatus&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To get more details, please check &lt;a href=&#34;https://github.com/TwiN/helm-charts/raw/master/charts/gatus/README.md&#34;&gt;chart&#39;s configuration&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Terraform&lt;/h3&gt; &#xA;&lt;p&gt;Gatus can be deployed on Terraform by using the following module: &lt;a href=&#34;https://github.com/TwiN/terraform-kubernetes-gatus&#34;&gt;terraform-kubernetes-gatus&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Running the tests&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;go test -v ./...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Using in Production&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/TwiN/gatus/master/#deployment&#34;&gt;Deployment&lt;/a&gt; section.&lt;/p&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;h3&gt;Sending a GraphQL request&lt;/h3&gt; &#xA;&lt;p&gt;By setting &lt;code&gt;endpoints[].graphql&lt;/code&gt; to true, the body will automatically be wrapped by the standard GraphQL &lt;code&gt;query&lt;/code&gt; parameter.&lt;/p&gt; &#xA;&lt;p&gt;For instance, the following configuration:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;endpoints:&#xA;  - name: filter-users-by-gender&#xA;    url: http://localhost:8080/playground&#xA;    method: POST&#xA;    graphql: true&#xA;    body: |&#xA;      {&#xA;        users(gender: &#34;female&#34;) {&#xA;          id&#xA;          name&#xA;          gender&#xA;          avatar&#xA;        }&#xA;      }&#xA;    conditions:&#xA;      - &#34;[STATUS] == 200&#34;&#xA;      - &#34;[BODY].data.users[0].gender == female&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;will send a &lt;code&gt;POST&lt;/code&gt; request to &lt;code&gt;http://localhost:8080/playground&lt;/code&gt; with the following body:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#34;query&#34;:&#34;      {\n        users(gender: \&#34;female\&#34;) {\n          id\n          name\n          gender\n          avatar\n        }\n      }&#34;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Recommended interval&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;📝 This does not apply if &lt;code&gt;disable-monitoring-lock&lt;/code&gt; is set to &lt;code&gt;true&lt;/code&gt;, as the monitoring lock is what tells Gatus to only evaluate one endpoint at a time.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;To ensure that Gatus provides reliable and accurate results (i.e. response time), Gatus only evaluates one endpoint at a time In other words, even if you have multiple endpoints with the same interval, they will not execute at the same time.&lt;/p&gt; &#xA;&lt;p&gt;You can test this yourself by running Gatus with several endpoints configured with a very short, unrealistic interval, such as 1ms. You&#39;ll notice that the response time does not fluctuate - that is because while endpoints are evaluated on different goroutines, there&#39;s a global lock that prevents multiple endpoints from running at the same time.&lt;/p&gt; &#xA;&lt;p&gt;Unfortunately, there is a drawback. If you have a lot of endpoints, including some that are very slow or prone to timing out (the default timeout is 10s), then it means that for the entire duration of the request, no other endpoint can be evaluated.&lt;/p&gt; &#xA;&lt;p&gt;The interval does not include the duration of the request itself, which means that if an endpoint has an interval of 30s and the request takes 2s to complete, the timestamp between two evaluations will be 32s, not 30s.&lt;/p&gt; &#xA;&lt;p&gt;While this does not prevent Gatus&#39; from performing health checks on all other endpoints, it may cause Gatus to be unable to respect the configured interval, for instance:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Endpoint A has an interval of 5s, and times out after 10s to complete&lt;/li&gt; &#xA; &lt;li&gt;Endpoint B has an interval of 5s, and takes 1ms to complete&lt;/li&gt; &#xA; &lt;li&gt;Endpoint B will be unable to run every 5s, because endpoint A&#39;s health evaluation takes longer than its interval&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To sum it up, while Gatus can handle any interval you throw at it, you&#39;re better off having slow requests with higher interval.&lt;/p&gt; &#xA;&lt;p&gt;As a rule of thumb, I personally set the interval for more complex health checks to &lt;code&gt;5m&lt;/code&gt; (5 minutes) and simple health checks used for alerting (PagerDuty/Twilio) to &lt;code&gt;30s&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Default timeouts&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Endpoint type&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Timeout&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;HTTP&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;10s&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;TCP&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;10s&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;ICMP&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;10s&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;To modify the timeout, see &lt;a href=&#34;https://raw.githubusercontent.com/TwiN/gatus/master/#client-configuration&#34;&gt;Client configuration&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Monitoring a TCP endpoint&lt;/h3&gt; &#xA;&lt;p&gt;By prefixing &lt;code&gt;endpoints[].url&lt;/code&gt; with &lt;code&gt;tcp:\\&lt;/code&gt;, you can monitor TCP endpoints at a very basic level:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;endpoints:&#xA;  - name: redis&#xA;    url: &#34;tcp://127.0.0.1:6379&#34;&#xA;    interval: 30s&#xA;    conditions:&#xA;      - &#34;[CONNECTED] == true&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Placeholders &lt;code&gt;[STATUS]&lt;/code&gt; and &lt;code&gt;[BODY]&lt;/code&gt; as well as the fields &lt;code&gt;endpoints[].body&lt;/code&gt;, &lt;code&gt;endpoints[].headers&lt;/code&gt;, &lt;code&gt;endpoints[].method&lt;/code&gt; and &lt;code&gt;endpoints[].graphql&lt;/code&gt; are not supported for TCP endpoints.&lt;/p&gt; &#xA;&lt;p&gt;This works for applications such as databases (Postgres, MySQL, etc.) and caches (Redis, Memcached, etc.).&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;📝 &lt;code&gt;[CONNECTED] == true&lt;/code&gt; does not guarantee that the endpoint itself is healthy - it only guarantees that there&#39;s something at the given address listening to the given port, and that a connection to that address was successfully established.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Monitoring a UDP endpoint&lt;/h3&gt; &#xA;&lt;p&gt;By prefixing &lt;code&gt;endpoints[].url&lt;/code&gt; with &lt;code&gt;udp:\\&lt;/code&gt;, you can monitor UDP endpoints at a very basic level:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;endpoints:&#xA;  - name: example&#xA;    url: &#34;udp://example.org:80&#34;&#xA;    conditions:&#xA;      - &#34;[CONNECTED] == true&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Placeholders &lt;code&gt;[STATUS]&lt;/code&gt; and &lt;code&gt;[BODY]&lt;/code&gt; as well as the fields &lt;code&gt;endpoints[].body&lt;/code&gt;, &lt;code&gt;endpoints[].headers&lt;/code&gt;, &lt;code&gt;endpoints[].method&lt;/code&gt; and &lt;code&gt;endpoints[].graphql&lt;/code&gt; are not supported for UDP endpoints.&lt;/p&gt; &#xA;&lt;p&gt;This works for UDP based application.&lt;/p&gt; &#xA;&lt;h3&gt;Monitoring a SCTP endpoint&lt;/h3&gt; &#xA;&lt;p&gt;By prefixing &lt;code&gt;endpoints[].url&lt;/code&gt; with &lt;code&gt;sctp:\\&lt;/code&gt;, you can monitor Stream Control Transmission Protocol (SCTP) endpoints at a very basic level:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;endpoints:&#xA;  - name: example&#xA;    url: &#34;sctp://127.0.0.1:38412&#34;&#xA;    conditions:&#xA;      - &#34;[CONNECTED] == true&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Placeholders &lt;code&gt;[STATUS]&lt;/code&gt; and &lt;code&gt;[BODY]&lt;/code&gt; as well as the fields &lt;code&gt;endpoints[].body&lt;/code&gt;, &lt;code&gt;endpoints[].headers&lt;/code&gt;, &lt;code&gt;endpoints[].method&lt;/code&gt; and &lt;code&gt;endpoints[].graphql&lt;/code&gt; are not supported for SCTP endpoints.&lt;/p&gt; &#xA;&lt;p&gt;This works for SCTP based application.&lt;/p&gt; &#xA;&lt;h3&gt;Monitoring a WebSocket endpoint&lt;/h3&gt; &#xA;&lt;p&gt;By prefixing &lt;code&gt;endpoints[].url&lt;/code&gt; with &lt;code&gt;ws://&lt;/code&gt; or &lt;code&gt;wss://&lt;/code&gt;, you can monitor WebSocket endpoints at a very basic level:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;endpoints:&#xA;  - name: example&#xA;    url: &#34;wss://example.com/&#34;&#xA;    body: &#34;status&#34;&#xA;    conditions:&#xA;      - &#34;[CONNECTED] == true&#34;&#xA;      - &#34;[BODY].result &amp;gt;= 0&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;[BODY]&lt;/code&gt; placeholder contains the output of the query, and &lt;code&gt;[CONNECTED]&lt;/code&gt; shows whether the connection was successfully established.&lt;/p&gt; &#xA;&lt;h3&gt;Monitoring an endpoint using ICMP&lt;/h3&gt; &#xA;&lt;p&gt;By prefixing &lt;code&gt;endpoints[].url&lt;/code&gt; with &lt;code&gt;icmp:\\&lt;/code&gt;, you can monitor endpoints at a very basic level using ICMP, or more commonly known as &#34;ping&#34; or &#34;echo&#34;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;endpoints:&#xA;  - name: ping-example&#xA;    url: &#34;icmp://example.com&#34;&#xA;    conditions:&#xA;      - &#34;[CONNECTED] == true&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Only the placeholders &lt;code&gt;[CONNECTED]&lt;/code&gt;, &lt;code&gt;[IP]&lt;/code&gt; and &lt;code&gt;[RESPONSE_TIME]&lt;/code&gt; are supported for endpoints of type ICMP. You can specify a domain prefixed by &lt;code&gt;icmp://&lt;/code&gt;, or an IP address prefixed by &lt;code&gt;icmp://&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you run Gatus on Linux, please read the Linux section on &lt;a href=&#34;https://github.com/prometheus-community/pro-bing#linux&#34;&gt;https://github.com/prometheus-community/pro-bing#linux&lt;/a&gt; if you encounter any problems.&lt;/p&gt; &#xA;&lt;h3&gt;Monitoring an endpoint using DNS queries&lt;/h3&gt; &#xA;&lt;p&gt;Defining a &lt;code&gt;dns&lt;/code&gt; configuration in an endpoint will automatically mark said endpoint as an endpoint of type DNS:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;endpoints:&#xA;  - name: example-dns-query&#xA;    url: &#34;8.8.8.8&#34; # Address of the DNS server to use&#xA;    dns:&#xA;      query-name: &#34;example.com&#34;&#xA;      query-type: &#34;A&#34;&#xA;    conditions:&#xA;      - &#34;[BODY] == 93.184.215.14&#34;&#xA;      - &#34;[DNS_RCODE] == NOERROR&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There are two placeholders that can be used in the conditions for endpoints of type DNS:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The placeholder &lt;code&gt;[BODY]&lt;/code&gt; resolves to the output of the query. For instance, a query of type &lt;code&gt;A&lt;/code&gt; would return an IPv4.&lt;/li&gt; &#xA; &lt;li&gt;The placeholder &lt;code&gt;[DNS_RCODE]&lt;/code&gt; resolves to the name associated to the response code returned by the query, such as &lt;code&gt;NOERROR&lt;/code&gt;, &lt;code&gt;FORMERR&lt;/code&gt;, &lt;code&gt;SERVFAIL&lt;/code&gt;, &lt;code&gt;NXDOMAIN&lt;/code&gt;, etc.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Monitoring an endpoint using SSH&lt;/h3&gt; &#xA;&lt;p&gt;You can monitor endpoints using SSH by prefixing &lt;code&gt;endpoints[].url&lt;/code&gt; with &lt;code&gt;ssh:\\&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;endpoints:&#xA;  - name: ssh-example&#xA;    url: &#34;ssh://example.com:22&#34; # port is optional. Default is 22.&#xA;    ssh:&#xA;      username: &#34;username&#34;&#xA;      password: &#34;password&#34;&#xA;    body: |&#xA;      {&#xA;        &#34;command&#34;: &#34;uptime&#34;&#xA;      }&#xA;    interval: 1m&#xA;    conditions:&#xA;      - &#34;[CONNECTED] == true&#34;&#xA;      - &#34;[STATUS] == 0&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The following placeholders are supported for endpoints of type SSH:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;[CONNECTED]&lt;/code&gt; resolves to &lt;code&gt;true&lt;/code&gt; if the SSH connection was successful, &lt;code&gt;false&lt;/code&gt; otherwise&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;[STATUS]&lt;/code&gt; resolves the exit code of the command executed on the remote server (e.g. &lt;code&gt;0&lt;/code&gt; for success)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Monitoring an endpoint using STARTTLS&lt;/h3&gt; &#xA;&lt;p&gt;If you have an email server that you want to ensure there are no problems with, monitoring it through STARTTLS will serve as a good initial indicator:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;endpoints:&#xA;  - name: starttls-smtp-example&#xA;    url: &#34;starttls://smtp.gmail.com:587&#34;&#xA;    interval: 30m&#xA;    client:&#xA;      timeout: 5s&#xA;    conditions:&#xA;      - &#34;[CONNECTED] == true&#34;&#xA;      - &#34;[CERTIFICATE_EXPIRATION] &amp;gt; 48h&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Monitoring an endpoint using TLS&lt;/h3&gt; &#xA;&lt;p&gt;Monitoring endpoints using SSL/TLS encryption, such as LDAP over TLS, can help detect certificate expiration:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;endpoints:&#xA;  - name: tls-ldaps-example&#xA;    url: &#34;tls://ldap.example.com:636&#34;&#xA;    interval: 30m&#xA;    client:&#xA;      timeout: 5s&#xA;    conditions:&#xA;      - &#34;[CONNECTED] == true&#34;&#xA;      - &#34;[CERTIFICATE_EXPIRATION] &amp;gt; 48h&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Monitoring domain expiration&lt;/h3&gt; &#xA;&lt;p&gt;You can monitor the expiration of a domain with all endpoint types except for DNS by using the &lt;code&gt;[DOMAIN_EXPIRATION]&lt;/code&gt; placeholder:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;endpoints:&#xA;  - name: check-domain-and-certificate-expiration&#xA;    url: &#34;https://example.org&#34;&#xA;    interval: 1h&#xA;    conditions:&#xA;      - &#34;[DOMAIN_EXPIRATION] &amp;gt; 720h&#34;&#xA;      - &#34;[CERTIFICATE_EXPIRATION] &amp;gt; 240h&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;⚠ The usage of the &lt;code&gt;[DOMAIN_EXPIRATION]&lt;/code&gt; placeholder requires Gatus to send a request to the official IANA WHOIS service &lt;a href=&#34;https://github.com/TwiN/whois&#34;&gt;through a library&lt;/a&gt; and in some cases, a secondary request to a TLD-specific WHOIS server (e.g. &lt;code&gt;whois.nic.sh&lt;/code&gt;). To prevent the WHOIS service from throttling your IP address if you send too many requests, Gatus will prevent you from using the &lt;code&gt;[DOMAIN_EXPIRATION]&lt;/code&gt; placeholder on an endpoint with an interval of less than &lt;code&gt;5m&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;disable-monitoring-lock&lt;/h3&gt; &#xA;&lt;p&gt;Setting &lt;code&gt;disable-monitoring-lock&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; means that multiple endpoints could be monitored at the same time.&lt;/p&gt; &#xA;&lt;p&gt;While this behavior wouldn&#39;t generally be harmful, conditions using the &lt;code&gt;[RESPONSE_TIME]&lt;/code&gt; placeholder could be impacted by the evaluation of multiple endpoints at the same time, therefore, the default value for this parameter is &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;There are three main reasons why you might want to disable the monitoring lock:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You&#39;re using Gatus for load testing (each endpoint are periodically evaluated on a different goroutine, so technically, if you create 100 endpoints with a 1 seconds interval, Gatus will send 100 requests per second)&lt;/li&gt; &#xA; &lt;li&gt;You have a &lt;em&gt;lot&lt;/em&gt; of endpoints to monitor&lt;/li&gt; &#xA; &lt;li&gt;You want to test multiple endpoints at very short intervals (&amp;lt; 5s)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Reloading configuration on the fly&lt;/h3&gt; &#xA;&lt;p&gt;For the sake of convenience, Gatus automatically reloads the configuration on the fly if the loaded configuration file is updated while Gatus is running.&lt;/p&gt; &#xA;&lt;p&gt;By default, the application will exit if the updating configuration is invalid, but you can configure Gatus to continue running if the configuration file is updated with an invalid configuration by setting &lt;code&gt;skip-invalid-config-update&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Keep in mind that it is in your best interest to ensure the validity of the configuration file after each update you apply to the configuration file while Gatus is running by looking at the log and making sure that you do not see the following message:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;The configuration file was updated, but it is not valid. The old configuration will continue being used.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Failure to do so may result in Gatus being unable to start if the application is restarted for whatever reason.&lt;/p&gt; &#xA;&lt;p&gt;I recommend not setting &lt;code&gt;skip-invalid-config-update&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; to avoid a situation like this, but the choice is yours to make.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;If you are not using a file storage&lt;/strong&gt;, updating the configuration while Gatus is running is effectively the same as restarting the application.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;📝 Updates may not be detected if the config file is bound instead of the config folder. See &lt;a href=&#34;https://github.com/TwiN/gatus/issues/151&#34;&gt;#151&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Endpoint groups&lt;/h3&gt; &#xA;&lt;p&gt;Endpoint groups are used for grouping multiple endpoints together on the dashboard.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;endpoints:&#xA;  - name: frontend&#xA;    group: core&#xA;    url: &#34;https://example.org/&#34;&#xA;    interval: 5m&#xA;    conditions:&#xA;      - &#34;[STATUS] == 200&#34;&#xA;&#xA;  - name: backend&#xA;    group: core&#xA;    url: &#34;https://example.org/&#34;&#xA;    interval: 5m&#xA;    conditions:&#xA;      - &#34;[STATUS] == 200&#34;&#xA;&#xA;  - name: monitoring&#xA;    group: internal&#xA;    url: &#34;https://example.org/&#34;&#xA;    interval: 5m&#xA;    conditions:&#xA;      - &#34;[STATUS] == 200&#34;&#xA;&#xA;  - name: nas&#xA;    group: internal&#xA;    url: &#34;https://example.org/&#34;&#xA;    interval: 5m&#xA;    conditions:&#xA;      - &#34;[STATUS] == 200&#34;&#xA;&#xA;  - name: random endpoint that is not part of a group&#xA;    url: &#34;https://example.org/&#34;&#xA;    interval: 5m&#xA;    conditions:&#xA;      - &#34;[STATUS] == 200&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The configuration above will result in a dashboard that looks like this:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/TwiN/gatus/master/.github/assets/endpoint-groups.png&#34; alt=&#34;Gatus Endpoint Groups&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Exposing Gatus on a custom path&lt;/h3&gt; &#xA;&lt;p&gt;Currently, you can expose the Gatus UI using a fully qualified domain name (FQDN) such as &lt;code&gt;status.example.org&lt;/code&gt;. However, it does not support path-based routing, which means you cannot expose it through a URL like &lt;code&gt;example.org/status/&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For more information, see &lt;a href=&#34;https://github.com/TwiN/gatus/issues/88&#34;&gt;https://github.com/TwiN/gatus/issues/88&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Exposing Gatus on a custom port&lt;/h3&gt; &#xA;&lt;p&gt;By default, Gatus is exposed on port &lt;code&gt;8080&lt;/code&gt;, but you may specify a different port by setting the &lt;code&gt;web.port&lt;/code&gt; parameter:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;web:&#xA;  port: 8081&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you&#39;re using a PaaS like Heroku that doesn&#39;t let you set a custom port and exposes it through an environment variable instead, you can use that environment variable directly in the configuration file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;web:&#xA;  port: ${PORT}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Configuring a startup delay&lt;/h3&gt; &#xA;&lt;p&gt;If, for any reason, you need Gatus to wait for a given amount of time before monitoring the endpoints on application start, you can use the &lt;code&gt;GATUS_DELAY_START_SECONDS&lt;/code&gt; environment variable to make Gatus sleep on startup.&lt;/p&gt; &#xA;&lt;h3&gt;Keeping your configuration small&lt;/h3&gt; &#xA;&lt;p&gt;While not specific to Gatus, you can leverage YAML anchors to create a default configuration. If you have a large configuration file, this should help you keep things clean.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Example&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;default-endpoint: &amp;amp;defaults&#xA;  group: core&#xA;  interval: 5m&#xA;  client:&#xA;    insecure: true&#xA;    timeout: 30s&#xA;  conditions:&#xA;    - &#34;[STATUS] == 200&#34;&#xA;&#xA;endpoints:&#xA;  - name: anchor-example-1&#xA;    &amp;lt;&amp;lt;: *defaults               # This will merge the configuration under &amp;amp;defaults with this endpoint&#xA;    url: &#34;https://example.org&#34;&#xA;&#xA;  - name: anchor-example-2&#xA;    &amp;lt;&amp;lt;: *defaults&#xA;    group: example              # This will override the group defined in &amp;amp;defaults&#xA;    url: &#34;https://example.com&#34;&#xA;&#xA;  - name: anchor-example-3&#xA;    &amp;lt;&amp;lt;: *defaults&#xA;    url: &#34;https://twin.sh/health&#34;&#xA;    conditions:                # This will override the conditions defined in &amp;amp;defaults&#xA;      - &#34;[STATUS] == 200&#34;&#xA;      - &#34;[BODY].status == UP&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Proxy client configuration&lt;/h3&gt; &#xA;&lt;p&gt;You can configure a proxy for the client to use by setting the &lt;code&gt;proxy-url&lt;/code&gt; parameter in the client configuration.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;endpoints:&#xA;  - name: website&#xA;    url: &#34;https://twin.sh/health&#34;&#xA;    client:&#xA;      proxy-url: http://proxy.example.com:8080&#xA;    conditions:&#xA;      - &#34;[STATUS] == 200&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;How to fix 431 Request Header Fields Too Large error&lt;/h3&gt; &#xA;&lt;p&gt;Depending on where your environment is deployed and what kind of middleware or reverse proxy sits in front of Gatus, you may run into this issue. This could be because the request headers are too large, e.g. big cookies.&lt;/p&gt; &#xA;&lt;p&gt;By default, &lt;code&gt;web.read-buffer-size&lt;/code&gt; is set to &lt;code&gt;8192&lt;/code&gt;, but increasing this value like so will increase the read buffer size:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;web:&#xA;  read-buffer-size: 32768&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Badges&lt;/h3&gt; &#xA;&lt;h4&gt;Uptime&lt;/h4&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://status.twin.sh/api/v1/endpoints/core_blog-external/uptimes/1h/badge.svg?sanitize=true&#34; alt=&#34;Uptime 1h&#34;&gt; &lt;img src=&#34;https://status.twin.sh/api/v1/endpoints/core_blog-external/uptimes/24h/badge.svg?sanitize=true&#34; alt=&#34;Uptime 24h&#34;&gt; &lt;img src=&#34;https://status.twin.sh/api/v1/endpoints/core_blog-external/uptimes/7d/badge.svg?sanitize=true&#34; alt=&#34;Uptime 7d&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Gatus can automatically generate an SVG badge for one of your monitored endpoints. This allows you to put badges in your individual applications&#39; README or even create your own status page if you desire.&lt;/p&gt; &#xA;&lt;p&gt;The path to generate a badge is the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;/api/v1/endpoints/{key}/uptimes/{duration}/badge.svg&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Where:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;{duration}&lt;/code&gt; is &lt;code&gt;30d&lt;/code&gt; (alpha), &lt;code&gt;7d&lt;/code&gt;, &lt;code&gt;24h&lt;/code&gt; or &lt;code&gt;1h&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;{key}&lt;/code&gt; has the pattern &lt;code&gt;&amp;lt;GROUP_NAME&amp;gt;_&amp;lt;ENDPOINT_NAME&amp;gt;&lt;/code&gt; in which both variables have &lt;code&gt; &lt;/code&gt;, &lt;code&gt;/&lt;/code&gt;, &lt;code&gt;_&lt;/code&gt;, &lt;code&gt;,&lt;/code&gt; and &lt;code&gt;.&lt;/code&gt; replaced by &lt;code&gt;-&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For instance, if you want the uptime during the last 24 hours from the endpoint &lt;code&gt;frontend&lt;/code&gt; in the group &lt;code&gt;core&lt;/code&gt;, the URL would look like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;https://example.com/api/v1/endpoints/core_frontend/uptimes/7d/badge.svg&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to display an endpoint that is not part of a group, you must leave the group value empty:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;https://example.com/api/v1/endpoints/_frontend/uptimes/7d/badge.svg&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;![Uptime 24h](https://status.twin.sh/api/v1/endpoints/core_blog-external/uptimes/24h/badge.svg)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you&#39;d like to see a visual example of each badge available, you can simply navigate to the endpoint&#39;s detail page.&lt;/p&gt; &#xA;&lt;h4&gt;Health&lt;/h4&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://status.twin.sh/api/v1/endpoints/core_blog-external/health/badge.svg?sanitize=true&#34; alt=&#34;Health&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The path to generate a badge is the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;/api/v1/endpoints/{key}/health/badge.svg&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Where:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;{key}&lt;/code&gt; has the pattern &lt;code&gt;&amp;lt;GROUP_NAME&amp;gt;_&amp;lt;ENDPOINT_NAME&amp;gt;&lt;/code&gt; in which both variables have &lt;code&gt; &lt;/code&gt;, &lt;code&gt;/&lt;/code&gt;, &lt;code&gt;_&lt;/code&gt;, &lt;code&gt;,&lt;/code&gt; and &lt;code&gt;.&lt;/code&gt; replaced by &lt;code&gt;-&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For instance, if you want the current status of the endpoint &lt;code&gt;frontend&lt;/code&gt; in the group &lt;code&gt;core&lt;/code&gt;, the URL would look like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;https://example.com/api/v1/endpoints/core_frontend/health/badge.svg&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Health (Shields.io)&lt;/h4&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/endpoint?url=https%3A%2F%2Fstatus.twin.sh%2Fapi%2Fv1%2Fendpoints%2Fcore_blog-external%2Fhealth%2Fbadge.shields&#34; alt=&#34;Health&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The path to generate a badge is the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;/api/v1/endpoints/{key}/health/badge.shields&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Where:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;{key}&lt;/code&gt; has the pattern &lt;code&gt;&amp;lt;GROUP_NAME&amp;gt;_&amp;lt;ENDPOINT_NAME&amp;gt;&lt;/code&gt; in which both variables have &lt;code&gt; &lt;/code&gt;, &lt;code&gt;/&lt;/code&gt;, &lt;code&gt;_&lt;/code&gt;, &lt;code&gt;,&lt;/code&gt; and &lt;code&gt;.&lt;/code&gt; replaced by &lt;code&gt;-&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For instance, if you want the current status of the endpoint &lt;code&gt;frontend&lt;/code&gt; in the group &lt;code&gt;core&lt;/code&gt;, the URL would look like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;https://example.com/api/v1/endpoints/core_frontend/health/badge.shields&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See more information about the Shields.io badge endpoint &lt;a href=&#34;https://shields.io/badges/endpoint-badge&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Response time&lt;/h4&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://status.twin.sh/api/v1/endpoints/core_blog-external/response-times/1h/badge.svg?sanitize=true&#34; alt=&#34;Response time 1h&#34;&gt; &lt;img src=&#34;https://status.twin.sh/api/v1/endpoints/core_blog-external/response-times/24h/badge.svg?sanitize=true&#34; alt=&#34;Response time 24h&#34;&gt; &lt;img src=&#34;https://status.twin.sh/api/v1/endpoints/core_blog-external/response-times/7d/badge.svg?sanitize=true&#34; alt=&#34;Response time 7d&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The endpoint to generate a badge is the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;/api/v1/endpoints/{key}/response-times/{duration}/badge.svg&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Where:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;{duration}&lt;/code&gt; is &lt;code&gt;30d&lt;/code&gt; (alpha), &lt;code&gt;7d&lt;/code&gt;, &lt;code&gt;24h&lt;/code&gt; or &lt;code&gt;1h&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;{key}&lt;/code&gt; has the pattern &lt;code&gt;&amp;lt;GROUP_NAME&amp;gt;_&amp;lt;ENDPOINT_NAME&amp;gt;&lt;/code&gt; in which both variables have &lt;code&gt; &lt;/code&gt;, &lt;code&gt;/&lt;/code&gt;, &lt;code&gt;_&lt;/code&gt;, &lt;code&gt;,&lt;/code&gt; and &lt;code&gt;.&lt;/code&gt; replaced by &lt;code&gt;-&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h5&gt;How to change the color thresholds of the response time badge&lt;/h5&gt; &#xA;&lt;p&gt;To change the response time badges&#39; threshold, a corresponding configuration can be added to an endpoint. The values in the array correspond to the levels [Awesome, Great, Good, Passable, Bad] All five values must be given in milliseconds (ms).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;endpoints:&#xA;- name: nas&#xA;  group: internal&#xA;  url: &#34;https://example.org/&#34;&#xA;  interval: 5m&#xA;  conditions:&#xA;    - &#34;[STATUS] == 200&#34;&#xA;  ui:&#xA;    badge:&#xA;      response-time:&#xA;        thresholds: [550, 850, 1350, 1650, 1750]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;API&lt;/h3&gt; &#xA;&lt;p&gt;Gatus provides a simple read-only API that can be queried in order to programmatically determine endpoint status and history.&lt;/p&gt; &#xA;&lt;p&gt;All endpoints are available via a GET request to the following endpoint:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;/api/v1/endpoints/statuses&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Example: &lt;a href=&#34;https://status.twin.sh/api/v1/endpoints/statuses&#34;&gt;https://status.twin.sh/api/v1/endpoints/statuses&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Specific endpoints can also be queried by using the following pattern:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;/api/v1/endpoints/{group}_{endpoint}/statuses&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Example: &lt;a href=&#34;https://status.twin.sh/api/v1/endpoints/core_blog-home/statuses&#34;&gt;https://status.twin.sh/api/v1/endpoints/core_blog-home/statuses&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Gzip compression will be used if the &lt;code&gt;Accept-Encoding&lt;/code&gt; HTTP header contains &lt;code&gt;gzip&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The API will return a JSON payload with the &lt;code&gt;Content-Type&lt;/code&gt; response header set to &lt;code&gt;application/json&lt;/code&gt;. No such header is required to query the API.&lt;/p&gt; &#xA;&lt;h3&gt;Installing as binary&lt;/h3&gt; &#xA;&lt;p&gt;You can download Gatus as a binary using the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;go install github.com/TwiN/gatus/v5@latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;High level design overview&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/TwiN/gatus/master/.github/assets/gatus-diagram.jpg&#34; alt=&#34;Gatus diagram&#34;&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>aceberg/WatchYourLAN</title>
    <updated>2024-12-01T01:53:48Z</updated>
    <id>tag:github.com,2024-12-01:/aceberg/WatchYourLAN</id>
    <link href="https://github.com/aceberg/WatchYourLAN" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Lightweight network IP scanner. Can be used to notify about new hosts and monitor host online/offline history&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;a href=&#34;https://github.com/aceberg/WatchYourLAN&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/aceberg/WatchYourLAN/main/assets/logo.png&#34; width=&#34;20&#34;&gt; &lt;/a&gt;WatchYourLAN&lt;/h1&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/aceberg/WatchYourLAN/actions/workflows/main-docker-all.yml&#34;&gt;&lt;img src=&#34;https://github.com/aceberg/WatchYourLAN/actions/workflows/main-docker-all.yml/badge.svg?sanitize=true&#34; alt=&#34;Docker&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/aceberg/WatchYourLAN&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/aceberg/WatchYourLAN&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codeclimate.com/github/aceberg/WatchYourLAN/maintainability&#34;&gt;&lt;img src=&#34;https://api.codeclimate.com/v1/badges/46b17f99edc1726b5d7d/maintainability&#34; alt=&#34;Maintainability&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/aceberg/watchyourlan&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/image-size/aceberg/watchyourlan&#34; alt=&#34;Docker Image Size (latest semver)&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/aceberg/WatchYourLAN/discussions&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/discussions/aceberg/WatchYourLAN&#34; alt=&#34;GitHub Discussions&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Lightweight network IP scanner with web GUI. Features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Send notification when new host is found&lt;/li&gt; &#xA; &lt;li&gt;Monitor hosts online/offline history&lt;/li&gt; &#xA; &lt;li&gt;Keep a list of all hosts in the network&lt;/li&gt; &#xA; &lt;li&gt;Send data to &lt;code&gt;InfluxDB2&lt;/code&gt; to make a &lt;code&gt;Grafana&lt;/code&gt; dashboard&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/aceberg/WatchYourLAN/main/assets/Screenshot_1.png&#34; alt=&#34;Screenshot_1&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;More screenshots&lt;/h2&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Expand&lt;/summary&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/aceberg/WatchYourLAN/main/assets/Screenshot_5.png&#34; alt=&#34;Screenshot_5&#34;&gt;&lt;br&gt; &lt;img src=&#34;https://raw.githubusercontent.com/aceberg/WatchYourLAN/main/assets/Screenshot_2.png&#34; alt=&#34;Screenshot_2&#34;&gt;&lt;br&gt; &lt;img src=&#34;https://raw.githubusercontent.com/aceberg/WatchYourLAN/main/assets/Screenshot_3.png&#34; alt=&#34;Screenshot_3&#34;&gt;&lt;br&gt; &lt;img src=&#34;https://raw.githubusercontent.com/aceberg/WatchYourLAN/main/assets/Screenshot_4.png&#34; alt=&#34;Screenshot_4&#34;&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Quick start&lt;/h2&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Expand&lt;/summary&gt; &#xA; &lt;p&gt;Replace &lt;code&gt;$YOURTIMEZONE&lt;/code&gt; with correct time zone and &lt;code&gt;$YOURIFACE&lt;/code&gt; with network interface you want to scan. Network mode must be &lt;code&gt;host&lt;/code&gt;. Set &lt;code&gt;$DOCKERDATAPATH&lt;/code&gt; for container to save data:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker run --name wyl \&#xA;&#x9;-e &#34;IFACES=$YOURIFACE&#34; \&#xA;&#x9;-e &#34;TZ=$YOURTIMEZONE&#34; \&#xA;&#x9;--network=&#34;host&#34; \&#xA;&#x9;-v $DOCKERDATAPATH/wyl:/data/WatchYourLAN \&#xA;    aceberg/watchyourlan&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Web GUI should be at &lt;a href=&#34;http://localhost:8840&#34;&gt;http://localhost:8840&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Auth&lt;/h2&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Expand&lt;/summary&gt; &#xA; &lt;p&gt;&lt;strong&gt;WatchYourLAN&lt;/strong&gt; does not have built-in auth option. But you can use it with SSO tools like Authelia, or my simple auth app &lt;a href=&#34;https://github.com/aceberg/ForAuth&#34;&gt;ForAuth&lt;/a&gt;.&lt;br&gt; Here is an example &lt;a href=&#34;https://github.com/aceberg/WatchYourLAN/raw/main/docker-compose-auth.yml&#34;&gt;docker-compose-auth.yml&lt;/a&gt;.&lt;/p&gt; &#xA; &lt;blockquote&gt; &#xA;  &lt;p&gt;&lt;span&gt;⚠&lt;/span&gt; &lt;strong&gt;WARNING!&lt;/strong&gt;&lt;br&gt; Please, don&#39;t forget that WYL needs &lt;code&gt;host&lt;/code&gt; network mode to work. So, WYL port will be exposed in this setup. You need to limit access to it with firewall or other measures.&lt;/p&gt; &#xA; &lt;/blockquote&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Install on Linux&lt;/h2&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Expand&lt;/summary&gt; &#xA; &lt;p&gt;All binary packages can be found in &lt;a href=&#34;https://github.com/aceberg/WatchYourLAN/releases/latest&#34;&gt;latest&lt;/a&gt; release. There are &lt;code&gt;.deb&lt;/code&gt;, &lt;code&gt;.rpm&lt;/code&gt;, &lt;code&gt;.apk&lt;/code&gt; (Alpine Linux) and &lt;code&gt;.tar.gz&lt;/code&gt; files.&lt;/p&gt; &#xA; &lt;p&gt;Supported architectures: &lt;code&gt;amd64&lt;/code&gt;, &lt;code&gt;i386&lt;/code&gt;, &lt;code&gt;arm_v5&lt;/code&gt;, &lt;code&gt;arm_v6&lt;/code&gt;, &lt;code&gt;arm_v7&lt;/code&gt;, &lt;code&gt;arm64&lt;/code&gt;.&lt;br&gt; Dependencies: &lt;code&gt;arp-scan&lt;/code&gt;, &lt;code&gt;tzdata&lt;/code&gt;.&lt;/p&gt; &#xA; &lt;p&gt;For &lt;code&gt;amd64&lt;/code&gt; there is a &lt;code&gt;deb&lt;/code&gt; repo &lt;a href=&#34;https://github.com/aceberg/ppa&#34;&gt;available&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Config&lt;/h2&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Expand&lt;/summary&gt; &#xA; &lt;p&gt;Configuration can be done through config file, GUI or environment variables. Variable names is &lt;code&gt;config_v2.yaml&lt;/code&gt; file are the same, but in lowcase.&lt;/p&gt; &#xA; &lt;h3&gt;Basic config&lt;/h3&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th&gt;Variable&lt;/th&gt; &#xA;    &lt;th&gt;Description&lt;/th&gt; &#xA;    &lt;th&gt;Default&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;TZ&lt;/td&gt; &#xA;    &lt;td&gt;Set your timezone for correct time&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;HOST&lt;/td&gt; &#xA;    &lt;td&gt;Listen address&lt;/td&gt; &#xA;    &lt;td&gt;0.0.0.0&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;PORT&lt;/td&gt; &#xA;    &lt;td&gt;Port for web GUI&lt;/td&gt; &#xA;    &lt;td&gt;8840&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;THEME&lt;/td&gt; &#xA;    &lt;td&gt;Any theme name from &lt;a href=&#34;https://bootswatch.com&#34;&gt;https://bootswatch.com&lt;/a&gt; in lowcase or &lt;a href=&#34;https://github.com/aceberg/aceberg-bootswatch-fork&#34;&gt;additional&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;sand&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;COLOR&lt;/td&gt; &#xA;    &lt;td&gt;Background color: light or dark&lt;/td&gt; &#xA;    &lt;td&gt;dark&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;NODEPATH&lt;/td&gt; &#xA;    &lt;td&gt;Path to local node modules&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;SHOUTRRR_URL&lt;/td&gt; &#xA;    &lt;td&gt;WatchYourLAN uses &lt;a href=&#34;https://github.com/containrrr/shoutrrr&#34;&gt;Shoutrrr&lt;/a&gt; to send notifications. It is already integrated, just needs a correct URL. Examples for Discord, Email, Gotify, Matrix, Ntfy, Pushover, Slack, Telegram, Generic Webhook and etc are &lt;a href=&#34;https://containrrr.dev/shoutrrr/v0.8/services/gotify/&#34;&gt;here&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA; &lt;h3&gt;Scan settings&lt;/h3&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th&gt;Variable&lt;/th&gt; &#xA;    &lt;th&gt;Description&lt;/th&gt; &#xA;    &lt;th&gt;Default&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;IFACES&lt;/td&gt; &#xA;    &lt;td&gt;Interfaces to scan. Could be one or more, separated by space. See &lt;a href=&#34;https://github.com/aceberg/WatchYourLAN/raw/main/docs/VLAN_ARP_SCAN.md&#34;&gt;docs/VLAN_ARP_SCAN.md&lt;/a&gt;.&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;TIMEOUT&lt;/td&gt; &#xA;    &lt;td&gt;Time between scans (seconds)&lt;/td&gt; &#xA;    &lt;td&gt;120&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;ARP_ARGS&lt;/td&gt; &#xA;    &lt;td&gt;Arguments for &lt;code&gt;arp-scan&lt;/code&gt;. Enable &lt;code&gt;debug&lt;/code&gt; log level to see resulting command. (Example: &lt;code&gt;-r 1&lt;/code&gt;). See &lt;a href=&#34;https://github.com/aceberg/WatchYourLAN/raw/main/docs/VLAN_ARP_SCAN.md&#34;&gt;docs/VLAN_ARP_SCAN.md&lt;/a&gt;.&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;ARP_STRS ARP_STRS_JOINED&lt;/td&gt; &#xA;    &lt;td&gt;See &lt;a href=&#34;https://github.com/aceberg/WatchYourLAN/raw/main/docs/VLAN_ARP_SCAN.md&#34;&gt;docs/VLAN_ARP_SCAN.md&lt;/a&gt;.&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;LOG_LEVEL&lt;/td&gt; &#xA;    &lt;td&gt;Log level: &lt;code&gt;debug&lt;/code&gt;, &lt;code&gt;info&lt;/code&gt;, &lt;code&gt;warn&lt;/code&gt; or &lt;code&gt;error&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;info&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;TRIM_HIST&lt;/td&gt; &#xA;    &lt;td&gt;Remove history after (hours)&lt;/td&gt; &#xA;    &lt;td&gt;48&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;HIST_IN_DB&lt;/td&gt; &#xA;    &lt;td&gt;Store History in DB - if &lt;code&gt;false&lt;/code&gt;, the History will be stored only in memory and will be lost on app restart. Though, it will keep the app DB smaller (and InfluxDB is recommended for long term History storage)&lt;/td&gt; &#xA;    &lt;td&gt;false&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;USE_DB&lt;/td&gt; &#xA;    &lt;td&gt;Either &lt;code&gt;sqlite&lt;/code&gt; or &lt;code&gt;postgres&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;sqlite&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;PG_CONNECT&lt;/td&gt; &#xA;    &lt;td&gt;Address to connect to PostgreSQL. (Example: &lt;code&gt;postgres://username:password@192.168.0.1:5432/dbname?sslmode=disable&lt;/code&gt;). Full list of URL parameters &lt;a href=&#34;https://pkg.go.dev/github.com/lib/pq#hdr-Connection_String_Parameters&#34;&gt;here&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA; &lt;h3&gt;InfluxDB2 config&lt;/h3&gt; &#xA; &lt;p&gt;This config matches Grafana&#39;s config for InfluxDB data source&lt;/p&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th&gt;Variable&lt;/th&gt; &#xA;    &lt;th&gt;Description&lt;/th&gt; &#xA;    &lt;th&gt;Default&lt;/th&gt; &#xA;    &lt;th&gt;Example&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;INFLUX_ENABLE&lt;/td&gt; &#xA;    &lt;td&gt;Enable export to InfluxDB2&lt;/td&gt; &#xA;    &lt;td&gt;false&lt;/td&gt; &#xA;    &lt;td&gt;true&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;INFLUX_SKIP_TLS&lt;/td&gt; &#xA;    &lt;td&gt;Skip TLS Verify&lt;/td&gt; &#xA;    &lt;td&gt;false&lt;/td&gt; &#xA;    &lt;td&gt;true&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;INFLUX_ADDR&lt;/td&gt; &#xA;    &lt;td&gt;Address:port of InfluxDB2 server&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://192.168.2.3:8086/&#34;&gt;https://192.168.2.3:8086/&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;INFLUX_BUCKET&lt;/td&gt; &#xA;    &lt;td&gt;InfluxDB2 bucket&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;test&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;INFLUX_ORG&lt;/td&gt; &#xA;    &lt;td&gt;InfluxDB2 org&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;home&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;INFLUX_TOKEN&lt;/td&gt; &#xA;    &lt;td&gt;Secret token, generated by InfluxDB2&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Config file&lt;/h2&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Expand&lt;/summary&gt; &#xA; &lt;p&gt;Config file name is &lt;code&gt;config_v2.yaml&lt;/code&gt;. Example:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;arp_args: &#34;&#34;&#xA;color: dark&#xA;hist_in_db: false&#xA;host: 0.0.0.0&#xA;ifaces: enp4s0&#xA;influx_addr: &#34;&#34;&#xA;influx_bucket: &#34;&#34;&#xA;influx_enable: false&#xA;influx_org: &#34;&#34;&#xA;influx_skip_tls: false&#xA;influx_token: &#34;&#34;&#xA;log_level: info&#xA;nodepath: &#34;&#34;&#xA;pg_connect: &#34;&#34;&#xA;port: &#34;8840&#34;&#xA;shoutrrr_url: &#34;gotify://192.168.0.1:8083/AwQqpAae.rrl5Ob/?title=Unknown host detected&amp;amp;DisableTLS=yes&#34;&#xA;theme: sand&#xA;timeout: 60&#xA;trim_hist: 48&#xA;use_db: sqlite&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Options&lt;/h2&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Expand&lt;/summary&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th&gt;Key&lt;/th&gt; &#xA;    &lt;th&gt;Description&lt;/th&gt; &#xA;    &lt;th&gt;Default&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;-d&lt;/td&gt; &#xA;    &lt;td&gt;Path to config dir&lt;/td&gt; &#xA;    &lt;td&gt;/data/WatchYourLAN&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;-n&lt;/td&gt; &#xA;    &lt;td&gt;Path to node modules (see below)&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Local network only&lt;/h2&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Expand&lt;/summary&gt; &#xA; &lt;p&gt;By default, this app pulls themes, icons and fonts from the internet. But, in some cases, it may be useful to have an independent from global network setup. I created a separate &lt;a href=&#34;https://github.com/aceberg/my-dockerfiles/tree/main/node-bootstrap&#34;&gt;image&lt;/a&gt; with all necessary modules and fonts. Run with Docker:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker run --name node-bootstrap          \&#xA;    -p 8850:8850                          \&#xA;    aceberg/node-bootstrap&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker run --name wyl \&#xA;&#x9;-e &#34;IFACES=$YOURIFACE&#34; \&#xA;&#x9;-e &#34;TZ=$YOURTIMEZONE&#34; \&#xA;&#x9;--network=&#34;host&#34; \&#xA;&#x9;-v $DOCKERDATAPATH/wyl:/data/WatchYourLAN \&#xA;    aceberg/watchyourlan -n &#34;http://$YOUR_IP:8850&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Or use &lt;a href=&#34;https://raw.githubusercontent.com/aceberg/WatchYourLAN/main/docker-compose-local.yml&#34;&gt;docker-compose&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;API &amp;amp; Integrations&lt;/h2&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Expand&lt;/summary&gt; &#xA; &lt;h3&gt;API&lt;/h3&gt; &#xA; &lt;p&gt;Moved to &lt;a href=&#34;https://github.com/aceberg/WatchYourLAN/raw/main/docs/API.md&#34;&gt;docs/API.md&lt;/a&gt;&lt;/p&gt; &#xA; &lt;h3&gt;Integrations&lt;/h3&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/drwahl/py-watchyourlanclient&#34;&gt;Python API client&lt;/a&gt; by &lt;a href=&#34;https://github.com/drwahl&#34;&gt;drwahl&lt;/a&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Thanks&lt;/h2&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Expand&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;All go packages listed in &lt;a href=&#34;https://github.com/aceberg/WatchYourLAN/network/dependencies&#34;&gt;dependencies&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Favicon and logo: &lt;a href=&#34;https://www.flaticon.com/free-icons/access-point&#34;&gt;Access point icons created by Freepik - Flaticon&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://getbootstrap.com/&#34;&gt;Bootstrap&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Themes: &lt;a href=&#34;https://bootswatch.com&#34;&gt;Free themes for Bootstrap&lt;/a&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt;</summary>
  </entry>
</feed>