<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-01-01T01:51:49Z</updated>
  <subtitle>Monthly Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>FiloSottile/age</title>
    <updated>2023-01-01T01:51:49Z</updated>
    <id>tag:github.com,2023-01-01:/FiloSottile/age</id>
    <link href="https://github.com/FiloSottile/age" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A simple, modern and secure encryption tool (and Go library) with small explicit keys, no config options, and UNIX-style composability.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt;&lt;img alt=&#34;The age logo, an wireframe of St. Peters dome in Rome, with the text: age, file encryption&#34; width=&#34;600&#34; src=&#34;https://user-images.githubusercontent.com/1225294/132245842-fda4da6a-1cea-4738-a3da-2dc860861c98.png&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://pkg.go.dev/filippo.io/age&#34;&gt;&lt;img src=&#34;https://pkg.go.dev/badge/filippo.io/age.svg?sanitize=true&#34; alt=&#34;Go Reference&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://filippo.io/age/age.1&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/age(1)-man%20page-lightgrey&#34; alt=&#34;man page&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://age-encryption.org/v1&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/%C2%A7%23-specification-blueviolet&#34; alt=&#34;C2SP specification&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;age is a simple, modern and secure file encryption tool, format, and Go library.&lt;/p&gt; &#xA;&lt;p&gt;It features small explicit keys, no config options, and UNIX-style composability.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ age-keygen -o key.txt&#xA;Public key: age1ql3z7hjy54pw3hyww5ayyfg7zqgvc7w3j2elw8zmrj2kg5sfn9aqmcac8p&#xA;$ tar cvz ~/data | age -r age1ql3z7hjy54pw3hyww5ayyfg7zqgvc7w3j2elw8zmrj2kg5sfn9aqmcac8p &amp;gt; data.tar.gz.age&#xA;$ age --decrypt -i key.txt data.tar.gz.age &amp;gt; data.tar.gz&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;üìú The format specification is at &lt;a href=&#34;https://age-encryption.org/v1&#34;&gt;age-encryption.org/v1&lt;/a&gt;. age was designed by &lt;a href=&#34;https://twitter.com/Benjojo12&#34;&gt;@Benjojo12&lt;/a&gt; and &lt;a href=&#34;https://twitter.com/FiloSottile&#34;&gt;@FiloSottile&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;üì¨ Follow the maintenance of this project by subscribing to &lt;a href=&#34;https://filippo.io/newsletter&#34;&gt;Maintainer Dispatches&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;p&gt;ü¶Ä An alternative interoperable Rust implementation is available at &lt;a href=&#34;https://github.com/str4d/rage&#34;&gt;github.com/str4d/rage&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;üîë Hardware PIV tokens such as YubiKeys are supported through the &lt;a href=&#34;https://github.com/str4d/age-plugin-yubikey&#34;&gt;age-plugin-yubikey&lt;/a&gt; plugin.&lt;/p&gt; &#xA;&lt;p&gt;üí¨ The author pronounces it &lt;code&gt;[a…°eÃû]&lt;/code&gt;, like the Italian &lt;a href=&#34;https://translate.google.com/?sl=it&amp;amp;text=aghe&#34;&gt;‚Äúaghe‚Äù&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Homebrew (macOS or Linux)&lt;/td&gt; &#xA;   &lt;td&gt; &lt;code&gt;brew install age&lt;/code&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;MacPorts&lt;/td&gt; &#xA;   &lt;td&gt; &lt;code&gt;port install age&lt;/code&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Alpine Linux v3.15+&lt;/td&gt; &#xA;   &lt;td&gt; &lt;code&gt;apk add age&lt;/code&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Arch Linux&lt;/td&gt; &#xA;   &lt;td&gt; &lt;code&gt;pacman -S age&lt;/code&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Debian 11+ (Bullseye)&lt;/td&gt; &#xA;   &lt;td&gt; &lt;code&gt;apt install age/bullseye-backports&lt;/code&gt; (&lt;a href=&#34;https://backports.debian.org/Instructions/#index2h2&#34;&gt;enable backports&lt;/a&gt; for age v1.0.0+) &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Fedora 33+&lt;/td&gt; &#xA;   &lt;td&gt; &lt;code&gt;dnf install age&lt;/code&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Gentoo Linux&lt;/td&gt; &#xA;   &lt;td&gt; &lt;code&gt;emerge app-crypt/age&lt;/code&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;NixOS / Nix&lt;/td&gt; &#xA;   &lt;td&gt; &lt;code&gt;nix-env -i age&lt;/code&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;openSUSE Tumbleweed&lt;/td&gt; &#xA;   &lt;td&gt; &lt;code&gt;zypper install age&lt;/code&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Ubuntu 22.04+&lt;/td&gt; &#xA;   &lt;td&gt; &lt;code&gt;apt install age&lt;/code&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Void Linux&lt;/td&gt; &#xA;   &lt;td&gt; &lt;code&gt;xbps-install age&lt;/code&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;FreeBSD&lt;/td&gt; &#xA;   &lt;td&gt; &lt;code&gt;pkg install age&lt;/code&gt; (security/age) &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;OpenBSD 6.7+&lt;/td&gt; &#xA;   &lt;td&gt; &lt;code&gt;pkg_add age&lt;/code&gt; (security/age) &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Chocolatey (Windows)&lt;/td&gt; &#xA;   &lt;td&gt; &lt;code&gt;choco install age.portable&lt;/code&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Scoop (Windows)&lt;/td&gt; &#xA;   &lt;td&gt; &lt;code&gt;scoop bucket add extras; scoop install age&lt;/code&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;p&gt;On Windows, Linux, macOS, and FreeBSD you can use the pre-built binaries.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;https://dl.filippo.io/age/latest?for=linux/amd64&#xA;https://dl.filippo.io/age/v1.0.0-rc.1?for=darwin/arm64&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If your system has &lt;a href=&#34;https://go.dev/dl/&#34;&gt;a supported version of Go&lt;/a&gt;, you can build from source.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;go install filippo.io/age/cmd/...@latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Help from new packagers is very welcome.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;For the full documentation, read &lt;a href=&#34;https://filippo.io/age/age.1&#34;&gt;the age(1) man page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Usage:&#xA;    age [--encrypt] (-r RECIPIENT | -R PATH)... [--armor] [-o OUTPUT] [INPUT]&#xA;    age [--encrypt] --passphrase [--armor] [-o OUTPUT] [INPUT]&#xA;    age --decrypt [-i PATH]... [-o OUTPUT] [INPUT]&#xA;&#xA;Options:&#xA;    -e, --encrypt               Encrypt the input to the output. Default if omitted.&#xA;    -d, --decrypt               Decrypt the input to the output.&#xA;    -o, --output OUTPUT         Write the result to the file at path OUTPUT.&#xA;    -a, --armor                 Encrypt to a PEM encoded format.&#xA;    -p, --passphrase            Encrypt with a passphrase.&#xA;    -r, --recipient RECIPIENT   Encrypt to the specified RECIPIENT. Can be repeated.&#xA;    -R, --recipients-file PATH  Encrypt to recipients listed at PATH. Can be repeated.&#xA;    -i, --identity PATH         Use the identity file at PATH. Can be repeated.&#xA;&#xA;INPUT defaults to standard input, and OUTPUT defaults to standard output.&#xA;If OUTPUT exists, it will be overwritten.&#xA;&#xA;RECIPIENT can be an age public key generated by age-keygen (&#34;age1...&#34;)&#xA;or an SSH public key (&#34;ssh-ed25519 AAAA...&#34;, &#34;ssh-rsa AAAA...&#34;).&#xA;&#xA;Recipient files contain one or more recipients, one per line. Empty lines&#xA;and lines starting with &#34;#&#34; are ignored as comments. &#34;-&#34; may be used to&#xA;read recipients from standard input.&#xA;&#xA;Identity files contain one or more secret keys (&#34;AGE-SECRET-KEY-1...&#34;),&#xA;one per line, or an SSH key. Empty lines and lines starting with &#34;#&#34; are&#xA;ignored as comments. Passphrase encrypted age files can be used as&#xA;identity files. Multiple key files can be provided, and any unused ones&#xA;will be ignored. &#34;-&#34; may be used to read identities from standard input.&#xA;&#xA;When --encrypt is specified explicitly, -i can also be used to encrypt to an&#xA;identity file symmetrically, instead or in addition to normal recipients.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Multiple recipients&lt;/h3&gt; &#xA;&lt;p&gt;Files can be encrypted to multiple recipients by repeating &lt;code&gt;-r/--recipient&lt;/code&gt;. Every recipient will be able to decrypt the file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ age -o example.jpg.age -r age1ql3z7hjy54pw3hyww5ayyfg7zqgvc7w3j2elw8zmrj2kg5sfn9aqmcac8p \&#xA;    -r age1lggyhqrw2nlhcxprm67z43rta597azn8gknawjehu9d9dl0jq3yqqvfafg example.jpg&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Recipient files&lt;/h4&gt; &#xA;&lt;p&gt;Multiple recipients can also be listed one per line in one or more files passed with the &lt;code&gt;-R/--recipients-file&lt;/code&gt; flag.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cat recipients.txt&#xA;# Alice&#xA;age1ql3z7hjy54pw3hyww5ayyfg7zqgvc7w3j2elw8zmrj2kg5sfn9aqmcac8p&#xA;# Bob&#xA;age1lggyhqrw2nlhcxprm67z43rta597azn8gknawjehu9d9dl0jq3yqqvfafg&#xA;$ age -R recipients.txt example.jpg &amp;gt; example.jpg.age&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If the argument to &lt;code&gt;-R&lt;/code&gt; (or &lt;code&gt;-i&lt;/code&gt;) is &lt;code&gt;-&lt;/code&gt;, the file is read from standard input.&lt;/p&gt; &#xA;&lt;h3&gt;Passphrases&lt;/h3&gt; &#xA;&lt;p&gt;Files can be encrypted with a passphrase by using &lt;code&gt;-p/--passphrase&lt;/code&gt;. By default age will automatically generate a secure passphrase. Passphrase protected files are automatically detected at decrypt time.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ age -p secrets.txt &amp;gt; secrets.txt.age&#xA;Enter passphrase (leave empty to autogenerate a secure one):&#xA;Using the autogenerated passphrase &#34;release-response-step-brand-wrap-ankle-pair-unusual-sword-train&#34;.&#xA;$ age -d secrets.txt.age &amp;gt; secrets.txt&#xA;Enter passphrase:&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Passphrase-protected key files&lt;/h3&gt; &#xA;&lt;p&gt;If an identity file passed to &lt;code&gt;-i&lt;/code&gt; is a passphrase encrypted age file, it will be automatically decrypted.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ age-keygen | age -p &amp;gt; key.age&#xA;Public key: age1yhm4gctwfmrpz87tdslm550wrx6m79y9f2hdzt0lndjnehwj0ukqrjpyx5&#xA;Enter passphrase (leave empty to autogenerate a secure one):&#xA;Using the autogenerated passphrase &#34;hip-roast-boring-snake-mention-east-wasp-honey-input-actress&#34;.&#xA;$ age -r age1yhm4gctwfmrpz87tdslm550wrx6m79y9f2hdzt0lndjnehwj0ukqrjpyx5 secrets.txt &amp;gt; secrets.txt.age&#xA;$ age -d -i key.age secrets.txt.age &amp;gt; secrets.txt&#xA;Enter passphrase for identity file &#34;key.age&#34;:&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Passphrase-protected identity files are not necessary for most use cases, where access to the encrypted identity file implies access to the whole system. However, they can be useful if the identity file is stored remotely.&lt;/p&gt; &#xA;&lt;h3&gt;SSH keys&lt;/h3&gt; &#xA;&lt;p&gt;As a convenience feature, age also supports encrypting to &lt;code&gt;ssh-rsa&lt;/code&gt; and &lt;code&gt;ssh-ed25519&lt;/code&gt; SSH public keys, and decrypting with the respective private key file. (&lt;code&gt;ssh-agent&lt;/code&gt; is not supported.)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ age -R ~/.ssh/id_ed25519.pub example.jpg &amp;gt; example.jpg.age&#xA;$ age -d -i ~/.ssh/id_ed25519 example.jpg.age &amp;gt; example.jpg&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that SSH key support employs more complex cryptography, and embeds a public key tag in the encrypted file, making it possible to track files that are encrypted to a specific public key.&lt;/p&gt; &#xA;&lt;h4&gt;Encrypting to a GitHub user&lt;/h4&gt; &#xA;&lt;p&gt;Combining SSH key support and &lt;code&gt;-R&lt;/code&gt;, you can easily encrypt a file to the SSH keys listed on a GitHub profile.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ curl https://github.com/benjojo.keys | age -R - example.jpg &amp;gt; example.jpg.age&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Keep in mind that people might not protect SSH keys long-term, since they are revokable when used only for authentication, and that SSH keys held on YubiKeys can&#39;t be used to decrypt files.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>thangchung/go-coffeeshop</title>
    <updated>2023-01-01T01:51:49Z</updated>
    <id>tag:github.com,2023-01-01:/thangchung/go-coffeeshop</id>
    <link href="https://github.com/thangchung/go-coffeeshop" rel="alternate"></link>
    <summary type="html">&lt;p&gt;‚òï A practical event-driven microservices demo built with Golang. Nomad, Consul Connect, Vault, and Terraform for deployment&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;go-coffeeshop&lt;/h1&gt; &#xA;&lt;p&gt;An event-driven microservices coffee shop application has been written in Golang and deployed using Nomad, Consul Connect, Vault, and Terraform.&lt;/p&gt; &#xA;&lt;p&gt;Other versions in .NET/C# can be found at:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/thangchung/coffeeshop-on-nomad&#34;&gt;.NET CoffeeShop with Microservices approach&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/thangchung/coffeeshop-modular&#34;&gt;.NET CoffeeShop with Modular Monolith approach&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Technical stack&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Backend building blocks &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/grpc-ecosystem/grpc-gateway&#34;&gt;grpc-ecosystem/grpc-gateway/v2&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/labstack/echo&#34;&gt;labstack/echo/v4&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/rabbitmq/amqp091-go&#34;&gt;rabbitmq/amqp091-go&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/kyleconroy/sqlc&#34;&gt;kyleconroy/sqlc&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thangchung/go-coffeeshop/main/github.com/lib/pq&#34;&gt;pq&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/golang-migrate/migrate&#34;&gt;golang-migrate/migrate/v4&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Utils &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thangchung/go-coffeeshop/main/github.com/google/wire&#34;&gt;google/wire&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://github.com/ilyakaznacheev/cleanenv&#34;&gt;ilyakaznacheev/cleanenv&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;golang.org/x/exp/slog &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://github.com/sirupsen/logrus&#34;&gt;sirupsen/logrus&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://github.com/samber/lo&#34;&gt;samber/lo&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thangchung/go-coffeeshop/main/go.uber.org/automaxprocs/maxprocs&#34;&gt;automaxprocs/maxprocs&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thangchung/go-coffeeshop/main/github.com/stretchr/testify&#34;&gt;stretchr/testify&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;golang/glog&lt;/li&gt; &#xA;     &lt;li&gt;google/uuid&lt;/li&gt; &#xA;     &lt;li&gt;google.golang.org/genproto&lt;/li&gt; &#xA;     &lt;li&gt;google.golang.org/grpc&lt;/li&gt; &#xA;     &lt;li&gt;google.golang.org/protobuf&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Infrastructure &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Postgres, RabbitMQ&lt;/li&gt; &#xA;   &lt;li&gt;Hashicorp Nomad, Consul (Connect), Vault, Terraform&lt;/li&gt; &#xA;   &lt;li&gt;docker and docker-compose&lt;/li&gt; &#xA;   &lt;li&gt;devcontainer for reproducible development environment&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;CoffeeShop - Choreography Saga&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/thangchung/go-coffeeshop/main/docs/coffeeshop.svg?sanitize=true&#34; alt=&#34;coffeeshop&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Services&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;No.&lt;/th&gt; &#xA;   &lt;th&gt;Service&lt;/th&gt; &#xA;   &lt;th&gt;URI&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;grpc-gateway&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://localhost:5000&#34;&gt;http://localhost:5000&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;2&lt;/td&gt; &#xA;   &lt;td&gt;product service&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://localhost:5001&#34;&gt;http://localhost:5001&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;3&lt;/td&gt; &#xA;   &lt;td&gt;counter service&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://localhost:5002&#34;&gt;http://localhost:5002&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;4&lt;/td&gt; &#xA;   &lt;td&gt;barista service&lt;/td&gt; &#xA;   &lt;td&gt;worker only&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;5&lt;/td&gt; &#xA;   &lt;td&gt;kitchen service&lt;/td&gt; &#xA;   &lt;td&gt;worker only&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;6&lt;/td&gt; &#xA;   &lt;td&gt;web&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://localhost:8888&#34;&gt;http://localhost:8888&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Starting project&lt;/h2&gt; &#xA;&lt;p&gt;Jump into &lt;a href=&#34;https://code.visualstudio.com/docs/devcontainers/containers&#34;&gt;&lt;code&gt;.devcontainer&lt;/code&gt;&lt;/a&gt;, then&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; make docker-compose&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;From &lt;code&gt;vscode&lt;/code&gt; =&amp;gt; Press F1 =&amp;gt; Type &lt;code&gt;Simple Browser View&lt;/code&gt; =&amp;gt; Choose it and enter &lt;a href=&#34;http://localhost:8888&#34;&gt;http://localhost:8888&lt;/a&gt;. Enjoy!!!&lt;/p&gt; &#xA;&lt;h2&gt;Screenshots&lt;/h2&gt; &#xA;&lt;h3&gt;Home screen&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/thangchung/go-coffeeshop/main/docs/home_screen.png&#34; alt=&#34;home_screen&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Payment screen&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/thangchung/go-coffeeshop/main/docs/payment_screen.png&#34; alt=&#34;payment_screen&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Order list screen&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/thangchung/go-coffeeshop/main/docs/order_list_screen.png&#34; alt=&#34;order_list_screen&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;HashiCorp stack deployment&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/thangchung/go-coffeeshop/main/docs/coffeeshop_hashicorp.svg?sanitize=true&#34; alt=&#34;coffeeshop_hashicorp&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The details of how to run it can be find at &lt;a href=&#34;https://raw.githubusercontent.com/thangchung/go-coffeeshop/main/build/README.md&#34;&gt;deployment with Nomad, Consult Connect and Vault&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;h3&gt;Clean Domain-driven Design&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/thangchung/go-coffeeshop/main/docs/clean_ddd.svg?sanitize=true&#34; alt=&#34;clean_ddd&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Generate dependency injection instances with wire&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; make wire&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Generate code with sqlc&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; make sqlc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Debug Apps&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/thangchung/go-coffeeshop/wiki/Golang#debug-app-in-monorepo&#34;&gt;Debug golang app in monorepo&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Trouble shooting&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/thangchung/go-coffeeshop/wiki#trouble-shooting&#34;&gt;Development project trouble shooting&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Roadmap&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;‚úÖ Enhance project structure with DDD patterns&lt;/li&gt; &#xA; &lt;li&gt;Add testing&lt;/li&gt; &#xA; &lt;li&gt;Add and integrate with observability libs and tools&lt;/li&gt; &#xA; &lt;li&gt;Add user identity management (authentication and authorization)&lt;/li&gt; &#xA; &lt;li&gt;Add resiliency&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/golang-standards/project-layout&#34;&gt;project-layout&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://peter.bourgon.org/go-best-practices-2016/#repository-structure&#34;&gt;repository-structure&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/thockin/go-build-template&#34;&gt;go-build-template&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/evrone/go-clean-template&#34;&gt;go-clean-template&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/emsifa/tailwind-pos&#34;&gt;emsifa/tailwind-pos&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>hibiken/asynq</title>
    <updated>2023-01-01T01:51:49Z</updated>
    <id>tag:github.com,2023-01-01:/hibiken/asynq</id>
    <link href="https://github.com/hibiken/asynq" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Simple, reliable, and efficient distributed task queue in Go&lt;/p&gt;&lt;hr&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/11155743/114697792-ffbfa580-9d26-11eb-8e5b-33bef69476dc.png&#34; alt=&#34;Asynq logo&#34; width=&#34;360px&#34;&gt; &#xA;&lt;h1&gt;Simple, reliable &amp;amp; efficient distributed task queue in Go&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://godoc.org/github.com/hibiken/asynq&#34;&gt;&lt;img src=&#34;https://godoc.org/github.com/hibiken/asynq?status.svg?sanitize=true&#34; alt=&#34;GoDoc&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/hibiken/asynq&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/hibiken/asynq&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://github.com/hibiken/asynq/workflows/build/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt; &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-MIT-green.svg?sanitize=true&#34; alt=&#34;License: MIT&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitter.im/go-asynq/community&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/go-asynq/gitter.svg?sanitize=true&#34; alt=&#34;Gitter chat&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Asynq is a Go library for queueing tasks and processing them asynchronously with workers. It&#39;s backed by &lt;a href=&#34;https://redis.io/&#34;&gt;Redis&lt;/a&gt; and is designed to be scalable yet easy to get started.&lt;/p&gt; &#xA;&lt;p&gt;Highlevel overview of how Asynq works:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Client puts tasks on a queue&lt;/li&gt; &#xA; &lt;li&gt;Server pulls tasks off queues and starts a worker goroutine for each task&lt;/li&gt; &#xA; &lt;li&gt;Tasks are processed concurrently by multiple workers&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Task queues are used as a mechanism to distribute work across multiple machines. A system can consist of multiple worker servers and brokers, giving way to high availability and horizontal scaling.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example use case&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/11155743/116358505-656f5f80-a806-11eb-9c16-94e49dab0f99.jpg&#34; alt=&#34;Task Queue Diagram&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Guaranteed &lt;a href=&#34;https://www.cloudcomputingpatterns.org/at_least_once_delivery/&#34;&gt;at least one execution&lt;/a&gt; of a task&lt;/li&gt; &#xA; &lt;li&gt;Scheduling of tasks&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hibiken/asynq/wiki/Task-Retry&#34;&gt;Retries&lt;/a&gt; of failed tasks&lt;/li&gt; &#xA; &lt;li&gt;Automatic recovery of tasks in the event of a worker crash&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hibiken/asynq/wiki/Queue-Priority#weighted-priority&#34;&gt;Weighted priority queues&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hibiken/asynq/wiki/Queue-Priority#strict-priority&#34;&gt;Strict priority queues&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Low latency to add a task since writes are fast in Redis&lt;/li&gt; &#xA; &lt;li&gt;De-duplication of tasks using &lt;a href=&#34;https://github.com/hibiken/asynq/wiki/Unique-Tasks&#34;&gt;unique option&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Allow &lt;a href=&#34;https://github.com/hibiken/asynq/wiki/Task-Timeout-and-Cancelation&#34;&gt;timeout and deadline per task&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Allow &lt;a href=&#34;https://github.com/hibiken/asynq/wiki/Task-aggregation&#34;&gt;aggregating group of tasks&lt;/a&gt; to batch multiple successive operations&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hibiken/asynq/wiki/Handler-Deep-Dive&#34;&gt;Flexible handler interface with support for middlewares&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hibiken/asynq/master/tools/asynq/README.md#pause&#34;&gt;Ability to pause queue&lt;/a&gt; to stop processing tasks from the queue&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hibiken/asynq/wiki/Periodic-Tasks&#34;&gt;Periodic Tasks&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hibiken/asynq/wiki/Redis-Cluster&#34;&gt;Support Redis Cluster&lt;/a&gt; for automatic sharding and high availability&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hibiken/asynq/wiki/Automatic-Failover&#34;&gt;Support Redis Sentinels&lt;/a&gt; for high availability&lt;/li&gt; &#xA; &lt;li&gt;Integration with &lt;a href=&#34;https://prometheus.io/&#34;&gt;Prometheus&lt;/a&gt; to collect and visualize queue metrics&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hibiken/asynq/master/#web-ui&#34;&gt;Web UI&lt;/a&gt; to inspect and remote-control queues and tasks&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hibiken/asynq/master/#command-line-tool&#34;&gt;CLI&lt;/a&gt; to inspect and remote-control queues and tasks&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Stability and Compatibility&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Status&lt;/strong&gt;: The library is currently undergoing &lt;strong&gt;heavy development&lt;/strong&gt; with frequent, breaking API changes.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;‚òùÔ∏è &lt;strong&gt;Important Note&lt;/strong&gt;: Current major version is zero (&lt;code&gt;v0.x.x&lt;/code&gt;) to accomodate rapid development and fast iteration while getting early feedback from users (&lt;em&gt;feedback on APIs are appreciated!&lt;/em&gt;). The public API could change without a major version update before &lt;code&gt;v1.0.0&lt;/code&gt; release.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Quickstart&lt;/h2&gt; &#xA;&lt;p&gt;Make sure you have Go installed (&lt;a href=&#34;https://golang.org/dl/&#34;&gt;download&lt;/a&gt;). Version &lt;code&gt;1.14&lt;/code&gt; or higher is required.&lt;/p&gt; &#xA;&lt;p&gt;Initialize your project by creating a folder and then running &lt;code&gt;go mod init github.com/your/repo&lt;/code&gt; (&lt;a href=&#34;https://blog.golang.org/using-go-modules&#34;&gt;learn more&lt;/a&gt;) inside the folder. Then install Asynq library with the &lt;a href=&#34;https://golang.org/cmd/go/#hdr-Add_dependencies_to_current_module_and_install_them&#34;&gt;&lt;code&gt;go get&lt;/code&gt;&lt;/a&gt; command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;go get -u github.com/hibiken/asynq&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Make sure you&#39;re running a Redis server locally or from a &lt;a href=&#34;https://hub.docker.com/_/redis&#34;&gt;Docker&lt;/a&gt; container. Version &lt;code&gt;4.0&lt;/code&gt; or higher is required.&lt;/p&gt; &#xA;&lt;p&gt;Next, write a package that encapsulates task creation and task handling.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package tasks&#xA;&#xA;import (&#xA;    &#34;context&#34;&#xA;    &#34;encoding/json&#34;&#xA;    &#34;fmt&#34;&#xA;    &#34;log&#34;&#xA;    &#34;time&#34;&#xA;    &#34;github.com/hibiken/asynq&#34;&#xA;)&#xA;&#xA;// A list of task types.&#xA;const (&#xA;    TypeEmailDelivery   = &#34;email:deliver&#34;&#xA;    TypeImageResize     = &#34;image:resize&#34;&#xA;)&#xA;&#xA;type EmailDeliveryPayload struct {&#xA;    UserID     int&#xA;    TemplateID string&#xA;}&#xA;&#xA;type ImageResizePayload struct {&#xA;    SourceURL string&#xA;}&#xA;&#xA;//----------------------------------------------&#xA;// Write a function NewXXXTask to create a task.&#xA;// A task consists of a type and a payload.&#xA;//----------------------------------------------&#xA;&#xA;func NewEmailDeliveryTask(userID int, tmplID string) (*asynq.Task, error) {&#xA;    payload, err := json.Marshal(EmailDeliveryPayload{UserID: userID, TemplateID: tmplID})&#xA;    if err != nil {&#xA;        return nil, err&#xA;    }&#xA;    return asynq.NewTask(TypeEmailDelivery, payload), nil&#xA;}&#xA;&#xA;func NewImageResizeTask(src string) (*asynq.Task, error) {&#xA;    payload, err := json.Marshal(ImageResizePayload{SourceURL: src})&#xA;    if err != nil {&#xA;        return nil, err&#xA;    }&#xA;    // task options can be passed to NewTask, which can be overridden at enqueue time.&#xA;    return asynq.NewTask(TypeImageResize, payload, asynq.MaxRetry(5), asynq.Timeout(20 * time.Minute)), nil&#xA;}&#xA;&#xA;//---------------------------------------------------------------&#xA;// Write a function HandleXXXTask to handle the input task.&#xA;// Note that it satisfies the asynq.HandlerFunc interface.&#xA;//&#xA;// Handler doesn&#39;t need to be a function. You can define a type&#xA;// that satisfies asynq.Handler interface. See examples below.&#xA;//---------------------------------------------------------------&#xA;&#xA;func HandleEmailDeliveryTask(ctx context.Context, t *asynq.Task) error {&#xA;    var p EmailDeliveryPayload&#xA;    if err := json.Unmarshal(t.Payload(), &amp;amp;p); err != nil {&#xA;        return fmt.Errorf(&#34;json.Unmarshal failed: %v: %w&#34;, err, asynq.SkipRetry)&#xA;    }&#xA;    log.Printf(&#34;Sending Email to User: user_id=%d, template_id=%s&#34;, p.UserID, p.TemplateID)&#xA;    // Email delivery code ...&#xA;    return nil&#xA;}&#xA;&#xA;// ImageProcessor implements asynq.Handler interface.&#xA;type ImageProcessor struct {&#xA;    // ... fields for struct&#xA;}&#xA;&#xA;func (processor *ImageProcessor) ProcessTask(ctx context.Context, t *asynq.Task) error {&#xA;    var p ImageResizePayload&#xA;    if err := json.Unmarshal(t.Payload(), &amp;amp;p); err != nil {&#xA;        return fmt.Errorf(&#34;json.Unmarshal failed: %v: %w&#34;, err, asynq.SkipRetry)&#xA;    }&#xA;    log.Printf(&#34;Resizing image: src=%s&#34;, p.SourceURL)&#xA;    // Image resizing code ...&#xA;    return nil&#xA;}&#xA;&#xA;func NewImageProcessor() *ImageProcessor {&#xA;&#x9;return &amp;amp;ImageProcessor{}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In your application code, import the above package and use &lt;a href=&#34;https://pkg.go.dev/github.com/hibiken/asynq?tab=doc#Client&#34;&gt;&lt;code&gt;Client&lt;/code&gt;&lt;/a&gt; to put tasks on queues.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;    &#34;log&#34;&#xA;    &#34;time&#34;&#xA;&#xA;    &#34;github.com/hibiken/asynq&#34;&#xA;    &#34;your/app/package/tasks&#34;&#xA;)&#xA;&#xA;const redisAddr = &#34;127.0.0.1:6379&#34;&#xA;&#xA;func main() {&#xA;    client := asynq.NewClient(asynq.RedisClientOpt{Addr: redisAddr})&#xA;    defer client.Close()&#xA;&#xA;    // ------------------------------------------------------&#xA;    // Example 1: Enqueue task to be processed immediately.&#xA;    //            Use (*Client).Enqueue method.&#xA;    // ------------------------------------------------------&#xA;&#xA;    task, err := tasks.NewEmailDeliveryTask(42, &#34;some:template:id&#34;)&#xA;    if err != nil {&#xA;        log.Fatalf(&#34;could not create task: %v&#34;, err)&#xA;    }&#xA;    info, err := client.Enqueue(task)&#xA;    if err != nil {&#xA;        log.Fatalf(&#34;could not enqueue task: %v&#34;, err)&#xA;    }&#xA;    log.Printf(&#34;enqueued task: id=%s queue=%s&#34;, info.ID, info.Queue)&#xA;&#xA;&#xA;    // ------------------------------------------------------------&#xA;    // Example 2: Schedule task to be processed in the future.&#xA;    //            Use ProcessIn or ProcessAt option.&#xA;    // ------------------------------------------------------------&#xA;&#xA;    info, err = client.Enqueue(task, asynq.ProcessIn(24*time.Hour))&#xA;    if err != nil {&#xA;        log.Fatalf(&#34;could not schedule task: %v&#34;, err)&#xA;    }&#xA;    log.Printf(&#34;enqueued task: id=%s queue=%s&#34;, info.ID, info.Queue)&#xA;&#xA;&#xA;    // ----------------------------------------------------------------------------&#xA;    // Example 3: Set other options to tune task processing behavior.&#xA;    //            Options include MaxRetry, Queue, Timeout, Deadline, Unique etc.&#xA;    // ----------------------------------------------------------------------------&#xA;&#xA;    task, err = tasks.NewImageResizeTask(&#34;https://example.com/myassets/image.jpg&#34;)&#xA;    if err != nil {&#xA;        log.Fatalf(&#34;could not create task: %v&#34;, err)&#xA;    }&#xA;    info, err = client.Enqueue(task, asynq.MaxRetry(10), asynq.Timeout(3 * time.Minute))&#xA;    if err != nil {&#xA;        log.Fatalf(&#34;could not enqueue task: %v&#34;, err)&#xA;    }&#xA;    log.Printf(&#34;enqueued task: id=%s queue=%s&#34;, info.ID, info.Queue)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Next, start a worker server to process these tasks in the background. To start the background workers, use &lt;a href=&#34;https://pkg.go.dev/github.com/hibiken/asynq?tab=doc#Server&#34;&gt;&lt;code&gt;Server&lt;/code&gt;&lt;/a&gt; and provide your &lt;a href=&#34;https://pkg.go.dev/github.com/hibiken/asynq?tab=doc#Handler&#34;&gt;&lt;code&gt;Handler&lt;/code&gt;&lt;/a&gt; to process the tasks.&lt;/p&gt; &#xA;&lt;p&gt;You can optionally use &lt;a href=&#34;https://pkg.go.dev/github.com/hibiken/asynq?tab=doc#ServeMux&#34;&gt;&lt;code&gt;ServeMux&lt;/code&gt;&lt;/a&gt; to create a handler, just as you would with &lt;a href=&#34;https://golang.org/pkg/net/http/&#34;&gt;&lt;code&gt;net/http&lt;/code&gt;&lt;/a&gt; Handler.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;    &#34;log&#34;&#xA;&#xA;    &#34;github.com/hibiken/asynq&#34;&#xA;    &#34;your/app/package/tasks&#34;&#xA;)&#xA;&#xA;const redisAddr = &#34;127.0.0.1:6379&#34;&#xA;&#xA;func main() {&#xA;    srv := asynq.NewServer(&#xA;        asynq.RedisClientOpt{Addr: redisAddr},&#xA;        asynq.Config{&#xA;            // Specify how many concurrent workers to use&#xA;            Concurrency: 10,&#xA;            // Optionally specify multiple queues with different priority.&#xA;            Queues: map[string]int{&#xA;                &#34;critical&#34;: 6,&#xA;                &#34;default&#34;:  3,&#xA;                &#34;low&#34;:      1,&#xA;            },&#xA;            // See the godoc for other configuration options&#xA;        },&#xA;    )&#xA;&#xA;    // mux maps a type to a handler&#xA;    mux := asynq.NewServeMux()&#xA;    mux.HandleFunc(tasks.TypeEmailDelivery, tasks.HandleEmailDeliveryTask)&#xA;    mux.Handle(tasks.TypeImageResize, tasks.NewImageProcessor())&#xA;    // ...register other handlers...&#xA;&#xA;    if err := srv.Run(mux); err != nil {&#xA;        log.Fatalf(&#34;could not run server: %v&#34;, err)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For a more detailed walk-through of the library, see our &lt;a href=&#34;https://github.com/hibiken/asynq/wiki/Getting-Started&#34;&gt;Getting Started&lt;/a&gt; guide.&lt;/p&gt; &#xA;&lt;p&gt;To learn more about &lt;code&gt;asynq&lt;/code&gt; features and APIs, see the package &lt;a href=&#34;https://godoc.org/github.com/hibiken/asynq&#34;&gt;godoc&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Web UI&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/hibiken/asynqmon&#34;&gt;Asynqmon&lt;/a&gt; is a web based tool for monitoring and administrating Asynq queues and tasks.&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s a few screenshots of the Web UI:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Queues view&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/11155743/114697016-07327f00-9d26-11eb-808c-0ac841dc888e.png&#34; alt=&#34;Web UI Queues View&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Tasks view&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/11155743/114697070-1f0a0300-9d26-11eb-855c-d3ec263865b7.png&#34; alt=&#34;Web UI TasksView&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Metrics view&lt;/strong&gt; &lt;img width=&#34;1532&#34; alt=&#34;Screen Shot 2021-12-19 at 4 37 19 PM&#34; src=&#34;https://user-images.githubusercontent.com/10953044/146777420-cae6c476-bac6-469c-acce-b2f6584e8707.png&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Settings and adaptive dark mode&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/11155743/114697149-3517c380-9d26-11eb-9f7a-ae2dd00aad5b.png&#34; alt=&#34;Web UI Settings and adaptive dark mode&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;For details on how to use the tool, refer to the tool&#39;s &lt;a href=&#34;https://github.com/hibiken/asynqmon#readme&#34;&gt;README&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Command Line Tool&lt;/h2&gt; &#xA;&lt;p&gt;Asynq ships with a command line tool to inspect the state of queues and tasks.&lt;/p&gt; &#xA;&lt;p&gt;To install the CLI tool, run the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;go install github.com/hibiken/asynq/tools/asynq&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here&#39;s an example of running the &lt;code&gt;asynq dash&lt;/code&gt; command:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hibiken/asynq/master/docs/assets/dash.gif&#34; alt=&#34;Gif&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;For details on how to use the tool, refer to the tool&#39;s &lt;a href=&#34;https://raw.githubusercontent.com/hibiken/asynq/master/tools/asynq/README.md&#34;&gt;README&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;We are open to, and grateful for, any contributions (GitHub issues/PRs, feedback on &lt;a href=&#34;https://gitter.im/go-asynq/community&#34;&gt;Gitter channel&lt;/a&gt;, etc) made by the community.&lt;/p&gt; &#xA;&lt;p&gt;Please see the &lt;a href=&#34;https://raw.githubusercontent.com/hibiken/asynq/master/CONTRIBUTING.md&#34;&gt;Contribution Guide&lt;/a&gt; before contributing.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Copyright (c) 2019-present &lt;a href=&#34;https://github.com/hibiken&#34;&gt;Ken Hibino&lt;/a&gt; and &lt;a href=&#34;https://github.com/hibiken/asynq/graphs/contributors&#34;&gt;Contributors&lt;/a&gt;. &lt;code&gt;Asynq&lt;/code&gt; is free and open-source software licensed under the &lt;a href=&#34;https://github.com/hibiken/asynq/raw/master/LICENSE&#34;&gt;MIT License&lt;/a&gt;. Official logo was created by &lt;a href=&#34;https://github.com/koddr&#34;&gt;Vic Sh√≥stak&lt;/a&gt; and distributed under &lt;a href=&#34;https://creativecommons.org/publicdomain/zero/1.0/&#34;&gt;Creative Commons&lt;/a&gt; license (CC0 1.0 Universal).&lt;/p&gt;</summary>
  </entry>
</feed>