<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-03-01T02:03:42Z</updated>
  <subtitle>Monthly Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>nektos/act</title>
    <updated>2024-03-01T02:03:42Z</updated>
    <id>tag:github.com,2024-03-01:/nektos/act</id>
    <link href="https://github.com/nektos/act" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Run your GitHub Actions locally 🚀&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/wiki/nektos/act/img/logo-150.png&#34; alt=&#34;act-logo&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Overview &lt;a href=&#34;https://github.com/nektos/act/actions&#34;&gt;&lt;img src=&#34;https://github.com/nektos/act/workflows/push/badge.svg?branch=master&amp;amp;event=push&#34; alt=&#34;push&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitter.im/nektos/act?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/nektos/act.svg?sanitize=true&#34; alt=&#34;Join the chat at https://gitter.im/nektos/act&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/nektos/act&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/nektos/act&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/jonico/awesome-runners&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/listed%20on-awesome--runners-blue.svg?sanitize=true&#34; alt=&#34;awesome-runners&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&#34;Think globally, &lt;code&gt;act&lt;/code&gt; locally&#34;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Run your &lt;a href=&#34;https://developer.github.com/actions/&#34;&gt;GitHub Actions&lt;/a&gt; locally! Why would you want to do this? Two reasons:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Fast Feedback&lt;/strong&gt; - Rather than having to commit/push every time you want to test out the changes you are making to your &lt;code&gt;.github/workflows/&lt;/code&gt; files (or for any changes to embedded GitHub actions), you can use &lt;code&gt;act&lt;/code&gt; to run the actions locally. The &lt;a href=&#34;https://help.github.com/en/actions/configuring-and-managing-workflows/using-environment-variables#default-environment-variables&#34;&gt;environment variables&lt;/a&gt; and &lt;a href=&#34;https://help.github.com/en/actions/reference/virtual-environments-for-github-hosted-runners#filesystems-on-github-hosted-runners&#34;&gt;filesystem&lt;/a&gt; are all configured to match what GitHub provides.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Local Task Runner&lt;/strong&gt; - I love &lt;a href=&#34;https://en.wikipedia.org/wiki/Make_(software)&#34;&gt;make&lt;/a&gt;. However, I also hate repeating myself. With &lt;code&gt;act&lt;/code&gt;, you can use the GitHub Actions defined in your &lt;code&gt;.github/workflows/&lt;/code&gt; to replace your &lt;code&gt;Makefile&lt;/code&gt;!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;How Does It Work?&lt;/h1&gt; &#xA;&lt;p&gt;When you run &lt;code&gt;act&lt;/code&gt; it reads in your GitHub Actions from &lt;code&gt;.github/workflows/&lt;/code&gt; and determines the set of actions that need to be run. It uses the Docker API to either pull or build the necessary images, as defined in your workflow files and finally determines the execution path based on the dependencies that were defined. Once it has the execution path, it then uses the Docker API to run containers for each action based on the images prepared earlier. The &lt;a href=&#34;https://help.github.com/en/actions/configuring-and-managing-workflows/using-environment-variables#default-environment-variables&#34;&gt;environment variables&lt;/a&gt; and &lt;a href=&#34;https://docs.github.com/en/actions/using-github-hosted-runners/about-github-hosted-runners#file-systems&#34;&gt;filesystem&lt;/a&gt; are all configured to match what GitHub provides.&lt;/p&gt; &#xA;&lt;p&gt;Let&#39;s see it in action with a &lt;a href=&#34;https://github.com/cplee/github-actions-demo&#34;&gt;sample repo&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/wiki/nektos/act/quickstart/act-quickstart-2.gif&#34; alt=&#34;Demo&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Act User Guide&lt;/h1&gt; &#xA;&lt;p&gt;Please look at the &lt;a href=&#34;https://nektosact.com&#34;&gt;act user guide&lt;/a&gt; for more documentation.&lt;/p&gt; &#xA;&lt;h1&gt;Support&lt;/h1&gt; &#xA;&lt;p&gt;Need help? Ask on &lt;a href=&#34;https://gitter.im/nektos/act&#34;&gt;Gitter&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;h1&gt;Contributing&lt;/h1&gt; &#xA;&lt;p&gt;Want to contribute to act? Awesome! Check out the &lt;a href=&#34;https://raw.githubusercontent.com/nektos/act/master/CONTRIBUTING.md&#34;&gt;contributing guidelines&lt;/a&gt; to get involved.&lt;/p&gt; &#xA;&lt;h2&gt;Manually building from source&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install Go tools 1.20+ - (&lt;a href=&#34;https://golang.org/doc/install&#34;&gt;https://golang.org/doc/install&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Clone this repo &lt;code&gt;git clone git@github.com:nektos/act.git&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run unit tests with &lt;code&gt;make test&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Build and install: &lt;code&gt;make install&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>weaviate/weaviate</title>
    <updated>2024-03-01T02:03:42Z</updated>
    <id>tag:github.com,2024-03-01:/weaviate/weaviate</id>
    <link href="https://github.com/weaviate/weaviate" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Weaviate is an open source vector database that stores both objects and vectors, allowing for combining vector search with structured filtering with the fault-tolerance and scalability of a cloud-native database, all accessible through GraphQL, REST, and various language clients.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Weaviate &lt;img alt=&#34;Weaviate logo&#34; src=&#34;https://weaviate.io/img/site/weaviate-logo-light.png&#34; width=&#34;148&#34; align=&#34;right&#34;&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/weaviate/weaviate&#34;&gt;&lt;img src=&#34;https://pkg.go.dev/badge/github.com/weaviate/weaviate.svg?sanitize=true&#34; alt=&#34;Go Reference&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/weaviate/weaviate/actions/workflows/.github/workflows/pull_requests.yaml&#34;&gt;&lt;img src=&#34;https://github.com/weaviate/weaviate/actions/workflows/.github/workflows/pull_requests.yaml/badge.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/weaviate/weaviate&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/weaviate/weaviate&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/weaviate/weaviate&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/weaviate/weaviate/branch/master/graph/badge.svg?sanitize=true&#34; alt=&#34;Coverage Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://weaviate.io/slack&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/slack--channel-blue?logo=slack&#34; alt=&#34;Slack&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/weaviate-tutorials/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Weaviate_Tutorials-green&#34; alt=&#34;GitHub Tutorials&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;Weaviate is an &lt;strong&gt;open source vector database&lt;/strong&gt; that is robust, scalable, cloud-native, and fast.&lt;/p&gt; &#xA;&lt;p&gt;If you just want to get started, great! Try:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;the &lt;a href=&#34;https://weaviate.io/developers/weaviate/quickstart&#34;&gt;quickstart tutorial&lt;/a&gt; if you are looking to use Weaviate, or&lt;/li&gt; &#xA; &lt;li&gt;the &lt;a href=&#34;https://weaviate.io/developers/contributor-guide&#34;&gt;contributor guide&lt;/a&gt; if you are looking to contribute to the project.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;And you can find our &lt;a href=&#34;https://weaviate.io/developers/weaviate/&#34;&gt;documentation here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you have a bit more time, stick around and check out our summary below 😉&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Why Weaviate?&lt;/h2&gt; &#xA;&lt;p&gt;With Weaviate, you can turn your text, images and more into a searchable vector database using state-of-the-art ML models.&lt;/p&gt; &#xA;&lt;p&gt;Some of its highlights are:&lt;/p&gt; &#xA;&lt;h3&gt;Speed&lt;/h3&gt; &#xA;&lt;p&gt;Weaviate typically performs a 10-NN neighbor search out of millions of objects in single-digit milliseconds. See &lt;a href=&#34;https://weaviate.io/developers/weaviate/benchmarks&#34;&gt;benchmarks&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Flexibility&lt;/h3&gt; &#xA;&lt;p&gt;You can use Weaviate to conveniently &lt;strong&gt;vectorize your data at import time&lt;/strong&gt;, or alternatively you can &lt;strong&gt;upload your own vectors&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;These vectorization options are enabled by Weaviate modules. Modules enable use of popular services and model hubs such as &lt;a href=&#34;https://weaviate.io/developers/weaviate/modules/retriever-vectorizer-modules/text2vec-openai&#34;&gt;OpenAI&lt;/a&gt;, &lt;a href=&#34;https://weaviate.io/developers/weaviate/modules/retriever-vectorizer-modules/text2vec-cohere&#34;&gt;Cohere&lt;/a&gt; or &lt;a href=&#34;https://weaviate.io/developers/weaviate/modules/retriever-vectorizer-modules/text2vec-huggingface&#34;&gt;HuggingFace&lt;/a&gt; and much more, including use of local and custom models.&lt;/p&gt; &#xA;&lt;h3&gt;Production-readiness&lt;/h3&gt; &#xA;&lt;p&gt;Weaviate is designed to take you from &lt;strong&gt;rapid prototyping&lt;/strong&gt; all the way to &lt;strong&gt;production at scale&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To this end, Weaviate is built with &lt;a href=&#34;https://weaviate.io/developers/weaviate/concepts/cluster&#34;&gt;scaling&lt;/a&gt;, &lt;a href=&#34;https://weaviate.io/developers/weaviate/concepts/replication-architecture&#34;&gt;replication&lt;/a&gt;, and &lt;a href=&#34;https://weaviate.io/developers/weaviate/configuration/authentication&#34;&gt;security&lt;/a&gt; in mind, among others.&lt;/p&gt; &#xA;&lt;h3&gt;Beyond search&lt;/h3&gt; &#xA;&lt;p&gt;Weaviate powers lightning-fast vector searches, but it is capable of much more. Some of its other superpowers include &lt;strong&gt;recommendation&lt;/strong&gt;, &lt;strong&gt;summarization&lt;/strong&gt;, and &lt;strong&gt;integrations with neural search frameworks&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;What can you build with Weaviate?&lt;/h2&gt; &#xA;&lt;p&gt;For starters, you can build vector databases with text, images, or a combination of both.&lt;/p&gt; &#xA;&lt;p&gt;You can also build question and answer extraction, summarization and classification systems.&lt;/p&gt; &#xA;&lt;p&gt;You can see &lt;a href=&#34;https://github.com/weaviate-tutorials&#34;&gt;project examples here&lt;/a&gt; or &lt;a href=&#34;https://github.com/weaviate/recipes&#34;&gt;quick notebook tutorials here&lt;/a&gt;, and you might find these blog posts useful:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://weaviate.io/blog/weaviate-retrieval-plugin&#34;&gt;The ChatGPT Retrieval Plugin - Weaviate as a Long-term Memory Store for Generative AI&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://weaviate.io/blog/autogpt-and-weaviate&#34;&gt;Giving Auto-GPT Long-Term Memory with Weaviate&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://weaviate.io/blog/combining-langchain-and-weaviate&#34;&gt;Combining LangChain and Weaviate&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://weaviate.io/blog/how-to-build-an-image-search-application-with-weaviate&#34;&gt;How to build an Image Search Application with Weaviate&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://weaviate.io/blog/cohere-multilingual-with-weaviate&#34;&gt;Cohere Multilingual ML Models with Weaviate&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://weaviate.io/blog/weaviate-podcast-search&#34;&gt;Weaviate Podcast Search&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://weaviate.io/blog/sphere-dataset-in-weaviate&#34;&gt;The Sphere Dataset in Weaviate&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://weaviate.io/blog/multimodal-search-in-typescript&#34;&gt;Building Multimodal AI in TypeScript&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Integrations&lt;/h3&gt; &#xA;&lt;p&gt;Examples and/or documentation of Weaviate integrations (a-z).&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Significant-Gravitas/Auto-GPT/raw/master/docs/configuration/memory.md#weaviate-setup&#34;&gt;Auto-GPT&lt;/a&gt; (&lt;a href=&#34;https://weaviate.io/blog/autogpt-and-weaviate&#34;&gt;blogpost&lt;/a&gt;) – use Weaviate as a memory backend for Auto-GPT&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://weaviate.io/developers/weaviate/modules/retriever-vectorizer-modules/text2vec-cohere&#34;&gt;Cohere&lt;/a&gt; (&lt;a href=&#34;https://txt.cohere.com/embedding-archives-wikipedia/&#34;&gt;blogpost&lt;/a&gt;) - Use Cohere embeddings with Weaviate.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docarray.jina.ai/advanced/document-store/weaviate/&#34;&gt;DocArray&lt;/a&gt; - Use Weaviate as a document store in DocArray.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.haystack.deepset.ai/reference/document-store-api#weaviatedocumentstore&#34;&gt;Haystack&lt;/a&gt; (&lt;a href=&#34;https://www.deepset.ai/weaviate-vector-search-engine-integration&#34;&gt;blogpost&lt;/a&gt;) - Use Weaviate as a document store in Haystack.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://weaviate.io/developers/weaviate/modules/retriever-vectorizer-modules/text2vec-huggingface&#34;&gt;Hugging Face&lt;/a&gt; - Use Hugging Face models with Weaviate.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://python.langchain.com/docs/ecosystem/integrations/weaviate&#34;&gt;LangChain&lt;/a&gt; (&lt;a href=&#34;https://weaviate.io/blog/combining-langchain-and-weaviate&#34;&gt;blogpost&lt;/a&gt;) - Use Weaviate as a memory backend for LangChain.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gpt-index.readthedocs.io/en/latest/how_to/integrations/vector_stores.html&#34;&gt;LlamaIndex&lt;/a&gt; (&lt;a href=&#34;https://weaviate.io/blog/llamaindex-and-weaviate&#34;&gt;blogpost&lt;/a&gt;)- Use Weaviate as a memory backend for LlamaIndex.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/openai/chatgpt-retrieval-plugin/raw/main/docs/providers/weaviate/setup.md&#34;&gt;OpenAI - ChatGPT retrieval plugin&lt;/a&gt; - Use Weaviate as a memory backend for ChatGPT.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/openai/openai-cookbook/tree/main/examples/vector_databases/weaviate&#34;&gt;OpenAI&lt;/a&gt; - use OpenAI embeddings with Weaviate.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://weaviate.io/slack&#34;&gt;yours?&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Weaviate content&lt;/h2&gt; &#xA;&lt;p&gt;Speaking of content - we love connecting with our community through these. We love helping amazing people build cool things with Weaviate, and we love getting to know them as well as talking to them about their passions.&lt;/p&gt; &#xA;&lt;p&gt;To this end, our team does an amazing job with our &lt;a href=&#34;https://weaviate.io/blog&#34;&gt;blog&lt;/a&gt; and &lt;a href=&#34;https://weaviate.io/podcast&#34;&gt;podcast&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Some of our past favorites include:&lt;/p&gt; &#xA;&lt;h3&gt;📝 Blogs&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://weaviate.io/blog/what-to-expect-from-weaviate-in-2023&#34;&gt;What to expect from Weaviate in 2023&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://weaviate.io/blog/Why-is-Vector-Search-so-fast&#34;&gt;Why is vector search so fast?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://weaviate.io/blog/Cohere-multilingual-with-weaviate&#34;&gt;Cohere Multilingual ML Models with Weaviate&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://weaviate.io/blog/ann-algorithms-vamana-vs-hnsw&#34;&gt;Vamana vs. HNSW - Exploring ANN algorithms Part 1&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://weaviate.io/blog/ann-algorithms-hnsw-pq&#34;&gt;HNSW+PQ - Exploring ANN algorithms Part 2.1&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://weaviate.io/blog/ann-algorithms-tiles-enocoder&#34;&gt;The Tile Encoder - Exploring ANN algorithms Part 2.2&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://weaviate.io/blog/what-are-llms&#34;&gt;How GPT4.0 and other Large Language Models Work&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://weaviate.io/blog/monitoring-weaviate-in-production&#34;&gt;Monitoring Weaviate in Production&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;🎙️ Podcasts&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=leGgjIQkVYo&#34;&gt;Neural Magic in Weaviate&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=IwXOaHanfUU&#34;&gt;BERTopic&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=o6MD0tWl0SM&#34;&gt;Jina AI&#39;s Neural Search Framework&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;⚙️ Demos&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://verba.weaviate.io&#34;&gt;Verba, the Golden RAGtreiver&lt;/a&gt; (&lt;a href=&#34;https://github.com/weaviate/verba&#34;&gt;GitHub&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://healthsearch.weaviate.io&#34;&gt;Healthsearch&lt;/a&gt; (&lt;a href=&#34;https://github.com/weaviate/healthsearch-demo&#34;&gt;GitHub&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://awesome-moviate.weaviate.io/&#34;&gt;Awesome-Moviate&lt;/a&gt; (&lt;a href=&#34;https://github.com/weaviate-tutorials/awesome-moviate&#34;&gt;GitHub&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;📰 Newsletter&lt;/h3&gt; &#xA;&lt;p&gt;Subscribe to our &lt;a href=&#34;https://newsletter.weaviate.io/&#34;&gt;🗞️ newsletter&lt;/a&gt; to keep up to date including new releases, meetup news and of course all of the content.&lt;/p&gt; &#xA;&lt;h2&gt;Join our community!&lt;/h2&gt; &#xA;&lt;p&gt;We invite you to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Join our &lt;a href=&#34;https://weaviate.io/slack&#34;&gt;Slack&lt;/a&gt; community, and&lt;/li&gt; &#xA; &lt;li&gt;Ask questions at our &lt;a href=&#34;https://forum.weaviate.io/&#34;&gt;forum&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can also say hi to us below:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/weaviate_io&#34;&gt;Twitter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/company/weaviate-io&#34;&gt;LinkedIn&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Weaviate helps ...&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Software Engineers&lt;/strong&gt; - Who use Weaviate as an ML-first database for your applications.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Out-of-the-box modules for: AI-powered searches, Q&amp;amp;A, integrating LLMs with your data, and automatic classification.&lt;/li&gt; &#xA;   &lt;li&gt;With full CRUD support like you&#39;re used to from other OSS databases.&lt;/li&gt; &#xA;   &lt;li&gt;Cloud-native, distributed, runs well on Kubernetes and scales with your workloads.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Data Engineers&lt;/strong&gt; - Who use Weaviate as fast, flexible vector database&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Use your own ML mode or out-of-the-box ML models, locally or with an inference service.&lt;/li&gt; &#xA;   &lt;li&gt;Weaviate takes care of the scalability, so that you don&#39;t have to.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Data Scientists&lt;/strong&gt; - Who use Weaviate for a seamless handover of their Machine Learning models to MLOps.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Deploy and maintain your ML models in production reliably and efficiently.&lt;/li&gt; &#xA;   &lt;li&gt;Easily package any custom trained model you want.&lt;/li&gt; &#xA;   &lt;li&gt;Smooth and accelerated handover of your ML models to engineers.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Read more in our &lt;a href=&#34;https://weaviate.io/developers/weaviate&#34;&gt;documentation&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Interfaces&lt;/h2&gt; &#xA;&lt;p&gt;You can use Weaviate with any of these clients:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://weaviate.io/developers/weaviate/client-libraries/python&#34;&gt;Python&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://weaviate.io/developers/weaviate/client-libraries/typescript&#34;&gt;JavaScript/TypeScript&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://weaviate.io/developers/weaviate/client-libraries/go&#34;&gt;Go&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://weaviate.io/developers/weaviate/client-libraries/java&#34;&gt;Java&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can also use its GraphQL API to retrieve objects and properties.&lt;/p&gt; &#xA;&lt;h3&gt;GraphQL interface demo&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://weaviate.io/developers/weaviate/current/&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://weaviate.io/img/site/weaviate-demo.gif?i=9&#34; alt=&#34;Demo of Weaviate&#34; width=&#34;100%&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Additional material&lt;/h2&gt; &#xA;&lt;h3&gt;Reading&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.zdnet.com/article/weaviate-an-open-source-search-engine-powered-by-machine-learning-vectors-graphs-and-graphql/&#34;&gt;Weaviate is an open-source search engine powered by ML, vectors, graphs, and GraphQL (ZDNet)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://db-engines.com/en/blog_post/87&#34;&gt;Weaviate, an ANN Database with CRUD support (DB-Engines.com)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://towardsdatascience.com/a-sub-50ms-neural-search-with-distilbert-and-weaviate-4857ae390154&#34;&gt;A sub-50ms neural search with DistilBERT and Weaviate (Towards Datascience)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://towardsdatascience.com/getting-started-with-weaviate-python-client-e85d14f19e4f&#34;&gt;Getting Started with Weaviate Python Library (Towards Datascience)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>opencontainers/runc</title>
    <updated>2024-03-01T02:03:42Z</updated>
    <id>tag:github.com,2024-03-01:/opencontainers/runc</id>
    <link href="https://github.com/opencontainers/runc" rel="alternate"></link>
    <summary type="html">&lt;p&gt;CLI tool for spawning and running containers according to the OCI specification&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;runc&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://goreportcard.com/report/github.com/opencontainers/runc&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/opencontainers/runc&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pkg.go.dev/github.com/opencontainers/runc&#34;&gt;&lt;img src=&#34;https://pkg.go.dev/badge/github.com/opencontainers/runc.svg?sanitize=true&#34; alt=&#34;Go Reference&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://bestpractices.coreinfrastructure.org/projects/588&#34;&gt;&lt;img src=&#34;https://bestpractices.coreinfrastructure.org/projects/588/badge&#34; alt=&#34;CII Best Practices&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/opencontainers/runc/actions?query=workflow%3Avalidate&#34;&gt;&lt;img src=&#34;https://github.com/opencontainers/runc/workflows/validate/badge.svg?sanitize=true&#34; alt=&#34;gha/validate&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/opencontainers/runc/actions?query=workflow%3Aci&#34;&gt;&lt;img src=&#34;https://github.com/opencontainers/runc/workflows/ci/badge.svg?sanitize=true&#34; alt=&#34;gha/ci&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cirrus-ci.com/github/opencontainers/runc&#34;&gt;&lt;img src=&#34;https://api.cirrus-ci.com/github/opencontainers/runc.svg?sanitize=true&#34; alt=&#34;CirrusCI&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;runc&lt;/code&gt; is a CLI tool for spawning and running containers on Linux according to the OCI specification.&lt;/p&gt; &#xA;&lt;h2&gt;Releases&lt;/h2&gt; &#xA;&lt;p&gt;You can find official releases of &lt;code&gt;runc&lt;/code&gt; on the &lt;a href=&#34;https://github.com/opencontainers/runc/releases&#34;&gt;release&lt;/a&gt; page.&lt;/p&gt; &#xA;&lt;p&gt;All releases are signed by one of the keys listed in the &lt;a href=&#34;https://raw.githubusercontent.com/opencontainers/runc/main/runc.keyring&#34;&gt;&lt;code&gt;runc.keyring&lt;/code&gt; file in the root of this repository&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Security&lt;/h2&gt; &#xA;&lt;p&gt;The reporting process and disclosure communications are outlined &lt;a href=&#34;https://github.com/opencontainers/org/raw/master/SECURITY.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Security Audit&lt;/h3&gt; &#xA;&lt;p&gt;A third party security audit was performed by Cure53, you can see the full report &lt;a href=&#34;https://github.com/opencontainers/runc/raw/master/docs/Security-Audit.pdf&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Building&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;runc&lt;/code&gt; only supports Linux. It must be built with Go version 1.19 or higher.&lt;/p&gt; &#xA;&lt;p&gt;In order to enable seccomp support you will need to install &lt;code&gt;libseccomp&lt;/code&gt; on your platform.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;e.g. &lt;code&gt;libseccomp-devel&lt;/code&gt; for CentOS, or &lt;code&gt;libseccomp-dev&lt;/code&gt; for Ubuntu&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# create a &#39;github.com/opencontainers&#39; in your GOPATH/src&#xA;cd github.com/opencontainers&#xA;git clone https://github.com/opencontainers/runc&#xA;cd runc&#xA;&#xA;make&#xA;sudo make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also use &lt;code&gt;go get&lt;/code&gt; to install to your &lt;code&gt;GOPATH&lt;/code&gt;, assuming that you have a &lt;code&gt;github.com&lt;/code&gt; parent folder already created under &lt;code&gt;src&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;go get github.com/opencontainers/runc&#xA;cd $GOPATH/src/github.com/opencontainers/runc&#xA;make&#xA;sudo make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;runc&lt;/code&gt; will be installed to &lt;code&gt;/usr/local/sbin/runc&lt;/code&gt; on your system.&lt;/p&gt; &#xA;&lt;h4&gt;Build Tags&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;runc&lt;/code&gt; supports optional build tags for compiling support of various features, with some of them enabled by default (see &lt;code&gt;BUILDTAGS&lt;/code&gt; in top-level &lt;code&gt;Makefile&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;To change build tags from the default, set the &lt;code&gt;BUILDTAGS&lt;/code&gt; variable for make, e.g. to disable seccomp:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make BUILDTAGS=&#34;&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Build Tag&lt;/th&gt; &#xA;   &lt;th&gt;Feature&lt;/th&gt; &#xA;   &lt;th&gt;Enabled by Default&lt;/th&gt; &#xA;   &lt;th&gt;Dependencies&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;seccomp&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Syscall filtering using &lt;code&gt;libseccomp&lt;/code&gt;.&lt;/td&gt; &#xA;   &lt;td&gt;yes&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;libseccomp&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;!runc_nodmz&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Reduce memory usage for CVE-2019-5736 protection by using a small C binary, &lt;a href=&#34;https://raw.githubusercontent.com/opencontainers/runc/main/contrib/cmd/memfd-bind/README.md&#34;&gt;see &lt;code&gt;memfd-bind&lt;/code&gt; for more details&lt;/a&gt;. &lt;code&gt;runc_nodmz&lt;/code&gt; disables this feature and causes runc to use a different protection mechanism which will further increases memory usage temporarily during container startup. This feature can also be disabled at runtime by setting the &lt;code&gt;RUNC_DMZ=legacy&lt;/code&gt; environment variable.&lt;/td&gt; &#xA;   &lt;td&gt;yes&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;runc_dmz_selinux_nocompat&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Disables a SELinux DMZ workaround (new distros should set this). See &lt;a href=&#34;https://raw.githubusercontent.com/opencontainers/runc/main/libcontainer/dmz/README.md&#34;&gt;dmz README&lt;/a&gt; for details.&lt;/td&gt; &#xA;   &lt;td&gt;no&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;The following build tags were used earlier, but are now obsoleted:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;nokmem&lt;/strong&gt; (since runc v1.0.0-rc94 kernel memory settings are ignored)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;apparmor&lt;/strong&gt; (since runc v1.0.0-rc93 the feature is always enabled)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;selinux&lt;/strong&gt; (since runc v1.0.0-rc93 the feature is always enabled)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Running the test suite&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;runc&lt;/code&gt; currently supports running its test suite via Docker. To run the suite just type &lt;code&gt;make test&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There are additional make targets for running the tests outside of a container but this is not recommended as the tests are written with the expectation that they can write and remove anywhere.&lt;/p&gt; &#xA;&lt;p&gt;You can run a specific test case by setting the &lt;code&gt;TESTFLAGS&lt;/code&gt; variable.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# make test TESTFLAGS=&#34;-run=SomeTestFunction&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can run a specific integration test by setting the &lt;code&gt;TESTPATH&lt;/code&gt; variable.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# make test TESTPATH=&#34;/checkpoint.bats&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can run a specific rootless integration test by setting the &lt;code&gt;ROOTLESS_TESTPATH&lt;/code&gt; variable.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# make test ROOTLESS_TESTPATH=&#34;/checkpoint.bats&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can run a test using your container engine&#39;s flags by setting &lt;code&gt;CONTAINER_ENGINE_BUILD_FLAGS&lt;/code&gt; and &lt;code&gt;CONTAINER_ENGINE_RUN_FLAGS&lt;/code&gt; variables.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# make test CONTAINER_ENGINE_BUILD_FLAGS=&#34;--build-arg http_proxy=http://yourproxy/&#34; CONTAINER_ENGINE_RUN_FLAGS=&#34;-e http_proxy=http://yourproxy/&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Dependencies Management&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;runc&lt;/code&gt; uses &lt;a href=&#34;https://github.com/golang/go/wiki/Modules&#34;&gt;Go Modules&lt;/a&gt; for dependencies management. Please refer to &lt;a href=&#34;https://github.com/golang/go/wiki/Modules&#34;&gt;Go Modules&lt;/a&gt; for how to add or update new dependencies.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Update vendored dependencies&#xA;make vendor&#xA;# Verify all dependencies&#xA;make verify-dependencies&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Using runc&lt;/h2&gt; &#xA;&lt;p&gt;Please note that runc is a low level tool not designed with an end user in mind. It is mostly employed by other higher level container software.&lt;/p&gt; &#xA;&lt;p&gt;Therefore, unless there is some specific use case that prevents the use of tools like Docker or Podman, it is not recommended to use runc directly.&lt;/p&gt; &#xA;&lt;p&gt;If you still want to use runc, here&#39;s how.&lt;/p&gt; &#xA;&lt;h3&gt;Creating an OCI Bundle&lt;/h3&gt; &#xA;&lt;p&gt;In order to use runc you must have your container in the format of an OCI bundle. If you have Docker installed you can use its &lt;code&gt;export&lt;/code&gt; method to acquire a root filesystem from an existing Docker container.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# create the top most bundle directory&#xA;mkdir /mycontainer&#xA;cd /mycontainer&#xA;&#xA;# create the rootfs directory&#xA;mkdir rootfs&#xA;&#xA;# export busybox via Docker into the rootfs directory&#xA;docker export $(docker create busybox) | tar -C rootfs -xvf -&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After a root filesystem is populated you just generate a spec in the format of a &lt;code&gt;config.json&lt;/code&gt; file inside your bundle. &lt;code&gt;runc&lt;/code&gt; provides a &lt;code&gt;spec&lt;/code&gt; command to generate a base template spec that you are then able to edit. To find features and documentation for fields in the spec please refer to the &lt;a href=&#34;https://github.com/opencontainers/runtime-spec&#34;&gt;specs&lt;/a&gt; repository.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;runc spec&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Running Containers&lt;/h3&gt; &#xA;&lt;p&gt;Assuming you have an OCI bundle from the previous step you can execute the container in two different ways.&lt;/p&gt; &#xA;&lt;p&gt;The first way is to use the convenience command &lt;code&gt;run&lt;/code&gt; that will handle creating, starting, and deleting the container after it exits.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# run as root&#xA;cd /mycontainer&#xA;runc run mycontainerid&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you used the unmodified &lt;code&gt;runc spec&lt;/code&gt; template this should give you a &lt;code&gt;sh&lt;/code&gt; session inside the container.&lt;/p&gt; &#xA;&lt;p&gt;The second way to start a container is using the specs lifecycle operations. This gives you more power over how the container is created and managed while it is running. This will also launch the container in the background so you will have to edit the &lt;code&gt;config.json&lt;/code&gt; to remove the &lt;code&gt;terminal&lt;/code&gt; setting for the simple examples below (see more details about &lt;a href=&#34;https://raw.githubusercontent.com/opencontainers/runc/main/docs/terminals.md&#34;&gt;runc terminal handling&lt;/a&gt;). Your process field in the &lt;code&gt;config.json&lt;/code&gt; should look like this below with &lt;code&gt;&#34;terminal&#34;: false&lt;/code&gt; and &lt;code&gt;&#34;args&#34;: [&#34;sleep&#34;, &#34;5&#34;]&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;        &#34;process&#34;: {&#xA;                &#34;terminal&#34;: false,&#xA;                &#34;user&#34;: {&#xA;                        &#34;uid&#34;: 0,&#xA;                        &#34;gid&#34;: 0&#xA;                },&#xA;                &#34;args&#34;: [&#xA;                        &#34;sleep&#34;, &#34;5&#34;&#xA;                ],&#xA;                &#34;env&#34;: [&#xA;                        &#34;PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin&#34;,&#xA;                        &#34;TERM=xterm&#34;&#xA;                ],&#xA;                &#34;cwd&#34;: &#34;/&#34;,&#xA;                &#34;capabilities&#34;: {&#xA;                        &#34;bounding&#34;: [&#xA;                                &#34;CAP_AUDIT_WRITE&#34;,&#xA;                                &#34;CAP_KILL&#34;,&#xA;                                &#34;CAP_NET_BIND_SERVICE&#34;&#xA;                        ],&#xA;                        &#34;effective&#34;: [&#xA;                                &#34;CAP_AUDIT_WRITE&#34;,&#xA;                                &#34;CAP_KILL&#34;,&#xA;                                &#34;CAP_NET_BIND_SERVICE&#34;&#xA;                        ],&#xA;                        &#34;inheritable&#34;: [&#xA;                                &#34;CAP_AUDIT_WRITE&#34;,&#xA;                                &#34;CAP_KILL&#34;,&#xA;                                &#34;CAP_NET_BIND_SERVICE&#34;&#xA;                        ],&#xA;                        &#34;permitted&#34;: [&#xA;                                &#34;CAP_AUDIT_WRITE&#34;,&#xA;                                &#34;CAP_KILL&#34;,&#xA;                                &#34;CAP_NET_BIND_SERVICE&#34;&#xA;                        ],&#xA;                        &#34;ambient&#34;: [&#xA;                                &#34;CAP_AUDIT_WRITE&#34;,&#xA;                                &#34;CAP_KILL&#34;,&#xA;                                &#34;CAP_NET_BIND_SERVICE&#34;&#xA;                        ]&#xA;                },&#xA;                &#34;rlimits&#34;: [&#xA;                        {&#xA;                                &#34;type&#34;: &#34;RLIMIT_NOFILE&#34;,&#xA;                                &#34;hard&#34;: 1024,&#xA;                                &#34;soft&#34;: 1024&#xA;                        }&#xA;                ],&#xA;                &#34;noNewPrivileges&#34;: true&#xA;        },&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now we can go through the lifecycle operations in your shell.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# run as root&#xA;cd /mycontainer&#xA;runc create mycontainerid&#xA;&#xA;# view the container is created and in the &#34;created&#34; state&#xA;runc list&#xA;&#xA;# start the process inside the container&#xA;runc start mycontainerid&#xA;&#xA;# after 5 seconds view that the container has exited and is now in the stopped state&#xA;runc list&#xA;&#xA;# now delete the container&#xA;runc delete mycontainerid&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This allows higher level systems to augment the containers creation logic with setup of various settings after the container is created and/or before it is deleted. For example, the container&#39;s network stack is commonly set up after &lt;code&gt;create&lt;/code&gt; but before &lt;code&gt;start&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Rootless containers&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;runc&lt;/code&gt; has the ability to run containers without root privileges. This is called &lt;code&gt;rootless&lt;/code&gt;. You need to pass some parameters to &lt;code&gt;runc&lt;/code&gt; in order to run rootless containers. See below and compare with the previous version.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; In order to use this feature, &#34;User Namespaces&#34; must be compiled and enabled in your kernel. There are various ways to do this depending on your distribution:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Confirm &lt;code&gt;CONFIG_USER_NS=y&lt;/code&gt; is set in your kernel configuration (normally found in &lt;code&gt;/proc/config.gz&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Arch/Debian: &lt;code&gt;echo 1 &amp;gt; /proc/sys/kernel/unprivileged_userns_clone&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;RHEL/CentOS 7: &lt;code&gt;echo 28633 &amp;gt; /proc/sys/user/max_user_namespaces&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Run the following commands as an ordinary user:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Same as the first example&#xA;mkdir ~/mycontainer&#xA;cd ~/mycontainer&#xA;mkdir rootfs&#xA;docker export $(docker create busybox) | tar -C rootfs -xvf -&#xA;&#xA;# The --rootless parameter instructs runc spec to generate a configuration for a rootless container, which will allow you to run the container as a non-root user.&#xA;runc spec --rootless&#xA;&#xA;# The --root parameter tells runc where to store the container state. It must be writable by the user.&#xA;runc --root /tmp/runc run mycontainerid&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Supervisors&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;runc&lt;/code&gt; can be used with process supervisors and init systems to ensure that containers are restarted when they exit. An example systemd unit file looks something like this.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-systemd&#34;&gt;[Unit]&#xA;Description=Start My Container&#xA;&#xA;[Service]&#xA;Type=forking&#xA;ExecStart=/usr/local/sbin/runc run -d --pid-file /run/mycontainerid.pid mycontainerid&#xA;ExecStopPost=/usr/local/sbin/runc delete mycontainerid&#xA;WorkingDirectory=/mycontainer&#xA;PIDFile=/run/mycontainerid.pid&#xA;&#xA;[Install]&#xA;WantedBy=multi-user.target&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;More documentation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/opencontainers/runc/main/docs/spec-conformance.md&#34;&gt;Spec conformance&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/opencontainers/runc/main/docs/cgroup-v2.md&#34;&gt;cgroup v2&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/opencontainers/runc/main/docs/checkpoint-restore.md&#34;&gt;Checkpoint and restore&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/opencontainers/runc/main/docs/systemd.md&#34;&gt;systemd cgroup driver&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/opencontainers/runc/main/docs/terminals.md&#34;&gt;Terminals and standard IO&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/opencontainers/runc/main/docs/experimental.md&#34;&gt;Experimental features&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The code and docs are released under the &lt;a href=&#34;https://raw.githubusercontent.com/opencontainers/runc/main/LICENSE&#34;&gt;Apache 2.0 license&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>