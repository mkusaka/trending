<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-03-01T02:11:36Z</updated>
  <subtitle>Monthly Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>sashabaranov/go-gpt3</title>
    <updated>2023-03-01T02:11:36Z</updated>
    <id>tag:github.com,2023-03-01:/sashabaranov/go-gpt3</id>
    <link href="https://github.com/sashabaranov/go-gpt3" rel="alternate"></link>
    <summary type="html">&lt;p&gt;OpenAI GPT-3 and DALL·E API wrapper for Go&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;go-gpt3&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://godoc.org/github.com/sashabaranov/go-gpt3&#34;&gt;&lt;img src=&#34;http://img.shields.io/badge/GoDoc-Reference-blue.svg?sanitize=true&#34; alt=&#34;GoDoc&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/sashabaranov/go-gpt3&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/sashabaranov/go-gpt3&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://beta.openai.com/&#34;&gt;OpenAI GPT-3&lt;/a&gt; API wrapper for Go&lt;/p&gt; &#xA;&lt;p&gt;Installation:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;go get github.com/sashabaranov/go-gpt3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Example usage:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;context&#34;&#xA;&#x9;&#34;fmt&#34;&#xA;&#x9;gogpt &#34;github.com/sashabaranov/go-gpt3&#34;&#xA;)&#xA;&#xA;func main() {&#xA;&#x9;c := gogpt.NewClient(&#34;your token&#34;)&#xA;&#x9;ctx := context.Background()&#xA;&#xA;&#x9;req := gogpt.CompletionRequest{&#xA;&#x9;&#x9;Model:     gogpt.GPT3Ada,&#xA;&#x9;&#x9;MaxTokens: 5,&#xA;&#x9;&#x9;Prompt:    &#34;Lorem ipsum&#34;,&#xA;&#x9;}&#xA;&#x9;resp, err := c.CreateCompletion(ctx, req)&#xA;&#x9;if err != nil {&#xA;&#x9;&#x9;return&#xA;&#x9;}&#xA;&#x9;fmt.Println(resp.Choices[0].Text)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Streaming response example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;errors&#34;&#xA;&#x9;&#34;context&#34;&#xA;&#x9;&#34;fmt&#34;&#xA;&#x9;&#34;io&#34;&#xA;&#x9;gogpt &#34;github.com/sashabaranov/go-gpt3&#34;&#xA;)&#xA;&#xA;func main() {&#xA;&#x9;c := gogpt.NewClient(&#34;your token&#34;)&#xA;&#x9;ctx := context.Background()&#xA;&#xA;&#x9;req := gogpt.CompletionRequest{&#xA;&#x9;&#x9;Model:     gogpt.GPT3Ada,&#xA;&#x9;&#x9;MaxTokens: 5,&#xA;&#x9;&#x9;Prompt:    &#34;Lorem ipsum&#34;,&#xA;&#x9;&#x9;Stream:    true,&#xA;&#x9;}&#xA;&#x9;stream, err := c.CreateCompletionStream(ctx, req)&#xA;&#x9;if err != nil {&#xA;&#x9;&#x9;return&#xA;&#x9;}&#xA;&#x9;defer stream.Close()&#xA;&#xA;&#x9;for {&#xA;&#x9;&#x9;response, err := stream.Recv()&#xA;&#x9;&#x9;if errors.Is(err, io.EOF) {&#xA;&#x9;&#x9;&#x9;fmt.Println(&#34;Stream finished&#34;)&#xA;&#x9;&#x9;&#x9;return&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;if err != nil {&#xA;&#x9;&#x9;&#x9;fmt.Printf(&#34;Stream error: %v\n&#34;, err)&#xA;&#x9;&#x9;&#x9;return&#xA;&#x9;&#x9;}&#xA;&#xA;&#xA;&#x9;&#x9;fmt.Printf(&#34;Stream response: %v\n&#34;, response)&#xA;&#x9;}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>ginuerzh/gost</title>
    <updated>2023-03-01T02:11:36Z</updated>
    <id>tag:github.com,2023-03-01:/ginuerzh/gost</id>
    <link href="https://github.com/ginuerzh/gost" rel="alternate"></link>
    <summary type="html">&lt;p&gt;GO Simple Tunnel - a simple tunnel written in golang&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;GO Simple Tunnel&lt;/h1&gt; &#xA;&lt;h3&gt;GO语言实现的安全隧道&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://godoc.org/github.com/ginuerzh/gost&#34;&gt;&lt;img src=&#34;https://godoc.org/github.com/ginuerzh/gost?status.svg?sanitize=true&#34; alt=&#34;GoDoc&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/ginuerzh/gost&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/ginuerzh/gost&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/ginuerzh/gost/branch/master&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/ginuerzh/gost/branch/master/graphs/badge.svg?sanitize=true&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/ginuerzh/gost/releases/latest&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/ginuerzh/gost.svg?sanitize=true&#34; alt=&#34;GitHub release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/ginuerzh/gost/&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/pulls/ginuerzh/gost.svg?sanitize=true&#34; alt=&#34;Docker&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://snapcraft.io/gost&#34;&gt;&lt;img src=&#34;https://snapcraft.io/gost/badge.svg?sanitize=true&#34; alt=&#34;gost&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ginuerzh/gost/master/README_en.md&#34;&gt;English README&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;！！！&lt;a href=&#34;https://latest.gost.run&#34;&gt;V3版本已经可用，欢迎抢先体验&lt;/a&gt;！！！&lt;/h3&gt; &#xA;&lt;h2&gt;特性&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;多端口监听&lt;/li&gt; &#xA; &lt;li&gt;可设置转发代理，支持多级转发(代理链)&lt;/li&gt; &#xA; &lt;li&gt;支持标准HTTP/HTTPS/HTTP2/SOCKS4(A)/SOCKS5代理协议&lt;/li&gt; &#xA; &lt;li&gt;Web代理支持&lt;a href=&#34;https://v2.gost.run/probe_resist/&#34;&gt;探测防御&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://v2.gost.run/configuration/&#34;&gt;支持多种隧道类型&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://v2.gost.run/socks/&#34;&gt;SOCKS5代理支持TLS协商加密&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://v2.gost.run/socks/&#34;&gt;Tunnel UDP over TCP&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://v2.gost.run/redirect/&#34;&gt;TCP/UDP透明代理&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://v2.gost.run/port-forwarding/&#34;&gt;本地/远程TCP/UDP端口转发&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://v2.gost.run/ss/&#34;&gt;支持Shadowsocks(TCP/UDP)协议&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://v2.gost.run/sni/&#34;&gt;支持SNI代理&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://v2.gost.run/permission/&#34;&gt;权限控制&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://v2.gost.run/load-balancing/&#34;&gt;负载均衡&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://v2.gost.run/bypass/&#34;&gt;路由控制&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;DNS&lt;a href=&#34;https://v2.gost.run/resolver/&#34;&gt;解析&lt;/a&gt;和&lt;a href=&#34;https://v2.gost.run/dns/&#34;&gt;代理&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://v2.gost.run/tuntap/&#34;&gt;TUN/TAP设备&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Wiki站点: &lt;a href=&#34;https://v2.gost.run&#34;&gt;v2.gost.run&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Telegram讨论群: &lt;a href=&#34;https://t.me/gogost&#34;&gt;https://t.me/gogost&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Google讨论组: &lt;a href=&#34;https://groups.google.com/d/forum/go-gost&#34;&gt;https://groups.google.com/d/forum/go-gost&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;安装&lt;/h2&gt; &#xA;&lt;h4&gt;二进制文件&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/ginuerzh/gost/releases&#34;&gt;https://github.com/ginuerzh/gost/releases&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;源码编译&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/ginuerzh/gost.git&#xA;cd gost/cmd/gost&#xA;go build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Docker&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run --rm ginuerzh/gost -V&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Homebrew&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew install gost&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Ubuntu商店&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo snap install core&#xA;sudo snap install gost&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;快速上手&lt;/h2&gt; &#xA;&lt;h4&gt;不设置转发代理&lt;/h4&gt; &#xA;&lt;img src=&#34;https://ginuerzh.github.io/images/gost_01.png&#34;&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;作为标准HTTP/SOCKS5代理&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gost -L=:8080&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;设置代理认证信息&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gost -L=admin:123456@localhost:8080&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;多端口监听&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gost -L=http2://:443 -L=socks5://:1080 -L=ss://aes-128-cfb:123456@:8338&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;设置转发代理&lt;/h4&gt; &#xA;&lt;img src=&#34;https://ginuerzh.github.io/images/gost_02.png&#34;&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gost -L=:8080 -F=192.168.1.1:8081&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;转发代理认证&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gost -L=:8080 -F=http://admin:123456@192.168.1.1:8081&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;设置多级转发代理(代理链)&lt;/h4&gt; &#xA;&lt;img src=&#34;https://ginuerzh.github.io/images/gost_03.png&#34;&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gost -L=:8080 -F=quic://192.168.1.1:6121 -F=socks5+wss://192.168.1.2:1080 -F=http2://192.168.1.3:443 ... -F=a.b.c.d:NNNN&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;gost按照-F设置的顺序通过代理链将请求最终转发给a.b.c.d:NNNN处理，每一个转发代理可以是任意HTTP/HTTPS/HTTP2/SOCKS4/SOCKS5/Shadowsocks类型代理。&lt;/p&gt; &#xA;&lt;h4&gt;本地端口转发(TCP)&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gost -L=tcp://:2222/192.168.1.1:22 [-F=...]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;将本地TCP端口2222上的数据(通过代理链)转发到192.168.1.1:22上。当代理链末端(最后一个-F参数)为SSH转发通道类型时，gost会直接使用SSH的本地端口转发功能:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gost -L=tcp://:2222/192.168.1.1:22 -F forward+ssh://:2222&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;本地端口转发(UDP)&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gost -L=udp://:5353/192.168.1.1:53?ttl=60 [-F=...]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;将本地UDP端口5353上的数据(通过代理链)转发到192.168.1.1:53上。 每条转发通道都有超时时间，当超过此时间，且在此时间段内无任何数据交互，则此通道将关闭。可以通过&lt;code&gt;ttl&lt;/code&gt;参数来设置超时时间，默认值为60秒。&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;注:&lt;/strong&gt; 转发UDP数据时，如果有代理链，则代理链的末端(最后一个-F参数)必须是gost SOCKS5类型代理，gost会使用UDP over TCP方式进行转发。&lt;/p&gt; &#xA;&lt;h4&gt;远程端口转发(TCP)&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gost -L=rtcp://:2222/192.168.1.1:22 [-F=... -F=socks5://172.24.10.1:1080]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;将172.24.10.1:2222上的数据(通过代理链)转发到192.168.1.1:22上。当代理链末端(最后一个-F参数)为SSH转发通道类型时，gost会直接使用SSH的远程端口转发功能:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gost -L=rtcp://:2222/192.168.1.1:22 -F forward+ssh://:2222&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;远程端口转发(UDP)&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gost -L=rudp://:5353/192.168.1.1:53?ttl=60 [-F=... -F=socks5://172.24.10.1:1080]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;将172.24.10.1:5353上的数据(通过代理链)转发到192.168.1.1:53上。 每条转发通道都有超时时间，当超过此时间，且在此时间段内无任何数据交互，则此通道将关闭。可以通过&lt;code&gt;ttl&lt;/code&gt;参数来设置超时时间，默认值为60秒。&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;注:&lt;/strong&gt; 转发UDP数据时，如果有代理链，则代理链的末端(最后一个-F参数)必须是GOST SOCKS5类型代理，gost会使用UDP-over-TCP方式进行转发。&lt;/p&gt; &#xA;&lt;h4&gt;HTTP2&lt;/h4&gt; &#xA;&lt;p&gt;gost的HTTP2支持两种模式：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;作为标准的HTTP2代理，并向下兼容HTTPS代理。&lt;/li&gt; &#xA; &lt;li&gt;作为通道传输其他协议。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h5&gt;代理模式&lt;/h5&gt; &#xA;&lt;p&gt;服务端:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gost -L=http2://:443&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;客户端:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gost -L=:8080 -F=http2://server_ip:443&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;通道模式&lt;/h5&gt; &#xA;&lt;p&gt;服务端:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gost -L=h2://:443&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;客户端:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gost -L=:8080 -F=h2://server_ip:443&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;QUIC&lt;/h4&gt; &#xA;&lt;p&gt;gost对QUIC的支持是基于&lt;a href=&#34;https://github.com/quic-go/quic-go&#34;&gt;quic-go&lt;/a&gt;库。&lt;/p&gt; &#xA;&lt;p&gt;服务端:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gost -L=quic://:6121&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;客户端:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gost -L=:8080 -F=quic://server_ip:6121&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;注：&lt;/strong&gt; QUIC模式只能作为代理链的第一个节点。&lt;/p&gt; &#xA;&lt;h4&gt;KCP&lt;/h4&gt; &#xA;&lt;p&gt;gost对KCP的支持是基于&lt;a href=&#34;https://github.com/xtaci/kcp-go&#34;&gt;kcp-go&lt;/a&gt;和&lt;a href=&#34;https://github.com/xtaci/kcptun&#34;&gt;kcptun&lt;/a&gt;库。&lt;/p&gt; &#xA;&lt;p&gt;服务端:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gost -L=kcp://:8388&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;客户端:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gost -L=:8080 -F=kcp://server_ip:8388&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;gost会自动加载当前工作目录中的kcp.json(如果存在)配置文件，或者可以手动通过参数指定配置文件路径：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gost -L=kcp://:8388?c=/path/to/conf/file&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;注：&lt;/strong&gt; KCP模式只能作为代理链的第一个节点。&lt;/p&gt; &#xA;&lt;h4&gt;SSH&lt;/h4&gt; &#xA;&lt;p&gt;gost的SSH支持两种模式：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;作为转发通道，配合本地/远程TCP端口转发使用。&lt;/li&gt; &#xA; &lt;li&gt;作为通道传输其他协议。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h5&gt;转发模式&lt;/h5&gt; &#xA;&lt;p&gt;服务端:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gost -L=forward+ssh://:2222&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;客户端:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gost -L=rtcp://:1222/:22 -F=forward+ssh://server_ip:2222&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;通道模式&lt;/h5&gt; &#xA;&lt;p&gt;服务端:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gost -L=ssh://:2222&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;客户端:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gost -L=:8080 -F=ssh://server_ip:2222?ping=60&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;可以通过&lt;code&gt;ping&lt;/code&gt;参数设置心跳包发送周期，单位为秒。默认不发送心跳包。&lt;/p&gt; &#xA;&lt;h4&gt;透明代理&lt;/h4&gt; &#xA;&lt;p&gt;基于iptables的透明代理。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gost -L=redirect://:12345 -F=http2://server_ip:443&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;obfs4&lt;/h4&gt; &#xA;&lt;p&gt;此功能由&lt;a href=&#34;https://github.com/isofew&#34;&gt;@isofew&lt;/a&gt;贡献。&lt;/p&gt; &#xA;&lt;p&gt;服务端:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gost -L=obfs4://:443&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;当服务端运行后会在控制台打印出连接地址供客户端使用:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;obfs4://:443/?cert=4UbQjIfjJEQHPOs8vs5sagrSXx1gfrDCGdVh2hpIPSKH0nklv1e4f29r7jb91VIrq4q5Jw&amp;amp;iat-mode=0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;客户端:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;gost -L=:8888 -F=&#39;obfs4://server_ip:443?cert=4UbQjIfjJEQHPOs8vs5sagrSXx1gfrDCGdVh2hpIPSKH0nklv1e4f29r7jb91VIrq4q5Jw&amp;amp;iat-mode=0&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;加密机制&lt;/h2&gt; &#xA;&lt;h4&gt;HTTP&lt;/h4&gt; &#xA;&lt;p&gt;对于HTTP可以使用TLS加密整个通讯过程，即HTTPS代理：&lt;/p&gt; &#xA;&lt;p&gt;服务端:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gost -L=https://:443&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;客户端:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gost -L=:8080 -F=http+tls://server_ip:443&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;HTTP2&lt;/h4&gt; &#xA;&lt;p&gt;gost的HTTP2代理模式仅支持使用TLS加密的HTTP2协议，不支持明文HTTP2传输。&lt;/p&gt; &#xA;&lt;p&gt;gost的HTTP2通道模式支持加密(h2)和明文(h2c)两种模式。&lt;/p&gt; &#xA;&lt;h4&gt;SOCKS5&lt;/h4&gt; &#xA;&lt;p&gt;gost支持标准SOCKS5协议的no-auth(0x00)和user/pass(0x02)方法，并在此基础上扩展了两个：tls(0x80)和tls-auth(0x82)，用于数据加密。&lt;/p&gt; &#xA;&lt;p&gt;服务端:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gost -L=socks5://:1080&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;客户端:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gost -L=:8080 -F=socks5://server_ip:1080&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;如果两端都是gost(如上)则数据传输会被加密(协商使用tls或tls-auth方法)，否则使用标准SOCKS5进行通讯(no-auth或user/pass方法)。&lt;/p&gt; &#xA;&lt;h4&gt;Shadowsocks&lt;/h4&gt; &#xA;&lt;p&gt;gost对shadowsocks的支持是基于&lt;a href=&#34;https://github.com/shadowsocks/shadowsocks-go&#34;&gt;shadowsocks-go&lt;/a&gt;库。&lt;/p&gt; &#xA;&lt;p&gt;服务端:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gost -L=ss://chacha20:123456@:8338&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;客户端:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gost -L=:8080 -F=ss://chacha20:123456@server_ip:8338&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Shadowsocks UDP relay&lt;/h5&gt; &#xA;&lt;p&gt;目前仅服务端支持UDP Relay。&lt;/p&gt; &#xA;&lt;p&gt;服务端:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gost -L=ssu://chacha20:123456@:8338&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;TLS&lt;/h4&gt; &#xA;&lt;p&gt;gost内置了TLS证书，如果需要使用其他TLS证书，有两种方法：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;在gost运行目录放置cert.pem(公钥)和key.pem(私钥)两个文件即可，gost会自动加载运行目录下的cert.pem和key.pem文件。&lt;/li&gt; &#xA; &lt;li&gt;使用参数指定证书文件路径：&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gost -L=&#34;http2://:443?cert=/path/to/my/cert/file&amp;amp;key=/path/to/my/key/file&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;对于客户端可以通过&lt;code&gt;secure&lt;/code&gt;参数开启服务器证书和域名校验:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gost -L=:8080 -F=&#34;http2://server_domain_name:443?secure=true&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;对于客户端可以指定CA证书进行&lt;a href=&#34;https://en.wikipedia.org/wiki/Transport_Layer_Security#Certificate_pinning&#34;&gt;证书锁定&lt;/a&gt;(Certificate Pinning):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gost -L=:8080 -F=&#34;http2://:443?ca=ca.pem&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;证书锁定功能由&lt;a href=&#34;https://github.com/sheerun&#34;&gt;@sheerun&lt;/a&gt;贡献&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>XIU2/CloudflareSpeedTest</title>
    <updated>2023-03-01T02:11:36Z</updated>
    <id>tag:github.com,2023-03-01:/XIU2/CloudflareSpeedTest</id>
    <link href="https://github.com/XIU2/CloudflareSpeedTest" rel="alternate"></link>
    <summary type="html">&lt;p&gt;🌩「自选优选 IP」测试 Cloudflare CDN 延迟和速度，获取最快 IP (IPv4 / IPv6)！另外也支持其他 CDN / 网站 IP ~&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;XIU2/CloudflareSpeedTest&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/XIU2/CloudflareSpeedTest/&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/go-mod/go-version/XIU2/CloudflareSpeedTest.svg?style=flat-square&amp;amp;label=Go&amp;amp;color=00ADD8&amp;amp;logo=go&#34; alt=&#34;Go Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/XIU2/CloudflareSpeedTest/releases/latest&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/XIU2/CloudflareSpeedTest.svg?style=flat-square&amp;amp;label=Release&amp;amp;color=00ADD8&amp;amp;logo=github&#34; alt=&#34;Release Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/XIU2/CloudflareSpeedTest/&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/XIU2/CloudflareSpeedTest.svg?style=flat-square&amp;amp;label=License&amp;amp;color=00ADD8&amp;amp;logo=github&#34; alt=&#34;GitHub license&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/XIU2/CloudflareSpeedTest/&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/XIU2/CloudflareSpeedTest.svg?style=flat-square&amp;amp;label=Star&amp;amp;color=00ADD8&amp;amp;logo=github&#34; alt=&#34;GitHub Star&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/XIU2/CloudflareSpeedTest/&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/forks/XIU2/CloudflareSpeedTest.svg?style=flat-square&amp;amp;label=Fork&amp;amp;color=00ADD8&amp;amp;logo=github&#34; alt=&#34;GitHub Fork&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;国外很多网站都在使用 Cloudflare CDN，但分配给中国内地访客的 IP 并不友好（延迟高、丢包多、速度慢）。&lt;br&gt; 虽然 Cloudflare 公开了所有 &lt;a href=&#34;https://www.cloudflare.com/ips/&#34;&gt;IP 段&lt;/a&gt; ，但想要在这么多 IP 中找到适合自己的，怕是要累死，于是就有了这个软件。&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;「自选优选 IP」测试 Cloudflare CDN 延迟和速度，获取最快 IP (IPv4+IPv6)&lt;/strong&gt;！好用的话&lt;strong&gt;点个&lt;code&gt;⭐&lt;/code&gt;鼓励一下叭~&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;em&gt;分享我其他开源项目：&lt;a href=&#34;https://github.com/XIU2/TrackersListCollection&#34;&gt;&lt;strong&gt;TrackersList.com&lt;/strong&gt; - 全网热门 BT Tracker 列表！有效提高 BT 下载速度~&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/stars/XIU2/TrackersListCollection.svg?style=flat-square&amp;amp;label=Star&amp;amp;color=4285dd&amp;amp;logo=github&#34; height=&#34;16px&#34;&gt;&lt;/em&gt;&lt;br&gt; &lt;em&gt;&lt;a href=&#34;https://github.com/XIU2/UserScript&#34;&gt;&lt;strong&gt;UserScript&lt;/strong&gt; - 🐵 Github 高速下载、知乎增强、自动无缝翻页、护眼模式 等十几个&lt;strong&gt;油猴脚本&lt;/strong&gt;！&lt;/a&gt;&lt;img src=&#34;https://img.shields.io/github/stars/XIU2/UserScript.svg?style=flat-square&amp;amp;label=Star&amp;amp;color=4285dd&amp;amp;logo=github&#34; height=&#34;16px&#34;&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;本项目也支持对&lt;strong&gt;其他 CDN / 网站 IP&lt;/strong&gt; 延迟测速（如：&lt;a href=&#34;https://github.com/XIU2/CloudflareSpeedTest/issues/180&#34;&gt;CloudFront&lt;/a&gt;、&lt;a href=&#34;https://github.com/XIU2/CloudflareSpeedTest/issues/267&#34;&gt;Gcore&lt;/a&gt; CDN），但下载测速需自行寻找地址&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;对于&lt;strong&gt;代理套 Cloudflare CDN&lt;/strong&gt; 的用户，须知这应为&lt;strong&gt;备用方案&lt;/strong&gt;，而不应该是&lt;strong&gt;唯一方案&lt;/strong&gt;，请勿过度依赖 &lt;a href=&#34;https://github.com/XIU2/CloudflareSpeedTest/issues/217&#34;&gt;#217&lt;/a&gt; &lt;a href=&#34;https://github.com/XIU2/CloudflareSpeedTest/issues/188&#34;&gt;#188&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;# 快速使用&lt;/h2&gt; &#xA;&lt;h3&gt;下载运行&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;下载编译好的可执行文件 &lt;a href=&#34;https://pan.lanzouv.com/b0742hkxe&#34;&gt;蓝奏云&lt;/a&gt; / &lt;a href=&#34;https://github.com/XIU2/CloudflareSpeedTest/releases&#34;&gt;Github&lt;/a&gt; 并解压。&lt;/li&gt; &#xA; &lt;li&gt;双击运行 &lt;code&gt;CloudflareST.exe&lt;/code&gt; 文件（Windows 系统），等待测速完成...&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;code&gt;&lt;strong&gt;「 点击查看 Linux 系统下的使用示例 」&lt;/strong&gt;&lt;/code&gt;&lt;/summary&gt; &#xA; &lt;hr&gt; &#xA; &lt;p&gt;以下命令仅为示例，版本号和文件名请前往 &lt;a href=&#34;https://github.com/XIU2/CloudflareSpeedTest/releases&#34;&gt;&lt;strong&gt;Releases&lt;/strong&gt;&lt;/a&gt; 查看。&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;# 如果是第一次使用，则建议创建新文件夹（后续更新时，跳过该步骤）&#xA;mkdir CloudflareST&#xA;&#xA;# 进入文件夹（后续更新，只需要从这里重复下面的下载、解压命令即可）&#xA;cd CloudflareST&#xA;&#xA;# 下载 CloudflareST 压缩包（自行根据需求替换 URL 中 [版本号] 和 [文件名]）&#xA;wget -N https://github.com/XIU2/CloudflareSpeedTest/releases/download/v2.2.2/CloudflareST_linux_amd64.tar.gz&#xA;# 如果你是在国内服务器上下载，那么请使用下面这几个镜像加速：&#xA;# wget -N https://download.fastgit.org/XIU2/CloudflareSpeedTest/releases/download/v2.2.2/CloudflareST_linux_amd64.tar.gz&#xA;# wget -N https://ghproxy.com/https://github.com/XIU2/CloudflareSpeedTest/releases/download/v2.2.2/CloudflareST_linux_amd64.tar.gz&#xA;# 如果下载失败的话，尝试删除 -N 参数（如果是为了更新，则记得提前删除旧压缩包 rm CloudflareST_linux_amd64.tar.gz ）&#xA;&#xA;# 解压（不需要删除旧文件，会直接覆盖，自行根据需求替换 文件名）&#xA;tar -zxf CloudflareST_linux_amd64.tar.gz&#xA;&#xA;# 赋予执行权限&#xA;chmod +x CloudflareST&#xA;&#xA;# 运行（不带参数）&#xA;./CloudflareST&#xA;&#xA;# 运行（带参数示例）&#xA;./CloudflareST -dd -tll 90&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;blockquote&gt; &#xA;  &lt;p&gt;如果平&lt;strong&gt;均延迟非常低&lt;/strong&gt;（如 0.xx），则说明 CloudflareST &lt;strong&gt;测速时走了代理&lt;/strong&gt;，请先关闭代理软件后再测速。&lt;br&gt; 如果在&lt;strong&gt;路由器&lt;/strong&gt;上运行，建议先关闭路由器内的代理（或将其排除），否则测速结果可能会&lt;strong&gt;不准确/无法使用&lt;/strong&gt;。&lt;/p&gt; &#xA; &lt;/blockquote&gt; &#xA;&lt;/details&gt; &#xA;&lt;hr&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;em&gt;在&lt;strong&gt;手机&lt;/strong&gt;上独立运行 CloudflareST 测速的简单教程：&lt;strong&gt;&lt;a href=&#34;https://github.com/XIU2/CloudflareSpeedTest/discussions/61&#34;&gt;Android&lt;/a&gt;、&lt;a href=&#34;https://github.com/xianshenglu/cloudflare-ip-tester-app&#34;&gt;Android APP&lt;/a&gt;、&lt;a href=&#34;https://github.com/XIU2/CloudflareSpeedTest/issues/151&#34;&gt;IOS&lt;/a&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;结果示例&lt;/h3&gt; &#xA;&lt;p&gt;测速完毕后，默认会显示&lt;strong&gt;最快的 10 个 IP&lt;/strong&gt;，示例：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;IP 地址           已发送  已接收  丢包率  平均延迟  下载速度 (MB/s)&#xA;104.27.200.69     4       4       0.00    146.23    28.64&#xA;172.67.60.78      4       4       0.00    139.82    15.02&#xA;104.25.140.153    4       4       0.00    146.49    14.90&#xA;104.27.192.65     4       4       0.00    140.28    14.07&#xA;172.67.62.214     4       4       0.00    139.29    12.71&#xA;104.27.207.5      4       4       0.00    145.92    11.95&#xA;172.67.54.193     4       4       0.00    146.71    11.55&#xA;104.22.66.8       4       4       0.00    147.42    11.11&#xA;104.27.197.63     4       4       0.00    131.29    10.26&#xA;172.67.58.91      4       4       0.00    140.19    9.14&#xA;...&#xA;&#xA;# 如果平均延迟非常低（如 0.xx），则说明 CloudflareST 测速时走了代理，请先关闭代理软件后再测速。&#xA;# 如果在路由器上运行，请先关闭路由器内的代理（或将其排除），否则测速结果可能会不准确/无法使用。&#xA;&#xA;# 因为每次测速都是在每个 IP 段中随机 IP，所以每次的测速结果都不可能相同，这是正常的！&#xA;&#xA;# 注意！我发现电脑开机后第一次测速延迟会明显偏高（手动 TCPing 也一样），后续测速都正常&#xA;# 因此建议大家开机后第一次正式测速前，先随便测几个 IP（无需等待延迟测速完成，只要进度条动了就可以直接关了）&#xA;&#xA;# 软件在 默认参数 下的整个流程大概步骤：&#xA;# 1. 延迟测速（默认 TCPing 模式，HTTPing 模式需要手动加上参数）&#xA;# 2. 延迟排序（延迟从低到高排序，不同丢包率的会分开独立排序，因此可能会有一些延迟低但丢包的 IP 被排到后面）&#xA;# 3. 下载测速（从延迟最低的 IP 开始依次下载测速，默认测够 10 个就会停止）&#xA;# 4. 速度排序（速度从高到低排序）&#xA;# 5. 输出结果（可依靠参数控制是否输出到命令行(-p 0)/文件(-o &#34;&#34;)）&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;测速结果第一行就是&lt;strong&gt;既下载速度最快、又平均延迟最低的最快 IP&lt;/strong&gt;！至于拿来干嘛？取决于你~&lt;/p&gt; &#xA;&lt;p&gt;完整结果保存在当前目录下的 &lt;code&gt;result.csv&lt;/code&gt; 文件中，用&lt;strong&gt;记事本/表格软件&lt;/strong&gt;打开，格式如下：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;IP 地址, 已发送, 已接收, 丢包率, 平均延迟, 下载速度 (MB/s)&#xA;104.27.200.69, 4, 4, 0.00, 146.23, 28.64&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;em&gt;大家可以按自己需求，对完整结果&lt;strong&gt;进一步筛选处理&lt;/strong&gt;，或者去看一看进阶使用&lt;strong&gt;指定过滤条件&lt;/strong&gt;！&lt;/em&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;# 进阶使用&lt;/h2&gt; &#xA;&lt;p&gt;直接运行使用的是默认参数，如果想要测速结果更全面、更符合自己的要求，可以自定义参数。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cmd&#34;&gt;C:\&amp;gt;CloudflareST.exe -h&#xA;&#xA;CloudflareSpeedTest vX.X.X&#xA;测试 Cloudflare CDN 所有 IP 的延迟和速度，获取最快 IP (IPv4+IPv6)！&#xA;https://github.com/XIU2/CloudflareSpeedTest&#xA;&#xA;参数：&#xA;    -n 200&#xA;        延迟测速线程；越多延迟测速越快，性能弱的设备 (如路由器) 请勿太高；(默认 200 最多 1000)&#xA;    -t 4&#xA;        延迟测速次数；单个 IP 延迟测速次数，为 1 时将过滤丢包的IP；(默认 4 次)&#xA;    -dn 10&#xA;        下载测速数量；延迟测速并排序后，从最低延迟起下载测速的数量；(默认 10 个)&#xA;    -dt 10&#xA;        下载测速时间；单个 IP 下载测速最长时间，不能太短；(默认 10 秒)&#xA;    -tp 443&#xA;        指定测速端口；延迟测速/下载测速时使用的端口；(默认 443 端口)&#xA;    -url https://cf.xiu2.xyz/url&#xA;        指定测速地址；延迟测速(HTTPing)/下载测速时使用的地址，默认地址不保证可用性，建议自建；&#xA;&#xA;    -httping&#xA;        切换测速模式；延迟测速模式改为 HTTP 协议，所用测试地址为 [-url] 参数；(默认 TCPing)&#xA;        注意：HTTPing 本质上也算一种 网络扫描 行为，因此如果你在服务器上面运行，需要降低并发(-n)，否则可能会被一些严格的商家暂停服务。&#xA;        如果你遇到 HTTPing 首次测速可用 IP 数量正常，后续测速越来越少甚至直接为 0，但停一段时间后又恢复了的情况，那么也可能是被 运营商、Cloudflare CDN 认为你在网络扫描而 触发临时限制机制，因此才会过一会儿就恢复了，建议降低并发(-n)减少这种情况的发生。&#xA;    -httping-code 200&#xA;        有效状态代码；HTTPing 延迟测速时网页返回的有效 HTTP 状态码，仅限一个；(默认 200 301 302)&#xA;    -cfcolo HKG,KHH,NRT,LAX,SEA,SJC,FRA,MAD&#xA;        匹配指定地区；地区名为当地机场三字码，英文逗号分隔，仅 HTTPing 模式可用；(默认 所有地区)&#xA;&#xA;    -tl 200&#xA;        平均延迟上限；只输出低于指定平均延迟的 IP，可与其他上限/下限搭配；(默认 9999 ms)&#xA;    -tll 40&#xA;        平均延迟下限；只输出高于指定平均延迟的 IP，可与其他上限/下限搭配；(默认 0 ms)&#xA;    -sl 5&#xA;        下载速度下限；只输出高于指定下载速度的 IP，凑够指定数量 [-dn] 才会停止测速；(默认 0.00 MB/s)&#xA;&#xA;    -p 10&#xA;        显示结果数量；测速后直接显示指定数量的结果，为 0 时不显示结果直接退出；(默认 10 个)&#xA;    -f ip.txt&#xA;        IP段数据文件；如路径含有空格请加上引号；支持其他 CDN IP段；(默认 ip.txt)&#xA;    -ip 1.1.1.1,2.2.2.2/24,2606:4700::/32&#xA;        指定IP段数据；直接通过参数指定要测速的 IP 段数据，英文逗号分隔；(默认 空)&#xA;    -o result.csv&#xA;        写入结果文件；如路径含有空格请加上引号；值为空时不写入文件 [-o &#34;&#34;]；(默认 result.csv)&#xA;&#xA;    -dd&#xA;        禁用下载测速；禁用后测速结果会按延迟排序 (默认按下载速度排序)；(默认 启用)&#xA;    -allip&#xA;        测速全部的IP；对 IP 段中的每个 IP (仅支持 IPv4) 进行测速；(默认 每个 /24 段随机测速一个 IP)&#xA;&#xA;    -v&#xA;        打印程序版本 + 检查版本更新&#xA;    -h&#xA;        打印帮助说明&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;使用示例&lt;/h3&gt; &#xA;&lt;p&gt;Windows 要指定参数需要在 CMD 中运行，或者把参数添加到快捷方式目标中。&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：各参数均有&lt;strong&gt;默认值&lt;/strong&gt;，使用默认值的参数是可以省略的（&lt;strong&gt;按需选择&lt;/strong&gt;），参数&lt;strong&gt;不分前后顺序&lt;/strong&gt;。&lt;br&gt; &lt;strong&gt;提示&lt;/strong&gt;：Windows &lt;strong&gt;PowerShell&lt;/strong&gt; 只需把下面命令中的 &lt;code&gt;CloudflareST.exe&lt;/code&gt; 改为 &lt;code&gt;.\CloudflareST.exe&lt;/code&gt; 即可。&lt;br&gt; &lt;strong&gt;提示&lt;/strong&gt;：Linux 系统只需要把下面命令中的 &lt;code&gt;CloudflareST.exe&lt;/code&gt; 改为 &lt;code&gt;./CloudflareST&lt;/code&gt; 即可。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;# CMD 带参数运行 CloudflareST&lt;/h4&gt; &#xA;&lt;p&gt;对命令行程序不熟悉的人，可能不知道该如何带参数运行，我就简单说一下。&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;code&gt;&lt;strong&gt;「 点击展开 查看内容 」&lt;/strong&gt;&lt;/code&gt;&lt;/summary&gt; &#xA; &lt;hr&gt; &#xA; &lt;p&gt;很多人打开 CMD 以&lt;strong&gt;绝对路径&lt;/strong&gt;运行 CloudflareST 会报错，这是因为默认的 &lt;code&gt;-f ip.txt&lt;/code&gt; 参数是相对路径，需要指定绝对路径的 ip.txt 才行，但这样毕竟太麻烦了，因此还是建议进入 CloudflareST 程序目录下，以&lt;strong&gt;相对路径&lt;/strong&gt;方式运行：&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;方式 一&lt;/strong&gt;：&lt;/p&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;打开 CloudflareST 程序所在目录&lt;/li&gt; &#xA;  &lt;li&gt;空白处按下 &lt;kbd&gt;Shift + 鼠标右键&lt;/kbd&gt; 显示右键菜单&lt;/li&gt; &#xA;  &lt;li&gt;选择 &lt;strong&gt;[在此处打开命令窗口]&lt;/strong&gt; 来打开 CMD 窗口，此时默认就位于当前目录下&lt;/li&gt; &#xA;  &lt;li&gt;输入带参数的命令，如：&lt;code&gt;CloudflareST.exe -tll 50 -tl 200&lt;/code&gt;即可运行&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;p&gt;&lt;strong&gt;方式 二&lt;/strong&gt;：&lt;/p&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;打开 CloudflareST 程序所在目录&lt;/li&gt; &#xA;  &lt;li&gt;直接在文件夹地址栏中全选并输入 &lt;code&gt;cmd&lt;/code&gt; 回车来打开 CMD 窗口，此时默认就位于当前目录下&lt;/li&gt; &#xA;  &lt;li&gt;输入带参数的命令，如：&lt;code&gt;CloudflareST.exe -tll 50 -tl 200&lt;/code&gt;即可运行&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;blockquote&gt; &#xA;  &lt;p&gt;当然你也可以随便打开一个 CMD 窗口，然后输入如 &lt;code&gt;cd /d &#34;D:\Program Files\CloudflareST&#34;&lt;/code&gt; 来进入程序目录&lt;/p&gt; &#xA; &lt;/blockquote&gt; &#xA; &lt;blockquote&gt; &#xA;  &lt;p&gt;&lt;strong&gt;提示&lt;/strong&gt;：如果用的是 &lt;strong&gt;PowerShell&lt;/strong&gt; 只需把命令中的 &lt;code&gt;CloudflareST.exe&lt;/code&gt; 改为 &lt;code&gt;.\CloudflareST.exe&lt;/code&gt; 即可。&lt;/p&gt; &#xA; &lt;/blockquote&gt; &#xA;&lt;/details&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;# Windows 快捷方式带参数运行 CloudflareST&lt;/h4&gt; &#xA;&lt;p&gt;如果不经常修改运行参数（比如平时都是直接双击运行）的人，建议使用快捷方式，更方便点。&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;code&gt;&lt;strong&gt;「 点击展开 查看内容 」&lt;/strong&gt;&lt;/code&gt;&lt;/summary&gt; &#xA; &lt;hr&gt; &#xA; &lt;p&gt;右键 &lt;code&gt;CloudflareST.exe&lt;/code&gt; 文件 - &lt;strong&gt;[创建快捷方式]&lt;/strong&gt;，然后右键该快捷方式 - &lt;strong&gt;[属性]&lt;/strong&gt;，修改其&lt;strong&gt;目标&lt;/strong&gt;：&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# 如果要不输出结果文件，那么请加上 -o &#34; &#34;，引号里的是空格（没有空格会导致该参数被省略）。&#xA;D:\ABC\CloudflareST\CloudflareST.exe -n 500 -t 4 -dn 20 -dt 5 -o &#34; &#34;&#xA;&#xA;# 如果文件路径包含引号，则需要把启动参数放在引号外面，记得引号和 - 之间有空格。&#xA;&#34;D:\Program Files\CloudflareST\CloudflareST.exe&#34; -n 500 -t 4 -dn 20 -dt 5 -o &#34; &#34;&#xA;&#xA;# 注意！快捷方式 - 起始位置 不能是空的，否则就会因为绝对路径而找不到 ip.txt 文件&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;# IPv4/IPv6&lt;/h4&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;code&gt;&lt;strong&gt;「 点击展开 查看内容 」&lt;/strong&gt;&lt;/code&gt;&lt;/summary&gt; &#xA; &lt;hr&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# 测速 IPv4 时，需要指定 IPv4 数据文件（-f 默认值就是 ip.txt，所以该参数可省略）&#xA;CloudflareST.exe -f ip.txt&#xA;&#xA;# 测速 IPv6 时，需要指定 IPv6 数据文件（v2.1.0 版本后支持 IPv4+IPv6 混合测速并移除了 -ipv6 参数）&#xA;CloudflareST.exe -f ipv6.txt&#xA;&#xA;# 当然你也可以将 IPv4 IPv6 混合在一起测速，也可以直接通过参数指定要测速的 IP&#xA;CloudflareST.exe -ip 1.1.1.1,2606:4700::/32&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;blockquote&gt; &#xA;  &lt;p&gt;测速 IPv6 时，可能会注意到每次测速数量都不一样，了解原因： &lt;a href=&#34;https://github.com/XIU2/CloudflareSpeedTest/issues/120&#34;&gt;#120&lt;/a&gt;&lt;br&gt; 因为 IPv6 太多（以亿为单位），且绝大部分 IP 段压根未启用，所以我只扫了一部分可用的 IPv6 段写到 &lt;code&gt;ipv6.txt&lt;/code&gt; 文件中，有兴趣的可以自行扫描增删，ASN 数据源来自：&lt;a href=&#34;https://bgp.he.net/AS13335#_prefixes6&#34;&gt;bgp.he.net&lt;/a&gt;&lt;/p&gt; &#xA; &lt;/blockquote&gt; &#xA;&lt;/details&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;# HTTPing&lt;/h4&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;code&gt;&lt;strong&gt;「 点击展开 查看内容 」&lt;/strong&gt;&lt;/code&gt;&lt;/summary&gt; &#xA; &lt;hr&gt; &#xA; &lt;p&gt;目前有两种延迟测速模式，分别为 &lt;strong&gt;TCP 协议、HTTP 协议&lt;/strong&gt;。&lt;br&gt; TCP 协议耗时更短、消耗资源更少，超时时间为 1 秒，该协议为默认模式。&lt;br&gt; HTTP 协议适用于快速测试某域名指向某 IP 时是否可以访问，超时时间为 2 秒。&lt;br&gt; 同一个 IP，各协议去 Ping 得到的延迟一般为：&lt;strong&gt;ICMP &amp;lt; TCP &amp;lt; HTTP&lt;/strong&gt;，越靠右对丢包等网络波动越敏感。&lt;/p&gt; &#xA; &lt;blockquote&gt; &#xA;  &lt;p&gt;注意：HTTPing 本质上也算一种&lt;strong&gt;网络扫描&lt;/strong&gt;行为，因此如果你在服务器上面运行，需要&lt;strong&gt;降低并发&lt;/strong&gt;(&lt;code&gt;-n&lt;/code&gt;)，否则可能会被一些严格的商家暂停服务。如果你遇到 HTTPing 首次测速可用 IP 数量正常，后续测速越来越少甚至直接为 0，但停一段时间后又恢复了的情况，那么也可能是被 运营商、Cloudflare CDN 认为你在网络扫描而&lt;strong&gt;触发临时限制机制&lt;/strong&gt;，因此才会过一会儿就恢复了，建议&lt;strong&gt;降低并发&lt;/strong&gt;(&lt;code&gt;-n&lt;/code&gt;)减少这种情况的发生。&lt;/p&gt; &#xA; &lt;/blockquote&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# 只需加上 -httping 参数即可切换到 HTTP 协议延迟测速模式&#xA;CloudflareST.exe -httping&#xA;&#xA;# 软件会根据访问时网页返回的有效 HTTP 状态码来判断可用性（当然超时也算），默认对返回 200 301 302 这三个 HTTP 状态码的视为有效，可以手动指定认为有效的 HTTP 状态码，但只能指定一个（你需要提前确定测试地址正常情况下会返回哪个状态码）&#xA;CloudflareST.exe -httping -httping-code 200&#xA;&#xA;# 通过 -url 参数来指定 HTTPing 测试地址（可以是任意网页 URL，不局限于具体文件地址）&#xA;CloudflareST.exe -httping -url https://cf.xiu2.xyz/url&#xA;&#xA;# 注意：如果测速地址为 HTTP 协议，记得加上 -tp 80（这个参数会影响 延迟测速/下载测速 时使用的端口）&#xA;# 同理，如果要测速 80 端口，那么也需要加上 -url 参数来指定一个 http:// 协议的地址才行（且该地址不会强制重定向至 HTTPS），如果是非 80 443 端口，那么需要确定该下载测速地址是否支持通过该端口访问。&#xA;CloudflareST.exe -httping -tp 80 -url http://cdn.cloudflare.steamstatic.com/steam/apps/5952/movie_max.webm&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;# 匹配指定地区(colo 机场三字码)&lt;/h4&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;code&gt;&lt;strong&gt;「 点击展开 查看内容 」&lt;/strong&gt;&lt;/code&gt;&lt;/summary&gt; &#xA; &lt;hr&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# 指定地区名后，延迟测速后得到的结果就都是指定地区的 IP 了（也可以继续进行下载测速）&#xA;# 节点地区名为当地 机场三字码，指定多个时用英文逗号分隔&#xA;&#xA;CloudflareST.exe -cfcolo HKG,KHH,NRT,LAX,SEA,SJC,FRA,MAD&#xA;&#xA;# 注意，该参数只有在 HTTPing 延迟测速模式下才可用（因为要访问网页来获得）&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;blockquote&gt; &#xA;  &lt;p&gt;Cloudflare 所有节点地区名（机场三字码），请看：&lt;a href=&#34;https://www.cloudflarestatus.com/&#34;&gt;https://www.cloudflarestatus.com/&lt;/a&gt;&lt;/p&gt; &#xA; &lt;/blockquote&gt; &#xA;&lt;/details&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;# 文件相对/绝对路径&lt;/h4&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;code&gt;&lt;strong&gt;「 点击展开 查看内容 」&lt;/strong&gt;&lt;/code&gt;&lt;/summary&gt; &#xA; &lt;hr&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# 指定 IPv4 数据文件，不显示结果直接退出，输出结果到文件（-p 值为 0）&#xA;CloudflareST.exe -f 1.txt -p 0 -dd&#xA;&#xA;# 指定 IPv4 数据文件，不输出结果到文件，直接显示结果（-p 值为 10 条，-o 值为空但引号不能少）&#xA;CloudflareST.exe -f 2.txt -o &#34;&#34; -p 10 -dd&#xA;&#xA;# 指定 IPv4 数据文件 及 输出结果到文件（相对路径，即当前目录下，如含空格请加上引号）&#xA;CloudflareST.exe -f 3.txt -o result.txt -dd&#xA;&#xA;&#xA;# 指定 IPv4 数据文件 及 输出结果到文件（相对路径，即当前目录内的 abc 文件夹下，如含空格请加上引号）&#xA;# Linux（CloudflareST 程序所在目录内的 abc 文件夹下）&#xA;./CloudflareST -f abc/3.txt -o abc/result.txt -dd&#xA;&#xA;# Windows（注意是反斜杠）&#xA;CloudflareST.exe -f abc\3.txt -o abc\result.txt -dd&#xA;&#xA;&#xA;# 指定 IPv4 数据文件 及 输出结果到文件（绝对路径，即 C:\abc\ 目录下，如含空格请加上引号）&#xA;# Linux（/abc/ 目录下）&#xA;./CloudflareST -f /abc/4.txt -o /abc/result.csv -dd&#xA;&#xA;# Windows（注意是反斜杠）&#xA;CloudflareST.exe -f C:\abc\4.txt -o C:\abc\result.csv -dd&#xA;&#xA;&#xA;# 如果要以【绝对路径】运行 CloudflareST，那么 -f / -o 参数中的文件名也必须是【绝对路径】，否则会报错找不到文件！&#xA;# Linux（/abc/ 目录下）&#xA;/abc/CloudflareST -f /abc/4.txt -o /abc/result.csv -dd&#xA;&#xA;# Windows（注意是反斜杠）&#xA;C:\abc\CloudflareST.exe -f C:\abc\4.txt -o C:\abc\result.csv -dd&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;# 测速其他端口&lt;/h4&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;code&gt;&lt;strong&gt;「 点击展开 查看内容 」&lt;/strong&gt;&lt;/code&gt;&lt;/summary&gt; &#xA; &lt;hr&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# 如果你想要测速非默认 443 的其他端口，则需要通过 -tp 参数指定（该参数会影响 延迟测速/下载测速 时使用的端口）&#xA;&#xA;# 如果要延迟测速 80 端口+下载测速（如果 -dd 禁用了下载测速则不需要），那么还需要指定 http:// 协议的下载测速地址才行（且该地址不会强制重定向至 HTTPS，因为那样就变成 443 端口了）&#xA;CloudflareST.exe -tp 80 -url http://cdn.cloudflare.steamstatic.com/steam/apps/5952/movie_max.webm&#xA;&#xA;# 如果是非 80 443 的其他端口，那么需要确定你使用的下载测速地址是否支持通过该非标端口访问。&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;# 自定义测速地址&lt;/h4&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;code&gt;&lt;strong&gt;「 点击展开 查看内容 」&lt;/strong&gt;&lt;/code&gt;&lt;/summary&gt; &#xA; &lt;hr&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# 该参数适用于下载测速 及 HTTP 协议的延迟测速，对于后者该地址可以是任意网页 URL（不局限于具体文件地址）&#xA;&#xA;# 地址要求：可以直接下载、文件大小超过 200MB、用的是 Cloudflare CDN&#xA;CloudflareST.exe -url https://cf.xiu2.xyz/url&#xA;&#xA;# 注意：如果测速地址为 HTTP 协议（该地址不能强制重定向至 HTTPS），记得加上 -tp 80（这个参数会影响 延迟测速/下载测速 时使用的端口），如果是非 80 443 端口，那么需要确定下载测速地址是否支持通过该端口访问。&#xA;CloudflareST.exe -tp 80 -url http://cdn.cloudflare.steamstatic.com/steam/apps/5952/movie_max.webm&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;# 自定义测速条件（指定 延迟/下载速度 的目标范围）&lt;/h4&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;code&gt;&lt;strong&gt;「 点击展开 查看内容 」&lt;/strong&gt;&lt;/code&gt;&lt;/summary&gt; &#xA; &lt;hr&gt; &#xA; &lt;blockquote&gt; &#xA;  &lt;p&gt;注意：延迟测速进度条右边的&lt;strong&gt;可用数量&lt;/strong&gt;，仅指延迟测速过程中&lt;strong&gt;未超时的 IP 数量&lt;/strong&gt;，和延迟上下限条件无关。&lt;/p&gt; &#xA; &lt;/blockquote&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;指定 &lt;strong&gt;[平均延迟下限]&lt;/strong&gt; 条件&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# 平均延迟下限：40 ms （一般除了移动直连香港外，几乎不存在低于 100ms 的，自行测试适合的下限延迟）&#xA;# 平均延迟下限和其他的上下限参数一样，都可以单独使用、互相搭配使用！&#xA;CloudflareST.exe -tll 40&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;仅指定 &lt;strong&gt;[平均延迟上限]&lt;/strong&gt; 条件&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# 平均延迟上限：200 ms，下载速度下限：0 MB/s，数量：10 个（可选）&#xA;# 即找到平均延迟低于 200 ms 的 IP，然后再按延迟从低到高进行 10 次下载测速&#xA;CloudflareST.exe -tl 200 -dn 10&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;blockquote&gt; &#xA;  &lt;p&gt;如果&lt;strong&gt;没有找到一个满足延迟&lt;/strong&gt;条件的 IP，那么不会输出任何内容。&lt;/p&gt; &#xA; &lt;/blockquote&gt; &#xA; &lt;hr&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;仅指定 &lt;strong&gt;[平均延迟上限]&lt;/strong&gt; 条件，且&lt;strong&gt;只延迟测速，不下载测速&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# 平均延迟上限：200 ms，下载速度下限：0 MB/s，数量：不知道多少 个&#xA;# 即只输出低于 200ms 的 IP，且不再下载测速（因为不再下载测速，所以 -dn 参数就无效了）&#xA;CloudflareST.exe -tl 200 -dd&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;hr&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;仅指定 &lt;strong&gt;[下载速度下限]&lt;/strong&gt; 条件&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# 平均延迟上限：9999 ms，下载速度下限：5 MB/s，数量：10 个（可选）&#xA;# 即需要找到 10 个平均延迟低于 9999 ms 且下载速度高于 5 MB/s 的 IP 才会停止测速&#xA;CloudflareST.exe -sl 5 -dn 10&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;blockquote&gt; &#xA;  &lt;p&gt;如果&lt;strong&gt;没有找到一个满足速度&lt;/strong&gt;条件的 IP，那么会&lt;strong&gt;忽略条件输出所有 IP 测速结果&lt;/strong&gt;（方便你下次测速时调整条件）。&lt;/p&gt; &#xA; &lt;/blockquote&gt; &#xA; &lt;blockquote&gt; &#xA;  &lt;p&gt;没有指定平均延迟上限时，如果一直&lt;strong&gt;凑不够&lt;/strong&gt;满足条件的 IP 数量，就会&lt;strong&gt;一直测速&lt;/strong&gt;下去。&lt;br&gt; 所以建议&lt;strong&gt;同时指定 [下载速度下限] + [平均延迟上限]&lt;/strong&gt;，这样测速到指定延迟上限还没凑够数量，就会终止测速。&lt;/p&gt; &#xA; &lt;/blockquote&gt; &#xA; &lt;hr&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;同时指定 &lt;strong&gt;[平均延迟上限] + [下载速度下限]&lt;/strong&gt; 条件&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# 平均延迟上限、下载速度下限均支持小数（如 -sl 0.5）&#xA;# 平均延迟上限：200 ms，下载速度下限：5.6 MB/s，数量：10 个（可选）&#xA;# 即需要找到 10 个平均延迟低于 200 ms 且下载速度高于 5 .6MB/s 的 IP 才会停止测速&#xA;CloudflareST.exe -tl 200 -sl 5.6 -dn 10&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;blockquote&gt; &#xA;  &lt;p&gt;如果&lt;strong&gt;没有找到一个满足延迟&lt;/strong&gt;条件的 IP，那么不会输出任何内容。&lt;br&gt; 如果&lt;strong&gt;没有找到一个满足速度&lt;/strong&gt;条件的 IP，那么会忽略条件输出所有 IP 测速结果（方便你下次测速时调整条件）。&lt;br&gt; 所以建议先不指定条件测速一遍，看看平均延迟和下载速度大概在什么范围，避免指定条件&lt;strong&gt;过低/过高&lt;/strong&gt;！&lt;/p&gt; &#xA; &lt;/blockquote&gt; &#xA; &lt;blockquote&gt; &#xA;  &lt;p&gt;因为Cloudflare 公开的 IP 段是&lt;strong&gt;回源 IP+任播 IP&lt;/strong&gt;，而&lt;strong&gt;回源 IP&lt;/strong&gt;是无法使用的，所以下载测速是 0.00。&lt;br&gt; 运行时可以加上 &lt;code&gt;-sl 0.01&lt;/code&gt;（下载速度下限），过滤掉&lt;strong&gt;回源 IP&lt;/strong&gt;（下载测速低于 0.01MB/s 的结果）。&lt;/p&gt; &#xA; &lt;/blockquote&gt; &#xA;&lt;/details&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;# 单独对一个或多个 IP 测速&lt;/h4&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;code&gt;&lt;strong&gt;「 点击展开 查看内容 」&lt;/strong&gt;&lt;/code&gt;&lt;/summary&gt; &#xA; &lt;hr&gt; &#xA; &lt;p&gt;&lt;strong&gt;方式 一&lt;/strong&gt;： 直接通过参数指定要测速的 IP 段数据。&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# 先进入 CloudflareST 所在目录，然后运行：&#xA;# Windows 系统（在 CMD 中运行）&#xA;CloudflareST.exe -ip 1.1.1.1,2.2.2.2/24,2606:4700::/32&#xA;&#xA;# Linux 系统&#xA;./CloudflareST -ip 1.1.1.1,2.2.2.2/24,2606:4700::/32&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;hr&gt; &#xA; &lt;p&gt;&lt;strong&gt;方式 二&lt;/strong&gt;： 或者把这些 IP 按如下格式写入到任意文本文件中，例如：&lt;code&gt;1.txt&lt;/code&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code&gt;1.1.1.1&#xA;1.1.1.200&#xA;1.0.0.1/24&#xA;2606:4700::/32&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;blockquote&gt; &#xA;  &lt;p&gt;单个 IP 的话可以省略 &lt;code&gt;/32&lt;/code&gt; 子网掩码了（即 &lt;code&gt;1.1.1.1&lt;/code&gt;等同于 &lt;code&gt;1.1.1.1/32&lt;/code&gt;）。&lt;br&gt; 子网掩码 &lt;code&gt;/24&lt;/code&gt; 指的是这个 IP 最后一段，即 &lt;code&gt;1.0.0.1~1.0.0.255&lt;/code&gt;。&lt;/p&gt; &#xA; &lt;/blockquote&gt; &#xA; &lt;p&gt;然后运行 CloudflareST 时加上启动参数 &lt;code&gt;-f 1.txt&lt;/code&gt; 来指定 IP 段数据文件。&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# 先进入 CloudflareST 所在目录，然后运行：&#xA;# Windows 系统（在 CMD 中运行）&#xA;CloudflareST.exe -f 1.txt&#xA;&#xA;# Linux 系统&#xA;./CloudflareST -f 1.txt&#xA;&#xA;# 对于 1.0.0.1/24 这样的 IP 段只会随机最后一段（1.0.0.1~255），如果要测速该 IP 段中的所有 IP，请加上 -allip 参数。&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;# 一劳永逸加速所有使用 Cloudflare CDN 的网站（不需要再一个个添加域名到 Hosts 了）&lt;/h4&gt; &#xA;&lt;p&gt;我以前说过，开发该软件项目的目的就是为了通过&lt;strong&gt;改 Hosts 的方式来加速访问使用 Cloudflare CDN 的网站&lt;/strong&gt;。&lt;/p&gt; &#xA;&lt;p&gt;但就如 &lt;a href=&#34;https://github.com/XIU2/CloudflareSpeedTest/issues/8&#34;&gt;&lt;strong&gt;#8&lt;/strong&gt;&lt;/a&gt; 所说，一个个添加域名到 Hosts 实在&lt;strong&gt;太麻烦&lt;/strong&gt;了，于是我就找到了个&lt;strong&gt;一劳永逸&lt;/strong&gt;的办法！可以看这个 &lt;a href=&#34;https://github.com/XIU2/CloudflareSpeedTest/discussions/71&#34;&gt;&lt;strong&gt;还在一个个添加 Hosts？完美本地加速所有使用 Cloudflare CDN 的网站方法来了！&lt;/strong&gt;&lt;/a&gt; 和另一个&lt;a href=&#34;https://github.com/XIU2/CloudflareSpeedTest/issues/115&#34;&gt;依靠本地 DNS 服务来修改域名解析 IP 为自选 IP&lt;/a&gt; 的教程。&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;# 自动更新 Hosts&lt;/h4&gt; &#xA;&lt;p&gt;考虑到很多人获得最快 Cloudflare CDN IP 后，需要替换 Hosts 文件中的 IP。&lt;/p&gt; &#xA;&lt;p&gt;可以看这个 &lt;a href=&#34;https://github.com/XIU2/CloudflareSpeedTest/issues/42&#34;&gt;&lt;strong&gt;Issues&lt;/strong&gt;&lt;/a&gt; 获取 &lt;strong&gt;Windows/Linux 自动更新 Hosts 脚本&lt;/strong&gt;！&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;问题反馈&lt;/h2&gt; &#xA;&lt;p&gt;如果你遇到什么问题，可以先去 &lt;a href=&#34;https://github.com/XIU2/CloudflareSpeedTest/issues&#34;&gt;&lt;strong&gt;Issues&lt;/strong&gt;&lt;/a&gt; 里看看是否有别人问过了（记得去看下 &lt;a href=&#34;https://github.com/XIU2/CloudflareSpeedTest/issues?q=is%3Aissue+is%3Aclosed&#34;&gt;&lt;strong&gt;Closed&lt;/strong&gt;&lt;/a&gt; 的）。&lt;br&gt; 如果没找到类似问题，请新开个 &lt;a href=&#34;https://github.com/XIU2/CloudflareSpeedTest/issues/new&#34;&gt;&lt;strong&gt;Issues&lt;/strong&gt;&lt;/a&gt; 来告诉我！&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;em&gt;有问题请&lt;strong&gt;大胆告诉我&lt;/strong&gt;，描述越详细越好（随时可远程协助），如果不说那我怎么去完善功能或&lt;del&gt;修复 BUG&lt;/del&gt; 呢？！&lt;/em&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;赞赏支持&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://cdn.staticaly.com/gh/XIU2/XIU2/master/img/zs-01.png&#34; alt=&#34;微信赞赏&#34;&gt;&lt;img src=&#34;https://cdn.staticaly.com/gh/XIU2/XIU2/master/img/zs-02.png&#34; alt=&#34;支付宝赞赏&#34;&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;衍生项目&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;em&gt;&lt;a href=&#34;https://github.com/xianshenglu/cloudflare-ip-tester-app&#34;&gt;https://github.com/xianshenglu/cloudflare-ip-tester-app&lt;/a&gt;&lt;/em&gt;&lt;br&gt; &lt;em&gt;&lt;strong&gt;CloudflareST 安卓版 APP &lt;a href=&#34;https://github.com/XIU2/CloudflareSpeedTest/issues/202&#34;&gt;#202&lt;/a&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;em&gt;&lt;a href=&#34;https://github.com/mingxiaoyu/luci-app-cloudflarespeedtest&#34;&gt;https://github.com/mingxiaoyu/luci-app-cloudflarespeedtest&lt;/a&gt;&lt;/em&gt;&lt;br&gt; &lt;em&gt;&lt;strong&gt;CloudflareST OpenWrt 路由器插件版 &lt;a href=&#34;https://github.com/XIU2/CloudflareSpeedTest/issues/174&#34;&gt;#174&lt;/a&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;em&gt;&lt;a href=&#34;https://github.com/immortalwrt-collections/openwrt-cdnspeedtest&#34;&gt;https://github.com/immortalwrt-collections/openwrt-cdnspeedtest&lt;/a&gt;&lt;/em&gt;&lt;br&gt; &lt;em&gt;&lt;strong&gt;CloudflareST OpenWrt 原生编译版本 &lt;a href=&#34;https://github.com/XIU2/CloudflareSpeedTest/discussions/64&#34;&gt;#64&lt;/a&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;em&gt;&lt;a href=&#34;https://github.com/hoseinnikkhah/CloudflareSpeedTest-English&#34;&gt;https://github.com/hoseinnikkhah/CloudflareSpeedTest-English&lt;/a&gt;&lt;/em&gt;&lt;br&gt; &lt;em&gt;&lt;strong&gt;English language version of CloudflareST (Text language differences only) &lt;a href=&#34;https://github.com/XIU2/CloudflareSpeedTest/discussions/68&#34;&gt;#64&lt;/a&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;em&gt;此处仅收集了在本项目 Issues 中宣传过的部分 CloudflareST 相关衍生项目，如果有遗漏可以告诉我~&lt;/em&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;感谢项目&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;em&gt;&lt;a href=&#34;https://github.com/Spedoske/CloudflareScanner&#34;&gt;https://github.com/Spedoske/CloudflareScanner&lt;/a&gt;&lt;/em&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;em&gt;因为该项目已经很长时间没更新了，而我又产生了很多功能需求，所以我临时学了下 Go 语言就上手了（菜）...&lt;/em&gt;&lt;br&gt; &lt;em&gt;本软件基于该项目制作，但&lt;strong&gt;已添加大量功能及修复 BUG&lt;/strong&gt;，并根据大家的使用反馈积极添加、优化功能（闲）...&lt;/em&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;手动编译&lt;/h2&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;code&gt;&lt;strong&gt;「 点击展开 查看内容 」&lt;/strong&gt;&lt;/code&gt;&lt;/summary&gt; &#xA; &lt;hr&gt; &#xA; &lt;p&gt;为了方便，我是在编译的时候将版本号写入代码中的 version 变量，因此你手动编译时，需要像下面这样在 &lt;code&gt;go build&lt;/code&gt; 命令后面加上 &lt;code&gt;-ldflags&lt;/code&gt; 参数来指定版本号：&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;go build -ldflags &#34;-s -w -X main.version=v2.3.3&#34;&#xA;# 在 CloudflareSpeedTest 目录中通过命令行（例如 CMD、Bat 脚本）运行该命令，即可编译一个可在和当前设备同样系统、位数、架构的环境下运行的二进制程序（Go 会自动检测你的系统位数、架构）且版本号为 v2.3.3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;如果想要在 Windows 64位系统下编译&lt;strong&gt;其他系统、架构、位数&lt;/strong&gt;，那么需要指定 &lt;strong&gt;GOOS&lt;/strong&gt; 和 &lt;strong&gt;GOARCH&lt;/strong&gt; 变量。&lt;/p&gt; &#xA; &lt;p&gt;例如在 Windows 系统下编译一个适用于 &lt;strong&gt;Linux 系统 amd 架构 64 位&lt;/strong&gt;的二进制程序：&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bat&#34;&gt;SET GOOS=linux&#xA;SET GOARCH=amd64&#xA;go build -ldflags &#34;-s -w -X main.version=v2.3.3&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;例如在 Linux 系统下编译一个适用于 &lt;strong&gt;Windows 系统 amd 架构 32 位&lt;/strong&gt;的二进制程序：&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;GOOS=windows&#xA;GOARCH=386&#xA;go build -ldflags &#34;-s -w -X main.version=v2.3.3&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;blockquote&gt; &#xA;  &lt;p&gt;可以运行 &lt;code&gt;go tool dist list&lt;/code&gt; 来查看当前 Go 版本支持编译哪些组合。&lt;/p&gt; &#xA; &lt;/blockquote&gt; &#xA; &lt;hr&gt; &#xA; &lt;p&gt;当然，为了方便批量编译，我会专门指定一个变量为版本号，后续编译直接调用该版本号变量即可。&lt;br&gt; 同时，批量编译的话，还需要分开放到不同文件夹才行（或者文件名不同），需要加上 &lt;code&gt;-o&lt;/code&gt; 参数指定。&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bat&#34;&gt;:: Windows 系统下是这样：&#xA;SET version=v2.3.3&#xA;SET GOOS=linux&#xA;SET GOARCH=amd64&#xA;go build -o Releases\CloudflareST_linux_amd64\CloudflareST -ldflags &#34;-s -w -X main.version=%version%&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Linux 系统下是这样：&#xA;version=v2.3.3&#xA;GOOS=windows&#xA;GOARCH=386&#xA;go build -o Releases/CloudflareST_windows_386/CloudflareST.exe -ldflags &#34;-s -w -X main.version=${version}&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The GPL-3.0 License.&lt;/p&gt;</summary>
  </entry>
</feed>