<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-07-01T02:13:18Z</updated>
  <subtitle>Monthly Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>techschool/simplebank</title>
    <updated>2023-07-01T02:13:18Z</updated>
    <id>tag:github.com,2023-07-01:/techschool/simplebank</id>
    <link href="https://github.com/techschool/simplebank" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Backend master class: build a simple bank service in Go&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Simple Bank&lt;/h1&gt; &#xA;&lt;p&gt;This repository contains the codes of the &lt;a href=&#34;https://bit.ly/backendmaster&#34;&gt;Backend Master Class&lt;/a&gt; course by &lt;a href=&#34;https://bit.ly/m/techschool&#34;&gt;TECH SCHOOL&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/techschool/simplebank/master/backend-master.png&#34; alt=&#34;Backend master class&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can also find it on Udemy at &lt;a href=&#34;https://bit.ly/backendudemy&#34;&gt;this link&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;And don&#39;t hesitate to &lt;a href=&#34;https://bit.ly/techschooldc&#34;&gt;join Tech School&#39;s Discord group&lt;/a&gt; to chat directly with me and other students.&lt;/p&gt; &#xA;&lt;p&gt;In this course, you will learn step-by-step how to design, develop and deploy a backend web service from scratch. I believe the best way to learn programming is to build a real application. Therefore, throughout the course, you will learn how to build a backend web service for a simple bank. It will provide APIs for the frontend to do the following things:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Create and manage bank accounts.&lt;/li&gt; &#xA; &lt;li&gt;Record all balance changes to each of the accounts.&lt;/li&gt; &#xA; &lt;li&gt;Perform a money transfer between 2 accounts.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The programming language we will use to develop the service is Golang, but the course is not just about coding in Go. You will learn a lot of different topics regarding backend web development. They are presented in 5 sections:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;In the 1st section, you will learn deeply about how to design the database, generate codes to talk to the DB in a consistent and reliable way using transactions, understand the DB&amp;nbsp;isolation levels, and how to use it correctly in production. Besides the database, you will also learn how to use docker for local development, how to use Git to manage your codes, and how to use GitHub Action to run unit tests automatically.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;In the 2nd section, you will learn how to build a set of RESTful HTTP&amp;nbsp;APIs&amp;nbsp;using Gin - one of the most popular Golang frameworks for building web services. This includes everything from loading app configs, mocking DB for more robust unit tests, handling errors, authenticating users, and securing the APIs with JWT and PASETO&amp;nbsp;access tokens.&amp;nbsp;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;In the 3rd section, you will learn how to build your app with Docker and deploy it to a production Kubernetes cluster on AWS. The lectures are very detailed with a step-by-step guide, from how to build a minimal docker image, set up a free-tier AWS account, create a production database, store and retrieve production secrets, create a Kubernetes cluster with EKS, use GitHub Action to automatically build and deploy the image to the EKS cluster, buy a domain name and route the traffics to the service, secure the connection with HTTPS and auto-renew TLS certificate from Let&#39;s Encrypt.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;In the 4th section, we will discuss several advanced backend topics such as managing user sessions, building gRPC APIs, using gRPC gateway to serve both gRPC and HTTP requests at the same time, embedding Swagger documentation as part of the backend service, partially updating a record using optional parameters, and writing structured logger HTTP&amp;nbsp;middlewares and gRPC interceptors.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Then the 5th section will introduce you to asynchronous processing in Golang using background workers and Redis as its message queue, and how to gracefully shut down the server to protect your processing resources. As this part is still a work in progress, we will keep making and uploading new videos about new topics in the future, such as: sending emails, gracefully shutting down servers, CORS, bulk inserts, etc. So please come back here to check them out from time to time.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;This course is designed with a lot of details, so that everyone, even with very little programming experience can understand and do it by themselves. I strongly believe that after the course, you would be able to work much more confidently and effectively on your projects.&lt;/p&gt; &#xA;&lt;h2&gt;Course videos&lt;/h2&gt; &#xA;&lt;h3&gt;Section 1: Working with database [Postgres]&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Lecture #1: &lt;a href=&#34;https://www.youtube.com/watch?v=rx6CPDK_5mU&amp;amp;list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&amp;amp;index=1&#34;&gt;Design DB schema and generate SQL code with dbdiagram.io&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Lecture #2: &lt;a href=&#34;https://www.youtube.com/watch?v=Q9ipbLeqmQo&amp;amp;list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&amp;amp;index=2&#34;&gt;Install &amp;amp; use Docker + Postgres + TablePlus to create DB schema&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Lecture #3: &lt;a href=&#34;https://www.youtube.com/watch?v=0CYkrGIJkpw&amp;amp;list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&amp;amp;index=3&#34;&gt;How to write &amp;amp; run database migration in Golang&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Lecture #4: &lt;a href=&#34;https://www.youtube.com/watch?v=prh0hTyI1sU&amp;amp;list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&amp;amp;index=4&#34;&gt;Generate CRUD Golang code from SQL | Compare db/sql, gorm, sqlx &amp;amp; sqlc&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Lecture #5: &lt;a href=&#34;https://www.youtube.com/watch?v=phHDfOHB2PU&amp;amp;list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&amp;amp;index=5&#34;&gt;Write unit tests for database CRUD with random data in Golang&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Lecture #6: &lt;a href=&#34;https://www.youtube.com/watch?v=gBh__1eFwVI&amp;amp;list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&amp;amp;index=6&#34;&gt;A clean way to implement database transaction in Golang&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Lecture #7: &lt;a href=&#34;https://www.youtube.com/watch?v=G2aggv_3Bbg&amp;amp;list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&amp;amp;index=7&#34;&gt;DB transaction lock &amp;amp; How to handle deadlock in Golang&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Lecture #8: &lt;a href=&#34;https://www.youtube.com/watch?v=qn3-5wdOfoA&amp;amp;list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&amp;amp;index=8&#34;&gt;How to avoid deadlock in DB transaction? Queries order matters!&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Lecture #9: &lt;a href=&#34;https://www.youtube.com/watch?v=4EajrPgJAk0&amp;amp;list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&amp;amp;index=9&#34;&gt;Deeply understand transaction isolation levels &amp;amp; read phenomena in MySQL &amp;amp; PostgreSQL&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Lecture #10: &lt;a href=&#34;https://www.youtube.com/watch?v=3mzQRJY1GVE&amp;amp;list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&amp;amp;index=10&#34;&gt;Setup Github Actions for Golang + Postgres to run automated tests&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Section 2: Building RESTful HTTP JSON API [Gin]&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Lecture #11: &lt;a href=&#34;https://www.youtube.com/watch?v=n_Y_YisgqTw&amp;amp;list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&amp;amp;index=11&#34;&gt;Implement RESTful HTTP API in Go using Gin&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Lecture #12: &lt;a href=&#34;https://www.youtube.com/watch?v=n5p8HkO6bnE&amp;amp;list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&amp;amp;index=12&#34;&gt;Load config from file &amp;amp; environment variables in Go with Viper&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Lecture #13: &lt;a href=&#34;https://www.youtube.com/watch?v=rL0aeMutoJ0&amp;amp;list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&amp;amp;index=13&#34;&gt;Mock DB for testing HTTP API in Go and achieve 100% coverage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Lecture #14: &lt;a href=&#34;https://www.youtube.com/watch?v=5q_wsashJZA&amp;amp;list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&amp;amp;index=14&#34;&gt;Implement transfer money API with a custom params validator&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Lecture #15: &lt;a href=&#34;https://www.youtube.com/watch?v=D4VtNC3vQUs&amp;amp;list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&amp;amp;index=15&#34;&gt;Add users table with unique &amp;amp; foreign key constraints in PostgreSQL&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Lecture #16: &lt;a href=&#34;https://www.youtube.com/watch?v=mJ8b5GcvoxQ&amp;amp;list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&amp;amp;index=16&#34;&gt;How to handle DB errors in Golang correctly&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Lecture #17: &lt;a href=&#34;https://www.youtube.com/watch?v=B3xnJI2lHmc&amp;amp;list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&amp;amp;index=17&#34;&gt;How to securely store passwords? Hash password in Go with Bcrypt!&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Lecture #18: &lt;a href=&#34;https://www.youtube.com/watch?v=DuzBE0jKOgE&amp;amp;list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&amp;amp;index=18&#34;&gt;How to write stronger unit tests with a custom gomock matcher&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Lecture #19: &lt;a href=&#34;https://www.youtube.com/watch?v=nBGx-q52KAY&amp;amp;list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&amp;amp;index=19&#34;&gt;Why PASETO is better than JWT for token-based authentication?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Lecture #20: &lt;a href=&#34;https://www.youtube.com/watch?v=Oi4FHDGILuY&amp;amp;list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&amp;amp;index=20&#34;&gt;How to create and verify JWT &amp;amp; PASETO token in Golang&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Lecture #21: &lt;a href=&#34;https://www.youtube.com/watch?v=lnHbZ9GOGAs&amp;amp;list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&amp;amp;index=21&#34;&gt;Implement login user API that returns PASETO or JWT access token in Go&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Lecture #22: &lt;a href=&#34;https://www.youtube.com/watch?v=Pw8fVBRS4jA&amp;amp;list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&amp;amp;index=22&#34;&gt;Implement authentication middleware and authorization rules in Golang using Gin&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Section 3: Deploying the application to production [Kubernetes + AWS]&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Lecture #23: &lt;a href=&#34;https://www.youtube.com/watch?v=p1dwLKAxUxA&amp;amp;list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&amp;amp;index=23&#34;&gt;Build a minimal Golang Docker image with a multistage Dockerfile&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Lecture #24: &lt;a href=&#34;https://www.youtube.com/watch?v=VcFnqQarpjI&amp;amp;list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&amp;amp;index=24&#34;&gt;How to use docker network to connect 2 stand-alone containers&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Lecture #25: &lt;a href=&#34;https://www.youtube.com/watch?v=jf6sQsz0M1M&amp;amp;list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&amp;amp;index=25&#34;&gt;How to write docker-compose file and control service start-up orders with wait-for.sh&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Lecture #26: &lt;a href=&#34;https://www.youtube.com/watch?v=4UqN1P8pIkM&amp;amp;list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&amp;amp;index=26&#34;&gt;How to create a free tier AWS account&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Lecture #27: &lt;a href=&#34;https://www.youtube.com/watch?v=3M4MPmSWt9E&amp;amp;list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&amp;amp;index=27&#34;&gt;Auto build &amp;amp; push docker image to AWS ECR with Github Actions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Lecture #28: &lt;a href=&#34;https://www.youtube.com/watch?v=0EaG3T4Q5fQ&amp;amp;list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&amp;amp;index=28&#34;&gt;How to create a production DB on AWS RDS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Lecture #29: &lt;a href=&#34;https://www.youtube.com/watch?v=3i1mQ_Ye8jE&amp;amp;list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&amp;amp;index=29&#34;&gt;Store &amp;amp; retrieve production secrets with AWS secrets manager&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Lecture #30: &lt;a href=&#34;https://www.youtube.com/watch?v=TxnCMhYhqRU&amp;amp;list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&amp;amp;index=30&#34;&gt;Kubernetes architecture &amp;amp; How to create an EKS cluster on AWS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Lecture #31: &lt;a href=&#34;https://www.youtube.com/watch?v=hwMevai3_wQ&amp;amp;list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&amp;amp;index=31&#34;&gt;How to use kubectl &amp;amp; k9s to connect to a kubernetes cluster on AWS EKS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Lecture #32: &lt;a href=&#34;https://www.youtube.com/watch?v=PH-Mcd0Rs1w&amp;amp;list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&amp;amp;index=32&#34;&gt;How to deploy a web app to Kubernetes cluster on AWS EKS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Lecture #33: &lt;a href=&#34;https://www.youtube.com/watch?v=-JF2ukmW3i8&amp;amp;list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&amp;amp;index=33&#34;&gt;Register a domain name &amp;amp; set up A-record using Route53&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Lecture #34: &lt;a href=&#34;https://www.youtube.com/watch?v=lBrqP6FkNsU&amp;amp;list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&amp;amp;index=34&#34;&gt;How to use Ingress to route traffics to different services in Kubernetes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Lecture #35: &lt;a href=&#34;https://www.youtube.com/watch?v=nU4FTjrgSKI&amp;amp;list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&amp;amp;index=35&#34;&gt;Automatic issue TLS certificates in Kubernetes with Let&#39;s Encrypt&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Lecture #36: &lt;a href=&#34;https://www.youtube.com/watch?v=GVY-zze0V_U&amp;amp;list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&amp;amp;index=36&#34;&gt;Automatic deploy to Kubernetes with Github Action&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Section 4: Advanced Backend Topics [Sessions + gRPC]&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Lecture #37: &lt;a href=&#34;https://www.youtube.com/watch?v=rT20ylRLm5U&amp;amp;list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&amp;amp;index=37&#34;&gt;How to manage user session with refresh token - Golang&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Lecture #38: &lt;a href=&#34;https://www.youtube.com/watch?v=dGfVwsPr-IU&amp;amp;list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&amp;amp;index=38&#34;&gt;Generate DB documentation page and schema SQL dump from DBML&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Lecture #39: &lt;a href=&#34;https://www.youtube.com/watch?v=mRGnA3wPxMM&amp;amp;list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&amp;amp;index=39&#34;&gt;Introduction to gRPC&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Lecture #40: &lt;a href=&#34;https://www.youtube.com/watch?v=mVWgEmyAhvM&amp;amp;list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&amp;amp;index=40&#34;&gt;Define gRPC API and generate Go code with protobuf&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Lecture #41: &lt;a href=&#34;https://www.youtube.com/watch?v=BkfBJIS0_ro&amp;amp;list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&amp;amp;index=41&#34;&gt;How to run a golang gRPC server and call its API&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Lecture #42: &lt;a href=&#34;https://www.youtube.com/watch?v=7xiWqyZW9lE&amp;amp;list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&amp;amp;index=42&#34;&gt;Implement gRPC API to create and login users in Go&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Lecture #43: &lt;a href=&#34;https://www.youtube.com/watch?v=3FfDH3d0aHs&amp;amp;list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&amp;amp;index=43&#34;&gt;Write code once, serve both gRPC &amp;amp; HTTP requests&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Lecture #44: &lt;a href=&#34;https://www.youtube.com/watch?v=Sno10WQ21Zs&amp;amp;list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&amp;amp;index=44&#34;&gt;How to extract info from gRPC metadata&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Lecture #45: &lt;a href=&#34;https://www.youtube.com/watch?v=Uwkxxee7tvk&amp;amp;list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&amp;amp;index=45&#34;&gt;Automatic generate &amp;amp; serve Swagger docs from Go server&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Lecture #46: &lt;a href=&#34;https://www.youtube.com/watch?v=xNgOIm86N5Q&amp;amp;list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&amp;amp;index=46&#34;&gt;Embed static frontend files inside Golang backend server&#39;s binary&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Lecture #47: &lt;a href=&#34;https://www.youtube.com/watch?v=CxZ9hMtmZtc&amp;amp;list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&amp;amp;index=47&#34;&gt;Validate gRPC parameters and send human/machine friendly response&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Lecture #48: &lt;a href=&#34;https://www.youtube.com/watch?v=TG43cMpaxlI&amp;amp;list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&amp;amp;index=48&#34;&gt;Run DB migrations directly inside Golang code&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Lecture #49: &lt;a href=&#34;https://www.youtube.com/watch?v=I2sbw1PzzW0&amp;amp;list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&amp;amp;index=49&#34;&gt;Partial update DB record with SQLC nullable parameters&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Lecture #50: &lt;a href=&#34;https://www.youtube.com/watch?v=ygqSHIEc8sc&amp;amp;list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&amp;amp;index=50&#34;&gt;Build gRPC update API with optional parameters&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Lecture #51: &lt;a href=&#34;https://www.youtube.com/watch?v=_jqNs3d99ps&amp;amp;list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&amp;amp;index=51&#34;&gt;Add authorization to protect gRPC API&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Lecture #52: &lt;a href=&#34;https://www.youtube.com/watch?v=tTAxLGrDmPo&amp;amp;list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&amp;amp;index=52&#34;&gt;Write structured logs for gRPC APIs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Lecture #53: &lt;a href=&#34;https://www.youtube.com/watch?v=Lbiz-PZNiU0&amp;amp;list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&amp;amp;index=53&#34;&gt;How to write HTTP logger middleware in Go&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Section 5: Asynchronous processing with background workers [Asynq + Redis]&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Lecture #54: &lt;a href=&#34;https://www.youtube.com/watch?v=XOXdYs8mKkI&amp;amp;list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&amp;amp;index=54&#34;&gt;Implement background worker in Go with Redis and Asynq&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Lecture #55: &lt;a href=&#34;https://www.youtube.com/watch?v=eXYKGPEXocM&amp;amp;list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&amp;amp;index=55&#34;&gt;Integrate async worker to Go web server&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Lecture #56: &lt;a href=&#34;https://www.youtube.com/watch?v=ZfFxdPbgN88&amp;amp;list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&amp;amp;index=56&#34;&gt;Send async tasks to Redis within a DB transaction&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Lecture #57: &lt;a href=&#34;https://www.youtube.com/watch?v=YgfmPIJRg2U&amp;amp;list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&amp;amp;index=57&#34;&gt;How to handle errors and print logs for Go Asynq workers&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Lecture #58: &lt;a href=&#34;https://www.youtube.com/watch?v=ILNiZgseLUI&amp;amp;list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&amp;amp;index=58&#34;&gt;A bit of delay might be good for your async tasks&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Lecture #59: &lt;a href=&#34;https://www.youtube.com/watch?v=L9TbZxpykLQ&amp;amp;list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&amp;amp;index=59&#34;&gt;How to send emails in Go via Gmail&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Lecture #60: &lt;a href=&#34;https://www.youtube.com/watch?v=0UwZGM9iqTE&amp;amp;list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&amp;amp;index=60&#34;&gt;How to skip test in Go and config test flag in vscode&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Lecture #61: &lt;a href=&#34;https://www.youtube.com/watch?v=lEHkwDPHrcc&amp;amp;list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&amp;amp;index=61&#34;&gt;Email verification in Go: design DB and send email&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Lecture #62: &lt;a href=&#34;https://www.youtube.com/watch?v=50ZN-4UNwnY&amp;amp;list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&amp;amp;index=62&#34;&gt;Implement email verification API in Go&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Lecture #63: &lt;a href=&#34;https://www.youtube.com/watch?v=QFxZlKb7W2k&amp;amp;list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&amp;amp;index=63&#34;&gt;Unit test gRPC API with mock DB &amp;amp; Redis&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Lecture #64: &lt;a href=&#34;https://www.youtube.com/watch?v=MI7ucbAlZPM&amp;amp;list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&amp;amp;index=64&#34;&gt;How to test a gRPC API that requires authentication&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Simple bank service&lt;/h2&gt; &#xA;&lt;p&gt;The service that we’re going to build is a simple bank. It will provide APIs for the frontend to do following things:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Create and manage bank accounts, which are composed of owner’s name, balance, and currency.&lt;/li&gt; &#xA; &lt;li&gt;Record all balance changes to each of the account. So every time some money is added to or subtracted from the account, an account entry record will be created.&lt;/li&gt; &#xA; &lt;li&gt;Perform a money transfer between 2 accounts. This should happen within a transaction, so that either both accounts’ balance are updated successfully or none of them are.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Setup local development&lt;/h2&gt; &#xA;&lt;h3&gt;Install tools&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://www.docker.com/products/docker-desktop&#34;&gt;Docker desktop&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://tableplus.com/&#34;&gt;TablePlus&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://golang.org/&#34;&gt;Golang&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://brew.sh/&#34;&gt;Homebrew&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/golang-migrate/migrate/tree/master/cmd/migrate&#34;&gt;Migrate&lt;/a&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew install golang-migrate&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://dbdocs.io/docs&#34;&gt;DB Docs&lt;/a&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm install -g dbdocs&#xA;dbdocs login&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://www.dbml.org/cli/#installation&#34;&gt;DBML CLI&lt;/a&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm install -g @dbml/cli&#xA;dbml2sql --version&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/kyleconroy/sqlc#installation&#34;&gt;Sqlc&lt;/a&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew install sqlc&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/golang/mock&#34;&gt;Gomock&lt;/a&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;go install github.com/golang/mock/mockgen@v1.6.0&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Setup infrastructure&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Create the bank-network&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make network&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Start postgres container:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make postgres&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Create simple_bank database:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make createdb&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run db migration up all versions:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make migrateup&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run db migration up 1 version:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make migrateup1&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run db migration down all versions:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make migratedown&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run db migration down 1 version:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make migratedown1&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Documentation&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Generate DB documentation:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make db_docs&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Access the DB documentation at &lt;a href=&#34;https://dbdocs.io/techschool.guru/simple_bank&#34;&gt;this address&lt;/a&gt;. Password: &lt;code&gt;secret&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;How to generate code&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Generate schema SQL file with DBML:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make db_schema&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Generate SQL CRUD with sqlc:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make sqlc&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Generate DB mock with gomock:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make mock&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Create a new db migration:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make new_migration name=&amp;lt;migration_name&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;How to run&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Run server:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make server&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run test:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make test&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Deploy to kubernetes cluster&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://kubernetes.github.io/ingress-nginx/deploy/#aws&#34;&gt;Install nginx ingress controller&lt;/a&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v0.48.1/deploy/static/provider/aws/deploy.yaml&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://cert-manager.io/docs/installation/kubernetes/&#34;&gt;Install cert-manager&lt;/a&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;kubectl apply -f https://github.com/jetstack/cert-manager/releases/download/v1.4.0/cert-manager.yaml&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>tmc/langchaingo</title>
    <updated>2023-07-01T02:13:18Z</updated>
    <id>tag:github.com,2023-07-01:/tmc/langchaingo</id>
    <link href="https://github.com/tmc/langchaingo" rel="alternate"></link>
    <summary type="html">&lt;p&gt;LangChain for Go&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;🦜️🔗 LangChain Go&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/tmc/langchaingo&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/go.dev-reference-007d9c?logo=go&amp;amp;logoColor=white&amp;amp;style=flat-square&#34; alt=&#34;go.dev reference&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/tmc/langchaingo&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/tmc/langchaingo&#34; alt=&#34;scorecard&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;⚡ Building applications with LLMs through composability ⚡&lt;/p&gt; &#xA;&lt;h2&gt;🤔 What is this?&lt;/h2&gt; &#xA;&lt;p&gt;This is the Go language implementation of LangChain.&lt;/p&gt; &#xA;&lt;h2&gt;📖 Documentation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/tmc/langchaingo&#34;&gt;API Reference&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;🎉 Examples&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/tmc/langchaingo/main/examples&#34;&gt;./examples&lt;/a&gt; for example usage.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;context&#34;&#xA;&#x9;&#34;log&#34;&#xA;&#xA;&#x9;&#34;github.com/tmc/langchaingo/llms/openai&#34;&#xA;)&#xA;&#xA;func main() {&#xA;&#x9;llm, err := openai.New()&#xA;&#x9;if err != nil {&#xA;&#x9;&#x9;log.Fatal(err)&#xA;&#x9;}&#xA;&#x9;prompt := &#34;What would be a good company name for a company that makes colorful socks?&#34;&#xA;&#x9;completion, err := llm.Call(context.Background(), prompt)&#xA;&#x9;if err != nil {&#xA;&#x9;&#x9;log.Fatal(err)&#xA;&#x9;}&#xA;&#x9;log.Println(completion)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ go run .&#xA;&#xA;Socktastic!&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>pocketbase/pocketbase</title>
    <updated>2023-07-01T02:13:18Z</updated>
    <id>tag:github.com,2023-07-01:/pocketbase/pocketbase</id>
    <link href="https://github.com/pocketbase/pocketbase" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Open Source realtime backend in 1 file&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://pocketbase.io&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt; &lt;img src=&#34;https://i.imgur.com/5qimnm5.png&#34; alt=&#34;PocketBase - open source backend in 1 file&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/pocketbase/pocketbase/actions/workflows/release.yaml&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;img src=&#34;https://github.com/pocketbase/pocketbase/actions/workflows/release.yaml/badge.svg?sanitize=true&#34; alt=&#34;build&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/pocketbase/pocketbase/releases&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/pocketbase/pocketbase.svg?sanitize=true&#34; alt=&#34;Latest releases&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pkg.go.dev/github.com/pocketbase/pocketbase&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;img src=&#34;https://godoc.org/github.com/ganigeorgiev/fexpr?status.svg?sanitize=true&#34; alt=&#34;Go package documentation&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://pocketbase.io&#34;&gt;PocketBase&lt;/a&gt; is an open source Go backend, consisting of:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;embedded database (&lt;em&gt;SQLite&lt;/em&gt;) with &lt;strong&gt;realtime subscriptions&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;built-in &lt;strong&gt;files and users management&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;convenient &lt;strong&gt;Admin dashboard UI&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;and simple &lt;strong&gt;REST-ish API&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;For documentation and examples, please visit &lt;a href=&#34;https://pocketbase.io/docs&#34;&gt;https://pocketbase.io/docs&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;⚠️ Please keep in mind that PocketBase is still under active development and therefore full backward compatibility is not guaranteed before reaching v1.0.0.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;API SDK clients&lt;/h2&gt; &#xA;&lt;p&gt;The easiest way to interact with the API is to use one of the official SDK clients:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;JavaScript - &lt;a href=&#34;https://github.com/pocketbase/js-sdk&#34;&gt;pocketbase/js-sdk&lt;/a&gt;&lt;/strong&gt; (&lt;em&gt;browser and node&lt;/em&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Dart - &lt;a href=&#34;https://github.com/pocketbase/dart-sdk&#34;&gt;pocketbase/dart-sdk&lt;/a&gt;&lt;/strong&gt; (&lt;em&gt;web, mobile, desktop&lt;/em&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;PocketBase could be &lt;a href=&#34;https://github.com/pocketbase/pocketbase/releases&#34;&gt;downloaded directly as a standalone app&lt;/a&gt; or it could be used as a Go framework/toolkit which allows you to build your own custom app specific business logic and still have a single portable executable at the end.&lt;/p&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# go 1.18+&#xA;go get github.com/pocketbase/pocketbase&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;For Windows, you may have to use go 1.19+ due to an incorrect js mime type in the Windows Registry (see &lt;a href=&#34;https://github.com/pocketbase/pocketbase/issues/6&#34;&gt;issue#6&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Example&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;    &#34;log&#34;&#xA;    &#34;net/http&#34;&#xA;&#xA;    &#34;github.com/labstack/echo/v5&#34;&#xA;    &#34;github.com/pocketbase/pocketbase&#34;&#xA;    &#34;github.com/pocketbase/pocketbase/apis&#34;&#xA;    &#34;github.com/pocketbase/pocketbase/core&#34;&#xA;)&#xA;&#xA;func main() {&#xA;    app := pocketbase.New()&#xA;&#xA;    app.OnBeforeServe().Add(func(e *core.ServeEvent) error {&#xA;        // add new &#34;GET /hello&#34; route to the app router (echo)&#xA;        e.Router.AddRoute(echo.Route{&#xA;            Method: http.MethodGet,&#xA;            Path:   &#34;/hello&#34;,&#xA;            Handler: func(c echo.Context) error {&#xA;                return c.String(200, &#34;Hello world!&#34;)&#xA;            },&#xA;            Middlewares: []echo.MiddlewareFunc{&#xA;                apis.ActivityLogger(app),&#xA;            },&#xA;        })&#xA;&#xA;        return nil&#xA;    })&#xA;&#xA;    if err := app.Start(); err != nil {&#xA;        log.Fatal(err)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Running and building&lt;/h3&gt; &#xA;&lt;p&gt;Running/building the application is the same as for any other Go program, aka. just &lt;code&gt;go run&lt;/code&gt; and &lt;code&gt;go build&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;PocketBase embeds SQLite, but doesn&#39;t require CGO.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;If CGO is enabled (aka. &lt;code&gt;CGO_ENABLED=1&lt;/code&gt;), it will use &lt;a href=&#34;https://pkg.go.dev/github.com/mattn/go-sqlite3&#34;&gt;mattn/go-sqlite3&lt;/a&gt; driver, otherwise - &lt;a href=&#34;https://pkg.go.dev/modernc.org/sqlite&#34;&gt;modernc.org/sqlite&lt;/a&gt;. Enable CGO only if you really need to squeeze the read/write query performance at the expense of complicating cross compilation.&lt;/p&gt; &#xA;&lt;p&gt;To build the minimal standalone executable, like the prebuilt ones in the releases page, you can simply run &lt;code&gt;go build&lt;/code&gt; inside the &lt;code&gt;examples/base&lt;/code&gt; directory:&lt;/p&gt; &#xA;&lt;ol start=&#34;0&#34;&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://go.dev/doc/install&#34;&gt;Install Go 1.18+&lt;/a&gt; (&lt;em&gt;if you haven&#39;t already&lt;/em&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Clone/download the repo&lt;/li&gt; &#xA; &lt;li&gt;Navigate to &lt;code&gt;examples/base&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build&lt;/code&gt; (&lt;em&gt;&lt;a href=&#34;https://go.dev/doc/install/source#environment&#34;&gt;https://go.dev/doc/install/source#environment&lt;/a&gt;&lt;/em&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Start the created executable by running &lt;code&gt;./base serve&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;The supported build targets by the non-cgo driver at the moment are:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;darwin  amd64&#xA;darwin  arm64&#xA;freebsd amd64&#xA;freebsd arm64&#xA;linux   386&#xA;linux   amd64&#xA;linux   arm&#xA;linux   arm64&#xA;linux   ppc64le&#xA;linux   riscv64&#xA;windows amd64&#xA;windows arm64&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Testing&lt;/h3&gt; &#xA;&lt;p&gt;PocketBase comes with mixed bag of unit and integration tests. To run them, use the default &lt;code&gt;go test&lt;/code&gt; command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;go test ./...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Check also the &lt;a href=&#34;http://pocketbase.io/docs/testing&#34;&gt;Testing guide&lt;/a&gt; to learn how to write your own custom application tests.&lt;/p&gt; &#xA;&lt;h2&gt;Security&lt;/h2&gt; &#xA;&lt;p&gt;If you discover a security vulnerability within PocketBase, please send an e-mail to &lt;strong&gt;support at pocketbase.io&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;All reports will be promptly addressed, and you&#39;ll be credited accordingly.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;PocketBase is free and open source project licensed under the &lt;a href=&#34;https://raw.githubusercontent.com/pocketbase/pocketbase/master/LICENSE.md&#34;&gt;MIT License&lt;/a&gt;. You are free to do whatever you want with it, even offering it as a paid service.&lt;/p&gt; &#xA;&lt;p&gt;You could help continuing its development by:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pocketbase/pocketbase/master/CONTRIBUTING.md&#34;&gt;Contribute to the source code&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pocketbase/pocketbase/issues&#34;&gt;Suggest new features and report issues&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pocketbase.io/support-us&#34;&gt;Donate a small amount&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;PRs for &lt;em&gt;small features&lt;/em&gt; (eg. adding new OAuth2 providers), bug and documentation fixes, etc. are more than welcome.&lt;/p&gt; &#xA;&lt;p&gt;But please refrain creating PRs for &lt;em&gt;big features&lt;/em&gt; without previously discussing the implementation details. Reviewing big PRs often requires a lot of time and tedious back-and-forth communication. PocketBase has a &lt;a href=&#34;https://github.com/orgs/pocketbase/projects/2&#34;&gt;roadmap&lt;/a&gt; and I try to work on issues in a specific order and such PRs often come in out of nowhere and skew all initial planning.&lt;/p&gt; &#xA;&lt;p&gt;Don&#39;t get upset if I close your PR, even if it is well executed and tested. This doesn&#39;t mean that it will never be merged. Later we can always refer to it and/or take pieces of your implementation when the time comes to work on the issue (don&#39;t worry you&#39;ll be credited in the release notes).&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Please also note that PocketBase was initially created to serve as a new backend for my other open source project - &lt;a href=&#34;https://presentator.io&#34;&gt;Presentator&lt;/a&gt; (see &lt;a href=&#34;https://github.com/presentator/presentator/issues/183&#34;&gt;#183&lt;/a&gt;), so all feature requests will be first aligned with what we need for Presentator v3.&lt;/em&gt;&lt;/p&gt;</summary>
  </entry>
</feed>