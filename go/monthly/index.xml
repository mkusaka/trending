<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-02T02:40:18Z</updated>
  <subtitle>Monthly Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>derailed/k9s</title>
    <updated>2022-06-02T02:40:18Z</updated>
    <id>tag:github.com,2022-06-02:/derailed/k9s</id>
    <link href="https://github.com/derailed/k9s" rel="alternate"></link>
    <summary type="html">&lt;p&gt;üê∂ Kubernetes CLI To Manage Your Clusters In Style!&lt;/p&gt;&lt;hr&gt;&lt;img src=&#34;https://raw.githubusercontent.com/derailed/k9s/master/assets/k9s.png&#34; alt=&#34;k9s&#34;&gt; &#xA;&lt;h2&gt;K9s - Kubernetes CLI To Manage Your Clusters In Style!&lt;/h2&gt; &#xA;&lt;p&gt;K9s provides a terminal UI to interact with your Kubernetes clusters. The aim of this project is to make it easier to navigate, observe and manage your applications in the wild. K9s continually watches Kubernetes for changes and offers subsequent commands to interact with your observed resources.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Note...&lt;/h2&gt; &#xA;&lt;p&gt;As you may know k9s is not pimped out by a big corporation with deep pockets. It is a complex OSS project that demands a lot of my time to maintain and support. K9s will always remain OSS and therefore free! That said if you feel, k9s makes your day to day Kubernetes journey a tad brighter, please consider sponsoring us or purchase a &lt;a href=&#34;https://k9salpha.io&#34;&gt;K9sAlpha license&lt;/a&gt;. Your donations will go a long way in keeping our servers lights on and beers in our fridge!&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Thank you!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://goreportcard.com/report/github.com/derailed/k9s&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/derailed/k9s?&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://golangci.com/r/github.com/derailed/k9s&#34;&gt;&lt;img src=&#34;https://github.com/golangci/golangci-web/raw/master/src/assets/images/badge_a_plus_flat.svg?sanitize=true&#34; alt=&#34;golangci badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codebeat.co/projects/github-com-derailed-k9s-master&#34;&gt;&lt;img src=&#34;https://codebeat.co/badges/89e5a80e-dfe8-4426-acf6-6be781e0a12e&#34; alt=&#34;codebeat badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://travis-ci.com/derailed/k9s&#34;&gt;&lt;img src=&#34;https://travis-ci.com/derailed/k9s.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://quay.io/repository/derailed/k9s&#34;&gt;&lt;img src=&#34;https://quay.io/repository/derailed/k9s/status&#34; alt=&#34;Docker Repository on Quay&#34; title=&#34;Docker Repository on Quay&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/derailed/k9s/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release-pre/derailed/k9s.svg?sanitize=true&#34; alt=&#34;release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/mum4k/termdash/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-Apache%202.0-blue.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/derailed/k9s/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/downloads/derailed/k9s/total.svg?sanitize=true&#34; alt=&#34;Releases&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Please refer to our &lt;a href=&#34;https://k9scli.io&#34;&gt;K9s documentation&lt;/a&gt; site for installation, usage, customization and tips.&lt;/p&gt; &#xA;&lt;h2&gt;Slack Channel&lt;/h2&gt; &#xA;&lt;p&gt;Wanna discuss K9s features with your fellow &lt;code&gt;K9sers&lt;/code&gt; or simply show your support for this tool?&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Channel: &lt;a href=&#34;https://k9sers.slack.com/&#34;&gt;K9ersSlack&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Invite: &lt;a href=&#34;https://join.slack.com/t/k9sers/shared_invite/enQtOTA5MDEyNzI5MTU0LWQ1ZGI3MzliYzZhZWEyNzYxYzA3NjE0YTk1YmFmNzViZjIyNzhkZGI0MmJjYzhlNjdlMGJhYzE2ZGU1NjkyNTM&#34;&gt;K9slackers Invite&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;K9s is available on Linux, macOS and Windows platforms.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Binaries for Linux, Windows and Mac are available as tarballs in the &lt;a href=&#34;https://github.com/derailed/k9s/releases&#34;&gt;release&lt;/a&gt; page.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Via Homebrew for macOS or LinuxBrew for Linux&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;brew install k9s&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Via &lt;a href=&#34;https://www.macports.org&#34;&gt;MacPorts&lt;/a&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo port install k9s&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;On Arch Linux&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;pacman -S k9s&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;On OpenSUSE Linux distribution&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;zypper install k9s&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Via &lt;a href=&#34;https://scoop.sh&#34;&gt;Scoop&lt;/a&gt; for Windows&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;scoop install k9s&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Via &lt;a href=&#34;https://chocolatey.org/packages/k9s&#34;&gt;Chocolatey&lt;/a&gt; for Windows&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;choco install k9s&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Via a GO install&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# NOTE: The dev version will be in effect!&#xA;go get -u github.com/derailed/k9s&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Via &lt;a href=&#34;https://webinstall.dev&#34;&gt;Webi&lt;/a&gt; for Linux and macOS&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;curl -sS https://webinstall.dev/k9s | bash&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Via &lt;a href=&#34;https://webinstall.dev&#34;&gt;Webi&lt;/a&gt; for Windows&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;curl.exe -A MS https://webinstall.dev/k9s | powershell&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Building From Source&lt;/h2&gt; &#xA;&lt;p&gt;K9s is currently using go v1.14 or above. In order to build K9s from source you must:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Clone the repo&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Build and run the executable&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;make build &amp;amp;&amp;amp; ./execs/k9s&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Running with Docker&lt;/h2&gt; &#xA;&lt;h3&gt;Running the official Docker image&lt;/h3&gt; &#xA;&lt;p&gt;You can run k9s as a Docker container by mounting your &lt;code&gt;KUBECONFIG&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker run --rm -it -v $KUBECONFIG:/root/.kube/config quay.io/derailed/k9s&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For default path it would be:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker run --rm -it -v ~/.kube/config:/root/.kube/config quay.io/derailed/k9s&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Building your own Docker image&lt;/h3&gt; &#xA;&lt;p&gt;You can build your own Docker image of k9s from the &lt;a href=&#34;https://raw.githubusercontent.com/derailed/k9s/master/Dockerfile&#34;&gt;Dockerfile&lt;/a&gt; with the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker build -t k9s-docker:0.1 .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can get the latest stable &lt;code&gt;kubectl&lt;/code&gt; version and pass it to the &lt;code&gt;docker build&lt;/code&gt; command with the &lt;code&gt;--build-arg&lt;/code&gt; option. You can use the &lt;code&gt;--build-arg&lt;/code&gt; option to pass any valid &lt;code&gt;kubectl&lt;/code&gt; version (like &lt;code&gt;v1.18.0&lt;/code&gt; or &lt;code&gt;v1.19.1&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;KUBECTL_VERSION=$(make kubectl-stable-version 2&amp;gt;/dev/null)&#xA;docker build --build-arg KUBECTL_VERSION=${KUBECTL_VERSION} -t k9s-docker:0.1 .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run your container:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker run --rm -it -v ~/.kube/config:/root/.kube/config k9s-docker:0.1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;PreFlight Checks&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;K9s uses 256 colors terminal mode. On `Nix system make sure TERM is set accordingly.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;export TERM=xterm-256color&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;In order to issue manifest edit commands make sure your EDITOR env is set.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# Kubectl edit command will use this env var.&#xA;export EDITOR=my_fav_editor&#xA;# Should your editor deal with streamed vs on disk files differently, also set...&#xA;export K9S_EDITOR=my_fav_editor&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;K9s prefers recent kubernetes versions ie 1.16+&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;The Command Line&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# List all available CLI options&#xA;k9s help&#xA;# To get info about K9s runtime (logs, configs, etc..)&#xA;k9s info&#xA;# To run K9s in a given namespace&#xA;k9s -n mycoolns&#xA;# Start K9s in an existing KubeConfig context&#xA;k9s --context coolCtx&#xA;# Start K9s in readonly mode - with all cluster modification commands disabled&#xA;k9s --readonly&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Logs&lt;/h2&gt; &#xA;&lt;p&gt;Given the nature of the ui k9s does produce logs to a specific location. To view the logs and turn on debug mode, use the following commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;k9s info&#xA;# Will produces something like this&#xA;#  ____  __.________&#xA;# |    |/ _/   __   \______&#xA;# |      &amp;lt; \____    /  ___/&#xA;# |    |  \   /    /\___ \&#xA;# |____|__ \ /____//____  &amp;gt;&#xA;#         \/            \/&#xA;#&#xA;# Configuration:   ~/Library/Preferences/k9s/config.yml&#xA;# Logs:            /var/folders/8c/hh6rqbgs5nx_c_8k9_17ghfh0000gn/T/k9s-fernand.log&#xA;# Screen Dumps:    /var/folders/8c/hh6rqbgs5nx_c_8k9_17ghfh0000gn/T/k9s-screens-fernand&#xA;&#xA;# To view k9s logs&#xA;tail -f /var/folders/8c/hh6rqbgs5nx_c_8k9_17ghfh0000gn/T/k9s-fernand.log&#xA;&#xA;# Start K9s in debug mode&#xA;k9s -l debug&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Key Bindings&lt;/h2&gt; &#xA;&lt;p&gt;K9s uses aliases to navigate most K8s resources.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Action&lt;/th&gt; &#xA;   &lt;th&gt;Command&lt;/th&gt; &#xA;   &lt;th&gt;Comment&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Show active keyboard mnemonics and help&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;?&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Show all available resource alias&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;ctrl-a&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;To bail out of K9s&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;:q&lt;/code&gt;, &lt;code&gt;ctrl-c&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;View a Kubernetes resource using singular/plural or short-name&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;:&lt;/code&gt;po‚èé&lt;/td&gt; &#xA;   &lt;td&gt;accepts singular, plural, short-name or alias ie pod or pods&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;View a Kubernetes resource in a given namespace&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;:&lt;/code&gt;alias namespace‚èé&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Filter out a resource view given a filter&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;/&lt;/code&gt;filter‚èé&lt;/td&gt; &#xA;   &lt;td&gt;Regex2 supported ie `fred&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Inverse regex filter&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;/&lt;/code&gt;! filter‚èé&lt;/td&gt; &#xA;   &lt;td&gt;Keep everything that &lt;em&gt;doesn&#39;t&lt;/em&gt; match.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Filter resource view by labels&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;/&lt;/code&gt;-l label-selector‚èé&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Fuzzy find a resource given a filter&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;/&lt;/code&gt;-f filter‚èé&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Bails out of view/command/filter mode&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;esc&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Key mapping to describe, view, edit, view logs,...&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;d&lt;/code&gt;,&lt;code&gt;v&lt;/code&gt;, &lt;code&gt;e&lt;/code&gt;, &lt;code&gt;l&lt;/code&gt;,...&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;To view and switch to another Kubernetes context&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;:&lt;/code&gt;ctx‚èé&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;To view and switch to another Kubernetes context&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;:&lt;/code&gt;ctx context-name‚èé&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;To view and switch to another Kubernetes namespace&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;:&lt;/code&gt;ns‚èé&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;To view all saved resources&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;:&lt;/code&gt;screendump or sd‚èé&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;To delete a resource (TAB and ENTER to confirm)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;ctrl-d&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;To kill a resource (no confirmation dialog!)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;ctrl-k&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Launch pulses view&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;:&lt;/code&gt;pulses or pu‚èé&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Launch XRay view&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;:&lt;/code&gt;xray RESOURCE [NAMESPACE]‚èé&lt;/td&gt; &#xA;   &lt;td&gt;RESOURCE can be one of po, svc, dp, rs, sts, ds, NAMESPACE is optional&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Launch Popeye view&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;:&lt;/code&gt;popeye or pop‚èé&lt;/td&gt; &#xA;   &lt;td&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/derailed/k9s/master/#popeye&#34;&gt;popeye&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Screenshots&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Pods &lt;img src=&#34;https://raw.githubusercontent.com/derailed/k9s/master/assets/screen_po.png&#34;&gt;&lt;/li&gt; &#xA; &lt;li&gt;Logs &lt;img src=&#34;https://raw.githubusercontent.com/derailed/k9s/master/assets/screen_logs.png&#34;&gt;&lt;/li&gt; &#xA; &lt;li&gt;Deployments &lt;img src=&#34;https://raw.githubusercontent.com/derailed/k9s/master/assets/screen_dp.png&#34;&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;hr&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Demo Videos/Recordings&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/boaW9odvRCc&#34;&gt;k9s Kubernetes UI - A Terminal-Based Vim-Like Kubernetes Dashboard&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/wG8KCwDAhnw&#34;&gt;K9s v0.21.3&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/kj-WverKZ24&#34;&gt;K9s v0.19.X&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=zMnD5e53yRw&#34;&gt;K9s v0.18.0&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=7S33CNLAofk&amp;amp;feature=youtu.be&#34;&gt;K9s v0.17.0&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://asciinema.org/a/UbXKPal6IWpTaVAjBBFmizcGN&#34;&gt;K9s Pulses&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/7Fx4XQ2ftpM&#34;&gt;K9s v0.15.1&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=qaeR2iK7U0o&amp;amp;t=15s&#34;&gt;K9s v0.13.0&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=bxKfqumjW4I&#34;&gt;K9s v0.9.0&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/83jYehwlql8&#34;&gt;K9s v0.7.0 Features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/k7zseUhaXeU&#34;&gt;K9s v0 Demo&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;K9s Configuration&lt;/h2&gt; &#xA;&lt;p&gt;K9s keeps its configurations inside of a &lt;code&gt;k9s&lt;/code&gt; directory and the location depends on your operating system. K9s leverages &lt;a href=&#34;https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html&#34;&gt;XDG&lt;/a&gt; to load its various configurations files. For information on the default locations for your OS please see &lt;a href=&#34;https://github.com/adrg/xdg/raw/master/README.md&#34;&gt;this link&lt;/a&gt;. If you are still confused a quick &lt;code&gt;k9s info&lt;/code&gt; will reveal where k9s is loading its configurations from. Alternatively, you can set &lt;code&gt;K9SCONFIG&lt;/code&gt; to tell K9s the directory location to pull its configurations from.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Unix&lt;/th&gt; &#xA;   &lt;th&gt;macOS&lt;/th&gt; &#xA;   &lt;th&gt;Windows&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;~/.config/k9s&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;~/Library/Application Support/k9s&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;%LOCALAPPDATA%\k9s&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;NOTE: This is still in flux and will change while in pre-release stage!&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;# $XDG_CONFIG_HOME/k9s/config.yml&#xA;k9s:&#xA;  # Represents ui poll intervals. Default 2secs&#xA;  refreshRate: 2&#xA;  # Number of retries once the connection to the api-server is lost. Default 15.&#xA;  maxConnRetry: 5&#xA;  # Enable mouse support. Default false&#xA;  enableMouse: true&#xA;  # Set to true to hide K9s header. Default false&#xA;  headless: false&#xA;  # Set to true to hide K9s crumbs. Default false&#xA;  crumbsless: false&#xA;  # Indicates whether modification commands like delete/kill/edit are disabled. Default is false&#xA;  readOnly: false&#xA;  # Toggles icons display as not all terminal support these chars.&#xA;  noIcons: false&#xA;  # Logs configuration&#xA;  logger:&#xA;    # Defines the number of lines to return. Default 100&#xA;    tail: 200&#xA;    # Defines the total number of log lines to allow in the view. Default 1000&#xA;    buffer: 500&#xA;    # Represents how far to go back in the log timeline in seconds. Setting to -1 will show all available logs. Default is 5min.&#xA;    sinceSeconds: 300&#xA;    # Go full screen while displaying logs. Default false&#xA;    fullScreenLogs: false&#xA;    # Toggles log line wrap. Default false&#xA;    textWrap: false&#xA;    # Toggles log line timestamp info. Default false&#xA;    showTime: false&#xA;  # Indicates the current kube context. Defaults to current context&#xA;  currentContext: minikube&#xA;  # Indicates the current kube cluster. Defaults to current context cluster&#xA;  currentCluster: minikube&#xA;  # Persists per cluster preferences for favorite namespaces and view.&#xA;  clusters:&#xA;    coolio:&#xA;      namespace:&#xA;        active: coolio&#xA;        # With this set, the favorites list won&#39;t be updated as you switch namespaces&#xA;        lockFavorites: false&#xA;        favorites:&#xA;        - cassandra&#xA;        - default&#xA;      view:&#xA;        active: po&#xA;      featureGates:&#xA;        # Toggles NodeShell support. Allow K9s to shell into nodes if needed. Default false.&#xA;        nodeShell: false&#xA;      # Provide shell pod customization of feature gate is enabled&#xA;      shellPod:&#xA;        # The shell pod image to use.&#xA;        image: killerAdmin&#xA;        # The namespace to launch to shell pod into.&#xA;        namespace: fred&#xA;        # The resource limit to set on the shell pod.&#xA;        limits:&#xA;          cpu: 100m&#xA;          memory: 100Mi&#xA;      # The IP Address to use when launching a port-forward.&#xA;      portForwardAddress: 1.2.3.4&#xA;    kind:&#xA;      namespace:&#xA;        active: all&#xA;        favorites:&#xA;        - all&#xA;        - kube-system&#xA;        - default&#xA;      view:&#xA;        active: dp&#xA;  # The path to screen dump. Default: &#39;%temp_dir%/k9s-screens-%username%&#39; (k9s info) &#xA;  screenDumpDir: /tmp&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;&lt;a id=&#34;popeye&#34;&gt;&lt;/a&gt;Popeye Configuration&lt;/h2&gt; &#xA;&lt;p&gt;K9s has integration with &lt;a href=&#34;https://popeyecli.io/&#34;&gt;Popeye&lt;/a&gt;, which is a Kubernetes cluster sanitizer. Popeye itself uses a configuration called &lt;code&gt;spinach.yml&lt;/code&gt;, but when integrating with K9s the cluster-specific file should be name &lt;code&gt;$XDG_CONFIG_HOME/k9s/&amp;lt;context&amp;gt;_spinach.yml&lt;/code&gt;. This allows you to have a different spinach config per cluster.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Node Shell&lt;/h2&gt; &#xA;&lt;p&gt;By enabling the nodeShell feature gate on a given cluster, K9s allows you to shell into your cluster nodes. Once enabled, you will have a new &lt;code&gt;s&lt;/code&gt; for &lt;code&gt;shell&lt;/code&gt; menu option while in node view. K9s will launch a pod on the selected node using a special k9s_shell pod. Furthermore, you can refine your shell pod by using a custom docker image preloaded with the shell tools you love. By default k9s uses a BusyBox image, but you can configure it as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;# $XDG_CONFIG_HOME/k9s/config.yml&#xA;k9s:&#xA;  clusters:&#xA;    # Configures node shell on cluster blee&#xA;    blee:&#xA;      featureGates:&#xA;        # You must enable the nodeShell feature gate to enable shelling into nodes&#xA;        nodeShell: true&#xA;      # You can also further tune the shell pod specification&#xA;      shellPod:&#xA;        image: cool_kid_admin:42&#xA;        namespace: blee&#xA;        limits:&#xA;          cpu: 100m&#xA;          memory: 100Mi&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Command Aliases&lt;/h2&gt; &#xA;&lt;p&gt;In K9s, you can define your very own command aliases (shortnames) to access your resources. In your &lt;code&gt;$HOME/.config/k9s&lt;/code&gt; define a file called &lt;code&gt;alias.yml&lt;/code&gt;. A K9s alias defines pairs of alias:gvr. A gvr (Group/Version/Resource) represents a fully qualified Kubernetes resource identifier. Here is an example of an alias file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;# $XDG_CONFIG_HOME/k9s/alias.yml&#xA;alias:&#xA;  pp: v1/pods&#xA;  crb: rbac.authorization.k8s.io/v1/clusterrolebindings&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Using this alias file, you can now type pp/crb to list pods or ClusterRoleBindings respectively.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;HotKey Support&lt;/h2&gt; &#xA;&lt;p&gt;Entering the command mode and typing a resource name or alias, could be cumbersome for navigating thru often used resources. We&#39;re introducing hotkeys that allows a user to define their own hotkeys to activate their favorite resource views. In order to enable hotkeys please follow these steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Create a file named &lt;code&gt;$XDG_CONFIG_HOME/k9s/hotkey.yml&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Add the following to your &lt;code&gt;hotkey.yml&lt;/code&gt;. You can use resource name/short name to specify a command ie same as typing it while in command mode.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;# $XDG_CONFIG_HOME/k9s/hotkey.yml&#xA;hotKey:&#xA;  # Hitting Shift-0 navigates to your pod view&#xA;  shift-0:&#xA;    shortCut:    Shift-0&#xA;    description: Viewing pods&#xA;    command:     pods&#xA;  # Hitting Shift-1 navigates to your deployments&#xA;  shift-1:&#xA;    shortCut:    Shift-1&#xA;    description: View deployments&#xA;    command:     dp&#xA;  # Hitting Shift-2 navigates to your xray deployments&#xA;  shift-2:&#xA;    shortCut:    Shift-2&#xA;    description: Xray Deployments&#xA;    command:     xray deploy&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Not feeling so hot? Your custom hotkeys will be listed in the help view &lt;code&gt;?&lt;/code&gt;. Also your hotkey file will be automatically reloaded so you can readily use your hotkeys as you define them.&lt;/p&gt; &#xA;&lt;p&gt;You can choose any keyboard shortcuts that make sense to you, provided they are not part of the standard K9s shortcuts list.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;NOTE: This feature/configuration might change in future releases!&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;FastForwards&lt;/h2&gt; &#xA;&lt;p&gt;As of v0.25.0, you can leverage the &lt;code&gt;FastForwards&lt;/code&gt; feature to tell K9s how to default port-forwards. In situations where you are dealing with multiple containers or containers exposing multiple ports, it can be cumbersome to specify the desired port-forward from the dialog as in most cases, you already know which container/port tuple you desire. For these use cases, you can now annotate your manifests with the following annotations:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;k9scli.io/auto-portforwards -&amp;gt; activates one or more port-forwards directly bypassing the port-forward dialog all together.&lt;/li&gt; &#xA; &lt;li&gt;k9scli.io/portforwards -&amp;gt; pre-selects one or more port-forwards when launching the port-forward dialog.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;The annotation value takes on the shape &lt;code&gt;container-name::[local-port:]container-port&lt;/code&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;NOTE: for either cases above you can specify the container port by name or number in your annotation!&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Example&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;# Pod fred&#xA;apiVersion: v1&#xA;kind: Pod&#xA;metadata:&#xA;  name: fred&#xA;  annotations:&#xA;    k9scli.io/auto-portforwards: zorg::5556        # =&amp;gt; will default to container zorg port 5556 and local port 5566. No port-forward dialog will be shown.&#xA;    # Or...&#xA;    k9scli.io/portforward: bozo::9090:p1           # =&amp;gt; launches the port-forward dialog selecting default port-forward on container bozo port named p1(8081)&#xA;                                                   # mapping to local port 9090.&#xA;    ...&#xA;spec:&#xA;  containers:&#xA;  - name: zorg&#xA;    ports:&#xA;    - name: p1&#xA;      containerPort: 5556&#xA;    ...&#xA;  - name: bozo&#xA;    ports:&#xA;    - name: p1&#xA;      containerPort: 8081&#xA;    - name: p2&#xA;      containerPort: 5555&#xA;    ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The annotation value must specify a container to forward to as well as a local port and container port. The container port may be specified as either a port number or port name. If the local port is omitted then the local port will default to the container port number. Here are a few examples:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;bozo::http - creates a pf on container &lt;code&gt;bozo&lt;/code&gt; with port name http. If http specifies port number 8080 then the local port will be 8080 as well.&lt;/li&gt; &#xA; &lt;li&gt;bozo::9090:http - creates a pf on container &lt;code&gt;bozo&lt;/code&gt; mapping local port 9090-&amp;gt;http(8080)&lt;/li&gt; &#xA; &lt;li&gt;bozo::9090:8080 - creates a pf on container &lt;code&gt;bozo&lt;/code&gt; mapping local port 9090-&amp;gt;8080&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Resource Custom Columns&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://youtu.be/7S33CNLAofk&#34;&gt;SneakCast v0.17.0 on The Beach! - Yup! sound is sucking but what a setting!&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can change which columns shows up for a given resource via custom views. To surface this feature, you will need to create a new configuration file, namely &lt;code&gt;$XDG_CONFIG_HOME/k9s/views.yml&lt;/code&gt;. This file leverages GVR (Group/Version/Resource) to configure the associated table view columns. If no GVR is found for a view the default rendering will take over (ie what we have now). Going wide will add all the remaining columns that are available on the given resource after your custom columns. To boot, you can edit your views config file and tune your resources views live!&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;NOTE: This is experimental and will most likely change as we iron this out!&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Here is a sample views configuration that customize a pods and services views.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;# $XDG_CONFIG_HOME/k9s/views.yml&#xA;k9s:&#xA;  views:&#xA;    v1/pods:&#xA;      columns:&#xA;        - AGE&#xA;        - NAMESPACE&#xA;        - NAME&#xA;        - IP&#xA;        - NODE&#xA;        - STATUS&#xA;        - READY&#xA;    v1/services:&#xA;      columns:&#xA;        - AGE&#xA;        - NAMESPACE&#xA;        - NAME&#xA;        - TYPE&#xA;        - CLUSTER-IP&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Plugins&lt;/h2&gt; &#xA;&lt;p&gt;K9s allows you to extend your command line and tooling by defining your very own cluster commands via plugins. K9s will look at &lt;code&gt;$XDG_CONFIG_HOME/k9s/plugin.yml&lt;/code&gt; to locate all available plugins. A plugin is defined as follows:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Shortcut option represents the key combination a user would type to activate the plugin&lt;/li&gt; &#xA; &lt;li&gt;Confirm option (when enabled) lets you see the command that is going to be executed and gives you an option to confirm or prevent execution&lt;/li&gt; &#xA; &lt;li&gt;Description will be printed next to the shortcut in the k9s menu&lt;/li&gt; &#xA; &lt;li&gt;Scopes defines a collection of resources names/short-names for the views associated with the plugin. You can specify &lt;code&gt;all&lt;/code&gt; to provide this shortcut for all views.&lt;/li&gt; &#xA; &lt;li&gt;Command represents ad-hoc commands the plugin runs upon activation&lt;/li&gt; &#xA; &lt;li&gt;Background specifies whether or not the command runs in the background&lt;/li&gt; &#xA; &lt;li&gt;Args specifies the various arguments that should apply to the command above&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;K9s does provide additional environment variables for you to customize your plugins arguments. Currently, the available environment variables are as follows:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;$RESOURCE_GROUP&lt;/code&gt; -- the selected resource group&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$RESOURCE_VERSION&lt;/code&gt; -- the selected resource api version&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$RESOURCE_NAME&lt;/code&gt; -- the selected resource name&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$NAMESPACE&lt;/code&gt; -- the selected resource namespace&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$NAME&lt;/code&gt; -- the selected resource name&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$CONTAINER&lt;/code&gt; -- the current container if applicable&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$FILTER&lt;/code&gt; -- the current filter if any&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$KUBECONFIG&lt;/code&gt; -- the KubeConfig location.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$CLUSTER&lt;/code&gt; the active cluster name&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$CONTEXT&lt;/code&gt; the active context name&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$USER&lt;/code&gt; the active user&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$GROUPS&lt;/code&gt; the active groups&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$POD&lt;/code&gt; while in a container view&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$COL-&amp;lt;RESOURCE_COLUMN_NAME&amp;gt;&lt;/code&gt; use a given column name for a viewed resource. Must be prefixed by &lt;code&gt;COL-&lt;/code&gt;!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Example&lt;/h3&gt; &#xA;&lt;p&gt;This defines a plugin for viewing logs on a selected pod using &lt;code&gt;ctrl-l&lt;/code&gt; for shortcut.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;# $XDG_CONFIG_HOME/k9s/plugin.yml&#xA;plugin:&#xA;  # Defines a plugin to provide a `ctrl-l` shortcut to tail the logs while in pod view.&#xA;  fred:&#xA;    shortCut: Ctrl-L&#xA;    confirm: false&#xA;    description: Pod logs&#xA;    scopes:&#xA;    - pods&#xA;    command: kubectl&#xA;    background: false&#xA;    args:&#xA;    - logs&#xA;    - -f&#xA;    - $NAME&#xA;    - -n&#xA;    - $NAMESPACE&#xA;    - --context&#xA;    - $CONTEXT&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;NOTE: This is an experimental feature! Options and layout may change in future K9s releases as this feature solidifies.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Benchmark Your Applications&lt;/h2&gt; &#xA;&lt;p&gt;K9s integrates &lt;a href=&#34;https://github.com/rakyll/hey&#34;&gt;Hey&lt;/a&gt; from the brilliant and super talented &lt;a href=&#34;https://github.com/rakyll&#34;&gt;Jaana Dogan&lt;/a&gt;. &lt;code&gt;Hey&lt;/code&gt; is a CLI tool to benchmark HTTP endpoints similar to AB bench. This preliminary feature currently supports benchmarking port-forwards and services (Read the paint on this is way fresh!).&lt;/p&gt; &#xA;&lt;p&gt;To setup a port-forward, you will need to navigate to the PodView, select a pod and a container that exposes a given port. Using &lt;code&gt;SHIFT-F&lt;/code&gt; a dialog comes up to allow you to specify a local port to forward. Once acknowledged, you can navigate to the PortForward view (alias &lt;code&gt;pf&lt;/code&gt;) listing out your active port-forwards. Selecting a port-forward and using &lt;code&gt;CTRL-B&lt;/code&gt; will run a benchmark on that HTTP endpoint. To view the results of your benchmark runs, go to the Benchmarks view (alias &lt;code&gt;be&lt;/code&gt;). You should now be able to select a benchmark and view the run stats details by pressing &lt;code&gt;&amp;lt;ENTER&amp;gt;&lt;/code&gt;. NOTE: Port-forwards only last for the duration of the K9s session and will be terminated upon exit.&lt;/p&gt; &#xA;&lt;p&gt;Initially, the benchmarks will run with the following defaults:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Concurrency Level: 1&lt;/li&gt; &#xA; &lt;li&gt;Number of Requests: 200&lt;/li&gt; &#xA; &lt;li&gt;HTTP Verb: GET&lt;/li&gt; &#xA; &lt;li&gt;Path: /&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The PortForward view is backed by a new K9s config file namely: &lt;code&gt;$XDG_CONFIG_HOME/k9s/bench-&amp;lt;k8s_context&amp;gt;.yml&lt;/code&gt; (note: extension is &lt;code&gt;yml&lt;/code&gt; and not &lt;code&gt;yaml&lt;/code&gt;). Each cluster you connect to will have its own bench config file, containing the name of the K8s context for the cluster. Changes to this file should automatically update the PortForward view to indicate how you want to run your benchmarks.&lt;/p&gt; &#xA;&lt;p&gt;Here is a sample benchmarks.yml configuration. Please keep in mind this file will likely change in subsequent releases!&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;# This file resides in $XDG_CONFIG_HOME/k9s/bench-mycontext.yml&#xA;benchmarks:&#xA;  # Indicates the default concurrency and number of requests setting if a container or service rule does not match.&#xA;  defaults:&#xA;    # One concurrent connection&#xA;    concurrency: 1&#xA;    # Number of requests that will be sent to an endpoint&#xA;    requests: 500&#xA;  containers:&#xA;    # Containers section allows you to configure your http container&#39;s endpoints and benchmarking settings.&#xA;    # NOTE: the container ID syntax uses namespace/pod-name:container-name&#xA;    default/nginx:nginx:&#xA;      # Benchmark a container named nginx using POST HTTP verb using http://localhost:port/bozo URL and headers.&#xA;      concurrency: 1&#xA;      requests: 10000&#xA;      http:&#xA;        path: /bozo&#xA;        method: POST&#xA;        body:&#xA;          {&#34;fred&#34;:&#34;blee&#34;}&#xA;        header:&#xA;          Accept:&#xA;            - text/html&#xA;          Content-Type:&#xA;            - application/json&#xA;  services:&#xA;    # Similarly you can Benchmark an HTTP service exposed either via NodePort, LoadBalancer types.&#xA;    # Service ID is ns/svc-name&#xA;    default/nginx:&#xA;      # Set the concurrency level&#xA;      concurrency: 5&#xA;      # Number of requests to be sent&#xA;      requests: 500&#xA;      http:&#xA;        method: GET&#xA;        # This setting will depend on whether service is NodePort or LoadBalancer. NodePort may require vendor port tunneling setting.&#xA;        # Set this to a node if NodePort or LB if applicable. IP or dns name.&#xA;        host: A.B.C.D&#xA;        path: /bumblebeetuna&#xA;      auth:&#xA;        user: jean-baptiste-emmanuel&#xA;        password: Zorg!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;K9s RBAC FU&lt;/h2&gt; &#xA;&lt;p&gt;On RBAC enabled clusters, you would need to give your users/groups capabilities so that they can use K9s to explore their Kubernetes cluster. K9s needs minimally read privileges at both the cluster and namespace level to display resources and metrics.&lt;/p&gt; &#xA;&lt;p&gt;These rules below are just suggestions. You will need to customize them based on your environment policies. If you need to edit/delete resources extra Fu will be necessary.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;NOTE! Cluster/Namespace access may change in the future as K9s evolves. NOTE! We expect K9s to keep running even in atrophied clusters/namespaces. Please file issues if this is not the case!&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Cluster RBAC scope&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;---&#xA;# K9s Reader ClusterRole&#xA;kind: ClusterRole&#xA;apiVersion: rbac.authorization.k8s.io/v1&#xA;metadata:&#xA;  name: k9s&#xA;rules:&#xA;  # Grants RO access to cluster resources node and namespace&#xA;  - apiGroups: [&#34;&#34;]&#xA;    resources: [&#34;nodes&#34;, &#34;namespaces&#34;]&#xA;    verbs: [&#34;get&#34;, &#34;list&#34;, &#34;watch&#34;]&#xA;  # Grants RO access to RBAC resources&#xA;  - apiGroups: [&#34;rbac.authorization.k8s.io&#34;]&#xA;    resources: [&#34;clusterroles&#34;, &#34;roles&#34;, &#34;clusterrolebindings&#34;, &#34;rolebindings&#34;]&#xA;    verbs: [&#34;get&#34;, &#34;list&#34;, &#34;watch&#34;]&#xA;  # Grants RO access to CRD resources&#xA;  - apiGroups: [&#34;apiextensions.k8s.io&#34;]&#xA;    resources: [&#34;customresourcedefinitions&#34;]&#xA;    verbs: [&#34;get&#34;, &#34;list&#34;, &#34;watch&#34;]&#xA;  # Grants RO access to metric server (if present)&#xA;  - apiGroups: [&#34;metrics.k8s.io&#34;]&#xA;    resources: [&#34;nodes&#34;, &#34;pods&#34;]&#xA;    verbs: [&#34;get&#34;, &#34;list&#34;, &#34;watch&#34;]&#xA;&#xA;---&#xA;# Sample K9s user ClusterRoleBinding&#xA;apiVersion: rbac.authorization.k8s.io/v1&#xA;kind: ClusterRoleBinding&#xA;metadata:&#xA;  name: k9s&#xA;subjects:&#xA;  - kind: User&#xA;    name: fernand&#xA;    apiGroup: rbac.authorization.k8s.io&#xA;roleRef:&#xA;  kind: ClusterRole&#xA;  name: k9s&#xA;  apiGroup: rbac.authorization.k8s.io&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Namespace RBAC scope&lt;/h3&gt; &#xA;&lt;p&gt;If your users are constrained to certain namespaces, K9s will need to following role to enable read access to namespaced resources.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;---&#xA;# K9s Reader Role (default namespace)&#xA;kind: Role&#xA;apiVersion: rbac.authorization.k8s.io/v1&#xA;metadata:&#xA;  name: k9s&#xA;  namespace: default&#xA;rules:&#xA;  # Grants RO access to most namespaced resources&#xA;  - apiGroups: [&#34;&#34;, &#34;apps&#34;, &#34;autoscaling&#34;, &#34;batch&#34;, &#34;extensions&#34;]&#xA;    resources: [&#34;*&#34;]&#xA;    verbs: [&#34;get&#34;, &#34;list&#34;, &#34;watch&#34;]&#xA;  # Grants RO access to metric server&#xA;  - apiGroups: [&#34;metrics.k8s.io&#34;]&#xA;    resources: [&#34;pods&#34;, &#34;nodes&#34;]&#xA;    verbs:&#xA;      - get&#xA;      - list&#xA;      - watch&#xA;&#xA;---&#xA;# Sample K9s user RoleBinding&#xA;apiVersion: rbac.authorization.k8s.io/v1&#xA;kind: RoleBinding&#xA;metadata:&#xA;  name: k9s&#xA;  namespace: default&#xA;subjects:&#xA;  - kind: User&#xA;    name: fernand&#xA;    apiGroup: rbac.authorization.k8s.io&#xA;roleRef:&#xA;  kind: Role&#xA;  name: k9s&#xA;  apiGroup: rbac.authorization.k8s.io&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Skins&lt;/h2&gt; &#xA;&lt;p&gt;Example: Dracula Skin ;)&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/derailed/k9s/master/assets/skins/dracula.png&#34; alt=&#34;Dracula Skin&#34;&gt; &#xA;&lt;p&gt;You can style K9s based on your own sense of look and style. Skins are YAML files, that enable a user to change the K9s presentation layer. K9s skins are loaded from &lt;code&gt;$XDG_CONFIG_HOME/k9s/skin.yml&lt;/code&gt;. If a skin file is detected then the skin would be loaded if not the current stock skin remains in effect.&lt;/p&gt; &#xA;&lt;p&gt;You can also change K9s skins based on the cluster you are connecting too. In this case, you can specify the skin file name as &lt;code&gt;$XDG_CONFIG_HOME/k9s/mycontext_skin.yml&lt;/code&gt; Below is a sample skin file, more skins are available in the skins directory in this repo, just simply copy any of these in your user&#39;s home dir as &lt;code&gt;skin.yml&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Colors can be defined by name or using a hex representation. Of recent, we&#39;ve added a color named &lt;code&gt;default&lt;/code&gt; to indicate a transparent background color to preserve your terminal background color settings if so desired.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;NOTE: This is very much an experimental feature at this time, more will be added/modified if this feature has legs so thread accordingly!&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;NOTE: Please see &lt;a href=&#34;https://k9scli.io/topics/skins/&#34;&gt;K9s Skins&lt;/a&gt; for a list of available colors.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;# Skin InTheNavy...&#xA;k9s:&#xA;  # General K9s styles&#xA;  body:&#xA;    fgColor: dodgerblue&#xA;    bgColor: &#39;#ffffff&#39;&#xA;    logoColor: &#39;#0000ff&#39;&#xA;  # ClusterInfoView styles.&#xA;  info:&#xA;    fgColor: lightskyblue&#xA;    sectionColor: steelblue&#xA;  # Help panel styles&#xA;  help:&#xA;    fgColor: white&#xA;    bgColor: black&#xA;    keyColor: cyan&#xA;    numKeyColor: blue&#xA;    sectionColor: gray&#xA;  frame:&#xA;    # Borders styles.&#xA;    border:&#xA;      fgColor: dodgerblue&#xA;      focusColor: aliceblue&#xA;    # MenuView attributes and styles.&#xA;    menu:&#xA;      fgColor: darkblue&#xA;      keyColor: cornflowerblue&#xA;      # Used for favorite namespaces&#xA;      numKeyColor: cadetblue&#xA;    # CrumbView attributes for history navigation.&#xA;    crumbs:&#xA;      fgColor: white&#xA;      bgColor: steelblue&#xA;      activeColor: skyblue&#xA;    # Resource status and update styles&#xA;    status:&#xA;      newColor: &#39;#00ff00&#39;&#xA;      modifyColor: powderblue&#xA;      addColor: lightskyblue&#xA;      errorColor: indianred&#xA;      highlightcolor: royalblue&#xA;      killColor: slategray&#xA;      completedColor: gray&#xA;    # Border title styles.&#xA;    title:&#xA;      fgColor: aqua&#xA;      bgColor: white&#xA;      highlightColor: skyblue&#xA;      counterColor: slateblue&#xA;      filterColor: slategray&#xA;  views:&#xA;    # TableView attributes.&#xA;    table:&#xA;      fgColor: blue&#xA;      bgColor: darkblue&#xA;      cursorColor: aqua&#xA;      # Header row styles.&#xA;      header:&#xA;        fgColor: white&#xA;        bgColor: darkblue&#xA;        sorterColor: orange&#xA;    # YAML info styles.&#xA;    yaml:&#xA;      keyColor: steelblue&#xA;      colonColor: blue&#xA;      valueColor: royalblue&#xA;    # Logs styles.&#xA;    logs:&#xA;      fgColor: white&#xA;      bgColor: black&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Contributors&lt;/h2&gt; &#xA;&lt;p&gt;Without the contributions from these fine folks, this project would be a total dud!&lt;/p&gt; &#xA;&lt;a href=&#34;https://github.com/derailed/k9s/graphs/contributors&#34;&gt; &lt;img src=&#34;https://contrib.rocks/image?repo=derailed/k9s&#34;&gt; &lt;/a&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Known Issues&lt;/h2&gt; &#xA;&lt;p&gt;This is still work in progress! If something is broken or there&#39;s a feature that you want, please file an issue and if so inclined submit a PR!&lt;/p&gt; &#xA;&lt;p&gt;K9s will most likely blow up if...&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;You&#39;re running older versions of Kubernetes. K9s works best on Kubernetes latest.&lt;/li&gt; &#xA; &lt;li&gt;You don&#39;t have enough RBAC fu to manage your cluster.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;ATTA Girls/Boys!&lt;/h2&gt; &#xA;&lt;p&gt;K9s sits on top of many open source projects and libraries. Our &lt;em&gt;sincere&lt;/em&gt; appreciations to all the OSS contributors that work nights and weekends to make this project a reality!&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Meet The Core Team!&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/derailed&#34;&gt;Fernand Galiana&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;img src=&#34;https://raw.githubusercontent.com/derailed/k9s/master/assets/mail.png&#34; width=&#34;16&#34; height=&#34;auto&#34; alt=&#34;email&#34;&gt; &lt;a href=&#34;mailto:fernand@imhotep.io&#34;&gt;fernand@imhotep.io&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;img src=&#34;https://raw.githubusercontent.com/derailed/k9s/master/assets/twitter.png&#34; width=&#34;16&#34; height=&#34;auto&#34; alt=&#34;twitter&#34;&gt; &lt;a href=&#34;https://twitter.com/kitesurfer?lang=en&#34;&gt;@kitesurfer&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;We always enjoy hearing from folks who benefit from our work!&lt;/p&gt; &#xA;&lt;h2&gt;Contributions Guideline&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;File an issue first prior to submitting a PR!&lt;/li&gt; &#xA; &lt;li&gt;Ensure all exported items are properly commented&lt;/li&gt; &#xA; &lt;li&gt;If applicable, submit a test suite against your PR&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/derailed/k9s/master/assets/imhotep_logo.png&#34; width=&#34;32&#34; height=&#34;auto&#34; alt=&#34;Imhotep&#34;&gt; &amp;nbsp;¬© 2021 Imhotep Software LLC. All materials licensed under &lt;a href=&#34;http://www.apache.org/licenses/LICENSE-2.0&#34;&gt;Apache v2.0&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Dreamacro/clash</title>
    <updated>2022-06-02T02:40:18Z</updated>
    <id>tag:github.com,2022-06-02:/Dreamacro/clash</id>
    <link href="https://github.com/Dreamacro/clash" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A rule-based tunnel in Go.&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt; &lt;img src=&#34;https://github.com/Dreamacro/clash/raw/master/docs/logo.png&#34; alt=&#34;Clash&#34; width=&#34;200&#34;&gt; &lt;br&gt;Clash&lt;br&gt; &lt;/h1&gt; &#xA;&lt;h4 align=&#34;center&#34;&gt;A rule-based tunnel in Go.&lt;/h4&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/Dreamacro/clash/actions&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/workflow/status/Dreamacro/clash/Go?style=flat-square&#34; alt=&#34;Github Actions&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/Dreamacro/clash&#34;&gt; &lt;img src=&#34;https://goreportcard.com/badge/github.com/Dreamacro/clash?style=flat-square&#34;&gt; &lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/go-mod/go-version/Dreamacro/clash?style=flat-square&#34;&gt; &lt;a href=&#34;https://github.com/Dreamacro/clash/releases&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/release/Dreamacro/clash/all.svg?style=flat-square&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/Dreamacro/clash/releases/tag/premium&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/release-Premium-00b4f0?style=flat-square&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Local HTTP/HTTPS/SOCKS server with authentication support&lt;/li&gt; &#xA; &lt;li&gt;VMess, Shadowsocks, Trojan, Snell protocol support for remote connections&lt;/li&gt; &#xA; &lt;li&gt;Built-in DNS server that aims to minimize DNS pollution attack impact, supports DoH/DoT upstream and fake IP.&lt;/li&gt; &#xA; &lt;li&gt;Rules based off domains, GEOIP, IPCIDR or Process to forward packets to different nodes&lt;/li&gt; &#xA; &lt;li&gt;Remote groups allow users to implement powerful rules. Supports automatic fallback, load balancing or auto select node based off latency&lt;/li&gt; &#xA; &lt;li&gt;Remote providers, allowing users to get node lists remotely instead of hardcoding in config&lt;/li&gt; &#xA; &lt;li&gt;Netfilter TCP redirecting. Deploy Clash on your Internet gateway with &lt;code&gt;iptables&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Comprehensive HTTP RESTful API controller&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Premium Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;TUN mode on macOS, Linux and Windows. &lt;a href=&#34;https://github.com/Dreamacro/clash/wiki/premium-core-features#tun-device&#34;&gt;Doc&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Match your tunnel by &lt;a href=&#34;https://github.com/Dreamacro/clash/wiki/premium-core-features#script&#34;&gt;Script&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Dreamacro/clash/wiki/premium-core-features#rule-providers&#34;&gt;Rule Provider&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;Documentations are now moved to &lt;a href=&#34;https://github.com/Dreamacro/clash/wiki&#34;&gt;GitHub Wiki&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Premium Release&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Dreamacro/clash/releases/tag/premium&#34;&gt;Release&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;p&gt;If you want to build an application that uses clash as a library, check out the the &lt;a href=&#34;https://github.com/Dreamacro/clash/wiki/use-clash-as-a-library&#34;&gt;GitHub Wiki&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/riobard/go-shadowsocks2&#34;&gt;riobard/go-shadowsocks2&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/v2ray/v2ray-core&#34;&gt;v2ray/v2ray-core&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/WireGuard/wireguard-go&#34;&gt;WireGuard/wireguard-go&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This software is released under the GPL-3.0 license.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://app.fossa.io/projects/git%2Bgithub.com%2FDreamacro%2Fclash?ref=badge_large&#34;&gt;&lt;img src=&#34;https://app.fossa.io/api/projects/git%2Bgithub.com%2FDreamacro%2Fclash.svg?type=large&#34; alt=&#34;FOSSA Status&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>containers/podman</title>
    <updated>2022-06-02T02:40:18Z</updated>
    <id>tag:github.com,2022-06-02:/containers/podman</id>
    <link href="https://github.com/containers/podman" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Podman: A tool for managing OCI containers and pods.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/containers/podman/main/logo/podman-logo-source.svg?sanitize=true&#34; alt=&#34;PODMAN logo&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Podman: A tool for managing OCI containers and pods&lt;/h1&gt; &#xA;&lt;p&gt;Podman (the POD MANager) is a tool for managing containers and images, volumes mounted into those containers, and pods made from groups of containers. Podman is based on libpod, a library for container lifecycle management that is also contained in this repository. The libpod library provides APIs for managing containers, pods, container images, and volumes.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/containers/podman/releases/tag/v4.1.0&#34;&gt;Latest Version: 4.1.0&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Latest Remote client for Windows&lt;/li&gt; &#xA;   &lt;li&gt;Latest Remote client for macOS&lt;/li&gt; &#xA;   &lt;li&gt;Latest Static Remote client for Linux&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Continuous Integration: &lt;a href=&#34;https://cirrus-ci.com/github/containers/podman/master&#34;&gt;&lt;img src=&#34;https://api.cirrus-ci.com/github/containers/podman.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://godoc.org/github.com/containers/podman/libpod&#34;&gt;GoDoc: &lt;img src=&#34;https://godoc.org/github.com/containers/podman/libpod?status.svg?sanitize=true&#34; alt=&#34;GoDoc&#34;&gt;&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Overview and scope&lt;/h2&gt; &#xA;&lt;p&gt;At a high level, the scope of Podman and libpod is the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Support for multiple container image formats, including OCI and Docker images.&lt;/li&gt; &#xA; &lt;li&gt;Full management of those images, including pulling from various sources (including trust and verification), creating (built via Containerfile or Dockerfile or committed from a container), and pushing to registries and other storage backends.&lt;/li&gt; &#xA; &lt;li&gt;Full management of container lifecycle, including creation (both from an image and from an exploded root filesystem), running, checkpointing and restoring (via CRIU), and removal.&lt;/li&gt; &#xA; &lt;li&gt;Full management of container networking, using CNI, Netavark, and slirp4netns&lt;/li&gt; &#xA; &lt;li&gt;Support for pods, groups of containers that share resources and are managed together.&lt;/li&gt; &#xA; &lt;li&gt;Support for running containers and pods without root or other elevated privileges.&lt;/li&gt; &#xA; &lt;li&gt;Resource isolation of containers and pods.&lt;/li&gt; &#xA; &lt;li&gt;Support for a Docker-compatible CLI interface.&lt;/li&gt; &#xA; &lt;li&gt;No manager daemon, for improved security and lower resource utilization at idle.&lt;/li&gt; &#xA; &lt;li&gt;Support for a REST API providing both a Docker-compatible interface and an improved interface exposing advanced Podman functionality.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Podman presently only supports running containers on Linux. However, we are building a remote client which can run on Windows and macOS and manage Podman containers on a Linux system via the REST API using SSH tunneling.&lt;/p&gt; &#xA;&lt;h2&gt;Roadmap&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Further improvements to the REST API, with a focus on bugfixes and implementing missing functionality&lt;/li&gt; &#xA; &lt;li&gt;Improvements on rootless containers, with a focus on improving the user experience and exposing presently-unavailable features when possible&lt;/li&gt; &#xA; &lt;li&gt;Improvements to Pods, including the addition of pod-level resource limits&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Communications&lt;/h2&gt; &#xA;&lt;p&gt;If you think you&#39;ve identified a security issue in the project, please &lt;em&gt;DO NOT&lt;/em&gt; report the issue publicly via the GitHub issue tracker, mailing list, or IRC. Instead, send an email with as many details as possible to &lt;code&gt;security@lists.podman.io&lt;/code&gt;. This is a private mailing list for the core maintainers.&lt;/p&gt; &#xA;&lt;p&gt;For general questions and discussion, please use Podman&#39;s &lt;a href=&#34;https://podman.io/community/#slack-irc-matrix-and-discord&#34;&gt;channels&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For discussions around issues/bugs and features, you can use the GitHub &lt;a href=&#34;https://github.com/containers/podman/issues&#34;&gt;issues&lt;/a&gt; and &lt;a href=&#34;https://github.com/containers/podman/pulls&#34;&gt;PRs&lt;/a&gt; tracking system.&lt;/p&gt; &#xA;&lt;p&gt;There is also a &lt;a href=&#34;https://lists.podman.io/archives/&#34;&gt;mailing list&lt;/a&gt; at &lt;code&gt;lists.podman.io&lt;/code&gt;. You can subscribe by sending a message to &lt;code&gt;podman-join@lists.podman.io&lt;/code&gt; with the subject &lt;code&gt;subscribe&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Rootless&lt;/h2&gt; &#xA;&lt;p&gt;Podman can be easily run as a normal user, without requiring a setuid binary. When run without root, Podman containers use user namespaces to set root in the container to the user running Podman. Rootless Podman runs locked-down containers with no privileges that the user running the container does not have. Some of these restrictions can be lifted (via &lt;code&gt;--privileged&lt;/code&gt;, for example), but rootless containers will never have more privileges than the user that launched them. If you run Podman as your user and mount in &lt;code&gt;/etc/passwd&lt;/code&gt; from the host, you still won&#39;t be able to change it, since your user doesn&#39;t have permission to do so.&lt;/p&gt; &#xA;&lt;p&gt;Almost all normal Podman functionality is available, though there are some &lt;a href=&#34;https://github.com/containers/podman/raw/main/rootless.md&#34;&gt;shortcomings&lt;/a&gt;. Any recent Podman release should be able to run rootless without any additional configuration, though your operating system may require some additional configuration detailed in the &lt;a href=&#34;https://github.com/containers/podman/raw/main/install.md&#34;&gt;install guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;A little configuration by an administrator is required before rootless Podman can be used, the necessary setup is documented &lt;a href=&#34;https://github.com/containers/podman/raw/main/docs/tutorials/rootless_tutorial.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Out of scope&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Specialized signing and pushing of images to various storage backends. See &lt;a href=&#34;https://github.com/containers/skopeo/&#34;&gt;Skopeo&lt;/a&gt; for those tasks.&lt;/li&gt; &#xA; &lt;li&gt;Support for the Kubernetes CRI interface for container management. The &lt;a href=&#34;https://github.com/cri-o/cri-o&#34;&gt;CRI-O&lt;/a&gt; daemon specializes in that.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;OCI Projects Plans&lt;/h2&gt; &#xA;&lt;p&gt;Podman uses OCI projects and best of breed libraries for different aspects:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Runtime: We use the &lt;a href=&#34;https://github.com/opencontainers/runtime-tools&#34;&gt;OCI runtime tools&lt;/a&gt; to generate OCI runtime configurations that can be used with any OCI-compliant runtime, like &lt;a href=&#34;https://github.com/containers/crun/&#34;&gt;crun&lt;/a&gt; and &lt;a href=&#34;https://github.com/opencontainers/runc/&#34;&gt;runc&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Images: Image management uses the &lt;a href=&#34;https://github.com/containers/image&#34;&gt;containers/image&lt;/a&gt; library.&lt;/li&gt; &#xA; &lt;li&gt;Storage: Container and image storage is managed by &lt;a href=&#34;https://github.com/containers/storage&#34;&gt;containers/storage&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Networking: Networking support through use of &lt;a href=&#34;https://github.com/containers/netavark&#34;&gt;Netavark&lt;/a&gt; and &lt;a href=&#34;https://github.com/containers/aardvark-dns&#34;&gt;Aardvark&lt;/a&gt;. Support for &lt;a href=&#34;https://github.com/containernetworking/cni&#34;&gt;CNI&lt;/a&gt; is also available. Rootless networking is handled via &lt;a href=&#34;https://github.com/rootless-containers/slirp4netns&#34;&gt;slirp4netns&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Builds: Builds are supported via &lt;a href=&#34;https://github.com/containers/buildah&#34;&gt;Buildah&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Conmon: &lt;a href=&#34;https://github.com/containers/conmon&#34;&gt;Conmon&lt;/a&gt; is a tool for monitoring OCI runtimes, used by both Podman and CRI-O.&lt;/li&gt; &#xA; &lt;li&gt;Seccomp: A unified &lt;a href=&#34;https://github.com/containers/common/raw/main/pkg/seccomp/seccomp.json&#34;&gt;Seccomp&lt;/a&gt; policy for Podman, Buildah, and CRI-O.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Podman Information for Developers&lt;/h2&gt; &#xA;&lt;p&gt;For blogs, release announcements and more, please checkout the &lt;a href=&#34;https://podman.io&#34;&gt;podman.io&lt;/a&gt; website!&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/containers/podman/main/install.md&#34;&gt;Installation notes&lt;/a&gt;&lt;/strong&gt; Information on how to install Podman in your environment.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/containers/podman/main/pkg/hooks/README.md&#34;&gt;OCI Hooks Support&lt;/a&gt;&lt;/strong&gt; Information on how Podman configures &lt;a href=&#34;https://github.com/opencontainers/runtime-spec/raw/v1.0.2/config.md#posix-platform-hooks&#34;&gt;OCI Hooks&lt;/a&gt; to run when launching a container.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://docs.podman.io/en/latest/_static/api.html&#34;&gt;Podman API&lt;/a&gt;&lt;/strong&gt; Documentation on the Podman REST API.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://podman.readthedocs.io/en/latest/Commands.html&#34;&gt;Podman Commands&lt;/a&gt;&lt;/strong&gt; A list of the Podman commands with links to their man pages and in many cases videos showing the commands in use.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/containers/podman/main/troubleshooting.md&#34;&gt;Podman Troubleshooting Guide&lt;/a&gt;&lt;/strong&gt; A list of common issues and solutions for Podman.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/containers/podman/main/transfer.md&#34;&gt;Podman Usage Transfer&lt;/a&gt;&lt;/strong&gt; Useful information for ops and dev transfer as it relates to infrastructure that utilizes Podman. This page includes tables showing Docker commands and their Podman equivalent commands.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/containers/podman/main/docs/tutorials&#34;&gt;Tutorials&lt;/a&gt;&lt;/strong&gt; Tutorials on using Podman.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/containers/podman/raw/main/docs/tutorials/remote_client.md&#34;&gt;Remote Client&lt;/a&gt;&lt;/strong&gt; A brief how-to on using the Podman remote-client.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/containers/podman/raw/main/docs/tutorials/rootless_tutorial.md&#34;&gt;Basic Setup and Use of Podman in a Rootless environment&lt;/a&gt;&lt;/strong&gt; A tutorial showing the setup and configuration necessary to run Rootless Podman.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/containers/podman/main/RELEASE_NOTES.md&#34;&gt;Release Notes&lt;/a&gt;&lt;/strong&gt; Release notes for recent Podman versions.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/containers/podman/main/CONTRIBUTING.md&#34;&gt;Contributing&lt;/a&gt;&lt;/strong&gt; Information about contributing to this project.&lt;/p&gt; &#xA;&lt;h2&gt;Buildah and Podman relationship&lt;/h2&gt; &#xA;&lt;p&gt;Buildah and Podman are two complementary open-source projects that are available on most Linux platforms and both projects reside at &lt;a href=&#34;https://github.com&#34;&gt;GitHub.com&lt;/a&gt; with Buildah &lt;a href=&#34;https://github.com/containers/buildah&#34;&gt;here&lt;/a&gt; and Podman &lt;a href=&#34;https://github.com/containers/podman&#34;&gt;here&lt;/a&gt;. Both, Buildah and Podman are command line tools that work on Open Container Initiative (OCI) images and containers. The two projects differentiate in their specialization.&lt;/p&gt; &#xA;&lt;p&gt;Buildah specializes in building OCI images. Buildah&#39;s commands replicate all of the commands that are found in a Dockerfile. This allows building images with and without Dockerfiles while not requiring any root privileges. Buildah‚Äôs ultimate goal is to provide a lower-level coreutils interface to build images. The flexibility of building images without Dockerfiles allows for the integration of other scripting languages into the build process. Buildah follows a simple fork-exec model and does not run as a daemon but it is based on a comprehensive API in golang, which can be vendored into other tools.&lt;/p&gt; &#xA;&lt;p&gt;Podman specializes in all of the commands and functions that help you to maintain and modify OCI images, such as pulling and tagging. It also allows you to create, run, and maintain those containers created from those images. For building container images via Dockerfiles, Podman uses Buildah&#39;s golang API and can be installed independently from Buildah.&lt;/p&gt; &#xA;&lt;p&gt;A major difference between Podman and Buildah is their concept of a container. Podman allows users to create &#34;traditional containers&#34; where the intent of these containers is to be long lived. While Buildah containers are really just created to allow content to be added back to the container image. An easy way to think of it is the &lt;code&gt;buildah run&lt;/code&gt; command emulates the RUN command in a Dockerfile while the &lt;code&gt;podman run&lt;/code&gt; command emulates the &lt;code&gt;docker run&lt;/code&gt; command in functionality. Because of this and their underlying storage differences, you can not see Podman containers from within Buildah or vice versa.&lt;/p&gt; &#xA;&lt;p&gt;In short, Buildah is an efficient way to create OCI images while Podman allows you to manage and maintain those images and containers in a production environment using familiar container cli commands. For more details, see the &lt;a href=&#34;https://github.com/containers/buildah/tree/master/docs/containertools&#34;&gt;Container Tools Guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://podman.io/images/podman-hello.jpg&#34;&gt;Podman Hello&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ podman run quay.io/podman/hello&#xA;Trying to pull quay.io/podman/hello:latest...&#xA;Getting image source signatures&#xA;Copying blob a6b3126f3807 done&#xA;Copying config 25c667d086 done&#xA;Writing manifest to image destination&#xA;Storing signatures&#xA;!... Hello Podman World ...!&#xA;&#xA;         .--&#34;--.&#xA;       / -     - \&#xA;      / (O)   (O) \&#xA;   ~~~| -=(,Y,)=- |&#xA;    .---. /`  \   |~~&#xA; ~/  o  o \~~~~.----. ~~&#xA;  | =(X)= |~  / (O (O) \&#xA;   ~~~~~~~  ~| =(Y_)=-  |&#xA;  ~~~~    ~~~|   U      |~~&#xA;&#xA;Project:   https://github.com/containers/podman&#xA;Website:   https://podman.io&#xA;Documents: https://docs.podman.io&#xA;Twitter:   @Podman_io&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Podman Former API (Varlink)&lt;/h2&gt; &#xA;&lt;p&gt;Podman formerly offered a Varlink-based API for remote management of containers. However, this API was replaced by the REST API. Varlink support has been removed as of the 3.0 release. For more details, you can see &lt;a href=&#34;https://podman.io/blogs/2020/01/17/podman-new-api.html&#34;&gt;this blog&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>hashicorp/nomad</title>
    <updated>2022-06-02T02:40:18Z</updated>
    <id>tag:github.com,2022-06-02:/hashicorp/nomad</id>
    <link href="https://github.com/hashicorp/nomad" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Nomad is an easy-to-use, flexible, and performant workload orchestrator that can deploy a mix of microservice, batch, containerized, and non-containerized applications. Nomad is easy to operate and scale and has native Consul and Vault integrations.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Nomad &lt;a href=&#34;https://circleci.com/gh/hashicorp/nomad&#34;&gt;&lt;img src=&#34;https://circleci.com/gh/hashicorp/nomad.svg?style=svg&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discuss.hashicorp.com/c/nomad&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/discuss-nomad-00BC7F?style=flat&#34; alt=&#34;Discuss&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34; style=&#34;text-align:center;&#34;&gt; &lt;a href=&#34;https://nomadproject.io&#34;&gt; &lt;img alt=&#34;HashiCorp Nomad logo&#34; src=&#34;https://raw.githubusercontent.com/hashicorp/nomad/main/website/public/img/logo-hashicorp.svg?sanitize=true&#34; width=&#34;500&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;Nomad is a simple and flexible workload orchestrator to deploy and manage containers (&lt;a href=&#34;https://www.nomadproject.io/docs/drivers/docker.html&#34;&gt;docker&lt;/a&gt;, &lt;a href=&#34;https://www.nomadproject.io/docs/drivers/podman&#34;&gt;podman&lt;/a&gt;), non-containerized applications (&lt;a href=&#34;https://www.nomadproject.io/docs/drivers/exec.html&#34;&gt;executable&lt;/a&gt;, &lt;a href=&#34;https://www.nomadproject.io/docs/drivers/java&#34;&gt;Java&lt;/a&gt;), and virtual machines (&lt;a href=&#34;https://www.nomadproject.io/docs/drivers/qemu.html&#34;&gt;qemu&lt;/a&gt;) across on-prem and clouds at scale.&lt;/p&gt; &#xA;&lt;p&gt;Nomad is supported on Linux, Windows, and macOS. A commercial version of Nomad, &lt;a href=&#34;https://www.nomadproject.io/docs/enterprise&#34;&gt;Nomad Enterprise&lt;/a&gt;, is also available.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Website: &lt;a href=&#34;https://nomadproject.io&#34;&gt;https://nomadproject.io&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Tutorials: &lt;a href=&#34;https://learn.hashicorp.com/nomad&#34;&gt;HashiCorp Learn&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Forum: &lt;a href=&#34;https://discuss.hashicorp.com/c/nomad&#34;&gt;Discuss&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Mailing List: &lt;a href=&#34;https://groups.google.com/group/nomad-tool&#34;&gt;Google Groups&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Gitter: &lt;a href=&#34;https://gitter.im/hashicorp-nomad/Lobby&#34;&gt;hashicorp-nomad&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Nomad provides several key features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Deploy Containers and Legacy Applications&lt;/strong&gt;: Nomad‚Äôs flexibility as an orchestrator enables an organization to run containers, legacy, and batch applications together on the same infrastructure. Nomad brings core orchestration benefits to legacy applications without needing to containerize via pluggable task drivers.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Simple &amp;amp; Reliable&lt;/strong&gt;: Nomad runs as a single binary and is entirely self contained - combining resource management and scheduling into a single system. Nomad does not require any external services for storage or coordination. Nomad automatically handles application, node, and driver failures. Nomad is distributed and resilient, using leader election and state replication to provide high availability in the event of failures.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Device Plugins &amp;amp; GPU Support&lt;/strong&gt;: Nomad offers built-in support for GPU workloads such as machine learning (ML) and artificial intelligence (AI). Nomad uses device plugins to automatically detect and utilize resources from hardware devices such as GPU, FPGAs, and TPUs.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Federation for Multi-Region, Multi-Cloud&lt;/strong&gt;: Nomad was designed to support infrastructure at a global scale. Nomad supports federation out-of-the-box and can deploy applications across multiple regions and clouds.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Proven Scalability&lt;/strong&gt;: Nomad is optimistically concurrent, which increases throughput and reduces latency for workloads. Nomad has been proven to scale to clusters of 10K+ nodes in real-world production environments.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;HashiCorp Ecosystem&lt;/strong&gt;: Nomad integrates seamlessly with Terraform, Consul, Vault for provisioning, service discovery, and secrets management.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Quick Start&lt;/h2&gt; &#xA;&lt;h4&gt;Testing&lt;/h4&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://learn.hashicorp.com/collections/nomad/get-started&#34;&gt;Learn: Getting Started&lt;/a&gt; for instructions on setting up a local Nomad cluster for non-production use.&lt;/p&gt; &#xA;&lt;p&gt;Optionally, find Terraform manifests for bringing up a development Nomad cluster on a public cloud in the &lt;a href=&#34;https://raw.githubusercontent.com/hashicorp/nomad/main/terraform/&#34;&gt;&lt;code&gt;terraform&lt;/code&gt;&lt;/a&gt; directory.&lt;/p&gt; &#xA;&lt;h4&gt;Production&lt;/h4&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://learn.hashicorp.com/tutorials/nomad/production-reference-architecture-vm-with-consul?in=nomad/production&#34;&gt;Learn: Nomad Reference Architecture&lt;/a&gt; for recommended practices and a reference architecture for production deployments.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Full, comprehensive documentation is available on the Nomad website: &lt;a href=&#34;https://www.nomadproject.io/docs&#34;&gt;https://www.nomadproject.io/docs&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Guides are available on &lt;a href=&#34;https://learn.hashicorp.com/nomad&#34;&gt;HashiCorp Learn&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/hashicorp/nomad/main/contributing/&#34;&gt;&lt;code&gt;contributing&lt;/code&gt;&lt;/a&gt; directory for more developer documentation.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>gin-gonic/gin</title>
    <updated>2022-06-02T02:40:18Z</updated>
    <id>tag:github.com,2022-06-02:/gin-gonic/gin</id>
    <link href="https://github.com/gin-gonic/gin" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Gin is a HTTP web framework written in Go (Golang). It features a Martini-like API with much better performance -- up to 40 times faster. If you need smashing performance, get yourself some Gin.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Gin Web Framework&lt;/h1&gt; &#xA;&lt;img align=&#34;right&#34; width=&#34;159px&#34; src=&#34;https://raw.githubusercontent.com/gin-gonic/logo/master/color.png&#34;&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/gin-gonic/gin/actions?query=branch%3Amaster&#34;&gt;&lt;img src=&#34;https://github.com/gin-gonic/gin/workflows/Run%20Tests/badge.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/gin-gonic/gin&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/gin-gonic/gin/branch/master/graph/badge.svg?sanitize=true&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/gin-gonic/gin&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/gin-gonic/gin&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pkg.go.dev/github.com/gin-gonic/gin?tab=doc&#34;&gt;&lt;img src=&#34;https://pkg.go.dev/badge/github.com/gin-gonic/gin?status.svg?sanitize=true&#34; alt=&#34;GoDoc&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitter.im/gin-gonic/gin?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/Join%20Chat.svg?sanitize=true&#34; alt=&#34;Join the chat at https://gitter.im/gin-gonic/gin&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://sourcegraph.com/github.com/gin-gonic/gin?badge&#34;&gt;&lt;img src=&#34;https://sourcegraph.com/github.com/gin-gonic/gin/-/badge.svg?sanitize=true&#34; alt=&#34;Sourcegraph&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.codetriage.com/gin-gonic/gin&#34;&gt;&lt;img src=&#34;https://www.codetriage.com/gin-gonic/gin/badges/users.svg?sanitize=true&#34; alt=&#34;Open Source Helpers&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/gin-gonic/gin/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/gin-gonic/gin.svg?style=flat-square&#34; alt=&#34;Release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.tickgit.com/browse?repo=github.com/gin-gonic/gin&#34;&gt;&lt;img src=&#34;https://badgen.net/https/api.tickgit.com/badgen/github.com/gin-gonic/gin&#34; alt=&#34;TODOs&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Gin is a web framework written in Go (Golang). It features a martini-like API with performance that is up to 40 times faster thanks to &lt;a href=&#34;https://github.com/julienschmidt/httprouter&#34;&gt;httprouter&lt;/a&gt;. If you need performance and good productivity, you will love Gin.&lt;/p&gt; &#xA;&lt;h2&gt;Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gin-gonic/gin/master/#gin-web-framework&#34;&gt;Gin Web Framework&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gin-gonic/gin/master/#contents&#34;&gt;Contents&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gin-gonic/gin/master/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gin-gonic/gin/master/#quick-start&#34;&gt;Quick start&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gin-gonic/gin/master/#benchmarks&#34;&gt;Benchmarks&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gin-gonic/gin/master/#gin-v1-stable&#34;&gt;Gin v1. stable&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gin-gonic/gin/master/#build-with-json-replacement&#34;&gt;Build with jsoniter/go-json&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gin-gonic/gin/master/#build-without-msgpack-rendering-feature&#34;&gt;Build without &lt;code&gt;MsgPack&lt;/code&gt; rendering feature&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gin-gonic/gin/master/#api-examples&#34;&gt;API Examples&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gin-gonic/gin/master/#using-get-post-put-patch-delete-and-options&#34;&gt;Using GET, POST, PUT, PATCH, DELETE and OPTIONS&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gin-gonic/gin/master/#parameters-in-path&#34;&gt;Parameters in path&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gin-gonic/gin/master/#querystring-parameters&#34;&gt;Querystring parameters&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gin-gonic/gin/master/#multiparturlencoded-form&#34;&gt;Multipart/Urlencoded Form&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gin-gonic/gin/master/#another-example-query--post-form&#34;&gt;Another example: query + post form&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gin-gonic/gin/master/#map-as-querystring-or-postform-parameters&#34;&gt;Map as querystring or postform parameters&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gin-gonic/gin/master/#upload-files&#34;&gt;Upload files&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gin-gonic/gin/master/#single-file&#34;&gt;Single file&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gin-gonic/gin/master/#multiple-files&#34;&gt;Multiple files&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gin-gonic/gin/master/#grouping-routes&#34;&gt;Grouping routes&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gin-gonic/gin/master/#blank-gin-without-middleware-by-default&#34;&gt;Blank Gin without middleware by default&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gin-gonic/gin/master/#using-middleware&#34;&gt;Using middleware&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gin-gonic/gin/master/#how-to-write-log-file&#34;&gt;How to write log file&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gin-gonic/gin/master/#custom-log-format&#34;&gt;Custom Log Format&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gin-gonic/gin/master/#controlling-log-output-coloring&#34;&gt;Controlling Log output coloring&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gin-gonic/gin/master/#model-binding-and-validation&#34;&gt;Model binding and validation&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gin-gonic/gin/master/#custom-validators&#34;&gt;Custom Validators&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gin-gonic/gin/master/#only-bind-query-string&#34;&gt;Only Bind Query String&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gin-gonic/gin/master/#bind-query-string-or-post-data&#34;&gt;Bind Query String or Post Data&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gin-gonic/gin/master/#bind-uri&#34;&gt;Bind Uri&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gin-gonic/gin/master/#bind-header&#34;&gt;Bind Header&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gin-gonic/gin/master/#bind-html-checkboxes&#34;&gt;Bind HTML checkboxes&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gin-gonic/gin/master/#multiparturlencoded-binding&#34;&gt;Multipart/Urlencoded binding&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gin-gonic/gin/master/#xml-json-yaml-and-protobuf-rendering&#34;&gt;XML, JSON, YAML and ProtoBuf rendering&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gin-gonic/gin/master/#securejson&#34;&gt;SecureJSON&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gin-gonic/gin/master/#jsonp&#34;&gt;JSONP&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gin-gonic/gin/master/#asciijson&#34;&gt;AsciiJSON&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gin-gonic/gin/master/#purejson&#34;&gt;PureJSON&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gin-gonic/gin/master/#serving-static-files&#34;&gt;Serving static files&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gin-gonic/gin/master/#serving-data-from-file&#34;&gt;Serving data from file&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gin-gonic/gin/master/#serving-data-from-reader&#34;&gt;Serving data from reader&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gin-gonic/gin/master/#html-rendering&#34;&gt;HTML rendering&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gin-gonic/gin/master/#custom-template-renderer&#34;&gt;Custom Template renderer&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gin-gonic/gin/master/#custom-delimiters&#34;&gt;Custom Delimiters&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gin-gonic/gin/master/#custom-template-funcs&#34;&gt;Custom Template Funcs&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gin-gonic/gin/master/#multitemplate&#34;&gt;Multitemplate&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gin-gonic/gin/master/#redirects&#34;&gt;Redirects&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gin-gonic/gin/master/#custom-middleware&#34;&gt;Custom Middleware&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gin-gonic/gin/master/#using-basicauth-middleware&#34;&gt;Using BasicAuth() middleware&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gin-gonic/gin/master/#goroutines-inside-a-middleware&#34;&gt;Goroutines inside a middleware&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gin-gonic/gin/master/#custom-http-configuration&#34;&gt;Custom HTTP configuration&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gin-gonic/gin/master/#support-lets-encrypt&#34;&gt;Support Let&#39;s Encrypt&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gin-gonic/gin/master/#run-multiple-service-using-gin&#34;&gt;Run multiple service using Gin&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gin-gonic/gin/master/#graceful-shutdown-or-restart&#34;&gt;Graceful shutdown or restart&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gin-gonic/gin/master/#third-party-packages&#34;&gt;Third-party packages&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gin-gonic/gin/master/#manually&#34;&gt;Manually&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gin-gonic/gin/master/#build-a-single-binary-with-templates&#34;&gt;Build a single binary with templates&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gin-gonic/gin/master/#bind-form-data-request-with-custom-struct&#34;&gt;Bind form-data request with custom struct&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gin-gonic/gin/master/#try-to-bind-body-into-different-structs&#34;&gt;Try to bind body into different structs&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gin-gonic/gin/master/#http2-server-push&#34;&gt;http2 server push&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gin-gonic/gin/master/#define-format-for-the-log-of-routes&#34;&gt;Define format for the log of routes&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gin-gonic/gin/master/#set-and-get-a-cookie&#34;&gt;Set and get a cookie&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gin-gonic/gin/master/#dont-trust-all-proxies&#34;&gt;Don&#39;t trust all proxies&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gin-gonic/gin/master/#testing&#34;&gt;Testing&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gin-gonic/gin/master/#users&#34;&gt;Users&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;To install Gin package, you need to install Go and set your Go workspace first.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;You first need &lt;a href=&#34;https://golang.org/&#34;&gt;Go&lt;/a&gt; installed (&lt;strong&gt;version 1.14+ is required&lt;/strong&gt;), then you can use the below Go command to install Gin.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ go get -u github.com/gin-gonic/gin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Import it in your code:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;import &#34;github.com/gin-gonic/gin&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;(Optional) Import &lt;code&gt;net/http&lt;/code&gt;. This is required for example if using constants such as &lt;code&gt;http.StatusOK&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;import &#34;net/http&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Quick start&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# assume the following codes in example.go file&#xA;$ cat example.go&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import &#34;github.com/gin-gonic/gin&#34;&#xA;&#xA;func main() {&#xA;&#x9;r := gin.Default()&#xA;&#x9;r.GET(&#34;/ping&#34;, func(c *gin.Context) {&#xA;&#x9;&#x9;c.JSON(200, gin.H{&#xA;&#x9;&#x9;&#x9;&#34;message&#34;: &#34;pong&#34;,&#xA;&#x9;&#x9;})&#xA;&#x9;})&#xA;&#x9;r.Run() // listen and serve on 0.0.0.0:8080 (for windows &#34;localhost:8080&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;# run example.go and visit 0.0.0.0:8080/ping (for windows &#34;localhost:8080/ping&#34;) on browser&#xA;$ go run example.go&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Benchmarks&lt;/h2&gt; &#xA;&lt;p&gt;Gin uses a custom version of &lt;a href=&#34;https://github.com/julienschmidt/httprouter&#34;&gt;HttpRouter&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gin-gonic/gin/master/BENCHMARKS.md&#34;&gt;See all benchmarks&lt;/a&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Benchmark name&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;(1)&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;(2)&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;(3)&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;(4)&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;BenchmarkGin_GithubAll&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;strong&gt;43550&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;strong&gt;27364 ns/op&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;strong&gt;0 B/op&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;strong&gt;0 allocs/op&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;BenchmarkAce_GithubAll&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;40543&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;29670 ns/op&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;0 B/op&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;0 allocs/op&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;BenchmarkAero_GithubAll&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;57632&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;20648 ns/op&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;0 B/op&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;0 allocs/op&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;BenchmarkBear_GithubAll&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;9234&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;216179 ns/op&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;86448 B/op&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;943 allocs/op&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;BenchmarkBeego_GithubAll&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;7407&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;243496 ns/op&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;71456 B/op&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;609 allocs/op&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;BenchmarkBone_GithubAll&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;420&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;2922835 ns/op&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;720160 B/op&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;8620 allocs/op&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;BenchmarkChi_GithubAll&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;7620&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;238331 ns/op&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;87696 B/op&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;609 allocs/op&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;BenchmarkDenco_GithubAll&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;18355&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;64494 ns/op&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;20224 B/op&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;167 allocs/op&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;BenchmarkEcho_GithubAll&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;31251&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;38479 ns/op&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;0 B/op&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;0 allocs/op&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;BenchmarkGocraftWeb_GithubAll&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;4117&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;300062 ns/op&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;131656 B/op&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;1686 allocs/op&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;BenchmarkGoji_GithubAll&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;3274&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;416158 ns/op&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;56112 B/op&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;334 allocs/op&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;BenchmarkGojiv2_GithubAll&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;1402&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;870518 ns/op&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;352720 B/op&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;4321 allocs/op&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;BenchmarkGoJsonRest_GithubAll&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;2976&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;401507 ns/op&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;134371 B/op&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;2737 allocs/op&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;BenchmarkGoRestful_GithubAll&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;410&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;2913158 ns/op&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;910144 B/op&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;2938 allocs/op&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;BenchmarkGorillaMux_GithubAll&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;346&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;3384987 ns/op&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;251650 B/op&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;1994 allocs/op&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;BenchmarkGowwwRouter_GithubAll&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;10000&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;143025 ns/op&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;72144 B/op&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;501 allocs/op&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;BenchmarkHttpRouter_GithubAll&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;55938&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;21360 ns/op&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;0 B/op&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;0 allocs/op&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;BenchmarkHttpTreeMux_GithubAll&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;10000&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;153944 ns/op&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;65856 B/op&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;671 allocs/op&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;BenchmarkKocha_GithubAll&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;10000&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;106315 ns/op&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;23304 B/op&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;843 allocs/op&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;BenchmarkLARS_GithubAll&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;47779&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;25084 ns/op&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;0 B/op&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;0 allocs/op&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;BenchmarkMacaron_GithubAll&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;3266&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;371907 ns/op&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;149409 B/op&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;1624 allocs/op&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;BenchmarkMartini_GithubAll&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;331&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;3444706 ns/op&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;226551 B/op&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;2325 allocs/op&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;BenchmarkPat_GithubAll&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;273&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;4381818 ns/op&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;1483152 B/op&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;26963 allocs/op&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;BenchmarkPossum_GithubAll&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;10000&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;164367 ns/op&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;84448 B/op&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;609 allocs/op&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;BenchmarkR2router_GithubAll&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;10000&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;160220 ns/op&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;77328 B/op&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;979 allocs/op&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;BenchmarkRivet_GithubAll&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;14625&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;82453 ns/op&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;16272 B/op&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;167 allocs/op&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;BenchmarkTango_GithubAll&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;6255&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;279611 ns/op&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;63826 B/op&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;1618 allocs/op&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;BenchmarkTigerTonic_GithubAll&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;2008&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;687874 ns/op&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;193856 B/op&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;4474 allocs/op&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;BenchmarkTraffic_GithubAll&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;355&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;3478508 ns/op&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;820744 B/op&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;14114 allocs/op&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;BenchmarkVulcan_GithubAll&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;6885&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;193333 ns/op&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;19894 B/op&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;609 allocs/op&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;(1): Total Repetitions achieved in constant time, higher means more confident result&lt;/li&gt; &#xA; &lt;li&gt;(2): Single Repetition Duration (ns/op), lower is better&lt;/li&gt; &#xA; &lt;li&gt;(3): Heap Memory (B/op), lower is better&lt;/li&gt; &#xA; &lt;li&gt;(4): Average Allocations per Repetition (allocs/op), lower is better&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Gin v1. stable&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Zero allocation router.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Still the fastest http router and framework. From routing to writing.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Complete suite of unit tests.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Battle tested.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; API frozen, new releases will not break your code.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Build with json replacement&lt;/h2&gt; &#xA;&lt;p&gt;Gin uses &lt;code&gt;encoding/json&lt;/code&gt; as default json package but you can change it by build from other tags.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/json-iterator/go&#34;&gt;jsoniter&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ go build -tags=jsoniter .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/goccy/go-json&#34;&gt;go-json&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ go build -tags=go_json .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Build without &lt;code&gt;MsgPack&lt;/code&gt; rendering feature&lt;/h2&gt; &#xA;&lt;p&gt;Gin enables &lt;code&gt;MsgPack&lt;/code&gt; rendering feature by default. But you can disable this feature by specifying &lt;code&gt;nomsgpack&lt;/code&gt; build tag.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ go build -tags=nomsgpack .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is useful to reduce the binary size of executable files. See the &lt;a href=&#34;https://github.com/gin-gonic/gin/pull/1852&#34;&gt;detail information&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;API Examples&lt;/h2&gt; &#xA;&lt;p&gt;You can find a number of ready-to-run examples at &lt;a href=&#34;https://github.com/gin-gonic/examples&#34;&gt;Gin examples repository&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Using GET, POST, PUT, PATCH, DELETE and OPTIONS&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func main() {&#xA;&#x9;// Creates a gin router with default middleware:&#xA;&#x9;// logger and recovery (crash-free) middleware&#xA;&#x9;router := gin.Default()&#xA;&#xA;&#x9;router.GET(&#34;/someGet&#34;, getting)&#xA;&#x9;router.POST(&#34;/somePost&#34;, posting)&#xA;&#x9;router.PUT(&#34;/somePut&#34;, putting)&#xA;&#x9;router.DELETE(&#34;/someDelete&#34;, deleting)&#xA;&#x9;router.PATCH(&#34;/somePatch&#34;, patching)&#xA;&#x9;router.HEAD(&#34;/someHead&#34;, head)&#xA;&#x9;router.OPTIONS(&#34;/someOptions&#34;, options)&#xA;&#xA;&#x9;// By default it serves on :8080 unless a&#xA;&#x9;// PORT environment variable was defined.&#xA;&#x9;router.Run()&#xA;&#x9;// router.Run(&#34;:3000&#34;) for a hard coded port&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Parameters in path&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func main() {&#xA;&#x9;router := gin.Default()&#xA;&#xA;&#x9;// This handler will match /user/john but will not match /user/ or /user&#xA;&#x9;router.GET(&#34;/user/:name&#34;, func(c *gin.Context) {&#xA;&#x9;&#x9;name := c.Param(&#34;name&#34;)&#xA;&#x9;&#x9;c.String(http.StatusOK, &#34;Hello %s&#34;, name)&#xA;&#x9;})&#xA;&#xA;&#x9;// However, this one will match /user/john/ and also /user/john/send&#xA;&#x9;// If no other routers match /user/john, it will redirect to /user/john/&#xA;&#x9;router.GET(&#34;/user/:name/*action&#34;, func(c *gin.Context) {&#xA;&#x9;&#x9;name := c.Param(&#34;name&#34;)&#xA;&#x9;&#x9;action := c.Param(&#34;action&#34;)&#xA;&#x9;&#x9;message := name + &#34; is &#34; + action&#xA;&#x9;&#x9;c.String(http.StatusOK, message)&#xA;&#x9;})&#xA;&#xA;&#x9;// For each matched request Context will hold the route definition&#xA;&#x9;router.POST(&#34;/user/:name/*action&#34;, func(c *gin.Context) {&#xA;&#x9;&#x9;b := c.FullPath() == &#34;/user/:name/*action&#34; // true&#xA;&#x9;&#x9;c.String(http.StatusOK, &#34;%t&#34;, b)&#xA;&#x9;})&#xA;&#xA;&#x9;// This handler will add a new router for /user/groups.&#xA;&#x9;// Exact routes are resolved before param routes, regardless of the order they were defined.&#xA;&#x9;// Routes starting with /user/groups are never interpreted as /user/:name/... routes&#xA;&#x9;router.GET(&#34;/user/groups&#34;, func(c *gin.Context) {&#xA;&#x9;&#x9;c.String(http.StatusOK, &#34;The available groups are [...]&#34;)&#xA;&#x9;})&#xA;&#xA;&#x9;router.Run(&#34;:8080&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Querystring parameters&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func main() {&#xA;&#x9;router := gin.Default()&#xA;&#xA;&#x9;// Query string parameters are parsed using the existing underlying request object.&#xA;&#x9;// The request responds to a url matching:  /welcome?firstname=Jane&amp;amp;lastname=Doe&#xA;&#x9;router.GET(&#34;/welcome&#34;, func(c *gin.Context) {&#xA;&#x9;&#x9;firstname := c.DefaultQuery(&#34;firstname&#34;, &#34;Guest&#34;)&#xA;&#x9;&#x9;lastname := c.Query(&#34;lastname&#34;) // shortcut for c.Request.URL.Query().Get(&#34;lastname&#34;)&#xA;&#xA;&#x9;&#x9;c.String(http.StatusOK, &#34;Hello %s %s&#34;, firstname, lastname)&#xA;&#x9;})&#xA;&#x9;router.Run(&#34;:8080&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Multipart/Urlencoded Form&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func main() {&#xA;&#x9;router := gin.Default()&#xA;&#xA;&#x9;router.POST(&#34;/form_post&#34;, func(c *gin.Context) {&#xA;&#x9;&#x9;message := c.PostForm(&#34;message&#34;)&#xA;&#x9;&#x9;nick := c.DefaultPostForm(&#34;nick&#34;, &#34;anonymous&#34;)&#xA;&#xA;&#x9;&#x9;c.JSON(200, gin.H{&#xA;&#x9;&#x9;&#x9;&#34;status&#34;:  &#34;posted&#34;,&#xA;&#x9;&#x9;&#x9;&#34;message&#34;: message,&#xA;&#x9;&#x9;&#x9;&#34;nick&#34;:    nick,&#xA;&#x9;&#x9;})&#xA;&#x9;})&#xA;&#x9;router.Run(&#34;:8080&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Another example: query + post form&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;POST /post?id=1234&amp;amp;page=1 HTTP/1.1&#xA;Content-Type: application/x-www-form-urlencoded&#xA;&#xA;name=manu&amp;amp;message=this_is_great&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func main() {&#xA;&#x9;router := gin.Default()&#xA;&#xA;&#x9;router.POST(&#34;/post&#34;, func(c *gin.Context) {&#xA;&#xA;&#x9;&#x9;id := c.Query(&#34;id&#34;)&#xA;&#x9;&#x9;page := c.DefaultQuery(&#34;page&#34;, &#34;0&#34;)&#xA;&#x9;&#x9;name := c.PostForm(&#34;name&#34;)&#xA;&#x9;&#x9;message := c.PostForm(&#34;message&#34;)&#xA;&#xA;&#x9;&#x9;fmt.Printf(&#34;id: %s; page: %s; name: %s; message: %s&#34;, id, page, name, message)&#xA;&#x9;})&#xA;&#x9;router.Run(&#34;:8080&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;id: 1234; page: 1; name: manu; message: this_is_great&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Map as querystring or postform parameters&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;POST /post?ids[a]=1234&amp;amp;ids[b]=hello HTTP/1.1&#xA;Content-Type: application/x-www-form-urlencoded&#xA;&#xA;names[first]=thinkerou&amp;amp;names[second]=tianou&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func main() {&#xA;&#x9;router := gin.Default()&#xA;&#xA;&#x9;router.POST(&#34;/post&#34;, func(c *gin.Context) {&#xA;&#xA;&#x9;&#x9;ids := c.QueryMap(&#34;ids&#34;)&#xA;&#x9;&#x9;names := c.PostFormMap(&#34;names&#34;)&#xA;&#xA;&#x9;&#x9;fmt.Printf(&#34;ids: %v; names: %v&#34;, ids, names)&#xA;&#x9;})&#xA;&#x9;router.Run(&#34;:8080&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;ids: map[b:hello a:1234]; names: map[second:tianou first:thinkerou]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Upload files&lt;/h3&gt; &#xA;&lt;h4&gt;Single file&lt;/h4&gt; &#xA;&lt;p&gt;References issue &lt;a href=&#34;https://github.com/gin-gonic/gin/issues/774&#34;&gt;#774&lt;/a&gt; and detail &lt;a href=&#34;https://github.com/gin-gonic/examples/tree/master/upload-file/single&#34;&gt;example code&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;file.Filename&lt;/code&gt; &lt;strong&gt;SHOULD NOT&lt;/strong&gt; be trusted. See &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Disposition#Directives&#34;&gt;&lt;code&gt;Content-Disposition&lt;/code&gt; on MDN&lt;/a&gt; and &lt;a href=&#34;https://github.com/gin-gonic/gin/issues/1693&#34;&gt;#1693&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;The filename is always optional and must not be used blindly by the application: path information should be stripped, and conversion to the server file system rules should be done.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func main() {&#xA;&#x9;router := gin.Default()&#xA;&#x9;// Set a lower memory limit for multipart forms (default is 32 MiB)&#xA;&#x9;router.MaxMultipartMemory = 8 &amp;lt;&amp;lt; 20  // 8 MiB&#xA;&#x9;router.POST(&#34;/upload&#34;, func(c *gin.Context) {&#xA;&#x9;&#x9;// Single file&#xA;&#x9;&#x9;file, _ := c.FormFile(&#34;file&#34;)&#xA;&#x9;&#x9;log.Println(file.Filename)&#xA;&#xA;&#x9;&#x9;// Upload the file to specific dst.&#xA;&#x9;&#x9;c.SaveUploadedFile(file, dst)&#xA;&#xA;&#x9;&#x9;c.String(http.StatusOK, fmt.Sprintf(&#34;&#39;%s&#39; uploaded!&#34;, file.Filename))&#xA;&#x9;})&#xA;&#x9;router.Run(&#34;:8080&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;How to &lt;code&gt;curl&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -X POST http://localhost:8080/upload \&#xA;  -F &#34;file=@/Users/appleboy/test.zip&#34; \&#xA;  -H &#34;Content-Type: multipart/form-data&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Multiple files&lt;/h4&gt; &#xA;&lt;p&gt;See the detail &lt;a href=&#34;https://github.com/gin-gonic/examples/tree/master/upload-file/multiple&#34;&gt;example code&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func main() {&#xA;&#x9;router := gin.Default()&#xA;&#x9;// Set a lower memory limit for multipart forms (default is 32 MiB)&#xA;&#x9;router.MaxMultipartMemory = 8 &amp;lt;&amp;lt; 20  // 8 MiB&#xA;&#x9;router.POST(&#34;/upload&#34;, func(c *gin.Context) {&#xA;&#x9;&#x9;// Multipart form&#xA;&#x9;&#x9;form, _ := c.MultipartForm()&#xA;&#x9;&#x9;files := form.File[&#34;upload[]&#34;]&#xA;&#xA;&#x9;&#x9;for _, file := range files {&#xA;&#x9;&#x9;&#x9;log.Println(file.Filename)&#xA;&#xA;&#x9;&#x9;&#x9;// Upload the file to specific dst.&#xA;&#x9;&#x9;&#x9;c.SaveUploadedFile(file, dst)&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;c.String(http.StatusOK, fmt.Sprintf(&#34;%d files uploaded!&#34;, len(files)))&#xA;&#x9;})&#xA;&#x9;router.Run(&#34;:8080&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;How to &lt;code&gt;curl&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -X POST http://localhost:8080/upload \&#xA;  -F &#34;upload[]=@/Users/appleboy/test1.zip&#34; \&#xA;  -F &#34;upload[]=@/Users/appleboy/test2.zip&#34; \&#xA;  -H &#34;Content-Type: multipart/form-data&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Grouping routes&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func main() {&#xA;&#x9;router := gin.Default()&#xA;&#xA;&#x9;// Simple group: v1&#xA;&#x9;v1 := router.Group(&#34;/v1&#34;)&#xA;&#x9;{&#xA;&#x9;&#x9;v1.POST(&#34;/login&#34;, loginEndpoint)&#xA;&#x9;&#x9;v1.POST(&#34;/submit&#34;, submitEndpoint)&#xA;&#x9;&#x9;v1.POST(&#34;/read&#34;, readEndpoint)&#xA;&#x9;}&#xA;&#xA;&#x9;// Simple group: v2&#xA;&#x9;v2 := router.Group(&#34;/v2&#34;)&#xA;&#x9;{&#xA;&#x9;&#x9;v2.POST(&#34;/login&#34;, loginEndpoint)&#xA;&#x9;&#x9;v2.POST(&#34;/submit&#34;, submitEndpoint)&#xA;&#x9;&#x9;v2.POST(&#34;/read&#34;, readEndpoint)&#xA;&#x9;}&#xA;&#xA;&#x9;router.Run(&#34;:8080&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Blank Gin without middleware by default&lt;/h3&gt; &#xA;&lt;p&gt;Use&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;r := gin.New()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;instead of&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Default With the Logger and Recovery middleware already attached&#xA;r := gin.Default()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using middleware&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func main() {&#xA;&#x9;// Creates a router without any middleware by default&#xA;&#x9;r := gin.New()&#xA;&#xA;&#x9;// Global middleware&#xA;&#x9;// Logger middleware will write the logs to gin.DefaultWriter even if you set with GIN_MODE=release.&#xA;&#x9;// By default gin.DefaultWriter = os.Stdout&#xA;&#x9;r.Use(gin.Logger())&#xA;&#xA;&#x9;// Recovery middleware recovers from any panics and writes a 500 if there was one.&#xA;&#x9;r.Use(gin.Recovery())&#xA;&#xA;&#x9;// Per route middleware, you can add as many as you desire.&#xA;&#x9;r.GET(&#34;/benchmark&#34;, MyBenchLogger(), benchEndpoint)&#xA;&#xA;&#x9;// Authorization group&#xA;&#x9;// authorized := r.Group(&#34;/&#34;, AuthRequired())&#xA;&#x9;// exactly the same as:&#xA;&#x9;authorized := r.Group(&#34;/&#34;)&#xA;&#x9;// per group middleware! in this case we use the custom created&#xA;&#x9;// AuthRequired() middleware just in the &#34;authorized&#34; group.&#xA;&#x9;authorized.Use(AuthRequired())&#xA;&#x9;{&#xA;&#x9;&#x9;authorized.POST(&#34;/login&#34;, loginEndpoint)&#xA;&#x9;&#x9;authorized.POST(&#34;/submit&#34;, submitEndpoint)&#xA;&#x9;&#x9;authorized.POST(&#34;/read&#34;, readEndpoint)&#xA;&#xA;&#x9;&#x9;// nested group&#xA;&#x9;&#x9;testing := authorized.Group(&#34;testing&#34;)&#xA;&#x9;&#x9;// visit 0.0.0.0:8080/testing/analytics&#xA;&#x9;&#x9;testing.GET(&#34;/analytics&#34;, analyticsEndpoint)&#xA;&#x9;}&#xA;&#xA;&#x9;// Listen and serve on 0.0.0.0:8080&#xA;&#x9;r.Run(&#34;:8080&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Custom Recovery behavior&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func main() {&#xA;&#x9;// Creates a router without any middleware by default&#xA;&#x9;r := gin.New()&#xA;&#xA;&#x9;// Global middleware&#xA;&#x9;// Logger middleware will write the logs to gin.DefaultWriter even if you set with GIN_MODE=release.&#xA;&#x9;// By default gin.DefaultWriter = os.Stdout&#xA;&#x9;r.Use(gin.Logger())&#xA;&#xA;&#x9;// Recovery middleware recovers from any panics and writes a 500 if there was one.&#xA;&#x9;r.Use(gin.CustomRecovery(func(c *gin.Context, recovered interface{}) {&#xA;&#x9;&#x9;if err, ok := recovered.(string); ok {&#xA;&#x9;&#x9;&#x9;c.String(http.StatusInternalServerError, fmt.Sprintf(&#34;error: %s&#34;, err))&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;c.AbortWithStatus(http.StatusInternalServerError)&#xA;&#x9;}))&#xA;&#xA;&#x9;r.GET(&#34;/panic&#34;, func(c *gin.Context) {&#xA;&#x9;&#x9;// panic with a string -- the custom middleware could save this to a database or report it to the user&#xA;&#x9;&#x9;panic(&#34;foo&#34;)&#xA;&#x9;})&#xA;&#xA;&#x9;r.GET(&#34;/&#34;, func(c *gin.Context) {&#xA;&#x9;&#x9;c.String(http.StatusOK, &#34;ohai&#34;)&#xA;&#x9;})&#xA;&#xA;&#x9;// Listen and serve on 0.0.0.0:8080&#xA;&#x9;r.Run(&#34;:8080&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;How to write log file&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func main() {&#xA;    // Disable Console Color, you don&#39;t need console color when writing the logs to file.&#xA;    gin.DisableConsoleColor()&#xA;&#xA;    // Logging to a file.&#xA;    f, _ := os.Create(&#34;gin.log&#34;)&#xA;    gin.DefaultWriter = io.MultiWriter(f)&#xA;&#xA;    // Use the following code if you need to write the logs to file and console at the same time.&#xA;    // gin.DefaultWriter = io.MultiWriter(f, os.Stdout)&#xA;&#xA;    router := gin.Default()&#xA;    router.GET(&#34;/ping&#34;, func(c *gin.Context) {&#xA;        c.String(200, &#34;pong&#34;)&#xA;    })&#xA;&#xA; &amp;nbsp; &amp;nbsp;router.Run(&#34;:8080&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Custom Log Format&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func main() {&#xA;&#x9;router := gin.New()&#xA;&#xA;&#x9;// LoggerWithFormatter middleware will write the logs to gin.DefaultWriter&#xA;&#x9;// By default gin.DefaultWriter = os.Stdout&#xA;&#x9;router.Use(gin.LoggerWithFormatter(func(param gin.LogFormatterParams) string {&#xA;&#xA;&#x9;&#x9;// your custom format&#xA;&#x9;&#x9;return fmt.Sprintf(&#34;%s - [%s] \&#34;%s %s %s %d %s \&#34;%s\&#34; %s\&#34;\n&#34;,&#xA;&#x9;&#x9;&#x9;&#x9;param.ClientIP,&#xA;&#x9;&#x9;&#x9;&#x9;param.TimeStamp.Format(time.RFC1123),&#xA;&#x9;&#x9;&#x9;&#x9;param.Method,&#xA;&#x9;&#x9;&#x9;&#x9;param.Path,&#xA;&#x9;&#x9;&#x9;&#x9;param.Request.Proto,&#xA;&#x9;&#x9;&#x9;&#x9;param.StatusCode,&#xA;&#x9;&#x9;&#x9;&#x9;param.Latency,&#xA;&#x9;&#x9;&#x9;&#x9;param.Request.UserAgent(),&#xA;&#x9;&#x9;&#x9;&#x9;param.ErrorMessage,&#xA;&#x9;&#x9;)&#xA;&#x9;}))&#xA;&#x9;router.Use(gin.Recovery())&#xA;&#xA;&#x9;router.GET(&#34;/ping&#34;, func(c *gin.Context) {&#xA;&#x9;&#x9;c.String(200, &#34;pong&#34;)&#xA;&#x9;})&#xA;&#xA;&#x9;router.Run(&#34;:8080&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Sample Output&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;::1 - [Fri, 07 Dec 2018 17:04:38 JST] &#34;GET /ping HTTP/1.1 200 122.767¬µs &#34;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.80 Safari/537.36&#34; &#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Controlling Log output coloring&lt;/h3&gt; &#xA;&lt;p&gt;By default, logs output on console should be colorized depending on the detected TTY.&lt;/p&gt; &#xA;&lt;p&gt;Never colorize logs:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func main() {&#xA;    // Disable log&#39;s color&#xA;    gin.DisableConsoleColor()&#xA;&#xA;    // Creates a gin router with default middleware:&#xA;    // logger and recovery (crash-free) middleware&#xA;    router := gin.Default()&#xA;&#xA;    router.GET(&#34;/ping&#34;, func(c *gin.Context) {&#xA;        c.String(200, &#34;pong&#34;)&#xA;    })&#xA;&#xA;    router.Run(&#34;:8080&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Always colorize logs:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func main() {&#xA;    // Force log&#39;s color&#xA;    gin.ForceConsoleColor()&#xA;&#xA;    // Creates a gin router with default middleware:&#xA;    // logger and recovery (crash-free) middleware&#xA;    router := gin.Default()&#xA;&#xA;    router.GET(&#34;/ping&#34;, func(c *gin.Context) {&#xA;        c.String(200, &#34;pong&#34;)&#xA;    })&#xA;&#xA;    router.Run(&#34;:8080&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Model binding and validation&lt;/h3&gt; &#xA;&lt;p&gt;To bind a request body into a type, use model binding. We currently support binding of JSON, XML, YAML, TOML and standard form values (foo=bar&amp;amp;boo=baz).&lt;/p&gt; &#xA;&lt;p&gt;Gin uses &lt;a href=&#34;https://github.com/go-playground/validator&#34;&gt;&lt;strong&gt;go-playground/validator/v10&lt;/strong&gt;&lt;/a&gt; for validation. Check the full docs on tags usage &lt;a href=&#34;https://godoc.org/github.com/go-playground/validator#hdr-Baked_In_Validators_and_Tags&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Note that you need to set the corresponding binding tag on all fields you want to bind. For example, when binding from JSON, set &lt;code&gt;json:&#34;fieldname&#34;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Also, Gin provides two sets of methods for binding:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Type&lt;/strong&gt; - Must bind &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Methods&lt;/strong&gt; - &lt;code&gt;Bind&lt;/code&gt;, &lt;code&gt;BindJSON&lt;/code&gt;, &lt;code&gt;BindXML&lt;/code&gt;, &lt;code&gt;BindQuery&lt;/code&gt;, &lt;code&gt;BindYAML&lt;/code&gt;, &lt;code&gt;BindHeader&lt;/code&gt;, &lt;code&gt;BindTOML&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Behavior&lt;/strong&gt; - These methods use &lt;code&gt;MustBindWith&lt;/code&gt; under the hood. If there is a binding error, the request is aborted with &lt;code&gt;c.AbortWithError(400, err).SetType(ErrorTypeBind)&lt;/code&gt;. This sets the response status code to 400 and the &lt;code&gt;Content-Type&lt;/code&gt; header is set to &lt;code&gt;text/plain; charset=utf-8&lt;/code&gt;. Note that if you try to set the response code after this, it will result in a warning &lt;code&gt;[GIN-debug] [WARNING] Headers were already written. Wanted to override status code 400 with 422&lt;/code&gt;. If you wish to have greater control over the behavior, consider using the &lt;code&gt;ShouldBind&lt;/code&gt; equivalent method.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Type&lt;/strong&gt; - Should bind &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Methods&lt;/strong&gt; - &lt;code&gt;ShouldBind&lt;/code&gt;, &lt;code&gt;ShouldBindJSON&lt;/code&gt;, &lt;code&gt;ShouldBindXML&lt;/code&gt;, &lt;code&gt;ShouldBindQuery&lt;/code&gt;, &lt;code&gt;ShouldBindYAML&lt;/code&gt;, &lt;code&gt;ShouldBindHeader&lt;/code&gt;, &lt;code&gt;ShouldBindTOML&lt;/code&gt;,&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Behavior&lt;/strong&gt; - These methods use &lt;code&gt;ShouldBindWith&lt;/code&gt; under the hood. If there is a binding error, the error is returned and it is the developer&#39;s responsibility to handle the request and error appropriately.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;When using the Bind-method, Gin tries to infer the binder depending on the Content-Type header. If you are sure what you are binding, you can use &lt;code&gt;MustBindWith&lt;/code&gt; or &lt;code&gt;ShouldBindWith&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can also specify that specific fields are required. If a field is decorated with &lt;code&gt;binding:&#34;required&#34;&lt;/code&gt; and has a empty value when binding, an error will be returned.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Binding from JSON&#xA;type Login struct {&#xA;&#x9;User     string `form:&#34;user&#34; json:&#34;user&#34; xml:&#34;user&#34;  binding:&#34;required&#34;`&#xA;&#x9;Password string `form:&#34;password&#34; json:&#34;password&#34; xml:&#34;password&#34; binding:&#34;required&#34;`&#xA;}&#xA;&#xA;func main() {&#xA;&#x9;router := gin.Default()&#xA;&#xA;&#x9;// Example for binding JSON ({&#34;user&#34;: &#34;manu&#34;, &#34;password&#34;: &#34;123&#34;})&#xA;&#x9;router.POST(&#34;/loginJSON&#34;, func(c *gin.Context) {&#xA;&#x9;&#x9;var json Login&#xA;&#x9;&#x9;if err := c.ShouldBindJSON(&amp;amp;json); err != nil {&#xA;&#x9;&#x9;&#x9;c.JSON(http.StatusBadRequest, gin.H{&#34;error&#34;: err.Error()})&#xA;&#x9;&#x9;&#x9;return&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;if json.User != &#34;manu&#34; || json.Password != &#34;123&#34; {&#xA;&#x9;&#x9;&#x9;c.JSON(http.StatusUnauthorized, gin.H{&#34;status&#34;: &#34;unauthorized&#34;})&#xA;&#x9;&#x9;&#x9;return&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;c.JSON(http.StatusOK, gin.H{&#34;status&#34;: &#34;you are logged in&#34;})&#xA;&#x9;})&#xA;&#xA;&#x9;// Example for binding XML (&#xA;&#x9;//&#x9;&amp;lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&amp;gt;&#xA;&#x9;//&#x9;&amp;lt;root&amp;gt;&#xA;&#x9;//&#x9;&#x9;&amp;lt;user&amp;gt;manu&amp;lt;/user&amp;gt;&#xA;&#x9;//&#x9;&#x9;&amp;lt;password&amp;gt;123&amp;lt;/password&amp;gt;&#xA;&#x9;//&#x9;&amp;lt;/root&amp;gt;)&#xA;&#x9;router.POST(&#34;/loginXML&#34;, func(c *gin.Context) {&#xA;&#x9;&#x9;var xml Login&#xA;&#x9;&#x9;if err := c.ShouldBindXML(&amp;amp;xml); err != nil {&#xA;&#x9;&#x9;&#x9;c.JSON(http.StatusBadRequest, gin.H{&#34;error&#34;: err.Error()})&#xA;&#x9;&#x9;&#x9;return&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;if xml.User != &#34;manu&#34; || xml.Password != &#34;123&#34; {&#xA;&#x9;&#x9;&#x9;c.JSON(http.StatusUnauthorized, gin.H{&#34;status&#34;: &#34;unauthorized&#34;})&#xA;&#x9;&#x9;&#x9;return&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;c.JSON(http.StatusOK, gin.H{&#34;status&#34;: &#34;you are logged in&#34;})&#xA;&#x9;})&#xA;&#xA;&#x9;// Example for binding a HTML form (user=manu&amp;amp;password=123)&#xA;&#x9;router.POST(&#34;/loginForm&#34;, func(c *gin.Context) {&#xA;&#x9;&#x9;var form Login&#xA;&#x9;&#x9;// This will infer what binder to use depending on the content-type header.&#xA;&#x9;&#x9;if err := c.ShouldBind(&amp;amp;form); err != nil {&#xA;&#x9;&#x9;&#x9;c.JSON(http.StatusBadRequest, gin.H{&#34;error&#34;: err.Error()})&#xA;&#x9;&#x9;&#x9;return&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;if form.User != &#34;manu&#34; || form.Password != &#34;123&#34; {&#xA;&#x9;&#x9;&#x9;c.JSON(http.StatusUnauthorized, gin.H{&#34;status&#34;: &#34;unauthorized&#34;})&#xA;&#x9;&#x9;&#x9;return&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;c.JSON(http.StatusOK, gin.H{&#34;status&#34;: &#34;you are logged in&#34;})&#xA;&#x9;})&#xA;&#xA;&#x9;// Listen and serve on 0.0.0.0:8080&#xA;&#x9;router.Run(&#34;:8080&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Sample request&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ curl -v -X POST \&#xA;  http://localhost:8080/loginJSON \&#xA;  -H &#39;content-type: application/json&#39; \&#xA;  -d &#39;{ &#34;user&#34;: &#34;manu&#34; }&#39;&#xA;&amp;gt; POST /loginJSON HTTP/1.1&#xA;&amp;gt; Host: localhost:8080&#xA;&amp;gt; User-Agent: curl/7.51.0&#xA;&amp;gt; Accept: */*&#xA;&amp;gt; content-type: application/json&#xA;&amp;gt; Content-Length: 18&#xA;&amp;gt;&#xA;* upload completely sent off: 18 out of 18 bytes&#xA;&amp;lt; HTTP/1.1 400 Bad Request&#xA;&amp;lt; Content-Type: application/json; charset=utf-8&#xA;&amp;lt; Date: Fri, 04 Aug 2017 03:51:31 GMT&#xA;&amp;lt; Content-Length: 100&#xA;&amp;lt;&#xA;{&#34;error&#34;:&#34;Key: &#39;Login.Password&#39; Error:Field validation for &#39;Password&#39; failed on the &#39;required&#39; tag&#34;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Skip validate&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;When running the above example using the above the &lt;code&gt;curl&lt;/code&gt; command, it returns error. Because the example use &lt;code&gt;binding:&#34;required&#34;&lt;/code&gt; for &lt;code&gt;Password&lt;/code&gt;. If use &lt;code&gt;binding:&#34;-&#34;&lt;/code&gt; for &lt;code&gt;Password&lt;/code&gt;, then it will not return error when running the above example again.&lt;/p&gt; &#xA;&lt;h3&gt;Custom Validators&lt;/h3&gt; &#xA;&lt;p&gt;It is also possible to register custom validators. See the &lt;a href=&#34;https://github.com/gin-gonic/examples/tree/master/custom-validation/server.go&#34;&gt;example code&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;net/http&#34;&#xA;&#x9;&#34;time&#34;&#xA;&#xA;&#x9;&#34;github.com/gin-gonic/gin&#34;&#xA;&#x9;&#34;github.com/gin-gonic/gin/binding&#34;&#xA;&#x9;&#34;github.com/go-playground/validator/v10&#34;&#xA;)&#xA;&#xA;// Booking contains binded and validated data.&#xA;type Booking struct {&#xA;&#x9;CheckIn  time.Time `form:&#34;check_in&#34; binding:&#34;required,bookabledate&#34; time_format:&#34;2006-01-02&#34;`&#xA;&#x9;CheckOut time.Time `form:&#34;check_out&#34; binding:&#34;required,gtfield=CheckIn&#34; time_format:&#34;2006-01-02&#34;`&#xA;}&#xA;&#xA;var bookableDate validator.Func = func(fl validator.FieldLevel) bool {&#xA;&#x9;date, ok := fl.Field().Interface().(time.Time)&#xA;&#x9;if ok {&#xA;&#x9;&#x9;today := time.Now()&#xA;&#x9;&#x9;if today.After(date) {&#xA;&#x9;&#x9;&#x9;return false&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;return true&#xA;}&#xA;&#xA;func main() {&#xA;&#x9;route := gin.Default()&#xA;&#xA;&#x9;if v, ok := binding.Validator.Engine().(*validator.Validate); ok {&#xA;&#x9;&#x9;v.RegisterValidation(&#34;bookabledate&#34;, bookableDate)&#xA;&#x9;}&#xA;&#xA;&#x9;route.GET(&#34;/bookable&#34;, getBookable)&#xA;&#x9;route.Run(&#34;:8085&#34;)&#xA;}&#xA;&#xA;func getBookable(c *gin.Context) {&#xA;&#x9;var b Booking&#xA;&#x9;if err := c.ShouldBindWith(&amp;amp;b, binding.Query); err == nil {&#xA;&#x9;&#x9;c.JSON(http.StatusOK, gin.H{&#34;message&#34;: &#34;Booking dates are valid!&#34;})&#xA;&#x9;} else {&#xA;&#x9;&#x9;c.JSON(http.StatusBadRequest, gin.H{&#34;error&#34;: err.Error()})&#xA;&#x9;}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ curl &#34;localhost:8085/bookable?check_in=2030-04-16&amp;amp;check_out=2030-04-17&#34;&#xA;{&#34;message&#34;:&#34;Booking dates are valid!&#34;}&#xA;&#xA;$ curl &#34;localhost:8085/bookable?check_in=2030-03-10&amp;amp;check_out=2030-03-09&#34;&#xA;{&#34;error&#34;:&#34;Key: &#39;Booking.CheckOut&#39; Error:Field validation for &#39;CheckOut&#39; failed on the &#39;gtfield&#39; tag&#34;}&#xA;&#xA;$ curl &#34;localhost:8085/bookable?check_in=2000-03-09&amp;amp;check_out=2000-03-10&#34;&#xA;{&#34;error&#34;:&#34;Key: &#39;Booking.CheckIn&#39; Error:Field validation for &#39;CheckIn&#39; failed on the &#39;bookabledate&#39; tag&#34;}%&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/go-playground/validator/releases/tag/v8.7&#34;&gt;Struct level validations&lt;/a&gt; can also be registered this way. See the &lt;a href=&#34;https://github.com/gin-gonic/examples/tree/master/struct-lvl-validations&#34;&gt;struct-lvl-validation example&lt;/a&gt; to learn more.&lt;/p&gt; &#xA;&lt;h3&gt;Only Bind Query String&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;ShouldBindQuery&lt;/code&gt; function only binds the query params and not the post data. See the &lt;a href=&#34;https://github.com/gin-gonic/gin/issues/742#issuecomment-315953017&#34;&gt;detail information&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;log&#34;&#xA;&#xA;&#x9;&#34;github.com/gin-gonic/gin&#34;&#xA;)&#xA;&#xA;type Person struct {&#xA;&#x9;Name    string `form:&#34;name&#34;`&#xA;&#x9;Address string `form:&#34;address&#34;`&#xA;}&#xA;&#xA;func main() {&#xA;&#x9;route := gin.Default()&#xA;&#x9;route.Any(&#34;/testing&#34;, startPage)&#xA;&#x9;route.Run(&#34;:8085&#34;)&#xA;}&#xA;&#xA;func startPage(c *gin.Context) {&#xA;&#x9;var person Person&#xA;&#x9;if c.ShouldBindQuery(&amp;amp;person) == nil {&#xA;&#x9;&#x9;log.Println(&#34;====== Only Bind By Query String ======&#34;)&#xA;&#x9;&#x9;log.Println(person.Name)&#xA;&#x9;&#x9;log.Println(person.Address)&#xA;&#x9;}&#xA;&#x9;c.String(200, &#34;Success&#34;)&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Bind Query String or Post Data&lt;/h3&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://github.com/gin-gonic/gin/issues/742#issuecomment-264681292&#34;&gt;detail information&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;log&#34;&#xA;&#x9;&#34;time&#34;&#xA;&#xA;&#x9;&#34;github.com/gin-gonic/gin&#34;&#xA;)&#xA;&#xA;type Person struct {&#xA;        Name       string    `form:&#34;name&#34;`&#xA;        Address    string    `form:&#34;address&#34;`&#xA;        Birthday   time.Time `form:&#34;birthday&#34; time_format:&#34;2006-01-02&#34; time_utc:&#34;1&#34;`&#xA;        CreateTime time.Time `form:&#34;createTime&#34; time_format:&#34;unixNano&#34;`&#xA;        UnixTime   time.Time `form:&#34;unixTime&#34; time_format:&#34;unix&#34;`&#xA;}&#xA;&#xA;func main() {&#xA;&#x9;route := gin.Default()&#xA;&#x9;route.GET(&#34;/testing&#34;, startPage)&#xA;&#x9;route.Run(&#34;:8085&#34;)&#xA;}&#xA;&#xA;func startPage(c *gin.Context) {&#xA;&#x9;var person Person&#xA;&#x9;// If `GET`, only `Form` binding engine (`query`) used.&#xA;&#x9;// If `POST`, first checks the `content-type` for `JSON` or `XML`, then uses `Form` (`form-data`).&#xA;&#x9;// See more at https://github.com/gin-gonic/gin/blob/master/binding/binding.go#L88&#xA;        if c.ShouldBind(&amp;amp;person) == nil {&#xA;                log.Println(person.Name)&#xA;                log.Println(person.Address)&#xA;                log.Println(person.Birthday)&#xA;                log.Println(person.CreateTime)&#xA;                log.Println(person.UnixTime)&#xA;        }&#xA;&#xA;&#x9;c.String(200, &#34;Success&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Test it with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ curl -X GET &#34;localhost:8085/testing?name=appleboy&amp;amp;address=xyz&amp;amp;birthday=1992-03-15&amp;amp;createTime=1562400033000000123&amp;amp;unixTime=1562400033&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Bind Uri&lt;/h3&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://github.com/gin-gonic/gin/issues/846&#34;&gt;detail information&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import &#34;github.com/gin-gonic/gin&#34;&#xA;&#xA;type Person struct {&#xA;&#x9;ID string `uri:&#34;id&#34; binding:&#34;required,uuid&#34;`&#xA;&#x9;Name string `uri:&#34;name&#34; binding:&#34;required&#34;`&#xA;}&#xA;&#xA;func main() {&#xA;&#x9;route := gin.Default()&#xA;&#x9;route.GET(&#34;/:name/:id&#34;, func(c *gin.Context) {&#xA;&#x9;&#x9;var person Person&#xA;&#x9;&#x9;if err := c.ShouldBindUri(&amp;amp;person); err != nil {&#xA;&#x9;&#x9;&#x9;c.JSON(400, gin.H{&#34;msg&#34;: err.Error()})&#xA;&#x9;&#x9;&#x9;return&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;c.JSON(200, gin.H{&#34;name&#34;: person.Name, &#34;uuid&#34;: person.ID})&#xA;&#x9;})&#xA;&#x9;route.Run(&#34;:8088&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Test it with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ curl -v localhost:8088/thinkerou/987fbc97-4bed-5078-9f07-9141ba07c9f3&#xA;$ curl -v localhost:8088/thinkerou/not-uuid&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Bind Header&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;fmt&#34;&#xA;&#x9;&#34;github.com/gin-gonic/gin&#34;&#xA;)&#xA;&#xA;type testHeader struct {&#xA;&#x9;Rate   int    `header:&#34;Rate&#34;`&#xA;&#x9;Domain string `header:&#34;Domain&#34;`&#xA;}&#xA;&#xA;func main() {&#xA;&#x9;r := gin.Default()&#xA;&#x9;r.GET(&#34;/&#34;, func(c *gin.Context) {&#xA;&#x9;&#x9;h := testHeader{}&#xA;&#xA;&#x9;&#x9;if err := c.ShouldBindHeader(&amp;amp;h); err != nil {&#xA;&#x9;&#x9;&#x9;c.JSON(200, err)&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;fmt.Printf(&#34;%#v\n&#34;, h)&#xA;&#x9;&#x9;c.JSON(200, gin.H{&#34;Rate&#34;: h.Rate, &#34;Domain&#34;: h.Domain})&#xA;&#x9;})&#xA;&#xA;&#x9;r.Run()&#xA;&#xA;// client&#xA;// curl -H &#34;rate:300&#34; -H &#34;domain:music&#34; 127.0.0.1:8080/&#xA;// output&#xA;// {&#34;Domain&#34;:&#34;music&#34;,&#34;Rate&#34;:300}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Bind HTML checkboxes&lt;/h3&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://github.com/gin-gonic/gin/issues/129#issuecomment-124260092&#34;&gt;detail information&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;main.go&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;...&#xA;&#xA;type myForm struct {&#xA;    Colors []string `form:&#34;colors[]&#34;`&#xA;}&#xA;&#xA;...&#xA;&#xA;func formHandler(c *gin.Context) {&#xA;    var fakeForm myForm&#xA;    c.ShouldBind(&amp;amp;fakeForm)&#xA;    c.JSON(200, gin.H{&#34;color&#34;: fakeForm.Colors})&#xA;}&#xA;&#xA;...&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;form.html&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;form action=&#34;/&#34; method=&#34;POST&#34;&amp;gt;&#xA;    &amp;lt;p&amp;gt;Check some colors&amp;lt;/p&amp;gt;&#xA;    &amp;lt;label for=&#34;red&#34;&amp;gt;Red&amp;lt;/label&amp;gt;&#xA;    &amp;lt;input type=&#34;checkbox&#34; name=&#34;colors[]&#34; value=&#34;red&#34; id=&#34;red&#34;&amp;gt;&#xA;    &amp;lt;label for=&#34;green&#34;&amp;gt;Green&amp;lt;/label&amp;gt;&#xA;    &amp;lt;input type=&#34;checkbox&#34; name=&#34;colors[]&#34; value=&#34;green&#34; id=&#34;green&#34;&amp;gt;&#xA;    &amp;lt;label for=&#34;blue&#34;&amp;gt;Blue&amp;lt;/label&amp;gt;&#xA;    &amp;lt;input type=&#34;checkbox&#34; name=&#34;colors[]&#34; value=&#34;blue&#34; id=&#34;blue&#34;&amp;gt;&#xA;    &amp;lt;input type=&#34;submit&#34;&amp;gt;&#xA;&amp;lt;/form&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;result:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;{&#34;color&#34;:[&#34;red&#34;,&#34;green&#34;,&#34;blue&#34;]}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Multipart/Urlencoded binding&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type ProfileForm struct {&#xA;&#x9;Name   string                `form:&#34;name&#34; binding:&#34;required&#34;`&#xA;&#x9;Avatar *multipart.FileHeader `form:&#34;avatar&#34; binding:&#34;required&#34;`&#xA;&#xA;&#x9;// or for multiple files&#xA;&#x9;// Avatars []*multipart.FileHeader `form:&#34;avatar&#34; binding:&#34;required&#34;`&#xA;}&#xA;&#xA;func main() {&#xA;&#x9;router := gin.Default()&#xA;&#x9;router.POST(&#34;/profile&#34;, func(c *gin.Context) {&#xA;&#x9;&#x9;// you can bind multipart form with explicit binding declaration:&#xA;&#x9;&#x9;// c.ShouldBindWith(&amp;amp;form, binding.Form)&#xA;&#x9;&#x9;// or you can simply use autobinding with ShouldBind method:&#xA;&#x9;&#x9;var form ProfileForm&#xA;&#x9;&#x9;// in this case proper binding will be automatically selected&#xA;&#x9;&#x9;if err := c.ShouldBind(&amp;amp;form); err != nil {&#xA;&#x9;&#x9;&#x9;c.String(http.StatusBadRequest, &#34;bad request&#34;)&#xA;&#x9;&#x9;&#x9;return&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;err := c.SaveUploadedFile(form.Avatar, form.Avatar.Filename)&#xA;&#x9;&#x9;if err != nil {&#xA;&#x9;&#x9;&#x9;c.String(http.StatusInternalServerError, &#34;unknown error&#34;)&#xA;&#x9;&#x9;&#x9;return&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;// db.Save(&amp;amp;form)&#xA;&#xA;&#x9;&#x9;c.String(http.StatusOK, &#34;ok&#34;)&#xA;&#x9;})&#xA;&#x9;router.Run(&#34;:8080&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Test it with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ curl -X POST -v --form name=user --form &#34;avatar=@./avatar.png&#34; http://localhost:8080/profile&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;XML, JSON, YAML and ProtoBuf rendering&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func main() {&#xA;&#x9;r := gin.Default()&#xA;&#xA;&#x9;// gin.H is a shortcut for map[string]interface{}&#xA;&#x9;r.GET(&#34;/someJSON&#34;, func(c *gin.Context) {&#xA;&#x9;&#x9;c.JSON(http.StatusOK, gin.H{&#34;message&#34;: &#34;hey&#34;, &#34;status&#34;: http.StatusOK})&#xA;&#x9;})&#xA;&#xA;&#x9;r.GET(&#34;/moreJSON&#34;, func(c *gin.Context) {&#xA;&#x9;&#x9;// You also can use a struct&#xA;&#x9;&#x9;var msg struct {&#xA;&#x9;&#x9;&#x9;Name    string `json:&#34;user&#34;`&#xA;&#x9;&#x9;&#x9;Message string&#xA;&#x9;&#x9;&#x9;Number  int&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;msg.Name = &#34;Lena&#34;&#xA;&#x9;&#x9;msg.Message = &#34;hey&#34;&#xA;&#x9;&#x9;msg.Number = 123&#xA;&#x9;&#x9;// Note that msg.Name becomes &#34;user&#34; in the JSON&#xA;&#x9;&#x9;// Will output  :   {&#34;user&#34;: &#34;Lena&#34;, &#34;Message&#34;: &#34;hey&#34;, &#34;Number&#34;: 123}&#xA;&#x9;&#x9;c.JSON(http.StatusOK, msg)&#xA;&#x9;})&#xA;&#xA;&#x9;r.GET(&#34;/someXML&#34;, func(c *gin.Context) {&#xA;&#x9;&#x9;c.XML(http.StatusOK, gin.H{&#34;message&#34;: &#34;hey&#34;, &#34;status&#34;: http.StatusOK})&#xA;&#x9;})&#xA;&#xA;&#x9;r.GET(&#34;/someYAML&#34;, func(c *gin.Context) {&#xA;&#x9;&#x9;c.YAML(http.StatusOK, gin.H{&#34;message&#34;: &#34;hey&#34;, &#34;status&#34;: http.StatusOK})&#xA;&#x9;})&#xA;&#xA;&#x9;r.GET(&#34;/someProtoBuf&#34;, func(c *gin.Context) {&#xA;&#x9;&#x9;reps := []int64{int64(1), int64(2)}&#xA;&#x9;&#x9;label := &#34;test&#34;&#xA;&#x9;&#x9;// The specific definition of protobuf is written in the testdata/protoexample file.&#xA;&#x9;&#x9;data := &amp;amp;protoexample.Test{&#xA;&#x9;&#x9;&#x9;Label: &amp;amp;label,&#xA;&#x9;&#x9;&#x9;Reps:  reps,&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;// Note that data becomes binary data in the response&#xA;&#x9;&#x9;// Will output protoexample.Test protobuf serialized data&#xA;&#x9;&#x9;c.ProtoBuf(http.StatusOK, data)&#xA;&#x9;})&#xA;&#xA;&#x9;// Listen and serve on 0.0.0.0:8080&#xA;&#x9;r.Run(&#34;:8080&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;SecureJSON&lt;/h4&gt; &#xA;&lt;p&gt;Using SecureJSON to prevent json hijacking. Default prepends &lt;code&gt;&#34;while(1),&#34;&lt;/code&gt; to response body if the given struct is array values.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func main() {&#xA;&#x9;r := gin.Default()&#xA;&#xA;&#x9;// You can also use your own secure json prefix&#xA;&#x9;// r.SecureJsonPrefix(&#34;)]}&#39;,\n&#34;)&#xA;&#xA;&#x9;r.GET(&#34;/someJSON&#34;, func(c *gin.Context) {&#xA;&#x9;&#x9;names := []string{&#34;lena&#34;, &#34;austin&#34;, &#34;foo&#34;}&#xA;&#xA;&#x9;&#x9;// Will output  :   while(1);[&#34;lena&#34;,&#34;austin&#34;,&#34;foo&#34;]&#xA;&#x9;&#x9;c.SecureJSON(http.StatusOK, names)&#xA;&#x9;})&#xA;&#xA;&#x9;// Listen and serve on 0.0.0.0:8080&#xA;&#x9;r.Run(&#34;:8080&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;JSONP&lt;/h4&gt; &#xA;&lt;p&gt;Using JSONP to request data from a server in a different domain. Add callback to response body if the query parameter callback exists.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func main() {&#xA;&#x9;r := gin.Default()&#xA;&#xA;&#x9;r.GET(&#34;/JSONP&#34;, func(c *gin.Context) {&#xA;&#x9;&#x9;data := gin.H{&#xA;&#x9;&#x9;&#x9;&#34;foo&#34;: &#34;bar&#34;,&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;//callback is x&#xA;&#x9;&#x9;// Will output  :   x({\&#34;foo\&#34;:\&#34;bar\&#34;})&#xA;&#x9;&#x9;c.JSONP(http.StatusOK, data)&#xA;&#x9;})&#xA;&#xA;&#x9;// Listen and serve on 0.0.0.0:8080&#xA;&#x9;r.Run(&#34;:8080&#34;)&#xA;&#xA;        // client&#xA;        // curl http://127.0.0.1:8080/JSONP?callback=x&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;AsciiJSON&lt;/h4&gt; &#xA;&lt;p&gt;Using AsciiJSON to Generates ASCII-only JSON with escaped non-ASCII characters.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func main() {&#xA;&#x9;r := gin.Default()&#xA;&#xA;&#x9;r.GET(&#34;/someJSON&#34;, func(c *gin.Context) {&#xA;&#x9;&#x9;data := gin.H{&#xA;&#x9;&#x9;&#x9;&#34;lang&#34;: &#34;GOËØ≠Ë®Ä&#34;,&#xA;&#x9;&#x9;&#x9;&#34;tag&#34;:  &#34;&amp;lt;br&amp;gt;&#34;,&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;// will output : {&#34;lang&#34;:&#34;GO\u8bed\u8a00&#34;,&#34;tag&#34;:&#34;\u003cbr\u003e&#34;}&#xA;&#x9;&#x9;c.AsciiJSON(http.StatusOK, data)&#xA;&#x9;})&#xA;&#xA;&#x9;// Listen and serve on 0.0.0.0:8080&#xA;&#x9;r.Run(&#34;:8080&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;PureJSON&lt;/h4&gt; &#xA;&lt;p&gt;Normally, JSON replaces special HTML characters with their unicode entities, e.g. &lt;code&gt;&amp;lt;&lt;/code&gt; becomes &lt;code&gt;\u003c&lt;/code&gt;. If you want to encode such characters literally, you can use PureJSON instead. This feature is unavailable in Go 1.6 and lower.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func main() {&#xA;&#x9;r := gin.Default()&#xA;&#xA;&#x9;// Serves unicode entities&#xA;&#x9;r.GET(&#34;/json&#34;, func(c *gin.Context) {&#xA;&#x9;&#x9;c.JSON(200, gin.H{&#xA;&#x9;&#x9;&#x9;&#34;html&#34;: &#34;&amp;lt;b&amp;gt;Hello, world!&amp;lt;/b&amp;gt;&#34;,&#xA;&#x9;&#x9;})&#xA;&#x9;})&#xA;&#xA;&#x9;// Serves literal characters&#xA;&#x9;r.GET(&#34;/purejson&#34;, func(c *gin.Context) {&#xA;&#x9;&#x9;c.PureJSON(200, gin.H{&#xA;&#x9;&#x9;&#x9;&#34;html&#34;: &#34;&amp;lt;b&amp;gt;Hello, world!&amp;lt;/b&amp;gt;&#34;,&#xA;&#x9;&#x9;})&#xA;&#x9;})&#xA;&#xA;&#x9;// listen and serve on 0.0.0.0:8080&#xA;&#x9;r.Run(&#34;:8080&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Serving static files&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func main() {&#xA;&#x9;router := gin.Default()&#xA;&#x9;router.Static(&#34;/assets&#34;, &#34;./assets&#34;)&#xA;&#x9;router.StaticFS(&#34;/more_static&#34;, http.Dir(&#34;my_file_system&#34;))&#xA;&#x9;router.StaticFile(&#34;/favicon.ico&#34;, &#34;./resources/favicon.ico&#34;)&#xA;&#x9;router.StaticFileFS(&#34;/more_favicon.ico&#34;, &#34;more_favicon.ico&#34;, http.Dir(&#34;my_file_system&#34;))&#xA;&#x9;&#xA;&#x9;// Listen and serve on 0.0.0.0:8080&#xA;&#x9;router.Run(&#34;:8080&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Serving data from file&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func main() {&#xA;&#x9;router := gin.Default()&#xA;&#xA;&#x9;router.GET(&#34;/local/file&#34;, func(c *gin.Context) {&#xA;&#x9;&#x9;c.File(&#34;local/file.go&#34;)&#xA;&#x9;})&#xA;&#xA;&#x9;var fs http.FileSystem = // ...&#xA;&#x9;router.GET(&#34;/fs/file&#34;, func(c *gin.Context) {&#xA;&#x9;&#x9;c.FileFromFS(&#34;fs/file.go&#34;, fs)&#xA;&#x9;})&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Serving data from reader&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func main() {&#xA;&#x9;router := gin.Default()&#xA;&#x9;router.GET(&#34;/someDataFromReader&#34;, func(c *gin.Context) {&#xA;&#x9;&#x9;response, err := http.Get(&#34;https://raw.githubusercontent.com/gin-gonic/logo/master/color.png&#34;)&#xA;&#x9;&#x9;if err != nil || response.StatusCode != http.StatusOK {&#xA;&#x9;&#x9;&#x9;c.Status(http.StatusServiceUnavailable)&#xA;&#x9;&#x9;&#x9;return&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;reader := response.Body&#xA; &#x9;&#x9;defer reader.Close()&#xA;&#x9;&#x9;contentLength := response.ContentLength&#xA;&#x9;&#x9;contentType := response.Header.Get(&#34;Content-Type&#34;)&#xA;&#xA;&#x9;&#x9;extraHeaders := map[string]string{&#xA;&#x9;&#x9;&#x9;&#34;Content-Disposition&#34;: `attachment; filename=&#34;gopher.png&#34;`,&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;c.DataFromReader(http.StatusOK, contentLength, contentType, reader, extraHeaders)&#xA;&#x9;})&#xA;&#x9;router.Run(&#34;:8080&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;HTML rendering&lt;/h3&gt; &#xA;&lt;p&gt;Using LoadHTMLGlob() or LoadHTMLFiles()&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func main() {&#xA;&#x9;router := gin.Default()&#xA;&#x9;router.LoadHTMLGlob(&#34;templates/*&#34;)&#xA;&#x9;//router.LoadHTMLFiles(&#34;templates/template1.html&#34;, &#34;templates/template2.html&#34;)&#xA;&#x9;router.GET(&#34;/index&#34;, func(c *gin.Context) {&#xA;&#x9;&#x9;c.HTML(http.StatusOK, &#34;index.tmpl&#34;, gin.H{&#xA;&#x9;&#x9;&#x9;&#34;title&#34;: &#34;Main website&#34;,&#xA;&#x9;&#x9;})&#xA;&#x9;})&#xA;&#x9;router.Run(&#34;:8080&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;templates/index.tmpl&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;html&amp;gt;&#xA;&#x9;&amp;lt;h1&amp;gt;&#xA;&#x9;&#x9;{{ .title }}&#xA;&#x9;&amp;lt;/h1&amp;gt;&#xA;&amp;lt;/html&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Using templates with same name in different directories&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func main() {&#xA;&#x9;router := gin.Default()&#xA;&#x9;router.LoadHTMLGlob(&#34;templates/**/*&#34;)&#xA;&#x9;router.GET(&#34;/posts/index&#34;, func(c *gin.Context) {&#xA;&#x9;&#x9;c.HTML(http.StatusOK, &#34;posts/index.tmpl&#34;, gin.H{&#xA;&#x9;&#x9;&#x9;&#34;title&#34;: &#34;Posts&#34;,&#xA;&#x9;&#x9;})&#xA;&#x9;})&#xA;&#x9;router.GET(&#34;/users/index&#34;, func(c *gin.Context) {&#xA;&#x9;&#x9;c.HTML(http.StatusOK, &#34;users/index.tmpl&#34;, gin.H{&#xA;&#x9;&#x9;&#x9;&#34;title&#34;: &#34;Users&#34;,&#xA;&#x9;&#x9;})&#xA;&#x9;})&#xA;&#x9;router.Run(&#34;:8080&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;templates/posts/index.tmpl&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;{{ define &#34;posts/index.tmpl&#34; }}&#xA;&amp;lt;html&amp;gt;&amp;lt;h1&amp;gt;&#xA;&#x9;{{ .title }}&#xA;&amp;lt;/h1&amp;gt;&#xA;&amp;lt;p&amp;gt;Using posts/index.tmpl&amp;lt;/p&amp;gt;&#xA;&amp;lt;/html&amp;gt;&#xA;{{ end }}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;templates/users/index.tmpl&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;{{ define &#34;users/index.tmpl&#34; }}&#xA;&amp;lt;html&amp;gt;&amp;lt;h1&amp;gt;&#xA;&#x9;{{ .title }}&#xA;&amp;lt;/h1&amp;gt;&#xA;&amp;lt;p&amp;gt;Using users/index.tmpl&amp;lt;/p&amp;gt;&#xA;&amp;lt;/html&amp;gt;&#xA;{{ end }}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Custom Template renderer&lt;/h4&gt; &#xA;&lt;p&gt;You can also use your own html template render&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;import &#34;html/template&#34;&#xA;&#xA;func main() {&#xA;&#x9;router := gin.Default()&#xA;&#x9;html := template.Must(template.ParseFiles(&#34;file1&#34;, &#34;file2&#34;))&#xA;&#x9;router.SetHTMLTemplate(html)&#xA;&#x9;router.Run(&#34;:8080&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Custom Delimiters&lt;/h4&gt; &#xA;&lt;p&gt;You may use custom delims&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;&#x9;r := gin.Default()&#xA;&#x9;r.Delims(&#34;{[{&#34;, &#34;}]}&#34;)&#xA;&#x9;r.LoadHTMLGlob(&#34;/path/to/templates&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Custom Template Funcs&lt;/h4&gt; &#xA;&lt;p&gt;See the detail &lt;a href=&#34;https://github.com/gin-gonic/examples/tree/master/template&#34;&gt;example code&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;main.go&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;import (&#xA;    &#34;fmt&#34;&#xA;    &#34;html/template&#34;&#xA;    &#34;net/http&#34;&#xA;    &#34;time&#34;&#xA;&#xA;    &#34;github.com/gin-gonic/gin&#34;&#xA;)&#xA;&#xA;func formatAsDate(t time.Time) string {&#xA;    year, month, day := t.Date()&#xA;    return fmt.Sprintf(&#34;%d/%02d/%02d&#34;, year, month, day)&#xA;}&#xA;&#xA;func main() {&#xA;    router := gin.Default()&#xA;    router.Delims(&#34;{[{&#34;, &#34;}]}&#34;)&#xA;    router.SetFuncMap(template.FuncMap{&#xA;        &#34;formatAsDate&#34;: formatAsDate,&#xA;    })&#xA;    router.LoadHTMLFiles(&#34;./testdata/template/raw.tmpl&#34;)&#xA;&#xA;    router.GET(&#34;/raw&#34;, func(c *gin.Context) {&#xA;        c.HTML(http.StatusOK, &#34;raw.tmpl&#34;, gin.H{&#xA;            &#34;now&#34;: time.Date(2017, 07, 01, 0, 0, 0, 0, time.UTC),&#xA;        })&#xA;    })&#xA;&#xA;    router.Run(&#34;:8080&#34;)&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;raw.tmpl&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;Date: {[{.now | formatAsDate}]}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Result:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Date: 2017/07/01&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Multitemplate&lt;/h3&gt; &#xA;&lt;p&gt;Gin allow by default use only one html.Template. Check &lt;a href=&#34;https://github.com/gin-contrib/multitemplate&#34;&gt;a multitemplate render&lt;/a&gt; for using features like go 1.6 &lt;code&gt;block template&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Redirects&lt;/h3&gt; &#xA;&lt;p&gt;Issuing a HTTP redirect is easy. Both internal and external locations are supported.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;r.GET(&#34;/test&#34;, func(c *gin.Context) {&#xA;&#x9;c.Redirect(http.StatusMovedPermanently, &#34;http://www.google.com/&#34;)&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Issuing a HTTP redirect from POST. Refer to issue: &lt;a href=&#34;https://github.com/gin-gonic/gin/issues/444&#34;&gt;#444&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;r.POST(&#34;/test&#34;, func(c *gin.Context) {&#xA;&#x9;c.Redirect(http.StatusFound, &#34;/foo&#34;)&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Issuing a Router redirect, use &lt;code&gt;HandleContext&lt;/code&gt; like below.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;r.GET(&#34;/test&#34;, func(c *gin.Context) {&#xA;    c.Request.URL.Path = &#34;/test2&#34;&#xA;    r.HandleContext(c)&#xA;})&#xA;r.GET(&#34;/test2&#34;, func(c *gin.Context) {&#xA;    c.JSON(200, gin.H{&#34;hello&#34;: &#34;world&#34;})&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Custom Middleware&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func Logger() gin.HandlerFunc {&#xA;&#x9;return func(c *gin.Context) {&#xA;&#x9;&#x9;t := time.Now()&#xA;&#xA;&#x9;&#x9;// Set example variable&#xA;&#x9;&#x9;c.Set(&#34;example&#34;, &#34;12345&#34;)&#xA;&#xA;&#x9;&#x9;// before request&#xA;&#xA;&#x9;&#x9;c.Next()&#xA;&#xA;&#x9;&#x9;// after request&#xA;&#x9;&#x9;latency := time.Since(t)&#xA;&#x9;&#x9;log.Print(latency)&#xA;&#xA;&#x9;&#x9;// access the status we are sending&#xA;&#x9;&#x9;status := c.Writer.Status()&#xA;&#x9;&#x9;log.Println(status)&#xA;&#x9;}&#xA;}&#xA;&#xA;func main() {&#xA;&#x9;r := gin.New()&#xA;&#x9;r.Use(Logger())&#xA;&#xA;&#x9;r.GET(&#34;/test&#34;, func(c *gin.Context) {&#xA;&#x9;&#x9;example := c.MustGet(&#34;example&#34;).(string)&#xA;&#xA;&#x9;&#x9;// it would print: &#34;12345&#34;&#xA;&#x9;&#x9;log.Println(example)&#xA;&#x9;})&#xA;&#xA;&#x9;// Listen and serve on 0.0.0.0:8080&#xA;&#x9;r.Run(&#34;:8080&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using BasicAuth() middleware&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// simulate some private data&#xA;var secrets = gin.H{&#xA;&#x9;&#34;foo&#34;:    gin.H{&#34;email&#34;: &#34;foo@bar.com&#34;, &#34;phone&#34;: &#34;123433&#34;},&#xA;&#x9;&#34;austin&#34;: gin.H{&#34;email&#34;: &#34;austin@example.com&#34;, &#34;phone&#34;: &#34;666&#34;},&#xA;&#x9;&#34;lena&#34;:   gin.H{&#34;email&#34;: &#34;lena@guapa.com&#34;, &#34;phone&#34;: &#34;523443&#34;},&#xA;}&#xA;&#xA;func main() {&#xA;&#x9;r := gin.Default()&#xA;&#xA;&#x9;// Group using gin.BasicAuth() middleware&#xA;&#x9;// gin.Accounts is a shortcut for map[string]string&#xA;&#x9;authorized := r.Group(&#34;/admin&#34;, gin.BasicAuth(gin.Accounts{&#xA;&#x9;&#x9;&#34;foo&#34;:    &#34;bar&#34;,&#xA;&#x9;&#x9;&#34;austin&#34;: &#34;1234&#34;,&#xA;&#x9;&#x9;&#34;lena&#34;:   &#34;hello2&#34;,&#xA;&#x9;&#x9;&#34;manu&#34;:   &#34;4321&#34;,&#xA;&#x9;}))&#xA;&#xA;&#x9;// /admin/secrets endpoint&#xA;&#x9;// hit &#34;localhost:8080/admin/secrets&#xA;&#x9;authorized.GET(&#34;/secrets&#34;, func(c *gin.Context) {&#xA;&#x9;&#x9;// get user, it was set by the BasicAuth middleware&#xA;&#x9;&#x9;user := c.MustGet(gin.AuthUserKey).(string)&#xA;&#x9;&#x9;if secret, ok := secrets[user]; ok {&#xA;&#x9;&#x9;&#x9;c.JSON(http.StatusOK, gin.H{&#34;user&#34;: user, &#34;secret&#34;: secret})&#xA;&#x9;&#x9;} else {&#xA;&#x9;&#x9;&#x9;c.JSON(http.StatusOK, gin.H{&#34;user&#34;: user, &#34;secret&#34;: &#34;NO SECRET :(&#34;})&#xA;&#x9;&#x9;}&#xA;&#x9;})&#xA;&#xA;&#x9;// Listen and serve on 0.0.0.0:8080&#xA;&#x9;r.Run(&#34;:8080&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Goroutines inside a middleware&lt;/h3&gt; &#xA;&lt;p&gt;When starting new Goroutines inside a middleware or handler, you &lt;strong&gt;SHOULD NOT&lt;/strong&gt; use the original context inside it, you have to use a read-only copy.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func main() {&#xA;&#x9;r := gin.Default()&#xA;&#xA;&#x9;r.GET(&#34;/long_async&#34;, func(c *gin.Context) {&#xA;&#x9;&#x9;// create copy to be used inside the goroutine&#xA;&#x9;&#x9;cCp := c.Copy()&#xA;&#x9;&#x9;go func() {&#xA;&#x9;&#x9;&#x9;// simulate a long task with time.Sleep(). 5 seconds&#xA;&#x9;&#x9;&#x9;time.Sleep(5 * time.Second)&#xA;&#xA;&#x9;&#x9;&#x9;// note that you are using the copied context &#34;cCp&#34;, IMPORTANT&#xA;&#x9;&#x9;&#x9;log.Println(&#34;Done! in path &#34; + cCp.Request.URL.Path)&#xA;&#x9;&#x9;}()&#xA;&#x9;})&#xA;&#xA;&#x9;r.GET(&#34;/long_sync&#34;, func(c *gin.Context) {&#xA;&#x9;&#x9;// simulate a long task with time.Sleep(). 5 seconds&#xA;&#x9;&#x9;time.Sleep(5 * time.Second)&#xA;&#xA;&#x9;&#x9;// since we are NOT using a goroutine, we do not have to copy the context&#xA;&#x9;&#x9;log.Println(&#34;Done! in path &#34; + c.Request.URL.Path)&#xA;&#x9;})&#xA;&#xA;&#x9;// Listen and serve on 0.0.0.0:8080&#xA;&#x9;r.Run(&#34;:8080&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Custom HTTP configuration&lt;/h3&gt; &#xA;&lt;p&gt;Use &lt;code&gt;http.ListenAndServe()&lt;/code&gt; directly, like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func main() {&#xA;&#x9;router := gin.Default()&#xA;&#x9;http.ListenAndServe(&#34;:8080&#34;, router)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func main() {&#xA;&#x9;router := gin.Default()&#xA;&#xA;&#x9;s := &amp;amp;http.Server{&#xA;&#x9;&#x9;Addr:           &#34;:8080&#34;,&#xA;&#x9;&#x9;Handler:        router,&#xA;&#x9;&#x9;ReadTimeout:    10 * time.Second,&#xA;&#x9;&#x9;WriteTimeout:   10 * time.Second,&#xA;&#x9;&#x9;MaxHeaderBytes: 1 &amp;lt;&amp;lt; 20,&#xA;&#x9;}&#xA;&#x9;s.ListenAndServe()&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Support Let&#39;s Encrypt&lt;/h3&gt; &#xA;&lt;p&gt;example for 1-line LetsEncrypt HTTPS servers.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;log&#34;&#xA;&#xA;&#x9;&#34;github.com/gin-gonic/autotls&#34;&#xA;&#x9;&#34;github.com/gin-gonic/gin&#34;&#xA;)&#xA;&#xA;func main() {&#xA;&#x9;r := gin.Default()&#xA;&#xA;&#x9;// Ping handler&#xA;&#x9;r.GET(&#34;/ping&#34;, func(c *gin.Context) {&#xA;&#x9;&#x9;c.String(200, &#34;pong&#34;)&#xA;&#x9;})&#xA;&#xA;&#x9;log.Fatal(autotls.Run(r, &#34;example1.com&#34;, &#34;example2.com&#34;))&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;example for custom autocert manager.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;log&#34;&#xA;&#xA;&#x9;&#34;github.com/gin-gonic/autotls&#34;&#xA;&#x9;&#34;github.com/gin-gonic/gin&#34;&#xA;&#x9;&#34;golang.org/x/crypto/acme/autocert&#34;&#xA;)&#xA;&#xA;func main() {&#xA;&#x9;r := gin.Default()&#xA;&#xA;&#x9;// Ping handler&#xA;&#x9;r.GET(&#34;/ping&#34;, func(c *gin.Context) {&#xA;&#x9;&#x9;c.String(200, &#34;pong&#34;)&#xA;&#x9;})&#xA;&#xA;&#x9;m := autocert.Manager{&#xA;&#x9;&#x9;Prompt:     autocert.AcceptTOS,&#xA;&#x9;&#x9;HostPolicy: autocert.HostWhitelist(&#34;example1.com&#34;, &#34;example2.com&#34;),&#xA;&#x9;&#x9;Cache:      autocert.DirCache(&#34;/var/www/.cache&#34;),&#xA;&#x9;}&#xA;&#xA;&#x9;log.Fatal(autotls.RunWithManager(r, &amp;amp;m))&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Run multiple service using Gin&lt;/h3&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://github.com/gin-gonic/gin/issues/346&#34;&gt;question&lt;/a&gt; and try the following example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;log&#34;&#xA;&#x9;&#34;net/http&#34;&#xA;&#x9;&#34;time&#34;&#xA;&#xA;&#x9;&#34;github.com/gin-gonic/gin&#34;&#xA;&#x9;&#34;golang.org/x/sync/errgroup&#34;&#xA;)&#xA;&#xA;var (&#xA;&#x9;g errgroup.Group&#xA;)&#xA;&#xA;func router01() http.Handler {&#xA;&#x9;e := gin.New()&#xA;&#x9;e.Use(gin.Recovery())&#xA;&#x9;e.GET(&#34;/&#34;, func(c *gin.Context) {&#xA;&#x9;&#x9;c.JSON(&#xA;&#x9;&#x9;&#x9;http.StatusOK,&#xA;&#x9;&#x9;&#x9;gin.H{&#xA;&#x9;&#x9;&#x9;&#x9;&#34;code&#34;:  http.StatusOK,&#xA;&#x9;&#x9;&#x9;&#x9;&#34;error&#34;: &#34;Welcome server 01&#34;,&#xA;&#x9;&#x9;&#x9;},&#xA;&#x9;&#x9;)&#xA;&#x9;})&#xA;&#xA;&#x9;return e&#xA;}&#xA;&#xA;func router02() http.Handler {&#xA;&#x9;e := gin.New()&#xA;&#x9;e.Use(gin.Recovery())&#xA;&#x9;e.GET(&#34;/&#34;, func(c *gin.Context) {&#xA;&#x9;&#x9;c.JSON(&#xA;&#x9;&#x9;&#x9;http.StatusOK,&#xA;&#x9;&#x9;&#x9;gin.H{&#xA;&#x9;&#x9;&#x9;&#x9;&#34;code&#34;:  http.StatusOK,&#xA;&#x9;&#x9;&#x9;&#x9;&#34;error&#34;: &#34;Welcome server 02&#34;,&#xA;&#x9;&#x9;&#x9;},&#xA;&#x9;&#x9;)&#xA;&#x9;})&#xA;&#xA;&#x9;return e&#xA;}&#xA;&#xA;func main() {&#xA;&#x9;server01 := &amp;amp;http.Server{&#xA;&#x9;&#x9;Addr:         &#34;:8080&#34;,&#xA;&#x9;&#x9;Handler:      router01(),&#xA;&#x9;&#x9;ReadTimeout:  5 * time.Second,&#xA;&#x9;&#x9;WriteTimeout: 10 * time.Second,&#xA;&#x9;}&#xA;&#xA;&#x9;server02 := &amp;amp;http.Server{&#xA;&#x9;&#x9;Addr:         &#34;:8081&#34;,&#xA;&#x9;&#x9;Handler:      router02(),&#xA;&#x9;&#x9;ReadTimeout:  5 * time.Second,&#xA;&#x9;&#x9;WriteTimeout: 10 * time.Second,&#xA;&#x9;}&#xA;&#xA;&#x9;g.Go(func() error {&#xA;&#x9;&#x9;err := server01.ListenAndServe()&#xA;&#x9;&#x9;if err != nil &amp;amp;&amp;amp; err != http.ErrServerClosed {&#xA;&#x9;&#x9;&#x9;log.Fatal(err)&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return err&#xA;&#x9;})&#xA;&#xA;&#x9;g.Go(func() error {&#xA;&#x9;&#x9;err := server02.ListenAndServe()&#xA;&#x9;&#x9;if err != nil &amp;amp;&amp;amp; err != http.ErrServerClosed {&#xA;&#x9;&#x9;&#x9;log.Fatal(err)&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return err&#xA;&#x9;})&#xA;&#xA;&#x9;if err := g.Wait(); err != nil {&#xA;&#x9;&#x9;log.Fatal(err)&#xA;&#x9;}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Graceful shutdown or restart&lt;/h3&gt; &#xA;&lt;p&gt;There are a few approaches you can use to perform a graceful shutdown or restart. You can make use of third-party packages specifically built for that, or you can manually do the same with the functions and methods from the built-in packages.&lt;/p&gt; &#xA;&lt;h4&gt;Third-party packages&lt;/h4&gt; &#xA;&lt;p&gt;We can use &lt;a href=&#34;https://github.com/fvbock/endless&#34;&gt;fvbock/endless&lt;/a&gt; to replace the default &lt;code&gt;ListenAndServe&lt;/code&gt;. Refer to issue &lt;a href=&#34;https://github.com/gin-gonic/gin/issues/296&#34;&gt;#296&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;router := gin.Default()&#xA;router.GET(&#34;/&#34;, handler)&#xA;// [...]&#xA;endless.ListenAndServe(&#34;:4242&#34;, router)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatives:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/braintree/manners&#34;&gt;manners&lt;/a&gt;: A polite Go HTTP server that shuts down gracefully.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tylerb/graceful&#34;&gt;graceful&lt;/a&gt;: Graceful is a Go package enabling graceful shutdown of an http.Handler server.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/facebookgo/grace&#34;&gt;grace&lt;/a&gt;: Graceful restart &amp;amp; zero downtime deploy for Go servers.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Manually&lt;/h4&gt; &#xA;&lt;p&gt;In case you are using Go 1.8 or a later version, you may not need to use those libraries. Consider using &lt;code&gt;http.Server&lt;/code&gt;&#39;s built-in &lt;a href=&#34;https://golang.org/pkg/net/http/#Server.Shutdown&#34;&gt;Shutdown()&lt;/a&gt; method for graceful shutdowns. The example below describes its usage, and we&#39;ve got more examples using gin &lt;a href=&#34;https://github.com/gin-gonic/examples/tree/master/graceful-shutdown&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// +build go1.8&#xA;&#xA;package main&#xA;&#xA;import (&#xA;&#x9;&#34;context&#34;&#xA;&#x9;&#34;log&#34;&#xA;&#x9;&#34;net/http&#34;&#xA;&#x9;&#34;os&#34;&#xA;&#x9;&#34;os/signal&#34;&#xA;&#x9;&#34;syscall&#34;&#xA;&#x9;&#34;time&#34;&#xA;&#xA;&#x9;&#34;github.com/gin-gonic/gin&#34;&#xA;)&#xA;&#xA;func main() {&#xA;&#x9;router := gin.Default()&#xA;&#x9;router.GET(&#34;/&#34;, func(c *gin.Context) {&#xA;&#x9;&#x9;time.Sleep(5 * time.Second)&#xA;&#x9;&#x9;c.String(http.StatusOK, &#34;Welcome Gin Server&#34;)&#xA;&#x9;})&#xA;&#xA;&#x9;srv := &amp;amp;http.Server{&#xA;&#x9;&#x9;Addr:    &#34;:8080&#34;,&#xA;&#x9;&#x9;Handler: router,&#xA;&#x9;}&#xA;&#xA;&#x9;// Initializing the server in a goroutine so that&#xA;&#x9;// it won&#39;t block the graceful shutdown handling below&#xA;&#x9;go func() {&#xA;&#x9;&#x9;if err := srv.ListenAndServe(); err != nil &amp;amp;&amp;amp; errors.Is(err, http.ErrServerClosed) {&#xA;&#x9;&#x9;&#x9;log.Printf(&#34;listen: %s\n&#34;, err)&#xA;&#x9;&#x9;}&#xA;&#x9;}()&#xA;&#xA;&#x9;// Wait for interrupt signal to gracefully shutdown the server with&#xA;&#x9;// a timeout of 5 seconds.&#xA;&#x9;quit := make(chan os.Signal)&#xA;&#x9;// kill (no param) default send syscall.SIGTERM&#xA;&#x9;// kill -2 is syscall.SIGINT&#xA;&#x9;// kill -9 is syscall.SIGKILL but can&#39;t be caught, so don&#39;t need to add it&#xA;&#x9;signal.Notify(quit, syscall.SIGINT, syscall.SIGTERM)&#xA;&#x9;&amp;lt;-quit&#xA;&#x9;log.Println(&#34;Shutting down server...&#34;)&#xA;&#xA;&#x9;// The context is used to inform the server it has 5 seconds to finish&#xA;&#x9;// the request it is currently handling&#xA;&#x9;ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)&#xA;&#x9;defer cancel()&#xA;&#xA;&#x9;if err := srv.Shutdown(ctx); err != nil {&#xA;&#x9;&#x9;log.Fatal(&#34;Server forced to shutdown:&#34;, err)&#xA;&#x9;}&#xA;&#xA;&#x9;log.Println(&#34;Server exiting&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Build a single binary with templates&lt;/h3&gt; &#xA;&lt;p&gt;You can build a server into a single binary containing templates by using &lt;a href=&#34;https://github.com/jessevdk/go-assets&#34;&gt;go-assets&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func main() {&#xA;&#x9;r := gin.New()&#xA;&#xA;&#x9;t, err := loadTemplate()&#xA;&#x9;if err != nil {&#xA;&#x9;&#x9;panic(err)&#xA;&#x9;}&#xA;&#x9;r.SetHTMLTemplate(t)&#xA;&#xA;&#x9;r.GET(&#34;/&#34;, func(c *gin.Context) {&#xA;&#x9;&#x9;c.HTML(http.StatusOK, &#34;/html/index.tmpl&#34;,nil)&#xA;&#x9;})&#xA;&#x9;r.Run(&#34;:8080&#34;)&#xA;}&#xA;&#xA;// loadTemplate loads templates embedded by go-assets-builder&#xA;func loadTemplate() (*template.Template, error) {&#xA;&#x9;t := template.New(&#34;&#34;)&#xA;&#x9;for name, file := range Assets.Files {&#xA;&#x9;&#x9;defer file.Close()&#xA;&#x9;&#x9;if file.IsDir() || !strings.HasSuffix(name, &#34;.tmpl&#34;) {&#xA;&#x9;&#x9;&#x9;continue&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;h, err := ioutil.ReadAll(file)&#xA;&#x9;&#x9;if err != nil {&#xA;&#x9;&#x9;&#x9;return nil, err&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;t, err = t.New(name).Parse(string(h))&#xA;&#x9;&#x9;if err != nil {&#xA;&#x9;&#x9;&#x9;return nil, err&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;return t, nil&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See a complete example in the &lt;code&gt;https://github.com/gin-gonic/examples/tree/master/assets-in-binary&lt;/code&gt; directory.&lt;/p&gt; &#xA;&lt;h3&gt;Bind form-data request with custom struct&lt;/h3&gt; &#xA;&lt;p&gt;The follow example using custom struct:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type StructA struct {&#xA;    FieldA string `form:&#34;field_a&#34;`&#xA;}&#xA;&#xA;type StructB struct {&#xA;    NestedStruct StructA&#xA;    FieldB string `form:&#34;field_b&#34;`&#xA;}&#xA;&#xA;type StructC struct {&#xA;    NestedStructPointer *StructA&#xA;    FieldC string `form:&#34;field_c&#34;`&#xA;}&#xA;&#xA;type StructD struct {&#xA;    NestedAnonyStruct struct {&#xA;        FieldX string `form:&#34;field_x&#34;`&#xA;    }&#xA;    FieldD string `form:&#34;field_d&#34;`&#xA;}&#xA;&#xA;func GetDataB(c *gin.Context) {&#xA;    var b StructB&#xA;    c.Bind(&amp;amp;b)&#xA;    c.JSON(200, gin.H{&#xA;        &#34;a&#34;: b.NestedStruct,&#xA;        &#34;b&#34;: b.FieldB,&#xA;    })&#xA;}&#xA;&#xA;func GetDataC(c *gin.Context) {&#xA;    var b StructC&#xA;    c.Bind(&amp;amp;b)&#xA;    c.JSON(200, gin.H{&#xA;        &#34;a&#34;: b.NestedStructPointer,&#xA;        &#34;c&#34;: b.FieldC,&#xA;    })&#xA;}&#xA;&#xA;func GetDataD(c *gin.Context) {&#xA;    var b StructD&#xA;    c.Bind(&amp;amp;b)&#xA;    c.JSON(200, gin.H{&#xA;        &#34;x&#34;: b.NestedAnonyStruct,&#xA;        &#34;d&#34;: b.FieldD,&#xA;    })&#xA;}&#xA;&#xA;func main() {&#xA;    r := gin.Default()&#xA;    r.GET(&#34;/getb&#34;, GetDataB)&#xA;    r.GET(&#34;/getc&#34;, GetDataC)&#xA;    r.GET(&#34;/getd&#34;, GetDataD)&#xA;&#xA;    r.Run()&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Using the command &lt;code&gt;curl&lt;/code&gt; command result:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ curl &#34;http://localhost:8080/getb?field_a=hello&amp;amp;field_b=world&#34;&#xA;{&#34;a&#34;:{&#34;FieldA&#34;:&#34;hello&#34;},&#34;b&#34;:&#34;world&#34;}&#xA;$ curl &#34;http://localhost:8080/getc?field_a=hello&amp;amp;field_c=world&#34;&#xA;{&#34;a&#34;:{&#34;FieldA&#34;:&#34;hello&#34;},&#34;c&#34;:&#34;world&#34;}&#xA;$ curl &#34;http://localhost:8080/getd?field_x=hello&amp;amp;field_d=world&#34;&#xA;{&#34;d&#34;:&#34;world&#34;,&#34;x&#34;:{&#34;FieldX&#34;:&#34;hello&#34;}}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Try to bind body into different structs&lt;/h3&gt; &#xA;&lt;p&gt;The normal methods for binding request body consumes &lt;code&gt;c.Request.Body&lt;/code&gt; and they cannot be called multiple times.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type formA struct {&#xA;  Foo string `json:&#34;foo&#34; xml:&#34;foo&#34; binding:&#34;required&#34;`&#xA;}&#xA;&#xA;type formB struct {&#xA;  Bar string `json:&#34;bar&#34; xml:&#34;bar&#34; binding:&#34;required&#34;`&#xA;}&#xA;&#xA;func SomeHandler(c *gin.Context) {&#xA;  objA := formA{}&#xA;  objB := formB{}&#xA;  // This c.ShouldBind consumes c.Request.Body and it cannot be reused.&#xA;  if errA := c.ShouldBind(&amp;amp;objA); errA == nil {&#xA;    c.String(http.StatusOK, `the body should be formA`)&#xA;  // Always an error is occurred by this because c.Request.Body is EOF now.&#xA;  } else if errB := c.ShouldBind(&amp;amp;objB); errB == nil {&#xA;    c.String(http.StatusOK, `the body should be formB`)&#xA;  } else {&#xA;    ...&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For this, you can use &lt;code&gt;c.ShouldBindBodyWith&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func SomeHandler(c *gin.Context) {&#xA;  objA := formA{}&#xA;  objB := formB{}&#xA;  // This reads c.Request.Body and stores the result into the context.&#xA;  if errA := c.ShouldBindBodyWith(&amp;amp;objA, binding.Form); errA == nil {&#xA;    c.String(http.StatusOK, `the body should be formA`)&#xA;  // At this time, it reuses body stored in the context.&#xA;  } else if errB := c.ShouldBindBodyWith(&amp;amp;objB, binding.JSON); errB == nil {&#xA;    c.String(http.StatusOK, `the body should be formB JSON`)&#xA;  // And it can accepts other formats&#xA;  } else if errB2 := c.ShouldBindBodyWith(&amp;amp;objB, binding.XML); errB2 == nil {&#xA;    c.String(http.StatusOK, `the body should be formB XML`)&#xA;  } else {&#xA;    ...&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;c.ShouldBindBodyWith&lt;/code&gt; stores body into the context before binding. This has a slight impact to performance, so you should not use this method if you are enough to call binding at once.&lt;/li&gt; &#xA; &lt;li&gt;This feature is only needed for some formats -- &lt;code&gt;JSON&lt;/code&gt;, &lt;code&gt;XML&lt;/code&gt;, &lt;code&gt;MsgPack&lt;/code&gt;, &lt;code&gt;ProtoBuf&lt;/code&gt;. For other formats, &lt;code&gt;Query&lt;/code&gt;, &lt;code&gt;Form&lt;/code&gt;, &lt;code&gt;FormPost&lt;/code&gt;, &lt;code&gt;FormMultipart&lt;/code&gt;, can be called by &lt;code&gt;c.ShouldBind()&lt;/code&gt; multiple times without any damage to performance (See &lt;a href=&#34;https://github.com/gin-gonic/gin/pull/1341&#34;&gt;#1341&lt;/a&gt;).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Bind form-data request with custom struct and custom tag&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;const (&#xA;&#x9;customerTag = &#34;url&#34;&#xA;&#x9;defaultMemory = 32 &amp;lt;&amp;lt; 20&#xA;)&#xA;&#xA;type customerBinding struct {}&#xA;&#xA;func (customerBinding) Name() string {&#xA;&#x9;return &#34;form&#34;&#xA;}&#xA;&#xA;func (customerBinding) Bind(req *http.Request, obj interface{}) error {&#xA;&#x9;if err := req.ParseForm(); err != nil {&#xA;&#x9;&#x9;return err&#xA;&#x9;}&#xA;&#x9;if err := req.ParseMultipartForm(defaultMemory); err != nil {&#xA;&#x9;&#x9;if err != http.ErrNotMultipart {&#xA;&#x9;&#x9;&#x9;return err&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;if err := binding.MapFormWithTag(obj, req.Form, customerTag); err != nil {&#xA;&#x9;&#x9;return err&#xA;&#x9;}&#xA;&#x9;return validate(obj)&#xA;}&#xA;&#xA;func validate(obj interface{}) error {&#xA;&#x9;if binding.Validator == nil {&#xA;&#x9;&#x9;return nil&#xA;&#x9;}&#xA;&#x9;return binding.Validator.ValidateStruct(obj)&#xA;}&#xA;&#xA;// Now we can do this!!!&#xA;// FormA is a external type that we can&#39;t modify it&#39;s tag&#xA;type FormA struct {&#xA;&#x9;FieldA string `url:&#34;field_a&#34;`&#xA;}&#xA;&#xA;func ListHandler(s *Service) func(ctx *gin.Context) {&#xA;&#x9;return func(ctx *gin.Context) {&#xA;&#x9;&#x9;var urlBinding = customerBinding{}&#xA;&#x9;&#x9;var opt FormA&#xA;&#x9;&#x9;err := ctx.MustBindWith(&amp;amp;opt, urlBinding)&#xA;&#x9;&#x9;if err != nil {&#xA;&#x9;&#x9;&#x9;...&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;...&#xA;&#x9;}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;http2 server push&lt;/h3&gt; &#xA;&lt;p&gt;http.Pusher is supported only &lt;strong&gt;go1.8+&lt;/strong&gt;. See the &lt;a href=&#34;https://blog.golang.org/h2push&#34;&gt;golang blog&lt;/a&gt; for detail information.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;html/template&#34;&#xA;&#x9;&#34;log&#34;&#xA;&#xA;&#x9;&#34;github.com/gin-gonic/gin&#34;&#xA;)&#xA;&#xA;var html = template.Must(template.New(&#34;https&#34;).Parse(`&#xA;&amp;lt;html&amp;gt;&#xA;&amp;lt;head&amp;gt;&#xA;  &amp;lt;title&amp;gt;Https Test&amp;lt;/title&amp;gt;&#xA;  &amp;lt;script src=&#34;/assets/app.js&#34;&amp;gt;&amp;lt;/script&amp;gt;&#xA;&amp;lt;/head&amp;gt;&#xA;&amp;lt;body&amp;gt;&#xA;  &amp;lt;h1 style=&#34;color:red;&#34;&amp;gt;Welcome, Ginner!&amp;lt;/h1&amp;gt;&#xA;&amp;lt;/body&amp;gt;&#xA;&amp;lt;/html&amp;gt;&#xA;`))&#xA;&#xA;func main() {&#xA;&#x9;r := gin.Default()&#xA;&#x9;r.Static(&#34;/assets&#34;, &#34;./assets&#34;)&#xA;&#x9;r.SetHTMLTemplate(html)&#xA;&#xA;&#x9;r.GET(&#34;/&#34;, func(c *gin.Context) {&#xA;&#x9;&#x9;if pusher := c.Writer.Pusher(); pusher != nil {&#xA;&#x9;&#x9;&#x9;// use pusher.Push() to do server push&#xA;&#x9;&#x9;&#x9;if err := pusher.Push(&#34;/assets/app.js&#34;, nil); err != nil {&#xA;&#x9;&#x9;&#x9;&#x9;log.Printf(&#34;Failed to push: %v&#34;, err)&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;c.HTML(200, &#34;https&#34;, gin.H{&#xA;&#x9;&#x9;&#x9;&#34;status&#34;: &#34;success&#34;,&#xA;&#x9;&#x9;})&#xA;&#x9;})&#xA;&#xA;&#x9;// Listen and Server in https://127.0.0.1:8080&#xA;&#x9;r.RunTLS(&#34;:8080&#34;, &#34;./testdata/server.pem&#34;, &#34;./testdata/server.key&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Define format for the log of routes&lt;/h3&gt; &#xA;&lt;p&gt;The default log of routes is:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;[GIN-debug] POST   /foo                      --&amp;gt; main.main.func1 (3 handlers)&#xA;[GIN-debug] GET    /bar                      --&amp;gt; main.main.func2 (3 handlers)&#xA;[GIN-debug] GET    /status                   --&amp;gt; main.main.func3 (3 handlers)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to log this information in given format (e.g. JSON, key values or something else), then you can define this format with &lt;code&gt;gin.DebugPrintRouteFunc&lt;/code&gt;. In the example below, we log all routes with standard log package but you can use another log tools that suits of your needs.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;import (&#xA;&#x9;&#34;log&#34;&#xA;&#x9;&#34;net/http&#34;&#xA;&#xA;&#x9;&#34;github.com/gin-gonic/gin&#34;&#xA;)&#xA;&#xA;func main() {&#xA;&#x9;r := gin.Default()&#xA;&#x9;gin.DebugPrintRouteFunc = func(httpMethod, absolutePath, handlerName string, nuHandlers int) {&#xA;&#x9;&#x9;log.Printf(&#34;endpoint %v %v %v %v\n&#34;, httpMethod, absolutePath, handlerName, nuHandlers)&#xA;&#x9;}&#xA;&#xA;&#x9;r.POST(&#34;/foo&#34;, func(c *gin.Context) {&#xA;&#x9;&#x9;c.JSON(http.StatusOK, &#34;foo&#34;)&#xA;&#x9;})&#xA;&#xA;&#x9;r.GET(&#34;/bar&#34;, func(c *gin.Context) {&#xA;&#x9;&#x9;c.JSON(http.StatusOK, &#34;bar&#34;)&#xA;&#x9;})&#xA;&#xA;&#x9;r.GET(&#34;/status&#34;, func(c *gin.Context) {&#xA;&#x9;&#x9;c.JSON(http.StatusOK, &#34;ok&#34;)&#xA;&#x9;})&#xA;&#xA;&#x9;// Listen and Server in http://0.0.0.0:8080&#xA;&#x9;r.Run()&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Set and get a cookie&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;import (&#xA;    &#34;fmt&#34;&#xA;&#xA;    &#34;github.com/gin-gonic/gin&#34;&#xA;)&#xA;&#xA;func main() {&#xA;&#xA;    router := gin.Default()&#xA;&#xA;    router.GET(&#34;/cookie&#34;, func(c *gin.Context) {&#xA;&#xA;        cookie, err := c.Cookie(&#34;gin_cookie&#34;)&#xA;&#xA;        if err != nil {&#xA;            cookie = &#34;NotSet&#34;&#xA;            c.SetCookie(&#34;gin_cookie&#34;, &#34;test&#34;, 3600, &#34;/&#34;, &#34;localhost&#34;, false, true)&#xA;        }&#xA;&#xA;        fmt.Printf(&#34;Cookie value: %s \n&#34;, cookie)&#xA;    })&#xA;&#xA;    router.Run()&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Don&#39;t trust all proxies&lt;/h2&gt; &#xA;&lt;p&gt;Gin lets you specify which headers to hold the real client IP (if any), as well as specifying which proxies (or direct clients) you trust to specify one of these headers.&lt;/p&gt; &#xA;&lt;p&gt;Use function &lt;code&gt;SetTrustedProxies()&lt;/code&gt; on your &lt;code&gt;gin.Engine&lt;/code&gt; to specify network addresses or network CIDRs from where clients which their request headers related to client IP can be trusted. They can be IPv4 addresses, IPv4 CIDRs, IPv6 addresses or IPv6 CIDRs.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Attention:&lt;/strong&gt; Gin trust all proxies by default if you don&#39;t specify a trusted proxy using the function above, &lt;strong&gt;this is NOT safe&lt;/strong&gt;. At the same time, if you don&#39;t use any proxy, you can disable this feature by using &lt;code&gt;Engine.SetTrustedProxies(nil)&lt;/code&gt;, then &lt;code&gt;Context.ClientIP()&lt;/code&gt; will return the remote address directly to avoid some unnecessary computation.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;import (&#xA;&#x9;&#34;fmt&#34;&#xA;&#xA;&#x9;&#34;github.com/gin-gonic/gin&#34;&#xA;)&#xA;&#xA;func main() {&#xA;&#xA;&#x9;router := gin.Default()&#xA;&#x9;router.SetTrustedProxies([]string{&#34;192.168.1.2&#34;})&#xA;&#xA;&#x9;router.GET(&#34;/&#34;, func(c *gin.Context) {&#xA;&#x9;&#x9;// If the client is 192.168.1.2, use the X-Forwarded-For&#xA;&#x9;&#x9;// header to deduce the original client IP from the trust-&#xA;&#x9;&#x9;// worthy parts of that header.&#xA;&#x9;&#x9;// Otherwise, simply return the direct client IP&#xA;&#x9;&#x9;fmt.Printf(&#34;ClientIP: %s\n&#34;, c.ClientIP())&#xA;&#x9;})&#xA;&#x9;router.Run()&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Notice:&lt;/strong&gt; If you are using a CDN service, you can set the &lt;code&gt;Engine.TrustedPlatform&lt;/code&gt; to skip TrustedProxies check, it has a higher priority than TrustedProxies. Look at the example below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;import (&#xA;&#x9;&#34;fmt&#34;&#xA;&#xA;&#x9;&#34;github.com/gin-gonic/gin&#34;&#xA;)&#xA;&#xA;func main() {&#xA;&#xA;&#x9;router := gin.Default()&#xA;&#x9;// Use predefined header gin.PlatformXXX&#xA;&#x9;router.TrustedPlatform = gin.PlatformGoogleAppEngine&#xA;&#x9;// Or set your own trusted request header for another trusted proxy service&#xA;&#x9;// Don&#39;t set it to any suspect request header, it&#39;s unsafe&#xA;&#x9;router.TrustedPlatform = &#34;X-CDN-IP&#34;&#xA;&#xA;&#x9;router.GET(&#34;/&#34;, func(c *gin.Context) {&#xA;&#x9;&#x9;// If you set TrustedPlatform, ClientIP() will resolve the&#xA;&#x9;&#x9;// corresponding header and return IP directly&#xA;&#x9;&#x9;fmt.Printf(&#34;ClientIP: %s\n&#34;, c.ClientIP())&#xA;&#x9;})&#xA;&#x9;router.Run()&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Testing&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;net/http/httptest&lt;/code&gt; package is preferable way for HTTP testing.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;func setupRouter() *gin.Engine {&#xA;&#x9;r := gin.Default()&#xA;&#x9;r.GET(&#34;/ping&#34;, func(c *gin.Context) {&#xA;&#x9;&#x9;c.String(200, &#34;pong&#34;)&#xA;&#x9;})&#xA;&#x9;return r&#xA;}&#xA;&#xA;func main() {&#xA;&#x9;r := setupRouter()&#xA;&#x9;r.Run(&#34;:8080&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Test for code example above:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;net/http&#34;&#xA;&#x9;&#34;net/http/httptest&#34;&#xA;&#x9;&#34;testing&#34;&#xA;&#xA;&#x9;&#34;github.com/stretchr/testify/assert&#34;&#xA;)&#xA;&#xA;func TestPingRoute(t *testing.T) {&#xA;&#x9;router := setupRouter()&#xA;&#xA;&#x9;w := httptest.NewRecorder()&#xA;&#x9;req, _ := http.NewRequest(&#34;GET&#34;, &#34;/ping&#34;, nil)&#xA;&#x9;router.ServeHTTP(w, req)&#xA;&#xA;&#x9;assert.Equal(t, 200, w.Code)&#xA;&#x9;assert.Equal(t, &#34;pong&#34;, w.Body.String())&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Users&lt;/h2&gt; &#xA;&lt;p&gt;Awesome project lists using &lt;a href=&#34;https://github.com/gin-gonic/gin&#34;&gt;Gin&lt;/a&gt; web framework.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/appleboy/gorush&#34;&gt;gorush&lt;/a&gt;: A push notification server written in Go.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/fnproject/fn&#34;&gt;fnproject&lt;/a&gt;: The container native, cloud agnostic serverless platform.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/photoprism/photoprism&#34;&gt;photoprism&lt;/a&gt;: Personal photo management powered by Go and Google TensorFlow.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/devopsfaith/krakend&#34;&gt;krakend&lt;/a&gt;: Ultra performant API Gateway with middlewares.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/thoas/picfit&#34;&gt;picfit&lt;/a&gt;: An image resizing server written in Go.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/brigadecore/brigade&#34;&gt;brigade&lt;/a&gt;: Event-based Scripting for Kubernetes.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/distribworks/dkron&#34;&gt;dkron&lt;/a&gt;: Distributed, fault tolerant job scheduling system.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>