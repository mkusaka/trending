<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-03-01T01:54:53Z</updated>
  <subtitle>Monthly Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>golangci/golangci-lint</title>
    <updated>2025-03-01T01:54:53Z</updated>
    <id>tag:github.com,2025-03-01:/golangci/golangci-lint</id>
    <link href="https://github.com/golangci/golangci-lint" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Fast linters runner for Go&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img alt=&#34;golangci-lint logo&#34; src=&#34;https://raw.githubusercontent.com/golangci/golangci-lint/master/assets/go.png&#34; height=&#34;150&#34;&gt; &lt;/p&gt;&#xA;&lt;h3 align=&#34;center&#34;&gt;golangci-lint&lt;/h3&gt; &#xA;&lt;p align=&#34;center&#34;&gt;Fast linters runner for Go&lt;/p&gt; &#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;code&gt;golangci-lint&lt;/code&gt; is a fast Go linters runner.&lt;/p&gt; &#xA;&lt;p&gt;It runs linters in parallel, uses caching, supports YAML configuration, integrates with all major IDEs, and includes over a hundred linters.&lt;/p&gt; &#xA;&lt;h2&gt;Install &lt;code&gt;golangci-lint&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://golangci-lint.run/welcome/install/#local-installation&#34;&gt;On my machine&lt;/a&gt;;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://golangci-lint.run/welcome/install/#ci-installation&#34;&gt;On CI/CD systems&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Documentation is hosted at &lt;a href=&#34;https://golangci-lint.run&#34;&gt;https://golangci-lint.run&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Social Networks&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gophers.slack.com/archives/CS0TBRKPC&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Slack-4285F4?logo=slack&amp;amp;logoColor=white&#34; alt=&#34;Join Slack&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://fosstodon.org/@golangcilint&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Mastodon-6364FF?logo=mastodon&amp;amp;logoColor=white&#34; alt=&#34;Follow on Mastodon&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://bsky.app/profile/golangci-lint.run&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Bluesky-0a7aff?logo=bluesky&amp;amp;logoColor=white&#34; alt=&#34;Follow on Bluesky&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/golangci&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Twitter-1DA1F2?logo=x&amp;amp;logoColor=white&#34; alt=&#34;Follow on Twitter&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Supporting Us&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opencollective.com/golangci-lint&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/OpenCollective-Donate-blue?logo=opencollective&amp;amp;style=for-the-badge&#34; alt=&#34;Open Collective backers and sponsors&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/sponsors/golangci&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/GitHub-Donate-blue?logo=github&amp;amp;style=for-the-badge&#34; alt=&#34;GitHub Sponsors&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://golangci-lint.run/product/thanks/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Linter_Authors-Donate-blue?style=for-the-badge&#34; alt=&#34;Linter Authors&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;golangci-lint&lt;/code&gt; is a free and open-source project built by volunteers.&lt;/p&gt; &#xA;&lt;p&gt;If you value it, consider supporting us, we appreciate it! &lt;span&gt;❤️&lt;/span&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Badges&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/golangci/golangci-lint/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt; &lt;a href=&#34;https://raw.githubusercontent.com/golangci/golangci-lint/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/golangci/golangci-lint&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/golangci/golangci-lint/releases/latest&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/golangci/golangci-lint.svg?sanitize=true&#34; alt=&#34;Release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/golangci/golangci-lint&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/pulls/golangci/golangci-lint&#34; alt=&#34;Docker&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://somsubhra.github.io/github-release-stats/?username=golangci&amp;amp;repository=golangci-lint&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/downloads/golangci/golangci-lint/total.svg?logo=github&#34; alt=&#34;GitHub Releases Stats of golangci-lint&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contributors&lt;/h2&gt; &#xA;&lt;p&gt;This project exists thanks to all the people who contribute. &lt;a href=&#34;https://golangci-lint.run/contributing/quick-start/&#34;&gt;How to contribute&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;a href=&#34;https://github.com/golangci/golangci-lint/graphs/contributors&#34;&gt; &lt;img src=&#34;https://opencollective.com/golangci-lint/contributors.svg?width=890&amp;amp;button=false&amp;amp;skip=golangcidev,CLAassistant,renovate,fossabot,golangcibot,kortschak,golangci-releaser,dependabot%5Bbot%5D&#34;&gt; &lt;/a&gt; &#xA;&lt;h2&gt;Stargazers over time&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://starchart.cc/golangci/golangci-lint&#34;&gt;&lt;img src=&#34;https://starchart.cc/golangci/golangci-lint.svg?sanitize=true&#34; alt=&#34;Stargazers over time&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>pressly/goose</title>
    <updated>2025-03-01T01:54:53Z</updated>
    <id>tag:github.com,2025-03-01:/pressly/goose</id>
    <link href="https://github.com/pressly/goose" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A database migration tool. Supports SQL migrations and Go functions.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;goose&lt;/h1&gt; &#xA;&lt;img align=&#34;right&#34; width=&#34;125&#34; src=&#34;https://raw.githubusercontent.com/pressly/goose/main/assets/goose_logo.png&#34;&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/pressly/goose/actions/workflows/ci.yaml&#34;&gt;&lt;img src=&#34;https://github.com/pressly/goose/actions/workflows/ci.yaml/badge.svg?sanitize=true&#34; alt=&#34;Goose CI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pkg.go.dev/github.com/pressly/goose/v3&#34;&gt;&lt;img src=&#34;https://pkg.go.dev/badge/github.com/pressly/goose/v3.svg?sanitize=true&#34; alt=&#34;Go Reference&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/pressly/goose/v3&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/pressly/goose/v3&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Goose is a database migration tool. Both a CLI and a library.&lt;/p&gt; &#xA;&lt;p&gt;Manage your &lt;strong&gt;database schema&lt;/strong&gt; by creating incremental SQL changes or Go functions.&lt;/p&gt; &#xA;&lt;h4&gt;Features&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Works against multiple databases: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Postgres, MySQL, SQLite, YDB, ClickHouse, MSSQL, Vertica, and more.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Supports Go migrations written as plain functions.&lt;/li&gt; &#xA; &lt;li&gt;Supports &lt;a href=&#34;https://pkg.go.dev/embed/&#34;&gt;embedded&lt;/a&gt; migrations.&lt;/li&gt; &#xA; &lt;li&gt;Out-of-order migrations.&lt;/li&gt; &#xA; &lt;li&gt;Seeding data.&lt;/li&gt; &#xA; &lt;li&gt;Environment variable substitution in SQL migrations.&lt;/li&gt; &#xA; &lt;li&gt;... and more.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Install&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;go install github.com/pressly/goose/v3/cmd/goose@latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will install the &lt;code&gt;goose&lt;/code&gt; binary to your &lt;code&gt;$GOPATH/bin&lt;/code&gt; directory.&lt;/p&gt; &#xA;&lt;p&gt;Binary too big? Build a lite version by excluding the drivers you don&#39;t need:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;go build -tags=&#39;no_postgres no_mysql no_sqlite3 no_ydb&#39; -o goose ./cmd/goose&#xA;&#xA;# Available build tags:&#xA;#   no_clickhouse  no_libsql   no_mssql    no_mysql&#xA;#   no_postgres    no_sqlite3  no_vertica  no_ydb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For macOS users &lt;code&gt;goose&lt;/code&gt; is available as a &lt;a href=&#34;https://formulae.brew.sh/formula/goose#default&#34;&gt;Homebrew Formulae&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;brew install goose&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://pressly.github.io/goose/installation/&#34;&gt;installation documentation&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;h1&gt;Usage&lt;/h1&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Click to show &lt;code&gt;goose help&lt;/code&gt; output&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code&gt;Usage: goose [OPTIONS] DRIVER DBSTRING COMMAND&#xA;&#xA;or&#xA;&#xA;Set environment key&#xA;GOOSE_DRIVER=DRIVER&#xA;GOOSE_DBSTRING=DBSTRING&#xA;GOOSE_MIGRATION_DIR=MIGRATION_DIR&#xA;&#xA;Usage: goose [OPTIONS] COMMAND&#xA;&#xA;Drivers:&#xA;    postgres&#xA;    mysql&#xA;    sqlite3&#xA;    mssql&#xA;    redshift&#xA;    tidb&#xA;    clickhouse&#xA;    vertica&#xA;    ydb&#xA;    starrocks&#xA;&#xA;Examples:&#xA;    goose sqlite3 ./foo.db status&#xA;    goose sqlite3 ./foo.db create init sql&#xA;    goose sqlite3 ./foo.db create add_some_column sql&#xA;    goose sqlite3 ./foo.db create fetch_user_data go&#xA;    goose sqlite3 ./foo.db up&#xA;&#xA;    goose postgres &#34;user=postgres dbname=postgres sslmode=disable&#34; status&#xA;    goose mysql &#34;user:password@/dbname?parseTime=true&#34; status&#xA;    goose redshift &#34;postgres://user:password@qwerty.us-east-1.redshift.amazonaws.com:5439/db&#34; status&#xA;    goose tidb &#34;user:password@/dbname?parseTime=true&#34; status&#xA;    goose mssql &#34;sqlserver://user:password@hostname:1433?database=master&#34; status&#xA;    goose clickhouse &#34;tcp://127.0.0.1:9000&#34; status&#xA;    goose vertica &#34;vertica://user:password@localhost:5433/dbname?connection_load_balance=1&#34; status&#xA;    goose ydb &#34;grpcs://localhost:2135/local?go_query_mode=scripting&amp;amp;go_fake_tx=scripting&amp;amp;go_query_bind=declare,numeric&#34; status&#xA;    goose starrocks &#34;user:password@/dbname?parseTime=true&amp;amp;interpolateParams=true&#34; status&#xA;&#xA;    GOOSE_DRIVER=sqlite3 GOOSE_DBSTRING=./foo.db goose status&#xA;    GOOSE_DRIVER=sqlite3 GOOSE_DBSTRING=./foo.db goose create init sql&#xA;    GOOSE_DRIVER=postgres GOOSE_DBSTRING=&#34;user=postgres dbname=postgres sslmode=disable&#34; goose status&#xA;    GOOSE_DRIVER=mysql GOOSE_DBSTRING=&#34;user:password@/dbname&#34; goose status&#xA;    GOOSE_DRIVER=redshift GOOSE_DBSTRING=&#34;postgres://user:password@qwerty.us-east-1.redshift.amazonaws.com:5439/db&#34; goose status&#xA;    GOOSE_DRIVER=clickhouse GOOSE_DBSTRING=&#34;clickhouse://user:password@qwerty.clickhouse.cloud:9440/dbname?secure=true&amp;amp;skip_verify=false&#34; goose status&#xA;&#xA;Options:&#xA;&#xA;  -allow-missing&#xA;        applies missing (out-of-order) migrations&#xA;  -certfile string&#xA;        file path to root CA&#39;s certificates in pem format (only support on mysql)&#xA;  -dir string&#xA;        directory with migration files (default &#34;.&#34;, can be set via the GOOSE_MIGRATION_DIR env variable).&#xA;  -h    print help&#xA;  -no-color&#xA;        disable color output (NO_COLOR env variable supported)&#xA;  -no-versioning&#xA;        apply migration commands with no versioning, in file order, from directory pointed to&#xA;  -s    use sequential numbering for new migrations&#xA;  -ssl-cert string&#xA;        file path to SSL certificates in pem format (only support on mysql)&#xA;  -ssl-key string&#xA;        file path to SSL key in pem format (only support on mysql)&#xA;  -table string&#xA;        migrations table name (default &#34;goose_db_version&#34;)&#xA;  -timeout duration&#xA;        maximum allowed duration for queries to run; e.g., 1h13m&#xA;  -v    enable verbose mode&#xA;  -version&#xA;        print version&#xA;&#xA;Commands:&#xA;    up                   Migrate the DB to the most recent version available&#xA;    up-by-one            Migrate the DB up by 1&#xA;    up-to VERSION        Migrate the DB to a specific VERSION&#xA;    down                 Roll back the version by 1&#xA;    down-to VERSION      Roll back to a specific VERSION&#xA;    redo                 Re-run the latest migration&#xA;    reset                Roll back all migrations&#xA;    status               Dump the migration status for the current DB&#xA;    version              Print the current version of the database&#xA;    create NAME [sql|go] Creates new migration file with the current timestamp&#xA;    fix                  Apply sequential ordering to migrations&#xA;    validate             Check migration files without running them&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;Commonly used commands:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pressly/goose/main/#create&#34;&gt;create&lt;/a&gt;&lt;span&gt;&amp;nbsp;•&amp;nbsp;&lt;/span&gt; &lt;a href=&#34;https://raw.githubusercontent.com/pressly/goose/main/#up&#34;&gt;up&lt;/a&gt;&lt;span&gt;&amp;nbsp;•&amp;nbsp;&lt;/span&gt; &lt;a href=&#34;https://raw.githubusercontent.com/pressly/goose/main/#up-to&#34;&gt;up-to&lt;/a&gt;&lt;span&gt;&amp;nbsp;•&amp;nbsp;&lt;/span&gt; &lt;a href=&#34;https://raw.githubusercontent.com/pressly/goose/main/#down&#34;&gt;down&lt;/a&gt;&lt;span&gt;&amp;nbsp;•&amp;nbsp;&lt;/span&gt; &lt;a href=&#34;https://raw.githubusercontent.com/pressly/goose/main/#down-to&#34;&gt;down-to&lt;/a&gt;&lt;span&gt;&amp;nbsp;•&amp;nbsp;&lt;/span&gt; &lt;a href=&#34;https://raw.githubusercontent.com/pressly/goose/main/#status&#34;&gt;status&lt;/a&gt;&lt;span&gt;&amp;nbsp;•&amp;nbsp;&lt;/span&gt; &lt;a href=&#34;https://raw.githubusercontent.com/pressly/goose/main/#version&#34;&gt;version&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;create&lt;/h2&gt; &#xA;&lt;p&gt;Create a new SQL migration.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ goose create add_some_column sql&#xA;$ Created new file: 20170506082420_add_some_column.sql&#xA;&#xA;$ goose -s create add_some_column sql&#xA;$ Created new file: 00001_add_some_column.sql&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Edit the newly created file to define the behavior of your migration.&lt;/p&gt; &#xA;&lt;p&gt;You can also create a Go migration, if you then invoke it with &lt;a href=&#34;https://raw.githubusercontent.com/pressly/goose/main/#go-migrations&#34;&gt;your own goose binary&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ goose create fetch_user_data go&#xA;$ Created new file: 20170506082421_fetch_user_data.go&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;up&lt;/h2&gt; &#xA;&lt;p&gt;Apply all available migrations.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ goose up&#xA;$ OK    001_basics.sql&#xA;$ OK    002_next.sql&#xA;$ OK    003_and_again.go&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;up-to&lt;/h2&gt; &#xA;&lt;p&gt;Migrate up to a specific version.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ goose up-to 20170506082420&#xA;$ OK    20170506082420_create_table.sql&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;up-by-one&lt;/h2&gt; &#xA;&lt;p&gt;Migrate up a single migration from the current version&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ goose up-by-one&#xA;$ OK    20170614145246_change_type.sql&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;down&lt;/h2&gt; &#xA;&lt;p&gt;Roll back a single migration from the current version.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ goose down&#xA;$ OK    003_and_again.go&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;down-to&lt;/h2&gt; &#xA;&lt;p&gt;Roll back migrations to a specific version.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ goose down-to 20170506082527&#xA;$ OK    20170506082527_alter_column.sql&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or, roll back all migrations (careful!):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ goose down-to 0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;status&lt;/h2&gt; &#xA;&lt;p&gt;Print the status of all migrations:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ goose status&#xA;$   Applied At                  Migration&#xA;$   =======================================&#xA;$   Sun Jan  6 11:25:03 2013 -- 001_basics.sql&#xA;$   Sun Jan  6 11:25:03 2013 -- 002_next.sql&#xA;$   Pending                  -- 003_and_again.go&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: for MySQL &lt;a href=&#34;https://github.com/go-sql-driver/mysql#parsetime&#34;&gt;parseTime flag&lt;/a&gt; must be enabled.&lt;/p&gt; &#xA;&lt;p&gt;Note: for MySQL &lt;a href=&#34;https://github.com/go-sql-driver/mysql?tab=readme-ov-file#multistatements&#34;&gt;&lt;code&gt;multiStatements&lt;/code&gt;&lt;/a&gt; must be enabled. This is required when writing multiple queries separated by &#39;;&#39; characters in a single sql file.&lt;/p&gt; &#xA;&lt;h2&gt;version&lt;/h2&gt; &#xA;&lt;p&gt;Print the current version of the database:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ goose version&#xA;$ goose: version 002&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Environment Variables&lt;/h1&gt; &#xA;&lt;p&gt;If you prefer to use environment variables, instead of passing the driver and database string as arguments, you can set the following environment variables:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;1. Via environment variables:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;export GOOSE_DRIVER=DRIVER&#xA;export GOOSE_DBSTRING=DBSTRING&#xA;export GOOSE_MIGRATION_DIR=MIGRATION_DIR&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;2. Via &lt;code&gt;.env&lt;/code&gt; files with corresponding variables. &lt;code&gt;.env&lt;/code&gt; file example&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-env&#34;&gt;GOOSE_DRIVER=postgres&#xA;GOOSE_DBSTRING=postgres://admin:admin@localhost:5432/admin_db&#xA;GOOSE_MIGRATION_DIR=./migrations&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Loading from &lt;code&gt;.env&lt;/code&gt; files is enabled by default. To disable this feature, set the &lt;code&gt;-env=none&lt;/code&gt; flag. If you want to load from a specific file, set the &lt;code&gt;-env&lt;/code&gt; flag to the file path.&lt;/p&gt; &#xA;&lt;p&gt;For more details about environment variables, see the &lt;a href=&#34;https://pressly.github.io/goose/documentation/environment-variables/&#34;&gt;official documentation on environment variables&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Migrations&lt;/h1&gt; &#xA;&lt;p&gt;goose supports migrations written in SQL or in Go.&lt;/p&gt; &#xA;&lt;h2&gt;SQL Migrations&lt;/h2&gt; &#xA;&lt;p&gt;A sample SQL migration looks like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;-- +goose Up&#xA;CREATE TABLE post (&#xA;    id int NOT NULL,&#xA;    title text,&#xA;    body text,&#xA;    PRIMARY KEY(id)&#xA;);&#xA;&#xA;-- +goose Down&#xA;DROP TABLE post;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Each migration file must have exactly one &lt;code&gt;-- +goose Up&lt;/code&gt; annotation. The &lt;code&gt;-- +goose Down&lt;/code&gt; annotation is optional. If the file has both annotations, then the &lt;code&gt;-- +goose Up&lt;/code&gt; annotation &lt;strong&gt;must&lt;/strong&gt; come first.&lt;/p&gt; &#xA;&lt;p&gt;Notice the annotations in the comments. Any statements following &lt;code&gt;-- +goose Up&lt;/code&gt; will be executed as part of a forward migration, and any statements following &lt;code&gt;-- +goose Down&lt;/code&gt; will be executed as part of a rollback.&lt;/p&gt; &#xA;&lt;p&gt;By default, all migrations are run within a transaction. Some statements like &lt;code&gt;CREATE DATABASE&lt;/code&gt;, however, cannot be run within a transaction. You may optionally add &lt;code&gt;-- +goose NO TRANSACTION&lt;/code&gt; to the top of your migration file in order to skip transactions within that specific migration file. Both Up and Down migrations within this file will be run without transactions.&lt;/p&gt; &#xA;&lt;p&gt;By default, SQL statements are delimited by semicolons - in fact, query statements must end with a semicolon to be properly recognized by goose.&lt;/p&gt; &#xA;&lt;p&gt;More complex statements (PL/pgSQL) that have semicolons within them must be annotated with &lt;code&gt;-- +goose StatementBegin&lt;/code&gt; and &lt;code&gt;-- +goose StatementEnd&lt;/code&gt; to be properly recognized. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;-- +goose Up&#xA;-- +goose StatementBegin&#xA;CREATE OR REPLACE FUNCTION histories_partition_creation( DATE, DATE )&#xA;returns void AS $$&#xA;DECLARE&#xA;  create_query text;&#xA;BEGIN&#xA;  FOR create_query IN SELECT&#xA;      &#39;CREATE TABLE IF NOT EXISTS histories_&#39;&#xA;      || TO_CHAR( d, &#39;YYYY_MM&#39; )&#xA;      || &#39; ( CHECK( created_at &amp;gt;= timestamp &#39;&#39;&#39;&#xA;      || TO_CHAR( d, &#39;YYYY-MM-DD 00:00:00&#39; )&#xA;      || &#39;&#39;&#39; AND created_at &amp;lt; timestamp &#39;&#39;&#39;&#xA;      || TO_CHAR( d + INTERVAL &#39;1 month&#39;, &#39;YYYY-MM-DD 00:00:00&#39; )&#xA;      || &#39;&#39;&#39; ) ) inherits ( histories );&#39;&#xA;    FROM generate_series( $1, $2, &#39;1 month&#39; ) AS d&#xA;  LOOP&#xA;    EXECUTE create_query;&#xA;  END LOOP;  -- LOOP END&#xA;END;         -- FUNCTION END&#xA;$$&#xA;language plpgsql;&#xA;-- +goose StatementEnd&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Goose supports environment variable substitution in SQL migrations through annotations. To enable this feature, use the &lt;code&gt;-- +goose ENVSUB ON&lt;/code&gt; annotation before the queries where you want substitution applied. It stays active until the &lt;code&gt;-- +goose ENVSUB OFF&lt;/code&gt; annotation is encountered. You can use these annotations multiple times within a file.&lt;/p&gt; &#xA;&lt;p&gt;This feature is disabled by default for backward compatibility with existing scripts.&lt;/p&gt; &#xA;&lt;p&gt;For &lt;code&gt;PL/pgSQL&lt;/code&gt; functions or other statements where substitution is not desired, wrap the annotations explicitly around the relevant parts. For example, to exclude escaping the &lt;code&gt;**&lt;/code&gt; characters:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;-- +goose StatementBegin&#xA;CREATE OR REPLACE FUNCTION test_func()&#xA;RETURNS void AS $$&#xA;-- +goose ENVSUB ON&#xA;BEGIN&#xA;&#x9;RAISE NOTICE &#39;${SOME_ENV_VAR}&#39;;&#xA;END;&#xA;-- +goose ENVSUB OFF&#xA;$$ LANGUAGE plpgsql;&#xA;-- +goose StatementEnd&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Supported expansions (click here to expand):&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;code&gt;${VAR}&lt;/code&gt; or $VAR - expands to the value of the environment variable &lt;code&gt;VAR&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;${VAR:-default}&lt;/code&gt; - expands to the value of the environment variable &lt;code&gt;VAR&lt;/code&gt;, or &lt;code&gt;default&lt;/code&gt; if &lt;code&gt;VAR&lt;/code&gt; is unset or null&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;${VAR-default}&lt;/code&gt; - expands to the value of the environment variable &lt;code&gt;VAR&lt;/code&gt;, or &lt;code&gt;default&lt;/code&gt; if &lt;code&gt;VAR&lt;/code&gt; is unset&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;${VAR?err_msg}&lt;/code&gt; - expands to the value of the environment variable &lt;code&gt;VAR&lt;/code&gt;, or prints &lt;code&gt;err_msg&lt;/code&gt; and error if &lt;code&gt;VAR&lt;/code&gt; unset&lt;/li&gt; &#xA;  &lt;li&gt;&lt;del&gt;&lt;code&gt;${VAR:?err_msg}&lt;/code&gt; - expands to the value of the environment variable &lt;code&gt;VAR&lt;/code&gt;, or prints &lt;code&gt;err_msg&lt;/code&gt; and error if &lt;code&gt;VAR&lt;/code&gt; unset or null.&lt;/del&gt; &lt;strong&gt;THIS IS NOT SUPPORTED&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;p&gt;See &lt;a href=&#34;https://github.com/mfridman/interpolate?tab=readme-ov-file#supported-expansions&#34;&gt;mfridman/interpolate&lt;/a&gt; for more details on supported expansions.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Embedded sql migrations&lt;/h2&gt; &#xA;&lt;p&gt;Go 1.16 introduced new feature: &lt;a href=&#34;https://pkg.go.dev/embed/&#34;&gt;compile-time embedding&lt;/a&gt; files into binary and corresponding &lt;a href=&#34;https://pkg.go.dev/io/fs/&#34;&gt;filesystem abstraction&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This feature can be used only for applying existing migrations. Modifying operations such as &lt;code&gt;fix&lt;/code&gt; and &lt;code&gt;create&lt;/code&gt; will continue to operate on OS filesystem even if using embedded files. This is expected behaviour because &lt;code&gt;io/fs&lt;/code&gt; interfaces allows read-only access.&lt;/p&gt; &#xA;&lt;p&gt;Make sure to configure the correct SQL dialect, see &lt;a href=&#34;https://raw.githubusercontent.com/pressly/goose/main/dialect.go&#34;&gt;dialect.go&lt;/a&gt; for supported SQL dialects.&lt;/p&gt; &#xA;&lt;p&gt;Example usage, assuming that SQL migrations are placed in the &lt;code&gt;migrations&lt;/code&gt; directory:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;    &#34;database/sql&#34;&#xA;    &#34;embed&#34;&#xA;&#xA;    &#34;github.com/pressly/goose/v3&#34;&#xA;)&#xA;&#xA;//go:embed migrations/*.sql&#xA;var embedMigrations embed.FS&#xA;&#xA;func main() {&#xA;    var db *sql.DB&#xA;    // setup database&#xA;&#xA;    goose.SetBaseFS(embedMigrations)&#xA;&#xA;    if err := goose.SetDialect(&#34;postgres&#34;); err != nil {&#xA;        panic(err)&#xA;    }&#xA;&#xA;    if err := goose.Up(db, &#34;migrations&#34;); err != nil {&#xA;        panic(err)&#xA;    }&#xA;&#xA;    // run app&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that we pass &lt;code&gt;&#34;migrations&#34;&lt;/code&gt; as directory argument in &lt;code&gt;Up&lt;/code&gt; because embedding saves directory structure.&lt;/p&gt; &#xA;&lt;h2&gt;Go Migrations&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Create your own goose binary, see &lt;a href=&#34;https://raw.githubusercontent.com/pressly/goose/main/examples/go-migrations&#34;&gt;example&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Import &lt;code&gt;github.com/pressly/goose&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Register your migration functions&lt;/li&gt; &#xA; &lt;li&gt;Run goose command, ie. &lt;code&gt;goose.Up(db *sql.DB, dir string)&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;A &lt;a href=&#34;https://raw.githubusercontent.com/pressly/goose/main/examples/go-migrations/00002_rename_root.go&#34;&gt;sample Go migration 00002_users_add_email.go file&lt;/a&gt; looks like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package migrations&#xA;&#xA;import (&#xA;&#x9;&#34;database/sql&#34;&#xA;&#xA;&#x9;&#34;github.com/pressly/goose/v3&#34;&#xA;)&#xA;&#xA;func init() {&#xA;&#x9;goose.AddMigration(Up, Down)&#xA;}&#xA;&#xA;func Up(tx *sql.Tx) error {&#xA;&#x9;_, err := tx.Exec(&#34;UPDATE users SET username=&#39;admin&#39; WHERE username=&#39;root&#39;;&#34;)&#xA;&#x9;if err != nil {&#xA;&#x9;&#x9;return err&#xA;&#x9;}&#xA;&#x9;return nil&#xA;}&#xA;&#xA;func Down(tx *sql.Tx) error {&#xA;&#x9;_, err := tx.Exec(&#34;UPDATE users SET username=&#39;root&#39; WHERE username=&#39;admin&#39;;&#34;)&#xA;&#x9;if err != nil {&#xA;&#x9;&#x9;return err&#xA;&#x9;}&#xA;&#x9;return nil&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that Go migration files must begin with a numeric value, followed by an underscore, and must not end with &lt;code&gt;*_test.go&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Hybrid Versioning&lt;/h1&gt; &#xA;&lt;p&gt;Please, read the &lt;a href=&#34;https://github.com/pressly/goose/issues/63#issuecomment-428681694&#34;&gt;versioning problem&lt;/a&gt; first.&lt;/p&gt; &#xA;&lt;p&gt;By default, if you attempt to apply missing (out-of-order) migrations &lt;code&gt;goose&lt;/code&gt; will raise an error. However, If you want to apply these missing migrations pass goose the &lt;code&gt;-allow-missing&lt;/code&gt; flag, or if using as a library supply the functional option &lt;code&gt;goose.WithAllowMissing()&lt;/code&gt; to Up, UpTo or UpByOne.&lt;/p&gt; &#xA;&lt;p&gt;However, we strongly recommend adopting a hybrid versioning approach, using both timestamps and sequential numbers. Migrations created during the development process are timestamped and sequential versions are ran on production. We believe this method will prevent the problem of conflicting versions when writing software in a team environment.&lt;/p&gt; &#xA;&lt;p&gt;To help you adopt this approach, &lt;code&gt;create&lt;/code&gt; will use the current timestamp as the migration version. When you&#39;re ready to deploy your migrations in a production environment, we also provide a helpful &lt;code&gt;fix&lt;/code&gt; command to convert your migrations into sequential order, while preserving the timestamp ordering. We recommend running &lt;code&gt;fix&lt;/code&gt; in the CI pipeline, and only when the migrations are ready for production.&lt;/p&gt; &#xA;&lt;h2&gt;Credit&lt;/h2&gt; &#xA;&lt;p&gt;The gopher mascot was designed by &lt;a href=&#34;https://reneefrench.blogspot.com/&#34;&gt;Renée French&lt;/a&gt; / &lt;a href=&#34;https://creativecommons.org/licenses/by/3.0/&#34;&gt;CC 3.0.&lt;/a&gt; For more info check out the &lt;a href=&#34;https://go.dev/blog/gopher&#34;&gt;Go Blog&lt;/a&gt;. Adapted by Ellen.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Licensed under &lt;a href=&#34;https://raw.githubusercontent.com/pressly/goose/main/LICENSE&#34;&gt;MIT License&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>hashicorp/nomad</title>
    <updated>2025-03-01T01:54:53Z</updated>
    <id>tag:github.com,2025-03-01:/hashicorp/nomad</id>
    <link href="https://github.com/hashicorp/nomad" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Nomad is an easy-to-use, flexible, and performant workload orchestrator that can deploy a mix of microservice, batch, containerized, and non-containerized applications. Nomad is easy to operate and scale and has native Consul and Vault integrations.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Nomad &lt;a href=&#34;https://raw.githubusercontent.com/hashicorp/nomad/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-BUSL--1.1-yellow.svg?sanitize=true&#34; alt=&#34;License: BUSL-1.1&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discuss.hashicorp.com/c/nomad&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/discuss-nomad-00BC7F?style=flat&#34; alt=&#34;Discuss&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34; style=&#34;text-align:center;&#34;&gt; &lt;a href=&#34;https://developer.hashicorp.com/nomad&#34;&gt; &lt;img alt=&#34;HashiCorp Nomad logo&#34; src=&#34;https://raw.githubusercontent.com/hashicorp/nomad/main/website/public/img/logo-hashicorp.svg?sanitize=true&#34; width=&#34;500&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;Nomad is a simple and flexible workload orchestrator to deploy and manage containers (&lt;a href=&#34;https://developer.hashicorp.com/nomad/docs/drivers/docker&#34;&gt;docker&lt;/a&gt;, &lt;a href=&#34;https://developer.hashicorp.com/nomad/plugins/drivers/podman&#34;&gt;podman&lt;/a&gt;), non-containerized applications (&lt;a href=&#34;https://developer.hashicorp.com/nomad/docs/drivers/exec&#34;&gt;executable&lt;/a&gt;, &lt;a href=&#34;https://developer.hashicorp.com/nomad/docs/drivers/java&#34;&gt;Java&lt;/a&gt;), and virtual machines (&lt;a href=&#34;https://developer.hashicorp.com/nomad/docs/drivers/qemu&#34;&gt;qemu&lt;/a&gt;) across on-prem and clouds at scale.&lt;/p&gt; &#xA;&lt;p&gt;Nomad is supported on Linux, Windows, and macOS. A commercial version of Nomad, &lt;a href=&#34;https://developer.hashicorp.com/nomad/docs/enterprise&#34;&gt;Nomad Enterprise&lt;/a&gt;, is also available.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Website: &lt;a href=&#34;https://developer.hashicorp.com/nomad&#34;&gt;https://developer.hashicorp.com/nomad&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Tutorials: &lt;a href=&#34;https://developer.hashicorp.com/nomad/tutorials&#34;&gt;HashiCorp Developer&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Forum: &lt;a href=&#34;https://discuss.hashicorp.com/c/nomad&#34;&gt;Discuss&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Nomad provides several key features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Deploy Containers and Legacy Applications&lt;/strong&gt;: Nomad’s flexibility as an orchestrator enables an organization to run containers, legacy, and batch applications together on the same infrastructure. Nomad brings core orchestration benefits to legacy applications without needing to containerize via pluggable task drivers.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Simple &amp;amp; Reliable&lt;/strong&gt;: Nomad runs as a single binary and is entirely self contained - combining resource management and scheduling into a single system. Nomad does not require any external services for storage or coordination. Nomad automatically handles application, node, and driver failures. Nomad is distributed and resilient, using leader election and state replication to provide high availability in the event of failures.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Device Plugins &amp;amp; GPU Support&lt;/strong&gt;: Nomad offers built-in support for GPU workloads such as machine learning (ML) and artificial intelligence (AI). Nomad uses device plugins to automatically detect and utilize resources from hardware devices such as GPU, FPGAs, and TPUs.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Federation for Multi-Region, Multi-Cloud&lt;/strong&gt;: Nomad was designed to support infrastructure at a global scale. Nomad supports federation out-of-the-box and can deploy applications across multiple regions and clouds.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Proven Scalability&lt;/strong&gt;: Nomad is optimistically concurrent, which increases throughput and reduces latency for workloads. Nomad has been proven to scale to clusters of 10K+ nodes in real-world production environments.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;HashiCorp Ecosystem&lt;/strong&gt;: Nomad integrates seamlessly with Terraform, Consul, Vault for provisioning, service discovery, and secrets management.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Quick Start&lt;/h2&gt; &#xA;&lt;h4&gt;Testing&lt;/h4&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://developer.hashicorp.com/nomad/tutorials/get-started&#34;&gt;Developer: Getting Started&lt;/a&gt; for instructions on setting up a local Nomad cluster for non-production use.&lt;/p&gt; &#xA;&lt;p&gt;Optionally, find Terraform manifests for bringing up a development Nomad cluster on a public cloud in the &lt;a href=&#34;https://raw.githubusercontent.com/hashicorp/nomad/main/terraform/&#34;&gt;&lt;code&gt;terraform&lt;/code&gt;&lt;/a&gt; directory.&lt;/p&gt; &#xA;&lt;h4&gt;Production&lt;/h4&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://developer.hashicorp.com/nomad/tutorials/enterprise/production-reference-architecture-vm-with-consul&#34;&gt;Developer: Nomad Reference Architecture&lt;/a&gt; for recommended practices and a reference architecture for production deployments.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Full, comprehensive documentation is available on the Nomad website: &lt;a href=&#34;https://developer.hashicorp.com/nomad/docs&#34;&gt;https://developer.hashicorp.com/nomad/docs&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Guides are available on &lt;a href=&#34;https://developer.hashicorp.com/nomad/tutorials&#34;&gt;HashiCorp Developer&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Roadmap&lt;/h2&gt; &#xA;&lt;p&gt;A timeline of major features expected for the next release or two can be found in the &lt;a href=&#34;https://github.com/orgs/hashicorp/projects/202/views/1&#34;&gt;Public Roadmap&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This roadmap is a best guess at any given point, and both release dates and projects in each release are subject to change. Do not take any of these items as commitments, especially ones later than one major release away.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/hashicorp/nomad/main/contributing/&#34;&gt;&lt;code&gt;contributing&lt;/code&gt;&lt;/a&gt; directory for more developer documentation.&lt;/p&gt;</summary>
  </entry>
</feed>