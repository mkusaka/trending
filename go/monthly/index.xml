<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-04-01T01:56:21Z</updated>
  <subtitle>Monthly Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>cgzirim/seek-tune</title>
    <updated>2025-04-01T01:56:21Z</updated>
    <id>tag:github.com,2025-04-01:/cgzirim/seek-tune</id>
    <link href="https://github.com/cgzirim/seek-tune" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An implementation of Shazam&#39;s song recognition algorithm.&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt;SeekTune &lt;span&gt;üéµ&lt;/span&gt;&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://drive.google.com/file/d/1I2esH2U4DtXHsNgYbUi4OL-ukV5i_1PI/view&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://github.com/user-attachments/assets/e4d01e9c-05cf-4f35-acbc-1e3cd79d1e00&#34; alt=&#34;screenshot&#34; width=&#34;500&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;a href=&#34;https://drive.google.com/file/d/1I2esH2U4DtXHsNgYbUi4OL-ukV5i_1PI/view&#34; target=&#34;_blank&#34;&gt;Demo in Video&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Description üéº&lt;/h2&gt; &#xA;&lt;p&gt;SeekTune is an implementation of Shazam&#39;s song recognition algorithm based on insights from these &lt;a href=&#34;https://raw.githubusercontent.com/cgzirim/seek-tune/main/#resources--card_file_box&#34;&gt;resources&lt;/a&gt;. It integrates Spotify and YouTube APIs to find and download songs.&lt;/p&gt; &#xA;&lt;h2&gt;Installation &lt;span&gt;üñ•&lt;/span&gt;&lt;/h2&gt; &#xA;&lt;h3&gt;Prerequisites&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Golang: &lt;a href=&#34;https://golang.org/dl/&#34;&gt;Install Golang&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;FFmpeg: &lt;a href=&#34;https://ffmpeg.org/download.html&#34;&gt;Install FFmpeg&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;NPM: To run the client (frontend).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Steps&lt;/h3&gt; &#xA;&lt;p&gt;Clone the repository:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/cgzirim/seek-tune.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Install dependencies for the backend&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd seek-tune&#xA;go get ./...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Install dependencies for the client&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd seek-tune/client&#xA;npm install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage &lt;span&gt;üö¥&lt;/span&gt;&lt;/h2&gt; &#xA;&lt;h4&gt;‚ñ∏ Start the Client App üèÉ‚Äç‚ôÄÔ∏è‚Äç‚û°Ô∏è&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Assuming you&#39;re in the client directory:&#xA;&#xA;npm start&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;‚ñ∏ Start the Backend App üèÉ‚Äç‚ôÄÔ∏è&lt;/h4&gt; &#xA;&lt;p&gt;In a separate terminal window:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd seek-tune&#xA;go run *.go serve [-proto &amp;lt;http|https&amp;gt; (default: http)] [-port &amp;lt;port number&amp;gt; (default: 5000)]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;‚ñ∏ Download a Song üì•&lt;/h4&gt; &#xA;&lt;p&gt;Note: A link from Spotify&#39;s mobile app won&#39;t work. You can copy the link from either the desktop or web app.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;go run *.go download &amp;lt;https://open.spotify.com/.../...&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;‚ñ∏ Save local songs to DB (supports all audio formats) üóÉÔ∏è&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;go run *.go save [-f|--force] &amp;lt;path_to_song_file_or_dir_of_songs&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;-f&lt;/code&gt; or &lt;code&gt;--force&lt;/code&gt; flag allows saving the song even if a YouTube ID is not found. Note that the frontend will not display matches without a YouTube ID.&lt;/p&gt; &#xA;&lt;h4&gt;‚ñ∏ Find matches for a song/recording üîé&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;go run *.go find &amp;lt;path-to-wav-file&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;‚ñ∏ Delete fingerprints and songs üóëÔ∏è&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;go run *.go erase&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Example &lt;span&gt;üìΩ&lt;/span&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Download a song&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ go run *.go download https://open.spotify.com/track/4pqwGuGu34g8KtfN8LDGZm?si=b3180b3d61084018&#xA;Getting track info...&#xA;Now, downloading track...&#xA;Fingerprints saved in MongoDB successfully&#xA;&#39;Voil√†&#39; by &#39;Andr√© Rieu&#39; was downloaded&#xA;Total tracks downloaded: 1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Find matches of a song&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ go run *.go find songs/Voil√†\ -\ Andr√©\ Rieu.wav&#xA;Top 20 matches:&#xA;        - Voil√† by Andr√© Rieu, score: 5390686.00&#xA;        - I Am a Child of God by One Voice Children&#39;s Choir, score: 2539.00&#xA;        - I Have A Dream by ABBA, score: 2428.00&#xA;        - SOS by ABBA, score: 2327.00&#xA;        - Sweet Dreams (Are Made of This) - Remastered by Eurythmics, score: 2213.00&#xA;        - The Winner Takes It All by ABBA, score: 2094.00&#xA;        - Sleigh Ride by One Voice Children&#39;s Choir, score: 2091.00&#xA;        - Believe by Cher, score: 2089.00&#xA;        - Knowing Me, Knowing You by ABBA, score: 1958.00&#xA;        - Gimme! Gimme! Gimme! (A Man After Midnight) by ABBA, score: 1941.00&#xA;        - Take A Chance On Me by ABBA, score: 1932.00&#xA;        - Don&#39;t Stop Me Now - Remastered 2011 by Queen, score: 1892.00&#xA;        - I Do, I Do, I Do, I Do, I Do by ABBA, score: 1853.00&#xA;        - Everywhere - 2017 Remaster by Fleetwood Mac, score: 1779.00&#xA;        - You Will Be Found by One Voice Children&#39;s Choir, score: 1664.00&#xA;        - J&#39;Imagine by One Voice Children&#39;s Choir, score: 1658.00&#xA;        - When You Believe by One Voice Children&#39;s Choir, score: 1629.00&#xA;        - When Love Was Born by One Voice Children&#39;s Choir, score: 1484.00&#xA;        - Don&#39;t Stop Believin&#39; (2022 Remaster) by Journey, score: 1465.00&#xA;        - Lay All Your Love On Me by ABBA, score: 1436.00&#xA;&#xA;Search took: 856.386557ms&#xA;&#xA;Final prediction: Voil√† by Andr√© Rieu , score: 5390686.00&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Database Options üëØ‚Äç‚ôÄÔ∏è&lt;/h2&gt; &#xA;&lt;p&gt;This application uses SQLite as the default database, but you can switch to MongoDB if preferred.&lt;/p&gt; &#xA;&lt;h4&gt;Using MongoDB&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://www.mongodb.com/docs/manual/installation/&#34;&gt;Install MongoDB&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Configure MongoDB Connection:&lt;br&gt; To connect to your MongoDB instance, set the following environment variables:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;DB_TYPE&lt;/code&gt;: Set this to &#34;mongo&#34; to indicate using MongoDB.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;DB_USER&lt;/code&gt;: The username for your MongoDB database.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;DB_PASS&lt;/code&gt;: The password for your MongoDB database.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;DB_NAME&lt;/code&gt;: The name of the MongoDB database you want to use.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;DB_HOST&lt;/code&gt;: The hostname or IP address of your MongoDB server.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;DB_PORT&lt;/code&gt;: The port number on which your MongoDB server is listening.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The database connection URI is constructed using the environment variables.&lt;br&gt; If the &lt;code&gt;DB_USER&lt;/code&gt; or &lt;code&gt;DB_PASS&lt;/code&gt; environment variables are not set, it defaults to connecting to &lt;code&gt;mongodb://localhost:27017&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Resources &lt;span&gt;üóÉ&lt;/span&gt;&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://drive.google.com/file/d/1ahyCTXBAZiuni6RTzHzLoOwwfTRFaU-C/view&#34;&gt;How does Shazam work - Coding Geek&lt;/a&gt; (main resource)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://hajim.rochester.edu/ece/sites/zduan/teaching/ece472/projects/2019/AudioFingerprinting.pdf&#34;&gt;Song recognition using audio fingerprinting&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.toptal.com/algorithms/shazam-it-music-processing-fingerprinting-and-recognition&#34;&gt;How does Shazam work - Toptal&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.royvanrijn.com/blog/2010/06/creating-shazam-in-java/&#34;&gt;Creating Shazam in Java&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Author &lt;span&gt;‚úí&lt;/span&gt;&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Chigozirim Igweamaka &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Connect with me on &lt;a href=&#34;https://www.linkedin.com/in/ichigozirim/&#34;&gt;LinkedIn&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Check out my other &lt;a href=&#34;https://github.com/cgzirim&#34;&gt;GitHub&lt;/a&gt; projects.&lt;/li&gt; &#xA;   &lt;li&gt;Follow me on &lt;a href=&#34;https://twitter.com/cgzirim&#34;&gt;Twitter&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License &lt;span&gt;üîí&lt;/span&gt;&lt;/h2&gt; &#xA;&lt;p&gt;This project is licensed under the MIT License - see the &lt;a href=&#34;https://raw.githubusercontent.com/cgzirim/seek-tune/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt; file for details.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>go-kratos/kratos</title>
    <updated>2025-04-01T01:56:21Z</updated>
    <id>tag:github.com,2025-04-01:/go-kratos/kratos</id>
    <link href="https://github.com/go-kratos/kratos" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Your ultimate Go microservices framework for the cloud-native era.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt;&lt;a href=&#34;https://go-kratos.dev/&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://github.com/go-kratos/kratos/raw/main/docs/images/kratos-large.png?raw=true&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/go-kratos/kratos/actions&#34;&gt;&lt;img src=&#34;https://github.com/go-kratos/kratos/workflows/Go/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pkg.go.dev/github.com/go-kratos/kratos/v2&#34;&gt;&lt;img src=&#34;https://pkg.go.dev/badge/github.com/go-kratos/kratos/v2&#34; alt=&#34;GoDoc&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/go-kratos/kratos&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/go-kratos/kratos/master/graph/badge.svg?sanitize=true&#34; alt=&#34;codeCov&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/go-kratos/kratos&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/go-kratos/kratos&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/go-kratos/kratos/raw/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/go-kratos/kratos&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/avelino/awesome-go&#34;&gt;&lt;img src=&#34;https://awesome.re/mentioned-badge.svg?sanitize=true&#34; alt=&#34;Awesome Go&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/BWzJsUJ&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/766619759214854164?label=chat&amp;amp;logo=discord&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://www.producthunt.com/posts/go-kratos?utm_source=badge-featured&amp;amp;utm_medium=badge&amp;amp;utm_souce=badge-go-kratos&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://api.producthunt.com/widgets/embed-image/v1/featured.svg?post_id=306565&amp;amp;theme=light&#34; alt=&#34;Go Kratos - A Go framework for microservices. | Product Hunt&#34; style=&#34;width: 250px; height: 54px;&#34; width=&#34;250&#34; height=&#34;54&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;h5&gt;Translate to: &lt;a href=&#34;https://raw.githubusercontent.com/go-kratos/kratos/main/README_zh.md&#34;&gt;ÁÆÄ‰Ωì‰∏≠Êñá&lt;/a&gt;&lt;/h5&gt; &#xA;&lt;h2&gt;About Kratos&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;The name is inspired by the Greek-mythology-based game &#34;God of War&#34;. It tells the adventures of Kratos becoming a god of war from a mortal and launching a god-killing slaughter.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Kratos is a microservice-oriented governance framework implemented by golang, which offers convenient capabilities to help you quickly build a bulletproof application from scratch, such as:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The &lt;a href=&#34;https://go-kratos.dev/en/docs/component/api&#34;&gt;communication protocol&lt;/a&gt; is based on the HTTP/gRPC through the definition of Protobuf.&lt;/li&gt; &#xA; &lt;li&gt;Abstract &lt;a href=&#34;https://go-kratos.dev/en/docs/component/transport/overview&#34;&gt;transport&lt;/a&gt; layer support: &lt;a href=&#34;https://go-kratos.dev/en/docs/component/transport/http&#34;&gt;HTTP&lt;/a&gt; / &lt;a href=&#34;https://go-kratos.dev/en/docs/component/transport/grpc&#34;&gt;gRPC&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Powerful &lt;a href=&#34;https://go-kratos.dev/en/docs/component/middleware/overview&#34;&gt;middleware&lt;/a&gt; design, support: &lt;a href=&#34;https://go-kratos.dev/en/docs/component/middleware/tracing&#34;&gt;Tracing (OpenTelemetry)&lt;/a&gt;, &lt;a href=&#34;https://go-kratos.dev/en/docs/component/middleware/metrics&#34;&gt;Metrics (Prometheus is default)&lt;/a&gt;, &lt;a href=&#34;https://go-kratos.dev/en/docs/component/middleware/recovery&#34;&gt;Recovery&lt;/a&gt; and more.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://go-kratos.dev/en/docs/component/registry&#34;&gt;Registry&lt;/a&gt; interface able to be connected with various other centralized registries through plug-ins.&lt;/li&gt; &#xA; &lt;li&gt;The &lt;a href=&#34;https://go-kratos.dev/en/docs/component/log&#34;&gt;standard log interfaces&lt;/a&gt; ease the integration of the third-party log libs with logs collected through the &lt;em&gt;Fluentd&lt;/em&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Automatically support the selection of the content &lt;a href=&#34;https://go-kratos.dev/en/docs/component/encoding&#34;&gt;encoding&lt;/a&gt; with Accept and Content-Type.&lt;/li&gt; &#xA; &lt;li&gt;Multiple data sources are supported for &lt;a href=&#34;https://go-kratos.dev/en/docs/component/config&#34;&gt;configurations&lt;/a&gt; and dynamic configurations (use atomic operations).&lt;/li&gt; &#xA; &lt;li&gt;In the protocol of HTTP/gRPC, use the uniform &lt;a href=&#34;https://go-kratos.dev/en/docs/component/metadata&#34;&gt;metadata&lt;/a&gt; transfer method.&lt;/li&gt; &#xA; &lt;li&gt;You can define &lt;a href=&#34;https://go-kratos.dev/en/docs/component/errors/&#34;&gt;errors&lt;/a&gt; in protos and generate enums with protoc-gen-go.&lt;/li&gt; &#xA; &lt;li&gt;You can define &lt;a href=&#34;https://go-kratos.dev/en/docs/component/middleware/validate&#34;&gt;verification rules&lt;/a&gt; in Protobuf supported by the HTTP/gRPC service.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://go-kratos.dev/en/docs/guide/openapi&#34;&gt;Swagger API&lt;/a&gt; is generated Automatically and embed Swagger UI endpoint can be started by adding &lt;a href=&#34;https://github.com/go-kratos/swagger-api&#34;&gt;Swagger plugin&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Kratos is accessible, powerful, and provides tools required for large, robust applications.&lt;/p&gt; &#xA;&lt;h2&gt;Learning Kratos&lt;/h2&gt; &#xA;&lt;p&gt;Kratos has the most extensive and thorough &lt;a href=&#34;https://go-kratos.dev/en/docs/getting-started/start&#34;&gt;documentation&lt;/a&gt; and &lt;a href=&#34;https://github.com/go-kratos/examples&#34;&gt;example&lt;/a&gt; library of all modern web application frameworks, making it a breeze to get started with the framework.&lt;/p&gt; &#xA;&lt;p&gt;We also provide a &lt;a href=&#34;https://github.com/go-kratos/kratos-layout&#34;&gt;modern template&lt;/a&gt;. This template should help reduce the work required to set up modern projects.&lt;/p&gt; &#xA;&lt;h3&gt;Goals&lt;/h3&gt; &#xA;&lt;p&gt;Kratos boosts your productivity. With the integration of excellent resources and further support, programmers can get rid of most issues might encounter in the field of distributed systems and software engineering such that they are allowed to focus on the release of businesses only. Additionally, for each programmer, Kratos is also an ideal one learning warehouse for many aspects of microservices to enrich their experiences and skills.&lt;/p&gt; &#xA;&lt;h3&gt;Principles&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Simple&lt;/strong&gt;: Appropriate design with plain and easy code.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;General&lt;/strong&gt;: Cover the various utilities for business development.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Highly efficient&lt;/strong&gt;: Speeding up the efficiency of businesses upgrading.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Stable&lt;/strong&gt;: The base libs validated in the production environment have the characteristics of high testability, high coverage as well as high security and reliability.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Robust&lt;/strong&gt;: Eliminating misusing through high quality of the base libs.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;High-performance&lt;/strong&gt;: Optimal performance excluding the optimization of hacking in case of &lt;em&gt;unsafe&lt;/em&gt;.&amp;nbsp;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Expandability&lt;/strong&gt;: Properly designed interfaces where you can expand utilities such as base libs to meet your further requirements.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Fault-tolerance&lt;/strong&gt;: Designed against failure, enhance the understanding and exercising of SRE within Kratos to achieve more robustness.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Toolchain&lt;/strong&gt;: Includes an extensive toolchain, such as the code generation of cache, the lint tool, and so forth.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;Create a kratos playground through &lt;a href=&#34;https://www.docker.com/products/docker-desktop&#34;&gt;docker&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker run -it --rm -p 8000:8000 --workdir /workspace golang&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;apt-get update &amp;amp;&amp;amp; apt-get -y install protobuf-compiler&#xA;export GOPROXY=https://goproxy.io,direct&#xA;go install github.com/go-kratos/kratos/cmd/kratos/v2@latest &amp;amp;&amp;amp; kratos upgrade&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;kratos new helloworld&#xA;cd helloworld/ &amp;amp;&amp;amp; go mod tidy&#xA;kratos run&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use a browser to open and visit: &lt;code&gt;http://localhost:8000/helloworld/kratos&lt;/code&gt;, The kratos program is running!&lt;/p&gt; &#xA;&lt;p&gt;If you need more, please visit the kratos &lt;a href=&#34;https://go-kratos.dev/en/docs/getting-started/start&#34;&gt;documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Security Vulnerabilities&lt;/h2&gt; &#xA;&lt;p&gt;If you discover a security vulnerability within Kratos, please send an e-mail to tonybase via &lt;a href=&#34;mailto:go-kratos@googlegroups.com&#34;&gt;go-kratos@googlegroups.com&lt;/a&gt;. All security vulnerabilities will be promptly addressed.&lt;/p&gt; &#xA;&lt;h2&gt;Community&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/go-kratos/kratos/issues/682&#34;&gt;Wechat Group&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://discord.gg/BWzJsUJ&#34;&gt;Discord Group&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://go-kratos.dev/en&#34;&gt;go-kratos.dev&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributors&lt;/h2&gt; &#xA;&lt;p&gt;Thank you for considering contributing to the Kratos framework! The contribution guide can be found in the &lt;a href=&#34;https://go-kratos.dev/en/docs/community/contribution&#34;&gt;Kratos documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;a href=&#34;https://github.com/go-kratos/kratos/graphs/contributors&#34;&gt; &lt;img src=&#34;https://contrib.rocks/image?repo=go-kratos/kratos&#34;&gt; &lt;/a&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The Kratos framework is open-sourced software licensed under the &lt;a href=&#34;https://raw.githubusercontent.com/go-kratos/kratos/main/LICENSE&#34;&gt;MIT license&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Acknowledgments&lt;/h2&gt; &#xA;&lt;p&gt;The following project had particular influence on kratos&#39;s design.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/go-kit/kit&#34;&gt;go-kit/kit&lt;/a&gt; is a programming toolkit for building microservices in go.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/asim/go-micro&#34;&gt;asim/go-micro&lt;/a&gt; a distributed systems development framework.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/google/go-cloud&#34;&gt;google/go-cloud&lt;/a&gt; is go cloud development kit.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/zeromicro/go-zero&#34;&gt;zeromicro/go-zero&lt;/a&gt; is a web and rpc framework with lots of builtin engineering practices.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/beego/beego&#34;&gt;beego/beego&lt;/a&gt; is a web framework including RESTful APIs, web apps and backend services.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>grpc-ecosystem/grpc-gateway</title>
    <updated>2025-04-01T01:56:21Z</updated>
    <id>tag:github.com,2025-04-01:/grpc-ecosystem/grpc-gateway</id>
    <link href="https://github.com/grpc-ecosystem/grpc-gateway" rel="alternate"></link>
    <summary type="html">&lt;p&gt;gRPC to JSON proxy generator following the gRPC HTTP spec&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h1&gt;gRPC-Gateway&lt;/h1&gt; &#xA; &lt;p&gt; gRPC to JSON proxy generator following the gRPC HTTP spec &lt;/p&gt; &#xA; &lt;a href=&#34;https://github.com/grpc-ecosystem/grpc-gateway/actions/workflows/main.yml&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/workflow/status/grpc-ecosystem/grpc-gateway/main?color=379c9c&amp;amp;label=build&amp;amp;logo=github&amp;amp;logoColor=ffffff&amp;amp;style=flat-square&#34;&gt;&lt;/a&gt; &#xA; &lt;a href=&#34;https://app.slack.com/client/T029RQSE6/CBATURP1D&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/slack-grpc--gateway-379c9c?logo=slack&amp;amp;logoColor=ffffff&amp;amp;style=flat-square&#34;&gt;&lt;/a&gt; &#xA; &lt;a href=&#34;https://github.com/grpc-ecosystem/grpc-gateway/raw/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/grpc-ecosystem/grpc-gateway?color=379c9c&amp;amp;style=flat-square&#34;&gt;&lt;/a&gt; &#xA; &lt;a href=&#34;https://github.com/grpc-ecosystem/grpc-gateway/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/grpc-ecosystem/grpc-gateway?color=379c9c&amp;amp;logoColor=ffffff&amp;amp;style=flat-square&#34;&gt;&lt;/a&gt; &#xA; &lt;a href=&#34;https://github.com/grpc-ecosystem/grpc-gateway/stargazers&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/grpc-ecosystem/grpc-gateway?color=379c9c&amp;amp;style=flat-square&#34;&gt;&lt;/a&gt; &#xA; &lt;a href=&#34;https://slsa.dev/images/gh-badge-level3.svg&#34;&gt;&lt;img src=&#34;https://slsa.dev/images/gh-badge-level3.svg?sanitize=true&#34;&gt;&lt;/a&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;About&lt;/h2&gt; &#xA;&lt;p&gt;The gRPC-Gateway is a plugin of the Google protocol buffers compiler &lt;a href=&#34;https://github.com/protocolbuffers/protobuf&#34;&gt;protoc&lt;/a&gt;. It reads protobuf service definitions and generates a reverse-proxy server which translates a RESTful HTTP API into gRPC. This server is generated according to the &lt;a href=&#34;https://github.com/googleapis/googleapis/raw/master/google/api/http.proto#L46&#34;&gt;&lt;code&gt;google.api.http&lt;/code&gt;&lt;/a&gt; annotations in your service definitions.&lt;/p&gt; &#xA;&lt;p&gt;This helps you provide your APIs in both gRPC and RESTful style at the same time.&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/grpc-ecosystem/grpc-gateway/main/docs/assets/images/architecture_introduction_diagram.svg?sanitize=true&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Docs&lt;/h2&gt; &#xA;&lt;p&gt;You can read our docs at:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://grpc-ecosystem.github.io/grpc-gateway/&#34;&gt;https://grpc-ecosystem.github.io/grpc-gateway/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Testimonials&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;We use the gRPC-Gateway to serve millions of API requests per day, and have been since 2018 and through all of that, we have never had any issues with it.&lt;/p&gt; &#xA; &lt;p&gt;&lt;em&gt;- William Mill, &lt;a href=&#34;http://adhocteam.us/&#34;&gt;Ad Hoc&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Background&lt;/h2&gt; &#xA;&lt;p&gt;gRPC is great -- it generates API clients and server stubs in many programming languages, it is fast, easy-to-use, bandwidth-efficient and its design is combat-proven by Google. However, you might still want to provide a traditional RESTful JSON API as well. Reasons can range from maintaining backward-compatibility, supporting languages or clients that are not well supported by gRPC, to simply maintaining the aesthetics and tooling involved with a RESTful JSON architecture.&lt;/p&gt; &#xA;&lt;p&gt;This project aims to provide that HTTP+JSON interface to your gRPC service. A small amount of configuration in your service to attach HTTP semantics is all that&#39;s needed to generate a reverse-proxy with this library.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Compile from source&lt;/h3&gt; &#xA;&lt;p&gt;The following instructions assume you are using &lt;a href=&#34;https://go.dev/wiki/Modules&#34;&gt;Go Modules&lt;/a&gt; for dependency management. Use a &lt;a href=&#34;https://go.dev/wiki/Modules#how-can-i-track-tool-dependencies-for-a-module&#34;&gt;tool dependency&lt;/a&gt; to track the versions of the following executable packages:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// +build tools&#xA;&#xA;package tools&#xA;&#xA;import (&#xA;    _ &#34;github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-grpc-gateway&#34;&#xA;    _ &#34;github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2&#34;&#xA;    _ &#34;google.golang.org/grpc/cmd/protoc-gen-go-grpc&#34;&#xA;    _ &#34;google.golang.org/protobuf/cmd/protoc-gen-go&#34;&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run &lt;code&gt;go mod tidy&lt;/code&gt; to resolve the versions. Install by running&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;go install \&#xA;    github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-grpc-gateway \&#xA;    github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2 \&#xA;    google.golang.org/protobuf/cmd/protoc-gen-go \&#xA;    google.golang.org/grpc/cmd/protoc-gen-go-grpc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will place four binaries in your &lt;code&gt;$GOBIN&lt;/code&gt;;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;protoc-gen-grpc-gateway&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;protoc-gen-openapiv2&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;protoc-gen-go&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;protoc-gen-go-grpc&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Make sure that your &lt;code&gt;$GOBIN&lt;/code&gt; is in your &lt;code&gt;$PATH&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;strong&gt;Using the &lt;code&gt;tool&lt;/code&gt; Directive in Go 1.24&lt;/strong&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Starting from Go 1.24, the &lt;code&gt;tool&lt;/code&gt; directive in &lt;code&gt;go.mod&lt;/code&gt; provides a structured way to track and manage executable dependencies. This replaces the previous workaround of using a separate &lt;code&gt;tools.go&lt;/code&gt; file with blank imports.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;strong&gt;Tracking Tools in &lt;code&gt;go.mod&lt;/code&gt;&lt;/strong&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Instead of manually importing tool dependencies in a Go source file, you can now use the &lt;code&gt;tool&lt;/code&gt; directive in &lt;code&gt;go.mod&lt;/code&gt; to declare the tools your project depends on. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;module tools&#xA;&#xA;go 1.24&#xA;&#xA;tool (&#xA;&#x9;github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-grpc-gateway&#xA;&#x9;github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2&#xA;&#x9;google.golang.org/grpc/cmd/protoc-gen-go-grpc&#xA;&#x9;google.golang.org/protobuf/cmd/protoc-gen-go&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;strong&gt;Managing Tool Dependencies&lt;/strong&gt;&lt;/h4&gt; &#xA;&lt;p&gt;To add tools to your module, use the &lt;code&gt;-tool&lt;/code&gt; flag with &lt;code&gt;go get&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;go get -tool github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-grpc-gateway&#xA;go get -tool github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2&#xA;go get -tool google.golang.org/protobuf/cmd/protoc-gen-go&#xA;go get -tool google.golang.org/grpc/cmd/protoc-gen-go-grpc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This automatically updates &lt;code&gt;go.mod&lt;/code&gt;, adding the tools under the &lt;code&gt;tool&lt;/code&gt; directive along with &lt;code&gt;require&lt;/code&gt; statements to ensure version tracking.&lt;/p&gt; &#xA;&lt;h3&gt;Install Tools&lt;/h3&gt; &#xA;&lt;p&gt;Once the tool dependencies are properly recorded in the &lt;code&gt;go.mod&lt;/code&gt; file, simply execute the following command in the root directory of your project:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;go install ./...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Download the binaries&lt;/h3&gt; &#xA;&lt;p&gt;You may alternatively download the binaries from the &lt;a href=&#34;https://github.com/grpc-ecosystem/grpc-gateway/releases/latest&#34;&gt;GitHub releases page&lt;/a&gt;. We generate &lt;a href=&#34;https://raw.githubusercontent.com/grpc-ecosystem/grpc-gateway/main/slsa.dev&#34;&gt;SLSA3 signatures&lt;/a&gt; using the OpenSSF&#39;s &lt;a href=&#34;https://github.com/slsa-framework/slsa-github-generator&#34;&gt;slsa-framework/slsa-github-generator&lt;/a&gt; during the release process. To verify a release binary:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install the verification tool from &lt;a href=&#34;https://github.com/slsa-framework/slsa-verifier#installation&#34;&gt;slsa-framework/slsa-verifier#installation&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Download the provenance file &lt;code&gt;attestation.intoto.jsonl&lt;/code&gt; from the &lt;a href=&#34;https://github.com/grpc-ecosystem/grpc-gateway/releases/latest&#34;&gt;GitHub releases page&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Run the verifier:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;slsa-verifier -artifact-path &amp;lt;the-binary&amp;gt; -provenance attestation.intoto.jsonl -source github.com/grpc-ecosystem/grpc-gateway -tag &amp;lt;the-tag&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, see the section on remotely managed plugin versions below.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;1.Define your &lt;a href=&#34;https://grpc.io/docs/&#34;&gt;gRPC&lt;/a&gt; service using protocol buffers&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;your_service.proto&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-protobuf&#34;&gt; syntax = &#34;proto3&#34;;&#xA; package your.service.v1;&#xA; option go_package = &#34;github.com/yourorg/yourprotos/gen/go/your/service/v1&#34;;&#xA;&#xA; message StringMessage {&#xA;   string value = 1;&#xA; }&#xA;&#xA; service YourService {&#xA;   rpc Echo(StringMessage) returns (StringMessage) {}&#xA; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;2. Generate gRPC stubs&lt;/h3&gt; &#xA;&lt;p&gt;This step generates the gRPC stubs that you can use to implement the service and consume from clients:&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s an example &lt;code&gt;buf.gen.yaml&lt;/code&gt; you can use to generate the stubs with &lt;a href=&#34;https://github.com/bufbuild/buf&#34;&gt;buf&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;version: v2&#xA;plugins:&#xA;  - local: protoc-gen-go&#xA;    out: gen/go&#xA;    opt:&#xA;      - paths=source_relative&#xA;  - local: protoc-gen-go-grpc&#xA;    out: gen/go&#xA;    opt:&#xA;      - paths=source_relative&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With this file in place, you can generate your files using &lt;code&gt;buf generate&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;For a complete example of using &lt;code&gt;buf generate&lt;/code&gt; to generate protobuf stubs, see &lt;a href=&#34;https://github.com/johanbrandhorst/grpc-gateway-boilerplate&#34;&gt;the boilerplate repo&lt;/a&gt;. For more information on generating the stubs with buf, see &lt;a href=&#34;https://docs.buf.build/generate-usage&#34;&gt;the official documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;If you are using &lt;code&gt;protoc&lt;/code&gt; to generate stubs, here&#39;s an example of what a command might look like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;protoc -I . \&#xA;    --go_out ./gen/go/ --go_opt paths=source_relative \&#xA;    --go-grpc_out ./gen/go/ --go-grpc_opt paths=source_relative \&#xA;    your/service/v1/your_service.proto&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;3. Implement your service in gRPC as usual.&lt;/h3&gt; &#xA;&lt;h3&gt;4. Generate reverse-proxy using &lt;code&gt;protoc-gen-grpc-gateway&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;At this point, you have 3 options:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;no further modifications, use the default mapping to HTTP semantics (method, path, etc.) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;this will work on any &lt;code&gt;.proto&lt;/code&gt; file, but will not allow setting HTTP paths, request parameters or similar&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;additional &lt;code&gt;.proto&lt;/code&gt; modifications to use a custom mapping &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;relies on parameters in the &lt;code&gt;.proto&lt;/code&gt; file to set custom HTTP mappings&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;no &lt;code&gt;.proto&lt;/code&gt; modifications, but use an external configuration file &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;relies on an external configuration file to set custom HTTP mappings&lt;/li&gt; &#xA;   &lt;li&gt;mostly useful when the source proto file isn&#39;t under your control&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;1. Using the default mapping&lt;/h4&gt; &#xA;&lt;p&gt;This requires no additional modification to the &lt;code&gt;.proto&lt;/code&gt; file but does require enabling a specific option when executing the plugin. The &lt;code&gt;generate_unbound_methods&lt;/code&gt; should be enabled.&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s what a &lt;code&gt;buf.gen.yaml&lt;/code&gt; file might look like with this option enabled:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;version: v2&#xA;plugins:&#xA;  - local: protoc-gen-go&#xA;    out: gen/go&#xA;    opt:&#xA;      - paths=source_relative&#xA;  - local: protoc-gen-go-grpc&#xA;    out: gen/go&#xA;    opt:&#xA;      - paths=source_relative&#xA;  - local: protoc-gen-grpc-gateway&#xA;    out: gen/go&#xA;    opt:&#xA;      - paths=source_relative&#xA;      - generate_unbound_methods=true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With &lt;code&gt;protoc&lt;/code&gt; (just the grpc-gateway stubs):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;protoc -I . --grpc-gateway_out ./gen/go \&#xA;    --grpc-gateway_opt paths=source_relative \&#xA;    --grpc-gateway_opt generate_unbound_methods=true \&#xA;    your/service/v1/your_service.proto&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;2. With custom annotations&lt;/h4&gt; &#xA;&lt;p&gt;Add a &lt;a href=&#34;https://github.com/googleapis/googleapis/raw/master/google/api/http.proto#L46&#34;&gt;&lt;code&gt;google.api.http&lt;/code&gt;&lt;/a&gt; annotation to your .proto file&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;your_service.proto&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt; syntax = &#34;proto3&#34;;&#xA; package your.service.v1;&#xA; option go_package = &#34;github.com/yourorg/yourprotos/gen/go/your/service/v1&#34;;&#xA;+&#xA;+import &#34;google/api/annotations.proto&#34;;&#xA;+&#xA; message StringMessage {&#xA;   string value = 1;&#xA; }&#xA;&#xA; service YourService {&#xA;-  rpc Echo(StringMessage) returns (StringMessage) {}&#xA;+  rpc Echo(StringMessage) returns (StringMessage) {&#xA;+    option (google.api.http) = {&#xA;+      post: &#34;/v1/example/echo&#34;&#xA;+      body: &#34;*&#34;&#xA;+    };&#xA;+  }&#xA; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;You will need to provide the required third party protobuf files to the protobuf compiler. If you are using &lt;a href=&#34;https://github.com/bufbuild/buf&#34;&gt;buf&lt;/a&gt;, this dependency can be added to the &lt;code&gt;deps&lt;/code&gt; array in your &lt;code&gt;buf.yaml&lt;/code&gt; under the name &lt;code&gt;buf.build/googleapis/googleapis&lt;/code&gt;:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;version: v2&#xA;name: buf.build/yourorg/myprotos&#xA;deps:&#xA;  - buf.build/googleapis/googleapis&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Always run &lt;code&gt;buf dep update&lt;/code&gt; after adding a dependency to your &lt;code&gt;buf.yaml&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/grpc-ecosystem/grpc-gateway/main/examples/internal/proto/examplepb/a_bit_of_everything.proto&#34;&gt;a_bit_of_everything.proto&lt;/a&gt; for examples of more annotations you can add to customize gateway behavior and generated OpenAPI output.&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s what a &lt;code&gt;buf.gen.yaml&lt;/code&gt; file might look like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;version: v2&#xA;plugins:&#xA;  - local: protoc-gen-go&#xA;    out: gen/go&#xA;    opt:&#xA;      - paths=source_relative&#xA;  - local: protoc-gen-go-grpc&#xA;    out: gen/go&#xA;    opt:&#xA;      - paths=source_relative&#xA;  - local: protoc-gen-grpc-gateway&#xA;    out: gen/go&#xA;    opt:&#xA;      - paths=source_relative&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you are using &lt;code&gt;protoc&lt;/code&gt; to generate stubs, you need to ensure the required dependencies are available to the compiler at compile time. These can be found by manually cloning and copying the relevant files from the &lt;a href=&#34;https://github.com/googleapis/googleapis&#34;&gt;googleapis repository&lt;/a&gt;, and providing them to &lt;code&gt;protoc&lt;/code&gt; when running. The files you will need are:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;google/api/annotations.proto&#xA;google/api/field_behavior.proto&#xA;google/api/http.proto&#xA;google/api/httpbody.proto&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here&#39;s what a &lt;code&gt;protoc&lt;/code&gt; execution might look like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;protoc -I . --grpc-gateway_out ./gen/go \&#xA;    --grpc-gateway_opt paths=source_relative \&#xA;    your/service/v1/your_service.proto&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;3. External configuration&lt;/h4&gt; &#xA;&lt;p&gt;If you do not want to (or cannot) modify the proto file for use with gRPC-Gateway you can alternatively use an external &lt;a href=&#34;https://cloud.google.com/endpoints/docs/grpc/grpc-service-config&#34;&gt;gRPC Service Configuration&lt;/a&gt; file. &lt;a href=&#34;https://grpc-ecosystem.github.io/grpc-gateway/docs/mapping/grpc_api_configuration/&#34;&gt;Check our documentation&lt;/a&gt; for more information. This is best combined with the &lt;code&gt;standalone=true&lt;/code&gt; option to generate a file that can live in its own package, separate from the files generated by the source protobuf file.&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s what a &lt;code&gt;buf.gen.yaml&lt;/code&gt; file might look like with this option enabled:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;version: v2&#xA;plugins:&#xA;  - local: protoc-gen-go&#xA;    out: gen/go&#xA;    opt:&#xA;      - paths=source_relative&#xA;  - local: protoc-gen-go-grpc&#xA;    out: gen/go&#xA;    opt:&#xA;      - paths=source_relative&#xA;  - local: protoc-gen-grpc-gateway&#xA;    out: gen/go&#xA;    opt:&#xA;      - paths=source_relative&#xA;      - grpc_api_configuration=path/to/config.yaml&#xA;      - standalone=true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With &lt;code&gt;protoc&lt;/code&gt; (just the grpc-gateway stubs):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;protoc -I . --grpc-gateway_out ./gen/go \&#xA;    --grpc-gateway_opt paths=source_relative \&#xA;    --grpc-gateway_opt grpc_api_configuration=path/to/config.yaml \&#xA;    --grpc-gateway_opt standalone=true \&#xA;    your/service/v1/your_service.proto&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;5. Write an entrypoint for the HTTP reverse-proxy server&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;  &#34;context&#34;&#xA;  &#34;flag&#34;&#xA;  &#34;net/http&#34;&#xA;&#xA;  &#34;github.com/grpc-ecosystem/grpc-gateway/v2/runtime&#34;&#xA;  &#34;google.golang.org/grpc&#34;&#xA;  &#34;google.golang.org/grpc/credentials/insecure&#34;&#xA;  &#34;google.golang.org/grpc/grpclog&#34;&#xA;&#xA;  gw &#34;github.com/yourorg/yourrepo/proto/gen/go/your/service/v1/your_service&#34;  // Update&#xA;)&#xA;&#xA;var (&#xA;  // command-line options:&#xA;  // gRPC server endpoint&#xA;  grpcServerEndpoint = flag.String(&#34;grpc-server-endpoint&#34;,  &#34;localhost:9090&#34;, &#34;gRPC server endpoint&#34;)&#xA;)&#xA;&#xA;func run() error {&#xA;  ctx := context.Background()&#xA;  ctx, cancel := context.WithCancel(ctx)&#xA;  defer cancel()&#xA;&#xA;  // Register gRPC server endpoint&#xA;  // Note: Make sure the gRPC server is running properly and accessible&#xA;  mux := runtime.NewServeMux()&#xA;  opts := []grpc.DialOption{grpc.WithTransportCredentials(insecure.NewCredentials())}&#xA;  err := gw.RegisterYourServiceHandlerFromEndpoint(ctx, mux,  *grpcServerEndpoint, opts)&#xA;  if err != nil {&#xA;    return err&#xA;  }&#xA;&#xA;  // Start HTTP server (and proxy calls to gRPC server endpoint)&#xA;  return http.ListenAndServe(&#34;:8081&#34;, mux)&#xA;}&#xA;&#xA;func main() {&#xA;  flag.Parse()&#xA;&#xA;  if err := run(); err != nil {&#xA;    grpclog.Fatal(err)&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;6. (Optional) Generate OpenAPI definitions using &lt;code&gt;protoc-gen-openapiv2&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Here&#39;s what a &lt;code&gt;buf.gen.yaml&lt;/code&gt; file might look like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;version: v2&#xA;plugins:&#xA;  - local: protoc-gen-go&#xA;    out: gen/go&#xA;    opt:&#xA;      - paths=source_relative&#xA;  - local: protoc-gen-go-grpc&#xA;    out: gen/go&#xA;    opt:&#xA;      - paths=source_relative&#xA;  - local: protoc-gen-grpc-gateway&#xA;    out: gen/go&#xA;    opt:&#xA;      - paths=source_relative&#xA;      - generate_unbound_methods=true&#xA;  - local: protoc-gen-openapiv2&#xA;    out: gen/go&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To use the custom protobuf annotations supported by &lt;code&gt;protoc-gen-openapiv2&lt;/code&gt;, we need another dependency added to our protobuf generation step. If you are using &lt;code&gt;buf&lt;/code&gt;, you can add the &lt;code&gt;buf.build/grpc-ecosystem/grpc-gateway&lt;/code&gt; dependency to your &lt;code&gt;deps&lt;/code&gt; array:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;version: v2&#xA;name: buf.build/yourorg/myprotos&#xA;deps:&#xA;  - buf.build/googleapis/googleapis&#xA;  - buf.build/grpc-ecosystem/grpc-gateway&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With &lt;code&gt;protoc&lt;/code&gt; (just the swagger file):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;protoc -I . --openapiv2_out ./gen/openapiv2 \&#xA;    your/service/v1/your_service.proto&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you are using &lt;code&gt;protoc&lt;/code&gt; to generate stubs, you will need to copy the protobuf files from the &lt;code&gt;protoc-gen-openapiv2/options&lt;/code&gt; directory of this repository, and providing them to &lt;code&gt;protoc&lt;/code&gt; when running.&lt;/p&gt; &#xA;&lt;p&gt;Note that this plugin also supports generating OpenAPI definitions for unannotated methods; use the &lt;code&gt;generate_unbound_methods&lt;/code&gt; option to enable this.&lt;/p&gt; &#xA;&lt;p&gt;It is possible with the HTTP mapping for a gRPC service method to create duplicate mappings with the only difference being constraints on the path parameter.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;/v1/{name=projects/*}&lt;/code&gt; and &lt;code&gt;/v1/{name=organizations/*}&lt;/code&gt; both become &lt;code&gt;/v1/{name}&lt;/code&gt;. When this occurs the plugin will rename the path parameter with a &#34;_1&#34; (or &#34;_2&#34; etc) suffix to differentiate the different operations. So in the above example, the 2nd path would become &lt;code&gt;/v1/{name_1=organizations/*}&lt;/code&gt;. This can also cause OpenAPI clients to URL encode the &#34;/&#34; that is part of the path parameter as that is what OpenAPI defines in the specification. To allow gRPC gateway to accept the URL encoded slash and still route the request, use the UnescapingModeAllCharacters or UnescapingModeLegacy (which is the default currently though may change in future versions). See &lt;a href=&#34;https://grpc-ecosystem.github.io/grpc-gateway/docs/mapping/customizing_your_gateway/&#34;&gt;Customizing Your Gateway&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h2&gt;Usage with remote plugins&lt;/h2&gt; &#xA;&lt;p&gt;As an alternative to all of the above, you can use &lt;code&gt;buf&lt;/code&gt; with &lt;a href=&#34;https://buf.build/docs/bsr/remote-plugins/usage&#34;&gt;remote plugins&lt;/a&gt; to manage plugin versions and generation. An example &lt;code&gt;buf.gen.yaml&lt;/code&gt; using remote plugin generation looks like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;version: v2&#xA;plugins:&#xA;  - remote: buf.build/protocolbuffers/go:v1.31.0&#xA;    out: gen/go&#xA;    opt:&#xA;      - paths=source_relative&#xA;  - remote: buf.build/grpc/go:v1.3.0&#xA;    out: gen/go&#xA;    opt:&#xA;      - paths=source_relative&#xA;  - remote: buf.build/grpc-ecosystem/gateway:v2.16.2&#xA;    out: gen/go&#xA;    opt:&#xA;      - paths=source_relative&#xA;  - remote: buf.build/grpc-ecosystem/openapiv2:v2.16.2&#xA;    out: gen/openapiv2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This requires no local installation of any plugins. Be careful to use the same version of the generator as the runtime library, i.e. if using &lt;code&gt;v2.16.2&lt;/code&gt;, run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ go get github.com/grpc-ecosystem/grpc-gateway/v2@v2.16.2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To get the same version of the runtime in your &lt;code&gt;go.mod&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Note that usage of remote plugins is incompatible with usage of external configuration files like &lt;a href=&#34;https://grpc-ecosystem.github.io/grpc-gateway/docs/mapping/grpc_api_configuration/#using-an-external-configuration-file&#34;&gt;grpc_api_configuration&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Video intro&lt;/h2&gt; &#xA;&lt;p&gt;This GopherCon UK 2019 presentation from our maintainer &lt;a href=&#34;https://github.com/johanbrandhorst&#34;&gt;@JohanBrandhorst&lt;/a&gt; provides a good intro to using the gRPC-Gateway. It uses the following boilerplate repo as a base: &lt;a href=&#34;https://github.com/johanbrandhorst/grpc-gateway-boilerplate&#34;&gt;https://github.com/johanbrandhorst/grpc-gateway-boilerplate&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a href=&#34;https://www.youtube.com/watch?v=Pq1paKC-fXk&#34;&gt; &lt;img src=&#34;https://img.youtube.com/vi/Pq1paKC-fXk/0.jpg&#34;&gt; &lt;/a&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Parameters and flags&lt;/h2&gt; &#xA;&lt;p&gt;When using &lt;code&gt;buf&lt;/code&gt; to generate stubs, flags and parameters are passed through the &lt;code&gt;opt&lt;/code&gt; field in your &lt;code&gt;buf.gen.yaml&lt;/code&gt; file, for example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;version: v2&#xA;plugins:&#xA;  - local: protoc-gen-grpc-gateway&#xA;    out: gen/go&#xA;    opt:&#xA;      - paths=source_relative&#xA;      - grpc_api_configuration=path/to/config.yaml&#xA;      - standalone=true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;During code generation with &lt;code&gt;protoc&lt;/code&gt;, flags to gRPC-Gateway tools must be passed through &lt;code&gt;protoc&lt;/code&gt; using one of 2 patterns:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;as part of the &lt;code&gt;--&amp;lt;tool_suffix&amp;gt;_out&lt;/code&gt; &lt;code&gt;protoc&lt;/code&gt; parameter: &lt;code&gt;--&amp;lt;tool_suffix&amp;gt;_out=&amp;lt;flags&amp;gt;:&amp;lt;path&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;--grpc-gateway_out=repeated_path_param_separator=ssv:.&#xA;--openapiv2_out=repeated_path_param_separator=ssv:.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;using additional &lt;code&gt;--&amp;lt;tool_suffix&amp;gt;_opt&lt;/code&gt; parameters: &lt;code&gt;--&amp;lt;tool_suffix&amp;gt;_opt=&amp;lt;flag&amp;gt;[,&amp;lt;flag&amp;gt;]*&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;--grpc-gateway_opt repeated_path_param_separator=ssv&#xA;--openapiv2_opt repeated_path_param_separator=ssv&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;More examples&lt;/h2&gt; &#xA;&lt;p&gt;More examples are available under the &lt;code&gt;examples&lt;/code&gt; directory.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;proto/examplepb/echo_service.proto&lt;/code&gt;, &lt;code&gt;proto/examplepb/a_bit_of_everything.proto&lt;/code&gt;, &lt;code&gt;proto/examplepb/unannotated_echo_service.proto&lt;/code&gt;: service definition &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;proto/examplepb/echo_service.pb.go&lt;/code&gt;, &lt;code&gt;proto/examplepb/a_bit_of_everything.pb.go&lt;/code&gt;, &lt;code&gt;proto/examplepb/unannotated_echo_service.pb.go&lt;/code&gt;: [generated] stub of the service&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;proto/examplepb/echo_service.pb.gw.go&lt;/code&gt;, &lt;code&gt;proto/examplepb/a_bit_of_everything.pb.gw.go&lt;/code&gt;, &lt;code&gt;proto/examplepb/uannotated_echo_service.pb.gw.go&lt;/code&gt;: [generated] reverse proxy for the service&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;proto/examplepb/unannotated_echo_service.yaml&lt;/code&gt;: gRPC API Configuration for &lt;code&gt;unannotated_echo_service.proto&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;server/main.go&lt;/code&gt;: service implementation&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;main.go&lt;/code&gt;: entrypoint of the generated reverse proxy&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To use the same port for custom HTTP handlers (e.g. serving &lt;code&gt;swagger.json&lt;/code&gt;), gRPC-Gateway, and a gRPC server, see &lt;a href=&#34;https://github.com/philips/grpc-gateway-example/raw/master/cmd/serve.go&#34;&gt;this example by CoreOS&lt;/a&gt; (and its accompanying &lt;a href=&#34;https://web.archive.org/web/20201112010739/https://coreos.com/blog/grpc-protobufs-swagger.html&#34;&gt;blog post&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/mynalabsai/grpc_gateway_media_example&#34;&gt;This example by neiro.ai&lt;/a&gt; (and its accompanying &lt;a href=&#34;https://medium.com/neiro-ai/grpc-gateway-for-media-api-by-neiro-9033caab12c8&#34;&gt;blog post&lt;/a&gt;) shows how mediafiles using &lt;code&gt;multipart/form-data&lt;/code&gt; can be integrated into rpc messages using a middleware.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;h3&gt;Supported&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Generating JSON API handlers.&lt;/li&gt; &#xA; &lt;li&gt;Method parameters in the request body.&lt;/li&gt; &#xA; &lt;li&gt;Method parameters in the request path.&lt;/li&gt; &#xA; &lt;li&gt;Method parameters in the query string.&lt;/li&gt; &#xA; &lt;li&gt;Enum fields in the path parameter (including repeated enum fields).&lt;/li&gt; &#xA; &lt;li&gt;Mapping streaming APIs to newline-delimited JSON streams.&lt;/li&gt; &#xA; &lt;li&gt;Mapping HTTP headers with &lt;code&gt;Grpc-Metadata-&lt;/code&gt; prefix to gRPC metadata (prefixed with &lt;code&gt;grpcgateway-&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Optionally emitting API definitions for &lt;a href=&#34;https://swagger.io/docs/specification/2-0/basic-structure/&#34;&gt;OpenAPI (Swagger) v2&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Setting &lt;a href=&#34;https://github.com/grpc/grpc/raw/master/doc/PROTOCOL-HTTP2.md#requests&#34;&gt;gRPC timeouts&lt;/a&gt; through inbound HTTP &lt;code&gt;Grpc-Timeout&lt;/code&gt; header.&lt;/li&gt; &#xA; &lt;li&gt;Partial support for &lt;a href=&#34;https://cloud.google.com/endpoints/docs/grpc/grpc-service-config&#34;&gt;gRPC API Configuration&lt;/a&gt; files as an alternative to annotation.&lt;/li&gt; &#xA; &lt;li&gt;Automatically translating PATCH requests into Field Mask gRPC requests. See &lt;a href=&#34;https://grpc-ecosystem.github.io/grpc-gateway/docs/mapping/patch_feature/&#34;&gt;the docs&lt;/a&gt; for more information.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;No plan to support&lt;/h3&gt; &#xA;&lt;p&gt;But patches are welcome.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Method parameters in HTTP headers.&lt;/li&gt; &#xA; &lt;li&gt;Handling trailer metadata.&lt;/li&gt; &#xA; &lt;li&gt;Encoding request/response body in XML.&lt;/li&gt; &#xA; &lt;li&gt;True bi-directional streaming.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Mapping gRPC to HTTP&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/grpc-ecosystem/grpc-gateway/raw/main/runtime/errors.go#L15&#34;&gt;How gRPC error codes map to HTTP status codes in the response&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;HTTP request source IP is added as &lt;code&gt;X-Forwarded-For&lt;/code&gt; gRPC request header.&lt;/li&gt; &#xA; &lt;li&gt;HTTP request host is added as &lt;code&gt;X-Forwarded-Host&lt;/code&gt; gRPC request header.&lt;/li&gt; &#xA; &lt;li&gt;HTTP &lt;code&gt;Authorization&lt;/code&gt; header is added as &lt;code&gt;authorization&lt;/code&gt; gRPC request header.&lt;/li&gt; &#xA; &lt;li&gt;Remaining Permanent HTTP header keys (as specified by the IANA &lt;a href=&#34;http://www.iana.org/assignments/message-headers/message-headers.xhtml&#34;&gt;here&lt;/a&gt;) are prefixed with &lt;code&gt;grpcgateway-&lt;/code&gt; and added with their values to gRPC request header.&lt;/li&gt; &#xA; &lt;li&gt;HTTP headers that start with &#39;Grpc-Metadata-&#39; are mapped to gRPC metadata (prefixed with &lt;code&gt;grpcgateway-&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;While configurable, the default {un,}marshaling uses &lt;a href=&#34;https://pkg.go.dev/google.golang.org/protobuf/encoding/protojson&#34;&gt;protojson&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;The path template used to map gRPC service methods to HTTP endpoints supports the &lt;a href=&#34;https://github.com/googleapis/googleapis/raw/master/google/api/http.proto&#34;&gt;google.api.http&lt;/a&gt; path template syntax. For example, &lt;code&gt;/api/v1/{name=projects/*/topics/*}&lt;/code&gt; or &lt;code&gt;/prefix/{path=organizations/**}&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contribution&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;http://github.com/grpc-ecosystem/grpc-gateway/blob/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;gRPC-Gateway is licensed under the BSD 3-Clause License. See &lt;a href=&#34;https://github.com/grpc-ecosystem/grpc-gateway/raw/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt; for more details.&lt;/p&gt;</summary>
  </entry>
</feed>