<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-09-30T01:28:59Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>GoogleCloudPlatform/k8s-config-connector</title>
    <updated>2023-09-30T01:28:59Z</updated>
    <id>tag:github.com,2023-09-30:/GoogleCloudPlatform/k8s-config-connector</id>
    <link href="https://github.com/GoogleCloudPlatform/k8s-config-connector" rel="alternate"></link>
    <summary type="html">&lt;p&gt;GCP Config Connector, a Kubernetes add-on for managing GCP resources&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;GCP Config Connector&lt;/h1&gt; &#xA;&lt;p&gt;Config Connector is a Kubernetes add-on that allows customers to manage GCP resources, such as Cloud Spanner or Cloud Storage, through your cluster&#39;s API.&lt;/p&gt; &#xA;&lt;p&gt;With Config Connector, now you can describe GCP resources declaratively using Kubernetes-style configuration. Config Connector will create any new GCP resources and update any existing ones to the state specified by your configuration, and continuously makes sure GCP is kept in sync. The same resource model is the basis of Istio, Knative, Kubernetes, and the Google Cloud Services Platform.&lt;/p&gt; &#xA;&lt;p&gt;As a result, developers can manage their whole application, including both its Kubernetes components as well as any GCP dependencies, using the same configuration, and more importantly &lt;strong&gt;tooling&lt;/strong&gt;. For example, the same customization or templating tool can be used to manage test vs. production versions of an application across both Kubernetes and GCP.&lt;/p&gt; &#xA;&lt;p&gt;This repository contains full Config Connector source code. This inlcudes controllers, CRDs, install bundles, and sample resource configurations.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://cloud.google.com/config-connector/docs/overview&#34;&gt;https://cloud.google.com/config-connector/docs/overview&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://cloud.google.com/config-connector/docs/concepts/installation-types&#34;&gt;Choosing an installation type&lt;/a&gt; to decide how you want to install Config Connector.&lt;/p&gt; &#xA;&lt;p&gt;For simple starter examples, see the &lt;a href=&#34;https://cloud.google.com/config-connector/docs/reference/overview&#34;&gt;Resource reference&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing to Config Connector&lt;/h2&gt; &#xA;&lt;p&gt;Please refer to our &lt;a href=&#34;https://raw.githubusercontent.com/GoogleCloudPlatform/k8s-config-connector/master/CONTRIBUTING.md&#34;&gt;contribution guide&lt;/a&gt; for more details.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>google/capslock</title>
    <updated>2023-09-30T01:28:59Z</updated>
    <id>tag:github.com,2023-09-30:/google/capslock</id>
    <link href="https://github.com/google/capslock" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/google/capslock/main/docs/capslock-banner.png&#34; alt=&#34;capslock&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Capslock is a capability analysis CLI for Go packages that informs users of which privileged operations a given package can access. This works by classifying the &lt;strong&gt;capabilities&lt;/strong&gt; of Go packages by following transitive calls to privileged standard library operations.&lt;/p&gt; &#xA;&lt;p&gt;The recent increase in supply chain attacks targeting open source software has highlighted that third party dependencies should not be inherently trusted. Capabilities indicate what permissions a package has access to, and can be used in conjunction with other security signals to indicate which code requires additional scrutiny before it can be considered trusted.&lt;/p&gt; &#xA;&lt;h2&gt;What are capabilities?&lt;/h2&gt; &#xA;&lt;p&gt;Current security analysis focuses a lot on identifying vulnerabilities in packages -- an important goal given the rate of new CVEs being identified. To complement this analysis, we are alerting on the capabilities of packages, meaning that we are identifying what permissions the package has access to via its transitive dependencies on standard library functions with privileged accesses.&lt;/p&gt; &#xA;&lt;p&gt;This has many potential applications, from identifying the purpose of packages by looking at what capabilities they use, to directing security reviews to more privileged code paths, and even alerting on unexpected capability changes to stop potential supply chain threats before they can become an issue.&lt;/p&gt; &#xA;&lt;p&gt;This is motivated by the Principle of Least Privilege -- the idea that access should be limited to the minimal set that is feasible and practical. We intend to apply this to software development to ensure that code can be scoped to the minimal set of capabilities that are required to perform its intended purpose.&lt;/p&gt; &#xA;&lt;p&gt;To learn more about the capabilities in your dependencies, install Capslock&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;go install github.com/google/capslock/cmd/capslock@latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can then invoke Capslock by running &lt;code&gt;capslock&lt;/code&gt; from the path of the packages you want to analyze.&lt;/p&gt; &#xA;&lt;h2&gt;Caveats&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/google/capslock/main/docs/caveats.md&#34;&gt;caveats&lt;/a&gt; file.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/google/capslock/main/CONTRIBUTING.md&#34;&gt;contributing&lt;/a&gt; file.&lt;/p&gt;</summary>
  </entry>
</feed>