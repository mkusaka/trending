<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-13T01:42:08Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>kelseyhightower/envconfig</title>
    <updated>2022-08-13T01:42:08Z</updated>
    <id>tag:github.com,2022-08-13:/kelseyhightower/envconfig</id>
    <link href="https://github.com/kelseyhightower/envconfig" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Golang library for managing configuration data from environment variables&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;envconfig&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/kelseyhightower/envconfig&#34;&gt;&lt;img src=&#34;https://travis-ci.org/kelseyhightower/envconfig.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Go&#34;&gt;import &#34;github.com/kelseyhightower/envconfig&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;http://godoc.org/github.com/kelseyhightower/envconfig&#34;&gt;godoc&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Set some environment variables:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Bash&#34;&gt;export MYAPP_DEBUG=false&#xA;export MYAPP_PORT=8080&#xA;export MYAPP_USER=Kelsey&#xA;export MYAPP_RATE=&#34;0.5&#34;&#xA;export MYAPP_TIMEOUT=&#34;3m&#34;&#xA;export MYAPP_USERS=&#34;rob,ken,robert&#34;&#xA;export MYAPP_COLORCODES=&#34;red:1,green:2,blue:3&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Write some code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Go&#34;&gt;package main&#xA;&#xA;import (&#xA;    &#34;fmt&#34;&#xA;    &#34;log&#34;&#xA;    &#34;time&#34;&#xA;&#xA;    &#34;github.com/kelseyhightower/envconfig&#34;&#xA;)&#xA;&#xA;type Specification struct {&#xA;    Debug       bool&#xA;    Port        int&#xA;    User        string&#xA;    Users       []string&#xA;    Rate        float32&#xA;    Timeout     time.Duration&#xA;    ColorCodes  map[string]int&#xA;}&#xA;&#xA;func main() {&#xA;    var s Specification&#xA;    err := envconfig.Process(&#34;myapp&#34;, &amp;amp;s)&#xA;    if err != nil {&#xA;        log.Fatal(err.Error())&#xA;    }&#xA;    format := &#34;Debug: %v\nPort: %d\nUser: %s\nRate: %f\nTimeout: %s\n&#34;&#xA;    _, err = fmt.Printf(format, s.Debug, s.Port, s.User, s.Rate, s.Timeout)&#xA;    if err != nil {&#xA;        log.Fatal(err.Error())&#xA;    }&#xA;&#xA;    fmt.Println(&#34;Users:&#34;)&#xA;    for _, u := range s.Users {&#xA;        fmt.Printf(&#34;  %s\n&#34;, u)&#xA;    }&#xA;&#xA;    fmt.Println(&#34;Color codes:&#34;)&#xA;    for k, v := range s.ColorCodes {&#xA;        fmt.Printf(&#34;  %s: %d\n&#34;, k, v)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Results:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Bash&#34;&gt;Debug: false&#xA;Port: 8080&#xA;User: Kelsey&#xA;Rate: 0.500000&#xA;Timeout: 3m0s&#xA;Users:&#xA;  rob&#xA;  ken&#xA;  robert&#xA;Color codes:&#xA;  red: 1&#xA;  green: 2&#xA;  blue: 3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Struct Tag Support&lt;/h2&gt; &#xA;&lt;p&gt;Envconfig supports the use of struct tags to specify alternate, default, and required environment variables.&lt;/p&gt; &#xA;&lt;p&gt;For example, consider the following struct:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Go&#34;&gt;type Specification struct {&#xA;    ManualOverride1 string `envconfig:&#34;manual_override_1&#34;`&#xA;    DefaultVar      string `default:&#34;foobar&#34;`&#xA;    RequiredVar     string `required:&#34;true&#34;`&#xA;    IgnoredVar      string `ignored:&#34;true&#34;`&#xA;    AutoSplitVar    string `split_words:&#34;true&#34;`&#xA;    RequiredAndAutoSplitVar    string `required:&#34;true&#34; split_words:&#34;true&#34;`&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Envconfig has automatic support for CamelCased struct elements when the &lt;code&gt;split_words:&#34;true&#34;&lt;/code&gt; tag is supplied. Without this tag, &lt;code&gt;AutoSplitVar&lt;/code&gt; above would look for an environment variable called &lt;code&gt;MYAPP_AUTOSPLITVAR&lt;/code&gt;. With the setting applied it will look for &lt;code&gt;MYAPP_AUTO_SPLIT_VAR&lt;/code&gt;. Note that numbers will get globbed into the previous word. If the setting does not do the right thing, you may use a manual override.&lt;/p&gt; &#xA;&lt;p&gt;Envconfig will process value for &lt;code&gt;ManualOverride1&lt;/code&gt; by populating it with the value for &lt;code&gt;MYAPP_MANUAL_OVERRIDE_1&lt;/code&gt;. Without this struct tag, it would have instead looked up &lt;code&gt;MYAPP_MANUALOVERRIDE1&lt;/code&gt;. With the &lt;code&gt;split_words:&#34;true&#34;&lt;/code&gt; tag it would have looked up &lt;code&gt;MYAPP_MANUAL_OVERRIDE1&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Bash&#34;&gt;export MYAPP_MANUAL_OVERRIDE_1=&#34;this will be the value&#34;&#xA;&#xA;# export MYAPP_MANUALOVERRIDE1=&#34;and this will not&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If envconfig can&#39;t find an environment variable value for &lt;code&gt;MYAPP_DEFAULTVAR&lt;/code&gt;, it will populate it with &#34;foobar&#34; as a default value.&lt;/p&gt; &#xA;&lt;p&gt;If envconfig can&#39;t find an environment variable value for &lt;code&gt;MYAPP_REQUIREDVAR&lt;/code&gt;, it will return an error when asked to process the struct. If &lt;code&gt;MYAPP_REQUIREDVAR&lt;/code&gt; is present but empty, envconfig will not return an error.&lt;/p&gt; &#xA;&lt;p&gt;If envconfig can&#39;t find an environment variable in the form &lt;code&gt;PREFIX_MYVAR&lt;/code&gt;, and there is a struct tag defined, it will try to populate your variable with an environment variable that directly matches the envconfig tag in your struct definition:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;export SERVICE_HOST=127.0.0.1&#xA;export MYAPP_DEBUG=true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Go&#34;&gt;type Specification struct {&#xA;    ServiceHost string `envconfig:&#34;SERVICE_HOST&#34;`&#xA;    Debug       bool&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Envconfig won&#39;t process a field with the &#34;ignored&#34; tag set to &#34;true&#34;, even if a corresponding environment variable is set.&lt;/p&gt; &#xA;&lt;h2&gt;Supported Struct Field Types&lt;/h2&gt; &#xA;&lt;p&gt;envconfig supports these struct field types:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;string&lt;/li&gt; &#xA; &lt;li&gt;int8, int16, int32, int64&lt;/li&gt; &#xA; &lt;li&gt;bool&lt;/li&gt; &#xA; &lt;li&gt;float32, float64&lt;/li&gt; &#xA; &lt;li&gt;slices of any supported type&lt;/li&gt; &#xA; &lt;li&gt;maps (keys and values of any supported type)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://golang.org/pkg/encoding/#TextUnmarshaler&#34;&gt;encoding.TextUnmarshaler&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://golang.org/pkg/encoding/#BinaryUnmarshaler&#34;&gt;encoding.BinaryUnmarshaler&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://golang.org/pkg/time/#Duration&#34;&gt;time.Duration&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Embedded structs using these fields are also supported.&lt;/p&gt; &#xA;&lt;h2&gt;Custom Decoders&lt;/h2&gt; &#xA;&lt;p&gt;Any field whose type (or pointer-to-type) implements &lt;code&gt;envconfig.Decoder&lt;/code&gt; can control its own deserialization:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Bash&#34;&gt;export DNS_SERVER=8.8.8.8&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Go&#34;&gt;type IPDecoder net.IP&#xA;&#xA;func (ipd *IPDecoder) Decode(value string) error {&#xA;    *ipd = IPDecoder(net.ParseIP(value))&#xA;    return nil&#xA;}&#xA;&#xA;type DNSConfig struct {&#xA;    Address IPDecoder `envconfig:&#34;DNS_SERVER&#34;`&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Example for decoding the environment variables into map[string][]structName type&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Bash&#34;&gt;export SMS_PROVIDER_WITH_WEIGHT= `IND=[{&#34;name&#34;:&#34;SMSProvider1&#34;,&#34;weight&#34;:70},{&#34;name&#34;:&#34;SMSProvider2&#34;,&#34;weight&#34;:30}];US=[{&#34;name&#34;:&#34;SMSProvider1&#34;,&#34;weight&#34;:100}]`&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-GO&#34;&gt;type providerDetails struct {&#xA;&#x9;Name   string&#xA;&#x9;Weight int&#xA;}&#xA;&#xA;type SMSProviderDecoder map[string][]providerDetails&#xA;&#xA;func (sd *SMSProviderDecoder) Decode(value string) error {&#xA;&#x9;smsProvider := map[string][]providerDetails{}&#xA;&#x9;pairs := strings.Split(value, &#34;;&#34;)&#xA;&#x9;for _, pair := range pairs {&#xA;&#x9;&#x9;providerdata := []providerDetails{}&#xA;&#x9;&#x9;kvpair := strings.Split(pair, &#34;=&#34;)&#xA;&#x9;&#x9;if len(kvpair) != 2 {&#xA;&#x9;&#x9;&#x9;return fmt.Errorf(&#34;invalid map item: %q&#34;, pair)&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;err := json.Unmarshal([]byte(kvpair[1]), &amp;amp;providerdata)&#xA;&#x9;&#x9;if err != nil {&#xA;&#x9;&#x9;&#x9;return fmt.Errorf(&#34;invalid map json: %w&#34;, err)&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;smsProvider[kvpair[0]] = providerdata&#xA;&#xA;&#x9;}&#xA;&#x9;*sd = SMSProviderDecoder(smsProvider)&#xA;&#x9;return nil&#xA;}&#xA;&#xA;type SMSProviderConfig struct {&#xA;    ProviderWithWeight SMSProviderDecoder `envconfig:&#34;SMS_PROVIDER_WITH_WEIGHT&#34;`&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Also, envconfig will use a &lt;code&gt;Set(string) error&lt;/code&gt; method like from the &lt;a href=&#34;https://godoc.org/flag#Value&#34;&gt;flag.Value&lt;/a&gt; interface if implemented.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>grafana/tempo</title>
    <updated>2022-08-13T01:42:08Z</updated>
    <id>tag:github.com,2022-08-13:/grafana/tempo</id>
    <link href="https://github.com/grafana/tempo" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Grafana Tempo is a high volume, minimal dependency distributed tracing backend.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/grafana/tempo/main/docs/tempo/website/logo_and_name.png&#34; alt=&#34;Tempo Logo&#34;&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/grafana/tempo/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/grafana/tempo?display_name=tag&amp;amp;sort=semver&#34; alt=&#34;Latest Release&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/license/grafana/tempo&#34; alt=&#34;License&#34;&gt; &lt;a href=&#34;https://hub.docker.com/r/grafana/tempo/tags&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/pulls/grafana/tempo&#34; alt=&#34;Docker Pulls&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://grafana.slack.com/archives/C01D981PEE5&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/join%20slack-%23tempo-brightgreen.svg?sanitize=true&#34; alt=&#34;Slack&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://community.grafana.com/c/grafana-tempo/40&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/discuss-tempo%20forum-orange.svg?sanitize=true&#34; alt=&#34;Community Forum&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/grafana/tempo&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/grafana/tempo&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/grafana/tempo/search?q=blerg&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/search/grafana/tempo/blerg&#34; alt=&#34;Blerg Counter&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;Grafana Tempo is an open source, easy-to-use and high-scale distributed tracing backend. Tempo is cost-efficient, requiring only object storage to operate, and is deeply integrated with Grafana, Prometheus, and Loki. Tempo can be used with any of the open source tracing protocols, including Jaeger, Zipkin, OpenCensus, Kafka, and OpenTelemetry. It supports key/value lookup only and is designed to work in concert with logs and metrics (exemplars) for discovery.&lt;/p&gt; &#xA;&lt;p&gt;Tempo is Jaeger, Zipkin, Kafka, OpenCensus and OpenTelemetry compatible. It ingests batches in any of the mentioned formats, buffers them and then writes them to Azure, GCS, S3 or local disk. As such it is robust, cheap and easy to operate!&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/grafana/tempo/main/docs/tempo/website/getting-started/grafana-query.png&#34; alt=&#34;Tempo Screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://grafana.com/docs/tempo/latest/&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/grafana/tempo/main/example&#34;&gt;Deployment Examples&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Deployment and log discovery Examples&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://opentracing.io/docs/overview/what-is-tracing/&#34;&gt;What is Distributed Tracing?&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Further Reading&lt;/h2&gt; &#xA;&lt;p&gt;To learn more about Tempo, consult the following documents &amp;amp; talks:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;October 2020 Launch blog post: &#34;&lt;a href=&#34;https://grafana.com/blog/2020/10/27/announcing-grafana-tempo-a-massively-scalable-distributed-tracing-system/&#34;&gt;Announcing Grafana Tempo, a massively scalable distributed tracing system&lt;/a&gt;&#34;&lt;/li&gt; &#xA; &lt;li&gt;October 2020 Motivations and tradeoffs blog post: &#34;&lt;a href=&#34;https://gouthamve.dev/tempo-a-game-of-trade-offs/&#34;&gt;Tempo: A game of trade-offs&lt;/a&gt;&#34;&lt;/li&gt; &#xA; &lt;li&gt;October 2020 Grafana ObservabilityCON Keynote Tempo announcement: &#34;&lt;a href=&#34;https://grafana.com/go/observabilitycon/keynote-what-is-observability/&#34;&gt;Keynote: What is observability?&lt;/a&gt;&#34;&lt;/li&gt; &#xA; &lt;li&gt;October 2020 Grafana ObservabilityCON Tempo Deep Dive: &#34;&lt;a href=&#34;https://grafana.com/go/observabilitycon/tracing-made-simple-with-grafana/&#34;&gt;Tracing made simple with Grafana&lt;/a&gt;&#34;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting Help&lt;/h2&gt; &#xA;&lt;p&gt;If you have any questions or feedback regarding Tempo:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Search existing thread in the Grafana Labs community forum for Tempo: &lt;a href=&#34;https://community.grafana.com/c/grafana-tempo/40&#34;&gt;https://community.grafana.com&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Ask a question on the Tempo Slack channel. To invite yourself to the Grafana Slack, visit &lt;a href=&#34;https://slack.grafana.com/&#34;&gt;https://slack.grafana.com/&lt;/a&gt; and join the #tempo channel.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/grafana/tempo/issues/new/choose&#34;&gt;File an issue&lt;/a&gt; for bugs, issues and feature suggestions.&lt;/li&gt; &#xA; &lt;li&gt;UI issues should be filed with &lt;a href=&#34;https://github.com/grafana/grafana/issues/new/choose&#34;&gt;Grafana&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;OpenTelemetry&lt;/h2&gt; &#xA;&lt;p&gt;Tempo&#39;s receiver layer, wire format and storage format are all based directly on &lt;a href=&#34;https://github.com/open-telemetry/opentelemetry-proto&#34;&gt;standards&lt;/a&gt; and &lt;a href=&#34;https://github.com/open-telemetry/opentelemetry-collector&#34;&gt;code&lt;/a&gt; established by &lt;a href=&#34;https://opentelemetry.io/&#34;&gt;OpenTelemetry&lt;/a&gt;. We support open standards at Grafana!&lt;/p&gt; &#xA;&lt;p&gt;Check out the &lt;a href=&#34;https://grafana.com/docs/tempo/latest/guides/instrumentation/&#34;&gt;Integration Guides&lt;/a&gt; to see examples of OpenTelemetry instrumentation with Tempo.&lt;/p&gt; &#xA;&lt;h2&gt;Other Components&lt;/h2&gt; &#xA;&lt;h3&gt;tempo-vulture&lt;/h3&gt; &#xA;&lt;p&gt;tempo-vulture is tempo&#39;s bird themed consistency checking tool. It pushes traces and queries Tempo. It metrics 404s and traces with missing spans.&lt;/p&gt; &#xA;&lt;h3&gt;tempo-cli&lt;/h3&gt; &#xA;&lt;p&gt;tempo-cli is the place to put any utility functionality related to tempo. See &lt;a href=&#34;https://grafana.com/docs/tempo/latest/operations/tempo_cli/&#34;&gt;Documentation&lt;/a&gt; for more info.&lt;/p&gt; &#xA;&lt;h2&gt;TempoDB&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/grafana/tempo/tree/main/tempodb&#34;&gt;TempoDB&lt;/a&gt; is included in the this repository but is meant to be a stand alone key value database built on top of cloud object storage (azure/gcs/s3). It is a natively multitenant, supports a WAL and is the storage engine for Tempo.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Grafana Tempo is distributed under &lt;a href=&#34;https://raw.githubusercontent.com/grafana/tempo/main/LICENSE&#34;&gt;AGPL-3.0-only&lt;/a&gt;. For Apache-2.0 exceptions, see &lt;a href=&#34;https://raw.githubusercontent.com/grafana/tempo/main/LICENSING.md&#34;&gt;LICENSING.md&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>emirpasic/gods</title>
    <updated>2022-08-13T01:42:08Z</updated>
    <id>tag:github.com,2022-08-13:/emirpasic/gods</id>
    <link href="https://github.com/emirpasic/gods" rel="alternate"></link>
    <summary type="html">&lt;p&gt;GoDS (Go Data Structures) - Sets, Lists, Stacks, Maps, Trees, Queues, and much more&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://godoc.org/github.com/emirpasic/gods&#34;&gt;&lt;img src=&#34;https://godoc.org/github.com/emirpasic/gods?status.svg?sanitize=true&#34; alt=&#34;GoDoc&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://circleci.com/gh/emirpasic/gods?branch=master&#34;&gt;&lt;img src=&#34;https://circleci.com/gh/emirpasic/gods/tree/master.svg?style=shield&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/emirpasic/gods&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/emirpasic/gods&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/emirpasic/gods&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/emirpasic/gods/branch/master/graph/badge.svg?sanitize=true&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://sourcegraph.com/github.com/emirpasic/gods?badge&#34;&gt;&lt;img src=&#34;https://sourcegraph.com/github.com/emirpasic/gods/-/badge.svg?sanitize=true&#34; alt=&#34;Sourcegraph&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/emirpasic/gods/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/emirpasic/gods.svg?style=flat-square&#34; alt=&#34;Release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://sonarcloud.io/summary/new_code?id=gods&#34;&gt;&lt;img src=&#34;https://sonarcloud.io/api/project_badges/measure?project=gods&amp;amp;metric=alert_status&#34; alt=&#34;Quality Gate Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/emirpasic/gods/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-BSD_2--Clause-green.svg?sanitize=true&#34; alt=&#34;PyPI&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;GoDS (Go Data Structures)&lt;/h1&gt; &#xA;&lt;p&gt;Implementation of various data structures and algorithms in Go.&lt;/p&gt; &#xA;&lt;h2&gt;Data Structures&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#containers&#34;&gt;Containers&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#lists&#34;&gt;Lists&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#arraylist&#34;&gt;ArrayList&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#singlylinkedlist&#34;&gt;SinglyLinkedList&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#doublylinkedlist&#34;&gt;DoublyLinkedList&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#sets&#34;&gt;Sets&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#hashset&#34;&gt;HashSet&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#treeset&#34;&gt;TreeSet&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#linkedhashset&#34;&gt;LinkedHashSet&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#stacks&#34;&gt;Stacks&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#linkedliststack&#34;&gt;LinkedListStack&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#arraystack&#34;&gt;ArrayStack&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#maps&#34;&gt;Maps&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#hashmap&#34;&gt;HashMap&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#treemap&#34;&gt;TreeMap&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#linkedhashmap&#34;&gt;LinkedHashMap&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#hashbidimap&#34;&gt;HashBidiMap&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#treebidimap&#34;&gt;TreeBidiMap&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#trees&#34;&gt;Trees&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#redblacktree&#34;&gt;RedBlackTree&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#avltree&#34;&gt;AVLTree&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#btree&#34;&gt;BTree&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#binaryheap&#34;&gt;BinaryHeap&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#queues&#34;&gt;Queues&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#linkedlistqueue&#34;&gt;LinkedListQueue&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#arrayqueue&#34;&gt;ArrayQueue&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#circularbuffer&#34;&gt;CircularBuffer&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#priorityqueue&#34;&gt;PriorityQueue&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#functions&#34;&gt;Functions&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#comparator&#34;&gt;Comparator&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#iterator&#34;&gt;Iterator&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#iteratorwithindex&#34;&gt;IteratorWithIndex&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#iteratorwithkey&#34;&gt;IteratorWithKey&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#reverseiteratorwithindex&#34;&gt;ReverseIteratorWithIndex&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#reverseiteratorwithkey&#34;&gt;ReverseIteratorWithKey&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#enumerable&#34;&gt;Enumerable&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#enumerablewithindex&#34;&gt;EnumerableWithIndex&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#enumerablewithkey&#34;&gt;EnumerableWithKey&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#serialization&#34;&gt;Serialization&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#jsonserializer&#34;&gt;JSONSerializer&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#jsondeserializer&#34;&gt;JSONDeserializer&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#sort&#34;&gt;Sort&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#container&#34;&gt;Container&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#appendix&#34;&gt;Appendix&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Containers&lt;/h2&gt; &#xA;&lt;p&gt;All data structures implement the container interface with the following methods:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type Container interface {&#xA;&#x9;Empty() bool&#xA;&#x9;Size() int&#xA;&#x9;Clear()&#xA;&#x9;Values() []interface{}&#xA;&#x9;String() string&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Containers are either ordered or unordered. All ordered containers provide &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#iterator&#34;&gt;stateful iterators&lt;/a&gt; and some of them allow &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#enumerable&#34;&gt;enumerable functions&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;&lt;strong&gt;Data&lt;/strong&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;&lt;strong&gt;Structure&lt;/strong&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;strong&gt;Ordered&lt;/strong&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#iterator&#34;&gt;Iterator&lt;/a&gt;&lt;/strong&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#enumerable&#34;&gt;Enumerable&lt;/a&gt;&lt;/strong&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;strong&gt;Referenced by&lt;/strong&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#lists&#34;&gt;Lists&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#arraylist&#34;&gt;ArrayList&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;yes&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;yes*&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;yes&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;index&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#singlylinkedlist&#34;&gt;SinglyLinkedList&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;yes&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;yes&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;yes&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;index&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#doublylinkedlist&#34;&gt;DoublyLinkedList&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;yes&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;yes*&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;yes&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;index&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#sets&#34;&gt;Sets&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#hashset&#34;&gt;HashSet&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;no&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;no&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;no&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;index&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#treeset&#34;&gt;TreeSet&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;yes&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;yes*&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;yes&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;index&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#linkedhashset&#34;&gt;LinkedHashSet&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;yes&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;yes*&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;yes&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;index&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#stacks&#34;&gt;Stacks&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#linkedliststack&#34;&gt;LinkedListStack&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;yes&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;yes&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;no&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;index&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#arraystack&#34;&gt;ArrayStack&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;yes&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;yes*&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;no&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;index&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#maps&#34;&gt;Maps&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#hashmap&#34;&gt;HashMap&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;no&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;no&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;no&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;key&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#treemap&#34;&gt;TreeMap&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;yes&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;yes*&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;yes&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;key&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#linkedhashmap&#34;&gt;LinkedHashMap&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;yes&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;yes*&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;yes&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;key&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#hashbidimap&#34;&gt;HashBidiMap&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;no&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;no&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;no&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;key*&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#treebidimap&#34;&gt;TreeBidiMap&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;yes&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;yes*&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;yes&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;key*&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#trees&#34;&gt;Trees&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#redblacktree&#34;&gt;RedBlackTree&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;yes&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;yes*&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;no&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;key&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#avltree&#34;&gt;AVLTree&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;yes&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;yes*&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;no&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;key&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#btree&#34;&gt;BTree&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;yes&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;yes*&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;no&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;key&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#binaryheap&#34;&gt;BinaryHeap&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;yes&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;yes*&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;no&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;index&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#queues&#34;&gt;Queues&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#linkedlistqueue&#34;&gt;LinkedListQueue&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;yes&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;yes&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;no&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;index&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#arrayqueue&#34;&gt;ArrayQueue&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;yes&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;yes*&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;no&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;index&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#circularbuffer&#34;&gt;CircularBuffer&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;yes&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;yes*&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;no&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;index&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#priorityqueue&#34;&gt;PriorityQueue&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;yes&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;yes*&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;no&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;index&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;sub&gt;&lt;sup&gt;*reversible&lt;/sup&gt;&lt;/sub&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;sub&gt;&lt;sup&gt;*bidirectional&lt;/sup&gt;&lt;/sub&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Lists&lt;/h3&gt; &#xA;&lt;p&gt;A list is a data structure that stores values and may have repeated values.&lt;/p&gt; &#xA;&lt;p&gt;Implements &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#containers&#34;&gt;Container&lt;/a&gt; interface.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type List interface {&#xA;&#x9;Get(index int) (interface{}, bool)&#xA;&#x9;Remove(index int)&#xA;&#x9;Add(values ...interface{})&#xA;&#x9;Contains(values ...interface{}) bool&#xA;&#x9;Sort(comparator utils.Comparator)&#xA;&#x9;Swap(index1, index2 int)&#xA;&#x9;Insert(index int, values ...interface{})&#xA;&#x9;Set(index int, value interface{})&#xA;&#xA;&#x9;containers.Container&#xA;&#x9;// Empty() bool&#xA;&#x9;// Size() int&#xA;&#x9;// Clear()&#xA;&#x9;// Values() []interface{}&#xA;    // String() string&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;ArrayList&lt;/h4&gt; &#xA;&lt;p&gt;A &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#lists&#34;&gt;list&lt;/a&gt; backed by a dynamic array that grows and shrinks implicitly.&lt;/p&gt; &#xA;&lt;p&gt;Implements &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#lists&#34;&gt;List&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#reverseiteratorwithindex&#34;&gt;ReverseIteratorWithIndex&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#enumerablewithindex&#34;&gt;EnumerableWithIndex&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#jsonserializer&#34;&gt;JSONSerializer&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#jsondeserializer&#34;&gt;JSONDeserializer&lt;/a&gt; interfaces.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;github.com/emirpasic/gods/lists/arraylist&#34;&#xA;&#x9;&#34;github.com/emirpasic/gods/utils&#34;&#xA;)&#xA;&#xA;func main() {&#xA;&#x9;list := arraylist.New()&#xA;&#x9;list.Add(&#34;a&#34;)                         // [&#34;a&#34;]&#xA;&#x9;list.Add(&#34;c&#34;, &#34;b&#34;)                    // [&#34;a&#34;,&#34;c&#34;,&#34;b&#34;]&#xA;&#x9;list.Sort(utils.StringComparator)     // [&#34;a&#34;,&#34;b&#34;,&#34;c&#34;]&#xA;&#x9;_, _ = list.Get(0)                    // &#34;a&#34;,true&#xA;&#x9;_, _ = list.Get(100)                  // nil,false&#xA;&#x9;_ = list.Contains(&#34;a&#34;, &#34;b&#34;, &#34;c&#34;)      // true&#xA;&#x9;_ = list.Contains(&#34;a&#34;, &#34;b&#34;, &#34;c&#34;, &#34;d&#34;) // false&#xA;&#x9;list.Swap(0, 1)                       // [&#34;b&#34;,&#34;a&#34;,c&#34;]&#xA;&#x9;list.Remove(2)                        // [&#34;b&#34;,&#34;a&#34;]&#xA;&#x9;list.Remove(1)                        // [&#34;b&#34;]&#xA;&#x9;list.Remove(0)                        // []&#xA;&#x9;list.Remove(0)                        // [] (ignored)&#xA;&#x9;_ = list.Empty()                      // true&#xA;&#x9;_ = list.Size()                       // 0&#xA;&#x9;list.Add(&#34;a&#34;)                         // [&#34;a&#34;]&#xA;&#x9;list.Clear()                          // []&#xA;&#x9;list.Insert(0, &#34;b&#34;)                   // [&#34;b&#34;]&#xA;&#x9;list.Insert(0, &#34;a&#34;)                   // [&#34;a&#34;,&#34;b&#34;]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;SinglyLinkedList&lt;/h4&gt; &#xA;&lt;p&gt;A &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#lists&#34;&gt;list&lt;/a&gt; where each element points to the next element in the list.&lt;/p&gt; &#xA;&lt;p&gt;Implements &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#lists&#34;&gt;List&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#iteratorwithindex&#34;&gt;IteratorWithIndex&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#enumerablewithindex&#34;&gt;EnumerableWithIndex&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#jsonserializer&#34;&gt;JSONSerializer&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#jsondeserializer&#34;&gt;JSONDeserializer&lt;/a&gt; interfaces.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;sll &#34;github.com/emirpasic/gods/lists/singlylinkedlist&#34;&#xA;&#x9;&#34;github.com/emirpasic/gods/utils&#34;&#xA;)&#xA;&#xA;func main() {&#xA;&#x9;list := sll.New()&#xA;&#x9;list.Add(&#34;a&#34;)                         // [&#34;a&#34;]&#xA;&#x9;list.Add(&#34;c&#34;, &#34;b&#34;)                    // [&#34;a&#34;,&#34;c&#34;,&#34;b&#34;]&#xA;&#x9;list.Sort(utils.StringComparator)     // [&#34;a&#34;,&#34;b&#34;,&#34;c&#34;]&#xA;&#x9;_, _ = list.Get(0)                    // &#34;a&#34;,true&#xA;&#x9;_, _ = list.Get(100)                  // nil,false&#xA;&#x9;_ = list.Contains(&#34;a&#34;, &#34;b&#34;, &#34;c&#34;)      // true&#xA;&#x9;_ = list.Contains(&#34;a&#34;, &#34;b&#34;, &#34;c&#34;, &#34;d&#34;) // false&#xA;&#x9;list.Swap(0, 1)                       // [&#34;b&#34;,&#34;a&#34;,c&#34;]&#xA;&#x9;list.Remove(2)                        // [&#34;b&#34;,&#34;a&#34;]&#xA;&#x9;list.Remove(1)                        // [&#34;b&#34;]&#xA;&#x9;list.Remove(0)                        // []&#xA;&#x9;list.Remove(0)                        // [] (ignored)&#xA;&#x9;_ = list.Empty()                      // true&#xA;&#x9;_ = list.Size()                       // 0&#xA;&#x9;list.Add(&#34;a&#34;)                         // [&#34;a&#34;]&#xA;&#x9;list.Clear()                          // []&#xA;&#x9;list.Insert(0, &#34;b&#34;)                   // [&#34;b&#34;]&#xA;&#x9;list.Insert(0, &#34;a&#34;)                   // [&#34;a&#34;,&#34;b&#34;]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;DoublyLinkedList&lt;/h4&gt; &#xA;&lt;p&gt;A &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#lists&#34;&gt;list&lt;/a&gt; where each element points to the next and previous elements in the list.&lt;/p&gt; &#xA;&lt;p&gt;Implements &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#lists&#34;&gt;List&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#reverseiteratorwithindex&#34;&gt;ReverseIteratorWithIndex&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#enumerablewithindex&#34;&gt;EnumerableWithIndex&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#jsonserializer&#34;&gt;JSONSerializer&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#jsondeserializer&#34;&gt;JSONDeserializer&lt;/a&gt; interfaces.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;dll &#34;github.com/emirpasic/gods/lists/doublylinkedlist&#34;&#xA;&#x9;&#34;github.com/emirpasic/gods/utils&#34;&#xA;)&#xA;&#xA;func main() {&#xA;&#x9;list := dll.New()&#xA;&#x9;list.Add(&#34;a&#34;)                         // [&#34;a&#34;]&#xA;&#x9;list.Add(&#34;c&#34;, &#34;b&#34;)                    // [&#34;a&#34;,&#34;c&#34;,&#34;b&#34;]&#xA;&#x9;list.Sort(utils.StringComparator)     // [&#34;a&#34;,&#34;b&#34;,&#34;c&#34;]&#xA;&#x9;_, _ = list.Get(0)                    // &#34;a&#34;,true&#xA;&#x9;_, _ = list.Get(100)                  // nil,false&#xA;&#x9;_ = list.Contains(&#34;a&#34;, &#34;b&#34;, &#34;c&#34;)      // true&#xA;&#x9;_ = list.Contains(&#34;a&#34;, &#34;b&#34;, &#34;c&#34;, &#34;d&#34;) // false&#xA;&#x9;list.Swap(0, 1)                       // [&#34;b&#34;,&#34;a&#34;,c&#34;]&#xA;&#x9;list.Remove(2)                        // [&#34;b&#34;,&#34;a&#34;]&#xA;&#x9;list.Remove(1)                        // [&#34;b&#34;]&#xA;&#x9;list.Remove(0)                        // []&#xA;&#x9;list.Remove(0)                        // [] (ignored)&#xA;&#x9;_ = list.Empty()                      // true&#xA;&#x9;_ = list.Size()                       // 0&#xA;&#x9;list.Add(&#34;a&#34;)                         // [&#34;a&#34;]&#xA;&#x9;list.Clear()                          // []&#xA;&#x9;list.Insert(0, &#34;b&#34;)                   // [&#34;b&#34;]&#xA;&#x9;list.Insert(0, &#34;a&#34;)                   // [&#34;a&#34;,&#34;b&#34;]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Sets&lt;/h3&gt; &#xA;&lt;p&gt;A set is a data structure that can store elements and has no repeated values. It is a computer implementation of the mathematical concept of a finite set. Unlike most other collection types, rather than retrieving a specific element from a set, one typically tests an element for membership in a set. This structure is often used to ensure that no duplicates are present in a container.&lt;/p&gt; &#xA;&lt;p&gt;Set additionally allow set operations such as &lt;a href=&#34;https://en.wikipedia.org/wiki/Intersection_(set_theory)&#34;&gt;intersection&lt;/a&gt;, &lt;a href=&#34;https://en.wikipedia.org/wiki/Union_(set_theory)&#34;&gt;union&lt;/a&gt;, &lt;a href=&#34;https://proofwiki.org/wiki/Definition:Set_Difference&#34;&gt;difference&lt;/a&gt;, etc.&lt;/p&gt; &#xA;&lt;p&gt;Implements &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#containers&#34;&gt;Container&lt;/a&gt; interface.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type Set interface {&#xA;&#x9;Add(elements ...interface{})&#xA;&#x9;Remove(elements ...interface{})&#xA;&#x9;Contains(elements ...interface{}) bool&#xA;    // Intersection(another *Set) *Set&#xA;    // Union(another *Set) *Set&#xA;    // Difference(another *Set) *Set&#xA;&#x9;&#xA;&#x9;containers.Container&#xA;&#x9;// Empty() bool&#xA;&#x9;// Size() int&#xA;&#x9;// Clear()&#xA;&#x9;// Values() []interface{}&#xA;&#x9;// String() string&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;HashSet&lt;/h4&gt; &#xA;&lt;p&gt;A &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#sets&#34;&gt;set&lt;/a&gt; backed by a hash table (actually a Go&#39;s map). It makes no guarantees as to the iteration order of the set.&lt;/p&gt; &#xA;&lt;p&gt;Implements &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#sets&#34;&gt;Set&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#jsonserializer&#34;&gt;JSONSerializer&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#jsondeserializer&#34;&gt;JSONDeserializer&lt;/a&gt; interfaces.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import &#34;github.com/emirpasic/gods/sets/hashset&#34;&#xA;&#xA;func main() {&#xA;&#x9;set := hashset.New()   // empty&#xA;&#x9;set.Add(1)             // 1&#xA;&#x9;set.Add(2, 2, 3, 4, 5) // 3, 1, 2, 4, 5 (random order, duplicates ignored)&#xA;&#x9;set.Remove(4)          // 5, 3, 2, 1 (random order)&#xA;&#x9;set.Remove(2, 3)       // 1, 5 (random order)&#xA;&#x9;set.Contains(1)        // true&#xA;&#x9;set.Contains(1, 5)     // true&#xA;&#x9;set.Contains(1, 6)     // false&#xA;&#x9;_ = set.Values()       // []int{5,1} (random order)&#xA;&#x9;set.Clear()            // empty&#xA;&#x9;set.Empty()            // true&#xA;&#x9;set.Size()             // 0&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;TreeSet&lt;/h4&gt; &#xA;&lt;p&gt;A &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#sets&#34;&gt;set&lt;/a&gt; backed by a &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#redblacktree&#34;&gt;red-black tree&lt;/a&gt; to keep the elements ordered with respect to the &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#comparator&#34;&gt;comparator&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Implements &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#sets&#34;&gt;Set&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#reverseiteratorwithindex&#34;&gt;ReverseIteratorWithIndex&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#enumerablewithindex&#34;&gt;EnumerableWithIndex&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#jsonserializer&#34;&gt;JSONSerializer&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#jsondeserializer&#34;&gt;JSONDeserializer&lt;/a&gt; interfaces.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import &#34;github.com/emirpasic/gods/sets/treeset&#34;&#xA;&#xA;func main() {&#xA;&#x9;set := treeset.NewWithIntComparator() // empty (keys are of type int)&#xA;&#x9;set.Add(1)                            // 1&#xA;&#x9;set.Add(2, 2, 3, 4, 5)                // 1, 2, 3, 4, 5 (in order, duplicates ignored)&#xA;&#x9;set.Remove(4)                         // 1, 2, 3, 5 (in order)&#xA;&#x9;set.Remove(2, 3)                      // 1, 5 (in order)&#xA;&#x9;set.Contains(1)                       // true&#xA;&#x9;set.Contains(1, 5)                    // true&#xA;&#x9;set.Contains(1, 6)                    // false&#xA;&#x9;_ = set.Values()                      // []int{1,5} (in order)&#xA;&#x9;set.Clear()                           // empty&#xA;&#x9;set.Empty()                           // true&#xA;&#x9;set.Size()                            // 0&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;LinkedHashSet&lt;/h4&gt; &#xA;&lt;p&gt;A &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#sets&#34;&gt;set&lt;/a&gt; that preserves insertion-order. Data structure is backed by a hash table to store values and &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#doublylinkedlist&#34;&gt;doubly-linked list&lt;/a&gt; to store insertion ordering.&lt;/p&gt; &#xA;&lt;p&gt;Implements &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#sets&#34;&gt;Set&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#reverseiteratorwithindex&#34;&gt;ReverseIteratorWithIndex&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#enumerablewithindex&#34;&gt;EnumerableWithIndex&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#jsonserializer&#34;&gt;JSONSerializer&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#jsondeserializer&#34;&gt;JSONDeserializer&lt;/a&gt; interfaces.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import &#34;github.com/emirpasic/gods/sets/linkedhashset&#34;&#xA;&#xA;func main() {&#xA;&#x9;set := linkedhashset.New() // empty&#xA;&#x9;set.Add(5)                 // 5&#xA;&#x9;set.Add(4, 4, 3, 2, 1)     // 5, 4, 3, 2, 1 (in insertion-order, duplicates ignored)&#xA;&#x9;set.Add(4)                 // 5, 4, 3, 2, 1 (duplicates ignored, insertion-order unchanged)&#xA;&#x9;set.Remove(4)              // 5, 3, 2, 1 (in insertion-order)&#xA;&#x9;set.Remove(2, 3)           // 5, 1 (in insertion-order)&#xA;&#x9;set.Contains(1)            // true&#xA;&#x9;set.Contains(1, 5)         // true&#xA;&#x9;set.Contains(1, 6)         // false&#xA;&#x9;_ = set.Values()           // []int{5, 1} (in insertion-order)&#xA;&#x9;set.Clear()                // empty&#xA;&#x9;set.Empty()                // true&#xA;&#x9;set.Size()                 // 0&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Stacks&lt;/h3&gt; &#xA;&lt;p&gt;A stack that represents a last-in-first-out (LIFO) data structure. The usual push and pop operations are provided, as well as a method to peek at the top item on the stack.&lt;/p&gt; &#xA;&lt;p&gt;Implements &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#containers&#34;&gt;Container&lt;/a&gt; interface.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type Stack interface {&#xA;&#x9;Push(value interface{})&#xA;&#x9;Pop() (value interface{}, ok bool)&#xA;&#x9;Peek() (value interface{}, ok bool)&#xA;&#xA;&#x9;containers.Container&#xA;&#x9;// Empty() bool&#xA;&#x9;// Size() int&#xA;&#x9;// Clear()&#xA;&#x9;// Values() []interface{}&#xA;&#x9;// String() string&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;LinkedListStack&lt;/h4&gt; &#xA;&lt;p&gt;A &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#stacks&#34;&gt;stack&lt;/a&gt; based on a &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#singlylinkedlist&#34;&gt;linked list&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Implements &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#stacks&#34;&gt;Stack&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#iteratorwithindex&#34;&gt;IteratorWithIndex&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#jsonserializer&#34;&gt;JSONSerializer&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#jsondeserializer&#34;&gt;JSONDeserializer&lt;/a&gt; interfaces.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import lls &#34;github.com/emirpasic/gods/stacks/linkedliststack&#34;&#xA;&#xA;func main() {&#xA;&#x9;stack := lls.New()  // empty&#xA;&#x9;stack.Push(1)       // 1&#xA;&#x9;stack.Push(2)       // 1, 2&#xA;&#x9;stack.Values()      // 2, 1 (LIFO order)&#xA;&#x9;_, _ = stack.Peek() // 2,true&#xA;&#x9;_, _ = stack.Pop()  // 2, true&#xA;&#x9;_, _ = stack.Pop()  // 1, true&#xA;&#x9;_, _ = stack.Pop()  // nil, false (nothing to pop)&#xA;&#x9;stack.Push(1)       // 1&#xA;&#x9;stack.Clear()       // empty&#xA;&#x9;stack.Empty()       // true&#xA;&#x9;stack.Size()        // 0&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;ArrayStack&lt;/h4&gt; &#xA;&lt;p&gt;A &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#stacks&#34;&gt;stack&lt;/a&gt; based on a &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#arraylist&#34;&gt;array list&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Implements &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#stacks&#34;&gt;Stack&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#iteratorwithindex&#34;&gt;IteratorWithIndex&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#jsonserializer&#34;&gt;JSONSerializer&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#jsondeserializer&#34;&gt;JSONDeserializer&lt;/a&gt; interfaces.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import &#34;github.com/emirpasic/gods/stacks/arraystack&#34;&#xA;&#xA;func main() {&#xA;&#x9;stack := arraystack.New() // empty&#xA;&#x9;stack.Push(1)             // 1&#xA;&#x9;stack.Push(2)             // 1, 2&#xA;&#x9;stack.Values()            // 2, 1 (LIFO order)&#xA;&#x9;_, _ = stack.Peek()       // 2,true&#xA;&#x9;_, _ = stack.Pop()        // 2, true&#xA;&#x9;_, _ = stack.Pop()        // 1, true&#xA;&#x9;_, _ = stack.Pop()        // nil, false (nothing to pop)&#xA;&#x9;stack.Push(1)             // 1&#xA;&#x9;stack.Clear()             // empty&#xA;&#x9;stack.Empty()             // true&#xA;&#x9;stack.Size()              // 0&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Maps&lt;/h3&gt; &#xA;&lt;p&gt;A Map is a data structure that maps keys to values. A map cannot contain duplicate keys and each key can map to at most one value.&lt;/p&gt; &#xA;&lt;p&gt;Implements &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#containers&#34;&gt;Container&lt;/a&gt; interface.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type Map interface {&#xA;&#x9;Put(key interface{}, value interface{})&#xA;&#x9;Get(key interface{}) (value interface{}, found bool)&#xA;&#x9;Remove(key interface{})&#xA;&#x9;Keys() []interface{}&#xA;&#xA;&#x9;containers.Container&#xA;&#x9;// Empty() bool&#xA;&#x9;// Size() int&#xA;&#x9;// Clear()&#xA;&#x9;// Values() []interface{}&#xA;&#x9;// String() string&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A BidiMap is an extension to the Map. A bidirectional map (BidiMap), also called a hash bag, is an associative data structure in which the key-value pairs form a one-to-one relation. This relation works in both directions by allow the value to also act as a key to key, e.g. a pair (a,b) thus provides a coupling between &#39;a&#39; and &#39;b&#39; so that &#39;b&#39; can be found when &#39;a&#39; is used as a key and &#39;a&#39; can be found when &#39;b&#39; is used as a key.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type BidiMap interface {&#xA;&#x9;GetKey(value interface{}) (key interface{}, found bool)&#xA;&#xA;&#x9;Map&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;HashMap&lt;/h4&gt; &#xA;&lt;p&gt;A &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#maps&#34;&gt;map&lt;/a&gt; based on hash tables. Keys are unordered.&lt;/p&gt; &#xA;&lt;p&gt;Implements &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#maps&#34;&gt;Map&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#jsonserializer&#34;&gt;JSONSerializer&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#jsondeserializer&#34;&gt;JSONDeserializer&lt;/a&gt; interfaces.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import &#34;github.com/emirpasic/gods/maps/hashmap&#34;&#xA;&#xA;func main() {&#xA;&#x9;m := hashmap.New() // empty&#xA;&#x9;m.Put(1, &#34;x&#34;)      // 1-&amp;gt;x&#xA;&#x9;m.Put(2, &#34;b&#34;)      // 2-&amp;gt;b, 1-&amp;gt;x (random order)&#xA;&#x9;m.Put(1, &#34;a&#34;)      // 2-&amp;gt;b, 1-&amp;gt;a (random order)&#xA;&#x9;_, _ = m.Get(2)    // b, true&#xA;&#x9;_, _ = m.Get(3)    // nil, false&#xA;&#x9;_ = m.Values()     // []interface {}{&#34;b&#34;, &#34;a&#34;} (random order)&#xA;&#x9;_ = m.Keys()       // []interface {}{1, 2} (random order)&#xA;&#x9;m.Remove(1)        // 2-&amp;gt;b&#xA;&#x9;m.Clear()          // empty&#xA;&#x9;m.Empty()          // true&#xA;&#x9;m.Size()           // 0&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;TreeMap&lt;/h4&gt; &#xA;&lt;p&gt;A &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#maps&#34;&gt;map&lt;/a&gt; based on &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#redblacktree&#34;&gt;red-black tree&lt;/a&gt;. Keys are ordered with respect to the &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#comparator&#34;&gt;comparator&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Implements &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#maps&#34;&gt;Map&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#reverseiteratorwithindex&#34;&gt;ReverseIteratorWithIndex&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#enumerablewithkey&#34;&gt;EnumerableWithKey&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#jsonserializer&#34;&gt;JSONSerializer&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#jsondeserializer&#34;&gt;JSONDeserializer&lt;/a&gt; interfaces.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import &#34;github.com/emirpasic/gods/maps/treemap&#34;&#xA;&#xA;func main() {&#xA;&#x9;m := treemap.NewWithIntComparator() // empty (keys are of type int)&#xA;&#x9;m.Put(1, &#34;x&#34;)                       // 1-&amp;gt;x&#xA;&#x9;m.Put(2, &#34;b&#34;)                       // 1-&amp;gt;x, 2-&amp;gt;b (in order)&#xA;&#x9;m.Put(1, &#34;a&#34;)                       // 1-&amp;gt;a, 2-&amp;gt;b (in order)&#xA;&#x9;_, _ = m.Get(2)                     // b, true&#xA;&#x9;_, _ = m.Get(3)                     // nil, false&#xA;&#x9;_ = m.Values()                      // []interface {}{&#34;a&#34;, &#34;b&#34;} (in order)&#xA;&#x9;_ = m.Keys()                        // []interface {}{1, 2} (in order)&#xA;&#x9;m.Remove(1)                         // 2-&amp;gt;b&#xA;&#x9;m.Clear()                           // empty&#xA;&#x9;m.Empty()                           // true&#xA;&#x9;m.Size()                            // 0&#xA;&#xA;&#x9;// Other:&#xA;&#x9;m.Min() // Returns the minimum key and its value from map.&#xA;&#x9;m.Max() // Returns the maximum key and its value from map.&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;LinkedHashMap&lt;/h4&gt; &#xA;&lt;p&gt;A &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#maps&#34;&gt;map&lt;/a&gt; that preserves insertion-order. It is backed by a hash table to store values and &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/doublylinkedlist&#34;&gt;doubly-linked list&lt;/a&gt; to store ordering.&lt;/p&gt; &#xA;&lt;p&gt;Implements &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#maps&#34;&gt;Map&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#reverseiteratorwithindex&#34;&gt;ReverseIteratorWithIndex&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#enumerablewithkey&#34;&gt;EnumerableWithKey&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#jsonserializer&#34;&gt;JSONSerializer&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#jsondeserializer&#34;&gt;JSONDeserializer&lt;/a&gt; interfaces.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import &#34;github.com/emirpasic/gods/maps/linkedhashmap&#34;&#xA;&#xA;func main() {&#xA;&#x9;m := linkedhashmap.New() // empty (keys are of type int)&#xA;&#x9;m.Put(2, &#34;b&#34;)            // 2-&amp;gt;b&#xA;&#x9;m.Put(1, &#34;x&#34;)            // 2-&amp;gt;b, 1-&amp;gt;x (insertion-order)&#xA;&#x9;m.Put(1, &#34;a&#34;)            // 2-&amp;gt;b, 1-&amp;gt;a (insertion-order)&#xA;&#x9;_, _ = m.Get(2)          // b, true&#xA;&#x9;_, _ = m.Get(3)          // nil, false&#xA;&#x9;_ = m.Values()           // []interface {}{&#34;b&#34;, &#34;a&#34;} (insertion-order)&#xA;&#x9;_ = m.Keys()             // []interface {}{2, 1} (insertion-order)&#xA;&#x9;m.Remove(1)              // 2-&amp;gt;b&#xA;&#x9;m.Clear()                // empty&#xA;&#x9;m.Empty()                // true&#xA;&#x9;m.Size()                 // 0&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;HashBidiMap&lt;/h4&gt; &#xA;&lt;p&gt;A &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#maps&#34;&gt;map&lt;/a&gt; based on two hashmaps. Keys are unordered.&lt;/p&gt; &#xA;&lt;p&gt;Implements &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#maps&#34;&gt;BidiMap&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#jsonserializer&#34;&gt;JSONSerializer&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#jsondeserializer&#34;&gt;JSONDeserializer&lt;/a&gt; interfaces.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import &#34;github.com/emirpasic/gods/maps/hashbidimap&#34;&#xA;&#xA;func main() {&#xA;&#x9;m := hashbidimap.New() // empty&#xA;&#x9;m.Put(1, &#34;x&#34;)          // 1-&amp;gt;x&#xA;&#x9;m.Put(3, &#34;b&#34;)          // 1-&amp;gt;x, 3-&amp;gt;b (random order)&#xA;&#x9;m.Put(1, &#34;a&#34;)          // 1-&amp;gt;a, 3-&amp;gt;b (random order)&#xA;&#x9;m.Put(2, &#34;b&#34;)          // 1-&amp;gt;a, 2-&amp;gt;b (random order)&#xA;&#x9;_, _ = m.GetKey(&#34;a&#34;)   // 1, true&#xA;&#x9;_, _ = m.Get(2)        // b, true&#xA;&#x9;_, _ = m.Get(3)        // nil, false&#xA;&#x9;_ = m.Values()         // []interface {}{&#34;a&#34;, &#34;b&#34;} (random order)&#xA;&#x9;_ = m.Keys()           // []interface {}{1, 2} (random order)&#xA;&#x9;m.Remove(1)            // 2-&amp;gt;b&#xA;&#x9;m.Clear()              // empty&#xA;&#x9;m.Empty()              // true&#xA;&#x9;m.Size()               // 0&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;TreeBidiMap&lt;/h4&gt; &#xA;&lt;p&gt;A &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#maps&#34;&gt;map&lt;/a&gt; based on red-black tree. This map guarantees that the map will be in both ascending key and value order. Other than key and value ordering, the goal with this structure is to avoid duplication of elements (unlike in &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#hashbidimap&#34;&gt;HashBidiMap&lt;/a&gt;), which can be significant if contained elements are large.&lt;/p&gt; &#xA;&lt;p&gt;Implements &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#maps&#34;&gt;BidiMap&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#reverseiteratorwithindex&#34;&gt;ReverseIteratorWithIndex&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#enumerablewithkey&#34;&gt;EnumerableWithKey&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#jsonserializer&#34;&gt;JSONSerializer&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#jsondeserializer&#34;&gt;JSONDeserializer&lt;/a&gt; interfaces.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;github.com/emirpasic/gods/maps/treebidimap&#34;&#xA;&#x9;&#34;github.com/emirpasic/gods/utils&#34;&#xA;)&#xA;&#xA;func main() {&#xA;&#x9;m := treebidimap.NewWith(utils.IntComparator, utils.StringComparator)&#xA;&#x9;m.Put(1, &#34;x&#34;)        // 1-&amp;gt;x&#xA;&#x9;m.Put(3, &#34;b&#34;)        // 1-&amp;gt;x, 3-&amp;gt;b (ordered)&#xA;&#x9;m.Put(1, &#34;a&#34;)        // 1-&amp;gt;a, 3-&amp;gt;b (ordered)&#xA;&#x9;m.Put(2, &#34;b&#34;)        // 1-&amp;gt;a, 2-&amp;gt;b (ordered)&#xA;&#x9;_, _ = m.GetKey(&#34;a&#34;) // 1, true&#xA;&#x9;_, _ = m.Get(2)      // b, true&#xA;&#x9;_, _ = m.Get(3)      // nil, false&#xA;&#x9;_ = m.Values()       // []interface {}{&#34;a&#34;, &#34;b&#34;} (ordered)&#xA;&#x9;_ = m.Keys()         // []interface {}{1, 2} (ordered)&#xA;&#x9;m.Remove(1)          // 2-&amp;gt;b&#xA;&#x9;m.Clear()            // empty&#xA;&#x9;m.Empty()            // true&#xA;&#x9;m.Size()             // 0&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Trees&lt;/h3&gt; &#xA;&lt;p&gt;A tree is a widely used data data structure that simulates a hierarchical tree structure, with a root value and subtrees of children, represented as a set of linked nodes; thus no cyclic links.&lt;/p&gt; &#xA;&lt;p&gt;Implements &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#containers&#34;&gt;Container&lt;/a&gt; interface.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type Tree interface {&#xA;&#x9;containers.Container&#xA;&#x9;// Empty() bool&#xA;&#x9;// Size() int&#xA;&#x9;// Clear()&#xA;&#x9;// Values() []interface{}&#xA;&#x9;// String() string&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;RedBlackTree&lt;/h4&gt; &#xA;&lt;p&gt;A red–black &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#trees&#34;&gt;tree&lt;/a&gt; is a binary search tree with an extra bit of data per node, its color, which can be either red or black. The extra bit of storage ensures an approximately balanced tree by constraining how nodes are colored from any path from the root to the leaf. Thus, it is a data structure which is a type of self-balancing binary search tree.&lt;/p&gt; &#xA;&lt;p&gt;The balancing of the tree is not perfect but it is good enough to allow it to guarantee searching in O(log n) time, where n is the total number of elements in the tree. The insertion and deletion operations, along with the tree rearrangement and recoloring, are also performed in O(log n) time. &lt;sub&gt;&lt;sup&gt;&lt;a href=&#34;http://en.wikipedia.org/wiki/Red%E2%80%93black_tree&#34;&gt;Wikipedia&lt;/a&gt;&lt;/sup&gt;&lt;/sub&gt;&lt;/p&gt; &#xA;&lt;p&gt;Implements &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#trees&#34;&gt;Tree&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#reverseiteratorwithkey&#34;&gt;ReverseIteratorWithKey&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#jsonserializer&#34;&gt;JSONSerializer&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#jsondeserializer&#34;&gt;JSONDeserializer&lt;/a&gt; interfaces.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;http://upload.wikimedia.org/wikipedia/commons/thumb/6/66/Red-black_tree_example.svg/500px-Red-black_tree_example.svg.png&#34; width=&#34;400px&#34; height=&#34;200px&#34;&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;fmt&#34;&#xA;&#x9;rbt &#34;github.com/emirpasic/gods/trees/redblacktree&#34;&#xA;)&#xA;&#xA;func main() {&#xA;&#x9;tree := rbt.NewWithIntComparator() // empty (keys are of type int)&#xA;&#xA;&#x9;tree.Put(1, &#34;x&#34;) // 1-&amp;gt;x&#xA;&#x9;tree.Put(2, &#34;b&#34;) // 1-&amp;gt;x, 2-&amp;gt;b (in order)&#xA;&#x9;tree.Put(1, &#34;a&#34;) // 1-&amp;gt;a, 2-&amp;gt;b (in order, replacement)&#xA;&#x9;tree.Put(3, &#34;c&#34;) // 1-&amp;gt;a, 2-&amp;gt;b, 3-&amp;gt;c (in order)&#xA;&#x9;tree.Put(4, &#34;d&#34;) // 1-&amp;gt;a, 2-&amp;gt;b, 3-&amp;gt;c, 4-&amp;gt;d (in order)&#xA;&#x9;tree.Put(5, &#34;e&#34;) // 1-&amp;gt;a, 2-&amp;gt;b, 3-&amp;gt;c, 4-&amp;gt;d, 5-&amp;gt;e (in order)&#xA;&#x9;tree.Put(6, &#34;f&#34;) // 1-&amp;gt;a, 2-&amp;gt;b, 3-&amp;gt;c, 4-&amp;gt;d, 5-&amp;gt;e, 6-&amp;gt;f (in order)&#xA;&#xA;&#x9;fmt.Println(tree)&#xA;&#x9;//&#xA;&#x9;//  RedBlackTree&#xA;&#x9;//  │           ┌── 6&#xA;&#x9;//&#x9;│       ┌── 5&#xA;&#x9;//&#x9;│   ┌── 4&#xA;&#x9;//&#x9;│   │   └── 3&#xA;&#x9;//&#x9;└── 2&#xA;&#x9;//&#x9;&#x9;└── 1&#xA;&#xA;&#x9;_ = tree.Values() // []interface {}{&#34;a&#34;, &#34;b&#34;, &#34;c&#34;, &#34;d&#34;, &#34;e&#34;, &#34;f&#34;} (in order)&#xA;&#x9;_ = tree.Keys()   // []interface {}{1, 2, 3, 4, 5, 6} (in order)&#xA;&#xA;&#x9;tree.Remove(2) // 1-&amp;gt;a, 3-&amp;gt;c, 4-&amp;gt;d, 5-&amp;gt;e, 6-&amp;gt;f (in order)&#xA;&#x9;fmt.Println(tree)&#xA;&#x9;//&#xA;&#x9;//  RedBlackTree&#xA;&#x9;//  │       ┌── 6&#xA;&#x9;//  │   ┌── 5&#xA;&#x9;//  └── 4&#xA;&#x9;//      │   ┌── 3&#xA;&#x9;//      └── 1&#xA;&#xA;&#x9;tree.Clear() // empty&#xA;&#x9;tree.Empty() // true&#xA;&#x9;tree.Size()  // 0&#xA;&#xA;&#x9;// Other:&#xA;&#x9;tree.Left() // gets the left-most (min) node&#xA;&#x9;tree.Right() // get the right-most (max) node&#xA;&#x9;tree.Floor(1) // get the floor node&#xA;&#x9;tree.Ceiling(1) // get the ceiling node&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Extending the red-black tree&#39;s functionality has been demonstrated in the following &lt;a href=&#34;https://github.com/emirpasic/gods/raw/master/examples/redblacktreeextended/redblacktreeextended.go&#34;&gt;example&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;AVLTree&lt;/h4&gt; &#xA;&lt;p&gt;AVL &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#trees&#34;&gt;tree&lt;/a&gt; is a self-balancing binary search tree. In an AVL tree, the heights of the two child subtrees of any node differ by at most one; if at any time they differ by more than one, rebalancing is done to restore this property. Lookup, insertion, and deletion all take O(log n) time in both the average and worst cases, where n is the number of nodes in the tree prior to the operation. Insertions and deletions may require the tree to be rebalanced by one or more tree rotations.&lt;/p&gt; &#xA;&lt;p&gt;AVL trees are often compared with red–black trees because both support the same set of operations and take O(log n) time for the basic operations. For lookup-intensive applications, AVL trees are faster than red–black trees because they are more strictly balanced. &lt;sub&gt;&lt;sup&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/AVL_tree&#34;&gt;Wikipedia&lt;/a&gt;&lt;/sup&gt;&lt;/sub&gt;&lt;/p&gt; &#xA;&lt;p&gt;Implements &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#trees&#34;&gt;Tree&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#reverseiteratorwithkey&#34;&gt;ReverseIteratorWithKey&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#jsonserializer&#34;&gt;JSONSerializer&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#jsondeserializer&#34;&gt;JSONDeserializer&lt;/a&gt; interfaces.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://upload.wikimedia.org/wikipedia/commons/thumb/a/ad/AVL-tree-wBalance_K.svg/262px-AVL-tree-wBalance_K.svg.png&#34; width=&#34;300px&#34; height=&#34;180px&#34;&gt;&lt;br&gt;&lt;sub&gt;AVL tree with balance factors (green)&lt;/sub&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;fmt&#34;&#xA;&#x9;avl &#34;github.com/emirpasic/gods/trees/avltree&#34;&#xA;)&#xA;&#xA;func main() {&#xA;&#x9;tree := avl.NewWithIntComparator() // empty(keys are of type int)&#xA;&#xA;&#x9;tree.Put(1, &#34;x&#34;) // 1-&amp;gt;x&#xA;&#x9;tree.Put(2, &#34;b&#34;) // 1-&amp;gt;x, 2-&amp;gt;b (in order)&#xA;&#x9;tree.Put(1, &#34;a&#34;) // 1-&amp;gt;a, 2-&amp;gt;b (in order, replacement)&#xA;&#x9;tree.Put(3, &#34;c&#34;) // 1-&amp;gt;a, 2-&amp;gt;b, 3-&amp;gt;c (in order)&#xA;&#x9;tree.Put(4, &#34;d&#34;) // 1-&amp;gt;a, 2-&amp;gt;b, 3-&amp;gt;c, 4-&amp;gt;d (in order)&#xA;&#x9;tree.Put(5, &#34;e&#34;) // 1-&amp;gt;a, 2-&amp;gt;b, 3-&amp;gt;c, 4-&amp;gt;d, 5-&amp;gt;e (in order)&#xA;&#x9;tree.Put(6, &#34;f&#34;) // 1-&amp;gt;a, 2-&amp;gt;b, 3-&amp;gt;c, 4-&amp;gt;d, 5-&amp;gt;e, 6-&amp;gt;f (in order)&#xA;&#xA;&#x9;fmt.Println(tree)&#xA;&#x9;//&#xA;&#x9;//  AVLTree&#xA;&#x9;//  │       ┌── 6&#xA;&#x9;//  │   ┌── 5&#xA;&#x9;//  └── 4&#xA;&#x9;//      │   ┌── 3&#xA;&#x9;//      └── 2&#xA;&#x9;//          └── 1&#xA;&#xA;&#xA;&#x9;_ = tree.Values() // []interface {}{&#34;a&#34;, &#34;b&#34;, &#34;c&#34;, &#34;d&#34;, &#34;e&#34;, &#34;f&#34;} (in order)&#xA;&#x9;_ = tree.Keys()   // []interface {}{1, 2, 3, 4, 5, 6} (in order)&#xA;&#xA;&#x9;tree.Remove(2) // 1-&amp;gt;a, 3-&amp;gt;c, 4-&amp;gt;d, 5-&amp;gt;e, 6-&amp;gt;f (in order)&#xA;&#x9;fmt.Println(tree)&#xA;&#x9;//&#xA;&#x9;//  AVLTree&#xA;&#x9;//  │       ┌── 6&#xA;&#x9;//  │   ┌── 5&#xA;&#x9;//  └── 4&#xA;&#x9;//      └── 3&#xA;&#x9;//          └── 1&#xA;&#xA;&#x9;tree.Clear() // empty&#xA;&#x9;tree.Empty() // true&#xA;&#x9;tree.Size()  // 0&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;BTree&lt;/h4&gt; &#xA;&lt;p&gt;B-tree is a self-balancing tree data structure that keeps data sorted and allows searches, sequential access, insertions, and deletions in logarithmic time. The B-tree is a generalization of a binary search tree in that a node can have more than two children.&lt;/p&gt; &#xA;&lt;p&gt;According to Knuth&#39;s definition, a B-tree of order m is a tree which satisfies the following properties:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Every node has at most m children.&lt;/li&gt; &#xA; &lt;li&gt;Every non-leaf node (except root) has at least ⌈m/2⌉ children.&lt;/li&gt; &#xA; &lt;li&gt;The root has at least two children if it is not a leaf node.&lt;/li&gt; &#xA; &lt;li&gt;A non-leaf node with k children contains k−1 keys.&lt;/li&gt; &#xA; &lt;li&gt;All leaves appear in the same level&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Each internal node’s keys act as separation values which divide its subtrees. For example, if an internal node has 3 child nodes (or subtrees) then it must have 2 keys: a1 and a2. All values in the leftmost subtree will be less than a1, all values in the middle subtree will be between a1 and a2, and all values in the rightmost subtree will be greater than a2.&lt;sub&gt;&lt;sup&gt;&lt;a href=&#34;http://en.wikipedia.org/wiki/Red%E2%80%93black_tree&#34;&gt;Wikipedia&lt;/a&gt;&lt;/sup&gt;&lt;/sub&gt;&lt;/p&gt; &#xA;&lt;p&gt;Implements &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#trees&#34;&gt;Tree&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#reverseiteratorwithkey&#34;&gt;ReverseIteratorWithKey&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#jsonserializer&#34;&gt;JSONSerializer&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#jsondeserializer&#34;&gt;JSONDeserializer&lt;/a&gt; interfaces.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://upload.wikimedia.org/wikipedia/commons/thumb/6/65/B-tree.svg/831px-B-tree.svg.png&#34; width=&#34;400px&#34; height=&#34;111px&#34;&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;fmt&#34;&#xA;&#x9;&#34;github.com/emirpasic/gods/trees/btree&#34;&#xA;)&#xA;&#xA;func main() {&#xA;&#x9;tree := btree.NewWithIntComparator(3) // empty (keys are of type int)&#xA;&#xA;&#x9;tree.Put(1, &#34;x&#34;) // 1-&amp;gt;x&#xA;&#x9;tree.Put(2, &#34;b&#34;) // 1-&amp;gt;x, 2-&amp;gt;b (in order)&#xA;&#x9;tree.Put(1, &#34;a&#34;) // 1-&amp;gt;a, 2-&amp;gt;b (in order, replacement)&#xA;&#x9;tree.Put(3, &#34;c&#34;) // 1-&amp;gt;a, 2-&amp;gt;b, 3-&amp;gt;c (in order)&#xA;&#x9;tree.Put(4, &#34;d&#34;) // 1-&amp;gt;a, 2-&amp;gt;b, 3-&amp;gt;c, 4-&amp;gt;d (in order)&#xA;&#x9;tree.Put(5, &#34;e&#34;) // 1-&amp;gt;a, 2-&amp;gt;b, 3-&amp;gt;c, 4-&amp;gt;d, 5-&amp;gt;e (in order)&#xA;&#x9;tree.Put(6, &#34;f&#34;) // 1-&amp;gt;a, 2-&amp;gt;b, 3-&amp;gt;c, 4-&amp;gt;d, 5-&amp;gt;e, 6-&amp;gt;f (in order)&#xA;&#x9;tree.Put(7, &#34;g&#34;) // 1-&amp;gt;a, 2-&amp;gt;b, 3-&amp;gt;c, 4-&amp;gt;d, 5-&amp;gt;e, 6-&amp;gt;f, 7-&amp;gt;g (in order)&#xA;&#xA;&#x9;fmt.Println(tree)&#xA;&#x9;// BTree&#xA;&#x9;//         1&#xA;&#x9;//     2&#xA;&#x9;//         3&#xA;&#x9;// 4&#xA;&#x9;//         5&#xA;&#x9;//     6&#xA;&#x9;//         7&#xA;&#xA;&#x9;_ = tree.Values() // []interface {}{&#34;a&#34;, &#34;b&#34;, &#34;c&#34;, &#34;d&#34;, &#34;e&#34;, &#34;f&#34;, &#34;g&#34;} (in order)&#xA;&#x9;_ = tree.Keys()   // []interface {}{1, 2, 3, 4, 5, 6, 7} (in order)&#xA;&#xA;&#x9;tree.Remove(2) // 1-&amp;gt;a, 3-&amp;gt;c, 4-&amp;gt;d, 5-&amp;gt;e, 6-&amp;gt;f, 7-&amp;gt;g (in order)&#xA;&#x9;fmt.Println(tree)&#xA;&#x9;// BTree&#xA;&#x9;//     1&#xA;&#x9;//     3&#xA;&#x9;// 4&#xA;&#x9;//     5&#xA;&#x9;// 6&#xA;&#x9;//     7&#xA;&#xA;&#x9;tree.Clear() // empty&#xA;&#x9;tree.Empty() // true&#xA;&#x9;tree.Size()  // 0&#xA;&#xA;&#x9;// Other:&#xA;&#x9;tree.Height() // gets the height of the tree&#xA;&#x9;tree.Left() // gets the left-most (min) node&#xA;&#x9;tree.LeftKey() // get the left-most (min) node&#39;s key&#xA;&#x9;tree.LeftValue() // get the left-most (min) node&#39;s value&#xA;&#x9;tree.Right() // get the right-most (max) node&#xA;&#x9;tree.RightKey() // get the right-most (max) node&#39;s key&#xA;&#x9;tree.RightValue() // get the right-most (max) node&#39;s value&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;BinaryHeap&lt;/h4&gt; &#xA;&lt;p&gt;A binary heap is a &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#trees&#34;&gt;tree&lt;/a&gt; created using a binary tree. It can be seen as a binary tree with two additional constraints:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Shape property:&lt;/p&gt; &lt;p&gt;A binary heap is a complete binary tree; that is, all levels of the tree, except possibly the last one (deepest) are fully filled, and, if the last level of the tree is not complete, the nodes of that level are filled from left to right.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Heap property:&lt;/p&gt; &lt;p&gt;All nodes are either greater than or equal to or less than or equal to each of its children, according to a comparison predicate defined for the heap. &lt;sub&gt;&lt;sup&gt;&lt;a href=&#34;http://en.wikipedia.org/wiki/Binary_heap&#34;&gt;Wikipedia&lt;/a&gt;&lt;/sup&gt;&lt;/sub&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Implements &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#trees&#34;&gt;Tree&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#reverseiteratorwithindex&#34;&gt;ReverseIteratorWithIndex&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#jsonserializer&#34;&gt;JSONSerializer&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#jsondeserializer&#34;&gt;JSONDeserializer&lt;/a&gt; interfaces.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;http://upload.wikimedia.org/wikipedia/commons/thumb/3/38/Max-Heap.svg/501px-Max-Heap.svg.png&#34; width=&#34;300px&#34; height=&#34;200px&#34;&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;github.com/emirpasic/gods/trees/binaryheap&#34;&#xA;&#x9;&#34;github.com/emirpasic/gods/utils&#34;&#xA;)&#xA;&#xA;func main() {&#xA;&#xA;&#x9;// Min-heap&#xA;&#x9;heap := binaryheap.NewWithIntComparator() // empty (min-heap)&#xA;&#x9;heap.Push(2)                              // 2&#xA;&#x9;heap.Push(3)                              // 2, 3&#xA;&#x9;heap.Push(1)                              // 1, 3, 2&#xA;&#x9;heap.Values()                             // 1, 3, 2&#xA;&#x9;_, _ = heap.Peek()                        // 1,true&#xA;&#x9;_, _ = heap.Pop()                         // 1, true&#xA;&#x9;_, _ = heap.Pop()                         // 2, true&#xA;&#x9;_, _ = heap.Pop()                         // 3, true&#xA;&#x9;_, _ = heap.Pop()                         // nil, false (nothing to pop)&#xA;&#x9;heap.Push(1)                              // 1&#xA;&#x9;heap.Clear()                              // empty&#xA;&#x9;heap.Empty()                              // true&#xA;&#x9;heap.Size()                               // 0&#xA;&#xA;&#x9;// Max-heap&#xA;&#x9;inverseIntComparator := func(a, b interface{}) int {&#xA;&#x9;&#x9;return -utils.IntComparator(a, b)&#xA;&#x9;}&#xA;&#x9;heap = binaryheap.NewWith(inverseIntComparator) // empty (min-heap)&#xA;&#x9;heap.Push(2, 3, 1)                              // 3, 2, 1 (bulk optimized)&#xA;&#x9;heap.Values()                                   // 3, 2, 1&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Queues&lt;/h3&gt; &#xA;&lt;p&gt;A queue that represents a first-in-first-out (FIFO) data structure. The usual enqueue and dequeue operations are provided, as well as a method to peek at the first item in the queue.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://upload.wikimedia.org/wikipedia/commons/thumb/5/52/Data_Queue.svg/300px-Data_Queue.svg.png&#34; width=&#34;200px&#34; height=&#34;120px&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Implements &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#containers&#34;&gt;Container&lt;/a&gt; interface.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type Queue interface {&#xA;&#x9;Enqueue(value interface{})&#xA;&#x9;Dequeue() (value interface{}, ok bool)&#xA;&#x9;Peek() (value interface{}, ok bool)&#xA;&#xA;&#x9;containers.Container&#xA;&#x9;// Empty() bool&#xA;&#x9;// Size() int&#xA;&#x9;// Clear()&#xA;&#x9;// Values() []interface{}&#xA;&#x9;// String() string&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;LinkedListQueue&lt;/h4&gt; &#xA;&lt;p&gt;A &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#queues&#34;&gt;queue&lt;/a&gt; based on a &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#singlylinkedlist&#34;&gt;linked list&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Implements &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#queues&#34;&gt;Queue&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#iteratorwithindex&#34;&gt;IteratorWithIndex&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#jsonserializer&#34;&gt;JSONSerializer&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#jsondeserializer&#34;&gt;JSONDeserializer&lt;/a&gt; interfaces.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import llq &#34;github.com/emirpasic/gods/queues/linkedlistqueue&#34;&#xA;&#xA;// LinkedListQueueExample to demonstrate basic usage of LinkedListQueue&#xA;func main() {&#xA;    queue := llq.New()     // empty&#xA;    queue.Enqueue(1)       // 1&#xA;    queue.Enqueue(2)       // 1, 2&#xA;    _ = queue.Values()     // 1, 2 (FIFO order)&#xA;    _, _ = queue.Peek()    // 1,true&#xA;    _, _ = queue.Dequeue() // 1, true&#xA;    _, _ = queue.Dequeue() // 2, true&#xA;    _, _ = queue.Dequeue() // nil, false (nothing to deque)&#xA;    queue.Enqueue(1)       // 1&#xA;    queue.Clear()          // empty&#xA;    queue.Empty()          // true&#xA;    _ = queue.Size()       // 0&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;ArrayQueue&lt;/h4&gt; &#xA;&lt;p&gt;A &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#queues&#34;&gt;queue&lt;/a&gt; based on a &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#arraylist&#34;&gt;array list&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Implements &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#queues&#34;&gt;Queue&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#iteratorwithindex&#34;&gt;ReverseIteratorWithIndex&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#jsonserializer&#34;&gt;JSONSerializer&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#jsondeserializer&#34;&gt;JSONDeserializer&lt;/a&gt; interfaces.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import aq &#34;github.com/emirpasic/gods/queues/arrayqueue&#34;&#xA;&#xA;// ArrayQueueExample to demonstrate basic usage of ArrayQueue&#xA;func main() {&#xA;    queue := aq.New()      // empty&#xA;    queue.Enqueue(1)       // 1&#xA;    queue.Enqueue(2)       // 1, 2&#xA;    _ = queue.Values()     // 1, 2 (FIFO order)&#xA;    _, _ = queue.Peek()    // 1,true&#xA;    _, _ = queue.Dequeue() // 1, true&#xA;    _, _ = queue.Dequeue() // 2, true&#xA;    _, _ = queue.Dequeue() // nil, false (nothing to deque)&#xA;    queue.Enqueue(1)       // 1&#xA;    queue.Clear()          // empty&#xA;    queue.Empty()          // true&#xA;    _ = queue.Size()       // 0&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;CircularBuffer&lt;/h4&gt; &#xA;&lt;p&gt;A circular buffer, circular &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#queues&#34;&gt;queue&lt;/a&gt;, cyclic buffer or ring buffer is a data structure that uses a single, fixed-size buffer as if it were connected end-to-end. This structure lends itself easily to buffering data streams.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://upload.wikimedia.org/wikipedia/commons/thumb/f/fd/Circular_Buffer_Animation.gif/400px-Circular_Buffer_Animation.gif&#34; width=&#34;300px&#34; height=&#34;300px&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Implements &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#queues&#34;&gt;Queue&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#iteratorwithindex&#34;&gt;ReverseIteratorWithIndex&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#jsonserializer&#34;&gt;JSONSerializer&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#jsondeserializer&#34;&gt;JSONDeserializer&lt;/a&gt; interfaces.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import cb &#34;github.com/emirpasic/gods/queues/circularbuffer&#34;&#xA;&#xA;// CircularBufferExample to demonstrate basic usage of CircularBuffer&#xA;func main() {&#xA;    queue := cb.New(3)     // empty (max size is 3)&#xA;    queue.Enqueue(1)       // 1&#xA;    queue.Enqueue(2)       // 1, 2&#xA;    queue.Enqueue(3)       // 1, 2, 3&#xA;    _ = queue.Values()     // 1, 2, 3&#xA;    queue.Enqueue(3)       // 4, 2, 3&#xA;    _, _ = queue.Peek()    // 4,true&#xA;    _, _ = queue.Dequeue() // 4, true&#xA;    _, _ = queue.Dequeue() // 2, true&#xA;    _, _ = queue.Dequeue() // 3, true&#xA;    _, _ = queue.Dequeue() // nil, false (nothing to deque)&#xA;    queue.Enqueue(1)       // 1&#xA;    queue.Clear()          // empty&#xA;    queue.Empty()          // true&#xA;    _ = queue.Size()       // 0&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;PriorityQueue&lt;/h4&gt; &#xA;&lt;p&gt;A priority queue is a special type of &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#queues&#34;&gt;queue&lt;/a&gt; in which each element is associated with a priority value. And, elements are served on the basis of their priority. That is, higher priority elements are served first. However, if elements with the same priority occur, they are served according to their order in the queue.&lt;/p&gt; &#xA;&lt;p&gt;Implements &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#queues&#34;&gt;Queue&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#iteratorwithindex&#34;&gt;ReverseIteratorWithIndex&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#jsonserializer&#34;&gt;JSONSerializer&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#jsondeserializer&#34;&gt;JSONDeserializer&lt;/a&gt; interfaces.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;  pq &#34;github.com/emirpasic/gods/queues/priorityqueue&#34;&#xA;  &#34;github.com/emirpasic/gods/utils&#34;&#xA;)&#xA;&#xA;// Element is an entry in the priority queue&#xA;type Element struct {&#xA;    name     string&#xA;    priority int&#xA;}&#xA;&#xA;// Comparator function (sort by element&#39;s priority value in descending order)&#xA;func byPriority(a, b interface{}) int {&#xA;    priorityA := a.(Element).priority&#xA;    priorityB := b.(Element).priority&#xA;    return -utils.IntComparator(priorityA, priorityB) // &#34;-&#34; descending order&#xA;}&#xA;&#xA;// PriorityQueueExample to demonstrate basic usage of BinaryHeap&#xA;func main() {&#xA;    a := Element{name: &#34;a&#34;, priority: 1}&#xA;    b := Element{name: &#34;b&#34;, priority: 2}&#xA;    c := Element{name: &#34;c&#34;, priority: 3}&#xA;    &#xA;    queue := pq.NewWith(byPriority) // empty&#xA;    queue.Enqueue(a)                // {a 1}&#xA;    queue.Enqueue(c)                // {c 3}, {a 1}&#xA;    queue.Enqueue(b)                // {c 3}, {b 2}, {a 1}&#xA;    _ = queue.Values()              // [{c 3} {b 2} {a 1}]&#xA;    _, _ = queue.Peek()             // {c 3} true&#xA;    _, _ = queue.Dequeue()          // {c 3} true&#xA;    _, _ = queue.Dequeue()          // {b 2} true&#xA;    _, _ = queue.Dequeue()          // {a 1} true&#xA;    _, _ = queue.Dequeue()          // &amp;lt;nil&amp;gt; false (nothing to dequeue)&#xA;    queue.Clear()                   // empty&#xA;    _ = queue.Empty()               // true&#xA;    _ = queue.Size()                // 0&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Functions&lt;/h2&gt; &#xA;&lt;p&gt;Various helper functions used throughout the library.&lt;/p&gt; &#xA;&lt;h3&gt;Comparator&lt;/h3&gt; &#xA;&lt;p&gt;Some data structures (e.g. TreeMap, TreeSet) require a comparator function to automatically keep their elements sorted upon insertion. This comparator is necessary during the initalization.&lt;/p&gt; &#xA;&lt;p&gt;Comparator is defined as:&lt;/p&gt; &#xA;&lt;p&gt;Return values (int):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;negative , if a &amp;lt; b&#xA;zero     , if a == b&#xA;positive , if a &amp;gt; b&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Comparator signature:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type Comparator func(a, b interface{}) int&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;All common comparators for builtin types are included in the library:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func StringComparator(a, b interface{}) int&#xA;&#xA;func IntComparator(a, b interface{}) int&#xA;&#xA;func Int8Comparator(a, b interface{}) int&#xA;&#xA;func Int16Comparator(a, b interface{}) int&#xA;&#xA;func Int32Comparator(a, b interface{}) int&#xA;&#xA;func Int64Comparator(a, b interface{}) int&#xA;&#xA;func UIntComparator(a, b interface{}) int&#xA;&#xA;func UInt8Comparator(a, b interface{}) int&#xA;&#xA;func UInt16Comparator(a, b interface{}) int&#xA;&#xA;func UInt32Comparator(a, b interface{}) int&#xA;&#xA;func UInt64Comparator(a, b interface{}) int&#xA;&#xA;func Float32Comparator(a, b interface{}) int&#xA;&#xA;func Float64Comparator(a, b interface{}) int&#xA;&#xA;func ByteComparator(a, b interface{}) int&#xA;&#xA;func RuneComparator(a, b interface{}) int&#xA;&#xA;func TimeComparator(a, b interface{}) int&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Writing custom comparators is easy:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;fmt&#34;&#xA;&#x9;&#34;github.com/emirpasic/gods/sets/treeset&#34;&#xA;)&#xA;&#xA;type User struct {&#xA;&#x9;id   int&#xA;&#x9;name string&#xA;}&#xA;&#xA;// Custom comparator (sort by IDs)&#xA;func byID(a, b interface{}) int {&#xA;&#xA;&#x9;// Type assertion, program will panic if this is not respected&#xA;&#x9;c1 := a.(User)&#xA;&#x9;c2 := b.(User)&#xA;&#xA;&#x9;switch {&#xA;&#x9;case c1.id &amp;gt; c2.id:&#xA;&#x9;&#x9;return 1&#xA;&#x9;case c1.id &amp;lt; c2.id:&#xA;&#x9;&#x9;return -1&#xA;&#x9;default:&#xA;&#x9;&#x9;return 0&#xA;&#x9;}&#xA;}&#xA;&#xA;func main() {&#xA;&#x9;set := treeset.NewWith(byID)&#xA;&#xA;&#x9;set.Add(User{2, &#34;Second&#34;})&#xA;&#x9;set.Add(User{3, &#34;Third&#34;})&#xA;&#x9;set.Add(User{1, &#34;First&#34;})&#xA;&#x9;set.Add(User{4, &#34;Fourth&#34;})&#xA;&#xA;&#x9;fmt.Println(set) // {1 First}, {2 Second}, {3 Third}, {4 Fourth}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Iterator&lt;/h3&gt; &#xA;&lt;p&gt;All ordered containers have stateful iterators. Typically an iterator is obtained by &lt;em&gt;Iterator()&lt;/em&gt; function of an ordered container. Once obtained, iterator&#39;s &lt;em&gt;Next()&lt;/em&gt; function moves the iterator to the next element and returns true if there was a next element. If there was an element, then element&#39;s can be obtained by iterator&#39;s &lt;em&gt;Value()&lt;/em&gt; function. Depending on the ordering type, it&#39;s position can be obtained by iterator&#39;s &lt;em&gt;Index()&lt;/em&gt; or &lt;em&gt;Key()&lt;/em&gt; functions. Some containers even provide reversible iterators, essentially the same, but provide another extra &lt;em&gt;Prev()&lt;/em&gt; function that moves the iterator to the previous element and returns true if there was a previous element.&lt;/p&gt; &#xA;&lt;p&gt;Note: it is unsafe to remove elements from container while iterating.&lt;/p&gt; &#xA;&lt;h4&gt;IteratorWithIndex&lt;/h4&gt; &#xA;&lt;p&gt;An &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#iterator&#34;&gt;iterator&lt;/a&gt; whose elements are referenced by an index.&lt;/p&gt; &#xA;&lt;p&gt;Typical usage:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;it := list.Iterator()&#xA;for it.Next() {&#xA;&#x9;index, value := it.Index(), it.Value()&#xA;&#x9;...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Other usages:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;if it.First() {&#xA;&#x9;firstIndex, firstValue := it.Index(), it.Value()&#xA;&#x9;...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;for it.Begin(); it.Next(); {&#xA;&#x9;...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Seeking to a specific element:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Seek function, i.e. find element starting with &#34;b&#34;&#xA;seek := func(index int, value interface{}) bool {&#xA;    return strings.HasSuffix(value.(string), &#34;b&#34;)&#xA;}&#xA;&#xA;// Seek to the condition and continue traversal from that point (forward).&#xA;// assumes it.Begin() was called.&#xA;for found := it.NextTo(seek); found; found = it.Next() {&#xA;    index, value := it.Index(), it.Value()&#xA;    ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;IteratorWithKey&lt;/h4&gt; &#xA;&lt;p&gt;An &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#iterator&#34;&gt;iterator&lt;/a&gt; whose elements are referenced by a key.&lt;/p&gt; &#xA;&lt;p&gt;Typical usage:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;it := tree.Iterator()&#xA;for it.Next() {&#xA;&#x9;key, value := it.Key(), it.Value()&#xA;&#x9;...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Other usages:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;if it.First() {&#xA;&#x9;firstKey, firstValue := it.Key(), it.Value()&#xA;&#x9;...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;for it.Begin(); it.Next(); {&#xA;&#x9;...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Seeking to a specific element from the current iterator position:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Seek function, i.e. find element starting with &#34;b&#34;&#xA;seek := func(key interface{}, value interface{}) bool {&#xA;    return strings.HasSuffix(value.(string), &#34;b&#34;)&#xA;}&#xA;&#xA;// Seek to the condition and continue traversal from that point (forward).&#xA;// assumes it.Begin() was called.&#xA;for found := it.NextTo(seek); found; found = it.Next() {&#xA;    key, value := it.Key(), it.Value()&#xA;    ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;ReverseIteratorWithIndex&lt;/h4&gt; &#xA;&lt;p&gt;An &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#iterator&#34;&gt;iterator&lt;/a&gt; whose elements are referenced by an index. Provides all functions as &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#iteratorwithindex&#34;&gt;IteratorWithIndex&lt;/a&gt;, but can also be used for reverse iteration.&lt;/p&gt; &#xA;&lt;p&gt;Typical usage of iteration in reverse:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;it := list.Iterator()&#xA;for it.End(); it.Prev(); {&#xA;&#x9;index, value := it.Index(), it.Value()&#xA;&#x9;...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Other usages:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;if it.Last() {&#xA;&#x9;lastIndex, lastValue := it.Index(), it.Value()&#xA;&#x9;...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Seeking to a specific element:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Seek function, i.e. find element starting with &#34;b&#34;&#xA;seek := func(index int, value interface{}) bool {&#xA;    return strings.HasSuffix(value.(string), &#34;b&#34;)&#xA;}&#xA;&#xA;// Seek to the condition and continue traversal from that point (in reverse).&#xA;// assumes it.End() was called.&#xA;for found := it.PrevTo(seek); found; found = it.Prev() {&#xA;    index, value := it.Index(), it.Value()&#xA;&#x9;...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;ReverseIteratorWithKey&lt;/h4&gt; &#xA;&lt;p&gt;An &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#iterator&#34;&gt;iterator&lt;/a&gt; whose elements are referenced by a key. Provides all functions as &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#iteratorwithkey&#34;&gt;IteratorWithKey&lt;/a&gt;, but can also be used for reverse iteration.&lt;/p&gt; &#xA;&lt;p&gt;Typical usage of iteration in reverse:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;it := tree.Iterator()&#xA;for it.End(); it.Prev(); {&#xA;&#x9;key, value := it.Key(), it.Value()&#xA;&#x9;...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Other usages:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;if it.Last() {&#xA;&#x9;lastKey, lastValue := it.Key(), it.Value()&#xA;&#x9;...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Seek function, i.e. find element starting with &#34;b&#34;&#xA;seek := func(key interface{}, value interface{}) bool {&#xA;    return strings.HasSuffix(value.(string), &#34;b&#34;)&#xA;}&#xA;&#xA;// Seek to the condition and continue traversal from that point (in reverse).&#xA;// assumes it.End() was called.&#xA;for found := it.PrevTo(seek); found; found = it.Prev() {&#xA;    key, value := it.Key(), it.Value()&#xA;&#x9;...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Enumerable&lt;/h3&gt; &#xA;&lt;p&gt;Enumerable functions for ordered containers that implement &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#enumerablewithindex&#34;&gt;EnumerableWithIndex&lt;/a&gt; or &lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#enumerablewithkey&#34;&gt;EnumerableWithKey&lt;/a&gt; interfaces.&lt;/p&gt; &#xA;&lt;h4&gt;EnumerableWithIndex&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emirpasic/gods/master/#enumerable&#34;&gt;Enumerable&lt;/a&gt; functions for ordered containers whose values can be fetched by an index.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Each&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Calls the given function once for each element, passing that element&#39;s index and value.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;Each(func(index int, value interface{}))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Map&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Invokes the given function once for each element and returns a container containing the values returned by the given function.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;Map(func(index int, value interface{}) interface{}) Container&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Select&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Returns a new container containing all elements for which the given function returns a true value.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;Select(func(index int, value interface{}) bool) Container&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Any&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Passes each element of the container to the given function and returns true if the function ever returns true for any element.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;Any(func(index int, value interface{}) bool) bool&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;All&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Passes each element of the container to the given function and returns true if the function returns true for all elements.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;All(func(index int, value interface{}) bool) bool&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Find&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Passes each element of the container to the given function and returns the first (index,value) for which the function is true or -1,nil otherwise if no element matches the criteria.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;Find(func(index int, value interface{}) bool) (int, interface{})}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;fmt&#34;&#xA;&#x9;&#34;github.com/emirpasic/gods/sets/treeset&#34;&#xA;)&#xA;&#xA;func printSet(txt string, set *treeset.Set) {&#xA;&#x9;fmt.Print(txt, &#34;[ &#34;)&#xA;&#x9;set.Each(func(index int, value interface{}) {&#xA;&#x9;&#x9;fmt.Print(value, &#34; &#34;)&#xA;&#x9;})&#xA;&#x9;fmt.Println(&#34;]&#34;)&#xA;}&#xA;&#xA;func main() {&#xA;&#x9;set := treeset.NewWithIntComparator()&#xA;&#x9;set.Add(2, 3, 4, 2, 5, 6, 7, 8)&#xA;&#x9;printSet(&#34;Initial&#34;, set) // [ 2 3 4 5 6 7 8 ]&#xA;&#xA;&#x9;even := set.Select(func(index int, value interface{}) bool {&#xA;&#x9;&#x9;return value.(int)%2 == 0&#xA;&#x9;})&#xA;&#x9;printSet(&#34;Even numbers&#34;, even) // [ 2 4 6 8 ]&#xA;&#xA;&#x9;foundIndex, foundValue := set.Find(func(index int, value interface{}) bool {&#xA;&#x9;&#x9;return value.(int)%2 == 0 &amp;amp;&amp;amp; value.(int)%3 == 0&#xA;&#x9;})&#xA;&#x9;if foundIndex != -1 {&#xA;&#x9;&#x9;fmt.Println(&#34;Number divisible by 2 and 3 found is&#34;, foundValue, &#34;at index&#34;, foundIndex) // value: 6, index: 4&#xA;&#x9;}&#xA;&#xA;&#x9;square := set.Map(func(index int, value interface{}) interface{} {&#xA;&#x9;&#x9;return value.(int) * value.(int)&#xA;&#x9;})&#xA;&#x9;printSet(&#34;Numbers squared&#34;, square) // [ 4 9 16 25 36 49 64 ]&#xA;&#xA;&#x9;bigger := set.Any(func(index int, value interface{}) bool {&#xA;&#x9;&#x9;return value.(int) &amp;gt; 5&#xA;&#x9;})&#xA;&#x9;fmt.Println(&#34;Set contains a number bigger than 5 is &#34;, bigger) // true&#xA;&#xA;&#x9;positive := set.All(func(index int, value interface{}) bool {&#xA;&#x9;&#x9;return value.(int) &amp;gt; 0&#xA;&#x9;})&#xA;&#x9;fmt.Println(&#34;All numbers are positive is&#34;, positive) // true&#xA;&#xA;&#x9;evenNumbersSquared := set.Select(func(index int, value interface{}) bool {&#xA;&#x9;&#x9;return value.(int)%2 == 0&#xA;&#x9;}).Map(func(index int, value interface{}) interface{} {&#xA;&#x9;&#x9;return value.(int) * value.(int)&#xA;&#x9;})&#xA;&#x9;printSet(&#34;Chaining&#34;, evenNumbersSquared) // [ 4 16 36 64 ]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;EnumerableWithKey&lt;/h4&gt; &#xA;&lt;p&gt;Enumerable functions for ordered containers whose values whose elements are key/value pairs.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Each&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Calls the given function once for each element, passing that element&#39;s key and value.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;Each(func(key interface{}, value interface{}))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Map&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Invokes the given function once for each element and returns a container containing the values returned by the given function as key/value pairs.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;Map(func(key interface{}, value interface{}) (interface{}, interface{})) Container&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Select&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Returns a new container containing all elements for which the given function returns a true value.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;Select(func(key interface{}, value interface{}) bool) Container&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Any&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Passes each element of the container to the given function and returns true if the function ever returns true for any element.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;Any(func(key interface{}, value interface{}) bool) bool&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;All&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Passes each element of the container to the given function and returns true if the function returns true for all elements.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;All(func(key interface{}, value interface{}) bool) bool&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Find&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Passes each element of the container to the given function and returns the first (key,value) for which the function is true or nil,nil otherwise if no element matches the criteria.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;Find(func(key interface{}, value interface{}) bool) (interface{}, interface{})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;fmt&#34;&#xA;&#x9;&#34;github.com/emirpasic/gods/maps/treemap&#34;&#xA;)&#xA;&#xA;func printMap(txt string, m *treemap.Map) {&#xA;&#x9;fmt.Print(txt, &#34; { &#34;)&#xA;&#x9;m.Each(func(key interface{}, value interface{}) {&#xA;&#x9;&#x9;fmt.Print(key, &#34;:&#34;, value, &#34; &#34;)&#xA;&#x9;})&#xA;&#x9;fmt.Println(&#34;}&#34;)&#xA;}&#xA;&#xA;func main() {&#xA;&#x9;m := treemap.NewWithStringComparator()&#xA;&#x9;m.Put(&#34;g&#34;, 7)&#xA;&#x9;m.Put(&#34;f&#34;, 6)&#xA;&#x9;m.Put(&#34;e&#34;, 5)&#xA;&#x9;m.Put(&#34;d&#34;, 4)&#xA;&#x9;m.Put(&#34;c&#34;, 3)&#xA;&#x9;m.Put(&#34;b&#34;, 2)&#xA;&#x9;m.Put(&#34;a&#34;, 1)&#xA;&#x9;printMap(&#34;Initial&#34;, m) // { a:1 b:2 c:3 d:4 e:5 f:6 g:7 }&#xA;&#xA;&#x9;even := m.Select(func(key interface{}, value interface{}) bool {&#xA;&#x9;&#x9;return value.(int) % 2 == 0&#xA;&#x9;})&#xA;&#x9;printMap(&#34;Elements with even values&#34;, even) // { b:2 d:4 f:6 }&#xA;&#xA;&#x9;foundKey, foundValue := m.Find(func(key interface{}, value interface{}) bool {&#xA;&#x9;&#x9;return value.(int) % 2 == 0 &amp;amp;&amp;amp; value.(int) % 3 == 0&#xA;&#x9;})&#xA;&#x9;if foundKey != nil {&#xA;&#x9;&#x9;fmt.Println(&#34;Element with value divisible by 2 and 3 found is&#34;, foundValue, &#34;with key&#34;, foundKey) // value: 6, index: 4&#xA;&#x9;}&#xA;&#xA;&#x9;square := m.Map(func(key interface{}, value interface{}) (interface{}, interface{}) {&#xA;&#x9;&#x9;return key.(string) + key.(string), value.(int) * value.(int)&#xA;&#x9;})&#xA;&#x9;printMap(&#34;Elements&#39; values squared and letters duplicated&#34;, square) // { aa:1 bb:4 cc:9 dd:16 ee:25 ff:36 gg:49 }&#xA;&#xA;&#x9;bigger := m.Any(func(key interface{}, value interface{}) bool {&#xA;&#x9;&#x9;return value.(int) &amp;gt; 5&#xA;&#x9;})&#xA;&#x9;fmt.Println(&#34;Map contains element whose value is bigger than 5 is&#34;, bigger) // true&#xA;&#xA;&#x9;positive := m.All(func(key interface{}, value interface{}) bool {&#xA;&#x9;&#x9;return value.(int) &amp;gt; 0&#xA;&#x9;})&#xA;&#x9;fmt.Println(&#34;All map&#39;s elements have positive values is&#34;, positive) // true&#xA;&#xA;&#x9;evenNumbersSquared := m.Select(func(key interface{}, value interface{}) bool {&#xA;&#x9;&#x9;return value.(int) % 2 == 0&#xA;&#x9;}).Map(func(key interface{}, value interface{}) (interface{}, interface{}) {&#xA;&#x9;&#x9;return key, value.(int) * value.(int)&#xA;&#x9;})&#xA;&#x9;printMap(&#34;Chaining&#34;, evenNumbersSquared) // { b:4 d:16 f:36 }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Serialization&lt;/h3&gt; &#xA;&lt;p&gt;All data structures can be serialized (marshalled) and deserialized (unmarshalled). Currently, only JSON support is available.&lt;/p&gt; &#xA;&lt;h4&gt;JSONSerializer&lt;/h4&gt; &#xA;&lt;p&gt;Outputs the container into its JSON representation.&lt;/p&gt; &#xA;&lt;p&gt;Typical usage for key-value structures:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;encoding/json&#34;&#xA;&#x9;&#34;fmt&#34;&#xA;&#x9;&#34;github.com/emirpasic/gods/maps/hashmap&#34;&#xA;)&#xA;&#xA;func main() {&#xA;&#x9;m := hashmap.New()&#xA;&#x9;m.Put(&#34;a&#34;, &#34;1&#34;)&#xA;&#x9;m.Put(&#34;b&#34;, &#34;2&#34;)&#xA;&#x9;m.Put(&#34;c&#34;, &#34;3&#34;)&#xA;&#xA;&#x9;bytes, err := json.Marshal(m) // Same as &#34;m.ToJSON(m)&#34;&#xA;&#x9;if err != nil {&#xA;&#x9;&#x9;fmt.Println(err)&#xA;&#x9;}&#xA;&#x9;fmt.Println(string(bytes)) // {&#34;a&#34;:&#34;1&#34;,&#34;b&#34;:&#34;2&#34;,&#34;c&#34;:&#34;3&#34;}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Typical usage for value-only structures:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;encoding/json&#34;&#xA;&#x9;&#34;fmt&#34;&#xA;&#x9;&#34;github.com/emirpasic/gods/lists/arraylist&#34;&#xA;)&#xA;&#xA;func main() {&#xA;&#x9;list := arraylist.New()&#xA;&#x9;list.Add(&#34;a&#34;, &#34;b&#34;, &#34;c&#34;)&#xA;&#xA;&#x9;bytes, err := json.Marshal(list) // Same as &#34;list.ToJSON(list)&#34;&#xA;&#x9;if err != nil {&#xA;&#x9;&#x9;fmt.Println(err)&#xA;&#x9;}&#xA;&#x9;fmt.Println(string(bytes)) // [&#34;a&#34;,&#34;b&#34;,&#34;c&#34;]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;JSONDeserializer&lt;/h4&gt; &#xA;&lt;p&gt;Populates the container with elements from the input JSON representation.&lt;/p&gt; &#xA;&lt;p&gt;Typical usage for key-value structures:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;encoding/json&#34;&#xA;&#x9;&#34;fmt&#34;&#xA;&#x9;&#34;github.com/emirpasic/gods/maps/hashmap&#34;&#xA;)&#xA;&#xA;func main() {&#xA;&#x9;hm := hashmap.New()&#xA;&#xA;&#x9;bytes := []byte(`{&#34;a&#34;:&#34;1&#34;,&#34;b&#34;:&#34;2&#34;}`)&#xA;&#x9;err := json.Unmarshal(bytes, &amp;amp;hm) // Same as &#34;hm.FromJSON(bytes)&#34;&#xA;&#x9;if err != nil {&#xA;&#x9;&#x9;fmt.Println(err)&#xA;&#x9;}&#xA;&#x9;fmt.Println(hm) // HashMap map[b:2 a:1]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Typical usage for value-only structures:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;encoding/json&#34;&#xA;&#x9;&#34;fmt&#34;&#xA;&#x9;&#34;github.com/emirpasic/gods/lists/arraylist&#34;&#xA;)&#xA;&#xA;func main() {&#xA;&#x9;list := arraylist.New()&#xA;&#xA;&#x9;bytes := []byte(`[&#34;a&#34;,&#34;b&#34;]`)&#xA;&#x9;err := json.Unmarshal(bytes, &amp;amp;list) // Same as &#34;list.FromJSON(bytes)&#34;&#xA;&#x9;if err != nil {&#xA;&#x9;&#x9;fmt.Println(err)&#xA;&#x9;}&#xA;&#x9;fmt.Println(list) // ArrayList [&#34;a&#34;,&#34;b&#34;]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Sort&lt;/h3&gt; &#xA;&lt;p&gt;Sort is a general purpose sort function.&lt;/p&gt; &#xA;&lt;p&gt;Lists have an in-place &lt;em&gt;Sort()&lt;/em&gt; function and all containers can return their sorted elements via &lt;em&gt;containers.GetSortedValues()&lt;/em&gt; function.&lt;/p&gt; &#xA;&lt;p&gt;Internally these all use the &lt;em&gt;utils.Sort()&lt;/em&gt; method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import &#34;github.com/emirpasic/gods/utils&#34;&#xA;&#xA;func main() {&#xA;&#x9;strings := []interface{}{}                  // []&#xA;&#x9;strings = append(strings, &#34;d&#34;)              // [&#34;d&#34;]&#xA;&#x9;strings = append(strings, &#34;a&#34;)              // [&#34;d&#34;,&#34;a&#34;]&#xA;&#x9;strings = append(strings, &#34;b&#34;)              // [&#34;d&#34;,&#34;a&#34;,b&#34;&#xA;&#x9;strings = append(strings, &#34;c&#34;)              // [&#34;d&#34;,&#34;a&#34;,b&#34;,&#34;c&#34;]&#xA;&#x9;utils.Sort(strings, utils.StringComparator) // [&#34;a&#34;,&#34;b&#34;,&#34;c&#34;,&#34;d&#34;]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Container&lt;/h3&gt; &#xA;&lt;p&gt;Container specific operations:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Returns sorted container&#39;&#39;s elements with respect to the passed comparator.&#xA;// Does not affect the ordering of elements within the container.&#xA;func GetSortedValues(container Container, comparator utils.Comparator) []interface{}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Usage:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;github.com/emirpasic/gods/lists/arraylist&#34;&#xA;&#x9;&#34;github.com/emirpasic/gods/utils&#34;&#xA;)&#xA;&#xA;func main() {&#xA;&#x9;list := arraylist.New()&#xA;&#x9;list.Add(2, 1, 3)&#xA;&#x9;values := GetSortedValues(container, utils.StringComparator) // [1, 2, 3]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Appendix&lt;/h2&gt; &#xA;&lt;h3&gt;Motivation&lt;/h3&gt; &#xA;&lt;p&gt;Collections and data structures found in other languages: Java Collections, C++ Standard Template Library (STL) containers, Qt Containers, Ruby Enumerable etc.&lt;/p&gt; &#xA;&lt;h3&gt;Goals&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Fast algorithms&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Based on decades of knowledge and experiences of other libraries mentioned above.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Memory efficient algorithms&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Avoiding to consume memory by using optimal algorithms and data structures for the given set of problems, e.g. red-black tree in case of TreeMap to avoid keeping redundant sorted array of keys in memory.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Easy to use library&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Well-structured library with minimalistic set of atomic operations from which more complex operations can be crafted.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Stable library&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Only additions are permitted keeping the library backward compatible.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Solid documentation and examples&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Learning by example.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Production ready&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Used in production.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;No dependencies&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;No external imports.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;There is often a tug of war between speed and memory when crafting algorithms. We choose to optimize for speed in most cases within reasonable limits on memory consumption.&lt;/p&gt; &#xA;&lt;p&gt;Thread safety is not a concern of this project, this should be handled at a higher level.&lt;/p&gt; &#xA;&lt;h3&gt;Testing and Benchmarking&lt;/h3&gt; &#xA;&lt;p&gt;This takes a while, so test within sub-packages:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;go test -run=NO_TEST -bench . -benchmem -benchtime 1s ./...&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://cloud.githubusercontent.com/assets/3115942/16892979/5e698d46-4b27-11e6-864b-cb2b865327b6.png&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Contributing&lt;/h3&gt; &#xA;&lt;p&gt;Biggest contribution towards this library is to use it and give us feedback for further improvements and additions.&lt;/p&gt; &#xA;&lt;p&gt;For direct contributions, &lt;em&gt;pull request&lt;/em&gt; into master branch or ask to become a contributor.&lt;/p&gt; &#xA;&lt;p&gt;Coding style:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# Install tooling and set path:&#xA;go install gotest.tools/gotestsum@latest&#xA;go install golang.org/x/lint/golint@latest&#xA;go install github.com/kisielk/errcheck@latest&#xA;export PATH=$PATH:$GOPATH/bin&#xA;&#xA;# Fix errors and warnings:&#xA;go fmt ./... &amp;amp;&amp;amp;&#xA;go test -v ./... &amp;amp;&amp;amp; &#xA;golint -set_exit_status ./... &amp;amp;&amp;amp; &#xA;! go fmt ./... 2&amp;gt;&amp;amp;1 | read &amp;amp;&amp;amp;&#xA;go vet -v ./... &amp;amp;&amp;amp;&#xA;gocyclo -avg -over 15 ../gods &amp;amp;&amp;amp;&#xA;errcheck ./...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;License&lt;/h3&gt; &#xA;&lt;p&gt;This library is distributed under the BSD-style license found in the &lt;a href=&#34;https://github.com/emirpasic/gods/raw/master/LICENSE&#34;&gt;LICENSE&lt;/a&gt; file.&lt;/p&gt; &#xA;&lt;h3&gt;Sponsors&lt;/h3&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://www.browserstack.com/?ref=gods&#34;&gt;&lt;img src=&#34;http://www.hajdarevic.net/browserstack.svg?sanitize=true&#34; alt=&#34;BrowserStack&#34; width=&#34;250&#34;&gt;&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.browserstack.com/?ref=webhook&#34;&gt;BrowserStack&lt;/a&gt; is a cloud-based cross-browser testing tool that enables developers to test their websites across various browsers on different operating systems and mobile devices, without requiring users to install virtual machines, devices or emulators.&lt;/p&gt;</summary>
  </entry>
</feed>