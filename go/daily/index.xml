<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-03-09T01:30:28Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>usual2970/certimate</title>
    <updated>2025-03-09T01:30:28Z</updated>
    <id>tag:github.com,2025-03-09:/usual2970/certimate</id>
    <link href="https://github.com/usual2970/certimate" rel="alternate"></link>
    <summary type="html">&lt;p&gt;开源的SSL证书管理工具，可以帮助你自动申请、部署SSL证书，并在证书即将过期时自动续期。An open-source SSL certificate management tool that helps you automatically apply for and deploy SSL certificates, as well as automatically renew them when they are about to expire.&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt;🔒 Certimate&lt;/h1&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/usual2970/certimate&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/usual2970/certimate?style=flat&#34; alt=&#34;Stars&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/usual2970/certimate&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/forks/usual2970/certimate?style=flat&#34; alt=&#34;Forks&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/usual2970/certimate&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/pulls/usual2970/certimate?style=flat&#34; alt=&#34;Docker Pulls&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/usual2970/certimate/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/usual2970/certimate?sort=semver&#34; alt=&#34;Release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://mit-license.org/&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/usual2970/certimate&#34; alt=&#34;License&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt;中文 ｜ &lt;a href=&#34;https://raw.githubusercontent.com/usual2970/certimate/main/README_EN.md&#34;&gt;English&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;🚩 项目简介&lt;/h2&gt; &#xA;&lt;p&gt;做个人产品或者在中小企业里负责运维的同学，会遇到要管理多个域名的情况，需要给域名申请证书。但是手动申请证书有以下缺点：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;😱 麻烦：申请证书并部署到服务的流程虽不复杂，但也挺麻烦的，犹其是你有多个域名需要维护的时候。&lt;/li&gt; &#xA; &lt;li&gt;😭 易忘：另外当前免费证书的有效期只有 90 天，这就要求你定期的操作，增加了工作量的同时，你也很容易忘掉续期，从而导致网站访问不了。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Certimate 就是为了解决上述问题而产生的，它具有以下优势：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;本地部署&lt;/strong&gt;：一键安装，只需要下载二进制文件，然后直接运行即可。同时也支持 Docker 部署、源代码部署等方式。​&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;数据安全&lt;/strong&gt;：由于是私有部署，所有数据均存储在自己的服务器上，不会经过第三方，确保数据的隐私和安全。​&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;操作简单&lt;/strong&gt;：简单配置即可轻松申请 SSL 证书并部署到指定的目标上，在证书即将过期前自动续期，从申请证书到使用证书完全自动化，无需人工操作。​&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Certimate 旨在为用户提供一个安全、简便的 SSL 证书管理解决方案。&lt;/p&gt; &#xA;&lt;h2&gt;💡 功能特性&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;灵活的工作流编排方式，证书从申请到部署完全自动化；&lt;/li&gt; &#xA; &lt;li&gt;支持泛域名、多域名证书，可选 RSA、ECC 签名算法；&lt;/li&gt; &#xA; &lt;li&gt;支持 20+ 域名托管商（如阿里云、腾讯云、Cloudflare 等）；&lt;/li&gt; &#xA; &lt;li&gt;支持 50+ 部署目标（如 Kubernetes、CDN、WAF、负载均衡等）；&lt;/li&gt; &#xA; &lt;li&gt;支持邮件、钉钉、飞书、企业微信、Webhook 等多种通知渠道；&lt;/li&gt; &#xA; &lt;li&gt;支持 Let&#39;s Encrypt、ZeroSSL、Google Trust Services 等多种 ACME 证书颁发机构；&lt;/li&gt; &#xA; &lt;li&gt;更多特性等待探索。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;⏱️ 快速启动&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;5 分钟部署 Certimate！&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;以二进制部署为例，从 &lt;a href=&#34;https://github.com/usual2970/certimate/releases&#34;&gt;GitHub Releases&lt;/a&gt; 页面下载预先编译好的二进制可执行文件压缩包，解压缩后在终端中执行：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./certimate serve&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;浏览器中访问 &lt;code&gt;http://127.0.0.1:8090&lt;/code&gt;。&lt;/p&gt; &#xA;&lt;p&gt;初始的管理员账号及密码：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;账号：&lt;code&gt;admin@certimate.fun&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;密码：&lt;code&gt;1234567890&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;即刻使用 Certimate。&lt;/p&gt; &#xA;&lt;p&gt;如何使用 Docker 或其他部署方式请参考文档。&lt;/p&gt; &#xA;&lt;h2&gt;📄 使用手册&lt;/h2&gt; &#xA;&lt;p&gt;请访问文档站 &lt;a href=&#34;https://docs.certimate.me/&#34;&gt;docs.certimate.me&lt;/a&gt; 以阅读使用手册。&lt;/p&gt; &#xA;&lt;p&gt;相关文章：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.certimate.me/blog/v0.3.0&#34;&gt;v0.3.0：第二个不向后兼容的大版本&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.certimate.me/blog/v0.2.0&#34;&gt;v0.2.0：第一个不向后兼容的大版本&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.certimate.me/blog/why-certimate&#34;&gt;Why Certimate?&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;⭐ 运行界面&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV1xockeZEm2&#34;&gt;&lt;img src=&#34;https://i.imgur.com/4DAUKEE.gif&#34; alt=&#34;Screenshot&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;🤝 参与贡献&lt;/h2&gt; &#xA;&lt;p&gt;Certimate 是一个免费且开源的项目，采用 &lt;a href=&#34;https://raw.githubusercontent.com/usual2970/certimate/main/LICENSE.md&#34;&gt;MIT License&lt;/a&gt;。你可以使用它做任何你想做的事，甚至把它当作一个付费服务提供给用户。&lt;/p&gt; &#xA;&lt;p&gt;你可以通过以下方式来支持 Certimate 的开发：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;提交代码：如果你发现了 Bug 或有新的功能需求，而你又有相关经验，可以&lt;a href=&#34;https://raw.githubusercontent.com/usual2970/certimate/main/CONTRIBUTING.md&#34;&gt;提交代码&lt;/a&gt;给我们。&lt;/li&gt; &#xA; &lt;li&gt;提交 Issue：功能建议或者 Bug 可以&lt;a href=&#34;https://github.com/usual2970/certimate/issues&#34;&gt;提交 Issue&lt;/a&gt; 给我们。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;支持更多提供商、UI 的优化改进、Bug 修复、文档完善等，欢迎大家参与贡献。&lt;/p&gt; &#xA;&lt;h2&gt;⛔ 免责声明&lt;/h2&gt; &#xA;&lt;p&gt;Certimate 基于 &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;MIT License&lt;/a&gt; 发布，完全免费提供，旨在“按现状”供用户使用。作者及贡献者不对使用本软件所产生的任何直接或间接后果承担责任，包括但不限于性能下降、数据丢失、服务中断、或任何其他类型的损害。&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;无任何保证&lt;/strong&gt;：本软件不提供任何明示或暗示的保证，包括但不限于对特定用途的适用性、无侵权性、商用性及可靠性的保证。&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;用户责任&lt;/strong&gt;：使用本软件即表示您理解并同意承担由此产生的一切风险及责任。&lt;/p&gt; &#xA;&lt;h2&gt;🌐 加入社群&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://t.me/+ZXphsppxUg41YmVl&#34;&gt;Telegram&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;微信群聊（超 200 人需邀请入群，可先加作者好友）&lt;/p&gt; &lt;img src=&#34;https://i.imgur.com/8xwsLTA.png&#34; width=&#34;240&#34;&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;🚀 Star 趋势图&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://starchart.cc/usual2970/certimate&#34;&gt;&lt;img src=&#34;https://starchart.cc/usual2970/certimate.svg?variant=adaptive&#34; alt=&#34;Stargazers over time&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>mark3labs/mcp-go</title>
    <updated>2025-03-09T01:30:28Z</updated>
    <id>tag:github.com,2025-03-09:/mark3labs/mcp-go</id>
    <link href="https://github.com/mark3labs/mcp-go" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Go implementation of the Model Context Protocol (MCP), enabling seamless integration between LLM applications and external data sources and tools.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;MCP Go 🚀&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/mark3labs/mcp-go/actions/workflows/ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/mark3labs/mcp-go/actions/workflows/ci.yml/badge.svg?branch=main&#34; alt=&#34;Build&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/mark3labs/mcp-go&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/mark3labs/mcp-go?cache&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pkg.go.dev/github.com/mark3labs/mcp-go&#34;&gt;&lt;img src=&#34;https://pkg.go.dev/badge/github.com/mark3labs/mcp-go.svg?sanitize=true&#34; alt=&#34;GoDoc&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt;&lt;strong&gt;A Go implementation of the Model Context Protocol (MCP), enabling seamless integration between LLM applications and external data sources and tools.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;    &#34;context&#34;&#xA;    &#34;fmt&#34;&#xA;&#xA;    &#34;github.com/mark3labs/mcp-go/mcp&#34;&#xA;    &#34;github.com/mark3labs/mcp-go/server&#34;&#xA;)&#xA;&#xA;func main() {&#xA;    // Create MCP server&#xA;    s := server.NewMCPServer(&#xA;        &#34;Demo 🚀&#34;,&#xA;        &#34;1.0.0&#34;,&#xA;    )&#xA;&#xA;    // Add tool&#xA;    tool := mcp.NewTool(&#34;hello_world&#34;,&#xA;        mcp.WithDescription(&#34;Say hello to someone&#34;),&#xA;        mcp.WithString(&#34;name&#34;,&#xA;            mcp.Required(),&#xA;            mcp.Description(&#34;Name of the person to greet&#34;),&#xA;        ),&#xA;    )&#xA;&#xA;    // Add tool handler&#xA;    s.AddTool(tool, helloHandler)&#xA;&#xA;    // Start the stdio server&#xA;    if err := server.ServeStdio(s); err != nil {&#xA;        fmt.Printf(&#34;Server error: %v\n&#34;, err)&#xA;    }&#xA;}&#xA;&#xA;func helloHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {&#xA;    name, ok := request.Params.Arguments[&#34;name&#34;].(string)&#xA;    if !ok {&#xA;        return mcp.NewToolResultError(&#34;name must be a string&#34;), nil&#xA;    }&#xA;&#xA;    return mcp.NewToolResultText(fmt.Sprintf(&#34;Hello, %s!&#34;, name)), nil&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;That&#39;s it!&lt;/p&gt; &#xA;&lt;p&gt;MCP Go handles all the complex protocol details and server management, so you can focus on building great tools. It aims to be high-level and easy to use.&lt;/p&gt; &#xA;&lt;h3&gt;Key features:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Fast&lt;/strong&gt;: High-level interface means less code and faster development&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Simple&lt;/strong&gt;: Build MCP servers with minimal boilerplate&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Complete&lt;/strong&gt;*: MCP Go aims to provide a full implementation of the core MCP specification&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;(*emphasis on &lt;em&gt;aims&lt;/em&gt;)&lt;/p&gt; &#xA;&lt;p&gt;🚨 🚧 🏗️ &lt;em&gt;MCP Go is under active development, as is the MCP specification itself. Core features are working but some advanced capabilities are still in progress.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;!-- omit in toc --&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mark3labs/mcp-go/main/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mark3labs/mcp-go/main/#quickstart&#34;&gt;Quickstart&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mark3labs/mcp-go/main/#what-is-mcp&#34;&gt;What is MCP?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mark3labs/mcp-go/main/#core-concepts&#34;&gt;Core Concepts&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mark3labs/mcp-go/main/#server&#34;&gt;Server&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mark3labs/mcp-go/main/#resources&#34;&gt;Resources&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mark3labs/mcp-go/main/#tools&#34;&gt;Tools&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mark3labs/mcp-go/main/#prompts&#34;&gt;Prompts&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mark3labs/mcp-go/main/#examples&#34;&gt;Examples&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mark3labs/mcp-go/main/#contributing&#34;&gt;Contributing&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mark3labs/mcp-go/main/#prerequisites&#34;&gt;Prerequisites&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mark3labs/mcp-go/main/#installation-1&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mark3labs/mcp-go/main/#testing&#34;&gt;Testing&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mark3labs/mcp-go/main/#opening-a-pull-request&#34;&gt;Opening a Pull Request&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;go get github.com/mark3labs/mcp-go&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Quickstart&lt;/h2&gt; &#xA;&lt;p&gt;Let&#39;s create a simple MCP server that exposes a calculator tool and some data:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;    &#34;context&#34;&#xA;    &#34;fmt&#34;&#xA;&#xA;    &#34;github.com/mark3labs/mcp-go/mcp&#34;&#xA;    &#34;github.com/mark3labs/mcp-go/server&#34;&#xA;)&#xA;&#xA;func main() {&#xA;    // Create a new MCP server&#xA;    s := server.NewMCPServer(&#xA;        &#34;Calculator Demo&#34;,&#xA;        &#34;1.0.0&#34;,&#xA;        server.WithResourceCapabilities(true, true),&#xA;        server.WithLogging(),&#xA;    )&#xA;&#xA;    // Add a calculator tool&#xA;    calculatorTool := mcp.NewTool(&#34;calculate&#34;,&#xA;        mcp.WithDescription(&#34;Perform basic arithmetic operations&#34;),&#xA;        mcp.WithString(&#34;operation&#34;,&#xA;            mcp.Required(),&#xA;            mcp.Description(&#34;The operation to perform (add, subtract, multiply, divide)&#34;),&#xA;            mcp.Enum(&#34;add&#34;, &#34;subtract&#34;, &#34;multiply&#34;, &#34;divide&#34;),&#xA;        ),&#xA;        mcp.WithNumber(&#34;x&#34;,&#xA;            mcp.Required(),&#xA;            mcp.Description(&#34;First number&#34;),&#xA;        ),&#xA;        mcp.WithNumber(&#34;y&#34;,&#xA;            mcp.Required(),&#xA;            mcp.Description(&#34;Second number&#34;),&#xA;        ),&#xA;    )&#xA;&#xA;    // Add the calculator handler&#xA;    s.AddTool(calculatorTool, func(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {&#xA;        op := request.Params.Arguments[&#34;operation&#34;].(string)&#xA;        x := request.Params.Arguments[&#34;x&#34;].(float64)&#xA;        y := request.Params.Arguments[&#34;y&#34;].(float64)&#xA;&#xA;        var result float64&#xA;        switch op {&#xA;        case &#34;add&#34;:&#xA;            result = x + y&#xA;        case &#34;subtract&#34;:&#xA;            result = x - y&#xA;        case &#34;multiply&#34;:&#xA;            result = x * y&#xA;        case &#34;divide&#34;:&#xA;            if y == 0 {&#xA;                return mcp.NewToolResultError(&#34;Cannot divide by zero&#34;), nil&#xA;            }&#xA;            result = x / y&#xA;        }&#xA;&#xA;        return mcp.NewToolResultText(fmt.Sprintf(&#34;%.2f&#34;, result)), nil&#xA;    })&#xA;&#xA;    // Start the server&#xA;    if err := server.ServeStdio(s); err != nil {&#xA;        fmt.Printf(&#34;Server error: %v\n&#34;, err)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;What is MCP?&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://modelcontextprotocol.io&#34;&gt;Model Context Protocol (MCP)&lt;/a&gt; lets you build servers that expose data and functionality to LLM applications in a secure, standardized way. Think of it like a web API, but specifically designed for LLM interactions. MCP servers can:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Expose data through &lt;strong&gt;Resources&lt;/strong&gt; (think of these sort of like GET endpoints; they are used to load information into the LLM&#39;s context)&lt;/li&gt; &#xA; &lt;li&gt;Provide functionality through &lt;strong&gt;Tools&lt;/strong&gt; (sort of like POST endpoints; they are used to execute code or otherwise produce a side effect)&lt;/li&gt; &#xA; &lt;li&gt;Define interaction patterns through &lt;strong&gt;Prompts&lt;/strong&gt; (reusable templates for LLM interactions)&lt;/li&gt; &#xA; &lt;li&gt;And more!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Core Concepts&lt;/h2&gt; &#xA;&lt;h3&gt;Server&lt;/h3&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Show Server Examples&lt;/summary&gt; &#xA; &lt;p&gt;The server is your core interface to the MCP protocol. It handles connection management, protocol compliance, and message routing:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Create a basic server&#xA;s := server.NewMCPServer(&#xA;    &#34;My Server&#34;,  // Server name&#xA;    &#34;1.0.0&#34;,     // Version&#xA;)&#xA;&#xA;// Start the server using stdio&#xA;if err := server.ServeStdio(s); err != nil {&#xA;    log.Fatalf(&#34;Server error: %v&#34;, err)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Resources&lt;/h3&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Show Resource Examples&lt;/summary&gt; Resources are how you expose data to LLMs. They can be anything - files, API responses, database queries, system information, etc. Resources can be: &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Static (fixed URI)&lt;/li&gt; &#xA;  &lt;li&gt;Dynamic (using URI templates)&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;p&gt;Here&#39;s a simple example of a static resource:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Static resource example - exposing a README file&#xA;resource := mcp.NewResource(&#xA;    &#34;docs://readme&#34;,&#xA;    &#34;Project README&#34;,&#xA;    mcp.WithResourceDescription(&#34;The project&#39;s README file&#34;), &#xA;    mcp.WithMIMEType(&#34;text/markdown&#34;),&#xA;)&#xA;&#xA;// Add resource with its handler&#xA;s.AddResource(resource, func(ctx context.Context, request mcp.ReadResourceRequest) ([]mcp.ResourceContents, error) {&#xA;    content, err := os.ReadFile(&#34;README.md&#34;)&#xA;    if err != nil {&#xA;        return nil, err&#xA;    }&#xA;    &#xA;    return []mcp.ResourceContents{&#xA;        mcp.TextResourceContents{&#xA;            URI:      &#34;docs://readme&#34;,&#xA;            MIMEType: &#34;text/markdown&#34;,&#xA;            Text:     string(content),&#xA;        },&#xA;    }, nil&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;And here&#39;s an example of a dynamic resource using a template:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Dynamic resource example - user profiles by ID&#xA;template := mcp.NewResourceTemplate(&#xA;    &#34;users://{id}/profile&#34;,&#xA;    &#34;User Profile&#34;,&#xA;    mcp.WithTemplateDescription(&#34;Returns user profile information&#34;),&#xA;    mcp.WithTemplateMIMEType(&#34;application/json&#34;),&#xA;)&#xA;&#xA;// Add template with its handler&#xA;s.AddResourceTemplate(template, func(ctx context.Context, request mcp.ReadResourceRequest) ([]mcp.ResourceContents, error) {&#xA;    // Extract ID from the URI using regex matching&#xA;    // The server automatically matches URIs to templates&#xA;    userID := extractIDFromURI(request.Params.URI)&#xA;    &#xA;    profile, err := getUserProfile(userID)  // Your DB/API call here&#xA;    if err != nil {&#xA;        return nil, err&#xA;    }&#xA;    &#xA;    return []mcp.ResourceContents{&#xA;        mcp.TextResourceContents{&#xA;            URI:      request.Params.URI,&#xA;            MIMEType: &#34;application/json&#34;,&#xA;            Text:     profile,&#xA;        },&#xA;    }, nil&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;The examples are simple but demonstrate the core concepts. Resources can be much more sophisticated - serving multiple contents, integrating with databases or external APIs, etc.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Tools&lt;/h3&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Show Tool Examples&lt;/summary&gt; &#xA; &lt;p&gt;Tools let LLMs take actions through your server. Unlike resources, tools are expected to perform computation and have side effects. They&#39;re similar to POST endpoints in a REST API.&lt;/p&gt; &#xA; &lt;p&gt;Simple calculation example:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;calculatorTool := mcp.NewTool(&#34;calculate&#34;,&#xA;    mcp.WithDescription(&#34;Perform basic arithmetic calculations&#34;),&#xA;    mcp.WithString(&#34;operation&#34;,&#xA;        mcp.Required(),&#xA;        mcp.Description(&#34;The arithmetic operation to perform&#34;),&#xA;        mcp.Enum(&#34;add&#34;, &#34;subtract&#34;, &#34;multiply&#34;, &#34;divide&#34;),&#xA;    ),&#xA;    mcp.WithNumber(&#34;x&#34;,&#xA;        mcp.Required(),&#xA;        mcp.Description(&#34;First number&#34;),&#xA;    ),&#xA;    mcp.WithNumber(&#34;y&#34;,&#xA;        mcp.Required(),&#xA;        mcp.Description(&#34;Second number&#34;),&#xA;    ),&#xA;)&#xA;&#xA;s.AddTool(calculatorTool, func(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {&#xA;    op := request.Params.Arguments[&#34;operation&#34;].(string)&#xA;    x := request.Params.Arguments[&#34;x&#34;].(float64)&#xA;    y := request.Params.Arguments[&#34;y&#34;].(float64)&#xA;&#xA;    var result float64&#xA;    switch op {&#xA;    case &#34;add&#34;:&#xA;        result = x + y&#xA;    case &#34;subtract&#34;:&#xA;        result = x - y&#xA;    case &#34;multiply&#34;:&#xA;        result = x * y&#xA;    case &#34;divide&#34;:&#xA;        if y == 0 {&#xA;            return mcp.NewToolResultError(&#34;Division by zero is not allowed&#34;), nil&#xA;        }&#xA;        result = x / y&#xA;    }&#xA;    &#xA;    return mcp.FormatNumberResult(result), nil&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;HTTP request example:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;httpTool := mcp.NewTool(&#34;http_request&#34;,&#xA;    mcp.WithDescription(&#34;Make HTTP requests to external APIs&#34;),&#xA;    mcp.WithString(&#34;method&#34;,&#xA;        mcp.Required(),&#xA;        mcp.Description(&#34;HTTP method to use&#34;),&#xA;        mcp.Enum(&#34;GET&#34;, &#34;POST&#34;, &#34;PUT&#34;, &#34;DELETE&#34;),&#xA;    ),&#xA;    mcp.WithString(&#34;url&#34;,&#xA;        mcp.Required(),&#xA;        mcp.Description(&#34;URL to send the request to&#34;),&#xA;        mcp.Pattern(&#34;^https?://.*&#34;),&#xA;    ),&#xA;    mcp.WithString(&#34;body&#34;,&#xA;        mcp.Description(&#34;Request body (for POST/PUT)&#34;),&#xA;    ),&#xA;)&#xA;&#xA;s.AddTool(httpTool, func(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {&#xA;    method := request.Params.Arguments[&#34;method&#34;].(string)&#xA;    url := request.Params.Arguments[&#34;url&#34;].(string)&#xA;    body := &#34;&#34;&#xA;    if b, ok := request.Params.Arguments[&#34;body&#34;].(string); ok {&#xA;        body = b&#xA;    }&#xA;&#xA;    // Create and send request&#xA;    var req *http.Request&#xA;    var err error&#xA;    if body != &#34;&#34; {&#xA;        req, err = http.NewRequest(method, url, strings.NewReader(body))&#xA;    } else {&#xA;        req, err = http.NewRequest(method, url, nil)&#xA;    }&#xA;    if err != nil {&#xA;        return mcp.NewToolResultError(fmt.Sprintf(&#34;Failed to create request: %v&#34;, err)), nil&#xA;    }&#xA;&#xA;    client := &amp;amp;http.Client{}&#xA;    resp, err := client.Do(req)&#xA;    if err != nil {&#xA;        return mcp.NewToolResultError(fmt.Sprintf(&#34;Request failed: %v&#34;, err)), nil&#xA;    }&#xA;    defer resp.Body.Close()&#xA;&#xA;    // Return response&#xA;    respBody, err := io.ReadAll(resp.Body)&#xA;    if err != nil {&#xA;        return mcp.NewToolResultError(fmt.Sprintf(&#34;Failed to read response: %v&#34;, err)), nil&#xA;    }&#xA;&#xA;    return mcp.NewToolResultText(fmt.Sprintf(&#34;Status: %d\nBody: %s&#34;, resp.StatusCode, string(respBody))), nil&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Tools can be used for any kind of computation or side effect:&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Database queries&lt;/li&gt; &#xA;  &lt;li&gt;File operations&lt;/li&gt; &#xA;  &lt;li&gt;External API calls&lt;/li&gt; &#xA;  &lt;li&gt;Calculations&lt;/li&gt; &#xA;  &lt;li&gt;System operations&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;p&gt;Each tool should:&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Have a clear description&lt;/li&gt; &#xA;  &lt;li&gt;Validate inputs&lt;/li&gt; &#xA;  &lt;li&gt;Handle errors gracefully&lt;/li&gt; &#xA;  &lt;li&gt;Return structured responses&lt;/li&gt; &#xA;  &lt;li&gt;Use appropriate result types&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Prompts&lt;/h3&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Show Prompt Examples&lt;/summary&gt; &#xA; &lt;p&gt;Prompts are reusable templates that help LLMs interact with your server effectively. They&#39;re like &#34;best practices&#34; encoded into your server. Here are some examples:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Simple greeting prompt&#xA;s.AddPrompt(mcp.NewPrompt(&#34;greeting&#34;,&#xA;    mcp.WithPromptDescription(&#34;A friendly greeting prompt&#34;),&#xA;    mcp.WithArgument(&#34;name&#34;,&#xA;        mcp.ArgumentDescription(&#34;Name of the person to greet&#34;),&#xA;    ),&#xA;), func(ctx context.Context, request mcp.GetPromptRequest) (*mcp.GetPromptResult, error) {&#xA;    name := request.Params.Arguments[&#34;name&#34;].(string)&#xA;    if name == &#34;&#34; {&#xA;        name = &#34;friend&#34;&#xA;    }&#xA;    &#xA;    return mcp.NewGetPromptResult(&#xA;        &#34;A friendly greeting&#34;,&#xA;        []mcp.PromptMessage{&#xA;            mcp.NewPromptMessage(&#xA;                mcp.RoleAssistant,&#xA;                mcp.NewTextContent(fmt.Sprintf(&#34;Hello, %s! How can I help you today?&#34;, name)),&#xA;            ),&#xA;        },&#xA;    ), nil&#xA;})&#xA;&#xA;// Code review prompt with embedded resource&#xA;s.AddPrompt(mcp.NewPrompt(&#34;code_review&#34;,&#xA;    mcp.WithPromptDescription(&#34;Code review assistance&#34;),&#xA;    mcp.WithArgument(&#34;pr_number&#34;,&#xA;        mcp.ArgumentDescription(&#34;Pull request number to review&#34;),&#xA;        mcp.RequiredArgument(),&#xA;    ),&#xA;), func(ctx context.Context, request mcp.GetPromptRequest) (*mcp.GetPromptResult, error) {&#xA;    prNumber := request.Params.Arguments[&#34;pr_number&#34;].(string)&#xA;    if prNumber == &#34;&#34; {&#xA;        return nil, fmt.Errorf(&#34;pr_number is required&#34;)&#xA;    }&#xA;    &#xA;    return mcp.NewGetPromptResult(&#xA;        &#34;Code review assistance&#34;,&#xA;        []mcp.PromptMessage{&#xA;            mcp.NewPromptMessage(&#xA;                mcp.RoleSystem,&#xA;                mcp.NewTextContent(&#34;You are a helpful code reviewer. Review the changes and provide constructive feedback.&#34;),&#xA;            ),&#xA;            mcp.NewPromptMessage(&#xA;                mcp.RoleAssistant,&#xA;                mcp.NewEmbeddedResource(mcp.ResourceContents{&#xA;                    URI: fmt.Sprintf(&#34;git://pulls/%s/diff&#34;, prNumber),&#xA;                    MIMEType: &#34;text/x-diff&#34;,&#xA;                }),&#xA;            ),&#xA;        },&#xA;    ), nil&#xA;})&#xA;&#xA;// Database query builder prompt&#xA;s.AddPrompt(mcp.NewPrompt(&#34;query_builder&#34;,&#xA;    mcp.WithPromptDescription(&#34;SQL query builder assistance&#34;),&#xA;    mcp.WithArgument(&#34;table&#34;,&#xA;        mcp.ArgumentDescription(&#34;Name of the table to query&#34;),&#xA;        mcp.RequiredArgument(),&#xA;    ),&#xA;), func(ctx context.Context, request mcp.GetPromptRequest) (*mcp.GetPromptResult, error) {&#xA;    tableName := request.Params.Arguments[&#34;table&#34;].(string)&#xA;    if tableName == &#34;&#34; {&#xA;        return nil, fmt.Errorf(&#34;table name is required&#34;)&#xA;    }&#xA;    &#xA;    return mcp.NewGetPromptResult(&#xA;        &#34;SQL query builder assistance&#34;,&#xA;        []mcp.PromptMessage{&#xA;            mcp.NewPromptMessage(&#xA;                mcp.RoleSystem,&#xA;                mcp.NewTextContent(&#34;You are a SQL expert. Help construct efficient and safe queries.&#34;),&#xA;            ),&#xA;            mcp.NewPromptMessage(&#xA;                mcp.RoleAssistant,&#xA;                mcp.NewEmbeddedResource(mcp.ResourceContents{&#xA;                    URI: fmt.Sprintf(&#34;db://schema/%s&#34;, tableName),&#xA;                    MIMEType: &#34;application/json&#34;,&#xA;                }),&#xA;            ),&#xA;        },&#xA;    ), nil&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Prompts can include:&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;System instructions&lt;/li&gt; &#xA;  &lt;li&gt;Required arguments&lt;/li&gt; &#xA;  &lt;li&gt;Embedded resources&lt;/li&gt; &#xA;  &lt;li&gt;Multiple messages&lt;/li&gt; &#xA;  &lt;li&gt;Different content types (text, images, etc.)&lt;/li&gt; &#xA;  &lt;li&gt;Custom URI schemes&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;p&gt;For examples, see the &lt;code&gt;examples/&lt;/code&gt; directory.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;h3&gt;Open Developer Guide&lt;/h3&gt;&lt;/summary&gt; &#xA; &lt;h3&gt;Prerequisites&lt;/h3&gt; &#xA; &lt;p&gt;Go version &amp;gt;= 1.23&lt;/p&gt; &#xA; &lt;h3&gt;Installation&lt;/h3&gt; &#xA; &lt;p&gt;Create a fork of this repository, then clone it:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/mark3labs/mcp-go.git&#xA;cd mcp-go&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h3&gt;Testing&lt;/h3&gt; &#xA; &lt;p&gt;Please make sure to test any new functionality. Your tests should be simple and atomic and anticipate change rather than cement complex patterns.&lt;/p&gt; &#xA; &lt;p&gt;Run tests from the root directory:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;go test -v &#39;./...&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h3&gt;Opening a Pull Request&lt;/h3&gt; &#xA; &lt;p&gt;Fork the repository and create a new branch:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git checkout -b my-branch&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Make your changes and commit them:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git add . &amp;amp;&amp;amp; git commit -m &#34;My changes&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Push your changes to your fork:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git push origin my-branch&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Feel free to reach out in a GitHub issue or discussion if you have any questions!&lt;/p&gt; &#xA;&lt;/details&gt;</summary>
  </entry>
</feed>