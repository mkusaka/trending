<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-12-14T01:34:07Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>awslabs/eks-node-viewer</title>
    <updated>2022-12-14T01:34:07Z</updated>
    <id>tag:github.com,2022-12-14:/awslabs/eks-node-viewer</id>
    <link href="https://github.com/awslabs/eks-node-viewer" rel="alternate"></link>
    <summary type="html">&lt;p&gt;EKS Node Viewer&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/awslabs/eks-node-viewer/raw/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-Apache%202.0-ff69b4.svg?sanitize=true&#34; alt=&#34;GitHub License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/aws/karpenter/issues&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/contributions-welcome-brightgreen.svg?style=flat&#34; alt=&#34;contributions welcome&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;eks-node-viewer&lt;/code&gt; is a tool for visualizing dynamic node usage within a cluster. It was originally developed as an internal tool at AWS for demonstrating consolidation with &lt;a href=&#34;https://karpenter.sh/&#34;&gt;Karpenter&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/awslabs/eks-node-viewer/main/.static/screenshot.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Talks Using eks-node-viewer&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=BnksdJ3oOEs&#34;&gt;Containers from the Couch: Workload Consolidation with Karpenter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=OB7IZolZk78&#34;&gt;AWS re:Invent 2022 - Kubernetes virtually anywhere, for everyone&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;go install github.com/awslabs/eks-node-viewer/cmd/eks-node-viewer@latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Standard Usage&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;eks-node-viewer&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Karpenter Nodes Only&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;eks-node-viewer --nodeSelector &#34;karpenter.sh/provisioner-name&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Display CPU and Memory Usage&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;eks-node-viewer --resources cpu,memory&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Troubleshooting&lt;/h3&gt; &#xA;&lt;h4&gt;NoCredentialProviders: no valid providers in chain. Deprecated.&lt;/h4&gt; &#xA;&lt;p&gt;This CLI relies on AWS credentials to access pricing data. You must have credentials configured via &lt;code&gt;~/aws/credentials&lt;/code&gt;, &lt;code&gt;~/.aws/config&lt;/code&gt;, environment variables, or some other credential provider chain.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://docs.aws.amazon.com/sdk-for-go/api/aws/session/&#34;&gt;credential provider documentation&lt;/a&gt; for more.&lt;/p&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;h3&gt;Building&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ make build&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>mongodb/mongo-go-driver</title>
    <updated>2022-12-14T01:34:07Z</updated>
    <id>tag:github.com,2022-12-14:/mongodb/mongo-go-driver</id>
    <link href="https://github.com/mongodb/mongo-go-driver" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The Official Golang driver for MongoDB&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/mongodb/mongo-go-driver/master/etc/assets/mongo-gopher.png&#34; width=&#34;250&#34;&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://goreportcard.com/report/go.mongodb.org/mongo-driver&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/go.mongodb.org/mongo-driver&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pkg.go.dev/go.mongodb.org/mongo-driver/mongo&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/mongodb/mongo-go-driver/master/etc/assets/godev-mongo-blue.svg?sanitize=true&#34; alt=&#34;docs&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pkg.go.dev/go.mongodb.org/mongo-driver/bson&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/mongodb/mongo-go-driver/master/etc/assets/godev-bson-blue.svg?sanitize=true&#34; alt=&#34;docs&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.mongodb.com/docs/drivers/go/current/&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/mongodb/mongo-go-driver/master/etc/assets/docs-mongodb-green.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;h1&gt;MongoDB Go Driver&lt;/h1&gt; &#xA;&lt;p&gt;The MongoDB supported driver for Go.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mongodb/mongo-go-driver/master/#requirements&#34;&gt;Requirements&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mongodb/mongo-go-driver/master/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mongodb/mongo-go-driver/master/#usage&#34;&gt;Usage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mongodb/mongo-go-driver/master/#feedback&#34;&gt;Feedback&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mongodb/mongo-go-driver/master/#testing--development&#34;&gt;Testing / Development&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mongodb/mongo-go-driver/master/#continuous-integration&#34;&gt;Continuous Integration&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mongodb/mongo-go-driver/master/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Go 1.13 or higher. We aim to support the latest versions of Go. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Go 1.18 or higher is required to run the driver test suite.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;MongoDB 3.6 and higher.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;The recommended way to get started using the MongoDB Go driver is by using Go modules to install the dependency in your project. This can be done either by importing packages from &lt;code&gt;go.mongodb.org/mongo-driver&lt;/code&gt; and having the build step install the dependency or by explicitly running&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;go get go.mongodb.org/mongo-driver/mongo&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When using a version of Go that does not support modules, the driver can be installed using &lt;code&gt;dep&lt;/code&gt; by running&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;dep ensure -add &#34;go.mongodb.org/mongo-driver/mongo&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;To get started with the driver, import the &lt;code&gt;mongo&lt;/code&gt; package and create a &lt;code&gt;mongo.Client&lt;/code&gt; with the &lt;code&gt;Connect&lt;/code&gt; function:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;import (&#xA;    &#34;context&#34;&#xA;    &#34;time&#34;&#xA;&#xA;    &#34;go.mongodb.org/mongo-driver/mongo&#34;&#xA;    &#34;go.mongodb.org/mongo-driver/mongo/options&#34;&#xA;    &#34;go.mongodb.org/mongo-driver/mongo/readpref&#34;&#xA;)&#xA;&#xA;ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)&#xA;defer cancel()&#xA;client, err := mongo.Connect(ctx, options.Client().ApplyURI(&#34;mongodb://localhost:27017&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Make sure to defer a call to &lt;code&gt;Disconnect&lt;/code&gt; after instantiating your client:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;defer func() {&#xA;    if err = client.Disconnect(ctx); err != nil {&#xA;        panic(err)&#xA;    }&#xA;}()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more advanced configuration and authentication, see the &lt;a href=&#34;https://pkg.go.dev/go.mongodb.org/mongo-driver/mongo#Connect&#34;&gt;documentation for mongo.Connect&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Calling &lt;code&gt;Connect&lt;/code&gt; does not block for server discovery. If you wish to know if a MongoDB server has been found and connected to, use the &lt;code&gt;Ping&lt;/code&gt; method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;ctx, cancel = context.WithTimeout(context.Background(), 2*time.Second)&#xA;defer cancel()&#xA;err = client.Ping(ctx, readpref.Primary())&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To insert a document into a collection, first retrieve a &lt;code&gt;Database&lt;/code&gt; and then &lt;code&gt;Collection&lt;/code&gt; instance from the &lt;code&gt;Client&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;collection := client.Database(&#34;testing&#34;).Collection(&#34;numbers&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;Collection&lt;/code&gt; instance can then be used to insert documents:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;ctx, cancel = context.WithTimeout(context.Background(), 5*time.Second)&#xA;defer cancel()&#xA;res, err := collection.InsertOne(ctx, bson.D{{&#34;name&#34;, &#34;pi&#34;}, {&#34;value&#34;, 3.14159}})&#xA;id := res.InsertedID&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To use &lt;code&gt;bson.D&lt;/code&gt;, you will need to add &lt;code&gt;&#34;go.mongodb.org/mongo-driver/bson&#34;&lt;/code&gt; to your imports.&lt;/p&gt; &#xA;&lt;p&gt;Your import statement should now look like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;import (&#xA;    &#34;context&#34;&#xA;    &#34;log&#34;&#xA;    &#34;time&#34;&#xA;&#xA;    &#34;go.mongodb.org/mongo-driver/bson&#34;&#xA;    &#34;go.mongodb.org/mongo-driver/mongo&#34;&#xA;    &#34;go.mongodb.org/mongo-driver/mongo/options&#34;&#xA;    &#34;go.mongodb.org/mongo-driver/mongo/readpref&#34;&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Several query methods return a cursor, which can be used like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;ctx, cancel = context.WithTimeout(context.Background(), 30*time.Second)&#xA;defer cancel()&#xA;cur, err := collection.Find(ctx, bson.D{})&#xA;if err != nil { log.Fatal(err) }&#xA;defer cur.Close(ctx)&#xA;for cur.Next(ctx) {&#xA;    var result bson.D&#xA;    err := cur.Decode(&amp;amp;result)&#xA;    if err != nil { log.Fatal(err) }&#xA;    // do something with result....&#xA;}&#xA;if err := cur.Err(); err != nil {&#xA;    log.Fatal(err)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For methods that return a single item, a &lt;code&gt;SingleResult&lt;/code&gt; instance is returned:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;var result struct {&#xA;    Value float64&#xA;}&#xA;filter := bson.D{{&#34;name&#34;, &#34;pi&#34;}}&#xA;ctx, cancel = context.WithTimeout(context.Background(), 5*time.Second)&#xA;defer cancel()&#xA;err = collection.FindOne(ctx, filter).Decode(&amp;amp;result)&#xA;if err == mongo.ErrNoDocuments {&#xA;    // Do something when no record was found&#xA;    fmt.Println(&#34;record does not exist&#34;)&#xA;} else if err != nil {&#xA;    log.Fatal(err)&#xA;}&#xA;// Do something with result...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Additional examples and documentation can be found under the examples directory and &lt;a href=&#34;https://www.mongodb.com/docs/drivers/go/current/&#34;&gt;on the MongoDB Documentation website&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Feedback&lt;/h2&gt; &#xA;&lt;p&gt;For help with the driver, please post in the &lt;a href=&#34;https://developer.mongodb.com/community/forums/tag/golang/&#34;&gt;MongoDB Community Forums&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;New features and bugs can be reported on jira: &lt;a href=&#34;https://jira.mongodb.org/browse/GODRIVER&#34;&gt;https://jira.mongodb.org/browse/GODRIVER&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Testing / Development&lt;/h2&gt; &#xA;&lt;p&gt;The driver tests can be run against several database configurations. The most simple configuration is a standalone mongod with no auth, no ssl, and no compression. To run these basic driver tests, make sure a standalone MongoDB server instance is running at localhost:27017. To run the tests, you can run &lt;code&gt;make&lt;/code&gt; (on Windows, run &lt;code&gt;nmake&lt;/code&gt;). This will run coverage, run go-lint, run go-vet, and build the examples.&lt;/p&gt; &#xA;&lt;h3&gt;Testing Different Topologies&lt;/h3&gt; &#xA;&lt;p&gt;To test a &lt;strong&gt;replica set&lt;/strong&gt; or &lt;strong&gt;sharded cluster&lt;/strong&gt;, set &lt;code&gt;MONGODB_URI=&#34;&amp;lt;connection-string&amp;gt;&#34;&lt;/code&gt; for the &lt;code&gt;make&lt;/code&gt; command. For example, for a local replica set named &lt;code&gt;rs1&lt;/code&gt; comprised of three nodes on ports 27017, 27018, and 27019:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;MONGODB_URI=&#34;mongodb://localhost:27017,localhost:27018,localhost:27019/?replicaSet=rs1&#34; make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Testing Auth and TLS&lt;/h3&gt; &#xA;&lt;p&gt;To test authentication and TLS, first set up a MongoDB cluster with auth and TLS configured. Testing authentication requires a user with the &lt;code&gt;root&lt;/code&gt; role on the &lt;code&gt;admin&lt;/code&gt; database. Here is an example command that would run a mongod with TLS correctly configured for tests. Either set or replace PATH_TO_SERVER_KEY_FILE and PATH_TO_CA_FILE with paths to their respective files:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;mongod \&#xA;--auth \&#xA;--tlsMode requireTLS \&#xA;--tlsCertificateKeyFile $PATH_TO_SERVER_KEY_FILE \&#xA;--tlsCAFile $PATH_TO_CA_FILE \&#xA;--tlsAllowInvalidCertificates&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To run the tests with &lt;code&gt;make&lt;/code&gt;, set:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;MONGO_GO_DRIVER_CA_FILE&lt;/code&gt; to the location of the CA file used by the database&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;MONGO_GO_DRIVER_KEY_FILE&lt;/code&gt; to the location of the client key file&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;MONGO_GO_DRIVER_PKCS8_ENCRYPTED_KEY_FILE&lt;/code&gt; to the location of the pkcs8 client key file encrypted with the password string: &lt;code&gt;password&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;MONGO_GO_DRIVER_PKCS8_UNENCRYPTED_KEY_FILE&lt;/code&gt; to the location of the unencrypted pkcs8 key file&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;MONGODB_URI&lt;/code&gt; to the connection string of the server&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;AUTH=auth&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;SSL=ssl&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;AUTH=auth SSL=ssl \&#xA;MONGO_GO_DRIVER_CA_FILE=$PATH_TO_CA_FILE \&#xA;MONGO_GO_DRIVER_KEY_FILE=$PATH_TO_CLIENT_KEY_FILE \&#xA;MONGO_GO_DRIVER_PKCS8_ENCRYPTED_KEY_FILE=$PATH_TO_ENCRYPTED_KEY_FILE \&#xA;MONGO_GO_DRIVER_PKCS8_UNENCRYPTED_KEY_FILE=$PATH_TO_UNENCRYPTED_KEY_FILE \&#xA;MONGODB_URI=&#34;mongodb://user:password@localhost:27017/?authSource=admin&#34; \&#xA;make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Notes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The &lt;code&gt;--tlsAllowInvalidCertificates&lt;/code&gt; flag is required on the server for the test suite to work correctly.&lt;/li&gt; &#xA; &lt;li&gt;The test suite requires the auth database to be set with &lt;code&gt;?authSource=admin&lt;/code&gt;, not &lt;code&gt;/admin&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Testing Compression&lt;/h3&gt; &#xA;&lt;p&gt;The MongoDB Go Driver supports wire protocol compression using Snappy, zLib, or zstd. To run tests with wire protocol compression, set &lt;code&gt;MONGO_GO_DRIVER_COMPRESSOR&lt;/code&gt; to &lt;code&gt;snappy&lt;/code&gt;, &lt;code&gt;zlib&lt;/code&gt;, or &lt;code&gt;zstd&lt;/code&gt;. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;MONGO_GO_DRIVER_COMPRESSOR=snappy make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Ensure the &lt;a href=&#34;https://www.mongodb.com/docs/manual/reference/program/mongod/#cmdoption-mongod-networkmessagecompressors&#34;&gt;&lt;code&gt;--networkMessageCompressors&lt;/code&gt; flag&lt;/a&gt; on mongod or mongos includes &lt;code&gt;zlib&lt;/code&gt; if testing zLib compression.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Contribution&lt;/h2&gt; &#xA;&lt;p&gt;Check out the &lt;a href=&#34;https://jira.mongodb.org/browse/GODRIVER&#34;&gt;project page&lt;/a&gt; for tickets that need completing. See our &lt;a href=&#34;https://raw.githubusercontent.com/mongodb/mongo-go-driver/master/docs/CONTRIBUTING.md&#34;&gt;contribution guidelines&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Continuous Integration&lt;/h2&gt; &#xA;&lt;p&gt;Commits to master are run automatically on &lt;a href=&#34;https://evergreen.mongodb.com/waterfall/mongo-go-driver&#34;&gt;evergreen&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Frequently Encountered Issues&lt;/h2&gt; &#xA;&lt;p&gt;See our &lt;a href=&#34;https://raw.githubusercontent.com/mongodb/mongo-go-driver/master/docs/common-issues.md&#34;&gt;common issues&lt;/a&gt; documentation for troubleshooting frequently encountered issues.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Thanks and Acknowledgement&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/ashleymcnamara&#34;&gt;@ashleymcnamara&lt;/a&gt; - Mongo Gopher Artwork&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The MongoDB Go Driver is licensed under the &lt;a href=&#34;https://raw.githubusercontent.com/mongodb/mongo-go-driver/master/LICENSE&#34;&gt;Apache License&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>mtgnorton/cp-v2</title>
    <updated>2022-12-14T01:34:07Z</updated>
    <id>tag:github.com,2022-12-14:/mtgnorton/cp-v2</id>
    <link href="https://github.com/mtgnorton/cp-v2" rel="alternate"></link>
    <summary type="html">&lt;p&gt;模拟v2ex的论坛系统&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;内容列表&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mtgnorton/cp-v2/main/#%E4%BB%8B%E7%BB%8D&#34;&gt;介绍&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mtgnorton/cp-v2/main/#%E6%8A%80%E6%9C%AF%E6%A0%88%E5%92%8C%E4%BE%9D%E8%B5%96&#34;&gt;技术栈和依赖&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mtgnorton/cp-v2/main/#%E7%9B%AE%E5%BD%95%E4%BB%8B%E7%BB%8D&#34;&gt;目录介绍&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mtgnorton/cp-v2/main/#%E5%AE%89%E8%A3%85%E5%92%8C%E8%BF%90%E8%A1%8C&#34;&gt;安装和运行&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mtgnorton/cp-v2/main/#%E9%A1%B9%E7%9B%AE%E6%88%AA%E5%9B%BE&#34;&gt;项目截图&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mtgnorton/cp-v2/main/#%E7%9B%B8%E5%85%B3%E4%BB%93%E5%BA%93&#34;&gt;相关仓库&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;介绍&lt;/h2&gt; &#xA;&lt;p&gt;该项目相当于一个简单版的v2ex,用户端界面完全模仿&lt;a href=&#34;https://www.v2ex.com&#34;&gt;v2ex&lt;/a&gt;,用户端模板设计版权归&lt;a href=&#34;https://www.v2ex.com/member/livid&#34;&gt;livid&lt;/a&gt; 所有,该论坛完成了基本的论坛功能， 用户端页面自适应,演示地址 &lt;a href=&#34;http://cp-v2.mtgnorton.xyz/k/all&#34;&gt;http://cp-v2.mtgnorton.xyz/k/all&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;论坛主要功能&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;邮箱注册和登录&lt;/li&gt; &#xA; &lt;li&gt;创建主题和回复&lt;/li&gt; &#xA; &lt;li&gt;基于cfa的敏感词过滤&lt;/li&gt; &#xA; &lt;li&gt;关注｜屏蔽|感谢 用户|主题|回复&lt;/li&gt; &#xA; &lt;li&gt;收藏主题&lt;/li&gt; &#xA; &lt;li&gt;消息提醒&lt;/li&gt; &#xA; &lt;li&gt;个人中心&lt;/li&gt; &#xA; &lt;li&gt;积分系统&lt;/li&gt; &#xA; &lt;li&gt;无限层节点&lt;/li&gt; &#xA; &lt;li&gt;seo友好&lt;/li&gt; &#xA; &lt;li&gt;主题和回复搜索&lt;/li&gt; &#xA; &lt;li&gt;实时在线用户&lt;/li&gt; &#xA; &lt;li&gt;主题置顶&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;后台基础功能&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;基础cabin实现的的rabc权限管理&lt;/li&gt; &#xA; &lt;li&gt;管理员管理，角色管理&lt;/li&gt; &#xA; &lt;li&gt;动态菜单和路由&lt;/li&gt; &#xA; &lt;li&gt;管理员操作日志&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;后续会继续进行完善&lt;/p&gt; &#xA;&lt;h2&gt;技术栈和依赖&lt;/h2&gt; &#xA;&lt;p&gt;后端语言为golang,框架为goframe2.0,后台为前后端分离，前端使用vue2.6+element,前台为传统的模版渲染，前台全局只依赖jquery,前后台富文本编辑器均使用quill,数据库使用mysql,关于项目的模块化设计参见:&lt;a href=&#34;https://goframe.org/pages/viewpage.action?pageId=3672891&#34;&gt;https://goframe.org/pages/viewpage.action?pageId=3672891&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;目录介绍&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-azure&#34;&gt;app&#xA;├── dao&#xA;├── dto&#xA;├── model 全局定义层&#xA;├── shared 全局service层&#xA;├── system &#xA;    ├── admin 后台模块&#xA;        ├── controller 后台控制器层 &#xA;        ├── define 后台定义层&#xA;        ├── service 后台服务层&#xA;        &#xA;    ├── index 前台模块&#xA;        ├── controller 前台控制器层&#xA;        ├── define 前台定义层&#xA;        ├── service 前台服务层&#xA;assist&#xA;    ├── generate_dao.go 生成dao层,entity层,dto层 代码&#xA;config 配置文件目录&#xA;docker docker部署目录&#xA;public 静态资源目录和web根目录&#xA;runtime 运行时目录&#xA;temp 编译后的文件存放目录&#xA;template &#xA;    ├── admin 后台模板目录&#xA;    ├── index 前台模板目录&#xA;utility 工具函数目录    &#xA;compile-front.sh 将后台前端打包后的文件复制到public目录&#xA;docker-build.sh 将项目打包成docker镜像    &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;安装和运行&lt;/h2&gt; &#xA;&lt;p&gt;选择配置文件,共有local,dev,prod 三个配置文件,分别对应本地开发,开发环境,生产环境,默认为local 如选择prod,有两种方式,环境变量方式 &lt;code&gt;export V2_ENV=prod;./main&lt;/code&gt; 或者命令行参数方式 &lt;code&gt;./main -v2.env=prod&lt;/code&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;源码运行 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;本地环境要求:go,mysql,redis&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;git clone github.com/mtgnorton/cp-v2&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;将&lt;code&gt;docker/sql/structure_and_data.sql&lt;/code&gt;导入mysql,然后修改config/config-local.toml中的相关配置&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;cd vp-v2&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;go mod init&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;go run main.go&lt;/code&gt; 或&lt;code&gt;gf run main.go&lt;/code&gt;此时需要安装goframe框架的gf命令,gf命令可以自动编译运行&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;普通运行 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;本地环境要求:mysql,redis&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;git clone github.com/mtgnorton/cp-v2&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;将&lt;code&gt;docker/sql/structure_and_data.sql&lt;/code&gt;导入mysql,然后修改config/config-local.toml中的相关配置&lt;/li&gt; &#xA;   &lt;li&gt;temp目录下有编译好的二进制文件,另外需要config目录和public目录,将main，config目录和public目录放在同一目录下&lt;/li&gt; &#xA;   &lt;li&gt;最后执行&lt;code&gt;./main&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;docker运行 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;需要docker compose 版本大于等于2&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;git clone github.com/mtgnorton/cp-v2&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;cd docker&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;docker-compose up&lt;/code&gt;启动,&lt;code&gt;docker/data&lt;/code&gt;为运行时的目录&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;项目截图&lt;/h2&gt; &#xA;&lt;h3&gt;后台&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/mtgnorton/cp-v2/main/screenshots/img.png&#34; alt=&#34;img.png&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/mtgnorton/cp-v2/main/screenshots/img_1.png&#34; alt=&#34;img_1.png&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/mtgnorton/cp-v2/main/screenshots/img_2.png&#34; alt=&#34;img_2.png&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;前台pc端&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/mtgnorton/cp-v2/main/screenshots/img_3.png&#34; alt=&#34;img_3.png&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/mtgnorton/cp-v2/main/screenshots/img_4.png&#34; alt=&#34;img_4.png&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/mtgnorton/cp-v2/main/screenshots/img_5.png&#34; alt=&#34;img_5.png&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;前台h5端&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/mtgnorton/cp-v2/main/screenshots/img_6.png&#34; alt=&#34;img_6.png&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/mtgnorton/cp-v2/main/screenshots/img_7.png&#34; alt=&#34;img_7.png&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/mtgnorton/cp-v2/main/screenshots/img_8.png&#34; alt=&#34;img_8.png&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;相关仓库&lt;/h2&gt; &#xA;&lt;p&gt;后台前端vue项目地址: &lt;a href=&#34;https://github.com/mtgnorton/cp-v2-admin-ui&#34;&gt;https://github.com/mtgnorton/cp-v2-admin-ui&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>