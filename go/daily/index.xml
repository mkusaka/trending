<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-25T01:36:50Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>disksing/sao-gen-gen</title>
    <updated>2022-08-25T01:36:50Z</updated>
    <id>tag:github.com,2022-08-25:/disksing/sao-gen-gen</id>
    <link href="https://github.com/disksing/sao-gen-gen" rel="alternate"></link>
    <summary type="html">&lt;p&gt;骚话生成器生成器&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;骚话生成器生成器&lt;/h1&gt; &#xA;&lt;p&gt;一款用来生成骚话生成器的生成器，通过提交 GitHub Issue 来创建你的生成器！&lt;/p&gt; &#xA;&lt;h2&gt;一些示例&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://disksing.com/sao-gen-gen/1&#34;&gt;营销号生成器&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://disksing.com/sao-gen-gen/2&#34;&gt;胡编生成器&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://disksing.com/sao-gen-gen/3&#34;&gt;苏联笑话生成器&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://disksing.com/sao-gen-gen/17&#34;&gt;防沉迷公告生成器&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://disksing.com/sao-gen-gen/18&#34;&gt;沉迷游戏新闻生成器&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://disksing.com/sao-gen-gen/23&#34;&gt;快过年了&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://disksing.com/sao-gen-gen/24&#34;&gt;有一点失望&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://disksing.com/sao-gen-gen/25&#34;&gt;那种勃勃生机万物竞发的境界犹在眼前&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;工作方式&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/disksing/sao-gen-gen/issues/new?labels=generator&amp;amp;template=generator.md&#34;&gt;使用 GitHub Issue 提交生成器模板&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;GitHub Action 运行完毕后，访问 &lt;code&gt;https://disksing.com/sao-gen-gen/{ISSUE_ID}&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>envoyproxy/go-control-plane</title>
    <updated>2022-08-25T01:36:50Z</updated>
    <id>tag:github.com,2022-08-25:/envoyproxy/go-control-plane</id>
    <link href="https://github.com/envoyproxy/go-control-plane" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Go implementation of data-plane-api&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;control-plane&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/envoyproxy/go-control-plane/actions/workflows/ci.yaml/badge.svg?sanitize=true&#34; alt=&#34;CI Status&#34;&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/envoyproxy/go-control-plane&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/envoyproxy/go-control-plane&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pkg.go.dev/github.com/envoyproxy/go-control-plane&#34;&gt;&lt;img src=&#34;https://pkg.go.dev/badge/github.com/envoyproxy/go-control-plane.svg?sanitize=true&#34; alt=&#34;GoDoc&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This repository contains a Go-based implementation of an API server that implements the discovery service APIs defined in &lt;a href=&#34;https://github.com/envoyproxy/data-plane-api&#34;&gt;data-plane-api&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Scope&lt;/h2&gt; &#xA;&lt;p&gt;Due to the variety of platforms out there, there is no single control plane implementation that can satisfy everyone&#39;s needs. Hence this code base does not attempt to be a full scale control plane for a fleet of Envoy proxies. Instead, it provides infrastructure that is shared by multiple different control plane implementations. The components provided by this library are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;em&gt;API Server:&lt;/em&gt; A generic gRPC based API server that implements xDS APIs as defined in the &lt;a href=&#34;https://github.com/envoyproxy/data-plane-api&#34;&gt;data-plane-api&lt;/a&gt;. The API server is responsible for pushing configuration updates to Envoys. Consumers should be able to import this go library and use the API server as is, in production deployments.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;em&gt;Configuration Cache:&lt;/em&gt; The library will cache Envoy configurations in memory in an attempt to provide fast response to consumer Envoys. It is the responsibility of the consumer of this library to populate the cache as well as invalidate it when necessary. The cache will be keyed based on a pre-defined hash function whose keys are based on the &lt;a href=&#34;https://github.com/envoyproxy/data-plane-api/raw/d4988844024d0bcff4bcd030552eabe3396203fa/api/base.proto#L26-L36&#34;&gt;Node information&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;At this moment, this repository will not tackle translating platform specific representation of resources (e.g., services, instances of services, etc.) into Envoy-style configuration. Based on usage and feedback, we might decided to revisit this aspect at a later point in time.&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Go 1.16+&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Quick start&lt;/h2&gt; &#xA;&lt;p&gt;It&#39;s recommended to run the tests with &lt;code&gt;make docker_tests&lt;/code&gt; as it executes the tests in the same environment as CI. This makes sure to produce a consistent set of generated files.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Build and run tests:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;make docker_tests&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Take a look at the &lt;a href=&#34;https://raw.githubusercontent.com/envoyproxy/go-control-plane/main/internal/example/README.md&#34;&gt;example server&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;XDS API versioning&lt;/h2&gt; &#xA;&lt;p&gt;The Envoy xDS APIs follow a well defined &lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/configuration/overview/versioning&#34;&gt;versioning scheme&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Deprecated&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;V2&lt;/code&gt; control-plane code has been removed and will no longer be supported. For previous conversations on support for various xDS versions, see here:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.google.com/document/d/1ZkHpz6DwEUmAlG0kb2Mgu4iaeQC2Bbb0egMbECoNNKY/edit?ts=5e602993#heading=h.15nsmgmjaaml&#34;&gt;here&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://envoyproxy.slack.com/archives/C7LDJTM6Z/p1582925082005300&#34;&gt;here&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;Note&lt;/em&gt;: It is recommended to use a previous SHA if there is still a need for &lt;code&gt;V2&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Resource caching&lt;/h2&gt; &#xA;&lt;p&gt;Because Envoy clients are assumed to be ephemeral, and thus, can come and go away arbitrarily, the server relies on a configuration cache to minimize the client load on the server. There are several caches available in this repository:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;Simple&lt;/code&gt; cache is a snapshot-based cache that maintains a consistent view of the configuration for each group of proxies. It supports running as an ADS server or as regular dis-aggregated xDS servers. In ADS mode, the cache can hold responses until the complete set of referenced resources is requested (e.g. the entire set of RDS as referenced by LDS). Holding the response enables an atomic update of xDS collections.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;Linear&lt;/code&gt; is an eventually consistent cache for a single type URL collection. The cache maintains a single linear version history and a version vector for the resources in the cache. For each request, it compares the request version against latest versions for the requested resources, and responds with any updated resources. This cache assumes the resources are entirely opaque.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;Mux&lt;/code&gt; cache is a simple cache combinator. It allows mixing multiple caches for different type URLs, e.g use a simple cache for LDS/RDS/CDS and a linear cache for EDS.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/envoyproxy/go-control-plane/main/internal/example/README.md&#34;&gt;example server&lt;/a&gt; demonstrates how to integrate the go-control-plane with your code.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>sealerio/sealer</title>
    <updated>2022-08-25T01:36:50Z</updated>
    <id>tag:github.com,2022-08-25:/sealerio/sealer</id>
    <link href="https://github.com/sealerio/sealer" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A tool to seal application&#39;s all dependencies and Kubernetes into ClusterImage, distribute this application anywhere via ClusterImage, and run it within any cluster in one command.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Sealer -- Build, Share and Run Any Distributed Applications&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/sealerio/sealer/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-Apache%202-brightgreen.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/sealerio/sealer/actions/workflows/go.yml&#34;&gt;&lt;img src=&#34;https://github.com/sealerio/sealer/actions/workflows/go.yml/badge.svg?sanitize=true&#34; alt=&#34;Go&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/sealerio/sealer/actions/workflows/release.yml&#34;&gt;&lt;img src=&#34;https://github.com/sealerio/sealer/actions/workflows/release.yml/badge.svg?sanitize=true&#34; alt=&#34;Release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://godoc.org/github.com/sealerio/sealer&#34;&gt;&lt;img src=&#34;https://godoc.org/github.com/sealerio/sealer?status.svg?sanitize=true&#34; alt=&#34;GoDoc&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://bestpractices.coreinfrastructure.org/en/projects/5205&#34;&gt;&lt;img src=&#34;https://bestpractices.coreinfrastructure.org/projects/5205/badge&#34; alt=&#34;CII Best Practices&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/sealer_oss&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Follow-sealer-1DA1F2?logo=twitter&#34; alt=&#34;Twitter&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://app.fossa.com/projects/git%2Bgithub.com%2Fsealerio%2Fsealer?ref=badge_shield&#34;&gt;&lt;img src=&#34;https://app.fossa.com/api/projects/git%2Bgithub.com%2Fsealerio%2Fsealer.svg?type=shield&#34; alt=&#34;FOSSA Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/sealerio/sealer&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/sealerio/sealer/branch/main/graph/badge.svg?token=LH8XUR5YPL&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sealerio/sealer/main/docs/README_zh.md&#34;&gt;简体中文&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sealerio/sealer/main/#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sealerio/sealer/main/#quick-start&#34;&gt;Quick Start&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sealerio/sealer/main/CONTRIBUTING.md&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sealerio/sealer/main/FAQ.md&#34;&gt;FAQ&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sealerio/sealer/main/Adopters.md&#34;&gt;Adopters&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sealerio/sealer/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sealerio/sealer/main/code-of-conduct.md&#34;&gt;Code of conduct&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;Sealer[ˈsiːlər] provides a new way of distributed application delivery which is reducing the difficulty and complexity by packaging Kubernetes cluster and all application&#39;s dependencies into one ClusterImage.&lt;/p&gt; &#xA;&lt;p&gt;We can write a Kubefile to build the ClusterImage, and use it to deliver your applications with embedded Kubernetes through Clusterfile.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/8912557/117263291-b88b8700-ae84-11eb-8b46-838292e85c5c.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Concept&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Kubefile: a file that describes how to build a ClusterImage.&lt;/li&gt; &#xA; &lt;li&gt;ClusterImage: like docker image, and it contains all the dependencies(container images,yaml files or helm chart...) of your application needed.&lt;/li&gt; &#xA; &lt;li&gt;Clusterfile: a file that describes how to run a ClusterImage.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/8912557/117400612-97cf3a00-af35-11eb-90b9-f5dc8e8117b5.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Awesome features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Simplicity: Packing the distributed application into ClusterImage with few instructions.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Efficiency: Launching the k8s-based application through ClusterImage in minutes.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Scalability: Powerful cluster and image life cycle management, such as cluster scale, upgrade, image load, save and so on.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Compatibility: Multi-arch delivery Supporting. Such as AMD, ARM with common Linux distributions.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Iterative: Incremental operations on ClusterImage is like what container image behaves.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Quick start&lt;/h2&gt; &#xA;&lt;p&gt;Download sealer binary file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;#install Sealer binaries&#xA;wget https://github.com/sealerio/sealer/releases/download/v0.8.6/sealer-v0.8.6-linux-amd64.tar.gz &amp;amp;&amp;amp; \&#xA;tar zxvf sealer-v0.8.6-linux-amd64.tar.gz &amp;amp;&amp;amp; mv sealer /usr/bin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Build a ClusterImage with Kubernetes dashboard:&lt;/p&gt; &#xA;&lt;p&gt;Kubefile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# base ClusterImage contains all the files that run a kubernetes cluster needed.&#xA;#    1. kubernetes components like kubectl kubeadm kubelet and apiserver images ...&#xA;#    2. docker engine, and a private registry&#xA;#    3. config files, yaml, static files, scripts ...&#xA;FROM registry.cn-qingdao.aliyuncs.com/sealer-io/kubernetes:v1.19.8&#xA;# download kubernetes dashboard yaml file&#xA;RUN wget https://raw.githubusercontent.com/kubernetes/dashboard/v2.2.0/aio/deploy/recommended.yaml&#xA;# when run this ClusterImage, will apply a dashboard manifests&#xA;CMD kubectl apply -f recommended.yaml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Build it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sealer build -t registry.cn-qingdao.aliyuncs.com/sealer-io/dashboard:latest .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Make it run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# sealer will install a kubernetes on host 192.168.0.2 then apply the dashboard manifests&#xA;sealer run registry.cn-qingdao.aliyuncs.com/sealer-io/dashboard:latest --masters 192.168.0.2 --passwd xxx&#xA;# check the pod&#xA;kubectl get pod -A|grep dashboard&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Push the ClusterImage to the registry&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# you can push the ClusterImage to docker hub, Ali ACR, or Harbor&#xA;sealer push registry.cn-qingdao.aliyuncs.com/sealer-io/dashboard:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;User guide&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://sealer.cool/docs/getting-started/introduction.html&#34;&gt;get started&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Official website&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://sealer.cool&#34;&gt;official website&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Developing Sealer&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sealerio/sealer/main/CONTRIBUTING.md&#34;&gt;contributing guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sealerio/sealer/main/docs/contributing_zh.md&#34;&gt;贡献文档&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Communication Channels&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;CNCF Mailing List: to be added.&lt;/li&gt; &#xA; &lt;li&gt;Twitter: &lt;a href=&#34;https://twitter.com/sealer_oss&#34;&gt;@sealer&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;DingTalk Group Number: 34619594&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- markdownlint-disable --&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://user-images.githubusercontent.com/9465626/167836908-65ca12e0-4600-44d4-b3bd-8b93d27600fb.png&#34; width=&#34;300&#34; title=&#34;dingtalk&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;!-- markdownlint-restore --&gt; &#xA;&lt;h2&gt;Code of Conduct&lt;/h2&gt; &#xA;&lt;p&gt;sealer follows the &lt;a href=&#34;https://github.com/cncf/foundation/raw/master/code-of-conduct.md&#34;&gt;CNCF Code of Conduct&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Sealer is licensed under the Apache License, Version 2.0. See &lt;a href=&#34;https://raw.githubusercontent.com/sealerio/sealer/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt; for the full license text.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://app.fossa.com/projects/git%2Bgithub.com%2Fsealerio%2Fsealer?ref=badge_large&#34;&gt;&lt;img src=&#34;https://app.fossa.com/api/projects/git%2Bgithub.com%2Fsealerio%2Fsealer.svg?type=large&#34; alt=&#34;FOSSA Status&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>