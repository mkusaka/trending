<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-01-29T01:36:28Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>vmware/govmomi</title>
    <updated>2023-01-29T01:36:28Z</updated>
    <id>tag:github.com,2023-01-29:/vmware/govmomi</id>
    <link href="https://github.com/vmware/govmomi" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Go library for the VMware vSphere API&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/vmware/govmomi/actions/workflows/govmomi-build.yaml&#34;&gt;&lt;img src=&#34;https://github.com/vmware/govmomi/actions/workflows/govmomi-build.yaml/badge.svg?sanitize=true&#34; alt=&#34;Build&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/vmware/govmomi/actions/workflows/govmomi-go-tests.yaml&#34;&gt;&lt;img src=&#34;https://github.com/vmware/govmomi/actions/workflows/govmomi-go-tests.yaml/badge.svg?sanitize=true&#34; alt=&#34;Tests&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/vmware/govmomi&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/vmware/govmomi&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/vmware/govmomi/releases/latest&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/vmware/govmomi.svg?logo=github&amp;amp;style=flat-square&#34; alt=&#34;Latest Release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pkg.go.dev/github.com/vmware/govmomi&#34;&gt;&lt;img src=&#34;https://pkg.go.dev/badge/github.com/vmware/govmomi.svg?sanitize=true&#34; alt=&#34;Go Reference&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/vmware/govmomi&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/go-mod/go-version/vmware/govmomi&#34; alt=&#34;go.mod Go version&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;govmomi&lt;/h1&gt; &#xA;&lt;p&gt;A Go library for interacting with VMware vSphere APIs (ESXi and/or vCenter Server).&lt;/p&gt; &#xA;&lt;p&gt;In addition to the vSphere API client, this repository includes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/vmware/govmomi/main/govc/README.md&#34;&gt;govc&lt;/a&gt; - vSphere CLI&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/vmware/govmomi/main/vcsim/README.md&#34;&gt;vcsim&lt;/a&gt; - vSphere API mock framework&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/vmware/govmomi/main/toolbox/README.md&#34;&gt;toolbox&lt;/a&gt; - VM guest tools framework&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Compatibility&lt;/h2&gt; &#xA;&lt;p&gt;This library supports vCenter Server and ESXi versions following the &lt;a href=&#34;https://lifecycle.vmware.com&#34;&gt;VMware Product Lifecycle Matrix&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Product versions that are end of support may work, but are not officially supported.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;The APIs exposed by this library closely follow the API described in the &lt;a href=&#34;https://developer.vmware.com/apis/968/vsphere&#34;&gt;VMware vSphere API Reference Documentation&lt;/a&gt;. Refer to the documentation to become familiar with the upstream API.&lt;/p&gt; &#xA;&lt;p&gt;The code in the &lt;code&gt;govmomi&lt;/code&gt; package is a wrapper for the code that is generated from the vSphere API description. It primarily provides convenience functions for working with the vSphere API. See &lt;a href=&#34;http://godoc.org/github.com/vmware/govmomi&#34;&gt;godoc.org&lt;/a&gt; for documentation.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;govmomi (Package)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;go get -u github.com/vmware/govmomi&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Binaries and Docker Images for &lt;code&gt;govc&lt;/code&gt; and &lt;code&gt;vcsim&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Installation instructions, released binaries, and Docker images are documented in the respective README files of &lt;a href=&#34;https://raw.githubusercontent.com/vmware/govmomi/main/govc/README.md&#34;&gt;&lt;code&gt;govc&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/vmware/govmomi/main/vcsim/README.md&#34;&gt;&lt;code&gt;vcsim&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Discussion&lt;/h2&gt; &#xA;&lt;p&gt;The project encourages the community to collaborate using GitHub &lt;a href=&#34;https://github.com/vmware/govmomi/issues&#34;&gt;issues&lt;/a&gt;, GitHub &lt;a href=&#34;https://github.com/vmware/govmomi/discussions&#34;&gt;discussions&lt;/a&gt;, and &lt;a href=&#34;https://vmwarecode.slack.com/messages/govmomi&#34;&gt;Slack&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; Access to Slack requires a free &lt;a href=&#34;https://developer.vmware.com/join/&#34;&gt;VMware {code}&lt;/a&gt; developer program membership.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Status&lt;/h2&gt; &#xA;&lt;p&gt;Changes to the API are subject to &lt;a href=&#34;http://semver.org&#34;&gt;semantic versioning&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Refer to the &lt;a href=&#34;https://raw.githubusercontent.com/vmware/govmomi/main/CHANGELOG.md&#34;&gt;CHANGELOG&lt;/a&gt; for version to version changes.&lt;/p&gt; &#xA;&lt;h2&gt;Notable Projects Using govmomi&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/travis-ci/collectd-vsphere&#34;&gt;collectd-vsphere&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/linuxkit/linuxkit/tree/master/src/cmd/linuxkit&#34;&gt;Docker LinuxKit&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/elastic/integrations/tree/main/packages/vsphere&#34;&gt;Elastic Agent VMware vSphere integration&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dnaeon/gru&#34;&gt;Gru&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/juju/juju&#34;&gt;Juju&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/travis-ci/jupiter-brain&#34;&gt;Jupiter Brain&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kubernetes/cloud-provider-vsphere&#34;&gt;Kubernetes vSphere Cloud Provider&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kubernetes-sigs/cluster-api-provider-vsphere&#34;&gt;Kubernetes Cluster API&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nanovms/ops&#34;&gt;OPS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hashicorp/packer-plugin-vsphere&#34;&gt;Packer Plugin for VMware vSphere&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rancher/rancher/raw/master/pkg/api/norman/customization/vsphere/listers.go&#34;&gt;Rancher&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hashicorp/terraform-provider-vsphere&#34;&gt;Terraform Provider for VMware vSphere&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/influxdata/telegraf/tree/master/plugins/inputs/vsphere&#34;&gt;Telegraf&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/vmware-samples/vcenter-event-broker-appliance/tree/development/vmware-event-router&#34;&gt;VMware Event Broker Appliance&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/vmware/vic&#34;&gt;VMware vSphere Integrated Containers Engine&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.vmware.com/en/VMware-vSphere/7.0/rn/vsphere-esxi-vcenter-server-7-vsphere-with-kubernetes-release-notes.html&#34;&gt;VMware vSphere 7.0&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Related Projects&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/vmware/go-vmware-nsxt&#34;&gt;go-vmware-nsxt&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/vmware/pyvmomi&#34;&gt;pyvmomi&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/vmware/rbvmomi&#34;&gt;rbvmomi&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;govmomi is available under the &lt;a href=&#34;https://raw.githubusercontent.com/vmware/govmomi/main/LICENSE.txt&#34;&gt;Apache 2 License&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Name&lt;/h2&gt; &#xA;&lt;p&gt;Pronounced: &lt;em&gt;go·​v·​mom·​ie&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Follows pyvmomi and rbvmomi: language prefix + the vSphere acronym &#34;VM Object Management Infrastructure&#34;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>redis/go-redis</title>
    <updated>2023-01-29T01:36:28Z</updated>
    <id>tag:github.com,2023-01-29:/redis/go-redis</id>
    <link href="https://github.com/redis/go-redis" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Type-safe Redis client for Golang&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Redis client for Go&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/redis/go-redis/actions&#34;&gt;&lt;img src=&#34;https://github.com/redis/go-redis/actions/workflows/build.yml/badge.svg?sanitize=true&#34; alt=&#34;build workflow&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pkg.go.dev/github.com/redis/go-redis/v9?tab=doc&#34;&gt;&lt;img src=&#34;https://pkg.go.dev/badge/github.com/redis/go-redis/v9&#34; alt=&#34;PkgGoDev&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://redis.uptrace.dev/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/redis-documentation-informational&#34; alt=&#34;Documentation&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/rWtp5Aj&#34;&gt;&lt;img src=&#34;https://discordapp.com/api/guilds/752070105847955518/widget.png&#34; alt=&#34;Chat&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;go-redis is brought to you by &lt;span&gt;⭐&lt;/span&gt; &lt;a href=&#34;https://github.com/uptrace/uptrace&#34;&gt;&lt;strong&gt;uptrace/uptrace&lt;/strong&gt;&lt;/a&gt;. Uptrace is an open-source APM tool that supports distributed tracing, metrics, and logs. You can use it to monitor applications and set up automatic alerts to receive notifications via email, Slack, Telegram, and others.&lt;/p&gt; &#xA; &lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/redis/go-redis/master/example/otel&#34;&gt;OpenTelemetry&lt;/a&gt; example which demonstrates how you can use Uptrace to monitor go-redis.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Resources&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://redis.uptrace.dev&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/redis/go-redis/discussions&#34;&gt;Discussions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://discord.gg/rWtp5Aj&#34;&gt;Chat&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/redis/go-redis/v9&#34;&gt;Reference&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/redis/go-redis/v9#pkg-examples&#34;&gt;Examples&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Ecosystem&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/go-redis/redismock&#34;&gt;Redis Mock&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bsm/redislock&#34;&gt;Distributed Locks&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/go-redis/cache&#34;&gt;Redis Cache&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/go-redis/redis_rate&#34;&gt;Rate limiting&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This client also works with &lt;a href=&#34;https://github.com/apache/incubator-kvrocks&#34;&gt;Kvrocks&lt;/a&gt;, a distributed key value NoSQL database that uses RocksDB as storage engine and is compatible with Redis protocol.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Redis 3 commands except QUIT, MONITOR, and SYNC.&lt;/li&gt; &#xA; &lt;li&gt;Automatic connection pooling with&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://redis.uptrace.dev/guide/go-redis-pubsub.html&#34;&gt;Pub/Sub&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://redis.uptrace.dev/guide/go-redis-pipelines.html&#34;&gt;Pipelines and transactions&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://redis.uptrace.dev/guide/lua-scripting.html&#34;&gt;Scripting&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://redis.uptrace.dev/guide/go-redis-sentinel.html&#34;&gt;Redis Sentinel&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://redis.uptrace.dev/guide/go-redis-cluster.html&#34;&gt;Redis Cluster&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://redis.uptrace.dev/guide/ring.html&#34;&gt;Redis Ring&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://redis.uptrace.dev/guide/redis-performance-monitoring.html&#34;&gt;Redis Performance Monitoring&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;go-redis supports 2 last Go versions and requires a Go version with &lt;a href=&#34;https://github.com/golang/go/wiki/Modules&#34;&gt;modules&lt;/a&gt; support. So make sure to initialize a Go module:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;go mod init github.com/my/repo&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then install go-redis/&lt;strong&gt;v9&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;go get github.com/redis/go-redis/v9&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Quickstart&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;import (&#xA;    &#34;context&#34;&#xA;    &#34;github.com/redis/go-redis/v9&#34;&#xA;    &#34;fmt&#34;&#xA;)&#xA;&#xA;var ctx = context.Background()&#xA;&#xA;func ExampleClient() {&#xA;    rdb := redis.NewClient(&amp;amp;redis.Options{&#xA;        Addr:     &#34;localhost:6379&#34;,&#xA;        Password: &#34;&#34;, // no password set&#xA;        DB:       0,  // use default DB&#xA;    })&#xA;&#xA;    err := rdb.Set(ctx, &#34;key&#34;, &#34;value&#34;, 0).Err()&#xA;    if err != nil {&#xA;        panic(err)&#xA;    }&#xA;&#xA;    val, err := rdb.Get(ctx, &#34;key&#34;).Result()&#xA;    if err != nil {&#xA;        panic(err)&#xA;    }&#xA;    fmt.Println(&#34;key&#34;, val)&#xA;&#xA;    val2, err := rdb.Get(ctx, &#34;key2&#34;).Result()&#xA;    if err == redis.Nil {&#xA;        fmt.Println(&#34;key2 does not exist&#34;)&#xA;    } else if err != nil {&#xA;        panic(err)&#xA;    } else {&#xA;        fmt.Println(&#34;key2&#34;, val2)&#xA;    }&#xA;    // Output: key value&#xA;    // key2 does not exist&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Look and feel&lt;/h2&gt; &#xA;&lt;p&gt;Some corner cases:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// SET key value EX 10 NX&#xA;set, err := rdb.SetNX(ctx, &#34;key&#34;, &#34;value&#34;, 10*time.Second).Result()&#xA;&#xA;// SET key value keepttl NX&#xA;set, err := rdb.SetNX(ctx, &#34;key&#34;, &#34;value&#34;, redis.KeepTTL).Result()&#xA;&#xA;// SORT list LIMIT 0 2 ASC&#xA;vals, err := rdb.Sort(ctx, &#34;list&#34;, &amp;amp;redis.Sort{Offset: 0, Count: 2, Order: &#34;ASC&#34;}).Result()&#xA;&#xA;// ZRANGEBYSCORE zset -inf +inf WITHSCORES LIMIT 0 2&#xA;vals, err := rdb.ZRangeByScoreWithScores(ctx, &#34;zset&#34;, &amp;amp;redis.ZRangeBy{&#xA;    Min: &#34;-inf&#34;,&#xA;    Max: &#34;+inf&#34;,&#xA;    Offset: 0,&#xA;    Count: 2,&#xA;}).Result()&#xA;&#xA;// ZINTERSTORE out 2 zset1 zset2 WEIGHTS 2 3 AGGREGATE SUM&#xA;vals, err := rdb.ZInterStore(ctx, &#34;out&#34;, &amp;amp;redis.ZStore{&#xA;    Keys: []string{&#34;zset1&#34;, &#34;zset2&#34;},&#xA;    Weights: []int64{2, 3}&#xA;}).Result()&#xA;&#xA;// EVAL &#34;return {KEYS[1],ARGV[1]}&#34; 1 &#34;key&#34; &#34;hello&#34;&#xA;vals, err := rdb.Eval(ctx, &#34;return {KEYS[1],ARGV[1]}&#34;, []string{&#34;key&#34;}, &#34;hello&#34;).Result()&#xA;&#xA;// custom command&#xA;res, err := rdb.Do(ctx, &#34;set&#34;, &#34;key&#34;, &#34;value&#34;).Result()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Run the test&lt;/h2&gt; &#xA;&lt;p&gt;go-redis will start a redis-server and run the test cases.&lt;/p&gt; &#xA;&lt;p&gt;The paths of redis-server bin file and redis config file are defined in &lt;code&gt;main_test.go&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;var (&#xA;&#x9;redisServerBin, _  = filepath.Abs(filepath.Join(&#34;testdata&#34;, &#34;redis&#34;, &#34;src&#34;, &#34;redis-server&#34;))&#xA;&#x9;redisServerConf, _ = filepath.Abs(filepath.Join(&#34;testdata&#34;, &#34;redis&#34;, &#34;redis.conf&#34;))&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For local testing, you can change the variables to refer to your local files, or create a soft link to the corresponding folder for redis-server and copy the config file to &lt;code&gt;testdata/redis/&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;ln -s /usr/bin/redis-server ./go-redis/testdata/redis/src&#xA;cp ./go-redis/testdata/redis.conf ./go-redis/testdata/redis/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Lastly, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;go test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;See also&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://bun.uptrace.dev&#34;&gt;Golang ORM&lt;/a&gt; for PostgreSQL, MySQL, MSSQL, and SQLite&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://bun.uptrace.dev/postgres/&#34;&gt;Golang PostgreSQL&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://bunrouter.uptrace.dev/&#34;&gt;Golang HTTP router&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/uptrace/go-clickhouse&#34;&gt;Golang ClickHouse ORM&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributors&lt;/h2&gt; &#xA;&lt;p&gt;Thanks to all the people who already contributed!&lt;/p&gt; &#xA;&lt;a href=&#34;https://github.com/redis/go-redis/graphs/contributors&#34;&gt; &lt;img src=&#34;https://contributors-img.web.app/image?repo=redis/go-redis&#34;&gt; &lt;/a&gt;</summary>
  </entry>
  <entry>
    <title>iyear/tdl</title>
    <updated>2023-01-29T01:36:28Z</updated>
    <id>tag:github.com,2023-01-29:/iyear/tdl</id>
    <link href="https://github.com/iyear/tdl" rel="alternate"></link>
    <summary type="html">&lt;p&gt;📥 Telegram Downloader, but more than a downloader&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Intro&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/github/go-mod/go-version/iyear/tdl?style=flat-square&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/license/iyear/tdl?style=flat-square&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/iyear/tdl/master.yml?branch=master&amp;amp;style=flat-square&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/v/release/iyear/tdl?color=red&amp;amp;style=flat-square&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/last-commit/iyear/tdl?style=flat-square&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;📥 Telegram Downloader, but more than a downloader 🚀&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; Command compatibility is not guaranteed in the early stages of development&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; Improvements have been made to the risk of blocking, but it still can&#39;t be completely avoided. Go to &lt;a href=&#34;https://github.com/iyear/tdl/discussions/29&#34;&gt;Discussion&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Single file start-up&lt;/li&gt; &#xA; &lt;li&gt;Low resource usage&lt;/li&gt; &#xA; &lt;li&gt;Take up all your bandwidth&lt;/li&gt; &#xA; &lt;li&gt;Faster than official clients&lt;/li&gt; &#xA; &lt;li&gt;Download files from (protected) chats&lt;/li&gt; &#xA; &lt;li&gt;Upload files to Telegram&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Preview&lt;/h2&gt; &#xA;&lt;p&gt;It reaches my proxy&#39;s speed limit, and the &lt;strong&gt;speed depends on whether you are a premium&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/iyear/tdl/master/img/preview.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;p&gt;Go to &lt;a href=&#34;https://github.com/iyear/tdl/releases&#34;&gt;GitHub Releases&lt;/a&gt; to download the latest version&lt;/p&gt; &#xA;&lt;p&gt;(optional) Use it everywhere:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# Should run as root(Administrator)&#xA;# Linux &amp;amp; macOS&#xA;sudo mv tdl /usr/bin&#xA;# Windows (PowerShell)&#xA;Move-Item tdl.exe C:\Windows\System32&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Install with a package manager:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# Scoop (Windows) https://scoop.sh/#/apps?s=2&amp;amp;d=1&amp;amp;o=true&amp;amp;p=1&amp;amp;q=telegram+downloader&#xA;scoop bucket add extras&#xA;scoop install telegram-downloader&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Quick Start&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# login with existing official desktop clients (recommended)&#xA;tdl login -n quickstart -d /path/to/Desktop-Telegram-Client&#xA;# if you set a local passcode&#xA;tdl login -n quickstart -d /path/to/Desktop-Telegram-Client -p YOUR_PASSCODE&#xA;# or login with phone &amp;amp; code&#xA;tdl login -n quickstart&#xA;&#xA;tdl dl -n quickstart -u https://t.me/telegram/193&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Get help&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;tdl -h&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Check the version&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;tdl version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Basic Configs&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;The following command documents will not write basic configs. Please add the basic configs you need.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Each namespace represents a Telegram account&lt;/p&gt; &#xA;&lt;p&gt;You should set the namespace &lt;strong&gt;when each command is executed&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;tdl -n iyear&#xA;# or&#xA;export TDL_NS=iyear # recommended&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;(optional) Set the proxy. Only support socks now:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;tdl --proxy socks5://localhost:1080&#xA;# or&#xA;export TDL_PROXY=socks5://localhost:1080 # recommended&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;(optional) Set ntp server host. If is empty, use system time:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;tdl --ntp pool.ntp.org&#xA;# or&#xA;export TDL_NTP=pool.ntp.org # recommended&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Login&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;When you first use tdl, you need to login to get a Telegram session&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If you have &lt;a href=&#34;https://desktop.telegram.org/&#34;&gt;official desktop clients&lt;/a&gt; locally, you can import existing sessions.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This may reduce the risk of blocking, but is unproven:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;tdl login -d /path/to/Telegram&#xA;# if you set a local passcode&#xA;tdl login -d /path/to/Telegram -p YOUR_PASSCODE&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Login to Telegram with phone &amp;amp; code:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;tdl login&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Download&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Please do not arbitrarily set too large &lt;code&gt;threads&lt;/code&gt; and &lt;code&gt;size&lt;/code&gt;.&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;The default value of options is consistent with official clients to reduce the risk of blocking.&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;If you need higher speed, set higher threads and size&lt;/p&gt; &#xA; &lt;p&gt;For details: &lt;a href=&#34;https://github.com/iyear/tdl/issues/30&#34;&gt;https://github.com/iyear/tdl/issues/30&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Download (protected) chat files from message urls:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;tdl dl -u https://t.me/tdl/1 -u https://t.me/tdl/2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Download (protected) chat files from &lt;a href=&#34;https://raw.githubusercontent.com/iyear/tdl/master/docs/desktop_export.md&#34;&gt;official desktop client exported JSON&lt;/a&gt;:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;tdl dl -f result1.json -f result2.json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You can combine sources:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;tdl dl \&#xA;-u https://t.me/tdl/1 -u https://t.me/tdl/2 \&#xA;-f result1.json -f result2.json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Download with 8 threads, 512KiB(MAX) part size, 4 concurrent tasks:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;tdl dl -u https://t.me/tdl/1 -t 8 -s 524288 -l 4&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Download with real extension according to MIME type:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; If the file extension is not matched with the MIME type, tdl will rename the file with the correct extension.&lt;/p&gt; &#xA; &lt;p&gt;Side effect: like &lt;code&gt;.apk&lt;/code&gt; file, it will be renamed to &lt;code&gt;.zip&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;tdl dl -u https://t.me/tdl/1 --rewrite-ext&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Skip the same files when downloading:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; IF: file name(without extension) and size is the same&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;tdl dl -u https://t.me/tdl/1 --skip-same&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Download files to custom directory:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;tdl dl -u https://t.me/tdl/1 -d /path/to/dir&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Download files with extension filters:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; The extension is only matched with the file name, not the MIME type. So it may not work as expected.&lt;/p&gt; &#xA; &lt;p&gt;Whitelist and blacklist can not be used at the same time.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# whitelist filter, only download files with `.jpg` `.png` extension&#xA;tdl dl -u https://t.me/tdl/1 -i jpg,png&#xA;&#xA;# blacklist filter, download all files except `.mp4` `.flv` extension&#xA;tdl dl -u https://t.me/tdl/1 -e mp4,flv&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Download with custom file name template:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Following the &lt;a href=&#34;https://pkg.go.dev/text/template&#34;&gt;go template syntax&lt;/a&gt;, you can use the variables:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Var&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Desc&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;DialogID&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Telegram dialog id&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;MessageID&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Telegram message id&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;MessageDate&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Telegram message date(ts)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;FileName&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Telegram file name&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;FileSize&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Human-readable file size, like &lt;code&gt;1GB&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;DownloadDate&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Download date(ts)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;tdl dl -u https://t.me/tdl/1 \&#xA;--template &#34;{{ .DialogID }}_{{ .MessageID }}_{{ .DownloadDate }}_{{ .FileName }}&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Full example:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;tdl dl --debug --ntp pool.ntp.org \&#xA;-n iyear --proxy socks5://localhost:1080 \&#xA;-u https://t.me/tdl/1 -u https://t.me/tdl/2 \&#xA;-f result1.json -f result2.json \&#xA;--rewrite-ext --skip-same -i jpg,png \&#xA;-d /path/to/dir \&#xA;-t 8 -s 262144 -l 4&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Upload&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Same instructions and advanced options as &lt;strong&gt;Download&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Upload files to &lt;code&gt;Saved Messages&lt;/code&gt;, exclude the specified file extensions:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;tdl up -p /path/to/file -p /path/to/dir -e .so -e .tmp&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Upload with 8 threads, 512KiB(MAX) part size, 4 concurrent tasks:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;tdl up -p /path/to/file -t 8 -s 524288 -l 4&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Full example:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;tdl up --debug --ntp pool.ntp.org \&#xA;-n iyear --proxy socks5://localhost:1080 \&#xA;-p /path/to/file -p /path/to/dir \&#xA;-e .so -e .tmp \&#xA;-t 8 -s 262144 -l 4&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Backup&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Backup or recover your data&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Backup (Default: &lt;code&gt;tdl-backup-&amp;lt;time&amp;gt;.zip&lt;/code&gt;):&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;tdl backup&#xA;# or specify the backup file path&#xA;tdl backup -d /path/to/backup.zip&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Recover:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;tdl recover -f /path/to/backup.zip&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Chat Utilities&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Some useful utils&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;List all your chats:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;tdl chat ls&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Export minimal JSON for tdl download (NOT for backup):&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# will export all media files in the chat.&#xA;# chat input examples: `@iyear`, `iyear`, `123456789`(chat id), `https://t.me/iyear`, `+1 123456789`&#xA;&#xA;tdl chat export -c CHAT_INPUT&#xA;&#xA;# specify the time period with timestamp format, default is start from 1970-01-01, end to now&#xA;tdl chat export -c CHAT_INPUT --from 1665700000 --to 1665761624&#xA;# or (timestamp is default format)&#xA;tdl chat export -c CHAT_INPUT --from 1665700000 --to 1665761624 --time&#xA;&#xA;# specify with message id format, default is start from 0, end to latest message&#xA;tdl chat export -c CHAT_INPUT --from 100 --to 500 --msg&#xA;&#xA;# specify the output file path, default is `tdl-export.json`&#xA;tdl chat export -c CHAT_INPUT -o /path/to/output.json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Env&lt;/h2&gt; &#xA;&lt;p&gt;Avoid typing the same flag values repeatedly every time by setting environment variables.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note: The values of all environment variables have a lower priority than flags.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;What flags mean: &lt;a href=&#34;https://raw.githubusercontent.com/iyear/tdl/master/docs/command/tdl.md#options&#34;&gt;flags&lt;/a&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;NAME&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;FLAG&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;TDL_NS&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;-n/--ns&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;TDL_PROXY&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;--proxy&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;TDL_DEBUG&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;--debug&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;TDL_SIZE&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;-s/--size&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;TDL_THREADS&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;-t/--threads&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;TDL_LIMIT&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;-l/--limit&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;TDL_NTP&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;--ntp&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;TDL_TEMPLATE&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;dl &lt;code&gt;--template&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Data&lt;/h2&gt; &#xA;&lt;p&gt;Your account information will be stored in the &lt;code&gt;~/.tdl&lt;/code&gt; directory.&lt;/p&gt; &#xA;&lt;h2&gt;Commands&lt;/h2&gt; &#xA;&lt;p&gt;Go to &lt;a href=&#34;https://raw.githubusercontent.com/iyear/tdl/master/docs/command/tdl.md&#34;&gt;docs&lt;/a&gt; for full command docs.&lt;/p&gt; &#xA;&lt;h2&gt;Best Practice&lt;/h2&gt; &#xA;&lt;p&gt;How to minimize the risk of blocking?&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Login with the official client session.&lt;/li&gt; &#xA; &lt;li&gt;Use the default download and upload options as possible. Do not set too large &lt;code&gt;threads&lt;/code&gt; and &lt;code&gt;size&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Do not use the same account to login on multiple devices at the same time.&lt;/li&gt; &#xA; &lt;li&gt;Don&#39;t download or upload too many files at once.&lt;/li&gt; &#xA; &lt;li&gt;Become a Telegram premium user. 😅&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Q: Is this a form of abuse?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;A: No. The download and upload speed is limited by the server side. Since the speed of official clients usually does not reach the account limit, this tool was developed to download files at the highest possible speed.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Q: Will this result in a ban?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;A: I am not sure. All operations do not involve dangerous actions such as actively sending messages to other people. But it&#39;s safer to use an unused account for download and upload operations.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Q: No response after entering the command?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;A: Check if you need to use a proxy (use &lt;code&gt;proxy&lt;/code&gt; flag); Check if your system&#39;s local time is correct (use &lt;code&gt;ntp&lt;/code&gt; flag or calibrate system time)&lt;/p&gt; &#xA;&lt;p&gt;If that doesn&#39;t work, run again with &lt;code&gt;debug&lt;/code&gt; flag. Then file a new issue and paste your log in the issue.&lt;/p&gt; &#xA;&lt;h2&gt;LICENSE&lt;/h2&gt; &#xA;&lt;p&gt;AGPL-3.0 License&lt;/p&gt;</summary>
  </entry>
</feed>