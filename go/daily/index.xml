<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-11-27T01:31:47Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>sqshq/sampler</title>
    <updated>2024-11-27T01:31:47Z</updated>
    <id>tag:github.com,2024-11-27:/sqshq/sampler</id>
    <link href="https://github.com/sqshq/sampler" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Tool for shell commands execution, visualization and alerting. Configured with a simple YAML file.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Sampler. Visualization for any shell command.&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.com/sqshq/sampler&#34;&gt;&lt;img src=&#34;https://travis-ci.com/sqshq/sampler.svg?token=LdyRhxxjDFnAz1bJg8fq&amp;amp;branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/sqshq/sampler&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/sqshq/sampler&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Sampler is a tool for shell commands execution, visualization and alerting. Configured with a simple YAML file.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/6069066/56404396-70b14d00-6234-11e9-93cd-54461bf40c96.gif&#34; alt=&#34;sampler&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Why do I need it?&lt;/h2&gt; &#xA;&lt;p&gt;One can sample any dynamic process right from the terminal â€” observe changes in the database, monitor MQ in-flight messages, trigger a deployment script and get notification when it&#39;s done.&lt;/p&gt; &#xA;&lt;p&gt;If there is a way to get a metric using a shell command, then it can be visualized with Sampler momentarily.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;macOS&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://brew.sh&#34;&gt;HomeBrew&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew install sampler&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.macports.org&#34;&gt;MacPorts&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo port install sampler&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo curl -Lo /usr/local/bin/sampler https://github.com/sqshq/sampler/releases/download/v1.1.0/sampler-1.1.0-darwin-amd64&#xA;sudo chmod +x /usr/local/bin/sampler&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Linux&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo wget https://github.com/sqshq/sampler/releases/download/v1.1.0/sampler-1.1.0-linux-amd64 -O /usr/local/bin/sampler&#xA;sudo chmod +x /usr/local/bin/sampler&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: &lt;code&gt;libasound2-dev&lt;/code&gt; system library is required to be installed for Sampler to play a &lt;a href=&#34;https://github.com/sqshq/sampler#triggers&#34;&gt;trigger&lt;/a&gt; sound tone. Usually the library is in place, but if not - you can install it with your favorite package manager, e.g &lt;code&gt;apt install libasound2-dev&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Packaging status&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://apps.fedoraproject.org/packages/golang-github-sqshq-sampler&#34;&gt;Fedora&lt;/a&gt; &lt;code&gt;sudo dnf install golang-github-sqshq-sampler&lt;/code&gt; (F31+)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://aur.archlinux.org/packages/sampler&#34;&gt;Arch&lt;/a&gt; &lt;code&gt;yay -S sampler&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Windows (experimental)&lt;/h3&gt; &#xA;&lt;p&gt;Recommended to use with advanced console emulators, e.g. &lt;a href=&#34;https://cmder.app/&#34;&gt;Cmder&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Via &lt;a href=&#34;https://chocolatey.org/docs&#34;&gt;Chocolatey&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;choco install sampler&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/sqshq/sampler/releases/download/v1.1.0/sampler-1.1.0-windows-amd64.exe&#34;&gt;Download .exe&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Docker&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Create a configuration file&#xA;vim config.yml&#xA;&#xA;# Build the container image&#xA;docker build --tag sampler .&#xA;&#xA;# Run a container&#xA;docker run --interactive --tty --volume $(pwd)/config.yml:/root/config.yml sampler --config /root/config.yml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;You specify shell commands, Sampler executes them with a required rate. The output is used for visualization.&lt;/p&gt; &#xA;&lt;p&gt;Using Sampler is basically a 3-step process:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Define your shell commands in a YAML configuration file&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;sampler -c config.yml&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Adjust components size and location on UI&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;But there are so many monitoring systems already&lt;/h2&gt; &#xA;&lt;p&gt;Sampler is by no means an alternative to full-scale monitoring systems, but rather an easy to setup development tool.&lt;/p&gt; &#xA;&lt;p&gt;If spinning up and configuring &lt;a href=&#34;https://prometheus.io&#34;&gt;Prometheus with Grafana&lt;/a&gt; is complete overkill for you task, Sampler might be the right solution. No servers, no databases, no deploy - you specify shell commands, and it just works.&lt;/p&gt; &#xA;&lt;h2&gt;Then it should be installed on every server I monitor?&lt;/h2&gt; &#xA;&lt;p&gt;No, you can run Sampler on local, but still gather telemetry from multiple remote machines. Any visualization might have &lt;code&gt;init&lt;/code&gt; command, where you can ssh to a remote server. See the &lt;a href=&#34;https://github.com/sqshq/sampler#ssh&#34;&gt;SSH example&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sqshq/sampler/master/#components&#34;&gt;Components&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sqshq/sampler/master/#runchart&#34;&gt;Runchart&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sqshq/sampler/master/#sparkline&#34;&gt;Sparkline&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sqshq/sampler/master/#barchart&#34;&gt;Barchart&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sqshq/sampler/master/#gauge&#34;&gt;Gauge&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sqshq/sampler/master/#textbox&#34;&gt;Textbox&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sqshq/sampler/master/#asciibox&#34;&gt;Asciibox&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sqshq/sampler/master/#bells-and-whistles&#34;&gt;Bells and whistles&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sqshq/sampler/master/#triggers&#34;&gt;Triggers (conditional actions)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sqshq/sampler/master/#interactive-shell-support&#34;&gt;Interactive shell (database interaction, remote server access, etc)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sqshq/sampler/master/#variables&#34;&gt;Variables&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sqshq/sampler/master/#color-theme&#34;&gt;Color theme&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sqshq/sampler/master/#real-world-recipes&#34;&gt;Real-world recipes (contributions welcome!)&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sqshq/sampler/master/#databases&#34;&gt;Databases (MySQL, PostgreSQL, MongoDB, Neo4j)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sqshq/sampler/master/#kafka&#34;&gt;Kafka&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sqshq/sampler/master/#docker&#34;&gt;Docker&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sqshq/sampler/master/#ssh&#34;&gt;SSH&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sqshq/sampler/master/#jmx&#34;&gt;JMX&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Components&lt;/h2&gt; &#xA;&lt;p&gt;The following is a list of configuration examples for each component type, with macOS compatible sampling scripts.&lt;/p&gt; &#xA;&lt;h3&gt;Runchart&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/6069066/59168666-aff96d00-8b04-11e9-99b6-34d8bae37bd2.png&#34; alt=&#34;runchart&#34;&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;runcharts:&#xA;  - title: Search engine response time&#xA;    rate-ms: 500        # sampling rate, default = 1000&#xA;    scale: 2            # number of digits after sample decimal point, default = 1&#xA;    legend:&#xA;      enabled: true     # enables item labels, default = true&#xA;      details: false    # enables item statistics: cur/min/max/dlt values, default = true&#xA;    items:&#xA;      - label: GOOGLE&#xA;        sample: curl -o /dev/null -s -w &#39;%{time_total}&#39;  https://www.google.com&#xA;        color: 178      # 8-bit color number, default one is chosen from a pre-defined palette&#xA;      - label: YAHOO&#xA;        sample: curl -o /dev/null -s -w &#39;%{time_total}&#39;  https://search.yahoo.com&#xA;      - label: BING&#xA;        sample: curl -o /dev/null -s -w &#39;%{time_total}&#39;  https://www.bing.com&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Sparkline&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/6069066/59167746-de754900-8b00-11e9-9305-c9a4176634d2.png&#34; alt=&#34;sparkline&#34;&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;sparklines:&#xA;  - title: CPU usage&#xA;    rate-ms: 200&#xA;    scale: 0&#xA;    sample: ps -A -o %cpu | awk &#39;{s+=$1} END {print s}&#39;&#xA;  - title: Free memory pages&#xA;    rate-ms: 200&#xA;    scale: 0&#xA;    sample: memory_pressure | grep &#39;Pages free&#39; | awk &#39;{print $3}&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Barchart&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/6069066/59167751-de754900-8b00-11e9-8d01-efd04ae1eec6.png&#34; alt=&#34;barchart&#34;&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;barcharts:&#xA;  - title: Local network activity&#xA;    rate-ms: 500        # sampling rate, default = 1000&#xA;    scale: 0            # number of digits after sample decimal point, default = 1&#xA;    items:&#xA;      - label: UDP bytes in&#xA;        sample: nettop -J bytes_in -l 1 -m udp | awk &#39;{sum += $4} END {print sum}&#39;&#xA;      - label: UDP bytes out&#xA;        sample: nettop -J bytes_out -l 1 -m udp | awk &#39;{sum += $4} END {print sum}&#39;&#xA;      - label: TCP bytes in&#xA;        sample: nettop -J bytes_in -l 1 -m tcp | awk &#39;{sum += $4} END {print sum}&#39;&#xA;      - label: TCP bytes out&#xA;        sample: nettop -J bytes_out -l 1 -m tcp | awk &#39;{sum += $4} END {print sum}&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Gauge&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/6069066/59318799-4c06ae00-8c96-11e9-868a-7fef803f3739.png&#34; alt=&#34;gauge&#34;&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;gauges:&#xA;  - title: Minute progress&#xA;    rate-ms: 500        # sampling rate, default = 1000&#xA;    scale: 2            # number of digits after sample decimal point, default = 1&#xA;    percent-only: false # toggle display of the current value, default = false&#xA;    color: 178          # 8-bit color number, default one is chosen from a pre-defined palette&#xA;    cur:&#xA;      sample: date +%S  # sample script for current value&#xA;    max:&#xA;      sample: echo 60   # sample script for max value&#xA;    min:&#xA;      sample: echo 0    # sample script for min value&#xA;  - title: Year progress&#xA;    cur:&#xA;      sample: date +%j&#xA;    max:&#xA;      sample: echo 365&#xA;    min:&#xA;      sample: echo 0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Textbox&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/6069066/59168949-192db000-8b06-11e9-900b-0e92ff494f62.png&#34; alt=&#34;textbox&#34;&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;textboxes:&#xA;  - title: Local weather&#xA;    rate-ms: 10000      # sampling rate, default = 1000&#xA;    sample: curl wttr.in?0ATQF&#xA;    border: false       # border around the item, default = true&#xA;    color: 178          # 8-bit color number, default is white&#xA;  - title: Docker containers stats&#xA;    rate-ms: 500&#xA;    sample: docker stats --no-stream --format &#34;table {{.Name}}\t{{.CPUPerc}}\t{{.MemUsage}}\t{{.PIDs}}&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Asciibox&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/6069066/59169283-aa515680-8b07-11e9-8beb-716a387aed1b.png&#34; alt=&#34;asciibox&#34;&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;asciiboxes:&#xA;  - title: UTC time&#xA;    rate-ms: 500        # sampling rate, default = 1000&#xA;    font: 3d            # font type, default = 2d&#xA;    border: false       # border around the item, default = true    &#xA;    color: 43           # 8-bit color number, default is white&#xA;    sample: env TZ=UTC date +%r&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Bells and whistles&lt;/h2&gt; &#xA;&lt;h3&gt;Triggers&lt;/h3&gt; &#xA;&lt;p&gt;Triggers allow to perform conditional actions, like visual/sound alerts or an arbitrary shell command. The following examples illustrate the concept.&lt;/p&gt; &#xA;&lt;h4&gt;Clock gauge, which shows minute progress and announces current time at the beginning of each minute&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;gauges:&#xA;  - title: MINUTE PROGRESS&#xA;    position: [[0, 18], [80, 0]]  &#xA;    cur:&#xA;      sample: date +%S&#xA;    max:&#xA;      sample: echo 60&#xA;    min:&#xA;      sample: echo 0&#xA;    triggers:&#xA;      - title: CLOCK BELL EVERY MINUTE&#xA;        condition: &#39;[ $label == &#34;cur&#34; ] &amp;amp;&amp;amp; [ $cur -eq 0 ] &amp;amp;&amp;amp; echo 1 || echo 0&#39;  # expects &#34;1&#34; as TRUE indicator&#xA;        actions:&#xA;          terminal-bell: true  # standard terminal bell, default = false&#xA;          sound: true    # NASA quindar tone, default = false&#xA;          visual: false  # notification with current value on top of the component area, default = false&#xA;          script: say -v samantha `date +%I:%M%p`  # an arbitrary script, which can use $cur, $prev and $label variables&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Search engine latency chart, which alerts user when latency exceeds a threshold&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;runcharts:&#xA;  - title: SEARCH ENGINE RESPONSE TIME (sec)&#xA;    rate-ms: 200&#xA;    items:&#xA;      - label: GOOGLE&#xA;        sample: curl -o /dev/null -s -w &#39;%{time_total}&#39;  https://www.google.com&#xA;      - label: YAHOO&#xA;        sample: curl -o /dev/null -s -w &#39;%{time_total}&#39;  https://search.yahoo.com     &#xA;    triggers:&#xA;      - title: Latency threshold exceeded&#xA;        condition: echo &#34;$prev &amp;lt; 0.3 &amp;amp;&amp;amp; $cur &amp;gt; 0.3&#34; |bc -l  # expects &#34;1&#34; as TRUE indicator&#xA;        actions:&#xA;          terminal-bell: true  # standard terminal bell, default = false&#xA;          sound: true   # NASA quindar tone, default = false&#xA;          visual: true  # visual notification on top of the component area, default = false&#xA;          script: &#39;say alert: ${label} latency exceeded ${cur} second&#39; # an arbitrary script, which can use $cur, $prev and $label variables&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Interactive shell support&lt;/h3&gt; &#xA;&lt;p&gt;In addition to the &lt;code&gt;sample&lt;/code&gt; command, one can specify &lt;code&gt;init&lt;/code&gt; command (executed only once before sampling) and &lt;code&gt;transform&lt;/code&gt; command (to post-process &lt;code&gt;sample&lt;/code&gt; command output). That covers interactive shell use case, e.g. to establish connection to a database only once, and then perform polling within interactive shell session.&lt;/p&gt; &#xA;&lt;h4&gt;Basic mode&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;textboxes:&#xA;  - title: MongoDB polling&#xA;    rate-ms: 500&#xA;    init: mongo --quiet --host=localhost test # executes only once to start the interactive session&#xA;    sample: Date.now();                       # executes with a required rate, in scope of the interactive session&#xA;    transform: echo result = $sample          # executes in scope of local session, $sample variable is available for transformation&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;PTY mode&lt;/h4&gt; &#xA;&lt;p&gt;In some cases interactive shell won&#39;t work, because its stdin is not a terminal. We can fool it, using PTY mode:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;textboxes:&#xA;  - title: Neo4j polling&#xA;    pty: true  # enables pseudo-terminal mode, default = false&#xA;    init: cypher-shell -u neo4j -p pwd --format plain&#xA;    sample: RETURN rand();&#xA;    transform: echo &#34;$sample&#34; | tail -n 1&#xA;  - title: Top on a remote server&#xA;    pty: true  # enables pseudo-terminal mode, default = false&#xA;    init: ssh -i ~/user.pem ec2-user@1.2.3.4&#xA;    sample: top    &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Multistep init&lt;/h4&gt; &#xA;&lt;p&gt;It is also possible to execute multiple init commands one after another, before you start sampling.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;textboxes:&#xA;  - title: Java application uptime&#xA;    multistep-init:&#xA;      - java -jar jmxterm-1.0.0-uber.jar&#xA;      - open host:port # or local PID&#xA;      - bean java.lang:type=Runtime&#xA;    sample: get Uptime&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Variables&lt;/h3&gt; &#xA;&lt;p&gt;If the configuration file contains repeated patterns, they can be extracted into the &lt;code&gt;variables&lt;/code&gt; section. Also variables can be specified using &lt;code&gt;-v&lt;/code&gt;/&lt;code&gt;--variable&lt;/code&gt; flag on startup, and any system environment variables will also be available in the scripts.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;variables:&#xA;    mongoconnection: mongo --quiet --host=localhost test&#xA;barcharts:&#xA;  - title: MongoDB documents by status&#xA;    items:&#xA;      - label: IN_PROGRESS&#xA;        init: $mongoconnection&#xA;        sample: db.getCollection(&#39;events&#39;).find({status:&#39;IN_PROGRESS&#39;}).count()&#xA;      - label: SUCCESS&#xA;        init: $mongoconnection&#xA;        sample: db.getCollection(&#39;events&#39;).find({status:&#39;SUCCESS&#39;}).count()&#xA;      - label: FAIL&#xA;        init: $mongoconnection&#xA;        sample: db.getCollection(&#39;events&#39;).find({status:&#39;FAIL&#39;}).count()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Color theme&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/6069066/59959405-994c0200-9484-11e9-856b-c4d18716e1de.png&#34; alt=&#34;light-theme&#34;&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;theme: light # default = dark&#xA;sparklines:&#xA;  - title: CPU usage&#xA;    sample: ps -A -o %cpu | awk &#39;{s+=$1} END {print s}&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Real-world recipes&lt;/h2&gt; &#xA;&lt;h3&gt;Databases&lt;/h3&gt; &#xA;&lt;p&gt;The following are different database connection examples. Interactive shell (init script) usage is recommended to establish connection only once and then reuse it during sampling.&lt;/p&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;MySQL&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;# prerequisite: installed mysql shell&#xA;&#xA;variables:&#xA;  mysql_connection: mysql -u root -s --database mysql --skip-column-names&#xA;sparklines:  &#xA;  - title: MySQL (random number example)&#xA;    pty: true&#xA;    init: $mysql_connection&#xA;    sample: select rand();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;PostgreSQL&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;# prerequisite: installed psql shell&#xA;&#xA;variables:&#xA;  PGPASSWORD: pwd&#xA;  postgres_connection: psql -h localhost -U postgres --no-align --tuples-only&#xA;sparklines:&#xA;  - title: PostgreSQL (random number example)&#xA;    init: $postgres_connection&#xA;    sample: select random();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;MongoDB&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;# prerequisite: installed mongo shell&#xA;&#xA;variables:&#xA;  mongo_connection: mongo --quiet --host=localhost test&#xA;sparklines:&#xA;  - title: MongoDB (random number example)&#xA;    init: $mongo_connection&#xA;    sample: Math.random();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;Neo4j&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;# prerequisite: installed cypher shell&#xA;&#xA;variables:&#xA;  neo4j_connection: cypher-shell -u neo4j -p pwd --format plain&#xA;sparklines:&#xA;  - title: Neo4j (random number example)&#xA;    pty: true&#xA;    init: $neo4j_connection&#xA;    sample: RETURN rand();&#xA;    transform: echo &#34;$sample&#34; | tail -n 1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Kafka&lt;/h3&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;Kafka lag per consumer group&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;variables:&#xA;  kafka_connection: $KAFKA_HOME/bin/kafka-consumer-groups --bootstrap-server localhost:9092&#xA;runcharts:&#xA;  - title: Kafka lag per consumer group&#xA;    rate-ms: 5000&#xA;    scale: 0&#xA;    items:&#xA;      - label: A-&amp;gt;B&#xA;        sample: $kafka_connection --group group_a --describe | awk &#39;NR&amp;gt;1 {sum += $5} END {print sum}&#39;&#xA;      - label: B-&amp;gt;C&#xA;        sample: $kafka_connection --group group_b --describe | awk &#39;NR&amp;gt;1 {sum += $5} END {print sum}&#39;&#xA;      - label: C-&amp;gt;D&#xA;        sample: $kafka_connection --group group_c --describe | awk &#39;NR&amp;gt;1 {sum += $5} END {print sum}&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Docker&lt;/h3&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;Docker containers stats (CPU, MEM, O/I)&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;textboxes:&#xA;  - title: Docker containers stats&#xA;    sample: docker stats --no-stream --format &#34;table {{.Name}}\t{{.CPUPerc}}\t{{.MemPerc}}\t{{.MemUsage}}\t{{.NetIO}}\t{{.BlockIO}}\t{{.PIDs}}&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;SSH&lt;/h3&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;TOP command on a remote server&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;variables:&#xA;  sshconnection: ssh -i ~/my-key-pair.pem ec2-user@1.2.3.4&#xA;textboxes:&#xA;  - title: SSH&#xA;    pty: true&#xA;    init: $sshconnection&#xA;    sample: top&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;JMX&lt;/h3&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;Java application uptime example&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;# prerequisite: download [jmxterm jar file](https://docs.cyclopsgroup.org/jmxterm)&#xA;&#xA;textboxes:&#xA;  - title: Java application uptime&#xA;    multistep-init:&#xA;      - java -jar jmxterm-1.0.0-uber.jar&#xA;      - open host:port # or local PID&#xA;      - bean java.lang:type=Runtime&#xA;    sample: get Uptime&#xA;    transform: echo $sample | tr -dc &#39;0-9&#39; | awk &#39;{printf &#34;%.1f min&#34;, $1/1000/60}&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt;</summary>
  </entry>
</feed>