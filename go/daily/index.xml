<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-04-20T01:31:39Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>anthropics/anthropic-sdk-go</title>
    <updated>2025-04-20T01:31:39Z</updated>
    <id>tag:github.com,2025-04-20:/anthropics/anthropic-sdk-go</id>
    <link href="https://github.com/anthropics/anthropic-sdk-go" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Access to Anthropic&#39;s safety-first language model APIs via Go&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Anthropic Go API Library&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/anthropics/anthropic-sdk-go&#34;&gt;&lt;img src=&#34;https://pkg.go.dev/badge/github.com/anthropics/anthropic-sdk-go.svg?sanitize=true&#34; alt=&#34;Go Reference&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The Anthropic Go library provides convenient access to &lt;a href=&#34;https://docs.anthropic.com/claude/reference/&#34;&gt;the Anthropic REST API&lt;/a&gt; from applications written in Go. The full API of this library can be found in &lt;a href=&#34;https://raw.githubusercontent.com/anthropics/anthropic-sdk-go/main/api.md&#34;&gt;api.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!WARNING] The latest version of this package uses a new design with significant breaking changes. Please refer to the &lt;a href=&#34;https://raw.githubusercontent.com/anthropics/anthropic-sdk-go/main/MIGRATION.md&#34;&gt;migration guide&lt;/a&gt; for more information on how to update your code.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;!-- x-release-please-start-version --&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;import (&#xA;&#x9;&#34;github.com/anthropics/anthropic-sdk-go&#34; // imported as anthropic&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;!-- x-release-please-end --&gt; &#xA;&lt;p&gt;Or to pin the version:&lt;/p&gt; &#xA;&lt;!-- x-release-please-start-version --&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;go get -u &#39;github.com/anthropics/anthropic-sdk-go@v0.2.0-beta.3&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;!-- x-release-please-end --&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;This library requires Go 1.18+.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;The full API of this library can be found in &lt;a href=&#34;https://raw.githubusercontent.com/anthropics/anthropic-sdk-go/main/api.md&#34;&gt;api.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;context&#34;&#xA;&#x9;&#34;fmt&#34;&#xA;&#xA;&#x9;&#34;github.com/anthropics/anthropic-sdk-go&#34;&#xA;&#x9;&#34;github.com/anthropics/anthropic-sdk-go/option&#34;&#xA;)&#xA;&#xA;func main() {&#xA;&#x9;client := anthropic.NewClient(&#xA;&#x9;&#x9;option.WithAPIKey(&#34;my-anthropic-api-key&#34;), // defaults to os.LookupEnv(&#34;ANTHROPIC_API_KEY&#34;)&#xA;&#x9;)&#xA;&#x9;message, err := client.Messages.New(context.TODO(), anthropic.MessageNewParams{&#xA;&#x9;&#x9;MaxTokens: 1024,&#xA;&#x9;&#x9;Messages: []anthropic.MessageParam{{&#xA;&#x9;&#x9;&#x9;Role: anthropic.MessageParamRoleUser,&#xA;&#x9;&#x9;&#x9;Content: []anthropic.ContentBlockParamUnion{{&#xA;&#x9;&#x9;&#x9;&#x9;OfRequestTextBlock: &amp;amp;anthropic.TextBlockParam{Text: &#34;What is a quaternion?&#34;},&#xA;&#x9;&#x9;&#x9;}},&#xA;&#x9;&#x9;}},&#xA;&#x9;&#x9;Model: anthropic.ModelClaude3_7SonnetLatest,&#xA;&#x9;})&#xA;&#x9;if err != nil {&#xA;&#x9;&#x9;panic(err.Error())&#xA;&#x9;}&#xA;&#x9;fmt.Printf(&#34;%+v\n&#34;, message.Content)&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Conversations&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;messages := []anthropic.MessageParam{&#xA;    anthropic.NewUserMessage(anthropic.NewTextBlock(&#34;What is my first name?&#34;)),&#xA;}&#xA;&#xA;message, err := client.Messages.New(context.TODO(), anthropic.MessageNewParams{&#xA;    Model:     anthropic.ModelClaude3_7SonnetLatest,&#xA;    Messages:  messages,&#xA;    MaxTokens: 1024,&#xA;})&#xA;if err != nil {&#xA;    panic(err)&#xA;}&#xA;&#xA;fmt.Printf(&#34;%+v\n&#34;, message.Content)&#xA;&#xA;messages = append(messages, message.ToParam())&#xA;messages = append(messages, anthropic.NewUserMessage(&#xA;    anthropic.NewTextBlock(&#34;My full name is John Doe&#34;),&#xA;))&#xA;&#xA;message, err = client.Messages.New(context.TODO(), anthropic.MessageNewParams{&#xA;    Model:     anthropic.ModelClaude3_7SonnetLatest,&#xA;    Messages:  messages,&#xA;    MaxTokens: 1024,&#xA;})&#xA;&#xA;fmt.Printf(&#34;%+v\n&#34;, message.Content)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;System prompts&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;message, err := client.Messages.New(context.TODO(), anthropic.MessageNewParams{&#xA;    Model:     anthropic.ModelClaude3_7SonnetLatest,&#xA;    MaxTokens: 1024,&#xA;    System: []anthropic.TextBlockParam{&#xA;        {Text: &#34;Be very serious at all times.&#34;},&#xA;    },&#xA;    Messages: messages,&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Streaming&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;content := &#34;What is a quaternion?&#34;&#xA;&#xA;stream := client.Messages.NewStreaming(context.TODO(), anthropic.MessageNewParams{&#xA;    Model:     anthropic.ModelClaude3_7SonnetLatest,&#xA;    MaxTokens: 1024,&#xA;    Messages: []anthropic.MessageParam{&#xA;        anthropic.NewUserMessage(anthropic.NewTextBlock(content)),&#xA;    },&#xA;})&#xA;&#xA;message := anthropic.Message{}&#xA;for stream.Next() {&#xA;    event := stream.Current()&#xA;    err := message.Accumulate(event)&#xA;    if err != nil {&#xA;        panic(err)&#xA;    }&#xA;&#xA;    switch eventVariant := event.AsAny().(type) {&#xA;        case anthropic.ContentBlockDeltaEvent:&#xA;        switch deltaVariant := eventVariant.Delta.AsAny().(type) {&#xA;        case anthropic.TextDelta:&#xA;            print(deltaVariant.Text)&#xA;        }&#xA;&#xA;    }&#xA;&#xA;    if stream.Err() != nil {&#xA;        panic(stream.Err())&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Tool calling&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;context&#34;&#xA;&#x9;&#34;encoding/json&#34;&#xA;&#x9;&#34;fmt&#34;&#xA;&#xA;&#x9;&#34;github.com/anthropics/anthropic-sdk-go&#34;&#xA;&#x9;&#34;github.com/invopop/jsonschema&#34;&#xA;)&#xA;&#xA;func main() {&#xA;&#x9;client := anthropic.NewClient()&#xA;&#xA;&#x9;content := &#34;Where is San Francisco?&#34;&#xA;&#xA;&#x9;println(&#34;[user]: &#34; + content)&#xA;&#xA;&#x9;messages := []anthropic.MessageParam{&#xA;&#x9;&#x9;anthropic.NewUserMessage(anthropic.NewTextBlock(content)),&#xA;&#x9;}&#xA;&#xA;&#x9;toolParams := []anthropic.ToolParam{&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;Name:        &#34;get_coordinates&#34;,&#xA;&#x9;&#x9;&#x9;Description: anthropic.String(&#34;Accepts a place as an address, then returns the latitude and longitude coordinates.&#34;),&#xA;&#x9;&#x9;&#x9;InputSchema: GetCoordinatesInputSchema,&#xA;&#x9;&#x9;},&#xA;&#x9;}&#xA;&#x9;tools := make([]anthropic.ToolUnionParam, len(toolParams))&#xA;&#x9;for i, toolParam := range toolParams {&#xA;&#x9;&#x9;tools[i] = anthropic.ToolUnionParam{OfTool: &amp;amp;toolParam}&#xA;&#x9;}&#xA;&#xA;&#x9;for {&#xA;&#x9;&#x9;message, err := client.Messages.New(context.TODO(), anthropic.MessageNewParams{&#xA;&#x9;&#x9;&#x9;Model:     anthropic.ModelClaude3_7SonnetLatest,&#xA;&#x9;&#x9;&#x9;MaxTokens: 1024,&#xA;&#x9;&#x9;&#x9;Messages:  messages,&#xA;&#x9;&#x9;&#x9;Tools:     tools,&#xA;&#x9;&#x9;})&#xA;&#xA;&#x9;&#x9;if err != nil {&#xA;&#x9;&#x9;&#x9;panic(err)&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;print(color(&#34;[assistant]: &#34;))&#xA;&#x9;&#x9;for _, block := range message.Content {&#xA;&#x9;&#x9;&#x9;switch block := block.AsAny().(type) {&#xA;&#x9;&#x9;&#x9;case anthropic.TextBlock:&#xA;&#x9;&#x9;&#x9;&#x9;println(block.Text)&#xA;&#x9;&#x9;&#x9;&#x9;println()&#xA;&#x9;&#x9;&#x9;case anthropic.ToolUseBlock:&#xA;&#x9;&#x9;&#x9;&#x9;inputJSON, _ := json.Marshal(block.Input)&#xA;&#x9;&#x9;&#x9;&#x9;println(block.Name + &#34;: &#34; + string(inputJSON))&#xA;&#x9;&#x9;&#x9;&#x9;println()&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;messages = append(messages, message.ToParam())&#xA;&#x9;&#x9;toolResults := []anthropic.ContentBlockParamUnion{}&#xA;&#xA;&#x9;&#x9;for _, block := range message.Content {&#xA;&#x9;&#x9;&#x9;switch variant := block.AsAny().(type) {&#xA;&#x9;&#x9;&#x9;case anthropic.ToolUseBlock:&#xA;&#x9;&#x9;&#x9;&#x9;print(color(&#34;[user (&#34; + block.Name + &#34;)]: &#34;))&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;var response interface{}&#xA;&#x9;&#x9;&#x9;&#x9;switch block.Name {&#xA;&#x9;&#x9;&#x9;&#x9;case &#34;get_coordinates&#34;:&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;var input struct {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Location string `json:&#34;location&#34;`&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;err := json.Unmarshal([]byte(variant.JSON.Input.Raw()), &amp;amp;input)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if err != nil {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;panic(err)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;response = GetCoordinates(input.Location)&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;b, err := json.Marshal(response)&#xA;&#x9;&#x9;&#x9;&#x9;if err != nil {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;panic(err)&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;println(string(b))&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;toolResults = append(toolResults, anthropic.NewToolResultBlock(block.ID, string(b), false))&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if len(toolResults) == 0 {&#xA;&#x9;&#x9;&#x9;break&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;messages = append(messages, anthropic.NewUserMessage(toolResults...))&#xA;&#x9;}&#xA;}&#xA;&#xA;type GetCoordinatesInput struct {&#xA;&#x9;Location string `json:&#34;location&#34; jsonschema_description:&#34;The location to look up.&#34;`&#xA;}&#xA;&#xA;var GetCoordinatesInputSchema = GenerateSchema[GetCoordinatesInput]()&#xA;&#xA;type GetCoordinateResponse struct {&#xA;&#x9;Long float64 `json:&#34;long&#34;`&#xA;&#x9;Lat  float64 `json:&#34;lat&#34;`&#xA;}&#xA;&#xA;func GetCoordinates(location string) GetCoordinateResponse {&#xA;&#x9;return GetCoordinateResponse{&#xA;&#x9;&#x9;Long: -122.4194,&#xA;&#x9;&#x9;Lat:  37.7749,&#xA;&#x9;}&#xA;}&#xA;&#xA;func GenerateSchema[T any]() anthropic.ToolInputSchemaParam {&#xA;&#x9;reflector := jsonschema.Reflector{&#xA;&#x9;&#x9;AllowAdditionalProperties: false,&#xA;&#x9;&#x9;DoNotReference:            true,&#xA;&#x9;}&#xA;&#x9;var v T&#xA;&#xA;&#x9;schema := reflector.Reflect(v)&#xA;&#xA;&#x9;return anthropic.ToolInputSchemaParam{&#xA;&#x9;&#x9;Properties: schema.Properties,&#xA;&#x9;}&#xA;}&#xA;&#xA;func color(s string) string {&#xA;&#x9;return fmt.Sprintf(&#34;\033[1;%sm%s\033[0m&#34;, &#34;33&#34;, s)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Request fields&lt;/h3&gt; &#xA;&lt;p&gt;The anthropic library uses the &lt;a href=&#34;https://tip.golang.org/doc/go1.24#encodingjsonpkgencodingjson&#34;&gt;&lt;code&gt;omitzero&lt;/code&gt;&lt;/a&gt; semantics from the Go 1.24+ &lt;code&gt;encoding/json&lt;/code&gt; release for request fields.&lt;/p&gt; &#xA;&lt;p&gt;Required primitive fields (&lt;code&gt;int64&lt;/code&gt;, &lt;code&gt;string&lt;/code&gt;, etc.) feature the tag &lt;code&gt;`json:...,required`&lt;/code&gt;. These fields are always serialized, even their zero values.&lt;/p&gt; &#xA;&lt;p&gt;Optional primitive types are wrapped in a &lt;code&gt;param.Opt[T]&lt;/code&gt;. Use the provided constructors set &lt;code&gt;param.Opt[T]&lt;/code&gt; fields such as &lt;code&gt;anthropic.String(string)&lt;/code&gt;, &lt;code&gt;anthropic.Int(int64)&lt;/code&gt;, etc.&lt;/p&gt; &#xA;&lt;p&gt;Optional primitives, maps, slices and structs and string enums (represented as &lt;code&gt;string&lt;/code&gt;) always feature the tag &lt;code&gt;`json:&#34;...,omitzero&#34;`&lt;/code&gt;. Their zero values are considered omitted.&lt;/p&gt; &#xA;&lt;p&gt;Any non-nil slice of length zero will serialize as an empty JSON array, &lt;code&gt;&#34;[]&#34;&lt;/code&gt;. Similarly, any non-nil map with length zero with serialize as an empty JSON object, &lt;code&gt;&#34;{}&#34;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To send &lt;code&gt;null&lt;/code&gt; instead of an &lt;code&gt;param.Opt[T]&lt;/code&gt;, use &lt;code&gt;param.NullOpt[T]()&lt;/code&gt;. To send &lt;code&gt;null&lt;/code&gt; instead of a struct, use &lt;code&gt;param.NullObj[T]()&lt;/code&gt;, where &lt;code&gt;T&lt;/code&gt; is a struct. To send a custom value instead of a struct, use &lt;code&gt;param.OverrideObj[T](value)&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To override request structs contain a &lt;code&gt;.WithExtraFields(map[string]any)&lt;/code&gt; method which can be used to send non-conforming fields in the request body. Extra fields overwrite any struct fields with a matching key, so only use with trusted data.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;params := FooParams{&#xA;&#x9;ID: &#34;id_xxx&#34;,                          // required property&#xA;&#x9;Name: anthropic.String(&#34;hello&#34;), // optional property&#xA;&#x9;Description: param.NullOpt[string](),  // explicit null property&#xA;&#xA;&#x9;Point: anthropic.Point{&#xA;&#x9;&#x9;X: 0, // required field will serialize as 0&#xA;&#x9;&#x9;Y: anthropic.Int(1), // optional field will serialize as 1&#xA;&#x9;  // ... omitted non-required fields will not be serialized&#xA;&#x9;}),&#xA;&#xA;&#x9;Origin: anthropic.Origin{}, // the zero value of [Origin] is considered omitted&#xA;}&#xA;&#xA;// In cases where the API specifies a given type,&#xA;// but you want to send something else, use [WithExtraFields]:&#xA;params.WithExtraFields(map[string]any{&#xA;&#x9;&#34;x&#34;: 0.01, // send &#34;x&#34; as a float instead of int&#xA;})&#xA;&#xA;// Send a number instead of an object&#xA;custom := param.OverrideObj[anthropic.FooParams](12)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When available, use the &lt;code&gt;.IsPresent()&lt;/code&gt; method to check if an optional parameter is not omitted or &lt;code&gt;null&lt;/code&gt;. Otherwise, the &lt;code&gt;param.IsOmitted(any)&lt;/code&gt; function can confirm the presence of any &lt;code&gt;omitzero&lt;/code&gt; field.&lt;/p&gt; &#xA;&lt;h3&gt;Request unions&lt;/h3&gt; &#xA;&lt;p&gt;Unions are represented as a struct with fields prefixed by &#34;Of&#34; for each of it&#39;s variants, only one field can be non-zero. The non-zero field will be serialized.&lt;/p&gt; &#xA;&lt;p&gt;Sub-properties of the union can be accessed via methods on the union struct. These methods return a mutable pointer to the underlying data, if present.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Only one field can be non-zero, use param.IsOmitted() to check if a field is set&#xA;type AnimalUnionParam struct {&#xA;&#x9;OfCat &#x9; *Cat              `json:&#34;,omitzero,inline`&#xA;&#x9;OfDog    *Dog              `json:&#34;,omitzero,inline`&#xA;}&#xA;&#xA;animal := AnimalUnionParam{&#xA;&#x9;OfCat: &amp;amp;Cat{&#xA;&#x9;&#x9;Name: &#34;Whiskers&#34;,&#xA;&#x9;&#x9;Owner: PersonParam{&#xA;&#x9;&#x9;&#x9;Address: AddressParam{Street: &#34;3333 Coyote Hill Rd&#34;, Zip: 0},&#xA;&#x9;&#x9;},&#xA;&#x9;},&#xA;}&#xA;&#xA;// Mutating a field&#xA;if address := animal.GetOwner().GetAddress(); address != nil {&#xA;&#x9;address.ZipCode = 94304&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Response objects&lt;/h3&gt; &#xA;&lt;p&gt;All fields in response structs are value types (not pointers or wrappers).&lt;/p&gt; &#xA;&lt;p&gt;If a given field is &lt;code&gt;null&lt;/code&gt;, not present, or invalid, the corresponding field will simply be its zero value.&lt;/p&gt; &#xA;&lt;p&gt;All response structs also include a special &lt;code&gt;JSON&lt;/code&gt; field, containing more detailed information about each property, which you can use like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;if res.Name == &#34;&#34; {&#xA;&#x9;// true if `&#34;name&#34;` was unmarshalled successfully&#xA;&#x9;res.JSON.Name.IsPresent()&#xA;&#xA;&#x9;res.JSON.Name.IsExplicitNull() // true if `&#34;name&#34;` is explicitly null&#xA;&#x9;res.JSON.Name.Raw() == &#34;&#34;          // true if `&#34;name&#34;` field does not exist&#xA;&#xA;&#x9;// When the API returns data that cannot be coerced to the expected type:&#xA;&#x9;if !res.JSON.Name.IsPresent() &amp;amp;&amp;amp; res.JSON.Name.Raw() != &#34;&#34; {&#xA;&#x9;&#x9;raw := res.JSON.Name.Raw()&#xA;&#xA;&#x9;&#x9;legacyName := struct{&#xA;&#x9;&#x9;&#x9;First string `json:&#34;first&#34;`&#xA;&#x9;&#x9;&#x9;Last  string `json:&#34;last&#34;`&#xA;&#x9;&#x9;}{}&#xA;&#x9;&#x9;json.Unmarshal([]byte(raw), &amp;amp;legacyName)&#xA;&#x9;&#x9;name = legacyName.First + &#34; &#34; + legacyName.Last&#xA;&#x9;}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;These &lt;code&gt;.JSON&lt;/code&gt; structs also include an &lt;code&gt;ExtraFields&lt;/code&gt; map containing any properties in the json response that were not specified in the struct. This can be useful for API features not yet present in the SDK.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;body := res.JSON.ExtraFields[&#34;my_unexpected_field&#34;].Raw()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Response Unions&lt;/h3&gt; &#xA;&lt;p&gt;In responses, unions are represented by a flattened struct containing all possible fields from each of the object variants. To convert it to a variant use the &lt;code&gt;.AsFooVariant()&lt;/code&gt; method or the &lt;code&gt;.AsAny()&lt;/code&gt; method if present.&lt;/p&gt; &#xA;&lt;p&gt;If a response value union contains primitive values, primitive fields will be alongside the properties but prefixed with &lt;code&gt;Of&lt;/code&gt; and feature the tag &lt;code&gt;json:&#34;...,inline&#34;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type AnimalUnion struct {&#xA;&#x9;OfString string `json:&#34;,inline&#34;`&#xA;&#x9;Name     string `json:&#34;name&#34;`&#xA;&#x9;Owner    Person `json:&#34;owner&#34;`&#xA;&#x9;// ...&#xA;&#x9;JSON struct {&#xA;&#x9;&#x9;OfString resp.Field&#xA;&#x9;&#x9;Name     resp.Field&#xA;&#x9;&#x9;Owner    resp.Field&#xA;&#x9;&#x9;// ...&#xA;&#x9;}&#xA;}&#xA;&#xA;// If animal variant&#xA;if animal.Owner.Address.JSON.ZipCode == &#34;&#34; {&#xA;&#x9;panic(&#34;missing zip code&#34;)&#xA;}&#xA;&#xA;// If string variant&#xA;if !animal.OfString == &#34;&#34; {&#xA;&#x9;panic(&#34;expected a name&#34;)&#xA;}&#xA;&#xA;// Switch on the variant&#xA;switch variant := animalOrName.AsAny().(type) {&#xA;case string:&#xA;case Dog:&#xA;case Cat:&#xA;default:&#xA;&#x9;panic(&#34;unexpected type&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;RequestOptions&lt;/h3&gt; &#xA;&lt;p&gt;This library uses the functional options pattern. Functions defined in the &lt;code&gt;option&lt;/code&gt; package return a &lt;code&gt;RequestOption&lt;/code&gt;, which is a closure that mutates a &lt;code&gt;RequestConfig&lt;/code&gt;. These options can be supplied to the client or at individual requests. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;client := anthropic.NewClient(&#xA;&#x9;// Adds a header to every request made by the client&#xA;&#x9;option.WithHeader(&#34;X-Some-Header&#34;, &#34;custom_header_info&#34;),&#xA;)&#xA;&#xA;client.Messages.New(context.TODO(), ...,&#xA;&#x9;// Override the header&#xA;&#x9;option.WithHeader(&#34;X-Some-Header&#34;, &#34;some_other_custom_header_info&#34;),&#xA;&#x9;// Add an undocumented field to the request body, using sjson syntax&#xA;&#x9;option.WithJSONSet(&#34;some.json.path&#34;, map[string]string{&#34;my&#34;: &#34;object&#34;}),&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://pkg.go.dev/github.com/anthropics/anthropic-sdk-go/option&#34;&gt;full list of request options&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Pagination&lt;/h3&gt; &#xA;&lt;p&gt;This library provides some conveniences for working with paginated list endpoints.&lt;/p&gt; &#xA;&lt;p&gt;You can use &lt;code&gt;.ListAutoPaging()&lt;/code&gt; methods to iterate through items across all pages:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;iter := client.Beta.Messages.Batches.ListAutoPaging(context.TODO(), anthropic.BetaMessageBatchListParams{&#xA;&#x9;Limit: anthropic.Int(20),&#xA;})&#xA;// Automatically fetches more pages as needed.&#xA;for iter.Next() {&#xA;&#x9;betaMessageBatch := iter.Current()&#xA;&#x9;fmt.Printf(&#34;%+v\n&#34;, betaMessageBatch)&#xA;}&#xA;if err := iter.Err(); err != nil {&#xA;&#x9;panic(err.Error())&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or you can use simple &lt;code&gt;.List()&lt;/code&gt; methods to fetch a single page and receive a standard response object with additional helper methods like &lt;code&gt;.GetNextPage()&lt;/code&gt;, e.g.:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;page, err := client.Beta.Messages.Batches.List(context.TODO(), anthropic.BetaMessageBatchListParams{&#xA;&#x9;Limit: anthropic.Int(20),&#xA;})&#xA;for page != nil {&#xA;&#x9;for _, batch := range page.Data {&#xA;&#x9;&#x9;fmt.Printf(&#34;%+v\n&#34;, batch)&#xA;&#x9;}&#xA;&#x9;page, err = page.GetNextPage()&#xA;}&#xA;if err != nil {&#xA;&#x9;panic(err.Error())&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Errors&lt;/h3&gt; &#xA;&lt;p&gt;When the API returns a non-success status code, we return an error with type &lt;code&gt;*anthropic.Error&lt;/code&gt;. This contains the &lt;code&gt;StatusCode&lt;/code&gt;, &lt;code&gt;*http.Request&lt;/code&gt;, and &lt;code&gt;*http.Response&lt;/code&gt; values of the request, as well as the JSON of the error body (much like other response objects in the SDK).&lt;/p&gt; &#xA;&lt;p&gt;To handle errors, we recommend that you use the &lt;code&gt;errors.As&lt;/code&gt; pattern:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;_, err := client.Messages.New(context.TODO(), anthropic.MessageNewParams{&#xA;&#x9;MaxTokens: 1024,&#xA;&#x9;Messages: []anthropic.MessageParam{{&#xA;&#x9;&#x9;Role: anthropic.MessageParamRoleUser,&#xA;&#x9;&#x9;Content: []anthropic.ContentBlockParamUnion{{&#xA;&#x9;&#x9;&#x9;OfRequestTextBlock: &amp;amp;anthropic.TextBlockParam{Text: &#34;What is a quaternion?&#34;, CacheControl: anthropic.CacheControlEphemeralParam{}, Citations: []anthropic.TextCitationParamUnion{{&#xA;&#x9;&#x9;&#x9;&#x9;OfRequestCharLocationCitation: &amp;amp;anthropic.CitationCharLocationParam{CitedText: &#34;cited_text&#34;, DocumentIndex: 0, DocumentTitle: anthropic.String(&#34;x&#34;), EndCharIndex: 0, StartCharIndex: 0},&#xA;&#x9;&#x9;&#x9;}}},&#xA;&#x9;&#x9;}},&#xA;&#x9;}},&#xA;&#x9;Model: anthropic.ModelClaude3_7SonnetLatest,&#xA;})&#xA;if err != nil {&#xA;&#x9;var apierr *anthropic.Error&#xA;&#x9;if errors.As(err, &amp;amp;apierr) {&#xA;&#x9;&#x9;println(string(apierr.DumpRequest(true)))  // Prints the serialized HTTP request&#xA;&#x9;&#x9;println(string(apierr.DumpResponse(true))) // Prints the serialized HTTP response&#xA;&#x9;}&#xA;&#x9;panic(err.Error()) // GET &#34;/v1/messages&#34;: 400 Bad Request { ... }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When other errors occur, they are returned unwrapped; for example, if HTTP transport fails, you might receive &lt;code&gt;*url.Error&lt;/code&gt; wrapping &lt;code&gt;*net.OpError&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Timeouts&lt;/h3&gt; &#xA;&lt;p&gt;Requests do not time out by default; use context to configure a timeout for a request lifecycle.&lt;/p&gt; &#xA;&lt;p&gt;Note that if a request is &lt;a href=&#34;https://raw.githubusercontent.com/anthropics/anthropic-sdk-go/main/#retries&#34;&gt;retried&lt;/a&gt;, the context timeout does not start over. To set a per-retry timeout, use &lt;code&gt;option.WithRequestTimeout()&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// This sets the timeout for the request, including all the retries.&#xA;ctx, cancel := context.WithTimeout(context.Background(), 5*time.Minute)&#xA;defer cancel()&#xA;client.Messages.New(&#xA;&#x9;ctx,&#xA;&#x9;anthropic.MessageNewParams{&#xA;&#x9;&#x9;MaxTokens: 1024,&#xA;&#x9;&#x9;Messages: []anthropic.MessageParam{{&#xA;&#x9;&#x9;&#x9;Role: anthropic.MessageParamRoleUser,&#xA;&#x9;&#x9;&#x9;Content: []anthropic.ContentBlockParamUnion{{&#xA;&#x9;&#x9;&#x9;&#x9;OfRequestTextBlock: &amp;amp;anthropic.TextBlockParam{Text: &#34;What is a quaternion?&#34;},&#xA;&#x9;&#x9;&#x9;}},&#xA;&#x9;&#x9;}},&#xA;&#x9;&#x9;Model: anthropic.ModelClaude3_7SonnetLatest,&#xA;&#x9;},&#xA;&#x9;// This sets the per-retry timeout&#xA;&#x9;option.WithRequestTimeout(20*time.Second),&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Long Requests&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!IMPORTANT] We highly encourage you use the streaming Messages API for longer running requests.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;We do not recommend setting a large &lt;code&gt;MaxTokens&lt;/code&gt; value without using streaming as some networks may drop idle connections after a certain period of time, which can cause the request to fail or &lt;a href=&#34;https://raw.githubusercontent.com/anthropics/anthropic-sdk-go/main/#timeouts&#34;&gt;timeout&lt;/a&gt; without receiving a response from Anthropic.&lt;/p&gt; &#xA;&lt;p&gt;This SDK will also return an error if a non-streaming request is expected to be above roughly 10 minutes long. Calling &lt;code&gt;.Messages.NewStreaming()&lt;/code&gt; or &lt;a href=&#34;https://raw.githubusercontent.com/anthropics/anthropic-sdk-go/main/#timeouts&#34;&gt;setting a custom timeout&lt;/a&gt; disables this error.&lt;/p&gt; &#xA;&lt;h3&gt;File uploads&lt;/h3&gt; &#xA;&lt;p&gt;Request parameters that correspond to file uploads in multipart requests are typed as &lt;code&gt;io.Reader&lt;/code&gt;. The contents of the &lt;code&gt;io.Reader&lt;/code&gt; will by default be sent as a multipart form part with the file name of &#34;anonymous_file&#34; and content-type of &#34;application/octet-stream&#34;.&lt;/p&gt; &#xA;&lt;p&gt;The file name and content-type can be customized by implementing &lt;code&gt;Name() string&lt;/code&gt; or &lt;code&gt;ContentType() string&lt;/code&gt; on the run-time type of &lt;code&gt;io.Reader&lt;/code&gt;. Note that &lt;code&gt;os.File&lt;/code&gt; implements &lt;code&gt;Name() string&lt;/code&gt;, so a file returned by &lt;code&gt;os.Open&lt;/code&gt; will be sent with the file name on disk.&lt;/p&gt; &#xA;&lt;p&gt;We also provide a helper &lt;code&gt;anthropic.FileParam(reader io.Reader, filename string, contentType string)&lt;/code&gt; which can be used to wrap any &lt;code&gt;io.Reader&lt;/code&gt; with the appropriate file name and content type.&lt;/p&gt; &#xA;&lt;h3&gt;Retries&lt;/h3&gt; &#xA;&lt;p&gt;Certain errors will be automatically retried 2 times by default, with a short exponential backoff. We retry by default all connection errors, 408 Request Timeout, 409 Conflict, 429 Rate Limit, and &amp;gt;=500 Internal errors.&lt;/p&gt; &#xA;&lt;p&gt;You can use the &lt;code&gt;WithMaxRetries&lt;/code&gt; option to configure or disable this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Configure the default for all requests:&#xA;client := anthropic.NewClient(&#xA;&#x9;option.WithMaxRetries(0), // default is 2&#xA;)&#xA;&#xA;// Override per-request:&#xA;client.Messages.New(&#xA;&#x9;context.TODO(),&#xA;&#x9;anthropic.MessageNewParams{&#xA;&#x9;&#x9;MaxTokens: 1024,&#xA;&#x9;&#x9;Messages: []anthropic.MessageParam{{&#xA;&#x9;&#x9;&#x9;Role: anthropic.MessageParamRoleUser,&#xA;&#x9;&#x9;&#x9;Content: []anthropic.ContentBlockParamUnion{{&#xA;&#x9;&#x9;&#x9;&#x9;OfRequestTextBlock: &amp;amp;anthropic.TextBlockParam{Text: &#34;What is a quaternion?&#34;},&#xA;&#x9;&#x9;&#x9;}},&#xA;&#x9;&#x9;}},&#xA;&#x9;&#x9;Model: anthropic.ModelClaude3_7SonnetLatest,&#xA;&#x9;},&#xA;&#x9;option.WithMaxRetries(5),&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Accessing raw response data (e.g. response headers)&lt;/h3&gt; &#xA;&lt;p&gt;You can access the raw HTTP response data by using the &lt;code&gt;option.WithResponseInto()&lt;/code&gt; request option. This is useful when you need to examine response headers, status codes, or other details.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Create a variable to store the HTTP response&#xA;var response *http.Response&#xA;message, err := client.Messages.New(&#xA;&#x9;context.TODO(),&#xA;&#x9;anthropic.MessageNewParams{&#xA;&#x9;&#x9;MaxTokens: 1024,&#xA;&#x9;&#x9;Messages: []anthropic.MessageParam{{&#xA;&#x9;&#x9;&#x9;Role: anthropic.MessageParamRoleUser,&#xA;&#x9;&#x9;&#x9;Content: []anthropic.ContentBlockParamUnion{{&#xA;&#x9;&#x9;&#x9;&#x9;OfRequestTextBlock: &amp;amp;anthropic.TextBlockParam{Text: &#34;What is a quaternion?&#34;, CacheControl: anthropic.CacheControlEphemeralParam{}, Citations: []anthropic.TextCitationParamUnion{{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;OfRequestCharLocationCitation: &amp;amp;anthropic.CitationCharLocationParam{CitedText: &#34;cited_text&#34;, DocumentIndex: 0, DocumentTitle: anthropic.String(&#34;x&#34;), EndCharIndex: 0, StartCharIndex: 0},&#xA;&#x9;&#x9;&#x9;&#x9;}}},&#xA;&#x9;&#x9;&#x9;}},&#xA;&#x9;&#x9;}},&#xA;&#x9;&#x9;Model: anthropic.ModelClaude3_7SonnetLatest,&#xA;&#x9;},&#xA;&#x9;option.WithResponseInto(&amp;amp;response),&#xA;)&#xA;if err != nil {&#xA;&#x9;// handle error&#xA;}&#xA;fmt.Printf(&#34;%+v\n&#34;, message)&#xA;&#xA;fmt.Printf(&#34;Status Code: %d\n&#34;, response.StatusCode)&#xA;fmt.Printf(&#34;Headers: %+#v\n&#34;, response.Header)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Making custom/undocumented requests&lt;/h3&gt; &#xA;&lt;p&gt;This library is typed for convenient access to the documented API. If you need to access undocumented endpoints, params, or response properties, the library can still be used.&lt;/p&gt; &#xA;&lt;h4&gt;Undocumented endpoints&lt;/h4&gt; &#xA;&lt;p&gt;To make requests to undocumented endpoints, you can use &lt;code&gt;client.Get&lt;/code&gt;, &lt;code&gt;client.Post&lt;/code&gt;, and other HTTP verbs. &lt;code&gt;RequestOptions&lt;/code&gt; on the client, such as retries, will be respected when making these requests.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;var (&#xA;    // params can be an io.Reader, a []byte, an encoding/json serializable object,&#xA;    // or a &#34;…Params&#34; struct defined in this library.&#xA;    params map[string]interface{}&#xA;&#xA;    // result can be an []byte, *http.Response, a encoding/json deserializable object,&#xA;    // or a model defined in this library.&#xA;    result *http.Response&#xA;)&#xA;err := client.Post(context.Background(), &#34;/unspecified&#34;, params, &amp;amp;result)&#xA;if err != nil {&#xA;    …&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Undocumented request params&lt;/h4&gt; &#xA;&lt;p&gt;To make requests using undocumented parameters, you may use either the &lt;code&gt;option.WithQuerySet()&lt;/code&gt; or the &lt;code&gt;option.WithJSONSet()&lt;/code&gt; methods.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;params := FooNewParams{&#xA;    ID:   &#34;id_xxxx&#34;,&#xA;    Data: FooNewParamsData{&#xA;        FirstName: anthropic.String(&#34;John&#34;),&#xA;    },&#xA;}&#xA;client.Foo.New(context.Background(), params, option.WithJSONSet(&#34;data.last_name&#34;, &#34;Doe&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Undocumented response properties&lt;/h4&gt; &#xA;&lt;p&gt;To access undocumented response properties, you may either access the raw JSON of the response as a string with &lt;code&gt;result.JSON.RawJSON()&lt;/code&gt;, or get the raw JSON of a particular field on the result with &lt;code&gt;result.JSON.Foo.Raw()&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Any fields that are not present on the response struct will be saved and can be accessed by &lt;code&gt;result.JSON.ExtraFields()&lt;/code&gt; which returns the extra fields as a &lt;code&gt;map[string]Field&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Middleware&lt;/h3&gt; &#xA;&lt;p&gt;We provide &lt;code&gt;option.WithMiddleware&lt;/code&gt; which applies the given middleware to requests.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func Logger(req *http.Request, next option.MiddlewareNext) (res *http.Response, err error) {&#xA;&#x9;// Before the request&#xA;&#x9;start := time.Now()&#xA;&#x9;LogReq(req)&#xA;&#xA;&#x9;// Forward the request to the next handler&#xA;&#x9;res, err = next(req)&#xA;&#xA;&#x9;// Handle stuff after the request&#xA;&#x9;end := time.Now()&#xA;&#x9;LogRes(res, err, start - end)&#xA;&#xA;    return res, err&#xA;}&#xA;&#xA;client := anthropic.NewClient(&#xA;&#x9;option.WithMiddleware(Logger),&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When multiple middlewares are provided as variadic arguments, the middlewares are applied left to right. If &lt;code&gt;option.WithMiddleware&lt;/code&gt; is given multiple times, for example first in the client then the method, the middleware in the client will run first and the middleware given in the method will run next.&lt;/p&gt; &#xA;&lt;p&gt;You may also replace the default &lt;code&gt;http.Client&lt;/code&gt; with &lt;code&gt;option.WithHTTPClient(client)&lt;/code&gt;. Only one http client is accepted (this overwrites any previous client) and receives requests after any middleware has been applied.&lt;/p&gt; &#xA;&lt;h2&gt;Amazon Bedrock&lt;/h2&gt; &#xA;&lt;p&gt;To use this library with &lt;a href=&#34;https://aws.amazon.com/bedrock/claude/&#34;&gt;Amazon Bedrock&lt;/a&gt;, use the bedrock request option &lt;code&gt;bedrock.WithLoadDefaultConfig(…)&lt;/code&gt; which reads the &lt;a href=&#34;https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-configure.html&#34;&gt;default config&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Importing the &lt;code&gt;bedrock&lt;/code&gt; library also globally registers a decoder for &lt;code&gt;application/vnd.amazon.eventstream&lt;/code&gt; for streaming.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;github.com/anthropics/anthropic-sdk-go&#34;&#xA;&#x9;&#34;github.com/anthropics/anthropic-sdk-go/bedrock&#34;&#xA;)&#xA;&#xA;func main() {&#xA;&#x9;client := anthropic.NewClient(&#xA;&#x9;&#x9;bedrock.WithLoadDefaultConfig(context.Background()),&#xA;&#x9;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you already have an &lt;code&gt;aws.Config&lt;/code&gt;, you can also use it directly with &lt;code&gt;bedrock.WithConfig(cfg)&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Read more about Anthropic and Amazon Bedrock &lt;a href=&#34;https://docs.anthropic.com/en/api/claude-on-amazon-bedrock&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Google Vertex AI&lt;/h2&gt; &#xA;&lt;p&gt;To use this library with &lt;a href=&#34;https://cloud.google.com/vertex-ai/generative-ai/docs/partner-models/use-claude&#34;&gt;Google Vertex AI&lt;/a&gt;, use the request option &lt;code&gt;vertex.WithGoogleAuth(…)&lt;/code&gt; which reads the &lt;a href=&#34;https://cloud.google.com/docs/authentication/application-default-credentials&#34;&gt;Application Default Credentials&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;context&#34;&#xA;&#xA;&#x9;&#34;github.com/anthropics/anthropic-sdk-go&#34;&#xA;&#x9;&#34;github.com/anthropics/anthropic-sdk-go/vertex&#34;&#xA;)&#xA;&#xA;func main() {&#xA;&#x9;client := anthropic.NewClient(&#xA;&#x9;&#x9;vertex.WithGoogleAuth(context.Background(), &#34;us-central1&#34;, &#34;id-xxx&#34;),&#xA;&#x9;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you already have &lt;code&gt;*google.Credentials&lt;/code&gt;, you can also use it directly with &lt;code&gt;vertex.WithCredentials(ctx, region, projectId, creds)&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Read more about Anthropic and Google Vertex &lt;a href=&#34;https://docs.anthropic.com/en/api/claude-on-vertex-ai&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Semantic versioning&lt;/h2&gt; &#xA;&lt;p&gt;This package generally follows &lt;a href=&#34;https://semver.org/spec/v2.0.0.html&#34;&gt;SemVer&lt;/a&gt; conventions, though certain backwards-incompatible changes may be released as minor versions:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Changes to library internals which are technically public but not intended or documented for external use. &lt;em&gt;(Please open a GitHub issue to let us know if you are relying on such internals.)&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;Changes that we do not expect to impact the vast majority of users in practice.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;We take backwards-compatibility seriously and work hard to ensure you can rely on a smooth upgrade experience.&lt;/p&gt; &#xA;&lt;p&gt;We are keen for your feedback; please open an &lt;a href=&#34;https://www.github.com/anthropics/anthropic-sdk-go/issues&#34;&gt;issue&lt;/a&gt; with questions, bugs, or suggestions.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/anthropics/anthropic-sdk-go/main/CONTRIBUTING.md&#34;&gt;the contributing documentation&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>