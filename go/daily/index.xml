<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-12-31T01:32:21Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>google/btree</title>
    <updated>2022-12-31T01:32:21Z</updated>
    <id>tag:github.com,2022-12-31:/google/btree</id>
    <link href="https://github.com/google/btree" rel="alternate"></link>
    <summary type="html">&lt;p&gt;BTree provides a simple, ordered, in-memory data structure for Go programs.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;BTree implementation for Go&lt;/h1&gt; &#xA;&lt;p&gt;This package provides an in-memory B-Tree implementation for Go, useful as an ordered, mutable data structure.&lt;/p&gt; &#xA;&lt;p&gt;The API is based off of the wonderful &lt;a href=&#34;http://godoc.org/github.com/petar/GoLLRB/llrb&#34;&gt;http://godoc.org/github.com/petar/GoLLRB/llrb&lt;/a&gt;, and is meant to allow btree to act as a drop-in replacement for gollrb trees.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;http://godoc.org/github.com/google/btree&#34;&gt;http://godoc.org/github.com/google/btree&lt;/a&gt; for documentation.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>fluxcd/flux2</title>
    <updated>2022-12-31T01:32:21Z</updated>
    <id>tag:github.com,2022-12-31:/fluxcd/flux2</id>
    <link href="https://github.com/fluxcd/flux2" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Open and extensible continuous delivery solution for Kubernetes. Powered by GitOps Toolkit.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Flux version 2&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/fluxcd/flux2/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/fluxcd/flux2/all.svg?sanitize=true&#34; alt=&#34;release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://bestpractices.coreinfrastructure.org/projects/4782&#34;&gt;&lt;img src=&#34;https://bestpractices.coreinfrastructure.org/projects/4782/badge&#34; alt=&#34;CII Best Practices&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://app.fossa.com/projects/custom%2B162%2Fgithub.com%2Ffluxcd%2Fflux2?ref=badge_shield&#34;&gt;&lt;img src=&#34;https://app.fossa.com/api/projects/custom%2B162%2Fgithub.com%2Ffluxcd%2Fflux2.svg?type=shield&#34; alt=&#34;FOSSA Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://artifacthub.io/packages/helm/fluxcd-community/flux2&#34;&gt;&lt;img src=&#34;https://img.shields.io/endpoint?url=https://artifacthub.io/badge/repository/flux2&#34; alt=&#34;Artifact HUB&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Flux is a tool for keeping Kubernetes clusters in sync with sources of configuration (like Git repositories and OCI artifacts), and automating updates to configuration when there is new code to deploy.&lt;/p&gt; &#xA;&lt;p&gt;Flux version 2 (&#34;v2&#34;) is built from the ground up to use Kubernetes&#39; API extension system, and to integrate with Prometheus and other core components of the Kubernetes ecosystem. In version 2, Flux supports multi-tenancy and support for syncing an arbitrary number of Git repositories, among other long-requested features.&lt;/p&gt; &#xA;&lt;p&gt;Flux v2 is constructed with the &lt;a href=&#34;https://raw.githubusercontent.com/fluxcd/flux2/main/#gitops-toolkit&#34;&gt;GitOps Toolkit&lt;/a&gt;, a set of composable APIs and specialized tools for building Continuous Delivery on top of Kubernetes.&lt;/p&gt; &#xA;&lt;p&gt;Flux is a Cloud Native Computing Foundation (&lt;a href=&#34;https://www.cncf.io/&#34;&gt;CNCF&lt;/a&gt;) project, used in production by various &lt;a href=&#34;https://fluxcd.io/adopters&#34;&gt;organisations&lt;/a&gt; and &lt;a href=&#34;https://fluxcd.io/ecosystem&#34;&gt;cloud providers&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Quickstart and documentation&lt;/h2&gt; &#xA;&lt;p&gt;To get started check out this &lt;a href=&#34;https://fluxcd.io/flux/get-started/&#34;&gt;guide&lt;/a&gt; on how to bootstrap Flux on Kubernetes and deploy a sample application in a GitOps manner.&lt;/p&gt; &#xA;&lt;p&gt;For more comprehensive documentation, see the following guides:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://fluxcd.io/flux/guides/repository-structure/&#34;&gt;Ways of structuring your repositories&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://fluxcd.io/flux/guides/helmreleases/&#34;&gt;Manage Helm Releases&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://fluxcd.io/flux/guides/image-update/&#34;&gt;Automate image updates to Git&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://fluxcd.io/flux/guides/mozilla-sops/&#34;&gt;Manage Kubernetes secrets with Mozilla SOPS&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you need help, please refer to our &lt;strong&gt;&lt;a href=&#34;https://fluxcd.io/support/&#34;&gt;Support page&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;GitOps Toolkit&lt;/h2&gt; &#xA;&lt;p&gt;The GitOps Toolkit is the set of APIs and controllers that make up the runtime for Flux v2. The APIs comprise Kubernetes custom resources, which can be created and updated by a cluster user, or by other automation tooling.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/fluxcd/flux2/main/docs/_files/gitops-toolkit.png&#34; alt=&#34;overview&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can use the toolkit to extend Flux, or to build your own systems for continuous delivery -- see &lt;a href=&#34;https://fluxcd.io/flux/gitops-toolkit/source-watcher/&#34;&gt;the developer guides&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Components&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://fluxcd.io/flux/components/source/&#34;&gt;Source Controller&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://fluxcd.io/flux/components/source/gitrepositories/&#34;&gt;GitRepository CRD&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://fluxcd.io/flux/components/source/ocirepositories/&#34;&gt;OCIRepository CRD&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://fluxcd.io/flux/components/source/helmrepositories/&#34;&gt;HelmRepository CRD&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://fluxcd.io/flux/components/source/helmcharts/&#34;&gt;HelmChart CRD&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://fluxcd.io/flux/components/source/buckets/&#34;&gt;Bucket CRD&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://fluxcd.io/flux/components/kustomize/&#34;&gt;Kustomize Controller&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://fluxcd.io/flux/components/kustomize/kustomization/&#34;&gt;Kustomization CRD&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://fluxcd.io/flux/components/helm/&#34;&gt;Helm Controller&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://fluxcd.io/flux/components/helm/helmreleases/&#34;&gt;HelmRelease CRD&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://fluxcd.io/flux/components/notification/&#34;&gt;Notification Controller&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://fluxcd.io/flux/components/notification/provider/&#34;&gt;Provider CRD&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://fluxcd.io/flux/components/notification/alert/&#34;&gt;Alert CRD&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://fluxcd.io/flux/components/notification/receiver/&#34;&gt;Receiver CRD&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://fluxcd.io/flux/components/image/&#34;&gt;Image Automation Controllers&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://fluxcd.io/flux/components/image/imagerepositories/&#34;&gt;ImageRepository CRD&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://fluxcd.io/flux/components/image/imagepolicies/&#34;&gt;ImagePolicy CRD&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://fluxcd.io/flux/components/image/imageupdateautomations/&#34;&gt;ImageUpdateAutomation CRD&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Community&lt;/h2&gt; &#xA;&lt;p&gt;Need help or want to contribute? Please see the links below. The Flux project is always looking for new contributors and there are a multitude of ways to get involved.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Getting Started? &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Look at our &lt;a href=&#34;https://fluxcd.io/flux/get-started/&#34;&gt;Get Started guide&lt;/a&gt; and give us feedback&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Need help? &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;First: Ask questions on our &lt;a href=&#34;https://github.com/fluxcd/flux2/discussions&#34;&gt;GH Discussions page&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Second: Talk to us in the #flux channel on &lt;a href=&#34;https://slack.cncf.io/&#34;&gt;CNCF Slack&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Please follow our &lt;a href=&#34;https://fluxcd.io/support/&#34;&gt;Support Guidelines&lt;/a&gt; (in short: be nice, be respectful of volunteers&#39; time, understand that maintainers and contributors cannot respond to all DMs, and keep discussions in the public #flux channel as much as possible).&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Have feature proposals or want to contribute? &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Propose features on our &lt;a href=&#34;https://github.com/fluxcd/flux2/discussions&#34;&gt;GitHub Discussions page&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Join our upcoming dev meetings (&lt;a href=&#34;https://docs.google.com/document/d/1l_M0om0qUEN_NNiGgpqJ2tvsF2iioHkaARDeh6b70B0/view&#34;&gt;meeting access and agenda&lt;/a&gt;).&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://lists.cncf.io/g/cncf-flux-dev&#34;&gt;Join the flux-dev mailing list&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Check out &lt;a href=&#34;https://raw.githubusercontent.com/fluxcd/flux2/main/CONTRIBUTING.md&#34;&gt;how to contribute&lt;/a&gt; to the project.&lt;/li&gt; &#xA;   &lt;li&gt;Check out the &lt;a href=&#34;https://fluxcd.io/roadmap/&#34;&gt;project roadmap&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Events&lt;/h3&gt; &#xA;&lt;p&gt;Check out our &lt;strong&gt;&lt;a href=&#34;https://fluxcd.io/#calendar&#34;&gt;events calendar&lt;/a&gt;&lt;/strong&gt;, both with upcoming talks, events and meetings you can attend. Or view the &lt;strong&gt;&lt;a href=&#34;https://fluxcd.io/resources&#34;&gt;resources section&lt;/a&gt;&lt;/strong&gt; with past events videos you can watch.&lt;/p&gt; &#xA;&lt;p&gt;We look forward to seeing you with us!&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>hashicorp/raft</title>
    <updated>2022-12-31T01:32:21Z</updated>
    <id>tag:github.com,2022-12-31:/hashicorp/raft</id>
    <link href="https://github.com/hashicorp/raft" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Golang implementation of the Raft consensus protocol&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;raft &lt;a href=&#34;https://circleci.com/gh/hashicorp/raft&#34;&gt;&lt;img src=&#34;https://circleci.com/gh/hashicorp/raft.svg?style=svg&#34; alt=&#34;CircleCI&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;raft is a &lt;a href=&#34;http://www.golang.org&#34;&gt;Go&lt;/a&gt; library that manages a replicated log and can be used with an FSM to manage replicated state machines. It is a library for providing &lt;a href=&#34;http://en.wikipedia.org/wiki/Consensus_(computer_science)&#34;&gt;consensus&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The use cases for such a library are far-reaching, such as replicated state machines which are a key component of many distributed systems. They enable building Consistent, Partition Tolerant (CP) systems, with limited fault tolerance as well.&lt;/p&gt; &#xA;&lt;h2&gt;Building&lt;/h2&gt; &#xA;&lt;p&gt;If you wish to build raft you&#39;ll need Go version 1.16+ installed.&lt;/p&gt; &#xA;&lt;p&gt;Please check your installation with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;go version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;For complete documentation, see the associated &lt;a href=&#34;http://godoc.org/github.com/hashicorp/raft&#34;&gt;Godoc&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To prevent complications with cgo, the primary backend &lt;code&gt;MDBStore&lt;/code&gt; is in a separate repository, called &lt;a href=&#34;http://github.com/hashicorp/raft-mdb&#34;&gt;raft-mdb&lt;/a&gt;. That is the recommended implementation for the &lt;code&gt;LogStore&lt;/code&gt; and &lt;code&gt;StableStore&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;A pure Go backend using &lt;a href=&#34;https://github.com/etcd-io/bbolt&#34;&gt;Bbolt&lt;/a&gt; is also available called &lt;a href=&#34;https://github.com/hashicorp/raft-boltdb&#34;&gt;raft-boltdb&lt;/a&gt;. It can also be used as a &lt;code&gt;LogStore&lt;/code&gt; and &lt;code&gt;StableStore&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Community Contributed Examples&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Jille/raft-grpc-example&#34;&gt;Raft gRPC Example&lt;/a&gt; - Utilizing the Raft repository with gRPC&lt;/p&gt; &#xA;&lt;h2&gt;Tagged Releases&lt;/h2&gt; &#xA;&lt;p&gt;As of September 2017, HashiCorp will start using tags for this library to clearly indicate major version updates. We recommend you vendor your application&#39;s dependency on this library.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;v0.1.0 is the original stable version of the library that was in main and has been maintained with no breaking API changes. This was in use by Consul prior to version 0.7.0.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;v1.0.0 takes the changes that were staged in the library-v2-stage-one branch. This version manages server identities using a UUID, so introduces some breaking API changes. It also versions the Raft protocol, and requires some special steps when interoperating with Raft servers running older versions of the library (see the detailed comment in config.go about version compatibility). You can reference &lt;a href=&#34;https://github.com/hashicorp/consul/pull/2222&#34;&gt;https://github.com/hashicorp/consul/pull/2222&lt;/a&gt; for an idea of what was required to port Consul to these new interfaces.&lt;/p&gt; &lt;p&gt;This version includes some new features as well, including non voting servers, a new address provider abstraction in the transport layer, and more resilient snapshots.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Protocol&lt;/h2&gt; &#xA;&lt;p&gt;raft is based on &lt;a href=&#34;https://raft.github.io/raft.pdf&#34;&gt;&#34;Raft: In Search of an Understandable Consensus Algorithm&#34;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A high level overview of the Raft protocol is described below, but for details please read the full &lt;a href=&#34;https://raft.github.io/raft.pdf&#34;&gt;Raft paper&lt;/a&gt; followed by the raft source. Any questions about the raft protocol should be sent to the &lt;a href=&#34;https://groups.google.com/forum/#!forum/raft-dev&#34;&gt;raft-dev mailing list&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Protocol Description&lt;/h3&gt; &#xA;&lt;p&gt;Raft nodes are always in one of three states: follower, candidate or leader. All nodes initially start out as a follower. In this state, nodes can accept log entries from a leader and cast votes. If no entries are received for some time, nodes self-promote to the candidate state. In the candidate state nodes request votes from their peers. If a candidate receives a quorum of votes, then it is promoted to a leader. The leader must accept new log entries and replicate to all the other followers. In addition, if stale reads are not acceptable, all queries must also be performed on the leader.&lt;/p&gt; &#xA;&lt;p&gt;Once a cluster has a leader, it is able to accept new log entries. A client can request that a leader append a new log entry, which is an opaque binary blob to Raft. The leader then writes the entry to durable storage and attempts to replicate to a quorum of followers. Once the log entry is considered &lt;em&gt;committed&lt;/em&gt;, it can be &lt;em&gt;applied&lt;/em&gt; to a finite state machine. The finite state machine is application specific, and is implemented using an interface.&lt;/p&gt; &#xA;&lt;p&gt;An obvious question relates to the unbounded nature of a replicated log. Raft provides a mechanism by which the current state is snapshotted, and the log is compacted. Because of the FSM abstraction, restoring the state of the FSM must result in the same state as a replay of old logs. This allows Raft to capture the FSM state at a point in time, and then remove all the logs that were used to reach that state. This is performed automatically without user intervention, and prevents unbounded disk usage as well as minimizing time spent replaying logs.&lt;/p&gt; &#xA;&lt;p&gt;Lastly, there is the issue of updating the peer set when new servers are joining or existing servers are leaving. As long as a quorum of nodes is available, this is not an issue as Raft provides mechanisms to dynamically update the peer set. If a quorum of nodes is unavailable, then this becomes a very challenging issue. For example, suppose there are only 2 peers, A and B. The quorum size is also 2, meaning both nodes must agree to commit a log entry. If either A or B fails, it is now impossible to reach quorum. This means the cluster is unable to add, or remove a node, or commit any additional log entries. This results in &lt;em&gt;unavailability&lt;/em&gt;. At this point, manual intervention would be required to remove either A or B, and to restart the remaining node in bootstrap mode.&lt;/p&gt; &#xA;&lt;p&gt;A Raft cluster of 3 nodes can tolerate a single node failure, while a cluster of 5 can tolerate 2 node failures. The recommended configuration is to either run 3 or 5 raft servers. This maximizes availability without greatly sacrificing performance.&lt;/p&gt; &#xA;&lt;p&gt;In terms of performance, Raft is comparable to Paxos. Assuming stable leadership, committing a log entry requires a single round trip to half of the cluster. Thus performance is bound by disk I/O and network latency.&lt;/p&gt;</summary>
  </entry>
</feed>