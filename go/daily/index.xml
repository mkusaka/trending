<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-05-25T01:31:55Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>zerodha/kite-mcp-server</title>
    <updated>2025-05-25T01:31:55Z</updated>
    <id>tag:github.com,2025-05-25:/zerodha/kite-mcp-server</id>
    <link href="https://github.com/zerodha/kite-mcp-server" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Zerodha Kite MCP server&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Kite MCP Server&lt;/h1&gt; &#xA;&lt;h2&gt;Claude config:&lt;/h2&gt; &#xA;&lt;p&gt;The path to the config file can be found in the &lt;code&gt;claude_desktop_config.json&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;p&gt;Linux: &lt;code&gt;~/.config/Claude/claude_desktop_config.json&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;stdio mode:&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;mcpServers&#34;: {&#xA;    &#34;kite&#34;: {&#xA;      &#34;command&#34;: &#34;go&#34;,&#xA;      &#34;args&#34;: [&#34;run&#34;, &#34;&amp;lt;ABSOLUTE_PATH&amp;gt;/main.go&#34;],&#xA;      &#34;env&#34;: {&#xA;        &#34;APP_MODE&#34;: &#34;stdio&#34;,&#xA;        &#34;KITE_API_KEY&#34;: &#34;&amp;lt;your_api_key&amp;gt;&#34;,&#xA;        &#34;KITE_API_SECRET&#34;: &#34;&amp;lt;your_api_secret&amp;gt;&#34;&#xA;      }&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;SSE mode&lt;/h3&gt; &#xA;&lt;p&gt;For the SSE mode, you can run the following command to start the server:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;go run main.go&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;mcpServers&#34;: {&#xA;    &#34;kite&#34;: {&#xA;      &#34;command&#34;: &#34;npx&#34;,&#xA;      &#34;args&#34;: [&#34;mcp-remote&#34;, &#34;http://localhost:8081/sse&#34;]&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to use the hosted version, you can use the following config:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;mcpServers&#34;: {&#xA;    &#34;kite&#34;: {&#xA;      &#34;command&#34;: &#34;npx&#34;,&#xA;      &#34;args&#34;: [&#34;mcp-remote&#34;, &#34;https://mcp.kite.trade/sse&#34;]&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Kite Connect API Integration Status&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;API Method&lt;/th&gt; &#xA;   &lt;th&gt;Integration Status&lt;/th&gt; &#xA;   &lt;th&gt;Remarks&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;User &amp;amp; Account Methods&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;GetUserProfile()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;[x]&lt;/td&gt; &#xA;   &lt;td&gt;Implemented as &lt;code&gt;get_profile&lt;/code&gt; tool&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;GetUserMargins()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;[x]&lt;/td&gt; &#xA;   &lt;td&gt;Implemented as &lt;code&gt;get_margins&lt;/code&gt; tool&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;GetHoldings()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;[x]&lt;/td&gt; &#xA;   &lt;td&gt;Implemented as &lt;code&gt;get_holdings&lt;/code&gt; tool&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;GetPositions()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;[x]&lt;/td&gt; &#xA;   &lt;td&gt;Implemented as &lt;code&gt;get_positions&lt;/code&gt; tool&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;GetFullUserProfile()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;[ ]&lt;/td&gt; &#xA;   &lt;td&gt;Not yet implemented&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;InvalidateAccessToken()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;[ ]&lt;/td&gt; &#xA;   &lt;td&gt;Not yet implemented&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;InvalidateRefreshToken()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;[ ]&lt;/td&gt; &#xA;   &lt;td&gt;Not yet implemented&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;RenewAccessToken()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;[ ]&lt;/td&gt; &#xA;   &lt;td&gt;Not yet implemented&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Orders &amp;amp; Trades Methods&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;GetOrders()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;[x]&lt;/td&gt; &#xA;   &lt;td&gt;Implemented as &lt;code&gt;get_orders&lt;/code&gt; tool&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;GetTrades()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;[x]&lt;/td&gt; &#xA;   &lt;td&gt;Implemented as &lt;code&gt;get_trades&lt;/code&gt; tool&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;PlaceOrder()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;[x]&lt;/td&gt; &#xA;   &lt;td&gt;Implemented as &lt;code&gt;place_order&lt;/code&gt; tool&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;ModifyOrder()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;[x]&lt;/td&gt; &#xA;   &lt;td&gt;Implemented as &lt;code&gt;modify_order&lt;/code&gt; tool&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;CancelOrder()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;[x]&lt;/td&gt; &#xA;   &lt;td&gt;Implemented as &lt;code&gt;cancel_order&lt;/code&gt; tool&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;ExitOrder()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;[ ]&lt;/td&gt; &#xA;   &lt;td&gt;Not yet implemented&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;ConvertPosition()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;[ ]&lt;/td&gt; &#xA;   &lt;td&gt;Not yet implemented&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;GetOrderHistory()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;[ ]&lt;/td&gt; &#xA;   &lt;td&gt;Not yet implemented&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;GetOrderTrades()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;[ ]&lt;/td&gt; &#xA;   &lt;td&gt;Not yet implemented&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;GetOrderMargins()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;[ ]&lt;/td&gt; &#xA;   &lt;td&gt;Not yet implemented&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;GetBasketMargins()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;[ ]&lt;/td&gt; &#xA;   &lt;td&gt;Not yet implemented&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;GetOrderCharges()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;[ ]&lt;/td&gt; &#xA;   &lt;td&gt;Not yet implemented&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;GTT Orders&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;GetGTTs()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;[x]&lt;/td&gt; &#xA;   &lt;td&gt;Implemented as &lt;code&gt;get_gtts&lt;/code&gt; tool&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;GetGTT()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;[ ]&lt;/td&gt; &#xA;   &lt;td&gt;Not yet implemented&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;PlaceGTT()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;[x]&lt;/td&gt; &#xA;   &lt;td&gt;Implemented as &lt;code&gt;place_gtt_order&lt;/code&gt; tool&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;ModifyGTT()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;[x]&lt;/td&gt; &#xA;   &lt;td&gt;Implemented as &lt;code&gt;modify_gtt_order&lt;/code&gt; tool&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;DeleteGTT()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;[x]&lt;/td&gt; &#xA;   &lt;td&gt;Implemented as &lt;code&gt;delete_gtt_order&lt;/code&gt; tool&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Market Data Methods&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;GetQuote()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;[x]&lt;/td&gt; &#xA;   &lt;td&gt;Implemented as &lt;code&gt;get_quotes&lt;/code&gt; tool&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;GetHistoricalData()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;[x]&lt;/td&gt; &#xA;   &lt;td&gt;Implemented as &lt;code&gt;get_historical_data&lt;/code&gt; tool&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;GetLTP()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;[ ]&lt;/td&gt; &#xA;   &lt;td&gt;Not yet implemented&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;GetOHLC()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;[ ]&lt;/td&gt; &#xA;   &lt;td&gt;Not yet implemented&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;GetInstruments()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;[-]&lt;/td&gt; &#xA;   &lt;td&gt;Won&#39;t implement. Use &lt;code&gt;instruments_search&lt;/code&gt; tool.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;GetInstrumentsByExchange()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;[-]&lt;/td&gt; &#xA;   &lt;td&gt;Won&#39;t implement&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;GetAuctionInstruments()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;[ ]&lt;/td&gt; &#xA;   &lt;td&gt;Not yet implemented&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Mutual Funds Methods&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;GetMFOrders()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;[ ]&lt;/td&gt; &#xA;   &lt;td&gt;Not yet implemented&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;GetMFOrderInfo()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;[ ]&lt;/td&gt; &#xA;   &lt;td&gt;Not yet implemented&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;PlaceMFOrder()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;[ ]&lt;/td&gt; &#xA;   &lt;td&gt;Not yet implemented&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;CancelMFOrder()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;[ ]&lt;/td&gt; &#xA;   &lt;td&gt;Not yet implemented&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;GetMFSIPs()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;[ ]&lt;/td&gt; &#xA;   &lt;td&gt;Not yet implemented&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;GetMFSIPInfo()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;[ ]&lt;/td&gt; &#xA;   &lt;td&gt;Not yet implemented&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;PlaceMFSIP()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;[ ]&lt;/td&gt; &#xA;   &lt;td&gt;Not yet implemented&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;ModifyMFSIP()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;[ ]&lt;/td&gt; &#xA;   &lt;td&gt;Not yet implemented&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;CancelMFSIP()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;[ ]&lt;/td&gt; &#xA;   &lt;td&gt;Not yet implemented&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;GetMFHoldings()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;[x]&lt;/td&gt; &#xA;   &lt;td&gt;Implemented as &lt;code&gt;get_mf_holdings&lt;/code&gt; tool&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;GetMFHoldingInfo()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;[ ]&lt;/td&gt; &#xA;   &lt;td&gt;Not yet implemented&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;GetMFInstruments()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;[ ]&lt;/td&gt; &#xA;   &lt;td&gt;Not yet implemented&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;GetMFOrdersByDate()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;[ ]&lt;/td&gt; &#xA;   &lt;td&gt;Not yet implemented&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;GetMFAllottedISINs()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;[ ]&lt;/td&gt; &#xA;   &lt;td&gt;Not yet implemented&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Other Methods&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;InitiateHoldingsAuth()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;[ ]&lt;/td&gt; &#xA;   &lt;td&gt;Not yet implemented&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;GetUserSegmentMargins()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;[ ]&lt;/td&gt; &#xA;   &lt;td&gt;Not yet implemented&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt;</summary>
  </entry>
  <entry>
    <title>kubetail-org/kubetail</title>
    <updated>2025-05-25T01:31:55Z</updated>
    <id>tag:github.com,2025-05-25:/kubetail-org/kubetail</id>
    <link href="https://github.com/kubetail-org/kubetail" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Real-time logging dashboard for Kubernetes (browser/terminal)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Kubetail&lt;/h1&gt; &#xA;&lt;p&gt;&lt;em&gt;Kubetail is a real-time logging dashboard for Kubernetes (browser/terminal)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;a href=&#34;https://youtu.be/q9rV9gHQb4Q&#34;&gt; &lt;img width=&#34;350&#34; alt=&#34;demo-thumbnail&#34; src=&#34;https://github.com/user-attachments/assets/3b528e7e-5f8a-4bfd-86a1-0b70691b8a4c&#34;&gt; &lt;/a&gt; &#xA;&lt;p&gt;Demo: &lt;a href=&#34;https://www.kubetail.com/demo&#34;&gt;https://www.kubetail.com/demo&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://discord.gg/CmsmWAVkvX&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/1212031524216770650?logo=Discord&amp;amp;style=flat-square&amp;amp;logoColor=FFFFFF&amp;amp;labelColor=5B65F0&amp;amp;label=Discord&amp;amp;color=64B73A&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://kubernetes.slack.com/archives/C08SHG1GR37&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Slack-kubetail-364954?logo=slack&amp;amp;labelColor=4D1C51&#34; alt=&#34;Slack&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/kubetail-org/kubetail/main/CODE_OF_CONDUCT.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Contributor%20Covenant-2.1-4baaaa.svg?sanitize=true&#34; alt=&#34;Contributor Covenant&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/kubetail-org&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Contributor%20Resources-purple?style=flat-square&#34; alt=&#34;Contributor Resources&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;img src=&#34;https://github.com/user-attachments/assets/3713a774-1b3a-41f9-8e9d-9331bbf8acac&#34; width=&#34;300&#34; title=&#34;Kubetail&#34;&gt; &#xA;&lt;br&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;&lt;strong&gt;Kubetail&lt;/strong&gt; is a general-purpose logging dashboard for Kubernetes, optimized for tailing logs across across multi-container workloads in real-time. With Kubetail, you can view logs from all the containers in a workload (e.g. Deployment or DaemonSet) merged into a single, chronological timeline, delivered to your browser or terminal.&lt;/p&gt; &#xA;&lt;p&gt;The primary entry point for Kubetail is the &lt;code&gt;kubetail&lt;/code&gt; CLI tool, which can launch a local web dashboard on your desktop or stream raw logs directly to your terminal. Behind the scenes, Kubetail uses your cluster&#39;s Kubernetes API to fetch logs directly from your cluster, so it works out of the box without needing to forward your logs to an external service first. Kubetail also uses your Kubernetes API to track container lifecycle events in order to keep your log timeline in sync as containers start, stop or get replaced. This makes it easy to follow logs seamlessly as user requests move from one ephemeral container to another across services.&lt;/p&gt; &#xA;&lt;p&gt;Our goal is to build the most powerful, user-friendly logging platform for Kubernetes and we&#39;d love your input. If you notice a bug or have a suggestion please create a GitHub Issue or send us an email (&lt;a href=&#34;mailto:hello@kubetail.com&#34;&gt;hello@kubetail.com&lt;/a&gt;)!&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Clean, easy-to-use interface&lt;/li&gt; &#xA; &lt;li&gt;View log messages in real-time&lt;/li&gt; &#xA; &lt;li&gt;Filter logs by: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Workload (e.g. Deployment, CronJob, StatefulSet)&lt;/li&gt; &#xA;   &lt;li&gt;Absolute or relative time range&lt;/li&gt; &#xA;   &lt;li&gt;Node properties (e.g. availability zone, CPU architecture, node ID)&lt;/li&gt; &#xA;   &lt;li&gt;Grep&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Uses your Kubernetes API to retrieve log messages so data never leaves your possession (private by default)&lt;/li&gt; &#xA; &lt;li&gt;Web dashboard can be installed on desktop or in cluster&lt;/li&gt; &#xA; &lt;li&gt;Switch between multiple clusters (Desktop-only)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Quickstart (Desktop)&lt;/h2&gt; &#xA;&lt;h3&gt;Option 1: Package Managers&lt;/h3&gt; &#xA;&lt;p&gt;First, install the Kubetail CLI tool (&lt;code&gt;kubetail&lt;/code&gt;) via your favorite package manager:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;# Homebrew&#xA;brew install kubetail&#xA;&#xA;# Winget&#xA;winget install Kubetail.Kubetail&#xA;&#xA;# Chocolatey&#xA;choco install kubetail&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Next, start the web dashboard using the &lt;code&gt;serve&lt;/code&gt; subcommand:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;kubetail serve&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This command will open &lt;a href=&#34;http://localhost:7500/&#34;&gt;http://localhost:7500/&lt;/a&gt; in your default browser. Have fun tailing your logs!&lt;/p&gt; &#xA;&lt;h3&gt;Option 2: Shell&lt;/h3&gt; &#xA;&lt;p&gt;First, download and run the install script:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;curl -sS https://www.kubetail.com/install.sh | bash&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Next, start the web dashboard using the &lt;code&gt;serve&lt;/code&gt; subcommand:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;kubetail serve&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This command will open &lt;a href=&#34;http://localhost:7500/&#34;&gt;http://localhost:7500/&lt;/a&gt; in your default browser. Have fun tailing your logs!&lt;/p&gt; &#xA;&lt;h3&gt;Option 3: Binaries&lt;/h3&gt; &#xA;&lt;p&gt;Download the binary for your OS/Arch (from the latest &lt;a href=&#34;https://github.com/kubetail-org/kubetail/releases/latest&#34;&gt;release binaries&lt;/a&gt;):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Darwin (&lt;a href=&#34;https://github.com/kubetail-org/kubetail/releases/latest/download/kubetail-darwin-amd64&#34;&gt;amd64&lt;/a&gt;, &lt;a href=&#34;https://github.com/kubetail-org/kubetail/releases/latest/download/kubetail-darwin-arm64&#34;&gt;arm64&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Linux (&lt;a href=&#34;https://github.com/kubetail-org/kubetail/releases/latest/download/kubetail-linux-amd64&#34;&gt;amd64&lt;/a&gt;, &lt;a href=&#34;https://github.com/kubetail-org/kubetail/releases/latest/download/kubetail-linux-arm64&#34;&gt;arm64&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Windows (&lt;a href=&#34;https://github.com/kubetail-org/kubetail/releases/latest/download/kubetail-windows-amd64&#34;&gt;amd64&lt;/a&gt;, &lt;a href=&#34;https://github.com/kubetail-org/kubetail/releases/latest/download/kubetail-windows-arm64&#34;&gt;arm64&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Rename the file and make it executable:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;mv &amp;lt;filename&amp;gt; kubetail&#xA;chmod a+x kubetail&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Next, start the web dashboard using the &lt;code&gt;serve&lt;/code&gt; subcommand:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;kubetail serve&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This command will open &lt;a href=&#34;http://localhost:7500/&#34;&gt;http://localhost:7500/&lt;/a&gt; in your default browser. Have fun tailing your logs!&lt;/p&gt; &#xA;&lt;h2&gt;Quickstart (Cluster)&lt;/h2&gt; &#xA;&lt;h3&gt;Option 1: Helm&lt;/h3&gt; &#xA;&lt;p&gt;First, add the Kubetail org&#39;s chart repository, then install the &#34;kubetail&#34; chart:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;helm repo add kubetail https://kubetail-org.github.io/helm-charts/&#xA;helm install kubetail kubetail/kubetail --namespace kubetail-system --create-namespace&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more information on how to configure the helm chart, see the chart&#39;s &lt;a href=&#34;https://github.com/kubetail-org/helm-charts/raw/main/charts/kubetail/values.yaml&#34;&gt;values.yaml&lt;/a&gt; file.&lt;/p&gt; &#xA;&lt;p&gt;To access the web dashboard you can expose it as an ingress using the chart or you can use your usual access methods such as &lt;code&gt;kubectl port-forward&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;kubectl port-forward -n kubetail-system svc/kubetail-dashboard 8080:8080&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Visit &lt;a href=&#34;http://localhost:8080&#34;&gt;http://localhost:8080&lt;/a&gt;. Have fun tailing your logs!&lt;/p&gt; &#xA;&lt;h3&gt;Option 2: YAML Manifest&lt;/h3&gt; &#xA;&lt;p&gt;First, create a namespace for the Kubetail resources:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;kubectl create namespace kubetail-system&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Next, choose your authentication mode (&lt;code&gt;cluster&lt;/code&gt; or &lt;code&gt;token&lt;/code&gt;) and apply the latest manifest file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;# For cluster-based authentication use kubetail-clusterauth.yaml:&#xA;kubectl apply -f https://github.com/kubetail-org/helm-charts/releases/latest/download/kubetail-clusterauth.yaml&#xA;&#xA;# For token-based authentication use kubetail-tokenauth.yaml:&#xA;kubectl apply -f https://github.com/kubetail-org/helm-charts/releases/latest/download/kubetail-tokenauth.yaml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To access the web dashboard you can use your usual access methods such as &lt;code&gt;kubectl port-forward&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;kubectl port-forward -n kubetail-system svc/kubetail-dashboard 8080:8080&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Visit &lt;a href=&#34;http://localhost:8080&#34;&gt;http://localhost:8080&lt;/a&gt;. Have fun tailing your logs!&lt;/p&gt; &#xA;&lt;h3&gt;Option 3: Glasskube&lt;/h3&gt; &#xA;&lt;p&gt;To install Kubetail using &lt;a href=&#34;https://glasskube.dev/&#34;&gt;Glasskube&lt;/a&gt;, you can select &#34;Kubetail&#34; from the &#34;ClusterPackages&#34; tab in the Glasskube GUI then click &#34;install&#34; or you can run the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;glasskube install kubetail&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once Kubetail is installed you can use it by clicking &#34;open&#34; in the Glasskube GUI or by using the &lt;code&gt;open&lt;/code&gt; command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;glasskube open kubetail&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Have fun tailing your logs!&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Visit the &lt;a href=&#34;https://www.kubetail.com/&#34;&gt;Kubetail documentation&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Roadmap and Status&lt;/h2&gt; &#xA;&lt;p&gt;This is our high-level plan for the Kubetail project, in order:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th&gt;Step&lt;/th&gt; &#xA;   &lt;th&gt;Status&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;Real-time container logs&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;2&lt;/td&gt; &#xA;   &lt;td&gt;Real-time search and polished user experience&lt;/td&gt; &#xA;   &lt;td&gt;🛠️&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;3&lt;/td&gt; &#xA;   &lt;td&gt;Real-time system logs (e.g. systemd, k8s events)&lt;/td&gt; &#xA;   &lt;td&gt;🔲&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;4&lt;/td&gt; &#xA;   &lt;td&gt;Basic customizability (e.g. colors, time formats)&lt;/td&gt; &#xA;   &lt;td&gt;🔲&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;5&lt;/td&gt; &#xA;   &lt;td&gt;Message parsing and metrics&lt;/td&gt; &#xA;   &lt;td&gt;🔲&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;6&lt;/td&gt; &#xA;   &lt;td&gt;Historic data (e.g. log archives, metrics timeseries)&lt;/td&gt; &#xA;   &lt;td&gt;🔲&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;7&lt;/td&gt; &#xA;   &lt;td&gt;Kubetail API and developer-facing client libraries&lt;/td&gt; &#xA;   &lt;td&gt;🔲&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;N&lt;/td&gt; &#xA;   &lt;td&gt;World Peace&lt;/td&gt; &#xA;   &lt;td&gt;🔲&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;And here are some additional details:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Real-time container logs&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Users can view the container logs from the pods currently running inside their clusters quickly and easily using a web dashboard. Users can view container logs organized by workloads and follow log messages as ephemeral containers get created and deleted. They can also narrow their viewing window by timestamp and filter logs by source properties such as region, zone and node.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Real-time search and polished user experience&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Users can install Kubetail easily on their desktops and in their clusters. By default, Kubetail will use only the Kubernetes API to fetch basic data such as running workloads and container logs. If a user wants more advanced functionality they can install Kubetail custom services in their cluster (i.e. &#34;Kubetail Cluster API&#34; and &#34;Kubetail Cluster Agent&#34;, collectively known as the &#34;Kubetail API&#34;) and gain access to features such as log search, log file sizes and last event timestamps. The entire experience of installing, upgrading and uninstalling the Kubetail API is very polished and users are able to view their logs with equally powerful tools in the browser and the terminal using the Kubetail web dashboard and CLI tool.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Real-time system logs&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Users who install the Kubetail API gain immediate access to their node-level logs (e.g. systemd) and cluster-level logs (e.g. kubernetes events) and view them in an integrated interface that shows their container logs in context with other system information such as CPU utilization, memory usage and disk space. System logs are viewable in real-time, in the same merged timeline with other logs. Users can filter system logs by timestamp and source properties.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Basic customizability&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Users can fully customize their Kubetail experience when using the web dashboard and CLI tool by modifying their user settings. The user settings are modifiable by hand using a config file or via the dashboard UI. The experience is very polished and works seamlessly across upgrades that may add/remove/modify user settings. Users have the option to sync their settings across multiple devices.&lt;/p&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;h3&gt;Repository Structure&lt;/h3&gt; &#xA;&lt;p&gt;This monorepo contains the following modules:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Kubetail CLI (&lt;a href=&#34;https://raw.githubusercontent.com/kubetail-org/kubetail/main/modules/cli&#34;&gt;modules/cli&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Kubetail Cluster API (&lt;a href=&#34;https://raw.githubusercontent.com/kubetail-org/kubetail/main/modules/cluster-api&#34;&gt;modules/cluster-api&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Kubetail Cluster Agent (&lt;a href=&#34;https://raw.githubusercontent.com/kubetail-org/kubetail/main/modules/cluster-agent&#34;&gt;modules/cluster-agent&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Kubetail Dashboard (&lt;a href=&#34;https://raw.githubusercontent.com/kubetail-org/kubetail/main/modules/dashboard&#34;&gt;modules/dashboard&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;It also contains the source code for the Kubetail Dashboard&#39;s frontend and the Rust binary that powers log search:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Dashboard UI (&lt;a href=&#34;https://raw.githubusercontent.com/kubetail-org/kubetail/main/dashboard-ui&#34;&gt;dashboard-ui&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;rgkl (&lt;a href=&#34;https://raw.githubusercontent.com/kubetail-org/kubetail/main/crates/rgkl&#34;&gt;crates/rgkl&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Setting up the Development Environment&lt;/h3&gt; &#xA;&lt;h4&gt;Dependencies&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://tilt.dev/&#34;&gt;Tilt&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://go.dev/&#34;&gt;Go&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pnpm.io/&#34;&gt;pnpm&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tilt-dev/ctlptl&#34;&gt;ctlptl&lt;/a&gt; (optional)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Next steps&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Create a Kubernetes Dev Cluster&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;ctlptl apply -f hack/ctlptl/minikube.yaml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can use any type of cluster that &lt;a href=&#34;https://docs.tilt.dev/choosing_clusters.html&#34;&gt;works with Tilt&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Start the dev environment:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;tilt up&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Start the Dashboard server:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;cd modules/dashboard&#xA;go run cmd/main.go -c hack/config.yaml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;Run the Dashboard UI locally:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;cd dashboard-ui&#xA;pnpm install&#xA;pnpm dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now access the dashboard at &lt;a href=&#34;http://localhost:5173&#34;&gt;http://localhost:5173&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Optimize Development Environment for Rust (Optional)&lt;/h3&gt; &#xA;&lt;p&gt;By default, the dev environment compiles &#34;release&#34; builds of the Rust components when you run run &lt;code&gt;tilt up&lt;/code&gt;. If you want to iterate more quickly, you can have Tilt compile the rust code locally using &#34;debug&#34; builds instead.&lt;/p&gt; &#xA;&lt;h4&gt;Dependencies&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://rustup.rs&#34;&gt;rustup&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://protobuf.dev/installation/&#34;&gt;protobuf&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Next steps&lt;/h4&gt; &#xA;&lt;p&gt;First, install the Rust target required for your architecture:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;# x86_64&#xA;rustup target add x86_64-unknown-linux-musl&#xA;&#xA;# aarch64&#xA;rustup target add aarch64-unknown-linux-musl&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Next, install the tools required by Rust cross compiler:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;# macOS (Homebrew)&#xA;brew install FiloSottile/musl-cross/musl-cross&#xA;&#xA;# Linux (Ubuntu)&#xA;apt-get install musl-tools&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On macOS, add this to your &lt;code&gt;~/.cargo/config.toml&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;[target.x86_64-unknown-linux-musl]&#xA;linker = &#34;x86_64-linux-musl-gcc&#34;&#xA;&#xA;[target.aarch64-unknown-linux-musl]&#xA;linker = &#34;aarch64-linux-musl-gcc&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Finally, to use the local compiler, just run Tilt using using the &lt;code&gt;KUBETAIL_DEV_RUST_LOCAL&lt;/code&gt; env flag:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;KUBETAIL_DEV_RUST_LOCAL=true tilt up&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Build&lt;/h2&gt; &#xA;&lt;h3&gt;CLI Tool&lt;/h3&gt; &#xA;&lt;p&gt;To build the Kubetail CLI tool executable (&lt;code&gt;kubetail&lt;/code&gt;), run the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When the build process finishes you can find the executable in the local &lt;code&gt;bin/&lt;/code&gt; directory.&lt;/p&gt; &#xA;&lt;h3&gt;Dashboard&lt;/h3&gt; &#xA;&lt;p&gt;To build a docker image for a production deployment of the Kubetail Dashboard server, run the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;docker build -f build/package/Dockerfile.dashboard -t kubetail-dashboard:latest .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Cluster API&lt;/h3&gt; &#xA;&lt;p&gt;To build a docker image for a production deployment of the Kubetail Cluster API server, run the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;docker build -f build/package/Dockerfile.cluster-api -t kubetail-cluster-api:latest .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Cluster Agent&lt;/h3&gt; &#xA;&lt;p&gt;To build a docker image for a production deployment of the Kubetail Cluster Agent, run the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;docker build -f build/package/Dockerfile.cluster-agent -t kubetail-cluster-agent:latest .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Get Involved&lt;/h2&gt; &#xA;&lt;p&gt;We&#39;re building the most &lt;strong&gt;user-friendly&lt;/strong&gt;, &lt;strong&gt;cost-effective&lt;/strong&gt;, and &lt;strong&gt;secure&lt;/strong&gt; logging platform for Kubernetes and we&#39;d love your contributions! Here&#39;s how you can help:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;UI/UX design&lt;/li&gt; &#xA; &lt;li&gt;React frontend development&lt;/li&gt; &#xA; &lt;li&gt;Reporting issues and suggesting features&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Reach us at &lt;a href=&#34;mailto:hello@kubetail.com&#34;&gt;hello@kubetail.com&lt;/a&gt;, or join our &lt;a href=&#34;https://discord.gg/CmsmWAVkvX&#34;&gt;Discord server&lt;/a&gt; or &lt;a href=&#34;https://join.slack.com/t/kubetail/shared_invite/zt-2cq01cbm8-e1kbLT3EmcLPpHSeoFYm1w&#34;&gt;Slack channel&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>