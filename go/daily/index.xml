<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-02-12T01:29:16Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>danielgtaylor/huma</title>
    <updated>2024-02-12T01:29:16Z</updated>
    <id>tag:github.com,2024-02-12:/danielgtaylor/huma</id>
    <link href="https://github.com/danielgtaylor/huma" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Huma REST/HTTP API Framework for Golang with OpenAPI 3&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/106826/78105564-51102780-73a6-11ea-99ff-84d6c1b3e8df.png&#34; alt=&#34;Huma Rest API Framework&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://huma.rocks/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Powered%20By-HUMA-f40273&#34; alt=&#34;HUMA Powered&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/danielgtaylor/huma/actions?query=workflow%3ACI+branch%3Amain++&#34;&gt;&lt;img src=&#34;https://github.com/danielgtaylor/huma/workflows/CI/badge.svg?branch=main&#34; alt=&#34;CI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/danielgtaylor/huma&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/danielgtaylor/huma/branch/main/graph/badge.svg?sanitize=true&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pkg.go.dev/github.com/danielgtaylor/huma/v2?tab=doc&#34;&gt;&lt;img src=&#34;https://godoc.org/github.com/danielgtaylor/huma/v2?status.svg?sanitize=true&#34; alt=&#34;Docs&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/danielgtaylor/huma/v2&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/danielgtaylor/huma/v2&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/danielgtaylor/huma/main/#intro&#34;&gt;What is huma?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/danielgtaylor/huma/main/#install&#34;&gt;Install&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/danielgtaylor/huma/main/#example&#34;&gt;Example&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/danielgtaylor/huma/main/#documentation&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a name=&#34;intro&#34;&gt;&lt;/a&gt; A modern, simple, fast &amp;amp; flexible micro framework for building HTTP REST/RPC APIs in Go backed by OpenAPI 3 and JSON Schema. Pronounced IPA: &lt;a href=&#34;https://en.wiktionary.org/wiki/Wiktionary:International_Phonetic_Alphabet&#34;&gt;/&#39;hjuːmɑ/&lt;/a&gt;. The goals of this project are to provide:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Incremental adoption for teams with existing services &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Bring your own router, middleware, and logging/metrics&lt;/li&gt; &#xA;   &lt;li&gt;Extensible OpenAPI &amp;amp; JSON Schema layer to document existing routes&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;A modern REST or HTTP RPC API backend framework for Go developers &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Described by &lt;a href=&#34;https://github.com/OAI/OpenAPI-Specification/raw/master/versions/3.1.0.md&#34;&gt;OpenAPI 3.1&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://json-schema.org/&#34;&gt;JSON Schema&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Guard rails to prevent common mistakes&lt;/li&gt; &#xA; &lt;li&gt;Documentation that can&#39;t get out of date&lt;/li&gt; &#xA; &lt;li&gt;High-quality generated developer tooling&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Features include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Declarative interface on top of your router of choice: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Operation &amp;amp; model documentation&lt;/li&gt; &#xA;   &lt;li&gt;Request params (path, query, or header)&lt;/li&gt; &#xA;   &lt;li&gt;Request body&lt;/li&gt; &#xA;   &lt;li&gt;Responses (including errors)&lt;/li&gt; &#xA;   &lt;li&gt;Response headers&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;JSON Errors using &lt;a href=&#34;https://tools.ietf.org/html/rfc7807&#34;&gt;RFC7807&lt;/a&gt; and &lt;code&gt;application/problem+json&lt;/code&gt; by default (but can be changed)&lt;/li&gt; &#xA; &lt;li&gt;Per-operation request size limits with sane defaults&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/HTTP/Content_negotiation&#34;&gt;Content negotiation&lt;/a&gt; between server and client &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Support for JSON (&lt;a href=&#34;https://tools.ietf.org/html/rfc8259&#34;&gt;RFC 8259&lt;/a&gt;) and CBOR (&lt;a href=&#34;https://tools.ietf.org/html/rfc7049&#34;&gt;RFC 7049&lt;/a&gt;) content types via the &lt;code&gt;Accept&lt;/code&gt; header with the default config.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Conditional requests support, e.g. &lt;code&gt;If-Match&lt;/code&gt; or &lt;code&gt;If-Unmodified-Since&lt;/code&gt; header utilities.&lt;/li&gt; &#xA; &lt;li&gt;Optional automatic generation of &lt;code&gt;PATCH&lt;/code&gt; operations that support: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.rfc-editor.org/rfc/rfc7386&#34;&gt;RFC 7386&lt;/a&gt; JSON Merge Patch&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.rfc-editor.org/rfc/rfc6902&#34;&gt;RFC 6902&lt;/a&gt; JSON Patch&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/danielgtaylor/shorthand&#34;&gt;Shorthand&lt;/a&gt; patches&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Annotated Go types for input and output models &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Generates JSON Schema from Go types&lt;/li&gt; &#xA;   &lt;li&gt;Static typing for path/query/header params, bodies, response headers, etc.&lt;/li&gt; &#xA;   &lt;li&gt;Automatic input model validation &amp;amp; error handling&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Documentation generation using &lt;a href=&#34;https://stoplight.io/open-source/elements&#34;&gt;Stoplight Elements&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Optional CLI built-in, configured via arguments or environment variables &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Set via e.g. &lt;code&gt;-p 8000&lt;/code&gt;, &lt;code&gt;--port=8000&lt;/code&gt;, or &lt;code&gt;SERVICE_PORT=8000&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Startup actions &amp;amp; graceful shutdown built-in&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Generates OpenAPI for access to a rich ecosystem of tools &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Mocks with &lt;a href=&#34;https://github.com/danielgtaylor/apisprout&#34;&gt;API Sprout&lt;/a&gt; or &lt;a href=&#34;https://stoplight.io/open-source/prism&#34;&gt;Prism&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;SDKs with &lt;a href=&#34;https://github.com/OpenAPITools/openapi-generator&#34;&gt;OpenAPI Generator&lt;/a&gt; or &lt;a href=&#34;https://github.com/deepmap/oapi-codegen&#34;&gt;oapi-codegen&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;CLI with &lt;a href=&#34;https://rest.sh/&#34;&gt;Restish&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;And &lt;a href=&#34;https://openapi.tools/&#34;&gt;plenty&lt;/a&gt; &lt;a href=&#34;https://apis.guru/awesome-openapi3/category.html&#34;&gt;more&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Generates JSON Schema for each resource using optional &lt;code&gt;describedby&lt;/code&gt; link relation headers as well as optional &lt;code&gt;$schema&lt;/code&gt; properties in returned objects that integrate into editors for validation &amp;amp; completion.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This project was inspired by &lt;a href=&#34;https://fastapi.tiangolo.com/&#34;&gt;FastAPI&lt;/a&gt;. Logo &amp;amp; branding designed by Kari Taylor.&lt;/p&gt; &#xA;&lt;h1&gt;Install&lt;/h1&gt; &#xA;&lt;p&gt;Install via &lt;code&gt;go get&lt;/code&gt;. Note that Go 1.20 or newer is required.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# After: go mod init ...&#xA;go get -u github.com/danielgtaylor/huma/v2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Example&lt;/h1&gt; &#xA;&lt;p&gt;Here is a complete basic hello world example in Huma, that shows how to initialize a Huma app complete with CLI, declare a resource operation, and define its handler function.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;context&#34;&#xA;&#x9;&#34;fmt&#34;&#xA;&#x9;&#34;net/http&#34;&#xA;&#xA;&#x9;&#34;github.com/danielgtaylor/huma/v2&#34;&#xA;&#x9;&#34;github.com/danielgtaylor/huma/v2/adapters/humachi&#34;&#xA;&#x9;&#34;github.com/go-chi/chi/v5&#34;&#xA;)&#xA;&#xA;// Options for the CLI.&#xA;type Options struct {&#xA;&#x9;Port int `help:&#34;Port to listen on&#34; short:&#34;p&#34; default:&#34;8888&#34;`&#xA;}&#xA;&#xA;// GreetingInput represents the greeting operation request.&#xA;type GreetingInput struct {&#xA;&#x9;Name string `path:&#34;name&#34; maxLength:&#34;30&#34; example:&#34;world&#34; doc:&#34;Name to greet&#34;`&#xA;}&#xA;&#xA;// GreetingOutput represents the greeting operation response.&#xA;type GreetingOutput struct {&#xA;&#x9;Body struct {&#xA;&#x9;&#x9;Message string `json:&#34;message&#34; example:&#34;Hello, world!&#34; doc:&#34;Greeting message&#34;`&#xA;&#x9;}&#xA;}&#xA;&#xA;func main() {&#xA;&#x9;// Create a CLI app which takes a port option.&#xA;&#x9;cli := huma.NewCLI(func(hooks huma.Hooks, options *Options) {&#xA;&#x9;&#x9;// Create a new router &amp;amp; API&#xA;&#x9;&#x9;router := chi.NewMux()&#xA;&#x9;&#x9;api := humachi.New(router, huma.DefaultConfig(&#34;My API&#34;, &#34;1.0.0&#34;))&#xA;&#xA;&#x9;&#x9;// Register GET /greeting/{name}&#xA;&#x9;&#x9;huma.Register(api, huma.Operation{&#xA;&#x9;&#x9;&#x9;OperationID: &#34;get-greeting&#34;,&#xA;&#x9;&#x9;&#x9;Summary:     &#34;Get a greeting&#34;,&#xA;&#x9;&#x9;&#x9;Method:      http.MethodGet,&#xA;&#x9;&#x9;&#x9;Path:        &#34;/greeting/{name}&#34;,&#xA;&#x9;&#x9;}, func(ctx context.Context, input *GreetingInput) (*GreetingOutput, error) {&#xA;&#x9;&#x9;&#x9;resp := &amp;amp;GreetingOutput{}&#xA;&#x9;&#x9;&#x9;resp.Body.Message = fmt.Sprintf(&#34;Hello, %s!&#34;, input.Name)&#xA;&#x9;&#x9;&#x9;return resp, nil&#xA;&#x9;&#x9;})&#xA;&#xA;&#x9;&#x9;// Tell the CLI how to start your router.&#xA;&#x9;&#x9;hooks.OnStart(func() {&#xA;&#x9;&#x9;&#x9;http.ListenAndServe(fmt.Sprintf(&#34;:%d&#34;, options.Port), router)&#xA;&#x9;&#x9;})&#xA;&#x9;})&#xA;&#xA;&#x9;// Run the CLI. When passed no commands, it starts the server.&#xA;&#x9;cli.Run()&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can test it with &lt;code&gt;go run greet.go&lt;/code&gt; (optionally pass &lt;code&gt;--port&lt;/code&gt; to change the default) and make a sample request using &lt;a href=&#34;https://rest.sh/&#34;&gt;Restish&lt;/a&gt; (or &lt;code&gt;curl&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Get the message from the server&#xA;$ restish :8888/greeting/world&#xA;HTTP/1.1 200 OK&#xA;...&#xA;{&#xA;&#x9;$schema: &#34;http://localhost:8888/schemas/GreetingOutputBody.json&#34;,&#xA;&#x9;message: &#34;Hello, world!&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Even though the example is tiny you can also see some generated documentation at &lt;a href=&#34;http://localhost:8888/docs&#34;&gt;http://localhost:8888/docs&lt;/a&gt;. The generated OpenAPI is available at &lt;a href=&#34;http://localhost:8888/openapi.json&#34;&gt;http://localhost:8888/openapi.json&lt;/a&gt; or &lt;a href=&#34;http://localhost:8888/openapi.yaml&#34;&gt;http://localhost:8888/openapi.yaml&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Documentation&lt;/h1&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://huma.rocks/&#34;&gt;https://huma.rocks/&lt;/a&gt; website for full documentation in a presentation that&#39;s easier to navigate and search then this README. You can find the source for the site in the &lt;code&gt;docs&lt;/code&gt; directory of this repo.&lt;/p&gt; &#xA;&lt;p&gt;Official Go package documentation can always be found at &lt;a href=&#34;https://pkg.go.dev/github.com/danielgtaylor/huma/v2&#34;&gt;https://pkg.go.dev/github.com/danielgtaylor/huma/v2&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>YouROK/TorrServer</title>
    <updated>2024-02-12T01:29:16Z</updated>
    <id>tag:github.com,2024-02-12:/YouROK/TorrServer</id>
    <link href="https://github.com/YouROK/TorrServer" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Torrent stream server&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34; style=&#34;text-align: center&#34;&gt; &lt;img src=&#34;https://github.com/YouROK/TorrServer/assets/144587546/53f7175a-cda4-4a06-86b6-2ac07582dcf1&#34; width=&#34;33%&#34;&gt;&lt;br&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; Simple and powerful tool for streaming torrents. &lt;br&gt; &lt;br&gt; &lt;a href=&#34;https://github.com/YouROK/TorrServer/raw/master/LICENSE&#34;&gt; &lt;img alt=&#34;GitHub&#34; src=&#34;https://img.shields.io/github/license/YouROK/TorrServer&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/YouROK/TorrServer&#34;&gt; &lt;img src=&#34;https://goreportcard.com/badge/github.com/YouROK/TorrServer&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://pkg.go.dev/github.com/YouROK/TorrServer&#34;&gt; &lt;img src=&#34;https://pkg.go.dev/badge/github.com/YouROK/TorrServer.svg?sanitize=true&#34; alt=&#34;Go Reference&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/YouROK/TorrServer/issues&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/contributions-welcome-brightgreen.svg?style=flat&#34; alt=&#34;CodeFactor&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/YouROK/TorrServer/actions/workflows/github-actions-docker.yml&#34; rel=&#34;nofollow&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/YouROK/TorrServer/github-actions-docker.yml?logo=Github&#34; alt=&#34;Build&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/YouROK/TorrServer/tags&#34; rel=&#34;nofollow&#34;&gt; &lt;img alt=&#34;GitHub tag (latest SemVer pre-release)&#34; src=&#34;https://img.shields.io/github/v/tag/YouROK/TorrServer?include_prereleases&amp;amp;label=version&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;TorrServer is a program that allows users to view torrents online without the need for preliminary file downloading. The core functionality of TorrServer includes caching torrents and subsequent data transfer via the HTTP protocol, allowing the cache size to be adjusted according to the system parameters and the user&#39;s internet connection speed.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Caching&lt;/li&gt; &#xA; &lt;li&gt;Streaming&lt;/li&gt; &#xA; &lt;li&gt;Local and Remote Server&lt;/li&gt; &#xA; &lt;li&gt;Viewing torrents on various devices&lt;/li&gt; &#xA; &lt;li&gt;Integration with other apps through API&lt;/li&gt; &#xA; &lt;li&gt;Cross-browser modern web interface&lt;/li&gt; &#xA; &lt;li&gt;Optional DLNA server&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;p&gt;Download the application for the required platform in the &lt;a href=&#34;https://github.com/YouROK/TorrServer/releases&#34;&gt;releases&lt;/a&gt; page. After installation, open the link &lt;a href=&#34;http://127.0.0.1:8090&#34;&gt;http://127.0.0.1:8090&lt;/a&gt; in the browser.&lt;/p&gt; &#xA;&lt;h4&gt;Windows&lt;/h4&gt; &#xA;&lt;p&gt;Run &lt;code&gt;TorrServer-windows-amd64.exe&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Linux&lt;/h4&gt; &#xA;&lt;p&gt;Run in console&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -s https://raw.githubusercontent.com/YouROK/TorrServer/master/installTorrServerLinux.sh | sudo bash&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;macOS&lt;/h4&gt; &#xA;&lt;p&gt;Run in Terminal.app&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -s https://raw.githubusercontent.com/YouROK/TorrServer/master/installTorrServerMac.sh -o installTorrserverMac.sh &amp;amp;&amp;amp; chmod 755 installTorrServerMac.sh &amp;amp;&amp;amp; bash ./installTorrServerMac.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternative install script for Intel Macs: &lt;a href=&#34;https://github.com/dancheskus/TorrServerMacInstaller&#34;&gt;https://github.com/dancheskus/TorrServerMacInstaller&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;IOCage Plugin (Unofficial)&lt;/h4&gt; &#xA;&lt;p&gt;On FreeBSD (TrueNAS/FreeNAS) you can use this plugin: &lt;a href=&#34;https://github.com/filka96/iocage-plugin-TorrServer&#34;&gt;https://github.com/filka96/iocage-plugin-TorrServer&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;For NAS Systems (Unofficial)&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Several releases are available through this link: &lt;a href=&#34;https://github.com/vladlenas&#34;&gt;https://github.com/vladlenas&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Synology NAS&lt;/strong&gt; packages repo source: &lt;a href=&#34;https://grigi.lt&#34;&gt;https://grigi.lt&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Server args&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;--port PORT&lt;/code&gt;, &lt;code&gt;-p PORT&lt;/code&gt; - web server port, default 8090&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--ssl&lt;/code&gt; - enables https for web server&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--sslport PORT&lt;/code&gt; - web server https port, default 8091. If not set, will be taken from db (if stored previously) or use default.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--sslcert PATH&lt;/code&gt; - path to ssl cert file. If not set, will be taken from db (if stored previously) or default self-signed certificate/key will be generated.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--sslkey PATH&lt;/code&gt; - path to ssl key file. If not set, will be taken from db (if stored previously) or default self-signed certificate/key will be generated.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--path PATH&lt;/code&gt;, &lt;code&gt;-d PATH&lt;/code&gt; - database dir path&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--logpath LOGPATH&lt;/code&gt;, &lt;code&gt;-l LOGPATH&lt;/code&gt; - server log file path&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--weblogpath WEBLOGPATH&lt;/code&gt;, &lt;code&gt;-w WEBLOGPATH&lt;/code&gt; - web access log file path&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--rdb&lt;/code&gt;, &lt;code&gt;-r&lt;/code&gt; - start in read-only DB mode&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--httpauth&lt;/code&gt;, &lt;code&gt;-a&lt;/code&gt; - enable http auth on all requests&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--dontkill&lt;/code&gt;, &lt;code&gt;-k&lt;/code&gt; - don&#39;t kill server on signal&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--ui&lt;/code&gt;, &lt;code&gt;-u&lt;/code&gt; - open torrserver page in browser&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--torrentsdir TORRENTSDIR&lt;/code&gt;, &lt;code&gt;-t TORRENTSDIR&lt;/code&gt; - autoload torrents from dir&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--torrentaddr TORRENTADDR&lt;/code&gt; - Torrent client address (format [IP]:PORT, ex. :32000, 127.0.0.1:32768 etc)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--pubipv4 PUBIPV4&lt;/code&gt;, &lt;code&gt;-4 PUBIPV4&lt;/code&gt; - set public IPv4 addr&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--pubipv6 PUBIPV6&lt;/code&gt;, &lt;code&gt;-6 PUBIPV6&lt;/code&gt; - set public IPv6 addr&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--searchwa&lt;/code&gt;, &lt;code&gt;-s&lt;/code&gt; - allow search without authentication&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--help&lt;/code&gt;, &lt;code&gt;-h&lt;/code&gt; - display this help and exit&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--version&lt;/code&gt; - display version and exit&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;TorrServer-darwin-arm64 [--port PORT] [--path PATH] [--logpath LOGPATH] [--weblogpath WEBLOGPATH] [--rdb] [--httpauth] [--dontkill] [--ui] [--torrentsdir TORRENTSDIR] [--torrentaddr TORRENTADDR] [--pubipv4 PUBIPV4] [--pubipv6 PUBIPV6] [--searchwa]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Running in Docker &amp;amp; Docker Compose&lt;/h3&gt; &#xA;&lt;p&gt;Run in console&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run --rm -d --name torrserver -p 8090:8090 ghcr.io/yourok/torrserver:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For running in persistence mode, just mount volume to container by adding &lt;code&gt;-v ~/ts:/opt/ts&lt;/code&gt;, where &lt;code&gt;~/ts&lt;/code&gt; folder path is just example, but you could use it anyway... Result example command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run --rm -d --name torrserver -v ~/ts:/opt/ts -p 8090:8090 ghcr.io/yourok/torrserver:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Environments&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;TS_HTTPAUTH&lt;/code&gt; - 1, and place auth file into &lt;code&gt;~/ts/config&lt;/code&gt; folder for enabling basic auth&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;TS_RDB&lt;/code&gt; - if 1, then the enabling &lt;code&gt;--rdb&lt;/code&gt; flag&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;TS_DONTKILL&lt;/code&gt; - if 1, then the enabling &lt;code&gt;--dontkill&lt;/code&gt; flag&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;TS_PORT&lt;/code&gt; - for changind default port to &lt;strong&gt;5555&lt;/strong&gt; (example), also u need to change &lt;code&gt;-p 8090:8090&lt;/code&gt; to &lt;code&gt;-p 5555:5555&lt;/code&gt; (example)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;TS_CONF_PATH&lt;/code&gt; - for overriding torrserver config path inside container. Example &lt;code&gt;/opt/tsss&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;TS_TORR_DIR&lt;/code&gt; - for overriding torrents directory. Example &lt;code&gt;/opt/torr_files&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;TS_LOG_PATH&lt;/code&gt; - for overriding log path. Example &lt;code&gt;/opt/torrserver.log&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Example with full overrided command (on default values):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run --rm -d -e TS_PORT=5665 -e TS_DONTKILL=1 -e TS_HTTPAUTH=1 -e TS_RDB=1 -e TS_CONF_PATH=/opt/ts/config -e TS_LOG_PATH=/opt/ts/log -e TS_TORR_DIR=/opt/ts/torrents --name torrserver -v ~/ts:/opt/ts -p 5665:5665 ghcr.io/yourok/torrserver:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Docker Compose&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;# docker-compose.yml&#xA;&#xA;version: &#39;3.3&#39;&#xA;services:&#xA;    torrserver:&#xA;        image: ghcr.io/yourok/torrserver&#xA;        container_name: torrserver&#xA;        environment:&#xA;            - TS_PORT=5665&#xA;            - TS_DONTKILL=1&#xA;            - TS_HTTPAUTH=0&#xA;            - TS_CONF_PATH=/opt/ts/config&#xA;            - TS_TORR_DIR=/opt/ts/torrents&#xA;        volumes:&#xA;            - &#39;./CACHE:/opt/ts/torrents&#39;&#xA;            - &#39;./CONFIG:/opt/ts/config&#39;&#xA;        ports:&#xA;            - &#39;5665:5665&#39;&#xA;        restart: unless-stopped&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;NAS releases&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/vladlenas&#34;&gt;https://github.com/vladlenas&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Synology NAS packages repo source: &lt;a href=&#34;https://grigi.lt&#34;&gt;https://grigi.lt&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Build&lt;/h3&gt; &#xA;&lt;h4&gt;Server&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install &lt;a href=&#34;https://golang.org/doc/install&#34;&gt;Golang&lt;/a&gt; 1.20+&lt;/li&gt; &#xA; &lt;li&gt;Go to the TorrServer source directory&lt;/li&gt; &#xA; &lt;li&gt;Run build script under linux or macOS &lt;code&gt;build-all.sh&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Web&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install &lt;strong&gt;npm&lt;/strong&gt; and &lt;strong&gt;yarn&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Go to the web directory&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;NODE_OPTIONS=--openssl-legacy-provider yarn build&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Android&lt;/h4&gt; &#xA;&lt;p&gt;To build an Android server you will need the Android Toolchain.&lt;/p&gt; &#xA;&lt;h4&gt;Swagger&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;swag&lt;/code&gt; must be installed on the system to [re]build Swagger documentation.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;go install github.com/swaggo/swag/cmd/swag@latest&#xA;cd server; swag init -g web/server.go&#xA;&#xA;# Documentation can be linted using&#xA;swag fmt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;MSX Install&lt;/h3&gt; &#xA;&lt;p&gt;Open msx and goto: Settings -&amp;gt; Start Parameter -&amp;gt; Setup&lt;/p&gt; &#xA;&lt;p&gt;Enter current ip address and port of server &lt;em&gt;e.g. 127.0.0.1:8090&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;API&lt;/h2&gt; &#xA;&lt;h3&gt;API Docs&lt;/h3&gt; &#xA;&lt;p&gt;API documentation is hosted as Swagger format available at path &lt;code&gt;/swagger/index.html&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;API Authentication&lt;/h3&gt; &#xA;&lt;p&gt;The user data file should be located near to the settings. Basic auth, read more in wiki &lt;a href=&#34;https://en.wikipedia.org/wiki/Basic_access_authentication&#34;&gt;https://en.wikipedia.org/wiki/Basic_access_authentication&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;accs.db&lt;/code&gt; in JSON format:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;    &#34;User1&#34;: &#34;Pass1&#34;,&#xA;    &#34;User2&#34;: &#34;Pass2&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Whitelist/Blacklist IP&lt;/h2&gt; &#xA;&lt;p&gt;The lists file should be located in the same directory with config.db.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Whitelist file name: &lt;code&gt;wip.txt&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Blacklist file name: &lt;code&gt;bip.txt&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Whitelist has priority over everything else.&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;local:127.0.0.0-127.0.0.255&#xA;127.0.0.0-127.0.0.255&#xA;local:127.0.0.1&#xA;127.0.0.1&#xA;# at the beginning of the line, comment&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Donate&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://qiwi.com/n/YOUROK85&#34;&gt;QIWI&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://yoomoney.ru/to/410013733697114/200&#34;&gt;YooMoney&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;SberBank Card: &lt;strong&gt;5484 4000 2285 7839&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Thanks to everyone who tested and helped&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/anacrolix&#34;&gt;anacrolix&lt;/a&gt; Matt Joiner&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tsynik&#34;&gt;tsynik&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dancheskus&#34;&gt;dancheskus&lt;/a&gt; for react web GUI and PWA code&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kolsys&#34;&gt;kolsys&lt;/a&gt; for initial Media Station X support&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/damiva&#34;&gt;damiva&lt;/a&gt; for Media Station X code updates&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/vladlenas&#34;&gt;vladlenas&lt;/a&gt; for NAS builds&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Nemiroff&#34;&gt;Nemiroff&lt;/a&gt; Tw1cker&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/spawnlmg&#34;&gt;spawnlmg&lt;/a&gt; SpAwN_LMG for testing&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/TopperBG&#34;&gt;TopperBG&lt;/a&gt; Dimitar Maznekov for Bulgarian web translation&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/FaintGhost&#34;&gt;FaintGhost&lt;/a&gt; Zhang Yaowei for Simplified Chinese web translation&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Anton111111&#34;&gt;Anton111111&lt;/a&gt; Anton Potekhin for sleep on Windows fixes&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lieranderl&#34;&gt;lieranderl&lt;/a&gt; Evgeni for adding SSL support code&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/cocool97&#34;&gt;cocool97&lt;/a&gt; for openapi API documentation&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/shadeov&#34;&gt;shadeov&lt;/a&gt; for README improvements&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/butaford&#34;&gt;butaford&lt;/a&gt; Pavel for make docker file and scripts&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/filimonic&#34;&gt;filimonic&lt;/a&gt; Alexey D. Filimonov&lt;/li&gt; &#xA; &lt;li&gt;and others&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>inoxlang/inox</title>
    <updated>2024-02-12T01:29:16Z</updated>
    <id>tag:github.com,2024-02-12:/inoxlang/inox</id>
    <link href="https://github.com/inoxlang/inox" rel="alternate"></link>
    <summary type="html">&lt;p&gt;🛡️ Inox is your shield against complexity in full-stack development.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Inox&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/122291844?s=200&amp;amp;v=4&#34; alt=&#34;a shield&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;🛡️ Inox is your &lt;strong&gt;shield&lt;/strong&gt; against complexity in full-stack development.&lt;/p&gt; &#xA;&lt;p&gt;The Inox platform is released as a &lt;strong&gt;single binary&lt;/strong&gt; that will contain all you need to develop, test, and deploy web apps that are primarily rendered server-side. Applications are developped using &lt;strong&gt;Inoxlang&lt;/strong&gt;, a sandboxed programming language that deeply integrates with several components: a built-in database engine, testing engine, HTTP server, and in-process container engine.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Important note: bear in mind that the current version of Inox is 0.2, not 1.0. The first stable versions of Inox won&#39;t support high-scalability applications.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Here are a few example files that are part of a basic todo app.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/inoxlang/inox/assets/113632189/f6aed69d-ff30-428e-ba5b-042f72ac329e&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Database schema&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/inoxlang/inox/assets/113632189/5f07deb5-56ec-42e7-a550-bdc4e613336d&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;A request handler (filesystem routing).&lt;/strong&gt; Each handler module runs in a dedicated execution context with its own permissions.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/inoxlang/inox/assets/113632189/6e632f71-8a01-4cde-b5d7-239a52942e58&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Note: the permissions granted to imported modules (local or third-party) are &lt;strong&gt;explicit&lt;/strong&gt;: &lt;code&gt;ìmport lib ./malicious-lib.ix { allow: {} }&lt;/code&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;p&gt;&lt;strong&gt;&lt;/strong&gt;&lt;/p&gt;&#xA; &lt;summary&gt;&lt;strong&gt;⚙️ Another request handler (GET request with HTML rendering)&lt;/strong&gt;&lt;/summary&gt;&#xA; &lt;p&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://github.com/inoxlang/inox/assets/113632189/85772ae4-4025-4aef-94c8-15b624580285&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;p&gt;&lt;strong&gt;&lt;/strong&gt;&lt;/p&gt;&#xA; &lt;summary&gt;&lt;strong&gt;✅ Testing engine example&lt;/strong&gt;&lt;/summary&gt;&#xA; &lt;p&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://github.com/inoxlang/inox/assets/113632189/c1445e7b-d272-4252-9def-6fa5284c996d&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;strong&gt;I have been working 2 years full time on Inox.&lt;/strong&gt; There is still a lot to do in order to make Inox usable in real world applications. If you believe this project has potential, &lt;strong&gt;consider donating&lt;/strong&gt; through &lt;a href=&#34;https://github.com/sponsors/GraphR00t&#34;&gt;GitHub&lt;/a&gt; (preferred) or &lt;a href=&#34;https://patreon.com/GraphR00t&#34;&gt;Patreon&lt;/a&gt;. It will help me continue working on Inox.&lt;/p&gt; &#xA;&lt;p&gt;⬇️ &lt;a href=&#34;https://raw.githubusercontent.com/inoxlang/inox/main/#installation&#34;&gt;Installation&lt;/a&gt;&lt;br&gt; 🔍 &lt;a href=&#34;https://raw.githubusercontent.com/inoxlang/inox/main/#application-examples&#34;&gt;Application Examples&lt;/a&gt;&lt;br&gt; 📚 &lt;a href=&#34;https://raw.githubusercontent.com/inoxlang/inox/main/#learning-inox&#34;&gt;Learning Inox&lt;/a&gt;&lt;br&gt; 👥 &lt;a href=&#34;https://discord.gg/53YGx8GzgE&#34;&gt;Discord Server&lt;/a&gt;&lt;br&gt; ❔ &lt;a href=&#34;https://raw.githubusercontent.com/inoxlang/inox/main/#questions-you-may-have&#34;&gt;Questions you may have&lt;/a&gt;&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;p&gt;&lt;strong&gt;&lt;/strong&gt;&lt;/p&gt;&#xA; &lt;summary&gt;&lt;strong&gt;What is planned ?&lt;/strong&gt;&lt;/summary&gt;&#xA; &lt;p&gt;&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Automated database backups in S3-compatible storage&lt;/li&gt; &#xA;  &lt;li&gt;Log persistence in S3 (note that Inox has builtins for &lt;a href=&#34;https://raw.githubusercontent.com/inoxlang/inox/main/docs/builtins.md#structured-logging&#34;&gt;structured logging&lt;/a&gt;).&lt;/li&gt; &#xA;  &lt;li&gt;Support automated deployments on popular cloud providers&lt;/li&gt; &#xA;  &lt;li&gt;Storage of secrets in key management services (e.g. GCP KMS, AWS KMS). &lt;a href=&#34;https://raw.githubusercontent.com/inoxlang/inox/main/docs/language-reference/secrets.md&#34;&gt;Secrets&lt;/a&gt; are special Inox values that cannot be printed, logged or serialized.&lt;/li&gt; &#xA;  &lt;li&gt;Develop a standard library&lt;/li&gt; &#xA;  &lt;li&gt;Integrate a subset of Git (using &lt;a href=&#34;https://github.com/go-git/go-billy&#34;&gt;https://github.com/go-git/go-billy&lt;/a&gt; and &lt;a href=&#34;https://code.visualstudio.com/api/extension-guides/scm-provider&#34;&gt;https://code.visualstudio.com/api/extension-guides/scm-provider&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;Support no-downtime upgrades&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;WebAssembly support&lt;/strong&gt; using &lt;a href=&#34;https://github.com/tetratelabs/wazero&#34;&gt;https://github.com/tetratelabs/wazero&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Finish the transaction system and support persisting most data-structure types with accepable performance&lt;/li&gt; &#xA;  &lt;li&gt;Team access control for Inox projects&lt;/li&gt; &#xA;  &lt;li&gt;Improve execution performance and memory usage&lt;/li&gt; &#xA;  &lt;li&gt;Finalize the implementation of &lt;a href=&#34;https://raw.githubusercontent.com/inoxlang/inox/main/docs/language-reference/transient-types.md#structs&#34;&gt;structs&lt;/a&gt; and implement a &lt;a href=&#34;https://github.com/inoxlang/inox/issues/32&#34;&gt;Low Level VM&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;li&gt;Allow developers to define custom &lt;code&gt;builtins&lt;/code&gt; written in Go (note: building inox is just &lt;code&gt;go build ./cmd/inox&lt;/code&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;And more !&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;p&gt;&lt;strong&gt;&lt;/strong&gt;&lt;/p&gt;&#xA; &lt;summary&gt;&lt;strong&gt;🎯 Goals&lt;/strong&gt;&lt;/summary&gt;&#xA; &lt;p&gt;&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Zero boilerplate&lt;/li&gt; &#xA;  &lt;li&gt;Dead simple configuration&lt;/li&gt; &#xA;  &lt;li&gt;Super stable (&lt;em&gt;once version 1.0 is reached&lt;/em&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;Secure by default&lt;/li&gt; &#xA;  &lt;li&gt;Low maintenance&lt;/li&gt; &#xA;  &lt;li&gt;A programming language as simple as possible&lt;/li&gt; &#xA;  &lt;li&gt;(Not in the near future) Support 100k+ requests per second (combined request throughput of several nodes).&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;p&gt;&lt;strong&gt;&lt;/strong&gt;&lt;/p&gt;&#xA; &lt;summary&gt;&lt;strong&gt;❌ Non Goals &lt;/strong&gt;&lt;/summary&gt;&#xA; &lt;p&gt;&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Be a suitable solution for 100% of real-world web projects&lt;/li&gt; &#xA;  &lt;li&gt;Support any database for storing domain data (&lt;code&gt;users&lt;/code&gt;, ...) (however WebAssembly support is planned and will at least enable the use of SQLite and DuckDB).&lt;/li&gt; &#xA;  &lt;li&gt;Be extremely fast&lt;/li&gt; &#xA;  &lt;li&gt;Be very highly scalable (Multi-node support is planned though)&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Development Environment - Inox Project Server&lt;/h2&gt; &#xA;&lt;p&gt;The Inox binary comes with a &lt;strong&gt;project server&lt;/strong&gt; that your IDE connects to. This server is a LSP server that implements custom methods. It enables the developer to develop, debug, test, deploy and manage secrets, all from VsCode. The project server will also provide automatic infrastructure management in the &lt;strong&gt;near future&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note that there is no local development environment.&lt;/strong&gt; Code files are cached on the IDE for offline access (read-only only).&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;p&gt;&lt;strong&gt;&lt;/strong&gt;&lt;/p&gt;&#xA; &lt;summary&gt;&lt;strong&gt;⚙️ Diagram&lt;/strong&gt;&lt;/summary&gt;&#xA; &lt;p&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;flowchart TB&#xA;&#xA;subgraph VSCode&#xA;  VSCodeVFS(Virtual Filesystem)&#xA;  Editor&#xA;  Editor --&amp;gt; |persists edited files in| VSCodeVFS&#xA;  DebugAdapter&#xA;end&#xA;&#xA;Editor(Editor) --&amp;gt; |standard LSP methods| ProjectServer&#xA;&#xA;VSCodeVFS --&amp;gt; |&#34;custom methods (LSP)&#34;| ProjImage&#xA;&#xA;DebugAdapter(Debug Adapter) --&amp;gt;|&#34;Debug Adapter Protocol (LSP wrapped)&#34;| Runtime(Inox Runtime)&#xA;&#xA;subgraph ProjectServer[Project Server]&#xA;  Runtime&#xA;  ProjImage(Project Image)&#xA;end&#xA;&#xA;ProjectServer --&amp;gt;|manages| Infrastructure(Infrastructure)&#xA;ProjectServer --&amp;gt;|gets/sets| Secrets(Secrets)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;graph LR&#xA;&#xA;subgraph VSCode[&#34;VSCode (any OS)&#34;]&#xA;  direction LR&#xA;  InoxExtension(Inox Extension)&#xA;end&#xA;&#xA;InoxExtension --&amp;gt;|&#34;LSP (WebSocket)&#34;| ProjectServer&#xA;&#xA;subgraph InoxBinary[&#34;Inox binary (Linux)&#34;]&#xA;  ProjectServer(Project Server)&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Inox applications can currently only be developed using the Inox extension for VSCode and VSCodium. You can install the inox binary on your local (Linux) machine, local VM, or a remote machine.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;p&gt;&lt;strong&gt;&lt;/strong&gt;&lt;/p&gt;&#xA; &lt;summary&gt;&lt;strong&gt;Installation Instructions&lt;/strong&gt;&lt;/summary&gt;&#xA; &lt;p&gt;&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt; &lt;p&gt;Download the latest release&lt;/p&gt; &lt;pre&gt;&lt;code&gt;wget -N https://github.com/inoxlang/inox/releases/latest/download/inox-linux-amd64.tar.gz &amp;amp;&amp;amp; tar -xvf inox-linux-amd64.tar.gz&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;Install &lt;code&gt;inox&lt;/code&gt; to &lt;code&gt;/usr/local/bin&lt;/code&gt;&lt;/p&gt; &lt;pre&gt;&lt;code&gt;sudo install ./inox -o root -m 0755 /usr/local/bin/inox&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;Delete the files that are no longer needed&lt;/p&gt; &lt;pre&gt;&lt;code&gt;rm ./inox inox-linux-amd64.tar.gz&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;!-- - __\[recommended\]__ add the [inoxd daemon](./docs/inox-daemon.md) (systemd service) to automatically start the project server.&#xA;  If you have installed `inox` on your **local machine** or a local VM, you can execute the following command to add **inoxd**:&#xA;  ```&#xA;  sudo inox add-service # don&#39;t run this on a REMOTE machine&#xA;  ```&#xA;  _If you execute this command inside a VM, don&#39;t forget to forward the port 8305 to allow VSCode to connect to the project server._ --&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;strong&gt;Add Inox support to your IDE&lt;/strong&gt;&lt;/p&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=graphr00t.inox&#34;&gt;VSCode &amp;amp; VSCodium&lt;/a&gt; : LSP, debug, colorization, snippets, formatting.&lt;br&gt; &lt;strong&gt;⚠️ Once the extension is installed make sure to read the Requirements and Usage sections in the extension&#39;s details.&lt;/strong&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;strong&gt;[optional]&lt;/strong&gt; install command completions for the current user&lt;/p&gt; &lt;pre&gt;&lt;code&gt;inox install-completions&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;If you want to build Inox from source go &lt;a href=&#34;https://raw.githubusercontent.com/inoxlang/inox/main/#build-from-source&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Application Examples&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/inoxlang/inox/main/examples/apps/basic-todo/README.md&#34;&gt;Basic Todo app&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;More examples will be added soon.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Learning Inox&lt;/h2&gt; &#xA;&lt;p&gt;You can learn Inox directly in VSCode by creating a file with a &lt;code&gt;.tut.ix&lt;/code&gt; extension. This is the recommended way. &lt;strong&gt;Make sure to create this file inside an Inox project.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/inoxlang/inox-vscode/raw/master/assets/docs/tutorial-demo.gif&#34; alt=&#34;tutorial-demo&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you have any questions you are welcome to join the &lt;a href=&#34;https://discord.gg/53YGx8GzgE&#34;&gt;Discord Server&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Scripting&lt;/summary&gt; &#xA; &lt;p&gt;Inox can be used for scripting &amp;amp; provides a shell. The development of the language in those domains is not very active because Inox primarily focuses on Web Application Development.&lt;/p&gt; &#xA; &lt;p&gt;To learn scripting go &lt;a href=&#34;https://raw.githubusercontent.com/inoxlang/inox/main/docs/scripting-basics.md&#34;&gt;here&lt;/a&gt;. View &lt;a href=&#34;https://raw.githubusercontent.com/inoxlang/inox/main/docs/shell-basics.md&#34;&gt;Shell Basics&lt;/a&gt; to learn how to use Inox interactively.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Build From Source&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Clone this repository&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cd&lt;/code&gt; into the directory&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;go build ./cmd/inox&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Questions You May Have&lt;/h2&gt; &#xA;&lt;details&gt; &#xA; &lt;p&gt;&lt;strong&gt;&lt;/strong&gt;&lt;/p&gt;&#xA; &lt;summary&gt;&lt;strong&gt;Why isn&#39;t Inox using a container runtime such as Docker ?&lt;/strong&gt;&lt;/summary&gt;&#xA; &lt;p&gt;&lt;/p&gt; &#xA; &lt;p&gt;Because the long term goal of Inox is to be a &lt;strong&gt;simple&lt;/strong&gt;, single-binary and &lt;strong&gt;super stable&lt;/strong&gt; platform for applications written in Inoxlang and using libraries compiled to WASM.&lt;br&gt; Each application or service will ultimately run in a separate process:&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;filesystem isolation is achieved by using virtual filesystems (meta filesystem)&lt;/li&gt; &#xA;  &lt;li&gt;process-level access control will be achieved using &lt;a href=&#34;https://landlock.io/&#34;&gt;Landlock&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;fine-grained module-level access control is already achieved by Inox&#39;s permission system&lt;/li&gt; &#xA;  &lt;li&gt;process-level resource allocation and limitation will be implemented using cgroups&lt;/li&gt; &#xA;  &lt;li&gt;module-level resource allocation and limitation is performed by Inox&#39;s limit system&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;p&gt;&lt;strong&gt;&lt;/strong&gt;&lt;/p&gt;&#xA; &lt;summary&gt;&lt;strong&gt;Why have you created Inox ?&lt;/strong&gt;&lt;/summary&gt;&#xA; &lt;p&gt;&lt;/p&gt; &#xA; &lt;p&gt;Before reading the answser please make sure to read the &lt;strong&gt;Goals &amp;amp; Non Goals sections&lt;/strong&gt;.&lt;/p&gt; &#xA; &lt;p&gt;I like creating programming languages. At the beginning Inox was not even about full stack development. It quickly evolved towards this use case because I am tired of accidental complexity in full stack development. I particularly hate having to glue and import components that are just needed 99% of the time. I don&#39;t like spending hours configuring stuff, a bit of configuration is fine though. Local development environments are also a pain to setup sometimes. (There is no true &lt;a href=&#34;https://raw.githubusercontent.com/inoxlang/inox/main/#development-environment---inox-project-server&#34;&gt;local dev environment&lt;/a&gt; when developping Inox projects).&lt;/p&gt; &#xA; &lt;p&gt;Inox being an opinionated &lt;strong&gt;high-level&lt;/strong&gt; programming language / high level platform it obviously has pros and cons. Also when using a new programming language you don&#39;t have access to a rich ecosystem. In other words Inox currently does not bring all the potential value it could bring.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;p&gt;&lt;strong&gt;&lt;/strong&gt;&lt;/p&gt;&#xA; &lt;summary&gt;&lt;strong&gt;What is the state of the codebase (quality, documentation, tests) ?&lt;/strong&gt;&lt;/summary&gt;&#xA; &lt;p&gt;&lt;/p&gt; &#xA; &lt;p&gt;As of now, certain parts of the codebase are not optimally written, lack sufficient comments and documentation, and do not have robust test coverage. The first version (0.1) being now released, I will dedicate 20-30% of my working time to improving the overall quality, documentation, and test coverage of the codebase.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Early Sponsors&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/Lexterl33t&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/44911576?v=4&amp;amp;s=120&#34; width=&#34;120&#34; alt=&#34;Lexter&#34;&gt;&lt;br&gt;Lexter&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/datamixio&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/8696011?v=4&amp;amp;s=120&#34; width=&#34;120&#34; alt=&#34;Datamix.io&#34;&gt;&lt;br&gt;Datamix.io&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;p&gt;I am working full-time on Inox, please consider donating through &lt;a href=&#34;https://github.com/sponsors/GraphR00t&#34;&gt;GitHub&lt;/a&gt; (preferred) or &lt;a href=&#34;https://patreon.com/GraphR00t&#34;&gt;Patreon&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/inoxlang/inox/main/QUESTIONS.md&#34;&gt;Questions you may have&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://raw.githubusercontent.com/inoxlang/inox/main/#installation&#34;&gt;Installation&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://raw.githubusercontent.com/inoxlang/inox/main/#inox&#34;&gt;Back To Top&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>