<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-06-09T01:38:20Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>brianvoe/gofakeit</title>
    <updated>2023-06-09T01:38:20Z</updated>
    <id>tag:github.com,2023-06-09:/brianvoe/gofakeit</id>
    <link href="https://github.com/brianvoe/gofakeit" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Random fake data generator written in go&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/brianvoe/gofakeit/master/logo.png&#34; alt=&#34;alt text&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Gofakeit &lt;a href=&#34;https://goreportcard.com/report/github.com/brianvoe/gofakeit&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/brianvoe/gofakeit&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://github.com/brianvoe/gofakeit/workflows/Test/badge.svg?branch=master&#34; alt=&#34;Test&#34;&gt; &lt;a href=&#34;https://codecov.io/github/brianvoe/gofakeit&#34;&gt;&lt;img src=&#34;https://codecov.io/github/brianvoe/gofakeit/branch/master/graph/badge.svg?sanitize=true&#34; alt=&#34;codecov.io&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://godoc.org/github.com/brianvoe/gofakeit/v6&#34;&gt;&lt;img src=&#34;https://godoc.org/github.com/brianvoe/gofakeit/v6?status.svg?sanitize=true&#34; alt=&#34;GoDoc&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/brianvoe/gofakeit/master/LICENSE.txt&#34;&gt;&lt;img src=&#34;http://img.shields.io/badge/license-MIT-green.svg?style=flat&#34; alt=&#34;license&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;Random data generator written in go&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.buymeacoffee.com/brianvoe&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://www.buymeacoffee.com/assets/img/custom_images/orange_img.png&#34; alt=&#34;Buy Me A Coffee&#34; style=&#34;height: auto !important;width: auto !important;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brianvoe/gofakeit/master/#functions&#34;&gt;260+ Functions!!!&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brianvoe/gofakeit/master/#random-sources&#34;&gt;Random Sources&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brianvoe/gofakeit/master/#global-rand-set&#34;&gt;Global Rand&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brianvoe/gofakeit/master/#struct&#34;&gt;Struct Generator&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brianvoe/gofakeit/master/#custom-functions&#34;&gt;Custom Functions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/brianvoe/gofakeit/tree/master/cmd/gofakeitserver&#34;&gt;Http Server&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/brianvoe/gofakeit/tree/master/cmd/gofakeit&#34;&gt;Command Line Tool&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Zero dependencies&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/brianvoe/gofakeit/raw/master/BENCHMARKS.md&#34;&gt;Benchmarks&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/brianvoe/gofakeit/issues&#34;&gt;Issue&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributors&lt;/h2&gt; &#xA;&lt;p&gt;Thanks to everyone who has contributed to Gofakeit!&lt;/p&gt; &#xA;&lt;a href=&#34;https://github.com/brianvoe/gofakeit/graphs/contributors&#34;&gt; &lt;img src=&#34;https://contrib.rocks/image?repo=brianvoe/gofakeit&#34;&gt; &lt;/a&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;go get github.com/brianvoe/gofakeit/v6&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Simple Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;import &#34;github.com/brianvoe/gofakeit/v6&#34;&#xA;&#xA;gofakeit.Name()             // Markus Moen&#xA;gofakeit.Email()            // alaynawuckert@kozey.biz&#xA;gofakeit.Phone()            // (570)245-7485&#xA;gofakeit.BS()               // front-end&#xA;gofakeit.BeerName()         // Duvel&#xA;gofakeit.Color()            // MediumOrchid&#xA;gofakeit.Company()          // Moen, Pagac and Wuckert&#xA;gofakeit.CreditCardNumber() // 4287271570245748&#xA;gofakeit.HackerPhrase()     // Connecting the array won&#39;t do anything, we need to generate the haptic COM driver!&#xA;gofakeit.JobTitle()         // Director&#xA;gofakeit.CurrencyShort()    // USD&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brianvoe/gofakeit/master/#functions&#34;&gt;See full list of functions&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Seed&lt;/h2&gt; &#xA;&lt;p&gt;If you are using the default global usage and dont care about seeding no need to set anything. Gofakeit will seed it with a cryptographically secure number.&lt;/p&gt; &#xA;&lt;p&gt;If you need a reproducible outcome you can set it via the Seed function call. Every example in this repo sets it for testing purposes.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;import &#34;github.com/brianvoe/gofakeit/v6&#34;&#xA;&#xA;gofakeit.Seed(0) // If 0 will use crypto/rand to generate a number&#xA;&#xA;// or&#xA;&#xA;gofakeit.Seed(8675309) // Set it to whatever number you want&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Random Sources&lt;/h2&gt; &#xA;&lt;p&gt;Gofakeit has a few rand sources, by default it uses math.Rand and uses mutex locking to allow for safe goroutines.&lt;/p&gt; &#xA;&lt;p&gt;If you want to use a more performant source please use NewUnlocked. Be aware that it is not goroutine safe.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;import &#34;github.com/brianvoe/gofakeit/v6&#34;&#xA;&#xA;// Uses math/rand(Pseudo) with mutex locking&#xA;faker := gofakeit.New(0)&#xA;&#xA;// Uses math/rand(Pseudo) with NO mutext locking&#xA;// More performant but not goroutine safe.&#xA;faker := gofakeit.NewUnlocked(0)&#xA;&#xA;// Uses crypto/rand(cryptographically secure) with mutext locking&#xA;faker := gofakeit.NewCrypto()&#xA;&#xA;// Pass in your own random source&#xA;faker := gofakeit.NewCustom()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Global Rand Set&lt;/h2&gt; &#xA;&lt;p&gt;If you would like to use the simple function calls but need to use something like crypto/rand you can override the default global with the random source that you want.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;import &#34;github.com/brianvoe/gofakeit/v6&#34;&#xA;&#xA;faker := gofakeit.NewCrypto()&#xA;gofakeit.SetGlobalFaker(faker)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Struct&lt;/h2&gt; &#xA;&lt;p&gt;Gofakeit can generate random data for struct fields. For the most part it covers all the basic type as well as some non-basic like time.Time.&lt;/p&gt; &#xA;&lt;p&gt;Struct fields can also use tags to more specifically generate data for that field type.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;import &#34;github.com/brianvoe/gofakeit/v6&#34;&#xA;&#xA;// Create structs with random injected data&#xA;type Foo struct {&#xA;&#x9;Str           string&#xA;&#x9;Int           int&#xA;&#x9;Pointer       *int&#xA;&#x9;Name          string         `fake:&#34;{firstname}&#34;`         // Any available function all lowercase&#xA;&#x9;Sentence      string         `fake:&#34;{sentence:3}&#34;`        // Can call with parameters&#xA;&#x9;RandStr       string         `fake:&#34;{randomstring:[hello,world]}&#34;`&#xA;&#x9;Number        string         `fake:&#34;{number:1,10}&#34;`       // Comma separated for multiple values&#xA;&#x9;Regex         string         `fake:&#34;{regex:[abcdef]{5}}&#34;` // Generate string from regex&#xA;&#x9;Map           map[string]int `fakesize:&#34;2&#34;`&#xA;&#x9;Array         []string       `fakesize:&#34;2&#34;`&#xA;&#x9;ArrayRange    []string       `fakesize:&#34;2,6&#34;`&#xA;    Bar           Bar&#xA;&#x9;Skip          *string        `fake:&#34;skip&#34;`                // Set to &#34;skip&#34; to not generate data for&#xA;&#x9;Created       time.Time                                   // Can take in a fake tag as well as a format tag&#xA;&#x9;CreatedFormat time.Time      `fake:&#34;{year}-{month}-{day}&#34; format:&#34;2006-01-02&#34;`&#xA;}&#xA;&#xA;type Bar struct {&#xA;&#x9;Name    string&#xA;&#x9;Number  int&#xA;&#x9;Float   float32&#xA;}&#xA;&#xA;// Pass your struct as a pointer&#xA;var f Foo&#xA;gofakeit.Struct(&amp;amp;f)&#xA;&#xA;fmt.Println(f.Str)      &#x9;&#x9;// hrukpttuezptneuvunh&#xA;fmt.Println(f.Int)      &#x9;&#x9;// -7825289004089916589&#xA;fmt.Println(*f.Pointer) &#x9;&#x9;// -343806609094473732&#xA;fmt.Println(f.Name)     &#x9;&#x9;// fred&#xA;fmt.Println(f.Sentence) &#x9;&#x9;// Record river mind.&#xA;fmt.Println(f.RandStr)  &#x9;&#x9;// world&#xA;fmt.Println(f.Number)   &#x9;&#x9;// 4&#xA;fmt.Println(f.Regex)    &#x9;&#x9;// cbdfc&#xA;fmt.Println(f.Map)    &#x9;&#x9;&#x9;// map[PxLIo:52 lxwnqhqc:846]&#xA;fmt.Println(f.Array)    &#x9;&#x9;// cbdfc&#xA;fmt.Printf(&#34;%+v&#34;, f.Bar)    &#x9;// {Name:QFpZ Number:-2882647639396178786 Float:1.7636692e+37}&#xA;fmt.Println(f.Skip)     &#x9;&#x9;// &amp;lt;nil&amp;gt;&#xA;fmt.Println(f.Created.String()) // 1908-12-07 04:14:25.685339029 +0000 UTC&#xA;&#xA;// Supported formats&#xA;// int, int8, int16, int32, int64,&#xA;// uint, uint8, uint16, uint32, uint64,&#xA;// float32, float64,&#xA;// bool, string,&#xA;// array, pointers, map&#xA;// time.Time // If setting time you can also set a format tag&#xA;// Nested Struct Fields and Embedded Fields&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Fakeable types&lt;/h2&gt; &#xA;&lt;p&gt;It is possible to extend a struct by implementing the &lt;code&gt;Fakeable&lt;/code&gt; interface in order to control the generation.&lt;/p&gt; &#xA;&lt;p&gt;For example, this is useful when it is not possible to modify the struct that you want to fake by adding struct tags to a field but you still need to be able to control the generation process.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Custom string that you want to generate your own data for&#xA;// or just return a static value&#xA;type CustomString string&#xA;&#xA;func (c *CustomString) Fake(faker *gofakeit.Faker) interface{} {&#xA;&#x9;return CustomString(&#34;my custom string&#34;)&#xA;}&#xA;&#xA;// Imagine a CustomTime type that is needed to support a custom JSON Marshaler&#xA;type CustomTime time.Time&#xA;&#xA;func (c *CustomTime) Fake(faker *gofakeit.Faker) interface{} {&#xA;&#x9;return CustomTime(time.Now())&#xA;}&#xA;&#xA;func (c *CustomTime) MarshalJSON() ([]byte, error) {&#xA;&#x9;//...&#xA;}&#xA;&#xA;// This is the struct that we cannot modify to add struct tags&#xA;type NotModifiable struct {&#xA;&#x9;Token string&#xA;&#x9;Value CustomString&#xA;&#x9;Creation *CustomTime&#xA;}&#xA;&#xA;var f NotModifiable&#xA;gofakeit.Struct(&amp;amp;f)&#xA;fmt.Printf(&#34;%s&#34;, f.Token) // yvqqdH&#xA;fmt.Printf(&#34;%s&#34;, f.Value) // my custom string&#xA;fmt.Printf(&#34;%s&#34;, f.Creation) // 2023-04-02 23:00:00 +0000 UTC m=+0.000000001&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Custom Functions&lt;/h2&gt; &#xA;&lt;p&gt;In a lot of situations you may need to use your own random function usage for your specific needs.&lt;/p&gt; &#xA;&lt;p&gt;If you would like to extend the usage of struct tags, generate function, available usages in the gofakeit server or gofakeit command sub packages. You can do so via the AddFuncLookup. Each function has their own lookup, if you need more reference examples you can look at each files lookups.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Simple&#xA;gofakeit.AddFuncLookup(&#34;friendname&#34;, gofakeit.Info{&#xA;&#x9;Category:    &#34;custom&#34;,&#xA;&#x9;Description: &#34;Random friend name&#34;,&#xA;&#x9;Example:     &#34;bill&#34;,&#xA;&#x9;Output:      &#34;string&#34;,&#xA;&#x9;Generate: func(r *rand.Rand, m *gofakeit.MapParams, info *gofakeit.Info) (interface{}, error) {&#xA;&#x9;&#x9;return gofakeit.RandomString([]string{&#34;bill&#34;, &#34;bob&#34;, &#34;sally&#34;}), nil&#xA;&#x9;},&#xA;})&#xA;&#xA;// With Params&#xA;gofakeit.AddFuncLookup(&#34;jumbleword&#34;, gofakeit.Info{&#xA;&#x9;Category:    &#34;jumbleword&#34;,&#xA;&#x9;Description: &#34;Take a word and jumble it up&#34;,&#xA;&#x9;Example:     &#34;loredlowlh&#34;,&#xA;&#x9;Output:      &#34;string&#34;,&#xA;&#x9;Params: []gofakeit.Param{&#xA;&#x9;&#x9;{Field: &#34;word&#34;, Type: &#34;string&#34;, Description: &#34;Word you want to jumble&#34;},&#xA;&#x9;},&#xA;&#x9;Generate: func(r *rand.Rand, m *gofakeit.MapParams, info *gofakeit.Info) (interface{}, error) {&#xA;&#x9;&#x9;word, err := info.GetString(m, &#34;word&#34;)&#xA;&#x9;&#x9;if err != nil {&#xA;&#x9;&#x9;&#x9;return nil, err&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;split := strings.Split(word, &#34;&#34;)&#xA;&#x9;&#x9;gofakeit.ShuffleStrings(split)&#xA;&#x9;&#x9;return strings.Join(split, &#34;&#34;), nil&#xA;&#x9;},&#xA;})&#xA;&#xA;type Foo struct {&#xA;&#x9;FriendName string `fake:&#34;{friendname}&#34;`&#xA;&#x9;JumbleWord string `fake:&#34;{jumbleword:helloworld}&#34;`&#xA;}&#xA;&#xA;var f Foo&#xA;gofakeit.Struct(&amp;amp;f)&#xA;fmt.Printf(&#34;%s&#34;, f.FriendName) // bill&#xA;fmt.Printf(&#34;%s&#34;, f.JumbleWord) // loredlowlh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Functions&lt;/h2&gt; &#xA;&lt;p&gt;All functions also exist as methods on the Faker struct&lt;/p&gt; &#xA;&lt;h3&gt;File&lt;/h3&gt; &#xA;&lt;p&gt;Passing &lt;code&gt;nil&lt;/code&gt; to &lt;code&gt;CSV&lt;/code&gt;, &lt;code&gt;JSON&lt;/code&gt; or &lt;code&gt;XML&lt;/code&gt; it will auto generate data using a random set of generators.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;CSV(co *CSVOptions) ([]byte, error)&#xA;JSON(jo *JSONOptions) ([]byte, error)&#xA;XML(xo *XMLOptions) ([]byte, error)&#xA;FileExtension() string&#xA;FileMimeType() string&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Person&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;Person() *PersonInfo&#xA;Name() string&#xA;NamePrefix() string&#xA;NameSuffix() string&#xA;FirstName() string&#xA;MiddleName() string&#xA;LastName() string&#xA;Gender() string&#xA;SSN() string&#xA;Hobby() string&#xA;Contact() *ContactInfo&#xA;Email() string&#xA;Phone() string&#xA;PhoneFormatted() string&#xA;Teams(peopleArray []string, teamsArray []string) map[string][]string&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Generate&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;Struct(v interface{})&#xA;Slice(v interface{})&#xA;Map() map[string]interface{}&#xA;Generate(value string) string&#xA;Regex(value string) string&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Auth&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;Username() string&#xA;Password(lower bool, upper bool, numeric bool, special bool, space bool, num int) string&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Address&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;Address() *AddressInfo&#xA;City() string&#xA;Country() string&#xA;CountryAbr() string&#xA;State() string&#xA;StateAbr() string&#xA;Street() string&#xA;StreetName() string&#xA;StreetNumber() string&#xA;StreetPrefix() string&#xA;StreetSuffix() string&#xA;Zip() string&#xA;Latitude() float64&#xA;LatitudeInRange(min, max float64) (float64, error)&#xA;Longitude() float64&#xA;LongitudeInRange(min, max float64) (float64, error)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Game&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;Gamertag() string&#xA;Dice(numDice uint, sides []uint) []uint&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Beer&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;BeerAlcohol() string&#xA;BeerBlg() string&#xA;BeerHop() string&#xA;BeerIbu() string&#xA;BeerMalt() string&#xA;BeerName() string&#xA;BeerStyle() string&#xA;BeerYeast() string&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Car&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;Car() *CarInfo&#xA;CarMaker() string&#xA;CarModel() string&#xA;CarType() string&#xA;CarFuelType() string&#xA;CarTransmissionType() string&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Words&lt;/h3&gt; &#xA;&lt;h4&gt;Noun&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;Noun() string&#xA;NounCommon() string&#xA;NounConcrete() string&#xA;NounAbstract() string&#xA;NounCollectivePeople() string&#xA;NounCollectiveAnimal() string&#xA;NounCollectiveThing() string&#xA;NounCountable() string&#xA;NounUncountable() string&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Verb&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;Verb() string&#xA;VerbAction() string&#xA;VerbLinking() string&#xA;VerbHelping() string&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Adverb&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;Adverb() string&#xA;AdverbManner() string&#xA;AdverbDegree() string&#xA;AdverbPlace() string&#xA;AdverbTimeDefinite() string&#xA;AdverbTimeIndefinite() string&#xA;AdverbFrequencyDefinite() string&#xA;AdverbFrequencyIndefinite() string&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Proposition&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;Preposition() string&#xA;PrepositionSimple() string&#xA;PrepositionDouble() string&#xA;PrepositionCompound() string&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Adjective&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;Adjective() string&#xA;AdjectiveDescriptive() string&#xA;AdjectiveQuantitative() string&#xA;AdjectiveProper() string&#xA;AdjectiveDemonstrative() string&#xA;AdjectivePossessive() string&#xA;AdjectiveInterrogative() string&#xA;AdjectiveIndefinite() string&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Pronoun&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;Pronoun() string&#xA;PronounPersonal() string&#xA;PronounObject() string&#xA;PronounPossessive() string&#xA;PronounReflective() string&#xA;PronounDemonstrative() string&#xA;PronounInterrogative() string&#xA;PronounRelative() string&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Connective&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;Connective() string&#xA;ConnectiveTime() string&#xA;ConnectiveComparative() string&#xA;ConnectiveComplaint() string&#xA;ConnectiveListing() string&#xA;ConnectiveCasual() string&#xA;ConnectiveExamplify() string&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Word&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;Word() string&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Sentences&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;Sentence(wordCount int) string&#xA;Paragraph(paragraphCount int, sentenceCount int, wordCount int, separator string) string&#xA;LoremIpsumWord() string&#xA;LoremIpsumSentence(wordCount int) string&#xA;LoremIpsumParagraph(paragraphCount int, sentenceCount int, wordCount int, separator string) string&#xA;Question() string&#xA;Quote() string&#xA;Phrase() string&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Foods&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;Fruit() string&#xA;Vegetable() string&#xA;Breakfast() string&#xA;Lunch() string&#xA;Dinner() string&#xA;Snack() string&#xA;Dessert() string&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Misc&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;Bool() bool&#xA;UUID() string&#xA;FlipACoin() string&#xA;RandomMapKey(mapI interface{}) interface{}&#xA;ShuffleAnySlice(v interface{})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Colors&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;Color() string&#xA;HexColor() string&#xA;RGBColor() []int&#xA;SafeColor() string&#xA;NiceColors() string&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Images&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;ImageURL(width int, height int) string&#xA;Image(width int, height int) *img.RGBA&#xA;ImageJpeg(width int, height int) []byte&#xA;ImagePng(width int, height int) []byte&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Internet&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;URL() string&#xA;DomainName() string&#xA;DomainSuffix() string&#xA;IPv4Address() string&#xA;IPv6Address() string&#xA;MacAddress() string&#xA;HTTPStatusCode() string&#xA;HTTPStatusCodeSimple() int&#xA;LogLevel(logType string) string&#xA;HTTPMethod() string&#xA;HTTPVersion() string&#xA;UserAgent() string&#xA;ChromeUserAgent() string&#xA;FirefoxUserAgent() string&#xA;OperaUserAgent() string&#xA;SafariUserAgent() string&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;HTML&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;InputName() string&#xA;Svg(options *SVGOptions) string&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Date/Time&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;Date() time.Time&#xA;DateRange(start, end time.Time) time.Time&#xA;NanoSecond() int&#xA;Second() int&#xA;Minute() int&#xA;Hour() int&#xA;Month() int&#xA;MonthString() string&#xA;Day() int&#xA;WeekDay() string&#xA;Year() int&#xA;TimeZone() string&#xA;TimeZoneAbv() string&#xA;TimeZoneFull() string&#xA;TimeZoneOffset() float32&#xA;TimeZoneRegion() string&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Payment&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;Price(min, max float64) float64&#xA;CreditCard() *CreditCardInfo&#xA;CreditCardCvv() string&#xA;CreditCardExp() string&#xA;CreditCardNumber(*CreditCardOptions) string&#xA;CreditCardType() string&#xA;Currency() *CurrencyInfo&#xA;CurrencyLong() string&#xA;CurrencyShort() string&#xA;AchRouting() string&#xA;AchAccount() string&#xA;BitcoinAddress() string&#xA;BitcoinPrivateKey() string&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Finance&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;Cusip() string&#xA;Isin() string&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Company&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;BS() string&#xA;Blurb() string&#xA;BuzzWord() string&#xA;Company() string&#xA;CompanySuffix() string&#xA;Job() *JobInfo&#xA;JobDescriptor() string&#xA;JobLevel() string&#xA;JobTitle() string&#xA;Slogan() string&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Hacker&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;HackerAbbreviation() string&#xA;HackerAdjective() string&#xA;Hackeringverb() string&#xA;HackerNoun() string&#xA;HackerPhrase() string&#xA;HackerVerb() string&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Hipster&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;HipsterWord() string&#xA;HipsterSentence(wordCount int) string&#xA;HipsterParagraph(paragraphCount int, sentenceCount int, wordCount int, separator string) string&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;App&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;AppName() string&#xA;AppVersion() string&#xA;AppAuthor() string&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Animal&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;PetName() string&#xA;Animal() string&#xA;AnimalType() string&#xA;FarmAnimal() string&#xA;Cat() string&#xA;Dog() string&#xA;Bird() string&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Emoji&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;Emoji() string&#xA;EmojiDescription() string&#xA;EmojiCategory() string&#xA;EmojiAlias() string&#xA;EmojiTag() string&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Language&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;Language() string&#xA;LanguageAbbreviation() string&#xA;ProgrammingLanguage() string&#xA;ProgrammingLanguageBest() string&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Number&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;Number(min int, max int) int&#xA;Int8() int8&#xA;Int16() int16&#xA;Int32() int32&#xA;Int64() int64&#xA;Uint8() uint8&#xA;Uint16() uint16&#xA;Uint32() uint32&#xA;Uint64() uint64&#xA;Float32() float32&#xA;Float32Range(min, max float32) float32&#xA;Float64() float64&#xA;Float64Range(min, max float64) float64&#xA;ShuffleInts(a []int)&#xA;RandomInt(i []int) int&#xA;HexUint8() string&#xA;HexUint16() string&#xA;HexUint32() string&#xA;HexUint64() string&#xA;HexUint128() string&#xA;HexUint256() string&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;String&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;Digit() string&#xA;DigitN(n uint) string&#xA;Letter() string&#xA;LetterN(n uint) string&#xA;Lexify(str string) string&#xA;Numerify(str string) string&#xA;ShuffleStrings(a []string)&#xA;RandomString(a []string) string&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Celebrity&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;CelebrityActor() string&#xA;CelebrityBusiness() string&#xA;CelebritySport() string&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Minecraft&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;MinecraftOre() string&#xA;MinecraftWood() string&#xA;MinecraftArmorTier() string&#xA;MinecraftArmorPart() string&#xA;MinecraftWeapon() string&#xA;MinecraftTool() string&#xA;MinecraftDye() string&#xA;MinecraftFood() string&#xA;MinecraftAnimal() string&#xA;MinecraftVillagerJob() string&#xA;MinecraftVillagerStation() string&#xA;MinecraftVillagerLevel() string&#xA;MinecraftMobPassive() string&#xA;MinecraftMobNeutral() string&#xA;MinecraftMobHostile() string&#xA;MinecraftMobBoss() string&#xA;MinecraftBiome() string&#xA;MinecraftWeather() string&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Book&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;Book() *BookInfo&#xA;BookTitle() string&#xA;BookAuthor() string&#xA;BookGenre() string&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Movie&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;Movie() *MovieInfo&#xA;MovieName() string&#xA;MovieGenre() string&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Error&lt;/h3&gt; &#xA;&lt;p&gt;Unlike most &lt;code&gt;gofakeit&lt;/code&gt; methods which return a &lt;code&gt;string&lt;/code&gt;, the error methods return a Go &lt;code&gt;error&lt;/code&gt;. Access the error message as a string by chaining the &lt;code&gt;.Error()&lt;/code&gt; method.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;Error() error&#xA;ErrorDatabase() error&#xA;ErrorGRPC() error&#xA;ErrorHTTP() error&#xA;ErrorHTTPClient() error&#xA;ErrorHTTPServer() error&#xA;ErrorInput() error&#xA;ErrorRuntime() error&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>