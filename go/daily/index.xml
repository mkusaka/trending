<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-03-17T01:30:41Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>yusufcanb/tlm</title>
    <updated>2024-03-17T01:30:41Z</updated>
    <id>tag:github.com,2024-03-17:/yusufcanb/tlm</id>
    <link href="https://github.com/yusufcanb/tlm" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Local CLI Copilot, powered by CodeLLaMa. üíªü¶ô&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;tlm - Local CLI Copilot, powered by CodeLLaMa. üíªü¶ô&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/yusufcanb/tlm/build.yaml?style=for-the-badge&amp;amp;logo=github&#34; alt=&#34;Latest Build&#34;&gt; &lt;a href=&#34;https://sonarcloud.io/project/overview?id=yusufcanb_tlm&#34;&gt;&lt;img src=&#34;https://img.shields.io/sonar/quality_gate/yusufcanb_tlm?server=https%3A%2F%2Fsonarcloud.io&amp;amp;style=for-the-badge&amp;amp;logo=sonar&#34; alt=&#34;Sonar Quality Gate&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/yusufcanb/tlm/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/yusufcanb/tlm?display_name=release&amp;amp;style=for-the-badge&amp;amp;logo=github&amp;amp;link=https%3A%2F%2Fgithub.com%2Fyusufcanb%2Ftlm%2Freleases&#34; alt=&#34;Latest Release&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/downloads/yusufcanb/tlm/total.svg?style=for-the-badge&amp;amp;logo=github&amp;amp;color=orange&#34; alt=&#34;Downloads&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;tlm is your CLI companion which requires nothing except your workstation. It uses most efficient and powerful &lt;a href=&#34;https://ai.meta.com/blog/code-llama-large-language-model-coding/&#34;&gt;CodeLLaMa&lt;/a&gt; in your local environment to provide you the best possible command line suggestions.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yusufcanb/tlm/main/assets/suggest.gif&#34; alt=&#34;Suggest&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yusufcanb/tlm/main/assets/explain.gif&#34; alt=&#34;Explain&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;üí∏ No API Key (Subscription) is required. (ChatGPT, Github Copilot, Azure OpenAI, etc.)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;üì° No internet connection is required.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;üíª Works on macOS, Linux and Windows.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;üë©üèª‚Äçüíª Automatic shell detection.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;üöÄ One liner generation and command explanation.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Installation can be done in two ways;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yusufcanb/tlm/main/#installation-script&#34;&gt;Installation script&lt;/a&gt; (recommended)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yusufcanb/tlm/main/#go-install&#34;&gt;Go Install&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Prerequisites&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://ollama.com/&#34;&gt;Ollama&lt;/a&gt; is needed to download to necessary models. It can be downloaded with the following methods on different platforms.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;On macOs and Windows;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Download instructions can be followed at the following link: &lt;a href=&#34;https://ollama.com/download&#34;&gt;https://ollama.com/download&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;On Linux;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -fsSL https://ollama.com/install.sh | sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Or using official Docker images üê≥;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# CPU Only&#xA;docker run -d -v ollama:/root/.ollama -p 11434:11434 --name ollama ollama/ollama&#xA;&#xA;# With GPU (Nvidia only)&#xA;docker run -d --gpus=all -v ollama:/root/.ollama -p 11434:11434 --name ollama ollama/ollama&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Installation Script&lt;/h3&gt; &#xA;&lt;p&gt;Installation script is the recommended way to install tlm. It will recognize the which platform and architecture to download and will execute install command for you.&lt;/p&gt; &#xA;&lt;h4&gt;Linux and macOS;&lt;/h4&gt; &#xA;&lt;p&gt;Download and execute the installation script by using the following command;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -fsSL https://raw.githubusercontent.com/yusufcanb/tlm/release/1.1/install.sh | sudo bash -E&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Windows (Powershell 5.1 or higher)&lt;/h4&gt; &#xA;&lt;p&gt;Download and execute the installation script by using the following command;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;Invoke-RestMethod -Uri https://raw.githubusercontent.com/yusufcanb/tlm/release/1.1/install.ps1 | Invoke-Expression&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Go Install&lt;/h3&gt; &#xA;&lt;p&gt;If you have Go 1.21 or higher installed on your system, you can easily use the following command to install tlm;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;go install github.com/yusufcanb/tlm@latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, deploy tlm modelfiles.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span&gt;üìù&lt;/span&gt; &lt;strong&gt;Note:&lt;/strong&gt; If you have Ollama deployed on somewhere else. Please first run &lt;code&gt;tlm config&lt;/code&gt; and configure Ollama host.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;tlm deploy&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Check installation by using the following command;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;tlm help&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Uninstall&lt;/h2&gt; &#xA;&lt;p&gt;On Linux and macOS;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;rm /usr/local/bin/tlm&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On Windows;&lt;/p&gt; &#xA;&lt;p&gt;Remove the directory under;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;C:\Users\&amp;lt;username&amp;gt;\AppData\Local\Programs\tlm&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>basecamp/thruster</title>
    <updated>2024-03-17T01:30:41Z</updated>
    <id>tag:github.com,2024-03-17:/basecamp/thruster</id>
    <link href="https://github.com/basecamp/thruster" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Thruster&lt;/h1&gt; &#xA;&lt;p&gt;Thruster is an HTTP/2 proxy for simple production-ready deployments of Rails applications. It runs alongside the Puma webserver to provide a few additional features that help your app run efficiently and safely on the open Internet:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;HTTP/2 support&lt;/li&gt; &#xA; &lt;li&gt;Automatic SSL certificate management with Let&#39;s Encrypt&lt;/li&gt; &#xA; &lt;li&gt;Basic HTTP caching of public assets&lt;/li&gt; &#xA; &lt;li&gt;X-Sendfile support and compression, to efficiently serve static files&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Thruster aims to be as zero-config as possible. It has no configuration file, and most features are automatically enabled with sensible defaults. The goal is that simply running your Puma server with Thruster should be enough to get a production-ready setup.&lt;/p&gt; &#xA;&lt;p&gt;The only exception to this is SSL provisioning: in order for Thruster to provision SSL certificates, it needs to know which domain those certificates should be for. So to use SSL, you need to set the &lt;code&gt;SSL_DOMAIN&lt;/code&gt; environment variable. If you don&#39;t set this variable, Thruster will run in HTTP-only mode.&lt;/p&gt; &#xA;&lt;p&gt;Thruster also wraps the Puma process so that you can use it without managing multiple processes yourself. This is particularly useful when running in a containerized environment, where you typically won&#39;t have a process manager available to coordinate the processes. Instead you can use Thruster as your &lt;code&gt;CMD&lt;/code&gt;, and it will manage Puma for you.&lt;/p&gt; &#xA;&lt;p&gt;Thruster was originally created for the &lt;a href=&#34;https://once.com&#34;&gt;ONCE&lt;/a&gt; project, where we wanted a no-fuss way to serve a Rails application from a single container, directly on the open Internet. We&#39;ve since found it useful for simple deployments of other Rails applications.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Thruster is distributed as a Ruby gem. Because Thruster is written in Go, we provide several pre-built platform-specific binaries. Installing the gem will automatically fetch the appropriate binary for your platform.&lt;/p&gt; &#xA;&lt;p&gt;To install it, add it to your application&#39;s Gemfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;gem &#39;thruster&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or install it globally:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ gem install thruster&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;To run your Puma application inside Thruster, prefix your usual command string with &lt;code&gt;thrust&lt;/code&gt;. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ thrust bin/rails server&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or with automatic SSL:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ SSL_DOMAIN=myapp.example.com thrust bin/rails server&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Custom configuration&lt;/h2&gt; &#xA;&lt;p&gt;In most cases, Thruster should work out of the box with no additional configuration. But if you need to customize its behavior, there are a few environment variables that you can set.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Variable Name&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;th&gt;Default Value&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;SSL_DOMAIN&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The domain name to use for SSL provisioning. If not set, SSL will be disabled.&lt;/td&gt; &#xA;   &lt;td&gt;None&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;TARGET_PORT&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The port that your Puma server should run on. Thruster will set &lt;code&gt;PORT&lt;/code&gt; to this value when starting your server.&lt;/td&gt; &#xA;   &lt;td&gt;3000&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;CACHE_SIZE&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The size of the HTTP cache in bytes.&lt;/td&gt; &#xA;   &lt;td&gt;64MB&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;MAX_CACHE_ITEM_SIZE&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The maximum size of a single item in the HTTP cache in bytes.&lt;/td&gt; &#xA;   &lt;td&gt;1MB&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;X_SENDFILE_ENABLED&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Whether to enable X-Sendfile support. Set to &lt;code&gt;0&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt; to disable.&lt;/td&gt; &#xA;   &lt;td&gt;Enabled&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;MAX_REQUEST_BODY&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The maximum size of a request body in bytes. Requests larger than this size will be refused; &lt;code&gt;0&lt;/code&gt; means no maximum size is enforced.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;0&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;STORAGE_PATH&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The path to store Thruster&#39;s internal state. Provisioned SSL certificates will be stored here, so that they will not need to be requested every time your application is started.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;./storage/thruster&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;BAD_GATEWAY_PAGE&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Path to an HTML file to serve when the backend server returns a 502 Bad Gateway error. If there is no file at the specific path, Thruster will serve an empty 502 response instead. Because Thruster boots very quickly, a custom page can be a useful way to show that your application is starting up.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;./public/502.html&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;HTTP_PORT&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The port to listen on for HTTP traffic.&lt;/td&gt; &#xA;   &lt;td&gt;80&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;HTTPS_PORT&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The port to listen on for HTTPS traffic.&lt;/td&gt; &#xA;   &lt;td&gt;443&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;HTTP_IDLE_TIMEOUT&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The maximum time in seconds that a client can be idle before the connection is closed.&lt;/td&gt; &#xA;   &lt;td&gt;60&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;HTTP_READ_TIMEOUT&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The maximum time in seconds that a client can take to send the request headers.&lt;/td&gt; &#xA;   &lt;td&gt;30&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;HTTP_WRITE_TIMEOUT&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The maximum time in seconds during which the client must read the response.&lt;/td&gt; &#xA;   &lt;td&gt;30&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;ACME_DIRECTORY&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The URL of the ACME directory to use for SSL certificate provisioning.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;https://acme-v02.api.letsencrypt.org/directory&lt;/code&gt; (Let&#39;s Encrypt production)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;EAB_KID&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The EAB key identifier to use when provisioning SSL certificates, if required.&lt;/td&gt; &#xA;   &lt;td&gt;None&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;EAB_HMAC_KEY&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The Base64-encoded EAB HMAC key to use when provisioning SSL certificates, if required.&lt;/td&gt; &#xA;   &lt;td&gt;None&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;DEBUG&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Set to &lt;code&gt;1&lt;/code&gt; or &lt;code&gt;true&lt;/code&gt; to enable debug logging.&lt;/td&gt; &#xA;   &lt;td&gt;Disabled&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;To prevent naming clashes with your application&#39;s own environment variables, Thruster&#39;s environment variables can optionally be prefixed with &lt;code&gt;THRUSTER_&lt;/code&gt;. For example, &lt;code&gt;SSL_DOMAIN&lt;/code&gt; can also be written as &lt;code&gt;THRUSTER_SSL_DOMAIN&lt;/code&gt;. Whenever a prefixed variable is set, it will take precedence over the unprefixed version.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>pufferffish/wireproxy</title>
    <updated>2024-03-17T01:30:41Z</updated>
    <id>tag:github.com,2024-03-17:/pufferffish/wireproxy</id>
    <link href="https://github.com/pufferffish/wireproxy" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Wireguard client that exposes itself as a socks5 proxy&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;wireproxy&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pufferffish/wireproxy/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-ISC-blue&#34; alt=&#34;ISC licensed&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/octeep/wireproxy/actions&#34;&gt;&lt;img src=&#34;https://github.com/octeep/wireproxy/actions/workflows/build.yml/badge.svg?sanitize=true&#34; alt=&#34;Build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pkg.go.dev/github.com/octeep/wireproxy&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/godoc-wireproxy-blue&#34; alt=&#34;Documentation&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A wireguard client that exposes itself as a socks5/http proxy or tunnels.&lt;/p&gt; &#xA;&lt;h1&gt;What is this&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;wireproxy&lt;/code&gt; is a completely userspace application that connects to a wireguard peer, and exposes a socks5/http proxy or tunnels on the machine. This can be useful if you need to connect to certain sites via a wireguard peer, but can&#39;t be bothered to setup a new network interface for whatever reasons.&lt;/p&gt; &#xA;&lt;h1&gt;Why you might want this&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You simply want to use wireguard as a way to proxy some traffic.&lt;/li&gt; &#xA; &lt;li&gt;You don&#39;t want root permission just to change wireguard settings.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Currently, I&#39;m running wireproxy connected to a wireguard server in another country, and configured my browser to use wireproxy for certain sites. It&#39;s pretty useful since wireproxy is completely isolated from my network interfaces, and I don&#39;t need root to configure anything.&lt;/p&gt; &#xA;&lt;p&gt;Users who want something similar but for Amnezia VPN can use &lt;a href=&#34;https://github.com/juev/wireproxy/tree/feature/amnezia-go&#34;&gt;this fork&lt;/a&gt; of wireproxy by &lt;a href=&#34;https://github.com/juev&#34;&gt;@juev&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Feature&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;TCP static routing for client and server&lt;/li&gt; &#xA; &lt;li&gt;SOCKS5/HTTP proxy (currently only CONNECT is supported)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;TODO&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;UDP Support in SOCKS5&lt;/li&gt; &#xA; &lt;li&gt;UDP static routing&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Usage&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code&gt;./wireproxy -c [path to config]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;usage: wireproxy [-h|--help] [-c|--config &#34;&amp;lt;value&amp;gt;&#34;] [-s|--silent]&#xA;                 [-d|--daemon] [-v|--version] [-n|--configtest]&#xA;&#xA;                 Userspace wireguard client for proxying&#xA;&#xA;Arguments:&#xA;&#xA;  -h  --help        Print help information&#xA;  -c  --config      Path of configuration file&#xA;  -s  --silent      Silent mode&#xA;  -d  --daemon      Make wireproxy run in background&#xA;  -v  --version     Print version&#xA;  -n  --configtest  Configtest mode. Only check the configuration file for&#xA;                    validity.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Build instruction&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/octeep/wireproxy&#xA;cd wireproxy&#xA;make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Use with VPN&lt;/h1&gt; &#xA;&lt;p&gt;Instructions for using wireproxy with Firefox container tabs and auto-start on MacOS can be found &lt;a href=&#34;https://raw.githubusercontent.com/pufferffish/wireproxy/master/UseWithVPN.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Sample config file&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code&gt;# The [Interface] and [Peer] configurations follow the same semantics and meaning&#xA;# of a wg-quick configuration. To understand what these fields mean, please refer to:&#xA;# https://wiki.archlinux.org/title/WireGuard#Persistent_configuration&#xA;# https://www.wireguard.com/#simple-network-interface&#xA;[Interface]&#xA;Address = 10.200.200.2/32 # The subnet should be /32 and /128 for IPv4 and v6 respectively&#xA;# MTU = 1420 (optional)&#xA;PrivateKey = uCTIK+56CPyCvwJxmU5dBfuyJvPuSXAq1FzHdnIxe1Q=&#xA;DNS = 10.200.200.1&#xA;&#xA;[Peer]&#xA;PublicKey = QP+A67Z2UBrMgvNIdHv8gPel5URWNLS4B3ZQ2hQIZlg=&#xA;# PresharedKey = UItQuvLsyh50ucXHfjF0bbR4IIpVBd74lwKc8uIPXXs= (optional)&#xA;Endpoint = my.ddns.example.com:51820&#xA;# PersistentKeepalive = 25 (optional)&#xA;&#xA;# TCPClientTunnel is a tunnel listening on your machine,&#xA;# and it forwards any TCP traffic received to the specified target via wireguard.&#xA;# Flow:&#xA;# &amp;lt;an app on your LAN&amp;gt; --&amp;gt; localhost:25565 --(wireguard)--&amp;gt; play.cubecraft.net:25565&#xA;[TCPClientTunnel]&#xA;BindAddress = 127.0.0.1:25565&#xA;Target = play.cubecraft.net:25565&#xA;&#xA;# TCPServerTunnel is a tunnel listening on wireguard,&#xA;# and it forwards any TCP traffic received to the specified target via local network.&#xA;# Flow:&#xA;# &amp;lt;an app on your wireguard network&amp;gt; --(wireguard)--&amp;gt; 172.16.31.2:3422 --&amp;gt; localhost:25545&#xA;[TCPServerTunnel]&#xA;ListenPort = 3422&#xA;Target = localhost:25545&#xA;&#xA;# STDIOTunnel is a tunnel connecting the standard input and output of the wireproxy&#xA;# process to the specified TCP target via wireguard.&#xA;# This is especially useful to use wireproxy as a ProxyCommand parameter in openssh&#xA;# For example:&#xA;#    ssh -o ProxyCommand=&#39;wireproxy -c myconfig.conf&#39; ssh.myserver.net&#xA;# Flow:&#xA;# Piped command --&amp;gt;(wireguard)--&amp;gt; ssh.myserver.net:22&#xA;[STDIOTunnel]&#xA;Target = ssh.myserver.net:22&#xA;&#xA;# Socks5 creates a socks5 proxy on your LAN, and all traffic would be routed via wireguard.&#xA;[Socks5]&#xA;BindAddress = 127.0.0.1:25344&#xA;&#xA;# Socks5 authentication parameters, specifying username and password enables&#xA;# proxy authentication.&#xA;#Username = ...&#xA;# Avoid using spaces in the password field&#xA;#Password = ...&#xA;&#xA;# http creates a http proxy on your LAN, and all traffic would be routed via wireguard.&#xA;[http]&#xA;BindAddress = 127.0.0.1:25345&#xA;&#xA;# HTTP authentication parameters, specifying username and password enables&#xA;# proxy authentication.&#xA;#Username = ...&#xA;# Avoid using spaces in the password field&#xA;#Password = ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, if you already have a wireguard config, you can import it in the wireproxy config file like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;WGConfig = &amp;lt;path to the wireguard config&amp;gt;&#xA;&#xA;# Same semantics as above&#xA;[TCPClientTunnel]&#xA;...&#xA;&#xA;[TCPServerTunnel]&#xA;...&#xA;&#xA;[Socks5]&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Having multiple peers is also supported. &lt;code&gt;AllowedIPs&lt;/code&gt; would need to be specified such that wireproxy would know which peer to forward to.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;[Interface]&#xA;Address = 10.254.254.40/32&#xA;PrivateKey = XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX=&#xA;&#xA;[Peer]&#xA;Endpoint = 192.168.0.204:51820&#xA;PublicKey = YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY=&#xA;AllowedIPs = 10.254.254.100/32&#xA;PersistentKeepalive = 25&#xA;&#xA;[Peer]&#xA;PublicKey = ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ=&#xA;AllowedIPs = 10.254.254.1/32, fdee:1337:c000:d00d::1/128&#xA;Endpoint = 172.16.0.185:44044&#xA;PersistentKeepalive = 25&#xA;&#xA;&#xA;[TCPServerTunnel]&#xA;ListenPort = 5000&#xA;Target = service-one.servicenet:5000&#xA;&#xA;[TCPServerTunnel]&#xA;ListenPort = 5001&#xA;Target = service-two.servicenet:5001&#xA;&#xA;[TCPServerTunnel]&#xA;ListenPort = 5080&#xA;Target = service-three.servicenet:80&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Wireproxy can also allow peers to connect to it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;[Interface]&#xA;ListenPort = 5400&#xA;...&#xA;&#xA;[Peer]&#xA;PublicKey = YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY=&#xA;AllowedIPs = 10.254.254.100/32&#xA;# Note there is no Endpoint defined here.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Stargazers over time&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://starchart.cc/octeep/wireproxy&#34;&gt;&lt;img src=&#34;https://starchart.cc/octeep/wireproxy.svg?sanitize=true&#34; alt=&#34;Stargazers over time&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>