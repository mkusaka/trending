<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-11-02T01:33:09Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>FiloSottile/mkcert</title>
    <updated>2022-11-02T01:33:09Z</updated>
    <id>tag:github.com,2022-11-02:/FiloSottile/mkcert</id>
    <link href="https://github.com/FiloSottile/mkcert" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A simple zero-config tool to make locally trusted development certificates with any names you&#39;d like.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;mkcert&lt;/h1&gt; &#xA;&lt;p&gt;mkcert is a simple tool for making locally-trusted development certificates. It requires no configuration.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ mkcert -install&#xA;Created a new local CA üí•&#xA;The local CA is now installed in the system trust store! ‚ö°Ô∏è&#xA;The local CA is now installed in the Firefox trust store (requires browser restart)! ü¶ä&#xA;&#xA;$ mkcert example.com &#34;*.example.com&#34; example.test localhost 127.0.0.1 ::1&#xA;&#xA;Created a new certificate valid for the following names üìú&#xA; - &#34;example.com&#34;&#xA; - &#34;*.example.com&#34;&#xA; - &#34;example.test&#34;&#xA; - &#34;localhost&#34;&#xA; - &#34;127.0.0.1&#34;&#xA; - &#34;::1&#34;&#xA;&#xA;The certificate is at &#34;./example.com+5.pem&#34; and the key at &#34;./example.com+5-key.pem&#34; ‚úÖ&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;img width=&#34;498&#34; alt=&#34;Chrome and Firefox screenshot&#34; src=&#34;https://user-images.githubusercontent.com/1225294/51066373-96d4aa80-15be-11e9-91e2-f4e44a3a4458.png&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Using certificates from real certificate authorities (CAs) for development can be dangerous or impossible (for hosts like &lt;code&gt;example.test&lt;/code&gt;, &lt;code&gt;localhost&lt;/code&gt; or &lt;code&gt;127.0.0.1&lt;/code&gt;), but self-signed certificates cause trust errors. Managing your own CA is the best solution, but usually involves arcane commands, specialized knowledge and manual steps.&lt;/p&gt; &#xA;&lt;p&gt;mkcert automatically creates and installs a local CA in the system root store, and generates locally-trusted certificates. mkcert does not automatically configure servers to use the certificates, though, that&#39;s up to you.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt;: the &lt;code&gt;rootCA-key.pem&lt;/code&gt; file that mkcert automatically generates gives complete power to intercept secure requests from your machine. Do not share it.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;macOS&lt;/h3&gt; &#xA;&lt;p&gt;On macOS, use &lt;a href=&#34;https://brew.sh/&#34;&gt;Homebrew&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;brew install mkcert&#xA;brew install nss # if you use Firefox&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or &lt;a href=&#34;https://www.macports.org/&#34;&gt;MacPorts&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo port selfupdate&#xA;sudo port install mkcert&#xA;sudo port install nss # if you use Firefox&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Linux&lt;/h3&gt; &#xA;&lt;p&gt;On Linux, first install &lt;code&gt;certutil&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo apt install libnss3-tools&#xA;    -or-&#xA;sudo yum install nss-tools&#xA;    -or-&#xA;sudo pacman -S nss&#xA;    -or-&#xA;sudo zypper install mozilla-nss-tools&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then you can install using &lt;a href=&#34;https://docs.brew.sh/Homebrew-on-Linux&#34;&gt;Homebrew on Linux&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;brew install mkcert&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or build from source (requires Go 1.13+)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/FiloSottile/mkcert &amp;amp;&amp;amp; cd mkcert&#xA;go build -ldflags &#34;-X main.Version=$(git describe --tags)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or use &lt;a href=&#34;https://github.com/FiloSottile/mkcert/releases&#34;&gt;the pre-built binaries&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;curl -JLO &#34;https://dl.filippo.io/mkcert/latest?for=linux/amd64&#34;&#xA;chmod +x mkcert-v*-linux-amd64&#xA;sudo cp mkcert-v*-linux-amd64 /usr/local/bin/mkcert&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For Arch Linux users, &lt;a href=&#34;https://www.archlinux.org/packages/community/x86_64/mkcert/&#34;&gt;&lt;code&gt;mkcert&lt;/code&gt;&lt;/a&gt; is available on the official Arch Linux repository.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo pacman -Syu mkcert&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Windows&lt;/h3&gt; &#xA;&lt;p&gt;On Windows, use &lt;a href=&#34;https://chocolatey.org&#34;&gt;Chocolatey&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;choco install mkcert&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or use Scoop&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;scoop bucket add extras&#xA;scoop install mkcert&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or build from source (requires Go 1.10+), or use &lt;a href=&#34;https://github.com/FiloSottile/mkcert/releases&#34;&gt;the pre-built binaries&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re running into permission problems try running &lt;code&gt;mkcert&lt;/code&gt; as an Administrator.&lt;/p&gt; &#xA;&lt;h2&gt;Supported root stores&lt;/h2&gt; &#xA;&lt;p&gt;mkcert supports the following root stores:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;macOS system store&lt;/li&gt; &#xA; &lt;li&gt;Windows system store&lt;/li&gt; &#xA; &lt;li&gt;Linux variants that provide either &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;update-ca-trust&lt;/code&gt; (Fedora, RHEL, CentOS) or&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;update-ca-certificates&lt;/code&gt; (Ubuntu, Debian, OpenSUSE, SLES) or&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;trust&lt;/code&gt; (Arch)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Firefox (macOS and Linux only)&lt;/li&gt; &#xA; &lt;li&gt;Chrome and Chromium&lt;/li&gt; &#xA; &lt;li&gt;Java (when &lt;code&gt;JAVA_HOME&lt;/code&gt; is set)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To only install the local root CA into a subset of them, you can set the &lt;code&gt;TRUST_STORES&lt;/code&gt; environment variable to a comma-separated list. Options are: &#34;system&#34;, &#34;java&#34; and &#34;nss&#34; (includes Firefox).&lt;/p&gt; &#xA;&lt;h2&gt;Advanced topics&lt;/h2&gt; &#xA;&lt;h3&gt;Advanced options&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#x9;-cert-file FILE, -key-file FILE, -p12-file FILE&#xA;&#x9;    Customize the output paths.&#xA;&#xA;&#x9;-client&#xA;&#x9;    Generate a certificate for client authentication.&#xA;&#xA;&#x9;-ecdsa&#xA;&#x9;    Generate a certificate with an ECDSA key.&#xA;&#xA;&#x9;-pkcs12&#xA;&#x9;    Generate a &#34;.p12&#34; PKCS #12 file, also know as a &#34;.pfx&#34; file,&#xA;&#x9;    containing certificate and key for legacy applications.&#xA;&#xA;&#x9;-csr CSR&#xA;&#x9;    Generate a certificate based on the supplied CSR. Conflicts with&#xA;&#x9;    all other flags and arguments except -install and -cert-file.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; You &lt;em&gt;must&lt;/em&gt; place these options before the domain names list.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;Example&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;mkcert -key-file key.pem -cert-file cert.pem example.com *.example.com&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;S/MIME&lt;/h3&gt; &#xA;&lt;p&gt;mkcert automatically generates an S/MIME certificate if one of the supplied names is an email address.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;mkcert filippo@example.com&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Mobile devices&lt;/h3&gt; &#xA;&lt;p&gt;For the certificates to be trusted on mobile devices, you will have to install the root CA. It&#39;s the &lt;code&gt;rootCA.pem&lt;/code&gt; file in the folder printed by &lt;code&gt;mkcert -CAROOT&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;On iOS, you can either use AirDrop, email the CA to yourself, or serve it from an HTTP server. After opening it, you need to &lt;a href=&#34;https://github.com/FiloSottile/mkcert/issues/233#issuecomment-690110809&#34;&gt;install the profile in Settings &amp;gt; Profile Downloaded&lt;/a&gt; and then &lt;a href=&#34;https://support.apple.com/en-nz/HT204477&#34;&gt;enable full trust in it&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For Android, you will have to install the CA and then enable user roots in the development build of your app. See &lt;a href=&#34;https://stackoverflow.com/a/22040887/749014&#34;&gt;this StackOverflow answer&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Using the root with Node.js&lt;/h3&gt; &#xA;&lt;p&gt;Node does not use the system root store, so it won&#39;t accept mkcert certificates automatically. Instead, you will have to set the &lt;a href=&#34;https://nodejs.org/api/cli.html#cli_node_extra_ca_certs_file&#34;&gt;&lt;code&gt;NODE_EXTRA_CA_CERTS&lt;/code&gt;&lt;/a&gt; environment variable.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;export NODE_EXTRA_CA_CERTS=&#34;$(mkcert -CAROOT)/rootCA.pem&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Changing the location of the CA files&lt;/h3&gt; &#xA;&lt;p&gt;The CA certificate and its key are stored in an application data folder in the user home. You usually don&#39;t have to worry about it, as installation is automated, but the location is printed by &lt;code&gt;mkcert -CAROOT&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you want to manage separate CAs, you can use the environment variable &lt;code&gt;$CAROOT&lt;/code&gt; to set the folder where mkcert will place and look for the local CA files.&lt;/p&gt; &#xA;&lt;h3&gt;Installing the CA on other systems&lt;/h3&gt; &#xA;&lt;p&gt;Installing in the trust store does not require the CA key, so you can export the CA certificate and use mkcert to install it in other machines.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Look for the &lt;code&gt;rootCA.pem&lt;/code&gt; file in &lt;code&gt;mkcert -CAROOT&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;copy it to a different machine&lt;/li&gt; &#xA; &lt;li&gt;set &lt;code&gt;$CAROOT&lt;/code&gt; to its directory&lt;/li&gt; &#xA; &lt;li&gt;run &lt;code&gt;mkcert -install&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Remember that mkcert is meant for development purposes, not production, so it should not be used on end users&#39; machines, and that you should &lt;em&gt;not&lt;/em&gt; export or share &lt;code&gt;rootCA-key.pem&lt;/code&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>chaosblade-io/chaosblade</title>
    <updated>2022-11-02T01:33:09Z</updated>
    <id>tag:github.com,2022-11-02:/chaosblade-io/chaosblade</id>
    <link href="https://github.com/chaosblade-io/chaosblade" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An easy to use and powerful chaos engineering experiment toolkit.ÔºàÈòøÈáåÂ∑¥Â∑¥ÂºÄÊ∫êÁöÑ‰∏ÄÊ¨æÁÆÄÂçïÊòìÁî®„ÄÅÂäüËÉΩÂº∫Â§ßÁöÑÊ∑∑Ê≤åÂÆûÈ™åÊ≥®ÂÖ•Â∑•ÂÖ∑Ôºâ&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://chaosblade.oss-cn-hangzhou.aliyuncs.com/doc/image/chaosblade-logo.png&#34; alt=&#34;logo&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Chaosblade: An Easy to Use and Powerful Chaos Engineering Toolkit&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/chaosblade-io/chaosblade&#34;&gt;&lt;img src=&#34;https://travis-ci.org/chaosblade-io/chaosblade.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/chaosblade&#34;&gt;&lt;img src=&#34;https://opencollective.com/chaosblade/all/badge.svg?label=financial+contributors&#34; alt=&#34;Financial Contributors on Open Collective&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/chaosblade-io/chaosblade&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/chaosblade-io/chaosblade/branch/master/graph/badge.svg?sanitize=true&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/license/chaosblade-io/chaosblade.svg?sanitize=true&#34; alt=&#34;license&#34;&gt; &lt;a href=&#34;https://bestpractices.coreinfrastructure.org/projects/5032&#34;&gt;&lt;img src=&#34;https://bestpractices.coreinfrastructure.org/projects/5032/badge&#34; alt=&#34;CII Best Practices&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;‰∏≠ÊñáÁâà &lt;a href=&#34;https://raw.githubusercontent.com/chaosblade-io/chaosblade/master/README_CN.md&#34;&gt;README&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;ChaosBlade is an Alibaba open source experimental injection tool that follows the principles of chaos engineering and chaos experimental models to help enterprises improve the fault tolerance of distributed systems and ensure business continuity during the process of enterprises going to cloud or moving to cloud native systems.&lt;/p&gt; &#xA;&lt;p&gt;Chaosblade is an internal open source project of MonkeyKing. It is based on Alibaba&#39;s nearly ten years of failure testing and drill practice, and combines the best ideas and practices of the Group&#39;s businesses.&lt;/p&gt; &#xA;&lt;p&gt;ChaosBlade is not only easy to use, but also supports rich experimental scenarios. The scenarios include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Basic resources: such as CPU, memory, network, disk, process and other experimental scenarios;&lt;/li&gt; &#xA; &lt;li&gt;Java applications: such as databases, caches, messages, JVM itself, microservices, etc. You can also specify any class method to inject various complex experimental scenarios;&lt;/li&gt; &#xA; &lt;li&gt;C ++ applications: such as specifying arbitrary methods or experimental lines of code injection delay, tampering with variables and return values;&lt;/li&gt; &#xA; &lt;li&gt;container: such as killing the container, the CPU in the container, memory, network, disk, process and other experimental scenarios;&lt;/li&gt; &#xA; &lt;li&gt;Cloud-native platforms: For example, CPU, memory, network, disk, and process experimental scenarios on Kubernetes platform nodes, Pod network and Pod itself experimental scenarios such as killing Pods, and container experimental scenarios such as the aforementioned Docker container experimental scenario;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Encapsulating scenes by domain into individual projects can not only standardize the scenes in the domain, but also facilitate the horizontal and vertical expansion of the scenes. By following the chaos experimental model, the chaosblade cli can be called uniformly. The items currently included are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/chaosblade-io/chaosblade&#34;&gt;chaosblade&lt;/a&gt;: Chaos experiment management tool, including commands for creating experiments, destroying experiments, querying experiments, preparing experimental environments, and canceling experimental environments. It is the execution of chaotic experiments. Tools, execution methods include CLI and HTTP. Provides complete commands, experimental scenarios, and scenario parameter descriptions, and the operation is simple and clear.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/chaosblade-io/chaosblade-spec-go&#34;&gt;chaosblade-spec-go&lt;/a&gt;: Chaos experimental model Golang language definition, scenes implemented using Golang language are easy to implement based on this specification.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/chaosblade-io/chaosblade-exec-os&#34;&gt;chaosblade-exec-os&lt;/a&gt;: Implementation of basic resource experimental scenarios.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/chaosblade-io/chaosblade-exec-docker&#34;&gt;chaosblade-exec-docker&lt;/a&gt;: Docker container experimental scenario implementation, standardized by calling the Docker API.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/chaosblade-io/chaosblade-exec-cri&#34;&gt;chaosblade-exec-cri&lt;/a&gt;: Container experimental scenario implementation, standardized by calling the CRI.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/chaosblade-io/chaosblade-operator&#34;&gt;chaosblade-operator&lt;/a&gt;: Kubernetes platform experimental scenario is implemented, chaos experiments are defined by Kubernetes standard CRD method, it is very convenient to use Kubernetes resource operation method To create, update, and delete experimental scenarios, including using kubectl, client-go, etc., and also using the chaosblade cli tool described above.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/chaosblade-io/chaosblade-exec-jvm&#34;&gt;chaosblade-exec-jvm&lt;/a&gt;: Java application experimental scenario implementation, using Java Agent technology to mount dynamically, without any access, zero-cost use It also supports uninstallation and completely recycles various resources created by the Agent.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/chaosblade-io/chaosblade-exec-cplus&#34;&gt;chaosblade-exec-cplus&lt;/a&gt;: C ++ application experimental scenario implementation, using GDB technology to implement method and code line level experimental scenario injection.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;CLI Command&lt;/h2&gt; &#xA;&lt;p&gt;You can download the latest chaosblade toolkit from &lt;a href=&#34;https://github.com/chaosblade-io/chaosblade/releases&#34;&gt;Releases&lt;/a&gt; and extract it and use it. If you want to inject Kubernetes related fault scenarios, you need to install &lt;a href=&#34;https://github.com/chaosblade-io/chaosblade-operator/releases&#34;&gt;chaosblade-operator&lt;/a&gt;. For detailed Chinese usage documents, please see &lt;a href=&#34;https://chaosblade-io.gitbook.io/chaosblade-help-zh-cn/&#34;&gt;chaosblade-help-zh-cn &lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;chaosblade supports CLI and HTTP invocation methods. The supported commands are as follows:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;prepare&lt;/strong&gt;: alias is p, preparation before the chaos engineering experiment, such as drilling Java applications, you need to attach the java agent. For example, to drill an application whose application name is business, execute &lt;code&gt;blade p jvm --process business&lt;/code&gt; on the target host. If the attach is successful, return the uid for status query or agent revoke.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;revoke&lt;/strong&gt;: alias is r, undo chaos engineering experiment preparation before, such as detaching java agent. The command is &lt;code&gt;blade revoke UID&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;create&lt;/strong&gt;: alias is c, create a chaos engineering experiment. The command is &lt;code&gt;blade create [TARGET] [ACTION] [FLAGS]&lt;/code&gt;. For example, if you implement a Dubbo consumer call xxx.xxx.Service interface delay 3s, the command executed is &lt;code&gt;blade create dubbo delay --consumer --time 3000 --Service xxx.xxx.Service&lt;/code&gt;, if the injection is successful, return the experimental uid for status query and destroy the experiment.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;destroy&lt;/strong&gt;: alias is d, destroy a chaos engineering experiment, such as destroying the Dubbo delay experiment mentioned above, the command is &lt;code&gt;blade destroy UID&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;status&lt;/strong&gt;: alias s, query preparation stage or experiment status, the command is &lt;code&gt;blade status UID&lt;/code&gt; or &lt;code&gt;blade status --type create&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;server&lt;/strong&gt;: start the web server, expose the HTTP service, and call chaosblade through HTTP requests. For example, execute on the target machine xxxx: &lt;code&gt;blade server start -p 9526&lt;/code&gt; to perform a CPU full load experiment:&lt;code&gt;curl &#34;http://xxxx:9526/chaosblade?cmd=create%20cpu%20fullload&#34;&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Use the &lt;code&gt;blade help [COMMAND]&lt;/code&gt; or &lt;code&gt;blade [COMMAND] -h&lt;/code&gt; command to view help&lt;/p&gt; &#xA;&lt;h2&gt;Experience Demo&lt;/h2&gt; &#xA;&lt;p&gt;Download the chaosblade demo image and experience the use of the blade toolkit&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://chaosblade.oss-cn-hangzhou.aliyuncs.com/agent/release/chaosblade-demo-0.0.1.gif&#34; alt=&#34;demo.gif&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Download image commandÔºö&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker pull chaosbladeio/chaosblade-demo&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run the demo containerÔºö&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker run -it --privileged chaosbladeio/chaosblade-demo&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After entering the container, you can read the README.txt file to implement the chaos experiment, Enjoy it.&lt;/p&gt; &#xA;&lt;h2&gt;Cloud Native&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/chaosblade-io/chaosblade-operator&#34;&gt;chaosblade-operator&lt;/a&gt; The project is a chaos experiment injection tool for cloud-native platforms. It follows the chaos experiment model to standardize the experimental scenario and defines the experiment as Kubernetes CRD Resources, mapping experimental models to Kubernetes resource attributes, and very friendly combination of chaotic experimental models with Kubernetes declarative design. While relying on chaotic experimental models to conveniently develop scenarios, it can also well integrate Kubernetes design concepts, through kubectl or Write code to directly call the Kubernetes API to create, update, and delete chaotic experiments, and the resource status can clearly indicate the execution status of the experiment, and standardize Kubernetes fault injection. In addition to using the above methods to perform experiments, you can also use the chaosblade cli method to execute kubernetes experimental scenarios and query the experimental status very conveniently. For details, please read the chinese document: &lt;a href=&#34;https://raw.githubusercontent.com/chaosblade-io/chaosblade/master/CLOUDNATIVE.md&#34;&gt;Chaos Engineering Practice under Cloud Native&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Compile&lt;/h2&gt; &#xA;&lt;p&gt;This project is written in golang, so you need to install the latest golang version first. The minimum supported version is 1.11. After the Clone project, enter the project directory and execute the following command to compile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If on a mac system, compile the current system version, execute:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;make build_darwin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to compile linux system version on mac system, execute:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;make build_linux&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also compile selectively, for example, you only need to compile cli and os scenes, then execute:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;make build_with cli os&#xA;# If it is a mac system, run&#xA;make build_with cli os_darwin&#xA;# If you want to compile linux system version selectively, execute:&#xA;ARGS=&#34;cli os&#34; make build_with_linux&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Arch Linux install &lt;a href=&#34;https://aur.archlinux.org/packages/chaosblade-bin/&#34;&gt;chaosblade-bin&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;yay -S chaosblade-bin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Bugs and Feedback&lt;/h2&gt; &#xA;&lt;p&gt;For bug report, questions and discussions please submit &lt;a href=&#34;https://github.com/chaosblade-io/chaosblade/issues&#34;&gt;GitHub Issues&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can also contact us via:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Dingding group (recommended for chinese): 23177705&lt;/li&gt; &#xA; &lt;li&gt;Slack group: &lt;a href=&#34;https://join.slack.com/t/chaosblade-io/shared_invite/zt-f0d3r3f4-TDK13Wr3QRUrAhems28p1w&#34;&gt;chaosblade-io&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Gitter room: &lt;a href=&#34;https://gitter.im/chaosblade-io/community&#34;&gt;chaosblade community&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Email: &lt;a href=&#34;mailto:chaosblade.io.01@gmail.com&#34;&gt;chaosblade.io.01@gmail.com&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Twitter: &lt;a href=&#34;https://twitter.com/ChaosbladeI&#34;&gt;chaosblade.io&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;We welcome every contribution, even if it is just punctuation. See details of &lt;a href=&#34;https://raw.githubusercontent.com/chaosblade-io/chaosblade/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING&lt;/a&gt;. For the promotion ladder of specific community participation students, seeÔºö (&lt;a href=&#34;https://github.com/chaosblade-io/community/raw/main/Contributor_Ladder.md&#34;&gt;Contributor Ladder&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;h2&gt;Business Registration&lt;/h2&gt; &#xA;&lt;p&gt;The original intention of our open source project is to lower the threshold for chaos engineering to be implemented in enterprises, so we highly value the use of the project in enterprises. Welcome everyone here &lt;a href=&#34;https://github.com/chaosblade-io/chaosblade/issues/32&#34;&gt;ISSUE&lt;/a&gt;. After registration, you will be invited to join the corporate mail group to discuss the problems encountered by Chaos Engineering in the landing of the company and share the landing experience.&lt;/p&gt; &#xA;&lt;h2&gt;Contributors&lt;/h2&gt; &#xA;&lt;h3&gt;Code Contributors&lt;/h3&gt; &#xA;&lt;p&gt;This project exists thanks to all the people who contribute. [&lt;a href=&#34;https://raw.githubusercontent.com/chaosblade-io/chaosblade/master/CONTRIBUTING.md&#34;&gt;Contribute&lt;/a&gt;]. &lt;a href=&#34;https://github.com/chaosblade-io/chaosblade/graphs/contributors&#34;&gt;&lt;img src=&#34;https://opencollective.com/chaosblade/contributors.svg?width=890&amp;amp;button=false&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Chaosblade is licensed under the Apache License, Version 2.0. See &lt;a href=&#34;https://raw.githubusercontent.com/chaosblade-io/chaosblade/master/LICENSE&#34;&gt;LICENSE&lt;/a&gt; for the full license text.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>facebookincubator/dns</title>
    <updated>2022-11-02T01:33:09Z</updated>
    <id>tag:github.com,2022-11-02:/facebookincubator/dns</id>
    <link href="https://github.com/facebookincubator/dns" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Collection of Meta&#39;s DNS Libraries&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;DNS&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/facebookincubator/dns/actions/workflows/lint.yml&#34;&gt;&lt;img src=&#34;https://github.com/facebookincubator/dns/actions/workflows/lint.yml/badge.svg?sanitize=true&#34; alt=&#34;lint&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/facebookincubator/dns/actions/workflows/test.yml&#34;&gt;&lt;img src=&#34;https://github.com/facebookincubator/dns/actions/workflows/test.yml/badge.svg?sanitize=true&#34; alt=&#34;test&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/facebookincubator/dns&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/facebookincubator/dns/branch/main/graph/badge.svg?token=ZX57JNHD7G&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/facebookincubator/dns/dnsrocks&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/facebookincubator/dns/dnsrocks&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opensource.org/licenses/Apache-2.0&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-Apache_2.0-blue.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Contents&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/facebookincubator/dns/main/#Documentation&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/facebookincubator/dns/main/#License&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Collection of Meta&#39;s DNS Libraries&lt;/p&gt; &#xA;&lt;h3&gt;dnsrocks&lt;/h3&gt; &#xA;&lt;p&gt;Meta&#39;s authoritative dns server&lt;/p&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;fbdns is licensed under Apache 2.0 as found in the &lt;a href=&#34;https://raw.githubusercontent.com/facebookincubator/dns/main/LICENSE&#34;&gt;LICENSE file&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>