<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-12-17T01:35:35Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>jwping/wxbot</title>
    <updated>2023-12-17T01:35:35Z</updated>
    <id>tag:github.com,2023-12-17:/jwping/wxbot</id>
    <link href="https://github.com/jwping/wxbot" rel="alternate"></link>
    <summary type="html">&lt;p&gt;PC微信Hook模块、Hook WeChat / 微信逆向、微信机器人、WeChatRobot&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;wxbot - 微信聊天机器人&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;适用于微信（WeChat &lt;strong&gt;3.9.8.15&lt;/strong&gt; | 3.9.7.29） 可在Windows PC微信 &lt;strong&gt;设置&lt;/strong&gt; - &lt;strong&gt;关于微信&lt;/strong&gt; - &lt;strong&gt;版本信息&lt;/strong&gt; 中获取您当前的微信版本，如果您当前的微信版本不在上述可用的版本列表中，请至下方 &lt;strong&gt;3、可用版本微信安装包获取&lt;/strong&gt; 选择最新版微信重新安装使用&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;strong&gt;未经过大量测试，使用远程线程注入方式可能会被报毒（无毒，请放心使用！），也可以尝试其它方式进行注入，注入手段并不重要，只要将wxbot.dll注入到wechat.exe中即可&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;免责声明&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;本仓库发布的内容，仅用于学习研究，请勿用于非法用途和商业用途！如因此产生任何法律纠纷，均与作者无关！&lt;/strong&gt; &lt;strong&gt;无任何后门、木马，也不获取、存储任何信息，请大家在国家法律、法规和腾讯相关原则下学习研究！&lt;/strong&gt; &lt;strong&gt;不对任何下载和使用者的任何行为负责，请于下载后24小时内删除！&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;1、运行&lt;/h2&gt; &#xA;&lt;p&gt;bin目录下有如下两个文件（仅在windows 10 &amp;amp; windows server 2012 R2系统上进行测试）：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;injector.exe (bin/injector.exe)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;wxbot.dll (bin/wxbot.dll)&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;简单方式可直接运行 &lt;code&gt;injector.exe&lt;/code&gt; 即可自动拉起微信并完成注入！ 默认wxbot.dll为最新版（3.9.8.15），低版本微信注入请选择对应版本的wxbot-xxxx.dll替换为wxbot.dll后注入即可&lt;/p&gt; &#xA;&lt;h3&gt;Linux下Docker部署&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;在 &lt;code&gt;Linux&lt;/code&gt; 下使用 &lt;code&gt;Docker&lt;/code&gt; 部署 &lt;code&gt;Wechat&lt;/code&gt; + &lt;code&gt;wxbot&lt;/code&gt; 全部流程已经跑通了，后面我会构建成一个公共镜像供大家使用（但使用 &lt;code&gt;wine&lt;/code&gt; 运行 &lt;code&gt;WeChat&lt;/code&gt; 的稳定性如何到时还需要大家帮忙一起测试了）&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;2、使用&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;如果您在运行注入器（&lt;code&gt;injector.exe&lt;/code&gt;）时遇到了缺少运行库的报错&lt;/strong&gt; &lt;strong&gt;如：由于找不到 &lt;code&gt;MSVCP140.dll&lt;/code&gt;，无法继续执行代码。重新安装程序可能会解决此问题&lt;/strong&gt; &lt;strong&gt;如果您遇到了此类问题可通过文档最下方的网盘链接中下载 &lt;em&gt;微软常用运行库.exe&lt;/em&gt; 进行安装&lt;/strong&gt; &lt;a href=&#34;https://www.lanzoux.com/b0dptvb0f&#34;&gt;或通过此链接下载最新微软常用运行库合集解决&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;2.1、注入器&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;注入器（&lt;code&gt;injector.exe&lt;/code&gt;）目前支持：&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;直接运行可启动微信并完成自动注入&lt;/li&gt; &#xA;  &lt;li&gt;按微信PID（进程号）注入&lt;/li&gt; &#xA;  &lt;li&gt;注入卸载（当您开启了隐藏注入时，此功能不可用！）&lt;/li&gt; &#xA;  &lt;li&gt;指定注入的DLL路径&lt;/li&gt; &#xA;  &lt;li&gt;开启微信多开（取消微信多开限制）&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;p&gt;具体使用方式您可以使用&lt;code&gt;inject.exe --help&lt;/code&gt;命令查看！&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;$ injector.exe --help&#xA;Usage: injector.exe [ OPTIONS ] [ VALUE ]&#xA;&#xA;Options:&#xA;        -p, --pid  [ pid ]              Specify the process number for injection&#xA;        -d, --dll  [ path ]             Specify the DLL path to be injected&#xA;        -i, --inject                    inject DLL&#xA;        -u, --uninject                  uninject DLL&#xA;        -m, --multi                     Remove WeChat multi instance restrictions (allowing multiple instances)&#xA;        -s, --silence                   Enable silent mode(without popping up the console)&#xA;        -h, --help                      Output Help Information&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Tips：&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;如果您只有一个微信实例在运行并需要注入，那么您无需关心其它参数，直接运行即可注入&lt;/li&gt; &#xA; &lt;li&gt;如果您需要多开微信，那么请使用&lt;code&gt;inject.exe -m&lt;/code&gt;解除微信多开限制（执行时机并不重要，您可以在任何情况下去解除多开限制），&lt;strong&gt;但是您需要注意，如果您已经运行了多个微信实例，那么此时请不要尝试直接运行inject.exe进行注入了，而是使用&lt;code&gt;-p&lt;/code&gt;参数对指定微信进程号进行注入！&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;如果您已经解除了多开限制，并希望对运行中的多个微信实例进行注入，那么您需要使用&lt;code&gt;-p&lt;/code&gt;参数对每个微信的进程号进行注入&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;2.2、配置文件&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;配置文件支持两种方式分别是：&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;strong&gt;[wxid].json：&lt;/strong&gt; 支持登陆用户wxid的专属配置文件，如你登陆的微信用户wxid是abc，且微信根目录下有abc.json配置文件的话则优先读取此配置文件！&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;wxbot.json：&lt;/strong&gt; 这是默认的配置文件（如果有的话）&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;p&gt;&lt;strong&gt;Tips：&lt;/strong&gt; &lt;strong&gt;配置文件路径为 &lt;code&gt;WeChat.exe&lt;/code&gt; 所在的同级目录（也就是微信的安装目录）&lt;/strong&gt; &lt;strong&gt;配置文件为json格式，默认不自动创建！&lt;/strong&gt; &lt;strong&gt;配置文件优先级：[wxid].json &amp;gt; wxbot.json &amp;gt; 无配置文件时的默认值&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;这样设计配置文件优先级是为了适配微信多开而不那么优雅的实现方式，具体您可以看 &lt;code&gt;4. 多开高级用法&lt;/code&gt; 了解更多&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;2.2.1、配置文件示例&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;    &#34;addr&#34;: &#34;0.0.0.0:8080&#34;,&#xA;    &#34;sync-url&#34;: [&#xA;        {&#xA;            &#34;timeout&#34;: 3000,&#xA;            &#34;url&#34;: &#34;http://localhost:8081/callback&#34;&#xA;        }&#xA;    ],&#xA;    &#34;hide-module&#34;: false,&#xA;    &#34;authorization&#34;: {&#xA;        &#34;enable&#34;: false,&#xA;        &#34;users&#34;: [&#xA;            {&#xA;                &#34;user&#34;: &#34;admin&#34;,&#xA;                &#34;password&#34;: &#34;123&#34;,&#xA;                &#34;token&#34;: &#34;token123&#34;&#xA;            },&#xA;            {&#xA;                &#34;user&#34;: &#34;user&#34;,&#xA;                &#34;password&#34;: &#34;321&#34;,&#xA;                &#34;token&#34;: &#34;token321&#34;&#xA;            }&#xA;        ]&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;addr:&lt;/strong&gt; wxbot服务监听地址（固定为ip:port形式）&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;sync-url：&lt;/strong&gt; http回调地址列表（建议通过下面的/sync-url接口修改，不要手动修改） &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;url：&lt;/strong&gt; 回调url&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;timeout：&lt;/strong&gt; 回调超时时间 &lt;strong&gt;Tips：这里的&lt;code&gt;http://localhost:8081/callback&lt;/code&gt;只是一个例子，而并非必须的，如果您未启动此回调地址，那么请删除它！&lt;/strong&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;hide-module：&lt;/strong&gt; 是否隐藏注入，当开启隐藏注入时 inject.exe 的注入卸载将不可用，此时您只能通过重启微信的方式来卸载DLL！&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;authorization：&lt;/strong&gt; 鉴权 &lt;strong&gt;鉴权使用方法请您至下方 &lt;code&gt;5、鉴权&lt;/code&gt; 了解更多&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;enable：&lt;/strong&gt; 是否开启鉴权&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;users：&lt;/strong&gt; 用户列表（这是一个对象数组） &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;strong&gt;user：&lt;/strong&gt; 用户名&lt;/li&gt; &#xA;     &lt;li&gt;&lt;strong&gt;password：&lt;/strong&gt; 密码&lt;/li&gt; &#xA;     &lt;li&gt;&lt;strong&gt;token：&lt;/strong&gt; 登陆后的token&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;实际上配置文件中的所有字段都是非必填项，它们都可以独立存在！&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;2.2、路由列表&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;响应信息 &lt;strong&gt;固定为JSON格式响应：&lt;/strong&gt; {&#34;code&#34;: 200, data: xxxx, &#34;message&#34;: &#34;xxx&#34;}&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;strong&gt;code：&lt;/strong&gt; 固定200&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;message：&lt;/strong&gt; 成功为success，失败为faild，或是其它错误提示信息&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;data:&lt;/strong&gt; 根据请求接口不同数据不同，无特别描述时下面的请求接口返回字段全部为该data字段的子字段&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;strong&gt;路由列表概览：&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;功能类&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;/checklogin&lt;/strong&gt; - 检查当前是否已登录（兼容接口，没什么用）&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;/userinfo&lt;/strong&gt; - 获取登陆用户信息&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;/contacts&lt;/strong&gt; - 获取通讯录信息（wxid从这个接口获取）&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;/sendtxtmsg&lt;/strong&gt; - 发送文本消息（好友和群聊组都可通过此接口发送，群聊组消息支持艾特）&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;/sendimgmsg&lt;/strong&gt; - 发送图片消息（支持json和form-data表单上传两种方式，json方式请将二进制数据使用base64编码后发送）&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;/sendfilemsg&lt;/strong&gt; - 发送文件消息（支持json和form-data表单上传两种方式，json方式请将二进制数据使用base64编码后发送）&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;/chatroom&lt;/strong&gt; - 获取群聊组信息，包括：管理员、公告、成员列表等&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;/accountbywxid&lt;/strong&gt; - WXID反查微信昵称（支持好友和群聊组等）&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;/sendcardmsg&lt;/strong&gt; - 发送卡片消息&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;/close&lt;/strong&gt; - 注入卸载（仅卸载 &lt;code&gt;wxbot.dll&lt;/code&gt; 的注入，不会关闭或重启微信）&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;回调注册类（目前仅用来获取微信实时消息 - 同步消息接口，同时支持WebSocket和http两种方式！）&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;/ws&lt;/strong&gt; - 注册websocket回调（支持注册多个ws通道）&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;/syncurl&lt;/strong&gt; - http回调相关（支持注册多个http接口，注册请带上协议头：http/https，注册成功会持久化到配置文件中）&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;2.2.1、功能类接口&lt;/h4&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;以&lt;code&gt;[]&lt;/code&gt;中括号括起来的字段为可选字段&lt;/strong&gt; &lt;strong&gt;目前所有请求和响应字段均按大驼峰命名法规范&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h5&gt;2.2.1.1、检查当前是否已登录&lt;/h5&gt; &#xA;&lt;p&gt;&lt;strong&gt;协议信息&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;GET /checklogin&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;别名&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;/checkLogin /check-login /check_login&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;响应字段&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;status &lt;em&gt;uint64&lt;/em&gt;: 当前登陆状态：0 未登陆 - 1 已登陆&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h5&gt;2.2.1.2、登陆信息&lt;/h5&gt; &#xA;&lt;p&gt;&lt;strong&gt;协议信息&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;GET /userinfo&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;别名&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;/userInfo /user-info /user_info&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;响应字段&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;customAccount &lt;em&gt;string&lt;/em&gt;: 微信号&lt;/li&gt; &#xA; &lt;li&gt;nickname &lt;em&gt;string&lt;/em&gt;： 微信昵称&lt;/li&gt; &#xA; &lt;li&gt;phone &lt;em&gt;string&lt;/em&gt;： 手机号&lt;/li&gt; &#xA; &lt;li&gt;phoneSystem &lt;em&gt;string&lt;/em&gt;： 手机系统&lt;/li&gt; &#xA; &lt;li&gt;profilePicture &lt;em&gt;string&lt;/em&gt;： 头像&lt;/li&gt; &#xA; &lt;li&gt;profilePictureSmall &lt;em&gt;string&lt;/em&gt;： 小头像&lt;/li&gt; &#xA; &lt;li&gt;wxid &lt;em&gt;string&lt;/em&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h5&gt;2.2.1.3、通讯录&lt;/h5&gt; &#xA;&lt;p&gt;&lt;strong&gt;协议信息&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;GET /contacts&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;响应字段&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;contacts &lt;em&gt;array&lt;/em&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;customAccount &lt;em&gt;string&lt;/em&gt;： 微信号&lt;/li&gt; &#xA;   &lt;li&gt;nickname &lt;em&gt;string&lt;/em&gt;： 昵称&lt;/li&gt; &#xA;   &lt;li&gt;note &lt;em&gt;string&lt;/em&gt;： 备注&lt;/li&gt; &#xA;   &lt;li&gt;pinyin &lt;em&gt;string&lt;/em&gt;： 昵称拼音首字母大写&lt;/li&gt; &#xA;   &lt;li&gt;pinyinAll &lt;em&gt;string&lt;/em&gt;： 昵称拼音全&lt;/li&gt; &#xA;   &lt;li&gt;type1 &lt;em&gt;uint64&lt;/em&gt;： 用户类别1&lt;/li&gt; &#xA;   &lt;li&gt;type2 &lt;em&gt;uint64&lt;/em&gt;： 用户类别2&lt;/li&gt; &#xA;   &lt;li&gt;wxid &lt;em&gt;string&lt;/em&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;total &lt;em&gt;uint64&lt;/em&gt;： 通讯录成员总数&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h5&gt;2.2.1.4、发送文本消息&lt;/h5&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;对于群聊组消息发送支持艾特&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;strong&gt;协议信息&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;POST /sendtxtmsg&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;别名&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;/sendTxtMsg /send-txt-msg /send_txt_msg&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;请求字段&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;wxid &lt;em&gt;string&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;content &lt;em&gt;string&lt;/em&gt;：发送消息内容（如果是群聊组消息并需要发送艾特时，&lt;strong&gt;此content字段中需要有对应数量的&lt;code&gt;@[自定义被艾特人的昵称，不得少于2个字符] [每个艾特后都需要一个空格以进行分隔（包括最后一个艾特！）]&lt;/code&gt;，这一点很重要！ 如果您不理解，请继续看下面的Tips！&lt;/strong&gt;）&lt;/li&gt; &#xA; &lt;li&gt;[atlist] &lt;em&gt;array&amp;lt;string&amp;gt;&lt;/em&gt;：如果是群聊组消息并需要发送艾特时，此字段是一个被艾特人的数组&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Tips：如果是群聊艾特消息，那么&lt;code&gt;content&lt;/code&gt;字段中的&lt;code&gt;@&lt;/code&gt;艾特符号数量需要和&lt;code&gt;atlist&lt;/code&gt;中的被艾特人数组长度一致，简单来说，就是&lt;code&gt;atlist&lt;/code&gt;中有多少个被艾特人的&lt;code&gt;wxid&lt;/code&gt;，那么&lt;code&gt;content&lt;/code&gt;字段中就需要有多少个艾特组合，位置随意，例如：&lt;/strong&gt; &lt;code&gt;{&#34;wxid&#34;: &#34;xx@chatroom&#34;, &#34;content&#34;: &#34;这里@11 只是@22 想告诉你@33 每个被艾特人的位置并不重要&#34;, &#34;atlist&#34;: [&#34;wxid_a&#34;, &#34;wxid_b&#34;, &#34;wxid_c&#34;]}&lt;/code&gt; &lt;strong&gt;每个被艾特人在&lt;code&gt;content&lt;/code&gt;中 固定为&lt;code&gt;@[至少两个字符的被艾特人名] + 一个空格&lt;/code&gt;！&lt;/strong&gt; &lt;strong&gt;如果是发送&lt;code&gt;@所有人&lt;/code&gt;消息，那么请在&lt;code&gt;atlist&lt;/code&gt;字段中仅传入一个&lt;code&gt;notify@all&lt;/code&gt;字符串，&lt;code&gt;content&lt;/code&gt;字段中仅包含一个&lt;code&gt;@符号规范（最少两字符+一个空格）&lt;/code&gt;， 一般建议是&lt;code&gt;@所有人&lt;/code&gt;见名知意&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;响应示例&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;{&#34;code&#34;:200,&#34;msg&#34;:&#34;success&#34;}&lt;/p&gt; &#xA;&lt;h5&gt;2.2.1.5、发送图片消息&lt;/h5&gt; &#xA;&lt;p&gt;&lt;strong&gt;协议信息&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;POST /sendimgmsg&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;别名&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;/sendImgMsg /send-img-msg /send_img_msg /sendimagemsg /sendImageMsg /send-image-msg /send_image_msg&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;支持JSON和form-data表单两种方式提交&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;strong&gt;请求头&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;JSON：&lt;code&gt;Content-Type: application/json&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;form-data表单：&lt;code&gt;Content-Type: multipart/form-data&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;请求字段&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;JSON：&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;wxid &lt;em&gt;string&lt;/em&gt;&lt;/li&gt; &#xA;   &lt;li&gt;path &lt;em&gt;string&lt;/em&gt;：图片路径（注意，这里的图片路径是bot登陆系统的路径！）&lt;/li&gt; &#xA;   &lt;li&gt;image &lt;em&gt;string&lt;/em&gt;： 图片二进制数据base64编码后字符串 &lt;strong&gt;（不需要加 &lt;code&gt;data:image/jpeg;base64,&lt;/code&gt; 前缀）&lt;/strong&gt;&lt;/li&gt; &#xA;   &lt;li&gt;clear &lt;em&gt;bool&lt;/em&gt;： 指定图片发送后是否需要删除，默认删除 &lt;strong&gt;（需要注意的是，图片文件保存后并没有后缀，这意味着如果您需要查看历史发送图片，那么您需要至&lt;code&gt;[微信根目录]/temp&lt;/code&gt;自行查看判断图片格式并添加后缀）&lt;/strong&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;form-data表单&lt;/strong&gt; 符合标准&lt;code&gt;form-data&lt;/code&gt;数据格式，需要参数分别是&lt;code&gt;wxid&lt;/code&gt;、&lt;code&gt;path&lt;/code&gt;和&lt;code&gt;image&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;code&gt;path&lt;/code&gt;和&lt;code&gt;image&lt;/code&gt;二选一即可，当&lt;code&gt;path&lt;/code&gt;和&lt;code&gt;image&lt;/code&gt;同时存在时，&lt;code&gt;path&lt;/code&gt;优先&lt;/p&gt; &#xA;&lt;h5&gt;2.2.1.6、发送文件消息&lt;/h5&gt; &#xA;&lt;p&gt;&lt;strong&gt;协议信息&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;POST /sendfilemsg&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;别名&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;/sendFileMsg /send-file-msg /send_file_msg&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;支持JSON和form-data表单两种方式提交&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;strong&gt;请求头&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;JSON：&lt;code&gt;Content-Type: application/json&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;form-data表单：&lt;code&gt;Content-Type: multipart/form-data&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;请求字段&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;JSON：&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;wxid &lt;em&gt;string&lt;/em&gt;&lt;/li&gt; &#xA;   &lt;li&gt;path &lt;em&gt;string&lt;/em&gt;：文件路径（注意，这里的文件路径是bot登陆系统的路径！）&lt;/li&gt; &#xA;   &lt;li&gt;file &lt;em&gt;string&lt;/em&gt;： 文件二进制数据base64编码后字符串&lt;/li&gt; &#xA;   &lt;li&gt;filename &lt;em&gt;string&lt;/em&gt;： 文件名&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;form-data表单&lt;/strong&gt; 符合标准&lt;code&gt;form-data&lt;/code&gt;数据格式，需要参数分别是&lt;code&gt;wxid&lt;/code&gt;、&lt;code&gt;path&lt;/code&gt;和&lt;code&gt;image&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Tips：&lt;/strong&gt; 当文件大小大于&lt;code&gt;5M&lt;/code&gt;时则建议使用&lt;code&gt;path&lt;/code&gt;文件路径的方式传参，但这并不意味着&lt;code&gt;file&lt;/code&gt;不支持大文件发送，只是它需要更久的调用时间，可能是分钟级！&lt;code&gt;path&lt;/code&gt;和&lt;code&gt;file&lt;/code&gt;二选一即可，当&lt;code&gt;path&lt;/code&gt;和&lt;code&gt;file&lt;/code&gt;同时存在时，&lt;code&gt;path&lt;/code&gt;优先，当使用&lt;code&gt;JSON&lt;/code&gt;格式和&lt;code&gt;file&lt;/code&gt;参数直接传递文件数据时&lt;code&gt;filename&lt;/code&gt;是必填项！&lt;/p&gt; &#xA;&lt;h4&gt;2.2.1.7、获取群聊组信息&lt;/h4&gt; &#xA;&lt;p&gt;&lt;strong&gt;协议信息&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;同时支持GET和POST&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;GET /chatroom?wxid=xxxx&amp;amp;account=true POST /chatroom&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;别名&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;/chatRoom /chat-room /chat_room&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;请求字段&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;JSON：&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;wxid &lt;em&gt;string&lt;/em&gt;&lt;/li&gt; &#xA;   &lt;li&gt;accoun &lt;em&gt;bool&lt;/em&gt;：为 &lt;code&gt;true&lt;/code&gt; 时输出中会将每个成员的微信昵称反查带出&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;响应字段&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;admin1 &lt;em&gt;string&lt;/em&gt;：群聊组管理员&lt;/li&gt; &#xA; &lt;li&gt;admin2 &lt;em&gt;string&lt;/em&gt;：一般同上&lt;/li&gt; &#xA; &lt;li&gt;adminNickname &lt;em&gt;string&lt;/em&gt;：管理员昵称&lt;/li&gt; &#xA; &lt;li&gt;notice &lt;em&gt;string&lt;/em&gt;： 群公告&lt;/li&gt; &#xA; &lt;li&gt;pinyinAll &lt;em&gt;string&lt;/em&gt;： 昵称拼音全&lt;/li&gt; &#xA; &lt;li&gt;member &lt;em&gt;array&amp;lt;string&amp;gt;&lt;/em&gt;： 成员wxid列表&lt;/li&gt; &#xA; &lt;li&gt;memberNickname &lt;em&gt;map&amp;lt;string, string&amp;gt;&lt;/em&gt;： 成员群聊昵称（MAP类型）&lt;/li&gt; &#xA; &lt;li&gt;[memberAccount] &lt;em&gt;map&amp;lt;string, Object&amp;gt;&lt;/em&gt;： 当请求参数中&lt;code&gt;account&lt;/code&gt;为&lt;code&gt;true&lt;/code&gt;时存在此字段，map类型，成员微信昵称，value是一个对象，字段为&lt;code&gt;wxid反查昵称的所有字段&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;xml&lt;/li&gt; &#xA; &lt;li&gt;wxid&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;2.2.1.8、WXID反查微信昵称&lt;/h4&gt; &#xA;&lt;p&gt;&lt;strong&gt;协议信息&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;同时支持GET和POST&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;GET /accountbywxid?wxid=xxxx POST /accountbywxid&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;别名&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;/accountByWxid /account-by-wxid /account_by_wxid&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;请求字段&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;JSON：&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;wxid &lt;em&gt;string&lt;/em&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;响应字段&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;customAccount &lt;em&gt;string&lt;/em&gt;：微信号&lt;/li&gt; &#xA; &lt;li&gt;nickname &lt;em&gt;string&lt;/em&gt;：微信昵称&lt;/li&gt; &#xA; &lt;li&gt;pinyin &lt;em&gt;string&lt;/em&gt;：拼音&lt;/li&gt; &#xA; &lt;li&gt;pinyinAll &lt;em&gt;string&lt;/em&gt;：拼音全&lt;/li&gt; &#xA; &lt;li&gt;profilePicture &lt;em&gt;string&lt;/em&gt;：头像链接&lt;/li&gt; &#xA; &lt;li&gt;profilePictureSmall &lt;em&gt;string&lt;/em&gt;：小头像（群聊组仅有小头像，没有&lt;code&gt;profilePicture&lt;/code&gt;）&lt;/li&gt; &#xA; &lt;li&gt;v3 &lt;em&gt;string&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;wxid &lt;em&gt;string&lt;/em&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;2.2.1.9、发送卡片消息&lt;/h4&gt; &#xA;&lt;p&gt;&lt;strong&gt;协议信息&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;POST /sendcardmsg&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;别名&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;/sendCardMsg /send-card-msg /send_card_msg&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;请求字段&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;JSON/form-data：&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;wxid &lt;em&gt;string&lt;/em&gt;&lt;/li&gt; &#xA;   &lt;li&gt;title &lt;em&gt;string&lt;/em&gt;：卡片标题&lt;/li&gt; &#xA;   &lt;li&gt;url &lt;em&gt;string&lt;/em&gt;：卡片链接&lt;/li&gt; &#xA;   &lt;li&gt;[digest &lt;em&gt;string&lt;/em&gt;]：卡片简介&lt;/li&gt; &#xA;   &lt;li&gt;[image &lt;em&gt;string&lt;/em&gt;]：卡片右侧小图（传url）&lt;/li&gt; &#xA;   &lt;li&gt;[subscriptionAccountId &lt;em&gt;string&lt;/em&gt;]：订阅号id &lt;strong&gt;此字段在高级版中支持&lt;/strong&gt;&lt;/li&gt; &#xA;   &lt;li&gt;[subscriptionAccountName &lt;em&gt;string&lt;/em&gt;]：订阅号昵称 &lt;strong&gt;此字段在高级版中支持&lt;/strong&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h5&gt;2.2.1.10、卸载&lt;/h5&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;这个接口是用来卸载已注入的 &lt;code&gt;wxbot.dll&lt;/code&gt;，而不关闭微信，可以算是 &lt;code&gt;injector.exe -u&lt;/code&gt; 的平替&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;strong&gt;协议信息&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;GET /close&lt;/p&gt; &#xA;&lt;h4&gt;2.2.2、回调注册类&lt;/h4&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;目前仅用来同步微信消息&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;strong&gt;响应字段&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;wxid &lt;em&gt;string&lt;/em&gt;： 发送消息的消息人/群聊组wxid&lt;/li&gt; &#xA; &lt;li&gt;customAccount &lt;em&gt;string&lt;/em&gt;： 发送消息的消息人微信号（如果是群聊组此字段为空）&lt;/li&gt; &#xA; &lt;li&gt;nickname &lt;em&gt;string&lt;/em&gt;：发送消息的消息人/群聊组昵称&lt;/li&gt; &#xA; &lt;li&gt;content &lt;em&gt;string&lt;/em&gt;： 消息内容&lt;/li&gt; &#xA; &lt;li&gt;toUser &lt;em&gt;string&lt;/em&gt;： 消息接收人（一般为登陆用户wxid）&lt;/li&gt; &#xA; &lt;li&gt;msgid &lt;em&gt;uint64&lt;/em&gt;： 消息唯一标识&lt;/li&gt; &#xA; &lt;li&gt;originMsg &lt;em&gt;string&lt;/em&gt;： 原始消息（如：wxid:\nxxxxxxx）&lt;/li&gt; &#xA; &lt;li&gt;chatRoomSourceWxid &lt;em&gt;string&lt;/em&gt;： 如果为群聊消息，则为消息发送人wxid&lt;/li&gt; &#xA; &lt;li&gt;chatRoomSourceCustomAccount &lt;em&gt;string&lt;/em&gt;： 如果为群聊消息，则为消息发送人微信号&lt;/li&gt; &#xA; &lt;li&gt;chatRoomSourceNickname &lt;em&gt;string&lt;/em&gt;： 如果为群聊消息，则为消息发送人微信昵称&lt;/li&gt; &#xA; &lt;li&gt;msgSource &lt;em&gt;string&lt;/em&gt;： 加密消息&lt;/li&gt; &#xA; &lt;li&gt;type &lt;em&gt;uint32&lt;/em&gt;： 消息类型&lt;/li&gt; &#xA; &lt;li&gt;displayMsg &lt;em&gt;string&lt;/em&gt;： 展示消息（一般群聊消息下可用）&lt;/li&gt; &#xA; &lt;li&gt;[imgData] &lt;em&gt;string&lt;/em&gt;： base64后的图片数据字符串&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Tips：当&lt;code&gt;type&lt;/code&gt;为&lt;code&gt;3&lt;/code&gt;时表示当次消息是图片消息，本次消息中会新增&lt;code&gt;imgData&lt;/code&gt;字段&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h5&gt;2.2.2.1、websocket协议消息&lt;/h5&gt; &#xA;&lt;p&gt;&lt;strong&gt;协议信息&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;GET ws://xxxxx/ws&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;websocket没什么好说的，基本上第三方库都有直接可用的实现，协议升级后就是一条全双工通道，目前只用来接收同步微信的实时消息，不要发送消息到服务端，服务端不会响应。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h5&gt;2.2.2.2、http协议&lt;/h5&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;需要你自己起一个Http Server服务用来接收微信的实时消息，你自己的Http Server启动之后通过接口注册到wxbot即可&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h5&gt;2.2.2.2.1、注册接口&lt;/h5&gt; &#xA;&lt;p&gt;POST /syncurl&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;别名&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;/syncUrl /sync-url /sync_url&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;请求字段&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;url： 你自己启动的Http Server地址路由（&lt;strong&gt;ip:port/[subpath]&lt;/strong&gt;）&lt;/li&gt; &#xA; &lt;li&gt;timeout： 超时时间（当有一条新消息通过wxbot发送到你的回调地址时的最长连接等待时间）&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h5&gt;2.2.2.2.2、获取已注册接口列表&lt;/h5&gt; &#xA;&lt;p&gt;GET /syncurl&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;别名&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;/syncUrl /sync-url /sync_url&lt;/p&gt; &#xA;&lt;h5&gt;2.2.2.2.3、删除接口&lt;/h5&gt; &#xA;&lt;p&gt;DELETE /syncurl&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;别名&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;/syncUrl /sync-url /sync_url&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;请求字段&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;url： 已注册的Http Server地址（&lt;strong&gt;ip:port/[subpath]&lt;/strong&gt;）&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;2.3、接口使用例子&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Windows&lt;/strong&gt; &lt;strong&gt;所有&lt;code&gt;powershell&lt;/code&gt;或者是使用&lt;code&gt;cmd&lt;/code&gt;测试发送的例子都可能有编码问题！建议直接用程序测试！&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;# 发送文本&#xA;curl -Method POST -Body &#39;{&#34;wxid&#34;:&#34;47331170911@chatroom&#34;, &#34;content&#34;: &#34;测试内容\nhello world!&#34;}&#39; http://127.0.0.1:8080/sendtxtmsg&#xA;&#xA;# 发送图片&#xA;curl -Method POST -ContentType &#34;application/json&#34; -Body &#39;{&#34;wxid&#34;:&#34;47331170911@chatroom&#34;, &#34;path&#34;: &#34;D:\\gopath\\wxbot\\测试.txt&#34;}&#39; http://127.0.0.1:8080/sendfilemsg&#xA;&#xA;# 发送卡片消息（例子仅仅是卡片消息，订阅号消息等待高级版支持）&#xA;curl -Method POST -ContentType &#34;application/json&#34; -Body &#39;{&#34;wxid&#34;: &#34;47331170911@chatroom&#34;, &#34;title&#34;: &#34;测试标题&#34;, &#34;url&#34;: &#34;https://www.baidu.com&#34;}&#39; http://127.0.0.1:8080/sendcardmsg&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Linux&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# 获取登陆用户信息&#xA;curl 127.0.0.1:8080/userinfo&#xA;&#xA;# 获取通讯录信息&#xA;curl 127.0.0.1:8080/contacts&#xA;&#xA;# 发送文本消息&#xA;curl -XPOST -d&#39;{&#34;wxid&#34;: &#34;47331170911@chatroom&#34;, &#34;content&#34;: &#34;测试内容\nHello World&#34;}&#39; 127.0.0.1:8080/sendtxtmsg&#xA;&#xA;# 发送图片消息1（使用form-data表单方式提交）&#xA;curl -XPOST -F &#34;wxid=47331170911@chatroom&#34; -F &#34;image=@/home/jwping/1.jpg&#34; 127.0.0.1:8080/sendimgmsg&#xA;# 发送图片消息2（使用json方式提交）&#xA;curl -XPOST -H &#34;Content-Type: application/json&#34; -d&#39;{&#34;wxid&#34;: &#34;47331170911@chatroom&#34;, &#34;image&#34;: &#34;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&#34;}&#39; 127.0.0.1:8080/sendimgmsg&#xA;&#xA;# 发送文件消息1（使用form-data表单方式提交）&#xA;curl -XPOST -F &#34;wxid=47331170911@chatroom&#34; -F &#34;file=@/home/jwping/1.txt&#34; 127.0.0.1:8080/sendfilemsg&#xA;# 发送文件消息2（使用json方式提交）&#xA;curl -XPOST -H &#34;Content-Type: application/json&#34; -d&#39;{&#34;wxid&#34;: &#34;47331170911@chatroom&#34;, &#34;filename&#34;: &#34;1.txt&#34;, &#34;file&#34;: &#34;aGVsbG8gd29ybGQh&#34;}&#39; 127.0.0.1:8080/sendfilemsg&#xA;&#xA;# 发送卡片消息&#xA;curl -XPOST -d&#39;{&#34;wxid&#34;: &#34;47331170911@chatroom&#34;, &#34;title&#34;: &#34;测试标题&#34;, &#34;url&#34;: &#34;www.baidu.com&#34;}&#39; 127.0.0.1:8080/sendcardmsg&#xA;&#xA;# 注册ws回调&#xA;# 使用任意程序websocket客户端连接127.0.0.1:8080/ws&#xA;&#xA;# 注册http回调（http协议头不能少！）&#xA;curl -XPOST -d&#39;{&#34;url&#34;: &#34;http://127.0.0.1:8081/callback&#34;, &#34;timeout&#34;: 6000}&#39; 127.0.0.1:8080/sync-url&#xA;&#xA;# 获取当前已注册的http回调&#xA;curl 127.0.0.1:8080/sync-url&#xA;&#xA;# 删除一个已注册的http回调&#xA;curl -XDELETE -d&#39;{&#34;url&#34;: &#34;http://127.0.0.1:8081/callback&#34;}&#39; 127.0.0.1:8080/sync-url&#xA;&#xA;&#xA;# 同步消息回调响应例子（回调消息为JSON格式）&#xA;# 下面例子为反序列化后输出&#xA;# WebSocket Client Response&#xA;{Wxid:34418372934@chatroom Content:你好 ToUser:wxid_gotub49l54fq29 Msgid:7438040783824576403 OriginMsg:wxid_o4jinvsgz6lp31:&#xA;你好 ChatRoomSourceWxid:wxid_o4jinvsgz6lp31 MsgSource:&amp;lt;msgsource&amp;gt;&#xA;        &amp;lt;pua&amp;gt;1&amp;lt;/pua&amp;gt;&#xA;        &amp;lt;silence&amp;gt;1&amp;lt;/silence&amp;gt;&#xA;        &amp;lt;membercount&amp;gt;193&amp;lt;/membercount&amp;gt;&#xA;        &amp;lt;signature&amp;gt;v1_8TXCDRkh&amp;lt;/signature&amp;gt;&#xA;        &amp;lt;tmp_node&amp;gt;&#xA;                &amp;lt;publisher-id&amp;gt;&amp;lt;/publisher-id&amp;gt;&#xA;        &amp;lt;/tmp_node&amp;gt;&#xA;&amp;lt;/msgsource&amp;gt;&#xA; Type:1 DisplayMsg:}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;3、赞助码&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;如果觉得本项目对你有帮助，可以打赏一下作者，毕竟开源不易&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/jwping/wxbot/main/public/wechat_collection.jpg&#34; width=&#34;40%&#34;&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/jwping/wxbot/main/public/alipay_collection.jpg&#34; width=&#34;40%&#34;&gt; &#xA;&lt;h2&gt;4、微信多开高级用法&lt;/h2&gt; &#xA;&lt;p&gt;这里仅仅给出一种为每个wxbot指定端口和回调地址等使用思路： 当您使用&lt;code&gt;inject.exe -m&lt;/code&gt;解开微信多开限制后，可以在微信根目录下为每个wxbot生成一个[wxid].json的配置文件，以此来为不同的wxbot定义不同的监听地址，例如：&lt;/p&gt; &#xA;&lt;p&gt;假设您有两个wxid为&lt;code&gt;wxid_a&lt;/code&gt;和&lt;code&gt;wxid_b&lt;/code&gt;的两个微信号希望实现多开注入， 那么您可以在您的微信根目录下分别生成&lt;code&gt;wxid_a.json&lt;/code&gt;和&lt;code&gt;wxid_b.json&lt;/code&gt;两个配置文件：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;# wxid_a.json配置文件内容如下：&#xA;{&#34;addr&#34;: &#34;0.0.0.0:8080&#34;}&#xA;&#xA;# wxid_b.json配置文件内容如下：&#xA;{&#34;addr&#34;: &#34;0.0.0.0:8081&#34;}&#xA;&#xA;# 配置文件生成好之后，您可以使用注入器对两个微信bot分次注入&#xA;# 第一次注入&#xA;inject.exe -p [wxid_a的微信PID]&#xA;&#xA;# 第二次注入&#xA;inject.exe -p [wxid_b的微信PID]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;至此，您就完成了对两个微信号的注入，并且这两个wxbot分别监听在&lt;code&gt;8080&lt;/code&gt;和&lt;code&gt;8081&lt;/code&gt;端口 其中&lt;code&gt;wxid_a&lt;/code&gt;监听在&lt;code&gt;8080&lt;/code&gt;端口 其中&lt;code&gt;wxid_b&lt;/code&gt;监听在&lt;code&gt;8081&lt;/code&gt;端口&lt;/p&gt; &#xA;&lt;h2&gt;5、鉴权&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;当您在配置文件中开启了鉴权之后则 &lt;strong&gt;您后续的每个api请求都需要包含鉴权信息！&lt;/strong&gt; 这里使用的是&lt;code&gt;Http Basic Authentication&lt;/code&gt;，您可以先百度去了解一下它，当然，如果您不想了解也没关系，因为它真的很简单&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;# 假设您定义一个如下用户：&#xA;{&#xA;    &#34;user&#34;: &#34;user2&#34;,&#xA;    &#34;password&#34;: &#34;321&#34;,&#xA;    &#34;token&#34;: &#34;token321&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;那么您需要在您后续的每次请求的请求头中加上&lt;code&gt;Authorization&lt;/code&gt;字段：&lt;code&gt;Authorization: Basic base64(username:password)&lt;/code&gt; 例如用curl命令请求的话，它可能长这样：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -H &#34;Authorization: Basic dXNlcjI6MzIx&#34; 127.0.0.1:8080/login -v&#xA;&#xA;# response：&#xA;{&#34;code&#34;:200,&#34;data&#34;:{&#34;token&#34;:&#34;token321&#34;,&#34;user&#34;:&#34;user2&#34;},&#34;msg&#34;:null}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;这里&lt;strong&gt;引入了一个新的路由&lt;code&gt;/login&lt;/code&gt;&lt;/strong&gt;，但我并不想将他写到上面的路由列表中，因为它真的没什么用，仅仅是在您登陆成功之后返回一个当前的登陆用户名和&lt;code&gt;token&lt;/code&gt; &lt;strong&gt;您在以后每个请求都加上&lt;code&gt;Authorization: Basic dXNlcjI6MzIx&lt;/code&gt;这个请求头就可以了！&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;如果您希望使用&lt;code&gt;cookie&lt;/code&gt;的方式，那么您可以在&lt;code&gt;cookie&lt;/code&gt;中指定&lt;code&gt;token&lt;/code&gt; 例如，您也可以这样做：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl --cookie &#34;access_token=token321&#34; 127.0.0.1:8080/userinfo -v&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;如果您不想用设置请求头的方式，那么您也可以在后续的所有请求的&lt;code&gt;cookie&lt;/code&gt;中指定&lt;code&gt;access_token&lt;/code&gt;字段即可。&lt;/strong&gt; &lt;em&gt;实际上&lt;code&gt;cookie&lt;/code&gt;也是&lt;code&gt;request header&lt;/code&gt;中的一个字段&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;6、wxbox.dll、注入器、可用版本微信安装包等获取&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;阿里网盘：&lt;/strong&gt; &lt;a href=&#34;https://www.aliyundrive.com/s/4eiNnE4hp4n&#34;&gt;https://www.aliyundrive.com/s/4eiNnE4hp4n&lt;/a&gt; 提取码: rt25&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;百度网盘：&lt;/strong&gt; &lt;a href=&#34;https://pan.baidu.com/s/1cmzXe8AxYvzXWW2WTVCdxQ?pwd=l671&#34;&gt;https://pan.baidu.com/s/1cmzXe8AxYvzXWW2WTVCdxQ?pwd=l671&lt;/a&gt; 提取码：l671&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;7、交流&lt;/h2&gt; &#xA;&lt;p&gt;请添加微信：&lt;strong&gt;Anshan_PL&lt;/strong&gt;，备注 &lt;strong&gt;wxbot&lt;/strong&gt; 拉微信交流群 &lt;strong&gt;Tips：此群仅限学习和交流，无其他用处&lt;/strong&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>google/generative-ai-go</title>
    <updated>2023-12-17T01:35:35Z</updated>
    <id>tag:github.com,2023-12-17:/google/generative-ai-go</id>
    <link href="https://github.com/google/generative-ai-go" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Go SDK for Google Generative AI&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Google AI Go SDK&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/google/generative-ai-go/actions/workflows/go.yml/badge.svg?event=push&#34; alt=&#34;Go&#34;&gt; &lt;a href=&#34;https://pkg.go.dev/github.com/google/generative-ai-go&#34;&gt;&lt;img src=&#34;https://pkg.go.dev/badge/github.com/google/generative-ai-go.svg?sanitize=true&#34; alt=&#34;Go Reference&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The Google AI Go SDK enables developers to use Google&#39;s state-of-the-art generative AI models (like Gemini) to build AI-powered features and applications. This SDK supports use cases like:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Generate text from text-only input&lt;/li&gt; &#xA; &lt;li&gt;Generate text from text-and-images input (multimodal)&lt;/li&gt; &#xA; &lt;li&gt;Build multi-turn conversations (chat)&lt;/li&gt; &#xA; &lt;li&gt;Embedding&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Try out the API&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://makersuite.google.com/app/apikey&#34;&gt;Obtain an API key&lt;/a&gt; to use with the Google AI SDKs.&lt;/li&gt; &#xA; &lt;li&gt;Add the SDK to your module with &lt;code&gt;go get github.com/google/generative-ai-go&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Follow &lt;a href=&#34;https://pkg.go.dev/github.com/google/generative-ai-go/genai#pkg-examples&#34;&gt;the examples&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;The documentation of th Google AI Go SDK is &lt;a href=&#34;https://pkg.go.dev/github.com/google/generative-ai-go/genai&#34;&gt;on pkg.go.dev&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Find complete documentation for the Google AI SDKs and the Gemini model in the Google documentation: &lt;a href=&#34;https://ai.google.dev/docs&#34;&gt;https://ai.google.dev/docs&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/google/generative-ai-go/raw/main/CONTRIBUTING.md&#34;&gt;Contributing&lt;/a&gt; for more information on contributing to the Google AI Go SDK.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The contents of this repository are licensed under the &lt;a href=&#34;http://www.apache.org/licenses/LICENSE-2.0&#34;&gt;Apache License, version 2.0&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>