<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-07-06T01:30:42Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>screego/server</title>
    <updated>2024-07-06T01:30:42Z</updated>
    <id>tag:github.com,2024-07-06:/screego/server</id>
    <link href="https://github.com/screego/server" rel="alternate"></link>
    <summary type="html">&lt;p&gt;screen sharing for developers https://screego.net/&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://screego.net&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/screego/server/master/docs/logo.png&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;h1 align=&#34;center&#34;&gt;screego/server&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;i&gt;screen sharing for developers&lt;/i&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/screego/server/actions?query=workflow%3Abuild&#34;&gt; &lt;img alt=&#34;Build Status&#34; src=&#34;https://github.com/screego/server/workflows/build/badge.svg?sanitize=true&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/screego/server/pkgs/container/server&#34;&gt; &lt;img alt=&#34;Build Status&#34; src=&#34;https://img.shields.io/badge/dynamic/json?url=https%3A%2F%2Fraw.githubusercontent.com%2Fipitio%2Fghcr-pulls%2Fmaster%2Findex.json&amp;amp;query=%24%5B%3F(%40.owner%3D%3D%22screego%22%20%26%26%20%40.repo%3D%3D%22server%22%20%26%26%20%40.image%3D%3D%22server%22)%5D.pulls&amp;amp;logo=github&amp;amp;label=pulls&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/screego/server&#34;&gt; &lt;img alt=&#34;Go Report Card&#34; src=&#34;https://goreportcard.com/badge/github.com/screego/server&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/screego/server&#34;&gt; &lt;img alt=&#34;Docker Pulls&#34; src=&#34;https://img.shields.io/docker/pulls/screego/server.svg?sanitize=true&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/screego/server/releases/latest&#34;&gt; &lt;img alt=&#34;latest release&#34; src=&#34;https://img.shields.io/github/release/screego/server.svg?sanitize=true&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Intro&lt;/h2&gt; &#xA;&lt;p&gt;In the past I&#39;ve had some problems sharing my screen with coworkers using corporate chatting solutions like Microsoft Teams. I wanted to show them some of my code, but either the stream lagged several seconds behind or the quality was so poor that my colleagues couldn&#39;t read the code. Or both.&lt;/p&gt; &#xA;&lt;p&gt;That&#39;s why I created screego. It allows you to share your screen with good quality and low latency. Screego is an addition to existing software and only helps to share your screen. Nothing else (:.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Multi User Screenshare&lt;/li&gt; &#xA; &lt;li&gt;Secure transfer via WebRTC&lt;/li&gt; &#xA; &lt;li&gt;Low latency / High resolution&lt;/li&gt; &#xA; &lt;li&gt;Simple Install via Docker / single binary&lt;/li&gt; &#xA; &lt;li&gt;Integrated TURN Server see &lt;a href=&#34;https://screego.net/#/nat-traversal&#34;&gt;NAT Traversal&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://app.screego.net/&#34;&gt;Demo / Public Instance&lt;/a&gt; ᛫ &lt;a href=&#34;https://screego.net/#/install&#34;&gt;Installation&lt;/a&gt; ᛫ &lt;a href=&#34;https://screego.net/#/config&#34;&gt;Configuration&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Versioning&lt;/h2&gt; &#xA;&lt;p&gt;We use &lt;a href=&#34;http://semver.org/&#34;&gt;SemVer&lt;/a&gt; for versioning. For the versions available, see the &lt;a href=&#34;https://github.com/screego/server/tags&#34;&gt;tags on this repository&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>allora-network/allora-chain</title>
    <updated>2024-07-06T01:30:42Z</updated>
    <id>tag:github.com,2024-07-06:/allora-network/allora-chain</id>
    <link href="https://github.com/allora-network/allora-chain" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Node software to run the Allora Network&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Allora Network&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/allora-network/allora-chain/main/assets/AlloraLogo.jpeg&#34; width=&#34;200&#34;&gt; &lt;a href=&#34;https://goreportcard.com/badge/github.com/allora-network/allora-chain&#34;&gt; &lt;img src=&#34;https://goreportcard.com/badge/github.com/allora-network/allora-chain&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/badge/Docker-2CA5E0?style=for-the-badge&amp;amp;logo=docker&amp;amp;logoColor=white&#34; alt=&#34;Docker!&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Go-00ADD8?style=for-the-badge&amp;amp;logo=go&amp;amp;logoColor=white&#34; alt=&#34;Go!&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Apache%20License-D22128?style=for-the-badge&amp;amp;logo=Apache&amp;amp;logoColor=white&#34; alt=&#34;Apache License&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The Allora Network is a state-of-the-art protocol that uses decentralized AI and machine learning (ML) to build, extract, and deploy predictions among its participants. It offers actors who wish to use AI predictions a formalized way to obtain the output of state-of-the-art ML models on-chain and to pay the operators of AI/ML nodes who create these predictions. That way, Allora bridges the information gap between data owners, data processors, AI/ML predictors, market analysts, and the end-users or consumers who have the means to execute on these insights.&lt;/p&gt; &#xA;&lt;p&gt;The AI/ML agents within the Allora Network use their data and algorithms to broadcast their predictions across a peer-to-peer network, and they ingest these predictions to assess the predictions from all other agents. The network consensus mechanism combines these predictions and assessments, and distributes rewards to the agents according to the quality of their predictions and assessments. This carefully designed incentive mechanism enables Allora to continually learn and improve, adjusting to the market as it evolves.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;For the latest documentation, please go to &lt;a href=&#34;https://docs.allora.network/&#34;&gt;https://docs.allora.network/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Allorad Install&lt;/h2&gt; &#xA;&lt;p&gt;Binary can be Installed for Linux or Mac (check releases for Windows)&lt;/p&gt; &#xA;&lt;p&gt;Specify a version to install if desired.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -sSL https://raw.githubusercontent.com/allora-network/allora-chain/main/install.sh | bash -s -- v0.0.8&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Ensure &lt;code&gt;~/.local/bin&lt;/code&gt; is in your PATH.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;allorad&lt;/code&gt; will be available.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone -b &amp;lt;latest-release-tag&amp;gt; https://github.com/allora-network/allora-chain.git&#xA;cd allora-chain &amp;amp;&amp;amp; make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: Depending on your &lt;code&gt;go&lt;/code&gt; setup you may need to add &lt;code&gt;$GOPATH/bin&lt;/code&gt; to your &lt;code&gt;$PATH&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;export PATH=$PATH:$(go env GOPATH)/bin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Run a Local Network&lt;/h2&gt; &#xA;&lt;p&gt;To run a local node for testing purposes, execute the following commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make init&#xA;allorad start&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Run a node&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;scripts/l1_node.sh&lt;/code&gt;, you will see the log in the output of the script.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;NOTE:&lt;/em&gt; &lt;code&gt;scripts/l1_node.sh&lt;/code&gt; will generate keys for the node. For production environments you need to use a proper keys storage, and follow secrets management best practices.&lt;/p&gt; &#xA;&lt;h2&gt;Run a node with docker compose&lt;/h2&gt; &#xA;&lt;h3&gt;Run&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker compose pull&#xA;docker compose up&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;run &lt;code&gt;docker compose up -d&lt;/code&gt; to run detached.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;NOTE:&lt;/em&gt; Don&#39;t forget to pull the images first, to ensure that you&#39;re using the latest images.&lt;/p&gt; &#xA;&lt;h3&gt;See logs&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;docker compose logs -f&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Call the node&lt;/h2&gt; &#xA;&lt;p&gt;After the node is running you can exec RPC calls to it.&lt;/p&gt; &#xA;&lt;p&gt;For instance, check its status: &lt;code&gt;curl -so- http://localhost:26657/status | jq .&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;With &lt;code&gt;curl -so- http://localhost:26657/status | jq .result.sync_info.catching_up&lt;/code&gt; you can check if the node syncing or not.&lt;/p&gt; &#xA;&lt;h2&gt;Run a validator&lt;/h2&gt; &#xA;&lt;p&gt;You can refer to the Allora documentation for detailled instructions on &lt;a href=&#34;https://docs.allora.network/docs/running-a-full-node&#34;&gt;running a full node&lt;/a&gt; and &lt;a href=&#34;https://docs.allora.network/docs/stake-a-validator&#34;&gt;staking a validator&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Run and sync a full Allora node following &lt;a href=&#34;https://docs.allora.network/docs/running-a-full-node&#34;&gt;the instructions&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Wait until the node is fully synced&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Verify that your node has finished synching and it is caught up with the network:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;curl -so- http://localhost:26657/status | jq .result.sync_info.catching_up&lt;/code&gt; Wait until you see the output: &#34;false&#34;&lt;/p&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Fund account.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;code&gt;l1_node.sh&lt;/code&gt; script generates keys, you can find created account information in &lt;code&gt;data/*.account_info&lt;/code&gt;. Get the address from the file and fund, on testnets you can use faucet &lt;code&gt;https://faucet.${NETWORK}.allora.network&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;Stake validator (detailled instructions &lt;a href=&#34;https://docs.allora.network/docs/stake-a-validator&#34;&gt;here&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Here&#39;s an example with Values which starts with a stake of 10000000uallo.&lt;/p&gt; &#xA;&lt;p&gt;All the following command needs to be executed inside the validator container. Run &lt;code&gt;docker compose exec validator0 bash&lt;/code&gt; to get shell of the validator.&lt;/p&gt; &#xA;&lt;p&gt;You can change &lt;code&gt;--moniker=...&lt;/code&gt; with a human readable name you choose for your validator. and &lt;code&gt;--from=&lt;/code&gt; - is the account name in the keyring, you can list all availble keys with &lt;code&gt;allorad --home=$APP_HOME keys --keyring-backend=test list&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Create stake info file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cat &amp;gt; stake-validator.json &amp;lt;&amp;lt; EOF&#xA;{&#xA;    &#34;pubkey&#34;: $(allorad --home=$APP_HOME comet show-validator),&#xA;    &#34;amount&#34;: &#34;1000000uallo&#34;,&#xA;    &#34;moniker&#34;: &#34;validator0&#34;,&#xA;    &#34;commission-rate&#34;: &#34;0.1&#34;,&#xA;    &#34;commission-max-rate&#34;: &#34;0.2&#34;,&#xA;    &#34;commission-max-change-rate&#34;: &#34;0.01&#34;,&#xA;    &#34;min-self-delegation&#34;: &#34;1&#34;&#xA;}&#xA;EOF&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Stake the validator&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;allorad tx staking create-validator ./stake-validator.json \&#xA;    --chain-id=testnet \&#xA;    --home=&#34;$APP_HOME&#34; \&#xA;    --keyring-backend=test \&#xA;    --from=validator0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The command will output tx hash, you can check its status in the explorer: &lt;code&gt;https://explorer.testnet.allora.network:8443/allora-testnet/tx/$TX_HASH&lt;/code&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;5&#34;&gt; &#xA; &lt;li&gt;Verify validator setup&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Check that the validator node is registered and staked&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;VAL_PUBKEY=$(allorad --home=$APP_HOME comet show-validator | jq -r .key)&#xA;allorad --home=$APP_HOME q staking validators -o=json | \&#xA;    jq &#39;.validators[] | select(.consensus_pubkey.value==&#34;&#39;$VAL_PUBKEY&#39;&#34;)&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;this command should return you all the information about the validator. Similar to the following:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;{&#xA;  &#34;operator_address&#34;: &#34;allovaloper1n8t4ffvwstysveuf3ccx9jqf3c6y7kte48qcxm&#34;,&#xA;  &#34;consensus_pubkey&#34;: {&#xA;    &#34;type&#34;: &#34;tendermint/PubKeyEd25519&#34;,&#xA;    &#34;value&#34;: &#34;gOl6fwPc19BtkmiOGjjharfe6eyniaxdkfyqiko3/cQ=&#34;&#xA;  },&#xA;  &#34;status&#34;: 3,&#xA;  &#34;tokens&#34;: &#34;1000000&#34;,&#xA;  &#34;delegator_shares&#34;: &#34;1000000000000000000000000&#34;,&#xA;  &#34;description&#34;: {&#xA;    &#34;moniker&#34;: &#34;val2&#34;&#xA;  },&#xA;  &#34;unbonding_time&#34;: &#34;1970-01-01T00:00:00Z&#34;,&#xA;  &#34;commission&#34;: {&#xA;    &#34;commission_rates&#34;: {&#xA;      &#34;rate&#34;: &#34;100000000000000000&#34;,&#xA;      &#34;max_rate&#34;: &#34;200000000000000000&#34;,&#xA;      &#34;max_change_rate&#34;: &#34;10000000000000000&#34;&#xA;    },&#xA;    &#34;update_time&#34;: &#34;2024-02-26T22:50:31.187119394Z&#34;&#xA;  },&#xA;  &#34;min_self_delegation&#34;: &#34;1&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Check the voting power of your validator node&lt;/h3&gt; &#xA;&lt;p&gt;&lt;em&gt;NOTE:&lt;/em&gt; please allow 30-60 seconds for the output to be updated&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;allorad --home=$APP_HOME status | jq -r &#39;.validator_info.voting_power&#39;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Output should be &amp;gt; 0&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Unstaking/unbounding a validator&lt;/h2&gt; &#xA;&lt;p&gt;If you need to delete a validator from the chain, you just need to unbound the stake.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&#xA;allorad --home=&#34;$APP_HOME&#34; \&#xA;  tx staking unbond ${VALIDATOR_OPERATOR_ADDRESS} \&#xA;  ${STAKE_AMOUNT}uallo --from ${VALIDATOR_ACCOUNT_KEY_NAME} \&#xA;   --keyring-backend=test --chain-id ${NETWORK}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Run Integration Tests&lt;/h2&gt; &#xA;&lt;p&gt;To run integration tests, execute the following commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bash test/local_testnet_l1.sh&#xA;INTEGRATION=TRUE go test -timeout 10m ./test/integration/ -v&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Run Stress Tests&lt;/h2&gt; &#xA;&lt;p&gt;To run stress tests, execute the following commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bash test/local_testnet_l1.sh&#xA;STRESS_TEST=true RPC_MODE=&#34;RandomBasedOnDeterministicSeed&#34; RPC_URLS=&#34;http://localhost:26657,http://localhost:26658,http://localhost:26659&#34; SEED=1 MAX_REPUTERS_PER_TOPIC=2 REPUTERS_PER_ITERATION=2 EPOCH_LENGTH=12 FINAL_REPORT=TRUE MAX_WORKERS_PER_TOPIC=2 WORKERS_PER_ITERATION=1 TOPICS_MAX=2 TOPICS_PER_ITERATION=1 MAX_ITERATIONS=2 go test -v -timeout 0 -test.run TestStressTestSuite ./test/stress&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;options for RPC Modes include &#34;RandomBasedOnDeterministicSeed&#34; &#34;RoundRobin&#34; and &#34;SingleRpc&#34;&lt;/p&gt;</summary>
  </entry>
</feed>