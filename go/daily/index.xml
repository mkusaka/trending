<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-02-09T01:35:38Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>eddycjy/go-gin-example</title>
    <updated>2023-02-09T01:35:38Z</updated>
    <id>tag:github.com,2023-02-09:/eddycjy/go-gin-example</id>
    <link href="https://github.com/eddycjy/go-gin-example" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An example of gin&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Go Gin Example &lt;a href=&#34;https://goreportcard.com/report/github.com/EDDYCJY/go-gin-example&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/EDDYCJY/go-gin-example&#34; alt=&#34;rcard&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://godoc.org/github.com/EDDYCJY/go-gin-example&#34;&gt;&lt;img src=&#34;http://img.shields.io/badge/go-documentation-blue.svg?style=flat-square&#34; alt=&#34;GoDoc&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/EDDYCJY/go-gin-example/master/LICENSE&#34;&gt;&lt;img src=&#34;http://img.shields.io/badge/license-mit-blue.svg?style=flat-square&#34; alt=&#34;License&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;An example of gin contains many useful features&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/EDDYCJY/go-gin-example/raw/master/README_ZH.md&#34;&gt;简体中文&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ go get github.com/EDDYCJY/go-gin-example&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;How to run&lt;/h2&gt; &#xA;&lt;h3&gt;Required&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Mysql&lt;/li&gt; &#xA; &lt;li&gt;Redis&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Ready&lt;/h3&gt; &#xA;&lt;p&gt;Create a &lt;strong&gt;blog database&lt;/strong&gt; and import &lt;a href=&#34;https://github.com/EDDYCJY/go-gin-example/raw/master/docs/sql/blog.sql&#34;&gt;SQL&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Conf&lt;/h3&gt; &#xA;&lt;p&gt;You should modify &lt;code&gt;conf/app.ini&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;[database]&#xA;Type = mysql&#xA;User = root&#xA;Password =&#xA;Host = 127.0.0.1:3306&#xA;Name = blog&#xA;TablePrefix = blog_&#xA;&#xA;[redis]&#xA;Host = 127.0.0.1:6379&#xA;Password =&#xA;MaxIdle = 30&#xA;MaxActive = 30&#xA;IdleTimeout = 200&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Run&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cd $GOPATH/src/go-gin-example&#xA;&#xA;$ go run main.go &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Project information and existing API&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;[GIN-debug] [WARNING] Running in &#34;debug&#34; mode. Switch to &#34;release&#34; mode in production.&#xA; - using env:&#x9;export GIN_MODE=release&#xA; - using code:&#x9;gin.SetMode(gin.ReleaseMode)&#xA;&#xA;[GIN-debug] GET    /auth                     --&amp;gt; github.com/EDDYCJY/go-gin-example/routers/api.GetAuth (3 handlers)&#xA;[GIN-debug] GET    /swagger/*any             --&amp;gt; github.com/EDDYCJY/go-gin-example/vendor/github.com/swaggo/gin-swagger.WrapHandler.func1 (3 handlers)&#xA;[GIN-debug] GET    /api/v1/tags              --&amp;gt; github.com/EDDYCJY/go-gin-example/routers/api/v1.GetTags (4 handlers)&#xA;[GIN-debug] POST   /api/v1/tags              --&amp;gt; github.com/EDDYCJY/go-gin-example/routers/api/v1.AddTag (4 handlers)&#xA;[GIN-debug] PUT    /api/v1/tags/:id          --&amp;gt; github.com/EDDYCJY/go-gin-example/routers/api/v1.EditTag (4 handlers)&#xA;[GIN-debug] DELETE /api/v1/tags/:id          --&amp;gt; github.com/EDDYCJY/go-gin-example/routers/api/v1.DeleteTag (4 handlers)&#xA;[GIN-debug] GET    /api/v1/articles          --&amp;gt; github.com/EDDYCJY/go-gin-example/routers/api/v1.GetArticles (4 handlers)&#xA;[GIN-debug] GET    /api/v1/articles/:id      --&amp;gt; github.com/EDDYCJY/go-gin-example/routers/api/v1.GetArticle (4 handlers)&#xA;[GIN-debug] POST   /api/v1/articles          --&amp;gt; github.com/EDDYCJY/go-gin-example/routers/api/v1.AddArticle (4 handlers)&#xA;[GIN-debug] PUT    /api/v1/articles/:id      --&amp;gt; github.com/EDDYCJY/go-gin-example/routers/api/v1.EditArticle (4 handlers)&#xA;[GIN-debug] DELETE /api/v1/articles/:id      --&amp;gt; github.com/EDDYCJY/go-gin-example/routers/api/v1.DeleteArticle (4 handlers)&#xA;&#xA;Listening port is 8000&#xA;Actual pid is 4393&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Swagger doc&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/bVRLTP4.jpg&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;RESTful API&lt;/li&gt; &#xA; &lt;li&gt;Gorm&lt;/li&gt; &#xA; &lt;li&gt;Swagger&lt;/li&gt; &#xA; &lt;li&gt;logging&lt;/li&gt; &#xA; &lt;li&gt;Jwt-go&lt;/li&gt; &#xA; &lt;li&gt;Gin&lt;/li&gt; &#xA; &lt;li&gt;Graceful restart or stop (fvbock/endless)&lt;/li&gt; &#xA; &lt;li&gt;App configurable&lt;/li&gt; &#xA; &lt;li&gt;Cron&lt;/li&gt; &#xA; &lt;li&gt;Redis&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>kubernetes/sample-controller</title>
    <updated>2023-02-09T01:35:38Z</updated>
    <id>tag:github.com,2023-02-09:/kubernetes/sample-controller</id>
    <link href="https://github.com/kubernetes/sample-controller" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Repository for sample controller. Complements sample-apiserver&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;sample-controller&lt;/h1&gt; &#xA;&lt;p&gt;This repository implements a simple controller for watching Foo resources as defined with a CustomResourceDefinition (CRD).&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; go-get or vendor this package as &lt;code&gt;k8s.io/sample-controller&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This particular example demonstrates how to perform basic operations such as:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;How to register a new custom resource (custom resource type) of type &lt;code&gt;Foo&lt;/code&gt; using a CustomResourceDefinition.&lt;/li&gt; &#xA; &lt;li&gt;How to create/get/list instances of your new resource type &lt;code&gt;Foo&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;How to setup a controller on resource handling create/update/delete events.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;It makes use of the generators in &lt;a href=&#34;https://github.com/kubernetes/code-generator&#34;&gt;k8s.io/code-generator&lt;/a&gt; to generate a typed client, informers, listers and deep-copy functions. You can do this yourself using the &lt;code&gt;./hack/update-codegen.sh&lt;/code&gt; script.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;update-codegen&lt;/code&gt; script will automatically generate the following files &amp;amp; directories:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;pkg/apis/samplecontroller/v1alpha1/zz_generated.deepcopy.go&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;pkg/generated/&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Changes should not be made to these files manually, and when creating your own controller based off of this implementation you should not copy these files and instead run the &lt;code&gt;update-codegen&lt;/code&gt; script to generate your own.&lt;/p&gt; &#xA;&lt;h2&gt;Details&lt;/h2&gt; &#xA;&lt;p&gt;The sample controller uses &lt;a href=&#34;https://github.com/kubernetes/client-go/tree/master/tools/cache&#34;&gt;client-go library&lt;/a&gt; extensively. The details of interaction points of the sample controller with various mechanisms from this library are explained &lt;a href=&#34;https://raw.githubusercontent.com/kubernetes/sample-controller/master/docs/controller-client-go.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Fetch sample-controller and its dependencies&lt;/h2&gt; &#xA;&lt;p&gt;Like the rest of Kubernetes, sample-controller has used &lt;a href=&#34;https://github.com/tools/godep&#34;&gt;godep&lt;/a&gt; and &lt;code&gt;$GOPATH&lt;/code&gt; for years and is now adopting go 1.11 modules. There are thus two alternative ways to go about fetching this demo and its dependencies.&lt;/p&gt; &#xA;&lt;h3&gt;Fetch with godep&lt;/h3&gt; &#xA;&lt;p&gt;When NOT using go 1.11 modules, you can use the following commands.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;go get -d k8s.io/sample-controller&#xA;cd $GOPATH/src/k8s.io/sample-controller&#xA;godep restore&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;When using go 1.11 modules&lt;/h3&gt; &#xA;&lt;p&gt;When using go 1.11 modules (&lt;code&gt;GO111MODULE=on&lt;/code&gt;), issue the following commands --- starting in whatever working directory you like.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone https://github.com/kubernetes/sample-controller.git&#xA;cd sample-controller&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note, however, that if you intend to generate code then you will also need the code-generator repo to exist in an old-style location. One easy way to do this is to use the command &lt;code&gt;go mod vendor&lt;/code&gt; to create and populate the &lt;code&gt;vendor&lt;/code&gt; directory.&lt;/p&gt; &#xA;&lt;h3&gt;A Note on kubernetes/kubernetes&lt;/h3&gt; &#xA;&lt;p&gt;If you are developing Kubernetes according to &lt;a href=&#34;https://github.com/kubernetes/community/raw/master/contributors/guide/github-workflow.md&#34;&gt;https://github.com/kubernetes/community/blob/master/contributors/guide/github-workflow.md&lt;/a&gt; then you already have a copy of this demo in &lt;code&gt;kubernetes/staging/src/k8s.io/sample-controller&lt;/code&gt; and its dependencies --- including the code generator --- are in usable locations (valid for all Go versions).&lt;/p&gt; &#xA;&lt;h2&gt;Purpose&lt;/h2&gt; &#xA;&lt;p&gt;This is an example of how to build a kube-like controller with a single type.&lt;/p&gt; &#xA;&lt;h2&gt;Running&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Prerequisite&lt;/strong&gt;: Since the sample-controller uses &lt;code&gt;apps/v1&lt;/code&gt; deployments, the Kubernetes cluster version should be greater than 1.9.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# assumes you have a working kubeconfig, not required if operating in-cluster&#xA;go build -o sample-controller .&#xA;./sample-controller -kubeconfig=$HOME/.kube/config&#xA;&#xA;# create a CustomResourceDefinition&#xA;kubectl create -f artifacts/examples/crd-status-subresource.yaml&#xA;&#xA;# create a custom resource of type Foo&#xA;kubectl create -f artifacts/examples/example-foo.yaml&#xA;&#xA;# check deployments created through the custom resource&#xA;kubectl get deployments&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Use Cases&lt;/h2&gt; &#xA;&lt;p&gt;CustomResourceDefinitions can be used to implement custom resource types for your Kubernetes cluster. These act like most other Resources in Kubernetes, and may be &lt;code&gt;kubectl apply&lt;/code&gt;&#39;d, etc.&lt;/p&gt; &#xA;&lt;p&gt;Some example use cases:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Provisioning/Management of external datastores/databases (eg. CloudSQL/RDS instances)&lt;/li&gt; &#xA; &lt;li&gt;Higher level abstractions around Kubernetes primitives (eg. a single Resource to define an etcd cluster, backed by a Service and a ReplicationController)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Defining types&lt;/h2&gt; &#xA;&lt;p&gt;Each instance of your custom resource has an attached Spec, which should be defined via a &lt;code&gt;struct{}&lt;/code&gt; to provide data format validation. In practice, this Spec is arbitrary key-value data that specifies the configuration/behavior of your Resource.&lt;/p&gt; &#xA;&lt;p&gt;For example, if you were implementing a custom resource for a Database, you might provide a DatabaseSpec like the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type DatabaseSpec struct {&#xA;&#x9;Databases []string `json:&#34;databases&#34;`&#xA;&#x9;Users     []User   `json:&#34;users&#34;`&#xA;&#x9;Version   string   `json:&#34;version&#34;`&#xA;}&#xA;&#xA;type User struct {&#xA;&#x9;Name     string `json:&#34;name&#34;`&#xA;&#x9;Password string `json:&#34;password&#34;`&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note, the JSON tag &lt;code&gt;json:&lt;/code&gt; is required on all user facing fields within your type. Typically API types contain only user facing fields. When the JSON tag is omitted from the field, Kubernetes generators consider the field to be internal and will not expose the field in their generated external output. For example, this means that the field would not be included in a generated CRD schema.&lt;/p&gt; &#xA;&lt;h2&gt;Validation&lt;/h2&gt; &#xA;&lt;p&gt;To validate custom resources, use the &lt;a href=&#34;https://kubernetes.io/docs/tasks/access-kubernetes-api/extend-api-custom-resource-definitions/#validation&#34;&gt;&lt;code&gt;CustomResourceValidation&lt;/code&gt;&lt;/a&gt; feature. Validation in the form of a &lt;a href=&#34;https://kubernetes.io/docs/tasks/extend-kubernetes/custom-resources/custom-resource-definitions/#specifying-a-structural-schema&#34;&gt;structured schema&lt;/a&gt; is mandatory to be provided for &lt;code&gt;apiextensions.k8s.io/v1&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Example&lt;/h3&gt; &#xA;&lt;p&gt;The schema in &lt;a href=&#34;https://raw.githubusercontent.com/kubernetes/sample-controller/master/artifacts/examples/crd.yaml&#34;&gt;&lt;code&gt;crd.yaml&lt;/code&gt;&lt;/a&gt; applies the following validation on the custom resource: &lt;code&gt;spec.replicas&lt;/code&gt; must be an integer and must have a minimum value of 1 and a maximum value of 10.&lt;/p&gt; &#xA;&lt;h2&gt;Subresources&lt;/h2&gt; &#xA;&lt;p&gt;Custom Resources support &lt;code&gt;/status&lt;/code&gt; and &lt;code&gt;/scale&lt;/code&gt; &lt;a href=&#34;https://kubernetes.io/docs/tasks/access-kubernetes-api/custom-resources/custom-resource-definitions/#subresources&#34;&gt;subresources&lt;/a&gt;. The &lt;code&gt;CustomResourceSubresources&lt;/code&gt; feature is in GA from v1.16.&lt;/p&gt; &#xA;&lt;h3&gt;Example&lt;/h3&gt; &#xA;&lt;p&gt;The CRD in &lt;a href=&#34;https://raw.githubusercontent.com/kubernetes/sample-controller/master/artifacts/examples/crd-status-subresource.yaml&#34;&gt;&lt;code&gt;crd-status-subresource.yaml&lt;/code&gt;&lt;/a&gt; enables the &lt;code&gt;/status&lt;/code&gt; subresource for custom resources. This means that &lt;a href=&#34;https://raw.githubusercontent.com/kubernetes/sample-controller/master/controller.go&#34;&gt;&lt;code&gt;UpdateStatus&lt;/code&gt;&lt;/a&gt; can be used by the controller to update only the status part of the custom resource.&lt;/p&gt; &#xA;&lt;p&gt;To understand why only the status part of the custom resource should be updated, please refer to the &lt;a href=&#34;https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status&#34;&gt;Kubernetes API conventions&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;In the above steps, use &lt;code&gt;crd-status-subresource.yaml&lt;/code&gt; to create the CRD:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# create a CustomResourceDefinition supporting the status subresource&#xA;kubectl create -f artifacts/examples/crd-status-subresource.yaml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;A Note on the API version&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://kubernetes.io/docs/reference/using-api/#api-groups&#34;&gt;group&lt;/a&gt; version of the custom resource in &lt;code&gt;crd.yaml&lt;/code&gt; is &lt;code&gt;v1alpha&lt;/code&gt;, this can be evolved to a stable API version, &lt;code&gt;v1&lt;/code&gt;, using &lt;a href=&#34;https://kubernetes.io/docs/tasks/extend-kubernetes/custom-resources/custom-resource-definition-versioning/&#34;&gt;CRD Versioning&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Cleanup&lt;/h2&gt; &#xA;&lt;p&gt;You can clean up the created CustomResourceDefinition with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;kubectl delete crd foos.samplecontroller.k8s.io&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Compatibility&lt;/h2&gt; &#xA;&lt;p&gt;HEAD of this repository will match HEAD of k8s.io/apimachinery and k8s.io/client-go.&lt;/p&gt; &#xA;&lt;h2&gt;Where does it come from?&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;sample-controller&lt;/code&gt; is synced from &lt;a href=&#34;https://github.com/kubernetes/kubernetes/raw/master/staging/src/k8s.io/sample-controller&#34;&gt;https://github.com/kubernetes/kubernetes/blob/master/staging/src/k8s.io/sample-controller&lt;/a&gt;. Code changes are made in that location, merged into k8s.io/kubernetes and later synced here.&lt;/p&gt;</summary>
  </entry>
</feed>