<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-09T01:41:42Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>google/google-ctf</title>
    <updated>2022-07-09T01:41:42Z</updated>
    <id>tag:github.com,2022-07-09:/google/google-ctf</id>
    <link href="https://github.com/google/google-ctf" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Google CTF&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Google CTF&lt;/h1&gt; &#xA;&lt;p&gt;This repository lists most of the challenges used in the Google CTF since 2017, as well as most of the infrastructure that can be used to run them. &lt;strong&gt;IMPORTANT&lt;/strong&gt; - The code in the 2017, 2018, 2019, 2020 and 2021 folders has unfixed security vulnerabilities. These are there on purpose, and running these on real production infrastructure is not safe.&lt;/p&gt; &#xA;&lt;p&gt;Read more about the Google CTF here: &lt;a href=&#34;https://security.googleblog.com/2017/06/announcing-google-capture-flag-2017.html&#34;&gt;https://security.googleblog.com/2017/06/announcing-google-capture-flag-2017.html&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Note this is not an official Google product.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>prometheus-operator/prometheus-operator</title>
    <updated>2022-07-09T01:41:42Z</updated>
    <id>tag:github.com,2022-07-09:/prometheus-operator/prometheus-operator</id>
    <link href="https://github.com/prometheus-operator/prometheus-operator" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Prometheus Operator creates/configures/manages Prometheus clusters atop Kubernetes&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Prometheus Operator&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/prometheus-operator/prometheus-operator/actions&#34;&gt;&lt;img src=&#34;https://github.com/prometheus-operator/prometheus-operator/workflows/ci/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/report/prometheus-operator/prometheus-operator&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/prometheus-operator/prometheus-operator&#34; alt=&#34;Go Report Card&#34; title=&#34;Go Report Card&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://slack.k8s.io/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/join%20slack-%23prometheus--operator-brightgreen.svg?sanitize=true&#34; alt=&#34;Slack&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Project status: &lt;em&gt;beta&lt;/em&gt;&lt;/strong&gt; Not all planned features are completed. The API, spec, status and other user facing objects may change, but in a backward compatible way.&lt;/p&gt; &#xA;&lt;p&gt;Note: Project was previously known as coreos/prometheus-operator.&lt;/p&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;The Prometheus Operator provides &lt;a href=&#34;https://kubernetes.io/&#34;&gt;Kubernetes&lt;/a&gt; native deployment and management of &lt;a href=&#34;https://prometheus.io/&#34;&gt;Prometheus&lt;/a&gt; and related monitoring components. The purpose of this project is to simplify and automate the configuration of a Prometheus based monitoring stack for Kubernetes clusters.&lt;/p&gt; &#xA;&lt;p&gt;The Prometheus operator includes, but is not limited to, the following features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Kubernetes Custom Resources&lt;/strong&gt;: Use Kubernetes custom resources to deploy and manage Prometheus, Alertmanager, and related components.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Simplified Deployment Configuration&lt;/strong&gt;: Configure the fundamentals of Prometheus like versions, persistence, retention policies, and replicas from a native Kubernetes resource.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Prometheus Target Configuration&lt;/strong&gt;: Automatically generate monitoring target configurations based on familiar Kubernetes label queries; no need to learn a Prometheus specific configuration language.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For an introduction to the Prometheus Operator, see the &lt;a href=&#34;https://github.com/prometheus-operator/prometheus-operator/raw/main/Documentation/user-guides/getting-started.md&#34;&gt;getting started&lt;/a&gt; guide.&lt;/p&gt; &#xA;&lt;h2&gt;Prometheus Operator vs. kube-prometheus vs. community helm chart&lt;/h2&gt; &#xA;&lt;h3&gt;Prometheus Operator&lt;/h3&gt; &#xA;&lt;p&gt;The Prometheus Operator uses Kubernetes &lt;a href=&#34;https://kubernetes.io/docs/concepts/extend-kubernetes/api-extension/custom-resources/&#34;&gt;custom resources&lt;/a&gt; to simplify the deployment and configuration of Prometheus, Alertmanager, and related monitoring components.&lt;/p&gt; &#xA;&lt;h3&gt;kube-prometheus&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/prometheus-operator/kube-prometheus&#34;&gt;kube-prometheus&lt;/a&gt; provides example configurations for a complete cluster monitoring stack based on Prometheus and the Prometheus Operator. This includes deployment of multiple Prometheus and Alertmanager instances, metrics exporters such as the node_exporter for gathering node metrics, scrape target configuration linking Prometheus to various metrics endpoints, and example alerting rules for notification of potential issues in the cluster.&lt;/p&gt; &#xA;&lt;h3&gt;helm chart&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://github.com/prometheus-community/helm-charts/tree/main/charts/kube-prometheus-stack&#34;&gt;prometheus-community/kube-prometheus-stack&lt;/a&gt; helm chart provides a similar feature set to kube-prometheus. This chart is maintained by the Prometheus community. For more information, please see the &lt;a href=&#34;https://github.com/prometheus-community/helm-charts/tree/main/charts/kube-prometheus-stack#kube-prometheus-stack&#34;&gt;chart&#39;s readme&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Prerequisites&lt;/h2&gt; &#xA;&lt;p&gt;Version &lt;code&gt;&amp;gt;=0.39.0&lt;/code&gt; of the Prometheus Operator requires a Kubernetes cluster of version &lt;code&gt;&amp;gt;=1.16.0&lt;/code&gt;. If you are just starting out with the Prometheus Operator, it is highly recommended to use the latest version.&lt;/p&gt; &#xA;&lt;p&gt;If you have an older version of Kubernetes and the Prometheus Operator running, we recommend upgrading Kubernetes first and then the Prometheus Operator.&lt;/p&gt; &#xA;&lt;h2&gt;CustomResourceDefinitions&lt;/h2&gt; &#xA;&lt;p&gt;A core feature of the Prometheus Operator is to monitor the Kubernetes API server for changes to specific objects and ensure that the current Prometheus deployments match these objects. The Operator acts on the following &lt;a href=&#34;https://kubernetes.io/docs/tasks/access-kubernetes-api/extend-api-custom-resource-definitions/&#34;&gt;custom resource definitions (CRDs)&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;code&gt;Prometheus&lt;/code&gt;&lt;/strong&gt;, which defines a desired Prometheus deployment.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;code&gt;Alertmanager&lt;/code&gt;&lt;/strong&gt;, which defines a desired Alertmanager deployment.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;code&gt;ThanosRuler&lt;/code&gt;&lt;/strong&gt;, which defines a desired Thanos Ruler deployment.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;code&gt;ServiceMonitor&lt;/code&gt;&lt;/strong&gt;, which declaratively specifies how groups of Kubernetes services should be monitored. The Operator automatically generates Prometheus scrape configuration based on the current state of the objects in the API server.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;code&gt;PodMonitor&lt;/code&gt;&lt;/strong&gt;, which declaratively specifies how group of pods should be monitored. The Operator automatically generates Prometheus scrape configuration based on the current state of the objects in the API server.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;code&gt;Probe&lt;/code&gt;&lt;/strong&gt;, which declaratively specifies how groups of ingresses or static targets should be monitored. The Operator automatically generates Prometheus scrape configuration based on the definition.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;code&gt;PrometheusRule&lt;/code&gt;&lt;/strong&gt;, which defines a desired set of Prometheus alerting and/or recording rules. The Operator generates a rule file, which can be used by Prometheus instances.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;code&gt;AlertmanagerConfig&lt;/code&gt;&lt;/strong&gt;, which declaratively specifies subsections of the Alertmanager configuration, allowing routing of alerts to custom receivers, and setting inhibit rules.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The Prometheus operator automatically detects changes in the Kubernetes API server to any of the above objects, and ensures that matching deployments and configurations are kept in sync.&lt;/p&gt; &#xA;&lt;p&gt;To learn more about the CRDs introduced by the Prometheus Operator have a look at the &lt;a href=&#34;https://raw.githubusercontent.com/prometheus-operator/prometheus-operator/main/Documentation/design.md&#34;&gt;design doc&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To automate validation of your CRD configuration files see about &lt;a href=&#34;https://raw.githubusercontent.com/prometheus-operator/prometheus-operator/main/Documentation/user-guides/linting.md&#34;&gt;linting&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Dynamic Admission Control&lt;/h2&gt; &#xA;&lt;p&gt;To prevent invalid Prometheus alerting and recording rules from causing failures in a deployed Prometheus instance, an &lt;a href=&#34;https://kubernetes.io/docs/reference/access-authn-authz/extensible-admission-controllers/&#34;&gt;admission webhook&lt;/a&gt; is provided to validate &lt;code&gt;PrometheusRule&lt;/code&gt; resources upon initial creation or update.&lt;/p&gt; &#xA;&lt;p&gt;For more information on this feature, see the &lt;a href=&#34;https://raw.githubusercontent.com/prometheus-operator/prometheus-operator/main/Documentation/user-guides/webhook.md&#34;&gt;user guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Quickstart&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; this quickstart does not provision an entire monitoring stack; if that is what you are looking for, see the &lt;a href=&#34;https://github.com/prometheus-operator/kube-prometheus&#34;&gt;kube-prometheus&lt;/a&gt; project. If you want the whole stack, but have already applied the &lt;code&gt;bundle.yaml&lt;/code&gt;, delete the bundle first (&lt;code&gt;kubectl delete -f bundle.yaml&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;To quickly try out &lt;em&gt;just&lt;/em&gt; the Prometheus Operator inside a cluster, &lt;strong&gt;choose a release&lt;/strong&gt; and run the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;kubectl create -f bundle.yaml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note: make sure to adapt the namespace in the ClusterRoleBinding if deploying in a namespace other than the default namespace.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;To run the Operator outside of a cluster:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;make&#xA;scripts/run-external.sh &amp;lt;kubectl cluster name&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Removal&lt;/h2&gt; &#xA;&lt;p&gt;To remove the operator and Prometheus, first delete any custom resources you created in each namespace. The operator will automatically shut down and remove Prometheus and Alertmanager pods, and associated ConfigMaps.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;for n in $(kubectl get namespaces -o jsonpath={..metadata.name}); do&#xA;  kubectl delete --all --namespace=$n prometheus,servicemonitor,podmonitor,alertmanager&#xA;done&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After a couple of minutes you can go ahead and remove the operator itself.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;kubectl delete -f bundle.yaml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The operator automatically creates services in each namespace where you created a Prometheus or Alertmanager resources, and defines three custom resource definitions. You can clean these up now.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;for n in $(kubectl get namespaces -o jsonpath={..metadata.name}); do&#xA;  kubectl delete --ignore-not-found --namespace=$n service prometheus-operated alertmanager-operated&#xA;done&#xA;&#xA;kubectl delete --ignore-not-found customresourcedefinitions \&#xA;  prometheuses.monitoring.coreos.com \&#xA;  servicemonitors.monitoring.coreos.com \&#xA;  podmonitors.monitoring.coreos.com \&#xA;  alertmanagers.monitoring.coreos.com \&#xA;  prometheusrules.monitoring.coreos.com&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;h3&gt;Prerequisites&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;golang environment&lt;/li&gt; &#xA; &lt;li&gt;docker (used for creating container images, etc.)&lt;/li&gt; &#xA; &lt;li&gt;kind (optional)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Testing&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Ensure that you&#39;re running tests in the following path: &lt;code&gt;$GOPATH/src/github.com/prometheus-operator/prometheus-operator&lt;/code&gt; as tests expect paths to match. If you&#39;re working from a fork, just add the forked repo as a remote and pull against your local prometheus-operator checkout before running tests.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;Running &lt;em&gt;unit tests&lt;/em&gt;:&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;make test-unit&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Running &lt;em&gt;end-to-end&lt;/em&gt; tests on local kind cluster:&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;kind create cluster --image=kindest/node:&amp;lt;latest&amp;gt;&lt;/code&gt;. e.g &lt;code&gt;v1.23.0&lt;/code&gt; version.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note: In case you are running kind on MacOS using podman, it is recommended to create podman machine 4 CPUs and 8GiB memory. Less resources might cause end to end tests fail because of lack of resources for cluster.&lt;/p&gt; &#xA; &lt;p&gt;&lt;code&gt;podman machine init --cpus=4 --memory=8192 --rootful --now&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;&lt;code&gt;kubectl cluster-info --context kind-kind&lt;/code&gt;. kind version &amp;gt;= 0.6.x&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;make image&lt;/code&gt; - build Prometheus Operator docker image locally.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note: In case you are running kind using podman, the step 3 won&#39;t work for you. You will need to switch command in Makefile:&lt;/p&gt; &#xA; &lt;p&gt;&lt;code&gt;sed -i &#39;s/docker build/podman build/g&#39; Makefile&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;publish locally built images to be accessible inside kind&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;for n in &#34;prometheus-operator&#34; &#34;prometheus-config-reloader&#34; &#34;admission-webhook&#34;; do kind load docker-image &#34;quay.io/prometheus-operator/$n:$(git rev-parse --short HEAD)&#34;; done;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note: In case you are running kind using podman, docker-image command won&#39;t work. You need to use image archives instead:&lt;/p&gt; &#xA; &lt;p&gt;&lt;code&gt;for n in &#34;prometheus-operator&#34; &#34;prometheus-config-reloader&#34; &#34;admission-webhook&#34;; do podman save --quiet -o images/$n.tar &#34;quay.io/prometheus-operator/$n:$(git rev-parse --short HEAD)&#34;; kind load image-archive images/$n.tar; done&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ol start=&#34;5&#34;&gt; &#xA; &lt;li&gt;&lt;code&gt;make test-e2e&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Running &lt;em&gt;end-to-end&lt;/em&gt; tests on local minikube cluster:&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;minikube start --kubernetes-version=v1.10.0 --memory=4096 --extra-config=apiserver.authorization-mode=RBAC&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;eval $(minikube docker-env) &amp;amp;&amp;amp; make image&lt;/code&gt; - build Prometheus Operator docker image on minikube&#39;s docker&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;make test-e2e&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Many files (documentation, manifests, ...) in this repository are auto-generated. E.g. &lt;code&gt;bundle.yaml&lt;/code&gt; originates from the &lt;em&gt;Jsonnet&lt;/em&gt; files in &lt;code&gt;/jsonnet/prometheus-operator&lt;/code&gt;. Before proposing a pull request:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Commit your changes.&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;make generate&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Commit the generated changes.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Security&lt;/h2&gt; &#xA;&lt;p&gt;If you find a security vulnerability related to the Prometheus Operator, please do not report it by opening a GitHub issue, but instead please send an e-mail to the maintainers of the project found in the &lt;a href=&#34;https://raw.githubusercontent.com/prometheus-operator/prometheus-operator/main/MAINTAINERS.md&#34;&gt;MAINTAINERS.md&lt;/a&gt; file.&lt;/p&gt; &#xA;&lt;h2&gt;Troubleshooting&lt;/h2&gt; &#xA;&lt;p&gt;Check the &lt;a href=&#34;https://raw.githubusercontent.com/prometheus-operator/prometheus-operator/main/Documentation/troubleshooting.md&#34;&gt;troubleshooting documentation&lt;/a&gt; for common issues and frequently asked questions (FAQ).&lt;/p&gt; &#xA;&lt;h2&gt;Acknowledgements&lt;/h2&gt; &#xA;&lt;p&gt;prometheus-operator organization logo was created and contributed by &lt;a href=&#34;https://github.com/bia&#34;&gt;Bianca Cheng Costanzo&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>golang/mock</title>
    <updated>2022-07-09T01:41:42Z</updated>
    <id>tag:github.com,2022-07-09:/golang/mock</id>
    <link href="https://github.com/golang/mock" rel="alternate"></link>
    <summary type="html">&lt;p&gt;GoMock is a mocking framework for the Go programming language.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;gomock&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/golang/mock/actions&#34;&gt;&lt;img src=&#34;https://github.com/golang/mock/actions/workflows/test.yaml/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pkg.go.dev/github.com/golang/mock&#34;&gt;&lt;img src=&#34;https://pkg.go.dev/badge/github.com/golang/mock.svg?sanitize=true&#34; alt=&#34;Go Reference&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;gomock is a mocking framework for the &lt;a href=&#34;http://golang.org/&#34;&gt;Go programming language&lt;/a&gt;. It integrates well with Go&#39;s built-in &lt;code&gt;testing&lt;/code&gt; package, but can be used in other contexts too.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Once you have &lt;a href=&#34;http://golang.org/doc/install.html#releases&#34;&gt;installed Go&lt;/a&gt;, install the &lt;code&gt;mockgen&lt;/code&gt; tool.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: If you have not done so already be sure to add &lt;code&gt;$GOPATH/bin&lt;/code&gt; to your &lt;code&gt;PATH&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To get the latest released version use:&lt;/p&gt; &#xA;&lt;h3&gt;Go version &amp;lt; 1.16&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;GO111MODULE=on go get github.com/golang/mock/mockgen@v1.6.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Go 1.16+&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;go install github.com/golang/mock/mockgen@v1.6.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you use &lt;code&gt;mockgen&lt;/code&gt; in your CI pipeline, it may be more appropriate to fixate on a specific mockgen version. You should try to keep the library in sync with the version of mockgen used to generate your mocks.&lt;/p&gt; &#xA;&lt;h2&gt;Running mockgen&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;mockgen&lt;/code&gt; has two modes of operation: source and reflect.&lt;/p&gt; &#xA;&lt;h3&gt;Source mode&lt;/h3&gt; &#xA;&lt;p&gt;Source mode generates mock interfaces from a source file. It is enabled by using the -source flag. Other flags that may be useful in this mode are -imports and -aux_files.&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mockgen -source=foo.go [other options]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Reflect mode&lt;/h3&gt; &#xA;&lt;p&gt;Reflect mode generates mock interfaces by building a program that uses reflection to understand interfaces. It is enabled by passing two non-flag arguments: an import path, and a comma-separated list of symbols.&lt;/p&gt; &#xA;&lt;p&gt;You can use &#34;.&#34; to refer to the current path&#39;s package.&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mockgen database/sql/driver Conn,Driver&#xA;&#xA;# Convenient for `go:generate`.&#xA;mockgen . Conn,Driver&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Flags&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;mockgen&lt;/code&gt; command is used to generate source code for a mock class given a Go source file containing interfaces to be mocked. It supports the following flags:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;-source&lt;/code&gt;: A file containing interfaces to be mocked.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;-destination&lt;/code&gt;: A file to which to write the resulting source code. If you don&#39;t set this, the code is printed to standard output.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;-package&lt;/code&gt;: The package to use for the resulting mock class source code. If you don&#39;t set this, the package name is &lt;code&gt;mock_&lt;/code&gt; concatenated with the package of the input file.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;-imports&lt;/code&gt;: A list of explicit imports that should be used in the resulting source code, specified as a comma-separated list of elements of the form &lt;code&gt;foo=bar/baz&lt;/code&gt;, where &lt;code&gt;bar/baz&lt;/code&gt; is the package being imported and &lt;code&gt;foo&lt;/code&gt; is the identifier to use for the package in the generated source code.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;-aux_files&lt;/code&gt;: A list of additional files that should be consulted to resolve e.g. embedded interfaces defined in a different file. This is specified as a comma-separated list of elements of the form &lt;code&gt;foo=bar/baz.go&lt;/code&gt;, where &lt;code&gt;bar/baz.go&lt;/code&gt; is the source file and &lt;code&gt;foo&lt;/code&gt; is the package name of that file used by the -source file.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;-build_flags&lt;/code&gt;: (reflect mode only) Flags passed verbatim to &lt;code&gt;go build&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;-mock_names&lt;/code&gt;: A list of custom names for generated mocks. This is specified as a comma-separated list of elements of the form &lt;code&gt;Repository=MockSensorRepository,Endpoint=MockSensorEndpoint&lt;/code&gt;, where &lt;code&gt;Repository&lt;/code&gt; is the interface name and &lt;code&gt;MockSensorRepository&lt;/code&gt; is the desired mock name (mock factory method and mock recorder will be named after the mock). If one of the interfaces has no custom name specified, then default naming convention will be used.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;-self_package&lt;/code&gt;: The full package import path for the generated code. The purpose of this flag is to prevent import cycles in the generated code by trying to include its own package. This can happen if the mock&#39;s package is set to one of its inputs (usually the main one) and the output is stdio so mockgen cannot detect the final output package. Setting this flag will then tell mockgen which import to exclude.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;-copyright_file&lt;/code&gt;: Copyright file used to add copyright header to the resulting source code.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;-debug_parser&lt;/code&gt;: Print out parser results only.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;-exec_only&lt;/code&gt;: (reflect mode) If set, execute this reflection program.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;-prog_only&lt;/code&gt;: (reflect mode) Only generate the reflection program; write it to stdout and exit.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;-write_package_comment&lt;/code&gt;: Writes package documentation comment (godoc) if true. (default true)&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For an example of the use of &lt;code&gt;mockgen&lt;/code&gt;, see the &lt;code&gt;sample/&lt;/code&gt; directory. In simple cases, you will need only the &lt;code&gt;-source&lt;/code&gt; flag.&lt;/p&gt; &#xA;&lt;h2&gt;Building Mocks&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type Foo interface {&#xA;  Bar(x int) int&#xA;}&#xA;&#xA;func SUT(f Foo) {&#xA; // ...&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func TestFoo(t *testing.T) {&#xA;  ctrl := gomock.NewController(t)&#xA;&#xA;  // Assert that Bar() is invoked.&#xA;  defer ctrl.Finish()&#xA;&#xA;  m := NewMockFoo(ctrl)&#xA;&#xA;  // Asserts that the first and only call to Bar() is passed 99.&#xA;  // Anything else will fail.&#xA;  m.&#xA;    EXPECT().&#xA;    Bar(gomock.Eq(99)).&#xA;    Return(101)&#xA;&#xA;  SUT(m)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you are using a Go version of 1.14+, a mockgen version of 1.5.0+, and are passing a *testing.T into &lt;code&gt;gomock.NewController(t)&lt;/code&gt; you no longer need to call &lt;code&gt;ctrl.Finish()&lt;/code&gt; explicitly. It will be called for you automatically from a self registered &lt;a href=&#34;https://pkg.go.dev/testing?tab=doc#T.Cleanup&#34;&gt;Cleanup&lt;/a&gt; function.&lt;/p&gt; &#xA;&lt;h2&gt;Building Stubs&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type Foo interface {&#xA;  Bar(x int) int&#xA;}&#xA;&#xA;func SUT(f Foo) {&#xA; // ...&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func TestFoo(t *testing.T) {&#xA;  ctrl := gomock.NewController(t)&#xA;  defer ctrl.Finish()&#xA;&#xA;  m := NewMockFoo(ctrl)&#xA;&#xA;  // Does not make any assertions. Executes the anonymous functions and returns&#xA;  // its result when Bar is invoked with 99.&#xA;  m.&#xA;    EXPECT().&#xA;    Bar(gomock.Eq(99)).&#xA;    DoAndReturn(func(_ int) int {&#xA;      time.Sleep(1*time.Second)&#xA;      return 101&#xA;    }).&#xA;    AnyTimes()&#xA;&#xA;  // Does not make any assertions. Returns 103 when Bar is invoked with 101.&#xA;  m.&#xA;    EXPECT().&#xA;    Bar(gomock.Eq(101)).&#xA;    Return(103).&#xA;    AnyTimes()&#xA;&#xA;  SUT(m)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Modifying Failure Messages&lt;/h2&gt; &#xA;&lt;p&gt;When a matcher reports a failure, it prints the received (&lt;code&gt;Got&lt;/code&gt;) vs the expected (&lt;code&gt;Want&lt;/code&gt;) value.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;Got: [3]&#xA;Want: is equal to 2&#xA;Expected call at user_test.go:33 doesn&#39;t match the argument at index 1.&#xA;Got: [0 1 1 2 3]&#xA;Want: is equal to 1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Modifying &lt;code&gt;Want&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;Want&lt;/code&gt; value comes from the matcher&#39;s &lt;code&gt;String()&lt;/code&gt; method. If the matcher&#39;s default output doesn&#39;t meet your needs, then it can be modified as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;gomock.WantFormatter(&#xA;  gomock.StringerFunc(func() string { return &#34;is equal to fifteen&#34; }),&#xA;  gomock.Eq(15),&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This modifies the &lt;code&gt;gomock.Eq(15)&lt;/code&gt; matcher&#39;s output for &lt;code&gt;Want:&lt;/code&gt; from &lt;code&gt;is equal to 15&lt;/code&gt; to &lt;code&gt;is equal to fifteen&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Modifying &lt;code&gt;Got&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;Got&lt;/code&gt; value comes from the object&#39;s &lt;code&gt;String()&lt;/code&gt; method if it is available. In some cases the output of an object is difficult to read (e.g., &lt;code&gt;[]byte&lt;/code&gt;) and it would be helpful for the test to print it differently. The following modifies how the &lt;code&gt;Got&lt;/code&gt; value is formatted:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;gomock.GotFormatterAdapter(&#xA;  gomock.GotFormatterFunc(func(i interface{}) string {&#xA;    // Leading 0s&#xA;    return fmt.Sprintf(&#34;%02d&#34;, i)&#xA;  }),&#xA;  gomock.Eq(15),&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If the received value is &lt;code&gt;3&lt;/code&gt;, then it will be printed as &lt;code&gt;03&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Debugging Errors&lt;/h2&gt; &#xA;&lt;h3&gt;reflect vendoring error&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;cannot find package &#34;.&#34;&#xA;... github.com/golang/mock/mockgen/model&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you come across this error while using reflect mode and vendoring dependencies there are three workarounds you can choose from:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Use source mode.&lt;/li&gt; &#xA; &lt;li&gt;Include an empty import &lt;code&gt;import _ &#34;github.com/golang/mock/mockgen/model&#34;&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Add &lt;code&gt;--build_flags=--mod=mod&lt;/code&gt; to your mockgen command.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;This error is due to changes in default behavior of the &lt;code&gt;go&lt;/code&gt; command in more recent versions. More details can be found in &lt;a href=&#34;https://github.com/golang/mock/issues/494&#34;&gt;#494&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>