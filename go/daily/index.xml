<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-11-28T01:32:40Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>nektos/act</title>
    <updated>2022-11-28T01:32:40Z</updated>
    <id>tag:github.com,2022-11-28:/nektos/act</id>
    <link href="https://github.com/nektos/act" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Run your GitHub Actions locally 🚀&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://github.com/nektos/act/wiki/img/logo-150.png&#34; alt=&#34;act-logo&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Overview &lt;a href=&#34;https://github.com/nektos/act/actions&#34;&gt;&lt;img src=&#34;https://github.com/nektos/act/workflows/push/badge.svg?branch=master&amp;amp;event=push&#34; alt=&#34;push&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitter.im/nektos/act?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/nektos/act.svg?sanitize=true&#34; alt=&#34;Join the chat at https://gitter.im/nektos/act&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/nektos/act&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/nektos/act&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/jonico/awesome-runners&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/listed%20on-awesome--runners-blue.svg?sanitize=true&#34; alt=&#34;awesome-runners&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&#34;Think globally, &lt;code&gt;act&lt;/code&gt; locally&#34;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Run your &lt;a href=&#34;https://developer.github.com/actions/&#34;&gt;GitHub Actions&lt;/a&gt; locally! Why would you want to do this? Two reasons:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Fast Feedback&lt;/strong&gt; - Rather than having to commit/push every time you want to test out the changes you are making to your &lt;code&gt;.github/workflows/&lt;/code&gt; files (or for any changes to embedded GitHub actions), you can use &lt;code&gt;act&lt;/code&gt; to run the actions locally. The &lt;a href=&#34;https://help.github.com/en/actions/configuring-and-managing-workflows/using-environment-variables#default-environment-variables&#34;&gt;environment variables&lt;/a&gt; and &lt;a href=&#34;https://help.github.com/en/actions/reference/virtual-environments-for-github-hosted-runners#filesystems-on-github-hosted-runners&#34;&gt;filesystem&lt;/a&gt; are all configured to match what GitHub provides.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Local Task Runner&lt;/strong&gt; - I love &lt;a href=&#34;https://en.wikipedia.org/wiki/Make_(software)&#34;&gt;make&lt;/a&gt;. However, I also hate repeating myself. With &lt;code&gt;act&lt;/code&gt;, you can use the GitHub Actions defined in your &lt;code&gt;.github/workflows/&lt;/code&gt; to replace your &lt;code&gt;Makefile&lt;/code&gt;!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;How Does It Work?&lt;/h1&gt; &#xA;&lt;p&gt;When you run &lt;code&gt;act&lt;/code&gt; it reads in your GitHub Actions from &lt;code&gt;.github/workflows/&lt;/code&gt; and determines the set of actions that need to be run. It uses the Docker API to either pull or build the necessary images, as defined in your workflow files and finally determines the execution path based on the dependencies that were defined. Once it has the execution path, it then uses the Docker API to run containers for each action based on the images prepared earlier. The &lt;a href=&#34;https://help.github.com/en/actions/configuring-and-managing-workflows/using-environment-variables#default-environment-variables&#34;&gt;environment variables&lt;/a&gt; and &lt;a href=&#34;https://docs.github.com/en/actions/using-github-hosted-runners/about-github-hosted-runners#file-systems&#34;&gt;filesystem&lt;/a&gt; are all configured to match what GitHub provides.&lt;/p&gt; &#xA;&lt;p&gt;Let&#39;s see it in action with a &lt;a href=&#34;https://github.com/cplee/github-actions-demo&#34;&gt;sample repo&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/nektos/act/wiki/quickstart/act-quickstart-2.gif&#34; alt=&#34;Demo&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;h2&gt;Necessary prerequisites for running &lt;code&gt;act&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;act&lt;/code&gt; depends on &lt;code&gt;docker&lt;/code&gt; to run workflows.&lt;/p&gt; &#xA;&lt;p&gt;If you are using macOS, please be sure to follow the steps outlined in &lt;a href=&#34;https://docs.docker.com/docker-for-mac/install/&#34;&gt;Docker Docs for how to install Docker Desktop for Mac&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you are using Windows, please follow steps for &lt;a href=&#34;https://docs.docker.com/docker-for-windows/install/&#34;&gt;installing Docker Desktop on Windows&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you are using Linux, you will need to &lt;a href=&#34;https://docs.docker.com/engine/install/&#34;&gt;install Docker Engine&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;act&lt;/code&gt; is currently not supported with &lt;code&gt;podman&lt;/code&gt; or other container backends (it might work, but it&#39;s not guaranteed). Please see &lt;a href=&#34;https://github.com/nektos/act/issues/303&#34;&gt;#303&lt;/a&gt; for updates.&lt;/p&gt; &#xA;&lt;h2&gt;Installation through package managers&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://brew.sh/&#34;&gt;Homebrew&lt;/a&gt; (Linux/macOS)&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Homebrew/homebrew-core/raw/master/Formula/act.rb&#34;&gt;&lt;img src=&#34;https://img.shields.io/homebrew/v/act&#34; alt=&#34;homebrew version&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;brew install act&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or if you want to install version based on latest commit, you can run below (it requires compiler to be installed but Homebrew will suggest you how to install it, if you don&#39;t have it):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;brew install act --HEAD&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://www.macports.org&#34;&gt;MacPorts&lt;/a&gt; (macOS)&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://repology.org/project/act-run-github-actions/versions&#34;&gt;&lt;img src=&#34;https://repology.org/badge/version-for-repo/macports/act-run-github-actions.svg?sanitize=true&#34; alt=&#34;MacPorts package&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo port install act&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://chocolatey.org/&#34;&gt;Chocolatey&lt;/a&gt; (Windows)&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://community.chocolatey.org/packages/act-cli&#34;&gt;&lt;img src=&#34;https://img.shields.io/chocolatey/v/act-cli&#34; alt=&#34;choco-shield&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;choco install act-cli&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://scoop.sh/&#34;&gt;Scoop&lt;/a&gt; (Windows)&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/ScoopInstaller/Main/raw/master/bucket/act.json&#34;&gt;&lt;img src=&#34;https://img.shields.io/scoop/v/act&#34; alt=&#34;scoop-shield&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;scoop install act&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://aur.archlinux.org/packages/act/&#34;&gt;AUR&lt;/a&gt; (Linux)&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://aur.archlinux.org/packages/act/&#34;&gt;&lt;img src=&#34;https://img.shields.io/aur/version/act&#34; alt=&#34;aur-shield&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;yay -Syu act&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://copr.fedorainfracloud.org/coprs/rubemlrm/act-cli/&#34;&gt;COPR&lt;/a&gt; (Linux)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;dnf copr enable rubemlrm/act-cli&#xA;dnf install act-cli&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://nixos.org&#34;&gt;Nix&lt;/a&gt; (Linux/macOS)&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/NixOS/nixpkgs/raw/master/pkgs/development/tools/misc/act/default.nix&#34;&gt;Nix recipe&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Global install:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;nix-env -iA nixpkgs.act&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or through &lt;code&gt;nix-shell&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;nix-shell -p act&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Using the latest &lt;a href=&#34;https://nixos.wiki/wiki/Nix_command&#34;&gt;Nix command&lt;/a&gt;, you can run directly :&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;nix run nixpkgs#act&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Other install options&lt;/h2&gt; &#xA;&lt;h3&gt;Bash script&lt;/h3&gt; &#xA;&lt;p&gt;Run this command in your terminal:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;curl https://raw.githubusercontent.com/nektos/act/master/install.sh | sudo bash&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Manual download&lt;/h3&gt; &#xA;&lt;p&gt;Download the &lt;a href=&#34;https://github.com/nektos/act/releases/latest&#34;&gt;latest release&lt;/a&gt; and add the path to your binary into your PATH.&lt;/p&gt; &#xA;&lt;h1&gt;Example commands&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Command structure:&#xA;act [&amp;lt;event&amp;gt;] [options]&#xA;If no event name passed, will default to &#34;on: push&#34;&#xA;If actions handles only one event it will be used as default instead of &#34;on: push&#34;&#xA;&#xA;# List all actions for all events:&#xA;act -l&#xA;&#xA;# List the actions for a specific event:&#xA;act workflow_dispatch -l&#xA;&#xA;# List the actions for a specific job:&#xA;act -j test -l&#xA;&#xA;# Run the default (`push`) event:&#xA;act&#xA;&#xA;# Run a specific event:&#xA;act pull_request&#xA;&#xA;# Run a specific job:&#xA;act -j test&#xA;&#xA;# Run a job in a specific workflow (useful if you have duplicate job names)&#xA;act -j lint -W .github/workflows/checks.yml&#xA;&#xA;# Run in dry-run mode:&#xA;act -n&#xA;&#xA;# Enable verbose-logging (can be used with any of the above commands)&#xA;act -v&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;First &lt;code&gt;act&lt;/code&gt; run&lt;/h2&gt; &#xA;&lt;p&gt;When running &lt;code&gt;act&lt;/code&gt; for the first time, it will ask you to choose image to be used as default. It will save that information to &lt;code&gt;~/.actrc&lt;/code&gt;, please refer to &lt;a href=&#34;https://raw.githubusercontent.com/nektos/act/master/#configuration&#34;&gt;Configuration&lt;/a&gt; for more information about &lt;code&gt;.actrc&lt;/code&gt; and to &lt;a href=&#34;https://raw.githubusercontent.com/nektos/act/master/#runners&#34;&gt;Runners&lt;/a&gt; for information about used/available Docker images.&lt;/p&gt; &#xA;&lt;h1&gt;Flags&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-none&#34;&gt;  -a, --actor string                                user that triggered the event (default &#34;nektos/act&#34;)&#xA;      --replace-ghe-action-with-github-com          If you are using GitHub Enterprise Server and allow specified actions from GitHub (github.com), you can set actions on this. (e.g. --replace-ghe-action-with-github-com=github/super-linter)&#xA;      --replace-ghe-action-token-with-github-com    If you are using replace-ghe-action-with-github-com and you want to use private actions on GitHub, you have to set personal access token&#xA;      --artifact-server-path string                 Defines the path where the artifact server stores uploads and retrieves downloads from. If not specified the artifact server will not start.&#xA;      --artifact-server-port string                 Defines the port where the artifact server listens (will only bind to localhost). (default &#34;34567&#34;)&#xA;  -b, --bind                                        bind working directory to container, rather than copy&#xA;      --container-architecture string               Architecture which should be used to run containers, e.g.: linux/amd64. If not specified, will use host default architecture. Requires Docker server API Version 1.41+. Ignored on earlier Docker server platforms.&#xA;      --container-cap-add stringArray               kernel capabilities to add to the workflow containers (e.g. --container-cap-add SYS_PTRACE)&#xA;      --container-cap-drop stringArray              kernel capabilities to remove from the workflow containers (e.g. --container-cap-drop SYS_PTRACE)&#xA;      --container-daemon-socket string              Path to Docker daemon socket which will be mounted to containers (default &#34;/var/run/docker.sock&#34;)&#xA;      --defaultbranch string                        the name of the main branch&#xA;      --detect-event                                Use first event type from workflow as event that triggered the workflow&#xA;  -C, --directory string                            working directory (default &#34;.&#34;)&#xA;  -n, --dryrun                                      dryrun mode&#xA;      --env stringArray                             env to make available to actions with optional value (e.g. --env myenv=foo or --env myenv)&#xA;      --env-file string                             environment file to read and use as env in the containers (default &#34;.env&#34;)&#xA;  -e, --eventpath string                            path to event JSON file&#xA;      --github-instance string                      GitHub instance to use. Don&#39;t use this if you are not using GitHub Enterprise Server. (default &#34;github.com&#34;)&#xA;  -g, --graph                                       draw workflows&#xA;  -h, --help                                        help for act&#xA;      --insecure-secrets                            NOT RECOMMENDED! Doesn&#39;t hide secrets while printing logs.&#xA;  -j, --job string                                  run job&#xA;  -l, --list                                        list workflows&#xA;      --no-recurse                                  Flag to disable running workflows from subdirectories of specified path in &#39;--workflows&#39;/&#39;-W&#39; flag&#xA;  -P, --platform stringArray                        custom image to use per platform (e.g. -P ubuntu-18.04=nektos/act-environments-ubuntu:18.04)&#xA;      --privileged                                  use privileged mode&#xA;  -p, --pull                                        pull docker image(s) even if already present&#xA;  -q, --quiet                                       disable logging of output from steps&#xA;      --rebuild                                     rebuild local action docker image(s) even if already present&#xA;  -r, --reuse                                       don&#39;t remove container(s) on successfully completed workflow(s) to maintain state between runs&#xA;      --rm                                          automatically remove container(s)/volume(s) after a workflow(s) failure&#xA;  -s, --secret stringArray                          secret to make available to actions with optional value (e.g. -s mysecret=foo or -s mysecret)&#xA;      --secret-file string                          file with list of secrets to read from (e.g. --secret-file .secrets) (default &#34;.secrets&#34;)&#xA;      --use-gitignore                               Controls whether paths specified in .gitignore should be copied into container (default true)&#xA;      --userns string                               user namespace to use&#xA;  -v, --verbose                                     verbose output&#xA;  -w, --watch                                       watch the contents of the local repo and run when files change&#xA;  -W, --workflows string                            path to workflow file(s) (default &#34;./.github/workflows/&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;&lt;code&gt;GITHUB_TOKEN&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;GitHub &lt;a href=&#34;https://docs.github.com/en/actions/security-guides/automatic-token-authentication#about-the-github_token-secret&#34;&gt;automatically provides&lt;/a&gt; a &lt;code&gt;GITHUB_TOKEN&lt;/code&gt; secret when running workflows inside GitHub.&lt;/p&gt; &#xA;&lt;p&gt;If your workflow depends on this token, you need to create a &lt;a href=&#34;https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token&#34;&gt;personal access token&lt;/a&gt; and pass it to &lt;code&gt;act&lt;/code&gt; as a secret:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;act -s GITHUB_TOKEN=[insert token or leave blank and omit equals for secure input]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;WARNING&lt;/strong&gt;: &lt;code&gt;GITHUB_TOKEN&lt;/code&gt; will be logged in shell history if not inserted through secure input or (depending on your shell config) the command is prefixed with a whitespace.&lt;/p&gt; &#xA;&lt;h1&gt;Known Issues&lt;/h1&gt; &#xA;&lt;h2&gt;Services&lt;/h2&gt; &#xA;&lt;p&gt;Services are not currently supported but are being worked on. See: &lt;a href=&#34;https://github.com/nektos/act/issues/173&#34;&gt;#173&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;&lt;code&gt;MODULE_NOT_FOUND&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;A &lt;code&gt;MODULE_NOT_FOUND&lt;/code&gt; during &lt;code&gt;docker cp&lt;/code&gt; command &lt;a href=&#34;https://github.com/nektos/act/issues/228&#34;&gt;#228&lt;/a&gt; can happen if you are relying on local changes that have not been pushed. This can get triggered if the action is using a path, like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;- name: test action locally&#xA;  uses: ./&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In this case, you &lt;em&gt;must&lt;/em&gt; use &lt;code&gt;actions/checkout@v2&lt;/code&gt; with a path that &lt;em&gt;has the same name as your repository&lt;/em&gt;. If your repository is called &lt;em&gt;my-action&lt;/em&gt;, then your checkout step would look like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;steps:&#xA;  - name: Checkout&#xA;    uses: actions/checkout@v2&#xA;    with:&#xA;      path: &#34;my-action&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If the &lt;code&gt;path:&lt;/code&gt; value doesn&#39;t match the name of the repository, a &lt;code&gt;MODULE_NOT_FOUND&lt;/code&gt; will be thrown.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;code&gt;docker context&lt;/code&gt; support&lt;/h2&gt; &#xA;&lt;p&gt;The current &lt;code&gt;docker context&lt;/code&gt; isn&#39;t respected (&lt;a href=&#34;https://github.com/nektos/act/issues/583&#34;&gt;#583&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;You can work around this by setting &lt;code&gt;DOCKER_HOST&lt;/code&gt; before running &lt;code&gt;act&lt;/code&gt;, with e.g:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;export DOCKER_HOST=$(docker context inspect --format &#39;{{.Endpoints.docker.Host}}&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Runners&lt;/h1&gt; &#xA;&lt;p&gt;GitHub Actions offers managed &lt;a href=&#34;https://help.github.com/en/actions/reference/virtual-environments-for-github-hosted-runners&#34;&gt;virtual environments&lt;/a&gt; for running workflows. In order for &lt;code&gt;act&lt;/code&gt; to run your workflows locally, it must run a container for the runner defined in your workflow file. Here are the images that &lt;code&gt;act&lt;/code&gt; uses for each runner type and size:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;GitHub Runner&lt;/th&gt; &#xA;   &lt;th&gt;Micro Docker Image&lt;/th&gt; &#xA;   &lt;th&gt;Medium Docker Image&lt;/th&gt; &#xA;   &lt;th&gt;Large Docker Image&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;ubuntu-latest&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://hub.docker.com/_/buildpack-deps&#34;&gt;&lt;code&gt;node:16-buster-slim&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/catthehacker/docker_images&#34;&gt;&lt;code&gt;catthehacker/ubuntu:act-latest&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/catthehacker/docker_images&#34;&gt;&lt;code&gt;catthehacker/ubuntu:full-latest&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;ubuntu-22.04&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://hub.docker.com/_/buildpack-deps&#34;&gt;&lt;code&gt;node:16-bullseye-slim&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/catthehacker/docker_images&#34;&gt;&lt;code&gt;catthehacker/ubuntu:act-22.04&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;unavailable&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;ubuntu-20.04&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://hub.docker.com/_/buildpack-deps&#34;&gt;&lt;code&gt;node:16-buster-slim&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/catthehacker/docker_images&#34;&gt;&lt;code&gt;catthehacker/ubuntu:act-20.04&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/catthehacker/docker_images&#34;&gt;&lt;code&gt;catthehacker/ubuntu:full-20.04&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;ubuntu-18.04&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://hub.docker.com/_/buildpack-deps&#34;&gt;&lt;code&gt;node:16-buster-slim&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/catthehacker/docker_images&#34;&gt;&lt;code&gt;catthehacker/ubuntu:act-18.04&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/catthehacker/docker_images&#34;&gt;&lt;code&gt;catthehacker/ubuntu:full-18.04&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Windows and macOS based platforms are currently &lt;strong&gt;unsupported and won&#39;t work&lt;/strong&gt; (see issue &lt;a href=&#34;https://github.com/nektos/act/issues/97&#34;&gt;#97&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;h2&gt;Please see &lt;a href=&#34;https://raw.githubusercontent.com/nektos/act/master/IMAGES.md&#34;&gt;IMAGES.md&lt;/a&gt; for more information about the Docker images that can be used with &lt;code&gt;act&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;h2&gt;Default runners are intentionally incomplete&lt;/h2&gt; &#xA;&lt;p&gt;These default images do &lt;strong&gt;not&lt;/strong&gt; contain &lt;strong&gt;all&lt;/strong&gt; the tools that GitHub Actions offers by default in their runners. Many things can work improperly or not at all while running those image. Additionally, some software might still not work even if installed properly, since GitHub Actions are running in fully virtualized machines while &lt;code&gt;act&lt;/code&gt; is using Docker containers (e.g. Docker does not support running &lt;code&gt;systemd&lt;/code&gt;). In case of any problems &lt;a href=&#34;https://github.com/nektos/act/issues/new/choose&#34;&gt;please create issue&lt;/a&gt; in respective repository (issues with &lt;code&gt;act&lt;/code&gt; in this repository, issues with &lt;code&gt;nektos/act-environments-ubuntu:18.04&lt;/code&gt; in &lt;a href=&#34;https://github.com/nektos/act-environments&#34;&gt;&lt;code&gt;nektos/act-environments&lt;/code&gt;&lt;/a&gt; and issues with any image from user &lt;code&gt;catthehacker&lt;/code&gt; in &lt;a href=&#34;https://github.com/catthehacker/docker_images&#34;&gt;&lt;code&gt;catthehacker/docker_images&lt;/code&gt;&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;h2&gt;Alternative runner images&lt;/h2&gt; &#xA;&lt;p&gt;If you need an environment that works just like the corresponding GitHub runner then consider using an image provided by &lt;a href=&#34;https://github.com/nektos/act-environments&#34;&gt;nektos/act-environments&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://hub.docker.com/r/nektos/act-environments-ubuntu/tags&#34;&gt;&lt;code&gt;nektos/act-environments-ubuntu:18.04&lt;/code&gt;&lt;/a&gt; - built from the Packer file GitHub uses in &lt;a href=&#34;https://github.com/actions/runner&#34;&gt;actions/virtual-environments&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;span&gt;⚠&lt;/span&gt; &lt;span&gt;🐘&lt;/span&gt; &lt;code&gt;*** WARNING - this image is &amp;gt;18GB 😱***&lt;/code&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/catthehacker/docker_images/pkgs/container/ubuntu&#34;&gt;&lt;code&gt;catthehacker/ubuntu:full-*&lt;/code&gt;&lt;/a&gt; - built from Packer template provided by GitHub, see &lt;a href=&#34;https://github.com/catthehacker/virtual-environments-fork&#34;&gt;catthehacker/virtual-environments-fork&lt;/a&gt; or &lt;a href=&#34;https://github.com/catthehacker/docker_images&#34;&gt;catthehacker/docker_images&lt;/a&gt; for more information&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Use an alternative runner image&lt;/h2&gt; &#xA;&lt;p&gt;To use a different image for the runner, use the &lt;code&gt;-P&lt;/code&gt; option.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;act -P &amp;lt;platform&amp;gt;=&amp;lt;docker-image&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If your workflow uses &lt;code&gt;ubuntu-18.04&lt;/code&gt;, consider below line as an example for changing Docker image used to run that workflow:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;act -P ubuntu-18.04=nektos/act-environments-ubuntu:18.04&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you use multiple platforms in your workflow, you have to specify them to change which image is used. For example, if your workflow uses &lt;code&gt;ubuntu-18.04&lt;/code&gt;, &lt;code&gt;ubuntu-16.04&lt;/code&gt; and &lt;code&gt;ubuntu-latest&lt;/code&gt;, specify all platforms like below&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;act -P ubuntu-18.04=nektos/act-environments-ubuntu:18.04 -P ubuntu-latest=ubuntu:latest -P ubuntu-16.04=node:16-buster-slim&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Secrets&lt;/h1&gt; &#xA;&lt;p&gt;To run &lt;code&gt;act&lt;/code&gt; with secrets, you can enter them interactively, supply them as environment variables or load them from a file. The following options are available for providing secrets:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;act -s MY_SECRET=somevalue&lt;/code&gt; - use &lt;code&gt;somevalue&lt;/code&gt; as the value for &lt;code&gt;MY_SECRET&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;act -s MY_SECRET&lt;/code&gt; - check for an environment variable named &lt;code&gt;MY_SECRET&lt;/code&gt; and use it if it exists. If the environment variable is not defined, prompt the user for a value.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;act --secret-file my.secrets&lt;/code&gt; - load secrets values from &lt;code&gt;my.secrets&lt;/code&gt; file. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;secrets file format is the same as &lt;code&gt;.env&lt;/code&gt; format&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Configuration&lt;/h1&gt; &#xA;&lt;p&gt;You can provide default configuration flags to &lt;code&gt;act&lt;/code&gt; by either creating a &lt;code&gt;./.actrc&lt;/code&gt; or a &lt;code&gt;~/.actrc&lt;/code&gt; file. Any flags in the files will be applied before any flags provided directly on the command line. For example, a file like below will always use the &lt;code&gt;nektos/act-environments-ubuntu:18.04&lt;/code&gt; image for the &lt;code&gt;ubuntu-latest&lt;/code&gt; runner:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# sample .actrc file&#xA;-P ubuntu-latest=nektos/act-environments-ubuntu:18.04&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Additionally, act supports loading environment variables from an &lt;code&gt;.env&lt;/code&gt; file. The default is to look in the working directory for the file but can be overridden by:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;act --env-file my.env&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;.env&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-env&#34;&gt;MY_ENV_VAR=MY_ENV_VAR_VALUE&#xA;MY_2ND_ENV_VAR=&#34;my 2nd env var value&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Skipping steps&lt;/h1&gt; &#xA;&lt;p&gt;Act adds a special environment variable &lt;code&gt;ACT&lt;/code&gt; that can be used to skip a step that you don&#39;t want to run locally. E.g. a step that posts a Slack message or bumps a version number.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;- name: Some step&#xA;  if: ${{ !env.ACT }}&#xA;  run: |&#xA;    ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Events&lt;/h1&gt; &#xA;&lt;p&gt;Every &lt;a href=&#34;https://developer.github.com/v3/activity/events/types&#34;&gt;GitHub event&lt;/a&gt; is accompanied by a payload. You can provide these events in JSON format with the &lt;code&gt;--eventpath&lt;/code&gt; to simulate specific GitHub events kicking off an action. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;pull_request&#34;: {&#xA;    &#34;head&#34;: {&#xA;      &#34;ref&#34;: &#34;sample-head-ref&#34;&#xA;    },&#xA;    &#34;base&#34;: {&#xA;      &#34;ref&#34;: &#34;sample-base-ref&#34;&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;act pull_request -e pull-request.json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Act will properly provide &lt;code&gt;github.head_ref&lt;/code&gt; and &lt;code&gt;github.base_ref&lt;/code&gt; to the action as expected.&lt;/p&gt; &#xA;&lt;h2&gt;Pass Inputs to Manually Triggered Workflows&lt;/h2&gt; &#xA;&lt;p&gt;Example workflow file&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;on:&#xA;  workflow_dispatch:&#xA;    inputs:&#xA;      NAME:&#xA;        description: &#34;A random input name for the workflow&#34;&#xA;        type: string&#xA;      SOME_VALUE:&#xA;        description: &#34;Some other input to pass&#34;&#xA;        type: string&#xA;&#xA;jobs:&#xA;  test:&#xA;    name: Test&#xA;    runs-on: ubuntu-latest&#xA;&#xA;    steps:&#xA;      - name: Test with inputs&#xA;        run: |&#xA;          echo &#34;Hello ${{ github.event.inputs.NAME }} and ${{ github.event.inputs.SOME_VALUE }}!&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Example JSON payload file conveniently named &lt;code&gt;payload.json&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;inputs&#34;: {&#xA;    &#34;NAME&#34;: &#34;Manual Workflow&#34;,&#xA;    &#34;SOME_VALUE&#34;: &#34;ABC&#34;&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Command for triggering the workflow&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;act workflow_dispatch -e payload.json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;GitHub Enterprise&lt;/h1&gt; &#xA;&lt;p&gt;Act supports using and authenticating against private GitHub Enterprise servers. To use your custom GHE server, set the CLI flag &lt;code&gt;--github-instance&lt;/code&gt; to your hostname (e.g. &lt;code&gt;github.company.com&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;Please note that if your GHE server requires authentication, we will use the secret provided via &lt;code&gt;GITHUB_TOKEN&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Please also see the &lt;a href=&#34;https://docs.github.com/en/enterprise-server@3.0/admin/github-actions/about-using-actions-in-your-enterprise&#34;&gt;official documentation for GitHub actions on GHE&lt;/a&gt; for more information on how to use actions.&lt;/p&gt; &#xA;&lt;h1&gt;Support&lt;/h1&gt; &#xA;&lt;p&gt;Need help? Ask on &lt;a href=&#34;https://gitter.im/nektos/act&#34;&gt;Gitter&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;h1&gt;Contributing&lt;/h1&gt; &#xA;&lt;p&gt;Want to contribute to act? Awesome! Check out the &lt;a href=&#34;https://raw.githubusercontent.com/nektos/act/master/CONTRIBUTING.md&#34;&gt;contributing guidelines&lt;/a&gt; to get involved.&lt;/p&gt; &#xA;&lt;h2&gt;Manually building from source&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install Go tools 1.18+ - (&lt;a href=&#34;https://golang.org/doc/install&#34;&gt;https://golang.org/doc/install&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Clone this repo &lt;code&gt;git clone git@github.com:nektos/act.git&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run unit tests with &lt;code&gt;make test&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Build and install: &lt;code&gt;make install&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>google/syzkaller</title>
    <updated>2022-11-28T01:32:40Z</updated>
    <id>tag:github.com,2022-11-28:/google/syzkaller</id>
    <link href="https://github.com/google/syzkaller" rel="alternate"></link>
    <summary type="html">&lt;p&gt;syzkaller is an unsupervised coverage-guided kernel fuzzer&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;syzkaller - kernel fuzzer&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/google/syzkaller/actions?query=workflow/ci&#34;&gt;&lt;img src=&#34;https://github.com/google/syzkaller/workflows/ci/badge.svg?sanitize=true&#34; alt=&#34;CI Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://bugs.chromium.org/p/oss-fuzz/issues/list?q=label:Proj-syzkaller&#34;&gt;&lt;img src=&#34;https://oss-fuzz-build-logs.storage.googleapis.com/badges/syzkaller.svg?sanitize=true&#34; alt=&#34;OSS-Fuzz&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/google/syzkaller&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/google/syzkaller&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/google/syzkaller&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/google/syzkaller/graph/badge.svg?sanitize=true&#34; alt=&#34;Coverage Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://godoc.org/github.com/google/syzkaller&#34;&gt;&lt;img src=&#34;https://godoc.org/github.com/google/syzkaller?status.svg?sanitize=true&#34; alt=&#34;GoDoc&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/google/syzkaller/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-Apache%202.0-blue.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;syzkaller&lt;/code&gt; (&lt;code&gt;[siːzˈkɔːlə]&lt;/code&gt;) is an unsupervised coverage-guided kernel fuzzer.&lt;br&gt; Supported OSes: &lt;code&gt;Akaros&lt;/code&gt;, &lt;code&gt;FreeBSD&lt;/code&gt;, &lt;code&gt;Fuchsia&lt;/code&gt;, &lt;code&gt;gVisor&lt;/code&gt;, &lt;code&gt;Linux&lt;/code&gt;, &lt;code&gt;NetBSD&lt;/code&gt;, &lt;code&gt;OpenBSD&lt;/code&gt;, &lt;code&gt;Windows&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Mailing list: &lt;a href=&#34;https://groups.google.com/forum/#!forum/syzkaller&#34;&gt;syzkaller@googlegroups.com&lt;/a&gt; (join on &lt;a href=&#34;https://groups.google.com/forum/#!forum/syzkaller&#34;&gt;web&lt;/a&gt; or by &lt;a href=&#34;mailto:syzkaller+subscribe@googlegroups.com&#34;&gt;email&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;Found bugs: &lt;a href=&#34;https://raw.githubusercontent.com/google/syzkaller/master/docs/akaros/found_bugs.md&#34;&gt;Akaros&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/google/syzkaller/master/docs/darwin/README.md&#34;&gt;Darwin/XNU&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/google/syzkaller/master/docs/freebsd/found_bugs.md&#34;&gt;FreeBSD&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/google/syzkaller/master/docs/linux/found_bugs.md&#34;&gt;Linux&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/google/syzkaller/master/docs/netbsd/found_bugs.md&#34;&gt;NetBSD&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/google/syzkaller/master/docs/openbsd/found_bugs.md&#34;&gt;OpenBSD&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/google/syzkaller/master/docs/windows/README.md&#34;&gt;Windows&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Initially, syzkaller was developed with Linux kernel fuzzing in mind, but now it&#39;s being extended to support other OS kernels as well. Most of the documentation at this moment is related to the &lt;a href=&#34;https://raw.githubusercontent.com/google/syzkaller/master/docs/linux/setup.md&#34;&gt;Linux&lt;/a&gt; kernel. For other OS kernels check: &lt;a href=&#34;https://raw.githubusercontent.com/google/syzkaller/master/docs/akaros/README.md&#34;&gt;Akaros&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/google/syzkaller/master/docs/darwin/README.md&#34;&gt;Darwin/XNU&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/google/syzkaller/master/docs/freebsd/README.md&#34;&gt;FreeBSD&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/google/syzkaller/master/docs/fuchsia/README.md&#34;&gt;Fuchsia&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/google/syzkaller/master/docs/netbsd/README.md&#34;&gt;NetBSD&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/google/syzkaller/master/docs/openbsd/setup.md&#34;&gt;OpenBSD&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/google/syzkaller/master/docs/windows/README.md&#34;&gt;Windows&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/google/syzkaller/master/docs/gvisor/README.md&#34;&gt;gVisor&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/syzkaller/master/docs/setup.md&#34;&gt;How to install syzkaller&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/syzkaller/master/docs/usage.md&#34;&gt;How to use syzkaller&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/syzkaller/master/docs/internals.md&#34;&gt;How syzkaller works&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/syzkaller/master/docs/setup_syzbot.md&#34;&gt;How to install syzbot&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/syzkaller/master/docs/contributing.md&#34;&gt;How to contribute to syzkaller&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/syzkaller/master/docs/linux/reporting_kernel_bugs.md&#34;&gt;How to report Linux kernel bugs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/syzkaller/master/docs/talks.md&#34;&gt;Tech talks and articles&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/syzkaller/master/docs/research.md&#34;&gt;Research work based on syzkaller&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Disclaimer&lt;/h2&gt; &#xA;&lt;p&gt;This is not an official Google product.&lt;/p&gt;</summary>
  </entry>
</feed>