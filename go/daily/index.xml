<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-04-02T01:35:34Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>channyein1337/jsleak</title>
    <updated>2023-04-02T01:35:34Z</updated>
    <id>tag:github.com,2023-04-02:/channyein1337/jsleak</id>
    <link href="https://github.com/channyein1337/jsleak" rel="alternate"></link>
    <summary type="html">&lt;p&gt;jsleak is a tool to find secret , paths or links in the source code during the recon.&lt;/p&gt;&lt;hr&gt;&lt;h3&gt;Description&lt;/h3&gt; &#xA;&lt;p&gt;I was developing jsleak during most of my free time for my own need.It is easy-to-use command-line tool designed to uncover secrets and links in JavaScript files or source code. The jsleak was inspired by &lt;a href=&#34;https://github.com/GerbenJavado/LinkFinder&#34;&gt;Linkfinder&lt;/a&gt; and regexes are collected from multiple sources.&lt;/p&gt; &#xA;&lt;h3&gt;Features:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Discover secrets in JS files such as API keys, tokens, and passwords.&lt;/li&gt; &#xA; &lt;li&gt;Identify links in the source code.&lt;/li&gt; &#xA; &lt;li&gt;Complete Url Function&lt;/li&gt; &#xA; &lt;li&gt;Concurrent processing for scanning of multiple Urls&lt;/li&gt; &#xA; &lt;li&gt;Check status code if the url is alive or not&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Instllation&lt;/h3&gt; &#xA;&lt;p&gt;If you are using old version of golang (go 1.15, 1.16) , use the following command to install jsleak.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;go get github.com/channyein1337/jsleak&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you are using latest version of go (1.17+) , use the following command to install.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;go install github.com/channyein1337/jsleak@latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Usage&lt;/h3&gt; &#xA;&lt;p&gt;To display help message&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;jsleak -h&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/channyein1337/jsleak/main/images/help.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Secret Finder&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;echo http://testphp.vulnweb.com/ | jsleak -s&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/channyein1337/jsleak/main/images/secret.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Link Finder&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;echo http://testphp.vulnweb.com/ | jsleak -l&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/channyein1337/jsleak/main/images/linkfinder.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Complete Url&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;echo http://testphp.vulnweb.com/ | jsleak -e&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/channyein1337/jsleak/main/images/completeURL.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Check Status&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;echo http://testphp.vulnweb.com/ | jsleak -c 20 -k&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/channyein1337/jsleak/main/images/status_code.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can also use multiple flags&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;echo http://testphp.vulnweb.com/ | jsleak -c 20 -l -s &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/channyein1337/jsleak/main/images/multipleFlags.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Running with Urls&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cat urls.txt | jsleak -l -s -c 30&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/channyein1337/jsleak/main/images/file.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;To Do&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Scan secret on completeURL with 200 response.&lt;/li&gt; &#xA; &lt;li&gt;Add Version flag.&lt;/li&gt; &#xA; &lt;li&gt;Support scanning local files.&lt;/li&gt; &#xA; &lt;li&gt;Support scanning apk files.&lt;/li&gt; &#xA; &lt;li&gt;Update Regex.&lt;/li&gt; &#xA; &lt;li&gt;Support mulitple user agents.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Credit and thanks to all the following resources&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/GerbenJavado/LinkFinder&#34;&gt;https://github.com/GerbenJavado/LinkFinder&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0xsha/GoLinkFinder&#34;&gt;https://github.com/0xsha/GoLinkFinder&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>tetratelabs/wazero</title>
    <updated>2023-04-02T01:35:34Z</updated>
    <id>tag:github.com,2023-04-02:/tetratelabs/wazero</id>
    <link href="https://github.com/tetratelabs/wazero" rel="alternate"></link>
    <summary type="html">&lt;p&gt;wazero: the zero dependency WebAssembly runtime for Go developers&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;wazero: the zero dependency WebAssembly runtime for Go developers&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/tetratelabs/wazero/actions/workflows/spectest.yaml&#34;&gt;&lt;img src=&#34;https://github.com/tetratelabs/wazero/actions/workflows/spectest.yaml/badge.svg?sanitize=true&#34; alt=&#34;WebAssembly Core Specification Test&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pkg.go.dev/github.com/tetratelabs/wazero&#34;&gt;&lt;img src=&#34;https://pkg.go.dev/badge/github.com/tetratelabs/wazero.svg?sanitize=true&#34; alt=&#34;Go Reference&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opensource.org/licenses/Apache-2.0&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-Apache_2.0-blue.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;WebAssembly is a way to safely run code compiled in other languages. Runtimes execute WebAssembly Modules (Wasm), which are most often binaries with a &lt;code&gt;.wasm&lt;/code&gt; extension.&lt;/p&gt; &#xA;&lt;p&gt;wazero is a WebAssembly Core Specification &lt;a href=&#34;https://www.w3.org/TR/2019/REC-wasm-core-1-20191205/&#34;&gt;1.0&lt;/a&gt; and &lt;a href=&#34;https://www.w3.org/TR/2022/WD-wasm-core-2-20220419/&#34;&gt;2.0&lt;/a&gt; compliant runtime written in Go. It has &lt;em&gt;zero dependencies&lt;/em&gt;, and doesn&#39;t rely on CGO. This means you can run applications in other languages and still keep cross compilation.&lt;/p&gt; &#xA;&lt;p&gt;Import wazero and extend your Go application with code written in any language!&lt;/p&gt; &#xA;&lt;h2&gt;Example&lt;/h2&gt; &#xA;&lt;p&gt;The best way to learn wazero is by trying one of our &lt;a href=&#34;https://raw.githubusercontent.com/tetratelabs/wazero/main/examples/README.md&#34;&gt;examples&lt;/a&gt;. The most &lt;a href=&#34;https://raw.githubusercontent.com/tetratelabs/wazero/main/examples/basic&#34;&gt;basic example&lt;/a&gt; extends a Go application with an addition function defined in WebAssembly.&lt;/p&gt; &#xA;&lt;h2&gt;Runtime&lt;/h2&gt; &#xA;&lt;p&gt;There are two runtime configurations supported in wazero: &lt;em&gt;Compiler&lt;/em&gt; is default:&lt;/p&gt; &#xA;&lt;p&gt;By default, ex &lt;code&gt;wazero.NewRuntime(ctx)&lt;/code&gt;, the Compiler is used if supported. You can also force the interpreter like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;r := wazero.NewRuntimeWithConfig(ctx, wazero.NewRuntimeConfigInterpreter())&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Interpreter&lt;/h3&gt; &#xA;&lt;p&gt;Interpreter is a naive interpreter-based implementation of Wasm virtual machine. Its implementation doesn&#39;t have any platform (GOARCH, GOOS) specific code, therefore &lt;em&gt;interpreter&lt;/em&gt; can be used for any compilation target available for Go (such as &lt;code&gt;riscv64&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;h3&gt;Compiler&lt;/h3&gt; &#xA;&lt;p&gt;Compiler compiles WebAssembly modules into machine code ahead of time (AOT), during &lt;code&gt;Runtime.CompileModule&lt;/code&gt;. This means your WebAssembly functions execute natively at runtime. Compiler is faster than Interpreter, often by order of magnitude (10x) or more. This is done without host-specific dependencies.&lt;/p&gt; &#xA;&lt;p&gt;If interested, check out the &lt;a href=&#34;https://raw.githubusercontent.com/tetratelabs/wazero/main/internal/engine/compiler/RATIONALE.md&#34;&gt;RATIONALE.md&lt;/a&gt; and help us optimize further!&lt;/p&gt; &#xA;&lt;h3&gt;Conformance&lt;/h3&gt; &#xA;&lt;p&gt;Both runtimes pass WebAssembly Core &lt;a href=&#34;https://github.com/WebAssembly/spec/tree/wg-1.0/test/core&#34;&gt;1.0&lt;/a&gt; and &lt;a href=&#34;https://github.com/WebAssembly/spec/tree/d39195773112a22b245ffbe864bab6d1182ccb06/test/core&#34;&gt;2.0&lt;/a&gt; specification tests on supported platforms:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Runtime&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Usage&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;amd64&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;arm64&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;others&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Interpreter&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;wazero.NewRuntimeConfigInterpreter()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Compiler&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;wazero.NewRuntimeConfigCompiler()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Support Policy&lt;/h2&gt; &#xA;&lt;p&gt;The below support policy focuses on compatability concerns of those embedding wazero into their Go applications.&lt;/p&gt; &#xA;&lt;h3&gt;wazero&lt;/h3&gt; &#xA;&lt;p&gt;wazero&#39;s &lt;a href=&#34;https://tetrate.io/blog/introducing-wazero-from-tetrate/&#34;&gt;1.0 release&lt;/a&gt; happened in March 2023, and is &lt;a href=&#34;https://wazero.io/community/users/&#34;&gt;in use&lt;/a&gt; by many projects and production sites.&lt;/p&gt; &#xA;&lt;p&gt;We offer an API stability promise with semantic versioning. In other words, we promise to not break any exported function signature without incrementing the major version. This does not mean no innovation: New features and behaviors happen with a minor version increment, e.g. 1.0.11 to 1.2.0. We also fix bugs or change internal details with a patch version, e.g. 1.0.0 to 1.0.1.&lt;/p&gt; &#xA;&lt;p&gt;You can get the latest version of wazero like this.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;go get github.com/tetratelabs/wazero@latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Please give us a &lt;a href=&#34;https://github.com/tetratelabs/wazero/stargazers&#34;&gt;star&lt;/a&gt; if you end up using wazero!&lt;/p&gt; &#xA;&lt;h3&gt;Go&lt;/h3&gt; &#xA;&lt;p&gt;wazero has no dependencies except Go, so the only source of conflict in your project&#39;s use of wazero is the Go version.&lt;/p&gt; &#xA;&lt;p&gt;wazero follows the same version policy as Go&#39;s &lt;a href=&#34;https://go.dev/doc/devel/release&#34;&gt;Release Policy&lt;/a&gt;: two versions. wazero will ensure these versions work and bugs are valid if there&#39;s an issue with a current Go version.&lt;/p&gt; &#xA;&lt;p&gt;Additionally, wazero intentionally delays usage of language or standard library features one additional version. For example, when Go 1.29 is released, wazero can use language features or standard libraries added in 1.27. This is a convenience for embedders who have a slower version policy than Go. However, only supported Go versions may be used to raise support issues.&lt;/p&gt; &#xA;&lt;h3&gt;Platform&lt;/h3&gt; &#xA;&lt;p&gt;wazero has two runtime modes: Interpreter and Compiler. The only supported operating systems are ones we test, but that doesn&#39;t necessarily mean other operating system versions won&#39;t work.&lt;/p&gt; &#xA;&lt;p&gt;We currently test Linux (Ubuntu and scratch), MacOS and Windows as packaged by &lt;a href=&#34;https://github.com/actions/virtual-environments&#34;&gt;GitHub Actions&lt;/a&gt;, as well compilation of 32-bit Linux and 64-bit FreeBSD.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Interpreter &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Linux is tested on amd64 (native) as well arm64 and riscv64 via emulation.&lt;/li&gt; &#xA;   &lt;li&gt;MacOS and Windows are only tested on amd64.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Compiler &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Linux is tested on amd64 (native) as well arm64 via emulation.&lt;/li&gt; &#xA;   &lt;li&gt;MacOS and Windows are only tested on amd64.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;wazero has no dependencies and doesn&#39;t require CGO. This means it can also be embedded in an application that doesn&#39;t use an operating system. This is a main differentiator between wazero and alternatives.&lt;/p&gt; &#xA;&lt;p&gt;We verify zero dependencies by running tests in Docker&#39;s &lt;a href=&#34;https://docs.docker.com/develop/develop-images/baseimages/#create-a-simple-parent-image-using-scratch&#34;&gt;scratch image&lt;/a&gt;. This approach ensures compatibility with any parent image.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;wazero is a registered trademark of Tetrate.io, Inc. in the United States and/or other countries&lt;/p&gt;</summary>
  </entry>
</feed>