<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-05-17T01:29:04Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>andydunstall/piko</title>
    <updated>2024-05-17T01:29:04Z</updated>
    <id>tag:github.com,2024-05-17:/andydunstall/piko</id>
    <link href="https://github.com/andydunstall/piko" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An open-source alternative to Ngrok, designed to serve production traffic and be simple to host (particularly on Kubernetes)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Piko &lt;a href=&#34;https://github.com/andydunstall/piko/actions/workflows/build.yaml&#34;&gt;&lt;img src=&#34;https://github.com/andydunstall/piko/actions/workflows/build.yaml/badge.svg?sanitize=true&#34; alt=&#34;Build&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;Piko is an open-source alternative to &lt;a href=&#34;https://ngrok.com/&#34;&gt;Ngrok&lt;/a&gt;, designed to serve production traffic and be simple to host (particularly on Kubernetes). Such as you may use Piko to expose services in a customer network, a bring your own cloud (BYOC) service or to connect to IoT devices.&lt;/p&gt; &#xA;&lt;p&gt;The proxy server may be hosted as a cluster of nodes for fault tolerance, scale and zero downtime deployments.&lt;/p&gt; &#xA;&lt;p&gt;Upstream services connect to Piko and register endpoints. Piko will then route requests for an endpoint to a registered upstream service via its outbound-only connection. This means you can expose your services without opening a public port.&lt;/p&gt; &#xA;&lt;p&gt;Incoming HTTP(S) requests identify the ID of the target endpoint using either the &lt;code&gt;Host&lt;/code&gt; header or an &lt;code&gt;x-piko-endpoint&lt;/code&gt; header. If multiple upstream services have registered the same endpoint, Piko load balances requests for that endpoint among the registered upstreams.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/andydunstall/piko/main/assets/images/overview.png&#34; alt=&#34;overview&#34; width=&#34;80%&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/andydunstall/piko/main/#design-goals&#34;&gt;Design Goals&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/andydunstall/piko/main/#getting-started&#34;&gt;Getting Started&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/andydunstall/piko/main/#docs&#34;&gt;Docs&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Design Goals&lt;/h2&gt; &#xA;&lt;h3&gt;Production Traffic&lt;/h3&gt; &#xA;&lt;p&gt;Piko is designed to serve production traffic rather than as a tool for testing and development. Such as you could use Piko to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Access customer networks&lt;/li&gt; &#xA; &lt;li&gt;Build a bring your own cloud (BYOC) solution&lt;/li&gt; &#xA; &lt;li&gt;Access IoT devices&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To support this, Piko may run as a cluster of nodes in order to be fault tolerant, scale horizontally and support zero downtime deployments. It also has observability tools for monitoring and debugging.&lt;/p&gt; &#xA;&lt;h3&gt;Hosting&lt;/h3&gt; &#xA;&lt;p&gt;Piko is built to be simple to host on Kubernetes. A Piko cluster may be hosted as a Kubernetes StatefulSet behind a HTTP load balancer or Kubernetes Gateway.&lt;/p&gt; &#xA;&lt;p&gt;Upstream service connections and proxy client requests may be load balanced to any node in the cluster and Piko will manage routing the requests to the correct upstream.&lt;/p&gt; &#xA;&lt;h3&gt;Secure&lt;/h3&gt; &#xA;&lt;p&gt;Upstream services connect to Piko via an outbound-only connection. Piko will then route any requests to the upstream via that connection. Therefore the upstream never has to open a port to listen for requests.&lt;/p&gt; &#xA;&lt;p&gt;Piko supports authenticating upstream services before they can register endpoints.&lt;/p&gt; &#xA;&lt;p&gt;Since Piko can be self-hosted, you can host it in the same network as your proxy clients so never accept requests from an external network. Such as you may have authenticated upstream services register from the Internet over TLS, then only provide an internal route for proxy clients in the same network as Piko.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/andydunstall/piko/main/docs/getting-started.md&#34;&gt;Getting Started&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Docs&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/andydunstall/piko/main/docs/getting-started.md&#34;&gt;Getting Started&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Architecture &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/andydunstall/piko/main/docs/architecture/overview.md&#34;&gt;Overview&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Manage &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/andydunstall/piko/main/docs/manage/overview.md&#34;&gt;Overview&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/andydunstall/piko/main/docs/manage/configure.md&#34;&gt;Configure&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/andydunstall/piko/main/docs/manage/kubernetes.md&#34;&gt;Kubernetes&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/andydunstall/piko/main/docs/manage/observability.md&#34;&gt;Observability&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>chapar-rest/chapar</title>
    <updated>2024-05-17T01:29:04Z</updated>
    <id>tag:github.com,2024-05-17:/chapar-rest/chapar</id>
    <link href="https://github.com/chapar-rest/chapar" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Chapar is a simple and easy to use api testing tools aims to help developers to test their api endpoints. it will support http and grpc protocols.&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/chapar-rest/chapar/main/assets/appicon.png&#34; alt=&#34;Chapar&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;h1&gt;Chapar - Native API Testing Tool&lt;/h1&gt; &#xA;&lt;p&gt;Chapar is an upcoming native API testing tool built with GoLang, designed to simplify and expedite the testing process for developers. While still in its early beta phase, Chapar aims to offer a user-friendly experience with support for both HTTP and gRPC protocols with.&lt;/p&gt; &#xA;&lt;h2&gt;What Chapar means?&lt;/h2&gt; &#xA;&lt;p&gt;Chapar was the institution of the royal mounted couriers in ancient Persia. The messengers, called Chapar, alternated in stations a day&#39;s ride apart along the Royal Road. The riders were exclusively in the service of the Great King and the network allowed for messages to be transported from Susa to Sardis (2699 km) in nine days; the journey took ninety days on foot.&lt;/p&gt; &#xA;&lt;p&gt;Herodus described the Chapar as follows:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;There is nothing in the world that travels faster than these Persian couriers. Neither snow, nor rain, nor heat, nor darkness of night prevents these couriers from completing their designated stages with utmost speed.&lt;/p&gt; &#xA; &lt;p&gt;Herodotus, about 440 BC&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;State of the project&lt;/h2&gt; &#xA;&lt;p&gt;Chapar is currently in the early beta phase, with the first release expected soon. The project is under active development, with regular updates and improvements planned to enhance the user experience and functionality.&lt;/p&gt; &#xA;&lt;h2&gt;Screenshots&lt;/h2&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/chapar-rest/chapar/main/screenshots/requests_details.png&#34; alt=&#34;Chapar&#34; width=&#34;400&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/chapar-rest/chapar/main/screenshots/environments.png&#34; alt=&#34;Chapar&#34; width=&#34;400&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/chapar-rest/chapar/main/screenshots/post_request.png&#34; alt=&#34;Chapar&#34; width=&#34;400&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/chapar-rest/chapar/main/screenshots/requests.png&#34; alt=&#34;Chapar&#34; width=&#34;400&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/chapar-rest/chapar/main/screenshots/workspaces.png&#34; alt=&#34;Chapar&#34; width=&#34;400&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/chapar-rest/chapar/main/screenshots/workspaces.png&#34; alt=&#34;Chapar&#34; width=&#34;400&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;h3&gt;Features&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Create and manage workspaces to organize your API endpoints.&lt;/li&gt; &#xA; &lt;li&gt;Create and manage environments to store variables and configurations for your API endpoints.&lt;/li&gt; &#xA; &lt;li&gt;Create and manage requests to test your API endpoints.&lt;/li&gt; &#xA; &lt;li&gt;Send requests with different methods (GET, POST, PUT, DELETE, PATCH, HEAD, OPTION,CONNECT).&lt;/li&gt; &#xA; &lt;li&gt;Send requests with different content types (JSON, XML, Form, Text, HTML).&lt;/li&gt; &#xA; &lt;li&gt;Send requests with different authentication methods (Basic, Bearer, API Key, No Auth).&lt;/li&gt; &#xA; &lt;li&gt;Send requests with different body types (Form, Raw, Binary).&lt;/li&gt; &#xA; &lt;li&gt;Set environment variables from the response of the request using JSONPath.&lt;/li&gt; &#xA; &lt;li&gt;Dark mode support.&lt;/li&gt; &#xA; &lt;li&gt;Data is stored locally on your machine. and no data is sent to any server.&lt;/li&gt; &#xA; &lt;li&gt;Import collections and requests from Postman.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Roadmap&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Support for gRPC, WebSocket, GraphQL protocol.&lt;/li&gt; &#xA; &lt;li&gt;Syntax highlighting for request body.&lt;/li&gt; &#xA; &lt;li&gt;Python as a scripting language for pre-request and post-request scripts.&lt;/li&gt; &#xA; &lt;li&gt;Support for tunneling to servers and kube clusters as pre request actions.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Getting Started&lt;/h3&gt; &#xA;&lt;p&gt;Stay tuned for the upcoming early beta release of Chapar. Once released, clone the repository or download the beta version to get started with testing your API endpoints.&lt;/p&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;p&gt;To install Chapar, clone the repository install the dependencies, and run the application using the following commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/chapar-rest/chapar.git&#xA;cd chapar&#xA;go build -o chapar .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Dependencies&lt;/h2&gt; &#xA;&lt;p&gt;Chapar is built using &lt;a href=&#34;https://gioui.org&#34;&gt;Gio&lt;/a&gt; library so you need to install the following dependencies to build the project:&lt;/p&gt; &#xA;&lt;p&gt;for linux follow instructions in &lt;a href=&#34;https://gioui.org/doc/install/linux&#34;&gt;gio linux&lt;/a&gt; for macOS follow instructions in &lt;a href=&#34;https://gioui.org/doc/install/macos&#34;&gt;gio macos&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Contributing&lt;/h3&gt; &#xA;&lt;p&gt;We welcome contributions from the community once the early beta is released! If you have ideas, feedback, or wish to contribute, please open an issue or submit a pull request.&lt;/p&gt; &#xA;&lt;h3&gt;Support&lt;/h3&gt; &#xA;&lt;p&gt;You can support the development of Chapar by starring the repository, sharing it with your friends, and contributing to the project. Also you can support the project by donating to the project&#39;s wallet.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.buymeacoffee.com/mohsen.mirzakhani&#34;&gt;&lt;img src=&#34;https://www.buymeacoffee.com/assets/img/custom_images/orange_img.png&#34; alt=&#34;&amp;quot;Buy Me A Coffee&amp;quot;&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>