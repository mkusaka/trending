<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-02-19T01:30:15Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>bepass-org/bepass</title>
    <updated>2024-02-19T01:30:15Z</updated>
    <id>tag:github.com,2024-02-19:/bepass-org/bepass</id>
    <link href="https://github.com/bepass-org/bepass" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A simple DPI bypass tool written in go&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Bepass: A DPI-nightmare proxy&lt;/h1&gt; &#xA;&lt;sub&gt; &lt;sup&gt; &lt;pre&gt;&lt;code&gt;&#xA;          _____                     _____                     _____                     _____                     _____                     _____          &#xA;         /\    \                   /\    \                   /\    \                   /\    \                   /\    \                   /\    \         &#xA;        /::\    \                 /::\    \                 /::\    \                 /::\    \                 /::\    \                 /::\    \        &#xA;       /::::\    \               /::::\    \               /::::\    \               /::::\    \               /::::\    \               /::::\    \       &#xA;      /::::::\    \             /::::::\    \             /::::::\    \             /::::::\    \             /::::::\    \             /::::::\    \      &#xA;     /:::/\:::\    \           /:::/\:::\    \           /:::/\:::\    \           /:::/\:::\    \           /:::/\:::\    \           /:::/\:::\    \     &#xA;    /:::/__\:::\    \         /:::/__\:::\    \         /:::/__\:::\    \         /:::/__\:::\    \         /:::/__\:::\    \         /:::/__\:::\    \    &#xA;   /::::\   \:::\    \       /::::\   \:::\    \       /::::\   \:::\    \       /::::\   \:::\    \        \:::\   \:::\    \        \:::\   \:::\    \   &#xA;  /::::::\   \:::\    \     /::::::\   \:::\    \     /::::::\   \:::\    \     /::::::\   \:::\    \     ___\:::\   \:::\    \     ___\:::\   \:::\    \  &#xA; /:::/\:::\   \:::\ ___\   /:::/\:::\   \:::\    \   /:::/\:::\   \:::\____\   /:::/\:::\   \:::\    \   /\   \:::\   \:::\    \   /\   \:::\   \:::\    \ &#xA;/:::/__\:::\   \:::|    | /:::/__\:::\   \:::\____\ /:::/  \:::\   \:::|    | /:::/  \:::\   \:::\____\ /::\   \:::\   \:::\____\ /::\   \:::\   \:::\____\&#xA;\:::\   \:::\  /:::|____| \:::\   \:::\   \::/    / \::/    \:::\  /:::|____| \::/    \:::\  /:::/    / \:::\   \:::\   \::/    / \:::\   \:::\   \::/    /&#xA; \:::\   \:::\/:::/    /   \:::\   \:::\   \/____/   \/_____/\:::\/:::/    /   \/____/ \:::\/:::/    /   \:::\   \:::\   \/____/   \:::\   \:::\   \/____/ &#xA;  \:::\   \::::::/    /     \:::\   \:::\    \                \::::::/    /             \::::::/    /     \:::\   \:::\    \        \:::\   \:::\    \     &#xA;   \:::\   \::::/    /       \:::\   \:::\____\                \::::/    /               \::::/    /       \:::\   \:::\____\        \:::\   \:::\____\    &#xA;    \:::\  /:::/    /         \:::\   \::/    /                 \::/____/                /:::/    /         \:::\  /:::/    /         \:::\  /:::/    /    &#xA;     \:::\/:::/    /           \:::\   \/____/                   ~~                     /:::/    /           \:::\/:::/    /           \:::\/:::/    /     &#xA;      \::::::/    /             \:::\    \                                             /:::/    /             \::::::/    /             \::::::/    /      &#xA;       \::::/    /               \:::\____\                                           /:::/    /               \::::/    /               \::::/    /       &#xA;        \::/____/                 \::/    /                                           \::/    /                 \::/    /                 \::/    /        &#xA;         ~~                        \/____/                                             \/____/                   \/____/                   \/____/                      &#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/sup&gt; &lt;/sub&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/badge/%E2%9A%A0%20WARNING-EXPERIMENTAL-red&#34; alt=&#34;Disclaimer&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bepass-org/bepass/main/#bepass-dpi-bypassing-tool-and-cloudflare-worker-proxy&#34;&gt;Bepass: DPI Bypassing Tool and Cloudflare Worker Proxy&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bepass-org/bepass/main/#table-of-contents&#34;&gt;Table of Contents&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bepass-org/bepass/main/#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bepass-org/bepass/main/#features&#34;&gt;Features&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bepass-org/bepass/main/#usage&#34;&gt;Usage&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bepass-org/bepass/main/#configuration-parameters&#34;&gt;Configuration Parameters&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bepass-org/bepass/main/#build-instructions&#34;&gt;Build Instructions&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bepass-org/bepass/main/#cli-version&#34;&gt;CLI Version&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bepass-org/bepass/main/#gui-version-work-in-progress&#34;&gt;GUI Version (Work in Progress)&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bepass-org/bepass/main/#deployment&#34;&gt;Deployment&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bepass-org/bepass/main/#cli-deployment&#34;&gt;CLI Deployment&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bepass-org/bepass/main/#roadmap&#34;&gt;Roadmap&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bepass-org/bepass/main/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;Bepass is an advanced tool designed to bypass Iran&#39;s Deep Packet Inspection (DPI) system using a TLS client hello splitting attack. It also enables the deployment of a VLESS-like proxy on Cloudflare Workers. This README provides an overview of the project&#39;s features, build instructions, deployment guidelines, and more.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;DPI Bypass:&lt;/strong&gt; Supports all of Iran&#39;s network carriers with customized TLS hello packet length adjustments.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;DNS Over HTTPS (DOH) Support:&lt;/strong&gt; Facilitates secure and private DNS resolution.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Server Name Indication DNS (SDNS) Support:&lt;/strong&gt; Enhances DNS resolution efficiency.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Cross-Platform Compatibility:&lt;/strong&gt; Suitable for various operating systems.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;You can run the CLI version of Bepass as follows:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;download the latest release from &lt;a href=&#34;https://github.com/uoosef/bepass/releases&#34;&gt;here&lt;/a&gt; based on your operating system&lt;/li&gt; &#xA; &lt;li&gt;extract the zip file&lt;/li&gt; &#xA; &lt;li&gt;create a &lt;code&gt;config.json&lt;/code&gt; file in the same directory as the executable file&lt;/li&gt; &#xA; &lt;li&gt;run the executable file&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Example Configuration(&lt;code&gt;config.json&lt;/code&gt; file) for IR-MCI:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;TLSHeaderLength&#34;: 5,&#xA;  &#34;TLSPaddingEnabled&#34;: false,&#xA;  &#34;TLSPaddingSize&#34;: [&#xA;    40,&#xA;    80&#xA;  ],&#xA;  &#34;RemoteDNSAddr&#34;: &#34;https://1.1.1.1/dns-query&#34;,&#xA;  &#34;EnableDNSFragmentation&#34;: false,&#xA;  &#34;DnsCacheTTL&#34;: 3000000,&#xA;  &#34;DnsRequestTimeout&#34;: 10,&#xA;  &#34;BindAddress&#34;: &#34;0.0.0.0:8085&#34;,&#xA;  &#34;ChunksLengthBeforeSni&#34;: [&#xA;    2000,&#xA;    2000&#xA;  ],&#xA;  &#34;SniChunksLength&#34;: [&#xA;    1,&#xA;    2&#xA;  ],&#xA;  &#34;ChunksLengthAfterSni&#34;: [&#xA;    2000,&#xA;    2000&#xA;  ],&#xA;  &#34;DelayBetweenChunks&#34;: [&#xA;    10,&#xA;    20&#xA;  ],&#xA;  &#34;WorkerAddress&#34;: &#34;https://&amp;lt;your_worker&amp;gt;.workers.dev/dns-query&#34;,&#xA;  &#34;WorkerIPPortAddress&#34;: &#34;104.16.246.91:8443&#34;,&#xA;  &#34;WorkerEnabled&#34;: true,&#xA;  &#34;WorkerDNSOnly&#34;: false,&#xA;  &#34;EnableLowLevelSockets&#34;: false,&#xA;  &#34;Hosts&#34;: [&#xA;    {&#xA;      &#34;Domain&#34;: &#34;yarp.lefolgoc.net&#34;,&#xA;      &#34;IP&#34;: &#34;5.39.88.20&#34;&#xA;    }&#xA;  ],&#xA;  &#34;UDPBindAddress&#34;: &#34;0.0.0.0&#34;,&#xA;  &#34;UDPReadTimeout&#34;: 120,&#xA;  &#34;UDPWriteTimeout&#34;: 120,&#xA;  &#34;UDPLinkIdleTimeout&#34;: 120&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Configuration Parameters&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;&#34;TLSHeaderLength&#34;: 5&lt;/code&gt;: Specifies the length of the TLS header, which is set to 5 bytes.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;&#34;TLSPaddingEnabled&#34;: false&lt;/code&gt;: Disables/Enable TLS padding.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;&#34;TLSPaddingSize&#34;: [40, 80]&lt;/code&gt;: Sets the TLS padding size range to be between 40 and 80 bytes.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;&#34;RemoteDNSAddr&#34;: &#34;https://1.1.1.1/dns-query&#34;&lt;/code&gt;: Specifies the remote DNS address for DNS queries. In this case, it&#39;s set to Cloudflare&#39;s DNS over HTTPS (DOH) service.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;&#34;EnableDNSFragmentation&#34;: false&lt;/code&gt;: Disables/Enable DNS fragmentation.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;&#34;DnsCacheTTL&#34;: 3000000&lt;/code&gt;: Sets the Time To Live (TTL) for DNS cache entries(seconds).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;&#34;DnsRequestTimeout&#34;: 10&lt;/code&gt;: Sets the timeout for DNS requests to 10 seconds.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;&#34;BindAddress&#34;: &#34;0.0.0.0:8085&#34;&lt;/code&gt;: Sets the bind address for the proxy server to listen on all available network interfaces (&lt;code&gt;0.0.0.0&lt;/code&gt;) on port &lt;code&gt;8085&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;&#34;ChunksLengthBeforeSni&#34;: [2000, 2000]&lt;/code&gt;: Specifies the length of chunks before the Server Name Indication (SNI) in the TLS handshake to be 2000 bytes.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;&#34;SniChunksLength&#34;: [5, 10]&lt;/code&gt;: Sets the SNI chunk length to be between 5 and 10 bytes.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;&#34;ChunksLengthAfterSni&#34;: [2000, 2000]&lt;/code&gt;: Specifies the length of chunks after the SNI in the TLS handshake to be 2000 bytes.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;&#34;DelayBetweenChunks&#34;: [10, 20]&lt;/code&gt;: Sets the delay between sending chunks to be between 10 and 20 milliseconds.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;&#34;WorkerAddress&#34;: &#34;https://&amp;lt;your_worker&amp;gt;.workers.dev/dns-query&#34;&lt;/code&gt;: Specifies the Cloudflare Worker address for proxy services.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;&#34;WorkerIPPortAddress&#34;: &#34;104.17.196.93:2096&#34;&lt;/code&gt;: Sets the IP address and port for the Cloudflare Worker.find clean CF IP and repalce it with this one to get better performance based on your internet quality and isp.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;&#34;WorkerEnabled&#34;: true&lt;/code&gt;: Disables/Enable the use of the Cloudflare Worker.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;&#34;WorkerDNSOnly&#34;: false&lt;/code&gt;: Indicates whether the Cloudflare Worker should be used for DNS queries only(If you just want to use the DOH over the worker set &lt;code&gt;true&lt;/code&gt;. But if you want a full-fledged TCP SOCKS5 proxy over the worker set &lt;code&gt;false&lt;/code&gt;).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;&#34;EnableLowLevelSockets&#34;: false&lt;/code&gt;: Disables/Enable low-level socket functionality.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;&#34;Hosts&#34;: [{ &#34;Domain&#34;: &#34;yarp.lefolgoc.net&#34;, &#34;IP&#34;: &#34;5.39.88.20&#34; }]&lt;/code&gt;: Specifies a list of custom hosts to map domain names to IP addresses. In this example, &#34;yarp.lefolgoc.net&#34; is mapped to &#34;5.39.88.20.&#34;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;&#34;UDPBindAddress&#34;: &#34;0.0.0.0&#34;&lt;/code&gt;: Sets the UDP bind address to listen on all available network interfaces (&lt;code&gt;0.0.0.0&lt;/code&gt;).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;&#34;UDPReadTimeout&#34;: 120&lt;/code&gt;: Sets the UDP read timeout to 120 seconds.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;&#34;UDPWriteTimeout&#34;: 120&lt;/code&gt;: Sets the UDP write timeout to 120 seconds.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;&#34;UDPLinkIdleTimeout&#34;: 120&lt;/code&gt;: Sets the UDP link idle timeout to 120 seconds.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Please note that you should replace &lt;code&gt;&amp;lt;your_worker&amp;gt;&lt;/code&gt; in &lt;code&gt;&#34;WorkerAddress&#34;&lt;/code&gt; with your actual Cloudflare Worker address. Additionally, ensure that you configure other settings as needed for your specific use case.&lt;/p&gt; &#xA;&lt;h2&gt;Build Instructions&lt;/h2&gt; &#xA;&lt;h3&gt;CLI Version&lt;/h3&gt; &#xA;&lt;p&gt;You can build the CLI version of Bepass as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/uoosef/bepass.git&#xA;cd bepass/bepass&#xA;make           # Build CLI debug version&#xA;make release   # Build CLI release version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;GUI Version (Work in Progress)&lt;/h3&gt; &#xA;&lt;p&gt;You can build GUI debug and release versions as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  git clone https://github.com/uoosef/bepass.git&#xA;  cd bepass/bepass&#xA;  make gui # For GUI debug version&#xA;  make gui-release # For GUI release version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A graphical user interface (GUI) version of Bepass is under development. Stay tuned for updates on its availability.&lt;/p&gt; &#xA;&lt;h2&gt;Deployment&lt;/h2&gt; &#xA;&lt;h3&gt;CLI Deployment&lt;/h3&gt; &#xA;&lt;p&gt;You can download the latest build from the release or just install Go 1.19+ and run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  git clone https://github.com/uoosef/bepass.git&#xA;  cd bepass/bepass&#xA;  go build ./cmd/cli/main.go&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It should give you an executable file, or you can simply run it in place.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  git clone https://github.com/uoosef/bepass.git&#xA;  cd bepass/bepass&#xA;  go run ./cmd/cli/main.go -c config.json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Roadmap&lt;/h2&gt; &#xA;&lt;p&gt;project roadmap includes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Self-Hosted DOH (Completed)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; TCP Proxy Over Worker (Completed)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; UDP Over Relay (Completed)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Relay (Completed)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Nekobox Plugin (Completed)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; MultiPlatform GUI Version (WIP)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Standelone Server&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Packet Level Mux&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Jesus Protocol&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This project is open-source and licensed under the &lt;a href=&#34;https://choosealicense.com/licenses/mit/&#34;&gt;MIT License&lt;/a&gt;. Feel free to contribute and use it in accordance with the license terms.&lt;/p&gt; &#xA;&lt;p&gt;⚠ Use this tool responsibly and ensure compliance with local laws and regulations. ⚠&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>marcoshuck/todo</title>
    <updated>2024-02-19T01:30:15Z</updated>
    <id>tag:github.com,2024-02-19:/marcoshuck/todo</id>
    <link href="https://github.com/marcoshuck/todo" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A production-grade todo app applying the following technologies: Go, gRPC, Docker, Kubernetes, Zap, Jaeger, Prometheus, Grafana and more&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ToDo Application&lt;/h1&gt; &#xA;&lt;p&gt;A web service written in Go, showcasing various features and technologies used in real world production-grade applications.&lt;/p&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;Hi, I&#39;m Marcos, a Software Engineer with a strong passion for crafting innovative distributed systems with more than four years of experience.&lt;/p&gt; &#xA;&lt;p&gt;This repository serves as my personal showcase, meticulously designed to demonstrate the power of Go in building production-grade web services that embrace cutting-edge technologies and deliver real-world value.&lt;/p&gt; &#xA;&lt;h3&gt;Let&#39;s Connect!&lt;/h3&gt; &#xA;&lt;p&gt;I&#39;m excited to explore potential collaborations. Feel free to reach out to me at &lt;a href=&#34;mailto:marcos@huck.com.ar&#34;&gt;marcos@huck.com.ar&lt;/a&gt; or &lt;a href=&#34;https://linkedin.com/in/marcoshuck&#34;&gt;add me on LinkedIn&lt;/a&gt; to discuss your needs and embark on a journey together.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Services&lt;/strong&gt;: Software Engineering, Mentorships, Software architecture, Personalized training in any of the tools listed below.&lt;/p&gt; &#xA;&lt;h2&gt;Design document&lt;/h2&gt; &#xA;&lt;p&gt;In case you&#39;re interested in the technical explanation about this repository, feel free to check out the &lt;a href=&#34;https://raw.githubusercontent.com/marcoshuck/todo/main/DESIGN.md&#34;&gt;DESIGN&lt;/a&gt; document.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Transport Mechanism&lt;/strong&gt;: &lt;a href=&#34;https://grpc.io/&#34;&gt;gRPC&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Infrastructure&lt;/strong&gt;:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Container engine: &lt;a href=&#34;https://www.docker.com/&#34;&gt;Docker&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Local deployment: &lt;a href=&#34;https://docs.docker.com/compose/&#34;&gt;Docker Compose&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Container orchestration: &lt;a href=&#34;https://kubernetes.io/&#34;&gt;Kubernetes&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Provisioning: &lt;a href=&#34;https://www.terraform.io/&#34;&gt;Terraform&lt;/a&gt; (WIP)&lt;/li&gt; &#xA;   &lt;li&gt;Code generation: &lt;a href=&#34;https://buf.build/&#34;&gt;Buf&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Telemetry&lt;/strong&gt;: Supporting &lt;a href=&#34;https://opentelemetry.io/&#34;&gt;OpenTelemetry&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Logging: &lt;a href=&#34;https://github.com/uber-go/zap&#34;&gt;Zap&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Tracing: &lt;a href=&#34;https://www.jaegertracing.io/&#34;&gt;Jaeger&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Metrics: &lt;a href=&#34;https://prometheus.io/&#34;&gt;Prometheus&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Testing &amp;amp; Benchmarking&lt;/strong&gt;:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://playwright.dev/&#34;&gt;Playwright&lt;/a&gt; for E2E testing&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Continuous Delivery&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Continuous Integration: &lt;a href=&#34;https://github.com/features/actions&#34;&gt;GitHub Actions&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Continuous Deployment: TBD.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Pull requests are welcome. For major changes, please open an issue first to discuss what you would like to change.&lt;/p&gt; &#xA;&lt;p&gt;Please make sure to update tests as appropriate.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/marcoshuck/todo/main/LICENSE&#34;&gt;MIT&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>blushft/go-diagrams</title>
    <updated>2024-02-19T01:30:15Z</updated>
    <id>tag:github.com,2024-02-19:/blushft/go-diagrams</id>
    <link href="https://github.com/blushft/go-diagrams" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Create beautiful system diagrams with Go&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Go-Diagrams&lt;/h1&gt; &#xA;&lt;h2&gt;Fast and easy application diagrams&lt;/h2&gt; &#xA;&lt;p&gt;Go-Diagrams is a loose port of &lt;a href=&#34;https://github.com/mingrammer/diagrams&#34;&gt;diagrams&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/blushft/go-diagrams/master/#features&#34;&gt;Features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/blushft/go-diagrams/master/#usage&#34;&gt;Usage&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;p&gt;Turn this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-golang&#34;&gt;d, err := diagram.New(diagram.Filename(&#34;app&#34;), diagram.Label(&#34;App&#34;), diagram.Direction(&#34;LR&#34;))&#xA;if err != nil {&#xA;    log.Fatal(err)&#xA;}&#xA;&#xA;dns := gcp.Network.Dns(diagram.NodeLabel(&#34;DNS&#34;))&#xA;lb := gcp.Network.LoadBalancing(diagram.NodeLabel(&#34;NLB&#34;))&#xA;cache := gcp.Database.Memorystore(diagram.NodeLabel(&#34;Cache&#34;))&#xA;db := gcp.Database.Sql(diagram.NodeLabel(&#34;Database&#34;))&#xA;&#xA;dc := diagram.NewGroup(&#34;GCP&#34;)&#xA;dc.NewGroup(&#34;services&#34;).&#xA;    Label(&#34;Service Layer&#34;).&#xA;    Add(&#xA;        gcp.Compute.ComputeEngine(diagram.NodeLabel(&#34;Server 1&#34;)),&#xA;        gcp.Compute.ComputeEngine(diagram.NodeLabel(&#34;Server 2&#34;)),&#xA;        gcp.Compute.ComputeEngine(diagram.NodeLabel(&#34;Server 3&#34;)),&#xA;    ).&#xA;    ConnectAllFrom(lb.ID(), diagram.Forward()).&#xA;    ConnectAllTo(cache.ID(), diagram.Forward())&#xA;&#xA;dc.NewGroup(&#34;data&#34;).Label(&#34;Data Layer&#34;).Add(cache, db).Connect(cache, db)&#xA;&#xA;d.Connect(dns, lb, diagram.Forward()).Group(dc)&#xA;&#xA;if err := d.Render(); err != nil {&#xA;    log.Fatal(err)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Into this:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/blushft/go-diagrams/master/images/app-diagram.png&#34; alt=&#34;app-diagram&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;go get github.com/blushft/go-diagrams&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Create a diagram:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-golang&#34;&gt;d, err := diagram.New(diagram.Label(&#34;my-diagram&#34;), diagram.Filename(&#34;diagram&#34;))&#xA;if err != nil {&#xA;    log.Fatal(err)&#xA;}&#xA;&#xA;fw := generic.Network.Firewall().Label(&#34;fw&#34;)&#xA;sw := generic.Network.Switch().Label(&#34;sw&#34;)&#xA;&#xA;d.Connect(fw, sw)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Render the output:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-golang&#34;&gt;if err := d.Render(); err != nil {&#xA;    log.Fatal(err)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Go-Diagrams will create a folder in the current working directory with the graphviz DOT file and any image assets.&lt;/p&gt; &#xA;&lt;p&gt;Create an ouput image with any graphviz compatible renderer:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;dot -Tpng diagram.dot &amp;gt; diagram.png&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>