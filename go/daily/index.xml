<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-02-23T01:28:37Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>go-fuego/fuego</title>
    <updated>2024-02-23T01:28:37Z</updated>
    <id>tag:github.com,2024-02-23:/go-fuego/fuego</id>
    <link href="https://github.com/go-fuego/fuego" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Golang Fuego - web framework generating OpenAPI 3 spec from source code&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/go-fuego/fuego/main/data/fuego.svg?sanitize=true&#34; height=&#34;200&#34; alt=&#34;Fuego Logo&#34;&gt; &lt;/p&gt; &#xA;&lt;h1&gt;Fuego ðŸ”¥&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/go-fuego/fuego&#34;&gt;&lt;img src=&#34;https://pkg.go.dev/badge/github.com/go-fuego/fuego.svg?sanitize=true&#34; alt=&#34;Go Reference&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/go-fuego/fuego&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/go-fuego/fuego&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://coveralls.io/github/go-fuego/fuego?branch=main&#34;&gt;&lt;img src=&#34;https://coveralls.io/repos/github/go-fuego/fuego/badge.svg?branch=main&#34; alt=&#34;Coverage Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;The framework for busy Go developers&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;strong&gt;Build your API or web application in minutes!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Go framework generating OpenAPI documentation from code. Inspired by Nest, built for Go developers.&lt;/p&gt; &#xA;&lt;p&gt;Also empowers &lt;code&gt;html/template&lt;/code&gt;, &lt;code&gt;a-h/templ&lt;/code&gt; and &lt;code&gt;maragudk/gomponents&lt;/code&gt;: see &lt;a href=&#34;https://raw.githubusercontent.com/go-fuego/fuego/main/examples/full-app-gourmet&#34;&gt;the example&lt;/a&gt; - actually running &lt;a href=&#34;https://gourmet.quimerch.com&#34;&gt;in prod&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;h2&gt;Why Fuego?&lt;/h2&gt; &#xA;&lt;p&gt;Chi, Gin, Fiber and Echo are great frameworks. But since they were designed a long time ago, they do not enjoy the possibilities that modern Go provides. Fuego offers a lot of features that make it easy to develop APIs and web applications.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;OpenAPI&lt;/strong&gt;: Fuego automatically generates OpenAPI documentation from &lt;strong&gt;code&lt;/strong&gt; - &lt;em&gt;not from comments nor yaml files!&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;net/http&lt;/code&gt; compatible&lt;/strong&gt;: Fuego is built on top of &lt;code&gt;net/http&lt;/code&gt;, so you can use any &lt;code&gt;http.Handler&lt;/code&gt; middleware or handler! Fuego also supports &lt;code&gt;log/slog&lt;/code&gt;, &lt;code&gt;context&lt;/code&gt; and &lt;code&gt;html/template&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Routing&lt;/strong&gt;: Fuego provides a simple API for the Go 1.22 &lt;code&gt;net/http&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Serialization/Deserialization&lt;/strong&gt;: Fuego automatically serializes and deserializes JSON, XML and HTML Forms based on user-provided structs (or not, if you want to do it yourself)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Validation&lt;/strong&gt;: Fuego provides a simple and fast validator based on &lt;code&gt;go-playground/validator&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Transformation&lt;/strong&gt;: easily transform your data by implementing the &lt;code&gt;fuego.InTransform&lt;/code&gt; and &lt;code&gt;fuego.OutTransform&lt;/code&gt; interfaces - also useful for &lt;strong&gt;validation&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Middlewares&lt;/strong&gt;: easily add a custom &lt;code&gt;net/http&lt;/code&gt; middleware or use the provided middlewares.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Error handling&lt;/strong&gt;: Fuego provides centralized error handling with the standard &lt;a href=&#34;https://www.rfc-editor.org/rfc/rfc9457&#34;&gt;RFC 9457&lt;/a&gt; incoming.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Rendering&lt;/strong&gt;: Fuego provides a simple and fast rendering system based on &lt;code&gt;html/template&lt;/code&gt; - you can still also use your own template system like &lt;code&gt;templ&lt;/code&gt; or &lt;code&gt;gomponents&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;h3&gt;Hello World&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import &#34;github.com/go-fuego/fuego&#34;&#xA;&#xA;func main() {&#xA;&#x9;s := fuego.NewServer()&#xA;&#xA;&#x9;fuego.Get(s, &#34;/&#34;, func(c fuego.ContextNoBody) (string, error) {&#xA;&#x9;&#x9;return &#34;Hello, World!&#34;, nil&#xA;&#x9;})&#xA;&#xA;&#x9;s.Run()&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Simple POST&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import &#34;github.com/go-fuego/fuego&#34;&#xA;&#xA;type MyInput struct {&#xA;&#x9;Name string `json:&#34;name&#34; validate:&#34;required&#34;`&#xA;}&#xA;&#xA;type MyOutput struct {&#xA;&#x9;Message string `json:&#34;message&#34;`&#xA;}&#xA;&#xA;func main() {&#xA;&#x9;s := fuego.NewServer()&#xA;&#xA;&#x9;// Automatically generates OpenAPI documentation for this route&#xA;&#x9;fuego.Post(s, &#34;/&#34;, func(c *fuego.ContextWithBody[MyInput]) (MyOutput, error) {&#xA;&#x9;&#x9;body, err := c.Body()&#xA;&#x9;&#x9;if err != nil {&#xA;&#x9;&#x9;&#x9;return MyOutput{}, err&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;return MyOutput{&#xA;&#x9;&#x9;&#x9;Message: &#34;Hello, &#34; + body.Name,&#xA;&#x9;&#x9;}, nil&#xA;&#x9;})&#xA;&#xA;&#x9;s.Run()&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;With transformation &amp;amp; custom validation&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type MyInput struct {&#xA;&#x9;Name string `json:&#34;name&#34; validate:&#34;required&#34;`&#xA;}&#xA;&#xA;// Will be called just before returning c.Body()&#xA;func (r *MyInput) InTransform(context.Context) error {&#xA;&#x9;r.Name = strings.ToLower(r.Name)&#xA;&#xA;&#x9;if r.Name == &#34;fuego&#34; {&#xA;&#x9;&#x9;return errors.New(&#34;fuego is not a valid name for this input&#34;)&#xA;&#x9;}&#xA;&#xA;&#x9;return nil&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;More OpenAPI documentation&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import &#34;github.com/go-fuego/fuego&#34;&#xA;&#xA;func main() {&#xA;&#x9;s := fuego.NewServer()&#xA;&#xA;&#x9;// Custom OpenAPI options that cannot be deduced by the controller signature&#xA;&#x9;fuego.Post(s, &#34;/&#34;, myController).&#xA;&#x9;&#x9;Description(&#34;This route does something&#34;).&#xA;&#x9;&#x9;Summary(&#34;This is my summary&#34;).&#xA;&#x9;&#x9;Tags(&#34;MyTag&#34;). // A tag is set by default according to the return type (can be desactivated)&#xA;&#x9;&#x9;Deprecated()&#xA;&#xA;&#x9;s.Run()&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Std lib compatibility&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;net/http&#34;&#xA;&#x9;&#34;github.com/go-fuego/fuego&#34;&#xA;)&#xA;&#xA;func main() {&#xA;&#x9;s := fuego.NewServer()&#xA;&#xA;&#x9;// Standard net/http middleware&#xA;&#x9;fuego.Use(s, func(next http.Handler) http.Handler {&#xA;&#x9;&#x9;return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {&#xA;&#x9;&#x9;&#x9;w.Header().Set(&#34;X-Hello&#34;, &#34;World&#34;)&#xA;&#x9;&#x9;&#x9;next.ServeHTTP(w, r)&#xA;&#x9;&#x9;})&#xA;&#x9;})&#xA;&#xA;&#x9;// Standard net/http handler with automatic OpenAPI route declaration&#xA;&#x9;fuego.GetStd(s, &#34;/std&#34;, func(w http.ResponseWriter, r *http.Request) {&#xA;&#x9;&#x9;w.Write([]byte(&#34;Hello, World!&#34;))&#xA;&#x9;})&#xA;&#xA;&#x9;s.Run()&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;All features&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;context&#34;&#xA;&#x9;&#34;errors&#34;&#xA;&#x9;&#34;net/http&#34;&#xA;&#x9;&#34;strings&#34;&#xA;&#xA;&#x9;chiMiddleware &#34;github.com/go-chi/chi/v5/middleware&#34;&#xA;&#x9;&#34;github.com/go-fuego/fuego&#34;&#xA;&#x9;&#34;github.com/rs/cors&#34;&#xA;)&#xA;&#xA;type Received struct {&#xA;&#x9;Name string `json:&#34;name&#34; validate:&#34;required&#34;`&#xA;}&#xA;&#xA;type MyResponse struct {&#xA;&#x9;Message       string `json:&#34;message&#34;`&#xA;&#x9;BestFramework string `json:&#34;best&#34;`&#xA;}&#xA;&#xA;func main() {&#xA;&#x9;s := fuego.NewServer(&#xA;&#x9;&#x9;fuego.WithPort(&#34;:8088&#34;),&#xA;&#x9;)&#xA;&#xA;&#x9;fuego.Use(s, cors.Default().Handler)&#xA;&#x9;fuego.Use(s, chiMiddleware.Compress(5, &#34;text/html&#34;, &#34;text/css&#34;))&#xA;&#xA;&#x9;// Fuego ðŸ”¥ handler with automatic OpenAPI generation, validation, (de)serialization and error handling&#xA;&#x9;fuego.Post(s, &#34;/&#34;, func(c *fuego.ContextWithBody[Received]) (MyResponse, error) {&#xA;&#x9;&#x9;data, err := c.Body()&#xA;&#x9;&#x9;if err != nil {&#xA;&#x9;&#x9;&#x9;return MyResponse{}, err&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;c.Response().Header().Set(&#34;X-Hello&#34;, &#34;World&#34;)&#xA;&#xA;&#x9;&#x9;return MyResponse{&#xA;&#x9;&#x9;&#x9;Message:       &#34;Hello, &#34; + data.Name,&#xA;&#x9;&#x9;&#x9;BestFramework: &#34;Fuego!&#34;,&#xA;&#x9;&#x9;}, nil&#xA;&#x9;})&#xA;&#xA;&#x9;// Standard net/http handler with automatic OpenAPI route declaration&#xA;&#x9;fuego.GetStd(s, &#34;/std&#34;, func(w http.ResponseWriter, r *http.Request) {&#xA;&#x9;&#x9;w.Write([]byte(&#34;Hello, World!&#34;))&#xA;&#x9;})&#xA;&#xA;&#x9;s.Run()&#xA;}&#xA;&#xA;// InTransform will be called when using c.Body().&#xA;// It can be used to transform the entity and raise custom errors&#xA;func (r *Received) InTransform(context.Context) error {&#xA;&#x9;r.Name = strings.ToLower(r.Name)&#xA;&#x9;if r.Name == &#34;fuego&#34; {&#xA;&#x9;&#x9;return errors.New(&#34;fuego is not a name&#34;)&#xA;&#x9;}&#xA;&#x9;return nil&#xA;}&#xA;&#xA;// OutTransform will be called before sending data&#xA;func (r *MyResponse) OutTransform(context.Context) error {&#xA;&#x9;r.Message = strings.ToUpper(r.Message)&#xA;&#x9;return nil&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl  http://localhost:8088/std&#xA;# Hello, World!&#xA;curl http://localhost:8088 -X POST -d &#39;{&#34;name&#34;: &#34;Your Name&#34;}&#39; -H &#39;Content-Type: application/json&#39;&#xA;# {&#34;message&#34;:&#34;HELLO, YOUR NAME&#34;,&#34;best&#34;:&#34;Fuego!&#34;}&#xA;curl http://localhost:8088 -X POST -d &#39;{&#34;name&#34;: &#34;Fuego&#34;}&#39; -H &#39;Content-Type: application/json&#39;&#xA;# {&#34;error&#34;:&#34;cannot transform request body: cannot transform request body: fuego is not a name&#34;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;From net/http to Fuego in 10s&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/go-fuego/fuego/assets/46993939/7438a71c-75a4-4e88-a584-71da6362c575&#34;&gt;https://github.com/go-fuego/fuego/assets/46993939/7438a71c-75a4-4e88-a584-71da6362c575&lt;/a&gt;&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Views&lt;/summary&gt; &#xA; &lt;h4&gt;Before&lt;/h4&gt; &#xA; &lt;img width=&#34;946&#34; alt=&#34;image&#34; src=&#34;https://github.com/go-fuego/fuego/assets/46993939/394fed17-a1e2-4b67-89b2-8e6c9eeb771b&#34;&gt; &#xA; &lt;h4&gt;After&lt;/h4&gt; &#xA; &lt;img width=&#34;1010&#34; alt=&#34;image&#34; src=&#34;https://github.com/go-fuego/fuego/assets/46993939/321088d7-bec4-46cc-a7ee-9a0fa45d7711&#34;&gt; &#xA; &lt;h4&gt;Diff&lt;/h4&gt; &#xA; &lt;img width=&#34;1413&#34; alt=&#34;image&#34; src=&#34;https://github.com/go-fuego/fuego/assets/46993939/18796a59-b2e4-4e01-81d1-88c581de3466&#34;&gt; &#xA; &lt;h4&gt;Benefits of using Fuego views (controllers returning HTML)&lt;/h4&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Never forget to return after an error&lt;/li&gt; &#xA;  &lt;li&gt;OpenAPI schema generated, listing all the routes&lt;/li&gt; &#xA;  &lt;li&gt;Deserialization and validation are more easy&lt;/li&gt; &#xA;  &lt;li&gt;Transition to Fuego is easy and fast&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/go-fuego/fuego/main/CONTRIBUTING.md&#34;&gt;contributing guide&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Disclaimer for experienced gophers&lt;/h2&gt; &#xA;&lt;p&gt;I know you might prefer to use &lt;code&gt;net/http&lt;/code&gt; directly, but if having a frame can convince my company to use Go instead of Node, I&#39;m happy to use it.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/go-fuego/fuego/main/LICENSE.txt&#34;&gt;GPL&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>