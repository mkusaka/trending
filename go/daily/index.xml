<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-11-30T01:32:22Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>secengjeff/awskillswitch</title>
    <updated>2023-11-30T01:32:22Z</updated>
    <id>tag:github.com,2023-11-30:/secengjeff/awskillswitch</id>
    <link href="https://github.com/secengjeff/awskillswitch" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Lambda function that streamlines containment of an AWS account compromise&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;AWS Kill Switch&lt;/h1&gt; &#xA;&lt;p&gt;AWS Kill Switch is a Lambda function (and proof of concept client) that an organization can implement in a dedicated &#34;Security&#34; account to give their security engineers the ability to delete IAM roles or apply a highly restrictive service control policy (SCP) on any account in their organization.&lt;/p&gt; &#xA;&lt;h2&gt;Prerequisites&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://golang.org/dl/&#34;&gt;Go&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Tested on go1.21.3 on arm64.&lt;/p&gt; &#xA;&lt;h2&gt;Preparation&lt;/h2&gt; &#xA;&lt;p&gt;This tool requires you to have roles that you can assume from a dedicated &#34;Security&#34; account to your organization management account (&lt;code&gt;apply_scp&lt;/code&gt;) or to any account in your organization (&lt;code&gt;detach_policies&lt;/code&gt; or &lt;code&gt;delete_role&lt;/code&gt;). You can use &lt;a href=&#34;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/what-is-cfnstacksets.html&#34;&gt;AWS CloudFormation StackSets&lt;/a&gt; to automate the creation of these roles.&lt;/p&gt; &#xA;&lt;h3&gt;Required permissions&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Action&lt;/th&gt; &#xA;   &lt;th&gt;Required permissions&lt;/th&gt; &#xA;   &lt;th&gt;Other requirements&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;apply_scp&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;organizations:CreatePolicy, organizations:AttachPolicy&lt;/td&gt; &#xA;   &lt;td&gt;Role to assume must be in the organization management account&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;detach_policies&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;iam:ListAttachedRolePolicies, iam:DetachRolePolicy, iam:ListRolePolicies, iam:DeleteRolePolicy&lt;/td&gt; &#xA;   &lt;td&gt;Role to assume must be in the targeted account&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;delete_role&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;iam:DeleteRole, iam:ListAttachedRolePolicies, iam:DetachRolePolicy, iam:ListRolePolicies, iam:DeleteRolePolicy&lt;/td&gt; &#xA;   &lt;td&gt;Role to assume must be in the targeted account&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Prevent tampering&lt;/h3&gt; &#xA;&lt;p&gt;You should take steps to ensure that a threat actor cannot make modifications to the IAM role that you plan to assume during a security incident. Consider implementing a SCP like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;{    &#xA;  &#34;Version&#34;: &#34;2012-10-17&#34;,&#xA;  &#34;Statement&#34;: [&#xA;    {&#xA;      &#34;Sid&#34;: &#34;DenyAccessToASpecificRole&#34;,&#xA;      &#34;Effect&#34;: &#34;Deny&#34;,&#xA;      &#34;Action&#34;: [&#xA;        &#34;iam:AttachRolePolicy&#34;,&#xA;        &#34;iam:DeleteRole&#34;,&#xA;        &#34;iam:DeleteRolePermissionsBoundary&#34;,&#xA;        &#34;iam:DeleteRolePolicy&#34;,&#xA;        &#34;iam:DetachRolePolicy&#34;,&#xA;        &#34;iam:PutRolePermissionsBoundary&#34;,&#xA;        &#34;iam:PutRolePolicy&#34;,&#xA;        &#34;iam:UpdateAssumeRolePolicy&#34;,&#xA;        &#34;iam:UpdateRole&#34;,&#xA;        &#34;iam:UpdateRoleDescription&#34;&#xA;      ],&#xA;      &#34;Resource&#34;: [&#xA;        &#34;arn:aws:iam::*:role/security-role&#34;&#xA;      ]&#xA;    }&#xA;  ]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This example assumes that you created a service managed StackSet in your organization that automatically creates &lt;code&gt;security-role&lt;/code&gt; in every account. With this SCP the threat actor will be unable to tamper with your role or attached policies, even if they have elevated permissions that would otherwise allow manipulation of roles and policies.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Clone the Repository&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/secengjeff/awskillswitch.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Installing&lt;/h3&gt; &#xA;&lt;p&gt;&lt;span&gt;⚠&lt;/span&gt; Before building the awskillswitch Lambda function review &lt;code&gt;awskillswitch.go&lt;/code&gt; and consider modifying &lt;code&gt;switch.conf&lt;/code&gt; to meet your organization&#39;s unique requirements. By default the &lt;code&gt;apply_scp&lt;/code&gt; action will restrict all IAM actions on the account with the exception of &lt;code&gt;cloudwatch:*&lt;/code&gt;, &lt;code&gt;cloudtrail:*&lt;/code&gt;, and &lt;code&gt;guardduty:*&lt;/code&gt;. This may break your application.&lt;/p&gt; &#xA;&lt;p&gt;Follow these steps to build the awskillswitch Lambda function and zip the binary:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd awskillswitch&#xA;&#xA;GOOS=&#34;linux&#34; GOARCH=&#34;amd64&#34; go build -o main awskillswitch.go&#xA;&#xA;zip main.zip main switch.conf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Create an execution role (&lt;code&gt;execution_role.json&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;{&#xA;  &#34;Version&#34;: &#34;2012-10-17&#34;,&#xA;  &#34;Statement&#34;: [&#xA;    {&#xA;      &#34;Effect&#34;: &#34;Allow&#34;,&#xA;      &#34;Principal&#34;: {&#xA;        &#34;Service&#34;: &#34;lambda.amazonaws.com&#34;&#xA;      },&#xA;      &#34;Action&#34;: &#34;sts:AssumeRole&#34;&#xA;    }&#xA;  ]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Create a permission policy (&lt;code&gt;permission_policy.json&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;{&#xA;    &#34;Version&#34;: &#34;2012-10-17&#34;,&#xA;    &#34;Statement&#34;: [&#xA;        {&#xA;            &#34;Effect&#34;: &#34;Allow&#34;,&#xA;            &#34;Action&#34;: &#34;sts:AssumeRole&#34;,&#xA;            &#34;Resource&#34;: &#34;arn:aws:iam::*:role/*&#34;&#xA;        },&#xA;        {&#xA;            &#34;Effect&#34;: &#34;Allow&#34;,&#xA;            &#34;Action&#34;: [&#xA;                &#34;logs:CreateLogGroup&#34;,&#xA;                &#34;logs:CreateLogStream&#34;,&#xA;                &#34;logs:PutLogEvents&#34;&#xA;            ],&#xA;            &#34;Resource&#34;: &#34;arn:aws:logs:*:*:*&#34;&#xA;        }&#xA;    ]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Deploy the execution role, permission policy, and create the Lambda function:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;aws iam create-role --role-name executionRole --assume-role-policy-document file://execution_role.json&#xA;&#xA;aws iam put-role-policy --role-name executionRole --policy-name permissionPolicy --policy-document file://permission_policy.json&#xA;&#xA;aws lambda create-function --function-name awskillswitch --zip-file fileb://main.zip --handler main --runtime go1.x --role executionRoleArn --timeout 15 --memory-size 128&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can test the function using the included proof of concept client. You can use this as a standalone application or as an example of how to invoke the client from within your own tooling and automation:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd awskillswitch/client&#xA;&#xA;go build -o killswitchclient killswitchclient.go&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Usage&lt;/h3&gt; &#xA;&lt;p&gt;&lt;span&gt;⚠&lt;/span&gt; The actions you take with this tool are one-way operations. Do not test/experiment in production. Any SCPs applied or IAM roles deleted will remain in this state until manual action is taken to remove the SCP or recreate deleted role and/or policies. Ensure that you have the the ability to reverse these changes and incorporate the appropriate steps in your incident response playbooks.&lt;/p&gt; &#xA;&lt;h3&gt;Environment&lt;/h3&gt; &#xA;&lt;p&gt;You can run this client locally by manually setting AWS CLI environment variables &lt;code&gt;AWS_ACCESS_KEY_ID&lt;/code&gt;, &lt;code&gt;AWS_SECRET_ACCESS_KEY&lt;/code&gt;, and &lt;code&gt;AWS_SESSION_TOKEN&lt;/code&gt; (if applicable) for any IAM user or assumed role with a policy that allows &lt;code&gt;lambda:InvokeFunction&lt;/code&gt; for the ARN of the function that you created. It will not function if you&#39;re assuming a role using the &lt;code&gt;AWS_PROFILE&lt;/code&gt; variable. You can also run this client from an EC2 instance with an instance policy that allows &lt;code&gt;lambda:InvokeFunction&lt;/code&gt; for the ARN of the function that you created.&lt;/p&gt; &#xA;&lt;h3&gt;Flags&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;action&lt;/code&gt;: Specifies the action to perform. Valid values are &lt;code&gt;apply_scp&lt;/code&gt;, &lt;code&gt;detach_policies&lt;/code&gt;, or &lt;code&gt;delete_role&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lambda&lt;/code&gt;: The name or ARN of the AWS Lambda function to invoke.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;target_account&lt;/code&gt;: The AWS Account ID where the action will take place.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;role_to_assume&lt;/code&gt;: The IAM role that will be assumed by the Lambda function to perform the action.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;target_role&lt;/code&gt;: The name of the IAM role to delete (required only for the &lt;code&gt;detach_policies&lt;/code&gt; and &lt;code&gt;delete_role&lt;/code&gt; actions).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;org_management_account&lt;/code&gt;: The AWS Organization&#39;s management account ID (required only for the &lt;code&gt;apply_scp&lt;/code&gt; action).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;region&lt;/code&gt;: The AWS region where the Lambda function is deployed (defaults to us-east-1 if none provided)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you prefer to call the Lambda function directly your application will need to &lt;code&gt;invokeLambda&lt;/code&gt; with one of the following payloads:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;To apply a restrictive SCP:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;{&#xA;  &#34;action&#34;: &#34;apply_scp&#34;,&#xA;  &#34;target_account_id&#34;: &#34;123456789012&#34;,&#xA;  &#34;role_to_assume&#34;: &#34;RoleToAssume&#34;,&#xA;  &#34;org_management_account&#34;: &#34;998877665544&#34;&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This call will apply the SCP defined by &lt;code&gt;scpPolicy&lt;/code&gt; in &lt;code&gt;switch.conf&lt;/code&gt; to the AWS account &lt;code&gt;123456789012&lt;/code&gt; by assuming &lt;code&gt;RoleToAssume&lt;/code&gt; in AWS account &lt;code&gt;998877665544&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;To detach policies from an IAM role:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;{&#xA;  &#34;action&#34;: &#34;detach_policies&#34;,&#xA;  &#34;target_account_id&#34;: &#34;210987654321&#34;,&#xA;  &#34;role_to_assume&#34;: &#34;RoleToAssume&#34;,&#xA;  &#34;target_role_name&#34;: &#34;RoleToDetach&#34;&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This call will detach IAM policies and delete inline IAM policies from &lt;code&gt;RoleToDetach&lt;/code&gt; in AWS account &lt;code&gt;210987654321&lt;/code&gt; by assuming &lt;code&gt;RoleToAssume&lt;/code&gt; in the same account.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;To delete an IAM role:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;{&#xA;  &#34;action&#34;: &#34;delete_role&#34;,&#xA;  &#34;target_account_id&#34;: &#34;210987654321&#34;,&#xA;  &#34;role_to_assume&#34;: &#34;RoleToAssume&#34;,&#xA;  &#34;target_role_name&#34;: &#34;RoleToDelete&#34;&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This call will delete the IAM role &lt;code&gt;RoleToDelete&lt;/code&gt; in AWS account &lt;code&gt;210987654321&lt;/code&gt; by assuming &lt;code&gt;RoleToAssume&lt;/code&gt; in the same account.&lt;/p&gt; &#xA;&lt;h3&gt;Example&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Applying a restrictive SCP&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./awskillswitch -action apply_scp -lambda &#34;LambdaArn&#34; -target_account &#34;123456789012&#34; -role_to_assume &#34;RoleToAssume&#34; -org_management_account &#34;998877665544&#34; -region &#34;us-east-1&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This command will apply the SCP defined by &lt;code&gt;scpPolicy&lt;/code&gt; in &lt;code&gt;switch.conf&lt;/code&gt; to the AWS account &lt;code&gt;123456789012&lt;/code&gt; by assuming &lt;code&gt;RoleToAssume&lt;/code&gt; in AWS account &lt;code&gt;998877665544&lt;/code&gt; using the &lt;code&gt;LambdaArn&lt;/code&gt; function deployed to &lt;code&gt;us-east-1&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Detaching policies from an IAM role:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./awskillswitch -action detach_policies -lambda &#34;LambdaArn&#34; -target_account &#34;210987654321&#34; -role_to_assume &#34;RoleToAssume&#34; -target_role &#34;RoleToDelete&#34; -region &#34;us-east-1&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This command will detach IAM policies and delete inline policies from &lt;code&gt;RoleToDetach&lt;/code&gt; in AWS account &lt;code&gt;210987654321&lt;/code&gt; by assuming &lt;code&gt;RoleToAssume&lt;/code&gt; in the same account using the &lt;code&gt;LambdaArn&lt;/code&gt; Lambda function deployed to &lt;code&gt;us-east-1&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Deleting an IAM role:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./awskillswitch -action delete_role -lambda &#34;LambdaArn&#34; -target_account &#34;210987654321&#34; -role_to_assume &#34;RoleToAssume&#34; -target_role &#34;RoleToDelete&#34; -region &#34;us-east-1&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This command will delete the IAM role &lt;code&gt;RoleToDelete&lt;/code&gt; in AWS account &lt;code&gt;210987654321&lt;/code&gt; by assuming &lt;code&gt;RoleToAssume&lt;/code&gt; in the same account using the &lt;code&gt;LambdaArn&lt;/code&gt; Lambda function deployed to &lt;code&gt;us-east-1&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Built With&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/aws/aws-sdk-go&#34;&gt;aws-sdk-go&lt;/a&gt; - AWS SDK&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/aws/aws-lambda-go&#34;&gt;aws-lambda-go&lt;/a&gt; - AWS Lambda libraries&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Authors&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Jeffrey Lyon - &lt;em&gt;Initial release&lt;/em&gt; - @secengjeff&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See also the list of &lt;a href=&#34;https://github.com/secengjeff/rapidresetclient/contributors&#34;&gt;contributors&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This project is licensed under the Apache License - see the &lt;a href=&#34;https://raw.githubusercontent.com/secengjeff/awskillswitch/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt; file for details&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>bepass-org/smartSNI</title>
    <updated>2023-11-30T01:32:22Z</updated>
    <id>tag:github.com,2023-11-30:/bepass-org/smartSNI</id>
    <link href="https://github.com/bepass-org/smartSNI" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A simple single file smart sni proxy with doh and dot written in go&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Smart SNI and DNS Proxy Server&lt;/h1&gt; &#xA;&lt;p&gt;This DNS Proxy Server is a Go-based server capable of handling both DNS-over-HTTPS (DoH) and DNS-over-TLS (DoT) requests. It features rate limiting and can process DNS queries based on a custom JSON configuration file.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;DNS-over-HTTPS (DoH):&lt;/strong&gt; Accepts and processes DNS queries over HTTPS.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;DNS-over-TLS (DoT):&lt;/strong&gt; Accepts and processes DNS queries over TLS.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Rate Limiting:&lt;/strong&gt; Throttles the number of requests using a limiter.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Custom Domain Handling:&lt;/strong&gt; Matches DNS queries to a list of specified domains and returns corresponding IP addresses.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;SNI Proxy:&lt;/strong&gt; Proxies non-matching domains to their respective addresses.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Configurable:&lt;/strong&gt; Uses a &lt;code&gt;config.json&lt;/code&gt; file to define behavior for specified domains.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;The server uses a &lt;code&gt;config.json&lt;/code&gt; file which should be structured as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;host&#34;: &#34;your.host.com&#34;,&#xA;  &#34;domains&#34;: {&#xA;    &#34;example.com&#34;: &#34;1.2.3.4&#34;,&#xA;    &#34;anotherdomain.com&#34;: &#34;1.2.3.4&#34;&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Replace the IP addresses with your server&#39;s public IP to ensure transparent proxying(Here it&#39;s 1.2.3.4).&lt;br&gt; &lt;br&gt; You can use this code to proxy all domains(its not recommended)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;host&#34;: &#34;your.host.com&#34;,&#xA;  &#34;domains&#34;: {&#xA;    &#34;.&#34;: &#34;1.2.3.4&#34;&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;TLS Certificates&lt;/h2&gt; &#xA;&lt;p&gt;The DoT and DOH servers expect TLS certificates to be located at &lt;code&gt;/etc/letsencrypt/live/your.host.com/&lt;/code&gt;. Make sure you have valid certificates named &lt;code&gt;fullchain.pem&lt;/code&gt; and &lt;code&gt;privkey.pem&lt;/code&gt;.&lt;br&gt; &lt;br&gt; You can obtain a valid certificate for your domain with lets encrypt&lt;/p&gt; &#xA;&lt;h2&gt;Auto Install&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;bash &amp;lt;(curl -fsSL https://raw.githubusercontent.com/bepass-org/smartSNI/main/install.sh)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Manual Setup&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install Requirements&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;apt update&#xA;apt install nginx certbot python3-certbot-nginx&#xA;snap install go --classic&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Change server_name in /etc/nginx/sites-enabled/default to your &lt;code&gt;domain&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Obtain a valid certificate for nginx&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;certbot --nginx -d &amp;lt;YOUR_DOMAIN&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;Clone the repository to your local machine.&lt;/li&gt; &#xA; &lt;li&gt;Create and configure your &lt;code&gt;config.json&lt;/code&gt; file.&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;go build&lt;/code&gt; to compile the server.&lt;/li&gt; &#xA; &lt;li&gt;Run the compiled binary to start the server in tmux or in background with nohup.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./name-of-compiled-binary&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Rate Limiting&lt;/h2&gt; &#xA;&lt;p&gt;The server uses the &lt;code&gt;golang.org/x/time/rate&lt;/code&gt; package to implement rate limiting. You can adjust the rate limiter in the &lt;code&gt;main&lt;/code&gt; function to suit your needs.&lt;/p&gt; &#xA;&lt;h2&gt;Contributions&lt;/h2&gt; &#xA;&lt;p&gt;Contributions to this project are welcome. Please fork the repository, make your changes, and submit a pull request.&lt;/p&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;p&gt;Special thanks to &lt;a href=&#34;https://github.com/Ptechgithub&#34;&gt;Peyman&lt;/a&gt; for auto install script&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This project is open-source and available under the &lt;a href=&#34;https://raw.githubusercontent.com/bepass-org/smartSNI/main/LICENSE&#34;&gt;MIT License&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>